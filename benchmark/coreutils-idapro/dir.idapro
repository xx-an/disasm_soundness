LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 02C7E6039F3731A5BAA8A10C6C7A03672DD38C3BD5EA261A2701D44C76F7058F
LOAD:0000000000000000 ; Input MD5    : 50B38B332A12D2DCBD811D8CE35F3F59
LOAD:0000000000000000 ; Input CRC32  : 3341045A
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/dir
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'ls.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'ls-dir.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'c-strncasecmp.c'
LOAD:0000000000000000 ; Source File : 'canonicalize.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-has-acl.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'filemode.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'filevercmp.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'human.c'
LOAD:0000000000000000 ; Source File : 'idcache.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'mbsalign.c'
LOAD:0000000000000000 ; Source File : 'mbswidth.c'
LOAD:0000000000000000 ; Source File : 'mpsort.c'
LOAD:0000000000000000 ; Source File : 'nstrftime.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'xgethostname.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'xstrtol-error.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'obstack.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000318↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000330↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 98158h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 1E298h               ; Size in file image
LOAD:00000000000000D8                 dq 1E298h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1F050h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 21F050h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 1218h                ; Size in file image
LOAD:0000000000000110                 dq 2508h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1FA98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 21FA98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 1ADDCh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 1ADDCh               ; Physical address
LOAD:00000000000001B0                 dq 874h                 ; Size in file image
LOAD:00000000000001B8                 dq 874h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1F050h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 21F050h              ; Physical address
LOAD:0000000000000220                 dq 0FB0h                ; Size in file image
LOAD:0000000000000228                 dq 0FB0h                ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0FCh, 73h, 70h, 56h, 3Bh, 3Fh, 5Dh, 0D6h, 0B5h, 90h ; Desc
LOAD:0000000000000284                 db 88h, 53h, 0A6h, 1Bh, 3Eh, 0CDh, 0B1h, 66h, 5, 83h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 6Ch
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 2
LOAD:00000000000002A4 elf_gnu_hash_shift dd 7
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 16AE01120048A126h, 900000201210D020h
LOAD:00000000000002B8 elf_gnu_hash_bucket dd 6Ch, 71h, 78h
LOAD:00000000000002C4 elf_gnu_hash_chain dd 0EB01FAB6h, 60E0C78Ch, 1C8C1D28h, 759A6A7Eh, 5B7F3E03h
LOAD:00000000000002C4                 dd 9E7650BCh, 7FFD8E4Eh, 9789A096h, 0AD3C9892h, 72632CCEh
LOAD:00000000000002C4                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B2h, 0BA53E4Dh
LOAD:0000000000000300 ; ELF Symbol Table
LOAD:0000000000000300                 Elf64_Sym <0>
LOAD:0000000000000318                 Elf64_Sym <offset aCtypeToupperLo - offset byte_E88, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:0000000000000318                            offset dword_0, 0>
LOAD:0000000000000330                 Elf64_Sym <offset aGetenv - offset byte_E88, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000330                            offset dword_0, 0>
LOAD:0000000000000348                 Elf64_Sym <offset aSigprocmask - offset byte_E88, 12h, 0, 0, \ ; "sigprocmask"
LOAD:0000000000000348                            offset dword_0, 0>
LOAD:0000000000000360                 Elf64_Sym <offset aSnprintfChk - offset byte_E88, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000360                            offset dword_0, 0>
LOAD:0000000000000378                 Elf64_Sym <offset aRaise - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "raise"
LOAD:0000000000000378                            0>
LOAD:0000000000000390                 Elf64_Sym <offset aObstackFree+9 - offset byte_E88, 12h, 0, 0, \ ; "free"
LOAD:0000000000000390                            offset dword_0, 0>
LOAD:00000000000003A8                 Elf64_Sym <offset aAbort - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:00000000000003A8                            0>
LOAD:00000000000003C0                 Elf64_Sym <offset aErrnoLocation - offset byte_E88, 12h, 0, 0, \ ; "__errno_location"
LOAD:00000000000003C0                            offset dword_0, 0>
LOAD:00000000000003D8                 Elf64_Sym <offset aStrncmp - offset byte_E88, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003D8                            offset dword_0, 0>
LOAD:00000000000003F0                 Elf64_Sym <offset aItmDeregistert - offset byte_E88, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003F0                            offset dword_0, 0>
LOAD:0000000000000408                 Elf64_Sym <offset aLocaltimeR - offset byte_E88, 12h, 0, 0, \ ; "localtime_r"
LOAD:0000000000000408                            offset dword_0, 0>
LOAD:0000000000000420                 Elf64_Sym <offset aExit - offset byte_E88, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000420                            0>
LOAD:0000000000000438                 Elf64_Sym <offset aStrcpy - offset byte_E88, 12h, 0, 0, \ ; "strcpy"
LOAD:0000000000000438                            offset dword_0, 0>
LOAD:0000000000000450                 Elf64_Sym <offset aFpending - offset byte_E88, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000450                            offset dword_0, 0>
LOAD:0000000000000468                 Elf64_Sym <offset aIsatty - offset byte_E88, 12h, 0, 0, \ ; "isatty"
LOAD:0000000000000468                            offset dword_0, 0>
LOAD:0000000000000480                 Elf64_Sym <offset aSigaction - offset byte_E88, 12h, 0, 0, \ ; "sigaction"
LOAD:0000000000000480                            offset dword_0, 0>
LOAD:0000000000000498                 Elf64_Sym <offset aIswcntrl - offset byte_E88, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000498                            offset dword_0, 0>
LOAD:00000000000004B0                 Elf64_Sym <offset aWcswidth - offset byte_E88, 12h, 0, 0, \ ; "wcswidth"
LOAD:00000000000004B0                            offset dword_0, 0>
LOAD:00000000000004C8                 Elf64_Sym <offset aLocaleconv - offset byte_E88, 12h, 0, 0, \ ; "localeconv"
LOAD:00000000000004C8                            offset dword_0, 0>
LOAD:00000000000004E0                 Elf64_Sym <offset aMbstowcs - offset byte_E88, 12h, 0, 0, \ ; "mbstowcs"
LOAD:00000000000004E0                            offset dword_0, 0>
LOAD:00000000000004F8                 Elf64_Sym <offset aReadlink - offset byte_E88, 12h, 0, 0, \ ; "readlink"
LOAD:00000000000004F8                            offset dword_0, 0>
LOAD:0000000000000510                 Elf64_Sym <offset aClockGettime - offset byte_E88, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000510                            offset dword_0, 0>
LOAD:0000000000000528                 Elf64_Sym <offset aUnsetenv+2 - offset byte_E88, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000528                            offset dword_0, 0>
LOAD:0000000000000540                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_E88, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000540                            offset dword_0, 0>
LOAD:0000000000000558                 Elf64_Sym <offset aFclose - offset byte_E88, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000558                            offset dword_0, 0>
LOAD:0000000000000570                 Elf64_Sym <offset aOpendir - offset byte_E88, 12h, 0, 0, \ ; "opendir"
LOAD:0000000000000570                            offset dword_0, 0>
LOAD:0000000000000588                 Elf64_Sym <offset aGetpwuid - offset byte_E88, 12h, 0, 0, \ ; "getpwuid"
LOAD:0000000000000588                            offset dword_0, 0>
LOAD:00000000000005A0                 Elf64_Sym <offset aBindtextdomain - offset byte_E88, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000005A0                            offset dword_0, 0>
LOAD:00000000000005B8                 Elf64_Sym <offset aDcgettext - offset byte_E88, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000005B8                            offset dword_0, 0>
LOAD:00000000000005D0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_E88, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000005D0                            offset dword_0, 0>
LOAD:00000000000005E8                 Elf64_Sym <offset aStrlen - offset byte_E88, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000005E8                            offset dword_0, 0>
LOAD:0000000000000600                 Elf64_Sym <offset aLxstat - offset byte_E88, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000600                            offset dword_0, 0>
LOAD:0000000000000618                 Elf64_Sym <offset aStackChkFail - offset byte_E88, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000618                            offset dword_0, 0>
LOAD:0000000000000630                 Elf64_Sym <offset aGetoptLong - offset byte_E88, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000630                            offset dword_0, 0>
LOAD:0000000000000648                 Elf64_Sym <offset aMbrtowc - offset byte_E88, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000648                            offset dword_0, 0>
LOAD:0000000000000660                 Elf64_Sym <offset aStrchr - offset byte_E88, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000660                            offset dword_0, 0>
LOAD:0000000000000678                 Elf64_Sym <offset aGetgrgid - offset byte_E88, 12h, 0, 0, \ ; "getgrgid"
LOAD:0000000000000678                            offset dword_0, 0>
LOAD:0000000000000690                 Elf64_Sym <offset aFxstatat - offset byte_E88, 12h, 0, 0, \ ; "__fxstatat"
LOAD:0000000000000690                            offset dword_0, 0>
LOAD:00000000000006A8                 Elf64_Sym <offset aSnprintf - offset byte_E88, 12h, 0, 0, \ ; "snprintf"
LOAD:00000000000006A8                            offset dword_0, 0>
LOAD:00000000000006C0                 Elf64_Sym <offset aOverflow - offset byte_E88, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000006C0                            offset dword_0, 0>
LOAD:00000000000006D8                 Elf64_Sym <offset aStrrchr - offset byte_E88, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000006D8                            offset dword_0, 0>
LOAD:00000000000006F0                 Elf64_Sym <offset aGmtimeR - offset byte_E88, 12h, 0, 0, \ ; "gmtime_r"
LOAD:00000000000006F0                            offset dword_0, 0>
LOAD:0000000000000708                 Elf64_Sym <offset aLseek - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000708                            0>
LOAD:0000000000000720                 Elf64_Sym <offset aAssertFail - offset byte_E88, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000720                            offset dword_0, 0>
LOAD:0000000000000738                 Elf64_Sym <offset aStrtoulInterna - offset byte_E88, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000738                            offset dword_0, 0>
LOAD:0000000000000750                 Elf64_Sym <offset aFnmatch - offset byte_E88, 12h, 0, 0, \ ; "fnmatch"
LOAD:0000000000000750                            offset dword_0, 0>
LOAD:0000000000000768                 Elf64_Sym <offset aMemset - offset byte_E88, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000768                            offset dword_0, 0>
LOAD:0000000000000780                 Elf64_Sym <offset aIoctl - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "ioctl"
LOAD:0000000000000780                            0>
LOAD:0000000000000798                 Elf64_Sym <offset aGetcwd - offset byte_E88, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000798                            offset dword_0, 0>
LOAD:00000000000007B0                 Elf64_Sym <offset aStrspn - offset byte_E88, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000007B0                            offset dword_0, 0>
LOAD:00000000000007C8                 Elf64_Sym <offset aClosedir - offset byte_E88, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000007C8                            offset dword_0, 0>
LOAD:00000000000007E0                 Elf64_Sym <offset aLibcStartMain - offset byte_E88, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000007E0                            offset dword_0, 0>
LOAD:00000000000007F8                 Elf64_Sym <offset aMemcmp - offset byte_E88, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000007F8                            offset dword_0, 0>
LOAD:0000000000000810                 Elf64_Sym <offset aSetjmp - offset byte_E88, 12h, 0, 0, \ ; "_setjmp"
LOAD:0000000000000810                            offset dword_0, 0>
LOAD:0000000000000828                 Elf64_Sym <offset aFputsUnlocked - offset byte_E88, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000828                            offset dword_0, 0>
LOAD:0000000000000840                 Elf64_Sym <offset aCalloc - offset byte_E88, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000840                            offset dword_0, 0>
LOAD:0000000000000858                 Elf64_Sym <offset aStrcmp - offset byte_E88, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000858                            offset dword_0, 0>
LOAD:0000000000000870                 Elf64_Sym <offset aSignal - offset byte_E88, 12h, 0, 0, \ ; "signal"
LOAD:0000000000000870                            offset dword_0, 0>
LOAD:0000000000000888                 Elf64_Sym <offset aDirfd - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "dirfd"
LOAD:0000000000000888                            0>
LOAD:00000000000008A0                 Elf64_Sym <offset aGetpwnam - offset byte_E88, 12h, 0, 0, \ ; "getpwnam"
LOAD:00000000000008A0                            offset dword_0, 0>
LOAD:00000000000008B8                 Elf64_Sym <offset aMemcpyChk - offset byte_E88, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:00000000000008B8                            offset dword_0, 0>
LOAD:00000000000008D0                 Elf64_Sym <offset aSigemptyset - offset byte_E88, 12h, 0, 0, \ ; "sigemptyset"
LOAD:00000000000008D0                            offset dword_0, 0>
LOAD:00000000000008E8                 Elf64_Sym <offset aGmonStart - offset byte_E88, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000008E8                            offset dword_0, 0>
LOAD:0000000000000900                 Elf64_Sym <offset aMemcpy - offset byte_E88, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000900                            offset dword_0, 0>
LOAD:0000000000000918                 Elf64_Sym <offset aGetgrnam - offset byte_E88, 12h, 0, 0, \ ; "getgrnam"
LOAD:0000000000000918                            offset dword_0, 0>
LOAD:0000000000000930                 Elf64_Sym <offset aTzset - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:0000000000000930                            0>
LOAD:0000000000000948                 Elf64_Sym <offset aFileno - offset byte_E88, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000948                            offset dword_0, 0>
LOAD:0000000000000960                 Elf64_Sym <offset aTcgetpgrp - offset byte_E88, 12h, 0, 0, \ ; "tcgetpgrp"
LOAD:0000000000000960                            offset dword_0, 0>
LOAD:0000000000000978                 Elf64_Sym <offset aXstat - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000978                            0>
LOAD:0000000000000990                 Elf64_Sym <offset aReaddir - offset byte_E88, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000990                            offset dword_0, 0>
LOAD:00000000000009A8                 Elf64_Sym <offset aWcwidth - offset byte_E88, 12h, 0, 0, \ ; "wcwidth"
LOAD:00000000000009A8                            offset dword_0, 0>
LOAD:00000000000009C0                 Elf64_Sym <offset aMalloc - offset byte_E88, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000009C0                            offset dword_0, 0>
LOAD:00000000000009D8                 Elf64_Sym <offset aFflush - offset byte_E88, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000009D8                            offset dword_0, 0>
LOAD:00000000000009F0                 Elf64_Sym <offset aNlLanginfo - offset byte_E88, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000009F0                            offset dword_0, 0>
LOAD:0000000000000A08                 Elf64_Sym <offset aFxstat - offset byte_E88, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000A08                            offset dword_0, 0>
LOAD:0000000000000A20                 Elf64_Sym <offset aStrcoll - offset byte_E88, 12h, 0, 0, \ ; "strcoll"
LOAD:0000000000000A20                            offset dword_0, 0>
LOAD:0000000000000A38                 Elf64_Sym <offset aMktime - offset byte_E88, 12h, 0, 0, \ ; "mktime"
LOAD:0000000000000A38                            offset dword_0, 0>
LOAD:0000000000000A50                 Elf64_Sym <offset aFreading - offset byte_E88, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000A50                            offset dword_0, 0>
LOAD:0000000000000A68                 Elf64_Sym <offset aFwriteUnlocked - offset byte_E88, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000A68                            offset dword_0, 0>
LOAD:0000000000000A80                 Elf64_Sym <offset aRealloc - offset byte_E88, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000A80                            offset dword_0, 0>
LOAD:0000000000000A98                 Elf64_Sym <offset aStpncpy - offset byte_E88, 12h, 0, 0, \ ; "stpncpy"
LOAD:0000000000000A98                            offset dword_0, 0>
LOAD:0000000000000AB0                 Elf64_Sym <offset aSetlocale - offset byte_E88, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000AB0                            offset dword_0, 0>
LOAD:0000000000000AC8                 Elf64_Sym <offset aPrintfChk - offset byte_E88, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000AC8                            offset dword_0, 0>
LOAD:0000000000000AE0                 Elf64_Sym <offset aTimegm - offset byte_E88, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000AE0                            offset dword_0, 0>
LOAD:0000000000000AF8                 Elf64_Sym <offset aStrftime - offset byte_E88, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000AF8                            offset dword_0, 0>
LOAD:0000000000000B10                 Elf64_Sym <offset aMempcpy - offset byte_E88, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000B10                            offset dword_0, 0>
LOAD:0000000000000B28                 Elf64_Sym <offset aMemmove - offset byte_E88, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000B28                            offset dword_0, 0>
LOAD:0000000000000B40                 Elf64_Sym <offset aError - offset byte_E88, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000B40                            0>
LOAD:0000000000000B58                 Elf64_Sym <offset aFseeko - offset byte_E88, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000B58                            offset dword_0, 0>
LOAD:0000000000000B70                 Elf64_Sym <offset aUnsetenv - offset byte_E88, 12h, 0, 0, \ ; "unsetenv"
LOAD:0000000000000B70                            offset dword_0, 0>
LOAD:0000000000000B88                 Elf64_Sym <offset aStrtoul - offset byte_E88, 12h, 0, 0, \ ; "strtoul"
LOAD:0000000000000B88                            offset dword_0, 0>
LOAD:0000000000000BA0                 Elf64_Sym <offset aCxaAtexit - offset byte_E88, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000BA0                            offset dword_0, 0>
LOAD:0000000000000BB8                 Elf64_Sym <offset aWcstombs - offset byte_E88, 12h, 0, 0, \ ; "wcstombs"
LOAD:0000000000000BB8                            offset dword_0, 0>
LOAD:0000000000000BD0                 Elf64_Sym <offset aGethostname - offset byte_E88, 12h, 0, 0, \ ; "gethostname"
LOAD:0000000000000BD0                            offset dword_0, 0>
LOAD:0000000000000BE8                 Elf64_Sym <offset aSigismember - offset byte_E88, 12h, 0, 0, \ ; "sigismember"
LOAD:0000000000000BE8                            offset dword_0, 0>
LOAD:0000000000000C00                 Elf64_Sym <offset aExit+1 - offset byte_E88, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000C00                            offset dword_0, 0>
LOAD:0000000000000C18                 Elf64_Sym <offset aFwrite - offset byte_E88, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000C18                            offset dword_0, 0>
LOAD:0000000000000C30                 Elf64_Sym <offset aFprintfChk - offset byte_E88, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000C30                            offset dword_0, 0>
LOAD:0000000000000C48                 Elf64_Sym <offset aItmRegistertmc - offset byte_E88, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000C48                            offset dword_0, 0>
LOAD:0000000000000C60                 Elf64_Sym <offset aFflushUnlocked - offset byte_E88, 12h, 0, 0, \ ; "fflush_unlocked"
LOAD:0000000000000C60                            offset dword_0, 0>
LOAD:0000000000000C78                 Elf64_Sym <offset aMbsinit - offset byte_E88, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000C78                            offset dword_0, 0>
LOAD:0000000000000C90                 Elf64_Sym <offset aIswprint - offset byte_E88, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000C90                            offset dword_0, 0>
LOAD:0000000000000CA8                 Elf64_Sym <offset aCxaFinalize - offset byte_E88, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000CA8                            offset dword_0, 0>
LOAD:0000000000000CC0                 Elf64_Sym <offset aSigaddset - offset byte_E88, 12h, 0, 0, \ ; "sigaddset"
LOAD:0000000000000CC0                            offset dword_0, 0>
LOAD:0000000000000CD8                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_E88, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:0000000000000CD8                            offset dword_0, 0>
LOAD:0000000000000CF0                 Elf64_Sym <offset aCtypeBLoc - offset byte_E88, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000CF0                            offset dword_0, 0>
LOAD:0000000000000D08                 Elf64_Sym <offset aSprintfChk - offset byte_E88, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000D08                            offset dword_0, 0>
LOAD:0000000000000D20                 Elf64_Sym <offset aObstackAllocFa - offset byte_E88, 11h, 0, 18h, \ ; "obstack_alloc_failed_handler"
LOAD:0000000000000D20                            offset obstack_alloc_failed_handler, 8>
LOAD:0000000000000D38                 Elf64_Sym <offset aObstackNewchun - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_newchunk"
LOAD:0000000000000D38                            offset _obstack_newchunk, 0EBh>
LOAD:0000000000000D50                 Elf64_Sym <offset aStdout - offset byte_E88, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000D50                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000D68                 Elf64_Sym <offset aObstackBegin1 - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_begin_1"
LOAD:0000000000000D68                            offset _obstack_begin_1, 15h>
LOAD:0000000000000D80                 Elf64_Sym <offset aObstackAllocat - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_allocated_p"
LOAD:0000000000000D80                            offset _obstack_allocated_p, 38h>
LOAD:0000000000000D98                 Elf64_Sym <offset aProgname - offset byte_E88, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000D98                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000DB0                 Elf64_Sym <offset aObstackBegin - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_begin"
LOAD:0000000000000DB0                            offset _obstack_begin, 11h>
LOAD:0000000000000DC8                 Elf64_Sym <offset aProgramInvocat - offset byte_E88, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000DC8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000DE0                 Elf64_Sym <offset aObstackMemoryU - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_memory_used"
LOAD:0000000000000DE0                            offset _obstack_memory_used, 2Ah>
LOAD:0000000000000DF8                 Elf64_Sym <offset aPrognameFull - offset byte_E88, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000DF8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E10                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_E88, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000E10                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000E28                 Elf64_Sym <offset aStderr - offset byte_E88, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000E28                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000E40                 Elf64_Sym <offset aOptind - offset byte_E88, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000E40                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000E58                 Elf64_Sym <offset aOptarg - offset byte_E88, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000E58                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000E70                 Elf64_Sym <offset aObstackFree - offset byte_E88, 12h, 0, 0Eh, \ ; "_obstack_free"
LOAD:0000000000000E70                            offset _obstack_free, 6Ah>
LOAD:0000000000000E88 ; ELF String Table
LOAD:0000000000000E88 byte_E88        db 0                    ; DATA XREF: LOAD:0000000000000318↑o
LOAD:0000000000000E88                                         ; LOAD:0000000000000330↑o ...
LOAD:0000000000000E89 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000000000014F0↓o
LOAD:0000000000000E93 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000009D8↑o
LOAD:0000000000000E9A aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:0000000000000438↑o
LOAD:0000000000000EA1 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:00000000000006F0↑o
LOAD:0000000000000EAA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000AC8↑o
LOAD:0000000000000EB7 aFnmatch        db 'fnmatch',0          ; DATA XREF: LOAD:0000000000000750↑o
LOAD:0000000000000EBF aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000990↑o
LOAD:0000000000000EC7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000AB0↑o
LOAD:0000000000000ED1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000648↑o
LOAD:0000000000000ED9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003D8↑o
LOAD:0000000000000EE1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000E40↑o
LOAD:0000000000000EE8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000006D8↑o
LOAD:0000000000000EF0 aFflushUnlocked db 'fflush_unlocked',0  ; DATA XREF: LOAD:0000000000000C60↑o
LOAD:0000000000000F00 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000005B8↑o
LOAD:0000000000000F0A aStpncpy        db 'stpncpy',0          ; DATA XREF: LOAD:0000000000000A98↑o
LOAD:0000000000000F12 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:0000000000000588↑o
LOAD:0000000000000F1B aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000007C8↑o
LOAD:0000000000000F24 aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:0000000000000678↑o
LOAD:0000000000000F2D aError          db 'error',0            ; DATA XREF: LOAD:0000000000000B40↑o
LOAD:0000000000000F33 aSignal         db 'signal',0           ; DATA XREF: LOAD:0000000000000870↑o
LOAD:0000000000000F3A aMbstowcs       db 'mbstowcs',0         ; DATA XREF: LOAD:00000000000004E0↑o
LOAD:0000000000000F43 aSigprocmask    db 'sigprocmask',0      ; DATA XREF: LOAD:0000000000000348↑o
LOAD:0000000000000F4F aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000618↑o
LOAD:0000000000000F60 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000600↑o
LOAD:0000000000000F69 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000C90↑o
LOAD:0000000000000F72 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000A80↑o
LOAD:0000000000000F7A aAbort          db 'abort',0            ; DATA XREF: LOAD:00000000000003A8↑o
LOAD:0000000000000F80 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000420↑o
LOAD:0000000000000F80                                         ; LOAD:0000000000000C00↑o
LOAD:0000000000000F86 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000007B0↑o
LOAD:0000000000000F8D aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000F8D                                         ; DATA XREF: LOAD:0000000000000DC8↑o
LOAD:0000000000000FA5 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000AF8↑o
LOAD:0000000000000FAE aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000720↑o
LOAD:0000000000000FBC aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:0000000000000408↑o
LOAD:0000000000000FC8 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000FC8                                         ; DATA XREF: LOAD:00000000000005D0↑o
LOAD:0000000000000FDF aIsatty         db 'isatty',0           ; DATA XREF: LOAD:0000000000000468↑o
LOAD:0000000000000FE6 aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:00000000000008A0↑o
LOAD:0000000000000FEF aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000840↑o
LOAD:0000000000000FF6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000005E8↑o
LOAD:0000000000000FFD aSigemptyset    db 'sigemptyset',0      ; DATA XREF: LOAD:00000000000008D0↑o
LOAD:0000000000001009 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000768↑o
LOAD:0000000000001010 aLocaleconv     db 'localeconv',0       ; DATA XREF: LOAD:00000000000004C8↑o
LOAD:000000000000101B aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:00000000000003C0↑o
LOAD:000000000000102C aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000007F8↑o
LOAD:0000000000001033 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000B10↑o
LOAD:000000000000103B aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:0000000000000B70↑o
LOAD:000000000000103B                                         ; LOAD:0000000000000528↑o
LOAD:0000000000001044 aSetjmp         db '_setjmp',0          ; DATA XREF: LOAD:0000000000000810↑o
LOAD:000000000000104C aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000C30↑o
LOAD:000000000000105A aSigaddset      db 'sigaddset',0        ; DATA XREF: LOAD:0000000000000CC0↑o
LOAD:0000000000001064 aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:0000000000000918↑o
LOAD:000000000000106D aWcswidth       db 'wcswidth',0         ; DATA XREF: LOAD:00000000000004B0↑o
LOAD:0000000000001076 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000D50↑o
LOAD:000000000000107D aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000708↑o
LOAD:0000000000001083 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000900↑o
LOAD:000000000000108A aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000558↑o
LOAD:0000000000001091 aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:0000000000000B88↑o
LOAD:0000000000001099 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000009C0↑o
LOAD:00000000000010A0 aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000AE0↑o
LOAD:00000000000010A7 aRaise          db 'raise',0            ; DATA XREF: LOAD:0000000000000378↑o
LOAD:00000000000010AD aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000C78↑o
LOAD:00000000000010B5 aTzset          db 'tzset',0            ; DATA XREF: LOAD:0000000000000930↑o
LOAD:00000000000010BB aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000009F0↑o
LOAD:00000000000010C7 aOpendir        db 'opendir',0          ; DATA XREF: LOAD:0000000000000570↑o
LOAD:00000000000010CF aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000CF0↑o
LOAD:00000000000010DD aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000330↑o
LOAD:00000000000010E4 aObstackAllocat db '_obstack_allocated_p',0
LOAD:00000000000010E4                                         ; DATA XREF: LOAD:0000000000000D80↑o
LOAD:00000000000010F9 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000E58↑o
LOAD:0000000000001100 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000A50↑o
LOAD:000000000000110B aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000E28↑o
LOAD:0000000000001112 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:00000000000009A8↑o
LOAD:000000000000111A aIoctl          db 'ioctl',0            ; DATA XREF: LOAD:0000000000000780↑o
LOAD:0000000000001120 aObstackBegin1  db '_obstack_begin_1',0 ; DATA XREF: LOAD:0000000000000D68↑o
LOAD:0000000000001131 aObstackNewchun db '_obstack_newchunk',0
LOAD:0000000000001131                                         ; DATA XREF: LOAD:0000000000000D38↑o
LOAD:0000000000001143 aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000360↑o
LOAD:0000000000001152 aReadlink       db 'readlink',0         ; DATA XREF: LOAD:00000000000004F8↑o
LOAD:000000000000115B aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000630↑o
LOAD:0000000000001167 aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000A08↑o
LOAD:0000000000001170 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000948↑o
LOAD:0000000000001177 aGethostname    db 'gethostname',0      ; DATA XREF: LOAD:0000000000000BD0↑o
LOAD:0000000000001183 aObstackMemoryU db '_obstack_memory_used',0
LOAD:0000000000001183                                         ; DATA XREF: LOAD:0000000000000DE0↑o
LOAD:0000000000001198 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000798↑o
LOAD:000000000000119F aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000C18↑o
LOAD:00000000000011A6 aSigaction      db 'sigaction',0        ; DATA XREF: LOAD:0000000000000480↑o
LOAD:00000000000011B0 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:00000000000008B8↑o
LOAD:00000000000011BD aSigismember    db 'sigismember',0      ; DATA XREF: LOAD:0000000000000BE8↑o
LOAD:00000000000011C9 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000510↑o
LOAD:00000000000011D7 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000450↑o
LOAD:00000000000011E2 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000660↑o
LOAD:00000000000011E9 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000498↑o
LOAD:00000000000011F2 aMktime         db 'mktime',0           ; DATA XREF: LOAD:0000000000000A38↑o
LOAD:00000000000011F9 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:00000000000011F9                                         ; DATA XREF: LOAD:0000000000000E10↑o
LOAD:0000000000001217 aWcstombs       db 'wcstombs',0         ; DATA XREF: LOAD:0000000000000BB8↑o
LOAD:0000000000001220 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000001220                                         ; DATA XREF: LOAD:0000000000000318↑o
LOAD:0000000000001234 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000001234                                         ; DATA XREF: LOAD:0000000000000CD8↑o
LOAD:0000000000001248 aObstackAllocFa db 'obstack_alloc_failed_handler',0
LOAD:0000000000001248                                         ; DATA XREF: LOAD:0000000000000D20↑o
LOAD:0000000000001265 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000CA8↑o
LOAD:0000000000001274 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000D08↑o
LOAD:0000000000001282 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000978↑o
LOAD:000000000000128A aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000B28↑o
LOAD:0000000000001292 aObstackBegin   db '_obstack_begin',0   ; DATA XREF: LOAD:0000000000000DB0↑o
LOAD:00000000000012A1 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000005A0↑o
LOAD:00000000000012A1                                         ; LOAD:0000000000000540↑o
LOAD:00000000000012B0 aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:0000000000000690↑o
LOAD:00000000000012BB aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000A68↑o
LOAD:00000000000012CB aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000858↑o
LOAD:00000000000012D2 aTcgetpgrp      db 'tcgetpgrp',0        ; DATA XREF: LOAD:0000000000000960↑o
LOAD:00000000000012DC aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000012DC                                         ; DATA XREF: LOAD:00000000000007E0↑o
LOAD:00000000000012EE aDirfd          db 'dirfd',0            ; DATA XREF: LOAD:0000000000000888↑o
LOAD:00000000000012F4 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000B58↑o
LOAD:00000000000012FB aStrcoll        db 'strcoll',0          ; DATA XREF: LOAD:0000000000000A20↑o
LOAD:0000000000001303 aSnprintf       db 'snprintf',0         ; DATA XREF: LOAD:00000000000006A8↑o
LOAD:000000000000130C aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000006C0↑o
LOAD:0000000000001317 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000001317                                         ; DATA XREF: LOAD:0000000000000738↑o
LOAD:000000000000132A aObstackFree    db '_obstack_free',0    ; DATA XREF: LOAD:0000000000000E70↑o
LOAD:000000000000132A                                         ; LOAD:0000000000000390↑o
LOAD:0000000000001338 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000828↑o
LOAD:0000000000001347 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000D98↑o
LOAD:0000000000001352 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000DF8↑o
LOAD:0000000000001362 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000BA0↑o
LOAD:000000000000136F aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001500↓o
LOAD:000000000000137A aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001510↓o
LOAD:0000000000001384 aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000001520↓o
LOAD:000000000000138F aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001530↓o
LOAD:000000000000139B aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001540↓o
LOAD:00000000000013A7 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001550↓o
LOAD:00000000000013B1 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000000000013B1                                         ; DATA XREF: LOAD:00000000000003F0↑o
LOAD:00000000000013CD aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000008E8↑o
LOAD:00000000000013DC aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000000000013DC                                         ; DATA XREF: LOAD:0000000000000C48↑o
LOAD:00000000000013F6 ; ELF GNU Symbol Version Table
LOAD:00000000000013F6                 dw 0
LOAD:00000000000013F8                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:00000000000013FA                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:00000000000013FC                 dw 3                    ; sigprocmask@@GLIBC_2.2.5
LOAD:00000000000013FE                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000001400                 dw 3                    ; raise@@GLIBC_2.2.5
LOAD:0000000000001402                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000001404                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000001406                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000001408                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:000000000000140A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:000000000000140C                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:000000000000140E                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000001410                 dw 3                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000001412                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000001414                 dw 3                    ; isatty@@GLIBC_2.2.5
LOAD:0000000000001416                 dw 3                    ; sigaction@@GLIBC_2.2.5
LOAD:0000000000001418                 dw 3                    ; iswcntrl@@GLIBC_2.2.5
LOAD:000000000000141A                 dw 3                    ; wcswidth@@GLIBC_2.2.5
LOAD:000000000000141C                 dw 3                    ; localeconv@@GLIBC_2.2.5
LOAD:000000000000141E                 dw 3                    ; mbstowcs@@GLIBC_2.2.5
LOAD:0000000000001420                 dw 3                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000001422                 dw 5                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000001424                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000001426                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000001428                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:000000000000142A                 dw 3                    ; opendir@@GLIBC_2.2.5
LOAD:000000000000142C                 dw 3                    ; getpwuid@@GLIBC_2.2.5
LOAD:000000000000142E                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000001430                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000001432                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000001434                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000001436                 dw 3                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000001438                 dw 6                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:000000000000143A                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:000000000000143C                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:000000000000143E                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000001440                 dw 3                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000001442                 dw 6                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000001444                 dw 3                    ; snprintf@@GLIBC_2.2.5
LOAD:0000000000001446                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000001448                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:000000000000144A                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:000000000000144C                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:000000000000144E                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000001450                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000001452                 dw 3                    ; fnmatch@@GLIBC_2.2.5
LOAD:0000000000001454                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000001456                 dw 3                    ; ioctl@@GLIBC_2.2.5
LOAD:0000000000001458                 dw 3                    ; getcwd@@GLIBC_2.2.5
LOAD:000000000000145A                 dw 3                    ; strspn@@GLIBC_2.2.5
LOAD:000000000000145C                 dw 3                    ; closedir@@GLIBC_2.2.5
LOAD:000000000000145E                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000001460                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000001462                 dw 3                    ; _setjmp@@GLIBC_2.2.5
LOAD:0000000000001464                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001466                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001468                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:000000000000146A                 dw 3                    ; signal@@GLIBC_2.2.5
LOAD:000000000000146C                 dw 3                    ; dirfd@@GLIBC_2.2.5
LOAD:000000000000146E                 dw 3                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000001470                 dw 4                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:0000000000001472                 dw 3                    ; sigemptyset@@GLIBC_2.2.5
LOAD:0000000000001474                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001476                 dw 7                    ; memcpy@@GLIBC_2.14
LOAD:0000000000001478                 dw 3                    ; getgrnam@@GLIBC_2.2.5
LOAD:000000000000147A                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:000000000000147C                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:000000000000147E                 dw 3                    ; tcgetpgrp@@GLIBC_2.2.5
LOAD:0000000000001480                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000001482                 dw 3                    ; readdir@@GLIBC_2.2.5
LOAD:0000000000001484                 dw 3                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000001486                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000001488                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:000000000000148A                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:000000000000148C                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:000000000000148E                 dw 3                    ; strcoll@@GLIBC_2.2.5
LOAD:0000000000001490                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000001492                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000001494                 dw 3                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000001496                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000001498                 dw 3                    ; stpncpy@@GLIBC_2.2.5
LOAD:000000000000149A                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:000000000000149C                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:000000000000149E                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:00000000000014A0                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:00000000000014A2                 dw 3                    ; mempcpy@@GLIBC_2.2.5
LOAD:00000000000014A4                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:00000000000014A6                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:00000000000014A8                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:00000000000014AA                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:00000000000014AC                 dw 3                    ; strtoul@@GLIBC_2.2.5
LOAD:00000000000014AE                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:00000000000014B0                 dw 3                    ; wcstombs@@GLIBC_2.2.5
LOAD:00000000000014B2                 dw 3                    ; gethostname@@GLIBC_2.2.5
LOAD:00000000000014B4                 dw 3                    ; sigismember@@GLIBC_2.2.5
LOAD:00000000000014B6                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:00000000000014B8                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:00000000000014BA                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:00000000000014BC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:00000000000014BE                 dw 3                    ; fflush_unlocked@@GLIBC_2.2.5
LOAD:00000000000014C0                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:00000000000014C2                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:00000000000014C4                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:00000000000014C6                 dw 3                    ; sigaddset@@GLIBC_2.2.5
LOAD:00000000000014C8                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:00000000000014CA                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:00000000000014CC                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:00000000000014CE                 dw 1                    ; global symbol: obstack_alloc_failed_handler
LOAD:00000000000014D0                 dw 1                    ; global symbol: _obstack_newchunk
LOAD:00000000000014D2                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:00000000000014D4                 dw 1                    ; global symbol: _obstack_begin_1
LOAD:00000000000014D6                 dw 1                    ; global symbol: _obstack_allocated_p
LOAD:00000000000014D8                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:00000000000014DA                 dw 1                    ; global symbol: _obstack_begin
LOAD:00000000000014DC                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:00000000000014DE                 dw 1                    ; global symbol: _obstack_memory_used
LOAD:00000000000014E0                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:00000000000014E2                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:00000000000014E4                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:00000000000014E6                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:00000000000014E8                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:00000000000014EA                 dw 1                    ; global symbol: _obstack_free
LOAD:00000000000014EC                 dw 0
LOAD:00000000000014EE                 dw 0
LOAD:00000000000014F0 ; ELF GNU Symbol Version Requirements
LOAD:00000000000014F0                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_E88, 10h, 0> ; "libc.so.6"
LOAD:0000000000001500                 Elf64_Vernaux <6969194h, 0, 7, offset aGlibc214 - offset byte_E88, \ ; "GLIBC_2.14"
LOAD:0000000000001500                                10h>
LOAD:0000000000001510                 Elf64_Vernaux <0D696914h, 0, 6, offset aGlibc24 - offset byte_E88, \ ; "GLIBC_2.4"
LOAD:0000000000001510                                10h>
LOAD:0000000000001520                 Elf64_Vernaux <6969197h, 0, 5, offset aGlibc217 - offset byte_E88, \ ; "GLIBC_2.17"
LOAD:0000000000001520                                10h>
LOAD:0000000000001530                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_E88, \ ; "GLIBC_2.3.4"
LOAD:0000000000001530                                10h>
LOAD:0000000000001540                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_E88, \ ; "GLIBC_2.2.5"
LOAD:0000000000001540                                10h>
LOAD:0000000000001550                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_E88, 0> ; "GLIBC_2.3"
LOAD:0000000000001560 ; ELF RELA Relocation Table
LOAD:0000000000001560                 Elf64_Rela <21F050h, 8, 5370h> ; R_X86_64_RELATIVE +5370h
LOAD:0000000000001578                 Elf64_Rela <21F058h, 8, 5330h> ; R_X86_64_RELATIVE +5330h
LOAD:0000000000001590                 Elf64_Rela <21F060h, 8, 5E80h> ; R_X86_64_RELATIVE +5E80h
LOAD:00000000000015A8                 Elf64_Rela <21F068h, 8, 65F0h> ; R_X86_64_RELATIVE +65F0h
LOAD:00000000000015C0                 Elf64_Rela <21F070h, 8, 5E90h> ; R_X86_64_RELATIVE +5E90h
LOAD:00000000000015D8                 Elf64_Rela <21F078h, 8, 6710h> ; R_X86_64_RELATIVE +6710h
LOAD:00000000000015F0                 Elf64_Rela <21F080h, 8, 5AC0h> ; R_X86_64_RELATIVE +5AC0h
LOAD:0000000000001608                 Elf64_Rela <21F088h, 8, 6680h> ; R_X86_64_RELATIVE +6680h
LOAD:0000000000001620                 Elf64_Rela <21F090h, 8, 5AD0h> ; R_X86_64_RELATIVE +5AD0h
LOAD:0000000000001638                 Elf64_Rela <21F098h, 8, 67A0h> ; R_X86_64_RELATIVE +67A0h
LOAD:0000000000001650                 Elf64_Rela <21F0A0h, 8, 0AC50h> ; R_X86_64_RELATIVE +0AC50h
LOAD:0000000000001668                 Elf64_Rela <21F0A8h, 8, 0B500h> ; R_X86_64_RELATIVE +0B500h
LOAD:0000000000001680                 Elf64_Rela <21F0B0h, 8, 0ACC0h> ; R_X86_64_RELATIVE +0ACC0h
LOAD:0000000000001698                 Elf64_Rela <21F0B8h, 8, 0B410h> ; R_X86_64_RELATIVE +0B410h
LOAD:00000000000016B0                 Elf64_Rela <21F0C0h, 8, 0B310h> ; R_X86_64_RELATIVE +0B310h
LOAD:00000000000016C8                 Elf64_Rela <21F0C8h, 8, 0B810h> ; R_X86_64_RELATIVE +0B810h
LOAD:00000000000016E0                 Elf64_Rela <21F0D0h, 8, 0B390h> ; R_X86_64_RELATIVE +0B390h
LOAD:00000000000016F8                 Elf64_Rela <21F0D8h, 8, 6B50h> ; R_X86_64_RELATIVE +6B50h
LOAD:0000000000001710                 Elf64_Rela <21F0E0h, 8, 5E10h> ; R_X86_64_RELATIVE +5E10h
LOAD:0000000000001728                 Elf64_Rela <21F0E8h, 8, 6370h> ; R_X86_64_RELATIVE +6370h
LOAD:0000000000001740                 Elf64_Rela <21F0F0h, 8, 5E40h> ; R_X86_64_RELATIVE +5E40h
LOAD:0000000000001758                 Elf64_Rela <21F0F8h, 8, 64B0h> ; R_X86_64_RELATIVE +64B0h
LOAD:0000000000001770                 Elf64_Rela <21F100h, 8, 5A40h> ; R_X86_64_RELATIVE +5A40h
LOAD:0000000000001788                 Elf64_Rela <21F108h, 8, 6410h> ; R_X86_64_RELATIVE +6410h
LOAD:00000000000017A0                 Elf64_Rela <21F110h, 8, 5A80h> ; R_X86_64_RELATIVE +5A80h
LOAD:00000000000017B8                 Elf64_Rela <21F118h, 8, 6550h> ; R_X86_64_RELATIVE +6550h
LOAD:00000000000017D0                 Elf64_Rela <21F120h, 8, 5EB0h> ; R_X86_64_RELATIVE +5EB0h
LOAD:00000000000017E8                 Elf64_Rela <21F128h, 8, 6AC0h> ; R_X86_64_RELATIVE +6AC0h
LOAD:0000000000001800                 Elf64_Rela <21F130h, 8, 5EA0h> ; R_X86_64_RELATIVE +5EA0h
LOAD:0000000000001818                 Elf64_Rela <21F138h, 8, 6A30h> ; R_X86_64_RELATIVE +6A30h
LOAD:0000000000001830                 Elf64_Rela <21F160h, 8, 0AB40h> ; R_X86_64_RELATIVE +0AB40h
LOAD:0000000000001848                 Elf64_Rela <21F168h, 8, 0AF80h> ; R_X86_64_RELATIVE +0AF80h
LOAD:0000000000001860                 Elf64_Rela <21F170h, 8, 0AB80h> ; R_X86_64_RELATIVE +0AB80h
LOAD:0000000000001878                 Elf64_Rela <21F178h, 8, 0B0F0h> ; R_X86_64_RELATIVE +0B0F0h
LOAD:0000000000001890                 Elf64_Rela <21F180h, 8, 0AE40h> ; R_X86_64_RELATIVE +0AE40h
LOAD:00000000000018A8                 Elf64_Rela <21F188h, 8, 6980h> ; R_X86_64_RELATIVE +6980h
LOAD:00000000000018C0                 Elf64_Rela <21F190h, 8, 0AD70h> ; R_X86_64_RELATIVE +0AD70h
LOAD:00000000000018D8                 Elf64_Rela <21F198h, 8, 0B6A0h> ; R_X86_64_RELATIVE +0B6A0h
LOAD:00000000000018F0                 Elf64_Rela <21F1A0h, 8, 0AAB0h> ; R_X86_64_RELATIVE +0AAB0h
LOAD:0000000000001908                 Elf64_Rela <21F1A8h, 8, 0B250h> ; R_X86_64_RELATIVE +0B250h
LOAD:0000000000001920                 Elf64_Rela <21F1B0h, 8, 0AC00h> ; R_X86_64_RELATIVE +0AC00h
LOAD:0000000000001938                 Elf64_Rela <21F1B8h, 8, 0B030h> ; R_X86_64_RELATIVE +0B030h
LOAD:0000000000001950                 Elf64_Rela <21F1C0h, 8, 0AE80h> ; R_X86_64_RELATIVE +0AE80h
LOAD:0000000000001968                 Elf64_Rela <21F1C8h, 8, 0B750h> ; R_X86_64_RELATIVE +0B750h
LOAD:0000000000001980                 Elf64_Rela <21F1D0h, 8, 0ADB0h> ; R_X86_64_RELATIVE +0ADB0h
LOAD:0000000000001998                 Elf64_Rela <21F1D8h, 8, 9430h> ; R_X86_64_RELATIVE +9430h
LOAD:00000000000019B0                 Elf64_Rela <21F1E0h, 8, 0AB00h> ; R_X86_64_RELATIVE +0AB00h
LOAD:00000000000019C8                 Elf64_Rela <21F1E8h, 8, 0AED0h> ; R_X86_64_RELATIVE +0AED0h
LOAD:00000000000019E0                 Elf64_Rela <21F1F0h, 8, 0ABC0h> ; R_X86_64_RELATIVE +0ABC0h
LOAD:00000000000019F8                 Elf64_Rela <21F1F8h, 8, 0B1A0h> ; R_X86_64_RELATIVE +0B1A0h
LOAD:0000000000001A10                 Elf64_Rela <21F200h, 8, 0AE00h> ; R_X86_64_RELATIVE +0AE00h
LOAD:0000000000001A28                 Elf64_Rela <21F208h, 8, 0B5F0h> ; R_X86_64_RELATIVE +0B5F0h
LOAD:0000000000001A40                 Elf64_Rela <21F210h, 8, 0AD30h> ; R_X86_64_RELATIVE +0AD30h
LOAD:0000000000001A58                 Elf64_Rela <21F218h, 8, 9380h> ; R_X86_64_RELATIVE +9380h
LOAD:0000000000001A70                 Elf64_Rela <21F220h, 8, 1A34Ch> ; R_X86_64_RELATIVE +1A34Ch
LOAD:0000000000001A88                 Elf64_Rela <21F228h, 8, 17BDCh> ; R_X86_64_RELATIVE +17BDCh
LOAD:0000000000001AA0                 Elf64_Rela <21F230h, 8, 17BE0h> ; R_X86_64_RELATIVE +17BE0h
LOAD:0000000000001AB8                 Elf64_Rela <21F238h, 8, 17BE6h> ; R_X86_64_RELATIVE +17BE6h
LOAD:0000000000001AD0                 Elf64_Rela <21F240h, 8, 17BECh> ; R_X86_64_RELATIVE +17BECh
LOAD:0000000000001AE8                 Elf64_Rela <21F248h, 8, 17BEFh> ; R_X86_64_RELATIVE +17BEFh
LOAD:0000000000001B00                 Elf64_Rela <21F250h, 8, 17BF4h> ; R_X86_64_RELATIVE +17BF4h
LOAD:0000000000001B18                 Elf64_Rela <21F258h, 8, 17BFCh> ; R_X86_64_RELATIVE +17BFCh
LOAD:0000000000001B30                 Elf64_Rela <21F260h, 8, 17BF9h> ; R_X86_64_RELATIVE +17BF9h
LOAD:0000000000001B48                 Elf64_Rela <21F280h, 8, 17C00h> ; R_X86_64_RELATIVE +17C00h
LOAD:0000000000001B60                 Elf64_Rela <21F288h, 8, 17C06h> ; R_X86_64_RELATIVE +17C06h
LOAD:0000000000001B78                 Elf64_Rela <21F290h, 8, 17C0Dh> ; R_X86_64_RELATIVE +17C0Dh
LOAD:0000000000001B90                 Elf64_Rela <21F298h, 8, 17C11h> ; R_X86_64_RELATIVE +17C11h
LOAD:0000000000001BA8                 Elf64_Rela <21F2A0h, 8, 17C17h> ; R_X86_64_RELATIVE +17C17h
LOAD:0000000000001BC0                 Elf64_Rela <21F2C0h, 8, 17BEFh> ; R_X86_64_RELATIVE +17BEFh
LOAD:0000000000001BD8                 Elf64_Rela <21F2C8h, 8, 17A7Dh> ; R_X86_64_RELATIVE +17A7Dh
LOAD:0000000000001BF0                 Elf64_Rela <21F2D0h, 8, 17A6Fh> ; R_X86_64_RELATIVE +17A6Fh
LOAD:0000000000001C08                 Elf64_Rela <21F2D8h, 8, 17C1Eh> ; R_X86_64_RELATIVE +17C1Eh
LOAD:0000000000001C20                 Elf64_Rela <21F2E0h, 8, 17884h> ; R_X86_64_RELATIVE +17884h
LOAD:0000000000001C38                 Elf64_Rela <21F300h, 8, 17C28h> ; R_X86_64_RELATIVE +17C28h
LOAD:0000000000001C50                 Elf64_Rela <21F308h, 8, 17C30h> ; R_X86_64_RELATIVE +17C30h
LOAD:0000000000001C68                 Elf64_Rela <21F310h, 8, 17C35h> ; R_X86_64_RELATIVE +17C35h
LOAD:0000000000001C80                 Elf64_Rela <21F318h, 8, 17C3Ch> ; R_X86_64_RELATIVE +17C3Ch
LOAD:0000000000001C98                 Elf64_Rela <21F320h, 8, 17C47h> ; R_X86_64_RELATIVE +17C47h
LOAD:0000000000001CB0                 Elf64_Rela <21F328h, 8, 17C4Eh> ; R_X86_64_RELATIVE +17C4Eh
LOAD:0000000000001CC8                 Elf64_Rela <21F330h, 8, 17C57h> ; R_X86_64_RELATIVE +17C57h
LOAD:0000000000001CE0                 Elf64_Rela <21F340h, 8, 17CF1h> ; R_X86_64_RELATIVE +17CF1h
LOAD:0000000000001CF8                 Elf64_Rela <21F360h, 8, 1A338h> ; R_X86_64_RELATIVE +1A338h
LOAD:0000000000001D10                 Elf64_Rela <21F380h, 8, 17C65h> ; R_X86_64_RELATIVE +17C65h
LOAD:0000000000001D28                 Elf64_Rela <21F3A0h, 8, 17C6Fh> ; R_X86_64_RELATIVE +17C6Fh
LOAD:0000000000001D40                 Elf64_Rela <21F3C0h, 8, 17C75h> ; R_X86_64_RELATIVE +17C75h
LOAD:0000000000001D58                 Elf64_Rela <21F3E0h, 8, 17C7Fh> ; R_X86_64_RELATIVE +17C7Fh
LOAD:0000000000001D70                 Elf64_Rela <21F400h, 8, 17C97h> ; R_X86_64_RELATIVE +17C97h
LOAD:0000000000001D88                 Elf64_Rela <21F420h, 8, 17CA6h> ; R_X86_64_RELATIVE +17CA6h
LOAD:0000000000001DA0                 Elf64_Rela <21F440h, 8, 17CACh> ; R_X86_64_RELATIVE +17CACh
LOAD:0000000000001DB8                 Elf64_Rela <21F460h, 8, 17CB6h> ; R_X86_64_RELATIVE +17CB6h
LOAD:0000000000001DD0                 Elf64_Rela <21F480h, 8, 17CC6h> ; R_X86_64_RELATIVE +17CC6h
LOAD:0000000000001DE8                 Elf64_Rela <21F4A0h, 8, 17CCFh> ; R_X86_64_RELATIVE +17CCFh
LOAD:0000000000001E00                 Elf64_Rela <21F4C0h, 8, 17CE2h> ; R_X86_64_RELATIVE +17CE2h
LOAD:0000000000001E18                 Elf64_Rela <21F4E0h, 8, 17A6Fh> ; R_X86_64_RELATIVE +17A6Fh
LOAD:0000000000001E30                 Elf64_Rela <21F500h, 8, 17A52h> ; R_X86_64_RELATIVE +17A52h
LOAD:0000000000001E48                 Elf64_Rela <21F520h, 8, 17CEAh> ; R_X86_64_RELATIVE +17CEAh
LOAD:0000000000001E60                 Elf64_Rela <21F540h, 8, 17CF5h> ; R_X86_64_RELATIVE +17CF5h
LOAD:0000000000001E78                 Elf64_Rela <21F560h, 8, 17D04h> ; R_X86_64_RELATIVE +17D04h
LOAD:0000000000001E90                 Elf64_Rela <21F580h, 8, 17D0Dh> ; R_X86_64_RELATIVE +17D0Dh
LOAD:0000000000001EA8                 Elf64_Rela <21F5A0h, 8, 17D17h> ; R_X86_64_RELATIVE +17D17h
LOAD:0000000000001EC0                 Elf64_Rela <21F5C0h, 8, 17D1Ah> ; R_X86_64_RELATIVE +17D1Ah
LOAD:0000000000001ED8                 Elf64_Rela <21F5E0h, 8, 19F08h> ; R_X86_64_RELATIVE +19F08h
LOAD:0000000000001EF0                 Elf64_Rela <21F600h, 8, 17D33h> ; R_X86_64_RELATIVE +17D33h
LOAD:0000000000001F08                 Elf64_Rela <21F620h, 8, 17D38h> ; R_X86_64_RELATIVE +17D38h
LOAD:0000000000001F20                 Elf64_Rela <21F640h, 8, 17AA1h> ; R_X86_64_RELATIVE +17AA1h
LOAD:0000000000001F38                 Elf64_Rela <21F660h, 8, 17D3Fh> ; R_X86_64_RELATIVE +17D3Fh
LOAD:0000000000001F50                 Elf64_Rela <21F680h, 8, 17D4Bh> ; R_X86_64_RELATIVE +17D4Bh
LOAD:0000000000001F68                 Elf64_Rela <21F6A0h, 8, 17D53h> ; R_X86_64_RELATIVE +17D53h
LOAD:0000000000001F80                 Elf64_Rela <21F6C0h, 8, 17AB3h> ; R_X86_64_RELATIVE +17AB3h
LOAD:0000000000001F98                 Elf64_Rela <21F6E0h, 8, 17D5Eh> ; R_X86_64_RELATIVE +17D5Eh
LOAD:0000000000001FB0                 Elf64_Rela <21F700h, 8, 17A84h> ; R_X86_64_RELATIVE +17A84h
LOAD:0000000000001FC8                 Elf64_Rela <21F720h, 8, 17D68h> ; R_X86_64_RELATIVE +17D68h
LOAD:0000000000001FE0                 Elf64_Rela <21F740h, 8, 17A76h> ; R_X86_64_RELATIVE +17A76h
LOAD:0000000000001FF8                 Elf64_Rela <21F760h, 8, 17D7Bh> ; R_X86_64_RELATIVE +17D7Bh
LOAD:0000000000002010                 Elf64_Rela <21F780h, 8, 17A7Dh> ; R_X86_64_RELATIVE +17A7Dh
LOAD:0000000000002028                 Elf64_Rela <21F7A0h, 8, 17D83h> ; R_X86_64_RELATIVE +17D83h
LOAD:0000000000002040                 Elf64_Rela <21F7C0h, 8, 17A8Dh> ; R_X86_64_RELATIVE +17A8Dh
LOAD:0000000000002058                 Elf64_Rela <21F7E0h, 8, 17A95h> ; R_X86_64_RELATIVE +17A95h
LOAD:0000000000002070                 Elf64_Rela <21F800h, 8, 17D8Eh> ; R_X86_64_RELATIVE +17D8Eh
LOAD:0000000000002088                 Elf64_Rela <21F820h, 8, 17D99h> ; R_X86_64_RELATIVE +17D99h
LOAD:00000000000020A0                 Elf64_Rela <21F840h, 8, 17DA1h> ; R_X86_64_RELATIVE +17DA1h
LOAD:00000000000020B8                 Elf64_Rela <21F860h, 8, 17DA8h> ; R_X86_64_RELATIVE +17DA8h
LOAD:00000000000020D0                 Elf64_Rela <21F880h, 8, 17884h> ; R_X86_64_RELATIVE +17884h
LOAD:00000000000020E8                 Elf64_Rela <21F8C0h, 8, 17A0Ch> ; R_X86_64_RELATIVE +17A0Ch
LOAD:0000000000002100                 Elf64_Rela <21F8C8h, 8, 17E0Ch> ; R_X86_64_RELATIVE +17E0Ch
LOAD:0000000000002118                 Elf64_Rela <21F8D0h, 8, 17E0Fh> ; R_X86_64_RELATIVE +17E0Fh
LOAD:0000000000002130                 Elf64_Rela <21F8D8h, 8, 17CDFh> ; R_X86_64_RELATIVE +17CDFh
LOAD:0000000000002148                 Elf64_Rela <21F8E0h, 8, 17BECh> ; R_X86_64_RELATIVE +17BECh
LOAD:0000000000002160                 Elf64_Rela <21F8E8h, 8, 17E12h> ; R_X86_64_RELATIVE +17E12h
LOAD:0000000000002178                 Elf64_Rela <21F8F0h, 8, 17E15h> ; R_X86_64_RELATIVE +17E15h
LOAD:0000000000002190                 Elf64_Rela <21F8F8h, 8, 17E18h> ; R_X86_64_RELATIVE +17E18h
LOAD:00000000000021A8                 Elf64_Rela <21F900h, 8, 17E1Bh> ; R_X86_64_RELATIVE +17E1Bh
LOAD:00000000000021C0                 Elf64_Rela <21F908h, 8, 17E4Eh> ; R_X86_64_RELATIVE +17E4Eh
LOAD:00000000000021D8                 Elf64_Rela <21F910h, 8, 17E1Eh> ; R_X86_64_RELATIVE +17E1Eh
LOAD:00000000000021F0                 Elf64_Rela <21F918h, 8, 17E21h> ; R_X86_64_RELATIVE +17E21h
LOAD:0000000000002208                 Elf64_Rela <21F920h, 8, 17E24h> ; R_X86_64_RELATIVE +17E24h
LOAD:0000000000002220                 Elf64_Rela <21F928h, 8, 17DA5h> ; R_X86_64_RELATIVE +17DA5h
LOAD:0000000000002238                 Elf64_Rela <21F930h, 8, 17E27h> ; R_X86_64_RELATIVE +17E27h
LOAD:0000000000002250                 Elf64_Rela <21F938h, 8, 17E2Ah> ; R_X86_64_RELATIVE +17E2Ah
LOAD:0000000000002268                 Elf64_Rela <21F940h, 8, 17E2Dh> ; R_X86_64_RELATIVE +17E2Dh
LOAD:0000000000002280                 Elf64_Rela <21F948h, 8, 17E30h> ; R_X86_64_RELATIVE +17E30h
LOAD:0000000000002298                 Elf64_Rela <21F950h, 8, 17C94h> ; R_X86_64_RELATIVE +17C94h
LOAD:00000000000022B0                 Elf64_Rela <21F958h, 8, 17E33h> ; R_X86_64_RELATIVE +17E33h
LOAD:00000000000022C8                 Elf64_Rela <21F960h, 8, 17E36h> ; R_X86_64_RELATIVE +17E36h
LOAD:00000000000022E0                 Elf64_Rela <21F968h, 8, 17E39h> ; R_X86_64_RELATIVE +17E39h
LOAD:00000000000022F8                 Elf64_Rela <21F970h, 8, 17E3Ch> ; R_X86_64_RELATIVE +17E3Ch
LOAD:0000000000002310                 Elf64_Rela <21F978h, 8, 17E3Fh> ; R_X86_64_RELATIVE +17E3Fh
LOAD:0000000000002328                 Elf64_Rela <21F9A0h, 8, 17BEFh> ; R_X86_64_RELATIVE +17BEFh
LOAD:0000000000002340                 Elf64_Rela <21F9A8h, 8, 17E42h> ; R_X86_64_RELATIVE +17E42h
LOAD:0000000000002358                 Elf64_Rela <21F9B0h, 8, 17D0Dh> ; R_X86_64_RELATIVE +17D0Dh
LOAD:0000000000002370                 Elf64_Rela <21F9B8h, 8, 17D04h> ; R_X86_64_RELATIVE +17D04h
LOAD:0000000000002388                 Elf64_Rela <21F9E0h, 8, 17A03h> ; R_X86_64_RELATIVE +17A03h
LOAD:00000000000023A0                 Elf64_Rela <21F9E8h, 8, 17E48h> ; R_X86_64_RELATIVE +17E48h
LOAD:00000000000023B8                 Elf64_Rela <21F9F0h, 8, 17E4Dh> ; R_X86_64_RELATIVE +17E4Dh
LOAD:00000000000023D0                 Elf64_Rela <21F9F8h, 8, 17A20h> ; R_X86_64_RELATIVE +17A20h
LOAD:00000000000023E8                 Elf64_Rela <21FA10h, 8, 17C97h> ; R_X86_64_RELATIVE +17C97h
LOAD:0000000000002400                 Elf64_Rela <21FA18h, 8, 17D17h> ; R_X86_64_RELATIVE +17D17h
LOAD:0000000000002418                 Elf64_Rela <21FA40h, 8, 17D4Bh> ; R_X86_64_RELATIVE +17D4Bh
LOAD:0000000000002430                 Elf64_Rela <21FA48h, 8, 1A31Fh> ; R_X86_64_RELATIVE +1A31Fh
LOAD:0000000000002448                 Elf64_Rela <21FA50h, 8, 1A325h> ; R_X86_64_RELATIVE +1A325h
LOAD:0000000000002460                 Elf64_Rela <21FA58h, 8, 1A332h> ; R_X86_64_RELATIVE +1A332h
LOAD:0000000000002478                 Elf64_Rela <21FA60h, 8, 1A33Fh> ; R_X86_64_RELATIVE +1A33Fh
LOAD:0000000000002490                 Elf64_Rela <21FA68h, 8, 17870h> ; R_X86_64_RELATIVE +17870h
LOAD:00000000000024A8                 Elf64_Rela <21FA70h, 8, 1A353h> ; R_X86_64_RELATIVE +1A353h
LOAD:00000000000024C0                 Elf64_Rela <21FA78h, 8, 1A338h> ; R_X86_64_RELATIVE +1A338h
LOAD:00000000000024D8                 Elf64_Rela <21FA80h, 8, 17A20h> ; R_X86_64_RELATIVE +17A20h
LOAD:00000000000024F0                 Elf64_Rela <21FA88h, 8, 1A35Bh> ; R_X86_64_RELATIVE +1A35Bh
LOAD:0000000000002508                 Elf64_Rela <220008h, 8, 220008h> ; R_X86_64_RELATIVE +220008h
LOAD:0000000000002520                 Elf64_Rela <220040h, 8, 17DADh> ; R_X86_64_RELATIVE +17DADh
LOAD:0000000000002538                 Elf64_Rela <220048h, 8, 17DB7h> ; R_X86_64_RELATIVE +17DB7h
LOAD:0000000000002550                 Elf64_Rela <220068h, 8, 17DC3h> ; R_X86_64_RELATIVE +17DC3h
LOAD:0000000000002568                 Elf64_Rela <220078h, 8, 179BDh> ; R_X86_64_RELATIVE +179BDh
LOAD:0000000000002580                 Elf64_Rela <220098h, 8, 17845h> ; R_X86_64_RELATIVE +17845h
LOAD:0000000000002598                 Elf64_Rela <2200C8h, 8, 17DC6h> ; R_X86_64_RELATIVE +17DC6h
LOAD:00000000000025B0                 Elf64_Rela <2200D8h, 8, 17DCCh> ; R_X86_64_RELATIVE +17DCCh
LOAD:00000000000025C8                 Elf64_Rela <2200E8h, 8, 17DDBh> ; R_X86_64_RELATIVE +17DDBh
LOAD:00000000000025E0                 Elf64_Rela <2200F8h, 8, 17DD2h> ; R_X86_64_RELATIVE +17DD2h
LOAD:00000000000025F8                 Elf64_Rela <220108h, 8, 17DD8h> ; R_X86_64_RELATIVE +17DD8h
LOAD:0000000000002610                 Elf64_Rela <220118h, 8, 17DD8h> ; R_X86_64_RELATIVE +17DD8h
LOAD:0000000000002628                 Elf64_Rela <220148h, 8, 17DDEh> ; R_X86_64_RELATIVE +17DDEh
LOAD:0000000000002640                 Elf64_Rela <220158h, 8, 17DD2h> ; R_X86_64_RELATIVE +17DD2h
LOAD:0000000000002658                 Elf64_Rela <220168h, 8, 17DE4h> ; R_X86_64_RELATIVE +17DE4h
LOAD:0000000000002670                 Elf64_Rela <220178h, 8, 17DEAh> ; R_X86_64_RELATIVE +17DEAh
LOAD:0000000000002688                 Elf64_Rela <220188h, 8, 17DF0h> ; R_X86_64_RELATIVE +17DF0h
LOAD:00000000000026A0                 Elf64_Rela <220198h, 8, 17DF6h> ; R_X86_64_RELATIVE +17DF6h
LOAD:00000000000026B8                 Elf64_Rela <2201A8h, 8, 17DFCh> ; R_X86_64_RELATIVE +17DFCh
LOAD:00000000000026D0                 Elf64_Rela <2201B8h, 8, 17E02h> ; R_X86_64_RELATIVE +17E02h
LOAD:00000000000026E8                 Elf64_Rela <2201D8h, 8, 17E08h> ; R_X86_64_RELATIVE +17E08h
LOAD:0000000000002700                 Elf64_Rela <2201E8h, 8, 19F30h> ; R_X86_64_RELATIVE +19F30h
LOAD:0000000000002718                 Elf64_Rela <2201F0h, 8, 0C140h> ; R_X86_64_RELATIVE +0C140h
LOAD:0000000000002730                 Elf64_Rela <220240h, 8, 220250h> ; R_X86_64_RELATIVE +220250h
LOAD:0000000000002748                 Elf64_Rela <220258h, 8, 221420h> ; R_X86_64_RELATIVE +221420h
LOAD:0000000000002760                 Elf64_Rela <220260h, 8, 153E0h> ; R_X86_64_RELATIVE +153E0h
LOAD:0000000000002778                 Elf64_Rela <21FFC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000002790                 Elf64_Rela <21FFC8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000027A8                 Elf64_Rela <21FFD0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000027C0                 Elf64_Rela <21FFD8h, 3F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000027D8                 Elf64_Rela <21FFE0h, 4800000006h, 0> ; R_X86_64_GLOB_DAT malloc
LOAD:00000000000027F0                 Elf64_Rela <21FFE8h, 6300000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000002808                 Elf64_Rela <21FFF0h, 6700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000002820                 Elf64_Rela <220280h, 7100000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000002838                 Elf64_Rela <220288h, 6E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000002850                 Elf64_Rela <220290h, 7800000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000002868                 Elf64_Rela <220298h, 7900000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000002880                 Elf64_Rela <2202A0h, 7500000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000002898                 Elf64_Rela <2202C0h, 7700000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000028B0 ; ELF JMPREL Relocation Table
LOAD:00000000000028B0                 Elf64_Rela <21FCA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000028C8                 Elf64_Rela <21FCA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000028E0                 Elf64_Rela <21FCB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT sigprocmask
LOAD:00000000000028F8                 Elf64_Rela <21FCB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000002910                 Elf64_Rela <21FCC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT raise
LOAD:0000000000002928                 Elf64_Rela <21FCC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000002940                 Elf64_Rela <21FCD0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000002958                 Elf64_Rela <21FCD8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000002970                 Elf64_Rela <21FCE0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:0000000000002988                 Elf64_Rela <21FCE8h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000029A0                 Elf64_Rela <21FCF0h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:00000000000029B8                 Elf64_Rela <21FCF8h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000029D0                 Elf64_Rela <21FD00h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT isatty
LOAD:00000000000029E8                 Elf64_Rela <21FD08h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT sigaction
LOAD:0000000000002A00                 Elf64_Rela <21FD10h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000002A18                 Elf64_Rela <21FD18h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT wcswidth
LOAD:0000000000002A30                 Elf64_Rela <21FD20h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT localeconv
LOAD:0000000000002A48                 Elf64_Rela <21FD28h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbstowcs
LOAD:0000000000002A60                 Elf64_Rela <21FD30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:0000000000002A78                 Elf64_Rela <21FD38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:0000000000002A90                 Elf64_Rela <21FD40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000002AA8                 Elf64_Rela <21FD48h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000002AC0                 Elf64_Rela <21FD50h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000002AD8                 Elf64_Rela <21FD58h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT opendir
LOAD:0000000000002AF0                 Elf64_Rela <21FD60h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000002B08                 Elf64_Rela <21FD68h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000002B20                 Elf64_Rela <21FD70h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000002B38                 Elf64_Rela <21FD78h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000002B50                 Elf64_Rela <21FD80h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000002B68                 Elf64_Rela <21FD88h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000002B80                 Elf64_Rela <21FD90h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000002B98                 Elf64_Rela <21FD98h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002BB0                 Elf64_Rela <21FDA0h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000002BC8                 Elf64_Rela <21FDA8h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000002BE0                 Elf64_Rela <21FDB0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:0000000000002BF8                 Elf64_Rela <21FDB8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000002C10                 Elf64_Rela <21FDC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT snprintf
LOAD:0000000000002C28                 Elf64_Rela <21FDC8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000002C40                 Elf64_Rela <21FDD0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000002C58                 Elf64_Rela <21FDD8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:0000000000002C70                 Elf64_Rela <21FDE0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000002C88                 Elf64_Rela <21FDE8h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000002CA0                 Elf64_Rela <21FDF0h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000002CB8                 Elf64_Rela <21FDF8h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fnmatch
LOAD:0000000000002CD0                 Elf64_Rela <21FE00h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000002CE8                 Elf64_Rela <21FE08h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT ioctl
LOAD:0000000000002D00                 Elf64_Rela <21FE10h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:0000000000002D18                 Elf64_Rela <21FE18h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000002D30                 Elf64_Rela <21FE20h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000002D48                 Elf64_Rela <21FE28h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000002D60                 Elf64_Rela <21FE30h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT _setjmp
LOAD:0000000000002D78                 Elf64_Rela <21FE38h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000002D90                 Elf64_Rela <21FE40h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000002DA8                 Elf64_Rela <21FE48h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000002DC0                 Elf64_Rela <21FE50h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT signal
LOAD:0000000000002DD8                 Elf64_Rela <21FE58h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT dirfd
LOAD:0000000000002DF0                 Elf64_Rela <21FE60h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000002E08                 Elf64_Rela <21FE68h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000002E20                 Elf64_Rela <21FE70h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT sigemptyset
LOAD:0000000000002E38                 Elf64_Rela <21FE78h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000002E50                 Elf64_Rela <21FE80h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:0000000000002E68                 Elf64_Rela <21FE88h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000002E80                 Elf64_Rela <21FE90h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002E98                 Elf64_Rela <21FE98h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT tcgetpgrp
LOAD:0000000000002EB0                 Elf64_Rela <21FEA0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000002EC8                 Elf64_Rela <21FEA8h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000002EE0                 Elf64_Rela <21FEB0h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000002EF8                 Elf64_Rela <21FEB8h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000002F10                 Elf64_Rela <21FEC0h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000002F28                 Elf64_Rela <21FEC8h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000002F40                 Elf64_Rela <21FED0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT strcoll
LOAD:0000000000002F58                 Elf64_Rela <21FED8h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000002F70                 Elf64_Rela <21FEE0h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000002F88                 Elf64_Rela <21FEE8h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000002FA0                 Elf64_Rela <21FEF0h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002FB8                 Elf64_Rela <21FEF8h, 5100000007h, 0> ; R_X86_64_JUMP_SLOT stpncpy
LOAD:0000000000002FD0                 Elf64_Rela <21FF00h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002FE8                 Elf64_Rela <21FF08h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000003000                 Elf64_Rela <21FF10h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:0000000000003018                 Elf64_Rela <21FF18h, 5500000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000003030                 Elf64_Rela <21FF20h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000003048                 Elf64_Rela <21FF28h, 5700000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000003060                 Elf64_Rela <21FF30h, 5800000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000003078                 Elf64_Rela <21FF38h, 5900000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000003090                 Elf64_Rela <21FF40h, 5A00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:00000000000030A8                 Elf64_Rela <21FF48h, 5B00000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:00000000000030C0                 Elf64_Rela <21FF50h, 5C00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000030D8                 Elf64_Rela <21FF58h, 5D00000007h, 0> ; R_X86_64_JUMP_SLOT wcstombs
LOAD:00000000000030F0                 Elf64_Rela <21FF60h, 5E00000007h, 0> ; R_X86_64_JUMP_SLOT gethostname
LOAD:0000000000003108                 Elf64_Rela <21FF68h, 5F00000007h, 0> ; R_X86_64_JUMP_SLOT sigismember
LOAD:0000000000003120                 Elf64_Rela <21FF70h, 6000000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000003138                 Elf64_Rela <21FF78h, 6100000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000003150                 Elf64_Rela <21FF80h, 6200000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000003168                 Elf64_Rela <21FF88h, 6400000007h, 0> ; R_X86_64_JUMP_SLOT fflush_unlocked
LOAD:0000000000003180                 Elf64_Rela <21FF90h, 6500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000003198                 Elf64_Rela <21FF98h, 6600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000031B0                 Elf64_Rela <21FFA0h, 6800000007h, 0> ; R_X86_64_JUMP_SLOT sigaddset
LOAD:00000000000031C8                 Elf64_Rela <21FFA8h, 6900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:00000000000031E0                 Elf64_Rela <21FFB0h, 6A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000031F8                 Elf64_Rela <21FFB8h, 6B00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:00000000000031F8 LOAD            ends
LOAD:00000000000031F8
.init:0000000000003210 ; ===========================================================================
.init:0000000000003210
.init:0000000000003210 ; Segment type: Pure code
.init:0000000000003210 ; Segment permissions: Read/Execute
.init:0000000000003210 _init           segment dword public 'CODE' use64
.init:0000000000003210                 assume cs:_init
.init:0000000000003210                 ;org 3210h
.init:0000000000003210                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000003210
.init:0000000000003210 ; =============== S U B R O U T I N E =======================================
.init:0000000000003210
.init:0000000000003210
.init:0000000000003210                 public _init_proc
.init:0000000000003210 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000003210                 sub     rsp, 8          ; _init
.init:0000000000003214                 mov     rax, cs:__gmon_start___ptr
.init:000000000000321B                 test    rax, rax
.init:000000000000321E                 jz      short loc_3222
.init:0000000000003220                 call    rax ; __gmon_start__
.init:0000000000003222
.init:0000000000003222 loc_3222:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000003222                 add     rsp, 8
.init:0000000000003226                 retn
.init:0000000000003226 _init_proc      endp
.init:0000000000003226
.init:0000000000003226 _init           ends
.init:0000000000003226
LOAD:0000000000003227 ; ===========================================================================
LOAD:0000000000003227
LOAD:0000000000003227 ; Segment type: Pure code
LOAD:0000000000003227 ; Segment permissions: Read/Execute
LOAD:0000000000003227 LOAD            segment byte public 'CODE' use64
LOAD:0000000000003227                 assume cs:LOAD
LOAD:0000000000003227                 ;org 3227h
LOAD:0000000000003227                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000003227                 align 10h
LOAD:0000000000003227 LOAD            ends
LOAD:0000000000003227
.plt:0000000000003230 ; ===========================================================================
.plt:0000000000003230
.plt:0000000000003230 ; Segment type: Pure code
.plt:0000000000003230 ; Segment permissions: Read/Execute
.plt:0000000000003230 _plt            segment para public 'CODE' use64
.plt:0000000000003230                 assume cs:_plt
.plt:0000000000003230                 ;org 3230h
.plt:0000000000003230                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000003230
.plt:0000000000003230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003230
.plt:0000000000003230
.plt:0000000000003230 sub_3230        proc near               ; CODE XREF: .plt:000000000000324B↓j
.plt:0000000000003230                                         ; .plt:000000000000325B↓j ...
.plt:0000000000003230 ; __unwind {
.plt:0000000000003230                 push    cs:qword_21FC90
.plt:0000000000003236                 jmp     cs:qword_21FC98
.plt:0000000000003236 sub_3230        endp
.plt:0000000000003236
.plt:0000000000003236 ; ---------------------------------------------------------------------------
.plt:000000000000323C                 align 20h
.plt:0000000000003240
.plt:0000000000003240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003240
.plt:0000000000003240 ; Attributes: thunk
.plt:0000000000003240
.plt:0000000000003240 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000003240 ___ctype_toupper_loc proc near          ; CODE XREF: memcpy_lowcase_0+13↓p
.plt:0000000000003240                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000003240 ___ctype_toupper_loc endp
.plt:0000000000003240
.plt:0000000000003246 ; ---------------------------------------------------------------------------
.plt:0000000000003246                 push    0
.plt:000000000000324B                 jmp     sub_3230
.plt:0000000000003250
.plt:0000000000003250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003250
.plt:0000000000003250 ; Attributes: thunk
.plt:0000000000003250
.plt:0000000000003250 ; char *getenv(const char *name)
.plt:0000000000003250 _getenv         proc near               ; CODE XREF: main+168↓p
.plt:0000000000003250                                         ; main+1BD↓p ...
.plt:0000000000003250                 jmp     cs:getenv_ptr
.plt:0000000000003250 _getenv         endp
.plt:0000000000003250
.plt:0000000000003256 ; ---------------------------------------------------------------------------
.plt:0000000000003256                 push    1
.plt:000000000000325B                 jmp     sub_3230
.plt:0000000000003260
.plt:0000000000003260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003260
.plt:0000000000003260 ; Attributes: thunk
.plt:0000000000003260
.plt:0000000000003260 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
.plt:0000000000003260 _sigprocmask    proc near               ; CODE XREF: process_signals+40↓p
.plt:0000000000003260                                         ; process_signals+74↓p
.plt:0000000000003260                 jmp     cs:sigprocmask_ptr
.plt:0000000000003260 _sigprocmask    endp
.plt:0000000000003260
.plt:0000000000003266 ; ---------------------------------------------------------------------------
.plt:0000000000003266                 push    2
.plt:000000000000326B                 jmp     sub_3230
.plt:0000000000003270
.plt:0000000000003270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003270
.plt:0000000000003270 ; Attributes: thunk
.plt:0000000000003270
.plt:0000000000003270 ___snprintf_chk proc near               ; CODE XREF: abformat_init+229↓p
.plt:0000000000003270                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000003270 ___snprintf_chk endp
.plt:0000000000003270
.plt:0000000000003276 ; ---------------------------------------------------------------------------
.plt:0000000000003276                 push    3
.plt:000000000000327B                 jmp     sub_3230
.plt:0000000000003280
.plt:0000000000003280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003280
.plt:0000000000003280 ; Attributes: thunk
.plt:0000000000003280
.plt:0000000000003280 ; int raise(int sig)
.plt:0000000000003280 _raise          proc near               ; CODE XREF: main+F75↓p
.plt:0000000000003280                                         ; main+F8D↓p ...
.plt:0000000000003280                 jmp     cs:raise_ptr
.plt:0000000000003280 _raise          endp
.plt:0000000000003280
.plt:0000000000003286 ; ---------------------------------------------------------------------------
.plt:0000000000003286                 push    4
.plt:000000000000328B                 jmp     sub_3230
.plt:0000000000003290
.plt:0000000000003290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003290
.plt:0000000000003290 ; Attributes: noreturn thunk
.plt:0000000000003290
.plt:0000000000003290 ; void __noreturn abort(void)
.plt:0000000000003290 _abort          proc near               ; CODE XREF: main+CD↓p
.plt:0000000000003290                                         ; print_long_format:loc_8868↓p ...
.plt:0000000000003290                 jmp     cs:abort_ptr
.plt:0000000000003290 _abort          endp
.plt:0000000000003290
.plt:0000000000003296 ; ---------------------------------------------------------------------------
.plt:0000000000003296                 push    5
.plt:000000000000329B                 jmp     sub_3230
.plt:00000000000032A0
.plt:00000000000032A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032A0
.plt:00000000000032A0 ; Attributes: thunk
.plt:00000000000032A0
.plt:00000000000032A0 ; int *__errno_location(void)
.plt:00000000000032A0 ___errno_location proc near             ; CODE XREF: xstrcoll+C↓p
.plt:00000000000032A0                                         ; file_failure+19↓p ...
.plt:00000000000032A0                 jmp     cs:__errno_location_ptr
.plt:00000000000032A0 ___errno_location endp
.plt:00000000000032A0
.plt:00000000000032A6 ; ---------------------------------------------------------------------------
.plt:00000000000032A6                 push    6
.plt:00000000000032AB                 jmp     sub_3230
.plt:00000000000032B0
.plt:00000000000032B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032B0
.plt:00000000000032B0 ; Attributes: thunk
.plt:00000000000032B0
.plt:00000000000032B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000032B0 _strncmp        proc near               ; CODE XREF: main+B87↓p
.plt:00000000000032B0                                         ; main+12D0↓p ...
.plt:00000000000032B0                 jmp     cs:strncmp_ptr
.plt:00000000000032B0 _strncmp        endp
.plt:00000000000032B0
.plt:00000000000032B6 ; ---------------------------------------------------------------------------
.plt:00000000000032B6                 push    7
.plt:00000000000032BB                 jmp     sub_3230
.plt:00000000000032C0
.plt:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032C0
.plt:00000000000032C0 ; Attributes: thunk
.plt:00000000000032C0
.plt:00000000000032C0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000032C0 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:00000000000032C0                                         ; mktime_z+AA↓p
.plt:00000000000032C0                 jmp     cs:localtime_r_ptr
.plt:00000000000032C0 _localtime_r    endp
.plt:00000000000032C0
.plt:00000000000032C6 ; ---------------------------------------------------------------------------
.plt:00000000000032C6                 push    8
.plt:00000000000032CB                 jmp     sub_3230
.plt:00000000000032D0
.plt:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032D0
.plt:00000000000032D0 ; Attributes: noreturn thunk
.plt:00000000000032D0
.plt:00000000000032D0 ; void __noreturn _exit(int status)
.plt:00000000000032D0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000032D0                 jmp     cs:_exit_ptr
.plt:00000000000032D0 __exit          endp
.plt:00000000000032D0
.plt:00000000000032D6 ; ---------------------------------------------------------------------------
.plt:00000000000032D6                 push    9
.plt:00000000000032DB                 jmp     sub_3230
.plt:00000000000032E0
.plt:00000000000032E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032E0
.plt:00000000000032E0 ; Attributes: thunk
.plt:00000000000032E0
.plt:00000000000032E0 ; char *strcpy(char *dest, const char *src)
.plt:00000000000032E0 _strcpy         proc near               ; CODE XREF: gobble_file_constprop_52+9DB↓p
.plt:00000000000032E0                                         ; getuser+69↓p ...
.plt:00000000000032E0                 jmp     cs:strcpy_ptr
.plt:00000000000032E0 _strcpy         endp
.plt:00000000000032E0
.plt:00000000000032E6 ; ---------------------------------------------------------------------------
.plt:00000000000032E6                 push    0Ah
.plt:00000000000032EB                 jmp     sub_3230
.plt:00000000000032F0
.plt:00000000000032F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000032F0
.plt:00000000000032F0 ; Attributes: thunk
.plt:00000000000032F0
.plt:00000000000032F0 ; size_t __fpending(FILE *fp)
.plt:00000000000032F0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000032F0                 jmp     cs:__fpending_ptr
.plt:00000000000032F0 ___fpending     endp
.plt:00000000000032F0
.plt:00000000000032F6 ; ---------------------------------------------------------------------------
.plt:00000000000032F6                 push    0Bh
.plt:00000000000032FB                 jmp     sub_3230
.plt:0000000000003300
.plt:0000000000003300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003300
.plt:0000000000003300 ; Attributes: thunk
.plt:0000000000003300
.plt:0000000000003300 ; int isatty(int fd)
.plt:0000000000003300 _isatty         proc near               ; CODE XREF: main+75F↓p
.plt:0000000000003300                                         ; main+9BF↓p ...
.plt:0000000000003300                 jmp     cs:isatty_ptr
.plt:0000000000003300 _isatty         endp
.plt:0000000000003300
.plt:0000000000003306 ; ---------------------------------------------------------------------------
.plt:0000000000003306                 push    0Ch
.plt:000000000000330B                 jmp     sub_3230
.plt:0000000000003310
.plt:0000000000003310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003310
.plt:0000000000003310 ; Attributes: thunk
.plt:0000000000003310
.plt:0000000000003310 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
.plt:0000000000003310 _sigaction      proc near               ; CODE XREF: signal_setup+DF↓p
.plt:0000000000003310                                         ; signal_setup+1BA↓p
.plt:0000000000003310                 jmp     cs:sigaction_ptr
.plt:0000000000003310 _sigaction      endp
.plt:0000000000003310
.plt:0000000000003316 ; ---------------------------------------------------------------------------
.plt:0000000000003316                 push    0Dh
.plt:000000000000331B                 jmp     sub_3230
.plt:0000000000003320
.plt:0000000000003320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003320
.plt:0000000000003320 ; Attributes: thunk
.plt:0000000000003320
.plt:0000000000003320 ; int iswcntrl(wint_t wc)
.plt:0000000000003320 _iswcntrl       proc near               ; CODE XREF: mbsnwidth+F7↓p
.plt:0000000000003320                 jmp     cs:iswcntrl_ptr
.plt:0000000000003320 _iswcntrl       endp
.plt:0000000000003320
.plt:0000000000003326 ; ---------------------------------------------------------------------------
.plt:0000000000003326                 push    0Eh
.plt:000000000000332B                 jmp     sub_3230
.plt:0000000000003330
.plt:0000000000003330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003330
.plt:0000000000003330 ; Attributes: thunk
.plt:0000000000003330
.plt:0000000000003330 ; int wcswidth(const wchar_t *s, size_t n)
.plt:0000000000003330 _wcswidth       proc near               ; CODE XREF: mbsalign+287↓p
.plt:0000000000003330                                         ; mbsalign+34C↓p
.plt:0000000000003330                 jmp     cs:wcswidth_ptr
.plt:0000000000003330 _wcswidth       endp
.plt:0000000000003330
.plt:0000000000003336 ; ---------------------------------------------------------------------------
.plt:0000000000003336                 push    0Fh
.plt:000000000000333B                 jmp     sub_3230
.plt:0000000000003340
.plt:0000000000003340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003340
.plt:0000000000003340 ; Attributes: thunk
.plt:0000000000003340
.plt:0000000000003340 ; struct lconv *localeconv(void)
.plt:0000000000003340 _localeconv     proc near               ; CODE XREF: human_readable+59↓p
.plt:0000000000003340                 jmp     cs:localeconv_ptr
.plt:0000000000003340 _localeconv     endp
.plt:0000000000003340
.plt:0000000000003346 ; ---------------------------------------------------------------------------
.plt:0000000000003346                 push    10h
.plt:000000000000334B                 jmp     sub_3230
.plt:0000000000003350
.plt:0000000000003350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003350
.plt:0000000000003350 ; Attributes: thunk
.plt:0000000000003350
.plt:0000000000003350 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
.plt:0000000000003350 _mbstowcs       proc near               ; CODE XREF: mbsalign+1B6↓p
.plt:0000000000003350                                         ; mbsalign+220↓p
.plt:0000000000003350                 jmp     cs:mbstowcs_ptr
.plt:0000000000003350 _mbstowcs       endp
.plt:0000000000003350
.plt:0000000000003356 ; ---------------------------------------------------------------------------
.plt:0000000000003356                 push    11h
.plt:000000000000335B                 jmp     sub_3230
.plt:0000000000003360
.plt:0000000000003360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003360
.plt:0000000000003360 ; Attributes: thunk
.plt:0000000000003360
.plt:0000000000003360 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000003360 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000003360                 jmp     cs:readlink_ptr
.plt:0000000000003360 _readlink       endp
.plt:0000000000003360
.plt:0000000000003366 ; ---------------------------------------------------------------------------
.plt:0000000000003366                 push    12h
.plt:000000000000336B                 jmp     sub_3230
.plt:0000000000003370
.plt:0000000000003370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003370
.plt:0000000000003370 ; Attributes: thunk
.plt:0000000000003370
.plt:0000000000003370 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000003370 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:0000000000003370                                         ; current_timespec+19↓p
.plt:0000000000003370                 jmp     cs:clock_gettime_ptr
.plt:0000000000003370 _clock_gettime  endp
.plt:0000000000003370
.plt:0000000000003376 ; ---------------------------------------------------------------------------
.plt:0000000000003376                 push    13h
.plt:000000000000337B                 jmp     sub_3230
.plt:0000000000003380
.plt:0000000000003380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003380
.plt:0000000000003380 ; Attributes: thunk
.plt:0000000000003380
.plt:0000000000003380 ; int setenv(const char *name, const char *value, int replace)
.plt:0000000000003380 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:0000000000003380                 jmp     cs:setenv_ptr
.plt:0000000000003380 _setenv         endp
.plt:0000000000003380
.plt:0000000000003386 ; ---------------------------------------------------------------------------
.plt:0000000000003386                 push    14h
.plt:000000000000338B                 jmp     sub_3230
.plt:0000000000003390
.plt:0000000000003390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003390
.plt:0000000000003390 ; Attributes: thunk
.plt:0000000000003390
.plt:0000000000003390 ; char *textdomain(const char *domainname)
.plt:0000000000003390 _textdomain     proc near               ; CODE XREF: main+56↓p
.plt:0000000000003390                 jmp     cs:textdomain_ptr
.plt:0000000000003390 _textdomain     endp
.plt:0000000000003390
.plt:0000000000003396 ; ---------------------------------------------------------------------------
.plt:0000000000003396                 push    15h
.plt:000000000000339B                 jmp     sub_3230
.plt:00000000000033A0
.plt:00000000000033A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033A0
.plt:00000000000033A0 ; Attributes: thunk
.plt:00000000000033A0
.plt:00000000000033A0 ; int fclose(FILE *stream)
.plt:00000000000033A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000033A0                                         ; rpl_fclose+6B↓j
.plt:00000000000033A0                 jmp     cs:fclose_ptr
.plt:00000000000033A0 _fclose         endp
.plt:00000000000033A0
.plt:00000000000033A6 ; ---------------------------------------------------------------------------
.plt:00000000000033A6                 push    16h
.plt:00000000000033AB                 jmp     sub_3230
.plt:00000000000033B0
.plt:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033B0
.plt:00000000000033B0 ; Attributes: thunk
.plt:00000000000033B0
.plt:00000000000033B0 ; DIR *opendir(const char *name)
.plt:00000000000033B0 _opendir        proc near               ; CODE XREF: print_dir+43↓p
.plt:00000000000033B0                 jmp     cs:opendir_ptr
.plt:00000000000033B0 _opendir        endp
.plt:00000000000033B0
.plt:00000000000033B6 ; ---------------------------------------------------------------------------
.plt:00000000000033B6                 push    17h
.plt:00000000000033BB                 jmp     sub_3230
.plt:00000000000033C0
.plt:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033C0
.plt:00000000000033C0 ; Attributes: thunk
.plt:00000000000033C0
.plt:00000000000033C0 ; struct passwd *getpwuid(__uid_t uid)
.plt:00000000000033C0 _getpwuid       proc near               ; CODE XREF: getuser+36↓p
.plt:00000000000033C0                 jmp     cs:getpwuid_ptr
.plt:00000000000033C0 _getpwuid       endp
.plt:00000000000033C0
.plt:00000000000033C6 ; ---------------------------------------------------------------------------
.plt:00000000000033C6                 push    18h
.plt:00000000000033CB                 jmp     sub_3230
.plt:00000000000033D0
.plt:00000000000033D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033D0
.plt:00000000000033D0 ; Attributes: thunk
.plt:00000000000033D0
.plt:00000000000033D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000033D0 _bindtextdomain proc near               ; CODE XREF: main+4A↓p
.plt:00000000000033D0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000033D0 _bindtextdomain endp
.plt:00000000000033D0
.plt:00000000000033D6 ; ---------------------------------------------------------------------------
.plt:00000000000033D6                 push    19h
.plt:00000000000033DB                 jmp     sub_3230
.plt:00000000000033E0
.plt:00000000000033E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033E0
.plt:00000000000033E0 ; Attributes: thunk
.plt:00000000000033E0
.plt:00000000000033E0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000033E0 _dcgettext      proc near               ; CODE XREF: main+3D3↓p
.plt:00000000000033E0                                         ; main+96B↓p ...
.plt:00000000000033E0                 jmp     cs:dcgettext_ptr
.plt:00000000000033E0 _dcgettext      endp
.plt:00000000000033E0
.plt:00000000000033E6 ; ---------------------------------------------------------------------------
.plt:00000000000033E6                 push    1Ah
.plt:00000000000033EB                 jmp     sub_3230
.plt:00000000000033F0
.plt:00000000000033F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000033F0
.plt:00000000000033F0 ; Attributes: thunk
.plt:00000000000033F0
.plt:00000000000033F0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000033F0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quote_name_buf+EA↓p
.plt:00000000000033F0                                         ; quote_name_buf+1E8↓p ...
.plt:00000000000033F0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000033F0 ___ctype_get_mb_cur_max endp
.plt:00000000000033F0
.plt:00000000000033F6 ; ---------------------------------------------------------------------------
.plt:00000000000033F6                 push    1Bh
.plt:00000000000033FB                 jmp     sub_3230
.plt:0000000000003400
.plt:0000000000003400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003400
.plt:0000000000003400 ; Attributes: thunk
.plt:0000000000003400
.plt:0000000000003400 ; size_t strlen(const char *s)
.plt:0000000000003400 _strlen         proc near               ; CODE XREF: needs_quoting+66↓p
.plt:0000000000003400                                         ; file_escape+E↓p ...
.plt:0000000000003400                 jmp     cs:strlen_ptr
.plt:0000000000003400 _strlen         endp
.plt:0000000000003400
.plt:0000000000003406 ; ---------------------------------------------------------------------------
.plt:0000000000003406                 push    1Ch
.plt:000000000000340B                 jmp     sub_3230
.plt:0000000000003410
.plt:0000000000003410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003410
.plt:0000000000003410 ; Attributes: thunk
.plt:0000000000003410
.plt:0000000000003410 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000003410 ___lxstat       proc near               ; CODE XREF: gobble_file_constprop_52+4BB↓p
.plt:0000000000003410                                         ; canonicalize_filename_mode:loc_C860↓p
.plt:0000000000003410                 jmp     cs:__lxstat_ptr
.plt:0000000000003410 ___lxstat       endp
.plt:0000000000003410
.plt:0000000000003416 ; ---------------------------------------------------------------------------
.plt:0000000000003416                 push    1Dh
.plt:000000000000341B                 jmp     sub_3230
.plt:0000000000003420
.plt:0000000000003420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003420
.plt:0000000000003420 ; Attributes: noreturn thunk
.plt:0000000000003420
.plt:0000000000003420 ___stack_chk_fail proc near             ; CODE XREF: main:loc_525F↓p
.plt:0000000000003420                                         ; set_line_length:loc_574A↓p ...
.plt:0000000000003420                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000003420 ___stack_chk_fail endp
.plt:0000000000003420
.plt:0000000000003426 ; ---------------------------------------------------------------------------
.plt:0000000000003426                 push    1Eh
.plt:000000000000342B                 jmp     sub_3230
.plt:0000000000003430
.plt:0000000000003430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003430
.plt:0000000000003430 ; Attributes: thunk
.plt:0000000000003430
.plt:0000000000003430 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000003430 _getopt_long    proc near               ; CODE XREF: main+286↓p
.plt:0000000000003430                 jmp     cs:getopt_long_ptr
.plt:0000000000003430 _getopt_long    endp
.plt:0000000000003430
.plt:0000000000003436 ; ---------------------------------------------------------------------------
.plt:0000000000003436                 push    1Fh
.plt:000000000000343B                 jmp     sub_3230
.plt:0000000000003440
.plt:0000000000003440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003440
.plt:0000000000003440 ; Attributes: thunk
.plt:0000000000003440
.plt:0000000000003440 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000003440 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000003440                 jmp     cs:mbrtowc_ptr
.plt:0000000000003440 _mbrtowc        endp
.plt:0000000000003440
.plt:0000000000003446 ; ---------------------------------------------------------------------------
.plt:0000000000003446                 push    20h ; ' '
.plt:000000000000344B                 jmp     sub_3230
.plt:0000000000003450
.plt:0000000000003450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003450
.plt:0000000000003450 ; Attributes: thunk
.plt:0000000000003450
.plt:0000000000003450 ; char *strchr(const char *s, int c)
.plt:0000000000003450 _strchr         proc near               ; CODE XREF: main+1515↓p
.plt:0000000000003450                                         ; main+1532↓p ...
.plt:0000000000003450                 jmp     cs:strchr_ptr
.plt:0000000000003450 _strchr         endp
.plt:0000000000003450
.plt:0000000000003456 ; ---------------------------------------------------------------------------
.plt:0000000000003456                 push    21h ; '!'
.plt:000000000000345B                 jmp     sub_3230
.plt:0000000000003460
.plt:0000000000003460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003460
.plt:0000000000003460 ; Attributes: thunk
.plt:0000000000003460
.plt:0000000000003460 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000003460 _getgrgid       proc near               ; CODE XREF: getuser_0+36↓p
.plt:0000000000003460                 jmp     cs:getgrgid_ptr
.plt:0000000000003460 _getgrgid       endp
.plt:0000000000003460
.plt:0000000000003466 ; ---------------------------------------------------------------------------
.plt:0000000000003466                 push    22h ; '"'
.plt:000000000000346B                 jmp     sub_3230
.plt:0000000000003470
.plt:0000000000003470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003470
.plt:0000000000003470 ; Attributes: thunk
.plt:0000000000003470
.plt:0000000000003470 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000003470 ___fxstatat     proc near               ; CODE XREF: same_nameat_part_0+47↓p
.plt:0000000000003470                                         ; same_nameat_part_0+7F↓p
.plt:0000000000003470                 jmp     cs:__fxstatat_ptr
.plt:0000000000003470 ___fxstatat     endp
.plt:0000000000003470
.plt:0000000000003476 ; ---------------------------------------------------------------------------
.plt:0000000000003476                 push    23h ; '#'
.plt:000000000000347B                 jmp     sub_3230
.plt:0000000000003480
.plt:0000000000003480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003480
.plt:0000000000003480 ; Attributes: thunk
.plt:0000000000003480
.plt:0000000000003480 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
.plt:0000000000003480 _snprintf       proc near               ; CODE XREF: abformat_init+265↓p
.plt:0000000000003480                 jmp     cs:snprintf_ptr
.plt:0000000000003480 _snprintf       endp
.plt:0000000000003480
.plt:0000000000003486 ; ---------------------------------------------------------------------------
.plt:0000000000003486                 push    24h ; '$'
.plt:000000000000348B                 jmp     sub_3230
.plt:0000000000003490
.plt:0000000000003490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003490
.plt:0000000000003490 ; Attributes: thunk
.plt:0000000000003490
.plt:0000000000003490 ; int __overflow(_IO_FILE *, int)
.plt:0000000000003490 ___overflow     proc near               ; CODE XREF: main+18EF↓p
.plt:0000000000003490                                         ; indent+9D↓p ...
.plt:0000000000003490                 jmp     cs:__overflow_ptr
.plt:0000000000003490 ___overflow     endp
.plt:0000000000003490
.plt:0000000000003496 ; ---------------------------------------------------------------------------
.plt:0000000000003496                 push    25h ; '%'
.plt:000000000000349B                 jmp     sub_3230
.plt:00000000000034A0
.plt:00000000000034A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034A0
.plt:00000000000034A0 ; Attributes: thunk
.plt:00000000000034A0
.plt:00000000000034A0 ; char *strrchr(const char *s, int c)
.plt:00000000000034A0 _strrchr        proc near               ; CODE XREF: rev_strcmp_df_extension+9A↓p
.plt:00000000000034A0                                         ; rev_strcmp_df_extension+AD↓p ...
.plt:00000000000034A0                 jmp     cs:strrchr_ptr
.plt:00000000000034A0 _strrchr        endp
.plt:00000000000034A0
.plt:00000000000034A6 ; ---------------------------------------------------------------------------
.plt:00000000000034A6                 push    26h ; '&'
.plt:00000000000034AB                 jmp     sub_3230
.plt:00000000000034B0
.plt:00000000000034B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034B0
.plt:00000000000034B0 ; Attributes: thunk
.plt:00000000000034B0
.plt:00000000000034B0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000034B0 _gmtime_r       proc near               ; CODE XREF: localtime_rz+90↓j
.plt:00000000000034B0                 jmp     cs:gmtime_r_ptr
.plt:00000000000034B0 _gmtime_r       endp
.plt:00000000000034B0
.plt:00000000000034B6 ; ---------------------------------------------------------------------------
.plt:00000000000034B6                 push    27h ; '''
.plt:00000000000034BB                 jmp     sub_3230
.plt:00000000000034C0
.plt:00000000000034C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034C0
.plt:00000000000034C0 ; Attributes: thunk
.plt:00000000000034C0
.plt:00000000000034C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000034C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000034C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000034C0                 jmp     cs:lseek_ptr
.plt:00000000000034C0 _lseek          endp
.plt:00000000000034C0
.plt:00000000000034C6 ; ---------------------------------------------------------------------------
.plt:00000000000034C6                 push    28h ; '('
.plt:00000000000034CB                 jmp     sub_3230
.plt:00000000000034D0
.plt:00000000000034D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034D0
.plt:00000000000034D0 ; Attributes: noreturn thunk
.plt:00000000000034D0
.plt:00000000000034D0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000034D0 ___assert_fail  proc near               ; CODE XREF: main+1961↓p
.plt:00000000000034D0                                         ; main+1980↓p ...
.plt:00000000000034D0                 jmp     cs:__assert_fail_ptr
.plt:00000000000034D0 ___assert_fail  endp
.plt:00000000000034D0
.plt:00000000000034D6 ; ---------------------------------------------------------------------------
.plt:00000000000034D6                 push    29h ; ')'
.plt:00000000000034DB                 jmp     sub_3230
.plt:00000000000034E0
.plt:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034E0
.plt:00000000000034E0 ; Attributes: thunk
.plt:00000000000034E0
.plt:00000000000034E0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000034E0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000034E0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000034E0 ___strtoul_internal endp
.plt:00000000000034E0
.plt:00000000000034E6 ; ---------------------------------------------------------------------------
.plt:00000000000034E6                 push    2Ah ; '*'
.plt:00000000000034EB                 jmp     sub_3230
.plt:00000000000034F0
.plt:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000034F0
.plt:00000000000034F0 ; Attributes: thunk
.plt:00000000000034F0
.plt:00000000000034F0 ; int fnmatch(const char *pattern, const char *name, int flags)
.plt:00000000000034F0 _fnmatch        proc near               ; CODE XREF: main+12E4↓p
.plt:00000000000034F0                                         ; print_dir+270↓p ...
.plt:00000000000034F0                 jmp     cs:fnmatch_ptr
.plt:00000000000034F0 _fnmatch        endp
.plt:00000000000034F0
.plt:00000000000034F6 ; ---------------------------------------------------------------------------
.plt:00000000000034F6                 push    2Bh ; '+'
.plt:00000000000034FB                 jmp     sub_3230
.plt:0000000000003500
.plt:0000000000003500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003500
.plt:0000000000003500 ; Attributes: thunk
.plt:0000000000003500
.plt:0000000000003500 ; void *memset(void *s, int c, size_t n)
.plt:0000000000003500 _memset         proc near               ; CODE XREF: __strftime_internal+11D↓p
.plt:0000000000003500                                         ; __strftime_internal+2E1↓p ...
.plt:0000000000003500                 jmp     cs:memset_ptr
.plt:0000000000003500 _memset         endp
.plt:0000000000003500
.plt:0000000000003506 ; ---------------------------------------------------------------------------
.plt:0000000000003506                 push    2Ch ; ','
.plt:000000000000350B                 jmp     sub_3230
.plt:0000000000003510
.plt:0000000000003510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003510
.plt:0000000000003510 ; Attributes: thunk
.plt:0000000000003510
.plt:0000000000003510 ; int ioctl(int fd, unsigned __int64 request, ...)
.plt:0000000000003510 _ioctl          proc near               ; CODE XREF: main+1E7↓p
.plt:0000000000003510                 jmp     cs:ioctl_ptr
.plt:0000000000003510 _ioctl          endp
.plt:0000000000003510
.plt:0000000000003516 ; ---------------------------------------------------------------------------
.plt:0000000000003516                 push    2Dh ; '-'
.plt:000000000000351B                 jmp     sub_3230
.plt:0000000000003520
.plt:0000000000003520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003520
.plt:0000000000003520 ; Attributes: thunk
.plt:0000000000003520
.plt:0000000000003520 ; char *getcwd(char *buf, size_t size)
.plt:0000000000003520 _getcwd         proc near               ; CODE XREF: xgetcwd+5↓p
.plt:0000000000003520                 jmp     cs:getcwd_ptr
.plt:0000000000003520 _getcwd         endp
.plt:0000000000003520
.plt:0000000000003526 ; ---------------------------------------------------------------------------
.plt:0000000000003526                 push    2Eh ; '.'
.plt:000000000000352B                 jmp     sub_3230
.plt:0000000000003530
.plt:0000000000003530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003530
.plt:0000000000003530 ; Attributes: thunk
.plt:0000000000003530
.plt:0000000000003530 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000003530 _strspn         proc near               ; CODE XREF: canonicalize_filename_mode+2A4↓p
.plt:0000000000003530                 jmp     cs:strspn_ptr
.plt:0000000000003530 _strspn         endp
.plt:0000000000003530
.plt:0000000000003536 ; ---------------------------------------------------------------------------
.plt:0000000000003536                 push    2Fh ; '/'
.plt:000000000000353B                 jmp     sub_3230
.plt:0000000000003540
.plt:0000000000003540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003540
.plt:0000000000003540 ; Attributes: thunk
.plt:0000000000003540
.plt:0000000000003540 ; int closedir(DIR *dirp)
.plt:0000000000003540 _closedir       proc near               ; CODE XREF: print_dir+AC↓p
.plt:0000000000003540                                         ; print_dir+178↓p ...
.plt:0000000000003540                 jmp     cs:closedir_ptr
.plt:0000000000003540 _closedir       endp
.plt:0000000000003540
.plt:0000000000003546 ; ---------------------------------------------------------------------------
.plt:0000000000003546                 push    30h ; '0'
.plt:000000000000354B                 jmp     sub_3230
.plt:0000000000003550
.plt:0000000000003550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003550
.plt:0000000000003550 ; Attributes: thunk
.plt:0000000000003550
.plt:0000000000003550 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000003550 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000003550                                         ; argmatch_valid+96↓p ...
.plt:0000000000003550                 jmp     cs:memcmp_ptr
.plt:0000000000003550 _memcmp         endp
.plt:0000000000003550
.plt:0000000000003556 ; ---------------------------------------------------------------------------
.plt:0000000000003556                 push    31h ; '1'
.plt:000000000000355B                 jmp     sub_3230
.plt:0000000000003560
.plt:0000000000003560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003560
.plt:0000000000003560 ; Attributes: thunk
.plt:0000000000003560
.plt:0000000000003560 ; int _setjmp(struct __jmp_buf_tag env[1])
.plt:0000000000003560 __setjmp        proc near               ; CODE XREF: sort_files+66↓p
.plt:0000000000003560                 jmp     cs:_setjmp_ptr
.plt:0000000000003560 __setjmp        endp
.plt:0000000000003560
.plt:0000000000003566 ; ---------------------------------------------------------------------------
.plt:0000000000003566                 push    32h ; '2'
.plt:000000000000356B                 jmp     sub_3230
.plt:0000000000003570
.plt:0000000000003570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003570
.plt:0000000000003570 ; Attributes: thunk
.plt:0000000000003570
.plt:0000000000003570 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000003570 _fputs_unlocked proc near               ; CODE XREF: main+17C4↓p
.plt:0000000000003570                                         ; main+1812↓p ...
.plt:0000000000003570                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000003570 _fputs_unlocked endp
.plt:0000000000003570
.plt:0000000000003576 ; ---------------------------------------------------------------------------
.plt:0000000000003576                 push    33h ; '3'
.plt:000000000000357B                 jmp     sub_3230
.plt:0000000000003580
.plt:0000000000003580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003580
.plt:0000000000003580 ; Attributes: thunk
.plt:0000000000003580
.plt:0000000000003580 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000003580 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:0000000000003580                                         ; hash_rehash+C6↓p ...
.plt:0000000000003580                 jmp     cs:calloc_ptr
.plt:0000000000003580 _calloc         endp
.plt:0000000000003580
.plt:0000000000003586 ; ---------------------------------------------------------------------------
.plt:0000000000003586                 push    34h ; '4'
.plt:000000000000358B                 jmp     sub_3230
.plt:0000000000003590
.plt:0000000000003590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003590
.plt:0000000000003590 ; Attributes: thunk
.plt:0000000000003590
.plt:0000000000003590 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000003590 _strcmp         proc near               ; CODE XREF: main+15F9↓p
.plt:0000000000003590                                         ; strcmp_size+12↓j ...
.plt:0000000000003590                 jmp     cs:strcmp_ptr
.plt:0000000000003590 _strcmp         endp
.plt:0000000000003590
.plt:0000000000003596 ; ---------------------------------------------------------------------------
.plt:0000000000003596                 push    35h ; '5'
.plt:000000000000359B                 jmp     sub_3230
.plt:00000000000035A0
.plt:00000000000035A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035A0
.plt:00000000000035A0 ; Attributes: thunk
.plt:00000000000035A0
.plt:00000000000035A0 ; __sighandler_t signal(int sig, __sighandler_t handler)
.plt:00000000000035A0 _signal         proc near               ; CODE XREF: signal_setup+65↓p
.plt:00000000000035A0                                         ; process_signals+BC↓p
.plt:00000000000035A0                 jmp     cs:signal_ptr
.plt:00000000000035A0 _signal         endp
.plt:00000000000035A0
.plt:00000000000035A6 ; ---------------------------------------------------------------------------
.plt:00000000000035A6                 push    36h ; '6'
.plt:00000000000035AB                 jmp     sub_3230
.plt:00000000000035B0
.plt:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035B0
.plt:00000000000035B0 ; Attributes: thunk
.plt:00000000000035B0
.plt:00000000000035B0 ; int dirfd(DIR *dirp)
.plt:00000000000035B0 _dirfd          proc near               ; CODE XREF: print_dir+65↓p
.plt:00000000000035B0                 jmp     cs:dirfd_ptr
.plt:00000000000035B0 _dirfd          endp
.plt:00000000000035B0
.plt:00000000000035B6 ; ---------------------------------------------------------------------------
.plt:00000000000035B6                 push    37h ; '7'
.plt:00000000000035BB                 jmp     sub_3230
.plt:00000000000035C0
.plt:00000000000035C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035C0
.plt:00000000000035C0 ; Attributes: thunk
.plt:00000000000035C0
.plt:00000000000035C0 ; struct passwd *getpwnam(const char *name)
.plt:00000000000035C0 _getpwnam       proc near               ; CODE XREF: getuidbyname+93↓p
.plt:00000000000035C0                 jmp     cs:getpwnam_ptr
.plt:00000000000035C0 _getpwnam       endp
.plt:00000000000035C0
.plt:00000000000035C6 ; ---------------------------------------------------------------------------
.plt:00000000000035C6                 push    38h ; '8'
.plt:00000000000035CB                 jmp     sub_3230
.plt:00000000000035D0
.plt:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035D0
.plt:00000000000035D0 ; Attributes: thunk
.plt:00000000000035D0
.plt:00000000000035D0 ___memcpy_chk   proc near               ; CODE XREF: human_readable+49C↓p
.plt:00000000000035D0                 jmp     cs:__memcpy_chk_ptr
.plt:00000000000035D0 ___memcpy_chk   endp
.plt:00000000000035D0
.plt:00000000000035D6 ; ---------------------------------------------------------------------------
.plt:00000000000035D6                 push    39h ; '9'
.plt:00000000000035DB                 jmp     sub_3230
.plt:00000000000035E0
.plt:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035E0
.plt:00000000000035E0 ; Attributes: thunk
.plt:00000000000035E0
.plt:00000000000035E0 ; int sigemptyset(sigset_t *set)
.plt:00000000000035E0 _sigemptyset    proc near               ; CODE XREF: signal_setup+BE↓p
.plt:00000000000035E0                 jmp     cs:sigemptyset_ptr
.plt:00000000000035E0 _sigemptyset    endp
.plt:00000000000035E0
.plt:00000000000035E6 ; ---------------------------------------------------------------------------
.plt:00000000000035E6                 push    3Ah ; ':'
.plt:00000000000035EB                 jmp     sub_3230
.plt:00000000000035F0
.plt:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000035F0
.plt:00000000000035F0 ; Attributes: thunk
.plt:00000000000035F0
.plt:00000000000035F0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000035F0 _memcpy         proc near               ; CODE XREF: quote_name_buf+1D9↓p
.plt:00000000000035F0                                         ; canonicalize_filename_mode+183↓p ...
.plt:00000000000035F0                 jmp     cs:memcpy_ptr
.plt:00000000000035F0 _memcpy         endp
.plt:00000000000035F0
.plt:00000000000035F6 ; ---------------------------------------------------------------------------
.plt:00000000000035F6                 push    3Bh ; ';'
.plt:00000000000035FB                 jmp     sub_3230
.plt:0000000000003600
.plt:0000000000003600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003600
.plt:0000000000003600 ; Attributes: thunk
.plt:0000000000003600
.plt:0000000000003600 ; struct group *getgrnam(const char *name)
.plt:0000000000003600 _getgrnam       proc near               ; CODE XREF: getuidbyname_0+93↓p
.plt:0000000000003600                 jmp     cs:getgrnam_ptr
.plt:0000000000003600 _getgrnam       endp
.plt:0000000000003600
.plt:0000000000003606 ; ---------------------------------------------------------------------------
.plt:0000000000003606                 push    3Ch ; '<'
.plt:000000000000360B                 jmp     sub_3230
.plt:0000000000003610
.plt:0000000000003610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003610
.plt:0000000000003610 ; Attributes: thunk
.plt:0000000000003610
.plt:0000000000003610 ; void tzset(void)
.plt:0000000000003610 _tzset          proc near               ; CODE XREF: revert_tz:loc_157B0↓p
.plt:0000000000003610                                         ; set_tz:loc_15A68↓p
.plt:0000000000003610                 jmp     cs:tzset_ptr
.plt:0000000000003610 _tzset          endp
.plt:0000000000003610
.plt:0000000000003616 ; ---------------------------------------------------------------------------
.plt:0000000000003616                 push    3Dh ; '='
.plt:000000000000361B                 jmp     sub_3230
.plt:0000000000003620
.plt:0000000000003620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003620
.plt:0000000000003620 ; Attributes: thunk
.plt:0000000000003620
.plt:0000000000003620 ; int fileno(FILE *stream)
.plt:0000000000003620 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000003620                                         ; rpl_fclose+4B↓p ...
.plt:0000000000003620                 jmp     cs:fileno_ptr
.plt:0000000000003620 _fileno         endp
.plt:0000000000003620
.plt:0000000000003626 ; ---------------------------------------------------------------------------
.plt:0000000000003626                 push    3Eh ; '>'
.plt:000000000000362B                 jmp     sub_3230
.plt:0000000000003630
.plt:0000000000003630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003630
.plt:0000000000003630 ; Attributes: thunk
.plt:0000000000003630
.plt:0000000000003630 ; __pid_t tcgetpgrp(int fd)
.plt:0000000000003630 _tcgetpgrp      proc near               ; CODE XREF: put_indicator+3C↓p
.plt:0000000000003630                 jmp     cs:tcgetpgrp_ptr
.plt:0000000000003630 _tcgetpgrp      endp
.plt:0000000000003630
.plt:0000000000003636 ; ---------------------------------------------------------------------------
.plt:0000000000003636                 push    3Fh ; '?'
.plt:000000000000363B                 jmp     sub_3230
.plt:0000000000003640
.plt:0000000000003640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003640
.plt:0000000000003640 ; Attributes: thunk
.plt:0000000000003640
.plt:0000000000003640 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000003640 ___xstat        proc near               ; CODE XREF: gobble_file_constprop_52+16C↓p
.plt:0000000000003640                                         ; gobble_file_constprop_52+5CA↓p ...
.plt:0000000000003640                 jmp     cs:__xstat_ptr
.plt:0000000000003640 ___xstat        endp
.plt:0000000000003640
.plt:0000000000003646 ; ---------------------------------------------------------------------------
.plt:0000000000003646                 push    40h ; '@'
.plt:000000000000364B                 jmp     sub_3230
.plt:0000000000003650
.plt:0000000000003650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003650
.plt:0000000000003650 ; Attributes: thunk
.plt:0000000000003650
.plt:0000000000003650 ; struct dirent *readdir(DIR *dirp)
.plt:0000000000003650 _readdir        proc near               ; CODE XREF: print_dir+20B↓p
.plt:0000000000003650                 jmp     cs:readdir_ptr
.plt:0000000000003650 _readdir        endp
.plt:0000000000003650
.plt:0000000000003656 ; ---------------------------------------------------------------------------
.plt:0000000000003656                 push    41h ; 'A'
.plt:000000000000365B                 jmp     sub_3230
.plt:0000000000003660
.plt:0000000000003660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003660
.plt:0000000000003660 ; Attributes: thunk
.plt:0000000000003660
.plt:0000000000003660 ; int wcwidth(wchar_t c)
.plt:0000000000003660 _wcwidth        proc near               ; CODE XREF: quote_name_buf+292↓p
.plt:0000000000003660                                         ; quote_name_buf:loc_7350↓p ...
.plt:0000000000003660                 jmp     cs:wcwidth_ptr
.plt:0000000000003660 _wcwidth        endp
.plt:0000000000003660
.plt:0000000000003666 ; ---------------------------------------------------------------------------
.plt:0000000000003666                 push    42h ; 'B'
.plt:000000000000366B                 jmp     sub_3230
.plt:0000000000003670
.plt:0000000000003670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003670
.plt:0000000000003670 ; Attributes: thunk
.plt:0000000000003670
.plt:0000000000003670 ; int fflush(FILE *stream)
.plt:0000000000003670 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000003670                                         ; rpl_fflush+3B↓j
.plt:0000000000003670                 jmp     cs:fflush_ptr
.plt:0000000000003670 _fflush         endp
.plt:0000000000003670
.plt:0000000000003676 ; ---------------------------------------------------------------------------
.plt:0000000000003676                 push    43h ; 'C'
.plt:000000000000367B                 jmp     sub_3230
.plt:0000000000003680
.plt:0000000000003680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003680
.plt:0000000000003680 ; Attributes: thunk
.plt:0000000000003680
.plt:0000000000003680 ; char *nl_langinfo(nl_item item)
.plt:0000000000003680 _nl_langinfo    proc near               ; CODE XREF: abformat_init+C0↓p
.plt:0000000000003680                                         ; locale_charset+9↓p
.plt:0000000000003680                 jmp     cs:nl_langinfo_ptr
.plt:0000000000003680 _nl_langinfo    endp
.plt:0000000000003680
.plt:0000000000003686 ; ---------------------------------------------------------------------------
.plt:0000000000003686                 push    44h ; 'D'
.plt:000000000000368B                 jmp     sub_3230
.plt:0000000000003690
.plt:0000000000003690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003690
.plt:0000000000003690 ; Attributes: thunk
.plt:0000000000003690
.plt:0000000000003690 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000003690 ___fxstat       proc near               ; CODE XREF: print_dir+7A↓p
.plt:0000000000003690                 jmp     cs:__fxstat_ptr
.plt:0000000000003690 ___fxstat       endp
.plt:0000000000003690
.plt:0000000000003696 ; ---------------------------------------------------------------------------
.plt:0000000000003696                 push    45h ; 'E'
.plt:000000000000369B                 jmp     sub_3230
.plt:00000000000036A0
.plt:00000000000036A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036A0
.plt:00000000000036A0 ; Attributes: thunk
.plt:00000000000036A0
.plt:00000000000036A0 ; int strcoll(const char *s1, const char *s2)
.plt:00000000000036A0 _strcoll        proc near               ; CODE XREF: xstrcoll+23↓j
.plt:00000000000036A0                 jmp     cs:strcoll_ptr
.plt:00000000000036A0 _strcoll        endp
.plt:00000000000036A0
.plt:00000000000036A6 ; ---------------------------------------------------------------------------
.plt:00000000000036A6                 push    46h ; 'F'
.plt:00000000000036AB                 jmp     sub_3230
.plt:00000000000036B0
.plt:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036B0
.plt:00000000000036B0 ; Attributes: thunk
.plt:00000000000036B0
.plt:00000000000036B0 ; time_t mktime(struct tm *tp)
.plt:00000000000036B0 _mktime         proc near               ; CODE XREF: mktime_z+3B↓p
.plt:00000000000036B0                 jmp     cs:mktime_ptr
.plt:00000000000036B0 _mktime         endp
.plt:00000000000036B0
.plt:00000000000036B6 ; ---------------------------------------------------------------------------
.plt:00000000000036B6                 push    47h ; 'G'
.plt:00000000000036BB                 jmp     sub_3230
.plt:00000000000036C0
.plt:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036C0
.plt:00000000000036C0 ; Attributes: thunk
.plt:00000000000036C0
.plt:00000000000036C0 ; int __freading(FILE *fp)
.plt:00000000000036C0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000036C0                                         ; rpl_fflush+9↓p
.plt:00000000000036C0                 jmp     cs:__freading_ptr
.plt:00000000000036C0 ___freading     endp
.plt:00000000000036C0
.plt:00000000000036C6 ; ---------------------------------------------------------------------------
.plt:00000000000036C6                 push    48h ; 'H'
.plt:00000000000036CB                 jmp     sub_3230
.plt:00000000000036D0
.plt:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036D0
.plt:00000000000036D0 ; Attributes: thunk
.plt:00000000000036D0
.plt:00000000000036D0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:00000000000036D0 _fwrite_unlocked proc near              ; CODE XREF: put_indicator+21↓j
.plt:00000000000036D0                                         ; quote_name+194↓p ...
.plt:00000000000036D0                 jmp     cs:fwrite_unlocked_ptr
.plt:00000000000036D0 _fwrite_unlocked endp
.plt:00000000000036D0
.plt:00000000000036D6 ; ---------------------------------------------------------------------------
.plt:00000000000036D6                 push    49h ; 'I'
.plt:00000000000036DB                 jmp     sub_3230
.plt:00000000000036E0
.plt:00000000000036E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036E0
.plt:00000000000036E0 ; Attributes: thunk
.plt:00000000000036E0
.plt:00000000000036E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000036E0 _realloc        proc near               ; CODE XREF: ambsalign+32↓p
.plt:00000000000036E0                                         ; xrealloc+11↓p
.plt:00000000000036E0                 jmp     cs:realloc_ptr
.plt:00000000000036E0 _realloc        endp
.plt:00000000000036E0
.plt:00000000000036E6 ; ---------------------------------------------------------------------------
.plt:00000000000036E6                 push    4Ah ; 'J'
.plt:00000000000036EB                 jmp     sub_3230
.plt:00000000000036F0
.plt:00000000000036F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000036F0
.plt:00000000000036F0 ; Attributes: thunk
.plt:00000000000036F0
.plt:00000000000036F0 ; char *stpncpy(char *dest, const char *src, size_t n)
.plt:00000000000036F0 _stpncpy        proc near               ; CODE XREF: gobble_file_constprop_52+9D0↓p
.plt:00000000000036F0                 jmp     cs:stpncpy_ptr
.plt:00000000000036F0 _stpncpy        endp
.plt:00000000000036F0
.plt:00000000000036F6 ; ---------------------------------------------------------------------------
.plt:00000000000036F6                 push    4Bh ; 'K'
.plt:00000000000036FB                 jmp     sub_3230
.plt:0000000000003700
.plt:0000000000003700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003700
.plt:0000000000003700 ; Attributes: thunk
.plt:0000000000003700
.plt:0000000000003700 ; char *setlocale(int category, const char *locale)
.plt:0000000000003700 _setlocale      proc near               ; CODE XREF: main+37↓p
.plt:0000000000003700                                         ; usage+5EC↓p ...
.plt:0000000000003700                 jmp     cs:setlocale_ptr
.plt:0000000000003700 _setlocale      endp
.plt:0000000000003700
.plt:0000000000003706 ; ---------------------------------------------------------------------------
.plt:0000000000003706                 push    4Ch ; 'L'
.plt:000000000000370B                 jmp     sub_3230
.plt:0000000000003710
.plt:0000000000003710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003710
.plt:0000000000003710 ; Attributes: thunk
.plt:0000000000003710
.plt:0000000000003710 ___printf_chk   proc near               ; CODE XREF: main+1227↓p
.plt:0000000000003710                                         ; dired_dump_obstack+81↓p ...
.plt:0000000000003710                 jmp     cs:__printf_chk_ptr
.plt:0000000000003710 ___printf_chk   endp
.plt:0000000000003710
.plt:0000000000003716 ; ---------------------------------------------------------------------------
.plt:0000000000003716                 push    4Dh ; 'M'
.plt:000000000000371B                 jmp     sub_3230
.plt:0000000000003720
.plt:0000000000003720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003720
.plt:0000000000003720 ; Attributes: thunk
.plt:0000000000003720
.plt:0000000000003720 ; time_t timegm(struct tm *tp)
.plt:0000000000003720 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000003720                 jmp     cs:timegm_ptr
.plt:0000000000003720 _timegm         endp
.plt:0000000000003720
.plt:0000000000003726 ; ---------------------------------------------------------------------------
.plt:0000000000003726                 push    4Eh ; 'N'
.plt:000000000000372B                 jmp     sub_3230
.plt:0000000000003730
.plt:0000000000003730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003730
.plt:0000000000003730 ; Attributes: thunk
.plt:0000000000003730
.plt:0000000000003730 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000003730 _strftime       proc near               ; CODE XREF: __strftime_internal+418↓p
.plt:0000000000003730                 jmp     cs:strftime_ptr
.plt:0000000000003730 _strftime       endp
.plt:0000000000003730
.plt:0000000000003736 ; ---------------------------------------------------------------------------
.plt:0000000000003736                 push    4Fh ; 'O'
.plt:000000000000373B                 jmp     sub_3230
.plt:0000000000003740
.plt:0000000000003740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003740
.plt:0000000000003740 ; Attributes: thunk
.plt:0000000000003740
.plt:0000000000003740 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000003740 _mempcpy        proc near               ; CODE XREF: mfile_name_concat+AD↓p
.plt:0000000000003740                                         ; mfile_name_concat+CE↓p ...
.plt:0000000000003740                 jmp     cs:mempcpy_ptr
.plt:0000000000003740 _mempcpy        endp
.plt:0000000000003740
.plt:0000000000003746 ; ---------------------------------------------------------------------------
.plt:0000000000003746                 push    50h ; 'P'
.plt:000000000000374B                 jmp     sub_3230
.plt:0000000000003750
.plt:0000000000003750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003750
.plt:0000000000003750 ; Attributes: thunk
.plt:0000000000003750
.plt:0000000000003750 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000003750 _memmove        proc near               ; CODE XREF: canonicalize_filename_mode+4A8↓p
.plt:0000000000003750                                         ; human_readable+375↓p
.plt:0000000000003750                 jmp     cs:memmove_ptr
.plt:0000000000003750 _memmove        endp
.plt:0000000000003750
.plt:0000000000003756 ; ---------------------------------------------------------------------------
.plt:0000000000003756                 push    51h ; 'Q'
.plt:000000000000375B                 jmp     sub_3230
.plt:0000000000003760
.plt:0000000000003760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003760
.plt:0000000000003760 ; Attributes: thunk
.plt:0000000000003760
.plt:0000000000003760 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000003760 _error          proc near               ; CODE XREF: main+986↓p
.plt:0000000000003760                                         ; main+E9C↓p ...
.plt:0000000000003760                 jmp     cs:error_ptr
.plt:0000000000003760 _error          endp
.plt:0000000000003760
.plt:0000000000003766 ; ---------------------------------------------------------------------------
.plt:0000000000003766                 push    52h ; 'R'
.plt:000000000000376B                 jmp     sub_3230
.plt:0000000000003770
.plt:0000000000003770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003770
.plt:0000000000003770 ; Attributes: thunk
.plt:0000000000003770
.plt:0000000000003770 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000003770 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_15E6A↓j
.plt:0000000000003770                 jmp     cs:fseeko_ptr
.plt:0000000000003770 _fseeko         endp
.plt:0000000000003770
.plt:0000000000003776 ; ---------------------------------------------------------------------------
.plt:0000000000003776                 push    53h ; 'S'
.plt:000000000000377B                 jmp     sub_3230
.plt:0000000000003780
.plt:0000000000003780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003780
.plt:0000000000003780 ; Attributes: thunk
.plt:0000000000003780
.plt:0000000000003780 ; int unsetenv(const char *name)
.plt:0000000000003780 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000003780                 jmp     cs:unsetenv_ptr
.plt:0000000000003780 _unsetenv       endp
.plt:0000000000003780
.plt:0000000000003786 ; ---------------------------------------------------------------------------
.plt:0000000000003786                 push    54h ; 'T'
.plt:000000000000378B                 jmp     sub_3230
.plt:0000000000003790
.plt:0000000000003790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003790
.plt:0000000000003790 ; Attributes: thunk
.plt:0000000000003790
.plt:0000000000003790 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000003790 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000003790                 jmp     cs:strtoul_ptr
.plt:0000000000003790 _strtoul        endp
.plt:0000000000003790
.plt:0000000000003796 ; ---------------------------------------------------------------------------
.plt:0000000000003796                 push    55h ; 'U'
.plt:000000000000379B                 jmp     sub_3230
.plt:00000000000037A0
.plt:00000000000037A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037A0
.plt:00000000000037A0 ; Attributes: thunk
.plt:00000000000037A0
.plt:00000000000037A0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000037A0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000037A0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000037A0 ___cxa_atexit   endp
.plt:00000000000037A0
.plt:00000000000037A6 ; ---------------------------------------------------------------------------
.plt:00000000000037A6                 push    56h ; 'V'
.plt:00000000000037AB                 jmp     sub_3230
.plt:00000000000037B0
.plt:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037B0
.plt:00000000000037B0 ; Attributes: thunk
.plt:00000000000037B0
.plt:00000000000037B0 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
.plt:00000000000037B0 _wcstombs       proc near               ; CODE XREF: mbsalign+2A2↓p
.plt:00000000000037B0                                         ; mbsalign+327↓p
.plt:00000000000037B0                 jmp     cs:wcstombs_ptr
.plt:00000000000037B0 _wcstombs       endp
.plt:00000000000037B0
.plt:00000000000037B6 ; ---------------------------------------------------------------------------
.plt:00000000000037B6                 push    57h ; 'W'
.plt:00000000000037BB                 jmp     sub_3230
.plt:00000000000037C0
.plt:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037C0
.plt:00000000000037C0 ; Attributes: thunk
.plt:00000000000037C0
.plt:00000000000037C0 ; int gethostname(char *name, size_t len)
.plt:00000000000037C0 _gethostname    proc near               ; CODE XREF: xgethostname+69↓p
.plt:00000000000037C0                 jmp     cs:gethostname_ptr
.plt:00000000000037C0 _gethostname    endp
.plt:00000000000037C0
.plt:00000000000037C6 ; ---------------------------------------------------------------------------
.plt:00000000000037C6                 push    58h ; 'X'
.plt:00000000000037CB                 jmp     sub_3230
.plt:00000000000037D0
.plt:00000000000037D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037D0
.plt:00000000000037D0 ; Attributes: thunk
.plt:00000000000037D0
.plt:00000000000037D0 ; int sigismember(const sigset_t *set, int signo)
.plt:00000000000037D0 _sigismember    proc near               ; CODE XREF: signal_setup+58↓p
.plt:00000000000037D0                                         ; signal_setup+196↓p
.plt:00000000000037D0                 jmp     cs:sigismember_ptr
.plt:00000000000037D0 _sigismember    endp
.plt:00000000000037D0
.plt:00000000000037D6 ; ---------------------------------------------------------------------------
.plt:00000000000037D6                 push    59h ; 'Y'
.plt:00000000000037DB                 jmp     sub_3230
.plt:00000000000037E0
.plt:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037E0
.plt:00000000000037E0 ; Attributes: noreturn thunk
.plt:00000000000037E0
.plt:00000000000037E0 ; void __noreturn exit(int status)
.plt:00000000000037E0 _exit           proc near               ; CODE XREF: main+5A7↓p
.plt:00000000000037E0                                         ; usage+5A↓p ...
.plt:00000000000037E0                 jmp     cs:exit_ptr
.plt:00000000000037E0 _exit           endp
.plt:00000000000037E0
.plt:00000000000037E6 ; ---------------------------------------------------------------------------
.plt:00000000000037E6                 push    5Ah ; 'Z'
.plt:00000000000037EB                 jmp     sub_3230
.plt:00000000000037F0
.plt:00000000000037F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000037F0
.plt:00000000000037F0 ; Attributes: thunk
.plt:00000000000037F0
.plt:00000000000037F0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000037F0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000037F0                 jmp     cs:fwrite_ptr
.plt:00000000000037F0 _fwrite         endp
.plt:00000000000037F0
.plt:00000000000037F6 ; ---------------------------------------------------------------------------
.plt:00000000000037F6                 push    5Bh ; '['
.plt:00000000000037FB                 jmp     sub_3230
.plt:0000000000003800
.plt:0000000000003800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003800
.plt:0000000000003800 ; Attributes: thunk
.plt:0000000000003800
.plt:0000000000003800 ___fprintf_chk  proc near               ; CODE XREF: main+17E5↓p
.plt:0000000000003800                                         ; usage+52↓p ...
.plt:0000000000003800                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000003800 ___fprintf_chk  endp
.plt:0000000000003800
.plt:0000000000003806 ; ---------------------------------------------------------------------------
.plt:0000000000003806                 push    5Ch ; '\'
.plt:000000000000380B                 jmp     sub_3230
.plt:0000000000003810
.plt:0000000000003810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003810
.plt:0000000000003810 ; Attributes: thunk
.plt:0000000000003810
.plt:0000000000003810 ; int fflush_unlocked(FILE *stream)
.plt:0000000000003810 _fflush_unlocked proc near              ; CODE XREF: main+F57↓p
.plt:0000000000003810                                         ; process_signals+2F↓p
.plt:0000000000003810                 jmp     cs:fflush_unlocked_ptr
.plt:0000000000003810 _fflush_unlocked endp
.plt:0000000000003810
.plt:0000000000003816 ; ---------------------------------------------------------------------------
.plt:0000000000003816                 push    5Dh ; ']'
.plt:000000000000381B                 jmp     sub_3230
.plt:0000000000003820
.plt:0000000000003820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003820
.plt:0000000000003820 ; Attributes: thunk
.plt:0000000000003820
.plt:0000000000003820 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000003820 _mbsinit        proc near               ; CODE XREF: quote_name_buf+2C7↓p
.plt:0000000000003820                                         ; mbsnwidth+A7↓p ...
.plt:0000000000003820                 jmp     cs:mbsinit_ptr
.plt:0000000000003820 _mbsinit        endp
.plt:0000000000003820
.plt:0000000000003826 ; ---------------------------------------------------------------------------
.plt:0000000000003826                 push    5Eh ; '^'
.plt:000000000000382B                 jmp     sub_3230
.plt:0000000000003830
.plt:0000000000003830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003830
.plt:0000000000003830 ; Attributes: thunk
.plt:0000000000003830
.plt:0000000000003830 ; int iswprint(wint_t wc)
.plt:0000000000003830 _iswprint       proc near               ; CODE XREF: mbsalign+25D↓p
.plt:0000000000003830                                         ; quotearg_buffer_restyled+990↓p
.plt:0000000000003830                 jmp     cs:iswprint_ptr
.plt:0000000000003830 _iswprint       endp
.plt:0000000000003830
.plt:0000000000003836 ; ---------------------------------------------------------------------------
.plt:0000000000003836                 push    5Fh ; '_'
.plt:000000000000383B                 jmp     sub_3230
.plt:0000000000003840
.plt:0000000000003840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003840
.plt:0000000000003840 ; Attributes: thunk
.plt:0000000000003840
.plt:0000000000003840 ; int sigaddset(sigset_t *set, int signo)
.plt:0000000000003840 _sigaddset      proc near               ; CODE XREF: signal_setup+F1↓p
.plt:0000000000003840                 jmp     cs:sigaddset_ptr
.plt:0000000000003840 _sigaddset      endp
.plt:0000000000003840
.plt:0000000000003846 ; ---------------------------------------------------------------------------
.plt:0000000000003846                 push    60h ; '`'
.plt:000000000000384B                 jmp     sub_3230
.plt:0000000000003850
.plt:0000000000003850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003850
.plt:0000000000003850 ; Attributes: thunk
.plt:0000000000003850
.plt:0000000000003850 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000003850 ___ctype_tolower_loc proc near          ; CODE XREF: memcpy_lowcase+13↓p
.plt:0000000000003850                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000003850 ___ctype_tolower_loc endp
.plt:0000000000003850
.plt:0000000000003856 ; ---------------------------------------------------------------------------
.plt:0000000000003856                 push    61h ; 'a'
.plt:000000000000385B                 jmp     sub_3230
.plt:0000000000003860
.plt:0000000000003860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003860
.plt:0000000000003860 ; Attributes: thunk
.plt:0000000000003860
.plt:0000000000003860 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000003860 ___ctype_b_loc  proc near               ; CODE XREF: abformat_init+DE↓p
.plt:0000000000003860                                         ; quote_name_buf+107↓p ...
.plt:0000000000003860                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000003860 ___ctype_b_loc  endp
.plt:0000000000003860
.plt:0000000000003866 ; ---------------------------------------------------------------------------
.plt:0000000000003866                 push    62h ; 'b'
.plt:000000000000386B                 jmp     sub_3230
.plt:0000000000003870
.plt:0000000000003870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000003870
.plt:0000000000003870 ; Attributes: thunk
.plt:0000000000003870
.plt:0000000000003870 ___sprintf_chk  proc near               ; CODE XREF: file_escape+AC↓p
.plt:0000000000003870                                         ; print_long_format+E1↓p ...
.plt:0000000000003870                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000003870 ___sprintf_chk  endp
.plt:0000000000003870
.plt:0000000000003876 ; ---------------------------------------------------------------------------
.plt:0000000000003876                 push    63h ; 'c'
.plt:000000000000387B                 jmp     sub_3230
.plt:000000000000387B ; } // starts at 3230
.plt:000000000000387B _plt            ends
.plt:000000000000387B
.plt.got:0000000000003880 ; ===========================================================================
.plt.got:0000000000003880
.plt.got:0000000000003880 ; Segment type: Pure code
.plt.got:0000000000003880 ; Segment permissions: Read/Execute
.plt.got:0000000000003880 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000003880                 assume cs:_plt_got
.plt.got:0000000000003880                 ;org 3880h
.plt.got:0000000000003880                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000003880
.plt.got:0000000000003880 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000003880
.plt.got:0000000000003880 ; Attributes: thunk
.plt.got:0000000000003880
.plt.got:0000000000003880 ; void free(void *ptr)
.plt.got:0000000000003880 free            proc near               ; CODE XREF: main+D28↓p
.plt.got:0000000000003880                                         ; main+D31↓p ...
.plt.got:0000000000003880 ; __unwind {
.plt.got:0000000000003880                 jmp     cs:free_ptr
.plt.got:0000000000003880 free            endp
.plt.got:0000000000003880
.plt.got:0000000000003880 ; ---------------------------------------------------------------------------
.plt.got:0000000000003886                 align 8
.plt.got:0000000000003888
.plt.got:0000000000003888 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000003888
.plt.got:0000000000003888 ; Attributes: thunk
.plt.got:0000000000003888
.plt.got:0000000000003888 ; void *malloc(size_t size)
.plt.got:0000000000003888 malloc          proc near               ; CODE XREF: areadlink_with_size+43↓p
.plt.got:0000000000003888                                         ; areadlink_with_size+7E↓p ...
.plt.got:0000000000003888                 jmp     cs:malloc_ptr
.plt.got:0000000000003888 malloc          endp
.plt.got:0000000000003888
.plt.got:0000000000003888 ; ---------------------------------------------------------------------------
.plt.got:000000000000388E                 align 10h
.plt.got:0000000000003890
.plt.got:0000000000003890 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000003890
.plt.got:0000000000003890 ; Attributes: thunk
.plt.got:0000000000003890
.plt.got:0000000000003890 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000003890 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000003890                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000003890 __cxa_finalize  endp
.plt.got:0000000000003890
.plt.got:0000000000003890 ; ---------------------------------------------------------------------------
.plt.got:0000000000003896                 align 8
.plt.got:0000000000003896 ; } // starts at 3880
.plt.got:0000000000003896 _plt_got        ends
.plt.got:0000000000003896
LOAD:0000000000003898 ; ===========================================================================
LOAD:0000000000003898
LOAD:0000000000003898 ; Segment type: Pure code
LOAD:0000000000003898 ; Segment permissions: Read/Execute
LOAD:0000000000003898 LOAD            segment byte public 'CODE' use64
LOAD:0000000000003898                 assume cs:LOAD
LOAD:0000000000003898                 ;org 3898h
LOAD:0000000000003898                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000003898                 align 20h
LOAD:0000000000003898 LOAD            ends
LOAD:0000000000003898
.text:00000000000038A0 ; ===========================================================================
.text:00000000000038A0
.text:00000000000038A0 ; Segment type: Pure code
.text:00000000000038A0 ; Segment permissions: Read/Execute
.text:00000000000038A0 _text           segment para public 'CODE' use64
.text:00000000000038A0                 assume cs:_text
.text:00000000000038A0                 ;org 38A0h
.text:00000000000038A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000038A0                 public main
.text:00000000000038A0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000038A0
.text:00000000000038A0 name            = qword ptr -80h
.text:00000000000038A0 var_78          = qword ptr -78h
.text:00000000000038A0 var_70          = qword ptr -70h
.text:00000000000038A0 var_60          = qword ptr -60h
.text:00000000000038A0 longind         = dword ptr -58h
.text:00000000000038A0 var_50          = qword ptr -50h
.text:00000000000038A0 s1              = byte ptr -43h
.text:00000000000038A0 var_41          = byte ptr -41h
.text:00000000000038A0 var_40          = qword ptr -40h
.text:00000000000038A0
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 push    r15
.text:00000000000038A2                 push    r14
.text:00000000000038A4                 push    r13
.text:00000000000038A6                 push    r12
.text:00000000000038A8                 push    rbp
.text:00000000000038A9                 push    rbx
.text:00000000000038AA                 mov     ebp, edi
.text:00000000000038AC                 mov     rbx, rsi
.text:00000000000038AF                 sub     rsp, 58h
.text:00000000000038B3                 mov     rdi, [rsi]
.text:00000000000038B6                 mov     rax, fs:28h
.text:00000000000038BF                 mov     [rsp+88h+var_40], rax
.text:00000000000038C4                 xor     eax, eax
.text:00000000000038C6                 call    set_program_name
.text:00000000000038CB                 lea     rsi, a8+6       ; locale
.text:00000000000038D2                 mov     edi, 6          ; category
.text:00000000000038D7                 call    _setlocale
.text:00000000000038DC                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000038E3                 lea     rdi, domainname ; "coreutils"
.text:00000000000038EA                 call    _bindtextdomain
.text:00000000000038EF                 lea     rdi, domainname ; "coreutils"
.text:00000000000038F6                 call    _textdomain
.text:00000000000038FB                 lea     rdi, close_stdout
.text:0000000000003902                 mov     cs:exit_failure, 2
.text:000000000000390C                 call    atexit
.text:0000000000003911                 mov     rax, 8000000000000000h
.text:000000000000391B                 mov     cs:exit_status, 0
.text:0000000000003925                 mov     cs:print_dir_name, 1
.text:000000000000392C                 mov     cs:current_time.tv_sec, rax
.text:0000000000003933                 mov     eax, cs:ls_mode
.text:0000000000003939                 mov     cs:pending_dirs, 0
.text:0000000000003944                 mov     cs:current_time.tv_nsec, 0FFFFFFFFFFFFFFFFh
.text:000000000000394F                 mov     cs:qmark_funny_chars, 0
.text:0000000000003956                 cmp     eax, 2
.text:0000000000003959                 jz      loc_46F7
.text:000000000000395F                 cmp     eax, 3
.text:0000000000003962                 jz      short loc_3972
.text:0000000000003964                 sub     eax, 1
.text:0000000000003967                 jz      loc_425A
.text:000000000000396D                 call    _abort
.text:0000000000003972 ; ---------------------------------------------------------------------------
.text:0000000000003972
.text:0000000000003972 loc_3972:                               ; CODE XREF: main+C2↑j
.text:0000000000003972                 mov     esi, 7
.text:0000000000003977                 xor     edi, edi
.text:0000000000003979                 mov     cs:format, 0
.text:0000000000003983                 call    set_quoting_style
.text:0000000000003988
.text:0000000000003988 loc_3988:                               ; CODE XREF: main+9D6↓j
.text:0000000000003988                                         ; main+E6D↓j ...
.text:0000000000003988                 lea     rdi, name       ; "QUOTING_STYLE"
.text:000000000000398F                 mov     cs:time_type, 0
.text:0000000000003999                 mov     cs:sort_type, 0
.text:00000000000039A3                 mov     cs:sort_reverse, 0
.text:00000000000039AA                 mov     cs:numeric_ids, 0
.text:00000000000039B1                 mov     cs:print_block_size, 0
.text:00000000000039B8                 mov     cs:indicator_style, 0
.text:00000000000039C2                 mov     cs:print_inode, 0
.text:00000000000039C9                 mov     cs:dereference, 1
.text:00000000000039D3                 mov     cs:recursive, 0
.text:00000000000039DA                 mov     cs:immediate_dirs, 0
.text:00000000000039E1                 mov     cs:ignore_mode, 0
.text:00000000000039EB                 mov     cs:ignore_patterns, 0
.text:00000000000039F6                 mov     cs:hide_patterns, 0
.text:0000000000003A01                 mov     cs:print_scontext, 0
.text:0000000000003A08                 call    _getenv
.text:0000000000003A0D                 test    rax, rax
.text:0000000000003A10                 mov     r12, rax
.text:0000000000003A13                 jz      short loc_3A4B
.text:0000000000003A15                 lea     rdx, quoting_style_vals
.text:0000000000003A1C                 lea     rsi, quoting_style_args
.text:0000000000003A23                 mov     ecx, 4
.text:0000000000003A28                 mov     rdi, rax
.text:0000000000003A2B                 call    argmatch
.text:0000000000003A30                 test    eax, eax
.text:0000000000003A32                 js      loc_4712
.text:0000000000003A38                 lea     rdx, quoting_style_vals
.text:0000000000003A3F                 cdqe
.text:0000000000003A41                 xor     edi, edi
.text:0000000000003A43                 mov     esi, [rdx+rax*4]
.text:0000000000003A46                 call    set_quoting_style
.text:0000000000003A4B
.text:0000000000003A4B loc_3A4B:                               ; CODE XREF: main+173↑j
.text:0000000000003A4B                                         ; main+EA1↓j
.text:0000000000003A4B                 lea     rdi, aColumns   ; "COLUMNS"
.text:0000000000003A52                 mov     cs:line_length, 50h ; 'P'
.text:0000000000003A5D                 call    _getenv
.text:0000000000003A62                 test    rax, rax
.text:0000000000003A65                 mov     r12, rax
.text:0000000000003A68                 jz      short loc_3A73
.text:0000000000003A6A                 cmp     byte ptr [rax], 0
.text:0000000000003A6D                 jnz     loc_474D
.text:0000000000003A73
.text:0000000000003A73 loc_3A73:                               ; CODE XREF: main+1C8↑j
.text:0000000000003A73                                         ; main+EB7↓j ...
.text:0000000000003A73                 lea     r12, [rsp+88h+longind]
.text:0000000000003A78                 xor     eax, eax
.text:0000000000003A7A                 mov     esi, 5413h      ; request
.text:0000000000003A7F                 mov     edi, 1          ; fd
.text:0000000000003A84                 mov     rdx, r12
.text:0000000000003A87                 call    _ioctl
.text:0000000000003A8C                 cmp     eax, 0FFFFFFFFh
.text:0000000000003A8F                 jz      short loc_3AA2
.text:0000000000003A91                 movzx   eax, word ptr [rsp+88h+longind+2]
.text:0000000000003A96                 test    ax, ax
.text:0000000000003A99                 jz      short loc_3AA2
.text:0000000000003A9B                 mov     cs:line_length, rax
.text:0000000000003AA2
.text:0000000000003AA2 loc_3AA2:                               ; CODE XREF: main+1EF↑j
.text:0000000000003AA2                                         ; main+1F9↑j
.text:0000000000003AA2                 lea     rdi, aTabsize   ; "TABSIZE"
.text:0000000000003AA9                 call    _getenv
.text:0000000000003AAE                 test    rax, rax
.text:0000000000003AB1                 mov     r13, rax
.text:0000000000003AB4                 mov     cs:tabsize, 8
.text:0000000000003ABF                 jz      short loc_3AE7
.text:0000000000003AC1                 xor     r8d, r8d
.text:0000000000003AC4                 xor     edx, edx
.text:0000000000003AC6                 xor     esi, esi
.text:0000000000003AC8                 mov     rcx, r12
.text:0000000000003ACB                 mov     rdi, rax        ; nptr
.text:0000000000003ACE                 call    xstrtoul
.text:0000000000003AD3                 test    eax, eax
.text:0000000000003AD5                 jnz     loc_4C0D
.text:0000000000003ADB                 mov     rax, qword ptr [rsp+88h+longind]
.text:0000000000003AE0                 mov     cs:tabsize, rax
.text:0000000000003AE7
.text:0000000000003AE7 loc_3AE7:                               ; CODE XREF: main+21F↑j
.text:0000000000003AE7                                         ; main+139C↓j
.text:0000000000003AE7                 lea     r13, jpt_3B4C
.text:0000000000003AEE                 mov     byte ptr [rsp+88h+var_78], 0
.text:0000000000003AF3                 mov     byte ptr [rsp+88h+name], 0
.text:0000000000003AF8                 xor     r14d, r14d
.text:0000000000003AFB                 mov     r15d, 1
.text:0000000000003B01                 nop     dword ptr [rax+00000000h]
.text:0000000000003B08
.text:0000000000003B08 loc_3B08:                               ; CODE XREF: main+2BF↓j
.text:0000000000003B08                                         ; main+2C6↓j ...
.text:0000000000003B08                 lea     rcx, long_options ; longopts
.text:0000000000003B0F                 lea     rdx, shortopts  ; "abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:"...
.text:0000000000003B16                 mov     r8, r12         ; longind
.text:0000000000003B19                 mov     rsi, rbx        ; argv
.text:0000000000003B1C                 mov     edi, ebp        ; argc
.text:0000000000003B1E                 mov     [rsp+88h+longind], 0FFFFFFFFh
.text:0000000000003B26                 call    _getopt_long
.text:0000000000003B2B                 cmp     eax, 0FFFFFFFFh
.text:0000000000003B2E                 jz      loc_42BB
.text:0000000000003B34                 add     eax, 83h        ; switch 276 cases
.text:0000000000003B39                 cmp     eax, 113h
.text:0000000000003B3E                 ja      def_3B4C        ; jumptable 0000000000003B4C default case, cases -129-48,50-64,69,74,75,77,79,80,86,87,89,91-96,101,106,121-127
.text:0000000000003B44                 movsxd  rax, ds:(jpt_3B4C - 16178h)[r13+rax*4]
.text:0000000000003B49                 add     rax, r13
.text:0000000000003B4C                 jmp     rax             ; switch jump
.text:0000000000003B4E ; ---------------------------------------------------------------------------
.text:0000000000003B4E
.text:0000000000003B4E loc_3B4E:                               ; CODE XREF: main+2AC↑j
.text:0000000000003B4E                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003B4E                 mov     cs:numeric_ids, r15b ; jumptable 0000000000003B4C case 110
.text:0000000000003B55
.text:0000000000003B55 loc_3B55:                               ; CODE XREF: main+2AC↑j
.text:0000000000003B55                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003B55                 mov     cs:format, 0    ; jumptable 0000000000003B4C case 108
.text:0000000000003B5F                 jmp     short loc_3B08
.text:0000000000003B61 ; ---------------------------------------------------------------------------
.text:0000000000003B61
.text:0000000000003B61 loc_3B61:                               ; CODE XREF: main+2AC↑j
.text:0000000000003B61                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003B61                 mov     byte ptr [rsp+88h+var_78], 1 ; jumptable 0000000000003B4C case 107
.text:0000000000003B66                 jmp     short loc_3B08
.text:0000000000003B68 ; ---------------------------------------------------------------------------
.text:0000000000003B68
.text:0000000000003B68 loc_3B68:                               ; CODE XREF: main+2AC↑j
.text:0000000000003B68                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003B68                 mov     cs:print_inode, r15b ; jumptable 0000000000003B4C case 105
.text:0000000000003B6F                 jmp     short loc_3B08
.text:0000000000003B71 ; ---------------------------------------------------------------------------
.text:0000000000003B71
.text:0000000000003B71 loc_3B71:                               ; CODE XREF: main+2AC↑j
.text:0000000000003B71                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003B71                 mov     cs:human_output_opts, 0B0h ; jumptable 0000000000003B4C case 104
.text:0000000000003B7B                 mov     cs:file_human_output_opts, 0B0h
.text:0000000000003B85                 mov     cs:output_block_size, 1
.text:0000000000003B90                 mov     cs:file_output_block_size, 1
.text:0000000000003B9B                 jmp     loc_3B08
.text:0000000000003BA0 ; ---------------------------------------------------------------------------
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: main+2AC↑j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003BA0                 mov     cs:format, 0    ; jumptable 0000000000003B4C case 103
.text:0000000000003BAA                 mov     cs:print_owner, 0
.text:0000000000003BB1                 jmp     loc_3B08
.text:0000000000003BB6 ; ---------------------------------------------------------------------------
.text:0000000000003BB6
.text:0000000000003BB6 loc_3BB6:                               ; CODE XREF: main+2AC↑j
.text:0000000000003BB6                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003BB6                 cmp     cs:format, 0    ; jumptable 0000000000003B4C case 102
.text:0000000000003BBD                 mov     cs:ignore_mode, 2
.text:0000000000003BC7                 mov     cs:sort_type, 0FFFFFFFFh
.text:0000000000003BD1                 jz      loc_4CFB
.text:0000000000003BD7
.text:0000000000003BD7 loc_3BD7:                               ; CODE XREF: main+1473↓j
.text:0000000000003BD7                 mov     cs:print_block_size, 0
.text:0000000000003BDE                 mov     cs:print_with_color, 0
.text:0000000000003BE5                 mov     cs:print_hyperlink, 0
.text:0000000000003BEC                 mov     byte ptr [rsp+88h+name], 1
.text:0000000000003BF1                 jmp     loc_3B08
.text:0000000000003BF6 ; ---------------------------------------------------------------------------
.text:0000000000003BF6
.text:0000000000003BF6 loc_3BF6:                               ; CODE XREF: main+2AC↑j
.text:0000000000003BF6                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003BF6                 mov     cs:immediate_dirs, r15b ; jumptable 0000000000003B4C case 100
.text:0000000000003BFD                 jmp     loc_3B08
.text:0000000000003C02 ; ---------------------------------------------------------------------------
.text:0000000000003C02
.text:0000000000003C02 loc_3C02:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C02                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C02                 mov     cs:time_type, 1 ; jumptable 0000000000003B4C case 99
.text:0000000000003C0C                 jmp     loc_3B08
.text:0000000000003C11 ; ---------------------------------------------------------------------------
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C11                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C11                 mov     esi, 7          ; jumptable 0000000000003B4C case 98
.text:0000000000003C16                 xor     edi, edi
.text:0000000000003C18                 call    set_quoting_style
.text:0000000000003C1D                 jmp     loc_3B08
.text:0000000000003C22 ; ---------------------------------------------------------------------------
.text:0000000000003C22
.text:0000000000003C22 loc_3C22:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C22                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C22                 mov     cs:ignore_mode, 2 ; jumptable 0000000000003B4C case 97
.text:0000000000003C2C                 jmp     loc_3B08
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C31
.text:0000000000003C31 loc_3C31:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C31                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C31                 mov     cs:print_scontext, r15b ; jumptable 0000000000003B4C case 90
.text:0000000000003C38                 jmp     loc_3B08
.text:0000000000003C3D ; ---------------------------------------------------------------------------
.text:0000000000003C3D
.text:0000000000003C3D loc_3C3D:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C3D                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C3D                 mov     cs:sort_type, 1 ; jumptable 0000000000003B4C case 88
.text:0000000000003C47                 mov     byte ptr [rsp+88h+name], 1
.text:0000000000003C4C                 jmp     loc_3B08
.text:0000000000003C51 ; ---------------------------------------------------------------------------
.text:0000000000003C51
.text:0000000000003C51 loc_3C51:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C51                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C51                 mov     cs:sort_type, 0FFFFFFFFh ; jumptable 0000000000003B4C case 85
.text:0000000000003C5B                 mov     byte ptr [rsp+88h+name], 1
.text:0000000000003C60                 jmp     loc_3B08
.text:0000000000003C65 ; ---------------------------------------------------------------------------
.text:0000000000003C65
.text:0000000000003C65 loc_3C65:                               ; CODE XREF: main+2AC↑j
.text:0000000000003C65                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003C65                 lea     rsi, msgid      ; jumptable 0000000000003B4C case 84
.text:0000000000003C6C                 mov     edx, 5          ; category
.text:0000000000003C71                 xor     edi, edi        ; domainname
.text:0000000000003C73                 call    _dcgettext
.text:0000000000003C78                 sub     rsp, 8
.text:0000000000003C7C                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003C83                 lea     r8, a8+6        ; ""
.text:0000000000003C8A                 push    2
.text:0000000000003C8C                 xor     edx, edx
.text:0000000000003C8E                 mov     r9, rax
.text:0000000000003C91                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C95                 xor     esi, esi
.text:0000000000003C97                 call    xnumtoumax
.text:0000000000003C9C                 mov     cs:tabsize, rax
.text:0000000000003CA3                 pop     rax
.text:0000000000003CA4                 pop     rdx
.text:0000000000003CA5                 jmp     loc_3B08
.text:0000000000003CAA ; ---------------------------------------------------------------------------
.text:0000000000003CAA
.text:0000000000003CAA loc_3CAA:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CAA                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CAA                 mov     cs:sort_type, 2 ; jumptable 0000000000003B4C case 83
.text:0000000000003CB4                 mov     byte ptr [rsp+88h+name], 1
.text:0000000000003CB9                 jmp     loc_3B08
.text:0000000000003CBE ; ---------------------------------------------------------------------------
.text:0000000000003CBE
.text:0000000000003CBE loc_3CBE:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CBE                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CBE                 mov     cs:recursive, r15b ; jumptable 0000000000003B4C case 82
.text:0000000000003CC5                 jmp     loc_3B08
.text:0000000000003CCA ; ---------------------------------------------------------------------------
.text:0000000000003CCA
.text:0000000000003CCA loc_3CCA:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CCA                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CCA                 mov     esi, 5          ; jumptable 0000000000003B4C case 81
.text:0000000000003CCF                 xor     edi, edi
.text:0000000000003CD1                 call    set_quoting_style
.text:0000000000003CD6                 jmp     loc_3B08
.text:0000000000003CDB ; ---------------------------------------------------------------------------
.text:0000000000003CDB
.text:0000000000003CDB loc_3CDB:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CDB                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CDB                 xor     esi, esi        ; jumptable 0000000000003B4C case 78
.text:0000000000003CDD                 xor     edi, edi
.text:0000000000003CDF                 call    set_quoting_style
.text:0000000000003CE4                 jmp     loc_3B08
.text:0000000000003CE9 ; ---------------------------------------------------------------------------
.text:0000000000003CE9
.text:0000000000003CE9 loc_3CE9:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CE9                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CE9                 mov     cs:dereference, 5 ; jumptable 0000000000003B4C case 76
.text:0000000000003CF3                 jmp     loc_3B08
.text:0000000000003CF8 ; ---------------------------------------------------------------------------
.text:0000000000003CF8
.text:0000000000003CF8 loc_3CF8:                               ; CODE XREF: main+2AC↑j
.text:0000000000003CF8                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003CF8                 mov     rdx, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 73
.text:0000000000003CFF                 mov     edi, 10h
.text:0000000000003D04                 mov     [rsp+88h+var_70], rdx
.text:0000000000003D09                 call    xmalloc
.text:0000000000003D0E                 mov     rdx, [rsp+88h+var_70]
.text:0000000000003D13                 mov     [rax], rdx
.text:0000000000003D16                 mov     rdx, cs:ignore_patterns
.text:0000000000003D1D                 mov     [rax+8], rdx
.text:0000000000003D21                 mov     cs:ignore_patterns, rax
.text:0000000000003D28                 jmp     loc_3B08
.text:0000000000003D2D ; ---------------------------------------------------------------------------
.text:0000000000003D2D
.text:0000000000003D2D loc_3D2D:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D2D                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D2D                 mov     cs:dereference, 3 ; jumptable 0000000000003B4C case 72
.text:0000000000003D37                 jmp     loc_3B08
.text:0000000000003D3C ; ---------------------------------------------------------------------------
.text:0000000000003D3C
.text:0000000000003D3C loc_3D3C:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D3C                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D3C                 mov     cs:print_group, 0 ; jumptable 0000000000003B4C case 71
.text:0000000000003D43                 jmp     loc_3B08
.text:0000000000003D48 ; ---------------------------------------------------------------------------
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D48                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D48                 mov     cs:indicator_style, 3 ; jumptable 0000000000003B4C case 70
.text:0000000000003D52                 jmp     loc_3B08
.text:0000000000003D57 ; ---------------------------------------------------------------------------
.text:0000000000003D57
.text:0000000000003D57 loc_3D57:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D57                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D57                 mov     cs:dired, r15b  ; jumptable 0000000000003B4C case 68
.text:0000000000003D5E                 jmp     loc_3B08
.text:0000000000003D63 ; ---------------------------------------------------------------------------
.text:0000000000003D63
.text:0000000000003D63 loc_3D63:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D63                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D63                 mov     cs:format, 2    ; jumptable 0000000000003B4C case 67
.text:0000000000003D6D                 jmp     loc_3B08
.text:0000000000003D72 ; ---------------------------------------------------------------------------
.text:0000000000003D72
.text:0000000000003D72 loc_3D72:                               ; CODE XREF: main+2AC↑j
.text:0000000000003D72                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003D72                 mov     edi, 10h        ; jumptable 0000000000003B4C case 66
.text:0000000000003D77                 call    xmalloc
.text:0000000000003D7C                 mov     rdx, cs:ignore_patterns
.text:0000000000003D83                 lea     rsi, asc_17A5F+1 ; "*~"
.text:0000000000003D8A                 mov     edi, 10h
.text:0000000000003D8F                 mov     cs:ignore_patterns, rax
.text:0000000000003D96                 mov     [rax], rsi
.text:0000000000003D99                 mov     [rax+8], rdx
.text:0000000000003D9D                 call    xmalloc
.text:0000000000003DA2                 mov     rdx, cs:ignore_patterns
.text:0000000000003DA9                 lea     rsi, asc_17A5F  ; ".*~"
.text:0000000000003DB0                 mov     [rax], rsi
.text:0000000000003DB3                 mov     [rax+8], rdx
.text:0000000000003DB7                 mov     cs:ignore_patterns, rax
.text:0000000000003DBE                 jmp     loc_3B08
.text:0000000000003DC3 ; ---------------------------------------------------------------------------
.text:0000000000003DC3
.text:0000000000003DC3 loc_3DC3:                               ; CODE XREF: main+2AC↑j
.text:0000000000003DC3                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003DC3                 mov     cs:ignore_mode, 1 ; jumptable 0000000000003B4C case 65
.text:0000000000003DCD                 jmp     loc_3B08
.text:0000000000003DD2 ; ---------------------------------------------------------------------------
.text:0000000000003DD2
.text:0000000000003DD2 loc_3DD2:                               ; CODE XREF: main+2AC↑j
.text:0000000000003DD2                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003DD2                 cmp     cs:format, 0    ; jumptable 0000000000003B4C case 49
.text:0000000000003DD9                 jz      loc_3B08
.text:0000000000003DDF                 mov     cs:format, 1
.text:0000000000003DE9                 jmp     loc_3B08
.text:0000000000003DEE ; ---------------------------------------------------------------------------
.text:0000000000003DEE
.text:0000000000003DEE loc_3DEE:                               ; CODE XREF: main+2AC↑j
.text:0000000000003DEE                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003DEE                 mov     eax, cs:ls_mode ; jumptable 0000000000003B4C case -131
.text:0000000000003DF4                 mov     rcx, cs:Version
.text:0000000000003DFB                 lea     rsi, domainname+7 ; "ls"
.text:0000000000003E02                 cmp     eax, 1
.text:0000000000003E05                 jz      short loc_3E1C
.text:0000000000003E07                 cmp     eax, 2
.text:0000000000003E0A                 lea     rsi, aVdir      ; "vdir"
.text:0000000000003E11                 lea     rax, aVdir+1    ; "dir"
.text:0000000000003E18                 cmovz   rsi, rax
.text:0000000000003E1C
.text:0000000000003E1C loc_3E1C:                               ; CODE XREF: main+565↑j
.text:0000000000003E1C                 sub     rsp, 8
.text:0000000000003E20                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000003E27                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000003E2E                 push    0
.text:0000000000003E30                 lea     r8, aRichardMStallm ; "Richard M. Stallman"
.text:0000000000003E37                 lea     rdx, unk_179D6
.text:0000000000003E3E                 xor     eax, eax
.text:0000000000003E40                 call    version_etc
.text:0000000000003E45                 xor     edi, edi        ; status
.text:0000000000003E47                 call    _exit
.text:0000000000003E4C ; ---------------------------------------------------------------------------
.text:0000000000003E4C
.text:0000000000003E4C loc_3E4C:                               ; CODE XREF: main+2AC↑j
.text:0000000000003E4C                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003E4C                 mov     r14, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 144
.text:0000000000003E53                 jmp     loc_3B08
.text:0000000000003E58 ; ---------------------------------------------------------------------------
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: main+2AC↑j
.text:0000000000003E58                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003E58                 mov     r9, cs:argmatch_die ; jumptable 0000000000003B4C case 143
.text:0000000000003E5F                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003E66                 lea     rdx, time_args
.text:0000000000003E6D                 lea     rcx, time_types
.text:0000000000003E74                 lea     rdi, aTime      ; "--time"
.text:0000000000003E7B                 mov     r8d, 4
.text:0000000000003E81                 call    __xargmatch_internal
.text:0000000000003E86                 lea     rdx, time_types
.text:0000000000003E8D                 mov     eax, [rdx+rax*4]
.text:0000000000003E90                 mov     cs:time_type, eax
.text:0000000000003E96                 jmp     loc_3B08
.text:0000000000003E9B ; ---------------------------------------------------------------------------
.text:0000000000003E9B
.text:0000000000003E9B loc_3E9B:                               ; CODE XREF: main+2AC↑j
.text:0000000000003E9B                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003E9B                 mov     r9, cs:argmatch_die ; jumptable 0000000000003B4C case 142
.text:0000000000003EA2                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003EA9                 lea     rdx, sort_args
.text:0000000000003EB0                 lea     rcx, sort_types
.text:0000000000003EB7                 lea     rdi, aSort      ; "--sort"
.text:0000000000003EBE                 mov     r8d, 4
.text:0000000000003EC4                 call    __xargmatch_internal
.text:0000000000003EC9                 lea     rdx, sort_types
.text:0000000000003ED0                 mov     byte ptr [rsp+88h+name], 1
.text:0000000000003ED5                 mov     eax, [rdx+rax*4]
.text:0000000000003ED8                 mov     cs:sort_type, eax
.text:0000000000003EDE                 jmp     loc_3B08
.text:0000000000003EE3 ; ---------------------------------------------------------------------------
.text:0000000000003EE3
.text:0000000000003EE3 loc_3EE3:                               ; CODE XREF: main+2AC↑j
.text:0000000000003EE3                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003EE3                 mov     cs:human_output_opts, 90h ; jumptable 0000000000003B4C case 141
.text:0000000000003EED                 mov     cs:file_human_output_opts, 90h
.text:0000000000003EF7                 mov     cs:output_block_size, 1
.text:0000000000003F02                 mov     cs:file_output_block_size, 1
.text:0000000000003F0D                 jmp     loc_3B08
.text:0000000000003F12 ; ---------------------------------------------------------------------------
.text:0000000000003F12
.text:0000000000003F12 loc_3F12:                               ; CODE XREF: main+2AC↑j
.text:0000000000003F12                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003F12                 mov     cs:qmark_funny_chars, 0 ; jumptable 0000000000003B4C case 140
.text:0000000000003F19                 jmp     loc_3B08
.text:0000000000003F1E ; ---------------------------------------------------------------------------
.text:0000000000003F1E
.text:0000000000003F1E loc_3F1E:                               ; CODE XREF: main+2AC↑j
.text:0000000000003F1E                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003F1E                 mov     r9, cs:argmatch_die ; jumptable 0000000000003B4C case 139
.text:0000000000003F25                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003F2C                 lea     rcx, quoting_style_vals
.text:0000000000003F33                 lea     rdx, quoting_style_args
.text:0000000000003F3A                 lea     rdi, aQuotingStyle_0 ; "--quoting-style"
.text:0000000000003F41                 mov     r8d, 4
.text:0000000000003F47                 call    __xargmatch_internal
.text:0000000000003F4C                 lea     rdx, quoting_style_vals
.text:0000000000003F53                 xor     edi, edi
.text:0000000000003F55                 mov     esi, [rdx+rax*4]
.text:0000000000003F58                 call    set_quoting_style
.text:0000000000003F5D                 jmp     loc_3B08
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F62
.text:0000000000003F62 loc_3F62:                               ; CODE XREF: main+2AC↑j
.text:0000000000003F62                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003F62                 mov     r9, cs:argmatch_die ; jumptable 0000000000003B4C case 138
.text:0000000000003F69                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000003F70                 lea     rdx, indicator_style_args
.text:0000000000003F77                 lea     rcx, indicator_style_types
.text:0000000000003F7E                 lea     rdi, aIndicatorStyle ; "--indicator-style"
.text:0000000000003F85                 mov     r8d, 4
.text:0000000000003F8B                 call    __xargmatch_internal
.text:0000000000003F90                 lea     rdx, indicator_style_types
.text:0000000000003F97                 mov     eax, [rdx+rax*4]
.text:0000000000003F9A                 mov     cs:indicator_style, eax
.text:0000000000003FA0                 jmp     loc_3B08
.text:0000000000003FA5 ; ---------------------------------------------------------------------------
.text:0000000000003FA5
.text:0000000000003FA5 loc_3FA5:                               ; CODE XREF: main+2AC↑j
.text:0000000000003FA5                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000003FA5                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 137
.text:0000000000003FAC                 test    rsi, rsi
.text:0000000000003FAF                 jz      loc_42A4
.text:0000000000003FB5                 mov     r9, cs:argmatch_die
.text:0000000000003FBC                 lea     rdx, when_args
.text:0000000000003FC3                 lea     rcx, when_types
.text:0000000000003FCA                 lea     rdi, aHyperlink ; "--hyperlink"
.text:0000000000003FD1                 mov     r8d, 4
.text:0000000000003FD7                 call    __xargmatch_internal
.text:0000000000003FDC                 lea     rdx, when_types
.text:0000000000003FE3                 mov     edx, [rdx+rax*4]
.text:0000000000003FE6                 cmp     edx, 1
.text:0000000000003FE9                 jz      loc_42A4
.text:0000000000003FEF                 xor     eax, eax
.text:0000000000003FF1                 cmp     edx, 2
.text:0000000000003FF4                 jnz     loc_42A9
.text:0000000000003FFA                 mov     edi, 1          ; fd
.text:0000000000003FFF                 call    _isatty
.text:0000000000004004                 test    eax, eax
.text:0000000000004006                 setnz   al
.text:0000000000004009                 movzx   eax, al
.text:000000000000400C                 jmp     loc_42A9
.text:0000000000004011 ; ---------------------------------------------------------------------------
.text:0000000000004011
.text:0000000000004011 loc_4011:                               ; CODE XREF: main+2AC↑j
.text:0000000000004011                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000004011                 mov     edi, 10h        ; jumptable 0000000000003B4C case 136
.text:0000000000004016                 call    xmalloc
.text:000000000000401B                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:0000000000004022                 mov     [rax], rdx
.text:0000000000004025                 mov     rdx, cs:hide_patterns
.text:000000000000402C                 mov     cs:hide_patterns, rax
.text:0000000000004033                 mov     [rax+8], rdx
.text:0000000000004037                 jmp     loc_3B08
.text:000000000000403C ; ---------------------------------------------------------------------------
.text:000000000000403C
.text:000000000000403C loc_403C:                               ; CODE XREF: main+2AC↑j
.text:000000000000403C                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000403C                 mov     cs:directories_first, r15b ; jumptable 0000000000003B4C case 135
.text:0000000000004043                 jmp     loc_3B08
.text:0000000000004048 ; ---------------------------------------------------------------------------
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: main+2AC↑j
.text:0000000000004048                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000004048                 mov     cs:format, 0    ; jumptable 0000000000003B4C case 134
.text:0000000000004052                 lea     r14, aFullIso   ; "full-iso"
.text:0000000000004059                 jmp     loc_3B08
.text:000000000000405E ; ---------------------------------------------------------------------------
.text:000000000000405E
.text:000000000000405E loc_405E:                               ; CODE XREF: main+2AC↑j
.text:000000000000405E                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000405E                 mov     r9, cs:argmatch_die ; jumptable 0000000000003B4C case 133
.text:0000000000004065                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:000000000000406C                 lea     rdx, format_args
.text:0000000000004073                 lea     rcx, format_types
.text:000000000000407A                 lea     rdi, aFormat    ; "--format"
.text:0000000000004081                 mov     r8d, 4
.text:0000000000004087                 call    __xargmatch_internal
.text:000000000000408C                 lea     rdx, format_types
.text:0000000000004093                 mov     eax, [rdx+rax*4]
.text:0000000000004096                 mov     cs:format, eax
.text:000000000000409C                 jmp     loc_3B08
.text:00000000000040A1 ; ---------------------------------------------------------------------------
.text:00000000000040A1
.text:00000000000040A1 loc_40A1:                               ; CODE XREF: main+2AC↑j
.text:00000000000040A1                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000040A1                 mov     cs:indicator_style, 2 ; jumptable 0000000000003B4C case 132
.text:00000000000040AB                 jmp     loc_3B08
.text:00000000000040B0 ; ---------------------------------------------------------------------------
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: main+2AC↑j
.text:00000000000040B0                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000040B0                 mov     cs:dereference, 4 ; jumptable 0000000000003B4C case 131
.text:00000000000040BA                 jmp     loc_3B08
.text:00000000000040BF ; ---------------------------------------------------------------------------
.text:00000000000040BF
.text:00000000000040BF loc_40BF:                               ; CODE XREF: main+2AC↑j
.text:00000000000040BF                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000040BF                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 130
.text:00000000000040C6                 test    rsi, rsi
.text:00000000000040C9                 jz      loc_428D
.text:00000000000040CF                 mov     r9, cs:argmatch_die
.text:00000000000040D6                 lea     rdx, when_args
.text:00000000000040DD                 lea     rcx, when_types
.text:00000000000040E4                 lea     rdi, aColor     ; "--color"
.text:00000000000040EB                 mov     r8d, 4
.text:00000000000040F1                 call    __xargmatch_internal
.text:00000000000040F6                 lea     rdx, when_types
.text:00000000000040FD                 mov     eax, [rdx+rax*4]
.text:0000000000004100                 cmp     eax, 1
.text:0000000000004103                 jz      loc_428D
.text:0000000000004109                 cmp     eax, 2
.text:000000000000410C                 jz      loc_427B
.text:0000000000004112
.text:0000000000004112 loc_4112:                               ; CODE XREF: main+9E7↓j
.text:0000000000004112                 mov     cs:print_with_color, 0
.text:0000000000004119                 jmp     loc_3B08
.text:000000000000411E ; ---------------------------------------------------------------------------
.text:000000000000411E
.text:000000000000411E loc_411E:                               ; CODE XREF: main+2AC↑j
.text:000000000000411E                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000411E                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 129
.text:0000000000004125                 lea     rdx, output_block_size
.text:000000000000412C                 lea     rsi, human_output_opts
.text:0000000000004133                 call    human_options
.text:0000000000004138                 test    eax, eax
.text:000000000000413A                 jnz     loc_5244
.text:0000000000004140                 mov     eax, cs:human_output_opts
.text:0000000000004146                 mov     cs:file_human_output_opts, eax
.text:000000000000414C                 mov     rax, cs:output_block_size
.text:0000000000004153                 mov     cs:file_output_block_size, rax
.text:000000000000415A                 jmp     loc_3B08
.text:000000000000415F ; ---------------------------------------------------------------------------
.text:000000000000415F
.text:000000000000415F loc_415F:                               ; CODE XREF: main+2AC↑j
.text:000000000000415F                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000415F                 mov     cs:sort_type, 4 ; jumptable 0000000000003B4C case 116
.text:0000000000004169                 mov     byte ptr [rsp+88h+name], 1
.text:000000000000416E                 jmp     loc_3B08
.text:0000000000004173 ; ---------------------------------------------------------------------------
.text:0000000000004173
.text:0000000000004173 loc_4173:                               ; CODE XREF: main+2AC↑j
.text:0000000000004173                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000004173                 mov     cs:print_block_size, r15b ; jumptable 0000000000003B4C case 115
.text:000000000000417A                 jmp     loc_3B08
.text:000000000000417F ; ---------------------------------------------------------------------------
.text:000000000000417F
.text:000000000000417F loc_417F:                               ; CODE XREF: main+2AC↑j
.text:000000000000417F                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000417F                 mov     cs:sort_reverse, r15b ; jumptable 0000000000003B4C case 114
.text:0000000000004186                 jmp     loc_3B08
.text:000000000000418B ; ---------------------------------------------------------------------------
.text:000000000000418B
.text:000000000000418B loc_418B:                               ; CODE XREF: main+2AC↑j
.text:000000000000418B                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000418B                 mov     cs:qmark_funny_chars, r15b ; jumptable 0000000000003B4C case 113
.text:0000000000004192                 jmp     loc_3B08
.text:0000000000004197 ; ---------------------------------------------------------------------------
.text:0000000000004197
.text:0000000000004197 loc_4197:                               ; CODE XREF: main+2AC↑j
.text:0000000000004197                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:0000000000004197                 mov     cs:indicator_style, 1 ; jumptable 0000000000003B4C case 112
.text:00000000000041A1                 jmp     loc_3B08
.text:00000000000041A6 ; ---------------------------------------------------------------------------
.text:00000000000041A6
.text:00000000000041A6 loc_41A6:                               ; CODE XREF: main+2AC↑j
.text:00000000000041A6                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000041A6                 mov     cs:format, 0    ; jumptable 0000000000003B4C case 111
.text:00000000000041B0                 mov     cs:print_group, 0
.text:00000000000041B7                 jmp     loc_3B08
.text:00000000000041BC ; ---------------------------------------------------------------------------
.text:00000000000041BC
.text:00000000000041BC loc_41BC:                               ; CODE XREF: main+2AC↑j
.text:00000000000041BC                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000041BC                 mov     cs:format, 4    ; jumptable 0000000000003B4C case 109
.text:00000000000041C6                 jmp     loc_3B08
.text:00000000000041CB ; ---------------------------------------------------------------------------
.text:00000000000041CB
.text:00000000000041CB loc_41CB:                               ; CODE XREF: main+2AC↑j
.text:00000000000041CB                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000041CB                 mov     cs:format, 3    ; jumptable 0000000000003B4C case 120
.text:00000000000041D5                 jmp     loc_3B08
.text:00000000000041DA ; ---------------------------------------------------------------------------
.text:00000000000041DA
.text:00000000000041DA loc_41DA:                               ; CODE XREF: main+2AC↑j
.text:00000000000041DA                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:00000000000041DA                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 0000000000003B4C case 119
.text:00000000000041E1                 call    set_line_length
.text:00000000000041E6                 test    al, al
.text:00000000000041E8                 jnz     loc_3B08
.text:00000000000041EE                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000041F5                 call    quote
.text:00000000000041FA                 lea     rsi, aInvalidLineWid ; "invalid line width"
.text:0000000000004201                 mov     edx, 5          ; category
.text:0000000000004206                 xor     edi, edi        ; domainname
.text:0000000000004208                 mov     rbx, rax
.text:000000000000420B                 call    _dcgettext
.text:0000000000004210                 lea     rdx, aSS        ; "%s: %s"
.text:0000000000004217                 mov     rcx, rax
.text:000000000000421A                 mov     r8, rbx
.text:000000000000421D                 xor     esi, esi        ; errnum
.text:000000000000421F                 mov     edi, 2          ; status
.text:0000000000004224                 xor     eax, eax
.text:0000000000004226                 call    _error
.text:000000000000422B
.text:000000000000422B loc_422B:                               ; CODE XREF: main+2AC↑j
.text:000000000000422B                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000422B                 mov     cs:sort_type, 3 ; jumptable 0000000000003B4C case 118
.text:0000000000004235                 mov     byte ptr [rsp+88h+name], 1
.text:000000000000423A                 jmp     loc_3B08
.text:000000000000423F ; ---------------------------------------------------------------------------
.text:000000000000423F
.text:000000000000423F loc_423F:                               ; CODE XREF: main+2AC↑j
.text:000000000000423F                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000423F                 mov     cs:time_type, 2 ; jumptable 0000000000003B4C case 117
.text:0000000000004249                 jmp     loc_3B08
.text:000000000000424E ; ---------------------------------------------------------------------------
.text:000000000000424E
.text:000000000000424E loc_424E:                               ; CODE XREF: main+2AC↑j
.text:000000000000424E                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000424E                 mov     cs:print_author, r15b ; jumptable 0000000000003B4C case 128
.text:0000000000004255                 jmp     loc_3B08
.text:000000000000425A ; ---------------------------------------------------------------------------
.text:000000000000425A
.text:000000000000425A loc_425A:                               ; CODE XREF: main+C7↑j
.text:000000000000425A                 mov     edi, 1          ; fd
.text:000000000000425F                 call    _isatty
.text:0000000000004264                 test    eax, eax
.text:0000000000004266                 jnz     loc_4D2F
.text:000000000000426C                 mov     cs:format, 1
.text:0000000000004276                 jmp     loc_3988
.text:000000000000427B ; ---------------------------------------------------------------------------
.text:000000000000427B
.text:000000000000427B loc_427B:                               ; CODE XREF: main+86C↑j
.text:000000000000427B                 mov     edi, 1          ; fd
.text:0000000000004280                 call    _isatty
.text:0000000000004285                 test    eax, eax
.text:0000000000004287                 jz      loc_4112
.text:000000000000428D
.text:000000000000428D loc_428D:                               ; CODE XREF: main+829↑j
.text:000000000000428D                                         ; main+863↑j
.text:000000000000428D                 mov     cs:print_with_color, r15b
.text:0000000000004294                 mov     cs:tabsize, 0
.text:000000000000429F                 jmp     loc_3B08
.text:00000000000042A4 ; ---------------------------------------------------------------------------
.text:00000000000042A4
.text:00000000000042A4 loc_42A4:                               ; CODE XREF: main+70F↑j
.text:00000000000042A4                                         ; main+749↑j
.text:00000000000042A4                 mov     eax, 1
.text:00000000000042A9
.text:00000000000042A9 loc_42A9:                               ; CODE XREF: main+754↑j
.text:00000000000042A9                                         ; main+76C↑j
.text:00000000000042A9                 mov     cs:print_hyperlink, al
.text:00000000000042AF                 and     cs:print_hyperlink, 1
.text:00000000000042B6                 jmp     loc_3B08
.text:00000000000042BB ; ---------------------------------------------------------------------------
.text:00000000000042BB
.text:00000000000042BB loc_42BB:                               ; CODE XREF: main+28E↑j
.text:00000000000042BB                 cmp     cs:output_block_size, 0
.text:00000000000042C3                 jz      loc_48EB
.text:00000000000042C9
.text:00000000000042C9 loc_42C9:                               ; CODE XREF: main+1098↓j
.text:00000000000042C9                                         ; main+10B3↓j
.text:00000000000042C9                 mov     rax, cs:line_length
.text:00000000000042D0                 mov     ecx, 3
.text:00000000000042D5                 xor     edx, edx
.text:00000000000042D7                 div     rcx
.text:00000000000042DA                 test    rdx, rdx
.text:00000000000042DD                 setnz   dl
.text:00000000000042E0                 xor     edi, edi
.text:00000000000042E2                 movzx   edx, dl
.text:00000000000042E5                 add     rax, rdx
.text:00000000000042E8                 mov     cs:max_idx, rax
.text:00000000000042EF                 call    get_quoting_style
.text:00000000000042F4                 mov     edx, cs:format
.text:00000000000042FA                 mov     r13d, eax
.text:00000000000042FD                 cmp     edx, 4
.text:0000000000004300                 jz      loc_4746
.text:0000000000004306                 cmp     edx, 1
.text:0000000000004309                 jz      loc_4746
.text:000000000000430F                 cmp     cs:line_length, 0
.text:0000000000004317                 jnz     short loc_431F
.text:0000000000004319                 xor     eax, eax
.text:000000000000431B                 test    edx, edx
.text:000000000000431D                 jnz     short loc_4337
.text:000000000000431F
.text:000000000000431F loc_431F:                               ; CODE XREF: main+A77↑j
.text:000000000000431F                 mov     eax, r13d
.text:0000000000004322                 and     eax, 0FFFFFFFDh
.text:0000000000004325                 sub     eax, 1
.text:0000000000004328                 setz    al
.text:000000000000432B                 cmp     r13d, 6
.text:000000000000432F                 setz    dl
.text:0000000000004332                 or      eax, edx
.text:0000000000004334                 movzx   eax, al
.text:0000000000004337
.text:0000000000004337 loc_4337:                               ; CODE XREF: main+A7D↑j
.text:0000000000004337                                         ; main+EA8↓j
.text:0000000000004337                 xor     edi, edi
.text:0000000000004339                 mov     cs:align_variable_outer_quotes, al
.text:000000000000433F                 and     cs:align_variable_outer_quotes, 1
.text:0000000000004346                 call    clone_quoting_options
.text:000000000000434B                 cmp     r13d, 7
.text:000000000000434F                 mov     cs:filename_quoting_options, rax
.text:0000000000004356                 jz      loc_4D18
.text:000000000000435C
.text:000000000000435C loc_435C:                               ; CODE XREF: main+148A↓j
.text:000000000000435C                 mov     eax, cs:indicator_style
.text:0000000000004362                 cmp     eax, 1
.text:0000000000004365                 jbe     short loc_439F
.text:0000000000004367                 lea     rdx, asc_17AF3  ; "*=>@|"
.text:000000000000436E                 sub     eax, 2
.text:0000000000004371                 movsx   esi, byte ptr [rdx+rax]
.text:0000000000004375                 lea     r13, [rax+rdx]
.text:0000000000004379                 test    sil, sil
.text:000000000000437C                 jz      short loc_439F
.text:000000000000437E                 xchg    ax, ax
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: main+AFD↓j
.text:0000000000004380                 mov     rdi, cs:filename_quoting_options
.text:0000000000004387                 add     r13, 1
.text:000000000000438B                 mov     edx, 1
.text:0000000000004390                 call    set_char_quoting
.text:0000000000004395                 movsx   esi, byte ptr [r13+0]
.text:000000000000439A                 test    sil, sil
.text:000000000000439D                 jnz     short loc_4380
.text:000000000000439F
.text:000000000000439F loc_439F:                               ; CODE XREF: main+AC5↑j
.text:000000000000439F                                         ; main+ADC↑j
.text:000000000000439F                 xor     edi, edi
.text:00000000000043A1                 call    clone_quoting_options
.text:00000000000043A6                 mov     edx, 1
.text:00000000000043AB                 mov     esi, 3Ah ; ':'
.text:00000000000043B0                 mov     rdi, rax
.text:00000000000043B3                 mov     cs:dirname_quoting_options, rax
.text:00000000000043BA                 call    set_char_quoting
.text:00000000000043BF                 cmp     cs:dired, 0
.text:00000000000043C6                 jz      short loc_43DC
.text:00000000000043C8                 cmp     cs:format, 0
.text:00000000000043CF                 jz      loc_4890
.text:00000000000043D5
.text:00000000000043D5 loc_43D5:                               ; CODE XREF: main+FFD↓j
.text:00000000000043D5                 mov     cs:dired, 0
.text:00000000000043DC
.text:00000000000043DC loc_43DC:                               ; CODE XREF: main+B26↑j
.text:00000000000043DC                 mov     eax, cs:time_type
.text:00000000000043E2                 mov     edx, cs:format
.text:00000000000043E8                 sub     eax, 1
.text:00000000000043EB                 cmp     eax, 1
.text:00000000000043EE                 ja      short loc_43FB
.text:00000000000043F0                 cmp     byte ptr [rsp+88h+name], 0
.text:00000000000043F5                 jz      loc_4D51
.text:00000000000043FB
.text:00000000000043FB loc_43FB:                               ; CODE XREF: main+B4E↑j
.text:00000000000043FB                 test    edx, edx
.text:00000000000043FD                 jnz     short loc_4442
.text:00000000000043FF
.text:00000000000043FF loc_43FF:                               ; CODE XREF: main+FF7↓j
.text:00000000000043FF                                         ; main+14B3↓j
.text:00000000000043FF                 test    r14, r14
.text:0000000000004402                 jz      loc_4D85
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: main+14F7↓j
.text:0000000000004408                 lea     r13, posix_prefix_10077 ; "posix-"
.text:000000000000440F                 jmp     short loc_441C
.text:000000000000440F ; ---------------------------------------------------------------------------
.text:0000000000004411                 align 8
.text:0000000000004418
.text:0000000000004418 loc_4418:                               ; CODE XREF: main+BA0↓j
.text:0000000000004418                 add     r14, 6
.text:000000000000441C
.text:000000000000441C loc_441C:                               ; CODE XREF: main+B6F↑j
.text:000000000000441C                 mov     edx, 6          ; n
.text:0000000000004421                 mov     rsi, r13        ; s2
.text:0000000000004424                 mov     rdi, r14        ; s1
.text:0000000000004427                 call    _strncmp
.text:000000000000442C                 test    eax, eax
.text:000000000000442E                 jnz     loc_4C61
.text:0000000000004434                 mov     edi, 2
.text:0000000000004439                 call    hard_locale
.text:000000000000443E                 test    al, al
.text:0000000000004440                 jnz     short loc_4418
.text:0000000000004442
.text:0000000000004442 loc_4442:                               ; CODE XREF: main+B5D↑j
.text:0000000000004442                                         ; main+1456↓j ...
.text:0000000000004442                 cmp     cs:print_with_color, 0
.text:0000000000004449                 movsxd  r13, cs:optind@@GLIBC_2_2_5
.text:0000000000004450                 jnz     loc_4AD1
.text:0000000000004456                 cmp     cs:directories_first, 0
.text:000000000000445D                 jz      short loc_4466
.text:000000000000445F
.text:000000000000445F loc_445F:                               ; CODE XREF: main+1309↓j
.text:000000000000445F                                         ; main+1328↓j ...
.text:000000000000445F                 mov     cs:check_symlink_mode, 1
.text:0000000000004466
.text:0000000000004466 loc_4466:                               ; CODE XREF: main+BBD↑j
.text:0000000000004466                                         ; main+1316↓j ...
.text:0000000000004466                 cmp     cs:dereference, 1
.text:000000000000446D                 jz      loc_48BA
.text:0000000000004473
.text:0000000000004473 loc_4473:                               ; CODE XREF: main+1046↓j
.text:0000000000004473                 cmp     cs:recursive, 0
.text:000000000000447A                 jz      short loc_44CB
.text:000000000000447C                 lea     r8, dev_ino_free
.text:0000000000004483                 lea     rcx, dev_ino_compare
.text:000000000000448A                 lea     rdx, dev_ino_hash
.text:0000000000004491                 xor     esi, esi
.text:0000000000004493                 mov     edi, 1Eh
.text:0000000000004498                 call    hash_initialize
.text:000000000000449D                 test    rax, rax
.text:00000000000044A0                 mov     cs:active_dir_set, rax
.text:00000000000044A7                 jz      loc_5264
.text:00000000000044AD                 mov     r8, cs:free_ptr
.text:00000000000044B4                 mov     rcx, cs:malloc_ptr
.text:00000000000044BB                 lea     rdi, dev_ino_obstack
.text:00000000000044C2                 xor     edx, edx
.text:00000000000044C4                 xor     esi, esi
.text:00000000000044C6                 call    _obstack_begin
.text:00000000000044CB
.text:00000000000044CB loc_44CB:                               ; CODE XREF: main+BDA↑j
.text:00000000000044CB                 lea     rdi, aTz        ; "TZ"
.text:00000000000044D2                 call    _getenv
.text:00000000000044D7                 mov     rdi, rax        ; src
.text:00000000000044DA                 call    tzalloc
.text:00000000000044DF                 mov     cs:localtz, rax
.text:00000000000044E6                 mov     eax, cs:sort_type
.text:00000000000044EC                 sub     eax, 2
.text:00000000000044EF                 and     eax, 0FFFFFFFDh
.text:00000000000044F2                 jz      short loc_4501
.text:00000000000044F4                 cmp     cs:format, 0
.text:00000000000044FB                 jnz     loc_4837
.text:0000000000004501
.text:0000000000004501 loc_4501:                               ; CODE XREF: main+C52↑j
.text:0000000000004501                                         ; main+F9E↓j ...
.text:0000000000004501                 mov     cs:format_needs_stat, 1
.text:0000000000004508                 xor     eax, eax
.text:000000000000450A
.text:000000000000450A loc_450A:                               ; CODE XREF: main+FC4↓j
.text:000000000000450A                                         ; main+FD1↓j ...
.text:000000000000450A                 mov     cs:format_needs_type, al
.text:0000000000004510                 and     cs:format_needs_type, 1
.text:0000000000004517                 cmp     cs:dired, 0
.text:000000000000451E                 jnz     loc_49D4
.text:0000000000004524
.text:0000000000004524 loc_4524:                               ; CODE XREF: main+116E↓j
.text:0000000000004524                 cmp     cs:print_hyperlink, 0
.text:000000000000452B                 jnz     loc_4958
.text:0000000000004531
.text:0000000000004531 loc_4531:                               ; CODE XREF: main+112F↓j
.text:0000000000004531                 mov     r14d, ebp
.text:0000000000004534                 mov     edi, 4E20h
.text:0000000000004539                 mov     cs:cwd_n_alloc, 64h ; 'd'
.text:0000000000004544                 sub     r14d, r13d
.text:0000000000004547                 lea     r15, a8+6       ; ""
.text:000000000000454E                 call    xmalloc
.text:0000000000004553                 mov     cs:cwd_n_used, 0
.text:000000000000455E                 mov     cs:cwd_file, rax
.text:0000000000004565                 call    clear_files
.text:000000000000456A                 test    r14d, r14d
.text:000000000000456D                 jle     loc_4791
.text:0000000000004573                 nop     dword ptr [rax+rax+00h]
.text:0000000000004578
.text:0000000000004578 loc_4578:                               ; CODE XREF: main+CF2↓j
.text:0000000000004578                 mov     rdi, [rbx+r13*8]
.text:000000000000457C                 xor     esi, esi
.text:000000000000457E                 mov     rcx, r15
.text:0000000000004581                 mov     edx, 1
.text:0000000000004586                 add     r13, 1
.text:000000000000458A                 call    gobble_file_constprop_52
.text:000000000000458F                 cmp     ebp, r13d
.text:0000000000004592                 jg      short loc_4578
.text:0000000000004594
.text:0000000000004594 loc_4594:                               ; CODE XREF: main+F17↓j
.text:0000000000004594                                         ; main+1015↓j
.text:0000000000004594                 cmp     cs:cwd_n_used, 0
.text:000000000000459C                 jnz     loc_4A13
.text:00000000000045A2
.text:00000000000045A2 loc_45A2:                               ; CODE XREF: main+118D↓j
.text:00000000000045A2                 sub     r14d, 1
.text:00000000000045A6                 mov     rbx, cs:pending_dirs
.text:00000000000045AD                 jg      short loc_45EC
.text:00000000000045AF                 jmp     loc_4C41
.text:00000000000045AF ; ---------------------------------------------------------------------------
.text:00000000000045B4                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: main+D6D↓j
.text:00000000000045B8                                         ; main+D72↓j
.text:00000000000045B8                 movzx   edx, byte ptr [rbx+10h]
.text:00000000000045BC                 mov     rsi, [rbx+8]
.text:00000000000045C0                 call    print_dir
.text:00000000000045C5                 mov     rdi, [rbx]      ; ptr
.text:00000000000045C8                 call    free
.text:00000000000045CD                 mov     rdi, [rbx+8]    ; ptr
.text:00000000000045D1                 call    free
.text:00000000000045D6                 mov     rdi, rbx        ; ptr
.text:00000000000045D9                 call    free
.text:00000000000045DE                 mov     cs:print_dir_name, 1
.text:00000000000045E5
.text:00000000000045E5 loc_45E5:                               ; CODE XREF: main+DE1↓j
.text:00000000000045E5                 mov     rbx, cs:pending_dirs
.text:00000000000045EC
.text:00000000000045EC loc_45EC:                               ; CODE XREF: main+D0D↑j
.text:00000000000045EC                                         ; main+11D5↓j ...
.text:00000000000045EC                 test    rbx, rbx
.text:00000000000045EF                 jz      loc_4686
.text:00000000000045F5                 mov     rax, [rbx+18h]
.text:00000000000045F9                 mov     rdi, [rbx]      ; src
.text:00000000000045FC                 mov     cs:pending_dirs, rax
.text:0000000000004603                 mov     rax, cs:active_dir_set
.text:000000000000460A                 test    rax, rax
.text:000000000000460D                 jz      short loc_45B8
.text:000000000000460F                 test    rdi, rdi
.text:0000000000004612                 jnz     short loc_45B8
.text:0000000000004614                 mov     rdx, cs:qword_2210F8
.text:000000000000461B                 mov     rcx, rdx
.text:000000000000461E                 sub     rcx, cs:qword_2210F0
.text:0000000000004625                 cmp     rcx, 0Fh
.text:0000000000004629                 jbe     loc_51E7
.text:000000000000462F                 lea     rcx, [rdx-10h]
.text:0000000000004633                 mov     rsi, r12
.text:0000000000004636                 mov     rdi, rax
.text:0000000000004639                 mov     cs:qword_2210F8, rcx
.text:0000000000004640                 mov     rcx, [rdx-10h]
.text:0000000000004644                 mov     rdx, [rdx-8]
.text:0000000000004648                 mov     qword ptr [rsp+88h+longind], rcx
.text:000000000000464D                 mov     [rsp+88h+var_50], rdx
.text:0000000000004652                 call    hash_delete
.text:0000000000004657                 test    rax, rax
.text:000000000000465A                 jz      loc_5206
.text:0000000000004660                 mov     rdi, rax        ; ptr
.text:0000000000004663                 call    free
.text:0000000000004668                 mov     rdi, [rbx]      ; ptr
.text:000000000000466B                 call    free
.text:0000000000004670                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000004674                 call    free
.text:0000000000004679                 mov     rdi, rbx        ; ptr
.text:000000000000467C                 call    free
.text:0000000000004681                 jmp     loc_45E5
.text:0000000000004686 ; ---------------------------------------------------------------------------
.text:0000000000004686
.text:0000000000004686 loc_4686:                               ; CODE XREF: main+D4F↑j
.text:0000000000004686                                         ; main+11A0↓j ...
.text:0000000000004686                 cmp     cs:print_with_color, 0
.text:000000000000468D                 jz      short loc_469C
.text:000000000000468F                 cmp     cs:used_color, 0
.text:0000000000004696                 jnz     loc_47BC
.text:000000000000469C
.text:000000000000469C loc_469C:                               ; CODE XREF: main+DED↑j
.text:000000000000469C                                         ; main+F87↓j ...
.text:000000000000469C                 cmp     cs:dired, 0
.text:00000000000046A3                 jnz     loc_4A7A
.text:00000000000046A9
.text:00000000000046A9 loc_46A9:                               ; CODE XREF: main+122C↓j
.text:00000000000046A9                 mov     rbx, cs:active_dir_set
.text:00000000000046B0                 test    rbx, rbx
.text:00000000000046B3                 jz      short loc_46CE
.text:00000000000046B5                 mov     rdi, rbx
.text:00000000000046B8                 call    hash_get_n_entries
.text:00000000000046BD                 test    rax, rax
.text:00000000000046C0                 jnz     loc_5225
.text:00000000000046C6                 mov     rdi, rbx        ; ptr
.text:00000000000046C9                 call    hash_free
.text:00000000000046CE
.text:00000000000046CE loc_46CE:                               ; CODE XREF: main+E13↑j
.text:00000000000046CE                 mov     rsi, [rsp+88h+var_40]
.text:00000000000046D3                 xor     rsi, fs:28h
.text:00000000000046DC                 mov     eax, cs:exit_status
.text:00000000000046E2                 jnz     loc_525F
.text:00000000000046E8                 add     rsp, 58h
.text:00000000000046EC                 pop     rbx
.text:00000000000046ED                 pop     rbp
.text:00000000000046EE                 pop     r12
.text:00000000000046F0                 pop     r13
.text:00000000000046F2                 pop     r14
.text:00000000000046F4                 pop     r15
.text:00000000000046F6                 retn
.text:00000000000046F7 ; ---------------------------------------------------------------------------
.text:00000000000046F7
.text:00000000000046F7 loc_46F7:                               ; CODE XREF: main+B9↑j
.text:00000000000046F7                 mov     esi, 7
.text:00000000000046FC                 xor     edi, edi
.text:00000000000046FE                 mov     cs:format, 2
.text:0000000000004708                 call    set_quoting_style
.text:000000000000470D                 jmp     loc_3988
.text:0000000000004712 ; ---------------------------------------------------------------------------
.text:0000000000004712
.text:0000000000004712 loc_4712:                               ; CODE XREF: main+192↑j
.text:0000000000004712                 mov     rdi, r12
.text:0000000000004715                 call    quote
.text:000000000000471A                 lea     rsi, aIgnoringInvali ; "ignoring invalid value of environment v"...
.text:0000000000004721                 mov     r12, rax
.text:0000000000004724                 xor     edi, edi        ; domainname
.text:0000000000004726                 mov     edx, 5          ; category
.text:000000000000472B                 call    _dcgettext
.text:0000000000004730                 mov     rcx, r12
.text:0000000000004733                 mov     rdx, rax        ; format
.text:0000000000004736                 xor     esi, esi        ; errnum
.text:0000000000004738                 xor     edi, edi        ; status
.text:000000000000473A                 xor     eax, eax
.text:000000000000473C                 call    _error
.text:0000000000004741                 jmp     loc_3A4B
.text:0000000000004746 ; ---------------------------------------------------------------------------
.text:0000000000004746
.text:0000000000004746 loc_4746:                               ; CODE XREF: main+A60↑j
.text:0000000000004746                                         ; main+A69↑j
.text:0000000000004746                 xor     eax, eax
.text:0000000000004748                 jmp     loc_4337
.text:000000000000474D ; ---------------------------------------------------------------------------
.text:000000000000474D
.text:000000000000474D loc_474D:                               ; CODE XREF: main+1CD↑j
.text:000000000000474D                 mov     rdi, rax
.text:0000000000004750                 call    set_line_length
.text:0000000000004755                 test    al, al
.text:0000000000004757                 jnz     loc_3A73
.text:000000000000475D                 mov     rdi, r12
.text:0000000000004760                 call    quote
.text:0000000000004765                 lea     rsi, aIgnoringInvali_0 ; "ignoring invalid width in environment v"...
.text:000000000000476C                 mov     r12, rax
.text:000000000000476F                 xor     edi, edi        ; domainname
.text:0000000000004771                 mov     edx, 5          ; category
.text:0000000000004776                 call    _dcgettext
.text:000000000000477B                 mov     rcx, r12
.text:000000000000477E                 mov     rdx, rax        ; format
.text:0000000000004781                 xor     esi, esi        ; errnum
.text:0000000000004783                 xor     edi, edi        ; status
.text:0000000000004785                 xor     eax, eax
.text:0000000000004787                 call    _error
.text:000000000000478C                 jmp     loc_3A73
.text:0000000000004791 ; ---------------------------------------------------------------------------
.text:0000000000004791
.text:0000000000004791 loc_4791:                               ; CODE XREF: main+CCD↑j
.text:0000000000004791                 cmp     cs:immediate_dirs, 0
.text:0000000000004798                 jz      loc_48A2
.text:000000000000479E                 lea     rdi, asc_19F9B+1 ; "."
.text:00000000000047A5                 mov     rcx, r15
.text:00000000000047A8                 mov     edx, 1
.text:00000000000047AD                 mov     esi, 3
.text:00000000000047B2                 call    gobble_file_constprop_52
.text:00000000000047B7                 jmp     loc_4594
.text:00000000000047BC ; ---------------------------------------------------------------------------
.text:00000000000047BC
.text:00000000000047BC loc_47BC:                               ; CODE XREF: main+DF6↑j
.text:00000000000047BC                 cmp     cs:color_indicator, 2
.text:00000000000047C4                 jnz     short loc_47D8
.text:00000000000047C6                 mov     rax, cs:off_220068 ; "\x1B["
.text:00000000000047CD                 cmp     word ptr [rax], 5B1Bh
.text:00000000000047D2                 jz      loc_4F73
.text:00000000000047D8
.text:00000000000047D8 loc_47D8:                               ; CODE XREF: main+F24↑j
.text:00000000000047D8                                         ; main+16DB↓j ...
.text:00000000000047D8                 lea     rdi, color_indicator
.text:00000000000047DF                 call    put_indicator
.text:00000000000047E4                 lea     rdi, qword_220070
.text:00000000000047EB                 call    put_indicator
.text:00000000000047F0
.text:00000000000047F0 loc_47F0:                               ; CODE XREF: main+16F1↓j
.text:00000000000047F0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000047F7                 call    _fflush_unlocked
.text:00000000000047FC                 xor     edi, edi
.text:00000000000047FE                 call    signal_setup
.text:0000000000004803                 mov     ebx, cs:stop_signal_count
.text:0000000000004809                 test    ebx, ebx
.text:000000000000480B                 jz      short loc_481F
.text:000000000000480D                 nop     dword ptr [rax]
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: main+F7D↓j
.text:0000000000004810                 mov     edi, 13h        ; sig
.text:0000000000004815                 call    _raise
.text:000000000000481A                 sub     ebx, 1
.text:000000000000481D                 jnz     short loc_4810
.text:000000000000481F
.text:000000000000481F loc_481F:                               ; CODE XREF: main+F6B↑j
.text:000000000000481F                 mov     edi, cs:interrupt_signal ; sig
.text:0000000000004825                 test    edi, edi
.text:0000000000004827                 jz      loc_469C
.text:000000000000482D                 call    _raise
.text:0000000000004832                 jmp     loc_469C
.text:0000000000004837 ; ---------------------------------------------------------------------------
.text:0000000000004837
.text:0000000000004837 loc_4837:                               ; CODE XREF: main+C5B↑j
.text:0000000000004837                 cmp     cs:print_scontext, 0
.text:000000000000483E                 jnz     loc_4501
.text:0000000000004844                 cmp     cs:print_block_size, 0
.text:000000000000484B                 jnz     loc_4501
.text:0000000000004851                 cmp     cs:recursive, 0
.text:0000000000004858                 mov     cs:format_needs_stat, 0
.text:000000000000485F                 mov     eax, 1
.text:0000000000004864                 jnz     loc_450A
.text:000000000000486A                 cmp     cs:print_with_color, 0
.text:0000000000004871                 jnz     loc_450A
.text:0000000000004877                 cmp     cs:indicator_style, 0
.text:000000000000487E                 jnz     loc_450A
.text:0000000000004884                 movzx   eax, cs:directories_first
.text:000000000000488B                 jmp     loc_450A
.text:0000000000004890 ; ---------------------------------------------------------------------------
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: main+B2F↑j
.text:0000000000004890                 cmp     cs:print_hyperlink, 0
.text:0000000000004897                 jz      loc_43FF
.text:000000000000489D                 jmp     loc_43D5
.text:00000000000048A2 ; ---------------------------------------------------------------------------
.text:00000000000048A2
.text:00000000000048A2 loc_48A2:                               ; CODE XREF: main+EF8↑j
.text:00000000000048A2                 lea     rdi, asc_19F9B+1 ; src
.text:00000000000048A9                 mov     edx, 1
.text:00000000000048AE                 xor     esi, esi        ; void *
.text:00000000000048B0                 call    queue_directory
.text:00000000000048B5                 jmp     loc_4594
.text:00000000000048BA ; ---------------------------------------------------------------------------
.text:00000000000048BA
.text:00000000000048BA loc_48BA:                               ; CODE XREF: main+BCD↑j
.text:00000000000048BA                 cmp     cs:immediate_dirs, 0
.text:00000000000048C1                 mov     eax, 2
.text:00000000000048C6                 jnz     short loc_48E0
.text:00000000000048C8                 cmp     cs:indicator_style, 3
.text:00000000000048CF                 jz      short loc_48E0
.text:00000000000048D1                 cmp     cs:format, 1
.text:00000000000048D8                 sbb     eax, eax
.text:00000000000048DA                 and     eax, 0FFFFFFFEh
.text:00000000000048DD                 add     eax, 4
.text:00000000000048E0
.text:00000000000048E0 loc_48E0:                               ; CODE XREF: main+1026↑j
.text:00000000000048E0                                         ; main+102F↑j
.text:00000000000048E0                 mov     cs:dereference, eax
.text:00000000000048E6                 jmp     loc_4473
.text:00000000000048EB ; ---------------------------------------------------------------------------
.text:00000000000048EB
.text:00000000000048EB loc_48EB:                               ; CODE XREF: main+A23↑j
.text:00000000000048EB                 lea     rdi, aLsBlockSize ; "LS_BLOCK_SIZE"
.text:00000000000048F2                 call    _getenv
.text:00000000000048F7                 lea     rdx, output_block_size
.text:00000000000048FE                 lea     rsi, human_output_opts
.text:0000000000004905                 mov     r13, rax
.text:0000000000004908                 mov     rdi, rax        ; nptr
.text:000000000000490B                 call    human_options
.text:0000000000004910                 test    r13, r13
.text:0000000000004913                 jz      loc_5135
.text:0000000000004919
.text:0000000000004919 loc_4919:                               ; CODE XREF: main+18A4↓j
.text:0000000000004919                 mov     eax, cs:human_output_opts
.text:000000000000491F                 mov     cs:file_human_output_opts, eax
.text:0000000000004925                 mov     rax, cs:output_block_size
.text:000000000000492C                 mov     cs:file_output_block_size, rax
.text:0000000000004933
.text:0000000000004933 loc_4933:                               ; CODE XREF: main+18AA↓j
.text:0000000000004933                 cmp     byte ptr [rsp+88h+var_78], 0
.text:0000000000004938                 jz      loc_42C9
.text:000000000000493E                 mov     cs:human_output_opts, 0
.text:0000000000004948                 mov     cs:output_block_size, 400h
.text:0000000000004953                 jmp     loc_42C9
.text:0000000000004958 ; ---------------------------------------------------------------------------
.text:0000000000004958
.text:0000000000004958 loc_4958:                               ; CODE XREF: main+C8B↑j
.text:0000000000004958                 lea     rdx, RFC3986
.text:000000000000495F                 xor     eax, eax
.text:0000000000004961                 jmp     short loc_4998
.text:0000000000004961 ; ---------------------------------------------------------------------------
.text:0000000000004963                 align 8
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: main+10FB↓j
.text:0000000000004968                 cmp     eax, 41h ; 'A'
.text:000000000000496B                 jge     short loc_49A5
.text:000000000000496D                 lea     ecx, [rax-30h]
.text:0000000000004970                 cmp     ecx, 9
.text:0000000000004973                 jbe     short loc_49A5
.text:0000000000004975
.text:0000000000004975 loc_4975:                               ; CODE XREF: main+1103↓j
.text:0000000000004975                 lea     ecx, [rax-2Dh]
.text:0000000000004978                 cmp     ecx, 1
.text:000000000000497B                 jbe     short loc_49A5
.text:000000000000497D                 cmp     eax, 7Eh ; '~'
.text:0000000000004980                 jz      short loc_49A5
.text:0000000000004982                 cmp     eax, 5Fh ; '_'
.text:0000000000004985                 setz    cl
.text:0000000000004988                 add     eax, 1
.text:000000000000498B                 or      [rdx], cl
.text:000000000000498D                 add     rdx, 1
.text:0000000000004991                 cmp     eax, 100h
.text:0000000000004996                 jz      short loc_49BA
.text:0000000000004998
.text:0000000000004998 loc_4998:                               ; CODE XREF: main+10C1↑j
.text:0000000000004998                                         ; main+1118↓j
.text:0000000000004998                 cmp     eax, 5Ah ; 'Z'
.text:000000000000499B                 jle     short loc_4968
.text:000000000000499D                 lea     ecx, [rax-61h]
.text:00000000000049A0                 cmp     ecx, 19h
.text:00000000000049A3                 ja      short loc_4975
.text:00000000000049A5
.text:00000000000049A5 loc_49A5:                               ; CODE XREF: main+10CB↑j
.text:00000000000049A5                                         ; main+10D3↑j ...
.text:00000000000049A5                 add     eax, 1
.text:00000000000049A8                 mov     ecx, 1
.text:00000000000049AD                 or      [rdx], cl
.text:00000000000049AF                 add     rdx, 1
.text:00000000000049B3                 cmp     eax, 100h
.text:00000000000049B8                 jnz     short loc_4998
.text:00000000000049BA
.text:00000000000049BA loc_49BA:                               ; CODE XREF: main+10F6↑j
.text:00000000000049BA                 call    xgethostname
.text:00000000000049BF                 test    rax, rax
.text:00000000000049C2                 jz      loc_4D79
.text:00000000000049C8
.text:00000000000049C8 loc_49C8:                               ; CODE XREF: main+14E0↓j
.text:00000000000049C8                 mov     cs:hostname, rax
.text:00000000000049CF                 jmp     loc_4531
.text:00000000000049D4 ; ---------------------------------------------------------------------------
.text:00000000000049D4
.text:00000000000049D4 loc_49D4:                               ; CODE XREF: main+C7E↑j
.text:00000000000049D4                 mov     r15, cs:free_ptr
.text:00000000000049DB                 mov     r14, cs:malloc_ptr
.text:00000000000049E2                 lea     rdi, dired_obstack
.text:00000000000049E9                 xor     edx, edx
.text:00000000000049EB                 xor     esi, esi
.text:00000000000049ED                 mov     r8, r15
.text:00000000000049F0                 mov     rcx, r14
.text:00000000000049F3                 call    _obstack_begin
.text:00000000000049F8                 lea     rdi, subdired_obstack
.text:00000000000049FF                 mov     r8, r15
.text:0000000000004A02                 mov     rcx, r14
.text:0000000000004A05                 xor     edx, edx
.text:0000000000004A07                 xor     esi, esi
.text:0000000000004A09                 call    _obstack_begin
.text:0000000000004A0E                 jmp     loc_4524
.text:0000000000004A13 ; ---------------------------------------------------------------------------
.text:0000000000004A13
.text:0000000000004A13 loc_4A13:                               ; CODE XREF: main+CFC↑j
.text:0000000000004A13                 call    sort_files
.text:0000000000004A18                 cmp     cs:immediate_dirs, 0
.text:0000000000004A1F                 jz      loc_4D68
.text:0000000000004A25
.text:0000000000004A25 loc_4A25:                               ; CODE XREF: main+14D4↓j
.text:0000000000004A25                 cmp     cs:cwd_n_used, 0
.text:0000000000004A2D                 jz      loc_45A2
.text:0000000000004A33                 call    print_current_files
.text:0000000000004A38                 cmp     cs:pending_dirs, 0
.text:0000000000004A40                 jz      loc_4686
.text:0000000000004A46                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004A4D                 mov     rax, [rdi+28h]
.text:0000000000004A51                 cmp     [rdi+30h], rax
.text:0000000000004A55                 jbe     loc_518A
.text:0000000000004A5B                 lea     rdx, [rax+1]
.text:0000000000004A5F                 mov     [rdi+28h], rdx
.text:0000000000004A63                 mov     byte ptr [rax], 0Ah
.text:0000000000004A66
.text:0000000000004A66 loc_4A66:                               ; CODE XREF: main+18F4↓j
.text:0000000000004A66                 add     cs:dired_pos, 1
.text:0000000000004A6E                 mov     rbx, cs:pending_dirs
.text:0000000000004A75                 jmp     loc_45EC
.text:0000000000004A7A ; ---------------------------------------------------------------------------
.text:0000000000004A7A
.text:0000000000004A7A loc_4A7A:                               ; CODE XREF: main+E03↑j
.text:0000000000004A7A                 lea     rsi, dired_obstack
.text:0000000000004A81                 lea     rdi, aDired     ; "//DIRED//"
.text:0000000000004A88                 call    dired_dump_obstack
.text:0000000000004A8D                 lea     rsi, subdired_obstack
.text:0000000000004A94                 lea     rdi, aSubdired  ; "//SUBDIRED//"
.text:0000000000004A9B                 call    dired_dump_obstack
.text:0000000000004AA0                 mov     rdi, cs:filename_quoting_options
.text:0000000000004AA7                 call    get_quoting_style
.text:0000000000004AAC                 lea     rdx, quoting_style_args
.text:0000000000004AB3                 mov     eax, eax
.text:0000000000004AB5                 lea     rsi, aDiredOptionsQu ; "//DIRED-OPTIONS// --quoting-style=%s\n"
.text:0000000000004ABC                 mov     edi, 1
.text:0000000000004AC1                 mov     rdx, [rdx+rax*8]
.text:0000000000004AC5                 xor     eax, eax
.text:0000000000004AC7                 call    ___printf_chk
.text:0000000000004ACC                 jmp     loc_46A9
.text:0000000000004AD1 ; ---------------------------------------------------------------------------
.text:0000000000004AD1
.text:0000000000004AD1 loc_4AD1:                               ; CODE XREF: main+BB0↑j
.text:0000000000004AD1                 lea     rdi, aLsColors  ; "LS_COLORS"
.text:0000000000004AD8                 call    _getenv
.text:0000000000004ADD                 test    rax, rax
.text:0000000000004AE0                 mov     [rsp+88h+var_60], rax
.text:0000000000004AE5                 jz      short loc_4AF0
.text:0000000000004AE7                 cmp     byte ptr [rax], 0
.text:0000000000004AEA                 jnz     loc_4DF8
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: main+1245↑j
.text:0000000000004AF0                 lea     rdi, aColorterm ; "COLORTERM"
.text:0000000000004AF7                 call    _getenv
.text:0000000000004AFC                 test    rax, rax
.text:0000000000004AFF                 jz      short loc_4B0A
.text:0000000000004B01                 cmp     byte ptr [rax], 0
.text:0000000000004B04                 jnz     loc_4BA2
.text:0000000000004B0A
.text:0000000000004B0A loc_4B0A:                               ; CODE XREF: main+125F↑j
.text:0000000000004B0A                 lea     rdi, aColorterm+5 ; name
.text:0000000000004B11                 call    _getenv
.text:0000000000004B16                 test    rax, rax
.text:0000000000004B19                 mov     [rsp+88h+name], rax
.text:0000000000004B1E                 jz      short loc_4B9B
.text:0000000000004B20                 mov     rax, [rsp+88h+name]
.text:0000000000004B25                 cmp     byte ptr [rax], 0
.text:0000000000004B28                 jz      short loc_4B9B
.text:0000000000004B2A                 lea     r14, G_line     ; "# Configuration file for dircolors, a u"...
.text:0000000000004B31                 mov     rax, r12
.text:0000000000004B34                 mov     r12, rbx
.text:0000000000004B37                 mov     r15, rax
.text:0000000000004B3A                 mov     rbx, r14
.text:0000000000004B3D                 jmp     short loc_4B53
.text:0000000000004B3F ; ---------------------------------------------------------------------------
.text:0000000000004B3F
.text:0000000000004B3F loc_4B3F:                               ; CODE XREF: main+12D7↓j
.text:0000000000004B3F                                         ; main+12EB↓j
.text:0000000000004B3F                 xor     eax, eax
.text:0000000000004B41                 mov     rdi, rbx
.text:0000000000004B44                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B48                 repne scasb
.text:0000000000004B4A                 mov     rax, rcx
.text:0000000000004B4D                 not     rax
.text:0000000000004B50                 add     rbx, rax
.text:0000000000004B53
.text:0000000000004B53 loc_4B53:                               ; CODE XREF: main+129D↑j
.text:0000000000004B53                 mov     rax, rbx
.text:0000000000004B56                 sub     rax, r14
.text:0000000000004B59                 cmp     rax, 10C3h
.text:0000000000004B5F                 ja      short loc_4B95
.text:0000000000004B61                 lea     rsi, s2         ; "TERM "
.text:0000000000004B68                 mov     edx, 5          ; n
.text:0000000000004B6D                 mov     rdi, rbx        ; s1
.text:0000000000004B70                 call    _strncmp
.text:0000000000004B75                 test    eax, eax
.text:0000000000004B77                 jnz     short loc_4B3F
.text:0000000000004B79                 mov     rsi, [rsp+88h+name] ; name
.text:0000000000004B7E                 lea     rdi, [rbx+5]    ; pattern
.text:0000000000004B82                 xor     edx, edx        ; flags
.text:0000000000004B84                 call    _fnmatch
.text:0000000000004B89                 test    eax, eax
.text:0000000000004B8B                 jnz     short loc_4B3F
.text:0000000000004B8D                 mov     rbx, r12
.text:0000000000004B90                 mov     r12, r15
.text:0000000000004B93                 jmp     short loc_4BA2
.text:0000000000004B95 ; ---------------------------------------------------------------------------
.text:0000000000004B95
.text:0000000000004B95 loc_4B95:                               ; CODE XREF: main+12BF↑j
.text:0000000000004B95                 mov     rbx, r12
.text:0000000000004B98                 mov     r12, r15
.text:0000000000004B9B
.text:0000000000004B9B loc_4B9B:                               ; CODE XREF: main+127E↑j
.text:0000000000004B9B                                         ; main+1288↑j
.text:0000000000004B9B                 mov     cs:print_with_color, 0
.text:0000000000004BA2
.text:0000000000004BA2 loc_4BA2:                               ; CODE XREF: main+1264↑j
.text:0000000000004BA2                                         ; main+12F3↑j ...
.text:0000000000004BA2                 cmp     cs:directories_first, 0
.text:0000000000004BA9                 jnz     loc_445F
.text:0000000000004BAF                 cmp     cs:print_with_color, 0
.text:0000000000004BB6                 jz      loc_4466
.text:0000000000004BBC                 mov     edi, 0Dh
.text:0000000000004BC1                 call    is_colored
.text:0000000000004BC6                 test    al, al
.text:0000000000004BC8                 jnz     loc_445F
.text:0000000000004BCE                 mov     edi, 0Eh
.text:0000000000004BD3                 call    is_colored
.text:0000000000004BD8                 test    al, al
.text:0000000000004BDA                 jz      short loc_4BE9
.text:0000000000004BDC                 cmp     cs:color_symlink_as_referent, 0
.text:0000000000004BE3                 jnz     loc_445F
.text:0000000000004BE9
.text:0000000000004BE9 loc_4BE9:                               ; CODE XREF: main+133A↑j
.text:0000000000004BE9                 mov     edi, 0Ch
.text:0000000000004BEE                 call    is_colored
.text:0000000000004BF3                 test    al, al
.text:0000000000004BF5                 jz      loc_4466
.text:0000000000004BFB                 cmp     cs:format, 0
.text:0000000000004C02                 jz      loc_445F
.text:0000000000004C08                 jmp     loc_4466
.text:0000000000004C0D ; ---------------------------------------------------------------------------
.text:0000000000004C0D
.text:0000000000004C0D loc_4C0D:                               ; CODE XREF: main+235↑j
.text:0000000000004C0D                 mov     rdi, r13
.text:0000000000004C10                 call    quote
.text:0000000000004C15                 lea     rsi, aIgnoringInvali_1 ; "ignoring invalid tab size in environmen"...
.text:0000000000004C1C                 mov     r13, rax
.text:0000000000004C1F                 xor     edi, edi        ; domainname
.text:0000000000004C21                 mov     edx, 5          ; category
.text:0000000000004C26                 call    _dcgettext
.text:0000000000004C2B                 mov     rcx, r13
.text:0000000000004C2E                 mov     rdx, rax        ; format
.text:0000000000004C31                 xor     esi, esi        ; errnum
.text:0000000000004C33                 xor     edi, edi        ; status
.text:0000000000004C35                 xor     eax, eax
.text:0000000000004C37                 call    _error
.text:0000000000004C3C                 jmp     loc_3AE7
.text:0000000000004C41 ; ---------------------------------------------------------------------------
.text:0000000000004C41
.text:0000000000004C41 loc_4C41:                               ; CODE XREF: main+D0F↑j
.text:0000000000004C41                 test    rbx, rbx
.text:0000000000004C44                 jz      loc_4686
.text:0000000000004C4A                 cmp     qword ptr [rbx+18h], 0
.text:0000000000004C4F                 jnz     loc_45EC
.text:0000000000004C55                 mov     cs:print_dir_name, 0
.text:0000000000004C5C                 jmp     loc_45EC
.text:0000000000004C61 ; ---------------------------------------------------------------------------
.text:0000000000004C61
.text:0000000000004C61 loc_4C61:                               ; CODE XREF: main+B8E↑j
.text:0000000000004C61                 cmp     byte ptr [r14], 2Bh ; '+'
.text:0000000000004C65                 jz      loc_4DA9
.text:0000000000004C6B
.text:0000000000004C6B loc_4C6B:                               ; CODE XREF: main+1504↓j
.text:0000000000004C6B                 lea     rdx, time_style_types
.text:0000000000004C72                 lea     rsi, time_style_args
.text:0000000000004C79                 mov     ecx, 4
.text:0000000000004C7E                 mov     rdi, r14
.text:0000000000004C81                 call    argmatch
.text:0000000000004C86                 test    rax, rax
.text:0000000000004C89                 js      loc_5024
.text:0000000000004C8F                 cmp     rax, 1
.text:0000000000004C93                 jz      loc_5170
.text:0000000000004C99                 jle     loc_4F96
.text:0000000000004C9F                 cmp     rax, 2
.text:0000000000004CA3                 jz      loc_514F
.text:0000000000004CA9                 cmp     rax, 3
.text:0000000000004CAD                 jnz     short loc_4CF1
.text:0000000000004CAF                 mov     edi, 2
.text:0000000000004CB4                 call    hard_locale
.text:0000000000004CB9                 test    al, al
.text:0000000000004CBB                 jz      short loc_4CF1
.text:0000000000004CBD                 mov     rsi, cs:long_time_format ; msgid
.text:0000000000004CC4                 mov     edx, 2          ; category
.text:0000000000004CC9                 xor     edi, edi        ; domainname
.text:0000000000004CCB                 call    _dcgettext
.text:0000000000004CD0                 mov     rsi, cs:off_220048 ; msgid
.text:0000000000004CD7                 mov     edx, 2          ; category
.text:0000000000004CDC                 xor     edi, edi        ; domainname
.text:0000000000004CDE                 mov     cs:long_time_format, rax
.text:0000000000004CE5                 call    _dcgettext
.text:0000000000004CEA                 mov     cs:off_220048, rax ; "%b %e %H:%M"
.text:0000000000004CF1
.text:0000000000004CF1 loc_4CF1:                               ; CODE XREF: main+140D↑j
.text:0000000000004CF1                                         ; main+141B↑j ...
.text:0000000000004CF1                 call    abformat_init
.text:0000000000004CF6                 jmp     loc_4442
.text:0000000000004CFB ; ---------------------------------------------------------------------------
.text:0000000000004CFB
.text:0000000000004CFB loc_4CFB:                               ; CODE XREF: main+331↑j
.text:0000000000004CFB                 mov     edi, 1          ; fd
.text:0000000000004D00                 call    _isatty
.text:0000000000004D05                 cmp     eax, 1
.text:0000000000004D08                 sbb     eax, eax
.text:0000000000004D0A                 add     eax, 2
.text:0000000000004D0D                 mov     cs:format, eax
.text:0000000000004D13                 jmp     loc_3BD7
.text:0000000000004D18 ; ---------------------------------------------------------------------------
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: main+AB6↑j
.text:0000000000004D18                 mov     edx, 1
.text:0000000000004D1D                 mov     esi, 20h ; ' '
.text:0000000000004D22                 mov     rdi, rax
.text:0000000000004D25                 call    set_char_quoting
.text:0000000000004D2A                 jmp     loc_435C
.text:0000000000004D2F ; ---------------------------------------------------------------------------
.text:0000000000004D2F
.text:0000000000004D2F loc_4D2F:                               ; CODE XREF: main+9C6↑j
.text:0000000000004D2F                 mov     esi, 3
.text:0000000000004D34                 xor     edi, edi
.text:0000000000004D36                 mov     cs:format, 2
.text:0000000000004D40                 call    set_quoting_style
.text:0000000000004D45                 mov     cs:qmark_funny_chars, 1
.text:0000000000004D4C                 jmp     loc_3988
.text:0000000000004D51 ; ---------------------------------------------------------------------------
.text:0000000000004D51
.text:0000000000004D51 loc_4D51:                               ; CODE XREF: main+B55↑j
.text:0000000000004D51                 test    edx, edx
.text:0000000000004D53                 jz      loc_43FF
.text:0000000000004D59                 mov     cs:sort_type, 4
.text:0000000000004D63                 jmp     loc_4442
.text:0000000000004D68 ; ---------------------------------------------------------------------------
.text:0000000000004D68
.text:0000000000004D68 loc_4D68:                               ; CODE XREF: main+117F↑j
.text:0000000000004D68                 mov     esi, 1
.text:0000000000004D6D                 xor     edi, edi        ; void *
.text:0000000000004D6F                 call    extract_dirs_from_files
.text:0000000000004D74                 jmp     loc_4A25
.text:0000000000004D79 ; ---------------------------------------------------------------------------
.text:0000000000004D79
.text:0000000000004D79 loc_4D79:                               ; CODE XREF: main+1122↑j
.text:0000000000004D79                 lea     rax, a8+6       ; ""
.text:0000000000004D80                 jmp     loc_49C8
.text:0000000000004D85 ; ---------------------------------------------------------------------------
.text:0000000000004D85
.text:0000000000004D85 loc_4D85:                               ; CODE XREF: main+B62↑j
.text:0000000000004D85                 lea     rdi, aTimeStyle ; "TIME_STYLE"
.text:0000000000004D8C                 call    _getenv
.text:0000000000004D91                 test    rax, rax
.text:0000000000004D94                 mov     r14, rax
.text:0000000000004D97                 jnz     loc_4408
.text:0000000000004D9D                 lea     r14, dirname+11h ; "locale"
.text:0000000000004DA4                 jmp     loc_4C6B
.text:0000000000004DA9 ; ---------------------------------------------------------------------------
.text:0000000000004DA9
.text:0000000000004DA9 loc_4DA9:                               ; CODE XREF: main+13C5↑j
.text:0000000000004DA9                 add     r14, 1
.text:0000000000004DAD                 mov     esi, 0Ah        ; c
.text:0000000000004DB2                 mov     rdi, r14        ; s
.text:0000000000004DB5                 call    _strchr
.text:0000000000004DBA                 test    rax, rax
.text:0000000000004DBD                 mov     r13, rax
.text:0000000000004DC0                 jz      loc_4FB9
.text:0000000000004DC6                 lea     r15, [rax+1]
.text:0000000000004DCA                 mov     esi, 0Ah        ; c
.text:0000000000004DCF                 mov     rdi, r15        ; s
.text:0000000000004DD2                 call    _strchr
.text:0000000000004DD7                 test    rax, rax
.text:0000000000004DDA                 jnz     loc_51B5
.text:0000000000004DE0                 mov     byte ptr [r13+0], 0
.text:0000000000004DE5
.text:0000000000004DE5 loc_4DE5:                               ; CODE XREF: main+171C↓j
.text:0000000000004DE5                 mov     cs:long_time_format, r14
.text:0000000000004DEC                 mov     cs:off_220048, r15 ; "%b %e %H:%M"
.text:0000000000004DF3                 jmp     loc_4CF1
.text:0000000000004DF8 ; ---------------------------------------------------------------------------
.text:0000000000004DF8
.text:0000000000004DF8 loc_4DF8:                               ; CODE XREF: main+124A↑j
.text:0000000000004DF8                 mov     rdi, rax        ; src
.text:0000000000004DFB                 lea     r15, indicator_name
.text:0000000000004E02                 mov     word ptr [rsp+88h+s1], 3F3Fh
.text:0000000000004E09                 mov     [rsp+88h+var_41], 0
.text:0000000000004E0E                 call    xstrdup
.text:0000000000004E13                 mov     dword ptr [rsp+88h+name], ebp
.text:0000000000004E17                 mov     cs:color_buf, rax
.text:0000000000004E1E                 mov     qword ptr [rsp+88h+longind], rax
.text:0000000000004E23                 mov     [rsp+88h+var_78], rbx
.text:0000000000004E28
.text:0000000000004E28 loc_4E28:                               ; CODE XREF: main+1854↓j
.text:0000000000004E28                                         ; main+188A↓j ...
.text:0000000000004E28                 mov     rax, [rsp+88h+var_60]
.text:0000000000004E2D                 movzx   edx, byte ptr [rax]
.text:0000000000004E30                 cmp     dl, 2Ah ; '*'
.text:0000000000004E33                 jz      loc_4FC1
.text:0000000000004E39                 cmp     dl, 3Ah ; ':'
.text:0000000000004E3C                 jz      loc_5199
.text:0000000000004E42                 test    dl, dl
.text:0000000000004E44                 jz      loc_51A7
.text:0000000000004E4A                 lea     rdx, [rax+1]
.text:0000000000004E4E                 mov     [rsp+88h+var_60], rdx
.text:0000000000004E53                 movzx   edx, byte ptr [rax]
.text:0000000000004E56                 mov     [rsp+88h+s1], dl
.text:0000000000004E5A                 cmp     byte ptr [rax+1], 0
.text:0000000000004E5E                 jz      loc_500F
.text:0000000000004E64                 lea     rdx, [rax+2]
.text:0000000000004E68                 mov     [rsp+88h+var_60], rdx
.text:0000000000004E6D                 movzx   edx, byte ptr [rax+1]
.text:0000000000004E71                 mov     [rsp+88h+s1+1], dl
.text:0000000000004E75                 lea     rdx, [rax+3]
.text:0000000000004E79                 mov     [rsp+88h+var_60], rdx
.text:0000000000004E7E                 cmp     byte ptr [rax+2], 3Dh ; '='
.text:0000000000004E82                 jnz     loc_500F
.text:0000000000004E88                 lea     rsi, aLc        ; "lc"
.text:0000000000004E8F                 lea     rbx, [rsp+88h+s1]
.text:0000000000004E94                 xor     ebp, ebp
.text:0000000000004E96
.text:0000000000004E96 loc_4E96:                               ; CODE XREF: main+1611↓j
.text:0000000000004E96                 mov     rdi, rbx        ; s1
.text:0000000000004E99                 call    _strcmp
.text:0000000000004E9E                 test    eax, eax
.text:0000000000004EA0                 jz      loc_50FF
.text:0000000000004EA6                 add     rbp, 1
.text:0000000000004EAA                 mov     rsi, [r15+rbp*8]
.text:0000000000004EAE                 test    rsi, rsi
.text:0000000000004EB1                 jnz     short loc_4E96
.text:0000000000004EB3
.text:0000000000004EB3 loc_4EB3:                               ; CODE XREF: main+1890↓j
.text:0000000000004EB3                 mov     rdi, rbx
.text:0000000000004EB6                 mov     ebp, dword ptr [rsp+88h+name]
.text:0000000000004EBA                 mov     rbx, [rsp+88h+var_78]
.text:0000000000004EBF                 call    quote
.text:0000000000004EC4                 lea     rsi, aUnrecognizedPr ; "unrecognized prefix: %s"
.text:0000000000004ECB                 mov     r14, rax
.text:0000000000004ECE                 mov     edx, 5          ; category
.text:0000000000004ED3                 xor     edi, edi        ; domainname
.text:0000000000004ED5                 call    _dcgettext
.text:0000000000004EDA                 mov     rcx, r14
.text:0000000000004EDD                 mov     rdx, rax        ; format
.text:0000000000004EE0                 xor     esi, esi        ; errnum
.text:0000000000004EE2                 xor     edi, edi        ; status
.text:0000000000004EE4                 xor     eax, eax
.text:0000000000004EE6                 call    _error
.text:0000000000004EEB
.text:0000000000004EEB loc_4EEB:                               ; CODE XREF: main+1778↓j
.text:0000000000004EEB                 lea     rsi, aUnparsableValu ; "unparsable value for LS_COLORS environm"...
.text:0000000000004EF2                 mov     edx, 5          ; category
.text:0000000000004EF7                 xor     edi, edi        ; domainname
.text:0000000000004EF9                 call    _dcgettext
.text:0000000000004EFE                 xor     esi, esi        ; errnum
.text:0000000000004F00                 mov     rdx, rax        ; format
.text:0000000000004F03                 xor     edi, edi        ; status
.text:0000000000004F05                 xor     eax, eax
.text:0000000000004F07                 call    _error
.text:0000000000004F0C                 mov     rdi, cs:color_buf ; ptr
.text:0000000000004F13                 call    free
.text:0000000000004F18                 mov     rdi, cs:color_ext_list
.text:0000000000004F1F                 jmp     short loc_4F2D
.text:0000000000004F21 ; ---------------------------------------------------------------------------
.text:0000000000004F21
.text:0000000000004F21 loc_4F21:                               ; CODE XREF: main+1690↓j
.text:0000000000004F21                 mov     r14, [rdi+20h]
.text:0000000000004F25                 call    free
.text:0000000000004F2A                 mov     rdi, r14        ; ptr
.text:0000000000004F2D
.text:0000000000004F2D loc_4F2D:                               ; CODE XREF: main+167F↑j
.text:0000000000004F2D                 test    rdi, rdi
.text:0000000000004F30                 jnz     short loc_4F21
.text:0000000000004F32                 mov     cs:print_with_color, 0
.text:0000000000004F39
.text:0000000000004F39 loc_4F39:                               ; CODE XREF: main+1910↓j
.text:0000000000004F39                 cmp     cs:qword_2200D0, 6
.text:0000000000004F41                 jnz     loc_4BA2
.text:0000000000004F47                 mov     rdi, cs:s1      ; s1
.text:0000000000004F4E                 lea     rsi, aTarget    ; "target"
.text:0000000000004F55                 mov     edx, 6          ; n
.text:0000000000004F5A                 call    _strncmp
.text:0000000000004F5F                 test    eax, eax
.text:0000000000004F61                 jnz     loc_4BA2
.text:0000000000004F67                 mov     cs:color_symlink_as_referent, 1
.text:0000000000004F6E                 jmp     loc_4BA2
.text:0000000000004F73 ; ---------------------------------------------------------------------------
.text:0000000000004F73
.text:0000000000004F73 loc_4F73:                               ; CODE XREF: main+F32↑j
.text:0000000000004F73                 cmp     cs:qword_220070, 1
.text:0000000000004F7B                 jnz     loc_47D8
.text:0000000000004F81                 mov     rax, cs:off_220078 ; "m"
.text:0000000000004F88                 cmp     byte ptr [rax], 6Dh ; 'm'
.text:0000000000004F8B                 jnz     loc_47D8
.text:0000000000004F91                 jmp     loc_47F0
.text:0000000000004F96 ; ---------------------------------------------------------------------------
.text:0000000000004F96
.text:0000000000004F96 loc_4F96:                               ; CODE XREF: main+13F9↑j
.text:0000000000004F96                 test    rax, rax
.text:0000000000004F99                 jnz     loc_4CF1
.text:0000000000004F9F                 lea     rax, aYMDHMSNZ  ; "%Y-%m-%d %H:%M:%S.%N %z"
.text:0000000000004FA6                 mov     cs:off_220048, rax ; "%b %e %H:%M"
.text:0000000000004FAD                 mov     cs:long_time_format, rax
.text:0000000000004FB4                 jmp     loc_4CF1
.text:0000000000004FB9 ; ---------------------------------------------------------------------------
.text:0000000000004FB9
.text:0000000000004FB9 loc_4FB9:                               ; CODE XREF: main+1520↑j
.text:0000000000004FB9                 mov     r15, r14
.text:0000000000004FBC                 jmp     loc_4DE5
.text:0000000000004FC1 ; ---------------------------------------------------------------------------
.text:0000000000004FC1
.text:0000000000004FC1 loc_4FC1:                               ; CODE XREF: main+1593↑j
.text:0000000000004FC1                 mov     edi, 28h ; '('
.text:0000000000004FC6                 lea     rbx, [rsp+88h+var_60]
.text:0000000000004FCB                 call    xmalloc
.text:0000000000004FD0                 mov     r14, rax
.text:0000000000004FD3                 mov     rax, cs:color_ext_list
.text:0000000000004FDA                 mov     edx, 1
.text:0000000000004FDF                 mov     rcx, r14
.text:0000000000004FE2                 mov     rsi, rbx
.text:0000000000004FE5                 mov     rdi, r12
.text:0000000000004FE8                 add     [rsp+88h+var_60], 1
.text:0000000000004FEE                 mov     cs:color_ext_list, r14
.text:0000000000004FF5                 mov     [r14+20h], rax
.text:0000000000004FF9                 mov     rax, qword ptr [rsp+88h+longind]
.text:0000000000004FFE                 mov     [r14+8], rax
.text:0000000000005002                 call    get_funky_string
.text:0000000000005007                 test    al, al
.text:0000000000005009                 jnz     loc_50C1
.text:000000000000500F
.text:000000000000500F loc_500F:                               ; CODE XREF: main+15BE↑j
.text:000000000000500F                                         ; main+15E2↑j ...
.text:000000000000500F                 mov     ebp, dword ptr [rsp+88h+name]
.text:0000000000005013                 mov     rbx, [rsp+88h+var_78]
.text:0000000000005018                 jmp     loc_4EEB
.text:000000000000501D ; ---------------------------------------------------------------------------
.text:000000000000501D
.text:000000000000501D loc_501D:                               ; CODE XREF: main+2AC↑j
.text:000000000000501D                                         ; DATA XREF: .rodata:jpt_3B4C↓o
.text:000000000000501D                 xor     edi, edi        ; jumptable 0000000000003B4C case -130
.text:000000000000501F                 call    usage
.text:0000000000005024 ; ---------------------------------------------------------------------------
.text:0000000000005024
.text:0000000000005024 loc_5024:                               ; CODE XREF: main+13E9↑j
.text:0000000000005024                 lea     rdi, aTimeStyle_0 ; "time style"
.text:000000000000502B                 mov     rdx, rax
.text:000000000000502E                 mov     rsi, r14
.text:0000000000005031                 lea     rbp, aPosixS    ; "  - [posix-]%s\n"
.text:0000000000005038                 call    argmatch_invalid
.text:000000000000503D                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000005044                 lea     rsi, aValidArguments ; "Valid arguments are:\n"
.text:000000000000504B                 mov     edx, 5          ; category
.text:0000000000005050                 xor     edi, edi        ; domainname
.text:0000000000005052                 call    _dcgettext
.text:0000000000005057                 mov     rsi, rbx        ; stream
.text:000000000000505A                 mov     rdi, rax        ; s
.text:000000000000505D                 lea     rbx, time_style_args
.text:0000000000005064                 call    _fputs_unlocked
.text:0000000000005069                 lea     rcx, aFullIso   ; "full-iso"
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: main+17F0↓j
.text:0000000000005070                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005077                 add     rbx, 8
.text:000000000000507B                 xor     eax, eax
.text:000000000000507D                 mov     rdx, rbp
.text:0000000000005080                 mov     esi, 1
.text:0000000000005085                 call    ___fprintf_chk
.text:000000000000508A                 mov     rcx, [rbx]
.text:000000000000508D                 test    rcx, rcx
.text:0000000000005090                 jnz     short loc_5070
.text:0000000000005092                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000005099                 lea     rsi, aFormatEGHMForA ; "  - +FORMAT (e.g., +%H:%M) for a 'date'"...
.text:00000000000050A0                 xor     edi, edi        ; domainname
.text:00000000000050A2                 mov     edx, 5          ; category
.text:00000000000050A7                 call    _dcgettext
.text:00000000000050AC                 mov     rsi, rbx        ; stream
.text:00000000000050AF                 mov     rdi, rax        ; s
.text:00000000000050B2                 call    _fputs_unlocked
.text:00000000000050B7
.text:00000000000050B7 def_3B4C:                               ; CODE XREF: main+29E↑j
.text:00000000000050B7                                         ; main+2AC↑j
.text:00000000000050B7                                         ; DATA XREF: ...
.text:00000000000050B7                 mov     edi, 2          ; jumptable 0000000000003B4C default case, cases -129-48,50-64,69,74,75,77,79,80,86,87,89,91-96,101,106,121-127
.text:00000000000050BC                 call    usage
.text:00000000000050C1 ; ---------------------------------------------------------------------------
.text:00000000000050C1
.text:00000000000050C1 loc_50C1:                               ; CODE XREF: main+1769↑j
.text:00000000000050C1                 mov     rax, [rsp+88h+var_60]
.text:00000000000050C6                 lea     rdx, [rax+1]
.text:00000000000050CA                 mov     [rsp+88h+var_60], rdx
.text:00000000000050CF                 cmp     byte ptr [rax], 3Dh ; '='
.text:00000000000050D2                 jnz     loc_500F
.text:00000000000050D8                 mov     rax, qword ptr [rsp+88h+longind]
.text:00000000000050DD                 lea     rcx, [r14+10h]
.text:00000000000050E1                 xor     edx, edx
.text:00000000000050E3                 mov     rsi, rbx
.text:00000000000050E6                 mov     rdi, r12
.text:00000000000050E9                 mov     [r14+18h], rax
.text:00000000000050ED                 call    get_funky_string
.text:00000000000050F2                 test    al, al
.text:00000000000050F4                 jnz     loc_4E28
.text:00000000000050FA                 jmp     loc_500F
.text:00000000000050FF ; ---------------------------------------------------------------------------
.text:00000000000050FF
.text:00000000000050FF loc_50FF:                               ; CODE XREF: main+1600↑j
.text:00000000000050FF                 lea     rax, color_indicator
.text:0000000000005106                 movsxd  rcx, ebp
.text:0000000000005109                 lea     rsi, [rsp+88h+var_60]
.text:000000000000510E                 shl     rcx, 4
.text:0000000000005112                 xor     edx, edx
.text:0000000000005114                 mov     rdi, r12
.text:0000000000005117                 add     rcx, rax
.text:000000000000511A                 mov     rax, qword ptr [rsp+88h+longind]
.text:000000000000511F                 mov     [rcx+8], rax
.text:0000000000005123                 call    get_funky_string
.text:0000000000005128                 test    al, al
.text:000000000000512A                 jnz     loc_4E28
.text:0000000000005130                 jmp     loc_4EB3
.text:0000000000005135 ; ---------------------------------------------------------------------------
.text:0000000000005135
.text:0000000000005135 loc_5135:                               ; CODE XREF: main+1073↑j
.text:0000000000005135                 lea     rdi, aLsBlockSize+3 ; name
.text:000000000000513C                 call    _getenv
.text:0000000000005141                 test    rax, rax
.text:0000000000005144                 jnz     loc_4919
.text:000000000000514A                 jmp     loc_4933
.text:000000000000514F ; ---------------------------------------------------------------------------
.text:000000000000514F
.text:000000000000514F loc_514F:                               ; CODE XREF: main+1403↑j
.text:000000000000514F                 lea     rax, aYMD       ; "%Y-%m-%d "
.text:0000000000005156                 mov     cs:long_time_format, rax
.text:000000000000515D                 lea     rax, aMDHM      ; "%m-%d %H:%M"
.text:0000000000005164                 mov     cs:off_220048, rax ; "%b %e %H:%M"
.text:000000000000516B                 jmp     loc_4CF1
.text:0000000000005170 ; ---------------------------------------------------------------------------
.text:0000000000005170
.text:0000000000005170 loc_5170:                               ; CODE XREF: main+13F3↑j
.text:0000000000005170                 lea     rax, unk_17B6A
.text:0000000000005177                 mov     cs:off_220048, rax ; "%b %e %H:%M"
.text:000000000000517E                 mov     cs:long_time_format, rax
.text:0000000000005185                 jmp     loc_4CF1
.text:000000000000518A ; ---------------------------------------------------------------------------
.text:000000000000518A
.text:000000000000518A loc_518A:                               ; CODE XREF: main+11B5↑j
.text:000000000000518A                 mov     esi, 0Ah        ; int
.text:000000000000518F                 call    ___overflow
.text:0000000000005194                 jmp     loc_4A66
.text:0000000000005199 ; ---------------------------------------------------------------------------
.text:0000000000005199
.text:0000000000005199 loc_5199:                               ; CODE XREF: main+159C↑j
.text:0000000000005199                 add     rax, 1
.text:000000000000519D                 mov     [rsp+88h+var_60], rax
.text:00000000000051A2                 jmp     loc_4E28
.text:00000000000051A7 ; ---------------------------------------------------------------------------
.text:00000000000051A7
.text:00000000000051A7 loc_51A7:                               ; CODE XREF: main+15A4↑j
.text:00000000000051A7                 mov     ebp, dword ptr [rsp+88h+name]
.text:00000000000051AB                 mov     rbx, [rsp+88h+var_78]
.text:00000000000051B0                 jmp     loc_4F39
.text:00000000000051B5 ; ---------------------------------------------------------------------------
.text:00000000000051B5
.text:00000000000051B5 loc_51B5:                               ; CODE XREF: main+153A↑j
.text:00000000000051B5                 mov     rdi, r14
.text:00000000000051B8                 call    quote
.text:00000000000051BD                 lea     rsi, aInvalidTimeSty ; "invalid time style format %s"
.text:00000000000051C4                 mov     rbx, rax
.text:00000000000051C7                 mov     edx, 5          ; category
.text:00000000000051CC                 xor     edi, edi        ; domainname
.text:00000000000051CE                 call    _dcgettext
.text:00000000000051D3                 mov     rcx, rbx
.text:00000000000051D6                 mov     rdx, rax        ; format
.text:00000000000051D9                 xor     esi, esi        ; errnum
.text:00000000000051DB                 mov     edi, 2          ; status
.text:00000000000051E0                 xor     eax, eax
.text:00000000000051E2                 call    _error
.text:00000000000051E7
.text:00000000000051E7 loc_51E7:                               ; CODE XREF: main+D89↑j
.text:00000000000051E7                 lea     rcx, __PRETTY_FUNCTION___9809 ; "dev_ino_pop"
.text:00000000000051EE                 lea     rsi, file       ; "../coreutils-8.31/src/ls.c"
.text:00000000000051F5                 lea     rdi, assertion  ; "dev_ino_size <= obstack_object_size (&d"...
.text:00000000000051FC                 mov     edx, 403h       ; line
.text:0000000000005201                 call    ___assert_fail
.text:0000000000005206 ; ---------------------------------------------------------------------------
.text:0000000000005206
.text:0000000000005206 loc_5206:                               ; CODE XREF: main+DBA↑j
.text:0000000000005206                 lea     rcx, __PRETTY_FUNCTION___9964 ; "main"
.text:000000000000520D                 lea     rsi, file       ; "../coreutils-8.31/src/ls.c"
.text:0000000000005214                 lea     rdi, aFound     ; "found"
.text:000000000000521B                 mov     edx, 640h       ; line
.text:0000000000005220                 call    ___assert_fail
.text:0000000000005225 ; ---------------------------------------------------------------------------
.text:0000000000005225
.text:0000000000005225 loc_5225:                               ; CODE XREF: main+E20↑j
.text:0000000000005225                 lea     rcx, __PRETTY_FUNCTION___9964 ; "main"
.text:000000000000522C                 lea     rsi, file       ; "../coreutils-8.31/src/ls.c"
.text:0000000000005233                 lea     rdi, aHashGetNEntrie ; "hash_get_n_entries (active_dir_set) == "...
.text:000000000000523A                 mov     edx, 674h       ; line
.text:000000000000523F                 call    ___assert_fail
.text:0000000000005244 ; ---------------------------------------------------------------------------
.text:0000000000005244
.text:0000000000005244 loc_5244:                               ; CODE XREF: main+89A↑j
.text:0000000000005244                 mov     r8, cs:optarg@@GLIBC_2_2_5
.text:000000000000524B                 mov     esi, [rsp+88h+longind]
.text:000000000000524F                 lea     rcx, long_options
.text:0000000000005256                 xor     edx, edx
.text:0000000000005258                 mov     edi, eax
.text:000000000000525A                 call    xstrtol_fatal
.text:000000000000525F ; ---------------------------------------------------------------------------
.text:000000000000525F
.text:000000000000525F loc_525F:                               ; CODE XREF: main+E42↑j
.text:000000000000525F                 call    ___stack_chk_fail
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005264
.text:0000000000005264 loc_5264:                               ; CODE XREF: main+C07↑j
.text:0000000000005264                 call    xalloc_die
.text:0000000000005264 ; } // starts at 38A0
.text:0000000000005264 main            endp
.text:0000000000005264
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005269                 align 10h
.text:0000000000005270
.text:0000000000005270 ; =============== S U B R O U T I N E =======================================
.text:0000000000005270
.text:0000000000005270 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000005270
.text:0000000000005270 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000005270                 public start
.text:0000000000005270 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000005270 ; __unwind {
.text:0000000000005270                 xor     ebp, ebp
.text:0000000000005272                 mov     r9, rdx         ; rtld_fini
.text:0000000000005275                 pop     rsi             ; argc
.text:0000000000005276                 mov     rdx, rsp        ; ubp_av
.text:0000000000005279                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000527D                 push    rax
.text:000000000000527E                 push    rsp             ; stack_end
.text:000000000000527F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000005286                 lea     rcx, __libc_csu_init ; init
.text:000000000000528D                 lea     rdi, main       ; main
.text:0000000000005294                 call    cs:__libc_start_main_ptr
.text:000000000000529A                 hlt
.text:000000000000529A ; } // starts at 5270
.text:000000000000529A start           endp
.text:000000000000529A
.text:000000000000529A ; ---------------------------------------------------------------------------
.text:000000000000529B                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000052A0
.text:00000000000052A0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_5353↓p
.text:00000000000052A0                 lea     rdi, __bss_start
.text:00000000000052A7                 push    rbp
.text:00000000000052A8                 lea     rax, __bss_start
.text:00000000000052AF                 cmp     rax, rdi
.text:00000000000052B2                 mov     rbp, rsp
.text:00000000000052B5                 jz      short loc_52D0
.text:00000000000052B7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000052BE                 test    rax, rax
.text:00000000000052C1                 jz      short loc_52D0
.text:00000000000052C3                 pop     rbp
.text:00000000000052C4                 jmp     rax
.text:00000000000052C4 ; ---------------------------------------------------------------------------
.text:00000000000052C6                 align 10h
.text:00000000000052D0
.text:00000000000052D0 loc_52D0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000052D0                                         ; deregister_tm_clones+21↑j
.text:00000000000052D0                 pop     rbp
.text:00000000000052D1                 retn
.text:00000000000052D1 deregister_tm_clones endp
.text:00000000000052D1
.text:00000000000052D1 ; ---------------------------------------------------------------------------
.text:00000000000052D2                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000052E0                 lea     rdi, __bss_start
.text:00000000000052E7                 lea     rsi, __bss_start
.text:00000000000052EE                 push    rbp
.text:00000000000052EF                 sub     rsi, rdi
.text:00000000000052F2                 mov     rbp, rsp
.text:00000000000052F5                 sar     rsi, 3
.text:00000000000052F9                 mov     rax, rsi
.text:00000000000052FC                 shr     rax, 3Fh
.text:0000000000005300                 add     rsi, rax
.text:0000000000005303                 sar     rsi, 1
.text:0000000000005306                 jz      short loc_5320
.text:0000000000005308                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000530F                 test    rax, rax
.text:0000000000005312                 jz      short loc_5320
.text:0000000000005314                 pop     rbp
.text:0000000000005315                 jmp     rax
.text:0000000000005315 ; ---------------------------------------------------------------------------
.text:0000000000005317                 align 20h
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000005320                                         ; register_tm_clones+32↑j
.text:0000000000005320                 pop     rbp
.text:0000000000005321                 retn
.text:0000000000005321 register_tm_clones endp
.text:0000000000005321
.text:0000000000005321 ; ---------------------------------------------------------------------------
.text:0000000000005322                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330 ; Attributes: info_from_lumina
.text:0000000000005330
.text:0000000000005330 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000005330                 cmp     cs:completed_7697, 0
.text:0000000000005337                 jnz     short locret_5368
.text:0000000000005339                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000005341                 push    rbp
.text:0000000000005342                 mov     rbp, rsp
.text:0000000000005345                 jz      short loc_5353
.text:0000000000005347                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000534E                 call    __cxa_finalize
.text:0000000000005353
.text:0000000000005353 loc_5353:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000005353                 call    deregister_tm_clones
.text:0000000000005358                 mov     cs:completed_7697, 1
.text:000000000000535F                 pop     rbp
.text:0000000000005360                 retn
.text:0000000000005360 ; ---------------------------------------------------------------------------
.text:0000000000005361                 align 8
.text:0000000000005368
.text:0000000000005368 locret_5368:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000005368                 rep retn
.text:0000000000005368 __do_global_dtors_aux endp
.text:0000000000005368
.text:0000000000005368 ; ---------------------------------------------------------------------------
.text:000000000000536A                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370 ; Attributes: bp-based frame
.text:0000000000005370
.text:0000000000005370 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000005370                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000005370                 push    rbp
.text:0000000000005371                 mov     rbp, rsp
.text:0000000000005374                 pop     rbp
.text:0000000000005375                 jmp     register_tm_clones
.text:0000000000005375 frame_dummy     endp
.text:0000000000005375
.text:0000000000005375 ; ---------------------------------------------------------------------------
.text:000000000000537A                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380 dev_ino_hash    proc near               ; DATA XREF: main+BEA↑o
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 mov     rax, [rdi]
.text:0000000000005383                 xor     edx, edx
.text:0000000000005385                 div     rsi
.text:0000000000005388                 mov     rax, rdx
.text:000000000000538B                 retn
.text:000000000000538B ; } // starts at 5380
.text:000000000000538B dev_ino_hash    endp
.text:000000000000538B
.text:000000000000538B ; ---------------------------------------------------------------------------
.text:000000000000538C                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390
.text:0000000000005390 dev_ino_compare proc near               ; DATA XREF: main+BE3↑o
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 xor     eax, eax
.text:0000000000005392                 mov     rdx, [rsi]
.text:0000000000005395                 cmp     [rdi], rdx
.text:0000000000005398                 jz      short loc_53A0
.text:000000000000539A                 rep retn
.text:000000000000539A ; ---------------------------------------------------------------------------
.text:000000000000539C                 align 20h
.text:00000000000053A0
.text:00000000000053A0 loc_53A0:                               ; CODE XREF: dev_ino_compare+8↑j
.text:00000000000053A0                 mov     rax, [rsi+8]
.text:00000000000053A4                 cmp     [rdi+8], rax
.text:00000000000053A8                 setz    al
.text:00000000000053AB                 retn
.text:00000000000053AB ; } // starts at 5390
.text:00000000000053AB dev_ino_compare endp
.text:00000000000053AB
.text:00000000000053AB ; ---------------------------------------------------------------------------
.text:00000000000053AC                 align 10h
.text:00000000000053B0
.text:00000000000053B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053B0
.text:00000000000053B0
.text:00000000000053B0 sighandler      proc near               ; DATA XREF: signal_setup+11B↓o
.text:00000000000053B0 ; __unwind {
.text:00000000000053B0                 mov     eax, cs:interrupt_signal
.text:00000000000053B6                 test    eax, eax
.text:00000000000053B8                 jnz     short locret_53C0
.text:00000000000053BA                 mov     cs:interrupt_signal, edi
.text:00000000000053C0
.text:00000000000053C0 locret_53C0:                            ; CODE XREF: sighandler+8↑j
.text:00000000000053C0                 rep retn
.text:00000000000053C0 ; } // starts at 53B0
.text:00000000000053C0 sighandler      endp
.text:00000000000053C0
.text:00000000000053C0 ; ---------------------------------------------------------------------------
.text:00000000000053C2                 align 10h
.text:00000000000053D0
.text:00000000000053D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053D0
.text:00000000000053D0
.text:00000000000053D0 ; void dev_ino_free(void *ptr)
.text:00000000000053D0 dev_ino_free    proc near               ; DATA XREF: main+BDC↑o
.text:00000000000053D0 ; __unwind {
.text:00000000000053D0                 jmp     free
.text:00000000000053D0 ; } // starts at 53D0
.text:00000000000053D0 dev_ino_free    endp
.text:00000000000053D0
.text:00000000000053D0 ; ---------------------------------------------------------------------------
.text:00000000000053D5                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; _Bool __fastcall get_funky_string(char **dest, const char **src, _Bool equals_end, size_t *output_count)
.text:00000000000053E0 get_funky_string proc near              ; CODE XREF: main+1762↑p
.text:00000000000053E0                                         ; main+184D↑p ...
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 mov     r8, [rsi]
.text:00000000000053E3                 mov     r9, [rdi]
.text:00000000000053E6                 lea     r11, jpt_54A1
.text:00000000000053ED                 push    r15
.text:00000000000053EF                 xor     r10d, r10d
.text:00000000000053F2                 push    r14
.text:00000000000053F4                 mov     eax, 1
.text:00000000000053F9                 push    r13
.text:00000000000053FB                 push    r12
.text:00000000000053FD                 mov     r12d, edx
.text:0000000000005400                 push    rbp
.text:0000000000005401                 mov     rbp, 7E000000000000h
.text:000000000000540B                 push    rbx
.text:000000000000540C                 mov     rbx, rcx
.text:000000000000540F
.text:000000000000540F loc_540F:                               ; CODE XREF: get_funky_string+9F↓j
.text:000000000000540F                                         ; get_funky_string+13F↓j ...
.text:000000000000540F                 movzx   ecx, byte ptr [r8]
.text:0000000000005413                 cmp     cl, 3Dh ; '='
.text:0000000000005416                 jz      short loc_5462
.text:0000000000005418                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: get_funky_string+80↓j
.text:0000000000005420                 jle     loc_54F8
.text:0000000000005426                 cmp     cl, 5Ch ; '\'
.text:0000000000005429                 jz      short loc_5488
.text:000000000000542B                 cmp     cl, 5Eh ; '^'
.text:000000000000542E                 jnz     short loc_5470
.text:0000000000005430                 movzx   ecx, byte ptr [r8+1]
.text:0000000000005435                 lea     r14, [r8+1]
.text:0000000000005439                 lea     r13d, [rcx-40h]
.text:000000000000543D                 cmp     r13b, 3Eh ; '>'
.text:0000000000005441                 ja      loc_54D8
.text:0000000000005447                 add     r8, 2
.text:000000000000544B                 and     ecx, 1Fh
.text:000000000000544E
.text:000000000000544E def_54A1:                               ; CODE XREF: get_funky_string+B4↓j
.text:000000000000544E                                         ; get_funky_string+C1↓j ...
.text:000000000000544E                 mov     [r9], cl        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005451                 movzx   ecx, byte ptr [r8]
.text:0000000000005455                 add     r10, 1
.text:0000000000005459                 add     r9, 1
.text:000000000000545D                 cmp     cl, 3Dh ; '='
.text:0000000000005460                 jnz     short loc_5420
.text:0000000000005462
.text:0000000000005462 loc_5462:                               ; CODE XREF: get_funky_string+36↑j
.text:0000000000005462                 test    r12b, r12b
.text:0000000000005465                 jz      short loc_5470
.text:0000000000005467                 mov     eax, edx
.text:0000000000005469                 mov     r14, r8
.text:000000000000546C                 jmp     short loc_54DF
.text:000000000000546C ; ---------------------------------------------------------------------------
.text:000000000000546E                 align 10h
.text:0000000000005470
.text:0000000000005470 loc_5470:                               ; CODE XREF: get_funky_string+4E↑j
.text:0000000000005470                                         ; get_funky_string+85↑j ...
.text:0000000000005470                 mov     [r9], cl
.text:0000000000005473                 add     r8, 1
.text:0000000000005477                 add     r10, 1
.text:000000000000547B                 add     r9, 1
.text:000000000000547F                 jmp     short loc_540F
.text:000000000000547F ; ---------------------------------------------------------------------------
.text:0000000000005481                 align 8
.text:0000000000005488
.text:0000000000005488 loc_5488:                               ; CODE XREF: get_funky_string+49↑j
.text:0000000000005488                 movzx   ecx, byte ptr [r8+1]
.text:000000000000548D                 add     r8, 2
.text:0000000000005491                 cmp     cl, 78h         ; switch 121 cases
.text:0000000000005494                 ja      short def_54A1  ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005496                 movzx   r13d, cl
.text:000000000000549A                 movsxd  r13, ds:(jpt_54A1 - 15F80h)[r11+r13*4]
.text:000000000000549E                 add     r13, r11
.text:00000000000054A1                 jmp     r13             ; switch jump
.text:00000000000054A1 ; ---------------------------------------------------------------------------
.text:00000000000054A4                 align 8
.text:00000000000054A8
.text:00000000000054A8 loc_54A8:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000054A8                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000054A8                 movzx   r13d, byte ptr [r8] ; jumptable 0000000000005A81 cases 48-55
.text:00000000000054AC                 sub     ecx, 30h ; '0'
.text:00000000000054AF                 lea     r14d, [r13-30h]
.text:00000000000054B3                 cmp     r14b, 7
.text:00000000000054B7                 ja      short def_54A1  ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000054B9
.text:00000000000054B9 loc_54B9:                               ; CODE XREF: get_funky_string+EE↓j
.text:00000000000054B9                 add     r8, 1
.text:00000000000054BD                 lea     ecx, [r13+rcx*8-30h]
.text:00000000000054C2                 movzx   r13d, byte ptr [r8]
.text:00000000000054C6                 lea     r14d, [r13-30h]
.text:00000000000054CA                 cmp     r14b, 7
.text:00000000000054CE                 jbe     short loc_54B9
.text:00000000000054D0                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000054D0 ; ---------------------------------------------------------------------------
.text:00000000000054D5                 align 8
.text:00000000000054D8
.text:00000000000054D8 loc_54D8:                               ; CODE XREF: get_funky_string+61↑j
.text:00000000000054D8                 cmp     cl, 3Fh ; '?'
.text:00000000000054DB                 jz      short loc_5510
.text:00000000000054DD                 xor     eax, eax
.text:00000000000054DF
.text:00000000000054DF loc_54DF:                               ; CODE XREF: get_funky_string+8C↑j
.text:00000000000054DF                                         ; get_funky_string+12D↓j ...
.text:00000000000054DF                 mov     [rdi], r9
.text:00000000000054E2                 mov     [rsi], r14
.text:00000000000054E5                 mov     [rbx], r10
.text:00000000000054E8                 pop     rbx
.text:00000000000054E9                 pop     rbp
.text:00000000000054EA                 pop     r12
.text:00000000000054EC                 pop     r13
.text:00000000000054EE                 pop     r14
.text:00000000000054F0                 pop     r15
.text:00000000000054F2                 retn
.text:00000000000054F2 ; ---------------------------------------------------------------------------
.text:00000000000054F3                 align 8
.text:00000000000054F8
.text:00000000000054F8 loc_54F8:                               ; CODE XREF: get_funky_string:loc_5420↑j
.text:00000000000054F8                 test    cl, cl
.text:00000000000054FA                 jz      short loc_5505
.text:00000000000054FC                 cmp     cl, 3Ah ; ':'
.text:00000000000054FF                 jnz     loc_5470
.text:0000000000005505
.text:0000000000005505 loc_5505:                               ; CODE XREF: get_funky_string+11A↑j
.text:0000000000005505                 mov     r14, r8
.text:0000000000005508                 mov     eax, 1
.text:000000000000550D                 jmp     short loc_54DF
.text:000000000000550D ; ---------------------------------------------------------------------------
.text:000000000000550F                 align 10h
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: get_funky_string+FB↑j
.text:0000000000005510                 mov     byte ptr [r9], 7Fh
.text:0000000000005514                 add     r10, 1
.text:0000000000005518                 add     r9, 1
.text:000000000000551C                 mov     r8, r14
.text:000000000000551F                 jmp     loc_540F
.text:000000000000551F ; ---------------------------------------------------------------------------
.text:0000000000005524                 align 8
.text:0000000000005528
.text:0000000000005528 loc_5528:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005528                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005528                 mov     ecx, 1Bh        ; jumptable 0000000000005A81 case 101
.text:000000000000552D                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:000000000000552D ; ---------------------------------------------------------------------------
.text:0000000000005532                 align 8
.text:0000000000005538
.text:0000000000005538 loc_5538:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005538                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005538                 mov     r14, r8         ; jumptable 0000000000005A81 case 0
.text:000000000000553B                 xor     eax, eax
.text:000000000000553D                 jmp     short loc_54DF
.text:000000000000553D ; ---------------------------------------------------------------------------
.text:000000000000553F                 align 20h
.text:0000000000005540
.text:0000000000005540 loc_5540:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005540                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005540                 xor     r14d, r14d      ; jumptable 0000000000005A81 cases 88,120
.text:0000000000005543                 nop     dword ptr [rax+rax+00h]
.text:0000000000005548
.text:0000000000005548 loc_5548:                               ; CODE XREF: get_funky_string+26D↓j
.text:0000000000005548                                         ; get_funky_string+285↓j
.text:0000000000005548                 movzx   r13d, byte ptr [r8]
.text:000000000000554C                 lea     ecx, [r13-30h]
.text:0000000000005550                 cmp     cl, 36h ; '6'
.text:0000000000005553                 ja      short loc_5598
.text:0000000000005555
.text:0000000000005555 loc_5555:                               ; CODE XREF: get_funky_string+1B2↓j
.text:0000000000005555                 mov     r15, rax
.text:0000000000005558                 shl     r15, cl
.text:000000000000555B                 test    r15d, 7E0000h
.text:0000000000005562                 jnz     loc_5640
.text:0000000000005568                 test    r15, rbp
.text:000000000000556B                 jnz     loc_5658
.text:0000000000005571                 test    r15d, 3FFh
.text:0000000000005578                 jz      short loc_5598
.text:000000000000557A                 add     r8, 1
.text:000000000000557E                 shl     r14d, 4
.text:0000000000005582                 lea     r14d, [r13+r14-30h]
.text:0000000000005587                 movzx   r13d, byte ptr [r8]
.text:000000000000558B                 lea     ecx, [r13-30h]
.text:000000000000558F                 cmp     cl, 36h ; '6'
.text:0000000000005592                 jbe     short loc_5555
.text:0000000000005594                 nop     dword ptr [rax+00h]
.text:0000000000005598
.text:0000000000005598 loc_5598:                               ; CODE XREF: get_funky_string+173↑j
.text:0000000000005598                                         ; get_funky_string+198↑j
.text:0000000000005598                 mov     [r9], r14b
.text:000000000000559B                 add     r10, 1
.text:000000000000559F                 add     r9, 1
.text:00000000000055A3                 jmp     loc_540F
.text:00000000000055A3 ; ---------------------------------------------------------------------------
.text:00000000000055A8                 align 10h
.text:00000000000055B0
.text:00000000000055B0 loc_55B0:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000055B0                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000055B0                 mov     ecx, 20h ; ' '  ; jumptable 0000000000005A81 case 95
.text:00000000000055B5                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000055B5 ; ---------------------------------------------------------------------------
.text:00000000000055BA                 align 20h
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000055C0                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000055C0                 mov     ecx, 7          ; jumptable 0000000000005A81 case 97
.text:00000000000055C5                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000055C5 ; ---------------------------------------------------------------------------
.text:00000000000055CA                 align 10h
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000055D0                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000055D0                 mov     ecx, 0Bh        ; jumptable 0000000000005A81 case 118
.text:00000000000055D5                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000055D5 ; ---------------------------------------------------------------------------
.text:00000000000055DA                 align 20h
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000055E0                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000055E0                 mov     ecx, 7Fh        ; jumptable 0000000000005A81 case 63
.text:00000000000055E5                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000055E5 ; ---------------------------------------------------------------------------
.text:00000000000055EA                 align 10h
.text:00000000000055F0
.text:00000000000055F0 loc_55F0:                               ; CODE XREF: get_funky_string+C1↑j
.text:00000000000055F0                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:00000000000055F0                 mov     ecx, 8          ; jumptable 0000000000005A81 case 98
.text:00000000000055F5                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:00000000000055F5 ; ---------------------------------------------------------------------------
.text:00000000000055FA                 align 20h
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005600                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005600                 mov     ecx, 0Ch        ; jumptable 0000000000005A81 case 102
.text:0000000000005605                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005605 ; ---------------------------------------------------------------------------
.text:000000000000560A                 align 10h
.text:0000000000005610
.text:0000000000005610 loc_5610:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005610                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005610                 mov     ecx, 0Ah        ; jumptable 0000000000005A81 case 110
.text:0000000000005615                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005615 ; ---------------------------------------------------------------------------
.text:000000000000561A                 align 20h
.text:0000000000005620
.text:0000000000005620 loc_5620:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005620                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005620                 mov     ecx, 0Dh        ; jumptable 0000000000005A81 case 114
.text:0000000000005625                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005625 ; ---------------------------------------------------------------------------
.text:000000000000562A                 align 10h
.text:0000000000005630
.text:0000000000005630 loc_5630:                               ; CODE XREF: get_funky_string+C1↑j
.text:0000000000005630                                         ; DATA XREF: .rodata:jpt_54A1↓o
.text:0000000000005630                 mov     ecx, 9          ; jumptable 0000000000005A81 case 116
.text:0000000000005635                 jmp     def_54A1        ; jumptable 0000000000005A81 default case, cases 1-47,56-62,64-87,89-94,96,99,100,103-109,111-113,115,117,119
.text:0000000000005635 ; ---------------------------------------------------------------------------
.text:000000000000563A                 align 20h
.text:0000000000005640
.text:0000000000005640 loc_5640:                               ; CODE XREF: get_funky_string+182↑j
.text:0000000000005640                 shl     r14d, 4
.text:0000000000005644                 add     r8, 1
.text:0000000000005648                 lea     r14d, [r13+r14-37h]
.text:000000000000564D                 jmp     loc_5548
.text:000000000000564D ; ---------------------------------------------------------------------------
.text:0000000000005652                 align 8
.text:0000000000005658
.text:0000000000005658 loc_5658:                               ; CODE XREF: get_funky_string+18B↑j
.text:0000000000005658                 shl     r14d, 4
.text:000000000000565C                 add     r8, 1
.text:0000000000005660                 lea     r14d, [r13+r14-57h]
.text:0000000000005665                 jmp     loc_5548
.text:0000000000005665 ; } // starts at 53E0
.text:0000000000005665 get_funky_string endp
.text:0000000000005665
.text:0000000000005665 ; ---------------------------------------------------------------------------
.text:000000000000566A                 align 10h
.text:0000000000005670
.text:0000000000005670 ; =============== S U B R O U T I N E =======================================
.text:0000000000005670
.text:0000000000005670
.text:0000000000005670 is_colored      proc near               ; CODE XREF: main+1321↑p
.text:0000000000005670                                         ; main+1333↑p ...
.text:0000000000005670 ; __unwind {
.text:0000000000005670                 lea     rax, color_indicator
.text:0000000000005677                 mov     edi, edi
.text:0000000000005679                 shl     rdi, 4
.text:000000000000567D                 add     rdi, rax
.text:0000000000005680                 xor     eax, eax
.text:0000000000005682                 mov     rdx, [rdi]
.text:0000000000005685                 test    rdx, rdx
.text:0000000000005688                 jz      short locret_56B7
.text:000000000000568A                 cmp     rdx, 1
.text:000000000000568E                 mov     rsi, [rdi+8]
.text:0000000000005692                 jz      short loc_56C0
.text:0000000000005694                 cmp     rdx, 2
.text:0000000000005698                 mov     eax, 1
.text:000000000000569D                 jnz     short locret_56B7
.text:000000000000569F                 lea     rdi, a00        ; "00"
.text:00000000000056A6                 mov     ecx, 2
.text:00000000000056AB                 repe cmpsb
.text:00000000000056AD                 setnbe  al
.text:00000000000056B0                 sbb     al, 0
.text:00000000000056B2                 test    al, al
.text:00000000000056B4                 setnz   al
.text:00000000000056B7
.text:00000000000056B7 locret_56B7:                            ; CODE XREF: is_colored+18↑j
.text:00000000000056B7                                         ; is_colored+2D↑j
.text:00000000000056B7                 rep retn
.text:00000000000056B7 ; ---------------------------------------------------------------------------
.text:00000000000056B9                 align 20h
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: is_colored+22↑j
.text:00000000000056C0                 cmp     byte ptr [rsi], 30h ; '0'
.text:00000000000056C3                 setnz   al
.text:00000000000056C6                 retn
.text:00000000000056C6 ; } // starts at 5670
.text:00000000000056C6 is_colored      endp
.text:00000000000056C6
.text:00000000000056C6 ; ---------------------------------------------------------------------------
.text:00000000000056C7                 align 10h
.text:00000000000056D0
.text:00000000000056D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056D0
.text:00000000000056D0 ; Attributes: info_from_lumina
.text:00000000000056D0
.text:00000000000056D0 ; _Bool __fastcall set_line_length(const char *spec)
.text:00000000000056D0 set_line_length proc near               ; CODE XREF: main+941↑p
.text:00000000000056D0                                         ; main+EB0↑p
.text:00000000000056D0
.text:00000000000056D0 var_18          = qword ptr -18h
.text:00000000000056D0 var_10          = qword ptr -10h
.text:00000000000056D0
.text:00000000000056D0 ; __unwind {
.text:00000000000056D0                 sub     rsp, 18h
.text:00000000000056D4                 lea     r8, a8+6        ; ""
.text:00000000000056DB                 xor     edx, edx
.text:00000000000056DD                 xor     esi, esi
.text:00000000000056DF                 mov     rcx, rsp
.text:00000000000056E2                 mov     rax, fs:28h
.text:00000000000056EB                 mov     [rsp+18h+var_10], rax
.text:00000000000056F0                 xor     eax, eax
.text:00000000000056F2                 call    xstrtoumax
.text:00000000000056F7                 test    eax, eax
.text:00000000000056F9                 jz      short loc_5738
.text:00000000000056FB                 cmp     eax, 1
.text:00000000000056FE                 jz      short loc_5720
.text:0000000000005700                 xor     eax, eax
.text:0000000000005702
.text:0000000000005702 loc_5702:                               ; CODE XREF: set_line_length+60↓j
.text:0000000000005702                                         ; set_line_length+78↓j
.text:0000000000005702                 mov     rdx, [rsp+18h+var_10]
.text:0000000000005707                 xor     rdx, fs:28h
.text:0000000000005710                 jnz     short loc_574A
.text:0000000000005712                 add     rsp, 18h
.text:0000000000005716                 retn
.text:0000000000005716 ; ---------------------------------------------------------------------------
.text:0000000000005717                 align 20h
.text:0000000000005720
.text:0000000000005720 loc_5720:                               ; CODE XREF: set_line_length+2E↑j
.text:0000000000005720                 mov     cs:line_length, 0FFFFFFFFFFFFFFFFh
.text:000000000000572B                 mov     eax, 1
.text:0000000000005730                 jmp     short loc_5702
.text:0000000000005730 ; ---------------------------------------------------------------------------
.text:0000000000005732                 align 8
.text:0000000000005738
.text:0000000000005738 loc_5738:                               ; CODE XREF: set_line_length+29↑j
.text:0000000000005738                 mov     rax, [rsp+18h+var_18]
.text:000000000000573C                 mov     cs:line_length, rax
.text:0000000000005743                 mov     eax, 1
.text:0000000000005748                 jmp     short loc_5702
.text:000000000000574A ; ---------------------------------------------------------------------------
.text:000000000000574A
.text:000000000000574A loc_574A:                               ; CODE XREF: set_line_length+40↑j
.text:000000000000574A                 call    ___stack_chk_fail
.text:000000000000574A ; } // starts at 56D0
.text:000000000000574A set_line_length endp
.text:000000000000574A
.text:000000000000574A ; ---------------------------------------------------------------------------
.text:000000000000574F                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750
.text:0000000000005750 abformat_init   proc near               ; CODE XREF: main:loc_4CF1↑p
.text:0000000000005750
.text:0000000000005750 var_688         = qword ptr -688h
.text:0000000000005750 dest            = qword ptr -680h
.text:0000000000005750 var_678         = qword ptr -678h
.text:0000000000005750 var_670         = qword ptr -670h
.text:0000000000005750 var_660         = qword ptr -660h
.text:0000000000005750 var_658         = qword ptr -658h
.text:0000000000005750 var_650         = qword ptr -650h
.text:0000000000005750 var_648         = byte ptr -648h
.text:0000000000005750 var_40          = qword ptr -40h
.text:0000000000005750
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 push    r15
.text:0000000000005752                 push    r14
.text:0000000000005754                 xor     esi, esi
.text:0000000000005756                 push    r13
.text:0000000000005758                 push    r12
.text:000000000000575A                 push    rbp
.text:000000000000575B                 push    rbx
.text:000000000000575C                 sub     rsp, 658h
.text:0000000000005763                 lea     rdi, [rsp+688h+var_658]
.text:0000000000005768                 mov     rax, fs:28h
.text:0000000000005771                 mov     [rsp+688h+var_40], rax
.text:0000000000005779                 xor     eax, eax
.text:000000000000577B                 mov     [rsp+688h+var_678], rdi
.text:0000000000005780
.text:0000000000005780 loc_5780:                               ; CODE XREF: abformat_init+7A↓j
.text:0000000000005780                 lea     rax, long_time_format
.text:0000000000005787                 mov     rax, [rax+rsi]
.text:000000000000578B                 movzx   edx, byte ptr [rax]
.text:000000000000578E                 test    dl, dl
.text:0000000000005790                 jz      short loc_57AB
.text:0000000000005792                 nop     word ptr [rax+rax+00h]
.text:0000000000005798
.text:0000000000005798 loc_5798:                               ; CODE XREF: abformat_init+59↓j
.text:0000000000005798                 cmp     dl, 25h ; '%'
.text:000000000000579B                 movzx   ecx, byte ptr [rax+1]
.text:000000000000579F                 jz      short loc_57B0
.text:00000000000057A1
.text:00000000000057A1 loc_57A1:                               ; CODE XREF: abformat_init+6C↓j
.text:00000000000057A1                 mov     edx, ecx
.text:00000000000057A3
.text:00000000000057A3 loc_57A3:                               ; CODE XREF: abformat_init+148↓j
.text:00000000000057A3                 add     rax, 1
.text:00000000000057A7                 test    dl, dl
.text:00000000000057A9                 jnz     short loc_5798
.text:00000000000057AB
.text:00000000000057AB loc_57AB:                               ; CODE XREF: abformat_init+40↑j
.text:00000000000057AB                 xor     eax, eax
.text:00000000000057AD                 jmp     short loc_57BE
.text:00000000000057AD ; ---------------------------------------------------------------------------
.text:00000000000057AF                 align 10h
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: abformat_init+4F↑j
.text:00000000000057B0                 cmp     cl, 25h ; '%'
.text:00000000000057B3                 jz      loc_5890
.text:00000000000057B9                 cmp     cl, 62h ; 'b'
.text:00000000000057BC                 jnz     short loc_57A1
.text:00000000000057BE
.text:00000000000057BE loc_57BE:                               ; CODE XREF: abformat_init+5D↑j
.text:00000000000057BE                 mov     [rdi+rsi], rax
.text:00000000000057C2                 add     rsi, 8
.text:00000000000057C6                 cmp     rsi, 10h
.text:00000000000057CA                 jnz     short loc_5780
.text:00000000000057CC                 cmp     [rsp+688h+var_658], 0
.text:00000000000057D2                 mov     r13d, 0Ch
.text:00000000000057D8                 jz      loc_58E1
.text:00000000000057DE
.text:00000000000057DE loc_57DE:                               ; CODE XREF: abformat_init+197↓j
.text:00000000000057DE                 lea     rax, [rsp+688h+var_648]
.text:00000000000057E3                 mov     [rsp+688h+dest], rax
.text:00000000000057E8                 lea     rax, [rsp+688h+var_660]
.text:00000000000057ED                 mov     [rsp+688h+var_688], rax
.text:00000000000057F1
.text:00000000000057F1 loc_57F1:                               ; CODE XREF: abformat_init+135↓j
.text:00000000000057F1                 mov     r15, [rsp+688h+dest]
.text:00000000000057F6                 mov     r12d, 2000Eh
.text:00000000000057FC                 xor     ebp, ebp
.text:00000000000057FE                 lea     r14, [r15+600h]
.text:0000000000005805                 nop     dword ptr [rax]
.text:0000000000005808
.text:0000000000005808 loc_5808:                               ; CODE XREF: abformat_init+12B↓j
.text:0000000000005808                 mov     edi, r12d       ; item
.text:000000000000580B                 mov     [rsp+688h+var_660], r13
.text:0000000000005810                 call    _nl_langinfo
.text:0000000000005815                 mov     esi, 25h ; '%'  ; c
.text:000000000000581A                 mov     rdi, rax        ; s
.text:000000000000581D                 mov     rbx, rax
.text:0000000000005820                 call    _strchr
.text:0000000000005825                 test    rax, rax
.text:0000000000005828                 jnz     loc_58B8
.text:000000000000582E                 call    ___ctype_b_loc
.text:0000000000005833                 movzx   edx, byte ptr [rbx]
.text:0000000000005836                 mov     rax, [rax]
.text:0000000000005839                 xor     r9d, r9d
.text:000000000000583C                 mov     rcx, [rsp+688h+var_688]
.text:0000000000005840                 mov     rsi, r15        ; dest
.text:0000000000005843                 mov     rdi, rbx        ; s
.text:0000000000005846                 movzx   r8d, word ptr [rax+rdx*2]
.text:000000000000584B                 mov     edx, 80h
.text:0000000000005850                 shr     r8w, 0Bh
.text:0000000000005855                 and     r8d, 1
.text:0000000000005859                 call    mbsalign
.text:000000000000585E                 cmp     rax, 7Fh
.text:0000000000005862                 ja      short loc_58B8
.text:0000000000005864                 mov     rax, [rsp+688h+var_660]
.text:0000000000005869                 cmp     rbp, rax
.text:000000000000586C                 cmovb   rbp, rax
.text:0000000000005870                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000005874                 add     r12d, 1
.text:0000000000005878                 cmp     r15, r14
.text:000000000000587B                 jnz     short loc_5808
.text:000000000000587D                 cmp     r13, rbp
.text:0000000000005880                 jbe     short loc_58EF
.text:0000000000005882                 mov     r13, rbp
.text:0000000000005885                 jmp     loc_57F1
.text:0000000000005885 ; ---------------------------------------------------------------------------
.text:000000000000588A                 align 10h
.text:0000000000005890
.text:0000000000005890 loc_5890:                               ; CODE XREF: abformat_init+63↑j
.text:0000000000005890                 movzx   edx, byte ptr [rax+2]
.text:0000000000005894                 add     rax, 1
.text:0000000000005898                 jmp     loc_57A3
.text:000000000000589D ; ---------------------------------------------------------------------------
.text:000000000000589D
.text:000000000000589D loc_589D:                               ; CODE XREF: abformat_init+246↓j
.text:000000000000589D                 mov     r13, [rsp+688h+var_688]
.text:00000000000058A1                 add     r13, 8
.text:00000000000058A5                 cmp     r13, 10h
.text:00000000000058A9                 jnz     short loc_58F7
.text:00000000000058AB                 mov     cs:use_abformat, 1
.text:00000000000058B2                 nop     word ptr [rax+rax+00h]
.text:00000000000058B8
.text:00000000000058B8 loc_58B8:                               ; CODE XREF: abformat_init+D8↑j
.text:00000000000058B8                                         ; abformat_init+112↑j ...
.text:00000000000058B8                 mov     rax, [rsp+688h+var_40]
.text:00000000000058C0                 xor     rax, fs:28h
.text:00000000000058C9                 jnz     loc_59BC
.text:00000000000058CF                 add     rsp, 658h
.text:00000000000058D6                 pop     rbx
.text:00000000000058D7                 pop     rbp
.text:00000000000058D8                 pop     r12
.text:00000000000058DA                 pop     r13
.text:00000000000058DC                 pop     r14
.text:00000000000058DE                 pop     r15
.text:00000000000058E0                 retn
.text:00000000000058E1 ; ---------------------------------------------------------------------------
.text:00000000000058E1
.text:00000000000058E1 loc_58E1:                               ; CODE XREF: abformat_init+88↑j
.text:00000000000058E1                 cmp     [rsp+688h+var_650], 0
.text:00000000000058E7                 jnz     loc_57DE
.text:00000000000058ED                 jmp     short loc_58B8
.text:00000000000058EF ; ---------------------------------------------------------------------------
.text:00000000000058EF
.text:00000000000058EF loc_58EF:                               ; CODE XREF: abformat_init+130↑j
.text:00000000000058EF                 xor     r13d, r13d
.text:00000000000058F2                 mov     [rsp+688h+var_670], r15
.text:00000000000058F7
.text:00000000000058F7 loc_58F7:                               ; CODE XREF: abformat_init+159↑j
.text:00000000000058F7                 lea     rax, long_time_format
.text:00000000000058FE                 mov     [rsp+688h+var_688], r13
.text:0000000000005902                 mov     rbx, [rsp+688h+dest]
.text:0000000000005907                 imul    r10, r13, 0C0h
.text:000000000000590E                 mov     r12, [rax+r13]
.text:0000000000005912                 mov     rax, [rsp+688h+var_678]
.text:0000000000005917                 mov     r14, [rax+r13]
.text:000000000000591B                 lea     rax, abformat
.text:0000000000005922                 lea     r15, [rax+r10]
.text:0000000000005926                 mov     rbp, r14
.text:0000000000005929                 mov     r13, r14
.text:000000000000592C                 mov     r14, [rsp+688h+var_670]
.text:0000000000005931                 sub     rbp, r12
.text:0000000000005934                 jmp     short loc_599C
.text:0000000000005934 ; ---------------------------------------------------------------------------
.text:0000000000005936                 align 20h
.text:0000000000005940
.text:0000000000005940 loc_5940:                               ; CODE XREF: abformat_init+24F↓j
.text:0000000000005940                 cmp     rbp, 80h
.text:0000000000005947                 jg      loc_58B8
.text:000000000000594D                 lea     rax, [r13+2]
.text:0000000000005951                 sub     rsp, 8
.text:0000000000005955                 lea     r8, aSSS        ; "%.*s%s%s"
.text:000000000000595C                 mov     r9d, ebp
.text:000000000000595F                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005966                 mov     edx, 1
.text:000000000000596B                 push    rax
.text:000000000000596C                 push    rbx
.text:000000000000596D                 mov     esi, 80h
.text:0000000000005972                 push    r12
.text:0000000000005974                 mov     rdi, r15
.text:0000000000005977                 xor     eax, eax
.text:0000000000005979                 call    ___snprintf_chk
.text:000000000000597E                 add     rsp, 20h
.text:0000000000005982
.text:0000000000005982 loc_5982:                               ; CODE XREF: abformat_init+26A↓j
.text:0000000000005982                 cmp     eax, 7Fh
.text:0000000000005985                 ja      loc_58B8
.text:000000000000598B                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:000000000000598F                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000005993                 cmp     rbx, r14
.text:0000000000005996                 jz      loc_589D
.text:000000000000599C
.text:000000000000599C loc_599C:                               ; CODE XREF: abformat_init+1E4↑j
.text:000000000000599C                 test    r13, r13
.text:000000000000599F                 jnz     short loc_5940
.text:00000000000059A1                 lea     rdx, aS_1+2     ; format
.text:00000000000059A8                 mov     rcx, r12
.text:00000000000059AB                 mov     esi, 80h        ; maxlen
.text:00000000000059B0                 mov     rdi, r15        ; s
.text:00000000000059B3                 xor     eax, eax
.text:00000000000059B5                 call    _snprintf
.text:00000000000059BA                 jmp     short loc_5982
.text:00000000000059BC ; ---------------------------------------------------------------------------
.text:00000000000059BC
.text:00000000000059BC loc_59BC:                               ; CODE XREF: abformat_init+179↑j
.text:00000000000059BC                 call    ___stack_chk_fail
.text:00000000000059BC ; } // starts at 5750
.text:00000000000059BC abformat_init   endp
.text:00000000000059BC
.text:00000000000059BC ; ---------------------------------------------------------------------------
.text:00000000000059C1                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0 ; Attributes: info_from_lumina
.text:00000000000059D0
.text:00000000000059D0 ; void __fastcall queue_directory(const char *name, const char *realname, _Bool command_line_arg)
.text:00000000000059D0 queue_directory proc near               ; CODE XREF: main+1010↑p
.text:00000000000059D0                                         ; extract_dirs_from_files+2B↓p ...
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 push    r13
.text:00000000000059D2                 push    r12
.text:00000000000059D4                 mov     r12, rsi
.text:00000000000059D7                 push    rbp
.text:00000000000059D8                 push    rbx
.text:00000000000059D9                 mov     rbp, rdi
.text:00000000000059DC                 mov     edi, 20h ; ' '
.text:00000000000059E1                 mov     r13d, edx
.text:00000000000059E4                 sub     rsp, 8
.text:00000000000059E8                 call    xmalloc
.text:00000000000059ED                 mov     rbx, rax
.text:00000000000059F0                 xor     eax, eax
.text:00000000000059F2                 test    r12, r12
.text:00000000000059F5                 jz      short loc_59FF
.text:00000000000059F7                 mov     rdi, r12        ; src
.text:00000000000059FA                 call    xstrdup
.text:00000000000059FF
.text:00000000000059FF loc_59FF:                               ; CODE XREF: queue_directory+25↑j
.text:00000000000059FF                 mov     [rbx+8], rax
.text:0000000000005A03                 xor     eax, eax
.text:0000000000005A05                 test    rbp, rbp
.text:0000000000005A08                 jz      short loc_5A12
.text:0000000000005A0A                 mov     rdi, rbp        ; src
.text:0000000000005A0D                 call    xstrdup
.text:0000000000005A12
.text:0000000000005A12 loc_5A12:                               ; CODE XREF: queue_directory+38↑j
.text:0000000000005A12                 mov     [rbx], rax
.text:0000000000005A15                 mov     rax, cs:pending_dirs
.text:0000000000005A1C                 mov     [rbx+10h], r13b
.text:0000000000005A20                 mov     cs:pending_dirs, rbx
.text:0000000000005A27                 mov     [rbx+18h], rax
.text:0000000000005A2B                 add     rsp, 8
.text:0000000000005A2F                 pop     rbx
.text:0000000000005A30                 pop     rbp
.text:0000000000005A31                 pop     r12
.text:0000000000005A33                 pop     r13
.text:0000000000005A35                 retn
.text:0000000000005A35 ; } // starts at 59D0
.text:0000000000005A35 queue_directory endp
.text:0000000000005A35
.text:0000000000005A35 ; ---------------------------------------------------------------------------
.text:0000000000005A36                 align 20h
.text:0000000000005A40
.text:0000000000005A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A40
.text:0000000000005A40 ; Attributes: info_from_lumina
.text:0000000000005A40
.text:0000000000005A40 ; int __fastcall strcmp_size(V a, V b)
.text:0000000000005A40 strcmp_size     proc near               ; DATA XREF: .data.rel.ro:000000000021F100↓o
.text:0000000000005A40 ; __unwind {
.text:0000000000005A40                 mov     rax, [rsi+48h]
.text:0000000000005A44                 cmp     [rdi+48h], rax
.text:0000000000005A48                 jg      short loc_5A70
.text:0000000000005A4A                 jl      short loc_5A60
.text:0000000000005A4C                 mov     rsi, [rsi]      ; s2
.text:0000000000005A4F                 mov     rdi, [rdi]      ; s1
.text:0000000000005A52                 jmp     _strcmp
.text:0000000000005A52 ; ---------------------------------------------------------------------------
.text:0000000000005A57                 align 20h
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: strcmp_size+A↑j
.text:0000000000005A60                 mov     eax, 1
.text:0000000000005A65                 retn
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A66                 align 10h
.text:0000000000005A70
.text:0000000000005A70 loc_5A70:                               ; CODE XREF: strcmp_size+8↑j
.text:0000000000005A70                 mov     eax, 0FFFFFFFFh
.text:0000000000005A75                 retn
.text:0000000000005A75 ; } // starts at 5A40
.text:0000000000005A75 strcmp_size     endp
.text:0000000000005A75
.text:0000000000005A75 ; ---------------------------------------------------------------------------
.text:0000000000005A76                 align 20h
.text:0000000000005A80
.text:0000000000005A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A80
.text:0000000000005A80 ; Attributes: info_from_lumina
.text:0000000000005A80
.text:0000000000005A80 ; int __fastcall rev_strcmp_size(V a, V b)
.text:0000000000005A80 rev_strcmp_size proc near               ; DATA XREF: .data.rel.ro:000000000021F110↓o
.text:0000000000005A80 ; __unwind {
.text:0000000000005A80                 mov     rdx, [rdi+48h]
.text:0000000000005A84                 cmp     [rsi+48h], rdx
.text:0000000000005A88                 mov     rax, rsi
.text:0000000000005A8B                 jg      short loc_5AB0
.text:0000000000005A8D                 jl      short loc_5AA0
.text:0000000000005A8F                 mov     rsi, [rdi]      ; s2
.text:0000000000005A92                 mov     rdi, [rax]      ; s1
.text:0000000000005A95                 jmp     _strcmp
.text:0000000000005A95 ; ---------------------------------------------------------------------------
.text:0000000000005A9A                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 loc_5AA0:                               ; CODE XREF: rev_strcmp_size+D↑j
.text:0000000000005AA0                 mov     eax, 1
.text:0000000000005AA5                 retn
.text:0000000000005AA5 ; ---------------------------------------------------------------------------
.text:0000000000005AA6                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: rev_strcmp_size+B↑j
.text:0000000000005AB0                 mov     eax, 0FFFFFFFFh
.text:0000000000005AB5                 retn
.text:0000000000005AB5 ; } // starts at 5A80
.text:0000000000005AB5 rev_strcmp_size endp
.text:0000000000005AB5
.text:0000000000005AB5 ; ---------------------------------------------------------------------------
.text:0000000000005AB6                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0
.text:0000000000005AC0 strcmp_name     proc near               ; DATA XREF: .data.rel.ro:000000000021F080↓o
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 mov     rsi, [rsi]      ; s2
.text:0000000000005AC3                 mov     rdi, [rdi]      ; s1
.text:0000000000005AC6                 jmp     _strcmp
.text:0000000000005AC6 ; } // starts at 5AC0
.text:0000000000005AC6 strcmp_name     endp
.text:0000000000005AC6
.text:0000000000005AC6 ; ---------------------------------------------------------------------------
.text:0000000000005ACB                 align 10h
.text:0000000000005AD0
.text:0000000000005AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AD0
.text:0000000000005AD0
.text:0000000000005AD0 rev_strcmp_name proc near               ; DATA XREF: .data.rel.ro:000000000021F090↓o
.text:0000000000005AD0 ; __unwind {
.text:0000000000005AD0                 mov     rax, rsi
.text:0000000000005AD3                 mov     rsi, [rdi]      ; s2
.text:0000000000005AD6                 mov     rdi, [rax]      ; s1
.text:0000000000005AD9                 jmp     _strcmp
.text:0000000000005AD9 ; } // starts at 5AD0
.text:0000000000005AD9 rev_strcmp_name endp
.text:0000000000005AD9
.text:0000000000005AD9 ; ---------------------------------------------------------------------------
.text:0000000000005ADE                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0 ; Attributes: info_from_lumina
.text:0000000000005AE0
.text:0000000000005AE0 ; _Bool __fastcall needs_quoting(const char *name)
.text:0000000000005AE0 needs_quoting   proc near               ; CODE XREF: gobble_file_constprop_52+7F7↓p
.text:0000000000005AE0                                         ; gobble_file_constprop_52+D04↓p
.text:0000000000005AE0
.text:0000000000005AE0 var_22          = byte ptr -22h
.text:0000000000005AE0 var_20          = qword ptr -20h
.text:0000000000005AE0
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 push    rbp
.text:0000000000005AE1                 push    rbx
.text:0000000000005AE2                 mov     rbx, rdi
.text:0000000000005AE5                 mov     rdx, rbx
.text:0000000000005AE8                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AEF                 mov     esi, 2
.text:0000000000005AF4                 sub     rsp, 18h
.text:0000000000005AF8                 mov     r8, cs:filename_quoting_options
.text:0000000000005AFF                 lea     rdi, [rsp+28h+var_22]
.text:0000000000005B04                 mov     rax, fs:28h
.text:0000000000005B0D                 mov     [rsp+28h+var_20], rax
.text:0000000000005B12                 xor     eax, eax
.text:0000000000005B14                 call    quotearg_buffer
.text:0000000000005B19                 movzx   edx, [rsp+28h+var_22]
.text:0000000000005B1E                 cmp     [rbx], dl
.text:0000000000005B20                 jz      short loc_5B40
.text:0000000000005B22                 mov     eax, 1
.text:0000000000005B27
.text:0000000000005B27 loc_5B27:                               ; CODE XREF: needs_quoting+71↓j
.text:0000000000005B27                 mov     rcx, [rsp+28h+var_20]
.text:0000000000005B2C                 xor     rcx, fs:28h
.text:0000000000005B35                 jnz     short loc_5B53
.text:0000000000005B37                 add     rsp, 18h
.text:0000000000005B3B                 pop     rbx
.text:0000000000005B3C                 pop     rbp
.text:0000000000005B3D                 retn
.text:0000000000005B3D ; ---------------------------------------------------------------------------
.text:0000000000005B3E                 align 20h
.text:0000000000005B40
.text:0000000000005B40 loc_5B40:                               ; CODE XREF: needs_quoting+40↑j
.text:0000000000005B40                 mov     rbp, rax
.text:0000000000005B43                 mov     rdi, rbx        ; s
.text:0000000000005B46                 call    _strlen
.text:0000000000005B4B                 cmp     rax, rbp
.text:0000000000005B4E                 setnz   al
.text:0000000000005B51                 jmp     short loc_5B27
.text:0000000000005B53 ; ---------------------------------------------------------------------------
.text:0000000000005B53
.text:0000000000005B53 loc_5B53:                               ; CODE XREF: needs_quoting+55↑j
.text:0000000000005B53                 call    ___stack_chk_fail
.text:0000000000005B53 ; } // starts at 5AE0
.text:0000000000005B53 needs_quoting   endp
.text:0000000000005B53
.text:0000000000005B53 ; ---------------------------------------------------------------------------
.text:0000000000005B58                 align 20h
.text:0000000000005B60
.text:0000000000005B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B60
.text:0000000000005B60 ; Attributes: info_from_lumina
.text:0000000000005B60
.text:0000000000005B60 ; char *__fastcall file_escape(const char *str, _Bool path)
.text:0000000000005B60 file_escape     proc near               ; CODE XREF: quote_name+DD↓p
.text:0000000000005B60                                         ; quote_name+ED↓p
.text:0000000000005B60 ; __unwind {
.text:0000000000005B60                 push    r14
.text:0000000000005B62                 push    r13
.text:0000000000005B64                 push    r12
.text:0000000000005B66                 push    rbp
.text:0000000000005B67                 mov     r12d, esi
.text:0000000000005B6A                 push    rbx
.text:0000000000005B6B                 mov     rbx, rdi
.text:0000000000005B6E                 call    _strlen
.text:0000000000005B73                 lea     rcx, [rax+1]
.text:0000000000005B77                 mov     eax, 3
.text:0000000000005B7C                 mul     rcx
.text:0000000000005B7F                 jo      loc_5C22
.text:0000000000005B85                 xor     esi, esi
.text:0000000000005B87
.text:0000000000005B87 loc_5B87:                               ; CODE XREF: file_escape+C7↓j
.text:0000000000005B87                 test    rax, rax
.text:0000000000005B8A                 js      loc_5C2C
.text:0000000000005B90                 test    rsi, rsi
.text:0000000000005B93                 jnz     loc_5C2C
.text:0000000000005B99                 lea     rdi, [rcx+rcx*2]
.text:0000000000005B9D                 lea     r14, RFC3986
.text:0000000000005BA4                 call    xmalloc
.text:0000000000005BA9                 mov     r13, rax
.text:0000000000005BAC                 mov     rbp, rax
.text:0000000000005BAF
.text:0000000000005BAF loc_5BAF:                               ; CODE XREF: file_escape+B1↓j
.text:0000000000005BAF                                         ; file_escape+C0↓j
.text:0000000000005BAF                 movzx   eax, byte ptr [rbx]
.text:0000000000005BB2                 test    al, al
.text:0000000000005BB4                 jz      short loc_5BDE
.text:0000000000005BB6
.text:0000000000005BB6 loc_5BB6:                               ; CODE XREF: file_escape+7C↓j
.text:0000000000005BB6                 add     rbx, 1
.text:0000000000005BBA                 cmp     al, 2Fh ; '/'
.text:0000000000005BBC                 jnz     short loc_5BC3
.text:0000000000005BBE                 test    r12b, r12b
.text:0000000000005BC1                 jnz     short loc_5C18
.text:0000000000005BC3
.text:0000000000005BC3 loc_5BC3:                               ; CODE XREF: file_escape+5C↑j
.text:0000000000005BC3                 movzx   edx, al
.text:0000000000005BC6                 cmp     byte ptr [r14+rdx], 0
.text:0000000000005BCB                 mov     r8, rdx
.text:0000000000005BCE                 jz      short loc_5BF0
.text:0000000000005BD0                 mov     [rbp+0], al
.text:0000000000005BD3                 movzx   eax, byte ptr [rbx]
.text:0000000000005BD6                 add     rbp, 1
.text:0000000000005BDA                 test    al, al
.text:0000000000005BDC                 jnz     short loc_5BB6
.text:0000000000005BDE
.text:0000000000005BDE loc_5BDE:                               ; CODE XREF: file_escape+54↑j
.text:0000000000005BDE                 mov     byte ptr [rbp+0], 0
.text:0000000000005BE2                 mov     rax, r13
.text:0000000000005BE5                 pop     rbx
.text:0000000000005BE6                 pop     rbp
.text:0000000000005BE7                 pop     r12
.text:0000000000005BE9                 pop     r13
.text:0000000000005BEB                 pop     r14
.text:0000000000005BED                 retn
.text:0000000000005BED ; ---------------------------------------------------------------------------
.text:0000000000005BEE                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 loc_5BF0:                               ; CODE XREF: file_escape+6E↑j
.text:0000000000005BF0                 lea     rcx, a02x       ; "%%%02x"
.text:0000000000005BF7                 mov     rdi, rbp
.text:0000000000005BFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C01                 mov     esi, 1
.text:0000000000005C06                 xor     eax, eax
.text:0000000000005C08                 add     rbp, 3
.text:0000000000005C0C                 call    ___sprintf_chk
.text:0000000000005C11                 jmp     short loc_5BAF
.text:0000000000005C11 ; ---------------------------------------------------------------------------
.text:0000000000005C13                 align 8
.text:0000000000005C18
.text:0000000000005C18 loc_5C18:                               ; CODE XREF: file_escape+61↑j
.text:0000000000005C18                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000005C1C                 add     rbp, 1
.text:0000000000005C20                 jmp     short loc_5BAF
.text:0000000000005C22 ; ---------------------------------------------------------------------------
.text:0000000000005C22
.text:0000000000005C22 loc_5C22:                               ; CODE XREF: file_escape+1F↑j
.text:0000000000005C22                 mov     esi, 1
.text:0000000000005C27                 jmp     loc_5B87
.text:0000000000005C2C ; ---------------------------------------------------------------------------
.text:0000000000005C2C
.text:0000000000005C2C loc_5C2C:                               ; CODE XREF: file_escape+2A↑j
.text:0000000000005C2C                                         ; file_escape+33↑j
.text:0000000000005C2C                 call    xalloc_die
.text:0000000000005C2C ; } // starts at 5B60
.text:0000000000005C2C file_escape     endp
.text:0000000000005C2C
.text:0000000000005C2C ; ---------------------------------------------------------------------------
.text:0000000000005C31                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40
.text:0000000000005C40 sort_files      proc near               ; CODE XREF: main:loc_4A13↑p
.text:0000000000005C40                                         ; print_dir:loc_A786↓p ...
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 push    rbx
.text:0000000000005C41                 mov     rbx, cs:cwd_n_used
.text:0000000000005C48                 mov     rax, rbx
.text:0000000000005C4B                 shr     rax, 1
.text:0000000000005C4E                 add     rax, rbx
.text:0000000000005C51                 cmp     rax, cs:sorted_file_alloc
.text:0000000000005C58                 ja      loc_5D50
.text:0000000000005C5E
.text:0000000000005C5E loc_5C5E:                               ; CODE XREF: sort_files+162↓j
.text:0000000000005C5E                 test    rbx, rbx
.text:0000000000005C61                 jz      short loc_5C92
.text:0000000000005C63                 lea     rcx, [rbx+rbx*4]
.text:0000000000005C67                 mov     rax, cs:cwd_file
.text:0000000000005C6E                 mov     rdx, cs:sorted_file
.text:0000000000005C75                 lea     rcx, [rcx+rcx*4]
.text:0000000000005C79                 lea     rcx, [rax+rcx*8]
.text:0000000000005C7D                 nop     dword ptr [rax]
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: sort_files+50↓j
.text:0000000000005C80                 mov     [rdx], rax
.text:0000000000005C83                 add     rax, 0C8h
.text:0000000000005C89                 add     rdx, 8
.text:0000000000005C8D                 cmp     rcx, rax
.text:0000000000005C90                 jnz     short loc_5C80
.text:0000000000005C92
.text:0000000000005C92 loc_5C92:                               ; CODE XREF: sort_files+21↑j
.text:0000000000005C92                 cmp     cs:sort_type, 0FFFFFFFFh
.text:0000000000005C99                 jz      loc_5D4C
.text:0000000000005C9F                 lea     rdi, failed_strcoll ; env
.text:0000000000005CA6                 call    __setjmp
.text:0000000000005CAB                 test    eax, eax
.text:0000000000005CAD                 mov     ecx, cs:sort_type
.text:0000000000005CB3                 jz      short loc_5D00
.text:0000000000005CB5                 cmp     ecx, 3
.text:0000000000005CB8                 jz      loc_5DA7
.text:0000000000005CBE                 mov     rsi, cs:cwd_n_used
.text:0000000000005CC5                 mov     rdi, cs:sorted_file
.text:0000000000005CCC                 test    rsi, rsi
.text:0000000000005CCF                 jz      short loc_5CF3
.text:0000000000005CD1                 mov     rdx, cs:cwd_file
.text:0000000000005CD8                 lea     r8, [rdi+rsi*8]
.text:0000000000005CDC                 mov     rax, rdi
.text:0000000000005CDF                 nop
.text:0000000000005CE0
.text:0000000000005CE0 loc_5CE0:                               ; CODE XREF: sort_files+B1↓j
.text:0000000000005CE0                 mov     [rax], rdx
.text:0000000000005CE3                 add     rax, 8
.text:0000000000005CE7                 add     rdx, 0C8h
.text:0000000000005CEE                 cmp     rax, r8
.text:0000000000005CF1                 jnz     short loc_5CE0
.text:0000000000005CF3
.text:0000000000005CF3 loc_5CF3:                               ; CODE XREF: sort_files+8F↑j
.text:0000000000005CF3                 mov     eax, 1
.text:0000000000005CF8                 jmp     short loc_5D0E
.text:0000000000005CF8 ; ---------------------------------------------------------------------------
.text:0000000000005CFA                 align 20h
.text:0000000000005D00
.text:0000000000005D00 loc_5D00:                               ; CODE XREF: sort_files+73↑j
.text:0000000000005D00                 mov     rsi, cs:cwd_n_used
.text:0000000000005D07                 mov     rdi, cs:sorted_file
.text:0000000000005D0E
.text:0000000000005D0E loc_5D0E:                               ; CODE XREF: sort_files+B8↑j
.text:0000000000005D0E                 cmp     ecx, 4
.text:0000000000005D11                 mov     edx, 0
.text:0000000000005D16                 cmovz   edx, cs:time_type
.text:0000000000005D1D                 cdqe
.text:0000000000005D1F                 movzx   r8d, cs:directories_first
.text:0000000000005D27                 add     edx, ecx
.text:0000000000005D29                 lea     rdx, [rax+rdx*2]
.text:0000000000005D2D                 movzx   eax, cs:sort_reverse
.text:0000000000005D34                 lea     rax, [rax+rdx*2]
.text:0000000000005D38                 lea     rdx, [r8+rax*2]
.text:0000000000005D3C                 lea     rax, sort_functions
.text:0000000000005D43                 mov     rdx, [rax+rdx*8]
.text:0000000000005D47                 call    mpsort
.text:0000000000005D4C
.text:0000000000005D4C loc_5D4C:                               ; CODE XREF: sort_files+59↑j
.text:0000000000005D4C                 pop     rbx
.text:0000000000005D4D                 retn
.text:0000000000005D4D ; ---------------------------------------------------------------------------
.text:0000000000005D4E                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: sort_files+18↑j
.text:0000000000005D50                 mov     rdi, cs:sorted_file ; ptr
.text:0000000000005D57                 call    free
.text:0000000000005D5C                 mov     edx, 18h
.text:0000000000005D61                 xor     ecx, ecx
.text:0000000000005D63                 mov     rax, rdx
.text:0000000000005D66                 mul     rbx
.text:0000000000005D69                 jo      short loc_5DC6
.text:0000000000005D6B
.text:0000000000005D6B loc_5D6B:                               ; CODE XREF: sort_files+18B↓j
.text:0000000000005D6B                 test    rax, rax
.text:0000000000005D6E                 mov     eax, 1
.text:0000000000005D73                 cmovs   rcx, rax
.text:0000000000005D77                 test    rcx, rcx
.text:0000000000005D7A                 jnz     short loc_5DCD
.text:0000000000005D7C                 lea     rdi, [rbx+rbx*2]
.text:0000000000005D80                 shl     rdi, 3
.text:0000000000005D84                 call    xmalloc
.text:0000000000005D89                 mov     rbx, cs:cwd_n_used
.text:0000000000005D90                 mov     cs:sorted_file, rax
.text:0000000000005D97                 lea     rax, [rbx+rbx*2]
.text:0000000000005D9B                 mov     cs:sorted_file_alloc, rax
.text:0000000000005DA2                 jmp     loc_5C5E
.text:0000000000005DA7 ; ---------------------------------------------------------------------------
.text:0000000000005DA7
.text:0000000000005DA7 loc_5DA7:                               ; CODE XREF: sort_files+78↑j
.text:0000000000005DA7                 lea     rcx, __PRETTY_FUNCTION___10745 ; "sort_files"
.text:0000000000005DAE                 lea     rsi, file       ; "../coreutils-8.31/src/ls.c"
.text:0000000000005DB5                 lea     rdi, aSortTypeSortVe ; "sort_type != sort_version"
.text:0000000000005DBC                 mov     edx, 0EEAh      ; line
.text:0000000000005DC1                 call    ___assert_fail
.text:0000000000005DC6 ; ---------------------------------------------------------------------------
.text:0000000000005DC6
.text:0000000000005DC6 loc_5DC6:                               ; CODE XREF: sort_files+129↑j
.text:0000000000005DC6                 mov     ecx, 1
.text:0000000000005DCB                 jmp     short loc_5D6B
.text:0000000000005DCD ; ---------------------------------------------------------------------------
.text:0000000000005DCD
.text:0000000000005DCD loc_5DCD:                               ; CODE XREF: sort_files+13A↑j
.text:0000000000005DCD                 call    xalloc_die
.text:0000000000005DCD ; } // starts at 5C40
.text:0000000000005DCD sort_files      endp
.text:0000000000005DCD
.text:0000000000005DCD ; ---------------------------------------------------------------------------
.text:0000000000005DD2                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0 ; Attributes: info_from_lumina
.text:0000000000005DE0
.text:0000000000005DE0 ; int __fastcall xstrcoll(const char *a, const char *b)
.text:0000000000005DE0 xstrcoll        proc near               ; CODE XREF: xstrcoll_size+1E↓j
.text:0000000000005DE0                                         ; rev_xstrcoll_size+26↓j ...
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 push    rbp
.text:0000000000005DE1                 push    rbx
.text:0000000000005DE2                 mov     rbp, rsi
.text:0000000000005DE5                 mov     rbx, rdi
.text:0000000000005DE8                 sub     rsp, 8
.text:0000000000005DEC                 call    ___errno_location
.text:0000000000005DF1                 mov     dword ptr [rax], 0
.text:0000000000005DF7                 add     rsp, 8
.text:0000000000005DFB                 mov     rsi, rbp        ; s2
.text:0000000000005DFE                 mov     rdi, rbx        ; s1
.text:0000000000005E01                 pop     rbx
.text:0000000000005E02                 pop     rbp
.text:0000000000005E03                 jmp     _strcoll
.text:0000000000005E03 ; } // starts at 5DE0
.text:0000000000005E03 xstrcoll        endp
.text:0000000000005E03
.text:0000000000005E03 ; ---------------------------------------------------------------------------
.text:0000000000005E08                 align 10h
.text:0000000000005E10
.text:0000000000005E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E10
.text:0000000000005E10 ; Attributes: info_from_lumina
.text:0000000000005E10
.text:0000000000005E10 ; int __fastcall xstrcoll_size(V a, V b)
.text:0000000000005E10 xstrcoll_size   proc near               ; DATA XREF: .data.rel.ro:000000000021F0E0↓o
.text:0000000000005E10 ; __unwind {
.text:0000000000005E10                 mov     rax, [rsi+48h]
.text:0000000000005E14                 cmp     [rdi+48h], rax
.text:0000000000005E18                 jg      short loc_5E30
.text:0000000000005E1A                 mov     eax, 1
.text:0000000000005E1F                 jge     short loc_5E28
.text:0000000000005E21                 rep retn
.text:0000000000005E21 ; ---------------------------------------------------------------------------
.text:0000000000005E23                 align 8
.text:0000000000005E28
.text:0000000000005E28 loc_5E28:                               ; CODE XREF: xstrcoll_size+F↑j
.text:0000000000005E28                 mov     rsi, [rsi]      ; s2
.text:0000000000005E2B                 mov     rdi, [rdi]      ; s1
.text:0000000000005E2E                 jmp     short xstrcoll
.text:0000000000005E30 ; ---------------------------------------------------------------------------
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: xstrcoll_size+8↑j
.text:0000000000005E30                 mov     eax, 0FFFFFFFFh
.text:0000000000005E35                 retn
.text:0000000000005E35 ; } // starts at 5E10
.text:0000000000005E35 xstrcoll_size   endp
.text:0000000000005E35
.text:0000000000005E35 ; ---------------------------------------------------------------------------
.text:0000000000005E36                 align 20h
.text:0000000000005E40
.text:0000000000005E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E40
.text:0000000000005E40 ; Attributes: info_from_lumina
.text:0000000000005E40
.text:0000000000005E40 ; int __fastcall rev_xstrcoll_size(V a, V b)
.text:0000000000005E40 rev_xstrcoll_size proc near             ; DATA XREF: .data.rel.ro:000000000021F0F0↓o
.text:0000000000005E40 ; __unwind {
.text:0000000000005E40                 mov     rax, [rdi+48h]
.text:0000000000005E44                 cmp     [rsi+48h], rax
.text:0000000000005E48                 mov     rdx, rsi
.text:0000000000005E4B                 jg      short loc_5E70
.text:0000000000005E4D                 mov     eax, 1
.text:0000000000005E52                 jge     short loc_5E60
.text:0000000000005E54                 rep retn
.text:0000000000005E54 ; ---------------------------------------------------------------------------
.text:0000000000005E56                 align 20h
.text:0000000000005E60
.text:0000000000005E60 loc_5E60:                               ; CODE XREF: rev_xstrcoll_size+12↑j
.text:0000000000005E60                 mov     rsi, [rdi]      ; s2
.text:0000000000005E63                 mov     rdi, [rdx]      ; s1
.text:0000000000005E66                 jmp     xstrcoll
.text:0000000000005E66 ; ---------------------------------------------------------------------------
.text:0000000000005E6B                 align 10h
.text:0000000000005E70
.text:0000000000005E70 loc_5E70:                               ; CODE XREF: rev_xstrcoll_size+B↑j
.text:0000000000005E70                 mov     eax, 0FFFFFFFFh
.text:0000000000005E75                 retn
.text:0000000000005E75 ; } // starts at 5E40
.text:0000000000005E75 rev_xstrcoll_size endp
.text:0000000000005E75
.text:0000000000005E75 ; ---------------------------------------------------------------------------
.text:0000000000005E76                 align 20h
.text:0000000000005E80
.text:0000000000005E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E80
.text:0000000000005E80
.text:0000000000005E80 xstrcoll_name   proc near               ; DATA XREF: .data.rel.ro:sort_functions↓o
.text:0000000000005E80 ; __unwind {
.text:0000000000005E80                 mov     rsi, [rsi]      ; s2
.text:0000000000005E83                 mov     rdi, [rdi]      ; s1
.text:0000000000005E86                 jmp     xstrcoll
.text:0000000000005E86 ; } // starts at 5E80
.text:0000000000005E86 xstrcoll_name   endp
.text:0000000000005E86
.text:0000000000005E86 ; ---------------------------------------------------------------------------
.text:0000000000005E8B                 align 10h
.text:0000000000005E90
.text:0000000000005E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E90
.text:0000000000005E90
.text:0000000000005E90 rev_xstrcoll_name proc near             ; DATA XREF: .data.rel.ro:000000000021F070↓o
.text:0000000000005E90 ; __unwind {
.text:0000000000005E90                 mov     rax, rsi
.text:0000000000005E93                 mov     rsi, [rdi]      ; s2
.text:0000000000005E96                 mov     rdi, [rax]      ; s1
.text:0000000000005E99                 jmp     xstrcoll
.text:0000000000005E99 ; } // starts at 5E90
.text:0000000000005E99 rev_xstrcoll_name endp
.text:0000000000005E99
.text:0000000000005E99 ; ---------------------------------------------------------------------------
.text:0000000000005E9E                 align 20h
.text:0000000000005EA0
.text:0000000000005EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EA0
.text:0000000000005EA0
.text:0000000000005EA0 rev_xstrcoll_version proc near          ; DATA XREF: .data.rel.ro:000000000021F130↓o
.text:0000000000005EA0 ; __unwind {
.text:0000000000005EA0                 mov     rax, rsi
.text:0000000000005EA3                 mov     rsi, [rdi]      ; s2
.text:0000000000005EA6                 mov     rdi, [rax]      ; s1
.text:0000000000005EA9                 jmp     filevercmp
.text:0000000000005EA9 ; } // starts at 5EA0
.text:0000000000005EA9 rev_xstrcoll_version endp
.text:0000000000005EA9
.text:0000000000005EA9 ; ---------------------------------------------------------------------------
.text:0000000000005EAE                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EB0
.text:0000000000005EB0
.text:0000000000005EB0 xstrcoll_version proc near              ; DATA XREF: .data.rel.ro:000000000021F120↓o
.text:0000000000005EB0 ; __unwind {
.text:0000000000005EB0                 mov     rsi, [rsi]      ; s2
.text:0000000000005EB3                 mov     rdi, [rdi]      ; s1
.text:0000000000005EB6                 jmp     filevercmp
.text:0000000000005EB6 ; } // starts at 5EB0
.text:0000000000005EB6 xstrcoll_version endp
.text:0000000000005EB6
.text:0000000000005EB6 ; ---------------------------------------------------------------------------
.text:0000000000005EBB                 align 20h
.text:0000000000005EC0
.text:0000000000005EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EC0
.text:0000000000005EC0
.text:0000000000005EC0 ; __int64 __fastcall extract_dirs_from_files(void *)
.text:0000000000005EC0 extract_dirs_from_files proc near       ; CODE XREF: main+14CF↑p
.text:0000000000005EC0                                         ; print_dir+5AD↓p
.text:0000000000005EC0 ; __unwind {
.text:0000000000005EC0                 push    r15
.text:0000000000005EC2                 push    r14
.text:0000000000005EC4                 mov     r14, rdi
.text:0000000000005EC7                 push    r13
.text:0000000000005EC9                 push    r12
.text:0000000000005ECB                 movzx   r13d, sil
.text:0000000000005ECF                 push    rbp
.text:0000000000005ED0                 push    rbx
.text:0000000000005ED1                 sub     rsp, 8
.text:0000000000005ED5                 test    rdi, rdi
.text:0000000000005ED8                 jz      short loc_5EF0
.text:0000000000005EDA                 cmp     cs:active_dir_set, 0
.text:0000000000005EE2                 jz      short loc_5EF0
.text:0000000000005EE4                 mov     rsi, rdi        ; void *
.text:0000000000005EE7                 xor     edx, edx
.text:0000000000005EE9                 xor     edi, edi        ; src
.text:0000000000005EEB                 call    queue_directory
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: extract_dirs_from_files+18↑j
.text:0000000000005EF0                                         ; extract_dirs_from_files+22↑j
.text:0000000000005EF0                 mov     rbx, cs:cwd_n_used
.text:0000000000005EF7                 lea     r12, ds:0FFFFFFFFFFFFFFF8h[rbx*8]
.text:0000000000005EFF                 sub     rbx, 1
.text:0000000000005F03                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F07                 jz      short loc_5F39
.text:0000000000005F09                 nop     dword ptr [rax+00000000h]
.text:0000000000005F10
.text:0000000000005F10 loc_5F10:                               ; CODE XREF: extract_dirs_from_files+77↓j
.text:0000000000005F10                 mov     rax, cs:sorted_file
.text:0000000000005F17                 mov     rbp, [rax+r12]
.text:0000000000005F1B                 mov     eax, [rbp+0A8h]
.text:0000000000005F21                 cmp     eax, 3
.text:0000000000005F24                 jz      short loc_5F90
.text:0000000000005F26                 cmp     eax, 9
.text:0000000000005F29                 jz      short loc_5F90
.text:0000000000005F2B
.text:0000000000005F2B loc_5F2B:                               ; CODE XREF: extract_dirs_from_files+11A↓j
.text:0000000000005F2B                                         ; extract_dirs_from_files+13B↓j ...
.text:0000000000005F2B                 sub     rbx, 1
.text:0000000000005F2F                 sub     r12, 8
.text:0000000000005F33                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F37                 jnz     short loc_5F10
.text:0000000000005F39
.text:0000000000005F39 loc_5F39:                               ; CODE XREF: extract_dirs_from_files+47↑j
.text:0000000000005F39                 mov     rdx, cs:cwd_n_used
.text:0000000000005F40                 test    rdx, rdx
.text:0000000000005F43                 jz      short loc_5F78
.text:0000000000005F45                 mov     rsi, cs:sorted_file
.text:0000000000005F4C                 lea     rdi, [rsi+rdx*8]
.text:0000000000005F50                 mov     rax, rsi
.text:0000000000005F53                 xor     edx, edx
.text:0000000000005F55                 nop     dword ptr [rax]
.text:0000000000005F58
.text:0000000000005F58 loc_5F58:                               ; CODE XREF: extract_dirs_from_files+B6↓j
.text:0000000000005F58                 mov     rcx, [rax]
.text:0000000000005F5B                 cmp     dword ptr [rcx+0A8h], 9
.text:0000000000005F62                 mov     [rsi+rdx*8], rcx
.text:0000000000005F66                 setnz   cl
.text:0000000000005F69                 add     rax, 8
.text:0000000000005F6D                 movzx   ecx, cl
.text:0000000000005F70                 add     rdx, rcx
.text:0000000000005F73                 cmp     rdi, rax
.text:0000000000005F76                 jnz     short loc_5F58
.text:0000000000005F78
.text:0000000000005F78 loc_5F78:                               ; CODE XREF: extract_dirs_from_files+83↑j
.text:0000000000005F78                 mov     cs:cwd_n_used, rdx
.text:0000000000005F7F                 add     rsp, 8
.text:0000000000005F83                 pop     rbx
.text:0000000000005F84                 pop     rbp
.text:0000000000005F85                 pop     r12
.text:0000000000005F87                 pop     r13
.text:0000000000005F89                 pop     r14
.text:0000000000005F8B                 pop     r15
.text:0000000000005F8D                 retn
.text:0000000000005F8D ; ---------------------------------------------------------------------------
.text:0000000000005F8E                 align 10h
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: extract_dirs_from_files+64↑j
.text:0000000000005F90                                         ; extract_dirs_from_files+69↑j
.text:0000000000005F90                 test    r14, r14
.text:0000000000005F93                 mov     r15, [rbp+0]
.text:0000000000005F97                 jz      short loc_6000
.text:0000000000005F99                 mov     rdi, r15
.text:0000000000005F9C                 call    last_component
.text:0000000000005FA1                 cmp     byte ptr [rax], 2Eh ; '.'
.text:0000000000005FA4                 jz      short loc_6018
.text:0000000000005FA6
.text:0000000000005FA6 loc_5FA6:                               ; CODE XREF: extract_dirs_from_files+176↓j
.text:0000000000005FA6                 cmp     byte ptr [r15], 2Fh ; '/'
.text:0000000000005FAA                 jz      short loc_6000
.text:0000000000005FAC                 mov     rsi, r15
.text:0000000000005FAF                 xor     edx, edx
.text:0000000000005FB1                 mov     rdi, r14
.text:0000000000005FB4                 call    file_name_concat
.text:0000000000005FB9                 mov     rsi, [rbp+8]    ; void *
.text:0000000000005FBD                 mov     r15, rax
.text:0000000000005FC0                 mov     rdi, rax        ; src
.text:0000000000005FC3                 mov     edx, r13d
.text:0000000000005FC6                 call    queue_directory
.text:0000000000005FCB                 mov     rdi, r15        ; ptr
.text:0000000000005FCE                 call    free
.text:0000000000005FD3
.text:0000000000005FD3 loc_5FD3:                               ; CODE XREF: extract_dirs_from_files+14F↓j
.text:0000000000005FD3                 cmp     dword ptr [rbp+0A8h], 9
.text:0000000000005FDA                 jnz     loc_5F2B
.text:0000000000005FE0                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000005FE4                 call    free
.text:0000000000005FE9                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000005FED                 call    free
.text:0000000000005FF2                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000005FF6                 call    free
.text:0000000000005FFB                 jmp     loc_5F2B
.text:0000000000006000 ; ---------------------------------------------------------------------------
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: extract_dirs_from_files+D7↑j
.text:0000000000006000                                         ; extract_dirs_from_files+EA↑j
.text:0000000000006000                 mov     rsi, [rbp+8]    ; void *
.text:0000000000006004                 mov     edx, r13d
.text:0000000000006007                 mov     rdi, r15        ; src
.text:000000000000600A                 call    queue_directory
.text:000000000000600F                 jmp     short loc_5FD3
.text:000000000000600F ; ---------------------------------------------------------------------------
.text:0000000000006011                 align 8
.text:0000000000006018
.text:0000000000006018 loc_6018:                               ; CODE XREF: extract_dirs_from_files+E4↑j
.text:0000000000006018                 xor     edx, edx
.text:000000000000601A                 cmp     byte ptr [rax+1], 2Eh ; '.'
.text:000000000000601E                 setz    dl
.text:0000000000006021                 movzx   eax, byte ptr [rax+rdx+1]
.text:0000000000006026                 test    al, al
.text:0000000000006028                 jz      loc_5F2B
.text:000000000000602E                 cmp     al, 2Fh ; '/'
.text:0000000000006030                 jz      loc_5F2B
.text:0000000000006036                 jmp     loc_5FA6
.text:0000000000006036 ; } // starts at 5EC0
.text:0000000000006036 extract_dirs_from_files endp
.text:0000000000006036
.text:0000000000006036 ; ---------------------------------------------------------------------------
.text:000000000000603B                 align 20h
.text:0000000000006040
.text:0000000000006040 ; =============== S U B R O U T I N E =======================================
.text:0000000000006040
.text:0000000000006040 ; Attributes: info_from_lumina
.text:0000000000006040
.text:0000000000006040 ; void __fastcall indent(size_t from, size_t to)
.text:0000000000006040 indent          proc near               ; CODE XREF: print_current_files+122↓p
.text:0000000000006040                                         ; print_current_files+246↓p
.text:0000000000006040 ; __unwind {
.text:0000000000006040                 cmp     rdi, rsi
.text:0000000000006043                 jnb     locret_60E8
.text:0000000000006049                 push    r12
.text:000000000000604B                 mov     r12, rsi
.text:000000000000604E                 push    rbp
.text:000000000000604F                 push    rbx
.text:0000000000006050                 mov     rbx, rdi
.text:0000000000006053                 jmp     short loc_6096
.text:0000000000006053 ; ---------------------------------------------------------------------------
.text:0000000000006055                 align 8
.text:0000000000006058
.text:0000000000006058 loc_6058:                               ; CODE XREF: indent+73↓j
.text:0000000000006058                 xor     edx, edx
.text:000000000000605A                 mov     rax, r12
.text:000000000000605D                 div     rcx
.text:0000000000006060                 xor     edx, edx
.text:0000000000006062                 mov     r9, rax
.text:0000000000006065                 mov     rax, rbp
.text:0000000000006068                 div     rcx
.text:000000000000606B                 cmp     r9, rax
.text:000000000000606E                 jbe     short loc_60B5
.text:0000000000006070                 cmp     rsi, r8
.text:0000000000006073                 jnb     short loc_60F0
.text:0000000000006075                 lea     rax, [rsi+1]
.text:0000000000006079                 mov     [rdi+28h], rax
.text:000000000000607D                 mov     byte ptr [rsi], 9
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: indent+C1↓j
.text:0000000000006080                 mov     rax, rbx
.text:0000000000006083                 xor     edx, edx
.text:0000000000006085                 div     rcx
.text:0000000000006088                 add     rcx, rbx
.text:000000000000608B                 mov     rbx, rcx
.text:000000000000608E                 sub     rbx, rdx
.text:0000000000006091                 cmp     rbx, r12
.text:0000000000006094                 jnb     short loc_60CD
.text:0000000000006096
.text:0000000000006096 loc_6096:                               ; CODE XREF: indent+13↑j
.text:0000000000006096                                         ; indent+8B↓j
.text:0000000000006096                 mov     rcx, cs:tabsize
.text:000000000000609D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000060A4                 lea     rbp, [rbx+1]
.text:00000000000060A8                 test    rcx, rcx
.text:00000000000060AB                 mov     rsi, [rdi+28h]
.text:00000000000060AF                 mov     r8, [rdi+30h]
.text:00000000000060B3                 jnz     short loc_6058
.text:00000000000060B5
.text:00000000000060B5 loc_60B5:                               ; CODE XREF: indent+2E↑j
.text:00000000000060B5                 cmp     rsi, r8
.text:00000000000060B8                 jnb     short loc_60D8
.text:00000000000060BA                 lea     rax, [rsi+1]
.text:00000000000060BE                 mov     [rdi+28h], rax
.text:00000000000060C2                 mov     byte ptr [rsi], 20h ; ' '
.text:00000000000060C5
.text:00000000000060C5 loc_60C5:                               ; CODE XREF: indent+A2↓j
.text:00000000000060C5                 mov     rbx, rbp
.text:00000000000060C8                 cmp     rbx, r12
.text:00000000000060CB                 jb      short loc_6096
.text:00000000000060CD
.text:00000000000060CD loc_60CD:                               ; CODE XREF: indent+54↑j
.text:00000000000060CD                 pop     rbx
.text:00000000000060CE                 pop     rbp
.text:00000000000060CF                 pop     r12
.text:00000000000060D1                 retn
.text:00000000000060D1 ; ---------------------------------------------------------------------------
.text:00000000000060D2                 align 8
.text:00000000000060D8
.text:00000000000060D8 loc_60D8:                               ; CODE XREF: indent+78↑j
.text:00000000000060D8                 mov     esi, 20h ; ' '  ; int
.text:00000000000060DD                 call    ___overflow
.text:00000000000060E2                 jmp     short loc_60C5
.text:00000000000060E2 ; ---------------------------------------------------------------------------
.text:00000000000060E4                 align 8
.text:00000000000060E8
.text:00000000000060E8 locret_60E8:                            ; CODE XREF: indent+3↑j
.text:00000000000060E8                 rep retn
.text:00000000000060E8 ; ---------------------------------------------------------------------------
.text:00000000000060EA                 align 10h
.text:00000000000060F0
.text:00000000000060F0 loc_60F0:                               ; CODE XREF: indent+33↑j
.text:00000000000060F0                 mov     esi, 9          ; int
.text:00000000000060F5                 call    ___overflow
.text:00000000000060FA                 mov     rcx, cs:tabsize
.text:0000000000006101                 jmp     loc_6080
.text:0000000000006101 ; } // starts at 6040
.text:0000000000006101 indent          endp
.text:0000000000006101
.text:0000000000006101 ; ---------------------------------------------------------------------------
.text:0000000000006106                 align 10h
.text:0000000000006110
.text:0000000000006110 ; =============== S U B R O U T I N E =======================================
.text:0000000000006110
.text:0000000000006110 ; Attributes: info_from_lumina
.text:0000000000006110
.text:0000000000006110 ; void __fastcall dired_dump_obstack(const char *prefix, obstack *os)
.text:0000000000006110 dired_dump_obstack proc near            ; CODE XREF: main+11E8↑p
.text:0000000000006110                                         ; main+11FB↑p
.text:0000000000006110 ; __unwind {
.text:0000000000006110                 push    r12
.text:0000000000006112                 push    rbp
.text:0000000000006113                 push    rbx
.text:0000000000006114                 mov     rax, [rsi+18h]
.text:0000000000006118                 mov     rbx, [rsi+10h]
.text:000000000000611C                 mov     rbp, rax
.text:000000000000611F                 sub     rbp, rbx
.text:0000000000006122                 shr     rbp, 3
.text:0000000000006126                 test    rbp, rbp
.text:0000000000006129                 jz      loc_61B7
.text:000000000000612F                 cmp     rax, rbx
.text:0000000000006132                 jz      loc_61C2
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: dired_dump_obstack+B6↓j
.text:0000000000006138                 mov     rdx, [rsi+30h]
.text:000000000000613C                 mov     rcx, [rsi+20h]
.text:0000000000006140                 add     rax, rdx
.text:0000000000006143                 not     rdx
.text:0000000000006146                 mov     r8, rcx
.text:0000000000006149                 and     rax, rdx
.text:000000000000614C                 mov     rdx, [rsi+8]
.text:0000000000006150                 mov     [rsi+18h], rax
.text:0000000000006154                 sub     r8, rdx
.text:0000000000006157                 sub     rax, rdx
.text:000000000000615A                 cmp     rax, r8
.text:000000000000615D                 ja      short loc_61BC
.text:000000000000615F
.text:000000000000615F loc_615F:                               ; CODE XREF: dired_dump_obstack+B0↓j
.text:000000000000615F                 mov     rax, [rsi+18h]
.text:0000000000006163                 lea     r12, [rbx+rbp*8]
.text:0000000000006167                 lea     rbp, aLu        ; " %lu"
.text:000000000000616E                 mov     [rsi+10h], rax
.text:0000000000006172                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000006179                 call    _fputs_unlocked
.text:000000000000617E                 xchg    ax, ax
.text:0000000000006180
.text:0000000000006180 loc_6180:                               ; CODE XREF: dired_dump_obstack+89↓j
.text:0000000000006180                 mov     rdx, [rbx]
.text:0000000000006183                 xor     eax, eax
.text:0000000000006185                 mov     rsi, rbp
.text:0000000000006188                 mov     edi, 1
.text:000000000000618D                 add     rbx, 8
.text:0000000000006191                 call    ___printf_chk
.text:0000000000006196                 cmp     rbx, r12
.text:0000000000006199                 jnz     short loc_6180
.text:000000000000619B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000061A2                 mov     rax, [rdi+28h]
.text:00000000000061A6                 cmp     rax, [rdi+30h]
.text:00000000000061AA                 jnb     short loc_61CB
.text:00000000000061AC                 lea     rdx, [rax+1]
.text:00000000000061B0                 mov     [rdi+28h], rdx
.text:00000000000061B4                 mov     byte ptr [rax], 0Ah
.text:00000000000061B7
.text:00000000000061B7 loc_61B7:                               ; CODE XREF: dired_dump_obstack+19↑j
.text:00000000000061B7                 pop     rbx
.text:00000000000061B8                 pop     rbp
.text:00000000000061B9                 pop     r12
.text:00000000000061BB                 retn
.text:00000000000061BC ; ---------------------------------------------------------------------------
.text:00000000000061BC
.text:00000000000061BC loc_61BC:                               ; CODE XREF: dired_dump_obstack+4D↑j
.text:00000000000061BC                 mov     [rsi+18h], rcx
.text:00000000000061C0                 jmp     short loc_615F
.text:00000000000061C2 ; ---------------------------------------------------------------------------
.text:00000000000061C2
.text:00000000000061C2 loc_61C2:                               ; CODE XREF: dired_dump_obstack+22↑j
.text:00000000000061C2                 or      byte ptr [rsi+50h], 2
.text:00000000000061C6                 jmp     loc_6138
.text:00000000000061CB ; ---------------------------------------------------------------------------
.text:00000000000061CB
.text:00000000000061CB loc_61CB:                               ; CODE XREF: dired_dump_obstack+9A↑j
.text:00000000000061CB                 pop     rbx
.text:00000000000061CC                 pop     rbp
.text:00000000000061CD                 pop     r12
.text:00000000000061CF                 mov     esi, 0Ah        ; int
.text:00000000000061D4                 jmp     ___overflow
.text:00000000000061D4 ; } // starts at 6110
.text:00000000000061D4 dired_dump_obstack endp
.text:00000000000061D4
.text:00000000000061D4 ; ---------------------------------------------------------------------------
.text:00000000000061D9                 align 20h
.text:00000000000061E0
.text:00000000000061E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061E0
.text:00000000000061E0 ; Attributes: info_from_lumina
.text:00000000000061E0
.text:00000000000061E0 ; void __fastcall format_user_or_group(const char *name, unsigned __int64 id, int width)
.text:00000000000061E0 format_user_or_group proc near          ; CODE XREF: format_user+2A↓j
.text:00000000000061E0                                         ; print_long_format+68F↓p ...
.text:00000000000061E0 ; __unwind {
.text:00000000000061E0                 push    rbp
.text:00000000000061E1                 push    rbx
.text:00000000000061E2                 mov     ebx, edx
.text:00000000000061E4                 sub     rsp, 8
.text:00000000000061E8                 test    rdi, rdi
.text:00000000000061EB                 jz      loc_6280
.text:00000000000061F1                 xor     esi, esi
.text:00000000000061F3                 mov     rbp, rdi
.text:00000000000061F6                 call    gnu_mbswidth
.text:00000000000061FB                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000006202                 sub     ebx, eax
.text:0000000000006204                 mov     eax, 0
.text:0000000000006209                 cmovs   ebx, eax
.text:000000000000620C                 mov     rdi, rbp        ; s
.text:000000000000620F                 call    _fputs_unlocked
.text:0000000000006214                 mov     rdi, rbp        ; s
.text:0000000000006217                 movsxd  rbp, ebx
.text:000000000000621A                 call    _strlen
.text:000000000000621F                 add     rbp, rax
.text:0000000000006222                 nop     word ptr [rax+rax+00h]
.text:0000000000006228
.text:0000000000006228 loc_6228:                               ; CODE XREF: format_user_or_group+6A↓j
.text:0000000000006228                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000622F                 mov     rdx, [rdi+28h]
.text:0000000000006233                 cmp     rdx, [rdi+30h]
.text:0000000000006237                 jnb     short loc_6270
.text:0000000000006239                 lea     rcx, [rdx+1]
.text:000000000000623D                 mov     [rdi+28h], rcx
.text:0000000000006241                 mov     byte ptr [rdx], 20h ; ' '
.text:0000000000006244
.text:0000000000006244 loc_6244:                               ; CODE XREF: format_user_or_group+9A↓j
.text:0000000000006244                 sub     ebx, 1
.text:0000000000006247                 cmp     ebx, 0FFFFFFFFh
.text:000000000000624A                 jnz     short loc_6228
.text:000000000000624C
.text:000000000000624C loc_624C:                               ; CODE XREF: format_user_or_group+B9↓j
.text:000000000000624C                 mov     rax, cs:dired_pos
.text:0000000000006253                 lea     rax, [rbp+rax+1]
.text:0000000000006258                 mov     cs:dired_pos, rax
.text:000000000000625F                 add     rsp, 8
.text:0000000000006263                 pop     rbx
.text:0000000000006264                 pop     rbp
.text:0000000000006265                 retn
.text:0000000000006265 ; ---------------------------------------------------------------------------
.text:0000000000006266                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: format_user_or_group+57↑j
.text:0000000000006270                 mov     esi, 20h ; ' '  ; int
.text:0000000000006275                 call    ___overflow
.text:000000000000627A                 jmp     short loc_6244
.text:000000000000627A ; ---------------------------------------------------------------------------
.text:000000000000627C                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: format_user_or_group+B↑j
.text:0000000000006280                 mov     rcx, rsi
.text:0000000000006283                 lea     rsi, aLu_0      ; "%*lu "
.text:000000000000628A                 mov     edi, 1
.text:000000000000628F                 xor     eax, eax
.text:0000000000006291                 movsxd  rbp, ebx
.text:0000000000006294                 call    ___printf_chk
.text:0000000000006299                 jmp     short loc_624C
.text:0000000000006299 ; } // starts at 61E0
.text:0000000000006299 format_user_or_group endp
.text:0000000000006299
.text:0000000000006299 ; ---------------------------------------------------------------------------
.text:000000000000629B                 align 20h
.text:00000000000062A0
.text:00000000000062A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062A0
.text:00000000000062A0 ; Attributes: info_from_lumina
.text:00000000000062A0
.text:00000000000062A0 ; void __fastcall format_user(uid_t u, int width, _Bool stat_ok)
.text:00000000000062A0 format_user     proc near               ; CODE XREF: print_long_format+6B0↓p
.text:00000000000062A0                                         ; print_long_format+720↓p
.text:00000000000062A0
.text:00000000000062A0 var_C           = dword ptr -0Ch
.text:00000000000062A0
.text:00000000000062A0 ; __unwind {
.text:00000000000062A0                 push    rbx
.text:00000000000062A1                 lea     rax, s          ; "?"
.text:00000000000062A8                 mov     ebx, edi
.text:00000000000062AA                 sub     rsp, 10h
.text:00000000000062AE                 test    dl, dl
.text:00000000000062B0                 jz      short loc_62BD
.text:00000000000062B2                 xor     eax, eax
.text:00000000000062B4                 cmp     cs:numeric_ids, 0
.text:00000000000062BB                 jz      short loc_62D0
.text:00000000000062BD
.text:00000000000062BD loc_62BD:                               ; CODE XREF: format_user+10↑j
.text:00000000000062BD                                         ; format_user+3D↓j
.text:00000000000062BD                 add     rsp, 10h
.text:00000000000062C1                 mov     edx, esi
.text:00000000000062C3                 mov     rsi, rbx
.text:00000000000062C6                 pop     rbx
.text:00000000000062C7                 mov     rdi, rax        ; s
.text:00000000000062CA                 jmp     format_user_or_group
.text:00000000000062CA ; ---------------------------------------------------------------------------
.text:00000000000062CF                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: format_user+1B↑j
.text:00000000000062D0                 mov     [rsp+18h+var_C], esi
.text:00000000000062D4                 call    getuser
.text:00000000000062D9                 mov     esi, [rsp+18h+var_C]
.text:00000000000062DD                 jmp     short loc_62BD
.text:00000000000062DD ; } // starts at 62A0
.text:00000000000062DD format_user     endp
.text:00000000000062DD
.text:00000000000062DD ; ---------------------------------------------------------------------------
.text:00000000000062DF                 align 20h
.text:00000000000062E0
.text:00000000000062E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062E0
.text:00000000000062E0
.text:00000000000062E0 stophandler     proc near               ; DATA XREF: signal_setup+19F↓o
.text:00000000000062E0 ; __unwind {
.text:00000000000062E0                 mov     eax, cs:interrupt_signal
.text:00000000000062E6                 test    eax, eax
.text:00000000000062E8                 jnz     short locret_62F9
.text:00000000000062EA                 mov     eax, cs:stop_signal_count
.text:00000000000062F0                 add     eax, 1
.text:00000000000062F3                 mov     cs:stop_signal_count, eax
.text:00000000000062F9
.text:00000000000062F9 locret_62F9:                            ; CODE XREF: stophandler+8↑j
.text:00000000000062F9                 rep retn
.text:00000000000062F9 ; } // starts at 62E0
.text:00000000000062F9 stophandler     endp
.text:00000000000062F9
.text:00000000000062F9 ; ---------------------------------------------------------------------------
.text:00000000000062FB                 align 20h
.text:0000000000006300
.text:0000000000006300 ; =============== S U B R O U T I N E =======================================
.text:0000000000006300
.text:0000000000006300 ; Attributes: info_from_lumina
.text:0000000000006300
.text:0000000000006300 ; void __fastcall file_failure(_Bool serious, const char *message, const char *file)
.text:0000000000006300 file_failure    proc near               ; CODE XREF: gobble_file_constprop_52+4E5↓p
.text:0000000000006300                                         ; gobble_file_constprop_52+5A1↓p ...
.text:0000000000006300 ; __unwind {
.text:0000000000006300                 push    r12
.text:0000000000006302                 push    rbp
.text:0000000000006303                 mov     rbp, rsi
.text:0000000000006306                 push    rbx
.text:0000000000006307                 mov     rsi, rdx
.text:000000000000630A                 mov     ebx, edi
.text:000000000000630C                 mov     edi, 4
.text:0000000000006311                 call    quotearg_style
.text:0000000000006316                 mov     r12, rax
.text:0000000000006319                 call    ___errno_location
.text:000000000000631E                 mov     esi, [rax]      ; errnum
.text:0000000000006320                 xor     edi, edi        ; status
.text:0000000000006322                 xor     eax, eax
.text:0000000000006324                 mov     rcx, r12
.text:0000000000006327                 mov     rdx, rbp        ; format
.text:000000000000632A                 call    _error
.text:000000000000632F                 test    bl, bl
.text:0000000000006331                 jz      short loc_6348
.text:0000000000006333                 mov     cs:exit_status, 2
.text:000000000000633D
.text:000000000000633D loc_633D:                               ; CODE XREF: file_failure+50↓j
.text:000000000000633D                 pop     rbx
.text:000000000000633E                 pop     rbp
.text:000000000000633F                 pop     r12
.text:0000000000006341                 retn
.text:0000000000006341 ; ---------------------------------------------------------------------------
.text:0000000000006342                 align 8
.text:0000000000006348
.text:0000000000006348 loc_6348:                               ; CODE XREF: file_failure+31↑j
.text:0000000000006348                 mov     eax, cs:exit_status
.text:000000000000634E                 test    eax, eax
.text:0000000000006350                 jnz     short loc_633D
.text:0000000000006352                 pop     rbx
.text:0000000000006353                 mov     cs:exit_status, 1
.text:000000000000635D                 pop     rbp
.text:000000000000635E                 pop     r12
.text:0000000000006360                 retn
.text:0000000000006360 ; } // starts at 6300
.text:0000000000006360 file_failure    endp
.text:0000000000006360
.text:0000000000006360 ; ---------------------------------------------------------------------------
.text:0000000000006361                 align 10h
.text:0000000000006370
.text:0000000000006370 ; =============== S U B R O U T I N E =======================================
.text:0000000000006370
.text:0000000000006370
.text:0000000000006370 xstrcoll_df_size proc near              ; DATA XREF: .data.rel.ro:000000000021F0E8↓o
.text:0000000000006370 ; __unwind {
.text:0000000000006370                 mov     edx, [rsi+0A8h]
.text:0000000000006376                 mov     ecx, [rdi+0A8h]
.text:000000000000637C                 cmp     edx, 3
.text:000000000000637F                 setz    al
.text:0000000000006382                 cmp     edx, 9
.text:0000000000006385                 setz    dl
.text:0000000000006388                 or      eax, edx
.text:000000000000638A                 cmp     ecx, 3
.text:000000000000638D                 jz      short loc_63B8
.text:000000000000638F                 cmp     ecx, 9
.text:0000000000006392                 jz      short loc_63B8
.text:0000000000006394                 mov     edx, [rdi+0ACh]
.text:000000000000639A                 and     edx, 0F000h
.text:00000000000063A0                 test    al, al
.text:00000000000063A2                 jz      short loc_63D8
.text:00000000000063A4
.text:00000000000063A4 loc_63A4:                               ; CODE XREF: xstrcoll_df_size+78↓j
.text:00000000000063A4                 cmp     edx, 4000h
.text:00000000000063AA                 jz      short loc_63F2
.text:00000000000063AC                 mov     eax, 1
.text:00000000000063B1                 retn
.text:00000000000063B1 ; ---------------------------------------------------------------------------
.text:00000000000063B2                 align 8
.text:00000000000063B8
.text:00000000000063B8 loc_63B8:                               ; CODE XREF: xstrcoll_df_size+1D↑j
.text:00000000000063B8                                         ; xstrcoll_df_size+22↑j
.text:00000000000063B8                 test    al, al
.text:00000000000063BA                 jnz     short loc_63F2
.text:00000000000063BC                 mov     eax, [rsi+0ACh]
.text:00000000000063C2                 and     eax, 0F000h
.text:00000000000063C7                 cmp     eax, 4000h
.text:00000000000063CC                 jz      short loc_63F2
.text:00000000000063CE
.text:00000000000063CE loc_63CE:                               ; CODE XREF: xstrcoll_df_size+80↓j
.text:00000000000063CE                                         ; xstrcoll_df_size+8A↓j
.text:00000000000063CE                 mov     eax, 0FFFFFFFFh
.text:00000000000063D3
.text:00000000000063D3 locret_63D3:                            ; CODE XREF: xstrcoll_df_size+91↓j
.text:00000000000063D3                 rep retn
.text:00000000000063D3 ; ---------------------------------------------------------------------------
.text:00000000000063D5                 align 8
.text:00000000000063D8
.text:00000000000063D8 loc_63D8:                               ; CODE XREF: xstrcoll_df_size+32↑j
.text:00000000000063D8                 mov     eax, [rsi+0ACh]
.text:00000000000063DE                 and     eax, 0F000h
.text:00000000000063E3                 cmp     eax, 4000h
.text:00000000000063E8                 jz      short loc_63A4
.text:00000000000063EA                 cmp     edx, 4000h
.text:00000000000063F0                 jz      short loc_63CE
.text:00000000000063F2
.text:00000000000063F2 loc_63F2:                               ; CODE XREF: xstrcoll_df_size+3A↑j
.text:00000000000063F2                                         ; xstrcoll_df_size+4A↑j ...
.text:00000000000063F2                 mov     rax, [rsi+48h]
.text:00000000000063F6                 cmp     [rdi+48h], rax
.text:00000000000063FA                 jg      short loc_63CE
.text:00000000000063FC                 mov     eax, 1
.text:0000000000006401                 jl      short locret_63D3
.text:0000000000006403                 mov     rsi, [rsi]      ; s2
.text:0000000000006406                 mov     rdi, [rdi]      ; s1
.text:0000000000006409                 jmp     xstrcoll
.text:0000000000006409 ; } // starts at 6370
.text:0000000000006409 xstrcoll_df_size endp
.text:0000000000006409
.text:0000000000006409 ; ---------------------------------------------------------------------------
.text:000000000000640E                 align 10h
.text:0000000000006410
.text:0000000000006410 ; =============== S U B R O U T I N E =======================================
.text:0000000000006410
.text:0000000000006410
.text:0000000000006410 strcmp_df_size  proc near               ; DATA XREF: .data.rel.ro:000000000021F108↓o
.text:0000000000006410 ; __unwind {
.text:0000000000006410                 mov     edx, [rsi+0A8h]
.text:0000000000006416                 mov     ecx, [rdi+0A8h]
.text:000000000000641C                 cmp     edx, 3
.text:000000000000641F                 setz    al
.text:0000000000006422                 cmp     edx, 9
.text:0000000000006425                 setz    dl
.text:0000000000006428                 or      eax, edx
.text:000000000000642A                 cmp     ecx, 3
.text:000000000000642D                 jz      short loc_6458
.text:000000000000642F                 cmp     ecx, 9
.text:0000000000006432                 jz      short loc_6458
.text:0000000000006434                 mov     edx, [rdi+0ACh]
.text:000000000000643A                 and     edx, 0F000h
.text:0000000000006440                 test    al, al
.text:0000000000006442                 jz      short loc_6478
.text:0000000000006444
.text:0000000000006444 loc_6444:                               ; CODE XREF: strcmp_df_size+78↓j
.text:0000000000006444                 cmp     edx, 4000h
.text:000000000000644A                 jz      short loc_6492
.text:000000000000644C
.text:000000000000644C loc_644C:                               ; CODE XREF: strcmp_df_size+8C↓j
.text:000000000000644C                 mov     eax, 1
.text:0000000000006451                 retn
.text:0000000000006451 ; ---------------------------------------------------------------------------
.text:0000000000006452                 align 8
.text:0000000000006458
.text:0000000000006458 loc_6458:                               ; CODE XREF: strcmp_df_size+1D↑j
.text:0000000000006458                                         ; strcmp_df_size+22↑j
.text:0000000000006458                 test    al, al
.text:000000000000645A                 jnz     short loc_6492
.text:000000000000645C                 mov     eax, [rsi+0ACh]
.text:0000000000006462                 and     eax, 0F000h
.text:0000000000006467                 cmp     eax, 4000h
.text:000000000000646C                 jz      short loc_6492
.text:000000000000646E
.text:000000000000646E loc_646E:                               ; CODE XREF: strcmp_df_size+80↓j
.text:000000000000646E                                         ; strcmp_df_size+8A↓j
.text:000000000000646E                 mov     eax, 0FFFFFFFFh
.text:0000000000006473                 retn
.text:0000000000006473 ; ---------------------------------------------------------------------------
.text:0000000000006474                 align 8
.text:0000000000006478
.text:0000000000006478 loc_6478:                               ; CODE XREF: strcmp_df_size+32↑j
.text:0000000000006478                 mov     eax, [rsi+0ACh]
.text:000000000000647E                 and     eax, 0F000h
.text:0000000000006483                 cmp     eax, 4000h
.text:0000000000006488                 jz      short loc_6444
.text:000000000000648A                 cmp     edx, 4000h
.text:0000000000006490                 jz      short loc_646E
.text:0000000000006492
.text:0000000000006492 loc_6492:                               ; CODE XREF: strcmp_df_size+3A↑j
.text:0000000000006492                                         ; strcmp_df_size+4A↑j ...
.text:0000000000006492                 mov     rax, [rsi+48h]
.text:0000000000006496                 cmp     [rdi+48h], rax
.text:000000000000649A                 jg      short loc_646E
.text:000000000000649C                 jl      short loc_644C
.text:000000000000649E                 mov     rsi, [rsi]      ; s2
.text:00000000000064A1                 mov     rdi, [rdi]      ; s1
.text:00000000000064A4                 jmp     _strcmp
.text:00000000000064A4 ; } // starts at 6410
.text:00000000000064A4 strcmp_df_size  endp
.text:00000000000064A4
.text:00000000000064A4 ; ---------------------------------------------------------------------------
.text:00000000000064A9                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0 rev_xstrcoll_df_size proc near          ; DATA XREF: .data.rel.ro:000000000021F0F8↓o
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 mov     rdx, rsi
.text:00000000000064B3                 mov     esi, [rdi+0A8h]
.text:00000000000064B9                 mov     ecx, [rdx+0A8h]
.text:00000000000064BF                 cmp     ecx, 3
.text:00000000000064C2                 setz    al
.text:00000000000064C5                 cmp     ecx, 9
.text:00000000000064C8                 setz    cl
.text:00000000000064CB                 or      eax, ecx
.text:00000000000064CD                 cmp     esi, 3
.text:00000000000064D0                 jz      short loc_64F8
.text:00000000000064D2                 cmp     esi, 9
.text:00000000000064D5                 jz      short loc_64F8
.text:00000000000064D7                 mov     ecx, [rdi+0ACh]
.text:00000000000064DD                 and     ecx, 0F000h
.text:00000000000064E3                 test    al, al
.text:00000000000064E5                 jz      short loc_6518
.text:00000000000064E7
.text:00000000000064E7 loc_64E7:                               ; CODE XREF: rev_xstrcoll_df_size+78↓j
.text:00000000000064E7                 cmp     ecx, 4000h
.text:00000000000064ED                 jz      short loc_6532
.text:00000000000064EF                 mov     eax, 1
.text:00000000000064F4                 retn
.text:00000000000064F4 ; ---------------------------------------------------------------------------
.text:00000000000064F5                 align 8
.text:00000000000064F8
.text:00000000000064F8 loc_64F8:                               ; CODE XREF: rev_xstrcoll_df_size+20↑j
.text:00000000000064F8                                         ; rev_xstrcoll_df_size+25↑j
.text:00000000000064F8                 test    al, al
.text:00000000000064FA                 jnz     short loc_6532
.text:00000000000064FC                 mov     eax, [rdx+0ACh]
.text:0000000000006502                 and     eax, 0F000h
.text:0000000000006507                 cmp     eax, 4000h
.text:000000000000650C                 jz      short loc_6532
.text:000000000000650E
.text:000000000000650E loc_650E:                               ; CODE XREF: rev_xstrcoll_df_size+80↓j
.text:000000000000650E                                         ; rev_xstrcoll_df_size+8A↓j
.text:000000000000650E                 mov     eax, 0FFFFFFFFh
.text:0000000000006513
.text:0000000000006513 locret_6513:                            ; CODE XREF: rev_xstrcoll_df_size+91↓j
.text:0000000000006513                 rep retn
.text:0000000000006513 ; ---------------------------------------------------------------------------
.text:0000000000006515                 align 8
.text:0000000000006518
.text:0000000000006518 loc_6518:                               ; CODE XREF: rev_xstrcoll_df_size+35↑j
.text:0000000000006518                 mov     eax, [rdx+0ACh]
.text:000000000000651E                 and     eax, 0F000h
.text:0000000000006523                 cmp     eax, 4000h
.text:0000000000006528                 jz      short loc_64E7
.text:000000000000652A                 cmp     ecx, 4000h
.text:0000000000006530                 jz      short loc_650E
.text:0000000000006532
.text:0000000000006532 loc_6532:                               ; CODE XREF: rev_xstrcoll_df_size+3D↑j
.text:0000000000006532                                         ; rev_xstrcoll_df_size+4A↑j ...
.text:0000000000006532                 mov     rax, [rdi+48h]
.text:0000000000006536                 cmp     [rdx+48h], rax
.text:000000000000653A                 jg      short loc_650E
.text:000000000000653C                 mov     eax, 1
.text:0000000000006541                 jl      short locret_6513
.text:0000000000006543                 mov     rsi, [rdi]      ; s2
.text:0000000000006546                 mov     rdi, [rdx]      ; s1
.text:0000000000006549                 jmp     xstrcoll
.text:0000000000006549 ; } // starts at 64B0
.text:0000000000006549 rev_xstrcoll_df_size endp
.text:0000000000006549
.text:0000000000006549 ; ---------------------------------------------------------------------------
.text:000000000000654E                 align 10h
.text:0000000000006550
.text:0000000000006550 ; =============== S U B R O U T I N E =======================================
.text:0000000000006550
.text:0000000000006550
.text:0000000000006550 rev_strcmp_df_size proc near            ; DATA XREF: .data.rel.ro:000000000021F118↓o
.text:0000000000006550 ; __unwind {
.text:0000000000006550                 mov     rdx, rsi
.text:0000000000006553                 mov     esi, [rdi+0A8h]
.text:0000000000006559                 mov     ecx, [rdx+0A8h]
.text:000000000000655F                 cmp     ecx, 3
.text:0000000000006562                 setz    al
.text:0000000000006565                 cmp     ecx, 9
.text:0000000000006568                 setz    cl
.text:000000000000656B                 or      eax, ecx
.text:000000000000656D                 cmp     esi, 3
.text:0000000000006570                 jz      short loc_6598
.text:0000000000006572                 cmp     esi, 9
.text:0000000000006575                 jz      short loc_6598
.text:0000000000006577                 mov     ecx, [rdi+0ACh]
.text:000000000000657D                 and     ecx, 0F000h
.text:0000000000006583                 test    al, al
.text:0000000000006585                 jz      short loc_65B8
.text:0000000000006587
.text:0000000000006587 loc_6587:                               ; CODE XREF: rev_strcmp_df_size+78↓j
.text:0000000000006587                 cmp     ecx, 4000h
.text:000000000000658D                 jz      short loc_65D2
.text:000000000000658F
.text:000000000000658F loc_658F:                               ; CODE XREF: rev_strcmp_df_size+8C↓j
.text:000000000000658F                 mov     eax, 1
.text:0000000000006594                 retn
.text:0000000000006594 ; ---------------------------------------------------------------------------
.text:0000000000006595                 align 8
.text:0000000000006598
.text:0000000000006598 loc_6598:                               ; CODE XREF: rev_strcmp_df_size+20↑j
.text:0000000000006598                                         ; rev_strcmp_df_size+25↑j
.text:0000000000006598                 test    al, al
.text:000000000000659A                 jnz     short loc_65D2
.text:000000000000659C                 mov     eax, [rdx+0ACh]
.text:00000000000065A2                 and     eax, 0F000h
.text:00000000000065A7                 cmp     eax, 4000h
.text:00000000000065AC                 jz      short loc_65D2
.text:00000000000065AE
.text:00000000000065AE loc_65AE:                               ; CODE XREF: rev_strcmp_df_size+80↓j
.text:00000000000065AE                                         ; rev_strcmp_df_size+8A↓j
.text:00000000000065AE                 mov     eax, 0FFFFFFFFh
.text:00000000000065B3                 retn
.text:00000000000065B3 ; ---------------------------------------------------------------------------
.text:00000000000065B4                 align 8
.text:00000000000065B8
.text:00000000000065B8 loc_65B8:                               ; CODE XREF: rev_strcmp_df_size+35↑j
.text:00000000000065B8                 mov     eax, [rdx+0ACh]
.text:00000000000065BE                 and     eax, 0F000h
.text:00000000000065C3                 cmp     eax, 4000h
.text:00000000000065C8                 jz      short loc_6587
.text:00000000000065CA                 cmp     ecx, 4000h
.text:00000000000065D0                 jz      short loc_65AE
.text:00000000000065D2
.text:00000000000065D2 loc_65D2:                               ; CODE XREF: rev_strcmp_df_size+3D↑j
.text:00000000000065D2                                         ; rev_strcmp_df_size+4A↑j ...
.text:00000000000065D2                 mov     rax, [rdi+48h]
.text:00000000000065D6                 cmp     [rdx+48h], rax
.text:00000000000065DA                 jg      short loc_65AE
.text:00000000000065DC                 jl      short loc_658F
.text:00000000000065DE                 mov     rsi, [rdi]      ; s2
.text:00000000000065E1                 mov     rdi, [rdx]      ; s1
.text:00000000000065E4                 jmp     _strcmp
.text:00000000000065E4 ; } // starts at 6550
.text:00000000000065E4 rev_strcmp_df_size endp
.text:00000000000065E4
.text:00000000000065E4 ; ---------------------------------------------------------------------------
.text:00000000000065E9                 align 10h
.text:00000000000065F0
.text:00000000000065F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000065F0
.text:00000000000065F0
.text:00000000000065F0 xstrcoll_df_name proc near              ; DATA XREF: .data.rel.ro:000000000021F068↓o
.text:00000000000065F0 ; __unwind {
.text:00000000000065F0                 mov     edx, [rsi+0A8h]
.text:00000000000065F6                 mov     ecx, [rdi+0A8h]
.text:00000000000065FC                 cmp     edx, 3
.text:00000000000065FF                 setz    al
.text:0000000000006602                 cmp     edx, 9
.text:0000000000006605                 setz    dl
.text:0000000000006608                 or      eax, edx
.text:000000000000660A                 cmp     ecx, 3
.text:000000000000660D                 jz      short loc_6638
.text:000000000000660F                 cmp     ecx, 9
.text:0000000000006612                 jz      short loc_6638
.text:0000000000006614                 mov     edx, [rdi+0ACh]
.text:000000000000661A                 and     edx, 0F000h
.text:0000000000006620                 test    al, al
.text:0000000000006622                 jz      short loc_6658
.text:0000000000006624
.text:0000000000006624 loc_6624:                               ; CODE XREF: xstrcoll_df_name+78↓j
.text:0000000000006624                 cmp     edx, 4000h
.text:000000000000662A                 jz      short loc_6672
.text:000000000000662C                 mov     eax, 1
.text:0000000000006631                 retn
.text:0000000000006631 ; ---------------------------------------------------------------------------
.text:0000000000006632                 align 8
.text:0000000000006638
.text:0000000000006638 loc_6638:                               ; CODE XREF: xstrcoll_df_name+1D↑j
.text:0000000000006638                                         ; xstrcoll_df_name+22↑j
.text:0000000000006638                 test    al, al
.text:000000000000663A                 jnz     short loc_6672
.text:000000000000663C                 mov     eax, [rsi+0ACh]
.text:0000000000006642                 and     eax, 0F000h
.text:0000000000006647                 cmp     eax, 4000h
.text:000000000000664C                 jz      short loc_6672
.text:000000000000664E
.text:000000000000664E loc_664E:                               ; CODE XREF: xstrcoll_df_name+80↓j
.text:000000000000664E                 mov     eax, 0FFFFFFFFh
.text:0000000000006653                 retn
.text:0000000000006653 ; ---------------------------------------------------------------------------
.text:0000000000006654                 align 8
.text:0000000000006658
.text:0000000000006658 loc_6658:                               ; CODE XREF: xstrcoll_df_name+32↑j
.text:0000000000006658                 mov     eax, [rsi+0ACh]
.text:000000000000665E                 and     eax, 0F000h
.text:0000000000006663                 cmp     eax, 4000h
.text:0000000000006668                 jz      short loc_6624
.text:000000000000666A                 cmp     edx, 4000h
.text:0000000000006670                 jz      short loc_664E
.text:0000000000006672
.text:0000000000006672 loc_6672:                               ; CODE XREF: xstrcoll_df_name+3A↑j
.text:0000000000006672                                         ; xstrcoll_df_name+4A↑j ...
.text:0000000000006672                 mov     rsi, [rsi]      ; s2
.text:0000000000006675                 mov     rdi, [rdi]      ; s1
.text:0000000000006678                 jmp     xstrcoll
.text:0000000000006678 ; } // starts at 65F0
.text:0000000000006678 xstrcoll_df_name endp
.text:0000000000006678
.text:0000000000006678 ; ---------------------------------------------------------------------------
.text:000000000000667D                 align 20h
.text:0000000000006680
.text:0000000000006680 ; =============== S U B R O U T I N E =======================================
.text:0000000000006680
.text:0000000000006680
.text:0000000000006680 strcmp_df_name  proc near               ; DATA XREF: .data.rel.ro:000000000021F088↓o
.text:0000000000006680 ; __unwind {
.text:0000000000006680                 mov     edx, [rsi+0A8h]
.text:0000000000006686                 mov     ecx, [rdi+0A8h]
.text:000000000000668C                 cmp     edx, 3
.text:000000000000668F                 setz    al
.text:0000000000006692                 cmp     edx, 9
.text:0000000000006695                 setz    dl
.text:0000000000006698                 or      eax, edx
.text:000000000000669A                 cmp     ecx, 3
.text:000000000000669D                 jz      short loc_66C8
.text:000000000000669F                 cmp     ecx, 9
.text:00000000000066A2                 jz      short loc_66C8
.text:00000000000066A4                 mov     edx, [rdi+0ACh]
.text:00000000000066AA                 and     edx, 0F000h
.text:00000000000066B0                 test    al, al
.text:00000000000066B2                 jz      short loc_66E8
.text:00000000000066B4
.text:00000000000066B4 loc_66B4:                               ; CODE XREF: strcmp_df_name+78↓j
.text:00000000000066B4                 cmp     edx, 4000h
.text:00000000000066BA                 jz      short loc_6702
.text:00000000000066BC                 mov     eax, 1
.text:00000000000066C1                 retn
.text:00000000000066C1 ; ---------------------------------------------------------------------------
.text:00000000000066C2                 align 8
.text:00000000000066C8
.text:00000000000066C8 loc_66C8:                               ; CODE XREF: strcmp_df_name+1D↑j
.text:00000000000066C8                                         ; strcmp_df_name+22↑j
.text:00000000000066C8                 test    al, al
.text:00000000000066CA                 jnz     short loc_6702
.text:00000000000066CC                 mov     eax, [rsi+0ACh]
.text:00000000000066D2                 and     eax, 0F000h
.text:00000000000066D7                 cmp     eax, 4000h
.text:00000000000066DC                 jz      short loc_6702
.text:00000000000066DE
.text:00000000000066DE loc_66DE:                               ; CODE XREF: strcmp_df_name+80↓j
.text:00000000000066DE                 mov     eax, 0FFFFFFFFh
.text:00000000000066E3                 retn
.text:00000000000066E3 ; ---------------------------------------------------------------------------
.text:00000000000066E4                 align 8
.text:00000000000066E8
.text:00000000000066E8 loc_66E8:                               ; CODE XREF: strcmp_df_name+32↑j
.text:00000000000066E8                 mov     eax, [rsi+0ACh]
.text:00000000000066EE                 and     eax, 0F000h
.text:00000000000066F3                 cmp     eax, 4000h
.text:00000000000066F8                 jz      short loc_66B4
.text:00000000000066FA                 cmp     edx, 4000h
.text:0000000000006700                 jz      short loc_66DE
.text:0000000000006702
.text:0000000000006702 loc_6702:                               ; CODE XREF: strcmp_df_name+3A↑j
.text:0000000000006702                                         ; strcmp_df_name+4A↑j ...
.text:0000000000006702                 mov     rsi, [rsi]      ; s2
.text:0000000000006705                 mov     rdi, [rdi]      ; s1
.text:0000000000006708                 jmp     _strcmp
.text:0000000000006708 ; } // starts at 6680
.text:0000000000006708 strcmp_df_name  endp
.text:0000000000006708
.text:0000000000006708 ; ---------------------------------------------------------------------------
.text:000000000000670D                 align 10h
.text:0000000000006710
.text:0000000000006710 ; =============== S U B R O U T I N E =======================================
.text:0000000000006710
.text:0000000000006710
.text:0000000000006710 rev_xstrcoll_df_name proc near          ; DATA XREF: .data.rel.ro:000000000021F078↓o
.text:0000000000006710 ; __unwind {
.text:0000000000006710                 mov     rcx, rsi
.text:0000000000006713                 mov     esi, [rdi+0A8h]
.text:0000000000006719                 mov     edx, [rcx+0A8h]
.text:000000000000671F                 cmp     edx, 3
.text:0000000000006722                 setz    al
.text:0000000000006725                 cmp     edx, 9
.text:0000000000006728                 setz    dl
.text:000000000000672B                 or      eax, edx
.text:000000000000672D                 cmp     esi, 3
.text:0000000000006730                 jz      short loc_6758
.text:0000000000006732                 cmp     esi, 9
.text:0000000000006735                 jz      short loc_6758
.text:0000000000006737                 mov     edx, [rdi+0ACh]
.text:000000000000673D                 and     edx, 0F000h
.text:0000000000006743                 test    al, al
.text:0000000000006745                 jz      short loc_6778
.text:0000000000006747
.text:0000000000006747 loc_6747:                               ; CODE XREF: rev_xstrcoll_df_name+78↓j
.text:0000000000006747                 cmp     edx, 4000h
.text:000000000000674D                 jz      short loc_6792
.text:000000000000674F                 mov     eax, 1
.text:0000000000006754                 retn
.text:0000000000006754 ; ---------------------------------------------------------------------------
.text:0000000000006755                 align 8
.text:0000000000006758
.text:0000000000006758 loc_6758:                               ; CODE XREF: rev_xstrcoll_df_name+20↑j
.text:0000000000006758                                         ; rev_xstrcoll_df_name+25↑j
.text:0000000000006758                 test    al, al
.text:000000000000675A                 jnz     short loc_6792
.text:000000000000675C                 mov     eax, [rcx+0ACh]
.text:0000000000006762                 and     eax, 0F000h
.text:0000000000006767                 cmp     eax, 4000h
.text:000000000000676C                 jz      short loc_6792
.text:000000000000676E
.text:000000000000676E loc_676E:                               ; CODE XREF: rev_xstrcoll_df_name+80↓j
.text:000000000000676E                 mov     eax, 0FFFFFFFFh
.text:0000000000006773                 retn
.text:0000000000006773 ; ---------------------------------------------------------------------------
.text:0000000000006774                 align 8
.text:0000000000006778
.text:0000000000006778 loc_6778:                               ; CODE XREF: rev_xstrcoll_df_name+35↑j
.text:0000000000006778                 mov     eax, [rcx+0ACh]
.text:000000000000677E                 and     eax, 0F000h
.text:0000000000006783                 cmp     eax, 4000h
.text:0000000000006788                 jz      short loc_6747
.text:000000000000678A                 cmp     edx, 4000h
.text:0000000000006790                 jz      short loc_676E
.text:0000000000006792
.text:0000000000006792 loc_6792:                               ; CODE XREF: rev_xstrcoll_df_name+3D↑j
.text:0000000000006792                                         ; rev_xstrcoll_df_name+4A↑j ...
.text:0000000000006792                 mov     rsi, [rdi]      ; s2
.text:0000000000006795                 mov     rdi, [rcx]      ; s1
.text:0000000000006798                 jmp     xstrcoll
.text:0000000000006798 ; } // starts at 6710
.text:0000000000006798 rev_xstrcoll_df_name endp
.text:0000000000006798
.text:0000000000006798 ; ---------------------------------------------------------------------------
.text:000000000000679D                 align 20h
.text:00000000000067A0
.text:00000000000067A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067A0
.text:00000000000067A0
.text:00000000000067A0 rev_strcmp_df_name proc near            ; DATA XREF: .data.rel.ro:000000000021F098↓o
.text:00000000000067A0 ; __unwind {
.text:00000000000067A0                 mov     rdx, rsi
.text:00000000000067A3                 mov     esi, [rdi+0A8h]
.text:00000000000067A9                 mov     ecx, [rdx+0A8h]
.text:00000000000067AF                 cmp     ecx, 3
.text:00000000000067B2                 setz    al
.text:00000000000067B5                 cmp     ecx, 9
.text:00000000000067B8                 setz    cl
.text:00000000000067BB                 or      eax, ecx
.text:00000000000067BD                 cmp     esi, 3
.text:00000000000067C0                 jz      short loc_67E8
.text:00000000000067C2                 cmp     esi, 9
.text:00000000000067C5                 jz      short loc_67E8
.text:00000000000067C7                 mov     ecx, [rdi+0ACh]
.text:00000000000067CD                 and     ecx, 0F000h
.text:00000000000067D3                 test    al, al
.text:00000000000067D5                 jz      short loc_6808
.text:00000000000067D7
.text:00000000000067D7 loc_67D7:                               ; CODE XREF: rev_strcmp_df_name+78↓j
.text:00000000000067D7                 cmp     ecx, 4000h
.text:00000000000067DD                 jz      short loc_6822
.text:00000000000067DF                 mov     eax, 1
.text:00000000000067E4                 retn
.text:00000000000067E4 ; ---------------------------------------------------------------------------
.text:00000000000067E5                 align 8
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: rev_strcmp_df_name+20↑j
.text:00000000000067E8                                         ; rev_strcmp_df_name+25↑j
.text:00000000000067E8                 test    al, al
.text:00000000000067EA                 jnz     short loc_6822
.text:00000000000067EC                 mov     eax, [rdx+0ACh]
.text:00000000000067F2                 and     eax, 0F000h
.text:00000000000067F7                 cmp     eax, 4000h
.text:00000000000067FC                 jz      short loc_6822
.text:00000000000067FE
.text:00000000000067FE loc_67FE:                               ; CODE XREF: rev_strcmp_df_name+80↓j
.text:00000000000067FE                 mov     eax, 0FFFFFFFFh
.text:0000000000006803                 retn
.text:0000000000006803 ; ---------------------------------------------------------------------------
.text:0000000000006804                 align 8
.text:0000000000006808
.text:0000000000006808 loc_6808:                               ; CODE XREF: rev_strcmp_df_name+35↑j
.text:0000000000006808                 mov     eax, [rdx+0ACh]
.text:000000000000680E                 and     eax, 0F000h
.text:0000000000006813                 cmp     eax, 4000h
.text:0000000000006818                 jz      short loc_67D7
.text:000000000000681A                 cmp     ecx, 4000h
.text:0000000000006820                 jz      short loc_67FE
.text:0000000000006822
.text:0000000000006822 loc_6822:                               ; CODE XREF: rev_strcmp_df_name+3D↑j
.text:0000000000006822                                         ; rev_strcmp_df_name+4A↑j ...
.text:0000000000006822                 mov     rsi, [rdi]      ; s2
.text:0000000000006825                 mov     rdi, [rdx]      ; s1
.text:0000000000006828                 jmp     _strcmp
.text:0000000000006828 ; } // starts at 67A0
.text:0000000000006828 rev_strcmp_df_name endp
.text:0000000000006828
.text:0000000000006828 ; ---------------------------------------------------------------------------
.text:000000000000682D                 align 10h
.text:0000000000006830
.text:0000000000006830 ; =============== S U B R O U T I N E =======================================
.text:0000000000006830
.text:0000000000006830 ; Attributes: info_from_lumina
.text:0000000000006830
.text:0000000000006830 ; char __fastcall get_type_indicator(_Bool stat_ok, mode_t mode, filetype type)
.text:0000000000006830 get_type_indicator proc near            ; CODE XREF: print_type_indicator+5↓p
.text:0000000000006830                                         ; length_of_file_name_and_frills+9F↓p
.text:0000000000006830 ; __unwind {
.text:0000000000006830                 test    dil, dil
.text:0000000000006833                 jz      short loc_6858
.text:0000000000006835                 mov     eax, esi
.text:0000000000006837                 and     eax, 0F000h
.text:000000000000683C                 cmp     eax, 8000h
.text:0000000000006841                 jnz     short loc_68B0
.text:0000000000006843                 xor     eax, eax
.text:0000000000006845                 cmp     cs:indicator_style, 3
.text:000000000000684C                 jz      loc_68F8
.text:0000000000006852
.text:0000000000006852 locret_6852:                            ; CODE XREF: get_type_indicator+44↓j
.text:0000000000006852                                         ; get_type_indicator+4F↓j
.text:0000000000006852                 rep retn
.text:0000000000006852 ; ---------------------------------------------------------------------------
.text:0000000000006854                 align 8
.text:0000000000006858
.text:0000000000006858 loc_6858:                               ; CODE XREF: get_type_indicator+3↑j
.text:0000000000006858                 xor     eax, eax
.text:000000000000685A                 cmp     edx, 5
.text:000000000000685D                 jz      short locret_68C0
.text:000000000000685F                 cmp     edx, 3
.text:0000000000006862                 setz    cl
.text:0000000000006865                 cmp     edx, 9
.text:0000000000006868                 setz    al
.text:000000000000686B                 or      ecx, eax
.text:000000000000686D
.text:000000000000686D loc_686D:                               ; CODE XREF: get_type_indicator+88↓j
.text:000000000000686D                 test    cl, cl
.text:000000000000686F                 mov     eax, 2Fh ; '/'
.text:0000000000006874                 jnz     short locret_6852
.text:0000000000006876                 xor     eax, eax
.text:0000000000006878                 cmp     cs:indicator_style, 1
.text:000000000000687F                 jz      short locret_6852
.text:0000000000006881                 test    dil, dil
.text:0000000000006884                 jnz     short loc_68C8
.text:0000000000006886                 cmp     edx, 6
.text:0000000000006889                 mov     eax, 40h ; '@'
.text:000000000000688E                 jz      locret_6910
.text:0000000000006894                 cmp     edx, 1
.text:0000000000006897                 mov     eax, 7Ch ; '|'
.text:000000000000689C                 jz      locret_6928
.text:00000000000068A2                 cmp     edx, 7
.text:00000000000068A5                 setz    al
.text:00000000000068A8
.text:00000000000068A8 loc_68A8:                               ; CODE XREF: get_type_indicator+C1↓j
.text:00000000000068A8                 neg     eax
.text:00000000000068AA                 and     eax, 3Dh
.text:00000000000068AD                 retn
.text:00000000000068AD ; ---------------------------------------------------------------------------
.text:00000000000068AE                 align 10h
.text:00000000000068B0
.text:00000000000068B0 loc_68B0:                               ; CODE XREF: get_type_indicator+11↑j
.text:00000000000068B0                 cmp     eax, 4000h
.text:00000000000068B5                 setz    cl
.text:00000000000068B8                 jmp     short loc_686D
.text:00000000000068B8 ; ---------------------------------------------------------------------------
.text:00000000000068BA                 align 20h
.text:00000000000068C0
.text:00000000000068C0 locret_68C0:                            ; CODE XREF: get_type_indicator+2D↑j
.text:00000000000068C0                 rep retn
.text:00000000000068C0 ; ---------------------------------------------------------------------------
.text:00000000000068C2                 align 8
.text:00000000000068C8
.text:00000000000068C8 loc_68C8:                               ; CODE XREF: get_type_indicator+54↑j
.text:00000000000068C8                 and     esi, 0F000h
.text:00000000000068CE                 mov     eax, 40h ; '@'
.text:00000000000068D3                 cmp     esi, 0A000h
.text:00000000000068D9                 jz      short locret_6918
.text:00000000000068DB                 cmp     esi, 1000h
.text:00000000000068E1                 mov     eax, 7Ch ; '|'
.text:00000000000068E6                 jz      short locret_6920
.text:00000000000068E8                 cmp     esi, 0C000h
.text:00000000000068EE                 setz    al
.text:00000000000068F1                 jmp     short loc_68A8
.text:00000000000068F1 ; ---------------------------------------------------------------------------
.text:00000000000068F3                 align 8
.text:00000000000068F8
.text:00000000000068F8 loc_68F8:                               ; CODE XREF: get_type_indicator+1C↑j
.text:00000000000068F8                 and     esi, 49h
.text:00000000000068FB                 cmp     esi, 1
.text:00000000000068FE                 sbb     eax, eax
.text:0000000000006900                 not     eax
.text:0000000000006902                 and     eax, 2Ah
.text:0000000000006905                 retn
.text:0000000000006905 ; ---------------------------------------------------------------------------
.text:0000000000006906                 align 10h
.text:0000000000006910
.text:0000000000006910 locret_6910:                            ; CODE XREF: get_type_indicator+5E↑j
.text:0000000000006910                 rep retn
.text:0000000000006910 ; ---------------------------------------------------------------------------
.text:0000000000006912                 align 8
.text:0000000000006918
.text:0000000000006918 locret_6918:                            ; CODE XREF: get_type_indicator+A9↑j
.text:0000000000006918                 rep retn
.text:0000000000006918 ; ---------------------------------------------------------------------------
.text:000000000000691A                 align 20h
.text:0000000000006920
.text:0000000000006920 locret_6920:                            ; CODE XREF: get_type_indicator+B6↑j
.text:0000000000006920                 rep retn
.text:0000000000006920 ; ---------------------------------------------------------------------------
.text:0000000000006922                 align 8
.text:0000000000006928
.text:0000000000006928 locret_6928:                            ; CODE XREF: get_type_indicator+6C↑j
.text:0000000000006928                 rep retn
.text:0000000000006928 ; } // starts at 6830
.text:0000000000006928 get_type_indicator endp
.text:0000000000006928
.text:0000000000006928 ; ---------------------------------------------------------------------------
.text:000000000000692A                 align 10h
.text:0000000000006930
.text:0000000000006930 ; =============== S U B R O U T I N E =======================================
.text:0000000000006930
.text:0000000000006930 ; Attributes: info_from_lumina
.text:0000000000006930
.text:0000000000006930 ; _Bool __fastcall print_type_indicator(_Bool stat_ok, mode_t mode, filetype type)
.text:0000000000006930 print_type_indicator proc near          ; CODE XREF: print_file_name_and_frills+112↓p
.text:0000000000006930                                         ; print_long_format+3BA↓p ...
.text:0000000000006930 ; __unwind {
.text:0000000000006930                 push    rbx
.text:0000000000006931                 movzx   edi, dil
.text:0000000000006935                 call    get_type_indicator
.text:000000000000693A                 test    al, al
.text:000000000000693C                 mov     ebx, eax
.text:000000000000693E                 jz      short loc_6963
.text:0000000000006940                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000006947                 mov     rax, [rdi+28h]
.text:000000000000694B                 cmp     rax, [rdi+30h]
.text:000000000000694F                 jnb     short loc_6970
.text:0000000000006951                 lea     rdx, [rax+1]
.text:0000000000006955                 mov     [rdi+28h], rdx
.text:0000000000006959                 mov     [rax], bl
.text:000000000000695B
.text:000000000000695B loc_695B:                               ; CODE XREF: print_type_indicator+48↓j
.text:000000000000695B                 add     cs:dired_pos, 1
.text:0000000000006963
.text:0000000000006963 loc_6963:                               ; CODE XREF: print_type_indicator+E↑j
.text:0000000000006963                 test    bl, bl
.text:0000000000006965                 setnz   al
.text:0000000000006968                 pop     rbx
.text:0000000000006969                 retn
.text:0000000000006969 ; ---------------------------------------------------------------------------
.text:000000000000696A                 align 10h
.text:0000000000006970
.text:0000000000006970 loc_6970:                               ; CODE XREF: print_type_indicator+1F↑j
.text:0000000000006970                 movzx   esi, bl         ; int
.text:0000000000006973                 call    ___overflow
.text:0000000000006978                 jmp     short loc_695B
.text:0000000000006978 ; } // starts at 6930
.text:0000000000006978 print_type_indicator endp
.text:0000000000006978
.text:0000000000006978 ; ---------------------------------------------------------------------------
.text:000000000000697A                 align 20h
.text:0000000000006980
.text:0000000000006980 ; =============== S U B R O U T I N E =======================================
.text:0000000000006980
.text:0000000000006980
.text:0000000000006980 strcmp_df_mtime proc near               ; DATA XREF: .data.rel.ro:000000000021F188↓o
.text:0000000000006980 ; __unwind {
.text:0000000000006980                 mov     edx, [rsi+0A8h]
.text:0000000000006986                 mov     ecx, [rdi+0A8h]
.text:000000000000698C                 cmp     edx, 3
.text:000000000000698F                 setz    al
.text:0000000000006992                 cmp     edx, 9
.text:0000000000006995                 setz    dl
.text:0000000000006998                 or      eax, edx
.text:000000000000699A                 cmp     ecx, 3
.text:000000000000699D                 jz      short loc_69C8
.text:000000000000699F                 cmp     ecx, 9
.text:00000000000069A2                 jz      short loc_69C8
.text:00000000000069A4                 mov     edx, [rdi+0ACh]
.text:00000000000069AA                 and     edx, 0F000h
.text:00000000000069B0                 test    al, al
.text:00000000000069B2                 jz      short loc_69E8
.text:00000000000069B4
.text:00000000000069B4 loc_69B4:                               ; CODE XREF: strcmp_df_mtime+78↓j
.text:00000000000069B4                 cmp     edx, 4000h
.text:00000000000069BA                 jz      short loc_6A08
.text:00000000000069BC
.text:00000000000069BC loc_69BC:                               ; CODE XREF: strcmp_df_mtime+92↓j
.text:00000000000069BC                 mov     eax, 1
.text:00000000000069C1                 retn
.text:00000000000069C1 ; ---------------------------------------------------------------------------
.text:00000000000069C2                 align 8
.text:00000000000069C8
.text:00000000000069C8 loc_69C8:                               ; CODE XREF: strcmp_df_mtime+1D↑j
.text:00000000000069C8                                         ; strcmp_df_mtime+22↑j
.text:00000000000069C8                 test    al, al
.text:00000000000069CA                 jnz     short loc_6A08
.text:00000000000069CC                 mov     eax, [rsi+0ACh]
.text:00000000000069D2                 and     eax, 0F000h
.text:00000000000069D7                 cmp     eax, 4000h
.text:00000000000069DC                 jz      short loc_6A08
.text:00000000000069DE
.text:00000000000069DE loc_69DE:                               ; CODE XREF: strcmp_df_mtime+80↓j
.text:00000000000069DE                                         ; strcmp_df_mtime+90↓j
.text:00000000000069DE                 mov     eax, 0FFFFFFFFh
.text:00000000000069E3
.text:00000000000069E3 locret_69E3:                            ; CODE XREF: strcmp_df_mtime+9B↓j
.text:00000000000069E3                 rep retn
.text:00000000000069E3 ; ---------------------------------------------------------------------------
.text:00000000000069E5                 align 8
.text:00000000000069E8
.text:00000000000069E8 loc_69E8:                               ; CODE XREF: strcmp_df_mtime+32↑j
.text:00000000000069E8                 mov     eax, [rsi+0ACh]
.text:00000000000069EE                 and     eax, 0F000h
.text:00000000000069F3                 cmp     eax, 4000h
.text:00000000000069F8                 jz      short loc_69B4
.text:00000000000069FA                 cmp     edx, 4000h
.text:0000000000006A00                 jz      short loc_69DE
.text:0000000000006A02                 nop     word ptr [rax+rax+00h]
.text:0000000000006A08
.text:0000000000006A08 loc_6A08:                               ; CODE XREF: strcmp_df_mtime+3A↑j
.text:0000000000006A08                                         ; strcmp_df_mtime+4A↑j ...
.text:0000000000006A08                 mov     rax, [rsi+70h]
.text:0000000000006A0C                 cmp     [rdi+70h], rax
.text:0000000000006A10                 jg      short loc_69DE
.text:0000000000006A12                 jl      short loc_69BC
.text:0000000000006A14                 mov     rax, [rsi+78h]
.text:0000000000006A18                 sub     eax, [rdi+78h]
.text:0000000000006A1B                 jnz     short locret_69E3
.text:0000000000006A1D                 mov     rsi, [rsi]      ; s2
.text:0000000000006A20                 mov     rdi, [rdi]      ; s1
.text:0000000000006A23                 jmp     _strcmp
.text:0000000000006A23 ; } // starts at 6980
.text:0000000000006A23 strcmp_df_mtime endp
.text:0000000000006A23
.text:0000000000006A23 ; ---------------------------------------------------------------------------
.text:0000000000006A28                 align 10h
.text:0000000000006A30
.text:0000000000006A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A30
.text:0000000000006A30
.text:0000000000006A30 rev_xstrcoll_df_version proc near       ; DATA XREF: .data.rel.ro:000000000021F138↓o
.text:0000000000006A30 ; __unwind {
.text:0000000000006A30                 mov     rdx, rsi
.text:0000000000006A33                 mov     esi, [rdi+0A8h]
.text:0000000000006A39                 mov     ecx, [rdx+0A8h]
.text:0000000000006A3F                 cmp     ecx, 3
.text:0000000000006A42                 setz    al
.text:0000000000006A45                 cmp     ecx, 9
.text:0000000000006A48                 setz    cl
.text:0000000000006A4B                 or      eax, ecx
.text:0000000000006A4D                 cmp     esi, 3
.text:0000000000006A50                 jz      short loc_6A78
.text:0000000000006A52                 cmp     esi, 9
.text:0000000000006A55                 jz      short loc_6A78
.text:0000000000006A57                 mov     ecx, [rdi+0ACh]
.text:0000000000006A5D                 and     ecx, 0F000h
.text:0000000000006A63                 test    al, al
.text:0000000000006A65                 jz      short loc_6A98
.text:0000000000006A67
.text:0000000000006A67 loc_6A67:                               ; CODE XREF: rev_xstrcoll_df_version+78↓j
.text:0000000000006A67                 cmp     ecx, 4000h
.text:0000000000006A6D                 jz      short loc_6AB2
.text:0000000000006A6F                 mov     eax, 1
.text:0000000000006A74                 retn
.text:0000000000006A74 ; ---------------------------------------------------------------------------
.text:0000000000006A75                 align 8
.text:0000000000006A78
.text:0000000000006A78 loc_6A78:                               ; CODE XREF: rev_xstrcoll_df_version+20↑j
.text:0000000000006A78                                         ; rev_xstrcoll_df_version+25↑j
.text:0000000000006A78                 test    al, al
.text:0000000000006A7A                 jnz     short loc_6AB2
.text:0000000000006A7C                 mov     eax, [rdx+0ACh]
.text:0000000000006A82                 and     eax, 0F000h
.text:0000000000006A87                 cmp     eax, 4000h
.text:0000000000006A8C                 jz      short loc_6AB2
.text:0000000000006A8E
.text:0000000000006A8E loc_6A8E:                               ; CODE XREF: rev_xstrcoll_df_version+80↓j
.text:0000000000006A8E                 mov     eax, 0FFFFFFFFh
.text:0000000000006A93                 retn
.text:0000000000006A93 ; ---------------------------------------------------------------------------
.text:0000000000006A94                 align 8
.text:0000000000006A98
.text:0000000000006A98 loc_6A98:                               ; CODE XREF: rev_xstrcoll_df_version+35↑j
.text:0000000000006A98                 mov     eax, [rdx+0ACh]
.text:0000000000006A9E                 and     eax, 0F000h
.text:0000000000006AA3                 cmp     eax, 4000h
.text:0000000000006AA8                 jz      short loc_6A67
.text:0000000000006AAA                 cmp     ecx, 4000h
.text:0000000000006AB0                 jz      short loc_6A8E
.text:0000000000006AB2
.text:0000000000006AB2 loc_6AB2:                               ; CODE XREF: rev_xstrcoll_df_version+3D↑j
.text:0000000000006AB2                                         ; rev_xstrcoll_df_version+4A↑j ...
.text:0000000000006AB2                 mov     rsi, [rdi]      ; s2
.text:0000000000006AB5                 mov     rdi, [rdx]      ; s1
.text:0000000000006AB8                 jmp     filevercmp
.text:0000000000006AB8 ; } // starts at 6A30
.text:0000000000006AB8 rev_xstrcoll_df_version endp
.text:0000000000006AB8
.text:0000000000006AB8 ; ---------------------------------------------------------------------------
.text:0000000000006ABD                 align 20h
.text:0000000000006AC0
.text:0000000000006AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AC0
.text:0000000000006AC0
.text:0000000000006AC0 xstrcoll_df_version proc near           ; DATA XREF: .data.rel.ro:000000000021F128↓o
.text:0000000000006AC0 ; __unwind {
.text:0000000000006AC0                 mov     edx, [rsi+0A8h]
.text:0000000000006AC6                 mov     ecx, [rdi+0A8h]
.text:0000000000006ACC                 cmp     edx, 3
.text:0000000000006ACF                 setz    al
.text:0000000000006AD2                 cmp     edx, 9
.text:0000000000006AD5                 setz    dl
.text:0000000000006AD8                 or      eax, edx
.text:0000000000006ADA                 cmp     ecx, 3
.text:0000000000006ADD                 jz      short loc_6B08
.text:0000000000006ADF                 cmp     ecx, 9
.text:0000000000006AE2                 jz      short loc_6B08
.text:0000000000006AE4                 mov     edx, [rdi+0ACh]
.text:0000000000006AEA                 and     edx, 0F000h
.text:0000000000006AF0                 test    al, al
.text:0000000000006AF2                 jz      short loc_6B28
.text:0000000000006AF4
.text:0000000000006AF4 loc_6AF4:                               ; CODE XREF: xstrcoll_df_version+78↓j
.text:0000000000006AF4                 cmp     edx, 4000h
.text:0000000000006AFA                 jz      short loc_6B42
.text:0000000000006AFC                 mov     eax, 1
.text:0000000000006B01                 retn
.text:0000000000006B01 ; ---------------------------------------------------------------------------
.text:0000000000006B02                 align 8
.text:0000000000006B08
.text:0000000000006B08 loc_6B08:                               ; CODE XREF: xstrcoll_df_version+1D↑j
.text:0000000000006B08                                         ; xstrcoll_df_version+22↑j
.text:0000000000006B08                 test    al, al
.text:0000000000006B0A                 jnz     short loc_6B42
.text:0000000000006B0C                 mov     eax, [rsi+0ACh]
.text:0000000000006B12                 and     eax, 0F000h
.text:0000000000006B17                 cmp     eax, 4000h
.text:0000000000006B1C                 jz      short loc_6B42
.text:0000000000006B1E
.text:0000000000006B1E loc_6B1E:                               ; CODE XREF: xstrcoll_df_version+80↓j
.text:0000000000006B1E                 mov     eax, 0FFFFFFFFh
.text:0000000000006B23                 retn
.text:0000000000006B23 ; ---------------------------------------------------------------------------
.text:0000000000006B24                 align 8
.text:0000000000006B28
.text:0000000000006B28 loc_6B28:                               ; CODE XREF: xstrcoll_df_version+32↑j
.text:0000000000006B28                 mov     eax, [rsi+0ACh]
.text:0000000000006B2E                 and     eax, 0F000h
.text:0000000000006B33                 cmp     eax, 4000h
.text:0000000000006B38                 jz      short loc_6AF4
.text:0000000000006B3A                 cmp     edx, 4000h
.text:0000000000006B40                 jz      short loc_6B1E
.text:0000000000006B42
.text:0000000000006B42 loc_6B42:                               ; CODE XREF: xstrcoll_df_version+3A↑j
.text:0000000000006B42                                         ; xstrcoll_df_version+4A↑j ...
.text:0000000000006B42                 mov     rsi, [rsi]      ; s2
.text:0000000000006B45                 mov     rdi, [rdi]      ; s1
.text:0000000000006B48                 jmp     filevercmp
.text:0000000000006B48 ; } // starts at 6AC0
.text:0000000000006B48 xstrcoll_df_version endp
.text:0000000000006B48
.text:0000000000006B48 ; ---------------------------------------------------------------------------
.text:0000000000006B4D                 align 10h
.text:0000000000006B50
.text:0000000000006B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B50
.text:0000000000006B50
.text:0000000000006B50 rev_strcmp_df_extension proc near       ; DATA XREF: .data.rel.ro:000000000021F0D8↓o
.text:0000000000006B50 ; __unwind {
.text:0000000000006B50                 mov     edx, [rsi+0A8h]
.text:0000000000006B56                 mov     ecx, [rdi+0A8h]
.text:0000000000006B5C                 cmp     edx, 3
.text:0000000000006B5F                 setz    al
.text:0000000000006B62                 cmp     edx, 9
.text:0000000000006B65                 setz    dl
.text:0000000000006B68                 or      eax, edx
.text:0000000000006B6A                 cmp     ecx, 3
.text:0000000000006B6D                 jz      short loc_6B98
.text:0000000000006B6F                 cmp     ecx, 9
.text:0000000000006B72                 jz      short loc_6B98
.text:0000000000006B74                 mov     edx, [rdi+0ACh]
.text:0000000000006B7A                 and     edx, 0F000h
.text:0000000000006B80                 test    al, al
.text:0000000000006B82                 jz      short loc_6BB8
.text:0000000000006B84
.text:0000000000006B84 loc_6B84:                               ; CODE XREF: rev_strcmp_df_extension+78↓j
.text:0000000000006B84                 cmp     edx, 4000h
.text:0000000000006B8A                 jz      short loc_6BD8
.text:0000000000006B8C                 mov     eax, 1
.text:0000000000006B91                 retn
.text:0000000000006B91 ; ---------------------------------------------------------------------------
.text:0000000000006B92                 align 8
.text:0000000000006B98
.text:0000000000006B98 loc_6B98:                               ; CODE XREF: rev_strcmp_df_extension+1D↑j
.text:0000000000006B98                                         ; rev_strcmp_df_extension+22↑j
.text:0000000000006B98                 test    al, al
.text:0000000000006B9A                 jnz     short loc_6BD8
.text:0000000000006B9C                 mov     eax, [rsi+0ACh]
.text:0000000000006BA2                 and     eax, 0F000h
.text:0000000000006BA7                 cmp     eax, 4000h
.text:0000000000006BAC                 jz      short loc_6BD8
.text:0000000000006BAE
.text:0000000000006BAE loc_6BAE:                               ; CODE XREF: rev_strcmp_df_extension+80↓j
.text:0000000000006BAE                 mov     eax, 0FFFFFFFFh
.text:0000000000006BB3                 retn
.text:0000000000006BB3 ; ---------------------------------------------------------------------------
.text:0000000000006BB4                 align 8
.text:0000000000006BB8
.text:0000000000006BB8 loc_6BB8:                               ; CODE XREF: rev_strcmp_df_extension+32↑j
.text:0000000000006BB8                 mov     eax, [rsi+0ACh]
.text:0000000000006BBE                 and     eax, 0F000h
.text:0000000000006BC3                 cmp     eax, 4000h
.text:0000000000006BC8                 jz      short loc_6B84
.text:0000000000006BCA                 cmp     edx, 4000h
.text:0000000000006BD0                 jz      short loc_6BAE
.text:0000000000006BD2                 nop     word ptr [rax+rax+00h]
.text:0000000000006BD8
.text:0000000000006BD8 loc_6BD8:                               ; CODE XREF: rev_strcmp_df_extension+3A↑j
.text:0000000000006BD8                                         ; rev_strcmp_df_extension+4A↑j ...
.text:0000000000006BD8                 push    r12
.text:0000000000006BDA                 push    rbp
.text:0000000000006BDB                 push    rbx
.text:0000000000006BDC                 mov     r12, [rsi]
.text:0000000000006BDF                 mov     rbx, rdi
.text:0000000000006BE2                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000006BE7                 mov     rdi, r12        ; s
.text:0000000000006BEA                 call    _strrchr
.text:0000000000006BEF                 mov     rbx, [rbx]
.text:0000000000006BF2                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000006BF7                 mov     rbp, rax
.text:0000000000006BFA                 mov     rdi, rbx        ; s
.text:0000000000006BFD                 call    _strrchr
.text:0000000000006C02                 test    rax, rax
.text:0000000000006C05                 jz      short loc_6C40
.text:0000000000006C07                 lea     rdx, a8+6       ; ""
.text:0000000000006C0E                 test    rbp, rbp
.text:0000000000006C11                 cmovz   rbp, rdx
.text:0000000000006C15
.text:0000000000006C15 loc_6C15:                               ; CODE XREF: rev_strcmp_df_extension+FA↓j
.text:0000000000006C15                 mov     rsi, rax        ; s2
.text:0000000000006C18                 mov     rdi, rbp        ; s1
.text:0000000000006C1B                 call    _strcmp
.text:0000000000006C20                 test    eax, eax
.text:0000000000006C22                 jnz     short loc_6C38
.text:0000000000006C24
.text:0000000000006C24 loc_6C24:                               ; CODE XREF: rev_strcmp_df_extension+FC↓j
.text:0000000000006C24                 mov     rsi, rbx        ; s2
.text:0000000000006C27                 mov     rdi, r12        ; s1
.text:0000000000006C2A                 pop     rbx
.text:0000000000006C2B                 pop     rbp
.text:0000000000006C2C                 pop     r12
.text:0000000000006C2E                 jmp     _strcmp
.text:0000000000006C2E ; ---------------------------------------------------------------------------
.text:0000000000006C33                 align 8
.text:0000000000006C38
.text:0000000000006C38 loc_6C38:                               ; CODE XREF: rev_strcmp_df_extension+D2↑j
.text:0000000000006C38                 pop     rbx
.text:0000000000006C39                 pop     rbp
.text:0000000000006C3A                 pop     r12
.text:0000000000006C3C                 retn
.text:0000000000006C3C ; ---------------------------------------------------------------------------
.text:0000000000006C3D                 align 20h
.text:0000000000006C40
.text:0000000000006C40 loc_6C40:                               ; CODE XREF: rev_strcmp_df_extension+B5↑j
.text:0000000000006C40                 test    rbp, rbp
.text:0000000000006C43                 lea     rax, a8+6       ; ""
.text:0000000000006C4A                 jnz     short loc_6C15
.text:0000000000006C4C                 jmp     short loc_6C24
.text:0000000000006C4C ; } // starts at 6B50
.text:0000000000006C4C rev_strcmp_df_extension endp
.text:0000000000006C4C
.text:0000000000006C4C ; ---------------------------------------------------------------------------
.text:0000000000006C4E                 align 10h
.text:0000000000006C50
.text:0000000000006C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C50
.text:0000000000006C50 ; Attributes: info_from_lumina
.text:0000000000006C50
.text:0000000000006C50 ; void __fastcall signal_setup(_Bool init)
.text:0000000000006C50 signal_setup    proc near               ; CODE XREF: main+F5E↑p
.text:0000000000006C50                                         ; put_indicator+55↓p
.text:0000000000006C50
.text:0000000000006C50 var_D8          = qword ptr -0D8h
.text:0000000000006C50 var_D0          = xmmword ptr -0D0h
.text:0000000000006C50 var_C0          = xmmword ptr -0C0h
.text:0000000000006C50 var_B0          = xmmword ptr -0B0h
.text:0000000000006C50 var_A0          = xmmword ptr -0A0h
.text:0000000000006C50 var_90          = xmmword ptr -90h
.text:0000000000006C50 var_80          = xmmword ptr -80h
.text:0000000000006C50 var_70          = xmmword ptr -70h
.text:0000000000006C50 var_60          = xmmword ptr -60h
.text:0000000000006C50 var_50          = dword ptr -50h
.text:0000000000006C50 var_40          = qword ptr -40h
.text:0000000000006C50
.text:0000000000006C50 ; __unwind {
.text:0000000000006C50                 push    r15
.text:0000000000006C52                 push    r14
.text:0000000000006C54                 push    r13
.text:0000000000006C56                 push    r12
.text:0000000000006C58                 push    rbp
.text:0000000000006C59                 push    rbx
.text:0000000000006C5A                 sub     rsp, 0A8h
.text:0000000000006C61                 mov     rax, fs:28h
.text:0000000000006C6A                 mov     [rsp+0D8h+var_40], rax
.text:0000000000006C72                 xor     eax, eax
.text:0000000000006C74                 test    dil, dil
.text:0000000000006C77                 jnz     short loc_6CF0
.text:0000000000006C79                 lea     rbx, unk_16644
.text:0000000000006C80                 mov     ebp, 14h
.text:0000000000006C85                 lea     r12, caught_signals
.text:0000000000006C8C                 lea     r13, [rbx+2Ch]
.text:0000000000006C90                 jmp     short loc_6CA3
.text:0000000000006C90 ; ---------------------------------------------------------------------------
.text:0000000000006C92                 align 8
.text:0000000000006C98
.text:0000000000006C98 loc_6C98:                               ; CODE XREF: signal_setup+5F↓j
.text:0000000000006C98                 cmp     rbx, r13
.text:0000000000006C9B                 jz      short loc_6CBF
.text:0000000000006C9D
.text:0000000000006C9D loc_6C9D:                               ; CODE XREF: signal_setup+6D↓j
.text:0000000000006C9D                 mov     ebp, [rbx]
.text:0000000000006C9F                 add     rbx, 4
.text:0000000000006CA3
.text:0000000000006CA3 loc_6CA3:                               ; CODE XREF: signal_setup+40↑j
.text:0000000000006CA3                 mov     esi, ebp        ; signo
.text:0000000000006CA5                 mov     rdi, r12        ; set
.text:0000000000006CA8                 call    _sigismember
.text:0000000000006CAD                 test    eax, eax
.text:0000000000006CAF                 jz      short loc_6C98
.text:0000000000006CB1                 xor     esi, esi        ; handler
.text:0000000000006CB3                 mov     edi, ebp        ; sig
.text:0000000000006CB5                 call    _signal
.text:0000000000006CBA                 cmp     rbx, r13
.text:0000000000006CBD                 jnz     short loc_6C9D
.text:0000000000006CBF
.text:0000000000006CBF loc_6CBF:                               ; CODE XREF: signal_setup+4B↑j
.text:0000000000006CBF                                         ; signal_setup+1C4↓j
.text:0000000000006CBF                 mov     rax, [rsp+0D8h+var_40]
.text:0000000000006CC7                 xor     rax, fs:28h
.text:0000000000006CD0                 jnz     loc_6E19
.text:0000000000006CD6                 add     rsp, 0A8h
.text:0000000000006CDD                 pop     rbx
.text:0000000000006CDE                 pop     rbp
.text:0000000000006CDF                 pop     r12
.text:0000000000006CE1                 pop     r13
.text:0000000000006CE3                 pop     r14
.text:0000000000006CE5                 pop     r15
.text:0000000000006CE7                 retn
.text:0000000000006CE7 ; ---------------------------------------------------------------------------
.text:0000000000006CE8                 align 10h
.text:0000000000006CF0
.text:0000000000006CF0 loc_6CF0:                               ; CODE XREF: signal_setup+27↑j
.text:0000000000006CF0                 lea     rbp, unk_16644
.text:0000000000006CF7                 lea     rdi, caught_signals ; set
.text:0000000000006CFE                 mov     r13d, 14h
.text:0000000000006D04                 mov     r12, rsp
.text:0000000000006D07                 lea     r15, caught_signals
.text:0000000000006D0E                 call    _sigemptyset
.text:0000000000006D13                 lea     r14, [rbp+2Ch]
.text:0000000000006D17                 mov     rbx, rbp
.text:0000000000006D1A                 jmp     short loc_6D27
.text:0000000000006D1A ; ---------------------------------------------------------------------------
.text:0000000000006D1C                 align 20h
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: signal_setup+F9↓j
.text:0000000000006D20                 mov     r13d, [rbx]
.text:0000000000006D23                 add     rbx, 4
.text:0000000000006D27
.text:0000000000006D27 loc_6D27:                               ; CODE XREF: signal_setup+CA↑j
.text:0000000000006D27                 xor     esi, esi        ; act
.text:0000000000006D29                 mov     rdx, r12        ; oact
.text:0000000000006D2C                 mov     edi, r13d       ; sig
.text:0000000000006D2F                 call    _sigaction
.text:0000000000006D34                 cmp     [rsp+0D8h+var_D8], 1
.text:0000000000006D39                 jz      short loc_6D46
.text:0000000000006D3B                 mov     esi, r13d       ; signo
.text:0000000000006D3E                 mov     rdi, r15        ; set
.text:0000000000006D41                 call    _sigaddset
.text:0000000000006D46
.text:0000000000006D46 loc_6D46:                               ; CODE XREF: signal_setup+E9↑j
.text:0000000000006D46                 cmp     rbx, r14
.text:0000000000006D49                 jnz     short loc_6D20
.text:0000000000006D4B                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val
.text:0000000000006D53                 mov     r14d, 14h
.text:0000000000006D59                 mov     [rsp+0D8h+var_50], 10000000h
.text:0000000000006D64                 lea     r13, caught_signals
.text:0000000000006D6B                 lea     r15, sighandler
.text:0000000000006D72                 movups  [rsp+0D8h+var_D0], xmm0
.text:0000000000006D77                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+10h
.text:0000000000006D7F                 movups  [rsp+0D8h+var_C0], xmm0
.text:0000000000006D84                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+20h
.text:0000000000006D8C                 movups  [rsp+0D8h+var_B0], xmm0
.text:0000000000006D91                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+30h
.text:0000000000006D99                 movups  [rsp+0D8h+var_A0], xmm0
.text:0000000000006D9E                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+40h
.text:0000000000006DA6                 movups  [rsp+0D8h+var_90], xmm0
.text:0000000000006DAB                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+50h
.text:0000000000006DB3                 movups  [rsp+0D8h+var_80], xmm0
.text:0000000000006DB8                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+60h
.text:0000000000006DC0                 movups  [rsp+0D8h+var_70], xmm0
.text:0000000000006DC5                 movdqa  xmm0, xmmword ptr cs:caught_signals.__val+70h
.text:0000000000006DCD                 movups  [rsp+0D8h+var_60], xmm0
.text:0000000000006DD2                 jmp     short loc_6DE0
.text:0000000000006DD2 ; ---------------------------------------------------------------------------
.text:0000000000006DD4                 align 8
.text:0000000000006DD8
.text:0000000000006DD8 loc_6DD8:                               ; CODE XREF: signal_setup+1C2↓j
.text:0000000000006DD8                 mov     r14d, [rbp+0]
.text:0000000000006DDC                 add     rbp, 4
.text:0000000000006DE0
.text:0000000000006DE0 loc_6DE0:                               ; CODE XREF: signal_setup+182↑j
.text:0000000000006DE0                 mov     esi, r14d       ; signo
.text:0000000000006DE3                 mov     rdi, r13        ; set
.text:0000000000006DE6                 call    _sigismember
.text:0000000000006DEB                 test    eax, eax
.text:0000000000006DED                 jz      short loc_6E0F
.text:0000000000006DEF                 lea     rax, stophandler
.text:0000000000006DF6                 cmp     r14d, 14h
.text:0000000000006DFA                 mov     rsi, r12        ; act
.text:0000000000006DFD                 mov     edi, r14d       ; sig
.text:0000000000006E00                 cmovnz  rax, r15
.text:0000000000006E04                 xor     edx, edx        ; oact
.text:0000000000006E06                 mov     [rsp+0D8h+var_D8], rax
.text:0000000000006E0A                 call    _sigaction
.text:0000000000006E0F
.text:0000000000006E0F loc_6E0F:                               ; CODE XREF: signal_setup+19D↑j
.text:0000000000006E0F                 cmp     rbp, rbx
.text:0000000000006E12                 jnz     short loc_6DD8
.text:0000000000006E14                 jmp     loc_6CBF
.text:0000000000006E19 ; ---------------------------------------------------------------------------
.text:0000000000006E19
.text:0000000000006E19 loc_6E19:                               ; CODE XREF: signal_setup+80↑j
.text:0000000000006E19                 call    ___stack_chk_fail
.text:0000000000006E19 ; } // starts at 6C50
.text:0000000000006E19 signal_setup    endp
.text:0000000000006E19
.text:0000000000006E19 ; ---------------------------------------------------------------------------
.text:0000000000006E1E                 align 20h
.text:0000000000006E20
.text:0000000000006E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E20
.text:0000000000006E20 ; Attributes: info_from_lumina
.text:0000000000006E20
.text:0000000000006E20 ; void __cdecl prep_non_filename_text()
.text:0000000000006E20 prep_non_filename_text proc near        ; CODE XREF: put_indicator+45↓p
.text:0000000000006E20                                         ; put_indicator+5A↓p ...
.text:0000000000006E20 ; __unwind {
.text:0000000000006E20                 cmp     cs:qword_220088, 0
.text:0000000000006E28                 jz      short loc_6E38
.text:0000000000006E2A                 lea     rdi, unk_220080
.text:0000000000006E31                 jmp     short put_indicator
.text:0000000000006E31 ; ---------------------------------------------------------------------------
.text:0000000000006E33                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: prep_non_filename_text+8↑j
.text:0000000000006E38                 lea     rdi, color_indicator
.text:0000000000006E3F                 sub     rsp, 8
.text:0000000000006E43                 call    put_indicator
.text:0000000000006E48                 lea     rdi, unk_220090
.text:0000000000006E4F                 call    put_indicator
.text:0000000000006E54                 lea     rdi, qword_220070
.text:0000000000006E5B                 add     rsp, 8
.text:0000000000006E5F                 jmp     short put_indicator
.text:0000000000006E5F ; } // starts at 6E20
.text:0000000000006E5F prep_non_filename_text endp
.text:0000000000006E5F
.text:0000000000006E5F ; ---------------------------------------------------------------------------
.text:0000000000006E61                 align 10h
.text:0000000000006E70
.text:0000000000006E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E70
.text:0000000000006E70 ; Attributes: info_from_lumina
.text:0000000000006E70
.text:0000000000006E70 ; void __fastcall put_indicator(const bin_str *ind)
.text:0000000000006E70 put_indicator   proc near               ; CODE XREF: main+F3F↑p
.text:0000000000006E70                                         ; main+F4B↑p ...
.text:0000000000006E70 ; __unwind {
.text:0000000000006E70                 cmp     cs:used_color, 0
.text:0000000000006E77                 push    rbx
.text:0000000000006E78                 mov     rbx, rdi
.text:0000000000006E7B                 jz      short loc_6EA0
.text:0000000000006E7D
.text:0000000000006E7D loc_6E7D:                               ; CODE XREF: put_indicator+4A↓j
.text:0000000000006E7D                                         ; put_indicator+5F↓j
.text:0000000000006E7D                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000006E81                 mov     rsi, [rbx]      ; size
.text:0000000000006E84                 mov     edx, 1          ; n
.text:0000000000006E89                 pop     rbx
.text:0000000000006E8A                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000006E91                 jmp     _fwrite_unlocked
.text:0000000000006E91 ; ---------------------------------------------------------------------------
.text:0000000000006E96                 align 20h
.text:0000000000006EA0
.text:0000000000006EA0 loc_6EA0:                               ; CODE XREF: put_indicator+B↑j
.text:0000000000006EA0                 mov     edi, 1          ; fd
.text:0000000000006EA5                 mov     cs:used_color, 1
.text:0000000000006EAC                 call    _tcgetpgrp
.text:0000000000006EB1                 test    eax, eax
.text:0000000000006EB3                 jns     short loc_6EC0
.text:0000000000006EB5                 call    prep_non_filename_text
.text:0000000000006EBA                 jmp     short loc_6E7D
.text:0000000000006EBA ; ---------------------------------------------------------------------------
.text:0000000000006EBC                 align 20h
.text:0000000000006EC0
.text:0000000000006EC0 loc_6EC0:                               ; CODE XREF: put_indicator+43↑j
.text:0000000000006EC0                 mov     edi, 1
.text:0000000000006EC5                 call    signal_setup
.text:0000000000006ECA                 call    prep_non_filename_text
.text:0000000000006ECF                 jmp     short loc_6E7D
.text:0000000000006ECF ; } // starts at 6E70
.text:0000000000006ECF put_indicator   endp
.text:0000000000006ECF
.text:0000000000006ECF ; ---------------------------------------------------------------------------
.text:0000000000006ED1                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EE0
.text:0000000000006EE0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000006EE0
.text:0000000000006EE0 ; void __cdecl process_signals()
.text:0000000000006EE0 process_signals proc near               ; CODE XREF: print_name_with_quoting+60↓p
.text:0000000000006EE0                                         ; print_name_with_quoting+158↓p ...
.text:0000000000006EE0
.text:0000000000006EE0 oldset          = sigset_t ptr  0
.text:0000000000006EE0 var_s88         = qword ptr  88h
.text:0000000000006EE0
.text:0000000000006EE0 ; __unwind {
.text:0000000000006EE0                 push    rbp
.text:0000000000006EE1                 push    rbx
.text:0000000000006EE2                 sub     rsp, 98h
.text:0000000000006EE9                 mov     rax, fs:28h
.text:0000000000006EF2                 mov     [rsp+var_s88], rax
.text:0000000000006EFA                 xor     eax, eax
.text:0000000000006EFC                 mov     rbp, rsp
.text:0000000000006EFF                 jmp     short loc_6F59
.text:0000000000006EFF ; ---------------------------------------------------------------------------
.text:0000000000006F01                 align 8
.text:0000000000006F08
.text:0000000000006F08 loc_6F08:                               ; CODE XREF: process_signals+94↓j
.text:0000000000006F08                                         ; process_signals+AE↓j
.text:0000000000006F08                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000006F0F                 call    _fflush_unlocked
.text:0000000000006F14                 lea     rsi, caught_signals ; set
.text:0000000000006F1B                 xor     edi, edi        ; how
.text:0000000000006F1D                 mov     rdx, rbp        ; oset
.text:0000000000006F20                 call    _sigprocmask
.text:0000000000006F25                 mov     ebx, cs:interrupt_signal
.text:0000000000006F2B                 mov     eax, cs:stop_signal_count
.text:0000000000006F31                 test    eax, eax
.text:0000000000006F33                 jz      short loc_6F98
.text:0000000000006F35                 sub     eax, 1
.text:0000000000006F38                 mov     ebx, 13h
.text:0000000000006F3D                 mov     cs:stop_signal_count, eax
.text:0000000000006F43
.text:0000000000006F43 loc_6F43:                               ; CODE XREF: process_signals+C1↓j
.text:0000000000006F43                 mov     edi, ebx        ; sig
.text:0000000000006F45                 call    _raise
.text:0000000000006F4A                 xor     edx, edx        ; oset
.text:0000000000006F4C                 mov     rsi, rbp        ; set
.text:0000000000006F4F                 mov     edi, 2          ; how
.text:0000000000006F54                 call    _sigprocmask
.text:0000000000006F59
.text:0000000000006F59 loc_6F59:                               ; CODE XREF: process_signals+1F↑j
.text:0000000000006F59                 mov     eax, cs:interrupt_signal
.text:0000000000006F5F                 test    eax, eax
.text:0000000000006F61                 jnz     short loc_6F6D
.text:0000000000006F63                 mov     eax, cs:stop_signal_count
.text:0000000000006F69                 test    eax, eax
.text:0000000000006F6B                 jz      short loc_6FA8
.text:0000000000006F6D
.text:0000000000006F6D loc_6F6D:                               ; CODE XREF: process_signals+81↑j
.text:0000000000006F6D                 cmp     cs:used_color, 0
.text:0000000000006F74                 jz      short loc_6F08
.text:0000000000006F76                 lea     rdi, color_indicator
.text:0000000000006F7D                 call    put_indicator
.text:0000000000006F82                 lea     rdi, qword_220070
.text:0000000000006F89                 call    put_indicator
.text:0000000000006F8E                 jmp     loc_6F08
.text:0000000000006F8E ; ---------------------------------------------------------------------------
.text:0000000000006F93                 align 8
.text:0000000000006F98
.text:0000000000006F98 loc_6F98:                               ; CODE XREF: process_signals+53↑j
.text:0000000000006F98                 xor     esi, esi        ; handler
.text:0000000000006F9A                 mov     edi, ebx        ; sig
.text:0000000000006F9C                 call    _signal
.text:0000000000006FA1                 jmp     short loc_6F43
.text:0000000000006FA1 ; ---------------------------------------------------------------------------
.text:0000000000006FA3                 align 8
.text:0000000000006FA8
.text:0000000000006FA8 loc_6FA8:                               ; CODE XREF: process_signals+8B↑j
.text:0000000000006FA8                 mov     rax, [rsp+var_s88]
.text:0000000000006FB0                 xor     rax, fs:28h
.text:0000000000006FB9                 jnz     short loc_6FC5
.text:0000000000006FBB                 add     rsp, 98h
.text:0000000000006FC2                 pop     rbx
.text:0000000000006FC3                 pop     rbp
.text:0000000000006FC4                 retn
.text:0000000000006FC5 ; ---------------------------------------------------------------------------
.text:0000000000006FC5
.text:0000000000006FC5 loc_6FC5:                               ; CODE XREF: process_signals+D9↑j
.text:0000000000006FC5                 call    ___stack_chk_fail
.text:0000000000006FC5 ; } // starts at 6EE0
.text:0000000000006FC5 process_signals endp
.text:0000000000006FC5
.text:0000000000006FC5 ; ---------------------------------------------------------------------------
.text:0000000000006FCA                 align 10h
.text:0000000000006FD0
.text:0000000000006FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FD0
.text:0000000000006FD0 ; Attributes: info_from_lumina
.text:0000000000006FD0
.text:0000000000006FD0 ; void __cdecl set_normal_color()
.text:0000000000006FD0 set_normal_color proc near              ; CODE XREF: print_file_name_and_frills+22↓p
.text:0000000000006FD0                                         ; print_current_files:loc_92B0↓p
.text:0000000000006FD0 ; __unwind {
.text:0000000000006FD0                 cmp     cs:print_with_color, 0
.text:0000000000006FD7                 jz      short locret_6FF0
.text:0000000000006FD9                 sub     rsp, 8
.text:0000000000006FDD                 mov     edi, 4
.text:0000000000006FE2                 call    is_colored
.text:0000000000006FE7                 test    al, al
.text:0000000000006FE9                 jnz     short loc_6FF8
.text:0000000000006FEB                 add     rsp, 8
.text:0000000000006FEF                 retn
.text:0000000000006FF0 ; ---------------------------------------------------------------------------
.text:0000000000006FF0
.text:0000000000006FF0 locret_6FF0:                            ; CODE XREF: set_normal_color+7↑j
.text:0000000000006FF0                 rep retn
.text:0000000000006FF0 ; ---------------------------------------------------------------------------
.text:0000000000006FF2                 align 8
.text:0000000000006FF8
.text:0000000000006FF8 loc_6FF8:                               ; CODE XREF: set_normal_color+19↑j
.text:0000000000006FF8                 lea     rdi, color_indicator
.text:0000000000006FFF                 call    put_indicator
.text:0000000000007004                 lea     rdi, unk_2200A0
.text:000000000000700B                 call    put_indicator
.text:0000000000007010                 lea     rdi, qword_220070
.text:0000000000007017                 add     rsp, 8
.text:000000000000701B                 jmp     put_indicator
.text:000000000000701B ; } // starts at 6FD0
.text:000000000000701B set_normal_color endp
.text:000000000000701B
.text:0000000000007020
.text:0000000000007020 ; =============== S U B R O U T I N E =======================================
.text:0000000000007020
.text:0000000000007020 ; Attributes: info_from_lumina
.text:0000000000007020
.text:0000000000007020 ; size_t quote_name_buf(char **inbuf, size_t bufsize, char *name, const quoting_options *options, int needs_general_quoting, size_t *width, _Bool *pad)
.text:0000000000007020 quote_name_buf  proc near               ; CODE XREF: quote_name+5B↓p
.text:0000000000007020                                         ; quote_name_width+40↓p
.text:0000000000007020
.text:0000000000007020 var_90          = qword ptr -90h
.text:0000000000007020 var_88          = qword ptr -88h
.text:0000000000007020 var_80          = qword ptr -80h
.text:0000000000007020 var_78          = qword ptr -78h
.text:0000000000007020 var_69          = byte ptr -69h
.text:0000000000007020 var_68          = qword ptr -68h
.text:0000000000007020 var_60          = qword ptr -60h
.text:0000000000007020 c               = dword ptr -4Ch
.text:0000000000007020 ps              = mbstate_t ptr -48h
.text:0000000000007020 var_40          = qword ptr -40h
.text:0000000000007020
.text:0000000000007020 ; __unwind {
.text:0000000000007020                 push    r15
.text:0000000000007022                 push    r14
.text:0000000000007024                 mov     r14, rdx
.text:0000000000007027                 push    r13
.text:0000000000007029                 push    r12
.text:000000000000702B                 mov     r12, rsi
.text:000000000000702E                 push    rbp
.text:000000000000702F                 push    rbx
.text:0000000000007030                 mov     ebx, ecx
.text:0000000000007032                 sub     rsp, 68h
.text:0000000000007036                 mov     r13, [rdi]
.text:0000000000007039                 mov     [rsp+98h+var_68], rdi
.text:000000000000703E                 mov     rdi, rdx
.text:0000000000007041                 mov     [rsp+98h+var_78], r8
.text:0000000000007046                 mov     rcx, fs:28h
.text:000000000000704F                 mov     [rsp+98h+var_40], rcx
.text:0000000000007054                 xor     ecx, ecx
.text:0000000000007056                 mov     [rsp+98h+var_60], r9
.text:000000000000705B                 call    get_quoting_style
.text:0000000000007060                 cmp     eax, 2
.text:0000000000007063                 setbe   al
.text:0000000000007066                 and     al, cs:qmark_funny_chars
.text:000000000000706C                 mov     [rsp+98h+var_69], al
.text:0000000000007070                 jnz     loc_71D0
.text:0000000000007076                 xor     r9d, r9d
.text:0000000000007079                 test    ebx, ebx
.text:000000000000707B                 jz      short loc_70F0
.text:000000000000707D
.text:000000000000707D loc_707D:                               ; CODE XREF: quote_name_buf+464↓j
.text:000000000000707D                 mov     r8, r14
.text:0000000000007080                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007087                 mov     rdx, r12
.text:000000000000708A                 mov     esi, 2000h
.text:000000000000708F                 mov     rdi, r13
.text:0000000000007092                 mov     dword ptr [rsp+98h+var_90], r9d
.text:0000000000007097                 call    quotearg_buffer
.text:000000000000709C                 cmp     rax, 1FFFh
.text:00000000000070A2                 mov     rbx, rax
.text:00000000000070A5                 mov     r9d, dword ptr [rsp+98h+var_90]
.text:00000000000070AA                 ja      loc_7438
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: quote_name_buf+444↓j
.text:00000000000070B0                 movzx   eax, byte ptr [r13+0]
.text:00000000000070B5                 mov     [rsp+98h+var_69], 1
.text:00000000000070BA                 cmp     [r12], al
.text:00000000000070BE                 jnz     short loc_70DA
.text:00000000000070C0                 mov     rdi, r12        ; s
.text:00000000000070C3                 mov     dword ptr [rsp+98h+var_90], r9d
.text:00000000000070C8                 call    _strlen
.text:00000000000070CD                 mov     r9d, dword ptr [rsp+98h+var_90]
.text:00000000000070D2                 cmp     rbx, rax
.text:00000000000070D5                 setnz   [rsp+98h+var_69]
.text:00000000000070DA
.text:00000000000070DA loc_70DA:                               ; CODE XREF: quote_name_buf+9E↑j
.text:00000000000070DA                 test    r9d, r9d
.text:00000000000070DD                 jz      short loc_70FE
.text:00000000000070DF                 mov     rbp, rbx
.text:00000000000070E2                 jmp     loc_7203
.text:00000000000070E2 ; ---------------------------------------------------------------------------
.text:00000000000070E7                 align 10h
.text:00000000000070F0
.text:00000000000070F0 loc_70F0:                               ; CODE XREF: quote_name_buf+5B↑j
.text:00000000000070F0                 mov     rdi, r12        ; s
.text:00000000000070F3                 mov     r13, r12
.text:00000000000070F6                 call    _strlen
.text:00000000000070FB                 mov     rbx, rax
.text:00000000000070FE
.text:00000000000070FE loc_70FE:                               ; CODE XREF: quote_name_buf+BD↑j
.text:00000000000070FE                 cmp     [rsp+98h+var_78], 0
.text:0000000000007104                 jz      loc_71B8
.text:000000000000710A                 call    ___ctype_get_mb_cur_max
.text:000000000000710F                 cmp     rax, 1
.text:0000000000007113                 ja      loc_7318
.text:0000000000007119                 lea     r12, [r13+rbx+0]
.text:000000000000711E                 cmp     r13, r12
.text:0000000000007121                 jnb     loc_7472
.text:0000000000007127                 call    ___ctype_b_loc
.text:000000000000712C                 xor     ebp, ebp
.text:000000000000712E                 mov     rcx, [rax]
.text:0000000000007131                 mov     rax, r13
.text:0000000000007134                 nop     dword ptr [rax+00h]
.text:0000000000007138
.text:0000000000007138 loc_7138:                               ; CODE XREF: quote_name_buf+133↓j
.text:0000000000007138                 movzx   edx, byte ptr [rax]
.text:000000000000713B                 movzx   edx, word ptr [rcx+rdx*2]
.text:000000000000713F                 and     dx, 4000h
.text:0000000000007144                 cmp     dx, 1
.text:0000000000007148                 sbb     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000714C                 add     rax, 1
.text:0000000000007150                 cmp     r12, rax
.text:0000000000007153                 jnz     short loc_7138
.text:0000000000007155
.text:0000000000007155 loc_7155:                               ; CODE XREF: quote_name_buf+44D↓j
.text:0000000000007155                                         ; quote_name_buf+454↓j
.text:0000000000007155                 movzx   eax, cs:align_variable_outer_quotes
.text:000000000000715C                 test    al, al
.text:000000000000715E                 jz      short loc_7171
.text:0000000000007160
.text:0000000000007160 loc_7160:                               ; CODE XREF: quote_name_buf+19F↓j
.text:0000000000007160                                         ; quote_name_buf+2ED↓j ...
.text:0000000000007160                 movzx   eax, cs:cwd_some_quoted
.text:0000000000007167                 xor     eax, 1
.text:000000000000716A                 or      al, [rsp+98h+var_69]
.text:000000000000716E                 xor     eax, 1
.text:0000000000007171
.text:0000000000007171 loc_7171:                               ; CODE XREF: quote_name_buf+13E↑j
.text:0000000000007171                                         ; quote_name_buf+2E7↓j ...
.text:0000000000007171                 mov     rcx, [rsp+98h+var_60]
.text:0000000000007176                 mov     [rcx], al
.text:0000000000007178                 mov     rax, [rsp+98h+var_78]
.text:000000000000717D                 test    rax, rax
.text:0000000000007180                 jz      short loc_7185
.text:0000000000007182                 mov     [rax], rbp
.text:0000000000007185
.text:0000000000007185 loc_7185:                               ; CODE XREF: quote_name_buf+160↑j
.text:0000000000007185                                         ; quote_name_buf+1A9↓j
.text:0000000000007185                 mov     rax, [rsp+98h+var_68]
.text:000000000000718A                 mov     [rax], r13
.text:000000000000718D                 mov     rax, rbx
.text:0000000000007190                 mov     rbx, [rsp+98h+var_40]
.text:0000000000007195                 xor     rbx, fs:28h
.text:000000000000719E                 jnz     loc_7479
.text:00000000000071A4                 add     rsp, 68h
.text:00000000000071A8                 pop     rbx
.text:00000000000071A9                 pop     rbp
.text:00000000000071AA                 pop     r12
.text:00000000000071AC                 pop     r13
.text:00000000000071AE                 pop     r14
.text:00000000000071B0                 pop     r15
.text:00000000000071B2                 retn
.text:00000000000071B2 ; ---------------------------------------------------------------------------
.text:00000000000071B3                 align 8
.text:00000000000071B8
.text:00000000000071B8 loc_71B8:                               ; CODE XREF: quote_name_buf+E4↑j
.text:00000000000071B8                 cmp     cs:align_variable_outer_quotes, 0
.text:00000000000071BF                 jnz     short loc_7160
.text:00000000000071C1                 mov     rax, [rsp+98h+var_60]
.text:00000000000071C6                 mov     byte ptr [rax], 0
.text:00000000000071C9                 jmp     short loc_7185
.text:00000000000071C9 ; ---------------------------------------------------------------------------
.text:00000000000071CB                 align 10h
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: quote_name_buf+50↑j
.text:00000000000071D0                 test    ebx, ebx
.text:00000000000071D2                 jnz     loc_747E
.text:00000000000071D8                 mov     rdi, r12        ; s
.text:00000000000071DB                 call    _strlen
.text:00000000000071E0                 cmp     rax, 1FFFh
.text:00000000000071E6                 mov     rbp, rax
.text:00000000000071E9                 lea     rdx, [rax+1]    ; n
.text:00000000000071ED                 ja      loc_7418
.text:00000000000071F3
.text:00000000000071F3 loc_71F3:                               ; CODE XREF: quote_name_buf+40D↓j
.text:00000000000071F3                 mov     rsi, r12        ; src
.text:00000000000071F6                 mov     rdi, r13        ; dest
.text:00000000000071F9                 call    _memcpy
.text:00000000000071FE                 mov     [rsp+98h+var_69], 0
.text:0000000000007203
.text:0000000000007203 loc_7203:                               ; CODE XREF: quote_name_buf+C2↑j
.text:0000000000007203                 lea     rbx, [r13+rbp+0]
.text:0000000000007208                 call    ___ctype_get_mb_cur_max
.text:000000000000720D                 cmp     rax, 1
.text:0000000000007211                 mov     [rsp+98h+var_90], rbx
.text:0000000000007216                 jbe     loc_73D0
.text:000000000000721C                 cmp     r13, rbx
.text:000000000000721F                 jnb     loc_7469
.text:0000000000007225                 lea     rax, [rsp+98h+c]
.text:000000000000722A                 lea     r12, [rsp+98h+ps]
.text:000000000000722F                 mov     rbx, r13
.text:0000000000007232                 mov     r15, r13
.text:0000000000007235                 xor     ebp, ebp
.text:0000000000007237                 mov     [rsp+98h+var_80], rax
.text:000000000000723C                 nop     dword ptr [rax+00h]
.text:0000000000007240
.text:0000000000007240 loc_7240:                               ; CODE XREF: quote_name_buf+2D5↓j
.text:0000000000007240                 movzx   eax, byte ptr [r15]
.text:0000000000007244                 cmp     al, 3Fh ; '?'
.text:0000000000007246                 jg      loc_7370
.text:000000000000724C                 cmp     al, 25h ; '%'
.text:000000000000724E                 jge     loc_7388
.text:0000000000007254                 lea     edx, [rax-20h]
.text:0000000000007257                 cmp     dl, 3
.text:000000000000725A                 jbe     loc_7388
.text:0000000000007260
.text:0000000000007260 loc_7260:                               ; CODE XREF: quote_name_buf+352↓j
.text:0000000000007260                                         ; quote_name_buf+362↓j
.text:0000000000007260                 mov     qword ptr [rsp+98h+ps.__count], 0
.text:0000000000007269                 nop     dword ptr [rax+00000000h]
.text:0000000000007270
.text:0000000000007270 loc_7270:                               ; CODE XREF: quote_name_buf+2CE↓j
.text:0000000000007270                 mov     rdx, [rsp+98h+var_90]
.text:0000000000007275                 mov     rdi, [rsp+98h+var_80]
.text:000000000000727A                 mov     rcx, r12
.text:000000000000727D                 mov     rsi, r15
.text:0000000000007280                 lea     r14, [rbx+1]
.text:0000000000007284                 sub     rdx, r15
.text:0000000000007287                 call    rpl_mbrtowc
.text:000000000000728C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007290                 jz      loc_73A0
.text:0000000000007296                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000729A                 jz      loc_73B8
.text:00000000000072A0                 test    rax, rax
.text:00000000000072A3                 mov     edi, [rsp+98h+c] ; c
.text:00000000000072A7                 mov     [rsp+98h+var_88], rax
.text:00000000000072AC                 jz      loc_7350
.text:00000000000072B2                 call    _wcwidth
.text:00000000000072B7                 mov     rdx, [rsp+98h+var_88]
.text:00000000000072BC                 test    eax, eax
.text:00000000000072BE                 lea     rcx, [r15+rdx]
.text:00000000000072C2                 js      short loc_7340
.text:00000000000072C4                 mov     rdi, rbx
.text:00000000000072C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: quote_name_buf+2BA↓j
.text:00000000000072D0                 mov     rsi, r15
.text:00000000000072D3                 movsb
.text:00000000000072D4                 cmp     rsi, rcx
.text:00000000000072D7                 mov     r15, rsi
.text:00000000000072DA                 jnz     short loc_72D0
.text:00000000000072DC                 add     rbx, rdx
.text:00000000000072DF
.text:00000000000072DF loc_72DF:                               ; CODE XREF: quote_name_buf+349↓j
.text:00000000000072DF                 cdqe
.text:00000000000072E1                 add     rbp, rax
.text:00000000000072E4
.text:00000000000072E4 loc_72E4:                               ; CODE XREF: quote_name_buf+32D↓j
.text:00000000000072E4                 mov     rdi, r12        ; ps
.text:00000000000072E7                 call    _mbsinit
.text:00000000000072EC                 test    eax, eax
.text:00000000000072EE                 jz      short loc_7270
.text:00000000000072F0
.text:00000000000072F0 loc_72F0:                               ; CODE XREF: quote_name_buf+376↓j
.text:00000000000072F0                                         ; quote_name_buf+38E↓j
.text:00000000000072F0                 cmp     r15, [rsp+98h+var_90]
.text:00000000000072F5                 jb      loc_7240
.text:00000000000072FB                 movzx   eax, cs:align_variable_outer_quotes
.text:0000000000007302                 sub     rbx, r13
.text:0000000000007305                 test    al, al
.text:0000000000007307                 jz      loc_7171
.text:000000000000730D                 jmp     loc_7160
.text:000000000000730D ; ---------------------------------------------------------------------------
.text:0000000000007312                 align 8
.text:0000000000007318
.text:0000000000007318 loc_7318:                               ; CODE XREF: quote_name_buf+F3↑j
.text:0000000000007318                 xor     edx, edx
.text:000000000000731A                 mov     rsi, rbx
.text:000000000000731D                 mov     rdi, r13
.text:0000000000007320                 call    mbsnwidth
.text:0000000000007325                 movsxd  rbp, eax
.text:0000000000007328                 movzx   eax, cs:align_variable_outer_quotes
.text:000000000000732F                 test    al, al
.text:0000000000007331                 jz      loc_7171
.text:0000000000007337                 jmp     loc_7160
.text:0000000000007337 ; ---------------------------------------------------------------------------
.text:000000000000733C                 align 20h
.text:0000000000007340
.text:0000000000007340 loc_7340:                               ; CODE XREF: quote_name_buf+2A2↑j
.text:0000000000007340                                         ; quote_name_buf+33B↓j
.text:0000000000007340                 mov     byte ptr [rbx], 3Fh ; '?'
.text:0000000000007343                 add     rbp, 1
.text:0000000000007347                 mov     rbx, r14
.text:000000000000734A                 mov     r15, rcx
.text:000000000000734D                 jmp     short loc_72E4
.text:000000000000734D ; ---------------------------------------------------------------------------
.text:000000000000734F                 align 10h
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: quote_name_buf+28C↑j
.text:0000000000007350                 call    _wcwidth
.text:0000000000007355                 test    eax, eax
.text:0000000000007357                 lea     rcx, [r15+1]
.text:000000000000735B                 js      short loc_7340
.text:000000000000735D                 movzx   edx, byte ptr [r15]
.text:0000000000007361                 mov     r15, rcx
.text:0000000000007364                 mov     [rbx], dl
.text:0000000000007366                 mov     rbx, r14
.text:0000000000007369                 jmp     loc_72DF
.text:0000000000007369 ; ---------------------------------------------------------------------------
.text:000000000000736E                 align 10h
.text:0000000000007370
.text:0000000000007370 loc_7370:                               ; CODE XREF: quote_name_buf+226↑j
.text:0000000000007370                 cmp     al, 41h ; 'A'
.text:0000000000007372                 jl      loc_7260
.text:0000000000007378                 cmp     al, 5Fh ; '_'
.text:000000000000737A                 jle     short loc_7388
.text:000000000000737C                 lea     edx, [rax-61h]
.text:000000000000737F                 cmp     dl, 1Dh
.text:0000000000007382                 ja      loc_7260
.text:0000000000007388
.text:0000000000007388 loc_7388:                               ; CODE XREF: quote_name_buf+22E↑j
.text:0000000000007388                                         ; quote_name_buf+23A↑j ...
.text:0000000000007388                 mov     [rbx], al
.text:000000000000738A                 add     r15, 1
.text:000000000000738E                 add     rbp, 1
.text:0000000000007392                 add     rbx, 1
.text:0000000000007396                 jmp     loc_72F0
.text:0000000000007396 ; ---------------------------------------------------------------------------
.text:000000000000739B                 align 20h
.text:00000000000073A0
.text:00000000000073A0 loc_73A0:                               ; CODE XREF: quote_name_buf+270↑j
.text:00000000000073A0                 add     r15, 1
.text:00000000000073A4                 mov     byte ptr [rbx], 3Fh ; '?'
.text:00000000000073A7                 add     rbp, 1
.text:00000000000073AB
.text:00000000000073AB loc_73AB:                               ; CODE XREF: quote_name_buf+3A4↓j
.text:00000000000073AB                 mov     rbx, r14
.text:00000000000073AE                 jmp     loc_72F0
.text:00000000000073AE ; ---------------------------------------------------------------------------
.text:00000000000073B3                 align 8
.text:00000000000073B8
.text:00000000000073B8 loc_73B8:                               ; CODE XREF: quote_name_buf+27A↑j
.text:00000000000073B8                 mov     byte ptr [rbx], 3Fh ; '?'
.text:00000000000073BB                 add     rbp, 1
.text:00000000000073BF                 mov     r15, [rsp+98h+var_90]
.text:00000000000073C4                 jmp     short loc_73AB
.text:00000000000073C4 ; ---------------------------------------------------------------------------
.text:00000000000073C6                 align 10h
.text:00000000000073D0
.text:00000000000073D0 loc_73D0:                               ; CODE XREF: quote_name_buf+1F6↑j
.text:00000000000073D0                 cmp     r13, [rsp+98h+var_90]
.text:00000000000073D5                 jnb     short loc_73FB
.text:00000000000073D7                 call    ___ctype_b_loc
.text:00000000000073DC                 mov     rdx, r13
.text:00000000000073DF                 nop
.text:00000000000073E0
.text:00000000000073E0 loc_73E0:                               ; CODE XREF: quote_name_buf+3D9↓j
.text:00000000000073E0                 movzx   esi, byte ptr [rdx]
.text:00000000000073E3                 mov     rcx, [rax]
.text:00000000000073E6                 test    byte ptr [rcx+rsi*2+1], 40h
.text:00000000000073EB                 jnz     short loc_73F0
.text:00000000000073ED                 mov     byte ptr [rdx], 3Fh ; '?'
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: quote_name_buf+3CB↑j
.text:00000000000073F0                 add     rdx, 1
.text:00000000000073F4                 cmp     rdx, [rsp+98h+var_90]
.text:00000000000073F9                 jnz     short loc_73E0
.text:00000000000073FB
.text:00000000000073FB loc_73FB:                               ; CODE XREF: quote_name_buf+3B5↑j
.text:00000000000073FB                 movzx   eax, cs:align_variable_outer_quotes
.text:0000000000007402                 mov     rbx, rbp
.text:0000000000007405                 test    al, al
.text:0000000000007407                 jz      loc_7171
.text:000000000000740D                 jmp     loc_7160
.text:000000000000740D ; ---------------------------------------------------------------------------
.text:0000000000007412                 align 8
.text:0000000000007418
.text:0000000000007418 loc_7418:                               ; CODE XREF: quote_name_buf+1CD↑j
.text:0000000000007418                 mov     rdi, rdx
.text:000000000000741B                 mov     [rsp+98h+var_90], rdx
.text:0000000000007420                 call    xmalloc
.text:0000000000007425                 mov     rdx, [rsp+98h+var_90]
.text:000000000000742A                 mov     r13, rax
.text:000000000000742D                 jmp     loc_71F3
.text:000000000000742D ; ---------------------------------------------------------------------------
.text:0000000000007432                 align 8
.text:0000000000007438
.text:0000000000007438 loc_7438:                               ; CODE XREF: quote_name_buf+8A↑j
.text:0000000000007438                 lea     r15, [rax+1]
.text:000000000000743C                 mov     rdi, r15
.text:000000000000743F                 call    xmalloc
.text:0000000000007444                 mov     r8, r14
.text:0000000000007447                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000744E                 mov     rdx, r12
.text:0000000000007451                 mov     rsi, r15
.text:0000000000007454                 mov     rdi, rax
.text:0000000000007457                 mov     r13, rax
.text:000000000000745A                 call    quotearg_buffer
.text:000000000000745F                 mov     r9d, dword ptr [rsp+98h+var_90]
.text:0000000000007464                 jmp     loc_70B0
.text:0000000000007469 ; ---------------------------------------------------------------------------
.text:0000000000007469
.text:0000000000007469 loc_7469:                               ; CODE XREF: quote_name_buf+1FF↑j
.text:0000000000007469                 xor     ebx, ebx
.text:000000000000746B                 xor     ebp, ebp
.text:000000000000746D                 jmp     loc_7155
.text:0000000000007472 ; ---------------------------------------------------------------------------
.text:0000000000007472
.text:0000000000007472 loc_7472:                               ; CODE XREF: quote_name_buf+101↑j
.text:0000000000007472                 xor     ebp, ebp
.text:0000000000007474                 jmp     loc_7155
.text:0000000000007479 ; ---------------------------------------------------------------------------
.text:0000000000007479
.text:0000000000007479 loc_7479:                               ; CODE XREF: quote_name_buf+17E↑j
.text:0000000000007479                 call    ___stack_chk_fail
.text:000000000000747E ; ---------------------------------------------------------------------------
.text:000000000000747E
.text:000000000000747E loc_747E:                               ; CODE XREF: quote_name_buf+1B2↑j
.text:000000000000747E                 mov     r9d, 1
.text:0000000000007484                 jmp     loc_707D
.text:0000000000007484 ; } // starts at 7020
.text:0000000000007484 quote_name_buf  endp
.text:0000000000007484
.text:0000000000007484 ; ---------------------------------------------------------------------------
.text:0000000000007489                 align 10h
.text:0000000000007490
.text:0000000000007490 ; =============== S U B R O U T I N E =======================================
.text:0000000000007490
.text:0000000000007490 ; Attributes: info_from_lumina
.text:0000000000007490
.text:0000000000007490 ; size_t __fastcall quote_name(const char *name, const quoting_options *options, int needs_general_quoting, const bin_str *color, _Bool allow_pad, obstack *stack, const char *absolute_name)
.text:0000000000007490 quote_name      proc near               ; CODE XREF: print_name_with_quoting+58↓p
.text:0000000000007490                                         ; print_name_with_quoting+150↓p ...
.text:0000000000007490
.text:0000000000007490 var_2078        = qword ptr -2078h
.text:0000000000007490 ptr             = qword ptr -2070h
.text:0000000000007490 var_2068        = qword ptr -2068h
.text:0000000000007490 n               = qword ptr -2060h
.text:0000000000007490 var_2051        = byte ptr -2051h
.text:0000000000007490 var_2050        = qword ptr -2050h
.text:0000000000007490 var_2048        = byte ptr -2048h
.text:0000000000007490 var_40          = qword ptr -40h
.text:0000000000007490 arg_0           = qword ptr  8
.text:0000000000007490
.text:0000000000007490 ; __unwind {
.text:0000000000007490                 push    r15
.text:0000000000007492                 push    r14
.text:0000000000007494                 mov     rax, rdi
.text:0000000000007497                 push    r13
.text:0000000000007499                 push    r12
.text:000000000000749B                 mov     r14, rcx
.text:000000000000749E                 push    rbp
.text:000000000000749F                 push    rbx
.text:00000000000074A0                 mov     rbx, r9
.text:00000000000074A3                 mov     r15d, r8d
.text:00000000000074A6                 xor     r8d, r8d
.text:00000000000074A9                 sub     rsp, 2048h
.text:00000000000074B0                 mov     [rsp+2078h+var_2078], rdi
.text:00000000000074B4                 lea     r13, [rsp+2078h+var_2048]
.text:00000000000074B9                 lea     rdi, [rsp+2078h+var_2050]
.text:00000000000074BE                 lea     r9, [rsp+2078h+var_2051]
.text:00000000000074C3                 mov     r12, [rsp+2078h+arg_0]
.text:00000000000074CB                 mov     rcx, fs:28h
.text:00000000000074D4                 mov     [rsp+2078h+var_40], rcx
.text:00000000000074DC                 xor     ecx, ecx
.text:00000000000074DE                 mov     ecx, edx
.text:00000000000074E0                 mov     rdx, rsi
.text:00000000000074E3                 mov     rsi, rax
.text:00000000000074E6                 mov     [rsp+2078h+var_2050], r13
.text:00000000000074EB                 call    quote_name_buf
.text:00000000000074F0                 cmp     [rsp+2078h+var_2051], 0
.text:00000000000074F5                 mov     rbp, rax
.text:00000000000074F8                 jz      short loc_7503
.text:00000000000074FA                 test    r15b, r15b
.text:00000000000074FD                 jnz     loc_7758
.text:0000000000007503
.text:0000000000007503 loc_7503:                               ; CODE XREF: quote_name+68↑j
.text:0000000000007503                                         ; quote_name+2F0↓j
.text:0000000000007503                 test    r14, r14
.text:0000000000007506                 jz      short loc_753A
.text:0000000000007508                 mov     edi, 4
.text:000000000000750D                 call    is_colored
.text:0000000000007512                 test    al, al
.text:0000000000007514                 jnz     loc_77C8
.text:000000000000751A
.text:000000000000751A loc_751A:                               ; CODE XREF: quote_name+350↓j
.text:000000000000751A                 lea     rdi, color_indicator
.text:0000000000007521                 call    put_indicator
.text:0000000000007526                 mov     rdi, r14
.text:0000000000007529                 call    put_indicator
.text:000000000000752E                 lea     rdi, qword_220070
.text:0000000000007535                 call    put_indicator
.text:000000000000753A
.text:000000000000753A loc_753A:                               ; CODE XREF: quote_name+76↑j
.text:000000000000753A                 test    r12, r12
.text:000000000000753D                 jz      loc_7788
.text:0000000000007543                 movzx   r14d, cs:align_variable_outer_quotes
.text:000000000000754B                 test    r14b, r14b
.text:000000000000754E                 jnz     loc_7700
.text:0000000000007554
.text:0000000000007554 loc_7554:                               ; CODE XREF: quote_name+27B↓j
.text:0000000000007554                 mov     r10, rbp
.text:0000000000007557                 xor     r9d, r9d
.text:000000000000755A
.text:000000000000755A loc_755A:                               ; CODE XREF: quote_name+2BD↓j
.text:000000000000755A                                         ; quote_name+3B1↓j ...
.text:000000000000755A                 mov     rdi, cs:hostname
.text:0000000000007561                 xor     esi, esi
.text:0000000000007563                 mov     [rsp+2078h+n], r10
.text:0000000000007568                 mov     [rsp+2078h+var_2068], r9
.text:000000000000756D                 call    file_escape
.text:0000000000007572                 mov     esi, 1
.text:0000000000007577                 mov     rdi, r12
.text:000000000000757A                 mov     r15, rax
.text:000000000000757D                 call    file_escape
.text:0000000000007582                 cmp     byte ptr [rax], 2Fh ; '/'
.text:0000000000007585                 mov     r11, rax
.text:0000000000007588                 lea     rcx, aDired+8   ; "/"
.text:000000000000758F                 lea     rax, a8+6       ; ""
.text:0000000000007596                 lea     rsi, a8FileSSS  ; "\x1B]8;;file://%s%s%s\a"
.text:000000000000759D                 mov     r8, r11
.text:00000000000075A0                 mov     rdx, r15
.text:00000000000075A3                 mov     edi, 1
.text:00000000000075A8                 mov     [rsp+2078h+ptr], r11
.text:00000000000075AD                 cmovz   rcx, rax
.text:00000000000075B1                 xor     eax, eax
.text:00000000000075B3                 call    ___printf_chk
.text:00000000000075B8                 mov     rdi, r15        ; ptr
.text:00000000000075BB                 call    free
.text:00000000000075C0                 mov     r11, [rsp+2078h+ptr]
.text:00000000000075C5                 mov     rdi, r11        ; ptr
.text:00000000000075C8                 call    free
.text:00000000000075CD                 test    rbx, rbx
.text:00000000000075D0                 mov     r9, [rsp+2078h+var_2068]
.text:00000000000075D5                 mov     r10, [rsp+2078h+n]
.text:00000000000075DA                 jz      loc_779A
.text:00000000000075E0
.text:00000000000075E0 loc_75E0:                               ; CODE XREF: quote_name+304↓j
.text:00000000000075E0                 cmp     cs:dired, 0
.text:00000000000075E7                 jz      short loc_760D
.text:00000000000075E9                 mov     rdx, [rbx+18h]
.text:00000000000075ED                 mov     rax, [rbx+20h]
.text:00000000000075F1                 sub     rax, rdx
.text:00000000000075F4                 cmp     rax, 7
.text:00000000000075F8                 jbe     loc_77E8
.text:00000000000075FE
.text:00000000000075FE loc_75FE:                               ; CODE XREF: quote_name+37D↓j
.text:00000000000075FE                 mov     rax, cs:dired_pos
.text:0000000000007605                 mov     [rdx], rax
.text:0000000000007608                 add     qword ptr [rbx+18h], 8
.text:000000000000760D
.text:000000000000760D loc_760D:                               ; CODE XREF: quote_name+157↑j
.text:000000000000760D                 mov     rdi, [rsp+2078h+var_2050]
.text:0000000000007612                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000007619                 mov     rdx, r10        ; n
.text:000000000000761C                 mov     esi, 1          ; size
.text:0000000000007621                 add     rdi, r9         ; ptr
.text:0000000000007624                 call    _fwrite_unlocked
.text:0000000000007629                 mov     rax, cs:dired_pos
.text:0000000000007630                 add     rax, rbp
.text:0000000000007633                 cmp     cs:dired, 0
.text:000000000000763A                 mov     cs:dired_pos, rax
.text:0000000000007641                 jz      short loc_7660
.text:0000000000007643                 mov     rcx, [rbx+18h]
.text:0000000000007647                 mov     rdx, [rbx+20h]
.text:000000000000764B                 sub     rdx, rcx
.text:000000000000764E                 cmp     rdx, 7
.text:0000000000007652                 jbe     loc_7818
.text:0000000000007658
.text:0000000000007658 loc_7658:                               ; CODE XREF: quote_name+3A0↓j
.text:0000000000007658                 mov     [rcx], rax
.text:000000000000765B                 add     qword ptr [rbx+18h], 8
.text:0000000000007660
.text:0000000000007660 loc_7660:                               ; CODE XREF: quote_name+1B1↑j
.text:0000000000007660                                         ; quote_name+32D↓j
.text:0000000000007660                 test    r12, r12
.text:0000000000007663                 jz      short loc_76B0
.text:0000000000007665                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000766C                 lea     rdi, a8         ; "\x1B]8;;\a"
.text:0000000000007673                 mov     edx, 6          ; n
.text:0000000000007678                 mov     esi, 1          ; size
.text:000000000000767D                 call    _fwrite_unlocked
.text:0000000000007682                 test    r14b, r14b
.text:0000000000007685                 jz      short loc_76B0
.text:0000000000007687                 mov     rax, [rsp+2078h+var_2050]
.text:000000000000768C                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000007693                 movzx   edx, byte ptr [rax+rbp-1]
.text:0000000000007698                 mov     rax, [rdi+28h]
.text:000000000000769C                 cmp     rax, [rdi+30h]
.text:00000000000076A0                 jnb     loc_7850
.text:00000000000076A6                 lea     rcx, [rax+1]
.text:00000000000076AA                 mov     [rdi+28h], rcx
.text:00000000000076AE                 mov     [rax], dl
.text:00000000000076B0
.text:00000000000076B0 loc_76B0:                               ; CODE XREF: quote_name+1D3↑j
.text:00000000000076B0                                         ; quote_name+1F5↑j ...
.text:00000000000076B0                 mov     rdi, [rsp+2078h+var_2050] ; ptr
.text:00000000000076B5                 cmp     rdi, [rsp+2078h+var_2078]
.text:00000000000076B9                 jz      short loc_76C5
.text:00000000000076BB                 cmp     rdi, r13
.text:00000000000076BE                 jz      short loc_76C5
.text:00000000000076C0                 call    free
.text:00000000000076C5
.text:00000000000076C5 loc_76C5:                               ; CODE XREF: quote_name+229↑j
.text:00000000000076C5                                         ; quote_name+22E↑j
.text:00000000000076C5                 movzx   eax, [rsp+2078h+var_2051]
.text:00000000000076CA                 add     rax, rbp
.text:00000000000076CD                 mov     rbx, [rsp+2078h+var_40]
.text:00000000000076D5                 xor     rbx, fs:28h
.text:00000000000076DE                 jnz     loc_788C
.text:00000000000076E4                 add     rsp, 2048h
.text:00000000000076EB                 pop     rbx
.text:00000000000076EC                 pop     rbp
.text:00000000000076ED                 pop     r12
.text:00000000000076EF                 pop     r13
.text:00000000000076F1                 pop     r14
.text:00000000000076F3                 pop     r15
.text:00000000000076F5                 retn
.text:00000000000076F5 ; ---------------------------------------------------------------------------
.text:00000000000076F6                 align 20h
.text:0000000000007700
.text:0000000000007700 loc_7700:                               ; CODE XREF: quote_name+BE↑j
.text:0000000000007700                 movzx   r14d, cs:cwd_some_quoted
.text:0000000000007708                 test    r14b, r14b
.text:000000000000770B                 jz      loc_7554
.text:0000000000007711                 cmp     [rsp+2078h+var_2051], 0
.text:0000000000007716                 jnz     loc_7838
.text:000000000000771C                 mov     rax, [rsp+2078h+var_2050]
.text:0000000000007721                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000007728                 lea     r10, [rbp-2]
.text:000000000000772C                 movzx   edx, byte ptr [rax]
.text:000000000000772F                 mov     rax, [rdi+28h]
.text:0000000000007733                 cmp     rax, [rdi+30h]
.text:0000000000007737                 jnb     loc_786F
.text:000000000000773D                 lea     rcx, [rax+1]
.text:0000000000007741                 mov     r9d, 1
.text:0000000000007747                 mov     [rdi+28h], rcx
.text:000000000000774B                 mov     [rax], dl
.text:000000000000774D                 jmp     loc_755A
.text:000000000000774D ; ---------------------------------------------------------------------------
.text:0000000000007752                 align 8
.text:0000000000007758
.text:0000000000007758 loc_7758:                               ; CODE XREF: quote_name+6D↑j
.text:0000000000007758                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000775F                 mov     rax, [rdi+28h]
.text:0000000000007763                 cmp     rax, [rdi+30h]
.text:0000000000007767                 jnb     loc_7860
.text:000000000000776D                 lea     rdx, [rax+1]
.text:0000000000007771                 mov     [rdi+28h], rdx
.text:0000000000007775                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000007778
.text:0000000000007778 loc_7778:                               ; CODE XREF: quote_name+3DA↓j
.text:0000000000007778                 add     cs:dired_pos, 1
.text:0000000000007780                 jmp     loc_7503
.text:0000000000007780 ; ---------------------------------------------------------------------------
.text:0000000000007785                 align 8
.text:0000000000007788
.text:0000000000007788 loc_7788:                               ; CODE XREF: quote_name+AD↑j
.text:0000000000007788                 xor     r9d, r9d
.text:000000000000778B                 xor     r14d, r14d
.text:000000000000778E                 test    rbx, rbx
.text:0000000000007791                 mov     r10, rbp
.text:0000000000007794                 jnz     loc_75E0
.text:000000000000779A
.text:000000000000779A loc_779A:                               ; CODE XREF: quote_name+14A↑j
.text:000000000000779A                 mov     rdi, [rsp+2078h+var_2050]
.text:000000000000779F                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000077A6                 mov     rdx, r10        ; n
.text:00000000000077A9                 mov     esi, 1          ; size
.text:00000000000077AE                 add     rdi, r9         ; ptr
.text:00000000000077B1                 call    _fwrite_unlocked
.text:00000000000077B6                 add     cs:dired_pos, rbp
.text:00000000000077BD                 jmp     loc_7660
.text:00000000000077BD ; ---------------------------------------------------------------------------
.text:00000000000077C2                 align 8
.text:00000000000077C8
.text:00000000000077C8 loc_77C8:                               ; CODE XREF: quote_name+84↑j
.text:00000000000077C8                 lea     rdi, color_indicator
.text:00000000000077CF                 call    put_indicator
.text:00000000000077D4                 lea     rdi, qword_220070
.text:00000000000077DB                 call    put_indicator
.text:00000000000077E0                 jmp     loc_751A
.text:00000000000077E0 ; ---------------------------------------------------------------------------
.text:00000000000077E5                 align 8
.text:00000000000077E8
.text:00000000000077E8 loc_77E8:                               ; CODE XREF: quote_name+168↑j
.text:00000000000077E8                 mov     esi, 8
.text:00000000000077ED                 mov     rdi, rbx
.text:00000000000077F0                 mov     [rsp+2078h+var_2068], r10
.text:00000000000077F5                 mov     [rsp+2078h+ptr], r9
.text:00000000000077FA                 call    _obstack_newchunk
.text:00000000000077FF                 mov     rdx, [rbx+18h]
.text:0000000000007803                 mov     r10, [rsp+2078h+var_2068]
.text:0000000000007808                 mov     r9, [rsp+2078h+ptr]
.text:000000000000780D                 jmp     loc_75FE
.text:000000000000780D ; ---------------------------------------------------------------------------
.text:0000000000007812                 align 8
.text:0000000000007818
.text:0000000000007818 loc_7818:                               ; CODE XREF: quote_name+1C2↑j
.text:0000000000007818                 mov     esi, 8
.text:000000000000781D                 mov     rdi, rbx
.text:0000000000007820                 call    _obstack_newchunk
.text:0000000000007825                 mov     rcx, [rbx+18h]
.text:0000000000007829                 mov     rax, cs:dired_pos
.text:0000000000007830                 jmp     loc_7658
.text:0000000000007830 ; ---------------------------------------------------------------------------
.text:0000000000007835                 align 8
.text:0000000000007838
.text:0000000000007838 loc_7838:                               ; CODE XREF: quote_name+286↑j
.text:0000000000007838                 mov     r10, rbp
.text:000000000000783B                 xor     r9d, r9d
.text:000000000000783E                 xor     r14d, r14d
.text:0000000000007841                 jmp     loc_755A
.text:0000000000007841 ; ---------------------------------------------------------------------------
.text:0000000000007846                 align 10h
.text:0000000000007850
.text:0000000000007850 loc_7850:                               ; CODE XREF: quote_name+210↑j
.text:0000000000007850                 movzx   esi, dl         ; int
.text:0000000000007853                 call    ___overflow
.text:0000000000007858                 jmp     loc_76B0
.text:0000000000007858 ; ---------------------------------------------------------------------------
.text:000000000000785D                 align 20h
.text:0000000000007860
.text:0000000000007860 loc_7860:                               ; CODE XREF: quote_name+2D7↑j
.text:0000000000007860                 mov     esi, 20h ; ' '  ; int
.text:0000000000007865                 call    ___overflow
.text:000000000000786A                 jmp     loc_7778
.text:000000000000786F ; ---------------------------------------------------------------------------
.text:000000000000786F
.text:000000000000786F loc_786F:                               ; CODE XREF: quote_name+2A7↑j
.text:000000000000786F                 movzx   esi, dl         ; int
.text:0000000000007872                 mov     [rsp+2078h+ptr], r10
.text:0000000000007877                 call    ___overflow
.text:000000000000787C                 mov     r9d, 1
.text:0000000000007882                 mov     r10, [rsp+2078h+ptr]
.text:0000000000007887                 jmp     loc_755A
.text:000000000000788C ; ---------------------------------------------------------------------------
.text:000000000000788C
.text:000000000000788C loc_788C:                               ; CODE XREF: quote_name+24E↑j
.text:000000000000788C                 call    ___stack_chk_fail
.text:000000000000788C ; } // starts at 7490
.text:000000000000788C quote_name      endp
.text:000000000000788C
.text:000000000000788C ; ---------------------------------------------------------------------------
.text:0000000000007891                 align 20h
.text:00000000000078A0
.text:00000000000078A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078A0
.text:00000000000078A0 ; Attributes: info_from_lumina
.text:00000000000078A0
.text:00000000000078A0 ; size_t __fastcall print_name_with_quoting(const fileinfo *f, _Bool symlink_target, obstack *stack, size_t start_col)
.text:00000000000078A0 print_name_with_quoting proc near       ; CODE XREF: print_file_name_and_frills+F0↓p
.text:00000000000078A0                                         ; print_long_format+38F↓p ...
.text:00000000000078A0
.text:00000000000078A0 var_40          = qword ptr -40h
.text:00000000000078A0
.text:00000000000078A0 ; __unwind {
.text:00000000000078A0                 push    r15
.text:00000000000078A2                 push    r14
.text:00000000000078A4                 mov     r15d, esi
.text:00000000000078A7                 push    r13
.text:00000000000078A9                 push    r12
.text:00000000000078AB                 mov     r14, rdi
.text:00000000000078AE                 push    rbp
.text:00000000000078AF                 push    rbx
.text:00000000000078B0                 mov     r13, rdx
.text:00000000000078B3                 mov     r12, rcx
.text:00000000000078B6                 sub     rsp, 18h
.text:00000000000078BA                 test    sil, sil
.text:00000000000078BD                 movzx   eax, cs:print_with_color
.text:00000000000078C4                 jz      short loc_7920
.text:00000000000078C6                 test    al, al
.text:00000000000078C8                 mov     rbp, [rdi+8]
.text:00000000000078CC                 jnz     loc_7A48
.text:00000000000078D2
.text:00000000000078D2 loc_78D2:                               ; CODE XREF: print_name_with_quoting+85↓j
.text:00000000000078D2                                         ; print_name_with_quoting+124↓j
.text:00000000000078D2                 mov     edx, [r14+0C4h]
.text:00000000000078D9                 mov     rsi, cs:filename_quoting_options
.text:00000000000078E0                 sub     rsp, 8
.text:00000000000078E4                 xor     r15d, 1
.text:00000000000078E8                 push    qword ptr [r14+10h]
.text:00000000000078EC                 mov     r9, r13
.text:00000000000078EF                 movzx   r8d, r15b
.text:00000000000078F3                 xor     ecx, ecx
.text:00000000000078F5                 mov     rdi, rbp
.text:00000000000078F8                 call    quote_name
.text:00000000000078FD                 mov     rbx, rax
.text:0000000000007900                 call    process_signals
.text:0000000000007905                 pop     rax
.text:0000000000007906                 pop     rdx
.text:0000000000007907
.text:0000000000007907 loc_7907:                               ; CODE XREF: print_name_with_quoting+16E↓j
.text:0000000000007907                                         ; print_name_with_quoting+18C↓j ...
.text:0000000000007907                 add     rsp, 18h
.text:000000000000790B                 mov     rax, rbx
.text:000000000000790E                 pop     rbx
.text:000000000000790F                 pop     rbp
.text:0000000000007910                 pop     r12
.text:0000000000007912                 pop     r13
.text:0000000000007914                 pop     r14
.text:0000000000007916                 pop     r15
.text:0000000000007918                 retn
.text:0000000000007918 ; ---------------------------------------------------------------------------
.text:0000000000007919                 align 20h
.text:0000000000007920
.text:0000000000007920 loc_7920:                               ; CODE XREF: print_name_with_quoting+24↑j
.text:0000000000007920                 test    al, al
.text:0000000000007922                 mov     rbp, [rdi]
.text:0000000000007925                 jz      short loc_78D2
.text:0000000000007927                 cmp     cs:color_symlink_as_referent, 0
.text:000000000000792E                 movzx   edx, byte ptr [rdi+0B9h]
.text:0000000000007935                 jnz     loc_7B08
.text:000000000000793B
.text:000000000000793B loc_793B:                               ; CODE XREF: print_name_with_quoting+26A↓j
.text:000000000000793B                 mov     r8d, [r14+30h]
.text:000000000000793F
.text:000000000000793F loc_793F:                               ; CODE XREF: print_name_with_quoting+1C9↓j
.text:000000000000793F                                         ; print_name_with_quoting+277↓j
.text:000000000000793F                 movzx   ecx, byte ptr [r14+0B8h]
.text:0000000000007947                 test    cl, cl
.text:0000000000007949                 jnz     loc_7A92
.text:000000000000794F
.text:000000000000794F loc_794F:                               ; CODE XREF: print_name_with_quoting+1EC↓j
.text:000000000000794F                 mov     ecx, [r14+0A8h]
.text:0000000000007956                 lea     rax, filetype_indicator_11085
.text:000000000000795D                 mov     eax, [rax+rcx*4]
.text:0000000000007960                 cmp     eax, 7
.text:0000000000007963                 setz    cl
.text:0000000000007966                 cmp     eax, 5
.text:0000000000007969                 jz      loc_7B20
.text:000000000000796F
.text:000000000000796F loc_796F:                               ; CODE XREF: print_name_with_quoting+3D5↓j
.text:000000000000796F                 test    edx, edx
.text:0000000000007971                 jnz     loc_7CEC
.text:0000000000007977                 test    cl, cl
.text:0000000000007979                 jz      loc_7CEC
.text:000000000000797F                 cmp     cs:color_symlink_as_referent, 0
.text:0000000000007986                 mov     ecx, 0D0h
.text:000000000000798B                 jnz     short loc_79A7
.text:000000000000798D                 mov     edi, 0Dh
.text:0000000000007992                 call    is_colored
.text:0000000000007997                 cmp     al, 1
.text:0000000000007999                 sbb     rcx, rcx
.text:000000000000799C                 and     rcx, 0FFFFFFFFFFFFFFA0h
.text:00000000000079A0                 add     rcx, 0D0h
.text:00000000000079A7
.text:00000000000079A7 loc_79A7:                               ; CODE XREF: print_name_with_quoting+EB↑j
.text:00000000000079A7                                         ; print_name_with_quoting+1D4↓j ...
.text:00000000000079A7                 lea     rbx, color_indicator
.text:00000000000079AE                 add     rcx, rbx
.text:00000000000079B1
.text:00000000000079B1 loc_79B1:                               ; CODE XREF: print_name_with_quoting+2E4↓j
.text:00000000000079B1                 cmp     qword ptr [rcx+8], 0
.text:00000000000079B6                 jnz     short loc_79CC
.text:00000000000079B8                 mov     edi, 4
.text:00000000000079BD                 call    is_colored
.text:00000000000079C2                 test    al, al
.text:00000000000079C4                 jz      loc_78D2
.text:00000000000079CA                 xor     ecx, ecx
.text:00000000000079CC
.text:00000000000079CC loc_79CC:                               ; CODE XREF: print_name_with_quoting+116↑j
.text:00000000000079CC                 mov     rsi, cs:filename_quoting_options
.text:00000000000079D3                 mov     edx, [r14+0C4h]
.text:00000000000079DA                 sub     rsp, 8
.text:00000000000079DE                 xor     r15d, 1
.text:00000000000079E2                 push    qword ptr [r14+10h]
.text:00000000000079E6                 mov     rdi, rbp
.text:00000000000079E9                 mov     r9, r13
.text:00000000000079EC                 movzx   r8d, r15b
.text:00000000000079F0                 call    quote_name
.text:00000000000079F5                 mov     rbx, rax
.text:00000000000079F8                 call    process_signals
.text:00000000000079FD                 call    prep_non_filename_text
.text:0000000000007A02                 mov     rcx, cs:line_length
.text:0000000000007A09                 pop     rsi
.text:0000000000007A0A                 pop     rdi
.text:0000000000007A0B                 test    rcx, rcx
.text:0000000000007A0E                 jz      loc_7907
.text:0000000000007A14                 xor     edx, edx
.text:0000000000007A16                 mov     rax, r12
.text:0000000000007A19                 div     rcx
.text:0000000000007A1C                 xor     edx, edx
.text:0000000000007A1E                 mov     rsi, rax
.text:0000000000007A21                 lea     rax, [rbx+r12-1]
.text:0000000000007A26                 div     rcx
.text:0000000000007A29                 cmp     rsi, rax
.text:0000000000007A2C                 jz      loc_7907
.text:0000000000007A32                 lea     rdi, unk_2201D0
.text:0000000000007A39                 call    put_indicator
.text:0000000000007A3E                 jmp     loc_7907
.text:0000000000007A3E ; ---------------------------------------------------------------------------
.text:0000000000007A43                 align 8
.text:0000000000007A48
.text:0000000000007A48 loc_7A48:                               ; CODE XREF: print_name_with_quoting+2C↑j
.text:0000000000007A48                 cmp     byte ptr [rdi+0B9h], 0
.text:0000000000007A4F                 mov     r8d, [rdi+0ACh]
.text:0000000000007A56                 jnz     short loc_7A80
.text:0000000000007A58                 mov     edi, 0Ch
.text:0000000000007A5D                 call    is_colored
.text:0000000000007A62                 test    al, al
.text:0000000000007A64                 mov     edx, 0FFFFFFFFh
.text:0000000000007A69                 jz      loc_793F
.text:0000000000007A6F                 mov     ecx, 0C0h
.text:0000000000007A74                 jmp     loc_79A7
.text:0000000000007A74 ; ---------------------------------------------------------------------------
.text:0000000000007A79                 align 20h
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: print_name_with_quoting+1B6↑j
.text:0000000000007A80                 movzx   ecx, byte ptr [r14+0B8h]
.text:0000000000007A88                 xor     edx, edx
.text:0000000000007A8A                 test    cl, cl
.text:0000000000007A8C                 jz      loc_794F
.text:0000000000007A92
.text:0000000000007A92 loc_7A92:                               ; CODE XREF: print_name_with_quoting+A9↑j
.text:0000000000007A92                 mov     eax, r8d
.text:0000000000007A95                 and     eax, 0F000h
.text:0000000000007A9A                 cmp     eax, 8000h
.text:0000000000007A9F                 jz      loc_7B90
.text:0000000000007AA5                 cmp     eax, 4000h
.text:0000000000007AAA                 jz      loc_7C10
.text:0000000000007AB0                 cmp     eax, 0A000h
.text:0000000000007AB5                 jz      loc_7C70
.text:0000000000007ABB                 cmp     eax, 1000h
.text:0000000000007AC0                 mov     ecx, 80h
.text:0000000000007AC5                 jz      loc_79A7
.text:0000000000007ACB                 cmp     eax, 0C000h
.text:0000000000007AD0                 mov     ecx, 90h
.text:0000000000007AD5                 jz      loc_79A7
.text:0000000000007ADB                 cmp     eax, 6000h
.text:0000000000007AE0                 mov     ecx, 0A0h
.text:0000000000007AE5                 jz      loc_79A7
.text:0000000000007AEB                 cmp     eax, 2000h
.text:0000000000007AF0                 mov     ecx, 0D0h
.text:0000000000007AF5                 mov     ebx, 0B0h
.text:0000000000007AFA                 cmovz   rcx, rbx
.text:0000000000007AFE                 jmp     loc_79A7
.text:0000000000007AFE ; ---------------------------------------------------------------------------
.text:0000000000007B03                 align 8
.text:0000000000007B08
.text:0000000000007B08 loc_7B08:                               ; CODE XREF: print_name_with_quoting+95↑j
.text:0000000000007B08                 test    dl, dl
.text:0000000000007B0A                 jz      loc_793B
.text:0000000000007B10                 mov     r8d, [r14+0ACh]
.text:0000000000007B17                 jmp     loc_793F
.text:0000000000007B17 ; ---------------------------------------------------------------------------
.text:0000000000007B1C                 align 20h
.text:0000000000007B20
.text:0000000000007B20 loc_7B20:                               ; CODE XREF: print_name_with_quoting+C9↑j
.text:0000000000007B20                                         ; print_name_with_quoting+405↓j ...
.text:0000000000007B20                 mov     rdi, rbp        ; s
.text:0000000000007B23                 call    _strlen
.text:0000000000007B28                 mov     rbx, cs:color_ext_list
.text:0000000000007B2F                 mov     rcx, rax
.text:0000000000007B32                 test    rbx, rbx
.text:0000000000007B35                 jz      short loc_7B71
.text:0000000000007B37                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007B40
.text:0000000000007B40 loc_7B40:                               ; CODE XREF: print_name_with_quoting+2CF↓j
.text:0000000000007B40                 mov     rdx, [rbx]
.text:0000000000007B43                 cmp     rcx, rdx
.text:0000000000007B46                 jb      short loc_7B68
.text:0000000000007B48                 mov     rdi, rcx
.text:0000000000007B4B                 mov     rsi, [rbx+8]
.text:0000000000007B4F                 mov     [rsp+48h+var_40], rcx
.text:0000000000007B54                 sub     rdi, rdx
.text:0000000000007B57                 add     rdi, rbp
.text:0000000000007B5A                 call    c_strncasecmp
.text:0000000000007B5F                 test    eax, eax
.text:0000000000007B61                 mov     rcx, [rsp+48h+var_40]
.text:0000000000007B66                 jz      short loc_7B80
.text:0000000000007B68
.text:0000000000007B68 loc_7B68:                               ; CODE XREF: print_name_with_quoting+2A6↑j
.text:0000000000007B68                 mov     rbx, [rbx+20h]
.text:0000000000007B6C                 test    rbx, rbx
.text:0000000000007B6F                 jnz     short loc_7B40
.text:0000000000007B71
.text:0000000000007B71 loc_7B71:                               ; CODE XREF: print_name_with_quoting+295↑j
.text:0000000000007B71                 mov     ecx, 50h ; 'P'
.text:0000000000007B76                 jmp     loc_79A7
.text:0000000000007B76 ; ---------------------------------------------------------------------------
.text:0000000000007B7B                 align 20h
.text:0000000000007B80
.text:0000000000007B80 loc_7B80:                               ; CODE XREF: print_name_with_quoting+2C6↑j
.text:0000000000007B80                 lea     rcx, [rbx+10h]
.text:0000000000007B84                 jmp     loc_79B1
.text:0000000000007B84 ; ---------------------------------------------------------------------------
.text:0000000000007B89                 align 10h
.text:0000000000007B90
.text:0000000000007B90 loc_7B90:                               ; CODE XREF: print_name_with_quoting+1FF↑j
.text:0000000000007B90                 test    r8d, 800h
.text:0000000000007B97                 jz      short loc_7BB8
.text:0000000000007B99                 mov     edi, 10h
.text:0000000000007B9E                 call    is_colored
.text:0000000000007BA3                 test    al, al
.text:0000000000007BA5                 jz      short loc_7BB8
.text:0000000000007BA7                 mov     ecx, 100h
.text:0000000000007BAC                 jmp     loc_79A7
.text:0000000000007BAC ; ---------------------------------------------------------------------------
.text:0000000000007BB1                 align 8
.text:0000000000007BB8
.text:0000000000007BB8 loc_7BB8:                               ; CODE XREF: print_name_with_quoting+2F7↑j
.text:0000000000007BB8                                         ; print_name_with_quoting+305↑j
.text:0000000000007BB8                 test    r8d, 400h
.text:0000000000007BBF                 jnz     short loc_7BF0
.text:0000000000007BC1
.text:0000000000007BC1 loc_7BC1:                               ; CODE XREF: print_name_with_quoting+35C↓j
.text:0000000000007BC1                 mov     edi, 15h
.text:0000000000007BC6                 call    is_colored
.text:0000000000007BCB                 test    al, al
.text:0000000000007BCD                 jz      loc_7C80
.text:0000000000007BD3                 cmp     byte ptr [r14+0C0h], 0
.text:0000000000007BDB                 jz      loc_7C80
.text:0000000000007BE1                 mov     ecx, 150h
.text:0000000000007BE6                 jmp     loc_79A7
.text:0000000000007BE6 ; ---------------------------------------------------------------------------
.text:0000000000007BEB                 align 10h
.text:0000000000007BF0
.text:0000000000007BF0 loc_7BF0:                               ; CODE XREF: print_name_with_quoting+31F↑j
.text:0000000000007BF0                 mov     edi, 11h
.text:0000000000007BF5                 call    is_colored
.text:0000000000007BFA                 test    al, al
.text:0000000000007BFC                 jz      short loc_7BC1
.text:0000000000007BFE                 mov     ecx, 110h
.text:0000000000007C03                 jmp     loc_79A7
.text:0000000000007C03 ; ---------------------------------------------------------------------------
.text:0000000000007C08                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: print_name_with_quoting+20A↑j
.text:0000000000007C10                 mov     eax, r8d
.text:0000000000007C13                 and     eax, 202h
.text:0000000000007C18                 cmp     eax, 202h
.text:0000000000007C1D                 jz      loc_7CD0
.text:0000000000007C23
.text:0000000000007C23 loc_7C23:                               ; CODE XREF: print_name_with_quoting+447↓j
.text:0000000000007C23                 test    r8b, 2
.text:0000000000007C27                 jz      short loc_7C40
.text:0000000000007C29                 mov     edi, 13h
.text:0000000000007C2E                 call    is_colored
.text:0000000000007C33                 test    al, al
.text:0000000000007C35                 mov     ecx, 130h
.text:0000000000007C3A                 jnz     loc_79A7
.text:0000000000007C40
.text:0000000000007C40 loc_7C40:                               ; CODE XREF: print_name_with_quoting+387↑j
.text:0000000000007C40                 and     r8d, 200h
.text:0000000000007C47                 mov     ecx, 60h ; '`'
.text:0000000000007C4C                 jz      loc_79A7
.text:0000000000007C52                 mov     edi, 12h
.text:0000000000007C57                 call    is_colored
.text:0000000000007C5C                 cmp     al, 1
.text:0000000000007C5E                 sbb     rcx, rcx
.text:0000000000007C61                 and     cl, 40h
.text:0000000000007C64                 add     rcx, 120h
.text:0000000000007C6B                 jmp     loc_79A7
.text:0000000000007C70 ; ---------------------------------------------------------------------------
.text:0000000000007C70
.text:0000000000007C70 loc_7C70:                               ; CODE XREF: print_name_with_quoting+215↑j
.text:0000000000007C70                 mov     eax, 7
.text:0000000000007C75                 jmp     loc_796F
.text:0000000000007C75 ; ---------------------------------------------------------------------------
.text:0000000000007C7A                 align 20h
.text:0000000000007C80
.text:0000000000007C80 loc_7C80:                               ; CODE XREF: print_name_with_quoting+32D↑j
.text:0000000000007C80                                         ; print_name_with_quoting+33B↑j
.text:0000000000007C80                 and     r8d, 49h
.text:0000000000007C84                 jz      short loc_7CA0
.text:0000000000007C86                 mov     edi, 0Eh
.text:0000000000007C8B                 call    is_colored
.text:0000000000007C90                 test    al, al
.text:0000000000007C92                 jz      short loc_7CA0
.text:0000000000007C94                 mov     ecx, 0E0h
.text:0000000000007C99                 jmp     loc_79A7
.text:0000000000007C99 ; ---------------------------------------------------------------------------
.text:0000000000007C9E                 align 20h
.text:0000000000007CA0
.text:0000000000007CA0 loc_7CA0:                               ; CODE XREF: print_name_with_quoting+3E4↑j
.text:0000000000007CA0                                         ; print_name_with_quoting+3F2↑j
.text:0000000000007CA0                 cmp     qword ptr [r14+28h], 1
.text:0000000000007CA5                 jbe     loc_7B20
.text:0000000000007CAB                 mov     edi, 16h
.text:0000000000007CB0                 call    is_colored
.text:0000000000007CB5                 test    al, al
.text:0000000000007CB7                 jz      loc_7B20
.text:0000000000007CBD                 mov     ecx, 160h
.text:0000000000007CC2                 jmp     loc_79A7
.text:0000000000007CC2 ; ---------------------------------------------------------------------------
.text:0000000000007CC7                 align 10h
.text:0000000000007CD0
.text:0000000000007CD0 loc_7CD0:                               ; CODE XREF: print_name_with_quoting+37D↑j
.text:0000000000007CD0                 mov     edi, 14h
.text:0000000000007CD5                 call    is_colored
.text:0000000000007CDA                 test    al, al
.text:0000000000007CDC                 mov     ecx, 140h
.text:0000000000007CE1                 jnz     loc_79A7
.text:0000000000007CE7                 jmp     loc_7C23
.text:0000000000007CEC ; ---------------------------------------------------------------------------
.text:0000000000007CEC
.text:0000000000007CEC loc_7CEC:                               ; CODE XREF: print_name_with_quoting+D1↑j
.text:0000000000007CEC                                         ; print_name_with_quoting+D9↑j
.text:0000000000007CEC                 shl     rax, 4
.text:0000000000007CF0                 mov     rcx, rax
.text:0000000000007CF3                 jmp     loc_79A7
.text:0000000000007CF3 ; } // starts at 78A0
.text:0000000000007CF3 print_name_with_quoting endp
.text:0000000000007CF3
.text:0000000000007CF3 ; ---------------------------------------------------------------------------
.text:0000000000007CF8                 align 20h
.text:0000000000007D00
.text:0000000000007D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D00
.text:0000000000007D00 ; Attributes: info_from_lumina
.text:0000000000007D00
.text:0000000000007D00 ; size_t __fastcall print_file_name_and_frills(const fileinfo *f, size_t start_col)
.text:0000000000007D00 print_file_name_and_frills proc near    ; CODE XREF: print_with_separator+46↓p
.text:0000000000007D00                                         ; print_current_files+83↓p ...
.text:0000000000007D00
.text:0000000000007D00 buf             = byte ptr -2B8h
.text:0000000000007D00 var_20          = qword ptr -20h
.text:0000000000007D00
.text:0000000000007D00 ; __unwind {
.text:0000000000007D00                 push    rbp
.text:0000000000007D01                 push    rbx
.text:0000000000007D02                 mov     rbp, rsi
.text:0000000000007D05                 mov     rbx, rdi
.text:0000000000007D08                 sub     rsp, 2A8h
.text:0000000000007D0F                 mov     rax, fs:28h
.text:0000000000007D18                 mov     [rsp+2B8h+var_20], rax
.text:0000000000007D20                 xor     eax, eax
.text:0000000000007D22                 call    set_normal_color
.text:0000000000007D27                 cmp     cs:print_inode, 0
.text:0000000000007D2E                 jz      short loc_7D71
.text:0000000000007D30                 cmp     byte ptr [rbx+0B8h], 0
.text:0000000000007D37                 lea     rcx, s          ; "?"
.text:0000000000007D3E                 jz      short loc_7D4D
.text:0000000000007D40                 mov     rdi, [rbx+20h]
.text:0000000000007D44                 test    rdi, rdi
.text:0000000000007D47                 jnz     loc_7E78
.text:0000000000007D4D
.text:0000000000007D4D loc_7D4D:                               ; CODE XREF: print_file_name_and_frills+3E↑j
.text:0000000000007D4D                                         ; print_file_name_and_frills+183↓j
.text:0000000000007D4D                 xor     edx, edx
.text:0000000000007D4F                 cmp     cs:format, 4
.text:0000000000007D56                 jz      short loc_7D5E
.text:0000000000007D58                 mov     edx, cs:inode_number_width
.text:0000000000007D5E
.text:0000000000007D5E loc_7D5E:                               ; CODE XREF: print_file_name_and_frills+56↑j
.text:0000000000007D5E                 lea     rsi, aS         ; "%*s "
.text:0000000000007D65                 mov     edi, 1
.text:0000000000007D6A                 xor     eax, eax
.text:0000000000007D6C                 call    ___printf_chk
.text:0000000000007D71
.text:0000000000007D71 loc_7D71:                               ; CODE XREF: print_file_name_and_frills+2E↑j
.text:0000000000007D71                 cmp     cs:print_block_size, 0
.text:0000000000007D78                 jz      short loc_7DB2
.text:0000000000007D7A                 cmp     byte ptr [rbx+0B8h], 0
.text:0000000000007D81                 lea     rcx, s          ; "?"
.text:0000000000007D88                 jnz     loc_7E40
.text:0000000000007D8E                 xor     edx, edx
.text:0000000000007D90                 cmp     cs:format, 4
.text:0000000000007D97                 jz      short loc_7D9F
.text:0000000000007D99
.text:0000000000007D99 loc_7D99:                               ; CODE XREF: print_file_name_and_frills+16A↓j
.text:0000000000007D99                 mov     edx, cs:block_size_width
.text:0000000000007D9F
.text:0000000000007D9F loc_7D9F:                               ; CODE XREF: print_file_name_and_frills+97↑j
.text:0000000000007D9F                                         ; print_file_name_and_frills+170↓j
.text:0000000000007D9F                 lea     rsi, aS         ; "%*s "
.text:0000000000007DA6                 mov     edi, 1
.text:0000000000007DAB                 xor     eax, eax
.text:0000000000007DAD                 call    ___printf_chk
.text:0000000000007DB2
.text:0000000000007DB2 loc_7DB2:                               ; CODE XREF: print_file_name_and_frills+78↑j
.text:0000000000007DB2                 cmp     cs:print_scontext, 0
.text:0000000000007DB9                 jz      short loc_7DE6
.text:0000000000007DBB                 xor     edx, edx
.text:0000000000007DBD                 cmp     cs:format, 4
.text:0000000000007DC4                 mov     rcx, [rbx+0B0h]
.text:0000000000007DCB                 jz      short loc_7DD3
.text:0000000000007DCD                 mov     edx, cs:scontext_width
.text:0000000000007DD3
.text:0000000000007DD3 loc_7DD3:                               ; CODE XREF: print_file_name_and_frills+CB↑j
.text:0000000000007DD3                 lea     rsi, aS         ; "%*s "
.text:0000000000007DDA                 mov     edi, 1
.text:0000000000007DDF                 xor     eax, eax
.text:0000000000007DE1                 call    ___printf_chk
.text:0000000000007DE6
.text:0000000000007DE6 loc_7DE6:                               ; CODE XREF: print_file_name_and_frills+B9↑j
.text:0000000000007DE6                 mov     rcx, rbp
.text:0000000000007DE9                 xor     edx, edx
.text:0000000000007DEB                 xor     esi, esi
.text:0000000000007DED                 mov     rdi, rbx
.text:0000000000007DF0                 call    print_name_with_quoting
.text:0000000000007DF5                 mov     rbp, rax
.text:0000000000007DF8                 mov     eax, cs:indicator_style
.text:0000000000007DFE                 test    eax, eax
.text:0000000000007E00                 jz      short loc_7E1D
.text:0000000000007E02                 movzx   edi, byte ptr [rbx+0B8h]
.text:0000000000007E09                 mov     edx, [rbx+0A8h]
.text:0000000000007E0F                 mov     esi, [rbx+30h]
.text:0000000000007E12                 call    print_type_indicator
.text:0000000000007E17                 movzx   eax, al
.text:0000000000007E1A                 add     rbp, rax
.text:0000000000007E1D
.text:0000000000007E1D loc_7E1D:                               ; CODE XREF: print_file_name_and_frills+100↑j
.text:0000000000007E1D                 mov     rbx, [rsp+2B8h+var_20]
.text:0000000000007E25                 xor     rbx, fs:28h
.text:0000000000007E2E                 mov     rax, rbp
.text:0000000000007E31                 jnz     short loc_7E88
.text:0000000000007E33                 add     rsp, 2A8h
.text:0000000000007E3A                 pop     rbx
.text:0000000000007E3B                 pop     rbp
.text:0000000000007E3C                 retn
.text:0000000000007E3C ; ---------------------------------------------------------------------------
.text:0000000000007E3D                 align 20h
.text:0000000000007E40
.text:0000000000007E40 loc_7E40:                               ; CODE XREF: print_file_name_and_frills+88↑j
.text:0000000000007E40                 mov     edx, cs:human_output_opts
.text:0000000000007E46                 mov     rdi, [rbx+58h]
.text:0000000000007E4A                 mov     ecx, 200h
.text:0000000000007E4F                 mov     r8, cs:output_block_size
.text:0000000000007E56                 mov     rsi, rsp
.text:0000000000007E59                 call    human_readable
.text:0000000000007E5E                 xor     edx, edx
.text:0000000000007E60                 cmp     cs:format, 4
.text:0000000000007E67                 mov     rcx, rax
.text:0000000000007E6A                 jnz     loc_7D99
.text:0000000000007E70                 jmp     loc_7D9F
.text:0000000000007E70 ; ---------------------------------------------------------------------------
.text:0000000000007E75                 align 8
.text:0000000000007E78
.text:0000000000007E78 loc_7E78:                               ; CODE XREF: print_file_name_and_frills+47↑j
.text:0000000000007E78                 mov     rsi, rsp
.text:0000000000007E7B                 call    umaxtostr
.text:0000000000007E80                 mov     rcx, rax
.text:0000000000007E83                 jmp     loc_7D4D
.text:0000000000007E88 ; ---------------------------------------------------------------------------
.text:0000000000007E88
.text:0000000000007E88 loc_7E88:                               ; CODE XREF: print_file_name_and_frills+131↑j
.text:0000000000007E88                 call    ___stack_chk_fail
.text:0000000000007E88 ; } // starts at 7D00
.text:0000000000007E88 print_file_name_and_frills endp
.text:0000000000007E88
.text:0000000000007E88 ; ---------------------------------------------------------------------------
.text:0000000000007E8D                 align 10h
.text:0000000000007E90
.text:0000000000007E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E90
.text:0000000000007E90
.text:0000000000007E90 print_long_format proc near             ; CODE XREF: print_current_files+320↓p
.text:0000000000007E90
.text:0000000000007E90 var_1354        = dword ptr -1354h
.text:0000000000007E90 var_1350        = qword ptr -1350h
.text:0000000000007E90 var_1340        = qword ptr -1340h
.text:0000000000007E90 var_1338        = qword ptr -1338h
.text:0000000000007E90 var_1330        = qword ptr -1330h
.text:0000000000007E90 var_1328        = byte ptr -1328h
.text:0000000000007E90 var_1318        = dword ptr -1318h
.text:0000000000007E90 var_12E8        = byte ptr -12E8h
.text:0000000000007E90 var_12D8        = dword ptr -12D8h
.text:0000000000007E90 var_12A4        = byte ptr -12A4h
.text:0000000000007E90 var_12A3        = qword ptr -12A3h
.text:0000000000007E90 var_129A        = byte ptr -129Ah
.text:0000000000007E90 var_1299        = byte ptr -1299h
.text:0000000000007E90 var_1298        = byte ptr -1298h
.text:0000000000007E90 var_1278        = byte ptr -1278h
.text:0000000000007E90 s               = byte ptr -0E88h
.text:0000000000007E90 var_40          = qword ptr -40h
.text:0000000000007E90
.text:0000000000007E90 ; __unwind {
.text:0000000000007E90                 push    r15
.text:0000000000007E92                 push    r14
.text:0000000000007E94                 push    r13
.text:0000000000007E96                 push    r12
.text:0000000000007E98                 push    rbp
.text:0000000000007E99                 push    rbx
.text:0000000000007E9A                 mov     rbp, rdi
.text:0000000000007E9D                 sub     rsp, 1328h
.text:0000000000007EA4                 mov     rax, fs:28h
.text:0000000000007EAD                 mov     [rsp+1358h+var_40], rax
.text:0000000000007EB5                 xor     eax, eax
.text:0000000000007EB7                 cmp     byte ptr [rdi+0B8h], 0
.text:0000000000007EBE                 jz      loc_8280
.text:0000000000007EC4                 lea     r13, [rsp+1358h+var_12A4]
.text:0000000000007ECC                 lea     rdi, [rdi+18h]
.text:0000000000007ED0                 mov     rsi, r13
.text:0000000000007ED3                 call    filemodestring
.text:0000000000007ED8                 cmp     cs:any_has_acl, 0
.text:0000000000007EDF                 jnz     loc_82D2
.text:0000000000007EE5
.text:0000000000007EE5 loc_7EE5:                               ; CODE XREF: print_long_format+43C↓j
.text:0000000000007EE5                 mov     [rsp+1358h+var_129A], 0
.text:0000000000007EED
.text:0000000000007EED loc_7EED:                               ; CODE XREF: print_long_format+454↓j
.text:0000000000007EED                                         ; print_long_format+758↓j
.text:0000000000007EED                 mov     eax, cs:time_type
.text:0000000000007EF3                 cmp     eax, 1
.text:0000000000007EF6                 jz      loc_8308
.text:0000000000007EFC
.text:0000000000007EFC loc_7EFC:                               ; CODE XREF: print_long_format+46B↓j
.text:0000000000007EFC                 jb      loc_8348
.text:0000000000007F02                 cmp     eax, 2
.text:0000000000007F05                 jnz     loc_8868
.text:0000000000007F0B                 mov     rax, [rbp+68h]
.text:0000000000007F0F                 mov     rdx, [rbp+60h]
.text:0000000000007F13                 mov     [rsp+1358h+var_1330], rax
.text:0000000000007F18                 mov     [rsp+1358h+var_1338], rdx
.text:0000000000007F1D
.text:0000000000007F1D loc_7F1D:                               ; CODE XREF: print_long_format+4CA↓j
.text:0000000000007F1D                 cmp     cs:print_inode, 0
.text:0000000000007F24                 movzx   edx, byte ptr [rbp+0B8h]
.text:0000000000007F2B                 jz      loc_8334
.text:0000000000007F31
.text:0000000000007F31 loc_7F31:                               ; CODE XREF: print_long_format+49E↓j
.text:0000000000007F31                 test    dl, dl
.text:0000000000007F33                 lea     r9, s           ; "?"
.text:0000000000007F3A                 jz      short loc_7F49
.text:0000000000007F3C                 mov     rdi, [rbp+20h]
.text:0000000000007F40                 test    rdi, rdi
.text:0000000000007F43                 jnz     loc_8608
.text:0000000000007F49
.text:0000000000007F49 loc_7F49:                               ; CODE XREF: print_long_format+AA↑j
.text:0000000000007F49                                         ; print_long_format+788↓j
.text:0000000000007F49                 lea     r12, [rsp+1358h+s]
.text:0000000000007F51                 mov     r8d, cs:inode_number_width
.text:0000000000007F58                 lea     rcx, aS         ; "%*s "
.text:0000000000007F5F                 mov     edx, 0E3Bh
.text:0000000000007F64                 mov     esi, 1
.text:0000000000007F69                 xor     eax, eax
.text:0000000000007F6B                 mov     rdi, r12
.text:0000000000007F6E                 mov     rbx, r12
.text:0000000000007F71                 call    ___sprintf_chk
.text:0000000000007F76
.text:0000000000007F76 loc_7F76:                               ; CODE XREF: print_long_format+FC↓j
.text:0000000000007F76                 mov     eax, [rbx]
.text:0000000000007F78                 add     rbx, 4
.text:0000000000007F7C                 lea     edx, [rax-1010101h]
.text:0000000000007F82                 not     eax
.text:0000000000007F84                 and     edx, eax
.text:0000000000007F86                 and     edx, 80808080h
.text:0000000000007F8C                 jz      short loc_7F76
.text:0000000000007F8E                 mov     eax, edx
.text:0000000000007F90                 shr     eax, 10h
.text:0000000000007F93                 test    edx, 8080h
.text:0000000000007F99                 cmovz   edx, eax
.text:0000000000007F9C                 lea     rax, [rbx+2]
.text:0000000000007FA0                 cmovz   rbx, rax
.text:0000000000007FA4                 mov     eax, edx
.text:0000000000007FA6                 add     al, dl
.text:0000000000007FA8                 movzx   edx, byte ptr [rbp+0B8h]
.text:0000000000007FAF                 sbb     rbx, 3
.text:0000000000007FB3
.text:0000000000007FB3 loc_7FB3:                               ; CODE XREF: print_long_format+4AF↓j
.text:0000000000007FB3                 cmp     cs:print_block_size, 0
.text:0000000000007FBA                 jz      short loc_8037
.text:0000000000007FBC                 test    dl, dl
.text:0000000000007FBE                 lea     r15, s          ; "?"
.text:0000000000007FC5                 jnz     loc_8680
.text:0000000000007FCB
.text:0000000000007FCB loc_7FCB:                               ; CODE XREF: print_long_format+816↓j
.text:0000000000007FCB                 mov     r14d, cs:block_size_width
.text:0000000000007FD2                 xor     esi, esi
.text:0000000000007FD4                 mov     rdi, r15
.text:0000000000007FD7                 call    gnu_mbswidth
.text:0000000000007FDC                 sub     r14d, eax
.text:0000000000007FDF                 test    r14d, r14d
.text:0000000000007FE2                 mov     eax, r14d
.text:0000000000007FE5                 jle     loc_8500
.text:0000000000007FEB                 sub     eax, 1
.text:0000000000007FEE                 mov     rdx, rax
.text:0000000000007FF1                 lea     rcx, [rbx+rax+1]
.text:0000000000007FF6                 mov     rax, rbx
.text:0000000000007FF9                 nop     dword ptr [rax+00000000h]
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: print_long_format+17B↓j
.text:0000000000008000                 add     rax, 1
.text:0000000000008004                 mov     byte ptr [rax-1], 20h ; ' '
.text:0000000000008008                 cmp     rcx, rax
.text:000000000000800B                 jnz     short loc_8000
.text:000000000000800D                 movsxd  rax, edx
.text:0000000000008010                 lea     rdx, [rbx+rax+1]
.text:0000000000008015
.text:0000000000008015 loc_8015:                               ; CODE XREF: print_long_format+673↓j
.text:0000000000008015                 add     r15, 1
.text:0000000000008019                 movzx   eax, byte ptr [r15-1]
.text:000000000000801E                 lea     rbx, [rdx+1]
.text:0000000000008022                 test    al, al
.text:0000000000008024                 mov     [rbx-1], al
.text:0000000000008027                 jnz     loc_8500
.text:000000000000802D                 mov     byte ptr [rdx], 20h ; ' '
.text:0000000000008030                 movzx   edx, byte ptr [rbp+0B8h]
.text:0000000000008037
.text:0000000000008037 loc_8037:                               ; CODE XREF: print_long_format+12A↑j
.text:0000000000008037                 test    dl, dl
.text:0000000000008039                 lea     rax, s          ; "?"
.text:0000000000008040                 jnz     loc_84E8
.text:0000000000008046
.text:0000000000008046 loc_8046:                               ; CODE XREF: print_long_format+669↓j
.text:0000000000008046                 sub     rsp, 8
.text:000000000000804A                 mov     r9d, cs:nlink_width
.text:0000000000008051                 lea     rcx, aSS_0      ; "%s %*s "
.text:0000000000008058                 push    rax
.text:0000000000008059                 mov     r8, r13
.text:000000000000805C                 mov     rdi, rbx
.text:000000000000805F                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008066                 mov     esi, 1
.text:000000000000806B                 xor     eax, eax
.text:000000000000806D                 call    ___sprintf_chk
.text:0000000000008072                 mov     rdi, rbx        ; s
.text:0000000000008075                 call    _strlen
.text:000000000000807A                 add     rbx, rax
.text:000000000000807D                 cmp     cs:dired, 0
.text:0000000000008084                 pop     r8
.text:0000000000008086                 pop     r9
.text:0000000000008088                 jnz     loc_84B8
.text:000000000000808E
.text:000000000000808E loc_808E:                               ; CODE XREF: print_long_format+64D↓j
.text:000000000000808E                 cmp     cs:print_owner, 0
.text:0000000000008095                 jnz     short loc_80B0
.text:0000000000008097                 cmp     cs:print_group, 0
.text:000000000000809E                 jnz     short loc_80B0
.text:00000000000080A0                 cmp     cs:print_author, 0
.text:00000000000080A7                 jz      loc_85F0
.text:00000000000080AD                 nop     dword ptr [rax]
.text:00000000000080B0
.text:00000000000080B0 loc_80B0:                               ; CODE XREF: print_long_format+205↑j
.text:00000000000080B0                                         ; print_long_format+20E↑j ...
.text:00000000000080B0                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000080B7                 mov     rdi, r12        ; s
.text:00000000000080BA                 sub     rbx, r12
.text:00000000000080BD                 call    _fputs_unlocked
.text:00000000000080C2                 add     cs:dired_pos, rbx
.text:00000000000080C9                 cmp     cs:print_owner, 0
.text:00000000000080D0                 jnz     loc_85A0
.text:00000000000080D6
.text:00000000000080D6 loc_80D6:                               ; CODE XREF: print_long_format+725↓j
.text:00000000000080D6                 cmp     cs:print_group, 0
.text:00000000000080DD                 jnz     loc_8550
.text:00000000000080E3
.text:00000000000080E3 loc_80E3:                               ; CODE XREF: print_long_format+705↓j
.text:00000000000080E3                 cmp     cs:print_author, 0
.text:00000000000080EA                 jnz     loc_8530
.text:00000000000080F0
.text:00000000000080F0 loc_80F0:                               ; CODE XREF: print_long_format+6B5↓j
.text:00000000000080F0                 cmp     cs:print_scontext, 0
.text:00000000000080F7                 mov     rbx, r12
.text:00000000000080FA                 jnz     loc_8510
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: print_long_format+694↓j
.text:0000000000008100                                         ; print_long_format+767↓j
.text:0000000000008100                 cmp     byte ptr [rbp+0B8h], 0
.text:0000000000008107                 jz      loc_8360
.text:000000000000810D                 mov     eax, [rbp+30h]
.text:0000000000008110                 and     eax, 0B000h
.text:0000000000008115                 cmp     eax, 2000h
.text:000000000000811A                 jz      loc_86B0
.text:0000000000008120                 mov     rdi, [rbp+48h]
.text:0000000000008124                 mov     r8, cs:file_output_block_size
.text:000000000000812B                 lea     rsi, [rsp+1358h+var_1278]
.text:0000000000008133                 mov     edx, cs:file_human_output_opts
.text:0000000000008139                 mov     ecx, 1
.text:000000000000813E                 call    human_readable
.text:0000000000008143                 mov     r14, rax
.text:0000000000008146
.text:0000000000008146 loc_8146:                               ; CODE XREF: print_long_format+4D7↓j
.text:0000000000008146                 mov     r13d, cs:file_size_width
.text:000000000000814D                 xor     esi, esi
.text:000000000000814F                 mov     rdi, r14
.text:0000000000008152                 call    gnu_mbswidth
.text:0000000000008157                 sub     r13d, eax
.text:000000000000815A                 test    r13d, r13d
.text:000000000000815D                 mov     eax, r13d
.text:0000000000008160                 jle     short loc_8185
.text:0000000000008162                 sub     eax, 1
.text:0000000000008165                 mov     rdx, rax
.text:0000000000008168                 lea     rcx, [rbx+rax+1]
.text:000000000000816D                 mov     rax, rbx
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: print_long_format+2EB↓j
.text:0000000000008170                 add     rax, 1
.text:0000000000008174                 mov     byte ptr [rax-1], 20h ; ' '
.text:0000000000008178                 cmp     rax, rcx
.text:000000000000817B                 jnz     short loc_8170
.text:000000000000817D                 movsxd  rax, edx
.text:0000000000008180                 lea     rbx, [rbx+rax+1]
.text:0000000000008185
.text:0000000000008185 loc_8185:                               ; CODE XREF: print_long_format+2D0↑j
.text:0000000000008185                                         ; print_long_format+4E3↓j
.text:0000000000008185                 add     r14, 1
.text:0000000000008189                 movzx   eax, byte ptr [r14-1]
.text:000000000000818E                 lea     r13, [rbx+1]
.text:0000000000008192                 test    al, al
.text:0000000000008194                 mov     [r13-1], al
.text:0000000000008198                 jnz     loc_8370
.text:000000000000819E                 mov     byte ptr [rbx], 20h ; ' '
.text:00000000000081A1
.text:00000000000081A1 loc_81A1:                               ; CODE XREF: print_long_format+8D9↓j
.text:00000000000081A1                 mov     byte ptr [r13+0], 1
.text:00000000000081A6                 cmp     byte ptr [rbp+0B8h], 0
.text:00000000000081AD                 lea     rbx, s          ; "?"
.text:00000000000081B4                 jnz     loc_83F0
.text:00000000000081BA
.text:00000000000081BA loc_81BA:                               ; CODE XREF: print_long_format+9EB↓j
.text:00000000000081BA                                         ; print_long_format+A06↓j
.text:00000000000081BA                 mov     r8d, cs:width_10774
.text:00000000000081C1                 test    r8d, r8d
.text:00000000000081C4                 js      loc_8780
.text:00000000000081CA
.text:00000000000081CA loc_81CA:                               ; CODE XREF: print_long_format+958↓j
.text:00000000000081CA                                         ; print_long_format+96B↓j
.text:00000000000081CA                 lea     rcx, aS         ; "%*s "
.text:00000000000081D1                 mov     r9, rbx
.text:00000000000081D4                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081DB                 mov     esi, 1
.text:00000000000081E0                 mov     rdi, r13
.text:00000000000081E3                 xor     eax, eax
.text:00000000000081E5                 call    ___sprintf_chk
.text:00000000000081EA                 mov     rdi, r13        ; s
.text:00000000000081ED                 call    _strlen
.text:00000000000081F2                 lea     rbx, [r13+rax+0]
.text:00000000000081F7
.text:00000000000081F7 loc_81F7:                               ; CODE XREF: print_long_format+749↓j
.text:00000000000081F7                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000081FE                 mov     rdi, r12        ; s
.text:0000000000008201                 sub     rbx, r12
.text:0000000000008204                 call    _fputs_unlocked
.text:0000000000008209                 lea     rdx, dired_obstack
.text:0000000000008210                 xor     esi, esi
.text:0000000000008212                 mov     rcx, rbx
.text:0000000000008215                 mov     rdi, rbp
.text:0000000000008218                 add     cs:dired_pos, rbx
.text:000000000000821F                 call    print_name_with_quoting
.text:0000000000008224                 mov     edx, [rbp+0A8h]
.text:000000000000822A                 mov     r12, rax
.text:000000000000822D                 cmp     edx, 6
.text:0000000000008230                 jz      loc_8380
.text:0000000000008236                 mov     eax, cs:indicator_style
.text:000000000000823C                 test    eax, eax
.text:000000000000823E                 jz      short loc_824F
.text:0000000000008240                 movzx   edi, byte ptr [rbp+0B8h]
.text:0000000000008247                 mov     esi, [rbp+30h]
.text:000000000000824A                 call    print_type_indicator
.text:000000000000824F
.text:000000000000824F loc_824F:                               ; CODE XREF: print_long_format+3AE↑j
.text:000000000000824F                                         ; print_long_format+4F5↓j ...
.text:000000000000824F                 mov     rax, [rsp+1358h+var_40]
.text:0000000000008257                 xor     rax, fs:28h
.text:0000000000008260                 jnz     loc_8863
.text:0000000000008266                 add     rsp, 1328h
.text:000000000000826D                 pop     rbx
.text:000000000000826E                 pop     rbp
.text:000000000000826F                 pop     r12
.text:0000000000008271                 pop     r13
.text:0000000000008273                 pop     r14
.text:0000000000008275                 pop     r15
.text:0000000000008277                 retn
.text:0000000000008277 ; ---------------------------------------------------------------------------
.text:0000000000008278                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: print_long_format+2E↑j
.text:0000000000008280                 mov     eax, [rdi+0A8h]
.text:0000000000008286                 lea     rdx, filetype_letter ; "?pcdb-lswd"
.text:000000000000828D                 cmp     cs:any_has_acl, 0
.text:0000000000008294                 lea     r13, [rsp+1358h+var_12A4]
.text:000000000000829C                 mov     r10d, 3F3Fh
.text:00000000000082A2                 movzx   eax, byte ptr [rdx+rax]
.text:00000000000082A6                 mov     [rsp+1358h+var_12A4], al
.text:00000000000082AD                 mov     rax, 3F3F3F3F3F3F3F3Fh
.text:00000000000082B7                 mov     [rsp+1358h+var_12A3], rax
.text:00000000000082BF                 mov     [r13+9], r10w
.text:00000000000082C4                 mov     [rsp+1358h+var_1299], 0
.text:00000000000082CC                 jz      loc_7EE5
.text:00000000000082D2
.text:00000000000082D2 loc_82D2:                               ; CODE XREF: print_long_format+4F↑j
.text:00000000000082D2                 mov     eax, [rbp+0BCh]
.text:00000000000082D8                 cmp     eax, 1
.text:00000000000082DB                 jz      loc_85E0
.text:00000000000082E1                 cmp     eax, 2
.text:00000000000082E4                 jnz     loc_7EED
.text:00000000000082EA                 mov     eax, cs:time_type
.text:00000000000082F0                 mov     [rsp+1358h+var_129A], 2Bh ; '+'
.text:00000000000082F8                 cmp     eax, 1
.text:00000000000082FB                 jnz     loc_7EFC
.text:0000000000008301                 nop     dword ptr [rax+00000000h]
.text:0000000000008308
.text:0000000000008308 loc_8308:                               ; CODE XREF: print_long_format+66↑j
.text:0000000000008308                 cmp     cs:print_inode, 0
.text:000000000000830F                 mov     rdx, [rbp+80h]
.text:0000000000008316                 mov     rax, [rbp+88h]
.text:000000000000831D                 mov     [rsp+1358h+var_1338], rdx
.text:0000000000008322                 movzx   edx, byte ptr [rbp+0B8h]
.text:0000000000008329                 mov     [rsp+1358h+var_1330], rax
.text:000000000000832E                 jnz     loc_7F31
.text:0000000000008334
.text:0000000000008334 loc_8334:                               ; CODE XREF: print_long_format+9B↑j
.text:0000000000008334                 lea     r12, [rsp+1358h+s]
.text:000000000000833C                 mov     rbx, r12
.text:000000000000833F                 jmp     loc_7FB3
.text:000000000000833F ; ---------------------------------------------------------------------------
.text:0000000000008344                 align 8
.text:0000000000008348
.text:0000000000008348 loc_8348:                               ; CODE XREF: print_long_format:loc_7EFC↑j
.text:0000000000008348                 mov     rax, [rbp+78h]
.text:000000000000834C                 mov     rdx, [rbp+70h]
.text:0000000000008350                 mov     [rsp+1358h+var_1330], rax
.text:0000000000008355                 mov     [rsp+1358h+var_1338], rdx
.text:000000000000835A                 jmp     loc_7F1D
.text:000000000000835A ; ---------------------------------------------------------------------------
.text:000000000000835F                 align 20h
.text:0000000000008360
.text:0000000000008360 loc_8360:                               ; CODE XREF: print_long_format+277↑j
.text:0000000000008360                 lea     r14, s          ; "?"
.text:0000000000008367                 jmp     loc_8146
.text:0000000000008367 ; ---------------------------------------------------------------------------
.text:000000000000836C                 align 10h
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: print_long_format+308↑j
.text:0000000000008370                 mov     rbx, r13
.text:0000000000008373                 jmp     loc_8185
.text:0000000000008373 ; ---------------------------------------------------------------------------
.text:0000000000008378                 align 20h
.text:0000000000008380
.text:0000000000008380 loc_8380:                               ; CODE XREF: print_long_format+3A0↑j
.text:0000000000008380                 cmp     qword ptr [rbp+8], 0
.text:0000000000008385                 jz      loc_824F
.text:000000000000838B                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000008392                 lea     rdi, asc_178C9  ; " -> "
.text:0000000000008399                 mov     edx, 4          ; n
.text:000000000000839E                 mov     esi, 1          ; size
.text:00000000000083A3                 call    _fwrite_unlocked
.text:00000000000083A8                 lea     rcx, [rbx+r12+4]
.text:00000000000083AD                 xor     edx, edx
.text:00000000000083AF                 mov     esi, 1
.text:00000000000083B4                 mov     rdi, rbp
.text:00000000000083B7                 add     cs:dired_pos, 4
.text:00000000000083BF                 call    print_name_with_quoting
.text:00000000000083C4                 mov     edx, cs:indicator_style
.text:00000000000083CA                 test    edx, edx
.text:00000000000083CC                 jz      loc_824F
.text:00000000000083D2                 mov     esi, [rbp+0ACh]
.text:00000000000083D8                 xor     edx, edx
.text:00000000000083DA                 mov     edi, 1
.text:00000000000083DF                 call    print_type_indicator
.text:00000000000083E4                 jmp     loc_824F
.text:00000000000083E4 ; ---------------------------------------------------------------------------
.text:00000000000083E9                 align 10h
.text:00000000000083F0
.text:00000000000083F0 loc_83F0:                               ; CODE XREF: print_long_format+324↑j
.text:00000000000083F0                 lea     rbx, [rsp+1358h+var_1328]
.text:00000000000083F5                 mov     rdi, cs:localtz
.text:00000000000083FC                 lea     rsi, [rsp+1358h+var_1338]
.text:0000000000008401                 mov     rdx, rbx
.text:0000000000008404                 call    localtime_rz
.text:0000000000008409                 test    rax, rax
.text:000000000000840C                 jz      loc_85C0
.text:0000000000008412                 mov     rcx, cs:current_time.tv_sec
.text:0000000000008419                 mov     rdx, [rsp+1358h+var_1338]
.text:000000000000841E                 cmp     rcx, rdx
.text:0000000000008421                 jl      loc_8620
.text:0000000000008427                 mov     rdi, cs:current_time.tv_nsec
.text:000000000000842E                 mov     r9, [rsp+1358h+var_1330]
.text:0000000000008433                 jg      loc_8800
.text:0000000000008439                 cmp     edi, r9d
.text:000000000000843C                 js      loc_8620
.text:0000000000008442                 lea     rax, [rcx-0F0C2ACh]
.text:0000000000008449                 cmp     rax, rdx
.text:000000000000844C                 jl      loc_866D
.text:0000000000008452                 mov     eax, 0
.text:0000000000008457                 jle     loc_8820
.text:000000000000845D                 nop     dword ptr [rax]
.text:0000000000008460
.text:0000000000008460 loc_8460:                               ; CODE XREF: print_long_format+7CC↓j
.text:0000000000008460                                         ; print_long_format+7D7↓j ...
.text:0000000000008460                 cmp     cs:use_abformat, 0
.text:0000000000008467                 mov     r8, cs:localtz
.text:000000000000846E                 jz      loc_8770
.text:0000000000008474                 lea     rdx, [rax+rax]
.text:0000000000008478                 add     rax, rdx
.text:000000000000847B                 movsxd  rdx, [rsp+1358h+var_1318]
.text:0000000000008480                 lea     rdx, [rdx+rax*4]
.text:0000000000008484                 lea     rax, abformat
.text:000000000000848B                 shl     rdx, 7
.text:000000000000848F                 add     rdx, rax
.text:0000000000008492
.text:0000000000008492 loc_8492:                               ; CODE XREF: print_long_format+8EB↓j
.text:0000000000008492                 mov     rcx, rbx
.text:0000000000008495                 mov     esi, 3E9h
.text:000000000000849A                 mov     rdi, r13
.text:000000000000849D                 call    nstrftime
.text:00000000000084A2                 test    rax, rax
.text:00000000000084A5                 jz      loc_85C0
.text:00000000000084AB                 add     r13, rax
.text:00000000000084AE                 jmp     loc_85CB
.text:00000000000084AE ; ---------------------------------------------------------------------------
.text:00000000000084B3                 align 8
.text:00000000000084B8
.text:00000000000084B8 loc_84B8:                               ; CODE XREF: print_long_format+1F8↑j
.text:00000000000084B8                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000084BF                 lea     rdi, asc_178BC  ; "  "
.text:00000000000084C6                 mov     edx, 2          ; n
.text:00000000000084CB                 mov     esi, 1          ; size
.text:00000000000084D0                 call    _fwrite_unlocked
.text:00000000000084D5                 add     cs:dired_pos, 2
.text:00000000000084DD                 jmp     loc_808E
.text:00000000000084DD ; ---------------------------------------------------------------------------
.text:00000000000084E2                 align 8
.text:00000000000084E8
.text:00000000000084E8 loc_84E8:                               ; CODE XREF: print_long_format+1B0↑j
.text:00000000000084E8                 mov     rdi, [rbp+28h]
.text:00000000000084EC                 lea     rsi, [rsp+1358h+var_1278]
.text:00000000000084F4                 call    umaxtostr
.text:00000000000084F9                 jmp     loc_8046
.text:00000000000084F9 ; ---------------------------------------------------------------------------
.text:00000000000084FE                 align 20h
.text:0000000000008500
.text:0000000000008500 loc_8500:                               ; CODE XREF: print_long_format+155↑j
.text:0000000000008500                                         ; print_long_format+197↑j
.text:0000000000008500                 mov     rdx, rbx
.text:0000000000008503                 jmp     loc_8015
.text:0000000000008503 ; ---------------------------------------------------------------------------
.text:0000000000008508                 align 10h
.text:0000000000008510
.text:0000000000008510 loc_8510:                               ; CODE XREF: print_long_format+26A↑j
.text:0000000000008510                 mov     rdi, [rbp+0B0h] ; s
.text:0000000000008517                 mov     edx, cs:scontext_width
.text:000000000000851D                 xor     esi, esi
.text:000000000000851F                 call    format_user_or_group
.text:0000000000008524                 jmp     loc_8100
.text:0000000000008524 ; ---------------------------------------------------------------------------
.text:0000000000008529                 align 10h
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: print_long_format+25A↑j
.text:0000000000008530                 movzx   edx, byte ptr [rbp+0B8h]
.text:0000000000008537                 mov     edi, [rbp+34h]
.text:000000000000853A                 mov     esi, cs:author_width
.text:0000000000008540                 call    format_user
.text:0000000000008545                 jmp     loc_80F0
.text:0000000000008545 ; ---------------------------------------------------------------------------
.text:000000000000854A                 align 10h
.text:0000000000008550
.text:0000000000008550 loc_8550:                               ; CODE XREF: print_long_format+24D↑j
.text:0000000000008550                 cmp     byte ptr [rbp+0B8h], 0
.text:0000000000008557                 mov     edx, cs:group_width
.text:000000000000855D                 lea     rdi, s          ; "?"
.text:0000000000008564                 mov     esi, [rbp+38h]
.text:0000000000008567                 jz      short loc_8590
.text:0000000000008569                 xor     edi, edi
.text:000000000000856B                 cmp     cs:numeric_ids, 0
.text:0000000000008572                 jnz     short loc_8590
.text:0000000000008574                 mov     edi, esi
.text:0000000000008576                 mov     [rsp+1358h+var_1350], rsi
.text:000000000000857B                 mov     [rsp+1358h+var_1354], edx
.text:000000000000857F                 call    getuser_0
.text:0000000000008584                 mov     rsi, [rsp+1358h+var_1350]
.text:0000000000008589                 mov     edx, [rsp+1358h+var_1354]
.text:000000000000858D                 mov     rdi, rax        ; s
.text:0000000000008590
.text:0000000000008590 loc_8590:                               ; CODE XREF: print_long_format+6D7↑j
.text:0000000000008590                                         ; print_long_format+6E2↑j
.text:0000000000008590                 call    format_user_or_group
.text:0000000000008595                 jmp     loc_80E3
.text:0000000000008595 ; ---------------------------------------------------------------------------
.text:000000000000859A                 align 20h
.text:00000000000085A0
.text:00000000000085A0 loc_85A0:                               ; CODE XREF: print_long_format+240↑j
.text:00000000000085A0                 movzx   edx, byte ptr [rbp+0B8h]
.text:00000000000085A7                 mov     edi, [rbp+34h]
.text:00000000000085AA                 mov     esi, cs:owner_width
.text:00000000000085B0                 call    format_user
.text:00000000000085B5                 jmp     loc_80D6
.text:00000000000085B5 ; ---------------------------------------------------------------------------
.text:00000000000085BA                 align 20h
.text:00000000000085C0
.text:00000000000085C0 loc_85C0:                               ; CODE XREF: print_long_format+57C↑j
.text:00000000000085C0                                         ; print_long_format+615↑j
.text:00000000000085C0                 cmp     byte ptr [r13+0], 0
.text:00000000000085C5                 jnz     loc_886D
.text:00000000000085CB
.text:00000000000085CB loc_85CB:                               ; CODE XREF: print_long_format+61E↑j
.text:00000000000085CB                 mov     ecx, 20h ; ' '
.text:00000000000085D0                 lea     rbx, [r13+1]
.text:00000000000085D4                 mov     [r13+0], cx
.text:00000000000085D9                 jmp     loc_81F7
.text:00000000000085D9 ; ---------------------------------------------------------------------------
.text:00000000000085DE                 align 20h
.text:00000000000085E0
.text:00000000000085E0 loc_85E0:                               ; CODE XREF: print_long_format+44B↑j
.text:00000000000085E0                 mov     [rsp+1358h+var_129A], 2Eh ; '.'
.text:00000000000085E8                 jmp     loc_7EED
.text:00000000000085E8 ; ---------------------------------------------------------------------------
.text:00000000000085ED                 align 10h
.text:00000000000085F0
.text:00000000000085F0 loc_85F0:                               ; CODE XREF: print_long_format+217↑j
.text:00000000000085F0                 cmp     cs:print_scontext, 0
.text:00000000000085F7                 jz      loc_8100
.text:00000000000085FD                 jmp     loc_80B0
.text:00000000000085FD ; ---------------------------------------------------------------------------
.text:0000000000008602                 align 8
.text:0000000000008608
.text:0000000000008608 loc_8608:                               ; CODE XREF: print_long_format+B3↑j
.text:0000000000008608                 lea     rsi, [rsp+1358h+var_1278]
.text:0000000000008610                 call    umaxtostr
.text:0000000000008615                 mov     r9, rax
.text:0000000000008618                 jmp     loc_7F49
.text:0000000000008618 ; ---------------------------------------------------------------------------
.text:000000000000861D                 align 20h
.text:0000000000008620
.text:0000000000008620 loc_8620:                               ; CODE XREF: print_long_format+591↑j
.text:0000000000008620                                         ; print_long_format+5AC↑j
.text:0000000000008620                 lea     rdi, current_time ; tp
.text:0000000000008627                 call    gettime
.text:000000000000862C                 mov     rcx, cs:current_time.tv_sec
.text:0000000000008633                 mov     rdx, [rsp+1358h+var_1338]
.text:0000000000008638                 mov     rdi, cs:current_time.tv_nsec
.text:000000000000863F                 mov     r9, [rsp+1358h+var_1330]
.text:0000000000008644                 lea     rsi, [rcx-0F0C2ACh]
.text:000000000000864B                 cmp     rsi, rdx
.text:000000000000864E                 jge     loc_8815
.text:0000000000008654
.text:0000000000008654 loc_8654:                               ; CODE XREF: print_long_format+99B↓j
.text:0000000000008654                 cmp     rdx, rcx
.text:0000000000008657                 mov     eax, 1
.text:000000000000865C                 jl      loc_8460
.text:0000000000008662                 mov     eax, 0
.text:0000000000008667                 jg      loc_8460
.text:000000000000866D
.text:000000000000866D loc_866D:                               ; CODE XREF: print_long_format+5BC↑j
.text:000000000000866D                 mov     eax, r9d
.text:0000000000008670                 sub     eax, edi
.text:0000000000008672                 shr     eax, 1Fh
.text:0000000000008675                 jmp     loc_8460
.text:0000000000008675 ; ---------------------------------------------------------------------------
.text:000000000000867A                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: print_long_format+135↑j
.text:0000000000008680                 mov     rdi, [rbp+58h]
.text:0000000000008684                 mov     r8, cs:output_block_size
.text:000000000000868B                 lea     rsi, [rsp+1358h+var_1278]
.text:0000000000008693                 mov     edx, cs:human_output_opts
.text:0000000000008699                 mov     ecx, 200h
.text:000000000000869E                 call    human_readable
.text:00000000000086A3                 mov     r15, rax
.text:00000000000086A6                 jmp     loc_7FCB
.text:00000000000086A6 ; ---------------------------------------------------------------------------
.text:00000000000086AB                 align 10h
.text:00000000000086B0
.text:00000000000086B0 loc_86B0:                               ; CODE XREF: print_long_format+28A↑j
.text:00000000000086B0                 mov     edx, cs:major_device_number_width
.text:00000000000086B6                 mov     eax, cs:minor_device_number_width
.text:00000000000086BC                 lea     rsi, [rsp+1358h+var_1278]
.text:00000000000086C4                 mov     r13d, cs:file_size_width
.text:00000000000086CB                 lea     eax, [rdx+rax+2]
.text:00000000000086CF                 sub     r13d, eax
.text:00000000000086D2                 mov     rax, [rbp+40h]
.text:00000000000086D6                 movzx   edx, al
.text:00000000000086D9                 shr     rax, 0Ch
.text:00000000000086DD                 mov     rdi, rax
.text:00000000000086E0                 xor     dil, dil
.text:00000000000086E3                 or      edi, edx
.text:00000000000086E5                 call    umaxtostr
.text:00000000000086EA                 mov     r15, rax
.text:00000000000086ED                 mov     rax, [rbp+40h]
.text:00000000000086F1                 lea     rsi, [rsp+1358h+var_1298]
.text:00000000000086F9                 mov     r14d, cs:minor_device_number_width
.text:0000000000008700                 mov     rdi, rax
.text:0000000000008703                 shr     rax, 20h
.text:0000000000008707                 shr     rdi, 8
.text:000000000000870B                 mov     edx, edi
.text:000000000000870D                 mov     rdi, rax
.text:0000000000008710                 and     edx, 0FFFh
.text:0000000000008716                 and     edi, 0FFFFF000h
.text:000000000000871C                 or      edi, edx
.text:000000000000871E                 call    umaxtostr
.text:0000000000008723                 test    r13d, r13d
.text:0000000000008726                 mov     r8d, 0
.text:000000000000872C                 push    r15
.text:000000000000872E                 cmovns  r8d, r13d
.text:0000000000008732                 add     r8d, cs:major_device_number_width
.text:0000000000008739                 push    r14
.text:000000000000873B                 lea     rcx, unk_178BF
.text:0000000000008742                 mov     r9, rax
.text:0000000000008745                 mov     esi, 1
.text:000000000000874A                 mov     rdi, rbx
.text:000000000000874D                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008754                 xor     eax, eax
.text:0000000000008756                 call    ___sprintf_chk
.text:000000000000875B                 movsxd  rax, cs:file_size_width
.text:0000000000008762                 pop     rsi
.text:0000000000008763                 pop     rdi
.text:0000000000008764                 lea     r13, [rbx+rax+1]
.text:0000000000008769                 jmp     loc_81A1
.text:0000000000008769 ; ---------------------------------------------------------------------------
.text:000000000000876E                 align 10h
.text:0000000000008770
.text:0000000000008770 loc_8770:                               ; CODE XREF: print_long_format+5DE↑j
.text:0000000000008770                 lea     rdx, long_time_format
.text:0000000000008777                 mov     rdx, [rdx+rax*8]
.text:000000000000877B                 jmp     loc_8492
.text:0000000000008780 ; ---------------------------------------------------------------------------
.text:0000000000008780
.text:0000000000008780 loc_8780:                               ; CODE XREF: print_long_format+334↑j
.text:0000000000008780                 lea     r15, [rsp+1358h+var_12E8]
.text:0000000000008785                 mov     rdi, cs:localtz
.text:000000000000878C                 lea     rsi, [rsp+1358h+var_1340]
.text:0000000000008791                 mov     [rsp+1358h+var_1340], 0
.text:000000000000879A                 mov     rdx, r15
.text:000000000000879D                 call    localtime_rz
.text:00000000000087A2                 test    rax, rax
.text:00000000000087A5                 jz      short loc_87DE
.text:00000000000087A7                 cmp     cs:use_abformat, 0
.text:00000000000087AE                 mov     r8, cs:localtz
.text:00000000000087B5                 mov     rdx, cs:long_time_format
.text:00000000000087BC                 jnz     short loc_8830
.text:00000000000087BE
.text:00000000000087BE loc_87BE:                               ; CODE XREF: print_long_format+9B6↓j
.text:00000000000087BE                 lea     r14, [rsp+1358h+var_1278]
.text:00000000000087C6                 xor     r9d, r9d
.text:00000000000087C9                 mov     rcx, r15
.text:00000000000087CC                 mov     esi, 3E9h
.text:00000000000087D1                 mov     rdi, r14
.text:00000000000087D4                 call    nstrftime
.text:00000000000087D9                 test    rax, rax
.text:00000000000087DC                 jnz     short loc_884B
.text:00000000000087DE
.text:00000000000087DE loc_87DE:                               ; CODE XREF: print_long_format+915↑j
.text:00000000000087DE                 mov     r8d, cs:width_10774
.text:00000000000087E5
.text:00000000000087E5 loc_87E5:                               ; CODE XREF: print_long_format+9D1↓j
.text:00000000000087E5                 test    r8d, r8d
.text:00000000000087E8                 jns     loc_81CA
.text:00000000000087EE                 mov     cs:width_10774, 0
.text:00000000000087F8                 xor     r8d, r8d
.text:00000000000087FB                 jmp     loc_81CA
.text:0000000000008800 ; ---------------------------------------------------------------------------
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: print_long_format+5A3↑j
.text:0000000000008800                 lea     rsi, [rcx-0F0C2ACh]
.text:0000000000008807                 mov     eax, 1
.text:000000000000880C                 cmp     rsi, rdx
.text:000000000000880F                 jl      loc_8460
.text:0000000000008815
.text:0000000000008815 loc_8815:                               ; CODE XREF: print_long_format+7BE↑j
.text:0000000000008815                 xor     eax, eax
.text:0000000000008817                 cmp     rsi, rdx
.text:000000000000881A                 jg      loc_8460
.text:0000000000008820
.text:0000000000008820 loc_8820:                               ; CODE XREF: print_long_format+5C7↑j
.text:0000000000008820                 xor     eax, eax
.text:0000000000008822                 cmp     edi, r9d
.text:0000000000008825                 jns     loc_8460
.text:000000000000882B                 jmp     loc_8654
.text:0000000000008830 ; ---------------------------------------------------------------------------
.text:0000000000008830
.text:0000000000008830 loc_8830:                               ; CODE XREF: print_long_format+92C↑j
.text:0000000000008830                 movsxd  rdx, [rsp+1358h+var_12D8]
.text:0000000000008838                 lea     rax, abformat
.text:000000000000883F                 shl     rdx, 7
.text:0000000000008843                 add     rdx, rax
.text:0000000000008846                 jmp     loc_87BE
.text:000000000000884B ; ---------------------------------------------------------------------------
.text:000000000000884B
.text:000000000000884B loc_884B:                               ; CODE XREF: print_long_format+94C↑j
.text:000000000000884B                 xor     edx, edx
.text:000000000000884D                 mov     rsi, rax
.text:0000000000008850                 mov     rdi, r14
.text:0000000000008853                 call    mbsnwidth
.text:0000000000008858                 mov     r8d, eax
.text:000000000000885B                 mov     cs:width_10774, eax
.text:0000000000008861                 jmp     short loc_87E5
.text:0000000000008863 ; ---------------------------------------------------------------------------
.text:0000000000008863
.text:0000000000008863 loc_8863:                               ; CODE XREF: print_long_format+3D0↑j
.text:0000000000008863                 call    ___stack_chk_fail
.text:0000000000008868 ; ---------------------------------------------------------------------------
.text:0000000000008868
.text:0000000000008868 loc_8868:                               ; CODE XREF: print_long_format+75↑j
.text:0000000000008868                 call    _abort
.text:000000000000886D ; ---------------------------------------------------------------------------
.text:000000000000886D
.text:000000000000886D loc_886D:                               ; CODE XREF: print_long_format+735↑j
.text:000000000000886D                 cmp     byte ptr [rbp+0B8h], 0
.text:0000000000008874                 lea     rbx, s          ; "?"
.text:000000000000887B                 jz      loc_81BA
.text:0000000000008881                 mov     rdi, [rsp+1358h+var_1338]
.text:0000000000008886                 lea     rsi, [rsp+1358h+var_1298]
.text:000000000000888E                 call    imaxtostr
.text:0000000000008893                 mov     rbx, rax
.text:0000000000008896                 jmp     loc_81BA
.text:0000000000008896 ; } // starts at 7E90
.text:0000000000008896 print_long_format endp
.text:0000000000008896
.text:0000000000008896 ; ---------------------------------------------------------------------------
.text:000000000000889B                 align 20h
.text:00000000000088A0
.text:00000000000088A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088A0
.text:00000000000088A0 ; Attributes: info_from_lumina
.text:00000000000088A0
.text:00000000000088A0 ; size_t __fastcall quote_name_width(const char *name, const quoting_options *options, int needs_general_quoting)
.text:00000000000088A0 quote_name_width proc near              ; CODE XREF: length_of_file_name_and_frills+7D↓p
.text:00000000000088A0
.text:00000000000088A0 var_2039        = byte ptr -2039h
.text:00000000000088A0 ptr             = qword ptr -2038h
.text:00000000000088A0 var_2030        = qword ptr -2030h
.text:00000000000088A0 var_2028        = byte ptr -2028h
.text:00000000000088A0 var_20          = qword ptr -20h
.text:00000000000088A0
.text:00000000000088A0 ; __unwind {
.text:00000000000088A0                 push    rbp
.text:00000000000088A1                 push    rbx
.text:00000000000088A2                 mov     rbp, rdi
.text:00000000000088A5                 mov     ecx, edx
.text:00000000000088A7                 mov     rdx, rsi
.text:00000000000088AA                 mov     rsi, rbp
.text:00000000000088AD                 sub     rsp, 2038h
.text:00000000000088B4                 lea     rbx, [rsp+2048h+var_2028]
.text:00000000000088B9                 lea     rdi, [rsp+2048h+ptr]
.text:00000000000088BE                 lea     r9, [rsp+2048h+var_2039]
.text:00000000000088C3                 lea     r8, [rsp+2048h+var_2030]
.text:00000000000088C8                 mov     rax, fs:28h
.text:00000000000088D1                 mov     [rsp+2048h+var_20], rax
.text:00000000000088D9                 xor     eax, eax
.text:00000000000088DB                 mov     [rsp+2048h+ptr], rbx
.text:00000000000088E0                 call    quote_name_buf
.text:00000000000088E5                 mov     rdi, [rsp+2048h+ptr] ; ptr
.text:00000000000088EA                 cmp     rdi, rbx
.text:00000000000088ED                 jz      short loc_88F9
.text:00000000000088EF                 cmp     rdi, rbp
.text:00000000000088F2                 jz      short loc_88F9
.text:00000000000088F4                 call    free
.text:00000000000088F9
.text:00000000000088F9 loc_88F9:                               ; CODE XREF: quote_name_width+4D↑j
.text:00000000000088F9                                         ; quote_name_width+52↑j
.text:00000000000088F9                 movzx   eax, [rsp+2048h+var_2039]
.text:00000000000088FE                 add     rax, [rsp+2048h+var_2030]
.text:0000000000008903                 mov     rcx, [rsp+2048h+var_20]
.text:000000000000890B                 xor     rcx, fs:28h
.text:0000000000008914                 jnz     short loc_8920
.text:0000000000008916                 add     rsp, 2038h
.text:000000000000891D                 pop     rbx
.text:000000000000891E                 pop     rbp
.text:000000000000891F                 retn
.text:0000000000008920 ; ---------------------------------------------------------------------------
.text:0000000000008920
.text:0000000000008920 loc_8920:                               ; CODE XREF: quote_name_width+74↑j
.text:0000000000008920                 call    ___stack_chk_fail
.text:0000000000008920 ; } // starts at 88A0
.text:0000000000008920 quote_name_width endp
.text:0000000000008920
.text:0000000000008920 ; ---------------------------------------------------------------------------
.text:0000000000008925                 align 10h
.text:0000000000008930
.text:0000000000008930 ; =============== S U B R O U T I N E =======================================
.text:0000000000008930
.text:0000000000008930 ; Attributes: info_from_lumina
.text:0000000000008930
.text:0000000000008930 ; size_t __fastcall length_of_file_name_and_frills(const fileinfo *f)
.text:0000000000008930 length_of_file_name_and_frills proc near
.text:0000000000008930                                         ; CODE XREF: calculate_columns+1B3↓p
.text:0000000000008930                                         ; print_with_separator+70↓p ...
.text:0000000000008930
.text:0000000000008930 buf             = byte ptr -2B8h
.text:0000000000008930 var_20          = qword ptr -20h
.text:0000000000008930
.text:0000000000008930 ; __unwind {
.text:0000000000008930                 push    rbp
.text:0000000000008931                 push    rbx
.text:0000000000008932                 mov     rbp, rdi
.text:0000000000008935                 sub     rsp, 2A8h
.text:000000000000893C                 mov     rax, fs:28h
.text:0000000000008945                 mov     [rsp+2B8h+var_20], rax
.text:000000000000894D                 xor     eax, eax
.text:000000000000894F                 cmp     cs:print_inode, 0
.text:0000000000008956                 jz      loc_8A08
.text:000000000000895C                 cmp     cs:format, 4
.text:0000000000008963                 jz      loc_8AA0
.text:0000000000008969                 movsxd  rbx, cs:inode_number_width
.text:0000000000008970                 add     rbx, 1
.text:0000000000008974                 cmp     cs:print_block_size, 0
.text:000000000000897B                 jz      loc_8A88
.text:0000000000008981
.text:0000000000008981 loc_8981:                               ; CODE XREF: length_of_file_name_and_frills+EE↓j
.text:0000000000008981                 movsxd  rax, cs:block_size_width
.text:0000000000008988                 add     rax, 1
.text:000000000000898C
.text:000000000000898C loc_898C:                               ; CODE XREF: length_of_file_name_and_frills+100↓j
.text:000000000000898C                                         ; length_of_file_name_and_frills+130↓j
.text:000000000000898C                 add     rbx, rax
.text:000000000000898F
.text:000000000000898F loc_898F:                               ; CODE XREF: length_of_file_name_and_frills+E1↓j
.text:000000000000898F                 cmp     cs:print_scontext, 0
.text:0000000000008996                 jnz     loc_8A68
.text:000000000000899C
.text:000000000000899C loc_899C:                               ; CODE XREF: length_of_file_name_and_frills+14F↓j
.text:000000000000899C                                         ; length_of_file_name_and_frills+161↓j
.text:000000000000899C                 mov     edx, [rbp+0C4h]
.text:00000000000089A2                 mov     rsi, cs:filename_quoting_options
.text:00000000000089A9                 mov     rdi, [rbp+0]
.text:00000000000089AD                 call    quote_name_width
.text:00000000000089B2                 add     rbx, rax
.text:00000000000089B5                 mov     eax, cs:indicator_style
.text:00000000000089BB                 test    eax, eax
.text:00000000000089BD                 jz      short loc_89DF
.text:00000000000089BF                 movzx   edi, byte ptr [rbp+0B8h]
.text:00000000000089C6                 mov     edx, [rbp+0A8h]
.text:00000000000089CC                 mov     esi, [rbp+30h]
.text:00000000000089CF                 call    get_type_indicator
.text:00000000000089D4                 test    al, al
.text:00000000000089D6                 setnz   al
.text:00000000000089D9                 movzx   eax, al
.text:00000000000089DC                 add     rbx, rax
.text:00000000000089DF
.text:00000000000089DF loc_89DF:                               ; CODE XREF: length_of_file_name_and_frills+8D↑j
.text:00000000000089DF                 mov     rcx, [rsp+2B8h+var_20]
.text:00000000000089E7                 xor     rcx, fs:28h
.text:00000000000089F0                 mov     rax, rbx
.text:00000000000089F3                 jnz     loc_8AD2
.text:00000000000089F9                 add     rsp, 2A8h
.text:0000000000008A00                 pop     rbx
.text:0000000000008A01                 pop     rbp
.text:0000000000008A02                 retn
.text:0000000000008A02 ; ---------------------------------------------------------------------------
.text:0000000000008A03                 align 8
.text:0000000000008A08
.text:0000000000008A08 loc_8A08:                               ; CODE XREF: length_of_file_name_and_frills+26↑j
.text:0000000000008A08                 xor     ebx, ebx
.text:0000000000008A0A
.text:0000000000008A0A loc_8A0A:                               ; CODE XREF: length_of_file_name_and_frills+188↓j
.text:0000000000008A0A                 cmp     cs:print_block_size, 0
.text:0000000000008A11                 jz      loc_898F
.text:0000000000008A17                 cmp     cs:format, 4
.text:0000000000008A1E                 jnz     loc_8981
.text:0000000000008A24                 cmp     byte ptr [rbp+0B8h], 0
.text:0000000000008A2B                 mov     eax, 2
.text:0000000000008A30                 jz      loc_898C
.text:0000000000008A36                 mov     rdi, [rbp+58h]
.text:0000000000008A3A                 mov     r8, cs:output_block_size
.text:0000000000008A41                 mov     rsi, rsp
.text:0000000000008A44                 mov     edx, cs:human_output_opts
.text:0000000000008A4A                 mov     ecx, 200h
.text:0000000000008A4F                 call    human_readable
.text:0000000000008A54                 mov     rdi, rax        ; s
.text:0000000000008A57                 call    _strlen
.text:0000000000008A5C                 add     rax, 1
.text:0000000000008A60                 jmp     loc_898C
.text:0000000000008A60 ; ---------------------------------------------------------------------------
.text:0000000000008A65                 align 8
.text:0000000000008A68
.text:0000000000008A68 loc_8A68:                               ; CODE XREF: length_of_file_name_and_frills+66↑j
.text:0000000000008A68                 cmp     cs:format, 4
.text:0000000000008A6F                 jz      short loc_8AC0
.text:0000000000008A71
.text:0000000000008A71 loc_8A71:                               ; CODE XREF: length_of_file_name_and_frills+15F↓j
.text:0000000000008A71                 movsxd  rax, cs:scontext_width
.text:0000000000008A78                 add     rax, 1
.text:0000000000008A7C
.text:0000000000008A7C loc_8A7C:                               ; CODE XREF: length_of_file_name_and_frills+1A0↓j
.text:0000000000008A7C                 add     rbx, rax
.text:0000000000008A7F                 jmp     loc_899C
.text:0000000000008A7F ; ---------------------------------------------------------------------------
.text:0000000000008A84                 align 8
.text:0000000000008A88
.text:0000000000008A88 loc_8A88:                               ; CODE XREF: length_of_file_name_and_frills+4B↑j
.text:0000000000008A88                 cmp     cs:print_scontext, 0
.text:0000000000008A8F                 jnz     short loc_8A71
.text:0000000000008A91                 jmp     loc_899C
.text:0000000000008A91 ; ---------------------------------------------------------------------------
.text:0000000000008A96                 align 20h
.text:0000000000008AA0
.text:0000000000008AA0 loc_8AA0:                               ; CODE XREF: length_of_file_name_and_frills+33↑j
.text:0000000000008AA0                 mov     rdi, [rdi+20h]
.text:0000000000008AA4                 mov     rsi, rsp
.text:0000000000008AA7                 call    umaxtostr
.text:0000000000008AAC                 mov     rdi, rax        ; s
.text:0000000000008AAF                 call    _strlen
.text:0000000000008AB4                 lea     rbx, [rax+1]
.text:0000000000008AB8                 jmp     loc_8A0A
.text:0000000000008AB8 ; ---------------------------------------------------------------------------
.text:0000000000008ABD                 align 20h
.text:0000000000008AC0
.text:0000000000008AC0 loc_8AC0:                               ; CODE XREF: length_of_file_name_and_frills+13F↑j
.text:0000000000008AC0                 mov     rdi, [rbp+0B0h] ; s
.text:0000000000008AC7                 call    _strlen
.text:0000000000008ACC                 add     rax, 1
.text:0000000000008AD0                 jmp     short loc_8A7C
.text:0000000000008AD2 ; ---------------------------------------------------------------------------
.text:0000000000008AD2
.text:0000000000008AD2 loc_8AD2:                               ; CODE XREF: length_of_file_name_and_frills+C3↑j
.text:0000000000008AD2                 call    ___stack_chk_fail
.text:0000000000008AD2 ; } // starts at 8930
.text:0000000000008AD2 length_of_file_name_and_frills endp
.text:0000000000008AD2
.text:0000000000008AD2 ; ---------------------------------------------------------------------------
.text:0000000000008AD7                 align 20h
.text:0000000000008AE0
.text:0000000000008AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AE0
.text:0000000000008AE0 ; Attributes: info_from_lumina
.text:0000000000008AE0
.text:0000000000008AE0 ; size_t __fastcall calculate_columns(_Bool by_columns)
.text:0000000000008AE0 calculate_columns proc near             ; CODE XREF: print_current_files+48↓p
.text:0000000000008AE0                                         ; print_current_files+1C3↓p
.text:0000000000008AE0 ; __unwind {
.text:0000000000008AE0                 mov     r9, cs:cwd_n_used
.text:0000000000008AE7                 mov     rcx, cs:max_idx
.text:0000000000008AEE                 push    r14
.text:0000000000008AF0                 push    r13
.text:0000000000008AF2                 push    r12
.text:0000000000008AF4                 push    rbp
.text:0000000000008AF5                 mov     r12d, edi
.text:0000000000008AF8                 cmp     r9, rcx
.text:0000000000008AFB                 push    rbx
.text:0000000000008AFC                 mov     rbx, rcx
.text:0000000000008AFF                 cmovbe  rbx, r9
.text:0000000000008B03                 cmp     rbx, cs:column_info_alloc_11173
.text:0000000000008B0A                 jbe     loc_8C29
.text:0000000000008B10                 mov     rax, rcx
.text:0000000000008B13                 mov     rdi, cs:column_info
.text:0000000000008B1A                 shr     rax, 1
.text:0000000000008B1D                 cmp     rbx, rax
.text:0000000000008B20                 jb      loc_8D90
.text:0000000000008B26                 mov     edx, 18h
.text:0000000000008B2B                 xor     esi, esi
.text:0000000000008B2D                 mov     rax, rdx
.text:0000000000008B30                 mul     rcx
.text:0000000000008B33                 jo      loc_8DC7
.text:0000000000008B39
.text:0000000000008B39 loc_8B39:                               ; CODE XREF: calculate_columns+2EC↓j
.text:0000000000008B39                 test    rax, rax
.text:0000000000008B3C                 js      loc_8DD1
.text:0000000000008B42                 test    rsi, rsi
.text:0000000000008B45                 jnz     loc_8DD1
.text:0000000000008B4B                 lea     rsi, [rcx+rcx*2]
.text:0000000000008B4F                 shl     rsi, 3
.text:0000000000008B53                 call    xrealloc
.text:0000000000008B58                 mov     rbp, cs:max_idx
.text:0000000000008B5F                 mov     cs:column_info, rax
.text:0000000000008B66
.text:0000000000008B66 loc_8B66:                               ; CODE XREF: calculate_columns+2E2↓j
.text:0000000000008B66                 mov     rax, cs:column_info_alloc_11173
.text:0000000000008B6D                 mov     rdi, rbp
.text:0000000000008B70                 sub     rdi, rax
.text:0000000000008B73                 add     rax, 1
.text:0000000000008B77                 add     rax, rbp
.text:0000000000008B7A                 mov     rcx, rdi
.text:0000000000008B7D                 mov     rsi, rax
.text:0000000000008B80                 setb    al
.text:0000000000008B83                 movzx   eax, al
.text:0000000000008B86                 imul    rcx, rsi
.text:0000000000008B8A                 test    rax, rax
.text:0000000000008B8D                 jnz     loc_8DD1
.text:0000000000008B93                 xor     edx, edx
.text:0000000000008B95                 mov     rax, rcx
.text:0000000000008B98                 div     rdi
.text:0000000000008B9B                 cmp     rsi, rax
.text:0000000000008B9E                 jnz     loc_8DD1
.text:0000000000008BA4                 mov     edx, 8
.text:0000000000008BA9                 shr     rcx, 1
.text:0000000000008BAC                 xor     esi, esi
.text:0000000000008BAE                 mov     rax, rdx
.text:0000000000008BB1                 mul     rcx
.text:0000000000008BB4                 jo      loc_8DD6
.text:0000000000008BBA
.text:0000000000008BBA loc_8BBA:                               ; CODE XREF: calculate_columns+2FB↓j
.text:0000000000008BBA                 test    rax, rax
.text:0000000000008BBD                 js      loc_8DD1
.text:0000000000008BC3                 test    rsi, rsi
.text:0000000000008BC6                 jnz     loc_8DD1
.text:0000000000008BCC                 lea     rdi, ds:0[rcx*8]
.text:0000000000008BD4                 call    xmalloc
.text:0000000000008BD9                 mov     rdx, cs:column_info_alloc_11173
.text:0000000000008BE0                 cmp     rbp, rdx
.text:0000000000008BE3                 jbe     short loc_8C1B
.text:0000000000008BE5                 mov     rcx, cs:column_info
.text:0000000000008BEC                 lea     rsi, [rdx+rdx*2]
.text:0000000000008BF0                 lea     rdx, ds:8[rdx*8]
.text:0000000000008BF8                 lea     rcx, [rcx+rsi*8+10h]
.text:0000000000008BFD                 lea     rsi, ds:8[rbp*8]
.text:0000000000008C05                 nop     dword ptr [rax]
.text:0000000000008C08
.text:0000000000008C08 loc_8C08:                               ; CODE XREF: calculate_columns+139↓j
.text:0000000000008C08                 mov     [rcx], rax
.text:0000000000008C0B                 add     rax, rdx
.text:0000000000008C0E                 add     rdx, 8
.text:0000000000008C12                 add     rcx, 18h
.text:0000000000008C16                 cmp     rsi, rdx
.text:0000000000008C19                 jnz     short loc_8C08
.text:0000000000008C1B
.text:0000000000008C1B loc_8C1B:                               ; CODE XREF: calculate_columns+103↑j
.text:0000000000008C1B                 mov     r9, cs:cwd_n_used
.text:0000000000008C22                 mov     cs:column_info_alloc_11173, rbp
.text:0000000000008C29
.text:0000000000008C29 loc_8C29:                               ; CODE XREF: calculate_columns+2A↑j
.text:0000000000008C29                 test    rbx, rbx
.text:0000000000008C2C                 jz      short loc_8C79
.text:0000000000008C2E                 mov     rdi, cs:column_info
.text:0000000000008C35                 lea     r8, [rbx+rbx*2+3]
.text:0000000000008C3A                 xor     esi, esi
.text:0000000000008C3C                 mov     edx, 3
.text:0000000000008C41                 nop     dword ptr [rax+00000000h]
.text:0000000000008C48
.text:0000000000008C48 loc_8C48:                               ; CODE XREF: calculate_columns+197↓j
.text:0000000000008C48                 mov     rax, [rdi+rdx*8-8]
.text:0000000000008C4D                 add     rsi, 8
.text:0000000000008C51                 mov     byte ptr [rdi+rdx*8-18h], 1
.text:0000000000008C56                 mov     [rdi+rdx*8-10h], rdx
.text:0000000000008C5B                 lea     rcx, [rax+rsi]
.text:0000000000008C5F                 nop
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: calculate_columns+18E↓j
.text:0000000000008C60                 mov     qword ptr [rax], 3
.text:0000000000008C67                 add     rax, 8
.text:0000000000008C6B                 cmp     rcx, rax
.text:0000000000008C6E                 jnz     short loc_8C60
.text:0000000000008C70                 add     rdx, 3
.text:0000000000008C74                 cmp     r8, rdx
.text:0000000000008C77                 jnz     short loc_8C48
.text:0000000000008C79
.text:0000000000008C79 loc_8C79:                               ; CODE XREF: calculate_columns+14C↑j
.text:0000000000008C79                 test    r9, r9
.text:0000000000008C7C                 jz      loc_8D4D
.text:0000000000008C82                 xor     ebp, ebp
.text:0000000000008C84                 nop     dword ptr [rax+00h]
.text:0000000000008C88
.text:0000000000008C88 loc_8C88:                               ; CODE XREF: calculate_columns+267↓j
.text:0000000000008C88                 mov     rax, cs:sorted_file
.text:0000000000008C8F                 mov     rdi, [rax+rbp*8]
.text:0000000000008C93                 call    length_of_file_name_and_frills
.text:0000000000008C98                 test    rbx, rbx
.text:0000000000008C9B                 mov     r10, rax
.text:0000000000008C9E                 mov     rdi, cs:cwd_n_used
.text:0000000000008CA5                 jz      loc_8D40
.text:0000000000008CAB                 mov     r14, cs:line_length
.text:0000000000008CB2                 mov     rcx, cs:column_info
.text:0000000000008CB9                 xor     esi, esi
.text:0000000000008CBB                 lea     r11, [rax+2]
.text:0000000000008CBF                 lea     r13, [rdi-1]
.text:0000000000008CC3                 jmp     short loc_8D21
.text:0000000000008CC3 ; ---------------------------------------------------------------------------
.text:0000000000008CC5                 align 8
.text:0000000000008CC8
.text:0000000000008CC8 loc_8CC8:                               ; CODE XREF: calculate_columns+24D↓j
.text:0000000000008CC8                 lea     rax, [r13+r8+0]
.text:0000000000008CCD                 xor     edx, edx
.text:0000000000008CCF                 div     r8
.text:0000000000008CD2                 xor     edx, edx
.text:0000000000008CD4                 mov     r9, rax
.text:0000000000008CD7                 mov     rax, rbp
.text:0000000000008CDA                 div     r9
.text:0000000000008CDD                 mov     r9, rax
.text:0000000000008CE0
.text:0000000000008CE0 loc_8CE0:                               ; CODE XREF: calculate_columns+25A↓j
.text:0000000000008CE0                 mov     rdx, [rcx+10h]
.text:0000000000008CE4                 cmp     r9, rsi
.text:0000000000008CE7                 mov     rax, r10
.text:0000000000008CEA                 cmovnz  rax, r11
.text:0000000000008CEE                 lea     rsi, [rdx+r9*8]
.text:0000000000008CF2                 mov     rdx, [rsi]
.text:0000000000008CF5                 cmp     rdx, rax
.text:0000000000008CF8                 jnb     short loc_8D15
.text:0000000000008CFA                 mov     r9, [rcx+8]
.text:0000000000008CFE                 sub     r9, rdx
.text:0000000000008D01                 mov     rdx, r9
.text:0000000000008D04                 add     rdx, rax
.text:0000000000008D07                 mov     [rcx+8], rdx
.text:0000000000008D0B                 mov     [rsi], rax
.text:0000000000008D0E                 cmp     [rcx+8], r14
.text:0000000000008D12                 setb    byte ptr [rcx]
.text:0000000000008D15
.text:0000000000008D15 loc_8D15:                               ; CODE XREF: calculate_columns+218↑j
.text:0000000000008D15                                         ; calculate_columns+248↓j
.text:0000000000008D15                 add     rcx, 18h
.text:0000000000008D19                 cmp     rbx, r8
.text:0000000000008D1C                 mov     rsi, r8
.text:0000000000008D1F                 jz      short loc_8D40
.text:0000000000008D21
.text:0000000000008D21 loc_8D21:                               ; CODE XREF: calculate_columns+1E3↑j
.text:0000000000008D21                 cmp     byte ptr [rcx], 0
.text:0000000000008D24                 lea     r8, [rsi+1]
.text:0000000000008D28                 jz      short loc_8D15
.text:0000000000008D2A                 test    r12b, r12b
.text:0000000000008D2D                 jnz     short loc_8CC8
.text:0000000000008D2F                 mov     rax, rbp
.text:0000000000008D32                 xor     edx, edx
.text:0000000000008D34                 div     r8
.text:0000000000008D37                 mov     r9, rdx
.text:0000000000008D3A                 jmp     short loc_8CE0
.text:0000000000008D3A ; ---------------------------------------------------------------------------
.text:0000000000008D3C                 align 20h
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: calculate_columns+1C5↑j
.text:0000000000008D40                                         ; calculate_columns+23F↑j
.text:0000000000008D40                 add     rbp, 1
.text:0000000000008D44                 cmp     rbp, rdi
.text:0000000000008D47                 jb      loc_8C88
.text:0000000000008D4D
.text:0000000000008D4D loc_8D4D:                               ; CODE XREF: calculate_columns+19C↑j
.text:0000000000008D4D                 cmp     rbx, 1
.text:0000000000008D51                 jbe     short loc_8D84
.text:0000000000008D53                 mov     rdx, cs:column_info
.text:0000000000008D5A                 lea     rax, [rbx+rbx*2]
.text:0000000000008D5E                 shl     rax, 3
.text:0000000000008D62                 cmp     byte ptr [rdx+rax-18h], 0
.text:0000000000008D67                 jnz     short loc_8D84
.text:0000000000008D69                 lea     rax, [rdx+rax-30h]
.text:0000000000008D6E                 jmp     short loc_8D7A
.text:0000000000008D70 ; ---------------------------------------------------------------------------
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: calculate_columns+2A2↓j
.text:0000000000008D70                 sub     rax, 18h
.text:0000000000008D74                 cmp     byte ptr [rax+18h], 0
.text:0000000000008D78                 jnz     short loc_8D84
.text:0000000000008D7A
.text:0000000000008D7A loc_8D7A:                               ; CODE XREF: calculate_columns+28E↑j
.text:0000000000008D7A                 sub     rbx, 1
.text:0000000000008D7E                 cmp     rbx, 1
.text:0000000000008D82                 jnz     short loc_8D70
.text:0000000000008D84
.text:0000000000008D84 loc_8D84:                               ; CODE XREF: calculate_columns+271↑j
.text:0000000000008D84                                         ; calculate_columns+287↑j ...
.text:0000000000008D84                 mov     rax, rbx
.text:0000000000008D87                 pop     rbx
.text:0000000000008D88                 pop     rbp
.text:0000000000008D89                 pop     r12
.text:0000000000008D8B                 pop     r13
.text:0000000000008D8D                 pop     r14
.text:0000000000008D8F                 retn
.text:0000000000008D90 ; ---------------------------------------------------------------------------
.text:0000000000008D90
.text:0000000000008D90 loc_8D90:                               ; CODE XREF: calculate_columns+40↑j
.text:0000000000008D90                 mov     edx, 30h ; '0'
.text:0000000000008D95                 xor     ecx, ecx
.text:0000000000008D97                 mov     rax, rdx
.text:0000000000008D9A                 mul     rbx
.text:0000000000008D9D                 jo      short loc_8DE0
.text:0000000000008D9F
.text:0000000000008D9F loc_8D9F:                               ; CODE XREF: calculate_columns+305↓j
.text:0000000000008D9F                 test    rax, rax
.text:0000000000008DA2                 js      short loc_8DD1
.text:0000000000008DA4                 test    rcx, rcx
.text:0000000000008DA7                 jnz     short loc_8DD1
.text:0000000000008DA9                 lea     rbp, [rbx+rbx]
.text:0000000000008DAD                 lea     rsi, [rbp+rbx+0]
.text:0000000000008DB2                 shl     rsi, 4
.text:0000000000008DB6                 call    xrealloc
.text:0000000000008DBB                 mov     cs:column_info, rax
.text:0000000000008DC2                 jmp     loc_8B66
.text:0000000000008DC7 ; ---------------------------------------------------------------------------
.text:0000000000008DC7
.text:0000000000008DC7 loc_8DC7:                               ; CODE XREF: calculate_columns+53↑j
.text:0000000000008DC7                 mov     esi, 1
.text:0000000000008DCC                 jmp     loc_8B39
.text:0000000000008DD1 ; ---------------------------------------------------------------------------
.text:0000000000008DD1
.text:0000000000008DD1 loc_8DD1:                               ; CODE XREF: calculate_columns+5C↑j
.text:0000000000008DD1                                         ; calculate_columns+65↑j ...
.text:0000000000008DD1                 call    xalloc_die
.text:0000000000008DD6 ; ---------------------------------------------------------------------------
.text:0000000000008DD6
.text:0000000000008DD6 loc_8DD6:                               ; CODE XREF: calculate_columns+D4↑j
.text:0000000000008DD6                 mov     esi, 1
.text:0000000000008DDB                 jmp     loc_8BBA
.text:0000000000008DE0 ; ---------------------------------------------------------------------------
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: calculate_columns+2BD↑j
.text:0000000000008DE0                 mov     ecx, 1
.text:0000000000008DE5                 jmp     short loc_8D9F
.text:0000000000008DE5 ; } // starts at 8AE0
.text:0000000000008DE5 calculate_columns endp
.text:0000000000008DE5
.text:0000000000008DE5 ; ---------------------------------------------------------------------------
.text:0000000000008DE7                 align 10h
.text:0000000000008DF0
.text:0000000000008DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DF0
.text:0000000000008DF0 ; Attributes: info_from_lumina
.text:0000000000008DF0
.text:0000000000008DF0 ; void __fastcall print_with_separator(char sep)
.text:0000000000008DF0 print_with_separator proc near          ; CODE XREF: print_current_files+143↓j
.text:0000000000008DF0
.text:0000000000008DF0 var_3D          = byte ptr -3Dh
.text:0000000000008DF0 var_3C          = dword ptr -3Ch
.text:0000000000008DF0
.text:0000000000008DF0 ; __unwind {
.text:0000000000008DF0                 push    r15
.text:0000000000008DF2                 push    r14
.text:0000000000008DF4                 push    r13
.text:0000000000008DF6                 push    r12
.text:0000000000008DF8                 push    rbp
.text:0000000000008DF9                 push    rbx
.text:0000000000008DFA                 sub     rsp, 18h
.text:0000000000008DFE                 cmp     cs:cwd_n_used, 0
.text:0000000000008E06                 jz      loc_8F08
.text:0000000000008E0C                 mov     r14d, edi
.text:0000000000008E0F                 xor     r13d, r13d
.text:0000000000008E12                 xor     ebx, ebx
.text:0000000000008E14                 mov     r15, 0FFFFFFFFFFFFFFFDh
.text:0000000000008E1B                 jmp     short loc_8E48
.text:0000000000008E1B ; ---------------------------------------------------------------------------
.text:0000000000008E1D                 align 20h
.text:0000000000008E20
.text:0000000000008E20 loc_8E20:                               ; CODE XREF: print_with_separator+6B↓j
.text:0000000000008E20                 test    rbx, rbx
.text:0000000000008E23                 mov     rbp, r13
.text:0000000000008E26                 jnz     loc_8EF0
.text:0000000000008E2C
.text:0000000000008E2C loc_8E2C:                               ; CODE XREF: print_with_separator+F4↓j
.text:0000000000008E2C                                         ; print_with_separator+156↓j ...
.text:0000000000008E2C                 mov     rsi, rbp
.text:0000000000008E2F                 mov     rdi, r12
.text:0000000000008E32                 add     rbx, 1
.text:0000000000008E36                 call    print_file_name_and_frills
.text:0000000000008E3B                 cmp     cs:cwd_n_used, rbx
.text:0000000000008E42                 jbe     loc_8F08
.text:0000000000008E48
.text:0000000000008E48 loc_8E48:                               ; CODE XREF: print_with_separator+2B↑j
.text:0000000000008E48                 cmp     cs:line_length, 0
.text:0000000000008E50                 mov     rax, cs:sorted_file
.text:0000000000008E57                 mov     r12, [rax+rbx*8]
.text:0000000000008E5B                 jz      short loc_8E20
.text:0000000000008E5D                 mov     rdi, r12
.text:0000000000008E60                 call    length_of_file_name_and_frills
.text:0000000000008E65                 test    rbx, rbx
.text:0000000000008E68                 jz      loc_8F40
.text:0000000000008E6E                 mov     rdx, cs:line_length
.text:0000000000008E75                 lea     rbp, [r13+2]
.text:0000000000008E79                 lea     rcx, [rax+rbp]
.text:0000000000008E7D                 test    rdx, rdx
.text:0000000000008E80                 jz      loc_8F38
.text:0000000000008E86                 cmp     rdx, rcx
.text:0000000000008E89                 jbe     short loc_8E9A
.text:0000000000008E8B                 mov     rdx, r15
.text:0000000000008E8E                 sub     rdx, rax
.text:0000000000008E91                 cmp     rdx, r13
.text:0000000000008E94                 jnb     loc_8F38
.text:0000000000008E9A
.text:0000000000008E9A loc_8E9A:                               ; CODE XREF: print_with_separator+99↑j
.text:0000000000008E9A                 mov     r13, rax
.text:0000000000008E9D                 mov     ecx, 0Ah
.text:0000000000008EA2                 mov     edx, 0Ah
.text:0000000000008EA7                 xor     ebp, ebp
.text:0000000000008EA9
.text:0000000000008EA9 loc_8EA9:                               ; CODE XREF: print_with_separator+111↓j
.text:0000000000008EA9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000008EB0                 mov     rax, [rdi+28h]
.text:0000000000008EB4                 cmp     rax, [rdi+30h]
.text:0000000000008EB8                 jnb     loc_8F60
.text:0000000000008EBE                 lea     rsi, [rax+1]
.text:0000000000008EC2                 mov     [rdi+28h], rsi
.text:0000000000008EC6                 mov     [rax], r14b
.text:0000000000008EC9
.text:0000000000008EC9 loc_8EC9:                               ; CODE XREF: print_with_separator+18A↓j
.text:0000000000008EC9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000008ED0                 mov     rax, [rdi+28h]
.text:0000000000008ED4                 cmp     rax, [rdi+30h]
.text:0000000000008ED8                 jnb     short loc_8F50
.text:0000000000008EDA                 lea     rcx, [rax+1]
.text:0000000000008EDE                 mov     [rdi+28h], rcx
.text:0000000000008EE2                 mov     [rax], dl
.text:0000000000008EE4                 jmp     loc_8E2C
.text:0000000000008EE4 ; ---------------------------------------------------------------------------
.text:0000000000008EE9                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 loc_8EF0:                               ; CODE XREF: print_with_separator+36↑j
.text:0000000000008EF0                 lea     rbp, [r13+2]
.text:0000000000008EF4                 mov     r13, rbp
.text:0000000000008EF7
.text:0000000000008EF7 loc_8EF7:                               ; CODE XREF: print_with_separator+14B↓j
.text:0000000000008EF7                 mov     ecx, 20h ; ' '
.text:0000000000008EFC                 mov     edx, 20h ; ' '
.text:0000000000008F01                 jmp     short loc_8EA9
.text:0000000000008F01 ; ---------------------------------------------------------------------------
.text:0000000000008F03                 align 8
.text:0000000000008F08
.text:0000000000008F08 loc_8F08:                               ; CODE XREF: print_with_separator+16↑j
.text:0000000000008F08                                         ; print_with_separator+52↑j
.text:0000000000008F08                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000008F0F                 mov     rax, [rdi+28h]
.text:0000000000008F13                 cmp     rax, [rdi+30h]
.text:0000000000008F17                 jnb     short loc_8F80
.text:0000000000008F19                 lea     rdx, [rax+1]
.text:0000000000008F1D                 mov     [rdi+28h], rdx
.text:0000000000008F21                 mov     byte ptr [rax], 0Ah
.text:0000000000008F24                 add     rsp, 18h
.text:0000000000008F28                 pop     rbx
.text:0000000000008F29                 pop     rbp
.text:0000000000008F2A                 pop     r12
.text:0000000000008F2C                 pop     r13
.text:0000000000008F2E                 pop     r14
.text:0000000000008F30                 pop     r15
.text:0000000000008F32                 retn
.text:0000000000008F32 ; ---------------------------------------------------------------------------
.text:0000000000008F33                 align 8
.text:0000000000008F38
.text:0000000000008F38 loc_8F38:                               ; CODE XREF: print_with_separator+90↑j
.text:0000000000008F38                                         ; print_with_separator+A4↑j
.text:0000000000008F38                 mov     r13, rcx
.text:0000000000008F3B                 jmp     short loc_8EF7
.text:0000000000008F3B ; ---------------------------------------------------------------------------
.text:0000000000008F3D                 align 20h
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: print_with_separator+78↑j
.text:0000000000008F40                 mov     rbp, r13
.text:0000000000008F43                 add     r13, rax
.text:0000000000008F46                 jmp     loc_8E2C
.text:0000000000008F46 ; ---------------------------------------------------------------------------
.text:0000000000008F4B                 align 10h
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: print_with_separator+E8↑j
.text:0000000000008F50                 mov     esi, ecx        ; int
.text:0000000000008F52                 call    ___overflow
.text:0000000000008F57                 jmp     loc_8E2C
.text:0000000000008F57 ; ---------------------------------------------------------------------------
.text:0000000000008F5C                 align 20h
.text:0000000000008F60
.text:0000000000008F60 loc_8F60:                               ; CODE XREF: print_with_separator+C8↑j
.text:0000000000008F60                 movsx   esi, r14b       ; int
.text:0000000000008F64                 mov     [rsp+48h+var_3C], ecx
.text:0000000000008F68                 mov     [rsp+48h+var_3D], dl
.text:0000000000008F6C                 call    ___overflow
.text:0000000000008F71                 movzx   edx, [rsp+48h+var_3D]
.text:0000000000008F76                 mov     ecx, [rsp+48h+var_3C]
.text:0000000000008F7A                 jmp     loc_8EC9
.text:0000000000008F7A ; ---------------------------------------------------------------------------
.text:0000000000008F7F                 align 20h
.text:0000000000008F80
.text:0000000000008F80 loc_8F80:                               ; CODE XREF: print_with_separator+127↑j
.text:0000000000008F80                 add     rsp, 18h
.text:0000000000008F84                 mov     esi, 0Ah        ; int
.text:0000000000008F89                 pop     rbx
.text:0000000000008F8A                 pop     rbp
.text:0000000000008F8B                 pop     r12
.text:0000000000008F8D                 pop     r13
.text:0000000000008F8F                 pop     r14
.text:0000000000008F91                 pop     r15
.text:0000000000008F93                 jmp     ___overflow
.text:0000000000008F93 ; } // starts at 8DF0
.text:0000000000008F93 print_with_separator endp
.text:0000000000008F93
.text:0000000000008F93 ; ---------------------------------------------------------------------------
.text:0000000000008F98                 align 20h
.text:0000000000008FA0
.text:0000000000008FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FA0
.text:0000000000008FA0 ; Attributes: info_from_lumina
.text:0000000000008FA0
.text:0000000000008FA0 ; void __cdecl print_current_files()
.text:0000000000008FA0 print_current_files proc near           ; CODE XREF: main+1193↑p
.text:0000000000008FA0                                         ; print_dir+4A2↓p ...
.text:0000000000008FA0
.text:0000000000008FA0 var_60          = qword ptr -60h
.text:0000000000008FA0 var_58          = qword ptr -58h
.text:0000000000008FA0 var_50          = qword ptr -50h
.text:0000000000008FA0 var_48          = qword ptr -48h
.text:0000000000008FA0 var_40          = qword ptr -40h
.text:0000000000008FA0
.text:0000000000008FA0 ; __unwind {
.text:0000000000008FA0                 cmp     cs:format, 4    ; switch 5 cases
.text:0000000000008FA7                 ja      def_8FCF        ; jumptable 000000000000944F default case
.text:0000000000008FAD                 push    r15
.text:0000000000008FAF                 push    r14
.text:0000000000008FB1                 lea     rdx, jpt_8FCF
.text:0000000000008FB8                 push    r13
.text:0000000000008FBA                 push    r12
.text:0000000000008FBC                 push    rbp
.text:0000000000008FBD                 push    rbx
.text:0000000000008FBE                 sub     rsp, 38h
.text:0000000000008FC2                 mov     eax, cs:format
.text:0000000000008FC8                 movsxd  rax, ds:(jpt_8FCF - 16164h)[rdx+rax*4]
.text:0000000000008FCC                 add     rax, rdx
.text:0000000000008FCF                 jmp     rax             ; switch jump
.text:0000000000008FCF ; ---------------------------------------------------------------------------
.text:0000000000008FD1                 align 8
.text:0000000000008FD8
.text:0000000000008FD8 loc_8FD8:                               ; CODE XREF: print_current_files+2F↑j
.text:0000000000008FD8                                         ; DATA XREF: .rodata:jpt_8FCF↓o
.text:0000000000008FD8                 cmp     cs:line_length, 0 ; jumptable 000000000000944F case 3
.text:0000000000008FE0                 jz      loc_92E8
.text:0000000000008FE6                 xor     edi, edi
.text:0000000000008FE8                 call    calculate_columns
.text:0000000000008FED                 lea     rdx, [rax+rax*2]
.text:0000000000008FF1                 mov     r14, rax
.text:0000000000008FF4                 mov     rax, cs:column_info
.text:0000000000008FFB                 lea     r15, [rax+rdx*8-18h]
.text:0000000000009000                 mov     rax, cs:sorted_file
.text:0000000000009007                 mov     rbx, [rax]
.text:000000000000900A                 mov     rdi, rbx
.text:000000000000900D                 call    length_of_file_name_and_frills
.text:0000000000009012                 mov     [rsp+68h+var_60], rax
.text:0000000000009017                 mov     rax, [r15+10h]
.text:000000000000901B                 xor     esi, esi
.text:000000000000901D                 mov     rdi, rbx
.text:0000000000009020                 mov     r12, [rax]
.text:0000000000009023                 call    print_file_name_and_frills
.text:0000000000009028                 cmp     cs:cwd_n_used, 1
.text:0000000000009030                 jbe     loc_9310
.text:0000000000009036                 xor     r13d, r13d
.text:0000000000009039                 mov     ebx, 1
.text:000000000000903E                 mov     rcx, [rsp+68h+var_60]
.text:0000000000009043                 jmp     short loc_90A5
.text:0000000000009043 ; ---------------------------------------------------------------------------
.text:0000000000009045                 align 8
.text:0000000000009048
.text:0000000000009048 loc_9048:                               ; CODE XREF: print_current_files+113↓j
.text:0000000000009048                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000904F                 mov     rax, [rdi+28h]
.text:0000000000009053                 cmp     rax, [rdi+30h]
.text:0000000000009057                 jnb     loc_9350
.text:000000000000905D                 lea     rdx, [rax+1]
.text:0000000000009061                 xor     r13d, r13d
.text:0000000000009064                 mov     [rdi+28h], rdx
.text:0000000000009068                 mov     byte ptr [rax], 0Ah
.text:000000000000906B
.text:000000000000906B loc_906B:                               ; CODE XREF: print_current_files+127↓j
.text:000000000000906B                                         ; print_current_files+3BD↓j
.text:000000000000906B                 mov     rax, cs:sorted_file
.text:0000000000009072                 mov     rsi, r13
.text:0000000000009075                 mov     r12, [rax+rbx*8]
.text:0000000000009079                 add     rbx, 1
.text:000000000000907D                 mov     rdi, r12
.text:0000000000009080                 call    print_file_name_and_frills
.text:0000000000009085                 mov     rdi, r12
.text:0000000000009088                 call    length_of_file_name_and_frills
.text:000000000000908D                 cmp     rbx, cs:cwd_n_used
.text:0000000000009094                 mov     rcx, rax
.text:0000000000009097                 mov     rax, [r15+10h]
.text:000000000000909B                 mov     r12, [rax+rbp*8]
.text:000000000000909F                 jnb     loc_9310
.text:00000000000090A5
.text:00000000000090A5 loc_90A5:                               ; CODE XREF: print_current_files+A3↑j
.text:00000000000090A5                 xor     edx, edx
.text:00000000000090A7                 mov     rax, rbx
.text:00000000000090AA                 div     r14
.text:00000000000090AD                 test    rdx, rdx
.text:00000000000090B0                 mov     rbp, rdx
.text:00000000000090B3                 jz      short loc_9048
.text:00000000000090B5                 add     r12, r13
.text:00000000000090B8                 lea     rdi, [rcx+r13]
.text:00000000000090BC                 mov     rsi, r12
.text:00000000000090BF                 mov     r13, r12
.text:00000000000090C2                 call    indent
.text:00000000000090C7                 jmp     short loc_906B
.text:00000000000090C7 ; ---------------------------------------------------------------------------
.text:00000000000090C9                 align 10h
.text:00000000000090D0
.text:00000000000090D0 loc_90D0:                               ; CODE XREF: print_current_files+2F↑j
.text:00000000000090D0                                         ; DATA XREF: .rodata:jpt_8FCF↓o
.text:00000000000090D0                 mov     edi, 2Ch ; ','  ; jumptable 000000000000944F case 4
.text:00000000000090D5
.text:00000000000090D5 loc_90D5:                               ; CODE XREF: print_current_files+34D↓j
.text:00000000000090D5                 add     rsp, 38h
.text:00000000000090D9                 pop     rbx
.text:00000000000090DA                 pop     rbp
.text:00000000000090DB                 pop     r12
.text:00000000000090DD                 pop     r13
.text:00000000000090DF                 pop     r14
.text:00000000000090E1                 pop     r15
.text:00000000000090E3                 jmp     print_with_separator
.text:00000000000090E3 ; ---------------------------------------------------------------------------
.text:00000000000090E8                 align 10h
.text:00000000000090F0
.text:00000000000090F0 loc_90F0:                               ; CODE XREF: print_current_files+2F↑j
.text:00000000000090F0                                         ; DATA XREF: .rodata:jpt_8FCF↓o
.text:00000000000090F0                 xor     ebx, ebx        ; jumptable 000000000000944F case 1
.text:00000000000090F2                 cmp     cs:cwd_n_used, 0
.text:00000000000090FA                 jz      loc_9268
.text:0000000000009100
.text:0000000000009100 loc_9100:                               ; CODE XREF: print_current_files+19D↓j
.text:0000000000009100                 mov     rax, cs:sorted_file
.text:0000000000009107                 xor     esi, esi
.text:0000000000009109                 mov     rdi, [rax+rbx*8]
.text:000000000000910D                 call    print_file_name_and_frills
.text:0000000000009112                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000009119                 mov     rax, [rdi+28h]
.text:000000000000911D                 cmp     rax, [rdi+30h]
.text:0000000000009121                 jnb     loc_9300
.text:0000000000009127                 lea     rdx, [rax+1]
.text:000000000000912B                 mov     [rdi+28h], rdx
.text:000000000000912F                 mov     byte ptr [rax], 0Ah
.text:0000000000009132
.text:0000000000009132 loc_9132:                               ; CODE XREF: print_current_files+36A↓j
.text:0000000000009132                 add     rbx, 1
.text:0000000000009136                 cmp     cs:cwd_n_used, rbx
.text:000000000000913D                 ja      short loc_9100
.text:000000000000913F                 add     rsp, 38h
.text:0000000000009143                 pop     rbx
.text:0000000000009144                 pop     rbp
.text:0000000000009145                 pop     r12
.text:0000000000009147                 pop     r13
.text:0000000000009149                 pop     r14
.text:000000000000914B                 pop     r15
.text:000000000000914D                 retn
.text:000000000000914D ; ---------------------------------------------------------------------------
.text:000000000000914E                 align 10h
.text:0000000000009150
.text:0000000000009150 loc_9150:                               ; CODE XREF: print_current_files+2F↑j
.text:0000000000009150                                         ; DATA XREF: .rodata:jpt_8FCF↓o
.text:0000000000009150                 cmp     cs:line_length, 0 ; jumptable 000000000000944F case 2
.text:0000000000009158                 jz      loc_92E8
.text:000000000000915E                 mov     edi, 1
.text:0000000000009163                 call    calculate_columns
.text:0000000000009168                 lea     rdx, [rax+rax*2]
.text:000000000000916C                 mov     rcx, rax
.text:000000000000916F                 mov     rax, cs:column_info
.text:0000000000009176                 lea     r15, [rax+rdx*8-18h]
.text:000000000000917B                 mov     rax, cs:cwd_n_used
.text:0000000000009182                 xor     edx, edx
.text:0000000000009184                 div     rcx
.text:0000000000009187                 test    rdx, rdx
.text:000000000000918A                 setnz   dl
.text:000000000000918D                 movzx   edx, dl
.text:0000000000009190                 add     rdx, rax
.text:0000000000009193                 mov     rax, rdx
.text:0000000000009196                 mov     [rsp+68h+var_50], rdx
.text:000000000000919B                 jz      loc_9268
.text:00000000000091A1                 shl     rax, 3
.text:00000000000091A5                 mov     [rsp+68h+var_40], 0
.text:00000000000091AE                 mov     [rsp+68h+var_48], rax
.text:00000000000091B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000091B8
.text:00000000000091B8 loc_91B8:                               ; CODE XREF: print_current_files+2C2↓j
.text:00000000000091B8                 mov     r13, [rsp+68h+var_40]
.text:00000000000091BD                 xor     r12d, r12d
.text:00000000000091C0                 xor     ebp, ebp
.text:00000000000091C2                 lea     r14, ds:0[r13*8]
.text:00000000000091CA                 jmp     short loc_91EB
.text:00000000000091CA ; ---------------------------------------------------------------------------
.text:00000000000091CC                 align 10h
.text:00000000000091D0
.text:00000000000091D0 loc_91D0:                               ; CODE XREF: print_current_files+290↓j
.text:00000000000091D0                 mov     rbx, [rsp+68h+var_58]
.text:00000000000091D5                 mov     rdi, [rsp+68h+var_60]
.text:00000000000091DA                 add     rbx, rbp
.text:00000000000091DD                 add     rdi, rbp
.text:00000000000091E0                 mov     rsi, rbx
.text:00000000000091E3                 mov     rbp, rbx
.text:00000000000091E6                 call    indent
.text:00000000000091EB
.text:00000000000091EB loc_91EB:                               ; CODE XREF: print_current_files+22A↑j
.text:00000000000091EB                 mov     rax, cs:sorted_file
.text:00000000000091F2                 mov     rbx, [rax+r14]
.text:00000000000091F6                 mov     rdi, rbx
.text:00000000000091F9                 call    length_of_file_name_and_frills
.text:00000000000091FE                 mov     [rsp+68h+var_60], rax
.text:0000000000009203                 mov     rax, [r15+10h]
.text:0000000000009207                 mov     rsi, rbp
.text:000000000000920A                 mov     rdi, rbx
.text:000000000000920D                 mov     rcx, [rax+r12]
.text:0000000000009211                 add     r12, 8
.text:0000000000009215                 mov     [rsp+68h+var_58], rcx
.text:000000000000921A                 call    print_file_name_and_frills
.text:000000000000921F                 add     r13, [rsp+68h+var_50]
.text:0000000000009224                 add     r14, [rsp+68h+var_48]
.text:0000000000009229                 cmp     r13, cs:cwd_n_used
.text:0000000000009230                 jb      short loc_91D0
.text:0000000000009232                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000009239                 mov     rax, [rdi+28h]
.text:000000000000923D                 cmp     rax, [rdi+30h]
.text:0000000000009241                 jnb     loc_9338
.text:0000000000009247                 lea     rdx, [rax+1]
.text:000000000000924B                 mov     [rdi+28h], rdx
.text:000000000000924F                 mov     byte ptr [rax], 0Ah
.text:0000000000009252
.text:0000000000009252 loc_9252:                               ; CODE XREF: print_current_files+3A2↓j
.text:0000000000009252                 add     [rsp+68h+var_40], 1
.text:0000000000009258                 mov     rax, [rsp+68h+var_40]
.text:000000000000925D                 cmp     [rsp+68h+var_50], rax
.text:0000000000009262                 jnz     loc_91B8
.text:0000000000009268
.text:0000000000009268 loc_9268:                               ; CODE XREF: print_current_files+15A↑j
.text:0000000000009268                                         ; print_current_files+1FB↑j ...
.text:0000000000009268                 add     rsp, 38h
.text:000000000000926C                 pop     rbx
.text:000000000000926D                 pop     rbp
.text:000000000000926E                 pop     r12
.text:0000000000009270                 pop     r13
.text:0000000000009272                 pop     r14
.text:0000000000009274                 pop     r15
.text:0000000000009276                 retn
.text:0000000000009276 ; ---------------------------------------------------------------------------
.text:0000000000009277                 align 20h
.text:0000000000009280
.text:0000000000009280 loc_9280:                               ; CODE XREF: print_current_files+2F↑j
.text:0000000000009280                                         ; DATA XREF: .rodata:jpt_8FCF↓o
.text:0000000000009280                 xor     ebx, ebx        ; jumptable 000000000000944F case 0
.text:0000000000009282                 cmp     cs:cwd_n_used, 0
.text:000000000000928A                 jnz     short loc_92B0
.text:000000000000928C                 jmp     short loc_9268
.text:000000000000928C ; ---------------------------------------------------------------------------
.text:000000000000928E                 align 10h
.text:0000000000009290
.text:0000000000009290 loc_9290:                               ; CODE XREF: print_current_files+334↓j
.text:0000000000009290                 lea     rdx, [rax+1]
.text:0000000000009294                 mov     [rdi+28h], rdx
.text:0000000000009298                 mov     byte ptr [rax], 0Ah
.text:000000000000929B
.text:000000000000929B loc_929B:                               ; CODE XREF: print_current_files+340↓j
.text:000000000000929B                 add     cs:dired_pos, 1
.text:00000000000092A3                 add     rbx, 1
.text:00000000000092A7                 cmp     cs:cwd_n_used, rbx
.text:00000000000092AE                 jbe     short loc_9268
.text:00000000000092B0
.text:00000000000092B0 loc_92B0:                               ; CODE XREF: print_current_files+2EA↑j
.text:00000000000092B0                 call    set_normal_color
.text:00000000000092B5                 mov     rax, cs:sorted_file
.text:00000000000092BC                 mov     rdi, [rax+rbx*8]
.text:00000000000092C0                 call    print_long_format
.text:00000000000092C5                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000092CC                 mov     rax, [rdi+28h]
.text:00000000000092D0                 cmp     rax, [rdi+30h]
.text:00000000000092D4                 jb      short loc_9290
.text:00000000000092D6                 mov     esi, 0Ah        ; int
.text:00000000000092DB                 call    ___overflow
.text:00000000000092E0                 jmp     short loc_929B
.text:00000000000092E0 ; ---------------------------------------------------------------------------
.text:00000000000092E2                 align 8
.text:00000000000092E8
.text:00000000000092E8 loc_92E8:                               ; CODE XREF: print_current_files+40↑j
.text:00000000000092E8                                         ; print_current_files+1B8↑j
.text:00000000000092E8                 mov     edi, 20h ; ' '
.text:00000000000092ED                 jmp     loc_90D5
.text:00000000000092ED ; ---------------------------------------------------------------------------
.text:00000000000092F2                 align 8
.text:00000000000092F8
.text:00000000000092F8 def_8FCF:                               ; CODE XREF: print_current_files+7↑j
.text:00000000000092F8                 rep retn                ; jumptable 000000000000944F default case
.text:00000000000092F8 ; ---------------------------------------------------------------------------
.text:00000000000092FA                 align 20h
.text:0000000000009300
.text:0000000000009300 loc_9300:                               ; CODE XREF: print_current_files+181↑j
.text:0000000000009300                 mov     esi, 0Ah        ; int
.text:0000000000009305                 call    ___overflow
.text:000000000000930A                 jmp     loc_9132
.text:000000000000930A ; ---------------------------------------------------------------------------
.text:000000000000930F                 align 10h
.text:0000000000009310
.text:0000000000009310 loc_9310:                               ; CODE XREF: print_current_files+90↑j
.text:0000000000009310                                         ; print_current_files+FF↑j
.text:0000000000009310                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000009317                 mov     rax, [rdi+28h]
.text:000000000000931B                 cmp     rax, [rdi+30h]
.text:000000000000931F                 jnb     short loc_9362
.text:0000000000009321                 lea     rdx, [rax+1]
.text:0000000000009325                 mov     [rdi+28h], rdx
.text:0000000000009329                 mov     byte ptr [rax], 0Ah
.text:000000000000932C                 jmp     loc_9268
.text:000000000000932C ; ---------------------------------------------------------------------------
.text:0000000000009331                 align 8
.text:0000000000009338
.text:0000000000009338 loc_9338:                               ; CODE XREF: print_current_files+2A1↑j
.text:0000000000009338                 mov     esi, 0Ah        ; int
.text:000000000000933D                 call    ___overflow
.text:0000000000009342                 jmp     loc_9252
.text:0000000000009342 ; ---------------------------------------------------------------------------
.text:0000000000009347                 align 10h
.text:0000000000009350
.text:0000000000009350 loc_9350:                               ; CODE XREF: print_current_files+B7↑j
.text:0000000000009350                 mov     esi, 0Ah        ; int
.text:0000000000009355                 xor     r13d, r13d
.text:0000000000009358                 call    ___overflow
.text:000000000000935D                 jmp     loc_906B
.text:0000000000009362 ; ---------------------------------------------------------------------------
.text:0000000000009362
.text:0000000000009362 loc_9362:                               ; CODE XREF: print_current_files+37F↑j
.text:0000000000009362                 add     rsp, 38h
.text:0000000000009366                 mov     esi, 0Ah        ; int
.text:000000000000936B                 pop     rbx
.text:000000000000936C                 pop     rbp
.text:000000000000936D                 pop     r12
.text:000000000000936F                 pop     r13
.text:0000000000009371                 pop     r14
.text:0000000000009373                 pop     r15
.text:0000000000009375                 jmp     ___overflow
.text:0000000000009375 ; } // starts at 8FA0
.text:0000000000009375 print_current_files endp
.text:0000000000009375
.text:0000000000009375 ; ---------------------------------------------------------------------------
.text:000000000000937A                 align 20h
.text:0000000000009380
.text:0000000000009380 ; =============== S U B R O U T I N E =======================================
.text:0000000000009380
.text:0000000000009380
.text:0000000000009380 rev_strcmp_df_atime proc near           ; DATA XREF: .data.rel.ro:000000000021F218↓o
.text:0000000000009380 ; __unwind {
.text:0000000000009380                 mov     rdx, rsi
.text:0000000000009383                 mov     esi, [rdi+0A8h]
.text:0000000000009389                 mov     ecx, [rdx+0A8h]
.text:000000000000938F                 cmp     ecx, 3
.text:0000000000009392                 setz    al
.text:0000000000009395                 cmp     ecx, 9
.text:0000000000009398                 setz    cl
.text:000000000000939B                 or      eax, ecx
.text:000000000000939D                 cmp     esi, 3
.text:00000000000093A0                 jz      short loc_93C8
.text:00000000000093A2                 cmp     esi, 9
.text:00000000000093A5                 jz      short loc_93C8
.text:00000000000093A7                 mov     ecx, [rdi+0ACh]
.text:00000000000093AD                 and     ecx, 0F000h
.text:00000000000093B3                 test    al, al
.text:00000000000093B5                 jz      short loc_93E8
.text:00000000000093B7
.text:00000000000093B7 loc_93B7:                               ; CODE XREF: rev_strcmp_df_atime+78↓j
.text:00000000000093B7                 cmp     ecx, 4000h
.text:00000000000093BD                 jz      short loc_9408
.text:00000000000093BF
.text:00000000000093BF loc_93BF:                               ; CODE XREF: rev_strcmp_df_atime+92↓j
.text:00000000000093BF                 mov     eax, 1
.text:00000000000093C4                 retn
.text:00000000000093C4 ; ---------------------------------------------------------------------------
.text:00000000000093C5                 align 8
.text:00000000000093C8
.text:00000000000093C8 loc_93C8:                               ; CODE XREF: rev_strcmp_df_atime+20↑j
.text:00000000000093C8                                         ; rev_strcmp_df_atime+25↑j
.text:00000000000093C8                 test    al, al
.text:00000000000093CA                 jnz     short loc_9408
.text:00000000000093CC                 mov     eax, [rdx+0ACh]
.text:00000000000093D2                 and     eax, 0F000h
.text:00000000000093D7                 cmp     eax, 4000h
.text:00000000000093DC                 jz      short loc_9408
.text:00000000000093DE
.text:00000000000093DE loc_93DE:                               ; CODE XREF: rev_strcmp_df_atime+80↓j
.text:00000000000093DE                                         ; rev_strcmp_df_atime+90↓j
.text:00000000000093DE                 mov     eax, 0FFFFFFFFh
.text:00000000000093E3
.text:00000000000093E3 locret_93E3:                            ; CODE XREF: rev_strcmp_df_atime+9B↓j
.text:00000000000093E3                 rep retn
.text:00000000000093E3 ; ---------------------------------------------------------------------------
.text:00000000000093E5                 align 8
.text:00000000000093E8
.text:00000000000093E8 loc_93E8:                               ; CODE XREF: rev_strcmp_df_atime+35↑j
.text:00000000000093E8                 mov     eax, [rdx+0ACh]
.text:00000000000093EE                 and     eax, 0F000h
.text:00000000000093F3                 cmp     eax, 4000h
.text:00000000000093F8                 jz      short loc_93B7
.text:00000000000093FA                 cmp     ecx, 4000h
.text:0000000000009400                 jz      short loc_93DE
.text:0000000000009402                 nop     word ptr [rax+rax+00h]
.text:0000000000009408
.text:0000000000009408 loc_9408:                               ; CODE XREF: rev_strcmp_df_atime+3D↑j
.text:0000000000009408                                         ; rev_strcmp_df_atime+4A↑j ...
.text:0000000000009408                 mov     rax, [rdi+60h]
.text:000000000000940C                 cmp     [rdx+60h], rax
.text:0000000000009410                 jg      short loc_93DE
.text:0000000000009412                 jl      short loc_93BF
.text:0000000000009414                 mov     rax, [rdi+68h]
.text:0000000000009418                 sub     eax, [rdx+68h]
.text:000000000000941B                 jnz     short locret_93E3
.text:000000000000941D                 mov     rsi, [rdi]      ; s2
.text:0000000000009420                 mov     rdi, [rdx]      ; s1
.text:0000000000009423                 jmp     _strcmp
.text:0000000000009423 ; } // starts at 9380
.text:0000000000009423 rev_strcmp_df_atime endp
.text:0000000000009423
.text:0000000000009423 ; ---------------------------------------------------------------------------
.text:0000000000009428                 align 10h
.text:0000000000009430
.text:0000000000009430 ; =============== S U B R O U T I N E =======================================
.text:0000000000009430
.text:0000000000009430
.text:0000000000009430 rev_strcmp_df_ctime proc near           ; DATA XREF: .data.rel.ro:000000000021F1D8↓o
.text:0000000000009430 ; __unwind {
.text:0000000000009430                 mov     rdx, rsi
.text:0000000000009433                 mov     esi, [rdi+0A8h]
.text:0000000000009439                 mov     ecx, [rdx+0A8h]
.text:000000000000943F                 cmp     ecx, 3
.text:0000000000009442                 setz    al
.text:0000000000009445                 cmp     ecx, 9
.text:0000000000009448                 setz    cl
.text:000000000000944B                 or      eax, ecx
.text:000000000000944D                 cmp     esi, 3
.text:0000000000009450                 jz      short loc_9478
.text:0000000000009452                 cmp     esi, 9
.text:0000000000009455                 jz      short loc_9478
.text:0000000000009457                 mov     ecx, [rdi+0ACh]
.text:000000000000945D                 and     ecx, 0F000h
.text:0000000000009463                 test    al, al
.text:0000000000009465                 jz      short loc_9498
.text:0000000000009467
.text:0000000000009467 loc_9467:                               ; CODE XREF: rev_strcmp_df_ctime+78↓j
.text:0000000000009467                 cmp     ecx, 4000h
.text:000000000000946D                 jz      short loc_94B8
.text:000000000000946F
.text:000000000000946F loc_946F:                               ; CODE XREF: rev_strcmp_df_ctime+98↓j
.text:000000000000946F                 mov     eax, 1
.text:0000000000009474                 retn
.text:0000000000009474 ; ---------------------------------------------------------------------------
.text:0000000000009475                 align 8
.text:0000000000009478
.text:0000000000009478 loc_9478:                               ; CODE XREF: rev_strcmp_df_ctime+20↑j
.text:0000000000009478                                         ; rev_strcmp_df_ctime+25↑j
.text:0000000000009478                 test    al, al
.text:000000000000947A                 jnz     short loc_94B8
.text:000000000000947C                 mov     eax, [rdx+0ACh]
.text:0000000000009482                 and     eax, 0F000h
.text:0000000000009487                 cmp     eax, 4000h
.text:000000000000948C                 jz      short loc_94B8
.text:000000000000948E
.text:000000000000948E loc_948E:                               ; CODE XREF: rev_strcmp_df_ctime+80↓j
.text:000000000000948E                                         ; rev_strcmp_df_ctime+96↓j
.text:000000000000948E                 mov     eax, 0FFFFFFFFh
.text:0000000000009493
.text:0000000000009493 locret_9493:                            ; CODE XREF: rev_strcmp_df_ctime+A7↓j
.text:0000000000009493                 rep retn
.text:0000000000009493 ; ---------------------------------------------------------------------------
.text:0000000000009495                 align 8
.text:0000000000009498
.text:0000000000009498 loc_9498:                               ; CODE XREF: rev_strcmp_df_ctime+35↑j
.text:0000000000009498                 mov     eax, [rdx+0ACh]
.text:000000000000949E                 and     eax, 0F000h
.text:00000000000094A3                 cmp     eax, 4000h
.text:00000000000094A8                 jz      short loc_9467
.text:00000000000094AA                 cmp     ecx, 4000h
.text:00000000000094B0                 jz      short loc_948E
.text:00000000000094B2                 nop     word ptr [rax+rax+00h]
.text:00000000000094B8
.text:00000000000094B8 loc_94B8:                               ; CODE XREF: rev_strcmp_df_ctime+3D↑j
.text:00000000000094B8                                         ; rev_strcmp_df_ctime+4A↑j ...
.text:00000000000094B8                 mov     rax, [rdi+80h]
.text:00000000000094BF                 cmp     [rdx+80h], rax
.text:00000000000094C6                 jg      short loc_948E
.text:00000000000094C8                 jl      short loc_946F
.text:00000000000094CA                 mov     rax, [rdi+88h]
.text:00000000000094D1                 sub     eax, [rdx+88h]
.text:00000000000094D7                 jnz     short locret_9493
.text:00000000000094D9                 mov     rsi, [rdi]      ; s2
.text:00000000000094DC                 mov     rdi, [rdx]      ; s1
.text:00000000000094DF                 jmp     _strcmp
.text:00000000000094DF ; } // starts at 9430
.text:00000000000094DF rev_strcmp_df_ctime endp
.text:00000000000094DF
.text:00000000000094DF ; ---------------------------------------------------------------------------
.text:00000000000094E4                 align 10h
.text:00000000000094F0
.text:00000000000094F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094F0
.text:00000000000094F0
.text:00000000000094F0 clear_files     proc near               ; CODE XREF: main+CC5↑p
.text:00000000000094F0                                         ; print_dir:loc_A5C7↓p ...
.text:00000000000094F0 ; __unwind {
.text:00000000000094F0                 mov     rax, cs:cwd_n_used
.text:00000000000094F7                 push    r12
.text:00000000000094F9                 push    rbp
.text:00000000000094FA                 push    rbx
.text:00000000000094FB                 test    rax, rax
.text:00000000000094FE                 jz      short loc_9537
.text:0000000000009500                 mov     rbx, cs:sorted_file
.text:0000000000009507                 lea     r12, [rbx+rax*8]
.text:000000000000950B                 nop     dword ptr [rax+rax+00h]
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: clear_files+45↓j
.text:0000000000009510                 mov     rbp, [rbx]
.text:0000000000009513                 add     rbx, 8
.text:0000000000009517                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000951B                 call    free
.text:0000000000009520                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000009524                 call    free
.text:0000000000009529                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000952D                 call    free
.text:0000000000009532                 cmp     rbx, r12
.text:0000000000009535                 jnz     short loc_9510
.text:0000000000009537
.text:0000000000009537 loc_9537:                               ; CODE XREF: clear_files+E↑j
.text:0000000000009537                 pop     rbx
.text:0000000000009538                 mov     cs:cwd_n_used, 0
.text:0000000000009543                 mov     cs:cwd_some_quoted, 0
.text:000000000000954A                 pop     rbp
.text:000000000000954B                 mov     cs:any_has_acl, 0
.text:0000000000009552                 mov     cs:inode_number_width, 0
.text:000000000000955C                 mov     cs:block_size_width, 0
.text:0000000000009566                 mov     cs:nlink_width, 0
.text:0000000000009570                 mov     cs:owner_width, 0
.text:000000000000957A                 mov     cs:group_width, 0
.text:0000000000009584                 mov     cs:author_width, 0
.text:000000000000958E                 mov     cs:scontext_width, 0
.text:0000000000009598                 mov     cs:major_device_number_width, 0
.text:00000000000095A2                 mov     cs:minor_device_number_width, 0
.text:00000000000095AC                 mov     cs:file_size_width, 0
.text:00000000000095B6                 pop     r12
.text:00000000000095B8                 retn
.text:00000000000095B8 ; } // starts at 94F0
.text:00000000000095B8 clear_files     endp
.text:00000000000095B8
.text:00000000000095B8 ; ---------------------------------------------------------------------------
.text:00000000000095B9                 align 20h
.text:00000000000095C0
.text:00000000000095C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095C0
.text:00000000000095C0 ; Attributes: info_from_lumina
.text:00000000000095C0
.text:00000000000095C0 ; int __fastcall format_user_width(uid_t u)
.text:00000000000095C0 format_user_width proc near             ; CODE XREF: gobble_file_constprop_52+AA3↓p
.text:00000000000095C0                                         ; gobble_file_constprop_52+ADB↓p
.text:00000000000095C0
.text:00000000000095C0 var_20          = qword ptr -20h
.text:00000000000095C0
.text:00000000000095C0 ; __unwind {
.text:00000000000095C0                 push    rbp
.text:00000000000095C1                 push    rbx
.text:00000000000095C2                 mov     ebp, edi
.text:00000000000095C4                 sub     rsp, 28h
.text:00000000000095C8                 mov     rax, fs:28h
.text:00000000000095D1                 mov     [rsp+38h+var_20], rax
.text:00000000000095D6                 xor     eax, eax
.text:00000000000095D8                 cmp     cs:numeric_ids, 0
.text:00000000000095DF                 jz      short loc_9658
.text:00000000000095E1
.text:00000000000095E1 loc_95E1:                               ; CODE XREF: format_user_width+A3↓j
.text:00000000000095E1                 mov     rbx, rsp
.text:00000000000095E4                 lea     rcx, aLu+1      ; "%lu"
.text:00000000000095EB                 mov     r8d, ebp
.text:00000000000095EE                 mov     edx, 15h
.text:00000000000095F3                 mov     esi, 1
.text:00000000000095F8                 mov     rdi, rbx
.text:00000000000095FB                 xor     eax, eax
.text:00000000000095FD                 call    ___sprintf_chk
.text:0000000000009602                 mov     rax, rbx
.text:0000000000009605
.text:0000000000009605 loc_9605:                               ; CODE XREF: format_user_width+5B↓j
.text:0000000000009605                 mov     ecx, [rax]
.text:0000000000009607                 add     rax, 4
.text:000000000000960B                 lea     edx, [rcx-1010101h]
.text:0000000000009611                 not     ecx
.text:0000000000009613                 and     edx, ecx
.text:0000000000009615                 and     edx, 80808080h
.text:000000000000961B                 jz      short loc_9605
.text:000000000000961D                 mov     ecx, edx
.text:000000000000961F                 shr     ecx, 10h
.text:0000000000009622                 test    edx, 8080h
.text:0000000000009628                 cmovz   edx, ecx
.text:000000000000962B                 lea     rcx, [rax+2]
.text:000000000000962F                 mov     esi, edx
.text:0000000000009631                 cmovz   rax, rcx
.text:0000000000009635                 add     sil, dl
.text:0000000000009638                 sbb     rax, 3
.text:000000000000963C                 sub     eax, ebx
.text:000000000000963E
.text:000000000000963E loc_963E:                               ; CODE XREF: format_user_width+BA↓j
.text:000000000000963E                 mov     rsi, [rsp+38h+var_20]
.text:0000000000009643                 xor     rsi, fs:28h
.text:000000000000964C                 jnz     short loc_967C
.text:000000000000964E                 add     rsp, 28h
.text:0000000000009652                 pop     rbx
.text:0000000000009653                 pop     rbp
.text:0000000000009654                 retn
.text:0000000000009654 ; ---------------------------------------------------------------------------
.text:0000000000009655                 align 8
.text:0000000000009658
.text:0000000000009658 loc_9658:                               ; CODE XREF: format_user_width+1F↑j
.text:0000000000009658                 call    getuser
.text:000000000000965D                 test    rax, rax
.text:0000000000009660                 mov     rdi, rax
.text:0000000000009663                 jz      loc_95E1
.text:0000000000009669                 xor     esi, esi
.text:000000000000966B                 call    gnu_mbswidth
.text:0000000000009670                 mov     edx, 0
.text:0000000000009675                 test    eax, eax
.text:0000000000009677                 cmovs   eax, edx
.text:000000000000967A                 jmp     short loc_963E
.text:000000000000967C ; ---------------------------------------------------------------------------
.text:000000000000967C
.text:000000000000967C loc_967C:                               ; CODE XREF: format_user_width+8C↑j
.text:000000000000967C                 call    ___stack_chk_fail
.text:000000000000967C ; } // starts at 95C0
.text:000000000000967C format_user_width endp
.text:000000000000967C
.text:000000000000967C ; ---------------------------------------------------------------------------
.text:0000000000009681                 align 10h
.text:0000000000009690
.text:0000000000009690 ; =============== S U B R O U T I N E =======================================
.text:0000000000009690
.text:0000000000009690 ; Attributes: bp-based frame
.text:0000000000009690
.text:0000000000009690 gobble_file_constprop_52 proc near      ; CODE XREF: main+CEA↑p
.text:0000000000009690                                         ; main+F12↑p ...
.text:0000000000009690
.text:0000000000009690 var_392         = byte ptr -392h
.text:0000000000009690 var_391         = byte ptr -391h
.text:0000000000009690 var_390         = qword ptr -390h
.text:0000000000009690 filename        = qword ptr -388h
.text:0000000000009690 stat_buf        = stat ptr -380h
.text:0000000000009690 var_2F0         = byte ptr -2F0h
.text:0000000000009690 var_2D0         = byte ptr -2D0h
.text:0000000000009690 var_38          = qword ptr -38h
.text:0000000000009690
.text:0000000000009690 ; __unwind {
.text:0000000000009690                 push    rbp
.text:0000000000009691                 mov     rbp, rsp
.text:0000000000009694                 push    r15
.text:0000000000009696                 push    r14
.text:0000000000009698                 push    r13
.text:000000000000969A                 push    r12
.text:000000000000969C                 mov     r15, rcx
.text:000000000000969F                 push    rbx
.text:00000000000096A0                 mov     r14d, esi
.text:00000000000096A3                 mov     r13d, edx
.text:00000000000096A6                 sub     rsp, 378h
.text:00000000000096AD                 mov     rcx, cs:cwd_n_used
.text:00000000000096B4                 mov     [rbp+filename], rdi
.text:00000000000096BB                 mov     rax, fs:28h
.text:00000000000096C4                 mov     [rbp+var_38], rax
.text:00000000000096C8                 xor     eax, eax
.text:00000000000096CA                 cmp     rcx, cs:cwd_n_alloc
.text:00000000000096D1                 mov     rdi, cs:cwd_file
.text:00000000000096D8                 jnz     short loc_9728
.text:00000000000096DA                 mov     edx, 190h
.text:00000000000096DF                 xor     esi, esi
.text:00000000000096E1                 mov     rax, rdx
.text:00000000000096E4                 mul     rcx
.text:00000000000096E7                 jo      loc_A3DE
.text:00000000000096ED
.text:00000000000096ED loc_96ED:                               ; CODE XREF: gobble_file_constprop_52+D53↓j
.text:00000000000096ED                 test    rax, rax
.text:00000000000096F0                 js      loc_A3D9
.text:00000000000096F6                 test    rsi, rsi
.text:00000000000096F9                 jnz     loc_A3D9
.text:00000000000096FF                 lea     rax, [rcx+rcx*4]
.text:0000000000009703                 lea     rsi, [rax+rax*4]
.text:0000000000009707                 shl     rsi, 4
.text:000000000000970B                 call    xrealloc
.text:0000000000009710                 shl     cs:cwd_n_alloc, 1
.text:0000000000009717                 mov     rcx, cs:cwd_n_used
.text:000000000000971E                 mov     rdi, rax
.text:0000000000009721                 mov     cs:cwd_file, rax
.text:0000000000009728
.text:0000000000009728 loc_9728:                               ; CODE XREF: gobble_file_constprop_52+48↑j
.text:0000000000009728                 lea     rax, [rcx+rcx*4]
.text:000000000000972C                 lea     rax, [rax+rax*4]
.text:0000000000009730                 lea     rbx, [rdi+rax*8]
.text:0000000000009734                 xor     eax, eax
.text:0000000000009736                 lea     rdi, [rbx+8]
.text:000000000000973A                 mov     rcx, rbx
.text:000000000000973D                 mov     qword ptr [rbx], 0
.text:0000000000009744                 mov     qword ptr [rbx+0BCh], 0
.text:000000000000974F                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000009753                 sub     rcx, rdi
.text:0000000000009756                 add     ecx, 0C4h
.text:000000000000975C                 shr     ecx, 3
.text:000000000000975F                 rep stosq
.text:0000000000009762                 mov     qword ptr [rbx+20h], 0
.text:000000000000976A                 mov     [rbx+0A8h], r14d
.text:0000000000009771                 mov     dword ptr [rbx+0C4h], 0FFFFFFFFh
.text:000000000000977B                 cmp     cs:cwd_some_quoted, 0
.text:0000000000009782                 jnz     short loc_9791
.text:0000000000009784                 cmp     cs:align_variable_outer_quotes, 0
.text:000000000000978B                 jnz     loc_9E80
.text:0000000000009791
.text:0000000000009791 loc_9791:                               ; CODE XREF: gobble_file_constprop_52+F2↑j
.text:0000000000009791                                         ; gobble_file_constprop_52+807↓j ...
.text:0000000000009791                 test    r13b, r13b
.text:0000000000009794                 movzx   r8d, cs:print_hyperlink
.text:000000000000979C                 jz      loc_99C0
.text:00000000000097A2                 mov     r12, [rbp+filename]
.text:00000000000097A9                 movzx   edx, byte ptr [r12]
.text:00000000000097AE                 cmp     dl, 2Fh ; '/'
.text:00000000000097B1                 jz      loc_A218
.text:00000000000097B7                 movzx   ecx, byte ptr [r15]
.text:00000000000097BB                 test    cl, cl
.text:00000000000097BD                 jnz     loc_9DB3
.text:00000000000097C3
.text:00000000000097C3 loc_97C3:                               ; CODE XREF: gobble_file_constprop_52+7E5↓j
.text:00000000000097C3                                         ; gobble_file_constprop_52+B8F↓j
.text:00000000000097C3                 test    r8b, r8b
.text:00000000000097C6                 jnz     loc_9BFA
.text:00000000000097CC
.text:00000000000097CC loc_97CC:                               ; CODE XREF: gobble_file_constprop_52+57E↓j
.text:00000000000097CC                                         ; gobble_file_constprop_52+5A6↓j ...
.text:00000000000097CC                 mov     ecx, cs:dereference
.text:00000000000097D2                 lea     r15, [rbx+18h]
.text:00000000000097D6                 cmp     ecx, 3
.text:00000000000097D9                 jb      loc_9B40
.text:00000000000097DF                 cmp     ecx, 4
.text:00000000000097E2                 jbe     loc_9C40
.text:00000000000097E8                 cmp     ecx, 5
.text:00000000000097EB                 jnz     loc_9B40
.text:00000000000097F1
.text:00000000000097F1 loc_97F1:                               ; CODE XREF: gobble_file_constprop_52+4A1↓j
.text:00000000000097F1                 mov     rdx, r15        ; stat_buf
.text:00000000000097F4                 mov     rsi, r12        ; filename
.text:00000000000097F7                 mov     edi, 1          ; ver
.text:00000000000097FC                 call    ___xstat
.text:0000000000009801                 test    eax, eax
.text:0000000000009803                 jnz     loc_9B58
.text:0000000000009809
.text:0000000000009809 loc_9809:                               ; CODE XREF: gobble_file_constprop_52+4C2↓j
.text:0000000000009809                                         ; gobble_file_constprop_52+5F9↓j
.text:0000000000009809                 cmp     r14d, 5
.text:000000000000980D                 mov     byte ptr [rbx+0B8h], 1
.text:0000000000009814                 jz      loc_9B90
.text:000000000000981A                 mov     eax, [rbx+30h]
.text:000000000000981D                 and     eax, 0F000h
.text:0000000000009822                 cmp     eax, 8000h
.text:0000000000009827                 jz      loc_9B90
.text:000000000000982D
.text:000000000000982D loc_982D:                               ; CODE XREF: gobble_file_constprop_52+507↓j
.text:000000000000982D                                         ; gobble_file_constprop_52+519↓j ...
.text:000000000000982D                 mov     r10d, cs:format
.text:0000000000009834                 test    r10d, r10d
.text:0000000000009837                 jz      short loc_9842
.text:0000000000009839                 cmp     cs:print_scontext, 0
.text:0000000000009840                 jz      short loc_988C
.text:0000000000009842
.text:0000000000009842 loc_9842:                               ; CODE XREF: gobble_file_constprop_52+1A7↑j
.text:0000000000009842                 call    ___errno_location
.text:0000000000009847                 mov     r14, [rbx+18h]
.text:000000000000984B                 cmp     r14, cs:unsupported_device_10314
.text:0000000000009852                 mov     r8, rax
.text:0000000000009855                 mov     dword ptr [rax], 5Fh ; '_'
.text:000000000000985B                 jz      short loc_9864
.text:000000000000985D                 mov     cs:unsupported_device_10314, r14
.text:0000000000009864
.text:0000000000009864 loc_9864:                               ; CODE XREF: gobble_file_constprop_52+1CB↑j
.text:0000000000009864                 mov     r9d, cs:format
.text:000000000000986B                 lea     rax, UNKNOWN_SECURITY_CONTEXT
.text:0000000000009872                 mov     [rbx+0B0h], rax
.text:0000000000009879                 test    r9d, r9d
.text:000000000000987C                 jz      loc_9F40
.text:0000000000009882                 mov     dword ptr [rbx+0BCh], 0
.text:000000000000988C
.text:000000000000988C loc_988C:                               ; CODE XREF: gobble_file_constprop_52+1B0↑j
.text:000000000000988C                 mov     eax, [rbx+30h]
.text:000000000000988F                 and     eax, 0F000h
.text:0000000000009894                 cmp     eax, 0A000h
.text:0000000000009899                 jz      loc_9FE0
.text:000000000000989F
.text:000000000000989F loc_989F:                               ; CODE XREF: gobble_file_constprop_52+93F↓j
.text:000000000000989F                                         ; gobble_file_constprop_52+A25↓j ...
.text:000000000000989F                 cmp     eax, 4000h
.text:00000000000098A4                 jz      loc_A100
.text:00000000000098AA                 mov     dword ptr [rbx+0A8h], 5
.text:00000000000098B4
.text:00000000000098B4 loc_98B4:                               ; CODE XREF: gobble_file_constprop_52+A35↓j
.text:00000000000098B4                                         ; gobble_file_constprop_52+A88↓j ...
.text:00000000000098B4                 mov     ecx, cs:format
.text:00000000000098BA                 mov     r12, [rbx+58h]
.text:00000000000098BE                 test    ecx, ecx
.text:00000000000098C0                 jz      short loc_98CB
.text:00000000000098C2                 cmp     cs:print_block_size, 0
.text:00000000000098C9                 jz      short loc_993C
.text:00000000000098CB
.text:00000000000098CB loc_98CB:                               ; CODE XREF: gobble_file_constprop_52+230↑j
.text:00000000000098CB                 mov     r8, cs:output_block_size
.text:00000000000098D2                 mov     edx, cs:human_output_opts
.text:00000000000098D8                 lea     r13, [rbp+var_2D0]
.text:00000000000098DF                 mov     ecx, 200h
.text:00000000000098E4                 mov     rdi, r12
.text:00000000000098E7                 mov     rsi, r13
.text:00000000000098EA                 call    human_readable
.text:00000000000098EF                 xor     esi, esi
.text:00000000000098F1                 mov     rdi, rax
.text:00000000000098F4                 call    gnu_mbswidth
.text:00000000000098F9                 cmp     eax, cs:block_size_width
.text:00000000000098FF                 jle     short loc_9907
.text:0000000000009901                 mov     cs:block_size_width, eax
.text:0000000000009907
.text:0000000000009907 loc_9907:                               ; CODE XREF: gobble_file_constprop_52+26F↑j
.text:0000000000009907                 mov     edx, cs:format
.text:000000000000990D                 test    edx, edx
.text:000000000000990F                 jnz     loc_A150
.text:0000000000009915                 cmp     cs:print_owner, 0
.text:000000000000991C                 jnz     loc_A130
.text:0000000000009922
.text:0000000000009922 loc_9922:                               ; CODE XREF: gobble_file_constprop_52+AAE↓j
.text:0000000000009922                                         ; gobble_file_constprop_52+ABA↓j
.text:0000000000009922                 cmp     cs:print_group, 0
.text:0000000000009929                 jnz     loc_A190
.text:000000000000992F
.text:000000000000992F loc_992F:                               ; CODE XREF: gobble_file_constprop_52+B72↓j
.text:000000000000992F                                         ; gobble_file_constprop_52+B7E↓j
.text:000000000000992F                 cmp     cs:print_author, 0
.text:0000000000009936                 jnz     loc_A168
.text:000000000000993C
.text:000000000000993C loc_993C:                               ; CODE XREF: gobble_file_constprop_52+239↑j
.text:000000000000993C                                         ; gobble_file_constprop_52+AE6↓j ...
.text:000000000000993C                 cmp     cs:print_scontext, 0
.text:0000000000009943                 jz      short loc_995D
.text:0000000000009945
.text:0000000000009945 loc_9945:                               ; CODE XREF: gobble_file_constprop_52+AC7↓j
.text:0000000000009945                 mov     rdi, [rbx+0B0h] ; s
.text:000000000000994C                 call    _strlen
.text:0000000000009951                 cmp     eax, cs:scontext_width
.text:0000000000009957                 jg      loc_9EB0
.text:000000000000995D
.text:000000000000995D loc_995D:                               ; CODE XREF: gobble_file_constprop_52+2B3↑j
.text:000000000000995D                                         ; gobble_file_constprop_52+826↓j
.text:000000000000995D                 mov     eax, cs:format
.text:0000000000009963                 test    eax, eax
.text:0000000000009965                 jz      loc_9CD0
.text:000000000000996B
.text:000000000000996B loc_996B:                               ; CODE XREF: gobble_file_constprop_52+705↓j
.text:000000000000996B                                         ; gobble_file_constprop_52+862↓j ...
.text:000000000000996B                 movzx   eax, cs:print_inode
.text:0000000000009972                 test    al, al
.text:0000000000009974                 jnz     loc_9C98
.text:000000000000997A
.text:000000000000997A loc_997A:                               ; CODE XREF: gobble_file_constprop_52+383↓j
.text:000000000000997A                                         ; gobble_file_constprop_52+3EB↓j ...
.text:000000000000997A                 mov     rdi, [rbp+filename] ; src
.text:0000000000009981                 call    xstrdup
.text:0000000000009986                 add     cs:cwd_n_used, 1
.text:000000000000998E                 mov     [rbx], rax
.text:0000000000009991
.text:0000000000009991 loc_9991:                               ; CODE XREF: gobble_file_constprop_52+4F0↓j
.text:0000000000009991                                         ; gobble_file_constprop_52+C14↓j
.text:0000000000009991                 mov     rsi, [rbp+var_38]
.text:0000000000009995                 xor     rsi, fs:28h
.text:000000000000999E                 mov     rax, r12
.text:00000000000099A1                 jnz     loc_A3D4
.text:00000000000099A7                 lea     rsp, [rbp-28h]
.text:00000000000099AB                 pop     rbx
.text:00000000000099AC                 pop     r12
.text:00000000000099AE                 pop     r13
.text:00000000000099B0                 pop     r14
.text:00000000000099B2                 pop     r15
.text:00000000000099B4                 pop     rbp
.text:00000000000099B5                 retn
.text:00000000000099B5 ; ---------------------------------------------------------------------------
.text:00000000000099B6                 align 20h
.text:00000000000099C0
.text:00000000000099C0 loc_99C0:                               ; CODE XREF: gobble_file_constprop_52+10C↑j
.text:00000000000099C0                 test    r8b, r8b
.text:00000000000099C3                 jnz     loc_9BE0
.text:00000000000099C9                 cmp     cs:format_needs_stat, 0
.text:00000000000099D0                 jnz     loc_9B00
.text:00000000000099D6                 cmp     r14d, 3
.text:00000000000099DA                 jz      loc_A2F0
.text:00000000000099E0
.text:00000000000099E0 loc_99E0:                               ; CODE XREF: gobble_file_constprop_52+C67↓j
.text:00000000000099E0                                         ; gobble_file_constprop_52+CC2↓j
.text:00000000000099E0                 movzx   eax, cs:print_inode
.text:00000000000099E7                 test    al, al
.text:00000000000099E9                 jnz     short loc_9A20
.text:00000000000099EB                 cmp     cs:format_needs_type, 0
.text:00000000000099F2                 jz      short loc_9A10
.text:00000000000099F4                 test    r14d, r14d
.text:00000000000099F7                 setz    cl
.text:00000000000099FA                 cmp     r14d, 6
.text:00000000000099FE                 mov     edx, ecx
.text:0000000000009A00                 jz      short loc_9A34
.text:0000000000009A02                 test    cl, cl
.text:0000000000009A04                 jnz     short loc_9A34
.text:0000000000009A06                 cmp     cs:format_needs_type, 0
.text:0000000000009A0D                 jnz     short loc_9A74
.text:0000000000009A0F                 nop
.text:0000000000009A10
.text:0000000000009A10 loc_9A10:                               ; CODE XREF: gobble_file_constprop_52+362↑j
.text:0000000000009A10                                         ; gobble_file_constprop_52+3DA↓j
.text:0000000000009A10                 xor     r12d, r12d
.text:0000000000009A13                 jmp     loc_997A
.text:0000000000009A13 ; ---------------------------------------------------------------------------
.text:0000000000009A18                 align 20h
.text:0000000000009A20
.text:0000000000009A20 loc_9A20:                               ; CODE XREF: gobble_file_constprop_52+359↑j
.text:0000000000009A20                 test    r14d, r14d
.text:0000000000009A23                 setz    dl
.text:0000000000009A26                 cmp     r14d, 6
.text:0000000000009A2A                 jz      short loc_9A34
.text:0000000000009A2C                 test    dl, dl
.text:0000000000009A2E                 jz      loc_9B00
.text:0000000000009A34
.text:0000000000009A34 loc_9A34:                               ; CODE XREF: gobble_file_constprop_52+370↑j
.text:0000000000009A34                                         ; gobble_file_constprop_52+374↑j ...
.text:0000000000009A34                 cmp     cs:dereference, 5
.text:0000000000009A3B                 jz      loc_9B00
.text:0000000000009A41                 cmp     cs:color_symlink_as_referent, 0
.text:0000000000009A48                 jnz     loc_9B00
.text:0000000000009A4E                 cmp     cs:check_symlink_mode, 0
.text:0000000000009A55                 jnz     loc_9B00
.text:0000000000009A5B                 test    al, al
.text:0000000000009A5D                 jnz     loc_9B00
.text:0000000000009A63                 cmp     cs:format_needs_type, 0
.text:0000000000009A6A                 jz      short loc_9A10
.text:0000000000009A6C                 test    dl, dl
.text:0000000000009A6E                 jnz     loc_9B00
.text:0000000000009A74
.text:0000000000009A74 loc_9A74:                               ; CODE XREF: gobble_file_constprop_52+37D↑j
.text:0000000000009A74                 xor     r12d, r12d
.text:0000000000009A77                 cmp     r14d, 5
.text:0000000000009A7B                 jnz     loc_997A
.text:0000000000009A81                 cmp     cs:indicator_style, 3
.text:0000000000009A88                 jz      short loc_9B00
.text:0000000000009A8A                 cmp     cs:print_with_color, 0
.text:0000000000009A91                 mov     byte ptr [rbp+var_390], r8b
.text:0000000000009A98                 jz      loc_997A
.text:0000000000009A9E                 mov     edi, 0Eh
.text:0000000000009AA3                 call    is_colored
.text:0000000000009AA8                 test    al, al
.text:0000000000009AAA                 movzx   r8d, byte ptr [rbp+var_390]
.text:0000000000009AB2                 jnz     short loc_9B00
.text:0000000000009AB4                 mov     edi, 10h
.text:0000000000009AB9                 call    is_colored
.text:0000000000009ABE                 test    al, al
.text:0000000000009AC0                 movzx   r8d, byte ptr [rbp+var_390]
.text:0000000000009AC8                 jnz     short loc_9B00
.text:0000000000009ACA                 mov     edi, 11h
.text:0000000000009ACF                 call    is_colored
.text:0000000000009AD4                 test    al, al
.text:0000000000009AD6                 movzx   r8d, byte ptr [rbp+var_390]
.text:0000000000009ADE                 jnz     short loc_9B00
.text:0000000000009AE0                 mov     edi, 15h
.text:0000000000009AE5                 call    is_colored
.text:0000000000009AEA                 test    al, al
.text:0000000000009AEC                 movzx   r8d, byte ptr [rbp+var_390]
.text:0000000000009AF4                 jz      loc_997A
.text:0000000000009AFA                 nop     word ptr [rax+rax+00h]
.text:0000000000009B00
.text:0000000000009B00 loc_9B00:                               ; CODE XREF: gobble_file_constprop_52+340↑j
.text:0000000000009B00                                         ; gobble_file_constprop_52+39E↑j ...
.text:0000000000009B00                 mov     rax, [rbp+filename]
.text:0000000000009B07                 movzx   edx, byte ptr [rax]
.text:0000000000009B0A                 cmp     dl, 2Fh ; '/'
.text:0000000000009B0D                 jnz     loc_9F20
.text:0000000000009B13                 mov     eax, cs:dereference
.text:0000000000009B19                 lea     r15, [rbx+18h]
.text:0000000000009B1D                 cmp     eax, 3
.text:0000000000009B20                 jb      short loc_9B37
.text:0000000000009B22                 cmp     eax, 4
.text:0000000000009B25                 jbe     short loc_9B37
.text:0000000000009B27                 cmp     eax, 5
.text:0000000000009B2A                 mov     r12, [rbp+filename]
.text:0000000000009B31                 jz      loc_97F1
.text:0000000000009B37
.text:0000000000009B37 loc_9B37:                               ; CODE XREF: gobble_file_constprop_52+490↑j
.text:0000000000009B37                                         ; gobble_file_constprop_52+495↑j
.text:0000000000009B37                 mov     r12, [rbp+filename]
.text:0000000000009B3E                 xchg    ax, ax
.text:0000000000009B40
.text:0000000000009B40 loc_9B40:                               ; CODE XREF: gobble_file_constprop_52+149↑j
.text:0000000000009B40                                         ; gobble_file_constprop_52+15B↑j ...
.text:0000000000009B40                 mov     rdx, r15        ; stat_buf
.text:0000000000009B43                 mov     rsi, r12        ; filename
.text:0000000000009B46                 mov     edi, 1          ; ver
.text:0000000000009B4B                 call    ___lxstat
.text:0000000000009B50                 test    eax, eax
.text:0000000000009B52                 jz      loc_9809
.text:0000000000009B58
.text:0000000000009B58 loc_9B58:                               ; CODE XREF: gobble_file_constprop_52+173↑j
.text:0000000000009B58                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:0000000000009B5F                 xor     edi, edi        ; domainname
.text:0000000000009B61                 mov     edx, 5          ; category
.text:0000000000009B66                 call    _dcgettext
.text:0000000000009B6B                 mov     rdx, r12
.text:0000000000009B6E                 movzx   edi, r13b
.text:0000000000009B72                 mov     rsi, rax
.text:0000000000009B75                 call    file_failure
.text:0000000000009B7A                 xor     r12d, r12d
.text:0000000000009B7D                 test    r13b, r13b
.text:0000000000009B80                 jnz     loc_9991
.text:0000000000009B86                 jmp     loc_997A
.text:0000000000009B86 ; ---------------------------------------------------------------------------
.text:0000000000009B8B                 align 10h
.text:0000000000009B90
.text:0000000000009B90 loc_9B90:                               ; CODE XREF: gobble_file_constprop_52+184↑j
.text:0000000000009B90                                         ; gobble_file_constprop_52+197↑j
.text:0000000000009B90                 cmp     cs:print_with_color, 0
.text:0000000000009B97                 jz      loc_982D
.text:0000000000009B9D                 mov     edi, 15h
.text:0000000000009BA2                 call    is_colored
.text:0000000000009BA7                 test    al, al
.text:0000000000009BA9                 jz      loc_982D
.text:0000000000009BAF                 mov     r14, [rbx+18h]
.text:0000000000009BB3                 call    ___errno_location
.text:0000000000009BB8                 cmp     r14, cs:unsupported_device_10326
.text:0000000000009BBF                 mov     dword ptr [rax], 5Fh ; '_'
.text:0000000000009BC5                 jz      short loc_9BCE
.text:0000000000009BC7                 mov     cs:unsupported_device_10326, r14
.text:0000000000009BCE
.text:0000000000009BCE loc_9BCE:                               ; CODE XREF: gobble_file_constprop_52+535↑j
.text:0000000000009BCE                 mov     byte ptr [rbx+0C0h], 0
.text:0000000000009BD5                 jmp     loc_982D
.text:0000000000009BD5 ; ---------------------------------------------------------------------------
.text:0000000000009BDA                 align 20h
.text:0000000000009BE0
.text:0000000000009BE0 loc_9BE0:                               ; CODE XREF: gobble_file_constprop_52+333↑j
.text:0000000000009BE0                 mov     rax, [rbp+filename]
.text:0000000000009BE7                 movzx   edx, byte ptr [rax]
.text:0000000000009BEA                 cmp     dl, 2Fh ; '/'
.text:0000000000009BED                 jnz     loc_9DA0
.text:0000000000009BF3                 mov     r12, [rbp+filename]
.text:0000000000009BFA
.text:0000000000009BFA loc_9BFA:                               ; CODE XREF: gobble_file_constprop_52+136↑j
.text:0000000000009BFA                                         ; gobble_file_constprop_52+71D↓j
.text:0000000000009BFA                 mov     esi, 2
.text:0000000000009BFF                 mov     rdi, r12        ; src
.text:0000000000009C02                 call    canonicalize_filename_mode
.text:0000000000009C07                 test    rax, rax
.text:0000000000009C0A                 mov     [rbx+10h], rax
.text:0000000000009C0E                 jnz     loc_97CC
.text:0000000000009C14                 lea     rsi, aErrorCanonical ; "error canonicalizing %s"
.text:0000000000009C1B                 xor     edi, edi        ; domainname
.text:0000000000009C1D                 mov     edx, 5          ; category
.text:0000000000009C22                 call    _dcgettext
.text:0000000000009C27                 movzx   edi, r13b
.text:0000000000009C2B                 mov     rdx, r12
.text:0000000000009C2E                 mov     rsi, rax
.text:0000000000009C31                 call    file_failure
.text:0000000000009C36                 jmp     loc_97CC
.text:0000000000009C36 ; ---------------------------------------------------------------------------
.text:0000000000009C3B                 align 20h
.text:0000000000009C40
.text:0000000000009C40 loc_9C40:                               ; CODE XREF: gobble_file_constprop_52+152↑j
.text:0000000000009C40                 test    r13b, r13b
.text:0000000000009C43                 jz      loc_9B40
.text:0000000000009C49                 mov     rdx, r15        ; stat_buf
.text:0000000000009C4C                 mov     rsi, r12        ; filename
.text:0000000000009C4F                 mov     edi, 1          ; ver
.text:0000000000009C54                 mov     dword ptr [rbp+var_390], ecx
.text:0000000000009C5A                 call    ___xstat
.text:0000000000009C5F                 mov     ecx, dword ptr [rbp+var_390]
.text:0000000000009C65                 cmp     ecx, 3
.text:0000000000009C68                 jz      short loc_9C87
.text:0000000000009C6A                 test    eax, eax
.text:0000000000009C6C                 js      loc_A270
.text:0000000000009C72                 mov     edx, [rbx+30h]
.text:0000000000009C75                 and     edx, 0F000h
.text:0000000000009C7B                 cmp     edx, 4000h
.text:0000000000009C81                 jnz     loc_9B40
.text:0000000000009C87
.text:0000000000009C87 loc_9C87:                               ; CODE XREF: gobble_file_constprop_52+5D8↑j
.text:0000000000009C87                 test    eax, eax
.text:0000000000009C89                 jz      loc_9809
.text:0000000000009C8F                 jmp     loc_A27E
.text:0000000000009C8F ; ---------------------------------------------------------------------------
.text:0000000000009C94                 align 8
.text:0000000000009C98
.text:0000000000009C98 loc_9C98:                               ; CODE XREF: gobble_file_constprop_52+2E4↑j
.text:0000000000009C98                 mov     rdi, [rbx+20h]
.text:0000000000009C9C                 lea     rsi, [rbp+var_2D0]
.text:0000000000009CA3                 call    umaxtostr
.text:0000000000009CA8                 mov     rdi, rax        ; s
.text:0000000000009CAB                 call    _strlen
.text:0000000000009CB0                 cmp     eax, cs:inode_number_width
.text:0000000000009CB6                 jle     loc_997A
.text:0000000000009CBC                 mov     cs:inode_number_width, eax
.text:0000000000009CC2                 jmp     loc_997A
.text:0000000000009CC2 ; ---------------------------------------------------------------------------
.text:0000000000009CC7                 align 10h
.text:0000000000009CD0
.text:0000000000009CD0 loc_9CD0:                               ; CODE XREF: gobble_file_constprop_52+2D5↑j
.text:0000000000009CD0                 mov     rdi, [rbx+28h]
.text:0000000000009CD4                 lea     rsi, [rbp+var_2F0]
.text:0000000000009CDB                 call    umaxtostr
.text:0000000000009CE0                 mov     rdi, rax        ; s
.text:0000000000009CE3                 call    _strlen
.text:0000000000009CE8                 cmp     eax, cs:nlink_width
.text:0000000000009CEE                 jle     short loc_9CF6
.text:0000000000009CF0                 mov     cs:nlink_width, eax
.text:0000000000009CF6
.text:0000000000009CF6 loc_9CF6:                               ; CODE XREF: gobble_file_constprop_52+65E↑j
.text:0000000000009CF6                 mov     eax, [rbx+30h]
.text:0000000000009CF9                 and     eax, 0B000h
.text:0000000000009CFE                 cmp     eax, 2000h
.text:0000000000009D03                 jnz     loc_9EC0
.text:0000000000009D09                 mov     rax, [rbx+40h]
.text:0000000000009D0D                 lea     r13, [rbp+var_2D0]
.text:0000000000009D14                 mov     rsi, r13
.text:0000000000009D17                 mov     rdi, rax
.text:0000000000009D1A                 shr     rax, 20h
.text:0000000000009D1E                 shr     rdi, 8
.text:0000000000009D22                 mov     edx, edi
.text:0000000000009D24                 mov     rdi, rax
.text:0000000000009D27                 and     edx, 0FFFh
.text:0000000000009D2D                 and     edi, 0FFFFF000h
.text:0000000000009D33                 or      edi, edx
.text:0000000000009D35                 call    umaxtostr
.text:0000000000009D3A                 mov     rdi, rax        ; s
.text:0000000000009D3D                 call    _strlen
.text:0000000000009D42                 cmp     eax, cs:major_device_number_width
.text:0000000000009D48                 jle     short loc_9D50
.text:0000000000009D4A                 mov     cs:major_device_number_width, eax
.text:0000000000009D50
.text:0000000000009D50 loc_9D50:                               ; CODE XREF: gobble_file_constprop_52+6B8↑j
.text:0000000000009D50                 mov     rax, [rbx+40h]
.text:0000000000009D54                 mov     rsi, r13
.text:0000000000009D57                 movzx   edx, al
.text:0000000000009D5A                 shr     rax, 0Ch
.text:0000000000009D5E                 mov     rdi, rax
.text:0000000000009D61                 xor     dil, dil
.text:0000000000009D64                 or      edi, edx
.text:0000000000009D66                 call    umaxtostr
.text:0000000000009D6B                 mov     rdi, rax        ; s
.text:0000000000009D6E                 call    _strlen
.text:0000000000009D73                 mov     edx, cs:minor_device_number_width
.text:0000000000009D79                 cmp     eax, edx
.text:0000000000009D7B                 jle     short loc_9D85
.text:0000000000009D7D                 mov     cs:minor_device_number_width, eax
.text:0000000000009D83                 mov     edx, eax
.text:0000000000009D85
.text:0000000000009D85 loc_9D85:                               ; CODE XREF: gobble_file_constprop_52+6EB↑j
.text:0000000000009D85                 mov     eax, cs:major_device_number_width
.text:0000000000009D8B                 lea     eax, [rdx+rax+2]
.text:0000000000009D8F                 cmp     eax, cs:file_size_width
.text:0000000000009D95                 jle     loc_996B
.text:0000000000009D9B                 jmp     loc_9EF8
.text:0000000000009DA0 ; ---------------------------------------------------------------------------
.text:0000000000009DA0
.text:0000000000009DA0 loc_9DA0:                               ; CODE XREF: gobble_file_constprop_52+55D↑j
.text:0000000000009DA0                 movzx   ecx, byte ptr [r15]
.text:0000000000009DA4                 mov     r12, [rbp+filename]
.text:0000000000009DAB                 test    cl, cl
.text:0000000000009DAD                 jz      loc_9BFA
.text:0000000000009DB3
.text:0000000000009DB3 loc_9DB3:                               ; CODE XREF: gobble_file_constprop_52+12D↑j
.text:0000000000009DB3                                         ; gobble_file_constprop_52+896↓j
.text:0000000000009DB3                 mov     rdi, [rbp+filename] ; s
.text:0000000000009DBA                 mov     [rbp+var_392], dl
.text:0000000000009DC0                 mov     [rbp+var_391], cl
.text:0000000000009DC6                 mov     byte ptr [rbp+var_390], r8b
.text:0000000000009DCD                 call    _strlen
.text:0000000000009DD2                 mov     rdi, r15        ; s
.text:0000000000009DD5                 mov     r12, rax
.text:0000000000009DD8                 call    _strlen
.text:0000000000009DDD                 lea     rax, [r12+rax+20h]
.text:0000000000009DE2                 movzx   ecx, [rbp+var_391]
.text:0000000000009DE9                 movzx   r10d, byte ptr [r15+1]
.text:0000000000009DEE                 movzx   r8d, byte ptr [rbp+var_390]
.text:0000000000009DF6                 movzx   edx, [rbp+var_392]
.text:0000000000009DFD                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:0000000000009E01                 sub     rsp, rax
.text:0000000000009E04                 lea     rdi, [rsp+3A0h+var_391]
.text:0000000000009E09                 and     rdi, 0FFFFFFFFFFFFFFF0h
.text:0000000000009E0D                 cmp     cl, 2Eh ; '.'
.text:0000000000009E10                 mov     r12, rdi
.text:0000000000009E13                 jz      loc_9F08
.text:0000000000009E19
.text:0000000000009E19 loc_9E19:                               ; CODE XREF: gobble_file_constprop_52+884↓j
.text:0000000000009E19                 mov     rsi, r15
.text:0000000000009E1C                 jmp     short loc_9E2B
.text:0000000000009E1C ; ---------------------------------------------------------------------------
.text:0000000000009E1E                 align 20h
.text:0000000000009E20
.text:0000000000009E20 loc_9E20:                               ; CODE XREF: gobble_file_constprop_52+7A9↓j
.text:0000000000009E20                 mov     ecx, r10d
.text:0000000000009E23                 movzx   r10d, byte ptr [rsi+1]
.text:0000000000009E28                 mov     rdi, rax
.text:0000000000009E2B
.text:0000000000009E2B loc_9E2B:                               ; CODE XREF: gobble_file_constprop_52+78C↑j
.text:0000000000009E2B                 lea     rax, [rdi+1]
.text:0000000000009E2F                 add     rsi, 1
.text:0000000000009E33                 test    r10b, r10b
.text:0000000000009E36                 mov     [rax-1], cl
.text:0000000000009E39                 jnz     short loc_9E20
.text:0000000000009E3B                 cmp     r15, rsi
.text:0000000000009E3E                 jnb     short loc_9E4D
.text:0000000000009E40                 cmp     byte ptr [rsi-1], 2Fh ; '/'
.text:0000000000009E44                 jz      short loc_9E4D
.text:0000000000009E46                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000009E49                 lea     rax, [rdi+2]
.text:0000000000009E4D
.text:0000000000009E4D loc_9E4D:                               ; CODE XREF: gobble_file_constprop_52+7AE↑j
.text:0000000000009E4D                                         ; gobble_file_constprop_52+7B4↑j ...
.text:0000000000009E4D                 test    dl, dl
.text:0000000000009E4F                 jz      short loc_9E72
.text:0000000000009E51                 mov     rcx, [rbp+filename]
.text:0000000000009E58                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: gobble_file_constprop_52+7E0↓j
.text:0000000000009E60                 add     rcx, 1
.text:0000000000009E64                 add     rax, 1
.text:0000000000009E68                 mov     [rax-1], dl
.text:0000000000009E6B                 movzx   edx, byte ptr [rcx]
.text:0000000000009E6E                 test    dl, dl
.text:0000000000009E70                 jnz     short loc_9E60
.text:0000000000009E72
.text:0000000000009E72 loc_9E72:                               ; CODE XREF: gobble_file_constprop_52+7BF↑j
.text:0000000000009E72                 mov     byte ptr [rax], 0
.text:0000000000009E75                 jmp     loc_97C3
.text:0000000000009E75 ; ---------------------------------------------------------------------------
.text:0000000000009E7A                 align 20h
.text:0000000000009E80
.text:0000000000009E80 loc_9E80:                               ; CODE XREF: gobble_file_constprop_52+FB↑j
.text:0000000000009E80                 mov     rdi, [rbp+filename] ; s
.text:0000000000009E87                 call    needs_quoting
.text:0000000000009E8C                 movzx   edx, al
.text:0000000000009E8F                 test    al, al
.text:0000000000009E91                 mov     [rbx+0C4h], edx
.text:0000000000009E97                 jz      loc_9791
.text:0000000000009E9D                 mov     cs:cwd_some_quoted, 1
.text:0000000000009EA4                 jmp     loc_9791
.text:0000000000009EA4 ; ---------------------------------------------------------------------------
.text:0000000000009EA9                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 loc_9EB0:                               ; CODE XREF: gobble_file_constprop_52+2C7↑j
.text:0000000000009EB0                 mov     cs:scontext_width, eax
.text:0000000000009EB6                 jmp     loc_995D
.text:0000000000009EB6 ; ---------------------------------------------------------------------------
.text:0000000000009EBB                 align 20h
.text:0000000000009EC0
.text:0000000000009EC0 loc_9EC0:                               ; CODE XREF: gobble_file_constprop_52+673↑j
.text:0000000000009EC0                 mov     rdi, [rbx+48h]
.text:0000000000009EC4                 mov     r8, cs:file_output_block_size
.text:0000000000009ECB                 lea     rsi, [rbp+var_2D0]
.text:0000000000009ED2                 mov     edx, cs:file_human_output_opts
.text:0000000000009ED8                 mov     ecx, 1
.text:0000000000009EDD                 call    human_readable
.text:0000000000009EE2                 xor     esi, esi
.text:0000000000009EE4                 mov     rdi, rax
.text:0000000000009EE7                 call    gnu_mbswidth
.text:0000000000009EEC                 cmp     eax, cs:file_size_width
.text:0000000000009EF2                 jle     loc_996B
.text:0000000000009EF8
.text:0000000000009EF8 loc_9EF8:                               ; CODE XREF: gobble_file_constprop_52+70B↑j
.text:0000000000009EF8                 mov     cs:file_size_width, eax
.text:0000000000009EFE                 jmp     loc_996B
.text:0000000000009EFE ; ---------------------------------------------------------------------------
.text:0000000000009F03                 align 8
.text:0000000000009F08
.text:0000000000009F08 loc_9F08:                               ; CODE XREF: gobble_file_constprop_52+783↑j
.text:0000000000009F08                 test    r10b, r10b
.text:0000000000009F0B                 mov     rax, rdi
.text:0000000000009F0E                 jz      loc_9E4D
.text:0000000000009F14                 jmp     loc_9E19
.text:0000000000009F14 ; ---------------------------------------------------------------------------
.text:0000000000009F19                 align 20h
.text:0000000000009F20
.text:0000000000009F20 loc_9F20:                               ; CODE XREF: gobble_file_constprop_52+47D↑j
.text:0000000000009F20                 movzx   ecx, byte ptr [r15]
.text:0000000000009F24                 test    cl, cl
.text:0000000000009F26                 jnz     loc_9DB3
.text:0000000000009F2C                 mov     r12, [rbp+filename]
.text:0000000000009F33                 jmp     loc_97CC
.text:0000000000009F33 ; ---------------------------------------------------------------------------
.text:0000000000009F38                 align 20h
.text:0000000000009F40
.text:0000000000009F40 loc_9F40:                               ; CODE XREF: gobble_file_constprop_52+1EC↑j
.text:0000000000009F40                 cmp     r14, cs:unsupported_device_10320
.text:0000000000009F47                 jz      loc_A240
.text:0000000000009F4D                 mov     dword ptr [r8], 0
.text:0000000000009F54                 mov     rsi, r15
.text:0000000000009F57                 mov     rdi, r12
.text:0000000000009F5A                 mov     [rbp+var_390], r8
.text:0000000000009F61                 call    file_has_acl
.text:0000000000009F66                 test    eax, eax
.text:0000000000009F68                 mov     ecx, 1
.text:0000000000009F6D                 mov     edx, 2
.text:0000000000009F72                 mov     r8, [rbp+var_390]
.text:0000000000009F79                 jle     loc_A3B0
.text:0000000000009F7F
.text:0000000000009F7F loc_9F7F:                               ; CODE XREF: gobble_file_constprop_52+D3F↓j
.text:0000000000009F7F                 or      cs:any_has_acl, cl
.text:0000000000009F85                 test    eax, eax
.text:0000000000009F87                 mov     [rbp+var_390], r8
.text:0000000000009F8E                 mov     [rbx+0BCh], edx
.text:0000000000009F94                 jns     short loc_9FC2
.text:0000000000009F96                 mov     rdx, r12
.text:0000000000009F99                 mov     esi, 3
.text:0000000000009F9E                 xor     edi, edi
.text:0000000000009FA0                 call    quotearg_n_style_colon
.text:0000000000009FA5                 mov     r8, [rbp+var_390]
.text:0000000000009FAC                 lea     rdx, aS_1+2     ; format
.text:0000000000009FB3                 mov     rcx, rax
.text:0000000000009FB6                 xor     edi, edi        ; status
.text:0000000000009FB8                 xor     eax, eax
.text:0000000000009FBA                 mov     esi, [r8]       ; errnum
.text:0000000000009FBD                 call    _error
.text:0000000000009FC2
.text:0000000000009FC2 loc_9FC2:                               ; CODE XREF: gobble_file_constprop_52+904↑j
.text:0000000000009FC2                 mov     eax, [rbx+30h]
.text:0000000000009FC5                 and     eax, 0F000h
.text:0000000000009FCA                 cmp     eax, 0A000h
.text:0000000000009FCF                 jnz     loc_989F
.text:0000000000009FD5                 mov     edi, cs:format
.text:0000000000009FDB                 test    edi, edi
.text:0000000000009FDD                 jz      short loc_9FED
.text:0000000000009FDF                 nop
.text:0000000000009FE0
.text:0000000000009FE0 loc_9FE0:                               ; CODE XREF: gobble_file_constprop_52+209↑j
.text:0000000000009FE0                 cmp     cs:check_symlink_mode, 0
.text:0000000000009FE7                 jz      loc_A0BB
.text:0000000000009FED
.text:0000000000009FED loc_9FED:                               ; CODE XREF: gobble_file_constprop_52+94D↑j
.text:0000000000009FED                                         ; gobble_file_constprop_52+BD4↓j
.text:0000000000009FED                 mov     rsi, [rbx+48h]
.text:0000000000009FF1                 mov     rdi, r12        ; path
.text:0000000000009FF4                 call    areadlink_with_size
.text:0000000000009FF9                 test    rax, rax
.text:0000000000009FFC                 mov     r14, rax
.text:0000000000009FFF                 mov     [rbx+8], rax
.text:000000000000A003                 jz      loc_A2B0
.text:000000000000A009
.text:000000000000A009 loc_A009:                               ; CODE XREF: gobble_file_constprop_52+C49↓j
.text:000000000000A009                 cmp     byte ptr [r14], 2Fh ; '/'
.text:000000000000A00D                 jz      loc_A228
.text:000000000000A013                 mov     rdi, r12
.text:000000000000A016                 call    dir_len
.text:000000000000A01B                 test    rax, rax
.text:000000000000A01E                 jz      loc_A228
.text:000000000000A024                 mov     rdi, r14        ; s
.text:000000000000A027                 mov     [rbp+var_390], rax
.text:000000000000A02E                 call    _strlen
.text:000000000000A033                 mov     rdx, [rbp+var_390]
.text:000000000000A03A                 lea     rdi, [rdx+rax+2]
.text:000000000000A03F                 call    xmalloc
.text:000000000000A044                 mov     rdx, [rbp+var_390]
.text:000000000000A04B                 mov     r15, rax
.text:000000000000A04E                 cmp     byte ptr [r12+rdx-1], 2Fh ; '/'
.text:000000000000A054                 jz      short loc_A05A
.text:000000000000A056                 add     rdx, 1          ; n
.text:000000000000A05A
.text:000000000000A05A loc_A05A:                               ; CODE XREF: gobble_file_constprop_52+9C4↑j
.text:000000000000A05A                 mov     rsi, r12        ; src
.text:000000000000A05D                 mov     rdi, r15        ; dest
.text:000000000000A060                 call    _stpncpy
.text:000000000000A065                 mov     rsi, r14        ; src
.text:000000000000A068                 mov     rdi, rax        ; dest
.text:000000000000A06B                 call    _strcpy
.text:000000000000A070
.text:000000000000A070 loc_A070:                               ; CODE XREF: gobble_file_constprop_52+BA3↓j
.text:000000000000A070                 test    r15, r15
.text:000000000000A073                 jz      loc_A2E0
.text:000000000000A079                 mov     esi, [rbx+0C4h]
.text:000000000000A07F                 test    esi, esi
.text:000000000000A081                 jz      loc_A390
.text:000000000000A087
.text:000000000000A087 loc_A087:                               ; CODE XREF: gobble_file_constprop_52+D0B↓j
.text:000000000000A087                                         ; gobble_file_constprop_52+D1B↓j
.text:000000000000A087                 cmp     cs:indicator_style, 1
.text:000000000000A08E                 ja      short loc_A0D0
.text:000000000000A090                 cmp     cs:check_symlink_mode, 0
.text:000000000000A097                 jnz     short loc_A0D0
.text:000000000000A099                 nop     dword ptr [rax+00000000h]
.text:000000000000A0A0
.text:000000000000A0A0 loc_A0A0:                               ; CODE XREF: gobble_file_constprop_52+A56↓j
.text:000000000000A0A0                                         ; gobble_file_constprop_52+A6B↓j ...
.text:000000000000A0A0                 mov     rdi, r15        ; ptr
.text:000000000000A0A3                 call    free
.text:000000000000A0A8                 mov     eax, [rbx+30h]
.text:000000000000A0AB                 and     eax, 0F000h
.text:000000000000A0B0                 cmp     eax, 0A000h
.text:000000000000A0B5                 jnz     loc_989F
.text:000000000000A0BB
.text:000000000000A0BB loc_A0BB:                               ; CODE XREF: gobble_file_constprop_52+957↑j
.text:000000000000A0BB                 mov     dword ptr [rbx+0A8h], 6
.text:000000000000A0C5                 jmp     loc_98B4
.text:000000000000A0C5 ; ---------------------------------------------------------------------------
.text:000000000000A0CA                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 loc_A0D0:                               ; CODE XREF: gobble_file_constprop_52+9FE↑j
.text:000000000000A0D0                                         ; gobble_file_constprop_52+A07↑j
.text:000000000000A0D0                 lea     rdx, [rbp+stat_buf] ; stat_buf
.text:000000000000A0D7                 mov     rsi, r15        ; filename
.text:000000000000A0DA                 mov     edi, 1          ; ver
.text:000000000000A0DF                 call    ___xstat
.text:000000000000A0E4                 test    eax, eax
.text:000000000000A0E6                 jnz     short loc_A0A0
.text:000000000000A0E8                 mov     eax, [rbp+stat_buf.st_mode]
.text:000000000000A0EE                 mov     byte ptr [rbx+0B9h], 1
.text:000000000000A0F5                 mov     [rbx+0ACh], eax
.text:000000000000A0FB                 jmp     short loc_A0A0
.text:000000000000A0FB ; ---------------------------------------------------------------------------
.text:000000000000A0FD                 align 20h
.text:000000000000A100
.text:000000000000A100 loc_A100:                               ; CODE XREF: gobble_file_constprop_52+214↑j
.text:000000000000A100                 test    r13b, r13b
.text:000000000000A103                 jz      short loc_A120
.text:000000000000A105                 cmp     cs:immediate_dirs, 0
.text:000000000000A10C                 jnz     short loc_A120
.text:000000000000A10E                 mov     dword ptr [rbx+0A8h], 9
.text:000000000000A118                 jmp     loc_98B4
.text:000000000000A118 ; ---------------------------------------------------------------------------
.text:000000000000A11D                 align 20h
.text:000000000000A120
.text:000000000000A120 loc_A120:                               ; CODE XREF: gobble_file_constprop_52+A73↑j
.text:000000000000A120                                         ; gobble_file_constprop_52+A7C↑j
.text:000000000000A120                 mov     dword ptr [rbx+0A8h], 3
.text:000000000000A12A                 jmp     loc_98B4
.text:000000000000A12A ; ---------------------------------------------------------------------------
.text:000000000000A12F                 align 10h
.text:000000000000A130
.text:000000000000A130 loc_A130:                               ; CODE XREF: gobble_file_constprop_52+28C↑j
.text:000000000000A130                 mov     edi, [rbx+34h]
.text:000000000000A133                 call    format_user_width
.text:000000000000A138                 cmp     eax, cs:owner_width
.text:000000000000A13E                 jle     loc_9922
.text:000000000000A144                 mov     cs:owner_width, eax
.text:000000000000A14A                 jmp     loc_9922
.text:000000000000A14A ; ---------------------------------------------------------------------------
.text:000000000000A14F                 align 10h
.text:000000000000A150
.text:000000000000A150 loc_A150:                               ; CODE XREF: gobble_file_constprop_52+27F↑j
.text:000000000000A150                 cmp     cs:print_scontext, 0
.text:000000000000A157                 jnz     loc_9945
.text:000000000000A15D                 jmp     loc_996B
.text:000000000000A15D ; ---------------------------------------------------------------------------
.text:000000000000A162                 align 8
.text:000000000000A168
.text:000000000000A168 loc_A168:                               ; CODE XREF: gobble_file_constprop_52+2A6↑j
.text:000000000000A168                 mov     edi, [rbx+34h]
.text:000000000000A16B                 call    format_user_width
.text:000000000000A170                 cmp     eax, cs:author_width
.text:000000000000A176                 jle     loc_993C
.text:000000000000A17C                 mov     cs:author_width, eax
.text:000000000000A182                 jmp     loc_993C
.text:000000000000A182 ; ---------------------------------------------------------------------------
.text:000000000000A187                 align 10h
.text:000000000000A190
.text:000000000000A190 loc_A190:                               ; CODE XREF: gobble_file_constprop_52+299↑j
.text:000000000000A190                 cmp     cs:numeric_ids, 0
.text:000000000000A197                 mov     r14d, [rbx+38h]
.text:000000000000A19B                 jz      loc_A360
.text:000000000000A1A1
.text:000000000000A1A1 loc_A1A1:                               ; CODE XREF: gobble_file_constprop_52+CDE↓j
.text:000000000000A1A1                 lea     rcx, aLu+1      ; "%lu"
.text:000000000000A1A8                 mov     r8d, r14d
.text:000000000000A1AB                 mov     edx, 15h
.text:000000000000A1B0                 mov     esi, 1
.text:000000000000A1B5                 mov     rdi, r13
.text:000000000000A1B8                 xor     eax, eax
.text:000000000000A1BA                 call    ___sprintf_chk
.text:000000000000A1BF                 mov     rax, r13
.text:000000000000A1C2
.text:000000000000A1C2 loc_A1C2:                               ; CODE XREF: gobble_file_constprop_52+B48↓j
.text:000000000000A1C2                 mov     ecx, [rax]
.text:000000000000A1C4                 add     rax, 4
.text:000000000000A1C8                 lea     edx, [rcx-1010101h]
.text:000000000000A1CE                 not     ecx
.text:000000000000A1D0                 and     edx, ecx
.text:000000000000A1D2                 and     edx, 80808080h
.text:000000000000A1D8                 jz      short loc_A1C2
.text:000000000000A1DA                 mov     ecx, edx
.text:000000000000A1DC                 shr     ecx, 10h
.text:000000000000A1DF                 test    edx, 8080h
.text:000000000000A1E5                 cmovz   edx, ecx
.text:000000000000A1E8                 lea     rcx, [rax+2]
.text:000000000000A1EC                 mov     esi, edx
.text:000000000000A1EE                 cmovz   rax, rcx
.text:000000000000A1F2                 add     sil, dl
.text:000000000000A1F5                 sbb     rax, 3
.text:000000000000A1F9                 sub     eax, r13d
.text:000000000000A1FC
.text:000000000000A1FC loc_A1FC:                               ; CODE XREF: gobble_file_constprop_52+CF5↓j
.text:000000000000A1FC                 cmp     cs:group_width, eax
.text:000000000000A202                 jge     loc_992F
.text:000000000000A208                 mov     cs:group_width, eax
.text:000000000000A20E                 jmp     loc_992F
.text:000000000000A20E ; ---------------------------------------------------------------------------
.text:000000000000A213                 align 8
.text:000000000000A218
.text:000000000000A218 loc_A218:                               ; CODE XREF: gobble_file_constprop_52+121↑j
.text:000000000000A218                 mov     r12, [rbp+filename]
.text:000000000000A21F                 jmp     loc_97C3
.text:000000000000A21F ; ---------------------------------------------------------------------------
.text:000000000000A224                 align 8
.text:000000000000A228
.text:000000000000A228 loc_A228:                               ; CODE XREF: gobble_file_constprop_52+97D↑j
.text:000000000000A228                                         ; gobble_file_constprop_52+98E↑j
.text:000000000000A228                 mov     rdi, r14        ; src
.text:000000000000A22B                 call    xstrdup
.text:000000000000A230                 mov     r15, rax
.text:000000000000A233                 jmp     loc_A070
.text:000000000000A233 ; ---------------------------------------------------------------------------
.text:000000000000A238                 align 20h
.text:000000000000A240
.text:000000000000A240 loc_A240:                               ; CODE XREF: gobble_file_constprop_52+8B7↑j
.text:000000000000A240                 mov     dword ptr [r8], 5Fh ; '_'
.text:000000000000A247                 mov     eax, [rbx+30h]
.text:000000000000A24A                 mov     dword ptr [rbx+0BCh], 0
.text:000000000000A254                 and     eax, 0F000h
.text:000000000000A259                 cmp     eax, 0A000h
.text:000000000000A25E                 jnz     loc_989F
.text:000000000000A264                 jmp     loc_9FED
.text:000000000000A264 ; ---------------------------------------------------------------------------
.text:000000000000A269                 align 10h
.text:000000000000A270
.text:000000000000A270 loc_A270:                               ; CODE XREF: gobble_file_constprop_52+5DC↑j
.text:000000000000A270                 call    ___errno_location
.text:000000000000A275                 cmp     dword ptr [rax], 2
.text:000000000000A278                 jz      loc_9B40
.text:000000000000A27E
.text:000000000000A27E loc_A27E:                               ; CODE XREF: gobble_file_constprop_52+5FF↑j
.text:000000000000A27E                 lea     rsi, aCannotAccessS ; "cannot access %s"
.text:000000000000A285                 mov     edx, 5          ; category
.text:000000000000A28A                 xor     edi, edi        ; domainname
.text:000000000000A28C                 call    _dcgettext
.text:000000000000A291                 mov     rdx, r12
.text:000000000000A294                 mov     rsi, rax
.text:000000000000A297                 mov     edi, 1
.text:000000000000A29C                 call    file_failure
.text:000000000000A2A1                 xor     r12d, r12d
.text:000000000000A2A4                 jmp     loc_9991
.text:000000000000A2A4 ; ---------------------------------------------------------------------------
.text:000000000000A2A9                 align 10h
.text:000000000000A2B0
.text:000000000000A2B0 loc_A2B0:                               ; CODE XREF: gobble_file_constprop_52+973↑j
.text:000000000000A2B0                 lea     rsi, aCannotReadSymb ; "cannot read symbolic link %s"
.text:000000000000A2B7                 xor     edi, edi        ; domainname
.text:000000000000A2B9                 mov     edx, 5          ; category
.text:000000000000A2BE                 call    _dcgettext
.text:000000000000A2C3                 movzx   edi, r13b
.text:000000000000A2C7                 mov     rdx, r12
.text:000000000000A2CA                 mov     rsi, rax
.text:000000000000A2CD                 call    file_failure
.text:000000000000A2D2                 mov     r14, [rbx+8]
.text:000000000000A2D6                 test    r14, r14
.text:000000000000A2D9                 jnz     loc_A009
.text:000000000000A2DF                 nop
.text:000000000000A2E0
.text:000000000000A2E0 loc_A2E0:                               ; CODE XREF: gobble_file_constprop_52+9E3↑j
.text:000000000000A2E0                 xor     r15d, r15d
.text:000000000000A2E3                 jmp     loc_A0A0
.text:000000000000A2E3 ; ---------------------------------------------------------------------------
.text:000000000000A2E8                 align 10h
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: gobble_file_constprop_52+34A↑j
.text:000000000000A2F0                 cmp     cs:print_with_color, 0
.text:000000000000A2F7                 jz      loc_99E0
.text:000000000000A2FD                 mov     edi, 13h
.text:000000000000A302                 mov     byte ptr [rbp+var_390], r8b
.text:000000000000A309                 call    is_colored
.text:000000000000A30E                 test    al, al
.text:000000000000A310                 movzx   r8d, byte ptr [rbp+var_390]
.text:000000000000A318                 jnz     loc_9B00
.text:000000000000A31E                 mov     edi, 12h
.text:000000000000A323                 call    is_colored
.text:000000000000A328                 test    al, al
.text:000000000000A32A                 movzx   r8d, byte ptr [rbp+var_390]
.text:000000000000A332                 jnz     loc_9B00
.text:000000000000A338                 mov     edi, 14h
.text:000000000000A33D                 call    is_colored
.text:000000000000A342                 test    al, al
.text:000000000000A344                 movzx   r8d, byte ptr [rbp+var_390]
.text:000000000000A34C                 jnz     loc_9B00
.text:000000000000A352                 jmp     loc_99E0
.text:000000000000A352 ; ---------------------------------------------------------------------------
.text:000000000000A357                 align 20h
.text:000000000000A360
.text:000000000000A360 loc_A360:                               ; CODE XREF: gobble_file_constprop_52+B0B↑j
.text:000000000000A360                 mov     edi, r14d
.text:000000000000A363                 call    getuser_0
.text:000000000000A368                 test    rax, rax
.text:000000000000A36B                 mov     rdi, rax
.text:000000000000A36E                 jz      loc_A1A1
.text:000000000000A374                 xor     esi, esi
.text:000000000000A376                 call    gnu_mbswidth
.text:000000000000A37B                 mov     edx, 0
.text:000000000000A380                 test    eax, eax
.text:000000000000A382                 cmovs   eax, edx
.text:000000000000A385                 jmp     loc_A1FC
.text:000000000000A385 ; ---------------------------------------------------------------------------
.text:000000000000A38A                 align 10h
.text:000000000000A390
.text:000000000000A390 loc_A390:                               ; CODE XREF: gobble_file_constprop_52+9F1↑j
.text:000000000000A390                 mov     rdi, [rbx+8]    ; s
.text:000000000000A394                 call    needs_quoting
.text:000000000000A399                 test    al, al
.text:000000000000A39B                 jz      loc_A087
.text:000000000000A3A1                 mov     dword ptr [rbx+0C4h], 0FFFFFFFFh
.text:000000000000A3AB                 jmp     loc_A087
.text:000000000000A3B0 ; ---------------------------------------------------------------------------
.text:000000000000A3B0
.text:000000000000A3B0 loc_A3B0:                               ; CODE XREF: gobble_file_constprop_52+8E9↑j
.text:000000000000A3B0                 mov     edx, [r8]
.text:000000000000A3B3                 lea     ecx, [rdx-16h]
.text:000000000000A3B6                 and     ecx, 0FFFFFFEFh
.text:000000000000A3B9                 jz      short loc_A3C0
.text:000000000000A3BB                 cmp     edx, 5Fh ; '_'
.text:000000000000A3BE                 jnz     short loc_A3CB
.text:000000000000A3C0
.text:000000000000A3C0 loc_A3C0:                               ; CODE XREF: gobble_file_constprop_52+D29↑j
.text:000000000000A3C0                 mov     rdx, [rbx+18h]
.text:000000000000A3C4                 mov     cs:unsupported_device_10320, rdx
.text:000000000000A3CB
.text:000000000000A3CB loc_A3CB:                               ; CODE XREF: gobble_file_constprop_52+D2E↑j
.text:000000000000A3CB                 xor     ecx, ecx
.text:000000000000A3CD                 xor     edx, edx
.text:000000000000A3CF                 jmp     loc_9F7F
.text:000000000000A3D4 ; ---------------------------------------------------------------------------
.text:000000000000A3D4
.text:000000000000A3D4 loc_A3D4:                               ; CODE XREF: gobble_file_constprop_52+311↑j
.text:000000000000A3D4                 call    ___stack_chk_fail
.text:000000000000A3D9 ; ---------------------------------------------------------------------------
.text:000000000000A3D9
.text:000000000000A3D9 loc_A3D9:                               ; CODE XREF: gobble_file_constprop_52+60↑j
.text:000000000000A3D9                                         ; gobble_file_constprop_52+69↑j
.text:000000000000A3D9                 call    xalloc_die
.text:000000000000A3DE ; ---------------------------------------------------------------------------
.text:000000000000A3DE
.text:000000000000A3DE loc_A3DE:                               ; CODE XREF: gobble_file_constprop_52+57↑j
.text:000000000000A3DE                 mov     esi, 1
.text:000000000000A3E3                 jmp     loc_96ED
.text:000000000000A3E3 ; } // starts at 9690
.text:000000000000A3E3 gobble_file_constprop_52 endp
.text:000000000000A3E3
.text:000000000000A3E3 ; ---------------------------------------------------------------------------
.text:000000000000A3E8                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A3F0
.text:000000000000A3F0 ; Attributes: info_from_lumina
.text:000000000000A3F0
.text:000000000000A3F0 ; void __fastcall print_dir(const char *name, const char *realname, _Bool command_line_arg)
.text:000000000000A3F0 print_dir       proc near               ; CODE XREF: main+D20↑p
.text:000000000000A3F0
.text:000000000000A3F0 var_378         = qword ptr -378h
.text:000000000000A3F0 var_36D         = byte ptr -36Dh
.text:000000000000A3F0 var_36C         = dword ptr -36Ch
.text:000000000000A3F0 stat_buf        = stat ptr -368h
.text:000000000000A3F0 var_2D8         = byte ptr -2D8h
.text:000000000000A3F0 var_40          = qword ptr -40h
.text:000000000000A3F0
.text:000000000000A3F0 ; __unwind {
.text:000000000000A3F0                 push    r15
.text:000000000000A3F2                 push    r14
.text:000000000000A3F4                 mov     r14, rdi
.text:000000000000A3F7                 push    r13
.text:000000000000A3F9                 push    r12
.text:000000000000A3FB                 push    rbp
.text:000000000000A3FC                 push    rbx
.text:000000000000A3FD                 mov     rbx, rsi
.text:000000000000A400                 sub     rsp, 348h
.text:000000000000A407                 mov     [rsp+378h+var_36C], edx
.text:000000000000A40B                 mov     [rsp+378h+var_36D], dl
.text:000000000000A40F                 mov     rax, fs:28h
.text:000000000000A418                 mov     [rsp+378h+var_40], rax
.text:000000000000A420                 xor     eax, eax
.text:000000000000A422                 call    ___errno_location
.text:000000000000A427                 mov     rdi, r14        ; name
.text:000000000000A42A                 mov     dword ptr [rax], 0
.text:000000000000A430                 mov     r12, rax
.text:000000000000A433                 call    _opendir
.text:000000000000A438                 test    rax, rax
.text:000000000000A43B                 jz      loc_A970
.text:000000000000A441                 cmp     cs:active_dir_set, 0
.text:000000000000A449                 mov     r13, rax
.text:000000000000A44C                 jz      loc_A5C7
.text:000000000000A452                 mov     rdi, rax        ; dirp
.text:000000000000A455                 call    _dirfd
.text:000000000000A45A                 test    eax, eax
.text:000000000000A45C                 lea     rdx, [rsp+378h+stat_buf] ; stat_buf
.text:000000000000A461                 js      short loc_A4D0
.text:000000000000A463                 mov     esi, eax        ; fildes
.text:000000000000A465                 mov     edi, 1          ; ver
.text:000000000000A46A                 call    ___fxstat
.text:000000000000A46F                 shr     eax, 1Fh
.text:000000000000A472                 test    al, al
.text:000000000000A474                 jz      short loc_A4E4
.text:000000000000A476
.text:000000000000A476 loc_A476:                               ; CODE XREF: print_dir+F2↓j
.text:000000000000A476                 lea     rsi, aCannotDetermin ; "cannot determine device and inode of %s"
.text:000000000000A47D                 mov     edx, 5          ; category
.text:000000000000A482                 xor     edi, edi        ; domainname
.text:000000000000A484                 call    _dcgettext
.text:000000000000A489                 movzx   edi, byte ptr [rsp+378h+var_36C]
.text:000000000000A48E                 mov     rdx, r14
.text:000000000000A491                 mov     rsi, rax
.text:000000000000A494                 call    file_failure
.text:000000000000A499                 mov     rdi, r13        ; dirp
.text:000000000000A49C                 call    _closedir
.text:000000000000A4A1
.text:000000000000A4A1 loc_A4A1:                               ; CODE XREF: print_dir+187↓j
.text:000000000000A4A1                                         ; print_dir+49C↓j ...
.text:000000000000A4A1                 mov     rax, [rsp+378h+var_40]
.text:000000000000A4A9                 xor     rax, fs:28h
.text:000000000000A4B2                 jnz     loc_AA9A
.text:000000000000A4B8                 add     rsp, 348h
.text:000000000000A4BF                 pop     rbx
.text:000000000000A4C0                 pop     rbp
.text:000000000000A4C1                 pop     r12
.text:000000000000A4C3                 pop     r13
.text:000000000000A4C5                 pop     r14
.text:000000000000A4C7                 pop     r15
.text:000000000000A4C9                 retn
.text:000000000000A4C9 ; ---------------------------------------------------------------------------
.text:000000000000A4CA                 align 10h
.text:000000000000A4D0
.text:000000000000A4D0 loc_A4D0:                               ; CODE XREF: print_dir+71↑j
.text:000000000000A4D0                 mov     rsi, r14        ; filename
.text:000000000000A4D3                 mov     edi, 1          ; ver
.text:000000000000A4D8                 call    ___xstat
.text:000000000000A4DD                 shr     eax, 1Fh
.text:000000000000A4E0                 test    al, al
.text:000000000000A4E2                 jnz     short loc_A476
.text:000000000000A4E4
.text:000000000000A4E4 loc_A4E4:                               ; CODE XREF: print_dir+84↑j
.text:000000000000A4E4                 mov     rdx, [rsp+378h+stat_buf.st_ino]
.text:000000000000A4E9                 mov     edi, 10h
.text:000000000000A4EE                 mov     r15, [rsp+378h+stat_buf.st_dev]
.text:000000000000A4F3                 mov     [rsp+378h+var_378], rdx
.text:000000000000A4F7                 call    xmalloc
.text:000000000000A4FC                 mov     rdx, [rsp+378h+var_378]
.text:000000000000A500                 mov     rdi, cs:active_dir_set
.text:000000000000A507                 mov     rsi, rax
.text:000000000000A50A                 mov     [rax+8], r15
.text:000000000000A50E                 mov     rbp, rax
.text:000000000000A511                 mov     [rax], rdx
.text:000000000000A514                 call    hash_insert
.text:000000000000A519                 test    rax, rax
.text:000000000000A51C                 jz      loc_AA9F
.text:000000000000A522                 cmp     rbp, rax
.text:000000000000A525                 jz      short loc_A57C
.text:000000000000A527                 mov     rdi, rbp        ; ptr
.text:000000000000A52A                 call    free
.text:000000000000A52F                 mov     rdx, r14
.text:000000000000A532                 mov     esi, 3
.text:000000000000A537                 xor     edi, edi
.text:000000000000A539                 call    quotearg_n_style_colon
.text:000000000000A53E                 lea     rsi, aSNotListingAlr ; "%s: not listing already-listed director"...
.text:000000000000A545                 mov     rbx, rax
.text:000000000000A548                 mov     edx, 5          ; category
.text:000000000000A54D                 xor     edi, edi        ; domainname
.text:000000000000A54F                 call    _dcgettext
.text:000000000000A554                 mov     rcx, rbx
.text:000000000000A557                 mov     rdx, rax        ; format
.text:000000000000A55A                 xor     esi, esi        ; errnum
.text:000000000000A55C                 xor     edi, edi        ; status
.text:000000000000A55E                 xor     eax, eax
.text:000000000000A560                 call    _error
.text:000000000000A565                 mov     rdi, r13        ; dirp
.text:000000000000A568                 call    _closedir
.text:000000000000A56D                 mov     cs:exit_status, 2
.text:000000000000A577                 jmp     loc_A4A1
.text:000000000000A57C ; ---------------------------------------------------------------------------
.text:000000000000A57C
.text:000000000000A57C loc_A57C:                               ; CODE XREF: print_dir+135↑j
.text:000000000000A57C                 mov     rax, cs:qword_2210F8
.text:000000000000A583                 mov     rdx, cs:qword_221100
.text:000000000000A58A                 mov     rbp, [rsp+378h+stat_buf.st_ino]
.text:000000000000A58F                 mov     r15, [rsp+378h+stat_buf.st_dev]
.text:000000000000A594                 sub     rdx, rax
.text:000000000000A597                 cmp     rdx, 0Fh
.text:000000000000A59B                 ja      short loc_A5B5
.text:000000000000A59D                 lea     rdi, dev_ino_obstack
.text:000000000000A5A4                 mov     esi, 10h
.text:000000000000A5A9                 call    _obstack_newchunk
.text:000000000000A5AE                 mov     rax, cs:qword_2210F8
.text:000000000000A5B5
.text:000000000000A5B5 loc_A5B5:                               ; CODE XREF: print_dir+1AB↑j
.text:000000000000A5B5                 lea     rdx, [rax+10h]
.text:000000000000A5B9                 mov     cs:qword_2210F8, rdx
.text:000000000000A5C0                 mov     [rax+8], r15
.text:000000000000A5C4                 mov     [rax], rbp
.text:000000000000A5C7
.text:000000000000A5C7 loc_A5C7:                               ; CODE XREF: print_dir+5C↑j
.text:000000000000A5C7                 call    clear_files
.text:000000000000A5CC                 cmp     cs:recursive, 0
.text:000000000000A5D3                 jnz     loc_A680
.text:000000000000A5D9                 cmp     cs:print_dir_name, 0
.text:000000000000A5E0                 jnz     loc_A680
.text:000000000000A5E6
.text:000000000000A5E6 loc_A5E6:                               ; CODE XREF: print_dir+342↓j
.text:000000000000A5E6                 mov     [rsp+378h+var_378], 0
.text:000000000000A5EE                 xchg    ax, ax
.text:000000000000A5F0
.text:000000000000A5F0 loc_A5F0:                               ; CODE XREF: print_dir+285↓j
.text:000000000000A5F0                 mov     dword ptr [r12], 0
.text:000000000000A5F8                 mov     rdi, r13        ; dirp
.text:000000000000A5FB                 call    _readdir
.text:000000000000A600                 test    rax, rax
.text:000000000000A603                 mov     rbp, rax
.text:000000000000A606                 jz      loc_A740
.text:000000000000A60C                 lea     rbx, [rax+13h]
.text:000000000000A610                 mov     eax, cs:ignore_mode
.text:000000000000A616                 cmp     eax, 2
.text:000000000000A619                 jz      loc_A8C0
.text:000000000000A61F                 cmp     byte ptr [rbp+13h], 2Eh ; '.'
.text:000000000000A623                 jz      loc_A8A0
.text:000000000000A629                 test    eax, eax
.text:000000000000A62B                 jnz     loc_A8C0
.text:000000000000A631                 mov     r15, cs:hide_patterns
.text:000000000000A638                 test    r15, r15
.text:000000000000A63B                 jnz     short loc_A655
.text:000000000000A63D                 jmp     loc_A8C0
.text:000000000000A63D ; ---------------------------------------------------------------------------
.text:000000000000A642                 align 8
.text:000000000000A648
.text:000000000000A648 loc_A648:                               ; CODE XREF: print_dir+277↓j
.text:000000000000A648                 mov     r15, [r15+8]
.text:000000000000A64C                 test    r15, r15
.text:000000000000A64F                 jz      loc_A8C0
.text:000000000000A655
.text:000000000000A655 loc_A655:                               ; CODE XREF: print_dir+24B↑j
.text:000000000000A655                 mov     rdi, [r15]      ; pattern
.text:000000000000A658                 mov     edx, 4          ; flags
.text:000000000000A65D                 mov     rsi, rbx        ; name
.text:000000000000A660                 call    _fnmatch
.text:000000000000A665                 test    eax, eax
.text:000000000000A667                 jnz     short loc_A648
.text:000000000000A669                 nop     dword ptr [rax+00000000h]
.text:000000000000A670
.text:000000000000A670 loc_A670:                               ; CODE XREF: print_dir+380↓j
.text:000000000000A670                                         ; print_dir+4B2↓j ...
.text:000000000000A670                 call    process_signals
.text:000000000000A675                 jmp     loc_A5F0
.text:000000000000A675 ; ---------------------------------------------------------------------------
.text:000000000000A67A                 align 20h
.text:000000000000A680
.text:000000000000A680 loc_A680:                               ; CODE XREF: print_dir+1E3↑j
.text:000000000000A680                                         ; print_dir+1F0↑j
.text:000000000000A680                 cmp     cs:first_10256, 0
.text:000000000000A687                 jnz     short loc_A6B1
.text:000000000000A689                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000A690                 mov     rax, [rdi+28h]
.text:000000000000A694                 cmp     rax, [rdi+30h]
.text:000000000000A698                 jnb     loc_AA8B
.text:000000000000A69E                 lea     rdx, [rax+1]
.text:000000000000A6A2                 mov     [rdi+28h], rdx
.text:000000000000A6A6                 mov     byte ptr [rax], 0Ah
.text:000000000000A6A9
.text:000000000000A6A9 loc_A6A9:                               ; CODE XREF: print_dir+6A5↓j
.text:000000000000A6A9                 add     cs:dired_pos, 1
.text:000000000000A6B1
.text:000000000000A6B1 loc_A6B1:                               ; CODE XREF: print_dir+297↑j
.text:000000000000A6B1                 cmp     cs:dired, 0
.text:000000000000A6B8                 mov     cs:first_10256, 0
.text:000000000000A6BF                 jnz     loc_AA43
.text:000000000000A6C5
.text:000000000000A6C5 loc_A6C5:                               ; CODE XREF: print_dir+678↓j
.text:000000000000A6C5                 xor     ebp, ebp
.text:000000000000A6C7                 cmp     cs:print_hyperlink, 0
.text:000000000000A6CE                 jnz     loc_AA02
.text:000000000000A6D4
.text:000000000000A6D4 loc_A6D4:                               ; CODE XREF: print_dir+625↓j
.text:000000000000A6D4                                         ; print_dir+64E↓j
.text:000000000000A6D4                 test    rbx, rbx
.text:000000000000A6D7                 mov     rsi, cs:dirname_quoting_options
.text:000000000000A6DE                 lea     r9, subdired_obstack
.text:000000000000A6E5                 cmovz   rbx, r14
.text:000000000000A6E9                 sub     rsp, 8
.text:000000000000A6ED                 mov     r8d, 1
.text:000000000000A6F3                 push    rbp
.text:000000000000A6F4                 xor     ecx, ecx
.text:000000000000A6F6                 mov     edx, 0FFFFFFFFh
.text:000000000000A6FB                 mov     rdi, rbx
.text:000000000000A6FE                 call    quote_name
.text:000000000000A703                 mov     rdi, rbp        ; ptr
.text:000000000000A706                 call    free
.text:000000000000A70B                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000A712                 lea     rdi, aValidArguments+13h ; ptr
.text:000000000000A719                 mov     esi, 1          ; size
.text:000000000000A71E                 mov     edx, 2          ; n
.text:000000000000A723                 call    _fwrite_unlocked
.text:000000000000A728                 pop     rcx
.text:000000000000A729                 add     cs:dired_pos, 2
.text:000000000000A731                 pop     rsi
.text:000000000000A732                 jmp     loc_A5E6
.text:000000000000A732 ; ---------------------------------------------------------------------------
.text:000000000000A737                 align 20h
.text:000000000000A740
.text:000000000000A740 loc_A740:                               ; CODE XREF: print_dir+216↑j
.text:000000000000A740                 mov     edx, [r12]
.text:000000000000A744                 test    edx, edx
.text:000000000000A746                 jz      short loc_A776
.text:000000000000A748                 lea     rsi, aReadingDirecto ; "reading directory %s"
.text:000000000000A74F                 xor     edi, edi        ; domainname
.text:000000000000A751                 mov     edx, 5          ; category
.text:000000000000A756                 call    _dcgettext
.text:000000000000A75B                 movzx   edi, [rsp+378h+var_36D]
.text:000000000000A760                 mov     rdx, r14
.text:000000000000A763                 mov     rsi, rax
.text:000000000000A766                 call    file_failure
.text:000000000000A76B                 cmp     dword ptr [r12], 4Bh ; 'K'
.text:000000000000A770                 jz      loc_A670
.text:000000000000A776
.text:000000000000A776 loc_A776:                               ; CODE XREF: print_dir+356↑j
.text:000000000000A776                 mov     rdi, r13        ; dirp
.text:000000000000A779                 call    _closedir
.text:000000000000A77E                 test    eax, eax
.text:000000000000A780                 jnz     loc_A9B0
.text:000000000000A786
.text:000000000000A786 loc_A786:                               ; CODE XREF: print_dir+5E3↓j
.text:000000000000A786                 call    sort_files
.text:000000000000A78B                 cmp     cs:recursive, 0
.text:000000000000A792                 jnz     loc_A998
.text:000000000000A798
.text:000000000000A798 loc_A798:                               ; CODE XREF: print_dir+5B2↓j
.text:000000000000A798                 mov     eax, cs:format
.text:000000000000A79E                 test    eax, eax
.text:000000000000A7A0                 jz      short loc_A7AF
.text:000000000000A7A2                 cmp     cs:print_block_size, 0
.text:000000000000A7A9                 jz      loc_A884
.text:000000000000A7AF
.text:000000000000A7AF loc_A7AF:                               ; CODE XREF: print_dir+3B0↑j
.text:000000000000A7AF                 cmp     cs:dired, 0
.text:000000000000A7B6                 jnz     loc_A9D8
.text:000000000000A7BC
.text:000000000000A7BC loc_A7BC:                               ; CODE XREF: print_dir+60D↓j
.text:000000000000A7BC                 lea     rsi, aTotal     ; "total"
.text:000000000000A7C3                 mov     edx, 5          ; category
.text:000000000000A7C8                 xor     edi, edi        ; domainname
.text:000000000000A7CA                 call    _dcgettext
.text:000000000000A7CF                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000A7D6                 mov     rbx, rax
.text:000000000000A7D9                 mov     rdi, rax        ; s
.text:000000000000A7DC                 call    _fputs_unlocked
.text:000000000000A7E1                 mov     rdi, rbx        ; s
.text:000000000000A7E4                 call    _strlen
.text:000000000000A7E9                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000A7F0                 add     cs:dired_pos, rax
.text:000000000000A7F7                 mov     rax, [rdi+28h]
.text:000000000000A7FB                 cmp     rax, [rdi+30h]
.text:000000000000A7FF                 jnb     loc_AA6D
.text:000000000000A805                 lea     rdx, [rax+1]
.text:000000000000A809                 mov     [rdi+28h], rdx
.text:000000000000A80D                 mov     byte ptr [rax], 20h ; ' '
.text:000000000000A810
.text:000000000000A810 loc_A810:                               ; CODE XREF: print_dir+687↓j
.text:000000000000A810                 mov     r8, cs:output_block_size
.text:000000000000A817                 mov     edx, cs:human_output_opts
.text:000000000000A81D                 lea     rsi, [rsp+378h+var_2D8]
.text:000000000000A825                 mov     rdi, [rsp+378h+var_378]
.text:000000000000A829                 mov     ecx, 200h
.text:000000000000A82E                 add     cs:dired_pos, 1
.text:000000000000A836                 call    human_readable
.text:000000000000A83B                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000A842                 mov     rbx, rax
.text:000000000000A845                 mov     rdi, rax        ; s
.text:000000000000A848                 call    _fputs_unlocked
.text:000000000000A84D                 mov     rdi, rbx        ; s
.text:000000000000A850                 call    _strlen
.text:000000000000A855                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000A85C                 add     cs:dired_pos, rax
.text:000000000000A863                 mov     rax, [rdi+28h]
.text:000000000000A867                 cmp     rax, [rdi+30h]
.text:000000000000A86B                 jnb     loc_AA7C
.text:000000000000A871                 lea     rdx, [rax+1]
.text:000000000000A875                 mov     [rdi+28h], rdx
.text:000000000000A879                 mov     byte ptr [rax], 0Ah
.text:000000000000A87C
.text:000000000000A87C loc_A87C:                               ; CODE XREF: print_dir+696↓j
.text:000000000000A87C                 add     cs:dired_pos, 1
.text:000000000000A884
.text:000000000000A884 loc_A884:                               ; CODE XREF: print_dir+3B9↑j
.text:000000000000A884                 cmp     cs:cwd_n_used, 0
.text:000000000000A88C                 jz      loc_A4A1
.text:000000000000A892                 call    print_current_files
.text:000000000000A897                 jmp     loc_A4A1
.text:000000000000A897 ; ---------------------------------------------------------------------------
.text:000000000000A89C                 align 20h
.text:000000000000A8A0
.text:000000000000A8A0 loc_A8A0:                               ; CODE XREF: print_dir+233↑j
.text:000000000000A8A0                 test    eax, eax
.text:000000000000A8A2                 jz      loc_A670
.text:000000000000A8A8                 xor     eax, eax
.text:000000000000A8AA                 cmp     byte ptr [rbp+14h], 2Eh ; '.'
.text:000000000000A8AE                 setz    al
.text:000000000000A8B1                 cmp     byte ptr [rbp+rax+14h], 0
.text:000000000000A8B6                 jz      loc_A670
.text:000000000000A8BC                 nop     dword ptr [rax+00h]
.text:000000000000A8C0
.text:000000000000A8C0 loc_A8C0:                               ; CODE XREF: print_dir+229↑j
.text:000000000000A8C0                                         ; print_dir+23B↑j ...
.text:000000000000A8C0                 mov     r15, cs:ignore_patterns
.text:000000000000A8C7                 test    r15, r15
.text:000000000000A8CA                 jnz     short loc_A8D9
.text:000000000000A8CC                 jmp     short loc_A8F8
.text:000000000000A8CC ; ---------------------------------------------------------------------------
.text:000000000000A8CE                 align 10h
.text:000000000000A8D0
.text:000000000000A8D0 loc_A8D0:                               ; CODE XREF: print_dir+4FB↓j
.text:000000000000A8D0                 mov     r15, [r15+8]
.text:000000000000A8D4                 test    r15, r15
.text:000000000000A8D7                 jz      short loc_A8F8
.text:000000000000A8D9
.text:000000000000A8D9 loc_A8D9:                               ; CODE XREF: print_dir+4DA↑j
.text:000000000000A8D9                 mov     rdi, [r15]      ; pattern
.text:000000000000A8DC                 mov     edx, 4          ; flags
.text:000000000000A8E1                 mov     rsi, rbx        ; name
.text:000000000000A8E4                 call    _fnmatch
.text:000000000000A8E9                 test    eax, eax
.text:000000000000A8EB                 jnz     short loc_A8D0
.text:000000000000A8ED                 jmp     loc_A670
.text:000000000000A8ED ; ---------------------------------------------------------------------------
.text:000000000000A8F2                 align 8
.text:000000000000A8F8
.text:000000000000A8F8 loc_A8F8:                               ; CODE XREF: print_dir+4DC↑j
.text:000000000000A8F8                                         ; print_dir+4E7↑j
.text:000000000000A8F8                 movzx   eax, byte ptr [rbp+12h]
.text:000000000000A8FC                 xor     esi, esi
.text:000000000000A8FE                 sub     eax, 1
.text:000000000000A901                 cmp     al, 0Dh
.text:000000000000A903                 ja      short loc_A912
.text:000000000000A905                 lea     rcx, CSWTCH_920
.text:000000000000A90C                 movzx   eax, al
.text:000000000000A90F                 mov     esi, [rcx+rax*4]
.text:000000000000A912
.text:000000000000A912 loc_A912:                               ; CODE XREF: print_dir+513↑j
.text:000000000000A912                 xor     edx, edx
.text:000000000000A914                 mov     rcx, r14
.text:000000000000A917                 mov     rdi, rbx
.text:000000000000A91A                 call    gobble_file_constprop_52
.text:000000000000A91F                 add     [rsp+378h+var_378], rax
.text:000000000000A923                 cmp     cs:format, 1
.text:000000000000A92A                 jnz     loc_A670
.text:000000000000A930                 cmp     cs:sort_type, 0FFFFFFFFh
.text:000000000000A937                 jnz     loc_A670
.text:000000000000A93D                 cmp     cs:print_block_size, 0
.text:000000000000A944                 jnz     loc_A670
.text:000000000000A94A                 cmp     cs:recursive, 0
.text:000000000000A951                 jnz     loc_A670
.text:000000000000A957                 call    sort_files
.text:000000000000A95C                 call    print_current_files
.text:000000000000A961                 call    clear_files
.text:000000000000A966                 jmp     loc_A670
.text:000000000000A966 ; ---------------------------------------------------------------------------
.text:000000000000A96B                 align 10h
.text:000000000000A970
.text:000000000000A970 loc_A970:                               ; CODE XREF: print_dir+4B↑j
.text:000000000000A970                 lea     rsi, aCannotOpenDire ; "cannot open directory %s"
.text:000000000000A977                 xor     edi, edi        ; domainname
.text:000000000000A979                 mov     edx, 5          ; category
.text:000000000000A97E                 call    _dcgettext
.text:000000000000A983                 movzx   edi, byte ptr [rsp+378h+var_36C]
.text:000000000000A988                 mov     rdx, r14
.text:000000000000A98B                 mov     rsi, rax
.text:000000000000A98E                 call    file_failure
.text:000000000000A993                 jmp     loc_A4A1
.text:000000000000A998 ; ---------------------------------------------------------------------------
.text:000000000000A998
.text:000000000000A998 loc_A998:                               ; CODE XREF: print_dir+3A2↑j
.text:000000000000A998                 xor     esi, esi
.text:000000000000A99A                 mov     rdi, r14        ; void *
.text:000000000000A99D                 call    extract_dirs_from_files
.text:000000000000A9A2                 jmp     loc_A798
.text:000000000000A9A2 ; ---------------------------------------------------------------------------
.text:000000000000A9A7                 align 10h
.text:000000000000A9B0
.text:000000000000A9B0 loc_A9B0:                               ; CODE XREF: print_dir+390↑j
.text:000000000000A9B0                 lea     rsi, aClosingDirecto ; "closing directory %s"
.text:000000000000A9B7                 xor     edi, edi        ; domainname
.text:000000000000A9B9                 mov     edx, 5          ; category
.text:000000000000A9BE                 call    _dcgettext
.text:000000000000A9C3                 movzx   edi, byte ptr [rsp+378h+var_36C]
.text:000000000000A9C8                 mov     rdx, r14
.text:000000000000A9CB                 mov     rsi, rax
.text:000000000000A9CE                 call    file_failure
.text:000000000000A9D3                 jmp     loc_A786
.text:000000000000A9D8 ; ---------------------------------------------------------------------------
.text:000000000000A9D8
.text:000000000000A9D8 loc_A9D8:                               ; CODE XREF: print_dir+3C6↑j
.text:000000000000A9D8                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000A9DF                 lea     rdi, asc_178BC  ; "  "
.text:000000000000A9E6                 mov     edx, 2          ; n
.text:000000000000A9EB                 mov     esi, 1          ; size
.text:000000000000A9F0                 call    _fwrite_unlocked
.text:000000000000A9F5                 add     cs:dired_pos, 2
.text:000000000000A9FD                 jmp     loc_A7BC
.text:000000000000AA02 ; ---------------------------------------------------------------------------
.text:000000000000AA02
.text:000000000000AA02 loc_AA02:                               ; CODE XREF: print_dir+2DE↑j
.text:000000000000AA02                 mov     esi, 2
.text:000000000000AA07                 mov     rdi, r14        ; src
.text:000000000000AA0A                 call    canonicalize_filename_mode
.text:000000000000AA0F                 test    rax, rax
.text:000000000000AA12                 mov     rbp, rax
.text:000000000000AA15                 jnz     loc_A6D4
.text:000000000000AA1B                 lea     rsi, aErrorCanonical ; "error canonicalizing %s"
.text:000000000000AA22                 xor     edi, edi        ; domainname
.text:000000000000AA24                 mov     edx, 5          ; category
.text:000000000000AA29                 call    _dcgettext
.text:000000000000AA2E                 movzx   edi, byte ptr [rsp+378h+var_36C]
.text:000000000000AA33                 mov     rdx, r14
.text:000000000000AA36                 mov     rsi, rax
.text:000000000000AA39                 call    file_failure
.text:000000000000AA3E                 jmp     loc_A6D4
.text:000000000000AA43 ; ---------------------------------------------------------------------------
.text:000000000000AA43
.text:000000000000AA43 loc_AA43:                               ; CODE XREF: print_dir+2CF↑j
.text:000000000000AA43                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000AA4A                 lea     rdi, asc_178BC  ; "  "
.text:000000000000AA51                 mov     edx, 2          ; n
.text:000000000000AA56                 mov     esi, 1          ; size
.text:000000000000AA5B                 call    _fwrite_unlocked
.text:000000000000AA60                 add     cs:dired_pos, 2
.text:000000000000AA68                 jmp     loc_A6C5
.text:000000000000AA6D ; ---------------------------------------------------------------------------
.text:000000000000AA6D
.text:000000000000AA6D loc_AA6D:                               ; CODE XREF: print_dir+40F↑j
.text:000000000000AA6D                 mov     esi, 20h ; ' '  ; int
.text:000000000000AA72                 call    ___overflow
.text:000000000000AA77                 jmp     loc_A810
.text:000000000000AA7C ; ---------------------------------------------------------------------------
.text:000000000000AA7C
.text:000000000000AA7C loc_AA7C:                               ; CODE XREF: print_dir+47B↑j
.text:000000000000AA7C                 mov     esi, 0Ah        ; int
.text:000000000000AA81                 call    ___overflow
.text:000000000000AA86                 jmp     loc_A87C
.text:000000000000AA8B ; ---------------------------------------------------------------------------
.text:000000000000AA8B
.text:000000000000AA8B loc_AA8B:                               ; CODE XREF: print_dir+2A8↑j
.text:000000000000AA8B                 mov     esi, 0Ah        ; int
.text:000000000000AA90                 call    ___overflow
.text:000000000000AA95                 jmp     loc_A6A9
.text:000000000000AA9A ; ---------------------------------------------------------------------------
.text:000000000000AA9A
.text:000000000000AA9A loc_AA9A:                               ; CODE XREF: print_dir+C2↑j
.text:000000000000AA9A                 call    ___stack_chk_fail
.text:000000000000AA9F ; ---------------------------------------------------------------------------
.text:000000000000AA9F
.text:000000000000AA9F loc_AA9F:                               ; CODE XREF: print_dir+12C↑j
.text:000000000000AA9F                 call    xalloc_die
.text:000000000000AA9F ; } // starts at A3F0
.text:000000000000AA9F print_dir       endp
.text:000000000000AA9F
.text:000000000000AA9F ; ---------------------------------------------------------------------------
.text:000000000000AAA4                 align 10h
.text:000000000000AAB0
.text:000000000000AAB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AAB0
.text:000000000000AAB0 ; Attributes: info_from_lumina
.text:000000000000AAB0
.text:000000000000AAB0 ; int __fastcall xstrcoll_ctime(V a, V b)
.text:000000000000AAB0 xstrcoll_ctime  proc near               ; DATA XREF: .data.rel.ro:000000000021F1A0↓o
.text:000000000000AAB0 ; __unwind {
.text:000000000000AAB0                 mov     rax, [rsi+80h]
.text:000000000000AAB7                 cmp     [rdi+80h], rax
.text:000000000000AABE                 jg      short loc_AAF0
.text:000000000000AAC0                 jl      short loc_AAE0
.text:000000000000AAC2                 mov     rax, [rsi+88h]
.text:000000000000AAC9                 sub     eax, [rdi+88h]
.text:000000000000AACF                 jnz     short locret_AAE5
.text:000000000000AAD1                 mov     rsi, [rsi]      ; s2
.text:000000000000AAD4                 mov     rdi, [rdi]      ; s1
.text:000000000000AAD7                 jmp     xstrcoll
.text:000000000000AAD7 ; ---------------------------------------------------------------------------
.text:000000000000AADC                 align 20h
.text:000000000000AAE0
.text:000000000000AAE0 loc_AAE0:                               ; CODE XREF: xstrcoll_ctime+10↑j
.text:000000000000AAE0                 mov     eax, 1
.text:000000000000AAE5
.text:000000000000AAE5 locret_AAE5:                            ; CODE XREF: xstrcoll_ctime+1F↑j
.text:000000000000AAE5                 rep retn
.text:000000000000AAE5 ; ---------------------------------------------------------------------------
.text:000000000000AAE7                 align 10h
.text:000000000000AAF0
.text:000000000000AAF0 loc_AAF0:                               ; CODE XREF: xstrcoll_ctime+E↑j
.text:000000000000AAF0                 mov     eax, 0FFFFFFFFh
.text:000000000000AAF5                 retn
.text:000000000000AAF5 ; } // starts at AAB0
.text:000000000000AAF5 xstrcoll_ctime  endp
.text:000000000000AAF5
.text:000000000000AAF5 ; ---------------------------------------------------------------------------
.text:000000000000AAF6                 align 20h
.text:000000000000AB00
.text:000000000000AB00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB00
.text:000000000000AB00 ; Attributes: info_from_lumina
.text:000000000000AB00
.text:000000000000AB00 ; int __fastcall xstrcoll_atime(V a, V b)
.text:000000000000AB00 xstrcoll_atime  proc near               ; DATA XREF: .data.rel.ro:000000000021F1E0↓o
.text:000000000000AB00 ; __unwind {
.text:000000000000AB00                 mov     rax, [rsi+60h]
.text:000000000000AB04                 cmp     [rdi+60h], rax
.text:000000000000AB08                 jg      short loc_AB30
.text:000000000000AB0A                 jl      short loc_AB20
.text:000000000000AB0C                 mov     rax, [rsi+68h]
.text:000000000000AB10                 sub     eax, [rdi+68h]
.text:000000000000AB13                 jnz     short locret_AB25
.text:000000000000AB15                 mov     rsi, [rsi]      ; s2
.text:000000000000AB18                 mov     rdi, [rdi]      ; s1
.text:000000000000AB1B                 jmp     xstrcoll
.text:000000000000AB20 ; ---------------------------------------------------------------------------
.text:000000000000AB20
.text:000000000000AB20 loc_AB20:                               ; CODE XREF: xstrcoll_atime+A↑j
.text:000000000000AB20                 mov     eax, 1
.text:000000000000AB25
.text:000000000000AB25 locret_AB25:                            ; CODE XREF: xstrcoll_atime+13↑j
.text:000000000000AB25                 rep retn
.text:000000000000AB25 ; ---------------------------------------------------------------------------
.text:000000000000AB27                 align 10h
.text:000000000000AB30
.text:000000000000AB30 loc_AB30:                               ; CODE XREF: xstrcoll_atime+8↑j
.text:000000000000AB30                 mov     eax, 0FFFFFFFFh
.text:000000000000AB35                 retn
.text:000000000000AB35 ; } // starts at AB00
.text:000000000000AB35 xstrcoll_atime  endp
.text:000000000000AB35
.text:000000000000AB35 ; ---------------------------------------------------------------------------
.text:000000000000AB36                 align 20h
.text:000000000000AB40
.text:000000000000AB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB40
.text:000000000000AB40 ; Attributes: info_from_lumina
.text:000000000000AB40
.text:000000000000AB40 ; int __fastcall xstrcoll_mtime(V a, V b)
.text:000000000000AB40 xstrcoll_mtime  proc near               ; DATA XREF: .data.rel.ro:000000000021F160↓o
.text:000000000000AB40 ; __unwind {
.text:000000000000AB40                 mov     rax, [rsi+70h]
.text:000000000000AB44                 cmp     [rdi+70h], rax
.text:000000000000AB48                 jg      short loc_AB70
.text:000000000000AB4A                 jl      short loc_AB60
.text:000000000000AB4C                 mov     rax, [rsi+78h]
.text:000000000000AB50                 sub     eax, [rdi+78h]
.text:000000000000AB53                 jnz     short locret_AB65
.text:000000000000AB55                 mov     rsi, [rsi]      ; s2
.text:000000000000AB58                 mov     rdi, [rdi]      ; s1
.text:000000000000AB5B                 jmp     xstrcoll
.text:000000000000AB60 ; ---------------------------------------------------------------------------
.text:000000000000AB60
.text:000000000000AB60 loc_AB60:                               ; CODE XREF: xstrcoll_mtime+A↑j
.text:000000000000AB60                 mov     eax, 1
.text:000000000000AB65
.text:000000000000AB65 locret_AB65:                            ; CODE XREF: xstrcoll_mtime+13↑j
.text:000000000000AB65                 rep retn
.text:000000000000AB65 ; ---------------------------------------------------------------------------
.text:000000000000AB67                 align 10h
.text:000000000000AB70
.text:000000000000AB70 loc_AB70:                               ; CODE XREF: xstrcoll_mtime+8↑j
.text:000000000000AB70                 mov     eax, 0FFFFFFFFh
.text:000000000000AB75                 retn
.text:000000000000AB75 ; } // starts at AB40
.text:000000000000AB75 xstrcoll_mtime  endp
.text:000000000000AB75
.text:000000000000AB75 ; ---------------------------------------------------------------------------
.text:000000000000AB76                 align 20h
.text:000000000000AB80
.text:000000000000AB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB80
.text:000000000000AB80 ; Attributes: info_from_lumina
.text:000000000000AB80
.text:000000000000AB80 ; int __fastcall rev_xstrcoll_mtime(V a, V b)
.text:000000000000AB80 rev_xstrcoll_mtime proc near            ; DATA XREF: .data.rel.ro:000000000021F170↓o
.text:000000000000AB80 ; __unwind {
.text:000000000000AB80                 mov     rax, [rdi+70h]
.text:000000000000AB84                 cmp     [rsi+70h], rax
.text:000000000000AB88                 mov     rdx, rsi
.text:000000000000AB8B                 jg      short loc_ABB0
.text:000000000000AB8D                 jl      short loc_ABA8
.text:000000000000AB8F                 mov     rax, [rdi+78h]
.text:000000000000AB93                 sub     eax, [rsi+78h]
.text:000000000000AB96                 jnz     short locret_ABAD
.text:000000000000AB98                 mov     rsi, [rdi]      ; s2
.text:000000000000AB9B                 mov     rdi, [rdx]      ; s1
.text:000000000000AB9E                 jmp     xstrcoll
.text:000000000000AB9E ; ---------------------------------------------------------------------------
.text:000000000000ABA3                 align 8
.text:000000000000ABA8
.text:000000000000ABA8 loc_ABA8:                               ; CODE XREF: rev_xstrcoll_mtime+D↑j
.text:000000000000ABA8                 mov     eax, 1
.text:000000000000ABAD
.text:000000000000ABAD locret_ABAD:                            ; CODE XREF: rev_xstrcoll_mtime+16↑j
.text:000000000000ABAD                 rep retn
.text:000000000000ABAD ; ---------------------------------------------------------------------------
.text:000000000000ABAF                 align 10h
.text:000000000000ABB0
.text:000000000000ABB0 loc_ABB0:                               ; CODE XREF: rev_xstrcoll_mtime+B↑j
.text:000000000000ABB0                 mov     eax, 0FFFFFFFFh
.text:000000000000ABB5                 retn
.text:000000000000ABB5 ; } // starts at AB80
.text:000000000000ABB5 rev_xstrcoll_mtime endp
.text:000000000000ABB5
.text:000000000000ABB5 ; ---------------------------------------------------------------------------
.text:000000000000ABB6                 align 20h
.text:000000000000ABC0
.text:000000000000ABC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABC0
.text:000000000000ABC0 ; Attributes: info_from_lumina
.text:000000000000ABC0
.text:000000000000ABC0 ; int __fastcall rev_xstrcoll_atime(V a, V b)
.text:000000000000ABC0 rev_xstrcoll_atime proc near            ; DATA XREF: .data.rel.ro:000000000021F1F0↓o
.text:000000000000ABC0 ; __unwind {
.text:000000000000ABC0                 mov     rax, [rdi+60h]
.text:000000000000ABC4                 cmp     [rsi+60h], rax
.text:000000000000ABC8                 mov     rdx, rsi
.text:000000000000ABCB                 jg      short loc_ABF0
.text:000000000000ABCD                 jl      short loc_ABE8
.text:000000000000ABCF                 mov     rax, [rdi+68h]
.text:000000000000ABD3                 sub     eax, [rsi+68h]
.text:000000000000ABD6                 jnz     short locret_ABED
.text:000000000000ABD8                 mov     rsi, [rdi]      ; s2
.text:000000000000ABDB                 mov     rdi, [rdx]      ; s1
.text:000000000000ABDE                 jmp     xstrcoll
.text:000000000000ABDE ; ---------------------------------------------------------------------------
.text:000000000000ABE3                 align 8
.text:000000000000ABE8
.text:000000000000ABE8 loc_ABE8:                               ; CODE XREF: rev_xstrcoll_atime+D↑j
.text:000000000000ABE8                 mov     eax, 1
.text:000000000000ABED
.text:000000000000ABED locret_ABED:                            ; CODE XREF: rev_xstrcoll_atime+16↑j
.text:000000000000ABED                 rep retn
.text:000000000000ABED ; ---------------------------------------------------------------------------
.text:000000000000ABEF                 align 10h
.text:000000000000ABF0
.text:000000000000ABF0 loc_ABF0:                               ; CODE XREF: rev_xstrcoll_atime+B↑j
.text:000000000000ABF0                 mov     eax, 0FFFFFFFFh
.text:000000000000ABF5                 retn
.text:000000000000ABF5 ; } // starts at ABC0
.text:000000000000ABF5 rev_xstrcoll_atime endp
.text:000000000000ABF5
.text:000000000000ABF5 ; ---------------------------------------------------------------------------
.text:000000000000ABF6                 align 20h
.text:000000000000AC00
.text:000000000000AC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC00
.text:000000000000AC00 ; Attributes: info_from_lumina
.text:000000000000AC00
.text:000000000000AC00 ; int __fastcall rev_xstrcoll_ctime(V a, V b)
.text:000000000000AC00 rev_xstrcoll_ctime proc near            ; DATA XREF: .data.rel.ro:000000000021F1B0↓o
.text:000000000000AC00 ; __unwind {
.text:000000000000AC00                 mov     rax, [rdi+80h]
.text:000000000000AC07                 cmp     [rsi+80h], rax
.text:000000000000AC0E                 mov     rdx, rsi
.text:000000000000AC11                 jg      short loc_AC40
.text:000000000000AC13                 jl      short loc_AC30
.text:000000000000AC15                 mov     rax, [rdi+88h]
.text:000000000000AC1C                 sub     eax, [rsi+88h]
.text:000000000000AC22                 jnz     short locret_AC35
.text:000000000000AC24                 mov     rsi, [rdi]      ; s2
.text:000000000000AC27                 mov     rdi, [rdx]      ; s1
.text:000000000000AC2A                 jmp     xstrcoll
.text:000000000000AC2A ; ---------------------------------------------------------------------------
.text:000000000000AC2F                 align 10h
.text:000000000000AC30
.text:000000000000AC30 loc_AC30:                               ; CODE XREF: rev_xstrcoll_ctime+13↑j
.text:000000000000AC30                 mov     eax, 1
.text:000000000000AC35
.text:000000000000AC35 locret_AC35:                            ; CODE XREF: rev_xstrcoll_ctime+22↑j
.text:000000000000AC35                 rep retn
.text:000000000000AC35 ; ---------------------------------------------------------------------------
.text:000000000000AC37                 align 20h
.text:000000000000AC40
.text:000000000000AC40 loc_AC40:                               ; CODE XREF: rev_xstrcoll_ctime+11↑j
.text:000000000000AC40                 mov     eax, 0FFFFFFFFh
.text:000000000000AC45                 retn
.text:000000000000AC45 ; } // starts at AC00
.text:000000000000AC45 rev_xstrcoll_ctime endp
.text:000000000000AC45
.text:000000000000AC45 ; ---------------------------------------------------------------------------
.text:000000000000AC46                 align 10h
.text:000000000000AC50
.text:000000000000AC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AC50
.text:000000000000AC50 ; Attributes: info_from_lumina
.text:000000000000AC50
.text:000000000000AC50 ; int __fastcall xstrcoll_extension(V a, V b)
.text:000000000000AC50 xstrcoll_extension proc near            ; DATA XREF: .data.rel.ro:000000000021F0A0↓o
.text:000000000000AC50 ; __unwind {
.text:000000000000AC50                 push    r12
.text:000000000000AC52                 push    rbp
.text:000000000000AC53                 mov     rbp, rdi
.text:000000000000AC56                 push    rbx
.text:000000000000AC57                 mov     rdi, [rdi]      ; s
.text:000000000000AC5A                 mov     r12, rsi
.text:000000000000AC5D                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000AC62                 call    _strrchr
.text:000000000000AC67                 mov     rdi, [r12]      ; s
.text:000000000000AC6B                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000AC70                 mov     rbx, rax
.text:000000000000AC73                 call    _strrchr
.text:000000000000AC78                 lea     rdx, a8+6       ; ""
.text:000000000000AC7F                 test    rax, rax
.text:000000000000AC82                 cmovz   rax, rdx
.text:000000000000AC86                 test    rbx, rbx
.text:000000000000AC89                 cmovz   rbx, rdx
.text:000000000000AC8D                 mov     rsi, rax        ; s2
.text:000000000000AC90                 mov     rdi, rbx        ; s1
.text:000000000000AC93                 call    xstrcoll
.text:000000000000AC98                 test    eax, eax
.text:000000000000AC9A                 jnz     short loc_ACB0
.text:000000000000AC9C                 pop     rbx
.text:000000000000AC9D                 mov     rsi, [r12]      ; s2
.text:000000000000ACA1                 mov     rdi, [rbp+0]    ; s1
.text:000000000000ACA5                 pop     rbp
.text:000000000000ACA6                 pop     r12
.text:000000000000ACA8                 jmp     xstrcoll
.text:000000000000ACA8 ; ---------------------------------------------------------------------------
.text:000000000000ACAD                 align 10h
.text:000000000000ACB0
.text:000000000000ACB0 loc_ACB0:                               ; CODE XREF: xstrcoll_extension+4A↑j
.text:000000000000ACB0                 pop     rbx
.text:000000000000ACB1                 pop     rbp
.text:000000000000ACB2                 pop     r12
.text:000000000000ACB4                 retn
.text:000000000000ACB4 ; } // starts at AC50
.text:000000000000ACB4 xstrcoll_extension endp
.text:000000000000ACB4
.text:000000000000ACB4 ; ---------------------------------------------------------------------------
.text:000000000000ACB5                 align 20h
.text:000000000000ACC0
.text:000000000000ACC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACC0
.text:000000000000ACC0 ; Attributes: info_from_lumina
.text:000000000000ACC0
.text:000000000000ACC0 ; int __fastcall rev_xstrcoll_extension(V a, V b)
.text:000000000000ACC0 rev_xstrcoll_extension proc near        ; DATA XREF: .data.rel.ro:000000000021F0B0↓o
.text:000000000000ACC0 ; __unwind {
.text:000000000000ACC0                 push    r12
.text:000000000000ACC2                 push    rbp
.text:000000000000ACC3                 mov     rbp, rsi
.text:000000000000ACC6                 push    rbx
.text:000000000000ACC7                 mov     r12, rdi
.text:000000000000ACCA                 mov     rdi, [rbp+0]    ; s
.text:000000000000ACCE                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000ACD3                 call    _strrchr
.text:000000000000ACD8                 mov     rdi, [r12]      ; s
.text:000000000000ACDC                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000ACE1                 mov     rbx, rax
.text:000000000000ACE4                 call    _strrchr
.text:000000000000ACE9                 lea     rdx, a8+6       ; ""
.text:000000000000ACF0                 test    rax, rax
.text:000000000000ACF3                 cmovz   rax, rdx
.text:000000000000ACF7                 test    rbx, rbx
.text:000000000000ACFA                 cmovz   rbx, rdx
.text:000000000000ACFE                 mov     rsi, rax        ; s2
.text:000000000000AD01                 mov     rdi, rbx        ; s1
.text:000000000000AD04                 call    xstrcoll
.text:000000000000AD09                 test    eax, eax
.text:000000000000AD0B                 jnz     short loc_AD20
.text:000000000000AD0D                 pop     rbx
.text:000000000000AD0E                 mov     rsi, [r12]      ; s2
.text:000000000000AD12                 mov     rdi, [rbp+0]    ; s1
.text:000000000000AD16                 pop     rbp
.text:000000000000AD17                 pop     r12
.text:000000000000AD19                 jmp     xstrcoll
.text:000000000000AD19 ; ---------------------------------------------------------------------------
.text:000000000000AD1E                 align 20h
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: rev_xstrcoll_extension+4B↑j
.text:000000000000AD20                 pop     rbx
.text:000000000000AD21                 pop     rbp
.text:000000000000AD22                 pop     r12
.text:000000000000AD24                 retn
.text:000000000000AD24 ; } // starts at ACC0
.text:000000000000AD24 rev_xstrcoll_extension endp
.text:000000000000AD24
.text:000000000000AD24 ; ---------------------------------------------------------------------------
.text:000000000000AD25                 align 10h
.text:000000000000AD30
.text:000000000000AD30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD30
.text:000000000000AD30 ; Attributes: info_from_lumina
.text:000000000000AD30
.text:000000000000AD30 ; int __fastcall rev_xstrcoll_atime_0(V a, V b)
.text:000000000000AD30 rev_xstrcoll_atime_0 proc near          ; DATA XREF: .data.rel.ro:000000000021F210↓o
.text:000000000000AD30 ; __unwind {
.text:000000000000AD30                 mov     rax, [rdi+60h]
.text:000000000000AD34                 cmp     [rsi+60h], rax
.text:000000000000AD38                 mov     rdx, rsi
.text:000000000000AD3B                 jg      short loc_AD60
.text:000000000000AD3D                 jl      short loc_AD58
.text:000000000000AD3F                 mov     rax, [rdi+68h]
.text:000000000000AD43                 sub     eax, [rsi+68h]
.text:000000000000AD46                 jnz     short locret_AD5D
.text:000000000000AD48                 mov     rsi, [rdi]      ; s2
.text:000000000000AD4B                 mov     rdi, [rdx]      ; s1
.text:000000000000AD4E                 jmp     _strcmp
.text:000000000000AD4E ; ---------------------------------------------------------------------------
.text:000000000000AD53                 align 8
.text:000000000000AD58
.text:000000000000AD58 loc_AD58:                               ; CODE XREF: rev_xstrcoll_atime_0+D↑j
.text:000000000000AD58                 mov     eax, 1
.text:000000000000AD5D
.text:000000000000AD5D locret_AD5D:                            ; CODE XREF: rev_xstrcoll_atime_0+16↑j
.text:000000000000AD5D                 rep retn
.text:000000000000AD5D ; ---------------------------------------------------------------------------
.text:000000000000AD5F                 align 20h
.text:000000000000AD60
.text:000000000000AD60 loc_AD60:                               ; CODE XREF: rev_xstrcoll_atime_0+B↑j
.text:000000000000AD60                 mov     eax, 0FFFFFFFFh
.text:000000000000AD65                 retn
.text:000000000000AD65 ; } // starts at AD30
.text:000000000000AD65 rev_xstrcoll_atime_0 endp
.text:000000000000AD65
.text:000000000000AD65 ; ---------------------------------------------------------------------------
.text:000000000000AD66                 align 10h
.text:000000000000AD70
.text:000000000000AD70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD70
.text:000000000000AD70 ; Attributes: info_from_lumina
.text:000000000000AD70
.text:000000000000AD70 ; int __fastcall rev_xstrcoll_mtime_0(V a, V b)
.text:000000000000AD70 rev_xstrcoll_mtime_0 proc near          ; DATA XREF: .data.rel.ro:000000000021F190↓o
.text:000000000000AD70 ; __unwind {
.text:000000000000AD70                 mov     rax, [rdi+70h]
.text:000000000000AD74                 cmp     [rsi+70h], rax
.text:000000000000AD78                 mov     rdx, rsi
.text:000000000000AD7B                 jg      short loc_ADA0
.text:000000000000AD7D                 jl      short loc_AD98
.text:000000000000AD7F                 mov     rax, [rdi+78h]
.text:000000000000AD83                 sub     eax, [rsi+78h]
.text:000000000000AD86                 jnz     short locret_AD9D
.text:000000000000AD88                 mov     rsi, [rdi]      ; s2
.text:000000000000AD8B                 mov     rdi, [rdx]      ; s1
.text:000000000000AD8E                 jmp     _strcmp
.text:000000000000AD8E ; ---------------------------------------------------------------------------
.text:000000000000AD93                 align 8
.text:000000000000AD98
.text:000000000000AD98 loc_AD98:                               ; CODE XREF: rev_xstrcoll_mtime_0+D↑j
.text:000000000000AD98                 mov     eax, 1
.text:000000000000AD9D
.text:000000000000AD9D locret_AD9D:                            ; CODE XREF: rev_xstrcoll_mtime_0+16↑j
.text:000000000000AD9D                 rep retn
.text:000000000000AD9D ; ---------------------------------------------------------------------------
.text:000000000000AD9F                 align 20h
.text:000000000000ADA0
.text:000000000000ADA0 loc_ADA0:                               ; CODE XREF: rev_xstrcoll_mtime_0+B↑j
.text:000000000000ADA0                 mov     eax, 0FFFFFFFFh
.text:000000000000ADA5                 retn
.text:000000000000ADA5 ; } // starts at AD70
.text:000000000000ADA5 rev_xstrcoll_mtime_0 endp
.text:000000000000ADA5
.text:000000000000ADA5 ; ---------------------------------------------------------------------------
.text:000000000000ADA6                 align 10h
.text:000000000000ADB0
.text:000000000000ADB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ADB0
.text:000000000000ADB0 ; Attributes: info_from_lumina
.text:000000000000ADB0
.text:000000000000ADB0 ; int __fastcall rev_xstrcoll_ctime_0(V a, V b)
.text:000000000000ADB0 rev_xstrcoll_ctime_0 proc near          ; DATA XREF: .data.rel.ro:000000000021F1D0↓o
.text:000000000000ADB0 ; __unwind {
.text:000000000000ADB0                 mov     rax, [rdi+80h]
.text:000000000000ADB7                 cmp     [rsi+80h], rax
.text:000000000000ADBE                 mov     rdx, rsi
.text:000000000000ADC1                 jg      short loc_ADF0
.text:000000000000ADC3                 jl      short loc_ADE0
.text:000000000000ADC5                 mov     rax, [rdi+88h]
.text:000000000000ADCC                 sub     eax, [rsi+88h]
.text:000000000000ADD2                 jnz     short locret_ADE5
.text:000000000000ADD4                 mov     rsi, [rdi]      ; s2
.text:000000000000ADD7                 mov     rdi, [rdx]      ; s1
.text:000000000000ADDA                 jmp     _strcmp
.text:000000000000ADDA ; ---------------------------------------------------------------------------
.text:000000000000ADDF                 align 20h
.text:000000000000ADE0
.text:000000000000ADE0 loc_ADE0:                               ; CODE XREF: rev_xstrcoll_ctime_0+13↑j
.text:000000000000ADE0                 mov     eax, 1
.text:000000000000ADE5
.text:000000000000ADE5 locret_ADE5:                            ; CODE XREF: rev_xstrcoll_ctime_0+22↑j
.text:000000000000ADE5                 rep retn
.text:000000000000ADE5 ; ---------------------------------------------------------------------------
.text:000000000000ADE7                 align 10h
.text:000000000000ADF0
.text:000000000000ADF0 loc_ADF0:                               ; CODE XREF: rev_xstrcoll_ctime_0+11↑j
.text:000000000000ADF0                 mov     eax, 0FFFFFFFFh
.text:000000000000ADF5                 retn
.text:000000000000ADF5 ; } // starts at ADB0
.text:000000000000ADF5 rev_xstrcoll_ctime_0 endp
.text:000000000000ADF5
.text:000000000000ADF5 ; ---------------------------------------------------------------------------
.text:000000000000ADF6                 align 20h
.text:000000000000AE00
.text:000000000000AE00 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE00
.text:000000000000AE00 ; Attributes: info_from_lumina
.text:000000000000AE00
.text:000000000000AE00 ; int __fastcall xstrcoll_atime_0(V a, V b)
.text:000000000000AE00 xstrcoll_atime_0 proc near              ; DATA XREF: .data.rel.ro:000000000021F200↓o
.text:000000000000AE00 ; __unwind {
.text:000000000000AE00                 mov     rax, [rsi+60h]
.text:000000000000AE04                 cmp     [rdi+60h], rax
.text:000000000000AE08                 jg      short loc_AE30
.text:000000000000AE0A                 jl      short loc_AE20
.text:000000000000AE0C                 mov     rax, [rsi+68h]
.text:000000000000AE10                 sub     eax, [rdi+68h]
.text:000000000000AE13                 jnz     short locret_AE25
.text:000000000000AE15                 mov     rsi, [rsi]      ; s2
.text:000000000000AE18                 mov     rdi, [rdi]      ; s1
.text:000000000000AE1B                 jmp     _strcmp
.text:000000000000AE20 ; ---------------------------------------------------------------------------
.text:000000000000AE20
.text:000000000000AE20 loc_AE20:                               ; CODE XREF: xstrcoll_atime_0+A↑j
.text:000000000000AE20                 mov     eax, 1
.text:000000000000AE25
.text:000000000000AE25 locret_AE25:                            ; CODE XREF: xstrcoll_atime_0+13↑j
.text:000000000000AE25                 rep retn
.text:000000000000AE25 ; ---------------------------------------------------------------------------
.text:000000000000AE27                 align 10h
.text:000000000000AE30
.text:000000000000AE30 loc_AE30:                               ; CODE XREF: xstrcoll_atime_0+8↑j
.text:000000000000AE30                 mov     eax, 0FFFFFFFFh
.text:000000000000AE35                 retn
.text:000000000000AE35 ; } // starts at AE00
.text:000000000000AE35 xstrcoll_atime_0 endp
.text:000000000000AE35
.text:000000000000AE35 ; ---------------------------------------------------------------------------
.text:000000000000AE36                 align 20h
.text:000000000000AE40
.text:000000000000AE40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE40
.text:000000000000AE40 ; Attributes: info_from_lumina
.text:000000000000AE40
.text:000000000000AE40 ; int __fastcall xstrcoll_mtime_0(V a, V b)
.text:000000000000AE40 xstrcoll_mtime_0 proc near              ; DATA XREF: .data.rel.ro:000000000021F180↓o
.text:000000000000AE40 ; __unwind {
.text:000000000000AE40                 mov     rax, [rsi+70h]
.text:000000000000AE44                 cmp     [rdi+70h], rax
.text:000000000000AE48                 jg      short loc_AE70
.text:000000000000AE4A                 jl      short loc_AE60
.text:000000000000AE4C                 mov     rax, [rsi+78h]
.text:000000000000AE50                 sub     eax, [rdi+78h]
.text:000000000000AE53                 jnz     short locret_AE65
.text:000000000000AE55                 mov     rsi, [rsi]      ; s2
.text:000000000000AE58                 mov     rdi, [rdi]      ; s1
.text:000000000000AE5B                 jmp     _strcmp
.text:000000000000AE60 ; ---------------------------------------------------------------------------
.text:000000000000AE60
.text:000000000000AE60 loc_AE60:                               ; CODE XREF: xstrcoll_mtime_0+A↑j
.text:000000000000AE60                 mov     eax, 1
.text:000000000000AE65
.text:000000000000AE65 locret_AE65:                            ; CODE XREF: xstrcoll_mtime_0+13↑j
.text:000000000000AE65                 rep retn
.text:000000000000AE65 ; ---------------------------------------------------------------------------
.text:000000000000AE67                 align 10h
.text:000000000000AE70
.text:000000000000AE70 loc_AE70:                               ; CODE XREF: xstrcoll_mtime_0+8↑j
.text:000000000000AE70                 mov     eax, 0FFFFFFFFh
.text:000000000000AE75                 retn
.text:000000000000AE75 ; } // starts at AE40
.text:000000000000AE75 xstrcoll_mtime_0 endp
.text:000000000000AE75
.text:000000000000AE75 ; ---------------------------------------------------------------------------
.text:000000000000AE76                 align 20h
.text:000000000000AE80
.text:000000000000AE80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE80
.text:000000000000AE80 ; Attributes: info_from_lumina
.text:000000000000AE80
.text:000000000000AE80 ; int __fastcall xstrcoll_ctime_0(V a, V b)
.text:000000000000AE80 xstrcoll_ctime_0 proc near              ; DATA XREF: .data.rel.ro:000000000021F1C0↓o
.text:000000000000AE80 ; __unwind {
.text:000000000000AE80                 mov     rax, [rsi+80h]
.text:000000000000AE87                 cmp     [rdi+80h], rax
.text:000000000000AE8E                 jg      short loc_AEC0
.text:000000000000AE90                 jl      short loc_AEB0
.text:000000000000AE92                 mov     rax, [rsi+88h]
.text:000000000000AE99                 sub     eax, [rdi+88h]
.text:000000000000AE9F                 jnz     short locret_AEB5
.text:000000000000AEA1                 mov     rsi, [rsi]      ; s2
.text:000000000000AEA4                 mov     rdi, [rdi]      ; s1
.text:000000000000AEA7                 jmp     _strcmp
.text:000000000000AEA7 ; ---------------------------------------------------------------------------
.text:000000000000AEAC                 align 10h
.text:000000000000AEB0
.text:000000000000AEB0 loc_AEB0:                               ; CODE XREF: xstrcoll_ctime_0+10↑j
.text:000000000000AEB0                 mov     eax, 1
.text:000000000000AEB5
.text:000000000000AEB5 locret_AEB5:                            ; CODE XREF: xstrcoll_ctime_0+1F↑j
.text:000000000000AEB5                 rep retn
.text:000000000000AEB5 ; ---------------------------------------------------------------------------
.text:000000000000AEB7                 align 20h
.text:000000000000AEC0
.text:000000000000AEC0 loc_AEC0:                               ; CODE XREF: xstrcoll_ctime_0+E↑j
.text:000000000000AEC0                 mov     eax, 0FFFFFFFFh
.text:000000000000AEC5                 retn
.text:000000000000AEC5 ; } // starts at AE80
.text:000000000000AEC5 xstrcoll_ctime_0 endp
.text:000000000000AEC5
.text:000000000000AEC5 ; ---------------------------------------------------------------------------
.text:000000000000AEC6                 align 10h
.text:000000000000AED0
.text:000000000000AED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AED0
.text:000000000000AED0
.text:000000000000AED0 xstrcoll_df_atime proc near             ; DATA XREF: .data.rel.ro:000000000021F1E8↓o
.text:000000000000AED0 ; __unwind {
.text:000000000000AED0                 mov     edx, [rsi+0A8h]
.text:000000000000AED6                 mov     ecx, [rdi+0A8h]
.text:000000000000AEDC                 cmp     edx, 3
.text:000000000000AEDF                 setz    al
.text:000000000000AEE2                 cmp     edx, 9
.text:000000000000AEE5                 setz    dl
.text:000000000000AEE8                 or      eax, edx
.text:000000000000AEEA                 cmp     ecx, 3
.text:000000000000AEED                 jz      short loc_AF18
.text:000000000000AEEF                 cmp     ecx, 9
.text:000000000000AEF2                 jz      short loc_AF18
.text:000000000000AEF4                 mov     edx, [rdi+0ACh]
.text:000000000000AEFA                 and     edx, 0F000h
.text:000000000000AF00                 test    al, al
.text:000000000000AF02                 jz      short loc_AF38
.text:000000000000AF04
.text:000000000000AF04 loc_AF04:                               ; CODE XREF: xstrcoll_df_atime+78↓j
.text:000000000000AF04                 cmp     edx, 4000h
.text:000000000000AF0A                 jz      short loc_AF58
.text:000000000000AF0C
.text:000000000000AF0C loc_AF0C:                               ; CODE XREF: xstrcoll_df_atime+92↓j
.text:000000000000AF0C                 mov     eax, 1
.text:000000000000AF11                 retn
.text:000000000000AF11 ; ---------------------------------------------------------------------------
.text:000000000000AF12                 align 8
.text:000000000000AF18
.text:000000000000AF18 loc_AF18:                               ; CODE XREF: xstrcoll_df_atime+1D↑j
.text:000000000000AF18                                         ; xstrcoll_df_atime+22↑j
.text:000000000000AF18                 test    al, al
.text:000000000000AF1A                 jnz     short loc_AF58
.text:000000000000AF1C                 mov     eax, [rsi+0ACh]
.text:000000000000AF22                 and     eax, 0F000h
.text:000000000000AF27                 cmp     eax, 4000h
.text:000000000000AF2C                 jz      short loc_AF58
.text:000000000000AF2E
.text:000000000000AF2E loc_AF2E:                               ; CODE XREF: xstrcoll_df_atime+80↓j
.text:000000000000AF2E                                         ; xstrcoll_df_atime+90↓j
.text:000000000000AF2E                 mov     eax, 0FFFFFFFFh
.text:000000000000AF33
.text:000000000000AF33 locret_AF33:                            ; CODE XREF: xstrcoll_df_atime+9B↓j
.text:000000000000AF33                 rep retn
.text:000000000000AF33 ; ---------------------------------------------------------------------------
.text:000000000000AF35                 align 8
.text:000000000000AF38
.text:000000000000AF38 loc_AF38:                               ; CODE XREF: xstrcoll_df_atime+32↑j
.text:000000000000AF38                 mov     eax, [rsi+0ACh]
.text:000000000000AF3E                 and     eax, 0F000h
.text:000000000000AF43                 cmp     eax, 4000h
.text:000000000000AF48                 jz      short loc_AF04
.text:000000000000AF4A                 cmp     edx, 4000h
.text:000000000000AF50                 jz      short loc_AF2E
.text:000000000000AF52                 nop     word ptr [rax+rax+00h]
.text:000000000000AF58
.text:000000000000AF58 loc_AF58:                               ; CODE XREF: xstrcoll_df_atime+3A↑j
.text:000000000000AF58                                         ; xstrcoll_df_atime+4A↑j ...
.text:000000000000AF58                 mov     rax, [rsi+60h]
.text:000000000000AF5C                 cmp     [rdi+60h], rax
.text:000000000000AF60                 jg      short loc_AF2E
.text:000000000000AF62                 jl      short loc_AF0C
.text:000000000000AF64                 mov     rax, [rsi+68h]
.text:000000000000AF68                 sub     eax, [rdi+68h]
.text:000000000000AF6B                 jnz     short locret_AF33
.text:000000000000AF6D                 mov     rsi, [rsi]      ; s2
.text:000000000000AF70                 mov     rdi, [rdi]      ; s1
.text:000000000000AF73                 jmp     xstrcoll
.text:000000000000AF73 ; } // starts at AED0
.text:000000000000AF73 xstrcoll_df_atime endp
.text:000000000000AF73
.text:000000000000AF73 ; ---------------------------------------------------------------------------
.text:000000000000AF78                 align 20h
.text:000000000000AF80
.text:000000000000AF80 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF80
.text:000000000000AF80
.text:000000000000AF80 xstrcoll_df_mtime proc near             ; DATA XREF: .data.rel.ro:000000000021F168↓o
.text:000000000000AF80 ; __unwind {
.text:000000000000AF80                 mov     edx, [rsi+0A8h]
.text:000000000000AF86                 mov     ecx, [rdi+0A8h]
.text:000000000000AF8C                 cmp     edx, 3
.text:000000000000AF8F                 setz    al
.text:000000000000AF92                 cmp     edx, 9
.text:000000000000AF95                 setz    dl
.text:000000000000AF98                 or      eax, edx
.text:000000000000AF9A                 cmp     ecx, 3
.text:000000000000AF9D                 jz      short loc_AFC8
.text:000000000000AF9F                 cmp     ecx, 9
.text:000000000000AFA2                 jz      short loc_AFC8
.text:000000000000AFA4                 mov     edx, [rdi+0ACh]
.text:000000000000AFAA                 and     edx, 0F000h
.text:000000000000AFB0                 test    al, al
.text:000000000000AFB2                 jz      short loc_AFE8
.text:000000000000AFB4
.text:000000000000AFB4 loc_AFB4:                               ; CODE XREF: xstrcoll_df_mtime+78↓j
.text:000000000000AFB4                 cmp     edx, 4000h
.text:000000000000AFBA                 jz      short loc_B008
.text:000000000000AFBC
.text:000000000000AFBC loc_AFBC:                               ; CODE XREF: xstrcoll_df_mtime+92↓j
.text:000000000000AFBC                 mov     eax, 1
.text:000000000000AFC1                 retn
.text:000000000000AFC1 ; ---------------------------------------------------------------------------
.text:000000000000AFC2                 align 8
.text:000000000000AFC8
.text:000000000000AFC8 loc_AFC8:                               ; CODE XREF: xstrcoll_df_mtime+1D↑j
.text:000000000000AFC8                                         ; xstrcoll_df_mtime+22↑j
.text:000000000000AFC8                 test    al, al
.text:000000000000AFCA                 jnz     short loc_B008
.text:000000000000AFCC                 mov     eax, [rsi+0ACh]
.text:000000000000AFD2                 and     eax, 0F000h
.text:000000000000AFD7                 cmp     eax, 4000h
.text:000000000000AFDC                 jz      short loc_B008
.text:000000000000AFDE
.text:000000000000AFDE loc_AFDE:                               ; CODE XREF: xstrcoll_df_mtime+80↓j
.text:000000000000AFDE                                         ; xstrcoll_df_mtime+90↓j
.text:000000000000AFDE                 mov     eax, 0FFFFFFFFh
.text:000000000000AFE3
.text:000000000000AFE3 locret_AFE3:                            ; CODE XREF: xstrcoll_df_mtime+9B↓j
.text:000000000000AFE3                 rep retn
.text:000000000000AFE3 ; ---------------------------------------------------------------------------
.text:000000000000AFE5                 align 8
.text:000000000000AFE8
.text:000000000000AFE8 loc_AFE8:                               ; CODE XREF: xstrcoll_df_mtime+32↑j
.text:000000000000AFE8                 mov     eax, [rsi+0ACh]
.text:000000000000AFEE                 and     eax, 0F000h
.text:000000000000AFF3                 cmp     eax, 4000h
.text:000000000000AFF8                 jz      short loc_AFB4
.text:000000000000AFFA                 cmp     edx, 4000h
.text:000000000000B000                 jz      short loc_AFDE
.text:000000000000B002                 nop     word ptr [rax+rax+00h]
.text:000000000000B008
.text:000000000000B008 loc_B008:                               ; CODE XREF: xstrcoll_df_mtime+3A↑j
.text:000000000000B008                                         ; xstrcoll_df_mtime+4A↑j ...
.text:000000000000B008                 mov     rax, [rsi+70h]
.text:000000000000B00C                 cmp     [rdi+70h], rax
.text:000000000000B010                 jg      short loc_AFDE
.text:000000000000B012                 jl      short loc_AFBC
.text:000000000000B014                 mov     rax, [rsi+78h]
.text:000000000000B018                 sub     eax, [rdi+78h]
.text:000000000000B01B                 jnz     short locret_AFE3
.text:000000000000B01D                 mov     rsi, [rsi]      ; s2
.text:000000000000B020                 mov     rdi, [rdi]      ; s1
.text:000000000000B023                 jmp     xstrcoll
.text:000000000000B023 ; } // starts at AF80
.text:000000000000B023 xstrcoll_df_mtime endp
.text:000000000000B023
.text:000000000000B023 ; ---------------------------------------------------------------------------
.text:000000000000B028                 align 10h
.text:000000000000B030
.text:000000000000B030 ; =============== S U B R O U T I N E =======================================
.text:000000000000B030
.text:000000000000B030
.text:000000000000B030 rev_xstrcoll_df_ctime proc near         ; DATA XREF: .data.rel.ro:000000000021F1B8↓o
.text:000000000000B030 ; __unwind {
.text:000000000000B030                 mov     rdx, rsi
.text:000000000000B033                 mov     esi, [rdi+0A8h]
.text:000000000000B039                 mov     ecx, [rdx+0A8h]
.text:000000000000B03F                 cmp     ecx, 3
.text:000000000000B042                 setz    al
.text:000000000000B045                 cmp     ecx, 9
.text:000000000000B048                 setz    cl
.text:000000000000B04B                 or      eax, ecx
.text:000000000000B04D                 cmp     esi, 3
.text:000000000000B050                 jz      short loc_B078
.text:000000000000B052                 cmp     esi, 9
.text:000000000000B055                 jz      short loc_B078
.text:000000000000B057                 mov     ecx, [rdi+0ACh]
.text:000000000000B05D                 and     ecx, 0F000h
.text:000000000000B063                 test    al, al
.text:000000000000B065                 jz      short loc_B098
.text:000000000000B067
.text:000000000000B067 loc_B067:                               ; CODE XREF: rev_xstrcoll_df_ctime+78↓j
.text:000000000000B067                 cmp     ecx, 4000h
.text:000000000000B06D                 jz      short loc_B0B8
.text:000000000000B06F
.text:000000000000B06F loc_B06F:                               ; CODE XREF: rev_xstrcoll_df_ctime+98↓j
.text:000000000000B06F                 mov     eax, 1
.text:000000000000B074                 retn
.text:000000000000B074 ; ---------------------------------------------------------------------------
.text:000000000000B075                 align 8
.text:000000000000B078
.text:000000000000B078 loc_B078:                               ; CODE XREF: rev_xstrcoll_df_ctime+20↑j
.text:000000000000B078                                         ; rev_xstrcoll_df_ctime+25↑j
.text:000000000000B078                 test    al, al
.text:000000000000B07A                 jnz     short loc_B0B8
.text:000000000000B07C                 mov     eax, [rdx+0ACh]
.text:000000000000B082                 and     eax, 0F000h
.text:000000000000B087                 cmp     eax, 4000h
.text:000000000000B08C                 jz      short loc_B0B8
.text:000000000000B08E
.text:000000000000B08E loc_B08E:                               ; CODE XREF: rev_xstrcoll_df_ctime+80↓j
.text:000000000000B08E                                         ; rev_xstrcoll_df_ctime+96↓j
.text:000000000000B08E                 mov     eax, 0FFFFFFFFh
.text:000000000000B093
.text:000000000000B093 locret_B093:                            ; CODE XREF: rev_xstrcoll_df_ctime+A7↓j
.text:000000000000B093                 rep retn
.text:000000000000B093 ; ---------------------------------------------------------------------------
.text:000000000000B095                 align 8
.text:000000000000B098
.text:000000000000B098 loc_B098:                               ; CODE XREF: rev_xstrcoll_df_ctime+35↑j
.text:000000000000B098                 mov     eax, [rdx+0ACh]
.text:000000000000B09E                 and     eax, 0F000h
.text:000000000000B0A3                 cmp     eax, 4000h
.text:000000000000B0A8                 jz      short loc_B067
.text:000000000000B0AA                 cmp     ecx, 4000h
.text:000000000000B0B0                 jz      short loc_B08E
.text:000000000000B0B2                 nop     word ptr [rax+rax+00h]
.text:000000000000B0B8
.text:000000000000B0B8 loc_B0B8:                               ; CODE XREF: rev_xstrcoll_df_ctime+3D↑j
.text:000000000000B0B8                                         ; rev_xstrcoll_df_ctime+4A↑j ...
.text:000000000000B0B8                 mov     rax, [rdi+80h]
.text:000000000000B0BF                 cmp     [rdx+80h], rax
.text:000000000000B0C6                 jg      short loc_B08E
.text:000000000000B0C8                 jl      short loc_B06F
.text:000000000000B0CA                 mov     rax, [rdi+88h]
.text:000000000000B0D1                 sub     eax, [rdx+88h]
.text:000000000000B0D7                 jnz     short locret_B093
.text:000000000000B0D9                 mov     rsi, [rdi]      ; s2
.text:000000000000B0DC                 mov     rdi, [rdx]      ; s1
.text:000000000000B0DF                 jmp     xstrcoll
.text:000000000000B0DF ; } // starts at B030
.text:000000000000B0DF rev_xstrcoll_df_ctime endp
.text:000000000000B0DF
.text:000000000000B0DF ; ---------------------------------------------------------------------------
.text:000000000000B0E4                 align 10h
.text:000000000000B0F0
.text:000000000000B0F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0F0
.text:000000000000B0F0
.text:000000000000B0F0 rev_xstrcoll_df_mtime proc near         ; DATA XREF: .data.rel.ro:000000000021F178↓o
.text:000000000000B0F0 ; __unwind {
.text:000000000000B0F0                 mov     rdx, rsi
.text:000000000000B0F3                 mov     esi, [rdi+0A8h]
.text:000000000000B0F9                 mov     ecx, [rdx+0A8h]
.text:000000000000B0FF                 cmp     ecx, 3
.text:000000000000B102                 setz    al
.text:000000000000B105                 cmp     ecx, 9
.text:000000000000B108                 setz    cl
.text:000000000000B10B                 or      eax, ecx
.text:000000000000B10D                 cmp     esi, 3
.text:000000000000B110                 jz      short loc_B138
.text:000000000000B112                 cmp     esi, 9
.text:000000000000B115                 jz      short loc_B138
.text:000000000000B117                 mov     ecx, [rdi+0ACh]
.text:000000000000B11D                 and     ecx, 0F000h
.text:000000000000B123                 test    al, al
.text:000000000000B125                 jz      short loc_B158
.text:000000000000B127
.text:000000000000B127 loc_B127:                               ; CODE XREF: rev_xstrcoll_df_mtime+78↓j
.text:000000000000B127                 cmp     ecx, 4000h
.text:000000000000B12D                 jz      short loc_B178
.text:000000000000B12F
.text:000000000000B12F loc_B12F:                               ; CODE XREF: rev_xstrcoll_df_mtime+92↓j
.text:000000000000B12F                 mov     eax, 1
.text:000000000000B134                 retn
.text:000000000000B134 ; ---------------------------------------------------------------------------
.text:000000000000B135                 align 8
.text:000000000000B138
.text:000000000000B138 loc_B138:                               ; CODE XREF: rev_xstrcoll_df_mtime+20↑j
.text:000000000000B138                                         ; rev_xstrcoll_df_mtime+25↑j
.text:000000000000B138                 test    al, al
.text:000000000000B13A                 jnz     short loc_B178
.text:000000000000B13C                 mov     eax, [rdx+0ACh]
.text:000000000000B142                 and     eax, 0F000h
.text:000000000000B147                 cmp     eax, 4000h
.text:000000000000B14C                 jz      short loc_B178
.text:000000000000B14E
.text:000000000000B14E loc_B14E:                               ; CODE XREF: rev_xstrcoll_df_mtime+80↓j
.text:000000000000B14E                                         ; rev_xstrcoll_df_mtime+90↓j
.text:000000000000B14E                 mov     eax, 0FFFFFFFFh
.text:000000000000B153
.text:000000000000B153 locret_B153:                            ; CODE XREF: rev_xstrcoll_df_mtime+9B↓j
.text:000000000000B153                 rep retn
.text:000000000000B153 ; ---------------------------------------------------------------------------
.text:000000000000B155                 align 8
.text:000000000000B158
.text:000000000000B158 loc_B158:                               ; CODE XREF: rev_xstrcoll_df_mtime+35↑j
.text:000000000000B158                 mov     eax, [rdx+0ACh]
.text:000000000000B15E                 and     eax, 0F000h
.text:000000000000B163                 cmp     eax, 4000h
.text:000000000000B168                 jz      short loc_B127
.text:000000000000B16A                 cmp     ecx, 4000h
.text:000000000000B170                 jz      short loc_B14E
.text:000000000000B172                 nop     word ptr [rax+rax+00h]
.text:000000000000B178
.text:000000000000B178 loc_B178:                               ; CODE XREF: rev_xstrcoll_df_mtime+3D↑j
.text:000000000000B178                                         ; rev_xstrcoll_df_mtime+4A↑j ...
.text:000000000000B178                 mov     rax, [rdi+70h]
.text:000000000000B17C                 cmp     [rdx+70h], rax
.text:000000000000B180                 jg      short loc_B14E
.text:000000000000B182                 jl      short loc_B12F
.text:000000000000B184                 mov     rax, [rdi+78h]
.text:000000000000B188                 sub     eax, [rdx+78h]
.text:000000000000B18B                 jnz     short locret_B153
.text:000000000000B18D                 mov     rsi, [rdi]      ; s2
.text:000000000000B190                 mov     rdi, [rdx]      ; s1
.text:000000000000B193                 jmp     xstrcoll
.text:000000000000B193 ; } // starts at B0F0
.text:000000000000B193 rev_xstrcoll_df_mtime endp
.text:000000000000B193
.text:000000000000B193 ; ---------------------------------------------------------------------------
.text:000000000000B198                 align 20h
.text:000000000000B1A0
.text:000000000000B1A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1A0
.text:000000000000B1A0
.text:000000000000B1A0 rev_xstrcoll_df_atime proc near         ; DATA XREF: .data.rel.ro:000000000021F1F8↓o
.text:000000000000B1A0 ; __unwind {
.text:000000000000B1A0                 mov     rdx, rsi
.text:000000000000B1A3                 mov     esi, [rdi+0A8h]
.text:000000000000B1A9                 mov     ecx, [rdx+0A8h]
.text:000000000000B1AF                 cmp     ecx, 3
.text:000000000000B1B2                 setz    al
.text:000000000000B1B5                 cmp     ecx, 9
.text:000000000000B1B8                 setz    cl
.text:000000000000B1BB                 or      eax, ecx
.text:000000000000B1BD                 cmp     esi, 3
.text:000000000000B1C0                 jz      short loc_B1E8
.text:000000000000B1C2                 cmp     esi, 9
.text:000000000000B1C5                 jz      short loc_B1E8
.text:000000000000B1C7                 mov     ecx, [rdi+0ACh]
.text:000000000000B1CD                 and     ecx, 0F000h
.text:000000000000B1D3                 test    al, al
.text:000000000000B1D5                 jz      short loc_B208
.text:000000000000B1D7
.text:000000000000B1D7 loc_B1D7:                               ; CODE XREF: rev_xstrcoll_df_atime+78↓j
.text:000000000000B1D7                 cmp     ecx, 4000h
.text:000000000000B1DD                 jz      short loc_B228
.text:000000000000B1DF
.text:000000000000B1DF loc_B1DF:                               ; CODE XREF: rev_xstrcoll_df_atime+92↓j
.text:000000000000B1DF                 mov     eax, 1
.text:000000000000B1E4                 retn
.text:000000000000B1E4 ; ---------------------------------------------------------------------------
.text:000000000000B1E5                 align 8
.text:000000000000B1E8
.text:000000000000B1E8 loc_B1E8:                               ; CODE XREF: rev_xstrcoll_df_atime+20↑j
.text:000000000000B1E8                                         ; rev_xstrcoll_df_atime+25↑j
.text:000000000000B1E8                 test    al, al
.text:000000000000B1EA                 jnz     short loc_B228
.text:000000000000B1EC                 mov     eax, [rdx+0ACh]
.text:000000000000B1F2                 and     eax, 0F000h
.text:000000000000B1F7                 cmp     eax, 4000h
.text:000000000000B1FC                 jz      short loc_B228
.text:000000000000B1FE
.text:000000000000B1FE loc_B1FE:                               ; CODE XREF: rev_xstrcoll_df_atime+80↓j
.text:000000000000B1FE                                         ; rev_xstrcoll_df_atime+90↓j
.text:000000000000B1FE                 mov     eax, 0FFFFFFFFh
.text:000000000000B203
.text:000000000000B203 locret_B203:                            ; CODE XREF: rev_xstrcoll_df_atime+9B↓j
.text:000000000000B203                 rep retn
.text:000000000000B203 ; ---------------------------------------------------------------------------
.text:000000000000B205                 align 8
.text:000000000000B208
.text:000000000000B208 loc_B208:                               ; CODE XREF: rev_xstrcoll_df_atime+35↑j
.text:000000000000B208                 mov     eax, [rdx+0ACh]
.text:000000000000B20E                 and     eax, 0F000h
.text:000000000000B213                 cmp     eax, 4000h
.text:000000000000B218                 jz      short loc_B1D7
.text:000000000000B21A                 cmp     ecx, 4000h
.text:000000000000B220                 jz      short loc_B1FE
.text:000000000000B222                 nop     word ptr [rax+rax+00h]
.text:000000000000B228
.text:000000000000B228 loc_B228:                               ; CODE XREF: rev_xstrcoll_df_atime+3D↑j
.text:000000000000B228                                         ; rev_xstrcoll_df_atime+4A↑j ...
.text:000000000000B228                 mov     rax, [rdi+60h]
.text:000000000000B22C                 cmp     [rdx+60h], rax
.text:000000000000B230                 jg      short loc_B1FE
.text:000000000000B232                 jl      short loc_B1DF
.text:000000000000B234                 mov     rax, [rdi+68h]
.text:000000000000B238                 sub     eax, [rdx+68h]
.text:000000000000B23B                 jnz     short locret_B203
.text:000000000000B23D                 mov     rsi, [rdi]      ; s2
.text:000000000000B240                 mov     rdi, [rdx]      ; s1
.text:000000000000B243                 jmp     xstrcoll
.text:000000000000B243 ; } // starts at B1A0
.text:000000000000B243 rev_xstrcoll_df_atime endp
.text:000000000000B243
.text:000000000000B243 ; ---------------------------------------------------------------------------
.text:000000000000B248                 align 10h
.text:000000000000B250
.text:000000000000B250 ; =============== S U B R O U T I N E =======================================
.text:000000000000B250
.text:000000000000B250
.text:000000000000B250 xstrcoll_df_ctime proc near             ; DATA XREF: .data.rel.ro:000000000021F1A8↓o
.text:000000000000B250 ; __unwind {
.text:000000000000B250                 mov     edx, [rsi+0A8h]
.text:000000000000B256                 mov     ecx, [rdi+0A8h]
.text:000000000000B25C                 cmp     edx, 3
.text:000000000000B25F                 setz    al
.text:000000000000B262                 cmp     edx, 9
.text:000000000000B265                 setz    dl
.text:000000000000B268                 or      eax, edx
.text:000000000000B26A                 cmp     ecx, 3
.text:000000000000B26D                 jz      short loc_B298
.text:000000000000B26F                 cmp     ecx, 9
.text:000000000000B272                 jz      short loc_B298
.text:000000000000B274                 mov     edx, [rdi+0ACh]
.text:000000000000B27A                 and     edx, 0F000h
.text:000000000000B280                 test    al, al
.text:000000000000B282                 jz      short loc_B2B8
.text:000000000000B284
.text:000000000000B284 loc_B284:                               ; CODE XREF: xstrcoll_df_ctime+78↓j
.text:000000000000B284                 cmp     edx, 4000h
.text:000000000000B28A                 jz      short loc_B2D8
.text:000000000000B28C
.text:000000000000B28C loc_B28C:                               ; CODE XREF: xstrcoll_df_ctime+98↓j
.text:000000000000B28C                 mov     eax, 1
.text:000000000000B291                 retn
.text:000000000000B291 ; ---------------------------------------------------------------------------
.text:000000000000B292                 align 8
.text:000000000000B298
.text:000000000000B298 loc_B298:                               ; CODE XREF: xstrcoll_df_ctime+1D↑j
.text:000000000000B298                                         ; xstrcoll_df_ctime+22↑j
.text:000000000000B298                 test    al, al
.text:000000000000B29A                 jnz     short loc_B2D8
.text:000000000000B29C                 mov     eax, [rsi+0ACh]
.text:000000000000B2A2                 and     eax, 0F000h
.text:000000000000B2A7                 cmp     eax, 4000h
.text:000000000000B2AC                 jz      short loc_B2D8
.text:000000000000B2AE
.text:000000000000B2AE loc_B2AE:                               ; CODE XREF: xstrcoll_df_ctime+80↓j
.text:000000000000B2AE                                         ; xstrcoll_df_ctime+96↓j
.text:000000000000B2AE                 mov     eax, 0FFFFFFFFh
.text:000000000000B2B3
.text:000000000000B2B3 locret_B2B3:                            ; CODE XREF: xstrcoll_df_ctime+A7↓j
.text:000000000000B2B3                 rep retn
.text:000000000000B2B3 ; ---------------------------------------------------------------------------
.text:000000000000B2B5                 align 8
.text:000000000000B2B8
.text:000000000000B2B8 loc_B2B8:                               ; CODE XREF: xstrcoll_df_ctime+32↑j
.text:000000000000B2B8                 mov     eax, [rsi+0ACh]
.text:000000000000B2BE                 and     eax, 0F000h
.text:000000000000B2C3                 cmp     eax, 4000h
.text:000000000000B2C8                 jz      short loc_B284
.text:000000000000B2CA                 cmp     edx, 4000h
.text:000000000000B2D0                 jz      short loc_B2AE
.text:000000000000B2D2                 nop     word ptr [rax+rax+00h]
.text:000000000000B2D8
.text:000000000000B2D8 loc_B2D8:                               ; CODE XREF: xstrcoll_df_ctime+3A↑j
.text:000000000000B2D8                                         ; xstrcoll_df_ctime+4A↑j ...
.text:000000000000B2D8                 mov     rax, [rsi+80h]
.text:000000000000B2DF                 cmp     [rdi+80h], rax
.text:000000000000B2E6                 jg      short loc_B2AE
.text:000000000000B2E8                 jl      short loc_B28C
.text:000000000000B2EA                 mov     rax, [rsi+88h]
.text:000000000000B2F1                 sub     eax, [rdi+88h]
.text:000000000000B2F7                 jnz     short locret_B2B3
.text:000000000000B2F9                 mov     rsi, [rsi]      ; s2
.text:000000000000B2FC                 mov     rdi, [rdi]      ; s1
.text:000000000000B2FF                 jmp     xstrcoll
.text:000000000000B2FF ; } // starts at B250
.text:000000000000B2FF xstrcoll_df_ctime endp
.text:000000000000B2FF
.text:000000000000B2FF ; ---------------------------------------------------------------------------
.text:000000000000B304                 align 10h
.text:000000000000B310
.text:000000000000B310 ; =============== S U B R O U T I N E =======================================
.text:000000000000B310
.text:000000000000B310 ; Attributes: info_from_lumina
.text:000000000000B310
.text:000000000000B310 ; int __fastcall strcmp_extension(V a, V b)
.text:000000000000B310 strcmp_extension proc near              ; DATA XREF: .data.rel.ro:000000000021F0C0↓o
.text:000000000000B310 ; __unwind {
.text:000000000000B310                 push    r12
.text:000000000000B312                 push    rbp
.text:000000000000B313                 mov     r12, rsi
.text:000000000000B316                 push    rbx
.text:000000000000B317                 mov     rbp, [rdi]
.text:000000000000B31A                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B31F                 mov     rdi, rbp        ; s
.text:000000000000B322                 call    _strrchr
.text:000000000000B327                 mov     r12, [r12]
.text:000000000000B32B                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B330                 mov     rbx, rax
.text:000000000000B333                 mov     rdi, r12        ; s
.text:000000000000B336                 call    _strrchr
.text:000000000000B33B                 test    rax, rax
.text:000000000000B33E                 jz      short loc_B370
.text:000000000000B340                 lea     rdx, a8+6       ; ""
.text:000000000000B347                 test    rbx, rbx
.text:000000000000B34A                 mov     rsi, rax        ; s2
.text:000000000000B34D                 cmovz   rbx, rdx
.text:000000000000B351                 mov     rdi, rbx        ; s1
.text:000000000000B354                 call    _strcmp
.text:000000000000B359                 test    eax, eax
.text:000000000000B35B                 jnz     short loc_B38B
.text:000000000000B35D
.text:000000000000B35D loc_B35D:                               ; CODE XREF: strcmp_extension+6A↓j
.text:000000000000B35D                                         ; strcmp_extension+79↓j
.text:000000000000B35D                 pop     rbx
.text:000000000000B35E                 mov     rsi, r12        ; s2
.text:000000000000B361                 mov     rdi, rbp        ; s1
.text:000000000000B364                 pop     rbp
.text:000000000000B365                 pop     r12
.text:000000000000B367                 jmp     _strcmp
.text:000000000000B367 ; ---------------------------------------------------------------------------
.text:000000000000B36C                 align 10h
.text:000000000000B370
.text:000000000000B370 loc_B370:                               ; CODE XREF: strcmp_extension+2E↑j
.text:000000000000B370                 test    rbx, rbx
.text:000000000000B373                 lea     rax, a8+6       ; ""
.text:000000000000B37A                 jz      short loc_B35D
.text:000000000000B37C                 mov     rsi, rax        ; s2
.text:000000000000B37F                 mov     rdi, rbx        ; s1
.text:000000000000B382                 call    _strcmp
.text:000000000000B387                 test    eax, eax
.text:000000000000B389                 jz      short loc_B35D
.text:000000000000B38B
.text:000000000000B38B loc_B38B:                               ; CODE XREF: strcmp_extension+4B↑j
.text:000000000000B38B                 pop     rbx
.text:000000000000B38C                 pop     rbp
.text:000000000000B38D                 pop     r12
.text:000000000000B38F                 retn
.text:000000000000B38F ; } // starts at B310
.text:000000000000B38F strcmp_extension endp
.text:000000000000B38F
.text:000000000000B390
.text:000000000000B390 ; =============== S U B R O U T I N E =======================================
.text:000000000000B390
.text:000000000000B390 ; Attributes: info_from_lumina
.text:000000000000B390
.text:000000000000B390 ; int __fastcall rev_strcmp_extension(V a, V b)
.text:000000000000B390 rev_strcmp_extension proc near          ; DATA XREF: .data.rel.ro:000000000021F0D0↓o
.text:000000000000B390 ; __unwind {
.text:000000000000B390                 push    r12
.text:000000000000B392                 push    rbp
.text:000000000000B393                 mov     r12, rdi
.text:000000000000B396                 push    rbx
.text:000000000000B397                 mov     rbp, [rsi]
.text:000000000000B39A                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B39F                 mov     rdi, rbp        ; s
.text:000000000000B3A2                 call    _strrchr
.text:000000000000B3A7                 mov     r12, [r12]
.text:000000000000B3AB                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B3B0                 mov     rbx, rax
.text:000000000000B3B3                 mov     rdi, r12        ; s
.text:000000000000B3B6                 call    _strrchr
.text:000000000000B3BB                 test    rax, rax
.text:000000000000B3BE                 jz      short loc_B3F0
.text:000000000000B3C0                 lea     rdx, a8+6       ; ""
.text:000000000000B3C7                 test    rbx, rbx
.text:000000000000B3CA                 mov     rsi, rax        ; s2
.text:000000000000B3CD                 cmovz   rbx, rdx
.text:000000000000B3D1                 mov     rdi, rbx        ; s1
.text:000000000000B3D4                 call    _strcmp
.text:000000000000B3D9                 test    eax, eax
.text:000000000000B3DB                 jnz     short loc_B40B
.text:000000000000B3DD
.text:000000000000B3DD loc_B3DD:                               ; CODE XREF: rev_strcmp_extension+6A↓j
.text:000000000000B3DD                                         ; rev_strcmp_extension+79↓j
.text:000000000000B3DD                 pop     rbx
.text:000000000000B3DE                 mov     rsi, r12        ; s2
.text:000000000000B3E1                 mov     rdi, rbp        ; s1
.text:000000000000B3E4                 pop     rbp
.text:000000000000B3E5                 pop     r12
.text:000000000000B3E7                 jmp     _strcmp
.text:000000000000B3E7 ; ---------------------------------------------------------------------------
.text:000000000000B3EC                 align 10h
.text:000000000000B3F0
.text:000000000000B3F0 loc_B3F0:                               ; CODE XREF: rev_strcmp_extension+2E↑j
.text:000000000000B3F0                 test    rbx, rbx
.text:000000000000B3F3                 lea     rax, a8+6       ; ""
.text:000000000000B3FA                 jz      short loc_B3DD
.text:000000000000B3FC                 mov     rsi, rax        ; s2
.text:000000000000B3FF                 mov     rdi, rbx        ; s1
.text:000000000000B402                 call    _strcmp
.text:000000000000B407                 test    eax, eax
.text:000000000000B409                 jz      short loc_B3DD
.text:000000000000B40B
.text:000000000000B40B loc_B40B:                               ; CODE XREF: rev_strcmp_extension+4B↑j
.text:000000000000B40B                 pop     rbx
.text:000000000000B40C                 pop     rbp
.text:000000000000B40D                 pop     r12
.text:000000000000B40F                 retn
.text:000000000000B40F ; } // starts at B390
.text:000000000000B40F rev_strcmp_extension endp
.text:000000000000B40F
.text:000000000000B410
.text:000000000000B410 ; =============== S U B R O U T I N E =======================================
.text:000000000000B410
.text:000000000000B410
.text:000000000000B410 rev_xstrcoll_df_extension proc near     ; DATA XREF: .data.rel.ro:000000000021F0B8↓o
.text:000000000000B410 ; __unwind {
.text:000000000000B410                 mov     edx, [rsi+0A8h]
.text:000000000000B416                 mov     ecx, [rdi+0A8h]
.text:000000000000B41C                 cmp     edx, 3
.text:000000000000B41F                 setz    al
.text:000000000000B422                 cmp     edx, 9
.text:000000000000B425                 setz    dl
.text:000000000000B428                 or      eax, edx
.text:000000000000B42A                 cmp     ecx, 3
.text:000000000000B42D                 jz      short loc_B458
.text:000000000000B42F                 cmp     ecx, 9
.text:000000000000B432                 jz      short loc_B458
.text:000000000000B434                 mov     edx, [rdi+0ACh]
.text:000000000000B43A                 and     edx, 0F000h
.text:000000000000B440                 test    al, al
.text:000000000000B442                 jz      short loc_B478
.text:000000000000B444
.text:000000000000B444 loc_B444:                               ; CODE XREF: rev_xstrcoll_df_extension+78↓j
.text:000000000000B444                 cmp     edx, 4000h
.text:000000000000B44A                 jz      short loc_B498
.text:000000000000B44C                 mov     eax, 1
.text:000000000000B451                 retn
.text:000000000000B451 ; ---------------------------------------------------------------------------
.text:000000000000B452                 align 8
.text:000000000000B458
.text:000000000000B458 loc_B458:                               ; CODE XREF: rev_xstrcoll_df_extension+1D↑j
.text:000000000000B458                                         ; rev_xstrcoll_df_extension+22↑j
.text:000000000000B458                 test    al, al
.text:000000000000B45A                 jnz     short loc_B498
.text:000000000000B45C                 mov     eax, [rsi+0ACh]
.text:000000000000B462                 and     eax, 0F000h
.text:000000000000B467                 cmp     eax, 4000h
.text:000000000000B46C                 jz      short loc_B498
.text:000000000000B46E
.text:000000000000B46E loc_B46E:                               ; CODE XREF: rev_xstrcoll_df_extension+80↓j
.text:000000000000B46E                 mov     eax, 0FFFFFFFFh
.text:000000000000B473                 retn
.text:000000000000B473 ; ---------------------------------------------------------------------------
.text:000000000000B474                 align 8
.text:000000000000B478
.text:000000000000B478 loc_B478:                               ; CODE XREF: rev_xstrcoll_df_extension+32↑j
.text:000000000000B478                 mov     eax, [rsi+0ACh]
.text:000000000000B47E                 and     eax, 0F000h
.text:000000000000B483                 cmp     eax, 4000h
.text:000000000000B488                 jz      short loc_B444
.text:000000000000B48A                 cmp     edx, 4000h
.text:000000000000B490                 jz      short loc_B46E
.text:000000000000B492                 nop     word ptr [rax+rax+00h]
.text:000000000000B498
.text:000000000000B498 loc_B498:                               ; CODE XREF: rev_xstrcoll_df_extension+3A↑j
.text:000000000000B498                                         ; rev_xstrcoll_df_extension+4A↑j ...
.text:000000000000B498                 push    r12
.text:000000000000B49A                 push    rbp
.text:000000000000B49B                 mov     rbp, rdi
.text:000000000000B49E                 push    rbx
.text:000000000000B49F                 mov     rbx, rsi
.text:000000000000B4A2                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B4A7                 mov     rdi, [rbx]      ; s
.text:000000000000B4AA                 call    _strrchr
.text:000000000000B4AF                 mov     rdi, [rbp+0]    ; s
.text:000000000000B4B3                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B4B8                 mov     r12, rax
.text:000000000000B4BB                 call    _strrchr
.text:000000000000B4C0                 lea     rdx, a8+6       ; ""
.text:000000000000B4C7                 test    rax, rax
.text:000000000000B4CA                 cmovz   rax, rdx
.text:000000000000B4CE                 test    r12, r12
.text:000000000000B4D1                 cmovz   r12, rdx
.text:000000000000B4D5                 mov     rsi, rax        ; s2
.text:000000000000B4D8                 mov     rdi, r12        ; s1
.text:000000000000B4DB                 call    xstrcoll
.text:000000000000B4E0                 test    eax, eax
.text:000000000000B4E2                 jnz     short loc_B4F8
.text:000000000000B4E4                 mov     rsi, [rbp+0]    ; s2
.text:000000000000B4E8                 mov     rdi, [rbx]      ; s1
.text:000000000000B4EB                 pop     rbx
.text:000000000000B4EC                 pop     rbp
.text:000000000000B4ED                 pop     r12
.text:000000000000B4EF                 jmp     xstrcoll
.text:000000000000B4EF ; ---------------------------------------------------------------------------
.text:000000000000B4F4                 align 8
.text:000000000000B4F8
.text:000000000000B4F8 loc_B4F8:                               ; CODE XREF: rev_xstrcoll_df_extension+D2↑j
.text:000000000000B4F8                 pop     rbx
.text:000000000000B4F9                 pop     rbp
.text:000000000000B4FA                 pop     r12
.text:000000000000B4FC                 retn
.text:000000000000B4FC ; } // starts at B410
.text:000000000000B4FC rev_xstrcoll_df_extension endp
.text:000000000000B4FC
.text:000000000000B4FC ; ---------------------------------------------------------------------------
.text:000000000000B4FD                 align 20h
.text:000000000000B500
.text:000000000000B500 ; =============== S U B R O U T I N E =======================================
.text:000000000000B500
.text:000000000000B500
.text:000000000000B500 xstrcoll_df_extension proc near         ; DATA XREF: .data.rel.ro:000000000021F0A8↓o
.text:000000000000B500 ; __unwind {
.text:000000000000B500                 mov     edx, [rsi+0A8h]
.text:000000000000B506                 mov     ecx, [rdi+0A8h]
.text:000000000000B50C                 cmp     edx, 3
.text:000000000000B50F                 setz    al
.text:000000000000B512                 cmp     edx, 9
.text:000000000000B515                 setz    dl
.text:000000000000B518                 or      eax, edx
.text:000000000000B51A                 cmp     ecx, 3
.text:000000000000B51D                 jz      short loc_B548
.text:000000000000B51F                 cmp     ecx, 9
.text:000000000000B522                 jz      short loc_B548
.text:000000000000B524                 mov     edx, [rdi+0ACh]
.text:000000000000B52A                 and     edx, 0F000h
.text:000000000000B530                 test    al, al
.text:000000000000B532                 jz      short loc_B568
.text:000000000000B534
.text:000000000000B534 loc_B534:                               ; CODE XREF: xstrcoll_df_extension+78↓j
.text:000000000000B534                 cmp     edx, 4000h
.text:000000000000B53A                 jz      short loc_B588
.text:000000000000B53C                 mov     eax, 1
.text:000000000000B541                 retn
.text:000000000000B541 ; ---------------------------------------------------------------------------
.text:000000000000B542                 align 8
.text:000000000000B548
.text:000000000000B548 loc_B548:                               ; CODE XREF: xstrcoll_df_extension+1D↑j
.text:000000000000B548                                         ; xstrcoll_df_extension+22↑j
.text:000000000000B548                 test    al, al
.text:000000000000B54A                 jnz     short loc_B588
.text:000000000000B54C                 mov     eax, [rsi+0ACh]
.text:000000000000B552                 and     eax, 0F000h
.text:000000000000B557                 cmp     eax, 4000h
.text:000000000000B55C                 jz      short loc_B588
.text:000000000000B55E
.text:000000000000B55E loc_B55E:                               ; CODE XREF: xstrcoll_df_extension+80↓j
.text:000000000000B55E                 mov     eax, 0FFFFFFFFh
.text:000000000000B563                 retn
.text:000000000000B563 ; ---------------------------------------------------------------------------
.text:000000000000B564                 align 8
.text:000000000000B568
.text:000000000000B568 loc_B568:                               ; CODE XREF: xstrcoll_df_extension+32↑j
.text:000000000000B568                 mov     eax, [rsi+0ACh]
.text:000000000000B56E                 and     eax, 0F000h
.text:000000000000B573                 cmp     eax, 4000h
.text:000000000000B578                 jz      short loc_B534
.text:000000000000B57A                 cmp     edx, 4000h
.text:000000000000B580                 jz      short loc_B55E
.text:000000000000B582                 nop     word ptr [rax+rax+00h]
.text:000000000000B588
.text:000000000000B588 loc_B588:                               ; CODE XREF: xstrcoll_df_extension+3A↑j
.text:000000000000B588                                         ; xstrcoll_df_extension+4A↑j ...
.text:000000000000B588                 push    r12
.text:000000000000B58A                 push    rbp
.text:000000000000B58B                 mov     rbp, rdi
.text:000000000000B58E                 push    rbx
.text:000000000000B58F                 mov     rdi, [rdi]      ; s
.text:000000000000B592                 mov     rbx, rsi
.text:000000000000B595                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B59A                 call    _strrchr
.text:000000000000B59F                 mov     rdi, [rbx]      ; s
.text:000000000000B5A2                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B5A7                 mov     r12, rax
.text:000000000000B5AA                 call    _strrchr
.text:000000000000B5AF                 lea     rdx, a8+6       ; ""
.text:000000000000B5B6                 test    rax, rax
.text:000000000000B5B9                 cmovz   rax, rdx
.text:000000000000B5BD                 test    r12, r12
.text:000000000000B5C0                 cmovz   r12, rdx
.text:000000000000B5C4                 mov     rsi, rax        ; s2
.text:000000000000B5C7                 mov     rdi, r12        ; s1
.text:000000000000B5CA                 call    xstrcoll
.text:000000000000B5CF                 test    eax, eax
.text:000000000000B5D1                 jnz     short loc_B5E8
.text:000000000000B5D3                 mov     rsi, [rbx]      ; s2
.text:000000000000B5D6                 mov     rdi, [rbp+0]    ; s1
.text:000000000000B5DA                 pop     rbx
.text:000000000000B5DB                 pop     rbp
.text:000000000000B5DC                 pop     r12
.text:000000000000B5DE                 jmp     xstrcoll
.text:000000000000B5DE ; ---------------------------------------------------------------------------
.text:000000000000B5E3                 align 8
.text:000000000000B5E8
.text:000000000000B5E8 loc_B5E8:                               ; CODE XREF: xstrcoll_df_extension+D1↑j
.text:000000000000B5E8                 pop     rbx
.text:000000000000B5E9                 pop     rbp
.text:000000000000B5EA                 pop     r12
.text:000000000000B5EC                 retn
.text:000000000000B5EC ; } // starts at B500
.text:000000000000B5EC xstrcoll_df_extension endp
.text:000000000000B5EC
.text:000000000000B5EC ; ---------------------------------------------------------------------------
.text:000000000000B5ED                 align 10h
.text:000000000000B5F0
.text:000000000000B5F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B5F0
.text:000000000000B5F0
.text:000000000000B5F0 strcmp_df_atime proc near               ; DATA XREF: .data.rel.ro:000000000021F208↓o
.text:000000000000B5F0 ; __unwind {
.text:000000000000B5F0                 mov     edx, [rsi+0A8h]
.text:000000000000B5F6                 mov     ecx, [rdi+0A8h]
.text:000000000000B5FC                 cmp     edx, 3
.text:000000000000B5FF                 setz    al
.text:000000000000B602                 cmp     edx, 9
.text:000000000000B605                 setz    dl
.text:000000000000B608                 or      eax, edx
.text:000000000000B60A                 cmp     ecx, 3
.text:000000000000B60D                 jz      short loc_B638
.text:000000000000B60F                 cmp     ecx, 9
.text:000000000000B612                 jz      short loc_B638
.text:000000000000B614                 mov     edx, [rdi+0ACh]
.text:000000000000B61A                 and     edx, 0F000h
.text:000000000000B620                 test    al, al
.text:000000000000B622                 jz      short loc_B658
.text:000000000000B624
.text:000000000000B624 loc_B624:                               ; CODE XREF: strcmp_df_atime+78↓j
.text:000000000000B624                 cmp     edx, 4000h
.text:000000000000B62A                 jz      short loc_B678
.text:000000000000B62C
.text:000000000000B62C loc_B62C:                               ; CODE XREF: strcmp_df_atime+92↓j
.text:000000000000B62C                 mov     eax, 1
.text:000000000000B631                 retn
.text:000000000000B631 ; ---------------------------------------------------------------------------
.text:000000000000B632                 align 8
.text:000000000000B638
.text:000000000000B638 loc_B638:                               ; CODE XREF: strcmp_df_atime+1D↑j
.text:000000000000B638                                         ; strcmp_df_atime+22↑j
.text:000000000000B638                 test    al, al
.text:000000000000B63A                 jnz     short loc_B678
.text:000000000000B63C                 mov     eax, [rsi+0ACh]
.text:000000000000B642                 and     eax, 0F000h
.text:000000000000B647                 cmp     eax, 4000h
.text:000000000000B64C                 jz      short loc_B678
.text:000000000000B64E
.text:000000000000B64E loc_B64E:                               ; CODE XREF: strcmp_df_atime+80↓j
.text:000000000000B64E                                         ; strcmp_df_atime+90↓j
.text:000000000000B64E                 mov     eax, 0FFFFFFFFh
.text:000000000000B653
.text:000000000000B653 locret_B653:                            ; CODE XREF: strcmp_df_atime+9B↓j
.text:000000000000B653                 rep retn
.text:000000000000B653 ; ---------------------------------------------------------------------------
.text:000000000000B655                 align 8
.text:000000000000B658
.text:000000000000B658 loc_B658:                               ; CODE XREF: strcmp_df_atime+32↑j
.text:000000000000B658                 mov     eax, [rsi+0ACh]
.text:000000000000B65E                 and     eax, 0F000h
.text:000000000000B663                 cmp     eax, 4000h
.text:000000000000B668                 jz      short loc_B624
.text:000000000000B66A                 cmp     edx, 4000h
.text:000000000000B670                 jz      short loc_B64E
.text:000000000000B672                 nop     word ptr [rax+rax+00h]
.text:000000000000B678
.text:000000000000B678 loc_B678:                               ; CODE XREF: strcmp_df_atime+3A↑j
.text:000000000000B678                                         ; strcmp_df_atime+4A↑j ...
.text:000000000000B678                 mov     rax, [rsi+60h]
.text:000000000000B67C                 cmp     [rdi+60h], rax
.text:000000000000B680                 jg      short loc_B64E
.text:000000000000B682                 jl      short loc_B62C
.text:000000000000B684                 mov     rax, [rsi+68h]
.text:000000000000B688                 sub     eax, [rdi+68h]
.text:000000000000B68B                 jnz     short locret_B653
.text:000000000000B68D                 mov     rsi, [rsi]      ; s2
.text:000000000000B690                 mov     rdi, [rdi]      ; s1
.text:000000000000B693                 jmp     _strcmp
.text:000000000000B693 ; } // starts at B5F0
.text:000000000000B693 strcmp_df_atime endp
.text:000000000000B693
.text:000000000000B693 ; ---------------------------------------------------------------------------
.text:000000000000B698                 align 20h
.text:000000000000B6A0
.text:000000000000B6A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6A0
.text:000000000000B6A0
.text:000000000000B6A0 rev_strcmp_df_mtime proc near           ; DATA XREF: .data.rel.ro:000000000021F198↓o
.text:000000000000B6A0 ; __unwind {
.text:000000000000B6A0                 mov     rdx, rsi
.text:000000000000B6A3                 mov     esi, [rdi+0A8h]
.text:000000000000B6A9                 mov     ecx, [rdx+0A8h]
.text:000000000000B6AF                 cmp     ecx, 3
.text:000000000000B6B2                 setz    al
.text:000000000000B6B5                 cmp     ecx, 9
.text:000000000000B6B8                 setz    cl
.text:000000000000B6BB                 or      eax, ecx
.text:000000000000B6BD                 cmp     esi, 3
.text:000000000000B6C0                 jz      short loc_B6E8
.text:000000000000B6C2                 cmp     esi, 9
.text:000000000000B6C5                 jz      short loc_B6E8
.text:000000000000B6C7                 mov     ecx, [rdi+0ACh]
.text:000000000000B6CD                 and     ecx, 0F000h
.text:000000000000B6D3                 test    al, al
.text:000000000000B6D5                 jz      short loc_B708
.text:000000000000B6D7
.text:000000000000B6D7 loc_B6D7:                               ; CODE XREF: rev_strcmp_df_mtime+78↓j
.text:000000000000B6D7                 cmp     ecx, 4000h
.text:000000000000B6DD                 jz      short loc_B728
.text:000000000000B6DF
.text:000000000000B6DF loc_B6DF:                               ; CODE XREF: rev_strcmp_df_mtime+92↓j
.text:000000000000B6DF                 mov     eax, 1
.text:000000000000B6E4                 retn
.text:000000000000B6E4 ; ---------------------------------------------------------------------------
.text:000000000000B6E5                 align 8
.text:000000000000B6E8
.text:000000000000B6E8 loc_B6E8:                               ; CODE XREF: rev_strcmp_df_mtime+20↑j
.text:000000000000B6E8                                         ; rev_strcmp_df_mtime+25↑j
.text:000000000000B6E8                 test    al, al
.text:000000000000B6EA                 jnz     short loc_B728
.text:000000000000B6EC                 mov     eax, [rdx+0ACh]
.text:000000000000B6F2                 and     eax, 0F000h
.text:000000000000B6F7                 cmp     eax, 4000h
.text:000000000000B6FC                 jz      short loc_B728
.text:000000000000B6FE
.text:000000000000B6FE loc_B6FE:                               ; CODE XREF: rev_strcmp_df_mtime+80↓j
.text:000000000000B6FE                                         ; rev_strcmp_df_mtime+90↓j
.text:000000000000B6FE                 mov     eax, 0FFFFFFFFh
.text:000000000000B703
.text:000000000000B703 locret_B703:                            ; CODE XREF: rev_strcmp_df_mtime+9B↓j
.text:000000000000B703                 rep retn
.text:000000000000B703 ; ---------------------------------------------------------------------------
.text:000000000000B705                 align 8
.text:000000000000B708
.text:000000000000B708 loc_B708:                               ; CODE XREF: rev_strcmp_df_mtime+35↑j
.text:000000000000B708                 mov     eax, [rdx+0ACh]
.text:000000000000B70E                 and     eax, 0F000h
.text:000000000000B713                 cmp     eax, 4000h
.text:000000000000B718                 jz      short loc_B6D7
.text:000000000000B71A                 cmp     ecx, 4000h
.text:000000000000B720                 jz      short loc_B6FE
.text:000000000000B722                 nop     word ptr [rax+rax+00h]
.text:000000000000B728
.text:000000000000B728 loc_B728:                               ; CODE XREF: rev_strcmp_df_mtime+3D↑j
.text:000000000000B728                                         ; rev_strcmp_df_mtime+4A↑j ...
.text:000000000000B728                 mov     rax, [rdi+70h]
.text:000000000000B72C                 cmp     [rdx+70h], rax
.text:000000000000B730                 jg      short loc_B6FE
.text:000000000000B732                 jl      short loc_B6DF
.text:000000000000B734                 mov     rax, [rdi+78h]
.text:000000000000B738                 sub     eax, [rdx+78h]
.text:000000000000B73B                 jnz     short locret_B703
.text:000000000000B73D                 mov     rsi, [rdi]      ; s2
.text:000000000000B740                 mov     rdi, [rdx]      ; s1
.text:000000000000B743                 jmp     _strcmp
.text:000000000000B743 ; } // starts at B6A0
.text:000000000000B743 rev_strcmp_df_mtime endp
.text:000000000000B743
.text:000000000000B743 ; ---------------------------------------------------------------------------
.text:000000000000B748                 align 10h
.text:000000000000B750
.text:000000000000B750 ; =============== S U B R O U T I N E =======================================
.text:000000000000B750
.text:000000000000B750
.text:000000000000B750 strcmp_df_ctime proc near               ; DATA XREF: .data.rel.ro:000000000021F1C8↓o
.text:000000000000B750 ; __unwind {
.text:000000000000B750                 mov     edx, [rsi+0A8h]
.text:000000000000B756                 mov     ecx, [rdi+0A8h]
.text:000000000000B75C                 cmp     edx, 3
.text:000000000000B75F                 setz    al
.text:000000000000B762                 cmp     edx, 9
.text:000000000000B765                 setz    dl
.text:000000000000B768                 or      eax, edx
.text:000000000000B76A                 cmp     ecx, 3
.text:000000000000B76D                 jz      short loc_B798
.text:000000000000B76F                 cmp     ecx, 9
.text:000000000000B772                 jz      short loc_B798
.text:000000000000B774                 mov     edx, [rdi+0ACh]
.text:000000000000B77A                 and     edx, 0F000h
.text:000000000000B780                 test    al, al
.text:000000000000B782                 jz      short loc_B7B8
.text:000000000000B784
.text:000000000000B784 loc_B784:                               ; CODE XREF: strcmp_df_ctime+78↓j
.text:000000000000B784                 cmp     edx, 4000h
.text:000000000000B78A                 jz      short loc_B7D8
.text:000000000000B78C
.text:000000000000B78C loc_B78C:                               ; CODE XREF: strcmp_df_ctime+98↓j
.text:000000000000B78C                 mov     eax, 1
.text:000000000000B791                 retn
.text:000000000000B791 ; ---------------------------------------------------------------------------
.text:000000000000B792                 align 8
.text:000000000000B798
.text:000000000000B798 loc_B798:                               ; CODE XREF: strcmp_df_ctime+1D↑j
.text:000000000000B798                                         ; strcmp_df_ctime+22↑j
.text:000000000000B798                 test    al, al
.text:000000000000B79A                 jnz     short loc_B7D8
.text:000000000000B79C                 mov     eax, [rsi+0ACh]
.text:000000000000B7A2                 and     eax, 0F000h
.text:000000000000B7A7                 cmp     eax, 4000h
.text:000000000000B7AC                 jz      short loc_B7D8
.text:000000000000B7AE
.text:000000000000B7AE loc_B7AE:                               ; CODE XREF: strcmp_df_ctime+80↓j
.text:000000000000B7AE                                         ; strcmp_df_ctime+96↓j
.text:000000000000B7AE                 mov     eax, 0FFFFFFFFh
.text:000000000000B7B3
.text:000000000000B7B3 locret_B7B3:                            ; CODE XREF: strcmp_df_ctime+A7↓j
.text:000000000000B7B3                 rep retn
.text:000000000000B7B3 ; ---------------------------------------------------------------------------
.text:000000000000B7B5                 align 8
.text:000000000000B7B8
.text:000000000000B7B8 loc_B7B8:                               ; CODE XREF: strcmp_df_ctime+32↑j
.text:000000000000B7B8                 mov     eax, [rsi+0ACh]
.text:000000000000B7BE                 and     eax, 0F000h
.text:000000000000B7C3                 cmp     eax, 4000h
.text:000000000000B7C8                 jz      short loc_B784
.text:000000000000B7CA                 cmp     edx, 4000h
.text:000000000000B7D0                 jz      short loc_B7AE
.text:000000000000B7D2                 nop     word ptr [rax+rax+00h]
.text:000000000000B7D8
.text:000000000000B7D8 loc_B7D8:                               ; CODE XREF: strcmp_df_ctime+3A↑j
.text:000000000000B7D8                                         ; strcmp_df_ctime+4A↑j ...
.text:000000000000B7D8                 mov     rax, [rsi+80h]
.text:000000000000B7DF                 cmp     [rdi+80h], rax
.text:000000000000B7E6                 jg      short loc_B7AE
.text:000000000000B7E8                 jl      short loc_B78C
.text:000000000000B7EA                 mov     rax, [rsi+88h]
.text:000000000000B7F1                 sub     eax, [rdi+88h]
.text:000000000000B7F7                 jnz     short locret_B7B3
.text:000000000000B7F9                 mov     rsi, [rsi]      ; s2
.text:000000000000B7FC                 mov     rdi, [rdi]      ; s1
.text:000000000000B7FF                 jmp     _strcmp
.text:000000000000B7FF ; } // starts at B750
.text:000000000000B7FF strcmp_df_ctime endp
.text:000000000000B7FF
.text:000000000000B7FF ; ---------------------------------------------------------------------------
.text:000000000000B804                 align 10h
.text:000000000000B810
.text:000000000000B810 ; =============== S U B R O U T I N E =======================================
.text:000000000000B810
.text:000000000000B810
.text:000000000000B810 strcmp_df_extension proc near           ; DATA XREF: .data.rel.ro:000000000021F0C8↓o
.text:000000000000B810 ; __unwind {
.text:000000000000B810                 mov     edx, [rsi+0A8h]
.text:000000000000B816                 mov     ecx, [rdi+0A8h]
.text:000000000000B81C                 cmp     edx, 3
.text:000000000000B81F                 setz    al
.text:000000000000B822                 cmp     edx, 9
.text:000000000000B825                 setz    dl
.text:000000000000B828                 or      eax, edx
.text:000000000000B82A                 cmp     ecx, 3
.text:000000000000B82D                 jz      short loc_B858
.text:000000000000B82F                 cmp     ecx, 9
.text:000000000000B832                 jz      short loc_B858
.text:000000000000B834                 mov     edx, [rdi+0ACh]
.text:000000000000B83A                 and     edx, 0F000h
.text:000000000000B840                 test    al, al
.text:000000000000B842                 jz      short loc_B878
.text:000000000000B844
.text:000000000000B844 loc_B844:                               ; CODE XREF: strcmp_df_extension+78↓j
.text:000000000000B844                 cmp     edx, 4000h
.text:000000000000B84A                 jz      short loc_B898
.text:000000000000B84C                 mov     eax, 1
.text:000000000000B851                 retn
.text:000000000000B851 ; ---------------------------------------------------------------------------
.text:000000000000B852                 align 8
.text:000000000000B858
.text:000000000000B858 loc_B858:                               ; CODE XREF: strcmp_df_extension+1D↑j
.text:000000000000B858                                         ; strcmp_df_extension+22↑j
.text:000000000000B858                 test    al, al
.text:000000000000B85A                 jnz     short loc_B898
.text:000000000000B85C                 mov     eax, [rsi+0ACh]
.text:000000000000B862                 and     eax, 0F000h
.text:000000000000B867                 cmp     eax, 4000h
.text:000000000000B86C                 jz      short loc_B898
.text:000000000000B86E
.text:000000000000B86E loc_B86E:                               ; CODE XREF: strcmp_df_extension+80↓j
.text:000000000000B86E                 mov     eax, 0FFFFFFFFh
.text:000000000000B873                 retn
.text:000000000000B873 ; ---------------------------------------------------------------------------
.text:000000000000B874                 align 8
.text:000000000000B878
.text:000000000000B878 loc_B878:                               ; CODE XREF: strcmp_df_extension+32↑j
.text:000000000000B878                 mov     eax, [rsi+0ACh]
.text:000000000000B87E                 and     eax, 0F000h
.text:000000000000B883                 cmp     eax, 4000h
.text:000000000000B888                 jz      short loc_B844
.text:000000000000B88A                 cmp     edx, 4000h
.text:000000000000B890                 jz      short loc_B86E
.text:000000000000B892                 nop     word ptr [rax+rax+00h]
.text:000000000000B898
.text:000000000000B898 loc_B898:                               ; CODE XREF: strcmp_df_extension+3A↑j
.text:000000000000B898                                         ; strcmp_df_extension+4A↑j ...
.text:000000000000B898                 push    r12
.text:000000000000B89A                 push    rbp
.text:000000000000B89B                 push    rbx
.text:000000000000B89C                 mov     r12, [rdi]
.text:000000000000B89F                 mov     rbx, rsi
.text:000000000000B8A2                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B8A7                 mov     rdi, r12        ; s
.text:000000000000B8AA                 call    _strrchr
.text:000000000000B8AF                 mov     rbx, [rbx]
.text:000000000000B8B2                 mov     esi, 2Eh ; '.'  ; c
.text:000000000000B8B7                 mov     rbp, rax
.text:000000000000B8BA                 mov     rdi, rbx        ; s
.text:000000000000B8BD                 call    _strrchr
.text:000000000000B8C2                 test    rax, rax
.text:000000000000B8C5                 jz      short loc_B900
.text:000000000000B8C7                 lea     rdx, a8+6       ; ""
.text:000000000000B8CE                 test    rbp, rbp
.text:000000000000B8D1                 cmovz   rbp, rdx
.text:000000000000B8D5
.text:000000000000B8D5 loc_B8D5:                               ; CODE XREF: strcmp_df_extension+FA↓j
.text:000000000000B8D5                 mov     rsi, rax        ; s2
.text:000000000000B8D8                 mov     rdi, rbp        ; s1
.text:000000000000B8DB                 call    _strcmp
.text:000000000000B8E0                 test    eax, eax
.text:000000000000B8E2                 jnz     short loc_B8F8
.text:000000000000B8E4
.text:000000000000B8E4 loc_B8E4:                               ; CODE XREF: strcmp_df_extension+FC↓j
.text:000000000000B8E4                 mov     rsi, rbx        ; s2
.text:000000000000B8E7                 mov     rdi, r12        ; s1
.text:000000000000B8EA                 pop     rbx
.text:000000000000B8EB                 pop     rbp
.text:000000000000B8EC                 pop     r12
.text:000000000000B8EE                 jmp     _strcmp
.text:000000000000B8EE ; ---------------------------------------------------------------------------
.text:000000000000B8F3                 align 8
.text:000000000000B8F8
.text:000000000000B8F8 loc_B8F8:                               ; CODE XREF: strcmp_df_extension+D2↑j
.text:000000000000B8F8                 pop     rbx
.text:000000000000B8F9                 pop     rbp
.text:000000000000B8FA                 pop     r12
.text:000000000000B8FC                 retn
.text:000000000000B8FC ; ---------------------------------------------------------------------------
.text:000000000000B8FD                 align 20h
.text:000000000000B900
.text:000000000000B900 loc_B900:                               ; CODE XREF: strcmp_df_extension+B5↑j
.text:000000000000B900                 test    rbp, rbp
.text:000000000000B903                 lea     rax, a8+6       ; ""
.text:000000000000B90A                 jnz     short loc_B8D5
.text:000000000000B90C                 jmp     short loc_B8E4
.text:000000000000B90C ; } // starts at B810
.text:000000000000B90C strcmp_df_extension endp
.text:000000000000B90C
.text:000000000000B90C ; ---------------------------------------------------------------------------
.text:000000000000B90E                 align 10h
.text:000000000000B910
.text:000000000000B910 ; =============== S U B R O U T I N E =======================================
.text:000000000000B910
.text:000000000000B910 ; Attributes: noreturn
.text:000000000000B910
.text:000000000000B910 ; void __fastcall __noreturn usage(int status)
.text:000000000000B910                 public usage
.text:000000000000B910 usage           proc near               ; CODE XREF: main+177F↑p
.text:000000000000B910                                         ; main+181C↑p ...
.text:000000000000B910
.text:000000000000B910 var_A8          = qword ptr -0A8h
.text:000000000000B910 var_A0          = qword ptr -0A0h
.text:000000000000B910 var_98          = qword ptr -98h
.text:000000000000B910 var_90          = qword ptr -90h
.text:000000000000B910 var_88          = qword ptr -88h
.text:000000000000B910 var_80          = qword ptr -80h
.text:000000000000B910 var_78          = qword ptr -78h
.text:000000000000B910 var_70          = qword ptr -70h
.text:000000000000B910 var_68          = qword ptr -68h
.text:000000000000B910 var_60          = qword ptr -60h
.text:000000000000B910 var_58          = qword ptr -58h
.text:000000000000B910 var_50          = qword ptr -50h
.text:000000000000B910 var_48          = qword ptr -48h
.text:000000000000B910 var_40          = qword ptr -40h
.text:000000000000B910 var_30          = qword ptr -30h
.text:000000000000B910
.text:000000000000B910 ; __unwind {
.text:000000000000B910                 push    r13
.text:000000000000B912                 push    r12
.text:000000000000B914                 mov     edx, 5          ; category
.text:000000000000B919                 push    rbp
.text:000000000000B91A                 push    rbx
.text:000000000000B91B                 mov     r12d, edi
.text:000000000000B91E                 sub     rsp, 88h
.text:000000000000B925                 mov     rbx, cs:program_name
.text:000000000000B92C                 mov     rax, fs:28h
.text:000000000000B935                 mov     [rsp+0A8h+var_30], rax
.text:000000000000B93A                 xor     eax, eax
.text:000000000000B93C                 test    edi, edi
.text:000000000000B93E                 jz      short loc_B96F
.text:000000000000B940                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:000000000000B947                 xor     edi, edi        ; domainname
.text:000000000000B949                 call    _dcgettext
.text:000000000000B94E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000B955                 mov     rdx, rax
.text:000000000000B958                 mov     rcx, rbx
.text:000000000000B95B                 mov     esi, 1
.text:000000000000B960                 xor     eax, eax
.text:000000000000B962                 call    ___fprintf_chk
.text:000000000000B967
.text:000000000000B967 loc_B967:                               ; CODE XREF: usage+67B↓j
.text:000000000000B967                 mov     edi, r12d       ; status
.text:000000000000B96A                 call    _exit
.text:000000000000B96F ; ---------------------------------------------------------------------------
.text:000000000000B96F
.text:000000000000B96F loc_B96F:                               ; CODE XREF: usage+2E↑j
.text:000000000000B96F                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:000000000000B976                 xor     edi, edi        ; domainname
.text:000000000000B978                 lea     rbp, domainname+7 ; "ls"
.text:000000000000B97F                 call    _dcgettext
.text:000000000000B984                 mov     rdx, rbx
.text:000000000000B987                 mov     rsi, rax
.text:000000000000B98A                 mov     edi, 1
.text:000000000000B98F                 xor     eax, eax
.text:000000000000B991                 call    ___printf_chk
.text:000000000000B996                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000B99D                 lea     rsi, aListInformatio ; "List information about the FILEs (the c"...
.text:000000000000B9A4                 mov     edx, 5          ; category
.text:000000000000B9A9                 xor     edi, edi        ; domainname
.text:000000000000B9AB                 call    _dcgettext
.text:000000000000B9B0                 mov     rsi, rbx        ; stream
.text:000000000000B9B3                 mov     rdi, rax        ; s
.text:000000000000B9B6                 call    _fputs_unlocked
.text:000000000000B9BB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000B9C2                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:000000000000B9C9                 mov     edx, 5          ; category
.text:000000000000B9CE                 xor     edi, edi        ; domainname
.text:000000000000B9D0                 call    _dcgettext
.text:000000000000B9D5                 mov     rsi, rbx        ; stream
.text:000000000000B9D8                 mov     rdi, rax        ; s
.text:000000000000B9DB                 call    _fputs_unlocked
.text:000000000000B9E0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000B9E7                 lea     rsi, aAAllDoNotIgnor ; "  -a, --all                  do not ign"...
.text:000000000000B9EE                 mov     edx, 5          ; category
.text:000000000000B9F3                 xor     edi, edi        ; domainname
.text:000000000000B9F5                 call    _dcgettext
.text:000000000000B9FA                 mov     rsi, rbx        ; stream
.text:000000000000B9FD                 mov     rdi, rax        ; s
.text:000000000000BA00                 call    _fputs_unlocked
.text:000000000000BA05                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BA0C                 lea     rsi, aBlockSizeSizeW ; "      --block-size=SIZE      with -l, s"...
.text:000000000000BA13                 mov     edx, 5          ; category
.text:000000000000BA18                 xor     edi, edi        ; domainname
.text:000000000000BA1A                 call    _dcgettext
.text:000000000000BA1F                 mov     rsi, rbx        ; stream
.text:000000000000BA22                 mov     rdi, rax        ; s
.text:000000000000BA25                 call    _fputs_unlocked
.text:000000000000BA2A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BA31                 lea     rsi, aBIgnoreBackups ; "  -B, --ignore-backups       do not lis"...
.text:000000000000BA38                 mov     edx, 5          ; category
.text:000000000000BA3D                 xor     edi, edi        ; domainname
.text:000000000000BA3F                 call    _dcgettext
.text:000000000000BA44                 mov     rsi, rbx        ; stream
.text:000000000000BA47                 mov     rdi, rax        ; s
.text:000000000000BA4A                 call    _fputs_unlocked
.text:000000000000BA4F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BA56                 lea     rsi, aCListEntriesBy ; "  -C                         list entri"...
.text:000000000000BA5D                 mov     edx, 5          ; category
.text:000000000000BA62                 xor     edi, edi        ; domainname
.text:000000000000BA64                 call    _dcgettext
.text:000000000000BA69                 mov     rsi, rbx        ; stream
.text:000000000000BA6C                 mov     rdi, rax        ; s
.text:000000000000BA6F                 call    _fputs_unlocked
.text:000000000000BA74                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BA7B                 lea     rsi, aFDoNotSortEnab ; "  -f                         do not sor"...
.text:000000000000BA82                 mov     edx, 5          ; category
.text:000000000000BA87                 xor     edi, edi        ; domainname
.text:000000000000BA89                 call    _dcgettext
.text:000000000000BA8E                 mov     rsi, rbx        ; stream
.text:000000000000BA91                 mov     rdi, rax        ; s
.text:000000000000BA94                 call    _fputs_unlocked
.text:000000000000BA99                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BAA0                 lea     rsi, aGLikeLButDoNot ; "  -g                         like -l, b"...
.text:000000000000BAA7                 mov     edx, 5          ; category
.text:000000000000BAAC                 xor     edi, edi        ; domainname
.text:000000000000BAAE                 call    _dcgettext
.text:000000000000BAB3                 mov     rsi, rbx        ; stream
.text:000000000000BAB6                 mov     rdi, rax        ; s
.text:000000000000BAB9                 call    _fputs_unlocked
.text:000000000000BABE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BAC5                 lea     rsi, aGroupDirectori ; "      --group-directories-first\n      "...
.text:000000000000BACC                 mov     edx, 5          ; category
.text:000000000000BAD1                 xor     edi, edi        ; domainname
.text:000000000000BAD3                 call    _dcgettext
.text:000000000000BAD8                 mov     rsi, rbx        ; stream
.text:000000000000BADB                 mov     rdi, rax        ; s
.text:000000000000BADE                 call    _fputs_unlocked
.text:000000000000BAE3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BAEA                 lea     rsi, aGNoGroupInALon ; "  -G, --no-group             in a long "...
.text:000000000000BAF1                 mov     edx, 5          ; category
.text:000000000000BAF6                 xor     edi, edi        ; domainname
.text:000000000000BAF8                 call    _dcgettext
.text:000000000000BAFD                 mov     rsi, rbx        ; stream
.text:000000000000BB00                 mov     rdi, rax        ; s
.text:000000000000BB03                 call    _fputs_unlocked
.text:000000000000BB08                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BB0F                 lea     rsi, aHHumanReadable ; "  -h, --human-readable       with -l an"...
.text:000000000000BB16                 mov     edx, 5          ; category
.text:000000000000BB1B                 xor     edi, edi        ; domainname
.text:000000000000BB1D                 call    _dcgettext
.text:000000000000BB22                 mov     rsi, rbx        ; stream
.text:000000000000BB25                 mov     rdi, rax        ; s
.text:000000000000BB28                 call    _fputs_unlocked
.text:000000000000BB2D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BB34                 lea     rsi, aHDereferenceCo ; "  -H, --dereference-command-line\n     "...
.text:000000000000BB3B                 mov     edx, 5          ; category
.text:000000000000BB40                 xor     edi, edi        ; domainname
.text:000000000000BB42                 call    _dcgettext
.text:000000000000BB47                 mov     rsi, rbx        ; stream
.text:000000000000BB4A                 mov     rdi, rax        ; s
.text:000000000000BB4D                 call    _fputs_unlocked
.text:000000000000BB52                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BB59                 lea     rsi, aHyperlinkWhenH ; "      --hyperlink[=WHEN]     hyperlink "...
.text:000000000000BB60                 mov     edx, 5          ; category
.text:000000000000BB65                 xor     edi, edi        ; domainname
.text:000000000000BB67                 call    _dcgettext
.text:000000000000BB6C                 mov     rsi, rbx        ; stream
.text:000000000000BB6F                 mov     rdi, rax        ; s
.text:000000000000BB72                 call    _fputs_unlocked
.text:000000000000BB77                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BB7E                 lea     rsi, aIndicatorStyle_0 ; "      --indicator-style=WORD  append in"...
.text:000000000000BB85                 mov     edx, 5          ; category
.text:000000000000BB8A                 xor     edi, edi        ; domainname
.text:000000000000BB8C                 call    _dcgettext
.text:000000000000BB91                 mov     rsi, rbx        ; stream
.text:000000000000BB94                 mov     rdi, rax        ; s
.text:000000000000BB97                 call    _fputs_unlocked
.text:000000000000BB9C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BBA3                 lea     rsi, aKKibibytesDefa ; "  -k, --kibibytes            default to"...
.text:000000000000BBAA                 mov     edx, 5          ; category
.text:000000000000BBAF                 xor     edi, edi        ; domainname
.text:000000000000BBB1                 call    _dcgettext
.text:000000000000BBB6                 mov     rsi, rbx        ; stream
.text:000000000000BBB9                 mov     rdi, rax        ; s
.text:000000000000BBBC                 call    _fputs_unlocked
.text:000000000000BBC1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BBC8                 lea     rsi, aLUseALongListi ; "  -l                         use a long"...
.text:000000000000BBCF                 mov     edx, 5          ; category
.text:000000000000BBD4                 xor     edi, edi        ; domainname
.text:000000000000BBD6                 call    _dcgettext
.text:000000000000BBDB                 mov     rsi, rbx        ; stream
.text:000000000000BBDE                 mov     rdi, rax        ; s
.text:000000000000BBE1                 call    _fputs_unlocked
.text:000000000000BBE6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BBED                 lea     rsi, aNNumericUidGid ; "  -n, --numeric-uid-gid      like -l, b"...
.text:000000000000BBF4                 mov     edx, 5          ; category
.text:000000000000BBF9                 xor     edi, edi        ; domainname
.text:000000000000BBFB                 call    _dcgettext
.text:000000000000BC00                 mov     rsi, rbx        ; stream
.text:000000000000BC03                 mov     rdi, rax        ; s
.text:000000000000BC06                 call    _fputs_unlocked
.text:000000000000BC0B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BC12                 lea     rsi, aQHideControlCh ; "  -q, --hide-control-chars   print ? in"...
.text:000000000000BC19                 mov     edx, 5          ; category
.text:000000000000BC1E                 xor     edi, edi        ; domainname
.text:000000000000BC20                 call    _dcgettext
.text:000000000000BC25                 mov     rsi, rbx        ; stream
.text:000000000000BC28                 mov     rdi, rax        ; s
.text:000000000000BC2B                 call    _fputs_unlocked
.text:000000000000BC30                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BC37                 lea     rsi, aRReverseRevers ; "  -r, --reverse              reverse or"...
.text:000000000000BC3E                 mov     edx, 5          ; category
.text:000000000000BC43                 xor     edi, edi        ; domainname
.text:000000000000BC45                 call    _dcgettext
.text:000000000000BC4A                 mov     rsi, rbx        ; stream
.text:000000000000BC4D                 mov     rdi, rax        ; s
.text:000000000000BC50                 call    _fputs_unlocked
.text:000000000000BC55                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BC5C                 lea     rsi, aSSortByFileSiz ; "  -S                         sort by fi"...
.text:000000000000BC63                 mov     edx, 5          ; category
.text:000000000000BC68                 xor     edi, edi        ; domainname
.text:000000000000BC6A                 call    _dcgettext
.text:000000000000BC6F                 mov     rsi, rbx        ; stream
.text:000000000000BC72                 mov     rdi, rax        ; s
.text:000000000000BC75                 call    _fputs_unlocked
.text:000000000000BC7A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BC81                 lea     rsi, aTimeStyleTimeS ; "      --time-style=TIME_STYLE  time/dat"...
.text:000000000000BC88                 xor     edi, edi        ; domainname
.text:000000000000BC8A                 mov     edx, 5          ; category
.text:000000000000BC8F                 call    _dcgettext
.text:000000000000BC94                 mov     rsi, rbx        ; stream
.text:000000000000BC97                 mov     rdi, rax        ; s
.text:000000000000BC9A                 call    _fputs_unlocked
.text:000000000000BC9F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BCA6                 lea     rsi, aTSortByModific ; "  -t                         sort by mo"...
.text:000000000000BCAD                 mov     edx, 5          ; category
.text:000000000000BCB2                 xor     edi, edi        ; domainname
.text:000000000000BCB4                 call    _dcgettext
.text:000000000000BCB9                 mov     rsi, rbx        ; stream
.text:000000000000BCBC                 mov     rdi, rax        ; s
.text:000000000000BCBF                 call    _fputs_unlocked
.text:000000000000BCC4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BCCB                 lea     rsi, aUWithLtSortByA ; "  -u                         with -lt: "...
.text:000000000000BCD2                 mov     edx, 5          ; category
.text:000000000000BCD7                 xor     edi, edi        ; domainname
.text:000000000000BCD9                 call    _dcgettext
.text:000000000000BCDE                 mov     rsi, rbx        ; stream
.text:000000000000BCE1                 mov     rdi, rax        ; s
.text:000000000000BCE4                 call    _fputs_unlocked
.text:000000000000BCE9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BCF0                 lea     rsi, aWWidthColsSetO ; "  -w, --width=COLS           set output"...
.text:000000000000BCF7                 mov     edx, 5          ; category
.text:000000000000BCFC                 xor     edi, edi        ; domainname
.text:000000000000BCFE                 call    _dcgettext
.text:000000000000BD03                 mov     rsi, rbx        ; stream
.text:000000000000BD06                 mov     rdi, rax        ; s
.text:000000000000BD09                 call    _fputs_unlocked
.text:000000000000BD0E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BD15                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000BD1C                 mov     edx, 5          ; category
.text:000000000000BD21                 xor     edi, edi        ; domainname
.text:000000000000BD23                 call    _dcgettext
.text:000000000000BD28                 mov     rsi, rbx        ; stream
.text:000000000000BD2B                 mov     rdi, rax        ; s
.text:000000000000BD2E                 call    _fputs_unlocked
.text:000000000000BD33                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BD3A                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:000000000000BD41                 mov     edx, 5          ; category
.text:000000000000BD46                 xor     edi, edi        ; domainname
.text:000000000000BD48                 call    _dcgettext
.text:000000000000BD4D                 mov     rsi, rbx        ; stream
.text:000000000000BD50                 mov     rdi, rax        ; s
.text:000000000000BD53                 call    _fputs_unlocked
.text:000000000000BD58                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BD5F                 lea     rsi, aTheSizeArgumen ; "\nThe SIZE argument is an integer and o"...
.text:000000000000BD66                 mov     edx, 5          ; category
.text:000000000000BD6B                 xor     edi, edi        ; domainname
.text:000000000000BD6D                 call    _dcgettext
.text:000000000000BD72                 mov     rsi, rbx        ; stream
.text:000000000000BD75                 mov     rdi, rax        ; s
.text:000000000000BD78                 call    _fputs_unlocked
.text:000000000000BD7D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BD84                 lea     rsi, aTheTimeStyleAr ; "\nThe TIME_STYLE argument can be full-i"...
.text:000000000000BD8B                 mov     edx, 5          ; category
.text:000000000000BD90                 xor     edi, edi        ; domainname
.text:000000000000BD92                 call    _dcgettext
.text:000000000000BD97                 mov     rsi, rbx        ; stream
.text:000000000000BD9A                 mov     rdi, rax        ; s
.text:000000000000BD9D                 call    _fputs_unlocked
.text:000000000000BDA2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BDA9                 lea     rsi, aUsingColorToDi ; "\nUsing color to distinguish file types"...
.text:000000000000BDB0                 mov     edx, 5          ; category
.text:000000000000BDB5                 xor     edi, edi        ; domainname
.text:000000000000BDB7                 call    _dcgettext
.text:000000000000BDBC                 mov     rsi, rbx        ; stream
.text:000000000000BDBF                 mov     rdi, rax        ; s
.text:000000000000BDC2                 call    _fputs_unlocked
.text:000000000000BDC7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000BDCE                 lea     rsi, aExitStatus0IfO ; "\nExit status:\n 0  if OK,\n 1  if mino"...
.text:000000000000BDD5                 xor     edi, edi        ; domainname
.text:000000000000BDD7                 mov     edx, 5          ; category
.text:000000000000BDDC                 call    _dcgettext
.text:000000000000BDE1                 mov     rsi, rbx        ; stream
.text:000000000000BDE4                 mov     rdi, rax        ; s
.text:000000000000BDE7                 call    _fputs_unlocked
.text:000000000000BDEC                 mov     eax, cs:ls_mode
.text:000000000000BDF2                 cmp     eax, 1
.text:000000000000BDF5                 jz      short loc_BE0C
.text:000000000000BDF7                 cmp     eax, 2
.text:000000000000BDFA                 lea     rbp, aVdir      ; "vdir"
.text:000000000000BE01                 lea     rax, aVdir+1    ; "dir"
.text:000000000000BE08                 cmovz   rbp, rax
.text:000000000000BE0C
.text:000000000000BE0C loc_BE0C:                               ; CODE XREF: usage+4E5↑j
.text:000000000000BE0C                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000BE13                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000BE1A                 lea     rsi, asc_17DC3+1 ; "["
.text:000000000000BE21                 mov     [rsp+0A8h+var_48], 0
.text:000000000000BE2A                 mov     [rsp+0A8h+var_40], 0
.text:000000000000BE33                 mov     rbx, rsp
.text:000000000000BE36                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000BE3B                 lea     rax, domainname ; "coreutils"
.text:000000000000BE42                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000BE47                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000BE4E                 mov     [rsp+0A8h+var_A8], rsi
.text:000000000000BE52                 mov     [rsp+0A8h+var_98], rax
.text:000000000000BE57                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000BE5E                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000BE63                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000BE6A                 mov     [rsp+0A8h+var_90], rax
.text:000000000000BE6F                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000BE76                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000BE7B                 mov     [rsp+0A8h+var_88], rax
.text:000000000000BE80                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000BE87                 mov     [rsp+0A8h+var_80], rax
.text:000000000000BE8C                 mov     [rsp+0A8h+var_70], rax
.text:000000000000BE91                 mov     [rsp+0A8h+var_60], rax
.text:000000000000BE96                 mov     [rsp+0A8h+var_50], rax
.text:000000000000BE9B                 jmp     short loc_BEAC
.text:000000000000BE9B ; ---------------------------------------------------------------------------
.text:000000000000BE9D                 align 20h
.text:000000000000BEA0
.text:000000000000BEA0 loc_BEA0:                               ; CODE XREF: usage+5A6↓j
.text:000000000000BEA0                 add     rbx, 10h
.text:000000000000BEA4                 mov     rsi, [rbx]      ; s2
.text:000000000000BEA7                 test    rsi, rsi
.text:000000000000BEAA                 jz      short loc_BEB8
.text:000000000000BEAC
.text:000000000000BEAC loc_BEAC:                               ; CODE XREF: usage+58B↑j
.text:000000000000BEAC                 mov     rdi, rbp        ; s1
.text:000000000000BEAF                 call    _strcmp
.text:000000000000BEB4                 test    eax, eax
.text:000000000000BEB6                 jnz     short loc_BEA0
.text:000000000000BEB8
.text:000000000000BEB8 loc_BEB8:                               ; CODE XREF: usage+59A↑j
.text:000000000000BEB8                 mov     rbx, [rbx+8]
.text:000000000000BEBC                 xor     edi, edi        ; domainname
.text:000000000000BEBE                 mov     edx, 5          ; category
.text:000000000000BEC3                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:000000000000BECA                 test    rbx, rbx
.text:000000000000BECD                 jz      loc_BF90
.text:000000000000BED3                 call    _dcgettext
.text:000000000000BED8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000BEDF                 lea     rdx, unk_179D6
.text:000000000000BEE6                 mov     rsi, rax
.text:000000000000BEE9                 mov     edi, 1
.text:000000000000BEEE                 xor     eax, eax
.text:000000000000BEF0                 call    ___printf_chk
.text:000000000000BEF5                 xor     esi, esi        ; locale
.text:000000000000BEF7                 mov     edi, 5          ; category
.text:000000000000BEFC                 call    _setlocale
.text:000000000000BF01                 test    rax, rax
.text:000000000000BF04                 jz      short loc_BF22
.text:000000000000BF06                 lea     rsi, aEn        ; "en_"
.text:000000000000BF0D                 mov     edx, 3          ; n
.text:000000000000BF12                 mov     rdi, rax        ; s1
.text:000000000000BF15                 call    _strncmp
.text:000000000000BF1A                 test    eax, eax
.text:000000000000BF1C                 jnz     loc_C019
.text:000000000000BF22
.text:000000000000BF22 loc_BF22:                               ; CODE XREF: usage+5F4↑j
.text:000000000000BF22                                         ; usage+72E↓j
.text:000000000000BF22                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000BF29                 xor     edi, edi        ; domainname
.text:000000000000BF2B                 mov     edx, 5          ; category
.text:000000000000BF30                 call    _dcgettext
.text:000000000000BF35                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000BF3C                 mov     rcx, rbp
.text:000000000000BF3F                 mov     rsi, rax
.text:000000000000BF42                 mov     edi, 1
.text:000000000000BF47                 xor     eax, eax
.text:000000000000BF49                 call    ___printf_chk
.text:000000000000BF4E                 cmp     rbp, rbx
.text:000000000000BF51                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000BF58                 lea     rbp, a8+6       ; ""
.text:000000000000BF5F                 cmovz   rbp, rcx
.text:000000000000BF63
.text:000000000000BF63 loc_BF63:                               ; CODE XREF: usage+701↓j
.text:000000000000BF63                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000BF6A                 xor     edi, edi        ; domainname
.text:000000000000BF6C                 mov     edx, 5          ; category
.text:000000000000BF71                 call    _dcgettext
.text:000000000000BF76                 mov     rcx, rbp
.text:000000000000BF79                 mov     rsi, rax
.text:000000000000BF7C                 mov     rdx, rbx
.text:000000000000BF7F                 mov     edi, 1
.text:000000000000BF84                 xor     eax, eax
.text:000000000000BF86                 call    ___printf_chk
.text:000000000000BF8B                 jmp     loc_B967
.text:000000000000BF90 ; ---------------------------------------------------------------------------
.text:000000000000BF90
.text:000000000000BF90 loc_BF90:                               ; CODE XREF: usage+5BD↑j
.text:000000000000BF90                 call    _dcgettext
.text:000000000000BF95                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000BF9C                 lea     rdx, unk_179D6
.text:000000000000BFA3                 mov     rsi, rax
.text:000000000000BFA6                 mov     edi, 1
.text:000000000000BFAB                 xor     eax, eax
.text:000000000000BFAD                 call    ___printf_chk
.text:000000000000BFB2                 xor     esi, esi        ; locale
.text:000000000000BFB4                 mov     edi, 5          ; category
.text:000000000000BFB9                 call    _setlocale
.text:000000000000BFBE                 test    rax, rax
.text:000000000000BFC1                 jz      short loc_BFDB
.text:000000000000BFC3                 lea     rsi, aEn        ; "en_"
.text:000000000000BFCA                 mov     edx, 3          ; n
.text:000000000000BFCF                 mov     rdi, rax        ; s1
.text:000000000000BFD2                 call    _strncmp
.text:000000000000BFD7                 test    eax, eax
.text:000000000000BFD9                 jnz     short loc_C016
.text:000000000000BFDB
.text:000000000000BFDB loc_BFDB:                               ; CODE XREF: usage+6B1↑j
.text:000000000000BFDB                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000BFE2                 mov     edx, 5          ; category
.text:000000000000BFE7                 xor     edi, edi        ; domainname
.text:000000000000BFE9                 mov     rbx, rbp
.text:000000000000BFEC                 call    _dcgettext
.text:000000000000BFF1                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000BFF8                 mov     rcx, rbp
.text:000000000000BFFB                 mov     rsi, rax
.text:000000000000BFFE                 mov     edi, 1
.text:000000000000C003                 xor     eax, eax
.text:000000000000C005                 lea     rbp, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000C00C                 call    ___printf_chk
.text:000000000000C011                 jmp     loc_BF63
.text:000000000000C016 ; ---------------------------------------------------------------------------
.text:000000000000C016
.text:000000000000C016 loc_C016:                               ; CODE XREF: usage+6C9↑j
.text:000000000000C016                 mov     rbx, rbp
.text:000000000000C019
.text:000000000000C019 loc_C019:                               ; CODE XREF: usage+60C↑j
.text:000000000000C019                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000C020                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000C027                 xor     edi, edi        ; domainname
.text:000000000000C029                 mov     edx, 5          ; category
.text:000000000000C02E                 call    _dcgettext
.text:000000000000C033                 mov     rsi, r13        ; stream
.text:000000000000C036                 mov     rdi, rax        ; s
.text:000000000000C039                 call    _fputs_unlocked
.text:000000000000C03E                 jmp     loc_BF22
.text:000000000000C03E ; } // starts at B910
.text:000000000000C03E usage           endp
.text:000000000000C03E
.text:000000000000C03E ; ---------------------------------------------------------------------------
.text:000000000000C043                 align 10h
.text:000000000000C050
.text:000000000000C050 ; =============== S U B R O U T I N E =======================================
.text:000000000000C050
.text:000000000000C050 ; Attributes: info_from_lumina
.text:000000000000C050
.text:000000000000C050 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:000000000000C050                 public areadlink_with_size
.text:000000000000C050 areadlink_with_size proc near           ; CODE XREF: gobble_file_constprop_52+964↑p
.text:000000000000C050                                         ; canonicalize_filename_mode+42C↓p
.text:000000000000C050 ; __unwind {
.text:000000000000C050                 push    r15
.text:000000000000C052                 push    r14
.text:000000000000C054                 mov     eax, 401h
.text:000000000000C059                 push    r13
.text:000000000000C05B                 push    r12
.text:000000000000C05D                 mov     r13, rdi
.text:000000000000C060                 push    rbp
.text:000000000000C061                 push    rbx
.text:000000000000C062                 lea     rbx, [rsi+1]
.text:000000000000C066                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:000000000000C070                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:000000000000C07A                 sub     rsp, 8
.text:000000000000C07E                 cmp     rsi, 401h
.text:000000000000C085                 cmovnb  rbx, rax
.text:000000000000C089                 nop     dword ptr [rax+00000000h]
.text:000000000000C090
.text:000000000000C090 loc_C090:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:000000000000C090                 mov     rdi, rbx        ; size
.text:000000000000C093                 call    malloc
.text:000000000000C098                 test    rax, rax
.text:000000000000C09B                 mov     rbp, rax
.text:000000000000C09E                 jz      short loc_C0DB
.text:000000000000C0A0
.text:000000000000C0A0 loc_C0A0:                               ; CODE XREF: areadlink_with_size+89↓j
.text:000000000000C0A0                 mov     rdx, rbx        ; len
.text:000000000000C0A3                 mov     rsi, rax        ; buf
.text:000000000000C0A6                 mov     rdi, r13        ; path
.text:000000000000C0A9                 call    _readlink
.text:000000000000C0AE                 test    rax, rax
.text:000000000000C0B1                 mov     r12, rax
.text:000000000000C0B4                 js      short loc_C108
.text:000000000000C0B6
.text:000000000000C0B6 loc_C0B6:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:000000000000C0B6                 cmp     rbx, r12
.text:000000000000C0B9                 ja      short loc_C120
.text:000000000000C0BB                 mov     rdi, rbp        ; ptr
.text:000000000000C0BE                 call    free
.text:000000000000C0C3                 cmp     rbx, r14
.text:000000000000C0C6                 ja      short loc_C0F0
.text:000000000000C0C8                 add     rbx, rbx
.text:000000000000C0CB                 mov     rdi, rbx        ; size
.text:000000000000C0CE                 call    malloc
.text:000000000000C0D3                 test    rax, rax
.text:000000000000C0D6                 mov     rbp, rax
.text:000000000000C0D9                 jnz     short loc_C0A0
.text:000000000000C0DB
.text:000000000000C0DB loc_C0DB:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000C0DB                                         ; areadlink_with_size+CC↓j ...
.text:000000000000C0DB                 add     rsp, 8
.text:000000000000C0DF                 mov     rax, rbp
.text:000000000000C0E2                 pop     rbx
.text:000000000000C0E3                 pop     rbp
.text:000000000000C0E4                 pop     r12
.text:000000000000C0E6                 pop     r13
.text:000000000000C0E8                 pop     r14
.text:000000000000C0EA                 pop     r15
.text:000000000000C0EC                 retn
.text:000000000000C0EC ; ---------------------------------------------------------------------------
.text:000000000000C0ED                 align 10h
.text:000000000000C0F0
.text:000000000000C0F0 loc_C0F0:                               ; CODE XREF: areadlink_with_size+76↑j
.text:000000000000C0F0                 cmp     rbx, r15
.text:000000000000C0F3                 ja      short loc_C130
.text:000000000000C0F5                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000C0FF                 jmp     short loc_C090
.text:000000000000C0FF ; ---------------------------------------------------------------------------
.text:000000000000C101                 align 8
.text:000000000000C108
.text:000000000000C108 loc_C108:                               ; CODE XREF: areadlink_with_size+64↑j
.text:000000000000C108                 call    ___errno_location
.text:000000000000C10D                 cmp     dword ptr [rax], 22h ; '"'
.text:000000000000C110                 jz      short loc_C0B6
.text:000000000000C112                 mov     rdi, rbp        ; ptr
.text:000000000000C115                 xor     ebp, ebp
.text:000000000000C117                 call    free
.text:000000000000C11C                 jmp     short loc_C0DB
.text:000000000000C11C ; ---------------------------------------------------------------------------
.text:000000000000C11E                 align 20h
.text:000000000000C120
.text:000000000000C120 loc_C120:                               ; CODE XREF: areadlink_with_size+69↑j
.text:000000000000C120                 mov     byte ptr [rbp+r12+0], 0
.text:000000000000C126                 jmp     short loc_C0DB
.text:000000000000C126 ; ---------------------------------------------------------------------------
.text:000000000000C128                 align 10h
.text:000000000000C130
.text:000000000000C130 loc_C130:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:000000000000C130                 call    ___errno_location
.text:000000000000C135                 xor     ebp, ebp
.text:000000000000C137                 mov     dword ptr [rax], 0Ch
.text:000000000000C13D                 jmp     short loc_C0DB
.text:000000000000C13D ; } // starts at C050
.text:000000000000C13D areadlink_with_size endp
.text:000000000000C13D
.text:000000000000C13D ; ---------------------------------------------------------------------------
.text:000000000000C13F                 align 20h
.text:000000000000C140
.text:000000000000C140 ; =============== S U B R O U T I N E =======================================
.text:000000000000C140
.text:000000000000C140 ; Attributes: noreturn
.text:000000000000C140
.text:000000000000C140 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:000000000000C140 ; __unwind {
.text:000000000000C140                 mov     edi, 1          ; status
.text:000000000000C145                 jmp     usage
.text:000000000000C145 ; } // starts at C140
.text:000000000000C145 __argmatch_die  endp
.text:000000000000C145
.text:000000000000C145 ; ---------------------------------------------------------------------------
.text:000000000000C14A                 align 10h
.text:000000000000C150
.text:000000000000C150 ; =============== S U B R O U T I N E =======================================
.text:000000000000C150
.text:000000000000C150 ; Attributes: info_from_lumina
.text:000000000000C150
.text:000000000000C150 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C150                 public argmatch
.text:000000000000C150 argmatch        proc near               ; CODE XREF: main+18B↑p
.text:000000000000C150                                         ; main+13E1↑p ...
.text:000000000000C150
.text:000000000000C150 var_58          = qword ptr -58h
.text:000000000000C150 s2              = qword ptr -50h
.text:000000000000C150 var_41          = byte ptr -41h
.text:000000000000C150 var_40          = qword ptr -40h
.text:000000000000C150
.text:000000000000C150 ; __unwind {
.text:000000000000C150                 push    r15
.text:000000000000C152                 push    r14
.text:000000000000C154                 mov     r15, rsi
.text:000000000000C157                 push    r13
.text:000000000000C159                 push    r12
.text:000000000000C15B                 mov     r13, rcx
.text:000000000000C15E                 push    rbp
.text:000000000000C15F                 push    rbx
.text:000000000000C160                 mov     rbp, rdx
.text:000000000000C163                 sub     rsp, 28h
.text:000000000000C167                 mov     [rsp+58h+s2], rdi
.text:000000000000C16C                 mov     [rsp+58h+var_40], rdx
.text:000000000000C171                 call    _strlen
.text:000000000000C176                 mov     r14, [r15]
.text:000000000000C179                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000C181                 test    r14, r14
.text:000000000000C184                 jz      loc_C23D
.text:000000000000C18A                 mov     r12, rax
.text:000000000000C18D                 mov     [rsp+58h+var_41], 0
.text:000000000000C192                 xor     ebx, ebx
.text:000000000000C194                 jmp     short loc_C1E7
.text:000000000000C194 ; ---------------------------------------------------------------------------
.text:000000000000C196                 align 20h
.text:000000000000C1A0
.text:000000000000C1A0 loc_C1A0:                               ; CODE XREF: argmatch+BD↓j
.text:000000000000C1A0                 mov     rax, [rsp+58h+var_40]
.text:000000000000C1A5                 test    rax, rax
.text:000000000000C1A8                 jz      loc_C250
.text:000000000000C1AE                 mov     rdi, [rsp+58h+var_58]
.text:000000000000C1B2                 mov     rdx, r13        ; n
.text:000000000000C1B5                 mov     rsi, rbp        ; s2
.text:000000000000C1B8                 imul    rdi, r13
.text:000000000000C1BC                 add     rdi, rax        ; s1
.text:000000000000C1BF                 call    _memcmp
.text:000000000000C1C4                 test    eax, eax
.text:000000000000C1C6                 movzx   eax, [rsp+58h+var_41]
.text:000000000000C1CB                 mov     ecx, 1
.text:000000000000C1D0                 cmovnz  eax, ecx
.text:000000000000C1D3                 mov     [rsp+58h+var_41], al
.text:000000000000C1D7
.text:000000000000C1D7 loc_C1D7:                               ; CODE XREF: argmatch+A9↓j
.text:000000000000C1D7                                         ; argmatch+105↓j
.text:000000000000C1D7                 add     rbx, 1
.text:000000000000C1DB                 add     rbp, r13
.text:000000000000C1DE                 mov     r14, [r15+rbx*8]
.text:000000000000C1E2                 test    r14, r14
.text:000000000000C1E5                 jz      short loc_C228
.text:000000000000C1E7
.text:000000000000C1E7 loc_C1E7:                               ; CODE XREF: argmatch+44↑j
.text:000000000000C1E7                                         ; argmatch+D1↓j
.text:000000000000C1E7                 mov     rsi, [rsp+58h+s2] ; s2
.text:000000000000C1EC                 mov     rdx, r12        ; n
.text:000000000000C1EF                 mov     rdi, r14        ; s1
.text:000000000000C1F2                 call    _strncmp
.text:000000000000C1F7                 test    eax, eax
.text:000000000000C1F9                 jnz     short loc_C1D7
.text:000000000000C1FB                 mov     rdi, r14        ; s
.text:000000000000C1FE                 call    _strlen
.text:000000000000C203                 cmp     rax, r12
.text:000000000000C206                 jz      short loc_C260
.text:000000000000C208                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000C20D                 jnz     short loc_C1A0
.text:000000000000C20F                 mov     [rsp+58h+var_58], rbx
.text:000000000000C213                 add     rbx, 1
.text:000000000000C217                 add     rbp, r13
.text:000000000000C21A                 mov     r14, [r15+rbx*8]
.text:000000000000C21E                 test    r14, r14
.text:000000000000C221                 jnz     short loc_C1E7
.text:000000000000C223                 nop     dword ptr [rax+rax+00h]
.text:000000000000C228
.text:000000000000C228 loc_C228:                               ; CODE XREF: argmatch+95↑j
.text:000000000000C228                 cmp     [rsp+58h+var_41], 0
.text:000000000000C22D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000C234                 cmovz   rax, [rsp+58h+var_58]
.text:000000000000C239                 mov     [rsp+58h+var_58], rax
.text:000000000000C23D
.text:000000000000C23D loc_C23D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000C23D                                         ; argmatch+114↓j
.text:000000000000C23D                 mov     rax, [rsp+58h+var_58]
.text:000000000000C241                 add     rsp, 28h
.text:000000000000C245                 pop     rbx
.text:000000000000C246                 pop     rbp
.text:000000000000C247                 pop     r12
.text:000000000000C249                 pop     r13
.text:000000000000C24B                 pop     r14
.text:000000000000C24D                 pop     r15
.text:000000000000C24F                 retn
.text:000000000000C250 ; ---------------------------------------------------------------------------
.text:000000000000C250
.text:000000000000C250 loc_C250:                               ; CODE XREF: argmatch+58↑j
.text:000000000000C250                 mov     [rsp+58h+var_41], 1
.text:000000000000C255                 jmp     short loc_C1D7
.text:000000000000C255 ; ---------------------------------------------------------------------------
.text:000000000000C257                 align 20h
.text:000000000000C260
.text:000000000000C260 loc_C260:                               ; CODE XREF: argmatch+B6↑j
.text:000000000000C260                 mov     [rsp+58h+var_58], rbx
.text:000000000000C264                 jmp     short loc_C23D
.text:000000000000C264 ; } // starts at C150
.text:000000000000C264 argmatch        endp
.text:000000000000C264
.text:000000000000C264 ; ---------------------------------------------------------------------------
.text:000000000000C266                 align 10h
.text:000000000000C270
.text:000000000000C270 ; =============== S U B R O U T I N E =======================================
.text:000000000000C270
.text:000000000000C270 ; Attributes: info_from_lumina
.text:000000000000C270
.text:000000000000C270 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:000000000000C270                 public argmatch_invalid
.text:000000000000C270 argmatch_invalid proc near              ; CODE XREF: main+1798↑p
.text:000000000000C270                                         ; __xargmatch_internal+4E↓p
.text:000000000000C270 ; __unwind {
.text:000000000000C270                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000C274                 push    r12
.text:000000000000C276                 mov     edx, 5          ; category
.text:000000000000C27B                 push    rbp
.text:000000000000C27C                 mov     r12, rsi
.text:000000000000C27F                 push    rbx
.text:000000000000C280                 mov     rbp, rdi
.text:000000000000C283                 jz      short loc_C2D0
.text:000000000000C285                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000C28C                 xor     edi, edi        ; domainname
.text:000000000000C28E                 call    _dcgettext
.text:000000000000C293                 mov     rbx, rax
.text:000000000000C296
.text:000000000000C296 loc_C296:                               ; CODE XREF: argmatch_invalid+71↓j
.text:000000000000C296                 mov     rsi, rbp
.text:000000000000C299                 mov     edi, 1
.text:000000000000C29E                 call    quote_n
.text:000000000000C2A3                 mov     rdx, r12
.text:000000000000C2A6                 mov     rbp, rax
.text:000000000000C2A9                 mov     esi, 8
.text:000000000000C2AE                 xor     edi, edi
.text:000000000000C2B0                 call    quotearg_n_style
.text:000000000000C2B5                 mov     r8, rbp
.text:000000000000C2B8                 mov     rdx, rbx        ; format
.text:000000000000C2BB                 mov     rcx, rax
.text:000000000000C2BE                 pop     rbx
.text:000000000000C2BF                 pop     rbp
.text:000000000000C2C0                 pop     r12
.text:000000000000C2C2                 xor     esi, esi        ; errnum
.text:000000000000C2C4                 xor     edi, edi        ; status
.text:000000000000C2C6                 xor     eax, eax
.text:000000000000C2C8                 jmp     _error
.text:000000000000C2C8 ; ---------------------------------------------------------------------------
.text:000000000000C2CD                 align 10h
.text:000000000000C2D0
.text:000000000000C2D0 loc_C2D0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:000000000000C2D0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:000000000000C2D7                 xor     edi, edi        ; domainname
.text:000000000000C2D9                 call    _dcgettext
.text:000000000000C2DE                 mov     rbx, rax
.text:000000000000C2E1                 jmp     short loc_C296
.text:000000000000C2E1 ; } // starts at C270
.text:000000000000C2E1 argmatch_invalid endp
.text:000000000000C2E1
.text:000000000000C2E1 ; ---------------------------------------------------------------------------
.text:000000000000C2E3                 align 10h
.text:000000000000C2F0
.text:000000000000C2F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2F0
.text:000000000000C2F0 ; Attributes: info_from_lumina
.text:000000000000C2F0
.text:000000000000C2F0 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C2F0                 public argmatch_valid
.text:000000000000C2F0 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:000000000000C2F0 ; __unwind {
.text:000000000000C2F0                 push    r15
.text:000000000000C2F2                 push    r14
.text:000000000000C2F4                 mov     r14, rdi
.text:000000000000C2F7                 push    r13
.text:000000000000C2F9                 push    r12
.text:000000000000C2FB                 xor     edi, edi        ; domainname
.text:000000000000C2FD                 push    rbp
.text:000000000000C2FE                 push    rbx
.text:000000000000C2FF                 mov     rbp, rsi
.text:000000000000C302                 lea     rsi, aValidArguments_0 ; "Valid arguments are:"
.text:000000000000C309                 mov     r12, rdx
.text:000000000000C30C                 mov     edx, 5          ; category
.text:000000000000C311                 sub     rsp, 8
.text:000000000000C315                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000C31C                 call    _dcgettext
.text:000000000000C321                 mov     rdi, rax        ; s
.text:000000000000C324                 mov     rsi, rbx        ; stream
.text:000000000000C327                 call    _fputs_unlocked
.text:000000000000C32C                 mov     r15, [r14]
.text:000000000000C32F                 test    r15, r15
.text:000000000000C332                 jz      loc_C3C8
.text:000000000000C338                 xor     r13d, r13d
.text:000000000000C33B                 xor     ebx, ebx
.text:000000000000C33D                 jmp     short loc_C378
.text:000000000000C33D ; ---------------------------------------------------------------------------
.text:000000000000C33F                 align 20h
.text:000000000000C340
.text:000000000000C340 loc_C340:                               ; CODE XREF: argmatch_valid+8B↓j
.text:000000000000C340                                         ; argmatch_valid+9D↓j
.text:000000000000C340                 mov     rdi, r15
.text:000000000000C343                 add     rbx, 1
.text:000000000000C347                 mov     r13, rbp
.text:000000000000C34A                 call    quote
.text:000000000000C34F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000C356                 lea     rdx, aS_0       ; "\n  - %s"
.text:000000000000C35D                 mov     rcx, rax
.text:000000000000C360                 mov     esi, 1
.text:000000000000C365                 xor     eax, eax
.text:000000000000C367                 add     rbp, r12
.text:000000000000C36A                 call    ___fprintf_chk
.text:000000000000C36F                 mov     r15, [r14+rbx*8]
.text:000000000000C373                 test    r15, r15
.text:000000000000C376                 jz      short loc_C3C8
.text:000000000000C378
.text:000000000000C378 loc_C378:                               ; CODE XREF: argmatch_valid+4D↑j
.text:000000000000C378                                         ; argmatch_valid+D2↓j
.text:000000000000C378                 test    rbx, rbx
.text:000000000000C37B                 jz      short loc_C340
.text:000000000000C37D                 mov     rdx, r12        ; n
.text:000000000000C380                 mov     rsi, rbp        ; s2
.text:000000000000C383                 mov     rdi, r13        ; s1
.text:000000000000C386                 call    _memcmp
.text:000000000000C38B                 test    eax, eax
.text:000000000000C38D                 jnz     short loc_C340
.text:000000000000C38F                 mov     rdi, r15
.text:000000000000C392                 add     rbx, 1
.text:000000000000C396                 add     rbp, r12
.text:000000000000C399                 call    quote
.text:000000000000C39E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000C3A5                 lea     rdx, aS_1       ; ", %s"
.text:000000000000C3AC                 mov     rcx, rax
.text:000000000000C3AF                 mov     esi, 1
.text:000000000000C3B4                 xor     eax, eax
.text:000000000000C3B6                 call    ___fprintf_chk
.text:000000000000C3BB                 mov     r15, [r14+rbx*8]
.text:000000000000C3BF                 test    r15, r15
.text:000000000000C3C2                 jnz     short loc_C378
.text:000000000000C3C4                 nop     dword ptr [rax+00h]
.text:000000000000C3C8
.text:000000000000C3C8 loc_C3C8:                               ; CODE XREF: argmatch_valid+42↑j
.text:000000000000C3C8                                         ; argmatch_valid+86↑j
.text:000000000000C3C8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000C3CF                 mov     rax, [rdi+28h]
.text:000000000000C3D3                 cmp     rax, [rdi+30h]
.text:000000000000C3D7                 jnb     short loc_C3F8
.text:000000000000C3D9                 lea     rdx, [rax+1]
.text:000000000000C3DD                 mov     [rdi+28h], rdx
.text:000000000000C3E1                 mov     byte ptr [rax], 0Ah
.text:000000000000C3E4                 add     rsp, 8
.text:000000000000C3E8                 pop     rbx
.text:000000000000C3E9                 pop     rbp
.text:000000000000C3EA                 pop     r12
.text:000000000000C3EC                 pop     r13
.text:000000000000C3EE                 pop     r14
.text:000000000000C3F0                 pop     r15
.text:000000000000C3F2                 retn
.text:000000000000C3F2 ; ---------------------------------------------------------------------------
.text:000000000000C3F3                 align 8
.text:000000000000C3F8
.text:000000000000C3F8 loc_C3F8:                               ; CODE XREF: argmatch_valid+E7↑j
.text:000000000000C3F8                 add     rsp, 8
.text:000000000000C3FC                 mov     esi, 0Ah        ; int
.text:000000000000C401                 pop     rbx
.text:000000000000C402                 pop     rbp
.text:000000000000C403                 pop     r12
.text:000000000000C405                 pop     r13
.text:000000000000C407                 pop     r14
.text:000000000000C409                 pop     r15
.text:000000000000C40B                 jmp     ___overflow
.text:000000000000C40B ; } // starts at C2F0
.text:000000000000C40B argmatch_valid  endp
.text:000000000000C40B
.text:000000000000C410
.text:000000000000C410 ; =============== S U B R O U T I N E =======================================
.text:000000000000C410
.text:000000000000C410 ; Attributes: info_from_lumina
.text:000000000000C410
.text:000000000000C410 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:000000000000C410                 public __xargmatch_internal
.text:000000000000C410 __xargmatch_internal proc near          ; CODE XREF: main+5E1↑p
.text:000000000000C410                                         ; main+624↑p ...
.text:000000000000C410 ; __unwind {
.text:000000000000C410                 push    r15
.text:000000000000C412                 push    r14
.text:000000000000C414                 mov     r14, rdi
.text:000000000000C417                 push    r13
.text:000000000000C419                 push    r12
.text:000000000000C41B                 mov     r12, rsi
.text:000000000000C41E                 push    rbp
.text:000000000000C41F                 push    rbx
.text:000000000000C420                 mov     rbp, rcx
.text:000000000000C423                 mov     rbx, rdx
.text:000000000000C426                 mov     rcx, r8
.text:000000000000C429                 mov     rdx, rbp
.text:000000000000C42C                 sub     rsp, 8
.text:000000000000C430                 mov     rsi, rbx
.text:000000000000C433                 mov     rdi, r12
.text:000000000000C436                 mov     r15, r8
.text:000000000000C439                 mov     r13, r9
.text:000000000000C43C                 call    argmatch
.text:000000000000C441                 test    rax, rax
.text:000000000000C444                 js      short loc_C455
.text:000000000000C446
.text:000000000000C446 loc_C446:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:000000000000C446                 add     rsp, 8
.text:000000000000C44A                 pop     rbx
.text:000000000000C44B                 pop     rbp
.text:000000000000C44C                 pop     r12
.text:000000000000C44E                 pop     r13
.text:000000000000C450                 pop     r14
.text:000000000000C452                 pop     r15
.text:000000000000C454                 retn
.text:000000000000C455 ; ---------------------------------------------------------------------------
.text:000000000000C455
.text:000000000000C455 loc_C455:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:000000000000C455                 mov     rdx, rax
.text:000000000000C458                 mov     rsi, r12
.text:000000000000C45B                 mov     rdi, r14
.text:000000000000C45E                 call    argmatch_invalid
.text:000000000000C463                 mov     rdx, r15
.text:000000000000C466                 mov     rsi, rbp
.text:000000000000C469                 mov     rdi, rbx
.text:000000000000C46C                 call    argmatch_valid
.text:000000000000C471                 call    r13
.text:000000000000C474                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C47B                 jmp     short loc_C446
.text:000000000000C47B ; } // starts at C410
.text:000000000000C47B __xargmatch_internal endp
.text:000000000000C47B
.text:000000000000C47B ; ---------------------------------------------------------------------------
.text:000000000000C47D                 align 20h
.text:000000000000C480
.text:000000000000C480 ; =============== S U B R O U T I N E =======================================
.text:000000000000C480
.text:000000000000C480 ; Attributes: info_from_lumina
.text:000000000000C480
.text:000000000000C480 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:000000000000C480                 public argmatch_to_argument
.text:000000000000C480 argmatch_to_argument proc near
.text:000000000000C480 ; __unwind {
.text:000000000000C480                 push    r14
.text:000000000000C482                 push    r13
.text:000000000000C484                 push    r12
.text:000000000000C486                 push    rbp
.text:000000000000C487                 push    rbx
.text:000000000000C488                 mov     r14, [rsi]
.text:000000000000C48B                 test    r14, r14
.text:000000000000C48E                 jz      short loc_C4C1
.text:000000000000C490                 mov     r12, rcx
.text:000000000000C493                 mov     r13, rdi
.text:000000000000C496                 mov     rbp, rdx
.text:000000000000C499                 lea     rbx, [rsi+8]
.text:000000000000C49D                 jmp     short loc_C4AF
.text:000000000000C49D ; ---------------------------------------------------------------------------
.text:000000000000C49F                 align 20h
.text:000000000000C4A0
.text:000000000000C4A0 loc_C4A0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:000000000000C4A0                 mov     r14, [rbx]
.text:000000000000C4A3                 add     rbp, r12
.text:000000000000C4A6                 add     rbx, 8
.text:000000000000C4AA                 test    r14, r14
.text:000000000000C4AD                 jz      short loc_C4C1
.text:000000000000C4AF
.text:000000000000C4AF loc_C4AF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:000000000000C4AF                 mov     rdx, r12        ; n
.text:000000000000C4B2                 mov     rsi, rbp        ; s2
.text:000000000000C4B5                 mov     rdi, r13        ; s1
.text:000000000000C4B8                 call    _memcmp
.text:000000000000C4BD                 test    eax, eax
.text:000000000000C4BF                 jnz     short loc_C4A0
.text:000000000000C4C1
.text:000000000000C4C1 loc_C4C1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:000000000000C4C1                                         ; argmatch_to_argument+2D↑j
.text:000000000000C4C1                 pop     rbx
.text:000000000000C4C2                 mov     rax, r14
.text:000000000000C4C5                 pop     rbp
.text:000000000000C4C6                 pop     r12
.text:000000000000C4C8                 pop     r13
.text:000000000000C4CA                 pop     r14
.text:000000000000C4CC                 retn
.text:000000000000C4CC ; } // starts at C480
.text:000000000000C4CC argmatch_to_argument endp
.text:000000000000C4CC
.text:000000000000C4CC ; ---------------------------------------------------------------------------
.text:000000000000C4CD                 align 10h
.text:000000000000C4D0
.text:000000000000C4D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C4D0
.text:000000000000C4D0
.text:000000000000C4D0                 public c_strncasecmp
.text:000000000000C4D0 c_strncasecmp   proc near               ; CODE XREF: print_name_with_quoting+2BA↑p
.text:000000000000C4D0 ; __unwind {
.text:000000000000C4D0                 cmp     rdi, rsi
.text:000000000000C4D3                 jz      short loc_C530
.text:000000000000C4D5                 test    rdx, rdx
.text:000000000000C4D8                 jnz     short loc_C4F0
.text:000000000000C4DA                 jmp     short loc_C530
.text:000000000000C4DA ; ---------------------------------------------------------------------------
.text:000000000000C4DC                 align 20h
.text:000000000000C4E0
.text:000000000000C4E0 loc_C4E0:                               ; CODE XREF: c_strncasecmp+4D↓j
.text:000000000000C4E0                 test    al, al
.text:000000000000C4E2                 jz      short loc_C51F
.text:000000000000C4E4                 add     rdi, 1
.text:000000000000C4E8                 add     rsi, 1
.text:000000000000C4EC                 cmp     al, cl
.text:000000000000C4EE                 jnz     short loc_C51F
.text:000000000000C4F0
.text:000000000000C4F0 loc_C4F0:                               ; CODE XREF: c_strncasecmp+8↑j
.text:000000000000C4F0                 movzx   eax, byte ptr [rdi]
.text:000000000000C4F3                 mov     ecx, eax
.text:000000000000C4F5                 lea     r8d, [rax+20h]
.text:000000000000C4F9                 sub     ecx, 41h ; 'A'
.text:000000000000C4FC                 cmp     cl, 1Ah
.text:000000000000C4FF                 movzx   ecx, byte ptr [rsi]
.text:000000000000C502                 cmovb   eax, r8d
.text:000000000000C506                 mov     r8d, ecx
.text:000000000000C509                 lea     r10d, [rcx+20h]
.text:000000000000C50D                 sub     r8d, 41h ; 'A'
.text:000000000000C511                 cmp     r8b, 1Ah
.text:000000000000C515                 cmovb   ecx, r10d
.text:000000000000C519                 sub     rdx, 1
.text:000000000000C51D                 jnz     short loc_C4E0
.text:000000000000C51F
.text:000000000000C51F loc_C51F:                               ; CODE XREF: c_strncasecmp+12↑j
.text:000000000000C51F                                         ; c_strncasecmp+1E↑j
.text:000000000000C51F                 movzx   ecx, cl
.text:000000000000C522                 movzx   eax, al
.text:000000000000C525                 sub     eax, ecx
.text:000000000000C527                 retn
.text:000000000000C527 ; ---------------------------------------------------------------------------
.text:000000000000C528                 align 10h
.text:000000000000C530
.text:000000000000C530 loc_C530:                               ; CODE XREF: c_strncasecmp+3↑j
.text:000000000000C530                                         ; c_strncasecmp+A↑j
.text:000000000000C530                 xor     eax, eax
.text:000000000000C532                 retn
.text:000000000000C532 ; } // starts at C4D0
.text:000000000000C532 c_strncasecmp   endp
.text:000000000000C532
.text:000000000000C532 ; ---------------------------------------------------------------------------
.text:000000000000C533                 align 20h
.text:000000000000C540
.text:000000000000C540 ; =============== S U B R O U T I N E =======================================
.text:000000000000C540
.text:000000000000C540 ; Attributes: info_from_lumina
.text:000000000000C540
.text:000000000000C540 ; char *__fastcall canonicalize_filename_mode(const char *name, canonicalize_mode_t_0 can_mode)
.text:000000000000C540                 public canonicalize_filename_mode
.text:000000000000C540 canonicalize_filename_mode proc near    ; CODE XREF: gobble_file_constprop_52+572↑p
.text:000000000000C540                                         ; print_dir+61A↑p
.text:000000000000C540
.text:000000000000C540 var_114         = dword ptr -114h
.text:000000000000C540 stat_buf        = qword ptr -110h
.text:000000000000C540 var_108         = qword ptr -108h
.text:000000000000C540 var_FD          = byte ptr -0FDh
.text:000000000000C540 var_FC          = dword ptr -0FCh
.text:000000000000C540 n               = qword ptr -0F8h
.text:000000000000C540 ptr             = qword ptr -0F0h
.text:000000000000C540 var_E8          = qword ptr -0E8h
.text:000000000000C540 var_E0          = qword ptr -0E0h
.text:000000000000C540 var_D8          = byte ptr -0D8h
.text:000000000000C540 var_C0          = dword ptr -0C0h
.text:000000000000C540 var_A8          = qword ptr -0A8h
.text:000000000000C540 var_40          = qword ptr -40h
.text:000000000000C540
.text:000000000000C540 ; __unwind {
.text:000000000000C540                 push    r15
.text:000000000000C542                 push    r14
.text:000000000000C544                 push    r13
.text:000000000000C546                 push    r12
.text:000000000000C548                 push    rbp
.text:000000000000C549                 push    rbx
.text:000000000000C54A                 sub     rsp, 0E8h
.text:000000000000C551                 mov     rax, fs:28h
.text:000000000000C55A                 mov     [rsp+118h+var_40], rax
.text:000000000000C562                 xor     eax, eax
.text:000000000000C564                 mov     eax, esi
.text:000000000000C566                 and     eax, 4
.text:000000000000C569                 setnz   [rsp+118h+var_FD]
.text:000000000000C56E                 and     esi, 3
.text:000000000000C571                 mov     [rsp+118h+var_FC], eax
.text:000000000000C575                 lea     eax, [rsi-1]
.text:000000000000C578                 mov     [rsp+118h+var_114], esi
.text:000000000000C57C                 test    esi, eax
.text:000000000000C57E                 jnz     loc_CAD0
.text:000000000000C584                 test    rdi, rdi
.text:000000000000C587                 mov     r14, rdi
.text:000000000000C58A                 jz      loc_CAD0
.text:000000000000C590                 movzx   eax, byte ptr [rdi]
.text:000000000000C593                 test    al, al
.text:000000000000C595                 jz      loc_CB10
.text:000000000000C59B                 cmp     al, 2Fh ; '/'
.text:000000000000C59D                 jz      loc_CA60
.text:000000000000C5A3                 call    xgetcwd
.text:000000000000C5A8                 test    rax, rax
.text:000000000000C5AB                 mov     rbp, rax
.text:000000000000C5AE                 jz      loc_C760
.text:000000000000C5B4                 mov     rdi, rax        ; s
.text:000000000000C5B7                 call    _strlen
.text:000000000000C5BC                 cmp     rax, 0FFFh
.text:000000000000C5C2                 mov     r15, rax
.text:000000000000C5C5                 jbe     loc_CA80
.text:000000000000C5CB                 add     r15, rbp
.text:000000000000C5CE                 mov     rbx, r15
.text:000000000000C5D1
.text:000000000000C5D1 loc_C5D1:                               ; CODE XREF: canonicalize_filename_mode+53B↓j
.text:000000000000C5D1                                         ; canonicalize_filename_mode+55A↓j
.text:000000000000C5D1                 lea     rax, [rsp+118h+var_D8]
.text:000000000000C5D6                 mov     [rsp+118h+n], r14
.text:000000000000C5DB                 mov     [rsp+118h+var_108], 0
.text:000000000000C5E4                 mov     [rsp+118h+var_E8], 0
.text:000000000000C5ED                 mov     [rsp+118h+ptr], 0
.text:000000000000C5F6                 mov     [rsp+118h+stat_buf], rax
.text:000000000000C5FB
.text:000000000000C5FB loc_C5FB:                               ; CODE XREF: canonicalize_filename_mode+3D5↓j
.text:000000000000C5FB                                         ; canonicalize_filename_mode+3F0↓j ...
.text:000000000000C5FB                 movzx   eax, byte ptr [r14]
.text:000000000000C5FF                 test    al, al
.text:000000000000C601                 jz      loc_C70F
.text:000000000000C607                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C610
.text:000000000000C610 loc_C610:                               ; CODE XREF: canonicalize_filename_mode+1C9↓j
.text:000000000000C610                 cmp     al, 2Fh ; '/'
.text:000000000000C612                 jnz     short loc_C62C
.text:000000000000C614                 nop     dword ptr [rax+00h]
.text:000000000000C618
.text:000000000000C618 loc_C618:                               ; CODE XREF: canonicalize_filename_mode+E2↓j
.text:000000000000C618                 add     r14, 1
.text:000000000000C61C                 movzx   eax, byte ptr [r14]
.text:000000000000C620                 cmp     al, 2Fh ; '/'
.text:000000000000C622                 jz      short loc_C618
.text:000000000000C624                 test    al, al
.text:000000000000C626                 jz      loc_C8F0
.text:000000000000C62C
.text:000000000000C62C loc_C62C:                               ; CODE XREF: canonicalize_filename_mode+D2↑j
.text:000000000000C62C                 mov     r13, r14
.text:000000000000C62F                 jmp     short loc_C63D
.text:000000000000C62F ; ---------------------------------------------------------------------------
.text:000000000000C631                 align 8
.text:000000000000C638
.text:000000000000C638 loc_C638:                               ; CODE XREF: canonicalize_filename_mode+108↓j
.text:000000000000C638                 cmp     dl, 2Fh ; '/'
.text:000000000000C63B                 jz      short loc_C64A
.text:000000000000C63D
.text:000000000000C63D loc_C63D:                               ; CODE XREF: canonicalize_filename_mode+EF↑j
.text:000000000000C63D                 add     r13, 1
.text:000000000000C641                 movzx   edx, byte ptr [r13+0]
.text:000000000000C646                 test    dl, dl
.text:000000000000C648                 jnz     short loc_C638
.text:000000000000C64A
.text:000000000000C64A loc_C64A:                               ; CODE XREF: canonicalize_filename_mode+FB↑j
.text:000000000000C64A                                         ; canonicalize_filename_mode+3B3↓j
.text:000000000000C64A                 cmp     r13, r14
.text:000000000000C64D                 jz      loc_C70F
.text:000000000000C653                 mov     r12, r13
.text:000000000000C656                 sub     r12, r14
.text:000000000000C659                 cmp     r12, 1
.text:000000000000C65D                 jz      loc_C830
.text:000000000000C663                 cmp     r12, 2
.text:000000000000C667                 jnz     short loc_C671
.text:000000000000C669                 cmp     al, 2Eh ; '.'
.text:000000000000C66B                 jz      loc_C900
.text:000000000000C671
.text:000000000000C671 loc_C671:                               ; CODE XREF: canonicalize_filename_mode+127↑j
.text:000000000000C671                                         ; canonicalize_filename_mode+2F2↓j ...
.text:000000000000C671                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000C676                 jz      short loc_C680
.text:000000000000C678                 mov     byte ptr [r15], 2Fh ; '/'
.text:000000000000C67C                 add     r15, 1
.text:000000000000C680
.text:000000000000C680 loc_C680:                               ; CODE XREF: canonicalize_filename_mode+136↑j
.text:000000000000C680                 lea     rax, [r15+r12]
.text:000000000000C684                 cmp     rbx, rax
.text:000000000000C687                 ja      short loc_C6BA
.text:000000000000C689                 sub     rbx, rbp
.text:000000000000C68C                 sub     r15, rbp
.text:000000000000C68F                 mov     rdi, rbp
.text:000000000000C692                 lea     rax, [r12+rbx+1]
.text:000000000000C697                 add     rbx, 1000h
.text:000000000000C69E                 cmp     r12, 1000h
.text:000000000000C6A5                 cmovge  rbx, rax
.text:000000000000C6A9                 mov     rsi, rbx
.text:000000000000C6AC                 call    xrealloc
.text:000000000000C6B1                 mov     rbp, rax
.text:000000000000C6B4                 add     rbx, rax
.text:000000000000C6B7                 add     r15, rax
.text:000000000000C6BA
.text:000000000000C6BA loc_C6BA:                               ; CODE XREF: canonicalize_filename_mode+147↑j
.text:000000000000C6BA                 mov     rdi, r15        ; dest
.text:000000000000C6BD                 mov     rdx, r12        ; n
.text:000000000000C6C0                 mov     rsi, r14        ; src
.text:000000000000C6C3                 call    _memcpy
.text:000000000000C6C8                 cmp     [rsp+118h+var_114], 2
.text:000000000000C6CD                 lea     r15, [r15+r12]
.text:000000000000C6D1                 mov     byte ptr [r15], 0
.text:000000000000C6D5                 jnz     loc_C790
.text:000000000000C6DB                 cmp     [rsp+118h+var_FD], 0
.text:000000000000C6E0                 jz      loc_C790
.text:000000000000C6E6
.text:000000000000C6E6 loc_C6E6:                               ; CODE XREF: canonicalize_filename_mode+290↓j
.text:000000000000C6E6                 mov     [rsp+118h+var_C0], 0
.text:000000000000C6EE
.text:000000000000C6EE loc_C6EE:                               ; CODE XREF: canonicalize_filename_mode+31B↓j
.text:000000000000C6EE                 cmp     byte ptr [r13+0], 0
.text:000000000000C6F3                 jz      short loc_C700
.text:000000000000C6F5                 cmp     [rsp+118h+var_114], 2
.text:000000000000C6FA                 jnz     loc_CB57
.text:000000000000C700
.text:000000000000C700 loc_C700:                               ; CODE XREF: canonicalize_filename_mode+1B3↑j
.text:000000000000C700                                         ; canonicalize_filename_mode+2B8↓j ...
.text:000000000000C700                 mov     r14, r13
.text:000000000000C703                 movzx   eax, byte ptr [r14]
.text:000000000000C707                 test    al, al
.text:000000000000C709                 jnz     loc_C610
.text:000000000000C70F
.text:000000000000C70F loc_C70F:                               ; CODE XREF: canonicalize_filename_mode+C1↑j
.text:000000000000C70F                                         ; canonicalize_filename_mode+10D↑j
.text:000000000000C70F                 lea     rax, [rbp+1]
.text:000000000000C713                 cmp     r15, rax
.text:000000000000C716                 jbe     short loc_C723
.text:000000000000C718                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000C71D                 jnz     short loc_C723
.text:000000000000C71F                 sub     r15, 1
.text:000000000000C723
.text:000000000000C723 loc_C723:                               ; CODE XREF: canonicalize_filename_mode+1D6↑j
.text:000000000000C723                                         ; canonicalize_filename_mode+1DD↑j
.text:000000000000C723                 lea     rax, [r15+1]
.text:000000000000C727                 mov     byte ptr [r15], 0
.text:000000000000C72B                 cmp     rbx, rax
.text:000000000000C72E                 jz      short loc_C742
.text:000000000000C730                 sub     r15, rbp
.text:000000000000C733                 mov     rdi, rbp
.text:000000000000C736                 lea     rsi, [r15+1]
.text:000000000000C73A                 call    xrealloc
.text:000000000000C73F                 mov     rbp, rax
.text:000000000000C742
.text:000000000000C742 loc_C742:                               ; CODE XREF: canonicalize_filename_mode+1EE↑j
.text:000000000000C742                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:000000000000C747                 call    free
.text:000000000000C74C                 mov     rax, [rsp+118h+var_108]
.text:000000000000C751                 test    rax, rax
.text:000000000000C754                 jz      short loc_C760
.text:000000000000C756                 mov     rdi, rax        ; ptr
.text:000000000000C759                 call    hash_free
.text:000000000000C75E                 xchg    ax, ax
.text:000000000000C760
.text:000000000000C760 loc_C760:                               ; CODE XREF: canonicalize_filename_mode+6E↑j
.text:000000000000C760                                         ; canonicalize_filename_mode+214↑j ...
.text:000000000000C760                 mov     rcx, [rsp+118h+var_40]
.text:000000000000C768                 xor     rcx, fs:28h
.text:000000000000C771                 mov     rax, rbp
.text:000000000000C774                 jnz     loc_CB71
.text:000000000000C77A                 add     rsp, 0E8h
.text:000000000000C781                 pop     rbx
.text:000000000000C782                 pop     rbp
.text:000000000000C783                 pop     r12
.text:000000000000C785                 pop     r13
.text:000000000000C787                 pop     r14
.text:000000000000C789                 pop     r15
.text:000000000000C78B                 retn
.text:000000000000C78B ; ---------------------------------------------------------------------------
.text:000000000000C78C                 align 10h
.text:000000000000C790
.text:000000000000C790 loc_C790:                               ; CODE XREF: canonicalize_filename_mode+195↑j
.text:000000000000C790                                         ; canonicalize_filename_mode+1A0↑j
.text:000000000000C790                 mov     eax, [rsp+118h+var_FC]
.text:000000000000C794                 mov     rdx, [rsp+118h+stat_buf] ; stat_buf
.text:000000000000C799                 mov     rsi, rbp        ; filename
.text:000000000000C79C                 mov     edi, 1          ; ver
.text:000000000000C7A1                 test    eax, eax
.text:000000000000C7A3                 jz      loc_C860
.text:000000000000C7A9                 call    ___xstat
.text:000000000000C7AE                 test    eax, eax
.text:000000000000C7B0                 setnz   al
.text:000000000000C7B3
.text:000000000000C7B3 loc_C7B3:                               ; CODE XREF: canonicalize_filename_mode+32A↓j
.text:000000000000C7B3                 test    al, al
.text:000000000000C7B5                 jz      loc_C840
.text:000000000000C7BB                 call    ___errno_location
.text:000000000000C7C0                 mov     r14, rax
.text:000000000000C7C3                 mov     edx, [rax]
.text:000000000000C7C5                 mov     eax, [rsp+118h+var_114]
.text:000000000000C7C9                 test    eax, eax
.text:000000000000C7CB                 jz      short loc_C7FE
.text:000000000000C7CD                 cmp     eax, 1
.text:000000000000C7D0                 jnz     loc_C6E6
.text:000000000000C7D6                 lea     rsi, aDired+8   ; accept
.text:000000000000C7DD                 mov     rdi, r13        ; s
.text:000000000000C7E0                 mov     dword ptr [rsp+118h+var_E0], edx
.text:000000000000C7E4                 call    _strspn
.text:000000000000C7E9                 cmp     byte ptr [r13+rax+0], 0
.text:000000000000C7EF                 mov     edx, dword ptr [rsp+118h+var_E0]
.text:000000000000C7F3                 jnz     short loc_C7FE
.text:000000000000C7F5                 cmp     edx, 2
.text:000000000000C7F8                 jz      loc_C700
.text:000000000000C7FE
.text:000000000000C7FE loc_C7FE:                               ; CODE XREF: canonicalize_filename_mode+28B↑j
.text:000000000000C7FE                                         ; canonicalize_filename_mode+2B3↑j
.text:000000000000C7FE                 mov     r12, r14
.text:000000000000C801
.text:000000000000C801 loc_C801:                               ; CODE XREF: canonicalize_filename_mode+624↓j
.text:000000000000C801                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:000000000000C806                 mov     [rsp+118h+var_114], edx
.text:000000000000C80A                 call    free
.text:000000000000C80F                 mov     rdi, rbp        ; ptr
.text:000000000000C812                 call    free
.text:000000000000C817                 cmp     [rsp+118h+var_108], 0
.text:000000000000C81D                 mov     edx, [rsp+118h+var_114]
.text:000000000000C821                 jz      loc_C8DC
.text:000000000000C827                 jmp     loc_C8CA
.text:000000000000C827 ; ---------------------------------------------------------------------------
.text:000000000000C82C                 align 10h
.text:000000000000C830
.text:000000000000C830 loc_C830:                               ; CODE XREF: canonicalize_filename_mode+11D↑j
.text:000000000000C830                 cmp     al, 2Eh ; '.'
.text:000000000000C832                 jnz     loc_C671
.text:000000000000C838                 jmp     loc_C700
.text:000000000000C838 ; ---------------------------------------------------------------------------
.text:000000000000C83D                 align 20h
.text:000000000000C840
.text:000000000000C840 loc_C840:                               ; CODE XREF: canonicalize_filename_mode+275↑j
.text:000000000000C840                 mov     eax, [rsp+118h+var_C0]
.text:000000000000C844                 and     eax, 0F000h
.text:000000000000C849                 cmp     eax, 0A000h
.text:000000000000C84E                 jz      short loc_C870
.text:000000000000C850                 cmp     eax, 4000h
.text:000000000000C855                 jz      loc_C700
.text:000000000000C85B                 jmp     loc_C6EE
.text:000000000000C860 ; ---------------------------------------------------------------------------
.text:000000000000C860
.text:000000000000C860 loc_C860:                               ; CODE XREF: canonicalize_filename_mode+263↑j
.text:000000000000C860                 call    ___lxstat
.text:000000000000C865                 test    eax, eax
.text:000000000000C867                 setnz   al
.text:000000000000C86A                 jmp     loc_C7B3
.text:000000000000C86A ; ---------------------------------------------------------------------------
.text:000000000000C86F                 align 10h
.text:000000000000C870
.text:000000000000C870 loc_C870:                               ; CODE XREF: canonicalize_filename_mode+30E↑j
.text:000000000000C870                 cmp     [rsp+118h+var_108], 0
.text:000000000000C876                 jz      loc_CA26
.text:000000000000C87C
.text:000000000000C87C loc_C87C:                               ; CODE XREF: canonicalize_filename_mode+50F↓j
.text:000000000000C87C                 mov     rdx, [rsp+118h+stat_buf]
.text:000000000000C881                 mov     rsi, [rsp+118h+n]
.text:000000000000C886                 mov     rdi, [rsp+118h+var_108]
.text:000000000000C88B                 call    seen_file
.text:000000000000C890                 test    al, al
.text:000000000000C892                 jz      loc_C950
.text:000000000000C898                 cmp     [rsp+118h+var_114], 2
.text:000000000000C89D                 jz      loc_C700
.text:000000000000C8A3                 call    ___errno_location
.text:000000000000C8A8                 mov     edx, 28h ; '('
.text:000000000000C8AD                 mov     r12, rax
.text:000000000000C8B0
.text:000000000000C8B0 loc_C8B0:                               ; CODE XREF: canonicalize_filename_mode+5BF↓j
.text:000000000000C8B0                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:000000000000C8B5                 mov     [rsp+118h+var_114], edx
.text:000000000000C8B9                 call    free
.text:000000000000C8BE                 mov     rdi, rbp        ; ptr
.text:000000000000C8C1                 call    free
.text:000000000000C8C6                 mov     edx, [rsp+118h+var_114]
.text:000000000000C8CA
.text:000000000000C8CA loc_C8CA:                               ; CODE XREF: canonicalize_filename_mode+2E7↑j
.text:000000000000C8CA                 mov     rdi, [rsp+118h+var_108] ; ptr
.text:000000000000C8CF                 mov     [rsp+118h+var_114], edx
.text:000000000000C8D3                 call    hash_free
.text:000000000000C8D8                 mov     edx, [rsp+118h+var_114]
.text:000000000000C8DC
.text:000000000000C8DC loc_C8DC:                               ; CODE XREF: canonicalize_filename_mode+2E1↑j
.text:000000000000C8DC                 mov     [r12], edx
.text:000000000000C8E0                 xor     ebp, ebp
.text:000000000000C8E2                 jmp     loc_C760
.text:000000000000C8E2 ; ---------------------------------------------------------------------------
.text:000000000000C8E7                 align 10h
.text:000000000000C8F0
.text:000000000000C8F0 loc_C8F0:                               ; CODE XREF: canonicalize_filename_mode+E6↑j
.text:000000000000C8F0                 mov     r13, r14
.text:000000000000C8F3                 jmp     loc_C64A
.text:000000000000C8F3 ; ---------------------------------------------------------------------------
.text:000000000000C8F8                 align 20h
.text:000000000000C900
.text:000000000000C900 loc_C900:                               ; CODE XREF: canonicalize_filename_mode+12B↑j
.text:000000000000C900                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:000000000000C905                 jnz     loc_C671
.text:000000000000C90B                 lea     rax, [rbp+1]
.text:000000000000C90F                 mov     r14, r13
.text:000000000000C912                 cmp     r15, rax
.text:000000000000C915                 jbe     loc_C5FB
.text:000000000000C91B                 lea     rax, [r15-1]
.text:000000000000C91F                 cmp     rbp, rax
.text:000000000000C922                 jnb     loc_CB69
.text:000000000000C928                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:000000000000C92D                 mov     r15, rax
.text:000000000000C930                 jz      loc_C5FB
.text:000000000000C936
.text:000000000000C936 loc_C936:                               ; CODE XREF: canonicalize_filename_mode+40E↓j
.text:000000000000C936                 sub     r15, 1
.text:000000000000C93A                 cmp     rbp, r15
.text:000000000000C93D                 jz      loc_C700
.text:000000000000C943                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000C948                 jz      loc_C700
.text:000000000000C94E                 jmp     short loc_C936
.text:000000000000C950 ; ---------------------------------------------------------------------------
.text:000000000000C950
.text:000000000000C950 loc_C950:                               ; CODE XREF: canonicalize_filename_mode+352↑j
.text:000000000000C950                 mov     rdx, [rsp+118h+stat_buf]
.text:000000000000C955                 mov     rsi, [rsp+118h+n]
.text:000000000000C95A                 mov     rdi, [rsp+118h+var_108]
.text:000000000000C95F                 call    record_file
.text:000000000000C964                 mov     rsi, [rsp+118h+var_A8]
.text:000000000000C969                 mov     rdi, rbp        ; path
.text:000000000000C96C                 call    areadlink_with_size
.text:000000000000C971                 test    rax, rax
.text:000000000000C974                 mov     r14, rax
.text:000000000000C977                 jz      loc_CAE2
.text:000000000000C97D                 mov     rdi, rax        ; s
.text:000000000000C980                 call    _strlen
.text:000000000000C985                 mov     rdi, r13        ; s
.text:000000000000C988                 mov     r12, rax
.text:000000000000C98B                 mov     [rsp+118h+n], rax
.text:000000000000C990                 call    _strlen
.text:000000000000C995                 cmp     [rsp+118h+var_E8], 0
.text:000000000000C99B                 mov     rdx, rax
.text:000000000000C99E                 lea     rcx, [r12+rdx+1]
.text:000000000000C9A3                 jz      loc_CA9F
.text:000000000000C9A9                 cmp     [rsp+118h+var_E8], rcx
.text:000000000000C9AE                 jnb     short loc_C9D1
.text:000000000000C9B0                 mov     rdi, [rsp+118h+ptr]
.text:000000000000C9B5                 mov     rsi, rcx
.text:000000000000C9B8                 mov     [rsp+118h+var_E0], rdx
.text:000000000000C9BD                 mov     [rsp+118h+var_E8], rcx
.text:000000000000C9C2                 call    xrealloc
.text:000000000000C9C7                 mov     rdx, [rsp+118h+var_E0]
.text:000000000000C9CC                 mov     [rsp+118h+ptr], rax
.text:000000000000C9D1
.text:000000000000C9D1 loc_C9D1:                               ; CODE XREF: canonicalize_filename_mode+46E↑j
.text:000000000000C9D1                                         ; canonicalize_filename_mode+58B↓j
.text:000000000000C9D1                 mov     r12, [rsp+118h+ptr]
.text:000000000000C9D6                 mov     rdi, [rsp+118h+n]
.text:000000000000C9DB                 add     rdx, 1          ; n
.text:000000000000C9DF                 mov     rsi, r13        ; src
.text:000000000000C9E2                 add     rdi, r12        ; dest
.text:000000000000C9E5                 mov     r13, r12
.text:000000000000C9E8                 call    _memmove
.text:000000000000C9ED                 mov     rdx, [rsp+118h+n] ; n
.text:000000000000C9F2                 mov     rsi, r14        ; src
.text:000000000000C9F5                 mov     rdi, r12        ; dest
.text:000000000000C9F8                 call    _memcpy
.text:000000000000C9FD                 cmp     byte ptr [r14], 2Fh ; '/'
.text:000000000000CA01                 mov     [rsp+118h+n], r12
.text:000000000000CA06                 lea     rax, [rbp+1]
.text:000000000000CA0A                 jz      loc_CB04
.text:000000000000CA10                 cmp     r15, rax
.text:000000000000CA13                 ja      loc_CB22
.text:000000000000CA19
.text:000000000000CA19 loc_CA19:                               ; CODE XREF: canonicalize_filename_mode+5CB↓j
.text:000000000000CA19                                         ; canonicalize_filename_mode+5F5↓j ...
.text:000000000000CA19                 mov     rdi, r14        ; ptr
.text:000000000000CA1C                 call    free
.text:000000000000CA21                 jmp     loc_C700
.text:000000000000CA26 ; ---------------------------------------------------------------------------
.text:000000000000CA26
.text:000000000000CA26 loc_CA26:                               ; CODE XREF: canonicalize_filename_mode+336↑j
.text:000000000000CA26                 lea     r8, triple_free
.text:000000000000CA2D                 lea     rcx, triple_compare_ino_str
.text:000000000000CA34                 xor     esi, esi
.text:000000000000CA36                 lea     rdx, triple_hash
.text:000000000000CA3D                 mov     edi, 7
.text:000000000000CA42                 call    hash_initialize
.text:000000000000CA47                 test    rax, rax
.text:000000000000CA4A                 mov     [rsp+118h+var_108], rax
.text:000000000000CA4F                 jnz     loc_C87C
.text:000000000000CA55                 call    xalloc_die
.text:000000000000CA55 ; ---------------------------------------------------------------------------
.text:000000000000CA5A                 align 20h
.text:000000000000CA60
.text:000000000000CA60 loc_CA60:                               ; CODE XREF: canonicalize_filename_mode+5D↑j
.text:000000000000CA60                 mov     edi, 1000h
.text:000000000000CA65                 call    xmalloc
.text:000000000000CA6A                 mov     rbp, rax
.text:000000000000CA6D                 lea     rbx, [rax+1000h]
.text:000000000000CA74                 lea     r15, [rax+1]
.text:000000000000CA78                 mov     byte ptr [rax], 2Fh ; '/'
.text:000000000000CA7B                 jmp     loc_C5D1
.text:000000000000CA80 ; ---------------------------------------------------------------------------
.text:000000000000CA80
.text:000000000000CA80 loc_CA80:                               ; CODE XREF: canonicalize_filename_mode+85↑j
.text:000000000000CA80                 mov     rdi, rbp
.text:000000000000CA83                 mov     esi, 1000h
.text:000000000000CA88                 call    xrealloc
.text:000000000000CA8D                 mov     rbp, rax
.text:000000000000CA90                 add     r15, rax
.text:000000000000CA93                 lea     rbx, [rax+1000h]
.text:000000000000CA9A                 jmp     loc_C5D1
.text:000000000000CA9F ; ---------------------------------------------------------------------------
.text:000000000000CA9F
.text:000000000000CA9F loc_CA9F:                               ; CODE XREF: canonicalize_filename_mode+463↑j
.text:000000000000CA9F                 cmp     rcx, 1000h
.text:000000000000CAA6                 mov     eax, 1000h
.text:000000000000CAAB                 mov     [rsp+118h+var_E0], rdx
.text:000000000000CAB0                 cmovnb  rax, rcx
.text:000000000000CAB4                 mov     rdi, rax
.text:000000000000CAB7                 mov     [rsp+118h+var_E8], rax
.text:000000000000CABC                 call    xmalloc
.text:000000000000CAC1                 mov     rdx, [rsp+118h+var_E0]
.text:000000000000CAC6                 mov     [rsp+118h+ptr], rax
.text:000000000000CACB                 jmp     loc_C9D1
.text:000000000000CAD0 ; ---------------------------------------------------------------------------
.text:000000000000CAD0
.text:000000000000CAD0 loc_CAD0:                               ; CODE XREF: canonicalize_filename_mode+3E↑j
.text:000000000000CAD0                                         ; canonicalize_filename_mode+4A↑j
.text:000000000000CAD0                 call    ___errno_location
.text:000000000000CAD5                 xor     ebp, ebp
.text:000000000000CAD7                 mov     dword ptr [rax], 16h
.text:000000000000CADD                 jmp     loc_C760
.text:000000000000CAE2 ; ---------------------------------------------------------------------------
.text:000000000000CAE2
.text:000000000000CAE2 loc_CAE2:                               ; CODE XREF: canonicalize_filename_mode+437↑j
.text:000000000000CAE2                 call    ___errno_location
.text:000000000000CAE7                 cmp     [rsp+118h+var_114], 2
.text:000000000000CAEC                 mov     r14, rax
.text:000000000000CAEF                 mov     edx, [rax]
.text:000000000000CAF1                 jnz     short loc_CAFC
.text:000000000000CAF3                 cmp     edx, 0Ch
.text:000000000000CAF6                 jnz     loc_C700
.text:000000000000CAFC
.text:000000000000CAFC loc_CAFC:                               ; CODE XREF: canonicalize_filename_mode+5B1↑j
.text:000000000000CAFC                 mov     r12, r14
.text:000000000000CAFF                 jmp     loc_C8B0
.text:000000000000CB04 ; ---------------------------------------------------------------------------
.text:000000000000CB04
.text:000000000000CB04 loc_CB04:                               ; CODE XREF: canonicalize_filename_mode+4CA↑j
.text:000000000000CB04                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000CB08                 mov     r15, rax
.text:000000000000CB0B                 jmp     loc_CA19
.text:000000000000CB10 ; ---------------------------------------------------------------------------
.text:000000000000CB10
.text:000000000000CB10 loc_CB10:                               ; CODE XREF: canonicalize_filename_mode+55↑j
.text:000000000000CB10                 call    ___errno_location
.text:000000000000CB15                 xor     ebp, ebp
.text:000000000000CB17                 mov     dword ptr [rax], 2
.text:000000000000CB1D                 jmp     loc_C760
.text:000000000000CB22 ; ---------------------------------------------------------------------------
.text:000000000000CB22
.text:000000000000CB22 loc_CB22:                               ; CODE XREF: canonicalize_filename_mode+4D3↑j
.text:000000000000CB22                 lea     rax, [r15-1]
.text:000000000000CB26                 cmp     rbp, rax
.text:000000000000CB29                 jnb     short loc_CB32
.text:000000000000CB2B                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:000000000000CB30                 jnz     short loc_CB3D
.text:000000000000CB32
.text:000000000000CB32 loc_CB32:                               ; CODE XREF: canonicalize_filename_mode+5E9↑j
.text:000000000000CB32                 mov     r15, rax
.text:000000000000CB35                 jmp     loc_CA19
.text:000000000000CB3A ; ---------------------------------------------------------------------------
.text:000000000000CB3A
.text:000000000000CB3A loc_CB3A:                               ; CODE XREF: canonicalize_filename_mode+615↓j
.text:000000000000CB3A                 mov     rax, r15
.text:000000000000CB3D
.text:000000000000CB3D loc_CB3D:                               ; CODE XREF: canonicalize_filename_mode+5F0↑j
.text:000000000000CB3D                 lea     r15, [rax-1]
.text:000000000000CB41                 cmp     rbp, r15
.text:000000000000CB44                 jz      loc_CA19
.text:000000000000CB4A                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:000000000000CB4F                 jz      loc_CA19
.text:000000000000CB55                 jmp     short loc_CB3A
.text:000000000000CB57 ; ---------------------------------------------------------------------------
.text:000000000000CB57
.text:000000000000CB57 loc_CB57:                               ; CODE XREF: canonicalize_filename_mode+1BA↑j
.text:000000000000CB57                 call    ___errno_location
.text:000000000000CB5C                 mov     edx, 14h
.text:000000000000CB61                 mov     r12, rax
.text:000000000000CB64                 jmp     loc_C801
.text:000000000000CB69 ; ---------------------------------------------------------------------------
.text:000000000000CB69
.text:000000000000CB69 loc_CB69:                               ; CODE XREF: canonicalize_filename_mode+3E2↑j
.text:000000000000CB69                 mov     r15, rax
.text:000000000000CB6C                 jmp     loc_C5FB
.text:000000000000CB71 ; ---------------------------------------------------------------------------
.text:000000000000CB71
.text:000000000000CB71 loc_CB71:                               ; CODE XREF: canonicalize_filename_mode+234↑j
.text:000000000000CB71                 call    ___stack_chk_fail
.text:000000000000CB71 ; } // starts at C540
.text:000000000000CB71 canonicalize_filename_mode endp
.text:000000000000CB71
.text:000000000000CB71 ; ---------------------------------------------------------------------------
.text:000000000000CB76                 align 20h
.text:000000000000CB80
.text:000000000000CB80 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB80
.text:000000000000CB80
.text:000000000000CB80                 public close_stdout_set_file_name
.text:000000000000CB80 close_stdout_set_file_name proc near
.text:000000000000CB80 ; __unwind {
.text:000000000000CB80                 mov     cs:file_name, rdi
.text:000000000000CB87                 retn
.text:000000000000CB87 ; } // starts at CB80
.text:000000000000CB87 close_stdout_set_file_name endp
.text:000000000000CB87
.text:000000000000CB87 ; ---------------------------------------------------------------------------
.text:000000000000CB88                 align 10h
.text:000000000000CB90
.text:000000000000CB90 ; =============== S U B R O U T I N E =======================================
.text:000000000000CB90
.text:000000000000CB90
.text:000000000000CB90                 public close_stdout_set_ignore_EPIPE
.text:000000000000CB90 close_stdout_set_ignore_EPIPE proc near
.text:000000000000CB90 ; __unwind {
.text:000000000000CB90                 mov     cs:ignore_EPIPE, dil
.text:000000000000CB97                 retn
.text:000000000000CB97 ; } // starts at CB90
.text:000000000000CB97 close_stdout_set_ignore_EPIPE endp
.text:000000000000CB97
.text:000000000000CB97 ; ---------------------------------------------------------------------------
.text:000000000000CB98                 align 20h
.text:000000000000CBA0
.text:000000000000CBA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CBA0
.text:000000000000CBA0 ; Attributes: info_from_lumina
.text:000000000000CBA0
.text:000000000000CBA0 ; void __cdecl close_stdout()
.text:000000000000CBA0                 public close_stdout
.text:000000000000CBA0 close_stdout    proc near               ; DATA XREF: main+5B↑o
.text:000000000000CBA0 ; __unwind {
.text:000000000000CBA0                 push    rbp
.text:000000000000CBA1                 push    rbx
.text:000000000000CBA2                 sub     rsp, 8
.text:000000000000CBA6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000CBAD                 call    close_stream
.text:000000000000CBB2                 test    eax, eax
.text:000000000000CBB4                 jz      short loc_CBCC
.text:000000000000CBB6                 call    ___errno_location
.text:000000000000CBBB                 cmp     cs:ignore_EPIPE, 0
.text:000000000000CBC2                 mov     rbx, rax
.text:000000000000CBC5                 jz      short loc_CBE3
.text:000000000000CBC7                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000CBCA                 jnz     short loc_CBE3
.text:000000000000CBCC
.text:000000000000CBCC loc_CBCC:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000CBCC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:000000000000CBD3                 call    close_stream
.text:000000000000CBD8                 test    eax, eax
.text:000000000000CBDA                 jnz     short loc_CC22
.text:000000000000CBDC                 add     rsp, 8
.text:000000000000CBE0                 pop     rbx
.text:000000000000CBE1                 pop     rbp
.text:000000000000CBE2                 retn
.text:000000000000CBE3 ; ---------------------------------------------------------------------------
.text:000000000000CBE3
.text:000000000000CBE3 loc_CBE3:                               ; CODE XREF: close_stdout+25↑j
.text:000000000000CBE3                                         ; close_stdout+2A↑j
.text:000000000000CBE3                 lea     rsi, aWriteError ; "write error"
.text:000000000000CBEA                 xor     edi, edi        ; domainname
.text:000000000000CBEC                 mov     edx, 5          ; category
.text:000000000000CBF1                 call    _dcgettext
.text:000000000000CBF6                 mov     rdi, cs:file_name
.text:000000000000CBFD                 mov     rbp, rax
.text:000000000000CC00                 test    rdi, rdi
.text:000000000000CC03                 jz      short loc_CC2D
.text:000000000000CC05                 call    quotearg_colon
.text:000000000000CC0A                 mov     esi, [rbx]      ; errnum
.text:000000000000CC0C                 lea     rdx, aSS        ; "%s: %s"
.text:000000000000CC13                 mov     rcx, rax
.text:000000000000CC16                 mov     r8, rbp
.text:000000000000CC19                 xor     edi, edi        ; status
.text:000000000000CC1B                 xor     eax, eax
.text:000000000000CC1D                 call    _error
.text:000000000000CC22
.text:000000000000CC22 loc_CC22:                               ; CODE XREF: close_stdout+3A↑j
.text:000000000000CC22                                         ; close_stdout+A2↓j
.text:000000000000CC22                 mov     edi, cs:exit_failure ; status
.text:000000000000CC28                 call    __exit
.text:000000000000CC2D ; ---------------------------------------------------------------------------
.text:000000000000CC2D
.text:000000000000CC2D loc_CC2D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000CC2D                 mov     esi, [rbx]      ; errnum
.text:000000000000CC2F                 lea     rdx, aS_1+2     ; format
.text:000000000000CC36                 mov     rcx, rax
.text:000000000000CC39                 xor     edi, edi        ; status
.text:000000000000CC3B                 xor     eax, eax
.text:000000000000CC3D                 call    _error
.text:000000000000CC42                 jmp     short loc_CC22
.text:000000000000CC42 ; } // starts at CBA0
.text:000000000000CC42 close_stdout    endp
.text:000000000000CC42
.text:000000000000CC42 ; ---------------------------------------------------------------------------
.text:000000000000CC44                 align 10h
.text:000000000000CC50
.text:000000000000CC50 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC50
.text:000000000000CC50 ; Attributes: info_from_lumina
.text:000000000000CC50
.text:000000000000CC50 ; size_t __fastcall dir_len(const char *file)
.text:000000000000CC50                 public dir_len
.text:000000000000CC50 dir_len         proc near               ; CODE XREF: gobble_file_constprop_52+986↑p
.text:000000000000CC50                                         ; mdir_name+9↓p
.text:000000000000CC50 ; __unwind {
.text:000000000000CC50                 push    rbp
.text:000000000000CC51                 push    rbx
.text:000000000000CC52                 xor     ebp, ebp
.text:000000000000CC54                 mov     rbx, rdi
.text:000000000000CC57                 sub     rsp, 8
.text:000000000000CC5B                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:000000000000CC5E                 setz    bpl
.text:000000000000CC62                 call    last_component
.text:000000000000CC67                 mov     rcx, rax
.text:000000000000CC6A                 sub     rcx, rbx
.text:000000000000CC6D                 cmp     rcx, rbp
.text:000000000000CC70                 jbe     short loc_CCA0
.text:000000000000CC72                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:000000000000CC76                 lea     rdx, [rcx-1]
.text:000000000000CC7A                 jz      short loc_CC8E
.text:000000000000CC7C                 jmp     short loc_CCA0
.text:000000000000CC7C ; ---------------------------------------------------------------------------
.text:000000000000CC7E                 align 20h
.text:000000000000CC80
.text:000000000000CC80 loc_CC80:                               ; CODE XREF: dir_len+41↓j
.text:000000000000CC80                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000CC85                 lea     rax, [rdx-1]
.text:000000000000CC89                 jnz     short loc_CC93
.text:000000000000CC8B                 mov     rdx, rax
.text:000000000000CC8E
.text:000000000000CC8E loc_CC8E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000CC8E                 cmp     rbp, rdx
.text:000000000000CC91                 jnz     short loc_CC80
.text:000000000000CC93
.text:000000000000CC93 loc_CC93:                               ; CODE XREF: dir_len+39↑j
.text:000000000000CC93                 add     rsp, 8
.text:000000000000CC97                 mov     rax, rdx
.text:000000000000CC9A                 pop     rbx
.text:000000000000CC9B                 pop     rbp
.text:000000000000CC9C                 retn
.text:000000000000CC9C ; ---------------------------------------------------------------------------
.text:000000000000CC9D                 align 20h
.text:000000000000CCA0
.text:000000000000CCA0 loc_CCA0:                               ; CODE XREF: dir_len+20↑j
.text:000000000000CCA0                                         ; dir_len+2C↑j
.text:000000000000CCA0                 add     rsp, 8
.text:000000000000CCA4                 mov     rdx, rcx
.text:000000000000CCA7                 mov     rax, rdx
.text:000000000000CCAA                 pop     rbx
.text:000000000000CCAB                 pop     rbp
.text:000000000000CCAC                 retn
.text:000000000000CCAC ; } // starts at CC50
.text:000000000000CCAC dir_len         endp
.text:000000000000CCAC
.text:000000000000CCAC ; ---------------------------------------------------------------------------
.text:000000000000CCAD                 align 10h
.text:000000000000CCB0
.text:000000000000CCB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CCB0
.text:000000000000CCB0 ; Attributes: info_from_lumina
.text:000000000000CCB0
.text:000000000000CCB0 ; char *__fastcall mdir_name(const char *file)
.text:000000000000CCB0                 public mdir_name
.text:000000000000CCB0 mdir_name       proc near               ; CODE XREF: dir_name+4↓p
.text:000000000000CCB0 ; __unwind {
.text:000000000000CCB0                 push    rbp
.text:000000000000CCB1                 push    rbx
.text:000000000000CCB2                 mov     rbp, rdi
.text:000000000000CCB5                 sub     rsp, 8
.text:000000000000CCB9                 call    dir_len
.text:000000000000CCBE                 test    rax, rax
.text:000000000000CCC1                 mov     rbx, rax
.text:000000000000CCC4                 setz    al
.text:000000000000CCC7                 movzx   eax, al
.text:000000000000CCCA                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000CCCF                 call    malloc
.text:000000000000CCD4                 test    rax, rax
.text:000000000000CCD7                 mov     rcx, rax
.text:000000000000CCDA                 jz      short loc_CCF6
.text:000000000000CCDC                 mov     rdx, rbx        ; n
.text:000000000000CCDF                 mov     rsi, rbp        ; src
.text:000000000000CCE2                 mov     rdi, rax        ; dest
.text:000000000000CCE5                 call    _memcpy
.text:000000000000CCEA                 test    rbx, rbx
.text:000000000000CCED                 mov     rcx, rax
.text:000000000000CCF0                 jz      short loc_CD00
.text:000000000000CCF2
.text:000000000000CCF2 loc_CCF2:                               ; CODE XREF: mdir_name+58↓j
.text:000000000000CCF2                 mov     byte ptr [rcx+rbx], 0
.text:000000000000CCF6
.text:000000000000CCF6 loc_CCF6:                               ; CODE XREF: mdir_name+2A↑j
.text:000000000000CCF6                 add     rsp, 8
.text:000000000000CCFA                 mov     rax, rcx
.text:000000000000CCFD                 pop     rbx
.text:000000000000CCFE                 pop     rbp
.text:000000000000CCFF                 retn
.text:000000000000CD00 ; ---------------------------------------------------------------------------
.text:000000000000CD00
.text:000000000000CD00 loc_CD00:                               ; CODE XREF: mdir_name+40↑j
.text:000000000000CD00                 mov     byte ptr [rax], 2Eh ; '.'
.text:000000000000CD03                 mov     ebx, 1
.text:000000000000CD08                 jmp     short loc_CCF2
.text:000000000000CD08 ; } // starts at CCB0
.text:000000000000CD08 mdir_name       endp
.text:000000000000CD08
.text:000000000000CD08 ; ---------------------------------------------------------------------------
.text:000000000000CD0A                 align 10h
.text:000000000000CD10
.text:000000000000CD10 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD10
.text:000000000000CD10 ; Attributes: info_from_lumina
.text:000000000000CD10
.text:000000000000CD10 ; char *__fastcall last_component(const char *name)
.text:000000000000CD10                 public last_component
.text:000000000000CD10 last_component  proc near               ; CODE XREF: extract_dirs_from_files+DC↑p
.text:000000000000CD10                                         ; dir_len+12↑p ...
.text:000000000000CD10 ; __unwind {
.text:000000000000CD10                 movzx   edx, byte ptr [rdi]
.text:000000000000CD13                 mov     rax, rdi
.text:000000000000CD16                 cmp     dl, 2Fh ; '/'
.text:000000000000CD19                 jnz     short loc_CD2C
.text:000000000000CD1B                 nop     dword ptr [rax+rax+00h]
.text:000000000000CD20
.text:000000000000CD20 loc_CD20:                               ; CODE XREF: last_component+1A↓j
.text:000000000000CD20                 add     rax, 1
.text:000000000000CD24                 movzx   edx, byte ptr [rax]
.text:000000000000CD27                 cmp     dl, 2Fh ; '/'
.text:000000000000CD2A                 jz      short loc_CD20
.text:000000000000CD2C
.text:000000000000CD2C loc_CD2C:                               ; CODE XREF: last_component+9↑j
.text:000000000000CD2C                 test    dl, dl
.text:000000000000CD2E                 jz      short locret_CD6A
.text:000000000000CD30                 mov     rcx, rax
.text:000000000000CD33                 xor     esi, esi
.text:000000000000CD35                 jmp     short loc_CD55
.text:000000000000CD35 ; ---------------------------------------------------------------------------
.text:000000000000CD37                 align 20h
.text:000000000000CD40
.text:000000000000CD40 loc_CD40:                               ; CODE XREF: last_component+48↓j
.text:000000000000CD40                 test    sil, sil
.text:000000000000CD43                 jz      short loc_CD4A
.text:000000000000CD45                 mov     rax, rcx
.text:000000000000CD48                 xor     esi, esi
.text:000000000000CD4A
.text:000000000000CD4A loc_CD4A:                               ; CODE XREF: last_component+33↑j
.text:000000000000CD4A                 add     rcx, 1
.text:000000000000CD4E                 movzx   edx, byte ptr [rcx]
.text:000000000000CD51                 test    dl, dl
.text:000000000000CD53                 jz      short locret_CD6A
.text:000000000000CD55
.text:000000000000CD55 loc_CD55:                               ; CODE XREF: last_component+25↑j
.text:000000000000CD55                                         ; last_component+58↓j
.text:000000000000CD55                 cmp     dl, 2Fh ; '/'
.text:000000000000CD58                 jnz     short loc_CD40
.text:000000000000CD5A                 add     rcx, 1
.text:000000000000CD5E                 movzx   edx, byte ptr [rcx]
.text:000000000000CD61                 mov     esi, 1
.text:000000000000CD66                 test    dl, dl
.text:000000000000CD68                 jnz     short loc_CD55
.text:000000000000CD6A
.text:000000000000CD6A locret_CD6A:                            ; CODE XREF: last_component+1E↑j
.text:000000000000CD6A                                         ; last_component+43↑j
.text:000000000000CD6A                 rep retn
.text:000000000000CD6A ; } // starts at CD10
.text:000000000000CD6A last_component  endp
.text:000000000000CD6A
.text:000000000000CD6A ; ---------------------------------------------------------------------------
.text:000000000000CD6C                 align 10h
.text:000000000000CD70
.text:000000000000CD70 ; =============== S U B R O U T I N E =======================================
.text:000000000000CD70
.text:000000000000CD70 ; Attributes: info_from_lumina
.text:000000000000CD70
.text:000000000000CD70 ; size_t __fastcall base_len(const char *name)
.text:000000000000CD70                 public base_len
.text:000000000000CD70 base_len        proc near               ; CODE XREF: mfile_name_concat+22↓p
.text:000000000000CD70                                         ; same_nameat+34↓p ...
.text:000000000000CD70 ; __unwind {
.text:000000000000CD70                 push    rbx
.text:000000000000CD71                 mov     rbx, rdi
.text:000000000000CD74                 call    _strlen
.text:000000000000CD79                 cmp     rax, 1
.text:000000000000CD7D                 jbe     short loc_CD8A
.text:000000000000CD7F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:000000000000CD84                 lea     rdx, [rax-1]
.text:000000000000CD88                 jz      short loc_CD98
.text:000000000000CD8A
.text:000000000000CD8A loc_CD8A:                               ; CODE XREF: base_len+D↑j
.text:000000000000CD8A                 pop     rbx
.text:000000000000CD8B                 retn
.text:000000000000CD8B ; ---------------------------------------------------------------------------
.text:000000000000CD8C                 align 10h
.text:000000000000CD90
.text:000000000000CD90 loc_CD90:                               ; CODE XREF: base_len+37↓j
.text:000000000000CD90                 mov     rdx, rax
.text:000000000000CD93                 nop     dword ptr [rax+rax+00h]
.text:000000000000CD98
.text:000000000000CD98 loc_CD98:                               ; CODE XREF: base_len+18↑j
.text:000000000000CD98                 cmp     rdx, 1
.text:000000000000CD9C                 jz      short loc_CDB0
.text:000000000000CD9E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:000000000000CDA3                 lea     rax, [rdx-1]
.text:000000000000CDA7                 jz      short loc_CD90
.text:000000000000CDA9                 mov     rax, rdx
.text:000000000000CDAC                 pop     rbx
.text:000000000000CDAD                 retn
.text:000000000000CDAD ; ---------------------------------------------------------------------------
.text:000000000000CDAE                 align 10h
.text:000000000000CDB0
.text:000000000000CDB0 loc_CDB0:                               ; CODE XREF: base_len+2C↑j
.text:000000000000CDB0                 mov     eax, 1
.text:000000000000CDB5                 pop     rbx
.text:000000000000CDB6                 retn
.text:000000000000CDB6 ; } // starts at CD70
.text:000000000000CDB6 base_len        endp
.text:000000000000CDB6
.text:000000000000CDB6 ; ---------------------------------------------------------------------------
.text:000000000000CDB7                 align 20h
.text:000000000000CDC0
.text:000000000000CDC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CDC0
.text:000000000000CDC0
.text:000000000000CDC0                 public file_has_acl
.text:000000000000CDC0 file_has_acl    proc near               ; CODE XREF: gobble_file_constprop_52+8D1↑p
.text:000000000000CDC0 ; __unwind {
.text:000000000000CDC0                 xor     eax, eax
.text:000000000000CDC2                 retn
.text:000000000000CDC2 ; } // starts at CDC0
.text:000000000000CDC2 file_has_acl    endp
.text:000000000000CDC2
.text:000000000000CDC2 ; ---------------------------------------------------------------------------
.text:000000000000CDC3                 align 10h
.text:000000000000CDD0
.text:000000000000CDD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CDD0
.text:000000000000CDD0 ; Attributes: info_from_lumina
.text:000000000000CDD0
.text:000000000000CDD0 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:000000000000CDD0                 public record_file
.text:000000000000CDD0 record_file     proc near               ; CODE XREF: canonicalize_filename_mode+41F↑p
.text:000000000000CDD0 ; __unwind {
.text:000000000000CDD0                 test    rdi, rdi
.text:000000000000CDD3                 jz      short locret_CE50
.text:000000000000CDD5                 push    r13
.text:000000000000CDD7                 push    r12
.text:000000000000CDD9                 mov     r13, rdi
.text:000000000000CDDC                 push    rbp
.text:000000000000CDDD                 push    rbx
.text:000000000000CDDE                 mov     r12, rsi
.text:000000000000CDE1                 mov     edi, 18h
.text:000000000000CDE6                 mov     rbp, rdx
.text:000000000000CDE9                 sub     rsp, 8
.text:000000000000CDED                 call    xmalloc
.text:000000000000CDF2                 mov     rdi, r12        ; src
.text:000000000000CDF5                 mov     rbx, rax
.text:000000000000CDF8                 call    xstrdup
.text:000000000000CDFD                 mov     [rbx], rax
.text:000000000000CE00                 mov     rax, [rbp+8]
.text:000000000000CE04                 mov     rsi, rbx
.text:000000000000CE07                 mov     rdi, r13
.text:000000000000CE0A                 mov     [rbx+8], rax
.text:000000000000CE0E                 mov     rax, [rbp+0]
.text:000000000000CE12                 mov     [rbx+10h], rax
.text:000000000000CE16                 call    hash_insert
.text:000000000000CE1B                 test    rax, rax
.text:000000000000CE1E                 jz      short loc_CE52
.text:000000000000CE20                 cmp     rbx, rax
.text:000000000000CE23                 jz      short loc_CE40
.text:000000000000CE25                 add     rsp, 8
.text:000000000000CE29                 mov     rdi, rbx        ; ptr
.text:000000000000CE2C                 pop     rbx
.text:000000000000CE2D                 pop     rbp
.text:000000000000CE2E                 pop     r12
.text:000000000000CE30                 pop     r13
.text:000000000000CE32                 jmp     triple_free
.text:000000000000CE32 ; ---------------------------------------------------------------------------
.text:000000000000CE37                 align 20h
.text:000000000000CE40
.text:000000000000CE40 loc_CE40:                               ; CODE XREF: record_file+53↑j
.text:000000000000CE40                 add     rsp, 8
.text:000000000000CE44                 pop     rbx
.text:000000000000CE45                 pop     rbp
.text:000000000000CE46                 pop     r12
.text:000000000000CE48                 pop     r13
.text:000000000000CE4A                 retn
.text:000000000000CE4A ; ---------------------------------------------------------------------------
.text:000000000000CE4B                 align 10h
.text:000000000000CE50
.text:000000000000CE50 locret_CE50:                            ; CODE XREF: record_file+3↑j
.text:000000000000CE50                 rep retn
.text:000000000000CE52 ; ---------------------------------------------------------------------------
.text:000000000000CE52
.text:000000000000CE52 loc_CE52:                               ; CODE XREF: record_file+4E↑j
.text:000000000000CE52                 call    xalloc_die
.text:000000000000CE52 ; } // starts at CDD0
.text:000000000000CE52 record_file     endp
.text:000000000000CE52
.text:000000000000CE52 ; ---------------------------------------------------------------------------
.text:000000000000CE57                 align 20h
.text:000000000000CE60
.text:000000000000CE60 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE60
.text:000000000000CE60 ; Attributes: info_from_lumina
.text:000000000000CE60
.text:000000000000CE60 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:000000000000CE60                 public seen_file
.text:000000000000CE60 seen_file       proc near               ; CODE XREF: canonicalize_filename_mode+34B↑p
.text:000000000000CE60
.text:000000000000CE60 var_28          = qword ptr -28h
.text:000000000000CE60 var_20          = qword ptr -20h
.text:000000000000CE60 var_18          = qword ptr -18h
.text:000000000000CE60 var_10          = qword ptr -10h
.text:000000000000CE60
.text:000000000000CE60 ; __unwind {
.text:000000000000CE60                 sub     rsp, 28h
.text:000000000000CE64                 mov     rax, fs:28h
.text:000000000000CE6D                 mov     [rsp+28h+var_10], rax
.text:000000000000CE72                 xor     eax, eax
.text:000000000000CE74                 test    rdi, rdi
.text:000000000000CE77                 jz      short loc_CE9C
.text:000000000000CE79                 mov     rax, [rdx+8]
.text:000000000000CE7D                 mov     [rsp+28h+var_28], rsi
.text:000000000000CE81                 mov     rsi, rsp
.text:000000000000CE84                 mov     [rsp+28h+var_20], rax
.text:000000000000CE89                 mov     rax, [rdx]
.text:000000000000CE8C                 mov     [rsp+28h+var_18], rax
.text:000000000000CE91                 call    hash_lookup
.text:000000000000CE96                 test    rax, rax
.text:000000000000CE99                 setnz   al
.text:000000000000CE9C
.text:000000000000CE9C loc_CE9C:                               ; CODE XREF: seen_file+17↑j
.text:000000000000CE9C                 mov     rcx, [rsp+28h+var_10]
.text:000000000000CEA1                 xor     rcx, fs:28h
.text:000000000000CEAA                 jnz     short loc_CEB1
.text:000000000000CEAC                 add     rsp, 28h
.text:000000000000CEB0                 retn
.text:000000000000CEB1 ; ---------------------------------------------------------------------------
.text:000000000000CEB1
.text:000000000000CEB1 loc_CEB1:                               ; CODE XREF: seen_file+4A↑j
.text:000000000000CEB1                 call    ___stack_chk_fail
.text:000000000000CEB1 ; } // starts at CE60
.text:000000000000CEB1 seen_file       endp
.text:000000000000CEB1
.text:000000000000CEB1 ; ---------------------------------------------------------------------------
.text:000000000000CEB6                 align 20h
.text:000000000000CEC0
.text:000000000000CEC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000CEC0
.text:000000000000CEC0 ; Attributes: info_from_lumina
.text:000000000000CEC0
.text:000000000000CEC0 ; void __fastcall strmode(mode_t mode, char *str)
.text:000000000000CEC0                 public strmode
.text:000000000000CEC0 strmode         proc near               ; CODE XREF: filemodestring+3↓j
.text:000000000000CEC0 ; __unwind {
.text:000000000000CEC0                 mov     edx, edi
.text:000000000000CEC2                 mov     eax, 2Dh ; '-'
.text:000000000000CEC7                 and     edx, 0F000h
.text:000000000000CECD                 cmp     edx, 8000h
.text:000000000000CED3                 jz      short loc_CF30
.text:000000000000CED5                 cmp     edx, 4000h
.text:000000000000CEDB                 mov     eax, 64h ; 'd'
.text:000000000000CEE0                 jz      short loc_CF30
.text:000000000000CEE2                 cmp     edx, 6000h
.text:000000000000CEE8                 mov     eax, 62h ; 'b'
.text:000000000000CEED                 jz      short loc_CF30
.text:000000000000CEEF                 cmp     edx, 2000h
.text:000000000000CEF5                 mov     eax, 63h ; 'c'
.text:000000000000CEFA                 jz      short loc_CF30
.text:000000000000CEFC                 cmp     edx, 0A000h
.text:000000000000CF02                 mov     eax, 6Ch ; 'l'
.text:000000000000CF07                 jz      short loc_CF30
.text:000000000000CF09                 cmp     edx, 1000h
.text:000000000000CF0F                 mov     eax, 70h ; 'p'
.text:000000000000CF14                 jz      short loc_CF30
.text:000000000000CF16                 cmp     edx, 0C000h
.text:000000000000CF1C                 mov     eax, 73h ; 's'
.text:000000000000CF21                 mov     edx, 3Fh ; '?'
.text:000000000000CF26                 cmovnz  eax, edx
.text:000000000000CF29                 nop     dword ptr [rax+00000000h]
.text:000000000000CF30
.text:000000000000CF30 loc_CF30:                               ; CODE XREF: strmode+13↑j
.text:000000000000CF30                                         ; strmode+20↑j ...
.text:000000000000CF30                 mov     [rsi], al
.text:000000000000CF32                 mov     eax, edi
.text:000000000000CF34                 and     eax, 100h
.text:000000000000CF39                 cmp     eax, 1
.text:000000000000CF3C                 sbb     eax, eax
.text:000000000000CF3E                 and     eax, 0FFFFFFBBh
.text:000000000000CF41                 add     eax, 72h ; 'r'
.text:000000000000CF44                 mov     [rsi+1], al
.text:000000000000CF47                 mov     eax, edi
.text:000000000000CF49                 and     eax, 80h
.text:000000000000CF4E                 cmp     eax, 1
.text:000000000000CF51                 sbb     eax, eax
.text:000000000000CF53                 and     eax, 0FFFFFFB6h
.text:000000000000CF56                 add     eax, 77h ; 'w'
.text:000000000000CF59                 mov     [rsi+2], al
.text:000000000000CF5C                 mov     eax, edi
.text:000000000000CF5E                 and     eax, 40h
.text:000000000000CF61                 cmp     eax, 1
.text:000000000000CF64                 sbb     eax, eax
.text:000000000000CF66                 test    edi, 800h
.text:000000000000CF6C                 jz      loc_D010
.text:000000000000CF72                 and     eax, 0FFFFFFE0h
.text:000000000000CF75                 add     eax, 73h ; 's'
.text:000000000000CF78
.text:000000000000CF78 loc_CF78:                               ; CODE XREF: strmode+156↓j
.text:000000000000CF78                 mov     [rsi+3], al
.text:000000000000CF7B                 mov     eax, edi
.text:000000000000CF7D                 and     eax, 20h
.text:000000000000CF80                 cmp     eax, 1
.text:000000000000CF83                 sbb     eax, eax
.text:000000000000CF85                 and     eax, 0FFFFFFBBh
.text:000000000000CF88                 add     eax, 72h ; 'r'
.text:000000000000CF8B                 mov     [rsi+4], al
.text:000000000000CF8E                 mov     eax, edi
.text:000000000000CF90                 and     eax, 10h
.text:000000000000CF93                 cmp     eax, 1
.text:000000000000CF96                 sbb     eax, eax
.text:000000000000CF98                 and     eax, 0FFFFFFB6h
.text:000000000000CF9B                 add     eax, 77h ; 'w'
.text:000000000000CF9E                 mov     [rsi+5], al
.text:000000000000CFA1                 mov     eax, edi
.text:000000000000CFA3                 and     eax, 8
.text:000000000000CFA6                 cmp     eax, 1
.text:000000000000CFA9                 sbb     eax, eax
.text:000000000000CFAB                 test    edi, 400h
.text:000000000000CFB1                 jz      loc_D038
.text:000000000000CFB7                 and     eax, 0FFFFFFE0h
.text:000000000000CFBA                 add     eax, 73h ; 's'
.text:000000000000CFBD
.text:000000000000CFBD loc_CFBD:                               ; CODE XREF: strmode+17E↓j
.text:000000000000CFBD                 mov     [rsi+6], al
.text:000000000000CFC0                 mov     eax, edi
.text:000000000000CFC2                 and     eax, 4
.text:000000000000CFC5                 cmp     eax, 1
.text:000000000000CFC8                 sbb     eax, eax
.text:000000000000CFCA                 and     eax, 0FFFFFFBBh
.text:000000000000CFCD                 add     eax, 72h ; 'r'
.text:000000000000CFD0                 mov     [rsi+7], al
.text:000000000000CFD3                 mov     eax, edi
.text:000000000000CFD5                 and     eax, 2
.text:000000000000CFD8                 cmp     eax, 1
.text:000000000000CFDB                 sbb     eax, eax
.text:000000000000CFDD                 and     eax, 0FFFFFFB6h
.text:000000000000CFE0                 add     eax, 77h ; 'w'
.text:000000000000CFE3                 mov     [rsi+8], al
.text:000000000000CFE6                 mov     eax, edi
.text:000000000000CFE8                 and     eax, 1
.text:000000000000CFEB                 cmp     eax, 1
.text:000000000000CFEE                 sbb     eax, eax
.text:000000000000CFF0                 and     edi, 200h
.text:000000000000CFF6                 jz      short loc_D020
.text:000000000000CFF8                 and     eax, 0FFFFFFE0h
.text:000000000000CFFB                 add     eax, 74h ; 't'
.text:000000000000CFFE                 mov     [rsi+9], al
.text:000000000000D001                 mov     eax, 20h ; ' '
.text:000000000000D006                 mov     [rsi+0Ah], ax
.text:000000000000D00A                 retn
.text:000000000000D00A ; ---------------------------------------------------------------------------
.text:000000000000D00B                 align 10h
.text:000000000000D010
.text:000000000000D010 loc_D010:                               ; CODE XREF: strmode+AC↑j
.text:000000000000D010                 and     eax, 0FFFFFFB5h
.text:000000000000D013                 add     eax, 78h ; 'x'
.text:000000000000D016                 jmp     loc_CF78
.text:000000000000D016 ; ---------------------------------------------------------------------------
.text:000000000000D01B                 align 20h
.text:000000000000D020
.text:000000000000D020 loc_D020:                               ; CODE XREF: strmode+136↑j
.text:000000000000D020                 and     eax, 0FFFFFFB5h
.text:000000000000D023                 add     eax, 78h ; 'x'
.text:000000000000D026                 mov     [rsi+9], al
.text:000000000000D029                 mov     eax, 20h ; ' '
.text:000000000000D02E                 mov     [rsi+0Ah], ax
.text:000000000000D032                 retn
.text:000000000000D032 ; ---------------------------------------------------------------------------
.text:000000000000D033                 align 8
.text:000000000000D038
.text:000000000000D038 loc_D038:                               ; CODE XREF: strmode+F1↑j
.text:000000000000D038                 and     eax, 0FFFFFFB5h
.text:000000000000D03B                 add     eax, 78h ; 'x'
.text:000000000000D03E                 jmp     loc_CFBD
.text:000000000000D03E ; } // starts at CEC0
.text:000000000000D03E strmode         endp
.text:000000000000D03E
.text:000000000000D03E ; ---------------------------------------------------------------------------
.text:000000000000D043                 align 10h
.text:000000000000D050
.text:000000000000D050 ; =============== S U B R O U T I N E =======================================
.text:000000000000D050
.text:000000000000D050
.text:000000000000D050                 public filemodestring
.text:000000000000D050 filemodestring  proc near               ; CODE XREF: print_long_format+43↑p
.text:000000000000D050 ; __unwind {
.text:000000000000D050                 mov     edi, [rdi+18h]
.text:000000000000D053                 jmp     strmode
.text:000000000000D053 ; } // starts at D050
.text:000000000000D053 filemodestring  endp
.text:000000000000D053
.text:000000000000D053 ; ---------------------------------------------------------------------------
.text:000000000000D058                 align 20h
.text:000000000000D060
.text:000000000000D060 ; =============== S U B R O U T I N E =======================================
.text:000000000000D060
.text:000000000000D060
.text:000000000000D060                 public file_name_concat
.text:000000000000D060 file_name_concat proc near              ; CODE XREF: extract_dirs_from_files+F4↑p
.text:000000000000D060 ; __unwind {
.text:000000000000D060                 sub     rsp, 8
.text:000000000000D064                 call    mfile_name_concat
.text:000000000000D069                 test    rax, rax
.text:000000000000D06C                 jz      short loc_D073
.text:000000000000D06E                 add     rsp, 8
.text:000000000000D072                 retn
.text:000000000000D073 ; ---------------------------------------------------------------------------
.text:000000000000D073
.text:000000000000D073 loc_D073:                               ; CODE XREF: file_name_concat+C↑j
.text:000000000000D073                 call    xalloc_die
.text:000000000000D073 ; } // starts at D060
.text:000000000000D073 file_name_concat endp
.text:000000000000D073
.text:000000000000D073 ; ---------------------------------------------------------------------------
.text:000000000000D078                 align 20h
.text:000000000000D080
.text:000000000000D080 ; =============== S U B R O U T I N E =======================================
.text:000000000000D080
.text:000000000000D080
.text:000000000000D080 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:000000000000D080                 public mfile_name_concat
.text:000000000000D080 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:000000000000D080
.text:000000000000D080 var_48          = qword ptr -48h
.text:000000000000D080 var_39          = byte ptr -39h
.text:000000000000D080
.text:000000000000D080 ; __unwind {
.text:000000000000D080                 push    r15
.text:000000000000D082                 push    r14
.text:000000000000D084                 mov     r15, rdx
.text:000000000000D087                 push    r13
.text:000000000000D089                 push    r12
.text:000000000000D08B                 mov     r12, rdi
.text:000000000000D08E                 push    rbp
.text:000000000000D08F                 push    rbx
.text:000000000000D090                 mov     rbp, rsi
.text:000000000000D093                 sub     rsp, 18h
.text:000000000000D097                 call    last_component
.text:000000000000D09C                 mov     rbx, rax
.text:000000000000D09F                 mov     rdi, rax
.text:000000000000D0A2                 call    base_len
.text:000000000000D0A7                 sub     rbx, r12
.text:000000000000D0AA                 mov     r13, rax
.text:000000000000D0AD                 mov     rdi, rbp        ; s
.text:000000000000D0B0                 add     rbx, rax
.text:000000000000D0B3                 call    _strlen
.text:000000000000D0B8                 test    r13, r13
.text:000000000000D0BB                 mov     r14, rax
.text:000000000000D0BE                 jz      short loc_D0F0
.text:000000000000D0C0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:000000000000D0C6                 jz      loc_D170
.text:000000000000D0CC                 xor     eax, eax
.text:000000000000D0CE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000D0D2                 mov     edx, 0
.text:000000000000D0D7                 setnz   al
.text:000000000000D0DA                 mov     [rsp+48h+var_48], rax
.text:000000000000D0DE                 mov     eax, 2Fh ; '/'
.text:000000000000D0E3                 cmovz   eax, edx
.text:000000000000D0E6                 mov     [rsp+48h+var_39], al
.text:000000000000D0EA                 jmp     short loc_D10E
.text:000000000000D0EA ; ---------------------------------------------------------------------------
.text:000000000000D0EC                 align 10h
.text:000000000000D0F0
.text:000000000000D0F0 loc_D0F0:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:000000000000D0F0                 xor     eax, eax
.text:000000000000D0F2                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:000000000000D0F6                 mov     edx, 0
.text:000000000000D0FB                 setz    al
.text:000000000000D0FE                 mov     [rsp+48h+var_48], rax
.text:000000000000D102                 mov     eax, 2Eh ; '.'
.text:000000000000D107                 cmovnz  eax, edx
.text:000000000000D10A                 mov     [rsp+48h+var_39], al
.text:000000000000D10E
.text:000000000000D10E loc_D10E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:000000000000D10E                                         ; mfile_name_concat+FD↓j
.text:000000000000D10E                 lea     rdi, [rbx+r14+1]
.text:000000000000D113                 add     rdi, [rsp+48h+var_48] ; size
.text:000000000000D117                 call    malloc
.text:000000000000D11C                 test    rax, rax
.text:000000000000D11F                 mov     r13, rax
.text:000000000000D122                 jz      short loc_D156
.text:000000000000D124                 mov     rdi, rax        ; dest
.text:000000000000D127                 mov     rdx, rbx        ; n
.text:000000000000D12A                 mov     rsi, r12        ; src
.text:000000000000D12D                 call    _mempcpy
.text:000000000000D132                 movzx   ecx, [rsp+48h+var_39]
.text:000000000000D137                 mov     rdi, [rsp+48h+var_48]
.text:000000000000D13B                 add     rdi, rax        ; dest
.text:000000000000D13E                 test    r15, r15
.text:000000000000D141                 mov     [rax], cl
.text:000000000000D143                 jz      short loc_D148
.text:000000000000D145                 mov     [r15], rdi
.text:000000000000D148
.text:000000000000D148 loc_D148:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:000000000000D148                 mov     rdx, r14        ; n
.text:000000000000D14B                 mov     rsi, rbp        ; src
.text:000000000000D14E                 call    _mempcpy
.text:000000000000D153                 mov     byte ptr [rax], 0
.text:000000000000D156
.text:000000000000D156 loc_D156:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:000000000000D156                 add     rsp, 18h
.text:000000000000D15A                 mov     rax, r13
.text:000000000000D15D                 pop     rbx
.text:000000000000D15E                 pop     rbp
.text:000000000000D15F                 pop     r12
.text:000000000000D161                 pop     r13
.text:000000000000D163                 pop     r14
.text:000000000000D165                 pop     r15
.text:000000000000D167                 retn
.text:000000000000D167 ; ---------------------------------------------------------------------------
.text:000000000000D168                 align 10h
.text:000000000000D170
.text:000000000000D170 loc_D170:                               ; CODE XREF: mfile_name_concat+46↑j
.text:000000000000D170                 mov     [rsp+48h+var_48], 0
.text:000000000000D178                 mov     [rsp+48h+var_39], 0
.text:000000000000D17D                 jmp     short loc_D10E
.text:000000000000D17D ; } // starts at D080
.text:000000000000D17D mfile_name_concat endp
.text:000000000000D17D
.text:000000000000D17D ; ---------------------------------------------------------------------------
.text:000000000000D17F                 align 20h
.text:000000000000D180
.text:000000000000D180 ; =============== S U B R O U T I N E =======================================
.text:000000000000D180
.text:000000000000D180 ; Attributes: info_from_lumina
.text:000000000000D180
.text:000000000000D180 ; const char *__fastcall match_suffix(const char **str)
.text:000000000000D180 match_suffix    proc near               ; CODE XREF: filevercmp+E8↓p
.text:000000000000D180                                         ; filevercmp+F5↓p
.text:000000000000D180 ; __unwind {
.text:000000000000D180                 mov     rsi, [rdi]
.text:000000000000D183                 movzx   edx, byte ptr [rsi]
.text:000000000000D186                 test    dl, dl
.text:000000000000D188                 jz      loc_D240
.text:000000000000D18E                 xor     ecx, ecx
.text:000000000000D190                 xor     eax, eax
.text:000000000000D192                 xor     r8d, r8d
.text:000000000000D195                 mov     r11d, 1
.text:000000000000D19B                 mov     r10, 3FFFFFF03FFFFFFh
.text:000000000000D1A5                 jmp     short loc_D1DF
.text:000000000000D1A5 ; ---------------------------------------------------------------------------
.text:000000000000D1A7                 align 10h
.text:000000000000D1B0
.text:000000000000D1B0 loc_D1B0:                               ; CODE XREF: match_suffix+61↓j
.text:000000000000D1B0                 movsx   ecx, dl
.text:000000000000D1B3                 sub     ecx, 41h ; 'A'
.text:000000000000D1B6                 cmp     ecx, 39h ; '9'
.text:000000000000D1B9                 ja      short loc_D1C8
.text:000000000000D1BB                 mov     r9, r11
.text:000000000000D1BE                 shl     r9, cl
.text:000000000000D1C1                 xor     ecx, ecx
.text:000000000000D1C3                 test    r9, r10
.text:000000000000D1C6                 jnz     short loc_D1D1
.text:000000000000D1C8
.text:000000000000D1C8 loc_D1C8:                               ; CODE XREF: match_suffix+39↑j
.text:000000000000D1C8                 xor     ecx, ecx
.text:000000000000D1CA                 cmp     dl, 7Eh ; '~'
.text:000000000000D1CD                 cmovnz  rax, r8
.text:000000000000D1D1
.text:000000000000D1D1 loc_D1D1:                               ; CODE XREF: match_suffix+46↑j
.text:000000000000D1D1                                         ; match_suffix+70↓j ...
.text:000000000000D1D1                 add     rsi, 1
.text:000000000000D1D5                 mov     [rdi], rsi
.text:000000000000D1D8                 movzx   edx, byte ptr [rsi]
.text:000000000000D1DB                 test    dl, dl
.text:000000000000D1DD                 jz      short locret_D211
.text:000000000000D1DF
.text:000000000000D1DF loc_D1DF:                               ; CODE XREF: match_suffix+25↑j
.text:000000000000D1DF                                         ; match_suffix+8F↓j
.text:000000000000D1DF                 test    cl, cl
.text:000000000000D1E1                 jnz     short loc_D1B0
.text:000000000000D1E3                 cmp     dl, 2Eh ; '.'
.text:000000000000D1E6                 jz      short loc_D218
.text:000000000000D1E8                 cmp     dl, 5Ah ; 'Z'
.text:000000000000D1EB                 jg      short loc_D230
.text:000000000000D1ED                 cmp     dl, 41h ; 'A'
.text:000000000000D1F0                 jge     short loc_D1D1
.text:000000000000D1F2                 lea     r9d, [rdx-30h]
.text:000000000000D1F6                 cmp     r9b, 9
.text:000000000000D1FA                 jbe     short loc_D1D1
.text:000000000000D1FC
.text:000000000000D1FC loc_D1FC:                               ; CODE XREF: match_suffix+B8↓j
.text:000000000000D1FC                 cmp     dl, 7Eh ; '~'
.text:000000000000D1FF                 cmovnz  rax, r8
.text:000000000000D203                 add     rsi, 1
.text:000000000000D207                 mov     [rdi], rsi
.text:000000000000D20A                 movzx   edx, byte ptr [rsi]
.text:000000000000D20D                 test    dl, dl
.text:000000000000D20F                 jnz     short loc_D1DF
.text:000000000000D211
.text:000000000000D211 locret_D211:                            ; CODE XREF: match_suffix+5D↑j
.text:000000000000D211                 rep retn
.text:000000000000D211 ; ---------------------------------------------------------------------------
.text:000000000000D213                 align 8
.text:000000000000D218
.text:000000000000D218 loc_D218:                               ; CODE XREF: match_suffix+66↑j
.text:000000000000D218                 test    rax, rax
.text:000000000000D21B                 mov     ecx, 1
.text:000000000000D220                 cmovz   rax, rsi
.text:000000000000D224                 jmp     short loc_D1D1
.text:000000000000D224 ; ---------------------------------------------------------------------------
.text:000000000000D226                 align 10h
.text:000000000000D230
.text:000000000000D230 loc_D230:                               ; CODE XREF: match_suffix+6B↑j
.text:000000000000D230                 lea     r9d, [rdx-61h]
.text:000000000000D234                 cmp     r9b, 19h
.text:000000000000D238                 ja      short loc_D1FC
.text:000000000000D23A                 jmp     short loc_D1D1
.text:000000000000D23A ; ---------------------------------------------------------------------------
.text:000000000000D23C                 align 20h
.text:000000000000D240
.text:000000000000D240 loc_D240:                               ; CODE XREF: match_suffix+8↑j
.text:000000000000D240                 xor     eax, eax
.text:000000000000D242                 retn
.text:000000000000D242 ; } // starts at D180
.text:000000000000D242 match_suffix    endp
.text:000000000000D242
.text:000000000000D242 ; ---------------------------------------------------------------------------
.text:000000000000D243                 align 10h
.text:000000000000D250
.text:000000000000D250 ; =============== S U B R O U T I N E =======================================
.text:000000000000D250
.text:000000000000D250 ; Attributes: info_from_lumina
.text:000000000000D250
.text:000000000000D250 ; __int64 __fastcall filevercmp(char *s1, char *s2)
.text:000000000000D250                 public filevercmp
.text:000000000000D250 filevercmp      proc near               ; CODE XREF: rev_xstrcoll_version+9↑j
.text:000000000000D250                                         ; xstrcoll_version+6↑j ...
.text:000000000000D250
.text:000000000000D250 var_68          = qword ptr -68h
.text:000000000000D250 var_60          = qword ptr -60h
.text:000000000000D250 var_50          = qword ptr -50h
.text:000000000000D250 var_48          = qword ptr -48h
.text:000000000000D250 var_40          = qword ptr -40h
.text:000000000000D250
.text:000000000000D250 ; __unwind {
.text:000000000000D250                 push    r15
.text:000000000000D252                 push    r14
.text:000000000000D254                 push    r13
.text:000000000000D256                 push    r12
.text:000000000000D258                 push    rbp
.text:000000000000D259                 push    rbx
.text:000000000000D25A                 mov     rbp, rsi
.text:000000000000D25D                 mov     rbx, rdi
.text:000000000000D260                 sub     rsp, 38h
.text:000000000000D264                 mov     rax, fs:28h
.text:000000000000D26D                 mov     [rsp+68h+var_40], rax
.text:000000000000D272                 xor     eax, eax
.text:000000000000D274                 call    _strcmp         ; PIC mode
.text:000000000000D279                 test    eax, eax
.text:000000000000D27B                 mov     r12d, eax
.text:000000000000D27E                 jz      loc_D4C8
.text:000000000000D284                 movzx   eax, byte ptr [rbx]
.text:000000000000D287                 test    al, al
.text:000000000000D289                 jz      loc_D608
.text:000000000000D28F                 movzx   r8d, byte ptr [rbp+0]
.text:000000000000D294                 test    r8b, r8b
.text:000000000000D297                 jz      loc_D4F0
.text:000000000000D29D                 lea     r9, asc_19F9B+1 ; "."
.text:000000000000D2A4                 mov     ecx, 2
.text:000000000000D2A9                 mov     rdi, rbx
.text:000000000000D2AC                 mov     rsi, r9
.text:000000000000D2AF                 repe cmpsb
.text:000000000000D2B1                 setnbe  dl
.text:000000000000D2B4                 sbb     dl, 0
.text:000000000000D2B7                 test    dl, dl
.text:000000000000D2B9                 jz      loc_D608
.text:000000000000D2BF                 mov     ecx, 2
.text:000000000000D2C4                 mov     rsi, r9
.text:000000000000D2C7                 mov     rdi, rbp
.text:000000000000D2CA                 repe cmpsb
.text:000000000000D2CC                 setnbe  dl
.text:000000000000D2CF                 sbb     dl, 0
.text:000000000000D2D2                 test    dl, dl
.text:000000000000D2D4                 jz      loc_D4F0
.text:000000000000D2DA                 lea     r9, asc_19F9B   ; ".."
.text:000000000000D2E1                 mov     ecx, 3
.text:000000000000D2E6                 mov     rdi, rbx
.text:000000000000D2E9                 mov     rsi, r9
.text:000000000000D2EC                 repe cmpsb
.text:000000000000D2EE                 setnbe  dl
.text:000000000000D2F1                 sbb     dl, 0
.text:000000000000D2F4                 test    dl, dl
.text:000000000000D2F6                 jz      loc_D608
.text:000000000000D2FC                 mov     ecx, 3
.text:000000000000D301                 mov     rsi, r9
.text:000000000000D304                 mov     rdi, rbp
.text:000000000000D307                 repe cmpsb
.text:000000000000D309                 setnbe  dl
.text:000000000000D30C                 sbb     dl, 0
.text:000000000000D30F                 test    dl, dl
.text:000000000000D311                 jz      loc_D4F0
.text:000000000000D317                 cmp     al, 2Eh ; '.'
.text:000000000000D319                 jz      loc_D5F0
.text:000000000000D31F                 cmp     r8b, 2Eh ; '.'
.text:000000000000D323                 jz      loc_D4F0
.text:000000000000D329
.text:000000000000D329 loc_D329:                               ; CODE XREF: filevercmp+3AC↓j
.text:000000000000D329                 lea     rdi, [rsp+68h+var_50]
.text:000000000000D32E                 mov     [rsp+68h+var_50], rbx
.text:000000000000D333                 mov     [rsp+68h+var_48], rbp
.text:000000000000D338                 call    match_suffix
.text:000000000000D33D                 lea     rdi, [rsp+68h+var_48]
.text:000000000000D342                 mov     r13, rax
.text:000000000000D345                 call    match_suffix
.text:000000000000D34A                 test    r13, r13
.text:000000000000D34D                 jz      loc_D560
.text:000000000000D353                 sub     r13, rbx
.text:000000000000D356                 test    rax, rax
.text:000000000000D359                 jz      loc_D673
.text:000000000000D35F
.text:000000000000D35F loc_D35F:                               ; CODE XREF: filevercmp+31B↓j
.text:000000000000D35F                 sub     rax, rbp
.text:000000000000D362                 mov     r14, rax
.text:000000000000D365
.text:000000000000D365 loc_D365:                               ; CODE XREF: filevercmp+42B↓j
.text:000000000000D365                 cmp     r13, r14
.text:000000000000D368                 jz      loc_D640
.text:000000000000D36E
.text:000000000000D36E loc_D36E:                               ; CODE XREF: filevercmp+329↓j
.text:000000000000D36E                                         ; filevercmp+400↓j
.text:000000000000D36E                 xor     esi, esi
.text:000000000000D370                 xor     edx, edx
.text:000000000000D372                 mov     r10d, 1
.text:000000000000D378                 mov     r15, 3FFFFFF03FFFFFFh
.text:000000000000D382
.text:000000000000D382 loc_D382:                               ; CODE XREF: filevercmp+261↓j
.text:000000000000D382                 cmp     r13, rdx
.text:000000000000D385                 ja      short loc_D390
.text:000000000000D387                 cmp     r14, rsi
.text:000000000000D38A                 jbe     loc_D4C8
.text:000000000000D390
.text:000000000000D390 loc_D390:                               ; CODE XREF: filevercmp+135↑j
.text:000000000000D390                 mov     r11, rsi
.text:000000000000D393                 mov     [rsp+68h+var_68], rbp
.text:000000000000D397                 sub     r11, rdx
.text:000000000000D39A                 lea     rax, [r13+r11+0]
.text:000000000000D39F                 lea     r9, [rbp+r11+0]
.text:000000000000D3A4                 mov     [rsp+68h+var_60], rax
.text:000000000000D3A9                 nop     dword ptr [rax+00000000h]
.text:000000000000D3B0
.text:000000000000D3B0 loc_D3B0:                               ; CODE XREF: filevercmp+1F3↓j
.text:000000000000D3B0                 cmp     r13, rdx
.text:000000000000D3B3                 jbe     short loc_D3C0
.text:000000000000D3B5                 movzx   eax, byte ptr [rbx+rdx]
.text:000000000000D3B9                 sub     eax, 30h ; '0'
.text:000000000000D3BC                 cmp     al, 9
.text:000000000000D3BE                 ja      short loc_D3DA
.text:000000000000D3C0
.text:000000000000D3C0 loc_D3C0:                               ; CODE XREF: filevercmp+163↑j
.text:000000000000D3C0                 cmp     r14, rsi
.text:000000000000D3C3                 movsx   eax, byte ptr [r9+rdx]
.text:000000000000D3C8                 jbe     loc_D590
.text:000000000000D3CE                 lea     ecx, [rax-30h]
.text:000000000000D3D1                 cmp     cl, 9
.text:000000000000D3D4                 jbe     loc_D590
.text:000000000000D3DA
.text:000000000000D3DA loc_D3DA:                               ; CODE XREF: filevercmp+16E↑j
.text:000000000000D3DA                 cmp     r13, rdx
.text:000000000000D3DD                 jz      loc_D613
.text:000000000000D3E3                 movzx   eax, byte ptr [rbx+rdx]
.text:000000000000D3E7                 lea     ecx, [rax-30h]
.text:000000000000D3EA                 cmp     cl, 9
.text:000000000000D3ED                 jbe     loc_D580
.text:000000000000D3F3                 movzx   r8d, al
.text:000000000000D3F7                 lea     ecx, [r8-41h]
.text:000000000000D3FB                 cmp     ecx, 39h ; '9'
.text:000000000000D3FE                 ja      short loc_D40B
.text:000000000000D400                 mov     rdi, r10
.text:000000000000D403                 shl     rdi, cl
.text:000000000000D406                 test    rdi, r15
.text:000000000000D409                 jnz     short loc_D41A
.text:000000000000D40B
.text:000000000000D40B loc_D40B:                               ; CODE XREF: filevercmp+1AE↑j
.text:000000000000D40B                 add     r8d, 100h
.text:000000000000D412                 cmp     al, 7Eh ; '~'
.text:000000000000D414                 jz      loc_D500
.text:000000000000D41A
.text:000000000000D41A loc_D41A:                               ; CODE XREF: filevercmp+1B9↑j
.text:000000000000D41A                                         ; filevercmp+333↓j
.text:000000000000D41A                 cmp     r14, rsi
.text:000000000000D41D                 jz      short loc_D430
.text:000000000000D41F                 movzx   eax, byte ptr [r9+rdx]
.text:000000000000D424                 lea     ecx, [rax-30h]
.text:000000000000D427                 cmp     cl, 9
.text:000000000000D42A                 ja      loc_D528
.text:000000000000D430
.text:000000000000D430 loc_D430:                               ; CODE XREF: filevercmp+1CD↑j
.text:000000000000D430                 xor     edi, edi
.text:000000000000D432
.text:000000000000D432 loc_D432:                               ; CODE XREF: filevercmp+2EC↓j
.text:000000000000D432                                         ; filevercmp+302↓j
.text:000000000000D432                 cmp     edi, r8d
.text:000000000000D435                 jnz     loc_D5C8
.text:000000000000D43B
.text:000000000000D43B loc_D43B:                               ; CODE XREF: filevercmp+3C8↓j
.text:000000000000D43B                                         ; filevercmp+3D9↓j
.text:000000000000D43B                 add     rdx, 1
.text:000000000000D43F                 add     rsi, 1
.text:000000000000D443                 jmp     loc_D3B0
.text:000000000000D443 ; ---------------------------------------------------------------------------
.text:000000000000D448                 align 10h
.text:000000000000D450
.text:000000000000D450 loc_D450:                               ; CODE XREF: filevercmp+20B↓j
.text:000000000000D450                 add     rsi, 1
.text:000000000000D454                 movsx   eax, byte ptr [rbp+rsi+0]
.text:000000000000D459
.text:000000000000D459 loc_D459:                               ; CODE XREF: filevercmp+34B↓j
.text:000000000000D459                                         ; filevercmp+365↓j
.text:000000000000D459                 cmp     al, 30h ; '0'
.text:000000000000D45B                 jz      short loc_D450
.text:000000000000D45D                 sub     rsi, rdx
.text:000000000000D460                 xor     r8d, r8d
.text:000000000000D463                 mov     r9, rsi
.text:000000000000D466                 lea     r11, [rbp+rsi+0]
.text:000000000000D46B                 jmp     short loc_D496
.text:000000000000D46B ; ---------------------------------------------------------------------------
.text:000000000000D46D                 align 10h
.text:000000000000D470
.text:000000000000D470 loc_D470:                               ; CODE XREF: filevercmp+251↓j
.text:000000000000D470                 lea     esi, [rax-30h]
.text:000000000000D473                 cmp     sil, 9
.text:000000000000D477                 ja      loc_D5E0
.text:000000000000D47D                 test    r8d, r8d
.text:000000000000D480                 jnz     short loc_D489
.text:000000000000D482                 movsx   r8d, cl
.text:000000000000D486                 sub     r8d, eax
.text:000000000000D489
.text:000000000000D489 loc_D489:                               ; CODE XREF: filevercmp+230↑j
.text:000000000000D489                 add     rdx, 1
.text:000000000000D48D                 movzx   ecx, byte ptr [rbx+rdx]
.text:000000000000D491                 movsx   eax, byte ptr [r11+rdx]
.text:000000000000D496
.text:000000000000D496 loc_D496:                               ; CODE XREF: filevercmp+21B↑j
.text:000000000000D496                 lea     edi, [rcx-30h]
.text:000000000000D499                 lea     rsi, [rdx+r9]
.text:000000000000D49D                 cmp     dil, 9
.text:000000000000D4A1                 jbe     short loc_D470
.text:000000000000D4A3                 sub     eax, 30h ; '0'
.text:000000000000D4A6                 cmp     al, 9
.text:000000000000D4A8                 jbe     loc_D663
.text:000000000000D4AE                 test    r8d, r8d
.text:000000000000D4B1                 jz      loc_D382
.text:000000000000D4B7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000D4C0
.text:000000000000D4C0 loc_D4C0:                               ; CODE XREF: filevercmp+37B↓j
.text:000000000000D4C0                                         ; filevercmp+396↓j ...
.text:000000000000D4C0                 mov     r12d, r8d
.text:000000000000D4C3                 nop     dword ptr [rax+rax+00h]
.text:000000000000D4C8
.text:000000000000D4C8 loc_D4C8:                               ; CODE XREF: filevercmp+2E↑j
.text:000000000000D4C8                                         ; filevercmp+13A↑j ...
.text:000000000000D4C8                 mov     rbx, [rsp+68h+var_40]
.text:000000000000D4CD                 xor     rbx, fs:28h
.text:000000000000D4D6                 mov     eax, r12d
.text:000000000000D4D9                 jnz     loc_D66E
.text:000000000000D4DF                 add     rsp, 38h
.text:000000000000D4E3                 pop     rbx
.text:000000000000D4E4                 pop     rbp
.text:000000000000D4E5                 pop     r12
.text:000000000000D4E7                 pop     r13
.text:000000000000D4E9                 pop     r14
.text:000000000000D4EB                 pop     r15
.text:000000000000D4ED                 retn
.text:000000000000D4ED ; ---------------------------------------------------------------------------
.text:000000000000D4EE                 align 10h
.text:000000000000D4F0
.text:000000000000D4F0 loc_D4F0:                               ; CODE XREF: filevercmp+47↑j
.text:000000000000D4F0                                         ; filevercmp+84↑j ...
.text:000000000000D4F0                 mov     r12d, 1
.text:000000000000D4F6                 jmp     short loc_D4C8
.text:000000000000D4F6 ; ---------------------------------------------------------------------------
.text:000000000000D4F8                 align 20h
.text:000000000000D500
.text:000000000000D500 loc_D500:                               ; CODE XREF: filevercmp+1C4↑j
.text:000000000000D500                 lea     rax, [r11+rdx]
.text:000000000000D504                 cmp     r14, rax
.text:000000000000D507                 jz      loc_D5C0
.text:000000000000D50D                 movzx   eax, byte ptr [r9+rdx]
.text:000000000000D512                 lea     ecx, [rax-30h]
.text:000000000000D515                 cmp     cl, 9
.text:000000000000D518                 jbe     loc_D5C0
.text:000000000000D51E                 mov     r8d, 0FFFFFFFFh
.text:000000000000D524                 nop     dword ptr [rax+00h]
.text:000000000000D528
.text:000000000000D528 loc_D528:                               ; CODE XREF: filevercmp+1DA↑j
.text:000000000000D528                                         ; filevercmp+3E2↓j
.text:000000000000D528                 movzx   edi, al
.text:000000000000D52B                 lea     ecx, [rdi-41h]
.text:000000000000D52E                 cmp     ecx, 39h ; '9'
.text:000000000000D531                 ja      short loc_D542
.text:000000000000D533                 mov     rbp, r10
.text:000000000000D536                 shl     rbp, cl
.text:000000000000D539                 test    rbp, r15
.text:000000000000D53C                 jnz     loc_D432
.text:000000000000D542
.text:000000000000D542 loc_D542:                               ; CODE XREF: filevercmp+2E1↑j
.text:000000000000D542                 add     edi, 100h
.text:000000000000D548                 cmp     al, 7Eh ; '~'
.text:000000000000D54A                 mov     eax, 0FFFFFFFFh
.text:000000000000D54F                 cmovz   edi, eax
.text:000000000000D552                 jmp     loc_D432
.text:000000000000D552 ; ---------------------------------------------------------------------------
.text:000000000000D557                 align 20h
.text:000000000000D560
.text:000000000000D560 loc_D560:                               ; CODE XREF: filevercmp+FD↑j
.text:000000000000D560                 mov     r13, [rsp+68h+var_50]
.text:000000000000D565                 sub     r13, rbx
.text:000000000000D568                 test    rax, rax
.text:000000000000D56B                 jnz     loc_D35F
.text:000000000000D571
.text:000000000000D571 loc_D571:                               ; CODE XREF: filevercmp+40E↓j
.text:000000000000D571                 mov     r14, [rsp+68h+var_48]
.text:000000000000D576                 sub     r14, rbp
.text:000000000000D579                 jmp     loc_D36E
.text:000000000000D579 ; ---------------------------------------------------------------------------
.text:000000000000D57E                 align 20h
.text:000000000000D580
.text:000000000000D580 loc_D580:                               ; CODE XREF: filevercmp+19D↑j
.text:000000000000D580                 xor     r8d, r8d
.text:000000000000D583                 jmp     loc_D41A
.text:000000000000D583 ; ---------------------------------------------------------------------------
.text:000000000000D588                 align 10h
.text:000000000000D590
.text:000000000000D590 loc_D590:                               ; CODE XREF: filevercmp+178↑j
.text:000000000000D590                                         ; filevercmp+184↑j
.text:000000000000D590                 movzx   ecx, byte ptr [rbx+rdx]
.text:000000000000D594                 mov     rbp, [rsp+68h+var_68]
.text:000000000000D598                 cmp     cl, 30h ; '0'
.text:000000000000D59B                 jnz     loc_D459
.text:000000000000D5A1                 nop     dword ptr [rax+00000000h]
.text:000000000000D5A8
.text:000000000000D5A8 loc_D5A8:                               ; CODE XREF: filevercmp+363↓j
.text:000000000000D5A8                 add     rdx, 1
.text:000000000000D5AC                 movzx   ecx, byte ptr [rbx+rdx]
.text:000000000000D5B0                 cmp     cl, 30h ; '0'
.text:000000000000D5B3                 jz      short loc_D5A8
.text:000000000000D5B5                 jmp     loc_D459
.text:000000000000D5B5 ; ---------------------------------------------------------------------------
.text:000000000000D5BA                 align 20h
.text:000000000000D5C0
.text:000000000000D5C0 loc_D5C0:                               ; CODE XREF: filevercmp+2B7↑j
.text:000000000000D5C0                                         ; filevercmp+2C8↑j
.text:000000000000D5C0                 xor     edi, edi
.text:000000000000D5C2                 mov     r8d, 0FFFFFFFFh
.text:000000000000D5C8
.text:000000000000D5C8 loc_D5C8:                               ; CODE XREF: filevercmp+1E5↑j
.text:000000000000D5C8                 sub     r8d, edi
.text:000000000000D5CB                 jnz     loc_D4C0
.text:000000000000D5D1                 jmp     loc_D4C8
.text:000000000000D5D1 ; ---------------------------------------------------------------------------
.text:000000000000D5D6                 align 20h
.text:000000000000D5E0
.text:000000000000D5E0 loc_D5E0:                               ; CODE XREF: filevercmp+227↑j
.text:000000000000D5E0                 mov     r8d, 1
.text:000000000000D5E6                 jmp     loc_D4C0
.text:000000000000D5E6 ; ---------------------------------------------------------------------------
.text:000000000000D5EB                 align 10h
.text:000000000000D5F0
.text:000000000000D5F0 loc_D5F0:                               ; CODE XREF: filevercmp+C9↑j
.text:000000000000D5F0                 add     rbx, 1
.text:000000000000D5F4                 add     rbp, 1
.text:000000000000D5F8                 cmp     r8b, 2Eh ; '.'
.text:000000000000D5FC                 jz      loc_D329
.text:000000000000D602                 nop     word ptr [rax+rax+00h]
.text:000000000000D608
.text:000000000000D608 loc_D608:                               ; CODE XREF: filevercmp+39↑j
.text:000000000000D608                                         ; filevercmp+69↑j ...
.text:000000000000D608                 mov     r12d, 0FFFFFFFFh
.text:000000000000D60E                 jmp     loc_D4C8
.text:000000000000D613 ; ---------------------------------------------------------------------------
.text:000000000000D613
.text:000000000000D613 loc_D613:                               ; CODE XREF: filevercmp+18D↑j
.text:000000000000D613                 cmp     r14, [rsp+68h+var_60]
.text:000000000000D618                 jz      loc_D43B
.text:000000000000D61E                 movzx   eax, byte ptr [r9+r13]
.text:000000000000D623                 lea     ecx, [rax-30h]
.text:000000000000D626                 cmp     cl, 9
.text:000000000000D629                 jbe     loc_D43B
.text:000000000000D62F                 xor     r8d, r8d
.text:000000000000D632                 jmp     loc_D528
.text:000000000000D632 ; ---------------------------------------------------------------------------
.text:000000000000D637                 align 20h
.text:000000000000D640
.text:000000000000D640 loc_D640:                               ; CODE XREF: filevercmp+118↑j
.text:000000000000D640                 mov     rdx, r13        ; n
.text:000000000000D643                 mov     rsi, rbp        ; s2
.text:000000000000D646                 mov     rdi, rbx        ; s1
.text:000000000000D649                 call    _strncmp        ; PIC mode
.text:000000000000D64E                 test    eax, eax
.text:000000000000D650                 jnz     loc_D36E
.text:000000000000D656                 mov     r13, [rsp+68h+var_50]
.text:000000000000D65B                 sub     r13, rbx
.text:000000000000D65E                 jmp     loc_D571
.text:000000000000D663 ; ---------------------------------------------------------------------------
.text:000000000000D663
.text:000000000000D663 loc_D663:                               ; CODE XREF: filevercmp+258↑j
.text:000000000000D663                 mov     r8d, 0FFFFFFFFh
.text:000000000000D669                 jmp     loc_D4C0
.text:000000000000D66E ; ---------------------------------------------------------------------------
.text:000000000000D66E
.text:000000000000D66E loc_D66E:                               ; CODE XREF: filevercmp+289↑j
.text:000000000000D66E                 call    ___stack_chk_fail ; PIC mode
.text:000000000000D673 ; ---------------------------------------------------------------------------
.text:000000000000D673
.text:000000000000D673 loc_D673:                               ; CODE XREF: filevercmp+109↑j
.text:000000000000D673                 mov     r14, [rsp+68h+var_48]
.text:000000000000D678                 sub     r14, rbp
.text:000000000000D67B                 jmp     loc_D365
.text:000000000000D67B ; } // starts at D250
.text:000000000000D67B filevercmp      endp
.text:000000000000D67B
.text:000000000000D680
.text:000000000000D680 ; =============== S U B R O U T I N E =======================================
.text:000000000000D680
.text:000000000000D680
.text:000000000000D680 ; __int64 __fastcall gettime(struct timespec *tp)
.text:000000000000D680                 public gettime
.text:000000000000D680 gettime         proc near               ; CODE XREF: print_long_format+797↑p
.text:000000000000D680 ; __unwind {
.text:000000000000D680                 mov     rsi, rdi        ; tp
.text:000000000000D683                 xor     edi, edi        ; clock_id
.text:000000000000D685                 jmp     _clock_gettime
.text:000000000000D685 ; } // starts at D680
.text:000000000000D685 gettime         endp
.text:000000000000D685
.text:000000000000D685 ; ---------------------------------------------------------------------------
.text:000000000000D68A                 align 10h
.text:000000000000D690
.text:000000000000D690 ; =============== S U B R O U T I N E =======================================
.text:000000000000D690
.text:000000000000D690
.text:000000000000D690                 public current_timespec
.text:000000000000D690 current_timespec proc near
.text:000000000000D690
.text:000000000000D690 var_28          = qword ptr -28h
.text:000000000000D690 var_20          = qword ptr -20h
.text:000000000000D690 var_10          = qword ptr -10h
.text:000000000000D690
.text:000000000000D690 ; __unwind {
.text:000000000000D690                 sub     rsp, 28h
.text:000000000000D694                 xor     edi, edi        ; clock_id
.text:000000000000D696                 mov     rsi, rsp        ; tp
.text:000000000000D699                 mov     rax, fs:28h
.text:000000000000D6A2                 mov     [rsp+28h+var_10], rax
.text:000000000000D6A7                 xor     eax, eax
.text:000000000000D6A9                 call    _clock_gettime
.text:000000000000D6AE                 mov     rcx, [rsp+28h+var_10]
.text:000000000000D6B3                 xor     rcx, fs:28h
.text:000000000000D6BC                 mov     rax, [rsp+28h+var_28]
.text:000000000000D6C0                 mov     rdx, [rsp+28h+var_20]
.text:000000000000D6C5                 jnz     short loc_D6CC
.text:000000000000D6C7                 add     rsp, 28h
.text:000000000000D6CB                 retn
.text:000000000000D6CC ; ---------------------------------------------------------------------------
.text:000000000000D6CC
.text:000000000000D6CC loc_D6CC:                               ; CODE XREF: current_timespec+35↑j
.text:000000000000D6CC                 call    ___stack_chk_fail
.text:000000000000D6CC ; } // starts at D690
.text:000000000000D6CC current_timespec endp
.text:000000000000D6CC
.text:000000000000D6CC ; ---------------------------------------------------------------------------
.text:000000000000D6D1                 align 20h
.text:000000000000D6E0
.text:000000000000D6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D6E0
.text:000000000000D6E0
.text:000000000000D6E0                 public hard_locale
.text:000000000000D6E0 hard_locale     proc near               ; CODE XREF: main+B99↑p
.text:000000000000D6E0                                         ; main+1414↑p ...
.text:000000000000D6E0 ; __unwind {
.text:000000000000D6E0                 sub     rsp, 8
.text:000000000000D6E4                 xor     esi, esi        ; locale
.text:000000000000D6E6                 call    _setlocale
.text:000000000000D6EB                 mov     rdx, rax
.text:000000000000D6EE                 mov     eax, 1
.text:000000000000D6F3                 test    rdx, rdx
.text:000000000000D6F6                 jz      short loc_D715
.text:000000000000D6F8                 lea     rdi, aC         ; "C"
.text:000000000000D6FF                 mov     ecx, 2
.text:000000000000D704                 mov     rsi, rdx
.text:000000000000D707                 repe cmpsb
.text:000000000000D709                 setnbe  cl
.text:000000000000D70C                 sbb     cl, 0
.text:000000000000D70F                 xor     eax, eax
.text:000000000000D711                 test    cl, cl
.text:000000000000D713                 jnz     short loc_D720
.text:000000000000D715
.text:000000000000D715 loc_D715:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000D715                 add     rsp, 8
.text:000000000000D719                 retn
.text:000000000000D719 ; ---------------------------------------------------------------------------
.text:000000000000D71A                 align 20h
.text:000000000000D720
.text:000000000000D720 loc_D720:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000D720                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000D727                 mov     ecx, 6
.text:000000000000D72C                 mov     rsi, rdx
.text:000000000000D72F                 repe cmpsb
.text:000000000000D731                 setnbe  al
.text:000000000000D734                 sbb     al, 0
.text:000000000000D736                 test    al, al
.text:000000000000D738                 setnz   al
.text:000000000000D73B                 add     rsp, 8
.text:000000000000D73F                 retn
.text:000000000000D73F ; } // starts at D6E0
.text:000000000000D73F hard_locale     endp
.text:000000000000D73F
.text:000000000000D740
.text:000000000000D740 ; =============== S U B R O U T I N E =======================================
.text:000000000000D740
.text:000000000000D740 ; Attributes: info_from_lumina
.text:000000000000D740
.text:000000000000D740 ; size_t __fastcall next_prime(size_t candidate)
.text:000000000000D740 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:000000000000D740                                         ; hash_rehash+7B↓p
.text:000000000000D740 ; __unwind {
.text:000000000000D740                 cmp     rdi, 0Ah
.text:000000000000D744                 mov     eax, 0Ah
.text:000000000000D749                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:000000000000D753                 cmovb   rdi, rax
.text:000000000000D757                 or      rdi, 1
.text:000000000000D75B                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D75F                 jz      short loc_D7CF
.text:000000000000D761                 nop     dword ptr [rax+00000000h]
.text:000000000000D768
.text:000000000000D768 loc_D768:                               ; CODE XREF: next_prime+8D↓j
.text:000000000000D768                 mov     rax, rdi
.text:000000000000D76B                 mov     rcx, rdi
.text:000000000000D76E                 mul     r9
.text:000000000000D771                 mov     rax, rdx
.text:000000000000D774                 shr     rax, 1
.text:000000000000D777                 lea     rax, [rax+rax*2]
.text:000000000000D77B                 sub     rcx, rax
.text:000000000000D77E                 cmp     rdi, 9
.text:000000000000D782                 mov     rax, rcx
.text:000000000000D785                 jbe     short loc_D7C0
.text:000000000000D787                 test    rcx, rcx
.text:000000000000D78A                 jz      short loc_D7C5
.text:000000000000D78C                 mov     r8d, 10h
.text:000000000000D792                 mov     esi, 9
.text:000000000000D797                 mov     ecx, 3
.text:000000000000D79C                 jmp     short loc_D7A9
.text:000000000000D79C ; ---------------------------------------------------------------------------
.text:000000000000D79E                 align 20h
.text:000000000000D7A0
.text:000000000000D7A0 loc_D7A0:                               ; CODE XREF: next_prime+7E↓j
.text:000000000000D7A0                 add     r8, 8
.text:000000000000D7A4                 test    rdx, rdx
.text:000000000000D7A7                 jz      short loc_D7C5
.text:000000000000D7A9
.text:000000000000D7A9 loc_D7A9:                               ; CODE XREF: next_prime+5C↑j
.text:000000000000D7A9                 add     rcx, 2
.text:000000000000D7AD                 xor     edx, edx
.text:000000000000D7AF                 mov     rax, rdi
.text:000000000000D7B2                 div     rcx
.text:000000000000D7B5                 add     rsi, r8
.text:000000000000D7B8                 cmp     rsi, rdi
.text:000000000000D7BB                 mov     rax, rdx
.text:000000000000D7BE                 jb      short loc_D7A0
.text:000000000000D7C0
.text:000000000000D7C0 loc_D7C0:                               ; CODE XREF: next_prime+45↑j
.text:000000000000D7C0                 test    rax, rax
.text:000000000000D7C3                 jnz     short loc_D7CF
.text:000000000000D7C5
.text:000000000000D7C5 loc_D7C5:                               ; CODE XREF: next_prime+4A↑j
.text:000000000000D7C5                                         ; next_prime+67↑j
.text:000000000000D7C5                 add     rdi, 2
.text:000000000000D7C9                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7CD                 jnz     short loc_D768
.text:000000000000D7CF
.text:000000000000D7CF loc_D7CF:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000D7CF                                         ; next_prime+83↑j
.text:000000000000D7CF                 mov     rax, rdi
.text:000000000000D7D2                 retn
.text:000000000000D7D2 ; } // starts at D740
.text:000000000000D7D2 next_prime      endp
.text:000000000000D7D2
.text:000000000000D7D2 ; ---------------------------------------------------------------------------
.text:000000000000D7D3                 align 20h
.text:000000000000D7E0
.text:000000000000D7E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D7E0
.text:000000000000D7E0
.text:000000000000D7E0 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:000000000000D7E0 ; __unwind {
.text:000000000000D7E0                 mov     rax, rdi
.text:000000000000D7E3                 xor     edx, edx
.text:000000000000D7E5                 ror     rax, 3
.text:000000000000D7E9                 div     rsi
.text:000000000000D7EC                 mov     rax, rdx
.text:000000000000D7EF                 retn
.text:000000000000D7EF ; } // starts at D7E0
.text:000000000000D7EF raw_hasher      endp
.text:000000000000D7EF
.text:000000000000D7F0
.text:000000000000D7F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D7F0
.text:000000000000D7F0
.text:000000000000D7F0 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:000000000000D7F0 ; __unwind {
.text:000000000000D7F0                 cmp     rdi, rsi
.text:000000000000D7F3                 setz    al
.text:000000000000D7F6                 retn
.text:000000000000D7F6 ; } // starts at D7F0
.text:000000000000D7F6 raw_comparator  endp
.text:000000000000D7F6
.text:000000000000D7F6 ; ---------------------------------------------------------------------------
.text:000000000000D7F7                 align 20h
.text:000000000000D800
.text:000000000000D800 ; =============== S U B R O U T I N E =======================================
.text:000000000000D800
.text:000000000000D800 ; Attributes: info_from_lumina
.text:000000000000D800
.text:000000000000D800 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:000000000000D800 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:000000000000D800                                         ; transfer_entries+65↓p ...
.text:000000000000D800 ; __unwind {
.text:000000000000D800                 push    rbx
.text:000000000000D801                 mov     rbx, rdi
.text:000000000000D804                 mov     rdi, rsi
.text:000000000000D807                 mov     rsi, [rbx+10h]
.text:000000000000D80B                 call    qword ptr [rbx+30h]
.text:000000000000D80E                 cmp     [rbx+10h], rax
.text:000000000000D812                 jbe     short loc_D81D
.text:000000000000D814                 shl     rax, 4
.text:000000000000D818                 add     rax, [rbx]
.text:000000000000D81B                 pop     rbx
.text:000000000000D81C                 retn
.text:000000000000D81D ; ---------------------------------------------------------------------------
.text:000000000000D81D
.text:000000000000D81D loc_D81D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000D81D                 call    _abort
.text:000000000000D81D ; } // starts at D800
.text:000000000000D81D safe_hasher     endp
.text:000000000000D81D
.text:000000000000D81D ; ---------------------------------------------------------------------------
.text:000000000000D822                 align 10h
.text:000000000000D830
.text:000000000000D830 ; =============== S U B R O U T I N E =======================================
.text:000000000000D830
.text:000000000000D830 ; Attributes: info_from_lumina
.text:000000000000D830
.text:000000000000D830 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:000000000000D830 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:000000000000D830                                         ; hash_insert_if_absent+1CF↓p ...
.text:000000000000D830 ; __unwind {
.text:000000000000D830                 push    r14
.text:000000000000D832                 push    r13
.text:000000000000D834                 mov     r14, rdx
.text:000000000000D837                 push    r12
.text:000000000000D839                 push    rbp
.text:000000000000D83A                 mov     r12, rdi
.text:000000000000D83D                 push    rbx
.text:000000000000D83E                 mov     rbp, rsi
.text:000000000000D841                 mov     r13d, ecx
.text:000000000000D844                 call    safe_hasher
.text:000000000000D849                 mov     [r14], rax
.text:000000000000D84C                 mov     rsi, [rax]
.text:000000000000D84F                 test    rsi, rsi
.text:000000000000D852                 jz      loc_D940
.text:000000000000D858                 cmp     rsi, rbp
.text:000000000000D85B                 mov     rbx, rax
.text:000000000000D85E                 jz      loc_D8F3
.text:000000000000D864                 mov     rdi, rbp
.text:000000000000D867                 call    qword ptr [r12+38h]
.text:000000000000D86C                 test    al, al
.text:000000000000D86E                 jnz     loc_D8F0
.text:000000000000D874                 mov     rax, [rbx+8]
.text:000000000000D878                 test    rax, rax
.text:000000000000D87B                 jz      loc_D940
.text:000000000000D881                 mov     rsi, [rax]
.text:000000000000D884                 cmp     rbp, rsi
.text:000000000000D887                 jnz     short loc_D8A9
.text:000000000000D889                 jmp     short loc_D8BC
.text:000000000000D889 ; ---------------------------------------------------------------------------
.text:000000000000D88B                 align 10h
.text:000000000000D890
.text:000000000000D890 loc_D890:                               ; CODE XREF: hash_find_entry+83↓j
.text:000000000000D890                 mov     rbx, [rbx+8]
.text:000000000000D894                 mov     rax, [rbx+8]
.text:000000000000D898                 test    rax, rax
.text:000000000000D89B                 jz      loc_D940
.text:000000000000D8A1                 mov     rsi, [rax]
.text:000000000000D8A4                 cmp     rsi, rbp
.text:000000000000D8A7                 jz      short loc_D8BC
.text:000000000000D8A9
.text:000000000000D8A9 loc_D8A9:                               ; CODE XREF: hash_find_entry+57↑j
.text:000000000000D8A9                 mov     rdi, rbp
.text:000000000000D8AC                 call    qword ptr [r12+38h]
.text:000000000000D8B1                 test    al, al
.text:000000000000D8B3                 jz      short loc_D890
.text:000000000000D8B5                 mov     rax, [rbx+8]
.text:000000000000D8B9                 mov     rsi, [rax]
.text:000000000000D8BC
.text:000000000000D8BC loc_D8BC:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000D8BC                                         ; hash_find_entry+77↑j
.text:000000000000D8BC                 test    r13b, r13b
.text:000000000000D8BF                 jz      short loc_D8DE
.text:000000000000D8C1                 mov     rdx, [rax+8]
.text:000000000000D8C5                 mov     [rbx+8], rdx
.text:000000000000D8C9                 mov     qword ptr [rax], 0
.text:000000000000D8D0                 mov     rdx, [r12+48h]
.text:000000000000D8D5                 mov     [rax+8], rdx
.text:000000000000D8D9                 mov     [r12+48h], rax
.text:000000000000D8DE
.text:000000000000D8DE loc_D8DE:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000D8DE                                         ; hash_find_entry+C6↓j ...
.text:000000000000D8DE                 pop     rbx
.text:000000000000D8DF                 mov     rax, rsi
.text:000000000000D8E2                 pop     rbp
.text:000000000000D8E3                 pop     r12
.text:000000000000D8E5                 pop     r13
.text:000000000000D8E7                 pop     r14
.text:000000000000D8E9                 retn
.text:000000000000D8E9 ; ---------------------------------------------------------------------------
.text:000000000000D8EA                 align 10h
.text:000000000000D8F0
.text:000000000000D8F0 loc_D8F0:                               ; CODE XREF: hash_find_entry+3E↑j
.text:000000000000D8F0                 mov     rsi, [rbx]
.text:000000000000D8F3
.text:000000000000D8F3 loc_D8F3:                               ; CODE XREF: hash_find_entry+2E↑j
.text:000000000000D8F3                 test    r13b, r13b
.text:000000000000D8F6                 jz      short loc_D8DE
.text:000000000000D8F8                 mov     rax, [rbx+8]
.text:000000000000D8FC                 test    rax, rax
.text:000000000000D8FF                 jz      short loc_D930
.text:000000000000D901                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000D905                 movups  xmmword ptr [rbx], xmm0
.text:000000000000D908                 mov     qword ptr [rax], 0
.text:000000000000D90F                 mov     rdx, [r12+48h]
.text:000000000000D914                 mov     [rax+8], rdx
.text:000000000000D918                 mov     [r12+48h], rax
.text:000000000000D91D                 mov     rax, rsi
.text:000000000000D920                 pop     rbx
.text:000000000000D921                 pop     rbp
.text:000000000000D922                 pop     r12
.text:000000000000D924                 pop     r13
.text:000000000000D926                 pop     r14
.text:000000000000D928                 retn
.text:000000000000D928 ; ---------------------------------------------------------------------------
.text:000000000000D929                 align 10h
.text:000000000000D930
.text:000000000000D930 loc_D930:                               ; CODE XREF: hash_find_entry+CF↑j
.text:000000000000D930                 mov     qword ptr [rbx], 0
.text:000000000000D937                 jmp     short loc_D8DE
.text:000000000000D937 ; ---------------------------------------------------------------------------
.text:000000000000D939                 align 20h
.text:000000000000D940
.text:000000000000D940 loc_D940:                               ; CODE XREF: hash_find_entry+22↑j
.text:000000000000D940                                         ; hash_find_entry+4B↑j ...
.text:000000000000D940                 xor     esi, esi
.text:000000000000D942                 pop     rbx
.text:000000000000D943                 mov     rax, rsi
.text:000000000000D946                 pop     rbp
.text:000000000000D947                 pop     r12
.text:000000000000D949                 pop     r13
.text:000000000000D94B                 pop     r14
.text:000000000000D94D                 retn
.text:000000000000D94D ; } // starts at D830
.text:000000000000D94D hash_find_entry endp
.text:000000000000D94D
.text:000000000000D94D ; ---------------------------------------------------------------------------
.text:000000000000D94E                 align 10h
.text:000000000000D950
.text:000000000000D950 ; =============== S U B R O U T I N E =======================================
.text:000000000000D950
.text:000000000000D950 ; Attributes: info_from_lumina
.text:000000000000D950
.text:000000000000D950 ; _Bool check_tuning(Hash_table *table)
.text:000000000000D950 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:000000000000D950                                         ; hash_initialize+11B↓p ...
.text:000000000000D950 ; __unwind {
.text:000000000000D950                 mov     rdx, [rdi]
.text:000000000000D953                 lea     rcx, default_tuning
.text:000000000000D95A                 mov     eax, 1
.text:000000000000D95F                 cmp     rdx, rcx
.text:000000000000D962                 jz      short locret_D9C5
.text:000000000000D964                 movss   xmm0, dword ptr [rdx+8]
.text:000000000000D969                 ucomiss xmm0, cs:dword_1A034
.text:000000000000D970                 jbe     short loc_D9C0
.text:000000000000D972                 movss   xmm1, cs:dword_1A038
.text:000000000000D97A                 ucomiss xmm1, xmm0
.text:000000000000D97D                 jbe     short loc_D9C0
.text:000000000000D97F                 movss   xmm1, dword ptr [rdx+0Ch]
.text:000000000000D984                 ucomiss xmm1, cs:dword_1A03C
.text:000000000000D98B                 jbe     short loc_D9C0
.text:000000000000D98D                 movss   xmm1, dword ptr [rdx]
.text:000000000000D991                 ucomiss xmm1, cs:dword_1A040
.text:000000000000D998                 jb      short loc_D9C0
.text:000000000000D99A                 addss   xmm1, cs:dword_1A034
.text:000000000000D9A2                 movss   xmm2, dword ptr [rdx+4]
.text:000000000000D9A7                 ucomiss xmm2, xmm1
.text:000000000000D9AA                 jbe     short loc_D9C0
.text:000000000000D9AC                 movss   xmm3, cs:dword_1A044
.text:000000000000D9B4                 ucomiss xmm3, xmm2
.text:000000000000D9B7                 jb      short loc_D9C0
.text:000000000000D9B9                 ucomiss xmm0, xmm1
.text:000000000000D9BC                 ja      short locret_D9C5
.text:000000000000D9BE                 xchg    ax, ax
.text:000000000000D9C0
.text:000000000000D9C0 loc_D9C0:                               ; CODE XREF: check_tuning+20↑j
.text:000000000000D9C0                                         ; check_tuning+2D↑j ...
.text:000000000000D9C0                 mov     [rdi], rcx
.text:000000000000D9C3                 xor     eax, eax
.text:000000000000D9C5
.text:000000000000D9C5 locret_D9C5:                            ; CODE XREF: check_tuning+12↑j
.text:000000000000D9C5                                         ; check_tuning+6C↑j
.text:000000000000D9C5                 rep retn
.text:000000000000D9C5 ; } // starts at D950
.text:000000000000D9C5 check_tuning    endp
.text:000000000000D9C5
.text:000000000000D9C5 ; ---------------------------------------------------------------------------
.text:000000000000D9C7                 align 10h
.text:000000000000D9D0
.text:000000000000D9D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D9D0
.text:000000000000D9D0 ; Attributes: info_from_lumina
.text:000000000000D9D0
.text:000000000000D9D0 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:000000000000D9D0 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:000000000000D9D0                                         ; hash_rehash+152↓p ...
.text:000000000000D9D0 ; __unwind {
.text:000000000000D9D0                 push    r15
.text:000000000000D9D2                 push    r14
.text:000000000000D9D4                 push    r13
.text:000000000000D9D6                 push    r12
.text:000000000000D9D8                 push    rbp
.text:000000000000D9D9                 push    rbx
.text:000000000000D9DA                 sub     rsp, 8
.text:000000000000D9DE                 mov     r12, [rsi]
.text:000000000000D9E1                 cmp     r12, [rsi+8]
.text:000000000000D9E5                 jnb     loc_DAC8
.text:000000000000D9EB                 mov     rbp, rdi
.text:000000000000D9EE                 mov     r13, rsi
.text:000000000000D9F1                 mov     r14d, edx
.text:000000000000D9F4                 nop     dword ptr [rax+00h]
.text:000000000000D9F8
.text:000000000000D9F8 loc_D9F8:                               ; CODE XREF: transfer_entries+F2↓j
.text:000000000000D9F8                 mov     r15, [r12]
.text:000000000000D9FC                 test    r15, r15
.text:000000000000D9FF                 jz      loc_DABA
.text:000000000000DA05                 mov     rbx, [r12+8]
.text:000000000000DA0A                 test    rbx, rbx
.text:000000000000DA0D                 jnz     short loc_DA2C
.text:000000000000DA0F                 jmp     short loc_DA6B
.text:000000000000DA0F ; ---------------------------------------------------------------------------
.text:000000000000DA11                 align 8
.text:000000000000DA18
.text:000000000000DA18 loc_DA18:                               ; CODE XREF: transfer_entries+72↓j
.text:000000000000DA18                 mov     rcx, [rax+8]
.text:000000000000DA1C                 test    rdx, rdx
.text:000000000000DA1F                 mov     [rbx+8], rcx
.text:000000000000DA23                 mov     [rax+8], rbx
.text:000000000000DA27                 mov     rbx, rdx
.text:000000000000DA2A                 jz      short loc_DA67
.text:000000000000DA2C
.text:000000000000DA2C loc_DA2C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000DA2C                                         ; transfer_entries+95↓j
.text:000000000000DA2C                 mov     r15, [rbx]
.text:000000000000DA2F                 mov     rdi, rbp
.text:000000000000DA32                 mov     rsi, r15
.text:000000000000DA35                 call    safe_hasher
.text:000000000000DA3A                 cmp     qword ptr [rax], 0
.text:000000000000DA3E                 mov     rdx, [rbx+8]
.text:000000000000DA42                 jnz     short loc_DA18
.text:000000000000DA44                 mov     [rax], r15
.text:000000000000DA47                 add     qword ptr [rbp+18h], 1
.text:000000000000DA4C                 test    rdx, rdx
.text:000000000000DA4F                 mov     qword ptr [rbx], 0
.text:000000000000DA56                 mov     rax, [rbp+48h]
.text:000000000000DA5A                 mov     [rbx+8], rax
.text:000000000000DA5E                 mov     [rbp+48h], rbx
.text:000000000000DA62                 mov     rbx, rdx
.text:000000000000DA65                 jnz     short loc_DA2C
.text:000000000000DA67
.text:000000000000DA67 loc_DA67:                               ; CODE XREF: transfer_entries+5A↑j
.text:000000000000DA67                 mov     r15, [r12]
.text:000000000000DA6B
.text:000000000000DA6B loc_DA6B:                               ; CODE XREF: transfer_entries+3F↑j
.text:000000000000DA6B                 test    r14b, r14b
.text:000000000000DA6E                 mov     qword ptr [r12+8], 0
.text:000000000000DA77                 jnz     short loc_DABA
.text:000000000000DA79                 mov     rsi, r15
.text:000000000000DA7C                 mov     rdi, rbp
.text:000000000000DA7F                 call    safe_hasher
.text:000000000000DA84                 cmp     qword ptr [rax], 0
.text:000000000000DA88                 mov     rbx, rax
.text:000000000000DA8B                 jz      short loc_DAE0
.text:000000000000DA8D                 mov     rax, [rbp+48h]
.text:000000000000DA91                 test    rax, rax
.text:000000000000DA94                 jz      short loc_DAF0
.text:000000000000DA96                 mov     rdx, [rax+8]
.text:000000000000DA9A                 mov     [rbp+48h], rdx
.text:000000000000DA9E
.text:000000000000DA9E loc_DA9E:                               ; CODE XREF: transfer_entries+12D↓j
.text:000000000000DA9E                 mov     rdx, [rbx+8]
.text:000000000000DAA2                 mov     [rax], r15
.text:000000000000DAA5                 mov     [rax+8], rdx
.text:000000000000DAA9                 mov     [rbx+8], rax
.text:000000000000DAAD
.text:000000000000DAAD loc_DAAD:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000DAAD                 mov     qword ptr [r12], 0
.text:000000000000DAB5                 sub     qword ptr [r13+18h], 1
.text:000000000000DABA
.text:000000000000DABA loc_DABA:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000DABA                                         ; transfer_entries+A7↑j
.text:000000000000DABA                 add     r12, 10h
.text:000000000000DABE                 cmp     [r13+8], r12
.text:000000000000DAC2                 ja      loc_D9F8
.text:000000000000DAC8
.text:000000000000DAC8 loc_DAC8:                               ; CODE XREF: transfer_entries+15↑j
.text:000000000000DAC8                 add     rsp, 8
.text:000000000000DACC                 mov     eax, 1
.text:000000000000DAD1                 pop     rbx
.text:000000000000DAD2                 pop     rbp
.text:000000000000DAD3                 pop     r12
.text:000000000000DAD5                 pop     r13
.text:000000000000DAD7                 pop     r14
.text:000000000000DAD9                 pop     r15
.text:000000000000DADB                 retn
.text:000000000000DADB ; ---------------------------------------------------------------------------
.text:000000000000DADC                 align 20h
.text:000000000000DAE0
.text:000000000000DAE0 loc_DAE0:                               ; CODE XREF: transfer_entries+BB↑j
.text:000000000000DAE0                 mov     [rax], r15
.text:000000000000DAE3                 add     qword ptr [rbp+18h], 1
.text:000000000000DAE8                 jmp     short loc_DAAD
.text:000000000000DAE8 ; ---------------------------------------------------------------------------
.text:000000000000DAEA                 align 10h
.text:000000000000DAF0
.text:000000000000DAF0 loc_DAF0:                               ; CODE XREF: transfer_entries+C4↑j
.text:000000000000DAF0                 mov     edi, 10h        ; size
.text:000000000000DAF5                 call    malloc
.text:000000000000DAFA                 test    rax, rax
.text:000000000000DAFD                 jnz     short loc_DA9E
.text:000000000000DAFF                 add     rsp, 8
.text:000000000000DB03                 xor     eax, eax
.text:000000000000DB05                 pop     rbx
.text:000000000000DB06                 pop     rbp
.text:000000000000DB07                 pop     r12
.text:000000000000DB09                 pop     r13
.text:000000000000DB0B                 pop     r14
.text:000000000000DB0D                 pop     r15
.text:000000000000DB0F                 retn
.text:000000000000DB0F ; } // starts at D9D0
.text:000000000000DB0F transfer_entries endp
.text:000000000000DB0F
.text:000000000000DB10
.text:000000000000DB10 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB10
.text:000000000000DB10
.text:000000000000DB10                 public hash_get_n_buckets
.text:000000000000DB10 hash_get_n_buckets proc near
.text:000000000000DB10 ; __unwind {
.text:000000000000DB10                 mov     rax, [rdi+10h]
.text:000000000000DB14                 retn
.text:000000000000DB14 ; } // starts at DB10
.text:000000000000DB14 hash_get_n_buckets endp
.text:000000000000DB14
.text:000000000000DB14 ; ---------------------------------------------------------------------------
.text:000000000000DB15                 align 20h
.text:000000000000DB20
.text:000000000000DB20 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB20
.text:000000000000DB20
.text:000000000000DB20                 public hash_get_n_buckets_used
.text:000000000000DB20 hash_get_n_buckets_used proc near
.text:000000000000DB20 ; __unwind {
.text:000000000000DB20                 mov     rax, [rdi+18h]
.text:000000000000DB24                 retn
.text:000000000000DB24 ; } // starts at DB20
.text:000000000000DB24 hash_get_n_buckets_used endp
.text:000000000000DB24
.text:000000000000DB24 ; ---------------------------------------------------------------------------
.text:000000000000DB25                 align 10h
.text:000000000000DB30
.text:000000000000DB30 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB30
.text:000000000000DB30
.text:000000000000DB30                 public hash_get_n_entries
.text:000000000000DB30 hash_get_n_entries proc near            ; CODE XREF: main+E18↑p
.text:000000000000DB30 ; __unwind {
.text:000000000000DB30                 mov     rax, [rdi+20h]
.text:000000000000DB34                 retn
.text:000000000000DB34 ; } // starts at DB30
.text:000000000000DB34 hash_get_n_entries endp
.text:000000000000DB34
.text:000000000000DB34 ; ---------------------------------------------------------------------------
.text:000000000000DB35                 align 20h
.text:000000000000DB40
.text:000000000000DB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB40
.text:000000000000DB40 ; Attributes: info_from_lumina
.text:000000000000DB40
.text:000000000000DB40 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:000000000000DB40                 public hash_get_max_bucket_length
.text:000000000000DB40 hash_get_max_bucket_length proc near
.text:000000000000DB40 ; __unwind {
.text:000000000000DB40                 mov     rsi, [rdi]
.text:000000000000DB43                 mov     rdi, [rdi+8]
.text:000000000000DB47                 xor     eax, eax
.text:000000000000DB49                 cmp     rsi, rdi
.text:000000000000DB4C                 jnb     short locret_DB87
.text:000000000000DB4E                 xchg    ax, ax
.text:000000000000DB50
.text:000000000000DB50 loc_DB50:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:000000000000DB50                 cmp     qword ptr [rsi], 0
.text:000000000000DB54                 jz      short loc_DB7C
.text:000000000000DB56                 mov     rdx, [rsi+8]
.text:000000000000DB5A                 mov     ecx, 1
.text:000000000000DB5F                 test    rdx, rdx
.text:000000000000DB62                 jz      short loc_DB75
.text:000000000000DB64                 nop     dword ptr [rax+00h]
.text:000000000000DB68
.text:000000000000DB68 loc_DB68:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:000000000000DB68                 mov     rdx, [rdx+8]
.text:000000000000DB6C                 add     rcx, 1
.text:000000000000DB70                 test    rdx, rdx
.text:000000000000DB73                 jnz     short loc_DB68
.text:000000000000DB75
.text:000000000000DB75 loc_DB75:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:000000000000DB75                 cmp     rax, rcx
.text:000000000000DB78                 cmovb   rax, rcx
.text:000000000000DB7C
.text:000000000000DB7C loc_DB7C:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:000000000000DB7C                 add     rsi, 10h
.text:000000000000DB80                 cmp     rsi, rdi
.text:000000000000DB83                 jb      short loc_DB50
.text:000000000000DB85                 rep retn
.text:000000000000DB87 ; ---------------------------------------------------------------------------
.text:000000000000DB87
.text:000000000000DB87 locret_DB87:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:000000000000DB87                 rep retn
.text:000000000000DB87 ; } // starts at DB40
.text:000000000000DB87 hash_get_max_bucket_length endp
.text:000000000000DB87
.text:000000000000DB87 ; ---------------------------------------------------------------------------
.text:000000000000DB89                 align 10h
.text:000000000000DB90
.text:000000000000DB90 ; =============== S U B R O U T I N E =======================================
.text:000000000000DB90
.text:000000000000DB90 ; Attributes: info_from_lumina
.text:000000000000DB90
.text:000000000000DB90 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:000000000000DB90                 public hash_table_ok
.text:000000000000DB90 hash_table_ok   proc near
.text:000000000000DB90 ; __unwind {
.text:000000000000DB90                 mov     rcx, [rdi]
.text:000000000000DB93                 mov     r8, [rdi+8]
.text:000000000000DB97                 xor     edx, edx
.text:000000000000DB99                 xor     esi, esi
.text:000000000000DB9B                 cmp     rcx, r8
.text:000000000000DB9E                 jnb     short loc_DBD6
.text:000000000000DBA0
.text:000000000000DBA0 loc_DBA0:                               ; CODE XREF: hash_table_ok+44↓j
.text:000000000000DBA0                 cmp     qword ptr [rcx], 0
.text:000000000000DBA4                 jz      short loc_DBCD
.text:000000000000DBA6                 mov     rax, [rcx+8]
.text:000000000000DBAA                 add     rsi, 1
.text:000000000000DBAE                 add     rdx, 1
.text:000000000000DBB2                 test    rax, rax
.text:000000000000DBB5                 jz      short loc_DBCD
.text:000000000000DBB7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000DBC0
.text:000000000000DBC0 loc_DBC0:                               ; CODE XREF: hash_table_ok+3B↓j
.text:000000000000DBC0                 mov     rax, [rax+8]
.text:000000000000DBC4                 add     rdx, 1
.text:000000000000DBC8                 test    rax, rax
.text:000000000000DBCB                 jnz     short loc_DBC0
.text:000000000000DBCD
.text:000000000000DBCD loc_DBCD:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000DBCD                                         ; hash_table_ok+25↑j
.text:000000000000DBCD                 add     rcx, 10h
.text:000000000000DBD1                 cmp     rcx, r8
.text:000000000000DBD4                 jb      short loc_DBA0
.text:000000000000DBD6
.text:000000000000DBD6 loc_DBD6:                               ; CODE XREF: hash_table_ok+E↑j
.text:000000000000DBD6                 xor     eax, eax
.text:000000000000DBD8                 cmp     [rdi+18h], rsi
.text:000000000000DBDC                 jz      short loc_DBE0
.text:000000000000DBDE                 rep retn
.text:000000000000DBE0 ; ---------------------------------------------------------------------------
.text:000000000000DBE0
.text:000000000000DBE0 loc_DBE0:                               ; CODE XREF: hash_table_ok+4C↑j
.text:000000000000DBE0                 cmp     [rdi+20h], rdx
.text:000000000000DBE4                 setz    al
.text:000000000000DBE7                 retn
.text:000000000000DBE7 ; } // starts at DB90
.text:000000000000DBE7 hash_table_ok   endp
.text:000000000000DBE7
.text:000000000000DBE7 ; ---------------------------------------------------------------------------
.text:000000000000DBE8                 align 10h
.text:000000000000DBF0
.text:000000000000DBF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DBF0
.text:000000000000DBF0 ; Attributes: info_from_lumina
.text:000000000000DBF0
.text:000000000000DBF0 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:000000000000DBF0                 public hash_print_statistics
.text:000000000000DBF0 hash_print_statistics proc near
.text:000000000000DBF0 ; __unwind {
.text:000000000000DBF0                 push    r13
.text:000000000000DBF2                 push    r12
.text:000000000000DBF4                 mov     r12, rsi
.text:000000000000DBF7                 push    rbp
.text:000000000000DBF8                 push    rbx
.text:000000000000DBF9                 xor     ebx, ebx
.text:000000000000DBFB                 sub     rsp, 8
.text:000000000000DBFF                 mov     rsi, [rdi]
.text:000000000000DC02                 mov     rcx, [rdi+20h]
.text:000000000000DC06                 mov     rbp, [rdi+10h]
.text:000000000000DC0A                 mov     r13, [rdi+18h]
.text:000000000000DC0E                 mov     rdi, [rdi+8]
.text:000000000000DC12                 cmp     rsi, rdi
.text:000000000000DC15                 jnb     short loc_DC55
.text:000000000000DC17                 nop     word ptr [rax+rax+00000000h]
.text:000000000000DC20
.text:000000000000DC20 loc_DC20:                               ; CODE XREF: hash_print_statistics+63↓j
.text:000000000000DC20                 cmp     qword ptr [rsi], 0
.text:000000000000DC24                 jz      short loc_DC4C
.text:000000000000DC26                 mov     rax, [rsi+8]
.text:000000000000DC2A                 mov     edx, 1
.text:000000000000DC2F                 test    rax, rax
.text:000000000000DC32                 jz      short loc_DC45
.text:000000000000DC34                 nop     dword ptr [rax+00h]
.text:000000000000DC38
.text:000000000000DC38 loc_DC38:                               ; CODE XREF: hash_print_statistics+53↓j
.text:000000000000DC38                 mov     rax, [rax+8]
.text:000000000000DC3C                 add     rdx, 1
.text:000000000000DC40                 test    rax, rax
.text:000000000000DC43                 jnz     short loc_DC38
.text:000000000000DC45
.text:000000000000DC45 loc_DC45:                               ; CODE XREF: hash_print_statistics+42↑j
.text:000000000000DC45                 cmp     rbx, rdx
.text:000000000000DC48                 cmovb   rbx, rdx
.text:000000000000DC4C
.text:000000000000DC4C loc_DC4C:                               ; CODE XREF: hash_print_statistics+34↑j
.text:000000000000DC4C                 add     rsi, 10h
.text:000000000000DC50                 cmp     rsi, rdi
.text:000000000000DC53                 jb      short loc_DC20
.text:000000000000DC55
.text:000000000000DC55 loc_DC55:                               ; CODE XREF: hash_print_statistics+25↑j
.text:000000000000DC55                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:000000000000DC5C                 mov     esi, 1
.text:000000000000DC61                 mov     rdi, r12
.text:000000000000DC64                 xor     eax, eax
.text:000000000000DC66                 call    ___fprintf_chk
.text:000000000000DC6B                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:000000000000DC72                 xor     eax, eax
.text:000000000000DC74                 mov     rcx, rbp
.text:000000000000DC77                 mov     esi, 1
.text:000000000000DC7C                 mov     rdi, r12
.text:000000000000DC7F                 call    ___fprintf_chk
.text:000000000000DC84                 test    r13, r13
.text:000000000000DC87                 js      short loc_DCF0
.text:000000000000DC89                 pxor    xmm0, xmm0
.text:000000000000DC8D                 test    rbp, rbp
.text:000000000000DC90                 cvtsi2sd xmm0, r13
.text:000000000000DC95                 mulsd   xmm0, cs:qword_1A058
.text:000000000000DC9D                 js      short loc_DD19
.text:000000000000DC9F
.text:000000000000DC9F loc_DC9F:                               ; CODE XREF: hash_print_statistics+127↓j
.text:000000000000DC9F                 pxor    xmm1, xmm1
.text:000000000000DCA3                 cvtsi2sd xmm1, rbp
.text:000000000000DCA8
.text:000000000000DCA8 loc_DCA8:                               ; CODE XREF: hash_print_statistics+142↓j
.text:000000000000DCA8                 divsd   xmm0, xmm1
.text:000000000000DCAC                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:000000000000DCB3                 mov     rcx, r13
.text:000000000000DCB6                 mov     rdi, r12
.text:000000000000DCB9                 mov     esi, 1
.text:000000000000DCBE                 mov     eax, 1
.text:000000000000DCC3                 call    ___fprintf_chk
.text:000000000000DCC8                 add     rsp, 8
.text:000000000000DCCC                 mov     rcx, rbx
.text:000000000000DCCF                 mov     rdi, r12
.text:000000000000DCD2                 pop     rbx
.text:000000000000DCD3                 pop     rbp
.text:000000000000DCD4                 pop     r12
.text:000000000000DCD6                 pop     r13
.text:000000000000DCD8                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:000000000000DCDF                 mov     esi, 1
.text:000000000000DCE4                 xor     eax, eax
.text:000000000000DCE6                 jmp     ___fprintf_chk
.text:000000000000DCE6 ; ---------------------------------------------------------------------------
.text:000000000000DCEB                 align 10h
.text:000000000000DCF0
.text:000000000000DCF0 loc_DCF0:                               ; CODE XREF: hash_print_statistics+97↑j
.text:000000000000DCF0                 mov     rax, r13
.text:000000000000DCF3                 mov     rdx, r13
.text:000000000000DCF6                 pxor    xmm0, xmm0
.text:000000000000DCFA                 shr     rax, 1
.text:000000000000DCFD                 and     edx, 1
.text:000000000000DD00                 or      rax, rdx
.text:000000000000DD03                 test    rbp, rbp
.text:000000000000DD06                 cvtsi2sd xmm0, rax
.text:000000000000DD0B                 addsd   xmm0, xmm0
.text:000000000000DD0F                 mulsd   xmm0, cs:qword_1A058
.text:000000000000DD17                 jns     short loc_DC9F
.text:000000000000DD19
.text:000000000000DD19 loc_DD19:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:000000000000DD19                 mov     rax, rbp
.text:000000000000DD1C                 pxor    xmm1, xmm1
.text:000000000000DD20                 shr     rax, 1
.text:000000000000DD23                 and     ebp, 1
.text:000000000000DD26                 or      rax, rbp
.text:000000000000DD29                 cvtsi2sd xmm1, rax
.text:000000000000DD2E                 addsd   xmm1, xmm1
.text:000000000000DD32                 jmp     loc_DCA8
.text:000000000000DD32 ; } // starts at DBF0
.text:000000000000DD32 hash_print_statistics endp
.text:000000000000DD32
.text:000000000000DD32 ; ---------------------------------------------------------------------------
.text:000000000000DD37                 align 20h
.text:000000000000DD40
.text:000000000000DD40 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD40
.text:000000000000DD40 ; Attributes: info_from_lumina
.text:000000000000DD40
.text:000000000000DD40 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:000000000000DD40                 public hash_lookup
.text:000000000000DD40 hash_lookup     proc near               ; CODE XREF: seen_file+31↑p
.text:000000000000DD40 ; __unwind {
.text:000000000000DD40                 push    r12
.text:000000000000DD42                 push    rbp
.text:000000000000DD43                 mov     r12, rdi
.text:000000000000DD46                 push    rbx
.text:000000000000DD47                 mov     rbp, rsi
.text:000000000000DD4A                 call    safe_hasher
.text:000000000000DD4F                 mov     rsi, [rax]
.text:000000000000DD52                 test    rsi, rsi
.text:000000000000DD55                 jz      short loc_DD7D
.text:000000000000DD57                 mov     rbx, rax
.text:000000000000DD5A                 jmp     short loc_DD63
.text:000000000000DD5A ; ---------------------------------------------------------------------------
.text:000000000000DD5C                 align 20h
.text:000000000000DD60
.text:000000000000DD60 loc_DD60:                               ; CODE XREF: hash_lookup+3B↓j
.text:000000000000DD60                 mov     rsi, [rbx]
.text:000000000000DD63
.text:000000000000DD63 loc_DD63:                               ; CODE XREF: hash_lookup+1A↑j
.text:000000000000DD63                 cmp     rsi, rbp
.text:000000000000DD66                 jz      short loc_DD7F
.text:000000000000DD68                 mov     rdi, rbp
.text:000000000000DD6B                 call    qword ptr [r12+38h]
.text:000000000000DD70                 test    al, al
.text:000000000000DD72                 jnz     short loc_DD90
.text:000000000000DD74                 mov     rbx, [rbx+8]
.text:000000000000DD78                 test    rbx, rbx
.text:000000000000DD7B                 jnz     short loc_DD60
.text:000000000000DD7D
.text:000000000000DD7D loc_DD7D:                               ; CODE XREF: hash_lookup+15↑j
.text:000000000000DD7D                 xor     esi, esi
.text:000000000000DD7F
.text:000000000000DD7F loc_DD7F:                               ; CODE XREF: hash_lookup+26↑j
.text:000000000000DD7F                 pop     rbx
.text:000000000000DD80                 mov     rax, rsi
.text:000000000000DD83                 pop     rbp
.text:000000000000DD84                 pop     r12
.text:000000000000DD86                 retn
.text:000000000000DD86 ; ---------------------------------------------------------------------------
.text:000000000000DD87                 align 10h
.text:000000000000DD90
.text:000000000000DD90 loc_DD90:                               ; CODE XREF: hash_lookup+32↑j
.text:000000000000DD90                 mov     rsi, [rbx]
.text:000000000000DD93                 pop     rbx
.text:000000000000DD94                 pop     rbp
.text:000000000000DD95                 mov     rax, rsi
.text:000000000000DD98                 pop     r12
.text:000000000000DD9A                 retn
.text:000000000000DD9A ; } // starts at DD40
.text:000000000000DD9A hash_lookup     endp
.text:000000000000DD9A
.text:000000000000DD9A ; ---------------------------------------------------------------------------
.text:000000000000DD9B                 align 20h
.text:000000000000DDA0
.text:000000000000DDA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDA0
.text:000000000000DDA0 ; Attributes: info_from_lumina
.text:000000000000DDA0
.text:000000000000DDA0 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:000000000000DDA0                 public hash_get_first
.text:000000000000DDA0 hash_get_first  proc near
.text:000000000000DDA0 ; __unwind {
.text:000000000000DDA0                 cmp     qword ptr [rdi+20h], 0
.text:000000000000DDA5                 jz      short loc_DDD3
.text:000000000000DDA7                 mov     rdx, [rdi]
.text:000000000000DDAA                 mov     rcx, [rdi+8]
.text:000000000000DDAE                 cmp     rdx, rcx
.text:000000000000DDB1                 jnb     short loc_DDD8
.text:000000000000DDB3                 mov     rax, [rdx]
.text:000000000000DDB6                 test    rax, rax
.text:000000000000DDB9                 jnz     short locret_DDD6
.text:000000000000DDBB                 nop     dword ptr [rax+rax+00h]
.text:000000000000DDC0
.text:000000000000DDC0 loc_DDC0:                               ; CODE XREF: hash_get_first+2F↓j
.text:000000000000DDC0                 add     rdx, 10h
.text:000000000000DDC4                 cmp     rdx, rcx
.text:000000000000DDC7                 jnb     short loc_DDD8
.text:000000000000DDC9                 mov     rax, [rdx]
.text:000000000000DDCC                 test    rax, rax
.text:000000000000DDCF                 jz      short loc_DDC0
.text:000000000000DDD1                 rep retn
.text:000000000000DDD3 ; ---------------------------------------------------------------------------
.text:000000000000DDD3
.text:000000000000DDD3 loc_DDD3:                               ; CODE XREF: hash_get_first+5↑j
.text:000000000000DDD3                 xor     eax, eax
.text:000000000000DDD5                 retn
.text:000000000000DDD6 ; ---------------------------------------------------------------------------
.text:000000000000DDD6
.text:000000000000DDD6 locret_DDD6:                            ; CODE XREF: hash_get_first+19↑j
.text:000000000000DDD6                 rep retn
.text:000000000000DDD8 ; ---------------------------------------------------------------------------
.text:000000000000DDD8
.text:000000000000DDD8 loc_DDD8:                               ; CODE XREF: hash_get_first+11↑j
.text:000000000000DDD8                                         ; hash_get_first+27↑j
.text:000000000000DDD8                 sub     rsp, 8
.text:000000000000DDDC                 call    _abort
.text:000000000000DDDC ; } // starts at DDA0
.text:000000000000DDDC hash_get_first  endp
.text:000000000000DDDC
.text:000000000000DDDC ; ---------------------------------------------------------------------------
.text:000000000000DDE1                 align 10h
.text:000000000000DDF0
.text:000000000000DDF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DDF0
.text:000000000000DDF0 ; Attributes: info_from_lumina
.text:000000000000DDF0
.text:000000000000DDF0 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:000000000000DDF0                 public hash_get_next
.text:000000000000DDF0 hash_get_next   proc near
.text:000000000000DDF0 ; __unwind {
.text:000000000000DDF0                 push    rbp
.text:000000000000DDF1                 push    rbx
.text:000000000000DDF2                 mov     rbp, rdi
.text:000000000000DDF5                 mov     rbx, rsi
.text:000000000000DDF8                 sub     rsp, 8
.text:000000000000DDFC                 call    safe_hasher
.text:000000000000DE01                 mov     rdx, rax
.text:000000000000DE04                 mov     rcx, rax
.text:000000000000DE07                 mov     rax, [rdx]
.text:000000000000DE0A                 mov     rdx, [rdx+8]
.text:000000000000DE0E                 cmp     rax, rbx
.text:000000000000DE11                 jz      short loc_DE29
.text:000000000000DE13                 nop     dword ptr [rax+rax+00h]
.text:000000000000DE18
.text:000000000000DE18 loc_DE18:                               ; CODE XREF: hash_get_next+37↓j
.text:000000000000DE18                 test    rdx, rdx
.text:000000000000DE1B                 jz      short loc_DE2E
.text:000000000000DE1D                 mov     rax, [rdx]
.text:000000000000DE20                 mov     rdx, [rdx+8]
.text:000000000000DE24                 cmp     rax, rbx
.text:000000000000DE27                 jnz     short loc_DE18
.text:000000000000DE29
.text:000000000000DE29 loc_DE29:                               ; CODE XREF: hash_get_next+21↑j
.text:000000000000DE29                 test    rdx, rdx
.text:000000000000DE2C                 jnz     short loc_DE58
.text:000000000000DE2E
.text:000000000000DE2E loc_DE2E:                               ; CODE XREF: hash_get_next+2B↑j
.text:000000000000DE2E                 mov     rdx, [rbp+8]
.text:000000000000DE32                 jmp     short loc_DE40
.text:000000000000DE32 ; ---------------------------------------------------------------------------
.text:000000000000DE34                 align 8
.text:000000000000DE38
.text:000000000000DE38 loc_DE38:                               ; CODE XREF: hash_get_next+57↓j
.text:000000000000DE38                 mov     rax, [rcx]
.text:000000000000DE3B                 test    rax, rax
.text:000000000000DE3E                 jnz     short loc_DE4B
.text:000000000000DE40
.text:000000000000DE40 loc_DE40:                               ; CODE XREF: hash_get_next+42↑j
.text:000000000000DE40                 add     rcx, 10h
.text:000000000000DE44                 cmp     rdx, rcx
.text:000000000000DE47                 ja      short loc_DE38
.text:000000000000DE49                 xor     eax, eax
.text:000000000000DE4B
.text:000000000000DE4B loc_DE4B:                               ; CODE XREF: hash_get_next+4E↑j
.text:000000000000DE4B                 add     rsp, 8
.text:000000000000DE4F                 pop     rbx
.text:000000000000DE50                 pop     rbp
.text:000000000000DE51                 retn
.text:000000000000DE51 ; ---------------------------------------------------------------------------
.text:000000000000DE52                 align 8
.text:000000000000DE58
.text:000000000000DE58 loc_DE58:                               ; CODE XREF: hash_get_next+3C↑j
.text:000000000000DE58                 mov     rax, [rdx]
.text:000000000000DE5B                 add     rsp, 8
.text:000000000000DE5F                 pop     rbx
.text:000000000000DE60                 pop     rbp
.text:000000000000DE61                 retn
.text:000000000000DE61 ; } // starts at DDF0
.text:000000000000DE61 hash_get_next   endp
.text:000000000000DE61
.text:000000000000DE61 ; ---------------------------------------------------------------------------
.text:000000000000DE62                 align 10h
.text:000000000000DE70
.text:000000000000DE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000DE70
.text:000000000000DE70 ; Attributes: info_from_lumina
.text:000000000000DE70
.text:000000000000DE70 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:000000000000DE70                 public hash_get_entries
.text:000000000000DE70 hash_get_entries proc near
.text:000000000000DE70 ; __unwind {
.text:000000000000DE70                 mov     r9, [rdi]
.text:000000000000DE73                 cmp     [rdi+8], r9
.text:000000000000DE77                 jbe     short loc_DED2
.text:000000000000DE79                 xor     r8d, r8d
.text:000000000000DE7C
.text:000000000000DE7C loc_DE7C:                               ; CODE XREF: hash_get_entries+55↓j
.text:000000000000DE7C                 mov     rcx, [r9]
.text:000000000000DE7F                 test    rcx, rcx
.text:000000000000DE82                 jz      short loc_DEBD
.text:000000000000DE84                 cmp     rdx, r8
.text:000000000000DE87                 jbe     short loc_DEC7
.text:000000000000DE89                 mov     [rsi+r8*8], rcx
.text:000000000000DE8D                 mov     rcx, [r9+8]
.text:000000000000DE91                 lea     rax, [r8+1]
.text:000000000000DE95                 test    rcx, rcx
.text:000000000000DE98                 jz      short loc_DEBA
.text:000000000000DE9A                 nop     word ptr [rax+rax+00h]
.text:000000000000DEA0
.text:000000000000DEA0 loc_DEA0:                               ; CODE XREF: hash_get_entries+48↓j
.text:000000000000DEA0                 cmp     rdx, rax
.text:000000000000DEA3                 jz      short locret_DED0
.text:000000000000DEA5                 mov     r8, [rcx]
.text:000000000000DEA8                 add     rax, 1
.text:000000000000DEAC                 mov     [rsi+rax*8-8], r8
.text:000000000000DEB1                 mov     rcx, [rcx+8]
.text:000000000000DEB5                 test    rcx, rcx
.text:000000000000DEB8                 jnz     short loc_DEA0
.text:000000000000DEBA
.text:000000000000DEBA loc_DEBA:                               ; CODE XREF: hash_get_entries+28↑j
.text:000000000000DEBA                 mov     r8, rax
.text:000000000000DEBD
.text:000000000000DEBD loc_DEBD:                               ; CODE XREF: hash_get_entries+12↑j
.text:000000000000DEBD                 add     r9, 10h
.text:000000000000DEC1                 cmp     [rdi+8], r9
.text:000000000000DEC5                 ja      short loc_DE7C
.text:000000000000DEC7
.text:000000000000DEC7 loc_DEC7:                               ; CODE XREF: hash_get_entries+17↑j
.text:000000000000DEC7                 mov     rax, r8
.text:000000000000DECA                 retn
.text:000000000000DECA ; ---------------------------------------------------------------------------
.text:000000000000DECB                 align 10h
.text:000000000000DED0
.text:000000000000DED0 locret_DED0:                            ; CODE XREF: hash_get_entries+33↑j
.text:000000000000DED0                 rep retn
.text:000000000000DED2 ; ---------------------------------------------------------------------------
.text:000000000000DED2
.text:000000000000DED2 loc_DED2:                               ; CODE XREF: hash_get_entries+7↑j
.text:000000000000DED2                 xor     eax, eax
.text:000000000000DED4                 retn
.text:000000000000DED4 ; } // starts at DE70
.text:000000000000DED4 hash_get_entries endp
.text:000000000000DED4
.text:000000000000DED4 ; ---------------------------------------------------------------------------
.text:000000000000DED5                 align 20h
.text:000000000000DEE0
.text:000000000000DEE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DEE0
.text:000000000000DEE0 ; Attributes: info_from_lumina
.text:000000000000DEE0
.text:000000000000DEE0 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:000000000000DEE0                 public hash_do_for_each
.text:000000000000DEE0 hash_do_for_each proc near
.text:000000000000DEE0 ; __unwind {
.text:000000000000DEE0                 push    r15
.text:000000000000DEE2                 push    r14
.text:000000000000DEE4                 push    r13
.text:000000000000DEE6                 push    r12
.text:000000000000DEE8                 push    rbp
.text:000000000000DEE9                 push    rbx
.text:000000000000DEEA                 sub     rsp, 8
.text:000000000000DEEE                 mov     r14, [rdi]
.text:000000000000DEF1                 cmp     [rdi+8], r14
.text:000000000000DEF5                 jbe     short loc_DF46
.text:000000000000DEF7                 mov     r13, rdx
.text:000000000000DEFA                 mov     r12, rsi
.text:000000000000DEFD                 mov     r15, rdi
.text:000000000000DF00                 xor     ebp, ebp
.text:000000000000DF02
.text:000000000000DF02 loc_DF02:                               ; CODE XREF: hash_do_for_each+52↓j
.text:000000000000DF02                 mov     rdi, [r14]
.text:000000000000DF05                 test    rdi, rdi
.text:000000000000DF08                 jz      short loc_DF2A
.text:000000000000DF0A                 mov     rbx, r14
.text:000000000000DF0D                 jmp     short loc_DF13
.text:000000000000DF0D ; ---------------------------------------------------------------------------
.text:000000000000DF0F                 align 10h
.text:000000000000DF10
.text:000000000000DF10 loc_DF10:                               ; CODE XREF: hash_do_for_each+48↓j
.text:000000000000DF10                 mov     rdi, [rbx]
.text:000000000000DF13
.text:000000000000DF13 loc_DF13:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:000000000000DF13                 mov     rsi, r13
.text:000000000000DF16                 call    r12
.text:000000000000DF19                 test    al, al
.text:000000000000DF1B                 jz      short loc_DF34
.text:000000000000DF1D                 mov     rbx, [rbx+8]
.text:000000000000DF21                 add     rbp, 1
.text:000000000000DF25                 test    rbx, rbx
.text:000000000000DF28                 jnz     short loc_DF10
.text:000000000000DF2A
.text:000000000000DF2A loc_DF2A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:000000000000DF2A                 add     r14, 10h
.text:000000000000DF2E                 cmp     [r15+8], r14
.text:000000000000DF32                 ja      short loc_DF02
.text:000000000000DF34
.text:000000000000DF34 loc_DF34:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:000000000000DF34                                         ; hash_do_for_each+68↓j
.text:000000000000DF34                 add     rsp, 8
.text:000000000000DF38                 mov     rax, rbp
.text:000000000000DF3B                 pop     rbx
.text:000000000000DF3C                 pop     rbp
.text:000000000000DF3D                 pop     r12
.text:000000000000DF3F                 pop     r13
.text:000000000000DF41                 pop     r14
.text:000000000000DF43                 pop     r15
.text:000000000000DF45                 retn
.text:000000000000DF46 ; ---------------------------------------------------------------------------
.text:000000000000DF46
.text:000000000000DF46 loc_DF46:                               ; CODE XREF: hash_do_for_each+15↑j
.text:000000000000DF46                 xor     ebp, ebp
.text:000000000000DF48                 jmp     short loc_DF34
.text:000000000000DF48 ; } // starts at DEE0
.text:000000000000DF48 hash_do_for_each endp
.text:000000000000DF48
.text:000000000000DF48 ; ---------------------------------------------------------------------------
.text:000000000000DF4A                 align 10h
.text:000000000000DF50
.text:000000000000DF50 ; =============== S U B R O U T I N E =======================================
.text:000000000000DF50
.text:000000000000DF50 ; Attributes: info_from_lumina
.text:000000000000DF50
.text:000000000000DF50 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:000000000000DF50                 public hash_string
.text:000000000000DF50 hash_string     proc near
.text:000000000000DF50 ; __unwind {
.text:000000000000DF50                 movzx   ecx, byte ptr [rdi]
.text:000000000000DF53                 xor     edx, edx
.text:000000000000DF55                 test    cl, cl
.text:000000000000DF57                 jz      short loc_DF7D
.text:000000000000DF59                 nop     dword ptr [rax+00000000h]
.text:000000000000DF60
.text:000000000000DF60 loc_DF60:                               ; CODE XREF: hash_string+2B↓j
.text:000000000000DF60                 mov     rax, rdx
.text:000000000000DF63                 add     rdi, 1
.text:000000000000DF67                 shl     rax, 5
.text:000000000000DF6B                 sub     rax, rdx
.text:000000000000DF6E                 xor     edx, edx
.text:000000000000DF70                 add     rax, rcx
.text:000000000000DF73                 movzx   ecx, byte ptr [rdi]
.text:000000000000DF76                 div     rsi
.text:000000000000DF79                 test    cl, cl
.text:000000000000DF7B                 jnz     short loc_DF60
.text:000000000000DF7D
.text:000000000000DF7D loc_DF7D:                               ; CODE XREF: hash_string+7↑j
.text:000000000000DF7D                 mov     rax, rdx
.text:000000000000DF80                 retn
.text:000000000000DF80 ; } // starts at DF50
.text:000000000000DF80 hash_string     endp
.text:000000000000DF80
.text:000000000000DF80 ; ---------------------------------------------------------------------------
.text:000000000000DF81                 align 10h
.text:000000000000DF90
.text:000000000000DF90 ; =============== S U B R O U T I N E =======================================
.text:000000000000DF90
.text:000000000000DF90 ; Attributes: info_from_lumina
.text:000000000000DF90
.text:000000000000DF90 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:000000000000DF90                 public hash_reset_tuning
.text:000000000000DF90 hash_reset_tuning proc near
.text:000000000000DF90 ; __unwind {
.text:000000000000DF90                 mov     rax, 3F80000000000000h
.text:000000000000DF9A                 mov     byte ptr [rdi+10h], 0
.text:000000000000DF9E                 mov     [rdi], rax
.text:000000000000DFA1                 mov     rax, 3FB4FDF43F4CCCCDh
.text:000000000000DFAB                 mov     [rdi+8], rax
.text:000000000000DFAF                 retn
.text:000000000000DFAF ; } // starts at DF90
.text:000000000000DFAF hash_reset_tuning endp
.text:000000000000DFAF
.text:000000000000DFB0
.text:000000000000DFB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000DFB0
.text:000000000000DFB0 ; Attributes: info_from_lumina
.text:000000000000DFB0
.text:000000000000DFB0 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:000000000000DFB0                 public hash_initialize
.text:000000000000DFB0 hash_initialize proc near               ; CODE XREF: main+BF8↑p
.text:000000000000DFB0                                         ; canonicalize_filename_mode+502↑p
.text:000000000000DFB0 ; __unwind {
.text:000000000000DFB0                 push    r15
.text:000000000000DFB2                 push    r14
.text:000000000000DFB4                 lea     rax, raw_hasher
.text:000000000000DFBB                 push    r13
.text:000000000000DFBD                 push    r12
.text:000000000000DFBF                 mov     r12, rdx
.text:000000000000DFC2                 push    rbp
.text:000000000000DFC3                 push    rbx
.text:000000000000DFC4                 mov     r13, rcx
.text:000000000000DFC7                 mov     rbp, rdi
.text:000000000000DFCA                 mov     edi, 50h ; 'P'  ; size
.text:000000000000DFCF                 mov     r15, rsi
.text:000000000000DFD2                 sub     rsp, 8
.text:000000000000DFD6                 test    rdx, rdx
.text:000000000000DFD9                 mov     r14, r8
.text:000000000000DFDC                 cmovz   r12, rax
.text:000000000000DFE0                 lea     rax, raw_comparator
.text:000000000000DFE7                 test    rcx, rcx
.text:000000000000DFEA                 cmovz   r13, rax
.text:000000000000DFEE                 call    malloc
.text:000000000000DFF3                 test    rax, rax
.text:000000000000DFF6                 mov     rbx, rax
.text:000000000000DFF9                 jz      loc_E0AA
.text:000000000000DFFF                 test    r15, r15
.text:000000000000E002                 lea     rdi, [rax+28h]
.text:000000000000E006                 jz      loc_E0C0
.text:000000000000E00C                 mov     [rax+28h], r15
.text:000000000000E010                 call    check_tuning
.text:000000000000E015                 test    al, al
.text:000000000000E017                 jz      loc_E0A0
.text:000000000000E01D                 cmp     byte ptr [r15+10h], 0
.text:000000000000E022                 jz      loc_E120
.text:000000000000E028
.text:000000000000E028 loc_E028:                               ; CODE XREF: hash_initialize+16A↓j
.text:000000000000E028                                         ; hash_initialize+1A5↓j
.text:000000000000E028                 mov     rdi, rbp
.text:000000000000E02B                 call    next_prime
.text:000000000000E030                 mov     edx, 8
.text:000000000000E035                 mov     rbp, rax
.text:000000000000E038                 xor     ecx, ecx
.text:000000000000E03A                 mov     rax, rdx
.text:000000000000E03D                 mul     rbp
.text:000000000000E040                 jo      loc_E15A
.text:000000000000E046
.text:000000000000E046 loc_E046:                               ; CODE XREF: hash_initialize+1AF↓j
.text:000000000000E046                 test    rax, rax
.text:000000000000E049                 js      short loc_E0A0
.text:000000000000E04B                 test    rcx, rcx
.text:000000000000E04E                 jnz     short loc_E0A0
.text:000000000000E050                 test    rbp, rbp
.text:000000000000E053                 mov     [rbx+10h], rbp
.text:000000000000E057                 jz      short loc_E0A0
.text:000000000000E059                 mov     esi, 10h        ; size
.text:000000000000E05E                 mov     rdi, rbp        ; nmemb
.text:000000000000E061                 call    _calloc
.text:000000000000E066                 test    rax, rax
.text:000000000000E069                 mov     [rbx], rax
.text:000000000000E06C                 jz      short loc_E0A0
.text:000000000000E06E                 shl     rbp, 4
.text:000000000000E072                 mov     qword ptr [rbx+18h], 0
.text:000000000000E07A                 mov     qword ptr [rbx+20h], 0
.text:000000000000E082                 add     rbp, rax
.text:000000000000E085                 mov     [rbx+30h], r12
.text:000000000000E089                 mov     [rbx+38h], r13
.text:000000000000E08D                 mov     [rbx+8], rbp
.text:000000000000E091                 mov     [rbx+40h], r14
.text:000000000000E095                 mov     qword ptr [rbx+48h], 0
.text:000000000000E09D                 jmp     short loc_E0AA
.text:000000000000E09D ; ---------------------------------------------------------------------------
.text:000000000000E09F                 align 20h
.text:000000000000E0A0
.text:000000000000E0A0 loc_E0A0:                               ; CODE XREF: hash_initialize+67↑j
.text:000000000000E0A0                                         ; hash_initialize+99↑j ...
.text:000000000000E0A0                 mov     rdi, rbx        ; ptr
.text:000000000000E0A3                 xor     ebx, ebx
.text:000000000000E0A5                 call    free
.text:000000000000E0AA
.text:000000000000E0AA loc_E0AA:                               ; CODE XREF: hash_initialize+49↑j
.text:000000000000E0AA                                         ; hash_initialize+ED↑j
.text:000000000000E0AA                 add     rsp, 8
.text:000000000000E0AE                 mov     rax, rbx
.text:000000000000E0B1                 pop     rbx
.text:000000000000E0B2                 pop     rbp
.text:000000000000E0B3                 pop     r12
.text:000000000000E0B5                 pop     r13
.text:000000000000E0B7                 pop     r14
.text:000000000000E0B9                 pop     r15
.text:000000000000E0BB                 retn
.text:000000000000E0BB ; ---------------------------------------------------------------------------
.text:000000000000E0BC                 align 20h
.text:000000000000E0C0
.text:000000000000E0C0 loc_E0C0:                               ; CODE XREF: hash_initialize+56↑j
.text:000000000000E0C0                 lea     rax, default_tuning
.text:000000000000E0C7                 mov     [rbx+28h], rax
.text:000000000000E0CB                 call    check_tuning
.text:000000000000E0D0                 test    al, al
.text:000000000000E0D2                 movss   xmm1, cs:dword_1A048
.text:000000000000E0DA                 jz      short loc_E0A0
.text:000000000000E0DC                 test    rbp, rbp
.text:000000000000E0DF                 js      short loc_E12B
.text:000000000000E0E1
.text:000000000000E0E1 loc_E0E1:                               ; CODE XREF: hash_initialize+179↓j
.text:000000000000E0E1                 pxor    xmm0, xmm0
.text:000000000000E0E5                 cvtsi2ss xmm0, rbp
.text:000000000000E0EA
.text:000000000000E0EA loc_E0EA:                               ; CODE XREF: hash_initialize+194↓j
.text:000000000000E0EA                 divss   xmm0, xmm1
.text:000000000000E0EE                 ucomiss xmm0, cs:dword_1A04C
.text:000000000000E0F5                 jnb     short loc_E0A0
.text:000000000000E0F7                 ucomiss xmm0, cs:dword_1A050
.text:000000000000E0FE                 jb      short loc_E150
.text:000000000000E100                 subss   xmm0, cs:dword_1A050
.text:000000000000E108                 mov     rax, 8000000000000000h
.text:000000000000E112                 cvttss2si rbp, xmm0
.text:000000000000E117                 xor     rbp, rax
.text:000000000000E11A                 jmp     loc_E028
.text:000000000000E11A ; ---------------------------------------------------------------------------
.text:000000000000E11F                 align 20h
.text:000000000000E120
.text:000000000000E120 loc_E120:                               ; CODE XREF: hash_initialize+72↑j
.text:000000000000E120                 test    rbp, rbp
.text:000000000000E123                 movss   xmm1, dword ptr [r15+8]
.text:000000000000E129                 jns     short loc_E0E1
.text:000000000000E12B
.text:000000000000E12B loc_E12B:                               ; CODE XREF: hash_initialize+12F↑j
.text:000000000000E12B                 mov     rax, rbp
.text:000000000000E12E                 pxor    xmm0, xmm0
.text:000000000000E132                 shr     rax, 1
.text:000000000000E135                 and     ebp, 1
.text:000000000000E138                 or      rax, rbp
.text:000000000000E13B                 cvtsi2ss xmm0, rax
.text:000000000000E140                 addss   xmm0, xmm0
.text:000000000000E144                 jmp     short loc_E0EA
.text:000000000000E144 ; ---------------------------------------------------------------------------
.text:000000000000E146                 align 10h
.text:000000000000E150
.text:000000000000E150 loc_E150:                               ; CODE XREF: hash_initialize+14E↑j
.text:000000000000E150                 cvttss2si rbp, xmm0
.text:000000000000E155                 jmp     loc_E028
.text:000000000000E15A ; ---------------------------------------------------------------------------
.text:000000000000E15A
.text:000000000000E15A loc_E15A:                               ; CODE XREF: hash_initialize+90↑j
.text:000000000000E15A                 mov     ecx, 1
.text:000000000000E15F                 jmp     loc_E046
.text:000000000000E15F ; } // starts at DFB0
.text:000000000000E15F hash_initialize endp
.text:000000000000E15F
.text:000000000000E15F ; ---------------------------------------------------------------------------
.text:000000000000E164                 align 10h
.text:000000000000E170
.text:000000000000E170 ; =============== S U B R O U T I N E =======================================
.text:000000000000E170
.text:000000000000E170 ; Attributes: info_from_lumina
.text:000000000000E170
.text:000000000000E170 ; void __fastcall hash_clear(Hash_table *table)
.text:000000000000E170                 public hash_clear
.text:000000000000E170 hash_clear      proc near
.text:000000000000E170 ; __unwind {
.text:000000000000E170                 push    r12
.text:000000000000E172                 push    rbp
.text:000000000000E173                 mov     rbp, rdi
.text:000000000000E176                 push    rbx
.text:000000000000E177                 mov     r12, [rdi]
.text:000000000000E17A                 cmp     r12, [rdi+8]
.text:000000000000E17E                 jnb     short loc_E1EB
.text:000000000000E180
.text:000000000000E180 loc_E180:                               ; CODE XREF: hash_clear+79↓j
.text:000000000000E180                 cmp     qword ptr [r12], 0
.text:000000000000E185                 jz      short loc_E1E1
.text:000000000000E187                 mov     rbx, [r12+8]
.text:000000000000E18C                 mov     rax, [rbp+40h]
.text:000000000000E190                 test    rbx, rbx
.text:000000000000E193                 jz      short loc_E1C5
.text:000000000000E195                 nop     dword ptr [rax]
.text:000000000000E198
.text:000000000000E198 loc_E198:                               ; CODE XREF: hash_clear+53↓j
.text:000000000000E198                 test    rax, rax
.text:000000000000E19B                 jz      short loc_E1A6
.text:000000000000E19D                 mov     rdi, [rbx]
.text:000000000000E1A0                 call    rax
.text:000000000000E1A2                 mov     rax, [rbp+40h]
.text:000000000000E1A6
.text:000000000000E1A6 loc_E1A6:                               ; CODE XREF: hash_clear+2B↑j
.text:000000000000E1A6                 mov     rdx, [rbx+8]
.text:000000000000E1AA                 mov     rcx, [rbp+48h]
.text:000000000000E1AE                 mov     qword ptr [rbx], 0
.text:000000000000E1B5                 test    rdx, rdx
.text:000000000000E1B8                 mov     [rbx+8], rcx
.text:000000000000E1BC                 mov     [rbp+48h], rbx
.text:000000000000E1C0                 mov     rbx, rdx
.text:000000000000E1C3                 jnz     short loc_E198
.text:000000000000E1C5
.text:000000000000E1C5 loc_E1C5:                               ; CODE XREF: hash_clear+23↑j
.text:000000000000E1C5                 test    rax, rax
.text:000000000000E1C8                 jz      short loc_E1D0
.text:000000000000E1CA                 mov     rdi, [r12]
.text:000000000000E1CE                 call    rax
.text:000000000000E1D0
.text:000000000000E1D0 loc_E1D0:                               ; CODE XREF: hash_clear+58↑j
.text:000000000000E1D0                 mov     qword ptr [r12], 0
.text:000000000000E1D8                 mov     qword ptr [r12+8], 0
.text:000000000000E1E1
.text:000000000000E1E1 loc_E1E1:                               ; CODE XREF: hash_clear+15↑j
.text:000000000000E1E1                 add     r12, 10h
.text:000000000000E1E5                 cmp     [rbp+8], r12
.text:000000000000E1E9                 ja      short loc_E180
.text:000000000000E1EB
.text:000000000000E1EB loc_E1EB:                               ; CODE XREF: hash_clear+E↑j
.text:000000000000E1EB                 mov     qword ptr [rbp+18h], 0
.text:000000000000E1F3                 mov     qword ptr [rbp+20h], 0
.text:000000000000E1FB                 pop     rbx
.text:000000000000E1FC                 pop     rbp
.text:000000000000E1FD                 pop     r12
.text:000000000000E1FF                 retn
.text:000000000000E1FF ; } // starts at E170
.text:000000000000E1FF hash_clear      endp
.text:000000000000E1FF
.text:000000000000E200
.text:000000000000E200 ; =============== S U B R O U T I N E =======================================
.text:000000000000E200
.text:000000000000E200 ; Attributes: info_from_lumina
.text:000000000000E200
.text:000000000000E200 ; void __fastcall hash_free(Hash_table *table)
.text:000000000000E200                 public hash_free
.text:000000000000E200 hash_free       proc near               ; CODE XREF: main+E29↑p
.text:000000000000E200                                         ; canonicalize_filename_mode+219↑p ...
.text:000000000000E200 ; __unwind {
.text:000000000000E200                 push    r12
.text:000000000000E202                 push    rbp
.text:000000000000E203                 mov     r12, rdi
.text:000000000000E206                 push    rbx
.text:000000000000E207                 cmp     qword ptr [rdi+40h], 0
.text:000000000000E20C                 mov     rbp, [rdi]
.text:000000000000E20F                 mov     rax, [rdi+8]
.text:000000000000E213                 jz      short loc_E263
.text:000000000000E215                 cmp     qword ptr [rdi+20h], 0
.text:000000000000E21A                 jz      short loc_E263
.text:000000000000E21C                 cmp     rbp, rax
.text:000000000000E21F                 jnb     short loc_E29C
.text:000000000000E221                 nop     dword ptr [rax+00000000h]
.text:000000000000E228
.text:000000000000E228 loc_E228:                               ; CODE XREF: hash_free+5D↓j
.text:000000000000E228                 mov     rdi, [rbp+0]
.text:000000000000E22C                 test    rdi, rdi
.text:000000000000E22F                 jz      short loc_E256
.text:000000000000E231                 mov     rbx, rbp
.text:000000000000E234                 jmp     short loc_E243
.text:000000000000E234 ; ---------------------------------------------------------------------------
.text:000000000000E236                 align 20h
.text:000000000000E240
.text:000000000000E240 loc_E240:                               ; CODE XREF: hash_free+4F↓j
.text:000000000000E240                 mov     rdi, [rbx]
.text:000000000000E243
.text:000000000000E243 loc_E243:                               ; CODE XREF: hash_free+34↑j
.text:000000000000E243                 call    qword ptr [r12+40h]
.text:000000000000E248                 mov     rbx, [rbx+8]
.text:000000000000E24C                 test    rbx, rbx
.text:000000000000E24F                 jnz     short loc_E240
.text:000000000000E251                 mov     rax, [r12+8]
.text:000000000000E256
.text:000000000000E256 loc_E256:                               ; CODE XREF: hash_free+2F↑j
.text:000000000000E256                 add     rbp, 10h
.text:000000000000E25A                 cmp     rax, rbp
.text:000000000000E25D                 ja      short loc_E228
.text:000000000000E25F                 mov     rbp, [r12]
.text:000000000000E263
.text:000000000000E263 loc_E263:                               ; CODE XREF: hash_free+13↑j
.text:000000000000E263                                         ; hash_free+1A↑j
.text:000000000000E263                 cmp     rbp, rax
.text:000000000000E266                 jnb     short loc_E29C
.text:000000000000E268                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000E270
.text:000000000000E270 loc_E270:                               ; CODE XREF: hash_free+9A↓j
.text:000000000000E270                 mov     rdi, [rbp+8]    ; ptr
.text:000000000000E274                 test    rdi, rdi
.text:000000000000E277                 jz      short loc_E291
.text:000000000000E279                 nop     dword ptr [rax+00000000h]
.text:000000000000E280
.text:000000000000E280 loc_E280:                               ; CODE XREF: hash_free+8F↓j
.text:000000000000E280                 mov     rbx, [rdi+8]
.text:000000000000E284                 call    free
.text:000000000000E289                 test    rbx, rbx
.text:000000000000E28C                 mov     rdi, rbx
.text:000000000000E28F                 jnz     short loc_E280
.text:000000000000E291
.text:000000000000E291 loc_E291:                               ; CODE XREF: hash_free+77↑j
.text:000000000000E291                 add     rbp, 10h
.text:000000000000E295                 cmp     [r12+8], rbp
.text:000000000000E29A                 ja      short loc_E270
.text:000000000000E29C
.text:000000000000E29C loc_E29C:                               ; CODE XREF: hash_free+1F↑j
.text:000000000000E29C                                         ; hash_free+66↑j
.text:000000000000E29C                 mov     rdi, [r12+48h]  ; ptr
.text:000000000000E2A1                 test    rdi, rdi
.text:000000000000E2A4                 jz      short loc_E2C1
.text:000000000000E2A6                 db      2Eh
.text:000000000000E2A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E2B0
.text:000000000000E2B0 loc_E2B0:                               ; CODE XREF: hash_free+BF↓j
.text:000000000000E2B0                 mov     rbx, [rdi+8]
.text:000000000000E2B4                 call    free
.text:000000000000E2B9                 test    rbx, rbx
.text:000000000000E2BC                 mov     rdi, rbx
.text:000000000000E2BF                 jnz     short loc_E2B0
.text:000000000000E2C1
.text:000000000000E2C1 loc_E2C1:                               ; CODE XREF: hash_free+A4↑j
.text:000000000000E2C1                 mov     rdi, [r12]      ; ptr
.text:000000000000E2C5                 call    free
.text:000000000000E2CA                 pop     rbx
.text:000000000000E2CB                 mov     rdi, r12        ; ptr
.text:000000000000E2CE                 pop     rbp
.text:000000000000E2CF                 pop     r12
.text:000000000000E2D1                 jmp     free
.text:000000000000E2D1 ; } // starts at E200
.text:000000000000E2D1 hash_free       endp
.text:000000000000E2D1
.text:000000000000E2D1 ; ---------------------------------------------------------------------------
.text:000000000000E2D6                 align 20h
.text:000000000000E2E0
.text:000000000000E2E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E2E0
.text:000000000000E2E0 ; Attributes: info_from_lumina
.text:000000000000E2E0
.text:000000000000E2E0 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:000000000000E2E0                 public hash_rehash
.text:000000000000E2E0 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:000000000000E2E0                                         ; hash_delete+10F↓p
.text:000000000000E2E0
.text:000000000000E2E0 ptr             = qword ptr -78h
.text:000000000000E2E0 var_70          = qword ptr -70h
.text:000000000000E2E0 var_68          = qword ptr -68h
.text:000000000000E2E0 var_60          = qword ptr -60h
.text:000000000000E2E0 var_58          = qword ptr -58h
.text:000000000000E2E0 var_50          = qword ptr -50h
.text:000000000000E2E0 var_48          = qword ptr -48h
.text:000000000000E2E0 var_40          = qword ptr -40h
.text:000000000000E2E0 var_38          = qword ptr -38h
.text:000000000000E2E0 var_30          = qword ptr -30h
.text:000000000000E2E0 var_20          = qword ptr -20h
.text:000000000000E2E0
.text:000000000000E2E0 ; __unwind {
.text:000000000000E2E0                 push    r12
.text:000000000000E2E2                 push    rbp
.text:000000000000E2E3                 mov     rbp, rdi
.text:000000000000E2E6                 push    rbx
.text:000000000000E2E7                 sub     rsp, 60h
.text:000000000000E2EB                 mov     r12, [rdi+28h]
.text:000000000000E2EF                 mov     rax, fs:28h
.text:000000000000E2F8                 mov     [rsp+78h+var_20], rax
.text:000000000000E2FD                 xor     eax, eax
.text:000000000000E2FF                 cmp     byte ptr [r12+10h], 0
.text:000000000000E305                 jnz     short loc_E358
.text:000000000000E307                 test    rsi, rsi
.text:000000000000E30A                 js      loc_E488
.text:000000000000E310                 pxor    xmm0, xmm0
.text:000000000000E314                 cvtsi2ss xmm0, rsi
.text:000000000000E319
.text:000000000000E319 loc_E319:                               ; CODE XREF: hash_rehash+1C1↓j
.text:000000000000E319                 divss   xmm0, dword ptr [r12+8]
.text:000000000000E320                 ucomiss xmm0, cs:dword_1A04C
.text:000000000000E327                 jnb     loc_E460
.text:000000000000E32D                 ucomiss xmm0, cs:dword_1A050
.text:000000000000E334                 jb      loc_E4B0
.text:000000000000E33A                 subss   xmm0, cs:dword_1A050
.text:000000000000E342                 mov     rax, 8000000000000000h
.text:000000000000E34C                 cvttss2si rsi, xmm0
.text:000000000000E351                 xor     rsi, rax
.text:000000000000E354                 nop     dword ptr [rax+00h]
.text:000000000000E358
.text:000000000000E358 loc_E358:                               ; CODE XREF: hash_rehash+25↑j
.text:000000000000E358                                         ; hash_rehash+1D5↓j
.text:000000000000E358                 mov     rdi, rsi
.text:000000000000E35B                 call    next_prime
.text:000000000000E360                 mov     edx, 8
.text:000000000000E365                 mov     rbx, rax
.text:000000000000E368                 xor     ecx, ecx
.text:000000000000E36A                 mov     rax, rdx
.text:000000000000E36D                 mul     rbx
.text:000000000000E370                 jo      loc_E50F
.text:000000000000E376
.text:000000000000E376 loc_E376:                               ; CODE XREF: hash_rehash+234↓j
.text:000000000000E376                 test    rax, rax
.text:000000000000E379                 mov     eax, 1
.text:000000000000E37E                 cmovs   rcx, rax
.text:000000000000E382                 test    rbx, rbx
.text:000000000000E385                 jz      loc_E460
.text:000000000000E38B                 and     ecx, 1
.text:000000000000E38E                 jnz     loc_E460
.text:000000000000E394                 cmp     [rbp+10h], rbx
.text:000000000000E398                 jz      loc_E4C0
.text:000000000000E39E                 mov     esi, 10h        ; size
.text:000000000000E3A3                 mov     rdi, rbx        ; nmemb
.text:000000000000E3A6                 call    _calloc
.text:000000000000E3AB                 test    rax, rax
.text:000000000000E3AE                 mov     [rsp+78h+ptr], rax
.text:000000000000E3B2                 jz      loc_E460
.text:000000000000E3B8                 mov     [rsp+78h+var_68], rbx
.text:000000000000E3BD                 shl     rbx, 4
.text:000000000000E3C1                 mov     [rsp+78h+var_50], r12
.text:000000000000E3C6                 add     rbx, rax
.text:000000000000E3C9                 mov     rax, [rbp+30h]
.text:000000000000E3CD                 mov     r12, rsp
.text:000000000000E3D0                 xor     edx, edx
.text:000000000000E3D2                 mov     rsi, rbp
.text:000000000000E3D5                 mov     rdi, r12
.text:000000000000E3D8                 mov     [rsp+78h+var_70], rbx
.text:000000000000E3DD                 mov     [rsp+78h+var_60], 0
.text:000000000000E3E6                 mov     [rsp+78h+var_48], rax
.text:000000000000E3EB                 mov     rax, [rbp+38h]
.text:000000000000E3EF                 mov     [rsp+78h+var_58], 0
.text:000000000000E3F8                 mov     [rsp+78h+var_40], rax
.text:000000000000E3FD                 mov     rax, [rbp+40h]
.text:000000000000E401                 mov     [rsp+78h+var_38], rax
.text:000000000000E406                 mov     rax, [rbp+48h]
.text:000000000000E40A                 mov     [rsp+78h+var_30], rax
.text:000000000000E40F                 call    transfer_entries
.text:000000000000E414                 test    al, al
.text:000000000000E416                 mov     ebx, eax
.text:000000000000E418                 jnz     loc_E4D0
.text:000000000000E41E                 mov     rax, [rsp+78h+var_30]
.text:000000000000E423                 mov     edx, 1
.text:000000000000E428                 mov     rsi, r12
.text:000000000000E42B                 mov     rdi, rbp
.text:000000000000E42E                 mov     [rbp+48h], rax
.text:000000000000E432                 call    transfer_entries
.text:000000000000E437                 test    al, al
.text:000000000000E439                 jz      loc_E519
.text:000000000000E43F                 xor     edx, edx
.text:000000000000E441                 mov     rsi, r12
.text:000000000000E444                 mov     rdi, rbp
.text:000000000000E447                 call    transfer_entries
.text:000000000000E44C                 test    al, al
.text:000000000000E44E                 jz      loc_E519
.text:000000000000E454                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000E458                 call    free
.text:000000000000E45D                 jmp     short loc_E462
.text:000000000000E45D ; ---------------------------------------------------------------------------
.text:000000000000E45F                 align 20h
.text:000000000000E460
.text:000000000000E460 loc_E460:                               ; CODE XREF: hash_rehash+47↑j
.text:000000000000E460                                         ; hash_rehash+A5↑j ...
.text:000000000000E460                 xor     ebx, ebx
.text:000000000000E462
.text:000000000000E462 loc_E462:                               ; CODE XREF: hash_rehash+17D↑j
.text:000000000000E462                                         ; hash_rehash+1E5↓j ...
.text:000000000000E462                 mov     rcx, [rsp+78h+var_20]
.text:000000000000E467                 xor     rcx, fs:28h
.text:000000000000E470                 mov     eax, ebx
.text:000000000000E472                 jnz     loc_E50A
.text:000000000000E478                 add     rsp, 60h
.text:000000000000E47C                 pop     rbx
.text:000000000000E47D                 pop     rbp
.text:000000000000E47E                 pop     r12
.text:000000000000E480                 retn
.text:000000000000E480 ; ---------------------------------------------------------------------------
.text:000000000000E481                 align 8
.text:000000000000E488
.text:000000000000E488 loc_E488:                               ; CODE XREF: hash_rehash+2A↑j
.text:000000000000E488                 mov     rax, rsi
.text:000000000000E48B                 pxor    xmm0, xmm0
.text:000000000000E48F                 shr     rax, 1
.text:000000000000E492                 and     esi, 1
.text:000000000000E495                 or      rax, rsi
.text:000000000000E498                 cvtsi2ss xmm0, rax
.text:000000000000E49D                 addss   xmm0, xmm0
.text:000000000000E4A1                 jmp     loc_E319
.text:000000000000E4A1 ; ---------------------------------------------------------------------------
.text:000000000000E4A6                 align 10h
.text:000000000000E4B0
.text:000000000000E4B0 loc_E4B0:                               ; CODE XREF: hash_rehash+54↑j
.text:000000000000E4B0                 cvttss2si rsi, xmm0
.text:000000000000E4B5                 jmp     loc_E358
.text:000000000000E4B5 ; ---------------------------------------------------------------------------
.text:000000000000E4BA                 align 20h
.text:000000000000E4C0
.text:000000000000E4C0 loc_E4C0:                               ; CODE XREF: hash_rehash+B8↑j
.text:000000000000E4C0                 mov     ebx, 1
.text:000000000000E4C5                 jmp     short loc_E462
.text:000000000000E4C5 ; ---------------------------------------------------------------------------
.text:000000000000E4C7                 align 10h
.text:000000000000E4D0
.text:000000000000E4D0 loc_E4D0:                               ; CODE XREF: hash_rehash+138↑j
.text:000000000000E4D0                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000E4D4                 call    free
.text:000000000000E4D9                 mov     rax, [rsp+78h+ptr]
.text:000000000000E4DD                 mov     [rbp+0], rax
.text:000000000000E4E1                 mov     rax, [rsp+78h+var_70]
.text:000000000000E4E6                 mov     [rbp+8], rax
.text:000000000000E4EA                 mov     rax, [rsp+78h+var_68]
.text:000000000000E4EF                 mov     [rbp+10h], rax
.text:000000000000E4F3                 mov     rax, [rsp+78h+var_60]
.text:000000000000E4F8                 mov     [rbp+18h], rax
.text:000000000000E4FC                 mov     rax, [rsp+78h+var_30]
.text:000000000000E501                 mov     [rbp+48h], rax
.text:000000000000E505                 jmp     loc_E462
.text:000000000000E50A ; ---------------------------------------------------------------------------
.text:000000000000E50A
.text:000000000000E50A loc_E50A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000E50A                 call    ___stack_chk_fail
.text:000000000000E50F ; ---------------------------------------------------------------------------
.text:000000000000E50F
.text:000000000000E50F loc_E50F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000E50F                 mov     ecx, 1
.text:000000000000E514                 jmp     loc_E376
.text:000000000000E519 ; ---------------------------------------------------------------------------
.text:000000000000E519
.text:000000000000E519 loc_E519:                               ; CODE XREF: hash_rehash+159↑j
.text:000000000000E519                                         ; hash_rehash+16E↑j
.text:000000000000E519                 call    _abort
.text:000000000000E519 ; } // starts at E2E0
.text:000000000000E519 hash_rehash     endp
.text:000000000000E519
.text:000000000000E519 ; ---------------------------------------------------------------------------
.text:000000000000E51E                 align 20h
.text:000000000000E520
.text:000000000000E520 ; =============== S U B R O U T I N E =======================================
.text:000000000000E520
.text:000000000000E520 ; Attributes: info_from_lumina
.text:000000000000E520
.text:000000000000E520 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:000000000000E520                 public hash_insert_if_absent
.text:000000000000E520 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:000000000000E520
.text:000000000000E520 var_38          = qword ptr -38h
.text:000000000000E520 var_30          = qword ptr -30h
.text:000000000000E520
.text:000000000000E520 ; __unwind {
.text:000000000000E520                 push    r13
.text:000000000000E522                 push    r12
.text:000000000000E524                 push    rbp
.text:000000000000E525                 push    rbx
.text:000000000000E526                 sub     rsp, 18h
.text:000000000000E52A                 mov     rax, fs:28h
.text:000000000000E533                 mov     [rsp+38h+var_30], rax
.text:000000000000E538                 xor     eax, eax
.text:000000000000E53A                 test    rsi, rsi
.text:000000000000E53D                 jz      loc_E6FD
.text:000000000000E543                 mov     r12, rsp
.text:000000000000E546                 xor     ecx, ecx
.text:000000000000E548                 mov     r13, rdx
.text:000000000000E54B                 mov     rdx, r12
.text:000000000000E54E                 mov     rbx, rdi
.text:000000000000E551                 mov     rbp, rsi
.text:000000000000E554                 call    hash_find_entry
.text:000000000000E559                 test    rax, rax
.text:000000000000E55C                 mov     rdx, rax
.text:000000000000E55F                 jz      short loc_E590
.text:000000000000E561                 xor     eax, eax
.text:000000000000E563                 test    r13, r13
.text:000000000000E566                 jz      short loc_E56C
.text:000000000000E568                 mov     [r13+0], rdx
.text:000000000000E56C
.text:000000000000E56C loc_E56C:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:000000000000E56C                                         ; hash_insert_if_absent+E9↓j ...
.text:000000000000E56C                 mov     rcx, [rsp+38h+var_30]
.text:000000000000E571                 xor     rcx, fs:28h
.text:000000000000E57A                 jnz     loc_E79F
.text:000000000000E580                 add     rsp, 18h
.text:000000000000E584                 pop     rbx
.text:000000000000E585                 pop     rbp
.text:000000000000E586                 pop     r12
.text:000000000000E588                 pop     r13
.text:000000000000E58A                 retn
.text:000000000000E58A ; ---------------------------------------------------------------------------
.text:000000000000E58B                 align 10h
.text:000000000000E590
.text:000000000000E590 loc_E590:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:000000000000E590                 mov     rax, [rbx+18h]
.text:000000000000E594                 test    rax, rax
.text:000000000000E597                 js      short loc_E610
.text:000000000000E599                 pxor    xmm1, xmm1
.text:000000000000E59D                 mov     rdx, [rbx+28h]
.text:000000000000E5A1                 cvtsi2ss xmm1, rax
.text:000000000000E5A6                 mov     rax, [rbx+10h]
.text:000000000000E5AA                 test    rax, rax
.text:000000000000E5AD                 js      loc_E63A
.text:000000000000E5B3
.text:000000000000E5B3 loc_E5B3:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:000000000000E5B3                 pxor    xmm0, xmm0
.text:000000000000E5B7                 cvtsi2ss xmm0, rax
.text:000000000000E5BC
.text:000000000000E5BC loc_E5BC:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000E5BC                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000E5C1                 ucomiss xmm1, xmm0
.text:000000000000E5C4                 ja      loc_E660
.text:000000000000E5CA
.text:000000000000E5CA loc_E5CA:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000E5CA                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000E5CA                 mov     r12, [rsp+38h+var_38]
.text:000000000000E5CE                 cmp     qword ptr [r12], 0
.text:000000000000E5D3                 jz      loc_E708
.text:000000000000E5D9                 mov     rax, [rbx+48h]
.text:000000000000E5DD                 test    rax, rax
.text:000000000000E5E0                 jz      loc_E720
.text:000000000000E5E6                 mov     rdx, [rax+8]
.text:000000000000E5EA                 mov     [rbx+48h], rdx
.text:000000000000E5EE
.text:000000000000E5EE loc_E5EE:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000E5EE                 mov     rdx, [r12+8]
.text:000000000000E5F3                 mov     [rax], rbp
.text:000000000000E5F6                 mov     [rax+8], rdx
.text:000000000000E5FA                 mov     [r12+8], rax
.text:000000000000E5FF                 mov     eax, 1
.text:000000000000E604                 add     qword ptr [rbx+20h], 1
.text:000000000000E609                 jmp     loc_E56C
.text:000000000000E609 ; ---------------------------------------------------------------------------
.text:000000000000E60E                 align 10h
.text:000000000000E610
.text:000000000000E610 loc_E610:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:000000000000E610                 mov     rdx, rax
.text:000000000000E613                 pxor    xmm1, xmm1
.text:000000000000E617                 and     eax, 1
.text:000000000000E61A                 shr     rdx, 1
.text:000000000000E61D                 or      rdx, rax
.text:000000000000E620                 mov     rax, [rbx+10h]
.text:000000000000E624                 cvtsi2ss xmm1, rdx
.text:000000000000E629                 mov     rdx, [rbx+28h]
.text:000000000000E62D                 test    rax, rax
.text:000000000000E630                 addss   xmm1, xmm1
.text:000000000000E634                 jns     loc_E5B3
.text:000000000000E63A
.text:000000000000E63A loc_E63A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000E63A                 mov     rcx, rax
.text:000000000000E63D                 pxor    xmm0, xmm0
.text:000000000000E641                 shr     rcx, 1
.text:000000000000E644                 and     eax, 1
.text:000000000000E647                 or      rcx, rax
.text:000000000000E64A                 cvtsi2ss xmm0, rcx
.text:000000000000E64F                 addss   xmm0, xmm0
.text:000000000000E653                 jmp     loc_E5BC
.text:000000000000E653 ; ---------------------------------------------------------------------------
.text:000000000000E658                 align 20h
.text:000000000000E660
.text:000000000000E660 loc_E660:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:000000000000E660                 lea     rdi, [rbx+28h]
.text:000000000000E664                 call    check_tuning
.text:000000000000E669                 mov     rax, [rbx+10h]
.text:000000000000E66D                 mov     rdx, [rbx+28h]
.text:000000000000E671                 test    rax, rax
.text:000000000000E674                 movss   xmm2, dword ptr [rdx+8]
.text:000000000000E679                 js      loc_E740
.text:000000000000E67F                 pxor    xmm0, xmm0
.text:000000000000E683                 cvtsi2ss xmm0, rax
.text:000000000000E688
.text:000000000000E688 loc_E688:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:000000000000E688                 mov     rax, [rbx+18h]
.text:000000000000E68C                 test    rax, rax
.text:000000000000E68F                 js      loc_E760
.text:000000000000E695                 pxor    xmm1, xmm1
.text:000000000000E699                 cvtsi2ss xmm1, rax
.text:000000000000E69E
.text:000000000000E69E loc_E69E:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:000000000000E69E                 movaps  xmm3, xmm2
.text:000000000000E6A1                 mulss   xmm3, xmm0
.text:000000000000E6A5                 ucomiss xmm1, xmm3
.text:000000000000E6A8                 jbe     loc_E5CA
.text:000000000000E6AE                 cmp     byte ptr [rdx+10h], 0
.text:000000000000E6B2                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:000000000000E6B7                 jnz     short loc_E6BD
.text:000000000000E6B9                 mulss   xmm0, xmm2
.text:000000000000E6BD
.text:000000000000E6BD loc_E6BD:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000E6BD                 ucomiss xmm0, cs:dword_1A04C
.text:000000000000E6C4                 jnb     short loc_E733
.text:000000000000E6C6                 ucomiss xmm0, cs:dword_1A050
.text:000000000000E6CD                 jnb     loc_E780
.text:000000000000E6D3                 cvttss2si rsi, xmm0
.text:000000000000E6D8
.text:000000000000E6D8 loc_E6D8:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:000000000000E6D8                 mov     rdi, rbx
.text:000000000000E6DB                 call    hash_rehash
.text:000000000000E6E0                 test    al, al
.text:000000000000E6E2                 jz      short loc_E733
.text:000000000000E6E4                 xor     ecx, ecx
.text:000000000000E6E6                 mov     rdx, r12
.text:000000000000E6E9                 mov     rsi, rbp
.text:000000000000E6EC                 mov     rdi, rbx
.text:000000000000E6EF                 call    hash_find_entry
.text:000000000000E6F4                 test    rax, rax
.text:000000000000E6F7                 jz      loc_E5CA
.text:000000000000E6FD
.text:000000000000E6FD loc_E6FD:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000E6FD                 call    _abort
.text:000000000000E6FD ; ---------------------------------------------------------------------------
.text:000000000000E702                 align 8
.text:000000000000E708
.text:000000000000E708 loc_E708:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:000000000000E708                 mov     [r12], rbp
.text:000000000000E70C                 mov     eax, 1
.text:000000000000E711                 add     qword ptr [rbx+20h], 1
.text:000000000000E716                 add     qword ptr [rbx+18h], 1
.text:000000000000E71B                 jmp     loc_E56C
.text:000000000000E720 ; ---------------------------------------------------------------------------
.text:000000000000E720
.text:000000000000E720 loc_E720:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:000000000000E720                 mov     edi, 10h        ; size
.text:000000000000E725                 call    malloc
.text:000000000000E72A                 test    rax, rax
.text:000000000000E72D                 jnz     loc_E5EE
.text:000000000000E733
.text:000000000000E733 loc_E733:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:000000000000E733                                         ; hash_insert_if_absent+1C2↑j
.text:000000000000E733                 mov     eax, 0FFFFFFFFh
.text:000000000000E738                 jmp     loc_E56C
.text:000000000000E738 ; ---------------------------------------------------------------------------
.text:000000000000E73D                 align 20h
.text:000000000000E740
.text:000000000000E740 loc_E740:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:000000000000E740                 mov     rcx, rax
.text:000000000000E743                 pxor    xmm0, xmm0
.text:000000000000E747                 shr     rcx, 1
.text:000000000000E74A                 and     eax, 1
.text:000000000000E74D                 or      rcx, rax
.text:000000000000E750                 cvtsi2ss xmm0, rcx
.text:000000000000E755                 addss   xmm0, xmm0
.text:000000000000E759                 jmp     loc_E688
.text:000000000000E759 ; ---------------------------------------------------------------------------
.text:000000000000E75E                 align 20h
.text:000000000000E760
.text:000000000000E760 loc_E760:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:000000000000E760                 mov     rcx, rax
.text:000000000000E763                 pxor    xmm1, xmm1
.text:000000000000E767                 shr     rcx, 1
.text:000000000000E76A                 and     eax, 1
.text:000000000000E76D                 or      rcx, rax
.text:000000000000E770                 cvtsi2ss xmm1, rcx
.text:000000000000E775                 addss   xmm1, xmm1
.text:000000000000E779                 jmp     loc_E69E
.text:000000000000E779 ; ---------------------------------------------------------------------------
.text:000000000000E77E                 align 20h
.text:000000000000E780
.text:000000000000E780 loc_E780:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:000000000000E780                 subss   xmm0, cs:dword_1A050
.text:000000000000E788                 mov     rax, 8000000000000000h
.text:000000000000E792                 cvttss2si rsi, xmm0
.text:000000000000E797                 xor     rsi, rax
.text:000000000000E79A                 jmp     loc_E6D8
.text:000000000000E79F ; ---------------------------------------------------------------------------
.text:000000000000E79F
.text:000000000000E79F loc_E79F:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:000000000000E79F                 call    ___stack_chk_fail
.text:000000000000E79F ; } // starts at E520
.text:000000000000E79F hash_insert_if_absent endp
.text:000000000000E79F
.text:000000000000E79F ; ---------------------------------------------------------------------------
.text:000000000000E7A4                 align 10h
.text:000000000000E7B0
.text:000000000000E7B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7B0
.text:000000000000E7B0 ; Attributes: info_from_lumina
.text:000000000000E7B0
.text:000000000000E7B0 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:000000000000E7B0                 public hash_insert
.text:000000000000E7B0 hash_insert     proc near               ; CODE XREF: print_dir+124↑p
.text:000000000000E7B0                                         ; record_file+46↑p
.text:000000000000E7B0
.text:000000000000E7B0 var_18          = qword ptr -18h
.text:000000000000E7B0 var_10          = qword ptr -10h
.text:000000000000E7B0
.text:000000000000E7B0 ; __unwind {
.text:000000000000E7B0                 push    rbx
.text:000000000000E7B1                 mov     rbx, rsi
.text:000000000000E7B4                 sub     rsp, 10h
.text:000000000000E7B8                 mov     rdx, rsp
.text:000000000000E7BB                 mov     rax, fs:28h
.text:000000000000E7C4                 mov     [rsp+18h+var_10], rax
.text:000000000000E7C9                 xor     eax, eax
.text:000000000000E7CB                 call    hash_insert_if_absent
.text:000000000000E7D0                 cmp     eax, 0FFFFFFFFh
.text:000000000000E7D3                 jz      short loc_E800
.text:000000000000E7D5                 test    eax, eax
.text:000000000000E7D7                 jnz     short loc_E7DD
.text:000000000000E7D9                 mov     rbx, [rsp+18h+var_18]
.text:000000000000E7DD
.text:000000000000E7DD loc_E7DD:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000E7DD                                         ; hash_insert+52↓j
.text:000000000000E7DD                 mov     rcx, [rsp+18h+var_10]
.text:000000000000E7E2                 xor     rcx, fs:28h
.text:000000000000E7EB                 mov     rax, rbx
.text:000000000000E7EE                 jnz     short loc_E804
.text:000000000000E7F0                 add     rsp, 10h
.text:000000000000E7F4                 pop     rbx
.text:000000000000E7F5                 retn
.text:000000000000E7F5 ; ---------------------------------------------------------------------------
.text:000000000000E7F6                 align 20h
.text:000000000000E800
.text:000000000000E800 loc_E800:                               ; CODE XREF: hash_insert+23↑j
.text:000000000000E800                 xor     ebx, ebx
.text:000000000000E802                 jmp     short loc_E7DD
.text:000000000000E804 ; ---------------------------------------------------------------------------
.text:000000000000E804
.text:000000000000E804 loc_E804:                               ; CODE XREF: hash_insert+3E↑j
.text:000000000000E804                 call    ___stack_chk_fail
.text:000000000000E804 ; } // starts at E7B0
.text:000000000000E804 hash_insert     endp
.text:000000000000E804
.text:000000000000E804 ; ---------------------------------------------------------------------------
.text:000000000000E809                 align 10h
.text:000000000000E810
.text:000000000000E810 ; =============== S U B R O U T I N E =======================================
.text:000000000000E810
.text:000000000000E810 ; Attributes: info_from_lumina
.text:000000000000E810
.text:000000000000E810 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:000000000000E810                 public hash_delete
.text:000000000000E810 hash_delete     proc near               ; CODE XREF: main+DB2↑p
.text:000000000000E810
.text:000000000000E810 var_28          = qword ptr -28h
.text:000000000000E810 var_20          = qword ptr -20h
.text:000000000000E810
.text:000000000000E810 ; __unwind {
.text:000000000000E810                 push    r12
.text:000000000000E812                 push    rbp
.text:000000000000E813                 mov     ecx, 1
.text:000000000000E818                 push    rbx
.text:000000000000E819                 mov     rbx, rdi
.text:000000000000E81C                 sub     rsp, 10h
.text:000000000000E820                 mov     rdx, rsp
.text:000000000000E823                 mov     rax, fs:28h
.text:000000000000E82C                 mov     [rsp+28h+var_20], rax
.text:000000000000E831                 xor     eax, eax
.text:000000000000E833                 call    hash_find_entry
.text:000000000000E838                 test    rax, rax
.text:000000000000E83B                 mov     rbp, rax
.text:000000000000E83E                 jz      short loc_E84F
.text:000000000000E840                 mov     rax, [rsp+28h+var_28]
.text:000000000000E844                 sub     qword ptr [rbx+20h], 1
.text:000000000000E849                 cmp     qword ptr [rax], 0
.text:000000000000E84D                 jz      short loc_E870
.text:000000000000E84F
.text:000000000000E84F loc_E84F:                               ; CODE XREF: hash_delete+2E↑j
.text:000000000000E84F                                         ; hash_delete+9F↓j ...
.text:000000000000E84F                 mov     rcx, [rsp+28h+var_20]
.text:000000000000E854                 xor     rcx, fs:28h
.text:000000000000E85D                 mov     rax, rbp
.text:000000000000E860                 jnz     loc_EA0E
.text:000000000000E866                 add     rsp, 10h
.text:000000000000E86A                 pop     rbx
.text:000000000000E86B                 pop     rbp
.text:000000000000E86C                 pop     r12
.text:000000000000E86E                 retn
.text:000000000000E86E ; ---------------------------------------------------------------------------
.text:000000000000E86F                 align 10h
.text:000000000000E870
.text:000000000000E870 loc_E870:                               ; CODE XREF: hash_delete+3D↑j
.text:000000000000E870                 mov     rax, [rbx+18h]
.text:000000000000E874                 sub     rax, 1
.text:000000000000E878                 test    rax, rax
.text:000000000000E87B                 mov     [rbx+18h], rax
.text:000000000000E87F                 js      loc_E980
.text:000000000000E885                 pxor    xmm0, xmm0
.text:000000000000E889                 cvtsi2ss xmm0, rax
.text:000000000000E88E
.text:000000000000E88E loc_E88E:                               ; CODE XREF: hash_delete+189↓j
.text:000000000000E88E                 mov     rax, [rbx+10h]
.text:000000000000E892                 mov     rdx, [rbx+28h]
.text:000000000000E896                 test    rax, rax
.text:000000000000E899                 js      loc_E960
.text:000000000000E89F                 pxor    xmm1, xmm1
.text:000000000000E8A3                 cvtsi2ss xmm1, rax
.text:000000000000E8A8
.text:000000000000E8A8 loc_E8A8:                               ; CODE XREF: hash_delete+169↓j
.text:000000000000E8A8                 mulss   xmm1, dword ptr [rdx]
.text:000000000000E8AC                 ucomiss xmm1, xmm0
.text:000000000000E8AF                 jbe     short loc_E84F
.text:000000000000E8B1                 lea     rdi, [rbx+28h]
.text:000000000000E8B5                 call    check_tuning
.text:000000000000E8BA                 mov     rax, [rbx+10h]
.text:000000000000E8BE                 mov     rdx, [rbx+28h]
.text:000000000000E8C2                 test    rax, rax
.text:000000000000E8C5                 js      loc_E9F0
.text:000000000000E8CB                 pxor    xmm0, xmm0
.text:000000000000E8CF                 cvtsi2ss xmm0, rax
.text:000000000000E8D4
.text:000000000000E8D4 loc_E8D4:                               ; CODE XREF: hash_delete+1F9↓j
.text:000000000000E8D4                 mov     rax, [rbx+18h]
.text:000000000000E8D8                 test    rax, rax
.text:000000000000E8DB                 js      loc_E9D0
.text:000000000000E8E1                 pxor    xmm1, xmm1
.text:000000000000E8E5                 cvtsi2ss xmm1, rax
.text:000000000000E8EA
.text:000000000000E8EA loc_E8EA:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000E8EA                 movss   xmm2, dword ptr [rdx]
.text:000000000000E8EE                 mulss   xmm2, xmm0
.text:000000000000E8F2                 ucomiss xmm2, xmm1
.text:000000000000E8F5                 jbe     loc_E84F
.text:000000000000E8FB                 cmp     byte ptr [rdx+10h], 0
.text:000000000000E8FF                 mulss   xmm0, dword ptr [rdx+4]
.text:000000000000E904                 jz      loc_E9C0
.text:000000000000E90A
.text:000000000000E90A loc_E90A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000E90A                 ucomiss xmm0, cs:dword_1A050
.text:000000000000E911                 jnb     loc_E9A0
.text:000000000000E917                 cvttss2si rsi, xmm0
.text:000000000000E91C
.text:000000000000E91C loc_E91C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000E91C                 mov     rdi, rbx
.text:000000000000E91F                 call    hash_rehash
.text:000000000000E924                 test    al, al
.text:000000000000E926                 jnz     loc_E84F
.text:000000000000E92C                 mov     rdi, [rbx+48h]  ; ptr
.text:000000000000E930                 test    rdi, rdi
.text:000000000000E933                 jz      short loc_E949
.text:000000000000E935                 nop     dword ptr [rax]
.text:000000000000E938
.text:000000000000E938 loc_E938:                               ; CODE XREF: hash_delete+137↓j
.text:000000000000E938                 mov     r12, [rdi+8]
.text:000000000000E93C                 call    free
.text:000000000000E941                 test    r12, r12
.text:000000000000E944                 mov     rdi, r12
.text:000000000000E947                 jnz     short loc_E938
.text:000000000000E949
.text:000000000000E949 loc_E949:                               ; CODE XREF: hash_delete+123↑j
.text:000000000000E949                 mov     qword ptr [rbx+48h], 0
.text:000000000000E951                 jmp     loc_E84F
.text:000000000000E951 ; ---------------------------------------------------------------------------
.text:000000000000E956                 align 20h
.text:000000000000E960
.text:000000000000E960 loc_E960:                               ; CODE XREF: hash_delete+89↑j
.text:000000000000E960                 mov     rcx, rax
.text:000000000000E963                 pxor    xmm1, xmm1
.text:000000000000E967                 shr     rcx, 1
.text:000000000000E96A                 and     eax, 1
.text:000000000000E96D                 or      rcx, rax
.text:000000000000E970                 cvtsi2ss xmm1, rcx
.text:000000000000E975                 addss   xmm1, xmm1
.text:000000000000E979                 jmp     loc_E8A8
.text:000000000000E979 ; ---------------------------------------------------------------------------
.text:000000000000E97E                 align 20h
.text:000000000000E980
.text:000000000000E980 loc_E980:                               ; CODE XREF: hash_delete+6F↑j
.text:000000000000E980                 mov     rdx, rax
.text:000000000000E983                 pxor    xmm0, xmm0
.text:000000000000E987                 shr     rdx, 1
.text:000000000000E98A                 and     eax, 1
.text:000000000000E98D                 or      rdx, rax
.text:000000000000E990                 cvtsi2ss xmm0, rdx
.text:000000000000E995                 addss   xmm0, xmm0
.text:000000000000E999                 jmp     loc_E88E
.text:000000000000E999 ; ---------------------------------------------------------------------------
.text:000000000000E99E                 align 20h
.text:000000000000E9A0
.text:000000000000E9A0 loc_E9A0:                               ; CODE XREF: hash_delete+101↑j
.text:000000000000E9A0                 subss   xmm0, cs:dword_1A050
.text:000000000000E9A8                 mov     rax, 8000000000000000h
.text:000000000000E9B2                 cvttss2si rsi, xmm0
.text:000000000000E9B7                 xor     rsi, rax
.text:000000000000E9BA                 jmp     loc_E91C
.text:000000000000E9BA ; ---------------------------------------------------------------------------
.text:000000000000E9BF                 align 20h
.text:000000000000E9C0
.text:000000000000E9C0 loc_E9C0:                               ; CODE XREF: hash_delete+F4↑j
.text:000000000000E9C0                 mulss   xmm0, dword ptr [rdx+8]
.text:000000000000E9C5                 jmp     loc_E90A
.text:000000000000E9C5 ; ---------------------------------------------------------------------------
.text:000000000000E9CA                 align 10h
.text:000000000000E9D0
.text:000000000000E9D0 loc_E9D0:                               ; CODE XREF: hash_delete+CB↑j
.text:000000000000E9D0                 mov     rcx, rax
.text:000000000000E9D3                 pxor    xmm1, xmm1
.text:000000000000E9D7                 shr     rcx, 1
.text:000000000000E9DA                 and     eax, 1
.text:000000000000E9DD                 or      rcx, rax
.text:000000000000E9E0                 cvtsi2ss xmm1, rcx
.text:000000000000E9E5                 addss   xmm1, xmm1
.text:000000000000E9E9                 jmp     loc_E8EA
.text:000000000000E9E9 ; ---------------------------------------------------------------------------
.text:000000000000E9EE                 align 10h
.text:000000000000E9F0
.text:000000000000E9F0 loc_E9F0:                               ; CODE XREF: hash_delete+B5↑j
.text:000000000000E9F0                 mov     rcx, rax
.text:000000000000E9F3                 pxor    xmm0, xmm0
.text:000000000000E9F7                 shr     rcx, 1
.text:000000000000E9FA                 and     eax, 1
.text:000000000000E9FD                 or      rcx, rax
.text:000000000000EA00                 cvtsi2ss xmm0, rcx
.text:000000000000EA05                 addss   xmm0, xmm0
.text:000000000000EA09                 jmp     loc_E8D4
.text:000000000000EA0E ; ---------------------------------------------------------------------------
.text:000000000000EA0E
.text:000000000000EA0E loc_EA0E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000EA0E                 call    ___stack_chk_fail
.text:000000000000EA0E ; } // starts at E810
.text:000000000000EA0E hash_delete     endp
.text:000000000000EA0E
.text:000000000000EA0E ; ---------------------------------------------------------------------------
.text:000000000000EA13                 align 20h
.text:000000000000EA20
.text:000000000000EA20 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA20
.text:000000000000EA20 ; Attributes: info_from_lumina
.text:000000000000EA20
.text:000000000000EA20 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:000000000000EA20                 public triple_hash
.text:000000000000EA20 triple_hash     proc near               ; DATA XREF: canonicalize_filename_mode+4F6↑o
.text:000000000000EA20 ; __unwind {
.text:000000000000EA20                 push    rbp
.text:000000000000EA21                 push    rbx
.text:000000000000EA22                 mov     rbp, rdi
.text:000000000000EA25                 mov     rbx, rsi
.text:000000000000EA28                 sub     rsp, 8
.text:000000000000EA2C                 mov     rdi, [rdi]
.text:000000000000EA2F                 call    hash_pjw
.text:000000000000EA34                 xor     rax, [rbp+8]
.text:000000000000EA38                 xor     edx, edx
.text:000000000000EA3A                 add     rsp, 8
.text:000000000000EA3E                 div     rbx
.text:000000000000EA41                 pop     rbx
.text:000000000000EA42                 pop     rbp
.text:000000000000EA43                 mov     rax, rdx
.text:000000000000EA46                 retn
.text:000000000000EA46 ; } // starts at EA20
.text:000000000000EA46 triple_hash     endp
.text:000000000000EA46
.text:000000000000EA46 ; ---------------------------------------------------------------------------
.text:000000000000EA47                 align 10h
.text:000000000000EA50
.text:000000000000EA50 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA50
.text:000000000000EA50
.text:000000000000EA50                 public triple_hash_no_name
.text:000000000000EA50 triple_hash_no_name proc near
.text:000000000000EA50 ; __unwind {
.text:000000000000EA50                 mov     rax, [rdi+8]
.text:000000000000EA54                 xor     edx, edx
.text:000000000000EA56                 div     rsi
.text:000000000000EA59                 mov     rax, rdx
.text:000000000000EA5C                 retn
.text:000000000000EA5C ; } // starts at EA50
.text:000000000000EA5C triple_hash_no_name endp
.text:000000000000EA5C
.text:000000000000EA5C ; ---------------------------------------------------------------------------
.text:000000000000EA5D                 align 20h
.text:000000000000EA60
.text:000000000000EA60 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA60
.text:000000000000EA60 ; Attributes: info_from_lumina
.text:000000000000EA60
.text:000000000000EA60 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:000000000000EA60                 public triple_compare
.text:000000000000EA60 triple_compare  proc near
.text:000000000000EA60 ; __unwind {
.text:000000000000EA60                 xor     eax, eax
.text:000000000000EA62                 mov     rdx, [rsi+8]
.text:000000000000EA66                 cmp     [rdi+8], rdx
.text:000000000000EA6A                 jz      short loc_EA70
.text:000000000000EA6C
.text:000000000000EA6C locret_EA6C:                            ; CODE XREF: triple_compare+18↓j
.text:000000000000EA6C                 rep retn
.text:000000000000EA6C ; ---------------------------------------------------------------------------
.text:000000000000EA6E                 align 10h
.text:000000000000EA70
.text:000000000000EA70 loc_EA70:                               ; CODE XREF: triple_compare+A↑j
.text:000000000000EA70                 mov     rcx, [rsi+10h]
.text:000000000000EA74                 cmp     [rdi+10h], rcx
.text:000000000000EA78                 jnz     short locret_EA6C
.text:000000000000EA7A                 sub     rsp, 8
.text:000000000000EA7E                 mov     rsi, [rsi]
.text:000000000000EA81                 mov     rdi, [rdi]
.text:000000000000EA84                 call    same_name
.text:000000000000EA89                 add     rsp, 8
.text:000000000000EA8D                 retn
.text:000000000000EA8D ; } // starts at EA60
.text:000000000000EA8D triple_compare  endp
.text:000000000000EA8D
.text:000000000000EA8D ; ---------------------------------------------------------------------------
.text:000000000000EA8E                 align 10h
.text:000000000000EA90
.text:000000000000EA90 ; =============== S U B R O U T I N E =======================================
.text:000000000000EA90
.text:000000000000EA90 ; Attributes: info_from_lumina
.text:000000000000EA90
.text:000000000000EA90 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:000000000000EA90                 public triple_compare_ino_str
.text:000000000000EA90 triple_compare_ino_str proc near        ; DATA XREF: canonicalize_filename_mode+4ED↑o
.text:000000000000EA90 ; __unwind {
.text:000000000000EA90                 xor     eax, eax
.text:000000000000EA92                 mov     rdx, [rsi+8]
.text:000000000000EA96                 cmp     [rdi+8], rdx
.text:000000000000EA9A                 jz      short loc_EAA0
.text:000000000000EA9C
.text:000000000000EA9C locret_EA9C:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:000000000000EA9C                 rep retn
.text:000000000000EA9C ; ---------------------------------------------------------------------------
.text:000000000000EA9E                 align 20h
.text:000000000000EAA0
.text:000000000000EAA0 loc_EAA0:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:000000000000EAA0                 mov     rcx, [rsi+10h]
.text:000000000000EAA4                 cmp     [rdi+10h], rcx
.text:000000000000EAA8                 jnz     short locret_EA9C
.text:000000000000EAAA                 sub     rsp, 8
.text:000000000000EAAE                 mov     rsi, [rsi]      ; s2
.text:000000000000EAB1                 mov     rdi, [rdi]      ; s1
.text:000000000000EAB4                 call    _strcmp
.text:000000000000EAB9                 test    eax, eax
.text:000000000000EABB                 setz    al
.text:000000000000EABE                 add     rsp, 8
.text:000000000000EAC2                 retn
.text:000000000000EAC2 ; } // starts at EA90
.text:000000000000EAC2 triple_compare_ino_str endp
.text:000000000000EAC2
.text:000000000000EAC2 ; ---------------------------------------------------------------------------
.text:000000000000EAC3                 align 10h
.text:000000000000EAD0
.text:000000000000EAD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EAD0
.text:000000000000EAD0
.text:000000000000EAD0 ; __int64 __fastcall triple_free(void *ptr)
.text:000000000000EAD0                 public triple_free
.text:000000000000EAD0 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:000000000000EAD0                                         ; DATA XREF: canonicalize_filename_mode:loc_CA26↑o
.text:000000000000EAD0 ; __unwind {
.text:000000000000EAD0                 push    rbx
.text:000000000000EAD1                 mov     rbx, rdi
.text:000000000000EAD4                 mov     rdi, [rdi]      ; ptr
.text:000000000000EAD7                 call    free
.text:000000000000EADC                 mov     rdi, rbx        ; ptr
.text:000000000000EADF                 pop     rbx
.text:000000000000EAE0                 jmp     free
.text:000000000000EAE0 ; } // starts at EAD0
.text:000000000000EAE0 triple_free     endp
.text:000000000000EAE0
.text:000000000000EAE0 ; ---------------------------------------------------------------------------
.text:000000000000EAE5                 align 10h
.text:000000000000EAF0
.text:000000000000EAF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EAF0
.text:000000000000EAF0 ; Attributes: info_from_lumina
.text:000000000000EAF0
.text:000000000000EAF0 ; long double __usercall adjust_value@<st0>(int inexact_style@<edi>, long double value)
.text:000000000000EAF0 adjust_value    proc near               ; CODE XREF: human_readable+578↓p
.text:000000000000EAF0                                         ; human_readable+59A↓p ...
.text:000000000000EAF0
.text:000000000000EAF0 var_20          = qword ptr -20h
.text:000000000000EAF0 var_18          = qword ptr -18h
.text:000000000000EAF0 var_C           = word ptr -0Ch
.text:000000000000EAF0 var_A           = word ptr -0Ah
.text:000000000000EAF0 arg_0           = tbyte ptr  8
.text:000000000000EAF0
.text:000000000000EAF0 ; __unwind {
.text:000000000000EAF0                 fld     cs:dword_1A050
.text:000000000000EAF6                 fld     [rsp+arg_0]
.text:000000000000EAFA                 fucomi  st, st(1)
.text:000000000000EAFC                 jnb     short loc_EB70
.text:000000000000EAFE                 fstp    st(1)
.text:000000000000EB00                 fnstcw  [rsp+var_A]
.text:000000000000EB04                 movzx   eax, [rsp+var_A]
.text:000000000000EB09                 or      ah, 0Ch
.text:000000000000EB0C                 mov     [rsp+var_C], ax
.text:000000000000EB11                 fld     st
.text:000000000000EB13                 fldcw   [rsp+var_C]
.text:000000000000EB17                 fistp   [rsp+var_18]
.text:000000000000EB1B                 fldcw   [rsp+var_A]
.text:000000000000EB1F                 mov     rax, [rsp+var_18]
.text:000000000000EB24
.text:000000000000EB24 loc_EB24:                               ; CODE XREF: adjust_value+B3↓j
.text:000000000000EB24                 mov     [rsp+var_20], rax
.text:000000000000EB29                 test    rax, rax
.text:000000000000EB2C                 fild    [rsp+var_20]
.text:000000000000EB30                 jns     short loc_EB38
.text:000000000000EB32                 fadd    cs:dword_1A04C
.text:000000000000EB38
.text:000000000000EB38 loc_EB38:                               ; CODE XREF: adjust_value+40↑j
.text:000000000000EB38                 test    edi, edi
.text:000000000000EB3A                 jnz     short loc_EB68
.text:000000000000EB3C                 fxch    st(1)
.text:000000000000EB3E                 fucomip st, st(1)
.text:000000000000EB40                 jp      short loc_EB48
.text:000000000000EB42                 jz      short locret_EB6A
.text:000000000000EB44                 fstp    st
.text:000000000000EB46                 jmp     short loc_EB50
.text:000000000000EB48 ; ---------------------------------------------------------------------------
.text:000000000000EB48
.text:000000000000EB48 loc_EB48:                               ; CODE XREF: adjust_value+50↑j
.text:000000000000EB48                 fstp    st
.text:000000000000EB4A                 nop     word ptr [rax+rax+00h]
.text:000000000000EB50
.text:000000000000EB50 loc_EB50:                               ; CODE XREF: adjust_value+56↑j
.text:000000000000EB50                 add     rax, 1
.text:000000000000EB54                 mov     [rsp+var_20], rax
.text:000000000000EB59                 test    rax, rax
.text:000000000000EB5C                 fild    [rsp+var_20]
.text:000000000000EB60                 js      short loc_EBB0
.text:000000000000EB62                 jmp     short locret_EB6A
.text:000000000000EB62 ; ---------------------------------------------------------------------------
.text:000000000000EB64                 align 8
.text:000000000000EB68
.text:000000000000EB68 loc_EB68:                               ; CODE XREF: adjust_value+4A↑j
.text:000000000000EB68                 fstp    st(1)
.text:000000000000EB6A
.text:000000000000EB6A locret_EB6A:                            ; CODE XREF: adjust_value+52↑j
.text:000000000000EB6A                                         ; adjust_value+72↑j
.text:000000000000EB6A                 rep retn
.text:000000000000EB6A ; ---------------------------------------------------------------------------
.text:000000000000EB6C                 align 10h
.text:000000000000EB70
.text:000000000000EB70 loc_EB70:                               ; CODE XREF: adjust_value+C↑j
.text:000000000000EB70                 fnstcw  [rsp+var_A]
.text:000000000000EB74                 movzx   eax, [rsp+var_A]
.text:000000000000EB79                 fsubr   st(1), st
.text:000000000000EB7B                 fxch    st(1)
.text:000000000000EB7D                 mov     rdx, 8000000000000000h
.text:000000000000EB87                 or      ah, 0Ch
.text:000000000000EB8A                 mov     [rsp+var_C], ax
.text:000000000000EB8F                 fldcw   [rsp+var_C]
.text:000000000000EB93                 fistp   [rsp+var_18]
.text:000000000000EB97                 fldcw   [rsp+var_A]
.text:000000000000EB9B                 mov     rax, [rsp+var_18]
.text:000000000000EBA0                 xor     rax, rdx
.text:000000000000EBA3                 jmp     loc_EB24
.text:000000000000EBA3 ; ---------------------------------------------------------------------------
.text:000000000000EBA8                 align 10h
.text:000000000000EBB0
.text:000000000000EBB0 loc_EBB0:                               ; CODE XREF: adjust_value+70↑j
.text:000000000000EBB0                 fadd    cs:dword_1A04C
.text:000000000000EBB6                 retn
.text:000000000000EBB6 ; } // starts at EAF0
.text:000000000000EBB6 adjust_value    endp
.text:000000000000EBB6
.text:000000000000EBB6 ; ---------------------------------------------------------------------------
.text:000000000000EBB7                 align 20h
.text:000000000000EBC0
.text:000000000000EBC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000EBC0
.text:000000000000EBC0 ; Attributes: info_from_lumina
.text:000000000000EBC0
.text:000000000000EBC0 ; char *__fastcall human_readable(uintmax_t n, char *buf, int opts, uintmax_t from_block_size, uintmax_t to_block_size)
.text:000000000000EBC0                 public human_readable
.text:000000000000EBC0 human_readable  proc near               ; CODE XREF: print_file_name_and_frills+159↑p
.text:000000000000EBC0                                         ; print_long_format+2AE↑p ...
.text:000000000000EBC0
.text:000000000000EBC0 var_D8          = tbyte ptr -0D8h
.text:000000000000EBC0 s               = qword ptr -0C8h
.text:000000000000EBC0 var_C0          = qword ptr -0C0h
.text:000000000000EBC0 var_B8          = qword ptr -0B8h
.text:000000000000EBC0 src             = qword ptr -0B0h
.text:000000000000EBC0 var_A8          = tbyte ptr -0A8h
.text:000000000000EBC0 var_98          = dword ptr -98h
.text:000000000000EBC0 var_94          = dword ptr -94h
.text:000000000000EBC0 var_90          = qword ptr -90h
.text:000000000000EBC0 n               = qword ptr -88h
.text:000000000000EBC0 var_80          = qword ptr -80h
.text:000000000000EBC0 var_78          = byte ptr -78h
.text:000000000000EBC0 var_40          = qword ptr -40h
.text:000000000000EBC0
.text:000000000000EBC0 ; __unwind {
.text:000000000000EBC0                 push    r15
.text:000000000000EBC2                 push    r14
.text:000000000000EBC4                 mov     eax, edx
.text:000000000000EBC6                 push    r13
.text:000000000000EBC8                 push    r12
.text:000000000000EBCA                 mov     r15d, edx
.text:000000000000EBCD                 push    rbp
.text:000000000000EBCE                 push    rbx
.text:000000000000EBCF                 and     eax, 20h
.text:000000000000EBD2                 and     r15d, 3
.text:000000000000EBD6                 mov     r12d, edx
.text:000000000000EBD9                 mov     rbx, rdi
.text:000000000000EBDC                 sub     rsp, 98h
.text:000000000000EBE3                 mov     [rsp+0C8h+src], rcx
.text:000000000000EBE8                 mov     [rsp+0C8h+var_98], eax
.text:000000000000EBEC                 mov     rcx, fs:28h
.text:000000000000EBF5                 mov     [rsp+0C8h+var_40], rcx
.text:000000000000EBFD                 xor     ecx, ecx
.text:000000000000EBFF                 cmp     eax, 1
.text:000000000000EC02                 mov     [rsp+0C8h+s], rsi
.text:000000000000EC06                 mov     [rsp+0C8h+var_B8], r8
.text:000000000000EC0B                 sbb     eax, eax
.text:000000000000EC0D                 and     eax, 0FFFFFFE8h
.text:000000000000EC10                 add     eax, 400h
.text:000000000000EC15                 mov     [rsp+0C8h+var_94], eax
.text:000000000000EC19                 call    _localeconv
.text:000000000000EC1E                 mov     r14, [rax]
.text:000000000000EC21                 mov     r13, rax
.text:000000000000EC24                 mov     rdi, r14        ; s
.text:000000000000EC27                 call    _strlen
.text:000000000000EC2C                 mov     rcx, [r13+10h]
.text:000000000000EC30                 mov     r13, [r13+8]
.text:000000000000EC34                 mov     rbp, rax
.text:000000000000EC37                 sub     rax, 1
.text:000000000000EC3B                 mov     edx, 1
.text:000000000000EC40                 cmp     rax, 10h
.text:000000000000EC44                 lea     rax, asc_19F9B+1 ; "."
.text:000000000000EC4B                 mov     rdi, r13        ; s
.text:000000000000EC4E                 cmovnb  rbp, rdx
.text:000000000000EC52                 mov     [rsp+0C8h+var_90], rcx
.text:000000000000EC57                 cmovnb  r14, rax
.text:000000000000EC5B                 call    _strlen
.text:000000000000EC60                 cmp     rax, 11h
.text:000000000000EC64                 lea     rax, a8+6       ; ""
.text:000000000000EC6B                 mov     rdi, [rsp+0C8h+var_B8]
.text:000000000000EC70                 mov     rcx, [rsp+0C8h+src]
.text:000000000000EC75                 cmovnb  r13, rax
.text:000000000000EC79                 mov     rax, [rsp+0C8h+s]
.text:000000000000EC7D                 add     rax, 287h
.text:000000000000EC83                 cmp     rdi, rcx
.text:000000000000EC86                 mov     [rsp+0C8h+var_C0], rax
.text:000000000000EC8B                 ja      loc_EDD8
.text:000000000000EC91                 xor     edx, edx
.text:000000000000EC93                 mov     rax, rcx
.text:000000000000EC96                 div     rdi
.text:000000000000EC99                 test    rdx, rdx
.text:000000000000EC9C                 mov     rdi, rax
.text:000000000000EC9F                 jz      loc_F000
.text:000000000000ECA5
.text:000000000000ECA5 loc_ECA5:                               ; CODE XREF: human_readable+21B↓j
.text:000000000000ECA5                                         ; human_readable+231↓j ...
.text:000000000000ECA5                 mov     [rsp+0C8h+src], rcx
.text:000000000000ECAA                 test    rcx, rcx
.text:000000000000ECAD                 fild    [rsp+0C8h+src]
.text:000000000000ECB1                 jns     short loc_ECB9
.text:000000000000ECB3                 fadd    cs:dword_1A04C
.text:000000000000ECB9
.text:000000000000ECB9 loc_ECB9:                               ; CODE XREF: human_readable+F1↑j
.text:000000000000ECB9                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000ECBE                 mov     [rsp+0C8h+src], rax
.text:000000000000ECC3                 test    rax, rax
.text:000000000000ECC6                 fild    [rsp+0C8h+src]
.text:000000000000ECCA                 jns     short loc_ECD2
.text:000000000000ECCC                 fadd    cs:dword_1A04C
.text:000000000000ECD2
.text:000000000000ECD2 loc_ECD2:                               ; CODE XREF: human_readable+10A↑j
.text:000000000000ECD2                 fdivp   st(1), st
.text:000000000000ECD4                 mov     [rsp+0C8h+src], rbx
.text:000000000000ECD9                 test    rbx, rbx
.text:000000000000ECDC                 fild    [rsp+0C8h+src]
.text:000000000000ECE0                 jns     short loc_ECE8
.text:000000000000ECE2                 fadd    cs:dword_1A04C
.text:000000000000ECE8
.text:000000000000ECE8 loc_ECE8:                               ; CODE XREF: human_readable+120↑j
.text:000000000000ECE8                 test    r12b, 10h
.text:000000000000ECEC                 fmulp   st(1), st
.text:000000000000ECEE                 jz      loc_EEB8
.text:000000000000ECF4                 fild    [rsp+0C8h+var_94]
.text:000000000000ECF8                 xor     ebx, ebx
.text:000000000000ECFA                 fld     st
.text:000000000000ECFC                 jmp     short loc_ED04
.text:000000000000ECFC ; ---------------------------------------------------------------------------
.text:000000000000ECFE                 align 20h
.text:000000000000ED00
.text:000000000000ED00 loc_ED00:                               ; CODE XREF: human_readable+154↓j
.text:000000000000ED00                 fstp    st(1)
.text:000000000000ED02                 fxch    st(2)
.text:000000000000ED04
.text:000000000000ED04 loc_ED04:                               ; CODE XREF: human_readable+13C↑j
.text:000000000000ED04                 fld     st
.text:000000000000ED06                 add     ebx, 1
.text:000000000000ED09                 fmul    st, st(2)
.text:000000000000ED0B                 fxch    st(3)
.text:000000000000ED0D                 fucomi  st, st(3)
.text:000000000000ED0F                 jb      short loc_ED20
.text:000000000000ED11                 cmp     ebx, 8
.text:000000000000ED14                 jnz     short loc_ED00
.text:000000000000ED16                 fstp    st(2)
.text:000000000000ED18                 fstp    st(2)
.text:000000000000ED1A                 jmp     short loc_ED24
.text:000000000000ED1A ; ---------------------------------------------------------------------------
.text:000000000000ED1C                 align 20h
.text:000000000000ED20
.text:000000000000ED20 loc_ED20:                               ; CODE XREF: human_readable+14F↑j
.text:000000000000ED20                 fstp    st(2)
.text:000000000000ED22                 fstp    st(2)
.text:000000000000ED24
.text:000000000000ED24 loc_ED24:                               ; CODE XREF: human_readable+15A↑j
.text:000000000000ED24                 mov     ecx, [rsp+0C8h+var_98]
.text:000000000000ED28                 add     rbp, 1
.text:000000000000ED2C                 xor     eax, eax
.text:000000000000ED2E                 fdivrp  st(1), st
.text:000000000000ED30                 test    ecx, ecx
.text:000000000000ED32                 setz    al
.text:000000000000ED35                 cmp     r15d, 1
.text:000000000000ED39                 lea     rax, [rbp+rax+1]
.text:000000000000ED3E                 mov     [rsp+0C8h+src], rax
.text:000000000000ED43                 jz      loc_F2B0
.text:000000000000ED49                 fld     cs:tbyte_1A0B0
.text:000000000000ED4F                 fucomip st, st(1)
.text:000000000000ED51                 ja      loc_F128
.text:000000000000ED57                 fld     st
.text:000000000000ED59
.text:000000000000ED59 loc_ED59:                               ; CODE XREF: human_readable+583↓j
.text:000000000000ED59                 fstp    [rsp+0C8h+var_A8]
.text:000000000000ED5D                 sub     rsp, 10h
.text:000000000000ED61                 lea     rcx, a1lf       ; "%.1Lf"
.text:000000000000ED68                 mov     esi, 1
.text:000000000000ED6D                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED74                 xor     eax, eax
.text:000000000000ED76                 mov     r14, [rsp+0D8h+s]
.text:000000000000ED7B                 mov     rdi, r14
.text:000000000000ED7E                 fstp    [rsp+0D8h+var_D8]
.text:000000000000ED81                 call    ___sprintf_chk
.text:000000000000ED86                 mov     rdi, r14        ; s
.text:000000000000ED89                 call    _strlen
.text:000000000000ED8E                 pop     rcx
.text:000000000000ED8F                 pop     rsi
.text:000000000000ED90                 cmp     rax, [rsp+0C8h+src]
.text:000000000000ED95                 mov     r14, rax
.text:000000000000ED98                 fld     [rsp+0C8h+var_A8]
.text:000000000000ED9C                 ja      loc_F348
.text:000000000000EDA2
.text:000000000000EDA2 loc_EDA2:                               ; CODE XREF: human_readable+735↓j
.text:000000000000EDA2                 test    r12b, 8
.text:000000000000EDA6                 jz      loc_EF10
.text:000000000000EDAC                 mov     rax, [rsp+0C8h+s]
.text:000000000000EDB0                 cmp     byte ptr [rax+r14-1], 30h ; '0'
.text:000000000000EDB6                 jnz     loc_EF18
.text:000000000000EDBC                 fld     cs:flt_1A0AC
.text:000000000000EDC2                 cmp     r15d, 1
.text:000000000000EDC6                 fmul    st(1), st
.text:000000000000EDC8                 jnz     loc_F350
.text:000000000000EDCE                 jmp     loc_F303
.text:000000000000EDCE ; ---------------------------------------------------------------------------
.text:000000000000EDD3                 align 8
.text:000000000000EDD8
.text:000000000000EDD8 loc_EDD8:                               ; CODE XREF: human_readable+CB↑j
.text:000000000000EDD8                 test    rcx, rcx
.text:000000000000EDDB                 jz      loc_ECA5
.text:000000000000EDE1                 mov     rax, [rsp+0C8h+var_B8]
.text:000000000000EDE6                 xor     edx, edx
.text:000000000000EDE8                 div     rcx
.text:000000000000EDEB                 test    rdx, rdx
.text:000000000000EDEE                 mov     r8, rax
.text:000000000000EDF1                 jnz     loc_ECA5
.text:000000000000EDF7                 mov     rax, rbx
.text:000000000000EDFA                 xor     edx, edx
.text:000000000000EDFC                 div     r8
.text:000000000000EDFF                 mov     rbx, rax
.text:000000000000EE02                 lea     rax, [rdx+rdx*4]
.text:000000000000EE06                 xor     edx, edx
.text:000000000000EE08                 mov     rsi, rbx
.text:000000000000EE0B                 add     rax, rax
.text:000000000000EE0E                 div     r8
.text:000000000000EE11                 add     rdx, rdx
.text:000000000000EE14                 mov     r9d, eax
.text:000000000000EE17                 cmp     r8, rdx
.text:000000000000EE1A                 jbe     loc_F3A8
.text:000000000000EE20                 xor     edi, edi
.text:000000000000EE22                 test    rdx, rdx
.text:000000000000EE25                 setnz   dil
.text:000000000000EE29
.text:000000000000EE29 loc_EE29:                               ; CODE XREF: human_readable+45D↓j
.text:000000000000EE29                                         ; human_readable+7F3↓j
.text:000000000000EE29                 mov     ecx, r12d
.text:000000000000EE2C                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000EE31                 mov     ebx, 0FFFFFFFFh
.text:000000000000EE36                 and     ecx, 10h
.text:000000000000EE39                 jz      loc_F200
.text:000000000000EE3F                 mov     r8d, [rsp+0C8h+var_94]
.text:000000000000EE44                 cmp     r8, rsi
.text:000000000000EE47                 mov     r11, r8
.text:000000000000EE4A                 ja      loc_F3C0
.text:000000000000EE50                 xor     ebx, ebx
.text:000000000000EE52                 jmp     short loc_EE77
.text:000000000000EE52 ; ---------------------------------------------------------------------------
.text:000000000000EE54                 align 8
.text:000000000000EE58
.text:000000000000EE58 loc_EE58:                               ; CODE XREF: human_readable+2E0↓j
.text:000000000000EE58                 test    edi, edi
.text:000000000000EE5A                 setnz   dil
.text:000000000000EE5E                 movzx   edi, dil
.text:000000000000EE62
.text:000000000000EE62 loc_EE62:                               ; CODE XREF: human_readable+2F0↓j
.text:000000000000EE62                 add     ebx, 1
.text:000000000000EE65                 cmp     r8, r10
.text:000000000000EE68                 ja      loc_F17D
.text:000000000000EE6E                 cmp     ebx, 8
.text:000000000000EE71                 jz      loc_F418
.text:000000000000EE77
.text:000000000000EE77 loc_EE77:                               ; CODE XREF: human_readable+292↑j
.text:000000000000EE77                 mov     rax, rsi
.text:000000000000EE7A                 xor     edx, edx
.text:000000000000EE7C                 mov     esi, edi
.text:000000000000EE7E                 div     r8
.text:000000000000EE81                 sar     esi, 1
.text:000000000000EE83                 mov     r10, rax
.text:000000000000EE86                 lea     eax, [rdx+rdx*4]
.text:000000000000EE89                 xor     edx, edx
.text:000000000000EE8B                 lea     eax, [r9+rax*2]
.text:000000000000EE8F                 div     r11d
.text:000000000000EE92                 lea     edx, [rsi+rdx*2]
.text:000000000000EE95                 mov     r9d, eax
.text:000000000000EE98                 mov     rsi, r10
.text:000000000000EE9B                 add     edi, edx
.text:000000000000EE9D                 cmp     r11d, edx
.text:000000000000EEA0                 ja      short loc_EE58
.text:000000000000EEA2                 cmp     r11d, edi
.text:000000000000EEA5                 setb    dil
.text:000000000000EEA9                 movzx   edi, dil
.text:000000000000EEAD                 add     edi, 2
.text:000000000000EEB0                 jmp     short loc_EE62
.text:000000000000EEB0 ; ---------------------------------------------------------------------------
.text:000000000000EEB2                 align 8
.text:000000000000EEB8
.text:000000000000EEB8 loc_EEB8:                               ; CODE XREF: human_readable+12E↑j
.text:000000000000EEB8                 cmp     r15d, 1
.text:000000000000EEBC                 jz      short loc_EECC
.text:000000000000EEBE                 fld     cs:tbyte_1A0B0
.text:000000000000EEC4                 fucomip st, st(1)
.text:000000000000EEC6                 ja      loc_F150
.text:000000000000EECC
.text:000000000000EECC loc_EECC:                               ; CODE XREF: human_readable+2FC↑j
.text:000000000000EECC                                         ; human_readable+5A3↓j
.text:000000000000EECC                 sub     rsp, 10h
.text:000000000000EED0                 lea     rcx, a0lf       ; "%.0Lf"
.text:000000000000EED7                 mov     esi, 1
.text:000000000000EEDC                 mov     rbx, [rsp+0D8h+s]
.text:000000000000EEE1                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EEE8                 xor     eax, eax
.text:000000000000EEEA                 fstp    [rsp+0D8h+var_D8]
.text:000000000000EEED                 xor     ebp, ebp
.text:000000000000EEEF                 mov     rdi, rbx
.text:000000000000EEF2                 call    ___sprintf_chk
.text:000000000000EEF7                 mov     rdi, rbx        ; s
.text:000000000000EEFA                 mov     ebx, 0FFFFFFFFh
.text:000000000000EEFF                 call    _strlen
.text:000000000000EF04                 pop     rsi
.text:000000000000EF05                 pop     rdi
.text:000000000000EF06                 mov     r14, rax
.text:000000000000EF09                 jmp     short loc_EF20
.text:000000000000EF09 ; ---------------------------------------------------------------------------
.text:000000000000EF0B                 align 10h
.text:000000000000EF10
.text:000000000000EF10 loc_EF10:                               ; CODE XREF: human_readable+1E6↑j
.text:000000000000EF10                 fstp    st
.text:000000000000EF12                 jmp     short loc_EF20
.text:000000000000EF12 ; ---------------------------------------------------------------------------
.text:000000000000EF14                 align 8
.text:000000000000EF18
.text:000000000000EF18 loc_EF18:                               ; CODE XREF: human_readable+1F6↑j
.text:000000000000EF18                 fstp    st
.text:000000000000EF1A                 nop     word ptr [rax+rax+00h]
.text:000000000000EF20
.text:000000000000EF20 loc_EF20:                               ; CODE XREF: human_readable+349↑j
.text:000000000000EF20                                         ; human_readable+352↑j ...
.text:000000000000EF20                 mov     r15, [rsp+0C8h+var_C0]
.text:000000000000EF25                 mov     rsi, [rsp+0C8h+s] ; src
.text:000000000000EF29                 mov     rdx, r14        ; n
.text:000000000000EF2C                 sub     r15, r14
.text:000000000000EF2F                 sub     r14, rbp
.text:000000000000EF32                 mov     rdi, r15        ; dest
.text:000000000000EF35                 call    _memmove
.text:000000000000EF3A                 mov     r8, r14
.text:000000000000EF3D                 add     r8, r15
.text:000000000000EF40
.text:000000000000EF40 loc_EF40:                               ; CODE XREF: human_readable+6A6↓j
.text:000000000000EF40                                         ; human_readable+84F↓j
.text:000000000000EF40                 test    r12b, 4
.text:000000000000EF44                 jnz     loc_F028
.text:000000000000EF4A
.text:000000000000EF4A loc_EF4A:                               ; CODE XREF: human_readable+53F↓j
.text:000000000000EF4A                                         ; human_readable+A02↓j
.text:000000000000EF4A                 test    r12b, 80h
.text:000000000000EF4E                 jz      short loc_EFC7
.text:000000000000EF50                 cmp     ebx, 0FFFFFFFFh
.text:000000000000EF53                 jz      loc_F270
.text:000000000000EF59
.text:000000000000EF59 loc_EF59:                               ; CODE XREF: human_readable+6D4↓j
.text:000000000000EF59                                         ; human_readable+6E2↓j ...
.text:000000000000EF59                 mov     eax, r12d
.text:000000000000EF5C                 and     eax, 100h
.text:000000000000EF61                 mov     ecx, eax
.text:000000000000EF63                 or      ecx, ebx
.text:000000000000EF65                 jz      short loc_EFC7
.text:000000000000EF67                 and     r12d, 40h
.text:000000000000EF6B                 jnz     loc_F108
.text:000000000000EF71
.text:000000000000EF71 loc_EF71:                               ; CODE XREF: human_readable+55F↓j
.text:000000000000EF71                 test    ebx, ebx
.text:000000000000EF73                 jz      loc_F5A6
.text:000000000000EF79                 cmp     ebx, 1
.text:000000000000EF7C                 jnz     short loc_EF8C
.text:000000000000EF7E                 mov     r9d, [rsp+0C8h+var_98]
.text:000000000000EF83                 test    r9d, r9d
.text:000000000000EF86                 jz      loc_F3D0
.text:000000000000EF8C
.text:000000000000EF8C loc_EF8C:                               ; CODE XREF: human_readable+3BC↑j
.text:000000000000EF8C                 lea     rcx, power_letter
.text:000000000000EF93                 movsxd  rbx, ebx
.text:000000000000EF96                 mov     rdi, [rsp+0C8h+var_C0]
.text:000000000000EF9B                 test    eax, eax
.text:000000000000EF9D                 movzx   ecx, byte ptr [rcx+rbx]
.text:000000000000EFA1                 lea     rdx, [rdi+1]
.text:000000000000EFA5                 mov     [rdi], cl
.text:000000000000EFA7                 jz      loc_F3E4
.text:000000000000EFAD                 mov     r8d, [rsp+0C8h+var_98]
.text:000000000000EFB2                 test    r8d, r8d
.text:000000000000EFB5                 jnz     loc_F170
.text:000000000000EFBB
.text:000000000000EFBB loc_EFBB:                               ; CODE XREF: human_readable+5B8↓j
.text:000000000000EFBB                                         ; human_readable+81E↓j ...
.text:000000000000EFBB                 lea     rax, [rdx+1]
.text:000000000000EFBF                 mov     byte ptr [rdx], 42h ; 'B'
.text:000000000000EFC2                 mov     [rsp+0C8h+var_C0], rax
.text:000000000000EFC7
.text:000000000000EFC7 loc_EFC7:                               ; CODE XREF: human_readable+38E↑j
.text:000000000000EFC7                                         ; human_readable+3A5↑j ...
.text:000000000000EFC7                 mov     rax, [rsp+0C8h+var_C0]
.text:000000000000EFCC                 mov     rcx, [rsp+0C8h+var_40]
.text:000000000000EFD4                 xor     rcx, fs:28h
.text:000000000000EFDD                 mov     byte ptr [rax], 0
.text:000000000000EFE0                 mov     rax, r15
.text:000000000000EFE3                 jnz     loc_F57B
.text:000000000000EFE9                 add     rsp, 98h
.text:000000000000EFF0                 pop     rbx
.text:000000000000EFF1                 pop     rbp
.text:000000000000EFF2                 pop     r12
.text:000000000000EFF4                 pop     r13
.text:000000000000EFF6                 pop     r14
.text:000000000000EFF8                 pop     r15
.text:000000000000EFFA                 retn
.text:000000000000EFFA ; ---------------------------------------------------------------------------
.text:000000000000EFFB                 align 20h
.text:000000000000F000
.text:000000000000F000 loc_F000:                               ; CODE XREF: human_readable+DF↑j
.text:000000000000F000                 mov     rsi, rbx
.text:000000000000F003                 xor     edx, edx
.text:000000000000F005                 imul    rsi, rax
.text:000000000000F009                 mov     rax, rsi
.text:000000000000F00C                 div     rdi
.text:000000000000F00F                 cmp     rax, rbx
.text:000000000000F012                 jnz     loc_ECA5
.text:000000000000F018                 xor     edi, edi
.text:000000000000F01A                 xor     r9d, r9d
.text:000000000000F01D                 jmp     loc_EE29
.text:000000000000F01D ; ---------------------------------------------------------------------------
.text:000000000000F022                 align 8
.text:000000000000F028
.text:000000000000F028 loc_F028:                               ; CODE XREF: human_readable+384↑j
.text:000000000000F028                 mov     r14, r8
.text:000000000000F02B                 mov     rdi, r13        ; s
.text:000000000000F02E                 mov     [rsp+0C8h+var_80], r8
.text:000000000000F033                 sub     r14, r15
.text:000000000000F036                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000F03D                 call    _strlen
.text:000000000000F042                 lea     rdi, [rsp+0C8h+var_78]
.text:000000000000F047                 mov     ecx, 29h ; ')'
.text:000000000000F04C                 mov     rdx, r14
.text:000000000000F04F                 mov     rsi, r15
.text:000000000000F052                 mov     [rsp+0C8h+n], rax
.text:000000000000F057                 mov     [rsp+0C8h+src], rdi
.text:000000000000F05C                 call    ___memcpy_chk
.text:000000000000F061                 mov     ecx, r12d
.text:000000000000F064                 mov     dword ptr [rsp+0C8h+var_A8], ebx
.text:000000000000F068                 mov     r12, r14
.text:000000000000F06B                 mov     rbx, r13
.text:000000000000F06E                 mov     r8, [rsp+0C8h+var_80]
.text:000000000000F073                 mov     r15, [rsp+0C8h+var_90]
.text:000000000000F078                 mov     r13, [rsp+0C8h+n]
.text:000000000000F07D                 mov     r14d, ecx
.text:000000000000F080                 jmp     short loc_F0C2
.text:000000000000F080 ; ---------------------------------------------------------------------------
.text:000000000000F082                 align 8
.text:000000000000F088
.text:000000000000F088 loc_F088:                               ; CODE XREF: human_readable+51A↓j
.text:000000000000F088                 mov     rax, [rsp+0C8h+src]
.text:000000000000F08D                 sub     r12, rbp
.text:000000000000F090                 sub     r8, rbp
.text:000000000000F093                 mov     rdi, r8         ; dest
.text:000000000000F096                 mov     rdx, rbp        ; n
.text:000000000000F099                 lea     rsi, [rax+r12]  ; src
.text:000000000000F09D                 call    _memcpy
.text:000000000000F0A2                 test    r12, r12
.text:000000000000F0A5                 mov     r8, rax
.text:000000000000F0A8                 jz      loc_F5B8
.text:000000000000F0AE                 sub     r8, r13
.text:000000000000F0B1                 mov     rdx, r13        ; n
.text:000000000000F0B4                 mov     rsi, rbx        ; src
.text:000000000000F0B7                 mov     rdi, r8         ; dest
.text:000000000000F0BA                 call    _memcpy
.text:000000000000F0BF                 mov     r8, rax
.text:000000000000F0C2
.text:000000000000F0C2 loc_F0C2:                               ; CODE XREF: human_readable+4C0↑j
.text:000000000000F0C2                 movzx   eax, byte ptr [r15]
.text:000000000000F0C6                 test    al, al
.text:000000000000F0C8                 jz      short loc_F0D7
.text:000000000000F0CA                 cmp     al, 7Fh
.text:000000000000F0CC                 movzx   ebp, al
.text:000000000000F0CF                 cmovnb  rbp, r12
.text:000000000000F0D3                 add     r15, 1
.text:000000000000F0D7
.text:000000000000F0D7 loc_F0D7:                               ; CODE XREF: human_readable+508↑j
.text:000000000000F0D7                 cmp     rbp, r12
.text:000000000000F0DA                 jbe     short loc_F088
.text:000000000000F0DC                 mov     eax, r14d
.text:000000000000F0DF                 mov     r15, r8
.text:000000000000F0E2                 mov     r14, r12
.text:000000000000F0E5                 mov     rsi, [rsp+0C8h+src] ; src
.text:000000000000F0EA                 sub     r15, r14
.text:000000000000F0ED                 mov     rdx, r14        ; n
.text:000000000000F0F0                 mov     rdi, r15        ; dest
.text:000000000000F0F3                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:000000000000F0F7                 mov     r12d, eax
.text:000000000000F0FA                 call    _memcpy
.text:000000000000F0FF                 jmp     loc_EF4A
.text:000000000000F0FF ; ---------------------------------------------------------------------------
.text:000000000000F104                 align 8
.text:000000000000F108
.text:000000000000F108 loc_F108:                               ; CODE XREF: human_readable+3AB↑j
.text:000000000000F108                 mov     rcx, [rsp+0C8h+s]
.text:000000000000F10C                 lea     rdi, [rcx+288h]
.text:000000000000F113                 mov     byte ptr [rcx+287h], 20h ; ' '
.text:000000000000F11A                 mov     [rsp+0C8h+var_C0], rdi
.text:000000000000F11F                 jmp     loc_EF71
.text:000000000000F11F ; ---------------------------------------------------------------------------
.text:000000000000F124                 align 8
.text:000000000000F128
.text:000000000000F128 loc_F128:                               ; CODE XREF: human_readable+191↑j
.text:000000000000F128                 sub     rsp, 10h
.text:000000000000F12C                 mov     edi, r15d
.text:000000000000F12F                 fld     st
.text:000000000000F131                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:000000000000F134                 fstp    [rsp+0D8h+var_A8]
.text:000000000000F138                 call    adjust_value
.text:000000000000F13D                 pop     rax
.text:000000000000F13E                 pop     rdx
.text:000000000000F13F                 fld     [rsp+0C8h+var_A8]
.text:000000000000F143                 jmp     loc_ED59
.text:000000000000F143 ; ---------------------------------------------------------------------------
.text:000000000000F148                 align 10h
.text:000000000000F150
.text:000000000000F150 loc_F150:                               ; CODE XREF: human_readable+306↑j
.text:000000000000F150                 sub     rsp, 10h
.text:000000000000F154                 mov     edi, r15d
.text:000000000000F157                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:000000000000F15A                 call    adjust_value
.text:000000000000F15F                 pop     r8
.text:000000000000F161                 pop     r9
.text:000000000000F163                 jmp     loc_EECC
.text:000000000000F163 ; ---------------------------------------------------------------------------
.text:000000000000F168                 align 10h
.text:000000000000F170
.text:000000000000F170 loc_F170:                               ; CODE XREF: human_readable+3F5↑j
.text:000000000000F170                 lea     rdx, [rdi+2]
.text:000000000000F174                 mov     byte ptr [rdi+1], 69h ; 'i'
.text:000000000000F178                 jmp     loc_EFBB
.text:000000000000F17D ; ---------------------------------------------------------------------------
.text:000000000000F17D
.text:000000000000F17D loc_F17D:                               ; CODE XREF: human_readable+2A8↑j
.text:000000000000F17D                 cmp     r10, 9
.text:000000000000F181                 ja      loc_F418
.text:000000000000F187                 cmp     r15d, 1
.text:000000000000F18B                 jz      loc_F442
.text:000000000000F191                 test    r15d, r15d
.text:000000000000F194                 setz    dl
.text:000000000000F197                 test    edi, edi
.text:000000000000F199                 setnle  r8b
.text:000000000000F19D                 and     edx, r8d
.text:000000000000F1A0
.text:000000000000F1A0 loc_F1A0:                               ; CODE XREF: human_readable+88F↓j
.text:000000000000F1A0                 test    dl, dl
.text:000000000000F1A2                 jz      loc_F429
.text:000000000000F1A8                 lea     r9d, [rax+1]
.text:000000000000F1AC                 cmp     r9d, 0Ah
.text:000000000000F1B0                 jz      loc_F4B1
.text:000000000000F1B6
.text:000000000000F1B6 loc_F1B6:                               ; CODE XREF: human_readable+86B↓j
.text:000000000000F1B6                 add     r9d, 30h ; '0'
.text:000000000000F1BA
.text:000000000000F1BA loc_F1BA:                               ; CODE XREF: human_readable+87D↓j
.text:000000000000F1BA                 mov     rax, [rsp+0C8h+s]
.text:000000000000F1BE                 lea     r8, [rax+286h]
.text:000000000000F1C5                 mov     [rax+286h], r9b
.text:000000000000F1CC                 mov     eax, ebp
.text:000000000000F1CE                 sub     r8, rbp
.text:000000000000F1D1                 cmp     ebp, 8
.text:000000000000F1D4                 jnb     loc_F461
.text:000000000000F1DA                 test    bpl, 4
.text:000000000000F1DE                 jnz     loc_F566
.text:000000000000F1E4                 test    eax, eax
.text:000000000000F1E6                 jz      short loc_F1F7
.text:000000000000F1E8                 movzx   edx, byte ptr [r14]
.text:000000000000F1EC                 test    al, 2
.text:000000000000F1EE                 mov     [r8], dl
.text:000000000000F1F1                 jnz     loc_F580
.text:000000000000F1F7
.text:000000000000F1F7 loc_F1F7:                               ; CODE XREF: human_readable+626↑j
.text:000000000000F1F7                                         ; human_readable+8CF↓j ...
.text:000000000000F1F7                 xor     edi, edi
.text:000000000000F1F9                 xor     r9d, r9d
.text:000000000000F1FC                 nop     dword ptr [rax+00h]
.text:000000000000F200
.text:000000000000F200 loc_F200:                               ; CODE XREF: human_readable+279↑j
.text:000000000000F200                                         ; human_readable+807↓j ...
.text:000000000000F200                 cmp     r15d, 1
.text:000000000000F204                 jz      loc_F380
.text:000000000000F20A                 test    r15d, r15d
.text:000000000000F20D                 jnz     short loc_F230
.text:000000000000F20F                 add     edi, r9d
.text:000000000000F212                 test    edi, edi
.text:000000000000F214                 jle     short loc_F230
.text:000000000000F216
.text:000000000000F216 loc_F216:                               ; CODE XREF: human_readable+7D9↓j
.text:000000000000F216                 add     rsi, 1
.text:000000000000F21A                 test    ecx, ecx
.text:000000000000F21C                 jz      short loc_F230
.text:000000000000F21E                 mov     eax, [rsp+0C8h+var_94]
.text:000000000000F222                 cmp     rax, rsi
.text:000000000000F225                 jz      loc_F3F0
.text:000000000000F22B                 nop     dword ptr [rax+rax+00h]
.text:000000000000F230
.text:000000000000F230 loc_F230:                               ; CODE XREF: human_readable+64D↑j
.text:000000000000F230                                         ; human_readable+654↑j ...
.text:000000000000F230                 mov     r15, r8
.text:000000000000F233                 mov     rcx, 0CCCCCCCCCCCCCCCDh
.text:000000000000F23D                 nop     dword ptr [rax]
.text:000000000000F240
.text:000000000000F240 loc_F240:                               ; CODE XREF: human_readable+6A4↓j
.text:000000000000F240                 mov     rax, rsi
.text:000000000000F243                 sub     r15, 1
.text:000000000000F247                 mul     rcx
.text:000000000000F24A                 shr     rdx, 3
.text:000000000000F24E                 lea     rax, [rdx+rdx*4]
.text:000000000000F252                 add     rax, rax
.text:000000000000F255                 sub     rsi, rax
.text:000000000000F258                 add     esi, 30h ; '0'
.text:000000000000F25B                 test    rdx, rdx
.text:000000000000F25E                 mov     [r15], sil
.text:000000000000F261                 mov     rsi, rdx
.text:000000000000F264                 jnz     short loc_F240
.text:000000000000F266                 jmp     loc_EF40
.text:000000000000F266 ; ---------------------------------------------------------------------------
.text:000000000000F26B                 align 10h
.text:000000000000F270
.text:000000000000F270 loc_F270:                               ; CODE XREF: human_readable+393↑j
.text:000000000000F270                 mov     rcx, [rsp+0C8h+var_B8]
.text:000000000000F275                 cmp     rcx, 1
.text:000000000000F279                 jbe     loc_F422
.text:000000000000F27F                 mov     edx, [rsp+0C8h+var_94]
.text:000000000000F283                 mov     ebx, 1
.text:000000000000F288                 mov     eax, 1
.text:000000000000F28D
.text:000000000000F28D loc_F28D:                               ; CODE XREF: human_readable+6E0↓j
.text:000000000000F28D                 imul    rax, rdx
.text:000000000000F291                 cmp     rcx, rax
.text:000000000000F294                 jbe     loc_EF59
.text:000000000000F29A                 add     ebx, 1
.text:000000000000F29D                 cmp     ebx, 8
.text:000000000000F2A0                 jnz     short loc_F28D
.text:000000000000F2A2                 jmp     loc_EF59
.text:000000000000F2A2 ; ---------------------------------------------------------------------------
.text:000000000000F2A7                 align 10h
.text:000000000000F2B0
.text:000000000000F2B0 loc_F2B0:                               ; CODE XREF: human_readable+183↑j
.text:000000000000F2B0                 sub     rsp, 10h
.text:000000000000F2B4                 lea     rcx, a1lf       ; "%.1Lf"
.text:000000000000F2BB                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F2C2                 fld     st
.text:000000000000F2C4                 fstp    [rsp+0D8h+var_D8]
.text:000000000000F2C7                 mov     r14, [rsp+0D8h+s]
.text:000000000000F2CC                 mov     esi, 1
.text:000000000000F2D1                 xor     eax, eax
.text:000000000000F2D3                 mov     rdi, r14
.text:000000000000F2D6                 fstp    [rsp+0D8h+var_A8]
.text:000000000000F2DA                 call    ___sprintf_chk
.text:000000000000F2DF                 mov     rdi, r14        ; s
.text:000000000000F2E2                 call    _strlen
.text:000000000000F2E7                 mov     r14, rax
.text:000000000000F2EA                 pop     rax
.text:000000000000F2EB                 pop     rdx
.text:000000000000F2EC                 cmp     r14, [rsp+0C8h+src]
.text:000000000000F2F1                 fld     [rsp+0C8h+var_A8]
.text:000000000000F2F5                 jbe     loc_EDA2
.text:000000000000F2FB                 fld     cs:flt_1A0AC
.text:000000000000F301                 fmul    st(1), st
.text:000000000000F303
.text:000000000000F303 loc_F303:                               ; CODE XREF: human_readable+20E↑j
.text:000000000000F303                                         ; human_readable+798↓j ...
.text:000000000000F303                 fdivp   st(1), st
.text:000000000000F305                 sub     rsp, 10h
.text:000000000000F309                 lea     rcx, a0lf       ; "%.0Lf"
.text:000000000000F310                 mov     r14, [rsp+0D8h+s]
.text:000000000000F315                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000F31C                 mov     esi, 1
.text:000000000000F321                 xor     eax, eax
.text:000000000000F323                 xor     ebp, ebp
.text:000000000000F325                 mov     rdi, r14
.text:000000000000F328                 fstp    [rsp+0D8h+var_D8]
.text:000000000000F32B                 call    ___sprintf_chk
.text:000000000000F330                 mov     rdi, r14        ; s
.text:000000000000F333                 call    _strlen
.text:000000000000F338                 pop     r10
.text:000000000000F33A                 mov     r14, rax
.text:000000000000F33D                 pop     r11
.text:000000000000F33F                 jmp     loc_EF20
.text:000000000000F33F ; ---------------------------------------------------------------------------
.text:000000000000F344                 align 8
.text:000000000000F348
.text:000000000000F348 loc_F348:                               ; CODE XREF: human_readable+1DC↑j
.text:000000000000F348                 fld     cs:flt_1A0AC
.text:000000000000F34E                 fmul    st(1), st
.text:000000000000F350
.text:000000000000F350 loc_F350:                               ; CODE XREF: human_readable+208↑j
.text:000000000000F350                 fld     cs:tbyte_1A0B0
.text:000000000000F356                 fucomip st, st(2)
.text:000000000000F358                 jbe     short loc_F303
.text:000000000000F35A                 fstp    dword ptr [rsp+0C8h+src]
.text:000000000000F35E                 sub     rsp, 10h
.text:000000000000F362                 mov     edi, r15d
.text:000000000000F365                 fstp    [rsp+0D8h+var_D8] ; _TBYTE
.text:000000000000F368                 call    adjust_value
.text:000000000000F36D                 pop     rbp
.text:000000000000F36E                 pop     r14
.text:000000000000F370                 fld     dword ptr [rsp+0C8h+src]
.text:000000000000F374                 jmp     short loc_F303
.text:000000000000F374 ; ---------------------------------------------------------------------------
.text:000000000000F376                 align 20h
.text:000000000000F380
.text:000000000000F380 loc_F380:                               ; CODE XREF: human_readable+644↑j
.text:000000000000F380                 mov     rax, rsi
.text:000000000000F383                 movsxd  rdi, edi
.text:000000000000F386                 and     eax, 1
.text:000000000000F389                 add     rax, rdi
.text:000000000000F38C                 setnz   al
.text:000000000000F38F                 movzx   eax, al
.text:000000000000F392                 add     r9d, eax
.text:000000000000F395                 cmp     r9d, 5
.text:000000000000F399                 jg      loc_F216
.text:000000000000F39F                 jmp     loc_F230
.text:000000000000F39F ; ---------------------------------------------------------------------------
.text:000000000000F3A4                 align 8
.text:000000000000F3A8
.text:000000000000F3A8 loc_F3A8:                               ; CODE XREF: human_readable+25A↑j
.text:000000000000F3A8                 setb    dil
.text:000000000000F3AC                 movzx   edi, dil
.text:000000000000F3B0                 add     edi, 2
.text:000000000000F3B3                 jmp     loc_EE29
.text:000000000000F3B3 ; ---------------------------------------------------------------------------
.text:000000000000F3B8                 align 20h
.text:000000000000F3C0
.text:000000000000F3C0 loc_F3C0:                               ; CODE XREF: human_readable+28A↑j
.text:000000000000F3C0                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000F3C5                 xor     ebx, ebx
.text:000000000000F3C7                 jmp     loc_F200
.text:000000000000F3C7 ; ---------------------------------------------------------------------------
.text:000000000000F3CC                 align 10h
.text:000000000000F3D0
.text:000000000000F3D0 loc_F3D0:                               ; CODE XREF: human_readable+3C6↑j
.text:000000000000F3D0                 mov     rbx, [rsp+0C8h+var_C0]
.text:000000000000F3D5                 test    eax, eax
.text:000000000000F3D7                 lea     rdx, [rbx+1]
.text:000000000000F3DB                 mov     byte ptr [rbx], 6Bh ; 'k'
.text:000000000000F3DE                 jnz     loc_EFBB
.text:000000000000F3E4
.text:000000000000F3E4 loc_F3E4:                               ; CODE XREF: human_readable+3E7↑j
.text:000000000000F3E4                 mov     [rsp+0C8h+var_C0], rdx
.text:000000000000F3E9                 jmp     loc_EFC7
.text:000000000000F3E9 ; ---------------------------------------------------------------------------
.text:000000000000F3EE                 align 10h
.text:000000000000F3F0
.text:000000000000F3F0 loc_F3F0:                               ; CODE XREF: human_readable+665↑j
.text:000000000000F3F0                 cmp     ebx, 8
.text:000000000000F3F3                 jz      loc_F230
.text:000000000000F3F9                 add     ebx, 1
.text:000000000000F3FC                 test    r12b, 8
.text:000000000000F400                 jz      loc_F4C2
.text:000000000000F406
.text:000000000000F406 loc_F406:                               ; CODE XREF: human_readable+922↓j
.text:000000000000F406                                         ; human_readable+931↓j ...
.text:000000000000F406                 lea     r15, [r8-1]
.text:000000000000F40A                 mov     byte ptr [r8-1], 31h ; '1'
.text:000000000000F40F                 jmp     loc_EF40
.text:000000000000F40F ; ---------------------------------------------------------------------------
.text:000000000000F414                 align 8
.text:000000000000F418
.text:000000000000F418 loc_F418:                               ; CODE XREF: human_readable+2B1↑j
.text:000000000000F418                                         ; human_readable+5C1↑j
.text:000000000000F418                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000F41D                 jmp     loc_F200
.text:000000000000F422 ; ---------------------------------------------------------------------------
.text:000000000000F422
.text:000000000000F422 loc_F422:                               ; CODE XREF: human_readable+6B9↑j
.text:000000000000F422                 xor     ebx, ebx
.text:000000000000F424                 jmp     loc_EF59
.text:000000000000F429 ; ---------------------------------------------------------------------------
.text:000000000000F429
.text:000000000000F429 loc_F429:                               ; CODE XREF: human_readable+5E2↑j
.text:000000000000F429                 test    eax, eax
.text:000000000000F42B                 jnz     loc_F1B6
.text:000000000000F431
.text:000000000000F431 loc_F431:                               ; CODE XREF: human_readable+8FD↓j
.text:000000000000F431                 test    r12b, 8
.text:000000000000F435                 jnz     short loc_F454
.text:000000000000F437                 mov     r9d, 30h ; '0'
.text:000000000000F43D                 jmp     loc_F1BA
.text:000000000000F442 ; ---------------------------------------------------------------------------
.text:000000000000F442
.text:000000000000F442 loc_F442:                               ; CODE XREF: human_readable+5CB↑j
.text:000000000000F442                 mov     edx, eax
.text:000000000000F444                 and     edx, 1
.text:000000000000F447                 add     edx, edi
.text:000000000000F449                 cmp     edx, 2
.text:000000000000F44C                 setnle  dl
.text:000000000000F44F                 jmp     loc_F1A0
.text:000000000000F454 ; ---------------------------------------------------------------------------
.text:000000000000F454
.text:000000000000F454 loc_F454:                               ; CODE XREF: human_readable+875↑j
.text:000000000000F454                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000F459                 xor     r9d, r9d
.text:000000000000F45C                 jmp     loc_F200
.text:000000000000F461 ; ---------------------------------------------------------------------------
.text:000000000000F461
.text:000000000000F461 loc_F461:                               ; CODE XREF: human_readable+614↑j
.text:000000000000F461                 mov     rax, [r14]
.text:000000000000F464                 mov     r9, r14
.text:000000000000F467                 mov     [r8], rax
.text:000000000000F46A                 mov     eax, ebp
.text:000000000000F46C                 mov     rdx, [r14+rax-8]
.text:000000000000F471                 mov     [r8+rax-8], rdx
.text:000000000000F476                 lea     rdx, [r8+8]
.text:000000000000F47A                 mov     rax, r8
.text:000000000000F47D                 and     rdx, 0FFFFFFFFFFFFFFF8h
.text:000000000000F481                 sub     rax, rdx
.text:000000000000F484                 sub     r9, rax
.text:000000000000F487                 add     eax, ebp
.text:000000000000F489                 and     eax, 0FFFFFFF8h
.text:000000000000F48C                 cmp     eax, 8
.text:000000000000F48F                 jb      loc_F1F7
.text:000000000000F495                 and     eax, 0FFFFFFF8h
.text:000000000000F498                 xor     edi, edi
.text:000000000000F49A
.text:000000000000F49A loc_F49A:                               ; CODE XREF: human_readable+8EA↓j
.text:000000000000F49A                 mov     r10d, edi
.text:000000000000F49D                 add     edi, 8
.text:000000000000F4A0                 mov     r11, [r9+r10]
.text:000000000000F4A4                 cmp     edi, eax
.text:000000000000F4A6                 mov     [rdx+r10], r11
.text:000000000000F4AA                 jb      short loc_F49A
.text:000000000000F4AC                 jmp     loc_F1F7
.text:000000000000F4B1 ; ---------------------------------------------------------------------------
.text:000000000000F4B1
.text:000000000000F4B1 loc_F4B1:                               ; CODE XREF: human_readable+5F0↑j
.text:000000000000F4B1                 lea     rsi, [r10+1]
.text:000000000000F4B5                 cmp     rsi, 0Ah
.text:000000000000F4B9                 jz      short loc_F510
.text:000000000000F4BB                 xor     edi, edi
.text:000000000000F4BD                 jmp     loc_F431
.text:000000000000F4C2 ; ---------------------------------------------------------------------------
.text:000000000000F4C2
.text:000000000000F4C2 loc_F4C2:                               ; CODE XREF: human_readable+840↑j
.text:000000000000F4C2                 mov     rax, rbp
.text:000000000000F4C5                 mov     byte ptr [r8-1], 30h ; '0'
.text:000000000000F4CA                 not     rax
.text:000000000000F4CD                 add     r8, rax
.text:000000000000F4D0                 cmp     ebp, 8
.text:000000000000F4D3                 mov     eax, ebp
.text:000000000000F4D5                 jnb     short loc_F51A
.text:000000000000F4D7                 and     ebp, 4
.text:000000000000F4DA                 jnz     loc_F591
.text:000000000000F4E0                 test    eax, eax
.text:000000000000F4E2                 jz      loc_F406
.text:000000000000F4E8                 movzx   edx, byte ptr [r14]
.text:000000000000F4EC                 test    al, 2
.text:000000000000F4EE                 mov     [r8], dl
.text:000000000000F4F1                 jz      loc_F406
.text:000000000000F4F7                 movzx   edx, word ptr [r14+rax-2]
.text:000000000000F4FD                 mov     [r8+rax-2], dx
.text:000000000000F503                 jmp     loc_F406
.text:000000000000F503 ; ---------------------------------------------------------------------------
.text:000000000000F508                 align 10h
.text:000000000000F510
.text:000000000000F510 loc_F510:                               ; CODE XREF: human_readable+8F9↑j
.text:000000000000F510                 mov     r8, [rsp+0C8h+var_C0]
.text:000000000000F515                 jmp     loc_F1F7
.text:000000000000F51A ; ---------------------------------------------------------------------------
.text:000000000000F51A
.text:000000000000F51A loc_F51A:                               ; CODE XREF: human_readable+915↑j
.text:000000000000F51A                 mov     rax, [r14]
.text:000000000000F51D                 lea     rcx, [r8+8]
.text:000000000000F521                 and     rcx, 0FFFFFFFFFFFFFFF8h
.text:000000000000F525                 mov     [r8], rax
.text:000000000000F528                 mov     eax, ebp
.text:000000000000F52A                 mov     rdx, [r14+rax-8]
.text:000000000000F52F                 mov     [r8+rax-8], rdx
.text:000000000000F534                 mov     rax, r8
.text:000000000000F537                 sub     rax, rcx
.text:000000000000F53A                 sub     r14, rax
.text:000000000000F53D                 add     eax, ebp
.text:000000000000F53F                 and     eax, 0FFFFFFF8h
.text:000000000000F542                 cmp     eax, 8
.text:000000000000F545                 jb      loc_F406
.text:000000000000F54B                 and     eax, 0FFFFFFF8h
.text:000000000000F54E                 xor     edx, edx
.text:000000000000F550
.text:000000000000F550 loc_F550:                               ; CODE XREF: human_readable+99F↓j
.text:000000000000F550                 mov     esi, edx
.text:000000000000F552                 add     edx, 8
.text:000000000000F555                 mov     rdi, [r14+rsi]
.text:000000000000F559                 cmp     edx, eax
.text:000000000000F55B                 mov     [rcx+rsi], rdi
.text:000000000000F55F                 jb      short loc_F550
.text:000000000000F561                 jmp     loc_F406
.text:000000000000F566 ; ---------------------------------------------------------------------------
.text:000000000000F566
.text:000000000000F566 loc_F566:                               ; CODE XREF: human_readable+61E↑j
.text:000000000000F566                 mov     edx, [r14]
.text:000000000000F569                 mov     [r8], edx
.text:000000000000F56C                 mov     edx, [r14+rax-4]
.text:000000000000F571                 mov     [r8+rax-4], edx
.text:000000000000F576                 jmp     loc_F1F7
.text:000000000000F57B ; ---------------------------------------------------------------------------
.text:000000000000F57B
.text:000000000000F57B loc_F57B:                               ; CODE XREF: human_readable+423↑j
.text:000000000000F57B                 call    ___stack_chk_fail
.text:000000000000F580 ; ---------------------------------------------------------------------------
.text:000000000000F580
.text:000000000000F580 loc_F580:                               ; CODE XREF: human_readable+631↑j
.text:000000000000F580                 movzx   edx, word ptr [r14+rax-2]
.text:000000000000F586                 mov     [r8+rax-2], dx
.text:000000000000F58C                 jmp     loc_F1F7
.text:000000000000F591 ; ---------------------------------------------------------------------------
.text:000000000000F591
.text:000000000000F591 loc_F591:                               ; CODE XREF: human_readable+91A↑j
.text:000000000000F591                 mov     edx, [r14]
.text:000000000000F594                 mov     [r8], edx
.text:000000000000F597                 mov     edx, [r14+rax-4]
.text:000000000000F59C                 mov     [r8+rax-4], edx
.text:000000000000F5A1                 jmp     loc_F406
.text:000000000000F5A6 ; ---------------------------------------------------------------------------
.text:000000000000F5A6
.text:000000000000F5A6 loc_F5A6:                               ; CODE XREF: human_readable+3B3↑j
.text:000000000000F5A6                 test    eax, eax
.text:000000000000F5A8                 mov     rdx, [rsp+0C8h+var_C0]
.text:000000000000F5AD                 jnz     loc_EFBB
.text:000000000000F5B3                 jmp     loc_EFC7
.text:000000000000F5B8 ; ---------------------------------------------------------------------------
.text:000000000000F5B8
.text:000000000000F5B8 loc_F5B8:                               ; CODE XREF: human_readable+4E8↑j
.text:000000000000F5B8                 mov     ebx, dword ptr [rsp+0C8h+var_A8]
.text:000000000000F5BC                 mov     r15, rax
.text:000000000000F5BF                 mov     r12d, r14d
.text:000000000000F5C2                 jmp     loc_EF4A
.text:000000000000F5C2 ; } // starts at EBC0
.text:000000000000F5C2 human_readable  endp
.text:000000000000F5C2
.text:000000000000F5C2 ; ---------------------------------------------------------------------------
.text:000000000000F5C7                 align 10h
.text:000000000000F5D0
.text:000000000000F5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F5D0
.text:000000000000F5D0 ; Attributes: info_from_lumina
.text:000000000000F5D0
.text:000000000000F5D0 ; strtol_error __fastcall human_options(const char *spec, int *opts, uintmax_t *block_size)
.text:000000000000F5D0                 public human_options
.text:000000000000F5D0 human_options   proc near               ; CODE XREF: main+893↑p
.text:000000000000F5D0                                         ; main+106B↑p
.text:000000000000F5D0
.text:000000000000F5D0 var_38          = qword ptr -38h
.text:000000000000F5D0 var_30          = qword ptr -30h
.text:000000000000F5D0
.text:000000000000F5D0 ; __unwind {
.text:000000000000F5D0                 push    r13
.text:000000000000F5D2                 push    r12
.text:000000000000F5D4                 mov     r13, rsi
.text:000000000000F5D7                 push    rbp
.text:000000000000F5D8                 push    rbx
.text:000000000000F5D9                 mov     r12, rdx
.text:000000000000F5DC                 mov     rbx, rdi
.text:000000000000F5DF                 sub     rsp, 18h
.text:000000000000F5E3                 mov     rax, fs:28h
.text:000000000000F5EC                 mov     [rsp+38h+var_30], rax
.text:000000000000F5F1                 xor     eax, eax
.text:000000000000F5F3                 test    rdi, rdi
.text:000000000000F5F6                 jz      loc_F710
.text:000000000000F5FC
.text:000000000000F5FC loc_F5FC:                               ; CODE XREF: human_options+152↓j
.text:000000000000F5FC                                         ; human_options+16A↓j
.text:000000000000F5FC                 xor     ebp, ebp
.text:000000000000F5FE                 cmp     byte ptr [rbx], 27h ; '''
.text:000000000000F601                 jnz     short loc_F60C
.text:000000000000F603                 add     rbx, 1
.text:000000000000F607                 mov     ebp, 4
.text:000000000000F60C
.text:000000000000F60C loc_F60C:                               ; CODE XREF: human_options+31↑j
.text:000000000000F60C                 lea     rdx, block_size_opts
.text:000000000000F613                 lea     rsi, block_size_args
.text:000000000000F61A                 mov     ecx, 4
.text:000000000000F61F                 mov     rdi, rbx
.text:000000000000F622                 call    argmatch
.text:000000000000F627                 test    eax, eax
.text:000000000000F629                 js      short loc_F668
.text:000000000000F62B                 lea     rdx, block_size_opts
.text:000000000000F632                 cdqe
.text:000000000000F634                 mov     qword ptr [r12], 1
.text:000000000000F63C                 or      ebp, [rdx+rax*4]
.text:000000000000F63F                 xor     eax, eax
.text:000000000000F641                 mov     [r13+0], ebp
.text:000000000000F645
.text:000000000000F645 loc_F645:                               ; CODE XREF: human_options+107↓j
.text:000000000000F645                                         ; human_options+134↓j ...
.text:000000000000F645                 mov     rcx, [rsp+38h+var_30]
.text:000000000000F64A                 xor     rcx, fs:28h
.text:000000000000F653                 jnz     loc_F7B1
.text:000000000000F659                 add     rsp, 18h
.text:000000000000F65D                 pop     rbx
.text:000000000000F65E                 pop     rbp
.text:000000000000F65F                 pop     r12
.text:000000000000F661                 pop     r13
.text:000000000000F663                 retn
.text:000000000000F663 ; ---------------------------------------------------------------------------
.text:000000000000F664                 align 8
.text:000000000000F668
.text:000000000000F668 loc_F668:                               ; CODE XREF: human_options+59↑j
.text:000000000000F668                 lea     r8, aEeggkkmmppttyy ; "eEgGkKmMpPtTyYzZ0"
.text:000000000000F66F                 xor     edx, edx
.text:000000000000F671                 mov     rsi, rsp
.text:000000000000F674                 mov     rcx, r12
.text:000000000000F677                 mov     rdi, rbx        ; nptr
.text:000000000000F67A                 call    xstrtoumax
.text:000000000000F67F                 test    eax, eax
.text:000000000000F681                 jnz     short loc_F6C8
.text:000000000000F683                 movzx   esi, byte ptr [rbx]
.text:000000000000F686                 lea     edx, [rsi-30h]
.text:000000000000F689                 cmp     dl, 9
.text:000000000000F68C                 jbe     short loc_F6B8
.text:000000000000F68E                 mov     rcx, [rsp+38h+var_38]
.text:000000000000F692                 cmp     rbx, rcx
.text:000000000000F695                 jnz     short loc_F6A9
.text:000000000000F697                 jmp     loc_F770
.text:000000000000F697 ; ---------------------------------------------------------------------------
.text:000000000000F69C                 align 20h
.text:000000000000F6A0
.text:000000000000F6A0 loc_F6A0:                               ; CODE XREF: human_options+E6↓j
.text:000000000000F6A0                 cmp     rbx, rcx
.text:000000000000F6A3                 jz      loc_F770
.text:000000000000F6A9
.text:000000000000F6A9 loc_F6A9:                               ; CODE XREF: human_options+C5↑j
.text:000000000000F6A9                 add     rbx, 1
.text:000000000000F6AD                 movzx   edi, byte ptr [rbx]
.text:000000000000F6B0                 lea     edx, [rdi-30h]
.text:000000000000F6B3                 cmp     dl, 9
.text:000000000000F6B6                 ja      short loc_F6A0
.text:000000000000F6B8
.text:000000000000F6B8 loc_F6B8:                               ; CODE XREF: human_options+BC↑j
.text:000000000000F6B8                                         ; human_options+1AD↓j ...
.text:000000000000F6B8                 mov     rdx, [r12]
.text:000000000000F6BC                 mov     [r13+0], ebp
.text:000000000000F6C0                 jmp     short loc_F6D4
.text:000000000000F6C0 ; ---------------------------------------------------------------------------
.text:000000000000F6C2                 align 8
.text:000000000000F6C8
.text:000000000000F6C8 loc_F6C8:                               ; CODE XREF: human_options+B1↑j
.text:000000000000F6C8                 mov     rdx, [r12]
.text:000000000000F6CC                 mov     dword ptr [r13+0], 0
.text:000000000000F6D4
.text:000000000000F6D4 loc_F6D4:                               ; CODE XREF: human_options+F0↑j
.text:000000000000F6D4                 test    rdx, rdx
.text:000000000000F6D7                 jnz     loc_F645
.text:000000000000F6DD                 lea     rdi, aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:000000000000F6E4                 call    _getenv
.text:000000000000F6E9                 cmp     rax, 1
.text:000000000000F6ED                 sbb     rax, rax
.text:000000000000F6F0                 and     eax, 200h
.text:000000000000F6F5                 add     rax, 200h
.text:000000000000F6FB                 mov     [r12], rax
.text:000000000000F6FF                 mov     eax, 4
.text:000000000000F704                 jmp     loc_F645
.text:000000000000F704 ; ---------------------------------------------------------------------------
.text:000000000000F709                 align 10h
.text:000000000000F710
.text:000000000000F710 loc_F710:                               ; CODE XREF: human_options+26↑j
.text:000000000000F710                 lea     rdi, aLsBlockSize+3 ; name
.text:000000000000F717                 call    _getenv
.text:000000000000F71C                 test    rax, rax
.text:000000000000F71F                 mov     rbx, rax
.text:000000000000F722                 jnz     loc_F5FC
.text:000000000000F728                 lea     rdi, aBlocksize ; "BLOCKSIZE"
.text:000000000000F72F                 call    _getenv
.text:000000000000F734                 test    rax, rax
.text:000000000000F737                 mov     rbx, rax
.text:000000000000F73A                 jnz     loc_F5FC
.text:000000000000F740                 lea     rdi, aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:000000000000F747                 call    _getenv
.text:000000000000F74C                 test    rax, rax
.text:000000000000F74F                 jz      short loc_F79A
.text:000000000000F751                 mov     qword ptr [r12], 200h
.text:000000000000F759                 xor     eax, eax
.text:000000000000F75B                 mov     dword ptr [r13+0], 0
.text:000000000000F763                 jmp     loc_F645
.text:000000000000F763 ; ---------------------------------------------------------------------------
.text:000000000000F768                 align 10h
.text:000000000000F770
.text:000000000000F770 loc_F770:                               ; CODE XREF: human_options+C7↑j
.text:000000000000F770                                         ; human_options+D3↑j
.text:000000000000F770                 cmp     byte ptr [rcx-1], 42h ; 'B'
.text:000000000000F774                 jz      short loc_F788
.text:000000000000F776                 or      bpl, 80h
.text:000000000000F77A
.text:000000000000F77A loc_F77A:                               ; CODE XREF: human_options+1C8↓j
.text:000000000000F77A                 or      ebp, 20h
.text:000000000000F77D                 jmp     loc_F6B8
.text:000000000000F77D ; ---------------------------------------------------------------------------
.text:000000000000F782                 align 8
.text:000000000000F788
.text:000000000000F788 loc_F788:                               ; CODE XREF: human_options+1A4↑j
.text:000000000000F788                 or      ebp, 180h
.text:000000000000F78E                 cmp     byte ptr [rcx-2], 69h ; 'i'
.text:000000000000F792                 jnz     loc_F6B8
.text:000000000000F798                 jmp     short loc_F77A
.text:000000000000F79A ; ---------------------------------------------------------------------------
.text:000000000000F79A
.text:000000000000F79A loc_F79A:                               ; CODE XREF: human_options+17F↑j
.text:000000000000F79A                 mov     qword ptr [r12], 400h
.text:000000000000F7A2                 xor     eax, eax
.text:000000000000F7A4                 mov     dword ptr [r13+0], 0
.text:000000000000F7AC                 jmp     loc_F645
.text:000000000000F7B1 ; ---------------------------------------------------------------------------
.text:000000000000F7B1
.text:000000000000F7B1 loc_F7B1:                               ; CODE XREF: human_options+83↑j
.text:000000000000F7B1                 call    ___stack_chk_fail
.text:000000000000F7B1 ; } // starts at F5D0
.text:000000000000F7B1 human_options   endp
.text:000000000000F7B1
.text:000000000000F7B1 ; ---------------------------------------------------------------------------
.text:000000000000F7B6                 align 20h
.text:000000000000F7C0
.text:000000000000F7C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F7C0
.text:000000000000F7C0 ; Attributes: info_from_lumina
.text:000000000000F7C0
.text:000000000000F7C0 ; char *__fastcall getuser(uid_t uid)
.text:000000000000F7C0                 public getuser
.text:000000000000F7C0 getuser         proc near               ; CODE XREF: format_user+34↑p
.text:000000000000F7C0                                         ; format_user_width:loc_9658↑p
.text:000000000000F7C0 ; __unwind {
.text:000000000000F7C0                 push    r12
.text:000000000000F7C2                 push    rbp
.text:000000000000F7C3                 push    rbx
.text:000000000000F7C4                 mov     rbx, cs:user_alist
.text:000000000000F7CB                 test    rbx, rbx
.text:000000000000F7CE                 jz      short loc_F7ED
.text:000000000000F7D0                 cmp     edi, [rbx]
.text:000000000000F7D2                 jnz     short loc_F7E4
.text:000000000000F7D4                 jmp     short loc_F840
.text:000000000000F7D4 ; ---------------------------------------------------------------------------
.text:000000000000F7D6                 align 20h
.text:000000000000F7E0
.text:000000000000F7E0 loc_F7E0:                               ; CODE XREF: getuser+2B↓j
.text:000000000000F7E0                 cmp     [rbx], edi
.text:000000000000F7E2                 jz      short loc_F840
.text:000000000000F7E4
.text:000000000000F7E4 loc_F7E4:                               ; CODE XREF: getuser+12↑j
.text:000000000000F7E4                 mov     rbx, [rbx+8]
.text:000000000000F7E8                 test    rbx, rbx
.text:000000000000F7EB                 jnz     short loc_F7E0
.text:000000000000F7ED
.text:000000000000F7ED loc_F7ED:                               ; CODE XREF: getuser+E↑j
.text:000000000000F7ED                 mov     ebp, edi
.text:000000000000F7EF                 lea     r12, a8+6       ; ""
.text:000000000000F7F6                 call    _getpwuid
.text:000000000000F7FB                 test    rax, rax
.text:000000000000F7FE                 mov     edi, 18h
.text:000000000000F803                 jz      short loc_F818
.text:000000000000F805                 mov     r12, [rax]
.text:000000000000F808                 mov     rdi, r12        ; s
.text:000000000000F80B                 call    _strlen
.text:000000000000F810                 lea     rdi, [rax+18h]
.text:000000000000F814                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000F818
.text:000000000000F818 loc_F818:                               ; CODE XREF: getuser+43↑j
.text:000000000000F818                 call    xmalloc
.text:000000000000F81D                 lea     rdi, [rax+10h]  ; dest
.text:000000000000F821                 mov     [rax], ebp
.text:000000000000F823                 mov     rsi, r12        ; src
.text:000000000000F826                 mov     rbx, rax
.text:000000000000F829                 call    _strcpy
.text:000000000000F82E                 mov     rax, cs:user_alist
.text:000000000000F835                 mov     cs:user_alist, rbx
.text:000000000000F83C                 mov     [rbx+8], rax
.text:000000000000F840
.text:000000000000F840 loc_F840:                               ; CODE XREF: getuser+14↑j
.text:000000000000F840                                         ; getuser+22↑j
.text:000000000000F840                 cmp     byte ptr [rbx+10h], 0
.text:000000000000F844                 jz      short loc_F850
.text:000000000000F846                 lea     rax, [rbx+10h]
.text:000000000000F84A
.text:000000000000F84A loc_F84A:                               ; CODE XREF: getuser+92↓j
.text:000000000000F84A                 pop     rbx
.text:000000000000F84B                 pop     rbp
.text:000000000000F84C                 pop     r12
.text:000000000000F84E                 retn
.text:000000000000F84E ; ---------------------------------------------------------------------------
.text:000000000000F84F                 align 10h
.text:000000000000F850
.text:000000000000F850 loc_F850:                               ; CODE XREF: getuser+84↑j
.text:000000000000F850                 xor     eax, eax
.text:000000000000F852                 jmp     short loc_F84A
.text:000000000000F852 ; } // starts at F7C0
.text:000000000000F852 getuser         endp
.text:000000000000F852
.text:000000000000F852 ; ---------------------------------------------------------------------------
.text:000000000000F854                 align 20h
.text:000000000000F860
.text:000000000000F860 ; =============== S U B R O U T I N E =======================================
.text:000000000000F860
.text:000000000000F860 ; Attributes: info_from_lumina
.text:000000000000F860
.text:000000000000F860 ; uid_t *__fastcall getuidbyname(const char *user)
.text:000000000000F860                 public getuidbyname
.text:000000000000F860 getuidbyname    proc near
.text:000000000000F860 ; __unwind {
.text:000000000000F860                 push    r12
.text:000000000000F862                 push    rbp
.text:000000000000F863                 mov     r12, rdi
.text:000000000000F866                 push    rbx
.text:000000000000F867                 mov     rbx, cs:user_alist
.text:000000000000F86E                 test    rbx, rbx
.text:000000000000F871                 jz      short loc_F8B0
.text:000000000000F873                 movzx   ebp, byte ptr [rdi]
.text:000000000000F876                 jmp     short loc_F889
.text:000000000000F876 ; ---------------------------------------------------------------------------
.text:000000000000F878                 align 20h
.text:000000000000F880
.text:000000000000F880 loc_F880:                               ; CODE XREF: getuidbyname+2D↓j
.text:000000000000F880                                         ; getuidbyname+3D↓j
.text:000000000000F880                 mov     rbx, [rbx+8]
.text:000000000000F884                 test    rbx, rbx
.text:000000000000F887                 jz      short loc_F8B0
.text:000000000000F889
.text:000000000000F889 loc_F889:                               ; CODE XREF: getuidbyname+16↑j
.text:000000000000F889                 cmp     [rbx+10h], bpl
.text:000000000000F88D                 jnz     short loc_F880
.text:000000000000F88F                 lea     rdi, [rbx+10h]  ; s1
.text:000000000000F893                 mov     rsi, r12        ; s2
.text:000000000000F896                 call    _strcmp
.text:000000000000F89B                 test    eax, eax
.text:000000000000F89D                 jnz     short loc_F880
.text:000000000000F89F
.text:000000000000F89F loc_F89F:                               ; CODE XREF: getuidbyname+DB↓j
.text:000000000000F89F                 mov     rax, rbx
.text:000000000000F8A2
.text:000000000000F8A2 loc_F8A2:                               ; CODE XREF: getuidbyname+F4↓j
.text:000000000000F8A2                 pop     rbx
.text:000000000000F8A3                 pop     rbp
.text:000000000000F8A4                 pop     r12
.text:000000000000F8A6                 retn
.text:000000000000F8A6 ; ---------------------------------------------------------------------------
.text:000000000000F8A7                 align 10h
.text:000000000000F8B0
.text:000000000000F8B0 loc_F8B0:                               ; CODE XREF: getuidbyname+11↑j
.text:000000000000F8B0                                         ; getuidbyname+27↑j
.text:000000000000F8B0                 mov     rbx, cs:nouser_alist
.text:000000000000F8B7                 test    rbx, rbx
.text:000000000000F8BA                 jz      short loc_F8F0
.text:000000000000F8BC                 movzx   ebp, byte ptr [r12]
.text:000000000000F8C1                 jmp     short loc_F8D1
.text:000000000000F8C1 ; ---------------------------------------------------------------------------
.text:000000000000F8C3                 align 8
.text:000000000000F8C8
.text:000000000000F8C8 loc_F8C8:                               ; CODE XREF: getuidbyname+75↓j
.text:000000000000F8C8                                         ; getuidbyname+85↓j
.text:000000000000F8C8                 mov     rbx, [rbx+8]
.text:000000000000F8CC                 test    rbx, rbx
.text:000000000000F8CF                 jz      short loc_F8F0
.text:000000000000F8D1
.text:000000000000F8D1 loc_F8D1:                               ; CODE XREF: getuidbyname+61↑j
.text:000000000000F8D1                 cmp     [rbx+10h], bpl
.text:000000000000F8D5                 jnz     short loc_F8C8
.text:000000000000F8D7                 lea     rdi, [rbx+10h]  ; s1
.text:000000000000F8DB                 mov     rsi, r12        ; s2
.text:000000000000F8DE                 call    _strcmp
.text:000000000000F8E3                 test    eax, eax
.text:000000000000F8E5                 jnz     short loc_F8C8
.text:000000000000F8E7                 pop     rbx
.text:000000000000F8E8                 xor     eax, eax
.text:000000000000F8EA                 pop     rbp
.text:000000000000F8EB                 pop     r12
.text:000000000000F8ED                 retn
.text:000000000000F8ED ; ---------------------------------------------------------------------------
.text:000000000000F8EE                 align 10h
.text:000000000000F8F0
.text:000000000000F8F0 loc_F8F0:                               ; CODE XREF: getuidbyname+5A↑j
.text:000000000000F8F0                                         ; getuidbyname+6F↑j
.text:000000000000F8F0                 mov     rdi, r12        ; name
.text:000000000000F8F3                 call    _getpwnam
.text:000000000000F8F8                 mov     rdi, r12        ; s
.text:000000000000F8FB                 mov     rbp, rax
.text:000000000000F8FE                 call    _strlen
.text:000000000000F903                 lea     rdi, [rax+18h]
.text:000000000000F907                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000F90B                 call    xmalloc
.text:000000000000F910                 lea     rdi, [rax+10h]  ; dest
.text:000000000000F914                 mov     rsi, r12        ; src
.text:000000000000F917                 mov     rbx, rax
.text:000000000000F91A                 call    _strcpy
.text:000000000000F91F                 test    rbp, rbp
.text:000000000000F922                 jz      short loc_F940
.text:000000000000F924                 mov     eax, [rbp+10h]
.text:000000000000F927                 mov     [rbx], eax
.text:000000000000F929                 mov     rax, cs:user_alist
.text:000000000000F930                 mov     cs:user_alist, rbx
.text:000000000000F937                 mov     [rbx+8], rax
.text:000000000000F93B                 jmp     loc_F89F
.text:000000000000F940 ; ---------------------------------------------------------------------------
.text:000000000000F940
.text:000000000000F940 loc_F940:                               ; CODE XREF: getuidbyname+C2↑j
.text:000000000000F940                 mov     rax, cs:nouser_alist
.text:000000000000F947                 mov     cs:nouser_alist, rbx
.text:000000000000F94E                 mov     [rbx+8], rax
.text:000000000000F952                 xor     eax, eax
.text:000000000000F954                 jmp     loc_F8A2
.text:000000000000F954 ; } // starts at F860
.text:000000000000F954 getuidbyname    endp
.text:000000000000F954
.text:000000000000F954 ; ---------------------------------------------------------------------------
.text:000000000000F959                 align 20h
.text:000000000000F960
.text:000000000000F960 ; =============== S U B R O U T I N E =======================================
.text:000000000000F960
.text:000000000000F960 ; Attributes: info_from_lumina
.text:000000000000F960
.text:000000000000F960 ; char *__fastcall getuser_0(uid_t uid)
.text:000000000000F960                 public getuser_0
.text:000000000000F960 getuser_0       proc near               ; CODE XREF: print_long_format+6EF↑p
.text:000000000000F960                                         ; gobble_file_constprop_52+CD3↑p
.text:000000000000F960 ; __unwind {
.text:000000000000F960                 push    r12
.text:000000000000F962                 push    rbp
.text:000000000000F963                 push    rbx
.text:000000000000F964                 mov     rbx, cs:group_alist
.text:000000000000F96B                 test    rbx, rbx
.text:000000000000F96E                 jz      short loc_F98D
.text:000000000000F970                 cmp     edi, [rbx]
.text:000000000000F972                 jnz     short loc_F984
.text:000000000000F974                 jmp     short loc_F9E0
.text:000000000000F974 ; ---------------------------------------------------------------------------
.text:000000000000F976                 align 20h
.text:000000000000F980
.text:000000000000F980 loc_F980:                               ; CODE XREF: getuser_0+2B↓j
.text:000000000000F980                 cmp     [rbx], edi
.text:000000000000F982                 jz      short loc_F9E0
.text:000000000000F984
.text:000000000000F984 loc_F984:                               ; CODE XREF: getuser_0+12↑j
.text:000000000000F984                 mov     rbx, [rbx+8]
.text:000000000000F988                 test    rbx, rbx
.text:000000000000F98B                 jnz     short loc_F980
.text:000000000000F98D
.text:000000000000F98D loc_F98D:                               ; CODE XREF: getuser_0+E↑j
.text:000000000000F98D                 mov     ebp, edi
.text:000000000000F98F                 lea     r12, a8+6       ; ""
.text:000000000000F996                 call    _getgrgid
.text:000000000000F99B                 test    rax, rax
.text:000000000000F99E                 mov     edi, 18h
.text:000000000000F9A3                 jz      short loc_F9B8
.text:000000000000F9A5                 mov     r12, [rax]
.text:000000000000F9A8                 mov     rdi, r12        ; s
.text:000000000000F9AB                 call    _strlen
.text:000000000000F9B0                 lea     rdi, [rax+18h]
.text:000000000000F9B4                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000F9B8
.text:000000000000F9B8 loc_F9B8:                               ; CODE XREF: getuser_0+43↑j
.text:000000000000F9B8                 call    xmalloc
.text:000000000000F9BD                 lea     rdi, [rax+10h]  ; dest
.text:000000000000F9C1                 mov     [rax], ebp
.text:000000000000F9C3                 mov     rsi, r12        ; src
.text:000000000000F9C6                 mov     rbx, rax
.text:000000000000F9C9                 call    _strcpy
.text:000000000000F9CE                 mov     rax, cs:group_alist
.text:000000000000F9D5                 mov     cs:group_alist, rbx
.text:000000000000F9DC                 mov     [rbx+8], rax
.text:000000000000F9E0
.text:000000000000F9E0 loc_F9E0:                               ; CODE XREF: getuser_0+14↑j
.text:000000000000F9E0                                         ; getuser_0+22↑j
.text:000000000000F9E0                 cmp     byte ptr [rbx+10h], 0
.text:000000000000F9E4                 jz      short loc_F9F0
.text:000000000000F9E6                 lea     rax, [rbx+10h]
.text:000000000000F9EA
.text:000000000000F9EA loc_F9EA:                               ; CODE XREF: getuser_0+92↓j
.text:000000000000F9EA                 pop     rbx
.text:000000000000F9EB                 pop     rbp
.text:000000000000F9EC                 pop     r12
.text:000000000000F9EE                 retn
.text:000000000000F9EE ; ---------------------------------------------------------------------------
.text:000000000000F9EF                 align 10h
.text:000000000000F9F0
.text:000000000000F9F0 loc_F9F0:                               ; CODE XREF: getuser_0+84↑j
.text:000000000000F9F0                 xor     eax, eax
.text:000000000000F9F2                 jmp     short loc_F9EA
.text:000000000000F9F2 ; } // starts at F960
.text:000000000000F9F2 getuser_0       endp
.text:000000000000F9F2
.text:000000000000F9F2 ; ---------------------------------------------------------------------------
.text:000000000000F9F4                 align 20h
.text:000000000000FA00
.text:000000000000FA00 ; =============== S U B R O U T I N E =======================================
.text:000000000000FA00
.text:000000000000FA00 ; Attributes: info_from_lumina
.text:000000000000FA00
.text:000000000000FA00 ; uid_t *__fastcall getuidbyname_0(const char *user)
.text:000000000000FA00                 public getuidbyname_0
.text:000000000000FA00 getuidbyname_0  proc near
.text:000000000000FA00 ; __unwind {
.text:000000000000FA00                 push    r12
.text:000000000000FA02                 push    rbp
.text:000000000000FA03                 mov     r12, rdi
.text:000000000000FA06                 push    rbx
.text:000000000000FA07                 mov     rbx, cs:group_alist
.text:000000000000FA0E                 test    rbx, rbx
.text:000000000000FA11                 jz      short loc_FA50
.text:000000000000FA13                 movzx   ebp, byte ptr [rdi]
.text:000000000000FA16                 jmp     short loc_FA29
.text:000000000000FA16 ; ---------------------------------------------------------------------------
.text:000000000000FA18                 align 20h
.text:000000000000FA20
.text:000000000000FA20 loc_FA20:                               ; CODE XREF: getuidbyname_0+2D↓j
.text:000000000000FA20                                         ; getuidbyname_0+3D↓j
.text:000000000000FA20                 mov     rbx, [rbx+8]
.text:000000000000FA24                 test    rbx, rbx
.text:000000000000FA27                 jz      short loc_FA50
.text:000000000000FA29
.text:000000000000FA29 loc_FA29:                               ; CODE XREF: getuidbyname_0+16↑j
.text:000000000000FA29                 cmp     [rbx+10h], bpl
.text:000000000000FA2D                 jnz     short loc_FA20
.text:000000000000FA2F                 lea     rdi, [rbx+10h]  ; s1
.text:000000000000FA33                 mov     rsi, r12        ; s2
.text:000000000000FA36                 call    _strcmp
.text:000000000000FA3B                 test    eax, eax
.text:000000000000FA3D                 jnz     short loc_FA20
.text:000000000000FA3F
.text:000000000000FA3F loc_FA3F:                               ; CODE XREF: getuidbyname_0+DB↓j
.text:000000000000FA3F                 mov     rax, rbx
.text:000000000000FA42
.text:000000000000FA42 loc_FA42:                               ; CODE XREF: getuidbyname_0+F4↓j
.text:000000000000FA42                 pop     rbx
.text:000000000000FA43                 pop     rbp
.text:000000000000FA44                 pop     r12
.text:000000000000FA46                 retn
.text:000000000000FA46 ; ---------------------------------------------------------------------------
.text:000000000000FA47                 align 10h
.text:000000000000FA50
.text:000000000000FA50 loc_FA50:                               ; CODE XREF: getuidbyname_0+11↑j
.text:000000000000FA50                                         ; getuidbyname_0+27↑j
.text:000000000000FA50                 mov     rbx, cs:nogroup_alist
.text:000000000000FA57                 test    rbx, rbx
.text:000000000000FA5A                 jz      short loc_FA90
.text:000000000000FA5C                 movzx   ebp, byte ptr [r12]
.text:000000000000FA61                 jmp     short loc_FA71
.text:000000000000FA61 ; ---------------------------------------------------------------------------
.text:000000000000FA63                 align 8
.text:000000000000FA68
.text:000000000000FA68 loc_FA68:                               ; CODE XREF: getuidbyname_0+75↓j
.text:000000000000FA68                                         ; getuidbyname_0+85↓j
.text:000000000000FA68                 mov     rbx, [rbx+8]
.text:000000000000FA6C                 test    rbx, rbx
.text:000000000000FA6F                 jz      short loc_FA90
.text:000000000000FA71
.text:000000000000FA71 loc_FA71:                               ; CODE XREF: getuidbyname_0+61↑j
.text:000000000000FA71                 cmp     [rbx+10h], bpl
.text:000000000000FA75                 jnz     short loc_FA68
.text:000000000000FA77                 lea     rdi, [rbx+10h]  ; s1
.text:000000000000FA7B                 mov     rsi, r12        ; s2
.text:000000000000FA7E                 call    _strcmp
.text:000000000000FA83                 test    eax, eax
.text:000000000000FA85                 jnz     short loc_FA68
.text:000000000000FA87                 pop     rbx
.text:000000000000FA88                 xor     eax, eax
.text:000000000000FA8A                 pop     rbp
.text:000000000000FA8B                 pop     r12
.text:000000000000FA8D                 retn
.text:000000000000FA8D ; ---------------------------------------------------------------------------
.text:000000000000FA8E                 align 10h
.text:000000000000FA90
.text:000000000000FA90 loc_FA90:                               ; CODE XREF: getuidbyname_0+5A↑j
.text:000000000000FA90                                         ; getuidbyname_0+6F↑j
.text:000000000000FA90                 mov     rdi, r12        ; name
.text:000000000000FA93                 call    _getgrnam
.text:000000000000FA98                 mov     rdi, r12        ; s
.text:000000000000FA9B                 mov     rbp, rax
.text:000000000000FA9E                 call    _strlen
.text:000000000000FAA3                 lea     rdi, [rax+18h]
.text:000000000000FAA7                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000FAAB                 call    xmalloc
.text:000000000000FAB0                 lea     rdi, [rax+10h]  ; dest
.text:000000000000FAB4                 mov     rsi, r12        ; src
.text:000000000000FAB7                 mov     rbx, rax
.text:000000000000FABA                 call    _strcpy
.text:000000000000FABF                 test    rbp, rbp
.text:000000000000FAC2                 jz      short loc_FAE0
.text:000000000000FAC4                 mov     eax, [rbp+10h]
.text:000000000000FAC7                 mov     [rbx], eax
.text:000000000000FAC9                 mov     rax, cs:group_alist
.text:000000000000FAD0                 mov     cs:group_alist, rbx
.text:000000000000FAD7                 mov     [rbx+8], rax
.text:000000000000FADB                 jmp     loc_FA3F
.text:000000000000FAE0 ; ---------------------------------------------------------------------------
.text:000000000000FAE0
.text:000000000000FAE0 loc_FAE0:                               ; CODE XREF: getuidbyname_0+C2↑j
.text:000000000000FAE0                 mov     rax, cs:nogroup_alist
.text:000000000000FAE7                 mov     cs:nogroup_alist, rbx
.text:000000000000FAEE                 mov     [rbx+8], rax
.text:000000000000FAF2                 xor     eax, eax
.text:000000000000FAF4                 jmp     loc_FA42
.text:000000000000FAF4 ; } // starts at FA00
.text:000000000000FAF4 getuidbyname_0  endp
.text:000000000000FAF4
.text:000000000000FAF4 ; ---------------------------------------------------------------------------
.text:000000000000FAF9                 align 20h
.text:000000000000FB00
.text:000000000000FB00 ; =============== S U B R O U T I N E =======================================
.text:000000000000FB00
.text:000000000000FB00 ; Attributes: info_from_lumina
.text:000000000000FB00
.text:000000000000FB00 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:000000000000FB00                 public imaxtostr
.text:000000000000FB00 imaxtostr       proc near               ; CODE XREF: print_long_format+9FE↑p
.text:000000000000FB00 ; __unwind {
.text:000000000000FB00                 test    rdi, rdi
.text:000000000000FB03                 lea     rcx, [rsi+14h]
.text:000000000000FB07                 mov     byte ptr [rsi+14h], 0
.text:000000000000FB0B                 mov     r9, 6666666666666667h
.text:000000000000FB15                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:000000000000FB1F                 mov     r8d, 30h ; '0'
.text:000000000000FB25                 js      short loc_FB63
.text:000000000000FB27                 nop     word ptr [rax+rax+00000000h]
.text:000000000000FB30
.text:000000000000FB30 loc_FB30:                               ; CODE XREF: imaxtostr+54↓j
.text:000000000000FB30                 mov     rax, rdi
.text:000000000000FB33                 sub     rcx, 1
.text:000000000000FB37                 mul     rsi
.text:000000000000FB3A                 shr     rdx, 3
.text:000000000000FB3E                 lea     rax, [rdx+rdx*4]
.text:000000000000FB42                 add     rax, rax
.text:000000000000FB45                 sub     rdi, rax
.text:000000000000FB48                 add     edi, 30h ; '0'
.text:000000000000FB4B                 test    rdx, rdx
.text:000000000000FB4E                 mov     [rcx], dil
.text:000000000000FB51                 mov     rdi, rdx
.text:000000000000FB54                 jnz     short loc_FB30
.text:000000000000FB56                 mov     rax, rcx
.text:000000000000FB59                 retn
.text:000000000000FB59 ; ---------------------------------------------------------------------------
.text:000000000000FB5A                 align 20h
.text:000000000000FB60
.text:000000000000FB60 loc_FB60:                               ; CODE XREF: imaxtostr+8E↓j
.text:000000000000FB60                 mov     rcx, rsi
.text:000000000000FB63
.text:000000000000FB63 loc_FB63:                               ; CODE XREF: imaxtostr+25↑j
.text:000000000000FB63                 mov     rax, rdi
.text:000000000000FB66                 lea     rsi, [rcx-1]
.text:000000000000FB6A                 imul    r9
.text:000000000000FB6D                 mov     rax, rdi
.text:000000000000FB70                 sar     rax, 3Fh
.text:000000000000FB74                 sar     rdx, 2
.text:000000000000FB78                 sub     rdx, rax
.text:000000000000FB7B                 lea     rax, [rdx+rdx*4]
.text:000000000000FB7F                 lea     eax, [r8+rax*2]
.text:000000000000FB83                 sub     eax, edi
.text:000000000000FB85                 test    rdx, rdx
.text:000000000000FB88                 mov     rdi, rdx
.text:000000000000FB8B                 mov     [rcx-1], al
.text:000000000000FB8E                 jnz     short loc_FB60
.text:000000000000FB90                 sub     rcx, 2
.text:000000000000FB94                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:000000000000FB98                 mov     rax, rcx
.text:000000000000FB9B                 retn
.text:000000000000FB9B ; } // starts at FB00
.text:000000000000FB9B imaxtostr       endp
.text:000000000000FB9B
.text:000000000000FB9B ; ---------------------------------------------------------------------------
.text:000000000000FB9C                 align 20h
.text:000000000000FBA0
.text:000000000000FBA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FBA0
.text:000000000000FBA0 ; Attributes: info_from_lumina
.text:000000000000FBA0
.text:000000000000FBA0 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:000000000000FBA0                 public umaxtostr
.text:000000000000FBA0 umaxtostr       proc near               ; CODE XREF: print_file_name_and_frills+17B↑p
.text:000000000000FBA0                                         ; print_long_format+664↑p ...
.text:000000000000FBA0 ; __unwind {
.text:000000000000FBA0                 lea     rcx, [rsi+14h]
.text:000000000000FBA4                 mov     byte ptr [rsi+14h], 0
.text:000000000000FBA8                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:000000000000FBB2                 nop     word ptr [rax+rax+00h]
.text:000000000000FBB8
.text:000000000000FBB8 loc_FBB8:                               ; CODE XREF: umaxtostr+3C↓j
.text:000000000000FBB8                 mov     rax, rdi
.text:000000000000FBBB                 sub     rcx, 1
.text:000000000000FBBF                 mul     rsi
.text:000000000000FBC2                 shr     rdx, 3
.text:000000000000FBC6                 lea     rax, [rdx+rdx*4]
.text:000000000000FBCA                 add     rax, rax
.text:000000000000FBCD                 sub     rdi, rax
.text:000000000000FBD0                 add     edi, 30h ; '0'
.text:000000000000FBD3                 test    rdx, rdx
.text:000000000000FBD6                 mov     [rcx], dil
.text:000000000000FBD9                 mov     rdi, rdx
.text:000000000000FBDC                 jnz     short loc_FBB8
.text:000000000000FBDE                 mov     rax, rcx
.text:000000000000FBE1                 retn
.text:000000000000FBE1 ; } // starts at FBA0
.text:000000000000FBE1 umaxtostr       endp
.text:000000000000FBE1
.text:000000000000FBE1 ; ---------------------------------------------------------------------------
.text:000000000000FBE2                 align 10h
.text:000000000000FBF0
.text:000000000000FBF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FBF0
.text:000000000000FBF0 ; Attributes: info_from_lumina
.text:000000000000FBF0
.text:000000000000FBF0 ; size_t __fastcall mbsalign(const char *src, char *dest, size_t dest_size, size_t *width, mbs_align_t align, int flags)
.text:000000000000FBF0                 public mbsalign
.text:000000000000FBF0 mbsalign        proc near               ; CODE XREF: abformat_init+109↑p
.text:000000000000FBF0                                         ; ambsalign+59↓p
.text:000000000000FBF0
.text:000000000000FBF0 ptr             = qword ptr -68h
.text:000000000000FBF0 s               = qword ptr -60h
.text:000000000000FBF0 var_58          = qword ptr -58h
.text:000000000000FBF0 var_4C          = dword ptr -4Ch
.text:000000000000FBF0 size            = qword ptr -48h
.text:000000000000FBF0 var_40          = qword ptr -40h
.text:000000000000FBF0
.text:000000000000FBF0 ; __unwind {
.text:000000000000FBF0                 push    r15
.text:000000000000FBF2                 push    r14
.text:000000000000FBF4                 mov     r14, rdi
.text:000000000000FBF7                 push    r13
.text:000000000000FBF9                 push    r12
.text:000000000000FBFB                 mov     r13, rsi
.text:000000000000FBFE                 push    rbp
.text:000000000000FBFF                 push    rbx
.text:000000000000FC00                 mov     ebx, r9d
.text:000000000000FC03                 mov     r12, rcx
.text:000000000000FC06                 sub     rsp, 38h
.text:000000000000FC0A                 mov     [rsp+68h+var_58], rdx
.text:000000000000FC0F                 mov     [rsp+68h+var_4C], r8d
.text:000000000000FC14                 call    _strlen
.text:000000000000FC19                 test    bl, 2
.text:000000000000FC1C                 mov     r15, rax
.text:000000000000FC1F                 mov     [rsp+68h+s], rax
.text:000000000000FC24                 jz      loc_FD90
.text:000000000000FC2A
.text:000000000000FC2A loc_FC2A:                               ; CODE XREF: mbsalign+1A9↓j
.text:000000000000FC2A                                         ; mbsalign+1C4↓j
.text:000000000000FC2A                 mov     rbp, r15
.text:000000000000FC2D                 mov     [rsp+68h+ptr], 0
.text:000000000000FC35                 mov     [rsp+68h+s], 0
.text:000000000000FC3E
.text:000000000000FC3E loc_FC3E:                               ; CODE XREF: mbsalign+32F↓j
.text:000000000000FC3E                                         ; mbsalign+340↓j ...
.text:000000000000FC3E                 mov     rax, [r12]
.text:000000000000FC42                 cmp     rax, rbp
.text:000000000000FC45                 jnb     loc_FD59
.text:000000000000FC4B                 mov     r15, rax
.text:000000000000FC4E                 xor     edx, edx
.text:000000000000FC50
.text:000000000000FC50 loc_FC50:                               ; CODE XREF: mbsalign+3BF↓j
.text:000000000000FC50                 mov     [r12], rax
.text:000000000000FC54                 mov     eax, [rsp+68h+var_4C]
.text:000000000000FC58                 test    eax, eax
.text:000000000000FC5A                 jz      loc_FD7B
.text:000000000000FC60
.text:000000000000FC60 loc_FC60:                               ; CODE XREF: mbsalign+185↓j
.text:000000000000FC60                 xor     ebp, ebp
.text:000000000000FC62                 cmp     eax, 1
.text:000000000000FC65                 jz      short loc_FC73
.text:000000000000FC67                 mov     rbp, rdx
.text:000000000000FC6A                 and     edx, 1
.text:000000000000FC6D                 shr     rbp, 1
.text:000000000000FC70                 add     rdx, rbp
.text:000000000000FC73
.text:000000000000FC73 loc_FC73:                               ; CODE XREF: mbsalign+75↑j
.text:000000000000FC73                                         ; mbsalign+190↓j
.text:000000000000FC73                 test    bl, 4
.text:000000000000FC76                 lea     r12, [rdx+r15]
.text:000000000000FC7A                 jz      short loc_FC81
.text:000000000000FC7C                 mov     r12, r15
.text:000000000000FC7F                 xor     edx, edx
.text:000000000000FC81
.text:000000000000FC81 loc_FC81:                               ; CODE XREF: mbsalign+8A↑j
.text:000000000000FC81                 and     ebx, 8
.text:000000000000FC84                 jnz     loc_FD88
.text:000000000000FC8A                 add     r12, rbp
.text:000000000000FC8D
.text:000000000000FC8D loc_FC8D:                               ; CODE XREF: mbsalign+19A↓j
.text:000000000000FC8D                 mov     rax, [rsp+68h+var_58]
.text:000000000000FC92                 test    rax, rax
.text:000000000000FC95                 jz      loc_FD21
.text:000000000000FC9B                 lea     rbx, [r13+rax-1]
.text:000000000000FCA0                 lea     rax, [rdx-1]
.text:000000000000FCA4                 cmp     r13, rbx
.text:000000000000FCA7                 jnb     short loc_FCCF
.text:000000000000FCA9                 test    rdx, rdx
.text:000000000000FCAC                 jz      short loc_FCCF
.text:000000000000FCAE                 xchg    ax, ax
.text:000000000000FCB0
.text:000000000000FCB0 loc_FCB0:                               ; CODE XREF: mbsalign+DD↓j
.text:000000000000FCB0                 add     r13, 1
.text:000000000000FCB4                 mov     byte ptr [r13-1], 20h ; ' '
.text:000000000000FCB9                 cmp     rbx, r13
.text:000000000000FCBC                 setnbe  sil
.text:000000000000FCC0                 test    rax, rax
.text:000000000000FCC3                 setnz   dl
.text:000000000000FCC6                 sub     rax, 1
.text:000000000000FCCA                 test    sil, dl
.text:000000000000FCCD                 jnz     short loc_FCB0
.text:000000000000FCCF
.text:000000000000FCCF loc_FCCF:                               ; CODE XREF: mbsalign+B7↑j
.text:000000000000FCCF                                         ; mbsalign+BC↑j
.text:000000000000FCCF                 mov     rdx, rbx
.text:000000000000FCD2                 mov     byte ptr [r13+0], 0
.text:000000000000FCD7                 mov     rsi, r14        ; src
.text:000000000000FCDA                 sub     rdx, r13
.text:000000000000FCDD                 mov     rdi, r13        ; dest
.text:000000000000FCE0                 cmp     rdx, r15
.text:000000000000FCE3                 cmova   rdx, r15        ; n
.text:000000000000FCE7                 call    _mempcpy
.text:000000000000FCEC                 cmp     rbx, rax
.text:000000000000FCEF                 lea     rdx, [rbp-1]
.text:000000000000FCF3                 jbe     short loc_FD1E
.text:000000000000FCF5                 test    rbp, rbp
.text:000000000000FCF8                 jz      short loc_FD1E
.text:000000000000FCFA                 nop     word ptr [rax+rax+00h]
.text:000000000000FD00
.text:000000000000FD00 loc_FD00:                               ; CODE XREF: mbsalign+12C↓j
.text:000000000000FD00                 add     rax, 1
.text:000000000000FD04                 test    rdx, rdx
.text:000000000000FD07                 mov     byte ptr [rax-1], 20h ; ' '
.text:000000000000FD0B                 setnz   sil
.text:000000000000FD0F                 cmp     rbx, rax
.text:000000000000FD12                 setnbe  cl
.text:000000000000FD15                 sub     rdx, 1
.text:000000000000FD19                 test    sil, cl
.text:000000000000FD1C                 jnz     short loc_FD00
.text:000000000000FD1E
.text:000000000000FD1E loc_FD1E:                               ; CODE XREF: mbsalign+103↑j
.text:000000000000FD1E                                         ; mbsalign+108↑j
.text:000000000000FD1E                 mov     byte ptr [rax], 0
.text:000000000000FD21
.text:000000000000FD21 loc_FD21:                               ; CODE XREF: mbsalign+A5↑j
.text:000000000000FD21                                         ; mbsalign+1E2↓j ...
.text:000000000000FD21                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000FD25                 call    free
.text:000000000000FD2A                 mov     rdi, [rsp+68h+s] ; ptr
.text:000000000000FD2F                 call    free
.text:000000000000FD34                 add     rsp, 38h
.text:000000000000FD38                 mov     rax, r12
.text:000000000000FD3B                 pop     rbx
.text:000000000000FD3C                 pop     rbp
.text:000000000000FD3D                 pop     r12
.text:000000000000FD3F                 pop     r13
.text:000000000000FD41                 pop     r14
.text:000000000000FD43                 pop     r15
.text:000000000000FD45                 retn
.text:000000000000FD45 ; ---------------------------------------------------------------------------
.text:000000000000FD46                 align 10h
.text:000000000000FD50
.text:000000000000FD50 loc_FD50:                               ; CODE XREF: mbsalign+35F↓j
.text:000000000000FD50                 mov     [rsp+68h+s], 0
.text:000000000000FD59
.text:000000000000FD59 loc_FD59:                               ; CODE XREF: mbsalign+55↑j
.text:000000000000FD59                 cmp     rbp, rax
.text:000000000000FD5C                 jnb     loc_FFAA
.text:000000000000FD62                 sub     rax, rbp
.text:000000000000FD65                 mov     rdx, rax
.text:000000000000FD68                 mov     rax, rbp
.text:000000000000FD6B                 mov     [r12], rax
.text:000000000000FD6F                 mov     eax, [rsp+68h+var_4C]
.text:000000000000FD73                 test    eax, eax
.text:000000000000FD75                 jnz     loc_FC60
.text:000000000000FD7B
.text:000000000000FD7B loc_FD7B:                               ; CODE XREF: mbsalign+6A↑j
.text:000000000000FD7B                 mov     rbp, rdx
.text:000000000000FD7E                 xor     edx, edx
.text:000000000000FD80                 jmp     loc_FC73
.text:000000000000FD80 ; ---------------------------------------------------------------------------
.text:000000000000FD85                 align 8
.text:000000000000FD88
.text:000000000000FD88 loc_FD88:                               ; CODE XREF: mbsalign+94↑j
.text:000000000000FD88                 xor     ebp, ebp
.text:000000000000FD8A                 jmp     loc_FC8D
.text:000000000000FD8A ; ---------------------------------------------------------------------------
.text:000000000000FD8F                 align 10h
.text:000000000000FD90
.text:000000000000FD90 loc_FD90:                               ; CODE XREF: mbsalign+34↑j
.text:000000000000FD90                 call    ___ctype_get_mb_cur_max
.text:000000000000FD95                 cmp     rax, 1
.text:000000000000FD99                 jbe     loc_FC2A
.text:000000000000FD9F                 xor     edx, edx        ; n
.text:000000000000FDA1                 xor     edi, edi        ; pwcs
.text:000000000000FDA3                 mov     rsi, r14        ; s
.text:000000000000FDA6                 call    _mbstowcs
.text:000000000000FDAB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000FDAF                 jnz     short loc_FDE0
.text:000000000000FDB1                 test    bl, 1
.text:000000000000FDB4                 jnz     loc_FC2A
.text:000000000000FDBA
.text:000000000000FDBA loc_FDBA:                               ; CODE XREF: mbsalign+3AA↓j
.text:000000000000FDBA                 mov     [rsp+68h+ptr], 0
.text:000000000000FDC2                 mov     [rsp+68h+s], 0
.text:000000000000FDCB                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000FDD2                 jmp     loc_FD21
.text:000000000000FDD2 ; ---------------------------------------------------------------------------
.text:000000000000FDD7                 align 20h
.text:000000000000FDE0
.text:000000000000FDE0 loc_FDE0:                               ; CODE XREF: mbsalign+1BF↑j
.text:000000000000FDE0                 lea     rbp, [rax+1]
.text:000000000000FDE4                 lea     rax, ds:0[rbp*4]
.text:000000000000FDEC                 mov     rdi, rax        ; size
.text:000000000000FDEF                 mov     [rsp+68h+size], rax
.text:000000000000FDF4                 call    malloc
.text:000000000000FDF9                 test    rax, rax
.text:000000000000FDFC                 mov     [rsp+68h+ptr], rax
.text:000000000000FE00                 jz      loc_FF85
.text:000000000000FE06                 mov     rdi, [rsp+68h+ptr] ; pwcs
.text:000000000000FE0A                 mov     rdx, rbp        ; n
.text:000000000000FE0D                 mov     rsi, r14        ; s
.text:000000000000FE10                 call    _mbstowcs
.text:000000000000FE15                 test    rax, rax
.text:000000000000FE18                 jz      loc_FF24
.text:000000000000FE1E                 mov     rax, [rsp+68h+ptr]
.text:000000000000FE22                 mov     rcx, [rsp+68h+size]
.text:000000000000FE27                 mov     dword ptr [rax+rcx-4], 0
.text:000000000000FE2F                 mov     edi, [rax]      ; wc
.text:000000000000FE31                 mov     rdx, rax
.text:000000000000FE34                 test    edi, edi
.text:000000000000FE36                 jz      loc_FF35
.text:000000000000FE3C                 mov     byte ptr [rsp+68h+size], 0
.text:000000000000FE41                 nop     dword ptr [rax+00000000h]
.text:000000000000FE48
.text:000000000000FE48 loc_FE48:                               ; CODE XREF: mbsalign+27E↓j
.text:000000000000FE48                 mov     [rsp+68h+var_40], rdx
.text:000000000000FE4D                 call    _iswprint
.text:000000000000FE52                 test    eax, eax
.text:000000000000FE54                 mov     rdx, [rsp+68h+var_40]
.text:000000000000FE59                 jnz     short loc_FE66
.text:000000000000FE5B                 mov     dword ptr [rdx], 0FFFDh
.text:000000000000FE61                 mov     byte ptr [rsp+68h+size], 1
.text:000000000000FE66
.text:000000000000FE66 loc_FE66:                               ; CODE XREF: mbsalign+269↑j
.text:000000000000FE66                 add     rdx, 4
.text:000000000000FE6A                 mov     edi, [rdx]
.text:000000000000FE6C                 test    edi, edi
.text:000000000000FE6E                 jnz     short loc_FE48
.text:000000000000FE70                 mov     rdi, [rsp+68h+ptr] ; s
.text:000000000000FE74                 mov     rsi, rbp        ; n
.text:000000000000FE77                 call    _wcswidth
.text:000000000000FE7C                 cmp     byte ptr [rsp+68h+size], 0
.text:000000000000FE81                 movsxd  rbp, eax
.text:000000000000FE84                 jz      loc_FF48
.text:000000000000FE8A                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:000000000000FE8E                 xor     edx, edx        ; n
.text:000000000000FE90                 xor     edi, edi        ; s
.text:000000000000FE92                 call    _wcstombs
.text:000000000000FE97                 add     rax, 1
.text:000000000000FE9B                 mov     [rsp+68h+size], rax
.text:000000000000FEA0
.text:000000000000FEA0 loc_FEA0:                               ; CODE XREF: mbsalign+373↓j
.text:000000000000FEA0                 mov     rdi, [rsp+68h+size] ; size
.text:000000000000FEA5                 call    malloc
.text:000000000000FEAA                 test    rax, rax
.text:000000000000FEAD                 mov     [rsp+68h+s], rax
.text:000000000000FEB2                 jz      loc_FF70
.text:000000000000FEB8                 mov     r15, [rsp+68h+ptr]
.text:000000000000FEBC                 mov     r14, [r12]
.text:000000000000FEC0                 mov     edi, [r15]
.text:000000000000FEC3                 test    edi, edi
.text:000000000000FEC5                 jz      loc_FF9F
.text:000000000000FECB                 xor     ebp, ebp
.text:000000000000FECD                 jmp     short loc_FEDE
.text:000000000000FECD ; ---------------------------------------------------------------------------
.text:000000000000FECF                 align 10h
.text:000000000000FED0
.text:000000000000FED0 loc_FED0:                               ; CODE XREF: mbsalign+30D↓j
.text:000000000000FED0                 add     r15, 4
.text:000000000000FED4                 mov     edi, [r15]      ; c
.text:000000000000FED7                 mov     rbp, rdx
.text:000000000000FEDA                 test    edi, edi
.text:000000000000FEDC                 jz      short loc_FEFF
.text:000000000000FEDE
.text:000000000000FEDE loc_FEDE:                               ; CODE XREF: mbsalign+2DD↑j
.text:000000000000FEDE                 call    _wcwidth
.text:000000000000FEE3                 cmp     eax, 0FFFFFFFFh
.text:000000000000FEE6                 movsxd  rdx, eax
.text:000000000000FEE9                 jnz     short loc_FEF7
.text:000000000000FEEB                 mov     dword ptr [r15], 0FFFDh
.text:000000000000FEF2                 mov     edx, 1
.text:000000000000FEF7
.text:000000000000FEF7 loc_FEF7:                               ; CODE XREF: mbsalign+2F9↑j
.text:000000000000FEF7                 add     rdx, rbp
.text:000000000000FEFA                 cmp     r14, rdx
.text:000000000000FEFD                 jnb     short loc_FED0
.text:000000000000FEFF
.text:000000000000FEFF loc_FEFF:                               ; CODE XREF: mbsalign+2EC↑j
.text:000000000000FEFF                                         ; mbsalign+3B5↓j
.text:000000000000FEFF                 mov     r14, [rsp+68h+s]
.text:000000000000FF04                 mov     rdx, [rsp+68h+size] ; n
.text:000000000000FF09                 mov     rsi, [rsp+68h+ptr] ; pwcs
.text:000000000000FF0D                 mov     dword ptr [r15], 0
.text:000000000000FF14                 mov     rdi, r14        ; s
.text:000000000000FF17                 call    _wcstombs
.text:000000000000FF1C                 mov     r15, rax
.text:000000000000FF1F                 jmp     loc_FC3E
.text:000000000000FF24 ; ---------------------------------------------------------------------------
.text:000000000000FF24
.text:000000000000FF24 loc_FF24:                               ; CODE XREF: mbsalign+228↑j
.text:000000000000FF24                 mov     rbp, r15
.text:000000000000FF27                 mov     [rsp+68h+s], 0
.text:000000000000FF30                 jmp     loc_FC3E
.text:000000000000FF35 ; ---------------------------------------------------------------------------
.text:000000000000FF35
.text:000000000000FF35 loc_FF35:                               ; CODE XREF: mbsalign+246↑j
.text:000000000000FF35                 mov     rdi, [rsp+68h+ptr] ; s
.text:000000000000FF39                 mov     rsi, rbp        ; n
.text:000000000000FF3C                 call    _wcswidth
.text:000000000000FF41                 movsxd  rbp, eax
.text:000000000000FF44                 nop     dword ptr [rax+00h]
.text:000000000000FF48
.text:000000000000FF48 loc_FF48:                               ; CODE XREF: mbsalign+294↑j
.text:000000000000FF48                 mov     rax, [r12]
.text:000000000000FF4C                 cmp     rax, rbp
.text:000000000000FF4F                 jnb     loc_FD50
.text:000000000000FF55                 mov     rax, [rsp+68h+s]
.text:000000000000FF5A                 add     rax, 1
.text:000000000000FF5E                 mov     [rsp+68h+size], rax
.text:000000000000FF63                 jmp     loc_FEA0
.text:000000000000FF63 ; ---------------------------------------------------------------------------
.text:000000000000FF68                 align 10h
.text:000000000000FF70
.text:000000000000FF70 loc_FF70:                               ; CODE XREF: mbsalign+2C2↑j
.text:000000000000FF70                 test    bl, 1
.text:000000000000FF73                 jnz     loc_FC3E
.text:000000000000FF79                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000FF80                 jmp     loc_FD21
.text:000000000000FF85 ; ---------------------------------------------------------------------------
.text:000000000000FF85
.text:000000000000FF85 loc_FF85:                               ; CODE XREF: mbsalign+210↑j
.text:000000000000FF85                 test    bl, 1
.text:000000000000FF88                 mov     rbp, r15
.text:000000000000FF8B                 mov     [rsp+68h+s], 0
.text:000000000000FF94                 jnz     loc_FC3E
.text:000000000000FF9A                 jmp     loc_FDBA
.text:000000000000FF9F ; ---------------------------------------------------------------------------
.text:000000000000FF9F
.text:000000000000FF9F loc_FF9F:                               ; CODE XREF: mbsalign+2D5↑j
.text:000000000000FF9F                 mov     r15, [rsp+68h+ptr]
.text:000000000000FFA3                 xor     ebp, ebp
.text:000000000000FFA5                 jmp     loc_FEFF
.text:000000000000FFAA ; ---------------------------------------------------------------------------
.text:000000000000FFAA
.text:000000000000FFAA loc_FFAA:                               ; CODE XREF: mbsalign+16C↑j
.text:000000000000FFAA                 mov     rax, rbp
.text:000000000000FFAD                 xor     edx, edx
.text:000000000000FFAF                 jmp     loc_FC50
.text:000000000000FFAF ; } // starts at FBF0
.text:000000000000FFAF mbsalign        endp
.text:000000000000FFAF
.text:000000000000FFAF ; ---------------------------------------------------------------------------
.text:000000000000FFB4                 align 20h
.text:000000000000FFC0
.text:000000000000FFC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000FFC0
.text:000000000000FFC0 ; Attributes: info_from_lumina
.text:000000000000FFC0
.text:000000000000FFC0 ; char *__fastcall ambsalign(const char *src, size_t *width, mbs_align_t align, int flags)
.text:000000000000FFC0                 public ambsalign
.text:000000000000FFC0 ambsalign       proc near
.text:000000000000FFC0
.text:000000000000FFC0 var_40          = dword ptr -40h
.text:000000000000FFC0 var_3C          = dword ptr -3Ch
.text:000000000000FFC0
.text:000000000000FFC0 ; __unwind {
.text:000000000000FFC0                 push    r15
.text:000000000000FFC2                 push    r14
.text:000000000000FFC4                 mov     r15, rdi
.text:000000000000FFC7                 push    r13
.text:000000000000FFC9                 push    r12
.text:000000000000FFCB                 xor     r12d, r12d
.text:000000000000FFCE                 push    rbp
.text:000000000000FFCF                 push    rbx
.text:000000000000FFD0                 mov     rbp, rsi
.text:000000000000FFD3                 sub     rsp, 18h
.text:000000000000FFD7                 mov     r13, [rsi]
.text:000000000000FFDA                 mov     [rsp+48h+var_40], edx
.text:000000000000FFDE                 mov     [rsp+48h+var_3C], ecx
.text:000000000000FFE2                 mov     rax, r13
.text:000000000000FFE5                 nop     dword ptr [rax]
.text:000000000000FFE8
.text:000000000000FFE8 loc_FFE8:                               ; CODE XREF: ambsalign+6A↓j
.text:000000000000FFE8                 lea     rbx, [rax+1]
.text:000000000000FFEC                 mov     rdi, r12        ; ptr
.text:000000000000FFEF                 mov     rsi, rbx        ; size
.text:000000000000FFF2                 call    _realloc
.text:000000000000FFF7                 test    rax, rax
.text:000000000000FFFA                 mov     r14, rax
.text:000000000000FFFD                 jz      short loc_10040
.text:000000000000FFFF                 mov     r9d, [rsp+48h+var_3C]
.text:0000000000010004                 mov     r8d, [rsp+48h+var_40]
.text:0000000000010009                 mov     rcx, rbp
.text:000000000001000C                 mov     [rbp+0], r13
.text:0000000000010010                 mov     rdx, rbx
.text:0000000000010013                 mov     rsi, rax        ; dest
.text:0000000000010016                 mov     rdi, r15        ; s
.text:0000000000010019                 call    mbsalign
.text:000000000001001E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010022                 jz      short loc_10050
.text:0000000000010024                 cmp     rbx, rax
.text:0000000000010027                 mov     r12, r14
.text:000000000001002A                 jbe     short loc_FFE8
.text:000000000001002C
.text:000000000001002C loc_1002C:                              ; CODE XREF: ambsalign+88↓j
.text:000000000001002C                                         ; ambsalign+9B↓j
.text:000000000001002C                 add     rsp, 18h
.text:0000000000010030                 mov     rax, r14
.text:0000000000010033                 pop     rbx
.text:0000000000010034                 pop     rbp
.text:0000000000010035                 pop     r12
.text:0000000000010037                 pop     r13
.text:0000000000010039                 pop     r14
.text:000000000001003B                 pop     r15
.text:000000000001003D                 retn
.text:000000000001003D ; ---------------------------------------------------------------------------
.text:000000000001003E                 align 20h
.text:0000000000010040
.text:0000000000010040 loc_10040:                              ; CODE XREF: ambsalign+3D↑j
.text:0000000000010040                 mov     rdi, r12        ; ptr
.text:0000000000010043                 call    free
.text:0000000000010048                 jmp     short loc_1002C
.text:0000000000010048 ; ---------------------------------------------------------------------------
.text:000000000001004A                 align 10h
.text:0000000000010050
.text:0000000000010050 loc_10050:                              ; CODE XREF: ambsalign+62↑j
.text:0000000000010050                 mov     rdi, r14        ; ptr
.text:0000000000010053                 xor     r14d, r14d
.text:0000000000010056                 call    free
.text:000000000001005B                 jmp     short loc_1002C
.text:000000000001005B ; } // starts at FFC0
.text:000000000001005B ambsalign       endp
.text:000000000001005B
.text:000000000001005B ; ---------------------------------------------------------------------------
.text:000000000001005D                 align 20h
.text:0000000000010060
.text:0000000000010060 ; =============== S U B R O U T I N E =======================================
.text:0000000000010060
.text:0000000000010060 ; Attributes: info_from_lumina
.text:0000000000010060
.text:0000000000010060 ; int __fastcall mbsnwidth(const char *string, size_t nbytes, int flags)
.text:0000000000010060                 public mbsnwidth
.text:0000000000010060 mbsnwidth       proc near               ; CODE XREF: quote_name_buf+300↑p
.text:0000000000010060                                         ; print_long_format+9C3↑p ...
.text:0000000000010060
.text:0000000000010060 var_5C          = dword ptr -5Ch
.text:0000000000010060 c               = dword ptr -4Ch
.text:0000000000010060 ps              = mbstate_t ptr -48h
.text:0000000000010060 var_40          = qword ptr -40h
.text:0000000000010060
.text:0000000000010060 ; __unwind {
.text:0000000000010060                 push    r15
.text:0000000000010062                 push    r14
.text:0000000000010064                 push    r13
.text:0000000000010066                 push    r12
.text:0000000000010068                 lea     r13, [rdi+rsi]
.text:000000000001006C                 push    rbp
.text:000000000001006D                 push    rbx
.text:000000000001006E                 mov     rbx, rdi
.text:0000000000010071                 sub     rsp, 38h
.text:0000000000010075                 mov     rax, fs:28h
.text:000000000001007E                 mov     [rsp+68h+var_40], rax
.text:0000000000010083                 xor     eax, eax
.text:0000000000010085                 mov     [rsp+68h+var_5C], edx
.text:0000000000010089                 call    ___ctype_get_mb_cur_max
.text:000000000001008E                 cmp     rax, 1
.text:0000000000010092                 jbe     loc_101C8
.text:0000000000010098                 xor     ebp, ebp
.text:000000000001009A                 cmp     rbx, r13
.text:000000000001009D                 jnb     loc_1018D
.text:00000000000100A3                 lea     r12, [rsp+68h+ps]
.text:00000000000100A8                 lea     r14, [rsp+68h+c]
.text:00000000000100AD                 jmp     short loc_100CB
.text:00000000000100AD ; ---------------------------------------------------------------------------
.text:00000000000100AF                 align 10h
.text:00000000000100B0
.text:00000000000100B0 loc_100B0:                              ; CODE XREF: mbsnwidth+70↓j
.text:00000000000100B0                 cmp     al, 25h ; '%'
.text:00000000000100B2                 jge     short loc_100BB
.text:00000000000100B4                 sub     eax, 20h ; ' '
.text:00000000000100B7                 cmp     al, 3
.text:00000000000100B9                 ja      short loc_100E1
.text:00000000000100BB
.text:00000000000100BB loc_100BB:                              ; CODE XREF: mbsnwidth+52↑j
.text:00000000000100BB                                         ; mbsnwidth+78↓j ...
.text:00000000000100BB                 add     rbx, 1
.text:00000000000100BF                 add     ebp, 1
.text:00000000000100C2
.text:00000000000100C2 loc_100C2:                              ; CODE XREF: mbsnwidth+AE↓j
.text:00000000000100C2                                         ; mbsnwidth+15D↓j
.text:00000000000100C2                 cmp     rbx, r13
.text:00000000000100C5                 jnb     loc_1018D
.text:00000000000100CB
.text:00000000000100CB loc_100CB:                              ; CODE XREF: mbsnwidth+4D↑j
.text:00000000000100CB                 movzx   eax, byte ptr [rbx]
.text:00000000000100CE                 cmp     al, 3Fh ; '?'
.text:00000000000100D0                 jle     short loc_100B0
.text:00000000000100D2                 cmp     al, 41h ; 'A'
.text:00000000000100D4                 jl      short loc_100E1
.text:00000000000100D6                 cmp     al, 5Fh ; '_'
.text:00000000000100D8                 jle     short loc_100BB
.text:00000000000100DA                 sub     eax, 61h ; 'a'
.text:00000000000100DD                 cmp     al, 1Dh
.text:00000000000100DF                 jbe     short loc_100BB
.text:00000000000100E1
.text:00000000000100E1 loc_100E1:                              ; CODE XREF: mbsnwidth+59↑j
.text:00000000000100E1                                         ; mbsnwidth+74↑j
.text:00000000000100E1                 mov     qword ptr [r12], 0
.text:00000000000100E9                 jmp     short loc_10110
.text:00000000000100E9 ; ---------------------------------------------------------------------------
.text:00000000000100EB                 align 10h
.text:00000000000100F0
.text:00000000000100F0 loc_100F0:                              ; CODE XREF: mbsnwidth+EA↓j
.text:00000000000100F0                 mov     ecx, 7FFFFFFFh
.text:00000000000100F5                 sub     ecx, ebp
.text:00000000000100F7                 cmp     ecx, eax
.text:00000000000100F9                 jl      loc_10210
.text:00000000000100FF                 add     ebp, eax
.text:0000000000010101
.text:0000000000010101 loc_10101:                              ; CODE XREF: mbsnwidth+FE↓j
.text:0000000000010101                                         ; mbsnwidth+10F↓j
.text:0000000000010101                 mov     rdi, r12        ; ps
.text:0000000000010104                 add     rbx, r15
.text:0000000000010107                 call    _mbsinit
.text:000000000001010C                 test    eax, eax
.text:000000000001010E                 jnz     short loc_100C2
.text:0000000000010110
.text:0000000000010110 loc_10110:                              ; CODE XREF: mbsnwidth+89↑j
.text:0000000000010110                 mov     rdx, r13
.text:0000000000010113                 mov     rcx, r12
.text:0000000000010116                 mov     rsi, rbx
.text:0000000000010119                 sub     rdx, rbx
.text:000000000001011C                 mov     rdi, r14
.text:000000000001011F                 call    rpl_mbrtowc
.text:0000000000010124                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000010128                 mov     r15, rax
.text:000000000001012B                 jz      short loc_10178
.text:000000000001012D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000010131                 jz      short loc_101B0
.text:0000000000010133                 mov     edi, [rsp+68h+c] ; c
.text:0000000000010137                 test    rax, rax
.text:000000000001013A                 mov     eax, 1
.text:000000000001013F                 cmovz   r15, rax
.text:0000000000010143                 call    _wcwidth
.text:0000000000010148                 test    eax, eax
.text:000000000001014A                 jns     short loc_100F0
.text:000000000001014C                 test    byte ptr [rsp+68h+var_5C], 2
.text:0000000000010151                 jnz     short loc_10188
.text:0000000000010153                 mov     edi, [rsp+68h+c] ; wc
.text:0000000000010157                 call    _iswcntrl
.text:000000000001015C                 test    eax, eax
.text:000000000001015E                 jnz     short loc_10101
.text:0000000000010160                 cmp     ebp, 7FFFFFFFh
.text:0000000000010166                 jz      loc_10210
.text:000000000001016C                 add     ebp, 1
.text:000000000001016F                 jmp     short loc_10101
.text:000000000001016F ; ---------------------------------------------------------------------------
.text:0000000000010171                 align 8
.text:0000000000010178
.text:0000000000010178 loc_10178:                              ; CODE XREF: mbsnwidth+CB↑j
.text:0000000000010178                 test    byte ptr [rsp+68h+var_5C], 1
.text:000000000001017D                 jz      loc_100BB
.text:0000000000010183                 nop     dword ptr [rax+rax+00h]
.text:0000000000010188
.text:0000000000010188 loc_10188:                              ; CODE XREF: mbsnwidth+F1↑j
.text:0000000000010188                                         ; mbsnwidth+155↓j ...
.text:0000000000010188                 mov     ebp, 0FFFFFFFFh
.text:000000000001018D
.text:000000000001018D loc_1018D:                              ; CODE XREF: mbsnwidth+3D↑j
.text:000000000001018D                                         ; mbsnwidth+65↑j ...
.text:000000000001018D                 mov     rsi, [rsp+68h+var_40]
.text:0000000000010192                 xor     rsi, fs:28h
.text:000000000001019B                 mov     eax, ebp
.text:000000000001019D                 jnz     short loc_1021A
.text:000000000001019F                 add     rsp, 38h
.text:00000000000101A3                 pop     rbx
.text:00000000000101A4                 pop     rbp
.text:00000000000101A5                 pop     r12
.text:00000000000101A7                 pop     r13
.text:00000000000101A9                 pop     r14
.text:00000000000101AB                 pop     r15
.text:00000000000101AD                 retn
.text:00000000000101AD ; ---------------------------------------------------------------------------
.text:00000000000101AE                 align 10h
.text:00000000000101B0
.text:00000000000101B0 loc_101B0:                              ; CODE XREF: mbsnwidth+D1↑j
.text:00000000000101B0                 test    byte ptr [rsp+68h+var_5C], 1
.text:00000000000101B5                 jnz     short loc_10188
.text:00000000000101B7                 add     ebp, 1
.text:00000000000101BA                 mov     rbx, r13
.text:00000000000101BD                 jmp     loc_100C2
.text:00000000000101BD ; ---------------------------------------------------------------------------
.text:00000000000101C2                 align 8
.text:00000000000101C8
.text:00000000000101C8 loc_101C8:                              ; CODE XREF: mbsnwidth+32↑j
.text:00000000000101C8                 xor     ebp, ebp
.text:00000000000101CA                 cmp     rbx, r13
.text:00000000000101CD                 jnb     short loc_1018D
.text:00000000000101CF                 call    ___ctype_b_loc
.text:00000000000101D4                 mov     edx, [rsp+68h+var_5C]
.text:00000000000101D8                 mov     rcx, [rax]
.text:00000000000101DB                 xor     ebp, ebp
.text:00000000000101DD                 and     edx, 2
.text:00000000000101E0
.text:00000000000101E0 loc_101E0:                              ; CODE XREF: mbsnwidth+1A7↓j
.text:00000000000101E0                 add     rbx, 1
.text:00000000000101E4                 movzx   eax, byte ptr [rbx-1]
.text:00000000000101E8                 movzx   eax, word ptr [rcx+rax*2]
.text:00000000000101EC                 test    ah, 40h
.text:00000000000101EF                 jnz     short loc_101F9
.text:00000000000101F1                 test    edx, edx
.text:00000000000101F3                 jnz     short loc_10188
.text:00000000000101F5                 test    al, 2
.text:00000000000101F7                 jnz     short loc_10204
.text:00000000000101F9
.text:00000000000101F9 loc_101F9:                              ; CODE XREF: mbsnwidth+18F↑j
.text:00000000000101F9                 cmp     ebp, 7FFFFFFFh
.text:00000000000101FF                 jz      short loc_1018D
.text:0000000000010201                 add     ebp, 1
.text:0000000000010204
.text:0000000000010204 loc_10204:                              ; CODE XREF: mbsnwidth+197↑j
.text:0000000000010204                 cmp     r13, rbx
.text:0000000000010207                 jnz     short loc_101E0
.text:0000000000010209                 jmp     short loc_1018D
.text:0000000000010209 ; ---------------------------------------------------------------------------
.text:000000000001020B                 align 10h
.text:0000000000010210
.text:0000000000010210 loc_10210:                              ; CODE XREF: mbsnwidth+99↑j
.text:0000000000010210                                         ; mbsnwidth+106↑j
.text:0000000000010210                 mov     ebp, 7FFFFFFFh
.text:0000000000010215                 jmp     loc_1018D
.text:000000000001021A ; ---------------------------------------------------------------------------
.text:000000000001021A
.text:000000000001021A loc_1021A:                              ; CODE XREF: mbsnwidth+13D↑j
.text:000000000001021A                 call    ___stack_chk_fail
.text:000000000001021A ; } // starts at 10060
.text:000000000001021A mbsnwidth       endp
.text:000000000001021A
.text:000000000001021A ; ---------------------------------------------------------------------------
.text:000000000001021F                 align 20h
.text:0000000000010220
.text:0000000000010220 ; =============== S U B R O U T I N E =======================================
.text:0000000000010220
.text:0000000000010220 ; Attributes: info_from_lumina
.text:0000000000010220
.text:0000000000010220 ; int __fastcall gnu_mbswidth(const char *string, int flags)
.text:0000000000010220                 public gnu_mbswidth
.text:0000000000010220 gnu_mbswidth    proc near               ; CODE XREF: format_user_or_group+16↑p
.text:0000000000010220                                         ; print_long_format+147↑p ...
.text:0000000000010220 ; __unwind {
.text:0000000000010220                 push    rbp
.text:0000000000010221                 push    rbx
.text:0000000000010222                 mov     ebp, esi
.text:0000000000010224                 mov     rbx, rdi
.text:0000000000010227                 sub     rsp, 8
.text:000000000001022B                 call    _strlen
.text:0000000000010230                 add     rsp, 8
.text:0000000000010234                 mov     edx, ebp
.text:0000000000010236                 mov     rdi, rbx
.text:0000000000010239                 pop     rbx
.text:000000000001023A                 pop     rbp
.text:000000000001023B                 mov     rsi, rax
.text:000000000001023E                 jmp     mbsnwidth
.text:000000000001023E ; } // starts at 10220
.text:000000000001023E gnu_mbswidth    endp
.text:000000000001023E
.text:000000000001023E ; ---------------------------------------------------------------------------
.text:0000000000010243                 align 10h
.text:0000000000010250
.text:0000000000010250 ; =============== S U B R O U T I N E =======================================
.text:0000000000010250
.text:0000000000010250 ; Attributes: info_from_lumina
.text:0000000000010250
.text:0000000000010250 ; void __fastcall mpsort_with_tmp(const void **base, size_t n, const void **tmp, comparison_function cmp)
.text:0000000000010250 mpsort_with_tmp proc near               ; CODE XREF: mpsort_with_tmp+7C↓p
.text:0000000000010250                                         ; mpsort_with_tmp+17B↓p ...
.text:0000000000010250
.text:0000000000010250 var_68          = qword ptr -68h
.text:0000000000010250 var_60          = qword ptr -60h
.text:0000000000010250 var_58          = qword ptr -58h
.text:0000000000010250 var_50          = qword ptr -50h
.text:0000000000010250 var_48          = qword ptr -48h
.text:0000000000010250 var_40          = qword ptr -40h
.text:0000000000010250
.text:0000000000010250 ; __unwind {
.text:0000000000010250                 push    r15
.text:0000000000010252                 push    r14
.text:0000000000010254                 push    r13
.text:0000000000010256                 push    r12
.text:0000000000010258                 mov     r13, rdi
.text:000000000001025B                 push    rbp
.text:000000000001025C                 push    rbx
.text:000000000001025D                 mov     rbx, rcx
.text:0000000000010260                 sub     rsp, 38h
.text:0000000000010264                 cmp     rsi, 2
.text:0000000000010268                 mov     [rsp+68h+var_68], rsi
.text:000000000001026C                 mov     [rsp+68h+var_58], rdx
.text:0000000000010271                 ja      short loc_102A0
.text:0000000000010273                 jnz     short loc_10290
.text:0000000000010275                 mov     r12, [rdi+8]
.text:0000000000010279                 mov     rbp, [rdi]
.text:000000000001027C                 mov     rsi, r12
.text:000000000001027F                 mov     rdi, rbp
.text:0000000000010282                 call    rcx
.text:0000000000010284                 test    eax, eax
.text:0000000000010286                 jle     short loc_10290
.text:0000000000010288                 mov     [r13+0], r12
.text:000000000001028C                 mov     [r13+8], rbp
.text:0000000000010290
.text:0000000000010290 loc_10290:                              ; CODE XREF: mpsort_with_tmp+23↑j
.text:0000000000010290                                         ; mpsort_with_tmp+36↑j ...
.text:0000000000010290                 add     rsp, 38h
.text:0000000000010294                 pop     rbx
.text:0000000000010295                 pop     rbp
.text:0000000000010296                 pop     r12
.text:0000000000010298                 pop     r13
.text:000000000001029A                 pop     r14
.text:000000000001029C                 pop     r15
.text:000000000001029E                 retn
.text:000000000001029E ; ---------------------------------------------------------------------------
.text:000000000001029F                 align 20h
.text:00000000000102A0
.text:00000000000102A0 loc_102A0:                              ; CODE XREF: mpsort_with_tmp+21↑j
.text:00000000000102A0                 mov     rax, [rsp+68h+var_68]
.text:00000000000102A4                 mov     r15, [rsp+68h+var_58]
.text:00000000000102A9                 mov     rcx, rax
.text:00000000000102AC                 mov     rsi, rax
.text:00000000000102AF                 mov     rdx, r15
.text:00000000000102B2                 shr     rcx, 1
.text:00000000000102B5                 lea     rdi, [rdi+rcx*8]
.text:00000000000102B9                 sub     rsi, rcx
.text:00000000000102BC                 mov     r14, rcx
.text:00000000000102BF                 mov     [rsp+68h+var_50], rcx
.text:00000000000102C4                 mov     rcx, rbx
.text:00000000000102C7                 mov     [rsp+68h+var_40], rdi
.text:00000000000102CC                 call    mpsort_with_tmp
.text:00000000000102D1                 cmp     r14, 1
.text:00000000000102D5                 jnz     loc_103A0
.text:00000000000102DB                 mov     r14, [r13+0]
.text:00000000000102DF                 mov     [r15], r14
.text:00000000000102E2
.text:00000000000102E2 loc_102E2:                              ; CODE XREF: mpsort_with_tmp+235↓j
.text:00000000000102E2                 mov     rax, [rsp+68h+var_40]
.text:00000000000102E7                 mov     r15, [rsp+68h+var_50]
.text:00000000000102EC                 xor     r12d, r12d
.text:00000000000102EF                 mov     [rsp+68h+var_60], 0
.text:00000000000102F8                 mov     rbp, [rax]
.text:00000000000102FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000010300
.text:0000000000010300 loc_10300:                              ; CODE XREF: mpsort_with_tmp+108↓j
.text:0000000000010300                 mov     rsi, rbp
.text:0000000000010303                 mov     rdi, r14
.text:0000000000010306                 add     r12, 1
.text:000000000001030A                 call    rbx
.text:000000000001030C                 test    eax, eax
.text:000000000001030E                 jle     short loc_10334
.text:0000000000010310
.text:0000000000010310 loc_10310:                              ; CODE XREF: mpsort_with_tmp+E2↓j
.text:0000000000010310                 add     r15, 1
.text:0000000000010314                 cmp     [rsp+68h+var_68], r15
.text:0000000000010318                 mov     [r13+r12*8-8], rbp
.text:000000000001031D                 jz      short loc_10360
.text:000000000001031F                 mov     rbp, [r13+r15*8+0]
.text:0000000000010324                 mov     rdi, r14
.text:0000000000010327                 add     r12, 1
.text:000000000001032B                 mov     rsi, rbp
.text:000000000001032E                 call    rbx
.text:0000000000010330                 test    eax, eax
.text:0000000000010332                 jg      short loc_10310
.text:0000000000010334
.text:0000000000010334 loc_10334:                              ; CODE XREF: mpsort_with_tmp+BE↑j
.text:0000000000010334                 add     [rsp+68h+var_60], 1
.text:000000000001033A                 mov     [r13+r12*8-8], r14
.text:000000000001033F                 mov     rax, [rsp+68h+var_60]
.text:0000000000010344                 cmp     [rsp+68h+var_50], rax
.text:0000000000010349                 jz      loc_10290
.text:000000000001034F                 mov     rdx, [rsp+68h+var_58]
.text:0000000000010354                 mov     r14, [rdx+rax*8]
.text:0000000000010358                 jmp     short loc_10300
.text:0000000000010358 ; ---------------------------------------------------------------------------
.text:000000000001035A                 align 20h
.text:0000000000010360
.text:0000000000010360 loc_10360:                              ; CODE XREF: mpsort_with_tmp+CD↑j
.text:0000000000010360                 mov     rax, [rsp+68h+var_60]
.text:0000000000010365                 lea     rdi, [r13+r12*8+0] ; dest
.text:000000000001036A                 mov     r12, [rsp+68h+var_50]
.text:000000000001036F                 mov     rcx, [rsp+68h+var_58]
.text:0000000000010374                 add     rsp, 38h
.text:0000000000010378                 pop     rbx
.text:0000000000010379                 sub     r12, rax
.text:000000000001037C                 pop     rbp
.text:000000000001037D                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000010385                 lea     rsi, [rcx+rax*8] ; src
.text:0000000000010389                 pop     r12
.text:000000000001038B                 pop     r13
.text:000000000001038D                 pop     r14
.text:000000000001038F                 pop     r15
.text:0000000000010391                 jmp     _memcpy
.text:0000000000010391 ; ---------------------------------------------------------------------------
.text:0000000000010396                 align 20h
.text:00000000000103A0
.text:00000000000103A0 loc_103A0:                              ; CODE XREF: mpsort_with_tmp+85↑j
.text:00000000000103A0                 mov     r14, [rsp+68h+var_68]
.text:00000000000103A4                 mov     r12, [rsp+68h+var_58]
.text:00000000000103A9                 mov     rcx, rbx
.text:00000000000103AC                 mov     rsi, [rsp+68h+var_50]
.text:00000000000103B1                 shr     r14, 2
.text:00000000000103B5                 mov     rdx, r12
.text:00000000000103B8                 lea     r15, [r13+r14*8+0]
.text:00000000000103BD                 sub     rsi, r14
.text:00000000000103C0                 mov     [rsp+68h+var_48], r14
.text:00000000000103C5                 mov     rbp, r14
.text:00000000000103C8                 mov     rdi, r15
.text:00000000000103CB                 call    mpsort_with_tmp
.text:00000000000103D0                 mov     rsi, r14
.text:00000000000103D3                 mov     rcx, rbx
.text:00000000000103D6                 mov     rdx, r12
.text:00000000000103D9                 mov     rdi, r13
.text:00000000000103DC                 call    mpsort_with_tmp
.text:00000000000103E1                 mov     r14, [r13+0]
.text:00000000000103E5                 mov     r15, [r15]
.text:00000000000103E8                 mov     [rsp+68h+var_60], 0
.text:00000000000103F1                 nop     dword ptr [rax+00000000h]
.text:00000000000103F8
.text:00000000000103F8 loc_103F8:                              ; CODE XREF: mpsort_with_tmp+1F9↓j
.text:00000000000103F8                 mov     rsi, r15
.text:00000000000103FB                 mov     rdi, r14
.text:00000000000103FE                 add     r12, 8
.text:0000000000010402                 call    rbx
.text:0000000000010404                 test    eax, eax
.text:0000000000010406                 jle     short loc_1042D
.text:0000000000010408
.text:0000000000010408 loc_10408:                              ; CODE XREF: mpsort_with_tmp+1DB↓j
.text:0000000000010408                 add     rbp, 1
.text:000000000001040C                 cmp     [rsp+68h+var_50], rbp
.text:0000000000010411                 mov     [r12-8], r15
.text:0000000000010416                 jz      short loc_1045F
.text:0000000000010418                 mov     r15, [r13+rbp*8+0]
.text:000000000001041D                 mov     rdi, r14
.text:0000000000010420                 add     r12, 8
.text:0000000000010424                 mov     rsi, r15
.text:0000000000010427                 call    rbx
.text:0000000000010429                 test    eax, eax
.text:000000000001042B                 jg      short loc_10408
.text:000000000001042D
.text:000000000001042D loc_1042D:                              ; CODE XREF: mpsort_with_tmp+1B6↑j
.text:000000000001042D                 add     [rsp+68h+var_60], 1
.text:0000000000010433                 mov     [r12-8], r14
.text:0000000000010438                 mov     rax, [rsp+68h+var_60]
.text:000000000001043D                 cmp     [rsp+68h+var_48], rax
.text:0000000000010442                 jz      short loc_10450
.text:0000000000010444                 mov     r14, [r13+rax*8+0]
.text:0000000000010449                 jmp     short loc_103F8
.text:0000000000010449 ; ---------------------------------------------------------------------------
.text:000000000001044B                 align 10h
.text:0000000000010450
.text:0000000000010450 loc_10450:                              ; CODE XREF: mpsort_with_tmp+1F2↑j
.text:0000000000010450                 mov     rax, [rsp+68h+var_50]
.text:0000000000010455                 mov     [rsp+68h+var_60], rbp
.text:000000000001045A                 mov     [rsp+68h+var_48], rax
.text:000000000001045F
.text:000000000001045F loc_1045F:                              ; CODE XREF: mpsort_with_tmp+1C6↑j
.text:000000000001045F                 mov     rax, [rsp+68h+var_60]
.text:0000000000010464                 mov     rdx, [rsp+68h+var_48]
.text:0000000000010469                 mov     rdi, r12        ; dest
.text:000000000001046C                 sub     rdx, rax
.text:000000000001046F                 lea     rsi, [r13+rax*8+0] ; src
.text:0000000000010474                 shl     rdx, 3          ; n
.text:0000000000010478                 call    _memcpy
.text:000000000001047D                 mov     rax, [rsp+68h+var_58]
.text:0000000000010482                 mov     r14, [rax]
.text:0000000000010485                 jmp     loc_102E2
.text:0000000000010485 ; } // starts at 10250
.text:0000000000010485 mpsort_with_tmp endp
.text:0000000000010485
.text:0000000000010485 ; ---------------------------------------------------------------------------
.text:000000000001048A                 align 10h
.text:0000000000010490
.text:0000000000010490 ; =============== S U B R O U T I N E =======================================
.text:0000000000010490
.text:0000000000010490
.text:0000000000010490                 public mpsort
.text:0000000000010490 mpsort          proc near               ; CODE XREF: sort_files+107↑p
.text:0000000000010490 ; __unwind {
.text:0000000000010490                 lea     rax, [rdi+rsi*8]
.text:0000000000010494                 mov     rcx, rdx
.text:0000000000010497                 mov     rdx, rax
.text:000000000001049A                 jmp     mpsort_with_tmp
.text:000000000001049A ; } // starts at 10490
.text:000000000001049A mpsort          endp
.text:000000000001049A
.text:000000000001049A ; ---------------------------------------------------------------------------
.text:000000000001049F                 align 20h
.text:00000000000104A0
.text:00000000000104A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000104A0
.text:00000000000104A0 ; Attributes: info_from_lumina
.text:00000000000104A0
.text:00000000000104A0 ; char *__fastcall memcpy_lowcase(char *dest, const char *src, size_t len)
.text:00000000000104A0 memcpy_lowcase  proc near               ; CODE XREF: __strftime_internal+1500↓p
.text:00000000000104A0                                         ; __strftime_internal+1977↓p
.text:00000000000104A0 ; __unwind {
.text:00000000000104A0                 test    rdx, rdx
.text:00000000000104A3                 push    r12
.text:00000000000104A5                 push    rbp
.text:00000000000104A6                 mov     rbp, rdi
.text:00000000000104A9                 push    rbx
.text:00000000000104AA                 jz      short loc_104D9
.text:00000000000104AC                 mov     r12, rsi
.text:00000000000104AF                 lea     rbx, [rdx-1]
.text:00000000000104B3                 call    ___ctype_tolower_loc
.text:00000000000104B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000104C0
.text:00000000000104C0 loc_104C0:                              ; CODE XREF: memcpy_lowcase+37↓j
.text:00000000000104C0                 movzx   ecx, byte ptr [r12+rbx]
.text:00000000000104C5                 mov     rdx, [rax]
.text:00000000000104C8                 mov     edx, [rdx+rcx*4]
.text:00000000000104CB                 mov     [rbp+rbx+0], dl
.text:00000000000104CF                 sub     rbx, 1
.text:00000000000104D3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000104D7                 jnz     short loc_104C0
.text:00000000000104D9
.text:00000000000104D9 loc_104D9:                              ; CODE XREF: memcpy_lowcase+A↑j
.text:00000000000104D9                 mov     rax, rbp
.text:00000000000104DC                 pop     rbx
.text:00000000000104DD                 pop     rbp
.text:00000000000104DE                 pop     r12
.text:00000000000104E0                 retn
.text:00000000000104E0 ; } // starts at 104A0
.text:00000000000104E0 memcpy_lowcase  endp
.text:00000000000104E0
.text:00000000000104E0 ; ---------------------------------------------------------------------------
.text:00000000000104E1                 align 10h
.text:00000000000104F0
.text:00000000000104F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000104F0
.text:00000000000104F0 ; Attributes: info_from_lumina
.text:00000000000104F0
.text:00000000000104F0 ; char *__fastcall memcpy_lowcase_0(char *dest, const char *src, size_t len)
.text:00000000000104F0 memcpy_lowcase_0 proc near              ; CODE XREF: __strftime_internal+313↓p
.text:00000000000104F0                                         ; __strftime_internal:loc_10A31↓p ...
.text:00000000000104F0 ; __unwind {
.text:00000000000104F0                 test    rdx, rdx
.text:00000000000104F3                 push    r12
.text:00000000000104F5                 push    rbp
.text:00000000000104F6                 mov     rbp, rdi
.text:00000000000104F9                 push    rbx
.text:00000000000104FA                 jz      short loc_10529
.text:00000000000104FC                 mov     r12, rsi
.text:00000000000104FF                 lea     rbx, [rdx-1]
.text:0000000000010503                 call    ___ctype_toupper_loc
.text:0000000000010508                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000010510
.text:0000000000010510 loc_10510:                              ; CODE XREF: memcpy_lowcase_0+37↓j
.text:0000000000010510                 movzx   ecx, byte ptr [r12+rbx]
.text:0000000000010515                 mov     rdx, [rax]
.text:0000000000010518                 mov     edx, [rdx+rcx*4]
.text:000000000001051B                 mov     [rbp+rbx+0], dl
.text:000000000001051F                 sub     rbx, 1
.text:0000000000010523                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010527                 jnz     short loc_10510
.text:0000000000010529
.text:0000000000010529 loc_10529:                              ; CODE XREF: memcpy_lowcase_0+A↑j
.text:0000000000010529                 mov     rax, rbp
.text:000000000001052C                 pop     rbx
.text:000000000001052D                 pop     rbp
.text:000000000001052E                 pop     r12
.text:0000000000010530                 retn
.text:0000000000010530 ; } // starts at 104F0
.text:0000000000010530 memcpy_lowcase_0 endp
.text:0000000000010530
.text:0000000000010530 ; ---------------------------------------------------------------------------
.text:0000000000010531                 align 20h
.text:0000000000010540
.text:0000000000010540 ; =============== S U B R O U T I N E =======================================
.text:0000000000010540
.text:0000000000010540
.text:0000000000010540 ; __int64 __usercall _strftime_internal@<rax>(void *s@<rdi>, int, __int64, __int64, int)
.text:0000000000010540 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6AB↓p
.text:0000000000010540                                         ; __strftime_internal+768↓p ...
.text:0000000000010540
.text:0000000000010540 var_4F0         = qword ptr -4F0h
.text:0000000000010540 var_4E8         = qword ptr -4E8h
.text:0000000000010540 var_4E0         = qword ptr -4E0h
.text:0000000000010540 var_4D8         = qword ptr -4D8h
.text:0000000000010540 var_4CD         = byte ptr -4CDh
.text:0000000000010540 var_4CC         = dword ptr -4CCh
.text:0000000000010540 var_4C8         = qword ptr -4C8h
.text:0000000000010540 var_4C0         = dword ptr -4C0h
.text:0000000000010540 var_4B8         = qword ptr -4B8h
.text:0000000000010540 var_4B0         = qword ptr -4B0h
.text:0000000000010540 var_4A8         = qword ptr -4A8h
.text:0000000000010540 var_4A0         = qword ptr -4A0h
.text:0000000000010540 var_498         = qword ptr -498h
.text:0000000000010540 var_490         = dword ptr -490h
.text:0000000000010540 var_48C         = dword ptr -48Ch
.text:0000000000010540 var_488         = xmmword ptr -488h
.text:0000000000010540 var_478         = xmmword ptr -478h
.text:0000000000010540 var_468         = xmmword ptr -468h
.text:0000000000010540 var_458         = qword ptr -458h
.text:0000000000010540 format          = byte ptr -44Dh
.text:0000000000010540 var_44B         = byte ptr -44Bh
.text:0000000000010540 s               = byte ptr -448h
.text:0000000000010540 var_40          = qword ptr -40h
.text:0000000000010540 arg_0           = dword ptr  8
.text:0000000000010540 arg_8           = qword ptr  10h
.text:0000000000010540 arg_10          = qword ptr  18h
.text:0000000000010540 arg_18          = dword ptr  20h
.text:0000000000010540
.text:0000000000010540 ; __unwind {
.text:0000000000010540                 push    r15
.text:0000000000010542                 push    r14
.text:0000000000010544                 mov     r11, rdx
.text:0000000000010547                 push    r13
.text:0000000000010549                 push    r12
.text:000000000001054B                 mov     r13, rcx
.text:000000000001054E                 push    rbp
.text:000000000001054F                 push    rbx
.text:0000000000010550                 mov     rbp, rdi
.text:0000000000010553                 sub     rsp, 4C8h
.text:000000000001055A                 mov     rdi, [rcx+30h]
.text:000000000001055E                 mov     r15d, [rcx+8]
.text:0000000000010562                 mov     rax, [rsp+4F8h+arg_8]
.text:000000000001056A                 mov     [rsp+4F8h+var_4F0], rsi
.text:000000000001056F                 mov     [rsp+4F8h+var_4CC], r9d
.text:0000000000010574                 movsxd  r10, [rsp+4F8h+arg_0]
.text:000000000001057C                 mov     [rsp+4F8h+var_4CD], r8b
.text:0000000000010581                 mov     [rsp+4F8h+var_4E0], rax
.text:0000000000010586                 mov     rax, [rsp+4F8h+arg_10]
.text:000000000001058E                 mov     [rsp+4F8h+var_4E8], rax
.text:0000000000010593                 mov     rax, fs:28h
.text:000000000001059C                 mov     [rsp+4F8h+var_40], rax
.text:00000000000105A4                 xor     eax, eax
.text:00000000000105A6                 lea     rax, a8+6       ; ""
.text:00000000000105AD                 test    rdi, rdi
.text:00000000000105B0                 cmovnz  rax, rdi
.text:00000000000105B4                 cmp     r15d, 0Ch
.text:00000000000105B8                 mov     [rsp+4F8h+var_4D8], rax
.text:00000000000105BD                 jle     loc_106B0
.text:00000000000105C3                 sub     r15d, 0Ch
.text:00000000000105C7
.text:00000000000105C7 loc_105C7:                              ; CODE XREF: __strftime_internal+17C↓j
.text:00000000000105C7                 movzx   eax, byte ptr [r11]
.text:00000000000105CB                 xor     r14d, r14d
.text:00000000000105CE                 test    al, al
.text:00000000000105D0                 jz      loc_1068C
.text:00000000000105D6                 mov     [rsp+4F8h+var_490], r15d
.text:00000000000105DB                 mov     rbx, r11
.text:00000000000105DE
.text:00000000000105DE loc_105DE:                              ; CODE XREF: __strftime_internal+146↓j
.text:00000000000105DE                 cmp     al, 25h ; '%'
.text:00000000000105E0                 jz      loc_106C8
.text:00000000000105E6                 test    r10d, r10d
.text:00000000000105E9                 mov     r12d, 0
.text:00000000000105EF                 mov     eax, 1
.text:00000000000105F4                 cmovns  r12, r10
.text:00000000000105F8                 test    r12, r12
.text:00000000000105FB                 cmovz   r12, rax
.text:00000000000105FF                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000010604                 sub     rax, r14
.text:0000000000010607                 cmp     rax, r12
.text:000000000001060A                 ja      short loc_10640
.text:000000000001060C
.text:000000000001060C loc_1060C:                              ; CODE XREF: __strftime_internal+294↓j
.text:000000000001060C                                         ; __strftime_internal+450↓j ...
.text:000000000001060C                 xor     r14d, r14d
.text:000000000001060F
.text:000000000001060F loc_1060F:                              ; CODE XREF: __strftime_internal+14F↓j
.text:000000000001060F                                         ; __strftime_internal+15B↓j ...
.text:000000000001060F                 mov     rbx, [rsp+4F8h+var_40]
.text:0000000000010617                 xor     rbx, fs:28h
.text:0000000000010620                 mov     rax, r14
.text:0000000000010623                 jnz     loc_11FD5
.text:0000000000010629                 add     rsp, 4C8h
.text:0000000000010630                 pop     rbx
.text:0000000000010631                 pop     rbp
.text:0000000000010632                 pop     r12
.text:0000000000010634                 pop     r13
.text:0000000000010636                 pop     r14
.text:0000000000010638                 pop     r15
.text:000000000001063A                 retn
.text:000000000001063A ; ---------------------------------------------------------------------------
.text:000000000001063B                 align 20h
.text:0000000000010640
.text:0000000000010640 loc_10640:                              ; CODE XREF: __strftime_internal+CA↑j
.text:0000000000010640                 test    rbp, rbp
.text:0000000000010643                 jz      short loc_1066C
.text:0000000000010645                 cmp     r10d, 1
.text:0000000000010649                 jle     short loc_10662
.text:000000000001064B                 lea     r15, [r10-1]
.text:000000000001064F                 mov     rdi, rbp        ; s
.text:0000000000010652                 mov     esi, 20h ; ' '  ; c
.text:0000000000010657                 mov     rdx, r15        ; n
.text:000000000001065A                 add     rbp, r15
.text:000000000001065D                 call    _memset
.text:0000000000010662
.text:0000000000010662 loc_10662:                              ; CODE XREF: __strftime_internal+109↑j
.text:0000000000010662                 movzx   eax, byte ptr [rbx]
.text:0000000000010665                 add     rbp, 1
.text:0000000000010669                 mov     [rbp-1], al
.text:000000000001066C
.text:000000000001066C loc_1066C:                              ; CODE XREF: __strftime_internal+103↑j
.text:000000000001066C                                         ; __strftime_internal+6EB↓j ...
.text:000000000001066C                 add     r14, r12
.text:000000000001066F                 mov     r12, rbx
.text:0000000000010672
.text:0000000000010672 loc_10672:                              ; CODE XREF: __strftime_internal+328↓j
.text:0000000000010672                                         ; __strftime_internal+420↓j ...
.text:0000000000010672                 movzx   eax, byte ptr [r12+1]
.text:0000000000010678                 lea     rbx, [r12+1]
.text:000000000001067D                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000010684                 test    al, al
.text:0000000000010686                 jnz     loc_105DE
.text:000000000001068C
.text:000000000001068C loc_1068C:                              ; CODE XREF: __strftime_internal+90↑j
.text:000000000001068C                 test    rbp, rbp
.text:000000000001068F                 jz      loc_1060F
.text:0000000000010695                 cmp     [rsp+4F8h+var_4F0], 0
.text:000000000001069B                 jz      loc_1060F
.text:00000000000106A1                 mov     byte ptr [rbp+0], 0
.text:00000000000106A5                 jmp     loc_1060F
.text:00000000000106A5 ; ---------------------------------------------------------------------------
.text:00000000000106AA                 align 10h
.text:00000000000106B0
.text:00000000000106B0 loc_106B0:                              ; CODE XREF: __strftime_internal+7D↑j
.text:00000000000106B0                 test    r15d, r15d
.text:00000000000106B3                 mov     eax, 0Ch
.text:00000000000106B8                 cmovz   r15d, eax
.text:00000000000106BC                 jmp     loc_105C7
.text:00000000000106BC ; ---------------------------------------------------------------------------
.text:00000000000106C1                 align 8
.text:00000000000106C8
.text:00000000000106C8 loc_106C8:                              ; CODE XREF: __strftime_internal+A0↑j
.text:00000000000106C8                 movzx   eax, [rsp+4F8h+var_4CD]
.text:00000000000106CD                 xor     r8d, r8d
.text:00000000000106D0                 xor     r15d, r15d
.text:00000000000106D3                 mov     edx, 1
.text:00000000000106D8                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:00000000000106DC
.text:00000000000106DC loc_106DC:                              ; CODE XREF: __strftime_internal+233↓j
.text:00000000000106DC                                         ; __strftime_internal+246↓j ...
.text:00000000000106DC                 add     rbx, 1
.text:00000000000106E0                 movsx   eax, byte ptr [rbx]
.text:00000000000106E3                 lea     ecx, [rax-23h]
.text:00000000000106E6                 mov     esi, eax
.text:00000000000106E8                 mov     r9d, eax
.text:00000000000106EB                 cmp     cl, 3Ch ; '<'
.text:00000000000106EE                 ja      short loc_1071C
.text:00000000000106F0                 mov     rdi, rdx
.text:00000000000106F3                 mov     r11, 1000000000002500h
.text:00000000000106FD                 shl     rdi, cl
.text:0000000000010700                 test    rdi, r11
.text:0000000000010703                 jnz     short loc_10770
.text:0000000000010705                 test    cl, cl
.text:0000000000010707                 jz      short loc_10780
.text:0000000000010709                 mov     rcx, 800000000000000h
.text:0000000000010713                 test    rdi, rcx
.text:0000000000010716                 jnz     loc_10870
.text:000000000001071C
.text:000000000001071C loc_1071C:                              ; CODE XREF: __strftime_internal+1AE↑j
.text:000000000001071C                 lea     edx, [rax-30h]
.text:000000000001071F                 cmp     edx, 9
.text:0000000000010722                 jbe     loc_10880
.text:0000000000010728
.text:0000000000010728 loc_10728:                              ; CODE XREF: __strftime_internal+372↓j
.text:0000000000010728                                         ; __strftime_internal+3AC↓j
.text:0000000000010728                 cmp     sil, 45h ; 'E'
.text:000000000001072C                 jz      short loc_10758
.text:000000000001072E                 xor     r11d, r11d
.text:0000000000010731                 cmp     sil, 4Fh ; 'O'
.text:0000000000010735                 jz      short loc_10758
.text:0000000000010737
.text:0000000000010737 loc_10737:                              ; CODE XREF: __strftime_internal+227↓j
.text:0000000000010737                 cmp     sil, 7Ah        ; switch 123 cases
.text:000000000001073B                 ja      short def_1074F ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000001073D                 lea     rdx, jpt_1074F
.text:0000000000010744                 movzx   eax, sil
.text:0000000000010748                 movsxd  rax, ds:(jpt_1074F - 1A0DCh)[rdx+rax*4]
.text:000000000001074C                 add     rax, rdx
.text:000000000001074F                 jmp     rax             ; switch jump
.text:000000000001074F ; ---------------------------------------------------------------------------
.text:0000000000010751                 align 8
.text:0000000000010758
.text:0000000000010758 loc_10758:                              ; CODE XREF: __strftime_internal+1EC↑j
.text:0000000000010758                                         ; __strftime_internal+1F5↑j
.text:0000000000010758                 movsx   r9d, byte ptr [rbx+1]
.text:000000000001075D                 mov     r11d, eax
.text:0000000000010760                 add     rbx, 1
.text:0000000000010764                 mov     esi, r9d
.text:0000000000010767                 jmp     short loc_10737
.text:0000000000010767 ; ---------------------------------------------------------------------------
.text:0000000000010769                 align 10h
.text:0000000000010770
.text:0000000000010770 loc_10770:                              ; CODE XREF: __strftime_internal+1C3↑j
.text:0000000000010770                 mov     r15d, eax
.text:0000000000010773                 jmp     loc_106DC
.text:0000000000010773 ; ---------------------------------------------------------------------------
.text:0000000000010778                 align 20h
.text:0000000000010780
.text:0000000000010780 loc_10780:                              ; CODE XREF: __strftime_internal+1C7↑j
.text:0000000000010780                 mov     r8d, 1
.text:0000000000010786                 jmp     loc_106DC
.text:000000000001078B ; ---------------------------------------------------------------------------
.text:000000000001078B
.text:000000000001078B loc_1078B:                              ; CODE XREF: __strftime_internal+1212↓j
.text:000000000001078B                 mov     rbx, r9
.text:000000000001078E                 xchg    ax, ax
.text:0000000000010790
.text:0000000000010790 def_1074F:                              ; CODE XREF: __strftime_internal+1FB↑j
.text:0000000000010790                                         ; __strftime_internal+20F↑j ...
.text:0000000000010790                 lea     rax, [rbx-1]    ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010794                 mov     r8d, 1
.text:000000000001079A
.text:000000000001079A loc_1079A:                              ; CODE XREF: __strftime_internal+269↓j
.text:000000000001079A                 mov     r9, rax
.text:000000000001079D                 lea     rax, [rax-1]
.text:00000000000107A1                 add     r8d, 1
.text:00000000000107A5                 cmp     byte ptr [rax+1], 25h ; '%'
.text:00000000000107A9                 jnz     short loc_1079A
.text:00000000000107AB                 mov     rdx, [rsp+4F8h+var_4F0]
.text:00000000000107B0                 mov     eax, 0
.text:00000000000107B5                 movsxd  r8, r8d
.text:00000000000107B8                 mov     rcx, r8
.text:00000000000107BB                 mov     r12, rbx
.text:00000000000107BE                 sub     rdx, r14
.text:00000000000107C1                 test    r10d, r10d
.text:00000000000107C4                 cmovns  eax, r10d
.text:00000000000107C8                 cdqe
.text:00000000000107CA                 cmp     rax, r8
.text:00000000000107CD                 cmovnb  rcx, rax
.text:00000000000107D1
.text:00000000000107D1 loc_107D1:                              ; CODE XREF: __strftime_internal+122D↓j
.text:00000000000107D1                                         ; __strftime_internal+17E4↓j
.text:00000000000107D1                 cmp     rcx, rdx
.text:00000000000107D4                 jnb     loc_1060C
.text:00000000000107DA                 test    rbp, rbp
.text:00000000000107DD                 jz      loc_10865
.text:00000000000107E3                 cmp     rax, r8
.text:00000000000107E6                 jbe     short loc_10835
.text:00000000000107E8                 movsxd  rdx, r10d
.text:00000000000107EB                 mov     [rsp+4F8h+var_4B0], r8
.text:00000000000107F0                 mov     [rsp+4F8h+var_4B8], rcx
.text:00000000000107F5                 sub     rdx, r8         ; n
.text:00000000000107F8                 cmp     r15d, 30h ; '0'
.text:00000000000107FC                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:0000000000010801                 lea     rbx, [rbp+rdx+0]
.text:0000000000010806                 jz      loc_11A76
.text:000000000001080C                 cmp     r15d, 2Bh ; '+'
.text:0000000000010810                 jz      loc_11A76
.text:0000000000010816                 mov     rdi, rbp        ; s
.text:0000000000010819                 mov     esi, 20h ; ' '  ; c
.text:000000000001081E                 mov     rbp, rbx
.text:0000000000010821                 call    _memset
.text:0000000000010826                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000001082B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000010830                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000010835
.text:0000000000010835 loc_10835:                              ; CODE XREF: __strftime_internal+2A6↑j
.text:0000000000010835                                         ; __strftime_internal+1555↓j
.text:0000000000010835                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000001083A                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000001083F                 mov     rdx, r8         ; n
.text:0000000000010842                 mov     [rsp+4F8h+var_4C8], r8
.text:0000000000010847                 mov     rsi, r9         ; src
.text:000000000001084A                 mov     rdi, rbp        ; dest
.text:000000000001084D                 jz      loc_11A20
.text:0000000000010853                 call    memcpy_lowcase_0
.text:0000000000010858                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000001085D                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000010862
.text:0000000000010862 loc_10862:                              ; CODE XREF: __strftime_internal+14EF↓j
.text:0000000000010862                 add     rbp, r8
.text:0000000000010865
.text:0000000000010865 loc_10865:                              ; CODE XREF: __strftime_internal+29D↑j
.text:0000000000010865                 add     r14, rcx
.text:0000000000010868                 jmp     loc_10672
.text:0000000000010868 ; ---------------------------------------------------------------------------
.text:000000000001086D                 align 10h
.text:0000000000010870
.text:0000000000010870 loc_10870:                              ; CODE XREF: __strftime_internal+1D6↑j
.text:0000000000010870                 mov     byte ptr [rsp+4F8h+var_4C8], 1
.text:0000000000010875                 jmp     loc_106DC
.text:0000000000010875 ; ---------------------------------------------------------------------------
.text:000000000001087A                 align 20h
.text:0000000000010880
.text:0000000000010880 loc_10880:                              ; CODE XREF: __strftime_internal+1E2↑j
.text:0000000000010880                 xor     r10d, r10d
.text:0000000000010883
.text:0000000000010883 loc_10883:                              ; CODE XREF: __strftime_internal+36D↓j
.text:0000000000010883                 movsx   eax, byte ptr [rbx+1]
.text:0000000000010887                 cmp     r10d, 0CCCCCCCh
.text:000000000001088E                 lea     rcx, [rbx+1]
.text:0000000000010892                 mov     esi, eax
.text:0000000000010894                 lea     edx, [rax-30h]
.text:0000000000010897                 jg      short loc_108C6
.text:0000000000010899                 movsx   edi, byte ptr [rbx]
.text:000000000001089C                 jz      short loc_108C0
.text:000000000001089E
.text:000000000001089E loc_1089E:                              ; CODE XREF: __strftime_internal+384↓j
.text:000000000001089E                 lea     r9d, [r10+r10*4]
.text:00000000000108A2                 mov     rbx, rcx
.text:00000000000108A5                 lea     r10d, [rdi+r9*2-30h]
.text:00000000000108AA
.text:00000000000108AA loc_108AA:                              ; CODE XREF: __strftime_internal+39E↓j
.text:00000000000108AA                 cmp     edx, 9
.text:00000000000108AD                 jbe     short loc_10883
.text:00000000000108AF                 mov     r9d, eax
.text:00000000000108B2                 jmp     loc_10728
.text:00000000000108B2 ; ---------------------------------------------------------------------------
.text:00000000000108B7                 align 20h
.text:00000000000108C0
.text:00000000000108C0 loc_108C0:                              ; CODE XREF: __strftime_internal+35C↑j
.text:00000000000108C0                 cmp     dil, 37h ; '7'
.text:00000000000108C4                 jle     short loc_1089E
.text:00000000000108C6
.text:00000000000108C6 loc_108C6:                              ; CODE XREF: __strftime_internal+357↑j
.text:00000000000108C6                 cmp     edx, 9
.text:00000000000108C9                 ja      short loc_108E0
.text:00000000000108CB                 movsx   eax, byte ptr [rbx+2]
.text:00000000000108CF                 mov     r10d, 7FFFFFFFh
.text:00000000000108D5                 add     rbx, 2
.text:00000000000108D9                 mov     esi, eax
.text:00000000000108DB                 lea     edx, [rax-30h]
.text:00000000000108DE                 jmp     short loc_108AA
.text:00000000000108E0 ; ---------------------------------------------------------------------------
.text:00000000000108E0
.text:00000000000108E0 loc_108E0:                              ; CODE XREF: __strftime_internal+389↑j
.text:00000000000108E0                 mov     r9d, eax
.text:00000000000108E3                 mov     rbx, rcx
.text:00000000000108E6                 mov     r10d, 7FFFFFFFh
.text:00000000000108EC                 jmp     loc_10728
.text:00000000000108EC ; ---------------------------------------------------------------------------
.text:00000000000108F1                 align 8
.text:00000000000108F8
.text:00000000000108F8 loc_108F8:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000108F8                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000108F8                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000001074F cases 88,99,120
.text:00000000000108FC                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010902
.text:0000000000010902 loc_10902:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010902                                         ; __strftime_internal+10F6↓j
.text:0000000000010902                                         ; DATA XREF: ...
.text:0000000000010902                 xor     r8d, r8d        ; jumptable 000000000001074F case 114
.text:0000000000010905
.text:0000000000010905 loc_10905:                              ; CODE XREF: __strftime_internal+659↓j
.text:0000000000010905                                         ; __strftime_internal+A27↓j ...
.text:0000000000010905                 mov     eax, 2520h
.text:000000000001090A                 test    r11d, r11d
.text:000000000001090D                 mov     word ptr [rsp+4F8h+format], ax
.text:0000000000010915                 jnz     loc_11FEB
.text:000000000001091B                 lea     rdx, [rsp+4F8h+format] ; format
.text:0000000000010923                 mov     r12, rbx
.text:0000000000010926                 lea     rax, [rdx+2]
.text:000000000001092A
.text:000000000001092A loc_1092A:                              ; CODE XREF: __strftime_internal+541↓j
.text:000000000001092A                                         ; __strftime_internal+5B6↓j
.text:000000000001092A                 lea     r9, [rsp+4F8h+s]
.text:0000000000010932                 mov     [rax], sil
.text:0000000000010935                 mov     byte ptr [rax+1], 0
.text:0000000000010939                 mov     rcx, r13        ; tp
.text:000000000001093C                 mov     esi, 400h       ; maxsize
.text:0000000000010941                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000010946                 mov     rdi, r9         ; s
.text:0000000000010949                 mov     byte ptr [rsp+4F8h+var_4A8], r8b
.text:000000000001094E                 mov     dword ptr [rsp+4F8h+var_4B0], r11d
.text:0000000000010953                 mov     [rsp+4F8h+var_4B8], r9
.text:0000000000010958                 call    _strftime
.text:000000000001095D                 test    rax, rax
.text:0000000000010960                 jz      loc_10672
.text:0000000000010966                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000001096B                 lea     rcx, [rax-1]
.text:000000000001096F                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000010974                 mov     eax, 0
.text:0000000000010979                 test    r10d, r10d
.text:000000000001097C                 cmovns  rax, r10
.text:0000000000010980                 cmp     rcx, rax
.text:0000000000010983                 mov     rbx, rax
.text:0000000000010986                 cmovnb  rbx, rcx
.text:000000000001098A                 sub     rdx, r14
.text:000000000001098D                 cmp     rdx, rbx
.text:0000000000010990                 jbe     loc_1060C
.text:0000000000010996                 test    rbp, rbp
.text:0000000000010999                 jz      loc_10A3E
.text:000000000001099F                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000109A4                 mov     r9, [rsp+4F8h+var_4B8]
.text:00000000000109A9                 movzx   r8d, byte ptr [rsp+4F8h+var_4A8]
.text:00000000000109AF                 test    r11d, r11d
.text:00000000000109B2                 jnz     short loc_10A0E
.text:00000000000109B4                 cmp     rcx, rax
.text:00000000000109B7                 jnb     short loc_10A0E
.text:00000000000109B9                 movsxd  rdx, r10d
.text:00000000000109BC                 mov     [rsp+4F8h+var_4A8], r9
.text:00000000000109C1                 mov     [rsp+4F8h+var_4B0], rcx
.text:00000000000109C6                 sub     rdx, rcx        ; n
.text:00000000000109C9                 cmp     r15d, 30h ; '0'
.text:00000000000109CD                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:00000000000109D2                 lea     rax, [rbp+rdx+0]
.text:00000000000109D7                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:00000000000109DC                 jz      loc_11A4F
.text:00000000000109E2                 cmp     r15d, 2Bh ; '+'
.text:00000000000109E6                 jz      loc_11A4F
.text:00000000000109EC                 mov     rdi, rbp        ; s
.text:00000000000109EF                 mov     esi, 20h ; ' '  ; c
.text:00000000000109F4                 call    _memset
.text:00000000000109F9                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000109FF                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000010A04                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000010A09                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000010A0E
.text:0000000000010A0E loc_10A0E:                              ; CODE XREF: __strftime_internal+472↑j
.text:0000000000010A0E                                         ; __strftime_internal+477↑j ...
.text:0000000000010A0E                 test    r8b, r8b
.text:0000000000010A11                 lea     rsi, [r9+1]
.text:0000000000010A15                 mov     rdx, rcx
.text:0000000000010A18                 jnz     loc_11A38
.text:0000000000010A1E                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000010A23                 mov     rdi, rbp
.text:0000000000010A26                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000010A2B                 jz      loc_112A1
.text:0000000000010A31
.text:0000000000010A31 loc_10A31:                              ; CODE XREF: __strftime_internal+D5B↓j
.text:0000000000010A31                 call    memcpy_lowcase_0
.text:0000000000010A36                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000010A3B
.text:0000000000010A3B loc_10A3B:                              ; CODE XREF: __strftime_internal+D6B↓j
.text:0000000000010A3B                                         ; __strftime_internal+150A↓j
.text:0000000000010A3B                 add     rbp, rcx
.text:0000000000010A3E
.text:0000000000010A3E loc_10A3E:                              ; CODE XREF: __strftime_internal+459↑j
.text:0000000000010A3E                                         ; __strftime_internal+CEB↓j
.text:0000000000010A3E                 add     r14, rbx
.text:0000000000010A41                 jmp     loc_10672
.text:0000000000010A46 ; ---------------------------------------------------------------------------
.text:0000000000010A46
.text:0000000000010A46 loc_10A46:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010A46                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010A46                 test    r11d, r11d      ; jumptable 000000000001074F cases 65,97
.text:0000000000010A49                 jnz     def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010A4F                 movzx   eax, byte ptr [rsp+4F8h+var_4C8]
.text:0000000000010A54                 test    r8b, r8b
.text:0000000000010A57                 lea     rdx, [rsp+4F8h+format]
.text:0000000000010A5F                 mov     r12, rbx
.text:0000000000010A62                 cmovnz  eax, r8d
.text:0000000000010A66                 xor     r8d, r8d
.text:0000000000010A69                 xor     r11d, r11d
.text:0000000000010A6C                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:0000000000010A70                 mov     eax, 2520h
.text:0000000000010A75                 mov     word ptr [rsp+4F8h+format], ax
.text:0000000000010A7D                 lea     rax, [rdx+2]
.text:0000000000010A81                 jmp     loc_1092A
.text:0000000000010A86 ; ---------------------------------------------------------------------------
.text:0000000000010A86
.text:0000000000010A86 loc_10A86:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010A86                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010A86                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 83
.text:0000000000010A8A                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010A90                 mov     ecx, [r13+0]
.text:0000000000010A94                 mov     edi, 2
.text:0000000000010A99                 nop     dword ptr [rax+00000000h]
.text:0000000000010AA0
.text:0000000000010AA0 loc_10AA0:                              ; CODE XREF: __strftime_internal+852↓j
.text:0000000000010AA0                                         ; __strftime_internal+1047↓j ...
.text:0000000000010AA0                 mov     eax, ecx
.text:0000000000010AA2                 xor     esi, esi
.text:0000000000010AA4                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000010AA9                 shr     eax, 1Fh
.text:0000000000010AAC                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000010AB0                 mov     eax, ecx
.text:0000000000010AB2                 not     eax
.text:0000000000010AB4                 shr     eax, 1Fh
.text:0000000000010AB7
.text:0000000000010AB7 loc_10AB7:                              ; CODE XREF: __strftime_internal+8AB↓j
.text:0000000000010AB7                                         ; __strftime_internal+A02↓j ...
.text:0000000000010AB7                 cmp     r11d, 4Fh ; 'O'
.text:0000000000010ABB                 jnz     loc_11940
.text:0000000000010AC1                 test    al, al
.text:0000000000010AC3                 jz      loc_11940
.text:0000000000010AC9                 mov     esi, r9d
.text:0000000000010ACC
.text:0000000000010ACC loc_10ACC:                              ; CODE XREF: __strftime_internal+B0D↓j
.text:0000000000010ACC                                         ; __strftime_internal+158C↓j
.text:0000000000010ACC                 mov     edx, 2520h
.text:0000000000010AD1                 xor     r8d, r8d
.text:0000000000010AD4                 mov     word ptr [rsp+4F8h+format], dx
.text:0000000000010ADC
.text:0000000000010ADC loc_10ADC:                              ; CODE XREF: __strftime_internal+1AAD↓j
.text:0000000000010ADC                 lea     rdx, [rsp+4F8h+format]
.text:0000000000010AE4                 mov     [rsp+4F8h+var_44B], r11b
.text:0000000000010AEC                 mov     r12, rbx
.text:0000000000010AEF                 mov     r11d, edi
.text:0000000000010AF2                 lea     rax, [rdx+3]
.text:0000000000010AF6                 jmp     loc_1092A
.text:0000000000010AFB ; ---------------------------------------------------------------------------
.text:0000000000010AFB
.text:0000000000010AFB loc_10AFB:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010AFB                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010AFB                 test    r10d, r10d      ; jumptable 000000000001074F case 116
.text:0000000000010AFE                 mov     ecx, 0
.text:0000000000010B03                 mov     eax, 1
.text:0000000000010B08                 cmovns  ecx, r10d
.text:0000000000010B0C                 movsxd  rcx, ecx
.text:0000000000010B0F                 test    rcx, rcx
.text:0000000000010B12                 cmovz   rcx, rax
.text:0000000000010B16                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000010B1B                 sub     rax, r14
.text:0000000000010B1E                 cmp     rax, rcx
.text:0000000000010B21                 jbe     loc_1060C
.text:0000000000010B27                 test    rbp, rbp
.text:0000000000010B2A                 jz      short loc_10B78
.text:0000000000010B2C                 cmp     r10d, 1
.text:0000000000010B30                 jle     short loc_10B6C
.text:0000000000010B32                 movsxd  rdx, r10d
.text:0000000000010B35                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000010B3A                 sub     rdx, 1          ; n
.text:0000000000010B3E                 cmp     r15d, 30h ; '0'
.text:0000000000010B42                 lea     r12, [rbp+rdx+0]
.text:0000000000010B47                 jz      loc_11E64
.text:0000000000010B4D                 cmp     r15d, 2Bh ; '+'
.text:0000000000010B51                 jz      loc_11E64
.text:0000000000010B57                 mov     rdi, rbp        ; s
.text:0000000000010B5A                 mov     esi, 20h ; ' '  ; c
.text:0000000000010B5F                 mov     rbp, r12
.text:0000000000010B62                 call    _memset
.text:0000000000010B67                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000010B6C
.text:0000000000010B6C loc_10B6C:                              ; CODE XREF: __strftime_internal+5F0↑j
.text:0000000000010B6C                                         ; __strftime_internal+1939↓j
.text:0000000000010B6C                 mov     byte ptr [rbp+0], 9
.text:0000000000010B70                 add     rbp, 1
.text:0000000000010B74                 nop     dword ptr [rax+00h]
.text:0000000000010B78
.text:0000000000010B78 loc_10B78:                              ; CODE XREF: __strftime_internal+5EA↑j
.text:0000000000010B78                                         ; __strftime_internal+7B5↓j ...
.text:0000000000010B78                 add     r14, rcx
.text:0000000000010B7B                 mov     r12, rbx
.text:0000000000010B7E                 jmp     loc_10672
.text:0000000000010B83 ; ---------------------------------------------------------------------------
.text:0000000000010B83
.text:0000000000010B83 loc_10B83:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010B83                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010B83                 mov     eax, 1          ; jumptable 000000000001074F case 80
.text:0000000000010B88
.text:0000000000010B88 loc_10B88:                              ; CODE XREF: __strftime_internal+13A1↓j
.text:0000000000010B88                 test    r8b, r8b
.text:0000000000010B8B                 jnz     loc_11ABB
.text:0000000000010B91                 mov     r8d, eax
.text:0000000000010B94                 mov     esi, 70h ; 'p'
.text:0000000000010B99                 jmp     loc_10905
.text:0000000000010B9E ; ---------------------------------------------------------------------------
.text:0000000000010B9E
.text:0000000000010B9E loc_10B9E:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010B9E                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010B9E                 lea     rax, aMDHM+6    ; jumptable 000000000001074F case 82
.text:0000000000010BA5                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:0000000000010BAD                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000010BB2
.text:0000000000010BB2 loc_10BB2:                              ; CODE XREF: __strftime_internal+81F↓j
.text:0000000000010BB2                                         ; __strftime_internal+11B2↓j ...
.text:0000000000010BB2                 movzx   r8d, byte ptr [rsp+4F8h+var_4C8]
.text:0000000000010BB8                 mov     eax, [rsp+4F8h+arg_18]
.text:0000000000010BBF                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000010BC6                 mov     dword ptr [rsp+4F8h+var_4B0], r10d
.text:0000000000010BCB                 xor     edi, edi        ; s
.text:0000000000010BCD                 mov     r9d, r15d
.text:0000000000010BD0                 mov     rcx, r13
.text:0000000000010BD3                 mov     dword ptr [rsp+4F8h+var_4C8], r8d
.text:0000000000010BD8                 push    rax             ; int
.text:0000000000010BD9                 push    [rsp+500h+var_4E8] ; __int64
.text:0000000000010BDD                 push    [rsp+508h+var_4E0] ; __int64
.text:0000000000010BE1                 mov     eax, [rsp+510h+var_4C0]
.text:0000000000010BE5                 push    rax             ; int
.text:0000000000010BE6                 mov     rdx, [rsp+518h+var_4B8]
.text:0000000000010BEB                 call    __strftime_internal
.text:0000000000010BF0                 add     rsp, 20h
.text:0000000000010BF4                 movsxd  r10, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000010BF9                 mov     r11, rax
.text:0000000000010BFC                 mov     rsi, [rsp+4F8h+var_4F0]
.text:0000000000010C01                 mov     eax, 0
.text:0000000000010C06                 test    r10d, r10d
.text:0000000000010C09                 cmovns  rax, r10
.text:0000000000010C0D                 cmp     r11, rax
.text:0000000000010C10                 mov     r12, rax
.text:0000000000010C13                 cmovnb  r12, r11
.text:0000000000010C17                 sub     rsi, r14
.text:0000000000010C1A                 cmp     rsi, r12
.text:0000000000010C1D                 mov     [rsp+4F8h+var_4B0], rsi
.text:0000000000010C22                 jbe     loc_1060C
.text:0000000000010C28                 test    rbp, rbp
.text:0000000000010C2B                 jz      loc_1066C
.text:0000000000010C31                 cmp     r11, rax
.text:0000000000010C34                 jnb     short loc_10C76
.text:0000000000010C36                 movsxd  rdx, r10d
.text:0000000000010C39                 mov     [rsp+4F8h+var_4A0], r11
.text:0000000000010C3E                 sub     rdx, r11        ; n
.text:0000000000010C41                 cmp     r15d, 30h ; '0'
.text:0000000000010C45                 lea     rax, [rbp+rdx+0]
.text:0000000000010C4A                 mov     [rsp+4F8h+var_4A8], rax
.text:0000000000010C4F                 jz      loc_11D4C
.text:0000000000010C55                 cmp     r15d, 2Bh ; '+'
.text:0000000000010C59                 jz      loc_11D4C
.text:0000000000010C5F                 mov     rdi, rbp        ; s
.text:0000000000010C62                 mov     esi, 20h ; ' '  ; c
.text:0000000000010C67                 call    _memset
.text:0000000000010C6C                 mov     rbp, [rsp+4F8h+var_4A8]
.text:0000000000010C71                 mov     r11, [rsp+4F8h+var_4A0]
.text:0000000000010C76
.text:0000000000010C76 loc_10C76:                              ; CODE XREF: __strftime_internal+6F4↑j
.text:0000000000010C76                                         ; __strftime_internal+1823↓j
.text:0000000000010C76                 mov     eax, [rsp+4F8h+arg_18]
.text:0000000000010C7D                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000010C82                 mov     rdi, rbp        ; s
.text:0000000000010C85                 mov     r9d, r15d
.text:0000000000010C88                 mov     rcx, r13
.text:0000000000010C8B                 push    rax             ; int
.text:0000000000010C8C                 push    [rsp+500h+var_4E8] ; __int64
.text:0000000000010C90                 push    [rsp+508h+var_4E0] ; __int64
.text:0000000000010C94                 mov     eax, [rsp+510h+var_4C0]
.text:0000000000010C98                 push    rax             ; int
.text:0000000000010C99                 mov     r8d, dword ptr [rsp+518h+var_4C8]
.text:0000000000010C9E                 mov     rdx, [rsp+518h+var_4B8]
.text:0000000000010CA3                 mov     rsi, [rsp+518h+var_4B0]
.text:0000000000010CA8                 call    __strftime_internal
.text:0000000000010CAD                 mov     r11, [rsp+518h+var_4A8]
.text:0000000000010CB2                 add     rsp, 20h
.text:0000000000010CB6                 add     rbp, r11
.text:0000000000010CB9                 jmp     loc_1066C
.text:0000000000010CBE ; ---------------------------------------------------------------------------
.text:0000000000010CBE
.text:0000000000010CBE loc_10CBE:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010CBE                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010CBE                 mov     rdx, [rsp+4F8h+var_4F0] ; jumptable 000000000001074F case 37
.text:0000000000010CC3                 mov     eax, 0
.text:0000000000010CC8                 mov     ecx, 1
.text:0000000000010CCD                 sub     rdx, r14
.text:0000000000010CD0                 test    r10d, r10d
.text:0000000000010CD3                 cmovns  eax, r10d
.text:0000000000010CD7                 cdqe
.text:0000000000010CD9                 test    rax, rax
.text:0000000000010CDC                 cmovnz  rcx, rax
.text:0000000000010CE0                 test    r11d, r11d
.text:0000000000010CE3                 jnz     loc_11D18
.text:0000000000010CE9                 cmp     rcx, rdx
.text:0000000000010CEC                 jnb     loc_1060C
.text:0000000000010CF2                 test    rbp, rbp
.text:0000000000010CF5                 jz      loc_10B78
.text:0000000000010CFB                 cmp     r10d, 1
.text:0000000000010CFF                 jle     short loc_10D3E
.text:0000000000010D01                 movsxd  rdx, r10d
.text:0000000000010D04                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000010D09                 sub     rdx, 1          ; n
.text:0000000000010D0D                 cmp     r15d, 30h ; '0'
.text:0000000000010D11                 lea     r12, [rbp+rdx+0]
.text:0000000000010D16                 jz      loc_11F85
.text:0000000000010D1C                 cmp     r15d, 2Bh ; '+'
.text:0000000000010D20                 mov     esi, 20h ; ' '  ; c
.text:0000000000010D25                 jz      loc_11F85
.text:0000000000010D2B
.text:0000000000010D2B loc_10D2B:                              ; CODE XREF: __strftime_internal+1A4A↓j
.text:0000000000010D2B                 mov     rdi, rbp        ; s
.text:0000000000010D2E                 mov     rbp, r12
.text:0000000000010D31                 call    _memset
.text:0000000000010D36                 movzx   esi, byte ptr [rbx]
.text:0000000000010D39                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000010D3E
.text:0000000000010D3E loc_10D3E:                              ; CODE XREF: __strftime_internal+7BF↑j
.text:0000000000010D3E                 mov     [rbp+0], sil
.text:0000000000010D42                 add     rbp, 1
.text:0000000000010D46                 jmp     loc_10B78
.text:0000000000010D4B ; ---------------------------------------------------------------------------
.text:0000000000010D4B
.text:0000000000010D4B loc_10D4B:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010D4B                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010D4B                 lea     rax, aHMS       ; jumptable 000000000001074F case 84
.text:0000000000010D52                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:0000000000010D5A                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000010D5F                 jmp     loc_10BB2
.text:0000000000010D64 ; ---------------------------------------------------------------------------
.text:0000000000010D64
.text:0000000000010D64 loc_10D64:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010D64                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010D64                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 85
.text:0000000000010D68                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010D6E                 mov     esi, [r13+1Ch]
.text:0000000000010D72                 sub     esi, [r13+18h]
.text:0000000000010D76                 mov     edx, 92492493h
.text:0000000000010D7B                 add     esi, 7
.text:0000000000010D7E                 mov     eax, esi
.text:0000000000010D80                 imul    edx
.text:0000000000010D82
.text:0000000000010D82 loc_10D82:                              ; CODE XREF: __strftime_internal+10D9↓j
.text:0000000000010D82                 lea     ecx, [rdx+rsi]
.text:0000000000010D85                 sar     esi, 1Fh
.text:0000000000010D88                 mov     edi, 2
.text:0000000000010D8D                 sar     ecx, 2
.text:0000000000010D90                 sub     ecx, esi
.text:0000000000010D92                 jmp     loc_10AA0
.text:0000000000010D97 ; ---------------------------------------------------------------------------
.text:0000000000010D97
.text:0000000000010D97 loc_10D97:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010D97                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010D97                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 89
.text:0000000000010D9B                 jz      loc_11ACA
.text:0000000000010DA1                 cmp     r11d, 4Fh ; 'O'
.text:0000000000010DA5                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000010DAB                 mov     eax, [r13+14h]
.text:0000000000010DAF                 cmp     eax, 0FFFFF894h
.text:0000000000010DB4                 lea     ecx, [rax+76Ch]
.text:0000000000010DBA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000010DBF                 cmp     eax, 0FFFFF894h
.text:0000000000010DC4                 setnl   al
.text:0000000000010DC7                 test    r15d, r15d
.text:0000000000010DCA                 jnz     loc_11C49
.text:0000000000010DD0
.text:0000000000010DD0 loc_10DD0:                              ; CODE XREF: __strftime_internal+1703↓j
.text:0000000000010DD0                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000010DD5                 cmp     r15d, 2Bh ; '+'
.text:0000000000010DD9                 jz      loc_11C53
.text:0000000000010DDF
.text:0000000000010DDF loc_10DDF:                              ; CODE XREF: __strftime_internal+170D↓j
.text:0000000000010DDF                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000010DE4                 mov     edi, 4
.text:0000000000010DE9
.text:0000000000010DE9 loc_10DE9:                              ; CODE XREF: __strftime_internal+117A↓j
.text:0000000000010DE9                 xor     esi, esi
.text:0000000000010DEB                 jmp     loc_10AB7
.text:0000000000010DF0 ; ---------------------------------------------------------------------------
.text:0000000000010DF0
.text:0000000000010DF0 loc_10DF0:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010DF0                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010DF0                 movzx   esi, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000001074F case 90
.text:0000000000010DF5                 mov     rdi, [rsp+4F8h+var_4D8] ; s
.text:0000000000010DFA                 test    r8b, r8b
.text:0000000000010DFD                 mov     eax, 0
.text:0000000000010E02                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000010E07                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:0000000000010E0C                 cmovnz  esi, eax
.text:0000000000010E0F                 mov     byte ptr [rsp+4F8h+var_4C8], sil
.text:0000000000010E14                 call    _strlen
.text:0000000000010E19                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:0000000000010E1E                 mov     r12, rax
.text:0000000000010E21                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000010E26                 mov     eax, 0
.text:0000000000010E2B                 test    r10d, r10d
.text:0000000000010E2E                 cmovns  rax, r10
.text:0000000000010E32                 cmp     r12, rax
.text:0000000000010E35                 mov     rcx, rax
.text:0000000000010E38                 cmovnb  rcx, r12
.text:0000000000010E3C                 sub     rdx, r14
.text:0000000000010E3F                 cmp     rdx, rcx
.text:0000000000010E42                 jbe     loc_1060C
.text:0000000000010E48                 test    rbp, rbp
.text:0000000000010E4B                 jz      loc_10B78
.text:0000000000010E51                 cmp     r12, rax
.text:0000000000010E54                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:0000000000010E5A                 jnb     short loc_10EA7
.text:0000000000010E5C                 movsxd  rdx, r10d
.text:0000000000010E5F                 mov     [rsp+4F8h+var_4B0], rcx
.text:0000000000010E64                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:0000000000010E69                 sub     rdx, r12        ; n
.text:0000000000010E6C                 cmp     r15d, 30h ; '0'
.text:0000000000010E70                 lea     rax, [rbp+rdx+0]
.text:0000000000010E75                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:0000000000010E7A                 jz      loc_11F3F
.text:0000000000010E80                 cmp     r15d, 2Bh ; '+'
.text:0000000000010E84                 jz      loc_11F3F
.text:0000000000010E8A                 mov     rdi, rbp        ; s
.text:0000000000010E8D                 mov     esi, 20h ; ' '  ; c
.text:0000000000010E92                 call    _memset
.text:0000000000010E97                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:0000000000010E9D                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000010EA2                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000010EA7
.text:0000000000010EA7 loc_10EA7:                              ; CODE XREF: __strftime_internal+91A↑j
.text:0000000000010EA7                                         ; __strftime_internal+1A1C↓j
.text:0000000000010EA7                 test    r8b, r8b
.text:0000000000010EAA                 jnz     loc_11EA7
.text:0000000000010EB0                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000010EB5                 mov     rdx, r12        ; n
.text:0000000000010EB8                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000010EBD                 mov     rsi, [rsp+4F8h+var_4D8] ; src
.text:0000000000010EC2                 mov     rdi, rbp        ; dest
.text:0000000000010EC5                 jz      loc_11E98
.text:0000000000010ECB                 call    memcpy_lowcase_0
.text:0000000000010ED0                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000010ED5
.text:0000000000010ED5 loc_10ED5:                              ; CODE XREF: __strftime_internal+1962↓j
.text:0000000000010ED5                                         ; __strftime_internal+1981↓j
.text:0000000000010ED5                 add     rbp, r12
.text:0000000000010ED8                 jmp     loc_10B78
.text:0000000000010EDD ; ---------------------------------------------------------------------------
.text:0000000000010EDD
.text:0000000000010EDD loc_10EDD:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010EDD                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010EDD                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 121
.text:0000000000010EE1                 jz      loc_11ACA
.text:0000000000010EE7                 mov     esi, [r13+14h]
.text:0000000000010EEB                 mov     edx, 51EB851Fh
.text:0000000000010EF0                 mov     eax, esi
.text:0000000000010EF2                 imul    edx
.text:0000000000010EF4                 mov     eax, esi
.text:0000000000010EF6                 sar     eax, 1Fh
.text:0000000000010EF9                 mov     ecx, edx
.text:0000000000010EFB                 sar     ecx, 5
.text:0000000000010EFE                 sub     ecx, eax
.text:0000000000010F00                 mov     eax, esi
.text:0000000000010F02                 imul    ecx, 64h ; 'd'
.text:0000000000010F05                 sub     eax, ecx
.text:0000000000010F07                 mov     ecx, eax
.text:0000000000010F09                 jns     short loc_10F19
.text:0000000000010F0B                 neg     eax
.text:0000000000010F0D                 add     ecx, 64h ; 'd'
.text:0000000000010F10                 cmp     esi, 0FFFFF893h
.text:0000000000010F16                 cmovle  ecx, eax
.text:0000000000010F19
.text:0000000000010F19 loc_10F19:                              ; CODE XREF: __strftime_internal+9C9↑j
.text:0000000000010F19                                         ; __strftime_internal+FE9↓j
.text:0000000000010F19                 test    r15d, r15d
.text:0000000000010F1C                 jz      loc_1154A
.text:0000000000010F22
.text:0000000000010F22 loc_10F22:                              ; CODE XREF: __strftime_internal+1004↓j
.text:0000000000010F22                                         ; __strftime_internal+1AA6↓j
.text:0000000000010F22                 mov     eax, 1
.text:0000000000010F27                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000010F2C
.text:0000000000010F2C loc_10F2C:                              ; CODE XREF: __strftime_internal+114D↓j
.text:0000000000010F2C                 cmp     r15d, 2Bh ; '+'
.text:0000000000010F30                 jz      loc_116A3
.text:0000000000010F36
.text:0000000000010F36 loc_10F36:                              ; CODE XREF: __strftime_internal+115D↓j
.text:0000000000010F36                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000010F3B                 mov     edi, 2
.text:0000000000010F40                 xor     esi, esi
.text:0000000000010F42                 jmp     loc_10AB7
.text:0000000000010F47 ; ---------------------------------------------------------------------------
.text:0000000000010F47
.text:0000000000010F47 loc_10F47:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010F47                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010F47                 movzx   eax, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000001074F cases 98,104
.text:0000000000010F4C                 test    r8b, r8b
.text:0000000000010F4F                 cmovnz  eax, r8d
.text:0000000000010F53                 cmp     r11d, 45h ; 'E'
.text:0000000000010F57                 jz      loc_11EC6
.text:0000000000010F5D                 mov     esi, r9d
.text:0000000000010F60                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:0000000000010F64                 xor     r8d, r8d
.text:0000000000010F67                 jmp     loc_10905
.text:0000000000010F6C ; ---------------------------------------------------------------------------
.text:0000000000010F6C
.text:0000000000010F6C loc_10F6C:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000010F6C                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000010F6C                 xor     r8d, r8d        ; jumptable 000000000001074F case 122
.text:0000000000010F6F
.text:0000000000010F6F loc_10F6F:                              ; CODE XREF: __strftime_internal+E98↓j
.text:0000000000010F6F                 mov     ecx, [r13+20h]
.text:0000000000010F73                 test    ecx, ecx
.text:0000000000010F75                 js      loc_11C1E
.text:0000000000010F7B                 mov     rcx, [r13+28h]
.text:0000000000010F7F                 mov     byte ptr [rsp+4F8h+var_4C0], 1
.text:0000000000010F84                 test    ecx, ecx
.text:0000000000010F86                 js      short loc_10F9C
.text:0000000000010F88                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000010F8D                 jnz     short loc_10F9C
.text:0000000000010F8F                 mov     rax, [rsp+4F8h+var_4D8]
.text:0000000000010F94                 cmp     byte ptr [rax], 2Dh ; '-'
.text:0000000000010F97                 setz    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000010F9C
.text:0000000000010F9C loc_10F9C:                              ; CODE XREF: __strftime_internal+A46↑j
.text:0000000000010F9C                                         ; __strftime_internal+A4D↑j
.text:0000000000010F9C                 mov     eax, ecx
.text:0000000000010F9E                 mov     edx, 91A2B3C5h
.text:0000000000010FA3                 mov     esi, 88888889h
.text:0000000000010FA8                 imul    edx
.text:0000000000010FAA                 mov     eax, ecx
.text:0000000000010FAC                 sar     eax, 1Fh
.text:0000000000010FAF                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000010FB3                 lea     r12d, [rdx+rcx]
.text:0000000000010FB7                 sar     r12d, 0Bh
.text:0000000000010FBB                 sub     r12d, eax
.text:0000000000010FBE                 mov     eax, ecx
.text:0000000000010FC0                 imul    esi
.text:0000000000010FC2                 lea     edi, [rdx+rcx]
.text:0000000000010FC5                 sar     edi, 5
.text:0000000000010FC8                 sub     edi, dword ptr [rsp+4F8h+var_4B8]
.text:0000000000010FCC                 mov     eax, edi
.text:0000000000010FCE                 imul    esi
.text:0000000000010FD0                 mov     eax, edi
.text:0000000000010FD2                 sar     eax, 1Fh
.text:0000000000010FD5                 lea     esi, [rdx+rdi]
.text:0000000000010FD8                 sar     esi, 5
.text:0000000000010FDB                 sub     esi, eax
.text:0000000000010FDD                 mov     eax, edi
.text:0000000000010FDF                 imul    esi, 3Ch ; '<'
.text:0000000000010FE2                 imul    edi, 3Ch ; '<'
.text:0000000000010FE5                 sub     eax, esi
.text:0000000000010FE7                 sub     ecx, edi
.text:0000000000010FE9                 cmp     r8, 1
.text:0000000000010FED                 mov     esi, eax
.text:0000000000010FEF                 jz      loc_11E42
.text:0000000000010FF5                 jb      loc_11F20
.text:0000000000010FFB                 cmp     r8, 2
.text:0000000000010FFF                 jz      loc_11DF5
.text:0000000000011005                 cmp     r8, 3
.text:0000000000011009                 jnz     loc_11ECF
.text:000000000001100F                 test    ecx, ecx
.text:0000000000011011                 jnz     loc_11DF5
.text:0000000000011017                 test    eax, eax
.text:0000000000011019                 jnz     loc_11E42
.text:000000000001101F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011024                 mov     ecx, r12d
.text:0000000000011027                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000001102C                 mov     edi, 3
.text:0000000000011031                 xor     eax, 1
.text:0000000000011034                 jmp     loc_10AB7
.text:0000000000011034 ; ---------------------------------------------------------------------------
.text:0000000000011039                 align 20h
.text:0000000000011040
.text:0000000000011040 loc_11040:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011040                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011040                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000001074F case 113
.text:0000000000011044                 mov     eax, [r13+10h]
.text:0000000000011048                 mov     edi, 1
.text:000000000001104D                 jz      loc_10ACC
.text:0000000000011053                 lea     edx, [rax+rax*4]
.text:0000000000011056                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000001105B                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011060                 xor     esi, esi
.text:0000000000011062                 lea     ecx, [rax+rdx*2]
.text:0000000000011065                 sar     ecx, 5
.text:0000000000011068                 add     ecx, 1
.text:000000000001106B                 nop     dword ptr [rax+rax+00h]
.text:0000000000011070
.text:0000000000011070 loc_11070:                              ; CODE XREF: __strftime_internal+140C↓j
.text:0000000000011070                 lea     r9, [rsp+4F8h+s]
.text:0000000000011078                 mov     r12d, 0CCCCCCCDh
.text:000000000001107E                 lea     r11, [r9+17h]
.text:0000000000011082                 nop     word ptr [rax+rax+00h]
.text:0000000000011088
.text:0000000000011088 loc_11088:                              ; CODE XREF: __strftime_internal+B82↓j
.text:0000000000011088                 test    sil, 1
.text:000000000001108C                 lea     r8, [r11-1]
.text:0000000000011090                 jz      short loc_110A1
.text:0000000000011092                 lea     rax, [r11-2]
.text:0000000000011096                 mov     byte ptr [r11-1], 3Ah ; ':'
.text:000000000001109B                 mov     r11, r8
.text:000000000001109E                 mov     r8, rax
.text:00000000000110A1
.text:00000000000110A1 loc_110A1:                              ; CODE XREF: __strftime_internal+B50↑j
.text:00000000000110A1                 mov     eax, ecx
.text:00000000000110A3                 sar     esi, 1
.text:00000000000110A5                 mul     r12d
.text:00000000000110A8                 shr     edx, 3
.text:00000000000110AB                 lea     eax, [rdx+rdx*4]
.text:00000000000110AE                 add     eax, eax
.text:00000000000110B0                 sub     ecx, eax
.text:00000000000110B2                 mov     eax, esi
.text:00000000000110B4                 add     ecx, 30h ; '0'
.text:00000000000110B7                 or      eax, edx
.text:00000000000110B9                 mov     [r11-1], cl
.text:00000000000110BD                 mov     ecx, edx
.text:00000000000110BF                 mov     r11, r8
.text:00000000000110C2                 jnz     short loc_11088
.text:00000000000110C4                 cmp     r10d, edi
.text:00000000000110C7                 cmovge  edi, r10d
.text:00000000000110CB                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000110D0                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:00000000000110D4                 jnz     loc_11958
.text:00000000000110DA                 cmp     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000110DF                 jz      loc_11379
.text:00000000000110E5                 cmp     r15d, 2Dh ; '-'
.text:00000000000110E9                 jz      loc_11C13
.text:00000000000110EF                 mov     byte ptr [rsp+4F8h+var_4C0], 2Bh ; '+'
.text:00000000000110F4
.text:00000000000110F4 loc_110F4:                              ; CODE XREF: __strftime_internal+1421↓j
.text:00000000000110F4                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000110F8                 lea     rcx, [r9+17h]
.text:00000000000110FC                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011101                 sub     rcx, r8
.text:0000000000011104                 lea     r12d, [rax-1]
.text:0000000000011108                 sub     rdx, r14
.text:000000000001110B                 sub     r12d, ecx
.text:000000000001110E                 test    r12d, r12d
.text:0000000000011111                 jle     loc_11B5C
.text:0000000000011117                 cmp     r15d, 5Fh ; '_'
.text:000000000001111B                 jz      loc_11AD6
.text:0000000000011121                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011126                 cmp     rax, rdx
.text:0000000000011129                 mov     rdi, rax
.text:000000000001112C                 jnb     loc_1060C
.text:0000000000011132                 test    r10d, r10d
.text:0000000000011135                 mov     eax, 0
.text:000000000001113A                 mov     esi, 1
.text:000000000001113F                 cmovns  eax, r10d
.text:0000000000011143                 cdqe
.text:0000000000011145                 test    rax, rax
.text:0000000000011148                 cmovnz  rsi, rax
.text:000000000001114C                 cmp     rsi, rdx
.text:000000000001114F                 jnb     loc_1060C
.text:0000000000011155                 add     r14, rsi
.text:0000000000011158                 test    rbp, rbp
.text:000000000001115B                 movsxd  r9, r12d
.text:000000000001115E                 mov     r12, rbx
.text:0000000000011161                 jz      loc_11204
.text:0000000000011167                 test    edi, edi
.text:0000000000011169                 jnz     short loc_111BF
.text:000000000001116B                 cmp     rax, 1
.text:000000000001116F                 jbe     short loc_111BF
.text:0000000000011171                 movsxd  rdx, r10d
.text:0000000000011174                 mov     [rsp+4F8h+var_4A0], r8
.text:0000000000011179                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000001117E                 sub     rdx, 1          ; n
.text:0000000000011182                 cmp     r15d, 30h ; '0'
.text:0000000000011186                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000001118B                 lea     r12, [rbp+rdx+0]
.text:0000000000011190                 jz      loc_11F61
.text:0000000000011196                 cmp     r15d, 2Bh ; '+'
.text:000000000001119A                 jz      loc_11F61
.text:00000000000111A0                 mov     rdi, rbp        ; s
.text:00000000000111A3                 mov     esi, 20h ; ' '  ; c
.text:00000000000111A8                 mov     rbp, r12
.text:00000000000111AB                 call    _memset
.text:00000000000111B0                 mov     r8, [rsp+4F8h+var_4A0]
.text:00000000000111B5                 mov     r9, [rsp+4F8h+var_4A8]
.text:00000000000111BA                 mov     rcx, [rsp+4F8h+var_4B8]
.text:00000000000111BF
.text:00000000000111BF loc_111BF:                              ; CODE XREF: __strftime_internal+C29↑j
.text:00000000000111BF                                         ; __strftime_internal+C2F↑j ...
.text:00000000000111BF                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:00000000000111C4                 add     rbp, 1
.text:00000000000111C8                 mov     r12, rbx
.text:00000000000111CB                 mov     [rbp-1], al
.text:00000000000111CE
.text:00000000000111CE loc_111CE:                              ; CODE XREF: __strftime_internal+1807↓j
.text:00000000000111CE                 test    rbp, rbp
.text:00000000000111D1                 jz      short loc_11204
.text:00000000000111D3                 mov     rdx, r9         ; n
.text:00000000000111D6                 mov     rdi, rbp        ; s
.text:00000000000111D9                 mov     esi, 30h ; '0'  ; c
.text:00000000000111DE                 mov     [rsp+4F8h+var_4A8], r8
.text:00000000000111E3                 mov     [rsp+4F8h+var_4B8], rcx
.text:00000000000111E8                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:00000000000111ED                 call    _memset
.text:00000000000111F2                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000111F7                 mov     r8, [rsp+4F8h+var_4A8]
.text:00000000000111FC                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011201                 add     rbp, r9
.text:0000000000011204
.text:0000000000011204 loc_11204:                              ; CODE XREF: __strftime_internal+C21↑j
.text:0000000000011204                                         ; __strftime_internal+C91↑j
.text:0000000000011204                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011209                 add     r14, r9
.text:000000000001120C                 xor     r11d, r11d
.text:000000000001120F                 xor     r10d, r10d
.text:0000000000011212                 sub     rdx, r14
.text:0000000000011215
.text:0000000000011215 loc_11215:                              ; CODE XREF: __strftime_internal+E72↓j
.text:0000000000011215                                         ; __strftime_internal+14D7↓j ...
.text:0000000000011215                 cmp     rcx, r11
.text:0000000000011218                 mov     rbx, r11
.text:000000000001121B                 cmovnb  rbx, rcx
.text:000000000001121F                 cmp     rbx, rdx
.text:0000000000011222                 jnb     loc_1060C
.text:0000000000011228                 test    rbp, rbp
.text:000000000001122B                 jz      loc_10A3E
.text:0000000000011231                 mov     esi, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011235                 test    esi, esi
.text:0000000000011237                 jnz     short loc_11288
.text:0000000000011239                 cmp     rcx, r11
.text:000000000001123C                 jnb     short loc_11288
.text:000000000001123E                 movsxd  rdx, r10d
.text:0000000000011241                 mov     [rsp+4F8h+var_4B0], r8
.text:0000000000011246                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000001124B                 sub     rdx, rcx        ; n
.text:000000000001124E                 cmp     r15d, 30h ; '0'
.text:0000000000011252                 lea     rax, [rbp+rdx+0]
.text:0000000000011257                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000001125C                 jz      loc_11A9A
.text:0000000000011262                 cmp     r15d, 2Bh ; '+'
.text:0000000000011266                 jz      loc_11A9A
.text:000000000001126C                 mov     rdi, rbp        ; s
.text:000000000001126F                 mov     esi, 20h ; ' '  ; c
.text:0000000000011274                 call    _memset
.text:0000000000011279                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000001127E                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000011283                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011288
.text:0000000000011288 loc_11288:                              ; CODE XREF: __strftime_internal+CF7↑j
.text:0000000000011288                                         ; __strftime_internal+CFC↑j ...
.text:0000000000011288                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000001128D                 mov     rdx, rcx        ; n
.text:0000000000011290                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000011295                 mov     rsi, r8         ; src
.text:0000000000011298                 mov     rdi, rbp        ; dest
.text:000000000001129B                 jnz     loc_10A31
.text:00000000000112A1
.text:00000000000112A1 loc_112A1:                              ; CODE XREF: __strftime_internal+4EB↑j
.text:00000000000112A1                 call    _memcpy
.text:00000000000112A6                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000112AB                 jmp     loc_10A3B
.text:00000000000112B0 ; ---------------------------------------------------------------------------
.text:00000000000112B0
.text:00000000000112B0 loc_112B0:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000112B0                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000112B0                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 000000000001074F case 115
.text:00000000000112B6                 lea     rsi, [rsp+4F8h+var_488]
.text:00000000000112BB                 mov     rax, [r13+30h]
.text:00000000000112BF                 mov     rdi, [rsp+4F8h+var_4E8]
.text:00000000000112C4                 movaps  [rsp+4F8h+var_488], xmm0
.text:00000000000112C9                 mov     [rsp+4F8h+var_4C0], r10d
.text:00000000000112CE                 movdqu  xmm0, xmmword ptr [r13+10h]
.text:00000000000112D4                 mov     [rsp+4F8h+var_458], rax
.text:00000000000112DC                 movaps  [rsp+4F8h+var_478], xmm0
.text:00000000000112E4                 movdqu  xmm0, xmmword ptr [r13+20h]
.text:00000000000112EA                 movaps  [rsp+4F8h+var_468], xmm0
.text:00000000000112F2                 call    mktime_z
.text:00000000000112F7                 lea     r9, [rsp+4F8h+s]
.text:00000000000112FF                 mov     rsi, rax
.text:0000000000011302                 mov     rcx, rax
.text:0000000000011305                 mov     r11, 6666666666666667h
.text:000000000001130F                 mov     edi, 30h ; '0'
.text:0000000000011314                 mov     r10d, [rsp+4F8h+var_4C0]
.text:0000000000011319                 lea     r8, [r9+17h]
.text:000000000001131D                 nop     dword ptr [rax]
.text:0000000000011320
.text:0000000000011320 loc_11320:                              ; CODE XREF: __strftime_internal+E1E↓j
.text:0000000000011320                 mov     rax, rcx
.text:0000000000011323                 imul    r11
.text:0000000000011326                 mov     rax, rcx
.text:0000000000011329                 sar     rax, 3Fh
.text:000000000001132D                 sar     rdx, 2
.text:0000000000011331                 sub     rdx, rax
.text:0000000000011334                 mov     rax, rdx
.text:0000000000011337                 lea     rdx, [rdx+rdx*4]
.text:000000000001133B                 add     rdx, rdx
.text:000000000001133E                 sub     rcx, rdx
.text:0000000000011341                 mov     rdx, rcx
.text:0000000000011344                 mov     rcx, rax
.text:0000000000011347                 mov     eax, edi
.text:0000000000011349                 sub     eax, edx
.text:000000000001134B                 add     edx, 30h ; '0'
.text:000000000001134E                 test    rsi, rsi
.text:0000000000011351                 cmovs   edx, eax
.text:0000000000011354                 sub     r8, 1
.text:0000000000011358                 test    rcx, rcx
.text:000000000001135B                 mov     [r8], dl
.text:000000000001135E                 jnz     short loc_11320
.text:0000000000011360                 test    r10d, r10d
.text:0000000000011363                 mov     edi, 1
.text:0000000000011368                 cmovg   edi, r10d
.text:000000000001136C                 test    rsi, rsi
.text:000000000001136F                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:0000000000011373                 js      loc_11958
.text:0000000000011379
.text:0000000000011379 loc_11379:                              ; CODE XREF: __strftime_internal+B9F↑j
.text:0000000000011379                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000001137E                 lea     rcx, [r9+17h]
.text:0000000000011382                 sub     rcx, r8
.text:0000000000011385                 sub     rdx, r14
.text:0000000000011388                 cmp     r15d, 2Dh ; '-'
.text:000000000001138C                 jz      short loc_1139F
.text:000000000001138E                 mov     r12d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011393                 sub     r12d, ecx
.text:0000000000011396                 test    r12d, r12d
.text:0000000000011399                 jg      loc_11D29
.text:000000000001139F
.text:000000000001139F loc_1139F:                              ; CODE XREF: __strftime_internal+E4C↑j
.text:000000000001139F                 test    r10d, r10d
.text:00000000000113A2                 mov     r11d, 0
.text:00000000000113A8                 mov     r12, rbx
.text:00000000000113AB                 cmovns  r11d, r10d
.text:00000000000113AF                 movsxd  r11, r11d
.text:00000000000113B2                 jmp     loc_11215
.text:00000000000113B7 ; ---------------------------------------------------------------------------
.text:00000000000113B7
.text:00000000000113B7 loc_113B7:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000113B7                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000113B7                 movzx   eax, byte ptr [rbx+1] ; jumptable 000000000001074F case 58
.text:00000000000113BB                 lea     rdx, [rbx+1]
.text:00000000000113BF                 cmp     al, 3Ah ; ':'
.text:00000000000113C1                 jz      loc_11EDA
.text:00000000000113C7                 mov     r8d, 1
.text:00000000000113CD
.text:00000000000113CD loc_113CD:                              ; CODE XREF: __strftime_internal+19B5↓j
.text:00000000000113CD                 cmp     al, 7Ah ; 'z'
.text:00000000000113CF                 jnz     def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000113D5                 mov     rbx, rdx
.text:00000000000113D8                 jmp     loc_10F6F
.text:00000000000113DD ; ---------------------------------------------------------------------------
.text:00000000000113DD
.text:00000000000113DD loc_113DD:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000113DD                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000113DD                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F cases 71,86,103
.text:00000000000113E1                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000113E7                 mov     edi, [r13+14h]
.text:00000000000113EB                 mov     r8d, [r13+1Ch]
.text:00000000000113EF                 mov     edx, 92492493h
.text:00000000000113F4                 mov     eax, edi
.text:00000000000113F6                 mov     ecx, r8d
.text:00000000000113F9                 sar     eax, 1Fh
.text:00000000000113FC                 and     eax, 190h
.text:0000000000011401                 lea     r12d, [rdi+rax-64h]
.text:0000000000011406                 mov     eax, [r13+18h]
.text:000000000001140A                 sub     ecx, eax
.text:000000000001140C                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000011410                 add     ecx, 17Eh
.text:0000000000011416                 mov     eax, ecx
.text:0000000000011418                 imul    edx
.text:000000000001141A                 lea     eax, [rdx+rcx]
.text:000000000001141D                 mov     edx, ecx
.text:000000000001141F                 sar     edx, 1Fh
.text:0000000000011422                 sar     eax, 2
.text:0000000000011425                 sub     eax, edx
.text:0000000000011427                 lea     edx, ds:0[rax*8]
.text:000000000001142E                 sub     edx, eax
.text:0000000000011430                 mov     eax, edx
.text:0000000000011432                 mov     edx, r8d
.text:0000000000011435                 sub     edx, ecx
.text:0000000000011437                 lea     eax, [rdx+rax+3]
.text:000000000001143B                 test    eax, eax
.text:000000000001143D                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000011441                 js      loc_11D68
.text:0000000000011447                 test    r12b, 3
.text:000000000001144B                 mov     eax, 16Dh
.text:0000000000011450                 jnz     short loc_11497
.text:0000000000011452                 mov     ecx, 51EB851Fh
.text:0000000000011457                 mov     eax, r12d
.text:000000000001145A                 imul    ecx
.text:000000000001145C                 mov     eax, r12d
.text:000000000001145F                 sar     eax, 1Fh
.text:0000000000011462                 mov     dword ptr [rsp+4F8h+var_4B0], eax
.text:0000000000011466                 mov     ecx, edx
.text:0000000000011468                 sar     edx, 5
.text:000000000001146B                 sub     edx, eax
.text:000000000001146D                 mov     eax, 16Eh
.text:0000000000011472                 imul    edx, 64h ; 'd'
.text:0000000000011475                 cmp     r12d, edx
.text:0000000000011478                 jnz     short loc_11497
.text:000000000001147A                 sar     ecx, 7
.text:000000000001147D                 mov     eax, ecx
.text:000000000001147F                 sub     eax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011483                 imul    eax, 190h
.text:0000000000011489                 cmp     r12d, eax
.text:000000000001148C                 setz    al
.text:000000000001148F                 movzx   eax, al
.text:0000000000011492                 add     eax, 16Dh
.text:0000000000011497
.text:0000000000011497 loc_11497:                              ; CODE XREF: __strftime_internal+F10↑j
.text:0000000000011497                                         ; __strftime_internal+F38↑j
.text:0000000000011497                 sub     r8d, eax
.text:000000000001149A                 mov     edx, 92492493h
.text:000000000001149F                 mov     ecx, r8d
.text:00000000000114A2                 sub     ecx, [rsp+4F8h+var_4C0]
.text:00000000000114A6                 add     ecx, 17Eh
.text:00000000000114AC                 mov     eax, ecx
.text:00000000000114AE                 sub     r8d, ecx
.text:00000000000114B1                 imul    edx
.text:00000000000114B3                 lea     eax, [rdx+rcx]
.text:00000000000114B6                 mov     edx, ecx
.text:00000000000114B8                 sar     edx, 1Fh
.text:00000000000114BB                 sar     eax, 2
.text:00000000000114BE                 sub     eax, edx
.text:00000000000114C0                 lea     edx, ds:0[rax*8]
.text:00000000000114C7                 sub     edx, eax
.text:00000000000114C9                 lea     ecx, [r8+rdx+3]
.text:00000000000114CE                 mov     r8d, 1
.text:00000000000114D4                 test    ecx, ecx
.text:00000000000114D6                 jns     short loc_114DF
.text:00000000000114D8                 mov     ecx, dword ptr [rsp+4F8h+var_4B8]
.text:00000000000114DC                 xor     r8d, r8d
.text:00000000000114DF
.text:00000000000114DF loc_114DF:                              ; CODE XREF: __strftime_internal+F96↑j
.text:00000000000114DF                                         ; __strftime_internal+18B0↓j
.text:00000000000114DF                 cmp     sil, 47h ; 'G'
.text:00000000000114E3                 jz      loc_11C26
.text:00000000000114E9                 cmp     sil, 67h ; 'g'
.text:00000000000114ED                 jnz     loc_11E1F
.text:00000000000114F3                 mov     ecx, 51EB851Fh
.text:00000000000114F8                 mov     eax, edi
.text:00000000000114FA                 mov     esi, edi
.text:00000000000114FC                 imul    ecx
.text:00000000000114FE                 mov     eax, edx
.text:0000000000011500                 mov     edx, edi
.text:0000000000011502                 sar     edx, 1Fh
.text:0000000000011505                 sar     eax, 5
.text:0000000000011508                 sub     eax, edx
.text:000000000001150A                 imul    eax, 64h ; 'd'
.text:000000000001150D                 sub     esi, eax
.text:000000000001150F                 add     esi, r8d
.text:0000000000011512                 mov     eax, esi
.text:0000000000011514                 imul    ecx
.text:0000000000011516                 mov     eax, esi
.text:0000000000011518                 sar     eax, 1Fh
.text:000000000001151B                 mov     ecx, edx
.text:000000000001151D                 sar     ecx, 5
.text:0000000000011520                 sub     ecx, eax
.text:0000000000011522                 imul    ecx, 64h ; 'd'
.text:0000000000011525                 sub     esi, ecx
.text:0000000000011527                 mov     ecx, esi
.text:0000000000011529                 jns     loc_10F19
.text:000000000001152F                 mov     eax, 0FFFFF894h
.text:0000000000011534                 sub     eax, r8d
.text:0000000000011537                 cmp     edi, eax
.text:0000000000011539                 jge     loc_11FDA
.text:000000000001153F                 neg     ecx
.text:0000000000011541                 test    r15d, r15d
.text:0000000000011544                 jnz     loc_10F22
.text:000000000001154A
.text:000000000001154A loc_1154A:                              ; CODE XREF: __strftime_internal+9DC↑j
.text:000000000001154A                                         ; __strftime_internal+1AA0↓j
.text:000000000001154A                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000001154F                 mov     eax, 1
.text:0000000000011554                 cmp     r15d, 2Bh ; '+'
.text:0000000000011558                 jz      loc_11FBA
.text:000000000001155E                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000011563                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011568                 mov     edi, 2
.text:000000000001156D                 xor     esi, esi
.text:000000000001156F                 jmp     loc_10AB7
.text:0000000000011574 ; ---------------------------------------------------------------------------
.text:0000000000011574
.text:0000000000011574 loc_11574:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011574                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011574                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 100
.text:0000000000011578                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000001157E                 mov     ecx, [r13+0Ch]
.text:0000000000011582                 mov     edi, 2
.text:0000000000011587                 jmp     loc_10AA0
.text:000000000001158C ; ---------------------------------------------------------------------------
.text:000000000001158C
.text:000000000001158C loc_1158C:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001158C                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001158C                 mov     eax, [r13+18h]  ; jumptable 000000000001074F case 117
.text:0000000000011590                 mov     edx, 92492493h
.text:0000000000011595                 mov     edi, 1
.text:000000000001159A                 lea     ecx, [rax+6]
.text:000000000001159D                 mov     eax, ecx
.text:000000000001159F                 imul    edx
.text:00000000000115A1                 lea     eax, [rdx+rcx]
.text:00000000000115A4                 mov     edx, ecx
.text:00000000000115A6                 sar     edx, 1Fh
.text:00000000000115A9                 sar     eax, 2
.text:00000000000115AC                 sub     eax, edx
.text:00000000000115AE                 lea     edx, ds:0[rax*8]
.text:00000000000115B5                 sub     edx, eax
.text:00000000000115B7                 sub     ecx, edx
.text:00000000000115B9                 add     ecx, 1
.text:00000000000115BC                 jmp     loc_10AA0
.text:00000000000115C1 ; ---------------------------------------------------------------------------
.text:00000000000115C1
.text:00000000000115C1 loc_115C1:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000115C1                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000115C1                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 119
.text:00000000000115C5                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000115CB                 mov     ecx, [r13+18h]
.text:00000000000115CF                 mov     edi, 1
.text:00000000000115D4                 jmp     loc_10AA0
.text:00000000000115D9 ; ---------------------------------------------------------------------------
.text:00000000000115D9
.text:00000000000115D9 loc_115D9:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000115D9                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000115D9                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 87
.text:00000000000115DD                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000115E3                 mov     eax, [r13+18h]
.text:00000000000115E7                 mov     ecx, 92492493h
.text:00000000000115EC                 lea     esi, [rax+6]
.text:00000000000115EF                 mov     eax, esi
.text:00000000000115F1                 imul    ecx
.text:00000000000115F3                 lea     eax, [rdx+rsi]
.text:00000000000115F6                 mov     edx, esi
.text:00000000000115F8                 sar     edx, 1Fh
.text:00000000000115FB                 sar     eax, 2
.text:00000000000115FE                 sub     eax, edx
.text:0000000000011600                 lea     edx, ds:0[rax*8]
.text:0000000000011607                 sub     edx, eax
.text:0000000000011609                 mov     eax, edx
.text:000000000001160B                 mov     edx, [r13+1Ch]
.text:000000000001160F                 sub     eax, esi
.text:0000000000011611                 lea     esi, [rax+rdx+7]
.text:0000000000011615                 mov     eax, esi
.text:0000000000011617                 imul    ecx
.text:0000000000011619                 jmp     loc_10D82
.text:000000000001161E ; ---------------------------------------------------------------------------
.text:000000000001161E
.text:000000000001161E loc_1161E:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001161E                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001161E                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 66
.text:0000000000011622                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011628                 test    r8b, r8b
.text:000000000001162B                 jz      loc_10905
.text:0000000000011631                 mov     byte ptr [rsp+4F8h+var_4C8], r8b
.text:0000000000011636                 jmp     loc_10902       ; jumptable 000000000001074F case 114
.text:000000000001163B ; ---------------------------------------------------------------------------
.text:000000000001163B
.text:000000000001163B loc_1163B:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001163B                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001163B                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 67
.text:000000000001163F                 jz      loc_11ACA
.text:0000000000011645                 mov     esi, [r13+14h]
.text:0000000000011649                 mov     edx, 51EB851Fh
.text:000000000001164E                 mov     eax, esi
.text:0000000000011650                 imul    edx
.text:0000000000011652                 mov     eax, edx
.text:0000000000011654                 mov     edx, esi
.text:0000000000011656                 sar     edx, 1Fh
.text:0000000000011659                 sar     eax, 5
.text:000000000001165C                 sub     eax, edx
.text:000000000001165E                 mov     edx, esi
.text:0000000000011660                 lea     ecx, [rax+13h]
.text:0000000000011663                 imul    eax, 64h ; 'd'
.text:0000000000011666                 sub     edx, eax
.text:0000000000011668                 mov     eax, edx
.text:000000000001166A                 shr     eax, 1Fh
.text:000000000001166D                 test    ecx, ecx
.text:000000000001166F                 setnle  dl
.text:0000000000011672                 and     eax, edx
.text:0000000000011674                 cmp     esi, 0FFFFF894h
.text:000000000001167A                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000001167F                 sub     ecx, eax
.text:0000000000011681                 cmp     esi, 0FFFFF894h
.text:0000000000011687                 setnl   al
.text:000000000001168A                 test    r15d, r15d
.text:000000000001168D                 jnz     loc_10F2C
.text:0000000000011693                 cmp     [rsp+4F8h+var_4CC], 2Bh ; '+'
.text:0000000000011698                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000001169D                 jnz     loc_10F36
.text:00000000000116A3
.text:00000000000116A3 loc_116A3:                              ; CODE XREF: __strftime_internal+9F0↑j
.text:00000000000116A3                 mov     edi, 2
.text:00000000000116A8                 mov     edx, 63h ; 'c'
.text:00000000000116AD
.text:00000000000116AD loc_116AD:                              ; CODE XREF: __strftime_internal+171D↓j
.text:00000000000116AD                 cmp     edx, ecx
.text:00000000000116AF                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:00000000000116B4                 mov     r15d, 2Bh ; '+'
.text:00000000000116BA                 jb      loc_10DE9
.text:00000000000116C0
.text:00000000000116C0 loc_116C0:                              ; CODE XREF: __strftime_internal+1A84↓j
.text:00000000000116C0                 cmp     r10d, edi
.text:00000000000116C3                 mov     r15d, 2Bh ; '+'
.text:00000000000116C9                 setnle  byte ptr [rsp+4F8h+var_4B8]
.text:00000000000116CE                 xor     esi, esi
.text:00000000000116D0                 jmp     loc_10AB7
.text:00000000000116D5 ; ---------------------------------------------------------------------------
.text:00000000000116D5
.text:00000000000116D5 loc_116D5:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000116D5                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000116D5                 test    r11d, r11d      ; jumptable 000000000001074F case 68
.text:00000000000116D8                 jnz     def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000116DE                 lea     rax, aMDY       ; "%m/%d/%y"
.text:00000000000116E5                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:00000000000116ED                 mov     [rsp+4F8h+var_4B8], rax
.text:00000000000116F2                 jmp     loc_10BB2
.text:00000000000116F7 ; ---------------------------------------------------------------------------
.text:00000000000116F7
.text:00000000000116F7 loc_116F7:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000116F7                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000116F7                 test    r11d, r11d      ; jumptable 000000000001074F case 70
.text:00000000000116FA                 jnz     def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011700                 test    r15d, r15d
.text:0000000000011703                 jnz     loc_11EFD
.text:0000000000011709                 test    r10d, r10d
.text:000000000001170C                 jns     loc_11EFD
.text:0000000000011712                 lea     rax, aYMD_0     ; "%Y-%m-%d"
.text:0000000000011719                 mov     [rsp+4F8h+var_4C0], 4
.text:0000000000011721                 mov     r15d, 2Bh ; '+'
.text:0000000000011727                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000001172C                 jmp     loc_10BB2
.text:0000000000011731 ; ---------------------------------------------------------------------------
.text:0000000000011731
.text:0000000000011731 loc_11731:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011731                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011731                 movzx   ecx, byte ptr [rbx-1] ; jumptable 000000000001074F case 0
.text:0000000000011735                 lea     r9, [rbx-1]
.text:0000000000011739
.text:0000000000011739 loc_11739:                              ; CODE XREF: __strftime_internal+1995↓j
.text:0000000000011739                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000001173E                 mov     eax, 0
.text:0000000000011743                 sub     rdx, r14
.text:0000000000011746                 test    r10d, r10d
.text:0000000000011749                 cmovns  eax, r10d
.text:000000000001174D                 cmp     cl, 25h ; '%'
.text:0000000000011750                 cdqe
.text:0000000000011752                 jnz     loc_1078B
.text:0000000000011758                 test    rax, rax
.text:000000000001175B                 mov     ecx, 1
.text:0000000000011760                 mov     r12, r9
.text:0000000000011763                 cmovnz  rcx, rax
.text:0000000000011767                 mov     r8d, 1
.text:000000000001176D                 jmp     loc_107D1
.text:0000000000011772 ; ---------------------------------------------------------------------------
.text:0000000000011772
.text:0000000000011772 loc_11772:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011772                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011772                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 72
.text:0000000000011776                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000001177C                 mov     ecx, [r13+8]
.text:0000000000011780                 mov     edi, 2
.text:0000000000011785                 jmp     loc_10AA0
.text:000000000001178A ; ---------------------------------------------------------------------------
.text:000000000001178A
.text:000000000001178A loc_1178A:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001178A                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001178A                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 77
.text:000000000001178E                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011794                 mov     ecx, [r13+4]
.text:0000000000011798                 mov     edi, 2
.text:000000000001179D                 jmp     loc_10AA0
.text:00000000000117A2 ; ---------------------------------------------------------------------------
.text:00000000000117A2
.text:00000000000117A2 loc_117A2:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000117A2                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000117A2                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 78
.text:00000000000117A6                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000117AC                 cmp     r10d, 0FFFFFFFFh
.text:00000000000117B0                 jz      loc_11D01
.text:00000000000117B6                 cmp     r10d, 8
.text:00000000000117BA                 jg      loc_11FC9
.text:00000000000117C0                 mov     ecx, [rsp+4F8h+arg_18]
.text:00000000000117C7                 mov     esi, r10d
.text:00000000000117CA                 mov     edi, 66666667h
.text:00000000000117CF                 nop
.text:00000000000117D0
.text:00000000000117D0 loc_117D0:                              ; CODE XREF: __strftime_internal+12A4↓j
.text:00000000000117D0                 mov     eax, ecx
.text:00000000000117D2                 add     esi, 1
.text:00000000000117D5                 sar     ecx, 1Fh
.text:00000000000117D8                 imul    edi
.text:00000000000117DA                 sar     edx, 2
.text:00000000000117DD                 sub     edx, ecx
.text:00000000000117DF                 cmp     esi, 9
.text:00000000000117E2                 mov     ecx, edx
.text:00000000000117E4                 jnz     short loc_117D0
.text:00000000000117E6
.text:00000000000117E6 loc_117E6:                              ; CODE XREF: __strftime_internal+1A90↓j
.text:00000000000117E6                 mov     edi, r10d
.text:00000000000117E9                 jmp     loc_10AA0
.text:00000000000117EE ; ---------------------------------------------------------------------------
.text:00000000000117EE
.text:00000000000117EE loc_117EE:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000117EE                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000117EE                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 73
.text:00000000000117F2                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000117F8                 mov     ecx, [rsp+4F8h+var_490]
.text:00000000000117FC                 mov     edi, 2
.text:0000000000011801                 jmp     loc_10AA0
.text:0000000000011806 ; ---------------------------------------------------------------------------
.text:0000000000011806
.text:0000000000011806 loc_11806:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011806                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011806                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 108
.text:000000000001180A                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011810                 mov     ecx, [rsp+4F8h+var_490]
.text:0000000000011814
.text:0000000000011814 loc_11814:                              ; CODE XREF: __strftime_internal+13E4↓j
.text:0000000000011814                                         ; __strftime_internal+13F7↓j
.text:0000000000011814                 test    r15d, r15d
.text:0000000000011817                 mov     edi, 2
.text:000000000001181C                 jnz     loc_10AA0
.text:0000000000011822                 mov     r15d, 5Fh ; '_'
.text:0000000000011828                 jmp     loc_10AA0
.text:000000000001182D ; ---------------------------------------------------------------------------
.text:000000000001182D
.text:000000000001182D loc_1182D:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001182D                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001182D                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 109
.text:0000000000011831                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011837                 mov     eax, [r13+10h]
.text:000000000001183B                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000011840                 mov     edi, 2
.text:0000000000011845                 cmp     eax, 0FFFFFFFFh
.text:0000000000011848                 lea     ecx, [rax+1]
.text:000000000001184B                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011850                 cmp     eax, 0FFFFFFFFh
.text:0000000000011853                 setnl   al
.text:0000000000011856                 xor     esi, esi
.text:0000000000011858                 jmp     loc_10AB7
.text:000000000001185D ; ---------------------------------------------------------------------------
.text:000000000001185D
.text:000000000001185D loc_1185D:                              ; CODE XREF: __strftime_internal+20F↑j
.text:000000000001185D                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:000000000001185D                 test    r10d, r10d      ; jumptable 000000000001074F case 110
.text:0000000000011860                 mov     ecx, 0
.text:0000000000011865                 mov     eax, 1
.text:000000000001186A                 cmovns  ecx, r10d
.text:000000000001186E                 movsxd  rcx, ecx
.text:0000000000011871                 test    rcx, rcx
.text:0000000000011874                 cmovz   rcx, rax
.text:0000000000011878                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000001187D                 sub     rax, r14
.text:0000000000011880                 cmp     rax, rcx
.text:0000000000011883                 jbe     loc_1060C
.text:0000000000011889                 test    rbp, rbp
.text:000000000001188C                 jz      loc_10B78
.text:0000000000011892                 cmp     r10d, 1
.text:0000000000011896                 jle     short loc_118D2
.text:0000000000011898                 movsxd  rdx, r10d
.text:000000000001189B                 mov     [rsp+4F8h+var_4C8], rcx
.text:00000000000118A0                 sub     rdx, 1          ; n
.text:00000000000118A4                 cmp     r15d, 30h ; '0'
.text:00000000000118A8                 lea     r12, [rbp+rdx+0]
.text:00000000000118AD                 jz      loc_11E7E
.text:00000000000118B3                 cmp     r15d, 2Bh ; '+'
.text:00000000000118B7                 jz      loc_11E7E
.text:00000000000118BD                 mov     rdi, rbp        ; s
.text:00000000000118C0                 mov     esi, 20h ; ' '  ; c
.text:00000000000118C5                 mov     rbp, r12
.text:00000000000118C8                 call    _memset
.text:00000000000118CD                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000118D2
.text:00000000000118D2 loc_118D2:                              ; CODE XREF: __strftime_internal+1356↑j
.text:00000000000118D2                                         ; __strftime_internal+1953↓j
.text:00000000000118D2                 mov     byte ptr [rbp+0], 0Ah
.text:00000000000118D6                 add     rbp, 1
.text:00000000000118DA                 jmp     loc_10B78
.text:00000000000118DF ; ---------------------------------------------------------------------------
.text:00000000000118DF
.text:00000000000118DF loc_118DF:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000118DF                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000118DF                 xor     eax, eax        ; jumptable 000000000001074F case 112
.text:00000000000118E1                 jmp     loc_10B88
.text:00000000000118E6 ; ---------------------------------------------------------------------------
.text:00000000000118E6
.text:00000000000118E6 loc_118E6:                              ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000118E6                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:00000000000118E6                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 106
.text:00000000000118EA                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000118F0                 mov     eax, [r13+1Ch]
.text:00000000000118F4                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000118F9                 mov     edi, 3
.text:00000000000118FE                 cmp     eax, 0FFFFFFFFh
.text:0000000000011901                 lea     ecx, [rax+1]
.text:0000000000011904                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011909                 cmp     eax, 0FFFFFFFFh
.text:000000000001190C                 setnl   al
.text:000000000001190F                 xor     esi, esi
.text:0000000000011911                 jmp     loc_10AB7
.text:0000000000011916 ; ---------------------------------------------------------------------------
.text:0000000000011916
.text:0000000000011916 loc_11916:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011916                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011916                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 107
.text:000000000001191A                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011920                 mov     ecx, [r13+8]
.text:0000000000011924                 jmp     loc_11814
.text:0000000000011929 ; ---------------------------------------------------------------------------
.text:0000000000011929
.text:0000000000011929 loc_11929:                              ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000011929                                         ; DATA XREF: .rodata:jpt_1074F↓o
.text:0000000000011929                 cmp     r11d, 45h ; 'E' ; jumptable 000000000001074F case 101
.text:000000000001192D                 jz      def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011933                 mov     ecx, [r13+0Ch]
.text:0000000000011937                 jmp     loc_11814
.text:0000000000011937 ; ---------------------------------------------------------------------------
.text:000000000001193C                 align 20h
.text:0000000000011940
.text:0000000000011940 loc_11940:                              ; CODE XREF: __strftime_internal+57B↑j
.text:0000000000011940                                         ; __strftime_internal+583↑j
.text:0000000000011940                 mov     eax, ecx
.text:0000000000011942                 neg     eax
.text:0000000000011944                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011949                 cmovnz  ecx, eax
.text:000000000001194C                 jmp     loc_11070
.text:000000000001194C ; ---------------------------------------------------------------------------
.text:0000000000011951                 align 8
.text:0000000000011958
.text:0000000000011958 loc_11958:                              ; CODE XREF: __strftime_internal+B94↑j
.text:0000000000011958                                         ; __strftime_internal+E33↑j
.text:0000000000011958                 cmp     r15d, 2Dh ; '-'
.text:000000000001195C                 mov     byte ptr [rsp+4F8h+var_4C0], 2Dh ; '-'
.text:0000000000011961                 jnz     loc_110F4
.text:0000000000011967
.text:0000000000011967 loc_11967:                              ; CODE XREF: __strftime_internal+16D9↓j
.text:0000000000011967                 test    r10d, r10d
.text:000000000001196A                 mov     r11d, 0
.text:0000000000011970                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000011975                 cmovns  r11d, r10d
.text:0000000000011979                 mov     r12d, 1
.text:000000000001197F                 movsxd  r11, r11d
.text:0000000000011982                 test    r11, r11
.text:0000000000011985                 cmovnz  r12, r11
.text:0000000000011989                 sub     rax, r14
.text:000000000001198C                 cmp     rax, r12
.text:000000000001198F                 jbe     loc_1060C
.text:0000000000011995                 test    rbp, rbp
.text:0000000000011998                 jz      short loc_119FC
.text:000000000001199A                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000001199E                 test    eax, eax
.text:00000000000119A0                 jnz     short loc_119F4
.text:00000000000119A2                 cmp     r11, 1
.text:00000000000119A6                 jbe     short loc_119F4
.text:00000000000119A8                 movsxd  rax, r10d
.text:00000000000119AB                 mov     rdi, rbp        ; s
.text:00000000000119AE                 mov     esi, 20h ; ' '  ; c
.text:00000000000119B3                 lea     rcx, [rax-1]
.text:00000000000119B7                 mov     [rsp+4F8h+var_498], r9
.text:00000000000119BC                 mov     [rsp+4F8h+var_4A0], r8
.text:00000000000119C1                 mov     [rsp+4F8h+var_4A8], r11
.text:00000000000119C6                 mov     dword ptr [rsp+4F8h+var_4B8], r10d
.text:00000000000119CB                 mov     rdx, rcx        ; n
.text:00000000000119CE                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:00000000000119D3                 call    _memset
.text:00000000000119D8                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000119DD                 mov     r9, [rsp+4F8h+var_498]
.text:00000000000119E2                 mov     r8, [rsp+4F8h+var_4A0]
.text:00000000000119E7                 mov     r11, [rsp+4F8h+var_4A8]
.text:00000000000119EC                 mov     r10d, dword ptr [rsp+4F8h+var_4B8]
.text:00000000000119F1                 add     rbp, rcx
.text:00000000000119F4
.text:00000000000119F4 loc_119F4:                              ; CODE XREF: __strftime_internal+1460↑j
.text:00000000000119F4                                         ; __strftime_internal+1466↑j
.text:00000000000119F4                 mov     [rbp+0], r15b
.text:00000000000119F8                 add     rbp, 1
.text:00000000000119FC
.text:00000000000119FC loc_119FC:                              ; CODE XREF: __strftime_internal+1458↑j
.text:00000000000119FC                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011A01                 lea     rcx, [r9+17h]
.text:0000000000011A05                 add     r14, r12
.text:0000000000011A08                 mov     r15d, 2Dh ; '-'
.text:0000000000011A0E                 mov     r12, rbx
.text:0000000000011A11                 sub     rcx, r8
.text:0000000000011A14                 sub     rdx, r14
.text:0000000000011A17                 jmp     loc_11215
.text:0000000000011A17 ; ---------------------------------------------------------------------------
.text:0000000000011A1C                 align 20h
.text:0000000000011A20
.text:0000000000011A20 loc_11A20:                              ; CODE XREF: __strftime_internal+30D↑j
.text:0000000000011A20                 call    _memcpy
.text:0000000000011A25                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000011A2A                 mov     r8, [rsp+4F8h+var_4C8]
.text:0000000000011A2F                 jmp     loc_10862
.text:0000000000011A2F ; ---------------------------------------------------------------------------
.text:0000000000011A34                 align 8
.text:0000000000011A38
.text:0000000000011A38 loc_11A38:                              ; CODE XREF: __strftime_internal+4D8↑j
.text:0000000000011A38                 mov     rdi, rbp
.text:0000000000011A3B                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000011A40                 call    memcpy_lowcase
.text:0000000000011A45                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000011A4A                 jmp     loc_10A3B
.text:0000000000011A4F ; ---------------------------------------------------------------------------
.text:0000000000011A4F
.text:0000000000011A4F loc_11A4F:                              ; CODE XREF: __strftime_internal+49C↑j
.text:0000000000011A4F                                         ; __strftime_internal+4A6↑j
.text:0000000000011A4F                 mov     rdi, rbp        ; s
.text:0000000000011A52                 mov     esi, 30h ; '0'  ; c
.text:0000000000011A57                 call    _memset
.text:0000000000011A5C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000011A61                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:0000000000011A67                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000011A6C                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000011A71                 jmp     loc_10A0E
.text:0000000000011A76 ; ---------------------------------------------------------------------------
.text:0000000000011A76
.text:0000000000011A76 loc_11A76:                              ; CODE XREF: __strftime_internal+2C6↑j
.text:0000000000011A76                                         ; __strftime_internal+2D0↑j
.text:0000000000011A76                 mov     rdi, rbp        ; s
.text:0000000000011A79                 mov     esi, 30h ; '0'  ; c
.text:0000000000011A7E                 mov     rbp, rbx
.text:0000000000011A81                 call    _memset
.text:0000000000011A86                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000011A8B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011A90                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000011A95                 jmp     loc_10835
.text:0000000000011A9A ; ---------------------------------------------------------------------------
.text:0000000000011A9A
.text:0000000000011A9A loc_11A9A:                              ; CODE XREF: __strftime_internal+D1C↑j
.text:0000000000011A9A                                         ; __strftime_internal+D26↑j
.text:0000000000011A9A                 mov     rdi, rbp        ; s
.text:0000000000011A9D                 mov     esi, 30h ; '0'  ; c
.text:0000000000011AA2                 call    _memset
.text:0000000000011AA7                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000011AAC                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011AB1                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000011AB6                 jmp     loc_11288
.text:0000000000011ABB ; ---------------------------------------------------------------------------
.text:0000000000011ABB
.text:0000000000011ABB loc_11ABB:                              ; CODE XREF: __strftime_internal+64B↑j
.text:0000000000011ABB                 mov     esi, 70h ; 'p'
.text:0000000000011AC0                 mov     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000011AC5                 jmp     loc_10905
.text:0000000000011ACA ; ---------------------------------------------------------------------------
.text:0000000000011ACA
.text:0000000000011ACA loc_11ACA:                              ; CODE XREF: __strftime_internal+85B↑j
.text:0000000000011ACA                                         ; __strftime_internal+9A1↑j ...
.text:0000000000011ACA                 xor     edi, edi
.text:0000000000011ACC                 jmp     loc_10ACC
.text:0000000000011AD1 ; ---------------------------------------------------------------------------
.text:0000000000011AD1
.text:0000000000011AD1 loc_11AD1:                              ; CODE XREF: __strftime_internal+17ED↓j
.text:0000000000011AD1                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011AD6
.text:0000000000011AD6 loc_11AD6:                              ; CODE XREF: __strftime_internal+BDB↑j
.text:0000000000011AD6                 movsxd  r15, r12d
.text:0000000000011AD9                 cmp     r15, rdx
.text:0000000000011ADC                 jnb     loc_1060C
.text:0000000000011AE2                 test    rbp, rbp
.text:0000000000011AE5                 jz      short loc_11B18
.text:0000000000011AE7                 mov     rdi, rbp        ; s
.text:0000000000011AEA                 mov     rdx, r15        ; n
.text:0000000000011AED                 mov     esi, 20h ; ' '  ; c
.text:0000000000011AF2                 mov     dword ptr [rsp+4F8h+var_4A0], r10d
.text:0000000000011AF7                 mov     [rsp+4F8h+var_4A8], r9
.text:0000000000011AFC                 add     rbp, r15
.text:0000000000011AFF                 mov     [rsp+4F8h+var_4B8], r8
.text:0000000000011B04                 call    _memset
.text:0000000000011B09                 mov     r10d, dword ptr [rsp+4F8h+var_4A0]
.text:0000000000011B0E                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000011B13                 mov     r8, [rsp+4F8h+var_4B8]
.text:0000000000011B18
.text:0000000000011B18 loc_11B18:                              ; CODE XREF: __strftime_internal+15A5↑j
.text:0000000000011B18                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011B1D                 mov     eax, r10d
.text:0000000000011B20                 add     r14, r15
.text:0000000000011B23                 sub     eax, r12d
.text:0000000000011B26                 cmp     r10d, r12d
.text:0000000000011B29                 mov     r10d, 0
.text:0000000000011B2F                 cmovg   r10d, eax
.text:0000000000011B33                 sub     rdx, r14
.text:0000000000011B36                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011B3B                 jnz     loc_11C62
.text:0000000000011B41                 add     r9, 17h
.text:0000000000011B45                 movsxd  r11, r10d
.text:0000000000011B48                 mov     r12, rbx
.text:0000000000011B4B                 mov     rcx, r9
.text:0000000000011B4E                 mov     r15d, 5Fh ; '_'
.text:0000000000011B54                 sub     rcx, r8
.text:0000000000011B57                 jmp     loc_11215
.text:0000000000011B5C ; ---------------------------------------------------------------------------
.text:0000000000011B5C
.text:0000000000011B5C loc_11B5C:                              ; CODE XREF: __strftime_internal+BD1↑j
.text:0000000000011B5C                 test    r10d, r10d
.text:0000000000011B5F                 mov     r11d, 0
.text:0000000000011B65                 mov     r12d, 1
.text:0000000000011B6B                 cmovns  r11d, r10d
.text:0000000000011B6F                 movsxd  r11, r11d
.text:0000000000011B72                 test    r11, r11
.text:0000000000011B75                 cmovnz  r12, r11
.text:0000000000011B79                 cmp     r12, rdx
.text:0000000000011B7C                 jnb     loc_1060C
.text:0000000000011B82                 test    rbp, rbp
.text:0000000000011B85                 jz      short loc_11C00
.text:0000000000011B87                 mov     edi, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011B8B                 test    edi, edi
.text:0000000000011B8D                 jnz     short loc_11BF4
.text:0000000000011B8F                 cmp     r11, 1
.text:0000000000011B93                 jbe     short loc_11BF4
.text:0000000000011B95                 movsxd  rdx, r10d
.text:0000000000011B98                 mov     [rsp+4F8h+var_48C], r10d
.text:0000000000011B9D                 mov     [rsp+4F8h+var_498], r8
.text:0000000000011BA2                 sub     rdx, 1          ; n
.text:0000000000011BA6                 cmp     r15d, 30h ; '0'
.text:0000000000011BAA                 mov     [rsp+4F8h+var_4A0], rcx
.text:0000000000011BAF                 lea     rax, [rbp+rdx+0]
.text:0000000000011BB4                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000011BB9                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000011BBE                 jz      loc_11F8F
.text:0000000000011BC4                 cmp     r15d, 2Bh ; '+'
.text:0000000000011BC8                 jz      loc_11F8F
.text:0000000000011BCE                 mov     rdi, rbp        ; s
.text:0000000000011BD1                 mov     esi, 20h ; ' '  ; c
.text:0000000000011BD6                 call    _memset
.text:0000000000011BDB                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000011BE0                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000011BE5                 mov     r8, [rsp+4F8h+var_498]
.text:0000000000011BEA                 mov     rcx, [rsp+4F8h+var_4A0]
.text:0000000000011BEF                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000011BF4
.text:0000000000011BF4 loc_11BF4:                              ; CODE XREF: __strftime_internal+164D↑j
.text:0000000000011BF4                                         ; __strftime_internal+1653↑j ...
.text:0000000000011BF4                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011BF9                 add     rbp, 1
.text:0000000000011BFD                 mov     [rbp-1], al
.text:0000000000011C00
.text:0000000000011C00 loc_11C00:                              ; CODE XREF: __strftime_internal+1645↑j
.text:0000000000011C00                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011C05                 add     r14, r12
.text:0000000000011C08                 mov     r12, rbx
.text:0000000000011C0B                 sub     rdx, r14
.text:0000000000011C0E                 jmp     loc_11215
.text:0000000000011C13 ; ---------------------------------------------------------------------------
.text:0000000000011C13
.text:0000000000011C13 loc_11C13:                              ; CODE XREF: __strftime_internal+BA9↑j
.text:0000000000011C13                 mov     r15d, 2Bh ; '+'
.text:0000000000011C19                 jmp     loc_11967
.text:0000000000011C1E ; ---------------------------------------------------------------------------
.text:0000000000011C1E
.text:0000000000011C1E loc_11C1E:                              ; CODE XREF: __strftime_internal+A35↑j
.text:0000000000011C1E                 mov     r12, rbx
.text:0000000000011C21                 jmp     loc_10672
.text:0000000000011C26 ; ---------------------------------------------------------------------------
.text:0000000000011C26
.text:0000000000011C26 loc_11C26:                              ; CODE XREF: __strftime_internal+FA3↑j
.text:0000000000011C26                 mov     eax, 0FFFFF894h
.text:0000000000011C2B                 lea     ecx, [rdi+r8+76Ch]
.text:0000000000011C33                 sub     eax, r8d
.text:0000000000011C36                 cmp     edi, eax
.text:0000000000011C38                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011C3D                 setnl   al
.text:0000000000011C40                 test    r15d, r15d
.text:0000000000011C43                 jz      loc_10DD0
.text:0000000000011C49
.text:0000000000011C49 loc_11C49:                              ; CODE XREF: __strftime_internal+88A↑j
.text:0000000000011C49                 cmp     r15d, 2Bh ; '+'
.text:0000000000011C4D                 jnz     loc_10DDF
.text:0000000000011C53
.text:0000000000011C53 loc_11C53:                              ; CODE XREF: __strftime_internal+899↑j
.text:0000000000011C53                 mov     edi, 4
.text:0000000000011C58                 mov     edx, 270Fh
.text:0000000000011C5D                 jmp     loc_116AD
.text:0000000000011C62 ; ---------------------------------------------------------------------------
.text:0000000000011C62
.text:0000000000011C62 loc_11C62:                              ; CODE XREF: __strftime_internal+15FB↑j
.text:0000000000011C62                 movsxd  r15, r10d
.text:0000000000011C65                 mov     r12d, 1
.text:0000000000011C6B                 test    r15, r15
.text:0000000000011C6E                 cmovnz  r12, r15
.text:0000000000011C72                 cmp     r12, rdx
.text:0000000000011C75                 jnb     loc_1060C
.text:0000000000011C7B                 test    rbp, rbp
.text:0000000000011C7E                 jz      short loc_11CDB
.text:0000000000011C80                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011C85                 test    r11d, r11d
.text:0000000000011C88                 jnz     short loc_11CCF
.text:0000000000011C8A                 cmp     r15, 1
.text:0000000000011C8E                 jbe     short loc_11CCF
.text:0000000000011C90                 lea     rcx, [r15-1]
.text:0000000000011C94                 mov     rdi, rbp        ; s
.text:0000000000011C97                 mov     esi, 20h ; ' '  ; c
.text:0000000000011C9C                 mov     dword ptr [rsp+4F8h+var_498], r10d
.text:0000000000011CA1                 mov     [rsp+4F8h+var_4A0], r9
.text:0000000000011CA6                 mov     rdx, rcx        ; n
.text:0000000000011CA9                 mov     [rsp+4F8h+var_4A8], r8
.text:0000000000011CAE                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000011CB3                 call    _memset
.text:0000000000011CB8                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011CBD                 mov     r10d, dword ptr [rsp+4F8h+var_498]
.text:0000000000011CC2                 mov     r9, [rsp+4F8h+var_4A0]
.text:0000000000011CC7                 mov     r8, [rsp+4F8h+var_4A8]
.text:0000000000011CCC                 add     rbp, rcx
.text:0000000000011CCF
.text:0000000000011CCF loc_11CCF:                              ; CODE XREF: __strftime_internal+1748↑j
.text:0000000000011CCF                                         ; __strftime_internal+174E↑j
.text:0000000000011CCF                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011CD4                 add     rbp, 1
.text:0000000000011CD8                 mov     [rbp-1], al
.text:0000000000011CDB
.text:0000000000011CDB loc_11CDB:                              ; CODE XREF: __strftime_internal+173E↑j
.text:0000000000011CDB                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000011CE0                 add     r9, 17h
.text:0000000000011CE4                 add     r14, r12
.text:0000000000011CE7                 mov     rcx, r9
.text:0000000000011CEA                 mov     r11, r15
.text:0000000000011CED                 mov     r12, rbx
.text:0000000000011CF0                 sub     rcx, r8
.text:0000000000011CF3                 mov     r15d, 5Fh ; '_'
.text:0000000000011CF9                 sub     rdx, r14
.text:0000000000011CFC                 jmp     loc_11215
.text:0000000000011D01 ; ---------------------------------------------------------------------------
.text:0000000000011D01
.text:0000000000011D01 loc_11D01:                              ; CODE XREF: __strftime_internal+1270↑j
.text:0000000000011D01                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000011D08                 mov     edi, 9
.text:0000000000011D0D                 mov     r10d, 9
.text:0000000000011D13                 jmp     loc_10AA0
.text:0000000000011D18 ; ---------------------------------------------------------------------------
.text:0000000000011D18
.text:0000000000011D18 loc_11D18:                              ; CODE XREF: __strftime_internal+7A3↑j
.text:0000000000011D18                 mov     r12, rbx
.text:0000000000011D1B                 mov     r9, rbx
.text:0000000000011D1E                 mov     r8d, 1
.text:0000000000011D24                 jmp     loc_107D1
.text:0000000000011D29 ; ---------------------------------------------------------------------------
.text:0000000000011D29
.text:0000000000011D29 loc_11D29:                              ; CODE XREF: __strftime_internal+E59↑j
.text:0000000000011D29                 cmp     r15d, 5Fh ; '_'
.text:0000000000011D2D                 jz      loc_11AD1
.text:0000000000011D33                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000011D38                 cmp     rax, rdx
.text:0000000000011D3B                 jnb     loc_1060C
.text:0000000000011D41                 movsxd  r9, r12d
.text:0000000000011D44                 mov     r12, rbx
.text:0000000000011D47                 jmp     loc_111CE
.text:0000000000011D4C ; ---------------------------------------------------------------------------
.text:0000000000011D4C
.text:0000000000011D4C loc_11D4C:                              ; CODE XREF: __strftime_internal+70F↑j
.text:0000000000011D4C                                         ; __strftime_internal+719↑j
.text:0000000000011D4C                 mov     rdi, rbp        ; s
.text:0000000000011D4F                 mov     esi, 30h ; '0'  ; c
.text:0000000000011D54                 call    _memset
.text:0000000000011D59                 mov     rbp, [rsp+4F8h+var_4A8]
.text:0000000000011D5E                 mov     r11, [rsp+4F8h+var_4A0]
.text:0000000000011D63                 jmp     loc_10C76
.text:0000000000011D68 ; ---------------------------------------------------------------------------
.text:0000000000011D68
.text:0000000000011D68 loc_11D68:                              ; CODE XREF: __strftime_internal+F01↑j
.text:0000000000011D68                 sub     r12d, 1
.text:0000000000011D6C                 mov     edx, 16Dh
.text:0000000000011D71                 test    r12b, 3
.text:0000000000011D75                 jnz     short loc_11DB3
.text:0000000000011D77                 mov     eax, r12d
.text:0000000000011D7A                 mov     edx, 51EB851Fh
.text:0000000000011D7F                 imul    edx
.text:0000000000011D81                 mov     eax, edx
.text:0000000000011D83                 mov     edx, r12d
.text:0000000000011D86                 sar     edx, 1Fh
.text:0000000000011D89                 sar     eax, 5
.text:0000000000011D8C                 sub     eax, edx
.text:0000000000011D8E                 mov     edx, 16Eh
.text:0000000000011D93                 imul    eax, 64h ; 'd'
.text:0000000000011D96                 cmp     r12d, eax
.text:0000000000011D99                 jnz     short loc_11DB3
.text:0000000000011D9B                 mov     eax, r12d
.text:0000000000011D9E                 mov     ecx, 190h
.text:0000000000011DA3                 cdq
.text:0000000000011DA4                 idiv    ecx
.text:0000000000011DA6                 cmp     edx, 1
.text:0000000000011DA9                 sbb     edx, edx
.text:0000000000011DAB                 not     edx
.text:0000000000011DAD                 add     edx, 16Eh
.text:0000000000011DB3
.text:0000000000011DB3 loc_11DB3:                              ; CODE XREF: __strftime_internal+1835↑j
.text:0000000000011DB3                                         ; __strftime_internal+1859↑j
.text:0000000000011DB3                 add     r8d, edx
.text:0000000000011DB6                 mov     edx, 92492493h
.text:0000000000011DBB                 mov     ecx, r8d
.text:0000000000011DBE                 sub     ecx, [rsp+4F8h+var_4C0]
.text:0000000000011DC2                 add     ecx, 17Eh
.text:0000000000011DC8                 mov     eax, ecx
.text:0000000000011DCA                 sub     r8d, ecx
.text:0000000000011DCD                 imul    edx
.text:0000000000011DCF                 lea     eax, [rdx+rcx]
.text:0000000000011DD2                 mov     edx, ecx
.text:0000000000011DD4                 sar     edx, 1Fh
.text:0000000000011DD7                 sar     eax, 2
.text:0000000000011DDA                 sub     eax, edx
.text:0000000000011DDC                 lea     edx, ds:0[rax*8]
.text:0000000000011DE3                 sub     edx, eax
.text:0000000000011DE5                 lea     ecx, [r8+rdx+3]
.text:0000000000011DEA                 mov     r8d, 0FFFFFFFFh
.text:0000000000011DF0                 jmp     loc_114DF
.text:0000000000011DF5 ; ---------------------------------------------------------------------------
.text:0000000000011DF5
.text:0000000000011DF5 loc_11DF5:                              ; CODE XREF: __strftime_internal+ABF↑j
.text:0000000000011DF5                                         ; __strftime_internal+AD1↑j
.text:0000000000011DF5                 imul    esi, 64h ; 'd'
.text:0000000000011DF8                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:0000000000011DFD                 mov     edi, 9
.text:0000000000011E02                 imul    eax, r12d, 2710h
.text:0000000000011E09                 add     eax, esi
.text:0000000000011E0B                 mov     esi, 14h
.text:0000000000011E10                 add     ecx, eax
.text:0000000000011E12                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011E17                 xor     eax, 1
.text:0000000000011E1A                 jmp     loc_10AB7
.text:0000000000011E1F ; ---------------------------------------------------------------------------
.text:0000000000011E1F
.text:0000000000011E1F loc_11E1F:                              ; CODE XREF: __strftime_internal+FAD↑j
.text:0000000000011E1F                 mov     eax, ecx
.text:0000000000011E21                 mov     edx, 92492493h
.text:0000000000011E26                 mov     edi, 2
.text:0000000000011E2B                 imul    edx
.text:0000000000011E2D                 lea     eax, [rdx+rcx]
.text:0000000000011E30                 sar     ecx, 1Fh
.text:0000000000011E33                 sar     eax, 2
.text:0000000000011E36                 sub     eax, ecx
.text:0000000000011E38                 mov     ecx, eax
.text:0000000000011E3A                 add     ecx, 1
.text:0000000000011E3D                 jmp     loc_10AA0
.text:0000000000011E42 ; ---------------------------------------------------------------------------
.text:0000000000011E42
.text:0000000000011E42 loc_11E42:                              ; CODE XREF: __strftime_internal+AAF↑j
.text:0000000000011E42                                         ; __strftime_internal+AD9↑j
.text:0000000000011E42                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011E47                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:0000000000011E4C                 mov     edi, 6
.text:0000000000011E51                 imul    ecx, r12d, 64h ; 'd'
.text:0000000000011E55                 xor     eax, 1
.text:0000000000011E58                 add     ecx, esi
.text:0000000000011E5A                 mov     esi, 4
.text:0000000000011E5F                 jmp     loc_10AB7
.text:0000000000011E64 ; ---------------------------------------------------------------------------
.text:0000000000011E64
.text:0000000000011E64 loc_11E64:                              ; CODE XREF: __strftime_internal+607↑j
.text:0000000000011E64                                         ; __strftime_internal+611↑j
.text:0000000000011E64                 mov     rdi, rbp        ; s
.text:0000000000011E67                 mov     esi, 30h ; '0'  ; c
.text:0000000000011E6C                 mov     rbp, r12
.text:0000000000011E6F                 call    _memset
.text:0000000000011E74                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000011E79                 jmp     loc_10B6C
.text:0000000000011E7E ; ---------------------------------------------------------------------------
.text:0000000000011E7E
.text:0000000000011E7E loc_11E7E:                              ; CODE XREF: __strftime_internal+136D↑j
.text:0000000000011E7E                                         ; __strftime_internal+1377↑j
.text:0000000000011E7E                 mov     rdi, rbp        ; s
.text:0000000000011E81                 mov     esi, 30h ; '0'  ; c
.text:0000000000011E86                 mov     rbp, r12
.text:0000000000011E89                 call    _memset
.text:0000000000011E8E                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000011E93                 jmp     loc_118D2
.text:0000000000011E98 ; ---------------------------------------------------------------------------
.text:0000000000011E98
.text:0000000000011E98 loc_11E98:                              ; CODE XREF: __strftime_internal+985↑j
.text:0000000000011E98                 call    _memcpy
.text:0000000000011E9D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000011EA2                 jmp     loc_10ED5
.text:0000000000011EA7 ; ---------------------------------------------------------------------------
.text:0000000000011EA7
.text:0000000000011EA7 loc_11EA7:                              ; CODE XREF: __strftime_internal+96A↑j
.text:0000000000011EA7                 mov     rsi, [rsp+4F8h+var_4D8]
.text:0000000000011EAC                 mov     rdx, r12
.text:0000000000011EAF                 mov     rdi, rbp
.text:0000000000011EB2                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000011EB7                 call    memcpy_lowcase
.text:0000000000011EBC                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000011EC1                 jmp     loc_10ED5
.text:0000000000011EC6 ; ---------------------------------------------------------------------------
.text:0000000000011EC6
.text:0000000000011EC6 loc_11EC6:                              ; CODE XREF: __strftime_internal+A17↑j
.text:0000000000011EC6                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:0000000000011ECA                 jmp     def_1074F       ; jumptable 000000000001074F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000011ECF ; ---------------------------------------------------------------------------
.text:0000000000011ECF
.text:0000000000011ECF loc_11ECF:                              ; CODE XREF: __strftime_internal+AC9↑j
.text:0000000000011ECF                 movzx   ecx, byte ptr [rbx]
.text:0000000000011ED2                 mov     r9, rbx
.text:0000000000011ED5                 jmp     loc_11739
.text:0000000000011EDA ; ---------------------------------------------------------------------------
.text:0000000000011EDA
.text:0000000000011EDA loc_11EDA:                              ; CODE XREF: __strftime_internal+E81↑j
.text:0000000000011EDA                 lea     rcx, [rbx+2]
.text:0000000000011EDE                 mov     r8d, 1
.text:0000000000011EE4
.text:0000000000011EE4 loc_11EE4:                              ; CODE XREF: __strftime_internal+19BB↓j
.text:0000000000011EE4                 mov     rdx, rcx
.text:0000000000011EE7                 add     rcx, 1
.text:0000000000011EEB                 movzx   eax, byte ptr [rcx-1]
.text:0000000000011EEF                 add     r8, 1
.text:0000000000011EF3                 cmp     al, 3Ah ; ':'
.text:0000000000011EF5                 jnz     loc_113CD
.text:0000000000011EFB                 jmp     short loc_11EE4
.text:0000000000011EFD ; ---------------------------------------------------------------------------
.text:0000000000011EFD
.text:0000000000011EFD loc_11EFD:                              ; CODE XREF: __strftime_internal+11C3↑j
.text:0000000000011EFD                                         ; __strftime_internal+11CC↑j
.text:0000000000011EFD                 mov     esi, r10d
.text:0000000000011F00                 mov     eax, 0
.text:0000000000011F05                 sub     esi, 6
.text:0000000000011F08                 cmovns  eax, esi
.text:0000000000011F0B                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000011F0F                 lea     rax, aYMD_0     ; "%Y-%m-%d"
.text:0000000000011F16                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000011F1B                 jmp     loc_10BB2
.text:0000000000011F20 ; ---------------------------------------------------------------------------
.text:0000000000011F20
.text:0000000000011F20 loc_11F20:                              ; CODE XREF: __strftime_internal+AB5↑j
.text:0000000000011F20                 imul    ecx, r12d, 64h ; 'd'
.text:0000000000011F24                 xor     esi, esi
.text:0000000000011F26                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:0000000000011F2B                 mov     edi, 5
.text:0000000000011F30                 add     ecx, eax
.text:0000000000011F32                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000011F37                 xor     eax, 1
.text:0000000000011F3A                 jmp     loc_10AB7
.text:0000000000011F3F ; ---------------------------------------------------------------------------
.text:0000000000011F3F
.text:0000000000011F3F loc_11F3F:                              ; CODE XREF: __strftime_internal+93A↑j
.text:0000000000011F3F                                         ; __strftime_internal+944↑j
.text:0000000000011F3F                 mov     rdi, rbp        ; s
.text:0000000000011F42                 mov     esi, 30h ; '0'  ; c
.text:0000000000011F47                 call    _memset
.text:0000000000011F4C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000011F51                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:0000000000011F57                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000011F5C                 jmp     loc_10EA7
.text:0000000000011F61 ; ---------------------------------------------------------------------------
.text:0000000000011F61
.text:0000000000011F61 loc_11F61:                              ; CODE XREF: __strftime_internal+C50↑j
.text:0000000000011F61                                         ; __strftime_internal+C5A↑j
.text:0000000000011F61                 mov     rdi, rbp        ; s
.text:0000000000011F64                 mov     esi, 30h ; '0'  ; c
.text:0000000000011F69                 mov     rbp, r12
.text:0000000000011F6C                 call    _memset
.text:0000000000011F71                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000011F76                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000011F7B                 mov     r8, [rsp+4F8h+var_4A0]
.text:0000000000011F80                 jmp     loc_111BF
.text:0000000000011F85 ; ---------------------------------------------------------------------------
.text:0000000000011F85
.text:0000000000011F85 loc_11F85:                              ; CODE XREF: __strftime_internal+7D6↑j
.text:0000000000011F85                                         ; __strftime_internal+7E5↑j
.text:0000000000011F85                 mov     esi, 30h ; '0'
.text:0000000000011F8A                 jmp     loc_10D2B
.text:0000000000011F8F ; ---------------------------------------------------------------------------
.text:0000000000011F8F
.text:0000000000011F8F loc_11F8F:                              ; CODE XREF: __strftime_internal+167E↑j
.text:0000000000011F8F                                         ; __strftime_internal+1688↑j
.text:0000000000011F8F                 mov     rdi, rbp        ; s
.text:0000000000011F92                 mov     esi, 30h ; '0'  ; c
.text:0000000000011F97                 call    _memset
.text:0000000000011F9C                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000011FA1                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000011FA6                 mov     rcx, [rsp+4F8h+var_4A0]
.text:0000000000011FAB                 mov     r8, [rsp+4F8h+var_498]
.text:0000000000011FB0                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000011FB5                 jmp     loc_11BF4
.text:0000000000011FBA ; ---------------------------------------------------------------------------
.text:0000000000011FBA
.text:0000000000011FBA loc_11FBA:                              ; CODE XREF: __strftime_internal+1018↑j
.text:0000000000011FBA                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000011FBF                 mov     edi, 2
.text:0000000000011FC4                 jmp     loc_116C0
.text:0000000000011FC9 ; ---------------------------------------------------------------------------
.text:0000000000011FC9
.text:0000000000011FC9 loc_11FC9:                              ; CODE XREF: __strftime_internal+127A↑j
.text:0000000000011FC9                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000011FD0                 jmp     loc_117E6
.text:0000000000011FD5 ; ---------------------------------------------------------------------------
.text:0000000000011FD5
.text:0000000000011FD5 loc_11FD5:                              ; CODE XREF: __strftime_internal+E3↑j
.text:0000000000011FD5                 call    ___stack_chk_fail
.text:0000000000011FDA ; ---------------------------------------------------------------------------
.text:0000000000011FDA
.text:0000000000011FDA loc_11FDA:                              ; CODE XREF: __strftime_internal+FF9↑j
.text:0000000000011FDA                 add     ecx, 64h ; 'd'
.text:0000000000011FDD                 test    r15d, r15d
.text:0000000000011FE0                 jz      loc_1154A
.text:0000000000011FE6                 jmp     loc_10F22
.text:0000000000011FEB ; ---------------------------------------------------------------------------
.text:0000000000011FEB
.text:0000000000011FEB loc_11FEB:                              ; CODE XREF: __strftime_internal+3D5↑j
.text:0000000000011FEB                 xor     edi, edi
.text:0000000000011FED                 jmp     loc_10ADC
.text:0000000000011FED ; } // starts at 10540
.text:0000000000011FED __strftime_internal endp
.text:0000000000011FED
.text:0000000000011FED ; ---------------------------------------------------------------------------
.text:0000000000011FF2                 align 20h
.text:0000000000012000
.text:0000000000012000 ; =============== S U B R O U T I N E =======================================
.text:0000000000012000
.text:0000000000012000
.text:0000000000012000                 public nstrftime
.text:0000000000012000 nstrftime       proc near               ; CODE XREF: print_long_format+60D↑p
.text:0000000000012000                                         ; print_long_format+944↑p
.text:0000000000012000
.text:0000000000012000 var_11          = qword ptr -11h
.text:0000000000012000
.text:0000000000012000 ; __unwind {
.text:0000000000012000                 sub     rsp, 18h
.text:0000000000012004                 mov     rax, fs:28h
.text:000000000001200D                 mov     [rsp+18h+var_11+1], rax
.text:0000000000012012                 xor     eax, eax
.text:0000000000012014                 mov     byte ptr [rsp+18h+var_11], 0
.text:0000000000012019                 push    r9              ; int
.text:000000000001201B                 xor     r9d, r9d
.text:000000000001201E                 push    r8              ; __int64
.text:0000000000012020                 xor     r8d, r8d
.text:0000000000012023                 lea     rax, [rsp+28h+var_11]
.text:0000000000012028                 push    rax             ; __int64
.text:0000000000012029                 push    0FFFFFFFFFFFFFFFFh ; int
.text:000000000001202B                 call    __strftime_internal
.text:0000000000012030                 add     rsp, 20h
.text:0000000000012034                 mov     rdx, [rsp+18h+var_11+1]
.text:0000000000012039                 xor     rdx, fs:28h
.text:0000000000012042                 jnz     short loc_12049
.text:0000000000012044                 add     rsp, 18h
.text:0000000000012048                 retn
.text:0000000000012049 ; ---------------------------------------------------------------------------
.text:0000000000012049
.text:0000000000012049 loc_12049:                              ; CODE XREF: nstrftime+42↑j
.text:0000000000012049                 call    ___stack_chk_fail
.text:0000000000012049 ; } // starts at 12000
.text:0000000000012049 nstrftime       endp
.text:0000000000012049
.text:0000000000012049 ; ---------------------------------------------------------------------------
.text:000000000001204E                 align 10h
.text:0000000000012050
.text:0000000000012050 ; =============== S U B R O U T I N E =======================================
.text:0000000000012050
.text:0000000000012050
.text:0000000000012050                 public set_program_name
.text:0000000000012050 set_program_name proc near              ; CODE XREF: main+26↑p
.text:0000000000012050 ; __unwind {
.text:0000000000012050                 test    rdi, rdi
.text:0000000000012053                 push    rbx
.text:0000000000012054                 jz      short loc_120CD
.text:0000000000012056                 mov     esi, 2Fh ; '/'  ; c
.text:000000000001205B                 mov     rbx, rdi
.text:000000000001205E                 call    _strrchr
.text:0000000000012063                 test    rax, rax
.text:0000000000012066                 jz      short loc_120BD
.text:0000000000012068                 lea     r8, [rax+1]
.text:000000000001206C                 mov     rdx, r8
.text:000000000001206F                 sub     rdx, rbx
.text:0000000000012072                 cmp     rdx, 6
.text:0000000000012076                 jle     short loc_120BD
.text:0000000000012078                 lea     rsi, [rax-6]
.text:000000000001207C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000012083                 mov     ecx, 7
.text:0000000000012088                 repe cmpsb
.text:000000000001208A                 setnbe  dl
.text:000000000001208D                 sbb     dl, 0
.text:0000000000012090                 test    dl, dl
.text:0000000000012092                 jnz     short loc_120BD
.text:0000000000012094                 lea     rdi, aLt        ; "lt-"
.text:000000000001209B                 mov     ecx, 3
.text:00000000000120A0                 mov     rsi, r8
.text:00000000000120A3                 mov     rbx, r8
.text:00000000000120A6                 repe cmpsb
.text:00000000000120A8                 setnbe  dl
.text:00000000000120AB                 sbb     dl, 0
.text:00000000000120AE                 test    dl, dl
.text:00000000000120B0                 jnz     short loc_120BD
.text:00000000000120B2                 lea     rbx, [rax+4]
.text:00000000000120B6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:00000000000120BD
.text:00000000000120BD loc_120BD:                              ; CODE XREF: set_program_name+16↑j
.text:00000000000120BD                                         ; set_program_name+26↑j ...
.text:00000000000120BD                 mov     cs:program_name, rbx
.text:00000000000120C4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000120CB                 pop     rbx
.text:00000000000120CC                 retn
.text:00000000000120CD ; ---------------------------------------------------------------------------
.text:00000000000120CD
.text:00000000000120CD loc_120CD:                              ; CODE XREF: set_program_name+4↑j
.text:00000000000120CD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000120D4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000120DB                 mov     edx, 37h ; '7'  ; n
.text:00000000000120E0                 mov     esi, 1          ; size
.text:00000000000120E5                 call    _fwrite
.text:00000000000120EA                 call    _abort
.text:00000000000120EA ; } // starts at 12050
.text:00000000000120EA set_program_name endp
.text:00000000000120EA
.text:00000000000120EA ; ---------------------------------------------------------------------------
.text:00000000000120EF                 align 10h
.text:00000000000120F0
.text:00000000000120F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000120F0
.text:00000000000120F0 ; Attributes: info_from_lumina
.text:00000000000120F0
.text:00000000000120F0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000120F0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000120F0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000120F0 ; __unwind {
.text:00000000000120F0                 push    rbp
.text:00000000000120F1                 push    rbx
.text:00000000000120F2                 mov     rbp, rdi
.text:00000000000120F5                 mov     ebx, esi
.text:00000000000120F7                 sub     rsp, 8
.text:00000000000120FB                 call    locale_charset
.text:0000000000012100                 movzx   edx, byte ptr [rax]
.text:0000000000012103                 and     edx, 0FFFFFFDFh
.text:0000000000012106                 cmp     dl, 55h ; 'U'
.text:0000000000012109                 jz      short loc_12180
.text:000000000001210B                 cmp     dl, 47h ; 'G'
.text:000000000001210E                 jz      short loc_12130
.text:0000000000012110
.text:0000000000012110 loc_12110:                              ; CODE XREF: gettext_quote+4A↓j
.text:0000000000012110                                         ; gettext_quote+50↓j ...
.text:0000000000012110                 lea     rax, unk_1A31B
.text:0000000000012117                 lea     rdx, aInvalidSSArgum+19h ; "'"
.text:000000000001211E                 cmp     ebx, 9
.text:0000000000012121                 cmovnz  rax, rdx
.text:0000000000012125                 add     rsp, 8
.text:0000000000012129                 pop     rbx
.text:000000000001212A                 pop     rbp
.text:000000000001212B                 retn
.text:000000000001212B ; ---------------------------------------------------------------------------
.text:000000000001212C                 align 10h
.text:0000000000012130
.text:0000000000012130 loc_12130:                              ; CODE XREF: gettext_quote+1E↑j
.text:0000000000012130                 movzx   edx, byte ptr [rax+1]
.text:0000000000012134                 and     edx, 0FFFFFFDFh
.text:0000000000012137                 cmp     dl, 42h ; 'B'
.text:000000000001213A                 jnz     short loc_12110
.text:000000000001213C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000012140                 jnz     short loc_12110
.text:0000000000012142                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000012146                 jnz     short loc_12110
.text:0000000000012148                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000001214C                 jnz     short loc_12110
.text:000000000001214E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000012152                 jnz     short loc_12110
.text:0000000000012154                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000012158                 jnz     short loc_12110
.text:000000000001215A                 cmp     byte ptr [rax+7], 0
.text:000000000001215E                 jnz     short loc_12110
.text:0000000000012160                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000012164                 lea     rax, unk_1A314
.text:000000000001216B                 lea     rdx, unk_1A318
.text:0000000000012172                 cmovnz  rax, rdx
.text:0000000000012176                 add     rsp, 8
.text:000000000001217A                 pop     rbx
.text:000000000001217B                 pop     rbp
.text:000000000001217C                 retn
.text:000000000001217C ; ---------------------------------------------------------------------------
.text:000000000001217D                 align 20h
.text:0000000000012180
.text:0000000000012180 loc_12180:                              ; CODE XREF: gettext_quote+19↑j
.text:0000000000012180                 movzx   edx, byte ptr [rax+1]
.text:0000000000012184                 and     edx, 0FFFFFFDFh
.text:0000000000012187                 cmp     dl, 54h ; 'T'
.text:000000000001218A                 jnz     short loc_12110
.text:000000000001218C                 movzx   edx, byte ptr [rax+2]
.text:0000000000012190                 and     edx, 0FFFFFFDFh
.text:0000000000012193                 cmp     dl, 46h ; 'F'
.text:0000000000012196                 jnz     loc_12110
.text:000000000001219C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000121A0                 jnz     loc_12110
.text:00000000000121A6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000121AA                 jnz     loc_12110
.text:00000000000121B0                 cmp     byte ptr [rax+5], 0
.text:00000000000121B4                 jnz     loc_12110
.text:00000000000121BA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000121BE                 lea     rax, unk_1A30C
.text:00000000000121C5                 lea     rdx, unk_1A310
.text:00000000000121CC                 cmovnz  rax, rdx
.text:00000000000121D0                 add     rsp, 8
.text:00000000000121D4                 pop     rbx
.text:00000000000121D5                 pop     rbp
.text:00000000000121D6                 retn
.text:00000000000121D6 ; } // starts at 120F0
.text:00000000000121D6 gettext_quote   endp
.text:00000000000121D6
.text:00000000000121D6 ; ---------------------------------------------------------------------------
.text:00000000000121D7                 align 20h
.text:00000000000121E0
.text:00000000000121E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000121E0
.text:00000000000121E0 ; Attributes: info_from_lumina
.text:00000000000121E0
.text:00000000000121E0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000121E0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000121E0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000121E0
.text:00000000000121E0 var_E0          = dword ptr -0E0h
.text:00000000000121E0 var_DB          = byte ptr -0DBh
.text:00000000000121E0 var_DA          = byte ptr -0DAh
.text:00000000000121E0 var_D9          = byte ptr -0D9h
.text:00000000000121E0 s               = qword ptr -0D8h
.text:00000000000121E0 n               = qword ptr -0D0h
.text:00000000000121E0 var_C8          = qword ptr -0C8h
.text:00000000000121E0 ps              = qword ptr -0C0h
.text:00000000000121E0 var_B8          = qword ptr -0B8h
.text:00000000000121E0 var_B0          = qword ptr -0B0h
.text:00000000000121E0 var_A8          = qword ptr -0A8h
.text:00000000000121E0 s2              = qword ptr -0A0h
.text:00000000000121E0 var_98          = qword ptr -98h
.text:00000000000121E0 var_90          = qword ptr -90h
.text:00000000000121E0 var_88          = qword ptr -88h
.text:00000000000121E0 var_80          = qword ptr -80h
.text:00000000000121E0 var_78          = qword ptr -78h
.text:00000000000121E0 var_70          = dword ptr -70h
.text:00000000000121E0 var_6C          = byte ptr -6Ch
.text:00000000000121E0 var_6B          = byte ptr -6Bh
.text:00000000000121E0 var_6A          = byte ptr -6Ah
.text:00000000000121E0 var_69          = byte ptr -69h
.text:00000000000121E0 var_68          = qword ptr -68h
.text:00000000000121E0 var_60          = qword ptr -60h
.text:00000000000121E0 wc              = dword ptr -4Ch
.text:00000000000121E0 var_48          = qword ptr -48h
.text:00000000000121E0 var_40          = qword ptr -40h
.text:00000000000121E0 arg_0           = qword ptr  8
.text:00000000000121E0 arg_8           = qword ptr  10h
.text:00000000000121E0 arg_10          = qword ptr  18h
.text:00000000000121E0
.text:00000000000121E0 ; __unwind {
.text:00000000000121E0                 push    r15
.text:00000000000121E2                 push    r14
.text:00000000000121E4                 mov     r15d, r8d
.text:00000000000121E7                 push    r13
.text:00000000000121E9                 push    r12
.text:00000000000121EB                 mov     r14, rdi
.text:00000000000121EE                 push    rbp
.text:00000000000121EF                 push    rbx
.text:00000000000121F0                 mov     ebx, r9d
.text:00000000000121F3                 mov     r13, rsi
.text:00000000000121F6                 mov     rbp, rcx
.text:00000000000121F9                 and     ebx, 2
.text:00000000000121FC                 sub     rsp, 0B8h
.text:0000000000012203                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000001220B                 mov     [rsp+0E8h+s], rdx
.text:0000000000012210                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000012215                 mov     [rsp+0E8h+var_70], r9d
.text:000000000001221A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000001221F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000012227                 mov     [rsp+0E8h+var_80], rax
.text:000000000001222C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000012234                 mov     [rsp+0E8h+var_88], rax
.text:0000000000012239                 mov     rax, fs:28h
.text:0000000000012242                 mov     [rsp+0E8h+var_40], rax
.text:000000000001224A                 xor     eax, eax
.text:000000000001224C                 call    ___ctype_get_mb_cur_max
.text:0000000000012251                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000012255                 mov     [rsp+0E8h+var_90], rax
.text:000000000001225A                 ja      def_12271       ; jumptable 00000000000121F1 default case
.text:0000000000012260                 lea     rcx, jpt_12271
.text:0000000000012267                 mov     edx, r15d
.text:000000000001226A                 movsxd  rax, ds:(jpt_12271 - 1A380h)[rcx+rdx*4]
.text:000000000001226E                 add     rax, rcx
.text:0000000000012271                 jmp     rax             ; switch jump
.text:0000000000012273 ; ---------------------------------------------------------------------------
.text:0000000000012273
.text:0000000000012273 loc_12273:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012273                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000012273                                         ; DATA XREF: ...
.text:0000000000012273                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000012278                 mov     [rsp+0E8h+var_6C], 0
.text:000000000001227D                 xor     r12d, r12d
.text:0000000000012280                 mov     [rsp+0E8h+var_98], 0
.text:0000000000012289                 mov     [rsp+0E8h+var_D9], 1
.text:000000000001228E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000012293
.text:0000000000012293 loc_12293:                              ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000012293                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:000000000001229A                 mov     [rsp+0E8h+n], 1
.text:00000000000122A3                 xor     r15d, r15d
.text:00000000000122A6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000122AE                 mov     [rsp+0E8h+s2], rax
.text:00000000000122B3
.text:00000000000122B3 loc_122B3:                              ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000122B3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000122B3                 xor     r11d, r11d
.text:00000000000122B6                 mov     rax, rbp
.text:00000000000122B9                 mov     r8d, r12d
.text:00000000000122BC                 mov     rbp, r11
.text:00000000000122BF                 mov     r11, rax
.text:00000000000122C2                 nop     word ptr [rax+rax+00h]
.text:00000000000122C8
.text:00000000000122C8 loc_122C8:                              ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000122C8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000122C8                 cmp     r11, rbp
.text:00000000000122CB                 setnz   r12b
.text:00000000000122CF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000122D3                 jnz     short loc_122E2
.text:00000000000122D5                 mov     rax, [rsp+0E8h+s]
.text:00000000000122DA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000122DE                 setnz   r12b
.text:00000000000122E2
.text:00000000000122E2 loc_122E2:                              ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000122E2                 test    r12b, r12b
.text:00000000000122E5                 jz      loc_12940
.text:00000000000122EB                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000122F0                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000122F5                 lea     r9, [rdi+rbp]
.text:00000000000122F9                 setnz   al
.text:00000000000122FC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000012300                 mov     r10d, eax
.text:0000000000012303                 jz      loc_123B0
.text:0000000000012309                 mov     rax, [rsp+0E8h+n]
.text:000000000001230E                 test    rax, rax
.text:0000000000012311                 jz      loc_12740
.text:0000000000012317                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000001231B                 lea     rbx, [rbp+rax+0]
.text:0000000000012320                 jnz     short loc_12350
.text:0000000000012322                 cmp     rax, 1
.text:0000000000012326                 jbe     short loc_12350
.text:0000000000012328                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000001232D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000012332                 mov     [rsp+0E8h+ps], r9
.text:0000000000012337                 call    _strlen
.text:000000000001233C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000012342                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000012348                 mov     r11, rax
.text:000000000001234B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000012350
.text:0000000000012350 loc_12350:                              ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000012350                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000012350                 cmp     rbx, r11
.text:0000000000012353                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000012358                 ja      loc_12910
.text:000000000001235E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000012363                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000012368                 mov     rdi, r9         ; s1
.text:000000000001236B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000012370                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000012375                 mov     [rsp+0E8h+var_B8], r9
.text:000000000001237A                 call    _memcmp
.text:000000000001237F                 test    eax, eax
.text:0000000000012381                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000012386                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000001238C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000012391                 jnz     loc_12910
.text:0000000000012397                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000001239C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000123A2                 jnz     loc_13325
.text:00000000000123A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000123B0
.text:00000000000123B0 loc_123B0:                              ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000123B0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000123B0                 movzx   ebx, byte ptr [r9]
.text:00000000000123B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000123B7                 ja      def_123CE       ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000123BD                 lea     rcx, jpt_123CE
.text:00000000000123C4                 movzx   edx, bl
.text:00000000000123C7                 movsxd  rax, ds:(jpt_123CE - 1A3ACh)[rcx+rdx*4]
.text:00000000000123CB                 add     rax, rcx
.text:00000000000123CE                 jmp     rax             ; switch jump
.text:00000000000123D0 ; ---------------------------------------------------------------------------
.text:00000000000123D0
.text:00000000000123D0 loc_123D0:                              ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000123D0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000123D0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000123D3
.text:00000000000123D3 loc_123D3:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000123D3                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000123D3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000123D7                 setnz   al
.text:00000000000123DA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000123DE                 jnz     short loc_123EC
.text:00000000000123E0                 mov     rax, [rsp+0E8h+s]
.text:00000000000123E5                 cmp     byte ptr [rax+1], 0
.text:00000000000123E9                 setnz   al
.text:00000000000123EC
.text:00000000000123EC loc_123EC:                              ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000123EC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000123F1                 setz    dl
.text:00000000000123F4                 test    al, al
.text:00000000000123F6                 jz      loc_12648
.text:00000000000123FC
.text:00000000000123FC loc_123FC:                              ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000123FC                 xor     r12d, r12d
.text:00000000000123FF                 xor     eax, eax
.text:0000000000012401                 nop     dword ptr [rax+00000000h]
.text:0000000000012408
.text:0000000000012408 loc_12408:                              ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000012408                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000012408                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000001240D                 jnz     loc_12522
.text:0000000000012413                 test    dl, dl
.text:0000000000012415                 jnz     loc_12522
.text:000000000001241B
.text:000000000001241B loc_1241B:                              ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000001241B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000012420                 test    rsi, rsi
.text:0000000000012423                 jz      short loc_12439
.text:0000000000012425                 mov     edx, ebx
.text:0000000000012427                 shr     dl, 5
.text:000000000001242A                 movzx   edx, dl
.text:000000000001242D                 mov     edx, [rsi+rdx*4]
.text:0000000000012430                 bt      edx, ebx
.text:0000000000012433                 jb      loc_12583
.text:0000000000012439
.text:0000000000012439 loc_12439:                              ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000012439                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000012439                 test    r10b, r10b
.text:000000000001243C                 jnz     loc_12583
.text:0000000000012442                 xor     eax, 1
.text:0000000000012445                 add     rbp, 1
.text:0000000000012449                 and     eax, r8d
.text:000000000001244C
.text:000000000001244C loc_1244C:                              ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000001244C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000001244C                 test    al, al
.text:000000000001244E                 jz      short loc_12470
.text:0000000000012450                 cmp     r13, r15
.text:0000000000012453                 jbe     short loc_1245A
.text:0000000000012455                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000001245A
.text:000000000001245A loc_1245A:                              ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000001245A                 lea     rax, [r15+1]
.text:000000000001245E                 cmp     r13, rax
.text:0000000000012461                 jbe     short loc_12469
.text:0000000000012463                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000012469
.text:0000000000012469 loc_12469:                              ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000012469                 add     r15, 2
.text:000000000001246D                 xor     r8d, r8d
.text:0000000000012470
.text:0000000000012470 loc_12470:                              ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000012470                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000012470                 cmp     r15, r13
.text:0000000000012473                 jnb     short loc_12479
.text:0000000000012475                 mov     [r14+r15], bl
.text:0000000000012479
.text:0000000000012479 loc_12479:                              ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000012479                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000001247E                 add     r15, 1
.text:0000000000012482                 mov     eax, 0
.text:0000000000012487                 test    r12b, r12b
.text:000000000001248A                 cmovz   edi, eax
.text:000000000001248D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000012492                 jmp     loc_122C8
.text:0000000000012492 ; ---------------------------------------------------------------------------
.text:0000000000012497                 align 20h
.text:00000000000124A0
.text:00000000000124A0 loc_124A0:                              ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000124A0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000124A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000124A3
.text:00000000000124A3 loc_124A3:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000124A3                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000124A3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000124A7                 cmp     eax, 2
.text:00000000000124AA                 jz      loc_12A68
.text:00000000000124B0                 cmp     eax, 5
.text:00000000000124B3                 jz      loc_12A28
.text:00000000000124B9                 cmp     eax, 2
.text:00000000000124BC                 mov     ebx, 3Fh ; '?'
.text:00000000000124C1                 setz    dl
.text:00000000000124C4                 xor     r12d, r12d
.text:00000000000124C7                 xor     eax, eax
.text:00000000000124C9                 jmp     loc_12408
.text:00000000000124C9 ; ---------------------------------------------------------------------------
.text:00000000000124CE                 align 10h
.text:00000000000124D0
.text:00000000000124D0 loc_124D0:                              ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000124D0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000124D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000124D3
.text:00000000000124D3 loc_124D3:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000124D3                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000124D3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000124D8                 jz      loc_129E0
.text:00000000000124DE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000124E3                 xor     edx, edx
.text:00000000000124E5                 xor     eax, eax
.text:00000000000124E7                 mov     ebx, 27h ; '''
.text:00000000000124EC                 jmp     loc_12408
.text:00000000000124EC ; ---------------------------------------------------------------------------
.text:00000000000124F1                 align 8
.text:00000000000124F8
.text:00000000000124F8 loc_124F8:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000124F8                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000124F8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000124FD                 mov     ebx, 74h ; 't'
.text:0000000000012502
.text:0000000000012502 loc_12502:                              ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000012502                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000012502                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012507                 setz    al
.text:000000000001250A                 and     al, [rsp+0E8h+var_D9]
.text:000000000001250E                 jnz     loc_1265E
.text:0000000000012514
.text:0000000000012514 loc_12514:                              ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000012514                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000012514                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000012519                 jnz     short loc_12580
.text:000000000001251B
.text:000000000001251B loc_1251B:                              ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000001251B                 mov     ebx, edx
.text:000000000001251D                 xor     r12d, r12d
.text:0000000000012520                 xor     eax, eax
.text:0000000000012522
.text:0000000000012522 loc_12522:                              ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000012522                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000012522                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000012527                 jnz     loc_1241B
.text:000000000001252D                 jmp     loc_12439
.text:000000000001252D ; ---------------------------------------------------------------------------
.text:0000000000012532                 align 8
.text:0000000000012538
.text:0000000000012538 loc_12538:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012538                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012538                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000001253D                 mov     ebx, 62h ; 'b'
.text:0000000000012542                 jmp     short loc_12514
.text:0000000000012542 ; ---------------------------------------------------------------------------
.text:0000000000012544                 align 8
.text:0000000000012548
.text:0000000000012548 loc_12548:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012548                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012548                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000001254D                 jz      loc_12920
.text:0000000000012553                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000012558                 jz      loc_12770
.text:000000000001255E
.text:000000000001255E loc_1255E:                              ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000001255E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000012563                 jz      loc_12770
.text:0000000000012569                 cmp     [rsp+0E8h+n], 0
.text:000000000001256F                 jnz     loc_1292B
.text:0000000000012575                 mov     ebx, 5Ch ; '\'
.text:000000000001257A                 nop     word ptr [rax+rax+00h]
.text:0000000000012580
.text:0000000000012580 loc_12580:                              ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000012580                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000012580                 xor     r12d, r12d
.text:0000000000012583
.text:0000000000012583 loc_12583:                              ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000012583                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000012583                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012588                 setz    dl
.text:000000000001258B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000012590                 mov     eax, edx
.text:0000000000012592                 jnz     loc_12DE8
.text:0000000000012598                 mov     eax, r8d
.text:000000000001259B                 xor     eax, 1
.text:000000000001259E                 and     al, dl
.text:00000000000125A0                 jz      short loc_125D1
.text:00000000000125A2                 cmp     r13, r15
.text:00000000000125A5                 jbe     short loc_125AC
.text:00000000000125A7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000125AC
.text:00000000000125AC loc_125AC:                              ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000125AC                 lea     rdx, [r15+1]
.text:00000000000125B0                 cmp     r13, rdx
.text:00000000000125B3                 jbe     short loc_125BB
.text:00000000000125B5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000125BB
.text:00000000000125BB loc_125BB:                              ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000125BB                 lea     rdx, [r15+2]
.text:00000000000125BF                 cmp     r13, rdx
.text:00000000000125C2                 jbe     short loc_125CA
.text:00000000000125C4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000125CA
.text:00000000000125CA loc_125CA:                              ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000125CA                 add     r15, 3
.text:00000000000125CE                 mov     r8d, eax
.text:00000000000125D1
.text:00000000000125D1 loc_125D1:                              ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000125D1                 cmp     r13, r15
.text:00000000000125D4                 jbe     short loc_125DB
.text:00000000000125D6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000125DB
.text:00000000000125DB loc_125DB:                              ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000125DB                 add     r15, 1
.text:00000000000125DF                 add     rbp, 1
.text:00000000000125E3                 jmp     loc_12470
.text:00000000000125E3 ; ---------------------------------------------------------------------------
.text:00000000000125E8                 align 10h
.text:00000000000125F0
.text:00000000000125F0 loc_125F0:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000125F0                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000125F0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000125F5                 jnz     loc_127C3
.text:00000000000125FB                 xor     edx, edx
.text:00000000000125FD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000012602                 jz      loc_1251B
.text:0000000000012608                 add     rbp, 1
.text:000000000001260C                 jmp     loc_122C8
.text:000000000001260C ; ---------------------------------------------------------------------------
.text:0000000000012611                 align 8
.text:0000000000012618
.text:0000000000012618 loc_12618:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012618                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012618                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000001261D                 setz    dl
.text:0000000000012620                 xor     eax, eax
.text:0000000000012622                 jmp     loc_12408
.text:0000000000012622 ; ---------------------------------------------------------------------------
.text:0000000000012627                 align 10h
.text:0000000000012630
.text:0000000000012630 loc_12630:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012630                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012630                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000012635                 mov     ebx, 61h ; 'a'
.text:000000000001263A                 jmp     loc_12514
.text:000000000001263A ; ---------------------------------------------------------------------------
.text:000000000001263F                 align 20h
.text:0000000000012640
.text:0000000000012640 loc_12640:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012640                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012640                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000012645                 setz    dl
.text:0000000000012648
.text:0000000000012648 loc_12648:                              ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000012648                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000012648                 test    rbp, rbp
.text:000000000001264B                 jnz     loc_123FC
.text:0000000000012651
.text:0000000000012651 loc_12651:                              ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000012651                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000012651                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000012656                 and     al, dl
.text:0000000000012658                 jz      loc_12408
.text:000000000001265E
.text:000000000001265E loc_1265E:                              ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000001265E                 mov     rbp, r11
.text:0000000000012661                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000012669                 jmp     loc_12D69
.text:0000000000012669 ; ---------------------------------------------------------------------------
.text:000000000001266E                 align 10h
.text:0000000000012670
.text:0000000000012670 loc_12670:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012670                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012670                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000012675                 setz    dl
.text:0000000000012678                 xor     r12d, r12d
.text:000000000001267B                 jmp     short loc_12651
.text:000000000001267B ; ---------------------------------------------------------------------------
.text:000000000001267D                 align 20h
.text:0000000000012680
.text:0000000000012680 loc_12680:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012680                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012680                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000012685                 mov     ebx, 20h ; ' '
.text:000000000001268A                 setz    dl
.text:000000000001268D                 jmp     short loc_12651
.text:000000000001268D ; ---------------------------------------------------------------------------
.text:000000000001268F                 align 10h
.text:0000000000012690
.text:0000000000012690 loc_12690:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000012690                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:0000000000012690                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000012695                 mov     ebx, 72h ; 'r'
.text:000000000001269A                 jmp     loc_12502
.text:000000000001269A ; ---------------------------------------------------------------------------
.text:000000000001269F                 align 20h
.text:00000000000126A0
.text:00000000000126A0 loc_126A0:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000126A0                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000126A0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000126A5                 mov     ebx, 66h ; 'f'
.text:00000000000126AA                 jmp     loc_12514
.text:00000000000126AA ; ---------------------------------------------------------------------------
.text:00000000000126AF                 align 10h
.text:00000000000126B0
.text:00000000000126B0 loc_126B0:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000126B0                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000126B0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000126B5                 mov     ebx, 76h ; 'v'
.text:00000000000126BA                 jmp     loc_12514
.text:00000000000126BA ; ---------------------------------------------------------------------------
.text:00000000000126BF                 align 20h
.text:00000000000126C0
.text:00000000000126C0 loc_126C0:                              ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000126C0                                         ; DATA XREF: .rodata:jpt_123CE↓o
.text:00000000000126C0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000126C5                 mov     ebx, 6Eh ; 'n'
.text:00000000000126CA                 jmp     loc_12502
.text:00000000000126CA ; ---------------------------------------------------------------------------
.text:00000000000126CF                 align 10h
.text:00000000000126D0
.text:00000000000126D0 def_1275A:                              ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000126D0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000126D0                                         ; DATA XREF: ...
.text:00000000000126D0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000126D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000126D8
.text:00000000000126D8 def_123CE:                              ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000126D8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000126D8                                         ; DATA XREF: ...
.text:00000000000126D8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000126DE                 jnz     loc_12A88
.text:00000000000126E4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000126E9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000126EE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000126F3                 call    ___ctype_b_loc
.text:00000000000126F8                 mov     rcx, [rax]
.text:00000000000126FB                 movzx   edx, bl
.text:00000000000126FE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000012704                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000001270A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000001270F                 mov     edi, 1
.text:0000000000012714                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000012718                 and     ax, 4000h
.text:000000000001271C                 setnz   r12b
.text:0000000000012720                 setz    al
.text:0000000000012723                 and     al, [rsp+0E8h+var_DB]
.text:0000000000012727
.text:0000000000012727 loc_12727:                              ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000012727                 test    al, al
.text:0000000000012729                 jnz     loc_130C1
.text:000000000001272F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012734                 setz    dl
.text:0000000000012737                 jmp     loc_12408
.text:0000000000012737 ; ---------------------------------------------------------------------------
.text:000000000001273C                 align 20h
.text:0000000000012740
.text:0000000000012740 loc_12740:                              ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000012740                 movzx   ebx, byte ptr [r9]
.text:0000000000012744                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000012747                 ja      short def_1275A ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000012749                 lea     rcx, jpt_1275A
.text:0000000000012750                 movzx   edx, bl
.text:0000000000012753                 movsxd  rax, ds:(jpt_1275A - 1A5A8h)[rcx+rdx*4]
.text:0000000000012757                 add     rax, rcx
.text:000000000001275A                 jmp     rax             ; switch jump
.text:000000000001275A ; ---------------------------------------------------------------------------
.text:000000000001275C                 align 20h
.text:0000000000012760
.text:0000000000012760 loc_12760:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012760                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012760                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000012763                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000012768                 jnz     loc_1255E
.text:000000000001276E                 xchg    ax, ax
.text:0000000000012770
.text:0000000000012770 loc_12770:                              ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000012770                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000012770                 mov     edx, 5Ch ; '\'
.text:0000000000012775                 mov     ebx, 5Ch ; '\'
.text:000000000001277A                 jmp     loc_12514
.text:000000000001277A ; ---------------------------------------------------------------------------
.text:000000000001277F                 align 20h
.text:0000000000012780
.text:0000000000012780 loc_12780:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012780                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012780                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000012785                 xor     r10d, r10d
.text:0000000000012788                 mov     ebx, 66h ; 'f'
.text:000000000001278D                 jmp     loc_12514
.text:000000000001278D ; ---------------------------------------------------------------------------
.text:0000000000012792                 align 8
.text:0000000000012798
.text:0000000000012798 loc_12798:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012798                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012798                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000001279D                 xor     r10d, r10d
.text:00000000000127A0                 mov     ebx, 6Eh ; 'n'
.text:00000000000127A5                 jmp     loc_12502
.text:00000000000127A5 ; ---------------------------------------------------------------------------
.text:00000000000127AA                 align 10h
.text:00000000000127B0
.text:00000000000127B0 loc_127B0:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000127B0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000127B0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000127B5                 jmp     loc_12580
.text:00000000000127B5 ; ---------------------------------------------------------------------------
.text:00000000000127BA                 align 20h
.text:00000000000127C0
.text:00000000000127C0 loc_127C0:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000127C0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000127C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000127C3
.text:00000000000127C3 loc_127C3:                              ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000127C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000127C8                 setz    dl
.text:00000000000127CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000127D0                 jnz     loc_1336A
.text:00000000000127D6                 mov     eax, r8d
.text:00000000000127D9                 mov     rcx, r15
.text:00000000000127DC                 xor     eax, 1
.text:00000000000127DF                 and     al, dl
.text:00000000000127E1                 jz      short loc_12810
.text:00000000000127E3                 cmp     r13, r15
.text:00000000000127E6                 jbe     short loc_127ED
.text:00000000000127E8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000127ED
.text:00000000000127ED loc_127ED:                              ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000127ED                 lea     rcx, [r15+1]
.text:00000000000127F1                 cmp     r13, rcx
.text:00000000000127F4                 jbe     short loc_127FC
.text:00000000000127F6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000127FC
.text:00000000000127FC loc_127FC:                              ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000127FC                 lea     rcx, [r15+2]
.text:0000000000012800                 cmp     r13, rcx
.text:0000000000012803                 ja      loc_12E39
.text:0000000000012809
.text:0000000000012809 loc_12809:                              ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000012809                 lea     rcx, [r15+3]
.text:000000000001280D                 mov     r8d, eax
.text:0000000000012810
.text:0000000000012810 loc_12810:                              ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000012810                 cmp     r13, rcx
.text:0000000000012813                 jbe     short loc_1281A
.text:0000000000012815                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000001281A
.text:000000000001281A loc_1281A:                              ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000001281A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000001281F                 lea     r15, [rcx+1]
.text:0000000000012823                 jz      loc_12E29
.text:0000000000012829                 lea     rax, [rbp+1]
.text:000000000001282D                 cmp     rax, r11
.text:0000000000012830                 jnb     short loc_1284B
.text:0000000000012832                 mov     rax, [rsp+0E8h+s]
.text:0000000000012837                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000001283C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000012840                 sub     eax, 30h ; '0'
.text:0000000000012843                 cmp     al, 9
.text:0000000000012845                 jbe     loc_13079
.text:000000000001284B
.text:000000000001284B loc_1284B:                              ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000001284B                 mov     eax, r12d
.text:000000000001284E                 mov     ebx, 30h ; '0'
.text:0000000000012853                 xor     r12d, r12d
.text:0000000000012856                 jmp     loc_12408
.text:0000000000012856 ; ---------------------------------------------------------------------------
.text:000000000001285B                 align 20h
.text:0000000000012860
.text:0000000000012860 loc_12860:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012860                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012860                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000012865                 mov     r12d, r10d
.text:0000000000012868                 setz    dl
.text:000000000001286B                 xor     r10d, r10d
.text:000000000001286E                 xor     eax, eax
.text:0000000000012870                 jmp     loc_12408
.text:0000000000012870 ; ---------------------------------------------------------------------------
.text:0000000000012875                 align 8
.text:0000000000012878
.text:0000000000012878 loc_12878:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012878                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012878                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000001287D                 setz    dl
.text:0000000000012880                 xor     r10d, r10d
.text:0000000000012883                 jmp     loc_12648
.text:0000000000012883 ; ---------------------------------------------------------------------------
.text:0000000000012888                 align 10h
.text:0000000000012890
.text:0000000000012890 loc_12890:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012890                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012890                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000012895                 setz    dl
.text:0000000000012898                 xor     r10d, r10d
.text:000000000001289B                 xor     r12d, r12d
.text:000000000001289E                 jmp     loc_12651
.text:000000000001289E ; ---------------------------------------------------------------------------
.text:00000000000128A3                 align 8
.text:00000000000128A8
.text:00000000000128A8 loc_128A8:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000128A8                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000128A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000128AD                 mov     r12d, r10d
.text:00000000000128B0                 mov     ebx, 20h ; ' '
.text:00000000000128B5                 setz    dl
.text:00000000000128B8                 xor     r10d, r10d
.text:00000000000128BB                 jmp     loc_12651
.text:00000000000128C0 ; ---------------------------------------------------------------------------
.text:00000000000128C0
.text:00000000000128C0 loc_128C0:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000128C0                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000128C0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000128C5                 xor     r10d, r10d
.text:00000000000128C8                 mov     ebx, 72h ; 'r'
.text:00000000000128CD                 jmp     loc_12502
.text:00000000000128CD ; ---------------------------------------------------------------------------
.text:00000000000128D2                 align 8
.text:00000000000128D8
.text:00000000000128D8 loc_128D8:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000128D8                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000128D8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000128DD                 jmp     loc_12580
.text:00000000000128DD ; ---------------------------------------------------------------------------
.text:00000000000128E2                 align 8
.text:00000000000128E8
.text:00000000000128E8 loc_128E8:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000128E8                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:00000000000128E8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000128ED                 xor     r10d, r10d
.text:00000000000128F0                 mov     ebx, 74h ; 't'
.text:00000000000128F5                 jmp     loc_12502
.text:00000000000128F5 ; ---------------------------------------------------------------------------
.text:00000000000128FA                 align 20h
.text:0000000000012900
.text:0000000000012900 loc_12900:                              ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000012900                                         ; DATA XREF: .rodata:jpt_1275A↓o
.text:0000000000012900                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000012905                 jmp     loc_12580
.text:0000000000012905 ; ---------------------------------------------------------------------------
.text:000000000001290A                 align 10h
.text:0000000000012910
.text:0000000000012910 loc_12910:                              ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000012910                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000012910                 xor     r10d, r10d
.text:0000000000012913                 jmp     loc_123B0
.text:0000000000012913 ; ---------------------------------------------------------------------------
.text:0000000000012918                 align 20h
.text:0000000000012920
.text:0000000000012920 loc_12920:                              ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000012920                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000012925                 jnz     loc_13290
.text:000000000001292B
.text:000000000001292B loc_1292B:                              ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000001292B                 add     rbp, 1
.text:000000000001292F                 mov     eax, r8d
.text:0000000000012932                 xor     r12d, r12d
.text:0000000000012935                 mov     ebx, 5Ch ; '\'
.text:000000000001293A                 jmp     loc_1244C
.text:000000000001293A ; ---------------------------------------------------------------------------
.text:000000000001293F                 align 20h
.text:0000000000012940
.text:0000000000012940 loc_12940:                              ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000012940                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012945                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000001294A                 mov     r12d, r8d
.text:000000000001294D                 mov     rbp, r11
.text:0000000000012950                 setz    dl
.text:0000000000012953                 mov     eax, ebx
.text:0000000000012955                 test    r15, r15
.text:0000000000012958                 setz    cl
.text:000000000001295B                 and     eax, edx
.text:000000000001295D                 and     al, cl
.text:000000000001295F                 jnz     loc_133C6
.text:0000000000012965                 mov     eax, ebx
.text:0000000000012967                 xor     eax, 1
.text:000000000001296A                 and     dl, al
.text:000000000001296C                 jz      loc_132DC
.text:0000000000012972                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000012977                 jz      loc_132DA
.text:000000000001297D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000012982                 jnz     loc_1337D
.text:0000000000012988                 test    r13, r13
.text:000000000001298B                 setz    al
.text:000000000001298E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000012994                 setnz   dl
.text:0000000000012997                 and     al, dl
.text:0000000000012999                 jz      loc_133BC
.text:000000000001299F                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000129A4
.text:00000000000129A4 loc_129A4:                              ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000129A4                 lea     rbx, aInvalidSSArgum+19h ; "'"
.text:00000000000129AB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000129AF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000129B7                 mov     r15d, 1
.text:00000000000129BD                 mov     [rsp+0E8h+n], 1
.text:00000000000129C6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000129CB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000129D0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000129D4                 jmp     loc_122B3
.text:00000000000129D4 ; ---------------------------------------------------------------------------
.text:00000000000129D9                 align 20h
.text:00000000000129E0
.text:00000000000129E0 loc_129E0:                              ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000129E0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000129E5                 jnz     loc_13290
.text:00000000000129EB                 test    r13, r13
.text:00000000000129EE                 jz      loc_12DF0
.text:00000000000129F4                 xor     edx, edx
.text:00000000000129F6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000129FC                 jnz     loc_12DF0
.text:0000000000012A02
.text:0000000000012A02 loc_12A02:                              ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000012A02                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000012A02                 mov     [rsp+0E8h+var_98], r13
.text:0000000000012A07                 add     r15, 3
.text:0000000000012A0B                 xor     eax, eax
.text:0000000000012A0D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000012A12                 xor     r8d, r8d
.text:0000000000012A15                 mov     r13, rdx
.text:0000000000012A18                 mov     ebx, 27h ; '''
.text:0000000000012A1D                 jmp     loc_12439
.text:0000000000012A1D ; ---------------------------------------------------------------------------
.text:0000000000012A22                 align 8
.text:0000000000012A28
.text:0000000000012A28 loc_12A28:                              ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000012A28                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000012A2D                 jz      short loc_12A50
.text:0000000000012A2F                 lea     rcx, [rbp+2]
.text:0000000000012A33                 cmp     rcx, r11
.text:0000000000012A36                 jnb     short loc_12A50
.text:0000000000012A38                 mov     rax, [rsp+0E8h+s]
.text:0000000000012A3D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000012A42                 jz      loc_131D2
.text:0000000000012A48                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000012A50
.text:0000000000012A50 loc_12A50:                              ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000012A50                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000012A50                 xor     edx, edx
.text:0000000000012A52                 xor     r12d, r12d
.text:0000000000012A55                 xor     eax, eax
.text:0000000000012A57                 mov     ebx, 3Fh ; '?'
.text:0000000000012A5C                 jmp     loc_12408
.text:0000000000012A5C ; ---------------------------------------------------------------------------
.text:0000000000012A61                 align 8
.text:0000000000012A68
.text:0000000000012A68 loc_12A68:                              ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000012A68                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000012A6D                 jnz     loc_13290
.text:0000000000012A73                 xor     r12d, r12d
.text:0000000000012A76                 xor     eax, eax
.text:0000000000012A78                 mov     ebx, 3Fh ; '?'
.text:0000000000012A7D                 jmp     loc_12439
.text:0000000000012A7D ; ---------------------------------------------------------------------------
.text:0000000000012A82                 align 8
.text:0000000000012A88
.text:0000000000012A88 loc_12A88:                              ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000012A88                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000012A90                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000012A94                 mov     [rsp+0E8h+var_48], 0
.text:0000000000012AA0                 mov     [rsp+0E8h+ps], rax
.text:0000000000012AA5                 jnz     short loc_12AD4
.text:0000000000012AA7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000012AAC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000012AB1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000012AB6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000012ABB                 call    _strlen
.text:0000000000012AC0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000012AC6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000012ACC                 mov     r11, rax
.text:0000000000012ACF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000012AD4
.text:0000000000012AD4 loc_12AD4:                              ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000012AD4                 lea     rax, [rsp+0E8h+wc]
.text:0000000000012ADC                 xor     ecx, ecx
.text:0000000000012ADE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000012AE2                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000012AE7                 mov     rbx, rcx
.text:0000000000012AEA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000012AF2                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000012AF7                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000012AFC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000012B04                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000012B09                 mov     [rsp+0E8h+var_78], r13
.text:0000000000012B0E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000012B13
.text:0000000000012B13 loc_12B13:                              ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000012B13                 mov     rax, [rsp+0E8h+s]
.text:0000000000012B18                 lea     r14, [rbp+rbx+0]
.text:0000000000012B1D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000012B22                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000012B27                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000012B2C                 lea     r13, [rax+r14]
.text:0000000000012B30                 sub     rdx, r14
.text:0000000000012B33                 mov     rsi, r13
.text:0000000000012B36                 call    rpl_mbrtowc
.text:0000000000012B3B                 test    rax, rax
.text:0000000000012B3E                 mov     r15, rax
.text:0000000000012B41                 jz      short loc_12B91
.text:0000000000012B43                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000012B47                 jz      loc_13165
.text:0000000000012B4D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000012B51                 jz      loc_130F1
.text:0000000000012B57                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012B5C                 setz    al
.text:0000000000012B5F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000012B63                 jnz     loc_12D00
.text:0000000000012B69
.text:0000000000012B69 loc_12B69:                              ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000012B69                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000012B69                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000012B70                 call    _iswprint
.text:0000000000012B75                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000012B7A                 test    eax, eax
.text:0000000000012B7C                 mov     eax, 0
.text:0000000000012B81                 cmovz   r12d, eax
.text:0000000000012B85                 add     rbx, r15
.text:0000000000012B88                 call    _mbsinit
.text:0000000000012B8D                 test    eax, eax
.text:0000000000012B8F                 jz      short loc_12B13
.text:0000000000012B91
.text:0000000000012B91 loc_12B91:                              ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000012B91                 mov     edx, r12d
.text:0000000000012B94                 mov     rdi, rbx
.text:0000000000012B97                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000012B9D                 xor     edx, 1
.text:0000000000012BA0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000012BA5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000012BAB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000012BAF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000012BB7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000012BBC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000012BC1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000012BC6
.text:0000000000012BC6 loc_12BC6:                              ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000012BC6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000012BC6                 cmp     rdi, 1
.text:0000000000012BCA                 jbe     loc_131CB
.text:0000000000012BD0
.text:0000000000012BD0 loc_12BD0:                              ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000012BD0                 mov     rcx, rdi
.text:0000000000012BD3                 xor     esi, esi
.text:0000000000012BD5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000012BDB                 add     rcx, rbp
.text:0000000000012BDE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000012BE3                 jmp     loc_12C9E
.text:0000000000012BE3 ; ---------------------------------------------------------------------------
.text:0000000000012BE8                 align 10h
.text:0000000000012BF0
.text:0000000000012BF0 loc_12BF0:                              ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000012BF0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000012BF5                 setz    al
.text:0000000000012BF8                 test    r9b, r9b
.text:0000000000012BFB                 jnz     loc_130B0
.text:0000000000012C01                 mov     esi, r8d
.text:0000000000012C04                 xor     esi, 1
.text:0000000000012C07                 and     al, sil
.text:0000000000012C0A                 jz      short loc_12C3B
.text:0000000000012C0C                 cmp     r13, r15
.text:0000000000012C0F                 jbe     short loc_12C16
.text:0000000000012C11                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000012C16
.text:0000000000012C16 loc_12C16:                              ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000012C16                 lea     rsi, [r15+1]
.text:0000000000012C1A                 cmp     r13, rsi
.text:0000000000012C1D                 jbe     short loc_12C25
.text:0000000000012C1F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000012C25
.text:0000000000012C25 loc_12C25:                              ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000012C25                 lea     rsi, [r15+2]
.text:0000000000012C29                 cmp     r13, rsi
.text:0000000000012C2C                 jbe     short loc_12C34
.text:0000000000012C2E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000012C34
.text:0000000000012C34 loc_12C34:                              ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000012C34                 add     r15, 3
.text:0000000000012C38                 mov     r8d, eax
.text:0000000000012C3B
.text:0000000000012C3B loc_12C3B:                              ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000012C3B                 cmp     r13, r15
.text:0000000000012C3E                 jbe     short loc_12C45
.text:0000000000012C40                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000012C45
.text:0000000000012C45 loc_12C45:                              ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000012C45                 lea     rax, [r15+1]
.text:0000000000012C49                 cmp     r13, rax
.text:0000000000012C4C                 jbe     short loc_12C5B
.text:0000000000012C4E                 mov     eax, ebx
.text:0000000000012C50                 shr     al, 6
.text:0000000000012C53                 add     eax, 30h ; '0'
.text:0000000000012C56                 mov     [r14+r15+1], al
.text:0000000000012C5B
.text:0000000000012C5B loc_12C5B:                              ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000012C5B                 lea     rax, [r15+2]
.text:0000000000012C5F                 cmp     r13, rax
.text:0000000000012C62                 jbe     short loc_12C74
.text:0000000000012C64                 mov     eax, ebx
.text:0000000000012C66                 shr     al, 3
.text:0000000000012C69                 and     eax, 7
.text:0000000000012C6C                 add     eax, 30h ; '0'
.text:0000000000012C6F                 mov     [r14+r15+2], al
.text:0000000000012C74
.text:0000000000012C74 loc_12C74:                              ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000012C74                 and     ebx, 7
.text:0000000000012C77                 add     rbp, 1
.text:0000000000012C7B                 add     r15, 3
.text:0000000000012C7F                 add     ebx, 30h ; '0'
.text:0000000000012C82                 cmp     rbp, rcx
.text:0000000000012C85                 jnb     loc_12470
.text:0000000000012C8B                 mov     esi, edx
.text:0000000000012C8D
.text:0000000000012C8D loc_12C8D:                              ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000012C8D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000012C8D                 cmp     r13, r15
.text:0000000000012C90                 jbe     short loc_12C96
.text:0000000000012C92                 mov     [r14+r15], bl
.text:0000000000012C96
.text:0000000000012C96 loc_12C96:                              ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000012C96                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000012C9A                 add     r15, 1
.text:0000000000012C9E
.text:0000000000012C9E loc_12C9E:                              ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000012C9E                 test    dl, dl
.text:0000000000012CA0                 jnz     loc_12BF0
.text:0000000000012CA6                 mov     eax, esi
.text:0000000000012CA8                 xor     eax, 1
.text:0000000000012CAB                 and     eax, r8d
.text:0000000000012CAE                 test    r10b, r10b
.text:0000000000012CB1                 jz      short loc_12CC1
.text:0000000000012CB3                 cmp     r13, r15
.text:0000000000012CB6                 jbe     short loc_12CBD
.text:0000000000012CB8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000012CBD
.text:0000000000012CBD loc_12CBD:                              ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000012CBD                 add     r15, 1
.text:0000000000012CC1
.text:0000000000012CC1 loc_12CC1:                              ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000012CC1                 add     rbp, 1
.text:0000000000012CC5                 cmp     rbp, rcx
.text:0000000000012CC8                 jnb     loc_1244C
.text:0000000000012CCE                 test    al, al
.text:0000000000012CD0                 jz      loc_130CE
.text:0000000000012CD6                 cmp     r13, r15
.text:0000000000012CD9                 jbe     short loc_12CE0
.text:0000000000012CDB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000012CE0
.text:0000000000012CE0 loc_12CE0:                              ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000012CE0                 lea     rax, [r15+1]
.text:0000000000012CE4                 cmp     r13, rax
.text:0000000000012CE7                 jbe     short loc_12CEF
.text:0000000000012CE9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000012CEF
.text:0000000000012CEF loc_12CEF:                              ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000012CEF                 add     r15, 2
.text:0000000000012CF3                 xor     r10d, r10d
.text:0000000000012CF6                 xor     r8d, r8d
.text:0000000000012CF9                 jmp     short loc_12C8D
.text:0000000000012CF9 ; ---------------------------------------------------------------------------
.text:0000000000012CFB                 align 20h
.text:0000000000012D00
.text:0000000000012D00 loc_12D00:                              ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000012D00                 cmp     r15, 1
.text:0000000000012D04                 jz      loc_12B69
.text:0000000000012D0A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000012D0F                 lea     rcx, [rdi+r15]
.text:0000000000012D13                 lea     rdx, [rdi+r14+1]
.text:0000000000012D18                 lea     r8, [rcx+r14]
.text:0000000000012D1C                 jmp     short loc_12D2D
.text:0000000000012D1C ; ---------------------------------------------------------------------------
.text:0000000000012D1E                 align 20h
.text:0000000000012D20
.text:0000000000012D20 loc_12D20:                              ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000012D20                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000012D20                 add     rdx, 1
.text:0000000000012D24                 cmp     r8, rdx
.text:0000000000012D27                 jz      loc_12B69
.text:0000000000012D2D
.text:0000000000012D2D loc_12D2D:                              ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000012D2D                 movzx   ecx, byte ptr [rdx]
.text:0000000000012D30                 sub     ecx, 5Bh ; '['
.text:0000000000012D33                 cmp     cl, 21h ; '!'
.text:0000000000012D36                 ja      short loc_12D20
.text:0000000000012D38                 mov     esi, 1
.text:0000000000012D3D                 shl     rsi, cl
.text:0000000000012D40                 mov     rcx, rsi
.text:0000000000012D43                 mov     rsi, 20000002Bh
.text:0000000000012D4D                 test    rcx, rsi
.text:0000000000012D50                 jz      short loc_12D20
.text:0000000000012D52                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000012D57                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000012D5C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000012D61                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000012D69
.text:0000000000012D69 loc_12D69:                              ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000012D69                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000012D69                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000012D6E                 jz      short loc_12D80
.text:0000000000012D70                 test    al, al
.text:0000000000012D72                 mov     eax, 4
.text:0000000000012D77                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000012D7C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000012D80
.text:0000000000012D80 loc_12D80:                              ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000012D80                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000012D80                 sub     rsp, 8
.text:0000000000012D84                 mov     rcx, rbp
.text:0000000000012D87                 mov     rsi, r13
.text:0000000000012D8A                 push    [rsp+0F0h+var_88]
.text:0000000000012D8E                 push    [rsp+0F8h+var_80]
.text:0000000000012D92                 mov     rdi, r14
.text:0000000000012D95                 push    0
.text:0000000000012D97                 mov     r9d, [rsp+108h+var_70]
.text:0000000000012D9F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000012DA4                 mov     rdx, [rsp+108h+s]
.text:0000000000012DA9                 and     r9d, 0FFFFFFFDh
.text:0000000000012DAD                 call    quotearg_buffer_restyled
.text:0000000000012DB2                 add     rsp, 20h
.text:0000000000012DB6                 mov     r15, rax
.text:0000000000012DB9
.text:0000000000012DB9 loc_12DB9:                              ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000012DB9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000012DB9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000012DC1                 xor     rbx, fs:28h
.text:0000000000012DCA                 mov     rax, r15
.text:0000000000012DCD                 jnz     loc_133D3
.text:0000000000012DD3                 add     rsp, 0B8h
.text:0000000000012DDA                 pop     rbx
.text:0000000000012DDB                 pop     rbp
.text:0000000000012DDC                 pop     r12
.text:0000000000012DDE                 pop     r13
.text:0000000000012DE0                 pop     r14
.text:0000000000012DE2                 pop     r15
.text:0000000000012DE4                 retn
.text:0000000000012DE4 ; ---------------------------------------------------------------------------
.text:0000000000012DE5                 align 8
.text:0000000000012DE8
.text:0000000000012DE8 loc_12DE8:                              ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000012DE8                 mov     rbp, r11
.text:0000000000012DEB                 jmp     loc_12D69
.text:0000000000012DF0 ; ---------------------------------------------------------------------------
.text:0000000000012DF0
.text:0000000000012DF0 loc_12DF0:                              ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000012DF0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000012DF0                 cmp     r13, r15
.text:0000000000012DF3                 jbe     short loc_12DFA
.text:0000000000012DF5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000012DFA
.text:0000000000012DFA loc_12DFA:                              ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000012DFA                 lea     rax, [r15+1]
.text:0000000000012DFE                 cmp     r13, rax
.text:0000000000012E01                 jbe     short loc_12E09
.text:0000000000012E03                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000012E09
.text:0000000000012E09 loc_12E09:                              ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000012E09                 lea     rax, [r15+2]
.text:0000000000012E0D                 cmp     r13, rax
.text:0000000000012E10                 jbe     loc_13402
.text:0000000000012E16                 mov     rdx, r13
.text:0000000000012E19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000012E1F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000012E24                 jmp     loc_12A02
.text:0000000000012E29 ; ---------------------------------------------------------------------------
.text:0000000000012E29
.text:0000000000012E29 loc_12E29:                              ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000012E29                 mov     eax, r12d
.text:0000000000012E2C                 mov     ebx, 30h ; '0'
.text:0000000000012E31                 xor     r12d, r12d
.text:0000000000012E34                 jmp     loc_12439
.text:0000000000012E39 ; ---------------------------------------------------------------------------
.text:0000000000012E39
.text:0000000000012E39 loc_12E39:                              ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000012E39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000012E3F                 jmp     loc_12809
.text:0000000000012E44 ; ---------------------------------------------------------------------------
.text:0000000000012E44
.text:0000000000012E44 loc_12E44:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012E44                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000012E44                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000012E46                 jnz     loc_12273       ; jumptable 00000000000121F1 case 1
.text:0000000000012E4C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000012E51
.text:0000000000012E51 loc_12E51:                              ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000012E51                 test    r13, r13
.text:0000000000012E54                 jnz     loc_133EA
.text:0000000000012E5A                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000012E61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000012E6A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000012E6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000012E74                 xor     r12d, r12d
.text:0000000000012E77                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000012E7C                 mov     [rsp+0E8h+n], 1
.text:0000000000012E85                 mov     [rsp+0E8h+s2], rax
.text:0000000000012E8A                 mov     r15d, 1
.text:0000000000012E90                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000012E98                 jmp     loc_122B3
.text:0000000000012E98 ; ---------------------------------------------------------------------------
.text:0000000000012E9D                 align 20h
.text:0000000000012EA0
.text:0000000000012EA0 loc_12EA0:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012EA0                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000012EA0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000012EA2                 jnz     loc_1329D
.text:0000000000012EA8                 test    r13, r13
.text:0000000000012EAB                 jz      loc_130D6
.text:0000000000012EB1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000012EB5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000012EBA                 xor     r12d, r12d
.text:0000000000012EBD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000012EC2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000012ECB
.text:0000000000012ECB loc_12ECB:                              ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000012ECB                 lea     rax, unk_1A31B
.text:0000000000012ED2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000012ED7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000012EDC                 mov     [rsp+0E8h+n], 1
.text:0000000000012EE5                 mov     r15d, 1
.text:0000000000012EEB                 mov     [rsp+0E8h+s2], rax
.text:0000000000012EF0                 jmp     loc_122B3
.text:0000000000012EF5 ; ---------------------------------------------------------------------------
.text:0000000000012EF5
.text:0000000000012EF5 loc_12EF5:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012EF5                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000012EF5                 lea     rax, unk_1A31B  ; jumptable 00000000000121F1 case 6
.text:0000000000012EFC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000012F01                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000012F06                 xor     r12d, r12d
.text:0000000000012F09                 mov     [rsp+0E8h+var_98], 0
.text:0000000000012F12                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000012F17                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000012F1C                 mov     [rsp+0E8h+n], 1
.text:0000000000012F25                 xor     r15d, r15d
.text:0000000000012F28                 mov     [rsp+0E8h+s2], rax
.text:0000000000012F2D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000012F35                 jmp     loc_122B3
.text:0000000000012F3A ; ---------------------------------------------------------------------------
.text:0000000000012F3A
.text:0000000000012F3A loc_12F3A:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012F3A                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000012F3A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000012F3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000012F44                 xor     r12d, r12d
.text:0000000000012F47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000012F50                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000012F55                 xor     r15d, r15d
.text:0000000000012F58                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000012F5D                 mov     [rsp+0E8h+n], 0
.text:0000000000012F66                 mov     [rsp+0E8h+s2], 0
.text:0000000000012F6F                 jmp     loc_122B3
.text:0000000000012F74 ; ---------------------------------------------------------------------------
.text:0000000000012F74
.text:0000000000012F74 loc_12F74:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000012F74                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000012F74                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000012F79                 jz      short loc_12FD1
.text:0000000000012F7B                 lea     rsi, asc_1A31D  ; "`"
.text:0000000000012F82                 xor     edi, edi        ; domainname
.text:0000000000012F84                 mov     edx, 5          ; category
.text:0000000000012F89                 call    _dcgettext
.text:0000000000012F8E                 mov     rcx, rax
.text:0000000000012F91                 mov     [rsp+0E8h+var_80], rax
.text:0000000000012F96                 lea     rax, asc_1A31D  ; "`"
.text:0000000000012F9D                 cmp     rcx, rax
.text:0000000000012FA0                 jz      loc_1333E
.text:0000000000012FA6
.text:0000000000012FA6 loc_12FA6:                              ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000012FA6                 lea     rsi, aInvalidSSArgum+19h ; msgid
.text:0000000000012FAD                 xor     edi, edi        ; domainname
.text:0000000000012FAF                 mov     edx, 5          ; category
.text:0000000000012FB4                 call    _dcgettext
.text:0000000000012FB9                 mov     rcx, rax
.text:0000000000012FBC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000012FC1                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000012FC8                 cmp     rcx, rax
.text:0000000000012FCB                 jz      loc_13354
.text:0000000000012FD1
.text:0000000000012FD1 loc_12FD1:                              ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000012FD1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000012FD1                 xor     r15d, r15d
.text:0000000000012FD4                 test    ebx, ebx
.text:0000000000012FD6                 jz      loc_1319D
.text:0000000000012FDC
.text:0000000000012FDC loc_12FDC:                              ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000012FDC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000012FDC                 test    ebx, ebx
.text:0000000000012FDE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000012FE3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000012FE8                 xor     r12d, r12d
.text:0000000000012FEB                 mov     rdi, rbx        ; s
.text:0000000000012FEE                 call    _strlen
.text:0000000000012FF3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000012FF8                 mov     [rsp+0E8h+n], rax
.text:0000000000012FFD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000013002                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000013007                 mov     [rsp+0E8h+var_98], 0
.text:0000000000013010                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000013015                 jmp     loc_122B3
.text:000000000001301A ; ---------------------------------------------------------------------------
.text:000000000001301A
.text:000000000001301A loc_1301A:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000001301A                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:000000000001301A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000001301F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000013024                 xor     r12d, r12d
.text:0000000000013027                 mov     [rsp+0E8h+var_98], 0
.text:0000000000013030                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000013035                 xor     r15d, r15d
.text:0000000000013038                 mov     [rsp+0E8h+var_DB], 0
.text:000000000001303D                 mov     [rsp+0E8h+n], 0
.text:0000000000013046                 mov     [rsp+0E8h+s2], 0
.text:000000000001304F                 jmp     loc_122B3
.text:0000000000013054 ; ---------------------------------------------------------------------------
.text:0000000000013054
.text:0000000000013054 loc_13054:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000013054                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000013054                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000013059                 mov     [rsp+0E8h+var_6C], 0
.text:000000000001305E                 xor     r12d, r12d
.text:0000000000013061                 mov     [rsp+0E8h+var_98], 0
.text:000000000001306A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000001306F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000013074                 jmp     loc_12293
.text:0000000000013079 ; ---------------------------------------------------------------------------
.text:0000000000013079
.text:0000000000013079 loc_13079:                              ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000013079                 cmp     r13, r15
.text:000000000001307C                 jbe     short loc_13083
.text:000000000001307E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000013083
.text:0000000000013083 loc_13083:                              ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000013083                 lea     rax, [rcx+2]
.text:0000000000013087                 cmp     r13, rax
.text:000000000001308A                 jbe     short loc_13092
.text:000000000001308C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000013092
.text:0000000000013092 loc_13092:                              ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000013092                 mov     eax, r12d
.text:0000000000013095                 lea     r15, [rcx+3]
.text:0000000000013099                 xor     r12d, r12d
.text:000000000001309C                 mov     ebx, 30h ; '0'
.text:00000000000130A1                 jmp     loc_12408
.text:00000000000130A1 ; ---------------------------------------------------------------------------
.text:00000000000130A6                 align 10h
.text:00000000000130B0
.text:00000000000130B0 loc_130B0:                              ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000130B0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000130B5                 mov     rbp, r11
.text:00000000000130B8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000130BC                 jmp     loc_12D69
.text:00000000000130C1 ; ---------------------------------------------------------------------------
.text:00000000000130C1
.text:00000000000130C1 loc_130C1:                              ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000130C1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000130C6                 xor     r12d, r12d
.text:00000000000130C9                 jmp     loc_12BD0
.text:00000000000130CE ; ---------------------------------------------------------------------------
.text:00000000000130CE
.text:00000000000130CE loc_130CE:                              ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000130CE                 xor     r10d, r10d
.text:00000000000130D1                 jmp     loc_12C8D
.text:00000000000130D6 ; ---------------------------------------------------------------------------
.text:00000000000130D6
.text:00000000000130D6 loc_130D6:                              ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000130D6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000130DF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000130E4                 xor     r12d, r12d
.text:00000000000130E7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000130EC                 jmp     loc_12ECB
.text:00000000000130F1 ; ---------------------------------------------------------------------------
.text:00000000000130F1
.text:00000000000130F1 loc_130F1:                              ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000130F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000130F6                 mov     rsi, r14
.text:00000000000130F9                 mov     rcx, r13
.text:00000000000130FC                 mov     rax, rbx
.text:00000000000130FF                 mov     rdi, rbx
.text:0000000000013102                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000013108                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000001310D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000013115                 cmp     rsi, r11
.text:0000000000013118                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000001311E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000013126                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000001312B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000013130                 jnb     short loc_13158
.text:0000000000013132                 cmp     byte ptr [rcx], 0
.text:0000000000013135                 jnz     short loc_13147
.text:0000000000013137                 jmp     short loc_13158
.text:0000000000013137 ; ---------------------------------------------------------------------------
.text:0000000000013139                 align 20h
.text:0000000000013140
.text:0000000000013140 loc_13140:                              ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000013140                 cmp     byte ptr [r9+rax], 0
.text:0000000000013145                 jz      short loc_13155
.text:0000000000013147
.text:0000000000013147 loc_13147:                              ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000013147                 add     rax, 1
.text:000000000001314B                 lea     rdx, [rbp+rax+0]
.text:0000000000013150                 cmp     r11, rdx
.text:0000000000013153                 ja      short loc_13140
.text:0000000000013155
.text:0000000000013155 loc_13155:                              ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000013155                 mov     rdi, rax
.text:0000000000013158
.text:0000000000013158 loc_13158:                              ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000013158                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000013158                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000001315D                 xor     r12d, r12d
.text:0000000000013160                 jmp     loc_12BC6
.text:0000000000013165 ; ---------------------------------------------------------------------------
.text:0000000000013165
.text:0000000000013165 loc_13165:                              ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000013165                 mov     rdi, rbx
.text:0000000000013168                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000001316E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000013173                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000013179                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000013181                 xor     r12d, r12d
.text:0000000000013184                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000013189                 mov     r13, [rsp+0E8h+var_78]
.text:000000000001318E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000013193                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000013198                 jmp     loc_12BC6
.text:000000000001319D ; ---------------------------------------------------------------------------
.text:000000000001319D
.text:000000000001319D loc_1319D:                              ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000001319D                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000131A2                 movzx   eax, byte ptr [rdx]
.text:00000000000131A5                 test    al, al
.text:00000000000131A7                 jz      loc_12FDC
.text:00000000000131AD                 nop     dword ptr [rax]
.text:00000000000131B0
.text:00000000000131B0 loc_131B0:                              ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000131B0                 cmp     r13, r15
.text:00000000000131B3                 jbe     short loc_131B9
.text:00000000000131B5                 mov     [r14+r15], al
.text:00000000000131B9
.text:00000000000131B9 loc_131B9:                              ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000131B9                 add     r15, 1
.text:00000000000131BD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000131C2                 test    al, al
.text:00000000000131C4                 jnz     short loc_131B0
.text:00000000000131C6                 jmp     loc_12FDC
.text:00000000000131CB ; ---------------------------------------------------------------------------
.text:00000000000131CB
.text:00000000000131CB loc_131CB:                              ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000131CB                 mov     eax, edx
.text:00000000000131CD                 jmp     loc_12727
.text:00000000000131D2 ; ---------------------------------------------------------------------------
.text:00000000000131D2
.text:00000000000131D2 loc_131D2:                              ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000131D2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000131D6                 cmp     bl, 3Eh ; '>'
.text:00000000000131D9                 ja      loc_12A50
.text:00000000000131DF                 mov     rax, 7000A38200000000h
.text:00000000000131E9                 bt      rax, rbx
.text:00000000000131ED                 jnb     loc_12A50
.text:00000000000131F3                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000131F8                 jnz     loc_133E2
.text:00000000000131FE                 cmp     r13, r15
.text:0000000000013201                 jbe     short loc_13208
.text:0000000000013203                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000013208
.text:0000000000013208 loc_13208:                              ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000013208                 lea     rax, [r15+1]
.text:000000000001320C                 cmp     r13, rax
.text:000000000001320F                 jbe     short loc_13217
.text:0000000000013211                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000013217
.text:0000000000013217 loc_13217:                              ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000013217                 lea     rax, [r15+2]
.text:000000000001321B                 cmp     r13, rax
.text:000000000001321E                 jbe     short loc_13226
.text:0000000000013220                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000013226
.text:0000000000013226 loc_13226:                              ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000013226                 lea     rax, [r15+3]
.text:000000000001322A                 cmp     r13, rax
.text:000000000001322D                 jbe     short loc_13235
.text:000000000001322F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000013235
.text:0000000000013235 loc_13235:                              ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000013235                 add     r15, 4
.text:0000000000013239                 xor     edx, edx
.text:000000000001323B                 xor     r12d, r12d
.text:000000000001323E                 xor     eax, eax
.text:0000000000013240                 mov     rbp, rcx
.text:0000000000013243                 jmp     loc_12408
.text:0000000000013248 ; ---------------------------------------------------------------------------
.text:0000000000013248
.text:0000000000013248 loc_13248:                              ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000013248                                         ; DATA XREF: .rodata:jpt_12271↓o
.text:0000000000013248                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000001324A                 jz      loc_133D8
.text:0000000000013250                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000013257                 mov     [rsp+0E8h+var_DA], 1
.text:000000000001325C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000013261                 xor     r12d, r12d
.text:0000000000013264                 mov     [rsp+0E8h+var_98], 0
.text:000000000001326D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000013272                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000013277                 mov     [rsp+0E8h+n], 1
.text:0000000000013280                 xor     r15d, r15d
.text:0000000000013283                 mov     [rsp+0E8h+s2], rax
.text:0000000000013288                 jmp     loc_122B3
.text:0000000000013288 ; ---------------------------------------------------------------------------
.text:000000000001328D                 align 10h
.text:0000000000013290
.text:0000000000013290 loc_13290:                              ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000013290                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000013290                 mov     rbp, r11
.text:0000000000013293                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000013298                 jmp     loc_12D69
.text:000000000001329D ; ---------------------------------------------------------------------------
.text:000000000001329D
.text:000000000001329D loc_1329D:                              ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000001329D                 lea     rax, unk_1A31B
.text:00000000000132A4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000132A9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000132AE                 xor     r12d, r12d
.text:00000000000132B1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000132BA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000132BF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000132C4                 mov     [rsp+0E8h+n], 1
.text:00000000000132CD                 xor     r15d, r15d
.text:00000000000132D0                 mov     [rsp+0E8h+s2], rax
.text:00000000000132D5                 jmp     loc_122B3
.text:00000000000132DA ; ---------------------------------------------------------------------------
.text:00000000000132DA
.text:00000000000132DA loc_132DA:                              ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000132DA                 mov     eax, edx
.text:00000000000132DC
.text:00000000000132DC loc_132DC:                              ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000132DC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000132DC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000132E1                 test    rbx, rbx
.text:00000000000132E4                 jz      short loc_13312
.text:00000000000132E6                 test    al, al
.text:00000000000132E8                 jz      short loc_13312
.text:00000000000132EA                 movzx   ecx, byte ptr [rbx]
.text:00000000000132ED                 mov     rax, rbx
.text:00000000000132F0                 test    cl, cl
.text:00000000000132F2                 jz      short loc_13312
.text:00000000000132F4                 mov     rdx, r15
.text:00000000000132F7                 sub     rax, r15
.text:00000000000132FA
.text:00000000000132FA loc_132FA:                              ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:00000000000132FA                 cmp     r13, rdx
.text:00000000000132FD                 jbe     short loc_13303
.text:00000000000132FF                 mov     [r14+rdx], cl
.text:0000000000013303
.text:0000000000013303 loc_13303:                              ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000013303                 add     rdx, 1
.text:0000000000013307                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000001330B                 test    cl, cl
.text:000000000001330D                 jnz     short loc_132FA
.text:000000000001330F                 mov     r15, rdx
.text:0000000000013312
.text:0000000000013312 loc_13312:                              ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000013312                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000013312                 cmp     r13, r15
.text:0000000000013315                 jbe     loc_12DB9
.text:000000000001331B                 mov     byte ptr [r14+r15], 0
.text:0000000000013320                 jmp     loc_12DB9
.text:0000000000013325 ; ---------------------------------------------------------------------------
.text:0000000000013325
.text:0000000000013325 loc_13325:                              ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000013325                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000001332A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000001332F                 mov     rbp, r11
.text:0000000000013332                 setz    al
.text:0000000000013335                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000013339                 jmp     loc_12D69
.text:000000000001333E ; ---------------------------------------------------------------------------
.text:000000000001333E
.text:000000000001333E loc_1333E:                              ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000001333E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000013342                 mov     rdi, rcx
.text:0000000000013345                 call    gettext_quote
.text:000000000001334A                 mov     [rsp+0E8h+var_80], rax
.text:000000000001334F                 jmp     loc_12FA6
.text:0000000000013354 ; ---------------------------------------------------------------------------
.text:0000000000013354
.text:0000000000013354 loc_13354:                              ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000013354                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000013358                 mov     rdi, rcx
.text:000000000001335B                 call    gettext_quote
.text:0000000000013360                 mov     [rsp+0E8h+var_88], rax
.text:0000000000013365                 jmp     loc_12FD1
.text:000000000001336A ; ---------------------------------------------------------------------------
.text:000000000001336A
.text:000000000001336A loc_1336A:                              ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000001336A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000001336F                 mov     rbp, r11
.text:0000000000013372                 mov     eax, edx
.text:0000000000013374                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000013378                 jmp     loc_12D69
.text:000000000001337D ; ---------------------------------------------------------------------------
.text:000000000001337D
.text:000000000001337D loc_1337D:                              ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000001337D                 sub     rsp, 8
.text:0000000000013381                 mov     r8d, 5
.text:0000000000013387                 mov     rcx, r11
.text:000000000001338A                 push    [rsp+0F0h+var_88]
.text:000000000001338E                 push    [rsp+0F8h+var_80]
.text:0000000000013392                 mov     rdi, r14
.text:0000000000013395                 push    [rsp+100h+var_C8]
.text:0000000000013399                 mov     r9d, [rsp+108h+var_70]
.text:00000000000133A1                 mov     rdx, [rsp+108h+s]
.text:00000000000133A6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000133AB                 call    quotearg_buffer_restyled
.text:00000000000133B0                 add     rsp, 20h
.text:00000000000133B4                 mov     r15, rax
.text:00000000000133B7                 jmp     loc_12DB9
.text:00000000000133BC ; ---------------------------------------------------------------------------
.text:00000000000133BC
.text:00000000000133BC loc_133BC:                              ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000133BC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000133C1                 jmp     loc_132DC
.text:00000000000133C6 ; ---------------------------------------------------------------------------
.text:00000000000133C6
.text:00000000000133C6 loc_133C6:                              ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000133C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000133CE                 jmp     loc_12D69
.text:00000000000133D3 ; ---------------------------------------------------------------------------
.text:00000000000133D3
.text:00000000000133D3 loc_133D3:                              ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000133D3                 call    ___stack_chk_fail
.text:00000000000133D8 ; ---------------------------------------------------------------------------
.text:00000000000133D8
.text:00000000000133D8 loc_133D8:                              ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000133D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000133DD                 jmp     loc_12E51
.text:00000000000133E2 ; ---------------------------------------------------------------------------
.text:00000000000133E2
.text:00000000000133E2 loc_133E2:                              ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000133E2                 mov     rbp, r11
.text:00000000000133E5                 jmp     loc_12D80
.text:00000000000133EA ; ---------------------------------------------------------------------------
.text:00000000000133EA
.text:00000000000133EA loc_133EA:                              ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000133EA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000133EF                 xor     eax, eax
.text:00000000000133F1                 xor     r12d, r12d
.text:00000000000133F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000133FD                 jmp     loc_129A4
.text:0000000000013402 ; ---------------------------------------------------------------------------
.text:0000000000013402
.text:0000000000013402 loc_13402:                              ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000013402                 mov     rdx, r13
.text:0000000000013405                 mov     r13, [rsp+0E8h+var_98]
.text:000000000001340A                 jmp     loc_12A02
.text:000000000001340F ; ---------------------------------------------------------------------------
.text:000000000001340F
.text:000000000001340F def_12271:                              ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000001340F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000001340F ; } // starts at 121E0
.text:000000000001340F quotearg_buffer_restyled endp
.text:000000000001340F
.text:000000000001340F ; ---------------------------------------------------------------------------
.text:0000000000013414                 align 20h
.text:0000000000013420
.text:0000000000013420 ; =============== S U B R O U T I N E =======================================
.text:0000000000013420
.text:0000000000013420
.text:0000000000013420 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000013420                                         ; quotearg_n_mem+7↓j ...
.text:0000000000013420
.text:0000000000013420 var_50          = qword ptr -50h
.text:0000000000013420 var_48          = qword ptr -48h
.text:0000000000013420 var_40          = dword ptr -40h
.text:0000000000013420 var_3C          = dword ptr -3Ch
.text:0000000000013420
.text:0000000000013420 ; __unwind {
.text:0000000000013420                 push    r15
.text:0000000000013422                 push    r14
.text:0000000000013424                 movsxd  r15, edi
.text:0000000000013427                 push    r13
.text:0000000000013429                 push    r12
.text:000000000001342B                 mov     r14, rdx
.text:000000000001342E                 push    rbp
.text:000000000001342F                 push    rbx
.text:0000000000013430                 mov     rbp, rcx
.text:0000000000013433                 sub     rsp, 28h
.text:0000000000013437                 mov     [rsp+58h+var_50], rsi
.text:000000000001343C                 call    ___errno_location
.text:0000000000013441                 mov     r13, rax
.text:0000000000013444                 mov     eax, [rax]
.text:0000000000013446                 test    r15d, r15d
.text:0000000000013449                 mov     rbx, cs:slotvec
.text:0000000000013450                 mov     [rsp+58h+var_40], eax
.text:0000000000013454                 js      loc_135C1
.text:000000000001345A                 cmp     cs:nslots, r15d
.text:0000000000013461                 jg      short loc_134C5
.text:0000000000013463                 cmp     r15d, 7FFFFFFFh
.text:000000000001346A                 jz      loc_135C6
.text:0000000000013470                 lea     r12d, [r15+1]
.text:0000000000013474                 lea     rax, slotvec0
.text:000000000001347B                 movsxd  rsi, r12d
.text:000000000001347E                 shl     rsi, 4
.text:0000000000013482                 cmp     rbx, rax
.text:0000000000013485                 jz      loc_135A0
.text:000000000001348B                 mov     rdi, rbx
.text:000000000001348E                 call    xrealloc
.text:0000000000013493                 mov     rbx, rax
.text:0000000000013496                 mov     cs:slotvec, rax
.text:000000000001349D
.text:000000000001349D loc_1349D:                              ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000001349D                 movsxd  rdi, cs:nslots
.text:00000000000134A4                 mov     edx, r12d
.text:00000000000134A7                 xor     esi, esi        ; c
.text:00000000000134A9                 sub     edx, edi
.text:00000000000134AB                 shl     rdi, 4
.text:00000000000134AF                 movsxd  rdx, edx
.text:00000000000134B2                 add     rdi, rbx        ; s
.text:00000000000134B5                 shl     rdx, 4          ; n
.text:00000000000134B9                 call    _memset
.text:00000000000134BE                 mov     cs:nslots, r12d
.text:00000000000134C5
.text:00000000000134C5 loc_134C5:                              ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000134C5                 mov     eax, [rbp+4]
.text:00000000000134C8                 shl     r15, 4
.text:00000000000134CC                 sub     rsp, 8
.text:00000000000134D0                 add     rbx, r15
.text:00000000000134D3                 lea     r15, [rbp+8]
.text:00000000000134D7                 mov     r8d, [rbp+0]
.text:00000000000134DB                 mov     r11, [rbx]
.text:00000000000134DE                 mov     r12, [rbx+8]
.text:00000000000134E2                 mov     rcx, r14
.text:00000000000134E5                 or      eax, 1
.text:00000000000134E8                 mov     [rsp+60h+var_3C], eax
.text:00000000000134EC                 push    qword ptr [rbp+30h]
.text:00000000000134EF                 mov     r9d, eax
.text:00000000000134F2                 push    qword ptr [rbp+28h]
.text:00000000000134F5                 push    r15
.text:00000000000134F7                 mov     rsi, r11
.text:00000000000134FA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000134FF                 mov     rdi, r12
.text:0000000000013502                 mov     [rsp+78h+var_48], r11
.text:0000000000013507                 call    quotearg_buffer_restyled
.text:000000000001350C                 add     rsp, 20h
.text:0000000000013510                 mov     r11, [rsp+58h+var_48]
.text:0000000000013515                 cmp     r11, rax
.text:0000000000013518                 ja      short loc_13581
.text:000000000001351A                 lea     rsi, [rax+1]
.text:000000000001351E                 lea     rax, slot0
.text:0000000000013525                 cmp     r12, rax
.text:0000000000013528                 mov     [rbx], rsi
.text:000000000001352B                 jz      short loc_1353F
.text:000000000001352D                 mov     rdi, r12        ; ptr
.text:0000000000013530                 mov     [rsp+58h+var_48], rsi
.text:0000000000013535                 call    free
.text:000000000001353A                 mov     rsi, [rsp+58h+var_48]
.text:000000000001353F
.text:000000000001353F loc_1353F:                              ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000001353F                 mov     rdi, rsi
.text:0000000000013542                 mov     [rsp+58h+var_48], rsi
.text:0000000000013547                 call    xmalloc
.text:000000000001354C                 sub     rsp, 8
.text:0000000000013550                 mov     [rbx+8], rax
.text:0000000000013554                 mov     r8d, [rbp+0]
.text:0000000000013558                 push    qword ptr [rbp+30h]
.text:000000000001355B                 push    qword ptr [rbp+28h]
.text:000000000001355E                 mov     rcx, r14
.text:0000000000013561                 push    r15
.text:0000000000013563                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000013568                 mov     rdi, rax
.text:000000000001356B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000013570                 mov     rsi, [rsp+78h+var_48]
.text:0000000000013575                 mov     r12, rax
.text:0000000000013578                 call    quotearg_buffer_restyled
.text:000000000001357D                 add     rsp, 20h
.text:0000000000013581
.text:0000000000013581 loc_13581:                              ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000013581                 mov     eax, [rsp+58h+var_40]
.text:0000000000013585                 mov     [r13+0], eax
.text:0000000000013589                 add     rsp, 28h
.text:000000000001358D                 mov     rax, r12
.text:0000000000013590                 pop     rbx
.text:0000000000013591                 pop     rbp
.text:0000000000013592                 pop     r12
.text:0000000000013594                 pop     r13
.text:0000000000013596                 pop     r14
.text:0000000000013598                 pop     r15
.text:000000000001359A                 retn
.text:000000000001359A ; ---------------------------------------------------------------------------
.text:000000000001359B                 align 20h
.text:00000000000135A0
.text:00000000000135A0 loc_135A0:                              ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000135A0                 xor     edi, edi
.text:00000000000135A2                 call    xrealloc
.text:00000000000135A7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000135AF                 mov     rbx, rax
.text:00000000000135B2                 mov     cs:slotvec, rax
.text:00000000000135B9                 movups  xmmword ptr [rax], xmm0
.text:00000000000135BC                 jmp     loc_1349D
.text:00000000000135C1 ; ---------------------------------------------------------------------------
.text:00000000000135C1
.text:00000000000135C1 loc_135C1:                              ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000135C1                 call    _abort
.text:00000000000135C6 ; ---------------------------------------------------------------------------
.text:00000000000135C6
.text:00000000000135C6 loc_135C6:                              ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000135C6                 call    xalloc_die
.text:00000000000135C6 ; } // starts at 13420
.text:00000000000135C6 quotearg_n_options endp
.text:00000000000135C6
.text:00000000000135C6 ; ---------------------------------------------------------------------------
.text:00000000000135CB                 align 10h
.text:00000000000135D0
.text:00000000000135D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000135D0
.text:00000000000135D0 ; Attributes: info_from_lumina
.text:00000000000135D0
.text:00000000000135D0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000135D0                 public clone_quoting_options
.text:00000000000135D0 clone_quoting_options proc near         ; CODE XREF: main+AA6↑p
.text:00000000000135D0                                         ; main+B01↑p
.text:00000000000135D0 ; __unwind {
.text:00000000000135D0                 push    r12
.text:00000000000135D2                 push    rbp
.text:00000000000135D3                 push    rbx
.text:00000000000135D4                 mov     rbx, rdi
.text:00000000000135D7                 call    ___errno_location
.text:00000000000135DC                 mov     r12d, [rax]
.text:00000000000135DF                 mov     rbp, rax
.text:00000000000135E2                 lea     rax, default_quoting_options
.text:00000000000135E9                 test    rbx, rbx
.text:00000000000135EC                 mov     esi, 38h ; '8'  ; n
.text:00000000000135F1                 cmovz   rbx, rax
.text:00000000000135F5                 mov     rdi, rbx        ; src
.text:00000000000135F8                 call    xmemdup
.text:00000000000135FD                 mov     [rbp+0], r12d
.text:0000000000013601                 pop     rbx
.text:0000000000013602                 pop     rbp
.text:0000000000013603                 pop     r12
.text:0000000000013605                 retn
.text:0000000000013605 ; } // starts at 135D0
.text:0000000000013605 clone_quoting_options endp
.text:0000000000013605
.text:0000000000013605 ; ---------------------------------------------------------------------------
.text:0000000000013606                 align 10h
.text:0000000000013610
.text:0000000000013610 ; =============== S U B R O U T I N E =======================================
.text:0000000000013610
.text:0000000000013610
.text:0000000000013610                 public get_quoting_style
.text:0000000000013610 get_quoting_style proc near             ; CODE XREF: main+A4F↑p
.text:0000000000013610                                         ; main+1207↑p ...
.text:0000000000013610 ; __unwind {
.text:0000000000013610                 lea     rax, default_quoting_options
.text:0000000000013617                 test    rdi, rdi
.text:000000000001361A                 cmovz   rdi, rax
.text:000000000001361E                 mov     eax, [rdi]
.text:0000000000013620                 retn
.text:0000000000013620 ; } // starts at 13610
.text:0000000000013620 get_quoting_style endp
.text:0000000000013620
.text:0000000000013620 ; ---------------------------------------------------------------------------
.text:0000000000013621                 align 10h
.text:0000000000013630
.text:0000000000013630 ; =============== S U B R O U T I N E =======================================
.text:0000000000013630
.text:0000000000013630
.text:0000000000013630                 public set_quoting_style
.text:0000000000013630 set_quoting_style proc near             ; CODE XREF: main+E3↑p
.text:0000000000013630                                         ; main+1A6↑p ...
.text:0000000000013630 ; __unwind {
.text:0000000000013630                 lea     rax, default_quoting_options
.text:0000000000013637                 test    rdi, rdi
.text:000000000001363A                 cmovz   rdi, rax
.text:000000000001363E                 mov     [rdi], esi
.text:0000000000013640                 retn
.text:0000000000013640 ; } // starts at 13630
.text:0000000000013640 set_quoting_style endp
.text:0000000000013640
.text:0000000000013640 ; ---------------------------------------------------------------------------
.text:0000000000013641                 align 10h
.text:0000000000013650
.text:0000000000013650 ; =============== S U B R O U T I N E =======================================
.text:0000000000013650
.text:0000000000013650 ; Attributes: info_from_lumina
.text:0000000000013650
.text:0000000000013650 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000013650                 public set_char_quoting
.text:0000000000013650 set_char_quoting proc near              ; CODE XREF: main+AF0↑p
.text:0000000000013650                                         ; main+B1A↑p ...
.text:0000000000013650 ; __unwind {
.text:0000000000013650                 lea     rax, default_quoting_options
.text:0000000000013657                 test    rdi, rdi
.text:000000000001365A                 mov     ecx, esi
.text:000000000001365C                 cmovz   rdi, rax
.text:0000000000013660                 mov     eax, esi
.text:0000000000013662                 and     ecx, 1Fh
.text:0000000000013665                 shr     al, 5
.text:0000000000013668                 movzx   eax, al
.text:000000000001366B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000013670                 mov     esi, [rdi]
.text:0000000000013672                 mov     eax, esi
.text:0000000000013674                 shr     eax, cl
.text:0000000000013676                 xor     edx, eax
.text:0000000000013678                 and     eax, 1
.text:000000000001367B                 and     edx, 1
.text:000000000001367E                 shl     edx, cl
.text:0000000000013680                 xor     edx, esi
.text:0000000000013682                 mov     [rdi], edx
.text:0000000000013684                 retn
.text:0000000000013684 ; } // starts at 13650
.text:0000000000013684 set_char_quoting endp
.text:0000000000013684
.text:0000000000013684 ; ---------------------------------------------------------------------------
.text:0000000000013685                 align 10h
.text:0000000000013690
.text:0000000000013690 ; =============== S U B R O U T I N E =======================================
.text:0000000000013690
.text:0000000000013690
.text:0000000000013690                 public set_quoting_flags
.text:0000000000013690 set_quoting_flags proc near
.text:0000000000013690 ; __unwind {
.text:0000000000013690                 lea     rax, default_quoting_options
.text:0000000000013697                 test    rdi, rdi
.text:000000000001369A                 cmovz   rdi, rax
.text:000000000001369E                 mov     eax, [rdi+4]
.text:00000000000136A1                 mov     [rdi+4], esi
.text:00000000000136A4                 retn
.text:00000000000136A4 ; } // starts at 13690
.text:00000000000136A4 set_quoting_flags endp
.text:00000000000136A4
.text:00000000000136A4 ; ---------------------------------------------------------------------------
.text:00000000000136A5                 align 10h
.text:00000000000136B0
.text:00000000000136B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000136B0
.text:00000000000136B0 ; Attributes: info_from_lumina
.text:00000000000136B0
.text:00000000000136B0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000136B0                 public set_custom_quoting
.text:00000000000136B0 set_custom_quoting proc near
.text:00000000000136B0 ; __unwind {
.text:00000000000136B0                 lea     rax, default_quoting_options
.text:00000000000136B7                 test    rdi, rdi
.text:00000000000136BA                 cmovz   rdi, rax
.text:00000000000136BE                 test    rsi, rsi
.text:00000000000136C1                 mov     dword ptr [rdi], 0Ah
.text:00000000000136C7                 jz      short loc_136D7
.text:00000000000136C9                 test    rdx, rdx
.text:00000000000136CC                 jz      short loc_136D7
.text:00000000000136CE                 mov     [rdi+28h], rsi
.text:00000000000136D2                 mov     [rdi+30h], rdx
.text:00000000000136D6                 retn
.text:00000000000136D7 ; ---------------------------------------------------------------------------
.text:00000000000136D7
.text:00000000000136D7 loc_136D7:                              ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000136D7                                         ; set_custom_quoting+1C↑j
.text:00000000000136D7                 sub     rsp, 8
.text:00000000000136DB                 call    _abort
.text:00000000000136DB ; } // starts at 136B0
.text:00000000000136DB set_custom_quoting endp
.text:00000000000136DB
.text:00000000000136E0
.text:00000000000136E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000136E0
.text:00000000000136E0 ; Attributes: info_from_lumina
.text:00000000000136E0
.text:00000000000136E0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000136E0                 public quotearg_buffer
.text:00000000000136E0 quotearg_buffer proc near               ; CODE XREF: needs_quoting+34↑p
.text:00000000000136E0                                         ; quote_name_buf+77↑p ...
.text:00000000000136E0
.text:00000000000136E0 var_40          = qword ptr -40h
.text:00000000000136E0
.text:00000000000136E0 ; __unwind {
.text:00000000000136E0                 push    r15
.text:00000000000136E2                 push    r14
.text:00000000000136E4                 lea     rax, default_quoting_options
.text:00000000000136EB                 push    r13
.text:00000000000136ED                 push    r12
.text:00000000000136EF                 mov     r13, rdi
.text:00000000000136F2                 push    rbp
.text:00000000000136F3                 push    rbx
.text:00000000000136F4                 mov     rbx, r8
.text:00000000000136F7                 mov     r14, rsi
.text:00000000000136FA                 mov     r15, rdx
.text:00000000000136FD                 sub     rsp, 18h
.text:0000000000013701                 test    r8, r8
.text:0000000000013704                 cmovz   rbx, rax
.text:0000000000013708                 mov     [rsp+48h+var_40], rcx
.text:000000000001370D                 call    ___errno_location
.text:0000000000013712                 mov     r12d, [rax]
.text:0000000000013715                 mov     rbp, rax
.text:0000000000013718                 lea     rax, [rbx+8]
.text:000000000001371C                 sub     rsp, 8
.text:0000000000013720                 mov     r9d, [rbx+4]
.text:0000000000013724                 push    qword ptr [rbx+30h]
.text:0000000000013727                 mov     r8d, [rbx]
.text:000000000001372A                 push    qword ptr [rbx+28h]
.text:000000000001372D                 mov     rdx, r15
.text:0000000000013730                 push    rax
.text:0000000000013731                 mov     rcx, [rsp+68h+var_40]
.text:0000000000013736                 mov     rsi, r14
.text:0000000000013739                 mov     rdi, r13
.text:000000000001373C                 call    quotearg_buffer_restyled
.text:0000000000013741                 mov     [rbp+0], r12d
.text:0000000000013745                 add     rsp, 38h
.text:0000000000013749                 pop     rbx
.text:000000000001374A                 pop     rbp
.text:000000000001374B                 pop     r12
.text:000000000001374D                 pop     r13
.text:000000000001374F                 pop     r14
.text:0000000000013751                 pop     r15
.text:0000000000013753                 retn
.text:0000000000013753 ; } // starts at 136E0
.text:0000000000013753 quotearg_buffer endp
.text:0000000000013753
.text:0000000000013753 ; ---------------------------------------------------------------------------
.text:0000000000013754                 align 20h
.text:0000000000013760
.text:0000000000013760 ; =============== S U B R O U T I N E =======================================
.text:0000000000013760
.text:0000000000013760 ; Attributes: info_from_lumina
.text:0000000000013760
.text:0000000000013760 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000013760                 public quotearg_alloc_mem
.text:0000000000013760 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000013760
.text:0000000000013760 var_5C          = dword ptr -5Ch
.text:0000000000013760 var_58          = qword ptr -58h
.text:0000000000013760 var_50          = qword ptr -50h
.text:0000000000013760 var_48          = qword ptr -48h
.text:0000000000013760 var_40          = qword ptr -40h
.text:0000000000013760
.text:0000000000013760 ; __unwind {
.text:0000000000013760                 push    r15
.text:0000000000013762                 push    r14
.text:0000000000013764                 lea     rax, default_quoting_options
.text:000000000001376B                 push    r13
.text:000000000001376D                 push    r12
.text:000000000001376F                 mov     r12, rdx
.text:0000000000013772                 push    rbp
.text:0000000000013773                 push    rbx
.text:0000000000013774                 mov     rbx, rcx
.text:0000000000013777                 mov     r14, rdi
.text:000000000001377A                 mov     r15, rsi
.text:000000000001377D                 sub     rsp, 38h
.text:0000000000013781                 test    rcx, rcx
.text:0000000000013784                 cmovz   rbx, rax
.text:0000000000013788                 xor     ebp, ebp
.text:000000000001378A                 call    ___errno_location
.text:000000000001378F                 test    r12, r12
.text:0000000000013792                 mov     r13, rax
.text:0000000000013795                 mov     eax, [rax]
.text:0000000000013797                 setz    bpl
.text:000000000001379B                 or      ebp, [rbx+4]
.text:000000000001379E                 lea     r10, [rbx+8]
.text:00000000000137A2                 sub     rsp, 8
.text:00000000000137A6                 mov     r8d, [rbx]
.text:00000000000137A9                 mov     rcx, r15
.text:00000000000137AC                 mov     [rsp+70h+var_5C], eax
.text:00000000000137B0                 push    qword ptr [rbx+30h]
.text:00000000000137B3                 mov     rdx, r14
.text:00000000000137B6                 push    qword ptr [rbx+28h]
.text:00000000000137B9                 push    r10
.text:00000000000137BB                 xor     esi, esi
.text:00000000000137BD                 mov     r9d, ebp
.text:00000000000137C0                 xor     edi, edi
.text:00000000000137C2                 mov     [rsp+88h+var_48], r10
.text:00000000000137C7                 call    quotearg_buffer_restyled
.text:00000000000137CC                 lea     rsi, [rax+1]
.text:00000000000137D0                 mov     [rsp+88h+var_40], rax
.text:00000000000137D5                 add     rsp, 20h
.text:00000000000137D9                 mov     rdi, rsi
.text:00000000000137DC                 mov     [rsp+68h+var_50], rsi
.text:00000000000137E1                 call    xmalloc
.text:00000000000137E6                 mov     [rsp+68h+var_58], rax
.text:00000000000137EB                 sub     rsp, 8
.text:00000000000137EF                 push    qword ptr [rbx+30h]
.text:00000000000137F2                 push    qword ptr [rbx+28h]
.text:00000000000137F5                 mov     r10, [rsp+80h+var_48]
.text:00000000000137FA                 mov     r9d, ebp
.text:00000000000137FD                 mov     r8d, [rbx]
.text:0000000000013800                 mov     rcx, r15
.text:0000000000013803                 mov     rdx, r14
.text:0000000000013806                 mov     rdi, rax
.text:0000000000013809                 push    r10
.text:000000000001380B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000013810                 call    quotearg_buffer_restyled
.text:0000000000013815                 mov     eax, [rsp+88h+var_5C]
.text:0000000000013819                 add     rsp, 20h
.text:000000000001381D                 test    r12, r12
.text:0000000000013820                 mov     [r13+0], eax
.text:0000000000013824                 jz      short loc_1382F
.text:0000000000013826                 mov     r11, [rsp+68h+var_40]
.text:000000000001382B                 mov     [r12], r11
.text:000000000001382F
.text:000000000001382F loc_1382F:                              ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000001382F                 mov     rax, [rsp+68h+var_58]
.text:0000000000013834                 add     rsp, 38h
.text:0000000000013838                 pop     rbx
.text:0000000000013839                 pop     rbp
.text:000000000001383A                 pop     r12
.text:000000000001383C                 pop     r13
.text:000000000001383E                 pop     r14
.text:0000000000013840                 pop     r15
.text:0000000000013842                 retn
.text:0000000000013842 ; } // starts at 13760
.text:0000000000013842 quotearg_alloc_mem endp
.text:0000000000013842
.text:0000000000013842 ; ---------------------------------------------------------------------------
.text:0000000000013843                 align 10h
.text:0000000000013850
.text:0000000000013850 ; =============== S U B R O U T I N E =======================================
.text:0000000000013850
.text:0000000000013850
.text:0000000000013850                 public quotearg_alloc
.text:0000000000013850 quotearg_alloc  proc near
.text:0000000000013850 ; __unwind {
.text:0000000000013850                 mov     rcx, rdx
.text:0000000000013853                 xor     edx, edx
.text:0000000000013855                 jmp     quotearg_alloc_mem
.text:0000000000013855 ; } // starts at 13850
.text:0000000000013855 quotearg_alloc  endp
.text:0000000000013855
.text:0000000000013855 ; ---------------------------------------------------------------------------
.text:000000000001385A                 align 20h
.text:0000000000013860
.text:0000000000013860 ; =============== S U B R O U T I N E =======================================
.text:0000000000013860
.text:0000000000013860 ; Attributes: info_from_lumina
.text:0000000000013860
.text:0000000000013860 ; void __cdecl quotearg_free()
.text:0000000000013860                 public quotearg_free
.text:0000000000013860 quotearg_free   proc near
.text:0000000000013860 ; __unwind {
.text:0000000000013860                 mov     eax, cs:nslots
.text:0000000000013866                 push    r12
.text:0000000000013868                 mov     r12, cs:slotvec
.text:000000000001386F                 push    rbp
.text:0000000000013870                 push    rbx
.text:0000000000013871                 cmp     eax, 1
.text:0000000000013874                 jle     short loc_138A1
.text:0000000000013876                 sub     eax, 2
.text:0000000000013879                 lea     rbx, [r12+18h]
.text:000000000001387E                 shl     rax, 4
.text:0000000000013882                 lea     rbp, [r12+rax+28h]
.text:0000000000013887                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013890
.text:0000000000013890 loc_13890:                              ; CODE XREF: quotearg_free+3F↓j
.text:0000000000013890                 mov     rdi, [rbx]      ; ptr
.text:0000000000013893                 add     rbx, 10h
.text:0000000000013897                 call    free
.text:000000000001389C                 cmp     rbx, rbp
.text:000000000001389F                 jnz     short loc_13890
.text:00000000000138A1
.text:00000000000138A1 loc_138A1:                              ; CODE XREF: quotearg_free+14↑j
.text:00000000000138A1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000138A6                 lea     rbx, slot0
.text:00000000000138AD                 cmp     rdi, rbx
.text:00000000000138B0                 jz      short loc_138C9
.text:00000000000138B2                 call    free
.text:00000000000138B7                 mov     cs:slotvec0, 100h
.text:00000000000138C2                 mov     cs:off_220258, rbx
.text:00000000000138C9
.text:00000000000138C9 loc_138C9:                              ; CODE XREF: quotearg_free+50↑j
.text:00000000000138C9                 lea     rbx, slotvec0
.text:00000000000138D0                 cmp     r12, rbx
.text:00000000000138D3                 jz      short loc_138E4
.text:00000000000138D5                 mov     rdi, r12        ; ptr
.text:00000000000138D8                 call    free
.text:00000000000138DD                 mov     cs:slotvec, rbx
.text:00000000000138E4
.text:00000000000138E4 loc_138E4:                              ; CODE XREF: quotearg_free+73↑j
.text:00000000000138E4                 pop     rbx
.text:00000000000138E5                 mov     cs:nslots, 1
.text:00000000000138EF                 pop     rbp
.text:00000000000138F0                 pop     r12
.text:00000000000138F2                 retn
.text:00000000000138F2 ; } // starts at 13860
.text:00000000000138F2 quotearg_free   endp
.text:00000000000138F2
.text:00000000000138F2 ; ---------------------------------------------------------------------------
.text:00000000000138F3                 align 20h
.text:0000000000013900
.text:0000000000013900 ; =============== S U B R O U T I N E =======================================
.text:0000000000013900
.text:0000000000013900
.text:0000000000013900                 public quotearg_n
.text:0000000000013900 quotearg_n      proc near
.text:0000000000013900 ; __unwind {
.text:0000000000013900                 lea     rcx, default_quoting_options
.text:0000000000013907                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000001390E                 jmp     quotearg_n_options
.text:000000000001390E ; } // starts at 13900
.text:000000000001390E quotearg_n      endp
.text:000000000001390E
.text:000000000001390E ; ---------------------------------------------------------------------------
.text:0000000000013913                 align 20h
.text:0000000000013920
.text:0000000000013920 ; =============== S U B R O U T I N E =======================================
.text:0000000000013920
.text:0000000000013920
.text:0000000000013920                 public quotearg_n_mem
.text:0000000000013920 quotearg_n_mem  proc near
.text:0000000000013920 ; __unwind {
.text:0000000000013920                 lea     rcx, default_quoting_options
.text:0000000000013927                 jmp     quotearg_n_options
.text:0000000000013927 ; } // starts at 13920
.text:0000000000013927 quotearg_n_mem  endp
.text:0000000000013927
.text:0000000000013927 ; ---------------------------------------------------------------------------
.text:000000000001392C                 align 10h
.text:0000000000013930
.text:0000000000013930 ; =============== S U B R O U T I N E =======================================
.text:0000000000013930
.text:0000000000013930
.text:0000000000013930                 public quotearg
.text:0000000000013930 quotearg        proc near
.text:0000000000013930 ; __unwind {
.text:0000000000013930                 lea     rcx, default_quoting_options
.text:0000000000013937                 mov     rsi, rdi
.text:000000000001393A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013941                 xor     edi, edi
.text:0000000000013943                 jmp     quotearg_n_options
.text:0000000000013943 ; } // starts at 13930
.text:0000000000013943 quotearg        endp
.text:0000000000013943
.text:0000000000013943 ; ---------------------------------------------------------------------------
.text:0000000000013948                 align 10h
.text:0000000000013950
.text:0000000000013950 ; =============== S U B R O U T I N E =======================================
.text:0000000000013950
.text:0000000000013950
.text:0000000000013950                 public quotearg_mem
.text:0000000000013950 quotearg_mem    proc near
.text:0000000000013950 ; __unwind {
.text:0000000000013950                 lea     rcx, default_quoting_options
.text:0000000000013957                 mov     rdx, rsi
.text:000000000001395A                 mov     rsi, rdi
.text:000000000001395D                 xor     edi, edi
.text:000000000001395F                 jmp     quotearg_n_options
.text:000000000001395F ; } // starts at 13950
.text:000000000001395F quotearg_mem    endp
.text:000000000001395F
.text:000000000001395F ; ---------------------------------------------------------------------------
.text:0000000000013964                 align 10h
.text:0000000000013970
.text:0000000000013970 ; =============== S U B R O U T I N E =======================================
.text:0000000000013970
.text:0000000000013970 ; Attributes: info_from_lumina
.text:0000000000013970
.text:0000000000013970 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000013970                 public quotearg_n_style
.text:0000000000013970 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:0000000000013970                                         ; quotearg_style+7↓j
.text:0000000000013970
.text:0000000000013970 var_48          = dword ptr -48h
.text:0000000000013970 var_44          = qword ptr -44h
.text:0000000000013970 var_3C          = qword ptr -3Ch
.text:0000000000013970 var_34          = qword ptr -34h
.text:0000000000013970 var_2C          = qword ptr -2Ch
.text:0000000000013970 var_24          = qword ptr -24h
.text:0000000000013970 var_1C          = qword ptr -1Ch
.text:0000000000013970 var_14          = dword ptr -14h
.text:0000000000013970 var_10          = qword ptr -10h
.text:0000000000013970
.text:0000000000013970 ; __unwind {
.text:0000000000013970                 sub     rsp, 48h
.text:0000000000013974                 mov     rax, rdx
.text:0000000000013977                 mov     rdx, fs:28h
.text:0000000000013980                 mov     [rsp+48h+var_10], rdx
.text:0000000000013985                 xor     edx, edx
.text:0000000000013987                 cmp     esi, 0Ah
.text:000000000001398A                 jz      short loc_139F4
.text:000000000001398C                 mov     [rsp+48h+var_48], esi
.text:000000000001398F                 mov     rcx, rsp
.text:0000000000013992                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013999                 mov     rsi, rax
.text:000000000001399C                 mov     [rsp+48h+var_44], 0
.text:00000000000139A5                 mov     [rsp+48h+var_3C], 0
.text:00000000000139AE                 mov     [rsp+48h+var_34], 0
.text:00000000000139B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000139C0                 mov     [rsp+48h+var_24], 0
.text:00000000000139C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000139D2                 mov     [rsp+48h+var_14], 0
.text:00000000000139DA                 call    quotearg_n_options
.text:00000000000139DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000139E4                 xor     rcx, fs:28h
.text:00000000000139ED                 jnz     short loc_139F9
.text:00000000000139EF                 add     rsp, 48h
.text:00000000000139F3                 retn
.text:00000000000139F4 ; ---------------------------------------------------------------------------
.text:00000000000139F4
.text:00000000000139F4 loc_139F4:                              ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000139F4                 call    _abort
.text:00000000000139F9 ; ---------------------------------------------------------------------------
.text:00000000000139F9
.text:00000000000139F9 loc_139F9:                              ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000139F9                 call    ___stack_chk_fail
.text:00000000000139F9 ; } // starts at 13970
.text:00000000000139F9 quotearg_n_style endp
.text:00000000000139F9
.text:00000000000139F9 ; ---------------------------------------------------------------------------
.text:00000000000139FE                 align 20h
.text:0000000000013A00
.text:0000000000013A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A00
.text:0000000000013A00 ; Attributes: info_from_lumina
.text:0000000000013A00
.text:0000000000013A00 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000013A00                 public quotearg_n_style_mem
.text:0000000000013A00 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000013A00
.text:0000000000013A00 var_48          = dword ptr -48h
.text:0000000000013A00 var_44          = qword ptr -44h
.text:0000000000013A00 var_3C          = qword ptr -3Ch
.text:0000000000013A00 var_34          = qword ptr -34h
.text:0000000000013A00 var_2C          = qword ptr -2Ch
.text:0000000000013A00 var_24          = qword ptr -24h
.text:0000000000013A00 var_1C          = qword ptr -1Ch
.text:0000000000013A00 var_14          = dword ptr -14h
.text:0000000000013A00 var_10          = qword ptr -10h
.text:0000000000013A00
.text:0000000000013A00 ; __unwind {
.text:0000000000013A00                 sub     rsp, 48h
.text:0000000000013A04                 mov     rax, rdx
.text:0000000000013A07                 mov     rdx, rcx
.text:0000000000013A0A                 mov     rcx, fs:28h
.text:0000000000013A13                 mov     [rsp+48h+var_10], rcx
.text:0000000000013A18                 xor     ecx, ecx
.text:0000000000013A1A                 cmp     esi, 0Ah
.text:0000000000013A1D                 jz      short loc_13A80
.text:0000000000013A1F                 mov     [rsp+48h+var_48], esi
.text:0000000000013A22                 mov     rcx, rsp
.text:0000000000013A25                 mov     rsi, rax
.text:0000000000013A28                 mov     [rsp+48h+var_44], 0
.text:0000000000013A31                 mov     [rsp+48h+var_3C], 0
.text:0000000000013A3A                 mov     [rsp+48h+var_34], 0
.text:0000000000013A43                 mov     [rsp+48h+var_2C], 0
.text:0000000000013A4C                 mov     [rsp+48h+var_24], 0
.text:0000000000013A55                 mov     [rsp+48h+var_1C], 0
.text:0000000000013A5E                 mov     [rsp+48h+var_14], 0
.text:0000000000013A66                 call    quotearg_n_options
.text:0000000000013A6B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000013A70                 xor     rdx, fs:28h
.text:0000000000013A79                 jnz     short loc_13A85
.text:0000000000013A7B                 add     rsp, 48h
.text:0000000000013A7F                 retn
.text:0000000000013A80 ; ---------------------------------------------------------------------------
.text:0000000000013A80
.text:0000000000013A80 loc_13A80:                              ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000013A80                 call    _abort
.text:0000000000013A85 ; ---------------------------------------------------------------------------
.text:0000000000013A85
.text:0000000000013A85 loc_13A85:                              ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000013A85                 call    ___stack_chk_fail
.text:0000000000013A85 ; } // starts at 13A00
.text:0000000000013A85 quotearg_n_style_mem endp
.text:0000000000013A85
.text:0000000000013A85 ; ---------------------------------------------------------------------------
.text:0000000000013A8A                 align 10h
.text:0000000000013A90
.text:0000000000013A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013A90
.text:0000000000013A90
.text:0000000000013A90                 public quotearg_style
.text:0000000000013A90 quotearg_style  proc near               ; CODE XREF: file_failure+11↑p
.text:0000000000013A90 ; __unwind {
.text:0000000000013A90                 mov     rdx, rsi
.text:0000000000013A93                 mov     esi, edi
.text:0000000000013A95                 xor     edi, edi
.text:0000000000013A97                 jmp     quotearg_n_style
.text:0000000000013A97 ; } // starts at 13A90
.text:0000000000013A97 quotearg_style  endp
.text:0000000000013A97
.text:0000000000013A97 ; ---------------------------------------------------------------------------
.text:0000000000013A9C                 align 20h
.text:0000000000013AA0
.text:0000000000013AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013AA0
.text:0000000000013AA0
.text:0000000000013AA0                 public quotearg_style_mem
.text:0000000000013AA0 quotearg_style_mem proc near
.text:0000000000013AA0 ; __unwind {
.text:0000000000013AA0                 mov     rcx, rdx
.text:0000000000013AA3                 mov     rdx, rsi
.text:0000000000013AA6                 mov     esi, edi
.text:0000000000013AA8                 xor     edi, edi
.text:0000000000013AAA                 jmp     quotearg_n_style_mem
.text:0000000000013AAA ; } // starts at 13AA0
.text:0000000000013AAA quotearg_style_mem endp
.text:0000000000013AAA
.text:0000000000013AAA ; ---------------------------------------------------------------------------
.text:0000000000013AAF                 align 10h
.text:0000000000013AB0
.text:0000000000013AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013AB0
.text:0000000000013AB0 ; Attributes: info_from_lumina
.text:0000000000013AB0
.text:0000000000013AB0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000013AB0                 public quotearg_char_mem
.text:0000000000013AB0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000013AB0                                         ; quotearg_colon+C↓j ...
.text:0000000000013AB0
.text:0000000000013AB0 var_48          = xmmword ptr -48h
.text:0000000000013AB0 var_38          = xmmword ptr -38h
.text:0000000000013AB0 var_28          = xmmword ptr -28h
.text:0000000000013AB0 var_18          = qword ptr -18h
.text:0000000000013AB0 var_10          = qword ptr -10h
.text:0000000000013AB0
.text:0000000000013AB0 ; __unwind {
.text:0000000000013AB0                 sub     rsp, 48h
.text:0000000000013AB4                 mov     ecx, edx
.text:0000000000013AB6                 mov     rax, fs:28h
.text:0000000000013ABF                 mov     [rsp+48h+var_10], rax
.text:0000000000013AC4                 xor     eax, eax
.text:0000000000013AC6                 mov     rax, cs:qword_221550
.text:0000000000013ACD                 mov     r8, rsp
.text:0000000000013AD0                 and     ecx, 1Fh
.text:0000000000013AD3                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000013ADB                 mov     [rsp+48h+var_18], rax
.text:0000000000013AE0                 mov     eax, edx
.text:0000000000013AE2                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000013AE6                 shr     al, 5
.text:0000000000013AE9                 movzx   eax, al
.text:0000000000013AEC                 lea     r9, [r8+rax*4+8]
.text:0000000000013AF1                 movdqa  xmm0, cs:xmmword_221530
.text:0000000000013AF9                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000013AFE                 movdqa  xmm0, cs:xmmword_221540
.text:0000000000013B06                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000013B0B                 mov     edx, [r9]
.text:0000000000013B0E                 mov     eax, edx
.text:0000000000013B10                 shr     eax, cl
.text:0000000000013B12                 not     eax
.text:0000000000013B14                 and     eax, 1
.text:0000000000013B17                 shl     eax, cl
.text:0000000000013B19                 mov     rcx, r8
.text:0000000000013B1C                 xor     eax, edx
.text:0000000000013B1E                 mov     rdx, rsi
.text:0000000000013B21                 mov     rsi, rdi
.text:0000000000013B24                 mov     [r9], eax
.text:0000000000013B27                 xor     edi, edi
.text:0000000000013B29                 call    quotearg_n_options
.text:0000000000013B2E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000013B33                 xor     rsi, fs:28h
.text:0000000000013B3C                 jnz     short loc_13B43
.text:0000000000013B3E                 add     rsp, 48h
.text:0000000000013B42                 retn
.text:0000000000013B43 ; ---------------------------------------------------------------------------
.text:0000000000013B43
.text:0000000000013B43 loc_13B43:                              ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000013B43                 call    ___stack_chk_fail
.text:0000000000013B43 ; } // starts at 13AB0
.text:0000000000013B43 quotearg_char_mem endp
.text:0000000000013B43
.text:0000000000013B43 ; ---------------------------------------------------------------------------
.text:0000000000013B48                 align 10h
.text:0000000000013B50
.text:0000000000013B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B50
.text:0000000000013B50
.text:0000000000013B50                 public quotearg_char
.text:0000000000013B50 quotearg_char   proc near
.text:0000000000013B50 ; __unwind {
.text:0000000000013B50                 movsx   edx, sil
.text:0000000000013B54                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000013B5B                 jmp     quotearg_char_mem
.text:0000000000013B5B ; } // starts at 13B50
.text:0000000000013B5B quotearg_char   endp
.text:0000000000013B5B
.text:0000000000013B60
.text:0000000000013B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B60
.text:0000000000013B60
.text:0000000000013B60                 public quotearg_colon
.text:0000000000013B60 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000013B60 ; __unwind {
.text:0000000000013B60                 mov     edx, 3Ah ; ':'
.text:0000000000013B65                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000013B6C                 jmp     quotearg_char_mem
.text:0000000000013B6C ; } // starts at 13B60
.text:0000000000013B6C quotearg_colon  endp
.text:0000000000013B6C
.text:0000000000013B6C ; ---------------------------------------------------------------------------
.text:0000000000013B71                 align 20h
.text:0000000000013B80
.text:0000000000013B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B80
.text:0000000000013B80
.text:0000000000013B80                 public quotearg_colon_mem
.text:0000000000013B80 quotearg_colon_mem proc near
.text:0000000000013B80 ; __unwind {
.text:0000000000013B80                 mov     edx, 3Ah ; ':'
.text:0000000000013B85                 jmp     quotearg_char_mem
.text:0000000000013B85 ; } // starts at 13B80
.text:0000000000013B85 quotearg_colon_mem endp
.text:0000000000013B85
.text:0000000000013B85 ; ---------------------------------------------------------------------------
.text:0000000000013B8A                 align 10h
.text:0000000000013B90
.text:0000000000013B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000013B90
.text:0000000000013B90 ; Attributes: info_from_lumina
.text:0000000000013B90
.text:0000000000013B90 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000013B90                 public quotearg_n_style_colon
.text:0000000000013B90 quotearg_n_style_colon proc near        ; CODE XREF: gobble_file_constprop_52+910↑p
.text:0000000000013B90                                         ; print_dir+149↑p
.text:0000000000013B90
.text:0000000000013B90 var_48          = dword ptr -48h
.text:0000000000013B90 var_44          = qword ptr -44h
.text:0000000000013B90 var_3C          = qword ptr -3Ch
.text:0000000000013B90 var_34          = qword ptr -34h
.text:0000000000013B90 var_2C          = qword ptr -2Ch
.text:0000000000013B90 var_24          = qword ptr -24h
.text:0000000000013B90 var_1C          = qword ptr -1Ch
.text:0000000000013B90 var_14          = dword ptr -14h
.text:0000000000013B90 var_10          = qword ptr -10h
.text:0000000000013B90
.text:0000000000013B90 ; __unwind {
.text:0000000000013B90                 sub     rsp, 48h
.text:0000000000013B94                 mov     rax, rdx
.text:0000000000013B97                 mov     rdx, fs:28h
.text:0000000000013BA0                 mov     [rsp+48h+var_10], rdx
.text:0000000000013BA5                 xor     edx, edx
.text:0000000000013BA7                 cmp     esi, 0Ah
.text:0000000000013BAA                 jz      short loc_13C14
.text:0000000000013BAC                 mov     [rsp+48h+var_48], esi
.text:0000000000013BAF                 mov     rcx, rsp
.text:0000000000013BB2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013BB9                 mov     rsi, rax
.text:0000000000013BBC                 mov     [rsp+48h+var_44], 0
.text:0000000000013BC5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000013BCE                 mov     [rsp+48h+var_34], 0
.text:0000000000013BD7                 mov     [rsp+48h+var_2C], 0
.text:0000000000013BE0                 mov     [rsp+48h+var_24], 0
.text:0000000000013BE9                 mov     [rsp+48h+var_1C], 0
.text:0000000000013BF2                 mov     [rsp+48h+var_14], 0
.text:0000000000013BFA                 call    quotearg_n_options
.text:0000000000013BFF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000013C04                 xor     rcx, fs:28h
.text:0000000000013C0D                 jnz     short loc_13C19
.text:0000000000013C0F                 add     rsp, 48h
.text:0000000000013C13                 retn
.text:0000000000013C14 ; ---------------------------------------------------------------------------
.text:0000000000013C14
.text:0000000000013C14 loc_13C14:                              ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000013C14                 call    _abort
.text:0000000000013C19 ; ---------------------------------------------------------------------------
.text:0000000000013C19
.text:0000000000013C19 loc_13C19:                              ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000013C19                 call    ___stack_chk_fail
.text:0000000000013C19 ; } // starts at 13B90
.text:0000000000013C19 quotearg_n_style_colon endp
.text:0000000000013C19
.text:0000000000013C19 ; ---------------------------------------------------------------------------
.text:0000000000013C1E                 align 20h
.text:0000000000013C20
.text:0000000000013C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000013C20
.text:0000000000013C20 ; Attributes: info_from_lumina
.text:0000000000013C20
.text:0000000000013C20 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000013C20                 public quotearg_n_custom_mem
.text:0000000000013C20 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000013C20                                         ; quotearg_custom+12↓j ...
.text:0000000000013C20
.text:0000000000013C20 var_48          = xmmword ptr -48h
.text:0000000000013C20 var_38          = xmmword ptr -38h
.text:0000000000013C20 var_28          = xmmword ptr -28h
.text:0000000000013C20 var_18          = qword ptr -18h
.text:0000000000013C20 var_10          = qword ptr -10h
.text:0000000000013C20
.text:0000000000013C20 ; __unwind {
.text:0000000000013C20                 sub     rsp, 48h
.text:0000000000013C24                 mov     r9, rcx
.text:0000000000013C27                 mov     rcx, cs:qword_221550
.text:0000000000013C2E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000013C36                 mov     rax, fs:28h
.text:0000000000013C3F                 mov     [rsp+48h+var_10], rax
.text:0000000000013C44                 xor     eax, eax
.text:0000000000013C46                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000013C4A                 test    rsi, rsi
.text:0000000000013C4D                 mov     [rsp+48h+var_18], rcx
.text:0000000000013C52                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000013C59                 movdqa  xmm0, cs:xmmword_221530
.text:0000000000013C61                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000013C66                 movdqa  xmm0, cs:xmmword_221540
.text:0000000000013C6E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000013C73                 jz      short loc_13CA7
.text:0000000000013C75                 test    rdx, rdx
.text:0000000000013C78                 jz      short loc_13CA7
.text:0000000000013C7A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000013C7F                 mov     [rsp+48h+var_18], rdx
.text:0000000000013C84                 mov     rcx, rsp
.text:0000000000013C87                 mov     rdx, r8
.text:0000000000013C8A                 mov     rsi, r9
.text:0000000000013C8D                 call    quotearg_n_options
.text:0000000000013C92                 mov     rdi, [rsp+48h+var_10]
.text:0000000000013C97                 xor     rdi, fs:28h
.text:0000000000013CA0                 jnz     short loc_13CAC
.text:0000000000013CA2                 add     rsp, 48h
.text:0000000000013CA6                 retn
.text:0000000000013CA7 ; ---------------------------------------------------------------------------
.text:0000000000013CA7
.text:0000000000013CA7 loc_13CA7:                              ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000013CA7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000013CA7                 call    _abort
.text:0000000000013CAC ; ---------------------------------------------------------------------------
.text:0000000000013CAC
.text:0000000000013CAC loc_13CAC:                              ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000013CAC                 call    ___stack_chk_fail
.text:0000000000013CAC ; } // starts at 13C20
.text:0000000000013CAC quotearg_n_custom_mem endp
.text:0000000000013CAC
.text:0000000000013CAC ; ---------------------------------------------------------------------------
.text:0000000000013CB1                 align 20h
.text:0000000000013CC0
.text:0000000000013CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CC0
.text:0000000000013CC0
.text:0000000000013CC0                 public quotearg_n_custom
.text:0000000000013CC0 quotearg_n_custom proc near
.text:0000000000013CC0 ; __unwind {
.text:0000000000013CC0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000013CC7                 jmp     quotearg_n_custom_mem
.text:0000000000013CC7 ; } // starts at 13CC0
.text:0000000000013CC7 quotearg_n_custom endp
.text:0000000000013CC7
.text:0000000000013CC7 ; ---------------------------------------------------------------------------
.text:0000000000013CCC                 align 10h
.text:0000000000013CD0
.text:0000000000013CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CD0
.text:0000000000013CD0
.text:0000000000013CD0                 public quotearg_custom
.text:0000000000013CD0 quotearg_custom proc near
.text:0000000000013CD0 ; __unwind {
.text:0000000000013CD0                 mov     rcx, rdx
.text:0000000000013CD3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000013CDA                 mov     rdx, rsi
.text:0000000000013CDD                 mov     rsi, rdi
.text:0000000000013CE0                 xor     edi, edi
.text:0000000000013CE2                 jmp     quotearg_n_custom_mem
.text:0000000000013CE2 ; } // starts at 13CD0
.text:0000000000013CE2 quotearg_custom endp
.text:0000000000013CE2
.text:0000000000013CE2 ; ---------------------------------------------------------------------------
.text:0000000000013CE7                 align 10h
.text:0000000000013CF0
.text:0000000000013CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013CF0
.text:0000000000013CF0
.text:0000000000013CF0                 public quotearg_custom_mem
.text:0000000000013CF0 quotearg_custom_mem proc near
.text:0000000000013CF0 ; __unwind {
.text:0000000000013CF0                 mov     r8, rcx
.text:0000000000013CF3                 mov     rcx, rdx
.text:0000000000013CF6                 mov     rdx, rsi
.text:0000000000013CF9                 mov     rsi, rdi
.text:0000000000013CFC                 xor     edi, edi
.text:0000000000013CFE                 jmp     quotearg_n_custom_mem
.text:0000000000013CFE ; } // starts at 13CF0
.text:0000000000013CFE quotearg_custom_mem endp
.text:0000000000013CFE
.text:0000000000013CFE ; ---------------------------------------------------------------------------
.text:0000000000013D03                 align 10h
.text:0000000000013D10
.text:0000000000013D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D10
.text:0000000000013D10
.text:0000000000013D10                 public quote_n_mem
.text:0000000000013D10 quote_n_mem     proc near
.text:0000000000013D10 ; __unwind {
.text:0000000000013D10                 lea     rcx, quote_quoting_options
.text:0000000000013D17                 jmp     quotearg_n_options
.text:0000000000013D17 ; } // starts at 13D10
.text:0000000000013D17 quote_n_mem     endp
.text:0000000000013D17
.text:0000000000013D17 ; ---------------------------------------------------------------------------
.text:0000000000013D1C                 align 20h
.text:0000000000013D20
.text:0000000000013D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D20
.text:0000000000013D20
.text:0000000000013D20                 public quote_mem
.text:0000000000013D20 quote_mem       proc near
.text:0000000000013D20 ; __unwind {
.text:0000000000013D20                 lea     rcx, quote_quoting_options
.text:0000000000013D27                 mov     rdx, rsi
.text:0000000000013D2A                 mov     rsi, rdi
.text:0000000000013D2D                 xor     edi, edi
.text:0000000000013D2F                 jmp     quotearg_n_options
.text:0000000000013D2F ; } // starts at 13D20
.text:0000000000013D2F quote_mem       endp
.text:0000000000013D2F
.text:0000000000013D2F ; ---------------------------------------------------------------------------
.text:0000000000013D34                 align 20h
.text:0000000000013D40
.text:0000000000013D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D40
.text:0000000000013D40
.text:0000000000013D40                 public quote_n
.text:0000000000013D40 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000013D40 ; __unwind {
.text:0000000000013D40                 lea     rcx, quote_quoting_options
.text:0000000000013D47                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013D4E                 jmp     quotearg_n_options
.text:0000000000013D4E ; } // starts at 13D40
.text:0000000000013D4E quote_n         endp
.text:0000000000013D4E
.text:0000000000013D4E ; ---------------------------------------------------------------------------
.text:0000000000013D53                 align 20h
.text:0000000000013D60
.text:0000000000013D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D60
.text:0000000000013D60
.text:0000000000013D60                 public quote
.text:0000000000013D60 quote           proc near               ; CODE XREF: main+955↑p
.text:0000000000013D60                                         ; main+E75↑p ...
.text:0000000000013D60 ; __unwind {
.text:0000000000013D60                 lea     rcx, quote_quoting_options
.text:0000000000013D67                 mov     rsi, rdi
.text:0000000000013D6A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000013D71                 xor     edi, edi
.text:0000000000013D73                 jmp     quotearg_n_options
.text:0000000000013D73 ; } // starts at 13D60
.text:0000000000013D73 quote           endp
.text:0000000000013D73
.text:0000000000013D73 ; ---------------------------------------------------------------------------
.text:0000000000013D78                 align 20h
.text:0000000000013D80
.text:0000000000013D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000013D80
.text:0000000000013D80
.text:0000000000013D80 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:0000000000013D80 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:0000000000013D80
.text:0000000000013D80 var_158         = qword ptr -158h
.text:0000000000013D80 var_150         = qword ptr -150h
.text:0000000000013D80 stat_buf        = stat ptr -0C8h
.text:0000000000013D80 var_30          = qword ptr -30h
.text:0000000000013D80
.text:0000000000013D80 ; __unwind {
.text:0000000000013D80                 push    r13
.text:0000000000013D82                 push    r12
.text:0000000000013D84                 mov     r13d, edi
.text:0000000000013D87                 push    rbp
.text:0000000000013D88                 push    rbx
.text:0000000000013D89                 mov     rdi, rsi
.text:0000000000013D8C                 mov     ebp, edx
.text:0000000000013D8E                 mov     r12, rcx
.text:0000000000013D91                 sub     rsp, 138h
.text:0000000000013D98                 mov     rax, fs:28h
.text:0000000000013DA1                 mov     [rsp+158h+var_30], rax
.text:0000000000013DA9                 xor     eax, eax
.text:0000000000013DAB                 call    dir_name
.text:0000000000013DB0                 mov     rcx, rsp        ; stat_buf
.text:0000000000013DB3                 mov     r8d, 100h       ; flag
.text:0000000000013DB9                 mov     rdx, rax        ; filename
.text:0000000000013DBC                 mov     esi, r13d       ; fildes
.text:0000000000013DBF                 mov     edi, 1          ; ver
.text:0000000000013DC4                 mov     rbx, rax
.text:0000000000013DC7                 call    ___fxstatat
.text:0000000000013DCC                 test    eax, eax
.text:0000000000013DCE                 jnz     loc_13E80
.text:0000000000013DD4
.text:0000000000013DD4 loc_13DD4:                              ; CODE XREF: same_nameat_part_0+11D↓j
.text:0000000000013DD4                 mov     rdi, rbx        ; ptr
.text:0000000000013DD7                 call    free
.text:0000000000013DDC                 mov     rdi, r12
.text:0000000000013DDF                 call    dir_name
.text:0000000000013DE4                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:0000000000013DEC                 mov     r8d, 100h       ; flag
.text:0000000000013DF2                 mov     rdx, rax        ; filename
.text:0000000000013DF5                 mov     esi, ebp        ; fildes
.text:0000000000013DF7                 mov     edi, 1          ; ver
.text:0000000000013DFC                 mov     rbx, rax
.text:0000000000013DFF                 call    ___fxstatat
.text:0000000000013E04                 test    eax, eax
.text:0000000000013E06                 jnz     short loc_13E58
.text:0000000000013E08
.text:0000000000013E08 loc_13E08:                              ; CODE XREF: same_nameat_part_0+F5↓j
.text:0000000000013E08                 xor     ebp, ebp
.text:0000000000013E0A                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:0000000000013E12                 cmp     [rsp+158h+var_150], rax
.text:0000000000013E17                 jnz     short loc_13E29
.text:0000000000013E19                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:0000000000013E21                 cmp     [rsp+158h+var_158], rax
.text:0000000000013E25                 setz    bpl
.text:0000000000013E29
.text:0000000000013E29 loc_13E29:                              ; CODE XREF: same_nameat_part_0+97↑j
.text:0000000000013E29                 mov     rdi, rbx        ; ptr
.text:0000000000013E2C                 call    free
.text:0000000000013E31                 mov     rdx, [rsp+158h+var_30]
.text:0000000000013E39                 xor     rdx, fs:28h
.text:0000000000013E42                 mov     eax, ebp
.text:0000000000013E44                 jnz     short loc_13EA2
.text:0000000000013E46                 add     rsp, 138h
.text:0000000000013E4D                 pop     rbx
.text:0000000000013E4E                 pop     rbp
.text:0000000000013E4F                 pop     r12
.text:0000000000013E51                 pop     r13
.text:0000000000013E53                 retn
.text:0000000000013E53 ; ---------------------------------------------------------------------------
.text:0000000000013E54                 align 8
.text:0000000000013E58
.text:0000000000013E58 loc_13E58:                              ; CODE XREF: same_nameat_part_0+86↑j
.text:0000000000013E58                 call    ___errno_location
.text:0000000000013E5D                 mov     esi, [rax]      ; errnum
.text:0000000000013E5F                 lea     rdx, aS_1+2     ; format
.text:0000000000013E66                 mov     rcx, rbx
.text:0000000000013E69                 mov     edi, 1          ; status
.text:0000000000013E6E                 xor     eax, eax
.text:0000000000013E70                 call    _error
.text:0000000000013E75                 jmp     short loc_13E08
.text:0000000000013E75 ; ---------------------------------------------------------------------------
.text:0000000000013E77                 align 20h
.text:0000000000013E80
.text:0000000000013E80 loc_13E80:                              ; CODE XREF: same_nameat_part_0+4E↑j
.text:0000000000013E80                 call    ___errno_location
.text:0000000000013E85                 mov     esi, [rax]      ; errnum
.text:0000000000013E87                 lea     rdx, aS_1+2     ; format
.text:0000000000013E8E                 mov     rcx, rbx
.text:0000000000013E91                 mov     edi, 1          ; status
.text:0000000000013E96                 xor     eax, eax
.text:0000000000013E98                 call    _error
.text:0000000000013E9D                 jmp     loc_13DD4
.text:0000000000013EA2 ; ---------------------------------------------------------------------------
.text:0000000000013EA2
.text:0000000000013EA2 loc_13EA2:                              ; CODE XREF: same_nameat_part_0+C4↑j
.text:0000000000013EA2                 call    ___stack_chk_fail
.text:0000000000013EA2 ; } // starts at 13D80
.text:0000000000013EA2 same_nameat_part_0 endp
.text:0000000000013EA2
.text:0000000000013EA2 ; ---------------------------------------------------------------------------
.text:0000000000013EA7                 align 10h
.text:0000000000013EB0
.text:0000000000013EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000013EB0
.text:0000000000013EB0
.text:0000000000013EB0                 public same_nameat
.text:0000000000013EB0 same_nameat     proc near               ; CODE XREF: same_name+D↓j
.text:0000000000013EB0
.text:0000000000013EB0 fildes          = dword ptr -3Ch
.text:0000000000013EB0
.text:0000000000013EB0 ; __unwind {
.text:0000000000013EB0                 push    r15
.text:0000000000013EB2                 push    r14
.text:0000000000013EB4                 mov     r15d, edx
.text:0000000000013EB7                 push    r13
.text:0000000000013EB9                 push    r12
.text:0000000000013EBB                 push    rbp
.text:0000000000013EBC                 push    rbx
.text:0000000000013EBD                 mov     rbp, rcx
.text:0000000000013EC0                 mov     rbx, rsi
.text:0000000000013EC3                 sub     rsp, 18h
.text:0000000000013EC7                 mov     [rsp+48h+fildes], edi
.text:0000000000013ECB                 mov     rdi, rsi
.text:0000000000013ECE                 call    last_component
.text:0000000000013ED3                 mov     rdi, rbp
.text:0000000000013ED6                 mov     r12, rax
.text:0000000000013ED9                 call    last_component
.text:0000000000013EDE                 mov     rdi, r12
.text:0000000000013EE1                 mov     r13, rax
.text:0000000000013EE4                 call    base_len
.text:0000000000013EE9                 mov     rdi, r13
.text:0000000000013EEC                 mov     r14, rax
.text:0000000000013EEF                 call    base_len
.text:0000000000013EF4                 cmp     r14, rax
.text:0000000000013EF7                 jz      short loc_13F10
.text:0000000000013EF9
.text:0000000000013EF9 loc_13EF9:                              ; CODE XREF: same_nameat+70↓j
.text:0000000000013EF9                 add     rsp, 18h
.text:0000000000013EFD                 xor     eax, eax
.text:0000000000013EFF                 pop     rbx
.text:0000000000013F00                 pop     rbp
.text:0000000000013F01                 pop     r12
.text:0000000000013F03                 pop     r13
.text:0000000000013F05                 pop     r14
.text:0000000000013F07                 pop     r15
.text:0000000000013F09                 retn
.text:0000000000013F09 ; ---------------------------------------------------------------------------
.text:0000000000013F0A                 align 10h
.text:0000000000013F10
.text:0000000000013F10 loc_13F10:                              ; CODE XREF: same_nameat+47↑j
.text:0000000000013F10                 mov     rdx, r14        ; n
.text:0000000000013F13                 mov     rsi, r13        ; s2
.text:0000000000013F16                 mov     rdi, r12        ; s1
.text:0000000000013F19                 call    _memcmp
.text:0000000000013F1E                 test    eax, eax
.text:0000000000013F20                 jnz     short loc_13EF9
.text:0000000000013F22                 mov     edi, [rsp+48h+fildes] ; fildes
.text:0000000000013F26                 add     rsp, 18h
.text:0000000000013F2A                 mov     rcx, rbp
.text:0000000000013F2D                 mov     edx, r15d
.text:0000000000013F30                 mov     rsi, rbx
.text:0000000000013F33                 pop     rbx
.text:0000000000013F34                 pop     rbp
.text:0000000000013F35                 pop     r12
.text:0000000000013F37                 pop     r13
.text:0000000000013F39                 pop     r14
.text:0000000000013F3B                 pop     r15
.text:0000000000013F3D                 jmp     same_nameat_part_0
.text:0000000000013F3D ; } // starts at 13EB0
.text:0000000000013F3D same_nameat     endp
.text:0000000000013F3D
.text:0000000000013F3D ; ---------------------------------------------------------------------------
.text:0000000000013F42                 align 10h
.text:0000000000013F50
.text:0000000000013F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F50
.text:0000000000013F50
.text:0000000000013F50                 public same_name
.text:0000000000013F50 same_name       proc near               ; CODE XREF: triple_compare+24↑p
.text:0000000000013F50 ; __unwind {
.text:0000000000013F50                 mov     edx, 0FFFFFF9Ch
.text:0000000000013F55                 mov     rcx, rsi
.text:0000000000013F58                 mov     rsi, rdi
.text:0000000000013F5B                 mov     edi, edx
.text:0000000000013F5D                 jmp     same_nameat
.text:0000000000013F5D ; } // starts at 13F50
.text:0000000000013F5D same_name       endp
.text:0000000000013F5D
.text:0000000000013F5D ; ---------------------------------------------------------------------------
.text:0000000000013F62                 align 10h
.text:0000000000013F70
.text:0000000000013F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000013F70
.text:0000000000013F70
.text:0000000000013F70 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000013F70                 public version_etc_arn
.text:0000000000013F70 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_143AB↓j
.text:0000000000013F70                                         ; version_etc_va:loc_143FB↓p ...
.text:0000000000013F70
.text:0000000000013F70 var_58          = qword ptr -58h
.text:0000000000013F70 var_50          = qword ptr -50h
.text:0000000000013F70 var_48          = qword ptr -48h
.text:0000000000013F70 var_40          = qword ptr -40h
.text:0000000000013F70
.text:0000000000013F70 ; __unwind {
.text:0000000000013F70                 push    r15
.text:0000000000013F72                 push    r14
.text:0000000000013F74                 push    r13
.text:0000000000013F76                 push    r12
.text:0000000000013F78                 mov     r12, r9
.text:0000000000013F7B                 push    rbp
.text:0000000000013F7C                 push    rbx
.text:0000000000013F7D                 mov     rbp, rdi
.text:0000000000013F80                 mov     rbx, r8
.text:0000000000013F83                 sub     rsp, 28h
.text:0000000000013F87                 test    rsi, rsi
.text:0000000000013F8A                 jz      loc_140A8
.text:0000000000013F90                 mov     r8, rdx
.text:0000000000013F93                 lea     rdx, aSSS_0     ; "%s (%s) %s\n"
.text:0000000000013F9A                 mov     r9, rcx
.text:0000000000013F9D                 xor     eax, eax
.text:0000000000013F9F                 mov     rcx, rsi
.text:0000000000013FA2                 mov     esi, 1
.text:0000000000013FA7                 call    ___fprintf_chk
.text:0000000000013FAC
.text:0000000000013FAC loc_13FAC:                              ; CODE XREF: version_etc_arn+151↓j
.text:0000000000013FAC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000013FB3                 xor     edi, edi        ; domainname
.text:0000000000013FB5                 mov     edx, 5          ; category
.text:0000000000013FBA                 call    _dcgettext
.text:0000000000013FBF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000013FC6                 mov     rcx, rax
.text:0000000000013FC9                 mov     r8d, 7E3h
.text:0000000000013FCF                 mov     esi, 1
.text:0000000000013FD4                 mov     rdi, rbp
.text:0000000000013FD7                 xor     eax, eax
.text:0000000000013FD9                 call    ___fprintf_chk
.text:0000000000013FDE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000013FE5                 xor     edi, edi        ; domainname
.text:0000000000013FE7                 mov     edx, 5          ; category
.text:0000000000013FEC                 call    _dcgettext
.text:0000000000013FF1                 mov     rsi, rbp        ; stream
.text:0000000000013FF4                 mov     rdi, rax        ; s
.text:0000000000013FF7                 call    _fputs_unlocked
.text:0000000000013FFC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000014000                 ja      def_14014       ; jumptable 0000000000014014 default case
.text:0000000000014006                 lea     rdx, jpt_14014
.text:000000000001400D                 movsxd  rax, ds:(jpt_14014 - 1AAE4h)[rdx+r12*4]
.text:0000000000014011                 add     rax, rdx
.text:0000000000014014                 jmp     rax             ; switch jump
.text:0000000000014014 ; ---------------------------------------------------------------------------
.text:0000000000014016                 align 20h
.text:0000000000014020
.text:0000000000014020 loc_14020:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014020                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014020                 mov     r9, [rbx+38h]   ; jumptable 0000000000014014 case 8
.text:0000000000014024                 mov     rax, [rbx+10h]
.text:0000000000014028                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000001402F                 mov     r8, [rbx+8]
.text:0000000000014033                 mov     edx, 5          ; category
.text:0000000000014038                 xor     edi, edi        ; domainname
.text:000000000001403A                 mov     r13, [rbx+30h]
.text:000000000001403E                 mov     r12, [rbx+28h]
.text:0000000000014042                 mov     [rsp+58h+var_48], r9
.text:0000000000014047                 mov     r15, [rbx+20h]
.text:000000000001404B                 mov     r14, [rbx+18h]
.text:000000000001404F                 mov     [rsp+58h+var_58], rax
.text:0000000000014053                 mov     [rsp+58h+var_50], r8
.text:0000000000014058                 mov     rbx, [rbx]
.text:000000000001405B                 call    _dcgettext
.text:0000000000014060                 sub     rsp, 8
.text:0000000000014064
.text:0000000000014064 loc_14064:                              ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000014064                 mov     r9, [rsp+60h+var_48]
.text:0000000000014069                 mov     rdx, rax
.text:000000000001406C                 mov     rcx, rbx
.text:000000000001406F                 mov     esi, 1
.text:0000000000014074                 mov     rdi, rbp
.text:0000000000014077                 xor     eax, eax
.text:0000000000014079                 push    r9
.text:000000000001407B                 push    r13
.text:000000000001407D                 push    r12
.text:000000000001407F                 push    r15
.text:0000000000014081                 push    r14
.text:0000000000014083                 mov     r9, [rsp+88h+var_58]
.text:0000000000014088                 mov     r8, [rsp+88h+var_50]
.text:000000000001408D                 call    ___fprintf_chk
.text:0000000000014092                 add     rsp, 30h
.text:0000000000014096
.text:0000000000014096 loc_14096:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014096                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014096                 add     rsp, 28h        ; jumptable 0000000000014014 case 0
.text:000000000001409A                 pop     rbx
.text:000000000001409B                 pop     rbp
.text:000000000001409C                 pop     r12
.text:000000000001409E                 pop     r13
.text:00000000000140A0                 pop     r14
.text:00000000000140A2                 pop     r15
.text:00000000000140A4                 retn
.text:00000000000140A4 ; ---------------------------------------------------------------------------
.text:00000000000140A5                 align 8
.text:00000000000140A8
.text:00000000000140A8 loc_140A8:                              ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000140A8                 mov     r8, rcx
.text:00000000000140AB                 mov     rcx, rdx
.text:00000000000140AE                 lea     rdx, aSS_1      ; "%s %s\n"
.text:00000000000140B5                 mov     esi, 1
.text:00000000000140BA                 xor     eax, eax
.text:00000000000140BC                 call    ___fprintf_chk
.text:00000000000140C1                 jmp     loc_13FAC
.text:00000000000140C1 ; ---------------------------------------------------------------------------
.text:00000000000140C6                 align 10h
.text:00000000000140D0
.text:00000000000140D0 loc_140D0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000140D0                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:00000000000140D0                 mov     r10, [rbx+40h]  ; jumptable 0000000000014014 case 9
.text:00000000000140D4                 mov     r9, [rbx+38h]
.text:00000000000140D8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000140DF                 mov     rax, [rbx+10h]
.text:00000000000140E3                 mov     r8, [rbx+8]
.text:00000000000140E7                 mov     edx, 5          ; category
.text:00000000000140EC                 mov     r13, [rbx+30h]
.text:00000000000140F0                 mov     r12, [rbx+28h]
.text:00000000000140F4                 mov     r15, [rbx+20h]
.text:00000000000140F8                 mov     r14, [rbx+18h]
.text:00000000000140FC                 mov     rbx, [rbx]
.text:00000000000140FF                 mov     [rsp+58h+var_40], r10
.text:0000000000014104                 mov     [rsp+58h+var_48], r9
.text:0000000000014109                 mov     [rsp+58h+var_58], rax
.text:000000000001410D                 mov     [rsp+58h+var_50], r8
.text:0000000000014112
.text:0000000000014112 loc_14112:                              ; CODE XREF: version_etc_arn+412↓j
.text:0000000000014112                 xor     edi, edi        ; domainname
.text:0000000000014114                 call    _dcgettext
.text:0000000000014119                 mov     r10, [rsp+58h+var_40]
.text:000000000001411E                 push    r10
.text:0000000000014120                 jmp     loc_14064
.text:0000000000014120 ; ---------------------------------------------------------------------------
.text:0000000000014125                 align 8
.text:0000000000014128
.text:0000000000014128 loc_14128:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014128                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014128                 mov     rbx, [rbx]      ; jumptable 0000000000014014 case 1
.text:000000000001412B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000014132                 mov     edx, 5          ; category
.text:0000000000014137                 xor     edi, edi        ; domainname
.text:0000000000014139                 call    _dcgettext
.text:000000000001413E                 add     rsp, 28h
.text:0000000000014142                 mov     rcx, rbx
.text:0000000000014145                 mov     rdi, rbp
.text:0000000000014148                 pop     rbx
.text:0000000000014149                 pop     rbp
.text:000000000001414A                 pop     r12
.text:000000000001414C                 pop     r13
.text:000000000001414E                 pop     r14
.text:0000000000014150                 pop     r15
.text:0000000000014152                 mov     rdx, rax
.text:0000000000014155                 mov     esi, 1
.text:000000000001415A                 xor     eax, eax
.text:000000000001415C                 jmp     ___fprintf_chk
.text:000000000001415C ; ---------------------------------------------------------------------------
.text:0000000000014161                 align 8
.text:0000000000014168
.text:0000000000014168 loc_14168:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014168                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014168                 mov     r12, [rbx+8]    ; jumptable 0000000000014014 case 2
.text:000000000001416C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000014173                 mov     rbx, [rbx]
.text:0000000000014176                 mov     edx, 5          ; category
.text:000000000001417B                 xor     edi, edi        ; domainname
.text:000000000001417D                 call    _dcgettext
.text:0000000000014182                 add     rsp, 28h
.text:0000000000014186                 mov     r8, r12
.text:0000000000014189                 mov     rcx, rbx
.text:000000000001418C                 mov     rdi, rbp
.text:000000000001418F                 mov     rdx, rax
.text:0000000000014192                 mov     esi, 1
.text:0000000000014197                 pop     rbx
.text:0000000000014198                 pop     rbp
.text:0000000000014199                 pop     r12
.text:000000000001419B                 pop     r13
.text:000000000001419D                 pop     r14
.text:000000000001419F                 pop     r15
.text:00000000000141A1                 xor     eax, eax
.text:00000000000141A3                 jmp     ___fprintf_chk
.text:00000000000141A3 ; ---------------------------------------------------------------------------
.text:00000000000141A8                 align 10h
.text:00000000000141B0
.text:00000000000141B0 loc_141B0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000141B0                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:00000000000141B0                 mov     r13, [rbx+10h]  ; jumptable 0000000000014014 case 3
.text:00000000000141B4                 mov     r12, [rbx+8]
.text:00000000000141B8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000141BF                 mov     rbx, [rbx]
.text:00000000000141C2                 mov     edx, 5          ; category
.text:00000000000141C7                 xor     edi, edi        ; domainname
.text:00000000000141C9                 call    _dcgettext
.text:00000000000141CE                 add     rsp, 28h
.text:00000000000141D2                 mov     r9, r13
.text:00000000000141D5                 mov     r8, r12
.text:00000000000141D8                 mov     rcx, rbx
.text:00000000000141DB                 mov     rdi, rbp
.text:00000000000141DE                 mov     rdx, rax
.text:00000000000141E1                 pop     rbx
.text:00000000000141E2                 pop     rbp
.text:00000000000141E3                 pop     r12
.text:00000000000141E5                 pop     r13
.text:00000000000141E7                 pop     r14
.text:00000000000141E9                 pop     r15
.text:00000000000141EB                 mov     esi, 1
.text:00000000000141F0                 xor     eax, eax
.text:00000000000141F2                 jmp     ___fprintf_chk
.text:00000000000141F2 ; ---------------------------------------------------------------------------
.text:00000000000141F7                 align 20h
.text:0000000000014200
.text:0000000000014200 loc_14200:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014200                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014200                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000014014 case 4
.text:0000000000014207                 mov     edx, 5          ; category
.text:000000000001420C                 xor     edi, edi        ; domainname
.text:000000000001420E                 mov     r14, [rbx+18h]
.text:0000000000014212                 mov     r13, [rbx+10h]
.text:0000000000014216                 mov     r12, [rbx+8]
.text:000000000001421A                 mov     rbx, [rbx]
.text:000000000001421D                 call    _dcgettext
.text:0000000000014222                 sub     rsp, 8
.text:0000000000014226
.text:0000000000014226 loc_14226:                              ; CODE XREF: version_etc_arn+310↓j
.text:0000000000014226                 push    r14
.text:0000000000014228                 mov     rdx, rax
.text:000000000001422B                 mov     r9, r13
.text:000000000001422E                 mov     r8, r12
.text:0000000000014231                 mov     rcx, rbx
.text:0000000000014234                 mov     rdi, rbp
.text:0000000000014237                 mov     esi, 1
.text:000000000001423C                 xor     eax, eax
.text:000000000001423E                 call    ___fprintf_chk
.text:0000000000014243                 pop     rax
.text:0000000000014244                 pop     rdx
.text:0000000000014245                 add     rsp, 28h
.text:0000000000014249                 pop     rbx
.text:000000000001424A                 pop     rbp
.text:000000000001424B                 pop     r12
.text:000000000001424D                 pop     r13
.text:000000000001424F                 pop     r14
.text:0000000000014251                 pop     r15
.text:0000000000014253                 retn
.text:0000000000014253 ; ---------------------------------------------------------------------------
.text:0000000000014254                 align 8
.text:0000000000014258
.text:0000000000014258 loc_14258:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014258                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014258                 mov     r15, [rbx+20h]  ; jumptable 0000000000014014 case 5
.text:000000000001425C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000014263                 mov     edx, 5          ; category
.text:0000000000014268                 xor     edi, edi        ; domainname
.text:000000000001426A                 mov     r14, [rbx+18h]
.text:000000000001426E                 mov     r13, [rbx+10h]
.text:0000000000014272                 mov     r12, [rbx+8]
.text:0000000000014276                 mov     rbx, [rbx]
.text:0000000000014279                 call    _dcgettext
.text:000000000001427E                 push    r15
.text:0000000000014280                 jmp     short loc_14226
.text:0000000000014280 ; ---------------------------------------------------------------------------
.text:0000000000014282                 align 8
.text:0000000000014288
.text:0000000000014288 loc_14288:                              ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000014288                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:0000000000014288                 mov     r8, [rbx+8]     ; jumptable 0000000000014014 case 6
.text:000000000001428C                 mov     r12, [rbx+28h]
.text:0000000000014290                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000014297                 mov     r15, [rbx+20h]
.text:000000000001429B                 mov     r14, [rbx+18h]
.text:000000000001429F                 mov     edx, 5          ; category
.text:00000000000142A4                 mov     r13, [rbx+10h]
.text:00000000000142A8                 xor     edi, edi        ; domainname
.text:00000000000142AA                 mov     rbx, [rbx]
.text:00000000000142AD                 mov     [rsp+58h+var_58], r8
.text:00000000000142B1                 call    _dcgettext
.text:00000000000142B6                 sub     rsp, 8
.text:00000000000142BA                 mov     r9, r13
.text:00000000000142BD                 push    r12
.text:00000000000142BF                 push    r15
.text:00000000000142C1                 push    r14
.text:00000000000142C3
.text:00000000000142C3 loc_142C3:                              ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000142C3                 mov     r8, [rsp+78h+var_58]
.text:00000000000142C8                 mov     rcx, rbx
.text:00000000000142CB                 mov     rdx, rax
.text:00000000000142CE                 mov     rdi, rbp
.text:00000000000142D1                 mov     esi, 1
.text:00000000000142D6                 xor     eax, eax
.text:00000000000142D8                 call    ___fprintf_chk
.text:00000000000142DD                 add     rsp, 20h
.text:00000000000142E1                 add     rsp, 28h
.text:00000000000142E5                 pop     rbx
.text:00000000000142E6                 pop     rbp
.text:00000000000142E7                 pop     r12
.text:00000000000142E9                 pop     r13
.text:00000000000142EB                 pop     r14
.text:00000000000142ED                 pop     r15
.text:00000000000142EF                 retn
.text:00000000000142F0 ; ---------------------------------------------------------------------------
.text:00000000000142F0
.text:00000000000142F0 loc_142F0:                              ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000142F0                                         ; DATA XREF: .rodata:jpt_14014↓o
.text:00000000000142F0                 mov     r9, [rbx+10h]   ; jumptable 0000000000014014 case 7
.text:00000000000142F4                 mov     r13, [rbx+30h]
.text:00000000000142F8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000142FF                 mov     r12, [rbx+28h]
.text:0000000000014303                 mov     r15, [rbx+20h]
.text:0000000000014307                 mov     edx, 5          ; category
.text:000000000001430C                 mov     r14, [rbx+18h]
.text:0000000000014310                 mov     r8, [rbx+8]
.text:0000000000014314                 xor     edi, edi        ; domainname
.text:0000000000014316                 mov     [rsp+58h+var_50], r9
.text:000000000001431B                 mov     rbx, [rbx]
.text:000000000001431E                 mov     [rsp+58h+var_58], r8
.text:0000000000014322                 call    _dcgettext
.text:0000000000014327                 push    r13
.text:0000000000014329                 push    r12
.text:000000000001432B                 push    r15
.text:000000000001432D                 push    r14
.text:000000000001432F                 mov     r9, [rsp+78h+var_50]
.text:0000000000014334                 jmp     short loc_142C3
.text:0000000000014334 ; ---------------------------------------------------------------------------
.text:0000000000014336                 align 20h
.text:0000000000014340
.text:0000000000014340 def_14014:                              ; CODE XREF: version_etc_arn+90↑j
.text:0000000000014340                 mov     r10, [rbx+40h]  ; jumptable 0000000000014014 default case
.text:0000000000014344                 mov     r9, [rbx+38h]
.text:0000000000014348                 mov     edx, 5
.text:000000000001434D                 mov     rax, [rbx+10h]
.text:0000000000014351                 mov     r8, [rbx+8]
.text:0000000000014355                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000001435C                 mov     r13, [rbx+30h]
.text:0000000000014360                 mov     r12, [rbx+28h]
.text:0000000000014364                 mov     r15, [rbx+20h]
.text:0000000000014368                 mov     r14, [rbx+18h]
.text:000000000001436C                 mov     [rsp+58h+var_40], r10
.text:0000000000014371                 mov     [rsp+58h+var_48], r9
.text:0000000000014376                 mov     [rsp+58h+var_58], rax
.text:000000000001437A                 mov     [rsp+58h+var_50], r8
.text:000000000001437F                 mov     rbx, [rbx]
.text:0000000000014382                 jmp     loc_14112
.text:0000000000014382 ; } // starts at 13F70
.text:0000000000014382 version_etc_arn endp
.text:0000000000014382
.text:0000000000014382 ; ---------------------------------------------------------------------------
.text:0000000000014387                 align 10h
.text:0000000000014390
.text:0000000000014390 ; =============== S U B R O U T I N E =======================================
.text:0000000000014390
.text:0000000000014390 ; Attributes: info_from_lumina
.text:0000000000014390
.text:0000000000014390 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000014390                 public version_etc_ar
.text:0000000000014390 version_etc_ar  proc near
.text:0000000000014390 ; __unwind {
.text:0000000000014390                 xor     r9d, r9d
.text:0000000000014393                 cmp     qword ptr [r8], 0
.text:0000000000014397                 jz      short loc_143AB
.text:0000000000014399                 nop     dword ptr [rax+00000000h]
.text:00000000000143A0
.text:00000000000143A0 loc_143A0:                              ; CODE XREF: version_etc_ar+19↓j
.text:00000000000143A0                 add     r9, 1
.text:00000000000143A4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000143A9                 jnz     short loc_143A0
.text:00000000000143AB
.text:00000000000143AB loc_143AB:                              ; CODE XREF: version_etc_ar+7↑j
.text:00000000000143AB                 jmp     version_etc_arn
.text:00000000000143AB ; } // starts at 14390
.text:00000000000143AB version_etc_ar  endp
.text:00000000000143AB
.text:00000000000143B0
.text:00000000000143B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000143B0
.text:00000000000143B0 ; Attributes: info_from_lumina
.text:00000000000143B0
.text:00000000000143B0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000143B0                 public version_etc_va
.text:00000000000143B0 version_etc_va  proc near
.text:00000000000143B0
.text:00000000000143B0 authtab         = qword ptr -68h
.text:00000000000143B0 var_10          = qword ptr -10h
.text:00000000000143B0
.text:00000000000143B0 ; __unwind {
.text:00000000000143B0                 sub     rsp, 68h
.text:00000000000143B4                 mov     r10, r8
.text:00000000000143B7                 xor     r9d, r9d
.text:00000000000143BA                 mov     rax, fs:28h
.text:00000000000143C3                 mov     [rsp+68h+var_10], rax
.text:00000000000143C8                 xor     eax, eax
.text:00000000000143CA                 mov     r8, rsp
.text:00000000000143CD                 nop     dword ptr [rax]
.text:00000000000143D0
.text:00000000000143D0 loc_143D0:                              ; CODE XREF: version_etc_va+49↓j
.text:00000000000143D0                 mov     eax, [r10]
.text:00000000000143D3                 cmp     eax, 2Fh ; '/'
.text:00000000000143D6                 ja      short loc_1441A
.text:00000000000143D8                 mov     r11d, eax
.text:00000000000143DB                 add     r11, [r10+10h]
.text:00000000000143DF                 add     eax, 8
.text:00000000000143E2                 mov     [r10], eax
.text:00000000000143E5
.text:00000000000143E5 loc_143E5:                              ; CODE XREF: version_etc_va+76↓j
.text:00000000000143E5                 mov     rax, [r11]
.text:00000000000143E8                 test    rax, rax
.text:00000000000143EB                 mov     [r8+r9*8], rax
.text:00000000000143EF                 jz      short loc_143FB
.text:00000000000143F1                 add     r9, 1
.text:00000000000143F5                 cmp     r9, 0Ah
.text:00000000000143F9                 jnz     short loc_143D0
.text:00000000000143FB
.text:00000000000143FB loc_143FB:                              ; CODE XREF: version_etc_va+3F↑j
.text:00000000000143FB                 call    version_etc_arn
.text:0000000000014400                 mov     rax, [rsp+68h+var_10]
.text:0000000000014405                 xor     rax, fs:28h
.text:000000000001440E                 jnz     short loc_14415
.text:0000000000014410                 add     rsp, 68h
.text:0000000000014414                 retn
.text:0000000000014415 ; ---------------------------------------------------------------------------
.text:0000000000014415
.text:0000000000014415 loc_14415:                              ; CODE XREF: version_etc_va+5E↑j
.text:0000000000014415                 call    ___stack_chk_fail
.text:000000000001441A ; ---------------------------------------------------------------------------
.text:000000000001441A
.text:000000000001441A loc_1441A:                              ; CODE XREF: version_etc_va+26↑j
.text:000000000001441A                 mov     r11, [r10+8]
.text:000000000001441E                 lea     rax, [r11+8]
.text:0000000000014422                 mov     [r10+8], rax
.text:0000000000014426                 jmp     short loc_143E5
.text:0000000000014426 ; } // starts at 143B0
.text:0000000000014426 version_etc_va  endp
.text:0000000000014426
.text:0000000000014426 ; ---------------------------------------------------------------------------
.text:0000000000014428                 align 10h
.text:0000000000014430
.text:0000000000014430 ; =============== S U B R O U T I N E =======================================
.text:0000000000014430
.text:0000000000014430 ; Attributes: info_from_lumina
.text:0000000000014430
.text:0000000000014430 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000014430                 public version_etc
.text:0000000000014430 version_etc     proc near               ; CODE XREF: main+5A0↑p
.text:0000000000014430
.text:0000000000014430 var_C0          = dword ptr -0C0h
.text:0000000000014430 var_B8          = qword ptr -0B8h
.text:0000000000014430 var_B0          = qword ptr -0B0h
.text:0000000000014430 var_A8          = byte ptr -0A8h
.text:0000000000014430 var_50          = qword ptr -50h
.text:0000000000014430 var_48          = byte ptr -48h
.text:0000000000014430 var_28          = qword ptr -28h
.text:0000000000014430 var_20          = qword ptr -20h
.text:0000000000014430 arg_0           = byte ptr  8
.text:0000000000014430
.text:0000000000014430 ; __unwind {
.text:0000000000014430                 push    rbp
.text:0000000000014431                 push    rbx
.text:0000000000014432                 mov     r10d, 20h ; ' '
.text:0000000000014438                 xor     r11d, r11d
.text:000000000001443B                 sub     rsp, 0B8h
.text:0000000000014442                 mov     rax, fs:28h
.text:000000000001444B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000014450                 xor     eax, eax
.text:0000000000014452                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000001445A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000014462                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000001446A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000001446F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000014477                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000001447F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000014484                 lea     rax, [rsp+0C8h+var_48]
.text:000000000001448C                 xor     r9d, r9d
.text:000000000001448F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000014494                 mov     rbp, rax
.text:0000000000014497                 nop     word ptr [rax+rax+00000000h]
.text:00000000000144A0
.text:00000000000144A0 loc_144A0:                              ; CODE XREF: version_etc+9A↓j
.text:00000000000144A0                 cmp     r10d, 2Fh ; '/'
.text:00000000000144A4                 ja      short loc_144FC
.text:00000000000144A6                 mov     eax, r10d
.text:00000000000144A9                 mov     r11d, 1
.text:00000000000144AF                 add     r10d, 8
.text:00000000000144B3                 add     rax, rbp
.text:00000000000144B6
.text:00000000000144B6 loc_144B6:                              ; CODE XREF: version_etc+D3↓j
.text:00000000000144B6                 mov     rax, [rax]
.text:00000000000144B9                 test    rax, rax
.text:00000000000144BC                 mov     [r8+r9*8], rax
.text:00000000000144C0                 jz      short loc_144CC
.text:00000000000144C2                 add     r9, 1
.text:00000000000144C6                 cmp     r9, 0Ah
.text:00000000000144CA                 jnz     short loc_144A0
.text:00000000000144CC
.text:00000000000144CC loc_144CC:                              ; CODE XREF: version_etc+90↑j
.text:00000000000144CC                 test    r11b, r11b
.text:00000000000144CF                 jnz     short loc_144F5
.text:00000000000144D1
.text:00000000000144D1 loc_144D1:                              ; CODE XREF: version_etc+CA↓j
.text:00000000000144D1                 call    version_etc_arn
.text:00000000000144D6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000144DB                 xor     rax, fs:28h
.text:00000000000144E4                 jnz     short loc_144F0
.text:00000000000144E6                 add     rsp, 0B8h
.text:00000000000144ED                 pop     rbx
.text:00000000000144EE                 pop     rbp
.text:00000000000144EF                 retn
.text:00000000000144F0 ; ---------------------------------------------------------------------------
.text:00000000000144F0
.text:00000000000144F0 loc_144F0:                              ; CODE XREF: version_etc+B4↑j
.text:00000000000144F0                 call    ___stack_chk_fail
.text:00000000000144F5 ; ---------------------------------------------------------------------------
.text:00000000000144F5
.text:00000000000144F5 loc_144F5:                              ; CODE XREF: version_etc+9F↑j
.text:00000000000144F5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000144FA                 jmp     short loc_144D1
.text:00000000000144FC ; ---------------------------------------------------------------------------
.text:00000000000144FC
.text:00000000000144FC loc_144FC:                              ; CODE XREF: version_etc+74↑j
.text:00000000000144FC                 mov     rax, rbx
.text:00000000000144FF                 add     rbx, 8
.text:0000000000014503                 jmp     short loc_144B6
.text:0000000000014503 ; } // starts at 14430
.text:0000000000014503 version_etc     endp
.text:0000000000014503
.text:0000000000014503 ; ---------------------------------------------------------------------------
.text:0000000000014505                 align 10h
.text:0000000000014510
.text:0000000000014510 ; =============== S U B R O U T I N E =======================================
.text:0000000000014510
.text:0000000000014510 ; Attributes: info_from_lumina
.text:0000000000014510
.text:0000000000014510 ; void __cdecl emit_bug_reporting_address()
.text:0000000000014510                 public emit_bug_reporting_address
.text:0000000000014510 emit_bug_reporting_address proc near
.text:0000000000014510 ; __unwind {
.text:0000000000014510                 push    rbx
.text:0000000000014511                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000014518                 mov     edx, 5          ; category
.text:000000000001451D                 xor     edi, edi        ; domainname
.text:000000000001451F                 call    _dcgettext
.text:0000000000014524                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000001452B                 mov     rsi, rax
.text:000000000001452E                 mov     edi, 1
.text:0000000000014533                 xor     eax, eax
.text:0000000000014535                 call    ___printf_chk
.text:000000000001453A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000014541                 mov     edx, 5          ; category
.text:0000000000014546                 xor     edi, edi        ; domainname
.text:0000000000014548                 call    _dcgettext
.text:000000000001454D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000014554                 lea     rdx, unk_179D6
.text:000000000001455B                 mov     rsi, rax
.text:000000000001455E                 mov     edi, 1
.text:0000000000014563                 xor     eax, eax
.text:0000000000014565                 call    ___printf_chk
.text:000000000001456A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000014571                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000014578                 xor     edi, edi        ; domainname
.text:000000000001457A                 mov     edx, 5          ; category
.text:000000000001457F                 call    _dcgettext
.text:0000000000014584                 mov     rsi, rbx        ; stream
.text:0000000000014587                 mov     rdi, rax        ; s
.text:000000000001458A                 pop     rbx
.text:000000000001458B                 jmp     _fputs_unlocked
.text:000000000001458B ; } // starts at 14510
.text:000000000001458B emit_bug_reporting_address endp
.text:000000000001458B
.text:0000000000014590
.text:0000000000014590 ; =============== S U B R O U T I N E =======================================
.text:0000000000014590
.text:0000000000014590
.text:0000000000014590                 public xmalloc
.text:0000000000014590 xmalloc         proc near               ; CODE XREF: main+469↑p
.text:0000000000014590                                         ; main+4D7↑p ...
.text:0000000000014590 ; __unwind {
.text:0000000000014590                 push    rbx
.text:0000000000014591                 mov     rbx, rdi
.text:0000000000014594                 call    malloc
.text:0000000000014599                 test    rax, rax
.text:000000000001459C                 jnz     short loc_145A3
.text:000000000001459E                 test    rbx, rbx
.text:00000000000145A1                 jnz     short loc_145A5
.text:00000000000145A3
.text:00000000000145A3 loc_145A3:                              ; CODE XREF: xmalloc+C↑j
.text:00000000000145A3                 pop     rbx
.text:00000000000145A4                 retn
.text:00000000000145A5 ; ---------------------------------------------------------------------------
.text:00000000000145A5
.text:00000000000145A5 loc_145A5:                              ; CODE XREF: xmalloc+11↑j
.text:00000000000145A5                 call    xalloc_die
.text:00000000000145A5 ; } // starts at 14590
.text:00000000000145A5 xmalloc         endp
.text:00000000000145A5
.text:00000000000145A5 ; ---------------------------------------------------------------------------
.text:00000000000145AA                 align 10h
.text:00000000000145B0
.text:00000000000145B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000145B0
.text:00000000000145B0 ; Attributes: info_from_lumina
.text:00000000000145B0
.text:00000000000145B0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000145B0                 public xnmalloc
.text:00000000000145B0 xnmalloc        proc near
.text:00000000000145B0 ; __unwind {
.text:00000000000145B0                 mov     rax, rdi
.text:00000000000145B3                 mul     rsi
.text:00000000000145B6                 mov     rdi, rax
.text:00000000000145B9                 seto    al
.text:00000000000145BC                 test    rdi, rdi
.text:00000000000145BF                 js      short loc_145CB
.text:00000000000145C1                 movzx   eax, al
.text:00000000000145C4                 test    rax, rax
.text:00000000000145C7                 jnz     short loc_145CB
.text:00000000000145C9                 jmp     short xmalloc
.text:00000000000145CB ; ---------------------------------------------------------------------------
.text:00000000000145CB
.text:00000000000145CB loc_145CB:                              ; CODE XREF: xnmalloc+F↑j
.text:00000000000145CB                                         ; xnmalloc+17↑j
.text:00000000000145CB                 sub     rsp, 8
.text:00000000000145CF                 call    xalloc_die
.text:00000000000145CF ; } // starts at 145B0
.text:00000000000145CF xnmalloc        endp
.text:00000000000145CF
.text:00000000000145CF ; ---------------------------------------------------------------------------
.text:00000000000145D4                 align 20h
.text:00000000000145E0
.text:00000000000145E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000145E0
.text:00000000000145E0
.text:00000000000145E0                 public xcharalloc
.text:00000000000145E0 xcharalloc      proc near
.text:00000000000145E0 ; __unwind {
.text:00000000000145E0                 jmp     short xmalloc
.text:00000000000145E0 ; } // starts at 145E0
.text:00000000000145E0 xcharalloc      endp
.text:00000000000145E0
.text:00000000000145E0 ; ---------------------------------------------------------------------------
.text:00000000000145E2                 align 10h
.text:00000000000145F0
.text:00000000000145F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000145F0
.text:00000000000145F0 ; Attributes: info_from_lumina
.text:00000000000145F0
.text:00000000000145F0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000145F0                 public xrealloc
.text:00000000000145F0 xrealloc        proc near               ; CODE XREF: calculate_columns+73↑p
.text:00000000000145F0                                         ; calculate_columns+2D6↑p ...
.text:00000000000145F0 ; __unwind {
.text:00000000000145F0                 test    rsi, rsi
.text:00000000000145F3                 push    rbx
.text:00000000000145F4                 mov     rbx, rsi
.text:00000000000145F7                 jnz     short loc_145FE
.text:00000000000145F9                 test    rdi, rdi
.text:00000000000145FC                 jnz     short loc_14618
.text:00000000000145FE
.text:00000000000145FE loc_145FE:                              ; CODE XREF: xrealloc+7↑j
.text:00000000000145FE                 mov     rsi, rbx        ; size
.text:0000000000014601                 call    _realloc
.text:0000000000014606                 test    rax, rax
.text:0000000000014609                 jnz     short loc_14610
.text:000000000001460B                 test    rbx, rbx
.text:000000000001460E                 jnz     short loc_14621
.text:0000000000014610
.text:0000000000014610 loc_14610:                              ; CODE XREF: xrealloc+19↑j
.text:0000000000014610                 pop     rbx
.text:0000000000014611                 retn
.text:0000000000014611 ; ---------------------------------------------------------------------------
.text:0000000000014612                 align 8
.text:0000000000014618
.text:0000000000014618 loc_14618:                              ; CODE XREF: xrealloc+C↑j
.text:0000000000014618                 call    free
.text:000000000001461D                 xor     eax, eax
.text:000000000001461F                 pop     rbx
.text:0000000000014620                 retn
.text:0000000000014621 ; ---------------------------------------------------------------------------
.text:0000000000014621
.text:0000000000014621 loc_14621:                              ; CODE XREF: xrealloc+1E↑j
.text:0000000000014621                 call    xalloc_die
.text:0000000000014621 ; } // starts at 145F0
.text:0000000000014621 xrealloc        endp
.text:0000000000014621
.text:0000000000014621 ; ---------------------------------------------------------------------------
.text:0000000000014626                 align 10h
.text:0000000000014630
.text:0000000000014630 ; =============== S U B R O U T I N E =======================================
.text:0000000000014630
.text:0000000000014630 ; Attributes: info_from_lumina
.text:0000000000014630
.text:0000000000014630 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000014630                 public xnrealloc
.text:0000000000014630 xnrealloc       proc near
.text:0000000000014630 ; __unwind {
.text:0000000000014630                 mov     rax, rsi
.text:0000000000014633                 mul     rdx
.text:0000000000014636                 mov     rsi, rax
.text:0000000000014639                 seto    al
.text:000000000001463C                 test    rsi, rsi
.text:000000000001463F                 js      short loc_1464B
.text:0000000000014641                 movzx   eax, al
.text:0000000000014644                 test    rax, rax
.text:0000000000014647                 jnz     short loc_1464B
.text:0000000000014649                 jmp     short xrealloc
.text:000000000001464B ; ---------------------------------------------------------------------------
.text:000000000001464B
.text:000000000001464B loc_1464B:                              ; CODE XREF: xnrealloc+F↑j
.text:000000000001464B                                         ; xnrealloc+17↑j
.text:000000000001464B                 sub     rsp, 8
.text:000000000001464F                 call    xalloc_die
.text:000000000001464F ; } // starts at 14630
.text:000000000001464F xnrealloc       endp
.text:000000000001464F
.text:000000000001464F ; ---------------------------------------------------------------------------
.text:0000000000014654                 align 20h
.text:0000000000014660
.text:0000000000014660 ; =============== S U B R O U T I N E =======================================
.text:0000000000014660
.text:0000000000014660 ; Attributes: info_from_lumina
.text:0000000000014660
.text:0000000000014660 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000014660                 public x2nrealloc
.text:0000000000014660 x2nrealloc      proc near
.text:0000000000014660 ; __unwind {
.text:0000000000014660                 test    rdi, rdi
.text:0000000000014663                 mov     r9, rdx
.text:0000000000014666                 mov     rcx, [rsi]
.text:0000000000014669                 jz      short loc_146A0
.text:000000000001466B                 xor     edx, edx
.text:000000000001466D                 mov     rax, 5555555555555554h
.text:0000000000014677                 div     r9
.text:000000000001467A                 cmp     rax, rcx
.text:000000000001467D                 jbe     short loc_146BB
.text:000000000001467F                 mov     rax, rcx
.text:0000000000014682                 shr     rax, 1
.text:0000000000014685                 lea     rcx, [rax+rcx+1]
.text:000000000001468A
.text:000000000001468A loc_1468A:                              ; CODE XREF: x2nrealloc+59↓j
.text:000000000001468A                 mov     [rsi], rcx
.text:000000000001468D                 imul    rcx, r9
.text:0000000000014691                 mov     rsi, rcx
.text:0000000000014694                 jmp     xrealloc
.text:0000000000014694 ; ---------------------------------------------------------------------------
.text:0000000000014699                 align 20h
.text:00000000000146A0
.text:00000000000146A0 loc_146A0:                              ; CODE XREF: x2nrealloc+9↑j
.text:00000000000146A0                 test    rcx, rcx
.text:00000000000146A3                 jz      short loc_146C8
.text:00000000000146A5
.text:00000000000146A5 loc_146A5:                              ; CODE XREF: x2nrealloc+80↓j
.text:00000000000146A5                 mov     rax, rcx
.text:00000000000146A8                 mul     r9
.text:00000000000146AB                 seto    dl
.text:00000000000146AE                 test    rax, rax
.text:00000000000146B1                 movzx   edx, dl
.text:00000000000146B4                 js      short loc_146BB
.text:00000000000146B6                 test    rdx, rdx
.text:00000000000146B9                 jz      short loc_1468A
.text:00000000000146BB
.text:00000000000146BB loc_146BB:                              ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000146BB                                         ; x2nrealloc+54↑j
.text:00000000000146BB                 sub     rsp, 8
.text:00000000000146BF                 call    xalloc_die
.text:00000000000146BF ; ---------------------------------------------------------------------------
.text:00000000000146C4                 align 8
.text:00000000000146C8
.text:00000000000146C8 loc_146C8:                              ; CODE XREF: x2nrealloc+43↑j
.text:00000000000146C8                 xor     edx, edx
.text:00000000000146CA                 mov     eax, 80h
.text:00000000000146CF                 xor     r8d, r8d
.text:00000000000146D2                 div     r9
.text:00000000000146D5                 test    rax, rax
.text:00000000000146D8                 setz    r8b
.text:00000000000146DC                 lea     rcx, [r8+rax]
.text:00000000000146E0                 jmp     short loc_146A5
.text:00000000000146E0 ; } // starts at 14660
.text:00000000000146E0 x2nrealloc      endp
.text:00000000000146E0
.text:00000000000146E0 ; ---------------------------------------------------------------------------
.text:00000000000146E2                 align 10h
.text:00000000000146F0
.text:00000000000146F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000146F0
.text:00000000000146F0 ; Attributes: info_from_lumina
.text:00000000000146F0
.text:00000000000146F0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000146F0                 public x2realloc
.text:00000000000146F0 x2realloc       proc near               ; CODE XREF: xgethostname+46↓p
.text:00000000000146F0 ; __unwind {
.text:00000000000146F0                 test    rdi, rdi
.text:00000000000146F3                 mov     rax, [rsi]
.text:00000000000146F6                 jz      short loc_14720
.text:00000000000146F8                 mov     rdx, 5555555555555553h
.text:0000000000014702                 cmp     rax, rdx
.text:0000000000014705                 ja      short loc_14731
.text:0000000000014707                 mov     rdx, rax
.text:000000000001470A                 shr     rdx, 1
.text:000000000001470D                 lea     rax, [rdx+rax+1]
.text:0000000000014712
.text:0000000000014712 loc_14712:                              ; CODE XREF: x2realloc+3F↓j
.text:0000000000014712                 mov     [rsi], rax
.text:0000000000014715                 mov     rsi, rax
.text:0000000000014718                 jmp     xrealloc
.text:0000000000014718 ; ---------------------------------------------------------------------------
.text:000000000001471D                 align 20h
.text:0000000000014720
.text:0000000000014720 loc_14720:                              ; CODE XREF: x2realloc+6↑j
.text:0000000000014720                 test    rax, rax
.text:0000000000014723                 mov     edx, 80h
.text:0000000000014728                 cmovz   rax, rdx
.text:000000000001472C                 test    rax, rax
.text:000000000001472F                 jns     short loc_14712
.text:0000000000014731
.text:0000000000014731 loc_14731:                              ; CODE XREF: x2realloc+15↑j
.text:0000000000014731                 sub     rsp, 8
.text:0000000000014735                 call    xalloc_die
.text:0000000000014735 ; } // starts at 146F0
.text:0000000000014735 x2realloc       endp
.text:0000000000014735
.text:0000000000014735 ; ---------------------------------------------------------------------------
.text:000000000001473A                 align 20h
.text:0000000000014740
.text:0000000000014740 ; =============== S U B R O U T I N E =======================================
.text:0000000000014740
.text:0000000000014740
.text:0000000000014740 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000014740                 public xzalloc
.text:0000000000014740 xzalloc         proc near
.text:0000000000014740 ; __unwind {
.text:0000000000014740                 push    rbx
.text:0000000000014741                 mov     rbx, rdi
.text:0000000000014744                 call    xmalloc
.text:0000000000014749                 mov     rdx, rbx        ; n
.text:000000000001474C                 xor     esi, esi        ; c
.text:000000000001474E                 mov     rdi, rax        ; s
.text:0000000000014751                 pop     rbx
.text:0000000000014752                 jmp     _memset
.text:0000000000014752 ; } // starts at 14740
.text:0000000000014752 xzalloc         endp
.text:0000000000014752
.text:0000000000014752 ; ---------------------------------------------------------------------------
.text:0000000000014757                 align 20h
.text:0000000000014760
.text:0000000000014760 ; =============== S U B R O U T I N E =======================================
.text:0000000000014760
.text:0000000000014760 ; Attributes: info_from_lumina
.text:0000000000014760
.text:0000000000014760 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000014760                 public xcalloc
.text:0000000000014760 xcalloc         proc near
.text:0000000000014760 ; __unwind {
.text:0000000000014760                 mov     rax, rdi
.text:0000000000014763                 sub     rsp, 8
.text:0000000000014767                 mul     rsi
.text:000000000001476A                 seto    dl
.text:000000000001476D                 test    rax, rax
.text:0000000000014770                 js      short loc_14789
.text:0000000000014772                 movzx   edx, dl
.text:0000000000014775                 test    rdx, rdx
.text:0000000000014778                 jnz     short loc_14789
.text:000000000001477A                 call    _calloc
.text:000000000001477F                 test    rax, rax
.text:0000000000014782                 jz      short loc_14789
.text:0000000000014784                 add     rsp, 8
.text:0000000000014788                 retn
.text:0000000000014789 ; ---------------------------------------------------------------------------
.text:0000000000014789
.text:0000000000014789 loc_14789:                              ; CODE XREF: xcalloc+10↑j
.text:0000000000014789                                         ; xcalloc+18↑j ...
.text:0000000000014789                 call    xalloc_die
.text:0000000000014789 ; } // starts at 14760
.text:0000000000014789 xcalloc         endp
.text:0000000000014789
.text:0000000000014789 ; ---------------------------------------------------------------------------
.text:000000000001478E                 align 10h
.text:0000000000014790
.text:0000000000014790 ; =============== S U B R O U T I N E =======================================
.text:0000000000014790
.text:0000000000014790 ; Attributes: info_from_lumina
.text:0000000000014790
.text:0000000000014790 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000014790                 public xmemdup
.text:0000000000014790 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000014790                                         ; xstrdup+11↓j
.text:0000000000014790 ; __unwind {
.text:0000000000014790                 push    rbp
.text:0000000000014791                 push    rbx
.text:0000000000014792                 mov     rbp, rdi
.text:0000000000014795                 mov     rdi, rsi
.text:0000000000014798                 mov     rbx, rsi
.text:000000000001479B                 sub     rsp, 8
.text:000000000001479F                 call    xmalloc
.text:00000000000147A4                 add     rsp, 8
.text:00000000000147A8                 mov     rdx, rbx        ; n
.text:00000000000147AB                 mov     rsi, rbp        ; src
.text:00000000000147AE                 pop     rbx
.text:00000000000147AF                 pop     rbp
.text:00000000000147B0                 mov     rdi, rax        ; dest
.text:00000000000147B3                 jmp     _memcpy
.text:00000000000147B3 ; } // starts at 14790
.text:00000000000147B3 xmemdup         endp
.text:00000000000147B3
.text:00000000000147B3 ; ---------------------------------------------------------------------------
.text:00000000000147B8                 align 20h
.text:00000000000147C0
.text:00000000000147C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000147C0
.text:00000000000147C0
.text:00000000000147C0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000147C0                 public xstrdup
.text:00000000000147C0 xstrdup         proc near               ; CODE XREF: main+156E↑p
.text:00000000000147C0                                         ; queue_directory+2A↑p ...
.text:00000000000147C0 ; __unwind {
.text:00000000000147C0                 push    rbx
.text:00000000000147C1                 mov     rbx, rdi
.text:00000000000147C4                 call    _strlen
.text:00000000000147C9                 mov     rdi, rbx        ; src
.text:00000000000147CC                 lea     rsi, [rax+1]    ; n
.text:00000000000147D0                 pop     rbx
.text:00000000000147D1                 jmp     short xmemdup
.text:00000000000147D1 ; } // starts at 147C0
.text:00000000000147D1 xstrdup         endp
.text:00000000000147D1
.text:00000000000147D1 ; ---------------------------------------------------------------------------
.text:00000000000147D3                 align 20h
.text:00000000000147E0
.text:00000000000147E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000147E0
.text:00000000000147E0 ; Attributes: noreturn info_from_lumina
.text:00000000000147E0
.text:00000000000147E0 ; void __cdecl xalloc_die()
.text:00000000000147E0                 public xalloc_die
.text:00000000000147E0 xalloc_die      proc near               ; CODE XREF: main:loc_5264↑p
.text:00000000000147E0                                         ; file_escape:loc_5C2C↑p ...
.text:00000000000147E0 ; __unwind {
.text:00000000000147E0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000147E7                 sub     rsp, 8
.text:00000000000147EB                 mov     edx, 5          ; category
.text:00000000000147F0                 xor     edi, edi        ; domainname
.text:00000000000147F2                 call    _dcgettext
.text:00000000000147F7                 mov     edi, cs:exit_failure ; status
.text:00000000000147FD                 lea     rdx, aS_1+2     ; format
.text:0000000000014804                 mov     rcx, rax
.text:0000000000014807                 xor     esi, esi        ; errnum
.text:0000000000014809                 xor     eax, eax
.text:000000000001480B                 call    _error
.text:0000000000014810                 call    _abort
.text:0000000000014810 ; } // starts at 147E0
.text:0000000000014810 xalloc_die      endp
.text:0000000000014810
.text:0000000000014810 ; ---------------------------------------------------------------------------
.text:0000000000014815                 align 20h
.text:0000000000014820
.text:0000000000014820 ; =============== S U B R O U T I N E =======================================
.text:0000000000014820
.text:0000000000014820 ; Attributes: info_from_lumina
.text:0000000000014820
.text:0000000000014820 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000014820                 public xnumtoumax
.text:0000000000014820 xnumtoumax      proc near               ; CODE XREF: main+3F7↑p
.text:0000000000014820                                         ; xdectoumax+17↓p
.text:0000000000014820
.text:0000000000014820 var_48          = qword ptr -48h
.text:0000000000014820 var_40          = qword ptr -40h
.text:0000000000014820 arg_0           = dword ptr  8
.text:0000000000014820
.text:0000000000014820 ; __unwind {
.text:0000000000014820                 push    r15
.text:0000000000014822                 push    r14
.text:0000000000014824                 mov     r15, rcx
.text:0000000000014827                 push    r13
.text:0000000000014829                 push    r12
.text:000000000001482B                 mov     r14, rdx
.text:000000000001482E                 push    rbp
.text:000000000001482F                 push    rbx
.text:0000000000014830                 mov     edx, esi
.text:0000000000014832                 xor     esi, esi
.text:0000000000014834                 mov     r12, rdi
.text:0000000000014837                 mov     r13, r9
.text:000000000001483A                 sub     rsp, 18h
.text:000000000001483E                 mov     rcx, rsp
.text:0000000000014841                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000014845                 mov     rax, fs:28h
.text:000000000001484E                 mov     [rsp+48h+var_40], rax
.text:0000000000014853                 xor     eax, eax
.text:0000000000014855                 call    xstrtoumax
.text:000000000001485A                 test    eax, eax
.text:000000000001485C                 jnz     loc_148F0
.text:0000000000014862                 mov     rbp, [rsp+48h+var_48]
.text:0000000000014866                 cmp     rbp, r14
.text:0000000000014869                 jb      short loc_14870
.text:000000000001486B                 cmp     rbp, r15
.text:000000000001486E                 jbe     short loc_148C4
.text:0000000000014870
.text:0000000000014870 loc_14870:                              ; CODE XREF: xnumtoumax+49↑j
.text:0000000000014870                 call    ___errno_location
.text:0000000000014875                 cmp     rbp, 40000000h
.text:000000000001487C                 mov     r14, rax
.text:000000000001487F                 sbb     eax, eax
.text:0000000000014881                 and     eax, 0FFFFFFD7h
.text:0000000000014884                 add     eax, 4Bh ; 'K'
.text:0000000000014887                 mov     [r14], eax
.text:000000000001488A
.text:000000000001488A loc_1488A:                              ; CODE XREF: xnumtoumax+E2↓j
.text:000000000001488A                                         ; xnumtoumax+EA↓j ...
.text:000000000001488A                 mov     rdi, r12
.text:000000000001488D                 call    quote
.text:0000000000014892                 mov     esi, [r14]
.text:0000000000014895                 mov     r8, rax
.text:0000000000014898                 mov     eax, 0
.text:000000000001489D                 lea     rdx, aSS        ; "%s: %s"
.text:00000000000148A4                 mov     rcx, r13
.text:00000000000148A7                 cmp     esi, 16h
.text:00000000000148AA                 cmovz   esi, eax        ; errnum
.text:00000000000148AD                 test    ebx, ebx
.text:00000000000148AF                 mov     eax, 1
.text:00000000000148B4                 cmovz   ebx, eax
.text:00000000000148B7                 xor     eax, eax
.text:00000000000148B9                 mov     edi, ebx        ; status
.text:00000000000148BB                 call    _error
.text:00000000000148C0                 mov     rbp, [rsp+48h+var_48]
.text:00000000000148C4
.text:00000000000148C4 loc_148C4:                              ; CODE XREF: xnumtoumax+4E↑j
.text:00000000000148C4                 mov     rdx, [rsp+48h+var_40]
.text:00000000000148C9                 xor     rdx, fs:28h
.text:00000000000148D2                 mov     rax, rbp
.text:00000000000148D5                 jnz     short loc_1491B
.text:00000000000148D7                 add     rsp, 18h
.text:00000000000148DB                 pop     rbx
.text:00000000000148DC                 pop     rbp
.text:00000000000148DD                 pop     r12
.text:00000000000148DF                 pop     r13
.text:00000000000148E1                 pop     r14
.text:00000000000148E3                 pop     r15
.text:00000000000148E5                 retn
.text:00000000000148E5 ; ---------------------------------------------------------------------------
.text:00000000000148E6                 align 10h
.text:00000000000148F0
.text:00000000000148F0 loc_148F0:                              ; CODE XREF: xnumtoumax+3C↑j
.text:00000000000148F0                 mov     ebp, eax
.text:00000000000148F2                 call    ___errno_location
.text:00000000000148F7                 cmp     ebp, 1
.text:00000000000148FA                 mov     r14, rax
.text:00000000000148FD                 jz      short loc_14910
.text:00000000000148FF                 cmp     ebp, 3
.text:0000000000014902                 jnz     short loc_1488A
.text:0000000000014904                 mov     dword ptr [rax], 0
.text:000000000001490A                 jmp     loc_1488A
.text:000000000001490A ; ---------------------------------------------------------------------------
.text:000000000001490F                 align 10h
.text:0000000000014910
.text:0000000000014910 loc_14910:                              ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000014910                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000014916                 jmp     loc_1488A
.text:000000000001491B ; ---------------------------------------------------------------------------
.text:000000000001491B
.text:000000000001491B loc_1491B:                              ; CODE XREF: xnumtoumax+B5↑j
.text:000000000001491B                 call    ___stack_chk_fail
.text:000000000001491B ; } // starts at 14820
.text:000000000001491B xnumtoumax      endp
.text:000000000001491B
.text:0000000000014920
.text:0000000000014920 ; =============== S U B R O U T I N E =======================================
.text:0000000000014920
.text:0000000000014920 ; Attributes: info_from_lumina
.text:0000000000014920
.text:0000000000014920 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000014920                 public xdectoumax
.text:0000000000014920 xdectoumax      proc near
.text:0000000000014920 ; __unwind {
.text:0000000000014920                 sub     rsp, 10h
.text:0000000000014924                 push    r9
.text:0000000000014926                 mov     r9, r8
.text:0000000000014929                 mov     r8, rcx
.text:000000000001492C                 mov     rcx, rdx
.text:000000000001492F                 mov     rdx, rsi
.text:0000000000014932                 mov     esi, 0Ah
.text:0000000000014937                 call    xnumtoumax
.text:000000000001493C                 add     rsp, 18h
.text:0000000000014940                 retn
.text:0000000000014940 ; } // starts at 14920
.text:0000000000014940 xdectoumax      endp
.text:0000000000014940
.text:0000000000014940 ; ---------------------------------------------------------------------------
.text:0000000000014941                 align 10h
.text:0000000000014950
.text:0000000000014950 ; =============== S U B R O U T I N E =======================================
.text:0000000000014950
.text:0000000000014950 ; Attributes: info_from_lumina
.text:0000000000014950
.text:0000000000014950 ; char *__cdecl xgetcwd()
.text:0000000000014950                 public xgetcwd
.text:0000000000014950 xgetcwd         proc near               ; CODE XREF: canonicalize_filename_mode+63↑p
.text:0000000000014950 ; __unwind {
.text:0000000000014950                 push    rbx
.text:0000000000014951                 xor     esi, esi        ; size
.text:0000000000014953                 xor     edi, edi        ; buf
.text:0000000000014955                 call    _getcwd
.text:000000000001495A                 test    rax, rax
.text:000000000001495D                 mov     rbx, rax
.text:0000000000014960                 jz      short loc_14970
.text:0000000000014962
.text:0000000000014962 loc_14962:                              ; CODE XREF: xgetcwd+28↓j
.text:0000000000014962                 mov     rax, rbx
.text:0000000000014965                 pop     rbx
.text:0000000000014966                 retn
.text:0000000000014966 ; ---------------------------------------------------------------------------
.text:0000000000014967                 align 10h
.text:0000000000014970
.text:0000000000014970 loc_14970:                              ; CODE XREF: xgetcwd+10↑j
.text:0000000000014970                 call    ___errno_location
.text:0000000000014975                 cmp     dword ptr [rax], 0Ch
.text:0000000000014978                 jnz     short loc_14962
.text:000000000001497A                 call    xalloc_die
.text:000000000001497A ; } // starts at 14950
.text:000000000001497A xgetcwd         endp
.text:000000000001497A
.text:000000000001497A ; ---------------------------------------------------------------------------
.text:000000000001497F                 align 20h
.text:0000000000014980
.text:0000000000014980 ; =============== S U B R O U T I N E =======================================
.text:0000000000014980
.text:0000000000014980 ; Attributes: info_from_lumina
.text:0000000000014980
.text:0000000000014980 ; char *__cdecl xgethostname()
.text:0000000000014980                 public xgethostname
.text:0000000000014980 xgethostname    proc near               ; CODE XREF: main:loc_49BA↑p
.text:0000000000014980
.text:0000000000014980 var_38          = qword ptr -38h
.text:0000000000014980 var_30          = qword ptr -30h
.text:0000000000014980
.text:0000000000014980 ; __unwind {
.text:0000000000014980                 push    r14
.text:0000000000014982                 push    r13
.text:0000000000014984                 mov     r13, 1000401001h
.text:000000000001498E                 push    r12
.text:0000000000014990                 push    rbp
.text:0000000000014991                 push    rbx
.text:0000000000014992                 xor     ebx, ebx
.text:0000000000014994                 sub     rsp, 10h
.text:0000000000014998                 mov     rax, fs:28h
.text:00000000000149A1                 mov     [rsp+38h+var_30], rax
.text:00000000000149A6                 xor     eax, eax
.text:00000000000149A8                 mov     [rsp+38h+var_38], 22h ; '"'
.text:00000000000149B0                 mov     r12, rsp
.text:00000000000149B3                 call    ___errno_location
.text:00000000000149B8                 mov     rbp, rax
.text:00000000000149BB                 nop     dword ptr [rax+rax+00h]
.text:00000000000149C0
.text:00000000000149C0 loc_149C0:                              ; CODE XREF: xgethostname+76↓j
.text:00000000000149C0                                         ; xgethostname+C4↓j
.text:00000000000149C0                 mov     rdi, rbx
.text:00000000000149C3                 mov     rsi, r12
.text:00000000000149C6                 call    x2realloc
.text:00000000000149CB                 mov     rsi, [rsp+38h+var_38]
.text:00000000000149CF                 mov     rdi, rax        ; name
.text:00000000000149D2                 mov     rbx, rax
.text:00000000000149D5                 lea     r14, [rax+rsi-2]
.text:00000000000149DA                 sub     rsi, 1          ; len
.text:00000000000149DE                 mov     byte ptr [r14], 0
.text:00000000000149E2                 mov     dword ptr [rbp+0], 0
.text:00000000000149E9                 call    _gethostname
.text:00000000000149EE                 test    eax, eax
.text:00000000000149F0                 jnz     short loc_14A20
.text:00000000000149F2                 cmp     byte ptr [r14], 0
.text:00000000000149F6                 jnz     short loc_149C0
.text:00000000000149F8
.text:00000000000149F8 loc_149F8:                              ; CODE XREF: xgethostname+B8↓j
.text:00000000000149F8                 mov     rdx, [rsp+38h+var_30]
.text:00000000000149FD                 xor     rdx, fs:28h
.text:0000000000014A06                 mov     rax, rbx
.text:0000000000014A09                 jnz     short loc_14A4C
.text:0000000000014A0B                 add     rsp, 10h
.text:0000000000014A0F                 pop     rbx
.text:0000000000014A10                 pop     rbp
.text:0000000000014A11                 pop     r12
.text:0000000000014A13                 pop     r13
.text:0000000000014A15                 pop     r14
.text:0000000000014A17                 retn
.text:0000000000014A17 ; ---------------------------------------------------------------------------
.text:0000000000014A18                 align 20h
.text:0000000000014A20
.text:0000000000014A20 loc_14A20:                              ; CODE XREF: xgethostname+70↑j
.text:0000000000014A20                 mov     r14d, [rbp+0]
.text:0000000000014A24                 cmp     r14d, 24h ; '$'
.text:0000000000014A28                 jbe     short loc_14A40
.text:0000000000014A2A
.text:0000000000014A2A loc_14A2A:                              ; CODE XREF: xgethostname+CA↓j
.text:0000000000014A2A                 mov     rdi, rbx        ; ptr
.text:0000000000014A2D                 xor     ebx, ebx
.text:0000000000014A2F                 call    free
.text:0000000000014A34                 mov     [rbp+0], r14d
.text:0000000000014A38                 jmp     short loc_149F8
.text:0000000000014A38 ; ---------------------------------------------------------------------------
.text:0000000000014A3A                 align 20h
.text:0000000000014A40
.text:0000000000014A40 loc_14A40:                              ; CODE XREF: xgethostname+A8↑j
.text:0000000000014A40                 bt      r13, r14
.text:0000000000014A44                 jb      loc_149C0
.text:0000000000014A4A                 jmp     short loc_14A2A
.text:0000000000014A4C ; ---------------------------------------------------------------------------
.text:0000000000014A4C
.text:0000000000014A4C loc_14A4C:                              ; CODE XREF: xgethostname+89↑j
.text:0000000000014A4C                 call    ___stack_chk_fail
.text:0000000000014A4C ; } // starts at 14980
.text:0000000000014A4C xgethostname    endp
.text:0000000000014A4C
.text:0000000000014A4C ; ---------------------------------------------------------------------------
.text:0000000000014A51                 align 20h
.text:0000000000014A60
.text:0000000000014A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000014A60
.text:0000000000014A60
.text:0000000000014A60 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000014A60                 public xstrtoul
.text:0000000000014A60 xstrtoul        proc near               ; CODE XREF: main+22E↑p
.text:0000000000014A60
.text:0000000000014A60 base            = dword ptr -50h
.text:0000000000014A60 endptr          = qword ptr -48h
.text:0000000000014A60 var_40          = qword ptr -40h
.text:0000000000014A60
.text:0000000000014A60 ; __unwind {
.text:0000000000014A60                 push    r15
.text:0000000000014A62                 push    r14
.text:0000000000014A64                 push    r13
.text:0000000000014A66                 push    r12
.text:0000000000014A68                 push    rbp
.text:0000000000014A69                 push    rbx
.text:0000000000014A6A                 sub     rsp, 28h
.text:0000000000014A6E                 mov     rax, fs:28h
.text:0000000000014A77                 mov     [rsp+58h+var_40], rax
.text:0000000000014A7C                 xor     eax, eax
.text:0000000000014A7E                 cmp     edx, 24h ; '$'
.text:0000000000014A81                 ja      loc_14DE5
.text:0000000000014A87                 lea     rax, [rsp+58h+endptr]
.text:0000000000014A8C                 mov     r15, rsi
.text:0000000000014A8F                 test    rsi, rsi
.text:0000000000014A92                 mov     rbp, rdi
.text:0000000000014A95                 mov     [rsp+58h+base], edx
.text:0000000000014A99                 mov     r14, rcx
.text:0000000000014A9C                 mov     r13, r8
.text:0000000000014A9F                 cmovz   r15, rax
.text:0000000000014AA3                 call    ___errno_location
.text:0000000000014AA8                 mov     dword ptr [rax], 0
.text:0000000000014AAE                 mov     r12, rax
.text:0000000000014AB1                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000014AB5                 call    ___ctype_b_loc
.text:0000000000014ABA                 mov     edx, [rsp+58h+base] ; base
.text:0000000000014ABE                 mov     rsi, [rax]
.text:0000000000014AC1                 mov     rax, rbp
.text:0000000000014AC4                 jmp     short loc_14AD7
.text:0000000000014AC4 ; ---------------------------------------------------------------------------
.text:0000000000014AC6                 align 10h
.text:0000000000014AD0
.text:0000000000014AD0 loc_14AD0:                              ; CODE XREF: xstrtoul+7F↓j
.text:0000000000014AD0                 add     rax, 1
.text:0000000000014AD4                 movzx   ebx, byte ptr [rax]
.text:0000000000014AD7
.text:0000000000014AD7 loc_14AD7:                              ; CODE XREF: xstrtoul+64↑j
.text:0000000000014AD7                 movzx   ecx, bl
.text:0000000000014ADA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000014ADF                 jnz     short loc_14AD0
.text:0000000000014AE1                 cmp     bl, 2Dh ; '-'
.text:0000000000014AE4                 jz      short loc_14B38
.text:0000000000014AE6                 mov     rsi, r15        ; endptr
.text:0000000000014AE9                 mov     rdi, rbp        ; nptr
.text:0000000000014AEC                 call    _strtoul
.text:0000000000014AF1                 mov     rcx, [r15]
.text:0000000000014AF4                 mov     rbx, rax
.text:0000000000014AF7                 cmp     rcx, rbp
.text:0000000000014AFA                 jz      short loc_14B28
.text:0000000000014AFC                 mov     eax, [r12]
.text:0000000000014B00                 test    eax, eax
.text:0000000000014B02                 jz      short loc_14B68
.text:0000000000014B04                 cmp     eax, 22h ; '"'
.text:0000000000014B07                 mov     ebp, 1
.text:0000000000014B0C                 jnz     short loc_14B38
.text:0000000000014B0E
.text:0000000000014B0E loc_14B0E:                              ; CODE XREF: xstrtoul+10A↓j
.text:0000000000014B0E                 test    r13, r13
.text:0000000000014B11                 jz      short loc_14B1C
.text:0000000000014B13                 movzx   r12d, byte ptr [rcx]
.text:0000000000014B17                 test    r12b, r12b
.text:0000000000014B1A                 jnz     short loc_14B97
.text:0000000000014B1C
.text:0000000000014B1C loc_14B1C:                              ; CODE XREF: xstrtoul+B1↑j
.text:0000000000014B1C                 mov     [r14], rbx
.text:0000000000014B1F                 jmp     short loc_14B3D
.text:0000000000014B1F ; ---------------------------------------------------------------------------
.text:0000000000014B21                 align 8
.text:0000000000014B28
.text:0000000000014B28 loc_14B28:                              ; CODE XREF: xstrtoul+9A↑j
.text:0000000000014B28                 test    r13, r13
.text:0000000000014B2B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000014B30                 jnz     short loc_14B70
.text:0000000000014B32                 nop     word ptr [rax+rax+00h]
.text:0000000000014B38
.text:0000000000014B38 loc_14B38:                              ; CODE XREF: xstrtoul+84↑j
.text:0000000000014B38                                         ; xstrtoul+AC↑j ...
.text:0000000000014B38                 mov     ebp, 4
.text:0000000000014B3D
.text:0000000000014B3D loc_14B3D:                              ; CODE XREF: xstrtoul+BF↑j
.text:0000000000014B3D                                         ; xstrtoul+217↓j ...
.text:0000000000014B3D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000014B42                 xor     rdi, fs:28h
.text:0000000000014B4B                 mov     eax, ebp
.text:0000000000014B4D                 jnz     loc_14DE0
.text:0000000000014B53                 add     rsp, 28h
.text:0000000000014B57                 pop     rbx
.text:0000000000014B58                 pop     rbp
.text:0000000000014B59                 pop     r12
.text:0000000000014B5B                 pop     r13
.text:0000000000014B5D                 pop     r14
.text:0000000000014B5F                 pop     r15
.text:0000000000014B61                 retn
.text:0000000000014B61 ; ---------------------------------------------------------------------------
.text:0000000000014B62                 align 8
.text:0000000000014B68
.text:0000000000014B68 loc_14B68:                              ; CODE XREF: xstrtoul+A2↑j
.text:0000000000014B68                 xor     ebp, ebp
.text:0000000000014B6A                 jmp     short loc_14B0E
.text:0000000000014B6A ; ---------------------------------------------------------------------------
.text:0000000000014B6C                 align 10h
.text:0000000000014B70
.text:0000000000014B70 loc_14B70:                              ; CODE XREF: xstrtoul+D0↑j
.text:0000000000014B70                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000014B75                 test    r12b, r12b
.text:0000000000014B78                 jz      short loc_14B38
.text:0000000000014B7A                 movsx   esi, r12b       ; c
.text:0000000000014B7E                 mov     rdi, r13        ; s
.text:0000000000014B81                 xor     ebp, ebp
.text:0000000000014B83                 call    _strchr
.text:0000000000014B88                 test    rax, rax
.text:0000000000014B8B                 mov     ebx, 1
.text:0000000000014B90                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000014B95                 jz      short loc_14B38
.text:0000000000014B97
.text:0000000000014B97 loc_14B97:                              ; CODE XREF: xstrtoul+BA↑j
.text:0000000000014B97                 movsx   esi, r12b       ; c
.text:0000000000014B9B                 mov     rdi, r13        ; s
.text:0000000000014B9E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000014BA3                 call    _strchr
.text:0000000000014BA8                 test    rax, rax
.text:0000000000014BAB                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000014BB0                 jz      def_14C36       ; jumptable 0000000000014C36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000014BB6                 lea     eax, [r12-45h]
.text:0000000000014BBB                 cmp     al, 2Fh ; '/'
.text:0000000000014BBD                 ja      short loc_14C10
.text:0000000000014BBF                 mov     rdx, 814400308945h
.text:0000000000014BC9                 bt      rdx, rax
.text:0000000000014BCD                 jnb     short loc_14C10
.text:0000000000014BCF                 mov     esi, 30h ; '0'  ; c
.text:0000000000014BD4                 mov     rdi, r13        ; s
.text:0000000000014BD7                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000014BDC                 call    _strchr
.text:0000000000014BE1                 test    rax, rax
.text:0000000000014BE4                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000014BE9                 jz      short loc_14C10
.text:0000000000014BEB                 movzx   eax, byte ptr [rcx+1]
.text:0000000000014BEF                 cmp     al, 44h ; 'D'
.text:0000000000014BF1                 jz      short loc_14BFF
.text:0000000000014BF3                 cmp     al, 69h ; 'i'
.text:0000000000014BF5                 jz      loc_14DC8
.text:0000000000014BFB                 cmp     al, 42h ; 'B'
.text:0000000000014BFD                 jnz     short loc_14C10
.text:0000000000014BFF
.text:0000000000014BFF loc_14BFF:                              ; CODE XREF: xstrtoul+191↑j
.text:0000000000014BFF                 mov     edi, 2
.text:0000000000014C04                 mov     esi, 3E8h
.text:0000000000014C09                 jmp     short loc_14C1A
.text:0000000000014C09 ; ---------------------------------------------------------------------------
.text:0000000000014C0B                 align 10h
.text:0000000000014C10
.text:0000000000014C10 loc_14C10:                              ; CODE XREF: xstrtoul+15D↑j
.text:0000000000014C10                                         ; xstrtoul+16D↑j ...
.text:0000000000014C10                 mov     edi, 1
.text:0000000000014C15                 mov     esi, 400h
.text:0000000000014C1A
.text:0000000000014C1A loc_14C1A:                              ; CODE XREF: xstrtoul+1A9↑j
.text:0000000000014C1A                                         ; xstrtoul+37B↓j
.text:0000000000014C1A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000014C1E                 cmp     r12b, 35h
.text:0000000000014C22                 ja      short def_14C36 ; jumptable 0000000000014C36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000014C24                 lea     rdx, jpt_14C36
.text:0000000000014C2B                 movzx   r12d, r12b
.text:0000000000014C2F                 movsxd  rax, ds:(jpt_14C36 - 1ABA8h)[rdx+r12*4]
.text:0000000000014C33                 add     rax, rdx
.text:0000000000014C36                 jmp     rax             ; switch jump
.text:0000000000014C38 ; ---------------------------------------------------------------------------
.text:0000000000014C38
.text:0000000000014C38 loc_14C38:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014C38                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014C38                 mov     rax, rbx        ; jumptable 0000000000014C36 cases 77,109
.text:0000000000014C3B                 mul     rsi
.text:0000000000014C3E                 jo      loc_14E31
.text:0000000000014C44                 xor     r8d, r8d
.text:0000000000014C47
.text:0000000000014C47 loc_14C47:                              ; CODE XREF: xstrtoul+34E↓j
.text:0000000000014C47                                         ; xstrtoul+35E↓j ...
.text:0000000000014C47                 mul     rsi
.text:0000000000014C4A                 jo      loc_14E22
.text:0000000000014C50                 mov     rbx, rax
.text:0000000000014C53
.text:0000000000014C53 loc_14C53:                              ; CODE XREF: xstrtoul+3CC↓j
.text:0000000000014C53                 or      ebp, r8d
.text:0000000000014C56                 db      2Eh
.text:0000000000014C56                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014C60
.text:0000000000014C60 loc_14C60:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014C60                                         ; xstrtoul+23B↓j ...
.text:0000000000014C60                 movsxd  rdi, edi        ; jumptable 0000000000014C36 case 99
.text:0000000000014C63                 mov     eax, ebp
.text:0000000000014C65                 add     rcx, rdi
.text:0000000000014C68                 or      eax, 2
.text:0000000000014C6B                 mov     [r15], rcx
.text:0000000000014C6E                 cmp     byte ptr [rcx], 0
.text:0000000000014C71                 mov     [r14], rbx
.text:0000000000014C74                 cmovnz  ebp, eax
.text:0000000000014C77                 jmp     loc_14B3D
.text:0000000000014C7C ; ---------------------------------------------------------------------------
.text:0000000000014C7C
.text:0000000000014C7C def_14C36:                              ; CODE XREF: xstrtoul+150↑j
.text:0000000000014C7C                                         ; xstrtoul+1C2↑j ...
.text:0000000000014C7C                 mov     [r14], rbx      ; jumptable 0000000000014C36 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000014C7F                 or      ebp, 2
.text:0000000000014C82                 jmp     loc_14B3D
.text:0000000000014C87 ; ---------------------------------------------------------------------------
.text:0000000000014C87
.text:0000000000014C87 loc_14C87:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014C87                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014C87                 mov     edx, 2          ; jumptable 0000000000014C36 case 119
.text:0000000000014C8C                 mov     rax, rdx
.text:0000000000014C8F                 mul     rbx
.text:0000000000014C92                 jo      loc_14D2E
.text:0000000000014C98                 add     rbx, rbx
.text:0000000000014C9B                 jmp     short loc_14C60 ; jumptable 0000000000014C36 case 99
.text:0000000000014C9D ; ---------------------------------------------------------------------------
.text:0000000000014C9D
.text:0000000000014C9D loc_14C9D:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014C9D                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014C9D                 mov     edx, 200h       ; jumptable 0000000000014C36 case 98
.text:0000000000014CA2                 mov     rax, rdx
.text:0000000000014CA5                 mul     rbx
.text:0000000000014CA8                 jo      loc_14D2E
.text:0000000000014CAE                 shl     rbx, 9
.text:0000000000014CB2                 jmp     short loc_14C60 ; jumptable 0000000000014C36 case 99
.text:0000000000014CB4 ; ---------------------------------------------------------------------------
.text:0000000000014CB4
.text:0000000000014CB4 loc_14CB4:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014CB4                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014CB4                 mov     r8d, 7          ; jumptable 0000000000014C36 case 90
.text:0000000000014CBA                 xor     r9d, r9d
.text:0000000000014CBD                 nop     dword ptr [rax]
.text:0000000000014CC0
.text:0000000000014CC0 loc_14CC0:                              ; CODE XREF: xstrtoul+273↓j
.text:0000000000014CC0                 mov     rax, rbx
.text:0000000000014CC3                 mul     rsi
.text:0000000000014CC6                 mov     rbx, rax
.text:0000000000014CC9                 jo      loc_14E5E
.text:0000000000014CCF
.text:0000000000014CCF loc_14CCF:                              ; CODE XREF: xstrtoul+408↓j
.text:0000000000014CCF                 sub     r8d, 1
.text:0000000000014CD3                 jnz     short loc_14CC0
.text:0000000000014CD5
.text:0000000000014CD5 loc_14CD5:                              ; CODE XREF: xstrtoul+29D↓j
.text:0000000000014CD5                                         ; xstrtoul+2BD↓j ...
.text:0000000000014CD5                 or      ebp, r9d
.text:0000000000014CD8                 jmp     short loc_14C60 ; jumptable 0000000000014C36 case 99
.text:0000000000014CDA ; ---------------------------------------------------------------------------
.text:0000000000014CDA
.text:0000000000014CDA loc_14CDA:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014CDA                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014CDA                 mov     r8d, 8          ; jumptable 0000000000014C36 case 89
.text:0000000000014CE0                 xor     r9d, r9d
.text:0000000000014CE3                 nop     dword ptr [rax+rax+00h]
.text:0000000000014CE8
.text:0000000000014CE8 loc_14CE8:                              ; CODE XREF: xstrtoul+29B↓j
.text:0000000000014CE8                 mov     rax, rbx
.text:0000000000014CEB                 mul     rsi
.text:0000000000014CEE                 mov     rbx, rax
.text:0000000000014CF1                 jo      loc_14E40
.text:0000000000014CF7
.text:0000000000014CF7 loc_14CF7:                              ; CODE XREF: xstrtoul+3EA↓j
.text:0000000000014CF7                 sub     r8d, 1
.text:0000000000014CFB                 jnz     short loc_14CE8
.text:0000000000014CFD                 jmp     short loc_14CD5
.text:0000000000014CFF ; ---------------------------------------------------------------------------
.text:0000000000014CFF
.text:0000000000014CFF loc_14CFF:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014CFF                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014CFF                 mov     r8d, 4          ; jumptable 0000000000014C36 cases 84,116
.text:0000000000014D05                 xor     r9d, r9d
.text:0000000000014D08
.text:0000000000014D08 loc_14D08:                              ; CODE XREF: xstrtoul+2BB↓j
.text:0000000000014D08                 mov     rax, rbx
.text:0000000000014D0B                 mul     rsi
.text:0000000000014D0E                 mov     rbx, rax
.text:0000000000014D11                 jo      loc_14E13
.text:0000000000014D17
.text:0000000000014D17 loc_14D17:                              ; CODE XREF: xstrtoul+3BD↓j
.text:0000000000014D17                 sub     r8d, 1
.text:0000000000014D1B                 jnz     short loc_14D08
.text:0000000000014D1D                 jmp     short loc_14CD5
.text:0000000000014D1F ; ---------------------------------------------------------------------------
.text:0000000000014D1F
.text:0000000000014D1F loc_14D1F:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014D1F                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014D1F                 mov     rax, rbx        ; jumptable 0000000000014C36 cases 75,107
.text:0000000000014D22                 mul     rsi
.text:0000000000014D25                 mov     rbx, rax
.text:0000000000014D28                 jno     loc_14C60       ; jumptable 0000000000014C36 case 99
.text:0000000000014D2E
.text:0000000000014D2E loc_14D2E:                              ; CODE XREF: xstrtoul+232↑j
.text:0000000000014D2E                                         ; xstrtoul+248↑j ...
.text:0000000000014D2E                 mov     ebp, 1
.text:0000000000014D33                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014D37                 jmp     loc_14C60       ; jumptable 0000000000014C36 case 99
.text:0000000000014D37 ; ---------------------------------------------------------------------------
.text:0000000000014D3C                 align 20h
.text:0000000000014D40
.text:0000000000014D40 loc_14D40:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014D40                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014D40                 mov     r8d, 5          ; jumptable 0000000000014C36 case 80
.text:0000000000014D46                 xor     r9d, r9d
.text:0000000000014D49
.text:0000000000014D49 loc_14D49:                              ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000014D49                 mov     rax, rbx
.text:0000000000014D4C                 mul     rsi
.text:0000000000014D4F                 mov     rbx, rax
.text:0000000000014D52                 jo      loc_14E4F
.text:0000000000014D58
.text:0000000000014D58 loc_14D58:                              ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000014D58                 sub     r8d, 1
.text:0000000000014D5C                 jnz     short loc_14D49
.text:0000000000014D5E                 jmp     loc_14CD5
.text:0000000000014D63 ; ---------------------------------------------------------------------------
.text:0000000000014D63
.text:0000000000014D63 loc_14D63:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014D63                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014D63                 mov     r8d, 6          ; jumptable 0000000000014C36 case 69
.text:0000000000014D69                 xor     r9d, r9d
.text:0000000000014D6C
.text:0000000000014D6C loc_14D6C:                              ; CODE XREF: xstrtoul+31F↓j
.text:0000000000014D6C                 mov     rax, rbx
.text:0000000000014D6F                 mul     rsi
.text:0000000000014D72                 mov     rbx, rax
.text:0000000000014D75                 jo      loc_14E04
.text:0000000000014D7B
.text:0000000000014D7B loc_14D7B:                              ; CODE XREF: xstrtoul+3AE↓j
.text:0000000000014D7B                 sub     r8d, 1
.text:0000000000014D7F                 jnz     short loc_14D6C
.text:0000000000014D81                 jmp     loc_14CD5
.text:0000000000014D86 ; ---------------------------------------------------------------------------
.text:0000000000014D86
.text:0000000000014D86 loc_14D86:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014D86                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014D86                 mov     edx, 400h       ; jumptable 0000000000014C36 case 66
.text:0000000000014D8B                 mov     rax, rdx
.text:0000000000014D8E                 mul     rbx
.text:0000000000014D91                 jo      short loc_14D2E
.text:0000000000014D93                 shl     rbx, 0Ah
.text:0000000000014D97                 jmp     loc_14C60       ; jumptable 0000000000014C36 case 99
.text:0000000000014D9C ; ---------------------------------------------------------------------------
.text:0000000000014D9C
.text:0000000000014D9C loc_14D9C:                              ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000014D9C                                         ; DATA XREF: .rodata:jpt_14C36↓o
.text:0000000000014D9C                 mov     rax, rbx        ; jumptable 0000000000014C36 cases 71,103
.text:0000000000014D9F                 mul     rsi
.text:0000000000014DA2                 jo      loc_14E6D
.text:0000000000014DA8                 xor     r8d, r8d
.text:0000000000014DAB
.text:0000000000014DAB loc_14DAB:                              ; CODE XREF: xstrtoul+417↓j
.text:0000000000014DAB                 mul     rsi
.text:0000000000014DAE                 jno     loc_14C47
.text:0000000000014DB4                 mov     r8d, 1
.text:0000000000014DBA                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014DBE                 jmp     loc_14C47
.text:0000000000014DBE ; ---------------------------------------------------------------------------
.text:0000000000014DC3                 align 8
.text:0000000000014DC8
.text:0000000000014DC8 loc_14DC8:                              ; CODE XREF: xstrtoul+195↑j
.text:0000000000014DC8                 xor     edi, edi
.text:0000000000014DCA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000014DCE                 mov     esi, 400h
.text:0000000000014DD3                 setz    dil
.text:0000000000014DD7                 lea     edi, [rdi+rdi+1]
.text:0000000000014DDB                 jmp     loc_14C1A
.text:0000000000014DE0 ; ---------------------------------------------------------------------------
.text:0000000000014DE0
.text:0000000000014DE0 loc_14DE0:                              ; CODE XREF: xstrtoul+ED↑j
.text:0000000000014DE0                 call    ___stack_chk_fail
.text:0000000000014DE5 ; ---------------------------------------------------------------------------
.text:0000000000014DE5
.text:0000000000014DE5 loc_14DE5:                              ; CODE XREF: xstrtoul+21↑j
.text:0000000000014DE5                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:0000000000014DEC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000014DF3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000014DFA                 mov     edx, 54h ; 'T'  ; line
.text:0000000000014DFF                 call    ___assert_fail
.text:0000000000014E04 ; ---------------------------------------------------------------------------
.text:0000000000014E04
.text:0000000000014E04 loc_14E04:                              ; CODE XREF: xstrtoul+315↑j
.text:0000000000014E04                 mov     r9d, 1
.text:0000000000014E0A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E0E                 jmp     loc_14D7B
.text:0000000000014E13 ; ---------------------------------------------------------------------------
.text:0000000000014E13
.text:0000000000014E13 loc_14E13:                              ; CODE XREF: xstrtoul+2B1↑j
.text:0000000000014E13                 mov     r9d, 1
.text:0000000000014E19                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E1D                 jmp     loc_14D17
.text:0000000000014E22 ; ---------------------------------------------------------------------------
.text:0000000000014E22
.text:0000000000014E22 loc_14E22:                              ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000014E22                 mov     r8d, 1
.text:0000000000014E28                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E2C                 jmp     loc_14C53
.text:0000000000014E31 ; ---------------------------------------------------------------------------
.text:0000000000014E31
.text:0000000000014E31 loc_14E31:                              ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000014E31                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E35                 mov     r8d, 1
.text:0000000000014E3B                 jmp     loc_14C47
.text:0000000000014E40 ; ---------------------------------------------------------------------------
.text:0000000000014E40
.text:0000000000014E40 loc_14E40:                              ; CODE XREF: xstrtoul+291↑j
.text:0000000000014E40                 mov     r9d, 1
.text:0000000000014E46                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E4A                 jmp     loc_14CF7
.text:0000000000014E4F ; ---------------------------------------------------------------------------
.text:0000000000014E4F
.text:0000000000014E4F loc_14E4F:                              ; CODE XREF: xstrtoul+2F2↑j
.text:0000000000014E4F                 mov     r9d, 1
.text:0000000000014E55                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E59                 jmp     loc_14D58
.text:0000000000014E5E ; ---------------------------------------------------------------------------
.text:0000000000014E5E
.text:0000000000014E5E loc_14E5E:                              ; CODE XREF: xstrtoul+269↑j
.text:0000000000014E5E                 mov     r9d, 1
.text:0000000000014E64                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E68                 jmp     loc_14CCF
.text:0000000000014E6D ; ---------------------------------------------------------------------------
.text:0000000000014E6D
.text:0000000000014E6D loc_14E6D:                              ; CODE XREF: xstrtoul+342↑j
.text:0000000000014E6D                 mov     r8d, 1
.text:0000000000014E73                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014E77                 jmp     loc_14DAB
.text:0000000000014E77 ; } // starts at 14A60
.text:0000000000014E77 xstrtoul        endp
.text:0000000000014E77
.text:0000000000014E77 ; ---------------------------------------------------------------------------
.text:0000000000014E7C                 align 20h
.text:0000000000014E80
.text:0000000000014E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000014E80
.text:0000000000014E80 ; Attributes: noreturn info_from_lumina
.text:0000000000014E80
.text:0000000000014E80 ; void __fastcall xstrtol_fatal(strtol_error err, int opt_idx, char c, const option *long_options, const char *arg)
.text:0000000000014E80                 public xstrtol_fatal
.text:0000000000014E80 xstrtol_fatal   proc near               ; CODE XREF: main+19BA↑p
.text:0000000000014E80
.text:0000000000014E80 var_32          = byte ptr -32h
.text:0000000000014E80 var_31          = byte ptr -31h
.text:0000000000014E80 var_30          = qword ptr -30h
.text:0000000000014E80
.text:0000000000014E80 ; __unwind {
.text:0000000000014E80                 push    r13
.text:0000000000014E82                 push    r12
.text:0000000000014E84                 mov     r10d, esi
.text:0000000000014E87                 push    rbp
.text:0000000000014E88                 push    rbx
.text:0000000000014E89                 mov     r12, r8
.text:0000000000014E8C                 sub     rsp, 18h
.text:0000000000014E90                 mov     rax, fs:28h
.text:0000000000014E99                 mov     [rsp+38h+var_30], rax
.text:0000000000014E9E                 xor     eax, eax
.text:0000000000014EA0                 cmp     edi, 3
.text:0000000000014EA3                 mov     ebp, cs:exit_failure
.text:0000000000014EA9                 ja      short loc_14F04
.text:0000000000014EAB                 cmp     edi, 2
.text:0000000000014EAE                 jnb     short loc_14EFB
.text:0000000000014EB0                 sub     edi, 1
.text:0000000000014EB3                 lea     rsi, aSSArgumentSToo ; "%s%s argument '%s' too large"
.text:0000000000014EBA                 jnz     short loc_14EF6
.text:0000000000014EBC
.text:0000000000014EBC loc_14EBC:                              ; CODE XREF: xstrtol_fatal+82↓j
.text:0000000000014EBC                                         ; xstrtol_fatal+8E↓j
.text:0000000000014EBC                 test    r10d, r10d
.text:0000000000014EBF                 movsxd  rax, r10d
.text:0000000000014EC2                 js      short loc_14F12
.text:0000000000014EC4                 shl     rax, 5
.text:0000000000014EC8                 lea     rbx, asc_1ACC1  ; "--"
.text:0000000000014ECF                 mov     r13, [rcx+rax]
.text:0000000000014ED3
.text:0000000000014ED3 loc_14ED3:                              ; CODE XREF: xstrtol_fatal+AA↓j
.text:0000000000014ED3                 mov     edx, 5          ; category
.text:0000000000014ED8                 xor     edi, edi        ; domainname
.text:0000000000014EDA                 call    _dcgettext
.text:0000000000014EDF                 mov     r9, r12
.text:0000000000014EE2                 mov     rdx, rax        ; format
.text:0000000000014EE5                 mov     r8, r13
.text:0000000000014EE8                 mov     rcx, rbx
.text:0000000000014EEB                 xor     esi, esi        ; errnum
.text:0000000000014EED                 mov     edi, ebp        ; status
.text:0000000000014EEF                 xor     eax, eax
.text:0000000000014EF1                 call    _error
.text:0000000000014EF6
.text:0000000000014EF6 loc_14EF6:                              ; CODE XREF: xstrtol_fatal+3A↑j
.text:0000000000014EF6                                         ; xstrtol_fatal+90↓j
.text:0000000000014EF6                 call    _abort
.text:0000000000014EFB ; ---------------------------------------------------------------------------
.text:0000000000014EFB
.text:0000000000014EFB loc_14EFB:                              ; CODE XREF: xstrtol_fatal+2E↑j
.text:0000000000014EFB                 lea     rsi, aInvalidSuffixI ; "invalid suffix in %s%s argument '%s'"
.text:0000000000014F02                 jmp     short loc_14EBC
.text:0000000000014F04 ; ---------------------------------------------------------------------------
.text:0000000000014F04
.text:0000000000014F04 loc_14F04:                              ; CODE XREF: xstrtol_fatal+29↑j
.text:0000000000014F04                 cmp     edi, 4
.text:0000000000014F07                 lea     rsi, aInvalidSSArgum ; "invalid %s%s argument '%s'"
.text:0000000000014F0E                 jz      short loc_14EBC
.text:0000000000014F10                 jmp     short loc_14EF6
.text:0000000000014F12 ; ---------------------------------------------------------------------------
.text:0000000000014F12
.text:0000000000014F12 loc_14F12:                              ; CODE XREF: xstrtol_fatal+42↑j
.text:0000000000014F12                 lea     rbx, asc_1ACC1  ; "--"
.text:0000000000014F19                 mov     [rsp+38h+var_32], dl
.text:0000000000014F1D                 mov     [rsp+38h+var_31], 0
.text:0000000000014F22                 lea     r13, [rsp+38h+var_32]
.text:0000000000014F27                 sub     rbx, rax
.text:0000000000014F2A                 jmp     short loc_14ED3
.text:0000000000014F2A ; } // starts at 14E80
.text:0000000000014F2A xstrtol_fatal   endp
.text:0000000000014F2A
.text:0000000000014F2A ; ---------------------------------------------------------------------------
.text:0000000000014F2C                 align 10h
.text:0000000000014F30
.text:0000000000014F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000014F30
.text:0000000000014F30
.text:0000000000014F30 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000014F30                 public xstrtoumax
.text:0000000000014F30 xstrtoumax      proc near               ; CODE XREF: set_line_length+22↑p
.text:0000000000014F30                                         ; human_options+AA↑p ...
.text:0000000000014F30
.text:0000000000014F30 base            = dword ptr -50h
.text:0000000000014F30 endptr          = qword ptr -48h
.text:0000000000014F30 var_40          = qword ptr -40h
.text:0000000000014F30
.text:0000000000014F30 ; __unwind {
.text:0000000000014F30                 push    r15
.text:0000000000014F32                 push    r14
.text:0000000000014F34                 push    r13
.text:0000000000014F36                 push    r12
.text:0000000000014F38                 push    rbp
.text:0000000000014F39                 push    rbx
.text:0000000000014F3A                 sub     rsp, 28h
.text:0000000000014F3E                 mov     rax, fs:28h
.text:0000000000014F47                 mov     [rsp+58h+var_40], rax
.text:0000000000014F4C                 xor     eax, eax
.text:0000000000014F4E                 cmp     edx, 24h ; '$'
.text:0000000000014F51                 ja      loc_152B5
.text:0000000000014F57                 lea     rax, [rsp+58h+endptr]
.text:0000000000014F5C                 mov     r15, rsi
.text:0000000000014F5F                 test    rsi, rsi
.text:0000000000014F62                 mov     rbp, rdi
.text:0000000000014F65                 mov     [rsp+58h+base], edx
.text:0000000000014F69                 mov     r14, rcx
.text:0000000000014F6C                 mov     r13, r8
.text:0000000000014F6F                 cmovz   r15, rax
.text:0000000000014F73                 call    ___errno_location
.text:0000000000014F78                 mov     dword ptr [rax], 0
.text:0000000000014F7E                 mov     r12, rax
.text:0000000000014F81                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000014F85                 call    ___ctype_b_loc
.text:0000000000014F8A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000014F8E                 mov     rsi, [rax]
.text:0000000000014F91                 mov     rax, rbp
.text:0000000000014F94                 jmp     short loc_14FA7
.text:0000000000014F94 ; ---------------------------------------------------------------------------
.text:0000000000014F96                 align 20h
.text:0000000000014FA0
.text:0000000000014FA0 loc_14FA0:                              ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000014FA0                 add     rax, 1
.text:0000000000014FA4                 movzx   ebx, byte ptr [rax]
.text:0000000000014FA7
.text:0000000000014FA7 loc_14FA7:                              ; CODE XREF: xstrtoumax+64↑j
.text:0000000000014FA7                 movzx   ecx, bl
.text:0000000000014FAA                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000014FAF                 jnz     short loc_14FA0
.text:0000000000014FB1                 cmp     bl, 2Dh ; '-'
.text:0000000000014FB4                 jz      short loc_15008
.text:0000000000014FB6                 xor     ecx, ecx        ; group
.text:0000000000014FB8                 mov     rsi, r15        ; endptr
.text:0000000000014FBB                 mov     rdi, rbp        ; nptr
.text:0000000000014FBE                 call    ___strtoul_internal
.text:0000000000014FC3                 mov     rcx, [r15]
.text:0000000000014FC6                 mov     rbx, rax
.text:0000000000014FC9                 cmp     rcx, rbp
.text:0000000000014FCC                 jz      short loc_14FF8
.text:0000000000014FCE                 mov     eax, [r12]
.text:0000000000014FD2                 test    eax, eax
.text:0000000000014FD4                 jz      short loc_15038
.text:0000000000014FD6                 cmp     eax, 22h ; '"'
.text:0000000000014FD9                 mov     ebp, 1
.text:0000000000014FDE                 jnz     short loc_15008
.text:0000000000014FE0
.text:0000000000014FE0 loc_14FE0:                              ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000014FE0                 test    r13, r13
.text:0000000000014FE3                 jz      short loc_14FEE
.text:0000000000014FE5                 movzx   r12d, byte ptr [rcx]
.text:0000000000014FE9                 test    r12b, r12b
.text:0000000000014FEC                 jnz     short loc_15067
.text:0000000000014FEE
.text:0000000000014FEE loc_14FEE:                              ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000014FEE                 mov     [r14], rbx
.text:0000000000014FF1                 jmp     short loc_1500D
.text:0000000000014FF1 ; ---------------------------------------------------------------------------
.text:0000000000014FF3                 align 8
.text:0000000000014FF8
.text:0000000000014FF8 loc_14FF8:                              ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000014FF8                 test    r13, r13
.text:0000000000014FFB                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000015000                 jnz     short loc_15040
.text:0000000000015002                 nop     word ptr [rax+rax+00h]
.text:0000000000015008
.text:0000000000015008 loc_15008:                              ; CODE XREF: xstrtoumax+84↑j
.text:0000000000015008                                         ; xstrtoumax+AE↑j ...
.text:0000000000015008                 mov     ebp, 4
.text:000000000001500D
.text:000000000001500D loc_1500D:                              ; CODE XREF: xstrtoumax+C1↑j
.text:000000000001500D                                         ; xstrtoumax+217↓j ...
.text:000000000001500D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000015012                 xor     rdi, fs:28h
.text:000000000001501B                 mov     eax, ebp
.text:000000000001501D                 jnz     loc_152B0
.text:0000000000015023                 add     rsp, 28h
.text:0000000000015027                 pop     rbx
.text:0000000000015028                 pop     rbp
.text:0000000000015029                 pop     r12
.text:000000000001502B                 pop     r13
.text:000000000001502D                 pop     r14
.text:000000000001502F                 pop     r15
.text:0000000000015031                 retn
.text:0000000000015031 ; ---------------------------------------------------------------------------
.text:0000000000015032                 align 8
.text:0000000000015038
.text:0000000000015038 loc_15038:                              ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000015038                 xor     ebp, ebp
.text:000000000001503A                 jmp     short loc_14FE0
.text:000000000001503A ; ---------------------------------------------------------------------------
.text:000000000001503C                 align 20h
.text:0000000000015040
.text:0000000000015040 loc_15040:                              ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000015040                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000015045                 test    r12b, r12b
.text:0000000000015048                 jz      short loc_15008
.text:000000000001504A                 movsx   esi, r12b       ; c
.text:000000000001504E                 mov     rdi, r13        ; s
.text:0000000000015051                 xor     ebp, ebp
.text:0000000000015053                 call    _strchr
.text:0000000000015058                 test    rax, rax
.text:000000000001505B                 mov     ebx, 1
.text:0000000000015060                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000015065                 jz      short loc_15008
.text:0000000000015067
.text:0000000000015067 loc_15067:                              ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000015067                 movsx   esi, r12b       ; c
.text:000000000001506B                 mov     rdi, r13        ; s
.text:000000000001506E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000015073                 call    _strchr
.text:0000000000015078                 test    rax, rax
.text:000000000001507B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000015080                 jz      def_15106       ; jumptable 0000000000015106 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000015086                 lea     eax, [r12-45h]
.text:000000000001508B                 cmp     al, 2Fh ; '/'
.text:000000000001508D                 ja      short loc_150E0
.text:000000000001508F                 mov     rdx, 814400308945h
.text:0000000000015099                 bt      rdx, rax
.text:000000000001509D                 jnb     short loc_150E0
.text:000000000001509F                 mov     esi, 30h ; '0'  ; c
.text:00000000000150A4                 mov     rdi, r13        ; s
.text:00000000000150A7                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000150AC                 call    _strchr
.text:00000000000150B1                 test    rax, rax
.text:00000000000150B4                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000150B9                 jz      short loc_150E0
.text:00000000000150BB                 movzx   eax, byte ptr [rcx+1]
.text:00000000000150BF                 cmp     al, 44h ; 'D'
.text:00000000000150C1                 jz      short loc_150CF
.text:00000000000150C3                 cmp     al, 69h ; 'i'
.text:00000000000150C5                 jz      loc_15298
.text:00000000000150CB                 cmp     al, 42h ; 'B'
.text:00000000000150CD                 jnz     short loc_150E0
.text:00000000000150CF
.text:00000000000150CF loc_150CF:                              ; CODE XREF: xstrtoumax+191↑j
.text:00000000000150CF                 mov     edi, 2
.text:00000000000150D4                 mov     esi, 3E8h
.text:00000000000150D9                 jmp     short loc_150EA
.text:00000000000150D9 ; ---------------------------------------------------------------------------
.text:00000000000150DB                 align 20h
.text:00000000000150E0
.text:00000000000150E0 loc_150E0:                              ; CODE XREF: xstrtoumax+15D↑j
.text:00000000000150E0                                         ; xstrtoumax+16D↑j ...
.text:00000000000150E0                 mov     edi, 1
.text:00000000000150E5                 mov     esi, 400h
.text:00000000000150EA
.text:00000000000150EA loc_150EA:                              ; CODE XREF: xstrtoumax+1A9↑j
.text:00000000000150EA                                         ; xstrtoumax+37B↓j
.text:00000000000150EA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000150EE                 cmp     r12b, 35h
.text:00000000000150F2                 ja      short def_15106 ; jumptable 0000000000015106 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000150F4                 lea     rdx, jpt_15106
.text:00000000000150FB                 movzx   r12d, r12b
.text:00000000000150FF                 movsxd  rax, ds:(jpt_15106 - 1ACF0h)[rdx+r12*4]
.text:0000000000015103                 add     rax, rdx
.text:0000000000015106                 jmp     rax             ; switch jump
.text:0000000000015108 ; ---------------------------------------------------------------------------
.text:0000000000015108
.text:0000000000015108 loc_15108:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015108                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015108                 mov     rax, rbx        ; jumptable 0000000000015106 cases 77,109
.text:000000000001510B                 mul     rsi
.text:000000000001510E                 jo      loc_15301
.text:0000000000015114                 xor     r8d, r8d
.text:0000000000015117
.text:0000000000015117 loc_15117:                              ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000015117                                         ; xstrtoumax+35E↓j ...
.text:0000000000015117                 mul     rsi
.text:000000000001511A                 jo      loc_152F2
.text:0000000000015120                 mov     rbx, rax
.text:0000000000015123
.text:0000000000015123 loc_15123:                              ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000015123                 or      ebp, r8d
.text:0000000000015126                 db      2Eh
.text:0000000000015126                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015130
.text:0000000000015130 loc_15130:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015130                                         ; xstrtoumax+23B↓j ...
.text:0000000000015130                 movsxd  rdi, edi        ; jumptable 0000000000015106 case 99
.text:0000000000015133                 mov     eax, ebp
.text:0000000000015135                 add     rcx, rdi
.text:0000000000015138                 or      eax, 2
.text:000000000001513B                 mov     [r15], rcx
.text:000000000001513E                 cmp     byte ptr [rcx], 0
.text:0000000000015141                 mov     [r14], rbx
.text:0000000000015144                 cmovnz  ebp, eax
.text:0000000000015147                 jmp     loc_1500D
.text:000000000001514C ; ---------------------------------------------------------------------------
.text:000000000001514C
.text:000000000001514C def_15106:                              ; CODE XREF: xstrtoumax+150↑j
.text:000000000001514C                                         ; xstrtoumax+1C2↑j ...
.text:000000000001514C                 mov     [r14], rbx      ; jumptable 0000000000015106 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000001514F                 or      ebp, 2
.text:0000000000015152                 jmp     loc_1500D
.text:0000000000015157 ; ---------------------------------------------------------------------------
.text:0000000000015157
.text:0000000000015157 loc_15157:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015157                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015157                 mov     edx, 2          ; jumptable 0000000000015106 case 119
.text:000000000001515C                 mov     rax, rdx
.text:000000000001515F                 mul     rbx
.text:0000000000015162                 jo      loc_151FE
.text:0000000000015168                 add     rbx, rbx
.text:000000000001516B                 jmp     short loc_15130 ; jumptable 0000000000015106 case 99
.text:000000000001516D ; ---------------------------------------------------------------------------
.text:000000000001516D
.text:000000000001516D loc_1516D:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000001516D                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:000000000001516D                 mov     edx, 200h       ; jumptable 0000000000015106 case 98
.text:0000000000015172                 mov     rax, rdx
.text:0000000000015175                 mul     rbx
.text:0000000000015178                 jo      loc_151FE
.text:000000000001517E                 shl     rbx, 9
.text:0000000000015182                 jmp     short loc_15130 ; jumptable 0000000000015106 case 99
.text:0000000000015184 ; ---------------------------------------------------------------------------
.text:0000000000015184
.text:0000000000015184 loc_15184:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015184                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015184                 mov     r8d, 7          ; jumptable 0000000000015106 case 90
.text:000000000001518A                 xor     r9d, r9d
.text:000000000001518D                 nop     dword ptr [rax]
.text:0000000000015190
.text:0000000000015190 loc_15190:                              ; CODE XREF: xstrtoumax+273↓j
.text:0000000000015190                 mov     rax, rbx
.text:0000000000015193                 mul     rsi
.text:0000000000015196                 mov     rbx, rax
.text:0000000000015199                 jo      loc_1532E
.text:000000000001519F
.text:000000000001519F loc_1519F:                              ; CODE XREF: xstrtoumax+408↓j
.text:000000000001519F                 sub     r8d, 1
.text:00000000000151A3                 jnz     short loc_15190
.text:00000000000151A5
.text:00000000000151A5 loc_151A5:                              ; CODE XREF: xstrtoumax+29D↓j
.text:00000000000151A5                                         ; xstrtoumax+2BD↓j ...
.text:00000000000151A5                 or      ebp, r9d
.text:00000000000151A8                 jmp     short loc_15130 ; jumptable 0000000000015106 case 99
.text:00000000000151AA ; ---------------------------------------------------------------------------
.text:00000000000151AA
.text:00000000000151AA loc_151AA:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000151AA                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:00000000000151AA                 mov     r8d, 8          ; jumptable 0000000000015106 case 89
.text:00000000000151B0                 xor     r9d, r9d
.text:00000000000151B3                 nop     dword ptr [rax+rax+00h]
.text:00000000000151B8
.text:00000000000151B8 loc_151B8:                              ; CODE XREF: xstrtoumax+29B↓j
.text:00000000000151B8                 mov     rax, rbx
.text:00000000000151BB                 mul     rsi
.text:00000000000151BE                 mov     rbx, rax
.text:00000000000151C1                 jo      loc_15310
.text:00000000000151C7
.text:00000000000151C7 loc_151C7:                              ; CODE XREF: xstrtoumax+3EA↓j
.text:00000000000151C7                 sub     r8d, 1
.text:00000000000151CB                 jnz     short loc_151B8
.text:00000000000151CD                 jmp     short loc_151A5
.text:00000000000151CF ; ---------------------------------------------------------------------------
.text:00000000000151CF
.text:00000000000151CF loc_151CF:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000151CF                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:00000000000151CF                 mov     r8d, 4          ; jumptable 0000000000015106 cases 84,116
.text:00000000000151D5                 xor     r9d, r9d
.text:00000000000151D8
.text:00000000000151D8 loc_151D8:                              ; CODE XREF: xstrtoumax+2BB↓j
.text:00000000000151D8                 mov     rax, rbx
.text:00000000000151DB                 mul     rsi
.text:00000000000151DE                 mov     rbx, rax
.text:00000000000151E1                 jo      loc_152E3
.text:00000000000151E7
.text:00000000000151E7 loc_151E7:                              ; CODE XREF: xstrtoumax+3BD↓j
.text:00000000000151E7                 sub     r8d, 1
.text:00000000000151EB                 jnz     short loc_151D8
.text:00000000000151ED                 jmp     short loc_151A5
.text:00000000000151EF ; ---------------------------------------------------------------------------
.text:00000000000151EF
.text:00000000000151EF loc_151EF:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000151EF                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:00000000000151EF                 mov     rax, rbx        ; jumptable 0000000000015106 cases 75,107
.text:00000000000151F2                 mul     rsi
.text:00000000000151F5                 mov     rbx, rax
.text:00000000000151F8                 jno     loc_15130       ; jumptable 0000000000015106 case 99
.text:00000000000151FE
.text:00000000000151FE loc_151FE:                              ; CODE XREF: xstrtoumax+232↑j
.text:00000000000151FE                                         ; xstrtoumax+248↑j ...
.text:00000000000151FE                 mov     ebp, 1
.text:0000000000015203                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000015207                 jmp     loc_15130       ; jumptable 0000000000015106 case 99
.text:0000000000015207 ; ---------------------------------------------------------------------------
.text:000000000001520C                 align 10h
.text:0000000000015210
.text:0000000000015210 loc_15210:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015210                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015210                 mov     r8d, 5          ; jumptable 0000000000015106 case 80
.text:0000000000015216                 xor     r9d, r9d
.text:0000000000015219
.text:0000000000015219 loc_15219:                              ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000015219                 mov     rax, rbx
.text:000000000001521C                 mul     rsi
.text:000000000001521F                 mov     rbx, rax
.text:0000000000015222                 jo      loc_1531F
.text:0000000000015228
.text:0000000000015228 loc_15228:                              ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000015228                 sub     r8d, 1
.text:000000000001522C                 jnz     short loc_15219
.text:000000000001522E                 jmp     loc_151A5
.text:0000000000015233 ; ---------------------------------------------------------------------------
.text:0000000000015233
.text:0000000000015233 loc_15233:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015233                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015233                 mov     r8d, 6          ; jumptable 0000000000015106 case 69
.text:0000000000015239                 xor     r9d, r9d
.text:000000000001523C
.text:000000000001523C loc_1523C:                              ; CODE XREF: xstrtoumax+31F↓j
.text:000000000001523C                 mov     rax, rbx
.text:000000000001523F                 mul     rsi
.text:0000000000015242                 mov     rbx, rax
.text:0000000000015245                 jo      loc_152D4
.text:000000000001524B
.text:000000000001524B loc_1524B:                              ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000001524B                 sub     r8d, 1
.text:000000000001524F                 jnz     short loc_1523C
.text:0000000000015251                 jmp     loc_151A5
.text:0000000000015256 ; ---------------------------------------------------------------------------
.text:0000000000015256
.text:0000000000015256 loc_15256:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000015256                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:0000000000015256                 mov     edx, 400h       ; jumptable 0000000000015106 case 66
.text:000000000001525B                 mov     rax, rdx
.text:000000000001525E                 mul     rbx
.text:0000000000015261                 jo      short loc_151FE
.text:0000000000015263                 shl     rbx, 0Ah
.text:0000000000015267                 jmp     loc_15130       ; jumptable 0000000000015106 case 99
.text:000000000001526C ; ---------------------------------------------------------------------------
.text:000000000001526C
.text:000000000001526C loc_1526C:                              ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000001526C                                         ; DATA XREF: .rodata:jpt_15106↓o
.text:000000000001526C                 mov     rax, rbx        ; jumptable 0000000000015106 cases 71,103
.text:000000000001526F                 mul     rsi
.text:0000000000015272                 jo      loc_1533D
.text:0000000000015278                 xor     r8d, r8d
.text:000000000001527B
.text:000000000001527B loc_1527B:                              ; CODE XREF: xstrtoumax+417↓j
.text:000000000001527B                 mul     rsi
.text:000000000001527E                 jno     loc_15117
.text:0000000000015284                 mov     r8d, 1
.text:000000000001528A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000001528E                 jmp     loc_15117
.text:000000000001528E ; ---------------------------------------------------------------------------
.text:0000000000015293                 align 8
.text:0000000000015298
.text:0000000000015298 loc_15298:                              ; CODE XREF: xstrtoumax+195↑j
.text:0000000000015298                 xor     edi, edi
.text:000000000001529A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000001529E                 mov     esi, 400h
.text:00000000000152A3                 setz    dil
.text:00000000000152A7                 lea     edi, [rdi+rdi+1]
.text:00000000000152AB                 jmp     loc_150EA
.text:00000000000152B0 ; ---------------------------------------------------------------------------
.text:00000000000152B0
.text:00000000000152B0 loc_152B0:                              ; CODE XREF: xstrtoumax+ED↑j
.text:00000000000152B0                 call    ___stack_chk_fail
.text:00000000000152B5 ; ---------------------------------------------------------------------------
.text:00000000000152B5
.text:00000000000152B5 loc_152B5:                              ; CODE XREF: xstrtoumax+21↑j
.text:00000000000152B5                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:00000000000152BC                 lea     rsi, aCoreutils831Li ; "../coreutils-8.31/lib/xstrtol.c"
.text:00000000000152C3                 lea     rdi, a0StrtolBaseStr ; "0 <= strtol_base && strtol_base <= 36"
.text:00000000000152CA                 mov     edx, 54h ; 'T'  ; line
.text:00000000000152CF                 call    ___assert_fail
.text:00000000000152D4 ; ---------------------------------------------------------------------------
.text:00000000000152D4
.text:00000000000152D4 loc_152D4:                              ; CODE XREF: xstrtoumax+315↑j
.text:00000000000152D4                 mov     r9d, 1
.text:00000000000152DA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000152DE                 jmp     loc_1524B
.text:00000000000152E3 ; ---------------------------------------------------------------------------
.text:00000000000152E3
.text:00000000000152E3 loc_152E3:                              ; CODE XREF: xstrtoumax+2B1↑j
.text:00000000000152E3                 mov     r9d, 1
.text:00000000000152E9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000152ED                 jmp     loc_151E7
.text:00000000000152F2 ; ---------------------------------------------------------------------------
.text:00000000000152F2
.text:00000000000152F2 loc_152F2:                              ; CODE XREF: xstrtoumax+1EA↑j
.text:00000000000152F2                 mov     r8d, 1
.text:00000000000152F8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000152FC                 jmp     loc_15123
.text:0000000000015301 ; ---------------------------------------------------------------------------
.text:0000000000015301
.text:0000000000015301 loc_15301:                              ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000015301                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015305                 mov     r8d, 1
.text:000000000001530B                 jmp     loc_15117
.text:0000000000015310 ; ---------------------------------------------------------------------------
.text:0000000000015310
.text:0000000000015310 loc_15310:                              ; CODE XREF: xstrtoumax+291↑j
.text:0000000000015310                 mov     r9d, 1
.text:0000000000015316                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000001531A                 jmp     loc_151C7
.text:000000000001531F ; ---------------------------------------------------------------------------
.text:000000000001531F
.text:000000000001531F loc_1531F:                              ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000001531F                 mov     r9d, 1
.text:0000000000015325                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000015329                 jmp     loc_15228
.text:000000000001532E ; ---------------------------------------------------------------------------
.text:000000000001532E
.text:000000000001532E loc_1532E:                              ; CODE XREF: xstrtoumax+269↑j
.text:000000000001532E                 mov     r9d, 1
.text:0000000000015334                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000015338                 jmp     loc_1519F
.text:000000000001533D ; ---------------------------------------------------------------------------
.text:000000000001533D
.text:000000000001533D loc_1533D:                              ; CODE XREF: xstrtoumax+342↑j
.text:000000000001533D                 mov     r8d, 1
.text:0000000000015343                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015347                 jmp     loc_1527B
.text:0000000000015347 ; } // starts at 14F30
.text:0000000000015347 xstrtoumax      endp
.text:0000000000015347
.text:0000000000015347 ; ---------------------------------------------------------------------------
.text:000000000001534C                 align 10h
.text:0000000000015350
.text:0000000000015350 ; =============== S U B R O U T I N E =======================================
.text:0000000000015350
.text:0000000000015350 ; Attributes: info_from_lumina
.text:0000000000015350
.text:0000000000015350 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000015350                 public rpl_mbrtowc
.text:0000000000015350 rpl_mbrtowc     proc near               ; CODE XREF: quote_name_buf+267↑p
.text:0000000000015350                                         ; mbsnwidth+BF↑p ...
.text:0000000000015350
.text:0000000000015350 pwc             = dword ptr -34h
.text:0000000000015350 var_30          = qword ptr -30h
.text:0000000000015350
.text:0000000000015350 ; __unwind {
.text:0000000000015350                 push    r13
.text:0000000000015352                 push    r12
.text:0000000000015354                 mov     r13, rsi
.text:0000000000015357                 push    rbp
.text:0000000000015358                 push    rbx
.text:0000000000015359                 mov     rbx, rdi
.text:000000000001535C                 mov     r12, rdx
.text:000000000001535F                 sub     rsp, 18h
.text:0000000000015363                 mov     rax, fs:28h
.text:000000000001536C                 mov     [rsp+38h+var_30], rax
.text:0000000000015371                 xor     eax, eax
.text:0000000000015373                 lea     rax, [rsp+38h+pwc]
.text:0000000000015378                 test    rdi, rdi
.text:000000000001537B                 cmovz   rbx, rax
.text:000000000001537F                 mov     rdi, rbx        ; pwc
.text:0000000000015382                 call    _mbrtowc
.text:0000000000015387                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000001538B                 mov     rbp, rax
.text:000000000001538E                 jbe     short loc_153B0
.text:0000000000015390                 test    r12, r12
.text:0000000000015393                 jz      short loc_153B0
.text:0000000000015395                 xor     edi, edi
.text:0000000000015397                 call    hard_locale
.text:000000000001539C                 test    al, al
.text:000000000001539E                 jnz     short loc_153B0
.text:00000000000153A0                 movzx   eax, byte ptr [r13+0]
.text:00000000000153A5                 mov     ebp, 1
.text:00000000000153AA                 mov     [rbx], eax
.text:00000000000153AC                 nop     dword ptr [rax+00h]
.text:00000000000153B0
.text:00000000000153B0 loc_153B0:                              ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000153B0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000153B0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000153B5                 xor     rdx, fs:28h
.text:00000000000153BE                 mov     rax, rbp
.text:00000000000153C1                 jnz     short loc_153CE
.text:00000000000153C3                 add     rsp, 18h
.text:00000000000153C7                 pop     rbx
.text:00000000000153C8                 pop     rbp
.text:00000000000153C9                 pop     r12
.text:00000000000153CB                 pop     r13
.text:00000000000153CD                 retn
.text:00000000000153CE ; ---------------------------------------------------------------------------
.text:00000000000153CE
.text:00000000000153CE loc_153CE:                              ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000153CE                 call    ___stack_chk_fail
.text:00000000000153CE ; } // starts at 15350
.text:00000000000153CE rpl_mbrtowc     endp
.text:00000000000153CE
.text:00000000000153CE ; ---------------------------------------------------------------------------
.text:00000000000153D3                 align 20h
.text:00000000000153E0
.text:00000000000153E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000153E0
.text:00000000000153E0 ; Attributes: noreturn info_from_lumina
.text:00000000000153E0
.text:00000000000153E0 ; void __cdecl print_and_abort()
.text:00000000000153E0 print_and_abort proc near               ; CODE XREF: _obstack_begin_worker:loc_154DD↓p
.text:00000000000153E0                                         ; _obstack_newchunk:loc_15615↓p
.text:00000000000153E0                                         ; DATA XREF: ...
.text:00000000000153E0 ; __unwind {
.text:00000000000153E0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000153E7                 sub     rsp, 8
.text:00000000000153EB                 mov     edx, 5          ; category
.text:00000000000153F0                 xor     edi, edi        ; domainname
.text:00000000000153F2                 call    _dcgettext
.text:00000000000153F7                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000153FE                 lea     rdx, aSSS_0+8   ; "%s\n"
.text:0000000000015405                 mov     rcx, rax
.text:0000000000015408                 mov     esi, 1
.text:000000000001540D                 xor     eax, eax
.text:000000000001540F                 call    ___fprintf_chk
.text:0000000000015414                 mov     edi, cs:exit_failure ; status
.text:000000000001541A                 call    _exit
.text:000000000001541A ; } // starts at 153E0
.text:000000000001541A print_and_abort endp
.text:000000000001541A
.text:000000000001541A ; ---------------------------------------------------------------------------
.text:000000000001541F                 align 20h
.text:0000000000015420
.text:0000000000015420 ; =============== S U B R O U T I N E =======================================
.text:0000000000015420
.text:0000000000015420
.text:0000000000015420 call_chunkfun   proc near               ; CODE XREF: _obstack_begin_worker+29↓p
.text:0000000000015420                                         ; _obstack_newchunk+58↓p
.text:0000000000015420 ; __unwind {
.text:0000000000015420                 test    byte ptr [rdi+50h], 1
.text:0000000000015424                 mov     rax, [rdi+38h]
.text:0000000000015428                 jnz     short loc_15430
.text:000000000001542A                 mov     rdi, rsi
.text:000000000001542D                 jmp     rax
.text:000000000001542D ; ---------------------------------------------------------------------------
.text:000000000001542F                 align 10h
.text:0000000000015430
.text:0000000000015430 loc_15430:                              ; CODE XREF: call_chunkfun+8↑j
.text:0000000000015430                 mov     rdi, [rdi+48h]
.text:0000000000015434                 jmp     rax
.text:0000000000015434 ; } // starts at 15420
.text:0000000000015434 call_chunkfun   endp
.text:0000000000015434
.text:0000000000015434 ; ---------------------------------------------------------------------------
.text:0000000000015436                 align 20h
.text:0000000000015440
.text:0000000000015440 ; =============== S U B R O U T I N E =======================================
.text:0000000000015440
.text:0000000000015440
.text:0000000000015440 call_freefun    proc near               ; CODE XREF: _obstack_newchunk+DE↓p
.text:0000000000015440                                         ; _obstack_free+2C↓p
.text:0000000000015440 ; __unwind {
.text:0000000000015440                 test    byte ptr [rdi+50h], 1
.text:0000000000015444                 mov     rax, [rdi+40h]
.text:0000000000015448                 jnz     short loc_15450
.text:000000000001544A                 mov     rdi, rsi
.text:000000000001544D                 jmp     rax
.text:000000000001544D ; ---------------------------------------------------------------------------
.text:000000000001544F                 align 10h
.text:0000000000015450
.text:0000000000015450 loc_15450:                              ; CODE XREF: call_freefun+8↑j
.text:0000000000015450                 mov     rdi, [rdi+48h]
.text:0000000000015454                 jmp     rax
.text:0000000000015454 ; } // starts at 15440
.text:0000000000015454 call_freefun    endp
.text:0000000000015454
.text:0000000000015454 ; ---------------------------------------------------------------------------
.text:0000000000015456                 align 20h
.text:0000000000015460
.text:0000000000015460 ; =============== S U B R O U T I N E =======================================
.text:0000000000015460
.text:0000000000015460 ; Attributes: info_from_lumina
.text:0000000000015460
.text:0000000000015460 ; int __fastcall obstack_begin_worker(obstack *h, size_t size, size_t alignment)
.text:0000000000015460 _obstack_begin_worker proc near         ; CODE XREF: _obstack_begin+C↓j
.text:0000000000015460                                         ; _obstack_begin_1+10↓j
.text:0000000000015460 ; __unwind {
.text:0000000000015460                 test    rdx, rdx
.text:0000000000015463                 push    r12
.text:0000000000015465                 push    rbp
.text:0000000000015466                 push    rbx
.text:0000000000015467                 mov     rbx, rdi
.text:000000000001546A                 jz      short loc_154D0
.text:000000000001546C                 lea     r12, [rdx-1]
.text:0000000000015470                 mov     rbp, rdx
.text:0000000000015473
.text:0000000000015473 loc_15473:                              ; CODE XREF: _obstack_begin_worker+7B↓j
.text:0000000000015473                 test    rsi, rsi
.text:0000000000015476                 mov     eax, 0FE0h
.text:000000000001547B                 mov     [rbx+30h], r12
.text:000000000001547F                 cmovz   rsi, rax
.text:0000000000015483                 mov     rdi, rbx
.text:0000000000015486                 mov     [rbx], rsi
.text:0000000000015489                 call    call_chunkfun
.text:000000000001548E                 test    rax, rax
.text:0000000000015491                 mov     [rbx+8], rax
.text:0000000000015495                 jz      short loc_154DD
.text:0000000000015497                 lea     rdx, [rax+r12+10h]
.text:000000000001549C                 neg     rbp
.text:000000000001549F                 and     rbp, rdx
.text:00000000000154A2                 mov     rdx, [rbx]
.text:00000000000154A5                 mov     [rbx+10h], rbp
.text:00000000000154A9                 mov     [rbx+18h], rbp
.text:00000000000154AD                 add     rdx, rax
.text:00000000000154B0                 mov     [rax], rdx
.text:00000000000154B3                 mov     [rbx+20h], rdx
.text:00000000000154B7                 mov     qword ptr [rax+8], 0
.text:00000000000154BF                 mov     eax, 1
.text:00000000000154C4                 and     byte ptr [rbx+50h], 0F9h
.text:00000000000154C8                 pop     rbx
.text:00000000000154C9                 pop     rbp
.text:00000000000154CA                 pop     r12
.text:00000000000154CC                 retn
.text:00000000000154CC ; ---------------------------------------------------------------------------
.text:00000000000154CD                 align 10h
.text:00000000000154D0
.text:00000000000154D0 loc_154D0:                              ; CODE XREF: _obstack_begin_worker+A↑j
.text:00000000000154D0                 mov     r12d, 0Fh
.text:00000000000154D6                 mov     ebp, 10h
.text:00000000000154DB                 jmp     short loc_15473
.text:00000000000154DD ; ---------------------------------------------------------------------------
.text:00000000000154DD
.text:00000000000154DD loc_154DD:                              ; CODE XREF: _obstack_begin_worker+35↑j
.text:00000000000154DD                 call    cs:obstack_alloc_failed_handler
.text:00000000000154DD ; } // starts at 15460
.text:00000000000154DD _obstack_begin_worker endp
.text:00000000000154DD
.text:00000000000154DD ; ---------------------------------------------------------------------------
.text:00000000000154E3                 align 10h
.text:00000000000154F0
.text:00000000000154F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000154F0
.text:00000000000154F0
.text:00000000000154F0                 public _obstack_begin
.text:00000000000154F0 _obstack_begin  proc near               ; CODE XREF: main+C26↑p
.text:00000000000154F0                                         ; main+1153↑p ...
.text:00000000000154F0 ; __unwind {
.text:00000000000154F0                 and     byte ptr [rdi+50h], 0FEh
.text:00000000000154F4                 mov     [rdi+38h], rcx
.text:00000000000154F8                 mov     [rdi+40h], r8
.text:00000000000154FC                 jmp     _obstack_begin_worker
.text:00000000000154FC ; } // starts at 154F0
.text:00000000000154FC _obstack_begin  endp
.text:00000000000154FC
.text:00000000000154FC ; ---------------------------------------------------------------------------
.text:0000000000015501                 align 10h
.text:0000000000015510
.text:0000000000015510 ; =============== S U B R O U T I N E =======================================
.text:0000000000015510
.text:0000000000015510
.text:0000000000015510                 public _obstack_begin_1
.text:0000000000015510 _obstack_begin_1 proc near              ; DATA XREF: LOAD:0000000000000D68↑o
.text:0000000000015510 ; __unwind {
.text:0000000000015510                 or      byte ptr [rdi+50h], 1
.text:0000000000015514                 mov     [rdi+38h], rcx
.text:0000000000015518                 mov     [rdi+40h], r8
.text:000000000001551C                 mov     [rdi+48h], r9
.text:0000000000015520                 jmp     _obstack_begin_worker
.text:0000000000015520 ; } // starts at 15510
.text:0000000000015520 _obstack_begin_1 endp
.text:0000000000015520
.text:0000000000015520 ; ---------------------------------------------------------------------------
.text:0000000000015525                 align 10h
.text:0000000000015530
.text:0000000000015530 ; =============== S U B R O U T I N E =======================================
.text:0000000000015530
.text:0000000000015530 ; Attributes: info_from_lumina
.text:0000000000015530
.text:0000000000015530 ; void __fastcall obstack_newchunk(obstack *h, size_t length)
.text:0000000000015530                 public _obstack_newchunk
.text:0000000000015530 _obstack_newchunk proc near             ; CODE XREF: quote_name+36A↑p
.text:0000000000015530                                         ; quote_name+390↑p ...
.text:0000000000015530 ; __unwind {
.text:0000000000015530                 push    r14
.text:0000000000015532                 push    r13
.text:0000000000015534                 xor     edx, edx
.text:0000000000015536                 push    r12
.text:0000000000015538                 push    rbp
.text:0000000000015539                 push    rbx
.text:000000000001553A                 mov     rbx, [rdi+18h]
.text:000000000001553E                 sub     rbx, [rdi+10h]
.text:0000000000015542                 mov     rbp, [rdi+8]
.text:0000000000015546                 add     rsi, rbx
.text:0000000000015549                 mov     rcx, rbx
.text:000000000001554C                 setb    dl
.text:000000000001554F                 add     rsi, [rdi+30h]
.text:0000000000015553                 setb    al
.text:0000000000015556                 shr     rcx, 3
.text:000000000001555A                 cmp     [rdi], rsi
.text:000000000001555D                 lea     r12, [rsi+rcx+64h]
.text:0000000000015562                 cmovnb  rsi, [rdi]
.text:0000000000015566                 cmp     rsi, r12
.text:0000000000015569                 cmovnb  r12, rsi
.text:000000000001556D                 test    rdx, rdx
.text:0000000000015570                 jnz     loc_15615
.text:0000000000015576                 movzx   eax, al
.text:0000000000015579                 test    rax, rax
.text:000000000001557C                 jnz     loc_15615
.text:0000000000015582                 mov     rsi, r12
.text:0000000000015585                 mov     r13, rdi
.text:0000000000015588                 call    call_chunkfun
.text:000000000001558D                 test    rax, rax
.text:0000000000015590                 mov     r14, rax
.text:0000000000015593                 jz      loc_15615
.text:0000000000015599                 lea     rsi, [rax+r12]
.text:000000000001559D                 mov     [r13+8], rax
.text:00000000000155A1                 mov     [rax+8], rbp
.text:00000000000155A5                 mov     rdx, rbx        ; n
.text:00000000000155A8                 mov     [r13+20h], rsi
.text:00000000000155AC                 mov     [rax], rsi
.text:00000000000155AF                 mov     rax, [r13+30h]
.text:00000000000155B3                 mov     rsi, [r13+10h]  ; src
.text:00000000000155B7                 lea     r12, [r14+rax+10h]
.text:00000000000155BC                 not     rax
.text:00000000000155BF                 and     r12, rax
.text:00000000000155C2                 mov     rdi, r12        ; dest
.text:00000000000155C5                 call    _memcpy
.text:00000000000155CA                 test    byte ptr [r13+50h], 2
.text:00000000000155CF                 jnz     short loc_155E6
.text:00000000000155D1                 mov     rax, [r13+30h]
.text:00000000000155D5                 lea     rdx, [rbp+rax+10h]
.text:00000000000155DA                 not     rax
.text:00000000000155DD                 and     rax, rdx
.text:00000000000155E0                 cmp     [r13+10h], rax
.text:00000000000155E4                 jz      short loc_15600
.text:00000000000155E6
.text:00000000000155E6 loc_155E6:                              ; CODE XREF: _obstack_newchunk+9F↑j
.text:00000000000155E6                                         ; _obstack_newchunk+E3↓j
.text:00000000000155E6                 and     byte ptr [r13+50h], 0FDh
.text:00000000000155EB                 add     rbx, r12
.text:00000000000155EE                 mov     [r13+10h], r12
.text:00000000000155F2                 mov     [r13+18h], rbx
.text:00000000000155F6                 pop     rbx
.text:00000000000155F7                 pop     rbp
.text:00000000000155F8                 pop     r12
.text:00000000000155FA                 pop     r13
.text:00000000000155FC                 pop     r14
.text:00000000000155FE                 retn
.text:00000000000155FE ; ---------------------------------------------------------------------------
.text:00000000000155FF                 align 20h
.text:0000000000015600
.text:0000000000015600 loc_15600:                              ; CODE XREF: _obstack_newchunk+B4↑j
.text:0000000000015600                 mov     rax, [rbp+8]
.text:0000000000015604                 mov     rsi, rbp
.text:0000000000015607                 mov     rdi, r13
.text:000000000001560A                 mov     [r14+8], rax
.text:000000000001560E                 call    call_freefun
.text:0000000000015613                 jmp     short loc_155E6
.text:0000000000015615 ; ---------------------------------------------------------------------------
.text:0000000000015615
.text:0000000000015615 loc_15615:                              ; CODE XREF: _obstack_newchunk+40↑j
.text:0000000000015615                                         ; _obstack_newchunk+4C↑j ...
.text:0000000000015615                 call    cs:obstack_alloc_failed_handler
.text:0000000000015615 ; } // starts at 15530
.text:0000000000015615 _obstack_newchunk endp
.text:0000000000015615
.text:0000000000015615 ; ---------------------------------------------------------------------------
.text:000000000001561B                 align 20h
.text:0000000000015620
.text:0000000000015620 ; =============== S U B R O U T I N E =======================================
.text:0000000000015620
.text:0000000000015620 ; Attributes: info_from_lumina
.text:0000000000015620
.text:0000000000015620 ; int __fastcall obstack_allocated_p(obstack_0 *h, void *obj)
.text:0000000000015620                 public _obstack_allocated_p
.text:0000000000015620 _obstack_allocated_p proc near          ; DATA XREF: LOAD:0000000000000D80↑o
.text:0000000000015620 ; __unwind {
.text:0000000000015620                 mov     rax, [rdi+8]
.text:0000000000015624                 test    rax, rax
.text:0000000000015627                 jz      short locret_15656
.text:0000000000015629                 nop     dword ptr [rax+00000000h]
.text:0000000000015630
.text:0000000000015630 loc_15630:                              ; CODE XREF: _obstack_allocated_p+21↓j
.text:0000000000015630                 cmp     rsi, rax
.text:0000000000015633                 jbe     short loc_1563A
.text:0000000000015635                 cmp     [rax], rsi
.text:0000000000015638                 jnb     short loc_15650
.text:000000000001563A
.text:000000000001563A loc_1563A:                              ; CODE XREF: _obstack_allocated_p+13↑j
.text:000000000001563A                 mov     rax, [rax+8]
.text:000000000001563E                 test    rax, rax
.text:0000000000015641                 jnz     short loc_15630
.text:0000000000015643                 xor     eax, eax
.text:0000000000015645                 retn
.text:0000000000015645 ; ---------------------------------------------------------------------------
.text:0000000000015646                 align 10h
.text:0000000000015650
.text:0000000000015650 loc_15650:                              ; CODE XREF: _obstack_allocated_p+18↑j
.text:0000000000015650                 mov     eax, 1
.text:0000000000015655                 retn
.text:0000000000015656 ; ---------------------------------------------------------------------------
.text:0000000000015656
.text:0000000000015656 locret_15656:                           ; CODE XREF: _obstack_allocated_p+7↑j
.text:0000000000015656                 rep retn
.text:0000000000015656 ; } // starts at 15620
.text:0000000000015656 _obstack_allocated_p endp
.text:0000000000015656
.text:0000000000015656 ; ---------------------------------------------------------------------------
.text:0000000000015658                 align 20h
.text:0000000000015660
.text:0000000000015660 ; =============== S U B R O U T I N E =======================================
.text:0000000000015660
.text:0000000000015660 ; Attributes: info_from_lumina
.text:0000000000015660
.text:0000000000015660 ; void obstack_free(struct obstack *obstack, void *block)
.text:0000000000015660                 public _obstack_free
.text:0000000000015660 _obstack_free   proc near               ; DATA XREF: LOAD:0000000000000E70↑o
.text:0000000000015660 ; __unwind {
.text:0000000000015660                 push    r12
.text:0000000000015662                 push    rbp
.text:0000000000015663                 mov     rbp, rsi
.text:0000000000015666                 push    rbx
.text:0000000000015667                 mov     rsi, [rdi+8]
.text:000000000001566B                 mov     rbx, rdi
.text:000000000001566E                 test    rsi, rsi
.text:0000000000015671                 jz      short loc_1569D
.text:0000000000015673                 nop     dword ptr [rax+rax+00h]
.text:0000000000015678
.text:0000000000015678 loc_15678:                              ; CODE XREF: _obstack_free+3B↓j
.text:0000000000015678                 cmp     rsi, rbp
.text:000000000001567B                 jnb     short loc_15685
.text:000000000001567D                 mov     rax, [rsi]
.text:0000000000015680                 cmp     rax, rbp
.text:0000000000015683                 jnb     short loc_156B0
.text:0000000000015685
.text:0000000000015685 loc_15685:                              ; CODE XREF: _obstack_free+1B↑j
.text:0000000000015685                 mov     r12, [rsi+8]
.text:0000000000015689                 mov     rdi, rbx
.text:000000000001568C                 call    call_freefun
.text:0000000000015691                 or      byte ptr [rbx+50h], 2
.text:0000000000015695                 test    r12, r12
.text:0000000000015698                 mov     rsi, r12
.text:000000000001569B                 jnz     short loc_15678
.text:000000000001569D
.text:000000000001569D loc_1569D:                              ; CODE XREF: _obstack_free+11↑j
.text:000000000001569D                 test    rbp, rbp
.text:00000000000156A0                 jnz     short loc_156C5
.text:00000000000156A2                 pop     rbx
.text:00000000000156A3                 pop     rbp
.text:00000000000156A4                 pop     r12
.text:00000000000156A6                 retn
.text:00000000000156A6 ; ---------------------------------------------------------------------------
.text:00000000000156A7                 align 10h
.text:00000000000156B0
.text:00000000000156B0 loc_156B0:                              ; CODE XREF: _obstack_free+23↑j
.text:00000000000156B0                 mov     [rbx+18h], rbp
.text:00000000000156B4                 mov     [rbx+10h], rbp
.text:00000000000156B8                 mov     [rbx+20h], rax
.text:00000000000156BC                 mov     [rbx+8], rsi
.text:00000000000156C0                 pop     rbx
.text:00000000000156C1                 pop     rbp
.text:00000000000156C2                 pop     r12
.text:00000000000156C4                 retn
.text:00000000000156C5 ; ---------------------------------------------------------------------------
.text:00000000000156C5
.text:00000000000156C5 loc_156C5:                              ; CODE XREF: _obstack_free+40↑j
.text:00000000000156C5                 call    _abort
.text:00000000000156C5 ; } // starts at 15660
.text:00000000000156C5 _obstack_free   endp
.text:00000000000156C5
.text:00000000000156C5 ; ---------------------------------------------------------------------------
.text:00000000000156CA                 align 10h
.text:00000000000156D0
.text:00000000000156D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000156D0
.text:00000000000156D0 ; Attributes: info_from_lumina
.text:00000000000156D0
.text:00000000000156D0 ; size_t __fastcall obstack_memory_used(obstack_0 *h)
.text:00000000000156D0                 public _obstack_memory_used
.text:00000000000156D0 _obstack_memory_used proc near          ; DATA XREF: LOAD:0000000000000DE0↑o
.text:00000000000156D0 ; __unwind {
.text:00000000000156D0                 mov     rdx, [rdi+8]
.text:00000000000156D4                 xor     eax, eax
.text:00000000000156D6                 test    rdx, rdx
.text:00000000000156D9                 jz      short locret_156F8
.text:00000000000156DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000156E0
.text:00000000000156E0 loc_156E0:                              ; CODE XREF: _obstack_memory_used+20↓j
.text:00000000000156E0                 mov     rcx, [rdx]
.text:00000000000156E3                 sub     rcx, rdx
.text:00000000000156E6                 mov     rdx, [rdx+8]
.text:00000000000156EA                 add     rax, rcx
.text:00000000000156ED                 test    rdx, rdx
.text:00000000000156F0                 jnz     short loc_156E0
.text:00000000000156F2                 rep retn
.text:00000000000156F2 ; ---------------------------------------------------------------------------
.text:00000000000156F4                 align 8
.text:00000000000156F8
.text:00000000000156F8 locret_156F8:                           ; CODE XREF: _obstack_memory_used+9↑j
.text:00000000000156F8                 rep retn
.text:00000000000156F8 ; } // starts at 156D0
.text:00000000000156F8 _obstack_memory_used endp
.text:00000000000156F8
.text:00000000000156F8 ; ---------------------------------------------------------------------------
.text:00000000000156FA                 align 20h
.text:0000000000015700
.text:0000000000015700 ; =============== S U B R O U T I N E =======================================
.text:0000000000015700
.text:0000000000015700 ; Attributes: info_from_lumina
.text:0000000000015700
.text:0000000000015700 ; int __fastcall setenv_TZ(const char *tz)
.text:0000000000015700 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_15784↓p
.text:0000000000015700                                         ; set_tz:loc_159D5↓p
.text:0000000000015700 ; __unwind {
.text:0000000000015700                 test    rdi, rdi
.text:0000000000015703                 jz      short loc_15720
.text:0000000000015705                 mov     rsi, rdi        ; value
.text:0000000000015708                 lea     rdi, aTz        ; "TZ"
.text:000000000001570F                 mov     edx, 1          ; replace
.text:0000000000015714                 jmp     _setenv
.text:0000000000015714 ; ---------------------------------------------------------------------------
.text:0000000000015719                 align 20h
.text:0000000000015720
.text:0000000000015720 loc_15720:                              ; CODE XREF: setenv_TZ+3↑j
.text:0000000000015720                 lea     rdi, aTz        ; "TZ"
.text:0000000000015727                 jmp     _unsetenv
.text:0000000000015727 ; } // starts at 15700
.text:0000000000015727 setenv_TZ       endp
.text:0000000000015727
.text:0000000000015727 ; ---------------------------------------------------------------------------
.text:000000000001572C                 align 10h
.text:0000000000015730
.text:0000000000015730 ; =============== S U B R O U T I N E =======================================
.text:0000000000015730
.text:0000000000015730 ; Attributes: info_from_lumina
.text:0000000000015730
.text:0000000000015730 ; void __fastcall tzfree_0(timezone_t tz)
.text:0000000000015730 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:0000000000015730                                         ; set_tz+67↓p ...
.text:0000000000015730 ; __unwind {
.text:0000000000015730                 test    rdi, rdi
.text:0000000000015733                 jz      short locret_15758
.text:0000000000015735                 push    rbx
.text:0000000000015736                 db      2Eh
.text:0000000000015736                 nop     word ptr [rax+rax+00000000h]
.text:0000000000015740
.text:0000000000015740 loc_15740:                              ; CODE XREF: tzfree_0+1E↓j
.text:0000000000015740                 mov     rbx, [rdi]
.text:0000000000015743                 call    free
.text:0000000000015748                 test    rbx, rbx
.text:000000000001574B                 mov     rdi, rbx
.text:000000000001574E                 jnz     short loc_15740
.text:0000000000015750                 pop     rbx
.text:0000000000015751                 retn
.text:0000000000015751 ; ---------------------------------------------------------------------------
.text:0000000000015752                 align 8
.text:0000000000015758
.text:0000000000015758 locret_15758:                           ; CODE XREF: tzfree_0+3↑j
.text:0000000000015758                 rep retn
.text:0000000000015758 ; } // starts at 15730
.text:0000000000015758 tzfree_0        endp
.text:0000000000015758
.text:0000000000015758 ; ---------------------------------------------------------------------------
.text:000000000001575A                 align 20h
.text:0000000000015760
.text:0000000000015760 ; =============== S U B R O U T I N E =======================================
.text:0000000000015760
.text:0000000000015760 ; Attributes: info_from_lumina
.text:0000000000015760
.text:0000000000015760 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:0000000000015760 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:0000000000015760                                         ; localtime_rz+98↓p ...
.text:0000000000015760 ; __unwind {
.text:0000000000015760                 push    r13
.text:0000000000015762                 push    r12
.text:0000000000015764                 push    rbp
.text:0000000000015765                 push    rbx
.text:0000000000015766                 mov     rbp, rdi
.text:0000000000015769                 sub     rsp, 8
.text:000000000001576D                 call    ___errno_location
.text:0000000000015772                 cmp     byte ptr [rbp+8], 0
.text:0000000000015776                 mov     rbx, rax
.text:0000000000015779                 mov     r12d, [rax]
.text:000000000001577C                 lea     rdi, [rbp+9]
.text:0000000000015780                 jnz     short loc_15784
.text:0000000000015782                 xor     edi, edi        ; value
.text:0000000000015784
.text:0000000000015784 loc_15784:                              ; CODE XREF: revert_tz+20↑j
.text:0000000000015784                 call    setenv_TZ
.text:0000000000015789                 test    eax, eax
.text:000000000001578B                 jz      short loc_157B0
.text:000000000001578D                 mov     r12d, [rbx]
.text:0000000000015790                 xor     r13d, r13d
.text:0000000000015793
.text:0000000000015793 loc_15793:                              ; CODE XREF: revert_tz+5B↓j
.text:0000000000015793                 mov     rdi, rbp
.text:0000000000015796                 call    tzfree_0
.text:000000000001579B                 mov     [rbx], r12d
.text:000000000001579E                 add     rsp, 8
.text:00000000000157A2                 mov     eax, r13d
.text:00000000000157A5                 pop     rbx
.text:00000000000157A6                 pop     rbp
.text:00000000000157A7                 pop     r12
.text:00000000000157A9                 pop     r13
.text:00000000000157AB                 retn
.text:00000000000157AB ; ---------------------------------------------------------------------------
.text:00000000000157AC                 align 10h
.text:00000000000157B0
.text:00000000000157B0 loc_157B0:                              ; CODE XREF: revert_tz+2B↑j
.text:00000000000157B0                 call    _tzset
.text:00000000000157B5                 mov     r13d, 1
.text:00000000000157BB                 jmp     short loc_15793
.text:00000000000157BB ; } // starts at 15760
.text:00000000000157BB revert_tz       endp
.text:00000000000157BB
.text:00000000000157BB ; ---------------------------------------------------------------------------
.text:00000000000157BD                 align 20h
.text:00000000000157C0
.text:00000000000157C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000157C0
.text:00000000000157C0 ; Attributes: info_from_lumina
.text:00000000000157C0
.text:00000000000157C0 ; timezone_t __fastcall tzalloc(const char *name)
.text:00000000000157C0                 public tzalloc
.text:00000000000157C0 tzalloc         proc near               ; CODE XREF: main+C3A↑p
.text:00000000000157C0                                         ; save_abbr+EC↓p ...
.text:00000000000157C0 ; __unwind {
.text:00000000000157C0                 test    rdi, rdi
.text:00000000000157C3                 push    r12
.text:00000000000157C5                 push    rbp
.text:00000000000157C6                 push    rbx
.text:00000000000157C7                 jz      short loc_15828
.text:00000000000157C9                 mov     r12, rdi
.text:00000000000157CC                 call    _strlen
.text:00000000000157D1                 lea     rbp, [rax+1]
.text:00000000000157D5                 mov     edi, 76h ; 'v'
.text:00000000000157DA                 cmp     rbp, 76h ; 'v'
.text:00000000000157DE                 cmovnb  rdi, rbp
.text:00000000000157E2                 add     rdi, 11h
.text:00000000000157E6                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:00000000000157EA                 call    malloc
.text:00000000000157EF                 test    rax, rax
.text:00000000000157F2                 mov     rbx, rax
.text:00000000000157F5                 jz      short loc_1581B
.text:00000000000157F7                 mov     qword ptr [rax], 0
.text:00000000000157FE                 lea     rdi, [rbx+9]    ; dest
.text:0000000000015802                 mov     eax, 1
.text:0000000000015807                 mov     [rbx+8], ax
.text:000000000001580B                 mov     rdx, rbp        ; n
.text:000000000001580E                 mov     rsi, r12        ; src
.text:0000000000015811                 call    _memcpy
.text:0000000000015816                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000001581B
.text:000000000001581B loc_1581B:                              ; CODE XREF: tzalloc+35↑j
.text:000000000001581B                                         ; tzalloc+78↓j
.text:000000000001581B                 mov     rax, rbx
.text:000000000001581E                 pop     rbx
.text:000000000001581F                 pop     rbp
.text:0000000000015820                 pop     r12
.text:0000000000015822                 retn
.text:0000000000015822 ; ---------------------------------------------------------------------------
.text:0000000000015823                 align 8
.text:0000000000015828
.text:0000000000015828 loc_15828:                              ; CODE XREF: tzalloc+7↑j
.text:0000000000015828                 mov     edi, 80h        ; size
.text:000000000001582D                 call    malloc
.text:0000000000015832                 test    rax, rax
.text:0000000000015835                 mov     rbx, rax
.text:0000000000015838                 jz      short loc_1581B
.text:000000000001583A                 xor     edx, edx
.text:000000000001583C                 mov     qword ptr [rbx], 0
.text:0000000000015843                 mov     rax, rbx
.text:0000000000015846                 mov     [rbx+8], dx
.text:000000000001584A                 pop     rbx
.text:000000000001584B                 pop     rbp
.text:000000000001584C                 pop     r12
.text:000000000001584E                 retn
.text:000000000001584E ; } // starts at 157C0
.text:000000000001584E tzalloc         endp
.text:000000000001584E
.text:000000000001584E ; ---------------------------------------------------------------------------
.text:000000000001584F                 align 10h
.text:0000000000015850
.text:0000000000015850 ; =============== S U B R O U T I N E =======================================
.text:0000000000015850
.text:0000000000015850 ; Attributes: info_from_lumina
.text:0000000000015850
.text:0000000000015850 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:0000000000015850 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:0000000000015850                                         ; mktime_z+51↓p
.text:0000000000015850 ; __unwind {
.text:0000000000015850                 push    r15
.text:0000000000015852                 push    r14
.text:0000000000015854                 mov     eax, 1
.text:0000000000015859                 push    r13
.text:000000000001585B                 push    r12
.text:000000000001585D                 push    rbp
.text:000000000001585E                 push    rbx
.text:000000000001585F                 sub     rsp, 8
.text:0000000000015863                 mov     rbp, [rsi+30h]
.text:0000000000015867                 test    rbp, rbp
.text:000000000001586A                 jz      loc_15900
.text:0000000000015870                 cmp     rsi, rbp
.text:0000000000015873                 mov     r12, rdi
.text:0000000000015876                 mov     r13, rsi
.text:0000000000015879                 ja      short loc_15884
.text:000000000001587B                 lea     rdx, [rsi+38h]
.text:000000000001587F                 cmp     rbp, rdx
.text:0000000000015882                 jb      short loc_15900
.text:0000000000015884
.text:0000000000015884 loc_15884:                              ; CODE XREF: save_abbr+29↑j
.text:0000000000015884                 cmp     byte ptr [rbp+0], 0
.text:0000000000015888                 lea     rbx, [r12+9]
.text:000000000001588D                 jz      short loc_158F0
.text:000000000001588F                 nop
.text:0000000000015890
.text:0000000000015890 loc_15890:                              ; CODE XREF: save_abbr+76↓j
.text:0000000000015890                                         ; save_abbr+7F↓j
.text:0000000000015890                 mov     rsi, rbp        ; s2
.text:0000000000015893                 mov     rdi, rbx        ; s1
.text:0000000000015896                 call    _strcmp
.text:000000000001589B                 test    eax, eax
.text:000000000001589D                 jz      short loc_158F7
.text:000000000001589F
.text:000000000001589F loc_1589F:                              ; CODE XREF: save_abbr+95↓j
.text:000000000001589F                 cmp     byte ptr [rbx], 0
.text:00000000000158A2                 jnz     short loc_158B6
.text:00000000000158A4                 lea     r14, [r12+9]
.text:00000000000158A9                 cmp     r14, rbx
.text:00000000000158AC                 jnz     short loc_15910
.text:00000000000158AE                 cmp     byte ptr [r12+8], 0
.text:00000000000158B4                 jz      short loc_15910
.text:00000000000158B6
.text:00000000000158B6 loc_158B6:                              ; CODE XREF: save_abbr+52↑j
.text:00000000000158B6                 mov     rdi, rbx        ; s
.text:00000000000158B9                 call    _strlen
.text:00000000000158BE                 lea     rbx, [rbx+rax+1]
.text:00000000000158C3                 cmp     byte ptr [rbx], 0
.text:00000000000158C6                 jnz     short loc_15890
.text:00000000000158C8                 mov     rax, [r12]
.text:00000000000158CC                 test    rax, rax
.text:00000000000158CF                 jz      short loc_15890
.text:00000000000158D1                 lea     rbx, [rax+9]
.text:00000000000158D5                 mov     rsi, rbp        ; s2
.text:00000000000158D8                 mov     r12, rax
.text:00000000000158DB                 mov     rdi, rbx        ; s1
.text:00000000000158DE                 call    _strcmp
.text:00000000000158E3                 test    eax, eax
.text:00000000000158E5                 jnz     short loc_1589F
.text:00000000000158E7                 jmp     short loc_158F7
.text:00000000000158E7 ; ---------------------------------------------------------------------------
.text:00000000000158E9                 align 10h
.text:00000000000158F0
.text:00000000000158F0 loc_158F0:                              ; CODE XREF: save_abbr+3D↑j
.text:00000000000158F0                 lea     rbx, a8+6       ; ""
.text:00000000000158F7
.text:00000000000158F7 loc_158F7:                              ; CODE XREF: save_abbr+4D↑j
.text:00000000000158F7                                         ; save_abbr+97↑j ...
.text:00000000000158F7                 mov     [r13+30h], rbx
.text:00000000000158FB                 mov     eax, 1
.text:0000000000015900
.text:0000000000015900 loc_15900:                              ; CODE XREF: save_abbr+1A↑j
.text:0000000000015900                                         ; save_abbr+32↑j ...
.text:0000000000015900                 add     rsp, 8
.text:0000000000015904                 pop     rbx
.text:0000000000015905                 pop     rbp
.text:0000000000015906                 pop     r12
.text:0000000000015908                 pop     r13
.text:000000000001590A                 pop     r14
.text:000000000001590C                 pop     r15
.text:000000000001590E                 retn
.text:000000000001590E ; ---------------------------------------------------------------------------
.text:000000000001590F                 align 10h
.text:0000000000015910
.text:0000000000015910 loc_15910:                              ; CODE XREF: save_abbr+5C↑j
.text:0000000000015910                                         ; save_abbr+64↑j
.text:0000000000015910                 mov     rdi, rbp        ; s
.text:0000000000015913                 call    _strlen
.text:0000000000015918                 lea     rdx, [rax+1]    ; n
.text:000000000001591C                 mov     r15, rax
.text:000000000001591F                 mov     rax, rbx
.text:0000000000015922                 sub     rax, r14
.text:0000000000015925                 mov     rcx, rax
.text:0000000000015928                 not     rcx
.text:000000000001592B                 cmp     rcx, rdx
.text:000000000001592E                 jb      short loc_15960
.text:0000000000015930                 add     rax, rdx
.text:0000000000015933                 cmp     rax, 76h ; 'v'
.text:0000000000015937                 jbe     short loc_15970
.text:0000000000015939                 mov     rdi, rbp        ; src
.text:000000000001593C                 call    tzalloc
.text:0000000000015941                 mov     rbx, rax
.text:0000000000015944                 mov     [r12], rax
.text:0000000000015948                 xor     eax, eax
.text:000000000001594A                 test    rbx, rbx
.text:000000000001594D                 jz      short loc_15900
.text:000000000001594F                 mov     byte ptr [rbx+8], 0
.text:0000000000015953                 add     rbx, 9
.text:0000000000015957                 jmp     short loc_158F7
.text:0000000000015957 ; ---------------------------------------------------------------------------
.text:0000000000015959                 align 20h
.text:0000000000015960
.text:0000000000015960 loc_15960:                              ; CODE XREF: save_abbr+DE↑j
.text:0000000000015960                 call    ___errno_location
.text:0000000000015965                 mov     dword ptr [rax], 0Ch
.text:000000000001596B                 xor     eax, eax
.text:000000000001596D                 jmp     short loc_15900
.text:000000000001596D ; ---------------------------------------------------------------------------
.text:000000000001596F                 align 10h
.text:0000000000015970
.text:0000000000015970 loc_15970:                              ; CODE XREF: save_abbr+E7↑j
.text:0000000000015970                 mov     rsi, rbp        ; src
.text:0000000000015973                 mov     rdi, rbx        ; dest
.text:0000000000015976                 call    _memcpy
.text:000000000001597B                 mov     byte ptr [rbx+r15+1], 0
.text:0000000000015981                 jmp     loc_158F7
.text:0000000000015981 ; } // starts at 15850
.text:0000000000015981 save_abbr       endp
.text:0000000000015981
.text:0000000000015981 ; ---------------------------------------------------------------------------
.text:0000000000015986                 align 10h
.text:0000000000015990
.text:0000000000015990 ; =============== S U B R O U T I N E =======================================
.text:0000000000015990
.text:0000000000015990 ; Attributes: info_from_lumina
.text:0000000000015990
.text:0000000000015990 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:0000000000015990 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:0000000000015990                                         ; mktime_z+27↓p
.text:0000000000015990
.text:0000000000015990 var_20          = qword ptr -20h
.text:0000000000015990
.text:0000000000015990 ; __unwind {
.text:0000000000015990                 push    r12
.text:0000000000015992                 push    rbp
.text:0000000000015993                 mov     rbp, rdi
.text:0000000000015996                 push    rbx
.text:0000000000015997                 lea     rdi, aTz        ; "TZ"
.text:000000000001599E                 sub     rsp, 10h
.text:00000000000159A2                 call    _getenv
.text:00000000000159A7                 test    rax, rax
.text:00000000000159AA                 mov     rbx, rax
.text:00000000000159AD                 jz      loc_15A48
.text:00000000000159B3                 cmp     byte ptr [rbp+8], 0
.text:00000000000159B7                 jnz     short loc_15A20
.text:00000000000159B9
.text:00000000000159B9 loc_159B9:                              ; CODE XREF: set_tz+A4↓j
.text:00000000000159B9                                         ; set_tz+C2↓j
.text:00000000000159B9                 mov     rdi, rbx        ; src
.text:00000000000159BC                 call    tzalloc
.text:00000000000159C1                 test    rax, rax
.text:00000000000159C4                 mov     r12, rax
.text:00000000000159C7                 jz      short loc_15A0D
.text:00000000000159C9                 xor     edi, edi
.text:00000000000159CB                 cmp     byte ptr [rbp+8], 0
.text:00000000000159CF                 jz      short loc_159D5
.text:00000000000159D1                 lea     rdi, [rbp+9]    ; value
.text:00000000000159D5
.text:00000000000159D5 loc_159D5:                              ; CODE XREF: set_tz+3F↑j
.text:00000000000159D5                 call    setenv_TZ
.text:00000000000159DA                 test    eax, eax
.text:00000000000159DC                 jz      loc_15A68
.text:00000000000159E2                 call    ___errno_location
.text:00000000000159E7                 cmp     r12, 1
.text:00000000000159EB                 mov     ebx, [rax]
.text:00000000000159ED                 jz      short loc_15A08
.text:00000000000159EF                 mov     rdi, r12
.text:00000000000159F2                 mov     [rsp+28h+var_20], rax
.text:00000000000159F7                 call    tzfree_0
.text:00000000000159FC                 mov     rax, [rsp+28h+var_20]
.text:0000000000015A01                 nop     dword ptr [rax+00000000h]
.text:0000000000015A08
.text:0000000000015A08 loc_15A08:                              ; CODE XREF: set_tz+5D↑j
.text:0000000000015A08                 mov     [rax], ebx
.text:0000000000015A0A                 xor     r12d, r12d
.text:0000000000015A0D
.text:0000000000015A0D loc_15A0D:                              ; CODE XREF: set_tz+37↑j
.text:0000000000015A0D                                         ; set_tz+DD↓j
.text:0000000000015A0D                 add     rsp, 10h
.text:0000000000015A11                 mov     rax, r12
.text:0000000000015A14                 pop     rbx
.text:0000000000015A15                 pop     rbp
.text:0000000000015A16                 pop     r12
.text:0000000000015A18                 retn
.text:0000000000015A18 ; ---------------------------------------------------------------------------
.text:0000000000015A19                 align 20h
.text:0000000000015A20
.text:0000000000015A20 loc_15A20:                              ; CODE XREF: set_tz+27↑j
.text:0000000000015A20                 lea     rdi, [rbp+9]    ; s1
.text:0000000000015A24                 mov     rsi, rax        ; s2
.text:0000000000015A27                 mov     r12d, 1
.text:0000000000015A2D                 call    _strcmp
.text:0000000000015A32                 test    eax, eax
.text:0000000000015A34                 jnz     short loc_159B9
.text:0000000000015A36                 add     rsp, 10h
.text:0000000000015A3A                 mov     rax, r12
.text:0000000000015A3D                 pop     rbx
.text:0000000000015A3E                 pop     rbp
.text:0000000000015A3F                 pop     r12
.text:0000000000015A41                 retn
.text:0000000000015A41 ; ---------------------------------------------------------------------------
.text:0000000000015A42                 align 8
.text:0000000000015A48
.text:0000000000015A48 loc_15A48:                              ; CODE XREF: set_tz+1D↑j
.text:0000000000015A48                 cmp     byte ptr [rbp+8], 0
.text:0000000000015A4C                 mov     r12d, 1
.text:0000000000015A52                 jnz     loc_159B9
.text:0000000000015A58                 add     rsp, 10h
.text:0000000000015A5C                 mov     rax, r12
.text:0000000000015A5F                 pop     rbx
.text:0000000000015A60                 pop     rbp
.text:0000000000015A61                 pop     r12
.text:0000000000015A63                 retn
.text:0000000000015A63 ; ---------------------------------------------------------------------------
.text:0000000000015A64                 align 8
.text:0000000000015A68
.text:0000000000015A68 loc_15A68:                              ; CODE XREF: set_tz+4C↑j
.text:0000000000015A68                 call    _tzset
.text:0000000000015A6D                 jmp     short loc_15A0D
.text:0000000000015A6D ; } // starts at 15990
.text:0000000000015A6D set_tz          endp
.text:0000000000015A6D
.text:0000000000015A6D ; ---------------------------------------------------------------------------
.text:0000000000015A6F                 align 10h
.text:0000000000015A70
.text:0000000000015A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000015A70
.text:0000000000015A70
.text:0000000000015A70                 public tzfree
.text:0000000000015A70 tzfree          proc near
.text:0000000000015A70 ; __unwind {
.text:0000000000015A70                 cmp     rdi, 1
.text:0000000000015A74                 jz      short locret_15A7B
.text:0000000000015A76                 jmp     tzfree_0
.text:0000000000015A7B ; ---------------------------------------------------------------------------
.text:0000000000015A7B
.text:0000000000015A7B locret_15A7B:                           ; CODE XREF: tzfree+4↑j
.text:0000000000015A7B                 retn
.text:0000000000015A7B ; } // starts at 15A70
.text:0000000000015A7B tzfree          endp
.text:0000000000015A7B
.text:0000000000015A7B ; ---------------------------------------------------------------------------
.text:0000000000015A7C                 align 20h
.text:0000000000015A80
.text:0000000000015A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000015A80
.text:0000000000015A80 ; Attributes: info_from_lumina
.text:0000000000015A80
.text:0000000000015A80 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:0000000000015A80                 public localtime_rz
.text:0000000000015A80 localtime_rz    proc near               ; CODE XREF: print_long_format+574↑p
.text:0000000000015A80                                         ; print_long_format+90D↑p
.text:0000000000015A80 ; __unwind {
.text:0000000000015A80                 push    r13
.text:0000000000015A82                 push    r12
.text:0000000000015A84                 push    rbp
.text:0000000000015A85                 push    rbx
.text:0000000000015A86                 mov     rbp, rsi
.text:0000000000015A89                 sub     rsp, 8
.text:0000000000015A8D                 test    rdi, rdi
.text:0000000000015A90                 jz      short loc_15B00
.text:0000000000015A92                 mov     r13, rdx
.text:0000000000015A95                 mov     rbx, rdi
.text:0000000000015A98                 call    set_tz
.text:0000000000015A9D                 test    rax, rax
.text:0000000000015AA0                 mov     r12, rax
.text:0000000000015AA3                 jz      short loc_15AEE
.text:0000000000015AA5                 mov     rsi, r13        ; tp
.text:0000000000015AA8                 mov     rdi, rbp        ; timer
.text:0000000000015AAB                 call    _localtime_r
.text:0000000000015AB0                 test    rax, rax
.text:0000000000015AB3                 jz      short loc_15AE0
.text:0000000000015AB5                 mov     rsi, r13
.text:0000000000015AB8                 mov     rdi, rbx
.text:0000000000015ABB                 call    save_abbr
.text:0000000000015AC0                 test    al, al
.text:0000000000015AC2                 jz      short loc_15AE0
.text:0000000000015AC4                 cmp     r12, 1
.text:0000000000015AC8                 jnz     short loc_15B15
.text:0000000000015ACA
.text:0000000000015ACA loc_15ACA:                              ; CODE XREF: localtime_rz+9F↓j
.text:0000000000015ACA                 add     rsp, 8
.text:0000000000015ACE                 mov     rax, r13
.text:0000000000015AD1                 pop     rbx
.text:0000000000015AD2                 pop     rbp
.text:0000000000015AD3                 pop     r12
.text:0000000000015AD5                 pop     r13
.text:0000000000015AD7                 retn
.text:0000000000015AD7 ; ---------------------------------------------------------------------------
.text:0000000000015AD8                 align 20h
.text:0000000000015AE0
.text:0000000000015AE0 loc_15AE0:                              ; CODE XREF: localtime_rz+33↑j
.text:0000000000015AE0                                         ; localtime_rz+42↑j
.text:0000000000015AE0                 cmp     r12, 1
.text:0000000000015AE4                 jz      short loc_15AEE
.text:0000000000015AE6                 mov     rdi, r12
.text:0000000000015AE9                 call    revert_tz
.text:0000000000015AEE
.text:0000000000015AEE loc_15AEE:                              ; CODE XREF: localtime_rz+23↑j
.text:0000000000015AEE                                         ; localtime_rz+64↑j ...
.text:0000000000015AEE                 add     rsp, 8
.text:0000000000015AF2                 xor     eax, eax
.text:0000000000015AF4                 pop     rbx
.text:0000000000015AF5                 pop     rbp
.text:0000000000015AF6                 pop     r12
.text:0000000000015AF8                 pop     r13
.text:0000000000015AFA                 retn
.text:0000000000015AFA ; ---------------------------------------------------------------------------
.text:0000000000015AFB                 align 20h
.text:0000000000015B00
.text:0000000000015B00 loc_15B00:                              ; CODE XREF: localtime_rz+10↑j
.text:0000000000015B00                 add     rsp, 8
.text:0000000000015B04                 mov     rdi, rbp        ; timer
.text:0000000000015B07                 mov     rsi, rdx        ; tp
.text:0000000000015B0A                 pop     rbx
.text:0000000000015B0B                 pop     rbp
.text:0000000000015B0C                 pop     r12
.text:0000000000015B0E                 pop     r13
.text:0000000000015B10                 jmp     _gmtime_r
.text:0000000000015B15 ; ---------------------------------------------------------------------------
.text:0000000000015B15
.text:0000000000015B15 loc_15B15:                              ; CODE XREF: localtime_rz+48↑j
.text:0000000000015B15                 mov     rdi, r12
.text:0000000000015B18                 call    revert_tz
.text:0000000000015B1D                 test    al, al
.text:0000000000015B1F                 jnz     short loc_15ACA
.text:0000000000015B21                 jmp     short loc_15AEE
.text:0000000000015B21 ; } // starts at 15A80
.text:0000000000015B21 localtime_rz    endp
.text:0000000000015B21
.text:0000000000015B21 ; ---------------------------------------------------------------------------
.text:0000000000015B23                 align 10h
.text:0000000000015B30
.text:0000000000015B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000015B30
.text:0000000000015B30 ; Attributes: info_from_lumina
.text:0000000000015B30
.text:0000000000015B30 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:0000000000015B30                 public mktime_z
.text:0000000000015B30 mktime_z        proc near               ; CODE XREF: __strftime_internal+DB2↑p
.text:0000000000015B30
.text:0000000000015B30 timer           = qword ptr -60h
.text:0000000000015B30 tp              = tm ptr -58h
.text:0000000000015B30 var_20          = qword ptr -20h
.text:0000000000015B30
.text:0000000000015B30 ; __unwind {
.text:0000000000015B30                 push    r12
.text:0000000000015B32                 push    rbp
.text:0000000000015B33                 push    rbx
.text:0000000000015B34                 mov     rbx, rsi
.text:0000000000015B37                 sub     rsp, 50h
.text:0000000000015B3B                 mov     rax, fs:28h
.text:0000000000015B44                 mov     [rsp+68h+var_20], rax
.text:0000000000015B49                 xor     eax, eax
.text:0000000000015B4B                 test    rdi, rdi
.text:0000000000015B4E                 jz      loc_15C50
.text:0000000000015B54                 mov     rbp, rdi
.text:0000000000015B57                 call    set_tz
.text:0000000000015B5C                 test    rax, rax
.text:0000000000015B5F                 mov     r12, rax
.text:0000000000015B62                 jz      loc_15C60
.text:0000000000015B68                 mov     rdi, rbx        ; tp
.text:0000000000015B6B                 call    _mktime
.text:0000000000015B70                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015B74                 mov     [rsp+68h+timer], rax
.text:0000000000015B79                 jz      short loc_15BD0
.text:0000000000015B7B
.text:0000000000015B7B loc_15B7B:                              ; CODE XREF: mktime_z+10D↓j
.text:0000000000015B7B                 mov     rsi, rbx
.text:0000000000015B7E                 mov     rdi, rbp
.text:0000000000015B81                 call    save_abbr
.text:0000000000015B86                 test    al, al
.text:0000000000015B88                 jnz     short loc_15B93
.text:0000000000015B8A                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:0000000000015B93
.text:0000000000015B93 loc_15B93:                              ; CODE XREF: mktime_z+58↑j
.text:0000000000015B93                                         ; mktime_z+B2↓j ...
.text:0000000000015B93                 cmp     r12, 1
.text:0000000000015B97                 jz      short loc_15BA9
.text:0000000000015B99                 mov     rdi, r12
.text:0000000000015B9C                 call    revert_tz
.text:0000000000015BA1                 test    al, al
.text:0000000000015BA3                 jz      loc_15C60
.text:0000000000015BA9
.text:0000000000015BA9 loc_15BA9:                              ; CODE XREF: mktime_z+67↑j
.text:0000000000015BA9                 mov     rax, [rsp+68h+timer]
.text:0000000000015BAE
.text:0000000000015BAE loc_15BAE:                              ; CODE XREF: mktime_z+128↓j
.text:0000000000015BAE                                         ; mktime_z+137↓j
.text:0000000000015BAE                 mov     rcx, [rsp+68h+var_20]
.text:0000000000015BB3                 xor     rcx, fs:28h
.text:0000000000015BBC                 jnz     loc_15C6C
.text:0000000000015BC2                 add     rsp, 50h
.text:0000000000015BC6                 pop     rbx
.text:0000000000015BC7                 pop     rbp
.text:0000000000015BC8                 pop     r12
.text:0000000000015BCA                 retn
.text:0000000000015BCA ; ---------------------------------------------------------------------------
.text:0000000000015BCB                 align 10h
.text:0000000000015BD0
.text:0000000000015BD0 loc_15BD0:                              ; CODE XREF: mktime_z+49↑j
.text:0000000000015BD0                 lea     rsi, [rsp+68h+tp] ; tp
.text:0000000000015BD5                 lea     rdi, [rsp+68h+timer] ; timer
.text:0000000000015BDA                 call    _localtime_r
.text:0000000000015BDF                 test    rax, rax
.text:0000000000015BE2                 jz      short loc_15B93
.text:0000000000015BE4                 mov     eax, [rbx]
.text:0000000000015BE6                 mov     edx, [rbx+4]
.text:0000000000015BE9                 xor     eax, [rsp+68h+tp.tm_sec]
.text:0000000000015BED                 xor     edx, [rsp+68h+tp.tm_min]
.text:0000000000015BF1                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:0000000000015BF5                 or      eax, edx
.text:0000000000015BF7                 mov     edx, [rbx+8]
.text:0000000000015BFA                 xor     edx, [rsp+68h+tp.tm_hour]
.text:0000000000015BFE                 or      eax, edx
.text:0000000000015C00                 mov     edx, [rbx+0Ch]
.text:0000000000015C03                 xor     edx, [rsp+68h+tp.tm_mday]
.text:0000000000015C07                 or      eax, edx
.text:0000000000015C09                 mov     edx, [rbx+10h]
.text:0000000000015C0C                 xor     edx, [rsp+68h+tp.tm_mon]
.text:0000000000015C10                 or      eax, edx
.text:0000000000015C12                 mov     edx, [rbx+14h]
.text:0000000000015C15                 xor     edx, [rsp+68h+tp.tm_year]
.text:0000000000015C19                 or      eax, edx
.text:0000000000015C1B                 mov     edx, [rbx+20h]
.text:0000000000015C1E                 test    edx, edx
.text:0000000000015C20                 setz    dil
.text:0000000000015C24                 test    ecx, ecx
.text:0000000000015C26                 setz    sil
.text:0000000000015C2A                 cmp     dil, sil
.text:0000000000015C2D                 jz      short loc_15C3B
.text:0000000000015C2F                 test    edx, edx
.text:0000000000015C31                 js      short loc_15C3B
.text:0000000000015C33                 test    ecx, ecx
.text:0000000000015C35                 jns     loc_15B93
.text:0000000000015C3B
.text:0000000000015C3B loc_15C3B:                              ; CODE XREF: mktime_z+FD↑j
.text:0000000000015C3B                                         ; mktime_z+101↑j
.text:0000000000015C3B                 test    eax, eax
.text:0000000000015C3D                 jz      loc_15B7B
.text:0000000000015C43                 jmp     loc_15B93
.text:0000000000015C43 ; ---------------------------------------------------------------------------
.text:0000000000015C48                 align 10h
.text:0000000000015C50
.text:0000000000015C50 loc_15C50:                              ; CODE XREF: mktime_z+1E↑j
.text:0000000000015C50                 mov     rdi, rsi        ; tp
.text:0000000000015C53                 call    _timegm
.text:0000000000015C58                 jmp     loc_15BAE
.text:0000000000015C58 ; ---------------------------------------------------------------------------
.text:0000000000015C5D                 align 20h
.text:0000000000015C60
.text:0000000000015C60 loc_15C60:                              ; CODE XREF: mktime_z+32↑j
.text:0000000000015C60                                         ; mktime_z+73↑j
.text:0000000000015C60                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015C67                 jmp     loc_15BAE
.text:0000000000015C6C ; ---------------------------------------------------------------------------
.text:0000000000015C6C
.text:0000000000015C6C loc_15C6C:                              ; CODE XREF: mktime_z+8C↑j
.text:0000000000015C6C                 call    ___stack_chk_fail
.text:0000000000015C6C ; } // starts at 15B30
.text:0000000000015C6C mktime_z        endp
.text:0000000000015C6C
.text:0000000000015C6C ; ---------------------------------------------------------------------------
.text:0000000000015C71                 align 20h
.text:0000000000015C80
.text:0000000000015C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000015C80
.text:0000000000015C80 ; Attributes: info_from_lumina
.text:0000000000015C80
.text:0000000000015C80 ; int __fastcall close_stream(FILE *stream)
.text:0000000000015C80                 public close_stream
.text:0000000000015C80 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000015C80                                         ; close_stdout+33↑p
.text:0000000000015C80 ; __unwind {
.text:0000000000015C80                 push    r12
.text:0000000000015C82                 push    rbp
.text:0000000000015C83                 mov     rbp, rdi
.text:0000000000015C86                 push    rbx
.text:0000000000015C87                 call    ___fpending
.text:0000000000015C8C                 mov     ebx, [rbp+0]
.text:0000000000015C8F                 mov     rdi, rbp        ; stream
.text:0000000000015C92                 mov     r12, rax
.text:0000000000015C95                 call    rpl_fclose
.text:0000000000015C9A                 and     ebx, 20h
.text:0000000000015C9D                 test    ebx, ebx
.text:0000000000015C9F                 jnz     short loc_15CB8
.text:0000000000015CA1                 test    eax, eax
.text:0000000000015CA3                 jz      short loc_15CAF
.text:0000000000015CA5                 test    r12, r12
.text:0000000000015CA8                 mov     eax, 0FFFFFFFFh
.text:0000000000015CAD                 jz      short loc_15CE8
.text:0000000000015CAF
.text:0000000000015CAF loc_15CAF:                              ; CODE XREF: close_stream+23↑j
.text:0000000000015CAF                 pop     rbx
.text:0000000000015CB0                 pop     rbp
.text:0000000000015CB1                 pop     r12
.text:0000000000015CB3                 retn
.text:0000000000015CB3 ; ---------------------------------------------------------------------------
.text:0000000000015CB4                 align 8
.text:0000000000015CB8
.text:0000000000015CB8 loc_15CB8:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000015CB8                 test    eax, eax
.text:0000000000015CBA                 jnz     short loc_15CD8
.text:0000000000015CBC                 call    ___errno_location
.text:0000000000015CC1                 mov     dword ptr [rax], 0
.text:0000000000015CC7                 mov     eax, 0FFFFFFFFh
.text:0000000000015CCC                 pop     rbx
.text:0000000000015CCD                 pop     rbp
.text:0000000000015CCE                 pop     r12
.text:0000000000015CD0                 retn
.text:0000000000015CD0 ; ---------------------------------------------------------------------------
.text:0000000000015CD1                 align 8
.text:0000000000015CD8
.text:0000000000015CD8 loc_15CD8:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000015CD8                 pop     rbx
.text:0000000000015CD9                 mov     eax, 0FFFFFFFFh
.text:0000000000015CDE                 pop     rbp
.text:0000000000015CDF                 pop     r12
.text:0000000000015CE1                 retn
.text:0000000000015CE1 ; ---------------------------------------------------------------------------
.text:0000000000015CE2                 align 8
.text:0000000000015CE8
.text:0000000000015CE8 loc_15CE8:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000015CE8                 call    ___errno_location
.text:0000000000015CED                 cmp     dword ptr [rax], 9
.text:0000000000015CF0                 pop     rbx
.text:0000000000015CF1                 pop     rbp
.text:0000000000015CF2                 pop     r12
.text:0000000000015CF4                 setnz   al
.text:0000000000015CF7                 movzx   eax, al
.text:0000000000015CFA                 neg     eax
.text:0000000000015CFC                 retn
.text:0000000000015CFC ; } // starts at 15C80
.text:0000000000015CFC close_stream    endp
.text:0000000000015CFC
.text:0000000000015CFC ; ---------------------------------------------------------------------------
.text:0000000000015CFD                 align 20h
.text:0000000000015D00
.text:0000000000015D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D00
.text:0000000000015D00
.text:0000000000015D00                 public dir_name
.text:0000000000015D00 dir_name        proc near               ; CODE XREF: same_nameat_part_0+2B↑p
.text:0000000000015D00                                         ; same_nameat_part_0+5F↑p
.text:0000000000015D00 ; __unwind {
.text:0000000000015D00                 sub     rsp, 8
.text:0000000000015D04                 call    mdir_name
.text:0000000000015D09                 test    rax, rax
.text:0000000000015D0C                 jz      short loc_15D13
.text:0000000000015D0E                 add     rsp, 8
.text:0000000000015D12                 retn
.text:0000000000015D13 ; ---------------------------------------------------------------------------
.text:0000000000015D13
.text:0000000000015D13 loc_15D13:                              ; CODE XREF: dir_name+C↑j
.text:0000000000015D13                 call    xalloc_die
.text:0000000000015D13 ; } // starts at 15D00
.text:0000000000015D13 dir_name        endp
.text:0000000000015D13
.text:0000000000015D13 ; ---------------------------------------------------------------------------
.text:0000000000015D18                 align 20h
.text:0000000000015D20
.text:0000000000015D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D20
.text:0000000000015D20 ; Attributes: info_from_lumina
.text:0000000000015D20
.text:0000000000015D20 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000015D20                 public hash_pjw
.text:0000000000015D20 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000015D20 ; __unwind {
.text:0000000000015D20                 movsx   rcx, byte ptr [rdi]
.text:0000000000015D24                 test    cl, cl
.text:0000000000015D26                 jz      short loc_15D50
.text:0000000000015D28                 xor     eax, eax
.text:0000000000015D2A                 nop     word ptr [rax+rax+00h]
.text:0000000000015D30
.text:0000000000015D30 loc_15D30:                              ; CODE XREF: hash_pjw+21↓j
.text:0000000000015D30                 rol     rax, 9
.text:0000000000015D34                 add     rdi, 1
.text:0000000000015D38                 add     rax, rcx
.text:0000000000015D3B                 movsx   rcx, byte ptr [rdi]
.text:0000000000015D3F                 test    cl, cl
.text:0000000000015D41                 jnz     short loc_15D30
.text:0000000000015D43                 xor     edx, edx
.text:0000000000015D45                 div     rsi
.text:0000000000015D48                 mov     rax, rdx
.text:0000000000015D4B                 retn
.text:0000000000015D4B ; ---------------------------------------------------------------------------
.text:0000000000015D4C                 align 10h
.text:0000000000015D50
.text:0000000000015D50 loc_15D50:                              ; CODE XREF: hash_pjw+6↑j
.text:0000000000015D50                 xor     edx, edx
.text:0000000000015D52                 mov     rax, rdx
.text:0000000000015D55                 retn
.text:0000000000015D55 ; } // starts at 15D20
.text:0000000000015D55 hash_pjw        endp
.text:0000000000015D55
.text:0000000000015D55 ; ---------------------------------------------------------------------------
.text:0000000000015D56                 align 20h
.text:0000000000015D60
.text:0000000000015D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015D60
.text:0000000000015D60
.text:0000000000015D60                 public locale_charset
.text:0000000000015D60 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000015D60 ; __unwind {
.text:0000000000015D60                 sub     rsp, 8
.text:0000000000015D64                 mov     edi, 0Eh        ; item
.text:0000000000015D69                 call    _nl_langinfo
.text:0000000000015D6E                 test    rax, rax
.text:0000000000015D71                 jz      short loc_15D90
.text:0000000000015D73                 cmp     byte ptr [rax], 0
.text:0000000000015D76                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000015D7D                 cmovz   rax, rdx
.text:0000000000015D81                 add     rsp, 8
.text:0000000000015D85                 retn
.text:0000000000015D85 ; ---------------------------------------------------------------------------
.text:0000000000015D86                 align 10h
.text:0000000000015D90
.text:0000000000015D90 loc_15D90:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000015D90                 lea     rax, aAscii     ; "ASCII"
.text:0000000000015D97                 add     rsp, 8
.text:0000000000015D9B                 retn
.text:0000000000015D9B ; } // starts at 15D60
.text:0000000000015D9B locale_charset  endp
.text:0000000000015D9B
.text:0000000000015D9B ; ---------------------------------------------------------------------------
.text:0000000000015D9C                 align 20h
.text:0000000000015DA0
.text:0000000000015DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015DA0
.text:0000000000015DA0 ; Attributes: info_from_lumina
.text:0000000000015DA0
.text:0000000000015DA0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000015DA0                 public rpl_fclose
.text:0000000000015DA0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000015DA0 ; __unwind {
.text:0000000000015DA0                 push    r12
.text:0000000000015DA2                 push    rbp
.text:0000000000015DA3                 push    rbx
.text:0000000000015DA4                 mov     rbx, rdi
.text:0000000000015DA7                 call    _fileno
.text:0000000000015DAC                 test    eax, eax
.text:0000000000015DAE                 mov     rdi, rbx        ; fp
.text:0000000000015DB1                 js      short loc_15E07
.text:0000000000015DB3                 call    ___freading
.text:0000000000015DB8                 test    eax, eax
.text:0000000000015DBA                 jnz     short loc_15DE8
.text:0000000000015DBC
.text:0000000000015DBC loc_15DBC:                              ; CODE XREF: rpl_fclose+62↓j
.text:0000000000015DBC                 mov     rdi, rbx        ; stream
.text:0000000000015DBF                 call    rpl_fflush
.text:0000000000015DC4                 test    eax, eax
.text:0000000000015DC6                 jz      short loc_15E04
.text:0000000000015DC8                 call    ___errno_location
.text:0000000000015DCD                 mov     r12d, [rax]
.text:0000000000015DD0                 mov     rdi, rbx        ; stream
.text:0000000000015DD3                 mov     rbp, rax
.text:0000000000015DD6                 call    _fclose
.text:0000000000015DDB                 test    r12d, r12d
.text:0000000000015DDE                 jnz     short loc_15E10
.text:0000000000015DE0
.text:0000000000015DE0 loc_15DE0:                              ; CODE XREF: rpl_fclose+79↓j
.text:0000000000015DE0                 pop     rbx
.text:0000000000015DE1                 pop     rbp
.text:0000000000015DE2                 pop     r12
.text:0000000000015DE4                 retn
.text:0000000000015DE4 ; ---------------------------------------------------------------------------
.text:0000000000015DE5                 align 8
.text:0000000000015DE8
.text:0000000000015DE8 loc_15DE8:                              ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000015DE8                 mov     rdi, rbx        ; stream
.text:0000000000015DEB                 call    _fileno
.text:0000000000015DF0                 xor     esi, esi        ; offset
.text:0000000000015DF2                 mov     edx, 1          ; whence
.text:0000000000015DF7                 mov     edi, eax        ; fd
.text:0000000000015DF9                 call    _lseek
.text:0000000000015DFE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015E02                 jnz     short loc_15DBC
.text:0000000000015E04
.text:0000000000015E04 loc_15E04:                              ; CODE XREF: rpl_fclose+26↑j
.text:0000000000015E04                 mov     rdi, rbx        ; stream
.text:0000000000015E07
.text:0000000000015E07 loc_15E07:                              ; CODE XREF: rpl_fclose+11↑j
.text:0000000000015E07                 pop     rbx
.text:0000000000015E08                 pop     rbp
.text:0000000000015E09                 pop     r12
.text:0000000000015E0B                 jmp     _fclose
.text:0000000000015E10 ; ---------------------------------------------------------------------------
.text:0000000000015E10
.text:0000000000015E10 loc_15E10:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000015E10                 mov     [rbp+0], r12d
.text:0000000000015E14                 mov     eax, 0FFFFFFFFh
.text:0000000000015E19                 jmp     short loc_15DE0
.text:0000000000015E19 ; } // starts at 15DA0
.text:0000000000015E19 rpl_fclose      endp
.text:0000000000015E19
.text:0000000000015E19 ; ---------------------------------------------------------------------------
.text:0000000000015E1B                 align 20h
.text:0000000000015E20
.text:0000000000015E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000015E20
.text:0000000000015E20 ; Attributes: info_from_lumina
.text:0000000000015E20
.text:0000000000015E20 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000015E20                 public rpl_fflush
.text:0000000000015E20 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000015E20 ; __unwind {
.text:0000000000015E20                 test    rdi, rdi
.text:0000000000015E23                 push    rbx
.text:0000000000015E24                 mov     rbx, rdi
.text:0000000000015E27                 jz      short loc_15E3A
.text:0000000000015E29                 call    ___freading
.text:0000000000015E2E                 test    eax, eax
.text:0000000000015E30                 jz      short loc_15E3A
.text:0000000000015E32                 test    dword ptr [rbx], 100h
.text:0000000000015E38                 jnz     short loc_15E48
.text:0000000000015E3A
.text:0000000000015E3A loc_15E3A:                              ; CODE XREF: rpl_fflush+7↑j
.text:0000000000015E3A                                         ; rpl_fflush+10↑j
.text:0000000000015E3A                 mov     rdi, rbx        ; stream
.text:0000000000015E3D                 pop     rbx
.text:0000000000015E3E                 jmp     _fflush
.text:0000000000015E3E ; ---------------------------------------------------------------------------
.text:0000000000015E43                 align 8
.text:0000000000015E48
.text:0000000000015E48 loc_15E48:                              ; CODE XREF: rpl_fflush+18↑j
.text:0000000000015E48                 mov     rdi, rbx
.text:0000000000015E4B                 mov     edx, 1
.text:0000000000015E50                 xor     esi, esi
.text:0000000000015E52                 call    rpl_fseeko
.text:0000000000015E57                 mov     rdi, rbx        ; stream
.text:0000000000015E5A                 pop     rbx
.text:0000000000015E5B                 jmp     _fflush
.text:0000000000015E5B ; } // starts at 15E20
.text:0000000000015E5B rpl_fflush      endp
.text:0000000000015E5B
.text:0000000000015E60
.text:0000000000015E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000015E60
.text:0000000000015E60 ; Attributes: info_from_lumina
.text:0000000000015E60
.text:0000000000015E60 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000015E60                 public rpl_fseeko
.text:0000000000015E60 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000015E60 ; __unwind {
.text:0000000000015E60                 mov     rax, [rdi+8]
.text:0000000000015E64                 cmp     [rdi+10h], rax
.text:0000000000015E68                 jz      short loc_15E70
.text:0000000000015E6A
.text:0000000000015E6A loc_15E6A:                              ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000015E6A                                         ; rpl_fseeko+1F↓j
.text:0000000000015E6A                 jmp     _fseeko
.text:0000000000015E6A ; ---------------------------------------------------------------------------
.text:0000000000015E6F                 align 10h
.text:0000000000015E70
.text:0000000000015E70 loc_15E70:                              ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000015E70                 mov     rax, [rdi+20h]
.text:0000000000015E74                 cmp     [rdi+28h], rax
.text:0000000000015E78                 jnz     short loc_15E6A
.text:0000000000015E7A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000015E7F                 jnz     short loc_15E6A
.text:0000000000015E81                 push    r12
.text:0000000000015E83                 push    rbp
.text:0000000000015E84                 mov     r12d, edx
.text:0000000000015E87                 push    rbx
.text:0000000000015E88                 mov     rbp, rsi
.text:0000000000015E8B                 mov     rbx, rdi
.text:0000000000015E8E                 call    _fileno
.text:0000000000015E93                 mov     edx, r12d       ; whence
.text:0000000000015E96                 mov     rsi, rbp        ; offset
.text:0000000000015E99                 mov     edi, eax        ; fd
.text:0000000000015E9B                 call    _lseek
.text:0000000000015EA0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015EA4                 jz      short loc_15EB2
.text:0000000000015EA6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000015EA9                 mov     [rbx+90h], rax
.text:0000000000015EB0                 xor     eax, eax
.text:0000000000015EB2
.text:0000000000015EB2 loc_15EB2:                              ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000015EB2                 pop     rbx
.text:0000000000015EB3                 pop     rbp
.text:0000000000015EB4                 pop     r12
.text:0000000000015EB6                 retn
.text:0000000000015EB6 ; } // starts at 15E60
.text:0000000000015EB6 rpl_fseeko      endp
.text:0000000000015EB6
.text:0000000000015EB6 ; ---------------------------------------------------------------------------
.text:0000000000015EB7                 align 20h
.text:0000000000015EC0
.text:0000000000015EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000015EC0
.text:0000000000015EC0 ; Attributes: info_from_lumina
.text:0000000000015EC0
.text:0000000000015EC0 ; void _libc_csu_init(void)
.text:0000000000015EC0                 public __libc_csu_init
.text:0000000000015EC0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000015EC0 ; __unwind {
.text:0000000000015EC0                 push    r15
.text:0000000000015EC2                 push    r14
.text:0000000000015EC4                 mov     r15, rdx
.text:0000000000015EC7                 push    r13
.text:0000000000015EC9                 push    r12
.text:0000000000015ECB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000015ED2                 push    rbp
.text:0000000000015ED3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000015EDA                 push    rbx
.text:0000000000015EDB                 mov     r13d, edi
.text:0000000000015EDE                 mov     r14, rsi
.text:0000000000015EE1                 sub     rbp, r12
.text:0000000000015EE4                 sub     rsp, 8
.text:0000000000015EE8                 sar     rbp, 3
.text:0000000000015EEC                 call    _init_proc
.text:0000000000015EF1                 test    rbp, rbp
.text:0000000000015EF4                 jz      short loc_15F16
.text:0000000000015EF6                 xor     ebx, ebx
.text:0000000000015EF8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000015F00
.text:0000000000015F00 loc_15F00:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000015F00                 mov     rdx, r15
.text:0000000000015F03                 mov     rsi, r14
.text:0000000000015F06                 mov     edi, r13d
.text:0000000000015F09                 call    ds:(__frame_dummy_init_array_entry - 21F050h)[r12+rbx*8]
.text:0000000000015F0D                 add     rbx, 1
.text:0000000000015F11                 cmp     rbp, rbx
.text:0000000000015F14                 jnz     short loc_15F00
.text:0000000000015F16
.text:0000000000015F16 loc_15F16:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000015F16                 add     rsp, 8
.text:0000000000015F1A                 pop     rbx
.text:0000000000015F1B                 pop     rbp
.text:0000000000015F1C                 pop     r12
.text:0000000000015F1E                 pop     r13
.text:0000000000015F20                 pop     r14
.text:0000000000015F22                 pop     r15
.text:0000000000015F24                 retn
.text:0000000000015F24 ; } // starts at 15EC0
.text:0000000000015F24 __libc_csu_init endp
.text:0000000000015F24
.text:0000000000015F24 ; ---------------------------------------------------------------------------
.text:0000000000015F25                 align 10h
.text:0000000000015F30
.text:0000000000015F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000015F30
.text:0000000000015F30
.text:0000000000015F30 ; void _libc_csu_fini(void)
.text:0000000000015F30                 public __libc_csu_fini
.text:0000000000015F30 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000015F30 ; __unwind {
.text:0000000000015F30                 rep retn
.text:0000000000015F30 ; } // starts at 15F30
.text:0000000000015F30 __libc_csu_fini endp
.text:0000000000015F30
.text:0000000000015F30 ; ---------------------------------------------------------------------------
.text:0000000000015F32                 align 20h
.text:0000000000015F40
.text:0000000000015F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000015F40
.text:0000000000015F40
.text:0000000000015F40 atexit          proc near               ; CODE XREF: main+6C↑p
.text:0000000000015F40 ; __unwind {
.text:0000000000015F40                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000015F47                 xor     esi, esi        ; obj
.text:0000000000015F49                 jmp     ___cxa_atexit
.text:0000000000015F49 ; } // starts at 15F40
.text:0000000000015F49 atexit          endp
.text:0000000000015F49
.text:0000000000015F49 _text           ends
.text:0000000000015F49
LOAD:0000000000015F4E ; ===========================================================================
LOAD:0000000000015F4E
LOAD:0000000000015F4E ; Segment type: Pure code
LOAD:0000000000015F4E ; Segment permissions: Read/Execute
LOAD:0000000000015F4E LOAD            segment byte public 'CODE' use64
LOAD:0000000000015F4E                 assume cs:LOAD
LOAD:0000000000015F4E                 ;org 15F4Eh
LOAD:0000000000015F4E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015F4E                 align 10h
LOAD:0000000000015F4E LOAD            ends
LOAD:0000000000015F4E
.fini:0000000000015F50 ; ===========================================================================
.fini:0000000000015F50
.fini:0000000000015F50 ; Segment type: Pure code
.fini:0000000000015F50 ; Segment permissions: Read/Execute
.fini:0000000000015F50 _fini           segment dword public 'CODE' use64
.fini:0000000000015F50                 assume cs:_fini
.fini:0000000000015F50                 ;org 15F50h
.fini:0000000000015F50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000015F50
.fini:0000000000015F50 ; =============== S U B R O U T I N E =======================================
.fini:0000000000015F50
.fini:0000000000015F50
.fini:0000000000015F50                 public _term_proc
.fini:0000000000015F50 _term_proc      proc near
.fini:0000000000015F50                 sub     rsp, 8          ; _fini
.fini:0000000000015F54                 add     rsp, 8
.fini:0000000000015F58                 retn
.fini:0000000000015F58 _term_proc      endp
.fini:0000000000015F58
.fini:0000000000015F58 _fini           ends
.fini:0000000000015F58
LOAD:0000000000015F59 ; ===========================================================================
LOAD:0000000000015F59
LOAD:0000000000015F59 ; Segment type: Pure code
LOAD:0000000000015F59 ; Segment permissions: Read/Execute
LOAD:0000000000015F59 LOAD            segment byte public 'CODE' use64
LOAD:0000000000015F59                 assume cs:LOAD
LOAD:0000000000015F59                 ;org 15F59h
LOAD:0000000000015F59                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000015F59                 align 20h
LOAD:0000000000015F59 LOAD            ends
LOAD:0000000000015F59
.rodata:0000000000015F60 ; ===========================================================================
.rodata:0000000000015F60
.rodata:0000000000015F60 ; Segment type: Pure data
.rodata:0000000000015F60 ; Segment permissions: Read
.rodata:0000000000015F60 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000015F60                 assume cs:_rodata
.rodata:0000000000015F60                 ;org 15F60h
.rodata:0000000000015F60                 public _IO_stdin_used
.rodata:0000000000015F60 _IO_stdin_used  db    1
.rodata:0000000000015F61                 db    0
.rodata:0000000000015F62                 db    2
.rodata:0000000000015F63                 db    0
.rodata:0000000000015F64                 db    0
.rodata:0000000000015F65                 db    0
.rodata:0000000000015F66                 db    0
.rodata:0000000000015F67                 db    0
.rodata:0000000000015F68                 db    0
.rodata:0000000000015F69                 db    0
.rodata:0000000000015F6A                 db    0
.rodata:0000000000015F6B                 db    0
.rodata:0000000000015F6C                 db    0
.rodata:0000000000015F6D                 db    0
.rodata:0000000000015F6E                 db    0
.rodata:0000000000015F6F                 db    0
.rodata:0000000000015F70                 db    0
.rodata:0000000000015F71                 db    0
.rodata:0000000000015F72                 db    0
.rodata:0000000000015F73                 db    0
.rodata:0000000000015F74                 db    0
.rodata:0000000000015F75                 db    0
.rodata:0000000000015F76                 db    0
.rodata:0000000000015F77                 db    0
.rodata:0000000000015F78                 db    0
.rodata:0000000000015F79                 db    0
.rodata:0000000000015F7A                 db    0
.rodata:0000000000015F7B                 db    0
.rodata:0000000000015F7C                 db    0
.rodata:0000000000015F7D                 db    0
.rodata:0000000000015F7E                 db    0
.rodata:0000000000015F7F                 db    0
.rodata:0000000000015F80 jpt_54A1        dd offset loc_5538 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                                         ; DATA XREF: get_funky_string+6↑o
.rodata:0000000000015F80                                         ; get_funky_string+BA↑r
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h ; jump table for switch statement
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_54A8 - 15F80h, offset loc_54A8 - 15F80h
.rodata:0000000000015F80                 dd offset loc_54A8 - 15F80h, offset loc_54A8 - 15F80h
.rodata:0000000000015F80                 dd offset loc_54A8 - 15F80h, offset loc_54A8 - 15F80h
.rodata:0000000000015F80                 dd offset loc_54A8 - 15F80h, offset loc_54A8 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset loc_55E0 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5540 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset loc_55B0 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset loc_55C0 - 15F80h
.rodata:0000000000015F80                 dd offset loc_55F0 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset loc_5528 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5600 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5610 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset def_54A1 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5620 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5630 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_55D0 - 15F80h, offset def_54A1 - 15F80h
.rodata:0000000000015F80                 dd offset loc_5540 - 15F80h
.rodata:0000000000016164 jpt_8FCF        dd offset loc_9280 - 16164h
.rodata:0000000000016164                                         ; DATA XREF: print_current_files+11↑o
.rodata:0000000000016164                                         ; print_current_files+28↑r
.rodata:0000000000016164                 dd offset loc_90F0 - 16164h ; jump table for switch statement
.rodata:0000000000016164                 dd offset loc_9150 - 16164h
.rodata:0000000000016164                 dd offset loc_8FD8 - 16164h
.rodata:0000000000016164                 dd offset loc_90D0 - 16164h
.rodata:0000000000016178 jpt_3B4C        dd offset loc_3DEE - 16178h, offset loc_501D - 16178h
.rodata:0000000000016178                                         ; DATA XREF: main:loc_3AE7↑o
.rodata:0000000000016178                                         ; main+2A4↑r
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h ; jump table for switch statement
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset loc_3DD2 - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset loc_3DC3 - 16178h, offset loc_3D72 - 16178h
.rodata:0000000000016178                 dd offset loc_3D63 - 16178h, offset loc_3D57 - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3D48 - 16178h
.rodata:0000000000016178                 dd offset loc_3D3C - 16178h, offset loc_3D2D - 16178h
.rodata:0000000000016178                 dd offset loc_3CF8 - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3CE9 - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3CDB - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset loc_3CCA - 16178h, offset loc_3CBE - 16178h
.rodata:0000000000016178                 dd offset loc_3CAA - 16178h, offset loc_3C65 - 16178h
.rodata:0000000000016178                 dd offset loc_3C51 - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3C3D - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3C31 - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset loc_3C22 - 16178h, offset loc_3C11 - 16178h
.rodata:0000000000016178                 dd offset loc_3C02 - 16178h, offset loc_3BF6 - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_3BB6 - 16178h
.rodata:0000000000016178                 dd offset loc_3BA0 - 16178h, offset loc_3B71 - 16178h
.rodata:0000000000016178                 dd offset loc_3B68 - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset loc_3B61 - 16178h, offset loc_3B55 - 16178h
.rodata:0000000000016178                 dd offset loc_41BC - 16178h, offset loc_3B4E - 16178h
.rodata:0000000000016178                 dd offset loc_41A6 - 16178h, offset loc_4197 - 16178h
.rodata:0000000000016178                 dd offset loc_418B - 16178h, offset loc_417F - 16178h
.rodata:0000000000016178                 dd offset loc_4173 - 16178h, offset loc_415F - 16178h
.rodata:0000000000016178                 dd offset loc_423F - 16178h, offset loc_422B - 16178h
.rodata:0000000000016178                 dd offset loc_41DA - 16178h, offset loc_41CB - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset def_3B4C - 16178h
.rodata:0000000000016178                 dd offset def_3B4C - 16178h, offset loc_424E - 16178h
.rodata:0000000000016178                 dd offset loc_411E - 16178h, offset loc_40BF - 16178h
.rodata:0000000000016178                 dd offset loc_40B0 - 16178h, offset loc_40A1 - 16178h
.rodata:0000000000016178                 dd offset loc_405E - 16178h, offset loc_4048 - 16178h
.rodata:0000000000016178                 dd offset loc_403C - 16178h, offset loc_4011 - 16178h
.rodata:0000000000016178                 dd offset loc_3FA5 - 16178h, offset loc_3F62 - 16178h
.rodata:0000000000016178                 dd offset loc_3F1E - 16178h, offset loc_3F12 - 16178h
.rodata:0000000000016178                 dd offset loc_3EE3 - 16178h, offset loc_3E9B - 16178h
.rodata:0000000000016178                 dd offset loc_3E58 - 16178h, offset loc_3E4C - 16178h
.rodata:00000000000165C8                 align 20h
.rodata:00000000000165E0 CSWTCH_920      db    1                 ; DATA XREF: print_dir+515↑o
.rodata:00000000000165E1                 db    0
.rodata:00000000000165E2                 db    0
.rodata:00000000000165E3                 db    0
.rodata:00000000000165E4                 db    2
.rodata:00000000000165E5                 db    0
.rodata:00000000000165E6                 db    0
.rodata:00000000000165E7                 db    0
.rodata:00000000000165E8                 db    0
.rodata:00000000000165E9                 db    0
.rodata:00000000000165EA                 db    0
.rodata:00000000000165EB                 db    0
.rodata:00000000000165EC                 db    3
.rodata:00000000000165ED                 db    0
.rodata:00000000000165EE                 db    0
.rodata:00000000000165EF                 db    0
.rodata:00000000000165F0                 db    0
.rodata:00000000000165F1                 db    0
.rodata:00000000000165F2                 db    0
.rodata:00000000000165F3                 db    0
.rodata:00000000000165F4                 db    4
.rodata:00000000000165F5                 db    0
.rodata:00000000000165F6                 db    0
.rodata:00000000000165F7                 db    0
.rodata:00000000000165F8                 db    0
.rodata:00000000000165F9                 db    0
.rodata:00000000000165FA                 db    0
.rodata:00000000000165FB                 db    0
.rodata:00000000000165FC                 db    5
.rodata:00000000000165FD                 db    0
.rodata:00000000000165FE                 db    0
.rodata:00000000000165FF                 db    0
.rodata:0000000000016600                 db    0
.rodata:0000000000016601                 db    0
.rodata:0000000000016602                 db    0
.rodata:0000000000016603                 db    0
.rodata:0000000000016604                 db    6
.rodata:0000000000016605                 db    0
.rodata:0000000000016606                 db    0
.rodata:0000000000016607                 db    0
.rodata:0000000000016608                 db    0
.rodata:0000000000016609                 db    0
.rodata:000000000001660A                 db    0
.rodata:000000000001660B                 db    0
.rodata:000000000001660C                 db    7
.rodata:000000000001660D                 db    0
.rodata:000000000001660E                 db    0
.rodata:000000000001660F                 db    0
.rodata:0000000000016610                 db    0
.rodata:0000000000016611                 db    0
.rodata:0000000000016612                 db    0
.rodata:0000000000016613                 db    0
.rodata:0000000000016614                 db    8
.rodata:0000000000016615                 db    0
.rodata:0000000000016616                 db    0
.rodata:0000000000016617                 db    0
.rodata:0000000000016618 ; const char _PRETTY_FUNCTION___9809[]
.rodata:0000000000016618 __PRETTY_FUNCTION___9809 db 'dev_ino_pop',0
.rodata:0000000000016618                                         ; DATA XREF: main:loc_51E7↑o
.rodata:0000000000016624                 align 20h
.rodata:0000000000016640 sig_9937        db  14h
.rodata:0000000000016641                 db    0
.rodata:0000000000016642                 db    0
.rodata:0000000000016643                 db    0
.rodata:0000000000016644 unk_16644       db  0Eh                 ; DATA XREF: signal_setup+29↑o
.rodata:0000000000016644                                         ; signal_setup:loc_6CF0↑o
.rodata:0000000000016645                 db    0
.rodata:0000000000016646                 db    0
.rodata:0000000000016647                 db    0
.rodata:0000000000016648                 db    1
.rodata:0000000000016649                 db    0
.rodata:000000000001664A                 db    0
.rodata:000000000001664B                 db    0
.rodata:000000000001664C                 db    2
.rodata:000000000001664D                 db    0
.rodata:000000000001664E                 db    0
.rodata:000000000001664F                 db    0
.rodata:0000000000016650                 db  0Dh
.rodata:0000000000016651                 db    0
.rodata:0000000000016652                 db    0
.rodata:0000000000016653                 db    0
.rodata:0000000000016654                 db    3
.rodata:0000000000016655                 db    0
.rodata:0000000000016656                 db    0
.rodata:0000000000016657                 db    0
.rodata:0000000000016658                 db  0Fh
.rodata:0000000000016659                 db    0
.rodata:000000000001665A                 db    0
.rodata:000000000001665B                 db    0
.rodata:000000000001665C                 db  1Dh
.rodata:000000000001665D                 db    0
.rodata:000000000001665E                 db    0
.rodata:000000000001665F                 db    0
.rodata:0000000000016660                 db  1Bh
.rodata:0000000000016661                 db    0
.rodata:0000000000016662                 db    0
.rodata:0000000000016663                 db    0
.rodata:0000000000016664                 db  1Ah
.rodata:0000000000016665                 db    0
.rodata:0000000000016666                 db    0
.rodata:0000000000016667                 db    0
.rodata:0000000000016668                 db  18h
.rodata:0000000000016669                 db    0
.rodata:000000000001666A                 db    0
.rodata:000000000001666B                 db    0
.rodata:000000000001666C                 db  19h
.rodata:000000000001666D                 db    0
.rodata:000000000001666E                 db    0
.rodata:000000000001666F                 db    0
.rodata:0000000000016670                 db    0
.rodata:0000000000016671                 db    0
.rodata:0000000000016672                 db    0
.rodata:0000000000016673                 db    0
.rodata:0000000000016674                 db    0
.rodata:0000000000016675                 db    0
.rodata:0000000000016676                 db    0
.rodata:0000000000016677                 db    0
.rodata:0000000000016678                 db    0
.rodata:0000000000016679                 db    0
.rodata:000000000001667A                 db    0
.rodata:000000000001667B                 db    0
.rodata:000000000001667C                 db    0
.rodata:000000000001667D                 db    0
.rodata:000000000001667E                 db    0
.rodata:000000000001667F                 db    0
.rodata:0000000000016680 filetype_indicator_11085 db  0Dh        ; DATA XREF: print_name_with_quoting+B6↑o
.rodata:0000000000016681                 db    0
.rodata:0000000000016682                 db    0
.rodata:0000000000016683                 db    0
.rodata:0000000000016684                 db    8
.rodata:0000000000016685                 db    0
.rodata:0000000000016686                 db    0
.rodata:0000000000016687                 db    0
.rodata:0000000000016688                 db  0Bh
.rodata:0000000000016689                 db    0
.rodata:000000000001668A                 db    0
.rodata:000000000001668B                 db    0
.rodata:000000000001668C                 db    6
.rodata:000000000001668D                 db    0
.rodata:000000000001668E                 db    0
.rodata:000000000001668F                 db    0
.rodata:0000000000016690                 db  0Ah
.rodata:0000000000016691                 db    0
.rodata:0000000000016692                 db    0
.rodata:0000000000016693                 db    0
.rodata:0000000000016694                 db    5
.rodata:0000000000016695                 db    0
.rodata:0000000000016696                 db    0
.rodata:0000000000016697                 db    0
.rodata:0000000000016698                 db    7
.rodata:0000000000016699                 db    0
.rodata:000000000001669A                 db    0
.rodata:000000000001669B                 db    0
.rodata:000000000001669C                 db    9
.rodata:000000000001669D                 db    0
.rodata:000000000001669E                 db    0
.rodata:000000000001669F                 db    0
.rodata:00000000000166A0                 db    5
.rodata:00000000000166A1                 db    0
.rodata:00000000000166A2                 db    0
.rodata:00000000000166A3                 db    0
.rodata:00000000000166A4                 db    6
.rodata:00000000000166A5                 db    0
.rodata:00000000000166A6                 db    0
.rodata:00000000000166A7                 db    0
.rodata:00000000000166A8 ; const char _PRETTY_FUNCTION___10745[]
.rodata:00000000000166A8 __PRETTY_FUNCTION___10745 db 'sort_files',0
.rodata:00000000000166A8                                         ; DATA XREF: sort_files:loc_5DA7↑o
.rodata:00000000000166B3 ; const char posix_prefix_10077[]
.rodata:00000000000166B3 posix_prefix_10077 db 'posix-',0        ; DATA XREF: main:loc_4408↑o
.rodata:00000000000166BA ; const char _PRETTY_FUNCTION___9964[]
.rodata:00000000000166BA __PRETTY_FUNCTION___9964 db 'main',0    ; DATA XREF: main:loc_5206↑o
.rodata:00000000000166BA                                         ; main:loc_5225↑o
.rodata:00000000000166BF                 align 20h
.rodata:00000000000166C0 when_types      db    1                 ; DATA XREF: main+723↑o
.rodata:00000000000166C0                                         ; main+73C↑o ...
.rodata:00000000000166C1                 db    0
.rodata:00000000000166C2                 db    0
.rodata:00000000000166C3                 db    0
.rodata:00000000000166C4                 db    1
.rodata:00000000000166C5                 db    0
.rodata:00000000000166C6                 db    0
.rodata:00000000000166C7                 db    0
.rodata:00000000000166C8                 db    1
.rodata:00000000000166C9                 db    0
.rodata:00000000000166CA                 db    0
.rodata:00000000000166CB                 db    0
.rodata:00000000000166CC                 db    0
.rodata:00000000000166CD                 db    0
.rodata:00000000000166CE                 db    0
.rodata:00000000000166CF                 db    0
.rodata:00000000000166D0                 db    0
.rodata:00000000000166D1                 db    0
.rodata:00000000000166D2                 db    0
.rodata:00000000000166D3                 db    0
.rodata:00000000000166D4                 db    0
.rodata:00000000000166D5                 db    0
.rodata:00000000000166D6                 db    0
.rodata:00000000000166D7                 db    0
.rodata:00000000000166D8                 db    2
.rodata:00000000000166D9                 db    0
.rodata:00000000000166DA                 db    0
.rodata:00000000000166DB                 db    0
.rodata:00000000000166DC                 db    2
.rodata:00000000000166DD                 db    0
.rodata:00000000000166DE                 db    0
.rodata:00000000000166DF                 db    0
.rodata:00000000000166E0                 db    2
.rodata:00000000000166E1                 db    0
.rodata:00000000000166E2                 db    0
.rodata:00000000000166E3                 db    0
.rodata:00000000000166E4                 db    0
.rodata:00000000000166E5                 db    0
.rodata:00000000000166E6                 db    0
.rodata:00000000000166E7                 db    0
.rodata:00000000000166E8                 db    0
.rodata:00000000000166E9                 db    0
.rodata:00000000000166EA                 db    0
.rodata:00000000000166EB                 db    0
.rodata:00000000000166EC                 db    0
.rodata:00000000000166ED                 db    0
.rodata:00000000000166EE                 db    0
.rodata:00000000000166EF                 db    0
.rodata:00000000000166F0 time_types      db    2                 ; DATA XREF: main+5CD↑o
.rodata:00000000000166F0                                         ; main+5E6↑o
.rodata:00000000000166F1                 db    0
.rodata:00000000000166F2                 db    0
.rodata:00000000000166F3                 db    0
.rodata:00000000000166F4                 db    2
.rodata:00000000000166F5                 db    0
.rodata:00000000000166F6                 db    0
.rodata:00000000000166F7                 db    0
.rodata:00000000000166F8                 db    2
.rodata:00000000000166F9                 db    0
.rodata:00000000000166FA                 db    0
.rodata:00000000000166FB                 db    0
.rodata:00000000000166FC                 db    1
.rodata:00000000000166FD                 db    0
.rodata:00000000000166FE                 db    0
.rodata:00000000000166FF                 db    0
.rodata:0000000000016700                 db    1
.rodata:0000000000016701                 db    0
.rodata:0000000000016702                 db    0
.rodata:0000000000016703                 db    0
.rodata:0000000000016704                 db    0
.rodata:0000000000016705                 db    0
.rodata:0000000000016706                 db    0
.rodata:0000000000016707                 db    0
.rodata:0000000000016708                 db    0
.rodata:0000000000016709                 db    0
.rodata:000000000001670A                 db    0
.rodata:000000000001670B                 db    0
.rodata:000000000001670C                 db    0
.rodata:000000000001670D                 db    0
.rodata:000000000001670E                 db    0
.rodata:000000000001670F                 db    0
.rodata:0000000000016710 sort_types      db 0FFh                 ; DATA XREF: main+610↑o
.rodata:0000000000016710                                         ; main+629↑o
.rodata:0000000000016711                 db 0FFh
.rodata:0000000000016712                 db 0FFh
.rodata:0000000000016713                 db 0FFh
.rodata:0000000000016714                 db    4
.rodata:0000000000016715                 db    0
.rodata:0000000000016716                 db    0
.rodata:0000000000016717                 db    0
.rodata:0000000000016718                 db    2
.rodata:0000000000016719                 db    0
.rodata:000000000001671A                 db    0
.rodata:000000000001671B                 db    0
.rodata:000000000001671C                 db    1
.rodata:000000000001671D                 db    0
.rodata:000000000001671E                 db    0
.rodata:000000000001671F                 db    0
.rodata:0000000000016720                 db    3
.rodata:0000000000016721                 db    0
.rodata:0000000000016722                 db    0
.rodata:0000000000016723                 db    0
.rodata:0000000000016724                 db    0
.rodata:0000000000016725                 db    0
.rodata:0000000000016726                 db    0
.rodata:0000000000016727                 db    0
.rodata:0000000000016728                 db    0
.rodata:0000000000016729                 db    0
.rodata:000000000001672A                 db    0
.rodata:000000000001672B                 db    0
.rodata:000000000001672C                 db    0
.rodata:000000000001672D                 db    0
.rodata:000000000001672E                 db    0
.rodata:000000000001672F                 db    0
.rodata:0000000000016730 format_types    db    0                 ; DATA XREF: main+7D3↑o
.rodata:0000000000016730                                         ; main+7EC↑o
.rodata:0000000000016731                 db    0
.rodata:0000000000016732                 db    0
.rodata:0000000000016733                 db    0
.rodata:0000000000016734                 db    0
.rodata:0000000000016735                 db    0
.rodata:0000000000016736                 db    0
.rodata:0000000000016737                 db    0
.rodata:0000000000016738                 db    4
.rodata:0000000000016739                 db    0
.rodata:000000000001673A                 db    0
.rodata:000000000001673B                 db    0
.rodata:000000000001673C                 db    3
.rodata:000000000001673D                 db    0
.rodata:000000000001673E                 db    0
.rodata:000000000001673F                 db    0
.rodata:0000000000016740                 db    3
.rodata:0000000000016741                 db    0
.rodata:0000000000016742                 db    0
.rodata:0000000000016743                 db    0
.rodata:0000000000016744                 db    2
.rodata:0000000000016745                 db    0
.rodata:0000000000016746                 db    0
.rodata:0000000000016747                 db    0
.rodata:0000000000016748                 db    1
.rodata:0000000000016749                 db    0
.rodata:000000000001674A                 db    0
.rodata:000000000001674B                 db    0
.rodata:000000000001674C                 db    0
.rodata:000000000001674D                 db    0
.rodata:000000000001674E                 db    0
.rodata:000000000001674F                 db    0
.rodata:0000000000016750 indicator_style_types db    0           ; DATA XREF: main+6D7↑o
.rodata:0000000000016750                                         ; main+6F0↑o
.rodata:0000000000016751                 db    0
.rodata:0000000000016752                 db    0
.rodata:0000000000016753                 db    0
.rodata:0000000000016754                 db    1
.rodata:0000000000016755                 db    0
.rodata:0000000000016756                 db    0
.rodata:0000000000016757                 db    0
.rodata:0000000000016758                 db    2
.rodata:0000000000016759                 db    0
.rodata:000000000001675A                 db    0
.rodata:000000000001675B                 db    0
.rodata:000000000001675C                 db    3
.rodata:000000000001675D                 db    0
.rodata:000000000001675E                 db    0
.rodata:000000000001675F                 db    0
.rodata:0000000000016760 time_style_types db    0                ; DATA XREF: main:loc_4C6B↑o
.rodata:0000000000016761                 db    0
.rodata:0000000000016762                 db    0
.rodata:0000000000016763                 db    0
.rodata:0000000000016764                 db    1
.rodata:0000000000016765                 db    0
.rodata:0000000000016766                 db    0
.rodata:0000000000016767                 db    0
.rodata:0000000000016768                 db    2
.rodata:0000000000016769                 db    0
.rodata:000000000001676A                 db    0
.rodata:000000000001676B                 db    0
.rodata:000000000001676C                 db    3
.rodata:000000000001676D                 db    0
.rodata:000000000001676E                 db    0
.rodata:000000000001676F                 db    0
.rodata:0000000000016770 filetype_letter db '?pcdb-lswd',0       ; DATA XREF: print_long_format+3F6↑o
.rodata:000000000001677B                 align 20h
.rodata:0000000000016780 ; const char G_line[]
.rodata:0000000000016780 G_line          db '# Configuration file for dircolors, a utility to help you set the'
.rodata:0000000000016780                                         ; DATA XREF: main+128A↑o
.rodata:0000000000016780                 db 0
.rodata:00000000000167C2 aLsColorsEnviro db '# LS_COLORS environment variable used by GNU ls with the --color '
.rodata:00000000000167C2                 db 'option.',0
.rodata:000000000001680B aCopyrightC1996 db '# Copyright (C) 1996-2019 Free Software Foundation, Inc.',0
.rodata:0000000000016844 aCopyingAndDist db '# Copying and distribution of this file, with or without modifica'
.rodata:0000000000016844                 db 'tion,',0
.rodata:000000000001688B aArePermittedPr db '# are permitted provided the copyright notice and this notice are'
.rodata:000000000001688B                 db ' preserved.',0
.rodata:00000000000168D8 aTheKeywordsCol db '# The keywords COLOR, OPTIONS, and EIGHTBIT (honored by the',0
.rodata:0000000000016914 aSlackwareVersi db '# slackware version of dircolors) are recognized but ignored.',0
.rodata:0000000000016952 aBelowAreTermEn db '# Below are TERM entries, which can be a glob patterns, to match',0
.rodata:0000000000016993 aAgainstTheTerm db '# against the TERM environment variable to determine if it is col'
.rodata:0000000000016993                 db 'orizable.',0
.rodata:00000000000169DE aTermEterm      db 'TERM Eterm',0
.rodata:00000000000169E9 aTermAnsi       db 'TERM ansi',0
.rodata:00000000000169F3 aTermColor      db 'TERM *color*',0
.rodata:0000000000016A00 aTermCon09X09   db 'TERM con[0-9]*x[0-9]*',0
.rodata:0000000000016A16 aTermCons25     db 'TERM cons25',0
.rodata:0000000000016A22 aTermConsole    db 'TERM console',0
.rodata:0000000000016A2F aTermCygwin     db 'TERM cygwin',0
.rodata:0000000000016A3B aTermDtterm     db 'TERM dtterm',0
.rodata:0000000000016A47 aTermGnome      db 'TERM gnome',0
.rodata:0000000000016A52 aTermHurd       db 'TERM hurd',0
.rodata:0000000000016A5C aTermJfbterm    db 'TERM jfbterm',0
.rodata:0000000000016A69 aTermKonsole    db 'TERM konsole',0
.rodata:0000000000016A76 aTermKterm      db 'TERM kterm',0
.rodata:0000000000016A81 aTermLinux      db 'TERM linux',0
.rodata:0000000000016A8C aTermLinuxC     db 'TERM linux-c',0
.rodata:0000000000016A99 aTermMlterm     db 'TERM mlterm',0
.rodata:0000000000016AA5 aTermPutty      db 'TERM putty',0
.rodata:0000000000016AB0 aTermRxvt       db 'TERM rxvt*',0
.rodata:0000000000016ABB aTermScreen     db 'TERM screen*',0
.rodata:0000000000016AC8 aTermSt         db 'TERM st',0
.rodata:0000000000016AD0 aTermTerminator db 'TERM terminator',0
.rodata:0000000000016AE0 aTermTmux       db 'TERM tmux*',0
.rodata:0000000000016AEB aTermVt100      db 'TERM vt100',0
.rodata:0000000000016AF6 aTermXterm      db 'TERM xterm*',0
.rodata:0000000000016B02 aBelowAreTheCol db '# Below are the color init strings for the basic file types.',0
.rodata:0000000000016B3F aOneCanUseCodes db '# One can use codes for 256 or more colors supported by modern te'
.rodata:0000000000016B3F                 db 'rminals.',0
.rodata:0000000000016B89 aTheDefaultColo db '# The default color codes use the capabilities of an 8 color term'
.rodata:0000000000016B89                 db 'inal',0
.rodata:0000000000016BCF aWithSomeAdditi db '# with some additional attributes as per the following codes:',0
.rodata:0000000000016C0D aAttributeCodes db '# Attribute codes:',0
.rodata:0000000000016C20 a00None01Bold04 db '# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed',0
.rodata:0000000000016C61 aTextColorCodes db '# Text color codes:',0
.rodata:0000000000016C75 a30Black31Red32 db '# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 3'
.rodata:0000000000016C75                 db '7=white',0
.rodata:0000000000016CBE aBackgroundColo db '# Background color codes:',0
.rodata:0000000000016CD8 a40Black41Red42 db '# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 4'
.rodata:0000000000016CD8                 db '7=white',0
.rodata:0000000000016D21 aNormal00NoColo db '#NORMAL 00 # no color code at all',0
.rodata:0000000000016D43 aFile00RegularF db '#FILE 00 # regular file: use no color at all',0
.rodata:0000000000016D70 aReset0ResetToN db 'RESET 0 # reset to "normal" color',0
.rodata:0000000000016D92 aDir0134Directo db 'DIR 01;34 # directory',0
.rodata:0000000000016DA8 aLink0136Symbol db 'LINK 01;36 # symbolic link. (If you set this to ',27h,'target',27h
.rodata:0000000000016DA8                 db ' instead of a',0
.rodata:0000000000016DEE aNumericalValue db ' # numerical value, the color is as for the file pointed to.)',0
.rodata:0000000000016E2C aMultihardlink0 db 'MULTIHARDLINK 00 # regular file with more than one link',0
.rodata:0000000000016E64 aFifo4033Pipe   db 'FIFO 40;33 # pipe',0
.rodata:0000000000016E76 aSock0135Socket db 'SOCK 01;35 # socket',0
.rodata:0000000000016E8A aDoor0135Door   db 'DOOR 01;35 # door',0
.rodata:0000000000016E9C aBlk403301Block db 'BLK 40;33;01 # block device driver',0
.rodata:0000000000016EBF aChr403301Chara db 'CHR 40;33;01 # character device driver',0
.rodata:0000000000016EE6 aOrphan403101Sy db 'ORPHAN 40;31;01 # symlink to nonexistent file, or non-stat',27h,'a'
.rodata:0000000000016EE6                 db 'ble file ...',0
.rodata:0000000000016F2F aMissing00AndTh db 'MISSING 00 # ... and the files they point to',0
.rodata:0000000000016F5C aSetuid3741File db 'SETUID 37;41 # file that is setuid (u+s)',0
.rodata:0000000000016F85 aSetgid3043File db 'SETGID 30;43 # file that is setgid (g+s)',0
.rodata:0000000000016FAE aCapability3041 db 'CAPABILITY 30;41 # file with capability',0
.rodata:0000000000016FD6 aStickyOtherWri db 'STICKY_OTHER_WRITABLE 30;42 # dir that is sticky and other-writab'
.rodata:0000000000016FD6                 db 'le (+t,o+w)',0
.rodata:0000000000017023 aOtherWritable3 db 'OTHER_WRITABLE 34;42 # dir that is other-writable (o+w) and not s'
.rodata:0000000000017023                 db 'ticky',0
.rodata:000000000001706A aSticky3744DirW db 'STICKY 37;44 # dir with the sticky bit set (+t) and not other-wri'
.rodata:000000000001706A                 db 'table',0
.rodata:00000000000170B1 aThisIsForFiles db '# This is for files with execute permission:',0
.rodata:00000000000170DE aExec0132       db 'EXEC 01;32',0
.rodata:00000000000170E9 aListAnyFileExt db '# List any file extensions like ',27h,'.gz',27h,' or ',27h,'.tar',27h
.rodata:00000000000170E9                 db ' that you would like ls',0
.rodata:0000000000017130 aToColorizeBelo db '# to colorize below. Put the extension, a space, and the color in'
.rodata:0000000000017130                 db 'it string.',0
.rodata:000000000001717C aAndAnyComments db '# (and any comments you want to add after a ',27h,'#',27h,')',0
.rodata:00000000000171AD aIfYouUseDosSty db '# If you use DOS-style suffixes, you may want to uncomment the fo'
.rodata:00000000000171AD                 db 'llowing:',0
.rodata:00000000000171F7 aCmd0132Executa db '#.cmd 01;32 # executables (bright green)',0
.rodata:0000000000017220 aExe0132        db '#.exe 01;32',0
.rodata:000000000001722C aCom0132        db '#.com 01;32',0
.rodata:0000000000017238 aBtm0132        db '#.btm 01;32',0
.rodata:0000000000017244 aBat0132        db '#.bat 01;32',0
.rodata:0000000000017250 aOrIfYouWantToC db '# Or if you want to colorize scripts even if they do not have the'
.rodata:0000000000017250                 db 0
.rodata:0000000000017292 aExecutableBitA db '# executable bit actually set.',0
.rodata:00000000000172B1 aSh0132         db '#.sh 01;32',0
.rodata:00000000000172BC aCsh0132        db '#.csh 01;32',0
.rodata:00000000000172C8 aArchivesOrComp db ' # archives or compressed (bright red)',0
.rodata:00000000000172EF aTar0131        db '.tar 01;31',0
.rodata:00000000000172FA aTgz0131        db '.tgz 01;31',0
.rodata:0000000000017305 aArc0131        db '.arc 01;31',0
.rodata:0000000000017310 aArj0131        db '.arj 01;31',0
.rodata:000000000001731B aTaz0131        db '.taz 01;31',0
.rodata:0000000000017326 aLha0131        db '.lha 01;31',0
.rodata:0000000000017331 aLz40131        db '.lz4 01;31',0
.rodata:000000000001733C aLzh0131        db '.lzh 01;31',0
.rodata:0000000000017347 aLzma0131       db '.lzma 01;31',0
.rodata:0000000000017353 aTlz0131        db '.tlz 01;31',0
.rodata:000000000001735E aTxz0131        db '.txz 01;31',0
.rodata:0000000000017369 aTzo0131        db '.tzo 01;31',0
.rodata:0000000000017374 aT7z0131        db '.t7z 01;31',0
.rodata:000000000001737F aZip0131        db '.zip 01;31',0
.rodata:000000000001738A aZ0131          db '.z 01;31',0
.rodata:0000000000017393 aDz0131         db '.dz 01;31',0
.rodata:000000000001739D aGz0131         db '.gz 01;31',0
.rodata:00000000000173A7 aLrz0131        db '.lrz 01;31',0
.rodata:00000000000173B2 aLz0131         db '.lz 01;31',0
.rodata:00000000000173BC aLzo0131        db '.lzo 01;31',0
.rodata:00000000000173C7 aXz0131         db '.xz 01;31',0
.rodata:00000000000173D1 aZst0131        db '.zst 01;31',0
.rodata:00000000000173DC aTzst0131       db '.tzst 01;31',0
.rodata:00000000000173E8 aBz20131        db '.bz2 01;31',0
.rodata:00000000000173F3 aBz0131         db '.bz 01;31',0
.rodata:00000000000173FD aTbz0131        db '.tbz 01;31',0
.rodata:0000000000017408 aTbz20131       db '.tbz2 01;31',0
.rodata:0000000000017414 aTz0131         db '.tz 01;31',0
.rodata:000000000001741E aDeb0131        db '.deb 01;31',0
.rodata:0000000000017429 aRpm0131        db '.rpm 01;31',0
.rodata:0000000000017434 aJar0131        db '.jar 01;31',0
.rodata:000000000001743F aWar0131        db '.war 01;31',0
.rodata:000000000001744A aEar0131        db '.ear 01;31',0
.rodata:0000000000017455 aSar0131        db '.sar 01;31',0
.rodata:0000000000017460 aRar0131        db '.rar 01;31',0
.rodata:000000000001746B aAlz0131        db '.alz 01;31',0
.rodata:0000000000017476 aAce0131        db '.ace 01;31',0
.rodata:0000000000017481 aZoo0131        db '.zoo 01;31',0
.rodata:000000000001748C aCpio0131       db '.cpio 01;31',0
.rodata:0000000000017498 a7z0131         db '.7z 01;31',0
.rodata:00000000000174A2 aRz0131         db '.rz 01;31',0
.rodata:00000000000174AC aCab0131        db '.cab 01;31',0
.rodata:00000000000174B7 aWim0131        db '.wim 01;31',0
.rodata:00000000000174C2 aSwm0131        db '.swm 01;31',0
.rodata:00000000000174CD aDwm0131        db '.dwm 01;31',0
.rodata:00000000000174D8 aEsd0131        db '.esd 01;31',0
.rodata:00000000000174E3 aImageFormats   db '# image formats',0
.rodata:00000000000174F3 aJpg0135        db '.jpg 01;35',0
.rodata:00000000000174FE aJpeg0135       db '.jpeg 01;35',0
.rodata:000000000001750A aMjpg0135       db '.mjpg 01;35',0
.rodata:0000000000017516 aMjpeg0135      db '.mjpeg 01;35',0
.rodata:0000000000017523 aGif0135        db '.gif 01;35',0
.rodata:000000000001752E aBmp0135        db '.bmp 01;35',0
.rodata:0000000000017539 aPbm0135        db '.pbm 01;35',0
.rodata:0000000000017544 aPgm0135        db '.pgm 01;35',0
.rodata:000000000001754F aPpm0135        db '.ppm 01;35',0
.rodata:000000000001755A aTga0135        db '.tga 01;35',0
.rodata:0000000000017565 aXbm0135        db '.xbm 01;35',0
.rodata:0000000000017570 aXpm0135        db '.xpm 01;35',0
.rodata:000000000001757B aTif0135        db '.tif 01;35',0
.rodata:0000000000017586 aTiff0135       db '.tiff 01;35',0
.rodata:0000000000017592 aPng0135        db '.png 01;35',0
.rodata:000000000001759D aSvg0135        db '.svg 01;35',0
.rodata:00000000000175A8 aSvgz0135       db '.svgz 01;35',0
.rodata:00000000000175B4 aMng0135        db '.mng 01;35',0
.rodata:00000000000175BF aPcx0135        db '.pcx 01;35',0
.rodata:00000000000175CA aMov0135        db '.mov 01;35',0
.rodata:00000000000175D5 aMpg0135        db '.mpg 01;35',0
.rodata:00000000000175E0 aMpeg0135       db '.mpeg 01;35',0
.rodata:00000000000175EC aM2v0135        db '.m2v 01;35',0
.rodata:00000000000175F7 aMkv0135        db '.mkv 01;35',0
.rodata:0000000000017602 aWebm0135       db '.webm 01;35',0
.rodata:000000000001760E aOgm0135        db '.ogm 01;35',0
.rodata:0000000000017619 aMp40135        db '.mp4 01;35',0
.rodata:0000000000017624 aM4v0135        db '.m4v 01;35',0
.rodata:000000000001762F aMp4v0135       db '.mp4v 01;35',0
.rodata:000000000001763B aVob0135        db '.vob 01;35',0
.rodata:0000000000017646 aQt0135         db '.qt 01;35',0
.rodata:0000000000017650 aNuv0135        db '.nuv 01;35',0
.rodata:000000000001765B aWmv0135        db '.wmv 01;35',0
.rodata:0000000000017666 aAsf0135        db '.asf 01;35',0
.rodata:0000000000017671 aRm0135         db '.rm 01;35',0
.rodata:000000000001767B aRmvb0135       db '.rmvb 01;35',0
.rodata:0000000000017687 aFlc0135        db '.flc 01;35',0
.rodata:0000000000017692 aAvi0135        db '.avi 01;35',0
.rodata:000000000001769D aFli0135        db '.fli 01;35',0
.rodata:00000000000176A8 aFlv0135        db '.flv 01;35',0
.rodata:00000000000176B3 aGl0135         db '.gl 01;35',0
.rodata:00000000000176BD aDl0135         db '.dl 01;35',0
.rodata:00000000000176C7 aXcf0135        db '.xcf 01;35',0
.rodata:00000000000176D2 aXwd0135        db '.xwd 01;35',0
.rodata:00000000000176DD aYuv0135        db '.yuv 01;35',0
.rodata:00000000000176E8 aCgm0135        db '.cgm 01;35',0
.rodata:00000000000176F3 aEmf0135        db '.emf 01;35',0
.rodata:00000000000176FE aHttpsWikiXiphO db '# https://wiki.xiph.org/MIME_Types_and_File_Extensions',0
.rodata:0000000000017735 aOgv0135        db '.ogv 01;35',0
.rodata:0000000000017740 aOgx0135        db '.ogx 01;35',0
.rodata:000000000001774B aAudioFormats   db '# audio formats',0
.rodata:000000000001775B aAac0036        db '.aac 00;36',0
.rodata:0000000000017766 aAu0036         db '.au 00;36',0
.rodata:0000000000017770 aFlac0036       db '.flac 00;36',0
.rodata:000000000001777C aM4a0036        db '.m4a 00;36',0
.rodata:0000000000017787 aMid0036        db '.mid 00;36',0
.rodata:0000000000017792 aMidi0036       db '.midi 00;36',0
.rodata:000000000001779E aMka0036        db '.mka 00;36',0
.rodata:00000000000177A9 aMp30036        db '.mp3 00;36',0
.rodata:00000000000177B4 aMpc0036        db '.mpc 00;36',0
.rodata:00000000000177BF aOgg0036        db '.ogg 00;36',0
.rodata:00000000000177CA aRa0036         db '.ra 00;36',0
.rodata:00000000000177D4 aWav0036        db '.wav 00;36',0
.rodata:00000000000177DF aHttpsWikiXiphO_0 db '# https://wiki.xiph.org/MIME_Types_and_File_Extensions',0
.rodata:0000000000017816 aOga0036        db '.oga 00;36',0
.rodata:0000000000017821 aOpus0036       db '.opus 00;36',0
.rodata:000000000001782D aSpx0036        db '.spx 00;36',0
.rodata:0000000000017838 aXspf0036       db '.xspf 00;36',0
.rodata:0000000000017844 a00             db '00',0               ; DATA XREF: is_colored+2F↑o
.rodata:0000000000017844                                         ; .data:0000000000220098↓o
.rodata:0000000000017847 aSSS            db '%.*s%s%s',0         ; DATA XREF: abformat_init+205↑o
.rodata:0000000000017850 a02x            db '%%%02x',0           ; DATA XREF: file_escape:loc_5BF0↑o
.rodata:0000000000017857 ; const char file[]
.rodata:0000000000017857 file            db '../coreutils-8.31/src/ls.c',0
.rodata:0000000000017857                                         ; DATA XREF: main+194E↑o
.rodata:0000000000017857                                         ; main+196D↑o ...
.rodata:0000000000017872 ; const char aSortTypeSortVe[]
.rodata:0000000000017872 aSortTypeSortVe db 'sort_type != sort_version',0
.rodata:0000000000017872                                         ; DATA XREF: sort_files+175↑o
.rodata:000000000001788C aLu             db ' %lu',0             ; DATA XREF: dired_dump_obstack+57↑o
.rodata:000000000001788C                                         ; format_user_width+24↑o ...
.rodata:0000000000017891 aLu_0           db '%*lu ',0            ; DATA XREF: format_user_or_group+A3↑o
.rodata:0000000000017897 ; const char s[]
.rodata:0000000000017897 s               db '?',0                ; DATA XREF: format_user+1↑o
.rodata:0000000000017897                                         ; print_file_name_and_frills+37↑o ...
.rodata:0000000000017899 a8FileSSS       db 1Bh,']8;;file://%s%s%s',7,0
.rodata:0000000000017899                                         ; DATA XREF: quote_name+106↑o
.rodata:00000000000178AD a8              db 1Bh,']8;;',7,0       ; DATA XREF: quote_name+1DC↑o
.rodata:00000000000178AD                                         ; main+2B↑o ...
.rodata:00000000000178B4 aSS_0           db '%s %*s ',0          ; DATA XREF: print_long_format+1C1↑o
.rodata:00000000000178BC asc_178BC       db '  ',0               ; DATA XREF: print_long_format+62F↑o
.rodata:00000000000178BC                                         ; print_dir+5EF↑o ...
.rodata:00000000000178BF unk_178BF       db  25h ; %             ; DATA XREF: print_long_format+8AB↑o
.rodata:00000000000178C0                 db  2Ah ; *
.rodata:00000000000178C1                 db  73h ; s
.rodata:00000000000178C2                 db  2Ch ; ,
.rodata:00000000000178C3                 db  20h
.rodata:00000000000178C4 aS              db '%*s ',0             ; DATA XREF: print_file_name_and_frills:loc_7D5E↑o
.rodata:00000000000178C4                                         ; print_file_name_and_frills:loc_7D9F↑o ...
.rodata:00000000000178C9 asc_178C9       db ' -> ',0             ; DATA XREF: print_long_format+502↑o
.rodata:00000000000178CE ; const char aErrorCanonical[]
.rodata:00000000000178CE aErrorCanonical db 'error canonicalizing %s',0
.rodata:00000000000178CE                                         ; DATA XREF: gobble_file_constprop_52+584↑o
.rodata:00000000000178CE                                         ; print_dir+62B↑o
.rodata:00000000000178E6 ; const char aCannotAccessS[]
.rodata:00000000000178E6 aCannotAccessS  db 'cannot access %s',0 ; DATA XREF: gobble_file_constprop_52:loc_9B58↑o
.rodata:00000000000178E6                                         ; gobble_file_constprop_52:loc_A27E↑o
.rodata:00000000000178F7 ; const char aCannotReadSymb[]
.rodata:00000000000178F7 aCannotReadSymb db 'cannot read symbolic link %s',0
.rodata:00000000000178F7                                         ; DATA XREF: gobble_file_constprop_52:loc_A2B0↑o
.rodata:0000000000017914 ; const char aCannotOpenDire[]
.rodata:0000000000017914 aCannotOpenDire db 'cannot open directory %s',0
.rodata:0000000000017914                                         ; DATA XREF: print_dir:loc_A970↑o
.rodata:000000000001792D ; const char aReadingDirecto[]
.rodata:000000000001792D aReadingDirecto db 'reading directory %s',0
.rodata:000000000001792D                                         ; DATA XREF: print_dir+358↑o
.rodata:0000000000017942 ; const char aClosingDirecto[]
.rodata:0000000000017942 aClosingDirecto db 'closing directory %s',0
.rodata:0000000000017942                                         ; DATA XREF: print_dir:loc_A9B0↑o
.rodata:0000000000017957 ; const char aTotal[]
.rodata:0000000000017957 aTotal          db 'total',0            ; DATA XREF: print_dir:loc_A7BC↑o
.rodata:000000000001795D aVdir           db 'vdir',0             ; DATA XREF: main+56A↑o
.rodata:000000000001795D                                         ; usage+4EA↑o ...
.rodata:0000000000017962 aTestInvocation db 'test invocation',0  ; DATA XREF: usage:loc_BE0C↑o
.rodata:0000000000017972 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000017972                                         ; DATA XREF: usage+547↑o
.rodata:0000000000017972                                         ; usage+641↑o ...
.rodata:0000000000017988 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+55F↑o
.rodata:0000000000017992 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+570↑o
.rodata:00000000000179A1 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+503↑o
.rodata:00000000000179AB aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+537↑o
.rodata:00000000000179B5 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+553↑o
.rodata:00000000000179B5                                         ; .data:off_220078↓o
.rodata:00000000000179BF ; const char aSOnlineHelpS[]
.rodata:00000000000179BF aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+5B3↑o
.rodata:00000000000179BF                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000179D6 unk_179D6       db  47h ; G             ; DATA XREF: main+597↑o
.rodata:00000000000179D6                                         ; usage+5CF↑o ...
.rodata:00000000000179D7                 db  4Eh ; N
.rodata:00000000000179D8                 db  55h ; U
.rodata:00000000000179D9                 db  20h
.rodata:00000000000179DA ; const char domainname[]
.rodata:00000000000179DA domainname      db 'coreutils',0        ; DATA XREF: main+43↑o
.rodata:00000000000179DA                                         ; main+4F↑o ...
.rodata:00000000000179E4 ; const char aEn[]
.rodata:00000000000179E4 aEn             db 'en_',0              ; DATA XREF: usage+5F6↑o
.rodata:00000000000179E4                                         ; usage+6B3↑o
.rodata:00000000000179E8 ; const char aFullDocumentat[]
.rodata:00000000000179E8 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000179E8                                         ; DATA XREF: usage:loc_BF22↑o
.rodata:00000000000179E8                                         ; usage:loc_BFDB↑o
.rodata:0000000000017A03 aFullIso        db 'full-iso',0         ; DATA XREF: main+7B2↑o
.rodata:0000000000017A03                                         ; main+17C9↑o ...
.rodata:0000000000017A0C ; const char aLc[]
.rodata:0000000000017A0C aLc             db 'lc',0               ; DATA XREF: main+15E8↑o
.rodata:0000000000017A0C                                         ; .data.rel.ro:indicator_name↓o
.rodata:0000000000017A0F ; const char dirname[]
.rodata:0000000000017A0F dirname         db '/usr/local/share/locale',0
.rodata:0000000000017A0F                                         ; DATA XREF: main+3C↑o
.rodata:0000000000017A27 ; const char name[]
.rodata:0000000000017A27 name            db 'QUOTING_STYLE',0    ; DATA XREF: main:loc_3988↑o
.rodata:0000000000017A35 ; const char aColumns[]
.rodata:0000000000017A35 aColumns        db 'COLUMNS',0          ; DATA XREF: main:loc_3A4B↑o
.rodata:0000000000017A3D ; const char aTabsize[]
.rodata:0000000000017A3D aTabsize        db 'TABSIZE',0          ; DATA XREF: main:loc_3AA2↑o
.rodata:0000000000017A45 ; const char aInvalidLineWid[]
.rodata:0000000000017A45 aInvalidLineWid db 'invalid line width',0
.rodata:0000000000017A45                                         ; DATA XREF: main+95A↑o
.rodata:0000000000017A45                                         ; .data.rel.ro:000000000021F500↓o
.rodata:0000000000017A58 ; const char aSS[]
.rodata:0000000000017A58 aSS             db '%s: %s',0           ; DATA XREF: main+970↑o
.rodata:0000000000017A58                                         ; close_stdout+6C↑o ...
.rodata:0000000000017A5F asc_17A5F       db '.*~',0              ; DATA XREF: main+509↑o
.rodata:0000000000017A5F                                         ; main+4E3↑o
.rodata:0000000000017A63 ; const char msgid[]
.rodata:0000000000017A63 msgid           db 'invalid tab size',0 ; DATA XREF: main:loc_3C65↑o
.rodata:0000000000017A63                                         ; .data.rel.ro:000000000021F2D0↓o ...
.rodata:0000000000017A74 aSort           db '--sort',0           ; DATA XREF: main+617↑o
.rodata:0000000000017A74                                         ; .data.rel.ro:000000000021F740↓o
.rodata:0000000000017A7B aTime           db '--time',0           ; DATA XREF: main+5D4↑o
.rodata:0000000000017A7B                                         ; .data.rel.ro:000000000021F2C8↓o ...
.rodata:0000000000017A82 aFormat         db '--format',0         ; DATA XREF: main+7DA↑o
.rodata:0000000000017A82                                         ; .data.rel.ro:000000000021F700↓o
.rodata:0000000000017A8B aColor          db '--color',0          ; DATA XREF: main+844↑o
.rodata:0000000000017A8B                                         ; .data.rel.ro:000000000021F7C0↓o
.rodata:0000000000017A93 aHyperlink      db '--hyperlink',0      ; DATA XREF: main+72A↑o
.rodata:0000000000017A93                                         ; .data.rel.ro:000000000021F7E0↓o
.rodata:0000000000017A9F aIndicatorStyle db '--indicator-style',0
.rodata:0000000000017A9F                                         ; DATA XREF: main+6DE↑o
.rodata:0000000000017A9F                                         ; .data.rel.ro:000000000021F640↓o
.rodata:0000000000017AB1 aQuotingStyle_0 db '--quoting-style',0  ; DATA XREF: main+69A↑o
.rodata:0000000000017AB1                                         ; .data.rel.ro:000000000021F6C0↓o
.rodata:0000000000017AC1 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+587↑o
.rodata:0000000000017AD1 aRichardMStallm db 'Richard M. Stallman',0
.rodata:0000000000017AD1                                         ; DATA XREF: main+590↑o
.rodata:0000000000017AE5 ; const char aLsBlockSize[]
.rodata:0000000000017AE5 aLsBlockSize    db 'LS_BLOCK_SIZE',0    ; DATA XREF: main:loc_48EB↑o
.rodata:0000000000017AE5                                         ; main:loc_5135↑o ...
.rodata:0000000000017AF3 asc_17AF3       db '*=>@|',0            ; DATA XREF: main+AC7↑o
.rodata:0000000000017AF9 ; const char aTimeStyle[]
.rodata:0000000000017AF9 aTimeStyle      db 'TIME_STYLE',0       ; DATA XREF: main:loc_4D85↑o
.rodata:0000000000017B04 ; const char aInvalidTimeSty[]
.rodata:0000000000017B04 aInvalidTimeSty db 'invalid time style format %s',0
.rodata:0000000000017B04                                         ; DATA XREF: main+191D↑o
.rodata:0000000000017B21 aTimeStyle_0    db 'time style',0       ; DATA XREF: main:loc_5024↑o
.rodata:0000000000017B2C ; const char aValidArguments[]
.rodata:0000000000017B2C aValidArguments db 'Valid arguments are:',0Ah,0
.rodata:0000000000017B2C                                         ; DATA XREF: main+17A4↑o
.rodata:0000000000017B42 aPosixS         db '  - [posix-]%s',0Ah,0
.rodata:0000000000017B42                                         ; DATA XREF: main+1791↑o
.rodata:0000000000017B52 aYMDHMSNZ       db '%Y-%m-%d %H:%M:%S.%N %z',0
.rodata:0000000000017B52                                         ; DATA XREF: main+16FF↑o
.rodata:0000000000017B6A unk_17B6A       db  25h ; %             ; DATA XREF: main:loc_5170↑o
.rodata:0000000000017B6B                 db  59h ; Y
.rodata:0000000000017B6C                 db  2Dh ; -
.rodata:0000000000017B6D aMDHM           db '%m-%d %H:%M',0      ; DATA XREF: main+18BD↑o
.rodata:0000000000017B6D                                         ; __strftime_internal:loc_10B9E↑o
.rodata:0000000000017B79 aYMD            db '%Y-%m-%d ',0        ; DATA XREF: main:loc_514F↑o
.rodata:0000000000017B83 ; const char aLsColors[]
.rodata:0000000000017B83 aLsColors       db 'LS_COLORS',0        ; DATA XREF: main:loc_4AD1↑o
.rodata:0000000000017B8D ; const char aColorterm[]
.rodata:0000000000017B8D aColorterm      db 'COLORTERM',0        ; DATA XREF: main:loc_4AF0↑o
.rodata:0000000000017B8D                                         ; main:loc_4B0A↑o
.rodata:0000000000017B97 ; const char s2[]
.rodata:0000000000017B97 s2              db 'TERM ',0            ; DATA XREF: main+12C1↑o
.rodata:0000000000017B9D ; const char aUnrecognizedPr[]
.rodata:0000000000017B9D aUnrecognizedPr db 'unrecognized prefix: %s',0
.rodata:0000000000017B9D                                         ; DATA XREF: main+1624↑o
.rodata:0000000000017BB5 ; const char aTarget[]
.rodata:0000000000017BB5 aTarget         db 'target',0           ; DATA XREF: main+16AE↑o
.rodata:0000000000017BBC ; const char aTz[]
.rodata:0000000000017BBC aTz             db 'TZ',0               ; DATA XREF: main:loc_44CB↑o
.rodata:0000000000017BBC                                         ; setenv_TZ+8↑o ...
.rodata:0000000000017BBF ; const char aFound[]
.rodata:0000000000017BBF aFound          db 'found',0            ; DATA XREF: main+1974↑o
.rodata:0000000000017BC5 aDired          db '//DIRED//',0        ; DATA XREF: main+11E1↑o
.rodata:0000000000017BC5                                         ; quote_name+F8↑o ...
.rodata:0000000000017BCF aSubdired       db '//SUBDIRED//',0     ; DATA XREF: main+11F4↑o
.rodata:0000000000017BDC aYes            db 'yes',0              ; DATA XREF: .data.rel.ro:000000000021F228↓o
.rodata:0000000000017BE0 aForce          db 'force',0            ; DATA XREF: .data.rel.ro:000000000021F230↓o
.rodata:0000000000017BE6 aNever          db 'never',0            ; DATA XREF: .data.rel.ro:000000000021F238↓o
.rodata:0000000000017BEC aNo             db 'no',0               ; DATA XREF: .data.rel.ro:000000000021F240↓o
.rodata:0000000000017BEC                                         ; .data.rel.ro:000000000021F8E0↓o
.rodata:0000000000017BEF aNone           db 'none',0             ; DATA XREF: .data.rel.ro:000000000021F248↓o
.rodata:0000000000017BEF                                         ; .data.rel.ro:sort_args↓o ...
.rodata:0000000000017BF4 aAuto           db 'auto',0             ; DATA XREF: .data.rel.ro:000000000021F250↓o
.rodata:0000000000017BF9 aIfTty          db 'if-tty',0           ; DATA XREF: .data.rel.ro:000000000021F260↓o
.rodata:0000000000017BF9                                         ; .data.rel.ro:000000000021F258↓o
.rodata:0000000000017C00 aAtime          db 'atime',0            ; DATA XREF: .data.rel.ro:time_args↓o
.rodata:0000000000017C06 aAccess         db 'access',0           ; DATA XREF: .data.rel.ro:000000000021F288↓o
.rodata:0000000000017C0D aUse            db 'use',0              ; DATA XREF: .data.rel.ro:000000000021F290↓o
.rodata:0000000000017C11 aCtime          db 'ctime',0            ; DATA XREF: .data.rel.ro:000000000021F298↓o
.rodata:0000000000017C17 aStatus         db 'status',0           ; DATA XREF: .data.rel.ro:000000000021F2A0↓o
.rodata:0000000000017C1E aExtension      db 'extension',0        ; DATA XREF: .data.rel.ro:000000000021F2D8↓o
.rodata:0000000000017C28 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:format_args↓o
.rodata:0000000000017C30 aLong           db 'long',0             ; DATA XREF: .data.rel.ro:000000000021F308↓o
.rodata:0000000000017C35 aCommas         db 'commas',0           ; DATA XREF: .data.rel.ro:000000000021F310↓o
.rodata:0000000000017C3C aHorizontal     db 'horizontal',0       ; DATA XREF: .data.rel.ro:000000000021F318↓o
.rodata:0000000000017C47 aAcross         db 'across',0           ; DATA XREF: .data.rel.ro:000000000021F320↓o
.rodata:0000000000017C4E aVertical       db 'vertical',0         ; DATA XREF: .data.rel.ro:000000000021F328↓o
.rodata:0000000000017C57 aSingleColumn   db 'single-column',0    ; DATA XREF: .data.rel.ro:000000000021F330↓o
.rodata:0000000000017C65 aDirectory      db 'directory',0        ; DATA XREF: .data.rel.ro:000000000021F380↓o
.rodata:0000000000017C6F aDired_0        db 'dired',0            ; DATA XREF: .data.rel.ro:000000000021F3A0↓o
.rodata:0000000000017C75 aFullTime       db 'full-time',0        ; DATA XREF: .data.rel.ro:000000000021F3C0↓o
.rodata:0000000000017C7F aGroupDirectori_0 db 'group-directories-first',0
.rodata:0000000000017C7F                                         ; DATA XREF: .data.rel.ro:000000000021F3E0↓o
.rodata:0000000000017C97 aHumanReadable  db 'human-readable',0   ; DATA XREF: .data.rel.ro:000000000021F400↓o
.rodata:0000000000017C97                                         ; .data.rel.ro:block_size_args↓o
.rodata:0000000000017CA6 aInode          db 'inode',0            ; DATA XREF: .data.rel.ro:000000000021F420↓o
.rodata:0000000000017CAC aKibibytes      db 'kibibytes',0        ; DATA XREF: .data.rel.ro:000000000021F440↓o
.rodata:0000000000017CB6 aNumericUidGid  db 'numeric-uid-gid',0  ; DATA XREF: .data.rel.ro:000000000021F460↓o
.rodata:0000000000017CC6 aNoGroup        db 'no-group',0         ; DATA XREF: .data.rel.ro:000000000021F480↓o
.rodata:0000000000017CCF aHideControlCha db 'hide-control-chars',0
.rodata:0000000000017CCF                                         ; DATA XREF: .data.rel.ro:000000000021F4A0↓o
.rodata:0000000000017CE2 aReverse        db 'reverse',0          ; DATA XREF: .data.rel.ro:000000000021F4C0↓o
.rodata:0000000000017CEA aAlmostAll      db 'almost-all',0       ; DATA XREF: .data.rel.ro:000000000021F520↓o
.rodata:0000000000017CEA                                         ; .data.rel.ro:long_options↓o
.rodata:0000000000017CF5 aIgnoreBackups  db 'ignore-backups',0   ; DATA XREF: .data.rel.ro:000000000021F540↓o
.rodata:0000000000017D04 aClassify       db 'classify',0         ; DATA XREF: .data.rel.ro:000000000021F560↓o
.rodata:0000000000017D04                                         ; .data.rel.ro:000000000021F9B8↓o
.rodata:0000000000017D0D aFileType       db 'file-type',0        ; DATA XREF: .data.rel.ro:000000000021F580↓o
.rodata:0000000000017D0D                                         ; .data.rel.ro:000000000021F9B0↓o
.rodata:0000000000017D17 aSi             db 'si',0               ; DATA XREF: .data.rel.ro:000000000021F5A0↓o
.rodata:0000000000017D17                                         ; .data.rel.ro:000000000021FA18↓o
.rodata:0000000000017D1A aDereferenceCom db 'dereference-command-line',0
.rodata:0000000000017D1A                                         ; DATA XREF: .data.rel.ro:000000000021F5C0↓o
.rodata:0000000000017D33 aHide           db 'hide',0             ; DATA XREF: .data.rel.ro:000000000021F600↓o
.rodata:0000000000017D38 aIgnore         db 'ignore',0           ; DATA XREF: .data.rel.ro:000000000021F620↓o
.rodata:0000000000017D3F aDereference    db 'dereference',0      ; DATA XREF: .data.rel.ro:000000000021F660↓o
.rodata:0000000000017D4B aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:000000000021F680↓o
.rodata:0000000000017D4B                                         ; .data.rel.ro:quoting_style_args↓o
.rodata:0000000000017D53 aQuoteName      db 'quote-name',0       ; DATA XREF: .data.rel.ro:000000000021F6A0↓o
.rodata:0000000000017D5E aRecursive      db 'recursive',0        ; DATA XREF: .data.rel.ro:000000000021F6E0↓o
.rodata:0000000000017D68 aShowControlCha db 'show-control-chars',0
.rodata:0000000000017D68                                         ; DATA XREF: .data.rel.ro:000000000021F720↓o
.rodata:0000000000017D7B aTabsize_0      db 'tabsize',0          ; DATA XREF: .data.rel.ro:000000000021F760↓o
.rodata:0000000000017D83 aTimeStyle_1    db 'time-style',0       ; DATA XREF: .data.rel.ro:000000000021F7A0↓o
.rodata:0000000000017D8E aBlockSize      db 'block-size',0       ; DATA XREF: .data.rel.ro:000000000021F800↓o
.rodata:0000000000017D99 aContext        db 'context',0          ; DATA XREF: .data.rel.ro:000000000021F820↓o
.rodata:0000000000017DA1 aAuthor         db 'author',0           ; DATA XREF: .data.rel.ro:000000000021F840↓o
.rodata:0000000000017DA1                                         ; .data.rel.ro:000000000021F928↓o
.rodata:0000000000017DA8 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000021F860↓o
.rodata:0000000000017DAD aBEY            db '%b %e  %Y',0        ; DATA XREF: .data:long_time_format↓o
.rodata:0000000000017DB7 aBEHM           db '%b %e %H:%M',0      ; DATA XREF: .data:off_220048↓o
.rodata:0000000000017DC3 asc_17DC3       db 1Bh,'[',0            ; DATA XREF: .data:off_220068↓o
.rodata:0000000000017DC3                                         ; usage+50A↑o
.rodata:0000000000017DC6 a0134           db '01;34',0            ; DATA XREF: .data:00000000002200C8↓o
.rodata:0000000000017DCC a0136           db '01;36',0            ; DATA XREF: .data:s1↓o
.rodata:0000000000017DD2 a0135           db '01;35',0            ; DATA XREF: .data:00000000002200F8↓o
.rodata:0000000000017DD2                                         ; .data:0000000000220158↓o
.rodata:0000000000017DD8 a0133           db '01;33',0            ; DATA XREF: .data:0000000000220108↓o
.rodata:0000000000017DD8                                         ; .data:0000000000220118↓o ...
.rodata:0000000000017DDE a0132           db '01;32',0            ; DATA XREF: .data:0000000000220148↓o
.rodata:0000000000017DE4 a3741           db '37;41',0            ; DATA XREF: .data:0000000000220168↓o
.rodata:0000000000017DEA a3043           db '30;43',0            ; DATA XREF: .data:0000000000220178↓o
.rodata:0000000000017DF0 a3744           db '37;44',0            ; DATA XREF: .data:0000000000220188↓o
.rodata:0000000000017DF6 a3442           db '34;42',0            ; DATA XREF: .data:0000000000220198↓o
.rodata:0000000000017DFC a3042           db '30;42',0            ; DATA XREF: .data:00000000002201A8↓o
.rodata:0000000000017E02 a3041           db '30;41',0            ; DATA XREF: .data:00000000002201B8↓o
.rodata:0000000000017E08 aK              db 1Bh,'[K',0           ; DATA XREF: .data:00000000002201D8↓o
.rodata:0000000000017E0C aRc             db 'rc',0               ; DATA XREF: .data.rel.ro:000000000021F8C8↓o
.rodata:0000000000017E0F aEc             db 'ec',0               ; DATA XREF: .data.rel.ro:000000000021F8D0↓o
.rodata:0000000000017E12 aFi             db 'fi',0               ; DATA XREF: .data.rel.ro:000000000021F8E8↓o
.rodata:0000000000017E15 aDi             db 'di',0               ; DATA XREF: .data.rel.ro:000000000021F8F0↓o
.rodata:0000000000017E18 aLn             db 'ln',0               ; DATA XREF: .data.rel.ro:000000000021F8F8↓o
.rodata:0000000000017E1B aPi             db 'pi',0               ; DATA XREF: .data.rel.ro:000000000021F900↓o
.rodata:0000000000017E1E aBd             db 'bd',0               ; DATA XREF: .data.rel.ro:000000000021F910↓o
.rodata:0000000000017E21 aCd             db 'cd',0               ; DATA XREF: .data.rel.ro:000000000021F918↓o
.rodata:0000000000017E24 aMi             db 'mi',0               ; DATA XREF: .data.rel.ro:000000000021F920↓o
.rodata:0000000000017E27 aEx             db 'ex',0               ; DATA XREF: .data.rel.ro:000000000021F930↓o
.rodata:0000000000017E2A aDo             db 'do',0               ; DATA XREF: .data.rel.ro:000000000021F938↓o
.rodata:0000000000017E2D aSu             db 'su',0               ; DATA XREF: .data.rel.ro:000000000021F940↓o
.rodata:0000000000017E30 aSg             db 'sg',0               ; DATA XREF: .data.rel.ro:000000000021F948↓o
.rodata:0000000000017E33 aOw             db 'ow',0               ; DATA XREF: .data.rel.ro:000000000021F958↓o
.rodata:0000000000017E36 aTw             db 'tw',0               ; DATA XREF: .data.rel.ro:000000000021F960↓o
.rodata:0000000000017E39 aCa             db 'ca',0               ; DATA XREF: .data.rel.ro:000000000021F968↓o
.rodata:0000000000017E3C aMh             db 'mh',0               ; DATA XREF: .data.rel.ro:000000000021F970↓o
.rodata:0000000000017E3F aCl             db 'cl',0               ; DATA XREF: .data.rel.ro:000000000021F978↓o
.rodata:0000000000017E42 aSlash          db 'slash',0            ; DATA XREF: .data.rel.ro:000000000021F9A8↓o
.rodata:0000000000017E48 aLongIso        db 'long-iso',0         ; DATA XREF: .data.rel.ro:000000000021F9E8↓o
.rodata:0000000000017E48                                         ; .data.rel.ro:000000000021F9F0↓o ...
.rodata:0000000000017E51                 align 8
.rodata:0000000000017E58 ; const char aCannotDetermin[]
.rodata:0000000000017E58 aCannotDetermin db 'cannot determine device and inode of %s',0
.rodata:0000000000017E58                                         ; DATA XREF: print_dir:loc_A476↑o
.rodata:0000000000017E80 ; const char aSNotListingAlr[]
.rodata:0000000000017E80 aSNotListingAlr db '%s: not listing already-listed directory',0
.rodata:0000000000017E80                                         ; DATA XREF: print_dir+14E↑o
.rodata:0000000000017EA9                 align 10h
.rodata:0000000000017EB0 ; const char aTrySHelpForMor[]
.rodata:0000000000017EB0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000017EB0                                         ; DATA XREF: usage+30↑o
.rodata:0000000000017ED7                 align 8
.rodata:0000000000017ED8 ; const char aUsageSOptionFi[]
.rodata:0000000000017ED8 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000017ED8                                         ; DATA XREF: usage:loc_B96F↑o
.rodata:0000000000017EF9                 align 20h
.rodata:0000000000017F00 ; const char aListInformatio[]
.rodata:0000000000017F00 aListInformatio db 'List information about the FILEs (the current directory by defaul'
.rodata:0000000000017F00                                         ; DATA XREF: usage+8D↑o
.rodata:0000000000017F00                 db 't).',0Ah
.rodata:0000000000017F00                 db 'Sort entries alphabetically if none of -cftuvSUX nor --sort is sp'
.rodata:0000000000017F00                 db 'ecified.',0Ah,0
.rodata:0000000000017F90 ; const char aMandatoryArgum[]
.rodata:0000000000017F90 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+B2↑o
.rodata:0000000000017F90                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000017F90                 db 'ns too.',0Ah,0
.rodata:0000000000017FDB                 align 20h
.rodata:0000000000017FE0 ; const char aAAllDoNotIgnor[]
.rodata:0000000000017FE0 aAAllDoNotIgnor db '  -a, --all                  do not ignore entries starting with '
.rodata:0000000000017FE0                                         ; DATA XREF: usage+D7↑o
.rodata:0000000000017FE0                 db '.',0Ah
.rodata:0000000000017FE0                 db '  -A, --almost-all           do not list implied . and ..',0Ah
.rodata:0000000000017FE0                 db '      --author               with -l, print the author of each fi'
.rodata:0000000000017FE0                 db 'le',0Ah
.rodata:0000000000017FE0                 db '  -b, --escape               print C-style escapes for nongraphic'
.rodata:0000000000017FE0                 db ' characters',0Ah,0
.rodata:00000000000180EF                 align 10h
.rodata:00000000000180F0 ; const char aBlockSizeSizeW[]
.rodata:00000000000180F0 aBlockSizeSizeW db '      --block-size=SIZE      with -l, scale sizes by SIZE when pr'
.rodata:00000000000180F0                                         ; DATA XREF: usage+FC↑o
.rodata:00000000000180F0                 db 'inting them;',0Ah
.rodata:00000000000180F0                 db '                               e.g., ',27h,'--block-size=M',27h,';'
.rodata:00000000000180F0                 db ' see SIZE format below',0Ah,0
.rodata:000000000001818C                 align 10h
.rodata:0000000000018190 ; const char aBIgnoreBackups[]
.rodata:0000000000018190 aBIgnoreBackups db '  -B, --ignore-backups       do not list implied entries ending w'
.rodata:0000000000018190                                         ; DATA XREF: usage+121↑o
.rodata:0000000000018190                 db 'ith ~',0Ah
.rodata:0000000000018190                 db '  -c                         with -lt: sort by, and show, ctime ('
.rodata:0000000000018190                 db 'time of last',0Ah
.rodata:0000000000018190                 db '                               modification of file status inform'
.rodata:0000000000018190                 db 'ation);',0Ah
.rodata:0000000000018190                 db '                               with -l: show ctime and sort by na'
.rodata:0000000000018190                 db 'me;',0Ah
.rodata:0000000000018190                 db '                               otherwise: sort by ctime, newest f'
.rodata:0000000000018190                 db 'irst',0Ah,0
.rodata:00000000000182FA                 align 20h
.rodata:0000000000018300 ; const char aCListEntriesBy[]
.rodata:0000000000018300 aCListEntriesBy db '  -C                         list entries by columns',0Ah
.rodata:0000000000018300                                         ; DATA XREF: usage+146↑o
.rodata:0000000000018300                 db '      --color[=WHEN]         colorize the output; WHEN can be ',27h
.rodata:0000000000018300                 db 'always',27h,' (default',0Ah
.rodata:0000000000018300                 db '                               if omitted), ',27h,'auto',27h,', o'
.rodata:0000000000018300                 db 'r ',27h,'never',27h,'; more info below',0Ah
.rodata:0000000000018300                 db '  -d, --directory            list directories themselves, not the'
.rodata:0000000000018300                 db 'ir contents',0Ah
.rodata:0000000000018300                 db '  -D, --dired                generate output designed for Emacs',27h
.rodata:0000000000018300                 db ' dired mode',0Ah,0
.rodata:000000000001846F                 align 10h
.rodata:0000000000018470 ; const char aFDoNotSortEnab[]
.rodata:0000000000018470 aFDoNotSortEnab db '  -f                         do not sort, enable -aU, disable -ls'
.rodata:0000000000018470                                         ; DATA XREF: usage+16B↑o
.rodata:0000000000018470                 db ' --color',0Ah
.rodata:0000000000018470                 db '  -F, --classify             append indicator (one of */=>@|) to '
.rodata:0000000000018470                 db 'entries',0Ah
.rodata:0000000000018470                 db '      --file-type            likewise, except do not append ',27h
.rodata:0000000000018470                 db '*',27h,0Ah
.rodata:0000000000018470                 db '      --format=WORD          across -x, commas -m, horizontal -x,'
.rodata:0000000000018470                 db ' long -l,',0Ah
.rodata:0000000000018470                 db '                               single-column -1, verbose -l, vert'
.rodata:0000000000018470                 db 'ical -C',0Ah
.rodata:0000000000018470                 db '      --full-time            like -l --time-style=full-iso',0Ah,0
.rodata:0000000000018613                 align 8
.rodata:0000000000018618 ; const char aGLikeLButDoNot[]
.rodata:0000000000018618 aGLikeLButDoNot db '  -g                         like -l, but do not list owner',0Ah,0
.rodata:0000000000018618                                         ; DATA XREF: usage+190↑o
.rodata:0000000000018655                 align 8
.rodata:0000000000018658 ; const char aGroupDirectori[]
.rodata:0000000000018658 aGroupDirectori db '      --group-directories-first',0Ah
.rodata:0000000000018658                                         ; DATA XREF: usage+1B5↑o
.rodata:0000000000018658                 db '                             group directories before files;',0Ah
.rodata:0000000000018658                 db '                               can be augmented with a --sort opt'
.rodata:0000000000018658                 db 'ion, but any',0Ah
.rodata:0000000000018658                 db '                               use of --sort=none (-U) disables g'
.rodata:0000000000018658                 db 'rouping',0Ah,0
.rodata:000000000001874D                 align 10h
.rodata:0000000000018750 ; const char aGNoGroupInALon[]
.rodata:0000000000018750 aGNoGroupInALon db '  -G, --no-group             in a long listing, don',27h,'t print'
.rodata:0000000000018750                                         ; DATA XREF: usage+1DA↑o
.rodata:0000000000018750                 db ' group names',0Ah,0
.rodata:0000000000018799                 align 20h
.rodata:00000000000187A0 ; const char aHHumanReadable[]
.rodata:00000000000187A0 aHHumanReadable db '  -h, --human-readable       with -l and -s, print sizes like 1K '
.rodata:00000000000187A0                                         ; DATA XREF: usage+1FF↑o
.rodata:00000000000187A0                 db '234M 2G etc.',0Ah
.rodata:00000000000187A0                 db '      --si                   likewise, but use powers of 1000 not'
.rodata:00000000000187A0                 db ' 1024',0Ah,0
.rodata:0000000000018836                 align 8
.rodata:0000000000018838 ; const char aHDereferenceCo[]
.rodata:0000000000018838 aHDereferenceCo db '  -H, --dereference-command-line',0Ah
.rodata:0000000000018838                                         ; DATA XREF: usage+224↑o
.rodata:0000000000018838                 db '                             follow symbolic links listed on the '
.rodata:0000000000018838                 db 'command line',0Ah
.rodata:0000000000018838                 db '      --dereference-command-line-symlink-to-dir',0Ah
.rodata:0000000000018838                 db '                             follow each command line symbolic li'
.rodata:0000000000018838                 db 'nk',0Ah
.rodata:0000000000018838                 db '                               that points to a directory',0Ah
.rodata:0000000000018838                 db '      --hide=PATTERN         do not list implied entries matching'
.rodata:0000000000018838                 db ' shell PATTERN',0Ah
.rodata:0000000000018838                 db '                               (overridden by -a or -A)',0Ah,0
.rodata:00000000000189DE                 align 20h
.rodata:00000000000189E0 ; const char aHyperlinkWhenH[]
.rodata:00000000000189E0 aHyperlinkWhenH db '      --hyperlink[=WHEN]     hyperlink file names; WHEN can be ',27h
.rodata:00000000000189E0                                         ; DATA XREF: usage+249↑o
.rodata:00000000000189E0                 db 'always',27h,0Ah
.rodata:00000000000189E0                 db '                               (default if omitted), ',27h,'auto',27h
.rodata:00000000000189E0                 db ', or ',27h,'never',27h,0Ah,0
.rodata:0000000000018A71                 align 8
.rodata:0000000000018A78 ; const char aIndicatorStyle_0[]
.rodata:0000000000018A78 aIndicatorStyle_0 db '      --indicator-style=WORD  append indicator with style WORD to'
.rodata:0000000000018A78                                         ; DATA XREF: usage+26E↑o
.rodata:0000000000018A78                 db ' entry names:',0Ah
.rodata:0000000000018A78                 db '                               none (default), slash (-p),',0Ah
.rodata:0000000000018A78                 db '                               file-type (--file-type), classify '
.rodata:0000000000018A78                 db '(-F)',0Ah
.rodata:0000000000018A78                 db '  -i, --inode                print the index number of each file',0Ah
.rodata:0000000000018A78                 db '  -I, --ignore=PATTERN       do not list implied entries matching'
.rodata:0000000000018A78                 db ' shell PATTERN',0Ah,0
.rodata:0000000000018BDA                 align 20h
.rodata:0000000000018BE0 ; const char aKKibibytesDefa[]
.rodata:0000000000018BE0 aKKibibytesDefa db '  -k, --kibibytes            default to 1024-byte blocks for disk'
.rodata:0000000000018BE0                                         ; DATA XREF: usage+293↑o
.rodata:0000000000018BE0                 db ' usage;',0Ah
.rodata:0000000000018BE0                 db '                               used only with -s and per director'
.rodata:0000000000018BE0                 db 'y totals',0Ah,0
.rodata:0000000000018C74                 align 8
.rodata:0000000000018C78 ; const char aLUseALongListi[]
.rodata:0000000000018C78 aLUseALongListi db '  -l                         use a long listing format',0Ah
.rodata:0000000000018C78                                         ; DATA XREF: usage+2B8↑o
.rodata:0000000000018C78                 db '  -L, --dereference          when showing file information for a '
.rodata:0000000000018C78                 db 'symbolic',0Ah
.rodata:0000000000018C78                 db '                               link, show information for the fil'
.rodata:0000000000018C78                 db 'e the link',0Ah
.rodata:0000000000018C78                 db '                               references rather than for the lin'
.rodata:0000000000018C78                 db 'k itself',0Ah
.rodata:0000000000018C78                 db '  -m                         fill width with a comma separated li'
.rodata:0000000000018C78                 db 'st of entries',0Ah,0
.rodata:0000000000018DDF                 align 20h
.rodata:0000000000018DE0 ; const char aNNumericUidGid[]
.rodata:0000000000018DE0 aNNumericUidGid db '  -n, --numeric-uid-gid      like -l, but list numeric user and g'
.rodata:0000000000018DE0                                         ; DATA XREF: usage+2DD↑o
.rodata:0000000000018DE0                 db 'roup IDs',0Ah
.rodata:0000000000018DE0                 db '  -N, --literal              print entry names without quoting',0Ah
.rodata:0000000000018DE0                 db '  -o                         like -l, but do not list group infor'
.rodata:0000000000018DE0                 db 'mation',0Ah
.rodata:0000000000018DE0                 db '  -p, --indicator-style=slash',0Ah
.rodata:0000000000018DE0                 db '                             append / indicator to directories',0Ah
.rodata:0000000000018DE0                 db 0
.rodata:0000000000018F0F                 align 10h
.rodata:0000000000018F10 ; const char aQHideControlCh[]
.rodata:0000000000018F10 aQHideControlCh db '  -q, --hide-control-chars   print ? instead of nongraphic charac'
.rodata:0000000000018F10                                         ; DATA XREF: usage+302↑o
.rodata:0000000000018F10                 db 'ters',0Ah
.rodata:0000000000018F10                 db '      --show-control-chars   show nongraphic characters as-is (th'
.rodata:0000000000018F10                 db 'e default,',0Ah
.rodata:0000000000018F10                 db '                               unless program is ',27h,'ls',27h,' '
.rodata:0000000000018F10                 db 'and output is a terminal)',0Ah
.rodata:0000000000018F10                 db '  -Q, --quote-name           enclose entry names in double quotes'
.rodata:0000000000018F10                 db 0Ah
.rodata:0000000000018F10                 db '      --quoting-style=WORD   use quoting style WORD for entry nam'
.rodata:0000000000018F10                 db 'es:',0Ah
.rodata:0000000000018F10                 db '                               literal, locale, shell, shell-alwa'
.rodata:0000000000018F10                 db 'ys,',0Ah
.rodata:0000000000018F10                 db '                               shell-escape, shell-escape-always,'
.rodata:0000000000018F10                 db ' c, escape',0Ah
.rodata:0000000000018F10                 db '                               (overrides QUOTING_STYLE environme'
.rodata:0000000000018F10                 db 'nt variable)',0Ah,0
.rodata:0000000000019159                 align 20h
.rodata:0000000000019160 ; const char aRReverseRevers[]
.rodata:0000000000019160 aRReverseRevers db '  -r, --reverse              reverse order while sorting',0Ah
.rodata:0000000000019160                                         ; DATA XREF: usage+327↑o
.rodata:0000000000019160                 db '  -R, --recursive            list subdirectories recursively',0Ah
.rodata:0000000000019160                 db '  -s, --size                 print the allocated size of each fil'
.rodata:0000000000019160                 db 'e, in blocks',0Ah,0
.rodata:0000000000019225                 align 8
.rodata:0000000000019228 ; const char aSSortByFileSiz[]
.rodata:0000000000019228 aSSortByFileSiz db '  -S                         sort by file size, largest first',0Ah
.rodata:0000000000019228                                         ; DATA XREF: usage+34C↑o
.rodata:0000000000019228                 db '      --sort=WORD            sort by WORD instead of name: none ('
.rodata:0000000000019228                 db '-U), size (-S),',0Ah
.rodata:0000000000019228                 db '                               time (-t), version (-v), extension'
.rodata:0000000000019228                 db ' (-X)',0Ah
.rodata:0000000000019228                 db '      --time=WORD            with -l, show time as WORD instead o'
.rodata:0000000000019228                 db 'f default',0Ah
.rodata:0000000000019228                 db '                               modification time: atime or access'
.rodata:0000000000019228                 db ' or use (-u);',0Ah
.rodata:0000000000019228                 db '                               ctime or status (-c); also use spe'
.rodata:0000000000019228                 db 'cified time',0Ah
.rodata:0000000000019228                 db '                               as sort key if --sort=time (newest'
.rodata:0000000000019228                 db ' first)',0Ah,0
.rodata:000000000001942F                 align 10h
.rodata:0000000000019430 ; const char aTimeStyleTimeS[]
.rodata:0000000000019430 aTimeStyleTimeS db '      --time-style=TIME_STYLE  time/date format with -l; see TIME'
.rodata:0000000000019430                                         ; DATA XREF: usage+371↑o
.rodata:0000000000019430                 db '_STYLE below',0Ah,0
.rodata:000000000001947F                 align 20h
.rodata:0000000000019480 ; const char aTSortByModific[]
.rodata:0000000000019480 aTSortByModific db '  -t                         sort by modification time, newest fi'
.rodata:0000000000019480                                         ; DATA XREF: usage+396↑o
.rodata:0000000000019480                 db 'rst',0Ah
.rodata:0000000000019480                 db '  -T, --tabsize=COLS         assume tab stops at each COLS instea'
.rodata:0000000000019480                 db 'd of 8',0Ah,0
.rodata:000000000001950E                 align 10h
.rodata:0000000000019510 ; const char aUWithLtSortByA[]
.rodata:0000000000019510 aUWithLtSortByA db '  -u                         with -lt: sort by, and show, access '
.rodata:0000000000019510                                         ; DATA XREF: usage+3BB↑o
.rodata:0000000000019510                 db 'time;',0Ah
.rodata:0000000000019510                 db '                               with -l: show access time and sort'
.rodata:0000000000019510                 db ' by name;',0Ah
.rodata:0000000000019510                 db '                               otherwise: sort by access time, ne'
.rodata:0000000000019510                 db 'west first',0Ah
.rodata:0000000000019510                 db '  -U                         do not sort; list entries in directo'
.rodata:0000000000019510                 db 'ry order',0Ah
.rodata:0000000000019510                 db '  -v                         natural sort of (version) numbers wi'
.rodata:0000000000019510                 db 'thin text',0Ah,0
.rodata:0000000000019684                 align 8
.rodata:0000000000019688 ; const char aWWidthColsSetO[]
.rodata:0000000000019688 aWWidthColsSetO db '  -w, --width=COLS           set output width to COLS.  0 means n'
.rodata:0000000000019688                                         ; DATA XREF: usage+3E0↑o
.rodata:0000000000019688                 db 'o limit',0Ah
.rodata:0000000000019688                 db '  -x                         list entries by lines instead of by '
.rodata:0000000000019688                 db 'columns',0Ah
.rodata:0000000000019688                 db '  -X                         sort alphabetically by entry extensi'
.rodata:0000000000019688                 db 'on',0Ah
.rodata:0000000000019688                 db '  -Z, --context              print any security context of each f'
.rodata:0000000000019688                 db 'ile',0Ah
.rodata:0000000000019688                 db '  -1                         list one file per line.  Avoid ',27h
.rodata:0000000000019688                 db '\n',27h,' with -q or -b',0Ah,0
.rodata:00000000000197F3                 align 8
.rodata:00000000000197F8 ; const char aHelpDisplayThi[]
.rodata:00000000000197F8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000197F8                                         ; DATA XREF: usage+405↑o
.rodata:0000000000019825                 align 8
.rodata:0000000000019828 ; const char aVersionOutputV[]
.rodata:0000000000019828 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000019828                                         ; DATA XREF: usage+42A↑o
.rodata:000000000001985E                 align 20h
.rodata:0000000000019860 ; const char aTheSizeArgumen[]
.rodata:0000000000019860 aTheSizeArgumen db 0Ah                  ; DATA XREF: usage+44F↑o
.rodata:0000000000019860                 db 'The SIZE argument is an integer and optional unit (example: 10K i'
.rodata:0000000000019860                 db 's 10*1024).',0Ah
.rodata:0000000000019860                 db 'Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,... (powers o'
.rodata:0000000000019860                 db 'f 1000).',0Ah
.rodata:0000000000019860                 db 'Binary prefixes can be used, too: KiB=K, MiB=M, and so on.',0Ah,0
.rodata:0000000000019934                 align 8
.rodata:0000000000019938 ; const char aTheTimeStyleAr[]
.rodata:0000000000019938 aTheTimeStyleAr db 0Ah                  ; DATA XREF: usage+474↑o
.rodata:0000000000019938                 db 'The TIME_STYLE argument can be full-iso, long-iso, iso, locale, o'
.rodata:0000000000019938                 db 'r +FORMAT.',0Ah
.rodata:0000000000019938                 db 'FORMAT is interpreted like in date(1).  If FORMAT is FORMAT1<newl'
.rodata:0000000000019938                 db 'ine>FORMAT2,',0Ah
.rodata:0000000000019938                 db 'then FORMAT1 applies to non-recent files and FORMAT2 to recent fi'
.rodata:0000000000019938                 db 'les.',0Ah
.rodata:0000000000019938                 db 'TIME_STYLE prefixed with ',27h,'posix-',27h,' takes effect only o'
.rodata:0000000000019938                 db 'utside the POSIX locale.',0Ah
.rodata:0000000000019938                 db 'Also the TIME_STYLE environment variable sets the default style t'
.rodata:0000000000019938                 db 'o use.',0Ah,0
.rodata:0000000000019AB0 ; const char aUsingColorToDi[]
.rodata:0000000000019AB0 aUsingColorToDi db 0Ah                  ; DATA XREF: usage+499↑o
.rodata:0000000000019AB0                 db 'Using color to distinguish file types is disabled both by default'
.rodata:0000000000019AB0                 db ' and',0Ah
.rodata:0000000000019AB0                 db 'with --color=never.  With --color=auto, ls emits color codes only'
.rodata:0000000000019AB0                 db ' when',0Ah
.rodata:0000000000019AB0                 db 'standard output is connected to a terminal.  The LS_COLORS enviro'
.rodata:0000000000019AB0                 db 'nment',0Ah
.rodata:0000000000019AB0                 db 'variable can change the settings.  Use the dircolors command to s'
.rodata:0000000000019AB0                 db 'et it.',0Ah,0
.rodata:0000000000019BCE                 align 10h
.rodata:0000000000019BD0 ; const char aExitStatus0IfO[]
.rodata:0000000000019BD0 aExitStatus0IfO db 0Ah                  ; DATA XREF: usage+4BE↑o
.rodata:0000000000019BD0                 db 'Exit status:',0Ah
.rodata:0000000000019BD0                 db ' 0  if OK,',0Ah
.rodata:0000000000019BD0                 db ' 1  if minor problems (e.g., cannot access subdirectory),',0Ah
.rodata:0000000000019BD0                 db ' 2  if serious trouble (e.g., cannot access command-line argument'
.rodata:0000000000019BD0                 db ').',0Ah,0
.rodata:0000000000019C68 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000019C68                                         ; DATA XREF: usage+5C8↑o
.rodata:0000000000019C68                                         ; usage+625↑o ...
.rodata:0000000000019C90 ; const char aReportAnyTrans[]
.rodata:0000000000019C90 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000019C90                                         ; DATA XREF: usage+710↑o
.rodata:0000000000019C90                 db 'am/>',0Ah,0
.rodata:0000000000019CD7                 align 8
.rodata:0000000000019CD8 ; const char aOrAvailableLoc[]
.rodata:0000000000019CD8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000019CD8                                         ; DATA XREF: usage:loc_BF63↑o
.rodata:0000000000019D0B                 align 10h
.rodata:0000000000019D10 ; const char aIgnoringInvali[]
.rodata:0000000000019D10 aIgnoringInvali db 'ignoring invalid value of environment variable QUOTING_STYLE: %s',0
.rodata:0000000000019D10                                         ; DATA XREF: main+E7A↑o
.rodata:0000000000019D51                 align 8
.rodata:0000000000019D58 ; const char aIgnoringInvali_0[]
.rodata:0000000000019D58 aIgnoringInvali_0 db 'ignoring invalid width in environment variable COLUMNS: %s',0
.rodata:0000000000019D58                                         ; DATA XREF: main+EC5↑o
.rodata:0000000000019D93                 align 8
.rodata:0000000000019D98 ; const char aIgnoringInvali_1[]
.rodata:0000000000019D98 aIgnoringInvali_1 db 'ignoring invalid tab size in environment variable TABSIZE: %s',0
.rodata:0000000000019D98                                         ; DATA XREF: main+1375↑o
.rodata:0000000000019DD6                 align 8
.rodata:0000000000019DD8 ; const char shortopts[]
.rodata:0000000000019DD8 shortopts       db 'abcdfghiklmnopqrstuvw:xABCDFGHI:LNQRST:UXZ1',0
.rodata:0000000000019DD8                                         ; DATA XREF: main+26F↑o
.rodata:0000000000019E04                 align 8
.rodata:0000000000019E08 ; const char aFormatEGHMForA[]
.rodata:0000000000019E08 aFormatEGHMForA db '  - +FORMAT (e.g., +%H:%M) for a ',27h,'date',27h,'-style format',0Ah
.rodata:0000000000019E08                                         ; DATA XREF: main+17F9↑o
.rodata:0000000000019E08                 db 0
.rodata:0000000000019E3E                 align 20h
.rodata:0000000000019E40 ; const char assertion[]
.rodata:0000000000019E40 assertion       db 'dev_ino_size <= obstack_object_size (&dev_ino_obstack)',0
.rodata:0000000000019E40                                         ; DATA XREF: main+1955↑o
.rodata:0000000000019E77                 align 8
.rodata:0000000000019E78 aDiredOptionsQu db '//DIRED-OPTIONS// --quoting-style=%s',0Ah,0
.rodata:0000000000019E78                                         ; DATA XREF: main+1215↑o
.rodata:0000000000019E9E                 align 20h
.rodata:0000000000019EA0 ; const char aHashGetNEntrie[]
.rodata:0000000000019EA0 aHashGetNEntrie db 'hash_get_n_entries (active_dir_set) == 0',0
.rodata:0000000000019EA0                                         ; DATA XREF: main+1993↑o
.rodata:0000000000019EC9                 align 10h
.rodata:0000000000019ED0 ; const char aUnparsableValu[]
.rodata:0000000000019ED0 aUnparsableValu db 'unparsable value for LS_COLORS environment variable',0
.rodata:0000000000019ED0                                         ; DATA XREF: main:loc_4EEB↑o
.rodata:0000000000019F04                 align 8
.rodata:0000000000019F08 aDereferenceCom_0 db 'dereference-command-line-symlink-to-dir',0
.rodata:0000000000019F08                                         ; DATA XREF: .data.rel.ro:000000000021F5E0↓o
.rodata:0000000000019F30 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000019F35 ; const char aInvalidArgumen[]
.rodata:0000000000019F35 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000019F35                                         ; DATA XREF: argmatch_invalid:loc_C2D0↑o
.rodata:0000000000019F50 ; const char aAmbiguousArgum[]
.rodata:0000000000019F50 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000019F50                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000019F6D ; const char aValidArguments_0[]
.rodata:0000000000019F6D aValidArguments_0 db 'Valid arguments are:',0
.rodata:0000000000019F6D                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000019F82 aS_0            db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000019F82                 db '  - %s',0
.rodata:0000000000019F8A aS_1            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000019F8A                                         ; abformat_init+251↑o ...
.rodata:0000000000019F8F ; const char aWriteError[]
.rodata:0000000000019F8F aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_CBE3↑o
.rodata:0000000000019F9B asc_19F9B       db '..',0               ; DATA XREF: filevercmp+8A↑o
.rodata:0000000000019F9B                                         ; main+EFE↑o ...
.rodata:0000000000019F9E aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000019FA0 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_D720↑o
.rodata:0000000000019FA6 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:0000000000019FA6                                         ; DATA XREF: hash_print_statistics:loc_DC55↑o
.rodata:0000000000019FBE aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:0000000000019FBE                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:0000000000019FD6 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:0000000000019FD6                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:0000000000019FEE                 align 10h
.rodata:0000000000019FF0 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:0000000000019FF0                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000001A011                 align 20h
.rodata:000000000001A020 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000001A020                                         ; hash_initialize:loc_E0C0↑o
.rodata:000000000001A021                 db    0
.rodata:000000000001A022                 db    0
.rodata:000000000001A023                 db    0
.rodata:000000000001A024                 db    0
.rodata:000000000001A025                 db    0
.rodata:000000000001A026                 db  80h
.rodata:000000000001A027                 db  3Fh ; ?
.rodata:000000000001A028                 db 0CDh
.rodata:000000000001A029                 db 0CCh
.rodata:000000000001A02A                 db  4Ch ; L
.rodata:000000000001A02B                 db  3Fh ; ?
.rodata:000000000001A02C                 db 0F4h
.rodata:000000000001A02D                 db 0FDh
.rodata:000000000001A02E                 db 0B4h
.rodata:000000000001A02F                 db  3Fh ; ?
.rodata:000000000001A030                 db    0
.rodata:000000000001A031                 db    0
.rodata:000000000001A032                 db    0
.rodata:000000000001A033                 db    0
.rodata:000000000001A034 dword_1A034     dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000001A034                                         ; check_tuning+4A↑r
.rodata:000000000001A038 dword_1A038     dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000001A03C dword_1A03C     dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000001A040 dword_1A040     dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000001A044 dword_1A044     dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000001A048 dword_1A048     dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000001A04C dword_1A04C     dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000001A04C                                         ; hash_rehash+40↑r ...
.rodata:000000000001A050 dword_1A050     dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000001A050                                         ; hash_initialize+150↑r ...
.rodata:000000000001A054                 align 8
.rodata:000000000001A058 qword_1A058     dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000001A058                                         ; hash_print_statistics+11F↑r
.rodata:000000000001A060 a0lf            db '%.0Lf',0            ; DATA XREF: human_readable+310↑o
.rodata:000000000001A060                                         ; human_readable+749↑o
.rodata:000000000001A066 a1lf            db '%.1Lf',0            ; DATA XREF: human_readable+1A1↑o
.rodata:000000000001A066                                         ; human_readable+6F4↑o
.rodata:000000000001A06C ; const char aBlocksize[]
.rodata:000000000001A06C aBlocksize      db 'BLOCKSIZE',0        ; DATA XREF: human_options+158↑o
.rodata:000000000001A076 ; const char aPosixlyCorrect[]
.rodata:000000000001A076 aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: human_options+10D↑o
.rodata:000000000001A076                                         ; human_options+170↑o
.rodata:000000000001A086 aEeggkkmmppttyy db 'eEgGkKmMpPtTyYzZ0',0
.rodata:000000000001A086                                         ; DATA XREF: human_options:loc_F668↑o
.rodata:000000000001A098 block_size_opts db 0B0h                 ; DATA XREF: human_options:loc_F60C↑o
.rodata:000000000001A098                                         ; human_options+5B↑o
.rodata:000000000001A099                 db    0
.rodata:000000000001A09A                 db    0
.rodata:000000000001A09B                 db    0
.rodata:000000000001A09C                 db  90h
.rodata:000000000001A09D                 db    0
.rodata:000000000001A09E                 db    0
.rodata:000000000001A09F                 db    0
.rodata:000000000001A0A0 power_letter    db    0                 ; DATA XREF: human_readable:loc_EF8C↑o
.rodata:000000000001A0A1                 db  4Bh ; K
.rodata:000000000001A0A2                 db  4Dh ; M
.rodata:000000000001A0A3                 db  47h ; G
.rodata:000000000001A0A4                 db  54h ; T
.rodata:000000000001A0A5                 db  50h ; P
.rodata:000000000001A0A6                 db  45h ; E
.rodata:000000000001A0A7                 db  5Ah ; Z
.rodata:000000000001A0A8                 db  59h ; Y
.rodata:000000000001A0A9                 db    0
.rodata:000000000001A0AA                 db    0
.rodata:000000000001A0AB                 db    0
.rodata:000000000001A0AC flt_1A0AC       dd 10.0                 ; DATA XREF: human_readable+1FC↑r
.rodata:000000000001A0AC                                         ; human_readable+73B↑r ...
.rodata:000000000001A0B0 tbyte_1A0B0     dt 1.8446744073709551615e19
.rodata:000000000001A0B0                                         ; DATA XREF: human_readable+189↑r
.rodata:000000000001A0B0                                         ; human_readable+2FE↑r ...
.rodata:000000000001A0BA                 align 20h
.rodata:000000000001A0C0 aHMS            db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_10D4B↑o
.rodata:000000000001A0C9 aYMD_0          db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+11D2↑o
.rodata:000000000001A0C9                                         ; __strftime_internal+19CF↑o
.rodata:000000000001A0D2 aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+119E↑o
.rodata:000000000001A0DB                 align 4
.rodata:000000000001A0DC jpt_1074F       dd offset loc_11731 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                                         ; DATA XREF: __strftime_internal+1FD↑o
.rodata:000000000001A0DC                                         ; __strftime_internal+208↑r
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh ; jump table for switch statement
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_10CBE - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_113B7 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_10A46 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_1161E - 1A0DCh, offset loc_1163B - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_116D5 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_116F7 - 1A0DCh, offset loc_113DD - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_11772 - 1A0DCh, offset loc_117EE - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_1178A - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_117A2 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10B83 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10B9E - 1A0DCh, offset loc_10A86 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10D4B - 1A0DCh, offset loc_10D64 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_113DD - 1A0DCh, offset loc_115D9 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_108F8 - 1A0DCh, offset loc_10D97 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10DF0 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_10A46 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10F47 - 1A0DCh, offset loc_108F8 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_11574 - 1A0DCh, offset loc_11929 - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_113DD - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10F47 - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_118E6 - 1A0DCh, offset loc_11916 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_11806 - 1A0DCh, offset loc_1182D - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_1185D - 1A0DCh, offset def_1074F - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_118DF - 1A0DCh, offset loc_11040 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10902 - 1A0DCh, offset loc_112B0 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10AFB - 1A0DCh, offset loc_1158C - 1A0DCh
.rodata:000000000001A0DC                 dd offset def_1074F - 1A0DCh, offset loc_115C1 - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_108F8 - 1A0DCh, offset loc_10EDD - 1A0DCh
.rodata:000000000001A0DC                 dd offset loc_10F6C - 1A0DCh
.rodata:000000000001A2C8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000001A2C8                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000001A300 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000001A308 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000001A30C unk_1A30C       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000001A30D                 db  80h
.rodata:000000000001A30E                 db  98h
.rodata:000000000001A30F                 db    0
.rodata:000000000001A310 unk_1A310       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000001A311                 db  80h
.rodata:000000000001A312                 db  99h
.rodata:000000000001A313                 db    0
.rodata:000000000001A314 unk_1A314       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000001A315                 db    7
.rodata:000000000001A316                 db  65h ; e
.rodata:000000000001A317                 db    0
.rodata:000000000001A318 unk_1A318       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000001A319                 db 0AFh
.rodata:000000000001A31A                 db    0
.rodata:000000000001A31B unk_1A31B       db  22h ; "             ; DATA XREF: gettext_quote:loc_12110↑o
.rodata:000000000001A31B                                         ; quotearg_buffer_restyled:loc_12ECB↑o ...
.rodata:000000000001A31C                 db    0
.rodata:000000000001A31D ; const char asc_1A31D[2]
.rodata:000000000001A31D asc_1A31D       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000001A31D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000001A31F aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000021FA48↓o
.rodata:000000000001A325 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000021FA50↓o
.rodata:000000000001A332 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000021FA58↓o
.rodata:000000000001A332                                         ; .data.rel.ro:000000000021F360↓o ...
.rodata:000000000001A33F unk_1A33F       db  73h ; s             ; DATA XREF: .data.rel.ro:000000000021FA60↓o
.rodata:000000000001A340                 db  68h ; h
.rodata:000000000001A341                 db  65h ; e
.rodata:000000000001A342                 db  6Ch ; l
.rodata:000000000001A343                 db  6Ch ; l
.rodata:000000000001A344                 db  2Dh ; -
.rodata:000000000001A345                 db  65h ; e
.rodata:000000000001A346                 db  73h ; s
.rodata:000000000001A347                 db  63h ; c
.rodata:000000000001A348                 db  61h ; a
.rodata:000000000001A349                 db  70h ; p
.rodata:000000000001A34A                 db  65h ; e
.rodata:000000000001A34B                 db  2Dh ; -
.rodata:000000000001A34C aAlways         db 'always',0           ; DATA XREF: .data.rel.ro:when_args↓o
.rodata:000000000001A353 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000021FA70↓o
.rodata:000000000001A35B aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000021FA88↓o
.rodata:000000000001A363                 align 20h
.rodata:000000000001A380 jpt_12271       dd offset loc_1301A - 1A380h
.rodata:000000000001A380                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000001A380                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000001A380                 dd offset loc_12273 - 1A380h ; jump table for switch statement
.rodata:000000000001A380                 dd offset loc_13248 - 1A380h
.rodata:000000000001A380                 dd offset loc_13054 - 1A380h
.rodata:000000000001A380                 dd offset loc_12E44 - 1A380h
.rodata:000000000001A380                 dd offset loc_12EA0 - 1A380h
.rodata:000000000001A380                 dd offset loc_12EF5 - 1A380h
.rodata:000000000001A380                 dd offset loc_12F3A - 1A380h
.rodata:000000000001A380                 dd offset loc_12F74 - 1A380h
.rodata:000000000001A380                 dd offset loc_12F74 - 1A380h
.rodata:000000000001A380                 dd offset loc_12F74 - 1A380h
.rodata:000000000001A3AC jpt_123CE       dd offset loc_125F0 - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000001A3AC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh ; jump table for switch statement
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset loc_12630 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12538 - 1A3ACh, offset loc_124F8 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_126C0 - 1A3ACh, offset loc_126B0 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_126A0 - 1A3ACh, offset loc_12690 - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset def_123CE - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12680 - 1A3ACh, offset loc_12670 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12640 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_124D3 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12670 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12670 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12670 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_124A3 - 1A3ACh
.rodata:000000000001A3AC                 dd offset def_123CE - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12670 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12548 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_12618 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12618 - 1A3ACh, offset loc_123D3 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12670 - 1A3ACh, offset loc_123D3 - 1A3ACh
.rodata:000000000001A3AC                 dd offset loc_12640 - 1A3ACh
.rodata:000000000001A5A8 jpt_1275A       dd offset loc_127C0 - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000001A5A8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h ; jump table for switch statement
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset loc_127B0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12900 - 1A5A8h, offset loc_128E8 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12798 - 1A5A8h, offset loc_128D8 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12780 - 1A5A8h, offset loc_128C0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset def_1275A - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_128A8 - 1A5A8h, offset loc_12890 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12878 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_124D0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12890 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12890 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12890 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_124A0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset def_1275A - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12890 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12760 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_12860 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12860 - 1A5A8h, offset loc_123D0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12890 - 1A5A8h, offset loc_123D0 - 1A5A8h
.rodata:000000000001A5A8                 dd offset loc_12878 - 1A5A8h
.rodata:000000000001A7A4                 align 20h
.rodata:000000000001A7C0                 public quoting_style_vals
.rodata:000000000001A7C0 quoting_style_vals db    0              ; DATA XREF: main+175↑o
.rodata:000000000001A7C0                                         ; main+198↑o ...
.rodata:000000000001A7C1                 db    0
.rodata:000000000001A7C2                 db    0
.rodata:000000000001A7C3                 db    0
.rodata:000000000001A7C4                 db    1
.rodata:000000000001A7C5                 db    0
.rodata:000000000001A7C6                 db    0
.rodata:000000000001A7C7                 db    0
.rodata:000000000001A7C8                 db    2
.rodata:000000000001A7C9                 db    0
.rodata:000000000001A7CA                 db    0
.rodata:000000000001A7CB                 db    0
.rodata:000000000001A7CC                 db    3
.rodata:000000000001A7CD                 db    0
.rodata:000000000001A7CE                 db    0
.rodata:000000000001A7CF                 db    0
.rodata:000000000001A7D0                 db    4
.rodata:000000000001A7D1                 db    0
.rodata:000000000001A7D2                 db    0
.rodata:000000000001A7D3                 db    0
.rodata:000000000001A7D4                 db    5
.rodata:000000000001A7D5                 db    0
.rodata:000000000001A7D6                 db    0
.rodata:000000000001A7D7                 db    0
.rodata:000000000001A7D8                 db    6
.rodata:000000000001A7D9                 db    0
.rodata:000000000001A7DA                 db    0
.rodata:000000000001A7DB                 db    0
.rodata:000000000001A7DC                 db    7
.rodata:000000000001A7DD                 db    0
.rodata:000000000001A7DE                 db    0
.rodata:000000000001A7DF                 db    0
.rodata:000000000001A7E0                 db    8
.rodata:000000000001A7E1                 db    0
.rodata:000000000001A7E2                 db    0
.rodata:000000000001A7E3                 db    0
.rodata:000000000001A7E4                 db    9
.rodata:000000000001A7E5                 db    0
.rodata:000000000001A7E6                 db    0
.rodata:000000000001A7E7                 db    0
.rodata:000000000001A7E8 aSSS_0          db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000001A7E8                                         ; print_and_abort+1E↑o
.rodata:000000000001A7F4 aSS_1           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001A7FB ; const char aC_0[]
.rodata:000000000001A7FB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_13FAC↑o
.rodata:000000000001A7FF ; const char aWrittenByS[]
.rodata:000000000001A7FF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001A7FF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000001A80F ; const char aWrittenBySAndS[]
.rodata:000000000001A80F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000001A80F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000001A826 ; const char aWrittenBySSAnd[]
.rodata:000000000001A826 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000001A826                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000001A842 ; const char aReportBugsToS[]
.rodata:000000000001A842 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000001A842                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000001A857 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000001A857                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001A86D ; const char aSHomePageS[]
.rodata:000000000001A86D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001A86D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000001A881                 align 8
.rodata:000000000001A888 ; const char aLicenseGplv3Gn[]
.rodata:000000000001A888 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000001A888                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000001A888                 db 'ses/gpl.html>.',0Ah
.rodata:000000000001A888                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000001A888                 db '.',0Ah
.rodata:000000000001A888                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000001A888                 db 0Ah,0
.rodata:000000000001A954                 align 8
.rodata:000000000001A958 ; const char aWrittenBySSSAn[]
.rodata:000000000001A958 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001A958                                         ; DATA XREF: version_etc_arn:loc_14200↑o
.rodata:000000000001A958                 db 'and %s.',0Ah,0
.rodata:000000000001A978 ; const char aWrittenBySSSSA[]
.rodata:000000000001A978 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001A978                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000001A978                 db '%s, and %s.',0Ah,0
.rodata:000000000001A99C                 align 20h
.rodata:000000000001A9A0 ; const char aWrittenBySSSSS_1[]
.rodata:000000000001A9A0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001A9A0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000001A9A0                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000001A9C8 ; const char aWrittenBySSSSS_2[]
.rodata:000000000001A9C8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001A9C8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000001A9C8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000001A9F4                 align 8
.rodata:000000000001A9F8 ; const char aWrittenBySSSSS[]
.rodata:000000000001A9F8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001A9F8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000001A9F8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001A9F8                 db 'and %s.',0Ah,0
.rodata:000000000001AA28 ; const char aWrittenBySSSSS_0[]
.rodata:000000000001AA28 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001AA28                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000001AA28                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001AA28                 db '%s, and %s.',0Ah,0
.rodata:000000000001AA5C                 align 20h
.rodata:000000000001AA60 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000001AA60                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000001AA60                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000001AA60                 db '%s, %s, and others.',0Ah,0
.rodata:000000000001AA9C                 align 20h
.rodata:000000000001AAA0 ; const char aGeneralHelpUsi[]
.rodata:000000000001AAA0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000001AAA0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000001AAA0                 db 0
.rodata:000000000001AAE1                 align 4
.rodata:000000000001AAE4 jpt_14014       dd offset loc_14096 - 1AAE4h
.rodata:000000000001AAE4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000001AAE4                                         ; version_etc_arn+9D↑r
.rodata:000000000001AAE4                 dd offset loc_14128 - 1AAE4h ; jump table for switch statement
.rodata:000000000001AAE4                 dd offset loc_14168 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_141B0 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_14200 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_14258 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_14288 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_142F0 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_14020 - 1AAE4h
.rodata:000000000001AAE4                 dd offset loc_140D0 - 1AAE4h
.rodata:000000000001AB0C                 align 20h
.rodata:000000000001AB20                 public version_etc_copyright
.rodata:000000000001AB20 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000001AB20                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000001AB4F ; const char aMemoryExhauste[]
.rodata:000000000001AB4F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000001AB4F                                         ; print_and_abort↑o
.rodata:000000000001AB60 ; const char aCoreutils831Li[]
.rodata:000000000001AB60 aCoreutils831Li db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000001AB60                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:000000000001AB60                                         ; xstrtoumax+38C↑o
.rodata:000000000001AB80 ; const char a0StrtolBaseStr[]
.rodata:000000000001AB80 a0StrtolBaseStr db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000001AB80                                         ; DATA XREF: xstrtoul+393↑o
.rodata:000000000001AB80                                         ; xstrtoumax+393↑o
.rodata:000000000001ABA6                 align 8
.rodata:000000000001ABA8 jpt_14C36       dd offset loc_14D86 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:000000000001ABA8                                         ; xstrtoul+1CF↑r
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14D63 - 1ABA8h ; jump table for switch statement
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14D9C - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14D1F - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14C38 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset loc_14D40 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset loc_14CFF - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14CDA - 1ABA8h
.rodata:000000000001ABA8                 dd offset loc_14CB4 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset loc_14C9D - 1ABA8h, offset loc_14C60 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14D9C - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14D1F - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14C38 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset loc_14CFF - 1ABA8h, offset def_14C36 - 1ABA8h
.rodata:000000000001ABA8                 dd offset def_14C36 - 1ABA8h, offset loc_14C87 - 1ABA8h
.rodata:000000000001AC80 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000001AC80 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:000000000001AC80                                         ; DATA XREF: xstrtoul:loc_14DE5↑o
.rodata:000000000001AC89 aInvalidSSArgum db 'invalid %s%s argument ',27h,'%s',27h,0
.rodata:000000000001AC89                                         ; DATA XREF: xstrtol_fatal+87↑o
.rodata:000000000001ACA4 ; const char aSSArgumentSToo[]
.rodata:000000000001ACA4 aSSArgumentSToo db '%s%s argument ',27h,'%s',27h,' too large',0
.rodata:000000000001ACA4                                         ; DATA XREF: xstrtol_fatal+33↑o
.rodata:000000000001ACC1 asc_1ACC1       db '--',0               ; DATA XREF: xstrtol_fatal+48↑o
.rodata:000000000001ACC1                                         ; xstrtol_fatal:loc_14F12↑o
.rodata:000000000001ACC4                 align 8
.rodata:000000000001ACC8 aInvalidSuffixI db 'invalid suffix in %s%s argument ',27h,'%s',27h,0
.rodata:000000000001ACC8                                         ; DATA XREF: xstrtol_fatal:loc_14EFB↑o
.rodata:000000000001ACED                 align 10h
.rodata:000000000001ACF0 jpt_15106       dd offset loc_15256 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000001ACF0                                         ; xstrtoumax+1CF↑r
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_15233 - 1ACF0h ; jump table for switch statement
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_1526C - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_151EF - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_15108 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset loc_15210 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset loc_151CF - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_151AA - 1ACF0h
.rodata:000000000001ACF0                 dd offset loc_15184 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset loc_1516D - 1ACF0h, offset loc_15130 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_1526C - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_151EF - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_15108 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset loc_151CF - 1ACF0h, offset def_15106 - 1ACF0h
.rodata:000000000001ACF0                 dd offset def_15106 - 1ACF0h, offset loc_15157 - 1ACF0h
.rodata:000000000001ADC8 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000001ADC8 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:000000000001ADC8                                         ; DATA XREF: xstrtoumax:loc_152B5↑o
.rodata:000000000001ADD3 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000001ADD3                                         ; locale_charset:loc_15D90↑o
.rodata:000000000001ADD3 _rodata         ends
.rodata:000000000001ADD3
LOAD:000000000001ADD9 ; ===========================================================================
LOAD:000000000001ADD9
LOAD:000000000001ADD9 ; Segment type: Pure code
LOAD:000000000001ADD9 ; Segment permissions: Read/Execute
LOAD:000000000001ADD9 LOAD            segment byte public 'CODE' use64
LOAD:000000000001ADD9                 assume cs:LOAD
LOAD:000000000001ADD9                 ;org 1ADD9h
LOAD:000000000001ADD9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000001ADD9                 align 4
LOAD:000000000001ADD9 LOAD            ends
LOAD:000000000001ADD9
.eh_frame_hdr:000000000001ADDC ; ===========================================================================
.eh_frame_hdr:000000000001ADDC
.eh_frame_hdr:000000000001ADDC ; Segment type: Pure data
.eh_frame_hdr:000000000001ADDC ; Segment permissions: Read
.eh_frame_hdr:000000000001ADDC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000001ADDC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000001ADDC                 ;org 1ADDCh
.eh_frame_hdr:000000000001ADDC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000001ADDD                 db  1Bh
.eh_frame_hdr:000000000001ADDE                 db    3
.eh_frame_hdr:000000000001ADDF                 db  3Bh ; ;
.eh_frame_hdr:000000000001ADE0                 db  70h ; p
.eh_frame_hdr:000000000001ADE1                 db    8
.eh_frame_hdr:000000000001ADE2                 db    0
.eh_frame_hdr:000000000001ADE3                 db    0
.eh_frame_hdr:000000000001ADE4                 db  0Dh
.eh_frame_hdr:000000000001ADE5                 db    1
.eh_frame_hdr:000000000001ADE6                 db    0
.eh_frame_hdr:000000000001ADE7                 db    0
.eh_frame_hdr:000000000001ADE8                 db  54h ; T
.eh_frame_hdr:000000000001ADE9                 db  84h
.eh_frame_hdr:000000000001ADEA                 db 0FEh
.eh_frame_hdr:000000000001ADEB                 db 0FFh
.eh_frame_hdr:000000000001ADEC                 db 0BCh
.eh_frame_hdr:000000000001ADED                 db    8
.eh_frame_hdr:000000000001ADEE                 db    0
.eh_frame_hdr:000000000001ADEF                 db    0
.eh_frame_hdr:000000000001ADF0                 db 0A4h
.eh_frame_hdr:000000000001ADF1                 db  8Ah
.eh_frame_hdr:000000000001ADF2                 db 0FEh
.eh_frame_hdr:000000000001ADF3                 db 0FFh
.eh_frame_hdr:000000000001ADF4                 db 0E4h
.eh_frame_hdr:000000000001ADF5                 db    8
.eh_frame_hdr:000000000001ADF6                 db    0
.eh_frame_hdr:000000000001ADF7                 db    0
.eh_frame_hdr:000000000001ADF8                 db 0C4h
.eh_frame_hdr:000000000001ADF9                 db  8Ah
.eh_frame_hdr:000000000001ADFA                 db 0FEh
.eh_frame_hdr:000000000001ADFB                 db 0FFh
.eh_frame_hdr:000000000001ADFC                 db  28h ; (
.eh_frame_hdr:000000000001ADFD                 db  17h
.eh_frame_hdr:000000000001ADFE                 db    0
.eh_frame_hdr:000000000001ADFF                 db    0
.eh_frame_hdr:000000000001AE00                 db  94h
.eh_frame_hdr:000000000001AE01                 db 0A4h
.eh_frame_hdr:000000000001AE02                 db 0FEh
.eh_frame_hdr:000000000001AE03                 db 0FFh
.eh_frame_hdr:000000000001AE04                 db  8Ch
.eh_frame_hdr:000000000001AE05                 db    8
.eh_frame_hdr:000000000001AE06                 db    0
.eh_frame_hdr:000000000001AE07                 db    0
.eh_frame_hdr:000000000001AE08                 db 0A4h
.eh_frame_hdr:000000000001AE09                 db 0A5h
.eh_frame_hdr:000000000001AE0A                 db 0FEh
.eh_frame_hdr:000000000001AE0B                 db 0FFh
.eh_frame_hdr:000000000001AE0C                 db 0FCh
.eh_frame_hdr:000000000001AE0D                 db    8
.eh_frame_hdr:000000000001AE0E                 db    0
.eh_frame_hdr:000000000001AE0F                 db    0
.eh_frame_hdr:000000000001AE10                 db 0B4h
.eh_frame_hdr:000000000001AE11                 db 0A5h
.eh_frame_hdr:000000000001AE12                 db 0FEh
.eh_frame_hdr:000000000001AE13                 db 0FFh
.eh_frame_hdr:000000000001AE14                 db  10h
.eh_frame_hdr:000000000001AE15                 db    9
.eh_frame_hdr:000000000001AE16                 db    0
.eh_frame_hdr:000000000001AE17                 db    0
.eh_frame_hdr:000000000001AE18                 db 0D4h
.eh_frame_hdr:000000000001AE19                 db 0A5h
.eh_frame_hdr:000000000001AE1A                 db 0FEh
.eh_frame_hdr:000000000001AE1B                 db 0FFh
.eh_frame_hdr:000000000001AE1C                 db  24h ; $
.eh_frame_hdr:000000000001AE1D                 db    9
.eh_frame_hdr:000000000001AE1E                 db    0
.eh_frame_hdr:000000000001AE1F                 db    0
.eh_frame_hdr:000000000001AE20                 db 0F4h
.eh_frame_hdr:000000000001AE21                 db 0A5h
.eh_frame_hdr:000000000001AE22                 db 0FEh
.eh_frame_hdr:000000000001AE23                 db 0FFh
.eh_frame_hdr:000000000001AE24                 db  38h ; 8
.eh_frame_hdr:000000000001AE25                 db    9
.eh_frame_hdr:000000000001AE26                 db    0
.eh_frame_hdr:000000000001AE27                 db    0
.eh_frame_hdr:000000000001AE28                 db    4
.eh_frame_hdr:000000000001AE29                 db 0A6h
.eh_frame_hdr:000000000001AE2A                 db 0FEh
.eh_frame_hdr:000000000001AE2B                 db 0FFh
.eh_frame_hdr:000000000001AE2C                 db  4Ch ; L
.eh_frame_hdr:000000000001AE2D                 db    9
.eh_frame_hdr:000000000001AE2E                 db    0
.eh_frame_hdr:000000000001AE2F                 db    0
.eh_frame_hdr:000000000001AE30                 db  94h
.eh_frame_hdr:000000000001AE31                 db 0A8h
.eh_frame_hdr:000000000001AE32                 db 0FEh
.eh_frame_hdr:000000000001AE33                 db 0FFh
.eh_frame_hdr:000000000001AE34                 db  94h
.eh_frame_hdr:000000000001AE35                 db    9
.eh_frame_hdr:000000000001AE36                 db    0
.eh_frame_hdr:000000000001AE37                 db    0
.eh_frame_hdr:000000000001AE38                 db 0F4h
.eh_frame_hdr:000000000001AE39                 db 0A8h
.eh_frame_hdr:000000000001AE3A                 db 0FEh
.eh_frame_hdr:000000000001AE3B                 db 0FFh
.eh_frame_hdr:000000000001AE3C                 db 0A8h
.eh_frame_hdr:000000000001AE3D                 db    9
.eh_frame_hdr:000000000001AE3E                 db    0
.eh_frame_hdr:000000000001AE3F                 db    0
.eh_frame_hdr:000000000001AE40                 db  74h ; t
.eh_frame_hdr:000000000001AE41                 db 0A9h
.eh_frame_hdr:000000000001AE42                 db 0FEh
.eh_frame_hdr:000000000001AE43                 db 0FFh
.eh_frame_hdr:000000000001AE44                 db 0C4h
.eh_frame_hdr:000000000001AE45                 db    9
.eh_frame_hdr:000000000001AE46                 db    0
.eh_frame_hdr:000000000001AE47                 db    0
.eh_frame_hdr:000000000001AE48                 db 0F4h
.eh_frame_hdr:000000000001AE49                 db 0ABh
.eh_frame_hdr:000000000001AE4A                 db 0FEh
.eh_frame_hdr:000000000001AE4B                 db 0FFh
.eh_frame_hdr:000000000001AE4C                 db  28h ; (
.eh_frame_hdr:000000000001AE4D                 db  0Ah
.eh_frame_hdr:000000000001AE4E                 db    0
.eh_frame_hdr:000000000001AE4F                 db    0
.eh_frame_hdr:000000000001AE50                 db  64h ; d
.eh_frame_hdr:000000000001AE51                 db 0ACh
.eh_frame_hdr:000000000001AE52                 db 0FEh
.eh_frame_hdr:000000000001AE53                 db 0FFh
.eh_frame_hdr:000000000001AE54                 db  60h ; `
.eh_frame_hdr:000000000001AE55                 db  0Ah
.eh_frame_hdr:000000000001AE56                 db    0
.eh_frame_hdr:000000000001AE57                 db    0
.eh_frame_hdr:000000000001AE58                 db 0A4h
.eh_frame_hdr:000000000001AE59                 db 0ACh
.eh_frame_hdr:000000000001AE5A                 db 0FEh
.eh_frame_hdr:000000000001AE5B                 db 0FFh
.eh_frame_hdr:000000000001AE5C                 db  74h ; t
.eh_frame_hdr:000000000001AE5D                 db  0Ah
.eh_frame_hdr:000000000001AE5E                 db    0
.eh_frame_hdr:000000000001AE5F                 db    0
.eh_frame_hdr:000000000001AE60                 db 0E4h
.eh_frame_hdr:000000000001AE61                 db 0ACh
.eh_frame_hdr:000000000001AE62                 db 0FEh
.eh_frame_hdr:000000000001AE63                 db 0FFh
.eh_frame_hdr:000000000001AE64                 db  88h
.eh_frame_hdr:000000000001AE65                 db  0Ah
.eh_frame_hdr:000000000001AE66                 db    0
.eh_frame_hdr:000000000001AE67                 db    0
.eh_frame_hdr:000000000001AE68                 db 0F4h
.eh_frame_hdr:000000000001AE69                 db 0ACh
.eh_frame_hdr:000000000001AE6A                 db 0FEh
.eh_frame_hdr:000000000001AE6B                 db 0FFh
.eh_frame_hdr:000000000001AE6C                 db  9Ch
.eh_frame_hdr:000000000001AE6D                 db  0Ah
.eh_frame_hdr:000000000001AE6E                 db    0
.eh_frame_hdr:000000000001AE6F                 db    0
.eh_frame_hdr:000000000001AE70                 db    4
.eh_frame_hdr:000000000001AE71                 db 0ADh
.eh_frame_hdr:000000000001AE72                 db 0FEh
.eh_frame_hdr:000000000001AE73                 db 0FFh
.eh_frame_hdr:000000000001AE74                 db 0B0h
.eh_frame_hdr:000000000001AE75                 db  0Ah
.eh_frame_hdr:000000000001AE76                 db    0
.eh_frame_hdr:000000000001AE77                 db    0
.eh_frame_hdr:000000000001AE78                 db  84h
.eh_frame_hdr:000000000001AE79                 db 0ADh
.eh_frame_hdr:000000000001AE7A                 db 0FEh
.eh_frame_hdr:000000000001AE7B                 db 0FFh
.eh_frame_hdr:000000000001AE7C                 db 0DCh
.eh_frame_hdr:000000000001AE7D                 db  0Ah
.eh_frame_hdr:000000000001AE7E                 db    0
.eh_frame_hdr:000000000001AE7F                 db    0
.eh_frame_hdr:000000000001AE80                 db  64h ; d
.eh_frame_hdr:000000000001AE81                 db 0AEh
.eh_frame_hdr:000000000001AE82                 db 0FEh
.eh_frame_hdr:000000000001AE83                 db 0FFh
.eh_frame_hdr:000000000001AE84                 db  1Ch
.eh_frame_hdr:000000000001AE85                 db  0Bh
.eh_frame_hdr:000000000001AE86                 db    0
.eh_frame_hdr:000000000001AE87                 db    0
.eh_frame_hdr:000000000001AE88                 db    4
.eh_frame_hdr:000000000001AE89                 db 0B0h
.eh_frame_hdr:000000000001AE8A                 db 0FEh
.eh_frame_hdr:000000000001AE8B                 db 0FFh
.eh_frame_hdr:000000000001AE8C                 db  3Ch ; <
.eh_frame_hdr:000000000001AE8D                 db  0Bh
.eh_frame_hdr:000000000001AE8E                 db    0
.eh_frame_hdr:000000000001AE8F                 db    0
.eh_frame_hdr:000000000001AE90                 db  34h ; 4
.eh_frame_hdr:000000000001AE91                 db 0B0h
.eh_frame_hdr:000000000001AE92                 db 0FEh
.eh_frame_hdr:000000000001AE93                 db 0FFh
.eh_frame_hdr:000000000001AE94                 db  64h ; d
.eh_frame_hdr:000000000001AE95                 db  0Bh
.eh_frame_hdr:000000000001AE96                 db    0
.eh_frame_hdr:000000000001AE97                 db    0
.eh_frame_hdr:000000000001AE98                 db  64h ; d
.eh_frame_hdr:000000000001AE99                 db 0B0h
.eh_frame_hdr:000000000001AE9A                 db 0FEh
.eh_frame_hdr:000000000001AE9B                 db 0FFh
.eh_frame_hdr:000000000001AE9C                 db  78h ; x
.eh_frame_hdr:000000000001AE9D                 db  0Bh
.eh_frame_hdr:000000000001AE9E                 db    0
.eh_frame_hdr:000000000001AE9F                 db    0
.eh_frame_hdr:000000000001AEA0                 db 0A4h
.eh_frame_hdr:000000000001AEA1                 db 0B0h
.eh_frame_hdr:000000000001AEA2                 db 0FEh
.eh_frame_hdr:000000000001AEA3                 db 0FFh
.eh_frame_hdr:000000000001AEA4                 db  8Ch
.eh_frame_hdr:000000000001AEA5                 db  0Bh
.eh_frame_hdr:000000000001AEA6                 db    0
.eh_frame_hdr:000000000001AEA7                 db    0
.eh_frame_hdr:000000000001AEA8                 db 0B4h
.eh_frame_hdr:000000000001AEA9                 db 0B0h
.eh_frame_hdr:000000000001AEAA                 db 0FEh
.eh_frame_hdr:000000000001AEAB                 db 0FFh
.eh_frame_hdr:000000000001AEAC                 db 0A0h
.eh_frame_hdr:000000000001AEAD                 db  0Bh
.eh_frame_hdr:000000000001AEAE                 db    0
.eh_frame_hdr:000000000001AEAF                 db    0
.eh_frame_hdr:000000000001AEB0                 db 0C4h
.eh_frame_hdr:000000000001AEB1                 db 0B0h
.eh_frame_hdr:000000000001AEB2                 db 0FEh
.eh_frame_hdr:000000000001AEB3                 db 0FFh
.eh_frame_hdr:000000000001AEB4                 db 0B4h
.eh_frame_hdr:000000000001AEB5                 db  0Bh
.eh_frame_hdr:000000000001AEB6                 db    0
.eh_frame_hdr:000000000001AEB7                 db    0
.eh_frame_hdr:000000000001AEB8                 db 0D4h
.eh_frame_hdr:000000000001AEB9                 db 0B0h
.eh_frame_hdr:000000000001AEBA                 db 0FEh
.eh_frame_hdr:000000000001AEBB                 db 0FFh
.eh_frame_hdr:000000000001AEBC                 db 0C8h
.eh_frame_hdr:000000000001AEBD                 db  0Bh
.eh_frame_hdr:000000000001AEBE                 db    0
.eh_frame_hdr:000000000001AEBF                 db    0
.eh_frame_hdr:000000000001AEC0                 db 0E4h
.eh_frame_hdr:000000000001AEC1                 db 0B0h
.eh_frame_hdr:000000000001AEC2                 db 0FEh
.eh_frame_hdr:000000000001AEC3                 db 0FFh
.eh_frame_hdr:000000000001AEC4                 db 0DCh
.eh_frame_hdr:000000000001AEC5                 db  0Bh
.eh_frame_hdr:000000000001AEC6                 db    0
.eh_frame_hdr:000000000001AEC7                 db    0
.eh_frame_hdr:000000000001AEC8                 db  64h ; d
.eh_frame_hdr:000000000001AEC9                 db 0B2h
.eh_frame_hdr:000000000001AECA                 db 0FEh
.eh_frame_hdr:000000000001AECB                 db 0FFh
.eh_frame_hdr:000000000001AECC                 db  28h ; (
.eh_frame_hdr:000000000001AECD                 db  0Ch
.eh_frame_hdr:000000000001AECE                 db    0
.eh_frame_hdr:000000000001AECF                 db    0
.eh_frame_hdr:000000000001AED0                 db  34h ; 4
.eh_frame_hdr:000000000001AED1                 db 0B3h
.eh_frame_hdr:000000000001AED2                 db 0FEh
.eh_frame_hdr:000000000001AED3                 db 0FFh
.eh_frame_hdr:000000000001AED4                 db  64h ; d
.eh_frame_hdr:000000000001AED5                 db  0Ch
.eh_frame_hdr:000000000001AED6                 db    0
.eh_frame_hdr:000000000001AED7                 db    0
.eh_frame_hdr:000000000001AED8                 db    4
.eh_frame_hdr:000000000001AED9                 db 0B4h
.eh_frame_hdr:000000000001AEDA                 db 0FEh
.eh_frame_hdr:000000000001AEDB                 db 0FFh
.eh_frame_hdr:000000000001AEDC                 db  9Ch
.eh_frame_hdr:000000000001AEDD                 db  0Ch
.eh_frame_hdr:000000000001AEDE                 db    0
.eh_frame_hdr:000000000001AEDF                 db    0
.eh_frame_hdr:000000000001AEE0                 db 0C4h
.eh_frame_hdr:000000000001AEE1                 db 0B4h
.eh_frame_hdr:000000000001AEE2                 db 0FEh
.eh_frame_hdr:000000000001AEE3                 db 0FFh
.eh_frame_hdr:000000000001AEE4                 db 0C8h
.eh_frame_hdr:000000000001AEE5                 db  0Ch
.eh_frame_hdr:000000000001AEE6                 db    0
.eh_frame_hdr:000000000001AEE7                 db    0
.eh_frame_hdr:000000000001AEE8                 db    4
.eh_frame_hdr:000000000001AEE9                 db 0B5h
.eh_frame_hdr:000000000001AEEA                 db 0FEh
.eh_frame_hdr:000000000001AEEB                 db 0FFh
.eh_frame_hdr:000000000001AEEC                 db 0ECh
.eh_frame_hdr:000000000001AEED                 db  0Ch
.eh_frame_hdr:000000000001AEEE                 db    0
.eh_frame_hdr:000000000001AEEF                 db    0
.eh_frame_hdr:000000000001AEF0                 db  24h ; $
.eh_frame_hdr:000000000001AEF1                 db 0B5h
.eh_frame_hdr:000000000001AEF2                 db 0FEh
.eh_frame_hdr:000000000001AEF3                 db 0FFh
.eh_frame_hdr:000000000001AEF4                 db    0
.eh_frame_hdr:000000000001AEF5                 db  0Dh
.eh_frame_hdr:000000000001AEF6                 db    0
.eh_frame_hdr:000000000001AEF7                 db    0
.eh_frame_hdr:000000000001AEF8                 db  94h
.eh_frame_hdr:000000000001AEF9                 db 0B5h
.eh_frame_hdr:000000000001AEFA                 db 0FEh
.eh_frame_hdr:000000000001AEFB                 db 0FFh
.eh_frame_hdr:000000000001AEFC                 db  38h ; 8
.eh_frame_hdr:000000000001AEFD                 db  0Dh
.eh_frame_hdr:000000000001AEFE                 db    0
.eh_frame_hdr:000000000001AEFF                 db    0
.eh_frame_hdr:000000000001AF00                 db  34h ; 4
.eh_frame_hdr:000000000001AF01                 db 0B6h
.eh_frame_hdr:000000000001AF02                 db 0FEh
.eh_frame_hdr:000000000001AF03                 db 0FFh
.eh_frame_hdr:000000000001AF04                 db  4Ch ; L
.eh_frame_hdr:000000000001AF05                 db  0Dh
.eh_frame_hdr:000000000001AF06                 db    0
.eh_frame_hdr:000000000001AF07                 db    0
.eh_frame_hdr:000000000001AF08                 db 0D4h
.eh_frame_hdr:000000000001AF09                 db 0B6h
.eh_frame_hdr:000000000001AF0A                 db 0FEh
.eh_frame_hdr:000000000001AF0B                 db 0FFh
.eh_frame_hdr:000000000001AF0C                 db  60h ; `
.eh_frame_hdr:000000000001AF0D                 db  0Dh
.eh_frame_hdr:000000000001AF0E                 db    0
.eh_frame_hdr:000000000001AF0F                 db    0
.eh_frame_hdr:000000000001AF10                 db  74h ; t
.eh_frame_hdr:000000000001AF11                 db 0B7h
.eh_frame_hdr:000000000001AF12                 db 0FEh
.eh_frame_hdr:000000000001AF13                 db 0FFh
.eh_frame_hdr:000000000001AF14                 db  74h ; t
.eh_frame_hdr:000000000001AF15                 db  0Dh
.eh_frame_hdr:000000000001AF16                 db    0
.eh_frame_hdr:000000000001AF17                 db    0
.eh_frame_hdr:000000000001AF18                 db  14h
.eh_frame_hdr:000000000001AF19                 db 0B8h
.eh_frame_hdr:000000000001AF1A                 db 0FEh
.eh_frame_hdr:000000000001AF1B                 db 0FFh
.eh_frame_hdr:000000000001AF1C                 db  88h
.eh_frame_hdr:000000000001AF1D                 db  0Dh
.eh_frame_hdr:000000000001AF1E                 db    0
.eh_frame_hdr:000000000001AF1F                 db    0
.eh_frame_hdr:000000000001AF20                 db 0A4h
.eh_frame_hdr:000000000001AF21                 db 0B8h
.eh_frame_hdr:000000000001AF22                 db 0FEh
.eh_frame_hdr:000000000001AF23                 db 0FFh
.eh_frame_hdr:000000000001AF24                 db  9Ch
.eh_frame_hdr:000000000001AF25                 db  0Dh
.eh_frame_hdr:000000000001AF26                 db    0
.eh_frame_hdr:000000000001AF27                 db    0
.eh_frame_hdr:000000000001AF28                 db  34h ; 4
.eh_frame_hdr:000000000001AF29                 db 0B9h
.eh_frame_hdr:000000000001AF2A                 db 0FEh
.eh_frame_hdr:000000000001AF2B                 db 0FFh
.eh_frame_hdr:000000000001AF2C                 db 0B0h
.eh_frame_hdr:000000000001AF2D                 db  0Dh
.eh_frame_hdr:000000000001AF2E                 db    0
.eh_frame_hdr:000000000001AF2F                 db    0
.eh_frame_hdr:000000000001AF30                 db 0C4h
.eh_frame_hdr:000000000001AF31                 db 0B9h
.eh_frame_hdr:000000000001AF32                 db 0FEh
.eh_frame_hdr:000000000001AF33                 db 0FFh
.eh_frame_hdr:000000000001AF34                 db 0C4h
.eh_frame_hdr:000000000001AF35                 db  0Dh
.eh_frame_hdr:000000000001AF36                 db    0
.eh_frame_hdr:000000000001AF37                 db    0
.eh_frame_hdr:000000000001AF38                 db  54h ; T
.eh_frame_hdr:000000000001AF39                 db 0BAh
.eh_frame_hdr:000000000001AF3A                 db 0FEh
.eh_frame_hdr:000000000001AF3B                 db 0FFh
.eh_frame_hdr:000000000001AF3C                 db 0D8h
.eh_frame_hdr:000000000001AF3D                 db  0Dh
.eh_frame_hdr:000000000001AF3E                 db    0
.eh_frame_hdr:000000000001AF3F                 db    0
.eh_frame_hdr:000000000001AF40                 db  54h ; T
.eh_frame_hdr:000000000001AF41                 db 0BBh
.eh_frame_hdr:000000000001AF42                 db 0FEh
.eh_frame_hdr:000000000001AF43                 db 0FFh
.eh_frame_hdr:000000000001AF44                 db 0ECh
.eh_frame_hdr:000000000001AF45                 db  0Dh
.eh_frame_hdr:000000000001AF46                 db    0
.eh_frame_hdr:000000000001AF47                 db    0
.eh_frame_hdr:000000000001AF48                 db 0A4h
.eh_frame_hdr:000000000001AF49                 db 0BBh
.eh_frame_hdr:000000000001AF4A                 db 0FEh
.eh_frame_hdr:000000000001AF4B                 db 0FFh
.eh_frame_hdr:000000000001AF4C                 db    8
.eh_frame_hdr:000000000001AF4D                 db  0Eh
.eh_frame_hdr:000000000001AF4E                 db    0
.eh_frame_hdr:000000000001AF4F                 db    0
.eh_frame_hdr:000000000001AF50                 db  54h ; T
.eh_frame_hdr:000000000001AF51                 db 0BCh
.eh_frame_hdr:000000000001AF52                 db 0FEh
.eh_frame_hdr:000000000001AF53                 db 0FFh
.eh_frame_hdr:000000000001AF54                 db  1Ch
.eh_frame_hdr:000000000001AF55                 db  0Eh
.eh_frame_hdr:000000000001AF56                 db    0
.eh_frame_hdr:000000000001AF57                 db    0
.eh_frame_hdr:000000000001AF58                 db 0E4h
.eh_frame_hdr:000000000001AF59                 db 0BCh
.eh_frame_hdr:000000000001AF5A                 db 0FEh
.eh_frame_hdr:000000000001AF5B                 db 0FFh
.eh_frame_hdr:000000000001AF5C                 db  30h ; 0
.eh_frame_hdr:000000000001AF5D                 db  0Eh
.eh_frame_hdr:000000000001AF5E                 db    0
.eh_frame_hdr:000000000001AF5F                 db    0
.eh_frame_hdr:000000000001AF60                 db  74h ; t
.eh_frame_hdr:000000000001AF61                 db 0BDh
.eh_frame_hdr:000000000001AF62                 db 0FEh
.eh_frame_hdr:000000000001AF63                 db 0FFh
.eh_frame_hdr:000000000001AF64                 db  44h ; D
.eh_frame_hdr:000000000001AF65                 db  0Eh
.eh_frame_hdr:000000000001AF66                 db    0
.eh_frame_hdr:000000000001AF67                 db    0
.eh_frame_hdr:000000000001AF68                 db  74h ; t
.eh_frame_hdr:000000000001AF69                 db 0BEh
.eh_frame_hdr:000000000001AF6A                 db 0FEh
.eh_frame_hdr:000000000001AF6B                 db 0FFh
.eh_frame_hdr:000000000001AF6C                 db  84h
.eh_frame_hdr:000000000001AF6D                 db  0Eh
.eh_frame_hdr:000000000001AF6E                 db    0
.eh_frame_hdr:000000000001AF6F                 db    0
.eh_frame_hdr:000000000001AF70                 db  44h ; D
.eh_frame_hdr:000000000001AF71                 db 0C0h
.eh_frame_hdr:000000000001AF72                 db 0FEh
.eh_frame_hdr:000000000001AF73                 db 0FFh
.eh_frame_hdr:000000000001AF74                 db 0D0h
.eh_frame_hdr:000000000001AF75                 db  0Eh
.eh_frame_hdr:000000000001AF76                 db    0
.eh_frame_hdr:000000000001AF77                 db    0
.eh_frame_hdr:000000000001AF78                 db  94h
.eh_frame_hdr:000000000001AF79                 db 0C0h
.eh_frame_hdr:000000000001AF7A                 db 0FEh
.eh_frame_hdr:000000000001AF7B                 db 0FFh
.eh_frame_hdr:000000000001AF7C                 db 0E8h
.eh_frame_hdr:000000000001AF7D                 db  0Eh
.eh_frame_hdr:000000000001AF7E                 db    0
.eh_frame_hdr:000000000001AF7F                 db    0
.eh_frame_hdr:000000000001AF80                 db    4
.eh_frame_hdr:000000000001AF81                 db 0C1h
.eh_frame_hdr:000000000001AF82                 db 0FEh
.eh_frame_hdr:000000000001AF83                 db 0FFh
.eh_frame_hdr:000000000001AF84                 db    4
.eh_frame_hdr:000000000001AF85                 db  0Fh
.eh_frame_hdr:000000000001AF86                 db    0
.eh_frame_hdr:000000000001AF87                 db    0
.eh_frame_hdr:000000000001AF88                 db 0F4h
.eh_frame_hdr:000000000001AF89                 db 0C1h
.eh_frame_hdr:000000000001AF8A                 db 0FEh
.eh_frame_hdr:000000000001AF8B                 db 0FFh
.eh_frame_hdr:000000000001AF8C                 db  30h ; 0
.eh_frame_hdr:000000000001AF8D                 db  0Fh
.eh_frame_hdr:000000000001AF8E                 db    0
.eh_frame_hdr:000000000001AF8F                 db    0
.eh_frame_hdr:000000000001AF90                 db  44h ; D
.eh_frame_hdr:000000000001AF91                 db 0C2h
.eh_frame_hdr:000000000001AF92                 db 0FEh
.eh_frame_hdr:000000000001AF93                 db 0FFh
.eh_frame_hdr:000000000001AF94                 db  50h ; P
.eh_frame_hdr:000000000001AF95                 db  0Fh
.eh_frame_hdr:000000000001AF96                 db    0
.eh_frame_hdr:000000000001AF97                 db    0
.eh_frame_hdr:000000000001AF98                 db 0B4h
.eh_frame_hdr:000000000001AF99                 db 0C6h
.eh_frame_hdr:000000000001AF9A                 db 0FEh
.eh_frame_hdr:000000000001AF9B                 db 0FFh
.eh_frame_hdr:000000000001AF9C                 db 0A0h
.eh_frame_hdr:000000000001AF9D                 db  0Fh
.eh_frame_hdr:000000000001AF9E                 db    0
.eh_frame_hdr:000000000001AF9F                 db    0
.eh_frame_hdr:000000000001AFA0                 db 0C4h
.eh_frame_hdr:000000000001AFA1                 db 0CAh
.eh_frame_hdr:000000000001AFA2                 db 0FEh
.eh_frame_hdr:000000000001AFA3                 db 0FFh
.eh_frame_hdr:000000000001AFA4                 db 0F0h
.eh_frame_hdr:000000000001AFA5                 db  0Fh
.eh_frame_hdr:000000000001AFA6                 db    0
.eh_frame_hdr:000000000001AFA7                 db    0
.eh_frame_hdr:000000000001AFA8                 db  24h ; $
.eh_frame_hdr:000000000001AFA9                 db 0CFh
.eh_frame_hdr:000000000001AFAA                 db 0FEh
.eh_frame_hdr:000000000001AFAB                 db 0FFh
.eh_frame_hdr:000000000001AFAC                 db  54h ; T
.eh_frame_hdr:000000000001AFAD                 db  10h
.eh_frame_hdr:000000000001AFAE                 db    0
.eh_frame_hdr:000000000001AFAF                 db    0
.eh_frame_hdr:000000000001AFB0                 db 0B4h
.eh_frame_hdr:000000000001AFB1                 db 0D0h
.eh_frame_hdr:000000000001AFB2                 db 0FEh
.eh_frame_hdr:000000000001AFB3                 db 0FFh
.eh_frame_hdr:000000000001AFB4                 db  84h
.eh_frame_hdr:000000000001AFB5                 db  10h
.eh_frame_hdr:000000000001AFB6                 db    0
.eh_frame_hdr:000000000001AFB7                 db    0
.eh_frame_hdr:000000000001AFB8                 db 0C4h
.eh_frame_hdr:000000000001AFB9                 db 0DAh
.eh_frame_hdr:000000000001AFBA                 db 0FEh
.eh_frame_hdr:000000000001AFBB                 db 0FFh
.eh_frame_hdr:000000000001AFBC                 db 0F8h
.eh_frame_hdr:000000000001AFBD                 db  10h
.eh_frame_hdr:000000000001AFBE                 db    0
.eh_frame_hdr:000000000001AFBF                 db    0
.eh_frame_hdr:000000000001AFC0                 db  54h ; T
.eh_frame_hdr:000000000001AFC1                 db 0DBh
.eh_frame_hdr:000000000001AFC2                 db 0FEh
.eh_frame_hdr:000000000001AFC3                 db 0FFh
.eh_frame_hdr:000000000001AFC4                 db  24h ; $
.eh_frame_hdr:000000000001AFC5                 db  11h
.eh_frame_hdr:000000000001AFC6                 db    0
.eh_frame_hdr:000000000001AFC7                 db    0
.eh_frame_hdr:000000000001AFC8                 db    4
.eh_frame_hdr:000000000001AFC9                 db 0DDh
.eh_frame_hdr:000000000001AFCA                 db 0FEh
.eh_frame_hdr:000000000001AFCB                 db 0FFh
.eh_frame_hdr:000000000001AFCC                 db  50h ; P
.eh_frame_hdr:000000000001AFCD                 db  11h
.eh_frame_hdr:000000000001AFCE                 db    0
.eh_frame_hdr:000000000001AFCF                 db    0
.eh_frame_hdr:000000000001AFD0                 db  14h
.eh_frame_hdr:000000000001AFD1                 db 0E0h
.eh_frame_hdr:000000000001AFD2                 db 0FEh
.eh_frame_hdr:000000000001AFD3                 db 0FFh
.eh_frame_hdr:000000000001AFD4                 db  90h
.eh_frame_hdr:000000000001AFD5                 db  11h
.eh_frame_hdr:000000000001AFD6                 db    0
.eh_frame_hdr:000000000001AFD7                 db    0
.eh_frame_hdr:000000000001AFD8                 db 0C4h
.eh_frame_hdr:000000000001AFD9                 db 0E1h
.eh_frame_hdr:000000000001AFDA                 db 0FEh
.eh_frame_hdr:000000000001AFDB                 db 0FFh
.eh_frame_hdr:000000000001AFDC                 db 0F4h
.eh_frame_hdr:000000000001AFDD                 db  11h
.eh_frame_hdr:000000000001AFDE                 db    0
.eh_frame_hdr:000000000001AFDF                 db    0
.eh_frame_hdr:000000000001AFE0                 db 0A4h
.eh_frame_hdr:000000000001AFE1                 db 0E5h
.eh_frame_hdr:000000000001AFE2                 db 0FEh
.eh_frame_hdr:000000000001AFE3                 db 0FFh
.eh_frame_hdr:000000000001AFE4                 db 0B0h
.eh_frame_hdr:000000000001AFE5                 db  12h
.eh_frame_hdr:000000000001AFE6                 db    0
.eh_frame_hdr:000000000001AFE7                 db    0
.eh_frame_hdr:000000000001AFE8                 db  54h ; T
.eh_frame_hdr:000000000001AFE9                 db 0E6h
.eh_frame_hdr:000000000001AFEA                 db 0FEh
.eh_frame_hdr:000000000001AFEB                 db 0FFh
.eh_frame_hdr:000000000001AFEC                 db 0C4h
.eh_frame_hdr:000000000001AFED                 db  12h
.eh_frame_hdr:000000000001AFEE                 db    0
.eh_frame_hdr:000000000001AFEF                 db    0
.eh_frame_hdr:000000000001AFF0                 db  14h
.eh_frame_hdr:000000000001AFF1                 db 0E7h
.eh_frame_hdr:000000000001AFF2                 db 0FEh
.eh_frame_hdr:000000000001AFF3                 db 0FFh
.eh_frame_hdr:000000000001AFF4                 db 0D8h
.eh_frame_hdr:000000000001AFF5                 db  12h
.eh_frame_hdr:000000000001AFF6                 db    0
.eh_frame_hdr:000000000001AFF7                 db    0
.eh_frame_hdr:000000000001AFF8                 db 0E4h
.eh_frame_hdr:000000000001AFF9                 db 0E7h
.eh_frame_hdr:000000000001AFFA                 db 0FEh
.eh_frame_hdr:000000000001AFFB                 db 0FFh
.eh_frame_hdr:000000000001AFFC                 db    4
.eh_frame_hdr:000000000001AFFD                 db  13h
.eh_frame_hdr:000000000001AFFE                 db    0
.eh_frame_hdr:000000000001AFFF                 db    0
.eh_frame_hdr:000000000001B000                 db 0B4h
.eh_frame_hdr:000000000001B001                 db 0E8h
.eh_frame_hdr:000000000001B002                 db 0FEh
.eh_frame_hdr:000000000001B003                 db 0FFh
.eh_frame_hdr:000000000001B004                 db  30h ; 0
.eh_frame_hdr:000000000001B005                 db  13h
.eh_frame_hdr:000000000001B006                 db    0
.eh_frame_hdr:000000000001B007                 db    0
.eh_frame_hdr:000000000001B008                 db  14h
.eh_frame_hdr:000000000001B009                 db 0F6h
.eh_frame_hdr:000000000001B00A                 db 0FEh
.eh_frame_hdr:000000000001B00B                 db 0FFh
.eh_frame_hdr:000000000001B00C                 db  60h ; `
.eh_frame_hdr:000000000001B00D                 db  13h
.eh_frame_hdr:000000000001B00E                 db    0
.eh_frame_hdr:000000000001B00F                 db    0
.eh_frame_hdr:000000000001B010                 db 0D4h
.eh_frame_hdr:000000000001B011                 db 0FCh
.eh_frame_hdr:000000000001B012                 db 0FEh
.eh_frame_hdr:000000000001B013                 db 0FFh
.eh_frame_hdr:000000000001B014                 db 0C0h
.eh_frame_hdr:000000000001B015                 db  13h
.eh_frame_hdr:000000000001B016                 db    0
.eh_frame_hdr:000000000001B017                 db    0
.eh_frame_hdr:000000000001B018                 db  24h ; $
.eh_frame_hdr:000000000001B019                 db 0FDh
.eh_frame_hdr:000000000001B01A                 db 0FEh
.eh_frame_hdr:000000000001B01B                 db 0FFh
.eh_frame_hdr:000000000001B01C                 db 0D4h
.eh_frame_hdr:000000000001B01D                 db  13h
.eh_frame_hdr:000000000001B01E                 db    0
.eh_frame_hdr:000000000001B01F                 db    0
.eh_frame_hdr:000000000001B020                 db  64h ; d
.eh_frame_hdr:000000000001B021                 db 0FDh
.eh_frame_hdr:000000000001B022                 db 0FEh
.eh_frame_hdr:000000000001B023                 db 0FFh
.eh_frame_hdr:000000000001B024                 db 0E8h
.eh_frame_hdr:000000000001B025                 db  13h
.eh_frame_hdr:000000000001B026                 db    0
.eh_frame_hdr:000000000001B027                 db    0
.eh_frame_hdr:000000000001B028                 db 0A4h
.eh_frame_hdr:000000000001B029                 db 0FDh
.eh_frame_hdr:000000000001B02A                 db 0FEh
.eh_frame_hdr:000000000001B02B                 db 0FFh
.eh_frame_hdr:000000000001B02C                 db 0FCh
.eh_frame_hdr:000000000001B02D                 db  13h
.eh_frame_hdr:000000000001B02E                 db    0
.eh_frame_hdr:000000000001B02F                 db    0
.eh_frame_hdr:000000000001B030                 db 0E4h
.eh_frame_hdr:000000000001B031                 db 0FDh
.eh_frame_hdr:000000000001B032                 db 0FEh
.eh_frame_hdr:000000000001B033                 db 0FFh
.eh_frame_hdr:000000000001B034                 db  10h
.eh_frame_hdr:000000000001B035                 db  14h
.eh_frame_hdr:000000000001B036                 db    0
.eh_frame_hdr:000000000001B037                 db    0
.eh_frame_hdr:000000000001B038                 db  24h ; $
.eh_frame_hdr:000000000001B039                 db 0FEh
.eh_frame_hdr:000000000001B03A                 db 0FEh
.eh_frame_hdr:000000000001B03B                 db 0FFh
.eh_frame_hdr:000000000001B03C                 db  24h ; $
.eh_frame_hdr:000000000001B03D                 db  14h
.eh_frame_hdr:000000000001B03E                 db    0
.eh_frame_hdr:000000000001B03F                 db    0
.eh_frame_hdr:000000000001B040                 db  74h ; t
.eh_frame_hdr:000000000001B041                 db 0FEh
.eh_frame_hdr:000000000001B042                 db 0FEh
.eh_frame_hdr:000000000001B043                 db 0FFh
.eh_frame_hdr:000000000001B044                 db  38h ; 8
.eh_frame_hdr:000000000001B045                 db  14h
.eh_frame_hdr:000000000001B046                 db    0
.eh_frame_hdr:000000000001B047                 db    0
.eh_frame_hdr:000000000001B048                 db 0E4h
.eh_frame_hdr:000000000001B049                 db 0FEh
.eh_frame_hdr:000000000001B04A                 db 0FEh
.eh_frame_hdr:000000000001B04B                 db 0FFh
.eh_frame_hdr:000000000001B04C                 db  70h ; p
.eh_frame_hdr:000000000001B04D                 db  14h
.eh_frame_hdr:000000000001B04E                 db    0
.eh_frame_hdr:000000000001B04F                 db    0
.eh_frame_hdr:000000000001B050                 db  54h ; T
.eh_frame_hdr:000000000001B051                 db 0FFh
.eh_frame_hdr:000000000001B052                 db 0FEh
.eh_frame_hdr:000000000001B053                 db 0FFh
.eh_frame_hdr:000000000001B054                 db 0A8h
.eh_frame_hdr:000000000001B055                 db  14h
.eh_frame_hdr:000000000001B056                 db    0
.eh_frame_hdr:000000000001B057                 db    0
.eh_frame_hdr:000000000001B058                 db  94h
.eh_frame_hdr:000000000001B059                 db 0FFh
.eh_frame_hdr:000000000001B05A                 db 0FEh
.eh_frame_hdr:000000000001B05B                 db 0FFh
.eh_frame_hdr:000000000001B05C                 db 0BCh
.eh_frame_hdr:000000000001B05D                 db  14h
.eh_frame_hdr:000000000001B05E                 db    0
.eh_frame_hdr:000000000001B05F                 db    0
.eh_frame_hdr:000000000001B060                 db 0D4h
.eh_frame_hdr:000000000001B061                 db 0FFh
.eh_frame_hdr:000000000001B062                 db 0FEh
.eh_frame_hdr:000000000001B063                 db 0FFh
.eh_frame_hdr:000000000001B064                 db 0D0h
.eh_frame_hdr:000000000001B065                 db  14h
.eh_frame_hdr:000000000001B066                 db    0
.eh_frame_hdr:000000000001B067                 db    0
.eh_frame_hdr:000000000001B068                 db  24h ; $
.eh_frame_hdr:000000000001B069                 db    0
.eh_frame_hdr:000000000001B06A                 db 0FFh
.eh_frame_hdr:000000000001B06B                 db 0FFh
.eh_frame_hdr:000000000001B06C                 db 0E4h
.eh_frame_hdr:000000000001B06D                 db  14h
.eh_frame_hdr:000000000001B06E                 db    0
.eh_frame_hdr:000000000001B06F                 db    0
.eh_frame_hdr:000000000001B070                 db  64h ; d
.eh_frame_hdr:000000000001B071                 db    0
.eh_frame_hdr:000000000001B072                 db 0FFh
.eh_frame_hdr:000000000001B073                 db 0FFh
.eh_frame_hdr:000000000001B074                 db 0F8h
.eh_frame_hdr:000000000001B075                 db  14h
.eh_frame_hdr:000000000001B076                 db    0
.eh_frame_hdr:000000000001B077                 db    0
.eh_frame_hdr:000000000001B078                 db 0A4h
.eh_frame_hdr:000000000001B079                 db    0
.eh_frame_hdr:000000000001B07A                 db 0FFh
.eh_frame_hdr:000000000001B07B                 db 0FFh
.eh_frame_hdr:000000000001B07C                 db  0Ch
.eh_frame_hdr:000000000001B07D                 db  15h
.eh_frame_hdr:000000000001B07E                 db    0
.eh_frame_hdr:000000000001B07F                 db    0
.eh_frame_hdr:000000000001B080                 db 0F4h
.eh_frame_hdr:000000000001B081                 db    0
.eh_frame_hdr:000000000001B082                 db 0FFh
.eh_frame_hdr:000000000001B083                 db 0FFh
.eh_frame_hdr:000000000001B084                 db  20h
.eh_frame_hdr:000000000001B085                 db  15h
.eh_frame_hdr:000000000001B086                 db    0
.eh_frame_hdr:000000000001B087                 db    0
.eh_frame_hdr:000000000001B088                 db 0A4h
.eh_frame_hdr:000000000001B089                 db    1
.eh_frame_hdr:000000000001B08A                 db 0FFh
.eh_frame_hdr:000000000001B08B                 db 0FFh
.eh_frame_hdr:000000000001B08C                 db  34h ; 4
.eh_frame_hdr:000000000001B08D                 db  15h
.eh_frame_hdr:000000000001B08E                 db    0
.eh_frame_hdr:000000000001B08F                 db    0
.eh_frame_hdr:000000000001B090                 db  54h ; T
.eh_frame_hdr:000000000001B091                 db    2
.eh_frame_hdr:000000000001B092                 db 0FFh
.eh_frame_hdr:000000000001B093                 db 0FFh
.eh_frame_hdr:000000000001B094                 db  48h ; H
.eh_frame_hdr:000000000001B095                 db  15h
.eh_frame_hdr:000000000001B096                 db    0
.eh_frame_hdr:000000000001B097                 db    0
.eh_frame_hdr:000000000001B098                 db  14h
.eh_frame_hdr:000000000001B099                 db    3
.eh_frame_hdr:000000000001B09A                 db 0FFh
.eh_frame_hdr:000000000001B09B                 db 0FFh
.eh_frame_hdr:000000000001B09C                 db  5Ch ; \
.eh_frame_hdr:000000000001B09D                 db  15h
.eh_frame_hdr:000000000001B09E                 db    0
.eh_frame_hdr:000000000001B09F                 db    0
.eh_frame_hdr:000000000001B0A0                 db 0C4h
.eh_frame_hdr:000000000001B0A1                 db    3
.eh_frame_hdr:000000000001B0A2                 db 0FFh
.eh_frame_hdr:000000000001B0A3                 db 0FFh
.eh_frame_hdr:000000000001B0A4                 db  70h ; p
.eh_frame_hdr:000000000001B0A5                 db  15h
.eh_frame_hdr:000000000001B0A6                 db    0
.eh_frame_hdr:000000000001B0A7                 db    0
.eh_frame_hdr:000000000001B0A8                 db  74h ; t
.eh_frame_hdr:000000000001B0A9                 db    4
.eh_frame_hdr:000000000001B0AA                 db 0FFh
.eh_frame_hdr:000000000001B0AB                 db 0FFh
.eh_frame_hdr:000000000001B0AC                 db  84h
.eh_frame_hdr:000000000001B0AD                 db  15h
.eh_frame_hdr:000000000001B0AE                 db    0
.eh_frame_hdr:000000000001B0AF                 db    0
.eh_frame_hdr:000000000001B0B0                 db  34h ; 4
.eh_frame_hdr:000000000001B0B1                 db    5
.eh_frame_hdr:000000000001B0B2                 db 0FFh
.eh_frame_hdr:000000000001B0B3                 db 0FFh
.eh_frame_hdr:000000000001B0B4                 db  98h
.eh_frame_hdr:000000000001B0B5                 db  15h
.eh_frame_hdr:000000000001B0B6                 db    0
.eh_frame_hdr:000000000001B0B7                 db    0
.eh_frame_hdr:000000000001B0B8                 db 0B4h
.eh_frame_hdr:000000000001B0B9                 db    5
.eh_frame_hdr:000000000001B0BA                 db 0FFh
.eh_frame_hdr:000000000001B0BB                 db 0FFh
.eh_frame_hdr:000000000001B0BC                 db 0D0h
.eh_frame_hdr:000000000001B0BD                 db  15h
.eh_frame_hdr:000000000001B0BE                 db    0
.eh_frame_hdr:000000000001B0BF                 db    0
.eh_frame_hdr:000000000001B0C0                 db  34h ; 4
.eh_frame_hdr:000000000001B0C1                 db    6
.eh_frame_hdr:000000000001B0C2                 db 0FFh
.eh_frame_hdr:000000000001B0C3                 db 0FFh
.eh_frame_hdr:000000000001B0C4                 db    8
.eh_frame_hdr:000000000001B0C5                 db  16h
.eh_frame_hdr:000000000001B0C6                 db    0
.eh_frame_hdr:000000000001B0C7                 db    0
.eh_frame_hdr:000000000001B0C8                 db  24h ; $
.eh_frame_hdr:000000000001B0C9                 db    7
.eh_frame_hdr:000000000001B0CA                 db 0FFh
.eh_frame_hdr:000000000001B0CB                 db 0FFh
.eh_frame_hdr:000000000001B0CC                 db  44h ; D
.eh_frame_hdr:000000000001B0CD                 db  16h
.eh_frame_hdr:000000000001B0CE                 db    0
.eh_frame_hdr:000000000001B0CF                 db    0
.eh_frame_hdr:000000000001B0D0                 db  14h
.eh_frame_hdr:000000000001B0D1                 db    8
.eh_frame_hdr:000000000001B0D2                 db 0FFh
.eh_frame_hdr:000000000001B0D3                 db 0FFh
.eh_frame_hdr:000000000001B0D4                 db  80h
.eh_frame_hdr:000000000001B0D5                 db  16h
.eh_frame_hdr:000000000001B0D6                 db    0
.eh_frame_hdr:000000000001B0D7                 db    0
.eh_frame_hdr:000000000001B0D8                 db 0C4h
.eh_frame_hdr:000000000001B0D9                 db    8
.eh_frame_hdr:000000000001B0DA                 db 0FFh
.eh_frame_hdr:000000000001B0DB                 db 0FFh
.eh_frame_hdr:000000000001B0DC                 db  94h
.eh_frame_hdr:000000000001B0DD                 db  16h
.eh_frame_hdr:000000000001B0DE                 db    0
.eh_frame_hdr:000000000001B0DF                 db    0
.eh_frame_hdr:000000000001B0E0                 db  74h ; t
.eh_frame_hdr:000000000001B0E1                 db    9
.eh_frame_hdr:000000000001B0E2                 db 0FFh
.eh_frame_hdr:000000000001B0E3                 db 0FFh
.eh_frame_hdr:000000000001B0E4                 db 0A8h
.eh_frame_hdr:000000000001B0E5                 db  16h
.eh_frame_hdr:000000000001B0E6                 db    0
.eh_frame_hdr:000000000001B0E7                 db    0
.eh_frame_hdr:000000000001B0E8                 db  34h ; 4
.eh_frame_hdr:000000000001B0E9                 db  0Ah
.eh_frame_hdr:000000000001B0EA                 db 0FFh
.eh_frame_hdr:000000000001B0EB                 db 0FFh
.eh_frame_hdr:000000000001B0EC                 db 0BCh
.eh_frame_hdr:000000000001B0ED                 db  16h
.eh_frame_hdr:000000000001B0EE                 db    0
.eh_frame_hdr:000000000001B0EF                 db    0
.eh_frame_hdr:000000000001B0F0                 db  34h ; 4
.eh_frame_hdr:000000000001B0F1                 db  0Bh
.eh_frame_hdr:000000000001B0F2                 db 0FFh
.eh_frame_hdr:000000000001B0F3                 db 0FFh
.eh_frame_hdr:000000000001B0F4                 db 0FCh
.eh_frame_hdr:000000000001B0F5                 db  16h
.eh_frame_hdr:000000000001B0F6                 db    0
.eh_frame_hdr:000000000001B0F7                 db    0
.eh_frame_hdr:000000000001B0F8                 db  74h ; t
.eh_frame_hdr:000000000001B0F9                 db  12h
.eh_frame_hdr:000000000001B0FA                 db 0FFh
.eh_frame_hdr:000000000001B0FB                 db 0FFh
.eh_frame_hdr:000000000001B0FC                 db  94h
.eh_frame_hdr:000000000001B0FD                 db  17h
.eh_frame_hdr:000000000001B0FE                 db    0
.eh_frame_hdr:000000000001B0FF                 db    0
.eh_frame_hdr:000000000001B100                 db  64h ; d
.eh_frame_hdr:000000000001B101                 db  13h
.eh_frame_hdr:000000000001B102                 db 0FFh
.eh_frame_hdr:000000000001B103                 db 0FFh
.eh_frame_hdr:000000000001B104                 db 0E4h
.eh_frame_hdr:000000000001B105                 db  17h
.eh_frame_hdr:000000000001B106                 db    0
.eh_frame_hdr:000000000001B107                 db    0
.eh_frame_hdr:000000000001B108                 db  74h ; t
.eh_frame_hdr:000000000001B109                 db  13h
.eh_frame_hdr:000000000001B10A                 db 0FFh
.eh_frame_hdr:000000000001B10B                 db 0FFh
.eh_frame_hdr:000000000001B10C                 db 0F8h
.eh_frame_hdr:000000000001B10D                 db  17h
.eh_frame_hdr:000000000001B10E                 db    0
.eh_frame_hdr:000000000001B10F                 db    0
.eh_frame_hdr:000000000001B110                 db  94h
.eh_frame_hdr:000000000001B111                 db  14h
.eh_frame_hdr:000000000001B112                 db 0FFh
.eh_frame_hdr:000000000001B113                 db 0FFh
.eh_frame_hdr:000000000001B114                 db  44h ; D
.eh_frame_hdr:000000000001B115                 db  18h
.eh_frame_hdr:000000000001B116                 db    0
.eh_frame_hdr:000000000001B117                 db    0
.eh_frame_hdr:000000000001B118                 db  14h
.eh_frame_hdr:000000000001B119                 db  15h
.eh_frame_hdr:000000000001B11A                 db 0FFh
.eh_frame_hdr:000000000001B11B                 db 0FFh
.eh_frame_hdr:000000000001B11C                 db  70h ; p
.eh_frame_hdr:000000000001B11D                 db  18h
.eh_frame_hdr:000000000001B11E                 db    0
.eh_frame_hdr:000000000001B11F                 db    0
.eh_frame_hdr:000000000001B120                 db  34h ; 4
.eh_frame_hdr:000000000001B121                 db  16h
.eh_frame_hdr:000000000001B122                 db 0FFh
.eh_frame_hdr:000000000001B123                 db 0FFh
.eh_frame_hdr:000000000001B124                 db 0D0h
.eh_frame_hdr:000000000001B125                 db  18h
.eh_frame_hdr:000000000001B126                 db    0
.eh_frame_hdr:000000000001B127                 db    0
.eh_frame_hdr:000000000001B128                 db 0A4h
.eh_frame_hdr:000000000001B129                 db  16h
.eh_frame_hdr:000000000001B12A                 db 0FFh
.eh_frame_hdr:000000000001B12B                 db 0FFh
.eh_frame_hdr:000000000001B12C                 db  1Ch
.eh_frame_hdr:000000000001B12D                 db  19h
.eh_frame_hdr:000000000001B12E                 db    0
.eh_frame_hdr:000000000001B12F                 db    0
.eh_frame_hdr:000000000001B130                 db 0F4h
.eh_frame_hdr:000000000001B131                 db  16h
.eh_frame_hdr:000000000001B132                 db 0FFh
.eh_frame_hdr:000000000001B133                 db 0FFh
.eh_frame_hdr:000000000001B134                 db  5Ch ; \
.eh_frame_hdr:000000000001B135                 db  19h
.eh_frame_hdr:000000000001B136                 db    0
.eh_frame_hdr:000000000001B137                 db    0
.eh_frame_hdr:000000000001B138                 db  64h ; d
.eh_frame_hdr:000000000001B139                 db  17h
.eh_frame_hdr:000000000001B13A                 db 0FFh
.eh_frame_hdr:000000000001B13B                 db 0FFh
.eh_frame_hdr:000000000001B13C                 db  74h ; t
.eh_frame_hdr:000000000001B13D                 db  19h
.eh_frame_hdr:000000000001B13E                 db    0
.eh_frame_hdr:000000000001B13F                 db    0
.eh_frame_hdr:000000000001B140                 db 0A4h
.eh_frame_hdr:000000000001B141                 db  1Dh
.eh_frame_hdr:000000000001B142                 db 0FFh
.eh_frame_hdr:000000000001B143                 db 0FFh
.eh_frame_hdr:000000000001B144                 db 0C4h
.eh_frame_hdr:000000000001B145                 db  19h
.eh_frame_hdr:000000000001B146                 db    0
.eh_frame_hdr:000000000001B147                 db    0
.eh_frame_hdr:000000000001B148                 db 0B4h
.eh_frame_hdr:000000000001B149                 db  1Dh
.eh_frame_hdr:000000000001B14A                 db 0FFh
.eh_frame_hdr:000000000001B14B                 db 0FFh
.eh_frame_hdr:000000000001B14C                 db 0D8h
.eh_frame_hdr:000000000001B14D                 db  19h
.eh_frame_hdr:000000000001B14E                 db    0
.eh_frame_hdr:000000000001B14F                 db    0
.eh_frame_hdr:000000000001B150                 db 0C4h
.eh_frame_hdr:000000000001B151                 db  1Dh
.eh_frame_hdr:000000000001B152                 db 0FFh
.eh_frame_hdr:000000000001B153                 db 0FFh
.eh_frame_hdr:000000000001B154                 db 0ECh
.eh_frame_hdr:000000000001B155                 db  19h
.eh_frame_hdr:000000000001B156                 db    0
.eh_frame_hdr:000000000001B157                 db    0
.eh_frame_hdr:000000000001B158                 db  74h ; t
.eh_frame_hdr:000000000001B159                 db  1Eh
.eh_frame_hdr:000000000001B15A                 db 0FFh
.eh_frame_hdr:000000000001B15B                 db 0FFh
.eh_frame_hdr:000000000001B15C                 db  1Ch
.eh_frame_hdr:000000000001B15D                 db  1Ah
.eh_frame_hdr:000000000001B15E                 db    0
.eh_frame_hdr:000000000001B15F                 db    0
.eh_frame_hdr:000000000001B160                 db 0D4h
.eh_frame_hdr:000000000001B161                 db  1Eh
.eh_frame_hdr:000000000001B162                 db 0FFh
.eh_frame_hdr:000000000001B163                 db 0FFh
.eh_frame_hdr:000000000001B164                 db  50h ; P
.eh_frame_hdr:000000000001B165                 db  1Ah
.eh_frame_hdr:000000000001B166                 db    0
.eh_frame_hdr:000000000001B167                 db    0
.eh_frame_hdr:000000000001B168                 db  34h ; 4
.eh_frame_hdr:000000000001B169                 db  1Fh
.eh_frame_hdr:000000000001B16A                 db 0FFh
.eh_frame_hdr:000000000001B16B                 db 0FFh
.eh_frame_hdr:000000000001B16C                 db  7Ch ; |
.eh_frame_hdr:000000000001B16D                 db  1Ah
.eh_frame_hdr:000000000001B16E                 db    0
.eh_frame_hdr:000000000001B16F                 db    0
.eh_frame_hdr:000000000001B170                 db  94h
.eh_frame_hdr:000000000001B171                 db  1Fh
.eh_frame_hdr:000000000001B172                 db 0FFh
.eh_frame_hdr:000000000001B173                 db 0FFh
.eh_frame_hdr:000000000001B174                 db  90h
.eh_frame_hdr:000000000001B175                 db  1Ah
.eh_frame_hdr:000000000001B176                 db    0
.eh_frame_hdr:000000000001B177                 db    0
.eh_frame_hdr:000000000001B178                 db 0E4h
.eh_frame_hdr:000000000001B179                 db  1Fh
.eh_frame_hdr:000000000001B17A                 db 0FFh
.eh_frame_hdr:000000000001B17B                 db 0FFh
.eh_frame_hdr:000000000001B17C                 db 0BCh
.eh_frame_hdr:000000000001B17D                 db  1Ah
.eh_frame_hdr:000000000001B17E                 db    0
.eh_frame_hdr:000000000001B17F                 db    0
.eh_frame_hdr:000000000001B180                 db 0F4h
.eh_frame_hdr:000000000001B181                 db  1Fh
.eh_frame_hdr:000000000001B182                 db 0FFh
.eh_frame_hdr:000000000001B183                 db 0FFh
.eh_frame_hdr:000000000001B184                 db 0D4h
.eh_frame_hdr:000000000001B185                 db  1Ah
.eh_frame_hdr:000000000001B186                 db    0
.eh_frame_hdr:000000000001B187                 db    0
.eh_frame_hdr:000000000001B188                 db  84h
.eh_frame_hdr:000000000001B189                 db  20h
.eh_frame_hdr:000000000001B18A                 db 0FFh
.eh_frame_hdr:000000000001B18B                 db 0FFh
.eh_frame_hdr:000000000001B18C                 db  34h ; 4
.eh_frame_hdr:000000000001B18D                 db  1Bh
.eh_frame_hdr:000000000001B18E                 db    0
.eh_frame_hdr:000000000001B18F                 db    0
.eh_frame_hdr:000000000001B190                 db 0E4h
.eh_frame_hdr:000000000001B191                 db  20h
.eh_frame_hdr:000000000001B192                 db 0FFh
.eh_frame_hdr:000000000001B193                 db 0FFh
.eh_frame_hdr:000000000001B194                 db  54h ; T
.eh_frame_hdr:000000000001B195                 db  1Bh
.eh_frame_hdr:000000000001B196                 db    0
.eh_frame_hdr:000000000001B197                 db    0
.eh_frame_hdr:000000000001B198                 db  74h ; t
.eh_frame_hdr:000000000001B199                 db  22h ; "
.eh_frame_hdr:000000000001B19A                 db 0FFh
.eh_frame_hdr:000000000001B19B                 db 0FFh
.eh_frame_hdr:000000000001B19C                 db  68h ; h
.eh_frame_hdr:000000000001B19D                 db  1Bh
.eh_frame_hdr:000000000001B19E                 db    0
.eh_frame_hdr:000000000001B19F                 db    0
.eh_frame_hdr:000000000001B1A0                 db  84h
.eh_frame_hdr:000000000001B1A1                 db  22h ; "
.eh_frame_hdr:000000000001B1A2                 db 0FFh
.eh_frame_hdr:000000000001B1A3                 db 0FFh
.eh_frame_hdr:000000000001B1A4                 db  7Ch ; |
.eh_frame_hdr:000000000001B1A5                 db  1Bh
.eh_frame_hdr:000000000001B1A6                 db    0
.eh_frame_hdr:000000000001B1A7                 db    0
.eh_frame_hdr:000000000001B1A8                 db 0A4h
.eh_frame_hdr:000000000001B1A9                 db  22h ; "
.eh_frame_hdr:000000000001B1AA                 db 0FFh
.eh_frame_hdr:000000000001B1AB                 db 0FFh
.eh_frame_hdr:000000000001B1AC                 db  9Ch
.eh_frame_hdr:000000000001B1AD                 db  1Bh
.eh_frame_hdr:000000000001B1AE                 db    0
.eh_frame_hdr:000000000001B1AF                 db    0
.eh_frame_hdr:000000000001B1B0                 db 0A4h
.eh_frame_hdr:000000000001B1B1                 db  23h ; #
.eh_frame_hdr:000000000001B1B2                 db 0FFh
.eh_frame_hdr:000000000001B1B3                 db 0FFh
.eh_frame_hdr:000000000001B1B4                 db 0ECh
.eh_frame_hdr:000000000001B1B5                 db  1Bh
.eh_frame_hdr:000000000001B1B6                 db    0
.eh_frame_hdr:000000000001B1B7                 db    0
.eh_frame_hdr:000000000001B1B8                 db  74h ; t
.eh_frame_hdr:000000000001B1B9                 db  24h ; $
.eh_frame_hdr:000000000001B1BA                 db 0FFh
.eh_frame_hdr:000000000001B1BB                 db 0FFh
.eh_frame_hdr:000000000001B1BC                 db    0
.eh_frame_hdr:000000000001B1BD                 db  1Ch
.eh_frame_hdr:000000000001B1BE                 db    0
.eh_frame_hdr:000000000001B1BF                 db    0
.eh_frame_hdr:000000000001B1C0                 db 0A4h
.eh_frame_hdr:000000000001B1C1                 db  28h ; (
.eh_frame_hdr:000000000001B1C2                 db 0FFh
.eh_frame_hdr:000000000001B1C3                 db 0FFh
.eh_frame_hdr:000000000001B1C4                 db  4Ch ; L
.eh_frame_hdr:000000000001B1C5                 db  1Ch
.eh_frame_hdr:000000000001B1C6                 db    0
.eh_frame_hdr:000000000001B1C7                 db    0
.eh_frame_hdr:000000000001B1C8                 db 0B4h
.eh_frame_hdr:000000000001B1C9                 db  28h ; (
.eh_frame_hdr:000000000001B1CA                 db 0FFh
.eh_frame_hdr:000000000001B1CB                 db 0FFh
.eh_frame_hdr:000000000001B1CC                 db  60h ; `
.eh_frame_hdr:000000000001B1CD                 db  1Ch
.eh_frame_hdr:000000000001B1CE                 db    0
.eh_frame_hdr:000000000001B1CF                 db    0
.eh_frame_hdr:000000000001B1D0                 db    4
.eh_frame_hdr:000000000001B1D1                 db  29h ; )
.eh_frame_hdr:000000000001B1D2                 db 0FFh
.eh_frame_hdr:000000000001B1D3                 db 0FFh
.eh_frame_hdr:000000000001B1D4                 db  7Ch ; |
.eh_frame_hdr:000000000001B1D5                 db  1Ch
.eh_frame_hdr:000000000001B1D6                 db    0
.eh_frame_hdr:000000000001B1D7                 db    0
.eh_frame_hdr:000000000001B1D8                 db  64h ; d
.eh_frame_hdr:000000000001B1D9                 db  29h ; )
.eh_frame_hdr:000000000001B1DA                 db 0FFh
.eh_frame_hdr:000000000001B1DB                 db 0FFh
.eh_frame_hdr:000000000001B1DC                 db  9Ch
.eh_frame_hdr:000000000001B1DD                 db  1Ch
.eh_frame_hdr:000000000001B1DE                 db    0
.eh_frame_hdr:000000000001B1DF                 db    0
.eh_frame_hdr:000000000001B1E0                 db    4
.eh_frame_hdr:000000000001B1E1                 db  2Ah ; *
.eh_frame_hdr:000000000001B1E2                 db 0FFh
.eh_frame_hdr:000000000001B1E3                 db 0FFh
.eh_frame_hdr:000000000001B1E4                 db 0B0h
.eh_frame_hdr:000000000001B1E5                 db  1Ch
.eh_frame_hdr:000000000001B1E6                 db    0
.eh_frame_hdr:000000000001B1E7                 db    0
.eh_frame_hdr:000000000001B1E8                 db  14h
.eh_frame_hdr:000000000001B1E9                 db  2Ah ; *
.eh_frame_hdr:000000000001B1EA                 db 0FFh
.eh_frame_hdr:000000000001B1EB                 db 0FFh
.eh_frame_hdr:000000000001B1EC                 db 0C4h
.eh_frame_hdr:000000000001B1ED                 db  1Ch
.eh_frame_hdr:000000000001B1EE                 db    0
.eh_frame_hdr:000000000001B1EF                 db    0
.eh_frame_hdr:000000000001B1F0                 db  24h ; $
.eh_frame_hdr:000000000001B1F1                 db  2Ah ; *
.eh_frame_hdr:000000000001B1F2                 db 0FFh
.eh_frame_hdr:000000000001B1F3                 db 0FFh
.eh_frame_hdr:000000000001B1F4                 db 0D8h
.eh_frame_hdr:000000000001B1F5                 db  1Ch
.eh_frame_hdr:000000000001B1F6                 db    0
.eh_frame_hdr:000000000001B1F7                 db    0
.eh_frame_hdr:000000000001B1F8                 db  54h ; T
.eh_frame_hdr:000000000001B1F9                 db  2Ah ; *
.eh_frame_hdr:000000000001B1FA                 db 0FFh
.eh_frame_hdr:000000000001B1FB                 db 0FFh
.eh_frame_hdr:000000000001B1FC                 db 0F4h
.eh_frame_hdr:000000000001B1FD                 db  1Ch
.eh_frame_hdr:000000000001B1FE                 db    0
.eh_frame_hdr:000000000001B1FF                 db    0
.eh_frame_hdr:000000000001B200                 db  74h ; t
.eh_frame_hdr:000000000001B201                 db  2Bh ; +
.eh_frame_hdr:000000000001B202                 db 0FFh
.eh_frame_hdr:000000000001B203                 db 0FFh
.eh_frame_hdr:000000000001B204                 db  54h ; T
.eh_frame_hdr:000000000001B205                 db  1Dh
.eh_frame_hdr:000000000001B206                 db    0
.eh_frame_hdr:000000000001B207                 db    0
.eh_frame_hdr:000000000001B208                 db 0F4h
.eh_frame_hdr:000000000001B209                 db  2Bh ; +
.eh_frame_hdr:000000000001B20A                 db 0FFh
.eh_frame_hdr:000000000001B20B                 db 0FFh
.eh_frame_hdr:000000000001B20C                 db  68h ; h
.eh_frame_hdr:000000000001B20D                 db  1Dh
.eh_frame_hdr:000000000001B20E                 db    0
.eh_frame_hdr:000000000001B20F                 db    0
.eh_frame_hdr:000000000001B210                 db  34h ; 4
.eh_frame_hdr:000000000001B211                 db  2Dh ; -
.eh_frame_hdr:000000000001B212                 db 0FFh
.eh_frame_hdr:000000000001B213                 db 0FFh
.eh_frame_hdr:000000000001B214                 db 0C8h
.eh_frame_hdr:000000000001B215                 db  1Dh
.eh_frame_hdr:000000000001B216                 db    0
.eh_frame_hdr:000000000001B217                 db    0
.eh_frame_hdr:000000000001B218                 db  44h ; D
.eh_frame_hdr:000000000001B219                 db  2Dh ; -
.eh_frame_hdr:000000000001B21A                 db 0FFh
.eh_frame_hdr:000000000001B21B                 db 0FFh
.eh_frame_hdr:000000000001B21C                 db 0DCh
.eh_frame_hdr:000000000001B21D                 db  1Dh
.eh_frame_hdr:000000000001B21E                 db    0
.eh_frame_hdr:000000000001B21F                 db    0
.eh_frame_hdr:000000000001B220                 db  54h ; T
.eh_frame_hdr:000000000001B221                 db  2Dh ; -
.eh_frame_hdr:000000000001B222                 db 0FFh
.eh_frame_hdr:000000000001B223                 db 0FFh
.eh_frame_hdr:000000000001B224                 db 0F0h
.eh_frame_hdr:000000000001B225                 db  1Dh
.eh_frame_hdr:000000000001B226                 db    0
.eh_frame_hdr:000000000001B227                 db    0
.eh_frame_hdr:000000000001B228                 db  64h ; d
.eh_frame_hdr:000000000001B229                 db  2Dh ; -
.eh_frame_hdr:000000000001B22A                 db 0FFh
.eh_frame_hdr:000000000001B22B                 db 0FFh
.eh_frame_hdr:000000000001B22C                 db    4
.eh_frame_hdr:000000000001B22D                 db  1Eh
.eh_frame_hdr:000000000001B22E                 db    0
.eh_frame_hdr:000000000001B22F                 db    0
.eh_frame_hdr:000000000001B230                 db 0B4h
.eh_frame_hdr:000000000001B231                 db  2Dh ; -
.eh_frame_hdr:000000000001B232                 db 0FFh
.eh_frame_hdr:000000000001B233                 db 0FFh
.eh_frame_hdr:000000000001B234                 db  18h
.eh_frame_hdr:000000000001B235                 db  1Eh
.eh_frame_hdr:000000000001B236                 db    0
.eh_frame_hdr:000000000001B237                 db    0
.eh_frame_hdr:000000000001B238                 db  14h
.eh_frame_hdr:000000000001B239                 db  2Eh ; .
.eh_frame_hdr:000000000001B23A                 db 0FFh
.eh_frame_hdr:000000000001B23B                 db 0FFh
.eh_frame_hdr:000000000001B23C                 db  2Ch ; ,
.eh_frame_hdr:000000000001B23D                 db  1Eh
.eh_frame_hdr:000000000001B23E                 db    0
.eh_frame_hdr:000000000001B23F                 db    0
.eh_frame_hdr:000000000001B240                 db  64h ; d
.eh_frame_hdr:000000000001B241                 db  2Fh ; /
.eh_frame_hdr:000000000001B242                 db 0FFh
.eh_frame_hdr:000000000001B243                 db 0FFh
.eh_frame_hdr:000000000001B244                 db  68h ; h
.eh_frame_hdr:000000000001B245                 db  1Eh
.eh_frame_hdr:000000000001B246                 db    0
.eh_frame_hdr:000000000001B247                 db    0
.eh_frame_hdr:000000000001B248                 db 0C4h
.eh_frame_hdr:000000000001B249                 db  2Fh ; /
.eh_frame_hdr:000000000001B24A                 db 0FFh
.eh_frame_hdr:000000000001B24B                 db 0FFh
.eh_frame_hdr:000000000001B24C                 db 0A0h
.eh_frame_hdr:000000000001B24D                 db  1Eh
.eh_frame_hdr:000000000001B24E                 db    0
.eh_frame_hdr:000000000001B24F                 db    0
.eh_frame_hdr:000000000001B250                 db  14h
.eh_frame_hdr:000000000001B251                 db  30h ; 0
.eh_frame_hdr:000000000001B252                 db 0FFh
.eh_frame_hdr:000000000001B253                 db 0FFh
.eh_frame_hdr:000000000001B254                 db 0B4h
.eh_frame_hdr:000000000001B255                 db  1Eh
.eh_frame_hdr:000000000001B256                 db    0
.eh_frame_hdr:000000000001B257                 db    0
.eh_frame_hdr:000000000001B258                 db  94h
.eh_frame_hdr:000000000001B259                 db  30h ; 0
.eh_frame_hdr:000000000001B25A                 db 0FFh
.eh_frame_hdr:000000000001B25B                 db 0FFh
.eh_frame_hdr:000000000001B25C                 db 0E8h
.eh_frame_hdr:000000000001B25D                 db  1Eh
.eh_frame_hdr:000000000001B25E                 db    0
.eh_frame_hdr:000000000001B25F                 db    0
.eh_frame_hdr:000000000001B260                 db    4
.eh_frame_hdr:000000000001B261                 db  31h ; 1
.eh_frame_hdr:000000000001B262                 db 0FFh
.eh_frame_hdr:000000000001B263                 db 0FFh
.eh_frame_hdr:000000000001B264                 db 0FCh
.eh_frame_hdr:000000000001B265                 db  1Eh
.eh_frame_hdr:000000000001B266                 db    0
.eh_frame_hdr:000000000001B267                 db    0
.eh_frame_hdr:000000000001B268                 db  74h ; t
.eh_frame_hdr:000000000001B269                 db  31h ; 1
.eh_frame_hdr:000000000001B26A                 db 0FFh
.eh_frame_hdr:000000000001B26B                 db 0FFh
.eh_frame_hdr:000000000001B26C                 db  48h ; H
.eh_frame_hdr:000000000001B26D                 db  1Fh
.eh_frame_hdr:000000000001B26E                 db    0
.eh_frame_hdr:000000000001B26F                 db    0
.eh_frame_hdr:000000000001B270                 db 0B4h
.eh_frame_hdr:000000000001B271                 db  31h ; 1
.eh_frame_hdr:000000000001B272                 db 0FFh
.eh_frame_hdr:000000000001B273                 db 0FFh
.eh_frame_hdr:000000000001B274                 db  5Ch ; \
.eh_frame_hdr:000000000001B275                 db  1Fh
.eh_frame_hdr:000000000001B276                 db    0
.eh_frame_hdr:000000000001B277                 db    0
.eh_frame_hdr:000000000001B278                 db 0D4h
.eh_frame_hdr:000000000001B279                 db  31h ; 1
.eh_frame_hdr:000000000001B27A                 db 0FFh
.eh_frame_hdr:000000000001B27B                 db 0FFh
.eh_frame_hdr:000000000001B27C                 db  70h ; p
.eh_frame_hdr:000000000001B27D                 db  1Fh
.eh_frame_hdr:000000000001B27E                 db    0
.eh_frame_hdr:000000000001B27F                 db    0
.eh_frame_hdr:000000000001B280                 db  94h
.eh_frame_hdr:000000000001B281                 db  33h ; 3
.eh_frame_hdr:000000000001B282                 db 0FFh
.eh_frame_hdr:000000000001B283                 db 0FFh
.eh_frame_hdr:000000000001B284                 db 0BCh
.eh_frame_hdr:000000000001B285                 db  1Fh
.eh_frame_hdr:000000000001B286                 db    0
.eh_frame_hdr:000000000001B287                 db    0
.eh_frame_hdr:000000000001B288                 db  24h ; $
.eh_frame_hdr:000000000001B289                 db  34h ; 4
.eh_frame_hdr:000000000001B28A                 db 0FFh
.eh_frame_hdr:000000000001B28B                 db 0FFh
.eh_frame_hdr:000000000001B28C                 db 0E8h
.eh_frame_hdr:000000000001B28D                 db  1Fh
.eh_frame_hdr:000000000001B28E                 db    0
.eh_frame_hdr:000000000001B28F                 db    0
.eh_frame_hdr:000000000001B290                 db    4
.eh_frame_hdr:000000000001B291                 db  35h ; 5
.eh_frame_hdr:000000000001B292                 db 0FFh
.eh_frame_hdr:000000000001B293                 db 0FFh
.eh_frame_hdr:000000000001B294                 db  14h
.eh_frame_hdr:000000000001B295                 db  20h
.eh_frame_hdr:000000000001B296                 db    0
.eh_frame_hdr:000000000001B297                 db    0
.eh_frame_hdr:000000000001B298                 db  44h ; D
.eh_frame_hdr:000000000001B299                 db  37h ; 7
.eh_frame_hdr:000000000001B29A                 db 0FFh
.eh_frame_hdr:000000000001B29B                 db 0FFh
.eh_frame_hdr:000000000001B29C                 db  4Ch ; L
.eh_frame_hdr:000000000001B29D                 db  20h
.eh_frame_hdr:000000000001B29E                 db    0
.eh_frame_hdr:000000000001B29F                 db    0
.eh_frame_hdr:000000000001B2A0                 db 0D4h
.eh_frame_hdr:000000000001B2A1                 db  39h ; 9
.eh_frame_hdr:000000000001B2A2                 db 0FFh
.eh_frame_hdr:000000000001B2A3                 db 0FFh
.eh_frame_hdr:000000000001B2A4                 db  88h
.eh_frame_hdr:000000000001B2A5                 db  20h
.eh_frame_hdr:000000000001B2A6                 db    0
.eh_frame_hdr:000000000001B2A7                 db    0
.eh_frame_hdr:000000000001B2A8                 db  34h ; 4
.eh_frame_hdr:000000000001B2A9                 db  3Ah ; :
.eh_frame_hdr:000000000001B2AA                 db 0FFh
.eh_frame_hdr:000000000001B2AB                 db 0FFh
.eh_frame_hdr:000000000001B2AC                 db 0ACh
.eh_frame_hdr:000000000001B2AD                 db  20h
.eh_frame_hdr:000000000001B2AE                 db    0
.eh_frame_hdr:000000000001B2AF                 db    0
.eh_frame_hdr:000000000001B2B0                 db  44h ; D
.eh_frame_hdr:000000000001B2B1                 db  3Ch ; <
.eh_frame_hdr:000000000001B2B2                 db 0FFh
.eh_frame_hdr:000000000001B2B3                 db 0FFh
.eh_frame_hdr:000000000001B2B4                 db 0E4h
.eh_frame_hdr:000000000001B2B5                 db  20h
.eh_frame_hdr:000000000001B2B6                 db    0
.eh_frame_hdr:000000000001B2B7                 db    0
.eh_frame_hdr:000000000001B2B8                 db  74h ; t
.eh_frame_hdr:000000000001B2B9                 db  3Ch ; <
.eh_frame_hdr:000000000001B2BA                 db 0FFh
.eh_frame_hdr:000000000001B2BB                 db 0FFh
.eh_frame_hdr:000000000001B2BC                 db  0Ch
.eh_frame_hdr:000000000001B2BD                 db  21h ; !
.eh_frame_hdr:000000000001B2BE                 db    0
.eh_frame_hdr:000000000001B2BF                 db    0
.eh_frame_hdr:000000000001B2C0                 db  84h
.eh_frame_hdr:000000000001B2C1                 db  3Ch ; <
.eh_frame_hdr:000000000001B2C2                 db 0FFh
.eh_frame_hdr:000000000001B2C3                 db 0FFh
.eh_frame_hdr:000000000001B2C4                 db  20h
.eh_frame_hdr:000000000001B2C5                 db  21h ; !
.eh_frame_hdr:000000000001B2C6                 db    0
.eh_frame_hdr:000000000001B2C7                 db    0
.eh_frame_hdr:000000000001B2C8                 db 0B4h
.eh_frame_hdr:000000000001B2C9                 db  3Ch ; <
.eh_frame_hdr:000000000001B2CA                 db 0FFh
.eh_frame_hdr:000000000001B2CB                 db 0FFh
.eh_frame_hdr:000000000001B2CC                 db  38h ; 8
.eh_frame_hdr:000000000001B2CD                 db  21h ; !
.eh_frame_hdr:000000000001B2CE                 db    0
.eh_frame_hdr:000000000001B2CF                 db    0
.eh_frame_hdr:000000000001B2D0                 db 0F4h
.eh_frame_hdr:000000000001B2D1                 db  3Ch ; <
.eh_frame_hdr:000000000001B2D2                 db 0FFh
.eh_frame_hdr:000000000001B2D3                 db 0FFh
.eh_frame_hdr:000000000001B2D4                 db  50h ; P
.eh_frame_hdr:000000000001B2D5                 db  21h ; !
.eh_frame_hdr:000000000001B2D6                 db    0
.eh_frame_hdr:000000000001B2D7                 db    0
.eh_frame_hdr:000000000001B2D8                 db  14h
.eh_frame_hdr:000000000001B2D9                 db  3Dh ; =
.eh_frame_hdr:000000000001B2DA                 db 0FFh
.eh_frame_hdr:000000000001B2DB                 db 0FFh
.eh_frame_hdr:000000000001B2DC                 db  6Ch ; l
.eh_frame_hdr:000000000001B2DD                 db  21h ; !
.eh_frame_hdr:000000000001B2DE                 db    0
.eh_frame_hdr:000000000001B2DF                 db    0
.eh_frame_hdr:000000000001B2E0                 db 0E4h
.eh_frame_hdr:000000000001B2E1                 db  3Dh ; =
.eh_frame_hdr:000000000001B2E2                 db 0FFh
.eh_frame_hdr:000000000001B2E3                 db 0FFh
.eh_frame_hdr:000000000001B2E4                 db  80h
.eh_frame_hdr:000000000001B2E5                 db  21h ; !
.eh_frame_hdr:000000000001B2E6                 db    0
.eh_frame_hdr:000000000001B2E7                 db    0
.eh_frame_hdr:000000000001B2E8                 db 0F4h
.eh_frame_hdr:000000000001B2E9                 db  47h ; G
.eh_frame_hdr:000000000001B2EA                 db 0FFh
.eh_frame_hdr:000000000001B2EB                 db 0FFh
.eh_frame_hdr:000000000001B2EC                 db  28h ; (
.eh_frame_hdr:000000000001B2ED                 db  22h ; "
.eh_frame_hdr:000000000001B2EE                 db    0
.eh_frame_hdr:000000000001B2EF                 db    0
.eh_frame_hdr:000000000001B2F0                 db 0E4h
.eh_frame_hdr:000000000001B2F1                 db  49h ; I
.eh_frame_hdr:000000000001B2F2                 db 0FFh
.eh_frame_hdr:000000000001B2F3                 db 0FFh
.eh_frame_hdr:000000000001B2F4                 db  64h ; d
.eh_frame_hdr:000000000001B2F5                 db  22h ; "
.eh_frame_hdr:000000000001B2F6                 db    0
.eh_frame_hdr:000000000001B2F7                 db    0
.eh_frame_hdr:000000000001B2F8                 db  84h
.eh_frame_hdr:000000000001B2F9                 db  4Ah ; J
.eh_frame_hdr:000000000001B2FA                 db 0FFh
.eh_frame_hdr:000000000001B2FB                 db 0FFh
.eh_frame_hdr:000000000001B2FC                 db  94h
.eh_frame_hdr:000000000001B2FD                 db  22h ; "
.eh_frame_hdr:000000000001B2FE                 db    0
.eh_frame_hdr:000000000001B2FF                 db    0
.eh_frame_hdr:000000000001B300                 db  84h
.eh_frame_hdr:000000000001B301                 db  4Bh ; K
.eh_frame_hdr:000000000001B302                 db 0FFh
.eh_frame_hdr:000000000001B303                 db 0FFh
.eh_frame_hdr:000000000001B304                 db 0CCh
.eh_frame_hdr:000000000001B305                 db  22h ; "
.eh_frame_hdr:000000000001B306                 db    0
.eh_frame_hdr:000000000001B307                 db    0
.eh_frame_hdr:000000000001B308                 db  24h ; $
.eh_frame_hdr:000000000001B309                 db  4Ch ; L
.eh_frame_hdr:000000000001B30A                 db 0FFh
.eh_frame_hdr:000000000001B30B                 db 0FFh
.eh_frame_hdr:000000000001B30C                 db 0FCh
.eh_frame_hdr:000000000001B30D                 db  22h ; "
.eh_frame_hdr:000000000001B30E                 db    0
.eh_frame_hdr:000000000001B30F                 db    0
.eh_frame_hdr:000000000001B310                 db  24h ; $
.eh_frame_hdr:000000000001B311                 db  4Dh ; M
.eh_frame_hdr:000000000001B312                 db 0FFh
.eh_frame_hdr:000000000001B313                 db 0FFh
.eh_frame_hdr:000000000001B314                 db  34h ; 4
.eh_frame_hdr:000000000001B315                 db  23h ; #
.eh_frame_hdr:000000000001B316                 db    0
.eh_frame_hdr:000000000001B317                 db    0
.eh_frame_hdr:000000000001B318                 db 0C4h
.eh_frame_hdr:000000000001B319                 db  4Dh ; M
.eh_frame_hdr:000000000001B31A                 db 0FFh
.eh_frame_hdr:000000000001B31B                 db 0FFh
.eh_frame_hdr:000000000001B31C                 db  4Ch ; L
.eh_frame_hdr:000000000001B31D                 db  23h ; #
.eh_frame_hdr:000000000001B31E                 db    0
.eh_frame_hdr:000000000001B31F                 db    0
.eh_frame_hdr:000000000001B320                 db  14h
.eh_frame_hdr:000000000001B321                 db  4Eh ; N
.eh_frame_hdr:000000000001B322                 db 0FFh
.eh_frame_hdr:000000000001B323                 db 0FFh
.eh_frame_hdr:000000000001B324                 db  64h ; d
.eh_frame_hdr:000000000001B325                 db  23h ; #
.eh_frame_hdr:000000000001B326                 db    0
.eh_frame_hdr:000000000001B327                 db    0
.eh_frame_hdr:000000000001B328                 db 0E4h
.eh_frame_hdr:000000000001B329                 db  51h ; Q
.eh_frame_hdr:000000000001B32A                 db 0FFh
.eh_frame_hdr:000000000001B32B                 db 0FFh
.eh_frame_hdr:000000000001B32C                 db 0B0h
.eh_frame_hdr:000000000001B32D                 db  23h ; #
.eh_frame_hdr:000000000001B32E                 db    0
.eh_frame_hdr:000000000001B32F                 db    0
.eh_frame_hdr:000000000001B330                 db  84h
.eh_frame_hdr:000000000001B331                 db  52h ; R
.eh_frame_hdr:000000000001B332                 db 0FFh
.eh_frame_hdr:000000000001B333                 db 0FFh
.eh_frame_hdr:000000000001B334                 db 0FCh
.eh_frame_hdr:000000000001B335                 db  23h ; #
.eh_frame_hdr:000000000001B336                 db    0
.eh_frame_hdr:000000000001B337                 db    0
.eh_frame_hdr:000000000001B338                 db  44h ; D
.eh_frame_hdr:000000000001B339                 db  54h ; T
.eh_frame_hdr:000000000001B33A                 db 0FFh
.eh_frame_hdr:000000000001B33B                 db 0FFh
.eh_frame_hdr:000000000001B33C                 db  48h ; H
.eh_frame_hdr:000000000001B33D                 db  24h ; $
.eh_frame_hdr:000000000001B33E                 db    0
.eh_frame_hdr:000000000001B33F                 db    0
.eh_frame_hdr:000000000001B340                 db  74h ; t
.eh_frame_hdr:000000000001B341                 db  54h ; T
.eh_frame_hdr:000000000001B342                 db 0FFh
.eh_frame_hdr:000000000001B343                 db 0FFh
.eh_frame_hdr:000000000001B344                 db  74h ; t
.eh_frame_hdr:000000000001B345                 db  24h ; $
.eh_frame_hdr:000000000001B346                 db    0
.eh_frame_hdr:000000000001B347                 db    0
.eh_frame_hdr:000000000001B348                 db 0B4h
.eh_frame_hdr:000000000001B349                 db  56h ; V
.eh_frame_hdr:000000000001B34A                 db 0FFh
.eh_frame_hdr:000000000001B34B                 db 0FFh
.eh_frame_hdr:000000000001B34C                 db 0D8h
.eh_frame_hdr:000000000001B34D                 db  24h ; $
.eh_frame_hdr:000000000001B34E                 db    0
.eh_frame_hdr:000000000001B34F                 db    0
.eh_frame_hdr:000000000001B350                 db 0C4h
.eh_frame_hdr:000000000001B351                 db  56h ; V
.eh_frame_hdr:000000000001B352                 db 0FFh
.eh_frame_hdr:000000000001B353                 db 0FFh
.eh_frame_hdr:000000000001B354                 db 0ECh
.eh_frame_hdr:000000000001B355                 db  24h ; $
.eh_frame_hdr:000000000001B356                 db    0
.eh_frame_hdr:000000000001B357                 db    0
.eh_frame_hdr:000000000001B358                 db  14h
.eh_frame_hdr:000000000001B359                 db  57h ; W
.eh_frame_hdr:000000000001B35A                 db 0FFh
.eh_frame_hdr:000000000001B35B                 db 0FFh
.eh_frame_hdr:000000000001B35C                 db  18h
.eh_frame_hdr:000000000001B35D                 db  25h ; %
.eh_frame_hdr:000000000001B35E                 db    0
.eh_frame_hdr:000000000001B35F                 db    0
.eh_frame_hdr:000000000001B360                 db  64h ; d
.eh_frame_hdr:000000000001B361                 db  57h ; W
.eh_frame_hdr:000000000001B362                 db 0FFh
.eh_frame_hdr:000000000001B363                 db 0FFh
.eh_frame_hdr:000000000001B364                 db  44h ; D
.eh_frame_hdr:000000000001B365                 db  25h ; %
.eh_frame_hdr:000000000001B366                 db    0
.eh_frame_hdr:000000000001B367                 db    0
.eh_frame_hdr:000000000001B368                 db  24h ; $
.eh_frame_hdr:000000000001B369                 db  72h ; r
.eh_frame_hdr:000000000001B36A                 db 0FFh
.eh_frame_hdr:000000000001B36B                 db 0FFh
.eh_frame_hdr:000000000001B36C                 db 0BCh
.eh_frame_hdr:000000000001B36D                 db  25h ; %
.eh_frame_hdr:000000000001B36E                 db    0
.eh_frame_hdr:000000000001B36F                 db    0
.eh_frame_hdr:000000000001B370                 db  74h ; t
.eh_frame_hdr:000000000001B371                 db  72h ; r
.eh_frame_hdr:000000000001B372                 db 0FFh
.eh_frame_hdr:000000000001B373                 db 0FFh
.eh_frame_hdr:000000000001B374                 db 0ECh
.eh_frame_hdr:000000000001B375                 db  25h ; %
.eh_frame_hdr:000000000001B376                 db    0
.eh_frame_hdr:000000000001B377                 db    0
.eh_frame_hdr:000000000001B378                 db  14h
.eh_frame_hdr:000000000001B379                 db  73h ; s
.eh_frame_hdr:000000000001B37A                 db 0FFh
.eh_frame_hdr:000000000001B37B                 db 0FFh
.eh_frame_hdr:000000000001B37C                 db  0Ch
.eh_frame_hdr:000000000001B37D                 db  26h ; &
.eh_frame_hdr:000000000001B37E                 db    0
.eh_frame_hdr:000000000001B37F                 db    0
.eh_frame_hdr:000000000001B380                 db    4
.eh_frame_hdr:000000000001B381                 db  74h ; t
.eh_frame_hdr:000000000001B382                 db 0FFh
.eh_frame_hdr:000000000001B383                 db 0FFh
.eh_frame_hdr:000000000001B384                 db  50h ; P
.eh_frame_hdr:000000000001B385                 db  26h ; &
.eh_frame_hdr:000000000001B386                 db    0
.eh_frame_hdr:000000000001B387                 db    0
.eh_frame_hdr:000000000001B388                 db  44h ; D
.eh_frame_hdr:000000000001B389                 db  86h
.eh_frame_hdr:000000000001B38A                 db 0FFh
.eh_frame_hdr:000000000001B38B                 db 0FFh
.eh_frame_hdr:000000000001B38C                 db 0C8h
.eh_frame_hdr:000000000001B38D                 db  26h ; &
.eh_frame_hdr:000000000001B38E                 db    0
.eh_frame_hdr:000000000001B38F                 db    0
.eh_frame_hdr:000000000001B390                 db 0F4h
.eh_frame_hdr:000000000001B391                 db  87h
.eh_frame_hdr:000000000001B392                 db 0FFh
.eh_frame_hdr:000000000001B393                 db 0FFh
.eh_frame_hdr:000000000001B394                 db  34h ; 4
.eh_frame_hdr:000000000001B395                 db  27h ; '
.eh_frame_hdr:000000000001B396                 db    0
.eh_frame_hdr:000000000001B397                 db    0
.eh_frame_hdr:000000000001B398                 db  34h ; 4
.eh_frame_hdr:000000000001B399                 db  88h
.eh_frame_hdr:000000000001B39A                 db 0FFh
.eh_frame_hdr:000000000001B39B                 db 0FFh
.eh_frame_hdr:000000000001B39C                 db  60h ; `
.eh_frame_hdr:000000000001B39D                 db  27h ; '
.eh_frame_hdr:000000000001B39E                 db    0
.eh_frame_hdr:000000000001B39F                 db    0
.eh_frame_hdr:000000000001B3A0                 db  54h ; T
.eh_frame_hdr:000000000001B3A1                 db  88h
.eh_frame_hdr:000000000001B3A2                 db 0FFh
.eh_frame_hdr:000000000001B3A3                 db 0FFh
.eh_frame_hdr:000000000001B3A4                 db  74h ; t
.eh_frame_hdr:000000000001B3A5                 db  27h ; '
.eh_frame_hdr:000000000001B3A6                 db    0
.eh_frame_hdr:000000000001B3A7                 db    0
.eh_frame_hdr:000000000001B3A8                 db  74h ; t
.eh_frame_hdr:000000000001B3A9                 db  88h
.eh_frame_hdr:000000000001B3AA                 db 0FFh
.eh_frame_hdr:000000000001B3AB                 db 0FFh
.eh_frame_hdr:000000000001B3AC                 db  88h
.eh_frame_hdr:000000000001B3AD                 db  27h ; '
.eh_frame_hdr:000000000001B3AE                 db    0
.eh_frame_hdr:000000000001B3AF                 db    0
.eh_frame_hdr:000000000001B3B0                 db 0B4h
.eh_frame_hdr:000000000001B3B1                 db  88h
.eh_frame_hdr:000000000001B3B2                 db 0FFh
.eh_frame_hdr:000000000001B3B3                 db 0FFh
.eh_frame_hdr:000000000001B3B4                 db  9Ch
.eh_frame_hdr:000000000001B3B5                 db  27h ; '
.eh_frame_hdr:000000000001B3B6                 db    0
.eh_frame_hdr:000000000001B3B7                 db    0
.eh_frame_hdr:000000000001B3B8                 db 0D4h
.eh_frame_hdr:000000000001B3B9                 db  88h
.eh_frame_hdr:000000000001B3BA                 db 0FFh
.eh_frame_hdr:000000000001B3BB                 db 0FFh
.eh_frame_hdr:000000000001B3BC                 db 0B0h
.eh_frame_hdr:000000000001B3BD                 db  27h ; '
.eh_frame_hdr:000000000001B3BE                 db    0
.eh_frame_hdr:000000000001B3BF                 db    0
.eh_frame_hdr:000000000001B3C0                 db    4
.eh_frame_hdr:000000000001B3C1                 db  89h
.eh_frame_hdr:000000000001B3C2                 db 0FFh
.eh_frame_hdr:000000000001B3C3                 db 0FFh
.eh_frame_hdr:000000000001B3C4                 db 0C4h
.eh_frame_hdr:000000000001B3C5                 db  27h ; '
.eh_frame_hdr:000000000001B3C6                 db    0
.eh_frame_hdr:000000000001B3C7                 db    0
.eh_frame_hdr:000000000001B3C8                 db  84h
.eh_frame_hdr:000000000001B3C9                 db  89h
.eh_frame_hdr:000000000001B3CA                 db 0FFh
.eh_frame_hdr:000000000001B3CB                 db 0FFh
.eh_frame_hdr:000000000001B3CC                 db  18h
.eh_frame_hdr:000000000001B3CD                 db  28h ; (
.eh_frame_hdr:000000000001B3CE                 db    0
.eh_frame_hdr:000000000001B3CF                 db    0
.eh_frame_hdr:000000000001B3D0                 db  74h ; t
.eh_frame_hdr:000000000001B3D1                 db  8Ah
.eh_frame_hdr:000000000001B3D2                 db 0FFh
.eh_frame_hdr:000000000001B3D3                 db 0FFh
.eh_frame_hdr:000000000001B3D4                 db  84h
.eh_frame_hdr:000000000001B3D5                 db  28h ; (
.eh_frame_hdr:000000000001B3D6                 db    0
.eh_frame_hdr:000000000001B3D7                 db    0
.eh_frame_hdr:000000000001B3D8                 db  84h
.eh_frame_hdr:000000000001B3D9                 db  8Ah
.eh_frame_hdr:000000000001B3DA                 db 0FFh
.eh_frame_hdr:000000000001B3DB                 db 0FFh
.eh_frame_hdr:000000000001B3DC                 db  98h
.eh_frame_hdr:000000000001B3DD                 db  28h ; (
.eh_frame_hdr:000000000001B3DE                 db    0
.eh_frame_hdr:000000000001B3DF                 db    0
.eh_frame_hdr:000000000001B3E0                 db  24h ; $
.eh_frame_hdr:000000000001B3E1                 db  8Bh
.eh_frame_hdr:000000000001B3E2                 db 0FFh
.eh_frame_hdr:000000000001B3E3                 db 0FFh
.eh_frame_hdr:000000000001B3E4                 db 0C4h
.eh_frame_hdr:000000000001B3E5                 db  28h ; (
.eh_frame_hdr:000000000001B3E6                 db    0
.eh_frame_hdr:000000000001B3E7                 db    0
.eh_frame_hdr:000000000001B3E8                 db  44h ; D
.eh_frame_hdr:000000000001B3E9                 db  8Bh
.eh_frame_hdr:000000000001B3EA                 db 0FFh
.eh_frame_hdr:000000000001B3EB                 db 0FFh
.eh_frame_hdr:000000000001B3EC                 db 0D8h
.eh_frame_hdr:000000000001B3ED                 db  28h ; (
.eh_frame_hdr:000000000001B3EE                 db    0
.eh_frame_hdr:000000000001B3EF                 db    0
.eh_frame_hdr:000000000001B3F0                 db  54h ; T
.eh_frame_hdr:000000000001B3F1                 db  8Bh
.eh_frame_hdr:000000000001B3F2                 db 0FFh
.eh_frame_hdr:000000000001B3F3                 db 0FFh
.eh_frame_hdr:000000000001B3F4                 db 0ECh
.eh_frame_hdr:000000000001B3F5                 db  28h ; (
.eh_frame_hdr:000000000001B3F6                 db    0
.eh_frame_hdr:000000000001B3F7                 db    0
.eh_frame_hdr:000000000001B3F8                 db  74h ; t
.eh_frame_hdr:000000000001B3F9                 db  8Bh
.eh_frame_hdr:000000000001B3FA                 db 0FFh
.eh_frame_hdr:000000000001B3FB                 db 0FFh
.eh_frame_hdr:000000000001B3FC                 db    0
.eh_frame_hdr:000000000001B3FD                 db  29h ; )
.eh_frame_hdr:000000000001B3FE                 db    0
.eh_frame_hdr:000000000001B3FF                 db    0
.eh_frame_hdr:000000000001B400                 db  94h
.eh_frame_hdr:000000000001B401                 db  8Bh
.eh_frame_hdr:000000000001B402                 db 0FFh
.eh_frame_hdr:000000000001B403                 db 0FFh
.eh_frame_hdr:000000000001B404                 db  14h
.eh_frame_hdr:000000000001B405                 db  29h ; )
.eh_frame_hdr:000000000001B406                 db    0
.eh_frame_hdr:000000000001B407                 db    0
.eh_frame_hdr:000000000001B408                 db  24h ; $
.eh_frame_hdr:000000000001B409                 db  8Ch
.eh_frame_hdr:000000000001B40A                 db 0FFh
.eh_frame_hdr:000000000001B40B                 db 0FFh
.eh_frame_hdr:000000000001B40C                 db  30h ; 0
.eh_frame_hdr:000000000001B40D                 db  29h ; )
.eh_frame_hdr:000000000001B40E                 db    0
.eh_frame_hdr:000000000001B40F                 db    0
.eh_frame_hdr:000000000001B410                 db 0B4h
.eh_frame_hdr:000000000001B411                 db  8Ch
.eh_frame_hdr:000000000001B412                 db 0FFh
.eh_frame_hdr:000000000001B413                 db 0FFh
.eh_frame_hdr:000000000001B414                 db  4Ch ; L
.eh_frame_hdr:000000000001B415                 db  29h ; )
.eh_frame_hdr:000000000001B416                 db    0
.eh_frame_hdr:000000000001B417                 db    0
.eh_frame_hdr:000000000001B418                 db 0C4h
.eh_frame_hdr:000000000001B419                 db  8Ch
.eh_frame_hdr:000000000001B41A                 db 0FFh
.eh_frame_hdr:000000000001B41B                 db 0FFh
.eh_frame_hdr:000000000001B41C                 db  60h ; `
.eh_frame_hdr:000000000001B41D                 db  29h ; )
.eh_frame_hdr:000000000001B41E                 db    0
.eh_frame_hdr:000000000001B41F                 db    0
.eh_frame_hdr:000000000001B420                 db 0D4h
.eh_frame_hdr:000000000001B421                 db  8Ch
.eh_frame_hdr:000000000001B422                 db 0FFh
.eh_frame_hdr:000000000001B423                 db 0FFh
.eh_frame_hdr:000000000001B424                 db  74h ; t
.eh_frame_hdr:000000000001B425                 db  29h ; )
.eh_frame_hdr:000000000001B426                 db    0
.eh_frame_hdr:000000000001B427                 db    0
.eh_frame_hdr:000000000001B428                 db  74h ; t
.eh_frame_hdr:000000000001B429                 db  8Dh
.eh_frame_hdr:000000000001B42A                 db 0FFh
.eh_frame_hdr:000000000001B42B                 db 0FFh
.eh_frame_hdr:000000000001B42C                 db  90h
.eh_frame_hdr:000000000001B42D                 db  29h ; )
.eh_frame_hdr:000000000001B42E                 db    0
.eh_frame_hdr:000000000001B42F                 db    0
.eh_frame_hdr:000000000001B430                 db  84h
.eh_frame_hdr:000000000001B431                 db  8Dh
.eh_frame_hdr:000000000001B432                 db 0FFh
.eh_frame_hdr:000000000001B433                 db 0FFh
.eh_frame_hdr:000000000001B434                 db 0A4h
.eh_frame_hdr:000000000001B435                 db  29h ; )
.eh_frame_hdr:000000000001B436                 db    0
.eh_frame_hdr:000000000001B437                 db    0
.eh_frame_hdr:000000000001B438                 db 0A4h
.eh_frame_hdr:000000000001B439                 db  8Dh
.eh_frame_hdr:000000000001B43A                 db 0FFh
.eh_frame_hdr:000000000001B43B                 db 0FFh
.eh_frame_hdr:000000000001B43C                 db 0B8h
.eh_frame_hdr:000000000001B43D                 db  29h ; )
.eh_frame_hdr:000000000001B43E                 db    0
.eh_frame_hdr:000000000001B43F                 db    0
.eh_frame_hdr:000000000001B440                 db 0B4h
.eh_frame_hdr:000000000001B441                 db  8Dh
.eh_frame_hdr:000000000001B442                 db 0FFh
.eh_frame_hdr:000000000001B443                 db 0FFh
.eh_frame_hdr:000000000001B444                 db 0CCh
.eh_frame_hdr:000000000001B445                 db  29h ; )
.eh_frame_hdr:000000000001B446                 db    0
.eh_frame_hdr:000000000001B447                 db    0
.eh_frame_hdr:000000000001B448                 db  44h ; D
.eh_frame_hdr:000000000001B449                 db  8Eh
.eh_frame_hdr:000000000001B44A                 db 0FFh
.eh_frame_hdr:000000000001B44B                 db 0FFh
.eh_frame_hdr:000000000001B44C                 db 0E8h
.eh_frame_hdr:000000000001B44D                 db  29h ; )
.eh_frame_hdr:000000000001B44E                 db    0
.eh_frame_hdr:000000000001B44F                 db    0
.eh_frame_hdr:000000000001B450                 db 0E4h
.eh_frame_hdr:000000000001B451                 db  8Eh
.eh_frame_hdr:000000000001B452                 db 0FFh
.eh_frame_hdr:000000000001B453                 db 0FFh
.eh_frame_hdr:000000000001B454                 db    4
.eh_frame_hdr:000000000001B455                 db  2Ah ; *
.eh_frame_hdr:000000000001B456                 db    0
.eh_frame_hdr:000000000001B457                 db    0
.eh_frame_hdr:000000000001B458                 db 0F4h
.eh_frame_hdr:000000000001B459                 db  8Eh
.eh_frame_hdr:000000000001B45A                 db 0FFh
.eh_frame_hdr:000000000001B45B                 db 0FFh
.eh_frame_hdr:000000000001B45C                 db  18h
.eh_frame_hdr:000000000001B45D                 db  2Ah ; *
.eh_frame_hdr:000000000001B45E                 db    0
.eh_frame_hdr:000000000001B45F                 db    0
.eh_frame_hdr:000000000001B460                 db  14h
.eh_frame_hdr:000000000001B461                 db  8Fh
.eh_frame_hdr:000000000001B462                 db 0FFh
.eh_frame_hdr:000000000001B463                 db 0FFh
.eh_frame_hdr:000000000001B464                 db  2Ch ; ,
.eh_frame_hdr:000000000001B465                 db  2Ah ; *
.eh_frame_hdr:000000000001B466                 db    0
.eh_frame_hdr:000000000001B467                 db    0
.eh_frame_hdr:000000000001B468                 db  34h ; 4
.eh_frame_hdr:000000000001B469                 db  8Fh
.eh_frame_hdr:000000000001B46A                 db 0FFh
.eh_frame_hdr:000000000001B46B                 db 0FFh
.eh_frame_hdr:000000000001B46C                 db  40h ; @
.eh_frame_hdr:000000000001B46D                 db  2Ah ; *
.eh_frame_hdr:000000000001B46E                 db    0
.eh_frame_hdr:000000000001B46F                 db    0
.eh_frame_hdr:000000000001B470                 db  44h ; D
.eh_frame_hdr:000000000001B471                 db  8Fh
.eh_frame_hdr:000000000001B472                 db 0FFh
.eh_frame_hdr:000000000001B473                 db 0FFh
.eh_frame_hdr:000000000001B474                 db  54h ; T
.eh_frame_hdr:000000000001B475                 db  2Ah ; *
.eh_frame_hdr:000000000001B476                 db    0
.eh_frame_hdr:000000000001B477                 db    0
.eh_frame_hdr:000000000001B478                 db  64h ; d
.eh_frame_hdr:000000000001B479                 db  8Fh
.eh_frame_hdr:000000000001B47A                 db 0FFh
.eh_frame_hdr:000000000001B47B                 db 0FFh
.eh_frame_hdr:000000000001B47C                 db  68h ; h
.eh_frame_hdr:000000000001B47D                 db  2Ah ; *
.eh_frame_hdr:000000000001B47E                 db    0
.eh_frame_hdr:000000000001B47F                 db    0
.eh_frame_hdr:000000000001B480                 db  84h
.eh_frame_hdr:000000000001B481                 db  8Fh
.eh_frame_hdr:000000000001B482                 db 0FFh
.eh_frame_hdr:000000000001B483                 db 0FFh
.eh_frame_hdr:000000000001B484                 db  7Ch ; |
.eh_frame_hdr:000000000001B485                 db  2Ah ; *
.eh_frame_hdr:000000000001B486                 db    0
.eh_frame_hdr:000000000001B487                 db    0
.eh_frame_hdr:000000000001B488                 db 0A4h
.eh_frame_hdr:000000000001B489                 db  8Fh
.eh_frame_hdr:000000000001B48A                 db 0FFh
.eh_frame_hdr:000000000001B48B                 db 0FFh
.eh_frame_hdr:000000000001B48C                 db  94h
.eh_frame_hdr:000000000001B48D                 db  2Ah ; *
.eh_frame_hdr:000000000001B48E                 db    0
.eh_frame_hdr:000000000001B48F                 db    0
.eh_frame_hdr:000000000001B490                 db 0D4h
.eh_frame_hdr:000000000001B491                 db  90h
.eh_frame_hdr:000000000001B492                 db 0FFh
.eh_frame_hdr:000000000001B493                 db 0FFh
.eh_frame_hdr:000000000001B494                 db 0D0h
.eh_frame_hdr:000000000001B495                 db  2Ah ; *
.eh_frame_hdr:000000000001B496                 db    0
.eh_frame_hdr:000000000001B497                 db    0
.eh_frame_hdr:000000000001B498                 db  74h ; t
.eh_frame_hdr:000000000001B499                 db  91h
.eh_frame_hdr:000000000001B49A                 db 0FFh
.eh_frame_hdr:000000000001B49B                 db 0FFh
.eh_frame_hdr:000000000001B49C                 db  30h ; 0
.eh_frame_hdr:000000000001B49D                 db  2Bh ; +
.eh_frame_hdr:000000000001B49E                 db    0
.eh_frame_hdr:000000000001B49F                 db    0
.eh_frame_hdr:000000000001B4A0                 db  94h
.eh_frame_hdr:000000000001B4A1                 db  91h
.eh_frame_hdr:000000000001B4A2                 db 0FFh
.eh_frame_hdr:000000000001B4A3                 db 0FFh
.eh_frame_hdr:000000000001B4A4                 db  44h ; D
.eh_frame_hdr:000000000001B4A5                 db  2Bh ; +
.eh_frame_hdr:000000000001B4A6                 db    0
.eh_frame_hdr:000000000001B4A7                 db    0
.eh_frame_hdr:000000000001B4A8                 db 0B4h
.eh_frame_hdr:000000000001B4A9                 db  95h
.eh_frame_hdr:000000000001B4AA                 db 0FFh
.eh_frame_hdr:000000000001B4AB                 db 0FFh
.eh_frame_hdr:000000000001B4AC                 db  58h ; X
.eh_frame_hdr:000000000001B4AD                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4AE                 db    0
.eh_frame_hdr:000000000001B4AF                 db    0
.eh_frame_hdr:000000000001B4B0                 db 0D4h
.eh_frame_hdr:000000000001B4B1                 db  95h
.eh_frame_hdr:000000000001B4B2                 db 0FFh
.eh_frame_hdr:000000000001B4B3                 db 0FFh
.eh_frame_hdr:000000000001B4B4                 db  6Ch ; l
.eh_frame_hdr:000000000001B4B5                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4B6                 db    0
.eh_frame_hdr:000000000001B4B7                 db    0
.eh_frame_hdr:000000000001B4B8                 db  54h ; T
.eh_frame_hdr:000000000001B4B9                 db  96h
.eh_frame_hdr:000000000001B4BA                 db 0FFh
.eh_frame_hdr:000000000001B4BB                 db 0FFh
.eh_frame_hdr:000000000001B4BC                 db  88h
.eh_frame_hdr:000000000001B4BD                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4BE                 db    0
.eh_frame_hdr:000000000001B4BF                 db    0
.eh_frame_hdr:000000000001B4C0                 db  34h ; 4
.eh_frame_hdr:000000000001B4C1                 db  97h
.eh_frame_hdr:000000000001B4C2                 db 0FFh
.eh_frame_hdr:000000000001B4C3                 db 0FFh
.eh_frame_hdr:000000000001B4C4                 db 0B4h
.eh_frame_hdr:000000000001B4C5                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4C6                 db    0
.eh_frame_hdr:000000000001B4C7                 db    0
.eh_frame_hdr:000000000001B4C8                 db 0B4h
.eh_frame_hdr:000000000001B4C9                 db  97h
.eh_frame_hdr:000000000001B4CA                 db 0FFh
.eh_frame_hdr:000000000001B4CB                 db 0FFh
.eh_frame_hdr:000000000001B4CC                 db 0D4h
.eh_frame_hdr:000000000001B4CD                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4CE                 db    0
.eh_frame_hdr:000000000001B4CF                 db    0
.eh_frame_hdr:000000000001B4D0                 db 0D4h
.eh_frame_hdr:000000000001B4D1                 db  97h
.eh_frame_hdr:000000000001B4D2                 db 0FFh
.eh_frame_hdr:000000000001B4D3                 db 0FFh
.eh_frame_hdr:000000000001B4D4                 db 0F0h
.eh_frame_hdr:000000000001B4D5                 db  2Ch ; ,
.eh_frame_hdr:000000000001B4D6                 db    0
.eh_frame_hdr:000000000001B4D7                 db    0
.eh_frame_hdr:000000000001B4D8                 db    4
.eh_frame_hdr:000000000001B4D9                 db  98h
.eh_frame_hdr:000000000001B4DA                 db 0FFh
.eh_frame_hdr:000000000001B4DB                 db 0FFh
.eh_frame_hdr:000000000001B4DC                 db    4
.eh_frame_hdr:000000000001B4DD                 db  2Dh ; -
.eh_frame_hdr:000000000001B4DE                 db    0
.eh_frame_hdr:000000000001B4DF                 db    0
.eh_frame_hdr:000000000001B4E0                 db  14h
.eh_frame_hdr:000000000001B4E1                 db  98h
.eh_frame_hdr:000000000001B4E2                 db 0FFh
.eh_frame_hdr:000000000001B4E3                 db 0FFh
.eh_frame_hdr:000000000001B4E4                 db  18h
.eh_frame_hdr:000000000001B4E5                 db  2Dh ; -
.eh_frame_hdr:000000000001B4E6                 db    0
.eh_frame_hdr:000000000001B4E7                 db    0
.eh_frame_hdr:000000000001B4E8                 db  54h ; T
.eh_frame_hdr:000000000001B4E9                 db  98h
.eh_frame_hdr:000000000001B4EA                 db 0FFh
.eh_frame_hdr:000000000001B4EB                 db 0FFh
.eh_frame_hdr:000000000001B4EC                 db  3Ch ; <
.eh_frame_hdr:000000000001B4ED                 db  2Dh ; -
.eh_frame_hdr:000000000001B4EE                 db    0
.eh_frame_hdr:000000000001B4EF                 db    0
.eh_frame_hdr:000000000001B4F0                 db  84h
.eh_frame_hdr:000000000001B4F1                 db  98h
.eh_frame_hdr:000000000001B4F2                 db 0FFh
.eh_frame_hdr:000000000001B4F3                 db 0FFh
.eh_frame_hdr:000000000001B4F4                 db  50h ; P
.eh_frame_hdr:000000000001B4F5                 db  2Dh ; -
.eh_frame_hdr:000000000001B4F6                 db    0
.eh_frame_hdr:000000000001B4F7                 db    0
.eh_frame_hdr:000000000001B4F8                 db  14h
.eh_frame_hdr:000000000001B4F9                 db  99h
.eh_frame_hdr:000000000001B4FA                 db 0FFh
.eh_frame_hdr:000000000001B4FB                 db 0FFh
.eh_frame_hdr:000000000001B4FC                 db  68h ; h
.eh_frame_hdr:000000000001B4FD                 db  2Dh ; -
.eh_frame_hdr:000000000001B4FE                 db    0
.eh_frame_hdr:000000000001B4FF                 db    0
.eh_frame_hdr:000000000001B500                 db  64h ; d
.eh_frame_hdr:000000000001B501                 db  99h
.eh_frame_hdr:000000000001B502                 db 0FFh
.eh_frame_hdr:000000000001B503                 db 0FFh
.eh_frame_hdr:000000000001B504                 db  80h
.eh_frame_hdr:000000000001B505                 db  2Dh ; -
.eh_frame_hdr:000000000001B506                 db    0
.eh_frame_hdr:000000000001B507                 db    0
.eh_frame_hdr:000000000001B508                 db  84h
.eh_frame_hdr:000000000001B509                 db  99h
.eh_frame_hdr:000000000001B50A                 db 0FFh
.eh_frame_hdr:000000000001B50B                 db 0FFh
.eh_frame_hdr:000000000001B50C                 db  9Ch
.eh_frame_hdr:000000000001B50D                 db  2Dh ; -
.eh_frame_hdr:000000000001B50E                 db    0
.eh_frame_hdr:000000000001B50F                 db    0
.eh_frame_hdr:000000000001B510                 db 0B4h
.eh_frame_hdr:000000000001B511                 db  99h
.eh_frame_hdr:000000000001B512                 db 0FFh
.eh_frame_hdr:000000000001B513                 db 0FFh
.eh_frame_hdr:000000000001B514                 db 0B8h
.eh_frame_hdr:000000000001B515                 db  2Dh ; -
.eh_frame_hdr:000000000001B516                 db    0
.eh_frame_hdr:000000000001B517                 db    0
.eh_frame_hdr:000000000001B518                 db 0E4h
.eh_frame_hdr:000000000001B519                 db  99h
.eh_frame_hdr:000000000001B51A                 db 0FFh
.eh_frame_hdr:000000000001B51B                 db 0FFh
.eh_frame_hdr:000000000001B51C                 db 0E0h
.eh_frame_hdr:000000000001B51D                 db  2Dh ; -
.eh_frame_hdr:000000000001B51E                 db    0
.eh_frame_hdr:000000000001B51F                 db    0
.eh_frame_hdr:000000000001B520                 db    4
.eh_frame_hdr:000000000001B521                 db  9Ah
.eh_frame_hdr:000000000001B522                 db 0FFh
.eh_frame_hdr:000000000001B523                 db 0FFh
.eh_frame_hdr:000000000001B524                 db 0FCh
.eh_frame_hdr:000000000001B525                 db  2Dh ; -
.eh_frame_hdr:000000000001B526                 db    0
.eh_frame_hdr:000000000001B527                 db    0
.eh_frame_hdr:000000000001B528                 db  44h ; D
.eh_frame_hdr:000000000001B529                 db  9Ah
.eh_frame_hdr:000000000001B52A                 db 0FFh
.eh_frame_hdr:000000000001B52B                 db 0FFh
.eh_frame_hdr:000000000001B52C                 db  14h
.eh_frame_hdr:000000000001B52D                 db  2Eh ; .
.eh_frame_hdr:000000000001B52E                 db    0
.eh_frame_hdr:000000000001B52F                 db    0
.eh_frame_hdr:000000000001B530                 db  44h ; D
.eh_frame_hdr:000000000001B531                 db  9Bh
.eh_frame_hdr:000000000001B532                 db 0FFh
.eh_frame_hdr:000000000001B533                 db 0FFh
.eh_frame_hdr:000000000001B534                 db  60h ; `
.eh_frame_hdr:000000000001B535                 db  2Eh ; .
.eh_frame_hdr:000000000001B536                 db    0
.eh_frame_hdr:000000000001B537                 db    0
.eh_frame_hdr:000000000001B538                 db  74h ; t
.eh_frame_hdr:000000000001B539                 db  9Bh
.eh_frame_hdr:000000000001B53A                 db 0FFh
.eh_frame_hdr:000000000001B53B                 db 0FFh
.eh_frame_hdr:000000000001B53C                 db  7Ch ; |
.eh_frame_hdr:000000000001B53D                 db  2Eh ; .
.eh_frame_hdr:000000000001B53E                 db    0
.eh_frame_hdr:000000000001B53F                 db    0
.eh_frame_hdr:000000000001B540                 db 0A4h
.eh_frame_hdr:000000000001B541                 db  9Bh
.eh_frame_hdr:000000000001B542                 db 0FFh
.eh_frame_hdr:000000000001B543                 db 0FFh
.eh_frame_hdr:000000000001B544                 db  9Ch
.eh_frame_hdr:000000000001B545                 db  2Eh ; .
.eh_frame_hdr:000000000001B546                 db    0
.eh_frame_hdr:000000000001B547                 db    0
.eh_frame_hdr:000000000001B548                 db  84h
.eh_frame_hdr:000000000001B549                 db  9Ch
.eh_frame_hdr:000000000001B54A                 db 0FFh
.eh_frame_hdr:000000000001B54B                 db 0FFh
.eh_frame_hdr:000000000001B54C                 db 0E4h
.eh_frame_hdr:000000000001B54D                 db  2Eh ; .
.eh_frame_hdr:000000000001B54E                 db    0
.eh_frame_hdr:000000000001B54F                 db    0
.eh_frame_hdr:000000000001B550                 db 0A4h
.eh_frame_hdr:000000000001B551                 db 0A0h
.eh_frame_hdr:000000000001B552                 db 0FFh
.eh_frame_hdr:000000000001B553                 db 0FFh
.eh_frame_hdr:000000000001B554                 db  34h ; 4
.eh_frame_hdr:000000000001B555                 db  2Fh ; /
.eh_frame_hdr:000000000001B556                 db    0
.eh_frame_hdr:000000000001B557                 db    0
.eh_frame_hdr:000000000001B558                 db  54h ; T
.eh_frame_hdr:000000000001B559                 db 0A1h
.eh_frame_hdr:000000000001B55A                 db 0FFh
.eh_frame_hdr:000000000001B55B                 db 0FFh
.eh_frame_hdr:000000000001B55C                 db  5Ch ; \
.eh_frame_hdr:000000000001B55D                 db  2Fh ; /
.eh_frame_hdr:000000000001B55E                 db    0
.eh_frame_hdr:000000000001B55F                 db    0
.eh_frame_hdr:000000000001B560                 db  74h ; t
.eh_frame_hdr:000000000001B561                 db 0A5h
.eh_frame_hdr:000000000001B562                 db 0FFh
.eh_frame_hdr:000000000001B563                 db 0FFh
.eh_frame_hdr:000000000001B564                 db 0ACh
.eh_frame_hdr:000000000001B565                 db  2Fh ; /
.eh_frame_hdr:000000000001B566                 db    0
.eh_frame_hdr:000000000001B567                 db    0
.eh_frame_hdr:000000000001B568                 db    4
.eh_frame_hdr:000000000001B569                 db 0A6h
.eh_frame_hdr:000000000001B56A                 db 0FFh
.eh_frame_hdr:000000000001B56B                 db 0FFh
.eh_frame_hdr:000000000001B56C                 db 0ECh
.eh_frame_hdr:000000000001B56D                 db  2Fh ; /
.eh_frame_hdr:000000000001B56E                 db    0
.eh_frame_hdr:000000000001B56F                 db    0
.eh_frame_hdr:000000000001B570                 db  44h ; D
.eh_frame_hdr:000000000001B571                 db 0A6h
.eh_frame_hdr:000000000001B572                 db 0FFh
.eh_frame_hdr:000000000001B573                 db 0FFh
.eh_frame_hdr:000000000001B574                 db    0
.eh_frame_hdr:000000000001B575                 db  30h ; 0
.eh_frame_hdr:000000000001B576                 db    0
.eh_frame_hdr:000000000001B577                 db    0
.eh_frame_hdr:000000000001B578                 db  64h ; d
.eh_frame_hdr:000000000001B579                 db 0A6h
.eh_frame_hdr:000000000001B57A                 db 0FFh
.eh_frame_hdr:000000000001B57B                 db 0FFh
.eh_frame_hdr:000000000001B57C                 db  14h
.eh_frame_hdr:000000000001B57D                 db  30h ; 0
.eh_frame_hdr:000000000001B57E                 db    0
.eh_frame_hdr:000000000001B57F                 db    0
.eh_frame_hdr:000000000001B580                 db  84h
.eh_frame_hdr:000000000001B581                 db 0A6h
.eh_frame_hdr:000000000001B582                 db 0FFh
.eh_frame_hdr:000000000001B583                 db 0FFh
.eh_frame_hdr:000000000001B584                 db  28h ; (
.eh_frame_hdr:000000000001B585                 db  30h ; 0
.eh_frame_hdr:000000000001B586                 db    0
.eh_frame_hdr:000000000001B587                 db    0
.eh_frame_hdr:000000000001B588                 db  14h
.eh_frame_hdr:000000000001B589                 db 0A7h
.eh_frame_hdr:000000000001B58A                 db 0FFh
.eh_frame_hdr:000000000001B58B                 db 0FFh
.eh_frame_hdr:000000000001B58C                 db  58h ; X
.eh_frame_hdr:000000000001B58D                 db  30h ; 0
.eh_frame_hdr:000000000001B58E                 db    0
.eh_frame_hdr:000000000001B58F                 db    0
.eh_frame_hdr:000000000001B590                 db  34h ; 4
.eh_frame_hdr:000000000001B591                 db 0A7h
.eh_frame_hdr:000000000001B592                 db 0FFh
.eh_frame_hdr:000000000001B593                 db 0FFh
.eh_frame_hdr:000000000001B594                 db  6Ch ; l
.eh_frame_hdr:000000000001B595                 db  30h ; 0
.eh_frame_hdr:000000000001B596                 db    0
.eh_frame_hdr:000000000001B597                 db    0
.eh_frame_hdr:000000000001B598                 db  54h ; T
.eh_frame_hdr:000000000001B599                 db 0A7h
.eh_frame_hdr:000000000001B59A                 db 0FFh
.eh_frame_hdr:000000000001B59B                 db 0FFh
.eh_frame_hdr:000000000001B59C                 db  80h
.eh_frame_hdr:000000000001B59D                 db  30h ; 0
.eh_frame_hdr:000000000001B59E                 db    0
.eh_frame_hdr:000000000001B59F                 db    0
.eh_frame_hdr:000000000001B5A0                 db  44h ; D
.eh_frame_hdr:000000000001B5A1                 db 0A8h
.eh_frame_hdr:000000000001B5A2                 db 0FFh
.eh_frame_hdr:000000000001B5A3                 db 0FFh
.eh_frame_hdr:000000000001B5A4                 db 0C0h
.eh_frame_hdr:000000000001B5A5                 db  30h ; 0
.eh_frame_hdr:000000000001B5A6                 db    0
.eh_frame_hdr:000000000001B5A7                 db    0
.eh_frame_hdr:000000000001B5A8                 db  84h
.eh_frame_hdr:000000000001B5A9                 db 0A8h
.eh_frame_hdr:000000000001B5AA                 db 0FFh
.eh_frame_hdr:000000000001B5AB                 db 0FFh
.eh_frame_hdr:000000000001B5AC                 db 0D4h
.eh_frame_hdr:000000000001B5AD                 db  30h ; 0
.eh_frame_hdr:000000000001B5AE                 db    0
.eh_frame_hdr:000000000001B5AF                 db    0
.eh_frame_hdr:000000000001B5B0                 db 0F4h
.eh_frame_hdr:000000000001B5B1                 db 0A8h
.eh_frame_hdr:000000000001B5B2                 db 0FFh
.eh_frame_hdr:000000000001B5B3                 db 0FFh
.eh_frame_hdr:000000000001B5B4                 db  0Ch
.eh_frame_hdr:000000000001B5B5                 db  31h ; 1
.eh_frame_hdr:000000000001B5B6                 db    0
.eh_frame_hdr:000000000001B5B7                 db    0
.eh_frame_hdr:000000000001B5B8                 db  24h ; $
.eh_frame_hdr:000000000001B5B9                 db 0A9h
.eh_frame_hdr:000000000001B5BA                 db 0FFh
.eh_frame_hdr:000000000001B5BB                 db 0FFh
.eh_frame_hdr:000000000001B5BC                 db  24h ; $
.eh_frame_hdr:000000000001B5BD                 db  31h ; 1
.eh_frame_hdr:000000000001B5BE                 db    0
.eh_frame_hdr:000000000001B5BF                 db    0
.eh_frame_hdr:000000000001B5C0                 db  54h ; T
.eh_frame_hdr:000000000001B5C1                 db 0A9h
.eh_frame_hdr:000000000001B5C2                 db 0FFh
.eh_frame_hdr:000000000001B5C3                 db 0FFh
.eh_frame_hdr:000000000001B5C4                 db  38h ; 8
.eh_frame_hdr:000000000001B5C5                 db  31h ; 1
.eh_frame_hdr:000000000001B5C6                 db    0
.eh_frame_hdr:000000000001B5C7                 db    0
.eh_frame_hdr:000000000001B5C8                 db  84h
.eh_frame_hdr:000000000001B5C9                 db 0A9h
.eh_frame_hdr:000000000001B5CA                 db 0FFh
.eh_frame_hdr:000000000001B5CB                 db 0FFh
.eh_frame_hdr:000000000001B5CC                 db  54h ; T
.eh_frame_hdr:000000000001B5CD                 db  31h ; 1
.eh_frame_hdr:000000000001B5CE                 db    0
.eh_frame_hdr:000000000001B5CF                 db    0
.eh_frame_hdr:000000000001B5D0                 db 0E4h
.eh_frame_hdr:000000000001B5D1                 db 0A9h
.eh_frame_hdr:000000000001B5D2                 db 0FFh
.eh_frame_hdr:000000000001B5D3                 db 0FFh
.eh_frame_hdr:000000000001B5D4                 db  90h
.eh_frame_hdr:000000000001B5D5                 db  31h ; 1
.eh_frame_hdr:000000000001B5D6                 db    0
.eh_frame_hdr:000000000001B5D7                 db    0
.eh_frame_hdr:000000000001B5D8                 db  74h ; t
.eh_frame_hdr:000000000001B5D9                 db 0AAh
.eh_frame_hdr:000000000001B5DA                 db 0FFh
.eh_frame_hdr:000000000001B5DB                 db 0FFh
.eh_frame_hdr:000000000001B5DC                 db 0C8h
.eh_frame_hdr:000000000001B5DD                 db  31h ; 1
.eh_frame_hdr:000000000001B5DE                 db    0
.eh_frame_hdr:000000000001B5DF                 db    0
.eh_frame_hdr:000000000001B5E0                 db 0B4h
.eh_frame_hdr:000000000001B5E1                 db 0ABh
.eh_frame_hdr:000000000001B5E2                 db 0FFh
.eh_frame_hdr:000000000001B5E3                 db 0FFh
.eh_frame_hdr:000000000001B5E4                 db  14h
.eh_frame_hdr:000000000001B5E5                 db  32h ; 2
.eh_frame_hdr:000000000001B5E6                 db    0
.eh_frame_hdr:000000000001B5E7                 db    0
.eh_frame_hdr:000000000001B5E8                 db  94h
.eh_frame_hdr:000000000001B5E9                 db 0ACh
.eh_frame_hdr:000000000001B5EA                 db 0FFh
.eh_frame_hdr:000000000001B5EB                 db 0FFh
.eh_frame_hdr:000000000001B5EC                 db  68h ; h
.eh_frame_hdr:000000000001B5ED                 db  32h ; 2
.eh_frame_hdr:000000000001B5EE                 db    0
.eh_frame_hdr:000000000001B5EF                 db    0
.eh_frame_hdr:000000000001B5F0                 db 0A4h
.eh_frame_hdr:000000000001B5F1                 db 0ACh
.eh_frame_hdr:000000000001B5F2                 db 0FFh
.eh_frame_hdr:000000000001B5F3                 db 0FFh
.eh_frame_hdr:000000000001B5F4                 db  7Ch ; |
.eh_frame_hdr:000000000001B5F5                 db  32h ; 2
.eh_frame_hdr:000000000001B5F6                 db    0
.eh_frame_hdr:000000000001B5F7                 db    0
.eh_frame_hdr:000000000001B5F8                 db  54h ; T
.eh_frame_hdr:000000000001B5F9                 db 0ADh
.eh_frame_hdr:000000000001B5FA                 db 0FFh
.eh_frame_hdr:000000000001B5FB                 db 0FFh
.eh_frame_hdr:000000000001B5FC                 db 0DCh
.eh_frame_hdr:000000000001B5FD                 db  32h ; 2
.eh_frame_hdr:000000000001B5FE                 db    0
.eh_frame_hdr:000000000001B5FF                 db    0
.eh_frame_hdr:000000000001B600                 db 0A4h
.eh_frame_hdr:000000000001B601                 db 0AEh
.eh_frame_hdr:000000000001B602                 db 0FFh
.eh_frame_hdr:000000000001B603                 db 0FFh
.eh_frame_hdr:000000000001B604                 db  14h
.eh_frame_hdr:000000000001B605                 db  33h ; 3
.eh_frame_hdr:000000000001B606                 db    0
.eh_frame_hdr:000000000001B607                 db    0
.eh_frame_hdr:000000000001B608                 db  24h ; $
.eh_frame_hdr:000000000001B609                 db 0AFh
.eh_frame_hdr:000000000001B60A                 db 0FFh
.eh_frame_hdr:000000000001B60B                 db 0FFh
.eh_frame_hdr:000000000001B60C                 db  64h ; d
.eh_frame_hdr:000000000001B60D                 db  33h ; 3
.eh_frame_hdr:000000000001B60E                 db    0
.eh_frame_hdr:000000000001B60F                 db    0
.eh_frame_hdr:000000000001B610                 db  44h ; D
.eh_frame_hdr:000000000001B611                 db 0AFh
.eh_frame_hdr:000000000001B612                 db 0FFh
.eh_frame_hdr:000000000001B613                 db 0FFh
.eh_frame_hdr:000000000001B614                 db  84h
.eh_frame_hdr:000000000001B615                 db  33h ; 3
.eh_frame_hdr:000000000001B616                 db    0
.eh_frame_hdr:000000000001B617                 db    0
.eh_frame_hdr:000000000001B618                 db  84h
.eh_frame_hdr:000000000001B619                 db 0AFh
.eh_frame_hdr:000000000001B61A                 db 0FFh
.eh_frame_hdr:000000000001B61B                 db 0FFh
.eh_frame_hdr:000000000001B61C                 db  9Ch
.eh_frame_hdr:000000000001B61D                 db  33h ; 3
.eh_frame_hdr:000000000001B61E                 db    0
.eh_frame_hdr:000000000001B61F                 db    0
.eh_frame_hdr:000000000001B620                 db 0C4h
.eh_frame_hdr:000000000001B621                 db 0AFh
.eh_frame_hdr:000000000001B622                 db 0FFh
.eh_frame_hdr:000000000001B623                 db 0FFh
.eh_frame_hdr:000000000001B624                 db 0BCh
.eh_frame_hdr:000000000001B625                 db  33h ; 3
.eh_frame_hdr:000000000001B626                 db    0
.eh_frame_hdr:000000000001B627                 db    0
.eh_frame_hdr:000000000001B628                 db  44h ; D
.eh_frame_hdr:000000000001B629                 db 0B0h
.eh_frame_hdr:000000000001B62A                 db 0FFh
.eh_frame_hdr:000000000001B62B                 db 0FFh
.eh_frame_hdr:000000000001B62C                 db 0F4h
.eh_frame_hdr:000000000001B62D                 db  33h ; 3
.eh_frame_hdr:000000000001B62E                 db    0
.eh_frame_hdr:000000000001B62F                 db    0
.eh_frame_hdr:000000000001B630                 db  84h
.eh_frame_hdr:000000000001B631                 db 0B0h
.eh_frame_hdr:000000000001B632                 db 0FFh
.eh_frame_hdr:000000000001B633                 db 0FFh
.eh_frame_hdr:000000000001B634                 db  14h
.eh_frame_hdr:000000000001B635                 db  34h ; 4
.eh_frame_hdr:000000000001B636                 db    0
.eh_frame_hdr:000000000001B637                 db    0
.eh_frame_hdr:000000000001B638                 db 0E4h
.eh_frame_hdr:000000000001B639                 db 0B0h
.eh_frame_hdr:000000000001B63A                 db 0FFh
.eh_frame_hdr:000000000001B63B                 db 0FFh
.eh_frame_hdr:000000000001B63C                 db  44h ; D
.eh_frame_hdr:000000000001B63D                 db  34h ; 4
.eh_frame_hdr:000000000001B63E                 db    0
.eh_frame_hdr:000000000001B63F                 db    0
.eh_frame_hdr:000000000001B640                 db  54h ; T
.eh_frame_hdr:000000000001B641                 db 0B1h
.eh_frame_hdr:000000000001B642                 db 0FFh
.eh_frame_hdr:000000000001B643                 db 0FFh
.eh_frame_hdr:000000000001B644                 db  8Ch
.eh_frame_hdr:000000000001B645                 db  34h ; 4
.eh_frame_hdr:000000000001B646                 db    0
.eh_frame_hdr:000000000001B647                 db    0
.eh_frame_hdr:000000000001B648                 db  64h ; d
.eh_frame_hdr:000000000001B649                 db 0B1h
.eh_frame_hdr:000000000001B64A                 db 0FFh
.eh_frame_hdr:000000000001B64B                 db 0FFh
.eh_frame_hdr:000000000001B64C                 db 0A4h
.eh_frame_hdr:000000000001B64D                 db  34h ; 4
.eh_frame_hdr:000000000001B64E                 db    0
.eh_frame_hdr:000000000001B64F                 db    0
.eh_frame_hdr:000000000001B64F _eh_frame_hdr   ends
.eh_frame_hdr:000000000001B64F
.eh_frame:000000000001B650 ; ===========================================================================
.eh_frame:000000000001B650
.eh_frame:000000000001B650 ; Segment type: Pure data
.eh_frame:000000000001B650 ; Segment permissions: Read
.eh_frame:000000000001B650 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000001B650                 assume cs:_eh_frame
.eh_frame:000000000001B650                 ;org 1B650h
.eh_frame:000000000001B650                 db  14h
.eh_frame:000000000001B651                 db    0
.eh_frame:000000000001B652                 db    0
.eh_frame:000000000001B653                 db    0
.eh_frame:000000000001B654                 db    0
.eh_frame:000000000001B655                 db    0
.eh_frame:000000000001B656                 db    0
.eh_frame:000000000001B657                 db    0
.eh_frame:000000000001B658                 db    1
.eh_frame:000000000001B659                 db  7Ah ; z
.eh_frame:000000000001B65A                 db  52h ; R
.eh_frame:000000000001B65B                 db    0
.eh_frame:000000000001B65C                 db    1
.eh_frame:000000000001B65D                 db  78h ; x
.eh_frame:000000000001B65E                 db  10h
.eh_frame:000000000001B65F                 db    1
.eh_frame:000000000001B660                 db  1Bh
.eh_frame:000000000001B661                 db  0Ch
.eh_frame:000000000001B662                 db    7
.eh_frame:000000000001B663                 db    8
.eh_frame:000000000001B664                 db  90h
.eh_frame:000000000001B665                 db    1
.eh_frame:000000000001B666                 db    7
.eh_frame:000000000001B667                 db  10h
.eh_frame:000000000001B668                 db  14h
.eh_frame:000000000001B669                 db    0
.eh_frame:000000000001B66A                 db    0
.eh_frame:000000000001B66B                 db    0
.eh_frame:000000000001B66C                 db  1Ch
.eh_frame:000000000001B66D                 db    0
.eh_frame:000000000001B66E                 db    0
.eh_frame:000000000001B66F                 db    0
.eh_frame:000000000001B670                 db    0
.eh_frame:000000000001B671                 db  9Ch
.eh_frame:000000000001B672                 db 0FEh
.eh_frame:000000000001B673                 db 0FFh
.eh_frame:000000000001B674                 db  2Bh ; +
.eh_frame:000000000001B675                 db    0
.eh_frame:000000000001B676                 db    0
.eh_frame:000000000001B677                 db    0
.eh_frame:000000000001B678                 db    0
.eh_frame:000000000001B679                 db    0
.eh_frame:000000000001B67A                 db    0
.eh_frame:000000000001B67B                 db    0
.eh_frame:000000000001B67C                 db    0
.eh_frame:000000000001B67D                 db    0
.eh_frame:000000000001B67E                 db    0
.eh_frame:000000000001B67F                 db    0
.eh_frame:000000000001B680                 db  14h
.eh_frame:000000000001B681                 db    0
.eh_frame:000000000001B682                 db    0
.eh_frame:000000000001B683                 db    0
.eh_frame:000000000001B684                 db    0
.eh_frame:000000000001B685                 db    0
.eh_frame:000000000001B686                 db    0
.eh_frame:000000000001B687                 db    0
.eh_frame:000000000001B688                 db    1
.eh_frame:000000000001B689                 db  7Ah ; z
.eh_frame:000000000001B68A                 db  52h ; R
.eh_frame:000000000001B68B                 db    0
.eh_frame:000000000001B68C                 db    1
.eh_frame:000000000001B68D                 db  78h ; x
.eh_frame:000000000001B68E                 db  10h
.eh_frame:000000000001B68F                 db    1
.eh_frame:000000000001B690                 db  1Bh
.eh_frame:000000000001B691                 db  0Ch
.eh_frame:000000000001B692                 db    7
.eh_frame:000000000001B693                 db    8
.eh_frame:000000000001B694                 db  90h
.eh_frame:000000000001B695                 db    1
.eh_frame:000000000001B696                 db    0
.eh_frame:000000000001B697                 db    0
.eh_frame:000000000001B698                 db  24h ; $
.eh_frame:000000000001B699                 db    0
.eh_frame:000000000001B69A                 db    0
.eh_frame:000000000001B69B                 db    0
.eh_frame:000000000001B69C                 db  1Ch
.eh_frame:000000000001B69D                 db    0
.eh_frame:000000000001B69E                 db    0
.eh_frame:000000000001B69F                 db    0
.eh_frame:000000000001B6A0                 db  90h
.eh_frame:000000000001B6A1                 db  7Bh ; {
.eh_frame:000000000001B6A2                 db 0FEh
.eh_frame:000000000001B6A3                 db 0FFh
.eh_frame:000000000001B6A4                 db  50h ; P
.eh_frame:000000000001B6A5                 db    6
.eh_frame:000000000001B6A6                 db    0
.eh_frame:000000000001B6A7                 db    0
.eh_frame:000000000001B6A8                 db    0
.eh_frame:000000000001B6A9                 db  0Eh
.eh_frame:000000000001B6AA                 db  10h
.eh_frame:000000000001B6AB                 db  46h ; F
.eh_frame:000000000001B6AC                 db  0Eh
.eh_frame:000000000001B6AD                 db  18h
.eh_frame:000000000001B6AE                 db  4Ah ; J
.eh_frame:000000000001B6AF                 db  0Fh
.eh_frame:000000000001B6B0                 db  0Bh
.eh_frame:000000000001B6B1                 db  77h ; w
.eh_frame:000000000001B6B2                 db    8
.eh_frame:000000000001B6B3                 db  80h
.eh_frame:000000000001B6B4                 db    0
.eh_frame:000000000001B6B5                 db  3Fh ; ?
.eh_frame:000000000001B6B6                 db  1Ah
.eh_frame:000000000001B6B7                 db  3Bh ; ;
.eh_frame:000000000001B6B8                 db  2Ah ; *
.eh_frame:000000000001B6B9                 db  33h ; 3
.eh_frame:000000000001B6BA                 db  24h ; $
.eh_frame:000000000001B6BB                 db  22h ; "
.eh_frame:000000000001B6BC                 db    0
.eh_frame:000000000001B6BD                 db    0
.eh_frame:000000000001B6BE                 db    0
.eh_frame:000000000001B6BF                 db    0
.eh_frame:000000000001B6C0                 db  14h
.eh_frame:000000000001B6C1                 db    0
.eh_frame:000000000001B6C2                 db    0
.eh_frame:000000000001B6C3                 db    0
.eh_frame:000000000001B6C4                 db  44h ; D
.eh_frame:000000000001B6C5                 db    0
.eh_frame:000000000001B6C6                 db    0
.eh_frame:000000000001B6C7                 db    0
.eh_frame:000000000001B6C8                 db 0B8h
.eh_frame:000000000001B6C9                 db  81h
.eh_frame:000000000001B6CA                 db 0FEh
.eh_frame:000000000001B6CB                 db 0FFh
.eh_frame:000000000001B6CC                 db  18h
.eh_frame:000000000001B6CD                 db    0
.eh_frame:000000000001B6CE                 db    0
.eh_frame:000000000001B6CF                 db    0
.eh_frame:000000000001B6D0                 db    0
.eh_frame:000000000001B6D1                 db    0
.eh_frame:000000000001B6D2                 db    0
.eh_frame:000000000001B6D3                 db    0
.eh_frame:000000000001B6D4                 db    0
.eh_frame:000000000001B6D5                 db    0
.eh_frame:000000000001B6D6                 db    0
.eh_frame:000000000001B6D7                 db    0
.eh_frame:000000000001B6D8                 db  10h
.eh_frame:000000000001B6D9                 db    0
.eh_frame:000000000001B6DA                 db    0
.eh_frame:000000000001B6DB                 db    0
.eh_frame:000000000001B6DC                 db  5Ch ; \
.eh_frame:000000000001B6DD                 db    0
.eh_frame:000000000001B6DE                 db    0
.eh_frame:000000000001B6DF                 db    0
.eh_frame:000000000001B6E0                 db 0A0h
.eh_frame:000000000001B6E1                 db  9Ch
.eh_frame:000000000001B6E2                 db 0FEh
.eh_frame:000000000001B6E3                 db 0FFh
.eh_frame:000000000001B6E4                 db  0Ch
.eh_frame:000000000001B6E5                 db    0
.eh_frame:000000000001B6E6                 db    0
.eh_frame:000000000001B6E7                 db    0
.eh_frame:000000000001B6E8                 db    0
.eh_frame:000000000001B6E9                 db    0
.eh_frame:000000000001B6EA                 db    0
.eh_frame:000000000001B6EB                 db    0
.eh_frame:000000000001B6EC                 db  10h
.eh_frame:000000000001B6ED                 db    0
.eh_frame:000000000001B6EE                 db    0
.eh_frame:000000000001B6EF                 db    0
.eh_frame:000000000001B6F0                 db  70h ; p
.eh_frame:000000000001B6F1                 db    0
.eh_frame:000000000001B6F2                 db    0
.eh_frame:000000000001B6F3                 db    0
.eh_frame:000000000001B6F4                 db  9Ch
.eh_frame:000000000001B6F5                 db  9Ch
.eh_frame:000000000001B6F6                 db 0FEh
.eh_frame:000000000001B6F7                 db 0FFh
.eh_frame:000000000001B6F8                 db  1Ch
.eh_frame:000000000001B6F9                 db    0
.eh_frame:000000000001B6FA                 db    0
.eh_frame:000000000001B6FB                 db    0
.eh_frame:000000000001B6FC                 db    0
.eh_frame:000000000001B6FD                 db    0
.eh_frame:000000000001B6FE                 db    0
.eh_frame:000000000001B6FF                 db    0
.eh_frame:000000000001B700                 db  10h
.eh_frame:000000000001B701                 db    0
.eh_frame:000000000001B702                 db    0
.eh_frame:000000000001B703                 db    0
.eh_frame:000000000001B704                 db  84h
.eh_frame:000000000001B705                 db    0
.eh_frame:000000000001B706                 db    0
.eh_frame:000000000001B707                 db    0
.eh_frame:000000000001B708                 db 0A8h
.eh_frame:000000000001B709                 db  9Ch
.eh_frame:000000000001B70A                 db 0FEh
.eh_frame:000000000001B70B                 db 0FFh
.eh_frame:000000000001B70C                 db  12h
.eh_frame:000000000001B70D                 db    0
.eh_frame:000000000001B70E                 db    0
.eh_frame:000000000001B70F                 db    0
.eh_frame:000000000001B710                 db    0
.eh_frame:000000000001B711                 db    0
.eh_frame:000000000001B712                 db    0
.eh_frame:000000000001B713                 db    0
.eh_frame:000000000001B714                 db  10h
.eh_frame:000000000001B715                 db    0
.eh_frame:000000000001B716                 db    0
.eh_frame:000000000001B717                 db    0
.eh_frame:000000000001B718                 db  98h
.eh_frame:000000000001B719                 db    0
.eh_frame:000000000001B71A                 db    0
.eh_frame:000000000001B71B                 db    0
.eh_frame:000000000001B71C                 db 0B4h
.eh_frame:000000000001B71D                 db  9Ch
.eh_frame:000000000001B71E                 db 0FEh
.eh_frame:000000000001B71F                 db 0FFh
.eh_frame:000000000001B720                 db    5
.eh_frame:000000000001B721                 db    0
.eh_frame:000000000001B722                 db    0
.eh_frame:000000000001B723                 db    0
.eh_frame:000000000001B724                 db    0
.eh_frame:000000000001B725                 db    0
.eh_frame:000000000001B726                 db    0
.eh_frame:000000000001B727                 db    0
.eh_frame:000000000001B728                 db  44h ; D
.eh_frame:000000000001B729                 db    0
.eh_frame:000000000001B72A                 db    0
.eh_frame:000000000001B72B                 db    0
.eh_frame:000000000001B72C                 db 0ACh
.eh_frame:000000000001B72D                 db    0
.eh_frame:000000000001B72E                 db    0
.eh_frame:000000000001B72F                 db    0
.eh_frame:000000000001B730                 db 0B0h
.eh_frame:000000000001B731                 db  9Ch
.eh_frame:000000000001B732                 db 0FEh
.eh_frame:000000000001B733                 db 0FFh
.eh_frame:000000000001B734                 db  8Ah
.eh_frame:000000000001B735                 db    2
.eh_frame:000000000001B736                 db    0
.eh_frame:000000000001B737                 db    0
.eh_frame:000000000001B738                 db    0
.eh_frame:000000000001B739                 db  4Fh ; O
.eh_frame:000000000001B73A                 db  0Eh
.eh_frame:000000000001B73B                 db  10h
.eh_frame:000000000001B73C                 db  8Fh
.eh_frame:000000000001B73D                 db    2
.eh_frame:000000000001B73E                 db  45h ; E
.eh_frame:000000000001B73F                 db  0Eh
.eh_frame:000000000001B740                 db  18h
.eh_frame:000000000001B741                 db  8Eh
.eh_frame:000000000001B742                 db    3
.eh_frame:000000000001B743                 db  47h ; G
.eh_frame:000000000001B744                 db  0Eh
.eh_frame:000000000001B745                 db  20h
.eh_frame:000000000001B746                 db  8Dh
.eh_frame:000000000001B747                 db    4
.eh_frame:000000000001B748                 db  42h ; B
.eh_frame:000000000001B749                 db  0Eh
.eh_frame:000000000001B74A                 db  28h ; (
.eh_frame:000000000001B74B                 db  8Ch
.eh_frame:000000000001B74C                 db    5
.eh_frame:000000000001B74D                 db  44h ; D
.eh_frame:000000000001B74E                 db  0Eh
.eh_frame:000000000001B74F                 db  30h ; 0
.eh_frame:000000000001B750                 db  86h
.eh_frame:000000000001B751                 db    6
.eh_frame:000000000001B752                 db  4Bh ; K
.eh_frame:000000000001B753                 db  0Eh
.eh_frame:000000000001B754                 db  38h ; 8
.eh_frame:000000000001B755                 db  83h
.eh_frame:000000000001B756                 db    7
.eh_frame:000000000001B757                 db    2
.eh_frame:000000000001B758                 db 0DDh
.eh_frame:000000000001B759                 db  0Ah
.eh_frame:000000000001B75A                 db  0Eh
.eh_frame:000000000001B75B                 db  30h ; 0
.eh_frame:000000000001B75C                 db  41h ; A
.eh_frame:000000000001B75D                 db  0Eh
.eh_frame:000000000001B75E                 db  28h ; (
.eh_frame:000000000001B75F                 db  42h ; B
.eh_frame:000000000001B760                 db  0Eh
.eh_frame:000000000001B761                 db  20h
.eh_frame:000000000001B762                 db  42h ; B
.eh_frame:000000000001B763                 db  0Eh
.eh_frame:000000000001B764                 db  18h
.eh_frame:000000000001B765                 db  42h ; B
.eh_frame:000000000001B766                 db  0Eh
.eh_frame:000000000001B767                 db  10h
.eh_frame:000000000001B768                 db  42h ; B
.eh_frame:000000000001B769                 db  0Eh
.eh_frame:000000000001B76A                 db    8
.eh_frame:000000000001B76B                 db  46h ; F
.eh_frame:000000000001B76C                 db  0Bh
.eh_frame:000000000001B76D                 db    0
.eh_frame:000000000001B76E                 db    0
.eh_frame:000000000001B76F                 db    0
.eh_frame:000000000001B770                 db  10h
.eh_frame:000000000001B771                 db    0
.eh_frame:000000000001B772                 db    0
.eh_frame:000000000001B773                 db    0
.eh_frame:000000000001B774                 db 0F4h
.eh_frame:000000000001B775                 db    0
.eh_frame:000000000001B776                 db    0
.eh_frame:000000000001B777                 db    0
.eh_frame:000000000001B778                 db 0F8h
.eh_frame:000000000001B779                 db  9Eh
.eh_frame:000000000001B77A                 db 0FEh
.eh_frame:000000000001B77B                 db 0FFh
.eh_frame:000000000001B77C                 db  57h ; W
.eh_frame:000000000001B77D                 db    0
.eh_frame:000000000001B77E                 db    0
.eh_frame:000000000001B77F                 db    0
.eh_frame:000000000001B780                 db    0
.eh_frame:000000000001B781                 db    0
.eh_frame:000000000001B782                 db    0
.eh_frame:000000000001B783                 db    0
.eh_frame:000000000001B784                 db  18h
.eh_frame:000000000001B785                 db    0
.eh_frame:000000000001B786                 db    0
.eh_frame:000000000001B787                 db    0
.eh_frame:000000000001B788                 db    8
.eh_frame:000000000001B789                 db    1
.eh_frame:000000000001B78A                 db    0
.eh_frame:000000000001B78B                 db    0
.eh_frame:000000000001B78C                 db  44h ; D
.eh_frame:000000000001B78D                 db  9Fh
.eh_frame:000000000001B78E                 db 0FEh
.eh_frame:000000000001B78F                 db 0FFh
.eh_frame:000000000001B790                 db  7Fh ; 
.eh_frame:000000000001B791                 db    0
.eh_frame:000000000001B792                 db    0
.eh_frame:000000000001B793                 db    0
.eh_frame:000000000001B794                 db    0
.eh_frame:000000000001B795                 db  44h ; D
.eh_frame:000000000001B796                 db  0Eh
.eh_frame:000000000001B797                 db  20h
.eh_frame:000000000001B798                 db    2
.eh_frame:000000000001B799                 db  42h ; B
.eh_frame:000000000001B79A                 db  0Ah
.eh_frame:000000000001B79B                 db  0Eh
.eh_frame:000000000001B79C                 db    8
.eh_frame:000000000001B79D                 db  4Ah ; J
.eh_frame:000000000001B79E                 db  0Bh
.eh_frame:000000000001B79F                 db    0
.eh_frame:000000000001B7A0                 db  60h ; `
.eh_frame:000000000001B7A1                 db    0
.eh_frame:000000000001B7A2                 db    0
.eh_frame:000000000001B7A3                 db    0
.eh_frame:000000000001B7A4                 db  24h ; $
.eh_frame:000000000001B7A5                 db    1
.eh_frame:000000000001B7A6                 db    0
.eh_frame:000000000001B7A7                 db    0
.eh_frame:000000000001B7A8                 db 0A8h
.eh_frame:000000000001B7A9                 db  9Fh
.eh_frame:000000000001B7AA                 db 0FEh
.eh_frame:000000000001B7AB                 db 0FFh
.eh_frame:000000000001B7AC                 db  71h ; q
.eh_frame:000000000001B7AD                 db    2
.eh_frame:000000000001B7AE                 db    0
.eh_frame:000000000001B7AF                 db    0
.eh_frame:000000000001B7B0                 db    0
.eh_frame:000000000001B7B1                 db  42h ; B
.eh_frame:000000000001B7B2                 db  0Eh
.eh_frame:000000000001B7B3                 db  10h
.eh_frame:000000000001B7B4                 db  8Fh
.eh_frame:000000000001B7B5                 db    2
.eh_frame:000000000001B7B6                 db  42h ; B
.eh_frame:000000000001B7B7                 db  0Eh
.eh_frame:000000000001B7B8                 db  18h
.eh_frame:000000000001B7B9                 db  8Eh
.eh_frame:000000000001B7BA                 db    3
.eh_frame:000000000001B7BB                 db  44h ; D
.eh_frame:000000000001B7BC                 db  0Eh
.eh_frame:000000000001B7BD                 db  20h
.eh_frame:000000000001B7BE                 db  8Dh
.eh_frame:000000000001B7BF                 db    4
.eh_frame:000000000001B7C0                 db  42h ; B
.eh_frame:000000000001B7C1                 db  0Eh
.eh_frame:000000000001B7C2                 db  28h ; (
.eh_frame:000000000001B7C3                 db  8Ch
.eh_frame:000000000001B7C4                 db    5
.eh_frame:000000000001B7C5                 db  41h ; A
.eh_frame:000000000001B7C6                 db  0Eh
.eh_frame:000000000001B7C7                 db  30h ; 0
.eh_frame:000000000001B7C8                 db  86h
.eh_frame:000000000001B7C9                 db    6
.eh_frame:000000000001B7CA                 db  41h ; A
.eh_frame:000000000001B7CB                 db  0Eh
.eh_frame:000000000001B7CC                 db  38h ; 8
.eh_frame:000000000001B7CD                 db  83h
.eh_frame:000000000001B7CE                 db    7
.eh_frame:000000000001B7CF                 db  47h ; G
.eh_frame:000000000001B7D0                 db  0Eh
.eh_frame:000000000001B7D1                 db  90h
.eh_frame:000000000001B7D2                 db  0Dh
.eh_frame:000000000001B7D3                 db    3
.eh_frame:000000000001B7D4                 db  73h ; s
.eh_frame:000000000001B7D5                 db    1
.eh_frame:000000000001B7D6                 db  0Ah
.eh_frame:000000000001B7D7                 db  0Eh
.eh_frame:000000000001B7D8                 db  38h ; 8
.eh_frame:000000000001B7D9                 db  41h ; A
.eh_frame:000000000001B7DA                 db  0Eh
.eh_frame:000000000001B7DB                 db  30h ; 0
.eh_frame:000000000001B7DC                 db  41h ; A
.eh_frame:000000000001B7DD                 db  0Eh
.eh_frame:000000000001B7DE                 db  28h ; (
.eh_frame:000000000001B7DF                 db  42h ; B
.eh_frame:000000000001B7E0                 db  0Eh
.eh_frame:000000000001B7E1                 db  20h
.eh_frame:000000000001B7E2                 db  42h ; B
.eh_frame:000000000001B7E3                 db  0Eh
.eh_frame:000000000001B7E4                 db  18h
.eh_frame:000000000001B7E5                 db  42h ; B
.eh_frame:000000000001B7E6                 db  0Eh
.eh_frame:000000000001B7E7                 db  10h
.eh_frame:000000000001B7E8                 db  42h ; B
.eh_frame:000000000001B7E9                 db  0Eh
.eh_frame:000000000001B7EA                 db    8
.eh_frame:000000000001B7EB                 db  41h ; A
.eh_frame:000000000001B7EC                 db  0Bh
.eh_frame:000000000001B7ED                 db    2
.eh_frame:000000000001B7EE                 db  74h ; t
.eh_frame:000000000001B7EF                 db  0Eh
.eh_frame:000000000001B7F0                 db  98h
.eh_frame:000000000001B7F1                 db  0Dh
.eh_frame:000000000001B7F2                 db  57h ; W
.eh_frame:000000000001B7F3                 db  0Eh
.eh_frame:000000000001B7F4                 db 0A0h
.eh_frame:000000000001B7F5                 db  0Dh
.eh_frame:000000000001B7F6                 db  41h ; A
.eh_frame:000000000001B7F7                 db  0Eh
.eh_frame:000000000001B7F8                 db 0A8h
.eh_frame:000000000001B7F9                 db  0Dh
.eh_frame:000000000001B7FA                 db  47h ; G
.eh_frame:000000000001B7FB                 db  0Eh
.eh_frame:000000000001B7FC                 db 0B0h
.eh_frame:000000000001B7FD                 db  0Dh
.eh_frame:000000000001B7FE                 db  4Eh ; N
.eh_frame:000000000001B7FF                 db  0Eh
.eh_frame:000000000001B800                 db  90h
.eh_frame:000000000001B801                 db  0Dh
.eh_frame:000000000001B802                 db    0
.eh_frame:000000000001B803                 db    0
.eh_frame:000000000001B804                 db  34h ; 4
.eh_frame:000000000001B805                 db    0
.eh_frame:000000000001B806                 db    0
.eh_frame:000000000001B807                 db    0
.eh_frame:000000000001B808                 db  88h
.eh_frame:000000000001B809                 db    1
.eh_frame:000000000001B80A                 db    0
.eh_frame:000000000001B80B                 db    0
.eh_frame:000000000001B80C                 db 0C4h
.eh_frame:000000000001B80D                 db 0A1h
.eh_frame:000000000001B80E                 db 0FEh
.eh_frame:000000000001B80F                 db 0FFh
.eh_frame:000000000001B810                 db  66h ; f
.eh_frame:000000000001B811                 db    0
.eh_frame:000000000001B812                 db    0
.eh_frame:000000000001B813                 db    0
.eh_frame:000000000001B814                 db    0
.eh_frame:000000000001B815                 db  42h ; B
.eh_frame:000000000001B816                 db  0Eh
.eh_frame:000000000001B817                 db  10h
.eh_frame:000000000001B818                 db  8Dh
.eh_frame:000000000001B819                 db    2
.eh_frame:000000000001B81A                 db  42h ; B
.eh_frame:000000000001B81B                 db  0Eh
.eh_frame:000000000001B81C                 db  18h
.eh_frame:000000000001B81D                 db  8Ch
.eh_frame:000000000001B81E                 db    3
.eh_frame:000000000001B81F                 db  44h ; D
.eh_frame:000000000001B820                 db  0Eh
.eh_frame:000000000001B821                 db  20h
.eh_frame:000000000001B822                 db  86h
.eh_frame:000000000001B823                 db    4
.eh_frame:000000000001B824                 db  41h ; A
.eh_frame:000000000001B825                 db  0Eh
.eh_frame:000000000001B826                 db  28h ; (
.eh_frame:000000000001B827                 db  83h
.eh_frame:000000000001B828                 db    5
.eh_frame:000000000001B829                 db  4Fh ; O
.eh_frame:000000000001B82A                 db  0Eh
.eh_frame:000000000001B82B                 db  30h ; 0
.eh_frame:000000000001B82C                 db    2
.eh_frame:000000000001B82D                 db  47h ; G
.eh_frame:000000000001B82E                 db  0Eh
.eh_frame:000000000001B82F                 db  28h ; (
.eh_frame:000000000001B830                 db  41h ; A
.eh_frame:000000000001B831                 db  0Eh
.eh_frame:000000000001B832                 db  20h
.eh_frame:000000000001B833                 db  41h ; A
.eh_frame:000000000001B834                 db  0Eh
.eh_frame:000000000001B835                 db  18h
.eh_frame:000000000001B836                 db  42h ; B
.eh_frame:000000000001B837                 db  0Eh
.eh_frame:000000000001B838                 db  10h
.eh_frame:000000000001B839                 db  42h ; B
.eh_frame:000000000001B83A                 db  0Eh
.eh_frame:000000000001B83B                 db    8
.eh_frame:000000000001B83C                 db  10h
.eh_frame:000000000001B83D                 db    0
.eh_frame:000000000001B83E                 db    0
.eh_frame:000000000001B83F                 db    0
.eh_frame:000000000001B840                 db 0C0h
.eh_frame:000000000001B841                 db    1
.eh_frame:000000000001B842                 db    0
.eh_frame:000000000001B843                 db    0
.eh_frame:000000000001B844                 db 0FCh
.eh_frame:000000000001B845                 db 0A1h
.eh_frame:000000000001B846                 db 0FEh
.eh_frame:000000000001B847                 db 0FFh
.eh_frame:000000000001B848                 db  36h ; 6
.eh_frame:000000000001B849                 db    0
.eh_frame:000000000001B84A                 db    0
.eh_frame:000000000001B84B                 db    0
.eh_frame:000000000001B84C                 db    0
.eh_frame:000000000001B84D                 db    0
.eh_frame:000000000001B84E                 db    0
.eh_frame:000000000001B84F                 db    0
.eh_frame:000000000001B850                 db  10h
.eh_frame:000000000001B851                 db    0
.eh_frame:000000000001B852                 db    0
.eh_frame:000000000001B853                 db    0
.eh_frame:000000000001B854                 db 0D4h
.eh_frame:000000000001B855                 db    1
.eh_frame:000000000001B856                 db    0
.eh_frame:000000000001B857                 db    0
.eh_frame:000000000001B858                 db  28h ; (
.eh_frame:000000000001B859                 db 0A2h
.eh_frame:000000000001B85A                 db 0FEh
.eh_frame:000000000001B85B                 db 0FFh
.eh_frame:000000000001B85C                 db  36h ; 6
.eh_frame:000000000001B85D                 db    0
.eh_frame:000000000001B85E                 db    0
.eh_frame:000000000001B85F                 db    0
.eh_frame:000000000001B860                 db    0
.eh_frame:000000000001B861                 db    0
.eh_frame:000000000001B862                 db    0
.eh_frame:000000000001B863                 db    0
.eh_frame:000000000001B864                 db  10h
.eh_frame:000000000001B865                 db    0
.eh_frame:000000000001B866                 db    0
.eh_frame:000000000001B867                 db    0
.eh_frame:000000000001B868                 db 0E8h
.eh_frame:000000000001B869                 db    1
.eh_frame:000000000001B86A                 db    0
.eh_frame:000000000001B86B                 db    0
.eh_frame:000000000001B86C                 db  54h ; T
.eh_frame:000000000001B86D                 db 0A2h
.eh_frame:000000000001B86E                 db 0FEh
.eh_frame:000000000001B86F                 db 0FFh
.eh_frame:000000000001B870                 db  0Bh
.eh_frame:000000000001B871                 db    0
.eh_frame:000000000001B872                 db    0
.eh_frame:000000000001B873                 db    0
.eh_frame:000000000001B874                 db    0
.eh_frame:000000000001B875                 db    0
.eh_frame:000000000001B876                 db    0
.eh_frame:000000000001B877                 db    0
.eh_frame:000000000001B878                 db  10h
.eh_frame:000000000001B879                 db    0
.eh_frame:000000000001B87A                 db    0
.eh_frame:000000000001B87B                 db    0
.eh_frame:000000000001B87C                 db 0FCh
.eh_frame:000000000001B87D                 db    1
.eh_frame:000000000001B87E                 db    0
.eh_frame:000000000001B87F                 db    0
.eh_frame:000000000001B880                 db  50h ; P
.eh_frame:000000000001B881                 db 0A2h
.eh_frame:000000000001B882                 db 0FEh
.eh_frame:000000000001B883                 db 0FFh
.eh_frame:000000000001B884                 db  0Eh
.eh_frame:000000000001B885                 db    0
.eh_frame:000000000001B886                 db    0
.eh_frame:000000000001B887                 db    0
.eh_frame:000000000001B888                 db    0
.eh_frame:000000000001B889                 db    0
.eh_frame:000000000001B88A                 db    0
.eh_frame:000000000001B88B                 db    0
.eh_frame:000000000001B88C                 db  28h ; (
.eh_frame:000000000001B88D                 db    0
.eh_frame:000000000001B88E                 db    0
.eh_frame:000000000001B88F                 db    0
.eh_frame:000000000001B890                 db  10h
.eh_frame:000000000001B891                 db    2
.eh_frame:000000000001B892                 db    0
.eh_frame:000000000001B893                 db    0
.eh_frame:000000000001B894                 db  4Ch ; L
.eh_frame:000000000001B895                 db 0A2h
.eh_frame:000000000001B896                 db 0FEh
.eh_frame:000000000001B897                 db 0FFh
.eh_frame:000000000001B898                 db  78h ; x
.eh_frame:000000000001B899                 db    0
.eh_frame:000000000001B89A                 db    0
.eh_frame:000000000001B89B                 db    0
.eh_frame:000000000001B89C                 db    0
.eh_frame:000000000001B89D                 db  41h ; A
.eh_frame:000000000001B89E                 db  0Eh
.eh_frame:000000000001B89F                 db  10h
.eh_frame:000000000001B8A0                 db  86h
.eh_frame:000000000001B8A1                 db    2
.eh_frame:000000000001B8A2                 db  41h ; A
.eh_frame:000000000001B8A3                 db  0Eh
.eh_frame:000000000001B8A4                 db  18h
.eh_frame:000000000001B8A5                 db  83h
.eh_frame:000000000001B8A6                 db    3
.eh_frame:000000000001B8A7                 db  56h ; V
.eh_frame:000000000001B8A8                 db  0Eh
.eh_frame:000000000001B8A9                 db  30h ; 0
.eh_frame:000000000001B8AA                 db    2
.eh_frame:000000000001B8AB                 db  43h ; C
.eh_frame:000000000001B8AC                 db  0Ah
.eh_frame:000000000001B8AD                 db  0Eh
.eh_frame:000000000001B8AE                 db  18h
.eh_frame:000000000001B8AF                 db  41h ; A
.eh_frame:000000000001B8B0                 db  0Eh
.eh_frame:000000000001B8B1                 db  10h
.eh_frame:000000000001B8B2                 db  41h ; A
.eh_frame:000000000001B8B3                 db  0Eh
.eh_frame:000000000001B8B4                 db    8
.eh_frame:000000000001B8B5                 db  43h ; C
.eh_frame:000000000001B8B6                 db  0Bh
.eh_frame:000000000001B8B7                 db    0
.eh_frame:000000000001B8B8                 db  3Ch ; <
.eh_frame:000000000001B8B9                 db    0
.eh_frame:000000000001B8BA                 db    0
.eh_frame:000000000001B8BB                 db    0
.eh_frame:000000000001B8BC                 db  3Ch ; <
.eh_frame:000000000001B8BD                 db    2
.eh_frame:000000000001B8BE                 db    0
.eh_frame:000000000001B8BF                 db    0
.eh_frame:000000000001B8C0                 db 0A0h
.eh_frame:000000000001B8C1                 db 0A2h
.eh_frame:000000000001B8C2                 db 0FEh
.eh_frame:000000000001B8C3                 db 0FFh
.eh_frame:000000000001B8C4                 db 0D1h
.eh_frame:000000000001B8C5                 db    0
.eh_frame:000000000001B8C6                 db    0
.eh_frame:000000000001B8C7                 db    0
.eh_frame:000000000001B8C8                 db    0
.eh_frame:000000000001B8C9                 db  42h ; B
.eh_frame:000000000001B8CA                 db  0Eh
.eh_frame:000000000001B8CB                 db  10h
.eh_frame:000000000001B8CC                 db  8Eh
.eh_frame:000000000001B8CD                 db    2
.eh_frame:000000000001B8CE                 db  42h ; B
.eh_frame:000000000001B8CF                 db  0Eh
.eh_frame:000000000001B8D0                 db  18h
.eh_frame:000000000001B8D1                 db  8Dh
.eh_frame:000000000001B8D2                 db    3
.eh_frame:000000000001B8D3                 db  42h ; B
.eh_frame:000000000001B8D4                 db  0Eh
.eh_frame:000000000001B8D5                 db  20h
.eh_frame:000000000001B8D6                 db  8Ch
.eh_frame:000000000001B8D7                 db    4
.eh_frame:000000000001B8D8                 db  41h ; A
.eh_frame:000000000001B8D9                 db  0Eh
.eh_frame:000000000001B8DA                 db  28h ; (
.eh_frame:000000000001B8DB                 db  86h
.eh_frame:000000000001B8DC                 db    5
.eh_frame:000000000001B8DD                 db  44h ; D
.eh_frame:000000000001B8DE                 db  0Eh
.eh_frame:000000000001B8DF                 db  30h ; 0
.eh_frame:000000000001B8E0                 db  83h
.eh_frame:000000000001B8E1                 db    6
.eh_frame:000000000001B8E2                 db    2
.eh_frame:000000000001B8E3                 db  7Bh ; {
.eh_frame:000000000001B8E4                 db  0Ah
.eh_frame:000000000001B8E5                 db  0Eh
.eh_frame:000000000001B8E6                 db  28h ; (
.eh_frame:000000000001B8E7                 db  41h ; A
.eh_frame:000000000001B8E8                 db  0Eh
.eh_frame:000000000001B8E9                 db  20h
.eh_frame:000000000001B8EA                 db  42h ; B
.eh_frame:000000000001B8EB                 db  0Eh
.eh_frame:000000000001B8EC                 db  18h
.eh_frame:000000000001B8ED                 db  42h ; B
.eh_frame:000000000001B8EE                 db  0Eh
.eh_frame:000000000001B8EF                 db  10h
.eh_frame:000000000001B8F0                 db  42h ; B
.eh_frame:000000000001B8F1                 db  0Eh
.eh_frame:000000000001B8F2                 db    8
.eh_frame:000000000001B8F3                 db  43h ; C
.eh_frame:000000000001B8F4                 db  0Bh
.eh_frame:000000000001B8F5                 db    0
.eh_frame:000000000001B8F6                 db    0
.eh_frame:000000000001B8F7                 db    0
.eh_frame:000000000001B8F8                 db  1Ch
.eh_frame:000000000001B8F9                 db    0
.eh_frame:000000000001B8FA                 db    0
.eh_frame:000000000001B8FB                 db    0
.eh_frame:000000000001B8FC                 db  7Ch ; |
.eh_frame:000000000001B8FD                 db    2
.eh_frame:000000000001B8FE                 db    0
.eh_frame:000000000001B8FF                 db    0
.eh_frame:000000000001B900                 db  40h ; @
.eh_frame:000000000001B901                 db 0A3h
.eh_frame:000000000001B902                 db 0FEh
.eh_frame:000000000001B903                 db 0FFh
.eh_frame:000000000001B904                 db  92h
.eh_frame:000000000001B905                 db    1
.eh_frame:000000000001B906                 db    0
.eh_frame:000000000001B907                 db    0
.eh_frame:000000000001B908                 db    0
.eh_frame:000000000001B909                 db  41h ; A
.eh_frame:000000000001B90A                 db  0Eh
.eh_frame:000000000001B90B                 db  10h
.eh_frame:000000000001B90C                 db  83h
.eh_frame:000000000001B90D                 db    2
.eh_frame:000000000001B90E                 db    3
.eh_frame:000000000001B90F                 db  0Ch
.eh_frame:000000000001B910                 db    1
.eh_frame:000000000001B911                 db  0Ah
.eh_frame:000000000001B912                 db  0Eh
.eh_frame:000000000001B913                 db    8
.eh_frame:000000000001B914                 db  43h ; C
.eh_frame:000000000001B915                 db  0Bh
.eh_frame:000000000001B916                 db    0
.eh_frame:000000000001B917                 db    0
.eh_frame:000000000001B918                 db  24h ; $
.eh_frame:000000000001B919                 db    0
.eh_frame:000000000001B91A                 db    0
.eh_frame:000000000001B91B                 db    0
.eh_frame:000000000001B91C                 db  9Ch
.eh_frame:000000000001B91D                 db    2
.eh_frame:000000000001B91E                 db    0
.eh_frame:000000000001B91F                 db    0
.eh_frame:000000000001B920                 db 0C0h
.eh_frame:000000000001B921                 db 0A4h
.eh_frame:000000000001B922                 db 0FEh
.eh_frame:000000000001B923                 db 0FFh
.eh_frame:000000000001B924                 db  28h ; (
.eh_frame:000000000001B925                 db    0
.eh_frame:000000000001B926                 db    0
.eh_frame:000000000001B927                 db    0
.eh_frame:000000000001B928                 db    0
.eh_frame:000000000001B929                 db  41h ; A
.eh_frame:000000000001B92A                 db  0Eh
.eh_frame:000000000001B92B                 db  10h
.eh_frame:000000000001B92C                 db  86h
.eh_frame:000000000001B92D                 db    2
.eh_frame:000000000001B92E                 db  41h ; A
.eh_frame:000000000001B92F                 db  0Eh
.eh_frame:000000000001B930                 db  18h
.eh_frame:000000000001B931                 db  83h
.eh_frame:000000000001B932                 db    3
.eh_frame:000000000001B933                 db  4Ah ; J
.eh_frame:000000000001B934                 db  0Eh
.eh_frame:000000000001B935                 db  20h
.eh_frame:000000000001B936                 db  4Fh ; O
.eh_frame:000000000001B937                 db  0Eh
.eh_frame:000000000001B938                 db  18h
.eh_frame:000000000001B939                 db  47h ; G
.eh_frame:000000000001B93A                 db  0Eh
.eh_frame:000000000001B93B                 db  10h
.eh_frame:000000000001B93C                 db  41h ; A
.eh_frame:000000000001B93D                 db  0Eh
.eh_frame:000000000001B93E                 db    8
.eh_frame:000000000001B93F                 db    0
.eh_frame:000000000001B940                 db  10h
.eh_frame:000000000001B941                 db    0
.eh_frame:000000000001B942                 db    0
.eh_frame:000000000001B943                 db    0
.eh_frame:000000000001B944                 db 0C4h
.eh_frame:000000000001B945                 db    2
.eh_frame:000000000001B946                 db    0
.eh_frame:000000000001B947                 db    0
.eh_frame:000000000001B948                 db 0C8h
.eh_frame:000000000001B949                 db 0A4h
.eh_frame:000000000001B94A                 db 0FEh
.eh_frame:000000000001B94B                 db 0FFh
.eh_frame:000000000001B94C                 db  26h ; &
.eh_frame:000000000001B94D                 db    0
.eh_frame:000000000001B94E                 db    0
.eh_frame:000000000001B94F                 db    0
.eh_frame:000000000001B950                 db    0
.eh_frame:000000000001B951                 db    0
.eh_frame:000000000001B952                 db    0
.eh_frame:000000000001B953                 db    0
.eh_frame:000000000001B954                 db  10h
.eh_frame:000000000001B955                 db    0
.eh_frame:000000000001B956                 db    0
.eh_frame:000000000001B957                 db    0
.eh_frame:000000000001B958                 db 0D8h
.eh_frame:000000000001B959                 db    2
.eh_frame:000000000001B95A                 db    0
.eh_frame:000000000001B95B                 db    0
.eh_frame:000000000001B95C                 db 0E4h
.eh_frame:000000000001B95D                 db 0A4h
.eh_frame:000000000001B95E                 db 0FEh
.eh_frame:000000000001B95F                 db 0FFh
.eh_frame:000000000001B960                 db  36h ; 6
.eh_frame:000000000001B961                 db    0
.eh_frame:000000000001B962                 db    0
.eh_frame:000000000001B963                 db    0
.eh_frame:000000000001B964                 db    0
.eh_frame:000000000001B965                 db    0
.eh_frame:000000000001B966                 db    0
.eh_frame:000000000001B967                 db    0
.eh_frame:000000000001B968                 db  10h
.eh_frame:000000000001B969                 db    0
.eh_frame:000000000001B96A                 db    0
.eh_frame:000000000001B96B                 db    0
.eh_frame:000000000001B96C                 db 0ECh
.eh_frame:000000000001B96D                 db    2
.eh_frame:000000000001B96E                 db    0
.eh_frame:000000000001B96F                 db    0
.eh_frame:000000000001B970                 db  10h
.eh_frame:000000000001B971                 db 0A5h
.eh_frame:000000000001B972                 db 0FEh
.eh_frame:000000000001B973                 db 0FFh
.eh_frame:000000000001B974                 db  0Bh
.eh_frame:000000000001B975                 db    0
.eh_frame:000000000001B976                 db    0
.eh_frame:000000000001B977                 db    0
.eh_frame:000000000001B978                 db    0
.eh_frame:000000000001B979                 db    0
.eh_frame:000000000001B97A                 db    0
.eh_frame:000000000001B97B                 db    0
.eh_frame:000000000001B97C                 db  10h
.eh_frame:000000000001B97D                 db    0
.eh_frame:000000000001B97E                 db    0
.eh_frame:000000000001B97F                 db    0
.eh_frame:000000000001B980                 db    0
.eh_frame:000000000001B981                 db    3
.eh_frame:000000000001B982                 db    0
.eh_frame:000000000001B983                 db    0
.eh_frame:000000000001B984                 db  0Ch
.eh_frame:000000000001B985                 db 0A5h
.eh_frame:000000000001B986                 db 0FEh
.eh_frame:000000000001B987                 db 0FFh
.eh_frame:000000000001B988                 db  0Eh
.eh_frame:000000000001B989                 db    0
.eh_frame:000000000001B98A                 db    0
.eh_frame:000000000001B98B                 db    0
.eh_frame:000000000001B98C                 db    0
.eh_frame:000000000001B98D                 db    0
.eh_frame:000000000001B98E                 db    0
.eh_frame:000000000001B98F                 db    0
.eh_frame:000000000001B990                 db  10h
.eh_frame:000000000001B991                 db    0
.eh_frame:000000000001B992                 db    0
.eh_frame:000000000001B993                 db    0
.eh_frame:000000000001B994                 db  14h
.eh_frame:000000000001B995                 db    3
.eh_frame:000000000001B996                 db    0
.eh_frame:000000000001B997                 db    0
.eh_frame:000000000001B998                 db    8
.eh_frame:000000000001B999                 db 0A5h
.eh_frame:000000000001B99A                 db 0FEh
.eh_frame:000000000001B99B                 db 0FFh
.eh_frame:000000000001B99C                 db  0Eh
.eh_frame:000000000001B99D                 db    0
.eh_frame:000000000001B99E                 db    0
.eh_frame:000000000001B99F                 db    0
.eh_frame:000000000001B9A0                 db    0
.eh_frame:000000000001B9A1                 db    0
.eh_frame:000000000001B9A2                 db    0
.eh_frame:000000000001B9A3                 db    0
.eh_frame:000000000001B9A4                 db  10h
.eh_frame:000000000001B9A5                 db    0
.eh_frame:000000000001B9A6                 db    0
.eh_frame:000000000001B9A7                 db    0
.eh_frame:000000000001B9A8                 db  28h ; (
.eh_frame:000000000001B9A9                 db    3
.eh_frame:000000000001B9AA                 db    0
.eh_frame:000000000001B9AB                 db    0
.eh_frame:000000000001B9AC                 db    4
.eh_frame:000000000001B9AD                 db 0A5h
.eh_frame:000000000001B9AE                 db 0FEh
.eh_frame:000000000001B9AF                 db 0FFh
.eh_frame:000000000001B9B0                 db  0Bh
.eh_frame:000000000001B9B1                 db    0
.eh_frame:000000000001B9B2                 db    0
.eh_frame:000000000001B9B3                 db    0
.eh_frame:000000000001B9B4                 db    0
.eh_frame:000000000001B9B5                 db    0
.eh_frame:000000000001B9B6                 db    0
.eh_frame:000000000001B9B7                 db    0
.eh_frame:000000000001B9B8                 db  48h ; H
.eh_frame:000000000001B9B9                 db    0
.eh_frame:000000000001B9BA                 db    0
.eh_frame:000000000001B9BB                 db    0
.eh_frame:000000000001B9BC                 db  3Ch ; <
.eh_frame:000000000001B9BD                 db    3
.eh_frame:000000000001B9BE                 db    0
.eh_frame:000000000001B9BF                 db    0
.eh_frame:000000000001B9C0                 db    0
.eh_frame:000000000001B9C1                 db 0A5h
.eh_frame:000000000001B9C2                 db 0FEh
.eh_frame:000000000001B9C3                 db 0FFh
.eh_frame:000000000001B9C4                 db  7Bh ; {
.eh_frame:000000000001B9C5                 db    1
.eh_frame:000000000001B9C6                 db    0
.eh_frame:000000000001B9C7                 db    0
.eh_frame:000000000001B9C8                 db    0
.eh_frame:000000000001B9C9                 db  42h ; B
.eh_frame:000000000001B9CA                 db  0Eh
.eh_frame:000000000001B9CB                 db  10h
.eh_frame:000000000001B9CC                 db  8Fh
.eh_frame:000000000001B9CD                 db    2
.eh_frame:000000000001B9CE                 db  42h ; B
.eh_frame:000000000001B9CF                 db  0Eh
.eh_frame:000000000001B9D0                 db  18h
.eh_frame:000000000001B9D1                 db  8Eh
.eh_frame:000000000001B9D2                 db    3
.eh_frame:000000000001B9D3                 db  45h ; E
.eh_frame:000000000001B9D4                 db  0Eh
.eh_frame:000000000001B9D5                 db  20h
.eh_frame:000000000001B9D6                 db  8Dh
.eh_frame:000000000001B9D7                 db    4
.eh_frame:000000000001B9D8                 db  42h ; B
.eh_frame:000000000001B9D9                 db  0Eh
.eh_frame:000000000001B9DA                 db  28h ; (
.eh_frame:000000000001B9DB                 db  8Ch
.eh_frame:000000000001B9DC                 db    5
.eh_frame:000000000001B9DD                 db  45h ; E
.eh_frame:000000000001B9DE                 db  0Eh
.eh_frame:000000000001B9DF                 db  30h ; 0
.eh_frame:000000000001B9E0                 db  86h
.eh_frame:000000000001B9E1                 db    6
.eh_frame:000000000001B9E2                 db  41h ; A
.eh_frame:000000000001B9E3                 db  0Eh
.eh_frame:000000000001B9E4                 db  38h ; 8
.eh_frame:000000000001B9E5                 db  83h
.eh_frame:000000000001B9E6                 db    7
.eh_frame:000000000001B9E7                 db  44h ; D
.eh_frame:000000000001B9E8                 db  0Eh
.eh_frame:000000000001B9E9                 db  40h ; @
.eh_frame:000000000001B9EA                 db    2
.eh_frame:000000000001B9EB                 db 0AEh
.eh_frame:000000000001B9EC                 db  0Ah
.eh_frame:000000000001B9ED                 db  0Eh
.eh_frame:000000000001B9EE                 db  38h ; 8
.eh_frame:000000000001B9EF                 db  41h ; A
.eh_frame:000000000001B9F0                 db  0Eh
.eh_frame:000000000001B9F1                 db  30h ; 0
.eh_frame:000000000001B9F2                 db  41h ; A
.eh_frame:000000000001B9F3                 db  0Eh
.eh_frame:000000000001B9F4                 db  28h ; (
.eh_frame:000000000001B9F5                 db  42h ; B
.eh_frame:000000000001B9F6                 db  0Eh
.eh_frame:000000000001B9F7                 db  20h
.eh_frame:000000000001B9F8                 db  42h ; B
.eh_frame:000000000001B9F9                 db  0Eh
.eh_frame:000000000001B9FA                 db  18h
.eh_frame:000000000001B9FB                 db  42h ; B
.eh_frame:000000000001B9FC                 db  0Eh
.eh_frame:000000000001B9FD                 db  10h
.eh_frame:000000000001B9FE                 db  42h ; B
.eh_frame:000000000001B9FF                 db  0Eh
.eh_frame:000000000001BA00                 db    8
.eh_frame:000000000001BA01                 db  43h ; C
.eh_frame:000000000001BA02                 db  0Bh
.eh_frame:000000000001BA03                 db    0
.eh_frame:000000000001BA04                 db  38h ; 8
.eh_frame:000000000001BA05                 db    0
.eh_frame:000000000001BA06                 db    0
.eh_frame:000000000001BA07                 db    0
.eh_frame:000000000001BA08                 db  88h
.eh_frame:000000000001BA09                 db    3
.eh_frame:000000000001BA0A                 db    0
.eh_frame:000000000001BA0B                 db    0
.eh_frame:000000000001BA0C                 db  34h ; 4
.eh_frame:000000000001BA0D                 db 0A6h
.eh_frame:000000000001BA0E                 db 0FEh
.eh_frame:000000000001BA0F                 db 0FFh
.eh_frame:000000000001BA10                 db 0C6h
.eh_frame:000000000001BA11                 db    0
.eh_frame:000000000001BA12                 db    0
.eh_frame:000000000001BA13                 db    0
.eh_frame:000000000001BA14                 db    0
.eh_frame:000000000001BA15                 db  4Bh ; K
.eh_frame:000000000001BA16                 db  0Eh
.eh_frame:000000000001BA17                 db  10h
.eh_frame:000000000001BA18                 db  8Ch
.eh_frame:000000000001BA19                 db    2
.eh_frame:000000000001BA1A                 db  44h ; D
.eh_frame:000000000001BA1B                 db  0Eh
.eh_frame:000000000001BA1C                 db  18h
.eh_frame:000000000001BA1D                 db  86h
.eh_frame:000000000001BA1E                 db    3
.eh_frame:000000000001BA1F                 db  41h ; A
.eh_frame:000000000001BA20                 db  0Eh
.eh_frame:000000000001BA21                 db  20h
.eh_frame:000000000001BA22                 db  83h
.eh_frame:000000000001BA23                 db    4
.eh_frame:000000000001BA24                 db    2
.eh_frame:000000000001BA25                 db  7Eh ; ~
.eh_frame:000000000001BA26                 db  0Ah
.eh_frame:000000000001BA27                 db  0Eh
.eh_frame:000000000001BA28                 db  18h
.eh_frame:000000000001BA29                 db  41h ; A
.eh_frame:000000000001BA2A                 db  0Eh
.eh_frame:000000000001BA2B                 db  10h
.eh_frame:000000000001BA2C                 db  42h ; B
.eh_frame:000000000001BA2D                 db  0Eh
.eh_frame:000000000001BA2E                 db    8
.eh_frame:000000000001BA2F                 db  47h ; G
.eh_frame:000000000001BA30                 db  0Bh
.eh_frame:000000000001BA31                 db  50h ; P
.eh_frame:000000000001BA32                 db  0Eh
.eh_frame:000000000001BA33                 db    8
.eh_frame:000000000001BA34                 db 0C3h
.eh_frame:000000000001BA35                 db 0C6h
.eh_frame:000000000001BA36                 db 0CCh
.eh_frame:000000000001BA37                 db  48h ; H
.eh_frame:000000000001BA38                 db  0Eh
.eh_frame:000000000001BA39                 db  20h
.eh_frame:000000000001BA3A                 db  83h
.eh_frame:000000000001BA3B                 db    4
.eh_frame:000000000001BA3C                 db  86h
.eh_frame:000000000001BA3D                 db    3
.eh_frame:000000000001BA3E                 db  8Ch
.eh_frame:000000000001BA3F                 db    2
.eh_frame:000000000001BA40                 db  34h ; 4
.eh_frame:000000000001BA41                 db    0
.eh_frame:000000000001BA42                 db    0
.eh_frame:000000000001BA43                 db    0
.eh_frame:000000000001BA44                 db 0C4h
.eh_frame:000000000001BA45                 db    3
.eh_frame:000000000001BA46                 db    0
.eh_frame:000000000001BA47                 db    0
.eh_frame:000000000001BA48                 db 0C8h
.eh_frame:000000000001BA49                 db 0A6h
.eh_frame:000000000001BA4A                 db 0FEh
.eh_frame:000000000001BA4B                 db 0FFh
.eh_frame:000000000001BA4C                 db 0C9h
.eh_frame:000000000001BA4D                 db    0
.eh_frame:000000000001BA4E                 db    0
.eh_frame:000000000001BA4F                 db    0
.eh_frame:000000000001BA50                 db    0
.eh_frame:000000000001BA51                 db  42h ; B
.eh_frame:000000000001BA52                 db  0Eh
.eh_frame:000000000001BA53                 db  10h
.eh_frame:000000000001BA54                 db  8Ch
.eh_frame:000000000001BA55                 db    2
.eh_frame:000000000001BA56                 db  41h ; A
.eh_frame:000000000001BA57                 db  0Eh
.eh_frame:000000000001BA58                 db  18h
.eh_frame:000000000001BA59                 db  86h
.eh_frame:000000000001BA5A                 db    3
.eh_frame:000000000001BA5B                 db  41h ; A
.eh_frame:000000000001BA5C                 db  0Eh
.eh_frame:000000000001BA5D                 db  20h
.eh_frame:000000000001BA5E                 db  83h
.eh_frame:000000000001BA5F                 db    4
.eh_frame:000000000001BA60                 db    2
.eh_frame:000000000001BA61                 db 0A4h
.eh_frame:000000000001BA62                 db  0Ah
.eh_frame:000000000001BA63                 db  0Eh
.eh_frame:000000000001BA64                 db  18h
.eh_frame:000000000001BA65                 db  41h ; A
.eh_frame:000000000001BA66                 db  0Eh
.eh_frame:000000000001BA67                 db  10h
.eh_frame:000000000001BA68                 db  42h ; B
.eh_frame:000000000001BA69                 db  0Eh
.eh_frame:000000000001BA6A                 db    8
.eh_frame:000000000001BA6B                 db  41h ; A
.eh_frame:000000000001BA6C                 db  0Bh
.eh_frame:000000000001BA6D                 db  50h ; P
.eh_frame:000000000001BA6E                 db  0Eh
.eh_frame:000000000001BA6F                 db  18h
.eh_frame:000000000001BA70                 db  41h ; A
.eh_frame:000000000001BA71                 db  0Eh
.eh_frame:000000000001BA72                 db  10h
.eh_frame:000000000001BA73                 db  42h ; B
.eh_frame:000000000001BA74                 db  0Eh
.eh_frame:000000000001BA75                 db    8
.eh_frame:000000000001BA76                 db    0
.eh_frame:000000000001BA77                 db    0
.eh_frame:000000000001BA78                 db  28h ; (
.eh_frame:000000000001BA79                 db    0
.eh_frame:000000000001BA7A                 db    0
.eh_frame:000000000001BA7B                 db    0
.eh_frame:000000000001BA7C                 db 0FCh
.eh_frame:000000000001BA7D                 db    3
.eh_frame:000000000001BA7E                 db    0
.eh_frame:000000000001BA7F                 db    0
.eh_frame:000000000001BA80                 db  60h ; `
.eh_frame:000000000001BA81                 db 0A7h
.eh_frame:000000000001BA82                 db 0FEh
.eh_frame:000000000001BA83                 db 0FFh
.eh_frame:000000000001BA84                 db 0BBh
.eh_frame:000000000001BA85                 db    0
.eh_frame:000000000001BA86                 db    0
.eh_frame:000000000001BA87                 db    0
.eh_frame:000000000001BA88                 db    0
.eh_frame:000000000001BA89                 db  41h ; A
.eh_frame:000000000001BA8A                 db  0Eh
.eh_frame:000000000001BA8B                 db  10h
.eh_frame:000000000001BA8C                 db  86h
.eh_frame:000000000001BA8D                 db    2
.eh_frame:000000000001BA8E                 db  41h ; A
.eh_frame:000000000001BA8F                 db  0Eh
.eh_frame:000000000001BA90                 db  18h
.eh_frame:000000000001BA91                 db  83h
.eh_frame:000000000001BA92                 db    3
.eh_frame:000000000001BA93                 db  46h ; F
.eh_frame:000000000001BA94                 db  0Eh
.eh_frame:000000000001BA95                 db  20h
.eh_frame:000000000001BA96                 db    2
.eh_frame:000000000001BA97                 db  7Bh ; {
.eh_frame:000000000001BA98                 db  0Ah
.eh_frame:000000000001BA99                 db  0Eh
.eh_frame:000000000001BA9A                 db  18h
.eh_frame:000000000001BA9B                 db  41h ; A
.eh_frame:000000000001BA9C                 db  0Eh
.eh_frame:000000000001BA9D                 db  10h
.eh_frame:000000000001BA9E                 db  41h ; A
.eh_frame:000000000001BA9F                 db  0Eh
.eh_frame:000000000001BAA0                 db    8
.eh_frame:000000000001BAA1                 db  4Bh ; K
.eh_frame:000000000001BAA2                 db  0Bh
.eh_frame:000000000001BAA3                 db    0
.eh_frame:000000000001BAA4                 db  20h
.eh_frame:000000000001BAA5                 db    0
.eh_frame:000000000001BAA6                 db    0
.eh_frame:000000000001BAA7                 db    0
.eh_frame:000000000001BAA8                 db  28h ; (
.eh_frame:000000000001BAA9                 db    4
.eh_frame:000000000001BAAA                 db    0
.eh_frame:000000000001BAAB                 db    0
.eh_frame:000000000001BAAC                 db 0F4h
.eh_frame:000000000001BAAD                 db 0A7h
.eh_frame:000000000001BAAE                 db 0FEh
.eh_frame:000000000001BAAF                 db 0FFh
.eh_frame:000000000001BAB0                 db  3Fh ; ?
.eh_frame:000000000001BAB1                 db    0
.eh_frame:000000000001BAB2                 db    0
.eh_frame:000000000001BAB3                 db    0
.eh_frame:000000000001BAB4                 db    0
.eh_frame:000000000001BAB5                 db  41h ; A
.eh_frame:000000000001BAB6                 db  0Eh
.eh_frame:000000000001BAB7                 db  10h
.eh_frame:000000000001BAB8                 db  83h
.eh_frame:000000000001BAB9                 db    2
.eh_frame:000000000001BABA                 db  4Dh ; M
.eh_frame:000000000001BABB                 db  0Eh
.eh_frame:000000000001BABC                 db  20h
.eh_frame:000000000001BABD                 db  53h ; S
.eh_frame:000000000001BABE                 db  0Ah
.eh_frame:000000000001BABF                 db  0Eh
.eh_frame:000000000001BAC0                 db  10h
.eh_frame:000000000001BAC1                 db  46h ; F
.eh_frame:000000000001BAC2                 db  0Eh
.eh_frame:000000000001BAC3                 db    8
.eh_frame:000000000001BAC4                 db  49h ; I
.eh_frame:000000000001BAC5                 db  0Bh
.eh_frame:000000000001BAC6                 db    0
.eh_frame:000000000001BAC7                 db    0
.eh_frame:000000000001BAC8                 db  10h
.eh_frame:000000000001BAC9                 db    0
.eh_frame:000000000001BACA                 db    0
.eh_frame:000000000001BACB                 db    0
.eh_frame:000000000001BACC                 db  4Ch ; L
.eh_frame:000000000001BACD                 db    4
.eh_frame:000000000001BACE                 db    0
.eh_frame:000000000001BACF                 db    0
.eh_frame:000000000001BAD0                 db  10h
.eh_frame:000000000001BAD1                 db 0A8h
.eh_frame:000000000001BAD2                 db 0FEh
.eh_frame:000000000001BAD3                 db 0FFh
.eh_frame:000000000001BAD4                 db  1Bh
.eh_frame:000000000001BAD5                 db    0
.eh_frame:000000000001BAD6                 db    0
.eh_frame:000000000001BAD7                 db    0
.eh_frame:000000000001BAD8                 db    0
.eh_frame:000000000001BAD9                 db    0
.eh_frame:000000000001BADA                 db    0
.eh_frame:000000000001BADB                 db    0
.eh_frame:000000000001BADC                 db  34h ; 4
.eh_frame:000000000001BADD                 db    0
.eh_frame:000000000001BADE                 db    0
.eh_frame:000000000001BADF                 db    0
.eh_frame:000000000001BAE0                 db  60h ; `
.eh_frame:000000000001BAE1                 db    4
.eh_frame:000000000001BAE2                 db    0
.eh_frame:000000000001BAE3                 db    0
.eh_frame:000000000001BAE4                 db  1Ch
.eh_frame:000000000001BAE5                 db 0A8h
.eh_frame:000000000001BAE6                 db 0FEh
.eh_frame:000000000001BAE7                 db 0FFh
.eh_frame:000000000001BAE8                 db  61h ; a
.eh_frame:000000000001BAE9                 db    0
.eh_frame:000000000001BAEA                 db    0
.eh_frame:000000000001BAEB                 db    0
.eh_frame:000000000001BAEC                 db    0
.eh_frame:000000000001BAED                 db  42h ; B
.eh_frame:000000000001BAEE                 db  0Eh
.eh_frame:000000000001BAEF                 db  10h
.eh_frame:000000000001BAF0                 db  8Ch
.eh_frame:000000000001BAF1                 db    2
.eh_frame:000000000001BAF2                 db  41h ; A
.eh_frame:000000000001BAF3                 db  0Eh
.eh_frame:000000000001BAF4                 db  18h
.eh_frame:000000000001BAF5                 db  86h
.eh_frame:000000000001BAF6                 db    3
.eh_frame:000000000001BAF7                 db  44h ; D
.eh_frame:000000000001BAF8                 db  0Eh
.eh_frame:000000000001BAF9                 db  20h
.eh_frame:000000000001BAFA                 db  83h
.eh_frame:000000000001BAFB                 db    4
.eh_frame:000000000001BAFC                 db  77h ; w
.eh_frame:000000000001BAFD                 db  0Ah
.eh_frame:000000000001BAFE                 db  0Eh
.eh_frame:000000000001BAFF                 db  18h
.eh_frame:000000000001BB00                 db  41h ; A
.eh_frame:000000000001BB01                 db  0Eh
.eh_frame:000000000001BB02                 db  10h
.eh_frame:000000000001BB03                 db  42h ; B
.eh_frame:000000000001BB04                 db  0Eh
.eh_frame:000000000001BB05                 db    8
.eh_frame:000000000001BB06                 db  47h ; G
.eh_frame:000000000001BB07                 db  0Bh
.eh_frame:000000000001BB08                 db  4Bh ; K
.eh_frame:000000000001BB09                 db  0Eh
.eh_frame:000000000001BB0A                 db  18h
.eh_frame:000000000001BB0B                 db  4Bh ; K
.eh_frame:000000000001BB0C                 db  0Eh
.eh_frame:000000000001BB0D                 db  10h
.eh_frame:000000000001BB0E                 db  42h ; B
.eh_frame:000000000001BB0F                 db  0Eh
.eh_frame:000000000001BB10                 db    8
.eh_frame:000000000001BB11                 db    0
.eh_frame:000000000001BB12                 db    0
.eh_frame:000000000001BB13                 db    0
.eh_frame:000000000001BB14                 db  10h
.eh_frame:000000000001BB15                 db    0
.eh_frame:000000000001BB16                 db    0
.eh_frame:000000000001BB17                 db    0
.eh_frame:000000000001BB18                 db  98h
.eh_frame:000000000001BB19                 db    4
.eh_frame:000000000001BB1A                 db    0
.eh_frame:000000000001BB1B                 db    0
.eh_frame:000000000001BB1C                 db  54h ; T
.eh_frame:000000000001BB1D                 db 0A8h
.eh_frame:000000000001BB1E                 db 0FEh
.eh_frame:000000000001BB1F                 db 0FFh
.eh_frame:000000000001BB20                 db  9Eh
.eh_frame:000000000001BB21                 db    0
.eh_frame:000000000001BB22                 db    0
.eh_frame:000000000001BB23                 db    0
.eh_frame:000000000001BB24                 db    0
.eh_frame:000000000001BB25                 db    0
.eh_frame:000000000001BB26                 db    0
.eh_frame:000000000001BB27                 db    0
.eh_frame:000000000001BB28                 db  10h
.eh_frame:000000000001BB29                 db    0
.eh_frame:000000000001BB2A                 db    0
.eh_frame:000000000001BB2B                 db    0
.eh_frame:000000000001BB2C                 db 0ACh
.eh_frame:000000000001BB2D                 db    4
.eh_frame:000000000001BB2E                 db    0
.eh_frame:000000000001BB2F                 db    0
.eh_frame:000000000001BB30                 db 0E0h
.eh_frame:000000000001BB31                 db 0A8h
.eh_frame:000000000001BB32                 db 0FEh
.eh_frame:000000000001BB33                 db 0FFh
.eh_frame:000000000001BB34                 db  99h
.eh_frame:000000000001BB35                 db    0
.eh_frame:000000000001BB36                 db    0
.eh_frame:000000000001BB37                 db    0
.eh_frame:000000000001BB38                 db    0
.eh_frame:000000000001BB39                 db    0
.eh_frame:000000000001BB3A                 db    0
.eh_frame:000000000001BB3B                 db    0
.eh_frame:000000000001BB3C                 db  10h
.eh_frame:000000000001BB3D                 db    0
.eh_frame:000000000001BB3E                 db    0
.eh_frame:000000000001BB3F                 db    0
.eh_frame:000000000001BB40                 db 0C0h
.eh_frame:000000000001BB41                 db    4
.eh_frame:000000000001BB42                 db    0
.eh_frame:000000000001BB43                 db    0
.eh_frame:000000000001BB44                 db  6Ch ; l
.eh_frame:000000000001BB45                 db 0A9h
.eh_frame:000000000001BB46                 db 0FEh
.eh_frame:000000000001BB47                 db 0FFh
.eh_frame:000000000001BB48                 db  9Eh
.eh_frame:000000000001BB49                 db    0
.eh_frame:000000000001BB4A                 db    0
.eh_frame:000000000001BB4B                 db    0
.eh_frame:000000000001BB4C                 db    0
.eh_frame:000000000001BB4D                 db    0
.eh_frame:000000000001BB4E                 db    0
.eh_frame:000000000001BB4F                 db    0
.eh_frame:000000000001BB50                 db  10h
.eh_frame:000000000001BB51                 db    0
.eh_frame:000000000001BB52                 db    0
.eh_frame:000000000001BB53                 db    0
.eh_frame:000000000001BB54                 db 0D4h
.eh_frame:000000000001BB55                 db    4
.eh_frame:000000000001BB56                 db    0
.eh_frame:000000000001BB57                 db    0
.eh_frame:000000000001BB58                 db 0F8h
.eh_frame:000000000001BB59                 db 0A9h
.eh_frame:000000000001BB5A                 db 0FEh
.eh_frame:000000000001BB5B                 db 0FFh
.eh_frame:000000000001BB5C                 db  99h
.eh_frame:000000000001BB5D                 db    0
.eh_frame:000000000001BB5E                 db    0
.eh_frame:000000000001BB5F                 db    0
.eh_frame:000000000001BB60                 db    0
.eh_frame:000000000001BB61                 db    0
.eh_frame:000000000001BB62                 db    0
.eh_frame:000000000001BB63                 db    0
.eh_frame:000000000001BB64                 db  10h
.eh_frame:000000000001BB65                 db    0
.eh_frame:000000000001BB66                 db    0
.eh_frame:000000000001BB67                 db    0
.eh_frame:000000000001BB68                 db 0E8h
.eh_frame:000000000001BB69                 db    4
.eh_frame:000000000001BB6A                 db    0
.eh_frame:000000000001BB6B                 db    0
.eh_frame:000000000001BB6C                 db  84h
.eh_frame:000000000001BB6D                 db 0AAh
.eh_frame:000000000001BB6E                 db 0FEh
.eh_frame:000000000001BB6F                 db 0FFh
.eh_frame:000000000001BB70                 db  8Dh
.eh_frame:000000000001BB71                 db    0
.eh_frame:000000000001BB72                 db    0
.eh_frame:000000000001BB73                 db    0
.eh_frame:000000000001BB74                 db    0
.eh_frame:000000000001BB75                 db    0
.eh_frame:000000000001BB76                 db    0
.eh_frame:000000000001BB77                 db    0
.eh_frame:000000000001BB78                 db  10h
.eh_frame:000000000001BB79                 db    0
.eh_frame:000000000001BB7A                 db    0
.eh_frame:000000000001BB7B                 db    0
.eh_frame:000000000001BB7C                 db 0FCh
.eh_frame:000000000001BB7D                 db    4
.eh_frame:000000000001BB7E                 db    0
.eh_frame:000000000001BB7F                 db    0
.eh_frame:000000000001BB80                 db    0
.eh_frame:000000000001BB81                 db 0ABh
.eh_frame:000000000001BB82                 db 0FEh
.eh_frame:000000000001BB83                 db 0FFh
.eh_frame:000000000001BB84                 db  8Dh
.eh_frame:000000000001BB85                 db    0
.eh_frame:000000000001BB86                 db    0
.eh_frame:000000000001BB87                 db    0
.eh_frame:000000000001BB88                 db    0
.eh_frame:000000000001BB89                 db    0
.eh_frame:000000000001BB8A                 db    0
.eh_frame:000000000001BB8B                 db    0
.eh_frame:000000000001BB8C                 db  10h
.eh_frame:000000000001BB8D                 db    0
.eh_frame:000000000001BB8E                 db    0
.eh_frame:000000000001BB8F                 db    0
.eh_frame:000000000001BB90                 db  10h
.eh_frame:000000000001BB91                 db    5
.eh_frame:000000000001BB92                 db    0
.eh_frame:000000000001BB93                 db    0
.eh_frame:000000000001BB94                 db  7Ch ; |
.eh_frame:000000000001BB95                 db 0ABh
.eh_frame:000000000001BB96                 db 0FEh
.eh_frame:000000000001BB97                 db 0FFh
.eh_frame:000000000001BB98                 db  8Dh
.eh_frame:000000000001BB99                 db    0
.eh_frame:000000000001BB9A                 db    0
.eh_frame:000000000001BB9B                 db    0
.eh_frame:000000000001BB9C                 db    0
.eh_frame:000000000001BB9D                 db    0
.eh_frame:000000000001BB9E                 db    0
.eh_frame:000000000001BB9F                 db    0
.eh_frame:000000000001BBA0                 db  10h
.eh_frame:000000000001BBA1                 db    0
.eh_frame:000000000001BBA2                 db    0
.eh_frame:000000000001BBA3                 db    0
.eh_frame:000000000001BBA4                 db  24h ; $
.eh_frame:000000000001BBA5                 db    5
.eh_frame:000000000001BBA6                 db    0
.eh_frame:000000000001BBA7                 db    0
.eh_frame:000000000001BBA8                 db 0F8h
.eh_frame:000000000001BBA9                 db 0ABh
.eh_frame:000000000001BBAA                 db 0FEh
.eh_frame:000000000001BBAB                 db 0FFh
.eh_frame:000000000001BBAC                 db  8Dh
.eh_frame:000000000001BBAD                 db    0
.eh_frame:000000000001BBAE                 db    0
.eh_frame:000000000001BBAF                 db    0
.eh_frame:000000000001BBB0                 db    0
.eh_frame:000000000001BBB1                 db    0
.eh_frame:000000000001BBB2                 db    0
.eh_frame:000000000001BBB3                 db    0
.eh_frame:000000000001BBB4                 db  10h
.eh_frame:000000000001BBB5                 db    0
.eh_frame:000000000001BBB6                 db    0
.eh_frame:000000000001BBB7                 db    0
.eh_frame:000000000001BBB8                 db  38h ; 8
.eh_frame:000000000001BBB9                 db    5
.eh_frame:000000000001BBBA                 db    0
.eh_frame:000000000001BBBB                 db    0
.eh_frame:000000000001BBBC                 db  74h ; t
.eh_frame:000000000001BBBD                 db 0ACh
.eh_frame:000000000001BBBE                 db 0FEh
.eh_frame:000000000001BBBF                 db 0FFh
.eh_frame:000000000001BBC0                 db 0FAh
.eh_frame:000000000001BBC1                 db    0
.eh_frame:000000000001BBC2                 db    0
.eh_frame:000000000001BBC3                 db    0
.eh_frame:000000000001BBC4                 db    0
.eh_frame:000000000001BBC5                 db    0
.eh_frame:000000000001BBC6                 db    0
.eh_frame:000000000001BBC7                 db    0
.eh_frame:000000000001BBC8                 db  18h
.eh_frame:000000000001BBC9                 db    0
.eh_frame:000000000001BBCA                 db    0
.eh_frame:000000000001BBCB                 db    0
.eh_frame:000000000001BBCC                 db  4Ch ; L
.eh_frame:000000000001BBCD                 db    5
.eh_frame:000000000001BBCE                 db    0
.eh_frame:000000000001BBCF                 db    0
.eh_frame:000000000001BBD0                 db  60h ; `
.eh_frame:000000000001BBD1                 db 0ADh
.eh_frame:000000000001BBD2                 db 0FEh
.eh_frame:000000000001BBD3                 db 0FFh
.eh_frame:000000000001BBD4                 db  4Ah ; J
.eh_frame:000000000001BBD5                 db    0
.eh_frame:000000000001BBD6                 db    0
.eh_frame:000000000001BBD7                 db    0
.eh_frame:000000000001BBD8                 db    0
.eh_frame:000000000001BBD9                 db  41h ; A
.eh_frame:000000000001BBDA                 db  0Eh
.eh_frame:000000000001BBDB                 db  10h
.eh_frame:000000000001BBDC                 db  83h
.eh_frame:000000000001BBDD                 db    2
.eh_frame:000000000001BBDE                 db  78h ; x
.eh_frame:000000000001BBDF                 db  0Ah
.eh_frame:000000000001BBE0                 db  0Eh
.eh_frame:000000000001BBE1                 db    8
.eh_frame:000000000001BBE2                 db  47h ; G
.eh_frame:000000000001BBE3                 db  0Bh
.eh_frame:000000000001BBE4                 db  10h
.eh_frame:000000000001BBE5                 db    0
.eh_frame:000000000001BBE6                 db    0
.eh_frame:000000000001BBE7                 db    0
.eh_frame:000000000001BBE8                 db  68h ; h
.eh_frame:000000000001BBE9                 db    5
.eh_frame:000000000001BBEA                 db    0
.eh_frame:000000000001BBEB                 db    0
.eh_frame:000000000001BBEC                 db  94h
.eh_frame:000000000001BBED                 db 0ADh
.eh_frame:000000000001BBEE                 db 0FEh
.eh_frame:000000000001BBEF                 db 0FFh
.eh_frame:000000000001BBF0                 db 0A8h
.eh_frame:000000000001BBF1                 db    0
.eh_frame:000000000001BBF2                 db    0
.eh_frame:000000000001BBF3                 db    0
.eh_frame:000000000001BBF4                 db    0
.eh_frame:000000000001BBF5                 db    0
.eh_frame:000000000001BBF6                 db    0
.eh_frame:000000000001BBF7                 db    0
.eh_frame:000000000001BBF8                 db  10h
.eh_frame:000000000001BBF9                 db    0
.eh_frame:000000000001BBFA                 db    0
.eh_frame:000000000001BBFB                 db    0
.eh_frame:000000000001BBFC                 db  7Ch ; |
.eh_frame:000000000001BBFD                 db    5
.eh_frame:000000000001BBFE                 db    0
.eh_frame:000000000001BBFF                 db    0
.eh_frame:000000000001BC00                 db  30h ; 0
.eh_frame:000000000001BC01                 db 0AEh
.eh_frame:000000000001BC02                 db 0FEh
.eh_frame:000000000001BC03                 db 0FFh
.eh_frame:000000000001BC04                 db  8Dh
.eh_frame:000000000001BC05                 db    0
.eh_frame:000000000001BC06                 db    0
.eh_frame:000000000001BC07                 db    0
.eh_frame:000000000001BC08                 db    0
.eh_frame:000000000001BC09                 db    0
.eh_frame:000000000001BC0A                 db    0
.eh_frame:000000000001BC0B                 db    0
.eh_frame:000000000001BC0C                 db  10h
.eh_frame:000000000001BC0D                 db    0
.eh_frame:000000000001BC0E                 db    0
.eh_frame:000000000001BC0F                 db    0
.eh_frame:000000000001BC10                 db  90h
.eh_frame:000000000001BC11                 db    5
.eh_frame:000000000001BC12                 db    0
.eh_frame:000000000001BC13                 db    0
.eh_frame:000000000001BC14                 db 0ACh
.eh_frame:000000000001BC15                 db 0AEh
.eh_frame:000000000001BC16                 db 0FEh
.eh_frame:000000000001BC17                 db 0FFh
.eh_frame:000000000001BC18                 db  8Dh
.eh_frame:000000000001BC19                 db    0
.eh_frame:000000000001BC1A                 db    0
.eh_frame:000000000001BC1B                 db    0
.eh_frame:000000000001BC1C                 db    0
.eh_frame:000000000001BC1D                 db    0
.eh_frame:000000000001BC1E                 db    0
.eh_frame:000000000001BC1F                 db    0
.eh_frame:000000000001BC20                 db  3Ch ; <
.eh_frame:000000000001BC21                 db    0
.eh_frame:000000000001BC22                 db    0
.eh_frame:000000000001BC23                 db    0
.eh_frame:000000000001BC24                 db 0A4h
.eh_frame:000000000001BC25                 db    5
.eh_frame:000000000001BC26                 db    0
.eh_frame:000000000001BC27                 db    0
.eh_frame:000000000001BC28                 db  28h ; (
.eh_frame:000000000001BC29                 db 0AFh
.eh_frame:000000000001BC2A                 db 0FEh
.eh_frame:000000000001BC2B                 db 0FFh
.eh_frame:000000000001BC2C                 db 0FEh
.eh_frame:000000000001BC2D                 db    0
.eh_frame:000000000001BC2E                 db    0
.eh_frame:000000000001BC2F                 db    0
.eh_frame:000000000001BC30                 db    0
.eh_frame:000000000001BC31                 db    2
.eh_frame:000000000001BC32                 db  8Ah
.eh_frame:000000000001BC33                 db  0Eh
.eh_frame:000000000001BC34                 db  10h
.eh_frame:000000000001BC35                 db  8Ch
.eh_frame:000000000001BC36                 db    2
.eh_frame:000000000001BC37                 db  41h ; A
.eh_frame:000000000001BC38                 db  0Eh
.eh_frame:000000000001BC39                 db  18h
.eh_frame:000000000001BC3A                 db  86h
.eh_frame:000000000001BC3B                 db    3
.eh_frame:000000000001BC3C                 db  41h ; A
.eh_frame:000000000001BC3D                 db  0Eh
.eh_frame:000000000001BC3E                 db  20h
.eh_frame:000000000001BC3F                 db  83h
.eh_frame:000000000001BC40                 db    4
.eh_frame:000000000001BC41                 db    2
.eh_frame:000000000001BC42                 db  4Fh ; O
.eh_frame:000000000001BC43                 db  0Ah
.eh_frame:000000000001BC44                 db 0C3h
.eh_frame:000000000001BC45                 db  0Eh
.eh_frame:000000000001BC46                 db  18h
.eh_frame:000000000001BC47                 db  41h ; A
.eh_frame:000000000001BC48                 db 0C6h
.eh_frame:000000000001BC49                 db  0Eh
.eh_frame:000000000001BC4A                 db  10h
.eh_frame:000000000001BC4B                 db  42h ; B
.eh_frame:000000000001BC4C                 db 0CCh
.eh_frame:000000000001BC4D                 db  0Eh
.eh_frame:000000000001BC4E                 db    8
.eh_frame:000000000001BC4F                 db  4Ah ; J
.eh_frame:000000000001BC50                 db  0Bh
.eh_frame:000000000001BC51                 db  41h ; A
.eh_frame:000000000001BC52                 db  0Ah
.eh_frame:000000000001BC53                 db  0Eh
.eh_frame:000000000001BC54                 db  18h
.eh_frame:000000000001BC55                 db  41h ; A
.eh_frame:000000000001BC56                 db  0Eh
.eh_frame:000000000001BC57                 db  10h
.eh_frame:000000000001BC58                 db  42h ; B
.eh_frame:000000000001BC59                 db  0Eh
.eh_frame:000000000001BC5A                 db    8
.eh_frame:000000000001BC5B                 db  44h ; D
.eh_frame:000000000001BC5C                 db  0Bh
.eh_frame:000000000001BC5D                 db    0
.eh_frame:000000000001BC5E                 db    0
.eh_frame:000000000001BC5F                 db    0
.eh_frame:000000000001BC60                 db  48h ; H
.eh_frame:000000000001BC61                 db    0
.eh_frame:000000000001BC62                 db    0
.eh_frame:000000000001BC63                 db    0
.eh_frame:000000000001BC64                 db 0E4h
.eh_frame:000000000001BC65                 db    5
.eh_frame:000000000001BC66                 db    0
.eh_frame:000000000001BC67                 db    0
.eh_frame:000000000001BC68                 db 0E8h
.eh_frame:000000000001BC69                 db 0AFh
.eh_frame:000000000001BC6A                 db 0FEh
.eh_frame:000000000001BC6B                 db 0FFh
.eh_frame:000000000001BC6C                 db 0CEh
.eh_frame:000000000001BC6D                 db    1
.eh_frame:000000000001BC6E                 db    0
.eh_frame:000000000001BC6F                 db    0
.eh_frame:000000000001BC70                 db    0
.eh_frame:000000000001BC71                 db  42h ; B
.eh_frame:000000000001BC72                 db  0Eh
.eh_frame:000000000001BC73                 db  10h
.eh_frame:000000000001BC74                 db  8Fh
.eh_frame:000000000001BC75                 db    2
.eh_frame:000000000001BC76                 db  42h ; B
.eh_frame:000000000001BC77                 db  0Eh
.eh_frame:000000000001BC78                 db  18h
.eh_frame:000000000001BC79                 db  8Eh
.eh_frame:000000000001BC7A                 db    3
.eh_frame:000000000001BC7B                 db  42h ; B
.eh_frame:000000000001BC7C                 db  0Eh
.eh_frame:000000000001BC7D                 db  20h
.eh_frame:000000000001BC7E                 db  8Dh
.eh_frame:000000000001BC7F                 db    4
.eh_frame:000000000001BC80                 db  42h ; B
.eh_frame:000000000001BC81                 db  0Eh
.eh_frame:000000000001BC82                 db  28h ; (
.eh_frame:000000000001BC83                 db  8Ch
.eh_frame:000000000001BC84                 db    5
.eh_frame:000000000001BC85                 db  41h ; A
.eh_frame:000000000001BC86                 db  0Eh
.eh_frame:000000000001BC87                 db  30h ; 0
.eh_frame:000000000001BC88                 db  86h
.eh_frame:000000000001BC89                 db    6
.eh_frame:000000000001BC8A                 db  41h ; A
.eh_frame:000000000001BC8B                 db  0Eh
.eh_frame:000000000001BC8C                 db  38h ; 8
.eh_frame:000000000001BC8D                 db  83h
.eh_frame:000000000001BC8E                 db    7
.eh_frame:000000000001BC8F                 db  47h ; G
.eh_frame:000000000001BC90                 db  0Eh
.eh_frame:000000000001BC91                 db 0E0h
.eh_frame:000000000001BC92                 db    1
.eh_frame:000000000001BC93                 db    2
.eh_frame:000000000001BC94                 db  7Ch ; |
.eh_frame:000000000001BC95                 db  0Ah
.eh_frame:000000000001BC96                 db  0Eh
.eh_frame:000000000001BC97                 db  38h ; 8
.eh_frame:000000000001BC98                 db  41h ; A
.eh_frame:000000000001BC99                 db  0Eh
.eh_frame:000000000001BC9A                 db  30h ; 0
.eh_frame:000000000001BC9B                 db  41h ; A
.eh_frame:000000000001BC9C                 db  0Eh
.eh_frame:000000000001BC9D                 db  28h ; (
.eh_frame:000000000001BC9E                 db  42h ; B
.eh_frame:000000000001BC9F                 db  0Eh
.eh_frame:000000000001BCA0                 db  20h
.eh_frame:000000000001BCA1                 db  42h ; B
.eh_frame:000000000001BCA2                 db  0Eh
.eh_frame:000000000001BCA3                 db  18h
.eh_frame:000000000001BCA4                 db  42h ; B
.eh_frame:000000000001BCA5                 db  0Eh
.eh_frame:000000000001BCA6                 db  10h
.eh_frame:000000000001BCA7                 db  42h ; B
.eh_frame:000000000001BCA8                 db  0Eh
.eh_frame:000000000001BCA9                 db    8
.eh_frame:000000000001BCAA                 db  49h ; I
.eh_frame:000000000001BCAB                 db  0Bh
.eh_frame:000000000001BCAC                 db  14h
.eh_frame:000000000001BCAD                 db    0
.eh_frame:000000000001BCAE                 db    0
.eh_frame:000000000001BCAF                 db    0
.eh_frame:000000000001BCB0                 db  30h ; 0
.eh_frame:000000000001BCB1                 db    6
.eh_frame:000000000001BCB2                 db    0
.eh_frame:000000000001BCB3                 db    0
.eh_frame:000000000001BCB4                 db  6Ch ; l
.eh_frame:000000000001BCB5                 db 0B1h
.eh_frame:000000000001BCB6                 db 0FEh
.eh_frame:000000000001BCB7                 db 0FFh
.eh_frame:000000000001BCB8                 db  41h ; A
.eh_frame:000000000001BCB9                 db    0
.eh_frame:000000000001BCBA                 db    0
.eh_frame:000000000001BCBB                 db    0
.eh_frame:000000000001BCBC                 db    0
.eh_frame:000000000001BCBD                 db  63h ; c
.eh_frame:000000000001BCBE                 db  0Eh
.eh_frame:000000000001BCBF                 db  10h
.eh_frame:000000000001BCC0                 db  5Ch ; \
.eh_frame:000000000001BCC1                 db  0Eh
.eh_frame:000000000001BCC2                 db    8
.eh_frame:000000000001BCC3                 db    0
.eh_frame:000000000001BCC4                 db  18h
.eh_frame:000000000001BCC5                 db    0
.eh_frame:000000000001BCC6                 db    0
.eh_frame:000000000001BCC7                 db    0
.eh_frame:000000000001BCC8                 db  48h ; H
.eh_frame:000000000001BCC9                 db    6
.eh_frame:000000000001BCCA                 db    0
.eh_frame:000000000001BCCB                 db    0
.eh_frame:000000000001BCCC                 db 0A4h
.eh_frame:000000000001BCCD                 db 0B1h
.eh_frame:000000000001BCCE                 db 0FEh
.eh_frame:000000000001BCCF                 db 0FFh
.eh_frame:000000000001BCD0                 db  61h ; a
.eh_frame:000000000001BCD1                 db    0
.eh_frame:000000000001BCD2                 db    0
.eh_frame:000000000001BCD3                 db    0
.eh_frame:000000000001BCD4                 db    0
.eh_frame:000000000001BCD5                 db  48h ; H
.eh_frame:000000000001BCD6                 db  0Eh
.eh_frame:000000000001BCD7                 db  10h
.eh_frame:000000000001BCD8                 db  83h
.eh_frame:000000000001BCD9                 db    2
.eh_frame:000000000001BCDA                 db  52h ; R
.eh_frame:000000000001BCDB                 db  0Ah
.eh_frame:000000000001BCDC                 db  0Eh
.eh_frame:000000000001BCDD                 db    8
.eh_frame:000000000001BCDE                 db  56h ; V
.eh_frame:000000000001BCDF                 db  0Bh
.eh_frame:000000000001BCE0                 db  28h ; (
.eh_frame:000000000001BCE1                 db    0
.eh_frame:000000000001BCE2                 db    0
.eh_frame:000000000001BCE3                 db    0
.eh_frame:000000000001BCE4                 db  64h ; d
.eh_frame:000000000001BCE5                 db    6
.eh_frame:000000000001BCE6                 db    0
.eh_frame:000000000001BCE7                 db    0
.eh_frame:000000000001BCE8                 db 0F8h
.eh_frame:000000000001BCE9                 db 0B1h
.eh_frame:000000000001BCEA                 db 0FEh
.eh_frame:000000000001BCEB                 db 0FFh
.eh_frame:000000000001BCEC                 db 0EAh
.eh_frame:000000000001BCED                 db    0
.eh_frame:000000000001BCEE                 db    0
.eh_frame:000000000001BCEF                 db    0
.eh_frame:000000000001BCF0                 db    0
.eh_frame:000000000001BCF1                 db  41h ; A
.eh_frame:000000000001BCF2                 db  0Eh
.eh_frame:000000000001BCF3                 db  10h
.eh_frame:000000000001BCF4                 db  86h
.eh_frame:000000000001BCF5                 db    2
.eh_frame:000000000001BCF6                 db  41h ; A
.eh_frame:000000000001BCF7                 db  0Eh
.eh_frame:000000000001BCF8                 db  18h
.eh_frame:000000000001BCF9                 db  83h
.eh_frame:000000000001BCFA                 db    3
.eh_frame:000000000001BCFB                 db  47h ; G
.eh_frame:000000000001BCFC                 db  0Eh
.eh_frame:000000000001BCFD                 db 0B0h
.eh_frame:000000000001BCFE                 db    1
.eh_frame:000000000001BCFF                 db    2
.eh_frame:000000000001BD00                 db 0D9h
.eh_frame:000000000001BD01                 db  0Ah
.eh_frame:000000000001BD02                 db  0Eh
.eh_frame:000000000001BD03                 db  18h
.eh_frame:000000000001BD04                 db  41h ; A
.eh_frame:000000000001BD05                 db  0Eh
.eh_frame:000000000001BD06                 db  10h
.eh_frame:000000000001BD07                 db  41h ; A
.eh_frame:000000000001BD08                 db  0Eh
.eh_frame:000000000001BD09                 db    8
.eh_frame:000000000001BD0A                 db  41h ; A
.eh_frame:000000000001BD0B                 db  0Bh
.eh_frame:000000000001BD0C                 db  1Ch
.eh_frame:000000000001BD0D                 db    0
.eh_frame:000000000001BD0E                 db    0
.eh_frame:000000000001BD0F                 db    0
.eh_frame:000000000001BD10                 db  90h
.eh_frame:000000000001BD11                 db    6
.eh_frame:000000000001BD12                 db    0
.eh_frame:000000000001BD13                 db    0
.eh_frame:000000000001BD14                 db 0BCh
.eh_frame:000000000001BD15                 db 0B2h
.eh_frame:000000000001BD16                 db 0FEh
.eh_frame:000000000001BD17                 db 0FFh
.eh_frame:000000000001BD18                 db  50h ; P
.eh_frame:000000000001BD19                 db    0
.eh_frame:000000000001BD1A                 db    0
.eh_frame:000000000001BD1B                 db    0
.eh_frame:000000000001BD1C                 db    0
.eh_frame:000000000001BD1D                 db  4Dh ; M
.eh_frame:000000000001BD1E                 db  0Eh
.eh_frame:000000000001BD1F                 db  10h
.eh_frame:000000000001BD20                 db  52h ; R
.eh_frame:000000000001BD21                 db  0Eh
.eh_frame:000000000001BD22                 db    8
.eh_frame:000000000001BD23                 db  49h ; I
.eh_frame:000000000001BD24                 db  0Eh
.eh_frame:000000000001BD25                 db  10h
.eh_frame:000000000001BD26                 db  63h ; c
.eh_frame:000000000001BD27                 db  0Eh
.eh_frame:000000000001BD28                 db    8
.eh_frame:000000000001BD29                 db    0
.eh_frame:000000000001BD2A                 db    0
.eh_frame:000000000001BD2B                 db    0
.eh_frame:000000000001BD2C                 db  4Ch ; L
.eh_frame:000000000001BD2D                 db    0
.eh_frame:000000000001BD2E                 db    0
.eh_frame:000000000001BD2F                 db    0
.eh_frame:000000000001BD30                 db 0B0h
.eh_frame:000000000001BD31                 db    6
.eh_frame:000000000001BD32                 db    0
.eh_frame:000000000001BD33                 db    0
.eh_frame:000000000001BD34                 db 0ECh
.eh_frame:000000000001BD35                 db 0B2h
.eh_frame:000000000001BD36                 db 0FEh
.eh_frame:000000000001BD37                 db 0FFh
.eh_frame:000000000001BD38                 db  69h ; i
.eh_frame:000000000001BD39                 db    4
.eh_frame:000000000001BD3A                 db    0
.eh_frame:000000000001BD3B                 db    0
.eh_frame:000000000001BD3C                 db    0
.eh_frame:000000000001BD3D                 db  42h ; B
.eh_frame:000000000001BD3E                 db  0Eh
.eh_frame:000000000001BD3F                 db  10h
.eh_frame:000000000001BD40                 db  8Fh
.eh_frame:000000000001BD41                 db    2
.eh_frame:000000000001BD42                 db  42h ; B
.eh_frame:000000000001BD43                 db  0Eh
.eh_frame:000000000001BD44                 db  18h
.eh_frame:000000000001BD45                 db  8Eh
.eh_frame:000000000001BD46                 db    3
.eh_frame:000000000001BD47                 db  45h ; E
.eh_frame:000000000001BD48                 db  0Eh
.eh_frame:000000000001BD49                 db  20h
.eh_frame:000000000001BD4A                 db  8Dh
.eh_frame:000000000001BD4B                 db    4
.eh_frame:000000000001BD4C                 db  42h ; B
.eh_frame:000000000001BD4D                 db  0Eh
.eh_frame:000000000001BD4E                 db  28h ; (
.eh_frame:000000000001BD4F                 db  8Ch
.eh_frame:000000000001BD50                 db    5
.eh_frame:000000000001BD51                 db  44h ; D
.eh_frame:000000000001BD52                 db  0Eh
.eh_frame:000000000001BD53                 db  30h ; 0
.eh_frame:000000000001BD54                 db  86h
.eh_frame:000000000001BD55                 db    6
.eh_frame:000000000001BD56                 db  41h ; A
.eh_frame:000000000001BD57                 db  0Eh
.eh_frame:000000000001BD58                 db  38h ; 8
.eh_frame:000000000001BD59                 db  83h
.eh_frame:000000000001BD5A                 db    7
.eh_frame:000000000001BD5B                 db  46h ; F
.eh_frame:000000000001BD5C                 db  0Eh
.eh_frame:000000000001BD5D                 db 0A0h
.eh_frame:000000000001BD5E                 db    1
.eh_frame:000000000001BD5F                 db    3
.eh_frame:000000000001BD60                 db  72h ; r
.eh_frame:000000000001BD61                 db    1
.eh_frame:000000000001BD62                 db  0Ah
.eh_frame:000000000001BD63                 db  0Eh
.eh_frame:000000000001BD64                 db  38h ; 8
.eh_frame:000000000001BD65                 db  41h ; A
.eh_frame:000000000001BD66                 db  0Eh
.eh_frame:000000000001BD67                 db  30h ; 0
.eh_frame:000000000001BD68                 db  41h ; A
.eh_frame:000000000001BD69                 db  0Eh
.eh_frame:000000000001BD6A                 db  28h ; (
.eh_frame:000000000001BD6B                 db  42h ; B
.eh_frame:000000000001BD6C                 db  0Eh
.eh_frame:000000000001BD6D                 db  20h
.eh_frame:000000000001BD6E                 db  42h ; B
.eh_frame:000000000001BD6F                 db  0Eh
.eh_frame:000000000001BD70                 db  18h
.eh_frame:000000000001BD71                 db  42h ; B
.eh_frame:000000000001BD72                 db  0Eh
.eh_frame:000000000001BD73                 db  10h
.eh_frame:000000000001BD74                 db  42h ; B
.eh_frame:000000000001BD75                 db  0Eh
.eh_frame:000000000001BD76                 db    8
.eh_frame:000000000001BD77                 db  46h ; F
.eh_frame:000000000001BD78                 db  0Bh
.eh_frame:000000000001BD79                 db    0
.eh_frame:000000000001BD7A                 db    0
.eh_frame:000000000001BD7B                 db    0
.eh_frame:000000000001BD7C                 db  4Ch ; L
.eh_frame:000000000001BD7D                 db    0
.eh_frame:000000000001BD7E                 db    0
.eh_frame:000000000001BD7F                 db    0
.eh_frame:000000000001BD80                 db    0
.eh_frame:000000000001BD81                 db    7
.eh_frame:000000000001BD82                 db    0
.eh_frame:000000000001BD83                 db    0
.eh_frame:000000000001BD84                 db  0Ch
.eh_frame:000000000001BD85                 db 0B7h
.eh_frame:000000000001BD86                 db 0FEh
.eh_frame:000000000001BD87                 db 0FFh
.eh_frame:000000000001BD88                 db    1
.eh_frame:000000000001BD89                 db    4
.eh_frame:000000000001BD8A                 db    0
.eh_frame:000000000001BD8B                 db    0
.eh_frame:000000000001BD8C                 db    0
.eh_frame:000000000001BD8D                 db  42h ; B
.eh_frame:000000000001BD8E                 db  0Eh
.eh_frame:000000000001BD8F                 db  10h
.eh_frame:000000000001BD90                 db  8Fh
.eh_frame:000000000001BD91                 db    2
.eh_frame:000000000001BD92                 db  42h ; B
.eh_frame:000000000001BD93                 db  0Eh
.eh_frame:000000000001BD94                 db  18h
.eh_frame:000000000001BD95                 db  8Eh
.eh_frame:000000000001BD96                 db    3
.eh_frame:000000000001BD97                 db  45h ; E
.eh_frame:000000000001BD98                 db  0Eh
.eh_frame:000000000001BD99                 db  20h
.eh_frame:000000000001BD9A                 db  8Dh
.eh_frame:000000000001BD9B                 db    4
.eh_frame:000000000001BD9C                 db  42h ; B
.eh_frame:000000000001BD9D                 db  0Eh
.eh_frame:000000000001BD9E                 db  28h ; (
.eh_frame:000000000001BD9F                 db  8Ch
.eh_frame:000000000001BDA0                 db    5
.eh_frame:000000000001BDA1                 db  44h ; D
.eh_frame:000000000001BDA2                 db  0Eh
.eh_frame:000000000001BDA3                 db  30h ; 0
.eh_frame:000000000001BDA4                 db  86h
.eh_frame:000000000001BDA5                 db    6
.eh_frame:000000000001BDA6                 db  41h ; A
.eh_frame:000000000001BDA7                 db  0Eh
.eh_frame:000000000001BDA8                 db  38h ; 8
.eh_frame:000000000001BDA9                 db  83h
.eh_frame:000000000001BDAA                 db    7
.eh_frame:000000000001BDAB                 db  50h ; P
.eh_frame:000000000001BDAC                 db  0Eh
.eh_frame:000000000001BDAD                 db  80h
.eh_frame:000000000001BDAE                 db  41h ; A
.eh_frame:000000000001BDAF                 db    3
.eh_frame:000000000001BDB0                 db  3Bh ; ;
.eh_frame:000000000001BDB1                 db    2
.eh_frame:000000000001BDB2                 db  0Ah
.eh_frame:000000000001BDB3                 db  0Eh
.eh_frame:000000000001BDB4                 db  38h ; 8
.eh_frame:000000000001BDB5                 db  41h ; A
.eh_frame:000000000001BDB6                 db  0Eh
.eh_frame:000000000001BDB7                 db  30h ; 0
.eh_frame:000000000001BDB8                 db  41h ; A
.eh_frame:000000000001BDB9                 db  0Eh
.eh_frame:000000000001BDBA                 db  28h ; (
.eh_frame:000000000001BDBB                 db  42h ; B
.eh_frame:000000000001BDBC                 db  0Eh
.eh_frame:000000000001BDBD                 db  20h
.eh_frame:000000000001BDBE                 db  42h ; B
.eh_frame:000000000001BDBF                 db  0Eh
.eh_frame:000000000001BDC0                 db  18h
.eh_frame:000000000001BDC1                 db  42h ; B
.eh_frame:000000000001BDC2                 db  0Eh
.eh_frame:000000000001BDC3                 db  10h
.eh_frame:000000000001BDC4                 db  42h ; B
.eh_frame:000000000001BDC5                 db  0Eh
.eh_frame:000000000001BDC6                 db    8
.eh_frame:000000000001BDC7                 db  4Bh ; K
.eh_frame:000000000001BDC8                 db  0Bh
.eh_frame:000000000001BDC9                 db    0
.eh_frame:000000000001BDCA                 db    0
.eh_frame:000000000001BDCB                 db    0
.eh_frame:000000000001BDCC                 db  60h ; `
.eh_frame:000000000001BDCD                 db    0
.eh_frame:000000000001BDCE                 db    0
.eh_frame:000000000001BDCF                 db    0
.eh_frame:000000000001BDD0                 db  50h ; P
.eh_frame:000000000001BDD1                 db    7
.eh_frame:000000000001BDD2                 db    0
.eh_frame:000000000001BDD3                 db    0
.eh_frame:000000000001BDD4                 db 0CCh
.eh_frame:000000000001BDD5                 db 0BAh
.eh_frame:000000000001BDD6                 db 0FEh
.eh_frame:000000000001BDD7                 db 0FFh
.eh_frame:000000000001BDD8                 db  58h ; X
.eh_frame:000000000001BDD9                 db    4
.eh_frame:000000000001BDDA                 db    0
.eh_frame:000000000001BDDB                 db    0
.eh_frame:000000000001BDDC                 db    0
.eh_frame:000000000001BDDD                 db  42h ; B
.eh_frame:000000000001BDDE                 db  0Eh
.eh_frame:000000000001BDDF                 db  10h
.eh_frame:000000000001BDE0                 db  8Fh
.eh_frame:000000000001BDE1                 db    2
.eh_frame:000000000001BDE2                 db  42h ; B
.eh_frame:000000000001BDE3                 db  0Eh
.eh_frame:000000000001BDE4                 db  18h
.eh_frame:000000000001BDE5                 db  8Eh
.eh_frame:000000000001BDE6                 db    3
.eh_frame:000000000001BDE7                 db  45h ; E
.eh_frame:000000000001BDE8                 db  0Eh
.eh_frame:000000000001BDE9                 db  20h
.eh_frame:000000000001BDEA                 db  8Dh
.eh_frame:000000000001BDEB                 db    4
.eh_frame:000000000001BDEC                 db  42h ; B
.eh_frame:000000000001BDED                 db  0Eh
.eh_frame:000000000001BDEE                 db  28h ; (
.eh_frame:000000000001BDEF                 db  8Ch
.eh_frame:000000000001BDF0                 db    5
.eh_frame:000000000001BDF1                 db  44h ; D
.eh_frame:000000000001BDF2                 db  0Eh
.eh_frame:000000000001BDF3                 db  30h ; 0
.eh_frame:000000000001BDF4                 db  86h
.eh_frame:000000000001BDF5                 db    6
.eh_frame:000000000001BDF6                 db  41h ; A
.eh_frame:000000000001BDF7                 db  0Eh
.eh_frame:000000000001BDF8                 db  38h ; 8
.eh_frame:000000000001BDF9                 db  83h
.eh_frame:000000000001BDFA                 db    7
.eh_frame:000000000001BDFB                 db  4Ah ; J
.eh_frame:000000000001BDFC                 db  0Eh
.eh_frame:000000000001BDFD                 db  50h ; P
.eh_frame:000000000001BDFE                 db  6Ah ; j
.eh_frame:000000000001BDFF                 db  0Eh
.eh_frame:000000000001BE00                 db  58h ; X
.eh_frame:000000000001BE01                 db  48h ; H
.eh_frame:000000000001BE02                 db  0Eh
.eh_frame:000000000001BE03                 db  60h ; `
.eh_frame:000000000001BE04                 db  5Ah ; Z
.eh_frame:000000000001BE05                 db  0Eh
.eh_frame:000000000001BE06                 db  58h ; X
.eh_frame:000000000001BE07                 db  41h ; A
.eh_frame:000000000001BE08                 db  0Eh
.eh_frame:000000000001BE09                 db  50h ; P
.eh_frame:000000000001BE0A                 db  44h ; D
.eh_frame:000000000001BE0B                 db  0Ah
.eh_frame:000000000001BE0C                 db  0Eh
.eh_frame:000000000001BE0D                 db  38h ; 8
.eh_frame:000000000001BE0E                 db  44h ; D
.eh_frame:000000000001BE0F                 db  0Eh
.eh_frame:000000000001BE10                 db  30h ; 0
.eh_frame:000000000001BE11                 db  41h ; A
.eh_frame:000000000001BE12                 db  0Eh
.eh_frame:000000000001BE13                 db  28h ; (
.eh_frame:000000000001BE14                 db  42h ; B
.eh_frame:000000000001BE15                 db  0Eh
.eh_frame:000000000001BE16                 db  20h
.eh_frame:000000000001BE17                 db  42h ; B
.eh_frame:000000000001BE18                 db  0Eh
.eh_frame:000000000001BE19                 db  18h
.eh_frame:000000000001BE1A                 db  42h ; B
.eh_frame:000000000001BE1B                 db  0Eh
.eh_frame:000000000001BE1C                 db  10h
.eh_frame:000000000001BE1D                 db  42h ; B
.eh_frame:000000000001BE1E                 db  0Eh
.eh_frame:000000000001BE1F                 db    8
.eh_frame:000000000001BE20                 db  48h ; H
.eh_frame:000000000001BE21                 db  0Bh
.eh_frame:000000000001BE22                 db    2
.eh_frame:000000000001BE23                 db 0BEh
.eh_frame:000000000001BE24                 db  0Eh
.eh_frame:000000000001BE25                 db  58h ; X
.eh_frame:000000000001BE26                 db  48h ; H
.eh_frame:000000000001BE27                 db  0Eh
.eh_frame:000000000001BE28                 db  60h ; `
.eh_frame:000000000001BE29                 db  64h ; d
.eh_frame:000000000001BE2A                 db  0Eh
.eh_frame:000000000001BE2B                 db  58h ; X
.eh_frame:000000000001BE2C                 db  41h ; A
.eh_frame:000000000001BE2D                 db  0Eh
.eh_frame:000000000001BE2E                 db  50h ; P
.eh_frame:000000000001BE2F                 db    0
.eh_frame:000000000001BE30                 db  2Ch ; ,
.eh_frame:000000000001BE31                 db    0
.eh_frame:000000000001BE32                 db    0
.eh_frame:000000000001BE33                 db    0
.eh_frame:000000000001BE34                 db 0B4h
.eh_frame:000000000001BE35                 db    7
.eh_frame:000000000001BE36                 db    0
.eh_frame:000000000001BE37                 db    0
.eh_frame:000000000001BE38                 db 0C8h
.eh_frame:000000000001BE39                 db 0BEh
.eh_frame:000000000001BE3A                 db 0FEh
.eh_frame:000000000001BE3B                 db 0FFh
.eh_frame:000000000001BE3C                 db  8Dh
.eh_frame:000000000001BE3D                 db    1
.eh_frame:000000000001BE3E                 db    0
.eh_frame:000000000001BE3F                 db    0
.eh_frame:000000000001BE40                 db    0
.eh_frame:000000000001BE41                 db  41h ; A
.eh_frame:000000000001BE42                 db  0Eh
.eh_frame:000000000001BE43                 db  10h
.eh_frame:000000000001BE44                 db  86h
.eh_frame:000000000001BE45                 db    2
.eh_frame:000000000001BE46                 db  41h ; A
.eh_frame:000000000001BE47                 db  0Eh
.eh_frame:000000000001BE48                 db  18h
.eh_frame:000000000001BE49                 db  83h
.eh_frame:000000000001BE4A                 db    3
.eh_frame:000000000001BE4B                 db  4Dh ; M
.eh_frame:000000000001BE4C                 db  0Eh
.eh_frame:000000000001BE4D                 db 0C0h
.eh_frame:000000000001BE4E                 db    5
.eh_frame:000000000001BE4F                 db    3
.eh_frame:000000000001BE50                 db  2Bh ; +
.eh_frame:000000000001BE51                 db    1
.eh_frame:000000000001BE52                 db  0Ah
.eh_frame:000000000001BE53                 db  0Eh
.eh_frame:000000000001BE54                 db  18h
.eh_frame:000000000001BE55                 db  41h ; A
.eh_frame:000000000001BE56                 db  0Eh
.eh_frame:000000000001BE57                 db  10h
.eh_frame:000000000001BE58                 db  41h ; A
.eh_frame:000000000001BE59                 db  0Eh
.eh_frame:000000000001BE5A                 db    8
.eh_frame:000000000001BE5B                 db  44h ; D
.eh_frame:000000000001BE5C                 db  0Bh
.eh_frame:000000000001BE5D                 db    0
.eh_frame:000000000001BE5E                 db    0
.eh_frame:000000000001BE5F                 db    0
.eh_frame:000000000001BE60                 db  70h ; p
.eh_frame:000000000001BE61                 db    0
.eh_frame:000000000001BE62                 db    0
.eh_frame:000000000001BE63                 db    0
.eh_frame:000000000001BE64                 db 0E4h
.eh_frame:000000000001BE65                 db    7
.eh_frame:000000000001BE66                 db    0
.eh_frame:000000000001BE67                 db    0
.eh_frame:000000000001BE68                 db  28h ; (
.eh_frame:000000000001BE69                 db 0C0h
.eh_frame:000000000001BE6A                 db 0FEh
.eh_frame:000000000001BE6B                 db 0FFh
.eh_frame:000000000001BE6C                 db  0Bh
.eh_frame:000000000001BE6D                 db  0Ah
.eh_frame:000000000001BE6E                 db    0
.eh_frame:000000000001BE6F                 db    0
.eh_frame:000000000001BE70                 db    0
.eh_frame:000000000001BE71                 db  42h ; B
.eh_frame:000000000001BE72                 db  0Eh
.eh_frame:000000000001BE73                 db  10h
.eh_frame:000000000001BE74                 db  8Fh
.eh_frame:000000000001BE75                 db    2
.eh_frame:000000000001BE76                 db  42h ; B
.eh_frame:000000000001BE77                 db  0Eh
.eh_frame:000000000001BE78                 db  18h
.eh_frame:000000000001BE79                 db  8Eh
.eh_frame:000000000001BE7A                 db    3
.eh_frame:000000000001BE7B                 db  42h ; B
.eh_frame:000000000001BE7C                 db  0Eh
.eh_frame:000000000001BE7D                 db  20h
.eh_frame:000000000001BE7E                 db  8Dh
.eh_frame:000000000001BE7F                 db    4
.eh_frame:000000000001BE80                 db  42h ; B
.eh_frame:000000000001BE81                 db  0Eh
.eh_frame:000000000001BE82                 db  28h ; (
.eh_frame:000000000001BE83                 db  8Ch
.eh_frame:000000000001BE84                 db    5
.eh_frame:000000000001BE85                 db  41h ; A
.eh_frame:000000000001BE86                 db  0Eh
.eh_frame:000000000001BE87                 db  30h ; 0
.eh_frame:000000000001BE88                 db  86h
.eh_frame:000000000001BE89                 db    6
.eh_frame:000000000001BE8A                 db  41h ; A
.eh_frame:000000000001BE8B                 db  0Eh
.eh_frame:000000000001BE8C                 db  38h ; 8
.eh_frame:000000000001BE8D                 db  83h
.eh_frame:000000000001BE8E                 db    7
.eh_frame:000000000001BE8F                 db  4Ah ; J
.eh_frame:000000000001BE90                 db  0Eh
.eh_frame:000000000001BE91                 db 0E0h
.eh_frame:000000000001BE92                 db  26h ; &
.eh_frame:000000000001BE93                 db    3
.eh_frame:000000000001BE94                 db 0A6h
.eh_frame:000000000001BE95                 db    1
.eh_frame:000000000001BE96                 db  0Eh
.eh_frame:000000000001BE97                 db 0E8h
.eh_frame:000000000001BE98                 db  26h ; &
.eh_frame:000000000001BE99                 db  4Fh ; O
.eh_frame:000000000001BE9A                 db  0Eh
.eh_frame:000000000001BE9B                 db 0F0h
.eh_frame:000000000001BE9C                 db  26h ; &
.eh_frame:000000000001BE9D                 db  6Dh ; m
.eh_frame:000000000001BE9E                 db  0Eh
.eh_frame:000000000001BE9F                 db 0E8h
.eh_frame:000000000001BEA0                 db  26h ; &
.eh_frame:000000000001BEA1                 db  42h ; B
.eh_frame:000000000001BEA2                 db  0Eh
.eh_frame:000000000001BEA3                 db 0E0h
.eh_frame:000000000001BEA4                 db  26h ; &
.eh_frame:000000000001BEA5                 db    3
.eh_frame:000000000001BEA6                 db 0E5h
.eh_frame:000000000001BEA7                 db    1
.eh_frame:000000000001BEA8                 db  0Ah
.eh_frame:000000000001BEA9                 db  0Eh
.eh_frame:000000000001BEAA                 db  38h ; 8
.eh_frame:000000000001BEAB                 db  41h ; A
.eh_frame:000000000001BEAC                 db  0Eh
.eh_frame:000000000001BEAD                 db  30h ; 0
.eh_frame:000000000001BEAE                 db  41h ; A
.eh_frame:000000000001BEAF                 db  0Eh
.eh_frame:000000000001BEB0                 db  28h ; (
.eh_frame:000000000001BEB1                 db  42h ; B
.eh_frame:000000000001BEB2                 db  0Eh
.eh_frame:000000000001BEB3                 db  20h
.eh_frame:000000000001BEB4                 db  42h ; B
.eh_frame:000000000001BEB5                 db  0Eh
.eh_frame:000000000001BEB6                 db  18h
.eh_frame:000000000001BEB7                 db  42h ; B
.eh_frame:000000000001BEB8                 db  0Eh
.eh_frame:000000000001BEB9                 db  10h
.eh_frame:000000000001BEBA                 db  42h ; B
.eh_frame:000000000001BEBB                 db  0Eh
.eh_frame:000000000001BEBC                 db    8
.eh_frame:000000000001BEBD                 db  49h ; I
.eh_frame:000000000001BEBE                 db  0Bh
.eh_frame:000000000001BEBF                 db    3
.eh_frame:000000000001BEC0                 db 0AEh
.eh_frame:000000000001BEC1                 db    4
.eh_frame:000000000001BEC2                 db  0Eh
.eh_frame:000000000001BEC3                 db 0E8h
.eh_frame:000000000001BEC4                 db  26h ; &
.eh_frame:000000000001BEC5                 db  4Dh ; M
.eh_frame:000000000001BEC6                 db  0Eh
.eh_frame:000000000001BEC7                 db 0F0h
.eh_frame:000000000001BEC8                 db  26h ; &
.eh_frame:000000000001BEC9                 db  68h ; h
.eh_frame:000000000001BECA                 db  0Eh
.eh_frame:000000000001BECB                 db 0E8h
.eh_frame:000000000001BECC                 db  26h ; &
.eh_frame:000000000001BECD                 db  41h ; A
.eh_frame:000000000001BECE                 db  0Eh
.eh_frame:000000000001BECF                 db 0E0h
.eh_frame:000000000001BED0                 db  26h ; &
.eh_frame:000000000001BED1                 db    0
.eh_frame:000000000001BED2                 db    0
.eh_frame:000000000001BED3                 db    0
.eh_frame:000000000001BED4                 db  28h ; (
.eh_frame:000000000001BED5                 db    0
.eh_frame:000000000001BED6                 db    0
.eh_frame:000000000001BED7                 db    0
.eh_frame:000000000001BED8                 db  58h ; X
.eh_frame:000000000001BED9                 db    8
.eh_frame:000000000001BEDA                 db    0
.eh_frame:000000000001BEDB                 db    0
.eh_frame:000000000001BEDC                 db 0C4h
.eh_frame:000000000001BEDD                 db 0C9h
.eh_frame:000000000001BEDE                 db 0FEh
.eh_frame:000000000001BEDF                 db 0FFh
.eh_frame:000000000001BEE0                 db  85h
.eh_frame:000000000001BEE1                 db    0
.eh_frame:000000000001BEE2                 db    0
.eh_frame:000000000001BEE3                 db    0
.eh_frame:000000000001BEE4                 db    0
.eh_frame:000000000001BEE5                 db  41h ; A
.eh_frame:000000000001BEE6                 db  0Eh
.eh_frame:000000000001BEE7                 db  10h
.eh_frame:000000000001BEE8                 db  86h
.eh_frame:000000000001BEE9                 db    2
.eh_frame:000000000001BEEA                 db  41h ; A
.eh_frame:000000000001BEEB                 db  0Eh
.eh_frame:000000000001BEEC                 db  18h
.eh_frame:000000000001BEED                 db  83h
.eh_frame:000000000001BEEE                 db    3
.eh_frame:000000000001BEEF                 db  52h ; R
.eh_frame:000000000001BEF0                 db  0Eh
.eh_frame:000000000001BEF1                 db 0D0h
.eh_frame:000000000001BEF2                 db  40h ; @
.eh_frame:000000000001BEF3                 db    2
.eh_frame:000000000001BEF4                 db  69h ; i
.eh_frame:000000000001BEF5                 db  0Ah
.eh_frame:000000000001BEF6                 db  0Eh
.eh_frame:000000000001BEF7                 db  18h
.eh_frame:000000000001BEF8                 db  41h ; A
.eh_frame:000000000001BEF9                 db  0Eh
.eh_frame:000000000001BEFA                 db  10h
.eh_frame:000000000001BEFB                 db  41h ; A
.eh_frame:000000000001BEFC                 db  0Eh
.eh_frame:000000000001BEFD                 db    8
.eh_frame:000000000001BEFE                 db  41h ; A
.eh_frame:000000000001BEFF                 db  0Bh
.eh_frame:000000000001BF00                 db  28h ; (
.eh_frame:000000000001BF01                 db    0
.eh_frame:000000000001BF02                 db    0
.eh_frame:000000000001BF03                 db    0
.eh_frame:000000000001BF04                 db  84h
.eh_frame:000000000001BF05                 db    8
.eh_frame:000000000001BF06                 db    0
.eh_frame:000000000001BF07                 db    0
.eh_frame:000000000001BF08                 db  28h ; (
.eh_frame:000000000001BF09                 db 0CAh
.eh_frame:000000000001BF0A                 db 0FEh
.eh_frame:000000000001BF0B                 db 0FFh
.eh_frame:000000000001BF0C                 db 0A7h
.eh_frame:000000000001BF0D                 db    1
.eh_frame:000000000001BF0E                 db    0
.eh_frame:000000000001BF0F                 db    0
.eh_frame:000000000001BF10                 db    0
.eh_frame:000000000001BF11                 db  41h ; A
.eh_frame:000000000001BF12                 db  0Eh
.eh_frame:000000000001BF13                 db  10h
.eh_frame:000000000001BF14                 db  86h
.eh_frame:000000000001BF15                 db    2
.eh_frame:000000000001BF16                 db  41h ; A
.eh_frame:000000000001BF17                 db  0Eh
.eh_frame:000000000001BF18                 db  18h
.eh_frame:000000000001BF19                 db  83h
.eh_frame:000000000001BF1A                 db    3
.eh_frame:000000000001BF1B                 db  4Ah ; J
.eh_frame:000000000001BF1C                 db  0Eh
.eh_frame:000000000001BF1D                 db 0C0h
.eh_frame:000000000001BF1E                 db    5
.eh_frame:000000000001BF1F                 db    2
.eh_frame:000000000001BF20                 db 0C4h
.eh_frame:000000000001BF21                 db  0Ah
.eh_frame:000000000001BF22                 db  0Eh
.eh_frame:000000000001BF23                 db  18h
.eh_frame:000000000001BF24                 db  41h ; A
.eh_frame:000000000001BF25                 db  0Eh
.eh_frame:000000000001BF26                 db  10h
.eh_frame:000000000001BF27                 db  41h ; A
.eh_frame:000000000001BF28                 db  0Eh
.eh_frame:000000000001BF29                 db    8
.eh_frame:000000000001BF2A                 db  46h ; F
.eh_frame:000000000001BF2B                 db  0Bh
.eh_frame:000000000001BF2C                 db  3Ch ; <
.eh_frame:000000000001BF2D                 db    0
.eh_frame:000000000001BF2E                 db    0
.eh_frame:000000000001BF2F                 db    0
.eh_frame:000000000001BF30                 db 0B0h
.eh_frame:000000000001BF31                 db    8
.eh_frame:000000000001BF32                 db    0
.eh_frame:000000000001BF33                 db    0
.eh_frame:000000000001BF34                 db 0ACh
.eh_frame:000000000001BF35                 db 0CBh
.eh_frame:000000000001BF36                 db 0FEh
.eh_frame:000000000001BF37                 db 0FFh
.eh_frame:000000000001BF38                 db    7
.eh_frame:000000000001BF39                 db    3
.eh_frame:000000000001BF3A                 db    0
.eh_frame:000000000001BF3B                 db    0
.eh_frame:000000000001BF3C                 db    0
.eh_frame:000000000001BF3D                 db  50h ; P
.eh_frame:000000000001BF3E                 db  0Eh
.eh_frame:000000000001BF3F                 db  10h
.eh_frame:000000000001BF40                 db  8Eh
.eh_frame:000000000001BF41                 db    2
.eh_frame:000000000001BF42                 db  42h ; B
.eh_frame:000000000001BF43                 db  0Eh
.eh_frame:000000000001BF44                 db  18h
.eh_frame:000000000001BF45                 db  8Dh
.eh_frame:000000000001BF46                 db    3
.eh_frame:000000000001BF47                 db  42h ; B
.eh_frame:000000000001BF48                 db  0Eh
.eh_frame:000000000001BF49                 db  20h
.eh_frame:000000000001BF4A                 db  8Ch
.eh_frame:000000000001BF4B                 db    4
.eh_frame:000000000001BF4C                 db  41h ; A
.eh_frame:000000000001BF4D                 db  0Eh
.eh_frame:000000000001BF4E                 db  28h ; (
.eh_frame:000000000001BF4F                 db  86h
.eh_frame:000000000001BF50                 db    5
.eh_frame:000000000001BF51                 db  47h ; G
.eh_frame:000000000001BF52                 db  0Eh
.eh_frame:000000000001BF53                 db  30h ; 0
.eh_frame:000000000001BF54                 db  83h
.eh_frame:000000000001BF55                 db    6
.eh_frame:000000000001BF56                 db    3
.eh_frame:000000000001BF57                 db  8Ch
.eh_frame:000000000001BF58                 db    2
.eh_frame:000000000001BF59                 db  0Ah
.eh_frame:000000000001BF5A                 db  0Eh
.eh_frame:000000000001BF5B                 db  28h ; (
.eh_frame:000000000001BF5C                 db  41h ; A
.eh_frame:000000000001BF5D                 db  0Eh
.eh_frame:000000000001BF5E                 db  20h
.eh_frame:000000000001BF5F                 db  42h ; B
.eh_frame:000000000001BF60                 db  0Eh
.eh_frame:000000000001BF61                 db  18h
.eh_frame:000000000001BF62                 db  42h ; B
.eh_frame:000000000001BF63                 db  0Eh
.eh_frame:000000000001BF64                 db  10h
.eh_frame:000000000001BF65                 db  42h ; B
.eh_frame:000000000001BF66                 db  0Eh
.eh_frame:000000000001BF67                 db    8
.eh_frame:000000000001BF68                 db  41h ; A
.eh_frame:000000000001BF69                 db  0Bh
.eh_frame:000000000001BF6A                 db    0
.eh_frame:000000000001BF6B                 db    0
.eh_frame:000000000001BF6C                 db  60h ; `
.eh_frame:000000000001BF6D                 db    0
.eh_frame:000000000001BF6E                 db    0
.eh_frame:000000000001BF6F                 db    0
.eh_frame:000000000001BF70                 db 0F0h
.eh_frame:000000000001BF71                 db    8
.eh_frame:000000000001BF72                 db    0
.eh_frame:000000000001BF73                 db    0
.eh_frame:000000000001BF74                 db  7Ch ; |
.eh_frame:000000000001BF75                 db 0CEh
.eh_frame:000000000001BF76                 db 0FEh
.eh_frame:000000000001BF77                 db 0FFh
.eh_frame:000000000001BF78                 db 0A8h
.eh_frame:000000000001BF79                 db    1
.eh_frame:000000000001BF7A                 db    0
.eh_frame:000000000001BF7B                 db    0
.eh_frame:000000000001BF7C                 db    0
.eh_frame:000000000001BF7D                 db  42h ; B
.eh_frame:000000000001BF7E                 db  0Eh
.eh_frame:000000000001BF7F                 db  10h
.eh_frame:000000000001BF80                 db  8Fh
.eh_frame:000000000001BF81                 db    2
.eh_frame:000000000001BF82                 db  42h ; B
.eh_frame:000000000001BF83                 db  0Eh
.eh_frame:000000000001BF84                 db  18h
.eh_frame:000000000001BF85                 db  8Eh
.eh_frame:000000000001BF86                 db    3
.eh_frame:000000000001BF87                 db  42h ; B
.eh_frame:000000000001BF88                 db  0Eh
.eh_frame:000000000001BF89                 db  20h
.eh_frame:000000000001BF8A                 db  8Dh
.eh_frame:000000000001BF8B                 db    4
.eh_frame:000000000001BF8C                 db  42h ; B
.eh_frame:000000000001BF8D                 db  0Eh
.eh_frame:000000000001BF8E                 db  28h ; (
.eh_frame:000000000001BF8F                 db  8Ch
.eh_frame:000000000001BF90                 db    5
.eh_frame:000000000001BF91                 db  41h ; A
.eh_frame:000000000001BF92                 db  0Eh
.eh_frame:000000000001BF93                 db  30h ; 0
.eh_frame:000000000001BF94                 db  86h
.eh_frame:000000000001BF95                 db    6
.eh_frame:000000000001BF96                 db  41h ; A
.eh_frame:000000000001BF97                 db  0Eh
.eh_frame:000000000001BF98                 db  38h ; 8
.eh_frame:000000000001BF99                 db  83h
.eh_frame:000000000001BF9A                 db    7
.eh_frame:000000000001BF9B                 db  44h ; D
.eh_frame:000000000001BF9C                 db  0Eh
.eh_frame:000000000001BF9D                 db  50h ; P
.eh_frame:000000000001BF9E                 db    3
.eh_frame:000000000001BF9F                 db  2Ah ; *
.eh_frame:000000000001BFA0                 db    1
.eh_frame:000000000001BFA1                 db  0Ah
.eh_frame:000000000001BFA2                 db  0Eh
.eh_frame:000000000001BFA3                 db  38h ; 8
.eh_frame:000000000001BFA4                 db  41h ; A
.eh_frame:000000000001BFA5                 db  0Eh
.eh_frame:000000000001BFA6                 db  30h ; 0
.eh_frame:000000000001BFA7                 db  41h ; A
.eh_frame:000000000001BFA8                 db  0Eh
.eh_frame:000000000001BFA9                 db  28h ; (
.eh_frame:000000000001BFAA                 db  42h ; B
.eh_frame:000000000001BFAB                 db  0Eh
.eh_frame:000000000001BFAC                 db  20h
.eh_frame:000000000001BFAD                 db  42h ; B
.eh_frame:000000000001BFAE                 db  0Eh
.eh_frame:000000000001BFAF                 db  18h
.eh_frame:000000000001BFB0                 db  42h ; B
.eh_frame:000000000001BFB1                 db  0Eh
.eh_frame:000000000001BFB2                 db  10h
.eh_frame:000000000001BFB3                 db  42h ; B
.eh_frame:000000000001BFB4                 db  0Eh
.eh_frame:000000000001BFB5                 db    8
.eh_frame:000000000001BFB6                 db  46h ; F
.eh_frame:000000000001BFB7                 db  0Bh
.eh_frame:000000000001BFB8                 db    2
.eh_frame:000000000001BFB9                 db  4Ch ; L
.eh_frame:000000000001BFBA                 db  0Eh
.eh_frame:000000000001BFBB                 db  38h ; 8
.eh_frame:000000000001BFBC                 db  46h ; F
.eh_frame:000000000001BFBD                 db  0Eh
.eh_frame:000000000001BFBE                 db  30h ; 0
.eh_frame:000000000001BFBF                 db  41h ; A
.eh_frame:000000000001BFC0                 db  0Eh
.eh_frame:000000000001BFC1                 db  28h ; (
.eh_frame:000000000001BFC2                 db  42h ; B
.eh_frame:000000000001BFC3                 db  0Eh
.eh_frame:000000000001BFC4                 db  20h
.eh_frame:000000000001BFC5                 db  42h ; B
.eh_frame:000000000001BFC6                 db  0Eh
.eh_frame:000000000001BFC7                 db  18h
.eh_frame:000000000001BFC8                 db  42h ; B
.eh_frame:000000000001BFC9                 db  0Eh
.eh_frame:000000000001BFCA                 db  10h
.eh_frame:000000000001BFCB                 db  42h ; B
.eh_frame:000000000001BFCC                 db  0Eh
.eh_frame:000000000001BFCD                 db    8
.eh_frame:000000000001BFCE                 db    0
.eh_frame:000000000001BFCF                 db    0
.eh_frame:000000000001BFD0                 db 0B8h
.eh_frame:000000000001BFD1                 db    0
.eh_frame:000000000001BFD2                 db    0
.eh_frame:000000000001BFD3                 db    0
.eh_frame:000000000001BFD4                 db  54h ; T
.eh_frame:000000000001BFD5                 db    9
.eh_frame:000000000001BFD6                 db    0
.eh_frame:000000000001BFD7                 db    0
.eh_frame:000000000001BFD8                 db 0C8h
.eh_frame:000000000001BFD9                 db 0CFh
.eh_frame:000000000001BFDA                 db 0FEh
.eh_frame:000000000001BFDB                 db 0FFh
.eh_frame:000000000001BFDC                 db 0DAh
.eh_frame:000000000001BFDD                 db    3
.eh_frame:000000000001BFDE                 db    0
.eh_frame:000000000001BFDF                 db    0
.eh_frame:000000000001BFE0                 db    0
.eh_frame:000000000001BFE1                 db  4Fh ; O
.eh_frame:000000000001BFE2                 db  0Eh
.eh_frame:000000000001BFE3                 db  10h
.eh_frame:000000000001BFE4                 db  8Fh
.eh_frame:000000000001BFE5                 db    2
.eh_frame:000000000001BFE6                 db  42h ; B
.eh_frame:000000000001BFE7                 db  0Eh
.eh_frame:000000000001BFE8                 db  18h
.eh_frame:000000000001BFE9                 db  8Eh
.eh_frame:000000000001BFEA                 db    3
.eh_frame:000000000001BFEB                 db  49h ; I
.eh_frame:000000000001BFEC                 db  0Eh
.eh_frame:000000000001BFED                 db  20h
.eh_frame:000000000001BFEE                 db  8Dh
.eh_frame:000000000001BFEF                 db    4
.eh_frame:000000000001BFF0                 db  42h ; B
.eh_frame:000000000001BFF1                 db  0Eh
.eh_frame:000000000001BFF2                 db  28h ; (
.eh_frame:000000000001BFF3                 db  8Ch
.eh_frame:000000000001BFF4                 db    5
.eh_frame:000000000001BFF5                 db  41h ; A
.eh_frame:000000000001BFF6                 db  0Eh
.eh_frame:000000000001BFF7                 db  30h ; 0
.eh_frame:000000000001BFF8                 db  86h
.eh_frame:000000000001BFF9                 db    6
.eh_frame:000000000001BFFA                 db  41h ; A
.eh_frame:000000000001BFFB                 db  0Eh
.eh_frame:000000000001BFFC                 db  38h ; 8
.eh_frame:000000000001BFFD                 db  83h
.eh_frame:000000000001BFFE                 db    7
.eh_frame:000000000001BFFF                 db  44h ; D
.eh_frame:000000000001C000                 db  0Eh
.eh_frame:000000000001C001                 db  70h ; p
.eh_frame:000000000001C002                 db    3
.eh_frame:000000000001C003                 db  17h
.eh_frame:000000000001C004                 db    1
.eh_frame:000000000001C005                 db  0Ah
.eh_frame:000000000001C006                 db  0Eh
.eh_frame:000000000001C007                 db  38h ; 8
.eh_frame:000000000001C008                 db  41h ; A
.eh_frame:000000000001C009                 db 0C3h
.eh_frame:000000000001C00A                 db  0Eh
.eh_frame:000000000001C00B                 db  30h ; 0
.eh_frame:000000000001C00C                 db  41h ; A
.eh_frame:000000000001C00D                 db 0C6h
.eh_frame:000000000001C00E                 db  0Eh
.eh_frame:000000000001C00F                 db  28h ; (
.eh_frame:000000000001C010                 db  42h ; B
.eh_frame:000000000001C011                 db 0CCh
.eh_frame:000000000001C012                 db  0Eh
.eh_frame:000000000001C013                 db  20h
.eh_frame:000000000001C014                 db  42h ; B
.eh_frame:000000000001C015                 db 0CDh
.eh_frame:000000000001C016                 db  0Eh
.eh_frame:000000000001C017                 db  18h
.eh_frame:000000000001C018                 db  42h ; B
.eh_frame:000000000001C019                 db 0CEh
.eh_frame:000000000001C01A                 db  0Eh
.eh_frame:000000000001C01B                 db  10h
.eh_frame:000000000001C01C                 db  42h ; B
.eh_frame:000000000001C01D                 db 0CFh
.eh_frame:000000000001C01E                 db  0Eh
.eh_frame:000000000001C01F                 db    8
.eh_frame:000000000001C020                 db  4Dh ; M
.eh_frame:000000000001C021                 db  0Bh
.eh_frame:000000000001C022                 db    2
.eh_frame:000000000001C023                 db  53h ; S
.eh_frame:000000000001C024                 db  0Ah
.eh_frame:000000000001C025                 db  0Eh
.eh_frame:000000000001C026                 db  38h ; 8
.eh_frame:000000000001C027                 db  41h ; A
.eh_frame:000000000001C028                 db  0Eh
.eh_frame:000000000001C029                 db  30h ; 0
.eh_frame:000000000001C02A                 db  41h ; A
.eh_frame:000000000001C02B                 db  0Eh
.eh_frame:000000000001C02C                 db  28h ; (
.eh_frame:000000000001C02D                 db  42h ; B
.eh_frame:000000000001C02E                 db  0Eh
.eh_frame:000000000001C02F                 db  20h
.eh_frame:000000000001C030                 db  42h ; B
.eh_frame:000000000001C031                 db  0Eh
.eh_frame:000000000001C032                 db  18h
.eh_frame:000000000001C033                 db  42h ; B
.eh_frame:000000000001C034                 db  0Eh
.eh_frame:000000000001C035                 db  10h
.eh_frame:000000000001C036                 db  42h ; B
.eh_frame:000000000001C037                 db  0Eh
.eh_frame:000000000001C038                 db    8
.eh_frame:000000000001C039                 db  43h ; C
.eh_frame:000000000001C03A                 db  0Bh
.eh_frame:000000000001C03B                 db    3
.eh_frame:000000000001C03C                 db  1Ch
.eh_frame:000000000001C03D                 db    1
.eh_frame:000000000001C03E                 db  0Ah
.eh_frame:000000000001C03F                 db  0Eh
.eh_frame:000000000001C040                 db  38h ; 8
.eh_frame:000000000001C041                 db  41h ; A
.eh_frame:000000000001C042                 db  0Eh
.eh_frame:000000000001C043                 db  30h ; 0
.eh_frame:000000000001C044                 db  41h ; A
.eh_frame:000000000001C045                 db  0Eh
.eh_frame:000000000001C046                 db  28h ; (
.eh_frame:000000000001C047                 db  42h ; B
.eh_frame:000000000001C048                 db  0Eh
.eh_frame:000000000001C049                 db  20h
.eh_frame:000000000001C04A                 db  42h ; B
.eh_frame:000000000001C04B                 db  0Eh
.eh_frame:000000000001C04C                 db  18h
.eh_frame:000000000001C04D                 db  42h ; B
.eh_frame:000000000001C04E                 db  0Eh
.eh_frame:000000000001C04F                 db  10h
.eh_frame:000000000001C050                 db  42h ; B
.eh_frame:000000000001C051                 db  0Eh
.eh_frame:000000000001C052                 db    8
.eh_frame:000000000001C053                 db  4Ah ; J
.eh_frame:000000000001C054                 db  0Bh
.eh_frame:000000000001C055                 db    2
.eh_frame:000000000001C056                 db  78h ; x
.eh_frame:000000000001C057                 db  0Eh
.eh_frame:000000000001C058                 db    8
.eh_frame:000000000001C059                 db 0C3h
.eh_frame:000000000001C05A                 db 0C6h
.eh_frame:000000000001C05B                 db 0CCh
.eh_frame:000000000001C05C                 db 0CDh
.eh_frame:000000000001C05D                 db 0CEh
.eh_frame:000000000001C05E                 db 0CFh
.eh_frame:000000000001C05F                 db  48h ; H
.eh_frame:000000000001C060                 db  0Eh
.eh_frame:000000000001C061                 db  70h ; p
.eh_frame:000000000001C062                 db  83h
.eh_frame:000000000001C063                 db    7
.eh_frame:000000000001C064                 db  86h
.eh_frame:000000000001C065                 db    6
.eh_frame:000000000001C066                 db  8Ch
.eh_frame:000000000001C067                 db    5
.eh_frame:000000000001C068                 db  8Dh
.eh_frame:000000000001C069                 db    4
.eh_frame:000000000001C06A                 db  8Eh
.eh_frame:000000000001C06B                 db    3
.eh_frame:000000000001C06C                 db  8Fh
.eh_frame:000000000001C06D                 db    2
.eh_frame:000000000001C06E                 db    2
.eh_frame:000000000001C06F                 db  66h ; f
.eh_frame:000000000001C070                 db  0Eh
.eh_frame:000000000001C071                 db  38h ; 8
.eh_frame:000000000001C072                 db  46h ; F
.eh_frame:000000000001C073                 db 0C3h
.eh_frame:000000000001C074                 db  0Eh
.eh_frame:000000000001C075                 db  30h ; 0
.eh_frame:000000000001C076                 db  41h ; A
.eh_frame:000000000001C077                 db 0C6h
.eh_frame:000000000001C078                 db  0Eh
.eh_frame:000000000001C079                 db  28h ; (
.eh_frame:000000000001C07A                 db  42h ; B
.eh_frame:000000000001C07B                 db 0CCh
.eh_frame:000000000001C07C                 db  0Eh
.eh_frame:000000000001C07D                 db  20h
.eh_frame:000000000001C07E                 db  42h ; B
.eh_frame:000000000001C07F                 db 0CDh
.eh_frame:000000000001C080                 db  0Eh
.eh_frame:000000000001C081                 db  18h
.eh_frame:000000000001C082                 db  42h ; B
.eh_frame:000000000001C083                 db 0CEh
.eh_frame:000000000001C084                 db  0Eh
.eh_frame:000000000001C085                 db  10h
.eh_frame:000000000001C086                 db  42h ; B
.eh_frame:000000000001C087                 db 0CFh
.eh_frame:000000000001C088                 db  0Eh
.eh_frame:000000000001C089                 db    8
.eh_frame:000000000001C08A                 db    0
.eh_frame:000000000001C08B                 db    0
.eh_frame:000000000001C08C                 db  10h
.eh_frame:000000000001C08D                 db    0
.eh_frame:000000000001C08E                 db    0
.eh_frame:000000000001C08F                 db    0
.eh_frame:000000000001C090                 db  10h
.eh_frame:000000000001C091                 db  0Ah
.eh_frame:000000000001C092                 db    0
.eh_frame:000000000001C093                 db    0
.eh_frame:000000000001C094                 db 0ECh
.eh_frame:000000000001C095                 db 0D2h
.eh_frame:000000000001C096                 db 0FEh
.eh_frame:000000000001C097                 db 0FFh
.eh_frame:000000000001C098                 db 0A8h
.eh_frame:000000000001C099                 db    0
.eh_frame:000000000001C09A                 db    0
.eh_frame:000000000001C09B                 db    0
.eh_frame:000000000001C09C                 db    0
.eh_frame:000000000001C09D                 db    0
.eh_frame:000000000001C09E                 db    0
.eh_frame:000000000001C09F                 db    0
.eh_frame:000000000001C0A0                 db  10h
.eh_frame:000000000001C0A1                 db    0
.eh_frame:000000000001C0A2                 db    0
.eh_frame:000000000001C0A3                 db    0
.eh_frame:000000000001C0A4                 db  24h ; $
.eh_frame:000000000001C0A5                 db  0Ah
.eh_frame:000000000001C0A6                 db    0
.eh_frame:000000000001C0A7                 db    0
.eh_frame:000000000001C0A8                 db  88h
.eh_frame:000000000001C0A9                 db 0D3h
.eh_frame:000000000001C0AA                 db 0FEh
.eh_frame:000000000001C0AB                 db 0FFh
.eh_frame:000000000001C0AC                 db 0B4h
.eh_frame:000000000001C0AD                 db    0
.eh_frame:000000000001C0AE                 db    0
.eh_frame:000000000001C0AF                 db    0
.eh_frame:000000000001C0B0                 db    0
.eh_frame:000000000001C0B1                 db    0
.eh_frame:000000000001C0B2                 db    0
.eh_frame:000000000001C0B3                 db    0
.eh_frame:000000000001C0B4                 db  28h ; (
.eh_frame:000000000001C0B5                 db    0
.eh_frame:000000000001C0B6                 db    0
.eh_frame:000000000001C0B7                 db    0
.eh_frame:000000000001C0B8                 db  38h ; 8
.eh_frame:000000000001C0B9                 db  0Ah
.eh_frame:000000000001C0BA                 db    0
.eh_frame:000000000001C0BB                 db    0
.eh_frame:000000000001C0BC                 db  34h ; 4
.eh_frame:000000000001C0BD                 db 0D4h
.eh_frame:000000000001C0BE                 db 0FEh
.eh_frame:000000000001C0BF                 db 0FFh
.eh_frame:000000000001C0C0                 db 0C9h
.eh_frame:000000000001C0C1                 db    0
.eh_frame:000000000001C0C2                 db    0
.eh_frame:000000000001C0C3                 db    0
.eh_frame:000000000001C0C4                 db    0
.eh_frame:000000000001C0C5                 db  49h ; I
.eh_frame:000000000001C0C6                 db  0Eh
.eh_frame:000000000001C0C7                 db  10h
.eh_frame:000000000001C0C8                 db  8Ch
.eh_frame:000000000001C0C9                 db    2
.eh_frame:000000000001C0CA                 db  41h ; A
.eh_frame:000000000001C0CB                 db  0Eh
.eh_frame:000000000001C0CC                 db  18h
.eh_frame:000000000001C0CD                 db  86h
.eh_frame:000000000001C0CE                 db    3
.eh_frame:000000000001C0CF                 db  41h ; A
.eh_frame:000000000001C0D0                 db  0Eh
.eh_frame:000000000001C0D1                 db  20h
.eh_frame:000000000001C0D2                 db  83h
.eh_frame:000000000001C0D3                 db    4
.eh_frame:000000000001C0D4                 db  7Dh ; }
.eh_frame:000000000001C0D5                 db  0Eh
.eh_frame:000000000001C0D6                 db  18h
.eh_frame:000000000001C0D7                 db  53h ; S
.eh_frame:000000000001C0D8                 db  0Eh
.eh_frame:000000000001C0D9                 db  10h
.eh_frame:000000000001C0DA                 db    2
.eh_frame:000000000001C0DB                 db  6Dh ; m
.eh_frame:000000000001C0DC                 db  0Eh
.eh_frame:000000000001C0DD                 db    8
.eh_frame:000000000001C0DE                 db    0
.eh_frame:000000000001C0DF                 db    0
.eh_frame:000000000001C0E0                 db  28h ; (
.eh_frame:000000000001C0E1                 db    0
.eh_frame:000000000001C0E2                 db    0
.eh_frame:000000000001C0E3                 db    0
.eh_frame:000000000001C0E4                 db  64h ; d
.eh_frame:000000000001C0E5                 db  0Ah
.eh_frame:000000000001C0E6                 db    0
.eh_frame:000000000001C0E7                 db    0
.eh_frame:000000000001C0E8                 db 0D8h
.eh_frame:000000000001C0E9                 db 0D4h
.eh_frame:000000000001C0EA                 db 0FEh
.eh_frame:000000000001C0EB                 db 0FFh
.eh_frame:000000000001C0EC                 db 0C1h
.eh_frame:000000000001C0ED                 db    0
.eh_frame:000000000001C0EE                 db    0
.eh_frame:000000000001C0EF                 db    0
.eh_frame:000000000001C0F0                 db    0
.eh_frame:000000000001C0F1                 db  41h ; A
.eh_frame:000000000001C0F2                 db  0Eh
.eh_frame:000000000001C0F3                 db  10h
.eh_frame:000000000001C0F4                 db  86h
.eh_frame:000000000001C0F5                 db    2
.eh_frame:000000000001C0F6                 db  41h ; A
.eh_frame:000000000001C0F7                 db  0Eh
.eh_frame:000000000001C0F8                 db  18h
.eh_frame:000000000001C0F9                 db  83h
.eh_frame:000000000001C0FA                 db    3
.eh_frame:000000000001C0FB                 db  46h ; F
.eh_frame:000000000001C0FC                 db  0Eh
.eh_frame:000000000001C0FD                 db  40h ; @
.eh_frame:000000000001C0FE                 db    2
.eh_frame:000000000001C0FF                 db  8Ah
.eh_frame:000000000001C100                 db  0Ah
.eh_frame:000000000001C101                 db  0Eh
.eh_frame:000000000001C102                 db  18h
.eh_frame:000000000001C103                 db  41h ; A
.eh_frame:000000000001C104                 db  0Eh
.eh_frame:000000000001C105                 db  10h
.eh_frame:000000000001C106                 db  41h ; A
.eh_frame:000000000001C107                 db  0Eh
.eh_frame:000000000001C108                 db    8
.eh_frame:000000000001C109                 db  44h ; D
.eh_frame:000000000001C10A                 db  0Bh
.eh_frame:000000000001C10B                 db    0
.eh_frame:000000000001C10C                 db  2Ch ; ,
.eh_frame:000000000001C10D                 db    0
.eh_frame:000000000001C10E                 db    0
.eh_frame:000000000001C10F                 db    0
.eh_frame:000000000001C110                 db  90h
.eh_frame:000000000001C111                 db  0Ah
.eh_frame:000000000001C112                 db    0
.eh_frame:000000000001C113                 db    0
.eh_frame:000000000001C114                 db  7Ch ; |
.eh_frame:000000000001C115                 db 0D5h
.eh_frame:000000000001C116                 db 0FEh
.eh_frame:000000000001C117                 db 0FFh
.eh_frame:000000000001C118                 db  58h ; X
.eh_frame:000000000001C119                 db  0Dh
.eh_frame:000000000001C11A                 db    0
.eh_frame:000000000001C11B                 db    0
.eh_frame:000000000001C11C                 db    0
.eh_frame:000000000001C11D                 db  41h ; A
.eh_frame:000000000001C11E                 db  0Eh
.eh_frame:000000000001C11F                 db  10h
.eh_frame:000000000001C120                 db  86h
.eh_frame:000000000001C121                 db    2
.eh_frame:000000000001C122                 db  43h ; C
.eh_frame:000000000001C123                 db  0Dh
.eh_frame:000000000001C124                 db    6
.eh_frame:000000000001C125                 db  48h ; H
.eh_frame:000000000001C126                 db  8Fh
.eh_frame:000000000001C127                 db    3
.eh_frame:000000000001C128                 db  8Eh
.eh_frame:000000000001C129                 db    4
.eh_frame:000000000001C12A                 db  8Dh
.eh_frame:000000000001C12B                 db    5
.eh_frame:000000000001C12C                 db  8Ch
.eh_frame:000000000001C12D                 db    6
.eh_frame:000000000001C12E                 db  51h ; Q
.eh_frame:000000000001C12F                 db  83h
.eh_frame:000000000001C130                 db    7
.eh_frame:000000000001C131                 db    3
.eh_frame:000000000001C132                 db    8
.eh_frame:000000000001C133                 db    3
.eh_frame:000000000001C134                 db  0Ah
.eh_frame:000000000001C135                 db  0Ch
.eh_frame:000000000001C136                 db    7
.eh_frame:000000000001C137                 db    8
.eh_frame:000000000001C138                 db  4Bh ; K
.eh_frame:000000000001C139                 db  0Bh
.eh_frame:000000000001C13A                 db    0
.eh_frame:000000000001C13B                 db    0
.eh_frame:000000000001C13C                 db  5Ch ; \
.eh_frame:000000000001C13D                 db    0
.eh_frame:000000000001C13E                 db    0
.eh_frame:000000000001C13F                 db    0
.eh_frame:000000000001C140                 db 0C0h
.eh_frame:000000000001C141                 db  0Ah
.eh_frame:000000000001C142                 db    0
.eh_frame:000000000001C143                 db    0
.eh_frame:000000000001C144                 db 0ACh
.eh_frame:000000000001C145                 db 0E2h
.eh_frame:000000000001C146                 db 0FEh
.eh_frame:000000000001C147                 db 0FFh
.eh_frame:000000000001C148                 db 0B4h
.eh_frame:000000000001C149                 db    6
.eh_frame:000000000001C14A                 db    0
.eh_frame:000000000001C14B                 db    0
.eh_frame:000000000001C14C                 db    0
.eh_frame:000000000001C14D                 db  42h ; B
.eh_frame:000000000001C14E                 db  0Eh
.eh_frame:000000000001C14F                 db  10h
.eh_frame:000000000001C150                 db  8Fh
.eh_frame:000000000001C151                 db    2
.eh_frame:000000000001C152                 db  42h ; B
.eh_frame:000000000001C153                 db  0Eh
.eh_frame:000000000001C154                 db  18h
.eh_frame:000000000001C155                 db  8Eh
.eh_frame:000000000001C156                 db    3
.eh_frame:000000000001C157                 db  45h ; E
.eh_frame:000000000001C158                 db  0Eh
.eh_frame:000000000001C159                 db  20h
.eh_frame:000000000001C15A                 db  8Dh
.eh_frame:000000000001C15B                 db    4
.eh_frame:000000000001C15C                 db  42h ; B
.eh_frame:000000000001C15D                 db  0Eh
.eh_frame:000000000001C15E                 db  28h ; (
.eh_frame:000000000001C15F                 db  8Ch
.eh_frame:000000000001C160                 db    5
.eh_frame:000000000001C161                 db  41h ; A
.eh_frame:000000000001C162                 db  0Eh
.eh_frame:000000000001C163                 db  30h ; 0
.eh_frame:000000000001C164                 db  86h
.eh_frame:000000000001C165                 db    6
.eh_frame:000000000001C166                 db  41h ; A
.eh_frame:000000000001C167                 db  0Eh
.eh_frame:000000000001C168                 db  38h ; 8
.eh_frame:000000000001C169                 db  83h
.eh_frame:000000000001C16A                 db    7
.eh_frame:000000000001C16B                 db  4Ah ; J
.eh_frame:000000000001C16C                 db  0Eh
.eh_frame:000000000001C16D                 db  80h
.eh_frame:000000000001C16E                 db    7
.eh_frame:000000000001C16F                 db    2
.eh_frame:000000000001C170                 db 0B8h
.eh_frame:000000000001C171                 db  0Ah
.eh_frame:000000000001C172                 db  0Eh
.eh_frame:000000000001C173                 db  38h ; 8
.eh_frame:000000000001C174                 db  41h ; A
.eh_frame:000000000001C175                 db  0Eh
.eh_frame:000000000001C176                 db  30h ; 0
.eh_frame:000000000001C177                 db  41h ; A
.eh_frame:000000000001C178                 db  0Eh
.eh_frame:000000000001C179                 db  28h ; (
.eh_frame:000000000001C17A                 db  42h ; B
.eh_frame:000000000001C17B                 db  0Eh
.eh_frame:000000000001C17C                 db  20h
.eh_frame:000000000001C17D                 db  42h ; B
.eh_frame:000000000001C17E                 db  0Eh
.eh_frame:000000000001C17F                 db  18h
.eh_frame:000000000001C180                 db  42h ; B
.eh_frame:000000000001C181                 db  0Eh
.eh_frame:000000000001C182                 db  10h
.eh_frame:000000000001C183                 db  42h ; B
.eh_frame:000000000001C184                 db  0Eh
.eh_frame:000000000001C185                 db    8
.eh_frame:000000000001C186                 db  47h ; G
.eh_frame:000000000001C187                 db  0Bh
.eh_frame:000000000001C188                 db    3
.eh_frame:000000000001C189                 db  1Dh
.eh_frame:000000000001C18A                 db    2
.eh_frame:000000000001C18B                 db  0Eh
.eh_frame:000000000001C18C                 db  88h
.eh_frame:000000000001C18D                 db    7
.eh_frame:000000000001C18E                 db  47h ; G
.eh_frame:000000000001C18F                 db  0Eh
.eh_frame:000000000001C190                 db  90h
.eh_frame:000000000001C191                 db    7
.eh_frame:000000000001C192                 db  75h ; u
.eh_frame:000000000001C193                 db  0Eh
.eh_frame:000000000001C194                 db  88h
.eh_frame:000000000001C195                 db    7
.eh_frame:000000000001C196                 db  49h ; I
.eh_frame:000000000001C197                 db  0Eh
.eh_frame:000000000001C198                 db  80h
.eh_frame:000000000001C199                 db    7
.eh_frame:000000000001C19A                 db    0
.eh_frame:000000000001C19B                 db    0
.eh_frame:000000000001C19C                 db  10h
.eh_frame:000000000001C19D                 db    0
.eh_frame:000000000001C19E                 db    0
.eh_frame:000000000001C19F                 db    0
.eh_frame:000000000001C1A0                 db  20h
.eh_frame:000000000001C1A1                 db  0Bh
.eh_frame:000000000001C1A2                 db    0
.eh_frame:000000000001C1A3                 db    0
.eh_frame:000000000001C1A4                 db  0Ch
.eh_frame:000000000001C1A5                 db 0E9h
.eh_frame:000000000001C1A6                 db 0FEh
.eh_frame:000000000001C1A7                 db 0FFh
.eh_frame:000000000001C1A8                 db  46h ; F
.eh_frame:000000000001C1A9                 db    0
.eh_frame:000000000001C1AA                 db    0
.eh_frame:000000000001C1AB                 db    0
.eh_frame:000000000001C1AC                 db    0
.eh_frame:000000000001C1AD                 db    0
.eh_frame:000000000001C1AE                 db    0
.eh_frame:000000000001C1AF                 db    0
.eh_frame:000000000001C1B0                 db  10h
.eh_frame:000000000001C1B1                 db    0
.eh_frame:000000000001C1B2                 db    0
.eh_frame:000000000001C1B3                 db    0
.eh_frame:000000000001C1B4                 db  34h ; 4
.eh_frame:000000000001C1B5                 db  0Bh
.eh_frame:000000000001C1B6                 db    0
.eh_frame:000000000001C1B7                 db    0
.eh_frame:000000000001C1B8                 db  48h ; H
.eh_frame:000000000001C1B9                 db 0E9h
.eh_frame:000000000001C1BA                 db 0FEh
.eh_frame:000000000001C1BB                 db 0FFh
.eh_frame:000000000001C1BC                 db  36h ; 6
.eh_frame:000000000001C1BD                 db    0
.eh_frame:000000000001C1BE                 db    0
.eh_frame:000000000001C1BF                 db    0
.eh_frame:000000000001C1C0                 db    0
.eh_frame:000000000001C1C1                 db    0
.eh_frame:000000000001C1C2                 db    0
.eh_frame:000000000001C1C3                 db    0
.eh_frame:000000000001C1C4                 db  10h
.eh_frame:000000000001C1C5                 db    0
.eh_frame:000000000001C1C6                 db    0
.eh_frame:000000000001C1C7                 db    0
.eh_frame:000000000001C1C8                 db  48h ; H
.eh_frame:000000000001C1C9                 db  0Bh
.eh_frame:000000000001C1CA                 db    0
.eh_frame:000000000001C1CB                 db    0
.eh_frame:000000000001C1CC                 db  74h ; t
.eh_frame:000000000001C1CD                 db 0E9h
.eh_frame:000000000001C1CE                 db 0FEh
.eh_frame:000000000001C1CF                 db 0FFh
.eh_frame:000000000001C1D0                 db  36h ; 6
.eh_frame:000000000001C1D1                 db    0
.eh_frame:000000000001C1D2                 db    0
.eh_frame:000000000001C1D3                 db    0
.eh_frame:000000000001C1D4                 db    0
.eh_frame:000000000001C1D5                 db    0
.eh_frame:000000000001C1D6                 db    0
.eh_frame:000000000001C1D7                 db    0
.eh_frame:000000000001C1D8                 db  10h
.eh_frame:000000000001C1D9                 db    0
.eh_frame:000000000001C1DA                 db    0
.eh_frame:000000000001C1DB                 db    0
.eh_frame:000000000001C1DC                 db  5Ch ; \
.eh_frame:000000000001C1DD                 db  0Bh
.eh_frame:000000000001C1DE                 db    0
.eh_frame:000000000001C1DF                 db    0
.eh_frame:000000000001C1E0                 db 0A0h
.eh_frame:000000000001C1E1                 db 0E9h
.eh_frame:000000000001C1E2                 db 0FEh
.eh_frame:000000000001C1E3                 db 0FFh
.eh_frame:000000000001C1E4                 db  36h ; 6
.eh_frame:000000000001C1E5                 db    0
.eh_frame:000000000001C1E6                 db    0
.eh_frame:000000000001C1E7                 db    0
.eh_frame:000000000001C1E8                 db    0
.eh_frame:000000000001C1E9                 db    0
.eh_frame:000000000001C1EA                 db    0
.eh_frame:000000000001C1EB                 db    0
.eh_frame:000000000001C1EC                 db  10h
.eh_frame:000000000001C1ED                 db    0
.eh_frame:000000000001C1EE                 db    0
.eh_frame:000000000001C1EF                 db    0
.eh_frame:000000000001C1F0                 db  70h ; p
.eh_frame:000000000001C1F1                 db  0Bh
.eh_frame:000000000001C1F2                 db    0
.eh_frame:000000000001C1F3                 db    0
.eh_frame:000000000001C1F4                 db 0CCh
.eh_frame:000000000001C1F5                 db 0E9h
.eh_frame:000000000001C1F6                 db 0FEh
.eh_frame:000000000001C1F7                 db 0FFh
.eh_frame:000000000001C1F8                 db  36h ; 6
.eh_frame:000000000001C1F9                 db    0
.eh_frame:000000000001C1FA                 db    0
.eh_frame:000000000001C1FB                 db    0
.eh_frame:000000000001C1FC                 db    0
.eh_frame:000000000001C1FD                 db    0
.eh_frame:000000000001C1FE                 db    0
.eh_frame:000000000001C1FF                 db    0
.eh_frame:000000000001C200                 db  10h
.eh_frame:000000000001C201                 db    0
.eh_frame:000000000001C202                 db    0
.eh_frame:000000000001C203                 db    0
.eh_frame:000000000001C204                 db  84h
.eh_frame:000000000001C205                 db  0Bh
.eh_frame:000000000001C206                 db    0
.eh_frame:000000000001C207                 db    0
.eh_frame:000000000001C208                 db 0F8h
.eh_frame:000000000001C209                 db 0E9h
.eh_frame:000000000001C20A                 db 0FEh
.eh_frame:000000000001C20B                 db 0FFh
.eh_frame:000000000001C20C                 db  46h ; F
.eh_frame:000000000001C20D                 db    0
.eh_frame:000000000001C20E                 db    0
.eh_frame:000000000001C20F                 db    0
.eh_frame:000000000001C210                 db    0
.eh_frame:000000000001C211                 db    0
.eh_frame:000000000001C212                 db    0
.eh_frame:000000000001C213                 db    0
.eh_frame:000000000001C214                 db  34h ; 4
.eh_frame:000000000001C215                 db    0
.eh_frame:000000000001C216                 db    0
.eh_frame:000000000001C217                 db    0
.eh_frame:000000000001C218                 db  98h
.eh_frame:000000000001C219                 db  0Bh
.eh_frame:000000000001C21A                 db    0
.eh_frame:000000000001C21B                 db    0
.eh_frame:000000000001C21C                 db  34h ; 4
.eh_frame:000000000001C21D                 db 0EAh
.eh_frame:000000000001C21E                 db 0FEh
.eh_frame:000000000001C21F                 db 0FFh
.eh_frame:000000000001C220                 db  65h ; e
.eh_frame:000000000001C221                 db    0
.eh_frame:000000000001C222                 db    0
.eh_frame:000000000001C223                 db    0
.eh_frame:000000000001C224                 db    0
.eh_frame:000000000001C225                 db  42h ; B
.eh_frame:000000000001C226                 db  0Eh
.eh_frame:000000000001C227                 db  10h
.eh_frame:000000000001C228                 db  8Ch
.eh_frame:000000000001C229                 db    2
.eh_frame:000000000001C22A                 db  41h ; A
.eh_frame:000000000001C22B                 db  0Eh
.eh_frame:000000000001C22C                 db  18h
.eh_frame:000000000001C22D                 db  86h
.eh_frame:000000000001C22E                 db    3
.eh_frame:000000000001C22F                 db  44h ; D
.eh_frame:000000000001C230                 db  0Eh
.eh_frame:000000000001C231                 db  20h
.eh_frame:000000000001C232                 db  83h
.eh_frame:000000000001C233                 db    4
.eh_frame:000000000001C234                 db    2
.eh_frame:000000000001C235                 db  46h ; F
.eh_frame:000000000001C236                 db  0Ah
.eh_frame:000000000001C237                 db  0Eh
.eh_frame:000000000001C238                 db  18h
.eh_frame:000000000001C239                 db  49h ; I
.eh_frame:000000000001C23A                 db  0Eh
.eh_frame:000000000001C23B                 db  10h
.eh_frame:000000000001C23C                 db  42h ; B
.eh_frame:000000000001C23D                 db  0Eh
.eh_frame:000000000001C23E                 db    8
.eh_frame:000000000001C23F                 db  48h ; H
.eh_frame:000000000001C240                 db  0Bh
.eh_frame:000000000001C241                 db  41h ; A
.eh_frame:000000000001C242                 db  0Eh
.eh_frame:000000000001C243                 db  18h
.eh_frame:000000000001C244                 db  41h ; A
.eh_frame:000000000001C245                 db  0Eh
.eh_frame:000000000001C246                 db  10h
.eh_frame:000000000001C247                 db  42h ; B
.eh_frame:000000000001C248                 db  0Eh
.eh_frame:000000000001C249                 db    8
.eh_frame:000000000001C24A                 db    0
.eh_frame:000000000001C24B                 db    0
.eh_frame:000000000001C24C                 db  34h ; 4
.eh_frame:000000000001C24D                 db    0
.eh_frame:000000000001C24E                 db    0
.eh_frame:000000000001C24F                 db    0
.eh_frame:000000000001C250                 db 0D0h
.eh_frame:000000000001C251                 db  0Bh
.eh_frame:000000000001C252                 db    0
.eh_frame:000000000001C253                 db    0
.eh_frame:000000000001C254                 db  6Ch ; l
.eh_frame:000000000001C255                 db 0EAh
.eh_frame:000000000001C256                 db 0FEh
.eh_frame:000000000001C257                 db 0FFh
.eh_frame:000000000001C258                 db  65h ; e
.eh_frame:000000000001C259                 db    0
.eh_frame:000000000001C25A                 db    0
.eh_frame:000000000001C25B                 db    0
.eh_frame:000000000001C25C                 db    0
.eh_frame:000000000001C25D                 db  42h ; B
.eh_frame:000000000001C25E                 db  0Eh
.eh_frame:000000000001C25F                 db  10h
.eh_frame:000000000001C260                 db  8Ch
.eh_frame:000000000001C261                 db    2
.eh_frame:000000000001C262                 db  41h ; A
.eh_frame:000000000001C263                 db  0Eh
.eh_frame:000000000001C264                 db  18h
.eh_frame:000000000001C265                 db  86h
.eh_frame:000000000001C266                 db    3
.eh_frame:000000000001C267                 db  44h ; D
.eh_frame:000000000001C268                 db  0Eh
.eh_frame:000000000001C269                 db  20h
.eh_frame:000000000001C26A                 db  83h
.eh_frame:000000000001C26B                 db    4
.eh_frame:000000000001C26C                 db    2
.eh_frame:000000000001C26D                 db  47h ; G
.eh_frame:000000000001C26E                 db  0Ah
.eh_frame:000000000001C26F                 db  0Eh
.eh_frame:000000000001C270                 db  18h
.eh_frame:000000000001C271                 db  49h ; I
.eh_frame:000000000001C272                 db  0Eh
.eh_frame:000000000001C273                 db  10h
.eh_frame:000000000001C274                 db  42h ; B
.eh_frame:000000000001C275                 db  0Eh
.eh_frame:000000000001C276                 db    8
.eh_frame:000000000001C277                 db  47h ; G
.eh_frame:000000000001C278                 db  0Bh
.eh_frame:000000000001C279                 db  41h ; A
.eh_frame:000000000001C27A                 db  0Eh
.eh_frame:000000000001C27B                 db  18h
.eh_frame:000000000001C27C                 db  41h ; A
.eh_frame:000000000001C27D                 db  0Eh
.eh_frame:000000000001C27E                 db  10h
.eh_frame:000000000001C27F                 db  42h ; B
.eh_frame:000000000001C280                 db  0Eh
.eh_frame:000000000001C281                 db    8
.eh_frame:000000000001C282                 db    0
.eh_frame:000000000001C283                 db    0
.eh_frame:000000000001C284                 db  10h
.eh_frame:000000000001C285                 db    0
.eh_frame:000000000001C286                 db    0
.eh_frame:000000000001C287                 db    0
.eh_frame:000000000001C288                 db    8
.eh_frame:000000000001C289                 db  0Ch
.eh_frame:000000000001C28A                 db    0
.eh_frame:000000000001C28B                 db    0
.eh_frame:000000000001C28C                 db 0A4h
.eh_frame:000000000001C28D                 db 0EAh
.eh_frame:000000000001C28E                 db 0FEh
.eh_frame:000000000001C28F                 db 0FFh
.eh_frame:000000000001C290                 db  36h ; 6
.eh_frame:000000000001C291                 db    0
.eh_frame:000000000001C292                 db    0
.eh_frame:000000000001C293                 db    0
.eh_frame:000000000001C294                 db    0
.eh_frame:000000000001C295                 db    0
.eh_frame:000000000001C296                 db    0
.eh_frame:000000000001C297                 db    0
.eh_frame:000000000001C298                 db  10h
.eh_frame:000000000001C299                 db    0
.eh_frame:000000000001C29A                 db    0
.eh_frame:000000000001C29B                 db    0
.eh_frame:000000000001C29C                 db  1Ch
.eh_frame:000000000001C29D                 db  0Ch
.eh_frame:000000000001C29E                 db    0
.eh_frame:000000000001C29F                 db    0
.eh_frame:000000000001C2A0                 db 0D0h
.eh_frame:000000000001C2A1                 db 0EAh
.eh_frame:000000000001C2A2                 db 0FEh
.eh_frame:000000000001C2A3                 db 0FFh
.eh_frame:000000000001C2A4                 db  36h ; 6
.eh_frame:000000000001C2A5                 db    0
.eh_frame:000000000001C2A6                 db    0
.eh_frame:000000000001C2A7                 db    0
.eh_frame:000000000001C2A8                 db    0
.eh_frame:000000000001C2A9                 db    0
.eh_frame:000000000001C2AA                 db    0
.eh_frame:000000000001C2AB                 db    0
.eh_frame:000000000001C2AC                 db  10h
.eh_frame:000000000001C2AD                 db    0
.eh_frame:000000000001C2AE                 db    0
.eh_frame:000000000001C2AF                 db    0
.eh_frame:000000000001C2B0                 db  30h ; 0
.eh_frame:000000000001C2B1                 db  0Ch
.eh_frame:000000000001C2B2                 db    0
.eh_frame:000000000001C2B3                 db    0
.eh_frame:000000000001C2B4                 db 0FCh
.eh_frame:000000000001C2B5                 db 0EAh
.eh_frame:000000000001C2B6                 db 0FEh
.eh_frame:000000000001C2B7                 db 0FFh
.eh_frame:000000000001C2B8                 db  46h ; F
.eh_frame:000000000001C2B9                 db    0
.eh_frame:000000000001C2BA                 db    0
.eh_frame:000000000001C2BB                 db    0
.eh_frame:000000000001C2BC                 db    0
.eh_frame:000000000001C2BD                 db    0
.eh_frame:000000000001C2BE                 db    0
.eh_frame:000000000001C2BF                 db    0
.eh_frame:000000000001C2C0                 db  10h
.eh_frame:000000000001C2C1                 db    0
.eh_frame:000000000001C2C2                 db    0
.eh_frame:000000000001C2C3                 db    0
.eh_frame:000000000001C2C4                 db  44h ; D
.eh_frame:000000000001C2C5                 db  0Ch
.eh_frame:000000000001C2C6                 db    0
.eh_frame:000000000001C2C7                 db    0
.eh_frame:000000000001C2C8                 db  38h ; 8
.eh_frame:000000000001C2C9                 db 0EBh
.eh_frame:000000000001C2CA                 db 0FEh
.eh_frame:000000000001C2CB                 db 0FFh
.eh_frame:000000000001C2CC                 db  36h ; 6
.eh_frame:000000000001C2CD                 db    0
.eh_frame:000000000001C2CE                 db    0
.eh_frame:000000000001C2CF                 db    0
.eh_frame:000000000001C2D0                 db    0
.eh_frame:000000000001C2D1                 db    0
.eh_frame:000000000001C2D2                 db    0
.eh_frame:000000000001C2D3                 db    0
.eh_frame:000000000001C2D4                 db  10h
.eh_frame:000000000001C2D5                 db    0
.eh_frame:000000000001C2D6                 db    0
.eh_frame:000000000001C2D7                 db    0
.eh_frame:000000000001C2D8                 db  58h ; X
.eh_frame:000000000001C2D9                 db  0Ch
.eh_frame:000000000001C2DA                 db    0
.eh_frame:000000000001C2DB                 db    0
.eh_frame:000000000001C2DC                 db  64h ; d
.eh_frame:000000000001C2DD                 db 0EBh
.eh_frame:000000000001C2DE                 db 0FEh
.eh_frame:000000000001C2DF                 db 0FFh
.eh_frame:000000000001C2E0                 db  36h ; 6
.eh_frame:000000000001C2E1                 db    0
.eh_frame:000000000001C2E2                 db    0
.eh_frame:000000000001C2E3                 db    0
.eh_frame:000000000001C2E4                 db    0
.eh_frame:000000000001C2E5                 db    0
.eh_frame:000000000001C2E6                 db    0
.eh_frame:000000000001C2E7                 db    0
.eh_frame:000000000001C2E8                 db  10h
.eh_frame:000000000001C2E9                 db    0
.eh_frame:000000000001C2EA                 db    0
.eh_frame:000000000001C2EB                 db    0
.eh_frame:000000000001C2EC                 db  6Ch ; l
.eh_frame:000000000001C2ED                 db  0Ch
.eh_frame:000000000001C2EE                 db    0
.eh_frame:000000000001C2EF                 db    0
.eh_frame:000000000001C2F0                 db  90h
.eh_frame:000000000001C2F1                 db 0EBh
.eh_frame:000000000001C2F2                 db 0FEh
.eh_frame:000000000001C2F3                 db 0FFh
.eh_frame:000000000001C2F4                 db  46h ; F
.eh_frame:000000000001C2F5                 db    0
.eh_frame:000000000001C2F6                 db    0
.eh_frame:000000000001C2F7                 db    0
.eh_frame:000000000001C2F8                 db    0
.eh_frame:000000000001C2F9                 db    0
.eh_frame:000000000001C2FA                 db    0
.eh_frame:000000000001C2FB                 db    0
.eh_frame:000000000001C2FC                 db  10h
.eh_frame:000000000001C2FD                 db    0
.eh_frame:000000000001C2FE                 db    0
.eh_frame:000000000001C2FF                 db    0
.eh_frame:000000000001C300                 db  80h
.eh_frame:000000000001C301                 db  0Ch
.eh_frame:000000000001C302                 db    0
.eh_frame:000000000001C303                 db    0
.eh_frame:000000000001C304                 db 0CCh
.eh_frame:000000000001C305                 db 0EBh
.eh_frame:000000000001C306                 db 0FEh
.eh_frame:000000000001C307                 db 0FFh
.eh_frame:000000000001C308                 db 0A8h
.eh_frame:000000000001C309                 db    0
.eh_frame:000000000001C30A                 db    0
.eh_frame:000000000001C30B                 db    0
.eh_frame:000000000001C30C                 db    0
.eh_frame:000000000001C30D                 db    0
.eh_frame:000000000001C30E                 db    0
.eh_frame:000000000001C30F                 db    0
.eh_frame:000000000001C310                 db  10h
.eh_frame:000000000001C311                 db    0
.eh_frame:000000000001C312                 db    0
.eh_frame:000000000001C313                 db    0
.eh_frame:000000000001C314                 db  94h
.eh_frame:000000000001C315                 db  0Ch
.eh_frame:000000000001C316                 db    0
.eh_frame:000000000001C317                 db    0
.eh_frame:000000000001C318                 db  68h ; h
.eh_frame:000000000001C319                 db 0ECh
.eh_frame:000000000001C31A                 db 0FEh
.eh_frame:000000000001C31B                 db 0FFh
.eh_frame:000000000001C31C                 db 0A8h
.eh_frame:000000000001C31D                 db    0
.eh_frame:000000000001C31E                 db    0
.eh_frame:000000000001C31F                 db    0
.eh_frame:000000000001C320                 db    0
.eh_frame:000000000001C321                 db    0
.eh_frame:000000000001C322                 db    0
.eh_frame:000000000001C323                 db    0
.eh_frame:000000000001C324                 db  10h
.eh_frame:000000000001C325                 db    0
.eh_frame:000000000001C326                 db    0
.eh_frame:000000000001C327                 db    0
.eh_frame:000000000001C328                 db 0A8h
.eh_frame:000000000001C329                 db  0Ch
.eh_frame:000000000001C32A                 db    0
.eh_frame:000000000001C32B                 db    0
.eh_frame:000000000001C32C                 db    4
.eh_frame:000000000001C32D                 db 0EDh
.eh_frame:000000000001C32E                 db 0FEh
.eh_frame:000000000001C32F                 db 0FFh
.eh_frame:000000000001C330                 db 0B4h
.eh_frame:000000000001C331                 db    0
.eh_frame:000000000001C332                 db    0
.eh_frame:000000000001C333                 db    0
.eh_frame:000000000001C334                 db    0
.eh_frame:000000000001C335                 db    0
.eh_frame:000000000001C336                 db    0
.eh_frame:000000000001C337                 db    0
.eh_frame:000000000001C338                 db  10h
.eh_frame:000000000001C339                 db    0
.eh_frame:000000000001C33A                 db    0
.eh_frame:000000000001C33B                 db    0
.eh_frame:000000000001C33C                 db 0BCh
.eh_frame:000000000001C33D                 db  0Ch
.eh_frame:000000000001C33E                 db    0
.eh_frame:000000000001C33F                 db    0
.eh_frame:000000000001C340                 db 0B0h
.eh_frame:000000000001C341                 db 0EDh
.eh_frame:000000000001C342                 db 0FEh
.eh_frame:000000000001C343                 db 0FFh
.eh_frame:000000000001C344                 db 0A8h
.eh_frame:000000000001C345                 db    0
.eh_frame:000000000001C346                 db    0
.eh_frame:000000000001C347                 db    0
.eh_frame:000000000001C348                 db    0
.eh_frame:000000000001C349                 db    0
.eh_frame:000000000001C34A                 db    0
.eh_frame:000000000001C34B                 db    0
.eh_frame:000000000001C34C                 db  10h
.eh_frame:000000000001C34D                 db    0
.eh_frame:000000000001C34E                 db    0
.eh_frame:000000000001C34F                 db    0
.eh_frame:000000000001C350                 db 0D0h
.eh_frame:000000000001C351                 db  0Ch
.eh_frame:000000000001C352                 db    0
.eh_frame:000000000001C353                 db    0
.eh_frame:000000000001C354                 db  4Ch ; L
.eh_frame:000000000001C355                 db 0EEh
.eh_frame:000000000001C356                 db 0FEh
.eh_frame:000000000001C357                 db 0FFh
.eh_frame:000000000001C358                 db 0A8h
.eh_frame:000000000001C359                 db    0
.eh_frame:000000000001C35A                 db    0
.eh_frame:000000000001C35B                 db    0
.eh_frame:000000000001C35C                 db    0
.eh_frame:000000000001C35D                 db    0
.eh_frame:000000000001C35E                 db    0
.eh_frame:000000000001C35F                 db    0
.eh_frame:000000000001C360                 db  10h
.eh_frame:000000000001C361                 db    0
.eh_frame:000000000001C362                 db    0
.eh_frame:000000000001C363                 db    0
.eh_frame:000000000001C364                 db 0E4h
.eh_frame:000000000001C365                 db  0Ch
.eh_frame:000000000001C366                 db    0
.eh_frame:000000000001C367                 db    0
.eh_frame:000000000001C368                 db 0E8h
.eh_frame:000000000001C369                 db 0EEh
.eh_frame:000000000001C36A                 db 0FEh
.eh_frame:000000000001C36B                 db 0FFh
.eh_frame:000000000001C36C                 db 0B4h
.eh_frame:000000000001C36D                 db    0
.eh_frame:000000000001C36E                 db    0
.eh_frame:000000000001C36F                 db    0
.eh_frame:000000000001C370                 db    0
.eh_frame:000000000001C371                 db    0
.eh_frame:000000000001C372                 db    0
.eh_frame:000000000001C373                 db    0
.eh_frame:000000000001C374                 db  34h ; 4
.eh_frame:000000000001C375                 db    0
.eh_frame:000000000001C376                 db    0
.eh_frame:000000000001C377                 db    0
.eh_frame:000000000001C378                 db 0F8h
.eh_frame:000000000001C379                 db  0Ch
.eh_frame:000000000001C37A                 db    0
.eh_frame:000000000001C37B                 db    0
.eh_frame:000000000001C37C                 db  94h
.eh_frame:000000000001C37D                 db 0EFh
.eh_frame:000000000001C37E                 db 0FEh
.eh_frame:000000000001C37F                 db 0FFh
.eh_frame:000000000001C380                 db  80h
.eh_frame:000000000001C381                 db    0
.eh_frame:000000000001C382                 db    0
.eh_frame:000000000001C383                 db    0
.eh_frame:000000000001C384                 db    0
.eh_frame:000000000001C385                 db  42h ; B
.eh_frame:000000000001C386                 db  0Eh
.eh_frame:000000000001C387                 db  10h
.eh_frame:000000000001C388                 db  8Ch
.eh_frame:000000000001C389                 db    2
.eh_frame:000000000001C38A                 db  41h ; A
.eh_frame:000000000001C38B                 db  0Eh
.eh_frame:000000000001C38C                 db  18h
.eh_frame:000000000001C38D                 db  86h
.eh_frame:000000000001C38E                 db    3
.eh_frame:000000000001C38F                 db  44h ; D
.eh_frame:000000000001C390                 db  0Eh
.eh_frame:000000000001C391                 db  20h
.eh_frame:000000000001C392                 db  83h
.eh_frame:000000000001C393                 db    4
.eh_frame:000000000001C394                 db    2
.eh_frame:000000000001C395                 db  47h ; G
.eh_frame:000000000001C396                 db  0Ah
.eh_frame:000000000001C397                 db  0Eh
.eh_frame:000000000001C398                 db  18h
.eh_frame:000000000001C399                 db  47h ; G
.eh_frame:000000000001C39A                 db  0Eh
.eh_frame:000000000001C39B                 db  10h
.eh_frame:000000000001C39C                 db  42h ; B
.eh_frame:000000000001C39D                 db  0Eh
.eh_frame:000000000001C39E                 db    8
.eh_frame:000000000001C39F                 db  49h ; I
.eh_frame:000000000001C3A0                 db  0Bh
.eh_frame:000000000001C3A1                 db  5Ch ; \
.eh_frame:000000000001C3A2                 db  0Eh
.eh_frame:000000000001C3A3                 db  18h
.eh_frame:000000000001C3A4                 db  41h ; A
.eh_frame:000000000001C3A5                 db  0Eh
.eh_frame:000000000001C3A6                 db  10h
.eh_frame:000000000001C3A7                 db  42h ; B
.eh_frame:000000000001C3A8                 db  0Eh
.eh_frame:000000000001C3A9                 db    8
.eh_frame:000000000001C3AA                 db    0
.eh_frame:000000000001C3AB                 db    0
.eh_frame:000000000001C3AC                 db  34h ; 4
.eh_frame:000000000001C3AD                 db    0
.eh_frame:000000000001C3AE                 db    0
.eh_frame:000000000001C3AF                 db    0
.eh_frame:000000000001C3B0                 db  30h ; 0
.eh_frame:000000000001C3B1                 db  0Dh
.eh_frame:000000000001C3B2                 db    0
.eh_frame:000000000001C3B3                 db    0
.eh_frame:000000000001C3B4                 db 0DCh
.eh_frame:000000000001C3B5                 db 0EFh
.eh_frame:000000000001C3B6                 db 0FEh
.eh_frame:000000000001C3B7                 db 0FFh
.eh_frame:000000000001C3B8                 db  80h
.eh_frame:000000000001C3B9                 db    0
.eh_frame:000000000001C3BA                 db    0
.eh_frame:000000000001C3BB                 db    0
.eh_frame:000000000001C3BC                 db    0
.eh_frame:000000000001C3BD                 db  42h ; B
.eh_frame:000000000001C3BE                 db  0Eh
.eh_frame:000000000001C3BF                 db  10h
.eh_frame:000000000001C3C0                 db  8Ch
.eh_frame:000000000001C3C1                 db    2
.eh_frame:000000000001C3C2                 db  41h ; A
.eh_frame:000000000001C3C3                 db  0Eh
.eh_frame:000000000001C3C4                 db  18h
.eh_frame:000000000001C3C5                 db  86h
.eh_frame:000000000001C3C6                 db    3
.eh_frame:000000000001C3C7                 db  44h ; D
.eh_frame:000000000001C3C8                 db  0Eh
.eh_frame:000000000001C3C9                 db  20h
.eh_frame:000000000001C3CA                 db  83h
.eh_frame:000000000001C3CB                 db    4
.eh_frame:000000000001C3CC                 db    2
.eh_frame:000000000001C3CD                 db  47h ; G
.eh_frame:000000000001C3CE                 db  0Ah
.eh_frame:000000000001C3CF                 db  0Eh
.eh_frame:000000000001C3D0                 db  18h
.eh_frame:000000000001C3D1                 db  47h ; G
.eh_frame:000000000001C3D2                 db  0Eh
.eh_frame:000000000001C3D3                 db  10h
.eh_frame:000000000001C3D4                 db  42h ; B
.eh_frame:000000000001C3D5                 db  0Eh
.eh_frame:000000000001C3D6                 db    8
.eh_frame:000000000001C3D7                 db  49h ; I
.eh_frame:000000000001C3D8                 db  0Bh
.eh_frame:000000000001C3D9                 db  5Ch ; \
.eh_frame:000000000001C3DA                 db  0Eh
.eh_frame:000000000001C3DB                 db  18h
.eh_frame:000000000001C3DC                 db  41h ; A
.eh_frame:000000000001C3DD                 db  0Eh
.eh_frame:000000000001C3DE                 db  10h
.eh_frame:000000000001C3DF                 db  42h ; B
.eh_frame:000000000001C3E0                 db  0Eh
.eh_frame:000000000001C3E1                 db    8
.eh_frame:000000000001C3E2                 db    0
.eh_frame:000000000001C3E3                 db    0
.eh_frame:000000000001C3E4                 db  38h ; 8
.eh_frame:000000000001C3E5                 db    0
.eh_frame:000000000001C3E6                 db    0
.eh_frame:000000000001C3E7                 db    0
.eh_frame:000000000001C3E8                 db  68h ; h
.eh_frame:000000000001C3E9                 db  0Dh
.eh_frame:000000000001C3EA                 db    0
.eh_frame:000000000001C3EB                 db    0
.eh_frame:000000000001C3EC                 db  24h ; $
.eh_frame:000000000001C3ED                 db 0F0h
.eh_frame:000000000001C3EE                 db 0FEh
.eh_frame:000000000001C3EF                 db 0FFh
.eh_frame:000000000001C3F0                 db 0EDh
.eh_frame:000000000001C3F1                 db    0
.eh_frame:000000000001C3F2                 db    0
.eh_frame:000000000001C3F3                 db    0
.eh_frame:000000000001C3F4                 db    0
.eh_frame:000000000001C3F5                 db    2
.eh_frame:000000000001C3F6                 db  8Ah
.eh_frame:000000000001C3F7                 db  0Eh
.eh_frame:000000000001C3F8                 db  10h
.eh_frame:000000000001C3F9                 db  8Ch
.eh_frame:000000000001C3FA                 db    2
.eh_frame:000000000001C3FB                 db  41h ; A
.eh_frame:000000000001C3FC                 db  0Eh
.eh_frame:000000000001C3FD                 db  18h
.eh_frame:000000000001C3FE                 db  86h
.eh_frame:000000000001C3FF                 db    3
.eh_frame:000000000001C400                 db  44h ; D
.eh_frame:000000000001C401                 db  0Eh
.eh_frame:000000000001C402                 db  20h
.eh_frame:000000000001C403                 db  83h
.eh_frame:000000000001C404                 db    4
.eh_frame:000000000001C405                 db    2
.eh_frame:000000000001C406                 db  4Dh ; M
.eh_frame:000000000001C407                 db  0Ah
.eh_frame:000000000001C408                 db 0C3h
.eh_frame:000000000001C409                 db  0Eh
.eh_frame:000000000001C40A                 db  18h
.eh_frame:000000000001C40B                 db  41h ; A
.eh_frame:000000000001C40C                 db 0C6h
.eh_frame:000000000001C40D                 db  0Eh
.eh_frame:000000000001C40E                 db  10h
.eh_frame:000000000001C40F                 db  42h ; B
.eh_frame:000000000001C410                 db 0CCh
.eh_frame:000000000001C411                 db  0Eh
.eh_frame:000000000001C412                 db    8
.eh_frame:000000000001C413                 db  49h ; I
.eh_frame:000000000001C414                 db  0Bh
.eh_frame:000000000001C415                 db  41h ; A
.eh_frame:000000000001C416                 db  0Eh
.eh_frame:000000000001C417                 db  18h
.eh_frame:000000000001C418                 db  41h ; A
.eh_frame:000000000001C419                 db  0Eh
.eh_frame:000000000001C41A                 db  10h
.eh_frame:000000000001C41B                 db  42h ; B
.eh_frame:000000000001C41C                 db  0Eh
.eh_frame:000000000001C41D                 db    8
.eh_frame:000000000001C41E                 db    0
.eh_frame:000000000001C41F                 db    0
.eh_frame:000000000001C420                 db  38h ; 8
.eh_frame:000000000001C421                 db    0
.eh_frame:000000000001C422                 db    0
.eh_frame:000000000001C423                 db    0
.eh_frame:000000000001C424                 db 0A4h
.eh_frame:000000000001C425                 db  0Dh
.eh_frame:000000000001C426                 db    0
.eh_frame:000000000001C427                 db    0
.eh_frame:000000000001C428                 db 0D8h
.eh_frame:000000000001C429                 db 0F0h
.eh_frame:000000000001C42A                 db 0FEh
.eh_frame:000000000001C42B                 db 0FFh
.eh_frame:000000000001C42C                 db 0EDh
.eh_frame:000000000001C42D                 db    0
.eh_frame:000000000001C42E                 db    0
.eh_frame:000000000001C42F                 db    0
.eh_frame:000000000001C430                 db    0
.eh_frame:000000000001C431                 db    2
.eh_frame:000000000001C432                 db  8Ah
.eh_frame:000000000001C433                 db  0Eh
.eh_frame:000000000001C434                 db  10h
.eh_frame:000000000001C435                 db  8Ch
.eh_frame:000000000001C436                 db    2
.eh_frame:000000000001C437                 db  41h ; A
.eh_frame:000000000001C438                 db  0Eh
.eh_frame:000000000001C439                 db  18h
.eh_frame:000000000001C43A                 db  86h
.eh_frame:000000000001C43B                 db    3
.eh_frame:000000000001C43C                 db  44h ; D
.eh_frame:000000000001C43D                 db  0Eh
.eh_frame:000000000001C43E                 db  20h
.eh_frame:000000000001C43F                 db  83h
.eh_frame:000000000001C440                 db    4
.eh_frame:000000000001C441                 db    2
.eh_frame:000000000001C442                 db  4Ch ; L
.eh_frame:000000000001C443                 db  0Ah
.eh_frame:000000000001C444                 db 0C3h
.eh_frame:000000000001C445                 db  0Eh
.eh_frame:000000000001C446                 db  18h
.eh_frame:000000000001C447                 db  41h ; A
.eh_frame:000000000001C448                 db 0C6h
.eh_frame:000000000001C449                 db  0Eh
.eh_frame:000000000001C44A                 db  10h
.eh_frame:000000000001C44B                 db  42h ; B
.eh_frame:000000000001C44C                 db 0CCh
.eh_frame:000000000001C44D                 db  0Eh
.eh_frame:000000000001C44E                 db    8
.eh_frame:000000000001C44F                 db  4Ah ; J
.eh_frame:000000000001C450                 db  0Bh
.eh_frame:000000000001C451                 db  41h ; A
.eh_frame:000000000001C452                 db  0Eh
.eh_frame:000000000001C453                 db  18h
.eh_frame:000000000001C454                 db  41h ; A
.eh_frame:000000000001C455                 db  0Eh
.eh_frame:000000000001C456                 db  10h
.eh_frame:000000000001C457                 db  42h ; B
.eh_frame:000000000001C458                 db  0Eh
.eh_frame:000000000001C459                 db    8
.eh_frame:000000000001C45A                 db    0
.eh_frame:000000000001C45B                 db    0
.eh_frame:000000000001C45C                 db  10h
.eh_frame:000000000001C45D                 db    0
.eh_frame:000000000001C45E                 db    0
.eh_frame:000000000001C45F                 db    0
.eh_frame:000000000001C460                 db 0E0h
.eh_frame:000000000001C461                 db  0Dh
.eh_frame:000000000001C462                 db    0
.eh_frame:000000000001C463                 db    0
.eh_frame:000000000001C464                 db  8Ch
.eh_frame:000000000001C465                 db 0F1h
.eh_frame:000000000001C466                 db 0FEh
.eh_frame:000000000001C467                 db 0FFh
.eh_frame:000000000001C468                 db 0A8h
.eh_frame:000000000001C469                 db    0
.eh_frame:000000000001C46A                 db    0
.eh_frame:000000000001C46B                 db    0
.eh_frame:000000000001C46C                 db    0
.eh_frame:000000000001C46D                 db    0
.eh_frame:000000000001C46E                 db    0
.eh_frame:000000000001C46F                 db    0
.eh_frame:000000000001C470                 db  10h
.eh_frame:000000000001C471                 db    0
.eh_frame:000000000001C472                 db    0
.eh_frame:000000000001C473                 db    0
.eh_frame:000000000001C474                 db 0F4h
.eh_frame:000000000001C475                 db  0Dh
.eh_frame:000000000001C476                 db    0
.eh_frame:000000000001C477                 db    0
.eh_frame:000000000001C478                 db  28h ; (
.eh_frame:000000000001C479                 db 0F2h
.eh_frame:000000000001C47A                 db 0FEh
.eh_frame:000000000001C47B                 db 0FFh
.eh_frame:000000000001C47C                 db 0A8h
.eh_frame:000000000001C47D                 db    0
.eh_frame:000000000001C47E                 db    0
.eh_frame:000000000001C47F                 db    0
.eh_frame:000000000001C480                 db    0
.eh_frame:000000000001C481                 db    0
.eh_frame:000000000001C482                 db    0
.eh_frame:000000000001C483                 db    0
.eh_frame:000000000001C484                 db  10h
.eh_frame:000000000001C485                 db    0
.eh_frame:000000000001C486                 db    0
.eh_frame:000000000001C487                 db    0
.eh_frame:000000000001C488                 db    8
.eh_frame:000000000001C489                 db  0Eh
.eh_frame:000000000001C48A                 db    0
.eh_frame:000000000001C48B                 db    0
.eh_frame:000000000001C48C                 db 0C4h
.eh_frame:000000000001C48D                 db 0F2h
.eh_frame:000000000001C48E                 db 0FEh
.eh_frame:000000000001C48F                 db 0FFh
.eh_frame:000000000001C490                 db 0B4h
.eh_frame:000000000001C491                 db    0
.eh_frame:000000000001C492                 db    0
.eh_frame:000000000001C493                 db    0
.eh_frame:000000000001C494                 db    0
.eh_frame:000000000001C495                 db    0
.eh_frame:000000000001C496                 db    0
.eh_frame:000000000001C497                 db    0
.eh_frame:000000000001C498                 db  3Ch ; <
.eh_frame:000000000001C499                 db    0
.eh_frame:000000000001C49A                 db    0
.eh_frame:000000000001C49B                 db    0
.eh_frame:000000000001C49C                 db  1Ch
.eh_frame:000000000001C49D                 db  0Eh
.eh_frame:000000000001C49E                 db    0
.eh_frame:000000000001C49F                 db    0
.eh_frame:000000000001C4A0                 db  70h ; p
.eh_frame:000000000001C4A1                 db 0F3h
.eh_frame:000000000001C4A2                 db 0FEh
.eh_frame:000000000001C4A3                 db 0FFh
.eh_frame:000000000001C4A4                 db 0FEh
.eh_frame:000000000001C4A5                 db    0
.eh_frame:000000000001C4A6                 db    0
.eh_frame:000000000001C4A7                 db    0
.eh_frame:000000000001C4A8                 db    0
.eh_frame:000000000001C4A9                 db    2
.eh_frame:000000000001C4AA                 db  8Ah
.eh_frame:000000000001C4AB                 db  0Eh
.eh_frame:000000000001C4AC                 db  10h
.eh_frame:000000000001C4AD                 db  8Ch
.eh_frame:000000000001C4AE                 db    2
.eh_frame:000000000001C4AF                 db  41h ; A
.eh_frame:000000000001C4B0                 db  0Eh
.eh_frame:000000000001C4B1                 db  18h
.eh_frame:000000000001C4B2                 db  86h
.eh_frame:000000000001C4B3                 db    3
.eh_frame:000000000001C4B4                 db  41h ; A
.eh_frame:000000000001C4B5                 db  0Eh
.eh_frame:000000000001C4B6                 db  20h
.eh_frame:000000000001C4B7                 db  83h
.eh_frame:000000000001C4B8                 db    4
.eh_frame:000000000001C4B9                 db    2
.eh_frame:000000000001C4BA                 db  4Fh ; O
.eh_frame:000000000001C4BB                 db  0Ah
.eh_frame:000000000001C4BC                 db 0C3h
.eh_frame:000000000001C4BD                 db  0Eh
.eh_frame:000000000001C4BE                 db  18h
.eh_frame:000000000001C4BF                 db  41h ; A
.eh_frame:000000000001C4C0                 db 0C6h
.eh_frame:000000000001C4C1                 db  0Eh
.eh_frame:000000000001C4C2                 db  10h
.eh_frame:000000000001C4C3                 db  42h ; B
.eh_frame:000000000001C4C4                 db 0CCh
.eh_frame:000000000001C4C5                 db  0Eh
.eh_frame:000000000001C4C6                 db    8
.eh_frame:000000000001C4C7                 db  4Ah ; J
.eh_frame:000000000001C4C8                 db  0Bh
.eh_frame:000000000001C4C9                 db  41h ; A
.eh_frame:000000000001C4CA                 db  0Ah
.eh_frame:000000000001C4CB                 db  0Eh
.eh_frame:000000000001C4CC                 db  18h
.eh_frame:000000000001C4CD                 db  41h ; A
.eh_frame:000000000001C4CE                 db  0Eh
.eh_frame:000000000001C4CF                 db  10h
.eh_frame:000000000001C4D0                 db  42h ; B
.eh_frame:000000000001C4D1                 db  0Eh
.eh_frame:000000000001C4D2                 db    8
.eh_frame:000000000001C4D3                 db  44h ; D
.eh_frame:000000000001C4D4                 db  0Bh
.eh_frame:000000000001C4D5                 db    0
.eh_frame:000000000001C4D6                 db    0
.eh_frame:000000000001C4D7                 db    0
.eh_frame:000000000001C4D8                 db  28h ; (
.eh_frame:000000000001C4D9                 db    0
.eh_frame:000000000001C4DA                 db    0
.eh_frame:000000000001C4DB                 db    0
.eh_frame:000000000001C4DC                 db  5Ch ; \
.eh_frame:000000000001C4DD                 db  0Eh
.eh_frame:000000000001C4DE                 db    0
.eh_frame:000000000001C4DF                 db    0
.eh_frame:000000000001C4E0                 db  30h ; 0
.eh_frame:000000000001C4E1                 db 0F4h
.eh_frame:000000000001C4E2                 db 0FEh
.eh_frame:000000000001C4E3                 db 0FFh
.eh_frame:000000000001C4E4                 db  33h ; 3
.eh_frame:000000000001C4E5                 db    7
.eh_frame:000000000001C4E6                 db    0
.eh_frame:000000000001C4E7                 db    0
.eh_frame:000000000001C4E8                 db    0
.eh_frame:000000000001C4E9                 db  42h ; B
.eh_frame:000000000001C4EA                 db  0Eh
.eh_frame:000000000001C4EB                 db  10h
.eh_frame:000000000001C4EC                 db  8Dh
.eh_frame:000000000001C4ED                 db    2
.eh_frame:000000000001C4EE                 db  42h ; B
.eh_frame:000000000001C4EF                 db  0Eh
.eh_frame:000000000001C4F0                 db  18h
.eh_frame:000000000001C4F1                 db  8Ch
.eh_frame:000000000001C4F2                 db    3
.eh_frame:000000000001C4F3                 db  46h ; F
.eh_frame:000000000001C4F4                 db  0Eh
.eh_frame:000000000001C4F5                 db  20h
.eh_frame:000000000001C4F6                 db  86h
.eh_frame:000000000001C4F7                 db    4
.eh_frame:000000000001C4F8                 db  41h ; A
.eh_frame:000000000001C4F9                 db  0Eh
.eh_frame:000000000001C4FA                 db  28h ; (
.eh_frame:000000000001C4FB                 db  83h
.eh_frame:000000000001C4FC                 db    5
.eh_frame:000000000001C4FD                 db  4Ah ; J
.eh_frame:000000000001C4FE                 db  0Eh
.eh_frame:000000000001C4FF                 db 0B0h
.eh_frame:000000000001C500                 db    1
.eh_frame:000000000001C501                 db    0
.eh_frame:000000000001C502                 db    0
.eh_frame:000000000001C503                 db    0
.eh_frame:000000000001C504                 db  68h ; h
.eh_frame:000000000001C505                 db    0
.eh_frame:000000000001C506                 db    0
.eh_frame:000000000001C507                 db    0
.eh_frame:000000000001C508                 db  88h
.eh_frame:000000000001C509                 db  0Eh
.eh_frame:000000000001C50A                 db    0
.eh_frame:000000000001C50B                 db    0
.eh_frame:000000000001C50C                 db  94h
.eh_frame:000000000001C50D                 db  73h ; s
.eh_frame:000000000001C50E                 db 0FEh
.eh_frame:000000000001C50F                 db 0FFh
.eh_frame:000000000001C510                 db 0C9h
.eh_frame:000000000001C511                 db  19h
.eh_frame:000000000001C512                 db    0
.eh_frame:000000000001C513                 db    0
.eh_frame:000000000001C514                 db    0
.eh_frame:000000000001C515                 db  42h ; B
.eh_frame:000000000001C516                 db  0Eh
.eh_frame:000000000001C517                 db  10h
.eh_frame:000000000001C518                 db  8Fh
.eh_frame:000000000001C519                 db    2
.eh_frame:000000000001C51A                 db  42h ; B
.eh_frame:000000000001C51B                 db  0Eh
.eh_frame:000000000001C51C                 db  18h
.eh_frame:000000000001C51D                 db  8Eh
.eh_frame:000000000001C51E                 db    3
.eh_frame:000000000001C51F                 db  42h ; B
.eh_frame:000000000001C520                 db  0Eh
.eh_frame:000000000001C521                 db  20h
.eh_frame:000000000001C522                 db  8Dh
.eh_frame:000000000001C523                 db    4
.eh_frame:000000000001C524                 db  42h ; B
.eh_frame:000000000001C525                 db  0Eh
.eh_frame:000000000001C526                 db  28h ; (
.eh_frame:000000000001C527                 db  8Ch
.eh_frame:000000000001C528                 db    5
.eh_frame:000000000001C529                 db  41h ; A
.eh_frame:000000000001C52A                 db  0Eh
.eh_frame:000000000001C52B                 db  30h ; 0
.eh_frame:000000000001C52C                 db  86h
.eh_frame:000000000001C52D                 db    6
.eh_frame:000000000001C52E                 db  41h ; A
.eh_frame:000000000001C52F                 db  0Eh
.eh_frame:000000000001C530                 db  38h ; 8
.eh_frame:000000000001C531                 db  83h
.eh_frame:000000000001C532                 db    7
.eh_frame:000000000001C533                 db  49h ; I
.eh_frame:000000000001C534                 db  0Eh
.eh_frame:000000000001C535                 db  90h
.eh_frame:000000000001C536                 db    1
.eh_frame:000000000001C537                 db    3
.eh_frame:000000000001C538                 db 0C9h
.eh_frame:000000000001C539                 db    3
.eh_frame:000000000001C53A                 db  0Eh
.eh_frame:000000000001C53B                 db  98h
.eh_frame:000000000001C53C                 db    1
.eh_frame:000000000001C53D                 db  50h ; P
.eh_frame:000000000001C53E                 db  0Eh
.eh_frame:000000000001C53F                 db 0A0h
.eh_frame:000000000001C540                 db    1
.eh_frame:000000000001C541                 db  58h ; X
.eh_frame:000000000001C542                 db  0Eh
.eh_frame:000000000001C543                 db  98h
.eh_frame:000000000001C544                 db    1
.eh_frame:000000000001C545                 db  41h ; A
.eh_frame:000000000001C546                 db  0Eh
.eh_frame:000000000001C547                 db  90h
.eh_frame:000000000001C548                 db    1
.eh_frame:000000000001C549                 db    3
.eh_frame:000000000001C54A                 db  7Bh ; {
.eh_frame:000000000001C54B                 db    1
.eh_frame:000000000001C54C                 db  0Ah
.eh_frame:000000000001C54D                 db  0Eh
.eh_frame:000000000001C54E                 db  98h
.eh_frame:000000000001C54F                 db    1
.eh_frame:000000000001C550                 db  50h ; P
.eh_frame:000000000001C551                 db  0Eh
.eh_frame:000000000001C552                 db 0A0h
.eh_frame:000000000001C553                 db    1
.eh_frame:000000000001C554                 db  5Ch ; \
.eh_frame:000000000001C555                 db  0Bh
.eh_frame:000000000001C556                 db    3
.eh_frame:000000000001C557                 db 0A0h
.eh_frame:000000000001C558                 db    8
.eh_frame:000000000001C559                 db  0Ah
.eh_frame:000000000001C55A                 db  0Eh
.eh_frame:000000000001C55B                 db  38h ; 8
.eh_frame:000000000001C55C                 db  41h ; A
.eh_frame:000000000001C55D                 db  0Eh
.eh_frame:000000000001C55E                 db  30h ; 0
.eh_frame:000000000001C55F                 db  41h ; A
.eh_frame:000000000001C560                 db  0Eh
.eh_frame:000000000001C561                 db  28h ; (
.eh_frame:000000000001C562                 db  42h ; B
.eh_frame:000000000001C563                 db  0Eh
.eh_frame:000000000001C564                 db  20h
.eh_frame:000000000001C565                 db  42h ; B
.eh_frame:000000000001C566                 db  0Eh
.eh_frame:000000000001C567                 db  18h
.eh_frame:000000000001C568                 db  42h ; B
.eh_frame:000000000001C569                 db  0Eh
.eh_frame:000000000001C56A                 db  10h
.eh_frame:000000000001C56B                 db  42h ; B
.eh_frame:000000000001C56C                 db  0Eh
.eh_frame:000000000001C56D                 db    8
.eh_frame:000000000001C56E                 db  41h ; A
.eh_frame:000000000001C56F                 db  0Bh
.eh_frame:000000000001C570                 db  4Ch ; L
.eh_frame:000000000001C571                 db    0
.eh_frame:000000000001C572                 db    0
.eh_frame:000000000001C573                 db    0
.eh_frame:000000000001C574                 db 0F4h
.eh_frame:000000000001C575                 db  0Eh
.eh_frame:000000000001C576                 db    0
.eh_frame:000000000001C577                 db    0
.eh_frame:000000000001C578                 db 0D8h
.eh_frame:000000000001C579                 db 0FAh
.eh_frame:000000000001C57A                 db 0FEh
.eh_frame:000000000001C57B                 db 0FFh
.eh_frame:000000000001C57C                 db 0EFh
.eh_frame:000000000001C57D                 db    0
.eh_frame:000000000001C57E                 db    0
.eh_frame:000000000001C57F                 db    0
.eh_frame:000000000001C580                 db    0
.eh_frame:000000000001C581                 db  42h ; B
.eh_frame:000000000001C582                 db  0Eh
.eh_frame:000000000001C583                 db  10h
.eh_frame:000000000001C584                 db  8Fh
.eh_frame:000000000001C585                 db    2
.eh_frame:000000000001C586                 db  42h ; B
.eh_frame:000000000001C587                 db  0Eh
.eh_frame:000000000001C588                 db  18h
.eh_frame:000000000001C589                 db  8Eh
.eh_frame:000000000001C58A                 db    3
.eh_frame:000000000001C58B                 db  47h ; G
.eh_frame:000000000001C58C                 db  0Eh
.eh_frame:000000000001C58D                 db  20h
.eh_frame:000000000001C58E                 db  8Dh
.eh_frame:000000000001C58F                 db    4
.eh_frame:000000000001C590                 db  42h ; B
.eh_frame:000000000001C591                 db  0Eh
.eh_frame:000000000001C592                 db  28h ; (
.eh_frame:000000000001C593                 db  8Ch
.eh_frame:000000000001C594                 db    5
.eh_frame:000000000001C595                 db  44h ; D
.eh_frame:000000000001C596                 db  0Eh
.eh_frame:000000000001C597                 db  30h ; 0
.eh_frame:000000000001C598                 db  86h
.eh_frame:000000000001C599                 db    6
.eh_frame:000000000001C59A                 db  41h ; A
.eh_frame:000000000001C59B                 db  0Eh
.eh_frame:000000000001C59C                 db  38h ; 8
.eh_frame:000000000001C59D                 db  83h
.eh_frame:000000000001C59E                 db    7
.eh_frame:000000000001C59F                 db  5Ch ; \
.eh_frame:000000000001C5A0                 db  0Eh
.eh_frame:000000000001C5A1                 db  40h ; @
.eh_frame:000000000001C5A2                 db    2
.eh_frame:000000000001C5A3                 db  61h ; a
.eh_frame:000000000001C5A4                 db  0Ah
.eh_frame:000000000001C5A5                 db  0Eh
.eh_frame:000000000001C5A6                 db  38h ; 8
.eh_frame:000000000001C5A7                 db  44h ; D
.eh_frame:000000000001C5A8                 db  0Eh
.eh_frame:000000000001C5A9                 db  30h ; 0
.eh_frame:000000000001C5AA                 db  41h ; A
.eh_frame:000000000001C5AB                 db  0Eh
.eh_frame:000000000001C5AC                 db  28h ; (
.eh_frame:000000000001C5AD                 db  42h ; B
.eh_frame:000000000001C5AE                 db  0Eh
.eh_frame:000000000001C5AF                 db  20h
.eh_frame:000000000001C5B0                 db  42h ; B
.eh_frame:000000000001C5B1                 db  0Eh
.eh_frame:000000000001C5B2                 db  18h
.eh_frame:000000000001C5B3                 db  42h ; B
.eh_frame:000000000001C5B4                 db  0Eh
.eh_frame:000000000001C5B5                 db  10h
.eh_frame:000000000001C5B6                 db  42h ; B
.eh_frame:000000000001C5B7                 db  0Eh
.eh_frame:000000000001C5B8                 db    8
.eh_frame:000000000001C5B9                 db  44h ; D
.eh_frame:000000000001C5BA                 db  0Bh
.eh_frame:000000000001C5BB                 db    0
.eh_frame:000000000001C5BC                 db    0
.eh_frame:000000000001C5BD                 db    0
.eh_frame:000000000001C5BE                 db    0
.eh_frame:000000000001C5BF                 db    0
.eh_frame:000000000001C5C0                 db  10h
.eh_frame:000000000001C5C1                 db    0
.eh_frame:000000000001C5C2                 db    0
.eh_frame:000000000001C5C3                 db    0
.eh_frame:000000000001C5C4                 db  44h ; D
.eh_frame:000000000001C5C5                 db  0Fh
.eh_frame:000000000001C5C6                 db    0
.eh_frame:000000000001C5C7                 db    0
.eh_frame:000000000001C5C8                 db  78h ; x
.eh_frame:000000000001C5C9                 db 0FBh
.eh_frame:000000000001C5CA                 db 0FEh
.eh_frame:000000000001C5CB                 db 0FFh
.eh_frame:000000000001C5CC                 db  0Ah
.eh_frame:000000000001C5CD                 db    0
.eh_frame:000000000001C5CE                 db    0
.eh_frame:000000000001C5CF                 db    0
.eh_frame:000000000001C5D0                 db    0
.eh_frame:000000000001C5D1                 db    0
.eh_frame:000000000001C5D2                 db    0
.eh_frame:000000000001C5D3                 db    0
.eh_frame:000000000001C5D4                 db  48h ; H
.eh_frame:000000000001C5D5                 db    0
.eh_frame:000000000001C5D6                 db    0
.eh_frame:000000000001C5D7                 db    0
.eh_frame:000000000001C5D8                 db  58h ; X
.eh_frame:000000000001C5D9                 db  0Fh
.eh_frame:000000000001C5DA                 db    0
.eh_frame:000000000001C5DB                 db    0
.eh_frame:000000000001C5DC                 db  74h ; t
.eh_frame:000000000001C5DD                 db 0FBh
.eh_frame:000000000001C5DE                 db 0FEh
.eh_frame:000000000001C5DF                 db 0FFh
.eh_frame:000000000001C5E0                 db  16h
.eh_frame:000000000001C5E1                 db    1
.eh_frame:000000000001C5E2                 db    0
.eh_frame:000000000001C5E3                 db    0
.eh_frame:000000000001C5E4                 db    0
.eh_frame:000000000001C5E5                 db  42h ; B
.eh_frame:000000000001C5E6                 db  0Eh
.eh_frame:000000000001C5E7                 db  10h
.eh_frame:000000000001C5E8                 db  8Fh
.eh_frame:000000000001C5E9                 db    2
.eh_frame:000000000001C5EA                 db  42h ; B
.eh_frame:000000000001C5EB                 db  0Eh
.eh_frame:000000000001C5EC                 db  18h
.eh_frame:000000000001C5ED                 db  8Eh
.eh_frame:000000000001C5EE                 db    3
.eh_frame:000000000001C5EF                 db  45h ; E
.eh_frame:000000000001C5F0                 db  0Eh
.eh_frame:000000000001C5F1                 db  20h
.eh_frame:000000000001C5F2                 db  8Dh
.eh_frame:000000000001C5F3                 db    4
.eh_frame:000000000001C5F4                 db  42h ; B
.eh_frame:000000000001C5F5                 db  0Eh
.eh_frame:000000000001C5F6                 db  28h ; (
.eh_frame:000000000001C5F7                 db  8Ch
.eh_frame:000000000001C5F8                 db    5
.eh_frame:000000000001C5F9                 db  44h ; D
.eh_frame:000000000001C5FA                 db  0Eh
.eh_frame:000000000001C5FB                 db  30h ; 0
.eh_frame:000000000001C5FC                 db  86h
.eh_frame:000000000001C5FD                 db    6
.eh_frame:000000000001C5FE                 db  41h ; A
.eh_frame:000000000001C5FF                 db  0Eh
.eh_frame:000000000001C600                 db  38h ; 8
.eh_frame:000000000001C601                 db  83h
.eh_frame:000000000001C602                 db    7
.eh_frame:000000000001C603                 db  47h ; G
.eh_frame:000000000001C604                 db  0Eh
.eh_frame:000000000001C605                 db  60h ; `
.eh_frame:000000000001C606                 db    2
.eh_frame:000000000001C607                 db 0DEh
.eh_frame:000000000001C608                 db  0Ah
.eh_frame:000000000001C609                 db  0Eh
.eh_frame:000000000001C60A                 db  38h ; 8
.eh_frame:000000000001C60B                 db  41h ; A
.eh_frame:000000000001C60C                 db  0Eh
.eh_frame:000000000001C60D                 db  30h ; 0
.eh_frame:000000000001C60E                 db  41h ; A
.eh_frame:000000000001C60F                 db  0Eh
.eh_frame:000000000001C610                 db  28h ; (
.eh_frame:000000000001C611                 db  42h ; B
.eh_frame:000000000001C612                 db  0Eh
.eh_frame:000000000001C613                 db  20h
.eh_frame:000000000001C614                 db  42h ; B
.eh_frame:000000000001C615                 db  0Eh
.eh_frame:000000000001C616                 db  18h
.eh_frame:000000000001C617                 db  42h ; B
.eh_frame:000000000001C618                 db  0Eh
.eh_frame:000000000001C619                 db  10h
.eh_frame:000000000001C61A                 db  42h ; B
.eh_frame:000000000001C61B                 db  0Eh
.eh_frame:000000000001C61C                 db    8
.eh_frame:000000000001C61D                 db  41h ; A
.eh_frame:000000000001C61E                 db  0Bh
.eh_frame:000000000001C61F                 db    0
.eh_frame:000000000001C620                 db  28h ; (
.eh_frame:000000000001C621                 db    0
.eh_frame:000000000001C622                 db    0
.eh_frame:000000000001C623                 db    0
.eh_frame:000000000001C624                 db 0A4h
.eh_frame:000000000001C625                 db  0Fh
.eh_frame:000000000001C626                 db    0
.eh_frame:000000000001C627                 db    0
.eh_frame:000000000001C628                 db  48h ; H
.eh_frame:000000000001C629                 db 0FCh
.eh_frame:000000000001C62A                 db 0FEh
.eh_frame:000000000001C62B                 db 0FFh
.eh_frame:000000000001C62C                 db  73h ; s
.eh_frame:000000000001C62D                 db    0
.eh_frame:000000000001C62E                 db    0
.eh_frame:000000000001C62F                 db    0
.eh_frame:000000000001C630                 db    0
.eh_frame:000000000001C631                 db  46h ; F
.eh_frame:000000000001C632                 db  0Eh
.eh_frame:000000000001C633                 db  10h
.eh_frame:000000000001C634                 db  8Ch
.eh_frame:000000000001C635                 db    2
.eh_frame:000000000001C636                 db  46h ; F
.eh_frame:000000000001C637                 db  0Eh
.eh_frame:000000000001C638                 db  18h
.eh_frame:000000000001C639                 db  86h
.eh_frame:000000000001C63A                 db    3
.eh_frame:000000000001C63B                 db  44h ; D
.eh_frame:000000000001C63C                 db  0Eh
.eh_frame:000000000001C63D                 db  20h
.eh_frame:000000000001C63E                 db  83h
.eh_frame:000000000001C63F                 db    4
.eh_frame:000000000001C640                 db  7Fh ; 
.eh_frame:000000000001C641                 db  0Ah
.eh_frame:000000000001C642                 db  0Eh
.eh_frame:000000000001C643                 db  18h
.eh_frame:000000000001C644                 db  41h ; A
.eh_frame:000000000001C645                 db  0Eh
.eh_frame:000000000001C646                 db  10h
.eh_frame:000000000001C647                 db  42h ; B
.eh_frame:000000000001C648                 db  0Eh
.eh_frame:000000000001C649                 db    8
.eh_frame:000000000001C64A                 db  4Eh ; N
.eh_frame:000000000001C64B                 db  0Bh
.eh_frame:000000000001C64C                 db  5Ch ; \
.eh_frame:000000000001C64D                 db    0
.eh_frame:000000000001C64E                 db    0
.eh_frame:000000000001C64F                 db    0
.eh_frame:000000000001C650                 db 0D0h
.eh_frame:000000000001C651                 db  0Fh
.eh_frame:000000000001C652                 db    0
.eh_frame:000000000001C653                 db    0
.eh_frame:000000000001C654                 db  9Ch
.eh_frame:000000000001C655                 db 0FCh
.eh_frame:000000000001C656                 db 0FEh
.eh_frame:000000000001C657                 db 0FFh
.eh_frame:000000000001C658                 db  20h
.eh_frame:000000000001C659                 db    1
.eh_frame:000000000001C65A                 db    0
.eh_frame:000000000001C65B                 db    0
.eh_frame:000000000001C65C                 db    0
.eh_frame:000000000001C65D                 db  42h ; B
.eh_frame:000000000001C65E                 db  0Eh
.eh_frame:000000000001C65F                 db  10h
.eh_frame:000000000001C660                 db  8Fh
.eh_frame:000000000001C661                 db    2
.eh_frame:000000000001C662                 db  42h ; B
.eh_frame:000000000001C663                 db  0Eh
.eh_frame:000000000001C664                 db  18h
.eh_frame:000000000001C665                 db  8Eh
.eh_frame:000000000001C666                 db    3
.eh_frame:000000000001C667                 db  45h ; E
.eh_frame:000000000001C668                 db  0Eh
.eh_frame:000000000001C669                 db  20h
.eh_frame:000000000001C66A                 db  8Dh
.eh_frame:000000000001C66B                 db    4
.eh_frame:000000000001C66C                 db  42h ; B
.eh_frame:000000000001C66D                 db  0Eh
.eh_frame:000000000001C66E                 db  28h ; (
.eh_frame:000000000001C66F                 db  8Ch
.eh_frame:000000000001C670                 db    5
.eh_frame:000000000001C671                 db  43h ; C
.eh_frame:000000000001C672                 db  0Eh
.eh_frame:000000000001C673                 db  30h ; 0
.eh_frame:000000000001C674                 db  86h
.eh_frame:000000000001C675                 db    6
.eh_frame:000000000001C676                 db  41h ; A
.eh_frame:000000000001C677                 db  0Eh
.eh_frame:000000000001C678                 db  38h ; 8
.eh_frame:000000000001C679                 db  83h
.eh_frame:000000000001C67A                 db    7
.eh_frame:000000000001C67B                 db  56h ; V
.eh_frame:000000000001C67C                 db  0Eh
.eh_frame:000000000001C67D                 db  40h ; @
.eh_frame:000000000001C67E                 db    2
.eh_frame:000000000001C67F                 db 0D3h
.eh_frame:000000000001C680                 db  0Ah
.eh_frame:000000000001C681                 db  0Eh
.eh_frame:000000000001C682                 db  38h ; 8
.eh_frame:000000000001C683                 db  41h ; A
.eh_frame:000000000001C684                 db  0Eh
.eh_frame:000000000001C685                 db  30h ; 0
.eh_frame:000000000001C686                 db  41h ; A
.eh_frame:000000000001C687                 db  0Eh
.eh_frame:000000000001C688                 db  28h ; (
.eh_frame:000000000001C689                 db  42h ; B
.eh_frame:000000000001C68A                 db  0Eh
.eh_frame:000000000001C68B                 db  20h
.eh_frame:000000000001C68C                 db  42h ; B
.eh_frame:000000000001C68D                 db  0Eh
.eh_frame:000000000001C68E                 db  18h
.eh_frame:000000000001C68F                 db  42h ; B
.eh_frame:000000000001C690                 db  0Eh
.eh_frame:000000000001C691                 db  10h
.eh_frame:000000000001C692                 db  42h ; B
.eh_frame:000000000001C693                 db  0Eh
.eh_frame:000000000001C694                 db    8
.eh_frame:000000000001C695                 db  46h ; F
.eh_frame:000000000001C696                 db  0Bh
.eh_frame:000000000001C697                 db  44h ; D
.eh_frame:000000000001C698                 db  0Eh
.eh_frame:000000000001C699                 db  38h ; 8
.eh_frame:000000000001C69A                 db  46h ; F
.eh_frame:000000000001C69B                 db  0Eh
.eh_frame:000000000001C69C                 db  30h ; 0
.eh_frame:000000000001C69D                 db  41h ; A
.eh_frame:000000000001C69E                 db  0Eh
.eh_frame:000000000001C69F                 db  28h ; (
.eh_frame:000000000001C6A0                 db  42h ; B
.eh_frame:000000000001C6A1                 db  0Eh
.eh_frame:000000000001C6A2                 db  20h
.eh_frame:000000000001C6A3                 db  42h ; B
.eh_frame:000000000001C6A4                 db  0Eh
.eh_frame:000000000001C6A5                 db  18h
.eh_frame:000000000001C6A6                 db  42h ; B
.eh_frame:000000000001C6A7                 db  0Eh
.eh_frame:000000000001C6A8                 db  10h
.eh_frame:000000000001C6A9                 db  42h ; B
.eh_frame:000000000001C6AA                 db  0Eh
.eh_frame:000000000001C6AB                 db    8
.eh_frame:000000000001C6AC                 db  48h ; H
.eh_frame:000000000001C6AD                 db    0
.eh_frame:000000000001C6AE                 db    0
.eh_frame:000000000001C6AF                 db    0
.eh_frame:000000000001C6B0                 db  30h ; 0
.eh_frame:000000000001C6B1                 db  10h
.eh_frame:000000000001C6B2                 db    0
.eh_frame:000000000001C6B3                 db    0
.eh_frame:000000000001C6B4                 db  5Ch ; \
.eh_frame:000000000001C6B5                 db 0FDh
.eh_frame:000000000001C6B6                 db 0FEh
.eh_frame:000000000001C6B7                 db 0FFh
.eh_frame:000000000001C6B8                 db  6Dh ; m
.eh_frame:000000000001C6B9                 db    0
.eh_frame:000000000001C6BA                 db    0
.eh_frame:000000000001C6BB                 db    0
.eh_frame:000000000001C6BC                 db    0
.eh_frame:000000000001C6BD                 db  42h ; B
.eh_frame:000000000001C6BE                 db  0Eh
.eh_frame:000000000001C6BF                 db  10h
.eh_frame:000000000001C6C0                 db  8Fh
.eh_frame:000000000001C6C1                 db    2
.eh_frame:000000000001C6C2                 db  42h ; B
.eh_frame:000000000001C6C3                 db  0Eh
.eh_frame:000000000001C6C4                 db  18h
.eh_frame:000000000001C6C5                 db  8Eh
.eh_frame:000000000001C6C6                 db    3
.eh_frame:000000000001C6C7                 db  45h ; E
.eh_frame:000000000001C6C8                 db  0Eh
.eh_frame:000000000001C6C9                 db  20h
.eh_frame:000000000001C6CA                 db  8Dh
.eh_frame:000000000001C6CB                 db    4
.eh_frame:000000000001C6CC                 db  42h ; B
.eh_frame:000000000001C6CD                 db  0Eh
.eh_frame:000000000001C6CE                 db  28h ; (
.eh_frame:000000000001C6CF                 db  8Ch
.eh_frame:000000000001C6D0                 db    5
.eh_frame:000000000001C6D1                 db  44h ; D
.eh_frame:000000000001C6D2                 db  0Eh
.eh_frame:000000000001C6D3                 db  30h ; 0
.eh_frame:000000000001C6D4                 db  86h
.eh_frame:000000000001C6D5                 db    6
.eh_frame:000000000001C6D6                 db  41h ; A
.eh_frame:000000000001C6D7                 db  0Eh
.eh_frame:000000000001C6D8                 db  38h ; 8
.eh_frame:000000000001C6D9                 db  83h
.eh_frame:000000000001C6DA                 db    7
.eh_frame:000000000001C6DB                 db  50h ; P
.eh_frame:000000000001C6DC                 db  0Eh
.eh_frame:000000000001C6DD                 db  40h ; @
.eh_frame:000000000001C6DE                 db  5Ah ; Z
.eh_frame:000000000001C6DF                 db  0Ah
.eh_frame:000000000001C6E0                 db  0Eh
.eh_frame:000000000001C6E1                 db  38h ; 8
.eh_frame:000000000001C6E2                 db  41h ; A
.eh_frame:000000000001C6E3                 db  0Eh
.eh_frame:000000000001C6E4                 db  30h ; 0
.eh_frame:000000000001C6E5                 db  41h ; A
.eh_frame:000000000001C6E6                 db  0Eh
.eh_frame:000000000001C6E7                 db  28h ; (
.eh_frame:000000000001C6E8                 db  42h ; B
.eh_frame:000000000001C6E9                 db  0Eh
.eh_frame:000000000001C6EA                 db  20h
.eh_frame:000000000001C6EB                 db  42h ; B
.eh_frame:000000000001C6EC                 db  0Eh
.eh_frame:000000000001C6ED                 db  18h
.eh_frame:000000000001C6EE                 db  42h ; B
.eh_frame:000000000001C6EF                 db  0Eh
.eh_frame:000000000001C6F0                 db  10h
.eh_frame:000000000001C6F1                 db  42h ; B
.eh_frame:000000000001C6F2                 db  0Eh
.eh_frame:000000000001C6F3                 db    8
.eh_frame:000000000001C6F4                 db  41h ; A
.eh_frame:000000000001C6F5                 db  0Bh
.eh_frame:000000000001C6F6                 db    0
.eh_frame:000000000001C6F7                 db    0
.eh_frame:000000000001C6F8                 db  3Ch ; <
.eh_frame:000000000001C6F9                 db    0
.eh_frame:000000000001C6FA                 db    0
.eh_frame:000000000001C6FB                 db    0
.eh_frame:000000000001C6FC                 db  7Ch ; |
.eh_frame:000000000001C6FD                 db  10h
.eh_frame:000000000001C6FE                 db    0
.eh_frame:000000000001C6FF                 db    0
.eh_frame:000000000001C700                 db  80h
.eh_frame:000000000001C701                 db 0FDh
.eh_frame:000000000001C702                 db 0FEh
.eh_frame:000000000001C703                 db 0FFh
.eh_frame:000000000001C704                 db  4Dh ; M
.eh_frame:000000000001C705                 db    0
.eh_frame:000000000001C706                 db    0
.eh_frame:000000000001C707                 db    0
.eh_frame:000000000001C708                 db    0
.eh_frame:000000000001C709                 db  42h ; B
.eh_frame:000000000001C70A                 db  0Eh
.eh_frame:000000000001C70B                 db  10h
.eh_frame:000000000001C70C                 db  8Eh
.eh_frame:000000000001C70D                 db    2
.eh_frame:000000000001C70E                 db  42h ; B
.eh_frame:000000000001C70F                 db  0Eh
.eh_frame:000000000001C710                 db  18h
.eh_frame:000000000001C711                 db  8Dh
.eh_frame:000000000001C712                 db    3
.eh_frame:000000000001C713                 db  42h ; B
.eh_frame:000000000001C714                 db  0Eh
.eh_frame:000000000001C715                 db  20h
.eh_frame:000000000001C716                 db  8Ch
.eh_frame:000000000001C717                 db    4
.eh_frame:000000000001C718                 db  41h ; A
.eh_frame:000000000001C719                 db  0Eh
.eh_frame:000000000001C71A                 db  28h ; (
.eh_frame:000000000001C71B                 db  86h
.eh_frame:000000000001C71C                 db    5
.eh_frame:000000000001C71D                 db  41h ; A
.eh_frame:000000000001C71E                 db  0Eh
.eh_frame:000000000001C71F                 db  30h ; 0
.eh_frame:000000000001C720                 db  83h
.eh_frame:000000000001C721                 db    6
.eh_frame:000000000001C722                 db  7Ah ; z
.eh_frame:000000000001C723                 db  0Eh
.eh_frame:000000000001C724                 db  28h ; (
.eh_frame:000000000001C725                 db  44h ; D
.eh_frame:000000000001C726                 db  0Eh
.eh_frame:000000000001C727                 db  20h
.eh_frame:000000000001C728                 db  42h ; B
.eh_frame:000000000001C729                 db  0Eh
.eh_frame:000000000001C72A                 db  18h
.eh_frame:000000000001C72B                 db  42h ; B
.eh_frame:000000000001C72C                 db  0Eh
.eh_frame:000000000001C72D                 db  10h
.eh_frame:000000000001C72E                 db  42h ; B
.eh_frame:000000000001C72F                 db  0Eh
.eh_frame:000000000001C730                 db    8
.eh_frame:000000000001C731                 db    0
.eh_frame:000000000001C732                 db    0
.eh_frame:000000000001C733                 db    0
.eh_frame:000000000001C734                 db    0
.eh_frame:000000000001C735                 db    0
.eh_frame:000000000001C736                 db    0
.eh_frame:000000000001C737                 db    0
.eh_frame:000000000001C738                 db  14h
.eh_frame:000000000001C739                 db    0
.eh_frame:000000000001C73A                 db    0
.eh_frame:000000000001C73B                 db    0
.eh_frame:000000000001C73C                 db 0BCh
.eh_frame:000000000001C73D                 db  10h
.eh_frame:000000000001C73E                 db    0
.eh_frame:000000000001C73F                 db    0
.eh_frame:000000000001C740                 db  90h
.eh_frame:000000000001C741                 db 0FDh
.eh_frame:000000000001C742                 db 0FEh
.eh_frame:000000000001C743                 db 0FFh
.eh_frame:000000000001C744                 db  63h ; c
.eh_frame:000000000001C745                 db    0
.eh_frame:000000000001C746                 db    0
.eh_frame:000000000001C747                 db    0
.eh_frame:000000000001C748                 db    0
.eh_frame:000000000001C749                 db    0
.eh_frame:000000000001C74A                 db    0
.eh_frame:000000000001C74B                 db    0
.eh_frame:000000000001C74C                 db    0
.eh_frame:000000000001C74D                 db    0
.eh_frame:000000000001C74E                 db    0
.eh_frame:000000000001C74F                 db    0
.eh_frame:000000000001C750                 db  4Ch ; L
.eh_frame:000000000001C751                 db    0
.eh_frame:000000000001C752                 db    0
.eh_frame:000000000001C753                 db    0
.eh_frame:000000000001C754                 db 0D4h
.eh_frame:000000000001C755                 db  10h
.eh_frame:000000000001C756                 db    0
.eh_frame:000000000001C757                 db    0
.eh_frame:000000000001C758                 db 0E8h
.eh_frame:000000000001C759                 db 0FDh
.eh_frame:000000000001C75A                 db 0FEh
.eh_frame:000000000001C75B                 db 0FFh
.eh_frame:000000000001C75C                 db  36h ; 6
.eh_frame:000000000001C75D                 db    6
.eh_frame:000000000001C75E                 db    0
.eh_frame:000000000001C75F                 db    0
.eh_frame:000000000001C760                 db    0
.eh_frame:000000000001C761                 db  42h ; B
.eh_frame:000000000001C762                 db  0Eh
.eh_frame:000000000001C763                 db  10h
.eh_frame:000000000001C764                 db  8Fh
.eh_frame:000000000001C765                 db    2
.eh_frame:000000000001C766                 db  42h ; B
.eh_frame:000000000001C767                 db  0Eh
.eh_frame:000000000001C768                 db  18h
.eh_frame:000000000001C769                 db  8Eh
.eh_frame:000000000001C76A                 db    3
.eh_frame:000000000001C76B                 db  42h ; B
.eh_frame:000000000001C76C                 db  0Eh
.eh_frame:000000000001C76D                 db  20h
.eh_frame:000000000001C76E                 db  8Dh
.eh_frame:000000000001C76F                 db    4
.eh_frame:000000000001C770                 db  42h ; B
.eh_frame:000000000001C771                 db  0Eh
.eh_frame:000000000001C772                 db  28h ; (
.eh_frame:000000000001C773                 db  8Ch
.eh_frame:000000000001C774                 db    5
.eh_frame:000000000001C775                 db  41h ; A
.eh_frame:000000000001C776                 db  0Eh
.eh_frame:000000000001C777                 db  30h ; 0
.eh_frame:000000000001C778                 db  86h
.eh_frame:000000000001C779                 db    6
.eh_frame:000000000001C77A                 db  41h ; A
.eh_frame:000000000001C77B                 db  0Eh
.eh_frame:000000000001C77C                 db  38h ; 8
.eh_frame:000000000001C77D                 db  83h
.eh_frame:000000000001C77E                 db    7
.eh_frame:000000000001C77F                 db  47h ; G
.eh_frame:000000000001C780                 db  0Eh
.eh_frame:000000000001C781                 db 0A0h
.eh_frame:000000000001C782                 db    2
.eh_frame:000000000001C783                 db    3
.eh_frame:000000000001C784                 db  30h ; 0
.eh_frame:000000000001C785                 db    2
.eh_frame:000000000001C786                 db  0Ah
.eh_frame:000000000001C787                 db  0Eh
.eh_frame:000000000001C788                 db  38h ; 8
.eh_frame:000000000001C789                 db  41h ; A
.eh_frame:000000000001C78A                 db  0Eh
.eh_frame:000000000001C78B                 db  30h ; 0
.eh_frame:000000000001C78C                 db  41h ; A
.eh_frame:000000000001C78D                 db  0Eh
.eh_frame:000000000001C78E                 db  28h ; (
.eh_frame:000000000001C78F                 db  42h ; B
.eh_frame:000000000001C790                 db  0Eh
.eh_frame:000000000001C791                 db  20h
.eh_frame:000000000001C792                 db  42h ; B
.eh_frame:000000000001C793                 db  0Eh
.eh_frame:000000000001C794                 db  18h
.eh_frame:000000000001C795                 db  42h ; B
.eh_frame:000000000001C796                 db  0Eh
.eh_frame:000000000001C797                 db  10h
.eh_frame:000000000001C798                 db  42h ; B
.eh_frame:000000000001C799                 db  0Eh
.eh_frame:000000000001C79A                 db    8
.eh_frame:000000000001C79B                 db  45h ; E
.eh_frame:000000000001C79C                 db  0Bh
.eh_frame:000000000001C79D                 db    0
.eh_frame:000000000001C79E                 db    0
.eh_frame:000000000001C79F                 db    0
.eh_frame:000000000001C7A0                 db  10h
.eh_frame:000000000001C7A1                 db    0
.eh_frame:000000000001C7A2                 db    0
.eh_frame:000000000001C7A3                 db    0
.eh_frame:000000000001C7A4                 db  24h ; $
.eh_frame:000000000001C7A5                 db  11h
.eh_frame:000000000001C7A6                 db    0
.eh_frame:000000000001C7A7                 db    0
.eh_frame:000000000001C7A8                 db 0D8h
.eh_frame:000000000001C7A9                 db    3
.eh_frame:000000000001C7AA                 db 0FFh
.eh_frame:000000000001C7AB                 db 0FFh
.eh_frame:000000000001C7AC                 db    8
.eh_frame:000000000001C7AD                 db    0
.eh_frame:000000000001C7AE                 db    0
.eh_frame:000000000001C7AF                 db    0
.eh_frame:000000000001C7B0                 db    0
.eh_frame:000000000001C7B1                 db    0
.eh_frame:000000000001C7B2                 db    0
.eh_frame:000000000001C7B3                 db    0
.eh_frame:000000000001C7B4                 db  10h
.eh_frame:000000000001C7B5                 db    0
.eh_frame:000000000001C7B6                 db    0
.eh_frame:000000000001C7B7                 db    0
.eh_frame:000000000001C7B8                 db  38h ; 8
.eh_frame:000000000001C7B9                 db  11h
.eh_frame:000000000001C7BA                 db    0
.eh_frame:000000000001C7BB                 db    0
.eh_frame:000000000001C7BC                 db 0D4h
.eh_frame:000000000001C7BD                 db    3
.eh_frame:000000000001C7BE                 db 0FFh
.eh_frame:000000000001C7BF                 db 0FFh
.eh_frame:000000000001C7C0                 db    8
.eh_frame:000000000001C7C1                 db    0
.eh_frame:000000000001C7C2                 db    0
.eh_frame:000000000001C7C3                 db    0
.eh_frame:000000000001C7C4                 db    0
.eh_frame:000000000001C7C5                 db    0
.eh_frame:000000000001C7C6                 db    0
.eh_frame:000000000001C7C7                 db    0
.eh_frame:000000000001C7C8                 db  2Ch ; ,
.eh_frame:000000000001C7C9                 db    0
.eh_frame:000000000001C7CA                 db    0
.eh_frame:000000000001C7CB                 db    0
.eh_frame:000000000001C7CC                 db  4Ch ; L
.eh_frame:000000000001C7CD                 db  11h
.eh_frame:000000000001C7CE                 db    0
.eh_frame:000000000001C7CF                 db    0
.eh_frame:000000000001C7D0                 db 0D0h
.eh_frame:000000000001C7D1                 db    3
.eh_frame:000000000001C7D2                 db 0FFh
.eh_frame:000000000001C7D3                 db 0FFh
.eh_frame:000000000001C7D4                 db 0A4h
.eh_frame:000000000001C7D5                 db    0
.eh_frame:000000000001C7D6                 db    0
.eh_frame:000000000001C7D7                 db    0
.eh_frame:000000000001C7D8                 db    0
.eh_frame:000000000001C7D9                 db  41h ; A
.eh_frame:000000000001C7DA                 db  0Eh
.eh_frame:000000000001C7DB                 db  10h
.eh_frame:000000000001C7DC                 db  86h
.eh_frame:000000000001C7DD                 db    2
.eh_frame:000000000001C7DE                 db  41h ; A
.eh_frame:000000000001C7DF                 db  0Eh
.eh_frame:000000000001C7E0                 db  18h
.eh_frame:000000000001C7E1                 db  83h
.eh_frame:000000000001C7E2                 db    3
.eh_frame:000000000001C7E3                 db  44h ; D
.eh_frame:000000000001C7E4                 db  0Eh
.eh_frame:000000000001C7E5                 db  20h
.eh_frame:000000000001C7E6                 db  7Ah ; z
.eh_frame:000000000001C7E7                 db  0Ah
.eh_frame:000000000001C7E8                 db  0Eh
.eh_frame:000000000001C7E9                 db  18h
.eh_frame:000000000001C7EA                 db  41h ; A
.eh_frame:000000000001C7EB                 db  0Eh
.eh_frame:000000000001C7EC                 db  10h
.eh_frame:000000000001C7ED                 db  41h ; A
.eh_frame:000000000001C7EE                 db  0Eh
.eh_frame:000000000001C7EF                 db    8
.eh_frame:000000000001C7F0                 db  41h ; A
.eh_frame:000000000001C7F1                 db  0Bh
.eh_frame:000000000001C7F2                 db    0
.eh_frame:000000000001C7F3                 db    0
.eh_frame:000000000001C7F4                 db    0
.eh_frame:000000000001C7F5                 db    0
.eh_frame:000000000001C7F6                 db    0
.eh_frame:000000000001C7F7                 db    0
.eh_frame:000000000001C7F8                 db  30h ; 0
.eh_frame:000000000001C7F9                 db    0
.eh_frame:000000000001C7FA                 db    0
.eh_frame:000000000001C7FB                 db    0
.eh_frame:000000000001C7FC                 db  7Ch ; |
.eh_frame:000000000001C7FD                 db  11h
.eh_frame:000000000001C7FE                 db    0
.eh_frame:000000000001C7FF                 db    0
.eh_frame:000000000001C800                 db  50h ; P
.eh_frame:000000000001C801                 db    4
.eh_frame:000000000001C802                 db 0FFh
.eh_frame:000000000001C803                 db 0FFh
.eh_frame:000000000001C804                 db  5Dh ; ]
.eh_frame:000000000001C805                 db    0
.eh_frame:000000000001C806                 db    0
.eh_frame:000000000001C807                 db    0
.eh_frame:000000000001C808                 db    0
.eh_frame:000000000001C809                 db  41h ; A
.eh_frame:000000000001C80A                 db  0Eh
.eh_frame:000000000001C80B                 db  10h
.eh_frame:000000000001C80C                 db  86h
.eh_frame:000000000001C80D                 db    2
.eh_frame:000000000001C80E                 db  41h ; A
.eh_frame:000000000001C80F                 db  0Eh
.eh_frame:000000000001C810                 db  18h
.eh_frame:000000000001C811                 db  83h
.eh_frame:000000000001C812                 db    3
.eh_frame:000000000001C813                 db  49h ; I
.eh_frame:000000000001C814                 db  0Eh
.eh_frame:000000000001C815                 db  20h
.eh_frame:000000000001C816                 db  7Ch ; |
.eh_frame:000000000001C817                 db  0Ah
.eh_frame:000000000001C818                 db  0Eh
.eh_frame:000000000001C819                 db  18h
.eh_frame:000000000001C81A                 db  44h ; D
.eh_frame:000000000001C81B                 db  0Eh
.eh_frame:000000000001C81C                 db  10h
.eh_frame:000000000001C81D                 db  41h ; A
.eh_frame:000000000001C81E                 db  0Eh
.eh_frame:000000000001C81F                 db    8
.eh_frame:000000000001C820                 db  44h ; D
.eh_frame:000000000001C821                 db  0Bh
.eh_frame:000000000001C822                 db  44h ; D
.eh_frame:000000000001C823                 db  0Eh
.eh_frame:000000000001C824                 db  18h
.eh_frame:000000000001C825                 db  47h ; G
.eh_frame:000000000001C826                 db  0Eh
.eh_frame:000000000001C827                 db  10h
.eh_frame:000000000001C828                 db  41h ; A
.eh_frame:000000000001C829                 db  0Eh
.eh_frame:000000000001C82A                 db    8
.eh_frame:000000000001C82B                 db    0
.eh_frame:000000000001C82C                 db  28h ; (
.eh_frame:000000000001C82D                 db    0
.eh_frame:000000000001C82E                 db    0
.eh_frame:000000000001C82F                 db    0
.eh_frame:000000000001C830                 db 0B0h
.eh_frame:000000000001C831                 db  11h
.eh_frame:000000000001C832                 db    0
.eh_frame:000000000001C833                 db    0
.eh_frame:000000000001C834                 db  7Ch ; |
.eh_frame:000000000001C835                 db    4
.eh_frame:000000000001C836                 db 0FFh
.eh_frame:000000000001C837                 db 0FFh
.eh_frame:000000000001C838                 db  5Ah ; Z
.eh_frame:000000000001C839                 db    0
.eh_frame:000000000001C83A                 db    0
.eh_frame:000000000001C83B                 db    0
.eh_frame:000000000001C83C                 db    0
.eh_frame:000000000001C83D                 db  41h ; A
.eh_frame:000000000001C83E                 db  0Eh
.eh_frame:000000000001C83F                 db  10h
.eh_frame:000000000001C840                 db  86h
.eh_frame:000000000001C841                 db    2
.eh_frame:000000000001C842                 db  41h ; A
.eh_frame:000000000001C843                 db  0Eh
.eh_frame:000000000001C844                 db  18h
.eh_frame:000000000001C845                 db  83h
.eh_frame:000000000001C846                 db    3
.eh_frame:000000000001C847                 db  47h ; G
.eh_frame:000000000001C848                 db  0Eh
.eh_frame:000000000001C849                 db  20h
.eh_frame:000000000001C84A                 db    2
.eh_frame:000000000001C84B                 db  41h ; A
.eh_frame:000000000001C84C                 db  0Ah
.eh_frame:000000000001C84D                 db  0Eh
.eh_frame:000000000001C84E                 db  18h
.eh_frame:000000000001C84F                 db  44h ; D
.eh_frame:000000000001C850                 db  0Eh
.eh_frame:000000000001C851                 db  10h
.eh_frame:000000000001C852                 db  41h ; A
.eh_frame:000000000001C853                 db  0Eh
.eh_frame:000000000001C854                 db    8
.eh_frame:000000000001C855                 db  41h ; A
.eh_frame:000000000001C856                 db  0Bh
.eh_frame:000000000001C857                 db    0
.eh_frame:000000000001C858                 db  10h
.eh_frame:000000000001C859                 db    0
.eh_frame:000000000001C85A                 db    0
.eh_frame:000000000001C85B                 db    0
.eh_frame:000000000001C85C                 db 0DCh
.eh_frame:000000000001C85D                 db  11h
.eh_frame:000000000001C85E                 db    0
.eh_frame:000000000001C85F                 db    0
.eh_frame:000000000001C860                 db 0B0h
.eh_frame:000000000001C861                 db    4
.eh_frame:000000000001C862                 db 0FFh
.eh_frame:000000000001C863                 db 0FFh
.eh_frame:000000000001C864                 db  5Ch ; \
.eh_frame:000000000001C865                 db    0
.eh_frame:000000000001C866                 db    0
.eh_frame:000000000001C867                 db    0
.eh_frame:000000000001C868                 db    0
.eh_frame:000000000001C869                 db    0
.eh_frame:000000000001C86A                 db    0
.eh_frame:000000000001C86B                 db    0
.eh_frame:000000000001C86C                 db  28h ; (
.eh_frame:000000000001C86D                 db    0
.eh_frame:000000000001C86E                 db    0
.eh_frame:000000000001C86F                 db    0
.eh_frame:000000000001C870                 db 0F0h
.eh_frame:000000000001C871                 db  11h
.eh_frame:000000000001C872                 db    0
.eh_frame:000000000001C873                 db    0
.eh_frame:000000000001C874                 db 0FCh
.eh_frame:000000000001C875                 db    4
.eh_frame:000000000001C876                 db 0FFh
.eh_frame:000000000001C877                 db 0FFh
.eh_frame:000000000001C878                 db  47h ; G
.eh_frame:000000000001C879                 db    0
.eh_frame:000000000001C87A                 db    0
.eh_frame:000000000001C87B                 db    0
.eh_frame:000000000001C87C                 db    0
.eh_frame:000000000001C87D                 db  41h ; A
.eh_frame:000000000001C87E                 db  0Eh
.eh_frame:000000000001C87F                 db  10h
.eh_frame:000000000001C880                 db  83h
.eh_frame:000000000001C881                 db    2
.eh_frame:000000000001C882                 db  5Ah ; Z
.eh_frame:000000000001C883                 db  0Ah
.eh_frame:000000000001C884                 db  0Eh
.eh_frame:000000000001C885                 db    8
.eh_frame:000000000001C886                 db  45h ; E
.eh_frame:000000000001C887                 db  0Bh
.eh_frame:000000000001C888                 db  5Dh ; ]
.eh_frame:000000000001C889                 db  0Ah
.eh_frame:000000000001C88A                 db  0Eh
.eh_frame:000000000001C88B                 db    8
.eh_frame:000000000001C88C                 db  43h ; C
.eh_frame:000000000001C88D                 db  0Bh
.eh_frame:000000000001C88E                 db  46h ; F
.eh_frame:000000000001C88F                 db  0Eh
.eh_frame:000000000001C890                 db    8
.eh_frame:000000000001C891                 db    0
.eh_frame:000000000001C892                 db    0
.eh_frame:000000000001C893                 db    0
.eh_frame:000000000001C894                 db    0
.eh_frame:000000000001C895                 db    0
.eh_frame:000000000001C896                 db    0
.eh_frame:000000000001C897                 db    0
.eh_frame:000000000001C898                 db  14h
.eh_frame:000000000001C899                 db    0
.eh_frame:000000000001C89A                 db    0
.eh_frame:000000000001C89B                 db    0
.eh_frame:000000000001C89C                 db  1Ch
.eh_frame:000000000001C89D                 db  12h
.eh_frame:000000000001C89E                 db    0
.eh_frame:000000000001C89F                 db    0
.eh_frame:000000000001C8A0                 db  20h
.eh_frame:000000000001C8A1                 db    5
.eh_frame:000000000001C8A2                 db 0FFh
.eh_frame:000000000001C8A3                 db 0FFh
.eh_frame:000000000001C8A4                 db    3
.eh_frame:000000000001C8A5                 db    0
.eh_frame:000000000001C8A6                 db    0
.eh_frame:000000000001C8A7                 db    0
.eh_frame:000000000001C8A8                 db    0
.eh_frame:000000000001C8A9                 db    0
.eh_frame:000000000001C8AA                 db    0
.eh_frame:000000000001C8AB                 db    0
.eh_frame:000000000001C8AC                 db    0
.eh_frame:000000000001C8AD                 db    0
.eh_frame:000000000001C8AE                 db    0
.eh_frame:000000000001C8AF                 db    0
.eh_frame:000000000001C8B0                 db  5Ch ; \
.eh_frame:000000000001C8B1                 db    0
.eh_frame:000000000001C8B2                 db    0
.eh_frame:000000000001C8B3                 db    0
.eh_frame:000000000001C8B4                 db  34h ; 4
.eh_frame:000000000001C8B5                 db  12h
.eh_frame:000000000001C8B6                 db    0
.eh_frame:000000000001C8B7                 db    0
.eh_frame:000000000001C8B8                 db  18h
.eh_frame:000000000001C8B9                 db    5
.eh_frame:000000000001C8BA                 db 0FFh
.eh_frame:000000000001C8BB                 db 0FFh
.eh_frame:000000000001C8BC                 db  87h
.eh_frame:000000000001C8BD                 db    0
.eh_frame:000000000001C8BE                 db    0
.eh_frame:000000000001C8BF                 db    0
.eh_frame:000000000001C8C0                 db    0
.eh_frame:000000000001C8C1                 db  47h ; G
.eh_frame:000000000001C8C2                 db  0Eh
.eh_frame:000000000001C8C3                 db  10h
.eh_frame:000000000001C8C4                 db  8Dh
.eh_frame:000000000001C8C5                 db    2
.eh_frame:000000000001C8C6                 db  42h ; B
.eh_frame:000000000001C8C7                 db  0Eh
.eh_frame:000000000001C8C8                 db  18h
.eh_frame:000000000001C8C9                 db  8Ch
.eh_frame:000000000001C8CA                 db    3
.eh_frame:000000000001C8CB                 db  44h ; D
.eh_frame:000000000001C8CC                 db  0Eh
.eh_frame:000000000001C8CD                 db  20h
.eh_frame:000000000001C8CE                 db  86h
.eh_frame:000000000001C8CF                 db    4
.eh_frame:000000000001C8D0                 db  41h ; A
.eh_frame:000000000001C8D1                 db  0Eh
.eh_frame:000000000001C8D2                 db  28h ; (
.eh_frame:000000000001C8D3                 db  83h
.eh_frame:000000000001C8D4                 db    5
.eh_frame:000000000001C8D5                 db  4Fh ; O
.eh_frame:000000000001C8D6                 db  0Eh
.eh_frame:000000000001C8D7                 db  30h ; 0
.eh_frame:000000000001C8D8                 db  7Ch ; |
.eh_frame:000000000001C8D9                 db  0Ah
.eh_frame:000000000001C8DA                 db  0Eh
.eh_frame:000000000001C8DB                 db  28h ; (
.eh_frame:000000000001C8DC                 db  44h ; D
.eh_frame:000000000001C8DD                 db 0C3h
.eh_frame:000000000001C8DE                 db  0Eh
.eh_frame:000000000001C8DF                 db  20h
.eh_frame:000000000001C8E0                 db  41h ; A
.eh_frame:000000000001C8E1                 db 0C6h
.eh_frame:000000000001C8E2                 db  0Eh
.eh_frame:000000000001C8E3                 db  18h
.eh_frame:000000000001C8E4                 db  42h ; B
.eh_frame:000000000001C8E5                 db 0CCh
.eh_frame:000000000001C8E6                 db  0Eh
.eh_frame:000000000001C8E7                 db  10h
.eh_frame:000000000001C8E8                 db  42h ; B
.eh_frame:000000000001C8E9                 db 0CDh
.eh_frame:000000000001C8EA                 db  0Eh
.eh_frame:000000000001C8EB                 db    8
.eh_frame:000000000001C8EC                 db  4Eh ; N
.eh_frame:000000000001C8ED                 db  0Bh
.eh_frame:000000000001C8EE                 db  44h ; D
.eh_frame:000000000001C8EF                 db  0Eh
.eh_frame:000000000001C8F0                 db  28h ; (
.eh_frame:000000000001C8F1                 db  41h ; A
.eh_frame:000000000001C8F2                 db  0Eh
.eh_frame:000000000001C8F3                 db  20h
.eh_frame:000000000001C8F4                 db  41h ; A
.eh_frame:000000000001C8F5                 db  0Eh
.eh_frame:000000000001C8F6                 db  18h
.eh_frame:000000000001C8F7                 db  42h ; B
.eh_frame:000000000001C8F8                 db  0Eh
.eh_frame:000000000001C8F9                 db  10h
.eh_frame:000000000001C8FA                 db  42h ; B
.eh_frame:000000000001C8FB                 db  0Eh
.eh_frame:000000000001C8FC                 db    8
.eh_frame:000000000001C8FD                 db  46h ; F
.eh_frame:000000000001C8FE                 db 0C3h
.eh_frame:000000000001C8FF                 db 0C6h
.eh_frame:000000000001C900                 db 0CCh
.eh_frame:000000000001C901                 db 0CDh
.eh_frame:000000000001C902                 db  42h ; B
.eh_frame:000000000001C903                 db  0Eh
.eh_frame:000000000001C904                 db  30h ; 0
.eh_frame:000000000001C905                 db  83h
.eh_frame:000000000001C906                 db    5
.eh_frame:000000000001C907                 db  86h
.eh_frame:000000000001C908                 db    4
.eh_frame:000000000001C909                 db  8Ch
.eh_frame:000000000001C90A                 db    3
.eh_frame:000000000001C90B                 db  8Dh
.eh_frame:000000000001C90C                 db    2
.eh_frame:000000000001C90D                 db    0
.eh_frame:000000000001C90E                 db    0
.eh_frame:000000000001C90F                 db    0
.eh_frame:000000000001C910                 db  1Ch
.eh_frame:000000000001C911                 db    0
.eh_frame:000000000001C912                 db    0
.eh_frame:000000000001C913                 db    0
.eh_frame:000000000001C914                 db  94h
.eh_frame:000000000001C915                 db  12h
.eh_frame:000000000001C916                 db    0
.eh_frame:000000000001C917                 db    0
.eh_frame:000000000001C918                 db  48h ; H
.eh_frame:000000000001C919                 db    5
.eh_frame:000000000001C91A                 db 0FFh
.eh_frame:000000000001C91B                 db 0FFh
.eh_frame:000000000001C91C                 db  56h ; V
.eh_frame:000000000001C91D                 db    0
.eh_frame:000000000001C91E                 db    0
.eh_frame:000000000001C91F                 db    0
.eh_frame:000000000001C920                 db    0
.eh_frame:000000000001C921                 db  44h ; D
.eh_frame:000000000001C922                 db  0Eh
.eh_frame:000000000001C923                 db  30h ; 0
.eh_frame:000000000001C924                 db    2
.eh_frame:000000000001C925                 db  4Ch ; L
.eh_frame:000000000001C926                 db  0Ah
.eh_frame:000000000001C927                 db  0Eh
.eh_frame:000000000001C928                 db    8
.eh_frame:000000000001C929                 db  41h ; A
.eh_frame:000000000001C92A                 db  0Bh
.eh_frame:000000000001C92B                 db    0
.eh_frame:000000000001C92C                 db    0
.eh_frame:000000000001C92D                 db    0
.eh_frame:000000000001C92E                 db    0
.eh_frame:000000000001C92F                 db    0
.eh_frame:000000000001C930                 db  10h
.eh_frame:000000000001C931                 db    0
.eh_frame:000000000001C932                 db    0
.eh_frame:000000000001C933                 db    0
.eh_frame:000000000001C934                 db 0B4h
.eh_frame:000000000001C935                 db  12h
.eh_frame:000000000001C936                 db    0
.eh_frame:000000000001C937                 db    0
.eh_frame:000000000001C938                 db  88h
.eh_frame:000000000001C939                 db    5
.eh_frame:000000000001C93A                 db 0FFh
.eh_frame:000000000001C93B                 db 0FFh
.eh_frame:000000000001C93C                 db  83h
.eh_frame:000000000001C93D                 db    1
.eh_frame:000000000001C93E                 db    0
.eh_frame:000000000001C93F                 db    0
.eh_frame:000000000001C940                 db    0
.eh_frame:000000000001C941                 db    0
.eh_frame:000000000001C942                 db    0
.eh_frame:000000000001C943                 db    0
.eh_frame:000000000001C944                 db  10h
.eh_frame:000000000001C945                 db    0
.eh_frame:000000000001C946                 db    0
.eh_frame:000000000001C947                 db    0
.eh_frame:000000000001C948                 db 0C8h
.eh_frame:000000000001C949                 db  12h
.eh_frame:000000000001C94A                 db    0
.eh_frame:000000000001C94B                 db    0
.eh_frame:000000000001C94C                 db    4
.eh_frame:000000000001C94D                 db    7
.eh_frame:000000000001C94E                 db 0FFh
.eh_frame:000000000001C94F                 db 0FFh
.eh_frame:000000000001C950                 db    8
.eh_frame:000000000001C951                 db    0
.eh_frame:000000000001C952                 db    0
.eh_frame:000000000001C953                 db    0
.eh_frame:000000000001C954                 db    0
.eh_frame:000000000001C955                 db    0
.eh_frame:000000000001C956                 db    0
.eh_frame:000000000001C957                 db    0
.eh_frame:000000000001C958                 db  1Ch
.eh_frame:000000000001C959                 db    0
.eh_frame:000000000001C95A                 db    0
.eh_frame:000000000001C95B                 db    0
.eh_frame:000000000001C95C                 db 0DCh
.eh_frame:000000000001C95D                 db  12h
.eh_frame:000000000001C95E                 db    0
.eh_frame:000000000001C95F                 db    0
.eh_frame:000000000001C960                 db    0
.eh_frame:000000000001C961                 db    7
.eh_frame:000000000001C962                 db 0FFh
.eh_frame:000000000001C963                 db 0FFh
.eh_frame:000000000001C964                 db  18h
.eh_frame:000000000001C965                 db    0
.eh_frame:000000000001C966                 db    0
.eh_frame:000000000001C967                 db    0
.eh_frame:000000000001C968                 db    0
.eh_frame:000000000001C969                 db  44h ; D
.eh_frame:000000000001C96A                 db  0Eh
.eh_frame:000000000001C96B                 db  10h
.eh_frame:000000000001C96C                 db  4Eh ; N
.eh_frame:000000000001C96D                 db  0Ah
.eh_frame:000000000001C96E                 db  0Eh
.eh_frame:000000000001C96F                 db    8
.eh_frame:000000000001C970                 db  41h ; A
.eh_frame:000000000001C971                 db  0Bh
.eh_frame:000000000001C972                 db    0
.eh_frame:000000000001C973                 db    0
.eh_frame:000000000001C974                 db    0
.eh_frame:000000000001C975                 db    0
.eh_frame:000000000001C976                 db    0
.eh_frame:000000000001C977                 db    0
.eh_frame:000000000001C978                 db  4Ch ; L
.eh_frame:000000000001C979                 db    0
.eh_frame:000000000001C97A                 db    0
.eh_frame:000000000001C97B                 db    0
.eh_frame:000000000001C97C                 db 0FCh
.eh_frame:000000000001C97D                 db  12h
.eh_frame:000000000001C97E                 db    0
.eh_frame:000000000001C97F                 db    0
.eh_frame:000000000001C980                 db    0
.eh_frame:000000000001C981                 db    7
.eh_frame:000000000001C982                 db 0FFh
.eh_frame:000000000001C983                 db 0FFh
.eh_frame:000000000001C984                 db 0FFh
.eh_frame:000000000001C985                 db    0
.eh_frame:000000000001C986                 db    0
.eh_frame:000000000001C987                 db    0
.eh_frame:000000000001C988                 db    0
.eh_frame:000000000001C989                 db  42h ; B
.eh_frame:000000000001C98A                 db  0Eh
.eh_frame:000000000001C98B                 db  10h
.eh_frame:000000000001C98C                 db  8Fh
.eh_frame:000000000001C98D                 db    2
.eh_frame:000000000001C98E                 db  42h ; B
.eh_frame:000000000001C98F                 db  0Eh
.eh_frame:000000000001C990                 db  18h
.eh_frame:000000000001C991                 db  8Eh
.eh_frame:000000000001C992                 db    3
.eh_frame:000000000001C993                 db  45h ; E
.eh_frame:000000000001C994                 db  0Eh
.eh_frame:000000000001C995                 db  20h
.eh_frame:000000000001C996                 db  8Dh
.eh_frame:000000000001C997                 db    4
.eh_frame:000000000001C998                 db  42h ; B
.eh_frame:000000000001C999                 db  0Eh
.eh_frame:000000000001C99A                 db  28h ; (
.eh_frame:000000000001C99B                 db  8Ch
.eh_frame:000000000001C99C                 db    5
.eh_frame:000000000001C99D                 db  44h ; D
.eh_frame:000000000001C99E                 db  0Eh
.eh_frame:000000000001C99F                 db  30h ; 0
.eh_frame:000000000001C9A0                 db  86h
.eh_frame:000000000001C9A1                 db    6
.eh_frame:000000000001C9A2                 db  41h ; A
.eh_frame:000000000001C9A3                 db  0Eh
.eh_frame:000000000001C9A4                 db  38h ; 8
.eh_frame:000000000001C9A5                 db  83h
.eh_frame:000000000001C9A6                 db    7
.eh_frame:000000000001C9A7                 db  47h ; G
.eh_frame:000000000001C9A8                 db  0Eh
.eh_frame:000000000001C9A9                 db  50h ; P
.eh_frame:000000000001C9AA                 db    2
.eh_frame:000000000001C9AB                 db 0C3h
.eh_frame:000000000001C9AC                 db  0Ah
.eh_frame:000000000001C9AD                 db  0Eh
.eh_frame:000000000001C9AE                 db  38h ; 8
.eh_frame:000000000001C9AF                 db  44h ; D
.eh_frame:000000000001C9B0                 db  0Eh
.eh_frame:000000000001C9B1                 db  30h ; 0
.eh_frame:000000000001C9B2                 db  41h ; A
.eh_frame:000000000001C9B3                 db  0Eh
.eh_frame:000000000001C9B4                 db  28h ; (
.eh_frame:000000000001C9B5                 db  42h ; B
.eh_frame:000000000001C9B6                 db  0Eh
.eh_frame:000000000001C9B7                 db  20h
.eh_frame:000000000001C9B8                 db  42h ; B
.eh_frame:000000000001C9B9                 db  0Eh
.eh_frame:000000000001C9BA                 db  18h
.eh_frame:000000000001C9BB                 db  42h ; B
.eh_frame:000000000001C9BC                 db  0Eh
.eh_frame:000000000001C9BD                 db  10h
.eh_frame:000000000001C9BE                 db  42h ; B
.eh_frame:000000000001C9BF                 db  0Eh
.eh_frame:000000000001C9C0                 db    8
.eh_frame:000000000001C9C1                 db  49h ; I
.eh_frame:000000000001C9C2                 db  0Bh
.eh_frame:000000000001C9C3                 db    0
.eh_frame:000000000001C9C4                 db    0
.eh_frame:000000000001C9C5                 db    0
.eh_frame:000000000001C9C6                 db    0
.eh_frame:000000000001C9C7                 db    0
.eh_frame:000000000001C9C8                 db  10h
.eh_frame:000000000001C9C9                 db    0
.eh_frame:000000000001C9CA                 db    0
.eh_frame:000000000001C9CB                 db    0
.eh_frame:000000000001C9CC                 db  4Ch ; L
.eh_frame:000000000001C9CD                 db  13h
.eh_frame:000000000001C9CE                 db    0
.eh_frame:000000000001C9CF                 db    0
.eh_frame:000000000001C9D0                 db 0B0h
.eh_frame:000000000001C9D1                 db    7
.eh_frame:000000000001C9D2                 db 0FFh
.eh_frame:000000000001C9D3                 db 0FFh
.eh_frame:000000000001C9D4                 db 0C3h
.eh_frame:000000000001C9D5                 db    0
.eh_frame:000000000001C9D6                 db    0
.eh_frame:000000000001C9D7                 db    0
.eh_frame:000000000001C9D8                 db    0
.eh_frame:000000000001C9D9                 db    0
.eh_frame:000000000001C9DA                 db    0
.eh_frame:000000000001C9DB                 db    0
.eh_frame:000000000001C9DC                 db  48h ; H
.eh_frame:000000000001C9DD                 db    0
.eh_frame:000000000001C9DE                 db    0
.eh_frame:000000000001C9DF                 db    0
.eh_frame:000000000001C9E0                 db  60h ; `
.eh_frame:000000000001C9E1                 db  13h
.eh_frame:000000000001C9E2                 db    0
.eh_frame:000000000001C9E3                 db    0
.eh_frame:000000000001C9E4                 db  6Ch ; l
.eh_frame:000000000001C9E5                 db    8
.eh_frame:000000000001C9E6                 db 0FFh
.eh_frame:000000000001C9E7                 db 0FFh
.eh_frame:000000000001C9E8                 db  30h ; 0
.eh_frame:000000000001C9E9                 db    4
.eh_frame:000000000001C9EA                 db    0
.eh_frame:000000000001C9EB                 db    0
.eh_frame:000000000001C9EC                 db    0
.eh_frame:000000000001C9ED                 db  42h ; B
.eh_frame:000000000001C9EE                 db  0Eh
.eh_frame:000000000001C9EF                 db  10h
.eh_frame:000000000001C9F0                 db  8Fh
.eh_frame:000000000001C9F1                 db    2
.eh_frame:000000000001C9F2                 db  42h ; B
.eh_frame:000000000001C9F3                 db  0Eh
.eh_frame:000000000001C9F4                 db  18h
.eh_frame:000000000001C9F5                 db  8Eh
.eh_frame:000000000001C9F6                 db    3
.eh_frame:000000000001C9F7                 db  42h ; B
.eh_frame:000000000001C9F8                 db  0Eh
.eh_frame:000000000001C9F9                 db  20h
.eh_frame:000000000001C9FA                 db  8Dh
.eh_frame:000000000001C9FB                 db    4
.eh_frame:000000000001C9FC                 db  42h ; B
.eh_frame:000000000001C9FD                 db  0Eh
.eh_frame:000000000001C9FE                 db  28h ; (
.eh_frame:000000000001C9FF                 db  8Ch
.eh_frame:000000000001CA00                 db    5
.eh_frame:000000000001CA01                 db  41h ; A
.eh_frame:000000000001CA02                 db  0Eh
.eh_frame:000000000001CA03                 db  30h ; 0
.eh_frame:000000000001CA04                 db  86h
.eh_frame:000000000001CA05                 db    6
.eh_frame:000000000001CA06                 db  41h ; A
.eh_frame:000000000001CA07                 db  0Eh
.eh_frame:000000000001CA08                 db  38h ; 8
.eh_frame:000000000001CA09                 db  83h
.eh_frame:000000000001CA0A                 db    7
.eh_frame:000000000001CA0B                 db  4Ah ; J
.eh_frame:000000000001CA0C                 db  0Eh
.eh_frame:000000000001CA0D                 db  70h ; p
.eh_frame:000000000001CA0E                 db    3
.eh_frame:000000000001CA0F                 db  7Fh ; 
.eh_frame:000000000001CA10                 db    2
.eh_frame:000000000001CA11                 db  0Ah
.eh_frame:000000000001CA12                 db  0Eh
.eh_frame:000000000001CA13                 db  38h ; 8
.eh_frame:000000000001CA14                 db  41h ; A
.eh_frame:000000000001CA15                 db  0Eh
.eh_frame:000000000001CA16                 db  30h ; 0
.eh_frame:000000000001CA17                 db  41h ; A
.eh_frame:000000000001CA18                 db  0Eh
.eh_frame:000000000001CA19                 db  28h ; (
.eh_frame:000000000001CA1A                 db  42h ; B
.eh_frame:000000000001CA1B                 db  0Eh
.eh_frame:000000000001CA1C                 db  20h
.eh_frame:000000000001CA1D                 db  42h ; B
.eh_frame:000000000001CA1E                 db  0Eh
.eh_frame:000000000001CA1F                 db  18h
.eh_frame:000000000001CA20                 db  42h ; B
.eh_frame:000000000001CA21                 db  0Eh
.eh_frame:000000000001CA22                 db  10h
.eh_frame:000000000001CA23                 db  42h ; B
.eh_frame:000000000001CA24                 db  0Eh
.eh_frame:000000000001CA25                 db    8
.eh_frame:000000000001CA26                 db  43h ; C
.eh_frame:000000000001CA27                 db  0Bh
.eh_frame:000000000001CA28                 db  10h
.eh_frame:000000000001CA29                 db    0
.eh_frame:000000000001CA2A                 db    0
.eh_frame:000000000001CA2B                 db    0
.eh_frame:000000000001CA2C                 db 0ACh
.eh_frame:000000000001CA2D                 db  13h
.eh_frame:000000000001CA2E                 db    0
.eh_frame:000000000001CA2F                 db    0
.eh_frame:000000000001CA30                 db  50h ; P
.eh_frame:000000000001CA31                 db  0Ch
.eh_frame:000000000001CA32                 db 0FFh
.eh_frame:000000000001CA33                 db 0FFh
.eh_frame:000000000001CA34                 db  0Ah
.eh_frame:000000000001CA35                 db    0
.eh_frame:000000000001CA36                 db    0
.eh_frame:000000000001CA37                 db    0
.eh_frame:000000000001CA38                 db    0
.eh_frame:000000000001CA39                 db    0
.eh_frame:000000000001CA3A                 db    0
.eh_frame:000000000001CA3B                 db    0
.eh_frame:000000000001CA3C                 db  18h
.eh_frame:000000000001CA3D                 db    0
.eh_frame:000000000001CA3E                 db    0
.eh_frame:000000000001CA3F                 db    0
.eh_frame:000000000001CA40                 db 0C0h
.eh_frame:000000000001CA41                 db  13h
.eh_frame:000000000001CA42                 db    0
.eh_frame:000000000001CA43                 db    0
.eh_frame:000000000001CA44                 db  4Ch ; L
.eh_frame:000000000001CA45                 db  0Ch
.eh_frame:000000000001CA46                 db 0FFh
.eh_frame:000000000001CA47                 db 0FFh
.eh_frame:000000000001CA48                 db  41h ; A
.eh_frame:000000000001CA49                 db    0
.eh_frame:000000000001CA4A                 db    0
.eh_frame:000000000001CA4B                 db    0
.eh_frame:000000000001CA4C                 db    0
.eh_frame:000000000001CA4D                 db  44h ; D
.eh_frame:000000000001CA4E                 db  0Eh
.eh_frame:000000000001CA4F                 db  30h ; 0
.eh_frame:000000000001CA50                 db  77h ; w
.eh_frame:000000000001CA51                 db  0Ah
.eh_frame:000000000001CA52                 db  0Eh
.eh_frame:000000000001CA53                 db    8
.eh_frame:000000000001CA54                 db  41h ; A
.eh_frame:000000000001CA55                 db  0Bh
.eh_frame:000000000001CA56                 db    0
.eh_frame:000000000001CA57                 db    0
.eh_frame:000000000001CA58                 db  1Ch
.eh_frame:000000000001CA59                 db    0
.eh_frame:000000000001CA5A                 db    0
.eh_frame:000000000001CA5B                 db    0
.eh_frame:000000000001CA5C                 db 0DCh
.eh_frame:000000000001CA5D                 db  13h
.eh_frame:000000000001CA5E                 db    0
.eh_frame:000000000001CA5F                 db    0
.eh_frame:000000000001CA60                 db  80h
.eh_frame:000000000001CA61                 db  0Ch
.eh_frame:000000000001CA62                 db 0FFh
.eh_frame:000000000001CA63                 db 0FFh
.eh_frame:000000000001CA64                 db  60h ; `
.eh_frame:000000000001CA65                 db    0
.eh_frame:000000000001CA66                 db    0
.eh_frame:000000000001CA67                 db    0
.eh_frame:000000000001CA68                 db    0
.eh_frame:000000000001CA69                 db  44h ; D
.eh_frame:000000000001CA6A                 db  0Eh
.eh_frame:000000000001CA6B                 db  10h
.eh_frame:000000000001CA6C                 db  75h ; u
.eh_frame:000000000001CA6D                 db  0Ah
.eh_frame:000000000001CA6E                 db  0Eh
.eh_frame:000000000001CA6F                 db    8
.eh_frame:000000000001CA70                 db  47h ; G
.eh_frame:000000000001CA71                 db  0Bh
.eh_frame:000000000001CA72                 db  5Fh ; _
.eh_frame:000000000001CA73                 db  0Eh
.eh_frame:000000000001CA74                 db    8
.eh_frame:000000000001CA75                 db    0
.eh_frame:000000000001CA76                 db    0
.eh_frame:000000000001CA77                 db    0
.eh_frame:000000000001CA78                 db  10h
.eh_frame:000000000001CA79                 db    0
.eh_frame:000000000001CA7A                 db    0
.eh_frame:000000000001CA7B                 db    0
.eh_frame:000000000001CA7C                 db 0FCh
.eh_frame:000000000001CA7D                 db  13h
.eh_frame:000000000001CA7E                 db    0
.eh_frame:000000000001CA7F                 db    0
.eh_frame:000000000001CA80                 db 0C0h
.eh_frame:000000000001CA81                 db  0Ch
.eh_frame:000000000001CA82                 db 0FFh
.eh_frame:000000000001CA83                 db 0FFh
.eh_frame:000000000001CA84                 db  93h
.eh_frame:000000000001CA85                 db    0
.eh_frame:000000000001CA86                 db    0
.eh_frame:000000000001CA87                 db    0
.eh_frame:000000000001CA88                 db    0
.eh_frame:000000000001CA89                 db    0
.eh_frame:000000000001CA8A                 db    0
.eh_frame:000000000001CA8B                 db    0
.eh_frame:000000000001CA8C                 db  10h
.eh_frame:000000000001CA8D                 db    0
.eh_frame:000000000001CA8E                 db    0
.eh_frame:000000000001CA8F                 db    0
.eh_frame:000000000001CA90                 db  10h
.eh_frame:000000000001CA91                 db  14h
.eh_frame:000000000001CA92                 db    0
.eh_frame:000000000001CA93                 db    0
.eh_frame:000000000001CA94                 db  4Ch ; L
.eh_frame:000000000001CA95                 db  0Dh
.eh_frame:000000000001CA96                 db 0FFh
.eh_frame:000000000001CA97                 db 0FFh
.eh_frame:000000000001CA98                 db  10h
.eh_frame:000000000001CA99                 db    0
.eh_frame:000000000001CA9A                 db    0
.eh_frame:000000000001CA9B                 db    0
.eh_frame:000000000001CA9C                 db    0
.eh_frame:000000000001CA9D                 db    0
.eh_frame:000000000001CA9E                 db    0
.eh_frame:000000000001CA9F                 db    0
.eh_frame:000000000001CAA0                 db  10h
.eh_frame:000000000001CAA1                 db    0
.eh_frame:000000000001CAA2                 db    0
.eh_frame:000000000001CAA3                 db    0
.eh_frame:000000000001CAA4                 db  24h ; $
.eh_frame:000000000001CAA5                 db  14h
.eh_frame:000000000001CAA6                 db    0
.eh_frame:000000000001CAA7                 db    0
.eh_frame:000000000001CAA8                 db  48h ; H
.eh_frame:000000000001CAA9                 db  0Dh
.eh_frame:000000000001CAAA                 db 0FFh
.eh_frame:000000000001CAAB                 db 0FFh
.eh_frame:000000000001CAAC                 db    7
.eh_frame:000000000001CAAD                 db    0
.eh_frame:000000000001CAAE                 db    0
.eh_frame:000000000001CAAF                 db    0
.eh_frame:000000000001CAB0                 db    0
.eh_frame:000000000001CAB1                 db    0
.eh_frame:000000000001CAB2                 db    0
.eh_frame:000000000001CAB3                 db    0
.eh_frame:000000000001CAB4                 db  18h
.eh_frame:000000000001CAB5                 db    0
.eh_frame:000000000001CAB6                 db    0
.eh_frame:000000000001CAB7                 db    0
.eh_frame:000000000001CAB8                 db  38h ; 8
.eh_frame:000000000001CAB9                 db  14h
.eh_frame:000000000001CABA                 db    0
.eh_frame:000000000001CABB                 db    0
.eh_frame:000000000001CABC                 db  44h ; D
.eh_frame:000000000001CABD                 db  0Dh
.eh_frame:000000000001CABE                 db 0FFh
.eh_frame:000000000001CABF                 db 0FFh
.eh_frame:000000000001CAC0                 db  22h ; "
.eh_frame:000000000001CAC1                 db    0
.eh_frame:000000000001CAC2                 db    0
.eh_frame:000000000001CAC3                 db    0
.eh_frame:000000000001CAC4                 db    0
.eh_frame:000000000001CAC5                 db  41h ; A
.eh_frame:000000000001CAC6                 db  0Eh
.eh_frame:000000000001CAC7                 db  10h
.eh_frame:000000000001CAC8                 db  83h
.eh_frame:000000000001CAC9                 db    2
.eh_frame:000000000001CACA                 db  5Bh ; [
.eh_frame:000000000001CACB                 db  0Ah
.eh_frame:000000000001CACC                 db  0Eh
.eh_frame:000000000001CACD                 db    8
.eh_frame:000000000001CACE                 db  41h ; A
.eh_frame:000000000001CACF                 db  0Bh
.eh_frame:000000000001CAD0                 db  5Ch ; \
.eh_frame:000000000001CAD1                 db    0
.eh_frame:000000000001CAD2                 db    0
.eh_frame:000000000001CAD3                 db    0
.eh_frame:000000000001CAD4                 db  54h ; T
.eh_frame:000000000001CAD5                 db  14h
.eh_frame:000000000001CAD6                 db    0
.eh_frame:000000000001CAD7                 db    0
.eh_frame:000000000001CAD8                 db  58h ; X
.eh_frame:000000000001CAD9                 db  0Dh
.eh_frame:000000000001CADA                 db 0FFh
.eh_frame:000000000001CADB                 db 0FFh
.eh_frame:000000000001CADC                 db  1Eh
.eh_frame:000000000001CADD                 db    1
.eh_frame:000000000001CADE                 db    0
.eh_frame:000000000001CADF                 db    0
.eh_frame:000000000001CAE0                 db    0
.eh_frame:000000000001CAE1                 db  42h ; B
.eh_frame:000000000001CAE2                 db  0Eh
.eh_frame:000000000001CAE3                 db  10h
.eh_frame:000000000001CAE4                 db  8Eh
.eh_frame:000000000001CAE5                 db    2
.eh_frame:000000000001CAE6                 db  42h ; B
.eh_frame:000000000001CAE7                 db  0Eh
.eh_frame:000000000001CAE8                 db  18h
.eh_frame:000000000001CAE9                 db  8Dh
.eh_frame:000000000001CAEA                 db    3
.eh_frame:000000000001CAEB                 db  45h ; E
.eh_frame:000000000001CAEC                 db  0Eh
.eh_frame:000000000001CAED                 db  20h
.eh_frame:000000000001CAEE                 db  8Ch
.eh_frame:000000000001CAEF                 db    4
.eh_frame:000000000001CAF0                 db  41h ; A
.eh_frame:000000000001CAF1                 db  0Eh
.eh_frame:000000000001CAF2                 db  28h ; (
.eh_frame:000000000001CAF3                 db  86h
.eh_frame:000000000001CAF4                 db    5
.eh_frame:000000000001CAF5                 db  44h ; D
.eh_frame:000000000001CAF6                 db  0Eh
.eh_frame:000000000001CAF7                 db  30h ; 0
.eh_frame:000000000001CAF8                 db  83h
.eh_frame:000000000001CAF9                 db    6
.eh_frame:000000000001CAFA                 db    2
.eh_frame:000000000001CAFB                 db 0A1h
.eh_frame:000000000001CAFC                 db  0Ah
.eh_frame:000000000001CAFD                 db  0Eh
.eh_frame:000000000001CAFE                 db  28h ; (
.eh_frame:000000000001CAFF                 db  44h ; D
.eh_frame:000000000001CB00                 db  0Eh
.eh_frame:000000000001CB01                 db  20h
.eh_frame:000000000001CB02                 db  42h ; B
.eh_frame:000000000001CB03                 db  0Eh
.eh_frame:000000000001CB04                 db  18h
.eh_frame:000000000001CB05                 db  42h ; B
.eh_frame:000000000001CB06                 db  0Eh
.eh_frame:000000000001CB07                 db  10h
.eh_frame:000000000001CB08                 db  42h ; B
.eh_frame:000000000001CB09                 db  0Eh
.eh_frame:000000000001CB0A                 db    8
.eh_frame:000000000001CB0B                 db  47h ; G
.eh_frame:000000000001CB0C                 db  0Bh
.eh_frame:000000000001CB0D                 db  71h ; q
.eh_frame:000000000001CB0E                 db  0Ah
.eh_frame:000000000001CB0F                 db  0Eh
.eh_frame:000000000001CB10                 db  28h ; (
.eh_frame:000000000001CB11                 db  41h ; A
.eh_frame:000000000001CB12                 db  0Eh
.eh_frame:000000000001CB13                 db  20h
.eh_frame:000000000001CB14                 db  42h ; B
.eh_frame:000000000001CB15                 db  0Eh
.eh_frame:000000000001CB16                 db  18h
.eh_frame:000000000001CB17                 db  42h ; B
.eh_frame:000000000001CB18                 db  0Eh
.eh_frame:000000000001CB19                 db  10h
.eh_frame:000000000001CB1A                 db  42h ; B
.eh_frame:000000000001CB1B                 db  0Eh
.eh_frame:000000000001CB1C                 db    8
.eh_frame:000000000001CB1D                 db  48h ; H
.eh_frame:000000000001CB1E                 db  0Bh
.eh_frame:000000000001CB1F                 db  53h ; S
.eh_frame:000000000001CB20                 db  0Eh
.eh_frame:000000000001CB21                 db  28h ; (
.eh_frame:000000000001CB22                 db  44h ; D
.eh_frame:000000000001CB23                 db  0Eh
.eh_frame:000000000001CB24                 db  20h
.eh_frame:000000000001CB25                 db  42h ; B
.eh_frame:000000000001CB26                 db  0Eh
.eh_frame:000000000001CB27                 db  18h
.eh_frame:000000000001CB28                 db  42h ; B
.eh_frame:000000000001CB29                 db  0Eh
.eh_frame:000000000001CB2A                 db  10h
.eh_frame:000000000001CB2B                 db  42h ; B
.eh_frame:000000000001CB2C                 db  0Eh
.eh_frame:000000000001CB2D                 db    8
.eh_frame:000000000001CB2E                 db    0
.eh_frame:000000000001CB2F                 db    0
.eh_frame:000000000001CB30                 db  10h
.eh_frame:000000000001CB31                 db    0
.eh_frame:000000000001CB32                 db    0
.eh_frame:000000000001CB33                 db    0
.eh_frame:000000000001CB34                 db 0B4h
.eh_frame:000000000001CB35                 db  14h
.eh_frame:000000000001CB36                 db    0
.eh_frame:000000000001CB37                 db    0
.eh_frame:000000000001CB38                 db  18h
.eh_frame:000000000001CB39                 db  0Eh
.eh_frame:000000000001CB3A                 db 0FFh
.eh_frame:000000000001CB3B                 db 0FFh
.eh_frame:000000000001CB3C                 db  77h ; w
.eh_frame:000000000001CB3D                 db    0
.eh_frame:000000000001CB3E                 db    0
.eh_frame:000000000001CB3F                 db    0
.eh_frame:000000000001CB40                 db    0
.eh_frame:000000000001CB41                 db    0
.eh_frame:000000000001CB42                 db    0
.eh_frame:000000000001CB43                 db    0
.eh_frame:000000000001CB44                 db  5Ch ; \
.eh_frame:000000000001CB45                 db    0
.eh_frame:000000000001CB46                 db    0
.eh_frame:000000000001CB47                 db    0
.eh_frame:000000000001CB48                 db 0C8h
.eh_frame:000000000001CB49                 db  14h
.eh_frame:000000000001CB4A                 db    0
.eh_frame:000000000001CB4B                 db    0
.eh_frame:000000000001CB4C                 db  84h
.eh_frame:000000000001CB4D                 db  0Eh
.eh_frame:000000000001CB4E                 db 0FFh
.eh_frame:000000000001CB4F                 db 0FFh
.eh_frame:000000000001CB50                 db  40h ; @
.eh_frame:000000000001CB51                 db    1
.eh_frame:000000000001CB52                 db    0
.eh_frame:000000000001CB53                 db    0
.eh_frame:000000000001CB54                 db    0
.eh_frame:000000000001CB55                 db  42h ; B
.eh_frame:000000000001CB56                 db  0Eh
.eh_frame:000000000001CB57                 db  10h
.eh_frame:000000000001CB58                 db  8Fh
.eh_frame:000000000001CB59                 db    2
.eh_frame:000000000001CB5A                 db  42h ; B
.eh_frame:000000000001CB5B                 db  0Eh
.eh_frame:000000000001CB5C                 db  18h
.eh_frame:000000000001CB5D                 db  8Eh
.eh_frame:000000000001CB5E                 db    3
.eh_frame:000000000001CB5F                 db  42h ; B
.eh_frame:000000000001CB60                 db  0Eh
.eh_frame:000000000001CB61                 db  20h
.eh_frame:000000000001CB62                 db  8Dh
.eh_frame:000000000001CB63                 db    4
.eh_frame:000000000001CB64                 db  42h ; B
.eh_frame:000000000001CB65                 db  0Eh
.eh_frame:000000000001CB66                 db  28h ; (
.eh_frame:000000000001CB67                 db  8Ch
.eh_frame:000000000001CB68                 db    5
.eh_frame:000000000001CB69                 db  41h ; A
.eh_frame:000000000001CB6A                 db  0Eh
.eh_frame:000000000001CB6B                 db  30h ; 0
.eh_frame:000000000001CB6C                 db  86h
.eh_frame:000000000001CB6D                 db    6
.eh_frame:000000000001CB6E                 db  41h ; A
.eh_frame:000000000001CB6F                 db  0Eh
.eh_frame:000000000001CB70                 db  38h ; 8
.eh_frame:000000000001CB71                 db  83h
.eh_frame:000000000001CB72                 db    7
.eh_frame:000000000001CB73                 db  44h ; D
.eh_frame:000000000001CB74                 db  0Eh
.eh_frame:000000000001CB75                 db  40h ; @
.eh_frame:000000000001CB76                 db    2
.eh_frame:000000000001CB77                 db 0EEh
.eh_frame:000000000001CB78                 db  0Ah
.eh_frame:000000000001CB79                 db  0Eh
.eh_frame:000000000001CB7A                 db  38h ; 8
.eh_frame:000000000001CB7B                 db  46h ; F
.eh_frame:000000000001CB7C                 db  0Eh
.eh_frame:000000000001CB7D                 db  30h ; 0
.eh_frame:000000000001CB7E                 db  41h ; A
.eh_frame:000000000001CB7F                 db  0Eh
.eh_frame:000000000001CB80                 db  28h ; (
.eh_frame:000000000001CB81                 db  42h ; B
.eh_frame:000000000001CB82                 db  0Eh
.eh_frame:000000000001CB83                 db  20h
.eh_frame:000000000001CB84                 db  42h ; B
.eh_frame:000000000001CB85                 db  0Eh
.eh_frame:000000000001CB86                 db  18h
.eh_frame:000000000001CB87                 db  42h ; B
.eh_frame:000000000001CB88                 db  0Eh
.eh_frame:000000000001CB89                 db  10h
.eh_frame:000000000001CB8A                 db  42h ; B
.eh_frame:000000000001CB8B                 db  0Eh
.eh_frame:000000000001CB8C                 db    8
.eh_frame:000000000001CB8D                 db  45h ; E
.eh_frame:000000000001CB8E                 db  0Bh
.eh_frame:000000000001CB8F                 db  63h ; c
.eh_frame:000000000001CB90                 db  0Eh
.eh_frame:000000000001CB91                 db  38h ; 8
.eh_frame:000000000001CB92                 db  43h ; C
.eh_frame:000000000001CB93                 db  0Eh
.eh_frame:000000000001CB94                 db  30h ; 0
.eh_frame:000000000001CB95                 db  41h ; A
.eh_frame:000000000001CB96                 db  0Eh
.eh_frame:000000000001CB97                 db  28h ; (
.eh_frame:000000000001CB98                 db  42h ; B
.eh_frame:000000000001CB99                 db  0Eh
.eh_frame:000000000001CB9A                 db  20h
.eh_frame:000000000001CB9B                 db  42h ; B
.eh_frame:000000000001CB9C                 db  0Eh
.eh_frame:000000000001CB9D                 db  18h
.eh_frame:000000000001CB9E                 db  42h ; B
.eh_frame:000000000001CB9F                 db  0Eh
.eh_frame:000000000001CBA0                 db  10h
.eh_frame:000000000001CBA1                 db  42h ; B
.eh_frame:000000000001CBA2                 db  0Eh
.eh_frame:000000000001CBA3                 db    8
.eh_frame:000000000001CBA4                 db  10h
.eh_frame:000000000001CBA5                 db    0
.eh_frame:000000000001CBA6                 db    0
.eh_frame:000000000001CBA7                 db    0
.eh_frame:000000000001CBA8                 db  28h ; (
.eh_frame:000000000001CBA9                 db  15h
.eh_frame:000000000001CBAA                 db    0
.eh_frame:000000000001CBAB                 db    0
.eh_frame:000000000001CBAC                 db  64h ; d
.eh_frame:000000000001CBAD                 db  0Fh
.eh_frame:000000000001CBAE                 db 0FFh
.eh_frame:000000000001CBAF                 db 0FFh
.eh_frame:000000000001CBB0                 db    5
.eh_frame:000000000001CBB1                 db    0
.eh_frame:000000000001CBB2                 db    0
.eh_frame:000000000001CBB3                 db    0
.eh_frame:000000000001CBB4                 db    0
.eh_frame:000000000001CBB5                 db    0
.eh_frame:000000000001CBB6                 db    0
.eh_frame:000000000001CBB7                 db    0
.eh_frame:000000000001CBB8                 db  10h
.eh_frame:000000000001CBB9                 db    0
.eh_frame:000000000001CBBA                 db    0
.eh_frame:000000000001CBBB                 db    0
.eh_frame:000000000001CBBC                 db  3Ch ; <
.eh_frame:000000000001CBBD                 db  15h
.eh_frame:000000000001CBBE                 db    0
.eh_frame:000000000001CBBF                 db    0
.eh_frame:000000000001CBC0                 db  60h ; `
.eh_frame:000000000001CBC1                 db  0Fh
.eh_frame:000000000001CBC2                 db 0FFh
.eh_frame:000000000001CBC3                 db 0FFh
.eh_frame:000000000001CBC4                 db    5
.eh_frame:000000000001CBC5                 db    0
.eh_frame:000000000001CBC6                 db    0
.eh_frame:000000000001CBC7                 db    0
.eh_frame:000000000001CBC8                 db    0
.eh_frame:000000000001CBC9                 db    0
.eh_frame:000000000001CBCA                 db    0
.eh_frame:000000000001CBCB                 db    0
.eh_frame:000000000001CBCC                 db  10h
.eh_frame:000000000001CBCD                 db    0
.eh_frame:000000000001CBCE                 db    0
.eh_frame:000000000001CBCF                 db    0
.eh_frame:000000000001CBD0                 db  50h ; P
.eh_frame:000000000001CBD1                 db  15h
.eh_frame:000000000001CBD2                 db    0
.eh_frame:000000000001CBD3                 db    0
.eh_frame:000000000001CBD4                 db  5Ch ; \
.eh_frame:000000000001CBD5                 db  0Fh
.eh_frame:000000000001CBD6                 db 0FFh
.eh_frame:000000000001CBD7                 db 0FFh
.eh_frame:000000000001CBD8                 db    5
.eh_frame:000000000001CBD9                 db    0
.eh_frame:000000000001CBDA                 db    0
.eh_frame:000000000001CBDB                 db    0
.eh_frame:000000000001CBDC                 db    0
.eh_frame:000000000001CBDD                 db    0
.eh_frame:000000000001CBDE                 db    0
.eh_frame:000000000001CBDF                 db    0
.eh_frame:000000000001CBE0                 db  10h
.eh_frame:000000000001CBE1                 db    0
.eh_frame:000000000001CBE2                 db    0
.eh_frame:000000000001CBE3                 db    0
.eh_frame:000000000001CBE4                 db  64h ; d
.eh_frame:000000000001CBE5                 db  15h
.eh_frame:000000000001CBE6                 db    0
.eh_frame:000000000001CBE7                 db    0
.eh_frame:000000000001CBE8                 db  58h ; X
.eh_frame:000000000001CBE9                 db  0Fh
.eh_frame:000000000001CBEA                 db 0FFh
.eh_frame:000000000001CBEB                 db 0FFh
.eh_frame:000000000001CBEC                 db  49h ; I
.eh_frame:000000000001CBED                 db    0
.eh_frame:000000000001CBEE                 db    0
.eh_frame:000000000001CBEF                 db    0
.eh_frame:000000000001CBF0                 db    0
.eh_frame:000000000001CBF1                 db    0
.eh_frame:000000000001CBF2                 db    0
.eh_frame:000000000001CBF3                 db    0
.eh_frame:000000000001CBF4                 db  10h
.eh_frame:000000000001CBF5                 db    0
.eh_frame:000000000001CBF6                 db    0
.eh_frame:000000000001CBF7                 db    0
.eh_frame:000000000001CBF8                 db  78h ; x
.eh_frame:000000000001CBF9                 db  15h
.eh_frame:000000000001CBFA                 db    0
.eh_frame:000000000001CBFB                 db    0
.eh_frame:000000000001CBFC                 db  94h
.eh_frame:000000000001CBFD                 db  0Fh
.eh_frame:000000000001CBFE                 db 0FFh
.eh_frame:000000000001CBFF                 db 0FFh
.eh_frame:000000000001CC00                 db  58h ; X
.eh_frame:000000000001CC01                 db    0
.eh_frame:000000000001CC02                 db    0
.eh_frame:000000000001CC03                 db    0
.eh_frame:000000000001CC04                 db    0
.eh_frame:000000000001CC05                 db    0
.eh_frame:000000000001CC06                 db    0
.eh_frame:000000000001CC07                 db    0
.eh_frame:000000000001CC08                 db  38h ; 8
.eh_frame:000000000001CC09                 db    0
.eh_frame:000000000001CC0A                 db    0
.eh_frame:000000000001CC0B                 db    0
.eh_frame:000000000001CC0C                 db  8Ch
.eh_frame:000000000001CC0D                 db  15h
.eh_frame:000000000001CC0E                 db    0
.eh_frame:000000000001CC0F                 db    0
.eh_frame:000000000001CC10                 db 0E0h
.eh_frame:000000000001CC11                 db  0Fh
.eh_frame:000000000001CC12                 db 0FFh
.eh_frame:000000000001CC13                 db 0FFh
.eh_frame:000000000001CC14                 db  47h ; G
.eh_frame:000000000001CC15                 db    1
.eh_frame:000000000001CC16                 db    0
.eh_frame:000000000001CC17                 db    0
.eh_frame:000000000001CC18                 db    0
.eh_frame:000000000001CC19                 db  42h ; B
.eh_frame:000000000001CC1A                 db  0Eh
.eh_frame:000000000001CC1B                 db  10h
.eh_frame:000000000001CC1C                 db  8Dh
.eh_frame:000000000001CC1D                 db    2
.eh_frame:000000000001CC1E                 db  42h ; B
.eh_frame:000000000001CC1F                 db  0Eh
.eh_frame:000000000001CC20                 db  18h
.eh_frame:000000000001CC21                 db  8Ch
.eh_frame:000000000001CC22                 db    3
.eh_frame:000000000001CC23                 db  44h ; D
.eh_frame:000000000001CC24                 db  0Eh
.eh_frame:000000000001CC25                 db  20h
.eh_frame:000000000001CC26                 db  86h
.eh_frame:000000000001CC27                 db    4
.eh_frame:000000000001CC28                 db  41h ; A
.eh_frame:000000000001CC29                 db  0Eh
.eh_frame:000000000001CC2A                 db  28h ; (
.eh_frame:000000000001CC2B                 db  83h
.eh_frame:000000000001CC2C                 db    5
.eh_frame:000000000001CC2D                 db  46h ; F
.eh_frame:000000000001CC2E                 db  0Eh
.eh_frame:000000000001CC2F                 db  30h ; 0
.eh_frame:000000000001CC30                 db    2
.eh_frame:000000000001CC31                 db 0CDh
.eh_frame:000000000001CC32                 db  0Ah
.eh_frame:000000000001CC33                 db  0Eh
.eh_frame:000000000001CC34                 db  28h ; (
.eh_frame:000000000001CC35                 db  47h ; G
.eh_frame:000000000001CC36                 db  0Eh
.eh_frame:000000000001CC37                 db  20h
.eh_frame:000000000001CC38                 db  41h ; A
.eh_frame:000000000001CC39                 db  0Eh
.eh_frame:000000000001CC3A                 db  18h
.eh_frame:000000000001CC3B                 db  42h ; B
.eh_frame:000000000001CC3C                 db  0Eh
.eh_frame:000000000001CC3D                 db  10h
.eh_frame:000000000001CC3E                 db  42h ; B
.eh_frame:000000000001CC3F                 db  0Eh
.eh_frame:000000000001CC40                 db    8
.eh_frame:000000000001CC41                 db  58h ; X
.eh_frame:000000000001CC42                 db  0Bh
.eh_frame:000000000001CC43                 db    0
.eh_frame:000000000001CC44                 db  34h ; 4
.eh_frame:000000000001CC45                 db    0
.eh_frame:000000000001CC46                 db    0
.eh_frame:000000000001CC47                 db    0
.eh_frame:000000000001CC48                 db 0C8h
.eh_frame:000000000001CC49                 db  15h
.eh_frame:000000000001CC4A                 db    0
.eh_frame:000000000001CC4B                 db    0
.eh_frame:000000000001CC4C                 db 0F4h
.eh_frame:000000000001CC4D                 db  10h
.eh_frame:000000000001CC4E                 db 0FFh
.eh_frame:000000000001CC4F                 db 0FFh
.eh_frame:000000000001CC50                 db  5Bh ; [
.eh_frame:000000000001CC51                 db    0
.eh_frame:000000000001CC52                 db    0
.eh_frame:000000000001CC53                 db    0
.eh_frame:000000000001CC54                 db    0
.eh_frame:000000000001CC55                 db  42h ; B
.eh_frame:000000000001CC56                 db  0Eh
.eh_frame:000000000001CC57                 db  10h
.eh_frame:000000000001CC58                 db  8Ch
.eh_frame:000000000001CC59                 db    2
.eh_frame:000000000001CC5A                 db  41h ; A
.eh_frame:000000000001CC5B                 db  0Eh
.eh_frame:000000000001CC5C                 db  18h
.eh_frame:000000000001CC5D                 db  86h
.eh_frame:000000000001CC5E                 db    3
.eh_frame:000000000001CC5F                 db  44h ; D
.eh_frame:000000000001CC60                 db  0Eh
.eh_frame:000000000001CC61                 db  20h
.eh_frame:000000000001CC62                 db  83h
.eh_frame:000000000001CC63                 db    4
.eh_frame:000000000001CC64                 db  79h ; y
.eh_frame:000000000001CC65                 db  0Ah
.eh_frame:000000000001CC66                 db  0Eh
.eh_frame:000000000001CC67                 db  18h
.eh_frame:000000000001CC68                 db  44h ; D
.eh_frame:000000000001CC69                 db  0Eh
.eh_frame:000000000001CC6A                 db  10h
.eh_frame:000000000001CC6B                 db  42h ; B
.eh_frame:000000000001CC6C                 db  0Eh
.eh_frame:000000000001CC6D                 db    8
.eh_frame:000000000001CC6E                 db  4Ah ; J
.eh_frame:000000000001CC6F                 db  0Bh
.eh_frame:000000000001CC70                 db  44h ; D
.eh_frame:000000000001CC71                 db  0Eh
.eh_frame:000000000001CC72                 db  18h
.eh_frame:000000000001CC73                 db  41h ; A
.eh_frame:000000000001CC74                 db  0Eh
.eh_frame:000000000001CC75                 db  10h
.eh_frame:000000000001CC76                 db  45h ; E
.eh_frame:000000000001CC77                 db  0Eh
.eh_frame:000000000001CC78                 db    8
.eh_frame:000000000001CC79                 db    0
.eh_frame:000000000001CC7A                 db    0
.eh_frame:000000000001CC7B                 db    0
.eh_frame:000000000001CC7C                 db  10h
.eh_frame:000000000001CC7D                 db    0
.eh_frame:000000000001CC7E                 db    0
.eh_frame:000000000001CC7F                 db    0
.eh_frame:000000000001CC80                 db    0
.eh_frame:000000000001CC81                 db  16h
.eh_frame:000000000001CC82                 db    0
.eh_frame:000000000001CC83                 db    0
.eh_frame:000000000001CC84                 db  1Ch
.eh_frame:000000000001CC85                 db  11h
.eh_frame:000000000001CC86                 db 0FFh
.eh_frame:000000000001CC87                 db 0FFh
.eh_frame:000000000001CC88                 db  41h ; A
.eh_frame:000000000001CC89                 db    0
.eh_frame:000000000001CC8A                 db    0
.eh_frame:000000000001CC8B                 db    0
.eh_frame:000000000001CC8C                 db    0
.eh_frame:000000000001CC8D                 db  7Ch ; |
.eh_frame:000000000001CC8E                 db  0Eh
.eh_frame:000000000001CC8F                 db  10h
.eh_frame:000000000001CC90                 db  30h ; 0
.eh_frame:000000000001CC91                 db    0
.eh_frame:000000000001CC92                 db    0
.eh_frame:000000000001CC93                 db    0
.eh_frame:000000000001CC94                 db  14h
.eh_frame:000000000001CC95                 db  16h
.eh_frame:000000000001CC96                 db    0
.eh_frame:000000000001CC97                 db    0
.eh_frame:000000000001CC98                 db  58h ; X
.eh_frame:000000000001CC99                 db  11h
.eh_frame:000000000001CC9A                 db 0FFh
.eh_frame:000000000001CC9B                 db 0FFh
.eh_frame:000000000001CC9C                 db  72h ; r
.eh_frame:000000000001CC9D                 db    0
.eh_frame:000000000001CC9E                 db    0
.eh_frame:000000000001CC9F                 db    0
.eh_frame:000000000001CCA0                 db    0
.eh_frame:000000000001CCA1                 db  41h ; A
.eh_frame:000000000001CCA2                 db  0Eh
.eh_frame:000000000001CCA3                 db  10h
.eh_frame:000000000001CCA4                 db  86h
.eh_frame:000000000001CCA5                 db    2
.eh_frame:000000000001CCA6                 db  41h ; A
.eh_frame:000000000001CCA7                 db  0Eh
.eh_frame:000000000001CCA8                 db  18h
.eh_frame:000000000001CCA9                 db  83h
.eh_frame:000000000001CCAA                 db    3
.eh_frame:000000000001CCAB                 db  4Ah ; J
.eh_frame:000000000001CCAC                 db  0Eh
.eh_frame:000000000001CCAD                 db  20h
.eh_frame:000000000001CCAE                 db    2
.eh_frame:000000000001CCAF                 db  53h ; S
.eh_frame:000000000001CCB0                 db  0Ah
.eh_frame:000000000001CCB1                 db  0Eh
.eh_frame:000000000001CCB2                 db  18h
.eh_frame:000000000001CCB3                 db  41h ; A
.eh_frame:000000000001CCB4                 db  0Eh
.eh_frame:000000000001CCB5                 db  10h
.eh_frame:000000000001CCB6                 db  41h ; A
.eh_frame:000000000001CCB7                 db  0Eh
.eh_frame:000000000001CCB8                 db    8
.eh_frame:000000000001CCB9                 db  47h ; G
.eh_frame:000000000001CCBA                 db  0Bh
.eh_frame:000000000001CCBB                 db  47h ; G
.eh_frame:000000000001CCBC                 db  0Eh
.eh_frame:000000000001CCBD                 db  18h
.eh_frame:000000000001CCBE                 db  41h ; A
.eh_frame:000000000001CCBF                 db  0Eh
.eh_frame:000000000001CCC0                 db  10h
.eh_frame:000000000001CCC1                 db  41h ; A
.eh_frame:000000000001CCC2                 db  0Eh
.eh_frame:000000000001CCC3                 db    8
.eh_frame:000000000001CCC4                 db  10h
.eh_frame:000000000001CCC5                 db    0
.eh_frame:000000000001CCC6                 db    0
.eh_frame:000000000001CCC7                 db    0
.eh_frame:000000000001CCC8                 db  48h ; H
.eh_frame:000000000001CCC9                 db  16h
.eh_frame:000000000001CCCA                 db    0
.eh_frame:000000000001CCCB                 db    0
.eh_frame:000000000001CCCC                 db 0A4h
.eh_frame:000000000001CCCD                 db  11h
.eh_frame:000000000001CCCE                 db 0FFh
.eh_frame:000000000001CCCF                 db 0FFh
.eh_frame:000000000001CCD0                 db  65h ; e
.eh_frame:000000000001CCD1                 db    0
.eh_frame:000000000001CCD2                 db    0
.eh_frame:000000000001CCD3                 db    0
.eh_frame:000000000001CCD4                 db    0
.eh_frame:000000000001CCD5                 db    0
.eh_frame:000000000001CCD6                 db    0
.eh_frame:000000000001CCD7                 db    0
.eh_frame:000000000001CCD8                 db  48h ; H
.eh_frame:000000000001CCD9                 db    0
.eh_frame:000000000001CCDA                 db    0
.eh_frame:000000000001CCDB                 db    0
.eh_frame:000000000001CCDC                 db  5Ch ; \
.eh_frame:000000000001CCDD                 db  16h
.eh_frame:000000000001CCDE                 db    0
.eh_frame:000000000001CCDF                 db    0
.eh_frame:000000000001CCE0                 db    0
.eh_frame:000000000001CCE1                 db  12h
.eh_frame:000000000001CCE2                 db 0FFh
.eh_frame:000000000001CCE3                 db 0FFh
.eh_frame:000000000001CCE4                 db  6Ah ; j
.eh_frame:000000000001CCE5                 db    0
.eh_frame:000000000001CCE6                 db    0
.eh_frame:000000000001CCE7                 db    0
.eh_frame:000000000001CCE8                 db    0
.eh_frame:000000000001CCE9                 db  42h ; B
.eh_frame:000000000001CCEA                 db  0Eh
.eh_frame:000000000001CCEB                 db  10h
.eh_frame:000000000001CCEC                 db  8Fh
.eh_frame:000000000001CCED                 db    2
.eh_frame:000000000001CCEE                 db  42h ; B
.eh_frame:000000000001CCEF                 db  0Eh
.eh_frame:000000000001CCF0                 db  18h
.eh_frame:000000000001CCF1                 db  8Eh
.eh_frame:000000000001CCF2                 db    3
.eh_frame:000000000001CCF3                 db  42h ; B
.eh_frame:000000000001CCF4                 db  0Eh
.eh_frame:000000000001CCF5                 db  20h
.eh_frame:000000000001CCF6                 db  8Dh
.eh_frame:000000000001CCF7                 db    4
.eh_frame:000000000001CCF8                 db  42h ; B
.eh_frame:000000000001CCF9                 db  0Eh
.eh_frame:000000000001CCFA                 db  28h ; (
.eh_frame:000000000001CCFB                 db  8Ch
.eh_frame:000000000001CCFC                 db    5
.eh_frame:000000000001CCFD                 db  41h ; A
.eh_frame:000000000001CCFE                 db  0Eh
.eh_frame:000000000001CCFF                 db  30h ; 0
.eh_frame:000000000001CD00                 db  86h
.eh_frame:000000000001CD01                 db    6
.eh_frame:000000000001CD02                 db  41h ; A
.eh_frame:000000000001CD03                 db  0Eh
.eh_frame:000000000001CD04                 db  38h ; 8
.eh_frame:000000000001CD05                 db  83h
.eh_frame:000000000001CD06                 db    7
.eh_frame:000000000001CD07                 db  44h ; D
.eh_frame:000000000001CD08                 db  0Eh
.eh_frame:000000000001CD09                 db  40h ; @
.eh_frame:000000000001CD0A                 db    2
.eh_frame:000000000001CD0B                 db  4Ah ; J
.eh_frame:000000000001CD0C                 db  0Ah
.eh_frame:000000000001CD0D                 db  0Eh
.eh_frame:000000000001CD0E                 db  38h ; 8
.eh_frame:000000000001CD0F                 db  44h ; D
.eh_frame:000000000001CD10                 db  0Eh
.eh_frame:000000000001CD11                 db  30h ; 0
.eh_frame:000000000001CD12                 db  41h ; A
.eh_frame:000000000001CD13                 db  0Eh
.eh_frame:000000000001CD14                 db  28h ; (
.eh_frame:000000000001CD15                 db  42h ; B
.eh_frame:000000000001CD16                 db  0Eh
.eh_frame:000000000001CD17                 db  20h
.eh_frame:000000000001CD18                 db  42h ; B
.eh_frame:000000000001CD19                 db  0Eh
.eh_frame:000000000001CD1A                 db  18h
.eh_frame:000000000001CD1B                 db  42h ; B
.eh_frame:000000000001CD1C                 db  0Eh
.eh_frame:000000000001CD1D                 db  10h
.eh_frame:000000000001CD1E                 db  42h ; B
.eh_frame:000000000001CD1F                 db  0Eh
.eh_frame:000000000001CD20                 db    8
.eh_frame:000000000001CD21                 db  41h ; A
.eh_frame:000000000001CD22                 db  0Bh
.eh_frame:000000000001CD23                 db    0
.eh_frame:000000000001CD24                 db  10h
.eh_frame:000000000001CD25                 db    0
.eh_frame:000000000001CD26                 db    0
.eh_frame:000000000001CD27                 db    0
.eh_frame:000000000001CD28                 db 0A8h
.eh_frame:000000000001CD29                 db  16h
.eh_frame:000000000001CD2A                 db    0
.eh_frame:000000000001CD2B                 db    0
.eh_frame:000000000001CD2C                 db  24h ; $
.eh_frame:000000000001CD2D                 db  12h
.eh_frame:000000000001CD2E                 db 0FFh
.eh_frame:000000000001CD2F                 db 0FFh
.eh_frame:000000000001CD30                 db  31h ; 1
.eh_frame:000000000001CD31                 db    0
.eh_frame:000000000001CD32                 db    0
.eh_frame:000000000001CD33                 db    0
.eh_frame:000000000001CD34                 db    0
.eh_frame:000000000001CD35                 db    0
.eh_frame:000000000001CD36                 db    0
.eh_frame:000000000001CD37                 db    0
.eh_frame:000000000001CD38                 db  10h
.eh_frame:000000000001CD39                 db    0
.eh_frame:000000000001CD3A                 db    0
.eh_frame:000000000001CD3B                 db    0
.eh_frame:000000000001CD3C                 db 0BCh
.eh_frame:000000000001CD3D                 db  16h
.eh_frame:000000000001CD3E                 db    0
.eh_frame:000000000001CD3F                 db    0
.eh_frame:000000000001CD40                 db  50h ; P
.eh_frame:000000000001CD41                 db  12h
.eh_frame:000000000001CD42                 db 0FFh
.eh_frame:000000000001CD43                 db 0FFh
.eh_frame:000000000001CD44                 db  20h
.eh_frame:000000000001CD45                 db    0
.eh_frame:000000000001CD46                 db    0
.eh_frame:000000000001CD47                 db    0
.eh_frame:000000000001CD48                 db    0
.eh_frame:000000000001CD49                 db    0
.eh_frame:000000000001CD4A                 db    0
.eh_frame:000000000001CD4B                 db    0
.eh_frame:000000000001CD4C                 db  48h ; H
.eh_frame:000000000001CD4D                 db    0
.eh_frame:000000000001CD4E                 db    0
.eh_frame:000000000001CD4F                 db    0
.eh_frame:000000000001CD50                 db 0D0h
.eh_frame:000000000001CD51                 db  16h
.eh_frame:000000000001CD52                 db    0
.eh_frame:000000000001CD53                 db    0
.eh_frame:000000000001CD54                 db  5Ch ; \
.eh_frame:000000000001CD55                 db  12h
.eh_frame:000000000001CD56                 db 0FFh
.eh_frame:000000000001CD57                 db 0FFh
.eh_frame:000000000001CD58                 db 0B4h
.eh_frame:000000000001CD59                 db    1
.eh_frame:000000000001CD5A                 db    0
.eh_frame:000000000001CD5B                 db    0
.eh_frame:000000000001CD5C                 db    0
.eh_frame:000000000001CD5D                 db  42h ; B
.eh_frame:000000000001CD5E                 db  0Eh
.eh_frame:000000000001CD5F                 db  10h
.eh_frame:000000000001CD60                 db  8Fh
.eh_frame:000000000001CD61                 db    2
.eh_frame:000000000001CD62                 db  42h ; B
.eh_frame:000000000001CD63                 db  0Eh
.eh_frame:000000000001CD64                 db  18h
.eh_frame:000000000001CD65                 db  8Eh
.eh_frame:000000000001CD66                 db    3
.eh_frame:000000000001CD67                 db  49h ; I
.eh_frame:000000000001CD68                 db  0Eh
.eh_frame:000000000001CD69                 db  20h
.eh_frame:000000000001CD6A                 db  8Dh
.eh_frame:000000000001CD6B                 db    4
.eh_frame:000000000001CD6C                 db  42h ; B
.eh_frame:000000000001CD6D                 db  0Eh
.eh_frame:000000000001CD6E                 db  28h ; (
.eh_frame:000000000001CD6F                 db  8Ch
.eh_frame:000000000001CD70                 db    5
.eh_frame:000000000001CD71                 db  44h ; D
.eh_frame:000000000001CD72                 db  0Eh
.eh_frame:000000000001CD73                 db  30h ; 0
.eh_frame:000000000001CD74                 db  86h
.eh_frame:000000000001CD75                 db    6
.eh_frame:000000000001CD76                 db  41h ; A
.eh_frame:000000000001CD77                 db  0Eh
.eh_frame:000000000001CD78                 db  38h ; 8
.eh_frame:000000000001CD79                 db  83h
.eh_frame:000000000001CD7A                 db    7
.eh_frame:000000000001CD7B                 db  52h ; R
.eh_frame:000000000001CD7C                 db  0Eh
.eh_frame:000000000001CD7D                 db  40h ; @
.eh_frame:000000000001CD7E                 db    2
.eh_frame:000000000001CD7F                 db 0D8h
.eh_frame:000000000001CD80                 db  0Ah
.eh_frame:000000000001CD81                 db  0Eh
.eh_frame:000000000001CD82                 db  38h ; 8
.eh_frame:000000000001CD83                 db  44h ; D
.eh_frame:000000000001CD84                 db  0Eh
.eh_frame:000000000001CD85                 db  30h ; 0
.eh_frame:000000000001CD86                 db  41h ; A
.eh_frame:000000000001CD87                 db  0Eh
.eh_frame:000000000001CD88                 db  28h ; (
.eh_frame:000000000001CD89                 db  42h ; B
.eh_frame:000000000001CD8A                 db  0Eh
.eh_frame:000000000001CD8B                 db  20h
.eh_frame:000000000001CD8C                 db  42h ; B
.eh_frame:000000000001CD8D                 db  0Eh
.eh_frame:000000000001CD8E                 db  18h
.eh_frame:000000000001CD8F                 db  42h ; B
.eh_frame:000000000001CD90                 db  0Eh
.eh_frame:000000000001CD91                 db  10h
.eh_frame:000000000001CD92                 db  42h ; B
.eh_frame:000000000001CD93                 db  0Eh
.eh_frame:000000000001CD94                 db    8
.eh_frame:000000000001CD95                 db  45h ; E
.eh_frame:000000000001CD96                 db  0Bh
.eh_frame:000000000001CD97                 db    0
.eh_frame:000000000001CD98                 db  28h ; (
.eh_frame:000000000001CD99                 db    0
.eh_frame:000000000001CD9A                 db    0
.eh_frame:000000000001CD9B                 db    0
.eh_frame:000000000001CD9C                 db  1Ch
.eh_frame:000000000001CD9D                 db  17h
.eh_frame:000000000001CD9E                 db    0
.eh_frame:000000000001CD9F                 db    0
.eh_frame:000000000001CDA0                 db 0D0h
.eh_frame:000000000001CDA1                 db  13h
.eh_frame:000000000001CDA2                 db 0FFh
.eh_frame:000000000001CDA3                 db 0FFh
.eh_frame:000000000001CDA4                 db  90h
.eh_frame:000000000001CDA5                 db    0
.eh_frame:000000000001CDA6                 db    0
.eh_frame:000000000001CDA7                 db    0
.eh_frame:000000000001CDA8                 db    0
.eh_frame:000000000001CDA9                 db  42h ; B
.eh_frame:000000000001CDAA                 db  0Eh
.eh_frame:000000000001CDAB                 db  10h
.eh_frame:000000000001CDAC                 db  8Ch
.eh_frame:000000000001CDAD                 db    2
.eh_frame:000000000001CDAE                 db  41h ; A
.eh_frame:000000000001CDAF                 db  0Eh
.eh_frame:000000000001CDB0                 db  18h
.eh_frame:000000000001CDB1                 db  86h
.eh_frame:000000000001CDB2                 db    3
.eh_frame:000000000001CDB3                 db  44h ; D
.eh_frame:000000000001CDB4                 db  0Eh
.eh_frame:000000000001CDB5                 db  20h
.eh_frame:000000000001CDB6                 db  83h
.eh_frame:000000000001CDB7                 db    4
.eh_frame:000000000001CDB8                 db    2
.eh_frame:000000000001CDB9                 db  85h
.eh_frame:000000000001CDBA                 db  0Eh
.eh_frame:000000000001CDBB                 db  18h
.eh_frame:000000000001CDBC                 db  41h ; A
.eh_frame:000000000001CDBD                 db  0Eh
.eh_frame:000000000001CDBE                 db  10h
.eh_frame:000000000001CDBF                 db  42h ; B
.eh_frame:000000000001CDC0                 db  0Eh
.eh_frame:000000000001CDC1                 db    8
.eh_frame:000000000001CDC2                 db    0
.eh_frame:000000000001CDC3                 db    0
.eh_frame:000000000001CDC4                 db  28h ; (
.eh_frame:000000000001CDC5                 db    0
.eh_frame:000000000001CDC6                 db    0
.eh_frame:000000000001CDC7                 db    0
.eh_frame:000000000001CDC8                 db  48h ; H
.eh_frame:000000000001CDC9                 db  17h
.eh_frame:000000000001CDCA                 db    0
.eh_frame:000000000001CDCB                 db    0
.eh_frame:000000000001CDCC                 db  34h ; 4
.eh_frame:000000000001CDCD                 db  14h
.eh_frame:000000000001CDCE                 db 0FFh
.eh_frame:000000000001CDCF                 db 0FFh
.eh_frame:000000000001CDD0                 db 0D6h
.eh_frame:000000000001CDD1                 db    0
.eh_frame:000000000001CDD2                 db    0
.eh_frame:000000000001CDD3                 db    0
.eh_frame:000000000001CDD4                 db    0
.eh_frame:000000000001CDD5                 db  42h ; B
.eh_frame:000000000001CDD6                 db  0Eh
.eh_frame:000000000001CDD7                 db  10h
.eh_frame:000000000001CDD8                 db  8Ch
.eh_frame:000000000001CDD9                 db    2
.eh_frame:000000000001CDDA                 db  41h ; A
.eh_frame:000000000001CDDB                 db  0Eh
.eh_frame:000000000001CDDC                 db  18h
.eh_frame:000000000001CDDD                 db  86h
.eh_frame:000000000001CDDE                 db    3
.eh_frame:000000000001CDDF                 db  44h ; D
.eh_frame:000000000001CDE0                 db  0Eh
.eh_frame:000000000001CDE1                 db  20h
.eh_frame:000000000001CDE2                 db  83h
.eh_frame:000000000001CDE3                 db    4
.eh_frame:000000000001CDE4                 db    2
.eh_frame:000000000001CDE5                 db 0C4h
.eh_frame:000000000001CDE6                 db  0Eh
.eh_frame:000000000001CDE7                 db  18h
.eh_frame:000000000001CDE8                 db  44h ; D
.eh_frame:000000000001CDE9                 db  0Eh
.eh_frame:000000000001CDEA                 db  10h
.eh_frame:000000000001CDEB                 db  42h ; B
.eh_frame:000000000001CDEC                 db  0Eh
.eh_frame:000000000001CDED                 db    8
.eh_frame:000000000001CDEE                 db    0
.eh_frame:000000000001CDEF                 db    0
.eh_frame:000000000001CDF0                 db  34h ; 4
.eh_frame:000000000001CDF1                 db    0
.eh_frame:000000000001CDF2                 db    0
.eh_frame:000000000001CDF3                 db    0
.eh_frame:000000000001CDF4                 db  74h ; t
.eh_frame:000000000001CDF5                 db  17h
.eh_frame:000000000001CDF6                 db    0
.eh_frame:000000000001CDF7                 db    0
.eh_frame:000000000001CDF8                 db 0E8h
.eh_frame:000000000001CDF9                 db  14h
.eh_frame:000000000001CDFA                 db 0FFh
.eh_frame:000000000001CDFB                 db 0FFh
.eh_frame:000000000001CDFC                 db  3Eh ; >
.eh_frame:000000000001CDFD                 db    2
.eh_frame:000000000001CDFE                 db    0
.eh_frame:000000000001CDFF                 db    0
.eh_frame:000000000001CE00                 db    0
.eh_frame:000000000001CE01                 db  42h ; B
.eh_frame:000000000001CE02                 db  0Eh
.eh_frame:000000000001CE03                 db  10h
.eh_frame:000000000001CE04                 db  8Ch
.eh_frame:000000000001CE05                 db    2
.eh_frame:000000000001CE06                 db  41h ; A
.eh_frame:000000000001CE07                 db  0Eh
.eh_frame:000000000001CE08                 db  18h
.eh_frame:000000000001CE09                 db  86h
.eh_frame:000000000001CE0A                 db    3
.eh_frame:000000000001CE0B                 db  44h ; D
.eh_frame:000000000001CE0C                 db  0Eh
.eh_frame:000000000001CE0D                 db  20h
.eh_frame:000000000001CE0E                 db  83h
.eh_frame:000000000001CE0F                 db    4
.eh_frame:000000000001CE10                 db  44h ; D
.eh_frame:000000000001CE11                 db  0Eh
.eh_frame:000000000001CE12                 db  80h
.eh_frame:000000000001CE13                 db    1
.eh_frame:000000000001CE14                 db    3
.eh_frame:000000000001CE15                 db  91h
.eh_frame:000000000001CE16                 db    1
.eh_frame:000000000001CE17                 db  0Ah
.eh_frame:000000000001CE18                 db  0Eh
.eh_frame:000000000001CE19                 db  20h
.eh_frame:000000000001CE1A                 db  41h ; A
.eh_frame:000000000001CE1B                 db  0Eh
.eh_frame:000000000001CE1C                 db  18h
.eh_frame:000000000001CE1D                 db  41h ; A
.eh_frame:000000000001CE1E                 db  0Eh
.eh_frame:000000000001CE1F                 db  10h
.eh_frame:000000000001CE20                 db  42h ; B
.eh_frame:000000000001CE21                 db  0Eh
.eh_frame:000000000001CE22                 db    8
.eh_frame:000000000001CE23                 db  48h ; H
.eh_frame:000000000001CE24                 db  0Bh
.eh_frame:000000000001CE25                 db    0
.eh_frame:000000000001CE26                 db    0
.eh_frame:000000000001CE27                 db    0
.eh_frame:000000000001CE28                 db  38h ; 8
.eh_frame:000000000001CE29                 db    0
.eh_frame:000000000001CE2A                 db    0
.eh_frame:000000000001CE2B                 db    0
.eh_frame:000000000001CE2C                 db 0ACh
.eh_frame:000000000001CE2D                 db  17h
.eh_frame:000000000001CE2E                 db    0
.eh_frame:000000000001CE2F                 db    0
.eh_frame:000000000001CE30                 db 0F0h
.eh_frame:000000000001CE31                 db  16h
.eh_frame:000000000001CE32                 db 0FFh
.eh_frame:000000000001CE33                 db 0FFh
.eh_frame:000000000001CE34                 db  84h
.eh_frame:000000000001CE35                 db    2
.eh_frame:000000000001CE36                 db    0
.eh_frame:000000000001CE37                 db    0
.eh_frame:000000000001CE38                 db    0
.eh_frame:000000000001CE39                 db  42h ; B
.eh_frame:000000000001CE3A                 db  0Eh
.eh_frame:000000000001CE3B                 db  10h
.eh_frame:000000000001CE3C                 db  8Dh
.eh_frame:000000000001CE3D                 db    2
.eh_frame:000000000001CE3E                 db  42h ; B
.eh_frame:000000000001CE3F                 db  0Eh
.eh_frame:000000000001CE40                 db  18h
.eh_frame:000000000001CE41                 db  8Ch
.eh_frame:000000000001CE42                 db    3
.eh_frame:000000000001CE43                 db  41h ; A
.eh_frame:000000000001CE44                 db  0Eh
.eh_frame:000000000001CE45                 db  20h
.eh_frame:000000000001CE46                 db  86h
.eh_frame:000000000001CE47                 db    4
.eh_frame:000000000001CE48                 db  41h ; A
.eh_frame:000000000001CE49                 db  0Eh
.eh_frame:000000000001CE4A                 db  28h ; (
.eh_frame:000000000001CE4B                 db  83h
.eh_frame:000000000001CE4C                 db    5
.eh_frame:000000000001CE4D                 db  44h ; D
.eh_frame:000000000001CE4E                 db  0Eh
.eh_frame:000000000001CE4F                 db  40h ; @
.eh_frame:000000000001CE50                 db    2
.eh_frame:000000000001CE51                 db  5Ah ; Z
.eh_frame:000000000001CE52                 db  0Ah
.eh_frame:000000000001CE53                 db  0Eh
.eh_frame:000000000001CE54                 db  28h ; (
.eh_frame:000000000001CE55                 db  41h ; A
.eh_frame:000000000001CE56                 db  0Eh
.eh_frame:000000000001CE57                 db  20h
.eh_frame:000000000001CE58                 db  41h ; A
.eh_frame:000000000001CE59                 db  0Eh
.eh_frame:000000000001CE5A                 db  18h
.eh_frame:000000000001CE5B                 db  42h ; B
.eh_frame:000000000001CE5C                 db  0Eh
.eh_frame:000000000001CE5D                 db  10h
.eh_frame:000000000001CE5E                 db  42h ; B
.eh_frame:000000000001CE5F                 db  0Eh
.eh_frame:000000000001CE60                 db    8
.eh_frame:000000000001CE61                 db  46h ; F
.eh_frame:000000000001CE62                 db  0Bh
.eh_frame:000000000001CE63                 db    0
.eh_frame:000000000001CE64                 db  20h
.eh_frame:000000000001CE65                 db    0
.eh_frame:000000000001CE66                 db    0
.eh_frame:000000000001CE67                 db    0
.eh_frame:000000000001CE68                 db 0E8h
.eh_frame:000000000001CE69                 db  17h
.eh_frame:000000000001CE6A                 db    0
.eh_frame:000000000001CE6B                 db    0
.eh_frame:000000000001CE6C                 db  44h ; D
.eh_frame:000000000001CE6D                 db  19h
.eh_frame:000000000001CE6E                 db 0FFh
.eh_frame:000000000001CE6F                 db 0FFh
.eh_frame:000000000001CE70                 db  59h ; Y
.eh_frame:000000000001CE71                 db    0
.eh_frame:000000000001CE72                 db    0
.eh_frame:000000000001CE73                 db    0
.eh_frame:000000000001CE74                 db    0
.eh_frame:000000000001CE75                 db  41h ; A
.eh_frame:000000000001CE76                 db  0Eh
.eh_frame:000000000001CE77                 db  10h
.eh_frame:000000000001CE78                 db  83h
.eh_frame:000000000001CE79                 db    2
.eh_frame:000000000001CE7A                 db  47h ; G
.eh_frame:000000000001CE7B                 db  0Eh
.eh_frame:000000000001CE7C                 db  20h
.eh_frame:000000000001CE7D                 db  7Ch ; |
.eh_frame:000000000001CE7E                 db  0Ah
.eh_frame:000000000001CE7F                 db  0Eh
.eh_frame:000000000001CE80                 db  10h
.eh_frame:000000000001CE81                 db  41h ; A
.eh_frame:000000000001CE82                 db  0Eh
.eh_frame:000000000001CE83                 db    8
.eh_frame:000000000001CE84                 db  4Bh ; K
.eh_frame:000000000001CE85                 db  0Bh
.eh_frame:000000000001CE86                 db    0
.eh_frame:000000000001CE87                 db    0
.eh_frame:000000000001CE88                 db  34h ; 4
.eh_frame:000000000001CE89                 db    0
.eh_frame:000000000001CE8A                 db    0
.eh_frame:000000000001CE8B                 db    0
.eh_frame:000000000001CE8C                 db  0Ch
.eh_frame:000000000001CE8D                 db  18h
.eh_frame:000000000001CE8E                 db    0
.eh_frame:000000000001CE8F                 db    0
.eh_frame:000000000001CE90                 db  80h
.eh_frame:000000000001CE91                 db  19h
.eh_frame:000000000001CE92                 db 0FFh
.eh_frame:000000000001CE93                 db 0FFh
.eh_frame:000000000001CE94                 db    3
.eh_frame:000000000001CE95                 db    2
.eh_frame:000000000001CE96                 db    0
.eh_frame:000000000001CE97                 db    0
.eh_frame:000000000001CE98                 db    0
.eh_frame:000000000001CE99                 db  42h ; B
.eh_frame:000000000001CE9A                 db  0Eh
.eh_frame:000000000001CE9B                 db  10h
.eh_frame:000000000001CE9C                 db  8Ch
.eh_frame:000000000001CE9D                 db    2
.eh_frame:000000000001CE9E                 db  41h ; A
.eh_frame:000000000001CE9F                 db  0Eh
.eh_frame:000000000001CEA0                 db  18h
.eh_frame:000000000001CEA1                 db  86h
.eh_frame:000000000001CEA2                 db    3
.eh_frame:000000000001CEA3                 db  46h ; F
.eh_frame:000000000001CEA4                 db  0Eh
.eh_frame:000000000001CEA5                 db  20h
.eh_frame:000000000001CEA6                 db  83h
.eh_frame:000000000001CEA7                 db    4
.eh_frame:000000000001CEA8                 db  47h ; G
.eh_frame:000000000001CEA9                 db  0Eh
.eh_frame:000000000001CEAA                 db  30h ; 0
.eh_frame:000000000001CEAB                 db    2
.eh_frame:000000000001CEAC                 db  4Ah ; J
.eh_frame:000000000001CEAD                 db  0Ah
.eh_frame:000000000001CEAE                 db  0Eh
.eh_frame:000000000001CEAF                 db  20h
.eh_frame:000000000001CEB0                 db  41h ; A
.eh_frame:000000000001CEB1                 db  0Eh
.eh_frame:000000000001CEB2                 db  18h
.eh_frame:000000000001CEB3                 db  41h ; A
.eh_frame:000000000001CEB4                 db  0Eh
.eh_frame:000000000001CEB5                 db  10h
.eh_frame:000000000001CEB6                 db  42h ; B
.eh_frame:000000000001CEB7                 db  0Eh
.eh_frame:000000000001CEB8                 db    8
.eh_frame:000000000001CEB9                 db  42h ; B
.eh_frame:000000000001CEBA                 db  0Bh
.eh_frame:000000000001CEBB                 db    0
.eh_frame:000000000001CEBC                 db    0
.eh_frame:000000000001CEBD                 db    0
.eh_frame:000000000001CEBE                 db    0
.eh_frame:000000000001CEBF                 db    0
.eh_frame:000000000001CEC0                 db  24h ; $
.eh_frame:000000000001CEC1                 db    0
.eh_frame:000000000001CEC2                 db    0
.eh_frame:000000000001CEC3                 db    0
.eh_frame:000000000001CEC4                 db  44h ; D
.eh_frame:000000000001CEC5                 db  18h
.eh_frame:000000000001CEC6                 db    0
.eh_frame:000000000001CEC7                 db    0
.eh_frame:000000000001CEC8                 db  58h ; X
.eh_frame:000000000001CEC9                 db  1Bh
.eh_frame:000000000001CECA                 db 0FFh
.eh_frame:000000000001CECB                 db 0FFh
.eh_frame:000000000001CECC                 db  27h ; '
.eh_frame:000000000001CECD                 db    0
.eh_frame:000000000001CECE                 db    0
.eh_frame:000000000001CECF                 db    0
.eh_frame:000000000001CED0                 db    0
.eh_frame:000000000001CED1                 db  41h ; A
.eh_frame:000000000001CED2                 db  0Eh
.eh_frame:000000000001CED3                 db  10h
.eh_frame:000000000001CED4                 db  86h
.eh_frame:000000000001CED5                 db    2
.eh_frame:000000000001CED6                 db  41h ; A
.eh_frame:000000000001CED7                 db  0Eh
.eh_frame:000000000001CED8                 db  18h
.eh_frame:000000000001CED9                 db  83h
.eh_frame:000000000001CEDA                 db    3
.eh_frame:000000000001CEDB                 db  4Ah ; J
.eh_frame:000000000001CEDC                 db  0Eh
.eh_frame:000000000001CEDD                 db  20h
.eh_frame:000000000001CEDE                 db  52h ; R
.eh_frame:000000000001CEDF                 db  0Eh
.eh_frame:000000000001CEE0                 db  18h
.eh_frame:000000000001CEE1                 db  44h ; D
.eh_frame:000000000001CEE2                 db  0Eh
.eh_frame:000000000001CEE3                 db  10h
.eh_frame:000000000001CEE4                 db  41h ; A
.eh_frame:000000000001CEE5                 db  0Eh
.eh_frame:000000000001CEE6                 db    8
.eh_frame:000000000001CEE7                 db    0
.eh_frame:000000000001CEE8                 db  10h
.eh_frame:000000000001CEE9                 db    0
.eh_frame:000000000001CEEA                 db    0
.eh_frame:000000000001CEEB                 db    0
.eh_frame:000000000001CEEC                 db  6Ch ; l
.eh_frame:000000000001CEED                 db  18h
.eh_frame:000000000001CEEE                 db    0
.eh_frame:000000000001CEEF                 db    0
.eh_frame:000000000001CEF0                 db  60h ; `
.eh_frame:000000000001CEF1                 db  1Bh
.eh_frame:000000000001CEF2                 db 0FFh
.eh_frame:000000000001CEF3                 db 0FFh
.eh_frame:000000000001CEF4                 db  0Dh
.eh_frame:000000000001CEF5                 db    0
.eh_frame:000000000001CEF6                 db    0
.eh_frame:000000000001CEF7                 db    0
.eh_frame:000000000001CEF8                 db    0
.eh_frame:000000000001CEF9                 db    0
.eh_frame:000000000001CEFA                 db    0
.eh_frame:000000000001CEFB                 db    0
.eh_frame:000000000001CEFC                 db  14h
.eh_frame:000000000001CEFD                 db    0
.eh_frame:000000000001CEFE                 db    0
.eh_frame:000000000001CEFF                 db    0
.eh_frame:000000000001CF00                 db  80h
.eh_frame:000000000001CF01                 db  18h
.eh_frame:000000000001CF02                 db    0
.eh_frame:000000000001CF03                 db    0
.eh_frame:000000000001CF04                 db  5Ch ; \
.eh_frame:000000000001CF05                 db  1Bh
.eh_frame:000000000001CF06                 db 0FFh
.eh_frame:000000000001CF07                 db 0FFh
.eh_frame:000000000001CF08                 db  2Eh ; .
.eh_frame:000000000001CF09                 db    0
.eh_frame:000000000001CF0A                 db    0
.eh_frame:000000000001CF0B                 db    0
.eh_frame:000000000001CF0C                 db    0
.eh_frame:000000000001CF0D                 db  5Eh ; ^
.eh_frame:000000000001CF0E                 db  0Eh
.eh_frame:000000000001CF0F                 db  10h
.eh_frame:000000000001CF10                 db  4Fh ; O
.eh_frame:000000000001CF11                 db  0Eh
.eh_frame:000000000001CF12                 db    8
.eh_frame:000000000001CF13                 db    0
.eh_frame:000000000001CF14                 db  14h
.eh_frame:000000000001CF15                 db    0
.eh_frame:000000000001CF16                 db    0
.eh_frame:000000000001CF17                 db    0
.eh_frame:000000000001CF18                 db  98h
.eh_frame:000000000001CF19                 db  18h
.eh_frame:000000000001CF1A                 db    0
.eh_frame:000000000001CF1B                 db    0
.eh_frame:000000000001CF1C                 db  74h ; t
.eh_frame:000000000001CF1D                 db  1Bh
.eh_frame:000000000001CF1E                 db 0FFh
.eh_frame:000000000001CF1F                 db 0FFh
.eh_frame:000000000001CF20                 db  33h ; 3
.eh_frame:000000000001CF21                 db    0
.eh_frame:000000000001CF22                 db    0
.eh_frame:000000000001CF23                 db    0
.eh_frame:000000000001CF24                 db    0
.eh_frame:000000000001CF25                 db  5Eh ; ^
.eh_frame:000000000001CF26                 db  0Eh
.eh_frame:000000000001CF27                 db  10h
.eh_frame:000000000001CF28                 db  54h ; T
.eh_frame:000000000001CF29                 db  0Eh
.eh_frame:000000000001CF2A                 db    8
.eh_frame:000000000001CF2B                 db    0
.eh_frame:000000000001CF2C                 db  18h
.eh_frame:000000000001CF2D                 db    0
.eh_frame:000000000001CF2E                 db    0
.eh_frame:000000000001CF2F                 db    0
.eh_frame:000000000001CF30                 db 0B0h
.eh_frame:000000000001CF31                 db  18h
.eh_frame:000000000001CF32                 db    0
.eh_frame:000000000001CF33                 db    0
.eh_frame:000000000001CF34                 db  9Ch
.eh_frame:000000000001CF35                 db  1Bh
.eh_frame:000000000001CF36                 db 0FFh
.eh_frame:000000000001CF37                 db 0FFh
.eh_frame:000000000001CF38                 db  15h
.eh_frame:000000000001CF39                 db    0
.eh_frame:000000000001CF3A                 db    0
.eh_frame:000000000001CF3B                 db    0
.eh_frame:000000000001CF3C                 db    0
.eh_frame:000000000001CF3D                 db  41h ; A
.eh_frame:000000000001CF3E                 db  0Eh
.eh_frame:000000000001CF3F                 db  10h
.eh_frame:000000000001CF40                 db  83h
.eh_frame:000000000001CF41                 db    2
.eh_frame:000000000001CF42                 db  4Fh ; O
.eh_frame:000000000001CF43                 db  0Eh
.eh_frame:000000000001CF44                 db    8
.eh_frame:000000000001CF45                 db    0
.eh_frame:000000000001CF46                 db    0
.eh_frame:000000000001CF47                 db    0
.eh_frame:000000000001CF48                 db  10h
.eh_frame:000000000001CF49                 db    0
.eh_frame:000000000001CF4A                 db    0
.eh_frame:000000000001CF4B                 db    0
.eh_frame:000000000001CF4C                 db 0CCh
.eh_frame:000000000001CF4D                 db  18h
.eh_frame:000000000001CF4E                 db    0
.eh_frame:000000000001CF4F                 db    0
.eh_frame:000000000001CF50                 db 0A0h
.eh_frame:000000000001CF51                 db  1Bh
.eh_frame:000000000001CF52                 db 0FFh
.eh_frame:000000000001CF53                 db 0FFh
.eh_frame:000000000001CF54                 db 0C7h
.eh_frame:000000000001CF55                 db    0
.eh_frame:000000000001CF56                 db    0
.eh_frame:000000000001CF57                 db    0
.eh_frame:000000000001CF58                 db    0
.eh_frame:000000000001CF59                 db    0
.eh_frame:000000000001CF5A                 db    0
.eh_frame:000000000001CF5B                 db    0
.eh_frame:000000000001CF5C                 db 0A4h
.eh_frame:000000000001CF5D                 db    0
.eh_frame:000000000001CF5E                 db    0
.eh_frame:000000000001CF5F                 db    0
.eh_frame:000000000001CF60                 db 0E0h
.eh_frame:000000000001CF61                 db  18h
.eh_frame:000000000001CF62                 db    0
.eh_frame:000000000001CF63                 db    0
.eh_frame:000000000001CF64                 db  5Ch ; \
.eh_frame:000000000001CF65                 db  1Ch
.eh_frame:000000000001CF66                 db 0FFh
.eh_frame:000000000001CF67                 db 0FFh
.eh_frame:000000000001CF68                 db    7
.eh_frame:000000000001CF69                 db  0Ah
.eh_frame:000000000001CF6A                 db    0
.eh_frame:000000000001CF6B                 db    0
.eh_frame:000000000001CF6C                 db    0
.eh_frame:000000000001CF6D                 db  42h ; B
.eh_frame:000000000001CF6E                 db  0Eh
.eh_frame:000000000001CF6F                 db  10h
.eh_frame:000000000001CF70                 db  8Fh
.eh_frame:000000000001CF71                 db    2
.eh_frame:000000000001CF72                 db  42h ; B
.eh_frame:000000000001CF73                 db  0Eh
.eh_frame:000000000001CF74                 db  18h
.eh_frame:000000000001CF75                 db  8Eh
.eh_frame:000000000001CF76                 db    3
.eh_frame:000000000001CF77                 db  44h ; D
.eh_frame:000000000001CF78                 db  0Eh
.eh_frame:000000000001CF79                 db  20h
.eh_frame:000000000001CF7A                 db  8Dh
.eh_frame:000000000001CF7B                 db    4
.eh_frame:000000000001CF7C                 db  42h ; B
.eh_frame:000000000001CF7D                 db  0Eh
.eh_frame:000000000001CF7E                 db  28h ; (
.eh_frame:000000000001CF7F                 db  8Ch
.eh_frame:000000000001CF80                 db    5
.eh_frame:000000000001CF81                 db  44h ; D
.eh_frame:000000000001CF82                 db  0Eh
.eh_frame:000000000001CF83                 db  30h ; 0
.eh_frame:000000000001CF84                 db  86h
.eh_frame:000000000001CF85                 db    6
.eh_frame:000000000001CF86                 db  41h ; A
.eh_frame:000000000001CF87                 db  0Eh
.eh_frame:000000000001CF88                 db  38h ; 8
.eh_frame:000000000001CF89                 db  83h
.eh_frame:000000000001CF8A                 db    7
.eh_frame:000000000001CF8B                 db  54h ; T
.eh_frame:000000000001CF8C                 db  0Eh
.eh_frame:000000000001CF8D                 db 0D0h
.eh_frame:000000000001CF8E                 db    1
.eh_frame:000000000001CF8F                 db    3
.eh_frame:000000000001CF90                 db  7Eh ; ~
.eh_frame:000000000001CF91                 db    1
.eh_frame:000000000001CF92                 db  0Eh
.eh_frame:000000000001CF93                 db 0E0h
.eh_frame:000000000001CF94                 db    1
.eh_frame:000000000001CF95                 db  6Eh ; n
.eh_frame:000000000001CF96                 db  0Eh
.eh_frame:000000000001CF97                 db 0D8h
.eh_frame:000000000001CF98                 db    1
.eh_frame:000000000001CF99                 db  41h ; A
.eh_frame:000000000001CF9A                 db  0Eh
.eh_frame:000000000001CF9B                 db 0D0h
.eh_frame:000000000001CF9C                 db    1
.eh_frame:000000000001CF9D                 db    3
.eh_frame:000000000001CF9E                 db  40h ; @
.eh_frame:000000000001CF9F                 db    1
.eh_frame:000000000001CFA0                 db  0Eh
.eh_frame:000000000001CFA1                 db 0E0h
.eh_frame:000000000001CFA2                 db    1
.eh_frame:000000000001CFA3                 db  75h ; u
.eh_frame:000000000001CFA4                 db  0Eh
.eh_frame:000000000001CFA5                 db 0D8h
.eh_frame:000000000001CFA6                 db    1
.eh_frame:000000000001CFA7                 db  41h ; A
.eh_frame:000000000001CFA8                 db  0Eh
.eh_frame:000000000001CFA9                 db 0D0h
.eh_frame:000000000001CFAA                 db    1
.eh_frame:000000000001CFAB                 db    2
.eh_frame:000000000001CFAC                 db 0EAh
.eh_frame:000000000001CFAD                 db  0Ah
.eh_frame:000000000001CFAE                 db  0Eh
.eh_frame:000000000001CFAF                 db  38h ; 8
.eh_frame:000000000001CFB0                 db  41h ; A
.eh_frame:000000000001CFB1                 db  0Eh
.eh_frame:000000000001CFB2                 db  30h ; 0
.eh_frame:000000000001CFB3                 db  41h ; A
.eh_frame:000000000001CFB4                 db  0Eh
.eh_frame:000000000001CFB5                 db  28h ; (
.eh_frame:000000000001CFB6                 db  42h ; B
.eh_frame:000000000001CFB7                 db  0Eh
.eh_frame:000000000001CFB8                 db  20h
.eh_frame:000000000001CFB9                 db  42h ; B
.eh_frame:000000000001CFBA                 db  0Eh
.eh_frame:000000000001CFBB                 db  18h
.eh_frame:000000000001CFBC                 db  42h ; B
.eh_frame:000000000001CFBD                 db  0Eh
.eh_frame:000000000001CFBE                 db  10h
.eh_frame:000000000001CFBF                 db  42h ; B
.eh_frame:000000000001CFC0                 db  0Eh
.eh_frame:000000000001CFC1                 db    8
.eh_frame:000000000001CFC2                 db  46h ; F
.eh_frame:000000000001CFC3                 db  0Bh
.eh_frame:000000000001CFC4                 db    3
.eh_frame:000000000001CFC5                 db  2Ch ; ,
.eh_frame:000000000001CFC6                 db    1
.eh_frame:000000000001CFC7                 db  0Eh
.eh_frame:000000000001CFC8                 db 0E0h
.eh_frame:000000000001CFC9                 db    1
.eh_frame:000000000001CFCA                 db  52h ; R
.eh_frame:000000000001CFCB                 db  0Eh
.eh_frame:000000000001CFCC                 db 0D8h
.eh_frame:000000000001CFCD                 db    1
.eh_frame:000000000001CFCE                 db  41h ; A
.eh_frame:000000000001CFCF                 db  0Eh
.eh_frame:000000000001CFD0                 db 0D0h
.eh_frame:000000000001CFD1                 db    1
.eh_frame:000000000001CFD2                 db  55h ; U
.eh_frame:000000000001CFD3                 db  0Eh
.eh_frame:000000000001CFD4                 db 0E0h
.eh_frame:000000000001CFD5                 db    1
.eh_frame:000000000001CFD6                 db  4Dh ; M
.eh_frame:000000000001CFD7                 db  0Eh
.eh_frame:000000000001CFD8                 db 0D8h
.eh_frame:000000000001CFD9                 db    1
.eh_frame:000000000001CFDA                 db  42h ; B
.eh_frame:000000000001CFDB                 db  0Eh
.eh_frame:000000000001CFDC                 db 0D0h
.eh_frame:000000000001CFDD                 db    1
.eh_frame:000000000001CFDE                 db    3
.eh_frame:000000000001CFDF                 db  51h ; Q
.eh_frame:000000000001CFE0                 db    1
.eh_frame:000000000001CFE1                 db  0Eh
.eh_frame:000000000001CFE2                 db 0E0h
.eh_frame:000000000001CFE3                 db    1
.eh_frame:000000000001CFE4                 db  77h ; w
.eh_frame:000000000001CFE5                 db  0Eh
.eh_frame:000000000001CFE6                 db 0D8h
.eh_frame:000000000001CFE7                 db    1
.eh_frame:000000000001CFE8                 db  41h ; A
.eh_frame:000000000001CFE9                 db  0Eh
.eh_frame:000000000001CFEA                 db 0D0h
.eh_frame:000000000001CFEB                 db    1
.eh_frame:000000000001CFEC                 db  5Dh ; ]
.eh_frame:000000000001CFED                 db  0Eh
.eh_frame:000000000001CFEE                 db 0E0h
.eh_frame:000000000001CFEF                 db    1
.eh_frame:000000000001CFF0                 db  71h ; q
.eh_frame:000000000001CFF1                 db  0Eh
.eh_frame:000000000001CFF2                 db 0D8h
.eh_frame:000000000001CFF3                 db    1
.eh_frame:000000000001CFF4                 db  45h ; E
.eh_frame:000000000001CFF5                 db  0Eh
.eh_frame:000000000001CFF6                 db 0D0h
.eh_frame:000000000001CFF7                 db    1
.eh_frame:000000000001CFF8                 db  63h ; c
.eh_frame:000000000001CFF9                 db  0Eh
.eh_frame:000000000001CFFA                 db 0E0h
.eh_frame:000000000001CFFB                 db    1
.eh_frame:000000000001CFFC                 db  4Ch ; L
.eh_frame:000000000001CFFD                 db  0Eh
.eh_frame:000000000001CFFE                 db 0D8h
.eh_frame:000000000001CFFF                 db    1
.eh_frame:000000000001D000                 db  42h ; B
.eh_frame:000000000001D001                 db  0Eh
.eh_frame:000000000001D002                 db 0D0h
.eh_frame:000000000001D003                 db    1
.eh_frame:000000000001D004                 db  38h ; 8
.eh_frame:000000000001D005                 db    0
.eh_frame:000000000001D006                 db    0
.eh_frame:000000000001D007                 db    0
.eh_frame:000000000001D008                 db  88h
.eh_frame:000000000001D009                 db  19h
.eh_frame:000000000001D00A                 db    0
.eh_frame:000000000001D00B                 db    0
.eh_frame:000000000001D00C                 db 0C4h
.eh_frame:000000000001D00D                 db  25h ; %
.eh_frame:000000000001D00E                 db 0FFh
.eh_frame:000000000001D00F                 db 0FFh
.eh_frame:000000000001D010                 db 0E6h
.eh_frame:000000000001D011                 db    1
.eh_frame:000000000001D012                 db    0
.eh_frame:000000000001D013                 db    0
.eh_frame:000000000001D014                 db    0
.eh_frame:000000000001D015                 db  42h ; B
.eh_frame:000000000001D016                 db  0Eh
.eh_frame:000000000001D017                 db  10h
.eh_frame:000000000001D018                 db  8Dh
.eh_frame:000000000001D019                 db    2
.eh_frame:000000000001D01A                 db  42h ; B
.eh_frame:000000000001D01B                 db  0Eh
.eh_frame:000000000001D01C                 db  18h
.eh_frame:000000000001D01D                 db  8Ch
.eh_frame:000000000001D01E                 db    3
.eh_frame:000000000001D01F                 db  44h ; D
.eh_frame:000000000001D020                 db  0Eh
.eh_frame:000000000001D021                 db  20h
.eh_frame:000000000001D022                 db  86h
.eh_frame:000000000001D023                 db    4
.eh_frame:000000000001D024                 db  41h ; A
.eh_frame:000000000001D025                 db  0Eh
.eh_frame:000000000001D026                 db  28h ; (
.eh_frame:000000000001D027                 db  83h
.eh_frame:000000000001D028                 db    5
.eh_frame:000000000001D029                 db  4Ah ; J
.eh_frame:000000000001D02A                 db  0Eh
.eh_frame:000000000001D02B                 db  40h ; @
.eh_frame:000000000001D02C                 db    2
.eh_frame:000000000001D02D                 db  7Ah ; z
.eh_frame:000000000001D02E                 db  0Ah
.eh_frame:000000000001D02F                 db  0Eh
.eh_frame:000000000001D030                 db  28h ; (
.eh_frame:000000000001D031                 db  41h ; A
.eh_frame:000000000001D032                 db  0Eh
.eh_frame:000000000001D033                 db  20h
.eh_frame:000000000001D034                 db  41h ; A
.eh_frame:000000000001D035                 db  0Eh
.eh_frame:000000000001D036                 db  18h
.eh_frame:000000000001D037                 db  42h ; B
.eh_frame:000000000001D038                 db  0Eh
.eh_frame:000000000001D039                 db  10h
.eh_frame:000000000001D03A                 db  42h ; B
.eh_frame:000000000001D03B                 db  0Eh
.eh_frame:000000000001D03C                 db    8
.eh_frame:000000000001D03D                 db  45h ; E
.eh_frame:000000000001D03E                 db  0Bh
.eh_frame:000000000001D03F                 db    0
.eh_frame:000000000001D040                 db  2Ch ; ,
.eh_frame:000000000001D041                 db    0
.eh_frame:000000000001D042                 db    0
.eh_frame:000000000001D043                 db    0
.eh_frame:000000000001D044                 db 0C4h
.eh_frame:000000000001D045                 db  19h
.eh_frame:000000000001D046                 db    0
.eh_frame:000000000001D047                 db    0
.eh_frame:000000000001D048                 db  78h ; x
.eh_frame:000000000001D049                 db  27h ; '
.eh_frame:000000000001D04A                 db 0FFh
.eh_frame:000000000001D04B                 db 0FFh
.eh_frame:000000000001D04C                 db  94h
.eh_frame:000000000001D04D                 db    0
.eh_frame:000000000001D04E                 db    0
.eh_frame:000000000001D04F                 db    0
.eh_frame:000000000001D050                 db    0
.eh_frame:000000000001D051                 db  42h ; B
.eh_frame:000000000001D052                 db  0Eh
.eh_frame:000000000001D053                 db  10h
.eh_frame:000000000001D054                 db  8Ch
.eh_frame:000000000001D055                 db    2
.eh_frame:000000000001D056                 db  41h ; A
.eh_frame:000000000001D057                 db  0Eh
.eh_frame:000000000001D058                 db  18h
.eh_frame:000000000001D059                 db  86h
.eh_frame:000000000001D05A                 db    3
.eh_frame:000000000001D05B                 db  41h ; A
.eh_frame:000000000001D05C                 db  0Eh
.eh_frame:000000000001D05D                 db  20h
.eh_frame:000000000001D05E                 db  83h
.eh_frame:000000000001D05F                 db    4
.eh_frame:000000000001D060                 db    2
.eh_frame:000000000001D061                 db  87h
.eh_frame:000000000001D062                 db  0Ah
.eh_frame:000000000001D063                 db  0Eh
.eh_frame:000000000001D064                 db  18h
.eh_frame:000000000001D065                 db  41h ; A
.eh_frame:000000000001D066                 db  0Eh
.eh_frame:000000000001D067                 db  10h
.eh_frame:000000000001D068                 db  42h ; B
.eh_frame:000000000001D069                 db  0Eh
.eh_frame:000000000001D06A                 db    8
.eh_frame:000000000001D06B                 db  42h ; B
.eh_frame:000000000001D06C                 db  0Bh
.eh_frame:000000000001D06D                 db    0
.eh_frame:000000000001D06E                 db    0
.eh_frame:000000000001D06F                 db    0
.eh_frame:000000000001D070                 db  34h ; 4
.eh_frame:000000000001D071                 db    0
.eh_frame:000000000001D072                 db    0
.eh_frame:000000000001D073                 db    0
.eh_frame:000000000001D074                 db 0F4h
.eh_frame:000000000001D075                 db  19h
.eh_frame:000000000001D076                 db    0
.eh_frame:000000000001D077                 db    0
.eh_frame:000000000001D078                 db 0E8h
.eh_frame:000000000001D079                 db  27h ; '
.eh_frame:000000000001D07A                 db 0FFh
.eh_frame:000000000001D07B                 db 0FFh
.eh_frame:000000000001D07C                 db 0F9h
.eh_frame:000000000001D07D                 db    0
.eh_frame:000000000001D07E                 db    0
.eh_frame:000000000001D07F                 db    0
.eh_frame:000000000001D080                 db    0
.eh_frame:000000000001D081                 db  42h ; B
.eh_frame:000000000001D082                 db  0Eh
.eh_frame:000000000001D083                 db  10h
.eh_frame:000000000001D084                 db  8Ch
.eh_frame:000000000001D085                 db    2
.eh_frame:000000000001D086                 db  41h ; A
.eh_frame:000000000001D087                 db  0Eh
.eh_frame:000000000001D088                 db  18h
.eh_frame:000000000001D089                 db  86h
.eh_frame:000000000001D08A                 db    3
.eh_frame:000000000001D08B                 db  44h ; D
.eh_frame:000000000001D08C                 db  0Eh
.eh_frame:000000000001D08D                 db  20h
.eh_frame:000000000001D08E                 db  83h
.eh_frame:000000000001D08F                 db    4
.eh_frame:000000000001D090                 db  7Ch ; |
.eh_frame:000000000001D091                 db  0Ah
.eh_frame:000000000001D092                 db  0Eh
.eh_frame:000000000001D093                 db  18h
.eh_frame:000000000001D094                 db  41h ; A
.eh_frame:000000000001D095                 db  0Eh
.eh_frame:000000000001D096                 db  10h
.eh_frame:000000000001D097                 db  42h ; B
.eh_frame:000000000001D098                 db  0Eh
.eh_frame:000000000001D099                 db    8
.eh_frame:000000000001D09A                 db  4Ah ; J
.eh_frame:000000000001D09B                 db  0Bh
.eh_frame:000000000001D09C                 db  78h ; x
.eh_frame:000000000001D09D                 db  0Ah
.eh_frame:000000000001D09E                 db  0Eh
.eh_frame:000000000001D09F                 db  18h
.eh_frame:000000000001D0A0                 db  43h ; C
.eh_frame:000000000001D0A1                 db  0Eh
.eh_frame:000000000001D0A2                 db  10h
.eh_frame:000000000001D0A3                 db  42h ; B
.eh_frame:000000000001D0A4                 db  0Eh
.eh_frame:000000000001D0A5                 db    8
.eh_frame:000000000001D0A6                 db  43h ; C
.eh_frame:000000000001D0A7                 db  0Bh
.eh_frame:000000000001D0A8                 db  2Ch ; ,
.eh_frame:000000000001D0A9                 db    0
.eh_frame:000000000001D0AA                 db    0
.eh_frame:000000000001D0AB                 db    0
.eh_frame:000000000001D0AC                 db  2Ch ; ,
.eh_frame:000000000001D0AD                 db  1Ah
.eh_frame:000000000001D0AE                 db    0
.eh_frame:000000000001D0AF                 db    0
.eh_frame:000000000001D0B0                 db 0B0h
.eh_frame:000000000001D0B1                 db  28h ; (
.eh_frame:000000000001D0B2                 db 0FFh
.eh_frame:000000000001D0B3                 db 0FFh
.eh_frame:000000000001D0B4                 db  94h
.eh_frame:000000000001D0B5                 db    0
.eh_frame:000000000001D0B6                 db    0
.eh_frame:000000000001D0B7                 db    0
.eh_frame:000000000001D0B8                 db    0
.eh_frame:000000000001D0B9                 db  42h ; B
.eh_frame:000000000001D0BA                 db  0Eh
.eh_frame:000000000001D0BB                 db  10h
.eh_frame:000000000001D0BC                 db  8Ch
.eh_frame:000000000001D0BD                 db    2
.eh_frame:000000000001D0BE                 db  41h ; A
.eh_frame:000000000001D0BF                 db  0Eh
.eh_frame:000000000001D0C0                 db  18h
.eh_frame:000000000001D0C1                 db  86h
.eh_frame:000000000001D0C2                 db    3
.eh_frame:000000000001D0C3                 db  41h ; A
.eh_frame:000000000001D0C4                 db  0Eh
.eh_frame:000000000001D0C5                 db  20h
.eh_frame:000000000001D0C6                 db  83h
.eh_frame:000000000001D0C7                 db    4
.eh_frame:000000000001D0C8                 db    2
.eh_frame:000000000001D0C9                 db  87h
.eh_frame:000000000001D0CA                 db  0Ah
.eh_frame:000000000001D0CB                 db  0Eh
.eh_frame:000000000001D0CC                 db  18h
.eh_frame:000000000001D0CD                 db  41h ; A
.eh_frame:000000000001D0CE                 db  0Eh
.eh_frame:000000000001D0CF                 db  10h
.eh_frame:000000000001D0D0                 db  42h ; B
.eh_frame:000000000001D0D1                 db  0Eh
.eh_frame:000000000001D0D2                 db    8
.eh_frame:000000000001D0D3                 db  42h ; B
.eh_frame:000000000001D0D4                 db  0Bh
.eh_frame:000000000001D0D5                 db    0
.eh_frame:000000000001D0D6                 db    0
.eh_frame:000000000001D0D7                 db    0
.eh_frame:000000000001D0D8                 db  34h ; 4
.eh_frame:000000000001D0D9                 db    0
.eh_frame:000000000001D0DA                 db    0
.eh_frame:000000000001D0DB                 db    0
.eh_frame:000000000001D0DC                 db  5Ch ; \
.eh_frame:000000000001D0DD                 db  1Ah
.eh_frame:000000000001D0DE                 db    0
.eh_frame:000000000001D0DF                 db    0
.eh_frame:000000000001D0E0                 db  20h
.eh_frame:000000000001D0E1                 db  29h ; )
.eh_frame:000000000001D0E2                 db 0FFh
.eh_frame:000000000001D0E3                 db 0FFh
.eh_frame:000000000001D0E4                 db 0F9h
.eh_frame:000000000001D0E5                 db    0
.eh_frame:000000000001D0E6                 db    0
.eh_frame:000000000001D0E7                 db    0
.eh_frame:000000000001D0E8                 db    0
.eh_frame:000000000001D0E9                 db  42h ; B
.eh_frame:000000000001D0EA                 db  0Eh
.eh_frame:000000000001D0EB                 db  10h
.eh_frame:000000000001D0EC                 db  8Ch
.eh_frame:000000000001D0ED                 db    2
.eh_frame:000000000001D0EE                 db  41h ; A
.eh_frame:000000000001D0EF                 db  0Eh
.eh_frame:000000000001D0F0                 db  18h
.eh_frame:000000000001D0F1                 db  86h
.eh_frame:000000000001D0F2                 db    3
.eh_frame:000000000001D0F3                 db  44h ; D
.eh_frame:000000000001D0F4                 db  0Eh
.eh_frame:000000000001D0F5                 db  20h
.eh_frame:000000000001D0F6                 db  83h
.eh_frame:000000000001D0F7                 db    4
.eh_frame:000000000001D0F8                 db  7Ch ; |
.eh_frame:000000000001D0F9                 db  0Ah
.eh_frame:000000000001D0FA                 db  0Eh
.eh_frame:000000000001D0FB                 db  18h
.eh_frame:000000000001D0FC                 db  41h ; A
.eh_frame:000000000001D0FD                 db  0Eh
.eh_frame:000000000001D0FE                 db  10h
.eh_frame:000000000001D0FF                 db  42h ; B
.eh_frame:000000000001D100                 db  0Eh
.eh_frame:000000000001D101                 db    8
.eh_frame:000000000001D102                 db  4Ah ; J
.eh_frame:000000000001D103                 db  0Bh
.eh_frame:000000000001D104                 db  78h ; x
.eh_frame:000000000001D105                 db  0Ah
.eh_frame:000000000001D106                 db  0Eh
.eh_frame:000000000001D107                 db  18h
.eh_frame:000000000001D108                 db  43h ; C
.eh_frame:000000000001D109                 db  0Eh
.eh_frame:000000000001D10A                 db  10h
.eh_frame:000000000001D10B                 db  42h ; B
.eh_frame:000000000001D10C                 db  0Eh
.eh_frame:000000000001D10D                 db    8
.eh_frame:000000000001D10E                 db  43h ; C
.eh_frame:000000000001D10F                 db  0Bh
.eh_frame:000000000001D110                 db  14h
.eh_frame:000000000001D111                 db    0
.eh_frame:000000000001D112                 db    0
.eh_frame:000000000001D113                 db    0
.eh_frame:000000000001D114                 db  94h
.eh_frame:000000000001D115                 db  1Ah
.eh_frame:000000000001D116                 db    0
.eh_frame:000000000001D117                 db    0
.eh_frame:000000000001D118                 db 0E8h
.eh_frame:000000000001D119                 db  29h ; )
.eh_frame:000000000001D11A                 db 0FFh
.eh_frame:000000000001D11B                 db 0FFh
.eh_frame:000000000001D11C                 db  9Ch
.eh_frame:000000000001D11D                 db    0
.eh_frame:000000000001D11E                 db    0
.eh_frame:000000000001D11F                 db    0
.eh_frame:000000000001D120                 db    0
.eh_frame:000000000001D121                 db    0
.eh_frame:000000000001D122                 db    0
.eh_frame:000000000001D123                 db    0
.eh_frame:000000000001D124                 db    0
.eh_frame:000000000001D125                 db    0
.eh_frame:000000000001D126                 db    0
.eh_frame:000000000001D127                 db    0
.eh_frame:000000000001D128                 db  14h
.eh_frame:000000000001D129                 db    0
.eh_frame:000000000001D12A                 db    0
.eh_frame:000000000001D12B                 db    0
.eh_frame:000000000001D12C                 db 0ACh
.eh_frame:000000000001D12D                 db  1Ah
.eh_frame:000000000001D12E                 db    0
.eh_frame:000000000001D12F                 db    0
.eh_frame:000000000001D130                 db  70h ; p
.eh_frame:000000000001D131                 db  2Ah ; *
.eh_frame:000000000001D132                 db 0FFh
.eh_frame:000000000001D133                 db 0FFh
.eh_frame:000000000001D134                 db  42h ; B
.eh_frame:000000000001D135                 db    0
.eh_frame:000000000001D136                 db    0
.eh_frame:000000000001D137                 db    0
.eh_frame:000000000001D138                 db    0
.eh_frame:000000000001D139                 db    0
.eh_frame:000000000001D13A                 db    0
.eh_frame:000000000001D13B                 db    0
.eh_frame:000000000001D13C                 db    0
.eh_frame:000000000001D13D                 db    0
.eh_frame:000000000001D13E                 db    0
.eh_frame:000000000001D13F                 db    0
.eh_frame:000000000001D140                 db  48h ; H
.eh_frame:000000000001D141                 db    0
.eh_frame:000000000001D142                 db    0
.eh_frame:000000000001D143                 db    0
.eh_frame:000000000001D144                 db 0C4h
.eh_frame:000000000001D145                 db  1Ah
.eh_frame:000000000001D146                 db    0
.eh_frame:000000000001D147                 db    0
.eh_frame:000000000001D148                 db 0A8h
.eh_frame:000000000001D149                 db  2Ah ; *
.eh_frame:000000000001D14A                 db 0FFh
.eh_frame:000000000001D14B                 db 0FFh
.eh_frame:000000000001D14C                 db 0C4h
.eh_frame:000000000001D14D                 db    3
.eh_frame:000000000001D14E                 db    0
.eh_frame:000000000001D14F                 db    0
.eh_frame:000000000001D150                 db    0
.eh_frame:000000000001D151                 db  42h ; B
.eh_frame:000000000001D152                 db  0Eh
.eh_frame:000000000001D153                 db  10h
.eh_frame:000000000001D154                 db  8Fh
.eh_frame:000000000001D155                 db    2
.eh_frame:000000000001D156                 db  42h ; B
.eh_frame:000000000001D157                 db  0Eh
.eh_frame:000000000001D158                 db  18h
.eh_frame:000000000001D159                 db  8Eh
.eh_frame:000000000001D15A                 db    3
.eh_frame:000000000001D15B                 db  45h ; E
.eh_frame:000000000001D15C                 db  0Eh
.eh_frame:000000000001D15D                 db  20h
.eh_frame:000000000001D15E                 db  8Dh
.eh_frame:000000000001D15F                 db    4
.eh_frame:000000000001D160                 db  42h ; B
.eh_frame:000000000001D161                 db  0Eh
.eh_frame:000000000001D162                 db  28h ; (
.eh_frame:000000000001D163                 db  8Ch
.eh_frame:000000000001D164                 db    5
.eh_frame:000000000001D165                 db  44h ; D
.eh_frame:000000000001D166                 db  0Eh
.eh_frame:000000000001D167                 db  30h ; 0
.eh_frame:000000000001D168                 db  86h
.eh_frame:000000000001D169                 db    6
.eh_frame:000000000001D16A                 db  41h ; A
.eh_frame:000000000001D16B                 db  0Eh
.eh_frame:000000000001D16C                 db  38h ; 8
.eh_frame:000000000001D16D                 db  83h
.eh_frame:000000000001D16E                 db    7
.eh_frame:000000000001D16F                 db  4Ah ; J
.eh_frame:000000000001D170                 db  0Eh
.eh_frame:000000000001D171                 db  70h ; p
.eh_frame:000000000001D172                 db    3
.eh_frame:000000000001D173                 db  2Eh ; .
.eh_frame:000000000001D174                 db    1
.eh_frame:000000000001D175                 db  0Ah
.eh_frame:000000000001D176                 db  0Eh
.eh_frame:000000000001D177                 db  38h ; 8
.eh_frame:000000000001D178                 db  44h ; D
.eh_frame:000000000001D179                 db  0Eh
.eh_frame:000000000001D17A                 db  30h ; 0
.eh_frame:000000000001D17B                 db  41h ; A
.eh_frame:000000000001D17C                 db  0Eh
.eh_frame:000000000001D17D                 db  28h ; (
.eh_frame:000000000001D17E                 db  42h ; B
.eh_frame:000000000001D17F                 db  0Eh
.eh_frame:000000000001D180                 db  20h
.eh_frame:000000000001D181                 db  42h ; B
.eh_frame:000000000001D182                 db  0Eh
.eh_frame:000000000001D183                 db  18h
.eh_frame:000000000001D184                 db  42h ; B
.eh_frame:000000000001D185                 db  0Eh
.eh_frame:000000000001D186                 db  10h
.eh_frame:000000000001D187                 db  42h ; B
.eh_frame:000000000001D188                 db  0Eh
.eh_frame:000000000001D189                 db    8
.eh_frame:000000000001D18A                 db  4Bh ; K
.eh_frame:000000000001D18B                 db  0Bh
.eh_frame:000000000001D18C                 db  48h ; H
.eh_frame:000000000001D18D                 db    0
.eh_frame:000000000001D18E                 db    0
.eh_frame:000000000001D18F                 db    0
.eh_frame:000000000001D190                 db  10h
.eh_frame:000000000001D191                 db  1Bh
.eh_frame:000000000001D192                 db    0
.eh_frame:000000000001D193                 db    0
.eh_frame:000000000001D194                 db  2Ch ; ,
.eh_frame:000000000001D195                 db  2Eh ; .
.eh_frame:000000000001D196                 db 0FFh
.eh_frame:000000000001D197                 db 0FFh
.eh_frame:000000000001D198                 db  9Dh
.eh_frame:000000000001D199                 db    0
.eh_frame:000000000001D19A                 db    0
.eh_frame:000000000001D19B                 db    0
.eh_frame:000000000001D19C                 db    0
.eh_frame:000000000001D19D                 db  42h ; B
.eh_frame:000000000001D19E                 db  0Eh
.eh_frame:000000000001D19F                 db  10h
.eh_frame:000000000001D1A0                 db  8Fh
.eh_frame:000000000001D1A1                 db    2
.eh_frame:000000000001D1A2                 db  42h ; B
.eh_frame:000000000001D1A3                 db  0Eh
.eh_frame:000000000001D1A4                 db  18h
.eh_frame:000000000001D1A5                 db  8Eh
.eh_frame:000000000001D1A6                 db    3
.eh_frame:000000000001D1A7                 db  45h ; E
.eh_frame:000000000001D1A8                 db  0Eh
.eh_frame:000000000001D1A9                 db  20h
.eh_frame:000000000001D1AA                 db  8Dh
.eh_frame:000000000001D1AB                 db    4
.eh_frame:000000000001D1AC                 db  42h ; B
.eh_frame:000000000001D1AD                 db  0Eh
.eh_frame:000000000001D1AE                 db  28h ; (
.eh_frame:000000000001D1AF                 db  8Ch
.eh_frame:000000000001D1B0                 db    5
.eh_frame:000000000001D1B1                 db  44h ; D
.eh_frame:000000000001D1B2                 db  0Eh
.eh_frame:000000000001D1B3                 db  30h ; 0
.eh_frame:000000000001D1B4                 db  86h
.eh_frame:000000000001D1B5                 db    6
.eh_frame:000000000001D1B6                 db  41h ; A
.eh_frame:000000000001D1B7                 db  0Eh
.eh_frame:000000000001D1B8                 db  38h ; 8
.eh_frame:000000000001D1B9                 db  83h
.eh_frame:000000000001D1BA                 db    7
.eh_frame:000000000001D1BB                 db  47h ; G
.eh_frame:000000000001D1BC                 db  0Eh
.eh_frame:000000000001D1BD                 db  50h ; P
.eh_frame:000000000001D1BE                 db    2
.eh_frame:000000000001D1BF                 db  59h ; Y
.eh_frame:000000000001D1C0                 db  0Ah
.eh_frame:000000000001D1C1                 db  0Eh
.eh_frame:000000000001D1C2                 db  38h ; 8
.eh_frame:000000000001D1C3                 db  44h ; D
.eh_frame:000000000001D1C4                 db  0Eh
.eh_frame:000000000001D1C5                 db  30h ; 0
.eh_frame:000000000001D1C6                 db  41h ; A
.eh_frame:000000000001D1C7                 db  0Eh
.eh_frame:000000000001D1C8                 db  28h ; (
.eh_frame:000000000001D1C9                 db  42h ; B
.eh_frame:000000000001D1CA                 db  0Eh
.eh_frame:000000000001D1CB                 db  20h
.eh_frame:000000000001D1CC                 db  42h ; B
.eh_frame:000000000001D1CD                 db  0Eh
.eh_frame:000000000001D1CE                 db  18h
.eh_frame:000000000001D1CF                 db  42h ; B
.eh_frame:000000000001D1D0                 db  0Eh
.eh_frame:000000000001D1D1                 db  10h
.eh_frame:000000000001D1D2                 db  42h ; B
.eh_frame:000000000001D1D3                 db  0Eh
.eh_frame:000000000001D1D4                 db    8
.eh_frame:000000000001D1D5                 db  43h ; C
.eh_frame:000000000001D1D6                 db  0Bh
.eh_frame:000000000001D1D7                 db    0
.eh_frame:000000000001D1D8                 db  48h ; H
.eh_frame:000000000001D1D9                 db    0
.eh_frame:000000000001D1DA                 db    0
.eh_frame:000000000001D1DB                 db    0
.eh_frame:000000000001D1DC                 db  5Ch ; \
.eh_frame:000000000001D1DD                 db  1Bh
.eh_frame:000000000001D1DE                 db    0
.eh_frame:000000000001D1DF                 db    0
.eh_frame:000000000001D1E0                 db  80h
.eh_frame:000000000001D1E1                 db  2Eh ; .
.eh_frame:000000000001D1E2                 db 0FFh
.eh_frame:000000000001D1E3                 db 0FFh
.eh_frame:000000000001D1E4                 db 0BFh
.eh_frame:000000000001D1E5                 db    1
.eh_frame:000000000001D1E6                 db    0
.eh_frame:000000000001D1E7                 db    0
.eh_frame:000000000001D1E8                 db    0
.eh_frame:000000000001D1E9                 db  42h ; B
.eh_frame:000000000001D1EA                 db  0Eh
.eh_frame:000000000001D1EB                 db  10h
.eh_frame:000000000001D1EC                 db  8Fh
.eh_frame:000000000001D1ED                 db    2
.eh_frame:000000000001D1EE                 db  42h ; B
.eh_frame:000000000001D1EF                 db  0Eh
.eh_frame:000000000001D1F0                 db  18h
.eh_frame:000000000001D1F1                 db  8Eh
.eh_frame:000000000001D1F2                 db    3
.eh_frame:000000000001D1F3                 db  42h ; B
.eh_frame:000000000001D1F4                 db  0Eh
.eh_frame:000000000001D1F5                 db  20h
.eh_frame:000000000001D1F6                 db  8Dh
.eh_frame:000000000001D1F7                 db    4
.eh_frame:000000000001D1F8                 db  42h ; B
.eh_frame:000000000001D1F9                 db  0Eh
.eh_frame:000000000001D1FA                 db  28h ; (
.eh_frame:000000000001D1FB                 db  8Ch
.eh_frame:000000000001D1FC                 db    5
.eh_frame:000000000001D1FD                 db  45h ; E
.eh_frame:000000000001D1FE                 db  0Eh
.eh_frame:000000000001D1FF                 db  30h ; 0
.eh_frame:000000000001D200                 db  86h
.eh_frame:000000000001D201                 db    6
.eh_frame:000000000001D202                 db  41h ; A
.eh_frame:000000000001D203                 db  0Eh
.eh_frame:000000000001D204                 db  38h ; 8
.eh_frame:000000000001D205                 db  83h
.eh_frame:000000000001D206                 db    7
.eh_frame:000000000001D207                 db  47h ; G
.eh_frame:000000000001D208                 db  0Eh
.eh_frame:000000000001D209                 db  70h ; p
.eh_frame:000000000001D20A                 db    3
.eh_frame:000000000001D20B                 db  2Eh ; .
.eh_frame:000000000001D20C                 db    1
.eh_frame:000000000001D20D                 db  0Ah
.eh_frame:000000000001D20E                 db  0Eh
.eh_frame:000000000001D20F                 db  38h ; 8
.eh_frame:000000000001D210                 db  41h ; A
.eh_frame:000000000001D211                 db  0Eh
.eh_frame:000000000001D212                 db  30h ; 0
.eh_frame:000000000001D213                 db  41h ; A
.eh_frame:000000000001D214                 db  0Eh
.eh_frame:000000000001D215                 db  28h ; (
.eh_frame:000000000001D216                 db  42h ; B
.eh_frame:000000000001D217                 db  0Eh
.eh_frame:000000000001D218                 db  20h
.eh_frame:000000000001D219                 db  42h ; B
.eh_frame:000000000001D21A                 db  0Eh
.eh_frame:000000000001D21B                 db  18h
.eh_frame:000000000001D21C                 db  42h ; B
.eh_frame:000000000001D21D                 db  0Eh
.eh_frame:000000000001D21E                 db  10h
.eh_frame:000000000001D21F                 db  42h ; B
.eh_frame:000000000001D220                 db  0Eh
.eh_frame:000000000001D221                 db    8
.eh_frame:000000000001D222                 db  43h ; C
.eh_frame:000000000001D223                 db  0Bh
.eh_frame:000000000001D224                 db  28h ; (
.eh_frame:000000000001D225                 db    0
.eh_frame:000000000001D226                 db    0
.eh_frame:000000000001D227                 db    0
.eh_frame:000000000001D228                 db 0A8h
.eh_frame:000000000001D229                 db  1Bh
.eh_frame:000000000001D22A                 db    0
.eh_frame:000000000001D22B                 db    0
.eh_frame:000000000001D22C                 db 0F4h
.eh_frame:000000000001D22D                 db  2Fh ; /
.eh_frame:000000000001D22E                 db 0FFh
.eh_frame:000000000001D22F                 db 0FFh
.eh_frame:000000000001D230                 db  23h ; #
.eh_frame:000000000001D231                 db    0
.eh_frame:000000000001D232                 db    0
.eh_frame:000000000001D233                 db    0
.eh_frame:000000000001D234                 db    0
.eh_frame:000000000001D235                 db  41h ; A
.eh_frame:000000000001D236                 db  0Eh
.eh_frame:000000000001D237                 db  10h
.eh_frame:000000000001D238                 db  86h
.eh_frame:000000000001D239                 db    2
.eh_frame:000000000001D23A                 db  41h ; A
.eh_frame:000000000001D23B                 db  0Eh
.eh_frame:000000000001D23C                 db  18h
.eh_frame:000000000001D23D                 db  83h
.eh_frame:000000000001D23E                 db    3
.eh_frame:000000000001D23F                 db  49h ; I
.eh_frame:000000000001D240                 db  0Eh
.eh_frame:000000000001D241                 db  20h
.eh_frame:000000000001D242                 db  49h ; I
.eh_frame:000000000001D243                 db  0Eh
.eh_frame:000000000001D244                 db  18h
.eh_frame:000000000001D245                 db  46h ; F
.eh_frame:000000000001D246                 db  0Eh
.eh_frame:000000000001D247                 db  10h
.eh_frame:000000000001D248                 db  41h ; A
.eh_frame:000000000001D249                 db  0Eh
.eh_frame:000000000001D24A                 db    8
.eh_frame:000000000001D24B                 db    0
.eh_frame:000000000001D24C                 db    0
.eh_frame:000000000001D24D                 db    0
.eh_frame:000000000001D24E                 db    0
.eh_frame:000000000001D24F                 db    0
.eh_frame:000000000001D250                 db  60h ; `
.eh_frame:000000000001D251                 db    0
.eh_frame:000000000001D252                 db    0
.eh_frame:000000000001D253                 db    0
.eh_frame:000000000001D254                 db 0D4h
.eh_frame:000000000001D255                 db  1Bh
.eh_frame:000000000001D256                 db    0
.eh_frame:000000000001D257                 db    0
.eh_frame:000000000001D258                 db 0F8h
.eh_frame:000000000001D259                 db  2Fh ; /
.eh_frame:000000000001D25A                 db 0FFh
.eh_frame:000000000001D25B                 db 0FFh
.eh_frame:000000000001D25C                 db  3Ah ; :
.eh_frame:000000000001D25D                 db    2
.eh_frame:000000000001D25E                 db    0
.eh_frame:000000000001D25F                 db    0
.eh_frame:000000000001D260                 db    0
.eh_frame:000000000001D261                 db  42h ; B
.eh_frame:000000000001D262                 db  0Eh
.eh_frame:000000000001D263                 db  10h
.eh_frame:000000000001D264                 db  8Fh
.eh_frame:000000000001D265                 db    2
.eh_frame:000000000001D266                 db  42h ; B
.eh_frame:000000000001D267                 db  0Eh
.eh_frame:000000000001D268                 db  18h
.eh_frame:000000000001D269                 db  8Eh
.eh_frame:000000000001D26A                 db    3
.eh_frame:000000000001D26B                 db  42h ; B
.eh_frame:000000000001D26C                 db  0Eh
.eh_frame:000000000001D26D                 db  20h
.eh_frame:000000000001D26E                 db  8Dh
.eh_frame:000000000001D26F                 db    4
.eh_frame:000000000001D270                 db  42h ; B
.eh_frame:000000000001D271                 db  0Eh
.eh_frame:000000000001D272                 db  28h ; (
.eh_frame:000000000001D273                 db  8Ch
.eh_frame:000000000001D274                 db    5
.eh_frame:000000000001D275                 db  44h ; D
.eh_frame:000000000001D276                 db  0Eh
.eh_frame:000000000001D277                 db  30h ; 0
.eh_frame:000000000001D278                 db  86h
.eh_frame:000000000001D279                 db    6
.eh_frame:000000000001D27A                 db  41h ; A
.eh_frame:000000000001D27B                 db  0Eh
.eh_frame:000000000001D27C                 db  38h ; 8
.eh_frame:000000000001D27D                 db  83h
.eh_frame:000000000001D27E                 db    7
.eh_frame:000000000001D27F                 db  47h ; G
.eh_frame:000000000001D280                 db  0Eh
.eh_frame:000000000001D281                 db  70h ; p
.eh_frame:000000000001D282                 db  70h ; p
.eh_frame:000000000001D283                 db  0Ah
.eh_frame:000000000001D284                 db  0Eh
.eh_frame:000000000001D285                 db  38h ; 8
.eh_frame:000000000001D286                 db  41h ; A
.eh_frame:000000000001D287                 db  0Eh
.eh_frame:000000000001D288                 db  30h ; 0
.eh_frame:000000000001D289                 db  41h ; A
.eh_frame:000000000001D28A                 db  0Eh
.eh_frame:000000000001D28B                 db  28h ; (
.eh_frame:000000000001D28C                 db  42h ; B
.eh_frame:000000000001D28D                 db  0Eh
.eh_frame:000000000001D28E                 db  20h
.eh_frame:000000000001D28F                 db  42h ; B
.eh_frame:000000000001D290                 db  0Eh
.eh_frame:000000000001D291                 db  18h
.eh_frame:000000000001D292                 db  42h ; B
.eh_frame:000000000001D293                 db  0Eh
.eh_frame:000000000001D294                 db  10h
.eh_frame:000000000001D295                 db  42h ; B
.eh_frame:000000000001D296                 db  0Eh
.eh_frame:000000000001D297                 db    8
.eh_frame:000000000001D298                 db  42h ; B
.eh_frame:000000000001D299                 db  0Bh
.eh_frame:000000000001D29A                 db    2
.eh_frame:000000000001D29B                 db 0D8h
.eh_frame:000000000001D29C                 db  0Ah
.eh_frame:000000000001D29D                 db  0Eh
.eh_frame:000000000001D29E                 db  38h ; 8
.eh_frame:000000000001D29F                 db  41h ; A
.eh_frame:000000000001D2A0                 db  0Eh
.eh_frame:000000000001D2A1                 db  30h ; 0
.eh_frame:000000000001D2A2                 db  44h ; D
.eh_frame:000000000001D2A3                 db  0Eh
.eh_frame:000000000001D2A4                 db  28h ; (
.eh_frame:000000000001D2A5                 db  4Eh ; N
.eh_frame:000000000001D2A6                 db  0Eh
.eh_frame:000000000001D2A7                 db  20h
.eh_frame:000000000001D2A8                 db  42h ; B
.eh_frame:000000000001D2A9                 db  0Eh
.eh_frame:000000000001D2AA                 db  18h
.eh_frame:000000000001D2AB                 db  42h ; B
.eh_frame:000000000001D2AC                 db  0Eh
.eh_frame:000000000001D2AD                 db  10h
.eh_frame:000000000001D2AE                 db  42h ; B
.eh_frame:000000000001D2AF                 db  0Eh
.eh_frame:000000000001D2B0                 db    8
.eh_frame:000000000001D2B1                 db  4Fh ; O
.eh_frame:000000000001D2B2                 db  0Bh
.eh_frame:000000000001D2B3                 db    0
.eh_frame:000000000001D2B4                 db  10h
.eh_frame:000000000001D2B5                 db    0
.eh_frame:000000000001D2B6                 db    0
.eh_frame:000000000001D2B7                 db    0
.eh_frame:000000000001D2B8                 db  38h ; 8
.eh_frame:000000000001D2B9                 db  1Ch
.eh_frame:000000000001D2BA                 db    0
.eh_frame:000000000001D2BB                 db    0
.eh_frame:000000000001D2BC                 db 0D4h
.eh_frame:000000000001D2BD                 db  31h ; 1
.eh_frame:000000000001D2BE                 db 0FFh
.eh_frame:000000000001D2BF                 db 0FFh
.eh_frame:000000000001D2C0                 db  0Fh
.eh_frame:000000000001D2C1                 db    0
.eh_frame:000000000001D2C2                 db    0
.eh_frame:000000000001D2C3                 db    0
.eh_frame:000000000001D2C4                 db    0
.eh_frame:000000000001D2C5                 db    0
.eh_frame:000000000001D2C6                 db    0
.eh_frame:000000000001D2C7                 db    0
.eh_frame:000000000001D2C8                 db  28h ; (
.eh_frame:000000000001D2C9                 db    0
.eh_frame:000000000001D2CA                 db    0
.eh_frame:000000000001D2CB                 db    0
.eh_frame:000000000001D2CC                 db  4Ch ; L
.eh_frame:000000000001D2CD                 db  1Ch
.eh_frame:000000000001D2CE                 db    0
.eh_frame:000000000001D2CF                 db    0
.eh_frame:000000000001D2D0                 db 0D0h
.eh_frame:000000000001D2D1                 db  31h ; 1
.eh_frame:000000000001D2D2                 db 0FFh
.eh_frame:000000000001D2D3                 db 0FFh
.eh_frame:000000000001D2D4                 db  41h ; A
.eh_frame:000000000001D2D5                 db    0
.eh_frame:000000000001D2D6                 db    0
.eh_frame:000000000001D2D7                 db    0
.eh_frame:000000000001D2D8                 db    0
.eh_frame:000000000001D2D9                 db  45h ; E
.eh_frame:000000000001D2DA                 db  0Eh
.eh_frame:000000000001D2DB                 db  10h
.eh_frame:000000000001D2DC                 db  8Ch
.eh_frame:000000000001D2DD                 db    2
.eh_frame:000000000001D2DE                 db  41h ; A
.eh_frame:000000000001D2DF                 db  0Eh
.eh_frame:000000000001D2E0                 db  18h
.eh_frame:000000000001D2E1                 db  86h
.eh_frame:000000000001D2E2                 db    3
.eh_frame:000000000001D2E3                 db  44h ; D
.eh_frame:000000000001D2E4                 db  0Eh
.eh_frame:000000000001D2E5                 db  20h
.eh_frame:000000000001D2E6                 db  83h
.eh_frame:000000000001D2E7                 db    4
.eh_frame:000000000001D2E8                 db  73h ; s
.eh_frame:000000000001D2E9                 db  0Eh
.eh_frame:000000000001D2EA                 db  18h
.eh_frame:000000000001D2EB                 db  41h ; A
.eh_frame:000000000001D2EC                 db  0Eh
.eh_frame:000000000001D2ED                 db  10h
.eh_frame:000000000001D2EE                 db  42h ; B
.eh_frame:000000000001D2EF                 db  0Eh
.eh_frame:000000000001D2F0                 db    8
.eh_frame:000000000001D2F1                 db    0
.eh_frame:000000000001D2F2                 db    0
.eh_frame:000000000001D2F3                 db    0
.eh_frame:000000000001D2F4                 db  28h ; (
.eh_frame:000000000001D2F5                 db    0
.eh_frame:000000000001D2F6                 db    0
.eh_frame:000000000001D2F7                 db    0
.eh_frame:000000000001D2F8                 db  78h ; x
.eh_frame:000000000001D2F9                 db  1Ch
.eh_frame:000000000001D2FA                 db    0
.eh_frame:000000000001D2FB                 db    0
.eh_frame:000000000001D2FC                 db 0F4h
.eh_frame:000000000001D2FD                 db  31h ; 1
.eh_frame:000000000001D2FE                 db 0FFh
.eh_frame:000000000001D2FF                 db 0FFh
.eh_frame:000000000001D300                 db  41h ; A
.eh_frame:000000000001D301                 db    0
.eh_frame:000000000001D302                 db    0
.eh_frame:000000000001D303                 db    0
.eh_frame:000000000001D304                 db    0
.eh_frame:000000000001D305                 db  45h ; E
.eh_frame:000000000001D306                 db  0Eh
.eh_frame:000000000001D307                 db  10h
.eh_frame:000000000001D308                 db  8Ch
.eh_frame:000000000001D309                 db    2
.eh_frame:000000000001D30A                 db  41h ; A
.eh_frame:000000000001D30B                 db  0Eh
.eh_frame:000000000001D30C                 db  18h
.eh_frame:000000000001D30D                 db  86h
.eh_frame:000000000001D30E                 db    3
.eh_frame:000000000001D30F                 db  44h ; D
.eh_frame:000000000001D310                 db  0Eh
.eh_frame:000000000001D311                 db  20h
.eh_frame:000000000001D312                 db  83h
.eh_frame:000000000001D313                 db    4
.eh_frame:000000000001D314                 db  73h ; s
.eh_frame:000000000001D315                 db  0Eh
.eh_frame:000000000001D316                 db  18h
.eh_frame:000000000001D317                 db  41h ; A
.eh_frame:000000000001D318                 db  0Eh
.eh_frame:000000000001D319                 db  10h
.eh_frame:000000000001D31A                 db  42h ; B
.eh_frame:000000000001D31B                 db  0Eh
.eh_frame:000000000001D31C                 db    8
.eh_frame:000000000001D31D                 db    0
.eh_frame:000000000001D31E                 db    0
.eh_frame:000000000001D31F                 db    0
.eh_frame:000000000001D320                 db  74h ; t
.eh_frame:000000000001D321                 db    0
.eh_frame:000000000001D322                 db    0
.eh_frame:000000000001D323                 db    0
.eh_frame:000000000001D324                 db 0A4h
.eh_frame:000000000001D325                 db  1Ch
.eh_frame:000000000001D326                 db    0
.eh_frame:000000000001D327                 db    0
.eh_frame:000000000001D328                 db  18h
.eh_frame:000000000001D329                 db  32h ; 2
.eh_frame:000000000001D32A                 db 0FFh
.eh_frame:000000000001D32B                 db 0FFh
.eh_frame:000000000001D32C                 db 0B2h
.eh_frame:000000000001D32D                 db  1Ah
.eh_frame:000000000001D32E                 db    0
.eh_frame:000000000001D32F                 db    0
.eh_frame:000000000001D330                 db    0
.eh_frame:000000000001D331                 db  42h ; B
.eh_frame:000000000001D332                 db  0Eh
.eh_frame:000000000001D333                 db  10h
.eh_frame:000000000001D334                 db  8Fh
.eh_frame:000000000001D335                 db    2
.eh_frame:000000000001D336                 db  42h ; B
.eh_frame:000000000001D337                 db  0Eh
.eh_frame:000000000001D338                 db  18h
.eh_frame:000000000001D339                 db  8Eh
.eh_frame:000000000001D33A                 db    3
.eh_frame:000000000001D33B                 db  45h ; E
.eh_frame:000000000001D33C                 db  0Eh
.eh_frame:000000000001D33D                 db  20h
.eh_frame:000000000001D33E                 db  8Dh
.eh_frame:000000000001D33F                 db    4
.eh_frame:000000000001D340                 db  42h ; B
.eh_frame:000000000001D341                 db  0Eh
.eh_frame:000000000001D342                 db  28h ; (
.eh_frame:000000000001D343                 db  8Ch
.eh_frame:000000000001D344                 db    5
.eh_frame:000000000001D345                 db  44h ; D
.eh_frame:000000000001D346                 db  0Eh
.eh_frame:000000000001D347                 db  30h ; 0
.eh_frame:000000000001D348                 db  86h
.eh_frame:000000000001D349                 db    6
.eh_frame:000000000001D34A                 db  41h ; A
.eh_frame:000000000001D34B                 db  0Eh
.eh_frame:000000000001D34C                 db  38h ; 8
.eh_frame:000000000001D34D                 db  83h
.eh_frame:000000000001D34E                 db    7
.eh_frame:000000000001D34F                 db  4Ah ; J
.eh_frame:000000000001D350                 db  0Eh
.eh_frame:000000000001D351                 db  80h
.eh_frame:000000000001D352                 db  0Ah
.eh_frame:000000000001D353                 db    2
.eh_frame:000000000001D354                 db 0D6h
.eh_frame:000000000001D355                 db  0Ah
.eh_frame:000000000001D356                 db  0Eh
.eh_frame:000000000001D357                 db  38h ; 8
.eh_frame:000000000001D358                 db  41h ; A
.eh_frame:000000000001D359                 db  0Eh
.eh_frame:000000000001D35A                 db  30h ; 0
.eh_frame:000000000001D35B                 db  41h ; A
.eh_frame:000000000001D35C                 db  0Eh
.eh_frame:000000000001D35D                 db  28h ; (
.eh_frame:000000000001D35E                 db  42h ; B
.eh_frame:000000000001D35F                 db  0Eh
.eh_frame:000000000001D360                 db  20h
.eh_frame:000000000001D361                 db  42h ; B
.eh_frame:000000000001D362                 db  0Eh
.eh_frame:000000000001D363                 db  18h
.eh_frame:000000000001D364                 db  42h ; B
.eh_frame:000000000001D365                 db  0Eh
.eh_frame:000000000001D366                 db  10h
.eh_frame:000000000001D367                 db  42h ; B
.eh_frame:000000000001D368                 db  0Eh
.eh_frame:000000000001D369                 db    8
.eh_frame:000000000001D36A                 db  46h ; F
.eh_frame:000000000001D36B                 db  0Bh
.eh_frame:000000000001D36C                 db    3
.eh_frame:000000000001D36D                 db  99h
.eh_frame:000000000001D36E                 db    5
.eh_frame:000000000001D36F                 db  0Eh
.eh_frame:000000000001D370                 db  88h
.eh_frame:000000000001D371                 db  0Ah
.eh_frame:000000000001D372                 db  44h ; D
.eh_frame:000000000001D373                 db  0Eh
.eh_frame:000000000001D374                 db  90h
.eh_frame:000000000001D375                 db  0Ah
.eh_frame:000000000001D376                 db  44h ; D
.eh_frame:000000000001D377                 db  0Eh
.eh_frame:000000000001D378                 db  98h
.eh_frame:000000000001D379                 db  0Ah
.eh_frame:000000000001D37A                 db  45h ; E
.eh_frame:000000000001D37B                 db  0Eh
.eh_frame:000000000001D37C                 db 0A0h
.eh_frame:000000000001D37D                 db  0Ah
.eh_frame:000000000001D37E                 db  4Eh ; N
.eh_frame:000000000001D37F                 db  0Eh
.eh_frame:000000000001D380                 db  80h
.eh_frame:000000000001D381                 db  0Ah
.eh_frame:000000000001D382                 db    2
.eh_frame:000000000001D383                 db  98h
.eh_frame:000000000001D384                 db  0Eh
.eh_frame:000000000001D385                 db  88h
.eh_frame:000000000001D386                 db  0Ah
.eh_frame:000000000001D387                 db  44h ; D
.eh_frame:000000000001D388                 db  0Eh
.eh_frame:000000000001D389                 db  90h
.eh_frame:000000000001D38A                 db  0Ah
.eh_frame:000000000001D38B                 db  44h ; D
.eh_frame:000000000001D38C                 db  0Eh
.eh_frame:000000000001D38D                 db  98h
.eh_frame:000000000001D38E                 db  0Ah
.eh_frame:000000000001D38F                 db  45h ; E
.eh_frame:000000000001D390                 db  0Eh
.eh_frame:000000000001D391                 db 0A0h
.eh_frame:000000000001D392                 db  0Ah
.eh_frame:000000000001D393                 db  5Dh ; ]
.eh_frame:000000000001D394                 db  0Eh
.eh_frame:000000000001D395                 db  80h
.eh_frame:000000000001D396                 db  0Ah
.eh_frame:000000000001D397                 db    0
.eh_frame:000000000001D398                 db  2Ch ; ,
.eh_frame:000000000001D399                 db    0
.eh_frame:000000000001D39A                 db    0
.eh_frame:000000000001D39B                 db    0
.eh_frame:000000000001D39C                 db  1Ch
.eh_frame:000000000001D39D                 db  1Dh
.eh_frame:000000000001D39E                 db    0
.eh_frame:000000000001D39F                 db    0
.eh_frame:000000000001D3A0                 db  60h ; `
.eh_frame:000000000001D3A1                 db  4Ch ; L
.eh_frame:000000000001D3A2                 db 0FFh
.eh_frame:000000000001D3A3                 db 0FFh
.eh_frame:000000000001D3A4                 db  4Eh ; N
.eh_frame:000000000001D3A5                 db    0
.eh_frame:000000000001D3A6                 db    0
.eh_frame:000000000001D3A7                 db    0
.eh_frame:000000000001D3A8                 db    0
.eh_frame:000000000001D3A9                 db  44h ; D
.eh_frame:000000000001D3AA                 db  0Eh
.eh_frame:000000000001D3AB                 db  20h
.eh_frame:000000000001D3AC                 db  57h ; W
.eh_frame:000000000001D3AD                 db  0Eh
.eh_frame:000000000001D3AE                 db  28h ; (
.eh_frame:000000000001D3AF                 db  45h ; E
.eh_frame:000000000001D3B0                 db  0Eh
.eh_frame:000000000001D3B1                 db  30h ; 0
.eh_frame:000000000001D3B2                 db  49h ; I
.eh_frame:000000000001D3B3                 db  0Eh
.eh_frame:000000000001D3B4                 db  38h ; 8
.eh_frame:000000000001D3B5                 db  42h ; B
.eh_frame:000000000001D3B6                 db  0Eh
.eh_frame:000000000001D3B7                 db  40h ; @
.eh_frame:000000000001D3B8                 db  49h ; I
.eh_frame:000000000001D3B9                 db  0Eh
.eh_frame:000000000001D3BA                 db  20h
.eh_frame:000000000001D3BB                 db  54h ; T
.eh_frame:000000000001D3BC                 db  0Ah
.eh_frame:000000000001D3BD                 db  0Eh
.eh_frame:000000000001D3BE                 db    8
.eh_frame:000000000001D3BF                 db  41h ; A
.eh_frame:000000000001D3C0                 db  0Bh
.eh_frame:000000000001D3C1                 db    0
.eh_frame:000000000001D3C2                 db    0
.eh_frame:000000000001D3C3                 db    0
.eh_frame:000000000001D3C4                 db    0
.eh_frame:000000000001D3C5                 db    0
.eh_frame:000000000001D3C6                 db    0
.eh_frame:000000000001D3C7                 db    0
.eh_frame:000000000001D3C8                 db  1Ch
.eh_frame:000000000001D3C9                 db    0
.eh_frame:000000000001D3CA                 db    0
.eh_frame:000000000001D3CB                 db    0
.eh_frame:000000000001D3CC                 db  4Ch ; L
.eh_frame:000000000001D3CD                 db  1Dh
.eh_frame:000000000001D3CE                 db    0
.eh_frame:000000000001D3CF                 db    0
.eh_frame:000000000001D3D0                 db  80h
.eh_frame:000000000001D3D1                 db  4Ch ; L
.eh_frame:000000000001D3D2                 db 0FFh
.eh_frame:000000000001D3D3                 db 0FFh
.eh_frame:000000000001D3D4                 db  9Fh
.eh_frame:000000000001D3D5                 db    0
.eh_frame:000000000001D3D6                 db    0
.eh_frame:000000000001D3D7                 db    0
.eh_frame:000000000001D3D8                 db    0
.eh_frame:000000000001D3D9                 db  44h ; D
.eh_frame:000000000001D3DA                 db  0Eh
.eh_frame:000000000001D3DB                 db  10h
.eh_frame:000000000001D3DC                 db  83h
.eh_frame:000000000001D3DD                 db    2
.eh_frame:000000000001D3DE                 db    2
.eh_frame:000000000001D3DF                 db  78h ; x
.eh_frame:000000000001D3E0                 db  0Ah
.eh_frame:000000000001D3E1                 db  0Eh
.eh_frame:000000000001D3E2                 db    8
.eh_frame:000000000001D3E3                 db  41h ; A
.eh_frame:000000000001D3E4                 db  0Bh
.eh_frame:000000000001D3E5                 db    0
.eh_frame:000000000001D3E6                 db    0
.eh_frame:000000000001D3E7                 db    0
.eh_frame:000000000001D3E8                 db  40h ; @
.eh_frame:000000000001D3E9                 db    0
.eh_frame:000000000001D3EA                 db    0
.eh_frame:000000000001D3EB                 db    0
.eh_frame:000000000001D3EC                 db  6Ch ; l
.eh_frame:000000000001D3ED                 db  1Dh
.eh_frame:000000000001D3EE                 db    0
.eh_frame:000000000001D3EF                 db    0
.eh_frame:000000000001D3F0                 db    0
.eh_frame:000000000001D3F1                 db  4Dh ; M
.eh_frame:000000000001D3F2                 db 0FFh
.eh_frame:000000000001D3F3                 db 0FFh
.eh_frame:000000000001D3F4                 db 0E7h
.eh_frame:000000000001D3F5                 db    0
.eh_frame:000000000001D3F6                 db    0
.eh_frame:000000000001D3F7                 db    0
.eh_frame:000000000001D3F8                 db    0
.eh_frame:000000000001D3F9                 db  41h ; A
.eh_frame:000000000001D3FA                 db  0Eh
.eh_frame:000000000001D3FB                 db  10h
.eh_frame:000000000001D3FC                 db  86h
.eh_frame:000000000001D3FD                 db    2
.eh_frame:000000000001D3FE                 db  41h ; A
.eh_frame:000000000001D3FF                 db  0Eh
.eh_frame:000000000001D400                 db  18h
.eh_frame:000000000001D401                 db  83h
.eh_frame:000000000001D402                 db    3
.eh_frame:000000000001D403                 db  49h ; I
.eh_frame:000000000001D404                 db  0Eh
.eh_frame:000000000001D405                 db  20h
.eh_frame:000000000001D406                 db  6Eh ; n
.eh_frame:000000000001D407                 db  0Ah
.eh_frame:000000000001D408                 db  0Eh
.eh_frame:000000000001D409                 db  18h
.eh_frame:000000000001D40A                 db  41h ; A
.eh_frame:000000000001D40B                 db  0Eh
.eh_frame:000000000001D40C                 db  10h
.eh_frame:000000000001D40D                 db  41h ; A
.eh_frame:000000000001D40E                 db  0Eh
.eh_frame:000000000001D40F                 db    8
.eh_frame:000000000001D410                 db  45h ; E
.eh_frame:000000000001D411                 db  0Bh
.eh_frame:000000000001D412                 db    2
.eh_frame:000000000001D413                 db  4Ah ; J
.eh_frame:000000000001D414                 db  0Ah
.eh_frame:000000000001D415                 db  0Eh
.eh_frame:000000000001D416                 db  18h
.eh_frame:000000000001D417                 db  41h ; A
.eh_frame:000000000001D418                 db  0Eh
.eh_frame:000000000001D419                 db  10h
.eh_frame:000000000001D41A                 db  41h ; A
.eh_frame:000000000001D41B                 db  0Eh
.eh_frame:000000000001D41C                 db    8
.eh_frame:000000000001D41D                 db  44h ; D
.eh_frame:000000000001D41E                 db  0Bh
.eh_frame:000000000001D41F                 db    2
.eh_frame:000000000001D420                 db  54h ; T
.eh_frame:000000000001D421                 db  0Eh
.eh_frame:000000000001D422                 db  18h
.eh_frame:000000000001D423                 db  41h ; A
.eh_frame:000000000001D424                 db  0Eh
.eh_frame:000000000001D425                 db  10h
.eh_frame:000000000001D426                 db  41h ; A
.eh_frame:000000000001D427                 db  0Eh
.eh_frame:000000000001D428                 db    8
.eh_frame:000000000001D429                 db    0
.eh_frame:000000000001D42A                 db    0
.eh_frame:000000000001D42B                 db    0
.eh_frame:000000000001D42C                 db  74h ; t
.eh_frame:000000000001D42D                 db    0
.eh_frame:000000000001D42E                 db    0
.eh_frame:000000000001D42F                 db    0
.eh_frame:000000000001D430                 db 0B0h
.eh_frame:000000000001D431                 db  1Dh
.eh_frame:000000000001D432                 db    0
.eh_frame:000000000001D433                 db    0
.eh_frame:000000000001D434                 db 0ACh
.eh_frame:000000000001D435                 db  4Dh ; M
.eh_frame:000000000001D436                 db 0FFh
.eh_frame:000000000001D437                 db 0FFh
.eh_frame:000000000001D438                 db  34h ; 4
.eh_frame:000000000001D439                 db  12h
.eh_frame:000000000001D43A                 db    0
.eh_frame:000000000001D43B                 db    0
.eh_frame:000000000001D43C                 db    0
.eh_frame:000000000001D43D                 db  42h ; B
.eh_frame:000000000001D43E                 db  0Eh
.eh_frame:000000000001D43F                 db  10h
.eh_frame:000000000001D440                 db  8Fh
.eh_frame:000000000001D441                 db    2
.eh_frame:000000000001D442                 db  42h ; B
.eh_frame:000000000001D443                 db  0Eh
.eh_frame:000000000001D444                 db  18h
.eh_frame:000000000001D445                 db  8Eh
.eh_frame:000000000001D446                 db    3
.eh_frame:000000000001D447                 db  45h ; E
.eh_frame:000000000001D448                 db  0Eh
.eh_frame:000000000001D449                 db  20h
.eh_frame:000000000001D44A                 db  8Dh
.eh_frame:000000000001D44B                 db    4
.eh_frame:000000000001D44C                 db  42h ; B
.eh_frame:000000000001D44D                 db  0Eh
.eh_frame:000000000001D44E                 db  28h ; (
.eh_frame:000000000001D44F                 db  8Ch
.eh_frame:000000000001D450                 db    5
.eh_frame:000000000001D451                 db  44h ; D
.eh_frame:000000000001D452                 db  0Eh
.eh_frame:000000000001D453                 db  30h ; 0
.eh_frame:000000000001D454                 db  86h
.eh_frame:000000000001D455                 db    6
.eh_frame:000000000001D456                 db  41h ; A
.eh_frame:000000000001D457                 db  0Eh
.eh_frame:000000000001D458                 db  38h ; 8
.eh_frame:000000000001D459                 db  83h
.eh_frame:000000000001D45A                 db    7
.eh_frame:000000000001D45B                 db  53h ; S
.eh_frame:000000000001D45C                 db  0Eh
.eh_frame:000000000001D45D                 db 0F0h
.eh_frame:000000000001D45E                 db    1
.eh_frame:000000000001D45F                 db    3
.eh_frame:000000000001D460                 db  81h
.eh_frame:000000000001D461                 db  0Bh
.eh_frame:000000000001D462                 db  0Eh
.eh_frame:000000000001D463                 db 0F8h
.eh_frame:000000000001D464                 db    1
.eh_frame:000000000001D465                 db  4Ah ; J
.eh_frame:000000000001D466                 db  0Eh
.eh_frame:000000000001D467                 db  80h
.eh_frame:000000000001D468                 db    2
.eh_frame:000000000001D469                 db  44h ; D
.eh_frame:000000000001D46A                 db  0Eh
.eh_frame:000000000001D46B                 db  88h
.eh_frame:000000000001D46C                 db    2
.eh_frame:000000000001D46D                 db  45h ; E
.eh_frame:000000000001D46E                 db  0Eh
.eh_frame:000000000001D46F                 db  90h
.eh_frame:000000000001D470                 db    2
.eh_frame:000000000001D471                 db  5Fh ; _
.eh_frame:000000000001D472                 db  0Eh
.eh_frame:000000000001D473                 db 0F0h
.eh_frame:000000000001D474                 db    1
.eh_frame:000000000001D475                 db  64h ; d
.eh_frame:000000000001D476                 db  0Ah
.eh_frame:000000000001D477                 db  0Eh
.eh_frame:000000000001D478                 db  38h ; 8
.eh_frame:000000000001D479                 db  41h ; A
.eh_frame:000000000001D47A                 db  0Eh
.eh_frame:000000000001D47B                 db  30h ; 0
.eh_frame:000000000001D47C                 db  41h ; A
.eh_frame:000000000001D47D                 db  0Eh
.eh_frame:000000000001D47E                 db  28h ; (
.eh_frame:000000000001D47F                 db  42h ; B
.eh_frame:000000000001D480                 db  0Eh
.eh_frame:000000000001D481                 db  20h
.eh_frame:000000000001D482                 db  42h ; B
.eh_frame:000000000001D483                 db  0Eh
.eh_frame:000000000001D484                 db  18h
.eh_frame:000000000001D485                 db  42h ; B
.eh_frame:000000000001D486                 db  0Eh
.eh_frame:000000000001D487                 db  10h
.eh_frame:000000000001D488                 db  42h ; B
.eh_frame:000000000001D489                 db  0Eh
.eh_frame:000000000001D48A                 db    8
.eh_frame:000000000001D48B                 db  44h ; D
.eh_frame:000000000001D48C                 db  0Bh
.eh_frame:000000000001D48D                 db    3
.eh_frame:000000000001D48E                 db  99h
.eh_frame:000000000001D48F                 db    5
.eh_frame:000000000001D490                 db  0Eh
.eh_frame:000000000001D491                 db 0F8h
.eh_frame:000000000001D492                 db    1
.eh_frame:000000000001D493                 db  4Dh ; M
.eh_frame:000000000001D494                 db  0Eh
.eh_frame:000000000001D495                 db  80h
.eh_frame:000000000001D496                 db    2
.eh_frame:000000000001D497                 db  44h ; D
.eh_frame:000000000001D498                 db  0Eh
.eh_frame:000000000001D499                 db  88h
.eh_frame:000000000001D49A                 db    2
.eh_frame:000000000001D49B                 db  47h ; G
.eh_frame:000000000001D49C                 db  0Eh
.eh_frame:000000000001D49D                 db  90h
.eh_frame:000000000001D49E                 db    2
.eh_frame:000000000001D49F                 db  5Bh ; [
.eh_frame:000000000001D4A0                 db  0Eh
.eh_frame:000000000001D4A1                 db 0F0h
.eh_frame:000000000001D4A2                 db    1
.eh_frame:000000000001D4A3                 db    0
.eh_frame:000000000001D4A4                 db  68h ; h
.eh_frame:000000000001D4A5                 db    0
.eh_frame:000000000001D4A6                 db    0
.eh_frame:000000000001D4A7                 db    0
.eh_frame:000000000001D4A8                 db  28h ; (
.eh_frame:000000000001D4A9                 db  1Eh
.eh_frame:000000000001D4AA                 db    0
.eh_frame:000000000001D4AB                 db    0
.eh_frame:000000000001D4AC                 db  74h ; t
.eh_frame:000000000001D4AD                 db  5Fh ; _
.eh_frame:000000000001D4AE                 db 0FFh
.eh_frame:000000000001D4AF                 db 0FFh
.eh_frame:000000000001D4B0                 db 0ABh
.eh_frame:000000000001D4B1                 db    1
.eh_frame:000000000001D4B2                 db    0
.eh_frame:000000000001D4B3                 db    0
.eh_frame:000000000001D4B4                 db    0
.eh_frame:000000000001D4B5                 db  42h ; B
.eh_frame:000000000001D4B6                 db  0Eh
.eh_frame:000000000001D4B7                 db  10h
.eh_frame:000000000001D4B8                 db  8Fh
.eh_frame:000000000001D4B9                 db    2
.eh_frame:000000000001D4BA                 db  42h ; B
.eh_frame:000000000001D4BB                 db  0Eh
.eh_frame:000000000001D4BC                 db  18h
.eh_frame:000000000001D4BD                 db  8Eh
.eh_frame:000000000001D4BE                 db    3
.eh_frame:000000000001D4BF                 db  45h ; E
.eh_frame:000000000001D4C0                 db  0Eh
.eh_frame:000000000001D4C1                 db  20h
.eh_frame:000000000001D4C2                 db  8Dh
.eh_frame:000000000001D4C3                 db    4
.eh_frame:000000000001D4C4                 db  42h ; B
.eh_frame:000000000001D4C5                 db  0Eh
.eh_frame:000000000001D4C6                 db  28h ; (
.eh_frame:000000000001D4C7                 db  8Ch
.eh_frame:000000000001D4C8                 db    5
.eh_frame:000000000001D4C9                 db  44h ; D
.eh_frame:000000000001D4CA                 db  0Eh
.eh_frame:000000000001D4CB                 db  30h ; 0
.eh_frame:000000000001D4CC                 db  86h
.eh_frame:000000000001D4CD                 db    6
.eh_frame:000000000001D4CE                 db  41h ; A
.eh_frame:000000000001D4CF                 db  0Eh
.eh_frame:000000000001D4D0                 db  38h ; 8
.eh_frame:000000000001D4D1                 db  83h
.eh_frame:000000000001D4D2                 db    7
.eh_frame:000000000001D4D3                 db  47h ; G
.eh_frame:000000000001D4D4                 db  0Eh
.eh_frame:000000000001D4D5                 db  60h ; `
.eh_frame:000000000001D4D6                 db    2
.eh_frame:000000000001D4D7                 db  99h
.eh_frame:000000000001D4D8                 db  0Eh
.eh_frame:000000000001D4D9                 db  68h ; h
.eh_frame:000000000001D4DA                 db  5Fh ; _
.eh_frame:000000000001D4DB                 db  0Eh
.eh_frame:000000000001D4DC                 db  70h ; p
.eh_frame:000000000001D4DD                 db  46h ; F
.eh_frame:000000000001D4DE                 db  0Eh
.eh_frame:000000000001D4DF                 db  78h ; x
.eh_frame:000000000001D4E0                 db  42h ; B
.eh_frame:000000000001D4E1                 db  0Eh
.eh_frame:000000000001D4E2                 db  80h
.eh_frame:000000000001D4E3                 db    1
.eh_frame:000000000001D4E4                 db  59h ; Y
.eh_frame:000000000001D4E5                 db  0Eh
.eh_frame:000000000001D4E6                 db  60h ; `
.eh_frame:000000000001D4E7                 db    2
.eh_frame:000000000001D4E8                 db  40h ; @
.eh_frame:000000000001D4E9                 db  0Eh
.eh_frame:000000000001D4EA                 db  68h ; h
.eh_frame:000000000001D4EB                 db  4Bh ; K
.eh_frame:000000000001D4EC                 db  0Eh
.eh_frame:000000000001D4ED                 db  70h ; p
.eh_frame:000000000001D4EE                 db  43h ; C
.eh_frame:000000000001D4EF                 db  0Eh
.eh_frame:000000000001D4F0                 db  78h ; x
.eh_frame:000000000001D4F1                 db  45h ; E
.eh_frame:000000000001D4F2                 db  0Eh
.eh_frame:000000000001D4F3                 db  80h
.eh_frame:000000000001D4F4                 db    1
.eh_frame:000000000001D4F5                 db  5Eh ; ^
.eh_frame:000000000001D4F6                 db  0Eh
.eh_frame:000000000001D4F7                 db  60h ; `
.eh_frame:000000000001D4F8                 db  4Ch ; L
.eh_frame:000000000001D4F9                 db  0Ah
.eh_frame:000000000001D4FA                 db  0Eh
.eh_frame:000000000001D4FB                 db  38h ; 8
.eh_frame:000000000001D4FC                 db  44h ; D
.eh_frame:000000000001D4FD                 db  0Eh
.eh_frame:000000000001D4FE                 db  30h ; 0
.eh_frame:000000000001D4FF                 db  41h ; A
.eh_frame:000000000001D500                 db  0Eh
.eh_frame:000000000001D501                 db  28h ; (
.eh_frame:000000000001D502                 db  42h ; B
.eh_frame:000000000001D503                 db  0Eh
.eh_frame:000000000001D504                 db  20h
.eh_frame:000000000001D505                 db  42h ; B
.eh_frame:000000000001D506                 db  0Eh
.eh_frame:000000000001D507                 db  18h
.eh_frame:000000000001D508                 db  42h ; B
.eh_frame:000000000001D509                 db  0Eh
.eh_frame:000000000001D50A                 db  10h
.eh_frame:000000000001D50B                 db  42h ; B
.eh_frame:000000000001D50C                 db  0Eh
.eh_frame:000000000001D50D                 db    8
.eh_frame:000000000001D50E                 db  46h ; F
.eh_frame:000000000001D50F                 db  0Bh
.eh_frame:000000000001D510                 db  28h ; (
.eh_frame:000000000001D511                 db    0
.eh_frame:000000000001D512                 db    0
.eh_frame:000000000001D513                 db    0
.eh_frame:000000000001D514                 db  94h
.eh_frame:000000000001D515                 db  1Eh
.eh_frame:000000000001D516                 db    0
.eh_frame:000000000001D517                 db    0
.eh_frame:000000000001D518                 db 0B8h
.eh_frame:000000000001D519                 db  60h ; `
.eh_frame:000000000001D51A                 db 0FFh
.eh_frame:000000000001D51B                 db 0FFh
.eh_frame:000000000001D51C                 db  36h ; 6
.eh_frame:000000000001D51D                 db    0
.eh_frame:000000000001D51E                 db    0
.eh_frame:000000000001D51F                 db    0
.eh_frame:000000000001D520                 db    0
.eh_frame:000000000001D521                 db  42h ; B
.eh_frame:000000000001D522                 db  0Eh
.eh_frame:000000000001D523                 db  10h
.eh_frame:000000000001D524                 db  8Ch
.eh_frame:000000000001D525                 db    2
.eh_frame:000000000001D526                 db  41h ; A
.eh_frame:000000000001D527                 db  0Eh
.eh_frame:000000000001D528                 db  18h
.eh_frame:000000000001D529                 db  86h
.eh_frame:000000000001D52A                 db    3
.eh_frame:000000000001D52B                 db  41h ; A
.eh_frame:000000000001D52C                 db  0Eh
.eh_frame:000000000001D52D                 db  20h
.eh_frame:000000000001D52E                 db  83h
.eh_frame:000000000001D52F                 db    4
.eh_frame:000000000001D530                 db  6Eh ; n
.eh_frame:000000000001D531                 db  0Eh
.eh_frame:000000000001D532                 db  18h
.eh_frame:000000000001D533                 db  41h ; A
.eh_frame:000000000001D534                 db  0Eh
.eh_frame:000000000001D535                 db  10h
.eh_frame:000000000001D536                 db  42h ; B
.eh_frame:000000000001D537                 db  0Eh
.eh_frame:000000000001D538                 db    8
.eh_frame:000000000001D539                 db    0
.eh_frame:000000000001D53A                 db    0
.eh_frame:000000000001D53B                 db    0
.eh_frame:000000000001D53C                 db  10h
.eh_frame:000000000001D53D                 db    0
.eh_frame:000000000001D53E                 db    0
.eh_frame:000000000001D53F                 db    0
.eh_frame:000000000001D540                 db 0C0h
.eh_frame:000000000001D541                 db  1Eh
.eh_frame:000000000001D542                 db    0
.eh_frame:000000000001D543                 db    0
.eh_frame:000000000001D544                 db 0CCh
.eh_frame:000000000001D545                 db  60h ; `
.eh_frame:000000000001D546                 db 0FFh
.eh_frame:000000000001D547                 db 0FFh
.eh_frame:000000000001D548                 db  11h
.eh_frame:000000000001D549                 db    0
.eh_frame:000000000001D54A                 db    0
.eh_frame:000000000001D54B                 db    0
.eh_frame:000000000001D54C                 db    0
.eh_frame:000000000001D54D                 db    0
.eh_frame:000000000001D54E                 db    0
.eh_frame:000000000001D54F                 db    0
.eh_frame:000000000001D550                 db  10h
.eh_frame:000000000001D551                 db    0
.eh_frame:000000000001D552                 db    0
.eh_frame:000000000001D553                 db    0
.eh_frame:000000000001D554                 db 0D4h
.eh_frame:000000000001D555                 db  1Eh
.eh_frame:000000000001D556                 db    0
.eh_frame:000000000001D557                 db    0
.eh_frame:000000000001D558                 db 0D8h
.eh_frame:000000000001D559                 db  60h ; `
.eh_frame:000000000001D55A                 db 0FFh
.eh_frame:000000000001D55B                 db 0FFh
.eh_frame:000000000001D55C                 db  11h
.eh_frame:000000000001D55D                 db    0
.eh_frame:000000000001D55E                 db    0
.eh_frame:000000000001D55F                 db    0
.eh_frame:000000000001D560                 db    0
.eh_frame:000000000001D561                 db    0
.eh_frame:000000000001D562                 db    0
.eh_frame:000000000001D563                 db    0
.eh_frame:000000000001D564                 db  10h
.eh_frame:000000000001D565                 db    0
.eh_frame:000000000001D566                 db    0
.eh_frame:000000000001D567                 db    0
.eh_frame:000000000001D568                 db 0E8h
.eh_frame:000000000001D569                 db  1Eh
.eh_frame:000000000001D56A                 db    0
.eh_frame:000000000001D56B                 db    0
.eh_frame:000000000001D56C                 db 0E4h
.eh_frame:000000000001D56D                 db  60h ; `
.eh_frame:000000000001D56E                 db 0FFh
.eh_frame:000000000001D56F                 db 0FFh
.eh_frame:000000000001D570                 db  35h ; 5
.eh_frame:000000000001D571                 db    0
.eh_frame:000000000001D572                 db    0
.eh_frame:000000000001D573                 db    0
.eh_frame:000000000001D574                 db    0
.eh_frame:000000000001D575                 db    0
.eh_frame:000000000001D576                 db    0
.eh_frame:000000000001D577                 db    0
.eh_frame:000000000001D578                 db  10h
.eh_frame:000000000001D579                 db    0
.eh_frame:000000000001D57A                 db    0
.eh_frame:000000000001D57B                 db    0
.eh_frame:000000000001D57C                 db 0FCh
.eh_frame:000000000001D57D                 db  1Eh
.eh_frame:000000000001D57E                 db    0
.eh_frame:000000000001D57F                 db    0
.eh_frame:000000000001D580                 db  10h
.eh_frame:000000000001D581                 db  61h ; a
.eh_frame:000000000001D582                 db 0FFh
.eh_frame:000000000001D583                 db 0FFh
.eh_frame:000000000001D584                 db  15h
.eh_frame:000000000001D585                 db    0
.eh_frame:000000000001D586                 db    0
.eh_frame:000000000001D587                 db    0
.eh_frame:000000000001D588                 db    0
.eh_frame:000000000001D589                 db    0
.eh_frame:000000000001D58A                 db    0
.eh_frame:000000000001D58B                 db    0
.eh_frame:000000000001D58C                 db  10h
.eh_frame:000000000001D58D                 db    0
.eh_frame:000000000001D58E                 db    0
.eh_frame:000000000001D58F                 db    0
.eh_frame:000000000001D590                 db  10h
.eh_frame:000000000001D591                 db  1Fh
.eh_frame:000000000001D592                 db    0
.eh_frame:000000000001D593                 db    0
.eh_frame:000000000001D594                 db  1Ch
.eh_frame:000000000001D595                 db  61h ; a
.eh_frame:000000000001D596                 db 0FFh
.eh_frame:000000000001D597                 db 0FFh
.eh_frame:000000000001D598                 db  30h ; 0
.eh_frame:000000000001D599                 db    0
.eh_frame:000000000001D59A                 db    0
.eh_frame:000000000001D59B                 db    0
.eh_frame:000000000001D59C                 db    0
.eh_frame:000000000001D59D                 db  6Bh ; k
.eh_frame:000000000001D59E                 db  0Eh
.eh_frame:000000000001D59F                 db  10h
.eh_frame:000000000001D5A0                 db  50h ; P
.eh_frame:000000000001D5A1                 db    0
.eh_frame:000000000001D5A2                 db    0
.eh_frame:000000000001D5A3                 db    0
.eh_frame:000000000001D5A4                 db  24h ; $
.eh_frame:000000000001D5A5                 db  1Fh
.eh_frame:000000000001D5A6                 db    0
.eh_frame:000000000001D5A7                 db    0
.eh_frame:000000000001D5A8                 db  38h ; 8
.eh_frame:000000000001D5A9                 db  61h ; a
.eh_frame:000000000001D5AA                 db 0FFh
.eh_frame:000000000001D5AB                 db 0FFh
.eh_frame:000000000001D5AC                 db  74h ; t
.eh_frame:000000000001D5AD                 db    0
.eh_frame:000000000001D5AE                 db    0
.eh_frame:000000000001D5AF                 db    0
.eh_frame:000000000001D5B0                 db    0
.eh_frame:000000000001D5B1                 db  42h ; B
.eh_frame:000000000001D5B2                 db  0Eh
.eh_frame:000000000001D5B3                 db  10h
.eh_frame:000000000001D5B4                 db  8Fh
.eh_frame:000000000001D5B5                 db    2
.eh_frame:000000000001D5B6                 db  42h ; B
.eh_frame:000000000001D5B7                 db  0Eh
.eh_frame:000000000001D5B8                 db  18h
.eh_frame:000000000001D5B9                 db  8Eh
.eh_frame:000000000001D5BA                 db    3
.eh_frame:000000000001D5BB                 db  49h ; I
.eh_frame:000000000001D5BC                 db  0Eh
.eh_frame:000000000001D5BD                 db  20h
.eh_frame:000000000001D5BE                 db  8Dh
.eh_frame:000000000001D5BF                 db    4
.eh_frame:000000000001D5C0                 db  42h ; B
.eh_frame:000000000001D5C1                 db  0Eh
.eh_frame:000000000001D5C2                 db  28h ; (
.eh_frame:000000000001D5C3                 db  8Ch
.eh_frame:000000000001D5C4                 db    5
.eh_frame:000000000001D5C5                 db  44h ; D
.eh_frame:000000000001D5C6                 db  0Eh
.eh_frame:000000000001D5C7                 db  30h ; 0
.eh_frame:000000000001D5C8                 db  86h
.eh_frame:000000000001D5C9                 db    6
.eh_frame:000000000001D5CA                 db  41h ; A
.eh_frame:000000000001D5CB                 db  0Eh
.eh_frame:000000000001D5CC                 db  38h ; 8
.eh_frame:000000000001D5CD                 db  83h
.eh_frame:000000000001D5CE                 db    7
.eh_frame:000000000001D5CF                 db  4Dh ; M
.eh_frame:000000000001D5D0                 db  0Eh
.eh_frame:000000000001D5D1                 db  50h ; P
.eh_frame:000000000001D5D2                 db  5Fh ; _
.eh_frame:000000000001D5D3                 db  0Eh
.eh_frame:000000000001D5D4                 db  58h ; X
.eh_frame:000000000001D5D5                 db  47h ; G
.eh_frame:000000000001D5D6                 db  0Eh
.eh_frame:000000000001D5D7                 db  60h ; `
.eh_frame:000000000001D5D8                 db  46h ; F
.eh_frame:000000000001D5D9                 db  0Eh
.eh_frame:000000000001D5DA                 db  68h ; h
.eh_frame:000000000001D5DB                 db  44h ; D
.eh_frame:000000000001D5DC                 db  0Eh
.eh_frame:000000000001D5DD                 db  70h ; p
.eh_frame:000000000001D5DE                 db  58h ; X
.eh_frame:000000000001D5DF                 db  0Eh
.eh_frame:000000000001D5E0                 db  38h ; 8
.eh_frame:000000000001D5E1                 db  41h ; A
.eh_frame:000000000001D5E2                 db  0Eh
.eh_frame:000000000001D5E3                 db  30h ; 0
.eh_frame:000000000001D5E4                 db  41h ; A
.eh_frame:000000000001D5E5                 db  0Eh
.eh_frame:000000000001D5E6                 db  28h ; (
.eh_frame:000000000001D5E7                 db  42h ; B
.eh_frame:000000000001D5E8                 db  0Eh
.eh_frame:000000000001D5E9                 db  20h
.eh_frame:000000000001D5EA                 db  42h ; B
.eh_frame:000000000001D5EB                 db  0Eh
.eh_frame:000000000001D5EC                 db  18h
.eh_frame:000000000001D5ED                 db  42h ; B
.eh_frame:000000000001D5EE                 db  0Eh
.eh_frame:000000000001D5EF                 db  10h
.eh_frame:000000000001D5F0                 db  42h ; B
.eh_frame:000000000001D5F1                 db  0Eh
.eh_frame:000000000001D5F2                 db    8
.eh_frame:000000000001D5F3                 db    0
.eh_frame:000000000001D5F4                 db  68h ; h
.eh_frame:000000000001D5F5                 db    0
.eh_frame:000000000001D5F6                 db    0
.eh_frame:000000000001D5F7                 db    0
.eh_frame:000000000001D5F8                 db  78h ; x
.eh_frame:000000000001D5F9                 db  1Fh
.eh_frame:000000000001D5FA                 db    0
.eh_frame:000000000001D5FB                 db    0
.eh_frame:000000000001D5FC                 db  64h ; d
.eh_frame:000000000001D5FD                 db  61h ; a
.eh_frame:000000000001D5FE                 db 0FFh
.eh_frame:000000000001D5FF                 db 0FFh
.eh_frame:000000000001D600                 db 0E3h
.eh_frame:000000000001D601                 db    0
.eh_frame:000000000001D602                 db    0
.eh_frame:000000000001D603                 db    0
.eh_frame:000000000001D604                 db    0
.eh_frame:000000000001D605                 db  42h ; B
.eh_frame:000000000001D606                 db  0Eh
.eh_frame:000000000001D607                 db  10h
.eh_frame:000000000001D608                 db  8Fh
.eh_frame:000000000001D609                 db    2
.eh_frame:000000000001D60A                 db  42h ; B
.eh_frame:000000000001D60B                 db  0Eh
.eh_frame:000000000001D60C                 db  18h
.eh_frame:000000000001D60D                 db  8Eh
.eh_frame:000000000001D60E                 db    3
.eh_frame:000000000001D60F                 db  49h ; I
.eh_frame:000000000001D610                 db  0Eh
.eh_frame:000000000001D611                 db  20h
.eh_frame:000000000001D612                 db  8Dh
.eh_frame:000000000001D613                 db    4
.eh_frame:000000000001D614                 db  42h ; B
.eh_frame:000000000001D615                 db  0Eh
.eh_frame:000000000001D616                 db  28h ; (
.eh_frame:000000000001D617                 db  8Ch
.eh_frame:000000000001D618                 db    5
.eh_frame:000000000001D619                 db  44h ; D
.eh_frame:000000000001D61A                 db  0Eh
.eh_frame:000000000001D61B                 db  30h ; 0
.eh_frame:000000000001D61C                 db  86h
.eh_frame:000000000001D61D                 db    6
.eh_frame:000000000001D61E                 db  41h ; A
.eh_frame:000000000001D61F                 db  0Eh
.eh_frame:000000000001D620                 db  38h ; 8
.eh_frame:000000000001D621                 db  83h
.eh_frame:000000000001D622                 db    7
.eh_frame:000000000001D623                 db  4Dh ; M
.eh_frame:000000000001D624                 db  0Eh
.eh_frame:000000000001D625                 db  70h ; p
.eh_frame:000000000001D626                 db  65h ; e
.eh_frame:000000000001D627                 db  0Eh
.eh_frame:000000000001D628                 db  78h ; x
.eh_frame:000000000001D629                 db  4Dh ; M
.eh_frame:000000000001D62A                 db  0Eh
.eh_frame:000000000001D62B                 db  80h
.eh_frame:000000000001D62C                 db    1
.eh_frame:000000000001D62D                 db  46h ; F
.eh_frame:000000000001D62E                 db  0Eh
.eh_frame:000000000001D62F                 db  88h
.eh_frame:000000000001D630                 db    1
.eh_frame:000000000001D631                 db  42h ; B
.eh_frame:000000000001D632                 db  0Eh
.eh_frame:000000000001D633                 db  90h
.eh_frame:000000000001D634                 db    1
.eh_frame:000000000001D635                 db  5Eh ; ^
.eh_frame:000000000001D636                 db  0Eh
.eh_frame:000000000001D637                 db  70h ; p
.eh_frame:000000000001D638                 db  56h ; V
.eh_frame:000000000001D639                 db  0Eh
.eh_frame:000000000001D63A                 db  78h ; x
.eh_frame:000000000001D63B                 db  43h ; C
.eh_frame:000000000001D63C                 db  0Eh
.eh_frame:000000000001D63D                 db  80h
.eh_frame:000000000001D63E                 db    1
.eh_frame:000000000001D63F                 db  43h ; C
.eh_frame:000000000001D640                 db  0Eh
.eh_frame:000000000001D641                 db  88h
.eh_frame:000000000001D642                 db    1
.eh_frame:000000000001D643                 db  56h ; V
.eh_frame:000000000001D644                 db  0Eh
.eh_frame:000000000001D645                 db  90h
.eh_frame:000000000001D646                 db    1
.eh_frame:000000000001D647                 db  52h ; R
.eh_frame:000000000001D648                 db  0Eh
.eh_frame:000000000001D649                 db  70h ; p
.eh_frame:000000000001D64A                 db  5Bh ; [
.eh_frame:000000000001D64B                 db  0Eh
.eh_frame:000000000001D64C                 db  38h ; 8
.eh_frame:000000000001D64D                 db  41h ; A
.eh_frame:000000000001D64E                 db  0Eh
.eh_frame:000000000001D64F                 db  30h ; 0
.eh_frame:000000000001D650                 db  41h ; A
.eh_frame:000000000001D651                 db  0Eh
.eh_frame:000000000001D652                 db  28h ; (
.eh_frame:000000000001D653                 db  42h ; B
.eh_frame:000000000001D654                 db  0Eh
.eh_frame:000000000001D655                 db  20h
.eh_frame:000000000001D656                 db  42h ; B
.eh_frame:000000000001D657                 db  0Eh
.eh_frame:000000000001D658                 db  18h
.eh_frame:000000000001D659                 db  42h ; B
.eh_frame:000000000001D65A                 db  0Eh
.eh_frame:000000000001D65B                 db  10h
.eh_frame:000000000001D65C                 db  42h ; B
.eh_frame:000000000001D65D                 db  0Eh
.eh_frame:000000000001D65E                 db    8
.eh_frame:000000000001D65F                 db    0
.eh_frame:000000000001D660                 db  10h
.eh_frame:000000000001D661                 db    0
.eh_frame:000000000001D662                 db    0
.eh_frame:000000000001D663                 db    0
.eh_frame:000000000001D664                 db 0E4h
.eh_frame:000000000001D665                 db  1Fh
.eh_frame:000000000001D666                 db    0
.eh_frame:000000000001D667                 db    0
.eh_frame:000000000001D668                 db 0E8h
.eh_frame:000000000001D669                 db  61h ; a
.eh_frame:000000000001D66A                 db 0FFh
.eh_frame:000000000001D66B                 db 0FFh
.eh_frame:000000000001D66C                 db  0Ah
.eh_frame:000000000001D66D                 db    0
.eh_frame:000000000001D66E                 db    0
.eh_frame:000000000001D66F                 db    0
.eh_frame:000000000001D670                 db    0
.eh_frame:000000000001D671                 db    0
.eh_frame:000000000001D672                 db    0
.eh_frame:000000000001D673                 db    0
.eh_frame:000000000001D674                 db  28h ; (
.eh_frame:000000000001D675                 db    0
.eh_frame:000000000001D676                 db    0
.eh_frame:000000000001D677                 db    0
.eh_frame:000000000001D678                 db 0F8h
.eh_frame:000000000001D679                 db  1Fh
.eh_frame:000000000001D67A                 db    0
.eh_frame:000000000001D67B                 db    0
.eh_frame:000000000001D67C                 db 0E4h
.eh_frame:000000000001D67D                 db  61h ; a
.eh_frame:000000000001D67E                 db 0FFh
.eh_frame:000000000001D67F                 db 0FFh
.eh_frame:000000000001D680                 db  93h
.eh_frame:000000000001D681                 db    0
.eh_frame:000000000001D682                 db    0
.eh_frame:000000000001D683                 db    0
.eh_frame:000000000001D684                 db    0
.eh_frame:000000000001D685                 db  48h ; H
.eh_frame:000000000001D686                 db  0Eh
.eh_frame:000000000001D687                 db  10h
.eh_frame:000000000001D688                 db  8Ch
.eh_frame:000000000001D689                 db    2
.eh_frame:000000000001D68A                 db  48h ; H
.eh_frame:000000000001D68B                 db  0Eh
.eh_frame:000000000001D68C                 db  18h
.eh_frame:000000000001D68D                 db  86h
.eh_frame:000000000001D68E                 db    3
.eh_frame:000000000001D68F                 db  41h ; A
.eh_frame:000000000001D690                 db  0Eh
.eh_frame:000000000001D691                 db  20h
.eh_frame:000000000001D692                 db  83h
.eh_frame:000000000001D693                 db    4
.eh_frame:000000000001D694                 db    2
.eh_frame:000000000001D695                 db  74h ; t
.eh_frame:000000000001D696                 db  0Eh
.eh_frame:000000000001D697                 db  18h
.eh_frame:000000000001D698                 db  4Bh ; K
.eh_frame:000000000001D699                 db  0Eh
.eh_frame:000000000001D69A                 db  10h
.eh_frame:000000000001D69B                 db  42h ; B
.eh_frame:000000000001D69C                 db  0Eh
.eh_frame:000000000001D69D                 db    8
.eh_frame:000000000001D69E                 db    0
.eh_frame:000000000001D69F                 db    0
.eh_frame:000000000001D6A0                 db  10h
.eh_frame:000000000001D6A1                 db    0
.eh_frame:000000000001D6A2                 db    0
.eh_frame:000000000001D6A3                 db    0
.eh_frame:000000000001D6A4                 db  24h ; $
.eh_frame:000000000001D6A5                 db  20h
.eh_frame:000000000001D6A6                 db    0
.eh_frame:000000000001D6A7                 db    0
.eh_frame:000000000001D6A8                 db  58h ; X
.eh_frame:000000000001D6A9                 db  62h ; b
.eh_frame:000000000001D6AA                 db 0FFh
.eh_frame:000000000001D6AB                 db 0FFh
.eh_frame:000000000001D6AC                 db  13h
.eh_frame:000000000001D6AD                 db    0
.eh_frame:000000000001D6AE                 db    0
.eh_frame:000000000001D6AF                 db    0
.eh_frame:000000000001D6B0                 db    0
.eh_frame:000000000001D6B1                 db    0
.eh_frame:000000000001D6B2                 db    0
.eh_frame:000000000001D6B3                 db    0
.eh_frame:000000000001D6B4                 db  10h
.eh_frame:000000000001D6B5                 db    0
.eh_frame:000000000001D6B6                 db    0
.eh_frame:000000000001D6B7                 db    0
.eh_frame:000000000001D6B8                 db  38h ; 8
.eh_frame:000000000001D6B9                 db  20h
.eh_frame:000000000001D6BA                 db    0
.eh_frame:000000000001D6BB                 db    0
.eh_frame:000000000001D6BC                 db  64h ; d
.eh_frame:000000000001D6BD                 db  62h ; b
.eh_frame:000000000001D6BE                 db 0FFh
.eh_frame:000000000001D6BF                 db 0FFh
.eh_frame:000000000001D6C0                 db  0Ch
.eh_frame:000000000001D6C1                 db    0
.eh_frame:000000000001D6C2                 db    0
.eh_frame:000000000001D6C3                 db    0
.eh_frame:000000000001D6C4                 db    0
.eh_frame:000000000001D6C5                 db    0
.eh_frame:000000000001D6C6                 db    0
.eh_frame:000000000001D6C7                 db    0
.eh_frame:000000000001D6C8                 db  10h
.eh_frame:000000000001D6C9                 db    0
.eh_frame:000000000001D6CA                 db    0
.eh_frame:000000000001D6CB                 db    0
.eh_frame:000000000001D6CC                 db  4Ch ; L
.eh_frame:000000000001D6CD                 db  20h
.eh_frame:000000000001D6CE                 db    0
.eh_frame:000000000001D6CF                 db    0
.eh_frame:000000000001D6D0                 db  60h ; `
.eh_frame:000000000001D6D1                 db  62h ; b
.eh_frame:000000000001D6D2                 db 0FFh
.eh_frame:000000000001D6D3                 db 0FFh
.eh_frame:000000000001D6D4                 db  18h
.eh_frame:000000000001D6D5                 db    0
.eh_frame:000000000001D6D6                 db    0
.eh_frame:000000000001D6D7                 db    0
.eh_frame:000000000001D6D8                 db    0
.eh_frame:000000000001D6D9                 db    0
.eh_frame:000000000001D6DA                 db    0
.eh_frame:000000000001D6DB                 db    0
.eh_frame:000000000001D6DC                 db  10h
.eh_frame:000000000001D6DD                 db    0
.eh_frame:000000000001D6DE                 db    0
.eh_frame:000000000001D6DF                 db    0
.eh_frame:000000000001D6E0                 db  60h ; `
.eh_frame:000000000001D6E1                 db  20h
.eh_frame:000000000001D6E2                 db    0
.eh_frame:000000000001D6E3                 db    0
.eh_frame:000000000001D6E4                 db  6Ch ; l
.eh_frame:000000000001D6E5                 db  62h ; b
.eh_frame:000000000001D6E6                 db 0FFh
.eh_frame:000000000001D6E7                 db 0FFh
.eh_frame:000000000001D6E8                 db  14h
.eh_frame:000000000001D6E9                 db    0
.eh_frame:000000000001D6EA                 db    0
.eh_frame:000000000001D6EB                 db    0
.eh_frame:000000000001D6EC                 db    0
.eh_frame:000000000001D6ED                 db    0
.eh_frame:000000000001D6EE                 db    0
.eh_frame:000000000001D6EF                 db    0
.eh_frame:000000000001D6F0                 db  18h
.eh_frame:000000000001D6F1                 db    0
.eh_frame:000000000001D6F2                 db    0
.eh_frame:000000000001D6F3                 db    0
.eh_frame:000000000001D6F4                 db  74h ; t
.eh_frame:000000000001D6F5                 db  20h
.eh_frame:000000000001D6F6                 db    0
.eh_frame:000000000001D6F7                 db    0
.eh_frame:000000000001D6F8                 db  78h ; x
.eh_frame:000000000001D6F9                 db  62h ; b
.eh_frame:000000000001D6FA                 db 0FFh
.eh_frame:000000000001D6FB                 db 0FFh
.eh_frame:000000000001D6FC                 db  8Eh
.eh_frame:000000000001D6FD                 db    0
.eh_frame:000000000001D6FE                 db    0
.eh_frame:000000000001D6FF                 db    0
.eh_frame:000000000001D700                 db    0
.eh_frame:000000000001D701                 db  44h ; D
.eh_frame:000000000001D702                 db  0Eh
.eh_frame:000000000001D703                 db  50h ; P
.eh_frame:000000000001D704                 db    2
.eh_frame:000000000001D705                 db  7Fh ; 
.eh_frame:000000000001D706                 db  0Ah
.eh_frame:000000000001D707                 db  0Eh
.eh_frame:000000000001D708                 db    8
.eh_frame:000000000001D709                 db  41h ; A
.eh_frame:000000000001D70A                 db  0Bh
.eh_frame:000000000001D70B                 db    0
.eh_frame:000000000001D70C                 db  18h
.eh_frame:000000000001D70D                 db    0
.eh_frame:000000000001D70E                 db    0
.eh_frame:000000000001D70F                 db    0
.eh_frame:000000000001D710                 db  90h
.eh_frame:000000000001D711                 db  20h
.eh_frame:000000000001D712                 db    0
.eh_frame:000000000001D713                 db    0
.eh_frame:000000000001D714                 db 0ECh
.eh_frame:000000000001D715                 db  62h ; b
.eh_frame:000000000001D716                 db 0FFh
.eh_frame:000000000001D717                 db 0FFh
.eh_frame:000000000001D718                 db  8Ah
.eh_frame:000000000001D719                 db    0
.eh_frame:000000000001D71A                 db    0
.eh_frame:000000000001D71B                 db    0
.eh_frame:000000000001D71C                 db    0
.eh_frame:000000000001D71D                 db  44h ; D
.eh_frame:000000000001D71E                 db  0Eh
.eh_frame:000000000001D71F                 db  50h ; P
.eh_frame:000000000001D720                 db    2
.eh_frame:000000000001D721                 db  7Bh ; {
.eh_frame:000000000001D722                 db  0Ah
.eh_frame:000000000001D723                 db  0Eh
.eh_frame:000000000001D724                 db    8
.eh_frame:000000000001D725                 db  41h ; A
.eh_frame:000000000001D726                 db  0Bh
.eh_frame:000000000001D727                 db    0
.eh_frame:000000000001D728                 db  10h
.eh_frame:000000000001D729                 db    0
.eh_frame:000000000001D72A                 db    0
.eh_frame:000000000001D72B                 db    0
.eh_frame:000000000001D72C                 db 0ACh
.eh_frame:000000000001D72D                 db  20h
.eh_frame:000000000001D72E                 db    0
.eh_frame:000000000001D72F                 db    0
.eh_frame:000000000001D730                 db  60h ; `
.eh_frame:000000000001D731                 db  63h ; c
.eh_frame:000000000001D732                 db 0FFh
.eh_frame:000000000001D733                 db 0FFh
.eh_frame:000000000001D734                 db  0Ch
.eh_frame:000000000001D735                 db    0
.eh_frame:000000000001D736                 db    0
.eh_frame:000000000001D737                 db    0
.eh_frame:000000000001D738                 db    0
.eh_frame:000000000001D739                 db    0
.eh_frame:000000000001D73A                 db    0
.eh_frame:000000000001D73B                 db    0
.eh_frame:000000000001D73C                 db  10h
.eh_frame:000000000001D73D                 db    0
.eh_frame:000000000001D73E                 db    0
.eh_frame:000000000001D73F                 db    0
.eh_frame:000000000001D740                 db 0C0h
.eh_frame:000000000001D741                 db  20h
.eh_frame:000000000001D742                 db    0
.eh_frame:000000000001D743                 db    0
.eh_frame:000000000001D744                 db  5Ch ; \
.eh_frame:000000000001D745                 db  63h ; c
.eh_frame:000000000001D746                 db 0FFh
.eh_frame:000000000001D747                 db 0FFh
.eh_frame:000000000001D748                 db  0Fh
.eh_frame:000000000001D749                 db    0
.eh_frame:000000000001D74A                 db    0
.eh_frame:000000000001D74B                 db    0
.eh_frame:000000000001D74C                 db    0
.eh_frame:000000000001D74D                 db    0
.eh_frame:000000000001D74E                 db    0
.eh_frame:000000000001D74F                 db    0
.eh_frame:000000000001D750                 db  18h
.eh_frame:000000000001D751                 db    0
.eh_frame:000000000001D752                 db    0
.eh_frame:000000000001D753                 db    0
.eh_frame:000000000001D754                 db 0D4h
.eh_frame:000000000001D755                 db  20h
.eh_frame:000000000001D756                 db    0
.eh_frame:000000000001D757                 db    0
.eh_frame:000000000001D758                 db  58h ; X
.eh_frame:000000000001D759                 db  63h ; c
.eh_frame:000000000001D75A                 db 0FFh
.eh_frame:000000000001D75B                 db 0FFh
.eh_frame:000000000001D75C                 db  98h
.eh_frame:000000000001D75D                 db    0
.eh_frame:000000000001D75E                 db    0
.eh_frame:000000000001D75F                 db    0
.eh_frame:000000000001D760                 db    0
.eh_frame:000000000001D761                 db  44h ; D
.eh_frame:000000000001D762                 db  0Eh
.eh_frame:000000000001D763                 db  50h ; P
.eh_frame:000000000001D764                 db    2
.eh_frame:000000000001D765                 db  8Eh
.eh_frame:000000000001D766                 db  0Ah
.eh_frame:000000000001D767                 db  0Eh
.eh_frame:000000000001D768                 db    8
.eh_frame:000000000001D769                 db  41h ; A
.eh_frame:000000000001D76A                 db  0Bh
.eh_frame:000000000001D76B                 db    0
.eh_frame:000000000001D76C                 db  10h
.eh_frame:000000000001D76D                 db    0
.eh_frame:000000000001D76E                 db    0
.eh_frame:000000000001D76F                 db    0
.eh_frame:000000000001D770                 db 0F0h
.eh_frame:000000000001D771                 db  20h
.eh_frame:000000000001D772                 db    0
.eh_frame:000000000001D773                 db    0
.eh_frame:000000000001D774                 db 0DCh
.eh_frame:000000000001D775                 db  63h ; c
.eh_frame:000000000001D776                 db 0FFh
.eh_frame:000000000001D777                 db 0FFh
.eh_frame:000000000001D778                 db  10h
.eh_frame:000000000001D779                 db    0
.eh_frame:000000000001D77A                 db    0
.eh_frame:000000000001D77B                 db    0
.eh_frame:000000000001D77C                 db    0
.eh_frame:000000000001D77D                 db    0
.eh_frame:000000000001D77E                 db    0
.eh_frame:000000000001D77F                 db    0
.eh_frame:000000000001D780                 db  10h
.eh_frame:000000000001D781                 db    0
.eh_frame:000000000001D782                 db    0
.eh_frame:000000000001D783                 db    0
.eh_frame:000000000001D784                 db    4
.eh_frame:000000000001D785                 db  21h ; !
.eh_frame:000000000001D786                 db    0
.eh_frame:000000000001D787                 db    0
.eh_frame:000000000001D788                 db 0D8h
.eh_frame:000000000001D789                 db  63h ; c
.eh_frame:000000000001D78A                 db 0FFh
.eh_frame:000000000001D78B                 db 0FFh
.eh_frame:000000000001D78C                 db  11h
.eh_frame:000000000001D78D                 db    0
.eh_frame:000000000001D78E                 db    0
.eh_frame:000000000001D78F                 db    0
.eh_frame:000000000001D790                 db    0
.eh_frame:000000000001D791                 db    0
.eh_frame:000000000001D792                 db    0
.eh_frame:000000000001D793                 db    0
.eh_frame:000000000001D794                 db  10h
.eh_frame:000000000001D795                 db    0
.eh_frame:000000000001D796                 db    0
.eh_frame:000000000001D797                 db    0
.eh_frame:000000000001D798                 db  18h
.eh_frame:000000000001D799                 db  21h ; !
.eh_frame:000000000001D79A                 db    0
.eh_frame:000000000001D79B                 db    0
.eh_frame:000000000001D79C                 db 0E4h
.eh_frame:000000000001D79D                 db  63h ; c
.eh_frame:000000000001D79E                 db 0FFh
.eh_frame:000000000001D79F                 db 0FFh
.eh_frame:000000000001D7A0                 db  0Ah
.eh_frame:000000000001D7A1                 db    0
.eh_frame:000000000001D7A2                 db    0
.eh_frame:000000000001D7A3                 db    0
.eh_frame:000000000001D7A4                 db    0
.eh_frame:000000000001D7A5                 db    0
.eh_frame:000000000001D7A6                 db    0
.eh_frame:000000000001D7A7                 db    0
.eh_frame:000000000001D7A8                 db  18h
.eh_frame:000000000001D7A9                 db    0
.eh_frame:000000000001D7AA                 db    0
.eh_frame:000000000001D7AB                 db    0
.eh_frame:000000000001D7AC                 db  2Ch ; ,
.eh_frame:000000000001D7AD                 db  21h ; !
.eh_frame:000000000001D7AE                 db    0
.eh_frame:000000000001D7AF                 db    0
.eh_frame:000000000001D7B0                 db 0E0h
.eh_frame:000000000001D7B1                 db  63h ; c
.eh_frame:000000000001D7B2                 db 0FFh
.eh_frame:000000000001D7B3                 db 0FFh
.eh_frame:000000000001D7B4                 db  8Eh
.eh_frame:000000000001D7B5                 db    0
.eh_frame:000000000001D7B6                 db    0
.eh_frame:000000000001D7B7                 db    0
.eh_frame:000000000001D7B8                 db    0
.eh_frame:000000000001D7B9                 db  44h ; D
.eh_frame:000000000001D7BA                 db  0Eh
.eh_frame:000000000001D7BB                 db  50h ; P
.eh_frame:000000000001D7BC                 db    2
.eh_frame:000000000001D7BD                 db  7Fh ; 
.eh_frame:000000000001D7BE                 db  0Ah
.eh_frame:000000000001D7BF                 db  0Eh
.eh_frame:000000000001D7C0                 db    8
.eh_frame:000000000001D7C1                 db  41h ; A
.eh_frame:000000000001D7C2                 db  0Bh
.eh_frame:000000000001D7C3                 db    0
.eh_frame:000000000001D7C4                 db  18h
.eh_frame:000000000001D7C5                 db    0
.eh_frame:000000000001D7C6                 db    0
.eh_frame:000000000001D7C7                 db    0
.eh_frame:000000000001D7C8                 db  48h ; H
.eh_frame:000000000001D7C9                 db  21h ; !
.eh_frame:000000000001D7CA                 db    0
.eh_frame:000000000001D7CB                 db    0
.eh_frame:000000000001D7CC                 db  54h ; T
.eh_frame:000000000001D7CD                 db  64h ; d
.eh_frame:000000000001D7CE                 db 0FFh
.eh_frame:000000000001D7CF                 db 0FFh
.eh_frame:000000000001D7D0                 db  91h
.eh_frame:000000000001D7D1                 db    0
.eh_frame:000000000001D7D2                 db    0
.eh_frame:000000000001D7D3                 db    0
.eh_frame:000000000001D7D4                 db    0
.eh_frame:000000000001D7D5                 db  44h ; D
.eh_frame:000000000001D7D6                 db  0Eh
.eh_frame:000000000001D7D7                 db  50h ; P
.eh_frame:000000000001D7D8                 db    2
.eh_frame:000000000001D7D9                 db  82h
.eh_frame:000000000001D7DA                 db  0Ah
.eh_frame:000000000001D7DB                 db  0Eh
.eh_frame:000000000001D7DC                 db    8
.eh_frame:000000000001D7DD                 db  41h ; A
.eh_frame:000000000001D7DE                 db  0Bh
.eh_frame:000000000001D7DF                 db    0
.eh_frame:000000000001D7E0                 db  10h
.eh_frame:000000000001D7E1                 db    0
.eh_frame:000000000001D7E2                 db    0
.eh_frame:000000000001D7E3                 db    0
.eh_frame:000000000001D7E4                 db  64h ; d
.eh_frame:000000000001D7E5                 db  21h ; !
.eh_frame:000000000001D7E6                 db    0
.eh_frame:000000000001D7E7                 db    0
.eh_frame:000000000001D7E8                 db 0D8h
.eh_frame:000000000001D7E9                 db  64h ; d
.eh_frame:000000000001D7EA                 db 0FFh
.eh_frame:000000000001D7EB                 db 0FFh
.eh_frame:000000000001D7EC                 db  0Ch
.eh_frame:000000000001D7ED                 db    0
.eh_frame:000000000001D7EE                 db    0
.eh_frame:000000000001D7EF                 db    0
.eh_frame:000000000001D7F0                 db    0
.eh_frame:000000000001D7F1                 db    0
.eh_frame:000000000001D7F2                 db    0
.eh_frame:000000000001D7F3                 db    0
.eh_frame:000000000001D7F4                 db  10h
.eh_frame:000000000001D7F5                 db    0
.eh_frame:000000000001D7F6                 db    0
.eh_frame:000000000001D7F7                 db    0
.eh_frame:000000000001D7F8                 db  78h ; x
.eh_frame:000000000001D7F9                 db  21h ; !
.eh_frame:000000000001D7FA                 db    0
.eh_frame:000000000001D7FB                 db    0
.eh_frame:000000000001D7FC                 db 0D4h
.eh_frame:000000000001D7FD                 db  64h ; d
.eh_frame:000000000001D7FE                 db 0FFh
.eh_frame:000000000001D7FF                 db 0FFh
.eh_frame:000000000001D800                 db  17h
.eh_frame:000000000001D801                 db    0
.eh_frame:000000000001D802                 db    0
.eh_frame:000000000001D803                 db    0
.eh_frame:000000000001D804                 db    0
.eh_frame:000000000001D805                 db    0
.eh_frame:000000000001D806                 db    0
.eh_frame:000000000001D807                 db    0
.eh_frame:000000000001D808                 db  10h
.eh_frame:000000000001D809                 db    0
.eh_frame:000000000001D80A                 db    0
.eh_frame:000000000001D80B                 db    0
.eh_frame:000000000001D80C                 db  8Ch
.eh_frame:000000000001D80D                 db  21h ; !
.eh_frame:000000000001D80E                 db    0
.eh_frame:000000000001D80F                 db    0
.eh_frame:000000000001D810                 db 0E0h
.eh_frame:000000000001D811                 db  64h ; d
.eh_frame:000000000001D812                 db 0FFh
.eh_frame:000000000001D813                 db 0FFh
.eh_frame:000000000001D814                 db  13h
.eh_frame:000000000001D815                 db    0
.eh_frame:000000000001D816                 db    0
.eh_frame:000000000001D817                 db    0
.eh_frame:000000000001D818                 db    0
.eh_frame:000000000001D819                 db    0
.eh_frame:000000000001D81A                 db    0
.eh_frame:000000000001D81B                 db    0
.eh_frame:000000000001D81C                 db  10h
.eh_frame:000000000001D81D                 db    0
.eh_frame:000000000001D81E                 db    0
.eh_frame:000000000001D81F                 db    0
.eh_frame:000000000001D820                 db 0A0h
.eh_frame:000000000001D821                 db  21h ; !
.eh_frame:000000000001D822                 db    0
.eh_frame:000000000001D823                 db    0
.eh_frame:000000000001D824                 db 0ECh
.eh_frame:000000000001D825                 db  64h ; d
.eh_frame:000000000001D826                 db 0FFh
.eh_frame:000000000001D827                 db 0FFh
.eh_frame:000000000001D828                 db  0Ch
.eh_frame:000000000001D829                 db    0
.eh_frame:000000000001D82A                 db    0
.eh_frame:000000000001D82B                 db    0
.eh_frame:000000000001D82C                 db    0
.eh_frame:000000000001D82D                 db    0
.eh_frame:000000000001D82E                 db    0
.eh_frame:000000000001D82F                 db    0
.eh_frame:000000000001D830                 db  10h
.eh_frame:000000000001D831                 db    0
.eh_frame:000000000001D832                 db    0
.eh_frame:000000000001D833                 db    0
.eh_frame:000000000001D834                 db 0B4h
.eh_frame:000000000001D835                 db  21h ; !
.eh_frame:000000000001D836                 db    0
.eh_frame:000000000001D837                 db    0
.eh_frame:000000000001D838                 db 0E8h
.eh_frame:000000000001D839                 db  64h ; d
.eh_frame:000000000001D83A                 db 0FFh
.eh_frame:000000000001D83B                 db 0FFh
.eh_frame:000000000001D83C                 db  14h
.eh_frame:000000000001D83D                 db    0
.eh_frame:000000000001D83E                 db    0
.eh_frame:000000000001D83F                 db    0
.eh_frame:000000000001D840                 db    0
.eh_frame:000000000001D841                 db    0
.eh_frame:000000000001D842                 db    0
.eh_frame:000000000001D843                 db    0
.eh_frame:000000000001D844                 db  10h
.eh_frame:000000000001D845                 db    0
.eh_frame:000000000001D846                 db    0
.eh_frame:000000000001D847                 db    0
.eh_frame:000000000001D848                 db 0C8h
.eh_frame:000000000001D849                 db  21h ; !
.eh_frame:000000000001D84A                 db    0
.eh_frame:000000000001D84B                 db    0
.eh_frame:000000000001D84C                 db 0F4h
.eh_frame:000000000001D84D                 db  64h ; d
.eh_frame:000000000001D84E                 db 0FFh
.eh_frame:000000000001D84F                 db 0FFh
.eh_frame:000000000001D850                 db  13h
.eh_frame:000000000001D851                 db    0
.eh_frame:000000000001D852                 db    0
.eh_frame:000000000001D853                 db    0
.eh_frame:000000000001D854                 db    0
.eh_frame:000000000001D855                 db    0
.eh_frame:000000000001D856                 db    0
.eh_frame:000000000001D857                 db    0
.eh_frame:000000000001D858                 db  14h
.eh_frame:000000000001D859                 db    0
.eh_frame:000000000001D85A                 db    0
.eh_frame:000000000001D85B                 db    0
.eh_frame:000000000001D85C                 db 0DCh
.eh_frame:000000000001D85D                 db  21h ; !
.eh_frame:000000000001D85E                 db    0
.eh_frame:000000000001D85F                 db    0
.eh_frame:000000000001D860                 db    0
.eh_frame:000000000001D861                 db  65h ; e
.eh_frame:000000000001D862                 db 0FFh
.eh_frame:000000000001D863                 db 0FFh
.eh_frame:000000000001D864                 db  18h
.eh_frame:000000000001D865                 db    0
.eh_frame:000000000001D866                 db    0
.eh_frame:000000000001D867                 db    0
.eh_frame:000000000001D868                 db    0
.eh_frame:000000000001D869                 db    0
.eh_frame:000000000001D86A                 db    0
.eh_frame:000000000001D86B                 db    0
.eh_frame:000000000001D86C                 db    0
.eh_frame:000000000001D86D                 db    0
.eh_frame:000000000001D86E                 db    0
.eh_frame:000000000001D86F                 db    0
.eh_frame:000000000001D870                 db  38h ; 8
.eh_frame:000000000001D871                 db    0
.eh_frame:000000000001D872                 db    0
.eh_frame:000000000001D873                 db    0
.eh_frame:000000000001D874                 db 0F4h
.eh_frame:000000000001D875                 db  21h ; !
.eh_frame:000000000001D876                 db    0
.eh_frame:000000000001D877                 db    0
.eh_frame:000000000001D878                 db    8
.eh_frame:000000000001D879                 db  65h ; e
.eh_frame:000000000001D87A                 db 0FFh
.eh_frame:000000000001D87B                 db 0FFh
.eh_frame:000000000001D87C                 db  27h ; '
.eh_frame:000000000001D87D                 db    1
.eh_frame:000000000001D87E                 db    0
.eh_frame:000000000001D87F                 db    0
.eh_frame:000000000001D880                 db    0
.eh_frame:000000000001D881                 db  42h ; B
.eh_frame:000000000001D882                 db  0Eh
.eh_frame:000000000001D883                 db  10h
.eh_frame:000000000001D884                 db  8Dh
.eh_frame:000000000001D885                 db    2
.eh_frame:000000000001D886                 db  42h ; B
.eh_frame:000000000001D887                 db  0Eh
.eh_frame:000000000001D888                 db  18h
.eh_frame:000000000001D889                 db  8Ch
.eh_frame:000000000001D88A                 db    3
.eh_frame:000000000001D88B                 db  44h ; D
.eh_frame:000000000001D88C                 db  0Eh
.eh_frame:000000000001D88D                 db  20h
.eh_frame:000000000001D88E                 db  86h
.eh_frame:000000000001D88F                 db    4
.eh_frame:000000000001D890                 db  41h ; A
.eh_frame:000000000001D891                 db  0Eh
.eh_frame:000000000001D892                 db  28h ; (
.eh_frame:000000000001D893                 db  83h
.eh_frame:000000000001D894                 db    5
.eh_frame:000000000001D895                 db  4Fh ; O
.eh_frame:000000000001D896                 db  0Eh
.eh_frame:000000000001D897                 db 0E0h
.eh_frame:000000000001D898                 db    2
.eh_frame:000000000001D899                 db    2
.eh_frame:000000000001D89A                 db 0B5h
.eh_frame:000000000001D89B                 db  0Ah
.eh_frame:000000000001D89C                 db  0Eh
.eh_frame:000000000001D89D                 db  28h ; (
.eh_frame:000000000001D89E                 db  41h ; A
.eh_frame:000000000001D89F                 db  0Eh
.eh_frame:000000000001D8A0                 db  20h
.eh_frame:000000000001D8A1                 db  41h ; A
.eh_frame:000000000001D8A2                 db  0Eh
.eh_frame:000000000001D8A3                 db  18h
.eh_frame:000000000001D8A4                 db  42h ; B
.eh_frame:000000000001D8A5                 db  0Eh
.eh_frame:000000000001D8A6                 db  10h
.eh_frame:000000000001D8A7                 db  42h ; B
.eh_frame:000000000001D8A8                 db  0Eh
.eh_frame:000000000001D8A9                 db    8
.eh_frame:000000000001D8AA                 db  45h ; E
.eh_frame:000000000001D8AB                 db  0Bh
.eh_frame:000000000001D8AC                 db  5Ch ; \
.eh_frame:000000000001D8AD                 db    0
.eh_frame:000000000001D8AE                 db    0
.eh_frame:000000000001D8AF                 db    0
.eh_frame:000000000001D8B0                 db  30h ; 0
.eh_frame:000000000001D8B1                 db  22h ; "
.eh_frame:000000000001D8B2                 db    0
.eh_frame:000000000001D8B3                 db    0
.eh_frame:000000000001D8B4                 db 0FCh
.eh_frame:000000000001D8B5                 db  65h ; e
.eh_frame:000000000001D8B6                 db 0FFh
.eh_frame:000000000001D8B7                 db 0FFh
.eh_frame:000000000001D8B8                 db  92h
.eh_frame:000000000001D8B9                 db    0
.eh_frame:000000000001D8BA                 db    0
.eh_frame:000000000001D8BB                 db    0
.eh_frame:000000000001D8BC                 db    0
.eh_frame:000000000001D8BD                 db  42h ; B
.eh_frame:000000000001D8BE                 db  0Eh
.eh_frame:000000000001D8BF                 db  10h
.eh_frame:000000000001D8C0                 db  8Fh
.eh_frame:000000000001D8C1                 db    2
.eh_frame:000000000001D8C2                 db  42h ; B
.eh_frame:000000000001D8C3                 db  0Eh
.eh_frame:000000000001D8C4                 db  18h
.eh_frame:000000000001D8C5                 db  8Eh
.eh_frame:000000000001D8C6                 db    3
.eh_frame:000000000001D8C7                 db  45h ; E
.eh_frame:000000000001D8C8                 db  0Eh
.eh_frame:000000000001D8C9                 db  20h
.eh_frame:000000000001D8CA                 db  8Dh
.eh_frame:000000000001D8CB                 db    4
.eh_frame:000000000001D8CC                 db  42h ; B
.eh_frame:000000000001D8CD                 db  0Eh
.eh_frame:000000000001D8CE                 db  28h ; (
.eh_frame:000000000001D8CF                 db  8Ch
.eh_frame:000000000001D8D0                 db    5
.eh_frame:000000000001D8D1                 db  41h ; A
.eh_frame:000000000001D8D2                 db  0Eh
.eh_frame:000000000001D8D3                 db  30h ; 0
.eh_frame:000000000001D8D4                 db  86h
.eh_frame:000000000001D8D5                 db    6
.eh_frame:000000000001D8D6                 db  41h ; A
.eh_frame:000000000001D8D7                 db  0Eh
.eh_frame:000000000001D8D8                 db  38h ; 8
.eh_frame:000000000001D8D9                 db  83h
.eh_frame:000000000001D8DA                 db    7
.eh_frame:000000000001D8DB                 db  4Ah ; J
.eh_frame:000000000001D8DC                 db  0Eh
.eh_frame:000000000001D8DD                 db  50h ; P
.eh_frame:000000000001D8DE                 db  76h ; v
.eh_frame:000000000001D8DF                 db  0Ah
.eh_frame:000000000001D8E0                 db  0Eh
.eh_frame:000000000001D8E1                 db  38h ; 8
.eh_frame:000000000001D8E2                 db  43h ; C
.eh_frame:000000000001D8E3                 db  0Eh
.eh_frame:000000000001D8E4                 db  30h ; 0
.eh_frame:000000000001D8E5                 db  41h ; A
.eh_frame:000000000001D8E6                 db  0Eh
.eh_frame:000000000001D8E7                 db  28h ; (
.eh_frame:000000000001D8E8                 db  42h ; B
.eh_frame:000000000001D8E9                 db  0Eh
.eh_frame:000000000001D8EA                 db  20h
.eh_frame:000000000001D8EB                 db  42h ; B
.eh_frame:000000000001D8EC                 db  0Eh
.eh_frame:000000000001D8ED                 db  18h
.eh_frame:000000000001D8EE                 db  42h ; B
.eh_frame:000000000001D8EF                 db  0Eh
.eh_frame:000000000001D8F0                 db  10h
.eh_frame:000000000001D8F1                 db  42h ; B
.eh_frame:000000000001D8F2                 db  0Eh
.eh_frame:000000000001D8F3                 db    8
.eh_frame:000000000001D8F4                 db  47h ; G
.eh_frame:000000000001D8F5                 db  0Bh
.eh_frame:000000000001D8F6                 db  5Ah ; Z
.eh_frame:000000000001D8F7                 db  0Eh
.eh_frame:000000000001D8F8                 db  38h ; 8
.eh_frame:000000000001D8F9                 db  4Ah ; J
.eh_frame:000000000001D8FA                 db  0Eh
.eh_frame:000000000001D8FB                 db  30h ; 0
.eh_frame:000000000001D8FC                 db  41h ; A
.eh_frame:000000000001D8FD                 db  0Eh
.eh_frame:000000000001D8FE                 db  28h ; (
.eh_frame:000000000001D8FF                 db  42h ; B
.eh_frame:000000000001D900                 db  0Eh
.eh_frame:000000000001D901                 db  20h
.eh_frame:000000000001D902                 db  42h ; B
.eh_frame:000000000001D903                 db  0Eh
.eh_frame:000000000001D904                 db  18h
.eh_frame:000000000001D905                 db  42h ; B
.eh_frame:000000000001D906                 db  0Eh
.eh_frame:000000000001D907                 db  10h
.eh_frame:000000000001D908                 db  42h ; B
.eh_frame:000000000001D909                 db  0Eh
.eh_frame:000000000001D90A                 db    8
.eh_frame:000000000001D90B                 db    0
.eh_frame:000000000001D90C                 db  10h
.eh_frame:000000000001D90D                 db    0
.eh_frame:000000000001D90E                 db    0
.eh_frame:000000000001D90F                 db    0
.eh_frame:000000000001D910                 db  90h
.eh_frame:000000000001D911                 db  22h ; "
.eh_frame:000000000001D912                 db    0
.eh_frame:000000000001D913                 db    0
.eh_frame:000000000001D914                 db  3Ch ; <
.eh_frame:000000000001D915                 db  66h ; f
.eh_frame:000000000001D916                 db 0FFh
.eh_frame:000000000001D917                 db 0FFh
.eh_frame:000000000001D918                 db  12h
.eh_frame:000000000001D919                 db    0
.eh_frame:000000000001D91A                 db    0
.eh_frame:000000000001D91B                 db    0
.eh_frame:000000000001D91C                 db    0
.eh_frame:000000000001D91D                 db    0
.eh_frame:000000000001D91E                 db    0
.eh_frame:000000000001D91F                 db    0
.eh_frame:000000000001D920                 db  10h
.eh_frame:000000000001D921                 db    1
.eh_frame:000000000001D922                 db    0
.eh_frame:000000000001D923                 db    0
.eh_frame:000000000001D924                 db 0A4h
.eh_frame:000000000001D925                 db  22h ; "
.eh_frame:000000000001D926                 db    0
.eh_frame:000000000001D927                 db    0
.eh_frame:000000000001D928                 db  48h ; H
.eh_frame:000000000001D929                 db  66h ; f
.eh_frame:000000000001D92A                 db 0FFh
.eh_frame:000000000001D92B                 db 0FFh
.eh_frame:000000000001D92C                 db  17h
.eh_frame:000000000001D92D                 db    4
.eh_frame:000000000001D92E                 db    0
.eh_frame:000000000001D92F                 db    0
.eh_frame:000000000001D930                 db    0
.eh_frame:000000000001D931                 db  42h ; B
.eh_frame:000000000001D932                 db  0Eh
.eh_frame:000000000001D933                 db  10h
.eh_frame:000000000001D934                 db  8Fh
.eh_frame:000000000001D935                 db    2
.eh_frame:000000000001D936                 db  42h ; B
.eh_frame:000000000001D937                 db  0Eh
.eh_frame:000000000001D938                 db  18h
.eh_frame:000000000001D939                 db  8Eh
.eh_frame:000000000001D93A                 db    3
.eh_frame:000000000001D93B                 db  42h ; B
.eh_frame:000000000001D93C                 db  0Eh
.eh_frame:000000000001D93D                 db  20h
.eh_frame:000000000001D93E                 db  8Dh
.eh_frame:000000000001D93F                 db    4
.eh_frame:000000000001D940                 db  42h ; B
.eh_frame:000000000001D941                 db  0Eh
.eh_frame:000000000001D942                 db  28h ; (
.eh_frame:000000000001D943                 db  8Ch
.eh_frame:000000000001D944                 db    5
.eh_frame:000000000001D945                 db  44h ; D
.eh_frame:000000000001D946                 db  0Eh
.eh_frame:000000000001D947                 db  30h ; 0
.eh_frame:000000000001D948                 db  86h
.eh_frame:000000000001D949                 db    6
.eh_frame:000000000001D94A                 db  41h ; A
.eh_frame:000000000001D94B                 db  0Eh
.eh_frame:000000000001D94C                 db  38h ; 8
.eh_frame:000000000001D94D                 db  83h
.eh_frame:000000000001D94E                 db    7
.eh_frame:000000000001D94F                 db  4Ah ; J
.eh_frame:000000000001D950                 db  0Eh
.eh_frame:000000000001D951                 db  60h ; `
.eh_frame:000000000001D952                 db    2
.eh_frame:000000000001D953                 db 0DDh
.eh_frame:000000000001D954                 db  0Eh
.eh_frame:000000000001D955                 db  68h ; h
.eh_frame:000000000001D956                 db  57h ; W
.eh_frame:000000000001D957                 db  0Eh
.eh_frame:000000000001D958                 db  70h ; p
.eh_frame:000000000001D959                 db  42h ; B
.eh_frame:000000000001D95A                 db  0Eh
.eh_frame:000000000001D95B                 db  78h ; x
.eh_frame:000000000001D95C                 db  42h ; B
.eh_frame:000000000001D95D                 db  0Eh
.eh_frame:000000000001D95E                 db  80h
.eh_frame:000000000001D95F                 db    1
.eh_frame:000000000001D960                 db  42h ; B
.eh_frame:000000000001D961                 db  0Eh
.eh_frame:000000000001D962                 db  88h
.eh_frame:000000000001D963                 db    1
.eh_frame:000000000001D964                 db  42h ; B
.eh_frame:000000000001D965                 db  0Eh
.eh_frame:000000000001D966                 db  90h
.eh_frame:000000000001D967                 db    1
.eh_frame:000000000001D968                 db  53h ; S
.eh_frame:000000000001D969                 db  0Eh
.eh_frame:000000000001D96A                 db  60h ; `
.eh_frame:000000000001D96B                 db  44h ; D
.eh_frame:000000000001D96C                 db  0Ah
.eh_frame:000000000001D96D                 db  0Eh
.eh_frame:000000000001D96E                 db  38h ; 8
.eh_frame:000000000001D96F                 db  41h ; A
.eh_frame:000000000001D970                 db  0Eh
.eh_frame:000000000001D971                 db  30h ; 0
.eh_frame:000000000001D972                 db  41h ; A
.eh_frame:000000000001D973                 db  0Eh
.eh_frame:000000000001D974                 db  28h ; (
.eh_frame:000000000001D975                 db  42h ; B
.eh_frame:000000000001D976                 db  0Eh
.eh_frame:000000000001D977                 db  20h
.eh_frame:000000000001D978                 db  42h ; B
.eh_frame:000000000001D979                 db  0Eh
.eh_frame:000000000001D97A                 db  18h
.eh_frame:000000000001D97B                 db  42h ; B
.eh_frame:000000000001D97C                 db  0Eh
.eh_frame:000000000001D97D                 db  10h
.eh_frame:000000000001D97E                 db  42h ; B
.eh_frame:000000000001D97F                 db  0Eh
.eh_frame:000000000001D980                 db    8
.eh_frame:000000000001D981                 db  44h ; D
.eh_frame:000000000001D982                 db  0Bh
.eh_frame:000000000001D983                 db    2
.eh_frame:000000000001D984                 db  78h ; x
.eh_frame:000000000001D985                 db  0Ah
.eh_frame:000000000001D986                 db  0Eh
.eh_frame:000000000001D987                 db  68h ; h
.eh_frame:000000000001D988                 db  48h ; H
.eh_frame:000000000001D989                 db  0Bh
.eh_frame:000000000001D98A                 db  5Ah ; Z
.eh_frame:000000000001D98B                 db  0Ah
.eh_frame:000000000001D98C                 db  0Eh
.eh_frame:000000000001D98D                 db  38h ; 8
.eh_frame:000000000001D98E                 db  47h ; G
.eh_frame:000000000001D98F                 db  0Eh
.eh_frame:000000000001D990                 db  30h ; 0
.eh_frame:000000000001D991                 db  41h ; A
.eh_frame:000000000001D992                 db  0Eh
.eh_frame:000000000001D993                 db  28h ; (
.eh_frame:000000000001D994                 db  42h ; B
.eh_frame:000000000001D995                 db  0Eh
.eh_frame:000000000001D996                 db  20h
.eh_frame:000000000001D997                 db  42h ; B
.eh_frame:000000000001D998                 db  0Eh
.eh_frame:000000000001D999                 db  18h
.eh_frame:000000000001D99A                 db  42h ; B
.eh_frame:000000000001D99B                 db  0Eh
.eh_frame:000000000001D99C                 db  10h
.eh_frame:000000000001D99D                 db  42h ; B
.eh_frame:000000000001D99E                 db  0Eh
.eh_frame:000000000001D99F                 db    8
.eh_frame:000000000001D9A0                 db  56h ; V
.eh_frame:000000000001D9A1                 db  0Bh
.eh_frame:000000000001D9A2                 db  5Eh ; ^
.eh_frame:000000000001D9A3                 db  0Ah
.eh_frame:000000000001D9A4                 db  0Eh
.eh_frame:000000000001D9A5                 db  38h ; 8
.eh_frame:000000000001D9A6                 db  52h ; R
.eh_frame:000000000001D9A7                 db  0Eh
.eh_frame:000000000001D9A8                 db  30h ; 0
.eh_frame:000000000001D9A9                 db  41h ; A
.eh_frame:000000000001D9AA                 db  0Eh
.eh_frame:000000000001D9AB                 db  28h ; (
.eh_frame:000000000001D9AC                 db  42h ; B
.eh_frame:000000000001D9AD                 db  0Eh
.eh_frame:000000000001D9AE                 db  20h
.eh_frame:000000000001D9AF                 db  42h ; B
.eh_frame:000000000001D9B0                 db  0Eh
.eh_frame:000000000001D9B1                 db  18h
.eh_frame:000000000001D9B2                 db  42h ; B
.eh_frame:000000000001D9B3                 db  0Eh
.eh_frame:000000000001D9B4                 db  10h
.eh_frame:000000000001D9B5                 db  42h ; B
.eh_frame:000000000001D9B6                 db  0Eh
.eh_frame:000000000001D9B7                 db    8
.eh_frame:000000000001D9B8                 db  4Fh ; O
.eh_frame:000000000001D9B9                 db  0Bh
.eh_frame:000000000001D9BA                 db  62h ; b
.eh_frame:000000000001D9BB                 db  0Ah
.eh_frame:000000000001D9BC                 db  0Eh
.eh_frame:000000000001D9BD                 db  38h ; 8
.eh_frame:000000000001D9BE                 db  50h ; P
.eh_frame:000000000001D9BF                 db  0Eh
.eh_frame:000000000001D9C0                 db  30h ; 0
.eh_frame:000000000001D9C1                 db  41h ; A
.eh_frame:000000000001D9C2                 db  0Eh
.eh_frame:000000000001D9C3                 db  28h ; (
.eh_frame:000000000001D9C4                 db  42h ; B
.eh_frame:000000000001D9C5                 db  0Eh
.eh_frame:000000000001D9C6                 db  20h
.eh_frame:000000000001D9C7                 db  42h ; B
.eh_frame:000000000001D9C8                 db  0Eh
.eh_frame:000000000001D9C9                 db  18h
.eh_frame:000000000001D9CA                 db  42h ; B
.eh_frame:000000000001D9CB                 db  0Eh
.eh_frame:000000000001D9CC                 db  10h
.eh_frame:000000000001D9CD                 db  42h ; B
.eh_frame:000000000001D9CE                 db  0Eh
.eh_frame:000000000001D9CF                 db    8
.eh_frame:000000000001D9D0                 db  55h ; U
.eh_frame:000000000001D9D1                 db  0Bh
.eh_frame:000000000001D9D2                 db  66h ; f
.eh_frame:000000000001D9D3                 db  0Eh
.eh_frame:000000000001D9D4                 db  68h ; h
.eh_frame:000000000001D9D5                 db  42h ; B
.eh_frame:000000000001D9D6                 db  0Eh
.eh_frame:000000000001D9D7                 db  70h ; p
.eh_frame:000000000001D9D8                 db  5Ch ; \
.eh_frame:000000000001D9D9                 db  0Eh
.eh_frame:000000000001D9DA                 db  68h ; h
.eh_frame:000000000001D9DB                 db  41h ; A
.eh_frame:000000000001D9DC                 db  0Eh
.eh_frame:000000000001D9DD                 db  60h ; `
.eh_frame:000000000001D9DE                 db  44h ; D
.eh_frame:000000000001D9DF                 db  0Ah
.eh_frame:000000000001D9E0                 db  0Eh
.eh_frame:000000000001D9E1                 db  38h ; 8
.eh_frame:000000000001D9E2                 db  41h ; A
.eh_frame:000000000001D9E3                 db  0Eh
.eh_frame:000000000001D9E4                 db  30h ; 0
.eh_frame:000000000001D9E5                 db  41h ; A
.eh_frame:000000000001D9E6                 db  0Eh
.eh_frame:000000000001D9E7                 db  28h ; (
.eh_frame:000000000001D9E8                 db  42h ; B
.eh_frame:000000000001D9E9                 db  0Eh
.eh_frame:000000000001D9EA                 db  20h
.eh_frame:000000000001D9EB                 db  42h ; B
.eh_frame:000000000001D9EC                 db  0Eh
.eh_frame:000000000001D9ED                 db  18h
.eh_frame:000000000001D9EE                 db  42h ; B
.eh_frame:000000000001D9EF                 db  0Eh
.eh_frame:000000000001D9F0                 db  10h
.eh_frame:000000000001D9F1                 db  42h ; B
.eh_frame:000000000001D9F2                 db  0Eh
.eh_frame:000000000001D9F3                 db    8
.eh_frame:000000000001D9F4                 db  45h ; E
.eh_frame:000000000001D9F5                 db  0Bh
.eh_frame:000000000001D9F6                 db  68h ; h
.eh_frame:000000000001D9F7                 db  0Ah
.eh_frame:000000000001D9F8                 db  0Eh
.eh_frame:000000000001D9F9                 db  68h ; h
.eh_frame:000000000001D9FA                 db  48h ; H
.eh_frame:000000000001D9FB                 db  0Bh
.eh_frame:000000000001D9FC                 db  72h ; r
.eh_frame:000000000001D9FD                 db  0Eh
.eh_frame:000000000001D9FE                 db  68h ; h
.eh_frame:000000000001D9FF                 db  45h ; E
.eh_frame:000000000001DA00                 db  0Eh
.eh_frame:000000000001DA01                 db  70h ; p
.eh_frame:000000000001DA02                 db  42h ; B
.eh_frame:000000000001DA03                 db  0Eh
.eh_frame:000000000001DA04                 db  78h ; x
.eh_frame:000000000001DA05                 db  42h ; B
.eh_frame:000000000001DA06                 db  0Eh
.eh_frame:000000000001DA07                 db  80h
.eh_frame:000000000001DA08                 db    1
.eh_frame:000000000001DA09                 db  5Eh ; ^
.eh_frame:000000000001DA0A                 db  0Eh
.eh_frame:000000000001DA0B                 db  60h ; `
.eh_frame:000000000001DA0C                 db  44h ; D
.eh_frame:000000000001DA0D                 db  0Ah
.eh_frame:000000000001DA0E                 db  0Eh
.eh_frame:000000000001DA0F                 db  38h ; 8
.eh_frame:000000000001DA10                 db  41h ; A
.eh_frame:000000000001DA11                 db  0Eh
.eh_frame:000000000001DA12                 db  30h ; 0
.eh_frame:000000000001DA13                 db  41h ; A
.eh_frame:000000000001DA14                 db  0Eh
.eh_frame:000000000001DA15                 db  28h ; (
.eh_frame:000000000001DA16                 db  42h ; B
.eh_frame:000000000001DA17                 db  0Eh
.eh_frame:000000000001DA18                 db  20h
.eh_frame:000000000001DA19                 db  42h ; B
.eh_frame:000000000001DA1A                 db  0Eh
.eh_frame:000000000001DA1B                 db  18h
.eh_frame:000000000001DA1C                 db  42h ; B
.eh_frame:000000000001DA1D                 db  0Eh
.eh_frame:000000000001DA1E                 db  10h
.eh_frame:000000000001DA1F                 db  42h ; B
.eh_frame:000000000001DA20                 db  0Eh
.eh_frame:000000000001DA21                 db    8
.eh_frame:000000000001DA22                 db  41h ; A
.eh_frame:000000000001DA23                 db  0Bh
.eh_frame:000000000001DA24                 db  79h ; y
.eh_frame:000000000001DA25                 db  0Ah
.eh_frame:000000000001DA26                 db  0Eh
.eh_frame:000000000001DA27                 db  68h ; h
.eh_frame:000000000001DA28                 db  42h ; B
.eh_frame:000000000001DA29                 db  0Eh
.eh_frame:000000000001DA2A                 db  70h ; p
.eh_frame:000000000001DA2B                 db  42h ; B
.eh_frame:000000000001DA2C                 db  0Eh
.eh_frame:000000000001DA2D                 db  78h ; x
.eh_frame:000000000001DA2E                 db  42h ; B
.eh_frame:000000000001DA2F                 db  0Eh
.eh_frame:000000000001DA30                 db  80h
.eh_frame:000000000001DA31                 db    1
.eh_frame:000000000001DA32                 db  51h ; Q
.eh_frame:000000000001DA33                 db  0Bh
.eh_frame:000000000001DA34                 db  10h
.eh_frame:000000000001DA35                 db    0
.eh_frame:000000000001DA36                 db    0
.eh_frame:000000000001DA37                 db    0
.eh_frame:000000000001DA38                 db 0B8h
.eh_frame:000000000001DA39                 db  23h ; #
.eh_frame:000000000001DA3A                 db    0
.eh_frame:000000000001DA3B                 db    0
.eh_frame:000000000001DA3C                 db  54h ; T
.eh_frame:000000000001DA3D                 db  69h ; i
.eh_frame:000000000001DA3E                 db 0FFh
.eh_frame:000000000001DA3F                 db 0FFh
.eh_frame:000000000001DA40                 db  20h
.eh_frame:000000000001DA41                 db    0
.eh_frame:000000000001DA42                 db    0
.eh_frame:000000000001DA43                 db    0
.eh_frame:000000000001DA44                 db    0
.eh_frame:000000000001DA45                 db    0
.eh_frame:000000000001DA46                 db    0
.eh_frame:000000000001DA47                 db    0
.eh_frame:000000000001DA48                 db  18h
.eh_frame:000000000001DA49                 db    0
.eh_frame:000000000001DA4A                 db    0
.eh_frame:000000000001DA4B                 db    0
.eh_frame:000000000001DA4C                 db 0CCh
.eh_frame:000000000001DA4D                 db  23h ; #
.eh_frame:000000000001DA4E                 db    0
.eh_frame:000000000001DA4F                 db    0
.eh_frame:000000000001DA50                 db  60h ; `
.eh_frame:000000000001DA51                 db  69h ; i
.eh_frame:000000000001DA52                 db 0FFh
.eh_frame:000000000001DA53                 db 0FFh
.eh_frame:000000000001DA54                 db  78h ; x
.eh_frame:000000000001DA55                 db    0
.eh_frame:000000000001DA56                 db    0
.eh_frame:000000000001DA57                 db    0
.eh_frame:000000000001DA58                 db    0
.eh_frame:000000000001DA59                 db  44h ; D
.eh_frame:000000000001DA5A                 db  0Eh
.eh_frame:000000000001DA5B                 db  70h ; p
.eh_frame:000000000001DA5C                 db    2
.eh_frame:000000000001DA5D                 db  60h ; `
.eh_frame:000000000001DA5E                 db  0Ah
.eh_frame:000000000001DA5F                 db  0Eh
.eh_frame:000000000001DA60                 db    8
.eh_frame:000000000001DA61                 db  41h ; A
.eh_frame:000000000001DA62                 db  0Bh
.eh_frame:000000000001DA63                 db    0
.eh_frame:000000000001DA64                 db  28h ; (
.eh_frame:000000000001DA65                 db    0
.eh_frame:000000000001DA66                 db    0
.eh_frame:000000000001DA67                 db    0
.eh_frame:000000000001DA68                 db 0E8h
.eh_frame:000000000001DA69                 db  23h ; #
.eh_frame:000000000001DA6A                 db    0
.eh_frame:000000000001DA6B                 db    0
.eh_frame:000000000001DA6C                 db 0C4h
.eh_frame:000000000001DA6D                 db  69h ; i
.eh_frame:000000000001DA6E                 db 0FFh
.eh_frame:000000000001DA6F                 db 0FFh
.eh_frame:000000000001DA70                 db 0D5h
.eh_frame:000000000001DA71                 db    0
.eh_frame:000000000001DA72                 db    0
.eh_frame:000000000001DA73                 db    0
.eh_frame:000000000001DA74                 db    0
.eh_frame:000000000001DA75                 db  41h ; A
.eh_frame:000000000001DA76                 db  0Eh
.eh_frame:000000000001DA77                 db  10h
.eh_frame:000000000001DA78                 db  86h
.eh_frame:000000000001DA79                 db    2
.eh_frame:000000000001DA7A                 db  41h ; A
.eh_frame:000000000001DA7B                 db  0Eh
.eh_frame:000000000001DA7C                 db  18h
.eh_frame:000000000001DA7D                 db  83h
.eh_frame:000000000001DA7E                 db    3
.eh_frame:000000000001DA7F                 db  50h ; P
.eh_frame:000000000001DA80                 db  0Eh
.eh_frame:000000000001DA81                 db 0D0h
.eh_frame:000000000001DA82                 db    1
.eh_frame:000000000001DA83                 db    2
.eh_frame:000000000001DA84                 db 0ABh
.eh_frame:000000000001DA85                 db  0Ah
.eh_frame:000000000001DA86                 db  0Eh
.eh_frame:000000000001DA87                 db  18h
.eh_frame:000000000001DA88                 db  41h ; A
.eh_frame:000000000001DA89                 db  0Eh
.eh_frame:000000000001DA8A                 db  10h
.eh_frame:000000000001DA8B                 db  41h ; A
.eh_frame:000000000001DA8C                 db  0Eh
.eh_frame:000000000001DA8D                 db    8
.eh_frame:000000000001DA8E                 db  41h ; A
.eh_frame:000000000001DA8F                 db  0Bh
.eh_frame:000000000001DA90                 db  1Ch
.eh_frame:000000000001DA91                 db    0
.eh_frame:000000000001DA92                 db    0
.eh_frame:000000000001DA93                 db    0
.eh_frame:000000000001DA94                 db  14h
.eh_frame:000000000001DA95                 db  24h ; $
.eh_frame:000000000001DA96                 db    0
.eh_frame:000000000001DA97                 db    0
.eh_frame:000000000001DA98                 db  78h ; x
.eh_frame:000000000001DA99                 db  6Ah ; j
.eh_frame:000000000001DA9A                 db 0FFh
.eh_frame:000000000001DA9B                 db 0FFh
.eh_frame:000000000001DA9C                 db  80h
.eh_frame:000000000001DA9D                 db    0
.eh_frame:000000000001DA9E                 db    0
.eh_frame:000000000001DA9F                 db    0
.eh_frame:000000000001DAA0                 db    0
.eh_frame:000000000001DAA1                 db  41h ; A
.eh_frame:000000000001DAA2                 db  0Eh
.eh_frame:000000000001DAA3                 db  10h
.eh_frame:000000000001DAA4                 db  83h
.eh_frame:000000000001DAA5                 db    2
.eh_frame:000000000001DAA6                 db    2
.eh_frame:000000000001DAA7                 db  7Ah ; z
.eh_frame:000000000001DAA8                 db  0Eh
.eh_frame:000000000001DAA9                 db    8
.eh_frame:000000000001DAAA                 db    0
.eh_frame:000000000001DAAB                 db    0
.eh_frame:000000000001DAAC                 db    0
.eh_frame:000000000001DAAD                 db    0
.eh_frame:000000000001DAAE                 db    0
.eh_frame:000000000001DAAF                 db    0
.eh_frame:000000000001DAB0                 db  18h
.eh_frame:000000000001DAB1                 db    0
.eh_frame:000000000001DAB2                 db    0
.eh_frame:000000000001DAB3                 db    0
.eh_frame:000000000001DAB4                 db  34h ; 4
.eh_frame:000000000001DAB5                 db  24h ; $
.eh_frame:000000000001DAB6                 db    0
.eh_frame:000000000001DAB7                 db    0
.eh_frame:000000000001DAB8                 db 0D8h
.eh_frame:000000000001DAB9                 db  6Ah ; j
.eh_frame:000000000001DABA                 db 0FFh
.eh_frame:000000000001DABB                 db 0FFh
.eh_frame:000000000001DABC                 db  1Ah
.eh_frame:000000000001DABD                 db    0
.eh_frame:000000000001DABE                 db    0
.eh_frame:000000000001DABF                 db    0
.eh_frame:000000000001DAC0                 db    0
.eh_frame:000000000001DAC1                 db  41h ; A
.eh_frame:000000000001DAC2                 db  0Eh
.eh_frame:000000000001DAC3                 db  10h
.eh_frame:000000000001DAC4                 db  83h
.eh_frame:000000000001DAC5                 db    2
.eh_frame:000000000001DAC6                 db  53h ; S
.eh_frame:000000000001DAC7                 db  0Ah
.eh_frame:000000000001DAC8                 db  0Eh
.eh_frame:000000000001DAC9                 db    8
.eh_frame:000000000001DACA                 db  41h ; A
.eh_frame:000000000001DACB                 db  0Bh
.eh_frame:000000000001DACC                 db  10h
.eh_frame:000000000001DACD                 db    0
.eh_frame:000000000001DACE                 db    0
.eh_frame:000000000001DACF                 db    0
.eh_frame:000000000001DAD0                 db  50h ; P
.eh_frame:000000000001DAD1                 db  24h ; $
.eh_frame:000000000001DAD2                 db    0
.eh_frame:000000000001DAD3                 db    0
.eh_frame:000000000001DAD4                 db 0DCh
.eh_frame:000000000001DAD5                 db  6Ah ; j
.eh_frame:000000000001DAD6                 db 0FFh
.eh_frame:000000000001DAD7                 db 0FFh
.eh_frame:000000000001DAD8                 db  24h ; $
.eh_frame:000000000001DAD9                 db    0
.eh_frame:000000000001DADA                 db    0
.eh_frame:000000000001DADB                 db    0
.eh_frame:000000000001DADC                 db    0
.eh_frame:000000000001DADD                 db  5Fh ; _
.eh_frame:000000000001DADE                 db  0Eh
.eh_frame:000000000001DADF                 db  10h
.eh_frame:000000000001DAE0                 db  10h
.eh_frame:000000000001DAE1                 db    0
.eh_frame:000000000001DAE2                 db    0
.eh_frame:000000000001DAE3                 db    0
.eh_frame:000000000001DAE4                 db  64h ; d
.eh_frame:000000000001DAE5                 db  24h ; $
.eh_frame:000000000001DAE6                 db    0
.eh_frame:000000000001DAE7                 db    0
.eh_frame:000000000001DAE8                 db 0F8h
.eh_frame:000000000001DAE9                 db  6Ah ; j
.eh_frame:000000000001DAEA                 db 0FFh
.eh_frame:000000000001DAEB                 db 0FFh
.eh_frame:000000000001DAEC                 db    2
.eh_frame:000000000001DAED                 db    0
.eh_frame:000000000001DAEE                 db    0
.eh_frame:000000000001DAEF                 db    0
.eh_frame:000000000001DAF0                 db    0
.eh_frame:000000000001DAF1                 db    0
.eh_frame:000000000001DAF2                 db    0
.eh_frame:000000000001DAF3                 db    0
.eh_frame:000000000001DAF4                 db  20h
.eh_frame:000000000001DAF5                 db    0
.eh_frame:000000000001DAF6                 db    0
.eh_frame:000000000001DAF7                 db    0
.eh_frame:000000000001DAF8                 db  78h ; x
.eh_frame:000000000001DAF9                 db  24h ; $
.eh_frame:000000000001DAFA                 db    0
.eh_frame:000000000001DAFB                 db    0
.eh_frame:000000000001DAFC                 db 0F4h
.eh_frame:000000000001DAFD                 db  6Ah ; j
.eh_frame:000000000001DAFE                 db 0FFh
.eh_frame:000000000001DAFF                 db 0FFh
.eh_frame:000000000001DB00                 db  36h ; 6
.eh_frame:000000000001DB01                 db    0
.eh_frame:000000000001DB02                 db    0
.eh_frame:000000000001DB03                 db    0
.eh_frame:000000000001DB04                 db    0
.eh_frame:000000000001DB05                 db  44h ; D
.eh_frame:000000000001DB06                 db  0Eh
.eh_frame:000000000001DB07                 db  10h
.eh_frame:000000000001DB08                 db  83h
.eh_frame:000000000001DB09                 db    2
.eh_frame:000000000001DB0A                 db  5Dh ; ]
.eh_frame:000000000001DB0B                 db  0Ah
.eh_frame:000000000001DB0C                 db  0Eh
.eh_frame:000000000001DB0D                 db    8
.eh_frame:000000000001DB0E                 db  47h ; G
.eh_frame:000000000001DB0F                 db  0Bh
.eh_frame:000000000001DB10                 db  48h ; H
.eh_frame:000000000001DB11                 db  0Ah
.eh_frame:000000000001DB12                 db  0Eh
.eh_frame:000000000001DB13                 db    8
.eh_frame:000000000001DB14                 db  41h ; A
.eh_frame:000000000001DB15                 db  0Bh
.eh_frame:000000000001DB16                 db    0
.eh_frame:000000000001DB17                 db    0
.eh_frame:000000000001DB18                 db  10h
.eh_frame:000000000001DB19                 db    0
.eh_frame:000000000001DB1A                 db    0
.eh_frame:000000000001DB1B                 db    0
.eh_frame:000000000001DB1C                 db  9Ch
.eh_frame:000000000001DB1D                 db  24h ; $
.eh_frame:000000000001DB1E                 db    0
.eh_frame:000000000001DB1F                 db    0
.eh_frame:000000000001DB20                 db  10h
.eh_frame:000000000001DB21                 db  6Bh ; k
.eh_frame:000000000001DB22                 db 0FFh
.eh_frame:000000000001DB23                 db 0FFh
.eh_frame:000000000001DB24                 db  24h ; $
.eh_frame:000000000001DB25                 db    0
.eh_frame:000000000001DB26                 db    0
.eh_frame:000000000001DB27                 db    0
.eh_frame:000000000001DB28                 db    0
.eh_frame:000000000001DB29                 db  5Fh ; _
.eh_frame:000000000001DB2A                 db  0Eh
.eh_frame:000000000001DB2B                 db  10h
.eh_frame:000000000001DB2C                 db  14h
.eh_frame:000000000001DB2D                 db    0
.eh_frame:000000000001DB2E                 db    0
.eh_frame:000000000001DB2F                 db    0
.eh_frame:000000000001DB30                 db 0B0h
.eh_frame:000000000001DB31                 db  24h ; $
.eh_frame:000000000001DB32                 db    0
.eh_frame:000000000001DB33                 db    0
.eh_frame:000000000001DB34                 db  2Ch ; ,
.eh_frame:000000000001DB35                 db  6Bh ; k
.eh_frame:000000000001DB36                 db 0FFh
.eh_frame:000000000001DB37                 db 0FFh
.eh_frame:000000000001DB38                 db  82h
.eh_frame:000000000001DB39                 db    0
.eh_frame:000000000001DB3A                 db    0
.eh_frame:000000000001DB3B                 db    0
.eh_frame:000000000001DB3C                 db    0
.eh_frame:000000000001DB3D                 db    2
.eh_frame:000000000001DB3E                 db  5Fh ; _
.eh_frame:000000000001DB3F                 db  0Eh
.eh_frame:000000000001DB40                 db  10h
.eh_frame:000000000001DB41                 db  49h ; I
.eh_frame:000000000001DB42                 db  0Eh
.eh_frame:000000000001DB43                 db    8
.eh_frame:000000000001DB44                 db  14h
.eh_frame:000000000001DB45                 db    0
.eh_frame:000000000001DB46                 db    0
.eh_frame:000000000001DB47                 db    0
.eh_frame:000000000001DB48                 db 0C8h
.eh_frame:000000000001DB49                 db  24h ; $
.eh_frame:000000000001DB4A                 db    0
.eh_frame:000000000001DB4B                 db    0
.eh_frame:000000000001DB4C                 db 0A4h
.eh_frame:000000000001DB4D                 db  6Bh ; k
.eh_frame:000000000001DB4E                 db 0FFh
.eh_frame:000000000001DB4F                 db 0FFh
.eh_frame:000000000001DB50                 db  4Ah ; J
.eh_frame:000000000001DB51                 db    0
.eh_frame:000000000001DB52                 db    0
.eh_frame:000000000001DB53                 db    0
.eh_frame:000000000001DB54                 db    0
.eh_frame:000000000001DB55                 db    2
.eh_frame:000000000001DB56                 db  45h ; E
.eh_frame:000000000001DB57                 db  0Eh
.eh_frame:000000000001DB58                 db  10h
.eh_frame:000000000001DB59                 db    0
.eh_frame:000000000001DB5A                 db    0
.eh_frame:000000000001DB5B                 db    0
.eh_frame:000000000001DB5C                 db  18h
.eh_frame:000000000001DB5D                 db    0
.eh_frame:000000000001DB5E                 db    0
.eh_frame:000000000001DB5F                 db    0
.eh_frame:000000000001DB60                 db 0E0h
.eh_frame:000000000001DB61                 db  24h ; $
.eh_frame:000000000001DB62                 db    0
.eh_frame:000000000001DB63                 db    0
.eh_frame:000000000001DB64                 db 0DCh
.eh_frame:000000000001DB65                 db  6Bh ; k
.eh_frame:000000000001DB66                 db 0FFh
.eh_frame:000000000001DB67                 db 0FFh
.eh_frame:000000000001DB68                 db  17h
.eh_frame:000000000001DB69                 db    0
.eh_frame:000000000001DB6A                 db    0
.eh_frame:000000000001DB6B                 db    0
.eh_frame:000000000001DB6C                 db    0
.eh_frame:000000000001DB6D                 db  41h ; A
.eh_frame:000000000001DB6E                 db  0Eh
.eh_frame:000000000001DB6F                 db  10h
.eh_frame:000000000001DB70                 db  83h
.eh_frame:000000000001DB71                 db    2
.eh_frame:000000000001DB72                 db  51h ; Q
.eh_frame:000000000001DB73                 db  0Eh
.eh_frame:000000000001DB74                 db    8
.eh_frame:000000000001DB75                 db    0
.eh_frame:000000000001DB76                 db    0
.eh_frame:000000000001DB77                 db    0
.eh_frame:000000000001DB78                 db  18h
.eh_frame:000000000001DB79                 db    0
.eh_frame:000000000001DB7A                 db    0
.eh_frame:000000000001DB7B                 db    0
.eh_frame:000000000001DB7C                 db 0FCh
.eh_frame:000000000001DB7D                 db  24h ; $
.eh_frame:000000000001DB7E                 db    0
.eh_frame:000000000001DB7F                 db    0
.eh_frame:000000000001DB80                 db 0E0h
.eh_frame:000000000001DB81                 db  6Bh ; k
.eh_frame:000000000001DB82                 db 0FFh
.eh_frame:000000000001DB83                 db 0FFh
.eh_frame:000000000001DB84                 db  2Eh ; .
.eh_frame:000000000001DB85                 db    0
.eh_frame:000000000001DB86                 db    0
.eh_frame:000000000001DB87                 db    0
.eh_frame:000000000001DB88                 db    0
.eh_frame:000000000001DB89                 db  47h ; G
.eh_frame:000000000001DB8A                 db  0Eh
.eh_frame:000000000001DB8B                 db  10h
.eh_frame:000000000001DB8C                 db  61h ; a
.eh_frame:000000000001DB8D                 db  0Ah
.eh_frame:000000000001DB8E                 db  0Eh
.eh_frame:000000000001DB8F                 db    8
.eh_frame:000000000001DB90                 db  41h ; A
.eh_frame:000000000001DB91                 db  0Bh
.eh_frame:000000000001DB92                 db    0
.eh_frame:000000000001DB93                 db    0
.eh_frame:000000000001DB94                 db  24h ; $
.eh_frame:000000000001DB95                 db    0
.eh_frame:000000000001DB96                 db    0
.eh_frame:000000000001DB97                 db    0
.eh_frame:000000000001DB98                 db  18h
.eh_frame:000000000001DB99                 db  25h ; %
.eh_frame:000000000001DB9A                 db    0
.eh_frame:000000000001DB9B                 db    0
.eh_frame:000000000001DB9C                 db 0F4h
.eh_frame:000000000001DB9D                 db  6Bh ; k
.eh_frame:000000000001DB9E                 db 0FFh
.eh_frame:000000000001DB9F                 db 0FFh
.eh_frame:000000000001DBA0                 db  28h ; (
.eh_frame:000000000001DBA1                 db    0
.eh_frame:000000000001DBA2                 db    0
.eh_frame:000000000001DBA3                 db    0
.eh_frame:000000000001DBA4                 db    0
.eh_frame:000000000001DBA5                 db  41h ; A
.eh_frame:000000000001DBA6                 db  0Eh
.eh_frame:000000000001DBA7                 db  10h
.eh_frame:000000000001DBA8                 db  86h
.eh_frame:000000000001DBA9                 db    2
.eh_frame:000000000001DBAA                 db  41h ; A
.eh_frame:000000000001DBAB                 db  0Eh
.eh_frame:000000000001DBAC                 db  18h
.eh_frame:000000000001DBAD                 db  83h
.eh_frame:000000000001DBAE                 db    3
.eh_frame:000000000001DBAF                 db  4Dh ; M
.eh_frame:000000000001DBB0                 db  0Eh
.eh_frame:000000000001DBB1                 db  20h
.eh_frame:000000000001DBB2                 db  49h ; I
.eh_frame:000000000001DBB3                 db  0Eh
.eh_frame:000000000001DBB4                 db  18h
.eh_frame:000000000001DBB5                 db  47h ; G
.eh_frame:000000000001DBB6                 db  0Eh
.eh_frame:000000000001DBB7                 db  10h
.eh_frame:000000000001DBB8                 db  41h ; A
.eh_frame:000000000001DBB9                 db  0Eh
.eh_frame:000000000001DBBA                 db    8
.eh_frame:000000000001DBBB                 db    0
.eh_frame:000000000001DBBC                 db  18h
.eh_frame:000000000001DBBD                 db    0
.eh_frame:000000000001DBBE                 db    0
.eh_frame:000000000001DBBF                 db    0
.eh_frame:000000000001DBC0                 db  40h ; @
.eh_frame:000000000001DBC1                 db  25h ; %
.eh_frame:000000000001DBC2                 db    0
.eh_frame:000000000001DBC3                 db    0
.eh_frame:000000000001DBC4                 db 0FCh
.eh_frame:000000000001DBC5                 db  6Bh ; k
.eh_frame:000000000001DBC6                 db 0FFh
.eh_frame:000000000001DBC7                 db 0FFh
.eh_frame:000000000001DBC8                 db  13h
.eh_frame:000000000001DBC9                 db    0
.eh_frame:000000000001DBCA                 db    0
.eh_frame:000000000001DBCB                 db    0
.eh_frame:000000000001DBCC                 db    0
.eh_frame:000000000001DBCD                 db  41h ; A
.eh_frame:000000000001DBCE                 db  0Eh
.eh_frame:000000000001DBCF                 db  10h
.eh_frame:000000000001DBD0                 db  83h
.eh_frame:000000000001DBD1                 db    2
.eh_frame:000000000001DBD2                 db  50h ; P
.eh_frame:000000000001DBD3                 db  0Eh
.eh_frame:000000000001DBD4                 db    8
.eh_frame:000000000001DBD5                 db    0
.eh_frame:000000000001DBD6                 db    0
.eh_frame:000000000001DBD7                 db    0
.eh_frame:000000000001DBD8                 db  14h
.eh_frame:000000000001DBD9                 db    0
.eh_frame:000000000001DBDA                 db    0
.eh_frame:000000000001DBDB                 db    0
.eh_frame:000000000001DBDC                 db  5Ch ; \
.eh_frame:000000000001DBDD                 db  25h ; %
.eh_frame:000000000001DBDE                 db    0
.eh_frame:000000000001DBDF                 db    0
.eh_frame:000000000001DBE0                 db    0
.eh_frame:000000000001DBE1                 db  6Ch ; l
.eh_frame:000000000001DBE2                 db 0FFh
.eh_frame:000000000001DBE3                 db 0FFh
.eh_frame:000000000001DBE4                 db  35h ; 5
.eh_frame:000000000001DBE5                 db    0
.eh_frame:000000000001DBE6                 db    0
.eh_frame:000000000001DBE7                 db    0
.eh_frame:000000000001DBE8                 db    0
.eh_frame:000000000001DBE9                 db  4Bh ; K
.eh_frame:000000000001DBEA                 db  0Eh
.eh_frame:000000000001DBEB                 db  10h
.eh_frame:000000000001DBEC                 db    0
.eh_frame:000000000001DBED                 db    0
.eh_frame:000000000001DBEE                 db    0
.eh_frame:000000000001DBEF                 db    0
.eh_frame:000000000001DBF0                 db  48h ; H
.eh_frame:000000000001DBF1                 db    0
.eh_frame:000000000001DBF2                 db    0
.eh_frame:000000000001DBF3                 db    0
.eh_frame:000000000001DBF4                 db  74h ; t
.eh_frame:000000000001DBF5                 db  25h ; %
.eh_frame:000000000001DBF6                 db    0
.eh_frame:000000000001DBF7                 db    0
.eh_frame:000000000001DBF8                 db  28h ; (
.eh_frame:000000000001DBF9                 db  6Ch ; l
.eh_frame:000000000001DBFA                 db 0FFh
.eh_frame:000000000001DBFB                 db 0FFh
.eh_frame:000000000001DBFC                 db    0
.eh_frame:000000000001DBFD                 db    1
.eh_frame:000000000001DBFE                 db    0
.eh_frame:000000000001DBFF                 db    0
.eh_frame:000000000001DC00                 db    0
.eh_frame:000000000001DC01                 db  42h ; B
.eh_frame:000000000001DC02                 db  0Eh
.eh_frame:000000000001DC03                 db  10h
.eh_frame:000000000001DC04                 db  8Fh
.eh_frame:000000000001DC05                 db    2
.eh_frame:000000000001DC06                 db  42h ; B
.eh_frame:000000000001DC07                 db  0Eh
.eh_frame:000000000001DC08                 db  18h
.eh_frame:000000000001DC09                 db  8Eh
.eh_frame:000000000001DC0A                 db    3
.eh_frame:000000000001DC0B                 db  45h ; E
.eh_frame:000000000001DC0C                 db  0Eh
.eh_frame:000000000001DC0D                 db  20h
.eh_frame:000000000001DC0E                 db  8Dh
.eh_frame:000000000001DC0F                 db    4
.eh_frame:000000000001DC10                 db  42h ; B
.eh_frame:000000000001DC11                 db  0Eh
.eh_frame:000000000001DC12                 db  28h ; (
.eh_frame:000000000001DC13                 db  8Ch
.eh_frame:000000000001DC14                 db    5
.eh_frame:000000000001DC15                 db  44h ; D
.eh_frame:000000000001DC16                 db  0Eh
.eh_frame:000000000001DC17                 db  30h ; 0
.eh_frame:000000000001DC18                 db  86h
.eh_frame:000000000001DC19                 db    6
.eh_frame:000000000001DC1A                 db  41h ; A
.eh_frame:000000000001DC1B                 db  0Eh
.eh_frame:000000000001DC1C                 db  38h ; 8
.eh_frame:000000000001DC1D                 db  83h
.eh_frame:000000000001DC1E                 db    7
.eh_frame:000000000001DC1F                 db  4Eh ; N
.eh_frame:000000000001DC20                 db  0Eh
.eh_frame:000000000001DC21                 db  50h ; P
.eh_frame:000000000001DC22                 db    2
.eh_frame:000000000001DC23                 db  9Dh
.eh_frame:000000000001DC24                 db  0Ah
.eh_frame:000000000001DC25                 db  0Eh
.eh_frame:000000000001DC26                 db  38h ; 8
.eh_frame:000000000001DC27                 db  41h ; A
.eh_frame:000000000001DC28                 db  0Eh
.eh_frame:000000000001DC29                 db  30h ; 0
.eh_frame:000000000001DC2A                 db  41h ; A
.eh_frame:000000000001DC2B                 db  0Eh
.eh_frame:000000000001DC2C                 db  28h ; (
.eh_frame:000000000001DC2D                 db  42h ; B
.eh_frame:000000000001DC2E                 db  0Eh
.eh_frame:000000000001DC2F                 db  20h
.eh_frame:000000000001DC30                 db  42h ; B
.eh_frame:000000000001DC31                 db  0Eh
.eh_frame:000000000001DC32                 db  18h
.eh_frame:000000000001DC33                 db  42h ; B
.eh_frame:000000000001DC34                 db  0Eh
.eh_frame:000000000001DC35                 db  10h
.eh_frame:000000000001DC36                 db  42h ; B
.eh_frame:000000000001DC37                 db  0Eh
.eh_frame:000000000001DC38                 db    8
.eh_frame:000000000001DC39                 db  4Bh ; K
.eh_frame:000000000001DC3A                 db  0Bh
.eh_frame:000000000001DC3B                 db    0
.eh_frame:000000000001DC3C                 db  18h
.eh_frame:000000000001DC3D                 db    0
.eh_frame:000000000001DC3E                 db    0
.eh_frame:000000000001DC3F                 db    0
.eh_frame:000000000001DC40                 db 0C0h
.eh_frame:000000000001DC41                 db  25h ; %
.eh_frame:000000000001DC42                 db    0
.eh_frame:000000000001DC43                 db    0
.eh_frame:000000000001DC44                 db 0DCh
.eh_frame:000000000001DC45                 db  6Ch ; l
.eh_frame:000000000001DC46                 db 0FFh
.eh_frame:000000000001DC47                 db 0FFh
.eh_frame:000000000001DC48                 db  21h ; !
.eh_frame:000000000001DC49                 db    0
.eh_frame:000000000001DC4A                 db    0
.eh_frame:000000000001DC4B                 db    0
.eh_frame:000000000001DC4C                 db    0
.eh_frame:000000000001DC4D                 db  44h ; D
.eh_frame:000000000001DC4E                 db  0Eh
.eh_frame:000000000001DC4F                 db  18h
.eh_frame:000000000001DC50                 db  42h ; B
.eh_frame:000000000001DC51                 db  0Eh
.eh_frame:000000000001DC52                 db  20h
.eh_frame:000000000001DC53                 db  5Ah ; Z
.eh_frame:000000000001DC54                 db  0Eh
.eh_frame:000000000001DC55                 db    8
.eh_frame:000000000001DC56                 db    0
.eh_frame:000000000001DC57                 db    0
.eh_frame:000000000001DC58                 db  1Ch
.eh_frame:000000000001DC59                 db    0
.eh_frame:000000000001DC5A                 db    0
.eh_frame:000000000001DC5B                 db    0
.eh_frame:000000000001DC5C                 db 0DCh
.eh_frame:000000000001DC5D                 db  25h ; %
.eh_frame:000000000001DC5E                 db    0
.eh_frame:000000000001DC5F                 db    0
.eh_frame:000000000001DC60                 db 0F0h
.eh_frame:000000000001DC61                 db  6Ch ; l
.eh_frame:000000000001DC62                 db 0FFh
.eh_frame:000000000001DC63                 db 0FFh
.eh_frame:000000000001DC64                 db  2Fh ; /
.eh_frame:000000000001DC65                 db    0
.eh_frame:000000000001DC66                 db    0
.eh_frame:000000000001DC67                 db    0
.eh_frame:000000000001DC68                 db    0
.eh_frame:000000000001DC69                 db  41h ; A
.eh_frame:000000000001DC6A                 db  0Eh
.eh_frame:000000000001DC6B                 db  10h
.eh_frame:000000000001DC6C                 db  83h
.eh_frame:000000000001DC6D                 db    2
.eh_frame:000000000001DC6E                 db  55h ; U
.eh_frame:000000000001DC6F                 db  0Ah
.eh_frame:000000000001DC70                 db  0Eh
.eh_frame:000000000001DC71                 db    8
.eh_frame:000000000001DC72                 db  4Ah ; J
.eh_frame:000000000001DC73                 db  0Bh
.eh_frame:000000000001DC74                 db    0
.eh_frame:000000000001DC75                 db    0
.eh_frame:000000000001DC76                 db    0
.eh_frame:000000000001DC77                 db    0
.eh_frame:000000000001DC78                 db  44h ; D
.eh_frame:000000000001DC79                 db    0
.eh_frame:000000000001DC7A                 db    0
.eh_frame:000000000001DC7B                 db    0
.eh_frame:000000000001DC7C                 db 0FCh
.eh_frame:000000000001DC7D                 db  25h ; %
.eh_frame:000000000001DC7E                 db    0
.eh_frame:000000000001DC7F                 db    0
.eh_frame:000000000001DC80                 db    0
.eh_frame:000000000001DC81                 db  6Dh ; m
.eh_frame:000000000001DC82                 db 0FFh
.eh_frame:000000000001DC83                 db 0FFh
.eh_frame:000000000001DC84                 db 0D1h
.eh_frame:000000000001DC85                 db    0
.eh_frame:000000000001DC86                 db    0
.eh_frame:000000000001DC87                 db    0
.eh_frame:000000000001DC88                 db    0
.eh_frame:000000000001DC89                 db  42h ; B
.eh_frame:000000000001DC8A                 db  0Eh
.eh_frame:000000000001DC8B                 db  10h
.eh_frame:000000000001DC8C                 db  8Eh
.eh_frame:000000000001DC8D                 db    2
.eh_frame:000000000001DC8E                 db  42h ; B
.eh_frame:000000000001DC8F                 db  0Eh
.eh_frame:000000000001DC90                 db  18h
.eh_frame:000000000001DC91                 db  8Dh
.eh_frame:000000000001DC92                 db    3
.eh_frame:000000000001DC93                 db  4Ch ; L
.eh_frame:000000000001DC94                 db  0Eh
.eh_frame:000000000001DC95                 db  20h
.eh_frame:000000000001DC96                 db  8Ch
.eh_frame:000000000001DC97                 db    4
.eh_frame:000000000001DC98                 db  41h ; A
.eh_frame:000000000001DC99                 db  0Eh
.eh_frame:000000000001DC9A                 db  28h ; (
.eh_frame:000000000001DC9B                 db  86h
.eh_frame:000000000001DC9C                 db    5
.eh_frame:000000000001DC9D                 db  41h ; A
.eh_frame:000000000001DC9E                 db  0Eh
.eh_frame:000000000001DC9F                 db  30h ; 0
.eh_frame:000000000001DCA0                 db  83h
.eh_frame:000000000001DCA1                 db    6
.eh_frame:000000000001DCA2                 db  46h ; F
.eh_frame:000000000001DCA3                 db  0Eh
.eh_frame:000000000001DCA4                 db  40h ; @
.eh_frame:000000000001DCA5                 db    2
.eh_frame:000000000001DCA6                 db  77h ; w
.eh_frame:000000000001DCA7                 db  0Ah
.eh_frame:000000000001DCA8                 db  0Eh
.eh_frame:000000000001DCA9                 db  30h ; 0
.eh_frame:000000000001DCAA                 db  41h ; A
.eh_frame:000000000001DCAB                 db  0Eh
.eh_frame:000000000001DCAC                 db  28h ; (
.eh_frame:000000000001DCAD                 db  41h ; A
.eh_frame:000000000001DCAE                 db  0Eh
.eh_frame:000000000001DCAF                 db  20h
.eh_frame:000000000001DCB0                 db  42h ; B
.eh_frame:000000000001DCB1                 db  0Eh
.eh_frame:000000000001DCB2                 db  18h
.eh_frame:000000000001DCB3                 db  42h ; B
.eh_frame:000000000001DCB4                 db  0Eh
.eh_frame:000000000001DCB5                 db  10h
.eh_frame:000000000001DCB6                 db  42h ; B
.eh_frame:000000000001DCB7                 db  0Eh
.eh_frame:000000000001DCB8                 db    8
.eh_frame:000000000001DCB9                 db  49h ; I
.eh_frame:000000000001DCBA                 db  0Bh
.eh_frame:000000000001DCBB                 db    0
.eh_frame:000000000001DCBC                 db    0
.eh_frame:000000000001DCBD                 db    0
.eh_frame:000000000001DCBE                 db    0
.eh_frame:000000000001DCBF                 db    0
.eh_frame:000000000001DCC0                 db  4Ch ; L
.eh_frame:000000000001DCC1                 db    0
.eh_frame:000000000001DCC2                 db    0
.eh_frame:000000000001DCC3                 db    0
.eh_frame:000000000001DCC4                 db  44h ; D
.eh_frame:000000000001DCC5                 db  26h ; &
.eh_frame:000000000001DCC6                 db    0
.eh_frame:000000000001DCC7                 db    0
.eh_frame:000000000001DCC8                 db  98h
.eh_frame:000000000001DCC9                 db  6Dh ; m
.eh_frame:000000000001DCCA                 db 0FFh
.eh_frame:000000000001DCCB                 db 0FFh
.eh_frame:000000000001DCCC                 db  1Ch
.eh_frame:000000000001DCCD                 db    4
.eh_frame:000000000001DCCE                 db    0
.eh_frame:000000000001DCCF                 db    0
.eh_frame:000000000001DCD0                 db    0
.eh_frame:000000000001DCD1                 db  42h ; B
.eh_frame:000000000001DCD2                 db  0Eh
.eh_frame:000000000001DCD3                 db  10h
.eh_frame:000000000001DCD4                 db  8Fh
.eh_frame:000000000001DCD5                 db    2
.eh_frame:000000000001DCD6                 db  42h ; B
.eh_frame:000000000001DCD7                 db  0Eh
.eh_frame:000000000001DCD8                 db  18h
.eh_frame:000000000001DCD9                 db  8Eh
.eh_frame:000000000001DCDA                 db    3
.eh_frame:000000000001DCDB                 db  42h ; B
.eh_frame:000000000001DCDC                 db  0Eh
.eh_frame:000000000001DCDD                 db  20h
.eh_frame:000000000001DCDE                 db  8Dh
.eh_frame:000000000001DCDF                 db    4
.eh_frame:000000000001DCE0                 db  42h ; B
.eh_frame:000000000001DCE1                 db  0Eh
.eh_frame:000000000001DCE2                 db  28h ; (
.eh_frame:000000000001DCE3                 db  8Ch
.eh_frame:000000000001DCE4                 db    5
.eh_frame:000000000001DCE5                 db  41h ; A
.eh_frame:000000000001DCE6                 db  0Eh
.eh_frame:000000000001DCE7                 db  30h ; 0
.eh_frame:000000000001DCE8                 db  86h
.eh_frame:000000000001DCE9                 db    6
.eh_frame:000000000001DCEA                 db  41h ; A
.eh_frame:000000000001DCEB                 db  0Eh
.eh_frame:000000000001DCEC                 db  38h ; 8
.eh_frame:000000000001DCED                 db  83h
.eh_frame:000000000001DCEE                 db    7
.eh_frame:000000000001DCEF                 db  44h ; D
.eh_frame:000000000001DCF0                 db  0Eh
.eh_frame:000000000001DCF1                 db  60h ; `
.eh_frame:000000000001DCF2                 db    2
.eh_frame:000000000001DCF3                 db 0E9h
.eh_frame:000000000001DCF4                 db  0Ah
.eh_frame:000000000001DCF5                 db  0Eh
.eh_frame:000000000001DCF6                 db  38h ; 8
.eh_frame:000000000001DCF7                 db  41h ; A
.eh_frame:000000000001DCF8                 db  0Eh
.eh_frame:000000000001DCF9                 db  30h ; 0
.eh_frame:000000000001DCFA                 db  41h ; A
.eh_frame:000000000001DCFB                 db  0Eh
.eh_frame:000000000001DCFC                 db  28h ; (
.eh_frame:000000000001DCFD                 db  42h ; B
.eh_frame:000000000001DCFE                 db  0Eh
.eh_frame:000000000001DCFF                 db  20h
.eh_frame:000000000001DD00                 db  42h ; B
.eh_frame:000000000001DD01                 db  0Eh
.eh_frame:000000000001DD02                 db  18h
.eh_frame:000000000001DD03                 db  42h ; B
.eh_frame:000000000001DD04                 db  0Eh
.eh_frame:000000000001DD05                 db  10h
.eh_frame:000000000001DD06                 db  42h ; B
.eh_frame:000000000001DD07                 db  0Eh
.eh_frame:000000000001DD08                 db    8
.eh_frame:000000000001DD09                 db  47h ; G
.eh_frame:000000000001DD0A                 db  0Bh
.eh_frame:000000000001DD0B                 db    0
.eh_frame:000000000001DD0C                 db    0
.eh_frame:000000000001DD0D                 db    0
.eh_frame:000000000001DD0E                 db    0
.eh_frame:000000000001DD0F                 db    0
.eh_frame:000000000001DD10                 db  24h ; $
.eh_frame:000000000001DD11                 db    0
.eh_frame:000000000001DD12                 db    0
.eh_frame:000000000001DD13                 db    0
.eh_frame:000000000001DD14                 db  94h
.eh_frame:000000000001DD15                 db  26h ; &
.eh_frame:000000000001DD16                 db    0
.eh_frame:000000000001DD17                 db    0
.eh_frame:000000000001DD18                 db  68h ; h
.eh_frame:000000000001DD19                 db  71h ; q
.eh_frame:000000000001DD1A                 db 0FFh
.eh_frame:000000000001DD1B                 db 0FFh
.eh_frame:000000000001DD1C                 db 0ACh
.eh_frame:000000000001DD1D                 db    0
.eh_frame:000000000001DD1E                 db    0
.eh_frame:000000000001DD1F                 db    0
.eh_frame:000000000001DD20                 db    0
.eh_frame:000000000001DD21                 db  42h ; B
.eh_frame:000000000001DD22                 db  0Eh
.eh_frame:000000000001DD23                 db  10h
.eh_frame:000000000001DD24                 db  8Dh
.eh_frame:000000000001DD25                 db    2
.eh_frame:000000000001DD26                 db  42h ; B
.eh_frame:000000000001DD27                 db  0Eh
.eh_frame:000000000001DD28                 db  18h
.eh_frame:000000000001DD29                 db  8Ch
.eh_frame:000000000001DD2A                 db    3
.eh_frame:000000000001DD2B                 db  44h ; D
.eh_frame:000000000001DD2C                 db  0Eh
.eh_frame:000000000001DD2D                 db  20h
.eh_frame:000000000001DD2E                 db  86h
.eh_frame:000000000001DD2F                 db    4
.eh_frame:000000000001DD30                 db  41h ; A
.eh_frame:000000000001DD31                 db  0Eh
.eh_frame:000000000001DD32                 db  28h ; (
.eh_frame:000000000001DD33                 db  83h
.eh_frame:000000000001DD34                 db    5
.eh_frame:000000000001DD35                 db  47h ; G
.eh_frame:000000000001DD36                 db  0Eh
.eh_frame:000000000001DD37                 db  40h ; @
.eh_frame:000000000001DD38                 db  4Ch ; L
.eh_frame:000000000001DD39                 db    0
.eh_frame:000000000001DD3A                 db    0
.eh_frame:000000000001DD3B                 db    0
.eh_frame:000000000001DD3C                 db 0BCh
.eh_frame:000000000001DD3D                 db  26h ; &
.eh_frame:000000000001DD3E                 db    0
.eh_frame:000000000001DD3F                 db    0
.eh_frame:000000000001DD40                 db 0F0h
.eh_frame:000000000001DD41                 db  71h ; q
.eh_frame:000000000001DD42                 db 0FFh
.eh_frame:000000000001DD43                 db 0FFh
.eh_frame:000000000001DD44                 db  1Ch
.eh_frame:000000000001DD45                 db    4
.eh_frame:000000000001DD46                 db    0
.eh_frame:000000000001DD47                 db    0
.eh_frame:000000000001DD48                 db    0
.eh_frame:000000000001DD49                 db  42h ; B
.eh_frame:000000000001DD4A                 db  0Eh
.eh_frame:000000000001DD4B                 db  10h
.eh_frame:000000000001DD4C                 db  8Fh
.eh_frame:000000000001DD4D                 db    2
.eh_frame:000000000001DD4E                 db  42h ; B
.eh_frame:000000000001DD4F                 db  0Eh
.eh_frame:000000000001DD50                 db  18h
.eh_frame:000000000001DD51                 db  8Eh
.eh_frame:000000000001DD52                 db    3
.eh_frame:000000000001DD53                 db  42h ; B
.eh_frame:000000000001DD54                 db  0Eh
.eh_frame:000000000001DD55                 db  20h
.eh_frame:000000000001DD56                 db  8Dh
.eh_frame:000000000001DD57                 db    4
.eh_frame:000000000001DD58                 db  42h ; B
.eh_frame:000000000001DD59                 db  0Eh
.eh_frame:000000000001DD5A                 db  28h ; (
.eh_frame:000000000001DD5B                 db  8Ch
.eh_frame:000000000001DD5C                 db    5
.eh_frame:000000000001DD5D                 db  41h ; A
.eh_frame:000000000001DD5E                 db  0Eh
.eh_frame:000000000001DD5F                 db  30h ; 0
.eh_frame:000000000001DD60                 db  86h
.eh_frame:000000000001DD61                 db    6
.eh_frame:000000000001DD62                 db  41h ; A
.eh_frame:000000000001DD63                 db  0Eh
.eh_frame:000000000001DD64                 db  38h ; 8
.eh_frame:000000000001DD65                 db  83h
.eh_frame:000000000001DD66                 db    7
.eh_frame:000000000001DD67                 db  44h ; D
.eh_frame:000000000001DD68                 db  0Eh
.eh_frame:000000000001DD69                 db  60h ; `
.eh_frame:000000000001DD6A                 db    2
.eh_frame:000000000001DD6B                 db 0E9h
.eh_frame:000000000001DD6C                 db  0Ah
.eh_frame:000000000001DD6D                 db  0Eh
.eh_frame:000000000001DD6E                 db  38h ; 8
.eh_frame:000000000001DD6F                 db  41h ; A
.eh_frame:000000000001DD70                 db  0Eh
.eh_frame:000000000001DD71                 db  30h ; 0
.eh_frame:000000000001DD72                 db  41h ; A
.eh_frame:000000000001DD73                 db  0Eh
.eh_frame:000000000001DD74                 db  28h ; (
.eh_frame:000000000001DD75                 db  42h ; B
.eh_frame:000000000001DD76                 db  0Eh
.eh_frame:000000000001DD77                 db  20h
.eh_frame:000000000001DD78                 db  42h ; B
.eh_frame:000000000001DD79                 db  0Eh
.eh_frame:000000000001DD7A                 db  18h
.eh_frame:000000000001DD7B                 db  42h ; B
.eh_frame:000000000001DD7C                 db  0Eh
.eh_frame:000000000001DD7D                 db  10h
.eh_frame:000000000001DD7E                 db  42h ; B
.eh_frame:000000000001DD7F                 db  0Eh
.eh_frame:000000000001DD80                 db    8
.eh_frame:000000000001DD81                 db  47h ; G
.eh_frame:000000000001DD82                 db  0Bh
.eh_frame:000000000001DD83                 db    0
.eh_frame:000000000001DD84                 db    0
.eh_frame:000000000001DD85                 db    0
.eh_frame:000000000001DD86                 db    0
.eh_frame:000000000001DD87                 db    0
.eh_frame:000000000001DD88                 db  3Ch ; <
.eh_frame:000000000001DD89                 db    0
.eh_frame:000000000001DD8A                 db    0
.eh_frame:000000000001DD8B                 db    0
.eh_frame:000000000001DD8C                 db  0Ch
.eh_frame:000000000001DD8D                 db  27h ; '
.eh_frame:000000000001DD8E                 db    0
.eh_frame:000000000001DD8F                 db    0
.eh_frame:000000000001DD90                 db 0C0h
.eh_frame:000000000001DD91                 db  75h ; u
.eh_frame:000000000001DD92                 db 0FFh
.eh_frame:000000000001DD93                 db 0FFh
.eh_frame:000000000001DD94                 db  83h
.eh_frame:000000000001DD95                 db    0
.eh_frame:000000000001DD96                 db    0
.eh_frame:000000000001DD97                 db    0
.eh_frame:000000000001DD98                 db    0
.eh_frame:000000000001DD99                 db  42h ; B
.eh_frame:000000000001DD9A                 db  0Eh
.eh_frame:000000000001DD9B                 db  10h
.eh_frame:000000000001DD9C                 db  8Dh
.eh_frame:000000000001DD9D                 db    2
.eh_frame:000000000001DD9E                 db  42h ; B
.eh_frame:000000000001DD9F                 db  0Eh
.eh_frame:000000000001DDA0                 db  18h
.eh_frame:000000000001DDA1                 db  8Ch
.eh_frame:000000000001DDA2                 db    3
.eh_frame:000000000001DDA3                 db  44h ; D
.eh_frame:000000000001DDA4                 db  0Eh
.eh_frame:000000000001DDA5                 db  20h
.eh_frame:000000000001DDA6                 db  86h
.eh_frame:000000000001DDA7                 db    4
.eh_frame:000000000001DDA8                 db  41h ; A
.eh_frame:000000000001DDA9                 db  0Eh
.eh_frame:000000000001DDAA                 db  28h ; (
.eh_frame:000000000001DDAB                 db  83h
.eh_frame:000000000001DDAC                 db    5
.eh_frame:000000000001DDAD                 db  4Ah ; J
.eh_frame:000000000001DDAE                 db  0Eh
.eh_frame:000000000001DDAF                 db  40h ; @
.eh_frame:000000000001DDB0                 db    2
.eh_frame:000000000001DDB1                 db  64h ; d
.eh_frame:000000000001DDB2                 db  0Ah
.eh_frame:000000000001DDB3                 db  0Eh
.eh_frame:000000000001DDB4                 db  28h ; (
.eh_frame:000000000001DDB5                 db  41h ; A
.eh_frame:000000000001DDB6                 db  0Eh
.eh_frame:000000000001DDB7                 db  20h
.eh_frame:000000000001DDB8                 db  41h ; A
.eh_frame:000000000001DDB9                 db  0Eh
.eh_frame:000000000001DDBA                 db  18h
.eh_frame:000000000001DDBB                 db  42h ; B
.eh_frame:000000000001DDBC                 db  0Eh
.eh_frame:000000000001DDBD                 db  10h
.eh_frame:000000000001DDBE                 db  42h ; B
.eh_frame:000000000001DDBF                 db  0Eh
.eh_frame:000000000001DDC0                 db    8
.eh_frame:000000000001DDC1                 db  41h ; A
.eh_frame:000000000001DDC2                 db  0Bh
.eh_frame:000000000001DDC3                 db    0
.eh_frame:000000000001DDC4                 db    0
.eh_frame:000000000001DDC5                 db    0
.eh_frame:000000000001DDC6                 db    0
.eh_frame:000000000001DDC7                 db    0
.eh_frame:000000000001DDC8                 db  10h
.eh_frame:000000000001DDC9                 db    0
.eh_frame:000000000001DDCA                 db    0
.eh_frame:000000000001DDCB                 db    0
.eh_frame:000000000001DDCC                 db  4Ch ; L
.eh_frame:000000000001DDCD                 db  27h ; '
.eh_frame:000000000001DDCE                 db    0
.eh_frame:000000000001DDCF                 db    0
.eh_frame:000000000001DDD0                 db  10h
.eh_frame:000000000001DDD1                 db  76h ; v
.eh_frame:000000000001DDD2                 db 0FFh
.eh_frame:000000000001DDD3                 db 0FFh
.eh_frame:000000000001DDD4                 db  3Fh ; ?
.eh_frame:000000000001DDD5                 db    0
.eh_frame:000000000001DDD6                 db    0
.eh_frame:000000000001DDD7                 db    0
.eh_frame:000000000001DDD8                 db    0
.eh_frame:000000000001DDD9                 db  4Bh ; K
.eh_frame:000000000001DDDA                 db  0Eh
.eh_frame:000000000001DDDB                 db  10h
.eh_frame:000000000001DDDC                 db  10h
.eh_frame:000000000001DDDD                 db    0
.eh_frame:000000000001DDDE                 db    0
.eh_frame:000000000001DDDF                 db    0
.eh_frame:000000000001DDE0                 db  60h ; `
.eh_frame:000000000001DDE1                 db  27h ; '
.eh_frame:000000000001DDE2                 db    0
.eh_frame:000000000001DDE3                 db    0
.eh_frame:000000000001DDE4                 db  3Ch ; <
.eh_frame:000000000001DDE5                 db  76h ; v
.eh_frame:000000000001DDE6                 db 0FFh
.eh_frame:000000000001DDE7                 db 0FFh
.eh_frame:000000000001DDE8                 db  16h
.eh_frame:000000000001DDE9                 db    0
.eh_frame:000000000001DDEA                 db    0
.eh_frame:000000000001DDEB                 db    0
.eh_frame:000000000001DDEC                 db    0
.eh_frame:000000000001DDED                 db    0
.eh_frame:000000000001DDEE                 db    0
.eh_frame:000000000001DDEF                 db    0
.eh_frame:000000000001DDF0                 db  10h
.eh_frame:000000000001DDF1                 db    0
.eh_frame:000000000001DDF2                 db    0
.eh_frame:000000000001DDF3                 db    0
.eh_frame:000000000001DDF4                 db  74h ; t
.eh_frame:000000000001DDF5                 db  27h ; '
.eh_frame:000000000001DDF6                 db    0
.eh_frame:000000000001DDF7                 db    0
.eh_frame:000000000001DDF8                 db  48h ; H
.eh_frame:000000000001DDF9                 db  76h ; v
.eh_frame:000000000001DDFA                 db 0FFh
.eh_frame:000000000001DDFB                 db 0FFh
.eh_frame:000000000001DDFC                 db  16h
.eh_frame:000000000001DDFD                 db    0
.eh_frame:000000000001DDFE                 db    0
.eh_frame:000000000001DDFF                 db    0
.eh_frame:000000000001DE00                 db    0
.eh_frame:000000000001DE01                 db    0
.eh_frame:000000000001DE02                 db    0
.eh_frame:000000000001DE03                 db    0
.eh_frame:000000000001DE04                 db  2Ch ; ,
.eh_frame:000000000001DE05                 db    0
.eh_frame:000000000001DE06                 db    0
.eh_frame:000000000001DE07                 db    0
.eh_frame:000000000001DE08                 db  88h
.eh_frame:000000000001DE09                 db  27h ; '
.eh_frame:000000000001DE0A                 db    0
.eh_frame:000000000001DE0B                 db    0
.eh_frame:000000000001DE0C                 db  54h ; T
.eh_frame:000000000001DE0D                 db  76h ; v
.eh_frame:000000000001DE0E                 db 0FFh
.eh_frame:000000000001DE0F                 db 0FFh
.eh_frame:000000000001DE10                 db  83h
.eh_frame:000000000001DE11                 db    0
.eh_frame:000000000001DE12                 db    0
.eh_frame:000000000001DE13                 db    0
.eh_frame:000000000001DE14                 db    0
.eh_frame:000000000001DE15                 db  45h ; E
.eh_frame:000000000001DE16                 db  0Eh
.eh_frame:000000000001DE17                 db  10h
.eh_frame:000000000001DE18                 db  8Ch
.eh_frame:000000000001DE19                 db    2
.eh_frame:000000000001DE1A                 db  41h ; A
.eh_frame:000000000001DE1B                 db  0Eh
.eh_frame:000000000001DE1C                 db  18h
.eh_frame:000000000001DE1D                 db  86h
.eh_frame:000000000001DE1E                 db    3
.eh_frame:000000000001DE1F                 db  41h ; A
.eh_frame:000000000001DE20                 db  0Eh
.eh_frame:000000000001DE21                 db  20h
.eh_frame:000000000001DE22                 db  83h
.eh_frame:000000000001DE23                 db    4
.eh_frame:000000000001DE24                 db    2
.eh_frame:000000000001DE25                 db  62h ; b
.eh_frame:000000000001DE26                 db  0Ah
.eh_frame:000000000001DE27                 db  0Eh
.eh_frame:000000000001DE28                 db  18h
.eh_frame:000000000001DE29                 db  41h ; A
.eh_frame:000000000001DE2A                 db  0Eh
.eh_frame:000000000001DE2B                 db  10h
.eh_frame:000000000001DE2C                 db  42h ; B
.eh_frame:000000000001DE2D                 db  0Eh
.eh_frame:000000000001DE2E                 db    8
.eh_frame:000000000001DE2F                 db  44h ; D
.eh_frame:000000000001DE30                 db  0Bh
.eh_frame:000000000001DE31                 db    0
.eh_frame:000000000001DE32                 db    0
.eh_frame:000000000001DE33                 db    0
.eh_frame:000000000001DE34                 db  10h
.eh_frame:000000000001DE35                 db    0
.eh_frame:000000000001DE36                 db    0
.eh_frame:000000000001DE37                 db    0
.eh_frame:000000000001DE38                 db 0B8h
.eh_frame:000000000001DE39                 db  27h ; '
.eh_frame:000000000001DE3A                 db    0
.eh_frame:000000000001DE3B                 db    0
.eh_frame:000000000001DE3C                 db 0B4h
.eh_frame:000000000001DE3D                 db  76h ; v
.eh_frame:000000000001DE3E                 db 0FFh
.eh_frame:000000000001DE3F                 db 0FFh
.eh_frame:000000000001DE40                 db  11h
.eh_frame:000000000001DE41                 db    0
.eh_frame:000000000001DE42                 db    0
.eh_frame:000000000001DE43                 db    0
.eh_frame:000000000001DE44                 db    0
.eh_frame:000000000001DE45                 db    0
.eh_frame:000000000001DE46                 db    0
.eh_frame:000000000001DE47                 db    0
.eh_frame:000000000001DE48                 db  10h
.eh_frame:000000000001DE49                 db    0
.eh_frame:000000000001DE4A                 db    0
.eh_frame:000000000001DE4B                 db    0
.eh_frame:000000000001DE4C                 db 0CCh
.eh_frame:000000000001DE4D                 db  27h ; '
.eh_frame:000000000001DE4E                 db    0
.eh_frame:000000000001DE4F                 db    0
.eh_frame:000000000001DE50                 db 0C0h
.eh_frame:000000000001DE51                 db  76h ; v
.eh_frame:000000000001DE52                 db 0FFh
.eh_frame:000000000001DE53                 db 0FFh
.eh_frame:000000000001DE54                 db  15h
.eh_frame:000000000001DE55                 db    0
.eh_frame:000000000001DE56                 db    0
.eh_frame:000000000001DE57                 db    0
.eh_frame:000000000001DE58                 db    0
.eh_frame:000000000001DE59                 db    0
.eh_frame:000000000001DE5A                 db    0
.eh_frame:000000000001DE5B                 db    0
.eh_frame:000000000001DE5C                 db  3Ch ; <
.eh_frame:000000000001DE5D                 db    0
.eh_frame:000000000001DE5E                 db    0
.eh_frame:000000000001DE5F                 db    0
.eh_frame:000000000001DE60                 db 0E0h
.eh_frame:000000000001DE61                 db  27h ; '
.eh_frame:000000000001DE62                 db    0
.eh_frame:000000000001DE63                 db    0
.eh_frame:000000000001DE64                 db 0CCh
.eh_frame:000000000001DE65                 db  76h ; v
.eh_frame:000000000001DE66                 db 0FFh
.eh_frame:000000000001DE67                 db 0FFh
.eh_frame:000000000001DE68                 db 0EBh
.eh_frame:000000000001DE69                 db    0
.eh_frame:000000000001DE6A                 db    0
.eh_frame:000000000001DE6B                 db    0
.eh_frame:000000000001DE6C                 db    0
.eh_frame:000000000001DE6D                 db  42h ; B
.eh_frame:000000000001DE6E                 db  0Eh
.eh_frame:000000000001DE6F                 db  10h
.eh_frame:000000000001DE70                 db  8Eh
.eh_frame:000000000001DE71                 db    2
.eh_frame:000000000001DE72                 db  42h ; B
.eh_frame:000000000001DE73                 db  0Eh
.eh_frame:000000000001DE74                 db  18h
.eh_frame:000000000001DE75                 db  8Dh
.eh_frame:000000000001DE76                 db    3
.eh_frame:000000000001DE77                 db  44h ; D
.eh_frame:000000000001DE78                 db  0Eh
.eh_frame:000000000001DE79                 db  20h
.eh_frame:000000000001DE7A                 db  8Ch
.eh_frame:000000000001DE7B                 db    4
.eh_frame:000000000001DE7C                 db  41h ; A
.eh_frame:000000000001DE7D                 db  0Eh
.eh_frame:000000000001DE7E                 db  28h ; (
.eh_frame:000000000001DE7F                 db  86h
.eh_frame:000000000001DE80                 db    5
.eh_frame:000000000001DE81                 db  41h ; A
.eh_frame:000000000001DE82                 db  0Eh
.eh_frame:000000000001DE83                 db  30h ; 0
.eh_frame:000000000001DE84                 db  83h
.eh_frame:000000000001DE85                 db    6
.eh_frame:000000000001DE86                 db    2
.eh_frame:000000000001DE87                 db 0BDh
.eh_frame:000000000001DE88                 db  0Ah
.eh_frame:000000000001DE89                 db  0Eh
.eh_frame:000000000001DE8A                 db  28h ; (
.eh_frame:000000000001DE8B                 db  41h ; A
.eh_frame:000000000001DE8C                 db  0Eh
.eh_frame:000000000001DE8D                 db  20h
.eh_frame:000000000001DE8E                 db  42h ; B
.eh_frame:000000000001DE8F                 db  0Eh
.eh_frame:000000000001DE90                 db  18h
.eh_frame:000000000001DE91                 db  42h ; B
.eh_frame:000000000001DE92                 db  0Eh
.eh_frame:000000000001DE93                 db  10h
.eh_frame:000000000001DE94                 db  42h ; B
.eh_frame:000000000001DE95                 db  0Eh
.eh_frame:000000000001DE96                 db    8
.eh_frame:000000000001DE97                 db  42h ; B
.eh_frame:000000000001DE98                 db  0Bh
.eh_frame:000000000001DE99                 db    0
.eh_frame:000000000001DE9A                 db    0
.eh_frame:000000000001DE9B                 db    0
.eh_frame:000000000001DE9C                 db  10h
.eh_frame:000000000001DE9D                 db    0
.eh_frame:000000000001DE9E                 db    0
.eh_frame:000000000001DE9F                 db    0
.eh_frame:000000000001DEA0                 db  20h
.eh_frame:000000000001DEA1                 db  28h ; (
.eh_frame:000000000001DEA2                 db    0
.eh_frame:000000000001DEA3                 db    0
.eh_frame:000000000001DEA4                 db  7Ch ; |
.eh_frame:000000000001DEA5                 db  77h ; w
.eh_frame:000000000001DEA6                 db 0FFh
.eh_frame:000000000001DEA7                 db 0FFh
.eh_frame:000000000001DEA8                 db  38h ; 8
.eh_frame:000000000001DEA9                 db    0
.eh_frame:000000000001DEAA                 db    0
.eh_frame:000000000001DEAB                 db    0
.eh_frame:000000000001DEAC                 db    0
.eh_frame:000000000001DEAD                 db    0
.eh_frame:000000000001DEAE                 db    0
.eh_frame:000000000001DEAF                 db    0
.eh_frame:000000000001DEB0                 db  34h ; 4
.eh_frame:000000000001DEB1                 db    0
.eh_frame:000000000001DEB2                 db    0
.eh_frame:000000000001DEB3                 db    0
.eh_frame:000000000001DEB4                 db  34h ; 4
.eh_frame:000000000001DEB5                 db  28h ; (
.eh_frame:000000000001DEB6                 db    0
.eh_frame:000000000001DEB7                 db    0
.eh_frame:000000000001DEB8                 db 0A8h
.eh_frame:000000000001DEB9                 db  77h ; w
.eh_frame:000000000001DEBA                 db 0FFh
.eh_frame:000000000001DEBB                 db 0FFh
.eh_frame:000000000001DEBC                 db  6Ah ; j
.eh_frame:000000000001DEBD                 db    0
.eh_frame:000000000001DEBE                 db    0
.eh_frame:000000000001DEBF                 db    0
.eh_frame:000000000001DEC0                 db    0
.eh_frame:000000000001DEC1                 db  42h ; B
.eh_frame:000000000001DEC2                 db  0Eh
.eh_frame:000000000001DEC3                 db  10h
.eh_frame:000000000001DEC4                 db  8Ch
.eh_frame:000000000001DEC5                 db    2
.eh_frame:000000000001DEC6                 db  41h ; A
.eh_frame:000000000001DEC7                 db  0Eh
.eh_frame:000000000001DEC8                 db  18h
.eh_frame:000000000001DEC9                 db  86h
.eh_frame:000000000001DECA                 db    3
.eh_frame:000000000001DECB                 db  44h ; D
.eh_frame:000000000001DECC                 db  0Eh
.eh_frame:000000000001DECD                 db  20h
.eh_frame:000000000001DECE                 db  83h
.eh_frame:000000000001DECF                 db    4
.eh_frame:000000000001DED0                 db  7Ch ; |
.eh_frame:000000000001DED1                 db  0Ah
.eh_frame:000000000001DED2                 db  0Eh
.eh_frame:000000000001DED3                 db  18h
.eh_frame:000000000001DED4                 db  41h ; A
.eh_frame:000000000001DED5                 db  0Eh
.eh_frame:000000000001DED6                 db  10h
.eh_frame:000000000001DED7                 db  42h ; B
.eh_frame:000000000001DED8                 db  0Eh
.eh_frame:000000000001DED9                 db    8
.eh_frame:000000000001DEDA                 db  4Ah ; J
.eh_frame:000000000001DEDB                 db  0Bh
.eh_frame:000000000001DEDC                 db  51h ; Q
.eh_frame:000000000001DEDD                 db  0Ah
.eh_frame:000000000001DEDE                 db  0Eh
.eh_frame:000000000001DEDF                 db  18h
.eh_frame:000000000001DEE0                 db  41h ; A
.eh_frame:000000000001DEE1                 db  0Eh
.eh_frame:000000000001DEE2                 db  10h
.eh_frame:000000000001DEE3                 db  42h ; B
.eh_frame:000000000001DEE4                 db  0Eh
.eh_frame:000000000001DEE5                 db    8
.eh_frame:000000000001DEE6                 db  41h ; A
.eh_frame:000000000001DEE7                 db  0Bh
.eh_frame:000000000001DEE8                 db  14h
.eh_frame:000000000001DEE9                 db    0
.eh_frame:000000000001DEEA                 db    0
.eh_frame:000000000001DEEB                 db    0
.eh_frame:000000000001DEEC                 db  6Ch ; l
.eh_frame:000000000001DEED                 db  28h ; (
.eh_frame:000000000001DEEE                 db    0
.eh_frame:000000000001DEEF                 db    0
.eh_frame:000000000001DEF0                 db 0E0h
.eh_frame:000000000001DEF1                 db  77h ; w
.eh_frame:000000000001DEF2                 db 0FFh
.eh_frame:000000000001DEF3                 db 0FFh
.eh_frame:000000000001DEF4                 db  2Ah ; *
.eh_frame:000000000001DEF5                 db    0
.eh_frame:000000000001DEF6                 db    0
.eh_frame:000000000001DEF7                 db    0
.eh_frame:000000000001DEF8                 db    0
.eh_frame:000000000001DEF9                 db    0
.eh_frame:000000000001DEFA                 db    0
.eh_frame:000000000001DEFB                 db    0
.eh_frame:000000000001DEFC                 db    0
.eh_frame:000000000001DEFD                 db    0
.eh_frame:000000000001DEFE                 db    0
.eh_frame:000000000001DEFF                 db    0
.eh_frame:000000000001DF00                 db  10h
.eh_frame:000000000001DF01                 db    0
.eh_frame:000000000001DF02                 db    0
.eh_frame:000000000001DF03                 db    0
.eh_frame:000000000001DF04                 db  84h
.eh_frame:000000000001DF05                 db  28h ; (
.eh_frame:000000000001DF06                 db    0
.eh_frame:000000000001DF07                 db    0
.eh_frame:000000000001DF08                 db 0F8h
.eh_frame:000000000001DF09                 db  77h ; w
.eh_frame:000000000001DF0A                 db 0FFh
.eh_frame:000000000001DF0B                 db 0FFh
.eh_frame:000000000001DF0C                 db  2Ch ; ,
.eh_frame:000000000001DF0D                 db    0
.eh_frame:000000000001DF0E                 db    0
.eh_frame:000000000001DF0F                 db    0
.eh_frame:000000000001DF10                 db    0
.eh_frame:000000000001DF11                 db    0
.eh_frame:000000000001DF12                 db    0
.eh_frame:000000000001DF13                 db    0
.eh_frame:000000000001DF14                 db  18h
.eh_frame:000000000001DF15                 db    0
.eh_frame:000000000001DF16                 db    0
.eh_frame:000000000001DF17                 db    0
.eh_frame:000000000001DF18                 db  98h
.eh_frame:000000000001DF19                 db  28h ; (
.eh_frame:000000000001DF1A                 db    0
.eh_frame:000000000001DF1B                 db    0
.eh_frame:000000000001DF1C                 db  14h
.eh_frame:000000000001DF1D                 db  78h ; x
.eh_frame:000000000001DF1E                 db 0FFh
.eh_frame:000000000001DF1F                 db 0FFh
.eh_frame:000000000001DF20                 db  2Ah ; *
.eh_frame:000000000001DF21                 db    0
.eh_frame:000000000001DF22                 db    0
.eh_frame:000000000001DF23                 db    0
.eh_frame:000000000001DF24                 db    0
.eh_frame:000000000001DF25                 db  46h ; F
.eh_frame:000000000001DF26                 db  0Eh
.eh_frame:000000000001DF27                 db  10h
.eh_frame:000000000001DF28                 db  83h
.eh_frame:000000000001DF29                 db    2
.eh_frame:000000000001DF2A                 db  5Bh ; [
.eh_frame:000000000001DF2B                 db  0Eh
.eh_frame:000000000001DF2C                 db    8
.eh_frame:000000000001DF2D                 db  47h ; G
.eh_frame:000000000001DF2E                 db 0C3h
.eh_frame:000000000001DF2F                 db    0
.eh_frame:000000000001DF30                 db  38h ; 8
.eh_frame:000000000001DF31                 db    0
.eh_frame:000000000001DF32                 db    0
.eh_frame:000000000001DF33                 db    0
.eh_frame:000000000001DF34                 db 0B4h
.eh_frame:000000000001DF35                 db  28h ; (
.eh_frame:000000000001DF36                 db    0
.eh_frame:000000000001DF37                 db    0
.eh_frame:000000000001DF38                 db  28h ; (
.eh_frame:000000000001DF39                 db  78h ; x
.eh_frame:000000000001DF3A                 db 0FFh
.eh_frame:000000000001DF3B                 db 0FFh
.eh_frame:000000000001DF3C                 db  5Dh ; ]
.eh_frame:000000000001DF3D                 db    0
.eh_frame:000000000001DF3E                 db    0
.eh_frame:000000000001DF3F                 db    0
.eh_frame:000000000001DF40                 db    0
.eh_frame:000000000001DF41                 db  42h ; B
.eh_frame:000000000001DF42                 db  0Eh
.eh_frame:000000000001DF43                 db  10h
.eh_frame:000000000001DF44                 db  8Dh
.eh_frame:000000000001DF45                 db    2
.eh_frame:000000000001DF46                 db  42h ; B
.eh_frame:000000000001DF47                 db  0Eh
.eh_frame:000000000001DF48                 db  18h
.eh_frame:000000000001DF49                 db  8Ch
.eh_frame:000000000001DF4A                 db    3
.eh_frame:000000000001DF4B                 db  41h ; A
.eh_frame:000000000001DF4C                 db  0Eh
.eh_frame:000000000001DF4D                 db  20h
.eh_frame:000000000001DF4E                 db  86h
.eh_frame:000000000001DF4F                 db    4
.eh_frame:000000000001DF50                 db  41h ; A
.eh_frame:000000000001DF51                 db  0Eh
.eh_frame:000000000001DF52                 db  28h ; (
.eh_frame:000000000001DF53                 db  83h
.eh_frame:000000000001DF54                 db    5
.eh_frame:000000000001DF55                 db  47h ; G
.eh_frame:000000000001DF56                 db  0Eh
.eh_frame:000000000001DF57                 db  30h ; 0
.eh_frame:000000000001DF58                 db  75h ; u
.eh_frame:000000000001DF59                 db  0Ah
.eh_frame:000000000001DF5A                 db  0Eh
.eh_frame:000000000001DF5B                 db  28h ; (
.eh_frame:000000000001DF5C                 db  44h ; D
.eh_frame:000000000001DF5D                 db  0Eh
.eh_frame:000000000001DF5E                 db  20h
.eh_frame:000000000001DF5F                 db  41h ; A
.eh_frame:000000000001DF60                 db  0Eh
.eh_frame:000000000001DF61                 db  18h
.eh_frame:000000000001DF62                 db  42h ; B
.eh_frame:000000000001DF63                 db  0Eh
.eh_frame:000000000001DF64                 db  10h
.eh_frame:000000000001DF65                 db  42h ; B
.eh_frame:000000000001DF66                 db  0Eh
.eh_frame:000000000001DF67                 db    8
.eh_frame:000000000001DF68                 db  45h ; E
.eh_frame:000000000001DF69                 db  0Bh
.eh_frame:000000000001DF6A                 db    0
.eh_frame:000000000001DF6B                 db    0
.eh_frame:000000000001DF6C                 db  34h ; 4
.eh_frame:000000000001DF6D                 db    0
.eh_frame:000000000001DF6E                 db    0
.eh_frame:000000000001DF6F                 db    0
.eh_frame:000000000001DF70                 db 0F0h
.eh_frame:000000000001DF71                 db  28h ; (
.eh_frame:000000000001DF72                 db    0
.eh_frame:000000000001DF73                 db    0
.eh_frame:000000000001DF74                 db  4Ch ; L
.eh_frame:000000000001DF75                 db  78h ; x
.eh_frame:000000000001DF76                 db 0FFh
.eh_frame:000000000001DF77                 db 0FFh
.eh_frame:000000000001DF78                 db  8Fh
.eh_frame:000000000001DF79                 db    0
.eh_frame:000000000001DF7A                 db    0
.eh_frame:000000000001DF7B                 db    0
.eh_frame:000000000001DF7C                 db    0
.eh_frame:000000000001DF7D                 db  45h ; E
.eh_frame:000000000001DF7E                 db  0Eh
.eh_frame:000000000001DF7F                 db  10h
.eh_frame:000000000001DF80                 db  8Ch
.eh_frame:000000000001DF81                 db    2
.eh_frame:000000000001DF82                 db  41h ; A
.eh_frame:000000000001DF83                 db  0Eh
.eh_frame:000000000001DF84                 db  18h
.eh_frame:000000000001DF85                 db  86h
.eh_frame:000000000001DF86                 db    3
.eh_frame:000000000001DF87                 db  41h ; A
.eh_frame:000000000001DF88                 db  0Eh
.eh_frame:000000000001DF89                 db  20h
.eh_frame:000000000001DF8A                 db  83h
.eh_frame:000000000001DF8B                 db    4
.eh_frame:000000000001DF8C                 db    2
.eh_frame:000000000001DF8D                 db  58h ; X
.eh_frame:000000000001DF8E                 db  0Ah
.eh_frame:000000000001DF8F                 db  0Eh
.eh_frame:000000000001DF90                 db  18h
.eh_frame:000000000001DF91                 db  41h ; A
.eh_frame:000000000001DF92                 db  0Eh
.eh_frame:000000000001DF93                 db  10h
.eh_frame:000000000001DF94                 db  42h ; B
.eh_frame:000000000001DF95                 db  0Eh
.eh_frame:000000000001DF96                 db    8
.eh_frame:000000000001DF97                 db  46h ; F
.eh_frame:000000000001DF98                 db  0Bh
.eh_frame:000000000001DF99                 db  63h ; c
.eh_frame:000000000001DF9A                 db  0Eh
.eh_frame:000000000001DF9B                 db  18h
.eh_frame:000000000001DF9C                 db  41h ; A
.eh_frame:000000000001DF9D                 db  0Eh
.eh_frame:000000000001DF9E                 db  10h
.eh_frame:000000000001DF9F                 db  42h ; B
.eh_frame:000000000001DFA0                 db  0Eh
.eh_frame:000000000001DFA1                 db    8
.eh_frame:000000000001DFA2                 db    0
.eh_frame:000000000001DFA3                 db    0
.eh_frame:000000000001DFA4                 db  48h ; H
.eh_frame:000000000001DFA5                 db    0
.eh_frame:000000000001DFA6                 db    0
.eh_frame:000000000001DFA7                 db    0
.eh_frame:000000000001DFA8                 db  28h ; (
.eh_frame:000000000001DFA9                 db  29h ; )
.eh_frame:000000000001DFAA                 db    0
.eh_frame:000000000001DFAB                 db    0
.eh_frame:000000000001DFAC                 db 0A4h
.eh_frame:000000000001DFAD                 db  78h ; x
.eh_frame:000000000001DFAE                 db 0FFh
.eh_frame:000000000001DFAF                 db 0FFh
.eh_frame:000000000001DFB0                 db  36h ; 6
.eh_frame:000000000001DFB1                 db    1
.eh_frame:000000000001DFB2                 db    0
.eh_frame:000000000001DFB3                 db    0
.eh_frame:000000000001DFB4                 db    0
.eh_frame:000000000001DFB5                 db  42h ; B
.eh_frame:000000000001DFB6                 db  0Eh
.eh_frame:000000000001DFB7                 db  10h
.eh_frame:000000000001DFB8                 db  8Fh
.eh_frame:000000000001DFB9                 db    2
.eh_frame:000000000001DFBA                 db  42h ; B
.eh_frame:000000000001DFBB                 db  0Eh
.eh_frame:000000000001DFBC                 db  18h
.eh_frame:000000000001DFBD                 db  8Eh
.eh_frame:000000000001DFBE                 db    3
.eh_frame:000000000001DFBF                 db  47h ; G
.eh_frame:000000000001DFC0                 db  0Eh
.eh_frame:000000000001DFC1                 db  20h
.eh_frame:000000000001DFC2                 db  8Dh
.eh_frame:000000000001DFC3                 db    4
.eh_frame:000000000001DFC4                 db  42h ; B
.eh_frame:000000000001DFC5                 db  0Eh
.eh_frame:000000000001DFC6                 db  28h ; (
.eh_frame:000000000001DFC7                 db  8Ch
.eh_frame:000000000001DFC8                 db    5
.eh_frame:000000000001DFC9                 db  41h ; A
.eh_frame:000000000001DFCA                 db  0Eh
.eh_frame:000000000001DFCB                 db  30h ; 0
.eh_frame:000000000001DFCC                 db  86h
.eh_frame:000000000001DFCD                 db    6
.eh_frame:000000000001DFCE                 db  41h ; A
.eh_frame:000000000001DFCF                 db  0Eh
.eh_frame:000000000001DFD0                 db  38h ; 8
.eh_frame:000000000001DFD1                 db  83h
.eh_frame:000000000001DFD2                 db    7
.eh_frame:000000000001DFD3                 db  44h ; D
.eh_frame:000000000001DFD4                 db  0Eh
.eh_frame:000000000001DFD5                 db  40h ; @
.eh_frame:000000000001DFD6                 db    2
.eh_frame:000000000001DFD7                 db 0A1h
.eh_frame:000000000001DFD8                 db  0Ah
.eh_frame:000000000001DFD9                 db  0Eh
.eh_frame:000000000001DFDA                 db  38h ; 8
.eh_frame:000000000001DFDB                 db  41h ; A
.eh_frame:000000000001DFDC                 db  0Eh
.eh_frame:000000000001DFDD                 db  30h ; 0
.eh_frame:000000000001DFDE                 db  41h ; A
.eh_frame:000000000001DFDF                 db  0Eh
.eh_frame:000000000001DFE0                 db  28h ; (
.eh_frame:000000000001DFE1                 db  42h ; B
.eh_frame:000000000001DFE2                 db  0Eh
.eh_frame:000000000001DFE3                 db  20h
.eh_frame:000000000001DFE4                 db  42h ; B
.eh_frame:000000000001DFE5                 db  0Eh
.eh_frame:000000000001DFE6                 db  18h
.eh_frame:000000000001DFE7                 db  42h ; B
.eh_frame:000000000001DFE8                 db  0Eh
.eh_frame:000000000001DFE9                 db  10h
.eh_frame:000000000001DFEA                 db  42h ; B
.eh_frame:000000000001DFEB                 db  0Eh
.eh_frame:000000000001DFEC                 db    8
.eh_frame:000000000001DFED                 db  42h ; B
.eh_frame:000000000001DFEE                 db  0Bh
.eh_frame:000000000001DFEF                 db    0
.eh_frame:000000000001DFF0                 db  50h ; P
.eh_frame:000000000001DFF1                 db    0
.eh_frame:000000000001DFF2                 db    0
.eh_frame:000000000001DFF3                 db    0
.eh_frame:000000000001DFF4                 db  74h ; t
.eh_frame:000000000001DFF5                 db  29h ; )
.eh_frame:000000000001DFF6                 db    0
.eh_frame:000000000001DFF7                 db    0
.eh_frame:000000000001DFF8                 db  98h
.eh_frame:000000000001DFF9                 db  79h ; y
.eh_frame:000000000001DFFA                 db 0FFh
.eh_frame:000000000001DFFB                 db 0FFh
.eh_frame:000000000001DFFC                 db 0DFh
.eh_frame:000000000001DFFD                 db    0
.eh_frame:000000000001DFFE                 db    0
.eh_frame:000000000001DFFF                 db    0
.eh_frame:000000000001E000                 db    0
.eh_frame:000000000001E001                 db  42h ; B
.eh_frame:000000000001E002                 db  0Eh
.eh_frame:000000000001E003                 db  10h
.eh_frame:000000000001E004                 db  8Ch
.eh_frame:000000000001E005                 db    2
.eh_frame:000000000001E006                 db  41h ; A
.eh_frame:000000000001E007                 db  0Eh
.eh_frame:000000000001E008                 db  18h
.eh_frame:000000000001E009                 db  86h
.eh_frame:000000000001E00A                 db    3
.eh_frame:000000000001E00B                 db  44h ; D
.eh_frame:000000000001E00C                 db  0Eh
.eh_frame:000000000001E00D                 db  20h
.eh_frame:000000000001E00E                 db  83h
.eh_frame:000000000001E00F                 db    4
.eh_frame:000000000001E010                 db  4Bh ; K
.eh_frame:000000000001E011                 db  0Eh
.eh_frame:000000000001E012                 db  30h ; 0
.eh_frame:000000000001E013                 db    2
.eh_frame:000000000001E014                 db  6Fh ; o
.eh_frame:000000000001E015                 db  0Ah
.eh_frame:000000000001E016                 db  0Eh
.eh_frame:000000000001E017                 db  20h
.eh_frame:000000000001E018                 db  44h ; D
.eh_frame:000000000001E019                 db  0Eh
.eh_frame:000000000001E01A                 db  18h
.eh_frame:000000000001E01B                 db  41h ; A
.eh_frame:000000000001E01C                 db  0Eh
.eh_frame:000000000001E01D                 db  10h
.eh_frame:000000000001E01E                 db  42h ; B
.eh_frame:000000000001E01F                 db  0Eh
.eh_frame:000000000001E020                 db    8
.eh_frame:000000000001E021                 db  48h ; H
.eh_frame:000000000001E022                 db  0Bh
.eh_frame:000000000001E023                 db  5Ah ; Z
.eh_frame:000000000001E024                 db  0Ah
.eh_frame:000000000001E025                 db  0Eh
.eh_frame:000000000001E026                 db  20h
.eh_frame:000000000001E027                 db  44h ; D
.eh_frame:000000000001E028                 db  0Eh
.eh_frame:000000000001E029                 db  18h
.eh_frame:000000000001E02A                 db  41h ; A
.eh_frame:000000000001E02B                 db  0Eh
.eh_frame:000000000001E02C                 db  10h
.eh_frame:000000000001E02D                 db  42h ; B
.eh_frame:000000000001E02E                 db  0Eh
.eh_frame:000000000001E02F                 db    8
.eh_frame:000000000001E030                 db  47h ; G
.eh_frame:000000000001E031                 db  0Bh
.eh_frame:000000000001E032                 db  54h ; T
.eh_frame:000000000001E033                 db  0Ah
.eh_frame:000000000001E034                 db  0Eh
.eh_frame:000000000001E035                 db  20h
.eh_frame:000000000001E036                 db  44h ; D
.eh_frame:000000000001E037                 db  0Eh
.eh_frame:000000000001E038                 db  18h
.eh_frame:000000000001E039                 db  41h ; A
.eh_frame:000000000001E03A                 db  0Eh
.eh_frame:000000000001E03B                 db  10h
.eh_frame:000000000001E03C                 db  42h ; B
.eh_frame:000000000001E03D                 db  0Eh
.eh_frame:000000000001E03E                 db    8
.eh_frame:000000000001E03F                 db  45h ; E
.eh_frame:000000000001E040                 db  0Bh
.eh_frame:000000000001E041                 db    0
.eh_frame:000000000001E042                 db    0
.eh_frame:000000000001E043                 db    0
.eh_frame:000000000001E044                 db  10h
.eh_frame:000000000001E045                 db    0
.eh_frame:000000000001E046                 db    0
.eh_frame:000000000001E047                 db    0
.eh_frame:000000000001E048                 db 0C8h
.eh_frame:000000000001E049                 db  29h ; )
.eh_frame:000000000001E04A                 db    0
.eh_frame:000000000001E04B                 db    0
.eh_frame:000000000001E04C                 db  24h ; $
.eh_frame:000000000001E04D                 db  7Ah ; z
.eh_frame:000000000001E04E                 db 0FFh
.eh_frame:000000000001E04F                 db 0FFh
.eh_frame:000000000001E050                 db  0Ch
.eh_frame:000000000001E051                 db    0
.eh_frame:000000000001E052                 db    0
.eh_frame:000000000001E053                 db    0
.eh_frame:000000000001E054                 db    0
.eh_frame:000000000001E055                 db    0
.eh_frame:000000000001E056                 db    0
.eh_frame:000000000001E057                 db    0
.eh_frame:000000000001E058                 db  5Ch ; \
.eh_frame:000000000001E059                 db    0
.eh_frame:000000000001E05A                 db    0
.eh_frame:000000000001E05B                 db    0
.eh_frame:000000000001E05C                 db 0DCh
.eh_frame:000000000001E05D                 db  29h ; )
.eh_frame:000000000001E05E                 db    0
.eh_frame:000000000001E05F                 db    0
.eh_frame:000000000001E060                 db  20h
.eh_frame:000000000001E061                 db  7Ah ; z
.eh_frame:000000000001E062                 db 0FFh
.eh_frame:000000000001E063                 db 0FFh
.eh_frame:000000000001E064                 db 0A3h
.eh_frame:000000000001E065                 db    0
.eh_frame:000000000001E066                 db    0
.eh_frame:000000000001E067                 db    0
.eh_frame:000000000001E068                 db    0
.eh_frame:000000000001E069                 db  42h ; B
.eh_frame:000000000001E06A                 db  0Eh
.eh_frame:000000000001E06B                 db  10h
.eh_frame:000000000001E06C                 db  8Dh
.eh_frame:000000000001E06D                 db    2
.eh_frame:000000000001E06E                 db  42h ; B
.eh_frame:000000000001E06F                 db  0Eh
.eh_frame:000000000001E070                 db  18h
.eh_frame:000000000001E071                 db  8Ch
.eh_frame:000000000001E072                 db    3
.eh_frame:000000000001E073                 db  41h ; A
.eh_frame:000000000001E074                 db  0Eh
.eh_frame:000000000001E075                 db  20h
.eh_frame:000000000001E076                 db  86h
.eh_frame:000000000001E077                 db    4
.eh_frame:000000000001E078                 db  41h ; A
.eh_frame:000000000001E079                 db  0Eh
.eh_frame:000000000001E07A                 db  28h ; (
.eh_frame:000000000001E07B                 db  83h
.eh_frame:000000000001E07C                 db    5
.eh_frame:000000000001E07D                 db  47h ; G
.eh_frame:000000000001E07E                 db  0Eh
.eh_frame:000000000001E07F                 db  30h ; 0
.eh_frame:000000000001E080                 db    2
.eh_frame:000000000001E081                 db  41h ; A
.eh_frame:000000000001E082                 db  0Ah
.eh_frame:000000000001E083                 db  0Eh
.eh_frame:000000000001E084                 db  28h ; (
.eh_frame:000000000001E085                 db  44h ; D
.eh_frame:000000000001E086                 db  0Eh
.eh_frame:000000000001E087                 db  20h
.eh_frame:000000000001E088                 db  41h ; A
.eh_frame:000000000001E089                 db  0Eh
.eh_frame:000000000001E08A                 db  18h
.eh_frame:000000000001E08B                 db  42h ; B
.eh_frame:000000000001E08C                 db  0Eh
.eh_frame:000000000001E08D                 db  10h
.eh_frame:000000000001E08E                 db  42h ; B
.eh_frame:000000000001E08F                 db  0Eh
.eh_frame:000000000001E090                 db    8
.eh_frame:000000000001E091                 db  49h ; I
.eh_frame:000000000001E092                 db  0Bh
.eh_frame:000000000001E093                 db  52h ; R
.eh_frame:000000000001E094                 db  0Ah
.eh_frame:000000000001E095                 db  0Eh
.eh_frame:000000000001E096                 db  28h ; (
.eh_frame:000000000001E097                 db  43h ; C
.eh_frame:000000000001E098                 db  0Eh
.eh_frame:000000000001E099                 db  20h
.eh_frame:000000000001E09A                 db  41h ; A
.eh_frame:000000000001E09B                 db  0Eh
.eh_frame:000000000001E09C                 db  18h
.eh_frame:000000000001E09D                 db  42h ; B
.eh_frame:000000000001E09E                 db  0Eh
.eh_frame:000000000001E09F                 db  10h
.eh_frame:000000000001E0A0                 db  42h ; B
.eh_frame:000000000001E0A1                 db  0Eh
.eh_frame:000000000001E0A2                 db    8
.eh_frame:000000000001E0A3                 db  46h ; F
.eh_frame:000000000001E0A4                 db  0Bh
.eh_frame:000000000001E0A5                 db  44h ; D
.eh_frame:000000000001E0A6                 db  0Ah
.eh_frame:000000000001E0A7                 db  0Eh
.eh_frame:000000000001E0A8                 db  28h ; (
.eh_frame:000000000001E0A9                 db  47h ; G
.eh_frame:000000000001E0AA                 db  0Eh
.eh_frame:000000000001E0AB                 db  20h
.eh_frame:000000000001E0AC                 db  41h ; A
.eh_frame:000000000001E0AD                 db  0Eh
.eh_frame:000000000001E0AE                 db  18h
.eh_frame:000000000001E0AF                 db  42h ; B
.eh_frame:000000000001E0B0                 db  0Eh
.eh_frame:000000000001E0B1                 db  10h
.eh_frame:000000000001E0B2                 db  42h ; B
.eh_frame:000000000001E0B3                 db  0Eh
.eh_frame:000000000001E0B4                 db    8
.eh_frame:000000000001E0B5                 db  45h ; E
.eh_frame:000000000001E0B6                 db  0Bh
.eh_frame:000000000001E0B7                 db    0
.eh_frame:000000000001E0B8                 db  34h ; 4
.eh_frame:000000000001E0B9                 db    0
.eh_frame:000000000001E0BA                 db    0
.eh_frame:000000000001E0BB                 db    0
.eh_frame:000000000001E0BC                 db  3Ch ; <
.eh_frame:000000000001E0BD                 db  2Ah ; *
.eh_frame:000000000001E0BE                 db    0
.eh_frame:000000000001E0BF                 db    0
.eh_frame:000000000001E0C0                 db  70h ; p
.eh_frame:000000000001E0C1                 db  7Ah ; z
.eh_frame:000000000001E0C2                 db 0FFh
.eh_frame:000000000001E0C3                 db 0FFh
.eh_frame:000000000001E0C4                 db  41h ; A
.eh_frame:000000000001E0C5                 db    1
.eh_frame:000000000001E0C6                 db    0
.eh_frame:000000000001E0C7                 db    0
.eh_frame:000000000001E0C8                 db    0
.eh_frame:000000000001E0C9                 db  42h ; B
.eh_frame:000000000001E0CA                 db  0Eh
.eh_frame:000000000001E0CB                 db  10h
.eh_frame:000000000001E0CC                 db  8Ch
.eh_frame:000000000001E0CD                 db    2
.eh_frame:000000000001E0CE                 db  41h ; A
.eh_frame:000000000001E0CF                 db  0Eh
.eh_frame:000000000001E0D0                 db  18h
.eh_frame:000000000001E0D1                 db  86h
.eh_frame:000000000001E0D2                 db    3
.eh_frame:000000000001E0D3                 db  41h ; A
.eh_frame:000000000001E0D4                 db  0Eh
.eh_frame:000000000001E0D5                 db  20h
.eh_frame:000000000001E0D6                 db  83h
.eh_frame:000000000001E0D7                 db    4
.eh_frame:000000000001E0D8                 db  47h ; G
.eh_frame:000000000001E0D9                 db  0Eh
.eh_frame:000000000001E0DA                 db  70h ; p
.eh_frame:000000000001E0DB                 db    2
.eh_frame:000000000001E0DC                 db  8Bh
.eh_frame:000000000001E0DD                 db  0Ah
.eh_frame:000000000001E0DE                 db  0Eh
.eh_frame:000000000001E0DF                 db  20h
.eh_frame:000000000001E0E0                 db  41h ; A
.eh_frame:000000000001E0E1                 db  0Eh
.eh_frame:000000000001E0E2                 db  18h
.eh_frame:000000000001E0E3                 db  41h ; A
.eh_frame:000000000001E0E4                 db  0Eh
.eh_frame:000000000001E0E5                 db  10h
.eh_frame:000000000001E0E6                 db  42h ; B
.eh_frame:000000000001E0E7                 db  0Eh
.eh_frame:000000000001E0E8                 db    8
.eh_frame:000000000001E0E9                 db  46h ; F
.eh_frame:000000000001E0EA                 db  0Bh
.eh_frame:000000000001E0EB                 db    0
.eh_frame:000000000001E0EC                 db    0
.eh_frame:000000000001E0ED                 db    0
.eh_frame:000000000001E0EE                 db    0
.eh_frame:000000000001E0EF                 db    0
.eh_frame:000000000001E0F0                 db  4Ch ; L
.eh_frame:000000000001E0F1                 db    0
.eh_frame:000000000001E0F2                 db    0
.eh_frame:000000000001E0F3                 db    0
.eh_frame:000000000001E0F4                 db  74h ; t
.eh_frame:000000000001E0F5                 db  2Ah ; *
.eh_frame:000000000001E0F6                 db    0
.eh_frame:000000000001E0F7                 db    0
.eh_frame:000000000001E0F8                 db  88h
.eh_frame:000000000001E0F9                 db  7Bh ; {
.eh_frame:000000000001E0FA                 db 0FFh
.eh_frame:000000000001E0FB                 db 0FFh
.eh_frame:000000000001E0FC                 db  7Dh ; }
.eh_frame:000000000001E0FD                 db    0
.eh_frame:000000000001E0FE                 db    0
.eh_frame:000000000001E0FF                 db    0
.eh_frame:000000000001E100                 db    0
.eh_frame:000000000001E101                 db  42h ; B
.eh_frame:000000000001E102                 db  0Eh
.eh_frame:000000000001E103                 db  10h
.eh_frame:000000000001E104                 db  8Ch
.eh_frame:000000000001E105                 db    2
.eh_frame:000000000001E106                 db  41h ; A
.eh_frame:000000000001E107                 db  0Eh
.eh_frame:000000000001E108                 db  18h
.eh_frame:000000000001E109                 db  86h
.eh_frame:000000000001E10A                 db    3
.eh_frame:000000000001E10B                 db  44h ; D
.eh_frame:000000000001E10C                 db  0Eh
.eh_frame:000000000001E10D                 db  20h
.eh_frame:000000000001E10E                 db  83h
.eh_frame:000000000001E10F                 db    4
.eh_frame:000000000001E110                 db  69h ; i
.eh_frame:000000000001E111                 db  0Ah
.eh_frame:000000000001E112                 db  0Eh
.eh_frame:000000000001E113                 db  18h
.eh_frame:000000000001E114                 db  41h ; A
.eh_frame:000000000001E115                 db  0Eh
.eh_frame:000000000001E116                 db  10h
.eh_frame:000000000001E117                 db  42h ; B
.eh_frame:000000000001E118                 db  0Eh
.eh_frame:000000000001E119                 db    8
.eh_frame:000000000001E11A                 db  45h ; E
.eh_frame:000000000001E11B                 db  0Bh
.eh_frame:000000000001E11C                 db  55h ; U
.eh_frame:000000000001E11D                 db  0Ah
.eh_frame:000000000001E11E                 db  0Eh
.eh_frame:000000000001E11F                 db  18h
.eh_frame:000000000001E120                 db  41h ; A
.eh_frame:000000000001E121                 db  0Eh
.eh_frame:000000000001E122                 db  10h
.eh_frame:000000000001E123                 db  42h ; B
.eh_frame:000000000001E124                 db  0Eh
.eh_frame:000000000001E125                 db    8
.eh_frame:000000000001E126                 db  48h ; H
.eh_frame:000000000001E127                 db  0Bh
.eh_frame:000000000001E128                 db  41h ; A
.eh_frame:000000000001E129                 db  0Ah
.eh_frame:000000000001E12A                 db  0Eh
.eh_frame:000000000001E12B                 db  18h
.eh_frame:000000000001E12C                 db  46h ; F
.eh_frame:000000000001E12D                 db  0Eh
.eh_frame:000000000001E12E                 db  10h
.eh_frame:000000000001E12F                 db  42h ; B
.eh_frame:000000000001E130                 db  0Eh
.eh_frame:000000000001E131                 db    8
.eh_frame:000000000001E132                 db  47h ; G
.eh_frame:000000000001E133                 db  0Bh
.eh_frame:000000000001E134                 db  49h ; I
.eh_frame:000000000001E135                 db  0Eh
.eh_frame:000000000001E136                 db  18h
.eh_frame:000000000001E137                 db  41h ; A
.eh_frame:000000000001E138                 db  0Eh
.eh_frame:000000000001E139                 db  10h
.eh_frame:000000000001E13A                 db  42h ; B
.eh_frame:000000000001E13B                 db  0Eh
.eh_frame:000000000001E13C                 db    8
.eh_frame:000000000001E13D                 db    0
.eh_frame:000000000001E13E                 db    0
.eh_frame:000000000001E13F                 db    0
.eh_frame:000000000001E140                 db  1Ch
.eh_frame:000000000001E141                 db    0
.eh_frame:000000000001E142                 db    0
.eh_frame:000000000001E143                 db    0
.eh_frame:000000000001E144                 db 0C4h
.eh_frame:000000000001E145                 db  2Ah ; *
.eh_frame:000000000001E146                 db    0
.eh_frame:000000000001E147                 db    0
.eh_frame:000000000001E148                 db 0B8h
.eh_frame:000000000001E149                 db  7Bh ; {
.eh_frame:000000000001E14A                 db 0FFh
.eh_frame:000000000001E14B                 db 0FFh
.eh_frame:000000000001E14C                 db  18h
.eh_frame:000000000001E14D                 db    0
.eh_frame:000000000001E14E                 db    0
.eh_frame:000000000001E14F                 db    0
.eh_frame:000000000001E150                 db    0
.eh_frame:000000000001E151                 db  44h ; D
.eh_frame:000000000001E152                 db  0Eh
.eh_frame:000000000001E153                 db  10h
.eh_frame:000000000001E154                 db  4Eh ; N
.eh_frame:000000000001E155                 db  0Ah
.eh_frame:000000000001E156                 db  0Eh
.eh_frame:000000000001E157                 db    8
.eh_frame:000000000001E158                 db  41h ; A
.eh_frame:000000000001E159                 db  0Bh
.eh_frame:000000000001E15A                 db    0
.eh_frame:000000000001E15B                 db    0
.eh_frame:000000000001E15C                 db    0
.eh_frame:000000000001E15D                 db    0
.eh_frame:000000000001E15E                 db    0
.eh_frame:000000000001E15F                 db    0
.eh_frame:000000000001E160                 db  14h
.eh_frame:000000000001E161                 db    0
.eh_frame:000000000001E162                 db    0
.eh_frame:000000000001E163                 db    0
.eh_frame:000000000001E164                 db 0E4h
.eh_frame:000000000001E165                 db  2Ah ; *
.eh_frame:000000000001E166                 db    0
.eh_frame:000000000001E167                 db    0
.eh_frame:000000000001E168                 db 0B8h
.eh_frame:000000000001E169                 db  7Bh ; {
.eh_frame:000000000001E16A                 db 0FFh
.eh_frame:000000000001E16B                 db 0FFh
.eh_frame:000000000001E16C                 db  36h ; 6
.eh_frame:000000000001E16D                 db    0
.eh_frame:000000000001E16E                 db    0
.eh_frame:000000000001E16F                 db    0
.eh_frame:000000000001E170                 db    0
.eh_frame:000000000001E171                 db    0
.eh_frame:000000000001E172                 db    0
.eh_frame:000000000001E173                 db    0
.eh_frame:000000000001E174                 db    0
.eh_frame:000000000001E175                 db    0
.eh_frame:000000000001E176                 db    0
.eh_frame:000000000001E177                 db    0
.eh_frame:000000000001E178                 db  1Ch
.eh_frame:000000000001E179                 db    0
.eh_frame:000000000001E17A                 db    0
.eh_frame:000000000001E17B                 db    0
.eh_frame:000000000001E17C                 db 0FCh
.eh_frame:000000000001E17D                 db  2Ah ; *
.eh_frame:000000000001E17E                 db    0
.eh_frame:000000000001E17F                 db    0
.eh_frame:000000000001E180                 db 0E0h
.eh_frame:000000000001E181                 db  7Bh ; {
.eh_frame:000000000001E182                 db 0FFh
.eh_frame:000000000001E183                 db 0FFh
.eh_frame:000000000001E184                 db  3Ch ; <
.eh_frame:000000000001E185                 db    0
.eh_frame:000000000001E186                 db    0
.eh_frame:000000000001E187                 db    0
.eh_frame:000000000001E188                 db    0
.eh_frame:000000000001E189                 db  44h ; D
.eh_frame:000000000001E18A                 db  0Eh
.eh_frame:000000000001E18B                 db  10h
.eh_frame:000000000001E18C                 db  61h ; a
.eh_frame:000000000001E18D                 db  0Ah
.eh_frame:000000000001E18E                 db  0Eh
.eh_frame:000000000001E18F                 db    8
.eh_frame:000000000001E190                 db  4Bh ; K
.eh_frame:000000000001E191                 db  0Bh
.eh_frame:000000000001E192                 db  4Bh ; K
.eh_frame:000000000001E193                 db  0Eh
.eh_frame:000000000001E194                 db    8
.eh_frame:000000000001E195                 db    0
.eh_frame:000000000001E196                 db    0
.eh_frame:000000000001E197                 db    0
.eh_frame:000000000001E198                 db  34h ; 4
.eh_frame:000000000001E199                 db    0
.eh_frame:000000000001E19A                 db    0
.eh_frame:000000000001E19B                 db    0
.eh_frame:000000000001E19C                 db  1Ch
.eh_frame:000000000001E19D                 db  2Bh ; +
.eh_frame:000000000001E19E                 db    0
.eh_frame:000000000001E19F                 db    0
.eh_frame:000000000001E1A0                 db    0
.eh_frame:000000000001E1A1                 db  7Ch ; |
.eh_frame:000000000001E1A2                 db 0FFh
.eh_frame:000000000001E1A3                 db 0FFh
.eh_frame:000000000001E1A4                 db  7Bh ; {
.eh_frame:000000000001E1A5                 db    0
.eh_frame:000000000001E1A6                 db    0
.eh_frame:000000000001E1A7                 db    0
.eh_frame:000000000001E1A8                 db    0
.eh_frame:000000000001E1A9                 db  42h ; B
.eh_frame:000000000001E1AA                 db  0Eh
.eh_frame:000000000001E1AB                 db  10h
.eh_frame:000000000001E1AC                 db  8Ch
.eh_frame:000000000001E1AD                 db    2
.eh_frame:000000000001E1AE                 db  41h ; A
.eh_frame:000000000001E1AF                 db  0Eh
.eh_frame:000000000001E1B0                 db  18h
.eh_frame:000000000001E1B1                 db  86h
.eh_frame:000000000001E1B2                 db    3
.eh_frame:000000000001E1B3                 db  41h ; A
.eh_frame:000000000001E1B4                 db  0Eh
.eh_frame:000000000001E1B5                 db  20h
.eh_frame:000000000001E1B6                 db  83h
.eh_frame:000000000001E1B7                 db    4
.eh_frame:000000000001E1B8                 db  7Dh ; }
.eh_frame:000000000001E1B9                 db  0Ah
.eh_frame:000000000001E1BA                 db  0Eh
.eh_frame:000000000001E1BB                 db  18h
.eh_frame:000000000001E1BC                 db  41h ; A
.eh_frame:000000000001E1BD                 db  0Eh
.eh_frame:000000000001E1BE                 db  10h
.eh_frame:000000000001E1BF                 db  42h ; B
.eh_frame:000000000001E1C0                 db  0Eh
.eh_frame:000000000001E1C1                 db    8
.eh_frame:000000000001E1C2                 db  44h ; D
.eh_frame:000000000001E1C3                 db  0Bh
.eh_frame:000000000001E1C4                 db  60h ; `
.eh_frame:000000000001E1C5                 db  0Ah
.eh_frame:000000000001E1C6                 db  0Eh
.eh_frame:000000000001E1C7                 db  18h
.eh_frame:000000000001E1C8                 db  41h ; A
.eh_frame:000000000001E1C9                 db  0Eh
.eh_frame:000000000001E1CA                 db  10h
.eh_frame:000000000001E1CB                 db  42h ; B
.eh_frame:000000000001E1CC                 db  0Eh
.eh_frame:000000000001E1CD                 db    8
.eh_frame:000000000001E1CE                 db  45h ; E
.eh_frame:000000000001E1CF                 db  0Bh
.eh_frame:000000000001E1D0                 db  1Ch
.eh_frame:000000000001E1D1                 db    0
.eh_frame:000000000001E1D2                 db    0
.eh_frame:000000000001E1D3                 db    0
.eh_frame:000000000001E1D4                 db  54h ; T
.eh_frame:000000000001E1D5                 db  2Bh ; +
.eh_frame:000000000001E1D6                 db    0
.eh_frame:000000000001E1D7                 db    0
.eh_frame:000000000001E1D8                 db  48h ; H
.eh_frame:000000000001E1D9                 db  7Ch ; |
.eh_frame:000000000001E1DA                 db 0FFh
.eh_frame:000000000001E1DB                 db 0FFh
.eh_frame:000000000001E1DC                 db  40h ; @
.eh_frame:000000000001E1DD                 db    0
.eh_frame:000000000001E1DE                 db    0
.eh_frame:000000000001E1DF                 db    0
.eh_frame:000000000001E1E0                 db    0
.eh_frame:000000000001E1E1                 db  44h ; D
.eh_frame:000000000001E1E2                 db  0Eh
.eh_frame:000000000001E1E3                 db  10h
.eh_frame:000000000001E1E4                 db  83h
.eh_frame:000000000001E1E5                 db    2
.eh_frame:000000000001E1E6                 db  5Ah ; Z
.eh_frame:000000000001E1E7                 db  0Ah
.eh_frame:000000000001E1E8                 db  0Eh
.eh_frame:000000000001E1E9                 db    8
.eh_frame:000000000001E1EA                 db  4Ah ; J
.eh_frame:000000000001E1EB                 db  0Bh
.eh_frame:000000000001E1EC                 db  53h ; S
.eh_frame:000000000001E1ED                 db  0Eh
.eh_frame:000000000001E1EE                 db    8
.eh_frame:000000000001E1EF                 db    0
.eh_frame:000000000001E1F0                 db  2Ch ; ,
.eh_frame:000000000001E1F1                 db    0
.eh_frame:000000000001E1F2                 db    0
.eh_frame:000000000001E1F3                 db    0
.eh_frame:000000000001E1F4                 db  74h ; t
.eh_frame:000000000001E1F5                 db  2Bh ; +
.eh_frame:000000000001E1F6                 db    0
.eh_frame:000000000001E1F7                 db    0
.eh_frame:000000000001E1F8                 db  68h ; h
.eh_frame:000000000001E1F9                 db  7Ch ; |
.eh_frame:000000000001E1FA                 db 0FFh
.eh_frame:000000000001E1FB                 db 0FFh
.eh_frame:000000000001E1FC                 db  57h ; W
.eh_frame:000000000001E1FD                 db    0
.eh_frame:000000000001E1FE                 db    0
.eh_frame:000000000001E1FF                 db    0
.eh_frame:000000000001E200                 db    0
.eh_frame:000000000001E201                 db  63h ; c
.eh_frame:000000000001E202                 db  0Eh
.eh_frame:000000000001E203                 db  10h
.eh_frame:000000000001E204                 db  8Ch
.eh_frame:000000000001E205                 db    2
.eh_frame:000000000001E206                 db  41h ; A
.eh_frame:000000000001E207                 db  0Eh
.eh_frame:000000000001E208                 db  18h
.eh_frame:000000000001E209                 db  86h
.eh_frame:000000000001E20A                 db    3
.eh_frame:000000000001E20B                 db  44h ; D
.eh_frame:000000000001E20C                 db  0Eh
.eh_frame:000000000001E20D                 db  20h
.eh_frame:000000000001E20E                 db  83h
.eh_frame:000000000001E20F                 db    4
.eh_frame:000000000001E210                 db  6Bh ; k
.eh_frame:000000000001E211                 db  0Eh
.eh_frame:000000000001E212                 db  18h
.eh_frame:000000000001E213                 db  41h ; A
.eh_frame:000000000001E214                 db  0Eh
.eh_frame:000000000001E215                 db  10h
.eh_frame:000000000001E216                 db  42h ; B
.eh_frame:000000000001E217                 db  0Eh
.eh_frame:000000000001E218                 db    8
.eh_frame:000000000001E219                 db    0
.eh_frame:000000000001E21A                 db    0
.eh_frame:000000000001E21B                 db    0
.eh_frame:000000000001E21C                 db    0
.eh_frame:000000000001E21D                 db    0
.eh_frame:000000000001E21E                 db    0
.eh_frame:000000000001E21F                 db    0
.eh_frame:000000000001E220                 db  44h ; D
.eh_frame:000000000001E221                 db    0
.eh_frame:000000000001E222                 db    0
.eh_frame:000000000001E223                 db    0
.eh_frame:000000000001E224                 db 0A4h
.eh_frame:000000000001E225                 db  2Bh ; +
.eh_frame:000000000001E226                 db    0
.eh_frame:000000000001E227                 db    0
.eh_frame:000000000001E228                 db  98h
.eh_frame:000000000001E229                 db  7Ch ; |
.eh_frame:000000000001E22A                 db 0FFh
.eh_frame:000000000001E22B                 db 0FFh
.eh_frame:000000000001E22C                 db  65h ; e
.eh_frame:000000000001E22D                 db    0
.eh_frame:000000000001E22E                 db    0
.eh_frame:000000000001E22F                 db    0
.eh_frame:000000000001E230                 db    0
.eh_frame:000000000001E231                 db  42h ; B
.eh_frame:000000000001E232                 db  0Eh
.eh_frame:000000000001E233                 db  10h
.eh_frame:000000000001E234                 db  8Fh
.eh_frame:000000000001E235                 db    2
.eh_frame:000000000001E236                 db  42h ; B
.eh_frame:000000000001E237                 db  0Eh
.eh_frame:000000000001E238                 db  18h
.eh_frame:000000000001E239                 db  8Eh
.eh_frame:000000000001E23A                 db    3
.eh_frame:000000000001E23B                 db  45h ; E
.eh_frame:000000000001E23C                 db  0Eh
.eh_frame:000000000001E23D                 db  20h
.eh_frame:000000000001E23E                 db  8Dh
.eh_frame:000000000001E23F                 db    4
.eh_frame:000000000001E240                 db  42h ; B
.eh_frame:000000000001E241                 db  0Eh
.eh_frame:000000000001E242                 db  28h ; (
.eh_frame:000000000001E243                 db  8Ch
.eh_frame:000000000001E244                 db    5
.eh_frame:000000000001E245                 db  48h ; H
.eh_frame:000000000001E246                 db  0Eh
.eh_frame:000000000001E247                 db  30h ; 0
.eh_frame:000000000001E248                 db  86h
.eh_frame:000000000001E249                 db    6
.eh_frame:000000000001E24A                 db  48h ; H
.eh_frame:000000000001E24B                 db  0Eh
.eh_frame:000000000001E24C                 db  38h ; 8
.eh_frame:000000000001E24D                 db  83h
.eh_frame:000000000001E24E                 db    7
.eh_frame:000000000001E24F                 db  4Dh ; M
.eh_frame:000000000001E250                 db  0Eh
.eh_frame:000000000001E251                 db  40h ; @
.eh_frame:000000000001E252                 db  72h ; r
.eh_frame:000000000001E253                 db  0Eh
.eh_frame:000000000001E254                 db  38h ; 8
.eh_frame:000000000001E255                 db  41h ; A
.eh_frame:000000000001E256                 db  0Eh
.eh_frame:000000000001E257                 db  30h ; 0
.eh_frame:000000000001E258                 db  41h ; A
.eh_frame:000000000001E259                 db  0Eh
.eh_frame:000000000001E25A                 db  28h ; (
.eh_frame:000000000001E25B                 db  42h ; B
.eh_frame:000000000001E25C                 db  0Eh
.eh_frame:000000000001E25D                 db  20h
.eh_frame:000000000001E25E                 db  42h ; B
.eh_frame:000000000001E25F                 db  0Eh
.eh_frame:000000000001E260                 db  18h
.eh_frame:000000000001E261                 db  42h ; B
.eh_frame:000000000001E262                 db  0Eh
.eh_frame:000000000001E263                 db  10h
.eh_frame:000000000001E264                 db  42h ; B
.eh_frame:000000000001E265                 db  0Eh
.eh_frame:000000000001E266                 db    8
.eh_frame:000000000001E267                 db    0
.eh_frame:000000000001E268                 db  14h
.eh_frame:000000000001E269                 db    0
.eh_frame:000000000001E26A                 db    0
.eh_frame:000000000001E26B                 db    0
.eh_frame:000000000001E26C                 db 0ECh
.eh_frame:000000000001E26D                 db  2Bh ; +
.eh_frame:000000000001E26E                 db    0
.eh_frame:000000000001E26F                 db    0
.eh_frame:000000000001E270                 db 0C0h
.eh_frame:000000000001E271                 db  7Ch ; |
.eh_frame:000000000001E272                 db 0FFh
.eh_frame:000000000001E273                 db 0FFh
.eh_frame:000000000001E274                 db    2
.eh_frame:000000000001E275                 db    0
.eh_frame:000000000001E276                 db    0
.eh_frame:000000000001E277                 db    0
.eh_frame:000000000001E278                 db    0
.eh_frame:000000000001E279                 db    0
.eh_frame:000000000001E27A                 db    0
.eh_frame:000000000001E27B                 db    0
.eh_frame:000000000001E27C                 db    0
.eh_frame:000000000001E27D                 db    0
.eh_frame:000000000001E27E                 db    0
.eh_frame:000000000001E27F                 db    0
.eh_frame:000000000001E280                 db  10h
.eh_frame:000000000001E281                 db    0
.eh_frame:000000000001E282                 db    0
.eh_frame:000000000001E283                 db    0
.eh_frame:000000000001E284                 db    4
.eh_frame:000000000001E285                 db  2Ch ; ,
.eh_frame:000000000001E286                 db    0
.eh_frame:000000000001E287                 db    0
.eh_frame:000000000001E288                 db 0B8h
.eh_frame:000000000001E289                 db  7Ch ; |
.eh_frame:000000000001E28A                 db 0FFh
.eh_frame:000000000001E28B                 db 0FFh
.eh_frame:000000000001E28C                 db  0Eh
.eh_frame:000000000001E28D                 db    0
.eh_frame:000000000001E28E                 db    0
.eh_frame:000000000001E28F                 db    0
.eh_frame:000000000001E290                 db    0
.eh_frame:000000000001E291                 db    0
.eh_frame:000000000001E292                 db    0
.eh_frame:000000000001E293                 db    0
.eh_frame:000000000001E294 __FRAME_END__   db    0
.eh_frame:000000000001E295                 db    0
.eh_frame:000000000001E296                 db    0
.eh_frame:000000000001E297                 db    0
.eh_frame:000000000001E297 _eh_frame       ends
.eh_frame:000000000001E297
.init_array:000000000021F050 ; ELF Initialization Function Table
.init_array:000000000021F050 ; ===========================================================================
.init_array:000000000021F050
.init_array:000000000021F050 ; Segment type: Pure data
.init_array:000000000021F050 ; Segment permissions: Read/Write
.init_array:000000000021F050 _init_array     segment qword public 'DATA' use64
.init_array:000000000021F050                 assume cs:_init_array
.init_array:000000000021F050                 ;org 21F050h
.init_array:000000000021F050 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000021F050                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000021F050                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000021F050 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000021F050
.fini_array:000000000021F058 ; ELF Termination Function Table
.fini_array:000000000021F058 ; ===========================================================================
.fini_array:000000000021F058
.fini_array:000000000021F058 ; Segment type: Pure data
.fini_array:000000000021F058 ; Segment permissions: Read/Write
.fini_array:000000000021F058 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000021F058                 assume cs:_fini_array
.fini_array:000000000021F058                 ;org 21F058h
.fini_array:000000000021F058 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000021F058                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000021F058 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000021F058
.data.rel.ro:000000000021F060 ; ===========================================================================
.data.rel.ro:000000000021F060
.data.rel.ro:000000000021F060 ; Segment type: Pure data
.data.rel.ro:000000000021F060 ; Segment permissions: Read/Write
.data.rel.ro:000000000021F060 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000021F060                 assume cs:_data_rel_ro
.data.rel.ro:000000000021F060                 ;org 21F060h
.data.rel.ro:000000000021F060 sort_functions  dq offset xstrcoll_name ; DATA XREF: sort_files+FC↑o
.data.rel.ro:000000000021F068                 dq offset xstrcoll_df_name
.data.rel.ro:000000000021F070                 dq offset rev_xstrcoll_name
.data.rel.ro:000000000021F078                 dq offset rev_xstrcoll_df_name
.data.rel.ro:000000000021F080                 dq offset strcmp_name
.data.rel.ro:000000000021F088                 dq offset strcmp_df_name
.data.rel.ro:000000000021F090                 dq offset rev_strcmp_name
.data.rel.ro:000000000021F098                 dq offset rev_strcmp_df_name
.data.rel.ro:000000000021F0A0                 dq offset xstrcoll_extension
.data.rel.ro:000000000021F0A8                 dq offset xstrcoll_df_extension
.data.rel.ro:000000000021F0B0                 dq offset rev_xstrcoll_extension
.data.rel.ro:000000000021F0B8                 dq offset rev_xstrcoll_df_extension
.data.rel.ro:000000000021F0C0                 dq offset strcmp_extension
.data.rel.ro:000000000021F0C8                 dq offset strcmp_df_extension
.data.rel.ro:000000000021F0D0                 dq offset rev_strcmp_extension
.data.rel.ro:000000000021F0D8                 dq offset rev_strcmp_df_extension
.data.rel.ro:000000000021F0E0                 dq offset xstrcoll_size
.data.rel.ro:000000000021F0E8                 dq offset xstrcoll_df_size
.data.rel.ro:000000000021F0F0                 dq offset rev_xstrcoll_size
.data.rel.ro:000000000021F0F8                 dq offset rev_xstrcoll_df_size
.data.rel.ro:000000000021F100                 dq offset strcmp_size
.data.rel.ro:000000000021F108                 dq offset strcmp_df_size
.data.rel.ro:000000000021F110                 dq offset rev_strcmp_size
.data.rel.ro:000000000021F118                 dq offset rev_strcmp_df_size
.data.rel.ro:000000000021F120                 dq offset xstrcoll_version
.data.rel.ro:000000000021F128                 dq offset xstrcoll_df_version
.data.rel.ro:000000000021F130                 dq offset rev_xstrcoll_version
.data.rel.ro:000000000021F138                 dq offset rev_xstrcoll_df_version
.data.rel.ro:000000000021F140                 db    0
.data.rel.ro:000000000021F141                 db    0
.data.rel.ro:000000000021F142                 db    0
.data.rel.ro:000000000021F143                 db    0
.data.rel.ro:000000000021F144                 db    0
.data.rel.ro:000000000021F145                 db    0
.data.rel.ro:000000000021F146                 db    0
.data.rel.ro:000000000021F147                 db    0
.data.rel.ro:000000000021F148                 db    0
.data.rel.ro:000000000021F149                 db    0
.data.rel.ro:000000000021F14A                 db    0
.data.rel.ro:000000000021F14B                 db    0
.data.rel.ro:000000000021F14C                 db    0
.data.rel.ro:000000000021F14D                 db    0
.data.rel.ro:000000000021F14E                 db    0
.data.rel.ro:000000000021F14F                 db    0
.data.rel.ro:000000000021F150                 db    0
.data.rel.ro:000000000021F151                 db    0
.data.rel.ro:000000000021F152                 db    0
.data.rel.ro:000000000021F153                 db    0
.data.rel.ro:000000000021F154                 db    0
.data.rel.ro:000000000021F155                 db    0
.data.rel.ro:000000000021F156                 db    0
.data.rel.ro:000000000021F157                 db    0
.data.rel.ro:000000000021F158                 db    0
.data.rel.ro:000000000021F159                 db    0
.data.rel.ro:000000000021F15A                 db    0
.data.rel.ro:000000000021F15B                 db    0
.data.rel.ro:000000000021F15C                 db    0
.data.rel.ro:000000000021F15D                 db    0
.data.rel.ro:000000000021F15E                 db    0
.data.rel.ro:000000000021F15F                 db    0
.data.rel.ro:000000000021F160                 dq offset xstrcoll_mtime
.data.rel.ro:000000000021F168                 dq offset xstrcoll_df_mtime
.data.rel.ro:000000000021F170                 dq offset rev_xstrcoll_mtime
.data.rel.ro:000000000021F178                 dq offset rev_xstrcoll_df_mtime
.data.rel.ro:000000000021F180                 dq offset xstrcoll_mtime_0
.data.rel.ro:000000000021F188                 dq offset strcmp_df_mtime
.data.rel.ro:000000000021F190                 dq offset rev_xstrcoll_mtime_0
.data.rel.ro:000000000021F198                 dq offset rev_strcmp_df_mtime
.data.rel.ro:000000000021F1A0                 dq offset xstrcoll_ctime
.data.rel.ro:000000000021F1A8                 dq offset xstrcoll_df_ctime
.data.rel.ro:000000000021F1B0                 dq offset rev_xstrcoll_ctime
.data.rel.ro:000000000021F1B8                 dq offset rev_xstrcoll_df_ctime
.data.rel.ro:000000000021F1C0                 dq offset xstrcoll_ctime_0
.data.rel.ro:000000000021F1C8                 dq offset strcmp_df_ctime
.data.rel.ro:000000000021F1D0                 dq offset rev_xstrcoll_ctime_0
.data.rel.ro:000000000021F1D8                 dq offset rev_strcmp_df_ctime
.data.rel.ro:000000000021F1E0                 dq offset xstrcoll_atime
.data.rel.ro:000000000021F1E8                 dq offset xstrcoll_df_atime
.data.rel.ro:000000000021F1F0                 dq offset rev_xstrcoll_atime
.data.rel.ro:000000000021F1F8                 dq offset rev_xstrcoll_df_atime
.data.rel.ro:000000000021F200                 dq offset xstrcoll_atime_0
.data.rel.ro:000000000021F208                 dq offset strcmp_df_atime
.data.rel.ro:000000000021F210                 dq offset rev_xstrcoll_atime_0
.data.rel.ro:000000000021F218                 dq offset rev_strcmp_df_atime
.data.rel.ro:000000000021F220 when_args       dq offset aAlways       ; DATA XREF: main+71C↑o
.data.rel.ro:000000000021F220                                         ; main+836↑o
.data.rel.ro:000000000021F220                                         ; "always"
.data.rel.ro:000000000021F228                 dq offset aYes          ; "yes"
.data.rel.ro:000000000021F230                 dq offset aForce        ; "force"
.data.rel.ro:000000000021F238                 dq offset aNever        ; "never"
.data.rel.ro:000000000021F240                 dq offset aNo           ; "no"
.data.rel.ro:000000000021F248                 dq offset aNone         ; "none"
.data.rel.ro:000000000021F250                 dq offset aAuto         ; "auto"
.data.rel.ro:000000000021F258                 dq offset aIfTty+3      ; "tty"
.data.rel.ro:000000000021F260                 dq offset aIfTty        ; "if-tty"
.data.rel.ro:000000000021F268                 align 20h
.data.rel.ro:000000000021F280 time_args       dq offset aAtime        ; DATA XREF: main+5C6↑o
.data.rel.ro:000000000021F280                                         ; "atime"
.data.rel.ro:000000000021F288                 dq offset aAccess       ; "access"
.data.rel.ro:000000000021F290                 dq offset aUse          ; "use"
.data.rel.ro:000000000021F298                 dq offset aCtime        ; "ctime"
.data.rel.ro:000000000021F2A0                 dq offset aStatus       ; "status"
.data.rel.ro:000000000021F2A8                 align 20h
.data.rel.ro:000000000021F2C0 sort_args       dq offset aNone         ; DATA XREF: main+609↑o
.data.rel.ro:000000000021F2C0                                         ; "none"
.data.rel.ro:000000000021F2C8                 dq offset aTime+2       ; "time"
.data.rel.ro:000000000021F2D0                 dq offset msgid+0Ch     ; "size"
.data.rel.ro:000000000021F2D8                 dq offset aExtension    ; "extension"
.data.rel.ro:000000000021F2E0                 dq offset aSortTypeSortVe+12h ; "version"
.data.rel.ro:000000000021F2E8                 align 20h
.data.rel.ro:000000000021F300 format_args     dq offset aVerbose      ; DATA XREF: main+7CC↑o
.data.rel.ro:000000000021F300                                         ; "verbose"
.data.rel.ro:000000000021F308                 dq offset aLong         ; "long"
.data.rel.ro:000000000021F310                 dq offset aCommas       ; "commas"
.data.rel.ro:000000000021F318                 dq offset aHorizontal   ; "horizontal"
.data.rel.ro:000000000021F320                 dq offset aAcross       ; "across"
.data.rel.ro:000000000021F328                 dq offset aVertical     ; "vertical"
.data.rel.ro:000000000021F330                 dq offset aSingleColumn ; "single-column"
.data.rel.ro:000000000021F338                 align 20h
.data.rel.ro:000000000021F340 ; struct option long_options
.data.rel.ro:000000000021F340 long_options    dq offset aAlmostAll+7  ; name
.data.rel.ro:000000000021F340                                         ; DATA XREF: main:loc_3B08↑o
.data.rel.ro:000000000021F340                                         ; main+19AF↑o
.data.rel.ro:000000000021F340                 dd 0                    ; has_arg ; "all"
.data.rel.ro:000000000021F340                 db 4 dup(0)
.data.rel.ro:000000000021F340                 dq 0                    ; flag
.data.rel.ro:000000000021F340                 dd 61h                  ; val
.data.rel.ro:000000000021F340                 db 4 dup(0)
.data.rel.ro:000000000021F360                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021F368                 db    0
.data.rel.ro:000000000021F369                 db    0
.data.rel.ro:000000000021F36A                 db    0
.data.rel.ro:000000000021F36B                 db    0
.data.rel.ro:000000000021F36C                 db    0
.data.rel.ro:000000000021F36D                 db    0
.data.rel.ro:000000000021F36E                 db    0
.data.rel.ro:000000000021F36F                 db    0
.data.rel.ro:000000000021F370                 db    0
.data.rel.ro:000000000021F371                 db    0
.data.rel.ro:000000000021F372                 db    0
.data.rel.ro:000000000021F373                 db    0
.data.rel.ro:000000000021F374                 db    0
.data.rel.ro:000000000021F375                 db    0
.data.rel.ro:000000000021F376                 db    0
.data.rel.ro:000000000021F377                 db    0
.data.rel.ro:000000000021F378                 db  62h ; b
.data.rel.ro:000000000021F379                 db    0
.data.rel.ro:000000000021F37A                 db    0
.data.rel.ro:000000000021F37B                 db    0
.data.rel.ro:000000000021F37C                 db    0
.data.rel.ro:000000000021F37D                 db    0
.data.rel.ro:000000000021F37E                 db    0
.data.rel.ro:000000000021F37F                 db    0
.data.rel.ro:000000000021F380                 dq offset aDirectory    ; "directory"
.data.rel.ro:000000000021F388                 db    0
.data.rel.ro:000000000021F389                 db    0
.data.rel.ro:000000000021F38A                 db    0
.data.rel.ro:000000000021F38B                 db    0
.data.rel.ro:000000000021F38C                 db    0
.data.rel.ro:000000000021F38D                 db    0
.data.rel.ro:000000000021F38E                 db    0
.data.rel.ro:000000000021F38F                 db    0
.data.rel.ro:000000000021F390                 db    0
.data.rel.ro:000000000021F391                 db    0
.data.rel.ro:000000000021F392                 db    0
.data.rel.ro:000000000021F393                 db    0
.data.rel.ro:000000000021F394                 db    0
.data.rel.ro:000000000021F395                 db    0
.data.rel.ro:000000000021F396                 db    0
.data.rel.ro:000000000021F397                 db    0
.data.rel.ro:000000000021F398                 db  64h ; d
.data.rel.ro:000000000021F399                 db    0
.data.rel.ro:000000000021F39A                 db    0
.data.rel.ro:000000000021F39B                 db    0
.data.rel.ro:000000000021F39C                 db    0
.data.rel.ro:000000000021F39D                 db    0
.data.rel.ro:000000000021F39E                 db    0
.data.rel.ro:000000000021F39F                 db    0
.data.rel.ro:000000000021F3A0                 dq offset aDired_0      ; "dired"
.data.rel.ro:000000000021F3A8                 db    0
.data.rel.ro:000000000021F3A9                 db    0
.data.rel.ro:000000000021F3AA                 db    0
.data.rel.ro:000000000021F3AB                 db    0
.data.rel.ro:000000000021F3AC                 db    0
.data.rel.ro:000000000021F3AD                 db    0
.data.rel.ro:000000000021F3AE                 db    0
.data.rel.ro:000000000021F3AF                 db    0
.data.rel.ro:000000000021F3B0                 db    0
.data.rel.ro:000000000021F3B1                 db    0
.data.rel.ro:000000000021F3B2                 db    0
.data.rel.ro:000000000021F3B3                 db    0
.data.rel.ro:000000000021F3B4                 db    0
.data.rel.ro:000000000021F3B5                 db    0
.data.rel.ro:000000000021F3B6                 db    0
.data.rel.ro:000000000021F3B7                 db    0
.data.rel.ro:000000000021F3B8                 db  44h ; D
.data.rel.ro:000000000021F3B9                 db    0
.data.rel.ro:000000000021F3BA                 db    0
.data.rel.ro:000000000021F3BB                 db    0
.data.rel.ro:000000000021F3BC                 db    0
.data.rel.ro:000000000021F3BD                 db    0
.data.rel.ro:000000000021F3BE                 db    0
.data.rel.ro:000000000021F3BF                 db    0
.data.rel.ro:000000000021F3C0                 dq offset aFullTime     ; "full-time"
.data.rel.ro:000000000021F3C8                 db    0
.data.rel.ro:000000000021F3C9                 db    0
.data.rel.ro:000000000021F3CA                 db    0
.data.rel.ro:000000000021F3CB                 db    0
.data.rel.ro:000000000021F3CC                 db    0
.data.rel.ro:000000000021F3CD                 db    0
.data.rel.ro:000000000021F3CE                 db    0
.data.rel.ro:000000000021F3CF                 db    0
.data.rel.ro:000000000021F3D0                 db    0
.data.rel.ro:000000000021F3D1                 db    0
.data.rel.ro:000000000021F3D2                 db    0
.data.rel.ro:000000000021F3D3                 db    0
.data.rel.ro:000000000021F3D4                 db    0
.data.rel.ro:000000000021F3D5                 db    0
.data.rel.ro:000000000021F3D6                 db    0
.data.rel.ro:000000000021F3D7                 db    0
.data.rel.ro:000000000021F3D8                 db  86h
.data.rel.ro:000000000021F3D9                 db    0
.data.rel.ro:000000000021F3DA                 db    0
.data.rel.ro:000000000021F3DB                 db    0
.data.rel.ro:000000000021F3DC                 db    0
.data.rel.ro:000000000021F3DD                 db    0
.data.rel.ro:000000000021F3DE                 db    0
.data.rel.ro:000000000021F3DF                 db    0
.data.rel.ro:000000000021F3E0                 dq offset aGroupDirectori_0 ; "group-directories-first"
.data.rel.ro:000000000021F3E8                 db    0
.data.rel.ro:000000000021F3E9                 db    0
.data.rel.ro:000000000021F3EA                 db    0
.data.rel.ro:000000000021F3EB                 db    0
.data.rel.ro:000000000021F3EC                 db    0
.data.rel.ro:000000000021F3ED                 db    0
.data.rel.ro:000000000021F3EE                 db    0
.data.rel.ro:000000000021F3EF                 db    0
.data.rel.ro:000000000021F3F0                 db    0
.data.rel.ro:000000000021F3F1                 db    0
.data.rel.ro:000000000021F3F2                 db    0
.data.rel.ro:000000000021F3F3                 db    0
.data.rel.ro:000000000021F3F4                 db    0
.data.rel.ro:000000000021F3F5                 db    0
.data.rel.ro:000000000021F3F6                 db    0
.data.rel.ro:000000000021F3F7                 db    0
.data.rel.ro:000000000021F3F8                 db  87h
.data.rel.ro:000000000021F3F9                 db    0
.data.rel.ro:000000000021F3FA                 db    0
.data.rel.ro:000000000021F3FB                 db    0
.data.rel.ro:000000000021F3FC                 db    0
.data.rel.ro:000000000021F3FD                 db    0
.data.rel.ro:000000000021F3FE                 db    0
.data.rel.ro:000000000021F3FF                 db    0
.data.rel.ro:000000000021F400                 dq offset aHumanReadable ; "human-readable"
.data.rel.ro:000000000021F408                 db    0
.data.rel.ro:000000000021F409                 db    0
.data.rel.ro:000000000021F40A                 db    0
.data.rel.ro:000000000021F40B                 db    0
.data.rel.ro:000000000021F40C                 db    0
.data.rel.ro:000000000021F40D                 db    0
.data.rel.ro:000000000021F40E                 db    0
.data.rel.ro:000000000021F40F                 db    0
.data.rel.ro:000000000021F410                 db    0
.data.rel.ro:000000000021F411                 db    0
.data.rel.ro:000000000021F412                 db    0
.data.rel.ro:000000000021F413                 db    0
.data.rel.ro:000000000021F414                 db    0
.data.rel.ro:000000000021F415                 db    0
.data.rel.ro:000000000021F416                 db    0
.data.rel.ro:000000000021F417                 db    0
.data.rel.ro:000000000021F418                 db  68h ; h
.data.rel.ro:000000000021F419                 db    0
.data.rel.ro:000000000021F41A                 db    0
.data.rel.ro:000000000021F41B                 db    0
.data.rel.ro:000000000021F41C                 db    0
.data.rel.ro:000000000021F41D                 db    0
.data.rel.ro:000000000021F41E                 db    0
.data.rel.ro:000000000021F41F                 db    0
.data.rel.ro:000000000021F420                 dq offset aInode        ; "inode"
.data.rel.ro:000000000021F428                 db    0
.data.rel.ro:000000000021F429                 db    0
.data.rel.ro:000000000021F42A                 db    0
.data.rel.ro:000000000021F42B                 db    0
.data.rel.ro:000000000021F42C                 db    0
.data.rel.ro:000000000021F42D                 db    0
.data.rel.ro:000000000021F42E                 db    0
.data.rel.ro:000000000021F42F                 db    0
.data.rel.ro:000000000021F430                 db    0
.data.rel.ro:000000000021F431                 db    0
.data.rel.ro:000000000021F432                 db    0
.data.rel.ro:000000000021F433                 db    0
.data.rel.ro:000000000021F434                 db    0
.data.rel.ro:000000000021F435                 db    0
.data.rel.ro:000000000021F436                 db    0
.data.rel.ro:000000000021F437                 db    0
.data.rel.ro:000000000021F438                 db  69h ; i
.data.rel.ro:000000000021F439                 db    0
.data.rel.ro:000000000021F43A                 db    0
.data.rel.ro:000000000021F43B                 db    0
.data.rel.ro:000000000021F43C                 db    0
.data.rel.ro:000000000021F43D                 db    0
.data.rel.ro:000000000021F43E                 db    0
.data.rel.ro:000000000021F43F                 db    0
.data.rel.ro:000000000021F440                 dq offset aKibibytes    ; "kibibytes"
.data.rel.ro:000000000021F448                 db    0
.data.rel.ro:000000000021F449                 db    0
.data.rel.ro:000000000021F44A                 db    0
.data.rel.ro:000000000021F44B                 db    0
.data.rel.ro:000000000021F44C                 db    0
.data.rel.ro:000000000021F44D                 db    0
.data.rel.ro:000000000021F44E                 db    0
.data.rel.ro:000000000021F44F                 db    0
.data.rel.ro:000000000021F450                 db    0
.data.rel.ro:000000000021F451                 db    0
.data.rel.ro:000000000021F452                 db    0
.data.rel.ro:000000000021F453                 db    0
.data.rel.ro:000000000021F454                 db    0
.data.rel.ro:000000000021F455                 db    0
.data.rel.ro:000000000021F456                 db    0
.data.rel.ro:000000000021F457                 db    0
.data.rel.ro:000000000021F458                 db  6Bh ; k
.data.rel.ro:000000000021F459                 db    0
.data.rel.ro:000000000021F45A                 db    0
.data.rel.ro:000000000021F45B                 db    0
.data.rel.ro:000000000021F45C                 db    0
.data.rel.ro:000000000021F45D                 db    0
.data.rel.ro:000000000021F45E                 db    0
.data.rel.ro:000000000021F45F                 db    0
.data.rel.ro:000000000021F460                 dq offset aNumericUidGid ; "numeric-uid-gid"
.data.rel.ro:000000000021F468                 db    0
.data.rel.ro:000000000021F469                 db    0
.data.rel.ro:000000000021F46A                 db    0
.data.rel.ro:000000000021F46B                 db    0
.data.rel.ro:000000000021F46C                 db    0
.data.rel.ro:000000000021F46D                 db    0
.data.rel.ro:000000000021F46E                 db    0
.data.rel.ro:000000000021F46F                 db    0
.data.rel.ro:000000000021F470                 db    0
.data.rel.ro:000000000021F471                 db    0
.data.rel.ro:000000000021F472                 db    0
.data.rel.ro:000000000021F473                 db    0
.data.rel.ro:000000000021F474                 db    0
.data.rel.ro:000000000021F475                 db    0
.data.rel.ro:000000000021F476                 db    0
.data.rel.ro:000000000021F477                 db    0
.data.rel.ro:000000000021F478                 db  6Eh ; n
.data.rel.ro:000000000021F479                 db    0
.data.rel.ro:000000000021F47A                 db    0
.data.rel.ro:000000000021F47B                 db    0
.data.rel.ro:000000000021F47C                 db    0
.data.rel.ro:000000000021F47D                 db    0
.data.rel.ro:000000000021F47E                 db    0
.data.rel.ro:000000000021F47F                 db    0
.data.rel.ro:000000000021F480                 dq offset aNoGroup      ; "no-group"
.data.rel.ro:000000000021F488                 db    0
.data.rel.ro:000000000021F489                 db    0
.data.rel.ro:000000000021F48A                 db    0
.data.rel.ro:000000000021F48B                 db    0
.data.rel.ro:000000000021F48C                 db    0
.data.rel.ro:000000000021F48D                 db    0
.data.rel.ro:000000000021F48E                 db    0
.data.rel.ro:000000000021F48F                 db    0
.data.rel.ro:000000000021F490                 db    0
.data.rel.ro:000000000021F491                 db    0
.data.rel.ro:000000000021F492                 db    0
.data.rel.ro:000000000021F493                 db    0
.data.rel.ro:000000000021F494                 db    0
.data.rel.ro:000000000021F495                 db    0
.data.rel.ro:000000000021F496                 db    0
.data.rel.ro:000000000021F497                 db    0
.data.rel.ro:000000000021F498                 db  47h ; G
.data.rel.ro:000000000021F499                 db    0
.data.rel.ro:000000000021F49A                 db    0
.data.rel.ro:000000000021F49B                 db    0
.data.rel.ro:000000000021F49C                 db    0
.data.rel.ro:000000000021F49D                 db    0
.data.rel.ro:000000000021F49E                 db    0
.data.rel.ro:000000000021F49F                 db    0
.data.rel.ro:000000000021F4A0                 dq offset aHideControlCha ; "hide-control-chars"
.data.rel.ro:000000000021F4A8                 db    0
.data.rel.ro:000000000021F4A9                 db    0
.data.rel.ro:000000000021F4AA                 db    0
.data.rel.ro:000000000021F4AB                 db    0
.data.rel.ro:000000000021F4AC                 db    0
.data.rel.ro:000000000021F4AD                 db    0
.data.rel.ro:000000000021F4AE                 db    0
.data.rel.ro:000000000021F4AF                 db    0
.data.rel.ro:000000000021F4B0                 db    0
.data.rel.ro:000000000021F4B1                 db    0
.data.rel.ro:000000000021F4B2                 db    0
.data.rel.ro:000000000021F4B3                 db    0
.data.rel.ro:000000000021F4B4                 db    0
.data.rel.ro:000000000021F4B5                 db    0
.data.rel.ro:000000000021F4B6                 db    0
.data.rel.ro:000000000021F4B7                 db    0
.data.rel.ro:000000000021F4B8                 db  71h ; q
.data.rel.ro:000000000021F4B9                 db    0
.data.rel.ro:000000000021F4BA                 db    0
.data.rel.ro:000000000021F4BB                 db    0
.data.rel.ro:000000000021F4BC                 db    0
.data.rel.ro:000000000021F4BD                 db    0
.data.rel.ro:000000000021F4BE                 db    0
.data.rel.ro:000000000021F4BF                 db    0
.data.rel.ro:000000000021F4C0                 dq offset aReverse      ; "reverse"
.data.rel.ro:000000000021F4C8                 db    0
.data.rel.ro:000000000021F4C9                 db    0
.data.rel.ro:000000000021F4CA                 db    0
.data.rel.ro:000000000021F4CB                 db    0
.data.rel.ro:000000000021F4CC                 db    0
.data.rel.ro:000000000021F4CD                 db    0
.data.rel.ro:000000000021F4CE                 db    0
.data.rel.ro:000000000021F4CF                 db    0
.data.rel.ro:000000000021F4D0                 db    0
.data.rel.ro:000000000021F4D1                 db    0
.data.rel.ro:000000000021F4D2                 db    0
.data.rel.ro:000000000021F4D3                 db    0
.data.rel.ro:000000000021F4D4                 db    0
.data.rel.ro:000000000021F4D5                 db    0
.data.rel.ro:000000000021F4D6                 db    0
.data.rel.ro:000000000021F4D7                 db    0
.data.rel.ro:000000000021F4D8                 db  72h ; r
.data.rel.ro:000000000021F4D9                 db    0
.data.rel.ro:000000000021F4DA                 db    0
.data.rel.ro:000000000021F4DB                 db    0
.data.rel.ro:000000000021F4DC                 db    0
.data.rel.ro:000000000021F4DD                 db    0
.data.rel.ro:000000000021F4DE                 db    0
.data.rel.ro:000000000021F4DF                 db    0
.data.rel.ro:000000000021F4E0                 dq offset msgid+0Ch     ; "size"
.data.rel.ro:000000000021F4E8                 db    0
.data.rel.ro:000000000021F4E9                 db    0
.data.rel.ro:000000000021F4EA                 db    0
.data.rel.ro:000000000021F4EB                 db    0
.data.rel.ro:000000000021F4EC                 db    0
.data.rel.ro:000000000021F4ED                 db    0
.data.rel.ro:000000000021F4EE                 db    0
.data.rel.ro:000000000021F4EF                 db    0
.data.rel.ro:000000000021F4F0                 db    0
.data.rel.ro:000000000021F4F1                 db    0
.data.rel.ro:000000000021F4F2                 db    0
.data.rel.ro:000000000021F4F3                 db    0
.data.rel.ro:000000000021F4F4                 db    0
.data.rel.ro:000000000021F4F5                 db    0
.data.rel.ro:000000000021F4F6                 db    0
.data.rel.ro:000000000021F4F7                 db    0
.data.rel.ro:000000000021F4F8                 db  73h ; s
.data.rel.ro:000000000021F4F9                 db    0
.data.rel.ro:000000000021F4FA                 db    0
.data.rel.ro:000000000021F4FB                 db    0
.data.rel.ro:000000000021F4FC                 db    0
.data.rel.ro:000000000021F4FD                 db    0
.data.rel.ro:000000000021F4FE                 db    0
.data.rel.ro:000000000021F4FF                 db    0
.data.rel.ro:000000000021F500                 dq offset aInvalidLineWid+0Dh ; "width"
.data.rel.ro:000000000021F508                 db    1
.data.rel.ro:000000000021F509                 db    0
.data.rel.ro:000000000021F50A                 db    0
.data.rel.ro:000000000021F50B                 db    0
.data.rel.ro:000000000021F50C                 db    0
.data.rel.ro:000000000021F50D                 db    0
.data.rel.ro:000000000021F50E                 db    0
.data.rel.ro:000000000021F50F                 db    0
.data.rel.ro:000000000021F510                 db    0
.data.rel.ro:000000000021F511                 db    0
.data.rel.ro:000000000021F512                 db    0
.data.rel.ro:000000000021F513                 db    0
.data.rel.ro:000000000021F514                 db    0
.data.rel.ro:000000000021F515                 db    0
.data.rel.ro:000000000021F516                 db    0
.data.rel.ro:000000000021F517                 db    0
.data.rel.ro:000000000021F518                 db  77h ; w
.data.rel.ro:000000000021F519                 db    0
.data.rel.ro:000000000021F51A                 db    0
.data.rel.ro:000000000021F51B                 db    0
.data.rel.ro:000000000021F51C                 db    0
.data.rel.ro:000000000021F51D                 db    0
.data.rel.ro:000000000021F51E                 db    0
.data.rel.ro:000000000021F51F                 db    0
.data.rel.ro:000000000021F520                 dq offset aAlmostAll    ; "almost-all"
.data.rel.ro:000000000021F528                 db    0
.data.rel.ro:000000000021F529                 db    0
.data.rel.ro:000000000021F52A                 db    0
.data.rel.ro:000000000021F52B                 db    0
.data.rel.ro:000000000021F52C                 db    0
.data.rel.ro:000000000021F52D                 db    0
.data.rel.ro:000000000021F52E                 db    0
.data.rel.ro:000000000021F52F                 db    0
.data.rel.ro:000000000021F530                 db    0
.data.rel.ro:000000000021F531                 db    0
.data.rel.ro:000000000021F532                 db    0
.data.rel.ro:000000000021F533                 db    0
.data.rel.ro:000000000021F534                 db    0
.data.rel.ro:000000000021F535                 db    0
.data.rel.ro:000000000021F536                 db    0
.data.rel.ro:000000000021F537                 db    0
.data.rel.ro:000000000021F538                 db  41h ; A
.data.rel.ro:000000000021F539                 db    0
.data.rel.ro:000000000021F53A                 db    0
.data.rel.ro:000000000021F53B                 db    0
.data.rel.ro:000000000021F53C                 db    0
.data.rel.ro:000000000021F53D                 db    0
.data.rel.ro:000000000021F53E                 db    0
.data.rel.ro:000000000021F53F                 db    0
.data.rel.ro:000000000021F540                 dq offset aIgnoreBackups ; "ignore-backups"
.data.rel.ro:000000000021F548                 db    0
.data.rel.ro:000000000021F549                 db    0
.data.rel.ro:000000000021F54A                 db    0
.data.rel.ro:000000000021F54B                 db    0
.data.rel.ro:000000000021F54C                 db    0
.data.rel.ro:000000000021F54D                 db    0
.data.rel.ro:000000000021F54E                 db    0
.data.rel.ro:000000000021F54F                 db    0
.data.rel.ro:000000000021F550                 db    0
.data.rel.ro:000000000021F551                 db    0
.data.rel.ro:000000000021F552                 db    0
.data.rel.ro:000000000021F553                 db    0
.data.rel.ro:000000000021F554                 db    0
.data.rel.ro:000000000021F555                 db    0
.data.rel.ro:000000000021F556                 db    0
.data.rel.ro:000000000021F557                 db    0
.data.rel.ro:000000000021F558                 db  42h ; B
.data.rel.ro:000000000021F559                 db    0
.data.rel.ro:000000000021F55A                 db    0
.data.rel.ro:000000000021F55B                 db    0
.data.rel.ro:000000000021F55C                 db    0
.data.rel.ro:000000000021F55D                 db    0
.data.rel.ro:000000000021F55E                 db    0
.data.rel.ro:000000000021F55F                 db    0
.data.rel.ro:000000000021F560                 dq offset aClassify     ; "classify"
.data.rel.ro:000000000021F568                 db    0
.data.rel.ro:000000000021F569                 db    0
.data.rel.ro:000000000021F56A                 db    0
.data.rel.ro:000000000021F56B                 db    0
.data.rel.ro:000000000021F56C                 db    0
.data.rel.ro:000000000021F56D                 db    0
.data.rel.ro:000000000021F56E                 db    0
.data.rel.ro:000000000021F56F                 db    0
.data.rel.ro:000000000021F570                 db    0
.data.rel.ro:000000000021F571                 db    0
.data.rel.ro:000000000021F572                 db    0
.data.rel.ro:000000000021F573                 db    0
.data.rel.ro:000000000021F574                 db    0
.data.rel.ro:000000000021F575                 db    0
.data.rel.ro:000000000021F576                 db    0
.data.rel.ro:000000000021F577                 db    0
.data.rel.ro:000000000021F578                 db  46h ; F
.data.rel.ro:000000000021F579                 db    0
.data.rel.ro:000000000021F57A                 db    0
.data.rel.ro:000000000021F57B                 db    0
.data.rel.ro:000000000021F57C                 db    0
.data.rel.ro:000000000021F57D                 db    0
.data.rel.ro:000000000021F57E                 db    0
.data.rel.ro:000000000021F57F                 db    0
.data.rel.ro:000000000021F580                 dq offset aFileType     ; "file-type"
.data.rel.ro:000000000021F588                 db    0
.data.rel.ro:000000000021F589                 db    0
.data.rel.ro:000000000021F58A                 db    0
.data.rel.ro:000000000021F58B                 db    0
.data.rel.ro:000000000021F58C                 db    0
.data.rel.ro:000000000021F58D                 db    0
.data.rel.ro:000000000021F58E                 db    0
.data.rel.ro:000000000021F58F                 db    0
.data.rel.ro:000000000021F590                 db    0
.data.rel.ro:000000000021F591                 db    0
.data.rel.ro:000000000021F592                 db    0
.data.rel.ro:000000000021F593                 db    0
.data.rel.ro:000000000021F594                 db    0
.data.rel.ro:000000000021F595                 db    0
.data.rel.ro:000000000021F596                 db    0
.data.rel.ro:000000000021F597                 db    0
.data.rel.ro:000000000021F598                 db  84h
.data.rel.ro:000000000021F599                 db    0
.data.rel.ro:000000000021F59A                 db    0
.data.rel.ro:000000000021F59B                 db    0
.data.rel.ro:000000000021F59C                 db    0
.data.rel.ro:000000000021F59D                 db    0
.data.rel.ro:000000000021F59E                 db    0
.data.rel.ro:000000000021F59F                 db    0
.data.rel.ro:000000000021F5A0                 dq offset aSi           ; "si"
.data.rel.ro:000000000021F5A8                 db    0
.data.rel.ro:000000000021F5A9                 db    0
.data.rel.ro:000000000021F5AA                 db    0
.data.rel.ro:000000000021F5AB                 db    0
.data.rel.ro:000000000021F5AC                 db    0
.data.rel.ro:000000000021F5AD                 db    0
.data.rel.ro:000000000021F5AE                 db    0
.data.rel.ro:000000000021F5AF                 db    0
.data.rel.ro:000000000021F5B0                 db    0
.data.rel.ro:000000000021F5B1                 db    0
.data.rel.ro:000000000021F5B2                 db    0
.data.rel.ro:000000000021F5B3                 db    0
.data.rel.ro:000000000021F5B4                 db    0
.data.rel.ro:000000000021F5B5                 db    0
.data.rel.ro:000000000021F5B6                 db    0
.data.rel.ro:000000000021F5B7                 db    0
.data.rel.ro:000000000021F5B8                 db  8Dh
.data.rel.ro:000000000021F5B9                 db    0
.data.rel.ro:000000000021F5BA                 db    0
.data.rel.ro:000000000021F5BB                 db    0
.data.rel.ro:000000000021F5BC                 db    0
.data.rel.ro:000000000021F5BD                 db    0
.data.rel.ro:000000000021F5BE                 db    0
.data.rel.ro:000000000021F5BF                 db    0
.data.rel.ro:000000000021F5C0                 dq offset aDereferenceCom ; "dereference-command-line"
.data.rel.ro:000000000021F5C8                 db    0
.data.rel.ro:000000000021F5C9                 db    0
.data.rel.ro:000000000021F5CA                 db    0
.data.rel.ro:000000000021F5CB                 db    0
.data.rel.ro:000000000021F5CC                 db    0
.data.rel.ro:000000000021F5CD                 db    0
.data.rel.ro:000000000021F5CE                 db    0
.data.rel.ro:000000000021F5CF                 db    0
.data.rel.ro:000000000021F5D0                 db    0
.data.rel.ro:000000000021F5D1                 db    0
.data.rel.ro:000000000021F5D2                 db    0
.data.rel.ro:000000000021F5D3                 db    0
.data.rel.ro:000000000021F5D4                 db    0
.data.rel.ro:000000000021F5D5                 db    0
.data.rel.ro:000000000021F5D6                 db    0
.data.rel.ro:000000000021F5D7                 db    0
.data.rel.ro:000000000021F5D8                 db  48h ; H
.data.rel.ro:000000000021F5D9                 db    0
.data.rel.ro:000000000021F5DA                 db    0
.data.rel.ro:000000000021F5DB                 db    0
.data.rel.ro:000000000021F5DC                 db    0
.data.rel.ro:000000000021F5DD                 db    0
.data.rel.ro:000000000021F5DE                 db    0
.data.rel.ro:000000000021F5DF                 db    0
.data.rel.ro:000000000021F5E0                 dq offset aDereferenceCom_0 ; "dereference-command-line-symlink-to-dir"
.data.rel.ro:000000000021F5E8                 db    0
.data.rel.ro:000000000021F5E9                 db    0
.data.rel.ro:000000000021F5EA                 db    0
.data.rel.ro:000000000021F5EB                 db    0
.data.rel.ro:000000000021F5EC                 db    0
.data.rel.ro:000000000021F5ED                 db    0
.data.rel.ro:000000000021F5EE                 db    0
.data.rel.ro:000000000021F5EF                 db    0
.data.rel.ro:000000000021F5F0                 db    0
.data.rel.ro:000000000021F5F1                 db    0
.data.rel.ro:000000000021F5F2                 db    0
.data.rel.ro:000000000021F5F3                 db    0
.data.rel.ro:000000000021F5F4                 db    0
.data.rel.ro:000000000021F5F5                 db    0
.data.rel.ro:000000000021F5F6                 db    0
.data.rel.ro:000000000021F5F7                 db    0
.data.rel.ro:000000000021F5F8                 db  83h
.data.rel.ro:000000000021F5F9                 db    0
.data.rel.ro:000000000021F5FA                 db    0
.data.rel.ro:000000000021F5FB                 db    0
.data.rel.ro:000000000021F5FC                 db    0
.data.rel.ro:000000000021F5FD                 db    0
.data.rel.ro:000000000021F5FE                 db    0
.data.rel.ro:000000000021F5FF                 db    0
.data.rel.ro:000000000021F600                 dq offset aHide         ; "hide"
.data.rel.ro:000000000021F608                 db    1
.data.rel.ro:000000000021F609                 db    0
.data.rel.ro:000000000021F60A                 db    0
.data.rel.ro:000000000021F60B                 db    0
.data.rel.ro:000000000021F60C                 db    0
.data.rel.ro:000000000021F60D                 db    0
.data.rel.ro:000000000021F60E                 db    0
.data.rel.ro:000000000021F60F                 db    0
.data.rel.ro:000000000021F610                 db    0
.data.rel.ro:000000000021F611                 db    0
.data.rel.ro:000000000021F612                 db    0
.data.rel.ro:000000000021F613                 db    0
.data.rel.ro:000000000021F614                 db    0
.data.rel.ro:000000000021F615                 db    0
.data.rel.ro:000000000021F616                 db    0
.data.rel.ro:000000000021F617                 db    0
.data.rel.ro:000000000021F618                 db  88h
.data.rel.ro:000000000021F619                 db    0
.data.rel.ro:000000000021F61A                 db    0
.data.rel.ro:000000000021F61B                 db    0
.data.rel.ro:000000000021F61C                 db    0
.data.rel.ro:000000000021F61D                 db    0
.data.rel.ro:000000000021F61E                 db    0
.data.rel.ro:000000000021F61F                 db    0
.data.rel.ro:000000000021F620                 dq offset aIgnore       ; "ignore"
.data.rel.ro:000000000021F628                 db    1
.data.rel.ro:000000000021F629                 db    0
.data.rel.ro:000000000021F62A                 db    0
.data.rel.ro:000000000021F62B                 db    0
.data.rel.ro:000000000021F62C                 db    0
.data.rel.ro:000000000021F62D                 db    0
.data.rel.ro:000000000021F62E                 db    0
.data.rel.ro:000000000021F62F                 db    0
.data.rel.ro:000000000021F630                 db    0
.data.rel.ro:000000000021F631                 db    0
.data.rel.ro:000000000021F632                 db    0
.data.rel.ro:000000000021F633                 db    0
.data.rel.ro:000000000021F634                 db    0
.data.rel.ro:000000000021F635                 db    0
.data.rel.ro:000000000021F636                 db    0
.data.rel.ro:000000000021F637                 db    0
.data.rel.ro:000000000021F638                 db  49h ; I
.data.rel.ro:000000000021F639                 db    0
.data.rel.ro:000000000021F63A                 db    0
.data.rel.ro:000000000021F63B                 db    0
.data.rel.ro:000000000021F63C                 db    0
.data.rel.ro:000000000021F63D                 db    0
.data.rel.ro:000000000021F63E                 db    0
.data.rel.ro:000000000021F63F                 db    0
.data.rel.ro:000000000021F640                 dq offset aIndicatorStyle+2 ; "indicator-style"
.data.rel.ro:000000000021F648                 db    1
.data.rel.ro:000000000021F649                 db    0
.data.rel.ro:000000000021F64A                 db    0
.data.rel.ro:000000000021F64B                 db    0
.data.rel.ro:000000000021F64C                 db    0
.data.rel.ro:000000000021F64D                 db    0
.data.rel.ro:000000000021F64E                 db    0
.data.rel.ro:000000000021F64F                 db    0
.data.rel.ro:000000000021F650                 db    0
.data.rel.ro:000000000021F651                 db    0
.data.rel.ro:000000000021F652                 db    0
.data.rel.ro:000000000021F653                 db    0
.data.rel.ro:000000000021F654                 db    0
.data.rel.ro:000000000021F655                 db    0
.data.rel.ro:000000000021F656                 db    0
.data.rel.ro:000000000021F657                 db    0
.data.rel.ro:000000000021F658                 db  8Ah
.data.rel.ro:000000000021F659                 db    0
.data.rel.ro:000000000021F65A                 db    0
.data.rel.ro:000000000021F65B                 db    0
.data.rel.ro:000000000021F65C                 db    0
.data.rel.ro:000000000021F65D                 db    0
.data.rel.ro:000000000021F65E                 db    0
.data.rel.ro:000000000021F65F                 db    0
.data.rel.ro:000000000021F660                 dq offset aDereference  ; "dereference"
.data.rel.ro:000000000021F668                 db    0
.data.rel.ro:000000000021F669                 db    0
.data.rel.ro:000000000021F66A                 db    0
.data.rel.ro:000000000021F66B                 db    0
.data.rel.ro:000000000021F66C                 db    0
.data.rel.ro:000000000021F66D                 db    0
.data.rel.ro:000000000021F66E                 db    0
.data.rel.ro:000000000021F66F                 db    0
.data.rel.ro:000000000021F670                 db    0
.data.rel.ro:000000000021F671                 db    0
.data.rel.ro:000000000021F672                 db    0
.data.rel.ro:000000000021F673                 db    0
.data.rel.ro:000000000021F674                 db    0
.data.rel.ro:000000000021F675                 db    0
.data.rel.ro:000000000021F676                 db    0
.data.rel.ro:000000000021F677                 db    0
.data.rel.ro:000000000021F678                 db  4Ch ; L
.data.rel.ro:000000000021F679                 db    0
.data.rel.ro:000000000021F67A                 db    0
.data.rel.ro:000000000021F67B                 db    0
.data.rel.ro:000000000021F67C                 db    0
.data.rel.ro:000000000021F67D                 db    0
.data.rel.ro:000000000021F67E                 db    0
.data.rel.ro:000000000021F67F                 db    0
.data.rel.ro:000000000021F680                 dq offset aLiteral      ; "literal"
.data.rel.ro:000000000021F688                 db    0
.data.rel.ro:000000000021F689                 db    0
.data.rel.ro:000000000021F68A                 db    0
.data.rel.ro:000000000021F68B                 db    0
.data.rel.ro:000000000021F68C                 db    0
.data.rel.ro:000000000021F68D                 db    0
.data.rel.ro:000000000021F68E                 db    0
.data.rel.ro:000000000021F68F                 db    0
.data.rel.ro:000000000021F690                 db    0
.data.rel.ro:000000000021F691                 db    0
.data.rel.ro:000000000021F692                 db    0
.data.rel.ro:000000000021F693                 db    0
.data.rel.ro:000000000021F694                 db    0
.data.rel.ro:000000000021F695                 db    0
.data.rel.ro:000000000021F696                 db    0
.data.rel.ro:000000000021F697                 db    0
.data.rel.ro:000000000021F698                 db  4Eh ; N
.data.rel.ro:000000000021F699                 db    0
.data.rel.ro:000000000021F69A                 db    0
.data.rel.ro:000000000021F69B                 db    0
.data.rel.ro:000000000021F69C                 db    0
.data.rel.ro:000000000021F69D                 db    0
.data.rel.ro:000000000021F69E                 db    0
.data.rel.ro:000000000021F69F                 db    0
.data.rel.ro:000000000021F6A0                 dq offset aQuoteName    ; "quote-name"
.data.rel.ro:000000000021F6A8                 db    0
.data.rel.ro:000000000021F6A9                 db    0
.data.rel.ro:000000000021F6AA                 db    0
.data.rel.ro:000000000021F6AB                 db    0
.data.rel.ro:000000000021F6AC                 db    0
.data.rel.ro:000000000021F6AD                 db    0
.data.rel.ro:000000000021F6AE                 db    0
.data.rel.ro:000000000021F6AF                 db    0
.data.rel.ro:000000000021F6B0                 db    0
.data.rel.ro:000000000021F6B1                 db    0
.data.rel.ro:000000000021F6B2                 db    0
.data.rel.ro:000000000021F6B3                 db    0
.data.rel.ro:000000000021F6B4                 db    0
.data.rel.ro:000000000021F6B5                 db    0
.data.rel.ro:000000000021F6B6                 db    0
.data.rel.ro:000000000021F6B7                 db    0
.data.rel.ro:000000000021F6B8                 db  51h ; Q
.data.rel.ro:000000000021F6B9                 db    0
.data.rel.ro:000000000021F6BA                 db    0
.data.rel.ro:000000000021F6BB                 db    0
.data.rel.ro:000000000021F6BC                 db    0
.data.rel.ro:000000000021F6BD                 db    0
.data.rel.ro:000000000021F6BE                 db    0
.data.rel.ro:000000000021F6BF                 db    0
.data.rel.ro:000000000021F6C0                 dq offset aQuotingStyle_0+2 ; "quoting-style"
.data.rel.ro:000000000021F6C8                 db    1
.data.rel.ro:000000000021F6C9                 db    0
.data.rel.ro:000000000021F6CA                 db    0
.data.rel.ro:000000000021F6CB                 db    0
.data.rel.ro:000000000021F6CC                 db    0
.data.rel.ro:000000000021F6CD                 db    0
.data.rel.ro:000000000021F6CE                 db    0
.data.rel.ro:000000000021F6CF                 db    0
.data.rel.ro:000000000021F6D0                 db    0
.data.rel.ro:000000000021F6D1                 db    0
.data.rel.ro:000000000021F6D2                 db    0
.data.rel.ro:000000000021F6D3                 db    0
.data.rel.ro:000000000021F6D4                 db    0
.data.rel.ro:000000000021F6D5                 db    0
.data.rel.ro:000000000021F6D6                 db    0
.data.rel.ro:000000000021F6D7                 db    0
.data.rel.ro:000000000021F6D8                 db  8Bh
.data.rel.ro:000000000021F6D9                 db    0
.data.rel.ro:000000000021F6DA                 db    0
.data.rel.ro:000000000021F6DB                 db    0
.data.rel.ro:000000000021F6DC                 db    0
.data.rel.ro:000000000021F6DD                 db    0
.data.rel.ro:000000000021F6DE                 db    0
.data.rel.ro:000000000021F6DF                 db    0
.data.rel.ro:000000000021F6E0                 dq offset aRecursive    ; "recursive"
.data.rel.ro:000000000021F6E8                 db    0
.data.rel.ro:000000000021F6E9                 db    0
.data.rel.ro:000000000021F6EA                 db    0
.data.rel.ro:000000000021F6EB                 db    0
.data.rel.ro:000000000021F6EC                 db    0
.data.rel.ro:000000000021F6ED                 db    0
.data.rel.ro:000000000021F6EE                 db    0
.data.rel.ro:000000000021F6EF                 db    0
.data.rel.ro:000000000021F6F0                 db    0
.data.rel.ro:000000000021F6F1                 db    0
.data.rel.ro:000000000021F6F2                 db    0
.data.rel.ro:000000000021F6F3                 db    0
.data.rel.ro:000000000021F6F4                 db    0
.data.rel.ro:000000000021F6F5                 db    0
.data.rel.ro:000000000021F6F6                 db    0
.data.rel.ro:000000000021F6F7                 db    0
.data.rel.ro:000000000021F6F8                 db  52h ; R
.data.rel.ro:000000000021F6F9                 db    0
.data.rel.ro:000000000021F6FA                 db    0
.data.rel.ro:000000000021F6FB                 db    0
.data.rel.ro:000000000021F6FC                 db    0
.data.rel.ro:000000000021F6FD                 db    0
.data.rel.ro:000000000021F6FE                 db    0
.data.rel.ro:000000000021F6FF                 db    0
.data.rel.ro:000000000021F700                 dq offset aFormat+2     ; "format"
.data.rel.ro:000000000021F708                 db    1
.data.rel.ro:000000000021F709                 db    0
.data.rel.ro:000000000021F70A                 db    0
.data.rel.ro:000000000021F70B                 db    0
.data.rel.ro:000000000021F70C                 db    0
.data.rel.ro:000000000021F70D                 db    0
.data.rel.ro:000000000021F70E                 db    0
.data.rel.ro:000000000021F70F                 db    0
.data.rel.ro:000000000021F710                 db    0
.data.rel.ro:000000000021F711                 db    0
.data.rel.ro:000000000021F712                 db    0
.data.rel.ro:000000000021F713                 db    0
.data.rel.ro:000000000021F714                 db    0
.data.rel.ro:000000000021F715                 db    0
.data.rel.ro:000000000021F716                 db    0
.data.rel.ro:000000000021F717                 db    0
.data.rel.ro:000000000021F718                 db  85h
.data.rel.ro:000000000021F719                 db    0
.data.rel.ro:000000000021F71A                 db    0
.data.rel.ro:000000000021F71B                 db    0
.data.rel.ro:000000000021F71C                 db    0
.data.rel.ro:000000000021F71D                 db    0
.data.rel.ro:000000000021F71E                 db    0
.data.rel.ro:000000000021F71F                 db    0
.data.rel.ro:000000000021F720                 dq offset aShowControlCha ; "show-control-chars"
.data.rel.ro:000000000021F728                 db    0
.data.rel.ro:000000000021F729                 db    0
.data.rel.ro:000000000021F72A                 db    0
.data.rel.ro:000000000021F72B                 db    0
.data.rel.ro:000000000021F72C                 db    0
.data.rel.ro:000000000021F72D                 db    0
.data.rel.ro:000000000021F72E                 db    0
.data.rel.ro:000000000021F72F                 db    0
.data.rel.ro:000000000021F730                 db    0
.data.rel.ro:000000000021F731                 db    0
.data.rel.ro:000000000021F732                 db    0
.data.rel.ro:000000000021F733                 db    0
.data.rel.ro:000000000021F734                 db    0
.data.rel.ro:000000000021F735                 db    0
.data.rel.ro:000000000021F736                 db    0
.data.rel.ro:000000000021F737                 db    0
.data.rel.ro:000000000021F738                 db  8Ch
.data.rel.ro:000000000021F739                 db    0
.data.rel.ro:000000000021F73A                 db    0
.data.rel.ro:000000000021F73B                 db    0
.data.rel.ro:000000000021F73C                 db    0
.data.rel.ro:000000000021F73D                 db    0
.data.rel.ro:000000000021F73E                 db    0
.data.rel.ro:000000000021F73F                 db    0
.data.rel.ro:000000000021F740                 dq offset aSort+2       ; "sort"
.data.rel.ro:000000000021F748                 db    1
.data.rel.ro:000000000021F749                 db    0
.data.rel.ro:000000000021F74A                 db    0
.data.rel.ro:000000000021F74B                 db    0
.data.rel.ro:000000000021F74C                 db    0
.data.rel.ro:000000000021F74D                 db    0
.data.rel.ro:000000000021F74E                 db    0
.data.rel.ro:000000000021F74F                 db    0
.data.rel.ro:000000000021F750                 db    0
.data.rel.ro:000000000021F751                 db    0
.data.rel.ro:000000000021F752                 db    0
.data.rel.ro:000000000021F753                 db    0
.data.rel.ro:000000000021F754                 db    0
.data.rel.ro:000000000021F755                 db    0
.data.rel.ro:000000000021F756                 db    0
.data.rel.ro:000000000021F757                 db    0
.data.rel.ro:000000000021F758                 db  8Eh
.data.rel.ro:000000000021F759                 db    0
.data.rel.ro:000000000021F75A                 db    0
.data.rel.ro:000000000021F75B                 db    0
.data.rel.ro:000000000021F75C                 db    0
.data.rel.ro:000000000021F75D                 db    0
.data.rel.ro:000000000021F75E                 db    0
.data.rel.ro:000000000021F75F                 db    0
.data.rel.ro:000000000021F760                 dq offset aTabsize_0    ; "tabsize"
.data.rel.ro:000000000021F768                 db    1
.data.rel.ro:000000000021F769                 db    0
.data.rel.ro:000000000021F76A                 db    0
.data.rel.ro:000000000021F76B                 db    0
.data.rel.ro:000000000021F76C                 db    0
.data.rel.ro:000000000021F76D                 db    0
.data.rel.ro:000000000021F76E                 db    0
.data.rel.ro:000000000021F76F                 db    0
.data.rel.ro:000000000021F770                 db    0
.data.rel.ro:000000000021F771                 db    0
.data.rel.ro:000000000021F772                 db    0
.data.rel.ro:000000000021F773                 db    0
.data.rel.ro:000000000021F774                 db    0
.data.rel.ro:000000000021F775                 db    0
.data.rel.ro:000000000021F776                 db    0
.data.rel.ro:000000000021F777                 db    0
.data.rel.ro:000000000021F778                 db  54h ; T
.data.rel.ro:000000000021F779                 db    0
.data.rel.ro:000000000021F77A                 db    0
.data.rel.ro:000000000021F77B                 db    0
.data.rel.ro:000000000021F77C                 db    0
.data.rel.ro:000000000021F77D                 db    0
.data.rel.ro:000000000021F77E                 db    0
.data.rel.ro:000000000021F77F                 db    0
.data.rel.ro:000000000021F780                 dq offset aTime+2       ; "time"
.data.rel.ro:000000000021F788                 db    1
.data.rel.ro:000000000021F789                 db    0
.data.rel.ro:000000000021F78A                 db    0
.data.rel.ro:000000000021F78B                 db    0
.data.rel.ro:000000000021F78C                 db    0
.data.rel.ro:000000000021F78D                 db    0
.data.rel.ro:000000000021F78E                 db    0
.data.rel.ro:000000000021F78F                 db    0
.data.rel.ro:000000000021F790                 db    0
.data.rel.ro:000000000021F791                 db    0
.data.rel.ro:000000000021F792                 db    0
.data.rel.ro:000000000021F793                 db    0
.data.rel.ro:000000000021F794                 db    0
.data.rel.ro:000000000021F795                 db    0
.data.rel.ro:000000000021F796                 db    0
.data.rel.ro:000000000021F797                 db    0
.data.rel.ro:000000000021F798                 db  8Fh
.data.rel.ro:000000000021F799                 db    0
.data.rel.ro:000000000021F79A                 db    0
.data.rel.ro:000000000021F79B                 db    0
.data.rel.ro:000000000021F79C                 db    0
.data.rel.ro:000000000021F79D                 db    0
.data.rel.ro:000000000021F79E                 db    0
.data.rel.ro:000000000021F79F                 db    0
.data.rel.ro:000000000021F7A0                 dq offset aTimeStyle_1  ; "time-style"
.data.rel.ro:000000000021F7A8                 db    1
.data.rel.ro:000000000021F7A9                 db    0
.data.rel.ro:000000000021F7AA                 db    0
.data.rel.ro:000000000021F7AB                 db    0
.data.rel.ro:000000000021F7AC                 db    0
.data.rel.ro:000000000021F7AD                 db    0
.data.rel.ro:000000000021F7AE                 db    0
.data.rel.ro:000000000021F7AF                 db    0
.data.rel.ro:000000000021F7B0                 db    0
.data.rel.ro:000000000021F7B1                 db    0
.data.rel.ro:000000000021F7B2                 db    0
.data.rel.ro:000000000021F7B3                 db    0
.data.rel.ro:000000000021F7B4                 db    0
.data.rel.ro:000000000021F7B5                 db    0
.data.rel.ro:000000000021F7B6                 db    0
.data.rel.ro:000000000021F7B7                 db    0
.data.rel.ro:000000000021F7B8                 db  90h
.data.rel.ro:000000000021F7B9                 db    0
.data.rel.ro:000000000021F7BA                 db    0
.data.rel.ro:000000000021F7BB                 db    0
.data.rel.ro:000000000021F7BC                 db    0
.data.rel.ro:000000000021F7BD                 db    0
.data.rel.ro:000000000021F7BE                 db    0
.data.rel.ro:000000000021F7BF                 db    0
.data.rel.ro:000000000021F7C0                 dq offset aColor+2      ; "color"
.data.rel.ro:000000000021F7C8                 db    2
.data.rel.ro:000000000021F7C9                 db    0
.data.rel.ro:000000000021F7CA                 db    0
.data.rel.ro:000000000021F7CB                 db    0
.data.rel.ro:000000000021F7CC                 db    0
.data.rel.ro:000000000021F7CD                 db    0
.data.rel.ro:000000000021F7CE                 db    0
.data.rel.ro:000000000021F7CF                 db    0
.data.rel.ro:000000000021F7D0                 db    0
.data.rel.ro:000000000021F7D1                 db    0
.data.rel.ro:000000000021F7D2                 db    0
.data.rel.ro:000000000021F7D3                 db    0
.data.rel.ro:000000000021F7D4                 db    0
.data.rel.ro:000000000021F7D5                 db    0
.data.rel.ro:000000000021F7D6                 db    0
.data.rel.ro:000000000021F7D7                 db    0
.data.rel.ro:000000000021F7D8                 db  82h
.data.rel.ro:000000000021F7D9                 db    0
.data.rel.ro:000000000021F7DA                 db    0
.data.rel.ro:000000000021F7DB                 db    0
.data.rel.ro:000000000021F7DC                 db    0
.data.rel.ro:000000000021F7DD                 db    0
.data.rel.ro:000000000021F7DE                 db    0
.data.rel.ro:000000000021F7DF                 db    0
.data.rel.ro:000000000021F7E0                 dq offset aHyperlink+2  ; "hyperlink"
.data.rel.ro:000000000021F7E8                 db    2
.data.rel.ro:000000000021F7E9                 db    0
.data.rel.ro:000000000021F7EA                 db    0
.data.rel.ro:000000000021F7EB                 db    0
.data.rel.ro:000000000021F7EC                 db    0
.data.rel.ro:000000000021F7ED                 db    0
.data.rel.ro:000000000021F7EE                 db    0
.data.rel.ro:000000000021F7EF                 db    0
.data.rel.ro:000000000021F7F0                 db    0
.data.rel.ro:000000000021F7F1                 db    0
.data.rel.ro:000000000021F7F2                 db    0
.data.rel.ro:000000000021F7F3                 db    0
.data.rel.ro:000000000021F7F4                 db    0
.data.rel.ro:000000000021F7F5                 db    0
.data.rel.ro:000000000021F7F6                 db    0
.data.rel.ro:000000000021F7F7                 db    0
.data.rel.ro:000000000021F7F8                 db  89h
.data.rel.ro:000000000021F7F9                 db    0
.data.rel.ro:000000000021F7FA                 db    0
.data.rel.ro:000000000021F7FB                 db    0
.data.rel.ro:000000000021F7FC                 db    0
.data.rel.ro:000000000021F7FD                 db    0
.data.rel.ro:000000000021F7FE                 db    0
.data.rel.ro:000000000021F7FF                 db    0
.data.rel.ro:000000000021F800                 dq offset aBlockSize    ; "block-size"
.data.rel.ro:000000000021F808                 db    1
.data.rel.ro:000000000021F809                 db    0
.data.rel.ro:000000000021F80A                 db    0
.data.rel.ro:000000000021F80B                 db    0
.data.rel.ro:000000000021F80C                 db    0
.data.rel.ro:000000000021F80D                 db    0
.data.rel.ro:000000000021F80E                 db    0
.data.rel.ro:000000000021F80F                 db    0
.data.rel.ro:000000000021F810                 db    0
.data.rel.ro:000000000021F811                 db    0
.data.rel.ro:000000000021F812                 db    0
.data.rel.ro:000000000021F813                 db    0
.data.rel.ro:000000000021F814                 db    0
.data.rel.ro:000000000021F815                 db    0
.data.rel.ro:000000000021F816                 db    0
.data.rel.ro:000000000021F817                 db    0
.data.rel.ro:000000000021F818                 db  81h
.data.rel.ro:000000000021F819                 db    0
.data.rel.ro:000000000021F81A                 db    0
.data.rel.ro:000000000021F81B                 db    0
.data.rel.ro:000000000021F81C                 db    0
.data.rel.ro:000000000021F81D                 db    0
.data.rel.ro:000000000021F81E                 db    0
.data.rel.ro:000000000021F81F                 db    0
.data.rel.ro:000000000021F820                 dq offset aContext      ; "context"
.data.rel.ro:000000000021F828                 db    0
.data.rel.ro:000000000021F829                 db    0
.data.rel.ro:000000000021F82A                 db    0
.data.rel.ro:000000000021F82B                 db    0
.data.rel.ro:000000000021F82C                 db    0
.data.rel.ro:000000000021F82D                 db    0
.data.rel.ro:000000000021F82E                 db    0
.data.rel.ro:000000000021F82F                 db    0
.data.rel.ro:000000000021F830                 db    0
.data.rel.ro:000000000021F831                 db    0
.data.rel.ro:000000000021F832                 db    0
.data.rel.ro:000000000021F833                 db    0
.data.rel.ro:000000000021F834                 db    0
.data.rel.ro:000000000021F835                 db    0
.data.rel.ro:000000000021F836                 db    0
.data.rel.ro:000000000021F837                 db    0
.data.rel.ro:000000000021F838                 db  5Ah ; Z
.data.rel.ro:000000000021F839                 db    0
.data.rel.ro:000000000021F83A                 db    0
.data.rel.ro:000000000021F83B                 db    0
.data.rel.ro:000000000021F83C                 db    0
.data.rel.ro:000000000021F83D                 db    0
.data.rel.ro:000000000021F83E                 db    0
.data.rel.ro:000000000021F83F                 db    0
.data.rel.ro:000000000021F840                 dq offset aAuthor       ; "author"
.data.rel.ro:000000000021F848                 db    0
.data.rel.ro:000000000021F849                 db    0
.data.rel.ro:000000000021F84A                 db    0
.data.rel.ro:000000000021F84B                 db    0
.data.rel.ro:000000000021F84C                 db    0
.data.rel.ro:000000000021F84D                 db    0
.data.rel.ro:000000000021F84E                 db    0
.data.rel.ro:000000000021F84F                 db    0
.data.rel.ro:000000000021F850                 db    0
.data.rel.ro:000000000021F851                 db    0
.data.rel.ro:000000000021F852                 db    0
.data.rel.ro:000000000021F853                 db    0
.data.rel.ro:000000000021F854                 db    0
.data.rel.ro:000000000021F855                 db    0
.data.rel.ro:000000000021F856                 db    0
.data.rel.ro:000000000021F857                 db    0
.data.rel.ro:000000000021F858                 db  80h
.data.rel.ro:000000000021F859                 db    0
.data.rel.ro:000000000021F85A                 db    0
.data.rel.ro:000000000021F85B                 db    0
.data.rel.ro:000000000021F85C                 db    0
.data.rel.ro:000000000021F85D                 db    0
.data.rel.ro:000000000021F85E                 db    0
.data.rel.ro:000000000021F85F                 db    0
.data.rel.ro:000000000021F860                 dq offset aHelp         ; "help"
.data.rel.ro:000000000021F868                 db    0
.data.rel.ro:000000000021F869                 db    0
.data.rel.ro:000000000021F86A                 db    0
.data.rel.ro:000000000021F86B                 db    0
.data.rel.ro:000000000021F86C                 db    0
.data.rel.ro:000000000021F86D                 db    0
.data.rel.ro:000000000021F86E                 db    0
.data.rel.ro:000000000021F86F                 db    0
.data.rel.ro:000000000021F870                 db    0
.data.rel.ro:000000000021F871                 db    0
.data.rel.ro:000000000021F872                 db    0
.data.rel.ro:000000000021F873                 db    0
.data.rel.ro:000000000021F874                 db    0
.data.rel.ro:000000000021F875                 db    0
.data.rel.ro:000000000021F876                 db    0
.data.rel.ro:000000000021F877                 db    0
.data.rel.ro:000000000021F878                 db  7Eh ; ~
.data.rel.ro:000000000021F879                 db 0FFh
.data.rel.ro:000000000021F87A                 db 0FFh
.data.rel.ro:000000000021F87B                 db 0FFh
.data.rel.ro:000000000021F87C                 db    0
.data.rel.ro:000000000021F87D                 db    0
.data.rel.ro:000000000021F87E                 db    0
.data.rel.ro:000000000021F87F                 db    0
.data.rel.ro:000000000021F880                 dq offset aSortTypeSortVe+12h ; "version"
.data.rel.ro:000000000021F888                 db    0
.data.rel.ro:000000000021F889                 db    0
.data.rel.ro:000000000021F88A                 db    0
.data.rel.ro:000000000021F88B                 db    0
.data.rel.ro:000000000021F88C                 db    0
.data.rel.ro:000000000021F88D                 db    0
.data.rel.ro:000000000021F88E                 db    0
.data.rel.ro:000000000021F88F                 db    0
.data.rel.ro:000000000021F890                 db    0
.data.rel.ro:000000000021F891                 db    0
.data.rel.ro:000000000021F892                 db    0
.data.rel.ro:000000000021F893                 db    0
.data.rel.ro:000000000021F894                 db    0
.data.rel.ro:000000000021F895                 db    0
.data.rel.ro:000000000021F896                 db    0
.data.rel.ro:000000000021F897                 db    0
.data.rel.ro:000000000021F898                 db  7Dh ; }
.data.rel.ro:000000000021F899                 db 0FFh
.data.rel.ro:000000000021F89A                 db 0FFh
.data.rel.ro:000000000021F89B                 db 0FFh
.data.rel.ro:000000000021F89C                 db    0
.data.rel.ro:000000000021F89D                 db    0
.data.rel.ro:000000000021F89E                 db    0
.data.rel.ro:000000000021F89F                 db    0
.data.rel.ro:000000000021F8A0                 db    0
.data.rel.ro:000000000021F8A1                 db    0
.data.rel.ro:000000000021F8A2                 db    0
.data.rel.ro:000000000021F8A3                 db    0
.data.rel.ro:000000000021F8A4                 db    0
.data.rel.ro:000000000021F8A5                 db    0
.data.rel.ro:000000000021F8A6                 db    0
.data.rel.ro:000000000021F8A7                 db    0
.data.rel.ro:000000000021F8A8                 db    0
.data.rel.ro:000000000021F8A9                 db    0
.data.rel.ro:000000000021F8AA                 db    0
.data.rel.ro:000000000021F8AB                 db    0
.data.rel.ro:000000000021F8AC                 db    0
.data.rel.ro:000000000021F8AD                 db    0
.data.rel.ro:000000000021F8AE                 db    0
.data.rel.ro:000000000021F8AF                 db    0
.data.rel.ro:000000000021F8B0                 db    0
.data.rel.ro:000000000021F8B1                 db    0
.data.rel.ro:000000000021F8B2                 db    0
.data.rel.ro:000000000021F8B3                 db    0
.data.rel.ro:000000000021F8B4                 db    0
.data.rel.ro:000000000021F8B5                 db    0
.data.rel.ro:000000000021F8B6                 db    0
.data.rel.ro:000000000021F8B7                 db    0
.data.rel.ro:000000000021F8B8                 db    0
.data.rel.ro:000000000021F8B9                 db    0
.data.rel.ro:000000000021F8BA                 db    0
.data.rel.ro:000000000021F8BB                 db    0
.data.rel.ro:000000000021F8BC                 db    0
.data.rel.ro:000000000021F8BD                 db    0
.data.rel.ro:000000000021F8BE                 db    0
.data.rel.ro:000000000021F8BF                 db    0
.data.rel.ro:000000000021F8C0 indicator_name  dq offset aLc           ; DATA XREF: main+155B↑o
.data.rel.ro:000000000021F8C0                                         ; "lc"
.data.rel.ro:000000000021F8C8                 dq offset aRc           ; "rc"
.data.rel.ro:000000000021F8D0                 dq offset aEc           ; "ec"
.data.rel.ro:000000000021F8D8                 dq offset aHideControlCha+10h ; "rs"
.data.rel.ro:000000000021F8E0                 dq offset aNo           ; "no"
.data.rel.ro:000000000021F8E8                 dq offset aFi           ; "fi"
.data.rel.ro:000000000021F8F0                 dq offset aDi           ; "di"
.data.rel.ro:000000000021F8F8                 dq offset aLn           ; "ln"
.data.rel.ro:000000000021F900                 dq offset aPi           ; "pi"
.data.rel.ro:000000000021F908                 dq offset aLongIso+6    ; "so"
.data.rel.ro:000000000021F910                 dq offset aBd           ; "bd"
.data.rel.ro:000000000021F918                 dq offset aCd           ; "cd"
.data.rel.ro:000000000021F920                 dq offset aMi           ; "mi"
.data.rel.ro:000000000021F928                 dq offset aAuthor+4     ; "or"
.data.rel.ro:000000000021F930                 dq offset aEx           ; "ex"
.data.rel.ro:000000000021F938                 dq offset aDo           ; "do"
.data.rel.ro:000000000021F940                 dq offset aSu           ; "su"
.data.rel.ro:000000000021F948                 dq offset aSg           ; "sg"
.data.rel.ro:000000000021F950                 dq offset aGroupDirectori_0+15h ; "st"
.data.rel.ro:000000000021F958                 dq offset aOw           ; "ow"
.data.rel.ro:000000000021F960                 dq offset aTw           ; "tw"
.data.rel.ro:000000000021F968                 dq offset aCa           ; "ca"
.data.rel.ro:000000000021F970                 dq offset aMh           ; "mh"
.data.rel.ro:000000000021F978                 dq offset aCl           ; "cl"
.data.rel.ro:000000000021F980                 db    0
.data.rel.ro:000000000021F981                 db    0
.data.rel.ro:000000000021F982                 db    0
.data.rel.ro:000000000021F983                 db    0
.data.rel.ro:000000000021F984                 db    0
.data.rel.ro:000000000021F985                 db    0
.data.rel.ro:000000000021F986                 db    0
.data.rel.ro:000000000021F987                 db    0
.data.rel.ro:000000000021F988                 db    0
.data.rel.ro:000000000021F989                 db    0
.data.rel.ro:000000000021F98A                 db    0
.data.rel.ro:000000000021F98B                 db    0
.data.rel.ro:000000000021F98C                 db    0
.data.rel.ro:000000000021F98D                 db    0
.data.rel.ro:000000000021F98E                 db    0
.data.rel.ro:000000000021F98F                 db    0
.data.rel.ro:000000000021F990                 db    0
.data.rel.ro:000000000021F991                 db    0
.data.rel.ro:000000000021F992                 db    0
.data.rel.ro:000000000021F993                 db    0
.data.rel.ro:000000000021F994                 db    0
.data.rel.ro:000000000021F995                 db    0
.data.rel.ro:000000000021F996                 db    0
.data.rel.ro:000000000021F997                 db    0
.data.rel.ro:000000000021F998                 db    0
.data.rel.ro:000000000021F999                 db    0
.data.rel.ro:000000000021F99A                 db    0
.data.rel.ro:000000000021F99B                 db    0
.data.rel.ro:000000000021F99C                 db    0
.data.rel.ro:000000000021F99D                 db    0
.data.rel.ro:000000000021F99E                 db    0
.data.rel.ro:000000000021F99F                 db    0
.data.rel.ro:000000000021F9A0 indicator_style_args dq offset aNone    ; DATA XREF: main+6D0↑o
.data.rel.ro:000000000021F9A0                                         ; "none"
.data.rel.ro:000000000021F9A8                 dq offset aSlash        ; "slash"
.data.rel.ro:000000000021F9B0                 dq offset aFileType     ; "file-type"
.data.rel.ro:000000000021F9B8                 dq offset aClassify     ; "classify"
.data.rel.ro:000000000021F9C0                 db    0
.data.rel.ro:000000000021F9C1                 db    0
.data.rel.ro:000000000021F9C2                 db    0
.data.rel.ro:000000000021F9C3                 db    0
.data.rel.ro:000000000021F9C4                 db    0
.data.rel.ro:000000000021F9C5                 db    0
.data.rel.ro:000000000021F9C6                 db    0
.data.rel.ro:000000000021F9C7                 db    0
.data.rel.ro:000000000021F9C8                 db    0
.data.rel.ro:000000000021F9C9                 db    0
.data.rel.ro:000000000021F9CA                 db    0
.data.rel.ro:000000000021F9CB                 db    0
.data.rel.ro:000000000021F9CC                 db    0
.data.rel.ro:000000000021F9CD                 db    0
.data.rel.ro:000000000021F9CE                 db    0
.data.rel.ro:000000000021F9CF                 db    0
.data.rel.ro:000000000021F9D0                 db    0
.data.rel.ro:000000000021F9D1                 db    0
.data.rel.ro:000000000021F9D2                 db    0
.data.rel.ro:000000000021F9D3                 db    0
.data.rel.ro:000000000021F9D4                 db    0
.data.rel.ro:000000000021F9D5                 db    0
.data.rel.ro:000000000021F9D6                 db    0
.data.rel.ro:000000000021F9D7                 db    0
.data.rel.ro:000000000021F9D8                 db    0
.data.rel.ro:000000000021F9D9                 db    0
.data.rel.ro:000000000021F9DA                 db    0
.data.rel.ro:000000000021F9DB                 db    0
.data.rel.ro:000000000021F9DC                 db    0
.data.rel.ro:000000000021F9DD                 db    0
.data.rel.ro:000000000021F9DE                 db    0
.data.rel.ro:000000000021F9DF                 db    0
.data.rel.ro:000000000021F9E0 time_style_args dq offset aFullIso      ; DATA XREF: main+13D2↑o
.data.rel.ro:000000000021F9E0                                         ; main+17BD↑o
.data.rel.ro:000000000021F9E0                                         ; "full-iso"
.data.rel.ro:000000000021F9E8                 dq offset aLongIso      ; "long-iso"
.data.rel.ro:000000000021F9F0                 dq offset aLongIso+5    ; "iso"
.data.rel.ro:000000000021F9F8                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021FA00                 db    0
.data.rel.ro:000000000021FA01                 db    0
.data.rel.ro:000000000021FA02                 db    0
.data.rel.ro:000000000021FA03                 db    0
.data.rel.ro:000000000021FA04                 db    0
.data.rel.ro:000000000021FA05                 db    0
.data.rel.ro:000000000021FA06                 db    0
.data.rel.ro:000000000021FA07                 db    0
.data.rel.ro:000000000021FA08                 db    0
.data.rel.ro:000000000021FA09                 db    0
.data.rel.ro:000000000021FA0A                 db    0
.data.rel.ro:000000000021FA0B                 db    0
.data.rel.ro:000000000021FA0C                 db    0
.data.rel.ro:000000000021FA0D                 db    0
.data.rel.ro:000000000021FA0E                 db    0
.data.rel.ro:000000000021FA0F                 db    0
.data.rel.ro:000000000021FA10 block_size_args dq offset aHumanReadable
.data.rel.ro:000000000021FA10                                         ; DATA XREF: human_options+43↑o
.data.rel.ro:000000000021FA10                                         ; "human-readable"
.data.rel.ro:000000000021FA18                 dq offset aSi           ; "si"
.data.rel.ro:000000000021FA20                 align 40h
.data.rel.ro:000000000021FA40                 public quoting_style_args
.data.rel.ro:000000000021FA40 quoting_style_args dq offset aLiteral   ; DATA XREF: main+17C↑o
.data.rel.ro:000000000021FA40                                         ; main+693↑o ...
.data.rel.ro:000000000021FA40                                         ; "literal"
.data.rel.ro:000000000021FA48                 dq offset aShell        ; "shell"
.data.rel.ro:000000000021FA50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000021FA58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000021FA60                 dq offset unk_1A33F
.data.rel.ro:000000000021FA68                 dq offset file+19h      ; "c"
.data.rel.ro:000000000021FA70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000021FA78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021FA80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021FA88                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000021FA90                 db    0
.data.rel.ro:000000000021FA91                 db    0
.data.rel.ro:000000000021FA92                 db    0
.data.rel.ro:000000000021FA93                 db    0
.data.rel.ro:000000000021FA94                 db    0
.data.rel.ro:000000000021FA95                 db    0
.data.rel.ro:000000000021FA96                 db    0
.data.rel.ro:000000000021FA97                 db    0
.data.rel.ro:000000000021FA97 _data_rel_ro    ends
.data.rel.ro:000000000021FA97
LOAD:000000000021FA98 ; ELF Dynamic Information
LOAD:000000000021FA98 ; ===========================================================================
LOAD:000000000021FA98
LOAD:000000000021FA98 ; Segment type: Pure data
LOAD:000000000021FA98 ; Segment permissions: Read/Write
LOAD:000000000021FA98 LOAD            segment byte public 'DATA' use64
LOAD:000000000021FA98                 assume cs:LOAD
LOAD:000000000021FA98                 ;org 21FA98h
LOAD:000000000021FA98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000021FA98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000021FA98                                         ; DT_NEEDED libc.so.6
LOAD:000000000021FAA8                 Elf64_Dyn <0Ch, 3210h>  ; DT_INIT
LOAD:000000000021FAB8                 Elf64_Dyn <0Dh, 15F50h> ; DT_FINI
LOAD:000000000021FAC8                 Elf64_Dyn <19h, 21F050h> ; DT_INIT_ARRAY
LOAD:000000000021FAD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000021FAE8                 Elf64_Dyn <1Ah, 21F058h> ; DT_FINI_ARRAY
LOAD:000000000021FAF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000021FB08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000021FB18                 Elf64_Dyn <5, 0E88h>    ; DT_STRTAB
LOAD:000000000021FB28                 Elf64_Dyn <6, 300h>     ; DT_SYMTAB
LOAD:000000000021FB38                 Elf64_Dyn <0Ah, 56Eh>   ; DT_STRSZ
LOAD:000000000021FB48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000021FB58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000021FB68                 Elf64_Dyn <3, 21FC88h>  ; DT_PLTGOT
LOAD:000000000021FB78                 Elf64_Dyn <2, 960h>     ; DT_PLTRELSZ
LOAD:000000000021FB88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000021FB98                 Elf64_Dyn <17h, 28B0h>  ; DT_JMPREL
LOAD:000000000021FBA8                 Elf64_Dyn <7, 1560h>    ; DT_RELA
LOAD:000000000021FBB8                 Elf64_Dyn <8, 1350h>    ; DT_RELASZ
LOAD:000000000021FBC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000021FBD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000021FBE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000021FBF8                 Elf64_Dyn <6FFFFFFEh, 14F0h> ; DT_VERNEED
LOAD:000000000021FC08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000021FC18                 Elf64_Dyn <6FFFFFF0h, 13F6h> ; DT_VERSYM
LOAD:000000000021FC28                 Elf64_Dyn <6FFFFFF9h, 0C1h> ; DT_RELACOUNT
LOAD:000000000021FC38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000021FC48                 db    0
LOAD:000000000021FC49                 db    0
LOAD:000000000021FC4A                 db    0
LOAD:000000000021FC4B                 db    0
LOAD:000000000021FC4C                 db    0
LOAD:000000000021FC4D                 db    0
LOAD:000000000021FC4E                 db    0
LOAD:000000000021FC4F                 db    0
LOAD:000000000021FC50                 db    0
LOAD:000000000021FC51                 db    0
LOAD:000000000021FC52                 db    0
LOAD:000000000021FC53                 db    0
LOAD:000000000021FC54                 db    0
LOAD:000000000021FC55                 db    0
LOAD:000000000021FC56                 db    0
LOAD:000000000021FC57                 db    0
LOAD:000000000021FC58                 db    0
LOAD:000000000021FC59                 db    0
LOAD:000000000021FC5A                 db    0
LOAD:000000000021FC5B                 db    0
LOAD:000000000021FC5C                 db    0
LOAD:000000000021FC5D                 db    0
LOAD:000000000021FC5E                 db    0
LOAD:000000000021FC5F                 db    0
LOAD:000000000021FC60                 db    0
LOAD:000000000021FC61                 db    0
LOAD:000000000021FC62                 db    0
LOAD:000000000021FC63                 db    0
LOAD:000000000021FC64                 db    0
LOAD:000000000021FC65                 db    0
LOAD:000000000021FC66                 db    0
LOAD:000000000021FC67                 db    0
LOAD:000000000021FC68                 db    0
LOAD:000000000021FC69                 db    0
LOAD:000000000021FC6A                 db    0
LOAD:000000000021FC6B                 db    0
LOAD:000000000021FC6C                 db    0
LOAD:000000000021FC6D                 db    0
LOAD:000000000021FC6E                 db    0
LOAD:000000000021FC6F                 db    0
LOAD:000000000021FC70                 db    0
LOAD:000000000021FC71                 db    0
LOAD:000000000021FC72                 db    0
LOAD:000000000021FC73                 db    0
LOAD:000000000021FC74                 db    0
LOAD:000000000021FC75                 db    0
LOAD:000000000021FC76                 db    0
LOAD:000000000021FC77                 db    0
LOAD:000000000021FC78                 db    0
LOAD:000000000021FC79                 db    0
LOAD:000000000021FC7A                 db    0
LOAD:000000000021FC7B                 db    0
LOAD:000000000021FC7C                 db    0
LOAD:000000000021FC7D                 db    0
LOAD:000000000021FC7E                 db    0
LOAD:000000000021FC7F                 db    0
LOAD:000000000021FC80                 db    0
LOAD:000000000021FC81                 db    0
LOAD:000000000021FC82                 db    0
LOAD:000000000021FC83                 db    0
LOAD:000000000021FC84                 db    0
LOAD:000000000021FC85                 db    0
LOAD:000000000021FC86                 db    0
LOAD:000000000021FC87                 db    0
LOAD:000000000021FC87 LOAD            ends
LOAD:000000000021FC87
.got:000000000021FC88 ; ===========================================================================
.got:000000000021FC88
.got:000000000021FC88 ; Segment type: Pure data
.got:000000000021FC88 ; Segment permissions: Read/Write
.got:000000000021FC88 _got            segment qword public 'DATA' use64
.got:000000000021FC88                 assume cs:_got
.got:000000000021FC88                 ;org 21FC88h
.got:000000000021FC88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000021FC90 qword_21FC90    dq 0                    ; DATA XREF: sub_3230↑r
.got:000000000021FC98 qword_21FC98    dq 0                    ; DATA XREF: sub_3230+6↑r
.got:000000000021FCA0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:000000000021FCA0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:000000000021FCA8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000021FCB0 sigprocmask_ptr dq offset sigprocmask   ; DATA XREF: _sigprocmask↑r
.got:000000000021FCB8 __snprintf_chk_ptr dq offset __snprintf_chk
.got:000000000021FCB8                                         ; DATA XREF: ___snprintf_chk↑r
.got:000000000021FCC0 raise_ptr       dq offset raise         ; DATA XREF: _raise↑r
.got:000000000021FCC8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000021FCD0 __errno_location_ptr dq offset __errno_location
.got:000000000021FCD0                                         ; DATA XREF: ___errno_location↑r
.got:000000000021FCD8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000021FCE0 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:000000000021FCE8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000021FCF0 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000021FCF8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000021FD00 isatty_ptr      dq offset isatty        ; DATA XREF: _isatty↑r
.got:000000000021FD08 sigaction_ptr   dq offset sigaction     ; DATA XREF: _sigaction↑r
.got:000000000021FD10 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:000000000021FD18 wcswidth_ptr    dq offset wcswidth      ; DATA XREF: _wcswidth↑r
.got:000000000021FD20 localeconv_ptr  dq offset localeconv    ; DATA XREF: _localeconv↑r
.got:000000000021FD28 mbstowcs_ptr    dq offset mbstowcs      ; DATA XREF: _mbstowcs↑r
.got:000000000021FD30 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:000000000021FD38 clock_gettime_ptr dq offset clock_gettime
.got:000000000021FD38                                         ; DATA XREF: _clock_gettime↑r
.got:000000000021FD40 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:000000000021FD48 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000021FD50 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000021FD58 opendir_ptr     dq offset opendir       ; DATA XREF: _opendir↑r
.got:000000000021FD60 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:000000000021FD68 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000021FD68                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000021FD70 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000021FD78 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000021FD78                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000021FD80 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000021FD88 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000021FD90 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000021FD90                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000021FD98 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000021FDA0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000021FDA8 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000021FDB0 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:000000000021FDB8 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000021FDC0 snprintf_ptr    dq offset snprintf      ; DATA XREF: _snprintf↑r
.got:000000000021FDC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000021FDD0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000021FDD8 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:000000000021FDE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000021FDE8 __assert_fail_ptr dq offset __assert_fail
.got:000000000021FDE8                                         ; DATA XREF: ___assert_fail↑r
.got:000000000021FDF0 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000021FDF0                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000021FDF8 fnmatch_ptr     dq offset fnmatch       ; DATA XREF: _fnmatch↑r
.got:000000000021FE00 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000021FE08 ioctl_ptr       dq offset ioctl         ; DATA XREF: _ioctl↑r
.got:000000000021FE10 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:000000000021FE18 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000021FE20 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000021FE28 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000021FE30 _setjmp_ptr     dq offset _setjmp       ; DATA XREF: __setjmp↑r
.got:000000000021FE38 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000021FE38                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000021FE40 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000021FE48 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000021FE50 signal_ptr      dq offset signal        ; DATA XREF: _signal↑r
.got:000000000021FE58 dirfd_ptr       dq offset dirfd         ; DATA XREF: _dirfd↑r
.got:000000000021FE60 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:000000000021FE68 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:000000000021FE70 sigemptyset_ptr dq offset sigemptyset   ; DATA XREF: _sigemptyset↑r
.got:000000000021FE78 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000021FE80 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:000000000021FE88 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:000000000021FE90 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000021FE98 tcgetpgrp_ptr   dq offset tcgetpgrp     ; DATA XREF: _tcgetpgrp↑r
.got:000000000021FEA0 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000021FEA8 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000021FEB0 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:000000000021FEB8 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000021FEC0 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000021FEC8 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:000000000021FED0 strcoll_ptr     dq offset strcoll       ; DATA XREF: _strcoll↑r
.got:000000000021FED8 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:000000000021FEE0 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000021FEE8 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000021FEE8                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000021FEF0 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000021FEF8 stpncpy_ptr     dq offset stpncpy       ; DATA XREF: _stpncpy↑r
.got:000000000021FF00 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000021FF08 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000021FF10 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:000000000021FF18 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:000000000021FF20 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000021FF28 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000021FF30 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000021FF38 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000021FF40 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:000000000021FF48 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000021FF50 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000021FF58 wcstombs_ptr    dq offset wcstombs      ; DATA XREF: _wcstombs↑r
.got:000000000021FF60 gethostname_ptr dq offset gethostname   ; DATA XREF: _gethostname↑r
.got:000000000021FF68 sigismember_ptr dq offset sigismember   ; DATA XREF: _sigismember↑r
.got:000000000021FF70 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000021FF78 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000021FF80 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000021FF80                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000021FF88 fflush_unlocked_ptr dq offset fflush_unlocked
.got:000000000021FF88                                         ; DATA XREF: _fflush_unlocked↑r
.got:000000000021FF90 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000021FF98 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000021FFA0 sigaddset_ptr   dq offset sigaddset     ; DATA XREF: _sigaddset↑r
.got:000000000021FFA8 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:000000000021FFA8                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:000000000021FFB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000021FFB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000021FFB8 __sprintf_chk_ptr dq offset __sprintf_chk
.got:000000000021FFB8                                         ; DATA XREF: ___sprintf_chk↑r
.got:000000000021FFC0 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:000000000021FFC0                                         ; main+C0D↑r ...
.got:000000000021FFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000021FFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000021FFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000021FFD0                                         ; DATA XREF: start+24↑r
.got:000000000021FFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000021FFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000021FFE0 malloc_ptr      dq offset __imp_malloc  ; DATA XREF: malloc↑r
.got:000000000021FFE0                                         ; main+C14↑r ...
.got:000000000021FFE8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000021FFE8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000021FFF0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000021FFF0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000021FFF0                                         ; __do_global_dtors_aux+9↑r
.got:000000000021FFF0 _got            ends
.got:000000000021FFF0
LOAD:000000000021FFF8 ; ===========================================================================
LOAD:000000000021FFF8
LOAD:000000000021FFF8 ; Segment type: Pure data
LOAD:000000000021FFF8 ; Segment permissions: Read/Write
LOAD:000000000021FFF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021FFF8                 assume cs:LOAD
LOAD:000000000021FFF8                 ;org 21FFF8h
LOAD:000000000021FFF8                 align 20h
LOAD:000000000021FFF8 LOAD            ends
LOAD:000000000021FFF8
.data:0000000000220000 ; ===========================================================================
.data:0000000000220000
.data:0000000000220000 ; Segment type: Pure data
.data:0000000000220000 ; Segment permissions: Read/Write
.data:0000000000220000 _data           segment align_32 public 'DATA' use64
.data:0000000000220000                 assume cs:_data
.data:0000000000220000                 ;org 220000h
.data:0000000000220000                 public __data_start ; weak
.data:0000000000220000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000220000                                         ; data_start
.data:0000000000220001                 db    0
.data:0000000000220002                 db    0
.data:0000000000220003                 db    0
.data:0000000000220004                 db    0
.data:0000000000220005                 db    0
.data:0000000000220006                 db    0
.data:0000000000220007                 db    0
.data:0000000000220008                 public __dso_handle
.data:0000000000220008 ; void *_dso_handle
.data:0000000000220008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000220008                                         ; atexit↑r ...
.data:0000000000220010 first_10256     db 1                    ; DATA XREF: print_dir:loc_A680↑r
.data:0000000000220010                                         ; print_dir+2C8↑w
.data:0000000000220011                 align 4
.data:0000000000220014 width_10774     dd 0FFFFFFFFh           ; DATA XREF: print_long_format:loc_81BA↑r
.data:0000000000220014                                         ; print_long_format:loc_87DE↑r ...
.data:0000000000220018 file_output_block_size dq 1             ; DATA XREF: main+2F0↑w
.data:0000000000220018                                         ; main+662↑w ...
.data:0000000000220020 print_group     db 1                    ; DATA XREF: main:loc_3D3C↑w
.data:0000000000220020                                         ; main+910↑w ...
.data:0000000000220021 print_owner     db 1                    ; DATA XREF: main+30A↑w
.data:0000000000220021                                         ; print_long_format:loc_808E↑r ...
.data:0000000000220022 UNKNOWN_SECURITY_CONTEXT db  3Fh ; ?    ; DATA XREF: gobble_file_constprop_52+1DB↑o
.data:0000000000220023                 db    0
.data:0000000000220024                 db    0
.data:0000000000220025                 db    0
.data:0000000000220026                 db    0
.data:0000000000220027                 db    0
.data:0000000000220028                 db    0
.data:0000000000220029                 db    0
.data:000000000022002A                 db    0
.data:000000000022002B                 db    0
.data:000000000022002C                 db    0
.data:000000000022002D                 db    0
.data:000000000022002E                 db    0
.data:000000000022002F                 db    0
.data:0000000000220030                 db    0
.data:0000000000220031                 db    0
.data:0000000000220032                 db    0
.data:0000000000220033                 db    0
.data:0000000000220034                 db    0
.data:0000000000220035                 db    0
.data:0000000000220036                 db    0
.data:0000000000220037                 db    0
.data:0000000000220038                 db    0
.data:0000000000220039                 db    0
.data:000000000022003A                 db    0
.data:000000000022003B                 db    0
.data:000000000022003C                 db    0
.data:000000000022003D                 db    0
.data:000000000022003E                 db    0
.data:000000000022003F                 db    0
.data:0000000000220040 ; char *long_time_format
.data:0000000000220040 long_time_format dq offset aBEY         ; DATA XREF: main+141D↑r
.data:0000000000220040                                         ; main+143E↑w ...
.data:0000000000220040                                         ; "%b %e  %Y"
.data:0000000000220048 ; char *off_220048
.data:0000000000220048 off_220048      dq offset aBEHM         ; DATA XREF: main+1430↑r
.data:0000000000220048                                         ; main+144A↑w ...
.data:0000000000220048                                         ; "%b %e %H:%M"
.data:0000000000220050                 align 20h
.data:0000000000220060 color_indicator dq 2                    ; DATA XREF: main:loc_47BC↑r
.data:0000000000220060                                         ; main:loc_47D8↑o ...
.data:0000000000220068 off_220068      dq offset asc_17DC3     ; DATA XREF: main+F26↑r
.data:0000000000220068                                         ; "\x1B["
.data:0000000000220070 qword_220070    dq 1                    ; DATA XREF: main+F44↑o
.data:0000000000220070                                         ; main:loc_4F73↑r ...
.data:0000000000220078 off_220078      dq offset aSha512sum+8  ; DATA XREF: main+16E1↑r
.data:0000000000220078                                         ; "m"
.data:0000000000220080 unk_220080      db    0                 ; DATA XREF: prep_non_filename_text+A↑o
.data:0000000000220081                 db    0
.data:0000000000220082                 db    0
.data:0000000000220083                 db    0
.data:0000000000220084                 db    0
.data:0000000000220085                 db    0
.data:0000000000220086                 db    0
.data:0000000000220087                 db    0
.data:0000000000220088 qword_220088    dq 0                    ; DATA XREF: prep_non_filename_text↑r
.data:0000000000220090 unk_220090      db    1                 ; DATA XREF: prep_non_filename_text+28↑o
.data:0000000000220091                 db    0
.data:0000000000220092                 db    0
.data:0000000000220093                 db    0
.data:0000000000220094                 db    0
.data:0000000000220095                 db    0
.data:0000000000220096                 db    0
.data:0000000000220097                 db    0
.data:0000000000220098                 dq offset a00+1         ; "0"
.data:00000000002200A0 unk_2200A0      db    0                 ; DATA XREF: set_normal_color+34↑o
.data:00000000002200A1                 db    0
.data:00000000002200A2                 db    0
.data:00000000002200A3                 db    0
.data:00000000002200A4                 db    0
.data:00000000002200A5                 db    0
.data:00000000002200A6                 db    0
.data:00000000002200A7                 db    0
.data:00000000002200A8                 db    0
.data:00000000002200A9                 db    0
.data:00000000002200AA                 db    0
.data:00000000002200AB                 db    0
.data:00000000002200AC                 db    0
.data:00000000002200AD                 db    0
.data:00000000002200AE                 db    0
.data:00000000002200AF                 db    0
.data:00000000002200B0                 db    0
.data:00000000002200B1                 db    0
.data:00000000002200B2                 db    0
.data:00000000002200B3                 db    0
.data:00000000002200B4                 db    0
.data:00000000002200B5                 db    0
.data:00000000002200B6                 db    0
.data:00000000002200B7                 db    0
.data:00000000002200B8                 db    0
.data:00000000002200B9                 db    0
.data:00000000002200BA                 db    0
.data:00000000002200BB                 db    0
.data:00000000002200BC                 db    0
.data:00000000002200BD                 db    0
.data:00000000002200BE                 db    0
.data:00000000002200BF                 db    0
.data:00000000002200C0                 db    5
.data:00000000002200C1                 db    0
.data:00000000002200C2                 db    0
.data:00000000002200C3                 db    0
.data:00000000002200C4                 db    0
.data:00000000002200C5                 db    0
.data:00000000002200C6                 db    0
.data:00000000002200C7                 db    0
.data:00000000002200C8                 dq offset a0134         ; "01;34"
.data:00000000002200D0 qword_2200D0    dq 5                    ; DATA XREF: main:loc_4F39↑r
.data:00000000002200D8 ; char *s1
.data:00000000002200D8 s1              dq offset a0136         ; DATA XREF: main+16A7↑r
.data:00000000002200D8                                         ; "01;36"
.data:00000000002200E0                 db    2
.data:00000000002200E1                 db    0
.data:00000000002200E2                 db    0
.data:00000000002200E3                 db    0
.data:00000000002200E4                 db    0
.data:00000000002200E5                 db    0
.data:00000000002200E6                 db    0
.data:00000000002200E7                 db    0
.data:00000000002200E8                 dq offset a0133+3       ; "33"
.data:00000000002200F0                 db    5
.data:00000000002200F1                 db    0
.data:00000000002200F2                 db    0
.data:00000000002200F3                 db    0
.data:00000000002200F4                 db    0
.data:00000000002200F5                 db    0
.data:00000000002200F6                 db    0
.data:00000000002200F7                 db    0
.data:00000000002200F8                 dq offset a0135         ; "01;35"
.data:0000000000220100                 db    5
.data:0000000000220101                 db    0
.data:0000000000220102                 db    0
.data:0000000000220103                 db    0
.data:0000000000220104                 db    0
.data:0000000000220105                 db    0
.data:0000000000220106                 db    0
.data:0000000000220107                 db    0
.data:0000000000220108                 dq offset a0133         ; "01;33"
.data:0000000000220110                 db    5
.data:0000000000220111                 db    0
.data:0000000000220112                 db    0
.data:0000000000220113                 db    0
.data:0000000000220114                 db    0
.data:0000000000220115                 db    0
.data:0000000000220116                 db    0
.data:0000000000220117                 db    0
.data:0000000000220118                 dq offset a0133         ; "01;33"
.data:0000000000220120                 align 40h
.data:0000000000220140                 db    5
.data:0000000000220141                 db    0
.data:0000000000220142                 db    0
.data:0000000000220143                 db    0
.data:0000000000220144                 db    0
.data:0000000000220145                 db    0
.data:0000000000220146                 db    0
.data:0000000000220147                 db    0
.data:0000000000220148                 dq offset a0132         ; "01;32"
.data:0000000000220150                 db    5
.data:0000000000220151                 db    0
.data:0000000000220152                 db    0
.data:0000000000220153                 db    0
.data:0000000000220154                 db    0
.data:0000000000220155                 db    0
.data:0000000000220156                 db    0
.data:0000000000220157                 db    0
.data:0000000000220158                 dq offset a0135         ; "01;35"
.data:0000000000220160                 db    5
.data:0000000000220161                 db    0
.data:0000000000220162                 db    0
.data:0000000000220163                 db    0
.data:0000000000220164                 db    0
.data:0000000000220165                 db    0
.data:0000000000220166                 db    0
.data:0000000000220167                 db    0
.data:0000000000220168                 dq offset a3741         ; "37;41"
.data:0000000000220170                 db    5
.data:0000000000220171                 db    0
.data:0000000000220172                 db    0
.data:0000000000220173                 db    0
.data:0000000000220174                 db    0
.data:0000000000220175                 db    0
.data:0000000000220176                 db    0
.data:0000000000220177                 db    0
.data:0000000000220178                 dq offset a3043         ; "30;43"
.data:0000000000220180                 db    5
.data:0000000000220181                 db    0
.data:0000000000220182                 db    0
.data:0000000000220183                 db    0
.data:0000000000220184                 db    0
.data:0000000000220185                 db    0
.data:0000000000220186                 db    0
.data:0000000000220187                 db    0
.data:0000000000220188                 dq offset a3744         ; "37;44"
.data:0000000000220190                 db    5
.data:0000000000220191                 db    0
.data:0000000000220192                 db    0
.data:0000000000220193                 db    0
.data:0000000000220194                 db    0
.data:0000000000220195                 db    0
.data:0000000000220196                 db    0
.data:0000000000220197                 db    0
.data:0000000000220198                 dq offset a3442         ; "34;42"
.data:00000000002201A0                 db    5
.data:00000000002201A1                 db    0
.data:00000000002201A2                 db    0
.data:00000000002201A3                 db    0
.data:00000000002201A4                 db    0
.data:00000000002201A5                 db    0
.data:00000000002201A6                 db    0
.data:00000000002201A7                 db    0
.data:00000000002201A8                 dq offset a3042         ; "30;42"
.data:00000000002201B0                 db    5
.data:00000000002201B1                 db    0
.data:00000000002201B2                 db    0
.data:00000000002201B3                 db    0
.data:00000000002201B4                 db    0
.data:00000000002201B5                 db    0
.data:00000000002201B6                 db    0
.data:00000000002201B7                 db    0
.data:00000000002201B8                 dq offset a3041         ; "30;41"
.data:00000000002201C0                 db    0
.data:00000000002201C1                 db    0
.data:00000000002201C2                 db    0
.data:00000000002201C3                 db    0
.data:00000000002201C4                 db    0
.data:00000000002201C5                 db    0
.data:00000000002201C6                 db    0
.data:00000000002201C7                 db    0
.data:00000000002201C8                 db    0
.data:00000000002201C9                 db    0
.data:00000000002201CA                 db    0
.data:00000000002201CB                 db    0
.data:00000000002201CC                 db    0
.data:00000000002201CD                 db    0
.data:00000000002201CE                 db    0
.data:00000000002201CF                 db    0
.data:00000000002201D0 unk_2201D0      db    3                 ; DATA XREF: print_name_with_quoting+192↑o
.data:00000000002201D1                 db    0
.data:00000000002201D2                 db    0
.data:00000000002201D3                 db    0
.data:00000000002201D4                 db    0
.data:00000000002201D5                 db    0
.data:00000000002201D6                 db    0
.data:00000000002201D7                 db    0
.data:00000000002201D8                 dq offset aK            ; "\x1B[K"
.data:00000000002201E0                 public ls_mode
.data:00000000002201E0 ls_mode         dd 2                    ; DATA XREF: main+93↑r
.data:00000000002201E0                                         ; main:loc_3DEE↑r ...
.data:00000000002201E4                 align 8
.data:00000000002201E8                 public Version
.data:00000000002201E8 Version         dq offset a831          ; DATA XREF: main+554↑r
.data:00000000002201E8                                         ; "8.31"
.data:00000000002201F0                 public argmatch_die
.data:00000000002201F0 argmatch_die    dq offset __argmatch_die
.data:00000000002201F0                                         ; DATA XREF: main:loc_3E58↑r
.data:00000000002201F0                                         ; main:loc_3E9B↑r ...
.data:00000000002201F8                 public exit_failure
.data:00000000002201F8 ; int exit_failure
.data:00000000002201F8 exit_failure    dd 1                    ; DATA XREF: main+62↑w
.data:00000000002201F8                                         ; close_stdout:loc_CC22↑r ...
.data:00000000002201FC                 align 20h
.data:0000000000220200                 public quote_quoting_options
.data:0000000000220200 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000220200                                         ; quote_mem↑o ...
.data:0000000000220201                 db    0
.data:0000000000220202                 db    0
.data:0000000000220203                 db    0
.data:0000000000220204                 db    0
.data:0000000000220205                 db    0
.data:0000000000220206                 db    0
.data:0000000000220207                 db    0
.data:0000000000220208                 db    0
.data:0000000000220209                 db    0
.data:000000000022020A                 db    0
.data:000000000022020B                 db    0
.data:000000000022020C                 db    0
.data:000000000022020D                 db    0
.data:000000000022020E                 db    0
.data:000000000022020F                 db    0
.data:0000000000220210                 db    0
.data:0000000000220211                 db    0
.data:0000000000220212                 db    0
.data:0000000000220213                 db    0
.data:0000000000220214                 db    0
.data:0000000000220215                 db    0
.data:0000000000220216                 db    0
.data:0000000000220217                 db    0
.data:0000000000220218                 db    0
.data:0000000000220219                 db    0
.data:000000000022021A                 db    0
.data:000000000022021B                 db    0
.data:000000000022021C                 db    0
.data:000000000022021D                 db    0
.data:000000000022021E                 db    0
.data:000000000022021F                 db    0
.data:0000000000220220                 db    0
.data:0000000000220221                 db    0
.data:0000000000220222                 db    0
.data:0000000000220223                 db    0
.data:0000000000220224                 db    0
.data:0000000000220225                 db    0
.data:0000000000220226                 db    0
.data:0000000000220227                 db    0
.data:0000000000220228                 db    0
.data:0000000000220229                 db    0
.data:000000000022022A                 db    0
.data:000000000022022B                 db    0
.data:000000000022022C                 db    0
.data:000000000022022D                 db    0
.data:000000000022022E                 db    0
.data:000000000022022F                 db    0
.data:0000000000220230                 db    0
.data:0000000000220231                 db    0
.data:0000000000220232                 db    0
.data:0000000000220233                 db    0
.data:0000000000220234                 db    0
.data:0000000000220235                 db    0
.data:0000000000220236                 db    0
.data:0000000000220237                 db    0
.data:0000000000220238 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000220238                                         ; quotearg_n_options:loc_1349D↑r ...
.data:000000000022023C                 align 20h
.data:0000000000220240 ; void *slotvec
.data:0000000000220240 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000220240                                         ; quotearg_n_options+76↑w ...
.data:0000000000220248                 align 10h
.data:0000000000220250 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000220250                                         ; quotearg_n_options+187↑r ...
.data:0000000000220258 off_220258      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000220260                 public obstack_alloc_failed_handler
.data:0000000000220260 obstack_alloc_failed_handler dq offset print_and_abort
.data:0000000000220260                                         ; DATA XREF: LOAD:0000000000000D20↑o
.data:0000000000220260                                         ; _obstack_begin_worker:loc_154DD↑r ...
.data:0000000000220260 _data           ends
.data:0000000000220260
LOAD:0000000000220268 ; ===========================================================================
LOAD:0000000000220268
LOAD:0000000000220268 ; Segment type: Pure data
LOAD:0000000000220268 ; Segment permissions: Read/Write
LOAD:0000000000220268 LOAD            segment byte public 'DATA' use64
LOAD:0000000000220268                 assume cs:LOAD
LOAD:0000000000220268                 ;org 220268h
LOAD:0000000000220268                 public __bss_start
LOAD:0000000000220268 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:0000000000220268                                         ; deregister_tm_clones+8↑o ...
LOAD:0000000000220268                                         ; Alternative name is '_edata'
LOAD:0000000000220268                                         ; __TMC_END__
LOAD:0000000000220268                                         ; _edata
LOAD:0000000000220269                 db    ? ;
LOAD:000000000022026A                 db    ? ;
LOAD:000000000022026B                 db    ? ;
LOAD:000000000022026C                 db    ? ;
LOAD:000000000022026D                 db    ? ;
LOAD:000000000022026E                 db    ? ;
LOAD:000000000022026F                 db    ? ;
LOAD:0000000000220270                 db    ? ;
LOAD:0000000000220271                 db    ? ;
LOAD:0000000000220272                 db    ? ;
LOAD:0000000000220273                 db    ? ;
LOAD:0000000000220274                 db    ? ;
LOAD:0000000000220275                 db    ? ;
LOAD:0000000000220276                 db    ? ;
LOAD:0000000000220277                 db    ? ;
LOAD:0000000000220278                 db    ? ;
LOAD:0000000000220279                 db    ? ;
LOAD:000000000022027A                 db    ? ;
LOAD:000000000022027B                 db    ? ;
LOAD:000000000022027C                 db    ? ;
LOAD:000000000022027D                 db    ? ;
LOAD:000000000022027E                 db    ? ;
LOAD:000000000022027F                 db    ? ;
LOAD:000000000022027F LOAD            ends
LOAD:000000000022027F
.bss:0000000000220280 ; ===========================================================================
.bss:0000000000220280
.bss:0000000000220280 ; Segment type: Uninitialized
.bss:0000000000220280 ; Segment permissions: Read/Write
.bss:0000000000220280 _bss            segment align_32 public 'BSS' use64
.bss:0000000000220280                 assume cs:_bss
.bss:0000000000220280                 ;org 220280h
.bss:0000000000220280                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000220280                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:0000000000220280 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:0000000000220280                                         ; DATA XREF: LOAD:0000000000000D98↑o
.bss:0000000000220280                                         ; LOAD:0000000000000E10↑o ...
.bss:0000000000220280                                         ; Alternative name is '__progname'
.bss:0000000000220280                                         ; Copy of shared data
.bss:0000000000220288                 public stdout@@GLIBC_2_2_5
.bss:0000000000220288 ; FILE *stdout
.bss:0000000000220288 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000D50↑o
.bss:0000000000220288                                         ; main+580↑r ...
.bss:0000000000220288                                         ; Alternative name is 'stdout'
.bss:0000000000220288                                         ; Copy of shared data
.bss:0000000000220290                 public optind@@GLIBC_2_2_5
.bss:0000000000220290 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000E40↑o
.bss:0000000000220290                                         ; main+BA9↑r
.bss:0000000000220290                                         ; Alternative name is 'optind'
.bss:0000000000220290                                         ; Copy of shared data
.bss:0000000000220294                 align 8
.bss:0000000000220298                 public optarg@@GLIBC_2_2_5
.bss:0000000000220298 ; char *optarg
.bss:0000000000220298 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000E58↑o
.bss:0000000000220298                                         ; main+3DC↑r ...
.bss:0000000000220298                                         ; Alternative name is 'optarg'
.bss:0000000000220298                                         ; Copy of shared data
.bss:00000000002202A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002202A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002202A0                                         ; DATA XREF: LOAD:0000000000000DC8↑o
.bss:00000000002202A0                                         ; LOAD:0000000000000DF8↑o ...
.bss:00000000002202A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002202A0                                         ; Copy of shared data
.bss:00000000002202A8                 align 20h
.bss:00000000002202C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002202C0 ; FILE *stderr
.bss:00000000002202C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000E28↑o
.bss:00000000002202C0                                         ; main+179D↑r ...
.bss:00000000002202C0                                         ; Alternative name is 'stderr'
.bss:00000000002202C0                                         ; Copy of shared data
.bss:00000000002202C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002202C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002202C9                 align 20h
.bss:00000000002202E0 column_info_alloc_11173 dq ?            ; DATA XREF: calculate_columns+23↑r
.bss:00000000002202E0                                         ; calculate_columns:loc_8B66↑r ...
.bss:00000000002202E8 unsupported_device_10320 dq ?           ; DATA XREF: gobble_file_constprop_52:loc_9F40↑r
.bss:00000000002202E8                                         ; gobble_file_constprop_52+D34↑w
.bss:00000000002202F0 unsupported_device_10314 dq ?           ; DATA XREF: gobble_file_constprop_52+1BB↑r
.bss:00000000002202F0                                         ; gobble_file_constprop_52+1CD↑w
.bss:00000000002202F8 unsupported_device_10326 dq ?           ; DATA XREF: gobble_file_constprop_52+528↑r
.bss:00000000002202F8                                         ; gobble_file_constprop_52+537↑w
.bss:0000000000220300 ; struct __jmp_buf_tag failed_strcoll[1]
.bss:0000000000220300 failed_strcoll  __jmp_buf_tag <?>       ; DATA XREF: sort_files+5F↑o
.bss:00000000002203C8 use_abformat    db ?                    ; DATA XREF: abformat_init+15B↑w
.bss:00000000002203C8                                         ; print_long_format:loc_8460↑r ...
.bss:00000000002203C9                 align 20h
.bss:00000000002203E0 abformat        db    ? ;               ; DATA XREF: abformat_init+1CB↑o
.bss:00000000002203E0                                         ; print_long_format+5F4↑o ...
.bss:00000000002203E1                 db    ? ;
.bss:00000000002203E2                 db    ? ;
.bss:00000000002203E3                 db    ? ;
.bss:00000000002203E4                 db    ? ;
.bss:00000000002203E5                 db    ? ;
.bss:00000000002203E6                 db    ? ;
.bss:00000000002203E7                 db    ? ;
.bss:00000000002203E8                 db    ? ;
.bss:00000000002203E9                 db    ? ;
.bss:00000000002203EA                 db    ? ;
.bss:00000000002203EB                 db    ? ;
.bss:00000000002203EC                 db    ? ;
.bss:00000000002203ED                 db    ? ;
.bss:00000000002203EE                 db    ? ;
.bss:00000000002203EF                 db    ? ;
.bss:00000000002203F0                 db    ? ;
.bss:00000000002203F1                 db    ? ;
.bss:00000000002203F2                 db    ? ;
.bss:00000000002203F3                 db    ? ;
.bss:00000000002203F4                 db    ? ;
.bss:00000000002203F5                 db    ? ;
.bss:00000000002203F6                 db    ? ;
.bss:00000000002203F7                 db    ? ;
.bss:00000000002203F8                 db    ? ;
.bss:00000000002203F9                 db    ? ;
.bss:00000000002203FA                 db    ? ;
.bss:00000000002203FB                 db    ? ;
.bss:00000000002203FC                 db    ? ;
.bss:00000000002203FD                 db    ? ;
.bss:00000000002203FE                 db    ? ;
.bss:00000000002203FF                 db    ? ;
.bss:0000000000220400                 db    ? ;
.bss:0000000000220401                 db    ? ;
.bss:0000000000220402                 db    ? ;
.bss:0000000000220403                 db    ? ;
.bss:0000000000220404                 db    ? ;
.bss:0000000000220405                 db    ? ;
.bss:0000000000220406                 db    ? ;
.bss:0000000000220407                 db    ? ;
.bss:0000000000220408                 db    ? ;
.bss:0000000000220409                 db    ? ;
.bss:000000000022040A                 db    ? ;
.bss:000000000022040B                 db    ? ;
.bss:000000000022040C                 db    ? ;
.bss:000000000022040D                 db    ? ;
.bss:000000000022040E                 db    ? ;
.bss:000000000022040F                 db    ? ;
.bss:0000000000220410                 db    ? ;
.bss:0000000000220411                 db    ? ;
.bss:0000000000220412                 db    ? ;
.bss:0000000000220413                 db    ? ;
.bss:0000000000220414                 db    ? ;
.bss:0000000000220415                 db    ? ;
.bss:0000000000220416                 db    ? ;
.bss:0000000000220417                 db    ? ;
.bss:0000000000220418                 db    ? ;
.bss:0000000000220419                 db    ? ;
.bss:000000000022041A                 db    ? ;
.bss:000000000022041B                 db    ? ;
.bss:000000000022041C                 db    ? ;
.bss:000000000022041D                 db    ? ;
.bss:000000000022041E                 db    ? ;
.bss:000000000022041F                 db    ? ;
.bss:0000000000220420                 db    ? ;
.bss:0000000000220421                 db    ? ;
.bss:0000000000220422                 db    ? ;
.bss:0000000000220423                 db    ? ;
.bss:0000000000220424                 db    ? ;
.bss:0000000000220425                 db    ? ;
.bss:0000000000220426                 db    ? ;
.bss:0000000000220427                 db    ? ;
.bss:0000000000220428                 db    ? ;
.bss:0000000000220429                 db    ? ;
.bss:000000000022042A                 db    ? ;
.bss:000000000022042B                 db    ? ;
.bss:000000000022042C                 db    ? ;
.bss:000000000022042D                 db    ? ;
.bss:000000000022042E                 db    ? ;
.bss:000000000022042F                 db    ? ;
.bss:0000000000220430                 db    ? ;
.bss:0000000000220431                 db    ? ;
.bss:0000000000220432                 db    ? ;
.bss:0000000000220433                 db    ? ;
.bss:0000000000220434                 db    ? ;
.bss:0000000000220435                 db    ? ;
.bss:0000000000220436                 db    ? ;
.bss:0000000000220437                 db    ? ;
.bss:0000000000220438                 db    ? ;
.bss:0000000000220439                 db    ? ;
.bss:000000000022043A                 db    ? ;
.bss:000000000022043B                 db    ? ;
.bss:000000000022043C                 db    ? ;
.bss:000000000022043D                 db    ? ;
.bss:000000000022043E                 db    ? ;
.bss:000000000022043F                 db    ? ;
.bss:0000000000220440                 db    ? ;
.bss:0000000000220441                 db    ? ;
.bss:0000000000220442                 db    ? ;
.bss:0000000000220443                 db    ? ;
.bss:0000000000220444                 db    ? ;
.bss:0000000000220445                 db    ? ;
.bss:0000000000220446                 db    ? ;
.bss:0000000000220447                 db    ? ;
.bss:0000000000220448                 db    ? ;
.bss:0000000000220449                 db    ? ;
.bss:000000000022044A                 db    ? ;
.bss:000000000022044B                 db    ? ;
.bss:000000000022044C                 db    ? ;
.bss:000000000022044D                 db    ? ;
.bss:000000000022044E                 db    ? ;
.bss:000000000022044F                 db    ? ;
.bss:0000000000220450                 db    ? ;
.bss:0000000000220451                 db    ? ;
.bss:0000000000220452                 db    ? ;
.bss:0000000000220453                 db    ? ;
.bss:0000000000220454                 db    ? ;
.bss:0000000000220455                 db    ? ;
.bss:0000000000220456                 db    ? ;
.bss:0000000000220457                 db    ? ;
.bss:0000000000220458                 db    ? ;
.bss:0000000000220459                 db    ? ;
.bss:000000000022045A                 db    ? ;
.bss:000000000022045B                 db    ? ;
.bss:000000000022045C                 db    ? ;
.bss:000000000022045D                 db    ? ;
.bss:000000000022045E                 db    ? ;
.bss:000000000022045F                 db    ? ;
.bss:0000000000220460                 db    ? ;
.bss:0000000000220461                 db    ? ;
.bss:0000000000220462                 db    ? ;
.bss:0000000000220463                 db    ? ;
.bss:0000000000220464                 db    ? ;
.bss:0000000000220465                 db    ? ;
.bss:0000000000220466                 db    ? ;
.bss:0000000000220467                 db    ? ;
.bss:0000000000220468                 db    ? ;
.bss:0000000000220469                 db    ? ;
.bss:000000000022046A                 db    ? ;
.bss:000000000022046B                 db    ? ;
.bss:000000000022046C                 db    ? ;
.bss:000000000022046D                 db    ? ;
.bss:000000000022046E                 db    ? ;
.bss:000000000022046F                 db    ? ;
.bss:0000000000220470                 db    ? ;
.bss:0000000000220471                 db    ? ;
.bss:0000000000220472                 db    ? ;
.bss:0000000000220473                 db    ? ;
.bss:0000000000220474                 db    ? ;
.bss:0000000000220475                 db    ? ;
.bss:0000000000220476                 db    ? ;
.bss:0000000000220477                 db    ? ;
.bss:0000000000220478                 db    ? ;
.bss:0000000000220479                 db    ? ;
.bss:000000000022047A                 db    ? ;
.bss:000000000022047B                 db    ? ;
.bss:000000000022047C                 db    ? ;
.bss:000000000022047D                 db    ? ;
.bss:000000000022047E                 db    ? ;
.bss:000000000022047F                 db    ? ;
.bss:0000000000220480                 db    ? ;
.bss:0000000000220481                 db    ? ;
.bss:0000000000220482                 db    ? ;
.bss:0000000000220483                 db    ? ;
.bss:0000000000220484                 db    ? ;
.bss:0000000000220485                 db    ? ;
.bss:0000000000220486                 db    ? ;
.bss:0000000000220487                 db    ? ;
.bss:0000000000220488                 db    ? ;
.bss:0000000000220489                 db    ? ;
.bss:000000000022048A                 db    ? ;
.bss:000000000022048B                 db    ? ;
.bss:000000000022048C                 db    ? ;
.bss:000000000022048D                 db    ? ;
.bss:000000000022048E                 db    ? ;
.bss:000000000022048F                 db    ? ;
.bss:0000000000220490                 db    ? ;
.bss:0000000000220491                 db    ? ;
.bss:0000000000220492                 db    ? ;
.bss:0000000000220493                 db    ? ;
.bss:0000000000220494                 db    ? ;
.bss:0000000000220495                 db    ? ;
.bss:0000000000220496                 db    ? ;
.bss:0000000000220497                 db    ? ;
.bss:0000000000220498                 db    ? ;
.bss:0000000000220499                 db    ? ;
.bss:000000000022049A                 db    ? ;
.bss:000000000022049B                 db    ? ;
.bss:000000000022049C                 db    ? ;
.bss:000000000022049D                 db    ? ;
.bss:000000000022049E                 db    ? ;
.bss:000000000022049F                 db    ? ;
.bss:00000000002204A0                 db    ? ;
.bss:00000000002204A1                 db    ? ;
.bss:00000000002204A2                 db    ? ;
.bss:00000000002204A3                 db    ? ;
.bss:00000000002204A4                 db    ? ;
.bss:00000000002204A5                 db    ? ;
.bss:00000000002204A6                 db    ? ;
.bss:00000000002204A7                 db    ? ;
.bss:00000000002204A8                 db    ? ;
.bss:00000000002204A9                 db    ? ;
.bss:00000000002204AA                 db    ? ;
.bss:00000000002204AB                 db    ? ;
.bss:00000000002204AC                 db    ? ;
.bss:00000000002204AD                 db    ? ;
.bss:00000000002204AE                 db    ? ;
.bss:00000000002204AF                 db    ? ;
.bss:00000000002204B0                 db    ? ;
.bss:00000000002204B1                 db    ? ;
.bss:00000000002204B2                 db    ? ;
.bss:00000000002204B3                 db    ? ;
.bss:00000000002204B4                 db    ? ;
.bss:00000000002204B5                 db    ? ;
.bss:00000000002204B6                 db    ? ;
.bss:00000000002204B7                 db    ? ;
.bss:00000000002204B8                 db    ? ;
.bss:00000000002204B9                 db    ? ;
.bss:00000000002204BA                 db    ? ;
.bss:00000000002204BB                 db    ? ;
.bss:00000000002204BC                 db    ? ;
.bss:00000000002204BD                 db    ? ;
.bss:00000000002204BE                 db    ? ;
.bss:00000000002204BF                 db    ? ;
.bss:00000000002204C0                 db    ? ;
.bss:00000000002204C1                 db    ? ;
.bss:00000000002204C2                 db    ? ;
.bss:00000000002204C3                 db    ? ;
.bss:00000000002204C4                 db    ? ;
.bss:00000000002204C5                 db    ? ;
.bss:00000000002204C6                 db    ? ;
.bss:00000000002204C7                 db    ? ;
.bss:00000000002204C8                 db    ? ;
.bss:00000000002204C9                 db    ? ;
.bss:00000000002204CA                 db    ? ;
.bss:00000000002204CB                 db    ? ;
.bss:00000000002204CC                 db    ? ;
.bss:00000000002204CD                 db    ? ;
.bss:00000000002204CE                 db    ? ;
.bss:00000000002204CF                 db    ? ;
.bss:00000000002204D0                 db    ? ;
.bss:00000000002204D1                 db    ? ;
.bss:00000000002204D2                 db    ? ;
.bss:00000000002204D3                 db    ? ;
.bss:00000000002204D4                 db    ? ;
.bss:00000000002204D5                 db    ? ;
.bss:00000000002204D6                 db    ? ;
.bss:00000000002204D7                 db    ? ;
.bss:00000000002204D8                 db    ? ;
.bss:00000000002204D9                 db    ? ;
.bss:00000000002204DA                 db    ? ;
.bss:00000000002204DB                 db    ? ;
.bss:00000000002204DC                 db    ? ;
.bss:00000000002204DD                 db    ? ;
.bss:00000000002204DE                 db    ? ;
.bss:00000000002204DF                 db    ? ;
.bss:00000000002204E0                 db    ? ;
.bss:00000000002204E1                 db    ? ;
.bss:00000000002204E2                 db    ? ;
.bss:00000000002204E3                 db    ? ;
.bss:00000000002204E4                 db    ? ;
.bss:00000000002204E5                 db    ? ;
.bss:00000000002204E6                 db    ? ;
.bss:00000000002204E7                 db    ? ;
.bss:00000000002204E8                 db    ? ;
.bss:00000000002204E9                 db    ? ;
.bss:00000000002204EA                 db    ? ;
.bss:00000000002204EB                 db    ? ;
.bss:00000000002204EC                 db    ? ;
.bss:00000000002204ED                 db    ? ;
.bss:00000000002204EE                 db    ? ;
.bss:00000000002204EF                 db    ? ;
.bss:00000000002204F0                 db    ? ;
.bss:00000000002204F1                 db    ? ;
.bss:00000000002204F2                 db    ? ;
.bss:00000000002204F3                 db    ? ;
.bss:00000000002204F4                 db    ? ;
.bss:00000000002204F5                 db    ? ;
.bss:00000000002204F6                 db    ? ;
.bss:00000000002204F7                 db    ? ;
.bss:00000000002204F8                 db    ? ;
.bss:00000000002204F9                 db    ? ;
.bss:00000000002204FA                 db    ? ;
.bss:00000000002204FB                 db    ? ;
.bss:00000000002204FC                 db    ? ;
.bss:00000000002204FD                 db    ? ;
.bss:00000000002204FE                 db    ? ;
.bss:00000000002204FF                 db    ? ;
.bss:0000000000220500                 db    ? ;
.bss:0000000000220501                 db    ? ;
.bss:0000000000220502                 db    ? ;
.bss:0000000000220503                 db    ? ;
.bss:0000000000220504                 db    ? ;
.bss:0000000000220505                 db    ? ;
.bss:0000000000220506                 db    ? ;
.bss:0000000000220507                 db    ? ;
.bss:0000000000220508                 db    ? ;
.bss:0000000000220509                 db    ? ;
.bss:000000000022050A                 db    ? ;
.bss:000000000022050B                 db    ? ;
.bss:000000000022050C                 db    ? ;
.bss:000000000022050D                 db    ? ;
.bss:000000000022050E                 db    ? ;
.bss:000000000022050F                 db    ? ;
.bss:0000000000220510                 db    ? ;
.bss:0000000000220511                 db    ? ;
.bss:0000000000220512                 db    ? ;
.bss:0000000000220513                 db    ? ;
.bss:0000000000220514                 db    ? ;
.bss:0000000000220515                 db    ? ;
.bss:0000000000220516                 db    ? ;
.bss:0000000000220517                 db    ? ;
.bss:0000000000220518                 db    ? ;
.bss:0000000000220519                 db    ? ;
.bss:000000000022051A                 db    ? ;
.bss:000000000022051B                 db    ? ;
.bss:000000000022051C                 db    ? ;
.bss:000000000022051D                 db    ? ;
.bss:000000000022051E                 db    ? ;
.bss:000000000022051F                 db    ? ;
.bss:0000000000220520                 db    ? ;
.bss:0000000000220521                 db    ? ;
.bss:0000000000220522                 db    ? ;
.bss:0000000000220523                 db    ? ;
.bss:0000000000220524                 db    ? ;
.bss:0000000000220525                 db    ? ;
.bss:0000000000220526                 db    ? ;
.bss:0000000000220527                 db    ? ;
.bss:0000000000220528                 db    ? ;
.bss:0000000000220529                 db    ? ;
.bss:000000000022052A                 db    ? ;
.bss:000000000022052B                 db    ? ;
.bss:000000000022052C                 db    ? ;
.bss:000000000022052D                 db    ? ;
.bss:000000000022052E                 db    ? ;
.bss:000000000022052F                 db    ? ;
.bss:0000000000220530                 db    ? ;
.bss:0000000000220531                 db    ? ;
.bss:0000000000220532                 db    ? ;
.bss:0000000000220533                 db    ? ;
.bss:0000000000220534                 db    ? ;
.bss:0000000000220535                 db    ? ;
.bss:0000000000220536                 db    ? ;
.bss:0000000000220537                 db    ? ;
.bss:0000000000220538                 db    ? ;
.bss:0000000000220539                 db    ? ;
.bss:000000000022053A                 db    ? ;
.bss:000000000022053B                 db    ? ;
.bss:000000000022053C                 db    ? ;
.bss:000000000022053D                 db    ? ;
.bss:000000000022053E                 db    ? ;
.bss:000000000022053F                 db    ? ;
.bss:0000000000220540                 db    ? ;
.bss:0000000000220541                 db    ? ;
.bss:0000000000220542                 db    ? ;
.bss:0000000000220543                 db    ? ;
.bss:0000000000220544                 db    ? ;
.bss:0000000000220545                 db    ? ;
.bss:0000000000220546                 db    ? ;
.bss:0000000000220547                 db    ? ;
.bss:0000000000220548                 db    ? ;
.bss:0000000000220549                 db    ? ;
.bss:000000000022054A                 db    ? ;
.bss:000000000022054B                 db    ? ;
.bss:000000000022054C                 db    ? ;
.bss:000000000022054D                 db    ? ;
.bss:000000000022054E                 db    ? ;
.bss:000000000022054F                 db    ? ;
.bss:0000000000220550                 db    ? ;
.bss:0000000000220551                 db    ? ;
.bss:0000000000220552                 db    ? ;
.bss:0000000000220553                 db    ? ;
.bss:0000000000220554                 db    ? ;
.bss:0000000000220555                 db    ? ;
.bss:0000000000220556                 db    ? ;
.bss:0000000000220557                 db    ? ;
.bss:0000000000220558                 db    ? ;
.bss:0000000000220559                 db    ? ;
.bss:000000000022055A                 db    ? ;
.bss:000000000022055B                 db    ? ;
.bss:000000000022055C                 db    ? ;
.bss:000000000022055D                 db    ? ;
.bss:000000000022055E                 db    ? ;
.bss:000000000022055F                 db    ? ;
.bss:0000000000220560                 db    ? ;
.bss:0000000000220561                 db    ? ;
.bss:0000000000220562                 db    ? ;
.bss:0000000000220563                 db    ? ;
.bss:0000000000220564                 db    ? ;
.bss:0000000000220565                 db    ? ;
.bss:0000000000220566                 db    ? ;
.bss:0000000000220567                 db    ? ;
.bss:0000000000220568                 db    ? ;
.bss:0000000000220569                 db    ? ;
.bss:000000000022056A                 db    ? ;
.bss:000000000022056B                 db    ? ;
.bss:000000000022056C                 db    ? ;
.bss:000000000022056D                 db    ? ;
.bss:000000000022056E                 db    ? ;
.bss:000000000022056F                 db    ? ;
.bss:0000000000220570                 db    ? ;
.bss:0000000000220571                 db    ? ;
.bss:0000000000220572                 db    ? ;
.bss:0000000000220573                 db    ? ;
.bss:0000000000220574                 db    ? ;
.bss:0000000000220575                 db    ? ;
.bss:0000000000220576                 db    ? ;
.bss:0000000000220577                 db    ? ;
.bss:0000000000220578                 db    ? ;
.bss:0000000000220579                 db    ? ;
.bss:000000000022057A                 db    ? ;
.bss:000000000022057B                 db    ? ;
.bss:000000000022057C                 db    ? ;
.bss:000000000022057D                 db    ? ;
.bss:000000000022057E                 db    ? ;
.bss:000000000022057F                 db    ? ;
.bss:0000000000220580                 db    ? ;
.bss:0000000000220581                 db    ? ;
.bss:0000000000220582                 db    ? ;
.bss:0000000000220583                 db    ? ;
.bss:0000000000220584                 db    ? ;
.bss:0000000000220585                 db    ? ;
.bss:0000000000220586                 db    ? ;
.bss:0000000000220587                 db    ? ;
.bss:0000000000220588                 db    ? ;
.bss:0000000000220589                 db    ? ;
.bss:000000000022058A                 db    ? ;
.bss:000000000022058B                 db    ? ;
.bss:000000000022058C                 db    ? ;
.bss:000000000022058D                 db    ? ;
.bss:000000000022058E                 db    ? ;
.bss:000000000022058F                 db    ? ;
.bss:0000000000220590                 db    ? ;
.bss:0000000000220591                 db    ? ;
.bss:0000000000220592                 db    ? ;
.bss:0000000000220593                 db    ? ;
.bss:0000000000220594                 db    ? ;
.bss:0000000000220595                 db    ? ;
.bss:0000000000220596                 db    ? ;
.bss:0000000000220597                 db    ? ;
.bss:0000000000220598                 db    ? ;
.bss:0000000000220599                 db    ? ;
.bss:000000000022059A                 db    ? ;
.bss:000000000022059B                 db    ? ;
.bss:000000000022059C                 db    ? ;
.bss:000000000022059D                 db    ? ;
.bss:000000000022059E                 db    ? ;
.bss:000000000022059F                 db    ? ;
.bss:00000000002205A0                 db    ? ;
.bss:00000000002205A1                 db    ? ;
.bss:00000000002205A2                 db    ? ;
.bss:00000000002205A3                 db    ? ;
.bss:00000000002205A4                 db    ? ;
.bss:00000000002205A5                 db    ? ;
.bss:00000000002205A6                 db    ? ;
.bss:00000000002205A7                 db    ? ;
.bss:00000000002205A8                 db    ? ;
.bss:00000000002205A9                 db    ? ;
.bss:00000000002205AA                 db    ? ;
.bss:00000000002205AB                 db    ? ;
.bss:00000000002205AC                 db    ? ;
.bss:00000000002205AD                 db    ? ;
.bss:00000000002205AE                 db    ? ;
.bss:00000000002205AF                 db    ? ;
.bss:00000000002205B0                 db    ? ;
.bss:00000000002205B1                 db    ? ;
.bss:00000000002205B2                 db    ? ;
.bss:00000000002205B3                 db    ? ;
.bss:00000000002205B4                 db    ? ;
.bss:00000000002205B5                 db    ? ;
.bss:00000000002205B6                 db    ? ;
.bss:00000000002205B7                 db    ? ;
.bss:00000000002205B8                 db    ? ;
.bss:00000000002205B9                 db    ? ;
.bss:00000000002205BA                 db    ? ;
.bss:00000000002205BB                 db    ? ;
.bss:00000000002205BC                 db    ? ;
.bss:00000000002205BD                 db    ? ;
.bss:00000000002205BE                 db    ? ;
.bss:00000000002205BF                 db    ? ;
.bss:00000000002205C0                 db    ? ;
.bss:00000000002205C1                 db    ? ;
.bss:00000000002205C2                 db    ? ;
.bss:00000000002205C3                 db    ? ;
.bss:00000000002205C4                 db    ? ;
.bss:00000000002205C5                 db    ? ;
.bss:00000000002205C6                 db    ? ;
.bss:00000000002205C7                 db    ? ;
.bss:00000000002205C8                 db    ? ;
.bss:00000000002205C9                 db    ? ;
.bss:00000000002205CA                 db    ? ;
.bss:00000000002205CB                 db    ? ;
.bss:00000000002205CC                 db    ? ;
.bss:00000000002205CD                 db    ? ;
.bss:00000000002205CE                 db    ? ;
.bss:00000000002205CF                 db    ? ;
.bss:00000000002205D0                 db    ? ;
.bss:00000000002205D1                 db    ? ;
.bss:00000000002205D2                 db    ? ;
.bss:00000000002205D3                 db    ? ;
.bss:00000000002205D4                 db    ? ;
.bss:00000000002205D5                 db    ? ;
.bss:00000000002205D6                 db    ? ;
.bss:00000000002205D7                 db    ? ;
.bss:00000000002205D8                 db    ? ;
.bss:00000000002205D9                 db    ? ;
.bss:00000000002205DA                 db    ? ;
.bss:00000000002205DB                 db    ? ;
.bss:00000000002205DC                 db    ? ;
.bss:00000000002205DD                 db    ? ;
.bss:00000000002205DE                 db    ? ;
.bss:00000000002205DF                 db    ? ;
.bss:00000000002205E0                 db    ? ;
.bss:00000000002205E1                 db    ? ;
.bss:00000000002205E2                 db    ? ;
.bss:00000000002205E3                 db    ? ;
.bss:00000000002205E4                 db    ? ;
.bss:00000000002205E5                 db    ? ;
.bss:00000000002205E6                 db    ? ;
.bss:00000000002205E7                 db    ? ;
.bss:00000000002205E8                 db    ? ;
.bss:00000000002205E9                 db    ? ;
.bss:00000000002205EA                 db    ? ;
.bss:00000000002205EB                 db    ? ;
.bss:00000000002205EC                 db    ? ;
.bss:00000000002205ED                 db    ? ;
.bss:00000000002205EE                 db    ? ;
.bss:00000000002205EF                 db    ? ;
.bss:00000000002205F0                 db    ? ;
.bss:00000000002205F1                 db    ? ;
.bss:00000000002205F2                 db    ? ;
.bss:00000000002205F3                 db    ? ;
.bss:00000000002205F4                 db    ? ;
.bss:00000000002205F5                 db    ? ;
.bss:00000000002205F6                 db    ? ;
.bss:00000000002205F7                 db    ? ;
.bss:00000000002205F8                 db    ? ;
.bss:00000000002205F9                 db    ? ;
.bss:00000000002205FA                 db    ? ;
.bss:00000000002205FB                 db    ? ;
.bss:00000000002205FC                 db    ? ;
.bss:00000000002205FD                 db    ? ;
.bss:00000000002205FE                 db    ? ;
.bss:00000000002205FF                 db    ? ;
.bss:0000000000220600                 db    ? ;
.bss:0000000000220601                 db    ? ;
.bss:0000000000220602                 db    ? ;
.bss:0000000000220603                 db    ? ;
.bss:0000000000220604                 db    ? ;
.bss:0000000000220605                 db    ? ;
.bss:0000000000220606                 db    ? ;
.bss:0000000000220607                 db    ? ;
.bss:0000000000220608                 db    ? ;
.bss:0000000000220609                 db    ? ;
.bss:000000000022060A                 db    ? ;
.bss:000000000022060B                 db    ? ;
.bss:000000000022060C                 db    ? ;
.bss:000000000022060D                 db    ? ;
.bss:000000000022060E                 db    ? ;
.bss:000000000022060F                 db    ? ;
.bss:0000000000220610                 db    ? ;
.bss:0000000000220611                 db    ? ;
.bss:0000000000220612                 db    ? ;
.bss:0000000000220613                 db    ? ;
.bss:0000000000220614                 db    ? ;
.bss:0000000000220615                 db    ? ;
.bss:0000000000220616                 db    ? ;
.bss:0000000000220617                 db    ? ;
.bss:0000000000220618                 db    ? ;
.bss:0000000000220619                 db    ? ;
.bss:000000000022061A                 db    ? ;
.bss:000000000022061B                 db    ? ;
.bss:000000000022061C                 db    ? ;
.bss:000000000022061D                 db    ? ;
.bss:000000000022061E                 db    ? ;
.bss:000000000022061F                 db    ? ;
.bss:0000000000220620                 db    ? ;
.bss:0000000000220621                 db    ? ;
.bss:0000000000220622                 db    ? ;
.bss:0000000000220623                 db    ? ;
.bss:0000000000220624                 db    ? ;
.bss:0000000000220625                 db    ? ;
.bss:0000000000220626                 db    ? ;
.bss:0000000000220627                 db    ? ;
.bss:0000000000220628                 db    ? ;
.bss:0000000000220629                 db    ? ;
.bss:000000000022062A                 db    ? ;
.bss:000000000022062B                 db    ? ;
.bss:000000000022062C                 db    ? ;
.bss:000000000022062D                 db    ? ;
.bss:000000000022062E                 db    ? ;
.bss:000000000022062F                 db    ? ;
.bss:0000000000220630                 db    ? ;
.bss:0000000000220631                 db    ? ;
.bss:0000000000220632                 db    ? ;
.bss:0000000000220633                 db    ? ;
.bss:0000000000220634                 db    ? ;
.bss:0000000000220635                 db    ? ;
.bss:0000000000220636                 db    ? ;
.bss:0000000000220637                 db    ? ;
.bss:0000000000220638                 db    ? ;
.bss:0000000000220639                 db    ? ;
.bss:000000000022063A                 db    ? ;
.bss:000000000022063B                 db    ? ;
.bss:000000000022063C                 db    ? ;
.bss:000000000022063D                 db    ? ;
.bss:000000000022063E                 db    ? ;
.bss:000000000022063F                 db    ? ;
.bss:0000000000220640                 db    ? ;
.bss:0000000000220641                 db    ? ;
.bss:0000000000220642                 db    ? ;
.bss:0000000000220643                 db    ? ;
.bss:0000000000220644                 db    ? ;
.bss:0000000000220645                 db    ? ;
.bss:0000000000220646                 db    ? ;
.bss:0000000000220647                 db    ? ;
.bss:0000000000220648                 db    ? ;
.bss:0000000000220649                 db    ? ;
.bss:000000000022064A                 db    ? ;
.bss:000000000022064B                 db    ? ;
.bss:000000000022064C                 db    ? ;
.bss:000000000022064D                 db    ? ;
.bss:000000000022064E                 db    ? ;
.bss:000000000022064F                 db    ? ;
.bss:0000000000220650                 db    ? ;
.bss:0000000000220651                 db    ? ;
.bss:0000000000220652                 db    ? ;
.bss:0000000000220653                 db    ? ;
.bss:0000000000220654                 db    ? ;
.bss:0000000000220655                 db    ? ;
.bss:0000000000220656                 db    ? ;
.bss:0000000000220657                 db    ? ;
.bss:0000000000220658                 db    ? ;
.bss:0000000000220659                 db    ? ;
.bss:000000000022065A                 db    ? ;
.bss:000000000022065B                 db    ? ;
.bss:000000000022065C                 db    ? ;
.bss:000000000022065D                 db    ? ;
.bss:000000000022065E                 db    ? ;
.bss:000000000022065F                 db    ? ;
.bss:0000000000220660                 db    ? ;
.bss:0000000000220661                 db    ? ;
.bss:0000000000220662                 db    ? ;
.bss:0000000000220663                 db    ? ;
.bss:0000000000220664                 db    ? ;
.bss:0000000000220665                 db    ? ;
.bss:0000000000220666                 db    ? ;
.bss:0000000000220667                 db    ? ;
.bss:0000000000220668                 db    ? ;
.bss:0000000000220669                 db    ? ;
.bss:000000000022066A                 db    ? ;
.bss:000000000022066B                 db    ? ;
.bss:000000000022066C                 db    ? ;
.bss:000000000022066D                 db    ? ;
.bss:000000000022066E                 db    ? ;
.bss:000000000022066F                 db    ? ;
.bss:0000000000220670                 db    ? ;
.bss:0000000000220671                 db    ? ;
.bss:0000000000220672                 db    ? ;
.bss:0000000000220673                 db    ? ;
.bss:0000000000220674                 db    ? ;
.bss:0000000000220675                 db    ? ;
.bss:0000000000220676                 db    ? ;
.bss:0000000000220677                 db    ? ;
.bss:0000000000220678                 db    ? ;
.bss:0000000000220679                 db    ? ;
.bss:000000000022067A                 db    ? ;
.bss:000000000022067B                 db    ? ;
.bss:000000000022067C                 db    ? ;
.bss:000000000022067D                 db    ? ;
.bss:000000000022067E                 db    ? ;
.bss:000000000022067F                 db    ? ;
.bss:0000000000220680                 db    ? ;
.bss:0000000000220681                 db    ? ;
.bss:0000000000220682                 db    ? ;
.bss:0000000000220683                 db    ? ;
.bss:0000000000220684                 db    ? ;
.bss:0000000000220685                 db    ? ;
.bss:0000000000220686                 db    ? ;
.bss:0000000000220687                 db    ? ;
.bss:0000000000220688                 db    ? ;
.bss:0000000000220689                 db    ? ;
.bss:000000000022068A                 db    ? ;
.bss:000000000022068B                 db    ? ;
.bss:000000000022068C                 db    ? ;
.bss:000000000022068D                 db    ? ;
.bss:000000000022068E                 db    ? ;
.bss:000000000022068F                 db    ? ;
.bss:0000000000220690                 db    ? ;
.bss:0000000000220691                 db    ? ;
.bss:0000000000220692                 db    ? ;
.bss:0000000000220693                 db    ? ;
.bss:0000000000220694                 db    ? ;
.bss:0000000000220695                 db    ? ;
.bss:0000000000220696                 db    ? ;
.bss:0000000000220697                 db    ? ;
.bss:0000000000220698                 db    ? ;
.bss:0000000000220699                 db    ? ;
.bss:000000000022069A                 db    ? ;
.bss:000000000022069B                 db    ? ;
.bss:000000000022069C                 db    ? ;
.bss:000000000022069D                 db    ? ;
.bss:000000000022069E                 db    ? ;
.bss:000000000022069F                 db    ? ;
.bss:00000000002206A0                 db    ? ;
.bss:00000000002206A1                 db    ? ;
.bss:00000000002206A2                 db    ? ;
.bss:00000000002206A3                 db    ? ;
.bss:00000000002206A4                 db    ? ;
.bss:00000000002206A5                 db    ? ;
.bss:00000000002206A6                 db    ? ;
.bss:00000000002206A7                 db    ? ;
.bss:00000000002206A8                 db    ? ;
.bss:00000000002206A9                 db    ? ;
.bss:00000000002206AA                 db    ? ;
.bss:00000000002206AB                 db    ? ;
.bss:00000000002206AC                 db    ? ;
.bss:00000000002206AD                 db    ? ;
.bss:00000000002206AE                 db    ? ;
.bss:00000000002206AF                 db    ? ;
.bss:00000000002206B0                 db    ? ;
.bss:00000000002206B1                 db    ? ;
.bss:00000000002206B2                 db    ? ;
.bss:00000000002206B3                 db    ? ;
.bss:00000000002206B4                 db    ? ;
.bss:00000000002206B5                 db    ? ;
.bss:00000000002206B6                 db    ? ;
.bss:00000000002206B7                 db    ? ;
.bss:00000000002206B8                 db    ? ;
.bss:00000000002206B9                 db    ? ;
.bss:00000000002206BA                 db    ? ;
.bss:00000000002206BB                 db    ? ;
.bss:00000000002206BC                 db    ? ;
.bss:00000000002206BD                 db    ? ;
.bss:00000000002206BE                 db    ? ;
.bss:00000000002206BF                 db    ? ;
.bss:00000000002206C0                 db    ? ;
.bss:00000000002206C1                 db    ? ;
.bss:00000000002206C2                 db    ? ;
.bss:00000000002206C3                 db    ? ;
.bss:00000000002206C4                 db    ? ;
.bss:00000000002206C5                 db    ? ;
.bss:00000000002206C6                 db    ? ;
.bss:00000000002206C7                 db    ? ;
.bss:00000000002206C8                 db    ? ;
.bss:00000000002206C9                 db    ? ;
.bss:00000000002206CA                 db    ? ;
.bss:00000000002206CB                 db    ? ;
.bss:00000000002206CC                 db    ? ;
.bss:00000000002206CD                 db    ? ;
.bss:00000000002206CE                 db    ? ;
.bss:00000000002206CF                 db    ? ;
.bss:00000000002206D0                 db    ? ;
.bss:00000000002206D1                 db    ? ;
.bss:00000000002206D2                 db    ? ;
.bss:00000000002206D3                 db    ? ;
.bss:00000000002206D4                 db    ? ;
.bss:00000000002206D5                 db    ? ;
.bss:00000000002206D6                 db    ? ;
.bss:00000000002206D7                 db    ? ;
.bss:00000000002206D8                 db    ? ;
.bss:00000000002206D9                 db    ? ;
.bss:00000000002206DA                 db    ? ;
.bss:00000000002206DB                 db    ? ;
.bss:00000000002206DC                 db    ? ;
.bss:00000000002206DD                 db    ? ;
.bss:00000000002206DE                 db    ? ;
.bss:00000000002206DF                 db    ? ;
.bss:00000000002206E0                 db    ? ;
.bss:00000000002206E1                 db    ? ;
.bss:00000000002206E2                 db    ? ;
.bss:00000000002206E3                 db    ? ;
.bss:00000000002206E4                 db    ? ;
.bss:00000000002206E5                 db    ? ;
.bss:00000000002206E6                 db    ? ;
.bss:00000000002206E7                 db    ? ;
.bss:00000000002206E8                 db    ? ;
.bss:00000000002206E9                 db    ? ;
.bss:00000000002206EA                 db    ? ;
.bss:00000000002206EB                 db    ? ;
.bss:00000000002206EC                 db    ? ;
.bss:00000000002206ED                 db    ? ;
.bss:00000000002206EE                 db    ? ;
.bss:00000000002206EF                 db    ? ;
.bss:00000000002206F0                 db    ? ;
.bss:00000000002206F1                 db    ? ;
.bss:00000000002206F2                 db    ? ;
.bss:00000000002206F3                 db    ? ;
.bss:00000000002206F4                 db    ? ;
.bss:00000000002206F5                 db    ? ;
.bss:00000000002206F6                 db    ? ;
.bss:00000000002206F7                 db    ? ;
.bss:00000000002206F8                 db    ? ;
.bss:00000000002206F9                 db    ? ;
.bss:00000000002206FA                 db    ? ;
.bss:00000000002206FB                 db    ? ;
.bss:00000000002206FC                 db    ? ;
.bss:00000000002206FD                 db    ? ;
.bss:00000000002206FE                 db    ? ;
.bss:00000000002206FF                 db    ? ;
.bss:0000000000220700                 db    ? ;
.bss:0000000000220701                 db    ? ;
.bss:0000000000220702                 db    ? ;
.bss:0000000000220703                 db    ? ;
.bss:0000000000220704                 db    ? ;
.bss:0000000000220705                 db    ? ;
.bss:0000000000220706                 db    ? ;
.bss:0000000000220707                 db    ? ;
.bss:0000000000220708                 db    ? ;
.bss:0000000000220709                 db    ? ;
.bss:000000000022070A                 db    ? ;
.bss:000000000022070B                 db    ? ;
.bss:000000000022070C                 db    ? ;
.bss:000000000022070D                 db    ? ;
.bss:000000000022070E                 db    ? ;
.bss:000000000022070F                 db    ? ;
.bss:0000000000220710                 db    ? ;
.bss:0000000000220711                 db    ? ;
.bss:0000000000220712                 db    ? ;
.bss:0000000000220713                 db    ? ;
.bss:0000000000220714                 db    ? ;
.bss:0000000000220715                 db    ? ;
.bss:0000000000220716                 db    ? ;
.bss:0000000000220717                 db    ? ;
.bss:0000000000220718                 db    ? ;
.bss:0000000000220719                 db    ? ;
.bss:000000000022071A                 db    ? ;
.bss:000000000022071B                 db    ? ;
.bss:000000000022071C                 db    ? ;
.bss:000000000022071D                 db    ? ;
.bss:000000000022071E                 db    ? ;
.bss:000000000022071F                 db    ? ;
.bss:0000000000220720                 db    ? ;
.bss:0000000000220721                 db    ? ;
.bss:0000000000220722                 db    ? ;
.bss:0000000000220723                 db    ? ;
.bss:0000000000220724                 db    ? ;
.bss:0000000000220725                 db    ? ;
.bss:0000000000220726                 db    ? ;
.bss:0000000000220727                 db    ? ;
.bss:0000000000220728                 db    ? ;
.bss:0000000000220729                 db    ? ;
.bss:000000000022072A                 db    ? ;
.bss:000000000022072B                 db    ? ;
.bss:000000000022072C                 db    ? ;
.bss:000000000022072D                 db    ? ;
.bss:000000000022072E                 db    ? ;
.bss:000000000022072F                 db    ? ;
.bss:0000000000220730                 db    ? ;
.bss:0000000000220731                 db    ? ;
.bss:0000000000220732                 db    ? ;
.bss:0000000000220733                 db    ? ;
.bss:0000000000220734                 db    ? ;
.bss:0000000000220735                 db    ? ;
.bss:0000000000220736                 db    ? ;
.bss:0000000000220737                 db    ? ;
.bss:0000000000220738                 db    ? ;
.bss:0000000000220739                 db    ? ;
.bss:000000000022073A                 db    ? ;
.bss:000000000022073B                 db    ? ;
.bss:000000000022073C                 db    ? ;
.bss:000000000022073D                 db    ? ;
.bss:000000000022073E                 db    ? ;
.bss:000000000022073F                 db    ? ;
.bss:0000000000220740                 db    ? ;
.bss:0000000000220741                 db    ? ;
.bss:0000000000220742                 db    ? ;
.bss:0000000000220743                 db    ? ;
.bss:0000000000220744                 db    ? ;
.bss:0000000000220745                 db    ? ;
.bss:0000000000220746                 db    ? ;
.bss:0000000000220747                 db    ? ;
.bss:0000000000220748                 db    ? ;
.bss:0000000000220749                 db    ? ;
.bss:000000000022074A                 db    ? ;
.bss:000000000022074B                 db    ? ;
.bss:000000000022074C                 db    ? ;
.bss:000000000022074D                 db    ? ;
.bss:000000000022074E                 db    ? ;
.bss:000000000022074F                 db    ? ;
.bss:0000000000220750                 db    ? ;
.bss:0000000000220751                 db    ? ;
.bss:0000000000220752                 db    ? ;
.bss:0000000000220753                 db    ? ;
.bss:0000000000220754                 db    ? ;
.bss:0000000000220755                 db    ? ;
.bss:0000000000220756                 db    ? ;
.bss:0000000000220757                 db    ? ;
.bss:0000000000220758                 db    ? ;
.bss:0000000000220759                 db    ? ;
.bss:000000000022075A                 db    ? ;
.bss:000000000022075B                 db    ? ;
.bss:000000000022075C                 db    ? ;
.bss:000000000022075D                 db    ? ;
.bss:000000000022075E                 db    ? ;
.bss:000000000022075F                 db    ? ;
.bss:0000000000220760                 db    ? ;
.bss:0000000000220761                 db    ? ;
.bss:0000000000220762                 db    ? ;
.bss:0000000000220763                 db    ? ;
.bss:0000000000220764                 db    ? ;
.bss:0000000000220765                 db    ? ;
.bss:0000000000220766                 db    ? ;
.bss:0000000000220767                 db    ? ;
.bss:0000000000220768                 db    ? ;
.bss:0000000000220769                 db    ? ;
.bss:000000000022076A                 db    ? ;
.bss:000000000022076B                 db    ? ;
.bss:000000000022076C                 db    ? ;
.bss:000000000022076D                 db    ? ;
.bss:000000000022076E                 db    ? ;
.bss:000000000022076F                 db    ? ;
.bss:0000000000220770                 db    ? ;
.bss:0000000000220771                 db    ? ;
.bss:0000000000220772                 db    ? ;
.bss:0000000000220773                 db    ? ;
.bss:0000000000220774                 db    ? ;
.bss:0000000000220775                 db    ? ;
.bss:0000000000220776                 db    ? ;
.bss:0000000000220777                 db    ? ;
.bss:0000000000220778                 db    ? ;
.bss:0000000000220779                 db    ? ;
.bss:000000000022077A                 db    ? ;
.bss:000000000022077B                 db    ? ;
.bss:000000000022077C                 db    ? ;
.bss:000000000022077D                 db    ? ;
.bss:000000000022077E                 db    ? ;
.bss:000000000022077F                 db    ? ;
.bss:0000000000220780                 db    ? ;
.bss:0000000000220781                 db    ? ;
.bss:0000000000220782                 db    ? ;
.bss:0000000000220783                 db    ? ;
.bss:0000000000220784                 db    ? ;
.bss:0000000000220785                 db    ? ;
.bss:0000000000220786                 db    ? ;
.bss:0000000000220787                 db    ? ;
.bss:0000000000220788                 db    ? ;
.bss:0000000000220789                 db    ? ;
.bss:000000000022078A                 db    ? ;
.bss:000000000022078B                 db    ? ;
.bss:000000000022078C                 db    ? ;
.bss:000000000022078D                 db    ? ;
.bss:000000000022078E                 db    ? ;
.bss:000000000022078F                 db    ? ;
.bss:0000000000220790                 db    ? ;
.bss:0000000000220791                 db    ? ;
.bss:0000000000220792                 db    ? ;
.bss:0000000000220793                 db    ? ;
.bss:0000000000220794                 db    ? ;
.bss:0000000000220795                 db    ? ;
.bss:0000000000220796                 db    ? ;
.bss:0000000000220797                 db    ? ;
.bss:0000000000220798                 db    ? ;
.bss:0000000000220799                 db    ? ;
.bss:000000000022079A                 db    ? ;
.bss:000000000022079B                 db    ? ;
.bss:000000000022079C                 db    ? ;
.bss:000000000022079D                 db    ? ;
.bss:000000000022079E                 db    ? ;
.bss:000000000022079F                 db    ? ;
.bss:00000000002207A0                 db    ? ;
.bss:00000000002207A1                 db    ? ;
.bss:00000000002207A2                 db    ? ;
.bss:00000000002207A3                 db    ? ;
.bss:00000000002207A4                 db    ? ;
.bss:00000000002207A5                 db    ? ;
.bss:00000000002207A6                 db    ? ;
.bss:00000000002207A7                 db    ? ;
.bss:00000000002207A8                 db    ? ;
.bss:00000000002207A9                 db    ? ;
.bss:00000000002207AA                 db    ? ;
.bss:00000000002207AB                 db    ? ;
.bss:00000000002207AC                 db    ? ;
.bss:00000000002207AD                 db    ? ;
.bss:00000000002207AE                 db    ? ;
.bss:00000000002207AF                 db    ? ;
.bss:00000000002207B0                 db    ? ;
.bss:00000000002207B1                 db    ? ;
.bss:00000000002207B2                 db    ? ;
.bss:00000000002207B3                 db    ? ;
.bss:00000000002207B4                 db    ? ;
.bss:00000000002207B5                 db    ? ;
.bss:00000000002207B6                 db    ? ;
.bss:00000000002207B7                 db    ? ;
.bss:00000000002207B8                 db    ? ;
.bss:00000000002207B9                 db    ? ;
.bss:00000000002207BA                 db    ? ;
.bss:00000000002207BB                 db    ? ;
.bss:00000000002207BC                 db    ? ;
.bss:00000000002207BD                 db    ? ;
.bss:00000000002207BE                 db    ? ;
.bss:00000000002207BF                 db    ? ;
.bss:00000000002207C0                 db    ? ;
.bss:00000000002207C1                 db    ? ;
.bss:00000000002207C2                 db    ? ;
.bss:00000000002207C3                 db    ? ;
.bss:00000000002207C4                 db    ? ;
.bss:00000000002207C5                 db    ? ;
.bss:00000000002207C6                 db    ? ;
.bss:00000000002207C7                 db    ? ;
.bss:00000000002207C8                 db    ? ;
.bss:00000000002207C9                 db    ? ;
.bss:00000000002207CA                 db    ? ;
.bss:00000000002207CB                 db    ? ;
.bss:00000000002207CC                 db    ? ;
.bss:00000000002207CD                 db    ? ;
.bss:00000000002207CE                 db    ? ;
.bss:00000000002207CF                 db    ? ;
.bss:00000000002207D0                 db    ? ;
.bss:00000000002207D1                 db    ? ;
.bss:00000000002207D2                 db    ? ;
.bss:00000000002207D3                 db    ? ;
.bss:00000000002207D4                 db    ? ;
.bss:00000000002207D5                 db    ? ;
.bss:00000000002207D6                 db    ? ;
.bss:00000000002207D7                 db    ? ;
.bss:00000000002207D8                 db    ? ;
.bss:00000000002207D9                 db    ? ;
.bss:00000000002207DA                 db    ? ;
.bss:00000000002207DB                 db    ? ;
.bss:00000000002207DC                 db    ? ;
.bss:00000000002207DD                 db    ? ;
.bss:00000000002207DE                 db    ? ;
.bss:00000000002207DF                 db    ? ;
.bss:00000000002207E0                 db    ? ;
.bss:00000000002207E1                 db    ? ;
.bss:00000000002207E2                 db    ? ;
.bss:00000000002207E3                 db    ? ;
.bss:00000000002207E4                 db    ? ;
.bss:00000000002207E5                 db    ? ;
.bss:00000000002207E6                 db    ? ;
.bss:00000000002207E7                 db    ? ;
.bss:00000000002207E8                 db    ? ;
.bss:00000000002207E9                 db    ? ;
.bss:00000000002207EA                 db    ? ;
.bss:00000000002207EB                 db    ? ;
.bss:00000000002207EC                 db    ? ;
.bss:00000000002207ED                 db    ? ;
.bss:00000000002207EE                 db    ? ;
.bss:00000000002207EF                 db    ? ;
.bss:00000000002207F0                 db    ? ;
.bss:00000000002207F1                 db    ? ;
.bss:00000000002207F2                 db    ? ;
.bss:00000000002207F3                 db    ? ;
.bss:00000000002207F4                 db    ? ;
.bss:00000000002207F5                 db    ? ;
.bss:00000000002207F6                 db    ? ;
.bss:00000000002207F7                 db    ? ;
.bss:00000000002207F8                 db    ? ;
.bss:00000000002207F9                 db    ? ;
.bss:00000000002207FA                 db    ? ;
.bss:00000000002207FB                 db    ? ;
.bss:00000000002207FC                 db    ? ;
.bss:00000000002207FD                 db    ? ;
.bss:00000000002207FE                 db    ? ;
.bss:00000000002207FF                 db    ? ;
.bss:0000000000220800                 db    ? ;
.bss:0000000000220801                 db    ? ;
.bss:0000000000220802                 db    ? ;
.bss:0000000000220803                 db    ? ;
.bss:0000000000220804                 db    ? ;
.bss:0000000000220805                 db    ? ;
.bss:0000000000220806                 db    ? ;
.bss:0000000000220807                 db    ? ;
.bss:0000000000220808                 db    ? ;
.bss:0000000000220809                 db    ? ;
.bss:000000000022080A                 db    ? ;
.bss:000000000022080B                 db    ? ;
.bss:000000000022080C                 db    ? ;
.bss:000000000022080D                 db    ? ;
.bss:000000000022080E                 db    ? ;
.bss:000000000022080F                 db    ? ;
.bss:0000000000220810                 db    ? ;
.bss:0000000000220811                 db    ? ;
.bss:0000000000220812                 db    ? ;
.bss:0000000000220813                 db    ? ;
.bss:0000000000220814                 db    ? ;
.bss:0000000000220815                 db    ? ;
.bss:0000000000220816                 db    ? ;
.bss:0000000000220817                 db    ? ;
.bss:0000000000220818                 db    ? ;
.bss:0000000000220819                 db    ? ;
.bss:000000000022081A                 db    ? ;
.bss:000000000022081B                 db    ? ;
.bss:000000000022081C                 db    ? ;
.bss:000000000022081D                 db    ? ;
.bss:000000000022081E                 db    ? ;
.bss:000000000022081F                 db    ? ;
.bss:0000000000220820                 db    ? ;
.bss:0000000000220821                 db    ? ;
.bss:0000000000220822                 db    ? ;
.bss:0000000000220823                 db    ? ;
.bss:0000000000220824                 db    ? ;
.bss:0000000000220825                 db    ? ;
.bss:0000000000220826                 db    ? ;
.bss:0000000000220827                 db    ? ;
.bss:0000000000220828                 db    ? ;
.bss:0000000000220829                 db    ? ;
.bss:000000000022082A                 db    ? ;
.bss:000000000022082B                 db    ? ;
.bss:000000000022082C                 db    ? ;
.bss:000000000022082D                 db    ? ;
.bss:000000000022082E                 db    ? ;
.bss:000000000022082F                 db    ? ;
.bss:0000000000220830                 db    ? ;
.bss:0000000000220831                 db    ? ;
.bss:0000000000220832                 db    ? ;
.bss:0000000000220833                 db    ? ;
.bss:0000000000220834                 db    ? ;
.bss:0000000000220835                 db    ? ;
.bss:0000000000220836                 db    ? ;
.bss:0000000000220837                 db    ? ;
.bss:0000000000220838                 db    ? ;
.bss:0000000000220839                 db    ? ;
.bss:000000000022083A                 db    ? ;
.bss:000000000022083B                 db    ? ;
.bss:000000000022083C                 db    ? ;
.bss:000000000022083D                 db    ? ;
.bss:000000000022083E                 db    ? ;
.bss:000000000022083F                 db    ? ;
.bss:0000000000220840                 db    ? ;
.bss:0000000000220841                 db    ? ;
.bss:0000000000220842                 db    ? ;
.bss:0000000000220843                 db    ? ;
.bss:0000000000220844                 db    ? ;
.bss:0000000000220845                 db    ? ;
.bss:0000000000220846                 db    ? ;
.bss:0000000000220847                 db    ? ;
.bss:0000000000220848                 db    ? ;
.bss:0000000000220849                 db    ? ;
.bss:000000000022084A                 db    ? ;
.bss:000000000022084B                 db    ? ;
.bss:000000000022084C                 db    ? ;
.bss:000000000022084D                 db    ? ;
.bss:000000000022084E                 db    ? ;
.bss:000000000022084F                 db    ? ;
.bss:0000000000220850                 db    ? ;
.bss:0000000000220851                 db    ? ;
.bss:0000000000220852                 db    ? ;
.bss:0000000000220853                 db    ? ;
.bss:0000000000220854                 db    ? ;
.bss:0000000000220855                 db    ? ;
.bss:0000000000220856                 db    ? ;
.bss:0000000000220857                 db    ? ;
.bss:0000000000220858                 db    ? ;
.bss:0000000000220859                 db    ? ;
.bss:000000000022085A                 db    ? ;
.bss:000000000022085B                 db    ? ;
.bss:000000000022085C                 db    ? ;
.bss:000000000022085D                 db    ? ;
.bss:000000000022085E                 db    ? ;
.bss:000000000022085F                 db    ? ;
.bss:0000000000220860                 db    ? ;
.bss:0000000000220861                 db    ? ;
.bss:0000000000220862                 db    ? ;
.bss:0000000000220863                 db    ? ;
.bss:0000000000220864                 db    ? ;
.bss:0000000000220865                 db    ? ;
.bss:0000000000220866                 db    ? ;
.bss:0000000000220867                 db    ? ;
.bss:0000000000220868                 db    ? ;
.bss:0000000000220869                 db    ? ;
.bss:000000000022086A                 db    ? ;
.bss:000000000022086B                 db    ? ;
.bss:000000000022086C                 db    ? ;
.bss:000000000022086D                 db    ? ;
.bss:000000000022086E                 db    ? ;
.bss:000000000022086F                 db    ? ;
.bss:0000000000220870                 db    ? ;
.bss:0000000000220871                 db    ? ;
.bss:0000000000220872                 db    ? ;
.bss:0000000000220873                 db    ? ;
.bss:0000000000220874                 db    ? ;
.bss:0000000000220875                 db    ? ;
.bss:0000000000220876                 db    ? ;
.bss:0000000000220877                 db    ? ;
.bss:0000000000220878                 db    ? ;
.bss:0000000000220879                 db    ? ;
.bss:000000000022087A                 db    ? ;
.bss:000000000022087B                 db    ? ;
.bss:000000000022087C                 db    ? ;
.bss:000000000022087D                 db    ? ;
.bss:000000000022087E                 db    ? ;
.bss:000000000022087F                 db    ? ;
.bss:0000000000220880                 db    ? ;
.bss:0000000000220881                 db    ? ;
.bss:0000000000220882                 db    ? ;
.bss:0000000000220883                 db    ? ;
.bss:0000000000220884                 db    ? ;
.bss:0000000000220885                 db    ? ;
.bss:0000000000220886                 db    ? ;
.bss:0000000000220887                 db    ? ;
.bss:0000000000220888                 db    ? ;
.bss:0000000000220889                 db    ? ;
.bss:000000000022088A                 db    ? ;
.bss:000000000022088B                 db    ? ;
.bss:000000000022088C                 db    ? ;
.bss:000000000022088D                 db    ? ;
.bss:000000000022088E                 db    ? ;
.bss:000000000022088F                 db    ? ;
.bss:0000000000220890                 db    ? ;
.bss:0000000000220891                 db    ? ;
.bss:0000000000220892                 db    ? ;
.bss:0000000000220893                 db    ? ;
.bss:0000000000220894                 db    ? ;
.bss:0000000000220895                 db    ? ;
.bss:0000000000220896                 db    ? ;
.bss:0000000000220897                 db    ? ;
.bss:0000000000220898                 db    ? ;
.bss:0000000000220899                 db    ? ;
.bss:000000000022089A                 db    ? ;
.bss:000000000022089B                 db    ? ;
.bss:000000000022089C                 db    ? ;
.bss:000000000022089D                 db    ? ;
.bss:000000000022089E                 db    ? ;
.bss:000000000022089F                 db    ? ;
.bss:00000000002208A0                 db    ? ;
.bss:00000000002208A1                 db    ? ;
.bss:00000000002208A2                 db    ? ;
.bss:00000000002208A3                 db    ? ;
.bss:00000000002208A4                 db    ? ;
.bss:00000000002208A5                 db    ? ;
.bss:00000000002208A6                 db    ? ;
.bss:00000000002208A7                 db    ? ;
.bss:00000000002208A8                 db    ? ;
.bss:00000000002208A9                 db    ? ;
.bss:00000000002208AA                 db    ? ;
.bss:00000000002208AB                 db    ? ;
.bss:00000000002208AC                 db    ? ;
.bss:00000000002208AD                 db    ? ;
.bss:00000000002208AE                 db    ? ;
.bss:00000000002208AF                 db    ? ;
.bss:00000000002208B0                 db    ? ;
.bss:00000000002208B1                 db    ? ;
.bss:00000000002208B2                 db    ? ;
.bss:00000000002208B3                 db    ? ;
.bss:00000000002208B4                 db    ? ;
.bss:00000000002208B5                 db    ? ;
.bss:00000000002208B6                 db    ? ;
.bss:00000000002208B7                 db    ? ;
.bss:00000000002208B8                 db    ? ;
.bss:00000000002208B9                 db    ? ;
.bss:00000000002208BA                 db    ? ;
.bss:00000000002208BB                 db    ? ;
.bss:00000000002208BC                 db    ? ;
.bss:00000000002208BD                 db    ? ;
.bss:00000000002208BE                 db    ? ;
.bss:00000000002208BF                 db    ? ;
.bss:00000000002208C0                 db    ? ;
.bss:00000000002208C1                 db    ? ;
.bss:00000000002208C2                 db    ? ;
.bss:00000000002208C3                 db    ? ;
.bss:00000000002208C4                 db    ? ;
.bss:00000000002208C5                 db    ? ;
.bss:00000000002208C6                 db    ? ;
.bss:00000000002208C7                 db    ? ;
.bss:00000000002208C8                 db    ? ;
.bss:00000000002208C9                 db    ? ;
.bss:00000000002208CA                 db    ? ;
.bss:00000000002208CB                 db    ? ;
.bss:00000000002208CC                 db    ? ;
.bss:00000000002208CD                 db    ? ;
.bss:00000000002208CE                 db    ? ;
.bss:00000000002208CF                 db    ? ;
.bss:00000000002208D0                 db    ? ;
.bss:00000000002208D1                 db    ? ;
.bss:00000000002208D2                 db    ? ;
.bss:00000000002208D3                 db    ? ;
.bss:00000000002208D4                 db    ? ;
.bss:00000000002208D5                 db    ? ;
.bss:00000000002208D6                 db    ? ;
.bss:00000000002208D7                 db    ? ;
.bss:00000000002208D8                 db    ? ;
.bss:00000000002208D9                 db    ? ;
.bss:00000000002208DA                 db    ? ;
.bss:00000000002208DB                 db    ? ;
.bss:00000000002208DC                 db    ? ;
.bss:00000000002208DD                 db    ? ;
.bss:00000000002208DE                 db    ? ;
.bss:00000000002208DF                 db    ? ;
.bss:00000000002208E0                 db    ? ;
.bss:00000000002208E1                 db    ? ;
.bss:00000000002208E2                 db    ? ;
.bss:00000000002208E3                 db    ? ;
.bss:00000000002208E4                 db    ? ;
.bss:00000000002208E5                 db    ? ;
.bss:00000000002208E6                 db    ? ;
.bss:00000000002208E7                 db    ? ;
.bss:00000000002208E8                 db    ? ;
.bss:00000000002208E9                 db    ? ;
.bss:00000000002208EA                 db    ? ;
.bss:00000000002208EB                 db    ? ;
.bss:00000000002208EC                 db    ? ;
.bss:00000000002208ED                 db    ? ;
.bss:00000000002208EE                 db    ? ;
.bss:00000000002208EF                 db    ? ;
.bss:00000000002208F0                 db    ? ;
.bss:00000000002208F1                 db    ? ;
.bss:00000000002208F2                 db    ? ;
.bss:00000000002208F3                 db    ? ;
.bss:00000000002208F4                 db    ? ;
.bss:00000000002208F5                 db    ? ;
.bss:00000000002208F6                 db    ? ;
.bss:00000000002208F7                 db    ? ;
.bss:00000000002208F8                 db    ? ;
.bss:00000000002208F9                 db    ? ;
.bss:00000000002208FA                 db    ? ;
.bss:00000000002208FB                 db    ? ;
.bss:00000000002208FC                 db    ? ;
.bss:00000000002208FD                 db    ? ;
.bss:00000000002208FE                 db    ? ;
.bss:00000000002208FF                 db    ? ;
.bss:0000000000220900                 db    ? ;
.bss:0000000000220901                 db    ? ;
.bss:0000000000220902                 db    ? ;
.bss:0000000000220903                 db    ? ;
.bss:0000000000220904                 db    ? ;
.bss:0000000000220905                 db    ? ;
.bss:0000000000220906                 db    ? ;
.bss:0000000000220907                 db    ? ;
.bss:0000000000220908                 db    ? ;
.bss:0000000000220909                 db    ? ;
.bss:000000000022090A                 db    ? ;
.bss:000000000022090B                 db    ? ;
.bss:000000000022090C                 db    ? ;
.bss:000000000022090D                 db    ? ;
.bss:000000000022090E                 db    ? ;
.bss:000000000022090F                 db    ? ;
.bss:0000000000220910                 db    ? ;
.bss:0000000000220911                 db    ? ;
.bss:0000000000220912                 db    ? ;
.bss:0000000000220913                 db    ? ;
.bss:0000000000220914                 db    ? ;
.bss:0000000000220915                 db    ? ;
.bss:0000000000220916                 db    ? ;
.bss:0000000000220917                 db    ? ;
.bss:0000000000220918                 db    ? ;
.bss:0000000000220919                 db    ? ;
.bss:000000000022091A                 db    ? ;
.bss:000000000022091B                 db    ? ;
.bss:000000000022091C                 db    ? ;
.bss:000000000022091D                 db    ? ;
.bss:000000000022091E                 db    ? ;
.bss:000000000022091F                 db    ? ;
.bss:0000000000220920                 db    ? ;
.bss:0000000000220921                 db    ? ;
.bss:0000000000220922                 db    ? ;
.bss:0000000000220923                 db    ? ;
.bss:0000000000220924                 db    ? ;
.bss:0000000000220925                 db    ? ;
.bss:0000000000220926                 db    ? ;
.bss:0000000000220927                 db    ? ;
.bss:0000000000220928                 db    ? ;
.bss:0000000000220929                 db    ? ;
.bss:000000000022092A                 db    ? ;
.bss:000000000022092B                 db    ? ;
.bss:000000000022092C                 db    ? ;
.bss:000000000022092D                 db    ? ;
.bss:000000000022092E                 db    ? ;
.bss:000000000022092F                 db    ? ;
.bss:0000000000220930                 db    ? ;
.bss:0000000000220931                 db    ? ;
.bss:0000000000220932                 db    ? ;
.bss:0000000000220933                 db    ? ;
.bss:0000000000220934                 db    ? ;
.bss:0000000000220935                 db    ? ;
.bss:0000000000220936                 db    ? ;
.bss:0000000000220937                 db    ? ;
.bss:0000000000220938                 db    ? ;
.bss:0000000000220939                 db    ? ;
.bss:000000000022093A                 db    ? ;
.bss:000000000022093B                 db    ? ;
.bss:000000000022093C                 db    ? ;
.bss:000000000022093D                 db    ? ;
.bss:000000000022093E                 db    ? ;
.bss:000000000022093F                 db    ? ;
.bss:0000000000220940                 db    ? ;
.bss:0000000000220941                 db    ? ;
.bss:0000000000220942                 db    ? ;
.bss:0000000000220943                 db    ? ;
.bss:0000000000220944                 db    ? ;
.bss:0000000000220945                 db    ? ;
.bss:0000000000220946                 db    ? ;
.bss:0000000000220947                 db    ? ;
.bss:0000000000220948                 db    ? ;
.bss:0000000000220949                 db    ? ;
.bss:000000000022094A                 db    ? ;
.bss:000000000022094B                 db    ? ;
.bss:000000000022094C                 db    ? ;
.bss:000000000022094D                 db    ? ;
.bss:000000000022094E                 db    ? ;
.bss:000000000022094F                 db    ? ;
.bss:0000000000220950                 db    ? ;
.bss:0000000000220951                 db    ? ;
.bss:0000000000220952                 db    ? ;
.bss:0000000000220953                 db    ? ;
.bss:0000000000220954                 db    ? ;
.bss:0000000000220955                 db    ? ;
.bss:0000000000220956                 db    ? ;
.bss:0000000000220957                 db    ? ;
.bss:0000000000220958                 db    ? ;
.bss:0000000000220959                 db    ? ;
.bss:000000000022095A                 db    ? ;
.bss:000000000022095B                 db    ? ;
.bss:000000000022095C                 db    ? ;
.bss:000000000022095D                 db    ? ;
.bss:000000000022095E                 db    ? ;
.bss:000000000022095F                 db    ? ;
.bss:0000000000220960                 db    ? ;
.bss:0000000000220961                 db    ? ;
.bss:0000000000220962                 db    ? ;
.bss:0000000000220963                 db    ? ;
.bss:0000000000220964                 db    ? ;
.bss:0000000000220965                 db    ? ;
.bss:0000000000220966                 db    ? ;
.bss:0000000000220967                 db    ? ;
.bss:0000000000220968                 db    ? ;
.bss:0000000000220969                 db    ? ;
.bss:000000000022096A                 db    ? ;
.bss:000000000022096B                 db    ? ;
.bss:000000000022096C                 db    ? ;
.bss:000000000022096D                 db    ? ;
.bss:000000000022096E                 db    ? ;
.bss:000000000022096F                 db    ? ;
.bss:0000000000220970                 db    ? ;
.bss:0000000000220971                 db    ? ;
.bss:0000000000220972                 db    ? ;
.bss:0000000000220973                 db    ? ;
.bss:0000000000220974                 db    ? ;
.bss:0000000000220975                 db    ? ;
.bss:0000000000220976                 db    ? ;
.bss:0000000000220977                 db    ? ;
.bss:0000000000220978                 db    ? ;
.bss:0000000000220979                 db    ? ;
.bss:000000000022097A                 db    ? ;
.bss:000000000022097B                 db    ? ;
.bss:000000000022097C                 db    ? ;
.bss:000000000022097D                 db    ? ;
.bss:000000000022097E                 db    ? ;
.bss:000000000022097F                 db    ? ;
.bss:0000000000220980                 db    ? ;
.bss:0000000000220981                 db    ? ;
.bss:0000000000220982                 db    ? ;
.bss:0000000000220983                 db    ? ;
.bss:0000000000220984                 db    ? ;
.bss:0000000000220985                 db    ? ;
.bss:0000000000220986                 db    ? ;
.bss:0000000000220987                 db    ? ;
.bss:0000000000220988                 db    ? ;
.bss:0000000000220989                 db    ? ;
.bss:000000000022098A                 db    ? ;
.bss:000000000022098B                 db    ? ;
.bss:000000000022098C                 db    ? ;
.bss:000000000022098D                 db    ? ;
.bss:000000000022098E                 db    ? ;
.bss:000000000022098F                 db    ? ;
.bss:0000000000220990                 db    ? ;
.bss:0000000000220991                 db    ? ;
.bss:0000000000220992                 db    ? ;
.bss:0000000000220993                 db    ? ;
.bss:0000000000220994                 db    ? ;
.bss:0000000000220995                 db    ? ;
.bss:0000000000220996                 db    ? ;
.bss:0000000000220997                 db    ? ;
.bss:0000000000220998                 db    ? ;
.bss:0000000000220999                 db    ? ;
.bss:000000000022099A                 db    ? ;
.bss:000000000022099B                 db    ? ;
.bss:000000000022099C                 db    ? ;
.bss:000000000022099D                 db    ? ;
.bss:000000000022099E                 db    ? ;
.bss:000000000022099F                 db    ? ;
.bss:00000000002209A0                 db    ? ;
.bss:00000000002209A1                 db    ? ;
.bss:00000000002209A2                 db    ? ;
.bss:00000000002209A3                 db    ? ;
.bss:00000000002209A4                 db    ? ;
.bss:00000000002209A5                 db    ? ;
.bss:00000000002209A6                 db    ? ;
.bss:00000000002209A7                 db    ? ;
.bss:00000000002209A8                 db    ? ;
.bss:00000000002209A9                 db    ? ;
.bss:00000000002209AA                 db    ? ;
.bss:00000000002209AB                 db    ? ;
.bss:00000000002209AC                 db    ? ;
.bss:00000000002209AD                 db    ? ;
.bss:00000000002209AE                 db    ? ;
.bss:00000000002209AF                 db    ? ;
.bss:00000000002209B0                 db    ? ;
.bss:00000000002209B1                 db    ? ;
.bss:00000000002209B2                 db    ? ;
.bss:00000000002209B3                 db    ? ;
.bss:00000000002209B4                 db    ? ;
.bss:00000000002209B5                 db    ? ;
.bss:00000000002209B6                 db    ? ;
.bss:00000000002209B7                 db    ? ;
.bss:00000000002209B8                 db    ? ;
.bss:00000000002209B9                 db    ? ;
.bss:00000000002209BA                 db    ? ;
.bss:00000000002209BB                 db    ? ;
.bss:00000000002209BC                 db    ? ;
.bss:00000000002209BD                 db    ? ;
.bss:00000000002209BE                 db    ? ;
.bss:00000000002209BF                 db    ? ;
.bss:00000000002209C0                 db    ? ;
.bss:00000000002209C1                 db    ? ;
.bss:00000000002209C2                 db    ? ;
.bss:00000000002209C3                 db    ? ;
.bss:00000000002209C4                 db    ? ;
.bss:00000000002209C5                 db    ? ;
.bss:00000000002209C6                 db    ? ;
.bss:00000000002209C7                 db    ? ;
.bss:00000000002209C8                 db    ? ;
.bss:00000000002209C9                 db    ? ;
.bss:00000000002209CA                 db    ? ;
.bss:00000000002209CB                 db    ? ;
.bss:00000000002209CC                 db    ? ;
.bss:00000000002209CD                 db    ? ;
.bss:00000000002209CE                 db    ? ;
.bss:00000000002209CF                 db    ? ;
.bss:00000000002209D0                 db    ? ;
.bss:00000000002209D1                 db    ? ;
.bss:00000000002209D2                 db    ? ;
.bss:00000000002209D3                 db    ? ;
.bss:00000000002209D4                 db    ? ;
.bss:00000000002209D5                 db    ? ;
.bss:00000000002209D6                 db    ? ;
.bss:00000000002209D7                 db    ? ;
.bss:00000000002209D8                 db    ? ;
.bss:00000000002209D9                 db    ? ;
.bss:00000000002209DA                 db    ? ;
.bss:00000000002209DB                 db    ? ;
.bss:00000000002209DC                 db    ? ;
.bss:00000000002209DD                 db    ? ;
.bss:00000000002209DE                 db    ? ;
.bss:00000000002209DF                 db    ? ;
.bss:00000000002209E0                 db    ? ;
.bss:00000000002209E1                 db    ? ;
.bss:00000000002209E2                 db    ? ;
.bss:00000000002209E3                 db    ? ;
.bss:00000000002209E4                 db    ? ;
.bss:00000000002209E5                 db    ? ;
.bss:00000000002209E6                 db    ? ;
.bss:00000000002209E7                 db    ? ;
.bss:00000000002209E8                 db    ? ;
.bss:00000000002209E9                 db    ? ;
.bss:00000000002209EA                 db    ? ;
.bss:00000000002209EB                 db    ? ;
.bss:00000000002209EC                 db    ? ;
.bss:00000000002209ED                 db    ? ;
.bss:00000000002209EE                 db    ? ;
.bss:00000000002209EF                 db    ? ;
.bss:00000000002209F0                 db    ? ;
.bss:00000000002209F1                 db    ? ;
.bss:00000000002209F2                 db    ? ;
.bss:00000000002209F3                 db    ? ;
.bss:00000000002209F4                 db    ? ;
.bss:00000000002209F5                 db    ? ;
.bss:00000000002209F6                 db    ? ;
.bss:00000000002209F7                 db    ? ;
.bss:00000000002209F8                 db    ? ;
.bss:00000000002209F9                 db    ? ;
.bss:00000000002209FA                 db    ? ;
.bss:00000000002209FB                 db    ? ;
.bss:00000000002209FC                 db    ? ;
.bss:00000000002209FD                 db    ? ;
.bss:00000000002209FE                 db    ? ;
.bss:00000000002209FF                 db    ? ;
.bss:0000000000220A00                 db    ? ;
.bss:0000000000220A01                 db    ? ;
.bss:0000000000220A02                 db    ? ;
.bss:0000000000220A03                 db    ? ;
.bss:0000000000220A04                 db    ? ;
.bss:0000000000220A05                 db    ? ;
.bss:0000000000220A06                 db    ? ;
.bss:0000000000220A07                 db    ? ;
.bss:0000000000220A08                 db    ? ;
.bss:0000000000220A09                 db    ? ;
.bss:0000000000220A0A                 db    ? ;
.bss:0000000000220A0B                 db    ? ;
.bss:0000000000220A0C                 db    ? ;
.bss:0000000000220A0D                 db    ? ;
.bss:0000000000220A0E                 db    ? ;
.bss:0000000000220A0F                 db    ? ;
.bss:0000000000220A10                 db    ? ;
.bss:0000000000220A11                 db    ? ;
.bss:0000000000220A12                 db    ? ;
.bss:0000000000220A13                 db    ? ;
.bss:0000000000220A14                 db    ? ;
.bss:0000000000220A15                 db    ? ;
.bss:0000000000220A16                 db    ? ;
.bss:0000000000220A17                 db    ? ;
.bss:0000000000220A18                 db    ? ;
.bss:0000000000220A19                 db    ? ;
.bss:0000000000220A1A                 db    ? ;
.bss:0000000000220A1B                 db    ? ;
.bss:0000000000220A1C                 db    ? ;
.bss:0000000000220A1D                 db    ? ;
.bss:0000000000220A1E                 db    ? ;
.bss:0000000000220A1F                 db    ? ;
.bss:0000000000220A20                 db    ? ;
.bss:0000000000220A21                 db    ? ;
.bss:0000000000220A22                 db    ? ;
.bss:0000000000220A23                 db    ? ;
.bss:0000000000220A24                 db    ? ;
.bss:0000000000220A25                 db    ? ;
.bss:0000000000220A26                 db    ? ;
.bss:0000000000220A27                 db    ? ;
.bss:0000000000220A28                 db    ? ;
.bss:0000000000220A29                 db    ? ;
.bss:0000000000220A2A                 db    ? ;
.bss:0000000000220A2B                 db    ? ;
.bss:0000000000220A2C                 db    ? ;
.bss:0000000000220A2D                 db    ? ;
.bss:0000000000220A2E                 db    ? ;
.bss:0000000000220A2F                 db    ? ;
.bss:0000000000220A30                 db    ? ;
.bss:0000000000220A31                 db    ? ;
.bss:0000000000220A32                 db    ? ;
.bss:0000000000220A33                 db    ? ;
.bss:0000000000220A34                 db    ? ;
.bss:0000000000220A35                 db    ? ;
.bss:0000000000220A36                 db    ? ;
.bss:0000000000220A37                 db    ? ;
.bss:0000000000220A38                 db    ? ;
.bss:0000000000220A39                 db    ? ;
.bss:0000000000220A3A                 db    ? ;
.bss:0000000000220A3B                 db    ? ;
.bss:0000000000220A3C                 db    ? ;
.bss:0000000000220A3D                 db    ? ;
.bss:0000000000220A3E                 db    ? ;
.bss:0000000000220A3F                 db    ? ;
.bss:0000000000220A40                 db    ? ;
.bss:0000000000220A41                 db    ? ;
.bss:0000000000220A42                 db    ? ;
.bss:0000000000220A43                 db    ? ;
.bss:0000000000220A44                 db    ? ;
.bss:0000000000220A45                 db    ? ;
.bss:0000000000220A46                 db    ? ;
.bss:0000000000220A47                 db    ? ;
.bss:0000000000220A48                 db    ? ;
.bss:0000000000220A49                 db    ? ;
.bss:0000000000220A4A                 db    ? ;
.bss:0000000000220A4B                 db    ? ;
.bss:0000000000220A4C                 db    ? ;
.bss:0000000000220A4D                 db    ? ;
.bss:0000000000220A4E                 db    ? ;
.bss:0000000000220A4F                 db    ? ;
.bss:0000000000220A50                 db    ? ;
.bss:0000000000220A51                 db    ? ;
.bss:0000000000220A52                 db    ? ;
.bss:0000000000220A53                 db    ? ;
.bss:0000000000220A54                 db    ? ;
.bss:0000000000220A55                 db    ? ;
.bss:0000000000220A56                 db    ? ;
.bss:0000000000220A57                 db    ? ;
.bss:0000000000220A58                 db    ? ;
.bss:0000000000220A59                 db    ? ;
.bss:0000000000220A5A                 db    ? ;
.bss:0000000000220A5B                 db    ? ;
.bss:0000000000220A5C                 db    ? ;
.bss:0000000000220A5D                 db    ? ;
.bss:0000000000220A5E                 db    ? ;
.bss:0000000000220A5F                 db    ? ;
.bss:0000000000220A60                 db    ? ;
.bss:0000000000220A61                 db    ? ;
.bss:0000000000220A62                 db    ? ;
.bss:0000000000220A63                 db    ? ;
.bss:0000000000220A64                 db    ? ;
.bss:0000000000220A65                 db    ? ;
.bss:0000000000220A66                 db    ? ;
.bss:0000000000220A67                 db    ? ;
.bss:0000000000220A68                 db    ? ;
.bss:0000000000220A69                 db    ? ;
.bss:0000000000220A6A                 db    ? ;
.bss:0000000000220A6B                 db    ? ;
.bss:0000000000220A6C                 db    ? ;
.bss:0000000000220A6D                 db    ? ;
.bss:0000000000220A6E                 db    ? ;
.bss:0000000000220A6F                 db    ? ;
.bss:0000000000220A70                 db    ? ;
.bss:0000000000220A71                 db    ? ;
.bss:0000000000220A72                 db    ? ;
.bss:0000000000220A73                 db    ? ;
.bss:0000000000220A74                 db    ? ;
.bss:0000000000220A75                 db    ? ;
.bss:0000000000220A76                 db    ? ;
.bss:0000000000220A77                 db    ? ;
.bss:0000000000220A78                 db    ? ;
.bss:0000000000220A79                 db    ? ;
.bss:0000000000220A7A                 db    ? ;
.bss:0000000000220A7B                 db    ? ;
.bss:0000000000220A7C                 db    ? ;
.bss:0000000000220A7D                 db    ? ;
.bss:0000000000220A7E                 db    ? ;
.bss:0000000000220A7F                 db    ? ;
.bss:0000000000220A80                 db    ? ;
.bss:0000000000220A81                 db    ? ;
.bss:0000000000220A82                 db    ? ;
.bss:0000000000220A83                 db    ? ;
.bss:0000000000220A84                 db    ? ;
.bss:0000000000220A85                 db    ? ;
.bss:0000000000220A86                 db    ? ;
.bss:0000000000220A87                 db    ? ;
.bss:0000000000220A88                 db    ? ;
.bss:0000000000220A89                 db    ? ;
.bss:0000000000220A8A                 db    ? ;
.bss:0000000000220A8B                 db    ? ;
.bss:0000000000220A8C                 db    ? ;
.bss:0000000000220A8D                 db    ? ;
.bss:0000000000220A8E                 db    ? ;
.bss:0000000000220A8F                 db    ? ;
.bss:0000000000220A90                 db    ? ;
.bss:0000000000220A91                 db    ? ;
.bss:0000000000220A92                 db    ? ;
.bss:0000000000220A93                 db    ? ;
.bss:0000000000220A94                 db    ? ;
.bss:0000000000220A95                 db    ? ;
.bss:0000000000220A96                 db    ? ;
.bss:0000000000220A97                 db    ? ;
.bss:0000000000220A98                 db    ? ;
.bss:0000000000220A99                 db    ? ;
.bss:0000000000220A9A                 db    ? ;
.bss:0000000000220A9B                 db    ? ;
.bss:0000000000220A9C                 db    ? ;
.bss:0000000000220A9D                 db    ? ;
.bss:0000000000220A9E                 db    ? ;
.bss:0000000000220A9F                 db    ? ;
.bss:0000000000220AA0                 db    ? ;
.bss:0000000000220AA1                 db    ? ;
.bss:0000000000220AA2                 db    ? ;
.bss:0000000000220AA3                 db    ? ;
.bss:0000000000220AA4                 db    ? ;
.bss:0000000000220AA5                 db    ? ;
.bss:0000000000220AA6                 db    ? ;
.bss:0000000000220AA7                 db    ? ;
.bss:0000000000220AA8                 db    ? ;
.bss:0000000000220AA9                 db    ? ;
.bss:0000000000220AAA                 db    ? ;
.bss:0000000000220AAB                 db    ? ;
.bss:0000000000220AAC                 db    ? ;
.bss:0000000000220AAD                 db    ? ;
.bss:0000000000220AAE                 db    ? ;
.bss:0000000000220AAF                 db    ? ;
.bss:0000000000220AB0                 db    ? ;
.bss:0000000000220AB1                 db    ? ;
.bss:0000000000220AB2                 db    ? ;
.bss:0000000000220AB3                 db    ? ;
.bss:0000000000220AB4                 db    ? ;
.bss:0000000000220AB5                 db    ? ;
.bss:0000000000220AB6                 db    ? ;
.bss:0000000000220AB7                 db    ? ;
.bss:0000000000220AB8                 db    ? ;
.bss:0000000000220AB9                 db    ? ;
.bss:0000000000220ABA                 db    ? ;
.bss:0000000000220ABB                 db    ? ;
.bss:0000000000220ABC                 db    ? ;
.bss:0000000000220ABD                 db    ? ;
.bss:0000000000220ABE                 db    ? ;
.bss:0000000000220ABF                 db    ? ;
.bss:0000000000220AC0                 db    ? ;
.bss:0000000000220AC1                 db    ? ;
.bss:0000000000220AC2                 db    ? ;
.bss:0000000000220AC3                 db    ? ;
.bss:0000000000220AC4                 db    ? ;
.bss:0000000000220AC5                 db    ? ;
.bss:0000000000220AC6                 db    ? ;
.bss:0000000000220AC7                 db    ? ;
.bss:0000000000220AC8                 db    ? ;
.bss:0000000000220AC9                 db    ? ;
.bss:0000000000220ACA                 db    ? ;
.bss:0000000000220ACB                 db    ? ;
.bss:0000000000220ACC                 db    ? ;
.bss:0000000000220ACD                 db    ? ;
.bss:0000000000220ACE                 db    ? ;
.bss:0000000000220ACF                 db    ? ;
.bss:0000000000220AD0                 db    ? ;
.bss:0000000000220AD1                 db    ? ;
.bss:0000000000220AD2                 db    ? ;
.bss:0000000000220AD3                 db    ? ;
.bss:0000000000220AD4                 db    ? ;
.bss:0000000000220AD5                 db    ? ;
.bss:0000000000220AD6                 db    ? ;
.bss:0000000000220AD7                 db    ? ;
.bss:0000000000220AD8                 db    ? ;
.bss:0000000000220AD9                 db    ? ;
.bss:0000000000220ADA                 db    ? ;
.bss:0000000000220ADB                 db    ? ;
.bss:0000000000220ADC                 db    ? ;
.bss:0000000000220ADD                 db    ? ;
.bss:0000000000220ADE                 db    ? ;
.bss:0000000000220ADF                 db    ? ;
.bss:0000000000220AE0                 db    ? ;
.bss:0000000000220AE1                 db    ? ;
.bss:0000000000220AE2                 db    ? ;
.bss:0000000000220AE3                 db    ? ;
.bss:0000000000220AE4                 db    ? ;
.bss:0000000000220AE5                 db    ? ;
.bss:0000000000220AE6                 db    ? ;
.bss:0000000000220AE7                 db    ? ;
.bss:0000000000220AE8                 db    ? ;
.bss:0000000000220AE9                 db    ? ;
.bss:0000000000220AEA                 db    ? ;
.bss:0000000000220AEB                 db    ? ;
.bss:0000000000220AEC                 db    ? ;
.bss:0000000000220AED                 db    ? ;
.bss:0000000000220AEE                 db    ? ;
.bss:0000000000220AEF                 db    ? ;
.bss:0000000000220AF0                 db    ? ;
.bss:0000000000220AF1                 db    ? ;
.bss:0000000000220AF2                 db    ? ;
.bss:0000000000220AF3                 db    ? ;
.bss:0000000000220AF4                 db    ? ;
.bss:0000000000220AF5                 db    ? ;
.bss:0000000000220AF6                 db    ? ;
.bss:0000000000220AF7                 db    ? ;
.bss:0000000000220AF8                 db    ? ;
.bss:0000000000220AF9                 db    ? ;
.bss:0000000000220AFA                 db    ? ;
.bss:0000000000220AFB                 db    ? ;
.bss:0000000000220AFC                 db    ? ;
.bss:0000000000220AFD                 db    ? ;
.bss:0000000000220AFE                 db    ? ;
.bss:0000000000220AFF                 db    ? ;
.bss:0000000000220B00                 db    ? ;
.bss:0000000000220B01                 db    ? ;
.bss:0000000000220B02                 db    ? ;
.bss:0000000000220B03                 db    ? ;
.bss:0000000000220B04                 db    ? ;
.bss:0000000000220B05                 db    ? ;
.bss:0000000000220B06                 db    ? ;
.bss:0000000000220B07                 db    ? ;
.bss:0000000000220B08                 db    ? ;
.bss:0000000000220B09                 db    ? ;
.bss:0000000000220B0A                 db    ? ;
.bss:0000000000220B0B                 db    ? ;
.bss:0000000000220B0C                 db    ? ;
.bss:0000000000220B0D                 db    ? ;
.bss:0000000000220B0E                 db    ? ;
.bss:0000000000220B0F                 db    ? ;
.bss:0000000000220B10                 db    ? ;
.bss:0000000000220B11                 db    ? ;
.bss:0000000000220B12                 db    ? ;
.bss:0000000000220B13                 db    ? ;
.bss:0000000000220B14                 db    ? ;
.bss:0000000000220B15                 db    ? ;
.bss:0000000000220B16                 db    ? ;
.bss:0000000000220B17                 db    ? ;
.bss:0000000000220B18                 db    ? ;
.bss:0000000000220B19                 db    ? ;
.bss:0000000000220B1A                 db    ? ;
.bss:0000000000220B1B                 db    ? ;
.bss:0000000000220B1C                 db    ? ;
.bss:0000000000220B1D                 db    ? ;
.bss:0000000000220B1E                 db    ? ;
.bss:0000000000220B1F                 db    ? ;
.bss:0000000000220B20                 db    ? ;
.bss:0000000000220B21                 db    ? ;
.bss:0000000000220B22                 db    ? ;
.bss:0000000000220B23                 db    ? ;
.bss:0000000000220B24                 db    ? ;
.bss:0000000000220B25                 db    ? ;
.bss:0000000000220B26                 db    ? ;
.bss:0000000000220B27                 db    ? ;
.bss:0000000000220B28                 db    ? ;
.bss:0000000000220B29                 db    ? ;
.bss:0000000000220B2A                 db    ? ;
.bss:0000000000220B2B                 db    ? ;
.bss:0000000000220B2C                 db    ? ;
.bss:0000000000220B2D                 db    ? ;
.bss:0000000000220B2E                 db    ? ;
.bss:0000000000220B2F                 db    ? ;
.bss:0000000000220B30                 db    ? ;
.bss:0000000000220B31                 db    ? ;
.bss:0000000000220B32                 db    ? ;
.bss:0000000000220B33                 db    ? ;
.bss:0000000000220B34                 db    ? ;
.bss:0000000000220B35                 db    ? ;
.bss:0000000000220B36                 db    ? ;
.bss:0000000000220B37                 db    ? ;
.bss:0000000000220B38                 db    ? ;
.bss:0000000000220B39                 db    ? ;
.bss:0000000000220B3A                 db    ? ;
.bss:0000000000220B3B                 db    ? ;
.bss:0000000000220B3C                 db    ? ;
.bss:0000000000220B3D                 db    ? ;
.bss:0000000000220B3E                 db    ? ;
.bss:0000000000220B3F                 db    ? ;
.bss:0000000000220B40                 db    ? ;
.bss:0000000000220B41                 db    ? ;
.bss:0000000000220B42                 db    ? ;
.bss:0000000000220B43                 db    ? ;
.bss:0000000000220B44                 db    ? ;
.bss:0000000000220B45                 db    ? ;
.bss:0000000000220B46                 db    ? ;
.bss:0000000000220B47                 db    ? ;
.bss:0000000000220B48                 db    ? ;
.bss:0000000000220B49                 db    ? ;
.bss:0000000000220B4A                 db    ? ;
.bss:0000000000220B4B                 db    ? ;
.bss:0000000000220B4C                 db    ? ;
.bss:0000000000220B4D                 db    ? ;
.bss:0000000000220B4E                 db    ? ;
.bss:0000000000220B4F                 db    ? ;
.bss:0000000000220B50                 db    ? ;
.bss:0000000000220B51                 db    ? ;
.bss:0000000000220B52                 db    ? ;
.bss:0000000000220B53                 db    ? ;
.bss:0000000000220B54                 db    ? ;
.bss:0000000000220B55                 db    ? ;
.bss:0000000000220B56                 db    ? ;
.bss:0000000000220B57                 db    ? ;
.bss:0000000000220B58                 db    ? ;
.bss:0000000000220B59                 db    ? ;
.bss:0000000000220B5A                 db    ? ;
.bss:0000000000220B5B                 db    ? ;
.bss:0000000000220B5C                 db    ? ;
.bss:0000000000220B5D                 db    ? ;
.bss:0000000000220B5E                 db    ? ;
.bss:0000000000220B5F                 db    ? ;
.bss:0000000000220B60                 db    ? ;
.bss:0000000000220B61                 db    ? ;
.bss:0000000000220B62                 db    ? ;
.bss:0000000000220B63                 db    ? ;
.bss:0000000000220B64                 db    ? ;
.bss:0000000000220B65                 db    ? ;
.bss:0000000000220B66                 db    ? ;
.bss:0000000000220B67                 db    ? ;
.bss:0000000000220B68                 db    ? ;
.bss:0000000000220B69                 db    ? ;
.bss:0000000000220B6A                 db    ? ;
.bss:0000000000220B6B                 db    ? ;
.bss:0000000000220B6C                 db    ? ;
.bss:0000000000220B6D                 db    ? ;
.bss:0000000000220B6E                 db    ? ;
.bss:0000000000220B6F                 db    ? ;
.bss:0000000000220B70                 db    ? ;
.bss:0000000000220B71                 db    ? ;
.bss:0000000000220B72                 db    ? ;
.bss:0000000000220B73                 db    ? ;
.bss:0000000000220B74                 db    ? ;
.bss:0000000000220B75                 db    ? ;
.bss:0000000000220B76                 db    ? ;
.bss:0000000000220B77                 db    ? ;
.bss:0000000000220B78                 db    ? ;
.bss:0000000000220B79                 db    ? ;
.bss:0000000000220B7A                 db    ? ;
.bss:0000000000220B7B                 db    ? ;
.bss:0000000000220B7C                 db    ? ;
.bss:0000000000220B7D                 db    ? ;
.bss:0000000000220B7E                 db    ? ;
.bss:0000000000220B7F                 db    ? ;
.bss:0000000000220B80                 db    ? ;
.bss:0000000000220B81                 db    ? ;
.bss:0000000000220B82                 db    ? ;
.bss:0000000000220B83                 db    ? ;
.bss:0000000000220B84                 db    ? ;
.bss:0000000000220B85                 db    ? ;
.bss:0000000000220B86                 db    ? ;
.bss:0000000000220B87                 db    ? ;
.bss:0000000000220B88                 db    ? ;
.bss:0000000000220B89                 db    ? ;
.bss:0000000000220B8A                 db    ? ;
.bss:0000000000220B8B                 db    ? ;
.bss:0000000000220B8C                 db    ? ;
.bss:0000000000220B8D                 db    ? ;
.bss:0000000000220B8E                 db    ? ;
.bss:0000000000220B8F                 db    ? ;
.bss:0000000000220B90                 db    ? ;
.bss:0000000000220B91                 db    ? ;
.bss:0000000000220B92                 db    ? ;
.bss:0000000000220B93                 db    ? ;
.bss:0000000000220B94                 db    ? ;
.bss:0000000000220B95                 db    ? ;
.bss:0000000000220B96                 db    ? ;
.bss:0000000000220B97                 db    ? ;
.bss:0000000000220B98                 db    ? ;
.bss:0000000000220B99                 db    ? ;
.bss:0000000000220B9A                 db    ? ;
.bss:0000000000220B9B                 db    ? ;
.bss:0000000000220B9C                 db    ? ;
.bss:0000000000220B9D                 db    ? ;
.bss:0000000000220B9E                 db    ? ;
.bss:0000000000220B9F                 db    ? ;
.bss:0000000000220BA0                 db    ? ;
.bss:0000000000220BA1                 db    ? ;
.bss:0000000000220BA2                 db    ? ;
.bss:0000000000220BA3                 db    ? ;
.bss:0000000000220BA4                 db    ? ;
.bss:0000000000220BA5                 db    ? ;
.bss:0000000000220BA6                 db    ? ;
.bss:0000000000220BA7                 db    ? ;
.bss:0000000000220BA8                 db    ? ;
.bss:0000000000220BA9                 db    ? ;
.bss:0000000000220BAA                 db    ? ;
.bss:0000000000220BAB                 db    ? ;
.bss:0000000000220BAC                 db    ? ;
.bss:0000000000220BAD                 db    ? ;
.bss:0000000000220BAE                 db    ? ;
.bss:0000000000220BAF                 db    ? ;
.bss:0000000000220BB0                 db    ? ;
.bss:0000000000220BB1                 db    ? ;
.bss:0000000000220BB2                 db    ? ;
.bss:0000000000220BB3                 db    ? ;
.bss:0000000000220BB4                 db    ? ;
.bss:0000000000220BB5                 db    ? ;
.bss:0000000000220BB6                 db    ? ;
.bss:0000000000220BB7                 db    ? ;
.bss:0000000000220BB8                 db    ? ;
.bss:0000000000220BB9                 db    ? ;
.bss:0000000000220BBA                 db    ? ;
.bss:0000000000220BBB                 db    ? ;
.bss:0000000000220BBC                 db    ? ;
.bss:0000000000220BBD                 db    ? ;
.bss:0000000000220BBE                 db    ? ;
.bss:0000000000220BBF                 db    ? ;
.bss:0000000000220BC0                 db    ? ;
.bss:0000000000220BC1                 db    ? ;
.bss:0000000000220BC2                 db    ? ;
.bss:0000000000220BC3                 db    ? ;
.bss:0000000000220BC4                 db    ? ;
.bss:0000000000220BC5                 db    ? ;
.bss:0000000000220BC6                 db    ? ;
.bss:0000000000220BC7                 db    ? ;
.bss:0000000000220BC8                 db    ? ;
.bss:0000000000220BC9                 db    ? ;
.bss:0000000000220BCA                 db    ? ;
.bss:0000000000220BCB                 db    ? ;
.bss:0000000000220BCC                 db    ? ;
.bss:0000000000220BCD                 db    ? ;
.bss:0000000000220BCE                 db    ? ;
.bss:0000000000220BCF                 db    ? ;
.bss:0000000000220BD0                 db    ? ;
.bss:0000000000220BD1                 db    ? ;
.bss:0000000000220BD2                 db    ? ;
.bss:0000000000220BD3                 db    ? ;
.bss:0000000000220BD4                 db    ? ;
.bss:0000000000220BD5                 db    ? ;
.bss:0000000000220BD6                 db    ? ;
.bss:0000000000220BD7                 db    ? ;
.bss:0000000000220BD8                 db    ? ;
.bss:0000000000220BD9                 db    ? ;
.bss:0000000000220BDA                 db    ? ;
.bss:0000000000220BDB                 db    ? ;
.bss:0000000000220BDC                 db    ? ;
.bss:0000000000220BDD                 db    ? ;
.bss:0000000000220BDE                 db    ? ;
.bss:0000000000220BDF                 db    ? ;
.bss:0000000000220BE0                 db    ? ;
.bss:0000000000220BE1                 db    ? ;
.bss:0000000000220BE2                 db    ? ;
.bss:0000000000220BE3                 db    ? ;
.bss:0000000000220BE4                 db    ? ;
.bss:0000000000220BE5                 db    ? ;
.bss:0000000000220BE6                 db    ? ;
.bss:0000000000220BE7                 db    ? ;
.bss:0000000000220BE8                 db    ? ;
.bss:0000000000220BE9                 db    ? ;
.bss:0000000000220BEA                 db    ? ;
.bss:0000000000220BEB                 db    ? ;
.bss:0000000000220BEC                 db    ? ;
.bss:0000000000220BED                 db    ? ;
.bss:0000000000220BEE                 db    ? ;
.bss:0000000000220BEF                 db    ? ;
.bss:0000000000220BF0                 db    ? ;
.bss:0000000000220BF1                 db    ? ;
.bss:0000000000220BF2                 db    ? ;
.bss:0000000000220BF3                 db    ? ;
.bss:0000000000220BF4                 db    ? ;
.bss:0000000000220BF5                 db    ? ;
.bss:0000000000220BF6                 db    ? ;
.bss:0000000000220BF7                 db    ? ;
.bss:0000000000220BF8                 db    ? ;
.bss:0000000000220BF9                 db    ? ;
.bss:0000000000220BFA                 db    ? ;
.bss:0000000000220BFB                 db    ? ;
.bss:0000000000220BFC                 db    ? ;
.bss:0000000000220BFD                 db    ? ;
.bss:0000000000220BFE                 db    ? ;
.bss:0000000000220BFF                 db    ? ;
.bss:0000000000220C00                 db    ? ;
.bss:0000000000220C01                 db    ? ;
.bss:0000000000220C02                 db    ? ;
.bss:0000000000220C03                 db    ? ;
.bss:0000000000220C04                 db    ? ;
.bss:0000000000220C05                 db    ? ;
.bss:0000000000220C06                 db    ? ;
.bss:0000000000220C07                 db    ? ;
.bss:0000000000220C08                 db    ? ;
.bss:0000000000220C09                 db    ? ;
.bss:0000000000220C0A                 db    ? ;
.bss:0000000000220C0B                 db    ? ;
.bss:0000000000220C0C                 db    ? ;
.bss:0000000000220C0D                 db    ? ;
.bss:0000000000220C0E                 db    ? ;
.bss:0000000000220C0F                 db    ? ;
.bss:0000000000220C10                 db    ? ;
.bss:0000000000220C11                 db    ? ;
.bss:0000000000220C12                 db    ? ;
.bss:0000000000220C13                 db    ? ;
.bss:0000000000220C14                 db    ? ;
.bss:0000000000220C15                 db    ? ;
.bss:0000000000220C16                 db    ? ;
.bss:0000000000220C17                 db    ? ;
.bss:0000000000220C18                 db    ? ;
.bss:0000000000220C19                 db    ? ;
.bss:0000000000220C1A                 db    ? ;
.bss:0000000000220C1B                 db    ? ;
.bss:0000000000220C1C                 db    ? ;
.bss:0000000000220C1D                 db    ? ;
.bss:0000000000220C1E                 db    ? ;
.bss:0000000000220C1F                 db    ? ;
.bss:0000000000220C20                 db    ? ;
.bss:0000000000220C21                 db    ? ;
.bss:0000000000220C22                 db    ? ;
.bss:0000000000220C23                 db    ? ;
.bss:0000000000220C24                 db    ? ;
.bss:0000000000220C25                 db    ? ;
.bss:0000000000220C26                 db    ? ;
.bss:0000000000220C27                 db    ? ;
.bss:0000000000220C28                 db    ? ;
.bss:0000000000220C29                 db    ? ;
.bss:0000000000220C2A                 db    ? ;
.bss:0000000000220C2B                 db    ? ;
.bss:0000000000220C2C                 db    ? ;
.bss:0000000000220C2D                 db    ? ;
.bss:0000000000220C2E                 db    ? ;
.bss:0000000000220C2F                 db    ? ;
.bss:0000000000220C30                 db    ? ;
.bss:0000000000220C31                 db    ? ;
.bss:0000000000220C32                 db    ? ;
.bss:0000000000220C33                 db    ? ;
.bss:0000000000220C34                 db    ? ;
.bss:0000000000220C35                 db    ? ;
.bss:0000000000220C36                 db    ? ;
.bss:0000000000220C37                 db    ? ;
.bss:0000000000220C38                 db    ? ;
.bss:0000000000220C39                 db    ? ;
.bss:0000000000220C3A                 db    ? ;
.bss:0000000000220C3B                 db    ? ;
.bss:0000000000220C3C                 db    ? ;
.bss:0000000000220C3D                 db    ? ;
.bss:0000000000220C3E                 db    ? ;
.bss:0000000000220C3F                 db    ? ;
.bss:0000000000220C40                 db    ? ;
.bss:0000000000220C41                 db    ? ;
.bss:0000000000220C42                 db    ? ;
.bss:0000000000220C43                 db    ? ;
.bss:0000000000220C44                 db    ? ;
.bss:0000000000220C45                 db    ? ;
.bss:0000000000220C46                 db    ? ;
.bss:0000000000220C47                 db    ? ;
.bss:0000000000220C48                 db    ? ;
.bss:0000000000220C49                 db    ? ;
.bss:0000000000220C4A                 db    ? ;
.bss:0000000000220C4B                 db    ? ;
.bss:0000000000220C4C                 db    ? ;
.bss:0000000000220C4D                 db    ? ;
.bss:0000000000220C4E                 db    ? ;
.bss:0000000000220C4F                 db    ? ;
.bss:0000000000220C50                 db    ? ;
.bss:0000000000220C51                 db    ? ;
.bss:0000000000220C52                 db    ? ;
.bss:0000000000220C53                 db    ? ;
.bss:0000000000220C54                 db    ? ;
.bss:0000000000220C55                 db    ? ;
.bss:0000000000220C56                 db    ? ;
.bss:0000000000220C57                 db    ? ;
.bss:0000000000220C58                 db    ? ;
.bss:0000000000220C59                 db    ? ;
.bss:0000000000220C5A                 db    ? ;
.bss:0000000000220C5B                 db    ? ;
.bss:0000000000220C5C                 db    ? ;
.bss:0000000000220C5D                 db    ? ;
.bss:0000000000220C5E                 db    ? ;
.bss:0000000000220C5F                 db    ? ;
.bss:0000000000220C60                 db    ? ;
.bss:0000000000220C61                 db    ? ;
.bss:0000000000220C62                 db    ? ;
.bss:0000000000220C63                 db    ? ;
.bss:0000000000220C64                 db    ? ;
.bss:0000000000220C65                 db    ? ;
.bss:0000000000220C66                 db    ? ;
.bss:0000000000220C67                 db    ? ;
.bss:0000000000220C68                 db    ? ;
.bss:0000000000220C69                 db    ? ;
.bss:0000000000220C6A                 db    ? ;
.bss:0000000000220C6B                 db    ? ;
.bss:0000000000220C6C                 db    ? ;
.bss:0000000000220C6D                 db    ? ;
.bss:0000000000220C6E                 db    ? ;
.bss:0000000000220C6F                 db    ? ;
.bss:0000000000220C70                 db    ? ;
.bss:0000000000220C71                 db    ? ;
.bss:0000000000220C72                 db    ? ;
.bss:0000000000220C73                 db    ? ;
.bss:0000000000220C74                 db    ? ;
.bss:0000000000220C75                 db    ? ;
.bss:0000000000220C76                 db    ? ;
.bss:0000000000220C77                 db    ? ;
.bss:0000000000220C78                 db    ? ;
.bss:0000000000220C79                 db    ? ;
.bss:0000000000220C7A                 db    ? ;
.bss:0000000000220C7B                 db    ? ;
.bss:0000000000220C7C                 db    ? ;
.bss:0000000000220C7D                 db    ? ;
.bss:0000000000220C7E                 db    ? ;
.bss:0000000000220C7F                 db    ? ;
.bss:0000000000220C80                 db    ? ;
.bss:0000000000220C81                 db    ? ;
.bss:0000000000220C82                 db    ? ;
.bss:0000000000220C83                 db    ? ;
.bss:0000000000220C84                 db    ? ;
.bss:0000000000220C85                 db    ? ;
.bss:0000000000220C86                 db    ? ;
.bss:0000000000220C87                 db    ? ;
.bss:0000000000220C88                 db    ? ;
.bss:0000000000220C89                 db    ? ;
.bss:0000000000220C8A                 db    ? ;
.bss:0000000000220C8B                 db    ? ;
.bss:0000000000220C8C                 db    ? ;
.bss:0000000000220C8D                 db    ? ;
.bss:0000000000220C8E                 db    ? ;
.bss:0000000000220C8F                 db    ? ;
.bss:0000000000220C90                 db    ? ;
.bss:0000000000220C91                 db    ? ;
.bss:0000000000220C92                 db    ? ;
.bss:0000000000220C93                 db    ? ;
.bss:0000000000220C94                 db    ? ;
.bss:0000000000220C95                 db    ? ;
.bss:0000000000220C96                 db    ? ;
.bss:0000000000220C97                 db    ? ;
.bss:0000000000220C98                 db    ? ;
.bss:0000000000220C99                 db    ? ;
.bss:0000000000220C9A                 db    ? ;
.bss:0000000000220C9B                 db    ? ;
.bss:0000000000220C9C                 db    ? ;
.bss:0000000000220C9D                 db    ? ;
.bss:0000000000220C9E                 db    ? ;
.bss:0000000000220C9F                 db    ? ;
.bss:0000000000220CA0                 db    ? ;
.bss:0000000000220CA1                 db    ? ;
.bss:0000000000220CA2                 db    ? ;
.bss:0000000000220CA3                 db    ? ;
.bss:0000000000220CA4                 db    ? ;
.bss:0000000000220CA5                 db    ? ;
.bss:0000000000220CA6                 db    ? ;
.bss:0000000000220CA7                 db    ? ;
.bss:0000000000220CA8                 db    ? ;
.bss:0000000000220CA9                 db    ? ;
.bss:0000000000220CAA                 db    ? ;
.bss:0000000000220CAB                 db    ? ;
.bss:0000000000220CAC                 db    ? ;
.bss:0000000000220CAD                 db    ? ;
.bss:0000000000220CAE                 db    ? ;
.bss:0000000000220CAF                 db    ? ;
.bss:0000000000220CB0                 db    ? ;
.bss:0000000000220CB1                 db    ? ;
.bss:0000000000220CB2                 db    ? ;
.bss:0000000000220CB3                 db    ? ;
.bss:0000000000220CB4                 db    ? ;
.bss:0000000000220CB5                 db    ? ;
.bss:0000000000220CB6                 db    ? ;
.bss:0000000000220CB7                 db    ? ;
.bss:0000000000220CB8                 db    ? ;
.bss:0000000000220CB9                 db    ? ;
.bss:0000000000220CBA                 db    ? ;
.bss:0000000000220CBB                 db    ? ;
.bss:0000000000220CBC                 db    ? ;
.bss:0000000000220CBD                 db    ? ;
.bss:0000000000220CBE                 db    ? ;
.bss:0000000000220CBF                 db    ? ;
.bss:0000000000220CC0                 db    ? ;
.bss:0000000000220CC1                 db    ? ;
.bss:0000000000220CC2                 db    ? ;
.bss:0000000000220CC3                 db    ? ;
.bss:0000000000220CC4                 db    ? ;
.bss:0000000000220CC5                 db    ? ;
.bss:0000000000220CC6                 db    ? ;
.bss:0000000000220CC7                 db    ? ;
.bss:0000000000220CC8                 db    ? ;
.bss:0000000000220CC9                 db    ? ;
.bss:0000000000220CCA                 db    ? ;
.bss:0000000000220CCB                 db    ? ;
.bss:0000000000220CCC                 db    ? ;
.bss:0000000000220CCD                 db    ? ;
.bss:0000000000220CCE                 db    ? ;
.bss:0000000000220CCF                 db    ? ;
.bss:0000000000220CD0                 db    ? ;
.bss:0000000000220CD1                 db    ? ;
.bss:0000000000220CD2                 db    ? ;
.bss:0000000000220CD3                 db    ? ;
.bss:0000000000220CD4                 db    ? ;
.bss:0000000000220CD5                 db    ? ;
.bss:0000000000220CD6                 db    ? ;
.bss:0000000000220CD7                 db    ? ;
.bss:0000000000220CD8                 db    ? ;
.bss:0000000000220CD9                 db    ? ;
.bss:0000000000220CDA                 db    ? ;
.bss:0000000000220CDB                 db    ? ;
.bss:0000000000220CDC                 db    ? ;
.bss:0000000000220CDD                 db    ? ;
.bss:0000000000220CDE                 db    ? ;
.bss:0000000000220CDF                 db    ? ;
.bss:0000000000220CE0                 db    ? ;
.bss:0000000000220CE1                 db    ? ;
.bss:0000000000220CE2                 db    ? ;
.bss:0000000000220CE3                 db    ? ;
.bss:0000000000220CE4                 db    ? ;
.bss:0000000000220CE5                 db    ? ;
.bss:0000000000220CE6                 db    ? ;
.bss:0000000000220CE7                 db    ? ;
.bss:0000000000220CE8                 db    ? ;
.bss:0000000000220CE9                 db    ? ;
.bss:0000000000220CEA                 db    ? ;
.bss:0000000000220CEB                 db    ? ;
.bss:0000000000220CEC                 db    ? ;
.bss:0000000000220CED                 db    ? ;
.bss:0000000000220CEE                 db    ? ;
.bss:0000000000220CEF                 db    ? ;
.bss:0000000000220CF0                 db    ? ;
.bss:0000000000220CF1                 db    ? ;
.bss:0000000000220CF2                 db    ? ;
.bss:0000000000220CF3                 db    ? ;
.bss:0000000000220CF4                 db    ? ;
.bss:0000000000220CF5                 db    ? ;
.bss:0000000000220CF6                 db    ? ;
.bss:0000000000220CF7                 db    ? ;
.bss:0000000000220CF8                 db    ? ;
.bss:0000000000220CF9                 db    ? ;
.bss:0000000000220CFA                 db    ? ;
.bss:0000000000220CFB                 db    ? ;
.bss:0000000000220CFC                 db    ? ;
.bss:0000000000220CFD                 db    ? ;
.bss:0000000000220CFE                 db    ? ;
.bss:0000000000220CFF                 db    ? ;
.bss:0000000000220D00                 db    ? ;
.bss:0000000000220D01                 db    ? ;
.bss:0000000000220D02                 db    ? ;
.bss:0000000000220D03                 db    ? ;
.bss:0000000000220D04                 db    ? ;
.bss:0000000000220D05                 db    ? ;
.bss:0000000000220D06                 db    ? ;
.bss:0000000000220D07                 db    ? ;
.bss:0000000000220D08                 db    ? ;
.bss:0000000000220D09                 db    ? ;
.bss:0000000000220D0A                 db    ? ;
.bss:0000000000220D0B                 db    ? ;
.bss:0000000000220D0C                 db    ? ;
.bss:0000000000220D0D                 db    ? ;
.bss:0000000000220D0E                 db    ? ;
.bss:0000000000220D0F                 db    ? ;
.bss:0000000000220D10                 db    ? ;
.bss:0000000000220D11                 db    ? ;
.bss:0000000000220D12                 db    ? ;
.bss:0000000000220D13                 db    ? ;
.bss:0000000000220D14                 db    ? ;
.bss:0000000000220D15                 db    ? ;
.bss:0000000000220D16                 db    ? ;
.bss:0000000000220D17                 db    ? ;
.bss:0000000000220D18                 db    ? ;
.bss:0000000000220D19                 db    ? ;
.bss:0000000000220D1A                 db    ? ;
.bss:0000000000220D1B                 db    ? ;
.bss:0000000000220D1C                 db    ? ;
.bss:0000000000220D1D                 db    ? ;
.bss:0000000000220D1E                 db    ? ;
.bss:0000000000220D1F                 db    ? ;
.bss:0000000000220D20                 db    ? ;
.bss:0000000000220D21                 db    ? ;
.bss:0000000000220D22                 db    ? ;
.bss:0000000000220D23                 db    ? ;
.bss:0000000000220D24                 db    ? ;
.bss:0000000000220D25                 db    ? ;
.bss:0000000000220D26                 db    ? ;
.bss:0000000000220D27                 db    ? ;
.bss:0000000000220D28                 db    ? ;
.bss:0000000000220D29                 db    ? ;
.bss:0000000000220D2A                 db    ? ;
.bss:0000000000220D2B                 db    ? ;
.bss:0000000000220D2C                 db    ? ;
.bss:0000000000220D2D                 db    ? ;
.bss:0000000000220D2E                 db    ? ;
.bss:0000000000220D2F                 db    ? ;
.bss:0000000000220D30                 db    ? ;
.bss:0000000000220D31                 db    ? ;
.bss:0000000000220D32                 db    ? ;
.bss:0000000000220D33                 db    ? ;
.bss:0000000000220D34                 db    ? ;
.bss:0000000000220D35                 db    ? ;
.bss:0000000000220D36                 db    ? ;
.bss:0000000000220D37                 db    ? ;
.bss:0000000000220D38                 db    ? ;
.bss:0000000000220D39                 db    ? ;
.bss:0000000000220D3A                 db    ? ;
.bss:0000000000220D3B                 db    ? ;
.bss:0000000000220D3C                 db    ? ;
.bss:0000000000220D3D                 db    ? ;
.bss:0000000000220D3E                 db    ? ;
.bss:0000000000220D3F                 db    ? ;
.bss:0000000000220D40                 db    ? ;
.bss:0000000000220D41                 db    ? ;
.bss:0000000000220D42                 db    ? ;
.bss:0000000000220D43                 db    ? ;
.bss:0000000000220D44                 db    ? ;
.bss:0000000000220D45                 db    ? ;
.bss:0000000000220D46                 db    ? ;
.bss:0000000000220D47                 db    ? ;
.bss:0000000000220D48                 db    ? ;
.bss:0000000000220D49                 db    ? ;
.bss:0000000000220D4A                 db    ? ;
.bss:0000000000220D4B                 db    ? ;
.bss:0000000000220D4C                 db    ? ;
.bss:0000000000220D4D                 db    ? ;
.bss:0000000000220D4E                 db    ? ;
.bss:0000000000220D4F                 db    ? ;
.bss:0000000000220D50                 db    ? ;
.bss:0000000000220D51                 db    ? ;
.bss:0000000000220D52                 db    ? ;
.bss:0000000000220D53                 db    ? ;
.bss:0000000000220D54                 db    ? ;
.bss:0000000000220D55                 db    ? ;
.bss:0000000000220D56                 db    ? ;
.bss:0000000000220D57                 db    ? ;
.bss:0000000000220D58                 db    ? ;
.bss:0000000000220D59                 db    ? ;
.bss:0000000000220D5A                 db    ? ;
.bss:0000000000220D5B                 db    ? ;
.bss:0000000000220D5C                 db    ? ;
.bss:0000000000220D5D                 db    ? ;
.bss:0000000000220D5E                 db    ? ;
.bss:0000000000220D5F                 db    ? ;
.bss:0000000000220D60                 db    ? ;
.bss:0000000000220D61                 db    ? ;
.bss:0000000000220D62                 db    ? ;
.bss:0000000000220D63                 db    ? ;
.bss:0000000000220D64                 db    ? ;
.bss:0000000000220D65                 db    ? ;
.bss:0000000000220D66                 db    ? ;
.bss:0000000000220D67                 db    ? ;
.bss:0000000000220D68                 db    ? ;
.bss:0000000000220D69                 db    ? ;
.bss:0000000000220D6A                 db    ? ;
.bss:0000000000220D6B                 db    ? ;
.bss:0000000000220D6C                 db    ? ;
.bss:0000000000220D6D                 db    ? ;
.bss:0000000000220D6E                 db    ? ;
.bss:0000000000220D6F                 db    ? ;
.bss:0000000000220D70                 db    ? ;
.bss:0000000000220D71                 db    ? ;
.bss:0000000000220D72                 db    ? ;
.bss:0000000000220D73                 db    ? ;
.bss:0000000000220D74                 db    ? ;
.bss:0000000000220D75                 db    ? ;
.bss:0000000000220D76                 db    ? ;
.bss:0000000000220D77                 db    ? ;
.bss:0000000000220D78                 db    ? ;
.bss:0000000000220D79                 db    ? ;
.bss:0000000000220D7A                 db    ? ;
.bss:0000000000220D7B                 db    ? ;
.bss:0000000000220D7C                 db    ? ;
.bss:0000000000220D7D                 db    ? ;
.bss:0000000000220D7E                 db    ? ;
.bss:0000000000220D7F                 db    ? ;
.bss:0000000000220D80                 db    ? ;
.bss:0000000000220D81                 db    ? ;
.bss:0000000000220D82                 db    ? ;
.bss:0000000000220D83                 db    ? ;
.bss:0000000000220D84                 db    ? ;
.bss:0000000000220D85                 db    ? ;
.bss:0000000000220D86                 db    ? ;
.bss:0000000000220D87                 db    ? ;
.bss:0000000000220D88                 db    ? ;
.bss:0000000000220D89                 db    ? ;
.bss:0000000000220D8A                 db    ? ;
.bss:0000000000220D8B                 db    ? ;
.bss:0000000000220D8C                 db    ? ;
.bss:0000000000220D8D                 db    ? ;
.bss:0000000000220D8E                 db    ? ;
.bss:0000000000220D8F                 db    ? ;
.bss:0000000000220D90                 db    ? ;
.bss:0000000000220D91                 db    ? ;
.bss:0000000000220D92                 db    ? ;
.bss:0000000000220D93                 db    ? ;
.bss:0000000000220D94                 db    ? ;
.bss:0000000000220D95                 db    ? ;
.bss:0000000000220D96                 db    ? ;
.bss:0000000000220D97                 db    ? ;
.bss:0000000000220D98                 db    ? ;
.bss:0000000000220D99                 db    ? ;
.bss:0000000000220D9A                 db    ? ;
.bss:0000000000220D9B                 db    ? ;
.bss:0000000000220D9C                 db    ? ;
.bss:0000000000220D9D                 db    ? ;
.bss:0000000000220D9E                 db    ? ;
.bss:0000000000220D9F                 db    ? ;
.bss:0000000000220DA0                 db    ? ;
.bss:0000000000220DA1                 db    ? ;
.bss:0000000000220DA2                 db    ? ;
.bss:0000000000220DA3                 db    ? ;
.bss:0000000000220DA4                 db    ? ;
.bss:0000000000220DA5                 db    ? ;
.bss:0000000000220DA6                 db    ? ;
.bss:0000000000220DA7                 db    ? ;
.bss:0000000000220DA8                 db    ? ;
.bss:0000000000220DA9                 db    ? ;
.bss:0000000000220DAA                 db    ? ;
.bss:0000000000220DAB                 db    ? ;
.bss:0000000000220DAC                 db    ? ;
.bss:0000000000220DAD                 db    ? ;
.bss:0000000000220DAE                 db    ? ;
.bss:0000000000220DAF                 db    ? ;
.bss:0000000000220DB0                 db    ? ;
.bss:0000000000220DB1                 db    ? ;
.bss:0000000000220DB2                 db    ? ;
.bss:0000000000220DB3                 db    ? ;
.bss:0000000000220DB4                 db    ? ;
.bss:0000000000220DB5                 db    ? ;
.bss:0000000000220DB6                 db    ? ;
.bss:0000000000220DB7                 db    ? ;
.bss:0000000000220DB8                 db    ? ;
.bss:0000000000220DB9                 db    ? ;
.bss:0000000000220DBA                 db    ? ;
.bss:0000000000220DBB                 db    ? ;
.bss:0000000000220DBC                 db    ? ;
.bss:0000000000220DBD                 db    ? ;
.bss:0000000000220DBE                 db    ? ;
.bss:0000000000220DBF                 db    ? ;
.bss:0000000000220DC0                 db    ? ;
.bss:0000000000220DC1                 db    ? ;
.bss:0000000000220DC2                 db    ? ;
.bss:0000000000220DC3                 db    ? ;
.bss:0000000000220DC4                 db    ? ;
.bss:0000000000220DC5                 db    ? ;
.bss:0000000000220DC6                 db    ? ;
.bss:0000000000220DC7                 db    ? ;
.bss:0000000000220DC8                 db    ? ;
.bss:0000000000220DC9                 db    ? ;
.bss:0000000000220DCA                 db    ? ;
.bss:0000000000220DCB                 db    ? ;
.bss:0000000000220DCC                 db    ? ;
.bss:0000000000220DCD                 db    ? ;
.bss:0000000000220DCE                 db    ? ;
.bss:0000000000220DCF                 db    ? ;
.bss:0000000000220DD0                 db    ? ;
.bss:0000000000220DD1                 db    ? ;
.bss:0000000000220DD2                 db    ? ;
.bss:0000000000220DD3                 db    ? ;
.bss:0000000000220DD4                 db    ? ;
.bss:0000000000220DD5                 db    ? ;
.bss:0000000000220DD6                 db    ? ;
.bss:0000000000220DD7                 db    ? ;
.bss:0000000000220DD8                 db    ? ;
.bss:0000000000220DD9                 db    ? ;
.bss:0000000000220DDA                 db    ? ;
.bss:0000000000220DDB                 db    ? ;
.bss:0000000000220DDC                 db    ? ;
.bss:0000000000220DDD                 db    ? ;
.bss:0000000000220DDE                 db    ? ;
.bss:0000000000220DDF                 db    ? ;
.bss:0000000000220DE0                 db    ? ;
.bss:0000000000220DE1                 db    ? ;
.bss:0000000000220DE2                 db    ? ;
.bss:0000000000220DE3                 db    ? ;
.bss:0000000000220DE4                 db    ? ;
.bss:0000000000220DE5                 db    ? ;
.bss:0000000000220DE6                 db    ? ;
.bss:0000000000220DE7                 db    ? ;
.bss:0000000000220DE8                 db    ? ;
.bss:0000000000220DE9                 db    ? ;
.bss:0000000000220DEA                 db    ? ;
.bss:0000000000220DEB                 db    ? ;
.bss:0000000000220DEC                 db    ? ;
.bss:0000000000220DED                 db    ? ;
.bss:0000000000220DEE                 db    ? ;
.bss:0000000000220DEF                 db    ? ;
.bss:0000000000220DF0                 db    ? ;
.bss:0000000000220DF1                 db    ? ;
.bss:0000000000220DF2                 db    ? ;
.bss:0000000000220DF3                 db    ? ;
.bss:0000000000220DF4                 db    ? ;
.bss:0000000000220DF5                 db    ? ;
.bss:0000000000220DF6                 db    ? ;
.bss:0000000000220DF7                 db    ? ;
.bss:0000000000220DF8                 db    ? ;
.bss:0000000000220DF9                 db    ? ;
.bss:0000000000220DFA                 db    ? ;
.bss:0000000000220DFB                 db    ? ;
.bss:0000000000220DFC                 db    ? ;
.bss:0000000000220DFD                 db    ? ;
.bss:0000000000220DFE                 db    ? ;
.bss:0000000000220DFF                 db    ? ;
.bss:0000000000220E00                 db    ? ;
.bss:0000000000220E01                 db    ? ;
.bss:0000000000220E02                 db    ? ;
.bss:0000000000220E03                 db    ? ;
.bss:0000000000220E04                 db    ? ;
.bss:0000000000220E05                 db    ? ;
.bss:0000000000220E06                 db    ? ;
.bss:0000000000220E07                 db    ? ;
.bss:0000000000220E08                 db    ? ;
.bss:0000000000220E09                 db    ? ;
.bss:0000000000220E0A                 db    ? ;
.bss:0000000000220E0B                 db    ? ;
.bss:0000000000220E0C                 db    ? ;
.bss:0000000000220E0D                 db    ? ;
.bss:0000000000220E0E                 db    ? ;
.bss:0000000000220E0F                 db    ? ;
.bss:0000000000220E10                 db    ? ;
.bss:0000000000220E11                 db    ? ;
.bss:0000000000220E12                 db    ? ;
.bss:0000000000220E13                 db    ? ;
.bss:0000000000220E14                 db    ? ;
.bss:0000000000220E15                 db    ? ;
.bss:0000000000220E16                 db    ? ;
.bss:0000000000220E17                 db    ? ;
.bss:0000000000220E18                 db    ? ;
.bss:0000000000220E19                 db    ? ;
.bss:0000000000220E1A                 db    ? ;
.bss:0000000000220E1B                 db    ? ;
.bss:0000000000220E1C                 db    ? ;
.bss:0000000000220E1D                 db    ? ;
.bss:0000000000220E1E                 db    ? ;
.bss:0000000000220E1F                 db    ? ;
.bss:0000000000220E20                 db    ? ;
.bss:0000000000220E21                 db    ? ;
.bss:0000000000220E22                 db    ? ;
.bss:0000000000220E23                 db    ? ;
.bss:0000000000220E24                 db    ? ;
.bss:0000000000220E25                 db    ? ;
.bss:0000000000220E26                 db    ? ;
.bss:0000000000220E27                 db    ? ;
.bss:0000000000220E28                 db    ? ;
.bss:0000000000220E29                 db    ? ;
.bss:0000000000220E2A                 db    ? ;
.bss:0000000000220E2B                 db    ? ;
.bss:0000000000220E2C                 db    ? ;
.bss:0000000000220E2D                 db    ? ;
.bss:0000000000220E2E                 db    ? ;
.bss:0000000000220E2F                 db    ? ;
.bss:0000000000220E30                 db    ? ;
.bss:0000000000220E31                 db    ? ;
.bss:0000000000220E32                 db    ? ;
.bss:0000000000220E33                 db    ? ;
.bss:0000000000220E34                 db    ? ;
.bss:0000000000220E35                 db    ? ;
.bss:0000000000220E36                 db    ? ;
.bss:0000000000220E37                 db    ? ;
.bss:0000000000220E38                 db    ? ;
.bss:0000000000220E39                 db    ? ;
.bss:0000000000220E3A                 db    ? ;
.bss:0000000000220E3B                 db    ? ;
.bss:0000000000220E3C                 db    ? ;
.bss:0000000000220E3D                 db    ? ;
.bss:0000000000220E3E                 db    ? ;
.bss:0000000000220E3F                 db    ? ;
.bss:0000000000220E40                 db    ? ;
.bss:0000000000220E41                 db    ? ;
.bss:0000000000220E42                 db    ? ;
.bss:0000000000220E43                 db    ? ;
.bss:0000000000220E44                 db    ? ;
.bss:0000000000220E45                 db    ? ;
.bss:0000000000220E46                 db    ? ;
.bss:0000000000220E47                 db    ? ;
.bss:0000000000220E48                 db    ? ;
.bss:0000000000220E49                 db    ? ;
.bss:0000000000220E4A                 db    ? ;
.bss:0000000000220E4B                 db    ? ;
.bss:0000000000220E4C                 db    ? ;
.bss:0000000000220E4D                 db    ? ;
.bss:0000000000220E4E                 db    ? ;
.bss:0000000000220E4F                 db    ? ;
.bss:0000000000220E50                 db    ? ;
.bss:0000000000220E51                 db    ? ;
.bss:0000000000220E52                 db    ? ;
.bss:0000000000220E53                 db    ? ;
.bss:0000000000220E54                 db    ? ;
.bss:0000000000220E55                 db    ? ;
.bss:0000000000220E56                 db    ? ;
.bss:0000000000220E57                 db    ? ;
.bss:0000000000220E58                 db    ? ;
.bss:0000000000220E59                 db    ? ;
.bss:0000000000220E5A                 db    ? ;
.bss:0000000000220E5B                 db    ? ;
.bss:0000000000220E5C                 db    ? ;
.bss:0000000000220E5D                 db    ? ;
.bss:0000000000220E5E                 db    ? ;
.bss:0000000000220E5F                 db    ? ;
.bss:0000000000220E60                 db    ? ;
.bss:0000000000220E61                 db    ? ;
.bss:0000000000220E62                 db    ? ;
.bss:0000000000220E63                 db    ? ;
.bss:0000000000220E64                 db    ? ;
.bss:0000000000220E65                 db    ? ;
.bss:0000000000220E66                 db    ? ;
.bss:0000000000220E67                 db    ? ;
.bss:0000000000220E68                 db    ? ;
.bss:0000000000220E69                 db    ? ;
.bss:0000000000220E6A                 db    ? ;
.bss:0000000000220E6B                 db    ? ;
.bss:0000000000220E6C                 db    ? ;
.bss:0000000000220E6D                 db    ? ;
.bss:0000000000220E6E                 db    ? ;
.bss:0000000000220E6F                 db    ? ;
.bss:0000000000220E70                 db    ? ;
.bss:0000000000220E71                 db    ? ;
.bss:0000000000220E72                 db    ? ;
.bss:0000000000220E73                 db    ? ;
.bss:0000000000220E74                 db    ? ;
.bss:0000000000220E75                 db    ? ;
.bss:0000000000220E76                 db    ? ;
.bss:0000000000220E77                 db    ? ;
.bss:0000000000220E78                 db    ? ;
.bss:0000000000220E79                 db    ? ;
.bss:0000000000220E7A                 db    ? ;
.bss:0000000000220E7B                 db    ? ;
.bss:0000000000220E7C                 db    ? ;
.bss:0000000000220E7D                 db    ? ;
.bss:0000000000220E7E                 db    ? ;
.bss:0000000000220E7F                 db    ? ;
.bss:0000000000220E80                 db    ? ;
.bss:0000000000220E81                 db    ? ;
.bss:0000000000220E82                 db    ? ;
.bss:0000000000220E83                 db    ? ;
.bss:0000000000220E84                 db    ? ;
.bss:0000000000220E85                 db    ? ;
.bss:0000000000220E86                 db    ? ;
.bss:0000000000220E87                 db    ? ;
.bss:0000000000220E88                 db    ? ;
.bss:0000000000220E89                 db    ? ;
.bss:0000000000220E8A                 db    ? ;
.bss:0000000000220E8B                 db    ? ;
.bss:0000000000220E8C                 db    ? ;
.bss:0000000000220E8D                 db    ? ;
.bss:0000000000220E8E                 db    ? ;
.bss:0000000000220E8F                 db    ? ;
.bss:0000000000220E90                 db    ? ;
.bss:0000000000220E91                 db    ? ;
.bss:0000000000220E92                 db    ? ;
.bss:0000000000220E93                 db    ? ;
.bss:0000000000220E94                 db    ? ;
.bss:0000000000220E95                 db    ? ;
.bss:0000000000220E96                 db    ? ;
.bss:0000000000220E97                 db    ? ;
.bss:0000000000220E98                 db    ? ;
.bss:0000000000220E99                 db    ? ;
.bss:0000000000220E9A                 db    ? ;
.bss:0000000000220E9B                 db    ? ;
.bss:0000000000220E9C                 db    ? ;
.bss:0000000000220E9D                 db    ? ;
.bss:0000000000220E9E                 db    ? ;
.bss:0000000000220E9F                 db    ? ;
.bss:0000000000220EA0                 db    ? ;
.bss:0000000000220EA1                 db    ? ;
.bss:0000000000220EA2                 db    ? ;
.bss:0000000000220EA3                 db    ? ;
.bss:0000000000220EA4                 db    ? ;
.bss:0000000000220EA5                 db    ? ;
.bss:0000000000220EA6                 db    ? ;
.bss:0000000000220EA7                 db    ? ;
.bss:0000000000220EA8                 db    ? ;
.bss:0000000000220EA9                 db    ? ;
.bss:0000000000220EAA                 db    ? ;
.bss:0000000000220EAB                 db    ? ;
.bss:0000000000220EAC                 db    ? ;
.bss:0000000000220EAD                 db    ? ;
.bss:0000000000220EAE                 db    ? ;
.bss:0000000000220EAF                 db    ? ;
.bss:0000000000220EB0                 db    ? ;
.bss:0000000000220EB1                 db    ? ;
.bss:0000000000220EB2                 db    ? ;
.bss:0000000000220EB3                 db    ? ;
.bss:0000000000220EB4                 db    ? ;
.bss:0000000000220EB5                 db    ? ;
.bss:0000000000220EB6                 db    ? ;
.bss:0000000000220EB7                 db    ? ;
.bss:0000000000220EB8                 db    ? ;
.bss:0000000000220EB9                 db    ? ;
.bss:0000000000220EBA                 db    ? ;
.bss:0000000000220EBB                 db    ? ;
.bss:0000000000220EBC                 db    ? ;
.bss:0000000000220EBD                 db    ? ;
.bss:0000000000220EBE                 db    ? ;
.bss:0000000000220EBF                 db    ? ;
.bss:0000000000220EC0                 db    ? ;
.bss:0000000000220EC1                 db    ? ;
.bss:0000000000220EC2                 db    ? ;
.bss:0000000000220EC3                 db    ? ;
.bss:0000000000220EC4                 db    ? ;
.bss:0000000000220EC5                 db    ? ;
.bss:0000000000220EC6                 db    ? ;
.bss:0000000000220EC7                 db    ? ;
.bss:0000000000220EC8                 db    ? ;
.bss:0000000000220EC9                 db    ? ;
.bss:0000000000220ECA                 db    ? ;
.bss:0000000000220ECB                 db    ? ;
.bss:0000000000220ECC                 db    ? ;
.bss:0000000000220ECD                 db    ? ;
.bss:0000000000220ECE                 db    ? ;
.bss:0000000000220ECF                 db    ? ;
.bss:0000000000220ED0                 db    ? ;
.bss:0000000000220ED1                 db    ? ;
.bss:0000000000220ED2                 db    ? ;
.bss:0000000000220ED3                 db    ? ;
.bss:0000000000220ED4                 db    ? ;
.bss:0000000000220ED5                 db    ? ;
.bss:0000000000220ED6                 db    ? ;
.bss:0000000000220ED7                 db    ? ;
.bss:0000000000220ED8                 db    ? ;
.bss:0000000000220ED9                 db    ? ;
.bss:0000000000220EDA                 db    ? ;
.bss:0000000000220EDB                 db    ? ;
.bss:0000000000220EDC                 db    ? ;
.bss:0000000000220EDD                 db    ? ;
.bss:0000000000220EDE                 db    ? ;
.bss:0000000000220EDF                 db    ? ;
.bss:0000000000220EE0                 db    ? ;
.bss:0000000000220EE1                 db    ? ;
.bss:0000000000220EE2                 db    ? ;
.bss:0000000000220EE3                 db    ? ;
.bss:0000000000220EE4                 db    ? ;
.bss:0000000000220EE5                 db    ? ;
.bss:0000000000220EE6                 db    ? ;
.bss:0000000000220EE7                 db    ? ;
.bss:0000000000220EE8                 db    ? ;
.bss:0000000000220EE9                 db    ? ;
.bss:0000000000220EEA                 db    ? ;
.bss:0000000000220EEB                 db    ? ;
.bss:0000000000220EEC                 db    ? ;
.bss:0000000000220EED                 db    ? ;
.bss:0000000000220EEE                 db    ? ;
.bss:0000000000220EEF                 db    ? ;
.bss:0000000000220EF0                 db    ? ;
.bss:0000000000220EF1                 db    ? ;
.bss:0000000000220EF2                 db    ? ;
.bss:0000000000220EF3                 db    ? ;
.bss:0000000000220EF4                 db    ? ;
.bss:0000000000220EF5                 db    ? ;
.bss:0000000000220EF6                 db    ? ;
.bss:0000000000220EF7                 db    ? ;
.bss:0000000000220EF8                 db    ? ;
.bss:0000000000220EF9                 db    ? ;
.bss:0000000000220EFA                 db    ? ;
.bss:0000000000220EFB                 db    ? ;
.bss:0000000000220EFC                 db    ? ;
.bss:0000000000220EFD                 db    ? ;
.bss:0000000000220EFE                 db    ? ;
.bss:0000000000220EFF                 db    ? ;
.bss:0000000000220F00                 db    ? ;
.bss:0000000000220F01                 db    ? ;
.bss:0000000000220F02                 db    ? ;
.bss:0000000000220F03                 db    ? ;
.bss:0000000000220F04                 db    ? ;
.bss:0000000000220F05                 db    ? ;
.bss:0000000000220F06                 db    ? ;
.bss:0000000000220F07                 db    ? ;
.bss:0000000000220F08                 db    ? ;
.bss:0000000000220F09                 db    ? ;
.bss:0000000000220F0A                 db    ? ;
.bss:0000000000220F0B                 db    ? ;
.bss:0000000000220F0C                 db    ? ;
.bss:0000000000220F0D                 db    ? ;
.bss:0000000000220F0E                 db    ? ;
.bss:0000000000220F0F                 db    ? ;
.bss:0000000000220F10                 db    ? ;
.bss:0000000000220F11                 db    ? ;
.bss:0000000000220F12                 db    ? ;
.bss:0000000000220F13                 db    ? ;
.bss:0000000000220F14                 db    ? ;
.bss:0000000000220F15                 db    ? ;
.bss:0000000000220F16                 db    ? ;
.bss:0000000000220F17                 db    ? ;
.bss:0000000000220F18                 db    ? ;
.bss:0000000000220F19                 db    ? ;
.bss:0000000000220F1A                 db    ? ;
.bss:0000000000220F1B                 db    ? ;
.bss:0000000000220F1C                 db    ? ;
.bss:0000000000220F1D                 db    ? ;
.bss:0000000000220F1E                 db    ? ;
.bss:0000000000220F1F                 db    ? ;
.bss:0000000000220F20                 db    ? ;
.bss:0000000000220F21                 db    ? ;
.bss:0000000000220F22                 db    ? ;
.bss:0000000000220F23                 db    ? ;
.bss:0000000000220F24                 db    ? ;
.bss:0000000000220F25                 db    ? ;
.bss:0000000000220F26                 db    ? ;
.bss:0000000000220F27                 db    ? ;
.bss:0000000000220F28                 db    ? ;
.bss:0000000000220F29                 db    ? ;
.bss:0000000000220F2A                 db    ? ;
.bss:0000000000220F2B                 db    ? ;
.bss:0000000000220F2C                 db    ? ;
.bss:0000000000220F2D                 db    ? ;
.bss:0000000000220F2E                 db    ? ;
.bss:0000000000220F2F                 db    ? ;
.bss:0000000000220F30                 db    ? ;
.bss:0000000000220F31                 db    ? ;
.bss:0000000000220F32                 db    ? ;
.bss:0000000000220F33                 db    ? ;
.bss:0000000000220F34                 db    ? ;
.bss:0000000000220F35                 db    ? ;
.bss:0000000000220F36                 db    ? ;
.bss:0000000000220F37                 db    ? ;
.bss:0000000000220F38                 db    ? ;
.bss:0000000000220F39                 db    ? ;
.bss:0000000000220F3A                 db    ? ;
.bss:0000000000220F3B                 db    ? ;
.bss:0000000000220F3C                 db    ? ;
.bss:0000000000220F3D                 db    ? ;
.bss:0000000000220F3E                 db    ? ;
.bss:0000000000220F3F                 db    ? ;
.bss:0000000000220F40                 db    ? ;
.bss:0000000000220F41                 db    ? ;
.bss:0000000000220F42                 db    ? ;
.bss:0000000000220F43                 db    ? ;
.bss:0000000000220F44                 db    ? ;
.bss:0000000000220F45                 db    ? ;
.bss:0000000000220F46                 db    ? ;
.bss:0000000000220F47                 db    ? ;
.bss:0000000000220F48                 db    ? ;
.bss:0000000000220F49                 db    ? ;
.bss:0000000000220F4A                 db    ? ;
.bss:0000000000220F4B                 db    ? ;
.bss:0000000000220F4C                 db    ? ;
.bss:0000000000220F4D                 db    ? ;
.bss:0000000000220F4E                 db    ? ;
.bss:0000000000220F4F                 db    ? ;
.bss:0000000000220F50                 db    ? ;
.bss:0000000000220F51                 db    ? ;
.bss:0000000000220F52                 db    ? ;
.bss:0000000000220F53                 db    ? ;
.bss:0000000000220F54                 db    ? ;
.bss:0000000000220F55                 db    ? ;
.bss:0000000000220F56                 db    ? ;
.bss:0000000000220F57                 db    ? ;
.bss:0000000000220F58                 db    ? ;
.bss:0000000000220F59                 db    ? ;
.bss:0000000000220F5A                 db    ? ;
.bss:0000000000220F5B                 db    ? ;
.bss:0000000000220F5C                 db    ? ;
.bss:0000000000220F5D                 db    ? ;
.bss:0000000000220F5E                 db    ? ;
.bss:0000000000220F5F                 db    ? ;
.bss:0000000000220F60                 db    ? ;
.bss:0000000000220F61                 db    ? ;
.bss:0000000000220F62                 db    ? ;
.bss:0000000000220F63                 db    ? ;
.bss:0000000000220F64                 db    ? ;
.bss:0000000000220F65                 db    ? ;
.bss:0000000000220F66                 db    ? ;
.bss:0000000000220F67                 db    ? ;
.bss:0000000000220F68                 db    ? ;
.bss:0000000000220F69                 db    ? ;
.bss:0000000000220F6A                 db    ? ;
.bss:0000000000220F6B                 db    ? ;
.bss:0000000000220F6C                 db    ? ;
.bss:0000000000220F6D                 db    ? ;
.bss:0000000000220F6E                 db    ? ;
.bss:0000000000220F6F                 db    ? ;
.bss:0000000000220F70                 db    ? ;
.bss:0000000000220F71                 db    ? ;
.bss:0000000000220F72                 db    ? ;
.bss:0000000000220F73                 db    ? ;
.bss:0000000000220F74                 db    ? ;
.bss:0000000000220F75                 db    ? ;
.bss:0000000000220F76                 db    ? ;
.bss:0000000000220F77                 db    ? ;
.bss:0000000000220F78                 db    ? ;
.bss:0000000000220F79                 db    ? ;
.bss:0000000000220F7A                 db    ? ;
.bss:0000000000220F7B                 db    ? ;
.bss:0000000000220F7C                 db    ? ;
.bss:0000000000220F7D                 db    ? ;
.bss:0000000000220F7E                 db    ? ;
.bss:0000000000220F7F                 db    ? ;
.bss:0000000000220F80                 db    ? ;
.bss:0000000000220F81                 db    ? ;
.bss:0000000000220F82                 db    ? ;
.bss:0000000000220F83                 db    ? ;
.bss:0000000000220F84                 db    ? ;
.bss:0000000000220F85                 db    ? ;
.bss:0000000000220F86                 db    ? ;
.bss:0000000000220F87                 db    ? ;
.bss:0000000000220F88                 db    ? ;
.bss:0000000000220F89                 db    ? ;
.bss:0000000000220F8A                 db    ? ;
.bss:0000000000220F8B                 db    ? ;
.bss:0000000000220F8C                 db    ? ;
.bss:0000000000220F8D                 db    ? ;
.bss:0000000000220F8E                 db    ? ;
.bss:0000000000220F8F                 db    ? ;
.bss:0000000000220F90                 db    ? ;
.bss:0000000000220F91                 db    ? ;
.bss:0000000000220F92                 db    ? ;
.bss:0000000000220F93                 db    ? ;
.bss:0000000000220F94                 db    ? ;
.bss:0000000000220F95                 db    ? ;
.bss:0000000000220F96                 db    ? ;
.bss:0000000000220F97                 db    ? ;
.bss:0000000000220F98                 db    ? ;
.bss:0000000000220F99                 db    ? ;
.bss:0000000000220F9A                 db    ? ;
.bss:0000000000220F9B                 db    ? ;
.bss:0000000000220F9C                 db    ? ;
.bss:0000000000220F9D                 db    ? ;
.bss:0000000000220F9E                 db    ? ;
.bss:0000000000220F9F                 db    ? ;
.bss:0000000000220FA0                 db    ? ;
.bss:0000000000220FA1                 db    ? ;
.bss:0000000000220FA2                 db    ? ;
.bss:0000000000220FA3                 db    ? ;
.bss:0000000000220FA4                 db    ? ;
.bss:0000000000220FA5                 db    ? ;
.bss:0000000000220FA6                 db    ? ;
.bss:0000000000220FA7                 db    ? ;
.bss:0000000000220FA8                 db    ? ;
.bss:0000000000220FA9                 db    ? ;
.bss:0000000000220FAA                 db    ? ;
.bss:0000000000220FAB                 db    ? ;
.bss:0000000000220FAC                 db    ? ;
.bss:0000000000220FAD                 db    ? ;
.bss:0000000000220FAE                 db    ? ;
.bss:0000000000220FAF                 db    ? ;
.bss:0000000000220FB0                 db    ? ;
.bss:0000000000220FB1                 db    ? ;
.bss:0000000000220FB2                 db    ? ;
.bss:0000000000220FB3                 db    ? ;
.bss:0000000000220FB4                 db    ? ;
.bss:0000000000220FB5                 db    ? ;
.bss:0000000000220FB6                 db    ? ;
.bss:0000000000220FB7                 db    ? ;
.bss:0000000000220FB8                 db    ? ;
.bss:0000000000220FB9                 db    ? ;
.bss:0000000000220FBA                 db    ? ;
.bss:0000000000220FBB                 db    ? ;
.bss:0000000000220FBC                 db    ? ;
.bss:0000000000220FBD                 db    ? ;
.bss:0000000000220FBE                 db    ? ;
.bss:0000000000220FBF                 db    ? ;
.bss:0000000000220FC0                 db    ? ;
.bss:0000000000220FC1                 db    ? ;
.bss:0000000000220FC2                 db    ? ;
.bss:0000000000220FC3                 db    ? ;
.bss:0000000000220FC4                 db    ? ;
.bss:0000000000220FC5                 db    ? ;
.bss:0000000000220FC6                 db    ? ;
.bss:0000000000220FC7                 db    ? ;
.bss:0000000000220FC8                 db    ? ;
.bss:0000000000220FC9                 db    ? ;
.bss:0000000000220FCA                 db    ? ;
.bss:0000000000220FCB                 db    ? ;
.bss:0000000000220FCC                 db    ? ;
.bss:0000000000220FCD                 db    ? ;
.bss:0000000000220FCE                 db    ? ;
.bss:0000000000220FCF                 db    ? ;
.bss:0000000000220FD0                 db    ? ;
.bss:0000000000220FD1                 db    ? ;
.bss:0000000000220FD2                 db    ? ;
.bss:0000000000220FD3                 db    ? ;
.bss:0000000000220FD4                 db    ? ;
.bss:0000000000220FD5                 db    ? ;
.bss:0000000000220FD6                 db    ? ;
.bss:0000000000220FD7                 db    ? ;
.bss:0000000000220FD8                 db    ? ;
.bss:0000000000220FD9                 db    ? ;
.bss:0000000000220FDA                 db    ? ;
.bss:0000000000220FDB                 db    ? ;
.bss:0000000000220FDC                 db    ? ;
.bss:0000000000220FDD                 db    ? ;
.bss:0000000000220FDE                 db    ? ;
.bss:0000000000220FDF                 db    ? ;
.bss:0000000000220FE0 RFC3986         db    ? ;               ; DATA XREF: main:loc_4958↑o
.bss:0000000000220FE0                                         ; file_escape+3D↑o
.bss:0000000000220FE1                 db    ? ;
.bss:0000000000220FE2                 db    ? ;
.bss:0000000000220FE3                 db    ? ;
.bss:0000000000220FE4                 db    ? ;
.bss:0000000000220FE5                 db    ? ;
.bss:0000000000220FE6                 db    ? ;
.bss:0000000000220FE7                 db    ? ;
.bss:0000000000220FE8                 db    ? ;
.bss:0000000000220FE9                 db    ? ;
.bss:0000000000220FEA                 db    ? ;
.bss:0000000000220FEB                 db    ? ;
.bss:0000000000220FEC                 db    ? ;
.bss:0000000000220FED                 db    ? ;
.bss:0000000000220FEE                 db    ? ;
.bss:0000000000220FEF                 db    ? ;
.bss:0000000000220FF0                 db    ? ;
.bss:0000000000220FF1                 db    ? ;
.bss:0000000000220FF2                 db    ? ;
.bss:0000000000220FF3                 db    ? ;
.bss:0000000000220FF4                 db    ? ;
.bss:0000000000220FF5                 db    ? ;
.bss:0000000000220FF6                 db    ? ;
.bss:0000000000220FF7                 db    ? ;
.bss:0000000000220FF8                 db    ? ;
.bss:0000000000220FF9                 db    ? ;
.bss:0000000000220FFA                 db    ? ;
.bss:0000000000220FFB                 db    ? ;
.bss:0000000000220FFC                 db    ? ;
.bss:0000000000220FFD                 db    ? ;
.bss:0000000000220FFE                 db    ? ;
.bss:0000000000220FFF                 db    ? ;
.bss:0000000000221000                 db    ? ;
.bss:0000000000221001                 db    ? ;
.bss:0000000000221002                 db    ? ;
.bss:0000000000221003                 db    ? ;
.bss:0000000000221004                 db    ? ;
.bss:0000000000221005                 db    ? ;
.bss:0000000000221006                 db    ? ;
.bss:0000000000221007                 db    ? ;
.bss:0000000000221008                 db    ? ;
.bss:0000000000221009                 db    ? ;
.bss:000000000022100A                 db    ? ;
.bss:000000000022100B                 db    ? ;
.bss:000000000022100C                 db    ? ;
.bss:000000000022100D                 db    ? ;
.bss:000000000022100E                 db    ? ;
.bss:000000000022100F                 db    ? ;
.bss:0000000000221010                 db    ? ;
.bss:0000000000221011                 db    ? ;
.bss:0000000000221012                 db    ? ;
.bss:0000000000221013                 db    ? ;
.bss:0000000000221014                 db    ? ;
.bss:0000000000221015                 db    ? ;
.bss:0000000000221016                 db    ? ;
.bss:0000000000221017                 db    ? ;
.bss:0000000000221018                 db    ? ;
.bss:0000000000221019                 db    ? ;
.bss:000000000022101A                 db    ? ;
.bss:000000000022101B                 db    ? ;
.bss:000000000022101C                 db    ? ;
.bss:000000000022101D                 db    ? ;
.bss:000000000022101E                 db    ? ;
.bss:000000000022101F                 db    ? ;
.bss:0000000000221020                 db    ? ;
.bss:0000000000221021                 db    ? ;
.bss:0000000000221022                 db    ? ;
.bss:0000000000221023                 db    ? ;
.bss:0000000000221024                 db    ? ;
.bss:0000000000221025                 db    ? ;
.bss:0000000000221026                 db    ? ;
.bss:0000000000221027                 db    ? ;
.bss:0000000000221028                 db    ? ;
.bss:0000000000221029                 db    ? ;
.bss:000000000022102A                 db    ? ;
.bss:000000000022102B                 db    ? ;
.bss:000000000022102C                 db    ? ;
.bss:000000000022102D                 db    ? ;
.bss:000000000022102E                 db    ? ;
.bss:000000000022102F                 db    ? ;
.bss:0000000000221030                 db    ? ;
.bss:0000000000221031                 db    ? ;
.bss:0000000000221032                 db    ? ;
.bss:0000000000221033                 db    ? ;
.bss:0000000000221034                 db    ? ;
.bss:0000000000221035                 db    ? ;
.bss:0000000000221036                 db    ? ;
.bss:0000000000221037                 db    ? ;
.bss:0000000000221038                 db    ? ;
.bss:0000000000221039                 db    ? ;
.bss:000000000022103A                 db    ? ;
.bss:000000000022103B                 db    ? ;
.bss:000000000022103C                 db    ? ;
.bss:000000000022103D                 db    ? ;
.bss:000000000022103E                 db    ? ;
.bss:000000000022103F                 db    ? ;
.bss:0000000000221040                 db    ? ;
.bss:0000000000221041                 db    ? ;
.bss:0000000000221042                 db    ? ;
.bss:0000000000221043                 db    ? ;
.bss:0000000000221044                 db    ? ;
.bss:0000000000221045                 db    ? ;
.bss:0000000000221046                 db    ? ;
.bss:0000000000221047                 db    ? ;
.bss:0000000000221048                 db    ? ;
.bss:0000000000221049                 db    ? ;
.bss:000000000022104A                 db    ? ;
.bss:000000000022104B                 db    ? ;
.bss:000000000022104C                 db    ? ;
.bss:000000000022104D                 db    ? ;
.bss:000000000022104E                 db    ? ;
.bss:000000000022104F                 db    ? ;
.bss:0000000000221050                 db    ? ;
.bss:0000000000221051                 db    ? ;
.bss:0000000000221052                 db    ? ;
.bss:0000000000221053                 db    ? ;
.bss:0000000000221054                 db    ? ;
.bss:0000000000221055                 db    ? ;
.bss:0000000000221056                 db    ? ;
.bss:0000000000221057                 db    ? ;
.bss:0000000000221058                 db    ? ;
.bss:0000000000221059                 db    ? ;
.bss:000000000022105A                 db    ? ;
.bss:000000000022105B                 db    ? ;
.bss:000000000022105C                 db    ? ;
.bss:000000000022105D                 db    ? ;
.bss:000000000022105E                 db    ? ;
.bss:000000000022105F                 db    ? ;
.bss:0000000000221060                 db    ? ;
.bss:0000000000221061                 db    ? ;
.bss:0000000000221062                 db    ? ;
.bss:0000000000221063                 db    ? ;
.bss:0000000000221064                 db    ? ;
.bss:0000000000221065                 db    ? ;
.bss:0000000000221066                 db    ? ;
.bss:0000000000221067                 db    ? ;
.bss:0000000000221068                 db    ? ;
.bss:0000000000221069                 db    ? ;
.bss:000000000022106A                 db    ? ;
.bss:000000000022106B                 db    ? ;
.bss:000000000022106C                 db    ? ;
.bss:000000000022106D                 db    ? ;
.bss:000000000022106E                 db    ? ;
.bss:000000000022106F                 db    ? ;
.bss:0000000000221070                 db    ? ;
.bss:0000000000221071                 db    ? ;
.bss:0000000000221072                 db    ? ;
.bss:0000000000221073                 db    ? ;
.bss:0000000000221074                 db    ? ;
.bss:0000000000221075                 db    ? ;
.bss:0000000000221076                 db    ? ;
.bss:0000000000221077                 db    ? ;
.bss:0000000000221078                 db    ? ;
.bss:0000000000221079                 db    ? ;
.bss:000000000022107A                 db    ? ;
.bss:000000000022107B                 db    ? ;
.bss:000000000022107C                 db    ? ;
.bss:000000000022107D                 db    ? ;
.bss:000000000022107E                 db    ? ;
.bss:000000000022107F                 db    ? ;
.bss:0000000000221080                 db    ? ;
.bss:0000000000221081                 db    ? ;
.bss:0000000000221082                 db    ? ;
.bss:0000000000221083                 db    ? ;
.bss:0000000000221084                 db    ? ;
.bss:0000000000221085                 db    ? ;
.bss:0000000000221086                 db    ? ;
.bss:0000000000221087                 db    ? ;
.bss:0000000000221088                 db    ? ;
.bss:0000000000221089                 db    ? ;
.bss:000000000022108A                 db    ? ;
.bss:000000000022108B                 db    ? ;
.bss:000000000022108C                 db    ? ;
.bss:000000000022108D                 db    ? ;
.bss:000000000022108E                 db    ? ;
.bss:000000000022108F                 db    ? ;
.bss:0000000000221090                 db    ? ;
.bss:0000000000221091                 db    ? ;
.bss:0000000000221092                 db    ? ;
.bss:0000000000221093                 db    ? ;
.bss:0000000000221094                 db    ? ;
.bss:0000000000221095                 db    ? ;
.bss:0000000000221096                 db    ? ;
.bss:0000000000221097                 db    ? ;
.bss:0000000000221098                 db    ? ;
.bss:0000000000221099                 db    ? ;
.bss:000000000022109A                 db    ? ;
.bss:000000000022109B                 db    ? ;
.bss:000000000022109C                 db    ? ;
.bss:000000000022109D                 db    ? ;
.bss:000000000022109E                 db    ? ;
.bss:000000000022109F                 db    ? ;
.bss:00000000002210A0                 db    ? ;
.bss:00000000002210A1                 db    ? ;
.bss:00000000002210A2                 db    ? ;
.bss:00000000002210A3                 db    ? ;
.bss:00000000002210A4                 db    ? ;
.bss:00000000002210A5                 db    ? ;
.bss:00000000002210A6                 db    ? ;
.bss:00000000002210A7                 db    ? ;
.bss:00000000002210A8                 db    ? ;
.bss:00000000002210A9                 db    ? ;
.bss:00000000002210AA                 db    ? ;
.bss:00000000002210AB                 db    ? ;
.bss:00000000002210AC                 db    ? ;
.bss:00000000002210AD                 db    ? ;
.bss:00000000002210AE                 db    ? ;
.bss:00000000002210AF                 db    ? ;
.bss:00000000002210B0                 db    ? ;
.bss:00000000002210B1                 db    ? ;
.bss:00000000002210B2                 db    ? ;
.bss:00000000002210B3                 db    ? ;
.bss:00000000002210B4                 db    ? ;
.bss:00000000002210B5                 db    ? ;
.bss:00000000002210B6                 db    ? ;
.bss:00000000002210B7                 db    ? ;
.bss:00000000002210B8                 db    ? ;
.bss:00000000002210B9                 db    ? ;
.bss:00000000002210BA                 db    ? ;
.bss:00000000002210BB                 db    ? ;
.bss:00000000002210BC                 db    ? ;
.bss:00000000002210BD                 db    ? ;
.bss:00000000002210BE                 db    ? ;
.bss:00000000002210BF                 db    ? ;
.bss:00000000002210C0                 db    ? ;
.bss:00000000002210C1                 db    ? ;
.bss:00000000002210C2                 db    ? ;
.bss:00000000002210C3                 db    ? ;
.bss:00000000002210C4                 db    ? ;
.bss:00000000002210C5                 db    ? ;
.bss:00000000002210C6                 db    ? ;
.bss:00000000002210C7                 db    ? ;
.bss:00000000002210C8                 db    ? ;
.bss:00000000002210C9                 db    ? ;
.bss:00000000002210CA                 db    ? ;
.bss:00000000002210CB                 db    ? ;
.bss:00000000002210CC                 db    ? ;
.bss:00000000002210CD                 db    ? ;
.bss:00000000002210CE                 db    ? ;
.bss:00000000002210CF                 db    ? ;
.bss:00000000002210D0                 db    ? ;
.bss:00000000002210D1                 db    ? ;
.bss:00000000002210D2                 db    ? ;
.bss:00000000002210D3                 db    ? ;
.bss:00000000002210D4                 db    ? ;
.bss:00000000002210D5                 db    ? ;
.bss:00000000002210D6                 db    ? ;
.bss:00000000002210D7                 db    ? ;
.bss:00000000002210D8                 db    ? ;
.bss:00000000002210D9                 db    ? ;
.bss:00000000002210DA                 db    ? ;
.bss:00000000002210DB                 db    ? ;
.bss:00000000002210DC                 db    ? ;
.bss:00000000002210DD                 db    ? ;
.bss:00000000002210DE                 db    ? ;
.bss:00000000002210DF                 db    ? ;
.bss:00000000002210E0 dev_ino_obstack db    ? ;               ; DATA XREF: main+C1B↑o
.bss:00000000002210E0                                         ; print_dir+1AD↑o
.bss:00000000002210E1                 db    ? ;
.bss:00000000002210E2                 db    ? ;
.bss:00000000002210E3                 db    ? ;
.bss:00000000002210E4                 db    ? ;
.bss:00000000002210E5                 db    ? ;
.bss:00000000002210E6                 db    ? ;
.bss:00000000002210E7                 db    ? ;
.bss:00000000002210E8                 db    ? ;
.bss:00000000002210E9                 db    ? ;
.bss:00000000002210EA                 db    ? ;
.bss:00000000002210EB                 db    ? ;
.bss:00000000002210EC                 db    ? ;
.bss:00000000002210ED                 db    ? ;
.bss:00000000002210EE                 db    ? ;
.bss:00000000002210EF                 db    ? ;
.bss:00000000002210F0 qword_2210F0    dq ?                    ; DATA XREF: main+D7E↑r
.bss:00000000002210F8 qword_2210F8    dq ?                    ; DATA XREF: main+D74↑r
.bss:00000000002210F8                                         ; main+D99↑w ...
.bss:0000000000221100 qword_221100    dq ?                    ; DATA XREF: print_dir+193↑r
.bss:0000000000221108                 align 40h
.bss:0000000000221140 subdired_obstack db    ? ;              ; DATA XREF: main+1158↑o
.bss:0000000000221140                                         ; main+11ED↑o ...
.bss:0000000000221141                 db    ? ;
.bss:0000000000221142                 db    ? ;
.bss:0000000000221143                 db    ? ;
.bss:0000000000221144                 db    ? ;
.bss:0000000000221145                 db    ? ;
.bss:0000000000221146                 db    ? ;
.bss:0000000000221147                 db    ? ;
.bss:0000000000221148                 db    ? ;
.bss:0000000000221149                 db    ? ;
.bss:000000000022114A                 db    ? ;
.bss:000000000022114B                 db    ? ;
.bss:000000000022114C                 db    ? ;
.bss:000000000022114D                 db    ? ;
.bss:000000000022114E                 db    ? ;
.bss:000000000022114F                 db    ? ;
.bss:0000000000221150                 db    ? ;
.bss:0000000000221151                 db    ? ;
.bss:0000000000221152                 db    ? ;
.bss:0000000000221153                 db    ? ;
.bss:0000000000221154                 db    ? ;
.bss:0000000000221155                 db    ? ;
.bss:0000000000221156                 db    ? ;
.bss:0000000000221157                 db    ? ;
.bss:0000000000221158                 db    ? ;
.bss:0000000000221159                 db    ? ;
.bss:000000000022115A                 db    ? ;
.bss:000000000022115B                 db    ? ;
.bss:000000000022115C                 db    ? ;
.bss:000000000022115D                 db    ? ;
.bss:000000000022115E                 db    ? ;
.bss:000000000022115F                 db    ? ;
.bss:0000000000221160                 db    ? ;
.bss:0000000000221161                 db    ? ;
.bss:0000000000221162                 db    ? ;
.bss:0000000000221163                 db    ? ;
.bss:0000000000221164                 db    ? ;
.bss:0000000000221165                 db    ? ;
.bss:0000000000221166                 db    ? ;
.bss:0000000000221167                 db    ? ;
.bss:0000000000221168                 db    ? ;
.bss:0000000000221169                 db    ? ;
.bss:000000000022116A                 db    ? ;
.bss:000000000022116B                 db    ? ;
.bss:000000000022116C                 db    ? ;
.bss:000000000022116D                 db    ? ;
.bss:000000000022116E                 db    ? ;
.bss:000000000022116F                 db    ? ;
.bss:0000000000221170                 db    ? ;
.bss:0000000000221171                 db    ? ;
.bss:0000000000221172                 db    ? ;
.bss:0000000000221173                 db    ? ;
.bss:0000000000221174                 db    ? ;
.bss:0000000000221175                 db    ? ;
.bss:0000000000221176                 db    ? ;
.bss:0000000000221177                 db    ? ;
.bss:0000000000221178                 db    ? ;
.bss:0000000000221179                 db    ? ;
.bss:000000000022117A                 db    ? ;
.bss:000000000022117B                 db    ? ;
.bss:000000000022117C                 db    ? ;
.bss:000000000022117D                 db    ? ;
.bss:000000000022117E                 db    ? ;
.bss:000000000022117F                 db    ? ;
.bss:0000000000221180                 db    ? ;
.bss:0000000000221181                 db    ? ;
.bss:0000000000221182                 db    ? ;
.bss:0000000000221183                 db    ? ;
.bss:0000000000221184                 db    ? ;
.bss:0000000000221185                 db    ? ;
.bss:0000000000221186                 db    ? ;
.bss:0000000000221187                 db    ? ;
.bss:0000000000221188                 db    ? ;
.bss:0000000000221189                 db    ? ;
.bss:000000000022118A                 db    ? ;
.bss:000000000022118B                 db    ? ;
.bss:000000000022118C                 db    ? ;
.bss:000000000022118D                 db    ? ;
.bss:000000000022118E                 db    ? ;
.bss:000000000022118F                 db    ? ;
.bss:0000000000221190                 db    ? ;
.bss:0000000000221191                 db    ? ;
.bss:0000000000221192                 db    ? ;
.bss:0000000000221193                 db    ? ;
.bss:0000000000221194                 db    ? ;
.bss:0000000000221195                 db    ? ;
.bss:0000000000221196                 db    ? ;
.bss:0000000000221197                 db    ? ;
.bss:0000000000221198                 db    ? ;
.bss:0000000000221199                 db    ? ;
.bss:000000000022119A                 db    ? ;
.bss:000000000022119B                 db    ? ;
.bss:000000000022119C                 db    ? ;
.bss:000000000022119D                 db    ? ;
.bss:000000000022119E                 db    ? ;
.bss:000000000022119F                 db    ? ;
.bss:00000000002211A0 dired_obstack   db    ? ;               ; DATA XREF: main+1142↑o
.bss:00000000002211A0                                         ; main:loc_4A7A↑o ...
.bss:00000000002211A1                 db    ? ;
.bss:00000000002211A2                 db    ? ;
.bss:00000000002211A3                 db    ? ;
.bss:00000000002211A4                 db    ? ;
.bss:00000000002211A5                 db    ? ;
.bss:00000000002211A6                 db    ? ;
.bss:00000000002211A7                 db    ? ;
.bss:00000000002211A8                 db    ? ;
.bss:00000000002211A9                 db    ? ;
.bss:00000000002211AA                 db    ? ;
.bss:00000000002211AB                 db    ? ;
.bss:00000000002211AC                 db    ? ;
.bss:00000000002211AD                 db    ? ;
.bss:00000000002211AE                 db    ? ;
.bss:00000000002211AF                 db    ? ;
.bss:00000000002211B0                 db    ? ;
.bss:00000000002211B1                 db    ? ;
.bss:00000000002211B2                 db    ? ;
.bss:00000000002211B3                 db    ? ;
.bss:00000000002211B4                 db    ? ;
.bss:00000000002211B5                 db    ? ;
.bss:00000000002211B6                 db    ? ;
.bss:00000000002211B7                 db    ? ;
.bss:00000000002211B8                 db    ? ;
.bss:00000000002211B9                 db    ? ;
.bss:00000000002211BA                 db    ? ;
.bss:00000000002211BB                 db    ? ;
.bss:00000000002211BC                 db    ? ;
.bss:00000000002211BD                 db    ? ;
.bss:00000000002211BE                 db    ? ;
.bss:00000000002211BF                 db    ? ;
.bss:00000000002211C0                 db    ? ;
.bss:00000000002211C1                 db    ? ;
.bss:00000000002211C2                 db    ? ;
.bss:00000000002211C3                 db    ? ;
.bss:00000000002211C4                 db    ? ;
.bss:00000000002211C5                 db    ? ;
.bss:00000000002211C6                 db    ? ;
.bss:00000000002211C7                 db    ? ;
.bss:00000000002211C8                 db    ? ;
.bss:00000000002211C9                 db    ? ;
.bss:00000000002211CA                 db    ? ;
.bss:00000000002211CB                 db    ? ;
.bss:00000000002211CC                 db    ? ;
.bss:00000000002211CD                 db    ? ;
.bss:00000000002211CE                 db    ? ;
.bss:00000000002211CF                 db    ? ;
.bss:00000000002211D0                 db    ? ;
.bss:00000000002211D1                 db    ? ;
.bss:00000000002211D2                 db    ? ;
.bss:00000000002211D3                 db    ? ;
.bss:00000000002211D4                 db    ? ;
.bss:00000000002211D5                 db    ? ;
.bss:00000000002211D6                 db    ? ;
.bss:00000000002211D7                 db    ? ;
.bss:00000000002211D8                 db    ? ;
.bss:00000000002211D9                 db    ? ;
.bss:00000000002211DA                 db    ? ;
.bss:00000000002211DB                 db    ? ;
.bss:00000000002211DC                 db    ? ;
.bss:00000000002211DD                 db    ? ;
.bss:00000000002211DE                 db    ? ;
.bss:00000000002211DF                 db    ? ;
.bss:00000000002211E0                 db    ? ;
.bss:00000000002211E1                 db    ? ;
.bss:00000000002211E2                 db    ? ;
.bss:00000000002211E3                 db    ? ;
.bss:00000000002211E4                 db    ? ;
.bss:00000000002211E5                 db    ? ;
.bss:00000000002211E6                 db    ? ;
.bss:00000000002211E7                 db    ? ;
.bss:00000000002211E8                 db    ? ;
.bss:00000000002211E9                 db    ? ;
.bss:00000000002211EA                 db    ? ;
.bss:00000000002211EB                 db    ? ;
.bss:00000000002211EC                 db    ? ;
.bss:00000000002211ED                 db    ? ;
.bss:00000000002211EE                 db    ? ;
.bss:00000000002211EF                 db    ? ;
.bss:00000000002211F0                 db    ? ;
.bss:00000000002211F1                 db    ? ;
.bss:00000000002211F2                 db    ? ;
.bss:00000000002211F3                 db    ? ;
.bss:00000000002211F4                 db    ? ;
.bss:00000000002211F5                 db    ? ;
.bss:00000000002211F6                 db    ? ;
.bss:00000000002211F7                 db    ? ;
.bss:00000000002211F8 dired_pos       dq ?                    ; DATA XREF: main:loc_4A66↑w
.bss:00000000002211F8                                         ; format_user_or_group:loc_624C↑r ...
.bss:0000000000221200 max_idx         dq ?                    ; DATA XREF: main+A48↑w
.bss:0000000000221200                                         ; calculate_columns+7↑r ...
.bss:0000000000221208 column_info     dq ?                    ; DATA XREF: calculate_columns+33↑r
.bss:0000000000221208                                         ; calculate_columns+7F↑w ...
.bss:0000000000221210 exit_status     dd ?                    ; DATA XREF: main+7B↑w
.bss:0000000000221210                                         ; main+E3C↑r ...
.bss:0000000000221214 stop_signal_count dd ?                  ; DATA XREF: main+F63↑r
.bss:0000000000221214                                         ; stophandler+A↑r ...
.bss:0000000000221218 ; int interrupt_signal
.bss:0000000000221218 interrupt_signal dd ?                   ; DATA XREF: main:loc_481F↑r
.bss:0000000000221218                                         ; sighandler↑r ...
.bss:000000000022121C                 align 20h
.bss:0000000000221220 ; sigset_t caught_signals
.bss:0000000000221220 caught_signals  sigset_t <?>            ; DATA XREF: signal_setup+35↑o
.bss:0000000000221220                                         ; signal_setup+A7↑o ...
.bss:00000000002212A0 format_needs_type db ?                  ; DATA XREF: main:loc_450A↑w
.bss:00000000002212A0                                         ; main+C70↑w ...
.bss:00000000002212A1 format_needs_stat db ?                  ; DATA XREF: main:loc_4501↑w
.bss:00000000002212A1                                         ; main+FB8↑w ...
.bss:00000000002212A2                 align 8
.bss:00000000002212A8 localtz         dq ?                    ; DATA XREF: main+C3F↑w
.bss:00000000002212A8                                         ; print_long_format+565↑r ...
.bss:00000000002212B0 line_length     dq ?                    ; DATA XREF: main+1B2↑w
.bss:00000000002212B0                                         ; main+1FB↑w ...
.bss:00000000002212B8 print_dir_name  db ?                    ; DATA XREF: main+85↑w
.bss:00000000002212B8                                         ; main+D3E↑w ...
.bss:00000000002212B9                 align 20h
.bss:00000000002212C0 tabsize         dq ?                    ; DATA XREF: main+214↑w
.bss:00000000002212C0                                         ; main+240↑w ...
.bss:00000000002212C8 dirname_quoting_options dq ?            ; DATA XREF: main+B13↑w
.bss:00000000002212C8                                         ; print_dir+2E7↑r
.bss:00000000002212D0 filename_quoting_options dq ?           ; DATA XREF: main+AAF↑w
.bss:00000000002212D0                                         ; main:loc_4380↑r ...
.bss:00000000002212D8 qmark_funny_chars db ?                  ; DATA XREF: main+AF↑w
.bss:00000000002212D8                                         ; main:loc_3F12↑w ...
.bss:00000000002212D9                 align 20h
.bss:00000000002212E0 hide_patterns   dq ?                    ; DATA XREF: main+156↑w
.bss:00000000002212E0                                         ; main+785↑r ...
.bss:00000000002212E8 ignore_patterns dq ?                    ; DATA XREF: main+14B↑w
.bss:00000000002212E8                                         ; main+476↑r ...
.bss:00000000002212F0 ignore_mode     dd ?                    ; DATA XREF: main+141↑w
.bss:00000000002212F0                                         ; main+31D↑w ...
.bss:00000000002212F4 directories_first db ?                  ; DATA XREF: main:loc_403C↑w
.bss:00000000002212F4                                         ; main+BB6↑r ...
.bss:00000000002212F5 immediate_dirs  db ?                    ; DATA XREF: main+13A↑w
.bss:00000000002212F5                                         ; main:loc_3BF6↑w ...
.bss:00000000002212F6 recursive       db ?                    ; DATA XREF: main+133↑w
.bss:00000000002212F6                                         ; main:loc_3CBE↑w ...
.bss:00000000002212F7                 align 8
.bss:00000000002212F8 dereference     dd ?                    ; DATA XREF: main+129↑w
.bss:00000000002212F8                                         ; main:loc_3CE9↑w ...
.bss:00000000002212FC print_inode     db ?                    ; DATA XREF: main+122↑w
.bss:00000000002212FC                                         ; main:loc_3B68↑w ...
.bss:00000000002212FD check_symlink_mode db ?                 ; DATA XREF: main:loc_445F↑w
.bss:00000000002212FD                                         ; gobble_file_constprop_52+3BE↑r ...
.bss:00000000002212FE                 align 20h
.bss:0000000000221300 ; void *color_buf
.bss:0000000000221300 color_buf       dq ?                    ; DATA XREF: main+1577↑w
.bss:0000000000221300                                         ; main+166C↑r
.bss:0000000000221308 color_ext_list  dq ?                    ; DATA XREF: main+1678↑r
.bss:0000000000221308                                         ; main+1733↑r ...
.bss:0000000000221310 used_color      db ?                    ; DATA XREF: main+DEF↑r
.bss:0000000000221310                                         ; put_indicator↑r ...
.bss:0000000000221311 print_hyperlink db ?                    ; DATA XREF: main+345↑w
.bss:0000000000221311                                         ; main:loc_42A9↑w ...
.bss:0000000000221312 print_with_color db ?                   ; DATA XREF: main+33E↑w
.bss:0000000000221312                                         ; main:loc_4112↑w ...
.bss:0000000000221313                 align 4
.bss:0000000000221314 indicator_style dd ?                    ; DATA XREF: main+118↑w
.bss:0000000000221314                                         ; main:loc_3D48↑w ...
.bss:0000000000221318 dired           db ?                    ; DATA XREF: main:loc_3D57↑w
.bss:0000000000221318                                         ; main+B1F↑r ...
.bss:0000000000221319                 align 4
.bss:000000000022131C file_human_output_opts dd ?             ; DATA XREF: main+2DB↑w
.bss:000000000022131C                                         ; main+64D↑w ...
.bss:0000000000221320 output_block_size dq ?                  ; DATA XREF: main+2E5↑w
.bss:0000000000221320                                         ; main+657↑w ...
.bss:0000000000221328 human_output_opts dd ?                  ; DATA XREF: main:loc_3B71↑w
.bss:0000000000221328                                         ; main:loc_3EE3↑w ...
.bss:000000000022132C print_block_size db ?                   ; DATA XREF: main+111↑w
.bss:000000000022132C                                         ; main:loc_3BD7↑w ...
.bss:000000000022132D numeric_ids     db ?                    ; DATA XREF: main+10A↑w
.bss:000000000022132D                                         ; main:loc_3B4E↑w ...
.bss:000000000022132E print_author    db ?                    ; DATA XREF: main:loc_424E↑w
.bss:000000000022132E                                         ; print_long_format+210↑r ...
.bss:000000000022132F sort_reverse    db ?                    ; DATA XREF: main+103↑w
.bss:000000000022132F                                         ; main:loc_417F↑w ...
.bss:0000000000221330 sort_type       dd ?                    ; DATA XREF: main+F9↑w
.bss:0000000000221330                                         ; main+327↑w ...
.bss:0000000000221334 time_type       dd ?                    ; DATA XREF: main+EF↑w
.bss:0000000000221334                                         ; main:loc_3C02↑w ...
.bss:0000000000221338 format          dd ?                    ; DATA XREF: main+D9↑w
.bss:0000000000221338                                         ; main:loc_3B55↑w ...
.bss:000000000022133C file_size_width dd ?                    ; DATA XREF: print_long_format:loc_8146↑r
.bss:000000000022133C                                         ; print_long_format+834↑r ...
.bss:0000000000221340 minor_device_number_width dd ?          ; DATA XREF: print_long_format+826↑r
.bss:0000000000221340                                         ; print_long_format+869↑r ...
.bss:0000000000221344 major_device_number_width dd ?          ; DATA XREF: print_long_format:loc_86B0↑r
.bss:0000000000221344                                         ; print_long_format+8A2↑r ...
.bss:0000000000221348 author_width    dd ?                    ; DATA XREF: print_long_format+6AA↑r
.bss:0000000000221348                                         ; clear_files+94↑w ...
.bss:000000000022134C group_width     dd ?                    ; DATA XREF: print_long_format+6C7↑r
.bss:000000000022134C                                         ; clear_files+8A↑w ...
.bss:0000000000221350 owner_width     dd ?                    ; DATA XREF: print_long_format+71A↑r
.bss:0000000000221350                                         ; clear_files+80↑w ...
.bss:0000000000221354 scontext_width  dd ?                    ; DATA XREF: print_file_name_and_frills+CD↑r
.bss:0000000000221354                                         ; print_long_format+687↑r ...
.bss:0000000000221358 nlink_width     dd ?                    ; DATA XREF: print_long_format+1BA↑r
.bss:0000000000221358                                         ; clear_files+76↑w ...
.bss:000000000022135C block_size_width dd ?                   ; DATA XREF: print_file_name_and_frills:loc_7D99↑r
.bss:000000000022135C                                         ; print_long_format:loc_7FCB↑r ...
.bss:0000000000221360 inode_number_width dd ?                 ; DATA XREF: print_file_name_and_frills+58↑r
.bss:0000000000221360                                         ; print_long_format+C1↑r ...
.bss:0000000000221364 any_has_acl     db ?                    ; DATA XREF: print_long_format+48↑r
.bss:0000000000221364                                         ; print_long_format+3FD↑r ...
.bss:0000000000221365 print_scontext  db ?                    ; DATA XREF: main+161↑w
.bss:0000000000221365                                         ; main:loc_3C31↑w ...
.bss:0000000000221366                 align 10h
.bss:0000000000221370 ; struct timespec current_time
.bss:0000000000221370 current_time    timespec <?>            ; DATA XREF: main+8C↑w
.bss:0000000000221370                                         ; print_long_format+582↑r ...
.bss:0000000000221380 ; void *pending_dirs
.bss:0000000000221380 pending_dirs    dq ?                    ; DATA XREF: main+99↑w
.bss:0000000000221380                                         ; main+D06↑r ...
.bss:0000000000221388 hostname        dq ?                    ; DATA XREF: main:loc_49C8↑w
.bss:0000000000221388                                         ; quote_name:loc_755A↑r
.bss:0000000000221390 color_symlink_as_referent db ?          ; DATA XREF: main+133C↑r
.bss:0000000000221390                                         ; main+16C7↑w ...
.bss:0000000000221391                 align 8
.bss:0000000000221398 sorted_file_alloc dq ?                  ; DATA XREF: sort_files+11↑r
.bss:0000000000221398                                         ; sort_files+15B↑w
.bss:00000000002213A0 ; void *sorted_file
.bss:00000000002213A0 sorted_file     dq ?                    ; DATA XREF: sort_files+2E↑r
.bss:00000000002213A0                                         ; sort_files+85↑r ...
.bss:00000000002213A8 align_variable_outer_quotes db ?        ; DATA XREF: main+A99↑w
.bss:00000000002213A8                                         ; main+A9F↑w ...
.bss:00000000002213A9 cwd_some_quoted db ?                    ; DATA XREF: quote_name_buf:loc_7160↑r
.bss:00000000002213A9                                         ; quote_name:loc_7700↑r ...
.bss:00000000002213AA                 align 10h
.bss:00000000002213B0 cwd_n_used      dq ?                    ; DATA XREF: main+CB3↑w
.bss:00000000002213B0                                         ; main:loc_4594↑r ...
.bss:00000000002213B8 cwd_n_alloc     dq ?                    ; DATA XREF: main+C99↑w
.bss:00000000002213B8                                         ; gobble_file_constprop_52+3A↑r ...
.bss:00000000002213C0 cwd_file        dq ?                    ; DATA XREF: main+CBE↑w
.bss:00000000002213C0                                         ; sort_files+27↑r ...
.bss:00000000002213C8 ; void *active_dir_set
.bss:00000000002213C8 active_dir_set  dq ?                    ; DATA XREF: main+C00↑w
.bss:00000000002213C8                                         ; main+D63↑r ...
.bss:00000000002213D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002213D0                                         ; close_stdout+1B↑r
.bss:00000000002213D1                 align 8
.bss:00000000002213D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002213D8                                         ; close_stdout+56↑r
.bss:00000000002213E0 nogroup_alist   dq ?                    ; DATA XREF: getuidbyname_0:loc_FA50↑r
.bss:00000000002213E0                                         ; getuidbyname_0:loc_FAE0↑r ...
.bss:00000000002213E8 group_alist     dq ?                    ; DATA XREF: getuser_0+4↑r
.bss:00000000002213E8                                         ; getuser_0+6E↑r ...
.bss:00000000002213F0 nouser_alist    dq ?                    ; DATA XREF: getuidbyname:loc_F8B0↑r
.bss:00000000002213F0                                         ; getuidbyname:loc_F940↑r ...
.bss:00000000002213F8 user_alist      dq ?                    ; DATA XREF: getuser+4↑r
.bss:00000000002213F8                                         ; getuser+6E↑r ...
.bss:0000000000221400                 public program_name
.bss:0000000000221400 program_name    dq ?                    ; DATA XREF: usage+15↑r
.bss:0000000000221400                                         ; set_program_name:loc_120BD↑w
.bss:0000000000221408                 align 20h
.bss:0000000000221420 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000221420                                         ; quotearg_free+46↑o ...
.bss:0000000000221421                 db    ? ;
.bss:0000000000221422                 db    ? ;
.bss:0000000000221423                 db    ? ;
.bss:0000000000221424                 db    ? ;
.bss:0000000000221425                 db    ? ;
.bss:0000000000221426                 db    ? ;
.bss:0000000000221427                 db    ? ;
.bss:0000000000221428                 db    ? ;
.bss:0000000000221429                 db    ? ;
.bss:000000000022142A                 db    ? ;
.bss:000000000022142B                 db    ? ;
.bss:000000000022142C                 db    ? ;
.bss:000000000022142D                 db    ? ;
.bss:000000000022142E                 db    ? ;
.bss:000000000022142F                 db    ? ;
.bss:0000000000221430                 db    ? ;
.bss:0000000000221431                 db    ? ;
.bss:0000000000221432                 db    ? ;
.bss:0000000000221433                 db    ? ;
.bss:0000000000221434                 db    ? ;
.bss:0000000000221435                 db    ? ;
.bss:0000000000221436                 db    ? ;
.bss:0000000000221437                 db    ? ;
.bss:0000000000221438                 db    ? ;
.bss:0000000000221439                 db    ? ;
.bss:000000000022143A                 db    ? ;
.bss:000000000022143B                 db    ? ;
.bss:000000000022143C                 db    ? ;
.bss:000000000022143D                 db    ? ;
.bss:000000000022143E                 db    ? ;
.bss:000000000022143F                 db    ? ;
.bss:0000000000221440                 db    ? ;
.bss:0000000000221441                 db    ? ;
.bss:0000000000221442                 db    ? ;
.bss:0000000000221443                 db    ? ;
.bss:0000000000221444                 db    ? ;
.bss:0000000000221445                 db    ? ;
.bss:0000000000221446                 db    ? ;
.bss:0000000000221447                 db    ? ;
.bss:0000000000221448                 db    ? ;
.bss:0000000000221449                 db    ? ;
.bss:000000000022144A                 db    ? ;
.bss:000000000022144B                 db    ? ;
.bss:000000000022144C                 db    ? ;
.bss:000000000022144D                 db    ? ;
.bss:000000000022144E                 db    ? ;
.bss:000000000022144F                 db    ? ;
.bss:0000000000221450                 db    ? ;
.bss:0000000000221451                 db    ? ;
.bss:0000000000221452                 db    ? ;
.bss:0000000000221453                 db    ? ;
.bss:0000000000221454                 db    ? ;
.bss:0000000000221455                 db    ? ;
.bss:0000000000221456                 db    ? ;
.bss:0000000000221457                 db    ? ;
.bss:0000000000221458                 db    ? ;
.bss:0000000000221459                 db    ? ;
.bss:000000000022145A                 db    ? ;
.bss:000000000022145B                 db    ? ;
.bss:000000000022145C                 db    ? ;
.bss:000000000022145D                 db    ? ;
.bss:000000000022145E                 db    ? ;
.bss:000000000022145F                 db    ? ;
.bss:0000000000221460                 db    ? ;
.bss:0000000000221461                 db    ? ;
.bss:0000000000221462                 db    ? ;
.bss:0000000000221463                 db    ? ;
.bss:0000000000221464                 db    ? ;
.bss:0000000000221465                 db    ? ;
.bss:0000000000221466                 db    ? ;
.bss:0000000000221467                 db    ? ;
.bss:0000000000221468                 db    ? ;
.bss:0000000000221469                 db    ? ;
.bss:000000000022146A                 db    ? ;
.bss:000000000022146B                 db    ? ;
.bss:000000000022146C                 db    ? ;
.bss:000000000022146D                 db    ? ;
.bss:000000000022146E                 db    ? ;
.bss:000000000022146F                 db    ? ;
.bss:0000000000221470                 db    ? ;
.bss:0000000000221471                 db    ? ;
.bss:0000000000221472                 db    ? ;
.bss:0000000000221473                 db    ? ;
.bss:0000000000221474                 db    ? ;
.bss:0000000000221475                 db    ? ;
.bss:0000000000221476                 db    ? ;
.bss:0000000000221477                 db    ? ;
.bss:0000000000221478                 db    ? ;
.bss:0000000000221479                 db    ? ;
.bss:000000000022147A                 db    ? ;
.bss:000000000022147B                 db    ? ;
.bss:000000000022147C                 db    ? ;
.bss:000000000022147D                 db    ? ;
.bss:000000000022147E                 db    ? ;
.bss:000000000022147F                 db    ? ;
.bss:0000000000221480                 db    ? ;
.bss:0000000000221481                 db    ? ;
.bss:0000000000221482                 db    ? ;
.bss:0000000000221483                 db    ? ;
.bss:0000000000221484                 db    ? ;
.bss:0000000000221485                 db    ? ;
.bss:0000000000221486                 db    ? ;
.bss:0000000000221487                 db    ? ;
.bss:0000000000221488                 db    ? ;
.bss:0000000000221489                 db    ? ;
.bss:000000000022148A                 db    ? ;
.bss:000000000022148B                 db    ? ;
.bss:000000000022148C                 db    ? ;
.bss:000000000022148D                 db    ? ;
.bss:000000000022148E                 db    ? ;
.bss:000000000022148F                 db    ? ;
.bss:0000000000221490                 db    ? ;
.bss:0000000000221491                 db    ? ;
.bss:0000000000221492                 db    ? ;
.bss:0000000000221493                 db    ? ;
.bss:0000000000221494                 db    ? ;
.bss:0000000000221495                 db    ? ;
.bss:0000000000221496                 db    ? ;
.bss:0000000000221497                 db    ? ;
.bss:0000000000221498                 db    ? ;
.bss:0000000000221499                 db    ? ;
.bss:000000000022149A                 db    ? ;
.bss:000000000022149B                 db    ? ;
.bss:000000000022149C                 db    ? ;
.bss:000000000022149D                 db    ? ;
.bss:000000000022149E                 db    ? ;
.bss:000000000022149F                 db    ? ;
.bss:00000000002214A0                 db    ? ;
.bss:00000000002214A1                 db    ? ;
.bss:00000000002214A2                 db    ? ;
.bss:00000000002214A3                 db    ? ;
.bss:00000000002214A4                 db    ? ;
.bss:00000000002214A5                 db    ? ;
.bss:00000000002214A6                 db    ? ;
.bss:00000000002214A7                 db    ? ;
.bss:00000000002214A8                 db    ? ;
.bss:00000000002214A9                 db    ? ;
.bss:00000000002214AA                 db    ? ;
.bss:00000000002214AB                 db    ? ;
.bss:00000000002214AC                 db    ? ;
.bss:00000000002214AD                 db    ? ;
.bss:00000000002214AE                 db    ? ;
.bss:00000000002214AF                 db    ? ;
.bss:00000000002214B0                 db    ? ;
.bss:00000000002214B1                 db    ? ;
.bss:00000000002214B2                 db    ? ;
.bss:00000000002214B3                 db    ? ;
.bss:00000000002214B4                 db    ? ;
.bss:00000000002214B5                 db    ? ;
.bss:00000000002214B6                 db    ? ;
.bss:00000000002214B7                 db    ? ;
.bss:00000000002214B8                 db    ? ;
.bss:00000000002214B9                 db    ? ;
.bss:00000000002214BA                 db    ? ;
.bss:00000000002214BB                 db    ? ;
.bss:00000000002214BC                 db    ? ;
.bss:00000000002214BD                 db    ? ;
.bss:00000000002214BE                 db    ? ;
.bss:00000000002214BF                 db    ? ;
.bss:00000000002214C0                 db    ? ;
.bss:00000000002214C1                 db    ? ;
.bss:00000000002214C2                 db    ? ;
.bss:00000000002214C3                 db    ? ;
.bss:00000000002214C4                 db    ? ;
.bss:00000000002214C5                 db    ? ;
.bss:00000000002214C6                 db    ? ;
.bss:00000000002214C7                 db    ? ;
.bss:00000000002214C8                 db    ? ;
.bss:00000000002214C9                 db    ? ;
.bss:00000000002214CA                 db    ? ;
.bss:00000000002214CB                 db    ? ;
.bss:00000000002214CC                 db    ? ;
.bss:00000000002214CD                 db    ? ;
.bss:00000000002214CE                 db    ? ;
.bss:00000000002214CF                 db    ? ;
.bss:00000000002214D0                 db    ? ;
.bss:00000000002214D1                 db    ? ;
.bss:00000000002214D2                 db    ? ;
.bss:00000000002214D3                 db    ? ;
.bss:00000000002214D4                 db    ? ;
.bss:00000000002214D5                 db    ? ;
.bss:00000000002214D6                 db    ? ;
.bss:00000000002214D7                 db    ? ;
.bss:00000000002214D8                 db    ? ;
.bss:00000000002214D9                 db    ? ;
.bss:00000000002214DA                 db    ? ;
.bss:00000000002214DB                 db    ? ;
.bss:00000000002214DC                 db    ? ;
.bss:00000000002214DD                 db    ? ;
.bss:00000000002214DE                 db    ? ;
.bss:00000000002214DF                 db    ? ;
.bss:00000000002214E0                 db    ? ;
.bss:00000000002214E1                 db    ? ;
.bss:00000000002214E2                 db    ? ;
.bss:00000000002214E3                 db    ? ;
.bss:00000000002214E4                 db    ? ;
.bss:00000000002214E5                 db    ? ;
.bss:00000000002214E6                 db    ? ;
.bss:00000000002214E7                 db    ? ;
.bss:00000000002214E8                 db    ? ;
.bss:00000000002214E9                 db    ? ;
.bss:00000000002214EA                 db    ? ;
.bss:00000000002214EB                 db    ? ;
.bss:00000000002214EC                 db    ? ;
.bss:00000000002214ED                 db    ? ;
.bss:00000000002214EE                 db    ? ;
.bss:00000000002214EF                 db    ? ;
.bss:00000000002214F0                 db    ? ;
.bss:00000000002214F1                 db    ? ;
.bss:00000000002214F2                 db    ? ;
.bss:00000000002214F3                 db    ? ;
.bss:00000000002214F4                 db    ? ;
.bss:00000000002214F5                 db    ? ;
.bss:00000000002214F6                 db    ? ;
.bss:00000000002214F7                 db    ? ;
.bss:00000000002214F8                 db    ? ;
.bss:00000000002214F9                 db    ? ;
.bss:00000000002214FA                 db    ? ;
.bss:00000000002214FB                 db    ? ;
.bss:00000000002214FC                 db    ? ;
.bss:00000000002214FD                 db    ? ;
.bss:00000000002214FE                 db    ? ;
.bss:00000000002214FF                 db    ? ;
.bss:0000000000221500                 db    ? ;
.bss:0000000000221501                 db    ? ;
.bss:0000000000221502                 db    ? ;
.bss:0000000000221503                 db    ? ;
.bss:0000000000221504                 db    ? ;
.bss:0000000000221505                 db    ? ;
.bss:0000000000221506                 db    ? ;
.bss:0000000000221507                 db    ? ;
.bss:0000000000221508                 db    ? ;
.bss:0000000000221509                 db    ? ;
.bss:000000000022150A                 db    ? ;
.bss:000000000022150B                 db    ? ;
.bss:000000000022150C                 db    ? ;
.bss:000000000022150D                 db    ? ;
.bss:000000000022150E                 db    ? ;
.bss:000000000022150F                 db    ? ;
.bss:0000000000221510                 db    ? ;
.bss:0000000000221511                 db    ? ;
.bss:0000000000221512                 db    ? ;
.bss:0000000000221513                 db    ? ;
.bss:0000000000221514                 db    ? ;
.bss:0000000000221515                 db    ? ;
.bss:0000000000221516                 db    ? ;
.bss:0000000000221517                 db    ? ;
.bss:0000000000221518                 db    ? ;
.bss:0000000000221519                 db    ? ;
.bss:000000000022151A                 db    ? ;
.bss:000000000022151B                 db    ? ;
.bss:000000000022151C                 db    ? ;
.bss:000000000022151D                 db    ? ;
.bss:000000000022151E                 db    ? ;
.bss:000000000022151F                 db    ? ;
.bss:0000000000221520 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000221520                                         ; get_quoting_style↑o ...
.bss:0000000000221530 xmmword_221530  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000221530                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000221540 xmmword_221540  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000221540                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000221550 qword_221550    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000221550                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000221550 _bss            ends
.bss:0000000000221550
.prgend:0000000000221558 ; ===========================================================================
.prgend:0000000000221558
.prgend:0000000000221558 ; Segment type: Zero-length
.prgend:0000000000221558 _prgend         segment byte public '' use64
.prgend:0000000000221558 _end            label byte
.prgend:0000000000221558 _prgend         ends
.prgend:0000000000221558
extern:0000000000221560 ; ===========================================================================
extern:0000000000221560
extern:0000000000221560 ; Segment type: Externs
extern:0000000000221560 ; extern
extern:0000000000221560 ; const __int32_t **_ctype_toupper_loc(void)
extern:0000000000221560                 extrn __ctype_toupper_loc:near
extern:0000000000221560                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:0000000000221560                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:0000000000221568 ; char *getenv(const char *name)
extern:0000000000221568                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:0000000000221568                                         ; DATA XREF: .got:getenv_ptr↑o
extern:0000000000221570 ; int sigprocmask(int how, const sigset_t *set, sigset_t *oset)
extern:0000000000221570                 extrn sigprocmask:near  ; CODE XREF: _sigprocmask↑j
extern:0000000000221570                                         ; DATA XREF: .got:sigprocmask_ptr↑o
extern:0000000000221578                 extrn __snprintf_chk:near
extern:0000000000221578                                         ; CODE XREF: ___snprintf_chk↑j
extern:0000000000221578                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:0000000000221580 ; int raise(int sig)
extern:0000000000221580                 extrn raise:near        ; CODE XREF: _raise↑j
extern:0000000000221580                                         ; DATA XREF: .got:raise_ptr↑o
extern:0000000000221588 ; void free(void *ptr)
extern:0000000000221588                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:0000000000221588                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000221590 ; void __noreturn abort(void)
extern:0000000000221590                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000221590                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000221598 ; int *_errno_location(void)
extern:0000000000221598                 extrn __errno_location:near
extern:0000000000221598                                         ; CODE XREF: ___errno_location↑j
extern:0000000000221598                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002215A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002215A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002215A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002215A8 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:00000000002215A8                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:00000000002215A8                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:00000000002215B0 ; void __noreturn exit(int status)
extern:00000000002215B0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002215B0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002215B8 ; char *strcpy(char *dest, const char *src)
extern:00000000002215B8                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:00000000002215B8                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:00000000002215C0 ; size_t _fpending(FILE *fp)
extern:00000000002215C0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002215C0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002215C8 ; int isatty(int fd)
extern:00000000002215C8                 extrn isatty:near       ; CODE XREF: _isatty↑j
extern:00000000002215C8                                         ; DATA XREF: .got:isatty_ptr↑o
extern:00000000002215D0 ; int sigaction(int sig, const struct sigaction *act, struct sigaction *oact)
extern:00000000002215D0                 extrn sigaction:near    ; CODE XREF: _sigaction↑j
extern:00000000002215D0                                         ; DATA XREF: .got:sigaction_ptr↑o
extern:00000000002215D8 ; int iswcntrl(wint_t wc)
extern:00000000002215D8                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:00000000002215D8                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:00000000002215E0 ; int wcswidth(const wchar_t *s, size_t n)
extern:00000000002215E0                 extrn wcswidth:near     ; CODE XREF: _wcswidth↑j
extern:00000000002215E0                                         ; DATA XREF: .got:wcswidth_ptr↑o
extern:00000000002215E8 ; struct lconv *localeconv(void)
extern:00000000002215E8                 extrn localeconv:near   ; CODE XREF: _localeconv↑j
extern:00000000002215E8                                         ; DATA XREF: .got:localeconv_ptr↑o
extern:00000000002215F0 ; size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n)
extern:00000000002215F0                 extrn mbstowcs:near     ; CODE XREF: _mbstowcs↑j
extern:00000000002215F0                                         ; DATA XREF: .got:mbstowcs_ptr↑o
extern:00000000002215F8 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:00000000002215F8                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:00000000002215F8                                         ; DATA XREF: .got:readlink_ptr↑o
extern:0000000000221600 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:0000000000221600                 extrn clock_gettime:near
extern:0000000000221600                                         ; CODE XREF: _clock_gettime↑j
extern:0000000000221600                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:0000000000221608 ; int setenv(const char *name, const char *value, int replace)
extern:0000000000221608                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:0000000000221608                                         ; DATA XREF: .got:setenv_ptr↑o
extern:0000000000221610 ; char *textdomain(const char *domainname)
extern:0000000000221610                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000221610                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000221618 ; int fclose(FILE *stream)
extern:0000000000221618                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000221618                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000221620 ; DIR *opendir(const char *name)
extern:0000000000221620                 extrn opendir:near      ; CODE XREF: _opendir↑j
extern:0000000000221620                                         ; DATA XREF: .got:opendir_ptr↑o
extern:0000000000221628 ; struct passwd *getpwuid(__uid_t uid)
extern:0000000000221628                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:0000000000221628                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:0000000000221630 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000221630                 extrn bindtextdomain:near
extern:0000000000221630                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000221630                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000221638 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000221638                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000221638                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000221640 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000221640                 extrn __ctype_get_mb_cur_max:near
extern:0000000000221640                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000221640                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000221648 ; size_t strlen(const char *s)
extern:0000000000221648                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000221648                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000221650 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000221650                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000221650                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000221658                 extrn __stack_chk_fail:near
extern:0000000000221658                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000221658                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000221660 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000221660                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000221660                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000221668 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000221668                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000221668                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000221670 ; char *strchr(const char *s, int c)
extern:0000000000221670                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000221670                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000221678 ; struct group *getgrgid(__gid_t gid)
extern:0000000000221678                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:0000000000221678                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:0000000000221680 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:0000000000221680                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:0000000000221680                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:0000000000221688 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
extern:0000000000221688                 extrn snprintf:near     ; CODE XREF: _snprintf↑j
extern:0000000000221688                                         ; DATA XREF: .got:snprintf_ptr↑o
extern:0000000000221690 ; int _overflow(_IO_FILE *, int)
extern:0000000000221690                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000221690                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000221698 ; char *strrchr(const char *s, int c)
extern:0000000000221698                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000221698                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002216A0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:00000000002216A0                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:00000000002216A0                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:00000000002216A8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002216A8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002216A8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002216B0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002216B0                 extrn __assert_fail:near
extern:00000000002216B0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002216B0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002216B8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002216B8                 extrn __strtoul_internal:near
extern:00000000002216B8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002216B8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002216C0 ; int fnmatch(const char *pattern, const char *name, int flags)
extern:00000000002216C0                 extrn fnmatch:near      ; CODE XREF: _fnmatch↑j
extern:00000000002216C0                                         ; DATA XREF: .got:fnmatch_ptr↑o
extern:00000000002216C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002216C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002216C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002216D0 ; int ioctl(int fd, unsigned __int64 request, ...)
extern:00000000002216D0                 extrn ioctl:near        ; CODE XREF: _ioctl↑j
extern:00000000002216D0                                         ; DATA XREF: .got:ioctl_ptr↑o
extern:00000000002216D8 ; char *getcwd(char *buf, size_t size)
extern:00000000002216D8                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:00000000002216D8                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:00000000002216E0 ; size_t strspn(const char *s, const char *accept)
extern:00000000002216E0                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:00000000002216E0                                         ; DATA XREF: .got:strspn_ptr↑o
extern:00000000002216E8 ; int closedir(DIR *dirp)
extern:00000000002216E8                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:00000000002216E8                                         ; DATA XREF: .got:closedir_ptr↑o
extern:00000000002216F0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002216F0                 extrn __libc_start_main:near
extern:00000000002216F0                                         ; CODE XREF: start+24↑p
extern:00000000002216F0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002216F8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002216F8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002216F8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000221700 ; int setjmp(jmp_buf env)
extern:0000000000221700                 extrn _setjmp:near      ; CODE XREF: __setjmp↑j
extern:0000000000221700                                         ; DATA XREF: .got:_setjmp_ptr↑o
extern:0000000000221708 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000221708                 extrn fputs_unlocked:near
extern:0000000000221708                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000221708                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000221710 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000221710                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000221710                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000221718 ; int strcmp(const char *s1, const char *s2)
extern:0000000000221718                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000221718                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000221720 ; __sighandler_t signal(int sig, __sighandler_t handler)
extern:0000000000221720                 extrn signal:near       ; CODE XREF: _signal↑j
extern:0000000000221720                                         ; DATA XREF: .got:signal_ptr↑o
extern:0000000000221728 ; int dirfd(DIR *dirp)
extern:0000000000221728                 extrn dirfd:near        ; CODE XREF: _dirfd↑j
extern:0000000000221728                                         ; DATA XREF: .got:dirfd_ptr↑o
extern:0000000000221730 ; struct passwd *getpwnam(const char *name)
extern:0000000000221730                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:0000000000221730                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:0000000000221738                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:0000000000221738                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:0000000000221740 ; int sigemptyset(sigset_t *set)
extern:0000000000221740                 extrn sigemptyset:near  ; CODE XREF: _sigemptyset↑j
extern:0000000000221740                                         ; DATA XREF: .got:sigemptyset_ptr↑o
extern:0000000000221748 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000221748                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000221748                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000221750 ; struct group *getgrnam(const char *name)
extern:0000000000221750                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:0000000000221750                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:0000000000221758 ; void tzset(void)
extern:0000000000221758                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:0000000000221758                                         ; DATA XREF: .got:tzset_ptr↑o
extern:0000000000221760 ; int fileno(FILE *stream)
extern:0000000000221760                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000221760                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000221768 ; __pid_t tcgetpgrp(int fd)
extern:0000000000221768                 extrn tcgetpgrp:near    ; CODE XREF: _tcgetpgrp↑j
extern:0000000000221768                                         ; DATA XREF: .got:tcgetpgrp_ptr↑o
extern:0000000000221770 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000221770                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000221770                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000221778 ; struct dirent *readdir(DIR *dirp)
extern:0000000000221778                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:0000000000221778                                         ; DATA XREF: .got:readdir_ptr↑o
extern:0000000000221780 ; int wcwidth(wchar_t c)
extern:0000000000221780                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:0000000000221780                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:0000000000221788 ; void *malloc(size_t size)
extern:0000000000221788                 extrn __imp_malloc:near ; CODE XREF: malloc↑j
extern:0000000000221788                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000221790 ; int fflush(FILE *stream)
extern:0000000000221790                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000221790                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000221798 ; char *nl_langinfo(nl_item item)
extern:0000000000221798                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000221798                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002217A0 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:00000000002217A0                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:00000000002217A0                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:00000000002217A8 ; int strcoll(const char *s1, const char *s2)
extern:00000000002217A8                 extrn strcoll:near      ; CODE XREF: _strcoll↑j
extern:00000000002217A8                                         ; DATA XREF: .got:strcoll_ptr↑o
extern:00000000002217B0 ; time_t mktime(struct tm *tp)
extern:00000000002217B0                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:00000000002217B0                                         ; DATA XREF: .got:mktime_ptr↑o
extern:00000000002217B8 ; int _freading(FILE *fp)
extern:00000000002217B8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002217B8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002217C0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:00000000002217C0                 extrn fwrite_unlocked:near
extern:00000000002217C0                                         ; CODE XREF: _fwrite_unlocked↑j
extern:00000000002217C0                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:00000000002217C8 ; void *realloc(void *ptr, size_t size)
extern:00000000002217C8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002217C8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002217D0 ; char *stpncpy(char *dest, const char *src, size_t n)
extern:00000000002217D0                 extrn stpncpy:near      ; CODE XREF: _stpncpy↑j
extern:00000000002217D0                                         ; DATA XREF: .got:stpncpy_ptr↑o
extern:00000000002217D8 ; char *setlocale(int category, const char *locale)
extern:00000000002217D8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002217D8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002217E0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002217E0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002217E8 ; time_t timegm(struct tm *tp)
extern:00000000002217E8                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:00000000002217E8                                         ; DATA XREF: .got:timegm_ptr↑o
extern:00000000002217F0 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:00000000002217F0                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:00000000002217F0                                         ; DATA XREF: .got:strftime_ptr↑o
extern:00000000002217F8 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:00000000002217F8                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:00000000002217F8                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:0000000000221800 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000221800                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000221800                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000221808 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000221808                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000221808                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000221810 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000221810                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000221810                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000221818 ; int unsetenv(const char *name)
extern:0000000000221818                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:0000000000221818                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:0000000000221820 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:0000000000221820                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:0000000000221820                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:0000000000221828 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000221828                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000221828                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000221830 ; size_t wcstombs(char *s, const wchar_t *pwcs, size_t n)
extern:0000000000221830                 extrn wcstombs:near     ; CODE XREF: _wcstombs↑j
extern:0000000000221830                                         ; DATA XREF: .got:wcstombs_ptr↑o
extern:0000000000221838 ; int gethostname(char *name, size_t len)
extern:0000000000221838                 extrn gethostname:near  ; CODE XREF: _gethostname↑j
extern:0000000000221838                                         ; DATA XREF: .got:gethostname_ptr↑o
extern:0000000000221840 ; int sigismember(const sigset_t *set, int signo)
extern:0000000000221840                 extrn sigismember:near  ; CODE XREF: _sigismember↑j
extern:0000000000221840                                         ; DATA XREF: .got:sigismember_ptr↑o
extern:0000000000221848 ; void __noreturn exit(int status)
extern:0000000000221848                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000221848                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000221850 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000221850                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000221850                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000221858                 extrn __fprintf_chk:near
extern:0000000000221858                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000221858                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000221860 ; int fflush_unlocked(FILE *stream)
extern:0000000000221860                 extrn fflush_unlocked:near
extern:0000000000221860                                         ; CODE XREF: _fflush_unlocked↑j
extern:0000000000221860                                         ; DATA XREF: .got:fflush_unlocked_ptr↑o
extern:0000000000221868 ; int mbsinit(const mbstate_t *ps)
extern:0000000000221868                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000221868                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000221870 ; int iswprint(wint_t wc)
extern:0000000000221870                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000221870                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000221878 ; int __fastcall __cxa_finalize(void *)
extern:0000000000221878                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000221878                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000221878                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000221880 ; int sigaddset(sigset_t *set, int signo)
extern:0000000000221880                 extrn sigaddset:near    ; CODE XREF: _sigaddset↑j
extern:0000000000221880                                         ; DATA XREF: .got:sigaddset_ptr↑o
extern:0000000000221888 ; const __int32_t **_ctype_tolower_loc(void)
extern:0000000000221888                 extrn __ctype_tolower_loc:near
extern:0000000000221888                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:0000000000221888                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:0000000000221890 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000221890                 extrn __ctype_b_loc:near
extern:0000000000221890                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000221890                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000221898                 extrn __sprintf_chk:near
extern:0000000000221898                                         ; CODE XREF: ___sprintf_chk↑j
extern:0000000000221898                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002218A0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002218A0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002218A8                 extrn __gmon_start__:near ; weak
extern:00000000002218A8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002218A8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002218B0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002218B0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002218B0
extern:00000000002218B0
extern:00000000002218B0                 end start
