LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 446CD6CE70CBC349F0D79D5469FA2EC38ACD3A6F266C48F047D5C60778B4309E
LOAD:0000000000000000 ; Input MD5    : 5A57894007F5CFF1C4C066C4F670FD0B
LOAD:0000000000000000 ; Input CRC32  : 89CBB38D
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/fold
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'fold.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 27AC0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6EA8h                ; Size in file image
LOAD:00000000000000D8                 dq 6EA8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B10h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B10h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 570h                 ; Size in file image
LOAD:0000000000000110                 dq 728h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 605Ch                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 605Ch                ; Physical address
LOAD:00000000000001B0                 dq 274h                 ; Size in file image
LOAD:00000000000001B8                 dq 274h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B10h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B10h              ; Physical address
LOAD:0000000000000220                 dq 4F0h                 ; Size in file image
LOAD:0000000000000228                 dq 4F0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0CEh, 2Fh, 40h, 76h, 0B7h, 93h, 0E1h, 0E0h, 0A8h, 0A4h ; Desc
LOAD:0000000000000284                 db 77h, 9Bh, 0BAh, 20h, 0CDh, 92h, 88h, 73h, 0F1h, 90h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8C8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_8C8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_8C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_8C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_8C8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_8C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_8C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_8C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_8C8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aOverflow - offset byte_8C8, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8C8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8C8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrtoulInterna - offset byte_8C8, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_8C8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aPosixFadvise - offset byte_8C8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aLibcStartMain - offset byte_8C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMemcmp - offset byte_8C8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFputsUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aCalloc - offset byte_8C8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGmonStart - offset byte_8C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aMemcpy - offset byte_8C8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aFileno - offset byte_8C8, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMalloc - offset byte_8C8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFflush - offset byte_8C8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aNlLanginfo - offset byte_8C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFreading - offset byte_8C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFwriteUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aRealloc - offset byte_8C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aSetlocale - offset byte_8C8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aPrintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMemmove - offset byte_8C8, 12h, 0, 0, \ ; "memmove"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFseeko - offset byte_8C8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFopen - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8C8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aStdin - offset byte_8C8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000820                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aPrognameFull - offset byte_8C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aStderr - offset byte_8C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000880                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aOptind - offset byte_8C8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000898                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptarg - offset byte_8C8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000008B0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000008C8 ; ELF String Table
LOAD:00000000000008C8 byte_8C8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008C8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:00000000000008D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000008DA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008E7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008F1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:00000000000008F9 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:00000000000008FF aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000907 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:000000000000090E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000916 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000920 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000926 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000937 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000940 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000948 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000094E aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000954 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000954                                         ; LOAD:0000000000000730↑o
LOAD:000000000000095A aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000095A                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000972 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000980 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000980                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000997 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000009A5 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000009AC aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000009B3 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000009BA aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009CB aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:00000000000009D2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009E0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000009E7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009ED aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:00000000000009F4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:00000000000009FB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000A02 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A0A aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A12 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A1E aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A2C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000A33 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000A3E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A45 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000A51 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000A58 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A5F aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A6A aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A71 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A71                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A8F aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A9E aMemmove        db 'memmove',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000AA6 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000AA6                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000AB5 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000AC5 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AC5                                         ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000AD7 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000ADE aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000AE9 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000AE9                                         ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AFC aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B0B aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B10 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000B1B aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B2B aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B38 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B42 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B4E aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C68↓o
LOAD:0000000000000B59 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C78↓o
LOAD:0000000000000B63 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C88↓o
LOAD:0000000000000B6F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B6F                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B8B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B9A aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B9A                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000BB4 ; ELF GNU Symbol Version Table
LOAD:0000000000000BB4                 dw 0
LOAD:0000000000000BB6                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000BC2                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BD4                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BDE                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BF2                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BF4                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000C06                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000C08                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000C0A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000C0C                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000C0E                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000C10                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000C12                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000C14                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000C16                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000C18                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000C1A                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000C1C                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000C1E                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000C20                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000C22                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000C24                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000C26                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000C28                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C2A                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C2C                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C2E                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C30                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000C32                 dw 0
LOAD:0000000000000C34                 dw 0
LOAD:0000000000000C36                 dw 0
LOAD:0000000000000C38 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C38                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C48                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8C8, \ ; "GLIBC_2.3"
LOAD:0000000000000C48                                10h>
LOAD:0000000000000C58                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C58                                10h>
LOAD:0000000000000C68                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8C8, \ ; "GLIBC_2.14"
LOAD:0000000000000C68                                10h>
LOAD:0000000000000C78                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8C8, \ ; "GLIBC_2.4"
LOAD:0000000000000C78                                10h>
LOAD:0000000000000C88                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C98 ; ELF RELA Relocation Table
LOAD:0000000000000C98                 Elf64_Rela <207B10h, 8, 1AE0h> ; R_X86_64_RELATIVE +1AE0h
LOAD:0000000000000CB0                 Elf64_Rela <207B18h, 8, 1AA0h> ; R_X86_64_RELATIVE +1AA0h
LOAD:0000000000000CC8                 Elf64_Rela <207B20h, 8, 534Eh> ; R_X86_64_RELATIVE +534Eh
LOAD:0000000000000CE0                 Elf64_Rela <207B40h, 8, 5354h> ; R_X86_64_RELATIVE +5354h
LOAD:0000000000000CF8                 Elf64_Rela <207B60h, 8, 535Bh> ; R_X86_64_RELATIVE +535Bh
LOAD:0000000000000D10                 Elf64_Rela <207B80h, 8, 5361h> ; R_X86_64_RELATIVE +5361h
LOAD:0000000000000D28                 Elf64_Rela <207BA0h, 8, 5366h> ; R_X86_64_RELATIVE +5366h
LOAD:0000000000000D40                 Elf64_Rela <207BE0h, 8, 56D9h> ; R_X86_64_RELATIVE +56D9h
LOAD:0000000000000D58                 Elf64_Rela <207BE8h, 8, 56E1h> ; R_X86_64_RELATIVE +56E1h
LOAD:0000000000000D70                 Elf64_Rela <207BF0h, 8, 56E7h> ; R_X86_64_RELATIVE +56E7h
LOAD:0000000000000D88                 Elf64_Rela <207BF8h, 8, 56F4h> ; R_X86_64_RELATIVE +56F4h
LOAD:0000000000000DA0                 Elf64_Rela <207C00h, 8, 5701h> ; R_X86_64_RELATIVE +5701h
LOAD:0000000000000DB8                 Elf64_Rela <207C08h, 8, 5715h> ; R_X86_64_RELATIVE +5715h
LOAD:0000000000000DD0                 Elf64_Rela <207C10h, 8, 5717h> ; R_X86_64_RELATIVE +5717h
LOAD:0000000000000DE8                 Elf64_Rela <207C18h, 8, 56FAh> ; R_X86_64_RELATIVE +56FAh
LOAD:0000000000000E00                 Elf64_Rela <207C20h, 8, 531Dh> ; R_X86_64_RELATIVE +531Dh
LOAD:0000000000000E18                 Elf64_Rela <207C28h, 8, 571Fh> ; R_X86_64_RELATIVE +571Fh
LOAD:0000000000000E30                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000E48                 Elf64_Rela <208010h, 8, 5663h> ; R_X86_64_RELATIVE +5663h
LOAD:0000000000000E60                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000E78                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000E90                 Elf64_Rela <207FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000EA8                 Elf64_Rela <207FC8h, 1A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000EC0                 Elf64_Rela <207FD0h, 1E00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000ED8                 Elf64_Rela <207FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000EF0                 Elf64_Rela <207FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000F08                 Elf64_Rela <208080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000F20                 Elf64_Rela <208088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000F38                 Elf64_Rela <208090h, 3800000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000F50                 Elf64_Rela <208098h, 3D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000F68                 Elf64_Rela <2080A0h, 3E00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000F80                 Elf64_Rela <2080A8h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F98                 Elf64_Rela <2080C0h, 3C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000FB0 ; ELF JMPREL Relocation Table
LOAD:0000000000000FB0                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000FC8                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000FE0                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000FF8                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001010                 Elf64_Rela <207E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001028                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001040                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001058                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001070                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001088                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000010A0                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000010B8                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000010D0                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000010E8                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001100                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001118                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001130                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001148                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001160                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001178                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001190                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000011A8                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000011C0                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000011D8                 Elf64_Rela <207EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000011F0                 Elf64_Rela <207F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001208                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001220                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001238                 Elf64_Rela <207F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001250                 Elf64_Rela <207F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001268                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001280                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001298                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000012B0                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000012C8                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:00000000000012E0                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000012F8                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001310                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001328                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001340                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001358                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001370                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001388                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000013A0                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000013B8                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000013D0                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000013E8                 Elf64_Rela <207FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001400                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001418                 Elf64_Rela <207FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001418 LOAD            ends
LOAD:0000000000001418
.init:0000000000001430 ; ===========================================================================
.init:0000000000001430
.init:0000000000001430 ; Segment type: Pure code
.init:0000000000001430 ; Segment permissions: Read/Execute
.init:0000000000001430 _init           segment dword public 'CODE' use64
.init:0000000000001430                 assume cs:_init
.init:0000000000001430                 ;org 1430h
.init:0000000000001430                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001430
.init:0000000000001430 ; =============== S U B R O U T I N E =======================================
.init:0000000000001430
.init:0000000000001430
.init:0000000000001430                 public _init_proc
.init:0000000000001430 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001430                 sub     rsp, 8          ; _init
.init:0000000000001434                 mov     rax, cs:__gmon_start___ptr
.init:000000000000143B                 test    rax, rax
.init:000000000000143E                 jz      short loc_1442
.init:0000000000001440                 call    rax ; __gmon_start__
.init:0000000000001442
.init:0000000000001442 loc_1442:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001442                 add     rsp, 8
.init:0000000000001446                 retn
.init:0000000000001446 _init_proc      endp
.init:0000000000001446
.init:0000000000001446 _init           ends
.init:0000000000001446
LOAD:0000000000001447 ; ===========================================================================
LOAD:0000000000001447
LOAD:0000000000001447 ; Segment type: Pure code
LOAD:0000000000001447 ; Segment permissions: Read/Execute
LOAD:0000000000001447 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001447                 assume cs:LOAD
LOAD:0000000000001447                 ;org 1447h
LOAD:0000000000001447                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001447                 align 10h
LOAD:0000000000001447 LOAD            ends
LOAD:0000000000001447
.plt:0000000000001450 ; ===========================================================================
.plt:0000000000001450
.plt:0000000000001450 ; Segment type: Pure code
.plt:0000000000001450 ; Segment permissions: Read/Execute
.plt:0000000000001450 _plt            segment para public 'CODE' use64
.plt:0000000000001450                 assume cs:_plt
.plt:0000000000001450                 ;org 1450h
.plt:0000000000001450                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450
.plt:0000000000001450 sub_1450        proc near               ; CODE XREF: .plt:000000000000146B↓j
.plt:0000000000001450                                         ; .plt:000000000000147B↓j ...
.plt:0000000000001450 ; __unwind {
.plt:0000000000001450                 push    cs:qword_207E30
.plt:0000000000001456                 jmp     cs:qword_207E38
.plt:0000000000001456 sub_1450        endp
.plt:0000000000001456
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:000000000000145C                 align 20h
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; int __uflow(_IO_FILE *)
.plt:0000000000001460 ___uflow        proc near               ; CODE XREF: fold_file+1DC↓p
.plt:0000000000001460                 jmp     cs:__uflow_ptr
.plt:0000000000001460 ___uflow        endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    0
.plt:000000000000146B                 jmp     sub_1450
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; void free(void *ptr)
.plt:0000000000001470 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001470                                         ; quotearg_free+37↓p ...
.plt:0000000000001470                 jmp     cs:free_ptr
.plt:0000000000001470 _free           endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    1
.plt:000000000000147B                 jmp     sub_1450
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: noreturn thunk
.plt:0000000000001480
.plt:0000000000001480 ; void __noreturn abort(void)
.plt:0000000000001480 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001480                                         ; quotearg_buffer_restyled:def_25E1↓p ...
.plt:0000000000001480                 jmp     cs:abort_ptr
.plt:0000000000001480 _abort          endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    2
.plt:000000000000148B                 jmp     sub_1450
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int *__errno_location(void)
.plt:0000000000001490 ___errno_location proc near             ; CODE XREF: main+222↓p
.plt:0000000000001490                                         ; fold_file+44↓p ...
.plt:0000000000001490                 jmp     cs:__errno_location_ptr
.plt:0000000000001490 ___errno_location endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    3
.plt:000000000000149B                 jmp     sub_1450
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000014A0 _strncmp        proc near               ; CODE XREF: usage+274↓p
.plt:00000000000014A0                                         ; usage+335↓p
.plt:00000000000014A0                 jmp     cs:strncmp_ptr
.plt:00000000000014A0 _strncmp        endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    4
.plt:00000000000014AB                 jmp     sub_1450
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: noreturn thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void __noreturn _exit(int status)
.plt:00000000000014B0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000014B0                 jmp     cs:_exit_ptr
.plt:00000000000014B0 __exit          endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    5
.plt:00000000000014BB                 jmp     sub_1450
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; size_t __fpending(FILE *fp)
.plt:00000000000014C0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000014C0                 jmp     cs:__fpending_ptr
.plt:00000000000014C0 ___fpending     endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    6
.plt:00000000000014CB                 jmp     sub_1450
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; char *textdomain(const char *domainname)
.plt:00000000000014D0 _textdomain     proc near               ; CODE XREF: main+5D↓p
.plt:00000000000014D0                 jmp     cs:textdomain_ptr
.plt:00000000000014D0 _textdomain     endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    7
.plt:00000000000014DB                 jmp     sub_1450
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int fclose(FILE *stream)
.plt:00000000000014E0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000014E0                                         ; rpl_fclose+6B↓j
.plt:00000000000014E0                 jmp     cs:fclose_ptr
.plt:00000000000014E0 _fclose         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    8
.plt:00000000000014EB                 jmp     sub_1450
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000014F0 _bindtextdomain proc near               ; CODE XREF: main+51↓p
.plt:00000000000014F0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000014F0 _bindtextdomain endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    9
.plt:00000000000014FB                 jmp     sub_1450
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001500 _dcgettext      proc near               ; CODE XREF: main+14D↓p
.plt:0000000000001500                                         ; usage+38↓p ...
.plt:0000000000001500                 jmp     cs:dcgettext_ptr
.plt:0000000000001500 _dcgettext      endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    0Ah
.plt:000000000000150B                 jmp     sub_1450
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001510 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001510                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001510 ___ctype_get_mb_cur_max endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    0Bh
.plt:000000000000151B                 jmp     sub_1450
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; size_t strlen(const char *s)
.plt:0000000000001520 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001520                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001520                 jmp     cs:strlen_ptr
.plt:0000000000001520 _strlen         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    0Ch
.plt:000000000000152B                 jmp     sub_1450
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: noreturn thunk
.plt:0000000000001530
.plt:0000000000001530 ___stack_chk_fail proc near             ; CODE XREF: main:loc_19D8↓p
.plt:0000000000001530                                         ; quotearg_buffer_restyled:loc_3743↓p ...
.plt:0000000000001530                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001530 ___stack_chk_fail endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    0Dh
.plt:000000000000153B                 jmp     sub_1450
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001540 _getopt_long    proc near               ; CODE XREF: main+99↓p
.plt:0000000000001540                 jmp     cs:getopt_long_ptr
.plt:0000000000001540 _getopt_long    endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    0Eh
.plt:000000000000154B                 jmp     sub_1450
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001550 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001550                 jmp     cs:mbrtowc_ptr
.plt:0000000000001550 _mbrtowc        endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    0Fh
.plt:000000000000155B                 jmp     sub_1450
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; char *strchr(const char *s, int c)
.plt:0000000000001560 _strchr         proc near               ; CODE XREF: xstrtoumax+123↓p
.plt:0000000000001560                                         ; xstrtoumax+143↓p ...
.plt:0000000000001560                 jmp     cs:strchr_ptr
.plt:0000000000001560 _strchr         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    10h
.plt:000000000000156B                 jmp     sub_1450
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001570 ___overflow     proc near               ; CODE XREF: fold_file+3A3↓p
.plt:0000000000001570                 jmp     cs:__overflow_ptr
.plt:0000000000001570 ___overflow     endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    11h
.plt:000000000000157B                 jmp     sub_1450
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; char *strrchr(const char *s, int c)
.plt:0000000000001580 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001580                 jmp     cs:strrchr_ptr
.plt:0000000000001580 _strrchr        endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    12h
.plt:000000000000158B                 jmp     sub_1450
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001590 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001590                                         ; rpl_fseeko+3B↓p
.plt:0000000000001590                 jmp     cs:lseek_ptr
.plt:0000000000001590 _lseek          endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    13h
.plt:000000000000159B                 jmp     sub_1450
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000015A0 ___assert_fail  proc near               ; CODE XREF: xstrtoumax+39F↓p
.plt:00000000000015A0                 jmp     cs:__assert_fail_ptr
.plt:00000000000015A0 ___assert_fail  endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    14h
.plt:00000000000015AB                 jmp     sub_1450
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:00000000000015B0 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:00000000000015B0                 jmp     cs:__strtoul_internal_ptr
.plt:00000000000015B0 ___strtoul_internal endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    15h
.plt:00000000000015BB                 jmp     sub_1450
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000015C0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000015C0                                         ; xzalloc+12↓j
.plt:00000000000015C0                 jmp     cs:memset_ptr
.plt:00000000000015C0 _memset         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    16h
.plt:00000000000015CB                 jmp     sub_1450
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:00000000000015D0 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:00000000000015D0                                         ; fadvise+16↓j
.plt:00000000000015D0                 jmp     cs:posix_fadvise_ptr
.plt:00000000000015D0 _posix_fadvise  endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    17h
.plt:00000000000015DB                 jmp     sub_1450
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000015E0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000015E0                 jmp     cs:memcmp_ptr
.plt:00000000000015E0 _memcmp         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    18h
.plt:00000000000015EB                 jmp     sub_1450
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000015F0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000015F0                                         ; usage+C2↓p ...
.plt:00000000000015F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000015F0 _fputs_unlocked endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    19h
.plt:00000000000015FB                 jmp     sub_1450
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001600 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001600                 jmp     cs:calloc_ptr
.plt:0000000000001600 _calloc         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    1Ah
.plt:000000000000160B                 jmp     sub_1450
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001610 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001610                 jmp     cs:memcpy_ptr
.plt:0000000000001610 _memcpy         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    1Bh
.plt:000000000000161B                 jmp     sub_1450
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; int fileno(FILE *stream)
.plt:0000000000001620 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001620                                         ; rpl_fclose+7↓p ...
.plt:0000000000001620                 jmp     cs:fileno_ptr
.plt:0000000000001620 _fileno         endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    1Ch
.plt:000000000000162B                 jmp     sub_1450
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void *malloc(size_t size)
.plt:0000000000001630 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001630                 jmp     cs:malloc_ptr
.plt:0000000000001630 _malloc         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    1Dh
.plt:000000000000163B                 jmp     sub_1450
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fflush(FILE *stream)
.plt:0000000000001640 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001640                                         ; rpl_fflush+3B↓j
.plt:0000000000001640                 jmp     cs:fflush_ptr
.plt:0000000000001640 _fflush         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    1Eh
.plt:000000000000164B                 jmp     sub_1450
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; char *nl_langinfo(nl_item item)
.plt:0000000000001650 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001650                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001650 _nl_langinfo    endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    1Fh
.plt:000000000000165B                 jmp     sub_1450
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int __freading(FILE *fp)
.plt:0000000000001660 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001660                                         ; rpl_fflush+9↓p
.plt:0000000000001660                 jmp     cs:__freading_ptr
.plt:0000000000001660 ___freading     endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    20h ; ' '
.plt:000000000000166B                 jmp     sub_1450
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001670 _fwrite_unlocked proc near              ; CODE XREF: fold_file+F5↓p
.plt:0000000000001670                                         ; fold_file+14A↓p ...
.plt:0000000000001670                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001670 _fwrite_unlocked endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    21h ; '!'
.plt:000000000000167B                 jmp     sub_1450
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001680 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001680                 jmp     cs:realloc_ptr
.plt:0000000000001680 _realloc        endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    22h ; '"'
.plt:000000000000168B                 jmp     sub_1450
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; char *setlocale(int category, const char *locale)
.plt:0000000000001690 _setlocale      proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001690                                         ; usage+25B↓p ...
.plt:0000000000001690                 jmp     cs:setlocale_ptr
.plt:0000000000001690 _setlocale      endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    23h ; '#'
.plt:000000000000169B                 jmp     sub_1450
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:00000000000016A0                                         ; usage+24F↓p ...
.plt:00000000000016A0                 jmp     cs:__printf_chk_ptr
.plt:00000000000016A0 ___printf_chk   endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    24h ; '$'
.plt:00000000000016AB                 jmp     sub_1450
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:00000000000016B0 _memmove        proc near               ; CODE XREF: fold_file+184↓p
.plt:00000000000016B0                 jmp     cs:memmove_ptr
.plt:00000000000016B0 _memmove        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    25h ; '%'
.plt:00000000000016BB                 jmp     sub_1450
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000016C0 _error          proc near               ; CODE XREF: main+237↓p
.plt:00000000000016C0                                         ; fold_file+30F↓p ...
.plt:00000000000016C0                 jmp     cs:error_ptr
.plt:00000000000016C0 _error          endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    26h ; '&'
.plt:00000000000016CB                 jmp     sub_1450
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000016D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4FBA↓j
.plt:00000000000016D0                 jmp     cs:fseeko_ptr
.plt:00000000000016D0 _fseeko         endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    27h ; '''
.plt:00000000000016DB                 jmp     sub_1450
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000016E0 _fopen          proc near               ; CODE XREF: fold_file+2CC↓p
.plt:00000000000016E0                 jmp     cs:fopen_ptr
.plt:00000000000016E0 _fopen          endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    28h ; '('
.plt:00000000000016EB                 jmp     sub_1450
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: thunk
.plt:00000000000016F0
.plt:00000000000016F0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000016F0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000016F0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000016F0 ___cxa_atexit   endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    29h ; ')'
.plt:00000000000016FB                 jmp     sub_1450
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: noreturn thunk
.plt:0000000000001700
.plt:0000000000001700 ; void __noreturn exit(int status)
.plt:0000000000001700 _exit           proc near               ; CODE XREF: main+11F↓p
.plt:0000000000001700                                         ; usage+58↓p
.plt:0000000000001700                 jmp     cs:exit_ptr
.plt:0000000000001700 _exit           endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    2Ah ; '*'
.plt:000000000000170B                 jmp     sub_1450
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001710 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001710                 jmp     cs:fwrite_ptr
.plt:0000000000001710 _fwrite         endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    2Bh ; '+'
.plt:000000000000171B                 jmp     sub_1450
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001720                                         ; version_etc_arn+37↓p ...
.plt:0000000000001720                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001720 ___fprintf_chk  endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    2Ch ; ','
.plt:000000000000172B                 jmp     sub_1450
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001730 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001730                 jmp     cs:mbsinit_ptr
.plt:0000000000001730 _mbsinit        endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    2Dh ; '-'
.plt:000000000000173B                 jmp     sub_1450
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; int iswprint(wint_t wc)
.plt:0000000000001740 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001740                 jmp     cs:iswprint_ptr
.plt:0000000000001740 _iswprint       endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    2Eh ; '.'
.plt:000000000000174B                 jmp     sub_1450
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001750 ___ctype_b_loc  proc near               ; CODE XREF: fold_file+111↓p
.plt:0000000000001750                                         ; quotearg_buffer_restyled+513↓p ...
.plt:0000000000001750                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001750 ___ctype_b_loc  endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    2Fh ; '/'
.plt:000000000000175B                 jmp     sub_1450
.plt:000000000000175B ; } // starts at 1450
.plt:000000000000175B _plt            ends
.plt:000000000000175B
.plt.got:0000000000001760 ; ===========================================================================
.plt.got:0000000000001760
.plt.got:0000000000001760 ; Segment type: Pure code
.plt.got:0000000000001760 ; Segment permissions: Read/Execute
.plt.got:0000000000001760 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001760                 assume cs:_plt_got
.plt.got:0000000000001760                 ;org 1760h
.plt.got:0000000000001760                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001760
.plt.got:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001760
.plt.got:0000000000001760 ; Attributes: thunk
.plt.got:0000000000001760
.plt.got:0000000000001760 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001760 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001760 ; __unwind {
.plt.got:0000000000001760                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001760 __cxa_finalize  endp
.plt.got:0000000000001760
.plt.got:0000000000001760 ; ---------------------------------------------------------------------------
.plt.got:0000000000001766                 align 8
.plt.got:0000000000001766 ; } // starts at 1760
.plt.got:0000000000001766 _plt_got        ends
.plt.got:0000000000001766
LOAD:0000000000001768 ; ===========================================================================
LOAD:0000000000001768
LOAD:0000000000001768 ; Segment type: Pure code
LOAD:0000000000001768 ; Segment permissions: Read/Execute
LOAD:0000000000001768 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001768                 assume cs:LOAD
LOAD:0000000000001768                 ;org 1768h
LOAD:0000000000001768                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001768                 align 10h
LOAD:0000000000001768 LOAD            ends
LOAD:0000000000001768
.text:0000000000001770 ; ===========================================================================
.text:0000000000001770
.text:0000000000001770 ; Segment type: Pure code
.text:0000000000001770 ; Segment permissions: Read/Execute
.text:0000000000001770 _text           segment para public 'CODE' use64
.text:0000000000001770                 assume cs:_text
.text:0000000000001770                 ;org 1770h
.text:0000000000001770                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001770
.text:0000000000001770 ; =============== S U B R O U T I N E =======================================
.text:0000000000001770
.text:0000000000001770
.text:0000000000001770 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001770                 public main
.text:0000000000001770 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001770
.text:0000000000001770 var_32          = byte ptr -32h
.text:0000000000001770 var_31          = byte ptr -31h
.text:0000000000001770 var_30          = qword ptr -30h
.text:0000000000001770
.text:0000000000001770 ; __unwind {
.text:0000000000001770                 push    r13
.text:0000000000001772                 push    r12
.text:0000000000001774                 mov     r12d, 50h ; 'P'
.text:000000000000177A                 push    rbp
.text:000000000000177B                 push    rbx
.text:000000000000177C                 mov     ebp, edi
.text:000000000000177E                 mov     rbx, rsi
.text:0000000000001781                 sub     rsp, 18h
.text:0000000000001785                 mov     rdi, [rsi]
.text:0000000000001788                 mov     rax, fs:28h
.text:0000000000001791                 mov     [rsp+38h+var_30], rax
.text:0000000000001796                 xor     eax, eax
.text:0000000000001798                 lea     r13, [rsp+38h+var_32]
.text:000000000000179D                 call    set_program_name
.text:00000000000017A2                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000017A9                 mov     edi, 6          ; category
.text:00000000000017AE                 call    _setlocale
.text:00000000000017B3                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000017BA                 lea     rdi, domainname ; "coreutils"
.text:00000000000017C1                 call    _bindtextdomain
.text:00000000000017C6                 lea     rdi, domainname ; "coreutils"
.text:00000000000017CD                 call    _textdomain
.text:00000000000017D2                 lea     rdi, close_stdout
.text:00000000000017D9                 call    atexit
.text:00000000000017DE                 mov     cs:have_read_stdin, 0
.text:00000000000017E5                 mov     cs:count_bytes, 0
.text:00000000000017EC                 mov     cs:break_spaces, 0
.text:00000000000017F3
.text:00000000000017F3 loc_17F3:                               ; CODE XREF: main+D7↓j
.text:00000000000017F3                                         ; main+17A↓j ...
.text:00000000000017F3                 lea     rcx, longopts   ; longopts
.text:00000000000017FA                 lea     rdx, shortopts  ; "bsw:0::1::2::3::4::5::6::7::8::9::"
.text:0000000000001801                 xor     r8d, r8d        ; longind
.text:0000000000001804                 mov     rsi, rbx        ; argv
.text:0000000000001807                 mov     edi, ebp        ; argc
.text:0000000000001809                 call    _getopt_long
.text:000000000000180E                 cmp     eax, 0FFFFFFFFh
.text:0000000000001811                 jz      loc_190E
.text:0000000000001817                 cmp     eax, 39h ; '9'
.text:000000000000181A                 jle     short loc_1850
.text:000000000000181C                 cmp     eax, 73h ; 's'
.text:000000000000181F                 jz      loc_18F0
.text:0000000000001825                 cmp     eax, 77h ; 'w'
.text:0000000000001828                 jz      loc_18AF
.text:000000000000182E                 cmp     eax, 62h ; 'b'
.text:0000000000001831                 jz      short loc_1840
.text:0000000000001833
.text:0000000000001833 loc_1833:                               ; CODE XREF: main+25B↓j
.text:0000000000001833                 mov     edi, 1          ; status
.text:0000000000001838                 call    usage
.text:0000000000001838 ; ---------------------------------------------------------------------------
.text:000000000000183D                 align 20h
.text:0000000000001840
.text:0000000000001840 loc_1840:                               ; CODE XREF: main+C1↑j
.text:0000000000001840                 mov     cs:count_bytes, 1
.text:0000000000001847                 jmp     short loc_17F3
.text:0000000000001847 ; ---------------------------------------------------------------------------
.text:0000000000001849                 align 10h
.text:0000000000001850
.text:0000000000001850 loc_1850:                               ; CODE XREF: main+AA↑j
.text:0000000000001850                 cmp     eax, 30h ; '0'
.text:0000000000001853                 jge     short loc_1898
.text:0000000000001855                 cmp     eax, 0FFFFFF7Dh
.text:000000000000185A                 jnz     loc_19C6
.text:0000000000001860                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001867                 mov     rcx, cs:Version
.text:000000000000186E                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001875                 lea     rdx, unk_52DF
.text:000000000000187C                 lea     rsi, aFold      ; "fold"
.text:0000000000001883                 xor     r9d, r9d
.text:0000000000001886                 xor     eax, eax
.text:0000000000001888                 call    version_etc
.text:000000000000188D                 xor     edi, edi        ; status
.text:000000000000188F                 call    _exit
.text:000000000000188F ; ---------------------------------------------------------------------------
.text:0000000000001894                 align 8
.text:0000000000001898
.text:0000000000001898 loc_1898:                               ; CODE XREF: main+E3↑j
.text:0000000000001898                 mov     rdx, cs:optarg@@GLIBC_2_2_5
.text:000000000000189F                 test    rdx, rdx
.text:00000000000018A2                 jz      short loc_18FC
.text:00000000000018A4                 sub     rdx, 1
.text:00000000000018A8                 mov     cs:optarg@@GLIBC_2_2_5, rdx
.text:00000000000018AF
.text:00000000000018AF loc_18AF:                               ; CODE XREF: main+B8↑j
.text:00000000000018AF                                         ; main+19C↓j
.text:00000000000018AF                 lea     rsi, msgid      ; "invalid number of columns"
.text:00000000000018B6                 mov     edx, 5          ; category
.text:00000000000018BB                 xor     edi, edi        ; domainname
.text:00000000000018BD                 call    _dcgettext
.text:00000000000018C2                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000018C9                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000018D0                 mov     r8, rax
.text:00000000000018D3                 xor     r9d, r9d
.text:00000000000018D6                 mov     rdx, 0FFFFFFFFFFFFFFF6h
.text:00000000000018DD                 mov     esi, 1
.text:00000000000018E2                 call    xdectoumax
.text:00000000000018E7                 mov     r12, rax
.text:00000000000018EA                 jmp     loc_17F3
.text:00000000000018EA ; ---------------------------------------------------------------------------
.text:00000000000018EF                 align 10h
.text:00000000000018F0
.text:00000000000018F0 loc_18F0:                               ; CODE XREF: main+AF↑j
.text:00000000000018F0                 mov     cs:break_spaces, 1
.text:00000000000018F7                 jmp     loc_17F3
.text:00000000000018FC ; ---------------------------------------------------------------------------
.text:00000000000018FC
.text:00000000000018FC loc_18FC:                               ; CODE XREF: main+132↑j
.text:00000000000018FC                 mov     [rsp+38h+var_32], al
.text:0000000000001900                 mov     [rsp+38h+var_31], 0
.text:0000000000001905                 mov     cs:optarg@@GLIBC_2_2_5, r13
.text:000000000000190C                 jmp     short loc_18AF
.text:000000000000190E ; ---------------------------------------------------------------------------
.text:000000000000190E
.text:000000000000190E loc_190E:                               ; CODE XREF: main+A1↑j
.text:000000000000190E                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001914                 cmp     eax, ebp
.text:0000000000001916                 jz      loc_19AC
.text:000000000000191C                 jge     loc_19BF
.text:0000000000001922                 movsxd  rdx, eax
.text:0000000000001925                 not     eax
.text:0000000000001927                 add     eax, ebp
.text:0000000000001929                 lea     r13, [rbx+rdx*8]
.text:000000000000192D                 add     rax, rdx
.text:0000000000001930                 lea     rbp, [rbx+rax*8+8]
.text:0000000000001935                 mov     ebx, 1
.text:000000000000193A                 nop     word ptr [rax+rax+00h]
.text:0000000000001940
.text:0000000000001940 loc_1940:                               ; CODE XREF: main+1E5↓j
.text:0000000000001940                 mov     rdi, [r13+0]
.text:0000000000001944                 mov     rsi, r12
.text:0000000000001947                 add     r13, 8
.text:000000000000194B                 call    fold_file
.text:0000000000001950                 and     ebx, eax
.text:0000000000001952                 cmp     r13, rbp
.text:0000000000001955                 jnz     short loc_1940
.text:0000000000001957
.text:0000000000001957 loc_1957:                               ; CODE XREF: main+24D↓j
.text:0000000000001957                                         ; main+254↓j
.text:0000000000001957                 cmp     cs:have_read_stdin, 0
.text:000000000000195E                 jnz     short loc_1981
.text:0000000000001960
.text:0000000000001960 loc_1960:                               ; CODE XREF: main+220↓j
.text:0000000000001960                 xor     ebx, 1
.text:0000000000001963                 mov     rcx, [rsp+38h+var_30]
.text:0000000000001968                 xor     rcx, fs:28h
.text:0000000000001971                 movzx   eax, bl
.text:0000000000001974                 jnz     short loc_19D8
.text:0000000000001976                 add     rsp, 18h
.text:000000000000197A                 pop     rbx
.text:000000000000197B                 pop     rbp
.text:000000000000197C                 pop     r12
.text:000000000000197E                 pop     r13
.text:0000000000001980                 retn
.text:0000000000001981 ; ---------------------------------------------------------------------------
.text:0000000000001981
.text:0000000000001981 loc_1981:                               ; CODE XREF: main+1EE↑j
.text:0000000000001981                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001988                 call    rpl_fclose
.text:000000000000198D                 add     eax, 1
.text:0000000000001990                 jnz     short loc_1960
.text:0000000000001992                 call    ___errno_location
.text:0000000000001997                 mov     esi, [rax]      ; errnum
.text:0000000000001999                 lea     rdx, aLt+2      ; format
.text:00000000000019A0                 mov     edi, 1          ; status
.text:00000000000019A5                 xor     eax, eax
.text:00000000000019A7                 call    _error
.text:00000000000019AC
.text:00000000000019AC loc_19AC:                               ; CODE XREF: main+1A6↑j
.text:00000000000019AC                 lea     rdi, aLt+2      ; "-"
.text:00000000000019B3                 mov     rsi, r12
.text:00000000000019B6                 call    fold_file
.text:00000000000019BB                 mov     ebx, eax
.text:00000000000019BD                 jmp     short loc_1957
.text:00000000000019BF ; ---------------------------------------------------------------------------
.text:00000000000019BF
.text:00000000000019BF loc_19BF:                               ; CODE XREF: main+1AC↑j
.text:00000000000019BF                 mov     ebx, 1
.text:00000000000019C4                 jmp     short loc_1957
.text:00000000000019C6 ; ---------------------------------------------------------------------------
.text:00000000000019C6
.text:00000000000019C6 loc_19C6:                               ; CODE XREF: main+EA↑j
.text:00000000000019C6                 cmp     eax, 0FFFFFF7Eh
.text:00000000000019CB                 jnz     loc_1833
.text:00000000000019D1                 xor     edi, edi        ; status
.text:00000000000019D3                 call    usage
.text:00000000000019D8 ; ---------------------------------------------------------------------------
.text:00000000000019D8
.text:00000000000019D8 loc_19D8:                               ; CODE XREF: main+204↑j
.text:00000000000019D8                 call    ___stack_chk_fail
.text:00000000000019D8 ; } // starts at 1770
.text:00000000000019D8 main            endp
.text:00000000000019D8
.text:00000000000019D8 ; ---------------------------------------------------------------------------
.text:00000000000019DD                 align 20h
.text:00000000000019E0
.text:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019E0
.text:00000000000019E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000019E0
.text:00000000000019E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000019E0                 public start
.text:00000000000019E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000019E0 ; __unwind {
.text:00000000000019E0                 xor     ebp, ebp
.text:00000000000019E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000019E5                 pop     rsi             ; argc
.text:00000000000019E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000019E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000019ED                 push    rax
.text:00000000000019EE                 push    rsp             ; stack_end
.text:00000000000019EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019FD                 lea     rdi, main       ; main
.text:0000000000001A04                 call    cs:__libc_start_main_ptr
.text:0000000000001A0A                 hlt
.text:0000000000001A0A ; } // starts at 19E0
.text:0000000000001A0A start           endp
.text:0000000000001A0A
.text:0000000000001A0A ; ---------------------------------------------------------------------------
.text:0000000000001A0B                 align 10h
.text:0000000000001A10
.text:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A10
.text:0000000000001A10 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A10
.text:0000000000001A10 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1AC3↓p
.text:0000000000001A10                 lea     rdi, __bss_start
.text:0000000000001A17                 push    rbp
.text:0000000000001A18                 lea     rax, __bss_start
.text:0000000000001A1F                 cmp     rax, rdi
.text:0000000000001A22                 mov     rbp, rsp
.text:0000000000001A25                 jz      short loc_1A40
.text:0000000000001A27                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001A2E                 test    rax, rax
.text:0000000000001A31                 jz      short loc_1A40
.text:0000000000001A33                 pop     rbp
.text:0000000000001A34                 jmp     rax
.text:0000000000001A34 ; ---------------------------------------------------------------------------
.text:0000000000001A36                 align 20h
.text:0000000000001A40
.text:0000000000001A40 loc_1A40:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A40                                         ; deregister_tm_clones+21↑j
.text:0000000000001A40                 pop     rbp
.text:0000000000001A41                 retn
.text:0000000000001A41 deregister_tm_clones endp
.text:0000000000001A41
.text:0000000000001A41 ; ---------------------------------------------------------------------------
.text:0000000000001A42                 align 10h
.text:0000000000001A50
.text:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A50
.text:0000000000001A50 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A50
.text:0000000000001A50 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A50                 lea     rdi, __bss_start
.text:0000000000001A57                 lea     rsi, __bss_start
.text:0000000000001A5E                 push    rbp
.text:0000000000001A5F                 sub     rsi, rdi
.text:0000000000001A62                 mov     rbp, rsp
.text:0000000000001A65                 sar     rsi, 3
.text:0000000000001A69                 mov     rax, rsi
.text:0000000000001A6C                 shr     rax, 3Fh
.text:0000000000001A70                 add     rsi, rax
.text:0000000000001A73                 sar     rsi, 1
.text:0000000000001A76                 jz      short loc_1A90
.text:0000000000001A78                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A7F                 test    rax, rax
.text:0000000000001A82                 jz      short loc_1A90
.text:0000000000001A84                 pop     rbp
.text:0000000000001A85                 jmp     rax
.text:0000000000001A85 ; ---------------------------------------------------------------------------
.text:0000000000001A87                 align 10h
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A90                                         ; register_tm_clones+32↑j
.text:0000000000001A90                 pop     rbp
.text:0000000000001A91                 retn
.text:0000000000001A91 register_tm_clones endp
.text:0000000000001A91
.text:0000000000001A91 ; ---------------------------------------------------------------------------
.text:0000000000001A92                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0 ; Attributes: info_from_lumina
.text:0000000000001AA0
.text:0000000000001AA0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001AA0                 cmp     cs:completed_7697, 0
.text:0000000000001AA7                 jnz     short locret_1AD8
.text:0000000000001AA9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001AB1                 push    rbp
.text:0000000000001AB2                 mov     rbp, rsp
.text:0000000000001AB5                 jz      short loc_1AC3
.text:0000000000001AB7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001ABE                 call    __cxa_finalize
.text:0000000000001AC3
.text:0000000000001AC3 loc_1AC3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001AC3                 call    deregister_tm_clones
.text:0000000000001AC8                 mov     cs:completed_7697, 1
.text:0000000000001ACF                 pop     rbp
.text:0000000000001AD0                 retn
.text:0000000000001AD0 ; ---------------------------------------------------------------------------
.text:0000000000001AD1                 align 8
.text:0000000000001AD8
.text:0000000000001AD8 locret_1AD8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001AD8                 rep retn
.text:0000000000001AD8 __do_global_dtors_aux endp
.text:0000000000001AD8
.text:0000000000001AD8 ; ---------------------------------------------------------------------------
.text:0000000000001ADA                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AE0
.text:0000000000001AE0 ; Attributes: bp-based frame
.text:0000000000001AE0
.text:0000000000001AE0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001AE0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001AE0                 push    rbp
.text:0000000000001AE1                 mov     rbp, rsp
.text:0000000000001AE4                 pop     rbp
.text:0000000000001AE5                 jmp     register_tm_clones
.text:0000000000001AE5 frame_dummy     endp
.text:0000000000001AE5
.text:0000000000001AE5 ; ---------------------------------------------------------------------------
.text:0000000000001AEA                 align 10h
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0
.text:0000000000001AF0 adjust_column   proc near               ; CODE XREF: fold_file+B2↓p
.text:0000000000001AF0                                         ; fold_file+1A7↓p
.text:0000000000001AF0 ; __unwind {
.text:0000000000001AF0                 cmp     cs:count_bytes, 0
.text:0000000000001AF7                 jnz     short loc_1B0D
.text:0000000000001AF9                 cmp     sil, 8
.text:0000000000001AFD                 jz      short loc_1B18
.text:0000000000001AFF                 xor     eax, eax
.text:0000000000001B01                 cmp     sil, 0Dh
.text:0000000000001B05                 jz      short locret_1B11
.text:0000000000001B07                 cmp     sil, 9
.text:0000000000001B0B                 jz      short loc_1B30
.text:0000000000001B0D
.text:0000000000001B0D loc_1B0D:                               ; CODE XREF: adjust_column+7↑j
.text:0000000000001B0D                 lea     rax, [rdi+1]
.text:0000000000001B11
.text:0000000000001B11 locret_1B11:                            ; CODE XREF: adjust_column+15↑j
.text:0000000000001B11                 rep retn
.text:0000000000001B11 ; ---------------------------------------------------------------------------
.text:0000000000001B13                 align 8
.text:0000000000001B18
.text:0000000000001B18 loc_1B18:                               ; CODE XREF: adjust_column+D↑j
.text:0000000000001B18                 lea     rdx, [rdi-1]
.text:0000000000001B1C                 test    rdi, rdi
.text:0000000000001B1F                 mov     eax, 0
.text:0000000000001B24                 cmovnz  rax, rdx
.text:0000000000001B28                 retn
.text:0000000000001B28 ; ---------------------------------------------------------------------------
.text:0000000000001B29                 align 10h
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: adjust_column+1B↑j
.text:0000000000001B30                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000001B34                 lea     rax, [rdi+8]
.text:0000000000001B38                 retn
.text:0000000000001B38 ; } // starts at 1AF0
.text:0000000000001B38 adjust_column   endp
.text:0000000000001B38
.text:0000000000001B38 ; ---------------------------------------------------------------------------
.text:0000000000001B39                 align 20h
.text:0000000000001B40
.text:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B40
.text:0000000000001B40
.text:0000000000001B40 fold_file       proc near               ; CODE XREF: main+1DB↑p
.text:0000000000001B40                                         ; main+246↑p
.text:0000000000001B40
.text:0000000000001B40 var_50          = qword ptr -50h
.text:0000000000001B40 filename        = qword ptr -48h
.text:0000000000001B40 var_40          = qword ptr -40h
.text:0000000000001B40
.text:0000000000001B40 ; __unwind {
.text:0000000000001B40                 push    r15
.text:0000000000001B42                 push    r14
.text:0000000000001B44                 mov     ecx, 2
.text:0000000000001B49                 push    r13
.text:0000000000001B4B                 push    r12
.text:0000000000001B4D                 push    rbp
.text:0000000000001B4E                 push    rbx
.text:0000000000001B4F                 sub     rsp, 28h
.text:0000000000001B53                 mov     [rsp+58h+filename], rdi
.text:0000000000001B58                 mov     [rsp+58h+var_50], rsi
.text:0000000000001B5D                 mov     rsi, rdi
.text:0000000000001B60                 lea     rdi, aLt+2      ; "-"
.text:0000000000001B67                 repe cmpsb
.text:0000000000001B69                 setnbe  al
.text:0000000000001B6C                 sbb     al, 0
.text:0000000000001B6E                 test    al, al
.text:0000000000001B70                 jnz     loc_1E00
.text:0000000000001B76                 mov     r12, cs:stdin@@GLIBC_2_2_5
.text:0000000000001B7D                 mov     cs:have_read_stdin, 1
.text:0000000000001B84                 call    ___errno_location
.text:0000000000001B89                 mov     [rsp+58h+var_40], rax
.text:0000000000001B8E                 test    r12, r12
.text:0000000000001B91                 jz      loc_1E27
.text:0000000000001B97
.text:0000000000001B97 loc_1B97:                               ; CODE XREF: fold_file+2E1↓j
.text:0000000000001B97                 mov     esi, 2
.text:0000000000001B9C                 mov     rdi, r12
.text:0000000000001B9F                 xor     ebx, ebx
.text:0000000000001BA1                 xor     r15d, r15d
.text:0000000000001BA4                 call    fadvise
.text:0000000000001BA9
.text:0000000000001BA9 loc_1BA9:                               ; CODE XREF: fold_file+29C↓j
.text:0000000000001BA9                                         ; fold_file+2B1↓j
.text:0000000000001BA9                 mov     rax, [r12+8]
.text:0000000000001BAE                 cmp     rax, [r12+10h]
.text:0000000000001BB3                 jnb     loc_1D19
.text:0000000000001BB9
.text:0000000000001BB9 loc_1BB9:                               ; CODE XREF: fold_file+1D3↓j
.text:0000000000001BB9                 lea     rdx, [rax+1]
.text:0000000000001BBD                 mov     [r12+8], rdx
.text:0000000000001BC2                 movzx   ebp, byte ptr [rax]
.text:0000000000001BC5
.text:0000000000001BC5 loc_1BC5:                               ; CODE XREF: fold_file+1E6↓j
.text:0000000000001BC5                 lea     r14, [rbx+1]
.text:0000000000001BC9                 cmp     r14, cs:allocated_out_6895
.text:0000000000001BD0                 mov     r13, cs:line_out_6894
.text:0000000000001BD7                 jnb     loc_1D98
.text:0000000000001BDD                 cmp     ebp, 0Ah
.text:0000000000001BE0                 jz      loc_1DBA
.text:0000000000001BE6
.text:0000000000001BE6 loc_1BE6:                               ; CODE XREF: fold_file+274↓j
.text:0000000000001BE6                 mov     r14d, ebp
.text:0000000000001BE9                 movsx   ebp, bpl
.text:0000000000001BED
.text:0000000000001BED loc_1BED:                               ; CODE XREF: fold_file+101↓j
.text:0000000000001BED                                         ; fold_file+1B8↓j ...
.text:0000000000001BED                 mov     rdi, r15
.text:0000000000001BF0                 mov     esi, ebp
.text:0000000000001BF2                 call    adjust_column
.text:0000000000001BF7                 cmp     rax, [rsp+58h+var_50]
.text:0000000000001BFC                 mov     r15, rax
.text:0000000000001BFF                 jbe     loc_1DE8
.text:0000000000001C05                 cmp     cs:break_spaces, 0
.text:0000000000001C0C                 jnz     short loc_1C48
.text:0000000000001C0E                 test    rbx, rbx
.text:0000000000001C11                 jz      loc_1D00
.text:0000000000001C17
.text:0000000000001C17 loc_1C17:                               ; CODE XREF: fold_file+126↓j
.text:0000000000001C17                 mov     byte ptr [r13+rbx+0], 0Ah
.text:0000000000001C1D                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C24                 lea     rdx, [rbx+1]    ; n
.text:0000000000001C28                 mov     rdi, r13        ; ptr
.text:0000000000001C2B                 mov     esi, 1          ; size
.text:0000000000001C30                 xor     ebx, ebx
.text:0000000000001C32                 xor     r15d, r15d
.text:0000000000001C35                 call    _fwrite_unlocked
.text:0000000000001C3A                 mov     r13, cs:line_out_6894
.text:0000000000001C41                 jmp     short loc_1BED
.text:0000000000001C41 ; ---------------------------------------------------------------------------
.text:0000000000001C43                 align 8
.text:0000000000001C48
.text:0000000000001C48 loc_1C48:                               ; CODE XREF: fold_file+CC↑j
.text:0000000000001C48                 test    rbx, rbx
.text:0000000000001C4B                 jz      loc_1D00
.text:0000000000001C51                 call    ___ctype_b_loc
.text:0000000000001C56                 mov     r15, rbx
.text:0000000000001C59                 mov     rcx, [rax]
.text:0000000000001C5C                 jmp     short loc_1C68
.text:0000000000001C5C ; ---------------------------------------------------------------------------
.text:0000000000001C5E                 align 20h
.text:0000000000001C60
.text:0000000000001C60 loc_1C60:                               ; CODE XREF: fold_file+136↓j
.text:0000000000001C60                 test    rdx, rdx
.text:0000000000001C63                 mov     r15, rdx
.text:0000000000001C66                 jz      short loc_1C17
.text:0000000000001C68
.text:0000000000001C68 loc_1C68:                               ; CODE XREF: fold_file+11C↑j
.text:0000000000001C68                 movzx   eax, byte ptr [r13+r15-1]
.text:0000000000001C6E                 lea     rdx, [r15-1]
.text:0000000000001C72                 test    byte ptr [rcx+rax*2], 1
.text:0000000000001C76                 jz      short loc_1C60
.text:0000000000001C78                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C7F                 mov     rdi, r13        ; ptr
.text:0000000000001C82                 mov     rdx, r15        ; n
.text:0000000000001C85                 mov     esi, 1          ; size
.text:0000000000001C8A                 call    _fwrite_unlocked
.text:0000000000001C8F                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001C96                 mov     rax, [rdi+28h]
.text:0000000000001C9A                 cmp     rax, [rdi+30h]
.text:0000000000001C9E                 jnb     loc_1EDE
.text:0000000000001CA4                 lea     rdx, [rax+1]
.text:0000000000001CA8                 mov     [rdi+28h], rdx
.text:0000000000001CAC                 mov     byte ptr [rax], 0Ah
.text:0000000000001CAF
.text:0000000000001CAF loc_1CAF:                               ; CODE XREF: fold_file+3A8↓j
.text:0000000000001CAF                 mov     r13, cs:line_out_6894
.text:0000000000001CB6                 sub     rbx, r15
.text:0000000000001CB9                 mov     rdx, rbx        ; n
.text:0000000000001CBC                 lea     rsi, [r13+r15+0] ; src
.text:0000000000001CC1                 mov     rdi, r13        ; dest
.text:0000000000001CC4                 call    _memmove
.text:0000000000001CC9                 test    rbx, rbx
.text:0000000000001CCC                 jz      loc_1ED6
.text:0000000000001CD2                 lea     r10, [rbx+r13]
.text:0000000000001CD6                 mov     r8, r13
.text:0000000000001CD9                 xor     r15d, r15d
.text:0000000000001CDC                 nop     dword ptr [rax+00h]
.text:0000000000001CE0
.text:0000000000001CE0 loc_1CE0:                               ; CODE XREF: fold_file+1B6↓j
.text:0000000000001CE0                 movsx   esi, byte ptr [r8]
.text:0000000000001CE4                 mov     rdi, r15
.text:0000000000001CE7                 call    adjust_column
.text:0000000000001CEC                 add     r8, 1
.text:0000000000001CF0                 mov     r15, rax
.text:0000000000001CF3                 cmp     r10, r8
.text:0000000000001CF6                 jnz     short loc_1CE0
.text:0000000000001CF8                 jmp     loc_1BED
.text:0000000000001CF8 ; ---------------------------------------------------------------------------
.text:0000000000001CFD                 align 20h
.text:0000000000001D00
.text:0000000000001D00 loc_1D00:                               ; CODE XREF: fold_file+D1↑j
.text:0000000000001D00                                         ; fold_file+10B↑j
.text:0000000000001D00                 mov     [r13+0], r14b
.text:0000000000001D04                 mov     rax, [r12+8]
.text:0000000000001D09                 mov     ebx, 1
.text:0000000000001D0E                 cmp     rax, [r12+10h]
.text:0000000000001D13                 jb      loc_1BB9
.text:0000000000001D19
.text:0000000000001D19 loc_1D19:                               ; CODE XREF: fold_file+73↑j
.text:0000000000001D19                 mov     rdi, r12        ; _IO_FILE *
.text:0000000000001D1C                 call    ___uflow
.text:0000000000001D21                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D24                 mov     ebp, eax
.text:0000000000001D26                 jnz     loc_1BC5
.text:0000000000001D2C                 mov     rax, [rsp+58h+var_40]
.text:0000000000001D31                 test    rbx, rbx
.text:0000000000001D34                 mov     ebp, [rax]
.text:0000000000001D36                 jz      short loc_1D53
.text:0000000000001D38                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001D3F                 mov     rdi, cs:line_out_6894 ; ptr
.text:0000000000001D46                 mov     rdx, rbx        ; n
.text:0000000000001D49                 mov     esi, 1          ; size
.text:0000000000001D4E                 call    _fwrite_unlocked
.text:0000000000001D53
.text:0000000000001D53 loc_1D53:                               ; CODE XREF: fold_file+1F6↑j
.text:0000000000001D53                 test    byte ptr [r12], 20h
.text:0000000000001D58                 jnz     loc_1E60
.text:0000000000001D5E                 mov     rsi, [rsp+58h+filename]
.text:0000000000001D63                 lea     rdi, aLt+2      ; "-"
.text:0000000000001D6A                 mov     ecx, 2
.text:0000000000001D6F                 repe cmpsb
.text:0000000000001D71                 setnbe  al
.text:0000000000001D74                 sbb     al, 0
.text:0000000000001D76                 test    al, al
.text:0000000000001D78                 jnz     loc_1EC0
.text:0000000000001D7E
.text:0000000000001D7E loc_1D7E:                               ; CODE XREF: fold_file+38B↓j
.text:0000000000001D7E                 mov     ebx, 1
.text:0000000000001D83
.text:0000000000001D83 loc_1D83:                               ; CODE XREF: fold_file+314↓j
.text:0000000000001D83                                         ; fold_file+363↓j ...
.text:0000000000001D83                 add     rsp, 28h
.text:0000000000001D87                 mov     eax, ebx
.text:0000000000001D89                 pop     rbx
.text:0000000000001D8A                 pop     rbp
.text:0000000000001D8B                 pop     r12
.text:0000000000001D8D                 pop     r13
.text:0000000000001D8F                 pop     r14
.text:0000000000001D91                 pop     r15
.text:0000000000001D93                 retn
.text:0000000000001D93 ; ---------------------------------------------------------------------------
.text:0000000000001D94                 align 8
.text:0000000000001D98
.text:0000000000001D98 loc_1D98:                               ; CODE XREF: fold_file+97↑j
.text:0000000000001D98                 lea     rsi, allocated_out_6895
.text:0000000000001D9F                 mov     rdi, r13
.text:0000000000001DA2                 call    x2realloc
.text:0000000000001DA7                 cmp     ebp, 0Ah
.text:0000000000001DAA                 mov     r13, rax
.text:0000000000001DAD                 mov     cs:line_out_6894, rax
.text:0000000000001DB4                 jnz     loc_1BE6
.text:0000000000001DBA
.text:0000000000001DBA loc_1DBA:                               ; CODE XREF: fold_file+A0↑j
.text:0000000000001DBA                 mov     byte ptr [r13+rbx+0], 0Ah
.text:0000000000001DC0                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001DC7                 mov     rdx, r14        ; n
.text:0000000000001DCA                 mov     esi, 1          ; size
.text:0000000000001DCF                 mov     rdi, r13        ; ptr
.text:0000000000001DD2                 xor     ebx, ebx
.text:0000000000001DD4                 xor     r15d, r15d
.text:0000000000001DD7                 call    _fwrite_unlocked
.text:0000000000001DDC                 jmp     loc_1BA9
.text:0000000000001DDC ; ---------------------------------------------------------------------------
.text:0000000000001DE1                 align 8
.text:0000000000001DE8
.text:0000000000001DE8 loc_1DE8:                               ; CODE XREF: fold_file+BF↑j
.text:0000000000001DE8                 mov     [r13+rbx+0], r14b
.text:0000000000001DED                 add     rbx, 1
.text:0000000000001DF1                 jmp     loc_1BA9
.text:0000000000001DF1 ; ---------------------------------------------------------------------------
.text:0000000000001DF6                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: fold_file+30↑j
.text:0000000000001E00                 mov     rdi, [rsp+58h+filename] ; filename
.text:0000000000001E05                 lea     rsi, aWriteError+0Ah ; modes
.text:0000000000001E0C                 call    _fopen
.text:0000000000001E11                 mov     r12, rax
.text:0000000000001E14                 call    ___errno_location
.text:0000000000001E19                 test    r12, r12
.text:0000000000001E1C                 mov     [rsp+58h+var_40], rax
.text:0000000000001E21                 jnz     loc_1B97
.text:0000000000001E27
.text:0000000000001E27 loc_1E27:                               ; CODE XREF: fold_file+51↑j
.text:0000000000001E27                                         ; fold_file+391↓j
.text:0000000000001E27                 mov     rdx, [rsp+58h+filename]
.text:0000000000001E2C                 mov     esi, 3
.text:0000000000001E31                 xor     edi, edi
.text:0000000000001E33                 xor     ebx, ebx
.text:0000000000001E35                 call    quotearg_n_style_colon
.text:0000000000001E3A                 mov     rcx, rax
.text:0000000000001E3D                 mov     rax, [rsp+58h+var_40]
.text:0000000000001E42                 lea     rdx, format+4   ; format
.text:0000000000001E49                 xor     edi, edi        ; status
.text:0000000000001E4B                 mov     esi, [rax]      ; errnum
.text:0000000000001E4D                 xor     eax, eax
.text:0000000000001E4F                 call    _error
.text:0000000000001E54                 jmp     loc_1D83
.text:0000000000001E54 ; ---------------------------------------------------------------------------
.text:0000000000001E59                 align 20h
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: fold_file+218↑j
.text:0000000000001E60                 mov     rbx, [rsp+58h+filename]
.text:0000000000001E65                 xor     edi, edi
.text:0000000000001E67                 mov     esi, 3
.text:0000000000001E6C                 mov     rdx, rbx
.text:0000000000001E6F                 call    quotearg_n_style_colon
.text:0000000000001E74                 lea     rdx, format+4   ; format
.text:0000000000001E7B                 mov     rcx, rax
.text:0000000000001E7E                 xor     edi, edi        ; status
.text:0000000000001E80                 xor     eax, eax
.text:0000000000001E82                 mov     esi, ebp        ; errnum
.text:0000000000001E84                 call    _error
.text:0000000000001E89                 lea     rdi, aLt+2      ; "-"
.text:0000000000001E90                 mov     rsi, rbx
.text:0000000000001E93                 mov     ecx, 2
.text:0000000000001E98                 repe cmpsb
.text:0000000000001E9A                 setnbe  al
.text:0000000000001E9D                 sbb     al, 0
.text:0000000000001E9F                 xor     ebx, ebx
.text:0000000000001EA1                 test    al, al
.text:0000000000001EA3                 jz      loc_1D83
.text:0000000000001EA9                 mov     rdi, r12        ; stream
.text:0000000000001EAC                 call    rpl_fclose
.text:0000000000001EB1                 jmp     loc_1D83
.text:0000000000001EB1 ; ---------------------------------------------------------------------------
.text:0000000000001EB6                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: fold_file+238↑j
.text:0000000000001EC0                 mov     rdi, r12        ; stream
.text:0000000000001EC3                 call    rpl_fclose
.text:0000000000001EC8                 cmp     eax, 0FFFFFFFFh
.text:0000000000001ECB                 jnz     loc_1D7E
.text:0000000000001ED1                 jmp     loc_1E27
.text:0000000000001ED6 ; ---------------------------------------------------------------------------
.text:0000000000001ED6
.text:0000000000001ED6 loc_1ED6:                               ; CODE XREF: fold_file+18C↑j
.text:0000000000001ED6                 xor     r15d, r15d
.text:0000000000001ED9                 jmp     loc_1BED
.text:0000000000001EDE ; ---------------------------------------------------------------------------
.text:0000000000001EDE
.text:0000000000001EDE loc_1EDE:                               ; CODE XREF: fold_file+15E↑j
.text:0000000000001EDE                 mov     esi, 0Ah        ; int
.text:0000000000001EE3                 call    ___overflow
.text:0000000000001EE8                 jmp     loc_1CAF
.text:0000000000001EE8 ; } // starts at 1B40
.text:0000000000001EE8 fold_file       endp
.text:0000000000001EE8
.text:0000000000001EE8 ; ---------------------------------------------------------------------------
.text:0000000000001EED                 align 10h
.text:0000000000001EF0
.text:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EF0
.text:0000000000001EF0 ; Attributes: noreturn
.text:0000000000001EF0
.text:0000000000001EF0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001EF0                 public usage
.text:0000000000001EF0 usage           proc near               ; CODE XREF: main+C8↑p
.text:0000000000001EF0                                         ; main+263↑p
.text:0000000000001EF0
.text:0000000000001EF0 var_A8          = qword ptr -0A8h
.text:0000000000001EF0 var_A0          = qword ptr -0A0h
.text:0000000000001EF0 var_98          = qword ptr -98h
.text:0000000000001EF0 var_90          = qword ptr -90h
.text:0000000000001EF0 var_88          = qword ptr -88h
.text:0000000000001EF0 var_80          = qword ptr -80h
.text:0000000000001EF0 var_78          = qword ptr -78h
.text:0000000000001EF0 var_70          = qword ptr -70h
.text:0000000000001EF0 var_68          = qword ptr -68h
.text:0000000000001EF0 var_60          = qword ptr -60h
.text:0000000000001EF0 var_58          = qword ptr -58h
.text:0000000000001EF0 var_50          = qword ptr -50h
.text:0000000000001EF0 var_48          = qword ptr -48h
.text:0000000000001EF0 var_40          = qword ptr -40h
.text:0000000000001EF0 var_30          = qword ptr -30h
.text:0000000000001EF0
.text:0000000000001EF0 ; __unwind {
.text:0000000000001EF0                 push    r13
.text:0000000000001EF2                 push    r12
.text:0000000000001EF4                 mov     edx, 5          ; category
.text:0000000000001EF9                 push    rbp
.text:0000000000001EFA                 push    rbx
.text:0000000000001EFB                 mov     ebp, edi
.text:0000000000001EFD                 sub     rsp, 88h
.text:0000000000001F04                 mov     rbx, cs:program_name
.text:0000000000001F0B                 mov     rax, fs:28h
.text:0000000000001F14                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001F19                 xor     eax, eax
.text:0000000000001F1B                 test    edi, edi
.text:0000000000001F1D                 jz      short loc_1F4D
.text:0000000000001F1F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001F26                 xor     edi, edi        ; domainname
.text:0000000000001F28                 call    _dcgettext
.text:0000000000001F2D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001F34                 mov     rdx, rax
.text:0000000000001F37                 mov     rcx, rbx
.text:0000000000001F3A                 mov     esi, 1
.text:0000000000001F3F                 xor     eax, eax
.text:0000000000001F41                 call    ___fprintf_chk
.text:0000000000001F46
.text:0000000000001F46 loc_1F46:                               ; CODE XREF: usage+2EE↓j
.text:0000000000001F46                 mov     edi, ebp        ; status
.text:0000000000001F48                 call    _exit
.text:0000000000001F4D ; ---------------------------------------------------------------------------
.text:0000000000001F4D
.text:0000000000001F4D loc_1F4D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001F4D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000001F54                 xor     edi, edi        ; domainname
.text:0000000000001F56                 call    _dcgettext
.text:0000000000001F5B                 mov     rdx, rbx
.text:0000000000001F5E                 mov     rsi, rax
.text:0000000000001F61                 mov     edi, 1
.text:0000000000001F66                 xor     eax, eax
.text:0000000000001F68                 call    ___printf_chk
.text:0000000000001F6D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F74                 lea     rsi, aWrapInputLines ; "Wrap input lines in each FILE, writing "...
.text:0000000000001F7B                 mov     edx, 5          ; category
.text:0000000000001F80                 xor     edi, edi        ; domainname
.text:0000000000001F82                 call    _dcgettext
.text:0000000000001F87                 mov     rsi, rbx        ; stream
.text:0000000000001F8A                 mov     rdi, rax        ; s
.text:0000000000001F8D                 call    _fputs_unlocked
.text:0000000000001F92                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F99                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000001FA0                 mov     edx, 5          ; category
.text:0000000000001FA5                 xor     edi, edi        ; domainname
.text:0000000000001FA7                 call    _dcgettext
.text:0000000000001FAC                 mov     rsi, rbx        ; stream
.text:0000000000001FAF                 mov     rdi, rax        ; s
.text:0000000000001FB2                 call    _fputs_unlocked
.text:0000000000001FB7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FBE                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001FC5                 mov     edx, 5          ; category
.text:0000000000001FCA                 xor     edi, edi        ; domainname
.text:0000000000001FCC                 call    _dcgettext
.text:0000000000001FD1                 mov     rsi, rbx        ; stream
.text:0000000000001FD4                 mov     rdi, rax        ; s
.text:0000000000001FD7                 call    _fputs_unlocked
.text:0000000000001FDC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FE3                 lea     rsi, aBBytesCountByt ; "  -b, --bytes         count bytes rathe"...
.text:0000000000001FEA                 mov     edx, 5          ; category
.text:0000000000001FEF                 xor     edi, edi        ; domainname
.text:0000000000001FF1                 call    _dcgettext
.text:0000000000001FF6                 mov     rsi, rbx        ; stream
.text:0000000000001FF9                 mov     rdi, rax        ; s
.text:0000000000001FFC                 call    _fputs_unlocked
.text:0000000000002001                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002008                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000200F                 mov     edx, 5          ; category
.text:0000000000002014                 xor     edi, edi        ; domainname
.text:0000000000002016                 call    _dcgettext
.text:000000000000201B                 mov     rsi, rbx        ; stream
.text:000000000000201E                 mov     rdi, rax        ; s
.text:0000000000002021                 call    _fputs_unlocked
.text:0000000000002026                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000202D                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002034                 mov     edx, 5          ; category
.text:0000000000002039                 xor     edi, edi        ; domainname
.text:000000000000203B                 call    _dcgettext
.text:0000000000002040                 mov     rsi, rbx        ; stream
.text:0000000000002043                 mov     rdi, rax        ; s
.text:0000000000002046                 lea     rbx, aFold      ; "fold"
.text:000000000000204D                 call    _fputs_unlocked
.text:0000000000002052                 lea     rax, asc_5269   ; "["
.text:0000000000002059                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002060                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002069                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002072                 mov     rdx, rsp
.text:0000000000002075                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002079                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002080                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002085                 lea     rcx, aSha384sum ; "sha384sum"
.text:000000000000208C                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002091                 lea     rax, domainname ; "coreutils"
.text:0000000000002098                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000209D                 lea     rcx, aSha512sum ; "sha512sum"
.text:00000000000020A4                 mov     [rsp+0A8h+var_98], rax
.text:00000000000020A9                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000020B0                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000020B5                 mov     [rsp+0A8h+var_90], rax
.text:00000000000020BA                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000020C1                 mov     [rsp+0A8h+var_88], rax
.text:00000000000020C6                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000020CD                 mov     [rsp+0A8h+var_80], rax
.text:00000000000020D2                 mov     [rsp+0A8h+var_70], rax
.text:00000000000020D7                 mov     [rsp+0A8h+var_60], rax
.text:00000000000020DC                 mov     [rsp+0A8h+var_50], rax
.text:00000000000020E1                 nop     dword ptr [rax+00000000h]
.text:00000000000020E8
.text:00000000000020E8 loc_20E8:                               ; CODE XREF: usage+215↓j
.text:00000000000020E8                 add     rdx, 10h
.text:00000000000020EC                 mov     rdi, [rdx]
.text:00000000000020EF                 test    rdi, rdi
.text:00000000000020F2                 jz      short loc_2107
.text:00000000000020F4                 mov     ecx, 5
.text:00000000000020F9                 mov     rsi, rbx
.text:00000000000020FC                 repe cmpsb
.text:00000000000020FE                 setnbe  al
.text:0000000000002101                 sbb     al, 0
.text:0000000000002103                 test    al, al
.text:0000000000002105                 jnz     short loc_20E8
.text:0000000000002107
.text:0000000000002107 loc_2107:                               ; CODE XREF: usage+202↑j
.text:0000000000002107                 mov     r12, [rdx+8]
.text:000000000000210B                 xor     edi, edi        ; domainname
.text:000000000000210D                 mov     edx, 5          ; category
.text:0000000000002112                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002119                 test    r12, r12
.text:000000000000211C                 jz      loc_21E3
.text:0000000000002122                 call    _dcgettext
.text:0000000000002127                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000212E                 lea     rdx, unk_52DF
.text:0000000000002135                 mov     rsi, rax
.text:0000000000002138                 mov     edi, 1
.text:000000000000213D                 xor     eax, eax
.text:000000000000213F                 call    ___printf_chk
.text:0000000000002144                 xor     esi, esi        ; locale
.text:0000000000002146                 mov     edi, 5          ; category
.text:000000000000214B                 call    _setlocale
.text:0000000000002150                 test    rax, rax
.text:0000000000002153                 jz      short loc_2171
.text:0000000000002155                 lea     rsi, s2         ; "en_"
.text:000000000000215C                 mov     edx, 3          ; n
.text:0000000000002161                 mov     rdi, rax        ; s1
.text:0000000000002164                 call    _strncmp
.text:0000000000002169                 test    eax, eax
.text:000000000000216B                 jnz     loc_2278
.text:0000000000002171
.text:0000000000002171 loc_2171:                               ; CODE XREF: usage+263↑j
.text:0000000000002171                                         ; usage+3AD↓j
.text:0000000000002171                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002178                 xor     edi, edi        ; domainname
.text:000000000000217A                 mov     edx, 5          ; category
.text:000000000000217F                 call    _dcgettext
.text:0000000000002184                 lea     rcx, aFold      ; "fold"
.text:000000000000218B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002192                 mov     rsi, rax
.text:0000000000002195                 mov     edi, 1
.text:000000000000219A                 xor     eax, eax
.text:000000000000219C                 call    ___printf_chk
.text:00000000000021A1                 cmp     r12, rbx
.text:00000000000021A4                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000021AB                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000021B2                 cmovz   rbx, rcx
.text:00000000000021B6
.text:00000000000021B6 loc_21B6:                               ; CODE XREF: usage+37C↓j
.text:00000000000021B6                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000021BD                 xor     edi, edi        ; domainname
.text:00000000000021BF                 mov     edx, 5          ; category
.text:00000000000021C4                 call    _dcgettext
.text:00000000000021C9                 mov     rcx, rbx
.text:00000000000021CC                 mov     rsi, rax
.text:00000000000021CF                 mov     rdx, r12
.text:00000000000021D2                 mov     edi, 1
.text:00000000000021D7                 xor     eax, eax
.text:00000000000021D9                 call    ___printf_chk
.text:00000000000021DE                 jmp     loc_1F46
.text:00000000000021E3 ; ---------------------------------------------------------------------------
.text:00000000000021E3
.text:00000000000021E3 loc_21E3:                               ; CODE XREF: usage+22C↑j
.text:00000000000021E3                 call    _dcgettext
.text:00000000000021E8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000021EF                 lea     rdx, unk_52DF
.text:00000000000021F6                 mov     rsi, rax
.text:00000000000021F9                 mov     edi, 1
.text:00000000000021FE                 xor     eax, eax
.text:0000000000002200                 call    ___printf_chk
.text:0000000000002205                 xor     esi, esi        ; locale
.text:0000000000002207                 mov     edi, 5          ; category
.text:000000000000220C                 call    _setlocale
.text:0000000000002211                 test    rax, rax
.text:0000000000002214                 jz      short loc_222E
.text:0000000000002216                 lea     rsi, s2         ; "en_"
.text:000000000000221D                 mov     edx, 3          ; n
.text:0000000000002222                 mov     rdi, rax        ; s1
.text:0000000000002225                 call    _strncmp
.text:000000000000222A                 test    eax, eax
.text:000000000000222C                 jnz     short loc_2271
.text:000000000000222E
.text:000000000000222E loc_222E:                               ; CODE XREF: usage+324↑j
.text:000000000000222E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002235                 mov     edx, 5          ; category
.text:000000000000223A                 xor     edi, edi        ; domainname
.text:000000000000223C                 lea     r12, aFold      ; "fold"
.text:0000000000002243                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000224A                 call    _dcgettext
.text:000000000000224F                 lea     rcx, aFold      ; "fold"
.text:0000000000002256                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000225D                 mov     rsi, rax
.text:0000000000002260                 mov     edi, 1
.text:0000000000002265                 xor     eax, eax
.text:0000000000002267                 call    ___printf_chk
.text:000000000000226C                 jmp     loc_21B6
.text:0000000000002271 ; ---------------------------------------------------------------------------
.text:0000000000002271
.text:0000000000002271 loc_2271:                               ; CODE XREF: usage+33C↑j
.text:0000000000002271                 lea     r12, aFold      ; "fold"
.text:0000000000002278
.text:0000000000002278 loc_2278:                               ; CODE XREF: usage+27B↑j
.text:0000000000002278                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:000000000000227F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000002286                 xor     edi, edi        ; domainname
.text:0000000000002288                 mov     edx, 5          ; category
.text:000000000000228D                 call    _dcgettext
.text:0000000000002292                 mov     rsi, r13        ; stream
.text:0000000000002295                 mov     rdi, rax        ; s
.text:0000000000002298                 call    _fputs_unlocked
.text:000000000000229D                 jmp     loc_2171
.text:000000000000229D ; } // starts at 1EF0
.text:000000000000229D usage           endp
.text:000000000000229D
.text:000000000000229D ; ---------------------------------------------------------------------------
.text:00000000000022A2                 align 10h
.text:00000000000022B0
.text:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022B0
.text:00000000000022B0
.text:00000000000022B0                 public close_stdout_set_file_name
.text:00000000000022B0 close_stdout_set_file_name proc near
.text:00000000000022B0 ; __unwind {
.text:00000000000022B0                 mov     cs:file_name, rdi
.text:00000000000022B7                 retn
.text:00000000000022B7 ; } // starts at 22B0
.text:00000000000022B7 close_stdout_set_file_name endp
.text:00000000000022B7
.text:00000000000022B7 ; ---------------------------------------------------------------------------
.text:00000000000022B8                 align 20h
.text:00000000000022C0
.text:00000000000022C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022C0
.text:00000000000022C0
.text:00000000000022C0                 public close_stdout_set_ignore_EPIPE
.text:00000000000022C0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000022C0 ; __unwind {
.text:00000000000022C0                 mov     cs:ignore_EPIPE, dil
.text:00000000000022C7                 retn
.text:00000000000022C7 ; } // starts at 22C0
.text:00000000000022C7 close_stdout_set_ignore_EPIPE endp
.text:00000000000022C7
.text:00000000000022C7 ; ---------------------------------------------------------------------------
.text:00000000000022C8                 align 10h
.text:00000000000022D0
.text:00000000000022D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022D0
.text:00000000000022D0 ; Attributes: info_from_lumina
.text:00000000000022D0
.text:00000000000022D0 ; void __cdecl close_stdout()
.text:00000000000022D0                 public close_stdout
.text:00000000000022D0 close_stdout    proc near               ; DATA XREF: main+62↑o
.text:00000000000022D0 ; __unwind {
.text:00000000000022D0                 push    rbp
.text:00000000000022D1                 push    rbx
.text:00000000000022D2                 sub     rsp, 8
.text:00000000000022D6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000022DD                 call    close_stream
.text:00000000000022E2                 test    eax, eax
.text:00000000000022E4                 jz      short loc_22FC
.text:00000000000022E6                 call    ___errno_location
.text:00000000000022EB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000022F2                 mov     rbx, rax
.text:00000000000022F5                 jz      short loc_2313
.text:00000000000022F7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000022FA                 jnz     short loc_2313
.text:00000000000022FC
.text:00000000000022FC loc_22FC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000022FC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002303                 call    close_stream
.text:0000000000002308                 test    eax, eax
.text:000000000000230A                 jnz     short loc_2352
.text:000000000000230C                 add     rsp, 8
.text:0000000000002310                 pop     rbx
.text:0000000000002311                 pop     rbp
.text:0000000000002312                 retn
.text:0000000000002313 ; ---------------------------------------------------------------------------
.text:0000000000002313
.text:0000000000002313 loc_2313:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002313                                         ; close_stdout+2A↑j
.text:0000000000002313                 lea     rsi, aWriteError ; "write error"
.text:000000000000231A                 xor     edi, edi        ; domainname
.text:000000000000231C                 mov     edx, 5          ; category
.text:0000000000002321                 call    _dcgettext
.text:0000000000002326                 mov     rdi, cs:file_name
.text:000000000000232D                 mov     rbp, rax
.text:0000000000002330                 test    rdi, rdi
.text:0000000000002333                 jz      short loc_235D
.text:0000000000002335                 call    quotearg_colon
.text:000000000000233A                 mov     esi, [rbx]      ; errnum
.text:000000000000233C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002343                 mov     rcx, rax
.text:0000000000002346                 mov     r8, rbp
.text:0000000000002349                 xor     edi, edi        ; status
.text:000000000000234B                 xor     eax, eax
.text:000000000000234D                 call    _error
.text:0000000000002352
.text:0000000000002352 loc_2352:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002352                                         ; close_stdout+A2↓j
.text:0000000000002352                 mov     edi, cs:exit_failure ; status
.text:0000000000002358                 call    __exit
.text:000000000000235D ; ---------------------------------------------------------------------------
.text:000000000000235D
.text:000000000000235D loc_235D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000235D                 mov     esi, [rbx]      ; errnum
.text:000000000000235F                 lea     rdx, format+4   ; format
.text:0000000000002366                 mov     rcx, rax
.text:0000000000002369                 xor     edi, edi        ; status
.text:000000000000236B                 xor     eax, eax
.text:000000000000236D                 call    _error
.text:0000000000002372                 jmp     short loc_2352
.text:0000000000002372 ; } // starts at 22D0
.text:0000000000002372 close_stdout    endp
.text:0000000000002372
.text:0000000000002372 ; ---------------------------------------------------------------------------
.text:0000000000002374                 align 20h
.text:0000000000002380
.text:0000000000002380 ; =============== S U B R O U T I N E =======================================
.text:0000000000002380
.text:0000000000002380
.text:0000000000002380 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002380                 public fdadvise
.text:0000000000002380 fdadvise        proc near
.text:0000000000002380 ; __unwind {
.text:0000000000002380                 jmp     _posix_fadvise
.text:0000000000002380 ; } // starts at 2380
.text:0000000000002380 fdadvise        endp
.text:0000000000002380
.text:0000000000002380 ; ---------------------------------------------------------------------------
.text:0000000000002385                 align 10h
.text:0000000000002390
.text:0000000000002390 ; =============== S U B R O U T I N E =======================================
.text:0000000000002390
.text:0000000000002390
.text:0000000000002390                 public fadvise
.text:0000000000002390 fadvise         proc near               ; CODE XREF: fold_file+64↑p
.text:0000000000002390 ; __unwind {
.text:0000000000002390                 test    rdi, rdi
.text:0000000000002393                 jz      short locret_23B0
.text:0000000000002395                 push    rbx
.text:0000000000002396                 mov     ebx, esi
.text:0000000000002398                 call    _fileno
.text:000000000000239D                 mov     ecx, ebx        ; advise
.text:000000000000239F                 xor     edx, edx        ; len
.text:00000000000023A1                 xor     esi, esi        ; offset
.text:00000000000023A3                 pop     rbx
.text:00000000000023A4                 mov     edi, eax        ; fd
.text:00000000000023A6                 jmp     _posix_fadvise
.text:00000000000023A6 ; ---------------------------------------------------------------------------
.text:00000000000023AB                 align 10h
.text:00000000000023B0
.text:00000000000023B0 locret_23B0:                            ; CODE XREF: fadvise+3↑j
.text:00000000000023B0                 rep retn
.text:00000000000023B0 ; } // starts at 2390
.text:00000000000023B0 fadvise         endp
.text:00000000000023B0
.text:00000000000023B0 ; ---------------------------------------------------------------------------
.text:00000000000023B2                 align 20h
.text:00000000000023C0
.text:00000000000023C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000023C0
.text:00000000000023C0
.text:00000000000023C0                 public set_program_name
.text:00000000000023C0 set_program_name proc near              ; CODE XREF: main+2D↑p
.text:00000000000023C0 ; __unwind {
.text:00000000000023C0                 test    rdi, rdi
.text:00000000000023C3                 push    rbx
.text:00000000000023C4                 jz      short loc_243D
.text:00000000000023C6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000023CB                 mov     rbx, rdi
.text:00000000000023CE                 call    _strrchr
.text:00000000000023D3                 test    rax, rax
.text:00000000000023D6                 jz      short loc_242D
.text:00000000000023D8                 lea     r8, [rax+1]
.text:00000000000023DC                 mov     rdx, r8
.text:00000000000023DF                 sub     rdx, rbx
.text:00000000000023E2                 cmp     rdx, 6
.text:00000000000023E6                 jle     short loc_242D
.text:00000000000023E8                 lea     rsi, [rax-6]
.text:00000000000023EC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000023F3                 mov     ecx, 7
.text:00000000000023F8                 repe cmpsb
.text:00000000000023FA                 setnbe  dl
.text:00000000000023FD                 sbb     dl, 0
.text:0000000000002400                 test    dl, dl
.text:0000000000002402                 jnz     short loc_242D
.text:0000000000002404                 lea     rdi, aLt        ; "lt-"
.text:000000000000240B                 mov     ecx, 3
.text:0000000000002410                 mov     rsi, r8
.text:0000000000002413                 mov     rbx, r8
.text:0000000000002416                 repe cmpsb
.text:0000000000002418                 setnbe  dl
.text:000000000000241B                 sbb     dl, 0
.text:000000000000241E                 test    dl, dl
.text:0000000000002420                 jnz     short loc_242D
.text:0000000000002422                 lea     rbx, [rax+4]
.text:0000000000002426                 mov     cs:__bss_start, rbx
.text:000000000000242D
.text:000000000000242D loc_242D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000242D                                         ; set_program_name+26↑j ...
.text:000000000000242D                 mov     cs:program_name, rbx
.text:0000000000002434                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000243B                 pop     rbx
.text:000000000000243C                 retn
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:000000000000243D
.text:000000000000243D loc_243D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000243D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002444                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000244B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002450                 mov     esi, 1          ; size
.text:0000000000002455                 call    _fwrite
.text:000000000000245A                 call    _abort
.text:000000000000245A ; } // starts at 23C0
.text:000000000000245A set_program_name endp
.text:000000000000245A
.text:000000000000245A ; ---------------------------------------------------------------------------
.text:000000000000245F                 align 20h
.text:0000000000002460
.text:0000000000002460 ; =============== S U B R O U T I N E =======================================
.text:0000000000002460
.text:0000000000002460 ; Attributes: info_from_lumina
.text:0000000000002460
.text:0000000000002460 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002460 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002460                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002460 ; __unwind {
.text:0000000000002460                 push    rbp
.text:0000000000002461                 push    rbx
.text:0000000000002462                 mov     rbp, rdi
.text:0000000000002465                 mov     ebx, esi
.text:0000000000002467                 sub     rsp, 8
.text:000000000000246B                 call    locale_charset
.text:0000000000002470                 movzx   edx, byte ptr [rax]
.text:0000000000002473                 and     edx, 0FFFFFFDFh
.text:0000000000002476                 cmp     dl, 55h ; 'U'
.text:0000000000002479                 jz      short loc_24F0
.text:000000000000247B                 cmp     dl, 47h ; 'G'
.text:000000000000247E                 jz      short loc_24A0
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002480                                         ; gettext_quote+50↓j ...
.text:0000000000002480                 lea     rax, unk_56D3
.text:0000000000002487                 lea     rdx, asc_56D5   ; "'"
.text:000000000000248E                 cmp     ebx, 9
.text:0000000000002491                 cmovnz  rax, rdx
.text:0000000000002495                 add     rsp, 8
.text:0000000000002499                 pop     rbx
.text:000000000000249A                 pop     rbp
.text:000000000000249B                 retn
.text:000000000000249B ; ---------------------------------------------------------------------------
.text:000000000000249C                 align 20h
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000024A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000024A4                 and     edx, 0FFFFFFDFh
.text:00000000000024A7                 cmp     dl, 42h ; 'B'
.text:00000000000024AA                 jnz     short loc_2480
.text:00000000000024AC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000024B0                 jnz     short loc_2480
.text:00000000000024B2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000024B6                 jnz     short loc_2480
.text:00000000000024B8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000024BC                 jnz     short loc_2480
.text:00000000000024BE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000024C2                 jnz     short loc_2480
.text:00000000000024C4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000024C8                 jnz     short loc_2480
.text:00000000000024CA                 cmp     byte ptr [rax+7], 0
.text:00000000000024CE                 jnz     short loc_2480
.text:00000000000024D0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000024D4                 lea     rax, unk_56CC
.text:00000000000024DB                 lea     rdx, unk_56D0
.text:00000000000024E2                 cmovnz  rax, rdx
.text:00000000000024E6                 add     rsp, 8
.text:00000000000024EA                 pop     rbx
.text:00000000000024EB                 pop     rbp
.text:00000000000024EC                 retn
.text:00000000000024EC ; ---------------------------------------------------------------------------
.text:00000000000024ED                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000024F0                 movzx   edx, byte ptr [rax+1]
.text:00000000000024F4                 and     edx, 0FFFFFFDFh
.text:00000000000024F7                 cmp     dl, 54h ; 'T'
.text:00000000000024FA                 jnz     short loc_2480
.text:00000000000024FC                 movzx   edx, byte ptr [rax+2]
.text:0000000000002500                 and     edx, 0FFFFFFDFh
.text:0000000000002503                 cmp     dl, 46h ; 'F'
.text:0000000000002506                 jnz     loc_2480
.text:000000000000250C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002510                 jnz     loc_2480
.text:0000000000002516                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000251A                 jnz     loc_2480
.text:0000000000002520                 cmp     byte ptr [rax+5], 0
.text:0000000000002524                 jnz     loc_2480
.text:000000000000252A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000252E                 lea     rax, unk_56C4
.text:0000000000002535                 lea     rdx, unk_56C8
.text:000000000000253C                 cmovnz  rax, rdx
.text:0000000000002540                 add     rsp, 8
.text:0000000000002544                 pop     rbx
.text:0000000000002545                 pop     rbp
.text:0000000000002546                 retn
.text:0000000000002546 ; } // starts at 2460
.text:0000000000002546 gettext_quote   endp
.text:0000000000002546
.text:0000000000002546 ; ---------------------------------------------------------------------------
.text:0000000000002547                 align 10h
.text:0000000000002550
.text:0000000000002550 ; =============== S U B R O U T I N E =======================================
.text:0000000000002550
.text:0000000000002550 ; Attributes: info_from_lumina
.text:0000000000002550
.text:0000000000002550 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002550 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002550                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002550
.text:0000000000002550 var_E0          = dword ptr -0E0h
.text:0000000000002550 var_DB          = byte ptr -0DBh
.text:0000000000002550 var_DA          = byte ptr -0DAh
.text:0000000000002550 var_D9          = byte ptr -0D9h
.text:0000000000002550 s               = qword ptr -0D8h
.text:0000000000002550 n               = qword ptr -0D0h
.text:0000000000002550 var_C8          = qword ptr -0C8h
.text:0000000000002550 ps              = qword ptr -0C0h
.text:0000000000002550 var_B8          = qword ptr -0B8h
.text:0000000000002550 var_B0          = qword ptr -0B0h
.text:0000000000002550 var_A8          = qword ptr -0A8h
.text:0000000000002550 s2              = qword ptr -0A0h
.text:0000000000002550 var_98          = qword ptr -98h
.text:0000000000002550 var_90          = qword ptr -90h
.text:0000000000002550 var_88          = qword ptr -88h
.text:0000000000002550 var_80          = qword ptr -80h
.text:0000000000002550 var_78          = qword ptr -78h
.text:0000000000002550 var_70          = dword ptr -70h
.text:0000000000002550 var_6C          = byte ptr -6Ch
.text:0000000000002550 var_6B          = byte ptr -6Bh
.text:0000000000002550 var_6A          = byte ptr -6Ah
.text:0000000000002550 var_69          = byte ptr -69h
.text:0000000000002550 var_68          = qword ptr -68h
.text:0000000000002550 var_60          = qword ptr -60h
.text:0000000000002550 wc              = dword ptr -4Ch
.text:0000000000002550 var_48          = qword ptr -48h
.text:0000000000002550 var_40          = qword ptr -40h
.text:0000000000002550 arg_0           = qword ptr  8
.text:0000000000002550 arg_8           = qword ptr  10h
.text:0000000000002550 arg_10          = qword ptr  18h
.text:0000000000002550
.text:0000000000002550 ; __unwind {
.text:0000000000002550                 push    r15
.text:0000000000002552                 push    r14
.text:0000000000002554                 mov     r15d, r8d
.text:0000000000002557                 push    r13
.text:0000000000002559                 push    r12
.text:000000000000255B                 mov     r14, rdi
.text:000000000000255E                 push    rbp
.text:000000000000255F                 push    rbx
.text:0000000000002560                 mov     ebx, r9d
.text:0000000000002563                 mov     r13, rsi
.text:0000000000002566                 mov     rbp, rcx
.text:0000000000002569                 and     ebx, 2
.text:000000000000256C                 sub     rsp, 0B8h
.text:0000000000002573                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000257B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002580                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002585                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000258A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000258F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002597                 mov     [rsp+0E8h+var_80], rax
.text:000000000000259C                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000025A4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000025A9                 mov     rax, fs:28h
.text:00000000000025B2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000025BA                 xor     eax, eax
.text:00000000000025BC                 call    ___ctype_get_mb_cur_max
.text:00000000000025C1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000025C5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000025CA                 ja      def_25E1        ; jumptable 00000000000121F1 default case
.text:00000000000025D0                 lea     rcx, jpt_25E1
.text:00000000000025D7                 mov     edx, r15d
.text:00000000000025DA                 movsxd  rax, ds:(jpt_25E1 - 5740h)[rcx+rdx*4]
.text:00000000000025DE                 add     rax, rcx
.text:00000000000025E1                 jmp     rax             ; switch jump
.text:00000000000025E3 ; ---------------------------------------------------------------------------
.text:00000000000025E3
.text:00000000000025E3 loc_25E3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000025E3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000025E3                                         ; DATA XREF: ...
.text:00000000000025E3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000025E8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000025ED                 xor     r12d, r12d
.text:00000000000025F0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000025F9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000025FE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002603
.text:0000000000002603 loc_2603:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002603                 lea     rax, asc_56D5   ; "'"
.text:000000000000260A                 mov     [rsp+0E8h+n], 1
.text:0000000000002613                 xor     r15d, r15d
.text:0000000000002616                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000261E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002623
.text:0000000000002623 loc_2623:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002623                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002623                 xor     r11d, r11d
.text:0000000000002626                 mov     rax, rbp
.text:0000000000002629                 mov     r8d, r12d
.text:000000000000262C                 mov     rbp, r11
.text:000000000000262F                 mov     r11, rax
.text:0000000000002632                 nop     word ptr [rax+rax+00h]
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002638                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002638                 cmp     r11, rbp
.text:000000000000263B                 setnz   r12b
.text:000000000000263F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002643                 jnz     short loc_2652
.text:0000000000002645                 mov     rax, [rsp+0E8h+s]
.text:000000000000264A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000264E                 setnz   r12b
.text:0000000000002652
.text:0000000000002652 loc_2652:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002652                 test    r12b, r12b
.text:0000000000002655                 jz      loc_2CB0
.text:000000000000265B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002660                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002665                 lea     r9, [rdi+rbp]
.text:0000000000002669                 setnz   al
.text:000000000000266C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002670                 mov     r10d, eax
.text:0000000000002673                 jz      loc_2720
.text:0000000000002679                 mov     rax, [rsp+0E8h+n]
.text:000000000000267E                 test    rax, rax
.text:0000000000002681                 jz      loc_2AB0
.text:0000000000002687                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000268B                 lea     rbx, [rbp+rax+0]
.text:0000000000002690                 jnz     short loc_26C0
.text:0000000000002692                 cmp     rax, 1
.text:0000000000002696                 jbe     short loc_26C0
.text:0000000000002698                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000269D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000026A2                 mov     [rsp+0E8h+ps], r9
.text:00000000000026A7                 call    _strlen
.text:00000000000026AC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000026B2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000026B8                 mov     r11, rax
.text:00000000000026BB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000026C0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000026C0                 cmp     rbx, r11
.text:00000000000026C3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000026C8                 ja      loc_2C80
.text:00000000000026CE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000026D3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000026D8                 mov     rdi, r9         ; s1
.text:00000000000026DB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000026E0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000026E5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000026EA                 call    _memcmp
.text:00000000000026EF                 test    eax, eax
.text:00000000000026F1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000026F6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000026FC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002701                 jnz     loc_2C80
.text:0000000000002707                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000270C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002712                 jnz     loc_3695
.text:0000000000002718                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002720                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002720                 movzx   ebx, byte ptr [r9]
.text:0000000000002724                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002727                 ja      def_273E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000272D                 lea     rcx, jpt_273E
.text:0000000000002734                 movzx   edx, bl
.text:0000000000002737                 movsxd  rax, ds:(jpt_273E - 576Ch)[rcx+rdx*4]
.text:000000000000273B                 add     rax, rcx
.text:000000000000273E                 jmp     rax             ; switch jump
.text:0000000000002740 ; ---------------------------------------------------------------------------
.text:0000000000002740
.text:0000000000002740 loc_2740:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002740                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002740                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002743
.text:0000000000002743 loc_2743:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002743                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002743                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002747                 setnz   al
.text:000000000000274A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000274E                 jnz     short loc_275C
.text:0000000000002750                 mov     rax, [rsp+0E8h+s]
.text:0000000000002755                 cmp     byte ptr [rax+1], 0
.text:0000000000002759                 setnz   al
.text:000000000000275C
.text:000000000000275C loc_275C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000275C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002761                 setz    dl
.text:0000000000002764                 test    al, al
.text:0000000000002766                 jz      loc_29B8
.text:000000000000276C
.text:000000000000276C loc_276C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000276C                 xor     r12d, r12d
.text:000000000000276F                 xor     eax, eax
.text:0000000000002771                 nop     dword ptr [rax+00000000h]
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002778                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002778                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000277D                 jnz     loc_2892
.text:0000000000002783                 test    dl, dl
.text:0000000000002785                 jnz     loc_2892
.text:000000000000278B
.text:000000000000278B loc_278B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000278B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002790                 test    rsi, rsi
.text:0000000000002793                 jz      short loc_27A9
.text:0000000000002795                 mov     edx, ebx
.text:0000000000002797                 shr     dl, 5
.text:000000000000279A                 movzx   edx, dl
.text:000000000000279D                 mov     edx, [rsi+rdx*4]
.text:00000000000027A0                 bt      edx, ebx
.text:00000000000027A3                 jb      loc_28F3
.text:00000000000027A9
.text:00000000000027A9 loc_27A9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000027A9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000027A9                 test    r10b, r10b
.text:00000000000027AC                 jnz     loc_28F3
.text:00000000000027B2                 xor     eax, 1
.text:00000000000027B5                 add     rbp, 1
.text:00000000000027B9                 and     eax, r8d
.text:00000000000027BC
.text:00000000000027BC loc_27BC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000027BC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000027BC                 test    al, al
.text:00000000000027BE                 jz      short loc_27E0
.text:00000000000027C0                 cmp     r13, r15
.text:00000000000027C3                 jbe     short loc_27CA
.text:00000000000027C5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000027CA
.text:00000000000027CA loc_27CA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000027CA                 lea     rax, [r15+1]
.text:00000000000027CE                 cmp     r13, rax
.text:00000000000027D1                 jbe     short loc_27D9
.text:00000000000027D3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000027D9
.text:00000000000027D9 loc_27D9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000027D9                 add     r15, 2
.text:00000000000027DD                 xor     r8d, r8d
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000027E0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000027E0                 cmp     r15, r13
.text:00000000000027E3                 jnb     short loc_27E9
.text:00000000000027E5                 mov     [r14+r15], bl
.text:00000000000027E9
.text:00000000000027E9 loc_27E9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000027E9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000027EE                 add     r15, 1
.text:00000000000027F2                 mov     eax, 0
.text:00000000000027F7                 test    r12b, r12b
.text:00000000000027FA                 cmovz   edi, eax
.text:00000000000027FD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002802                 jmp     loc_2638
.text:0000000000002802 ; ---------------------------------------------------------------------------
.text:0000000000002807                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002810                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002810                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002813
.text:0000000000002813 loc_2813:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002813                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002813                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002817                 cmp     eax, 2
.text:000000000000281A                 jz      loc_2DD8
.text:0000000000002820                 cmp     eax, 5
.text:0000000000002823                 jz      loc_2D98
.text:0000000000002829                 cmp     eax, 2
.text:000000000000282C                 mov     ebx, 3Fh ; '?'
.text:0000000000002831                 setz    dl
.text:0000000000002834                 xor     r12d, r12d
.text:0000000000002837                 xor     eax, eax
.text:0000000000002839                 jmp     loc_2778
.text:0000000000002839 ; ---------------------------------------------------------------------------
.text:000000000000283E                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002840                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002840                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002843
.text:0000000000002843 loc_2843:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002843                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002843                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002848                 jz      loc_2D50
.text:000000000000284E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002853                 xor     edx, edx
.text:0000000000002855                 xor     eax, eax
.text:0000000000002857                 mov     ebx, 27h ; '''
.text:000000000000285C                 jmp     loc_2778
.text:000000000000285C ; ---------------------------------------------------------------------------
.text:0000000000002861                 align 8
.text:0000000000002868
.text:0000000000002868 loc_2868:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002868                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002868                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000286D                 mov     ebx, 74h ; 't'
.text:0000000000002872
.text:0000000000002872 loc_2872:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002872                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002872                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002877                 setz    al
.text:000000000000287A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000287E                 jnz     loc_29CE
.text:0000000000002884
.text:0000000000002884 loc_2884:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002884                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002884                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002889                 jnz     short loc_28F0
.text:000000000000288B
.text:000000000000288B loc_288B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000288B                 mov     ebx, edx
.text:000000000000288D                 xor     r12d, r12d
.text:0000000000002890                 xor     eax, eax
.text:0000000000002892
.text:0000000000002892 loc_2892:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002892                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002892                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002897                 jnz     loc_278B
.text:000000000000289D                 jmp     loc_27A9
.text:000000000000289D ; ---------------------------------------------------------------------------
.text:00000000000028A2                 align 8
.text:00000000000028A8
.text:00000000000028A8 loc_28A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000028A8                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000028A8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000028AD                 mov     ebx, 62h ; 'b'
.text:00000000000028B2                 jmp     short loc_2884
.text:00000000000028B2 ; ---------------------------------------------------------------------------
.text:00000000000028B4                 align 8
.text:00000000000028B8
.text:00000000000028B8 loc_28B8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000028B8                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000028B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000028BD                 jz      loc_2C90
.text:00000000000028C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028C8                 jz      loc_2AE0
.text:00000000000028CE
.text:00000000000028CE loc_28CE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000028CE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000028D3                 jz      loc_2AE0
.text:00000000000028D9                 cmp     [rsp+0E8h+n], 0
.text:00000000000028DF                 jnz     loc_2C9B
.text:00000000000028E5                 mov     ebx, 5Ch ; '\'
.text:00000000000028EA                 nop     word ptr [rax+rax+00h]
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000028F0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000028F0                 xor     r12d, r12d
.text:00000000000028F3
.text:00000000000028F3 loc_28F3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000028F3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000028F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028F8                 setz    dl
.text:00000000000028FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002900                 mov     eax, edx
.text:0000000000002902                 jnz     loc_3158
.text:0000000000002908                 mov     eax, r8d
.text:000000000000290B                 xor     eax, 1
.text:000000000000290E                 and     al, dl
.text:0000000000002910                 jz      short loc_2941
.text:0000000000002912                 cmp     r13, r15
.text:0000000000002915                 jbe     short loc_291C
.text:0000000000002917                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000291C
.text:000000000000291C loc_291C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000291C                 lea     rdx, [r15+1]
.text:0000000000002920                 cmp     r13, rdx
.text:0000000000002923                 jbe     short loc_292B
.text:0000000000002925                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000292B
.text:000000000000292B loc_292B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000292B                 lea     rdx, [r15+2]
.text:000000000000292F                 cmp     r13, rdx
.text:0000000000002932                 jbe     short loc_293A
.text:0000000000002934                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000293A
.text:000000000000293A loc_293A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000293A                 add     r15, 3
.text:000000000000293E                 mov     r8d, eax
.text:0000000000002941
.text:0000000000002941 loc_2941:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002941                 cmp     r13, r15
.text:0000000000002944                 jbe     short loc_294B
.text:0000000000002946                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000294B
.text:000000000000294B loc_294B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000294B                 add     r15, 1
.text:000000000000294F                 add     rbp, 1
.text:0000000000002953                 jmp     loc_27E0
.text:0000000000002953 ; ---------------------------------------------------------------------------
.text:0000000000002958                 align 20h
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002960                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002960                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002965                 jnz     loc_2B33
.text:000000000000296B                 xor     edx, edx
.text:000000000000296D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002972                 jz      loc_288B
.text:0000000000002978                 add     rbp, 1
.text:000000000000297C                 jmp     loc_2638
.text:000000000000297C ; ---------------------------------------------------------------------------
.text:0000000000002981                 align 8
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002988                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002988                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000298D                 setz    dl
.text:0000000000002990                 xor     eax, eax
.text:0000000000002992                 jmp     loc_2778
.text:0000000000002992 ; ---------------------------------------------------------------------------
.text:0000000000002997                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029A0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029A0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000029A5                 mov     ebx, 61h ; 'a'
.text:00000000000029AA                 jmp     loc_2884
.text:00000000000029AA ; ---------------------------------------------------------------------------
.text:00000000000029AF                 align 10h
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029B0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000029B5                 setz    dl
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000029B8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000029B8                 test    rbp, rbp
.text:00000000000029BB                 jnz     loc_276C
.text:00000000000029C1
.text:00000000000029C1 loc_29C1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000029C1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000029C1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000029C6                 and     al, dl
.text:00000000000029C8                 jz      loc_2778
.text:00000000000029CE
.text:00000000000029CE loc_29CE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000029CE                 mov     rbp, r11
.text:00000000000029D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000029D9                 jmp     loc_30D9
.text:00000000000029D9 ; ---------------------------------------------------------------------------
.text:00000000000029DE                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029E0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000029E5                 setz    dl
.text:00000000000029E8                 xor     r12d, r12d
.text:00000000000029EB                 jmp     short loc_29C1
.text:00000000000029EB ; ---------------------------------------------------------------------------
.text:00000000000029ED                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000029F0                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:00000000000029F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000029F5                 mov     ebx, 20h ; ' '
.text:00000000000029FA                 setz    dl
.text:00000000000029FD                 jmp     short loc_29C1
.text:00000000000029FD ; ---------------------------------------------------------------------------
.text:00000000000029FF                 align 20h
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A00                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A00                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002A05                 mov     ebx, 72h ; 'r'
.text:0000000000002A0A                 jmp     loc_2872
.text:0000000000002A0A ; ---------------------------------------------------------------------------
.text:0000000000002A0F                 align 10h
.text:0000000000002A10
.text:0000000000002A10 loc_2A10:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A10                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A10                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002A15                 mov     ebx, 66h ; 'f'
.text:0000000000002A1A                 jmp     loc_2884
.text:0000000000002A1A ; ---------------------------------------------------------------------------
.text:0000000000002A1F                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A20                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A20                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002A25                 mov     ebx, 76h ; 'v'
.text:0000000000002A2A                 jmp     loc_2884
.text:0000000000002A2A ; ---------------------------------------------------------------------------
.text:0000000000002A2F                 align 10h
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002A30                                         ; DATA XREF: .rodata:jpt_273E↓o
.text:0000000000002A30                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002A35                 mov     ebx, 6Eh ; 'n'
.text:0000000000002A3A                 jmp     loc_2872
.text:0000000000002A3A ; ---------------------------------------------------------------------------
.text:0000000000002A3F                 align 20h
.text:0000000000002A40
.text:0000000000002A40 def_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002A40                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002A40                                         ; DATA XREF: ...
.text:0000000000002A40                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002A43                 nop     dword ptr [rax+rax+00h]
.text:0000000000002A48
.text:0000000000002A48 def_273E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002A48                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002A48                                         ; DATA XREF: ...
.text:0000000000002A48                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002A4E                 jnz     loc_2DF8
.text:0000000000002A54                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002A59                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000002A5E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002A63                 call    ___ctype_b_loc
.text:0000000000002A68                 mov     rcx, [rax]
.text:0000000000002A6B                 movzx   edx, bl
.text:0000000000002A6E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002A74                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002A7A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000002A7F                 mov     edi, 1
.text:0000000000002A84                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002A88                 and     ax, 4000h
.text:0000000000002A8C                 setnz   r12b
.text:0000000000002A90                 setz    al
.text:0000000000002A93                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002A97
.text:0000000000002A97 loc_2A97:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002A97                 test    al, al
.text:0000000000002A99                 jnz     loc_3431
.text:0000000000002A9F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AA4                 setz    dl
.text:0000000000002AA7                 jmp     loc_2778
.text:0000000000002AA7 ; ---------------------------------------------------------------------------
.text:0000000000002AAC                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002AB0                 movzx   ebx, byte ptr [r9]
.text:0000000000002AB4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002AB7                 ja      short def_2ACA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002AB9                 lea     rcx, jpt_2ACA
.text:0000000000002AC0                 movzx   edx, bl
.text:0000000000002AC3                 movsxd  rax, ds:(jpt_2ACA - 5968h)[rcx+rdx*4]
.text:0000000000002AC7                 add     rax, rcx
.text:0000000000002ACA                 jmp     rax             ; switch jump
.text:0000000000002ACA ; ---------------------------------------------------------------------------
.text:0000000000002ACC                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002AD0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002AD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002AD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002AD8                 jnz     loc_28CE
.text:0000000000002ADE                 xchg    ax, ax
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002AE0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002AE0                 mov     edx, 5Ch ; '\'
.text:0000000000002AE5                 mov     ebx, 5Ch ; '\'
.text:0000000000002AEA                 jmp     loc_2884
.text:0000000000002AEA ; ---------------------------------------------------------------------------
.text:0000000000002AEF                 align 10h
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002AF0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002AF0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002AF5                 xor     r10d, r10d
.text:0000000000002AF8                 mov     ebx, 66h ; 'f'
.text:0000000000002AFD                 jmp     loc_2884
.text:0000000000002AFD ; ---------------------------------------------------------------------------
.text:0000000000002B02                 align 8
.text:0000000000002B08
.text:0000000000002B08 loc_2B08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B08                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B08                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000002B0D                 xor     r10d, r10d
.text:0000000000002B10                 mov     ebx, 6Eh ; 'n'
.text:0000000000002B15                 jmp     loc_2872
.text:0000000000002B15 ; ---------------------------------------------------------------------------
.text:0000000000002B1A                 align 20h
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B20                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B20                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002B25                 jmp     loc_28F0
.text:0000000000002B25 ; ---------------------------------------------------------------------------
.text:0000000000002B2A                 align 10h
.text:0000000000002B30
.text:0000000000002B30 loc_2B30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002B30                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002B30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002B33
.text:0000000000002B33 loc_2B33:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002B33                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B38                 setz    dl
.text:0000000000002B3B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B40                 jnz     loc_36DA
.text:0000000000002B46                 mov     eax, r8d
.text:0000000000002B49                 mov     rcx, r15
.text:0000000000002B4C                 xor     eax, 1
.text:0000000000002B4F                 and     al, dl
.text:0000000000002B51                 jz      short loc_2B80
.text:0000000000002B53                 cmp     r13, r15
.text:0000000000002B56                 jbe     short loc_2B5D
.text:0000000000002B58                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B5D
.text:0000000000002B5D loc_2B5D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000002B5D                 lea     rcx, [r15+1]
.text:0000000000002B61                 cmp     r13, rcx
.text:0000000000002B64                 jbe     short loc_2B6C
.text:0000000000002B66                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002B6C
.text:0000000000002B6C loc_2B6C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000002B6C                 lea     rcx, [r15+2]
.text:0000000000002B70                 cmp     r13, rcx
.text:0000000000002B73                 ja      loc_31A9
.text:0000000000002B79
.text:0000000000002B79 loc_2B79:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002B79                 lea     rcx, [r15+3]
.text:0000000000002B7D                 mov     r8d, eax
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002B80                 cmp     r13, rcx
.text:0000000000002B83                 jbe     short loc_2B8A
.text:0000000000002B85                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000002B8A
.text:0000000000002B8A loc_2B8A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000002B8A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B8F                 lea     r15, [rcx+1]
.text:0000000000002B93                 jz      loc_3199
.text:0000000000002B99                 lea     rax, [rbp+1]
.text:0000000000002B9D                 cmp     rax, r11
.text:0000000000002BA0                 jnb     short loc_2BBB
.text:0000000000002BA2                 mov     rax, [rsp+0E8h+s]
.text:0000000000002BA7                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000002BAC                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002BB0                 sub     eax, 30h ; '0'
.text:0000000000002BB3                 cmp     al, 9
.text:0000000000002BB5                 jbe     loc_33E9
.text:0000000000002BBB
.text:0000000000002BBB loc_2BBB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000002BBB                 mov     eax, r12d
.text:0000000000002BBE                 mov     ebx, 30h ; '0'
.text:0000000000002BC3                 xor     r12d, r12d
.text:0000000000002BC6                 jmp     loc_2778
.text:0000000000002BC6 ; ---------------------------------------------------------------------------
.text:0000000000002BCB                 align 10h
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002BD0                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002BD0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002BD5                 mov     r12d, r10d
.text:0000000000002BD8                 setz    dl
.text:0000000000002BDB                 xor     r10d, r10d
.text:0000000000002BDE                 xor     eax, eax
.text:0000000000002BE0                 jmp     loc_2778
.text:0000000000002BE0 ; ---------------------------------------------------------------------------
.text:0000000000002BE5                 align 8
.text:0000000000002BE8
.text:0000000000002BE8 loc_2BE8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002BE8                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002BE8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002BED                 setz    dl
.text:0000000000002BF0                 xor     r10d, r10d
.text:0000000000002BF3                 jmp     loc_29B8
.text:0000000000002BF3 ; ---------------------------------------------------------------------------
.text:0000000000002BF8                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C00                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C00                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002C05                 setz    dl
.text:0000000000002C08                 xor     r10d, r10d
.text:0000000000002C0B                 xor     r12d, r12d
.text:0000000000002C0E                 jmp     loc_29C1
.text:0000000000002C0E ; ---------------------------------------------------------------------------
.text:0000000000002C13                 align 8
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C18                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C18                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002C1D                 mov     r12d, r10d
.text:0000000000002C20                 mov     ebx, 20h ; ' '
.text:0000000000002C25                 setz    dl
.text:0000000000002C28                 xor     r10d, r10d
.text:0000000000002C2B                 jmp     loc_29C1
.text:0000000000002C30 ; ---------------------------------------------------------------------------
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C30                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C30                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002C35                 xor     r10d, r10d
.text:0000000000002C38                 mov     ebx, 72h ; 'r'
.text:0000000000002C3D                 jmp     loc_2872
.text:0000000000002C3D ; ---------------------------------------------------------------------------
.text:0000000000002C42                 align 8
.text:0000000000002C48
.text:0000000000002C48 loc_2C48:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C48                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C48                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002C4D                 jmp     loc_28F0
.text:0000000000002C4D ; ---------------------------------------------------------------------------
.text:0000000000002C52                 align 8
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C58                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C58                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002C5D                 xor     r10d, r10d
.text:0000000000002C60                 mov     ebx, 74h ; 't'
.text:0000000000002C65                 jmp     loc_2872
.text:0000000000002C65 ; ---------------------------------------------------------------------------
.text:0000000000002C6A                 align 10h
.text:0000000000002C70
.text:0000000000002C70 loc_2C70:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002C70                                         ; DATA XREF: .rodata:jpt_2ACA↓o
.text:0000000000002C70                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002C75                 jmp     loc_28F0
.text:0000000000002C75 ; ---------------------------------------------------------------------------
.text:0000000000002C7A                 align 20h
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002C80                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002C80                 xor     r10d, r10d
.text:0000000000002C83                 jmp     loc_2720
.text:0000000000002C83 ; ---------------------------------------------------------------------------
.text:0000000000002C88                 align 10h
.text:0000000000002C90
.text:0000000000002C90 loc_2C90:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002C90                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002C95                 jnz     loc_3600
.text:0000000000002C9B
.text:0000000000002C9B loc_2C9B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002C9B                 add     rbp, 1
.text:0000000000002C9F                 mov     eax, r8d
.text:0000000000002CA2                 xor     r12d, r12d
.text:0000000000002CA5                 mov     ebx, 5Ch ; '\'
.text:0000000000002CAA                 jmp     loc_27BC
.text:0000000000002CAA ; ---------------------------------------------------------------------------
.text:0000000000002CAF                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002CB0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CB5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002CBA                 mov     r12d, r8d
.text:0000000000002CBD                 mov     rbp, r11
.text:0000000000002CC0                 setz    dl
.text:0000000000002CC3                 mov     eax, ebx
.text:0000000000002CC5                 test    r15, r15
.text:0000000000002CC8                 setz    cl
.text:0000000000002CCB                 and     eax, edx
.text:0000000000002CCD                 and     al, cl
.text:0000000000002CCF                 jnz     loc_3736
.text:0000000000002CD5                 mov     eax, ebx
.text:0000000000002CD7                 xor     eax, 1
.text:0000000000002CDA                 and     dl, al
.text:0000000000002CDC                 jz      loc_364C
.text:0000000000002CE2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002CE7                 jz      loc_364A
.text:0000000000002CED                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002CF2                 jnz     loc_36ED
.text:0000000000002CF8                 test    r13, r13
.text:0000000000002CFB                 setz    al
.text:0000000000002CFE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002D04                 setnz   dl
.text:0000000000002D07                 and     al, dl
.text:0000000000002D09                 jz      loc_372C
.text:0000000000002D0F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D14
.text:0000000000002D14 loc_2D14:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002D14                 lea     rbx, asc_56D5   ; "'"
.text:0000000000002D1B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002D1F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D27                 mov     r15d, 1
.text:0000000000002D2D                 mov     [rsp+0E8h+n], 1
.text:0000000000002D36                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D3B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002D40                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002D44                 jmp     loc_2623
.text:0000000000002D44 ; ---------------------------------------------------------------------------
.text:0000000000002D49                 align 10h
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002D50                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002D55                 jnz     loc_3600
.text:0000000000002D5B                 test    r13, r13
.text:0000000000002D5E                 jz      loc_3160
.text:0000000000002D64                 xor     edx, edx
.text:0000000000002D66                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002D6C                 jnz     loc_3160
.text:0000000000002D72
.text:0000000000002D72 loc_2D72:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002D72                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002D72                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002D77                 add     r15, 3
.text:0000000000002D7B                 xor     eax, eax
.text:0000000000002D7D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002D82                 xor     r8d, r8d
.text:0000000000002D85                 mov     r13, rdx
.text:0000000000002D88                 mov     ebx, 27h ; '''
.text:0000000000002D8D                 jmp     loc_27A9
.text:0000000000002D8D ; ---------------------------------------------------------------------------
.text:0000000000002D92                 align 8
.text:0000000000002D98
.text:0000000000002D98 loc_2D98:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002D98                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002D9D                 jz      short loc_2DC0
.text:0000000000002D9F                 lea     rcx, [rbp+2]
.text:0000000000002DA3                 cmp     rcx, r11
.text:0000000000002DA6                 jnb     short loc_2DC0
.text:0000000000002DA8                 mov     rax, [rsp+0E8h+s]
.text:0000000000002DAD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002DB2                 jz      loc_3542
.text:0000000000002DB8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002DC0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002DC0                 xor     edx, edx
.text:0000000000002DC2                 xor     r12d, r12d
.text:0000000000002DC5                 xor     eax, eax
.text:0000000000002DC7                 mov     ebx, 3Fh ; '?'
.text:0000000000002DCC                 jmp     loc_2778
.text:0000000000002DCC ; ---------------------------------------------------------------------------
.text:0000000000002DD1                 align 8
.text:0000000000002DD8
.text:0000000000002DD8 loc_2DD8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002DD8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002DDD                 jnz     loc_3600
.text:0000000000002DE3                 xor     r12d, r12d
.text:0000000000002DE6                 xor     eax, eax
.text:0000000000002DE8                 mov     ebx, 3Fh ; '?'
.text:0000000000002DED                 jmp     loc_27A9
.text:0000000000002DED ; ---------------------------------------------------------------------------
.text:0000000000002DF2                 align 8
.text:0000000000002DF8
.text:0000000000002DF8 loc_2DF8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002DF8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002E00                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E04                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002E10                 mov     [rsp+0E8h+ps], rax
.text:0000000000002E15                 jnz     short loc_2E44
.text:0000000000002E17                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002E1C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002E21                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002E26                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002E2B                 call    _strlen
.text:0000000000002E30                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002E36                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002E3C                 mov     r11, rax
.text:0000000000002E3F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002E44
.text:0000000000002E44 loc_2E44:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002E44                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002E4C                 xor     ecx, ecx
.text:0000000000002E4E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002E52                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002E57                 mov     rbx, rcx
.text:0000000000002E5A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002E62                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002E67                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002E6C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002E74                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002E79                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002E7E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002E83
.text:0000000000002E83 loc_2E83:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002E83                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E88                 lea     r14, [rbp+rbx+0]
.text:0000000000002E8D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002E92                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002E97                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002E9C                 lea     r13, [rax+r14]
.text:0000000000002EA0                 sub     rdx, r14
.text:0000000000002EA3                 mov     rsi, r13
.text:0000000000002EA6                 call    rpl_mbrtowc
.text:0000000000002EAB                 test    rax, rax
.text:0000000000002EAE                 mov     r15, rax
.text:0000000000002EB1                 jz      short loc_2F01
.text:0000000000002EB3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002EB7                 jz      loc_34D5
.text:0000000000002EBD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002EC1                 jz      loc_3461
.text:0000000000002EC7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002ECC                 setz    al
.text:0000000000002ECF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002ED3                 jnz     loc_3070
.text:0000000000002ED9
.text:0000000000002ED9 loc_2ED9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002ED9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002ED9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002EE0                 call    _iswprint
.text:0000000000002EE5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002EEA                 test    eax, eax
.text:0000000000002EEC                 mov     eax, 0
.text:0000000000002EF1                 cmovz   r12d, eax
.text:0000000000002EF5                 add     rbx, r15
.text:0000000000002EF8                 call    _mbsinit
.text:0000000000002EFD                 test    eax, eax
.text:0000000000002EFF                 jz      short loc_2E83
.text:0000000000002F01
.text:0000000000002F01 loc_2F01:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002F01                 mov     edx, r12d
.text:0000000000002F04                 mov     rdi, rbx
.text:0000000000002F07                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002F0D                 xor     edx, 1
.text:0000000000002F10                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F15                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002F1B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002F1F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002F27                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002F2C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002F31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F36
.text:0000000000002F36 loc_2F36:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002F36                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002F36                 cmp     rdi, 1
.text:0000000000002F3A                 jbe     loc_353B
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002F40                 mov     rcx, rdi
.text:0000000000002F43                 xor     esi, esi
.text:0000000000002F45                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002F4B                 add     rcx, rbp
.text:0000000000002F4E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002F53                 jmp     loc_300E
.text:0000000000002F53 ; ---------------------------------------------------------------------------
.text:0000000000002F58                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002F60                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F65                 setz    al
.text:0000000000002F68                 test    r9b, r9b
.text:0000000000002F6B                 jnz     loc_3420
.text:0000000000002F71                 mov     esi, r8d
.text:0000000000002F74                 xor     esi, 1
.text:0000000000002F77                 and     al, sil
.text:0000000000002F7A                 jz      short loc_2FAB
.text:0000000000002F7C                 cmp     r13, r15
.text:0000000000002F7F                 jbe     short loc_2F86
.text:0000000000002F81                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002F86
.text:0000000000002F86 loc_2F86:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002F86                 lea     rsi, [r15+1]
.text:0000000000002F8A                 cmp     r13, rsi
.text:0000000000002F8D                 jbe     short loc_2F95
.text:0000000000002F8F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002F95
.text:0000000000002F95 loc_2F95:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002F95                 lea     rsi, [r15+2]
.text:0000000000002F99                 cmp     r13, rsi
.text:0000000000002F9C                 jbe     short loc_2FA4
.text:0000000000002F9E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002FA4
.text:0000000000002FA4 loc_2FA4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002FA4                 add     r15, 3
.text:0000000000002FA8                 mov     r8d, eax
.text:0000000000002FAB
.text:0000000000002FAB loc_2FAB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002FAB                 cmp     r13, r15
.text:0000000000002FAE                 jbe     short loc_2FB5
.text:0000000000002FB0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002FB5
.text:0000000000002FB5 loc_2FB5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002FB5                 lea     rax, [r15+1]
.text:0000000000002FB9                 cmp     r13, rax
.text:0000000000002FBC                 jbe     short loc_2FCB
.text:0000000000002FBE                 mov     eax, ebx
.text:0000000000002FC0                 shr     al, 6
.text:0000000000002FC3                 add     eax, 30h ; '0'
.text:0000000000002FC6                 mov     [r14+r15+1], al
.text:0000000000002FCB
.text:0000000000002FCB loc_2FCB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002FCB                 lea     rax, [r15+2]
.text:0000000000002FCF                 cmp     r13, rax
.text:0000000000002FD2                 jbe     short loc_2FE4
.text:0000000000002FD4                 mov     eax, ebx
.text:0000000000002FD6                 shr     al, 3
.text:0000000000002FD9                 and     eax, 7
.text:0000000000002FDC                 add     eax, 30h ; '0'
.text:0000000000002FDF                 mov     [r14+r15+2], al
.text:0000000000002FE4
.text:0000000000002FE4 loc_2FE4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002FE4                 and     ebx, 7
.text:0000000000002FE7                 add     rbp, 1
.text:0000000000002FEB                 add     r15, 3
.text:0000000000002FEF                 add     ebx, 30h ; '0'
.text:0000000000002FF2                 cmp     rbp, rcx
.text:0000000000002FF5                 jnb     loc_27E0
.text:0000000000002FFB                 mov     esi, edx
.text:0000000000002FFD
.text:0000000000002FFD loc_2FFD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002FFD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002FFD                 cmp     r13, r15
.text:0000000000003000                 jbe     short loc_3006
.text:0000000000003002                 mov     [r14+r15], bl
.text:0000000000003006
.text:0000000000003006 loc_3006:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003006                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000300A                 add     r15, 1
.text:000000000000300E
.text:000000000000300E loc_300E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000300E                 test    dl, dl
.text:0000000000003010                 jnz     loc_2F60
.text:0000000000003016                 mov     eax, esi
.text:0000000000003018                 xor     eax, 1
.text:000000000000301B                 and     eax, r8d
.text:000000000000301E                 test    r10b, r10b
.text:0000000000003021                 jz      short loc_3031
.text:0000000000003023                 cmp     r13, r15
.text:0000000000003026                 jbe     short loc_302D
.text:0000000000003028                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000302D                 add     r15, 1
.text:0000000000003031
.text:0000000000003031 loc_3031:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003031                 add     rbp, 1
.text:0000000000003035                 cmp     rbp, rcx
.text:0000000000003038                 jnb     loc_27BC
.text:000000000000303E                 test    al, al
.text:0000000000003040                 jz      loc_343E
.text:0000000000003046                 cmp     r13, r15
.text:0000000000003049                 jbe     short loc_3050
.text:000000000000304B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003050                 lea     rax, [r15+1]
.text:0000000000003054                 cmp     r13, rax
.text:0000000000003057                 jbe     short loc_305F
.text:0000000000003059                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000305F
.text:000000000000305F loc_305F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000305F                 add     r15, 2
.text:0000000000003063                 xor     r10d, r10d
.text:0000000000003066                 xor     r8d, r8d
.text:0000000000003069                 jmp     short loc_2FFD
.text:0000000000003069 ; ---------------------------------------------------------------------------
.text:000000000000306B                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003070                 cmp     r15, 1
.text:0000000000003074                 jz      loc_2ED9
.text:000000000000307A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000307F                 lea     rcx, [rdi+r15]
.text:0000000000003083                 lea     rdx, [rdi+r14+1]
.text:0000000000003088                 lea     r8, [rcx+r14]
.text:000000000000308C                 jmp     short loc_309D
.text:000000000000308C ; ---------------------------------------------------------------------------
.text:000000000000308E                 align 10h
.text:0000000000003090
.text:0000000000003090 loc_3090:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003090                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003090                 add     rdx, 1
.text:0000000000003094                 cmp     r8, rdx
.text:0000000000003097                 jz      loc_2ED9
.text:000000000000309D
.text:000000000000309D loc_309D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000309D                 movzx   ecx, byte ptr [rdx]
.text:00000000000030A0                 sub     ecx, 5Bh ; '['
.text:00000000000030A3                 cmp     cl, 21h ; '!'
.text:00000000000030A6                 ja      short loc_3090
.text:00000000000030A8                 mov     esi, 1
.text:00000000000030AD                 shl     rsi, cl
.text:00000000000030B0                 mov     rcx, rsi
.text:00000000000030B3                 mov     rsi, 20000002Bh
.text:00000000000030BD                 test    rcx, rsi
.text:00000000000030C0                 jz      short loc_3090
.text:00000000000030C2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030C7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030CC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000030D1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030D9
.text:00000000000030D9 loc_30D9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000030D9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000030D9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000030DE                 jz      short loc_30F0
.text:00000000000030E0                 test    al, al
.text:00000000000030E2                 mov     eax, 4
.text:00000000000030E7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000030EC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000030F0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000030F0                 sub     rsp, 8
.text:00000000000030F4                 mov     rcx, rbp
.text:00000000000030F7                 mov     rsi, r13
.text:00000000000030FA                 push    [rsp+0F0h+var_88]
.text:00000000000030FE                 push    [rsp+0F8h+var_80]
.text:0000000000003102                 mov     rdi, r14
.text:0000000000003105                 push    0
.text:0000000000003107                 mov     r9d, [rsp+108h+var_70]
.text:000000000000310F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003114                 mov     rdx, [rsp+108h+s]
.text:0000000000003119                 and     r9d, 0FFFFFFFDh
.text:000000000000311D                 call    quotearg_buffer_restyled
.text:0000000000003122                 add     rsp, 20h
.text:0000000000003126                 mov     r15, rax
.text:0000000000003129
.text:0000000000003129 loc_3129:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003129                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003129                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003131                 xor     rbx, fs:28h
.text:000000000000313A                 mov     rax, r15
.text:000000000000313D                 jnz     loc_3743
.text:0000000000003143                 add     rsp, 0B8h
.text:000000000000314A                 pop     rbx
.text:000000000000314B                 pop     rbp
.text:000000000000314C                 pop     r12
.text:000000000000314E                 pop     r13
.text:0000000000003150                 pop     r14
.text:0000000000003152                 pop     r15
.text:0000000000003154                 retn
.text:0000000000003154 ; ---------------------------------------------------------------------------
.text:0000000000003155                 align 8
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003158                 mov     rbp, r11
.text:000000000000315B                 jmp     loc_30D9
.text:0000000000003160 ; ---------------------------------------------------------------------------
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003160                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003160                 cmp     r13, r15
.text:0000000000003163                 jbe     short loc_316A
.text:0000000000003165                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000316A
.text:000000000000316A loc_316A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000316A                 lea     rax, [r15+1]
.text:000000000000316E                 cmp     r13, rax
.text:0000000000003171                 jbe     short loc_3179
.text:0000000000003173                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003179
.text:0000000000003179 loc_3179:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003179                 lea     rax, [r15+2]
.text:000000000000317D                 cmp     r13, rax
.text:0000000000003180                 jbe     loc_3772
.text:0000000000003186                 mov     rdx, r13
.text:0000000000003189                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000318F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003194                 jmp     loc_2D72
.text:0000000000003199 ; ---------------------------------------------------------------------------
.text:0000000000003199
.text:0000000000003199 loc_3199:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003199                 mov     eax, r12d
.text:000000000000319C                 mov     ebx, 30h ; '0'
.text:00000000000031A1                 xor     r12d, r12d
.text:00000000000031A4                 jmp     loc_27A9
.text:00000000000031A9 ; ---------------------------------------------------------------------------
.text:00000000000031A9
.text:00000000000031A9 loc_31A9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000031A9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000031AF                 jmp     loc_2B79
.text:00000000000031B4 ; ---------------------------------------------------------------------------
.text:00000000000031B4
.text:00000000000031B4 loc_31B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031B4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000031B4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000031B6                 jnz     loc_25E3        ; jumptable 00000000000121F1 case 1
.text:00000000000031BC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031C1
.text:00000000000031C1 loc_31C1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000031C1                 test    r13, r13
.text:00000000000031C4                 jnz     loc_375A
.text:00000000000031CA                 lea     rax, asc_56D5   ; "'"
.text:00000000000031D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031DA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031DF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031E4                 xor     r12d, r12d
.text:00000000000031E7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000031EC                 mov     [rsp+0E8h+n], 1
.text:00000000000031F5                 mov     [rsp+0E8h+s2], rax
.text:00000000000031FA                 mov     r15d, 1
.text:0000000000003200                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003208                 jmp     loc_2623
.text:0000000000003208 ; ---------------------------------------------------------------------------
.text:000000000000320D                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003210                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:0000000000003210                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003212                 jnz     loc_360D
.text:0000000000003218                 test    r13, r13
.text:000000000000321B                 jz      loc_3446
.text:0000000000003221                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003225                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000322A                 xor     r12d, r12d
.text:000000000000322D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003232                 mov     [rsp+0E8h+var_98], 0
.text:000000000000323B
.text:000000000000323B loc_323B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000323B                 lea     rax, unk_56D3
.text:0000000000003242                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003247                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000324C                 mov     [rsp+0E8h+n], 1
.text:0000000000003255                 mov     r15d, 1
.text:000000000000325B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003260                 jmp     loc_2623
.text:0000000000003265 ; ---------------------------------------------------------------------------
.text:0000000000003265
.text:0000000000003265 loc_3265:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003265                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:0000000000003265                 lea     rax, unk_56D3   ; jumptable 00000000000121F1 case 6
.text:000000000000326C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003271                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003276                 xor     r12d, r12d
.text:0000000000003279                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003282                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003287                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000328C                 mov     [rsp+0E8h+n], 1
.text:0000000000003295                 xor     r15d, r15d
.text:0000000000003298                 mov     [rsp+0E8h+s2], rax
.text:000000000000329D                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000032A5                 jmp     loc_2623
.text:00000000000032AA ; ---------------------------------------------------------------------------
.text:00000000000032AA
.text:00000000000032AA loc_32AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000032AA                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000032AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000032AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000032B4                 xor     r12d, r12d
.text:00000000000032B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000032C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000032C5                 xor     r15d, r15d
.text:00000000000032C8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000032CD                 mov     [rsp+0E8h+n], 0
.text:00000000000032D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000032DF                 jmp     loc_2623
.text:00000000000032E4 ; ---------------------------------------------------------------------------
.text:00000000000032E4
.text:00000000000032E4 loc_32E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000032E4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000032E4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000032E9                 jz      short loc_3341
.text:00000000000032EB                 lea     rsi, asc_56D7   ; "`"
.text:00000000000032F2                 xor     edi, edi        ; domainname
.text:00000000000032F4                 mov     edx, 5          ; category
.text:00000000000032F9                 call    _dcgettext
.text:00000000000032FE                 mov     rcx, rax
.text:0000000000003301                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003306                 lea     rax, asc_56D7   ; "`"
.text:000000000000330D                 cmp     rcx, rax
.text:0000000000003310                 jz      loc_36AE
.text:0000000000003316
.text:0000000000003316 loc_3316:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003316                 lea     rsi, asc_56D5   ; "'"
.text:000000000000331D                 xor     edi, edi        ; domainname
.text:000000000000331F                 mov     edx, 5          ; category
.text:0000000000003324                 call    _dcgettext
.text:0000000000003329                 mov     rcx, rax
.text:000000000000332C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003331                 lea     rax, asc_56D5   ; "'"
.text:0000000000003338                 cmp     rcx, rax
.text:000000000000333B                 jz      loc_36C4
.text:0000000000003341
.text:0000000000003341 loc_3341:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003341                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003341                 xor     r15d, r15d
.text:0000000000003344                 test    ebx, ebx
.text:0000000000003346                 jz      loc_350D
.text:000000000000334C
.text:000000000000334C loc_334C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000334C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000334C                 test    ebx, ebx
.text:000000000000334E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003353                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003358                 xor     r12d, r12d
.text:000000000000335B                 mov     rdi, rbx        ; s
.text:000000000000335E                 call    _strlen
.text:0000000000003363                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003368                 mov     [rsp+0E8h+n], rax
.text:000000000000336D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003372                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003377                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003380                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003385                 jmp     loc_2623
.text:000000000000338A ; ---------------------------------------------------------------------------
.text:000000000000338A
.text:000000000000338A loc_338A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000338A                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:000000000000338A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000338F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003394                 xor     r12d, r12d
.text:0000000000003397                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033A0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000033A5                 xor     r15d, r15d
.text:00000000000033A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033AD                 mov     [rsp+0E8h+n], 0
.text:00000000000033B6                 mov     [rsp+0E8h+s2], 0
.text:00000000000033BF                 jmp     loc_2623
.text:00000000000033C4 ; ---------------------------------------------------------------------------
.text:00000000000033C4
.text:00000000000033C4 loc_33C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033C4                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000033C4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000033C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033CE                 xor     r12d, r12d
.text:00000000000033D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000033E4                 jmp     loc_2603
.text:00000000000033E9 ; ---------------------------------------------------------------------------
.text:00000000000033E9
.text:00000000000033E9 loc_33E9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000033E9                 cmp     r13, r15
.text:00000000000033EC                 jbe     short loc_33F3
.text:00000000000033EE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000033F3
.text:00000000000033F3 loc_33F3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000033F3                 lea     rax, [rcx+2]
.text:00000000000033F7                 cmp     r13, rax
.text:00000000000033FA                 jbe     short loc_3402
.text:00000000000033FC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003402
.text:0000000000003402 loc_3402:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003402                 mov     eax, r12d
.text:0000000000003405                 lea     r15, [rcx+3]
.text:0000000000003409                 xor     r12d, r12d
.text:000000000000340C                 mov     ebx, 30h ; '0'
.text:0000000000003411                 jmp     loc_2778
.text:0000000000003411 ; ---------------------------------------------------------------------------
.text:0000000000003416                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003420                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003425                 mov     rbp, r11
.text:0000000000003428                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000342C                 jmp     loc_30D9
.text:0000000000003431 ; ---------------------------------------------------------------------------
.text:0000000000003431
.text:0000000000003431 loc_3431:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003431                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003436                 xor     r12d, r12d
.text:0000000000003439                 jmp     loc_2F40
.text:000000000000343E ; ---------------------------------------------------------------------------
.text:000000000000343E
.text:000000000000343E loc_343E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000343E                 xor     r10d, r10d
.text:0000000000003441                 jmp     loc_2FFD
.text:0000000000003446 ; ---------------------------------------------------------------------------
.text:0000000000003446
.text:0000000000003446 loc_3446:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003446                 mov     [rsp+0E8h+var_98], 0
.text:000000000000344F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003454                 xor     r12d, r12d
.text:0000000000003457                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000345C                 jmp     loc_323B
.text:0000000000003461 ; ---------------------------------------------------------------------------
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003461                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003466                 mov     rsi, r14
.text:0000000000003469                 mov     rcx, r13
.text:000000000000346C                 mov     rax, rbx
.text:000000000000346F                 mov     rdi, rbx
.text:0000000000003472                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003478                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000347D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003485                 cmp     rsi, r11
.text:0000000000003488                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000348E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003496                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000349B                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000034A0                 jnb     short loc_34C8
.text:00000000000034A2                 cmp     byte ptr [rcx], 0
.text:00000000000034A5                 jnz     short loc_34B7
.text:00000000000034A7                 jmp     short loc_34C8
.text:00000000000034A7 ; ---------------------------------------------------------------------------
.text:00000000000034A9                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000034B0                 cmp     byte ptr [r9+rax], 0
.text:00000000000034B5                 jz      short loc_34C5
.text:00000000000034B7
.text:00000000000034B7 loc_34B7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000034B7                 add     rax, 1
.text:00000000000034BB                 lea     rdx, [rbp+rax+0]
.text:00000000000034C0                 cmp     r11, rdx
.text:00000000000034C3                 ja      short loc_34B0
.text:00000000000034C5
.text:00000000000034C5 loc_34C5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000034C5                 mov     rdi, rax
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000034C8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000034C8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000034CD                 xor     r12d, r12d
.text:00000000000034D0                 jmp     loc_2F36
.text:00000000000034D5 ; ---------------------------------------------------------------------------
.text:00000000000034D5
.text:00000000000034D5 loc_34D5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000034D5                 mov     rdi, rbx
.text:00000000000034D8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000034DE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000034E3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000034E9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000034F1                 xor     r12d, r12d
.text:00000000000034F4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000034F9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000034FE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003503                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003508                 jmp     loc_2F36
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:000000000000350D
.text:000000000000350D loc_350D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000350D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003512                 movzx   eax, byte ptr [rdx]
.text:0000000000003515                 test    al, al
.text:0000000000003517                 jz      loc_334C
.text:000000000000351D                 nop     dword ptr [rax]
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003520                 cmp     r13, r15
.text:0000000000003523                 jbe     short loc_3529
.text:0000000000003525                 mov     [r14+r15], al
.text:0000000000003529
.text:0000000000003529 loc_3529:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003529                 add     r15, 1
.text:000000000000352D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003532                 test    al, al
.text:0000000000003534                 jnz     short loc_3520
.text:0000000000003536                 jmp     loc_334C
.text:000000000000353B ; ---------------------------------------------------------------------------
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000353B                 mov     eax, edx
.text:000000000000353D                 jmp     loc_2A97
.text:0000000000003542 ; ---------------------------------------------------------------------------
.text:0000000000003542
.text:0000000000003542 loc_3542:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003542                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003546                 cmp     bl, 3Eh ; '>'
.text:0000000000003549                 ja      loc_2DC0
.text:000000000000354F                 mov     rax, 7000A38200000000h
.text:0000000000003559                 bt      rax, rbx
.text:000000000000355D                 jnb     loc_2DC0
.text:0000000000003563                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003568                 jnz     loc_3752
.text:000000000000356E                 cmp     r13, r15
.text:0000000000003571                 jbe     short loc_3578
.text:0000000000003573                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003578
.text:0000000000003578 loc_3578:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003578                 lea     rax, [r15+1]
.text:000000000000357C                 cmp     r13, rax
.text:000000000000357F                 jbe     short loc_3587
.text:0000000000003581                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003587
.text:0000000000003587 loc_3587:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003587                 lea     rax, [r15+2]
.text:000000000000358B                 cmp     r13, rax
.text:000000000000358E                 jbe     short loc_3596
.text:0000000000003590                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003596
.text:0000000000003596 loc_3596:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003596                 lea     rax, [r15+3]
.text:000000000000359A                 cmp     r13, rax
.text:000000000000359D                 jbe     short loc_35A5
.text:000000000000359F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000035A5
.text:00000000000035A5 loc_35A5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000035A5                 add     r15, 4
.text:00000000000035A9                 xor     edx, edx
.text:00000000000035AB                 xor     r12d, r12d
.text:00000000000035AE                 xor     eax, eax
.text:00000000000035B0                 mov     rbp, rcx
.text:00000000000035B3                 jmp     loc_2778
.text:00000000000035B8 ; ---------------------------------------------------------------------------
.text:00000000000035B8
.text:00000000000035B8 loc_35B8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000035B8                                         ; DATA XREF: .rodata:jpt_25E1↓o
.text:00000000000035B8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000035BA                 jz      loc_3748
.text:00000000000035C0                 lea     rax, asc_56D5   ; "'"
.text:00000000000035C7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000035CC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000035D1                 xor     r12d, r12d
.text:00000000000035D4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000035DD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000035E2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000035E7                 mov     [rsp+0E8h+n], 1
.text:00000000000035F0                 xor     r15d, r15d
.text:00000000000035F3                 mov     [rsp+0E8h+s2], rax
.text:00000000000035F8                 jmp     loc_2623
.text:00000000000035F8 ; ---------------------------------------------------------------------------
.text:00000000000035FD                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003600                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003600                 mov     rbp, r11
.text:0000000000003603                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003608                 jmp     loc_30D9
.text:000000000000360D ; ---------------------------------------------------------------------------
.text:000000000000360D
.text:000000000000360D loc_360D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000360D                 lea     rax, unk_56D3
.text:0000000000003614                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003619                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000361E                 xor     r12d, r12d
.text:0000000000003621                 mov     [rsp+0E8h+var_98], 0
.text:000000000000362A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000362F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003634                 mov     [rsp+0E8h+n], 1
.text:000000000000363D                 xor     r15d, r15d
.text:0000000000003640                 mov     [rsp+0E8h+s2], rax
.text:0000000000003645                 jmp     loc_2623
.text:000000000000364A ; ---------------------------------------------------------------------------
.text:000000000000364A
.text:000000000000364A loc_364A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000364A                 mov     eax, edx
.text:000000000000364C
.text:000000000000364C loc_364C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000364C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000364C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003651                 test    rbx, rbx
.text:0000000000003654                 jz      short loc_3682
.text:0000000000003656                 test    al, al
.text:0000000000003658                 jz      short loc_3682
.text:000000000000365A                 movzx   ecx, byte ptr [rbx]
.text:000000000000365D                 mov     rax, rbx
.text:0000000000003660                 test    cl, cl
.text:0000000000003662                 jz      short loc_3682
.text:0000000000003664                 mov     rdx, r15
.text:0000000000003667                 sub     rax, r15
.text:000000000000366A
.text:000000000000366A loc_366A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000366A                 cmp     r13, rdx
.text:000000000000366D                 jbe     short loc_3673
.text:000000000000366F                 mov     [r14+rdx], cl
.text:0000000000003673
.text:0000000000003673 loc_3673:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003673                 add     rdx, 1
.text:0000000000003677                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000367B                 test    cl, cl
.text:000000000000367D                 jnz     short loc_366A
.text:000000000000367F                 mov     r15, rdx
.text:0000000000003682
.text:0000000000003682 loc_3682:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003682                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003682                 cmp     r13, r15
.text:0000000000003685                 jbe     loc_3129
.text:000000000000368B                 mov     byte ptr [r14+r15], 0
.text:0000000000003690                 jmp     loc_3129
.text:0000000000003695 ; ---------------------------------------------------------------------------
.text:0000000000003695
.text:0000000000003695 loc_3695:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003695                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000369A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000369F                 mov     rbp, r11
.text:00000000000036A2                 setz    al
.text:00000000000036A5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000036A9                 jmp     loc_30D9
.text:00000000000036AE ; ---------------------------------------------------------------------------
.text:00000000000036AE
.text:00000000000036AE loc_36AE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000036AE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000036B2                 mov     rdi, rcx
.text:00000000000036B5                 call    gettext_quote
.text:00000000000036BA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000036BF                 jmp     loc_3316
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000036C4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000036C8                 mov     rdi, rcx
.text:00000000000036CB                 call    gettext_quote
.text:00000000000036D0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000036D5                 jmp     loc_3341
.text:00000000000036DA ; ---------------------------------------------------------------------------
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000036DA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000036DF                 mov     rbp, r11
.text:00000000000036E2                 mov     eax, edx
.text:00000000000036E4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000036E8                 jmp     loc_30D9
.text:00000000000036ED ; ---------------------------------------------------------------------------
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000036ED                 sub     rsp, 8
.text:00000000000036F1                 mov     r8d, 5
.text:00000000000036F7                 mov     rcx, r11
.text:00000000000036FA                 push    [rsp+0F0h+var_88]
.text:00000000000036FE                 push    [rsp+0F8h+var_80]
.text:0000000000003702                 mov     rdi, r14
.text:0000000000003705                 push    [rsp+100h+var_C8]
.text:0000000000003709                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003711                 mov     rdx, [rsp+108h+s]
.text:0000000000003716                 mov     rsi, [rsp+108h+var_98]
.text:000000000000371B                 call    quotearg_buffer_restyled
.text:0000000000003720                 add     rsp, 20h
.text:0000000000003724                 mov     r15, rax
.text:0000000000003727                 jmp     loc_3129
.text:000000000000372C ; ---------------------------------------------------------------------------
.text:000000000000372C
.text:000000000000372C loc_372C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000372C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003731                 jmp     loc_364C
.text:0000000000003736 ; ---------------------------------------------------------------------------
.text:0000000000003736
.text:0000000000003736 loc_3736:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003736                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000373E                 jmp     loc_30D9
.text:0000000000003743 ; ---------------------------------------------------------------------------
.text:0000000000003743
.text:0000000000003743 loc_3743:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003743                 call    ___stack_chk_fail
.text:0000000000003748 ; ---------------------------------------------------------------------------
.text:0000000000003748
.text:0000000000003748 loc_3748:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003748                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000374D                 jmp     loc_31C1
.text:0000000000003752 ; ---------------------------------------------------------------------------
.text:0000000000003752
.text:0000000000003752 loc_3752:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003752                 mov     rbp, r11
.text:0000000000003755                 jmp     loc_30F0
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375A
.text:000000000000375A loc_375A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000375A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000375F                 xor     eax, eax
.text:0000000000003761                 xor     r12d, r12d
.text:0000000000003764                 mov     [rsp+0E8h+var_98], 0
.text:000000000000376D                 jmp     loc_2D14
.text:0000000000003772 ; ---------------------------------------------------------------------------
.text:0000000000003772
.text:0000000000003772 loc_3772:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003772                 mov     rdx, r13
.text:0000000000003775                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000377A                 jmp     loc_2D72
.text:000000000000377F ; ---------------------------------------------------------------------------
.text:000000000000377F
.text:000000000000377F def_25E1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000377F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000377F ; } // starts at 2550
.text:000000000000377F quotearg_buffer_restyled endp
.text:000000000000377F
.text:000000000000377F ; ---------------------------------------------------------------------------
.text:0000000000003784                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790
.text:0000000000003790 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003790                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003790
.text:0000000000003790 var_50          = qword ptr -50h
.text:0000000000003790 var_48          = qword ptr -48h
.text:0000000000003790 var_40          = dword ptr -40h
.text:0000000000003790 var_3C          = dword ptr -3Ch
.text:0000000000003790
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 push    r15
.text:0000000000003792                 push    r14
.text:0000000000003794                 movsxd  r15, edi
.text:0000000000003797                 push    r13
.text:0000000000003799                 push    r12
.text:000000000000379B                 mov     r14, rdx
.text:000000000000379E                 push    rbp
.text:000000000000379F                 push    rbx
.text:00000000000037A0                 mov     rbp, rcx
.text:00000000000037A3                 sub     rsp, 28h
.text:00000000000037A7                 mov     [rsp+58h+var_50], rsi
.text:00000000000037AC                 call    ___errno_location
.text:00000000000037B1                 mov     r13, rax
.text:00000000000037B4                 mov     eax, [rax]
.text:00000000000037B6                 test    r15d, r15d
.text:00000000000037B9                 mov     rbx, cs:slotvec
.text:00000000000037C0                 mov     [rsp+58h+var_40], eax
.text:00000000000037C4                 js      loc_3931
.text:00000000000037CA                 cmp     cs:nslots, r15d
.text:00000000000037D1                 jg      short loc_3835
.text:00000000000037D3                 cmp     r15d, 7FFFFFFFh
.text:00000000000037DA                 jz      loc_3936
.text:00000000000037E0                 lea     r12d, [r15+1]
.text:00000000000037E4                 lea     rax, slotvec0
.text:00000000000037EB                 movsxd  rsi, r12d
.text:00000000000037EE                 shl     rsi, 4
.text:00000000000037F2                 cmp     rbx, rax
.text:00000000000037F5                 jz      loc_3910
.text:00000000000037FB                 mov     rdi, rbx
.text:00000000000037FE                 call    xrealloc
.text:0000000000003803                 mov     rbx, rax
.text:0000000000003806                 mov     cs:slotvec, rax
.text:000000000000380D
.text:000000000000380D loc_380D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000380D                 movsxd  rdi, cs:nslots
.text:0000000000003814                 mov     edx, r12d
.text:0000000000003817                 xor     esi, esi        ; c
.text:0000000000003819                 sub     edx, edi
.text:000000000000381B                 shl     rdi, 4
.text:000000000000381F                 movsxd  rdx, edx
.text:0000000000003822                 add     rdi, rbx        ; s
.text:0000000000003825                 shl     rdx, 4          ; n
.text:0000000000003829                 call    _memset
.text:000000000000382E                 mov     cs:nslots, r12d
.text:0000000000003835
.text:0000000000003835 loc_3835:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003835                 mov     eax, [rbp+4]
.text:0000000000003838                 shl     r15, 4
.text:000000000000383C                 sub     rsp, 8
.text:0000000000003840                 add     rbx, r15
.text:0000000000003843                 lea     r15, [rbp+8]
.text:0000000000003847                 mov     r8d, [rbp+0]
.text:000000000000384B                 mov     r11, [rbx]
.text:000000000000384E                 mov     r12, [rbx+8]
.text:0000000000003852                 mov     rcx, r14
.text:0000000000003855                 or      eax, 1
.text:0000000000003858                 mov     [rsp+60h+var_3C], eax
.text:000000000000385C                 push    qword ptr [rbp+30h]
.text:000000000000385F                 mov     r9d, eax
.text:0000000000003862                 push    qword ptr [rbp+28h]
.text:0000000000003865                 push    r15
.text:0000000000003867                 mov     rsi, r11
.text:000000000000386A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000386F                 mov     rdi, r12
.text:0000000000003872                 mov     [rsp+78h+var_48], r11
.text:0000000000003877                 call    quotearg_buffer_restyled
.text:000000000000387C                 add     rsp, 20h
.text:0000000000003880                 mov     r11, [rsp+58h+var_48]
.text:0000000000003885                 cmp     r11, rax
.text:0000000000003888                 ja      short loc_38F1
.text:000000000000388A                 lea     rsi, [rax+1]
.text:000000000000388E                 lea     rax, slot0
.text:0000000000003895                 cmp     r12, rax
.text:0000000000003898                 mov     [rbx], rsi
.text:000000000000389B                 jz      short loc_38AF
.text:000000000000389D                 mov     rdi, r12        ; ptr
.text:00000000000038A0                 mov     [rsp+58h+var_48], rsi
.text:00000000000038A5                 call    _free
.text:00000000000038AA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000038AF
.text:00000000000038AF loc_38AF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000038AF                 mov     rdi, rsi
.text:00000000000038B2                 mov     [rsp+58h+var_48], rsi
.text:00000000000038B7                 call    xmalloc
.text:00000000000038BC                 sub     rsp, 8
.text:00000000000038C0                 mov     [rbx+8], rax
.text:00000000000038C4                 mov     r8d, [rbp+0]
.text:00000000000038C8                 push    qword ptr [rbp+30h]
.text:00000000000038CB                 push    qword ptr [rbp+28h]
.text:00000000000038CE                 mov     rcx, r14
.text:00000000000038D1                 push    r15
.text:00000000000038D3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000038D8                 mov     rdi, rax
.text:00000000000038DB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000038E0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000038E5                 mov     r12, rax
.text:00000000000038E8                 call    quotearg_buffer_restyled
.text:00000000000038ED                 add     rsp, 20h
.text:00000000000038F1
.text:00000000000038F1 loc_38F1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000038F1                 mov     eax, [rsp+58h+var_40]
.text:00000000000038F5                 mov     [r13+0], eax
.text:00000000000038F9                 add     rsp, 28h
.text:00000000000038FD                 mov     rax, r12
.text:0000000000003900                 pop     rbx
.text:0000000000003901                 pop     rbp
.text:0000000000003902                 pop     r12
.text:0000000000003904                 pop     r13
.text:0000000000003906                 pop     r14
.text:0000000000003908                 pop     r15
.text:000000000000390A                 retn
.text:000000000000390A ; ---------------------------------------------------------------------------
.text:000000000000390B                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003910                 xor     edi, edi
.text:0000000000003912                 call    xrealloc
.text:0000000000003917                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000391F                 mov     rbx, rax
.text:0000000000003922                 mov     cs:slotvec, rax
.text:0000000000003929                 movups  xmmword ptr [rax], xmm0
.text:000000000000392C                 jmp     loc_380D
.text:0000000000003931 ; ---------------------------------------------------------------------------
.text:0000000000003931
.text:0000000000003931 loc_3931:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003931                 call    _abort
.text:0000000000003936 ; ---------------------------------------------------------------------------
.text:0000000000003936
.text:0000000000003936 loc_3936:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003936                 call    xalloc_die
.text:0000000000003936 ; } // starts at 3790
.text:0000000000003936 quotearg_n_options endp
.text:0000000000003936
.text:0000000000003936 ; ---------------------------------------------------------------------------
.text:000000000000393B                 align 20h
.text:0000000000003940
.text:0000000000003940 ; =============== S U B R O U T I N E =======================================
.text:0000000000003940
.text:0000000000003940 ; Attributes: info_from_lumina
.text:0000000000003940
.text:0000000000003940 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003940                 public clone_quoting_options
.text:0000000000003940 clone_quoting_options proc near
.text:0000000000003940 ; __unwind {
.text:0000000000003940                 push    r12
.text:0000000000003942                 push    rbp
.text:0000000000003943                 push    rbx
.text:0000000000003944                 mov     rbx, rdi
.text:0000000000003947                 call    ___errno_location
.text:000000000000394C                 mov     r12d, [rax]
.text:000000000000394F                 mov     rbp, rax
.text:0000000000003952                 lea     rax, default_quoting_options
.text:0000000000003959                 test    rbx, rbx
.text:000000000000395C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003961                 cmovz   rbx, rax
.text:0000000000003965                 mov     rdi, rbx        ; src
.text:0000000000003968                 call    xmemdup
.text:000000000000396D                 mov     [rbp+0], r12d
.text:0000000000003971                 pop     rbx
.text:0000000000003972                 pop     rbp
.text:0000000000003973                 pop     r12
.text:0000000000003975                 retn
.text:0000000000003975 ; } // starts at 3940
.text:0000000000003975 clone_quoting_options endp
.text:0000000000003975
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:0000000000003976                 align 20h
.text:0000000000003980
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980
.text:0000000000003980
.text:0000000000003980                 public get_quoting_style
.text:0000000000003980 get_quoting_style proc near
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 lea     rax, default_quoting_options
.text:0000000000003987                 test    rdi, rdi
.text:000000000000398A                 cmovz   rdi, rax
.text:000000000000398E                 mov     eax, [rdi]
.text:0000000000003990                 retn
.text:0000000000003990 ; } // starts at 3980
.text:0000000000003990 get_quoting_style endp
.text:0000000000003990
.text:0000000000003990 ; ---------------------------------------------------------------------------
.text:0000000000003991                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public set_quoting_style
.text:00000000000039A0 set_quoting_style proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 lea     rax, default_quoting_options
.text:00000000000039A7                 test    rdi, rdi
.text:00000000000039AA                 cmovz   rdi, rax
.text:00000000000039AE                 mov     [rdi], esi
.text:00000000000039B0                 retn
.text:00000000000039B0 ; } // starts at 39A0
.text:00000000000039B0 set_quoting_style endp
.text:00000000000039B0
.text:00000000000039B0 ; ---------------------------------------------------------------------------
.text:00000000000039B1                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0 ; Attributes: info_from_lumina
.text:00000000000039C0
.text:00000000000039C0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000039C0                 public set_char_quoting
.text:00000000000039C0 set_char_quoting proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 lea     rax, default_quoting_options
.text:00000000000039C7                 test    rdi, rdi
.text:00000000000039CA                 mov     ecx, esi
.text:00000000000039CC                 cmovz   rdi, rax
.text:00000000000039D0                 mov     eax, esi
.text:00000000000039D2                 and     ecx, 1Fh
.text:00000000000039D5                 shr     al, 5
.text:00000000000039D8                 movzx   eax, al
.text:00000000000039DB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000039E0                 mov     esi, [rdi]
.text:00000000000039E2                 mov     eax, esi
.text:00000000000039E4                 shr     eax, cl
.text:00000000000039E6                 xor     edx, eax
.text:00000000000039E8                 and     eax, 1
.text:00000000000039EB                 and     edx, 1
.text:00000000000039EE                 shl     edx, cl
.text:00000000000039F0                 xor     edx, esi
.text:00000000000039F2                 mov     [rdi], edx
.text:00000000000039F4                 retn
.text:00000000000039F4 ; } // starts at 39C0
.text:00000000000039F4 set_char_quoting endp
.text:00000000000039F4
.text:00000000000039F4 ; ---------------------------------------------------------------------------
.text:00000000000039F5                 align 20h
.text:0000000000003A00
.text:0000000000003A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A00
.text:0000000000003A00
.text:0000000000003A00                 public set_quoting_flags
.text:0000000000003A00 set_quoting_flags proc near
.text:0000000000003A00 ; __unwind {
.text:0000000000003A00                 lea     rax, default_quoting_options
.text:0000000000003A07                 test    rdi, rdi
.text:0000000000003A0A                 cmovz   rdi, rax
.text:0000000000003A0E                 mov     eax, [rdi+4]
.text:0000000000003A11                 mov     [rdi+4], esi
.text:0000000000003A14                 retn
.text:0000000000003A14 ; } // starts at 3A00
.text:0000000000003A14 set_quoting_flags endp
.text:0000000000003A14
.text:0000000000003A14 ; ---------------------------------------------------------------------------
.text:0000000000003A15                 align 20h
.text:0000000000003A20
.text:0000000000003A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A20
.text:0000000000003A20 ; Attributes: info_from_lumina
.text:0000000000003A20
.text:0000000000003A20 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003A20                 public set_custom_quoting
.text:0000000000003A20 set_custom_quoting proc near
.text:0000000000003A20 ; __unwind {
.text:0000000000003A20                 lea     rax, default_quoting_options
.text:0000000000003A27                 test    rdi, rdi
.text:0000000000003A2A                 cmovz   rdi, rax
.text:0000000000003A2E                 test    rsi, rsi
.text:0000000000003A31                 mov     dword ptr [rdi], 0Ah
.text:0000000000003A37                 jz      short loc_3A47
.text:0000000000003A39                 test    rdx, rdx
.text:0000000000003A3C                 jz      short loc_3A47
.text:0000000000003A3E                 mov     [rdi+28h], rsi
.text:0000000000003A42                 mov     [rdi+30h], rdx
.text:0000000000003A46                 retn
.text:0000000000003A47 ; ---------------------------------------------------------------------------
.text:0000000000003A47
.text:0000000000003A47 loc_3A47:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003A47                                         ; set_custom_quoting+1C↑j
.text:0000000000003A47                 sub     rsp, 8
.text:0000000000003A4B                 call    _abort
.text:0000000000003A4B ; } // starts at 3A20
.text:0000000000003A4B set_custom_quoting endp
.text:0000000000003A4B
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50 ; Attributes: info_from_lumina
.text:0000000000003A50
.text:0000000000003A50 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003A50                 public quotearg_buffer
.text:0000000000003A50 quotearg_buffer proc near
.text:0000000000003A50
.text:0000000000003A50 var_40          = qword ptr -40h
.text:0000000000003A50
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 push    r15
.text:0000000000003A52                 push    r14
.text:0000000000003A54                 lea     rax, default_quoting_options
.text:0000000000003A5B                 push    r13
.text:0000000000003A5D                 push    r12
.text:0000000000003A5F                 mov     r13, rdi
.text:0000000000003A62                 push    rbp
.text:0000000000003A63                 push    rbx
.text:0000000000003A64                 mov     rbx, r8
.text:0000000000003A67                 mov     r14, rsi
.text:0000000000003A6A                 mov     r15, rdx
.text:0000000000003A6D                 sub     rsp, 18h
.text:0000000000003A71                 test    r8, r8
.text:0000000000003A74                 cmovz   rbx, rax
.text:0000000000003A78                 mov     [rsp+48h+var_40], rcx
.text:0000000000003A7D                 call    ___errno_location
.text:0000000000003A82                 mov     r12d, [rax]
.text:0000000000003A85                 mov     rbp, rax
.text:0000000000003A88                 lea     rax, [rbx+8]
.text:0000000000003A8C                 sub     rsp, 8
.text:0000000000003A90                 mov     r9d, [rbx+4]
.text:0000000000003A94                 push    qword ptr [rbx+30h]
.text:0000000000003A97                 mov     r8d, [rbx]
.text:0000000000003A9A                 push    qword ptr [rbx+28h]
.text:0000000000003A9D                 mov     rdx, r15
.text:0000000000003AA0                 push    rax
.text:0000000000003AA1                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003AA6                 mov     rsi, r14
.text:0000000000003AA9                 mov     rdi, r13
.text:0000000000003AAC                 call    quotearg_buffer_restyled
.text:0000000000003AB1                 mov     [rbp+0], r12d
.text:0000000000003AB5                 add     rsp, 38h
.text:0000000000003AB9                 pop     rbx
.text:0000000000003ABA                 pop     rbp
.text:0000000000003ABB                 pop     r12
.text:0000000000003ABD                 pop     r13
.text:0000000000003ABF                 pop     r14
.text:0000000000003AC1                 pop     r15
.text:0000000000003AC3                 retn
.text:0000000000003AC3 ; } // starts at 3A50
.text:0000000000003AC3 quotearg_buffer endp
.text:0000000000003AC3
.text:0000000000003AC3 ; ---------------------------------------------------------------------------
.text:0000000000003AC4                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0 ; Attributes: info_from_lumina
.text:0000000000003AD0
.text:0000000000003AD0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003AD0                 public quotearg_alloc_mem
.text:0000000000003AD0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003AD0
.text:0000000000003AD0 var_5C          = dword ptr -5Ch
.text:0000000000003AD0 var_58          = qword ptr -58h
.text:0000000000003AD0 var_50          = qword ptr -50h
.text:0000000000003AD0 var_48          = qword ptr -48h
.text:0000000000003AD0 var_40          = qword ptr -40h
.text:0000000000003AD0
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 push    r15
.text:0000000000003AD2                 push    r14
.text:0000000000003AD4                 lea     rax, default_quoting_options
.text:0000000000003ADB                 push    r13
.text:0000000000003ADD                 push    r12
.text:0000000000003ADF                 mov     r12, rdx
.text:0000000000003AE2                 push    rbp
.text:0000000000003AE3                 push    rbx
.text:0000000000003AE4                 mov     rbx, rcx
.text:0000000000003AE7                 mov     r14, rdi
.text:0000000000003AEA                 mov     r15, rsi
.text:0000000000003AED                 sub     rsp, 38h
.text:0000000000003AF1                 test    rcx, rcx
.text:0000000000003AF4                 cmovz   rbx, rax
.text:0000000000003AF8                 xor     ebp, ebp
.text:0000000000003AFA                 call    ___errno_location
.text:0000000000003AFF                 test    r12, r12
.text:0000000000003B02                 mov     r13, rax
.text:0000000000003B05                 mov     eax, [rax]
.text:0000000000003B07                 setz    bpl
.text:0000000000003B0B                 or      ebp, [rbx+4]
.text:0000000000003B0E                 lea     r10, [rbx+8]
.text:0000000000003B12                 sub     rsp, 8
.text:0000000000003B16                 mov     r8d, [rbx]
.text:0000000000003B19                 mov     rcx, r15
.text:0000000000003B1C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003B20                 push    qword ptr [rbx+30h]
.text:0000000000003B23                 mov     rdx, r14
.text:0000000000003B26                 push    qword ptr [rbx+28h]
.text:0000000000003B29                 push    r10
.text:0000000000003B2B                 xor     esi, esi
.text:0000000000003B2D                 mov     r9d, ebp
.text:0000000000003B30                 xor     edi, edi
.text:0000000000003B32                 mov     [rsp+88h+var_48], r10
.text:0000000000003B37                 call    quotearg_buffer_restyled
.text:0000000000003B3C                 lea     rsi, [rax+1]
.text:0000000000003B40                 mov     [rsp+88h+var_40], rax
.text:0000000000003B45                 add     rsp, 20h
.text:0000000000003B49                 mov     rdi, rsi
.text:0000000000003B4C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003B51                 call    xmalloc
.text:0000000000003B56                 mov     [rsp+68h+var_58], rax
.text:0000000000003B5B                 sub     rsp, 8
.text:0000000000003B5F                 push    qword ptr [rbx+30h]
.text:0000000000003B62                 push    qword ptr [rbx+28h]
.text:0000000000003B65                 mov     r10, [rsp+80h+var_48]
.text:0000000000003B6A                 mov     r9d, ebp
.text:0000000000003B6D                 mov     r8d, [rbx]
.text:0000000000003B70                 mov     rcx, r15
.text:0000000000003B73                 mov     rdx, r14
.text:0000000000003B76                 mov     rdi, rax
.text:0000000000003B79                 push    r10
.text:0000000000003B7B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003B80                 call    quotearg_buffer_restyled
.text:0000000000003B85                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003B89                 add     rsp, 20h
.text:0000000000003B8D                 test    r12, r12
.text:0000000000003B90                 mov     [r13+0], eax
.text:0000000000003B94                 jz      short loc_3B9F
.text:0000000000003B96                 mov     r11, [rsp+68h+var_40]
.text:0000000000003B9B                 mov     [r12], r11
.text:0000000000003B9F
.text:0000000000003B9F loc_3B9F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000003B9F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003BA4                 add     rsp, 38h
.text:0000000000003BA8                 pop     rbx
.text:0000000000003BA9                 pop     rbp
.text:0000000000003BAA                 pop     r12
.text:0000000000003BAC                 pop     r13
.text:0000000000003BAE                 pop     r14
.text:0000000000003BB0                 pop     r15
.text:0000000000003BB2                 retn
.text:0000000000003BB2 ; } // starts at 3AD0
.text:0000000000003BB2 quotearg_alloc_mem endp
.text:0000000000003BB2
.text:0000000000003BB2 ; ---------------------------------------------------------------------------
.text:0000000000003BB3                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0
.text:0000000000003BC0                 public quotearg_alloc
.text:0000000000003BC0 quotearg_alloc  proc near
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 mov     rcx, rdx
.text:0000000000003BC3                 xor     edx, edx
.text:0000000000003BC5                 jmp     quotearg_alloc_mem
.text:0000000000003BC5 ; } // starts at 3BC0
.text:0000000000003BC5 quotearg_alloc  endp
.text:0000000000003BC5
.text:0000000000003BC5 ; ---------------------------------------------------------------------------
.text:0000000000003BCA                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0 ; Attributes: info_from_lumina
.text:0000000000003BD0
.text:0000000000003BD0 ; void __cdecl quotearg_free()
.text:0000000000003BD0                 public quotearg_free
.text:0000000000003BD0 quotearg_free   proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 mov     eax, cs:nslots
.text:0000000000003BD6                 push    r12
.text:0000000000003BD8                 mov     r12, cs:slotvec
.text:0000000000003BDF                 push    rbp
.text:0000000000003BE0                 push    rbx
.text:0000000000003BE1                 cmp     eax, 1
.text:0000000000003BE4                 jle     short loc_3C11
.text:0000000000003BE6                 sub     eax, 2
.text:0000000000003BE9                 lea     rbx, [r12+18h]
.text:0000000000003BEE                 shl     rax, 4
.text:0000000000003BF2                 lea     rbp, [r12+rax+28h]
.text:0000000000003BF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003C00
.text:0000000000003C00 loc_3C00:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003C00                 mov     rdi, [rbx]      ; ptr
.text:0000000000003C03                 add     rbx, 10h
.text:0000000000003C07                 call    _free
.text:0000000000003C0C                 cmp     rbx, rbp
.text:0000000000003C0F                 jnz     short loc_3C00
.text:0000000000003C11
.text:0000000000003C11 loc_3C11:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003C11                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003C16                 lea     rbx, slot0
.text:0000000000003C1D                 cmp     rdi, rbx
.text:0000000000003C20                 jz      short loc_3C39
.text:0000000000003C22                 call    _free
.text:0000000000003C27                 mov     cs:slotvec0, 100h
.text:0000000000003C32                 mov     cs:off_208078, rbx
.text:0000000000003C39
.text:0000000000003C39 loc_3C39:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003C39                 lea     rbx, slotvec0
.text:0000000000003C40                 cmp     r12, rbx
.text:0000000000003C43                 jz      short loc_3C54
.text:0000000000003C45                 mov     rdi, r12        ; ptr
.text:0000000000003C48                 call    _free
.text:0000000000003C4D                 mov     cs:slotvec, rbx
.text:0000000000003C54
.text:0000000000003C54 loc_3C54:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003C54                 pop     rbx
.text:0000000000003C55                 mov     cs:nslots, 1
.text:0000000000003C5F                 pop     rbp
.text:0000000000003C60                 pop     r12
.text:0000000000003C62                 retn
.text:0000000000003C62 ; } // starts at 3BD0
.text:0000000000003C62 quotearg_free   endp
.text:0000000000003C62
.text:0000000000003C62 ; ---------------------------------------------------------------------------
.text:0000000000003C63                 align 10h
.text:0000000000003C70
.text:0000000000003C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C70
.text:0000000000003C70
.text:0000000000003C70                 public quotearg_n
.text:0000000000003C70 quotearg_n      proc near
.text:0000000000003C70 ; __unwind {
.text:0000000000003C70                 lea     rcx, default_quoting_options
.text:0000000000003C77                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C7E                 jmp     quotearg_n_options
.text:0000000000003C7E ; } // starts at 3C70
.text:0000000000003C7E quotearg_n      endp
.text:0000000000003C7E
.text:0000000000003C7E ; ---------------------------------------------------------------------------
.text:0000000000003C83                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public quotearg_n_mem
.text:0000000000003C90 quotearg_n_mem  proc near
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 lea     rcx, default_quoting_options
.text:0000000000003C97                 jmp     quotearg_n_options
.text:0000000000003C97 ; } // starts at 3C90
.text:0000000000003C97 quotearg_n_mem  endp
.text:0000000000003C97
.text:0000000000003C97 ; ---------------------------------------------------------------------------
.text:0000000000003C9C                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public quotearg
.text:0000000000003CA0 quotearg        proc near
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 lea     rcx, default_quoting_options
.text:0000000000003CA7                 mov     rsi, rdi
.text:0000000000003CAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CB1                 xor     edi, edi
.text:0000000000003CB3                 jmp     quotearg_n_options
.text:0000000000003CB3 ; } // starts at 3CA0
.text:0000000000003CB3 quotearg        endp
.text:0000000000003CB3
.text:0000000000003CB3 ; ---------------------------------------------------------------------------
.text:0000000000003CB8                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public quotearg_mem
.text:0000000000003CC0 quotearg_mem    proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 lea     rcx, default_quoting_options
.text:0000000000003CC7                 mov     rdx, rsi
.text:0000000000003CCA                 mov     rsi, rdi
.text:0000000000003CCD                 xor     edi, edi
.text:0000000000003CCF                 jmp     quotearg_n_options
.text:0000000000003CCF ; } // starts at 3CC0
.text:0000000000003CCF quotearg_mem    endp
.text:0000000000003CCF
.text:0000000000003CCF ; ---------------------------------------------------------------------------
.text:0000000000003CD4                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0 ; Attributes: info_from_lumina
.text:0000000000003CE0
.text:0000000000003CE0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003CE0                 public quotearg_n_style
.text:0000000000003CE0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003CE0
.text:0000000000003CE0 var_48          = dword ptr -48h
.text:0000000000003CE0 var_44          = qword ptr -44h
.text:0000000000003CE0 var_3C          = qword ptr -3Ch
.text:0000000000003CE0 var_34          = qword ptr -34h
.text:0000000000003CE0 var_2C          = qword ptr -2Ch
.text:0000000000003CE0 var_24          = qword ptr -24h
.text:0000000000003CE0 var_1C          = qword ptr -1Ch
.text:0000000000003CE0 var_14          = dword ptr -14h
.text:0000000000003CE0 var_10          = qword ptr -10h
.text:0000000000003CE0
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 sub     rsp, 48h
.text:0000000000003CE4                 mov     rax, rdx
.text:0000000000003CE7                 mov     rdx, fs:28h
.text:0000000000003CF0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003CF5                 xor     edx, edx
.text:0000000000003CF7                 cmp     esi, 0Ah
.text:0000000000003CFA                 jz      short loc_3D64
.text:0000000000003CFC                 mov     [rsp+48h+var_48], esi
.text:0000000000003CFF                 mov     rcx, rsp
.text:0000000000003D02                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D09                 mov     rsi, rax
.text:0000000000003D0C                 mov     [rsp+48h+var_44], 0
.text:0000000000003D15                 mov     [rsp+48h+var_3C], 0
.text:0000000000003D1E                 mov     [rsp+48h+var_34], 0
.text:0000000000003D27                 mov     [rsp+48h+var_2C], 0
.text:0000000000003D30                 mov     [rsp+48h+var_24], 0
.text:0000000000003D39                 mov     [rsp+48h+var_1C], 0
.text:0000000000003D42                 mov     [rsp+48h+var_14], 0
.text:0000000000003D4A                 call    quotearg_n_options
.text:0000000000003D4F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003D54                 xor     rcx, fs:28h
.text:0000000000003D5D                 jnz     short loc_3D69
.text:0000000000003D5F                 add     rsp, 48h
.text:0000000000003D63                 retn
.text:0000000000003D64 ; ---------------------------------------------------------------------------
.text:0000000000003D64
.text:0000000000003D64 loc_3D64:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003D64                 call    _abort
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D69
.text:0000000000003D69 loc_3D69:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003D69                 call    ___stack_chk_fail
.text:0000000000003D69 ; } // starts at 3CE0
.text:0000000000003D69 quotearg_n_style endp
.text:0000000000003D69
.text:0000000000003D69 ; ---------------------------------------------------------------------------
.text:0000000000003D6E                 align 10h
.text:0000000000003D70
.text:0000000000003D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D70
.text:0000000000003D70 ; Attributes: info_from_lumina
.text:0000000000003D70
.text:0000000000003D70 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003D70                 public quotearg_n_style_mem
.text:0000000000003D70 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003D70
.text:0000000000003D70 var_48          = dword ptr -48h
.text:0000000000003D70 var_44          = qword ptr -44h
.text:0000000000003D70 var_3C          = qword ptr -3Ch
.text:0000000000003D70 var_34          = qword ptr -34h
.text:0000000000003D70 var_2C          = qword ptr -2Ch
.text:0000000000003D70 var_24          = qword ptr -24h
.text:0000000000003D70 var_1C          = qword ptr -1Ch
.text:0000000000003D70 var_14          = dword ptr -14h
.text:0000000000003D70 var_10          = qword ptr -10h
.text:0000000000003D70
.text:0000000000003D70 ; __unwind {
.text:0000000000003D70                 sub     rsp, 48h
.text:0000000000003D74                 mov     rax, rdx
.text:0000000000003D77                 mov     rdx, rcx
.text:0000000000003D7A                 mov     rcx, fs:28h
.text:0000000000003D83                 mov     [rsp+48h+var_10], rcx
.text:0000000000003D88                 xor     ecx, ecx
.text:0000000000003D8A                 cmp     esi, 0Ah
.text:0000000000003D8D                 jz      short loc_3DF0
.text:0000000000003D8F                 mov     [rsp+48h+var_48], esi
.text:0000000000003D92                 mov     rcx, rsp
.text:0000000000003D95                 mov     rsi, rax
.text:0000000000003D98                 mov     [rsp+48h+var_44], 0
.text:0000000000003DA1                 mov     [rsp+48h+var_3C], 0
.text:0000000000003DAA                 mov     [rsp+48h+var_34], 0
.text:0000000000003DB3                 mov     [rsp+48h+var_2C], 0
.text:0000000000003DBC                 mov     [rsp+48h+var_24], 0
.text:0000000000003DC5                 mov     [rsp+48h+var_1C], 0
.text:0000000000003DCE                 mov     [rsp+48h+var_14], 0
.text:0000000000003DD6                 call    quotearg_n_options
.text:0000000000003DDB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003DE0                 xor     rdx, fs:28h
.text:0000000000003DE9                 jnz     short loc_3DF5
.text:0000000000003DEB                 add     rsp, 48h
.text:0000000000003DEF                 retn
.text:0000000000003DF0 ; ---------------------------------------------------------------------------
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003DF0                 call    _abort
.text:0000000000003DF5 ; ---------------------------------------------------------------------------
.text:0000000000003DF5
.text:0000000000003DF5 loc_3DF5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003DF5                 call    ___stack_chk_fail
.text:0000000000003DF5 ; } // starts at 3D70
.text:0000000000003DF5 quotearg_n_style_mem endp
.text:0000000000003DF5
.text:0000000000003DF5 ; ---------------------------------------------------------------------------
.text:0000000000003DFA                 align 20h
.text:0000000000003E00
.text:0000000000003E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E00
.text:0000000000003E00
.text:0000000000003E00                 public quotearg_style
.text:0000000000003E00 quotearg_style  proc near
.text:0000000000003E00 ; __unwind {
.text:0000000000003E00                 mov     rdx, rsi
.text:0000000000003E03                 mov     esi, edi
.text:0000000000003E05                 xor     edi, edi
.text:0000000000003E07                 jmp     quotearg_n_style
.text:0000000000003E07 ; } // starts at 3E00
.text:0000000000003E07 quotearg_style  endp
.text:0000000000003E07
.text:0000000000003E07 ; ---------------------------------------------------------------------------
.text:0000000000003E0C                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10
.text:0000000000003E10                 public quotearg_style_mem
.text:0000000000003E10 quotearg_style_mem proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 mov     rcx, rdx
.text:0000000000003E13                 mov     rdx, rsi
.text:0000000000003E16                 mov     esi, edi
.text:0000000000003E18                 xor     edi, edi
.text:0000000000003E1A                 jmp     quotearg_n_style_mem
.text:0000000000003E1A ; } // starts at 3E10
.text:0000000000003E1A quotearg_style_mem endp
.text:0000000000003E1A
.text:0000000000003E1A ; ---------------------------------------------------------------------------
.text:0000000000003E1F                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20 ; Attributes: info_from_lumina
.text:0000000000003E20
.text:0000000000003E20 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003E20                 public quotearg_char_mem
.text:0000000000003E20 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003E20                                         ; quotearg_colon+C↓j ...
.text:0000000000003E20
.text:0000000000003E20 var_48          = xmmword ptr -48h
.text:0000000000003E20 var_38          = xmmword ptr -38h
.text:0000000000003E20 var_28          = xmmword ptr -28h
.text:0000000000003E20 var_18          = qword ptr -18h
.text:0000000000003E20 var_10          = qword ptr -10h
.text:0000000000003E20
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 sub     rsp, 48h
.text:0000000000003E24                 mov     ecx, edx
.text:0000000000003E26                 mov     rax, fs:28h
.text:0000000000003E2F                 mov     [rsp+48h+var_10], rax
.text:0000000000003E34                 xor     eax, eax
.text:0000000000003E36                 mov     rax, cs:qword_208230
.text:0000000000003E3D                 mov     r8, rsp
.text:0000000000003E40                 and     ecx, 1Fh
.text:0000000000003E43                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003E4B                 mov     [rsp+48h+var_18], rax
.text:0000000000003E50                 mov     eax, edx
.text:0000000000003E52                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003E56                 shr     al, 5
.text:0000000000003E59                 movzx   eax, al
.text:0000000000003E5C                 lea     r9, [r8+rax*4+8]
.text:0000000000003E61                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000003E69                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003E6E                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000003E76                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003E7B                 mov     edx, [r9]
.text:0000000000003E7E                 mov     eax, edx
.text:0000000000003E80                 shr     eax, cl
.text:0000000000003E82                 not     eax
.text:0000000000003E84                 and     eax, 1
.text:0000000000003E87                 shl     eax, cl
.text:0000000000003E89                 mov     rcx, r8
.text:0000000000003E8C                 xor     eax, edx
.text:0000000000003E8E                 mov     rdx, rsi
.text:0000000000003E91                 mov     rsi, rdi
.text:0000000000003E94                 mov     [r9], eax
.text:0000000000003E97                 xor     edi, edi
.text:0000000000003E99                 call    quotearg_n_options
.text:0000000000003E9E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003EA3                 xor     rsi, fs:28h
.text:0000000000003EAC                 jnz     short loc_3EB3
.text:0000000000003EAE                 add     rsp, 48h
.text:0000000000003EB2                 retn
.text:0000000000003EB3 ; ---------------------------------------------------------------------------
.text:0000000000003EB3
.text:0000000000003EB3 loc_3EB3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003EB3                 call    ___stack_chk_fail
.text:0000000000003EB3 ; } // starts at 3E20
.text:0000000000003EB3 quotearg_char_mem endp
.text:0000000000003EB3
.text:0000000000003EB3 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0                 public quotearg_char
.text:0000000000003EC0 quotearg_char   proc near
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 movsx   edx, sil
.text:0000000000003EC4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ECB                 jmp     quotearg_char_mem
.text:0000000000003ECB ; } // starts at 3EC0
.text:0000000000003ECB quotearg_char   endp
.text:0000000000003ECB
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0
.text:0000000000003ED0                 public quotearg_colon
.text:0000000000003ED0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 mov     edx, 3Ah ; ':'
.text:0000000000003ED5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EDC                 jmp     quotearg_char_mem
.text:0000000000003EDC ; } // starts at 3ED0
.text:0000000000003EDC quotearg_colon  endp
.text:0000000000003EDC
.text:0000000000003EDC ; ---------------------------------------------------------------------------
.text:0000000000003EE1                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0
.text:0000000000003EF0                 public quotearg_colon_mem
.text:0000000000003EF0 quotearg_colon_mem proc near
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 mov     edx, 3Ah ; ':'
.text:0000000000003EF5                 jmp     quotearg_char_mem
.text:0000000000003EF5 ; } // starts at 3EF0
.text:0000000000003EF5 quotearg_colon_mem endp
.text:0000000000003EF5
.text:0000000000003EF5 ; ---------------------------------------------------------------------------
.text:0000000000003EFA                 align 20h
.text:0000000000003F00
.text:0000000000003F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F00
.text:0000000000003F00 ; Attributes: info_from_lumina
.text:0000000000003F00
.text:0000000000003F00 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003F00                 public quotearg_n_style_colon
.text:0000000000003F00 quotearg_n_style_colon proc near        ; CODE XREF: fold_file+2F5↑p
.text:0000000000003F00                                         ; fold_file+32F↑p
.text:0000000000003F00
.text:0000000000003F00 var_48          = dword ptr -48h
.text:0000000000003F00 var_44          = qword ptr -44h
.text:0000000000003F00 var_3C          = qword ptr -3Ch
.text:0000000000003F00 var_34          = qword ptr -34h
.text:0000000000003F00 var_2C          = qword ptr -2Ch
.text:0000000000003F00 var_24          = qword ptr -24h
.text:0000000000003F00 var_1C          = qword ptr -1Ch
.text:0000000000003F00 var_14          = dword ptr -14h
.text:0000000000003F00 var_10          = qword ptr -10h
.text:0000000000003F00
.text:0000000000003F00 ; __unwind {
.text:0000000000003F00                 sub     rsp, 48h
.text:0000000000003F04                 mov     rax, rdx
.text:0000000000003F07                 mov     rdx, fs:28h
.text:0000000000003F10                 mov     [rsp+48h+var_10], rdx
.text:0000000000003F15                 xor     edx, edx
.text:0000000000003F17                 cmp     esi, 0Ah
.text:0000000000003F1A                 jz      short loc_3F84
.text:0000000000003F1C                 mov     [rsp+48h+var_48], esi
.text:0000000000003F1F                 mov     rcx, rsp
.text:0000000000003F22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F29                 mov     rsi, rax
.text:0000000000003F2C                 mov     [rsp+48h+var_44], 0
.text:0000000000003F35                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003F3E                 mov     [rsp+48h+var_34], 0
.text:0000000000003F47                 mov     [rsp+48h+var_2C], 0
.text:0000000000003F50                 mov     [rsp+48h+var_24], 0
.text:0000000000003F59                 mov     [rsp+48h+var_1C], 0
.text:0000000000003F62                 mov     [rsp+48h+var_14], 0
.text:0000000000003F6A                 call    quotearg_n_options
.text:0000000000003F6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003F74                 xor     rcx, fs:28h
.text:0000000000003F7D                 jnz     short loc_3F89
.text:0000000000003F7F                 add     rsp, 48h
.text:0000000000003F83                 retn
.text:0000000000003F84 ; ---------------------------------------------------------------------------
.text:0000000000003F84
.text:0000000000003F84 loc_3F84:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003F84                 call    _abort
.text:0000000000003F89 ; ---------------------------------------------------------------------------
.text:0000000000003F89
.text:0000000000003F89 loc_3F89:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003F89                 call    ___stack_chk_fail
.text:0000000000003F89 ; } // starts at 3F00
.text:0000000000003F89 quotearg_n_style_colon endp
.text:0000000000003F89
.text:0000000000003F89 ; ---------------------------------------------------------------------------
.text:0000000000003F8E                 align 10h
.text:0000000000003F90
.text:0000000000003F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F90
.text:0000000000003F90 ; Attributes: info_from_lumina
.text:0000000000003F90
.text:0000000000003F90 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003F90                 public quotearg_n_custom_mem
.text:0000000000003F90 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003F90                                         ; quotearg_custom+12↓j ...
.text:0000000000003F90
.text:0000000000003F90 var_48          = xmmword ptr -48h
.text:0000000000003F90 var_38          = xmmword ptr -38h
.text:0000000000003F90 var_28          = xmmword ptr -28h
.text:0000000000003F90 var_18          = qword ptr -18h
.text:0000000000003F90 var_10          = qword ptr -10h
.text:0000000000003F90
.text:0000000000003F90 ; __unwind {
.text:0000000000003F90                 sub     rsp, 48h
.text:0000000000003F94                 mov     r9, rcx
.text:0000000000003F97                 mov     rcx, cs:qword_208230
.text:0000000000003F9E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003FA6                 mov     rax, fs:28h
.text:0000000000003FAF                 mov     [rsp+48h+var_10], rax
.text:0000000000003FB4                 xor     eax, eax
.text:0000000000003FB6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003FBA                 test    rsi, rsi
.text:0000000000003FBD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003FC2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003FC9                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000003FD1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003FD6                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000003FDE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003FE3                 jz      short loc_4017
.text:0000000000003FE5                 test    rdx, rdx
.text:0000000000003FE8                 jz      short loc_4017
.text:0000000000003FEA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003FEF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003FF4                 mov     rcx, rsp
.text:0000000000003FF7                 mov     rdx, r8
.text:0000000000003FFA                 mov     rsi, r9
.text:0000000000003FFD                 call    quotearg_n_options
.text:0000000000004002                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004007                 xor     rdi, fs:28h
.text:0000000000004010                 jnz     short loc_401C
.text:0000000000004012                 add     rsp, 48h
.text:0000000000004016                 retn
.text:0000000000004017 ; ---------------------------------------------------------------------------
.text:0000000000004017
.text:0000000000004017 loc_4017:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004017                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004017                 call    _abort
.text:000000000000401C ; ---------------------------------------------------------------------------
.text:000000000000401C
.text:000000000000401C loc_401C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000401C                 call    ___stack_chk_fail
.text:000000000000401C ; } // starts at 3F90
.text:000000000000401C quotearg_n_custom_mem endp
.text:000000000000401C
.text:000000000000401C ; ---------------------------------------------------------------------------
.text:0000000000004021                 align 10h
.text:0000000000004030
.text:0000000000004030 ; =============== S U B R O U T I N E =======================================
.text:0000000000004030
.text:0000000000004030
.text:0000000000004030                 public quotearg_n_custom
.text:0000000000004030 quotearg_n_custom proc near
.text:0000000000004030 ; __unwind {
.text:0000000000004030                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004037                 jmp     quotearg_n_custom_mem
.text:0000000000004037 ; } // starts at 4030
.text:0000000000004037 quotearg_n_custom endp
.text:0000000000004037
.text:0000000000004037 ; ---------------------------------------------------------------------------
.text:000000000000403C                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040
.text:0000000000004040                 public quotearg_custom
.text:0000000000004040 quotearg_custom proc near
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 mov     rcx, rdx
.text:0000000000004043                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000404A                 mov     rdx, rsi
.text:000000000000404D                 mov     rsi, rdi
.text:0000000000004050                 xor     edi, edi
.text:0000000000004052                 jmp     quotearg_n_custom_mem
.text:0000000000004052 ; } // starts at 4040
.text:0000000000004052 quotearg_custom endp
.text:0000000000004052
.text:0000000000004052 ; ---------------------------------------------------------------------------
.text:0000000000004057                 align 20h
.text:0000000000004060
.text:0000000000004060 ; =============== S U B R O U T I N E =======================================
.text:0000000000004060
.text:0000000000004060
.text:0000000000004060                 public quotearg_custom_mem
.text:0000000000004060 quotearg_custom_mem proc near
.text:0000000000004060 ; __unwind {
.text:0000000000004060                 mov     r8, rcx
.text:0000000000004063                 mov     rcx, rdx
.text:0000000000004066                 mov     rdx, rsi
.text:0000000000004069                 mov     rsi, rdi
.text:000000000000406C                 xor     edi, edi
.text:000000000000406E                 jmp     quotearg_n_custom_mem
.text:000000000000406E ; } // starts at 4060
.text:000000000000406E quotearg_custom_mem endp
.text:000000000000406E
.text:000000000000406E ; ---------------------------------------------------------------------------
.text:0000000000004073                 align 20h
.text:0000000000004080
.text:0000000000004080 ; =============== S U B R O U T I N E =======================================
.text:0000000000004080
.text:0000000000004080
.text:0000000000004080                 public quote_n_mem
.text:0000000000004080 quote_n_mem     proc near
.text:0000000000004080 ; __unwind {
.text:0000000000004080                 lea     rcx, quote_quoting_options
.text:0000000000004087                 jmp     quotearg_n_options
.text:0000000000004087 ; } // starts at 4080
.text:0000000000004087 quote_n_mem     endp
.text:0000000000004087
.text:0000000000004087 ; ---------------------------------------------------------------------------
.text:000000000000408C                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public quote_mem
.text:0000000000004090 quote_mem       proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 lea     rcx, quote_quoting_options
.text:0000000000004097                 mov     rdx, rsi
.text:000000000000409A                 mov     rsi, rdi
.text:000000000000409D                 xor     edi, edi
.text:000000000000409F                 jmp     quotearg_n_options
.text:000000000000409F ; } // starts at 4090
.text:000000000000409F quote_mem       endp
.text:000000000000409F
.text:000000000000409F ; ---------------------------------------------------------------------------
.text:00000000000040A4                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0
.text:00000000000040B0                 public quote_n
.text:00000000000040B0 quote_n         proc near
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 lea     rcx, quote_quoting_options
.text:00000000000040B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000040BE                 jmp     quotearg_n_options
.text:00000000000040BE ; } // starts at 40B0
.text:00000000000040BE quote_n         endp
.text:00000000000040BE
.text:00000000000040BE ; ---------------------------------------------------------------------------
.text:00000000000040C3                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0
.text:00000000000040D0                 public quote
.text:00000000000040D0 quote           proc near               ; CODE XREF: xnumtoumax+6D↓p
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 lea     rcx, quote_quoting_options
.text:00000000000040D7                 mov     rsi, rdi
.text:00000000000040DA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000040E1                 xor     edi, edi
.text:00000000000040E3                 jmp     quotearg_n_options
.text:00000000000040E3 ; } // starts at 40D0
.text:00000000000040E3 quote           endp
.text:00000000000040E3
.text:00000000000040E3 ; ---------------------------------------------------------------------------
.text:00000000000040E8                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0
.text:00000000000040F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000040F0                 public version_etc_arn
.text:00000000000040F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_452B↓j
.text:00000000000040F0                                         ; version_etc_va:loc_457B↓p ...
.text:00000000000040F0
.text:00000000000040F0 var_58          = qword ptr -58h
.text:00000000000040F0 var_50          = qword ptr -50h
.text:00000000000040F0 var_48          = qword ptr -48h
.text:00000000000040F0 var_40          = qword ptr -40h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r15
.text:00000000000040F2                 push    r14
.text:00000000000040F4                 push    r13
.text:00000000000040F6                 push    r12
.text:00000000000040F8                 mov     r12, r9
.text:00000000000040FB                 push    rbp
.text:00000000000040FC                 push    rbx
.text:00000000000040FD                 mov     rbp, rdi
.text:0000000000004100                 mov     rbx, r8
.text:0000000000004103                 sub     rsp, 28h
.text:0000000000004107                 test    rsi, rsi
.text:000000000000410A                 jz      loc_4228
.text:0000000000004110                 mov     r8, rdx
.text:0000000000004113                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000411A                 mov     r9, rcx
.text:000000000000411D                 xor     eax, eax
.text:000000000000411F                 mov     rcx, rsi
.text:0000000000004122                 mov     esi, 1
.text:0000000000004127                 call    ___fprintf_chk
.text:000000000000412C
.text:000000000000412C loc_412C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000412C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004133                 xor     edi, edi        ; domainname
.text:0000000000004135                 mov     edx, 5          ; category
.text:000000000000413A                 call    _dcgettext
.text:000000000000413F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004146                 mov     rcx, rax
.text:0000000000004149                 mov     r8d, 7E3h
.text:000000000000414F                 mov     esi, 1
.text:0000000000004154                 mov     rdi, rbp
.text:0000000000004157                 xor     eax, eax
.text:0000000000004159                 call    ___fprintf_chk
.text:000000000000415E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004165                 xor     edi, edi        ; domainname
.text:0000000000004167                 mov     edx, 5          ; category
.text:000000000000416C                 call    _dcgettext
.text:0000000000004171                 mov     rsi, rbp        ; stream
.text:0000000000004174                 mov     rdi, rax        ; s
.text:0000000000004177                 call    _fputs_unlocked
.text:000000000000417C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004180                 ja      def_4194        ; jumptable 0000000000004194 default case
.text:0000000000004186                 lea     rdx, jpt_4194
.text:000000000000418D                 movsxd  rax, ds:(jpt_4194 - 5EA4h)[rdx+r12*4]
.text:0000000000004191                 add     rax, rdx
.text:0000000000004194                 jmp     rax             ; switch jump
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004196                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000041A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004194 case 8
.text:00000000000041A4                 mov     rax, [rbx+10h]
.text:00000000000041A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000041AF                 mov     r8, [rbx+8]
.text:00000000000041B3                 mov     edx, 5          ; category
.text:00000000000041B8                 xor     edi, edi        ; domainname
.text:00000000000041BA                 mov     r13, [rbx+30h]
.text:00000000000041BE                 mov     r12, [rbx+28h]
.text:00000000000041C2                 mov     [rsp+58h+var_48], r9
.text:00000000000041C7                 mov     r15, [rbx+20h]
.text:00000000000041CB                 mov     r14, [rbx+18h]
.text:00000000000041CF                 mov     [rsp+58h+var_58], rax
.text:00000000000041D3                 mov     [rsp+58h+var_50], r8
.text:00000000000041D8                 mov     rbx, [rbx]
.text:00000000000041DB                 call    _dcgettext
.text:00000000000041E0                 sub     rsp, 8
.text:00000000000041E4
.text:00000000000041E4 loc_41E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000041E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000041E9                 mov     rdx, rax
.text:00000000000041EC                 mov     rcx, rbx
.text:00000000000041EF                 mov     esi, 1
.text:00000000000041F4                 mov     rdi, rbp
.text:00000000000041F7                 xor     eax, eax
.text:00000000000041F9                 push    r9
.text:00000000000041FB                 push    r13
.text:00000000000041FD                 push    r12
.text:00000000000041FF                 push    r15
.text:0000000000004201                 push    r14
.text:0000000000004203                 mov     r9, [rsp+88h+var_58]
.text:0000000000004208                 mov     r8, [rsp+88h+var_50]
.text:000000000000420D                 call    ___fprintf_chk
.text:0000000000004212                 add     rsp, 30h
.text:0000000000004216
.text:0000000000004216 loc_4216:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004216                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004216                 add     rsp, 28h        ; jumptable 0000000000004194 case 0
.text:000000000000421A                 pop     rbx
.text:000000000000421B                 pop     rbp
.text:000000000000421C                 pop     r12
.text:000000000000421E                 pop     r13
.text:0000000000004220                 pop     r14
.text:0000000000004222                 pop     r15
.text:0000000000004224                 retn
.text:0000000000004224 ; ---------------------------------------------------------------------------
.text:0000000000004225                 align 8
.text:0000000000004228
.text:0000000000004228 loc_4228:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004228                 mov     r8, rcx
.text:000000000000422B                 mov     rcx, rdx
.text:000000000000422E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004235                 mov     esi, 1
.text:000000000000423A                 xor     eax, eax
.text:000000000000423C                 call    ___fprintf_chk
.text:0000000000004241                 jmp     loc_412C
.text:0000000000004241 ; ---------------------------------------------------------------------------
.text:0000000000004246                 align 10h
.text:0000000000004250
.text:0000000000004250 loc_4250:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004250                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004250                 mov     r10, [rbx+40h]  ; jumptable 0000000000004194 case 9
.text:0000000000004254                 mov     r9, [rbx+38h]
.text:0000000000004258                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000425F                 mov     rax, [rbx+10h]
.text:0000000000004263                 mov     r8, [rbx+8]
.text:0000000000004267                 mov     edx, 5          ; category
.text:000000000000426C                 mov     r13, [rbx+30h]
.text:0000000000004270                 mov     r12, [rbx+28h]
.text:0000000000004274                 mov     r15, [rbx+20h]
.text:0000000000004278                 mov     r14, [rbx+18h]
.text:000000000000427C                 mov     rbx, [rbx]
.text:000000000000427F                 mov     [rsp+58h+var_40], r10
.text:0000000000004284                 mov     [rsp+58h+var_48], r9
.text:0000000000004289                 mov     [rsp+58h+var_58], rax
.text:000000000000428D                 mov     [rsp+58h+var_50], r8
.text:0000000000004292
.text:0000000000004292 loc_4292:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004292                 xor     edi, edi        ; domainname
.text:0000000000004294                 call    _dcgettext
.text:0000000000004299                 mov     r10, [rsp+58h+var_40]
.text:000000000000429E                 push    r10
.text:00000000000042A0                 jmp     loc_41E4
.text:00000000000042A0 ; ---------------------------------------------------------------------------
.text:00000000000042A5                 align 8
.text:00000000000042A8
.text:00000000000042A8 loc_42A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000042A8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000042A8                 mov     rbx, [rbx]      ; jumptable 0000000000004194 case 1
.text:00000000000042AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000042B2                 mov     edx, 5          ; category
.text:00000000000042B7                 xor     edi, edi        ; domainname
.text:00000000000042B9                 call    _dcgettext
.text:00000000000042BE                 add     rsp, 28h
.text:00000000000042C2                 mov     rcx, rbx
.text:00000000000042C5                 mov     rdi, rbp
.text:00000000000042C8                 pop     rbx
.text:00000000000042C9                 pop     rbp
.text:00000000000042CA                 pop     r12
.text:00000000000042CC                 pop     r13
.text:00000000000042CE                 pop     r14
.text:00000000000042D0                 pop     r15
.text:00000000000042D2                 mov     rdx, rax
.text:00000000000042D5                 mov     esi, 1
.text:00000000000042DA                 xor     eax, eax
.text:00000000000042DC                 jmp     ___fprintf_chk
.text:00000000000042DC ; ---------------------------------------------------------------------------
.text:00000000000042E1                 align 8
.text:00000000000042E8
.text:00000000000042E8 loc_42E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000042E8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000042E8                 mov     r12, [rbx+8]    ; jumptable 0000000000004194 case 2
.text:00000000000042EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000042F3                 mov     rbx, [rbx]
.text:00000000000042F6                 mov     edx, 5          ; category
.text:00000000000042FB                 xor     edi, edi        ; domainname
.text:00000000000042FD                 call    _dcgettext
.text:0000000000004302                 add     rsp, 28h
.text:0000000000004306                 mov     r8, r12
.text:0000000000004309                 mov     rcx, rbx
.text:000000000000430C                 mov     rdi, rbp
.text:000000000000430F                 mov     rdx, rax
.text:0000000000004312                 mov     esi, 1
.text:0000000000004317                 pop     rbx
.text:0000000000004318                 pop     rbp
.text:0000000000004319                 pop     r12
.text:000000000000431B                 pop     r13
.text:000000000000431D                 pop     r14
.text:000000000000431F                 pop     r15
.text:0000000000004321                 xor     eax, eax
.text:0000000000004323                 jmp     ___fprintf_chk
.text:0000000000004323 ; ---------------------------------------------------------------------------
.text:0000000000004328                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004330                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004330                 mov     r13, [rbx+10h]  ; jumptable 0000000000004194 case 3
.text:0000000000004334                 mov     r12, [rbx+8]
.text:0000000000004338                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000433F                 mov     rbx, [rbx]
.text:0000000000004342                 mov     edx, 5          ; category
.text:0000000000004347                 xor     edi, edi        ; domainname
.text:0000000000004349                 call    _dcgettext
.text:000000000000434E                 add     rsp, 28h
.text:0000000000004352                 mov     r9, r13
.text:0000000000004355                 mov     r8, r12
.text:0000000000004358                 mov     rcx, rbx
.text:000000000000435B                 mov     rdi, rbp
.text:000000000000435E                 mov     rdx, rax
.text:0000000000004361                 pop     rbx
.text:0000000000004362                 pop     rbp
.text:0000000000004363                 pop     r12
.text:0000000000004365                 pop     r13
.text:0000000000004367                 pop     r14
.text:0000000000004369                 pop     r15
.text:000000000000436B                 mov     esi, 1
.text:0000000000004370                 xor     eax, eax
.text:0000000000004372                 jmp     ___fprintf_chk
.text:0000000000004372 ; ---------------------------------------------------------------------------
.text:0000000000004377                 align 20h
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004380                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004380                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004194 case 4
.text:0000000000004387                 mov     edx, 5          ; category
.text:000000000000438C                 xor     edi, edi        ; domainname
.text:000000000000438E                 mov     r14, [rbx+18h]
.text:0000000000004392                 mov     r13, [rbx+10h]
.text:0000000000004396                 mov     r12, [rbx+8]
.text:000000000000439A                 mov     rbx, [rbx]
.text:000000000000439D                 call    _dcgettext
.text:00000000000043A2                 sub     rsp, 8
.text:00000000000043A6
.text:00000000000043A6 loc_43A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000043A6                 push    r14
.text:00000000000043A8                 mov     rdx, rax
.text:00000000000043AB                 mov     r9, r13
.text:00000000000043AE                 mov     r8, r12
.text:00000000000043B1                 mov     rcx, rbx
.text:00000000000043B4                 mov     rdi, rbp
.text:00000000000043B7                 mov     esi, 1
.text:00000000000043BC                 xor     eax, eax
.text:00000000000043BE                 call    ___fprintf_chk
.text:00000000000043C3                 pop     rax
.text:00000000000043C4                 pop     rdx
.text:00000000000043C5                 add     rsp, 28h
.text:00000000000043C9                 pop     rbx
.text:00000000000043CA                 pop     rbp
.text:00000000000043CB                 pop     r12
.text:00000000000043CD                 pop     r13
.text:00000000000043CF                 pop     r14
.text:00000000000043D1                 pop     r15
.text:00000000000043D3                 retn
.text:00000000000043D3 ; ---------------------------------------------------------------------------
.text:00000000000043D4                 align 8
.text:00000000000043D8
.text:00000000000043D8 loc_43D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000043D8                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:00000000000043D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000004194 case 5
.text:00000000000043DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000043E3                 mov     edx, 5          ; category
.text:00000000000043E8                 xor     edi, edi        ; domainname
.text:00000000000043EA                 mov     r14, [rbx+18h]
.text:00000000000043EE                 mov     r13, [rbx+10h]
.text:00000000000043F2                 mov     r12, [rbx+8]
.text:00000000000043F6                 mov     rbx, [rbx]
.text:00000000000043F9                 call    _dcgettext
.text:00000000000043FE                 push    r15
.text:0000000000004400                 jmp     short loc_43A6
.text:0000000000004400 ; ---------------------------------------------------------------------------
.text:0000000000004402                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004408                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004408                 mov     r8, [rbx+8]     ; jumptable 0000000000004194 case 6
.text:000000000000440C                 mov     r12, [rbx+28h]
.text:0000000000004410                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004417                 mov     r15, [rbx+20h]
.text:000000000000441B                 mov     r14, [rbx+18h]
.text:000000000000441F                 mov     edx, 5          ; category
.text:0000000000004424                 mov     r13, [rbx+10h]
.text:0000000000004428                 xor     edi, edi        ; domainname
.text:000000000000442A                 mov     rbx, [rbx]
.text:000000000000442D                 mov     [rsp+58h+var_58], r8
.text:0000000000004431                 call    _dcgettext
.text:0000000000004436                 sub     rsp, 8
.text:000000000000443A                 mov     r9, r13
.text:000000000000443D                 push    r12
.text:000000000000443F                 push    r15
.text:0000000000004441                 push    r14
.text:0000000000004443
.text:0000000000004443 loc_4443:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004443                 mov     r8, [rsp+78h+var_58]
.text:0000000000004448                 mov     rcx, rbx
.text:000000000000444B                 mov     rdx, rax
.text:000000000000444E                 mov     rdi, rbp
.text:0000000000004451                 mov     esi, 1
.text:0000000000004456                 xor     eax, eax
.text:0000000000004458                 call    ___fprintf_chk
.text:000000000000445D                 add     rsp, 20h
.text:0000000000004461                 add     rsp, 28h
.text:0000000000004465                 pop     rbx
.text:0000000000004466                 pop     rbp
.text:0000000000004467                 pop     r12
.text:0000000000004469                 pop     r13
.text:000000000000446B                 pop     r14
.text:000000000000446D                 pop     r15
.text:000000000000446F                 retn
.text:0000000000004470 ; ---------------------------------------------------------------------------
.text:0000000000004470
.text:0000000000004470 loc_4470:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004470                                         ; DATA XREF: .rodata:jpt_4194↓o
.text:0000000000004470                 mov     r9, [rbx+10h]   ; jumptable 0000000000004194 case 7
.text:0000000000004474                 mov     r13, [rbx+30h]
.text:0000000000004478                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000447F                 mov     r12, [rbx+28h]
.text:0000000000004483                 mov     r15, [rbx+20h]
.text:0000000000004487                 mov     edx, 5          ; category
.text:000000000000448C                 mov     r14, [rbx+18h]
.text:0000000000004490                 mov     r8, [rbx+8]
.text:0000000000004494                 xor     edi, edi        ; domainname
.text:0000000000004496                 mov     [rsp+58h+var_50], r9
.text:000000000000449B                 mov     rbx, [rbx]
.text:000000000000449E                 mov     [rsp+58h+var_58], r8
.text:00000000000044A2                 call    _dcgettext
.text:00000000000044A7                 push    r13
.text:00000000000044A9                 push    r12
.text:00000000000044AB                 push    r15
.text:00000000000044AD                 push    r14
.text:00000000000044AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000044B4                 jmp     short loc_4443
.text:00000000000044B4 ; ---------------------------------------------------------------------------
.text:00000000000044B6                 align 20h
.text:00000000000044C0
.text:00000000000044C0 def_4194:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000044C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004194 default case
.text:00000000000044C4                 mov     r9, [rbx+38h]
.text:00000000000044C8                 mov     edx, 5
.text:00000000000044CD                 mov     rax, [rbx+10h]
.text:00000000000044D1                 mov     r8, [rbx+8]
.text:00000000000044D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000044DC                 mov     r13, [rbx+30h]
.text:00000000000044E0                 mov     r12, [rbx+28h]
.text:00000000000044E4                 mov     r15, [rbx+20h]
.text:00000000000044E8                 mov     r14, [rbx+18h]
.text:00000000000044EC                 mov     [rsp+58h+var_40], r10
.text:00000000000044F1                 mov     [rsp+58h+var_48], r9
.text:00000000000044F6                 mov     [rsp+58h+var_58], rax
.text:00000000000044FA                 mov     [rsp+58h+var_50], r8
.text:00000000000044FF                 mov     rbx, [rbx]
.text:0000000000004502                 jmp     loc_4292
.text:0000000000004502 ; } // starts at 40F0
.text:0000000000004502 version_etc_arn endp
.text:0000000000004502
.text:0000000000004502 ; ---------------------------------------------------------------------------
.text:0000000000004507                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004510                 public version_etc_ar
.text:0000000000004510 version_etc_ar  proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 xor     r9d, r9d
.text:0000000000004513                 cmp     qword ptr [r8], 0
.text:0000000000004517                 jz      short loc_452B
.text:0000000000004519                 nop     dword ptr [rax+00000000h]
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004520                 add     r9, 1
.text:0000000000004524                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004529                 jnz     short loc_4520
.text:000000000000452B
.text:000000000000452B loc_452B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000452B                 jmp     version_etc_arn
.text:000000000000452B ; } // starts at 4510
.text:000000000000452B version_etc_ar  endp
.text:000000000000452B
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530 ; Attributes: info_from_lumina
.text:0000000000004530
.text:0000000000004530 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004530                 public version_etc_va
.text:0000000000004530 version_etc_va  proc near
.text:0000000000004530
.text:0000000000004530 authtab         = qword ptr -68h
.text:0000000000004530 var_10          = qword ptr -10h
.text:0000000000004530
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 sub     rsp, 68h
.text:0000000000004534                 mov     r10, r8
.text:0000000000004537                 xor     r9d, r9d
.text:000000000000453A                 mov     rax, fs:28h
.text:0000000000004543                 mov     [rsp+68h+var_10], rax
.text:0000000000004548                 xor     eax, eax
.text:000000000000454A                 mov     r8, rsp
.text:000000000000454D                 nop     dword ptr [rax]
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004550                 mov     eax, [r10]
.text:0000000000004553                 cmp     eax, 2Fh ; '/'
.text:0000000000004556                 ja      short loc_459A
.text:0000000000004558                 mov     r11d, eax
.text:000000000000455B                 add     r11, [r10+10h]
.text:000000000000455F                 add     eax, 8
.text:0000000000004562                 mov     [r10], eax
.text:0000000000004565
.text:0000000000004565 loc_4565:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004565                 mov     rax, [r11]
.text:0000000000004568                 test    rax, rax
.text:000000000000456B                 mov     [r8+r9*8], rax
.text:000000000000456F                 jz      short loc_457B
.text:0000000000004571                 add     r9, 1
.text:0000000000004575                 cmp     r9, 0Ah
.text:0000000000004579                 jnz     short loc_4550
.text:000000000000457B
.text:000000000000457B loc_457B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000457B                 call    version_etc_arn
.text:0000000000004580                 mov     rax, [rsp+68h+var_10]
.text:0000000000004585                 xor     rax, fs:28h
.text:000000000000458E                 jnz     short loc_4595
.text:0000000000004590                 add     rsp, 68h
.text:0000000000004594                 retn
.text:0000000000004595 ; ---------------------------------------------------------------------------
.text:0000000000004595
.text:0000000000004595 loc_4595:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004595                 call    ___stack_chk_fail
.text:000000000000459A ; ---------------------------------------------------------------------------
.text:000000000000459A
.text:000000000000459A loc_459A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000459A                 mov     r11, [r10+8]
.text:000000000000459E                 lea     rax, [r11+8]
.text:00000000000045A2                 mov     [r10+8], rax
.text:00000000000045A6                 jmp     short loc_4565
.text:00000000000045A6 ; } // starts at 4530
.text:00000000000045A6 version_etc_va  endp
.text:00000000000045A6
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A8                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000045B0                 public version_etc
.text:00000000000045B0 version_etc     proc near               ; CODE XREF: main+118↑p
.text:00000000000045B0
.text:00000000000045B0 var_C0          = dword ptr -0C0h
.text:00000000000045B0 var_B8          = qword ptr -0B8h
.text:00000000000045B0 var_B0          = qword ptr -0B0h
.text:00000000000045B0 var_A8          = byte ptr -0A8h
.text:00000000000045B0 var_50          = qword ptr -50h
.text:00000000000045B0 var_48          = byte ptr -48h
.text:00000000000045B0 var_28          = qword ptr -28h
.text:00000000000045B0 var_20          = qword ptr -20h
.text:00000000000045B0 arg_0           = byte ptr  8
.text:00000000000045B0
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    rbp
.text:00000000000045B1                 push    rbx
.text:00000000000045B2                 mov     r10d, 20h ; ' '
.text:00000000000045B8                 xor     r11d, r11d
.text:00000000000045BB                 sub     rsp, 0B8h
.text:00000000000045C2                 mov     rax, fs:28h
.text:00000000000045CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000045D0                 xor     eax, eax
.text:00000000000045D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000045DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000045E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000045EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000045EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000045F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000045FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004604                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000460C                 xor     r9d, r9d
.text:000000000000460F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004614                 mov     rbp, rax
.text:0000000000004617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004620                 cmp     r10d, 2Fh ; '/'
.text:0000000000004624                 ja      short loc_467C
.text:0000000000004626                 mov     eax, r10d
.text:0000000000004629                 mov     r11d, 1
.text:000000000000462F                 add     r10d, 8
.text:0000000000004633                 add     rax, rbp
.text:0000000000004636
.text:0000000000004636 loc_4636:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004636                 mov     rax, [rax]
.text:0000000000004639                 test    rax, rax
.text:000000000000463C                 mov     [r8+r9*8], rax
.text:0000000000004640                 jz      short loc_464C
.text:0000000000004642                 add     r9, 1
.text:0000000000004646                 cmp     r9, 0Ah
.text:000000000000464A                 jnz     short loc_4620
.text:000000000000464C
.text:000000000000464C loc_464C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000464C                 test    r11b, r11b
.text:000000000000464F                 jnz     short loc_4675
.text:0000000000004651
.text:0000000000004651 loc_4651:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004651                 call    version_etc_arn
.text:0000000000004656                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000465B                 xor     rax, fs:28h
.text:0000000000004664                 jnz     short loc_4670
.text:0000000000004666                 add     rsp, 0B8h
.text:000000000000466D                 pop     rbx
.text:000000000000466E                 pop     rbp
.text:000000000000466F                 retn
.text:0000000000004670 ; ---------------------------------------------------------------------------
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004670                 call    ___stack_chk_fail
.text:0000000000004675 ; ---------------------------------------------------------------------------
.text:0000000000004675
.text:0000000000004675 loc_4675:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004675                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000467A                 jmp     short loc_4651
.text:000000000000467C ; ---------------------------------------------------------------------------
.text:000000000000467C
.text:000000000000467C loc_467C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000467C                 mov     rax, rbx
.text:000000000000467F                 add     rbx, 8
.text:0000000000004683                 jmp     short loc_4636
.text:0000000000004683 ; } // starts at 45B0
.text:0000000000004683 version_etc     endp
.text:0000000000004683
.text:0000000000004683 ; ---------------------------------------------------------------------------
.text:0000000000004685                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690 ; Attributes: info_from_lumina
.text:0000000000004690
.text:0000000000004690 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004690                 public emit_bug_reporting_address
.text:0000000000004690 emit_bug_reporting_address proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 push    rbx
.text:0000000000004691                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004698                 mov     edx, 5          ; category
.text:000000000000469D                 xor     edi, edi        ; domainname
.text:000000000000469F                 call    _dcgettext
.text:00000000000046A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000046AB                 mov     rsi, rax
.text:00000000000046AE                 mov     edi, 1
.text:00000000000046B3                 xor     eax, eax
.text:00000000000046B5                 call    ___printf_chk
.text:00000000000046BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000046C1                 mov     edx, 5          ; category
.text:00000000000046C6                 xor     edi, edi        ; domainname
.text:00000000000046C8                 call    _dcgettext
.text:00000000000046CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000046D4                 lea     rdx, unk_52DF
.text:00000000000046DB                 mov     rsi, rax
.text:00000000000046DE                 mov     edi, 1
.text:00000000000046E3                 xor     eax, eax
.text:00000000000046E5                 call    ___printf_chk
.text:00000000000046EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000046F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000046F8                 xor     edi, edi        ; domainname
.text:00000000000046FA                 mov     edx, 5          ; category
.text:00000000000046FF                 call    _dcgettext
.text:0000000000004704                 mov     rsi, rbx        ; stream
.text:0000000000004707                 mov     rdi, rax        ; s
.text:000000000000470A                 pop     rbx
.text:000000000000470B                 jmp     _fputs_unlocked
.text:000000000000470B ; } // starts at 4690
.text:000000000000470B emit_bug_reporting_address endp
.text:000000000000470B
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710                 public xmalloc
.text:0000000000004710 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004710                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 push    rbx
.text:0000000000004711                 mov     rbx, rdi
.text:0000000000004714                 call    _malloc
.text:0000000000004719                 test    rax, rax
.text:000000000000471C                 jnz     short loc_4723
.text:000000000000471E                 test    rbx, rbx
.text:0000000000004721                 jnz     short loc_4725
.text:0000000000004723
.text:0000000000004723 loc_4723:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004723                 pop     rbx
.text:0000000000004724                 retn
.text:0000000000004725 ; ---------------------------------------------------------------------------
.text:0000000000004725
.text:0000000000004725 loc_4725:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004725                 call    xalloc_die
.text:0000000000004725 ; } // starts at 4710
.text:0000000000004725 xmalloc         endp
.text:0000000000004725
.text:0000000000004725 ; ---------------------------------------------------------------------------
.text:000000000000472A                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730 ; Attributes: info_from_lumina
.text:0000000000004730
.text:0000000000004730 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004730                 public xnmalloc
.text:0000000000004730 xnmalloc        proc near
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 mov     rax, rdi
.text:0000000000004733                 mul     rsi
.text:0000000000004736                 mov     rdi, rax
.text:0000000000004739                 seto    al
.text:000000000000473C                 test    rdi, rdi
.text:000000000000473F                 js      short loc_474B
.text:0000000000004741                 movzx   eax, al
.text:0000000000004744                 test    rax, rax
.text:0000000000004747                 jnz     short loc_474B
.text:0000000000004749                 jmp     short xmalloc
.text:000000000000474B ; ---------------------------------------------------------------------------
.text:000000000000474B
.text:000000000000474B loc_474B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000474B                                         ; xnmalloc+17↑j
.text:000000000000474B                 sub     rsp, 8
.text:000000000000474F                 call    xalloc_die
.text:000000000000474F ; } // starts at 4730
.text:000000000000474F xnmalloc        endp
.text:000000000000474F
.text:000000000000474F ; ---------------------------------------------------------------------------
.text:0000000000004754                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760                 public xcharalloc
.text:0000000000004760 xcharalloc      proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 jmp     short xmalloc
.text:0000000000004760 ; } // starts at 4760
.text:0000000000004760 xcharalloc      endp
.text:0000000000004760
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004762                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770 ; Attributes: info_from_lumina
.text:0000000000004770
.text:0000000000004770 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004770                 public xrealloc
.text:0000000000004770 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004770                                         ; quotearg_n_options+182↑p ...
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 test    rsi, rsi
.text:0000000000004773                 push    rbx
.text:0000000000004774                 mov     rbx, rsi
.text:0000000000004777                 jnz     short loc_477E
.text:0000000000004779                 test    rdi, rdi
.text:000000000000477C                 jnz     short loc_4798
.text:000000000000477E
.text:000000000000477E loc_477E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000477E                 mov     rsi, rbx        ; size
.text:0000000000004781                 call    _realloc
.text:0000000000004786                 test    rax, rax
.text:0000000000004789                 jnz     short loc_4790
.text:000000000000478B                 test    rbx, rbx
.text:000000000000478E                 jnz     short loc_47A1
.text:0000000000004790
.text:0000000000004790 loc_4790:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004790                 pop     rbx
.text:0000000000004791                 retn
.text:0000000000004791 ; ---------------------------------------------------------------------------
.text:0000000000004792                 align 8
.text:0000000000004798
.text:0000000000004798 loc_4798:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004798                 call    _free
.text:000000000000479D                 xor     eax, eax
.text:000000000000479F                 pop     rbx
.text:00000000000047A0                 retn
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A1
.text:00000000000047A1 loc_47A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000047A1                 call    xalloc_die
.text:00000000000047A1 ; } // starts at 4770
.text:00000000000047A1 xrealloc        endp
.text:00000000000047A1
.text:00000000000047A1 ; ---------------------------------------------------------------------------
.text:00000000000047A6                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000047B0                 public xnrealloc
.text:00000000000047B0 xnrealloc       proc near
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 mov     rax, rsi
.text:00000000000047B3                 mul     rdx
.text:00000000000047B6                 mov     rsi, rax
.text:00000000000047B9                 seto    al
.text:00000000000047BC                 test    rsi, rsi
.text:00000000000047BF                 js      short loc_47CB
.text:00000000000047C1                 movzx   eax, al
.text:00000000000047C4                 test    rax, rax
.text:00000000000047C7                 jnz     short loc_47CB
.text:00000000000047C9                 jmp     short xrealloc
.text:00000000000047CB ; ---------------------------------------------------------------------------
.text:00000000000047CB
.text:00000000000047CB loc_47CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000047CB                                         ; xnrealloc+17↑j
.text:00000000000047CB                 sub     rsp, 8
.text:00000000000047CF                 call    xalloc_die
.text:00000000000047CF ; } // starts at 47B0
.text:00000000000047CF xnrealloc       endp
.text:00000000000047CF
.text:00000000000047CF ; ---------------------------------------------------------------------------
.text:00000000000047D4                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0 ; Attributes: info_from_lumina
.text:00000000000047E0
.text:00000000000047E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000047E0                 public x2nrealloc
.text:00000000000047E0 x2nrealloc      proc near
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 test    rdi, rdi
.text:00000000000047E3                 mov     r9, rdx
.text:00000000000047E6                 mov     rcx, [rsi]
.text:00000000000047E9                 jz      short loc_4820
.text:00000000000047EB                 xor     edx, edx
.text:00000000000047ED                 mov     rax, 5555555555555554h
.text:00000000000047F7                 div     r9
.text:00000000000047FA                 cmp     rax, rcx
.text:00000000000047FD                 jbe     short loc_483B
.text:00000000000047FF                 mov     rax, rcx
.text:0000000000004802                 shr     rax, 1
.text:0000000000004805                 lea     rcx, [rax+rcx+1]
.text:000000000000480A
.text:000000000000480A loc_480A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000480A                 mov     [rsi], rcx
.text:000000000000480D                 imul    rcx, r9
.text:0000000000004811                 mov     rsi, rcx
.text:0000000000004814                 jmp     xrealloc
.text:0000000000004814 ; ---------------------------------------------------------------------------
.text:0000000000004819                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004820                 test    rcx, rcx
.text:0000000000004823                 jz      short loc_4848
.text:0000000000004825
.text:0000000000004825 loc_4825:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004825                 mov     rax, rcx
.text:0000000000004828                 mul     r9
.text:000000000000482B                 seto    dl
.text:000000000000482E                 test    rax, rax
.text:0000000000004831                 movzx   edx, dl
.text:0000000000004834                 js      short loc_483B
.text:0000000000004836                 test    rdx, rdx
.text:0000000000004839                 jz      short loc_480A
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000483B                                         ; x2nrealloc+54↑j
.text:000000000000483B                 sub     rsp, 8
.text:000000000000483F                 call    xalloc_die
.text:000000000000483F ; ---------------------------------------------------------------------------
.text:0000000000004844                 align 8
.text:0000000000004848
.text:0000000000004848 loc_4848:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004848                 xor     edx, edx
.text:000000000000484A                 mov     eax, 80h
.text:000000000000484F                 xor     r8d, r8d
.text:0000000000004852                 div     r9
.text:0000000000004855                 test    rax, rax
.text:0000000000004858                 setz    r8b
.text:000000000000485C                 lea     rcx, [r8+rax]
.text:0000000000004860                 jmp     short loc_4825
.text:0000000000004860 ; } // starts at 47E0
.text:0000000000004860 x2nrealloc      endp
.text:0000000000004860
.text:0000000000004860 ; ---------------------------------------------------------------------------
.text:0000000000004862                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870 ; Attributes: info_from_lumina
.text:0000000000004870
.text:0000000000004870 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004870                 public x2realloc
.text:0000000000004870 x2realloc       proc near               ; CODE XREF: fold_file+262↑p
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 test    rdi, rdi
.text:0000000000004873                 mov     rax, [rsi]
.text:0000000000004876                 jz      short loc_48A0
.text:0000000000004878                 mov     rdx, 5555555555555553h
.text:0000000000004882                 cmp     rax, rdx
.text:0000000000004885                 ja      short loc_48B1
.text:0000000000004887                 mov     rdx, rax
.text:000000000000488A                 shr     rdx, 1
.text:000000000000488D                 lea     rax, [rdx+rax+1]
.text:0000000000004892
.text:0000000000004892 loc_4892:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004892                 mov     [rsi], rax
.text:0000000000004895                 mov     rsi, rax
.text:0000000000004898                 jmp     xrealloc
.text:0000000000004898 ; ---------------------------------------------------------------------------
.text:000000000000489D                 align 20h
.text:00000000000048A0
.text:00000000000048A0 loc_48A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000048A0                 test    rax, rax
.text:00000000000048A3                 mov     edx, 80h
.text:00000000000048A8                 cmovz   rax, rdx
.text:00000000000048AC                 test    rax, rax
.text:00000000000048AF                 jns     short loc_4892
.text:00000000000048B1
.text:00000000000048B1 loc_48B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000048B1                 sub     rsp, 8
.text:00000000000048B5                 call    xalloc_die
.text:00000000000048B5 ; } // starts at 4870
.text:00000000000048B5 x2realloc       endp
.text:00000000000048B5
.text:00000000000048B5 ; ---------------------------------------------------------------------------
.text:00000000000048BA                 align 20h
.text:00000000000048C0
.text:00000000000048C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048C0
.text:00000000000048C0
.text:00000000000048C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000048C0                 public xzalloc
.text:00000000000048C0 xzalloc         proc near
.text:00000000000048C0 ; __unwind {
.text:00000000000048C0                 push    rbx
.text:00000000000048C1                 mov     rbx, rdi
.text:00000000000048C4                 call    xmalloc
.text:00000000000048C9                 mov     rdx, rbx        ; n
.text:00000000000048CC                 xor     esi, esi        ; c
.text:00000000000048CE                 mov     rdi, rax        ; s
.text:00000000000048D1                 pop     rbx
.text:00000000000048D2                 jmp     _memset
.text:00000000000048D2 ; } // starts at 48C0
.text:00000000000048D2 xzalloc         endp
.text:00000000000048D2
.text:00000000000048D2 ; ---------------------------------------------------------------------------
.text:00000000000048D7                 align 20h
.text:00000000000048E0
.text:00000000000048E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000048E0
.text:00000000000048E0 ; Attributes: info_from_lumina
.text:00000000000048E0
.text:00000000000048E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000048E0                 public xcalloc
.text:00000000000048E0 xcalloc         proc near
.text:00000000000048E0 ; __unwind {
.text:00000000000048E0                 mov     rax, rdi
.text:00000000000048E3                 sub     rsp, 8
.text:00000000000048E7                 mul     rsi
.text:00000000000048EA                 seto    dl
.text:00000000000048ED                 test    rax, rax
.text:00000000000048F0                 js      short loc_4909
.text:00000000000048F2                 movzx   edx, dl
.text:00000000000048F5                 test    rdx, rdx
.text:00000000000048F8                 jnz     short loc_4909
.text:00000000000048FA                 call    _calloc
.text:00000000000048FF                 test    rax, rax
.text:0000000000004902                 jz      short loc_4909
.text:0000000000004904                 add     rsp, 8
.text:0000000000004908                 retn
.text:0000000000004909 ; ---------------------------------------------------------------------------
.text:0000000000004909
.text:0000000000004909 loc_4909:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004909                                         ; xcalloc+18↑j ...
.text:0000000000004909                 call    xalloc_die
.text:0000000000004909 ; } // starts at 48E0
.text:0000000000004909 xcalloc         endp
.text:0000000000004909
.text:0000000000004909 ; ---------------------------------------------------------------------------
.text:000000000000490E                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910 ; Attributes: info_from_lumina
.text:0000000000004910
.text:0000000000004910 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004910                 public xmemdup
.text:0000000000004910 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004910                                         ; xstrdup+11↓j
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 push    rbp
.text:0000000000004911                 push    rbx
.text:0000000000004912                 mov     rbp, rdi
.text:0000000000004915                 mov     rdi, rsi
.text:0000000000004918                 mov     rbx, rsi
.text:000000000000491B                 sub     rsp, 8
.text:000000000000491F                 call    xmalloc
.text:0000000000004924                 add     rsp, 8
.text:0000000000004928                 mov     rdx, rbx        ; n
.text:000000000000492B                 mov     rsi, rbp        ; src
.text:000000000000492E                 pop     rbx
.text:000000000000492F                 pop     rbp
.text:0000000000004930                 mov     rdi, rax        ; dest
.text:0000000000004933                 jmp     _memcpy
.text:0000000000004933 ; } // starts at 4910
.text:0000000000004933 xmemdup         endp
.text:0000000000004933
.text:0000000000004933 ; ---------------------------------------------------------------------------
.text:0000000000004938                 align 20h
.text:0000000000004940
.text:0000000000004940 ; =============== S U B R O U T I N E =======================================
.text:0000000000004940
.text:0000000000004940
.text:0000000000004940 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004940                 public xstrdup
.text:0000000000004940 xstrdup         proc near
.text:0000000000004940 ; __unwind {
.text:0000000000004940                 push    rbx
.text:0000000000004941                 mov     rbx, rdi
.text:0000000000004944                 call    _strlen
.text:0000000000004949                 mov     rdi, rbx        ; src
.text:000000000000494C                 lea     rsi, [rax+1]    ; n
.text:0000000000004950                 pop     rbx
.text:0000000000004951                 jmp     short xmemdup
.text:0000000000004951 ; } // starts at 4940
.text:0000000000004951 xstrdup         endp
.text:0000000000004951
.text:0000000000004951 ; ---------------------------------------------------------------------------
.text:0000000000004953                 align 20h
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960 ; Attributes: noreturn info_from_lumina
.text:0000000000004960
.text:0000000000004960 ; void __cdecl xalloc_die()
.text:0000000000004960                 public xalloc_die
.text:0000000000004960 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3936↑p
.text:0000000000004960                                         ; xmalloc:loc_4725↑p ...
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004967                 sub     rsp, 8
.text:000000000000496B                 mov     edx, 5          ; category
.text:0000000000004970                 xor     edi, edi        ; domainname
.text:0000000000004972                 call    _dcgettext
.text:0000000000004977                 mov     edi, cs:exit_failure ; status
.text:000000000000497D                 lea     rdx, format+4   ; format
.text:0000000000004984                 mov     rcx, rax
.text:0000000000004987                 xor     esi, esi        ; errnum
.text:0000000000004989                 xor     eax, eax
.text:000000000000498B                 call    _error
.text:0000000000004990                 call    _abort
.text:0000000000004990 ; } // starts at 4960
.text:0000000000004990 xalloc_die      endp
.text:0000000000004990
.text:0000000000004990 ; ---------------------------------------------------------------------------
.text:0000000000004995                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0 ; Attributes: info_from_lumina
.text:00000000000049A0
.text:00000000000049A0 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:00000000000049A0                 public xnumtoumax
.text:00000000000049A0 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:00000000000049A0
.text:00000000000049A0 var_48          = qword ptr -48h
.text:00000000000049A0 var_40          = qword ptr -40h
.text:00000000000049A0 arg_0           = dword ptr  8
.text:00000000000049A0
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 push    r15
.text:00000000000049A2                 push    r14
.text:00000000000049A4                 mov     r15, rcx
.text:00000000000049A7                 push    r13
.text:00000000000049A9                 push    r12
.text:00000000000049AB                 mov     r14, rdx
.text:00000000000049AE                 push    rbp
.text:00000000000049AF                 push    rbx
.text:00000000000049B0                 mov     edx, esi
.text:00000000000049B2                 xor     esi, esi
.text:00000000000049B4                 mov     r12, rdi
.text:00000000000049B7                 mov     r13, r9
.text:00000000000049BA                 sub     rsp, 18h
.text:00000000000049BE                 mov     rcx, rsp
.text:00000000000049C1                 mov     ebx, [rsp+48h+arg_0]
.text:00000000000049C5                 mov     rax, fs:28h
.text:00000000000049CE                 mov     [rsp+48h+var_40], rax
.text:00000000000049D3                 xor     eax, eax
.text:00000000000049D5                 call    xstrtoumax
.text:00000000000049DA                 test    eax, eax
.text:00000000000049DC                 jnz     loc_4A70
.text:00000000000049E2                 mov     rbp, [rsp+48h+var_48]
.text:00000000000049E6                 cmp     rbp, r14
.text:00000000000049E9                 jb      short loc_49F0
.text:00000000000049EB                 cmp     rbp, r15
.text:00000000000049EE                 jbe     short loc_4A44
.text:00000000000049F0
.text:00000000000049F0 loc_49F0:                               ; CODE XREF: xnumtoumax+49↑j
.text:00000000000049F0                 call    ___errno_location
.text:00000000000049F5                 cmp     rbp, 40000000h
.text:00000000000049FC                 mov     r14, rax
.text:00000000000049FF                 sbb     eax, eax
.text:0000000000004A01                 and     eax, 0FFFFFFD7h
.text:0000000000004A04                 add     eax, 4Bh ; 'K'
.text:0000000000004A07                 mov     [r14], eax
.text:0000000000004A0A
.text:0000000000004A0A loc_4A0A:                               ; CODE XREF: xnumtoumax+E2↓j
.text:0000000000004A0A                                         ; xnumtoumax+EA↓j ...
.text:0000000000004A0A                 mov     rdi, r12
.text:0000000000004A0D                 call    quote
.text:0000000000004A12                 mov     esi, [r14]
.text:0000000000004A15                 mov     r8, rax
.text:0000000000004A18                 mov     eax, 0
.text:0000000000004A1D                 lea     rdx, format     ; "%s: %s"
.text:0000000000004A24                 mov     rcx, r13
.text:0000000000004A27                 cmp     esi, 16h
.text:0000000000004A2A                 cmovz   esi, eax        ; errnum
.text:0000000000004A2D                 test    ebx, ebx
.text:0000000000004A2F                 mov     eax, 1
.text:0000000000004A34                 cmovz   ebx, eax
.text:0000000000004A37                 xor     eax, eax
.text:0000000000004A39                 mov     edi, ebx        ; status
.text:0000000000004A3B                 call    _error
.text:0000000000004A40                 mov     rbp, [rsp+48h+var_48]
.text:0000000000004A44
.text:0000000000004A44 loc_4A44:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000004A44                 mov     rdx, [rsp+48h+var_40]
.text:0000000000004A49                 xor     rdx, fs:28h
.text:0000000000004A52                 mov     rax, rbp
.text:0000000000004A55                 jnz     short loc_4A9B
.text:0000000000004A57                 add     rsp, 18h
.text:0000000000004A5B                 pop     rbx
.text:0000000000004A5C                 pop     rbp
.text:0000000000004A5D                 pop     r12
.text:0000000000004A5F                 pop     r13
.text:0000000000004A61                 pop     r14
.text:0000000000004A63                 pop     r15
.text:0000000000004A65                 retn
.text:0000000000004A65 ; ---------------------------------------------------------------------------
.text:0000000000004A66                 align 10h
.text:0000000000004A70
.text:0000000000004A70 loc_4A70:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000004A70                 mov     ebp, eax
.text:0000000000004A72                 call    ___errno_location
.text:0000000000004A77                 cmp     ebp, 1
.text:0000000000004A7A                 mov     r14, rax
.text:0000000000004A7D                 jz      short loc_4A90
.text:0000000000004A7F                 cmp     ebp, 3
.text:0000000000004A82                 jnz     short loc_4A0A
.text:0000000000004A84                 mov     dword ptr [rax], 0
.text:0000000000004A8A                 jmp     loc_4A0A
.text:0000000000004A8A ; ---------------------------------------------------------------------------
.text:0000000000004A8F                 align 10h
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000004A90                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000004A96                 jmp     loc_4A0A
.text:0000000000004A9B ; ---------------------------------------------------------------------------
.text:0000000000004A9B
.text:0000000000004A9B loc_4A9B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:0000000000004A9B                 call    ___stack_chk_fail
.text:0000000000004A9B ; } // starts at 49A0
.text:0000000000004A9B xnumtoumax      endp
.text:0000000000004A9B
.text:0000000000004AA0
.text:0000000000004AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AA0
.text:0000000000004AA0 ; Attributes: info_from_lumina
.text:0000000000004AA0
.text:0000000000004AA0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000004AA0                 public xdectoumax
.text:0000000000004AA0 xdectoumax      proc near               ; CODE XREF: main+172↑p
.text:0000000000004AA0 ; __unwind {
.text:0000000000004AA0                 sub     rsp, 10h
.text:0000000000004AA4                 push    r9
.text:0000000000004AA6                 mov     r9, r8
.text:0000000000004AA9                 mov     r8, rcx
.text:0000000000004AAC                 mov     rcx, rdx
.text:0000000000004AAF                 mov     rdx, rsi
.text:0000000000004AB2                 mov     esi, 0Ah
.text:0000000000004AB7                 call    xnumtoumax
.text:0000000000004ABC                 add     rsp, 18h
.text:0000000000004AC0                 retn
.text:0000000000004AC0 ; } // starts at 4AA0
.text:0000000000004AC0 xdectoumax      endp
.text:0000000000004AC0
.text:0000000000004AC0 ; ---------------------------------------------------------------------------
.text:0000000000004AC1                 align 10h
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:0000000000004AD0                 public xstrtoumax
.text:0000000000004AD0 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:0000000000004AD0
.text:0000000000004AD0 base            = dword ptr -50h
.text:0000000000004AD0 endptr          = qword ptr -48h
.text:0000000000004AD0 var_40          = qword ptr -40h
.text:0000000000004AD0
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 push    r15
.text:0000000000004AD2                 push    r14
.text:0000000000004AD4                 push    r13
.text:0000000000004AD6                 push    r12
.text:0000000000004AD8                 push    rbp
.text:0000000000004AD9                 push    rbx
.text:0000000000004ADA                 sub     rsp, 28h
.text:0000000000004ADE                 mov     rax, fs:28h
.text:0000000000004AE7                 mov     [rsp+58h+var_40], rax
.text:0000000000004AEC                 xor     eax, eax
.text:0000000000004AEE                 cmp     edx, 24h ; '$'
.text:0000000000004AF1                 ja      loc_4E55
.text:0000000000004AF7                 lea     rax, [rsp+58h+endptr]
.text:0000000000004AFC                 mov     r15, rsi
.text:0000000000004AFF                 test    rsi, rsi
.text:0000000000004B02                 mov     rbp, rdi
.text:0000000000004B05                 mov     [rsp+58h+base], edx
.text:0000000000004B09                 mov     r14, rcx
.text:0000000000004B0C                 mov     r13, r8
.text:0000000000004B0F                 cmovz   r15, rax
.text:0000000000004B13                 call    ___errno_location
.text:0000000000004B18                 mov     dword ptr [rax], 0
.text:0000000000004B1E                 mov     r12, rax
.text:0000000000004B21                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000004B25                 call    ___ctype_b_loc
.text:0000000000004B2A                 mov     edx, [rsp+58h+base] ; base
.text:0000000000004B2E                 mov     rsi, [rax]
.text:0000000000004B31                 mov     rax, rbp
.text:0000000000004B34                 jmp     short loc_4B47
.text:0000000000004B34 ; ---------------------------------------------------------------------------
.text:0000000000004B36                 align 20h
.text:0000000000004B40
.text:0000000000004B40 loc_4B40:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000004B40                 add     rax, 1
.text:0000000000004B44                 movzx   ebx, byte ptr [rax]
.text:0000000000004B47
.text:0000000000004B47 loc_4B47:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000004B47                 movzx   ecx, bl
.text:0000000000004B4A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:0000000000004B4F                 jnz     short loc_4B40
.text:0000000000004B51                 cmp     bl, 2Dh ; '-'
.text:0000000000004B54                 jz      short loc_4BA8
.text:0000000000004B56                 xor     ecx, ecx        ; group
.text:0000000000004B58                 mov     rsi, r15        ; endptr
.text:0000000000004B5B                 mov     rdi, rbp        ; nptr
.text:0000000000004B5E                 call    ___strtoul_internal
.text:0000000000004B63                 mov     rcx, [r15]
.text:0000000000004B66                 mov     rbx, rax
.text:0000000000004B69                 cmp     rcx, rbp
.text:0000000000004B6C                 jz      short loc_4B98
.text:0000000000004B6E                 mov     eax, [r12]
.text:0000000000004B72                 test    eax, eax
.text:0000000000004B74                 jz      short loc_4BD8
.text:0000000000004B76                 cmp     eax, 22h ; '"'
.text:0000000000004B79                 mov     ebp, 1
.text:0000000000004B7E                 jnz     short loc_4BA8
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000004B80                 test    r13, r13
.text:0000000000004B83                 jz      short loc_4B8E
.text:0000000000004B85                 movzx   r12d, byte ptr [rcx]
.text:0000000000004B89                 test    r12b, r12b
.text:0000000000004B8C                 jnz     short loc_4C07
.text:0000000000004B8E
.text:0000000000004B8E loc_4B8E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:0000000000004B8E                 mov     [r14], rbx
.text:0000000000004B91                 jmp     short loc_4BAD
.text:0000000000004B91 ; ---------------------------------------------------------------------------
.text:0000000000004B93                 align 8
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000004B98                 test    r13, r13
.text:0000000000004B9B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004BA0                 jnz     short loc_4BE0
.text:0000000000004BA2                 nop     word ptr [rax+rax+00h]
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: xstrtoumax+84↑j
.text:0000000000004BA8                                         ; xstrtoumax+AE↑j ...
.text:0000000000004BA8                 mov     ebp, 4
.text:0000000000004BAD
.text:0000000000004BAD loc_4BAD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:0000000000004BAD                                         ; xstrtoumax+217↓j ...
.text:0000000000004BAD                 mov     rdi, [rsp+58h+var_40]
.text:0000000000004BB2                 xor     rdi, fs:28h
.text:0000000000004BBB                 mov     eax, ebp
.text:0000000000004BBD                 jnz     loc_4E50
.text:0000000000004BC3                 add     rsp, 28h
.text:0000000000004BC7                 pop     rbx
.text:0000000000004BC8                 pop     rbp
.text:0000000000004BC9                 pop     r12
.text:0000000000004BCB                 pop     r13
.text:0000000000004BCD                 pop     r14
.text:0000000000004BCF                 pop     r15
.text:0000000000004BD1                 retn
.text:0000000000004BD1 ; ---------------------------------------------------------------------------
.text:0000000000004BD2                 align 8
.text:0000000000004BD8
.text:0000000000004BD8 loc_4BD8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:0000000000004BD8                 xor     ebp, ebp
.text:0000000000004BDA                 jmp     short loc_4B80
.text:0000000000004BDA ; ---------------------------------------------------------------------------
.text:0000000000004BDC                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:0000000000004BE0                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000004BE5                 test    r12b, r12b
.text:0000000000004BE8                 jz      short loc_4BA8
.text:0000000000004BEA                 movsx   esi, r12b       ; c
.text:0000000000004BEE                 mov     rdi, r13        ; s
.text:0000000000004BF1                 xor     ebp, ebp
.text:0000000000004BF3                 call    _strchr
.text:0000000000004BF8                 test    rax, rax
.text:0000000000004BFB                 mov     ebx, 1
.text:0000000000004C00                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004C05                 jz      short loc_4BA8
.text:0000000000004C07
.text:0000000000004C07 loc_4C07:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000004C07                 movsx   esi, r12b       ; c
.text:0000000000004C0B                 mov     rdi, r13        ; s
.text:0000000000004C0E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004C13                 call    _strchr
.text:0000000000004C18                 test    rax, rax
.text:0000000000004C1B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004C20                 jz      def_4CA6        ; jumptable 0000000000004CA6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004C26                 lea     eax, [r12-45h]
.text:0000000000004C2B                 cmp     al, 2Fh ; '/'
.text:0000000000004C2D                 ja      short loc_4C80
.text:0000000000004C2F                 mov     rdx, 814400308945h
.text:0000000000004C39                 bt      rdx, rax
.text:0000000000004C3D                 jnb     short loc_4C80
.text:0000000000004C3F                 mov     esi, 30h ; '0'  ; c
.text:0000000000004C44                 mov     rdi, r13        ; s
.text:0000000000004C47                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000004C4C                 call    _strchr
.text:0000000000004C51                 test    rax, rax
.text:0000000000004C54                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000004C59                 jz      short loc_4C80
.text:0000000000004C5B                 movzx   eax, byte ptr [rcx+1]
.text:0000000000004C5F                 cmp     al, 44h ; 'D'
.text:0000000000004C61                 jz      short loc_4C6F
.text:0000000000004C63                 cmp     al, 69h ; 'i'
.text:0000000000004C65                 jz      loc_4E38
.text:0000000000004C6B                 cmp     al, 42h ; 'B'
.text:0000000000004C6D                 jnz     short loc_4C80
.text:0000000000004C6F
.text:0000000000004C6F loc_4C6F:                               ; CODE XREF: xstrtoumax+191↑j
.text:0000000000004C6F                 mov     edi, 2
.text:0000000000004C74                 mov     esi, 3E8h
.text:0000000000004C79                 jmp     short loc_4C8A
.text:0000000000004C79 ; ---------------------------------------------------------------------------
.text:0000000000004C7B                 align 20h
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000004C80                                         ; xstrtoumax+16D↑j ...
.text:0000000000004C80                 mov     edi, 1
.text:0000000000004C85                 mov     esi, 400h
.text:0000000000004C8A
.text:0000000000004C8A loc_4C8A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:0000000000004C8A                                         ; xstrtoumax+37B↓j
.text:0000000000004C8A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:0000000000004C8E                 cmp     r12b, 35h
.text:0000000000004C92                 ja      short def_4CA6  ; jumptable 0000000000004CA6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004C94                 lea     rdx, jpt_4CA6
.text:0000000000004C9B                 movzx   r12d, r12b
.text:0000000000004C9F                 movsxd  rax, ds:(jpt_4CA6 - 5F68h)[rdx+r12*4]
.text:0000000000004CA3                 add     rax, rdx
.text:0000000000004CA6                 jmp     rax             ; switch jump
.text:0000000000004CA8 ; ---------------------------------------------------------------------------
.text:0000000000004CA8
.text:0000000000004CA8 loc_4CA8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004CA8                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004CA8                 mov     rax, rbx        ; jumptable 0000000000004CA6 cases 77,109
.text:0000000000004CAB                 mul     rsi
.text:0000000000004CAE                 jo      loc_4EA1
.text:0000000000004CB4                 xor     r8d, r8d
.text:0000000000004CB7
.text:0000000000004CB7 loc_4CB7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:0000000000004CB7                                         ; xstrtoumax+35E↓j ...
.text:0000000000004CB7                 mul     rsi
.text:0000000000004CBA                 jo      loc_4E92
.text:0000000000004CC0                 mov     rbx, rax
.text:0000000000004CC3
.text:0000000000004CC3 loc_4CC3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:0000000000004CC3                 or      ebp, r8d
.text:0000000000004CC6                 db      2Eh
.text:0000000000004CC6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004CD0                                         ; xstrtoumax+23B↓j ...
.text:0000000000004CD0                 movsxd  rdi, edi        ; jumptable 0000000000004CA6 case 99
.text:0000000000004CD3                 mov     eax, ebp
.text:0000000000004CD5                 add     rcx, rdi
.text:0000000000004CD8                 or      eax, 2
.text:0000000000004CDB                 mov     [r15], rcx
.text:0000000000004CDE                 cmp     byte ptr [rcx], 0
.text:0000000000004CE1                 mov     [r14], rbx
.text:0000000000004CE4                 cmovnz  ebp, eax
.text:0000000000004CE7                 jmp     loc_4BAD
.text:0000000000004CEC ; ---------------------------------------------------------------------------
.text:0000000000004CEC
.text:0000000000004CEC def_4CA6:                               ; CODE XREF: xstrtoumax+150↑j
.text:0000000000004CEC                                         ; xstrtoumax+1C2↑j ...
.text:0000000000004CEC                 mov     [r14], rbx      ; jumptable 0000000000004CA6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000004CEF                 or      ebp, 2
.text:0000000000004CF2                 jmp     loc_4BAD
.text:0000000000004CF7 ; ---------------------------------------------------------------------------
.text:0000000000004CF7
.text:0000000000004CF7 loc_4CF7:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004CF7                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004CF7                 mov     edx, 2          ; jumptable 0000000000004CA6 case 119
.text:0000000000004CFC                 mov     rax, rdx
.text:0000000000004CFF                 mul     rbx
.text:0000000000004D02                 jo      loc_4D9E
.text:0000000000004D08                 add     rbx, rbx
.text:0000000000004D0B                 jmp     short loc_4CD0  ; jumptable 0000000000004CA6 case 99
.text:0000000000004D0D ; ---------------------------------------------------------------------------
.text:0000000000004D0D
.text:0000000000004D0D loc_4D0D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004D0D                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004D0D                 mov     edx, 200h       ; jumptable 0000000000004CA6 case 98
.text:0000000000004D12                 mov     rax, rdx
.text:0000000000004D15                 mul     rbx
.text:0000000000004D18                 jo      loc_4D9E
.text:0000000000004D1E                 shl     rbx, 9
.text:0000000000004D22                 jmp     short loc_4CD0  ; jumptable 0000000000004CA6 case 99
.text:0000000000004D24 ; ---------------------------------------------------------------------------
.text:0000000000004D24
.text:0000000000004D24 loc_4D24:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004D24                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004D24                 mov     r8d, 7          ; jumptable 0000000000004CA6 case 90
.text:0000000000004D2A                 xor     r9d, r9d
.text:0000000000004D2D                 nop     dword ptr [rax]
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000004D30                 mov     rax, rbx
.text:0000000000004D33                 mul     rsi
.text:0000000000004D36                 mov     rbx, rax
.text:0000000000004D39                 jo      loc_4ECE
.text:0000000000004D3F
.text:0000000000004D3F loc_4D3F:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000004D3F                 sub     r8d, 1
.text:0000000000004D43                 jnz     short loc_4D30
.text:0000000000004D45
.text:0000000000004D45 loc_4D45:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000004D45                                         ; xstrtoumax+2BD↓j ...
.text:0000000000004D45                 or      ebp, r9d
.text:0000000000004D48                 jmp     short loc_4CD0  ; jumptable 0000000000004CA6 case 99
.text:0000000000004D4A ; ---------------------------------------------------------------------------
.text:0000000000004D4A
.text:0000000000004D4A loc_4D4A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004D4A                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004D4A                 mov     r8d, 8          ; jumptable 0000000000004CA6 case 89
.text:0000000000004D50                 xor     r9d, r9d
.text:0000000000004D53                 nop     dword ptr [rax+rax+00h]
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000004D58                 mov     rax, rbx
.text:0000000000004D5B                 mul     rsi
.text:0000000000004D5E                 mov     rbx, rax
.text:0000000000004D61                 jo      loc_4EB0
.text:0000000000004D67
.text:0000000000004D67 loc_4D67:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000004D67                 sub     r8d, 1
.text:0000000000004D6B                 jnz     short loc_4D58
.text:0000000000004D6D                 jmp     short loc_4D45
.text:0000000000004D6F ; ---------------------------------------------------------------------------
.text:0000000000004D6F
.text:0000000000004D6F loc_4D6F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004D6F                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004D6F                 mov     r8d, 4          ; jumptable 0000000000004CA6 cases 84,116
.text:0000000000004D75                 xor     r9d, r9d
.text:0000000000004D78
.text:0000000000004D78 loc_4D78:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000004D78                 mov     rax, rbx
.text:0000000000004D7B                 mul     rsi
.text:0000000000004D7E                 mov     rbx, rax
.text:0000000000004D81                 jo      loc_4E83
.text:0000000000004D87
.text:0000000000004D87 loc_4D87:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000004D87                 sub     r8d, 1
.text:0000000000004D8B                 jnz     short loc_4D78
.text:0000000000004D8D                 jmp     short loc_4D45
.text:0000000000004D8F ; ---------------------------------------------------------------------------
.text:0000000000004D8F
.text:0000000000004D8F loc_4D8F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004D8F                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004D8F                 mov     rax, rbx        ; jumptable 0000000000004CA6 cases 75,107
.text:0000000000004D92                 mul     rsi
.text:0000000000004D95                 mov     rbx, rax
.text:0000000000004D98                 jno     loc_4CD0        ; jumptable 0000000000004CA6 case 99
.text:0000000000004D9E
.text:0000000000004D9E loc_4D9E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000004D9E                                         ; xstrtoumax+248↑j ...
.text:0000000000004D9E                 mov     ebp, 1
.text:0000000000004DA3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004DA7                 jmp     loc_4CD0        ; jumptable 0000000000004CA6 case 99
.text:0000000000004DA7 ; ---------------------------------------------------------------------------
.text:0000000000004DAC                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004DB0                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004DB0                 mov     r8d, 5          ; jumptable 0000000000004CA6 case 80
.text:0000000000004DB6                 xor     r9d, r9d
.text:0000000000004DB9
.text:0000000000004DB9 loc_4DB9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000004DB9                 mov     rax, rbx
.text:0000000000004DBC                 mul     rsi
.text:0000000000004DBF                 mov     rbx, rax
.text:0000000000004DC2                 jo      loc_4EBF
.text:0000000000004DC8
.text:0000000000004DC8 loc_4DC8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000004DC8                 sub     r8d, 1
.text:0000000000004DCC                 jnz     short loc_4DB9
.text:0000000000004DCE                 jmp     loc_4D45
.text:0000000000004DD3 ; ---------------------------------------------------------------------------
.text:0000000000004DD3
.text:0000000000004DD3 loc_4DD3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004DD3                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004DD3                 mov     r8d, 6          ; jumptable 0000000000004CA6 case 69
.text:0000000000004DD9                 xor     r9d, r9d
.text:0000000000004DDC
.text:0000000000004DDC loc_4DDC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000004DDC                 mov     rax, rbx
.text:0000000000004DDF                 mul     rsi
.text:0000000000004DE2                 mov     rbx, rax
.text:0000000000004DE5                 jo      loc_4E74
.text:0000000000004DEB
.text:0000000000004DEB loc_4DEB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000004DEB                 sub     r8d, 1
.text:0000000000004DEF                 jnz     short loc_4DDC
.text:0000000000004DF1                 jmp     loc_4D45
.text:0000000000004DF6 ; ---------------------------------------------------------------------------
.text:0000000000004DF6
.text:0000000000004DF6 loc_4DF6:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004DF6                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004DF6                 mov     edx, 400h       ; jumptable 0000000000004CA6 case 66
.text:0000000000004DFB                 mov     rax, rdx
.text:0000000000004DFE                 mul     rbx
.text:0000000000004E01                 jo      short loc_4D9E
.text:0000000000004E03                 shl     rbx, 0Ah
.text:0000000000004E07                 jmp     loc_4CD0        ; jumptable 0000000000004CA6 case 99
.text:0000000000004E0C ; ---------------------------------------------------------------------------
.text:0000000000004E0C
.text:0000000000004E0C loc_4E0C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000004E0C                                         ; DATA XREF: .rodata:jpt_4CA6↓o
.text:0000000000004E0C                 mov     rax, rbx        ; jumptable 0000000000004CA6 cases 71,103
.text:0000000000004E0F                 mul     rsi
.text:0000000000004E12                 jo      loc_4EDD
.text:0000000000004E18                 xor     r8d, r8d
.text:0000000000004E1B
.text:0000000000004E1B loc_4E1B:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000004E1B                 mul     rsi
.text:0000000000004E1E                 jno     loc_4CB7
.text:0000000000004E24                 mov     r8d, 1
.text:0000000000004E2A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E2E                 jmp     loc_4CB7
.text:0000000000004E2E ; ---------------------------------------------------------------------------
.text:0000000000004E33                 align 8
.text:0000000000004E38
.text:0000000000004E38 loc_4E38:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000004E38                 xor     edi, edi
.text:0000000000004E3A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000004E3E                 mov     esi, 400h
.text:0000000000004E43                 setz    dil
.text:0000000000004E47                 lea     edi, [rdi+rdi+1]
.text:0000000000004E4B                 jmp     loc_4C8A
.text:0000000000004E50 ; ---------------------------------------------------------------------------
.text:0000000000004E50
.text:0000000000004E50 loc_4E50:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000004E50                 call    ___stack_chk_fail
.text:0000000000004E55 ; ---------------------------------------------------------------------------
.text:0000000000004E55
.text:0000000000004E55 loc_4E55:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000004E55                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoumax"
.text:0000000000004E5C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000004E63                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000004E6A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000004E6F                 call    ___assert_fail
.text:0000000000004E74 ; ---------------------------------------------------------------------------
.text:0000000000004E74
.text:0000000000004E74 loc_4E74:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000004E74                 mov     r9d, 1
.text:0000000000004E7A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E7E                 jmp     loc_4DEB
.text:0000000000004E83 ; ---------------------------------------------------------------------------
.text:0000000000004E83
.text:0000000000004E83 loc_4E83:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000004E83                 mov     r9d, 1
.text:0000000000004E89                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E8D                 jmp     loc_4D87
.text:0000000000004E92 ; ---------------------------------------------------------------------------
.text:0000000000004E92
.text:0000000000004E92 loc_4E92:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000004E92                 mov     r8d, 1
.text:0000000000004E98                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E9C                 jmp     loc_4CC3
.text:0000000000004EA1 ; ---------------------------------------------------------------------------
.text:0000000000004EA1
.text:0000000000004EA1 loc_4EA1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000004EA1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EA5                 mov     r8d, 1
.text:0000000000004EAB                 jmp     loc_4CB7
.text:0000000000004EB0 ; ---------------------------------------------------------------------------
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000004EB0                 mov     r9d, 1
.text:0000000000004EB6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EBA                 jmp     loc_4D67
.text:0000000000004EBF ; ---------------------------------------------------------------------------
.text:0000000000004EBF
.text:0000000000004EBF loc_4EBF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000004EBF                 mov     r9d, 1
.text:0000000000004EC5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EC9                 jmp     loc_4DC8
.text:0000000000004ECE ; ---------------------------------------------------------------------------
.text:0000000000004ECE
.text:0000000000004ECE loc_4ECE:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000004ECE                 mov     r9d, 1
.text:0000000000004ED4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004ED8                 jmp     loc_4D3F
.text:0000000000004EDD ; ---------------------------------------------------------------------------
.text:0000000000004EDD
.text:0000000000004EDD loc_4EDD:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000004EDD                 mov     r8d, 1
.text:0000000000004EE3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EE7                 jmp     loc_4E1B
.text:0000000000004EE7 ; } // starts at 4AD0
.text:0000000000004EE7 xstrtoumax      endp
.text:0000000000004EE7
.text:0000000000004EE7 ; ---------------------------------------------------------------------------
.text:0000000000004EEC                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EF0
.text:0000000000004EF0 ; Attributes: info_from_lumina
.text:0000000000004EF0
.text:0000000000004EF0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004EF0                 public rpl_fclose
.text:0000000000004EF0 rpl_fclose      proc near               ; CODE XREF: main+218↑p
.text:0000000000004EF0                                         ; fold_file+36C↑p ...
.text:0000000000004EF0 ; __unwind {
.text:0000000000004EF0                 push    r12
.text:0000000000004EF2                 push    rbp
.text:0000000000004EF3                 push    rbx
.text:0000000000004EF4                 mov     rbx, rdi
.text:0000000000004EF7                 call    _fileno
.text:0000000000004EFC                 test    eax, eax
.text:0000000000004EFE                 mov     rdi, rbx        ; fp
.text:0000000000004F01                 js      short loc_4F57
.text:0000000000004F03                 call    ___freading
.text:0000000000004F08                 test    eax, eax
.text:0000000000004F0A                 jnz     short loc_4F38
.text:0000000000004F0C
.text:0000000000004F0C loc_4F0C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004F0C                 mov     rdi, rbx        ; stream
.text:0000000000004F0F                 call    rpl_fflush
.text:0000000000004F14                 test    eax, eax
.text:0000000000004F16                 jz      short loc_4F54
.text:0000000000004F18                 call    ___errno_location
.text:0000000000004F1D                 mov     r12d, [rax]
.text:0000000000004F20                 mov     rdi, rbx        ; stream
.text:0000000000004F23                 mov     rbp, rax
.text:0000000000004F26                 call    _fclose
.text:0000000000004F2B                 test    r12d, r12d
.text:0000000000004F2E                 jnz     short loc_4F60
.text:0000000000004F30
.text:0000000000004F30 loc_4F30:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004F30                 pop     rbx
.text:0000000000004F31                 pop     rbp
.text:0000000000004F32                 pop     r12
.text:0000000000004F34                 retn
.text:0000000000004F34 ; ---------------------------------------------------------------------------
.text:0000000000004F35                 align 8
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004F38                 mov     rdi, rbx        ; stream
.text:0000000000004F3B                 call    _fileno
.text:0000000000004F40                 xor     esi, esi        ; offset
.text:0000000000004F42                 mov     edx, 1          ; whence
.text:0000000000004F47                 mov     edi, eax        ; fd
.text:0000000000004F49                 call    _lseek
.text:0000000000004F4E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004F52                 jnz     short loc_4F0C
.text:0000000000004F54
.text:0000000000004F54 loc_4F54:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004F54                 mov     rdi, rbx        ; stream
.text:0000000000004F57
.text:0000000000004F57 loc_4F57:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004F57                 pop     rbx
.text:0000000000004F58                 pop     rbp
.text:0000000000004F59                 pop     r12
.text:0000000000004F5B                 jmp     _fclose
.text:0000000000004F60 ; ---------------------------------------------------------------------------
.text:0000000000004F60
.text:0000000000004F60 loc_4F60:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004F60                 mov     [rbp+0], r12d
.text:0000000000004F64                 mov     eax, 0FFFFFFFFh
.text:0000000000004F69                 jmp     short loc_4F30
.text:0000000000004F69 ; } // starts at 4EF0
.text:0000000000004F69 rpl_fclose      endp
.text:0000000000004F69
.text:0000000000004F69 ; ---------------------------------------------------------------------------
.text:0000000000004F6B                 align 10h
.text:0000000000004F70
.text:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F70
.text:0000000000004F70 ; Attributes: info_from_lumina
.text:0000000000004F70
.text:0000000000004F70 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004F70                 public rpl_fflush
.text:0000000000004F70 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004F70 ; __unwind {
.text:0000000000004F70                 test    rdi, rdi
.text:0000000000004F73                 push    rbx
.text:0000000000004F74                 mov     rbx, rdi
.text:0000000000004F77                 jz      short loc_4F8A
.text:0000000000004F79                 call    ___freading
.text:0000000000004F7E                 test    eax, eax
.text:0000000000004F80                 jz      short loc_4F8A
.text:0000000000004F82                 test    dword ptr [rbx], 100h
.text:0000000000004F88                 jnz     short loc_4F98
.text:0000000000004F8A
.text:0000000000004F8A loc_4F8A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004F8A                                         ; rpl_fflush+10↑j
.text:0000000000004F8A                 mov     rdi, rbx        ; stream
.text:0000000000004F8D                 pop     rbx
.text:0000000000004F8E                 jmp     _fflush
.text:0000000000004F8E ; ---------------------------------------------------------------------------
.text:0000000000004F93                 align 8
.text:0000000000004F98
.text:0000000000004F98 loc_4F98:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004F98                 mov     rdi, rbx
.text:0000000000004F9B                 mov     edx, 1
.text:0000000000004FA0                 xor     esi, esi
.text:0000000000004FA2                 call    rpl_fseeko
.text:0000000000004FA7                 mov     rdi, rbx        ; stream
.text:0000000000004FAA                 pop     rbx
.text:0000000000004FAB                 jmp     _fflush
.text:0000000000004FAB ; } // starts at 4F70
.text:0000000000004FAB rpl_fflush      endp
.text:0000000000004FAB
.text:0000000000004FB0
.text:0000000000004FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FB0
.text:0000000000004FB0 ; Attributes: info_from_lumina
.text:0000000000004FB0
.text:0000000000004FB0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004FB0                 public rpl_fseeko
.text:0000000000004FB0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004FB0 ; __unwind {
.text:0000000000004FB0                 mov     rax, [rdi+8]
.text:0000000000004FB4                 cmp     [rdi+10h], rax
.text:0000000000004FB8                 jz      short loc_4FC0
.text:0000000000004FBA
.text:0000000000004FBA loc_4FBA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004FBA                                         ; rpl_fseeko+1F↓j
.text:0000000000004FBA                 jmp     _fseeko
.text:0000000000004FBA ; ---------------------------------------------------------------------------
.text:0000000000004FBF                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004FC0                 mov     rax, [rdi+20h]
.text:0000000000004FC4                 cmp     [rdi+28h], rax
.text:0000000000004FC8                 jnz     short loc_4FBA
.text:0000000000004FCA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004FCF                 jnz     short loc_4FBA
.text:0000000000004FD1                 push    r12
.text:0000000000004FD3                 push    rbp
.text:0000000000004FD4                 mov     r12d, edx
.text:0000000000004FD7                 push    rbx
.text:0000000000004FD8                 mov     rbp, rsi
.text:0000000000004FDB                 mov     rbx, rdi
.text:0000000000004FDE                 call    _fileno
.text:0000000000004FE3                 mov     edx, r12d       ; whence
.text:0000000000004FE6                 mov     rsi, rbp        ; offset
.text:0000000000004FE9                 mov     edi, eax        ; fd
.text:0000000000004FEB                 call    _lseek
.text:0000000000004FF0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004FF4                 jz      short loc_5002
.text:0000000000004FF6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004FF9                 mov     [rbx+90h], rax
.text:0000000000005000                 xor     eax, eax
.text:0000000000005002
.text:0000000000005002 loc_5002:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000005002                 pop     rbx
.text:0000000000005003                 pop     rbp
.text:0000000000005004                 pop     r12
.text:0000000000005006                 retn
.text:0000000000005006 ; } // starts at 4FB0
.text:0000000000005006 rpl_fseeko      endp
.text:0000000000005006
.text:0000000000005006 ; ---------------------------------------------------------------------------
.text:0000000000005007                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010 ; Attributes: info_from_lumina
.text:0000000000005010
.text:0000000000005010 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005010                 public rpl_mbrtowc
.text:0000000000005010 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005010
.text:0000000000005010 pwc             = dword ptr -34h
.text:0000000000005010 var_30          = qword ptr -30h
.text:0000000000005010
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 push    r13
.text:0000000000005012                 push    r12
.text:0000000000005014                 mov     r13, rsi
.text:0000000000005017                 push    rbp
.text:0000000000005018                 push    rbx
.text:0000000000005019                 mov     rbx, rdi
.text:000000000000501C                 mov     r12, rdx
.text:000000000000501F                 sub     rsp, 18h
.text:0000000000005023                 mov     rax, fs:28h
.text:000000000000502C                 mov     [rsp+38h+var_30], rax
.text:0000000000005031                 xor     eax, eax
.text:0000000000005033                 lea     rax, [rsp+38h+pwc]
.text:0000000000005038                 test    rdi, rdi
.text:000000000000503B                 cmovz   rbx, rax
.text:000000000000503F                 mov     rdi, rbx        ; pwc
.text:0000000000005042                 call    _mbrtowc
.text:0000000000005047                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000504B                 mov     rbp, rax
.text:000000000000504E                 jbe     short loc_5070
.text:0000000000005050                 test    r12, r12
.text:0000000000005053                 jz      short loc_5070
.text:0000000000005055                 xor     edi, edi
.text:0000000000005057                 call    hard_locale
.text:000000000000505C                 test    al, al
.text:000000000000505E                 jnz     short loc_5070
.text:0000000000005060                 movzx   eax, byte ptr [r13+0]
.text:0000000000005065                 mov     ebp, 1
.text:000000000000506A                 mov     [rbx], eax
.text:000000000000506C                 nop     dword ptr [rax+00h]
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005070                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005070                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005075                 xor     rdx, fs:28h
.text:000000000000507E                 mov     rax, rbp
.text:0000000000005081                 jnz     short loc_508E
.text:0000000000005083                 add     rsp, 18h
.text:0000000000005087                 pop     rbx
.text:0000000000005088                 pop     rbp
.text:0000000000005089                 pop     r12
.text:000000000000508B                 pop     r13
.text:000000000000508D                 retn
.text:000000000000508E ; ---------------------------------------------------------------------------
.text:000000000000508E
.text:000000000000508E loc_508E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000508E                 call    ___stack_chk_fail
.text:000000000000508E ; } // starts at 5010
.text:000000000000508E rpl_mbrtowc     endp
.text:000000000000508E
.text:000000000000508E ; ---------------------------------------------------------------------------
.text:0000000000005093                 align 20h
.text:00000000000050A0
.text:00000000000050A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050A0
.text:00000000000050A0 ; Attributes: info_from_lumina
.text:00000000000050A0
.text:00000000000050A0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000050A0                 public close_stream
.text:00000000000050A0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000050A0                                         ; close_stdout+33↑p
.text:00000000000050A0 ; __unwind {
.text:00000000000050A0                 push    r12
.text:00000000000050A2                 push    rbp
.text:00000000000050A3                 mov     rbp, rdi
.text:00000000000050A6                 push    rbx
.text:00000000000050A7                 call    ___fpending
.text:00000000000050AC                 mov     ebx, [rbp+0]
.text:00000000000050AF                 mov     rdi, rbp        ; stream
.text:00000000000050B2                 mov     r12, rax
.text:00000000000050B5                 call    rpl_fclose
.text:00000000000050BA                 and     ebx, 20h
.text:00000000000050BD                 test    ebx, ebx
.text:00000000000050BF                 jnz     short loc_50D8
.text:00000000000050C1                 test    eax, eax
.text:00000000000050C3                 jz      short loc_50CF
.text:00000000000050C5                 test    r12, r12
.text:00000000000050C8                 mov     eax, 0FFFFFFFFh
.text:00000000000050CD                 jz      short loc_5108
.text:00000000000050CF
.text:00000000000050CF loc_50CF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000050CF                 pop     rbx
.text:00000000000050D0                 pop     rbp
.text:00000000000050D1                 pop     r12
.text:00000000000050D3                 retn
.text:00000000000050D3 ; ---------------------------------------------------------------------------
.text:00000000000050D4                 align 8
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000050D8                 test    eax, eax
.text:00000000000050DA                 jnz     short loc_50F8
.text:00000000000050DC                 call    ___errno_location
.text:00000000000050E1                 mov     dword ptr [rax], 0
.text:00000000000050E7                 mov     eax, 0FFFFFFFFh
.text:00000000000050EC                 pop     rbx
.text:00000000000050ED                 pop     rbp
.text:00000000000050EE                 pop     r12
.text:00000000000050F0                 retn
.text:00000000000050F0 ; ---------------------------------------------------------------------------
.text:00000000000050F1                 align 8
.text:00000000000050F8
.text:00000000000050F8 loc_50F8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000050F8                 pop     rbx
.text:00000000000050F9                 mov     eax, 0FFFFFFFFh
.text:00000000000050FE                 pop     rbp
.text:00000000000050FF                 pop     r12
.text:0000000000005101                 retn
.text:0000000000005101 ; ---------------------------------------------------------------------------
.text:0000000000005102                 align 8
.text:0000000000005108
.text:0000000000005108 loc_5108:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005108                 call    ___errno_location
.text:000000000000510D                 cmp     dword ptr [rax], 9
.text:0000000000005110                 pop     rbx
.text:0000000000005111                 pop     rbp
.text:0000000000005112                 pop     r12
.text:0000000000005114                 setnz   al
.text:0000000000005117                 movzx   eax, al
.text:000000000000511A                 neg     eax
.text:000000000000511C                 retn
.text:000000000000511C ; } // starts at 50A0
.text:000000000000511C close_stream    endp
.text:000000000000511C
.text:000000000000511C ; ---------------------------------------------------------------------------
.text:000000000000511D                 align 20h
.text:0000000000005120
.text:0000000000005120 ; =============== S U B R O U T I N E =======================================
.text:0000000000005120
.text:0000000000005120
.text:0000000000005120                 public hard_locale
.text:0000000000005120 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005120 ; __unwind {
.text:0000000000005120                 sub     rsp, 8
.text:0000000000005124                 xor     esi, esi        ; locale
.text:0000000000005126                 call    _setlocale
.text:000000000000512B                 mov     rdx, rax
.text:000000000000512E                 mov     eax, 1
.text:0000000000005133                 test    rdx, rdx
.text:0000000000005136                 jz      short loc_5155
.text:0000000000005138                 lea     rdi, aC         ; "C"
.text:000000000000513F                 mov     ecx, 2
.text:0000000000005144                 mov     rsi, rdx
.text:0000000000005147                 repe cmpsb
.text:0000000000005149                 setnbe  cl
.text:000000000000514C                 sbb     cl, 0
.text:000000000000514F                 xor     eax, eax
.text:0000000000005151                 test    cl, cl
.text:0000000000005153                 jnz     short loc_5160
.text:0000000000005155
.text:0000000000005155 loc_5155:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005155                 add     rsp, 8
.text:0000000000005159                 retn
.text:0000000000005159 ; ---------------------------------------------------------------------------
.text:000000000000515A                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005160                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005167                 mov     ecx, 6
.text:000000000000516C                 mov     rsi, rdx
.text:000000000000516F                 repe cmpsb
.text:0000000000005171                 setnbe  al
.text:0000000000005174                 sbb     al, 0
.text:0000000000005176                 test    al, al
.text:0000000000005178                 setnz   al
.text:000000000000517B                 add     rsp, 8
.text:000000000000517F                 retn
.text:000000000000517F ; } // starts at 5120
.text:000000000000517F hard_locale     endp
.text:000000000000517F
.text:0000000000005180
.text:0000000000005180 ; =============== S U B R O U T I N E =======================================
.text:0000000000005180
.text:0000000000005180
.text:0000000000005180                 public locale_charset
.text:0000000000005180 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005180 ; __unwind {
.text:0000000000005180                 sub     rsp, 8
.text:0000000000005184                 mov     edi, 0Eh        ; item
.text:0000000000005189                 call    _nl_langinfo
.text:000000000000518E                 test    rax, rax
.text:0000000000005191                 jz      short loc_51B0
.text:0000000000005193                 cmp     byte ptr [rax], 0
.text:0000000000005196                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000519D                 cmovz   rax, rdx
.text:00000000000051A1                 add     rsp, 8
.text:00000000000051A5                 retn
.text:00000000000051A5 ; ---------------------------------------------------------------------------
.text:00000000000051A6                 align 10h
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000051B0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000051B7                 add     rsp, 8
.text:00000000000051BB                 retn
.text:00000000000051BB ; } // starts at 5180
.text:00000000000051BB locale_charset  endp
.text:00000000000051BB
.text:00000000000051BB ; ---------------------------------------------------------------------------
.text:00000000000051BC                 align 20h
.text:00000000000051C0
.text:00000000000051C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051C0
.text:00000000000051C0 ; Attributes: info_from_lumina
.text:00000000000051C0
.text:00000000000051C0 ; void _libc_csu_init(void)
.text:00000000000051C0                 public __libc_csu_init
.text:00000000000051C0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000051C0 ; __unwind {
.text:00000000000051C0                 push    r15
.text:00000000000051C2                 push    r14
.text:00000000000051C4                 mov     r15, rdx
.text:00000000000051C7                 push    r13
.text:00000000000051C9                 push    r12
.text:00000000000051CB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000051D2                 push    rbp
.text:00000000000051D3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000051DA                 push    rbx
.text:00000000000051DB                 mov     r13d, edi
.text:00000000000051DE                 mov     r14, rsi
.text:00000000000051E1                 sub     rbp, r12
.text:00000000000051E4                 sub     rsp, 8
.text:00000000000051E8                 sar     rbp, 3
.text:00000000000051EC                 call    _init_proc
.text:00000000000051F1                 test    rbp, rbp
.text:00000000000051F4                 jz      short loc_5216
.text:00000000000051F6                 xor     ebx, ebx
.text:00000000000051F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005200
.text:0000000000005200 loc_5200:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000005200                 mov     rdx, r15
.text:0000000000005203                 mov     rsi, r14
.text:0000000000005206                 mov     edi, r13d
.text:0000000000005209                 call    ds:(__frame_dummy_init_array_entry - 207B10h)[r12+rbx*8]
.text:000000000000520D                 add     rbx, 1
.text:0000000000005211                 cmp     rbp, rbx
.text:0000000000005214                 jnz     short loc_5200
.text:0000000000005216
.text:0000000000005216 loc_5216:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000005216                 add     rsp, 8
.text:000000000000521A                 pop     rbx
.text:000000000000521B                 pop     rbp
.text:000000000000521C                 pop     r12
.text:000000000000521E                 pop     r13
.text:0000000000005220                 pop     r14
.text:0000000000005222                 pop     r15
.text:0000000000005224                 retn
.text:0000000000005224 ; } // starts at 51C0
.text:0000000000005224 __libc_csu_init endp
.text:0000000000005224
.text:0000000000005224 ; ---------------------------------------------------------------------------
.text:0000000000005225                 align 10h
.text:0000000000005230
.text:0000000000005230 ; =============== S U B R O U T I N E =======================================
.text:0000000000005230
.text:0000000000005230
.text:0000000000005230 ; void _libc_csu_fini(void)
.text:0000000000005230                 public __libc_csu_fini
.text:0000000000005230 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005230 ; __unwind {
.text:0000000000005230                 rep retn
.text:0000000000005230 ; } // starts at 5230
.text:0000000000005230 __libc_csu_fini endp
.text:0000000000005230
.text:0000000000005230 ; ---------------------------------------------------------------------------
.text:0000000000005232                 align 20h
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240
.text:0000000000005240 atexit          proc near               ; CODE XREF: main+69↑p
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005247                 xor     esi, esi        ; obj
.text:0000000000005249                 jmp     ___cxa_atexit
.text:0000000000005249 ; } // starts at 5240
.text:0000000000005249 atexit          endp
.text:0000000000005249
.text:0000000000005249 _text           ends
.text:0000000000005249
LOAD:000000000000524E ; ===========================================================================
LOAD:000000000000524E
LOAD:000000000000524E ; Segment type: Pure code
LOAD:000000000000524E ; Segment permissions: Read/Execute
LOAD:000000000000524E LOAD            segment byte public 'CODE' use64
LOAD:000000000000524E                 assume cs:LOAD
LOAD:000000000000524E                 ;org 524Eh
LOAD:000000000000524E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000524E                 align 10h
LOAD:000000000000524E LOAD            ends
LOAD:000000000000524E
.fini:0000000000005250 ; ===========================================================================
.fini:0000000000005250
.fini:0000000000005250 ; Segment type: Pure code
.fini:0000000000005250 ; Segment permissions: Read/Execute
.fini:0000000000005250 _fini           segment dword public 'CODE' use64
.fini:0000000000005250                 assume cs:_fini
.fini:0000000000005250                 ;org 5250h
.fini:0000000000005250                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005250
.fini:0000000000005250 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005250
.fini:0000000000005250
.fini:0000000000005250                 public _term_proc
.fini:0000000000005250 _term_proc      proc near
.fini:0000000000005250                 sub     rsp, 8          ; _fini
.fini:0000000000005254                 add     rsp, 8
.fini:0000000000005258                 retn
.fini:0000000000005258 _term_proc      endp
.fini:0000000000005258
.fini:0000000000005258 _fini           ends
.fini:0000000000005258
LOAD:0000000000005259 ; ===========================================================================
LOAD:0000000000005259
LOAD:0000000000005259 ; Segment type: Pure code
LOAD:0000000000005259 ; Segment permissions: Read/Execute
LOAD:0000000000005259 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005259                 assume cs:LOAD
LOAD:0000000000005259                 ;org 5259h
LOAD:0000000000005259                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005259                 align 20h
LOAD:0000000000005259 LOAD            ends
LOAD:0000000000005259
.rodata:0000000000005260 ; ===========================================================================
.rodata:0000000000005260
.rodata:0000000000005260 ; Segment type: Pure data
.rodata:0000000000005260 ; Segment permissions: Read
.rodata:0000000000005260 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005260                 assume cs:_rodata
.rodata:0000000000005260                 ;org 5260h
.rodata:0000000000005260                 public _IO_stdin_used
.rodata:0000000000005260 _IO_stdin_used  db    1
.rodata:0000000000005261                 db    0
.rodata:0000000000005262                 db    2
.rodata:0000000000005263                 db    0
.rodata:0000000000005264 aFold           db 'fold',0             ; DATA XREF: main+10C↑o
.rodata:0000000000005264                                         ; usage+156↑o ...
.rodata:0000000000005269 asc_5269        db '[',0                ; DATA XREF: usage+162↑o
.rodata:000000000000526B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+189↑o
.rodata:000000000000527B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000527B                                         ; DATA XREF: usage+1B9↑o
.rodata:000000000000527B                                         ; usage+2B4↑o ...
.rodata:0000000000005291 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CA↑o
.rodata:000000000000529B aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1D6↑o
.rodata:00000000000052AA aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+169↑o
.rodata:00000000000052B4 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+195↑o
.rodata:00000000000052BE aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1AD↑o
.rodata:00000000000052C8 ; const char aSOnlineHelpS[]
.rodata:00000000000052C8 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:00000000000052C8                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000052DF unk_52DF        db  47h ; G             ; DATA XREF: main+105↑o
.rodata:00000000000052DF                                         ; usage+23E↑o ...
.rodata:00000000000052E0                 db  4Eh ; N
.rodata:00000000000052E1                 db  55h ; U
.rodata:00000000000052E2                 db  20h
.rodata:00000000000052E3 ; const char domainname[]
.rodata:00000000000052E3 domainname      db 'coreutils',0        ; DATA XREF: main+4A↑o
.rodata:00000000000052E3                                         ; main+56↑o ...
.rodata:00000000000052ED ; const char s2[]
.rodata:00000000000052ED s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:00000000000052ED                                         ; usage+326↑o
.rodata:00000000000052F1 ; const char aFullDocumentat[]
.rodata:00000000000052F1 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000052F1                                         ; DATA XREF: usage:loc_2171↑o
.rodata:00000000000052F1                                         ; usage:loc_222E↑o
.rodata:000000000000530C ; const char dirname[]
.rodata:000000000000530C dirname         db '/usr/local/share/locale',0
.rodata:000000000000530C                                         ; DATA XREF: main+43↑o
.rodata:0000000000005324 ; const char msgid[]
.rodata:0000000000005324 msgid           db 'invalid number of columns',0
.rodata:0000000000005324                                         ; DATA XREF: main:loc_18AF↑o
.rodata:000000000000533E aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+FE↑o
.rodata:000000000000534E aBytes          db 'bytes',0            ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000005354 aSpaces         db 'spaces',0           ; DATA XREF: .data.rel.ro:0000000000207B40↓o
.rodata:000000000000535B aWidth          db 'width',0            ; DATA XREF: .data.rel.ro:0000000000207B60↓o
.rodata:0000000000005361 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207B80↓o
.rodata:0000000000005366 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:000000000000536E                 align 10h
.rodata:0000000000005370 ; const char aTrySHelpForMor[]
.rodata:0000000000005370 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000005370                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000005397                 align 8
.rodata:0000000000005398 ; const char aUsageSOptionFi[]
.rodata:0000000000005398 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:0000000000005398                                         ; DATA XREF: usage:loc_1F4D↑o
.rodata:00000000000053B9                 align 20h
.rodata:00000000000053C0 ; const char aWrapInputLines[]
.rodata:00000000000053C0 aWrapInputLines db 'Wrap input lines in each FILE, writing to standard output.',0Ah,0
.rodata:00000000000053C0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000053FC                 align 20h
.rodata:0000000000005400 ; const char aWithNoFileOrWh[]
.rodata:0000000000005400 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:0000000000005400                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005438 ; const char aMandatoryArgum[]
.rodata:0000000000005438 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:0000000000005438                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000005438                 db 'ns too.',0Ah,0
.rodata:0000000000005483                 align 8
.rodata:0000000000005488 ; const char aBBytesCountByt[]
.rodata:0000000000005488 aBBytesCountByt db '  -b, --bytes         count bytes rather than columns',0Ah
.rodata:0000000000005488                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005488                 db '  -s, --spaces        break at spaces',0Ah
.rodata:0000000000005488                 db '  -w, --width=WIDTH   use WIDTH columns instead of 80',0Ah,0
.rodata:000000000000551B                 align 20h
.rodata:0000000000005520 ; const char aHelpDisplayThi[]
.rodata:0000000000005520 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005520                                         ; DATA XREF: usage+118↑o
.rodata:000000000000554D                 align 10h
.rodata:0000000000005550 ; const char aVersionOutputV[]
.rodata:0000000000005550 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005550                                         ; DATA XREF: usage+13D↑o
.rodata:0000000000005586                 align 8
.rodata:0000000000005588 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005588                                         ; DATA XREF: usage+237↑o
.rodata:0000000000005588                                         ; usage+29B↑o ...
.rodata:00000000000055B0 ; const char aReportAnyTrans[]
.rodata:00000000000055B0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000055B0                                         ; DATA XREF: usage+38F↑o
.rodata:00000000000055B0                 db 'am/>',0Ah,0
.rodata:00000000000055F7                 align 8
.rodata:00000000000055F8 ; const char aOrAvailableLoc[]
.rodata:00000000000055F8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000055F8                                         ; DATA XREF: usage:loc_21B6↑o
.rodata:000000000000562B                 align 20h
.rodata:0000000000005640 ; const char shortopts[]
.rodata:0000000000005640 shortopts       db 'bsw:0::1::2::3::4::5::6::7::8::9::',0
.rodata:0000000000005640                                         ; DATA XREF: main+8A↑o
.rodata:0000000000005663 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005668 ; const char aWriteError[]
.rodata:0000000000005668 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2313↑o
.rodata:0000000000005668                                         ; fold_file+2C5↑o
.rodata:0000000000005674 ; const char format[]
.rodata:0000000000005674 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005674                                         ; xnumtoumax+7D↑o ...
.rodata:000000000000567B                 align 20h
.rodata:0000000000005680 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005680                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000056B8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000056C0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000056C0                                         ; main+229↑o ...
.rodata:00000000000056C4 unk_56C4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000056C5                 db  80h
.rodata:00000000000056C6                 db  98h
.rodata:00000000000056C7                 db    0
.rodata:00000000000056C8 unk_56C8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000056C9                 db  80h
.rodata:00000000000056CA                 db  99h
.rodata:00000000000056CB                 db    0
.rodata:00000000000056CC unk_56CC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000056CD                 db    7
.rodata:00000000000056CE                 db  65h ; e
.rodata:00000000000056CF                 db    0
.rodata:00000000000056D0 unk_56D0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000056D1                 db 0AFh
.rodata:00000000000056D2                 db    0
.rodata:00000000000056D3 unk_56D3        db  22h ; "             ; DATA XREF: gettext_quote:loc_2480↑o
.rodata:00000000000056D3                                         ; quotearg_buffer_restyled:loc_323B↑o ...
.rodata:00000000000056D4                 db    0
.rodata:00000000000056D5 ; const char asc_56D5[2]
.rodata:00000000000056D5 asc_56D5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000056D5                                         ; quotearg_buffer_restyled:loc_2603↑o ...
.rodata:00000000000056D7 ; const char asc_56D7[2]
.rodata:00000000000056D7 asc_56D7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000056D7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000056D9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000056E1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:00000000000056E7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:00000000000056F4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:00000000000056F4                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005701 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005701                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:0000000000005715 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:0000000000005717 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:000000000000571F aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005727                 align 20h
.rodata:0000000000005740 jpt_25E1        dd offset loc_338A - 5740h
.rodata:0000000000005740                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005740                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005740                 dd offset loc_25E3 - 5740h ; jump table for switch statement
.rodata:0000000000005740                 dd offset loc_35B8 - 5740h
.rodata:0000000000005740                 dd offset loc_33C4 - 5740h
.rodata:0000000000005740                 dd offset loc_31B4 - 5740h
.rodata:0000000000005740                 dd offset loc_3210 - 5740h
.rodata:0000000000005740                 dd offset loc_3265 - 5740h
.rodata:0000000000005740                 dd offset loc_32AA - 5740h
.rodata:0000000000005740                 dd offset loc_32E4 - 5740h
.rodata:0000000000005740                 dd offset loc_32E4 - 5740h
.rodata:0000000000005740                 dd offset loc_32E4 - 5740h
.rodata:000000000000576C jpt_273E        dd offset loc_2960 - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000576C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch ; jump table for switch statement
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset loc_29A0 - 576Ch, offset loc_28A8 - 576Ch
.rodata:000000000000576C                 dd offset loc_2868 - 576Ch, offset loc_2A30 - 576Ch, offset loc_2A20 - 576Ch
.rodata:000000000000576C                 dd offset loc_2A10 - 576Ch, offset loc_2A00 - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset def_273E - 576Ch
.rodata:000000000000576C                 dd offset def_273E - 576Ch, offset def_273E - 576Ch, offset loc_29F0 - 576Ch
.rodata:000000000000576C                 dd offset loc_29E0 - 576Ch, offset loc_29E0 - 576Ch, offset loc_29B0 - 576Ch
.rodata:000000000000576C                 dd offset loc_29E0 - 576Ch, offset loc_2988 - 576Ch, offset loc_29E0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2843 - 576Ch, offset loc_29E0 - 576Ch, offset loc_29E0 - 576Ch
.rodata:000000000000576C                 dd offset loc_29E0 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_29E0 - 576Ch
.rodata:000000000000576C                 dd offset loc_29E0 - 576Ch, offset loc_29E0 - 576Ch, offset loc_29E0 - 576Ch
.rodata:000000000000576C                 dd offset loc_2813 - 576Ch, offset def_273E - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_29E0 - 576Ch, offset loc_28B8 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_29E0 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_29E0 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2988 - 576Ch, offset loc_2988 - 576Ch, offset loc_2988 - 576Ch
.rodata:000000000000576C                 dd offset loc_2743 - 576Ch, offset loc_29E0 - 576Ch, offset loc_2743 - 576Ch
.rodata:000000000000576C                 dd offset loc_29B0 - 576Ch
.rodata:0000000000005968 jpt_2ACA        dd offset loc_2B30 - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005968                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h ; jump table for switch statement
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset loc_2B20 - 5968h, offset loc_2C70 - 5968h
.rodata:0000000000005968                 dd offset loc_2C58 - 5968h, offset loc_2B08 - 5968h, offset loc_2C48 - 5968h
.rodata:0000000000005968                 dd offset loc_2AF0 - 5968h, offset loc_2C30 - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset def_2ACA - 5968h
.rodata:0000000000005968                 dd offset def_2ACA - 5968h, offset def_2ACA - 5968h, offset loc_2C18 - 5968h
.rodata:0000000000005968                 dd offset loc_2C00 - 5968h, offset loc_2C00 - 5968h, offset loc_2BE8 - 5968h
.rodata:0000000000005968                 dd offset loc_2C00 - 5968h, offset loc_2BD0 - 5968h, offset loc_2C00 - 5968h
.rodata:0000000000005968                 dd offset loc_2840 - 5968h, offset loc_2C00 - 5968h, offset loc_2C00 - 5968h
.rodata:0000000000005968                 dd offset loc_2C00 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2C00 - 5968h
.rodata:0000000000005968                 dd offset loc_2C00 - 5968h, offset loc_2C00 - 5968h, offset loc_2C00 - 5968h
.rodata:0000000000005968                 dd offset loc_2810 - 5968h, offset def_2ACA - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2C00 - 5968h, offset loc_2AD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2C00 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2C00 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h, offset loc_2BD0 - 5968h
.rodata:0000000000005968                 dd offset loc_2740 - 5968h, offset loc_2C00 - 5968h, offset loc_2740 - 5968h
.rodata:0000000000005968                 dd offset loc_2BE8 - 5968h
.rodata:0000000000005B64                 align 20h
.rodata:0000000000005B80                 public quoting_style_vals
.rodata:0000000000005B80 quoting_style_vals db    0
.rodata:0000000000005B81                 db    0
.rodata:0000000000005B82                 db    0
.rodata:0000000000005B83                 db    0
.rodata:0000000000005B84                 db    1
.rodata:0000000000005B85                 db    0
.rodata:0000000000005B86                 db    0
.rodata:0000000000005B87                 db    0
.rodata:0000000000005B88                 db    2
.rodata:0000000000005B89                 db    0
.rodata:0000000000005B8A                 db    0
.rodata:0000000000005B8B                 db    0
.rodata:0000000000005B8C                 db    3
.rodata:0000000000005B8D                 db    0
.rodata:0000000000005B8E                 db    0
.rodata:0000000000005B8F                 db    0
.rodata:0000000000005B90                 db    4
.rodata:0000000000005B91                 db    0
.rodata:0000000000005B92                 db    0
.rodata:0000000000005B93                 db    0
.rodata:0000000000005B94                 db    5
.rodata:0000000000005B95                 db    0
.rodata:0000000000005B96                 db    0
.rodata:0000000000005B97                 db    0
.rodata:0000000000005B98                 db    6
.rodata:0000000000005B99                 db    0
.rodata:0000000000005B9A                 db    0
.rodata:0000000000005B9B                 db    0
.rodata:0000000000005B9C                 db    7
.rodata:0000000000005B9D                 db    0
.rodata:0000000000005B9E                 db    0
.rodata:0000000000005B9F                 db    0
.rodata:0000000000005BA0                 db    8
.rodata:0000000000005BA1                 db    0
.rodata:0000000000005BA2                 db    0
.rodata:0000000000005BA3                 db    0
.rodata:0000000000005BA4                 db    9
.rodata:0000000000005BA5                 db    0
.rodata:0000000000005BA6                 db    0
.rodata:0000000000005BA7                 db    0
.rodata:0000000000005BA8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005BB4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000005BBB ; const char aC_0[]
.rodata:0000000000005BBB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_412C↑o
.rodata:0000000000005BBF ; const char aWrittenByS[]
.rodata:0000000000005BBF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000005BBF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000005BCF ; const char aWrittenBySAndS[]
.rodata:0000000000005BCF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000005BCF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005BE6 ; const char aWrittenBySSAnd[]
.rodata:0000000000005BE6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005BE6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005C02 ; const char aReportBugsToS[]
.rodata:0000000000005C02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005C02                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005C17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005C17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005C2D ; const char aSHomePageS[]
.rodata:0000000000005C2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005C2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005C41                 align 8
.rodata:0000000000005C48 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005C48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005C48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005C48                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005C48                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005C48                 db '.',0Ah
.rodata:0000000000005C48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005C48                 db 0Ah,0
.rodata:0000000000005D14                 align 8
.rodata:0000000000005D18 ; const char aWrittenBySSSAn[]
.rodata:0000000000005D18 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D18                                         ; DATA XREF: version_etc_arn:loc_4380↑o
.rodata:0000000000005D18                 db 'and %s.',0Ah,0
.rodata:0000000000005D38 ; const char aWrittenBySSSSA[]
.rodata:0000000000005D38 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D38                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005D38                 db '%s, and %s.',0Ah,0
.rodata:0000000000005D5C                 align 20h
.rodata:0000000000005D60 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005D60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D60                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005D60                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005D88 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005D88 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005D88                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005D88                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005DB4                 align 8
.rodata:0000000000005DB8 ; const char aWrittenBySSSSS[]
.rodata:0000000000005DB8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005DB8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005DB8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005DB8                 db 'and %s.',0Ah,0
.rodata:0000000000005DE8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005DE8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005DE8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005DE8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005DE8                 db '%s, and %s.',0Ah,0
.rodata:0000000000005E1C                 align 20h
.rodata:0000000000005E20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005E20                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005E20                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005E20                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005E5C                 align 20h
.rodata:0000000000005E60 ; const char aGeneralHelpUsi[]
.rodata:0000000000005E60 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005E60                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005E60                 db 0
.rodata:0000000000005EA1                 align 4
.rodata:0000000000005EA4 jpt_4194        dd offset loc_4216 - 5EA4h
.rodata:0000000000005EA4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005EA4                                         ; version_etc_arn+9D↑r
.rodata:0000000000005EA4                 dd offset loc_42A8 - 5EA4h ; jump table for switch statement
.rodata:0000000000005EA4                 dd offset loc_42E8 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_4330 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_4380 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_43D8 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_4408 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_4470 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_41A0 - 5EA4h
.rodata:0000000000005EA4                 dd offset loc_4250 - 5EA4h
.rodata:0000000000005ECC                 align 20h
.rodata:0000000000005EE0                 public version_etc_copyright
.rodata:0000000000005EE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005EE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005F0F ; const char aMemoryExhauste[]
.rodata:0000000000005F0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005F20 ; const char file[]
.rodata:0000000000005F20 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000005F20                                         ; DATA XREF: xstrtoumax+38C↑o
.rodata:0000000000005F40 ; const char assertion[]
.rodata:0000000000005F40 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000005F40                                         ; DATA XREF: xstrtoumax+393↑o
.rodata:0000000000005F66                 align 8
.rodata:0000000000005F68 jpt_4CA6        dd offset loc_4DF6 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:0000000000005F68                                         ; xstrtoumax+1CF↑r
.rodata:0000000000005F68                 dd offset loc_4DD3 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4E0C - 5F68h ; jump table for switch statement
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset loc_4D8F - 5F68h, offset def_4CA6 - 5F68h, offset loc_4CA8 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4DB0 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset loc_4D6F - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4D4A - 5F68h
.rodata:0000000000005F68                 dd offset loc_4D24 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4D0D - 5F68h
.rodata:0000000000005F68                 dd offset loc_4CD0 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset loc_4E0C - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4D8F - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset loc_4CA8 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4D6F - 5F68h
.rodata:0000000000005F68                 dd offset def_4CA6 - 5F68h, offset def_4CA6 - 5F68h, offset loc_4CF7 - 5F68h
.rodata:0000000000006040 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000006040 __PRETTY_FUNCTION___4162 db 'xstrtoumax',0
.rodata:0000000000006040                                         ; DATA XREF: xstrtoumax:loc_4E55↑o
.rodata:000000000000604B aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000604D aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5160↑o
.rodata:0000000000006053 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006053                                         ; locale_charset:loc_51B0↑o
.rodata:0000000000006053 _rodata         ends
.rodata:0000000000006053
LOAD:0000000000006059 ; ===========================================================================
LOAD:0000000000006059
LOAD:0000000000006059 ; Segment type: Pure code
LOAD:0000000000006059 ; Segment permissions: Read/Execute
LOAD:0000000000006059 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006059                 assume cs:LOAD
LOAD:0000000000006059                 ;org 6059h
LOAD:0000000000006059                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006059                 align 4
LOAD:0000000000006059 LOAD            ends
LOAD:0000000000006059
.eh_frame_hdr:000000000000605C ; ===========================================================================
.eh_frame_hdr:000000000000605C
.eh_frame_hdr:000000000000605C ; Segment type: Pure data
.eh_frame_hdr:000000000000605C ; Segment permissions: Read
.eh_frame_hdr:000000000000605C _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000605C                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000605C                 ;org 605Ch
.eh_frame_hdr:000000000000605C __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000605D                 db  1Bh
.eh_frame_hdr:000000000000605E                 db    3
.eh_frame_hdr:000000000000605F                 db  3Bh ; ;
.eh_frame_hdr:0000000000006060                 db  70h ; p
.eh_frame_hdr:0000000000006061                 db    2
.eh_frame_hdr:0000000000006062                 db    0
.eh_frame_hdr:0000000000006063                 db    0
.eh_frame_hdr:0000000000006064                 db  4Dh ; M
.eh_frame_hdr:0000000000006065                 db    0
.eh_frame_hdr:0000000000006066                 db    0
.eh_frame_hdr:0000000000006067                 db    0
.eh_frame_hdr:0000000000006068                 db 0F4h
.eh_frame_hdr:0000000000006069                 db 0B3h
.eh_frame_hdr:000000000000606A                 db 0FFh
.eh_frame_hdr:000000000000606B                 db 0FFh
.eh_frame_hdr:000000000000606C                 db 0BCh
.eh_frame_hdr:000000000000606D                 db    2
.eh_frame_hdr:000000000000606E                 db    0
.eh_frame_hdr:000000000000606F                 db    0
.eh_frame_hdr:0000000000006070                 db    4
.eh_frame_hdr:0000000000006071                 db 0B7h
.eh_frame_hdr:0000000000006072                 db 0FFh
.eh_frame_hdr:0000000000006073                 db 0FFh
.eh_frame_hdr:0000000000006074                 db 0E4h
.eh_frame_hdr:0000000000006075                 db    2
.eh_frame_hdr:0000000000006076                 db    0
.eh_frame_hdr:0000000000006077                 db    0
.eh_frame_hdr:0000000000006078                 db  14h
.eh_frame_hdr:0000000000006079                 db 0B7h
.eh_frame_hdr:000000000000607A                 db 0FFh
.eh_frame_hdr:000000000000607B                 db 0FFh
.eh_frame_hdr:000000000000607C                 db  88h
.eh_frame_hdr:000000000000607D                 db    3
.eh_frame_hdr:000000000000607E                 db    0
.eh_frame_hdr:000000000000607F                 db    0
.eh_frame_hdr:0000000000006080                 db  84h
.eh_frame_hdr:0000000000006081                 db 0B9h
.eh_frame_hdr:0000000000006082                 db 0FFh
.eh_frame_hdr:0000000000006083                 db 0FFh
.eh_frame_hdr:0000000000006084                 db  8Ch
.eh_frame_hdr:0000000000006085                 db    2
.eh_frame_hdr:0000000000006086                 db    0
.eh_frame_hdr:0000000000006087                 db    0
.eh_frame_hdr:0000000000006088                 db  94h
.eh_frame_hdr:0000000000006089                 db 0BAh
.eh_frame_hdr:000000000000608A                 db 0FFh
.eh_frame_hdr:000000000000608B                 db 0FFh
.eh_frame_hdr:000000000000608C                 db 0FCh
.eh_frame_hdr:000000000000608D                 db    2
.eh_frame_hdr:000000000000608E                 db    0
.eh_frame_hdr:000000000000608F                 db    0
.eh_frame_hdr:0000000000006090                 db 0E4h
.eh_frame_hdr:0000000000006091                 db 0BAh
.eh_frame_hdr:0000000000006092                 db 0FFh
.eh_frame_hdr:0000000000006093                 db 0FFh
.eh_frame_hdr:0000000000006094                 db  10h
.eh_frame_hdr:0000000000006095                 db    3
.eh_frame_hdr:0000000000006096                 db    0
.eh_frame_hdr:0000000000006097                 db    0
.eh_frame_hdr:0000000000006098                 db  94h
.eh_frame_hdr:0000000000006099                 db 0BEh
.eh_frame_hdr:000000000000609A                 db 0FFh
.eh_frame_hdr:000000000000609B                 db 0FFh
.eh_frame_hdr:000000000000609C                 db  5Ch ; \
.eh_frame_hdr:000000000000609D                 db    3
.eh_frame_hdr:000000000000609E                 db    0
.eh_frame_hdr:000000000000609F                 db    0
.eh_frame_hdr:00000000000060A0                 db  54h ; T
.eh_frame_hdr:00000000000060A1                 db 0C2h
.eh_frame_hdr:00000000000060A2                 db 0FFh
.eh_frame_hdr:00000000000060A3                 db 0FFh
.eh_frame_hdr:00000000000060A4                 db 0C4h
.eh_frame_hdr:00000000000060A5                 db    3
.eh_frame_hdr:00000000000060A6                 db    0
.eh_frame_hdr:00000000000060A7                 db    0
.eh_frame_hdr:00000000000060A8                 db  64h ; d
.eh_frame_hdr:00000000000060A9                 db 0C2h
.eh_frame_hdr:00000000000060AA                 db 0FFh
.eh_frame_hdr:00000000000060AB                 db 0FFh
.eh_frame_hdr:00000000000060AC                 db 0D8h
.eh_frame_hdr:00000000000060AD                 db    3
.eh_frame_hdr:00000000000060AE                 db    0
.eh_frame_hdr:00000000000060AF                 db    0
.eh_frame_hdr:00000000000060B0                 db  74h ; t
.eh_frame_hdr:00000000000060B1                 db 0C2h
.eh_frame_hdr:00000000000060B2                 db 0FFh
.eh_frame_hdr:00000000000060B3                 db 0FFh
.eh_frame_hdr:00000000000060B4                 db 0ECh
.eh_frame_hdr:00000000000060B5                 db    3
.eh_frame_hdr:00000000000060B6                 db    0
.eh_frame_hdr:00000000000060B7                 db    0
.eh_frame_hdr:00000000000060B8                 db  24h ; $
.eh_frame_hdr:00000000000060B9                 db 0C3h
.eh_frame_hdr:00000000000060BA                 db 0FFh
.eh_frame_hdr:00000000000060BB                 db 0FFh
.eh_frame_hdr:00000000000060BC                 db  1Ch
.eh_frame_hdr:00000000000060BD                 db    4
.eh_frame_hdr:00000000000060BE                 db    0
.eh_frame_hdr:00000000000060BF                 db    0
.eh_frame_hdr:00000000000060C0                 db  34h ; 4
.eh_frame_hdr:00000000000060C1                 db 0C3h
.eh_frame_hdr:00000000000060C2                 db 0FFh
.eh_frame_hdr:00000000000060C3                 db 0FFh
.eh_frame_hdr:00000000000060C4                 db  30h ; 0
.eh_frame_hdr:00000000000060C5                 db    4
.eh_frame_hdr:00000000000060C6                 db    0
.eh_frame_hdr:00000000000060C7                 db    0
.eh_frame_hdr:00000000000060C8                 db  64h ; d
.eh_frame_hdr:00000000000060C9                 db 0C3h
.eh_frame_hdr:00000000000060CA                 db 0FFh
.eh_frame_hdr:00000000000060CB                 db 0FFh
.eh_frame_hdr:00000000000060CC                 db  4Ch ; L
.eh_frame_hdr:00000000000060CD                 db    4
.eh_frame_hdr:00000000000060CE                 db    0
.eh_frame_hdr:00000000000060CF                 db    0
.eh_frame_hdr:00000000000060D0                 db    4
.eh_frame_hdr:00000000000060D1                 db 0C4h
.eh_frame_hdr:00000000000060D2                 db 0FFh
.eh_frame_hdr:00000000000060D3                 db 0FFh
.eh_frame_hdr:00000000000060D4                 db  6Ch ; l
.eh_frame_hdr:00000000000060D5                 db    4
.eh_frame_hdr:00000000000060D6                 db    0
.eh_frame_hdr:00000000000060D7                 db    0
.eh_frame_hdr:00000000000060D8                 db 0F4h
.eh_frame_hdr:00000000000060D9                 db 0C4h
.eh_frame_hdr:00000000000060DA                 db 0FFh
.eh_frame_hdr:00000000000060DB                 db 0FFh
.eh_frame_hdr:00000000000060DC                 db 0B0h
.eh_frame_hdr:00000000000060DD                 db    4
.eh_frame_hdr:00000000000060DE                 db    0
.eh_frame_hdr:00000000000060DF                 db    0
.eh_frame_hdr:00000000000060E0                 db  34h ; 4
.eh_frame_hdr:00000000000060E1                 db 0D7h
.eh_frame_hdr:00000000000060E2                 db 0FFh
.eh_frame_hdr:00000000000060E3                 db 0FFh
.eh_frame_hdr:00000000000060E4                 db  28h ; (
.eh_frame_hdr:00000000000060E5                 db    5
.eh_frame_hdr:00000000000060E6                 db    0
.eh_frame_hdr:00000000000060E7                 db    0
.eh_frame_hdr:00000000000060E8                 db 0E4h
.eh_frame_hdr:00000000000060E9                 db 0D8h
.eh_frame_hdr:00000000000060EA                 db 0FFh
.eh_frame_hdr:00000000000060EB                 db 0FFh
.eh_frame_hdr:00000000000060EC                 db  94h
.eh_frame_hdr:00000000000060ED                 db    5
.eh_frame_hdr:00000000000060EE                 db    0
.eh_frame_hdr:00000000000060EF                 db    0
.eh_frame_hdr:00000000000060F0                 db  24h ; $
.eh_frame_hdr:00000000000060F1                 db 0D9h
.eh_frame_hdr:00000000000060F2                 db 0FFh
.eh_frame_hdr:00000000000060F3                 db 0FFh
.eh_frame_hdr:00000000000060F4                 db 0C0h
.eh_frame_hdr:00000000000060F5                 db    5
.eh_frame_hdr:00000000000060F6                 db    0
.eh_frame_hdr:00000000000060F7                 db    0
.eh_frame_hdr:00000000000060F8                 db  44h ; D
.eh_frame_hdr:00000000000060F9                 db 0D9h
.eh_frame_hdr:00000000000060FA                 db 0FFh
.eh_frame_hdr:00000000000060FB                 db 0FFh
.eh_frame_hdr:00000000000060FC                 db 0D4h
.eh_frame_hdr:00000000000060FD                 db    5
.eh_frame_hdr:00000000000060FE                 db    0
.eh_frame_hdr:00000000000060FF                 db    0
.eh_frame_hdr:0000000000006100                 db  64h ; d
.eh_frame_hdr:0000000000006101                 db 0D9h
.eh_frame_hdr:0000000000006102                 db 0FFh
.eh_frame_hdr:0000000000006103                 db 0FFh
.eh_frame_hdr:0000000000006104                 db 0E8h
.eh_frame_hdr:0000000000006105                 db    5
.eh_frame_hdr:0000000000006106                 db    0
.eh_frame_hdr:0000000000006107                 db    0
.eh_frame_hdr:0000000000006108                 db 0A4h
.eh_frame_hdr:0000000000006109                 db 0D9h
.eh_frame_hdr:000000000000610A                 db 0FFh
.eh_frame_hdr:000000000000610B                 db 0FFh
.eh_frame_hdr:000000000000610C                 db 0FCh
.eh_frame_hdr:000000000000610D                 db    5
.eh_frame_hdr:000000000000610E                 db    0
.eh_frame_hdr:000000000000610F                 db    0
.eh_frame_hdr:0000000000006110                 db 0C4h
.eh_frame_hdr:0000000000006111                 db 0D9h
.eh_frame_hdr:0000000000006112                 db 0FFh
.eh_frame_hdr:0000000000006113                 db 0FFh
.eh_frame_hdr:0000000000006114                 db  10h
.eh_frame_hdr:0000000000006115                 db    6
.eh_frame_hdr:0000000000006116                 db    0
.eh_frame_hdr:0000000000006117                 db    0
.eh_frame_hdr:0000000000006118                 db 0F4h
.eh_frame_hdr:0000000000006119                 db 0D9h
.eh_frame_hdr:000000000000611A                 db 0FFh
.eh_frame_hdr:000000000000611B                 db 0FFh
.eh_frame_hdr:000000000000611C                 db  24h ; $
.eh_frame_hdr:000000000000611D                 db    6
.eh_frame_hdr:000000000000611E                 db    0
.eh_frame_hdr:000000000000611F                 db    0
.eh_frame_hdr:0000000000006120                 db  74h ; t
.eh_frame_hdr:0000000000006121                 db 0DAh
.eh_frame_hdr:0000000000006122                 db 0FFh
.eh_frame_hdr:0000000000006123                 db 0FFh
.eh_frame_hdr:0000000000006124                 db  78h ; x
.eh_frame_hdr:0000000000006125                 db    6
.eh_frame_hdr:0000000000006126                 db    0
.eh_frame_hdr:0000000000006127                 db    0
.eh_frame_hdr:0000000000006128                 db  64h ; d
.eh_frame_hdr:0000000000006129                 db 0DBh
.eh_frame_hdr:000000000000612A                 db 0FFh
.eh_frame_hdr:000000000000612B                 db 0FFh
.eh_frame_hdr:000000000000612C                 db 0E4h
.eh_frame_hdr:000000000000612D                 db    6
.eh_frame_hdr:000000000000612E                 db    0
.eh_frame_hdr:000000000000612F                 db    0
.eh_frame_hdr:0000000000006130                 db  74h ; t
.eh_frame_hdr:0000000000006131                 db 0DBh
.eh_frame_hdr:0000000000006132                 db 0FFh
.eh_frame_hdr:0000000000006133                 db 0FFh
.eh_frame_hdr:0000000000006134                 db 0F8h
.eh_frame_hdr:0000000000006135                 db    6
.eh_frame_hdr:0000000000006136                 db    0
.eh_frame_hdr:0000000000006137                 db    0
.eh_frame_hdr:0000000000006138                 db  14h
.eh_frame_hdr:0000000000006139                 db 0DCh
.eh_frame_hdr:000000000000613A                 db 0FFh
.eh_frame_hdr:000000000000613B                 db 0FFh
.eh_frame_hdr:000000000000613C                 db  24h ; $
.eh_frame_hdr:000000000000613D                 db    7
.eh_frame_hdr:000000000000613E                 db    0
.eh_frame_hdr:000000000000613F                 db    0
.eh_frame_hdr:0000000000006140                 db  34h ; 4
.eh_frame_hdr:0000000000006141                 db 0DCh
.eh_frame_hdr:0000000000006142                 db 0FFh
.eh_frame_hdr:0000000000006143                 db 0FFh
.eh_frame_hdr:0000000000006144                 db  38h ; 8
.eh_frame_hdr:0000000000006145                 db    7
.eh_frame_hdr:0000000000006146                 db    0
.eh_frame_hdr:0000000000006147                 db    0
.eh_frame_hdr:0000000000006148                 db  44h ; D
.eh_frame_hdr:0000000000006149                 db 0DCh
.eh_frame_hdr:000000000000614A                 db 0FFh
.eh_frame_hdr:000000000000614B                 db 0FFh
.eh_frame_hdr:000000000000614C                 db  4Ch ; L
.eh_frame_hdr:000000000000614D                 db    7
.eh_frame_hdr:000000000000614E                 db    0
.eh_frame_hdr:000000000000614F                 db    0
.eh_frame_hdr:0000000000006150                 db  64h ; d
.eh_frame_hdr:0000000000006151                 db 0DCh
.eh_frame_hdr:0000000000006152                 db 0FFh
.eh_frame_hdr:0000000000006153                 db 0FFh
.eh_frame_hdr:0000000000006154                 db  60h ; `
.eh_frame_hdr:0000000000006155                 db    7
.eh_frame_hdr:0000000000006156                 db    0
.eh_frame_hdr:0000000000006157                 db    0
.eh_frame_hdr:0000000000006158                 db  84h
.eh_frame_hdr:0000000000006159                 db 0DCh
.eh_frame_hdr:000000000000615A                 db 0FFh
.eh_frame_hdr:000000000000615B                 db 0FFh
.eh_frame_hdr:000000000000615C                 db  74h ; t
.eh_frame_hdr:000000000000615D                 db    7
.eh_frame_hdr:000000000000615E                 db    0
.eh_frame_hdr:000000000000615F                 db    0
.eh_frame_hdr:0000000000006160                 db  14h
.eh_frame_hdr:0000000000006161                 db 0DDh
.eh_frame_hdr:0000000000006162                 db 0FFh
.eh_frame_hdr:0000000000006163                 db 0FFh
.eh_frame_hdr:0000000000006164                 db  90h
.eh_frame_hdr:0000000000006165                 db    7
.eh_frame_hdr:0000000000006166                 db    0
.eh_frame_hdr:0000000000006167                 db    0
.eh_frame_hdr:0000000000006168                 db 0A4h
.eh_frame_hdr:0000000000006169                 db 0DDh
.eh_frame_hdr:000000000000616A                 db 0FFh
.eh_frame_hdr:000000000000616B                 db 0FFh
.eh_frame_hdr:000000000000616C                 db 0ACh
.eh_frame_hdr:000000000000616D                 db    7
.eh_frame_hdr:000000000000616E                 db    0
.eh_frame_hdr:000000000000616F                 db    0
.eh_frame_hdr:0000000000006170                 db 0B4h
.eh_frame_hdr:0000000000006171                 db 0DDh
.eh_frame_hdr:0000000000006172                 db 0FFh
.eh_frame_hdr:0000000000006173                 db 0FFh
.eh_frame_hdr:0000000000006174                 db 0C0h
.eh_frame_hdr:0000000000006175                 db    7
.eh_frame_hdr:0000000000006176                 db    0
.eh_frame_hdr:0000000000006177                 db    0
.eh_frame_hdr:0000000000006178                 db 0C4h
.eh_frame_hdr:0000000000006179                 db 0DDh
.eh_frame_hdr:000000000000617A                 db 0FFh
.eh_frame_hdr:000000000000617B                 db 0FFh
.eh_frame_hdr:000000000000617C                 db 0D4h
.eh_frame_hdr:000000000000617D                 db    7
.eh_frame_hdr:000000000000617E                 db    0
.eh_frame_hdr:000000000000617F                 db    0
.eh_frame_hdr:0000000000006180                 db  64h ; d
.eh_frame_hdr:0000000000006181                 db 0DEh
.eh_frame_hdr:0000000000006182                 db 0FFh
.eh_frame_hdr:0000000000006183                 db 0FFh
.eh_frame_hdr:0000000000006184                 db 0F0h
.eh_frame_hdr:0000000000006185                 db    7
.eh_frame_hdr:0000000000006186                 db    0
.eh_frame_hdr:0000000000006187                 db    0
.eh_frame_hdr:0000000000006188                 db  74h ; t
.eh_frame_hdr:0000000000006189                 db 0DEh
.eh_frame_hdr:000000000000618A                 db 0FFh
.eh_frame_hdr:000000000000618B                 db 0FFh
.eh_frame_hdr:000000000000618C                 db    4
.eh_frame_hdr:000000000000618D                 db    8
.eh_frame_hdr:000000000000618E                 db    0
.eh_frame_hdr:000000000000618F                 db    0
.eh_frame_hdr:0000000000006190                 db  94h
.eh_frame_hdr:0000000000006191                 db 0DEh
.eh_frame_hdr:0000000000006192                 db 0FFh
.eh_frame_hdr:0000000000006193                 db 0FFh
.eh_frame_hdr:0000000000006194                 db  18h
.eh_frame_hdr:0000000000006195                 db    8
.eh_frame_hdr:0000000000006196                 db    0
.eh_frame_hdr:0000000000006197                 db    0
.eh_frame_hdr:0000000000006198                 db 0A4h
.eh_frame_hdr:0000000000006199                 db 0DEh
.eh_frame_hdr:000000000000619A                 db 0FFh
.eh_frame_hdr:000000000000619B                 db 0FFh
.eh_frame_hdr:000000000000619C                 db  2Ch ; ,
.eh_frame_hdr:000000000000619D                 db    8
.eh_frame_hdr:000000000000619E                 db    0
.eh_frame_hdr:000000000000619F                 db    0
.eh_frame_hdr:00000000000061A0                 db  34h ; 4
.eh_frame_hdr:00000000000061A1                 db 0DFh
.eh_frame_hdr:00000000000061A2                 db 0FFh
.eh_frame_hdr:00000000000061A3                 db 0FFh
.eh_frame_hdr:00000000000061A4                 db  48h ; H
.eh_frame_hdr:00000000000061A5                 db    8
.eh_frame_hdr:00000000000061A6                 db    0
.eh_frame_hdr:00000000000061A7                 db    0
.eh_frame_hdr:00000000000061A8                 db 0D4h
.eh_frame_hdr:00000000000061A9                 db 0DFh
.eh_frame_hdr:00000000000061AA                 db 0FFh
.eh_frame_hdr:00000000000061AB                 db 0FFh
.eh_frame_hdr:00000000000061AC                 db  64h ; d
.eh_frame_hdr:00000000000061AD                 db    8
.eh_frame_hdr:00000000000061AE                 db    0
.eh_frame_hdr:00000000000061AF                 db    0
.eh_frame_hdr:00000000000061B0                 db 0E4h
.eh_frame_hdr:00000000000061B1                 db 0DFh
.eh_frame_hdr:00000000000061B2                 db 0FFh
.eh_frame_hdr:00000000000061B3                 db 0FFh
.eh_frame_hdr:00000000000061B4                 db  78h ; x
.eh_frame_hdr:00000000000061B5                 db    8
.eh_frame_hdr:00000000000061B6                 db    0
.eh_frame_hdr:00000000000061B7                 db    0
.eh_frame_hdr:00000000000061B8                 db    4
.eh_frame_hdr:00000000000061B9                 db 0E0h
.eh_frame_hdr:00000000000061BA                 db 0FFh
.eh_frame_hdr:00000000000061BB                 db 0FFh
.eh_frame_hdr:00000000000061BC                 db  8Ch
.eh_frame_hdr:00000000000061BD                 db    8
.eh_frame_hdr:00000000000061BE                 db    0
.eh_frame_hdr:00000000000061BF                 db    0
.eh_frame_hdr:00000000000061C0                 db  24h ; $
.eh_frame_hdr:00000000000061C1                 db 0E0h
.eh_frame_hdr:00000000000061C2                 db 0FFh
.eh_frame_hdr:00000000000061C3                 db 0FFh
.eh_frame_hdr:00000000000061C4                 db 0A0h
.eh_frame_hdr:00000000000061C5                 db    8
.eh_frame_hdr:00000000000061C6                 db    0
.eh_frame_hdr:00000000000061C7                 db    0
.eh_frame_hdr:00000000000061C8                 db  34h ; 4
.eh_frame_hdr:00000000000061C9                 db 0E0h
.eh_frame_hdr:00000000000061CA                 db 0FFh
.eh_frame_hdr:00000000000061CB                 db 0FFh
.eh_frame_hdr:00000000000061CC                 db 0B4h
.eh_frame_hdr:00000000000061CD                 db    8
.eh_frame_hdr:00000000000061CE                 db    0
.eh_frame_hdr:00000000000061CF                 db    0
.eh_frame_hdr:00000000000061D0                 db  54h ; T
.eh_frame_hdr:00000000000061D1                 db 0E0h
.eh_frame_hdr:00000000000061D2                 db 0FFh
.eh_frame_hdr:00000000000061D3                 db 0FFh
.eh_frame_hdr:00000000000061D4                 db 0C8h
.eh_frame_hdr:00000000000061D5                 db    8
.eh_frame_hdr:00000000000061D6                 db    0
.eh_frame_hdr:00000000000061D7                 db    0
.eh_frame_hdr:00000000000061D8                 db  74h ; t
.eh_frame_hdr:00000000000061D9                 db 0E0h
.eh_frame_hdr:00000000000061DA                 db 0FFh
.eh_frame_hdr:00000000000061DB                 db 0FFh
.eh_frame_hdr:00000000000061DC                 db 0DCh
.eh_frame_hdr:00000000000061DD                 db    8
.eh_frame_hdr:00000000000061DE                 db    0
.eh_frame_hdr:00000000000061DF                 db    0
.eh_frame_hdr:00000000000061E0                 db  94h
.eh_frame_hdr:00000000000061E1                 db 0E0h
.eh_frame_hdr:00000000000061E2                 db 0FFh
.eh_frame_hdr:00000000000061E3                 db 0FFh
.eh_frame_hdr:00000000000061E4                 db 0F4h
.eh_frame_hdr:00000000000061E5                 db    8
.eh_frame_hdr:00000000000061E6                 db    0
.eh_frame_hdr:00000000000061E7                 db    0
.eh_frame_hdr:00000000000061E8                 db 0B4h
.eh_frame_hdr:00000000000061E9                 db 0E4h
.eh_frame_hdr:00000000000061EA                 db 0FFh
.eh_frame_hdr:00000000000061EB                 db 0FFh
.eh_frame_hdr:00000000000061EC                 db    8
.eh_frame_hdr:00000000000061ED                 db  0Ah
.eh_frame_hdr:00000000000061EE                 db    0
.eh_frame_hdr:00000000000061EF                 db    0
.eh_frame_hdr:00000000000061F0                 db 0D4h
.eh_frame_hdr:00000000000061F1                 db 0E4h
.eh_frame_hdr:00000000000061F2                 db 0FFh
.eh_frame_hdr:00000000000061F3                 db 0FFh
.eh_frame_hdr:00000000000061F4                 db  1Ch
.eh_frame_hdr:00000000000061F5                 db  0Ah
.eh_frame_hdr:00000000000061F6                 db    0
.eh_frame_hdr:00000000000061F7                 db    0
.eh_frame_hdr:00000000000061F8                 db  54h ; T
.eh_frame_hdr:00000000000061F9                 db 0E5h
.eh_frame_hdr:00000000000061FA                 db 0FFh
.eh_frame_hdr:00000000000061FB                 db 0FFh
.eh_frame_hdr:00000000000061FC                 db  38h ; 8
.eh_frame_hdr:00000000000061FD                 db  0Ah
.eh_frame_hdr:00000000000061FE                 db    0
.eh_frame_hdr:00000000000061FF                 db    0
.eh_frame_hdr:0000000000006200                 db  34h ; 4
.eh_frame_hdr:0000000000006201                 db 0E6h
.eh_frame_hdr:0000000000006202                 db 0FFh
.eh_frame_hdr:0000000000006203                 db 0FFh
.eh_frame_hdr:0000000000006204                 db  64h ; d
.eh_frame_hdr:0000000000006205                 db  0Ah
.eh_frame_hdr:0000000000006206                 db    0
.eh_frame_hdr:0000000000006207                 db    0
.eh_frame_hdr:0000000000006208                 db 0B4h
.eh_frame_hdr:0000000000006209                 db 0E6h
.eh_frame_hdr:000000000000620A                 db 0FFh
.eh_frame_hdr:000000000000620B                 db 0FFh
.eh_frame_hdr:000000000000620C                 db  84h
.eh_frame_hdr:000000000000620D                 db  0Ah
.eh_frame_hdr:000000000000620E                 db    0
.eh_frame_hdr:000000000000620F                 db    0
.eh_frame_hdr:0000000000006210                 db 0D4h
.eh_frame_hdr:0000000000006211                 db 0E6h
.eh_frame_hdr:0000000000006212                 db 0FFh
.eh_frame_hdr:0000000000006213                 db 0FFh
.eh_frame_hdr:0000000000006214                 db 0A0h
.eh_frame_hdr:0000000000006215                 db  0Ah
.eh_frame_hdr:0000000000006216                 db    0
.eh_frame_hdr:0000000000006217                 db    0
.eh_frame_hdr:0000000000006218                 db    4
.eh_frame_hdr:0000000000006219                 db 0E7h
.eh_frame_hdr:000000000000621A                 db 0FFh
.eh_frame_hdr:000000000000621B                 db 0FFh
.eh_frame_hdr:000000000000621C                 db 0B4h
.eh_frame_hdr:000000000000621D                 db  0Ah
.eh_frame_hdr:000000000000621E                 db    0
.eh_frame_hdr:000000000000621F                 db    0
.eh_frame_hdr:0000000000006220                 db  14h
.eh_frame_hdr:0000000000006221                 db 0E7h
.eh_frame_hdr:0000000000006222                 db 0FFh
.eh_frame_hdr:0000000000006223                 db 0FFh
.eh_frame_hdr:0000000000006224                 db 0C8h
.eh_frame_hdr:0000000000006225                 db  0Ah
.eh_frame_hdr:0000000000006226                 db    0
.eh_frame_hdr:0000000000006227                 db    0
.eh_frame_hdr:0000000000006228                 db  54h ; T
.eh_frame_hdr:0000000000006229                 db 0E7h
.eh_frame_hdr:000000000000622A                 db 0FFh
.eh_frame_hdr:000000000000622B                 db 0FFh
.eh_frame_hdr:000000000000622C                 db 0ECh
.eh_frame_hdr:000000000000622D                 db  0Ah
.eh_frame_hdr:000000000000622E                 db    0
.eh_frame_hdr:000000000000622F                 db    0
.eh_frame_hdr:0000000000006230                 db  84h
.eh_frame_hdr:0000000000006231                 db 0E7h
.eh_frame_hdr:0000000000006232                 db 0FFh
.eh_frame_hdr:0000000000006233                 db 0FFh
.eh_frame_hdr:0000000000006234                 db    0
.eh_frame_hdr:0000000000006235                 db  0Bh
.eh_frame_hdr:0000000000006236                 db    0
.eh_frame_hdr:0000000000006237                 db    0
.eh_frame_hdr:0000000000006238                 db  14h
.eh_frame_hdr:0000000000006239                 db 0E8h
.eh_frame_hdr:000000000000623A                 db 0FFh
.eh_frame_hdr:000000000000623B                 db 0FFh
.eh_frame_hdr:000000000000623C                 db  18h
.eh_frame_hdr:000000000000623D                 db  0Bh
.eh_frame_hdr:000000000000623E                 db    0
.eh_frame_hdr:000000000000623F                 db    0
.eh_frame_hdr:0000000000006240                 db  64h ; d
.eh_frame_hdr:0000000000006241                 db 0E8h
.eh_frame_hdr:0000000000006242                 db 0FFh
.eh_frame_hdr:0000000000006243                 db 0FFh
.eh_frame_hdr:0000000000006244                 db  30h ; 0
.eh_frame_hdr:0000000000006245                 db  0Bh
.eh_frame_hdr:0000000000006246                 db    0
.eh_frame_hdr:0000000000006247                 db    0
.eh_frame_hdr:0000000000006248                 db  84h
.eh_frame_hdr:0000000000006249                 db 0E8h
.eh_frame_hdr:000000000000624A                 db 0FFh
.eh_frame_hdr:000000000000624B                 db 0FFh
.eh_frame_hdr:000000000000624C                 db  4Ch ; L
.eh_frame_hdr:000000000000624D                 db  0Bh
.eh_frame_hdr:000000000000624E                 db    0
.eh_frame_hdr:000000000000624F                 db    0
.eh_frame_hdr:0000000000006250                 db 0B4h
.eh_frame_hdr:0000000000006251                 db 0E8h
.eh_frame_hdr:0000000000006252                 db 0FFh
.eh_frame_hdr:0000000000006253                 db 0FFh
.eh_frame_hdr:0000000000006254                 db  68h ; h
.eh_frame_hdr:0000000000006255                 db  0Bh
.eh_frame_hdr:0000000000006256                 db    0
.eh_frame_hdr:0000000000006257                 db    0
.eh_frame_hdr:0000000000006258                 db 0E4h
.eh_frame_hdr:0000000000006259                 db 0E8h
.eh_frame_hdr:000000000000625A                 db 0FFh
.eh_frame_hdr:000000000000625B                 db 0FFh
.eh_frame_hdr:000000000000625C                 db  90h
.eh_frame_hdr:000000000000625D                 db  0Bh
.eh_frame_hdr:000000000000625E                 db    0
.eh_frame_hdr:000000000000625F                 db    0
.eh_frame_hdr:0000000000006260                 db    4
.eh_frame_hdr:0000000000006261                 db 0E9h
.eh_frame_hdr:0000000000006262                 db 0FFh
.eh_frame_hdr:0000000000006263                 db 0FFh
.eh_frame_hdr:0000000000006264                 db 0ACh
.eh_frame_hdr:0000000000006265                 db  0Bh
.eh_frame_hdr:0000000000006266                 db    0
.eh_frame_hdr:0000000000006267                 db    0
.eh_frame_hdr:0000000000006268                 db  44h ; D
.eh_frame_hdr:0000000000006269                 db 0E9h
.eh_frame_hdr:000000000000626A                 db 0FFh
.eh_frame_hdr:000000000000626B                 db 0FFh
.eh_frame_hdr:000000000000626C                 db 0C4h
.eh_frame_hdr:000000000000626D                 db  0Bh
.eh_frame_hdr:000000000000626E                 db    0
.eh_frame_hdr:000000000000626F                 db    0
.eh_frame_hdr:0000000000006270                 db  44h ; D
.eh_frame_hdr:0000000000006271                 db 0EAh
.eh_frame_hdr:0000000000006272                 db 0FFh
.eh_frame_hdr:0000000000006273                 db 0FFh
.eh_frame_hdr:0000000000006274                 db  10h
.eh_frame_hdr:0000000000006275                 db  0Ch
.eh_frame_hdr:0000000000006276                 db    0
.eh_frame_hdr:0000000000006277                 db    0
.eh_frame_hdr:0000000000006278                 db  74h ; t
.eh_frame_hdr:0000000000006279                 db 0EAh
.eh_frame_hdr:000000000000627A                 db 0FFh
.eh_frame_hdr:000000000000627B                 db 0FFh
.eh_frame_hdr:000000000000627C                 db  2Ch ; ,
.eh_frame_hdr:000000000000627D                 db  0Ch
.eh_frame_hdr:000000000000627E                 db    0
.eh_frame_hdr:000000000000627F                 db    0
.eh_frame_hdr:0000000000006280                 db  94h
.eh_frame_hdr:0000000000006281                 db 0EEh
.eh_frame_hdr:0000000000006282                 db 0FFh
.eh_frame_hdr:0000000000006283                 db 0FFh
.eh_frame_hdr:0000000000006284                 db  7Ch ; |
.eh_frame_hdr:0000000000006285                 db  0Ch
.eh_frame_hdr:0000000000006286                 db    0
.eh_frame_hdr:0000000000006287                 db    0
.eh_frame_hdr:0000000000006288                 db  14h
.eh_frame_hdr:0000000000006289                 db 0EFh
.eh_frame_hdr:000000000000628A                 db 0FFh
.eh_frame_hdr:000000000000628B                 db 0FFh
.eh_frame_hdr:000000000000628C                 db 0B4h
.eh_frame_hdr:000000000000628D                 db  0Ch
.eh_frame_hdr:000000000000628E                 db    0
.eh_frame_hdr:000000000000628F                 db    0
.eh_frame_hdr:0000000000006290                 db  54h ; T
.eh_frame_hdr:0000000000006291                 db 0EFh
.eh_frame_hdr:0000000000006292                 db 0FFh
.eh_frame_hdr:0000000000006293                 db 0FFh
.eh_frame_hdr:0000000000006294                 db 0D4h
.eh_frame_hdr:0000000000006295                 db  0Ch
.eh_frame_hdr:0000000000006296                 db    0
.eh_frame_hdr:0000000000006297                 db    0
.eh_frame_hdr:0000000000006298                 db 0B4h
.eh_frame_hdr:0000000000006299                 db 0EFh
.eh_frame_hdr:000000000000629A                 db 0FFh
.eh_frame_hdr:000000000000629B                 db 0FFh
.eh_frame_hdr:000000000000629C                 db    4
.eh_frame_hdr:000000000000629D                 db  0Dh
.eh_frame_hdr:000000000000629E                 db    0
.eh_frame_hdr:000000000000629F                 db    0
.eh_frame_hdr:00000000000062A0                 db  44h ; D
.eh_frame_hdr:00000000000062A1                 db 0F0h
.eh_frame_hdr:00000000000062A2                 db 0FFh
.eh_frame_hdr:00000000000062A3                 db 0FFh
.eh_frame_hdr:00000000000062A4                 db  44h ; D
.eh_frame_hdr:00000000000062A5                 db  0Dh
.eh_frame_hdr:00000000000062A6                 db    0
.eh_frame_hdr:00000000000062A7                 db    0
.eh_frame_hdr:00000000000062A8                 db 0C4h
.eh_frame_hdr:00000000000062A9                 db 0F0h
.eh_frame_hdr:00000000000062AA                 db 0FFh
.eh_frame_hdr:00000000000062AB                 db 0FFh
.eh_frame_hdr:00000000000062AC                 db  94h
.eh_frame_hdr:00000000000062AD                 db  0Dh
.eh_frame_hdr:00000000000062AE                 db    0
.eh_frame_hdr:00000000000062AF                 db    0
.eh_frame_hdr:00000000000062B0                 db  24h ; $
.eh_frame_hdr:00000000000062B1                 db 0F1h
.eh_frame_hdr:00000000000062B2                 db 0FFh
.eh_frame_hdr:00000000000062B3                 db 0FFh
.eh_frame_hdr:00000000000062B4                 db 0B4h
.eh_frame_hdr:00000000000062B5                 db  0Dh
.eh_frame_hdr:00000000000062B6                 db    0
.eh_frame_hdr:00000000000062B7                 db    0
.eh_frame_hdr:00000000000062B8                 db  64h ; d
.eh_frame_hdr:00000000000062B9                 db 0F1h
.eh_frame_hdr:00000000000062BA                 db 0FFh
.eh_frame_hdr:00000000000062BB                 db 0FFh
.eh_frame_hdr:00000000000062BC                 db 0D4h
.eh_frame_hdr:00000000000062BD                 db  0Dh
.eh_frame_hdr:00000000000062BE                 db    0
.eh_frame_hdr:00000000000062BF                 db    0
.eh_frame_hdr:00000000000062C0                 db 0D4h
.eh_frame_hdr:00000000000062C1                 db 0F1h
.eh_frame_hdr:00000000000062C2                 db 0FFh
.eh_frame_hdr:00000000000062C3                 db 0FFh
.eh_frame_hdr:00000000000062C4                 db  1Ch
.eh_frame_hdr:00000000000062C5                 db  0Eh
.eh_frame_hdr:00000000000062C6                 db    0
.eh_frame_hdr:00000000000062C7                 db    0
.eh_frame_hdr:00000000000062C8                 db 0E4h
.eh_frame_hdr:00000000000062C9                 db 0F1h
.eh_frame_hdr:00000000000062CA                 db 0FFh
.eh_frame_hdr:00000000000062CB                 db 0FFh
.eh_frame_hdr:00000000000062CC                 db  34h ; 4
.eh_frame_hdr:00000000000062CD                 db  0Eh
.eh_frame_hdr:00000000000062CE                 db    0
.eh_frame_hdr:00000000000062CF                 db    0
.eh_frame_hdr:00000000000062CF _eh_frame_hdr   ends
.eh_frame_hdr:00000000000062CF
.eh_frame:00000000000062D0 ; ===========================================================================
.eh_frame:00000000000062D0
.eh_frame:00000000000062D0 ; Segment type: Pure data
.eh_frame:00000000000062D0 ; Segment permissions: Read
.eh_frame:00000000000062D0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000062D0                 assume cs:_eh_frame
.eh_frame:00000000000062D0                 ;org 62D0h
.eh_frame:00000000000062D0                 db  14h
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db    0
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db    1
.eh_frame:00000000000062D9                 db  7Ah ; z
.eh_frame:00000000000062DA                 db  52h ; R
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db    1
.eh_frame:00000000000062DD                 db  78h ; x
.eh_frame:00000000000062DE                 db  10h
.eh_frame:00000000000062DF                 db    1
.eh_frame:00000000000062E0                 db  1Bh
.eh_frame:00000000000062E1                 db  0Ch
.eh_frame:00000000000062E2                 db    7
.eh_frame:00000000000062E3                 db    8
.eh_frame:00000000000062E4                 db  90h
.eh_frame:00000000000062E5                 db    1
.eh_frame:00000000000062E6                 db    7
.eh_frame:00000000000062E7                 db  10h
.eh_frame:00000000000062E8                 db  14h
.eh_frame:00000000000062E9                 db    0
.eh_frame:00000000000062EA                 db    0
.eh_frame:00000000000062EB                 db    0
.eh_frame:00000000000062EC                 db  1Ch
.eh_frame:00000000000062ED                 db    0
.eh_frame:00000000000062EE                 db    0
.eh_frame:00000000000062EF                 db    0
.eh_frame:00000000000062F0                 db 0F0h
.eh_frame:00000000000062F1                 db 0B6h
.eh_frame:00000000000062F2                 db 0FFh
.eh_frame:00000000000062F3                 db 0FFh
.eh_frame:00000000000062F4                 db  2Bh ; +
.eh_frame:00000000000062F5                 db    0
.eh_frame:00000000000062F6                 db    0
.eh_frame:00000000000062F7                 db    0
.eh_frame:00000000000062F8                 db    0
.eh_frame:00000000000062F9                 db    0
.eh_frame:00000000000062FA                 db    0
.eh_frame:00000000000062FB                 db    0
.eh_frame:00000000000062FC                 db    0
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  14h
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db    0
.eh_frame:0000000000006305                 db    0
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db    1
.eh_frame:0000000000006309                 db  7Ah ; z
.eh_frame:000000000000630A                 db  52h ; R
.eh_frame:000000000000630B                 db    0
.eh_frame:000000000000630C                 db    1
.eh_frame:000000000000630D                 db  78h ; x
.eh_frame:000000000000630E                 db  10h
.eh_frame:000000000000630F                 db    1
.eh_frame:0000000000006310                 db  1Bh
.eh_frame:0000000000006311                 db  0Ch
.eh_frame:0000000000006312                 db    7
.eh_frame:0000000000006313                 db    8
.eh_frame:0000000000006314                 db  90h
.eh_frame:0000000000006315                 db    1
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db  24h ; $
.eh_frame:0000000000006319                 db    0
.eh_frame:000000000000631A                 db    0
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db  1Ch
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db  30h ; 0
.eh_frame:0000000000006321                 db 0B1h
.eh_frame:0000000000006322                 db 0FFh
.eh_frame:0000000000006323                 db 0FFh
.eh_frame:0000000000006324                 db  10h
.eh_frame:0000000000006325                 db    3
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db    0
.eh_frame:0000000000006329                 db  0Eh
.eh_frame:000000000000632A                 db  10h
.eh_frame:000000000000632B                 db  46h ; F
.eh_frame:000000000000632C                 db  0Eh
.eh_frame:000000000000632D                 db  18h
.eh_frame:000000000000632E                 db  4Ah ; J
.eh_frame:000000000000632F                 db  0Fh
.eh_frame:0000000000006330                 db  0Bh
.eh_frame:0000000000006331                 db  77h ; w
.eh_frame:0000000000006332                 db    8
.eh_frame:0000000000006333                 db  80h
.eh_frame:0000000000006334                 db    0
.eh_frame:0000000000006335                 db  3Fh ; ?
.eh_frame:0000000000006336                 db  1Ah
.eh_frame:0000000000006337                 db  3Bh ; ;
.eh_frame:0000000000006338                 db  2Ah ; *
.eh_frame:0000000000006339                 db  33h ; 3
.eh_frame:000000000000633A                 db  24h ; $
.eh_frame:000000000000633B                 db  22h ; "
.eh_frame:000000000000633C                 db    0
.eh_frame:000000000000633D                 db    0
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db  14h
.eh_frame:0000000000006341                 db    0
.eh_frame:0000000000006342                 db    0
.eh_frame:0000000000006343                 db    0
.eh_frame:0000000000006344                 db  44h ; D
.eh_frame:0000000000006345                 db    0
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db  18h
.eh_frame:0000000000006349                 db 0B4h
.eh_frame:000000000000634A                 db 0FFh
.eh_frame:000000000000634B                 db 0FFh
.eh_frame:000000000000634C                 db    8
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db    0
.eh_frame:0000000000006351                 db    0
.eh_frame:0000000000006352                 db    0
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db    0
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db  10h
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db  5Ch ; \
.eh_frame:000000000000635D                 db    0
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  90h
.eh_frame:0000000000006361                 db 0B7h
.eh_frame:0000000000006362                 db 0FFh
.eh_frame:0000000000006363                 db 0FFh
.eh_frame:0000000000006364                 db  49h ; I
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db    0
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db  48h ; H
.eh_frame:000000000000636D                 db    0
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db  70h ; p
.eh_frame:0000000000006371                 db    0
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db 0CCh
.eh_frame:0000000000006375                 db 0B7h
.eh_frame:0000000000006376                 db 0FFh
.eh_frame:0000000000006377                 db 0FFh
.eh_frame:0000000000006378                 db 0ADh
.eh_frame:0000000000006379                 db    3
.eh_frame:000000000000637A                 db    0
.eh_frame:000000000000637B                 db    0
.eh_frame:000000000000637C                 db    0
.eh_frame:000000000000637D                 db  42h ; B
.eh_frame:000000000000637E                 db  0Eh
.eh_frame:000000000000637F                 db  10h
.eh_frame:0000000000006380                 db  8Fh
.eh_frame:0000000000006381                 db    2
.eh_frame:0000000000006382                 db  42h ; B
.eh_frame:0000000000006383                 db  0Eh
.eh_frame:0000000000006384                 db  18h
.eh_frame:0000000000006385                 db  8Eh
.eh_frame:0000000000006386                 db    3
.eh_frame:0000000000006387                 db  47h ; G
.eh_frame:0000000000006388                 db  0Eh
.eh_frame:0000000000006389                 db  20h
.eh_frame:000000000000638A                 db  8Dh
.eh_frame:000000000000638B                 db    4
.eh_frame:000000000000638C                 db  42h ; B
.eh_frame:000000000000638D                 db  0Eh
.eh_frame:000000000000638E                 db  28h ; (
.eh_frame:000000000000638F                 db  8Ch
.eh_frame:0000000000006390                 db    5
.eh_frame:0000000000006391                 db  41h ; A
.eh_frame:0000000000006392                 db  0Eh
.eh_frame:0000000000006393                 db  30h ; 0
.eh_frame:0000000000006394                 db  86h
.eh_frame:0000000000006395                 db    6
.eh_frame:0000000000006396                 db  41h ; A
.eh_frame:0000000000006397                 db  0Eh
.eh_frame:0000000000006398                 db  38h ; 8
.eh_frame:0000000000006399                 db  83h
.eh_frame:000000000000639A                 db    7
.eh_frame:000000000000639B                 db  44h ; D
.eh_frame:000000000000639C                 db  0Eh
.eh_frame:000000000000639D                 db  60h ; `
.eh_frame:000000000000639E                 db    3
.eh_frame:000000000000639F                 db  34h ; 4
.eh_frame:00000000000063A0                 db    2
.eh_frame:00000000000063A1                 db  0Ah
.eh_frame:00000000000063A2                 db  0Eh
.eh_frame:00000000000063A3                 db  38h ; 8
.eh_frame:00000000000063A4                 db  43h ; C
.eh_frame:00000000000063A5                 db  0Eh
.eh_frame:00000000000063A6                 db  30h ; 0
.eh_frame:00000000000063A7                 db  41h ; A
.eh_frame:00000000000063A8                 db  0Eh
.eh_frame:00000000000063A9                 db  28h ; (
.eh_frame:00000000000063AA                 db  42h ; B
.eh_frame:00000000000063AB                 db  0Eh
.eh_frame:00000000000063AC                 db  20h
.eh_frame:00000000000063AD                 db  42h ; B
.eh_frame:00000000000063AE                 db  0Eh
.eh_frame:00000000000063AF                 db  18h
.eh_frame:00000000000063B0                 db  42h ; B
.eh_frame:00000000000063B1                 db  0Eh
.eh_frame:00000000000063B2                 db  10h
.eh_frame:00000000000063B3                 db  42h ; B
.eh_frame:00000000000063B4                 db  0Eh
.eh_frame:00000000000063B5                 db    8
.eh_frame:00000000000063B6                 db  45h ; E
.eh_frame:00000000000063B7                 db  0Bh
.eh_frame:00000000000063B8                 db  28h ; (
.eh_frame:00000000000063B9                 db    0
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db 0BCh
.eh_frame:00000000000063BD                 db    0
.eh_frame:00000000000063BE                 db    0
.eh_frame:00000000000063BF                 db    0
.eh_frame:00000000000063C0                 db  30h ; 0
.eh_frame:00000000000063C1                 db 0BBh
.eh_frame:00000000000063C2                 db 0FFh
.eh_frame:00000000000063C3                 db 0FFh
.eh_frame:00000000000063C4                 db 0B2h
.eh_frame:00000000000063C5                 db    3
.eh_frame:00000000000063C6                 db    0
.eh_frame:00000000000063C7                 db    0
.eh_frame:00000000000063C8                 db    0
.eh_frame:00000000000063C9                 db  42h ; B
.eh_frame:00000000000063CA                 db  0Eh
.eh_frame:00000000000063CB                 db  10h
.eh_frame:00000000000063CC                 db  8Dh
.eh_frame:00000000000063CD                 db    2
.eh_frame:00000000000063CE                 db  42h ; B
.eh_frame:00000000000063CF                 db  0Eh
.eh_frame:00000000000063D0                 db  18h
.eh_frame:00000000000063D1                 db  8Ch
.eh_frame:00000000000063D2                 db    3
.eh_frame:00000000000063D3                 db  46h ; F
.eh_frame:00000000000063D4                 db  0Eh
.eh_frame:00000000000063D5                 db  20h
.eh_frame:00000000000063D6                 db  86h
.eh_frame:00000000000063D7                 db    4
.eh_frame:00000000000063D8                 db  41h ; A
.eh_frame:00000000000063D9                 db  0Eh
.eh_frame:00000000000063DA                 db  28h ; (
.eh_frame:00000000000063DB                 db  83h
.eh_frame:00000000000063DC                 db    5
.eh_frame:00000000000063DD                 db  49h ; I
.eh_frame:00000000000063DE                 db  0Eh
.eh_frame:00000000000063DF                 db 0B0h
.eh_frame:00000000000063E0                 db    1
.eh_frame:00000000000063E1                 db    0
.eh_frame:00000000000063E2                 db    0
.eh_frame:00000000000063E3                 db    0
.eh_frame:00000000000063E4                 db  38h ; 8
.eh_frame:00000000000063E5                 db    0
.eh_frame:00000000000063E6                 db    0
.eh_frame:00000000000063E7                 db    0
.eh_frame:00000000000063E8                 db 0E8h
.eh_frame:00000000000063E9                 db    0
.eh_frame:00000000000063EA                 db    0
.eh_frame:00000000000063EB                 db    0
.eh_frame:00000000000063EC                 db  84h
.eh_frame:00000000000063ED                 db 0B3h
.eh_frame:00000000000063EE                 db 0FFh
.eh_frame:00000000000063EF                 db 0FFh
.eh_frame:00000000000063F0                 db  6Dh ; m
.eh_frame:00000000000063F1                 db    2
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db    0
.eh_frame:00000000000063F5                 db  42h ; B
.eh_frame:00000000000063F6                 db  0Eh
.eh_frame:00000000000063F7                 db  10h
.eh_frame:00000000000063F8                 db  8Dh
.eh_frame:00000000000063F9                 db    2
.eh_frame:00000000000063FA                 db  42h ; B
.eh_frame:00000000000063FB                 db  0Eh
.eh_frame:00000000000063FC                 db  18h
.eh_frame:00000000000063FD                 db  8Ch
.eh_frame:00000000000063FE                 db    3
.eh_frame:00000000000063FF                 db  47h ; G
.eh_frame:0000000000006400                 db  0Eh
.eh_frame:0000000000006401                 db  20h
.eh_frame:0000000000006402                 db  86h
.eh_frame:0000000000006403                 db    4
.eh_frame:0000000000006404                 db  41h ; A
.eh_frame:0000000000006405                 db  0Eh
.eh_frame:0000000000006406                 db  28h ; (
.eh_frame:0000000000006407                 db  83h
.eh_frame:0000000000006408                 db    5
.eh_frame:0000000000006409                 db  49h ; I
.eh_frame:000000000000640A                 db  0Eh
.eh_frame:000000000000640B                 db  40h ; @
.eh_frame:000000000000640C                 db    3
.eh_frame:000000000000640D                 db 0F5h
.eh_frame:000000000000640E                 db    1
.eh_frame:000000000000640F                 db  0Ah
.eh_frame:0000000000006410                 db  0Eh
.eh_frame:0000000000006411                 db  28h ; (
.eh_frame:0000000000006412                 db  41h ; A
.eh_frame:0000000000006413                 db  0Eh
.eh_frame:0000000000006414                 db  20h
.eh_frame:0000000000006415                 db  41h ; A
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db  18h
.eh_frame:0000000000006418                 db  42h ; B
.eh_frame:0000000000006419                 db  0Eh
.eh_frame:000000000000641A                 db  10h
.eh_frame:000000000000641B                 db  42h ; B
.eh_frame:000000000000641C                 db  0Eh
.eh_frame:000000000000641D                 db    8
.eh_frame:000000000000641E                 db  41h ; A
.eh_frame:000000000000641F                 db  0Bh
.eh_frame:0000000000006420                 db  10h
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db  24h ; $
.eh_frame:0000000000006425                 db    1
.eh_frame:0000000000006426                 db    0
.eh_frame:0000000000006427                 db    0
.eh_frame:0000000000006428                 db  88h
.eh_frame:0000000000006429                 db 0BEh
.eh_frame:000000000000642A                 db 0FFh
.eh_frame:000000000000642B                 db 0FFh
.eh_frame:000000000000642C                 db    8
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db    0
.eh_frame:0000000000006431                 db    0
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db  10h
.eh_frame:0000000000006435                 db    0
.eh_frame:0000000000006436                 db    0
.eh_frame:0000000000006437                 db    0
.eh_frame:0000000000006438                 db  38h ; 8
.eh_frame:0000000000006439                 db    1
.eh_frame:000000000000643A                 db    0
.eh_frame:000000000000643B                 db    0
.eh_frame:000000000000643C                 db  84h
.eh_frame:000000000000643D                 db 0BEh
.eh_frame:000000000000643E                 db 0FFh
.eh_frame:000000000000643F                 db 0FFh
.eh_frame:0000000000006440                 db    8
.eh_frame:0000000000006441                 db    0
.eh_frame:0000000000006442                 db    0
.eh_frame:0000000000006443                 db    0
.eh_frame:0000000000006444                 db    0
.eh_frame:0000000000006445                 db    0
.eh_frame:0000000000006446                 db    0
.eh_frame:0000000000006447                 db    0
.eh_frame:0000000000006448                 db  2Ch ; ,
.eh_frame:0000000000006449                 db    0
.eh_frame:000000000000644A                 db    0
.eh_frame:000000000000644B                 db    0
.eh_frame:000000000000644C                 db  4Ch ; L
.eh_frame:000000000000644D                 db    1
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db  80h
.eh_frame:0000000000006451                 db 0BEh
.eh_frame:0000000000006452                 db 0FFh
.eh_frame:0000000000006453                 db 0FFh
.eh_frame:0000000000006454                 db 0A4h
.eh_frame:0000000000006455                 db    0
.eh_frame:0000000000006456                 db    0
.eh_frame:0000000000006457                 db    0
.eh_frame:0000000000006458                 db    0
.eh_frame:0000000000006459                 db  41h ; A
.eh_frame:000000000000645A                 db  0Eh
.eh_frame:000000000000645B                 db  10h
.eh_frame:000000000000645C                 db  86h
.eh_frame:000000000000645D                 db    2
.eh_frame:000000000000645E                 db  41h ; A
.eh_frame:000000000000645F                 db  0Eh
.eh_frame:0000000000006460                 db  18h
.eh_frame:0000000000006461                 db  83h
.eh_frame:0000000000006462                 db    3
.eh_frame:0000000000006463                 db  44h ; D
.eh_frame:0000000000006464                 db  0Eh
.eh_frame:0000000000006465                 db  20h
.eh_frame:0000000000006466                 db  7Ah ; z
.eh_frame:0000000000006467                 db  0Ah
.eh_frame:0000000000006468                 db  0Eh
.eh_frame:0000000000006469                 db  18h
.eh_frame:000000000000646A                 db  41h ; A
.eh_frame:000000000000646B                 db  0Eh
.eh_frame:000000000000646C                 db  10h
.eh_frame:000000000000646D                 db  41h ; A
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db    8
.eh_frame:0000000000006470                 db  41h ; A
.eh_frame:0000000000006471                 db  0Bh
.eh_frame:0000000000006472                 db    0
.eh_frame:0000000000006473                 db    0
.eh_frame:0000000000006474                 db    0
.eh_frame:0000000000006475                 db    0
.eh_frame:0000000000006476                 db    0
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  10h
.eh_frame:0000000000006479                 db    0
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db  7Ch ; |
.eh_frame:000000000000647D                 db    1
.eh_frame:000000000000647E                 db    0
.eh_frame:000000000000647F                 db    0
.eh_frame:0000000000006480                 db    0
.eh_frame:0000000000006481                 db 0BFh
.eh_frame:0000000000006482                 db 0FFh
.eh_frame:0000000000006483                 db 0FFh
.eh_frame:0000000000006484                 db    5
.eh_frame:0000000000006485                 db    0
.eh_frame:0000000000006486                 db    0
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db    0
.eh_frame:0000000000006489                 db    0
.eh_frame:000000000000648A                 db    0
.eh_frame:000000000000648B                 db    0
.eh_frame:000000000000648C                 db  18h
.eh_frame:000000000000648D                 db    0
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db  90h
.eh_frame:0000000000006491                 db    1
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db 0FCh
.eh_frame:0000000000006495                 db 0BEh
.eh_frame:0000000000006496                 db 0FFh
.eh_frame:0000000000006497                 db 0FFh
.eh_frame:0000000000006498                 db  22h ; "
.eh_frame:0000000000006499                 db    0
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db    0
.eh_frame:000000000000649D                 db  46h ; F
.eh_frame:000000000000649E                 db  0Eh
.eh_frame:000000000000649F                 db  10h
.eh_frame:00000000000064A0                 db  83h
.eh_frame:00000000000064A1                 db    2
.eh_frame:00000000000064A2                 db  4Eh ; N
.eh_frame:00000000000064A3                 db 0C3h
.eh_frame:00000000000064A4                 db  0Eh
.eh_frame:00000000000064A5                 db    8
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  1Ch
.eh_frame:00000000000064A9                 db    0
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db 0ACh
.eh_frame:00000000000064AD                 db    1
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db  10h
.eh_frame:00000000000064B1                 db 0BFh
.eh_frame:00000000000064B2                 db 0FFh
.eh_frame:00000000000064B3                 db 0FFh
.eh_frame:00000000000064B4                 db  9Fh
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db    0
.eh_frame:00000000000064B9                 db  44h ; D
.eh_frame:00000000000064BA                 db  0Eh
.eh_frame:00000000000064BB                 db  10h
.eh_frame:00000000000064BC                 db  83h
.eh_frame:00000000000064BD                 db    2
.eh_frame:00000000000064BE                 db    2
.eh_frame:00000000000064BF                 db  78h ; x
.eh_frame:00000000000064C0                 db  0Ah
.eh_frame:00000000000064C1                 db  0Eh
.eh_frame:00000000000064C2                 db    8
.eh_frame:00000000000064C3                 db  41h ; A
.eh_frame:00000000000064C4                 db  0Bh
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  40h ; @
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db 0CCh
.eh_frame:00000000000064CD                 db    1
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  90h
.eh_frame:00000000000064D1                 db 0BFh
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db 0E7h
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db  41h ; A
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db  10h
.eh_frame:00000000000064DC                 db  86h
.eh_frame:00000000000064DD                 db    2
.eh_frame:00000000000064DE                 db  41h ; A
.eh_frame:00000000000064DF                 db  0Eh
.eh_frame:00000000000064E0                 db  18h
.eh_frame:00000000000064E1                 db  83h
.eh_frame:00000000000064E2                 db    3
.eh_frame:00000000000064E3                 db  49h ; I
.eh_frame:00000000000064E4                 db  0Eh
.eh_frame:00000000000064E5                 db  20h
.eh_frame:00000000000064E6                 db  6Eh ; n
.eh_frame:00000000000064E7                 db  0Ah
.eh_frame:00000000000064E8                 db  0Eh
.eh_frame:00000000000064E9                 db  18h
.eh_frame:00000000000064EA                 db  41h ; A
.eh_frame:00000000000064EB                 db  0Eh
.eh_frame:00000000000064EC                 db  10h
.eh_frame:00000000000064ED                 db  41h ; A
.eh_frame:00000000000064EE                 db  0Eh
.eh_frame:00000000000064EF                 db    8
.eh_frame:00000000000064F0                 db  45h ; E
.eh_frame:00000000000064F1                 db  0Bh
.eh_frame:00000000000064F2                 db    2
.eh_frame:00000000000064F3                 db  4Ah ; J
.eh_frame:00000000000064F4                 db  0Ah
.eh_frame:00000000000064F5                 db  0Eh
.eh_frame:00000000000064F6                 db  18h
.eh_frame:00000000000064F7                 db  41h ; A
.eh_frame:00000000000064F8                 db  0Eh
.eh_frame:00000000000064F9                 db  10h
.eh_frame:00000000000064FA                 db  41h ; A
.eh_frame:00000000000064FB                 db  0Eh
.eh_frame:00000000000064FC                 db    8
.eh_frame:00000000000064FD                 db  44h ; D
.eh_frame:00000000000064FE                 db  0Bh
.eh_frame:00000000000064FF                 db    2
.eh_frame:0000000000006500                 db  54h ; T
.eh_frame:0000000000006501                 db  0Eh
.eh_frame:0000000000006502                 db  18h
.eh_frame:0000000000006503                 db  41h ; A
.eh_frame:0000000000006504                 db  0Eh
.eh_frame:0000000000006505                 db  10h
.eh_frame:0000000000006506                 db  41h ; A
.eh_frame:0000000000006507                 db  0Eh
.eh_frame:0000000000006508                 db    8
.eh_frame:0000000000006509                 db    0
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db  74h ; t
.eh_frame:000000000000650D                 db    0
.eh_frame:000000000000650E                 db    0
.eh_frame:000000000000650F                 db    0
.eh_frame:0000000000006510                 db  10h
.eh_frame:0000000000006511                 db    2
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db  3Ch ; <
.eh_frame:0000000000006515                 db 0C0h
.eh_frame:0000000000006516                 db 0FFh
.eh_frame:0000000000006517                 db 0FFh
.eh_frame:0000000000006518                 db  34h ; 4
.eh_frame:0000000000006519                 db  12h
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db    0
.eh_frame:000000000000651D                 db  42h ; B
.eh_frame:000000000000651E                 db  0Eh
.eh_frame:000000000000651F                 db  10h
.eh_frame:0000000000006520                 db  8Fh
.eh_frame:0000000000006521                 db    2
.eh_frame:0000000000006522                 db  42h ; B
.eh_frame:0000000000006523                 db  0Eh
.eh_frame:0000000000006524                 db  18h
.eh_frame:0000000000006525                 db  8Eh
.eh_frame:0000000000006526                 db    3
.eh_frame:0000000000006527                 db  45h ; E
.eh_frame:0000000000006528                 db  0Eh
.eh_frame:0000000000006529                 db  20h
.eh_frame:000000000000652A                 db  8Dh
.eh_frame:000000000000652B                 db    4
.eh_frame:000000000000652C                 db  42h ; B
.eh_frame:000000000000652D                 db  0Eh
.eh_frame:000000000000652E                 db  28h ; (
.eh_frame:000000000000652F                 db  8Ch
.eh_frame:0000000000006530                 db    5
.eh_frame:0000000000006531                 db  44h ; D
.eh_frame:0000000000006532                 db  0Eh
.eh_frame:0000000000006533                 db  30h ; 0
.eh_frame:0000000000006534                 db  86h
.eh_frame:0000000000006535                 db    6
.eh_frame:0000000000006536                 db  41h ; A
.eh_frame:0000000000006537                 db  0Eh
.eh_frame:0000000000006538                 db  38h ; 8
.eh_frame:0000000000006539                 db  83h
.eh_frame:000000000000653A                 db    7
.eh_frame:000000000000653B                 db  53h ; S
.eh_frame:000000000000653C                 db  0Eh
.eh_frame:000000000000653D                 db 0F0h
.eh_frame:000000000000653E                 db    1
.eh_frame:000000000000653F                 db    3
.eh_frame:0000000000006540                 db  81h
.eh_frame:0000000000006541                 db  0Bh
.eh_frame:0000000000006542                 db  0Eh
.eh_frame:0000000000006543                 db 0F8h
.eh_frame:0000000000006544                 db    1
.eh_frame:0000000000006545                 db  4Ah ; J
.eh_frame:0000000000006546                 db  0Eh
.eh_frame:0000000000006547                 db  80h
.eh_frame:0000000000006548                 db    2
.eh_frame:0000000000006549                 db  44h ; D
.eh_frame:000000000000654A                 db  0Eh
.eh_frame:000000000000654B                 db  88h
.eh_frame:000000000000654C                 db    2
.eh_frame:000000000000654D                 db  45h ; E
.eh_frame:000000000000654E                 db  0Eh
.eh_frame:000000000000654F                 db  90h
.eh_frame:0000000000006550                 db    2
.eh_frame:0000000000006551                 db  5Fh ; _
.eh_frame:0000000000006552                 db  0Eh
.eh_frame:0000000000006553                 db 0F0h
.eh_frame:0000000000006554                 db    1
.eh_frame:0000000000006555                 db  64h ; d
.eh_frame:0000000000006556                 db  0Ah
.eh_frame:0000000000006557                 db  0Eh
.eh_frame:0000000000006558                 db  38h ; 8
.eh_frame:0000000000006559                 db  41h ; A
.eh_frame:000000000000655A                 db  0Eh
.eh_frame:000000000000655B                 db  30h ; 0
.eh_frame:000000000000655C                 db  41h ; A
.eh_frame:000000000000655D                 db  0Eh
.eh_frame:000000000000655E                 db  28h ; (
.eh_frame:000000000000655F                 db  42h ; B
.eh_frame:0000000000006560                 db  0Eh
.eh_frame:0000000000006561                 db  20h
.eh_frame:0000000000006562                 db  42h ; B
.eh_frame:0000000000006563                 db  0Eh
.eh_frame:0000000000006564                 db  18h
.eh_frame:0000000000006565                 db  42h ; B
.eh_frame:0000000000006566                 db  0Eh
.eh_frame:0000000000006567                 db  10h
.eh_frame:0000000000006568                 db  42h ; B
.eh_frame:0000000000006569                 db  0Eh
.eh_frame:000000000000656A                 db    8
.eh_frame:000000000000656B                 db  44h ; D
.eh_frame:000000000000656C                 db  0Bh
.eh_frame:000000000000656D                 db    3
.eh_frame:000000000000656E                 db  99h
.eh_frame:000000000000656F                 db    5
.eh_frame:0000000000006570                 db  0Eh
.eh_frame:0000000000006571                 db 0F8h
.eh_frame:0000000000006572                 db    1
.eh_frame:0000000000006573                 db  4Dh ; M
.eh_frame:0000000000006574                 db  0Eh
.eh_frame:0000000000006575                 db  80h
.eh_frame:0000000000006576                 db    2
.eh_frame:0000000000006577                 db  44h ; D
.eh_frame:0000000000006578                 db  0Eh
.eh_frame:0000000000006579                 db  88h
.eh_frame:000000000000657A                 db    2
.eh_frame:000000000000657B                 db  47h ; G
.eh_frame:000000000000657C                 db  0Eh
.eh_frame:000000000000657D                 db  90h
.eh_frame:000000000000657E                 db    2
.eh_frame:000000000000657F                 db  5Bh ; [
.eh_frame:0000000000006580                 db  0Eh
.eh_frame:0000000000006581                 db 0F0h
.eh_frame:0000000000006582                 db    1
.eh_frame:0000000000006583                 db    0
.eh_frame:0000000000006584                 db  68h ; h
.eh_frame:0000000000006585                 db    0
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db  88h
.eh_frame:0000000000006589                 db    2
.eh_frame:000000000000658A                 db    0
.eh_frame:000000000000658B                 db    0
.eh_frame:000000000000658C                 db    4
.eh_frame:000000000000658D                 db 0D2h
.eh_frame:000000000000658E                 db 0FFh
.eh_frame:000000000000658F                 db 0FFh
.eh_frame:0000000000006590                 db 0ABh
.eh_frame:0000000000006591                 db    1
.eh_frame:0000000000006592                 db    0
.eh_frame:0000000000006593                 db    0
.eh_frame:0000000000006594                 db    0
.eh_frame:0000000000006595                 db  42h ; B
.eh_frame:0000000000006596                 db  0Eh
.eh_frame:0000000000006597                 db  10h
.eh_frame:0000000000006598                 db  8Fh
.eh_frame:0000000000006599                 db    2
.eh_frame:000000000000659A                 db  42h ; B
.eh_frame:000000000000659B                 db  0Eh
.eh_frame:000000000000659C                 db  18h
.eh_frame:000000000000659D                 db  8Eh
.eh_frame:000000000000659E                 db    3
.eh_frame:000000000000659F                 db  45h ; E
.eh_frame:00000000000065A0                 db  0Eh
.eh_frame:00000000000065A1                 db  20h
.eh_frame:00000000000065A2                 db  8Dh
.eh_frame:00000000000065A3                 db    4
.eh_frame:00000000000065A4                 db  42h ; B
.eh_frame:00000000000065A5                 db  0Eh
.eh_frame:00000000000065A6                 db  28h ; (
.eh_frame:00000000000065A7                 db  8Ch
.eh_frame:00000000000065A8                 db    5
.eh_frame:00000000000065A9                 db  44h ; D
.eh_frame:00000000000065AA                 db  0Eh
.eh_frame:00000000000065AB                 db  30h ; 0
.eh_frame:00000000000065AC                 db  86h
.eh_frame:00000000000065AD                 db    6
.eh_frame:00000000000065AE                 db  41h ; A
.eh_frame:00000000000065AF                 db  0Eh
.eh_frame:00000000000065B0                 db  38h ; 8
.eh_frame:00000000000065B1                 db  83h
.eh_frame:00000000000065B2                 db    7
.eh_frame:00000000000065B3                 db  47h ; G
.eh_frame:00000000000065B4                 db  0Eh
.eh_frame:00000000000065B5                 db  60h ; `
.eh_frame:00000000000065B6                 db    2
.eh_frame:00000000000065B7                 db  99h
.eh_frame:00000000000065B8                 db  0Eh
.eh_frame:00000000000065B9                 db  68h ; h
.eh_frame:00000000000065BA                 db  5Fh ; _
.eh_frame:00000000000065BB                 db  0Eh
.eh_frame:00000000000065BC                 db  70h ; p
.eh_frame:00000000000065BD                 db  46h ; F
.eh_frame:00000000000065BE                 db  0Eh
.eh_frame:00000000000065BF                 db  78h ; x
.eh_frame:00000000000065C0                 db  42h ; B
.eh_frame:00000000000065C1                 db  0Eh
.eh_frame:00000000000065C2                 db  80h
.eh_frame:00000000000065C3                 db    1
.eh_frame:00000000000065C4                 db  59h ; Y
.eh_frame:00000000000065C5                 db  0Eh
.eh_frame:00000000000065C6                 db  60h ; `
.eh_frame:00000000000065C7                 db    2
.eh_frame:00000000000065C8                 db  40h ; @
.eh_frame:00000000000065C9                 db  0Eh
.eh_frame:00000000000065CA                 db  68h ; h
.eh_frame:00000000000065CB                 db  4Bh ; K
.eh_frame:00000000000065CC                 db  0Eh
.eh_frame:00000000000065CD                 db  70h ; p
.eh_frame:00000000000065CE                 db  43h ; C
.eh_frame:00000000000065CF                 db  0Eh
.eh_frame:00000000000065D0                 db  78h ; x
.eh_frame:00000000000065D1                 db  45h ; E
.eh_frame:00000000000065D2                 db  0Eh
.eh_frame:00000000000065D3                 db  80h
.eh_frame:00000000000065D4                 db    1
.eh_frame:00000000000065D5                 db  5Eh ; ^
.eh_frame:00000000000065D6                 db  0Eh
.eh_frame:00000000000065D7                 db  60h ; `
.eh_frame:00000000000065D8                 db  4Ch ; L
.eh_frame:00000000000065D9                 db  0Ah
.eh_frame:00000000000065DA                 db  0Eh
.eh_frame:00000000000065DB                 db  38h ; 8
.eh_frame:00000000000065DC                 db  44h ; D
.eh_frame:00000000000065DD                 db  0Eh
.eh_frame:00000000000065DE                 db  30h ; 0
.eh_frame:00000000000065DF                 db  41h ; A
.eh_frame:00000000000065E0                 db  0Eh
.eh_frame:00000000000065E1                 db  28h ; (
.eh_frame:00000000000065E2                 db  42h ; B
.eh_frame:00000000000065E3                 db  0Eh
.eh_frame:00000000000065E4                 db  20h
.eh_frame:00000000000065E5                 db  42h ; B
.eh_frame:00000000000065E6                 db  0Eh
.eh_frame:00000000000065E7                 db  18h
.eh_frame:00000000000065E8                 db  42h ; B
.eh_frame:00000000000065E9                 db  0Eh
.eh_frame:00000000000065EA                 db  10h
.eh_frame:00000000000065EB                 db  42h ; B
.eh_frame:00000000000065EC                 db  0Eh
.eh_frame:00000000000065ED                 db    8
.eh_frame:00000000000065EE                 db  46h ; F
.eh_frame:00000000000065EF                 db  0Bh
.eh_frame:00000000000065F0                 db  28h ; (
.eh_frame:00000000000065F1                 db    0
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db 0F4h
.eh_frame:00000000000065F5                 db    2
.eh_frame:00000000000065F6                 db    0
.eh_frame:00000000000065F7                 db    0
.eh_frame:00000000000065F8                 db  48h ; H
.eh_frame:00000000000065F9                 db 0D3h
.eh_frame:00000000000065FA                 db 0FFh
.eh_frame:00000000000065FB                 db 0FFh
.eh_frame:00000000000065FC                 db  36h ; 6
.eh_frame:00000000000065FD                 db    0
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db    0
.eh_frame:0000000000006601                 db  42h ; B
.eh_frame:0000000000006602                 db  0Eh
.eh_frame:0000000000006603                 db  10h
.eh_frame:0000000000006604                 db  8Ch
.eh_frame:0000000000006605                 db    2
.eh_frame:0000000000006606                 db  41h ; A
.eh_frame:0000000000006607                 db  0Eh
.eh_frame:0000000000006608                 db  18h
.eh_frame:0000000000006609                 db  86h
.eh_frame:000000000000660A                 db    3
.eh_frame:000000000000660B                 db  41h ; A
.eh_frame:000000000000660C                 db  0Eh
.eh_frame:000000000000660D                 db  20h
.eh_frame:000000000000660E                 db  83h
.eh_frame:000000000000660F                 db    4
.eh_frame:0000000000006610                 db  6Eh ; n
.eh_frame:0000000000006611                 db  0Eh
.eh_frame:0000000000006612                 db  18h
.eh_frame:0000000000006613                 db  41h ; A
.eh_frame:0000000000006614                 db  0Eh
.eh_frame:0000000000006615                 db  10h
.eh_frame:0000000000006616                 db  42h ; B
.eh_frame:0000000000006617                 db  0Eh
.eh_frame:0000000000006618                 db    8
.eh_frame:0000000000006619                 db    0
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db  10h
.eh_frame:000000000000661D                 db    0
.eh_frame:000000000000661E                 db    0
.eh_frame:000000000000661F                 db    0
.eh_frame:0000000000006620                 db  20h
.eh_frame:0000000000006621                 db    3
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db  5Ch ; \
.eh_frame:0000000000006625                 db 0D3h
.eh_frame:0000000000006626                 db 0FFh
.eh_frame:0000000000006627                 db 0FFh
.eh_frame:0000000000006628                 db  11h
.eh_frame:0000000000006629                 db    0
.eh_frame:000000000000662A                 db    0
.eh_frame:000000000000662B                 db    0
.eh_frame:000000000000662C                 db    0
.eh_frame:000000000000662D                 db    0
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db  10h
.eh_frame:0000000000006631                 db    0
.eh_frame:0000000000006632                 db    0
.eh_frame:0000000000006633                 db    0
.eh_frame:0000000000006634                 db  34h ; 4
.eh_frame:0000000000006635                 db    3
.eh_frame:0000000000006636                 db    0
.eh_frame:0000000000006637                 db    0
.eh_frame:0000000000006638                 db  68h ; h
.eh_frame:0000000000006639                 db 0D3h
.eh_frame:000000000000663A                 db 0FFh
.eh_frame:000000000000663B                 db 0FFh
.eh_frame:000000000000663C                 db  11h
.eh_frame:000000000000663D                 db    0
.eh_frame:000000000000663E                 db    0
.eh_frame:000000000000663F                 db    0
.eh_frame:0000000000006640                 db    0
.eh_frame:0000000000006641                 db    0
.eh_frame:0000000000006642                 db    0
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db  10h
.eh_frame:0000000000006645                 db    0
.eh_frame:0000000000006646                 db    0
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db  48h ; H
.eh_frame:0000000000006649                 db    3
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db  74h ; t
.eh_frame:000000000000664D                 db 0D3h
.eh_frame:000000000000664E                 db 0FFh
.eh_frame:000000000000664F                 db 0FFh
.eh_frame:0000000000006650                 db  35h ; 5
.eh_frame:0000000000006651                 db    0
.eh_frame:0000000000006652                 db    0
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db  10h
.eh_frame:0000000000006659                 db    0
.eh_frame:000000000000665A                 db    0
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db  5Ch ; \
.eh_frame:000000000000665D                 db    3
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db 0A0h
.eh_frame:0000000000006661                 db 0D3h
.eh_frame:0000000000006662                 db 0FFh
.eh_frame:0000000000006663                 db 0FFh
.eh_frame:0000000000006664                 db  15h
.eh_frame:0000000000006665                 db    0
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db    0
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db  10h
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db  70h ; p
.eh_frame:0000000000006671                 db    3
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db 0ACh
.eh_frame:0000000000006675                 db 0D3h
.eh_frame:0000000000006676                 db 0FFh
.eh_frame:0000000000006677                 db 0FFh
.eh_frame:0000000000006678                 db  30h ; 0
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db    0
.eh_frame:000000000000667D                 db  6Bh ; k
.eh_frame:000000000000667E                 db  0Eh
.eh_frame:000000000000667F                 db  10h
.eh_frame:0000000000006680                 db  50h ; P
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db  84h
.eh_frame:0000000000006685                 db    3
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db 0C8h
.eh_frame:0000000000006689                 db 0D3h
.eh_frame:000000000000668A                 db 0FFh
.eh_frame:000000000000668B                 db 0FFh
.eh_frame:000000000000668C                 db  74h ; t
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db    0
.eh_frame:0000000000006691                 db  42h ; B
.eh_frame:0000000000006692                 db  0Eh
.eh_frame:0000000000006693                 db  10h
.eh_frame:0000000000006694                 db  8Fh
.eh_frame:0000000000006695                 db    2
.eh_frame:0000000000006696                 db  42h ; B
.eh_frame:0000000000006697                 db  0Eh
.eh_frame:0000000000006698                 db  18h
.eh_frame:0000000000006699                 db  8Eh
.eh_frame:000000000000669A                 db    3
.eh_frame:000000000000669B                 db  49h ; I
.eh_frame:000000000000669C                 db  0Eh
.eh_frame:000000000000669D                 db  20h
.eh_frame:000000000000669E                 db  8Dh
.eh_frame:000000000000669F                 db    4
.eh_frame:00000000000066A0                 db  42h ; B
.eh_frame:00000000000066A1                 db  0Eh
.eh_frame:00000000000066A2                 db  28h ; (
.eh_frame:00000000000066A3                 db  8Ch
.eh_frame:00000000000066A4                 db    5
.eh_frame:00000000000066A5                 db  44h ; D
.eh_frame:00000000000066A6                 db  0Eh
.eh_frame:00000000000066A7                 db  30h ; 0
.eh_frame:00000000000066A8                 db  86h
.eh_frame:00000000000066A9                 db    6
.eh_frame:00000000000066AA                 db  41h ; A
.eh_frame:00000000000066AB                 db  0Eh
.eh_frame:00000000000066AC                 db  38h ; 8
.eh_frame:00000000000066AD                 db  83h
.eh_frame:00000000000066AE                 db    7
.eh_frame:00000000000066AF                 db  4Dh ; M
.eh_frame:00000000000066B0                 db  0Eh
.eh_frame:00000000000066B1                 db  50h ; P
.eh_frame:00000000000066B2                 db  5Fh ; _
.eh_frame:00000000000066B3                 db  0Eh
.eh_frame:00000000000066B4                 db  58h ; X
.eh_frame:00000000000066B5                 db  47h ; G
.eh_frame:00000000000066B6                 db  0Eh
.eh_frame:00000000000066B7                 db  60h ; `
.eh_frame:00000000000066B8                 db  46h ; F
.eh_frame:00000000000066B9                 db  0Eh
.eh_frame:00000000000066BA                 db  68h ; h
.eh_frame:00000000000066BB                 db  44h ; D
.eh_frame:00000000000066BC                 db  0Eh
.eh_frame:00000000000066BD                 db  70h ; p
.eh_frame:00000000000066BE                 db  58h ; X
.eh_frame:00000000000066BF                 db  0Eh
.eh_frame:00000000000066C0                 db  38h ; 8
.eh_frame:00000000000066C1                 db  41h ; A
.eh_frame:00000000000066C2                 db  0Eh
.eh_frame:00000000000066C3                 db  30h ; 0
.eh_frame:00000000000066C4                 db  41h ; A
.eh_frame:00000000000066C5                 db  0Eh
.eh_frame:00000000000066C6                 db  28h ; (
.eh_frame:00000000000066C7                 db  42h ; B
.eh_frame:00000000000066C8                 db  0Eh
.eh_frame:00000000000066C9                 db  20h
.eh_frame:00000000000066CA                 db  42h ; B
.eh_frame:00000000000066CB                 db  0Eh
.eh_frame:00000000000066CC                 db  18h
.eh_frame:00000000000066CD                 db  42h ; B
.eh_frame:00000000000066CE                 db  0Eh
.eh_frame:00000000000066CF                 db  10h
.eh_frame:00000000000066D0                 db  42h ; B
.eh_frame:00000000000066D1                 db  0Eh
.eh_frame:00000000000066D2                 db    8
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db  68h ; h
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db 0D8h
.eh_frame:00000000000066D9                 db    3
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db 0F4h
.eh_frame:00000000000066DD                 db 0D3h
.eh_frame:00000000000066DE                 db 0FFh
.eh_frame:00000000000066DF                 db 0FFh
.eh_frame:00000000000066E0                 db 0E3h
.eh_frame:00000000000066E1                 db    0
.eh_frame:00000000000066E2                 db    0
.eh_frame:00000000000066E3                 db    0
.eh_frame:00000000000066E4                 db    0
.eh_frame:00000000000066E5                 db  42h ; B
.eh_frame:00000000000066E6                 db  0Eh
.eh_frame:00000000000066E7                 db  10h
.eh_frame:00000000000066E8                 db  8Fh
.eh_frame:00000000000066E9                 db    2
.eh_frame:00000000000066EA                 db  42h ; B
.eh_frame:00000000000066EB                 db  0Eh
.eh_frame:00000000000066EC                 db  18h
.eh_frame:00000000000066ED                 db  8Eh
.eh_frame:00000000000066EE                 db    3
.eh_frame:00000000000066EF                 db  49h ; I
.eh_frame:00000000000066F0                 db  0Eh
.eh_frame:00000000000066F1                 db  20h
.eh_frame:00000000000066F2                 db  8Dh
.eh_frame:00000000000066F3                 db    4
.eh_frame:00000000000066F4                 db  42h ; B
.eh_frame:00000000000066F5                 db  0Eh
.eh_frame:00000000000066F6                 db  28h ; (
.eh_frame:00000000000066F7                 db  8Ch
.eh_frame:00000000000066F8                 db    5
.eh_frame:00000000000066F9                 db  44h ; D
.eh_frame:00000000000066FA                 db  0Eh
.eh_frame:00000000000066FB                 db  30h ; 0
.eh_frame:00000000000066FC                 db  86h
.eh_frame:00000000000066FD                 db    6
.eh_frame:00000000000066FE                 db  41h ; A
.eh_frame:00000000000066FF                 db  0Eh
.eh_frame:0000000000006700                 db  38h ; 8
.eh_frame:0000000000006701                 db  83h
.eh_frame:0000000000006702                 db    7
.eh_frame:0000000000006703                 db  4Dh ; M
.eh_frame:0000000000006704                 db  0Eh
.eh_frame:0000000000006705                 db  70h ; p
.eh_frame:0000000000006706                 db  65h ; e
.eh_frame:0000000000006707                 db  0Eh
.eh_frame:0000000000006708                 db  78h ; x
.eh_frame:0000000000006709                 db  4Dh ; M
.eh_frame:000000000000670A                 db  0Eh
.eh_frame:000000000000670B                 db  80h
.eh_frame:000000000000670C                 db    1
.eh_frame:000000000000670D                 db  46h ; F
.eh_frame:000000000000670E                 db  0Eh
.eh_frame:000000000000670F                 db  88h
.eh_frame:0000000000006710                 db    1
.eh_frame:0000000000006711                 db  42h ; B
.eh_frame:0000000000006712                 db  0Eh
.eh_frame:0000000000006713                 db  90h
.eh_frame:0000000000006714                 db    1
.eh_frame:0000000000006715                 db  5Eh ; ^
.eh_frame:0000000000006716                 db  0Eh
.eh_frame:0000000000006717                 db  70h ; p
.eh_frame:0000000000006718                 db  56h ; V
.eh_frame:0000000000006719                 db  0Eh
.eh_frame:000000000000671A                 db  78h ; x
.eh_frame:000000000000671B                 db  43h ; C
.eh_frame:000000000000671C                 db  0Eh
.eh_frame:000000000000671D                 db  80h
.eh_frame:000000000000671E                 db    1
.eh_frame:000000000000671F                 db  43h ; C
.eh_frame:0000000000006720                 db  0Eh
.eh_frame:0000000000006721                 db  88h
.eh_frame:0000000000006722                 db    1
.eh_frame:0000000000006723                 db  56h ; V
.eh_frame:0000000000006724                 db  0Eh
.eh_frame:0000000000006725                 db  90h
.eh_frame:0000000000006726                 db    1
.eh_frame:0000000000006727                 db  52h ; R
.eh_frame:0000000000006728                 db  0Eh
.eh_frame:0000000000006729                 db  70h ; p
.eh_frame:000000000000672A                 db  5Bh ; [
.eh_frame:000000000000672B                 db  0Eh
.eh_frame:000000000000672C                 db  38h ; 8
.eh_frame:000000000000672D                 db  41h ; A
.eh_frame:000000000000672E                 db  0Eh
.eh_frame:000000000000672F                 db  30h ; 0
.eh_frame:0000000000006730                 db  41h ; A
.eh_frame:0000000000006731                 db  0Eh
.eh_frame:0000000000006732                 db  28h ; (
.eh_frame:0000000000006733                 db  42h ; B
.eh_frame:0000000000006734                 db  0Eh
.eh_frame:0000000000006735                 db  20h
.eh_frame:0000000000006736                 db  42h ; B
.eh_frame:0000000000006737                 db  0Eh
.eh_frame:0000000000006738                 db  18h
.eh_frame:0000000000006739                 db  42h ; B
.eh_frame:000000000000673A                 db  0Eh
.eh_frame:000000000000673B                 db  10h
.eh_frame:000000000000673C                 db  42h ; B
.eh_frame:000000000000673D                 db  0Eh
.eh_frame:000000000000673E                 db    8
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db  10h
.eh_frame:0000000000006741                 db    0
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db  44h ; D
.eh_frame:0000000000006745                 db    4
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db  78h ; x
.eh_frame:0000000000006749                 db 0D4h
.eh_frame:000000000000674A                 db 0FFh
.eh_frame:000000000000674B                 db 0FFh
.eh_frame:000000000000674C                 db  0Ah
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db    0
.eh_frame:0000000000006751                 db    0
.eh_frame:0000000000006752                 db    0
.eh_frame:0000000000006753                 db    0
.eh_frame:0000000000006754                 db  28h ; (
.eh_frame:0000000000006755                 db    0
.eh_frame:0000000000006756                 db    0
.eh_frame:0000000000006757                 db    0
.eh_frame:0000000000006758                 db  58h ; X
.eh_frame:0000000000006759                 db    4
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db  74h ; t
.eh_frame:000000000000675D                 db 0D4h
.eh_frame:000000000000675E                 db 0FFh
.eh_frame:000000000000675F                 db 0FFh
.eh_frame:0000000000006760                 db  93h
.eh_frame:0000000000006761                 db    0
.eh_frame:0000000000006762                 db    0
.eh_frame:0000000000006763                 db    0
.eh_frame:0000000000006764                 db    0
.eh_frame:0000000000006765                 db  48h ; H
.eh_frame:0000000000006766                 db  0Eh
.eh_frame:0000000000006767                 db  10h
.eh_frame:0000000000006768                 db  8Ch
.eh_frame:0000000000006769                 db    2
.eh_frame:000000000000676A                 db  48h ; H
.eh_frame:000000000000676B                 db  0Eh
.eh_frame:000000000000676C                 db  18h
.eh_frame:000000000000676D                 db  86h
.eh_frame:000000000000676E                 db    3
.eh_frame:000000000000676F                 db  41h ; A
.eh_frame:0000000000006770                 db  0Eh
.eh_frame:0000000000006771                 db  20h
.eh_frame:0000000000006772                 db  83h
.eh_frame:0000000000006773                 db    4
.eh_frame:0000000000006774                 db    2
.eh_frame:0000000000006775                 db  74h ; t
.eh_frame:0000000000006776                 db  0Eh
.eh_frame:0000000000006777                 db  18h
.eh_frame:0000000000006778                 db  4Bh ; K
.eh_frame:0000000000006779                 db  0Eh
.eh_frame:000000000000677A                 db  10h
.eh_frame:000000000000677B                 db  42h ; B
.eh_frame:000000000000677C                 db  0Eh
.eh_frame:000000000000677D                 db    8
.eh_frame:000000000000677E                 db    0
.eh_frame:000000000000677F                 db    0
.eh_frame:0000000000006780                 db  10h
.eh_frame:0000000000006781                 db    0
.eh_frame:0000000000006782                 db    0
.eh_frame:0000000000006783                 db    0
.eh_frame:0000000000006784                 db  84h
.eh_frame:0000000000006785                 db    4
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db 0E8h
.eh_frame:0000000000006789                 db 0D4h
.eh_frame:000000000000678A                 db 0FFh
.eh_frame:000000000000678B                 db 0FFh
.eh_frame:000000000000678C                 db  13h
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db    0
.eh_frame:0000000000006791                 db    0
.eh_frame:0000000000006792                 db    0
.eh_frame:0000000000006793                 db    0
.eh_frame:0000000000006794                 db  10h
.eh_frame:0000000000006795                 db    0
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db  98h
.eh_frame:0000000000006799                 db    4
.eh_frame:000000000000679A                 db    0
.eh_frame:000000000000679B                 db    0
.eh_frame:000000000000679C                 db 0F4h
.eh_frame:000000000000679D                 db 0D4h
.eh_frame:000000000000679E                 db 0FFh
.eh_frame:000000000000679F                 db 0FFh
.eh_frame:00000000000067A0                 db  0Ch
.eh_frame:00000000000067A1                 db    0
.eh_frame:00000000000067A2                 db    0
.eh_frame:00000000000067A3                 db    0
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db    0
.eh_frame:00000000000067A6                 db    0
.eh_frame:00000000000067A7                 db    0
.eh_frame:00000000000067A8                 db  10h
.eh_frame:00000000000067A9                 db    0
.eh_frame:00000000000067AA                 db    0
.eh_frame:00000000000067AB                 db    0
.eh_frame:00000000000067AC                 db 0ACh
.eh_frame:00000000000067AD                 db    4
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db 0F0h
.eh_frame:00000000000067B1                 db 0D4h
.eh_frame:00000000000067B2                 db 0FFh
.eh_frame:00000000000067B3                 db 0FFh
.eh_frame:00000000000067B4                 db  18h
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db    0
.eh_frame:00000000000067B9                 db    0
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db  10h
.eh_frame:00000000000067BD                 db    0
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db 0C0h
.eh_frame:00000000000067C1                 db    4
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db 0FCh
.eh_frame:00000000000067C5                 db 0D4h
.eh_frame:00000000000067C6                 db 0FFh
.eh_frame:00000000000067C7                 db 0FFh
.eh_frame:00000000000067C8                 db  14h
.eh_frame:00000000000067C9                 db    0
.eh_frame:00000000000067CA                 db    0
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db    0
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  18h
.eh_frame:00000000000067D1                 db    0
.eh_frame:00000000000067D2                 db    0
.eh_frame:00000000000067D3                 db    0
.eh_frame:00000000000067D4                 db 0D4h
.eh_frame:00000000000067D5                 db    4
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db    8
.eh_frame:00000000000067D9                 db 0D5h
.eh_frame:00000000000067DA                 db 0FFh
.eh_frame:00000000000067DB                 db 0FFh
.eh_frame:00000000000067DC                 db  8Eh
.eh_frame:00000000000067DD                 db    0
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db    0
.eh_frame:00000000000067E1                 db  44h ; D
.eh_frame:00000000000067E2                 db  0Eh
.eh_frame:00000000000067E3                 db  50h ; P
.eh_frame:00000000000067E4                 db    2
.eh_frame:00000000000067E5                 db  7Fh ; 
.eh_frame:00000000000067E6                 db  0Ah
.eh_frame:00000000000067E7                 db  0Eh
.eh_frame:00000000000067E8                 db    8
.eh_frame:00000000000067E9                 db  41h ; A
.eh_frame:00000000000067EA                 db  0Bh
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db  18h
.eh_frame:00000000000067ED                 db    0
.eh_frame:00000000000067EE                 db    0
.eh_frame:00000000000067EF                 db    0
.eh_frame:00000000000067F0                 db 0F0h
.eh_frame:00000000000067F1                 db    4
.eh_frame:00000000000067F2                 db    0
.eh_frame:00000000000067F3                 db    0
.eh_frame:00000000000067F4                 db  7Ch ; |
.eh_frame:00000000000067F5                 db 0D5h
.eh_frame:00000000000067F6                 db 0FFh
.eh_frame:00000000000067F7                 db 0FFh
.eh_frame:00000000000067F8                 db  8Ah
.eh_frame:00000000000067F9                 db    0
.eh_frame:00000000000067FA                 db    0
.eh_frame:00000000000067FB                 db    0
.eh_frame:00000000000067FC                 db    0
.eh_frame:00000000000067FD                 db  44h ; D
.eh_frame:00000000000067FE                 db  0Eh
.eh_frame:00000000000067FF                 db  50h ; P
.eh_frame:0000000000006800                 db    2
.eh_frame:0000000000006801                 db  7Bh ; {
.eh_frame:0000000000006802                 db  0Ah
.eh_frame:0000000000006803                 db  0Eh
.eh_frame:0000000000006804                 db    8
.eh_frame:0000000000006805                 db  41h ; A
.eh_frame:0000000000006806                 db  0Bh
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db  10h
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db  0Ch
.eh_frame:000000000000680D                 db    5
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db 0F0h
.eh_frame:0000000000006811                 db 0D5h
.eh_frame:0000000000006812                 db 0FFh
.eh_frame:0000000000006813                 db 0FFh
.eh_frame:0000000000006814                 db  0Ch
.eh_frame:0000000000006815                 db    0
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db    0
.eh_frame:0000000000006819                 db    0
.eh_frame:000000000000681A                 db    0
.eh_frame:000000000000681B                 db    0
.eh_frame:000000000000681C                 db  10h
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db  20h
.eh_frame:0000000000006821                 db    5
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db 0ECh
.eh_frame:0000000000006825                 db 0D5h
.eh_frame:0000000000006826                 db 0FFh
.eh_frame:0000000000006827                 db 0FFh
.eh_frame:0000000000006828                 db  0Fh
.eh_frame:0000000000006829                 db    0
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db    0
.eh_frame:000000000000682D                 db    0
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db  18h
.eh_frame:0000000000006831                 db    0
.eh_frame:0000000000006832                 db    0
.eh_frame:0000000000006833                 db    0
.eh_frame:0000000000006834                 db  34h ; 4
.eh_frame:0000000000006835                 db    5
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db 0E8h
.eh_frame:0000000000006839                 db 0D5h
.eh_frame:000000000000683A                 db 0FFh
.eh_frame:000000000000683B                 db 0FFh
.eh_frame:000000000000683C                 db  98h
.eh_frame:000000000000683D                 db    0
.eh_frame:000000000000683E                 db    0
.eh_frame:000000000000683F                 db    0
.eh_frame:0000000000006840                 db    0
.eh_frame:0000000000006841                 db  44h ; D
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db  50h ; P
.eh_frame:0000000000006844                 db    2
.eh_frame:0000000000006845                 db  8Eh
.eh_frame:0000000000006846                 db  0Ah
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db    8
.eh_frame:0000000000006849                 db  41h ; A
.eh_frame:000000000000684A                 db  0Bh
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db  10h
.eh_frame:000000000000684D                 db    0
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db  50h ; P
.eh_frame:0000000000006851                 db    5
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db  6Ch ; l
.eh_frame:0000000000006855                 db 0D6h
.eh_frame:0000000000006856                 db 0FFh
.eh_frame:0000000000006857                 db 0FFh
.eh_frame:0000000000006858                 db  10h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db    0
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  10h
.eh_frame:0000000000006861                 db    0
.eh_frame:0000000000006862                 db    0
.eh_frame:0000000000006863                 db    0
.eh_frame:0000000000006864                 db  64h ; d
.eh_frame:0000000000006865                 db    5
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db  68h ; h
.eh_frame:0000000000006869                 db 0D6h
.eh_frame:000000000000686A                 db 0FFh
.eh_frame:000000000000686B                 db 0FFh
.eh_frame:000000000000686C                 db  11h
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db    0
.eh_frame:0000000000006871                 db    0
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db  10h
.eh_frame:0000000000006875                 db    0
.eh_frame:0000000000006876                 db    0
.eh_frame:0000000000006877                 db    0
.eh_frame:0000000000006878                 db  78h ; x
.eh_frame:0000000000006879                 db    5
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db  74h ; t
.eh_frame:000000000000687D                 db 0D6h
.eh_frame:000000000000687E                 db 0FFh
.eh_frame:000000000000687F                 db 0FFh
.eh_frame:0000000000006880                 db  0Ah
.eh_frame:0000000000006881                 db    0
.eh_frame:0000000000006882                 db    0
.eh_frame:0000000000006883                 db    0
.eh_frame:0000000000006884                 db    0
.eh_frame:0000000000006885                 db    0
.eh_frame:0000000000006886                 db    0
.eh_frame:0000000000006887                 db    0
.eh_frame:0000000000006888                 db  18h
.eh_frame:0000000000006889                 db    0
.eh_frame:000000000000688A                 db    0
.eh_frame:000000000000688B                 db    0
.eh_frame:000000000000688C                 db  8Ch
.eh_frame:000000000000688D                 db    5
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db  70h ; p
.eh_frame:0000000000006891                 db 0D6h
.eh_frame:0000000000006892                 db 0FFh
.eh_frame:0000000000006893                 db 0FFh
.eh_frame:0000000000006894                 db  8Eh
.eh_frame:0000000000006895                 db    0
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db    0
.eh_frame:0000000000006899                 db  44h ; D
.eh_frame:000000000000689A                 db  0Eh
.eh_frame:000000000000689B                 db  50h ; P
.eh_frame:000000000000689C                 db    2
.eh_frame:000000000000689D                 db  7Fh ; 
.eh_frame:000000000000689E                 db  0Ah
.eh_frame:000000000000689F                 db  0Eh
.eh_frame:00000000000068A0                 db    8
.eh_frame:00000000000068A1                 db  41h ; A
.eh_frame:00000000000068A2                 db  0Bh
.eh_frame:00000000000068A3                 db    0
.eh_frame:00000000000068A4                 db  18h
.eh_frame:00000000000068A5                 db    0
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db 0A8h
.eh_frame:00000000000068A9                 db    5
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db 0E4h
.eh_frame:00000000000068AD                 db 0D6h
.eh_frame:00000000000068AE                 db 0FFh
.eh_frame:00000000000068AF                 db 0FFh
.eh_frame:00000000000068B0                 db  91h
.eh_frame:00000000000068B1                 db    0
.eh_frame:00000000000068B2                 db    0
.eh_frame:00000000000068B3                 db    0
.eh_frame:00000000000068B4                 db    0
.eh_frame:00000000000068B5                 db  44h ; D
.eh_frame:00000000000068B6                 db  0Eh
.eh_frame:00000000000068B7                 db  50h ; P
.eh_frame:00000000000068B8                 db    2
.eh_frame:00000000000068B9                 db  82h
.eh_frame:00000000000068BA                 db  0Ah
.eh_frame:00000000000068BB                 db  0Eh
.eh_frame:00000000000068BC                 db    8
.eh_frame:00000000000068BD                 db  41h ; A
.eh_frame:00000000000068BE                 db  0Bh
.eh_frame:00000000000068BF                 db    0
.eh_frame:00000000000068C0                 db  10h
.eh_frame:00000000000068C1                 db    0
.eh_frame:00000000000068C2                 db    0
.eh_frame:00000000000068C3                 db    0
.eh_frame:00000000000068C4                 db 0C4h
.eh_frame:00000000000068C5                 db    5
.eh_frame:00000000000068C6                 db    0
.eh_frame:00000000000068C7                 db    0
.eh_frame:00000000000068C8                 db  68h ; h
.eh_frame:00000000000068C9                 db 0D7h
.eh_frame:00000000000068CA                 db 0FFh
.eh_frame:00000000000068CB                 db 0FFh
.eh_frame:00000000000068CC                 db  0Ch
.eh_frame:00000000000068CD                 db    0
.eh_frame:00000000000068CE                 db    0
.eh_frame:00000000000068CF                 db    0
.eh_frame:00000000000068D0                 db    0
.eh_frame:00000000000068D1                 db    0
.eh_frame:00000000000068D2                 db    0
.eh_frame:00000000000068D3                 db    0
.eh_frame:00000000000068D4                 db  10h
.eh_frame:00000000000068D5                 db    0
.eh_frame:00000000000068D6                 db    0
.eh_frame:00000000000068D7                 db    0
.eh_frame:00000000000068D8                 db 0D8h
.eh_frame:00000000000068D9                 db    5
.eh_frame:00000000000068DA                 db    0
.eh_frame:00000000000068DB                 db    0
.eh_frame:00000000000068DC                 db  64h ; d
.eh_frame:00000000000068DD                 db 0D7h
.eh_frame:00000000000068DE                 db 0FFh
.eh_frame:00000000000068DF                 db 0FFh
.eh_frame:00000000000068E0                 db  17h
.eh_frame:00000000000068E1                 db    0
.eh_frame:00000000000068E2                 db    0
.eh_frame:00000000000068E3                 db    0
.eh_frame:00000000000068E4                 db    0
.eh_frame:00000000000068E5                 db    0
.eh_frame:00000000000068E6                 db    0
.eh_frame:00000000000068E7                 db    0
.eh_frame:00000000000068E8                 db  10h
.eh_frame:00000000000068E9                 db    0
.eh_frame:00000000000068EA                 db    0
.eh_frame:00000000000068EB                 db    0
.eh_frame:00000000000068EC                 db 0ECh
.eh_frame:00000000000068ED                 db    5
.eh_frame:00000000000068EE                 db    0
.eh_frame:00000000000068EF                 db    0
.eh_frame:00000000000068F0                 db  70h ; p
.eh_frame:00000000000068F1                 db 0D7h
.eh_frame:00000000000068F2                 db 0FFh
.eh_frame:00000000000068F3                 db 0FFh
.eh_frame:00000000000068F4                 db  13h
.eh_frame:00000000000068F5                 db    0
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db    0
.eh_frame:00000000000068F9                 db    0
.eh_frame:00000000000068FA                 db    0
.eh_frame:00000000000068FB                 db    0
.eh_frame:00000000000068FC                 db  10h
.eh_frame:00000000000068FD                 db    0
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db    0
.eh_frame:0000000000006901                 db    6
.eh_frame:0000000000006902                 db    0
.eh_frame:0000000000006903                 db    0
.eh_frame:0000000000006904                 db  7Ch ; |
.eh_frame:0000000000006905                 db 0D7h
.eh_frame:0000000000006906                 db 0FFh
.eh_frame:0000000000006907                 db 0FFh
.eh_frame:0000000000006908                 db  0Ch
.eh_frame:0000000000006909                 db    0
.eh_frame:000000000000690A                 db    0
.eh_frame:000000000000690B                 db    0
.eh_frame:000000000000690C                 db    0
.eh_frame:000000000000690D                 db    0
.eh_frame:000000000000690E                 db    0
.eh_frame:000000000000690F                 db    0
.eh_frame:0000000000006910                 db  10h
.eh_frame:0000000000006911                 db    0
.eh_frame:0000000000006912                 db    0
.eh_frame:0000000000006913                 db    0
.eh_frame:0000000000006914                 db  14h
.eh_frame:0000000000006915                 db    6
.eh_frame:0000000000006916                 db    0
.eh_frame:0000000000006917                 db    0
.eh_frame:0000000000006918                 db  78h ; x
.eh_frame:0000000000006919                 db 0D7h
.eh_frame:000000000000691A                 db 0FFh
.eh_frame:000000000000691B                 db 0FFh
.eh_frame:000000000000691C                 db  14h
.eh_frame:000000000000691D                 db    0
.eh_frame:000000000000691E                 db    0
.eh_frame:000000000000691F                 db    0
.eh_frame:0000000000006920                 db    0
.eh_frame:0000000000006921                 db    0
.eh_frame:0000000000006922                 db    0
.eh_frame:0000000000006923                 db    0
.eh_frame:0000000000006924                 db  10h
.eh_frame:0000000000006925                 db    0
.eh_frame:0000000000006926                 db    0
.eh_frame:0000000000006927                 db    0
.eh_frame:0000000000006928                 db  28h ; (
.eh_frame:0000000000006929                 db    6
.eh_frame:000000000000692A                 db    0
.eh_frame:000000000000692B                 db    0
.eh_frame:000000000000692C                 db  84h
.eh_frame:000000000000692D                 db 0D7h
.eh_frame:000000000000692E                 db 0FFh
.eh_frame:000000000000692F                 db 0FFh
.eh_frame:0000000000006930                 db  13h
.eh_frame:0000000000006931                 db    0
.eh_frame:0000000000006932                 db    0
.eh_frame:0000000000006933                 db    0
.eh_frame:0000000000006934                 db    0
.eh_frame:0000000000006935                 db    0
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db  14h
.eh_frame:0000000000006939                 db    0
.eh_frame:000000000000693A                 db    0
.eh_frame:000000000000693B                 db    0
.eh_frame:000000000000693C                 db  3Ch ; <
.eh_frame:000000000000693D                 db    6
.eh_frame:000000000000693E                 db    0
.eh_frame:000000000000693F                 db    0
.eh_frame:0000000000006940                 db  90h
.eh_frame:0000000000006941                 db 0D7h
.eh_frame:0000000000006942                 db 0FFh
.eh_frame:0000000000006943                 db 0FFh
.eh_frame:0000000000006944                 db  18h
.eh_frame:0000000000006945                 db    0
.eh_frame:0000000000006946                 db    0
.eh_frame:0000000000006947                 db    0
.eh_frame:0000000000006948                 db    0
.eh_frame:0000000000006949                 db    0
.eh_frame:000000000000694A                 db    0
.eh_frame:000000000000694B                 db    0
.eh_frame:000000000000694C                 db    0
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db  10h
.eh_frame:0000000000006951                 db    1
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db  54h ; T
.eh_frame:0000000000006955                 db    6
.eh_frame:0000000000006956                 db    0
.eh_frame:0000000000006957                 db    0
.eh_frame:0000000000006958                 db  98h
.eh_frame:0000000000006959                 db 0D7h
.eh_frame:000000000000695A                 db 0FFh
.eh_frame:000000000000695B                 db 0FFh
.eh_frame:000000000000695C                 db  17h
.eh_frame:000000000000695D                 db    4
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db    0
.eh_frame:0000000000006961                 db  42h ; B
.eh_frame:0000000000006962                 db  0Eh
.eh_frame:0000000000006963                 db  10h
.eh_frame:0000000000006964                 db  8Fh
.eh_frame:0000000000006965                 db    2
.eh_frame:0000000000006966                 db  42h ; B
.eh_frame:0000000000006967                 db  0Eh
.eh_frame:0000000000006968                 db  18h
.eh_frame:0000000000006969                 db  8Eh
.eh_frame:000000000000696A                 db    3
.eh_frame:000000000000696B                 db  42h ; B
.eh_frame:000000000000696C                 db  0Eh
.eh_frame:000000000000696D                 db  20h
.eh_frame:000000000000696E                 db  8Dh
.eh_frame:000000000000696F                 db    4
.eh_frame:0000000000006970                 db  42h ; B
.eh_frame:0000000000006971                 db  0Eh
.eh_frame:0000000000006972                 db  28h ; (
.eh_frame:0000000000006973                 db  8Ch
.eh_frame:0000000000006974                 db    5
.eh_frame:0000000000006975                 db  44h ; D
.eh_frame:0000000000006976                 db  0Eh
.eh_frame:0000000000006977                 db  30h ; 0
.eh_frame:0000000000006978                 db  86h
.eh_frame:0000000000006979                 db    6
.eh_frame:000000000000697A                 db  41h ; A
.eh_frame:000000000000697B                 db  0Eh
.eh_frame:000000000000697C                 db  38h ; 8
.eh_frame:000000000000697D                 db  83h
.eh_frame:000000000000697E                 db    7
.eh_frame:000000000000697F                 db  4Ah ; J
.eh_frame:0000000000006980                 db  0Eh
.eh_frame:0000000000006981                 db  60h ; `
.eh_frame:0000000000006982                 db    2
.eh_frame:0000000000006983                 db 0DDh
.eh_frame:0000000000006984                 db  0Eh
.eh_frame:0000000000006985                 db  68h ; h
.eh_frame:0000000000006986                 db  57h ; W
.eh_frame:0000000000006987                 db  0Eh
.eh_frame:0000000000006988                 db  70h ; p
.eh_frame:0000000000006989                 db  42h ; B
.eh_frame:000000000000698A                 db  0Eh
.eh_frame:000000000000698B                 db  78h ; x
.eh_frame:000000000000698C                 db  42h ; B
.eh_frame:000000000000698D                 db  0Eh
.eh_frame:000000000000698E                 db  80h
.eh_frame:000000000000698F                 db    1
.eh_frame:0000000000006990                 db  42h ; B
.eh_frame:0000000000006991                 db  0Eh
.eh_frame:0000000000006992                 db  88h
.eh_frame:0000000000006993                 db    1
.eh_frame:0000000000006994                 db  42h ; B
.eh_frame:0000000000006995                 db  0Eh
.eh_frame:0000000000006996                 db  90h
.eh_frame:0000000000006997                 db    1
.eh_frame:0000000000006998                 db  53h ; S
.eh_frame:0000000000006999                 db  0Eh
.eh_frame:000000000000699A                 db  60h ; `
.eh_frame:000000000000699B                 db  44h ; D
.eh_frame:000000000000699C                 db  0Ah
.eh_frame:000000000000699D                 db  0Eh
.eh_frame:000000000000699E                 db  38h ; 8
.eh_frame:000000000000699F                 db  41h ; A
.eh_frame:00000000000069A0                 db  0Eh
.eh_frame:00000000000069A1                 db  30h ; 0
.eh_frame:00000000000069A2                 db  41h ; A
.eh_frame:00000000000069A3                 db  0Eh
.eh_frame:00000000000069A4                 db  28h ; (
.eh_frame:00000000000069A5                 db  42h ; B
.eh_frame:00000000000069A6                 db  0Eh
.eh_frame:00000000000069A7                 db  20h
.eh_frame:00000000000069A8                 db  42h ; B
.eh_frame:00000000000069A9                 db  0Eh
.eh_frame:00000000000069AA                 db  18h
.eh_frame:00000000000069AB                 db  42h ; B
.eh_frame:00000000000069AC                 db  0Eh
.eh_frame:00000000000069AD                 db  10h
.eh_frame:00000000000069AE                 db  42h ; B
.eh_frame:00000000000069AF                 db  0Eh
.eh_frame:00000000000069B0                 db    8
.eh_frame:00000000000069B1                 db  44h ; D
.eh_frame:00000000000069B2                 db  0Bh
.eh_frame:00000000000069B3                 db    2
.eh_frame:00000000000069B4                 db  78h ; x
.eh_frame:00000000000069B5                 db  0Ah
.eh_frame:00000000000069B6                 db  0Eh
.eh_frame:00000000000069B7                 db  68h ; h
.eh_frame:00000000000069B8                 db  48h ; H
.eh_frame:00000000000069B9                 db  0Bh
.eh_frame:00000000000069BA                 db  5Ah ; Z
.eh_frame:00000000000069BB                 db  0Ah
.eh_frame:00000000000069BC                 db  0Eh
.eh_frame:00000000000069BD                 db  38h ; 8
.eh_frame:00000000000069BE                 db  47h ; G
.eh_frame:00000000000069BF                 db  0Eh
.eh_frame:00000000000069C0                 db  30h ; 0
.eh_frame:00000000000069C1                 db  41h ; A
.eh_frame:00000000000069C2                 db  0Eh
.eh_frame:00000000000069C3                 db  28h ; (
.eh_frame:00000000000069C4                 db  42h ; B
.eh_frame:00000000000069C5                 db  0Eh
.eh_frame:00000000000069C6                 db  20h
.eh_frame:00000000000069C7                 db  42h ; B
.eh_frame:00000000000069C8                 db  0Eh
.eh_frame:00000000000069C9                 db  18h
.eh_frame:00000000000069CA                 db  42h ; B
.eh_frame:00000000000069CB                 db  0Eh
.eh_frame:00000000000069CC                 db  10h
.eh_frame:00000000000069CD                 db  42h ; B
.eh_frame:00000000000069CE                 db  0Eh
.eh_frame:00000000000069CF                 db    8
.eh_frame:00000000000069D0                 db  56h ; V
.eh_frame:00000000000069D1                 db  0Bh
.eh_frame:00000000000069D2                 db  5Eh ; ^
.eh_frame:00000000000069D3                 db  0Ah
.eh_frame:00000000000069D4                 db  0Eh
.eh_frame:00000000000069D5                 db  38h ; 8
.eh_frame:00000000000069D6                 db  52h ; R
.eh_frame:00000000000069D7                 db  0Eh
.eh_frame:00000000000069D8                 db  30h ; 0
.eh_frame:00000000000069D9                 db  41h ; A
.eh_frame:00000000000069DA                 db  0Eh
.eh_frame:00000000000069DB                 db  28h ; (
.eh_frame:00000000000069DC                 db  42h ; B
.eh_frame:00000000000069DD                 db  0Eh
.eh_frame:00000000000069DE                 db  20h
.eh_frame:00000000000069DF                 db  42h ; B
.eh_frame:00000000000069E0                 db  0Eh
.eh_frame:00000000000069E1                 db  18h
.eh_frame:00000000000069E2                 db  42h ; B
.eh_frame:00000000000069E3                 db  0Eh
.eh_frame:00000000000069E4                 db  10h
.eh_frame:00000000000069E5                 db  42h ; B
.eh_frame:00000000000069E6                 db  0Eh
.eh_frame:00000000000069E7                 db    8
.eh_frame:00000000000069E8                 db  4Fh ; O
.eh_frame:00000000000069E9                 db  0Bh
.eh_frame:00000000000069EA                 db  62h ; b
.eh_frame:00000000000069EB                 db  0Ah
.eh_frame:00000000000069EC                 db  0Eh
.eh_frame:00000000000069ED                 db  38h ; 8
.eh_frame:00000000000069EE                 db  50h ; P
.eh_frame:00000000000069EF                 db  0Eh
.eh_frame:00000000000069F0                 db  30h ; 0
.eh_frame:00000000000069F1                 db  41h ; A
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db  28h ; (
.eh_frame:00000000000069F4                 db  42h ; B
.eh_frame:00000000000069F5                 db  0Eh
.eh_frame:00000000000069F6                 db  20h
.eh_frame:00000000000069F7                 db  42h ; B
.eh_frame:00000000000069F8                 db  0Eh
.eh_frame:00000000000069F9                 db  18h
.eh_frame:00000000000069FA                 db  42h ; B
.eh_frame:00000000000069FB                 db  0Eh
.eh_frame:00000000000069FC                 db  10h
.eh_frame:00000000000069FD                 db  42h ; B
.eh_frame:00000000000069FE                 db  0Eh
.eh_frame:00000000000069FF                 db    8
.eh_frame:0000000000006A00                 db  55h ; U
.eh_frame:0000000000006A01                 db  0Bh
.eh_frame:0000000000006A02                 db  66h ; f
.eh_frame:0000000000006A03                 db  0Eh
.eh_frame:0000000000006A04                 db  68h ; h
.eh_frame:0000000000006A05                 db  42h ; B
.eh_frame:0000000000006A06                 db  0Eh
.eh_frame:0000000000006A07                 db  70h ; p
.eh_frame:0000000000006A08                 db  5Ch ; \
.eh_frame:0000000000006A09                 db  0Eh
.eh_frame:0000000000006A0A                 db  68h ; h
.eh_frame:0000000000006A0B                 db  41h ; A
.eh_frame:0000000000006A0C                 db  0Eh
.eh_frame:0000000000006A0D                 db  60h ; `
.eh_frame:0000000000006A0E                 db  44h ; D
.eh_frame:0000000000006A0F                 db  0Ah
.eh_frame:0000000000006A10                 db  0Eh
.eh_frame:0000000000006A11                 db  38h ; 8
.eh_frame:0000000000006A12                 db  41h ; A
.eh_frame:0000000000006A13                 db  0Eh
.eh_frame:0000000000006A14                 db  30h ; 0
.eh_frame:0000000000006A15                 db  41h ; A
.eh_frame:0000000000006A16                 db  0Eh
.eh_frame:0000000000006A17                 db  28h ; (
.eh_frame:0000000000006A18                 db  42h ; B
.eh_frame:0000000000006A19                 db  0Eh
.eh_frame:0000000000006A1A                 db  20h
.eh_frame:0000000000006A1B                 db  42h ; B
.eh_frame:0000000000006A1C                 db  0Eh
.eh_frame:0000000000006A1D                 db  18h
.eh_frame:0000000000006A1E                 db  42h ; B
.eh_frame:0000000000006A1F                 db  0Eh
.eh_frame:0000000000006A20                 db  10h
.eh_frame:0000000000006A21                 db  42h ; B
.eh_frame:0000000000006A22                 db  0Eh
.eh_frame:0000000000006A23                 db    8
.eh_frame:0000000000006A24                 db  45h ; E
.eh_frame:0000000000006A25                 db  0Bh
.eh_frame:0000000000006A26                 db  68h ; h
.eh_frame:0000000000006A27                 db  0Ah
.eh_frame:0000000000006A28                 db  0Eh
.eh_frame:0000000000006A29                 db  68h ; h
.eh_frame:0000000000006A2A                 db  48h ; H
.eh_frame:0000000000006A2B                 db  0Bh
.eh_frame:0000000000006A2C                 db  72h ; r
.eh_frame:0000000000006A2D                 db  0Eh
.eh_frame:0000000000006A2E                 db  68h ; h
.eh_frame:0000000000006A2F                 db  45h ; E
.eh_frame:0000000000006A30                 db  0Eh
.eh_frame:0000000000006A31                 db  70h ; p
.eh_frame:0000000000006A32                 db  42h ; B
.eh_frame:0000000000006A33                 db  0Eh
.eh_frame:0000000000006A34                 db  78h ; x
.eh_frame:0000000000006A35                 db  42h ; B
.eh_frame:0000000000006A36                 db  0Eh
.eh_frame:0000000000006A37                 db  80h
.eh_frame:0000000000006A38                 db    1
.eh_frame:0000000000006A39                 db  5Eh ; ^
.eh_frame:0000000000006A3A                 db  0Eh
.eh_frame:0000000000006A3B                 db  60h ; `
.eh_frame:0000000000006A3C                 db  44h ; D
.eh_frame:0000000000006A3D                 db  0Ah
.eh_frame:0000000000006A3E                 db  0Eh
.eh_frame:0000000000006A3F                 db  38h ; 8
.eh_frame:0000000000006A40                 db  41h ; A
.eh_frame:0000000000006A41                 db  0Eh
.eh_frame:0000000000006A42                 db  30h ; 0
.eh_frame:0000000000006A43                 db  41h ; A
.eh_frame:0000000000006A44                 db  0Eh
.eh_frame:0000000000006A45                 db  28h ; (
.eh_frame:0000000000006A46                 db  42h ; B
.eh_frame:0000000000006A47                 db  0Eh
.eh_frame:0000000000006A48                 db  20h
.eh_frame:0000000000006A49                 db  42h ; B
.eh_frame:0000000000006A4A                 db  0Eh
.eh_frame:0000000000006A4B                 db  18h
.eh_frame:0000000000006A4C                 db  42h ; B
.eh_frame:0000000000006A4D                 db  0Eh
.eh_frame:0000000000006A4E                 db  10h
.eh_frame:0000000000006A4F                 db  42h ; B
.eh_frame:0000000000006A50                 db  0Eh
.eh_frame:0000000000006A51                 db    8
.eh_frame:0000000000006A52                 db  41h ; A
.eh_frame:0000000000006A53                 db  0Bh
.eh_frame:0000000000006A54                 db  79h ; y
.eh_frame:0000000000006A55                 db  0Ah
.eh_frame:0000000000006A56                 db  0Eh
.eh_frame:0000000000006A57                 db  68h ; h
.eh_frame:0000000000006A58                 db  42h ; B
.eh_frame:0000000000006A59                 db  0Eh
.eh_frame:0000000000006A5A                 db  70h ; p
.eh_frame:0000000000006A5B                 db  42h ; B
.eh_frame:0000000000006A5C                 db  0Eh
.eh_frame:0000000000006A5D                 db  78h ; x
.eh_frame:0000000000006A5E                 db  42h ; B
.eh_frame:0000000000006A5F                 db  0Eh
.eh_frame:0000000000006A60                 db  80h
.eh_frame:0000000000006A61                 db    1
.eh_frame:0000000000006A62                 db  51h ; Q
.eh_frame:0000000000006A63                 db  0Bh
.eh_frame:0000000000006A64                 db  10h
.eh_frame:0000000000006A65                 db    0
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db  68h ; h
.eh_frame:0000000000006A69                 db    7
.eh_frame:0000000000006A6A                 db    0
.eh_frame:0000000000006A6B                 db    0
.eh_frame:0000000000006A6C                 db 0A4h
.eh_frame:0000000000006A6D                 db 0DAh
.eh_frame:0000000000006A6E                 db 0FFh
.eh_frame:0000000000006A6F                 db 0FFh
.eh_frame:0000000000006A70                 db  20h
.eh_frame:0000000000006A71                 db    0
.eh_frame:0000000000006A72                 db    0
.eh_frame:0000000000006A73                 db    0
.eh_frame:0000000000006A74                 db    0
.eh_frame:0000000000006A75                 db    0
.eh_frame:0000000000006A76                 db    0
.eh_frame:0000000000006A77                 db    0
.eh_frame:0000000000006A78                 db  18h
.eh_frame:0000000000006A79                 db    0
.eh_frame:0000000000006A7A                 db    0
.eh_frame:0000000000006A7B                 db    0
.eh_frame:0000000000006A7C                 db  7Ch ; |
.eh_frame:0000000000006A7D                 db    7
.eh_frame:0000000000006A7E                 db    0
.eh_frame:0000000000006A7F                 db    0
.eh_frame:0000000000006A80                 db 0B0h
.eh_frame:0000000000006A81                 db 0DAh
.eh_frame:0000000000006A82                 db 0FFh
.eh_frame:0000000000006A83                 db 0FFh
.eh_frame:0000000000006A84                 db  78h ; x
.eh_frame:0000000000006A85                 db    0
.eh_frame:0000000000006A86                 db    0
.eh_frame:0000000000006A87                 db    0
.eh_frame:0000000000006A88                 db    0
.eh_frame:0000000000006A89                 db  44h ; D
.eh_frame:0000000000006A8A                 db  0Eh
.eh_frame:0000000000006A8B                 db  70h ; p
.eh_frame:0000000000006A8C                 db    2
.eh_frame:0000000000006A8D                 db  60h ; `
.eh_frame:0000000000006A8E                 db  0Ah
.eh_frame:0000000000006A8F                 db  0Eh
.eh_frame:0000000000006A90                 db    8
.eh_frame:0000000000006A91                 db  41h ; A
.eh_frame:0000000000006A92                 db  0Bh
.eh_frame:0000000000006A93                 db    0
.eh_frame:0000000000006A94                 db  28h ; (
.eh_frame:0000000000006A95                 db    0
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db  98h
.eh_frame:0000000000006A99                 db    7
.eh_frame:0000000000006A9A                 db    0
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db  14h
.eh_frame:0000000000006A9D                 db 0DBh
.eh_frame:0000000000006A9E                 db 0FFh
.eh_frame:0000000000006A9F                 db 0FFh
.eh_frame:0000000000006AA0                 db 0D5h
.eh_frame:0000000000006AA1                 db    0
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db    0
.eh_frame:0000000000006AA5                 db  41h ; A
.eh_frame:0000000000006AA6                 db  0Eh
.eh_frame:0000000000006AA7                 db  10h
.eh_frame:0000000000006AA8                 db  86h
.eh_frame:0000000000006AA9                 db    2
.eh_frame:0000000000006AAA                 db  41h ; A
.eh_frame:0000000000006AAB                 db  0Eh
.eh_frame:0000000000006AAC                 db  18h
.eh_frame:0000000000006AAD                 db  83h
.eh_frame:0000000000006AAE                 db    3
.eh_frame:0000000000006AAF                 db  50h ; P
.eh_frame:0000000000006AB0                 db  0Eh
.eh_frame:0000000000006AB1                 db 0D0h
.eh_frame:0000000000006AB2                 db    1
.eh_frame:0000000000006AB3                 db    2
.eh_frame:0000000000006AB4                 db 0ABh
.eh_frame:0000000000006AB5                 db  0Ah
.eh_frame:0000000000006AB6                 db  0Eh
.eh_frame:0000000000006AB7                 db  18h
.eh_frame:0000000000006AB8                 db  41h ; A
.eh_frame:0000000000006AB9                 db  0Eh
.eh_frame:0000000000006ABA                 db  10h
.eh_frame:0000000000006ABB                 db  41h ; A
.eh_frame:0000000000006ABC                 db  0Eh
.eh_frame:0000000000006ABD                 db    8
.eh_frame:0000000000006ABE                 db  41h ; A
.eh_frame:0000000000006ABF                 db  0Bh
.eh_frame:0000000000006AC0                 db  1Ch
.eh_frame:0000000000006AC1                 db    0
.eh_frame:0000000000006AC2                 db    0
.eh_frame:0000000000006AC3                 db    0
.eh_frame:0000000000006AC4                 db 0C4h
.eh_frame:0000000000006AC5                 db    7
.eh_frame:0000000000006AC6                 db    0
.eh_frame:0000000000006AC7                 db    0
.eh_frame:0000000000006AC8                 db 0C8h
.eh_frame:0000000000006AC9                 db 0DBh
.eh_frame:0000000000006ACA                 db 0FFh
.eh_frame:0000000000006ACB                 db 0FFh
.eh_frame:0000000000006ACC                 db  80h
.eh_frame:0000000000006ACD                 db    0
.eh_frame:0000000000006ACE                 db    0
.eh_frame:0000000000006ACF                 db    0
.eh_frame:0000000000006AD0                 db    0
.eh_frame:0000000000006AD1                 db  41h ; A
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  10h
.eh_frame:0000000000006AD4                 db  83h
.eh_frame:0000000000006AD5                 db    2
.eh_frame:0000000000006AD6                 db    2
.eh_frame:0000000000006AD7                 db  7Ah ; z
.eh_frame:0000000000006AD8                 db  0Eh
.eh_frame:0000000000006AD9                 db    8
.eh_frame:0000000000006ADA                 db    0
.eh_frame:0000000000006ADB                 db    0
.eh_frame:0000000000006ADC                 db    0
.eh_frame:0000000000006ADD                 db    0
.eh_frame:0000000000006ADE                 db    0
.eh_frame:0000000000006ADF                 db    0
.eh_frame:0000000000006AE0                 db  18h
.eh_frame:0000000000006AE1                 db    0
.eh_frame:0000000000006AE2                 db    0
.eh_frame:0000000000006AE3                 db    0
.eh_frame:0000000000006AE4                 db 0E4h
.eh_frame:0000000000006AE5                 db    7
.eh_frame:0000000000006AE6                 db    0
.eh_frame:0000000000006AE7                 db    0
.eh_frame:0000000000006AE8                 db  28h ; (
.eh_frame:0000000000006AE9                 db 0DCh
.eh_frame:0000000000006AEA                 db 0FFh
.eh_frame:0000000000006AEB                 db 0FFh
.eh_frame:0000000000006AEC                 db  1Ah
.eh_frame:0000000000006AED                 db    0
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db    0
.eh_frame:0000000000006AF1                 db  41h ; A
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db  10h
.eh_frame:0000000000006AF4                 db  83h
.eh_frame:0000000000006AF5                 db    2
.eh_frame:0000000000006AF6                 db  53h ; S
.eh_frame:0000000000006AF7                 db  0Ah
.eh_frame:0000000000006AF8                 db  0Eh
.eh_frame:0000000000006AF9                 db    8
.eh_frame:0000000000006AFA                 db  41h ; A
.eh_frame:0000000000006AFB                 db  0Bh
.eh_frame:0000000000006AFC                 db  10h
.eh_frame:0000000000006AFD                 db    0
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db    0
.eh_frame:0000000000006B01                 db    8
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db  2Ch ; ,
.eh_frame:0000000000006B05                 db 0DCh
.eh_frame:0000000000006B06                 db 0FFh
.eh_frame:0000000000006B07                 db 0FFh
.eh_frame:0000000000006B08                 db  24h ; $
.eh_frame:0000000000006B09                 db    0
.eh_frame:0000000000006B0A                 db    0
.eh_frame:0000000000006B0B                 db    0
.eh_frame:0000000000006B0C                 db    0
.eh_frame:0000000000006B0D                 db  5Fh ; _
.eh_frame:0000000000006B0E                 db  0Eh
.eh_frame:0000000000006B0F                 db  10h
.eh_frame:0000000000006B10                 db  10h
.eh_frame:0000000000006B11                 db    0
.eh_frame:0000000000006B12                 db    0
.eh_frame:0000000000006B13                 db    0
.eh_frame:0000000000006B14                 db  14h
.eh_frame:0000000000006B15                 db    8
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db  48h ; H
.eh_frame:0000000000006B19                 db 0DCh
.eh_frame:0000000000006B1A                 db 0FFh
.eh_frame:0000000000006B1B                 db 0FFh
.eh_frame:0000000000006B1C                 db    2
.eh_frame:0000000000006B1D                 db    0
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db    0
.eh_frame:0000000000006B21                 db    0
.eh_frame:0000000000006B22                 db    0
.eh_frame:0000000000006B23                 db    0
.eh_frame:0000000000006B24                 db  20h
.eh_frame:0000000000006B25                 db    0
.eh_frame:0000000000006B26                 db    0
.eh_frame:0000000000006B27                 db    0
.eh_frame:0000000000006B28                 db  28h ; (
.eh_frame:0000000000006B29                 db    8
.eh_frame:0000000000006B2A                 db    0
.eh_frame:0000000000006B2B                 db    0
.eh_frame:0000000000006B2C                 db  44h ; D
.eh_frame:0000000000006B2D                 db 0DCh
.eh_frame:0000000000006B2E                 db 0FFh
.eh_frame:0000000000006B2F                 db 0FFh
.eh_frame:0000000000006B30                 db  36h ; 6
.eh_frame:0000000000006B31                 db    0
.eh_frame:0000000000006B32                 db    0
.eh_frame:0000000000006B33                 db    0
.eh_frame:0000000000006B34                 db    0
.eh_frame:0000000000006B35                 db  44h ; D
.eh_frame:0000000000006B36                 db  0Eh
.eh_frame:0000000000006B37                 db  10h
.eh_frame:0000000000006B38                 db  83h
.eh_frame:0000000000006B39                 db    2
.eh_frame:0000000000006B3A                 db  5Dh ; ]
.eh_frame:0000000000006B3B                 db  0Ah
.eh_frame:0000000000006B3C                 db  0Eh
.eh_frame:0000000000006B3D                 db    8
.eh_frame:0000000000006B3E                 db  47h ; G
.eh_frame:0000000000006B3F                 db  0Bh
.eh_frame:0000000000006B40                 db  48h ; H
.eh_frame:0000000000006B41                 db  0Ah
.eh_frame:0000000000006B42                 db  0Eh
.eh_frame:0000000000006B43                 db    8
.eh_frame:0000000000006B44                 db  41h ; A
.eh_frame:0000000000006B45                 db  0Bh
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db  10h
.eh_frame:0000000000006B49                 db    0
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  4Ch ; L
.eh_frame:0000000000006B4D                 db    8
.eh_frame:0000000000006B4E                 db    0
.eh_frame:0000000000006B4F                 db    0
.eh_frame:0000000000006B50                 db  60h ; `
.eh_frame:0000000000006B51                 db 0DCh
.eh_frame:0000000000006B52                 db 0FFh
.eh_frame:0000000000006B53                 db 0FFh
.eh_frame:0000000000006B54                 db  24h ; $
.eh_frame:0000000000006B55                 db    0
.eh_frame:0000000000006B56                 db    0
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db    0
.eh_frame:0000000000006B59                 db  5Fh ; _
.eh_frame:0000000000006B5A                 db  0Eh
.eh_frame:0000000000006B5B                 db  10h
.eh_frame:0000000000006B5C                 db  14h
.eh_frame:0000000000006B5D                 db    0
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db  60h ; `
.eh_frame:0000000000006B61                 db    8
.eh_frame:0000000000006B62                 db    0
.eh_frame:0000000000006B63                 db    0
.eh_frame:0000000000006B64                 db  7Ch ; |
.eh_frame:0000000000006B65                 db 0DCh
.eh_frame:0000000000006B66                 db 0FFh
.eh_frame:0000000000006B67                 db 0FFh
.eh_frame:0000000000006B68                 db  82h
.eh_frame:0000000000006B69                 db    0
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db    0
.eh_frame:0000000000006B6D                 db    2
.eh_frame:0000000000006B6E                 db  5Fh ; _
.eh_frame:0000000000006B6F                 db  0Eh
.eh_frame:0000000000006B70                 db  10h
.eh_frame:0000000000006B71                 db  49h ; I
.eh_frame:0000000000006B72                 db  0Eh
.eh_frame:0000000000006B73                 db    8
.eh_frame:0000000000006B74                 db  14h
.eh_frame:0000000000006B75                 db    0
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db  78h ; x
.eh_frame:0000000000006B79                 db    8
.eh_frame:0000000000006B7A                 db    0
.eh_frame:0000000000006B7B                 db    0
.eh_frame:0000000000006B7C                 db 0F4h
.eh_frame:0000000000006B7D                 db 0DCh
.eh_frame:0000000000006B7E                 db 0FFh
.eh_frame:0000000000006B7F                 db 0FFh
.eh_frame:0000000000006B80                 db  4Ah ; J
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84                 db    0
.eh_frame:0000000000006B85                 db    2
.eh_frame:0000000000006B86                 db  45h ; E
.eh_frame:0000000000006B87                 db  0Eh
.eh_frame:0000000000006B88                 db  10h
.eh_frame:0000000000006B89                 db    0
.eh_frame:0000000000006B8A                 db    0
.eh_frame:0000000000006B8B                 db    0
.eh_frame:0000000000006B8C                 db  18h
.eh_frame:0000000000006B8D                 db    0
.eh_frame:0000000000006B8E                 db    0
.eh_frame:0000000000006B8F                 db    0
.eh_frame:0000000000006B90                 db  90h
.eh_frame:0000000000006B91                 db    8
.eh_frame:0000000000006B92                 db    0
.eh_frame:0000000000006B93                 db    0
.eh_frame:0000000000006B94                 db  2Ch ; ,
.eh_frame:0000000000006B95                 db 0DDh
.eh_frame:0000000000006B96                 db 0FFh
.eh_frame:0000000000006B97                 db 0FFh
.eh_frame:0000000000006B98                 db  17h
.eh_frame:0000000000006B99                 db    0
.eh_frame:0000000000006B9A                 db    0
.eh_frame:0000000000006B9B                 db    0
.eh_frame:0000000000006B9C                 db    0
.eh_frame:0000000000006B9D                 db  41h ; A
.eh_frame:0000000000006B9E                 db  0Eh
.eh_frame:0000000000006B9F                 db  10h
.eh_frame:0000000000006BA0                 db  83h
.eh_frame:0000000000006BA1                 db    2
.eh_frame:0000000000006BA2                 db  51h ; Q
.eh_frame:0000000000006BA3                 db  0Eh
.eh_frame:0000000000006BA4                 db    8
.eh_frame:0000000000006BA5                 db    0
.eh_frame:0000000000006BA6                 db    0
.eh_frame:0000000000006BA7                 db    0
.eh_frame:0000000000006BA8                 db  18h
.eh_frame:0000000000006BA9                 db    0
.eh_frame:0000000000006BAA                 db    0
.eh_frame:0000000000006BAB                 db    0
.eh_frame:0000000000006BAC                 db 0ACh
.eh_frame:0000000000006BAD                 db    8
.eh_frame:0000000000006BAE                 db    0
.eh_frame:0000000000006BAF                 db    0
.eh_frame:0000000000006BB0                 db  30h ; 0
.eh_frame:0000000000006BB1                 db 0DDh
.eh_frame:0000000000006BB2                 db 0FFh
.eh_frame:0000000000006BB3                 db 0FFh
.eh_frame:0000000000006BB4                 db  2Eh ; .
.eh_frame:0000000000006BB5                 db    0
.eh_frame:0000000000006BB6                 db    0
.eh_frame:0000000000006BB7                 db    0
.eh_frame:0000000000006BB8                 db    0
.eh_frame:0000000000006BB9                 db  47h ; G
.eh_frame:0000000000006BBA                 db  0Eh
.eh_frame:0000000000006BBB                 db  10h
.eh_frame:0000000000006BBC                 db  61h ; a
.eh_frame:0000000000006BBD                 db  0Ah
.eh_frame:0000000000006BBE                 db  0Eh
.eh_frame:0000000000006BBF                 db    8
.eh_frame:0000000000006BC0                 db  41h ; A
.eh_frame:0000000000006BC1                 db  0Bh
.eh_frame:0000000000006BC2                 db    0
.eh_frame:0000000000006BC3                 db    0
.eh_frame:0000000000006BC4                 db  24h ; $
.eh_frame:0000000000006BC5                 db    0
.eh_frame:0000000000006BC6                 db    0
.eh_frame:0000000000006BC7                 db    0
.eh_frame:0000000000006BC8                 db 0C8h
.eh_frame:0000000000006BC9                 db    8
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db  44h ; D
.eh_frame:0000000000006BCD                 db 0DDh
.eh_frame:0000000000006BCE                 db 0FFh
.eh_frame:0000000000006BCF                 db 0FFh
.eh_frame:0000000000006BD0                 db  28h ; (
.eh_frame:0000000000006BD1                 db    0
.eh_frame:0000000000006BD2                 db    0
.eh_frame:0000000000006BD3                 db    0
.eh_frame:0000000000006BD4                 db    0
.eh_frame:0000000000006BD5                 db  41h ; A
.eh_frame:0000000000006BD6                 db  0Eh
.eh_frame:0000000000006BD7                 db  10h
.eh_frame:0000000000006BD8                 db  86h
.eh_frame:0000000000006BD9                 db    2
.eh_frame:0000000000006BDA                 db  41h ; A
.eh_frame:0000000000006BDB                 db  0Eh
.eh_frame:0000000000006BDC                 db  18h
.eh_frame:0000000000006BDD                 db  83h
.eh_frame:0000000000006BDE                 db    3
.eh_frame:0000000000006BDF                 db  4Dh ; M
.eh_frame:0000000000006BE0                 db  0Eh
.eh_frame:0000000000006BE1                 db  20h
.eh_frame:0000000000006BE2                 db  49h ; I
.eh_frame:0000000000006BE3                 db  0Eh
.eh_frame:0000000000006BE4                 db  18h
.eh_frame:0000000000006BE5                 db  47h ; G
.eh_frame:0000000000006BE6                 db  0Eh
.eh_frame:0000000000006BE7                 db  10h
.eh_frame:0000000000006BE8                 db  41h ; A
.eh_frame:0000000000006BE9                 db  0Eh
.eh_frame:0000000000006BEA                 db    8
.eh_frame:0000000000006BEB                 db    0
.eh_frame:0000000000006BEC                 db  18h
.eh_frame:0000000000006BED                 db    0
.eh_frame:0000000000006BEE                 db    0
.eh_frame:0000000000006BEF                 db    0
.eh_frame:0000000000006BF0                 db 0F0h
.eh_frame:0000000000006BF1                 db    8
.eh_frame:0000000000006BF2                 db    0
.eh_frame:0000000000006BF3                 db    0
.eh_frame:0000000000006BF4                 db  4Ch ; L
.eh_frame:0000000000006BF5                 db 0DDh
.eh_frame:0000000000006BF6                 db 0FFh
.eh_frame:0000000000006BF7                 db 0FFh
.eh_frame:0000000000006BF8                 db  13h
.eh_frame:0000000000006BF9                 db    0
.eh_frame:0000000000006BFA                 db    0
.eh_frame:0000000000006BFB                 db    0
.eh_frame:0000000000006BFC                 db    0
.eh_frame:0000000000006BFD                 db  41h ; A
.eh_frame:0000000000006BFE                 db  0Eh
.eh_frame:0000000000006BFF                 db  10h
.eh_frame:0000000000006C00                 db  83h
.eh_frame:0000000000006C01                 db    2
.eh_frame:0000000000006C02                 db  50h ; P
.eh_frame:0000000000006C03                 db  0Eh
.eh_frame:0000000000006C04                 db    8
.eh_frame:0000000000006C05                 db    0
.eh_frame:0000000000006C06                 db    0
.eh_frame:0000000000006C07                 db    0
.eh_frame:0000000000006C08                 db  14h
.eh_frame:0000000000006C09                 db    0
.eh_frame:0000000000006C0A                 db    0
.eh_frame:0000000000006C0B                 db    0
.eh_frame:0000000000006C0C                 db  0Ch
.eh_frame:0000000000006C0D                 db    9
.eh_frame:0000000000006C0E                 db    0
.eh_frame:0000000000006C0F                 db    0
.eh_frame:0000000000006C10                 db  50h ; P
.eh_frame:0000000000006C11                 db 0DDh
.eh_frame:0000000000006C12                 db 0FFh
.eh_frame:0000000000006C13                 db 0FFh
.eh_frame:0000000000006C14                 db  35h ; 5
.eh_frame:0000000000006C15                 db    0
.eh_frame:0000000000006C16                 db    0
.eh_frame:0000000000006C17                 db    0
.eh_frame:0000000000006C18                 db    0
.eh_frame:0000000000006C19                 db  4Bh ; K
.eh_frame:0000000000006C1A                 db  0Eh
.eh_frame:0000000000006C1B                 db  10h
.eh_frame:0000000000006C1C                 db    0
.eh_frame:0000000000006C1D                 db    0
.eh_frame:0000000000006C1E                 db    0
.eh_frame:0000000000006C1F                 db    0
.eh_frame:0000000000006C20                 db  48h ; H
.eh_frame:0000000000006C21                 db    0
.eh_frame:0000000000006C22                 db    0
.eh_frame:0000000000006C23                 db    0
.eh_frame:0000000000006C24                 db  24h ; $
.eh_frame:0000000000006C25                 db    9
.eh_frame:0000000000006C26                 db    0
.eh_frame:0000000000006C27                 db    0
.eh_frame:0000000000006C28                 db  78h ; x
.eh_frame:0000000000006C29                 db 0DDh
.eh_frame:0000000000006C2A                 db 0FFh
.eh_frame:0000000000006C2B                 db 0FFh
.eh_frame:0000000000006C2C                 db    0
.eh_frame:0000000000006C2D                 db    1
.eh_frame:0000000000006C2E                 db    0
.eh_frame:0000000000006C2F                 db    0
.eh_frame:0000000000006C30                 db    0
.eh_frame:0000000000006C31                 db  42h ; B
.eh_frame:0000000000006C32                 db  0Eh
.eh_frame:0000000000006C33                 db  10h
.eh_frame:0000000000006C34                 db  8Fh
.eh_frame:0000000000006C35                 db    2
.eh_frame:0000000000006C36                 db  42h ; B
.eh_frame:0000000000006C37                 db  0Eh
.eh_frame:0000000000006C38                 db  18h
.eh_frame:0000000000006C39                 db  8Eh
.eh_frame:0000000000006C3A                 db    3
.eh_frame:0000000000006C3B                 db  45h ; E
.eh_frame:0000000000006C3C                 db  0Eh
.eh_frame:0000000000006C3D                 db  20h
.eh_frame:0000000000006C3E                 db  8Dh
.eh_frame:0000000000006C3F                 db    4
.eh_frame:0000000000006C40                 db  42h ; B
.eh_frame:0000000000006C41                 db  0Eh
.eh_frame:0000000000006C42                 db  28h ; (
.eh_frame:0000000000006C43                 db  8Ch
.eh_frame:0000000000006C44                 db    5
.eh_frame:0000000000006C45                 db  44h ; D
.eh_frame:0000000000006C46                 db  0Eh
.eh_frame:0000000000006C47                 db  30h ; 0
.eh_frame:0000000000006C48                 db  86h
.eh_frame:0000000000006C49                 db    6
.eh_frame:0000000000006C4A                 db  41h ; A
.eh_frame:0000000000006C4B                 db  0Eh
.eh_frame:0000000000006C4C                 db  38h ; 8
.eh_frame:0000000000006C4D                 db  83h
.eh_frame:0000000000006C4E                 db    7
.eh_frame:0000000000006C4F                 db  4Eh ; N
.eh_frame:0000000000006C50                 db  0Eh
.eh_frame:0000000000006C51                 db  50h ; P
.eh_frame:0000000000006C52                 db    2
.eh_frame:0000000000006C53                 db  9Dh
.eh_frame:0000000000006C54                 db  0Ah
.eh_frame:0000000000006C55                 db  0Eh
.eh_frame:0000000000006C56                 db  38h ; 8
.eh_frame:0000000000006C57                 db  41h ; A
.eh_frame:0000000000006C58                 db  0Eh
.eh_frame:0000000000006C59                 db  30h ; 0
.eh_frame:0000000000006C5A                 db  41h ; A
.eh_frame:0000000000006C5B                 db  0Eh
.eh_frame:0000000000006C5C                 db  28h ; (
.eh_frame:0000000000006C5D                 db  42h ; B
.eh_frame:0000000000006C5E                 db  0Eh
.eh_frame:0000000000006C5F                 db  20h
.eh_frame:0000000000006C60                 db  42h ; B
.eh_frame:0000000000006C61                 db  0Eh
.eh_frame:0000000000006C62                 db  18h
.eh_frame:0000000000006C63                 db  42h ; B
.eh_frame:0000000000006C64                 db  0Eh
.eh_frame:0000000000006C65                 db  10h
.eh_frame:0000000000006C66                 db  42h ; B
.eh_frame:0000000000006C67                 db  0Eh
.eh_frame:0000000000006C68                 db    8
.eh_frame:0000000000006C69                 db  4Bh ; K
.eh_frame:0000000000006C6A                 db  0Bh
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db  18h
.eh_frame:0000000000006C6D                 db    0
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db  70h ; p
.eh_frame:0000000000006C71                 db    9
.eh_frame:0000000000006C72                 db    0
.eh_frame:0000000000006C73                 db    0
.eh_frame:0000000000006C74                 db  2Ch ; ,
.eh_frame:0000000000006C75                 db 0DEh
.eh_frame:0000000000006C76                 db 0FFh
.eh_frame:0000000000006C77                 db 0FFh
.eh_frame:0000000000006C78                 db  21h ; !
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db    0
.eh_frame:0000000000006C7D                 db  44h ; D
.eh_frame:0000000000006C7E                 db  0Eh
.eh_frame:0000000000006C7F                 db  18h
.eh_frame:0000000000006C80                 db  42h ; B
.eh_frame:0000000000006C81                 db  0Eh
.eh_frame:0000000000006C82                 db  20h
.eh_frame:0000000000006C83                 db  5Ah ; Z
.eh_frame:0000000000006C84                 db  0Eh
.eh_frame:0000000000006C85                 db    8
.eh_frame:0000000000006C86                 db    0
.eh_frame:0000000000006C87                 db    0
.eh_frame:0000000000006C88                 db  4Ch ; L
.eh_frame:0000000000006C89                 db    0
.eh_frame:0000000000006C8A                 db    0
.eh_frame:0000000000006C8B                 db    0
.eh_frame:0000000000006C8C                 db  8Ch
.eh_frame:0000000000006C8D                 db    9
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C90                 db  40h ; @
.eh_frame:0000000000006C91                 db 0DEh
.eh_frame:0000000000006C92                 db 0FFh
.eh_frame:0000000000006C93                 db 0FFh
.eh_frame:0000000000006C94                 db  1Ch
.eh_frame:0000000000006C95                 db    4
.eh_frame:0000000000006C96                 db    0
.eh_frame:0000000000006C97                 db    0
.eh_frame:0000000000006C98                 db    0
.eh_frame:0000000000006C99                 db  42h ; B
.eh_frame:0000000000006C9A                 db  0Eh
.eh_frame:0000000000006C9B                 db  10h
.eh_frame:0000000000006C9C                 db  8Fh
.eh_frame:0000000000006C9D                 db    2
.eh_frame:0000000000006C9E                 db  42h ; B
.eh_frame:0000000000006C9F                 db  0Eh
.eh_frame:0000000000006CA0                 db  18h
.eh_frame:0000000000006CA1                 db  8Eh
.eh_frame:0000000000006CA2                 db    3
.eh_frame:0000000000006CA3                 db  42h ; B
.eh_frame:0000000000006CA4                 db  0Eh
.eh_frame:0000000000006CA5                 db  20h
.eh_frame:0000000000006CA6                 db  8Dh
.eh_frame:0000000000006CA7                 db    4
.eh_frame:0000000000006CA8                 db  42h ; B
.eh_frame:0000000000006CA9                 db  0Eh
.eh_frame:0000000000006CAA                 db  28h ; (
.eh_frame:0000000000006CAB                 db  8Ch
.eh_frame:0000000000006CAC                 db    5
.eh_frame:0000000000006CAD                 db  41h ; A
.eh_frame:0000000000006CAE                 db  0Eh
.eh_frame:0000000000006CAF                 db  30h ; 0
.eh_frame:0000000000006CB0                 db  86h
.eh_frame:0000000000006CB1                 db    6
.eh_frame:0000000000006CB2                 db  41h ; A
.eh_frame:0000000000006CB3                 db  0Eh
.eh_frame:0000000000006CB4                 db  38h ; 8
.eh_frame:0000000000006CB5                 db  83h
.eh_frame:0000000000006CB6                 db    7
.eh_frame:0000000000006CB7                 db  44h ; D
.eh_frame:0000000000006CB8                 db  0Eh
.eh_frame:0000000000006CB9                 db  60h ; `
.eh_frame:0000000000006CBA                 db    2
.eh_frame:0000000000006CBB                 db 0E9h
.eh_frame:0000000000006CBC                 db  0Ah
.eh_frame:0000000000006CBD                 db  0Eh
.eh_frame:0000000000006CBE                 db  38h ; 8
.eh_frame:0000000000006CBF                 db  41h ; A
.eh_frame:0000000000006CC0                 db  0Eh
.eh_frame:0000000000006CC1                 db  30h ; 0
.eh_frame:0000000000006CC2                 db  41h ; A
.eh_frame:0000000000006CC3                 db  0Eh
.eh_frame:0000000000006CC4                 db  28h ; (
.eh_frame:0000000000006CC5                 db  42h ; B
.eh_frame:0000000000006CC6                 db  0Eh
.eh_frame:0000000000006CC7                 db  20h
.eh_frame:0000000000006CC8                 db  42h ; B
.eh_frame:0000000000006CC9                 db  0Eh
.eh_frame:0000000000006CCA                 db  18h
.eh_frame:0000000000006CCB                 db  42h ; B
.eh_frame:0000000000006CCC                 db  0Eh
.eh_frame:0000000000006CCD                 db  10h
.eh_frame:0000000000006CCE                 db  42h ; B
.eh_frame:0000000000006CCF                 db  0Eh
.eh_frame:0000000000006CD0                 db    8
.eh_frame:0000000000006CD1                 db  47h ; G
.eh_frame:0000000000006CD2                 db  0Bh
.eh_frame:0000000000006CD3                 db    0
.eh_frame:0000000000006CD4                 db    0
.eh_frame:0000000000006CD5                 db    0
.eh_frame:0000000000006CD6                 db    0
.eh_frame:0000000000006CD7                 db    0
.eh_frame:0000000000006CD8                 db  34h ; 4
.eh_frame:0000000000006CD9                 db    0
.eh_frame:0000000000006CDA                 db    0
.eh_frame:0000000000006CDB                 db    0
.eh_frame:0000000000006CDC                 db 0DCh
.eh_frame:0000000000006CDD                 db    9
.eh_frame:0000000000006CDE                 db    0
.eh_frame:0000000000006CDF                 db    0
.eh_frame:0000000000006CE0                 db  10h
.eh_frame:0000000000006CE1                 db 0E2h
.eh_frame:0000000000006CE2                 db 0FFh
.eh_frame:0000000000006CE3                 db 0FFh
.eh_frame:0000000000006CE4                 db  7Bh ; {
.eh_frame:0000000000006CE5                 db    0
.eh_frame:0000000000006CE6                 db    0
.eh_frame:0000000000006CE7                 db    0
.eh_frame:0000000000006CE8                 db    0
.eh_frame:0000000000006CE9                 db  42h ; B
.eh_frame:0000000000006CEA                 db  0Eh
.eh_frame:0000000000006CEB                 db  10h
.eh_frame:0000000000006CEC                 db  8Ch
.eh_frame:0000000000006CED                 db    2
.eh_frame:0000000000006CEE                 db  41h ; A
.eh_frame:0000000000006CEF                 db  0Eh
.eh_frame:0000000000006CF0                 db  18h
.eh_frame:0000000000006CF1                 db  86h
.eh_frame:0000000000006CF2                 db    3
.eh_frame:0000000000006CF3                 db  41h ; A
.eh_frame:0000000000006CF4                 db  0Eh
.eh_frame:0000000000006CF5                 db  20h
.eh_frame:0000000000006CF6                 db  83h
.eh_frame:0000000000006CF7                 db    4
.eh_frame:0000000000006CF8                 db  7Dh ; }
.eh_frame:0000000000006CF9                 db  0Ah
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  18h
.eh_frame:0000000000006CFC                 db  41h ; A
.eh_frame:0000000000006CFD                 db  0Eh
.eh_frame:0000000000006CFE                 db  10h
.eh_frame:0000000000006CFF                 db  42h ; B
.eh_frame:0000000000006D00                 db  0Eh
.eh_frame:0000000000006D01                 db    8
.eh_frame:0000000000006D02                 db  44h ; D
.eh_frame:0000000000006D03                 db  0Bh
.eh_frame:0000000000006D04                 db  60h ; `
.eh_frame:0000000000006D05                 db  0Ah
.eh_frame:0000000000006D06                 db  0Eh
.eh_frame:0000000000006D07                 db  18h
.eh_frame:0000000000006D08                 db  41h ; A
.eh_frame:0000000000006D09                 db  0Eh
.eh_frame:0000000000006D0A                 db  10h
.eh_frame:0000000000006D0B                 db  42h ; B
.eh_frame:0000000000006D0C                 db  0Eh
.eh_frame:0000000000006D0D                 db    8
.eh_frame:0000000000006D0E                 db  45h ; E
.eh_frame:0000000000006D0F                 db  0Bh
.eh_frame:0000000000006D10                 db  1Ch
.eh_frame:0000000000006D11                 db    0
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db  14h
.eh_frame:0000000000006D15                 db  0Ah
.eh_frame:0000000000006D16                 db    0
.eh_frame:0000000000006D17                 db    0
.eh_frame:0000000000006D18                 db  58h ; X
.eh_frame:0000000000006D19                 db 0E2h
.eh_frame:0000000000006D1A                 db 0FFh
.eh_frame:0000000000006D1B                 db 0FFh
.eh_frame:0000000000006D1C                 db  40h ; @
.eh_frame:0000000000006D1D                 db    0
.eh_frame:0000000000006D1E                 db    0
.eh_frame:0000000000006D1F                 db    0
.eh_frame:0000000000006D20                 db    0
.eh_frame:0000000000006D21                 db  44h ; D
.eh_frame:0000000000006D22                 db  0Eh
.eh_frame:0000000000006D23                 db  10h
.eh_frame:0000000000006D24                 db  83h
.eh_frame:0000000000006D25                 db    2
.eh_frame:0000000000006D26                 db  5Ah ; Z
.eh_frame:0000000000006D27                 db  0Ah
.eh_frame:0000000000006D28                 db  0Eh
.eh_frame:0000000000006D29                 db    8
.eh_frame:0000000000006D2A                 db  4Ah ; J
.eh_frame:0000000000006D2B                 db  0Bh
.eh_frame:0000000000006D2C                 db  53h ; S
.eh_frame:0000000000006D2D                 db  0Eh
.eh_frame:0000000000006D2E                 db    8
.eh_frame:0000000000006D2F                 db    0
.eh_frame:0000000000006D30                 db  2Ch ; ,
.eh_frame:0000000000006D31                 db    0
.eh_frame:0000000000006D32                 db    0
.eh_frame:0000000000006D33                 db    0
.eh_frame:0000000000006D34                 db  34h ; 4
.eh_frame:0000000000006D35                 db  0Ah
.eh_frame:0000000000006D36                 db    0
.eh_frame:0000000000006D37                 db    0
.eh_frame:0000000000006D38                 db  78h ; x
.eh_frame:0000000000006D39                 db 0E2h
.eh_frame:0000000000006D3A                 db 0FFh
.eh_frame:0000000000006D3B                 db 0FFh
.eh_frame:0000000000006D3C                 db  57h ; W
.eh_frame:0000000000006D3D                 db    0
.eh_frame:0000000000006D3E                 db    0
.eh_frame:0000000000006D3F                 db    0
.eh_frame:0000000000006D40                 db    0
.eh_frame:0000000000006D41                 db  63h ; c
.eh_frame:0000000000006D42                 db  0Eh
.eh_frame:0000000000006D43                 db  10h
.eh_frame:0000000000006D44                 db  8Ch
.eh_frame:0000000000006D45                 db    2
.eh_frame:0000000000006D46                 db  41h ; A
.eh_frame:0000000000006D47                 db  0Eh
.eh_frame:0000000000006D48                 db  18h
.eh_frame:0000000000006D49                 db  86h
.eh_frame:0000000000006D4A                 db    3
.eh_frame:0000000000006D4B                 db  44h ; D
.eh_frame:0000000000006D4C                 db  0Eh
.eh_frame:0000000000006D4D                 db  20h
.eh_frame:0000000000006D4E                 db  83h
.eh_frame:0000000000006D4F                 db    4
.eh_frame:0000000000006D50                 db  6Bh ; k
.eh_frame:0000000000006D51                 db  0Eh
.eh_frame:0000000000006D52                 db  18h
.eh_frame:0000000000006D53                 db  41h ; A
.eh_frame:0000000000006D54                 db  0Eh
.eh_frame:0000000000006D55                 db  10h
.eh_frame:0000000000006D56                 db  42h ; B
.eh_frame:0000000000006D57                 db  0Eh
.eh_frame:0000000000006D58                 db    8
.eh_frame:0000000000006D59                 db    0
.eh_frame:0000000000006D5A                 db    0
.eh_frame:0000000000006D5B                 db    0
.eh_frame:0000000000006D5C                 db    0
.eh_frame:0000000000006D5D                 db    0
.eh_frame:0000000000006D5E                 db    0
.eh_frame:0000000000006D5F                 db    0
.eh_frame:0000000000006D60                 db  3Ch ; <
.eh_frame:0000000000006D61                 db    0
.eh_frame:0000000000006D62                 db    0
.eh_frame:0000000000006D63                 db    0
.eh_frame:0000000000006D64                 db  64h ; d
.eh_frame:0000000000006D65                 db  0Ah
.eh_frame:0000000000006D66                 db    0
.eh_frame:0000000000006D67                 db    0
.eh_frame:0000000000006D68                 db 0A8h
.eh_frame:0000000000006D69                 db 0E2h
.eh_frame:0000000000006D6A                 db 0FFh
.eh_frame:0000000000006D6B                 db 0FFh
.eh_frame:0000000000006D6C                 db  83h
.eh_frame:0000000000006D6D                 db    0
.eh_frame:0000000000006D6E                 db    0
.eh_frame:0000000000006D6F                 db    0
.eh_frame:0000000000006D70                 db    0
.eh_frame:0000000000006D71                 db  42h ; B
.eh_frame:0000000000006D72                 db  0Eh
.eh_frame:0000000000006D73                 db  10h
.eh_frame:0000000000006D74                 db  8Dh
.eh_frame:0000000000006D75                 db    2
.eh_frame:0000000000006D76                 db  42h ; B
.eh_frame:0000000000006D77                 db  0Eh
.eh_frame:0000000000006D78                 db  18h
.eh_frame:0000000000006D79                 db  8Ch
.eh_frame:0000000000006D7A                 db    3
.eh_frame:0000000000006D7B                 db  44h ; D
.eh_frame:0000000000006D7C                 db  0Eh
.eh_frame:0000000000006D7D                 db  20h
.eh_frame:0000000000006D7E                 db  86h
.eh_frame:0000000000006D7F                 db    4
.eh_frame:0000000000006D80                 db  41h ; A
.eh_frame:0000000000006D81                 db  0Eh
.eh_frame:0000000000006D82                 db  28h ; (
.eh_frame:0000000000006D83                 db  83h
.eh_frame:0000000000006D84                 db    5
.eh_frame:0000000000006D85                 db  4Ah ; J
.eh_frame:0000000000006D86                 db  0Eh
.eh_frame:0000000000006D87                 db  40h ; @
.eh_frame:0000000000006D88                 db    2
.eh_frame:0000000000006D89                 db  64h ; d
.eh_frame:0000000000006D8A                 db  0Ah
.eh_frame:0000000000006D8B                 db  0Eh
.eh_frame:0000000000006D8C                 db  28h ; (
.eh_frame:0000000000006D8D                 db  41h ; A
.eh_frame:0000000000006D8E                 db  0Eh
.eh_frame:0000000000006D8F                 db  20h
.eh_frame:0000000000006D90                 db  41h ; A
.eh_frame:0000000000006D91                 db  0Eh
.eh_frame:0000000000006D92                 db  18h
.eh_frame:0000000000006D93                 db  42h ; B
.eh_frame:0000000000006D94                 db  0Eh
.eh_frame:0000000000006D95                 db  10h
.eh_frame:0000000000006D96                 db  42h ; B
.eh_frame:0000000000006D97                 db  0Eh
.eh_frame:0000000000006D98                 db    8
.eh_frame:0000000000006D99                 db  41h ; A
.eh_frame:0000000000006D9A                 db  0Bh
.eh_frame:0000000000006D9B                 db    0
.eh_frame:0000000000006D9C                 db    0
.eh_frame:0000000000006D9D                 db    0
.eh_frame:0000000000006D9E                 db    0
.eh_frame:0000000000006D9F                 db    0
.eh_frame:0000000000006DA0                 db  4Ch ; L
.eh_frame:0000000000006DA1                 db    0
.eh_frame:0000000000006DA2                 db    0
.eh_frame:0000000000006DA3                 db    0
.eh_frame:0000000000006DA4                 db 0A4h
.eh_frame:0000000000006DA5                 db  0Ah
.eh_frame:0000000000006DA6                 db    0
.eh_frame:0000000000006DA7                 db    0
.eh_frame:0000000000006DA8                 db 0F8h
.eh_frame:0000000000006DA9                 db 0E2h
.eh_frame:0000000000006DAA                 db 0FFh
.eh_frame:0000000000006DAB                 db 0FFh
.eh_frame:0000000000006DAC                 db  7Dh ; }
.eh_frame:0000000000006DAD                 db    0
.eh_frame:0000000000006DAE                 db    0
.eh_frame:0000000000006DAF                 db    0
.eh_frame:0000000000006DB0                 db    0
.eh_frame:0000000000006DB1                 db  42h ; B
.eh_frame:0000000000006DB2                 db  0Eh
.eh_frame:0000000000006DB3                 db  10h
.eh_frame:0000000000006DB4                 db  8Ch
.eh_frame:0000000000006DB5                 db    2
.eh_frame:0000000000006DB6                 db  41h ; A
.eh_frame:0000000000006DB7                 db  0Eh
.eh_frame:0000000000006DB8                 db  18h
.eh_frame:0000000000006DB9                 db  86h
.eh_frame:0000000000006DBA                 db    3
.eh_frame:0000000000006DBB                 db  44h ; D
.eh_frame:0000000000006DBC                 db  0Eh
.eh_frame:0000000000006DBD                 db  20h
.eh_frame:0000000000006DBE                 db  83h
.eh_frame:0000000000006DBF                 db    4
.eh_frame:0000000000006DC0                 db  69h ; i
.eh_frame:0000000000006DC1                 db  0Ah
.eh_frame:0000000000006DC2                 db  0Eh
.eh_frame:0000000000006DC3                 db  18h
.eh_frame:0000000000006DC4                 db  41h ; A
.eh_frame:0000000000006DC5                 db  0Eh
.eh_frame:0000000000006DC6                 db  10h
.eh_frame:0000000000006DC7                 db  42h ; B
.eh_frame:0000000000006DC8                 db  0Eh
.eh_frame:0000000000006DC9                 db    8
.eh_frame:0000000000006DCA                 db  45h ; E
.eh_frame:0000000000006DCB                 db  0Bh
.eh_frame:0000000000006DCC                 db  55h ; U
.eh_frame:0000000000006DCD                 db  0Ah
.eh_frame:0000000000006DCE                 db  0Eh
.eh_frame:0000000000006DCF                 db  18h
.eh_frame:0000000000006DD0                 db  41h ; A
.eh_frame:0000000000006DD1                 db  0Eh
.eh_frame:0000000000006DD2                 db  10h
.eh_frame:0000000000006DD3                 db  42h ; B
.eh_frame:0000000000006DD4                 db  0Eh
.eh_frame:0000000000006DD5                 db    8
.eh_frame:0000000000006DD6                 db  48h ; H
.eh_frame:0000000000006DD7                 db  0Bh
.eh_frame:0000000000006DD8                 db  41h ; A
.eh_frame:0000000000006DD9                 db  0Ah
.eh_frame:0000000000006DDA                 db  0Eh
.eh_frame:0000000000006DDB                 db  18h
.eh_frame:0000000000006DDC                 db  46h ; F
.eh_frame:0000000000006DDD                 db  0Eh
.eh_frame:0000000000006DDE                 db  10h
.eh_frame:0000000000006DDF                 db  42h ; B
.eh_frame:0000000000006DE0                 db  0Eh
.eh_frame:0000000000006DE1                 db    8
.eh_frame:0000000000006DE2                 db  47h ; G
.eh_frame:0000000000006DE3                 db  0Bh
.eh_frame:0000000000006DE4                 db  49h ; I
.eh_frame:0000000000006DE5                 db  0Eh
.eh_frame:0000000000006DE6                 db  18h
.eh_frame:0000000000006DE7                 db  41h ; A
.eh_frame:0000000000006DE8                 db  0Eh
.eh_frame:0000000000006DE9                 db  10h
.eh_frame:0000000000006DEA                 db  42h ; B
.eh_frame:0000000000006DEB                 db  0Eh
.eh_frame:0000000000006DEC                 db    8
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db  1Ch
.eh_frame:0000000000006DF1                 db    0
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db 0F4h
.eh_frame:0000000000006DF5                 db  0Ah
.eh_frame:0000000000006DF6                 db    0
.eh_frame:0000000000006DF7                 db    0
.eh_frame:0000000000006DF8                 db  28h ; (
.eh_frame:0000000000006DF9                 db 0E3h
.eh_frame:0000000000006DFA                 db 0FFh
.eh_frame:0000000000006DFB                 db 0FFh
.eh_frame:0000000000006DFC                 db  60h ; `
.eh_frame:0000000000006DFD                 db    0
.eh_frame:0000000000006DFE                 db    0
.eh_frame:0000000000006DFF                 db    0
.eh_frame:0000000000006E00                 db    0
.eh_frame:0000000000006E01                 db  44h ; D
.eh_frame:0000000000006E02                 db  0Eh
.eh_frame:0000000000006E03                 db  10h
.eh_frame:0000000000006E04                 db  75h ; u
.eh_frame:0000000000006E05                 db  0Ah
.eh_frame:0000000000006E06                 db  0Eh
.eh_frame:0000000000006E07                 db    8
.eh_frame:0000000000006E08                 db  47h ; G
.eh_frame:0000000000006E09                 db  0Bh
.eh_frame:0000000000006E0A                 db  5Fh ; _
.eh_frame:0000000000006E0B                 db  0Eh
.eh_frame:0000000000006E0C                 db    8
.eh_frame:0000000000006E0D                 db    0
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db  1Ch
.eh_frame:0000000000006E11                 db    0
.eh_frame:0000000000006E12                 db    0
.eh_frame:0000000000006E13                 db    0
.eh_frame:0000000000006E14                 db  14h
.eh_frame:0000000000006E15                 db  0Bh
.eh_frame:0000000000006E16                 db    0
.eh_frame:0000000000006E17                 db    0
.eh_frame:0000000000006E18                 db  68h ; h
.eh_frame:0000000000006E19                 db 0E3h
.eh_frame:0000000000006E1A                 db 0FFh
.eh_frame:0000000000006E1B                 db 0FFh
.eh_frame:0000000000006E1C                 db  3Ch ; <
.eh_frame:0000000000006E1D                 db    0
.eh_frame:0000000000006E1E                 db    0
.eh_frame:0000000000006E1F                 db    0
.eh_frame:0000000000006E20                 db    0
.eh_frame:0000000000006E21                 db  44h ; D
.eh_frame:0000000000006E22                 db  0Eh
.eh_frame:0000000000006E23                 db  10h
.eh_frame:0000000000006E24                 db  61h ; a
.eh_frame:0000000000006E25                 db  0Ah
.eh_frame:0000000000006E26                 db  0Eh
.eh_frame:0000000000006E27                 db    8
.eh_frame:0000000000006E28                 db  4Bh ; K
.eh_frame:0000000000006E29                 db  0Bh
.eh_frame:0000000000006E2A                 db  4Bh ; K
.eh_frame:0000000000006E2B                 db  0Eh
.eh_frame:0000000000006E2C                 db    8
.eh_frame:0000000000006E2D                 db    0
.eh_frame:0000000000006E2E                 db    0
.eh_frame:0000000000006E2F                 db    0
.eh_frame:0000000000006E30                 db  44h ; D
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db  34h ; 4
.eh_frame:0000000000006E35                 db  0Bh
.eh_frame:0000000000006E36                 db    0
.eh_frame:0000000000006E37                 db    0
.eh_frame:0000000000006E38                 db  88h
.eh_frame:0000000000006E39                 db 0E3h
.eh_frame:0000000000006E3A                 db 0FFh
.eh_frame:0000000000006E3B                 db 0FFh
.eh_frame:0000000000006E3C                 db  65h ; e
.eh_frame:0000000000006E3D                 db    0
.eh_frame:0000000000006E3E                 db    0
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db    0
.eh_frame:0000000000006E41                 db  42h ; B
.eh_frame:0000000000006E42                 db  0Eh
.eh_frame:0000000000006E43                 db  10h
.eh_frame:0000000000006E44                 db  8Fh
.eh_frame:0000000000006E45                 db    2
.eh_frame:0000000000006E46                 db  42h ; B
.eh_frame:0000000000006E47                 db  0Eh
.eh_frame:0000000000006E48                 db  18h
.eh_frame:0000000000006E49                 db  8Eh
.eh_frame:0000000000006E4A                 db    3
.eh_frame:0000000000006E4B                 db  45h ; E
.eh_frame:0000000000006E4C                 db  0Eh
.eh_frame:0000000000006E4D                 db  20h
.eh_frame:0000000000006E4E                 db  8Dh
.eh_frame:0000000000006E4F                 db    4
.eh_frame:0000000000006E50                 db  42h ; B
.eh_frame:0000000000006E51                 db  0Eh
.eh_frame:0000000000006E52                 db  28h ; (
.eh_frame:0000000000006E53                 db  8Ch
.eh_frame:0000000000006E54                 db    5
.eh_frame:0000000000006E55                 db  48h ; H
.eh_frame:0000000000006E56                 db  0Eh
.eh_frame:0000000000006E57                 db  30h ; 0
.eh_frame:0000000000006E58                 db  86h
.eh_frame:0000000000006E59                 db    6
.eh_frame:0000000000006E5A                 db  48h ; H
.eh_frame:0000000000006E5B                 db  0Eh
.eh_frame:0000000000006E5C                 db  38h ; 8
.eh_frame:0000000000006E5D                 db  83h
.eh_frame:0000000000006E5E                 db    7
.eh_frame:0000000000006E5F                 db  4Dh ; M
.eh_frame:0000000000006E60                 db  0Eh
.eh_frame:0000000000006E61                 db  40h ; @
.eh_frame:0000000000006E62                 db  72h ; r
.eh_frame:0000000000006E63                 db  0Eh
.eh_frame:0000000000006E64                 db  38h ; 8
.eh_frame:0000000000006E65                 db  41h ; A
.eh_frame:0000000000006E66                 db  0Eh
.eh_frame:0000000000006E67                 db  30h ; 0
.eh_frame:0000000000006E68                 db  41h ; A
.eh_frame:0000000000006E69                 db  0Eh
.eh_frame:0000000000006E6A                 db  28h ; (
.eh_frame:0000000000006E6B                 db  42h ; B
.eh_frame:0000000000006E6C                 db  0Eh
.eh_frame:0000000000006E6D                 db  20h
.eh_frame:0000000000006E6E                 db  42h ; B
.eh_frame:0000000000006E6F                 db  0Eh
.eh_frame:0000000000006E70                 db  18h
.eh_frame:0000000000006E71                 db  42h ; B
.eh_frame:0000000000006E72                 db  0Eh
.eh_frame:0000000000006E73                 db  10h
.eh_frame:0000000000006E74                 db  42h ; B
.eh_frame:0000000000006E75                 db  0Eh
.eh_frame:0000000000006E76                 db    8
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db  14h
.eh_frame:0000000000006E79                 db    0
.eh_frame:0000000000006E7A                 db    0
.eh_frame:0000000000006E7B                 db    0
.eh_frame:0000000000006E7C                 db  7Ch ; |
.eh_frame:0000000000006E7D                 db  0Bh
.eh_frame:0000000000006E7E                 db    0
.eh_frame:0000000000006E7F                 db    0
.eh_frame:0000000000006E80                 db 0B0h
.eh_frame:0000000000006E81                 db 0E3h
.eh_frame:0000000000006E82                 db 0FFh
.eh_frame:0000000000006E83                 db 0FFh
.eh_frame:0000000000006E84                 db    2
.eh_frame:0000000000006E85                 db    0
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db    0
.eh_frame:0000000000006E89                 db    0
.eh_frame:0000000000006E8A                 db    0
.eh_frame:0000000000006E8B                 db    0
.eh_frame:0000000000006E8C                 db    0
.eh_frame:0000000000006E8D                 db    0
.eh_frame:0000000000006E8E                 db    0
.eh_frame:0000000000006E8F                 db    0
.eh_frame:0000000000006E90                 db  10h
.eh_frame:0000000000006E91                 db    0
.eh_frame:0000000000006E92                 db    0
.eh_frame:0000000000006E93                 db    0
.eh_frame:0000000000006E94                 db  94h
.eh_frame:0000000000006E95                 db  0Bh
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db 0A8h
.eh_frame:0000000000006E99                 db 0E3h
.eh_frame:0000000000006E9A                 db 0FFh
.eh_frame:0000000000006E9B                 db 0FFh
.eh_frame:0000000000006E9C                 db  0Eh
.eh_frame:0000000000006E9D                 db    0
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db    0
.eh_frame:0000000000006EA1                 db    0
.eh_frame:0000000000006EA2                 db    0
.eh_frame:0000000000006EA3                 db    0
.eh_frame:0000000000006EA4 __FRAME_END__   db    0
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA7 _eh_frame       ends
.eh_frame:0000000000006EA7
.init_array:0000000000207B10 ; ELF Initialization Function Table
.init_array:0000000000207B10 ; ===========================================================================
.init_array:0000000000207B10
.init_array:0000000000207B10 ; Segment type: Pure data
.init_array:0000000000207B10 ; Segment permissions: Read/Write
.init_array:0000000000207B10 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B10                 assume cs:_init_array
.init_array:0000000000207B10                 ;org 207B10h
.init_array:0000000000207B10 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B10                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B10                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B10 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B10
.fini_array:0000000000207B18 ; ELF Termination Function Table
.fini_array:0000000000207B18 ; ===========================================================================
.fini_array:0000000000207B18
.fini_array:0000000000207B18 ; Segment type: Pure data
.fini_array:0000000000207B18 ; Segment permissions: Read/Write
.fini_array:0000000000207B18 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B18                 assume cs:_fini_array
.fini_array:0000000000207B18                 ;org 207B18h
.fini_array:0000000000207B18 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B18                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B18 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B18
.data.rel.ro:0000000000207B20 ; ===========================================================================
.data.rel.ro:0000000000207B20
.data.rel.ro:0000000000207B20 ; Segment type: Pure data
.data.rel.ro:0000000000207B20 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B20 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B20                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B20                 ;org 207B20h
.data.rel.ro:0000000000207B20 ; struct option longopts
.data.rel.ro:0000000000207B20 longopts        dq offset aBytes        ; name
.data.rel.ro:0000000000207B20                                         ; DATA XREF: main:loc_17F3↑o
.data.rel.ro:0000000000207B20                 dd 0                    ; has_arg ; "bytes"
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B20                 dq 0                    ; flag
.data.rel.ro:0000000000207B20                 dd 62h                  ; val
.data.rel.ro:0000000000207B20                 db 4 dup(0)
.data.rel.ro:0000000000207B40                 dq offset aSpaces       ; "spaces"
.data.rel.ro:0000000000207B48                 db    0
.data.rel.ro:0000000000207B49                 db    0
.data.rel.ro:0000000000207B4A                 db    0
.data.rel.ro:0000000000207B4B                 db    0
.data.rel.ro:0000000000207B4C                 db    0
.data.rel.ro:0000000000207B4D                 db    0
.data.rel.ro:0000000000207B4E                 db    0
.data.rel.ro:0000000000207B4F                 db    0
.data.rel.ro:0000000000207B50                 db    0
.data.rel.ro:0000000000207B51                 db    0
.data.rel.ro:0000000000207B52                 db    0
.data.rel.ro:0000000000207B53                 db    0
.data.rel.ro:0000000000207B54                 db    0
.data.rel.ro:0000000000207B55                 db    0
.data.rel.ro:0000000000207B56                 db    0
.data.rel.ro:0000000000207B57                 db    0
.data.rel.ro:0000000000207B58                 db  73h ; s
.data.rel.ro:0000000000207B59                 db    0
.data.rel.ro:0000000000207B5A                 db    0
.data.rel.ro:0000000000207B5B                 db    0
.data.rel.ro:0000000000207B5C                 db    0
.data.rel.ro:0000000000207B5D                 db    0
.data.rel.ro:0000000000207B5E                 db    0
.data.rel.ro:0000000000207B5F                 db    0
.data.rel.ro:0000000000207B60                 dq offset aWidth        ; "width"
.data.rel.ro:0000000000207B68                 db    1
.data.rel.ro:0000000000207B69                 db    0
.data.rel.ro:0000000000207B6A                 db    0
.data.rel.ro:0000000000207B6B                 db    0
.data.rel.ro:0000000000207B6C                 db    0
.data.rel.ro:0000000000207B6D                 db    0
.data.rel.ro:0000000000207B6E                 db    0
.data.rel.ro:0000000000207B6F                 db    0
.data.rel.ro:0000000000207B70                 db    0
.data.rel.ro:0000000000207B71                 db    0
.data.rel.ro:0000000000207B72                 db    0
.data.rel.ro:0000000000207B73                 db    0
.data.rel.ro:0000000000207B74                 db    0
.data.rel.ro:0000000000207B75                 db    0
.data.rel.ro:0000000000207B76                 db    0
.data.rel.ro:0000000000207B77                 db    0
.data.rel.ro:0000000000207B78                 db  77h ; w
.data.rel.ro:0000000000207B79                 db    0
.data.rel.ro:0000000000207B7A                 db    0
.data.rel.ro:0000000000207B7B                 db    0
.data.rel.ro:0000000000207B7C                 db    0
.data.rel.ro:0000000000207B7D                 db    0
.data.rel.ro:0000000000207B7E                 db    0
.data.rel.ro:0000000000207B7F                 db    0
.data.rel.ro:0000000000207B80                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207B88                 db    0
.data.rel.ro:0000000000207B89                 db    0
.data.rel.ro:0000000000207B8A                 db    0
.data.rel.ro:0000000000207B8B                 db    0
.data.rel.ro:0000000000207B8C                 db    0
.data.rel.ro:0000000000207B8D                 db    0
.data.rel.ro:0000000000207B8E                 db    0
.data.rel.ro:0000000000207B8F                 db    0
.data.rel.ro:0000000000207B90                 db    0
.data.rel.ro:0000000000207B91                 db    0
.data.rel.ro:0000000000207B92                 db    0
.data.rel.ro:0000000000207B93                 db    0
.data.rel.ro:0000000000207B94                 db    0
.data.rel.ro:0000000000207B95                 db    0
.data.rel.ro:0000000000207B96                 db    0
.data.rel.ro:0000000000207B97                 db    0
.data.rel.ro:0000000000207B98                 db  7Eh ; ~
.data.rel.ro:0000000000207B99                 db 0FFh
.data.rel.ro:0000000000207B9A                 db 0FFh
.data.rel.ro:0000000000207B9B                 db 0FFh
.data.rel.ro:0000000000207B9C                 db    0
.data.rel.ro:0000000000207B9D                 db    0
.data.rel.ro:0000000000207B9E                 db    0
.data.rel.ro:0000000000207B9F                 db    0
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Dh ; }
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 1430h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 5250h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207B10h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207B18h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8C8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2ECh>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0FB0h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0C98h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C38h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0BB4h> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 15h> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_1450↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_1450+6↑r
.got:0000000000207E40 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000207E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E58 __errno_location_ptr dq offset __errno_location
.got:0000000000207E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E78 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E80 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EB8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207EC8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000207ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207EE0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207EE8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000207EE8                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000207EF0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EF8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207EF8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207F00 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F08 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F08                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F10 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F18 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F20 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F28 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F30 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F38 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F40 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F48 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:0000000000207F48                                         ; DATA XREF: _fwrite_unlocked↑r
.got:0000000000207F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F68 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000207F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FC8                                         ; DATA XREF: start+24↑r
.got:0000000000207FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE0 _got            ends
.got:0000000000207FE0
LOAD:0000000000207FE8 ; ===========================================================================
LOAD:0000000000207FE8
LOAD:0000000000207FE8 ; Segment type: Pure data
LOAD:0000000000207FE8 ; Segment permissions: Read/Write
LOAD:0000000000207FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FE8                 assume cs:LOAD
LOAD:0000000000207FE8                 ;org 207FE8h
LOAD:0000000000207FE8                 align 20h
LOAD:0000000000207FE8 LOAD            ends
LOAD:0000000000207FE8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+F7↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2352↑r
.data:0000000000208018                                         ; xalloc_die+17↑r
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_380D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000208080                                         ; LOAD:0000000000000868↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000208088                                         ; main+F0↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public stdin@@GLIBC_2_2_5
.bss:0000000000208090 ; _IO_FILE *stdin
.bss:0000000000208090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000208090                                         ; main:loc_1981↑r ...
.bss:0000000000208090                                         ; Alternative name is 'stdin'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208098                 public optind@@GLIBC_2_2_5
.bss:0000000000208098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:0000000000208098                                         ; main:loc_190E↑r
.bss:0000000000208098                                         ; Alternative name is 'optind'
.bss:0000000000208098                                         ; Copy of shared data
.bss:000000000020809C                 align 20h
.bss:00000000002080A0                 public optarg@@GLIBC_2_2_5
.bss:00000000002080A0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:00000000002080A0                                         ; main:loc_1898↑r ...
.bss:00000000002080A0                                         ; Alternative name is 'optarg'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080A8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080A8                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080A8                                         ; LOAD:0000000000000850↑o ...
.bss:00000000002080A8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080A8                                         ; Copy of shared data
.bss:00000000002080B0                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002080C0                                         ; usage+3D↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ; void *line_out_6894
.bss:00000000002080D0 line_out_6894   dq ?                    ; DATA XREF: fold_file+90↑r
.bss:00000000002080D0                                         ; fold_file+FA↑r ...
.bss:00000000002080D8 allocated_out_6895 dq ?                 ; DATA XREF: fold_file+89↑r
.bss:00000000002080D8                                         ; fold_file:loc_1D98↑o
.bss:00000000002080E0 have_read_stdin db ?                    ; DATA XREF: main+6E↑w
.bss:00000000002080E0                                         ; main:loc_1957↑r ...
.bss:00000000002080E1 count_bytes     db ?                    ; DATA XREF: main+75↑w
.bss:00000000002080E1                                         ; main:loc_1840↑w ...
.bss:00000000002080E2 break_spaces    db ?                    ; DATA XREF: main+7C↑w
.bss:00000000002080E2                                         ; main:loc_18F0↑w ...
.bss:00000000002080E3                 align 8
.bss:00000000002080E8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080E8                                         ; close_stdout+1B↑r
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080F0                                         ; close_stdout+56↑r
.bss:00000000002080F8                 public program_name
.bss:00000000002080F8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080F8                                         ; set_program_name:loc_242D↑w
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208230 _bss            ends
.bss:0000000000208230
.prgend:0000000000208238 ; ===========================================================================
.prgend:0000000000208238
.prgend:0000000000208238 ; Segment type: Zero-length
.prgend:0000000000208238 _prgend         segment byte public '' use64
.prgend:0000000000208238 _end            label byte
.prgend:0000000000208238 _prgend         ends
.prgend:0000000000208238
extern:0000000000208240 ; ===========================================================================
extern:0000000000208240
extern:0000000000208240 ; Segment type: Externs
extern:0000000000208240 ; extern
extern:0000000000208240 ; int _uflow(_IO_FILE *)
extern:0000000000208240                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000208240                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000208248 ; void free(void *ptr)
extern:0000000000208248                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208248                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208250 ; void __noreturn abort(void)
extern:0000000000208250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208250                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208258 ; int *_errno_location(void)
extern:0000000000208258                 extrn __errno_location:near
extern:0000000000208258                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208268 ; void __noreturn exit(int status)
extern:0000000000208268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208270 ; size_t _fpending(FILE *fp)
extern:0000000000208270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208278 ; char *textdomain(const char *domainname)
extern:0000000000208278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208280 ; int fclose(FILE *stream)
extern:0000000000208280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208288                 extrn bindtextdomain:near
extern:0000000000208288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082A0 ; size_t strlen(const char *s)
extern:00000000002082A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082A8                 extrn __stack_chk_fail:near
extern:00000000002082A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082C0 ; char *strchr(const char *s, int c)
extern:00000000002082C0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002082C0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002082C8 ; int _overflow(_IO_FILE *, int)
extern:00000000002082C8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002082C8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002082D0 ; char *strrchr(const char *s, int c)
extern:00000000002082D0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082D0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082D8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082D8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082D8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082E0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002082E0                 extrn __assert_fail:near
extern:00000000002082E0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002082E0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002082E8 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:00000000002082E8                 extrn __strtoul_internal:near
extern:00000000002082E8                                         ; CODE XREF: ___strtoul_internal↑j
extern:00000000002082E8                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002082F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002082F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082F8 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:00000000002082F8                 extrn posix_fadvise:near
extern:00000000002082F8                                         ; CODE XREF: _posix_fadvise↑j
extern:00000000002082F8                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208300 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208300                 extrn __libc_start_main:near
extern:0000000000208300                                         ; CODE XREF: start+24↑p
extern:0000000000208300                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208308 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208308                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208308                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208310 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208310                 extrn fputs_unlocked:near
extern:0000000000208310                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208310                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208318 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208318                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208318                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208320 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208320                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208320                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208328 ; int fileno(FILE *stream)
extern:0000000000208328                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208328                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208330 ; void *malloc(size_t size)
extern:0000000000208330                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208330                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208338 ; int fflush(FILE *stream)
extern:0000000000208338                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208338                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208340 ; char *nl_langinfo(nl_item item)
extern:0000000000208340                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208340                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208348 ; int _freading(FILE *fp)
extern:0000000000208348                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208348                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208350 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000208350                 extrn fwrite_unlocked:near
extern:0000000000208350                                         ; CODE XREF: _fwrite_unlocked↑j
extern:0000000000208350                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:0000000000208358 ; void *realloc(void *ptr, size_t size)
extern:0000000000208358                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208358                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208360 ; char *setlocale(int category, const char *locale)
extern:0000000000208360                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208360                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208368                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208368                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208370 ; void *memmove(void *dest, const void *src, size_t n)
extern:0000000000208370                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:0000000000208370                                         ; DATA XREF: .got:memmove_ptr↑o
extern:0000000000208378 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208378                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208378                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208380 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208380                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208380                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208388 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000208388                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000208388                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000208390 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208390                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208390                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208398 ; void __noreturn exit(int status)
extern:0000000000208398                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208398                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083A0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083A0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083A8                 extrn __fprintf_chk:near
extern:00000000002083A8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083A8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083B0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083B0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083B0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083B8 ; int iswprint(wint_t wc)
extern:00000000002083B8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083B8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083C0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083C0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083C0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083C0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083C8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083C8                 extrn __ctype_b_loc:near
extern:00000000002083C8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083C8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083D0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083D0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083D8                 extrn __gmon_start__:near ; weak
extern:00000000002083D8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083D8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083E0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083E0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083E0
extern:00000000002083E0
extern:00000000002083E0                 end start
