LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 9251C6BBA86237328BECEE63199A43A568AFF93FBE7B2A934FDC50E75CC96C25
LOAD:0000000000000000 ; Input MD5    : 183B946919C2B828BC0CD19FB37B3BA0
LOAD:0000000000000000 ; Input CRC32  : CD7F6D98
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/tsort
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'tsort.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'freopen-safer.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'readtokens.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 29F90h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 74D8h                ; Size in file image
LOAD:00000000000000D8                 dq 74D8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 708h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 6490h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 6490h                ; Physical address
LOAD:00000000000001B0                 dq 2ACh                 ; Size in file image
LOAD:00000000000001B8                 dq 2ACh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 60h, 1Ch, 0BEh, 0F1h, 0BBh, 39h, 0CCh, 0DCh, 0CEh, 88h ; Desc
LOAD:0000000000000284                 db 2Ah, 77h, 36h, 0F7h, 44h, 0F0h, 5Dh, 0A6h, 0AEh, 5
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801A00061C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 12F7B3C0h, 1C8BF239h, 12F7C433h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUflow - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8C8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_8C8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_8C8, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aPuts - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8C8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFclose - offset byte_8C8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aBindtextdomain - offset byte_8C8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aDcgettext - offset byte_8C8, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStrlen - offset byte_8C8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStackChkFail - offset byte_8C8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aGetoptLong - offset byte_8C8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aMbrtowc - offset byte_8C8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aDup2 - offset byte_8C8, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrrchr - offset byte_8C8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLseek - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004D8                            0>
LOAD:00000000000004F0                 Elf64_Sym <offset aAssertFail - offset byte_8C8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_8C8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aFreopen - offset byte_8C8, 12h, 0, 0, \ ; "freopen"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aFclose+1 - offset byte_8C8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aPosixFadvise - offset byte_8C8, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aLibcStartMain - offset byte_8C8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMemcmp - offset byte_8C8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFputsUnlocked - offset byte_8C8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aCalloc - offset byte_8C8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aStrcmp - offset byte_8C8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aGmonStart - offset byte_8C8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemcpy - offset byte_8C8, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_8C8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8C8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8C8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8C8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8C8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8C8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8C8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aError - offset byte_8C8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006D0                            0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreopen+3 - offset byte_8C8, 12h, 0, 0, \ ; "open"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFseeko - offset byte_8C8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8C8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8C8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8C8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8C8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8C8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8C8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8C8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8C8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8C8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8C8, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8C8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aStdin - offset byte_8C8, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000820                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aProgramInvocat - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aPrognameFull - offset byte_8C8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000850                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8C8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000868                            offset __bss_start, 8>
LOAD:0000000000000880                 Elf64_Sym <offset aOpterr - offset byte_8C8, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000880                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000898                 Elf64_Sym <offset aStderr - offset byte_8C8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000898                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000008B0                 Elf64_Sym <offset aOptind - offset byte_8C8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000008B0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008C8 ; ELF String Table
LOAD:00000000000008C8 byte_8C8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008C8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008C9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:00000000000008D3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000008DA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008E7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008F1 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008F9 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000901 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000908 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000910 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000418↑o
LOAD:000000000000091A aError          db 'error',0            ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000920 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000925 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000936 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000093F aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000947 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:000000000000094D aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000953 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000953                                         ; LOAD:0000000000000730↑o
LOAD:0000000000000959 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000959                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000971 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:000000000000097F aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000097F                                         ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000996 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009A4 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:00000000000009AB aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000009B2 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009B9 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009CA aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000009D1 aDup2           db 'dup2',0             ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000009D6 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009E4 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000009EB aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009F1 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000009F8 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:00000000000009F8                                         ; LOAD:0000000000000538↑o
LOAD:00000000000009FF aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000A06 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000A0E aUflow          db '__uflow',0          ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A16 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000A22 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A30 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A3B aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A42 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A4E aFreopen        db 'freopen',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A4E                                         ; LOAD:00000000000006E8↑o
LOAD:0000000000000A56 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A5D aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A64 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A6F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A6F                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A8D aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A9C aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A9C                                         ; LOAD:00000000000003D0↑o
LOAD:0000000000000AAB aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000AB2 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000AB9 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AB9                                         ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000ACB aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AD2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000AE1 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AE6 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AF1 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B01 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B0E aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B18 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B24 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:0000000000000B2F aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B39 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C58↓o
LOAD:0000000000000B45 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B45                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000B61 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000B70 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B70                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B8A ; ELF GNU Symbol Version Table
LOAD:0000000000000B8A                 dw 0
LOAD:0000000000000B8C                 dw 2                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B98                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BAC                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; freopen@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000BBE                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BCC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BCE                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BDE                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BE0                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BE8                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BEC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BEE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BF6                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BF8                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BFA                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000BFC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BFE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000C00                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000C02                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000C04                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000C06                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000C08 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000C08                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8C8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C18                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8C8, \ ; "GLIBC_2.3"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8C8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C28                                10h>
LOAD:0000000000000C38                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8C8, \ ; "GLIBC_2.14"
LOAD:0000000000000C38                                10h>
LOAD:0000000000000C48                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8C8, \ ; "GLIBC_2.4"
LOAD:0000000000000C48                                10h>
LOAD:0000000000000C58                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8C8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C68 ; ELF RELA Relocation Table
LOAD:0000000000000C68                 Elf64_Rela <207B70h, 8, 1F50h> ; R_X86_64_RELATIVE +1F50h
LOAD:0000000000000C80                 Elf64_Rela <207B78h, 8, 1F10h> ; R_X86_64_RELATIVE +1F10h
LOAD:0000000000000C98                 Elf64_Rela <207B80h, 8, 5BE6h> ; R_X86_64_RELATIVE +5BE6h
LOAD:0000000000000CB0                 Elf64_Rela <207BA0h, 8, 5BEBh> ; R_X86_64_RELATIVE +5BEBh
LOAD:0000000000000CC8                 Elf64_Rela <207BE0h, 8, 5C51h> ; R_X86_64_RELATIVE +5C51h
LOAD:0000000000000CE0                 Elf64_Rela <207BE8h, 8, 5C59h> ; R_X86_64_RELATIVE +5C59h
LOAD:0000000000000CF8                 Elf64_Rela <207BF0h, 8, 5C5Fh> ; R_X86_64_RELATIVE +5C5Fh
LOAD:0000000000000D10                 Elf64_Rela <207BF8h, 8, 5C6Ch> ; R_X86_64_RELATIVE +5C6Ch
LOAD:0000000000000D28                 Elf64_Rela <207C00h, 8, 5C79h> ; R_X86_64_RELATIVE +5C79h
LOAD:0000000000000D40                 Elf64_Rela <207C08h, 8, 5944h> ; R_X86_64_RELATIVE +5944h
LOAD:0000000000000D58                 Elf64_Rela <207C10h, 8, 5C8Dh> ; R_X86_64_RELATIVE +5C8Dh
LOAD:0000000000000D70                 Elf64_Rela <207C18h, 8, 5C72h> ; R_X86_64_RELATIVE +5C72h
LOAD:0000000000000D88                 Elf64_Rela <207C20h, 8, 58FEh> ; R_X86_64_RELATIVE +58FEh
LOAD:0000000000000DA0                 Elf64_Rela <207C28h, 8, 5C95h> ; R_X86_64_RELATIVE +5C95h
LOAD:0000000000000DB8                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000DD0                 Elf64_Rela <208010h, 8, 5BC2h> ; R_X86_64_RELATIVE +5BC2h
LOAD:0000000000000DE8                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000E00                 Elf64_Rela <208078h, 8, 208140h> ; R_X86_64_RELATIVE +208140h
LOAD:0000000000000E18                 Elf64_Rela <207FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E30                 Elf64_Rela <207FC8h, 1B00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E48                 Elf64_Rela <207FD0h, 2000000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E60                 Elf64_Rela <207FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E78                 Elf64_Rela <207FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E90                 Elf64_Rela <208080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000EA8                 Elf64_Rela <208088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EC0                 Elf64_Rela <208090h, 3800000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000000ED8                 Elf64_Rela <208098h, 3E00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000EF0                 Elf64_Rela <2080A0h, 3A00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000F08                 Elf64_Rela <2080C0h, 3C00000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000F20                 Elf64_Rela <2080E0h, 3D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F38 ; ELF JMPREL Relocation Table
LOAD:0000000000000F38                 Elf64_Rela <207E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:0000000000000F50                 Elf64_Rela <207E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F68                 Elf64_Rela <207E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F80                 Elf64_Rela <207E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F98                 Elf64_Rela <207E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FB0                 Elf64_Rela <207E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FC8                 Elf64_Rela <207E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FE0                 Elf64_Rela <207E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000000FF8                 Elf64_Rela <207E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001010                 Elf64_Rela <207E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001028                 Elf64_Rela <207E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001040                 Elf64_Rela <207E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001058                 Elf64_Rela <207EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001070                 Elf64_Rela <207EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001088                 Elf64_Rela <207EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010A0                 Elf64_Rela <207EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010B8                 Elf64_Rela <207EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010D0                 Elf64_Rela <207EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:00000000000010E8                 Elf64_Rela <207ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001100                 Elf64_Rela <207ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001118                 Elf64_Rela <207EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001130                 Elf64_Rela <207EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001148                 Elf64_Rela <207EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT freopen
LOAD:0000000000001160                 Elf64_Rela <207EF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001178                 Elf64_Rela <207F00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001190                 Elf64_Rela <207F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000011A8                 Elf64_Rela <207F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000011C0                 Elf64_Rela <207F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000011D8                 Elf64_Rela <207F20h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000011F0                 Elf64_Rela <207F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001208                 Elf64_Rela <207F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001220                 Elf64_Rela <207F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001238                 Elf64_Rela <207F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001250                 Elf64_Rela <207F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001268                 Elf64_Rela <207F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001280                 Elf64_Rela <207F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001298                 Elf64_Rela <207F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000012B0                 Elf64_Rela <207F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012C8                 Elf64_Rela <207F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012E0                 Elf64_Rela <207F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:00000000000012F8                 Elf64_Rela <207F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001310                 Elf64_Rela <207F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001328                 Elf64_Rela <207F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001340                 Elf64_Rela <207F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001358                 Elf64_Rela <207FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001370                 Elf64_Rela <207FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001388                 Elf64_Rela <207FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000013A0                 Elf64_Rela <207FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000013A0 LOAD            ends
LOAD:00000000000013A0
.init:00000000000013B8 ; ===========================================================================
.init:00000000000013B8
.init:00000000000013B8 ; Segment type: Pure code
.init:00000000000013B8 ; Segment permissions: Read/Execute
.init:00000000000013B8 _init           segment dword public 'CODE' use64
.init:00000000000013B8                 assume cs:_init
.init:00000000000013B8                 ;org 13B8h
.init:00000000000013B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000013B8
.init:00000000000013B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000013B8
.init:00000000000013B8
.init:00000000000013B8                 public _init_proc
.init:00000000000013B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000013B8                 sub     rsp, 8          ; _init
.init:00000000000013BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000013C3                 test    rax, rax
.init:00000000000013C6                 jz      short loc_13CA
.init:00000000000013C8                 call    rax ; __gmon_start__
.init:00000000000013CA
.init:00000000000013CA loc_13CA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013CA                 add     rsp, 8
.init:00000000000013CE                 retn
.init:00000000000013CE _init_proc      endp
.init:00000000000013CE
.init:00000000000013CE _init           ends
.init:00000000000013CE
LOAD:00000000000013CF ; ===========================================================================
LOAD:00000000000013CF
LOAD:00000000000013CF ; Segment type: Pure code
LOAD:00000000000013CF ; Segment permissions: Read/Execute
LOAD:00000000000013CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000013CF                 assume cs:LOAD
LOAD:00000000000013CF                 ;org 13CFh
LOAD:00000000000013CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013CF                 align 10h
LOAD:00000000000013CF LOAD            ends
LOAD:00000000000013CF
.plt:00000000000013D0 ; ===========================================================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Segment type: Pure code
.plt:00000000000013D0 ; Segment permissions: Read/Execute
.plt:00000000000013D0 _plt            segment para public 'CODE' use64
.plt:00000000000013D0                 assume cs:_plt
.plt:00000000000013D0                 ;org 13D0h
.plt:00000000000013D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0
.plt:00000000000013D0 sub_13D0        proc near               ; CODE XREF: .plt:00000000000013EB↓j
.plt:00000000000013D0                                         ; .plt:00000000000013FB↓j ...
.plt:00000000000013D0 ; __unwind {
.plt:00000000000013D0                 push    cs:qword_207E30
.plt:00000000000013D6                 jmp     cs:qword_207E38
.plt:00000000000013D6 sub_13D0        endp
.plt:00000000000013D6
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013DC                 align 20h
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int __uflow(_IO_FILE *)
.plt:00000000000013E0 ___uflow        proc near               ; CODE XREF: readtoken+A9↓p
.plt:00000000000013E0                                         ; readtoken+1A3↓p
.plt:00000000000013E0                 jmp     cs:__uflow_ptr
.plt:00000000000013E0 ___uflow        endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0
.plt:00000000000013EB                 jmp     sub_13D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; void free(void *ptr)
.plt:00000000000013F0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000013F0                                         ; quotearg_free+37↓p ...
.plt:00000000000013F0                 jmp     cs:free_ptr
.plt:00000000000013F0 _free           endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1
.plt:00000000000013FB                 jmp     sub_13D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn abort(void)
.plt:0000000000001400 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001400                                         ; quotearg_buffer_restyled:def_2CF1↓p ...
.plt:0000000000001400                 jmp     cs:abort_ptr
.plt:0000000000001400 _abort          endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    2
.plt:000000000000140B                 jmp     sub_13D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int *__errno_location(void)
.plt:0000000000001410 ___errno_location proc near             ; CODE XREF: main+60F↓p
.plt:0000000000001410                                         ; main:loc_1D74↓p ...
.plt:0000000000001410                 jmp     cs:__errno_location_ptr
.plt:0000000000001410 ___errno_location endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    3
.plt:000000000000141B                 jmp     sub_13D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001420 _strncmp        proc near               ; CODE XREF: usage+22C↓p
.plt:0000000000001420                                         ; usage+2ED↓p
.plt:0000000000001420                 jmp     cs:strncmp_ptr
.plt:0000000000001420 _strncmp        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    4
.plt:000000000000142B                 jmp     sub_13D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: noreturn thunk
.plt:0000000000001430
.plt:0000000000001430 ; void __noreturn _exit(int status)
.plt:0000000000001430 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001430                 jmp     cs:_exit_ptr
.plt:0000000000001430 __exit          endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    5
.plt:000000000000143B                 jmp     sub_13D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; size_t __fpending(FILE *fp)
.plt:0000000000001440 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001440                 jmp     cs:__fpending_ptr
.plt:0000000000001440 ___fpending     endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    6
.plt:000000000000144B                 jmp     sub_13D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int puts(const char *s)
.plt:0000000000001450 _puts           proc near               ; CODE XREF: main+407↓p
.plt:0000000000001450                 jmp     cs:puts_ptr
.plt:0000000000001450 _puts           endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    7
.plt:000000000000145B                 jmp     sub_13D0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; char *textdomain(const char *domainname)
.plt:0000000000001460 _textdomain     proc near               ; CODE XREF: main+56↓p
.plt:0000000000001460                 jmp     cs:textdomain_ptr
.plt:0000000000001460 _textdomain     endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    8
.plt:000000000000146B                 jmp     sub_13D0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fclose(FILE *stream)
.plt:0000000000001470 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001470                                         ; rpl_fclose+6B↓j
.plt:0000000000001470                 jmp     cs:fclose_ptr
.plt:0000000000001470 _fclose         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    9
.plt:000000000000147B                 jmp     sub_13D0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001480 _bindtextdomain proc near               ; CODE XREF: main+4A↓p
.plt:0000000000001480                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001480 _bindtextdomain endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ah
.plt:000000000000148B                 jmp     sub_13D0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001490 _dcgettext      proc near               ; CODE XREF: main+4F4↓p
.plt:0000000000001490                                         ; main+64E↓p ...
.plt:0000000000001490                 jmp     cs:dcgettext_ptr
.plt:0000000000001490 _dcgettext      endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Bh
.plt:000000000000149B                 jmp     sub_13D0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014A0 ___ctype_get_mb_cur_max endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Ch
.plt:00000000000014AB                 jmp     sub_13D0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t strlen(const char *s)
.plt:00000000000014B0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014B0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014B0                 jmp     cs:strlen_ptr
.plt:00000000000014B0 _strlen         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Dh
.plt:00000000000014BB                 jmp     sub_13D0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1DF1↓p
.plt:00000000000014C0                                         ; parse_long_options:loc_298A↓p ...
.plt:00000000000014C0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014C0 ___stack_chk_fail endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    0Eh
.plt:00000000000014CB                 jmp     sub_13D0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014D0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000014D0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000014D0                 jmp     cs:getopt_long_ptr
.plt:00000000000014D0 _getopt_long    endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    0Fh
.plt:00000000000014DB                 jmp     sub_13D0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014E0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014E0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014E0 _mbrtowc        endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    10h
.plt:00000000000014EB                 jmp     sub_13D0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int dup2(int fd, int fd2)
.plt:00000000000014F0 _dup2           proc near               ; CODE XREF: freopen_safer+4F↓p
.plt:00000000000014F0                                         ; freopen_safer+64↓p ...
.plt:00000000000014F0                 jmp     cs:dup2_ptr
.plt:00000000000014F0 _dup2           endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    11h
.plt:00000000000014FB                 jmp     sub_13D0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *strrchr(const char *s, int c)
.plt:0000000000001500 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001500                 jmp     cs:strrchr_ptr
.plt:0000000000001500 _strrchr        endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    12h
.plt:000000000000150B                 jmp     sub_13D0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001510 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001510                                         ; rpl_fseeko+3B↓p
.plt:0000000000001510                 jmp     cs:lseek_ptr
.plt:0000000000001510 _lseek          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    13h
.plt:000000000000151B                 jmp     sub_13D0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: noreturn thunk
.plt:0000000000001520
.plt:0000000000001520 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001520 ___assert_fail  proc near               ; CODE XREF: main+5F6↓p
.plt:0000000000001520                                         ; main+6C7↓p ...
.plt:0000000000001520                 jmp     cs:__assert_fail_ptr
.plt:0000000000001520 ___assert_fail  endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    14h
.plt:000000000000152B                 jmp     sub_13D0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001530 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001530                                         ; xzalloc+12↓j
.plt:0000000000001530                 jmp     cs:memset_ptr
.plt:0000000000001530 _memset         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    15h
.plt:000000000000153B                 jmp     sub_13D0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
.plt:0000000000001540 _freopen        proc near               ; CODE XREF: freopen_safer+BB↓p
.plt:0000000000001540                 jmp     cs:freopen_ptr
.plt:0000000000001540 _freopen        endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    16h
.plt:000000000000154B                 jmp     sub_13D0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int close(int fd)
.plt:0000000000001550 _close          proc near               ; CODE XREF: protect_fd+29↓p
.plt:0000000000001550                                         ; freopen_safer+133↓p ...
.plt:0000000000001550                 jmp     cs:close_ptr
.plt:0000000000001550 _close          endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    17h
.plt:000000000000155B                 jmp     sub_13D0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001560 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001560                                         ; fadvise+16↓j
.plt:0000000000001560                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001560 _posix_fadvise  endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    18h
.plt:000000000000156B                 jmp     sub_13D0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001570 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001570                 jmp     cs:memcmp_ptr
.plt:0000000000001570 _memcmp         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    19h
.plt:000000000000157B                 jmp     sub_13D0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001580 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001580                                         ; usage+C2↓p ...
.plt:0000000000001580                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001580 _fputs_unlocked endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ah
.plt:000000000000158B                 jmp     sub_13D0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001590 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001590                 jmp     cs:calloc_ptr
.plt:0000000000001590 _calloc         endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Bh
.plt:000000000000159B                 jmp     sub_13D0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000015A0 _strcmp         proc near               ; CODE XREF: main+1C4↓p
.plt:00000000000015A0                                         ; main+20D↓p ...
.plt:00000000000015A0                 jmp     cs:strcmp_ptr
.plt:00000000000015A0 _strcmp         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Ch
.plt:00000000000015AB                 jmp     sub_13D0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000015B0 _memcpy         proc near               ; CODE XREF: readtokens+DF↓p
.plt:00000000000015B0                                         ; xmemdup+23↓j
.plt:00000000000015B0                 jmp     cs:memcpy_ptr
.plt:00000000000015B0 _memcpy         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Dh
.plt:00000000000015BB                 jmp     sub_13D0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fileno(FILE *stream)
.plt:00000000000015C0 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:00000000000015C0                                         ; freopen_safer+1C↓p ...
.plt:00000000000015C0                 jmp     cs:fileno_ptr
.plt:00000000000015C0 _fileno         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    1Eh
.plt:00000000000015CB                 jmp     sub_13D0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; void *malloc(size_t size)
.plt:00000000000015D0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015D0                 jmp     cs:malloc_ptr
.plt:00000000000015D0 _malloc         endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    1Fh
.plt:00000000000015DB                 jmp     sub_13D0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int fflush(FILE *stream)
.plt:00000000000015E0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015E0                                         ; rpl_fflush+3B↓j
.plt:00000000000015E0                 jmp     cs:fflush_ptr
.plt:00000000000015E0 _fflush         endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    20h ; ' '
.plt:00000000000015EB                 jmp     sub_13D0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015F0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015F0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015F0 _nl_langinfo    endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    21h ; '!'
.plt:00000000000015FB                 jmp     sub_13D0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int __freading(FILE *fp)
.plt:0000000000001600 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001600                                         ; rpl_fflush+9↓p
.plt:0000000000001600                 jmp     cs:__freading_ptr
.plt:0000000000001600 ___freading     endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    22h ; '"'
.plt:000000000000160B                 jmp     sub_13D0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001610 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001610                 jmp     cs:realloc_ptr
.plt:0000000000001610 _realloc        endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    23h ; '#'
.plt:000000000000161B                 jmp     sub_13D0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; char *setlocale(int category, const char *locale)
.plt:0000000000001620 _setlocale      proc near               ; CODE XREF: main+37↓p
.plt:0000000000001620                                         ; usage+213↓p ...
.plt:0000000000001620                 jmp     cs:setlocale_ptr
.plt:0000000000001620 _setlocale      endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    24h ; '$'
.plt:000000000000162B                 jmp     sub_13D0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001630                                         ; usage+207↓p ...
.plt:0000000000001630                 jmp     cs:__printf_chk_ptr
.plt:0000000000001630 ___printf_chk   endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    25h ; '%'
.plt:000000000000163B                 jmp     sub_13D0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001640 _error          proc near               ; CODE XREF: main+505↓p
.plt:0000000000001640                                         ; main+627↓p ...
.plt:0000000000001640                 jmp     cs:error_ptr
.plt:0000000000001640 _error          endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    26h ; '&'
.plt:000000000000164B                 jmp     sub_13D0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int open(const char *file, int oflag, ...)
.plt:0000000000001650 _open           proc near               ; CODE XREF: protect_fd+18↓p
.plt:0000000000001650                 jmp     cs:open_ptr
.plt:0000000000001650 _open           endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    27h ; '''
.plt:000000000000165B                 jmp     sub_13D0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001660 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_559A↓j
.plt:0000000000001660                 jmp     cs:fseeko_ptr
.plt:0000000000001660 _fseeko         endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    28h ; '('
.plt:000000000000166B                 jmp     sub_13D0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001670 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001670                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001670 ___cxa_atexit   endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    29h ; ')'
.plt:000000000000167B                 jmp     sub_13D0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: noreturn thunk
.plt:0000000000001680
.plt:0000000000001680 ; void __noreturn exit(int status)
.plt:0000000000001680 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001680                                         ; parse_long_options+122↓p ...
.plt:0000000000001680                 jmp     cs:exit_ptr
.plt:0000000000001680 _exit           endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ah ; '*'
.plt:000000000000168B                 jmp     sub_13D0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001690 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001690                 jmp     cs:fwrite_ptr
.plt:0000000000001690 _fwrite         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Bh ; '+'
.plt:000000000000169B                 jmp     sub_13D0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000016A0                                         ; version_etc_arn+37↓p ...
.plt:00000000000016A0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000016A0 ___fprintf_chk  endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Ch ; ','
.plt:00000000000016AB                 jmp     sub_13D0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000016B0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000016B0                 jmp     cs:mbsinit_ptr
.plt:00000000000016B0 _mbsinit        endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Dh ; '-'
.plt:00000000000016BB                 jmp     sub_13D0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; int iswprint(wint_t wc)
.plt:00000000000016C0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016C0                 jmp     cs:iswprint_ptr
.plt:00000000000016C0 _iswprint       endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    2Eh ; '.'
.plt:00000000000016CB                 jmp     sub_13D0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016D0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016D0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016D0 ___ctype_b_loc  endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    2Fh ; '/'
.plt:00000000000016DB                 jmp     sub_13D0
.plt:00000000000016DB ; } // starts at 13D0
.plt:00000000000016DB _plt            ends
.plt:00000000000016DB
.plt.got:00000000000016E0 ; ===========================================================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Segment type: Pure code
.plt.got:00000000000016E0 ; Segment permissions: Read/Execute
.plt.got:00000000000016E0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016E0                 assume cs:_plt_got
.plt.got:00000000000016E0                 ;org 16E0h
.plt.got:00000000000016E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; Attributes: thunk
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016E0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016E0 ; __unwind {
.plt.got:00000000000016E0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016E0 __cxa_finalize  endp
.plt.got:00000000000016E0
.plt.got:00000000000016E0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016E6                 align 8
.plt.got:00000000000016E6 ; } // starts at 16E0
.plt.got:00000000000016E6 _plt_got        ends
.plt.got:00000000000016E6
LOAD:00000000000016E8 ; ===========================================================================
LOAD:00000000000016E8
LOAD:00000000000016E8 ; Segment type: Pure code
LOAD:00000000000016E8 ; Segment permissions: Read/Execute
LOAD:00000000000016E8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016E8                 assume cs:LOAD
LOAD:00000000000016E8                 ;org 16E8h
LOAD:00000000000016E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016E8                 align 10h
LOAD:00000000000016E8 LOAD            ends
LOAD:00000000000016E8
.text:00000000000016F0 ; ===========================================================================
.text:00000000000016F0
.text:00000000000016F0 ; Segment type: Pure code
.text:00000000000016F0 ; Segment permissions: Read/Execute
.text:00000000000016F0 _text           segment para public 'CODE' use64
.text:00000000000016F0                 assume cs:_text
.text:00000000000016F0                 ;org 16F0h
.text:00000000000016F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0
.text:00000000000016F0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016F0                 public main
.text:00000000000016F0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016F0
.text:00000000000016F0 var_80          = qword ptr -80h
.text:00000000000016F0 var_78          = qword ptr -78h
.text:00000000000016F0 var_70          = qword ptr -70h
.text:00000000000016F0 var_68          = qword ptr -68h
.text:00000000000016F0 var_60          = dword ptr -60h
.text:00000000000016F0 var_5C          = dword ptr -5Ch
.text:00000000000016F0 var_58          = byte ptr -58h
.text:00000000000016F0 s1              = qword ptr -50h
.text:00000000000016F0 var_40          = qword ptr -40h
.text:00000000000016F0
.text:00000000000016F0 ; __unwind {
.text:00000000000016F0                 push    r15
.text:00000000000016F2                 push    r14
.text:00000000000016F4                 push    r13
.text:00000000000016F6                 push    r12
.text:00000000000016F8                 push    rbp
.text:00000000000016F9                 push    rbx
.text:00000000000016FA                 mov     ebp, edi
.text:00000000000016FC                 mov     rbx, rsi
.text:00000000000016FF                 sub     rsp, 58h
.text:0000000000001703                 mov     rdi, [rsi]
.text:0000000000001706                 mov     rax, fs:28h
.text:000000000000170F                 mov     [rsp+88h+var_40], rax
.text:0000000000001714                 xor     eax, eax
.text:0000000000001716                 call    set_program_name
.text:000000000000171B                 lea     rsi, asc_5924+3 ; locale
.text:0000000000001722                 mov     edi, 6          ; category
.text:0000000000001727                 call    _setlocale
.text:000000000000172C                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001733                 lea     rdi, domainname ; "coreutils"
.text:000000000000173A                 call    _bindtextdomain
.text:000000000000173F                 lea     rdi, domainname ; "coreutils"
.text:0000000000001746                 call    _textdomain
.text:000000000000174B                 lea     rdi, close_stdout
.text:0000000000001752                 call    atexit
.text:0000000000001757                 lea     rax, aMarkKettenis ; "Mark Kettenis"
.text:000000000000175E                 sub     rsp, 8
.text:0000000000001762                 mov     r8, cs:Version
.text:0000000000001769                 push    0
.text:000000000000176B                 lea     rdx, aTsort     ; "tsort"
.text:0000000000001772                 lea     rcx, unk_58C0
.text:0000000000001779                 push    rax
.text:000000000000177A                 lea     rax, usage
.text:0000000000001781                 mov     r9d, 1
.text:0000000000001787                 mov     rsi, rbx
.text:000000000000178A                 mov     edi, ebp
.text:000000000000178C                 push    rax
.text:000000000000178D                 xor     eax, eax
.text:000000000000178F                 call    parse_gnu_standard_options_only
.text:0000000000001794                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000179B                 mov     edx, ebp
.text:000000000000179D                 add     rsp, 20h
.text:00000000000017A1                 sub     edx, eax
.text:00000000000017A3                 cmp     edx, 1
.text:00000000000017A6                 jg      loc_1DF6
.text:00000000000017AC                 cmp     eax, ebp
.text:00000000000017AE                 jz      loc_1CA9
.text:00000000000017B4                 mov     rsi, [rbx+rax*8]
.text:00000000000017B8                 lea     rdi, aLt+2      ; "-"
.text:00000000000017BF                 mov     ecx, 2
.text:00000000000017C4                 mov     r15, rsi
.text:00000000000017C7                 mov     [rsp+88h+var_68], rsi
.text:00000000000017CC                 repe cmpsb
.text:00000000000017CE                 setnbe  al
.text:00000000000017D1                 sbb     al, 0
.text:00000000000017D3                 xor     edi, edi        ; src
.text:00000000000017D5                 movsx   eax, al
.text:00000000000017D8                 mov     ebx, eax
.text:00000000000017DA                 mov     [rsp+88h+var_5C], eax
.text:00000000000017DE                 call    new_item
.text:00000000000017E3                 test    ebx, ebx
.text:00000000000017E5                 mov     r14, rax
.text:00000000000017E8                 jz      short loc_1809
.text:00000000000017EA                 mov     rdx, cs:stdin@@GLIBC_2_2_5
.text:00000000000017F1                 lea     rsi, aWriteError+0Ah ; "r"
.text:00000000000017F8                 mov     rdi, r15
.text:00000000000017FB                 call    freopen_safer
.text:0000000000001800                 test    rax, rax
.text:0000000000001803                 jz      loc_1CEB
.text:0000000000001809
.text:0000000000001809 loc_1809:                               ; CODE XREF: main+F8↑j
.text:0000000000001809                                         ; main+5D7↓j
.text:0000000000001809                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:0000000000001810                 mov     esi, 2
.text:0000000000001815                 call    fadvise
.text:000000000000181A                 lea     rdi, [rsp+88h+var_58]
.text:000000000000181F                 mov     [rsp+88h+var_78], rdi
.text:0000000000001824                 call    init_tokenbuffer
.text:0000000000001829
.text:0000000000001829 loc_1829:                               ; CODE XREF: main+340↓j
.text:0000000000001829                                         ; main+369↓j
.text:0000000000001829                 mov     [rsp+88h+var_80], 0
.text:0000000000001832                 nop     word ptr [rax+rax+00h]
.text:0000000000001838
.text:0000000000001838 loc_1838:                               ; CODE XREF: main+1E0↓j
.text:0000000000001838                 mov     rcx, [rsp+88h+var_78]
.text:000000000000183D                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001844                 lea     rsi, asc_5924   ; " \t\n"
.text:000000000000184B                 mov     edx, 3
.text:0000000000001850                 call    readtoken
.text:0000000000001855                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000001859                 jz      loc_1A8C
.text:000000000000185F                 test    rax, rax
.text:0000000000001862                 jz      loc_1E31
.text:0000000000001868                 test    r14, r14
.text:000000000000186B                 mov     rbp, [rsp+88h+s1]
.text:0000000000001870                 jz      loc_1DD2
.text:0000000000001876                 mov     r15, [r14+10h]
.text:000000000000187A                 mov     r12, r14
.text:000000000000187D                 test    r15, r15
.text:0000000000001880                 mov     rbx, r15
.text:0000000000001883                 jnz     short loc_18AE
.text:0000000000001885                 jmp     loc_1A6F
.text:0000000000001885 ; ---------------------------------------------------------------------------
.text:000000000000188A                 align 10h
.text:0000000000001890
.text:0000000000001890 loc_1890:                               ; CODE XREF: main+1CD↓j
.text:0000000000001890                 mov     rax, [r15+10h]
.text:0000000000001894                 cmovs   rax, [r15+8]
.text:0000000000001899                 test    rax, rax
.text:000000000000189C                 jz      short loc_18D8
.text:000000000000189E                 mov     edx, [rax+18h]
.text:00000000000018A1                 test    edx, edx
.text:00000000000018A3                 cmovnz  r12, r15
.text:00000000000018A7                 cmovnz  rbx, rax
.text:00000000000018AB                 mov     r15, rax
.text:00000000000018AE
.text:00000000000018AE loc_18AE:                               ; CODE XREF: main+193↑j
.text:00000000000018AE                 mov     rsi, [r15]      ; s2
.text:00000000000018B1                 mov     rdi, rbp        ; s1
.text:00000000000018B4                 call    _strcmp
.text:00000000000018B9                 test    eax, eax
.text:00000000000018BB                 mov     edx, eax
.text:00000000000018BD                 jnz     short loc_1890
.text:00000000000018BF
.text:00000000000018BF loc_18BF:                               ; CODE XREF: main+37A↓j
.text:00000000000018BF                                         ; main+38E↓j ...
.text:00000000000018BF                 cmp     [rsp+88h+var_80], 0
.text:00000000000018C5                 jnz     loc_1A1E
.text:00000000000018CB
.text:00000000000018CB loc_18CB:                               ; CODE XREF: main+328↓j
.text:00000000000018CB                 mov     [rsp+88h+var_80], r15
.text:00000000000018D0                 jmp     loc_1838
.text:00000000000018D0 ; ---------------------------------------------------------------------------
.text:00000000000018D5                 align 8
.text:00000000000018D8
.text:00000000000018D8 loc_18D8:                               ; CODE XREF: main+1AC↑j
.text:00000000000018D8                 mov     rdi, rbp        ; src
.text:00000000000018DB                 mov     [rsp+88h+var_60], edx
.text:00000000000018DF                 call    new_item
.text:00000000000018E4                 mov     edx, [rsp+88h+var_60]
.text:00000000000018E8                 mov     r13, rax
.text:00000000000018EB                 test    edx, edx
.text:00000000000018ED                 js      loc_1A83
.text:00000000000018F3                 mov     [r15+10h], rax
.text:00000000000018F7
.text:00000000000018F7 loc_18F7:                               ; CODE XREF: main+397↓j
.text:00000000000018F7                 mov     rsi, [rbx]      ; s2
.text:00000000000018FA                 mov     rdi, rbp        ; s1
.text:00000000000018FD                 call    _strcmp
.text:0000000000001902                 test    eax, eax
.text:0000000000001904                 jz      loc_1D9D
.text:000000000000190A                 cdq
.text:000000000000190B                 mov     rcx, [rbx+10h]
.text:000000000000190F                 or      edx, 1
.text:0000000000001912                 test    eax, eax
.text:0000000000001914                 cmovs   rcx, [rbx+8]
.text:0000000000001919                 mov     [rsp+88h+var_60], edx
.text:000000000000191D                 cmp     r13, rcx
.text:0000000000001920                 mov     [rsp+88h+var_70], rcx
.text:0000000000001925                 mov     r15, rcx
.text:0000000000001928                 jnz     short loc_1941
.text:000000000000192A                 jmp     short loc_1967
.text:000000000000192A ; ---------------------------------------------------------------------------
.text:000000000000192C                 align 10h
.text:0000000000001930
.text:0000000000001930 loc_1930:                               ; CODE XREF: main+264↓j
.text:0000000000001930                 mov     dword ptr [r15+18h], 1
.text:0000000000001938                 mov     r15, [r15+10h]
.text:000000000000193C                 cmp     r13, r15
.text:000000000000193F                 jz      short loc_1967
.text:0000000000001941
.text:0000000000001941 loc_1941:                               ; CODE XREF: main+238↑j
.text:0000000000001941                                         ; main+275↓j
.text:0000000000001941                 mov     rsi, [r15]      ; s2
.text:0000000000001944                 mov     rdi, rbp        ; s1
.text:0000000000001947                 call    _strcmp
.text:000000000000194C                 test    eax, eax
.text:000000000000194E                 jz      loc_1CCC
.text:0000000000001954                 jns     short loc_1930
.text:0000000000001956                 mov     dword ptr [r15+18h], 0FFFFFFFFh
.text:000000000000195E                 mov     r15, [r15+8]
.text:0000000000001962                 cmp     r13, r15
.text:0000000000001965                 jnz     short loc_1941
.text:0000000000001967
.text:0000000000001967 loc_1967:                               ; CODE XREF: main+23A↑j
.text:0000000000001967                                         ; main+24F↑j
.text:0000000000001967                 mov     eax, [rbx+18h]
.text:000000000000196A                 test    eax, eax
.text:000000000000196C                 jz      loc_1A60
.text:0000000000001972                 mov     edx, [rsp+88h+var_60]
.text:0000000000001976                 neg     edx
.text:0000000000001978                 cmp     eax, edx
.text:000000000000197A                 jz      loc_1A60
.text:0000000000001980                 mov     rax, [rsp+88h+var_70]
.text:0000000000001985                 mov     edi, [rsp+88h+var_60]
.text:0000000000001989                 cmp     edi, [rax+18h]
.text:000000000000198C                 jz      loc_1C30
.text:0000000000001992                 mov     esi, [rsp+88h+var_60]
.text:0000000000001996                 mov     rdi, [rsp+88h+var_70]
.text:000000000000199B                 test    esi, esi
.text:000000000000199D                 mov     rax, [rdi+8]
.text:00000000000019A1                 mov     rcx, [rdi+10h]
.text:00000000000019A5                 js      loc_1C70
.text:00000000000019AB                 mov     rcx, [rax+10h]
.text:00000000000019AF                 mov     rsi, [rsp+88h+var_70]
.text:00000000000019B4                 mov     [rsi+8], rcx
.text:00000000000019B8                 mov     rcx, [rax+8]
.text:00000000000019BC                 mov     [rax+10h], rsi
.text:00000000000019C0                 mov     [rbx+10h], rcx
.text:00000000000019C4                 mov     [rax+8], rbx
.text:00000000000019C8
.text:00000000000019C8 loc_19C8:                               ; CODE XREF: main+59B↓j
.text:00000000000019C8                 mov     rdi, [rsp+88h+var_70]
.text:00000000000019CD                 mov     dword ptr [rbx+18h], 0
.text:00000000000019D4                 mov     dword ptr [rdi+18h], 0
.text:00000000000019DB                 mov     ecx, [rax+18h]
.text:00000000000019DE                 cmp     [rsp+88h+var_60], ecx
.text:00000000000019E2                 jz      loc_1C90
.text:00000000000019E8                 cmp     edx, ecx
.text:00000000000019EA                 jnz     short loc_19F8
.text:00000000000019EC                 mov     rsi, [rsp+88h+var_70]
.text:00000000000019F1                 mov     edi, [rsp+88h+var_60]
.text:00000000000019F5                 mov     [rsi+18h], edi
.text:00000000000019F8
.text:00000000000019F8 loc_19F8:                               ; CODE XREF: main+2FA↑j
.text:00000000000019F8                                         ; main+5A3↓j
.text:00000000000019F8                 cmp     [r12+10h], rbx
.text:00000000000019FD                 mov     dword ptr [rax+18h], 0
.text:0000000000001A04                 jz      loc_1C63
.text:0000000000001A0A
.text:0000000000001A0A loc_1A0A:                               ; CODE XREF: main+56D↓j
.text:0000000000001A0A                 cmp     [rsp+88h+var_80], 0
.text:0000000000001A10                 mov     [r12+8], rax
.text:0000000000001A15                 mov     r15, r13
.text:0000000000001A18                 jz      loc_18CB
.text:0000000000001A1E
.text:0000000000001A1E loc_1A1E:                               ; CODE XREF: main+1D5↑j
.text:0000000000001A1E                 mov     rax, [rsp+88h+var_80]
.text:0000000000001A23                 mov     rsi, [r15]      ; s2
.text:0000000000001A26                 mov     rdi, [rax]      ; s1
.text:0000000000001A29                 call    _strcmp
.text:0000000000001A2E                 test    eax, eax
.text:0000000000001A30                 jz      loc_1829
.text:0000000000001A36                 add     qword ptr [r15+20h], 1
.text:0000000000001A3B                 mov     edi, 10h
.text:0000000000001A40                 call    xmalloc
.text:0000000000001A45                 mov     rdi, [rsp+88h+var_80]
.text:0000000000001A4A                 mov     [rax], r15
.text:0000000000001A4D                 mov     rdx, [rdi+30h]
.text:0000000000001A51                 mov     [rax+8], rdx
.text:0000000000001A55                 mov     [rdi+30h], rax
.text:0000000000001A59                 jmp     loc_1829
.text:0000000000001A59 ; ---------------------------------------------------------------------------
.text:0000000000001A5E                 align 20h
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: main+27C↑j
.text:0000000000001A60                                         ; main+28A↑j
.text:0000000000001A60                 add     eax, [rsp+88h+var_60]
.text:0000000000001A64                 mov     r15, r13
.text:0000000000001A67                 mov     [rbx+18h], eax
.text:0000000000001A6A                 jmp     loc_18BF
.text:0000000000001A6F ; ---------------------------------------------------------------------------
.text:0000000000001A6F
.text:0000000000001A6F loc_1A6F:                               ; CODE XREF: main+195↑j
.text:0000000000001A6F                 mov     rdi, rbp        ; src
.text:0000000000001A72                 call    new_item
.text:0000000000001A77                 mov     r15, rax
.text:0000000000001A7A                 mov     [r14+10h], rax
.text:0000000000001A7E                 jmp     loc_18BF
.text:0000000000001A83 ; ---------------------------------------------------------------------------
.text:0000000000001A83
.text:0000000000001A83 loc_1A83:                               ; CODE XREF: main+1FD↑j
.text:0000000000001A83                 mov     [r15+8], rax
.text:0000000000001A87                 jmp     loc_18F7
.text:0000000000001A8C ; ---------------------------------------------------------------------------
.text:0000000000001A8C
.text:0000000000001A8C loc_1A8C:                               ; CODE XREF: main+169↑j
.text:0000000000001A8C                 cmp     [rsp+88h+var_80], 0
.text:0000000000001A92                 jnz     loc_1D1C
.text:0000000000001A98                 mov     rdi, [r14+10h]
.text:0000000000001A9C                 test    rdi, rdi
.text:0000000000001A9F                 jz      short loc_1AAD
.text:0000000000001AA1                 lea     rsi, count_items
.text:0000000000001AA8                 call    recurse_tree
.text:0000000000001AAD
.text:0000000000001AAD loc_1AAD:                               ; CODE XREF: main+3AF↑j
.text:0000000000001AAD                 mov     ebp, 1
.text:0000000000001AB2
.text:0000000000001AB2 loc_1AB2:                               ; CODE XREF: main+52F↓j
.text:0000000000001AB2                 cmp     cs:n_strings, 0
.text:0000000000001ABA                 jz      loc_1B6D
.text:0000000000001AC0                 mov     rdi, [r14+10h]
.text:0000000000001AC4                 test    rdi, rdi
.text:0000000000001AC7                 jz      loc_1BB0
.text:0000000000001ACD                 lea     rsi, scan_zeros
.text:0000000000001AD4                 call    recurse_tree
.text:0000000000001AD9                 mov     rax, cs:head
.text:0000000000001AE0                 test    rax, rax
.text:0000000000001AE3                 jz      loc_1C24
.text:0000000000001AE9                 nop     dword ptr [rax+00000000h]
.text:0000000000001AF0
.text:0000000000001AF0 loc_1AF0:                               ; CODE XREF: main+476↓j
.text:0000000000001AF0                                         ; main+4CA↓j
.text:0000000000001AF0                 mov     rdi, [rax]      ; s
.text:0000000000001AF3                 mov     rbx, [rax+30h]
.text:0000000000001AF7                 call    _puts
.text:0000000000001AFC                 mov     rax, cs:n_strings
.text:0000000000001B03                 mov     r8, cs:head
.text:0000000000001B0A                 xor     esi, esi
.text:0000000000001B0C                 test    rbx, rbx
.text:0000000000001B0F                 mov     rcx, cs:zeros
.text:0000000000001B16                 lea     rdi, [rax-1]
.text:0000000000001B1A                 mov     qword ptr [r8], 0
.text:0000000000001B21                 mov     cs:n_strings, rdi
.text:0000000000001B28                 jz      short loc_1B58
.text:0000000000001B2A                 nop     word ptr [rax+rax+00h]
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: main+45D↓j
.text:0000000000001B30                 mov     rdx, [rbx]
.text:0000000000001B33                 sub     qword ptr [rdx+20h], 1
.text:0000000000001B38                 jnz     short loc_1B46
.text:0000000000001B3A                 mov     [rcx+28h], rdx
.text:0000000000001B3E                 mov     esi, 1
.text:0000000000001B43                 mov     rcx, rdx
.text:0000000000001B46
.text:0000000000001B46 loc_1B46:                               ; CODE XREF: main+448↑j
.text:0000000000001B46                 mov     rbx, [rbx+8]
.text:0000000000001B4A                 test    rbx, rbx
.text:0000000000001B4D                 jnz     short loc_1B30
.text:0000000000001B4F                 test    sil, sil
.text:0000000000001B52                 jnz     loc_1D91
.text:0000000000001B58
.text:0000000000001B58 loc_1B58:                               ; CODE XREF: main+438↑j
.text:0000000000001B58                                         ; main+6A8↓j
.text:0000000000001B58                 mov     rax, [r8+28h]
.text:0000000000001B5C                 test    rax, rax
.text:0000000000001B5F                 mov     cs:head, rax
.text:0000000000001B66                 jnz     short loc_1AF0
.text:0000000000001B68
.text:0000000000001B68 loc_1B68:                               ; CODE XREF: main+53B↓j
.text:0000000000001B68                 test    rdi, rdi
.text:0000000000001B6B                 jnz     short loc_1BC0
.text:0000000000001B6D
.text:0000000000001B6D loc_1B6D:                               ; CODE XREF: main+3CA↑j
.text:0000000000001B6D                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000001B74                 call    rpl_fclose
.text:0000000000001B79                 test    eax, eax
.text:0000000000001B7B                 jnz     loc_1D57
.text:0000000000001B81                 xor     ebp, 1
.text:0000000000001B84                 mov     rsi, [rsp+88h+var_40]
.text:0000000000001B89                 xor     rsi, fs:28h
.text:0000000000001B92                 movzx   eax, bpl
.text:0000000000001B96                 jnz     loc_1DF1
.text:0000000000001B9C                 add     rsp, 58h
.text:0000000000001BA0                 pop     rbx
.text:0000000000001BA1                 pop     rbp
.text:0000000000001BA2                 pop     r12
.text:0000000000001BA4                 pop     r13
.text:0000000000001BA6                 pop     r14
.text:0000000000001BA8                 pop     r15
.text:0000000000001BAA                 retn
.text:0000000000001BAA ; ---------------------------------------------------------------------------
.text:0000000000001BAB                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: main+3D7↑j
.text:0000000000001BB0                 mov     rax, cs:head
.text:0000000000001BB7                 test    rax, rax
.text:0000000000001BBA                 jnz     loc_1AF0
.text:0000000000001BC0
.text:0000000000001BC0 loc_1BC0:                               ; CODE XREF: main+47B↑j
.text:0000000000001BC0                 mov     rdx, [rsp+88h+var_68]
.text:0000000000001BC5                 mov     esi, 3
.text:0000000000001BCA                 xor     edi, edi
.text:0000000000001BCC                 xor     ebp, ebp
.text:0000000000001BCE                 call    quotearg_n_style_colon
.text:0000000000001BD3                 lea     rsi, msgid      ; "%s: input contains a loop:"
.text:0000000000001BDA                 mov     rbx, rax
.text:0000000000001BDD                 mov     edx, 5          ; category
.text:0000000000001BE2                 xor     edi, edi        ; domainname
.text:0000000000001BE4                 call    _dcgettext
.text:0000000000001BE9                 mov     rcx, rbx
.text:0000000000001BEC                 mov     rdx, rax        ; format
.text:0000000000001BEF                 xor     esi, esi        ; errnum
.text:0000000000001BF1                 xor     edi, edi        ; status
.text:0000000000001BF3                 xor     eax, eax
.text:0000000000001BF5                 call    _error
.text:0000000000001BFA                 nop     word ptr [rax+rax+00h]
.text:0000000000001C00
.text:0000000000001C00 loc_1C00:                               ; CODE XREF: main+52D↓j
.text:0000000000001C00                 mov     rdi, [r14+10h]
.text:0000000000001C04                 test    rdi, rdi
.text:0000000000001C07                 jz      short loc_1C15
.text:0000000000001C09                 lea     rsi, detect_loop
.text:0000000000001C10                 call    recurse_tree
.text:0000000000001C15
.text:0000000000001C15 loc_1C15:                               ; CODE XREF: main+517↑j
.text:0000000000001C15                 cmp     cs:loop, 0
.text:0000000000001C1D                 jnz     short loc_1C00
.text:0000000000001C1F                 jmp     loc_1AB2
.text:0000000000001C24 ; ---------------------------------------------------------------------------
.text:0000000000001C24
.text:0000000000001C24 loc_1C24:                               ; CODE XREF: main+3F3↑j
.text:0000000000001C24                 mov     rdi, cs:n_strings
.text:0000000000001C2B                 jmp     loc_1B68
.text:0000000000001C30 ; ---------------------------------------------------------------------------
.text:0000000000001C30
.text:0000000000001C30 loc_1C30:                               ; CODE XREF: main+29C↑j
.text:0000000000001C30                 test    edi, edi
.text:0000000000001C32                 js      short loc_1C98
.text:0000000000001C34                 mov     rdi, [rsp+88h+var_70]
.text:0000000000001C39                 mov     rax, [rdi+8]
.text:0000000000001C3D                 mov     [rbx+10h], rax
.text:0000000000001C41                 mov     [rdi+8], rbx
.text:0000000000001C45
.text:0000000000001C45 loc_1C45:                               ; CODE XREF: main+5B7↓j
.text:0000000000001C45                 cmp     [r12+10h], rbx
.text:0000000000001C4A                 mov     rax, [rsp+88h+var_70]
.text:0000000000001C4F                 mov     dword ptr [rax+18h], 0
.text:0000000000001C56                 mov     dword ptr [rbx+18h], 0
.text:0000000000001C5D                 jnz     loc_1A0A
.text:0000000000001C63
.text:0000000000001C63 loc_1C63:                               ; CODE XREF: main+314↑j
.text:0000000000001C63                 mov     [r12+10h], rax
.text:0000000000001C68                 mov     r15, r13
.text:0000000000001C6B                 jmp     loc_18BF
.text:0000000000001C70 ; ---------------------------------------------------------------------------
.text:0000000000001C70
.text:0000000000001C70 loc_1C70:                               ; CODE XREF: main+2B5↑j
.text:0000000000001C70                 mov     rax, [rcx+8]
.text:0000000000001C74                 mov     [rdi+10h], rax
.text:0000000000001C78                 mov     rax, [rcx+10h]
.text:0000000000001C7C                 mov     [rcx+8], rdi
.text:0000000000001C80                 mov     [rbx+8], rax
.text:0000000000001C84                 mov     [rcx+10h], rbx
.text:0000000000001C88                 mov     rax, rcx
.text:0000000000001C8B                 jmp     loc_19C8
.text:0000000000001C90 ; ---------------------------------------------------------------------------
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: main+2F2↑j
.text:0000000000001C90                 mov     [rbx+18h], edx
.text:0000000000001C93                 jmp     loc_19F8
.text:0000000000001C98 ; ---------------------------------------------------------------------------
.text:0000000000001C98
.text:0000000000001C98 loc_1C98:                               ; CODE XREF: main+542↑j
.text:0000000000001C98                 mov     rdi, rax
.text:0000000000001C9B                 mov     rax, [rax+10h]
.text:0000000000001C9F                 mov     [rbx+8], rax
.text:0000000000001CA3                 mov     [rdi+10h], rbx
.text:0000000000001CA7                 jmp     short loc_1C45
.text:0000000000001CA9 ; ---------------------------------------------------------------------------
.text:0000000000001CA9
.text:0000000000001CA9 loc_1CA9:                               ; CODE XREF: main+BE↑j
.text:0000000000001CA9                 xor     edi, edi        ; src
.text:0000000000001CAB                 call    new_item
.text:0000000000001CB0                 mov     r14, rax
.text:0000000000001CB3                 lea     rax, aLt+2      ; "-"
.text:0000000000001CBA                 mov     [rsp+88h+var_5C], 0
.text:0000000000001CC2                 mov     [rsp+88h+var_68], rax
.text:0000000000001CC7                 jmp     loc_1809
.text:0000000000001CCC ; ---------------------------------------------------------------------------
.text:0000000000001CCC
.text:0000000000001CCC loc_1CCC:                               ; CODE XREF: main+25E↑j
.text:0000000000001CCC                 lea     rcx, __PRETTY_FUNCTION___6928 ; "search_item"
.text:0000000000001CD3                 lea     rsi, file       ; "../coreutils-8.31/src/tsort.c"
.text:0000000000001CDA                 lea     rdi, assertion  ; "!STREQ (str, p->str)"
.text:0000000000001CE1                 mov     edx, 0B6h       ; line
.text:0000000000001CE6                 call    ___assert_fail
.text:0000000000001CEB ; ---------------------------------------------------------------------------
.text:0000000000001CEB
.text:0000000000001CEB loc_1CEB:                               ; CODE XREF: main+113↑j
.text:0000000000001CEB                 mov     rdx, [rsp+88h+var_68]
.text:0000000000001CF0                 mov     esi, 3
.text:0000000000001CF5                 xor     edi, edi
.text:0000000000001CF7                 call    quotearg_n_style_colon
.text:0000000000001CFC                 mov     rbx, rax
.text:0000000000001CFF                 call    ___errno_location
.text:0000000000001D04                 mov     esi, [rax]      ; errnum
.text:0000000000001D06                 lea     rdx, format+4   ; format
.text:0000000000001D0D                 mov     rcx, rbx
.text:0000000000001D10                 mov     edi, 1          ; status
.text:0000000000001D15                 xor     eax, eax
.text:0000000000001D17                 call    _error
.text:0000000000001D1C
.text:0000000000001D1C loc_1D1C:                               ; CODE XREF: main+3A2↑j
.text:0000000000001D1C                 mov     rdx, [rsp+88h+var_68]
.text:0000000000001D21                 mov     esi, 3
.text:0000000000001D26                 xor     edi, edi
.text:0000000000001D28                 call    quotearg_n_style_colon
.text:0000000000001D2D                 lea     rsi, aSInputContains_0 ; "%s: input contains an odd number of tok"...
.text:0000000000001D34                 mov     rbx, rax
.text:0000000000001D37                 mov     edx, 5          ; category
.text:0000000000001D3C                 xor     edi, edi        ; domainname
.text:0000000000001D3E                 call    _dcgettext
.text:0000000000001D43                 mov     rcx, rbx
.text:0000000000001D46                 mov     rdx, rax        ; format
.text:0000000000001D49                 xor     esi, esi        ; errnum
.text:0000000000001D4B                 mov     edi, 1          ; status
.text:0000000000001D50                 xor     eax, eax
.text:0000000000001D52                 call    _error
.text:0000000000001D57
.text:0000000000001D57 loc_1D57:                               ; CODE XREF: main+48B↑j
.text:0000000000001D57                 cmp     [rsp+88h+var_5C], 0
.text:0000000000001D5C                 jnz     short loc_1DBC
.text:0000000000001D5E                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000001D65                 mov     edx, 5          ; category
.text:0000000000001D6A                 xor     edi, edi        ; domainname
.text:0000000000001D6C                 call    _dcgettext
.text:0000000000001D71                 mov     rbx, rax
.text:0000000000001D74
.text:0000000000001D74 loc_1D74:                               ; CODE XREF: main+6E0↓j
.text:0000000000001D74                 call    ___errno_location
.text:0000000000001D79                 mov     esi, [rax]      ; errnum
.text:0000000000001D7B                 lea     rdx, format+4   ; format
.text:0000000000001D82                 mov     rcx, rbx
.text:0000000000001D85                 mov     edi, 1          ; status
.text:0000000000001D8A                 xor     eax, eax
.text:0000000000001D8C                 call    _error
.text:0000000000001D91
.text:0000000000001D91 loc_1D91:                               ; CODE XREF: main+462↑j
.text:0000000000001D91                 mov     cs:zeros, rcx
.text:0000000000001D98                 jmp     loc_1B58
.text:0000000000001D9D ; ---------------------------------------------------------------------------
.text:0000000000001D9D
.text:0000000000001D9D loc_1D9D:                               ; CODE XREF: main+214↑j
.text:0000000000001D9D                 lea     rcx, __PRETTY_FUNCTION___6928 ; "search_item"
.text:0000000000001DA4                 lea     rsi, file       ; "../coreutils-8.31/src/tsort.c"
.text:0000000000001DAB                 lea     rdi, aStreqStrSStr ; "!STREQ (str, s->str)"
.text:0000000000001DB2                 mov     edx, 0A8h       ; line
.text:0000000000001DB7                 call    ___assert_fail
.text:0000000000001DBC ; ---------------------------------------------------------------------------
.text:0000000000001DBC
.text:0000000000001DBC loc_1DBC:                               ; CODE XREF: main+66C↑j
.text:0000000000001DBC                 mov     rdx, [rsp+88h+var_68]
.text:0000000000001DC1                 mov     esi, 3
.text:0000000000001DC6                 xor     edi, edi
.text:0000000000001DC8                 call    quotearg_n_style_colon
.text:0000000000001DCD                 mov     rbx, rax
.text:0000000000001DD0                 jmp     short loc_1D74
.text:0000000000001DD2 ; ---------------------------------------------------------------------------
.text:0000000000001DD2
.text:0000000000001DD2 loc_1DD2:                               ; CODE XREF: main+180↑j
.text:0000000000001DD2                 lea     rcx, __PRETTY_FUNCTION___6928 ; "search_item"
.text:0000000000001DD9                 lea     rsi, file       ; "../coreutils-8.31/src/tsort.c"
.text:0000000000001DE0                 lea     rdi, aRoot      ; "root"
.text:0000000000001DE7                 mov     edx, 84h        ; line
.text:0000000000001DEC                 call    ___assert_fail
.text:0000000000001DF1 ; ---------------------------------------------------------------------------
.text:0000000000001DF1
.text:0000000000001DF1 loc_1DF1:                               ; CODE XREF: main+4A6↑j
.text:0000000000001DF1                 call    ___stack_chk_fail
.text:0000000000001DF6 ; ---------------------------------------------------------------------------
.text:0000000000001DF6
.text:0000000000001DF6 loc_1DF6:                               ; CODE XREF: main+B6↑j
.text:0000000000001DF6                 mov     rdi, [rbx+rax*8+8]
.text:0000000000001DFB                 call    quote
.text:0000000000001E00                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:0000000000001E07                 mov     rbx, rax
.text:0000000000001E0A                 mov     edx, 5          ; category
.text:0000000000001E0F                 xor     edi, edi        ; domainname
.text:0000000000001E11                 call    _dcgettext
.text:0000000000001E16                 xor     edi, edi        ; status
.text:0000000000001E18                 mov     rdx, rax        ; format
.text:0000000000001E1B                 mov     rcx, rbx
.text:0000000000001E1E                 xor     esi, esi        ; errnum
.text:0000000000001E20                 xor     eax, eax
.text:0000000000001E22                 call    _error
.text:0000000000001E27                 mov     edi, 1          ; status
.text:0000000000001E2C                 call    usage
.text:0000000000001E31 ; ---------------------------------------------------------------------------
.text:0000000000001E31
.text:0000000000001E31 loc_1E31:                               ; CODE XREF: main+172↑j
.text:0000000000001E31                 lea     rcx, __PRETTY_FUNCTION___6982 ; "tsort"
.text:0000000000001E38                 lea     rsi, file       ; "../coreutils-8.31/src/tsort.c"
.text:0000000000001E3F                 lea     rdi, aLen0      ; "len != 0"
.text:0000000000001E46                 mov     edx, 1CDh       ; line
.text:0000000000001E4B                 call    ___assert_fail
.text:0000000000001E4B ; } // starts at 16F0
.text:0000000000001E4B main            endp
.text:0000000000001E4B
.text:0000000000001E50
.text:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E50
.text:0000000000001E50 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001E50
.text:0000000000001E50 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001E50                 public start
.text:0000000000001E50 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001E50 ; __unwind {
.text:0000000000001E50                 xor     ebp, ebp
.text:0000000000001E52                 mov     r9, rdx         ; rtld_fini
.text:0000000000001E55                 pop     rsi             ; argc
.text:0000000000001E56                 mov     rdx, rsp        ; ubp_av
.text:0000000000001E59                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001E5D                 push    rax
.text:0000000000001E5E                 push    rsp             ; stack_end
.text:0000000000001E5F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001E66                 lea     rcx, __libc_csu_init ; init
.text:0000000000001E6D                 lea     rdi, main       ; main
.text:0000000000001E74                 call    cs:__libc_start_main_ptr
.text:0000000000001E7A                 hlt
.text:0000000000001E7A ; } // starts at 1E50
.text:0000000000001E7A start           endp
.text:0000000000001E7A
.text:0000000000001E7A ; ---------------------------------------------------------------------------
.text:0000000000001E7B                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001E80
.text:0000000000001E80 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1F33↓p
.text:0000000000001E80                 lea     rdi, __bss_start
.text:0000000000001E87                 push    rbp
.text:0000000000001E88                 lea     rax, __bss_start
.text:0000000000001E8F                 cmp     rax, rdi
.text:0000000000001E92                 mov     rbp, rsp
.text:0000000000001E95                 jz      short loc_1EB0
.text:0000000000001E97                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001E9E                 test    rax, rax
.text:0000000000001EA1                 jz      short loc_1EB0
.text:0000000000001EA3                 pop     rbp
.text:0000000000001EA4                 jmp     rax
.text:0000000000001EA4 ; ---------------------------------------------------------------------------
.text:0000000000001EA6                 align 10h
.text:0000000000001EB0
.text:0000000000001EB0 loc_1EB0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001EB0                                         ; deregister_tm_clones+21↑j
.text:0000000000001EB0                 pop     rbp
.text:0000000000001EB1                 retn
.text:0000000000001EB1 deregister_tm_clones endp
.text:0000000000001EB1
.text:0000000000001EB1 ; ---------------------------------------------------------------------------
.text:0000000000001EB2                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EC0
.text:0000000000001EC0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001EC0
.text:0000000000001EC0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001EC0                 lea     rdi, __bss_start
.text:0000000000001EC7                 lea     rsi, __bss_start
.text:0000000000001ECE                 push    rbp
.text:0000000000001ECF                 sub     rsi, rdi
.text:0000000000001ED2                 mov     rbp, rsp
.text:0000000000001ED5                 sar     rsi, 3
.text:0000000000001ED9                 mov     rax, rsi
.text:0000000000001EDC                 shr     rax, 3Fh
.text:0000000000001EE0                 add     rsi, rax
.text:0000000000001EE3                 sar     rsi, 1
.text:0000000000001EE6                 jz      short loc_1F00
.text:0000000000001EE8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001EEF                 test    rax, rax
.text:0000000000001EF2                 jz      short loc_1F00
.text:0000000000001EF4                 pop     rbp
.text:0000000000001EF5                 jmp     rax
.text:0000000000001EF5 ; ---------------------------------------------------------------------------
.text:0000000000001EF7                 align 20h
.text:0000000000001F00
.text:0000000000001F00 loc_1F00:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001F00                                         ; register_tm_clones+32↑j
.text:0000000000001F00                 pop     rbp
.text:0000000000001F01                 retn
.text:0000000000001F01 register_tm_clones endp
.text:0000000000001F01
.text:0000000000001F01 ; ---------------------------------------------------------------------------
.text:0000000000001F02                 align 10h
.text:0000000000001F10
.text:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F10
.text:0000000000001F10 ; Attributes: info_from_lumina
.text:0000000000001F10
.text:0000000000001F10 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001F10                 cmp     cs:completed_7697, 0
.text:0000000000001F17                 jnz     short locret_1F48
.text:0000000000001F19                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001F21                 push    rbp
.text:0000000000001F22                 mov     rbp, rsp
.text:0000000000001F25                 jz      short loc_1F33
.text:0000000000001F27                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001F2E                 call    __cxa_finalize
.text:0000000000001F33
.text:0000000000001F33 loc_1F33:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001F33                 call    deregister_tm_clones
.text:0000000000001F38                 mov     cs:completed_7697, 1
.text:0000000000001F3F                 pop     rbp
.text:0000000000001F40                 retn
.text:0000000000001F40 ; ---------------------------------------------------------------------------
.text:0000000000001F41                 align 8
.text:0000000000001F48
.text:0000000000001F48 locret_1F48:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001F48                 rep retn
.text:0000000000001F48 __do_global_dtors_aux endp
.text:0000000000001F48
.text:0000000000001F48 ; ---------------------------------------------------------------------------
.text:0000000000001F4A                 align 10h
.text:0000000000001F50
.text:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F50
.text:0000000000001F50 ; Attributes: bp-based frame
.text:0000000000001F50
.text:0000000000001F50 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001F50                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001F50                 push    rbp
.text:0000000000001F51                 mov     rbp, rsp
.text:0000000000001F54                 pop     rbp
.text:0000000000001F55                 jmp     register_tm_clones
.text:0000000000001F55 frame_dummy     endp
.text:0000000000001F55
.text:0000000000001F55 ; ---------------------------------------------------------------------------
.text:0000000000001F5A                 align 20h
.text:0000000000001F60
.text:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F60
.text:0000000000001F60
.text:0000000000001F60 count_items     proc near               ; DATA XREF: main+3B1↑o
.text:0000000000001F60 ; __unwind {
.text:0000000000001F60                 add     cs:n_strings, 1
.text:0000000000001F68                 xor     eax, eax
.text:0000000000001F6A                 retn
.text:0000000000001F6A ; } // starts at 1F60
.text:0000000000001F6A count_items     endp
.text:0000000000001F6A
.text:0000000000001F6A ; ---------------------------------------------------------------------------
.text:0000000000001F6B                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70
.text:0000000000001F70 recurse_tree    proc near               ; CODE XREF: main+3B8↑p
.text:0000000000001F70                                         ; main+3E4↑p ...
.text:0000000000001F70 ; __unwind {
.text:0000000000001F70                 push    rbp
.text:0000000000001F71                 push    rbx
.text:0000000000001F72                 mov     rbp, rsi
.text:0000000000001F75                 mov     rbx, rdi
.text:0000000000001F78                 sub     rsp, 8
.text:0000000000001F7C
.text:0000000000001F7C loc_1F7C:                               ; CODE XREF: recurse_tree+31↓j
.text:0000000000001F7C                 mov     rdi, [rbx+8]
.text:0000000000001F80                 test    rdi, rdi
.text:0000000000001F83                 jz      short loc_1FC0
.text:0000000000001F85                 mov     rsi, rbp
.text:0000000000001F88                 call    recurse_tree
.text:0000000000001F8D                 test    al, al
.text:0000000000001F8F                 jnz     short loc_1FB0
.text:0000000000001F91
.text:0000000000001F91 loc_1F91:                               ; CODE XREF: recurse_tree+55↓j
.text:0000000000001F91                 mov     rdi, rbx
.text:0000000000001F94                 call    rbp
.text:0000000000001F96                 test    al, al
.text:0000000000001F98                 jnz     short loc_1FB0
.text:0000000000001F9A                 mov     rbx, [rbx+10h]
.text:0000000000001F9E                 test    rbx, rbx
.text:0000000000001FA1                 jnz     short loc_1F7C
.text:0000000000001FA3                 add     rsp, 8
.text:0000000000001FA7                 pop     rbx
.text:0000000000001FA8                 pop     rbp
.text:0000000000001FA9                 retn
.text:0000000000001FA9 ; ---------------------------------------------------------------------------
.text:0000000000001FAA                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: recurse_tree+1F↑j
.text:0000000000001FB0                                         ; recurse_tree+28↑j
.text:0000000000001FB0                 add     rsp, 8
.text:0000000000001FB4                 mov     eax, 1
.text:0000000000001FB9                 pop     rbx
.text:0000000000001FBA                 pop     rbp
.text:0000000000001FBB                 retn
.text:0000000000001FBB ; ---------------------------------------------------------------------------
.text:0000000000001FBC                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: recurse_tree+13↑j
.text:0000000000001FC0                 cmp     qword ptr [rbx+10h], 0
.text:0000000000001FC5                 jnz     short loc_1F91
.text:0000000000001FC7                 add     rsp, 8
.text:0000000000001FCB                 mov     rdi, rbx
.text:0000000000001FCE                 mov     rax, rbp
.text:0000000000001FD1                 pop     rbx
.text:0000000000001FD2                 pop     rbp
.text:0000000000001FD3                 jmp     rax
.text:0000000000001FD3 ; } // starts at 1F70
.text:0000000000001FD3 recurse_tree    endp
.text:0000000000001FD3
.text:0000000000001FD3 ; ---------------------------------------------------------------------------
.text:0000000000001FD5                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FE0
.text:0000000000001FE0
.text:0000000000001FE0 ; __int64 __fastcall new_item(void *src)
.text:0000000000001FE0 new_item        proc near               ; CODE XREF: main+EE↑p
.text:0000000000001FE0                                         ; main+1EF↑p ...
.text:0000000000001FE0 ; __unwind {
.text:0000000000001FE0                 push    rbp
.text:0000000000001FE1                 push    rbx
.text:0000000000001FE2                 mov     rbp, rdi
.text:0000000000001FE5                 mov     edi, 38h ; '8'
.text:0000000000001FEA                 sub     rsp, 8
.text:0000000000001FEE                 call    xmalloc
.text:0000000000001FF3                 test    rbp, rbp
.text:0000000000001FF6                 mov     rbx, rax
.text:0000000000001FF9                 jz      short loc_2006
.text:0000000000001FFB                 mov     rdi, rbp        ; src
.text:0000000000001FFE                 call    xstrdup
.text:0000000000002003                 mov     rbp, rax
.text:0000000000002006
.text:0000000000002006 loc_2006:                               ; CODE XREF: new_item+19↑j
.text:0000000000002006                 mov     [rbx], rbp
.text:0000000000002009                 mov     qword ptr [rbx+10h], 0
.text:0000000000002011                 mov     rax, rbx
.text:0000000000002014                 mov     qword ptr [rbx+8], 0
.text:000000000000201C                 mov     dword ptr [rbx+18h], 0
.text:0000000000002023                 mov     qword ptr [rbx+20h], 0
.text:000000000000202B                 mov     qword ptr [rbx+28h], 0
.text:0000000000002033                 mov     qword ptr [rbx+30h], 0
.text:000000000000203B                 add     rsp, 8
.text:000000000000203F                 pop     rbx
.text:0000000000002040                 pop     rbp
.text:0000000000002041                 retn
.text:0000000000002041 ; } // starts at 1FE0
.text:0000000000002041 new_item        endp
.text:0000000000002041
.text:0000000000002041 ; ---------------------------------------------------------------------------
.text:0000000000002042                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050
.text:0000000000002050 scan_zeros      proc near               ; DATA XREF: main+3DD↑o
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 cmp     qword ptr [rdi+20h], 0
.text:0000000000002055                 jnz     short loc_2079
.text:0000000000002057                 cmp     qword ptr [rdi], 0
.text:000000000000205B                 jz      short loc_2079
.text:000000000000205D                 cmp     cs:head, 0
.text:0000000000002065                 jz      short loc_2080
.text:0000000000002067                 mov     rax, cs:zeros
.text:000000000000206E                 mov     [rax+28h], rdi
.text:0000000000002072
.text:0000000000002072 loc_2072:                               ; CODE XREF: scan_zeros+37↓j
.text:0000000000002072                 mov     cs:zeros, rdi
.text:0000000000002079
.text:0000000000002079 loc_2079:                               ; CODE XREF: scan_zeros+5↑j
.text:0000000000002079                                         ; scan_zeros+B↑j
.text:0000000000002079                 xor     eax, eax
.text:000000000000207B                 retn
.text:000000000000207B ; ---------------------------------------------------------------------------
.text:000000000000207C                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: scan_zeros+15↑j
.text:0000000000002080                 mov     cs:head, rdi
.text:0000000000002087                 jmp     short loc_2072
.text:0000000000002087 ; } // starts at 2050
.text:0000000000002087 scan_zeros      endp
.text:0000000000002087
.text:0000000000002087 ; ---------------------------------------------------------------------------
.text:0000000000002089                 align 10h
.text:0000000000002090
.text:0000000000002090 ; =============== S U B R O U T I N E =======================================
.text:0000000000002090
.text:0000000000002090
.text:0000000000002090 detect_loop     proc near               ; DATA XREF: main+519↑o
.text:0000000000002090 ; __unwind {
.text:0000000000002090                 xor     eax, eax
.text:0000000000002092                 cmp     qword ptr [rdi+20h], 0
.text:0000000000002097                 jz      short locret_20E8
.text:0000000000002099                 push    r13
.text:000000000000209B                 push    r12
.text:000000000000209D                 push    rbp
.text:000000000000209E                 push    rbx
.text:000000000000209F                 mov     rbx, rdi
.text:00000000000020A2                 sub     rsp, 8
.text:00000000000020A6                 mov     rdx, cs:loop
.text:00000000000020AD                 test    rdx, rdx
.text:00000000000020B0                 jz      short loc_20F0
.text:00000000000020B2                 mov     rcx, [rdi+30h]
.text:00000000000020B6                 test    rcx, rcx
.text:00000000000020B9                 jz      short loc_20D9
.text:00000000000020BB                 cmp     rdx, [rcx]
.text:00000000000020BE                 jnz     short loc_20D0
.text:00000000000020C0                 jmp     loc_21B8
.text:00000000000020C0 ; ---------------------------------------------------------------------------
.text:00000000000020C5                 align 8
.text:00000000000020C8
.text:00000000000020C8 loc_20C8:                               ; CODE XREF: detect_loop+47↓j
.text:00000000000020C8                 cmp     rdx, [rax]
.text:00000000000020CB                 jz      short loc_2108
.text:00000000000020CD                 mov     rcx, rax
.text:00000000000020D0
.text:00000000000020D0 loc_20D0:                               ; CODE XREF: detect_loop+2E↑j
.text:00000000000020D0                 mov     rax, [rcx+8]
.text:00000000000020D4                 test    rax, rax
.text:00000000000020D7                 jnz     short loc_20C8
.text:00000000000020D9
.text:00000000000020D9 loc_20D9:                               ; CODE XREF: detect_loop+29↑j
.text:00000000000020D9                                         ; detect_loop+11D↓j
.text:00000000000020D9                 add     rsp, 8
.text:00000000000020DD                 pop     rbx
.text:00000000000020DE                 pop     rbp
.text:00000000000020DF                 pop     r12
.text:00000000000020E1                 pop     r13
.text:00000000000020E3                 retn
.text:00000000000020E3 ; ---------------------------------------------------------------------------
.text:00000000000020E4                 align 8
.text:00000000000020E8
.text:00000000000020E8 locret_20E8:                            ; CODE XREF: detect_loop+7↑j
.text:00000000000020E8                 rep retn
.text:00000000000020E8 ; ---------------------------------------------------------------------------
.text:00000000000020EA                 align 10h
.text:00000000000020F0
.text:00000000000020F0 loc_20F0:                               ; CODE XREF: detect_loop+20↑j
.text:00000000000020F0                 mov     cs:loop, rdi
.text:00000000000020F7                 add     rsp, 8
.text:00000000000020FB                 pop     rbx
.text:00000000000020FC                 pop     rbp
.text:00000000000020FD                 pop     r12
.text:00000000000020FF                 pop     r13
.text:0000000000002101                 retn
.text:0000000000002101 ; ---------------------------------------------------------------------------
.text:0000000000002102                 align 8
.text:0000000000002108
.text:0000000000002108 loc_2108:                               ; CODE XREF: detect_loop+3B↑j
.text:0000000000002108                 lea     rbp, [rcx+8]
.text:000000000000210C
.text:000000000000210C loc_210C:                               ; CODE XREF: detect_loop+12C↓j
.text:000000000000210C                 cmp     qword ptr [rbx+28h], 0
.text:0000000000002111                 jz      loc_21A0
.text:0000000000002117                 lea     r13, format+4   ; "%s"
.text:000000000000211E                 jmp     short loc_2137
.text:0000000000002120 ; ---------------------------------------------------------------------------
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: detect_loop+C6↓j
.text:0000000000002120                 test    r12, r12
.text:0000000000002123                 mov     qword ptr [rax+28h], 0
.text:000000000000212B                 mov     cs:loop, r12
.text:0000000000002132                 mov     rdx, r12
.text:0000000000002135                 jz      short loc_218F
.text:0000000000002137
.text:0000000000002137 loc_2137:                               ; CODE XREF: detect_loop+8E↑j
.text:0000000000002137                 mov     rcx, [rdx]
.text:000000000000213A                 xor     eax, eax
.text:000000000000213C                 mov     r12, [rdx+28h]
.text:0000000000002140                 xor     esi, esi        ; errnum
.text:0000000000002142                 xor     edi, edi        ; status
.text:0000000000002144                 mov     rdx, r13        ; format
.text:0000000000002147                 call    _error
.text:000000000000214C                 mov     rax, cs:loop
.text:0000000000002153                 cmp     rbx, rax
.text:0000000000002156                 jnz     short loc_2120
.text:0000000000002158                 mov     rax, [rbp+0]
.text:000000000000215C                 mov     rdx, [rax]
.text:000000000000215F                 mov     rax, [rax+8]
.text:0000000000002163                 sub     qword ptr [rdx+20h], 1
.text:0000000000002168                 mov     [rbp+0], rax
.text:000000000000216C                 nop     dword ptr [rax+00h]
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: detect_loop+F2↓j
.text:0000000000002170                 mov     rax, [rbx+28h]
.text:0000000000002174                 mov     qword ptr [rbx+28h], 0
.text:000000000000217C                 test    rax, rax
.text:000000000000217F                 mov     rbx, rax
.text:0000000000002182                 jnz     short loc_2170
.text:0000000000002184                 mov     cs:loop, 0
.text:000000000000218F
.text:000000000000218F loc_218F:                               ; CODE XREF: detect_loop+A5↑j
.text:000000000000218F                 add     rsp, 8
.text:0000000000002193                 mov     eax, 1
.text:0000000000002198                 pop     rbx
.text:0000000000002199                 pop     rbp
.text:000000000000219A                 pop     r12
.text:000000000000219C                 pop     r13
.text:000000000000219E                 retn
.text:000000000000219E ; ---------------------------------------------------------------------------
.text:000000000000219F                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: detect_loop+81↑j
.text:00000000000021A0                 mov     [rbx+28h], rdx
.text:00000000000021A4                 mov     cs:loop, rbx
.text:00000000000021AB                 xor     eax, eax
.text:00000000000021AD                 jmp     loc_20D9
.text:00000000000021AD ; ---------------------------------------------------------------------------
.text:00000000000021B2                 align 8
.text:00000000000021B8
.text:00000000000021B8 loc_21B8:                               ; CODE XREF: detect_loop+30↑j
.text:00000000000021B8                 lea     rbp, [rdi+30h]
.text:00000000000021BC                 jmp     loc_210C
.text:00000000000021BC ; } // starts at 2090
.text:00000000000021BC detect_loop     endp
.text:00000000000021BC
.text:00000000000021BC ; ---------------------------------------------------------------------------
.text:00000000000021C1                 align 10h
.text:00000000000021D0
.text:00000000000021D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021D0
.text:00000000000021D0 ; Attributes: noreturn
.text:00000000000021D0
.text:00000000000021D0 ; void __fastcall __noreturn usage(int status)
.text:00000000000021D0                 public usage
.text:00000000000021D0 usage           proc near               ; CODE XREF: main+73C↑p
.text:00000000000021D0                                         ; DATA XREF: main+8A↑o
.text:00000000000021D0
.text:00000000000021D0 var_A8          = qword ptr -0A8h
.text:00000000000021D0 var_A0          = qword ptr -0A0h
.text:00000000000021D0 var_98          = qword ptr -98h
.text:00000000000021D0 var_90          = qword ptr -90h
.text:00000000000021D0 var_88          = qword ptr -88h
.text:00000000000021D0 var_80          = qword ptr -80h
.text:00000000000021D0 var_78          = qword ptr -78h
.text:00000000000021D0 var_70          = qword ptr -70h
.text:00000000000021D0 var_68          = qword ptr -68h
.text:00000000000021D0 var_60          = qword ptr -60h
.text:00000000000021D0 var_58          = qword ptr -58h
.text:00000000000021D0 var_50          = qword ptr -50h
.text:00000000000021D0 var_48          = qword ptr -48h
.text:00000000000021D0 var_40          = qword ptr -40h
.text:00000000000021D0 var_30          = qword ptr -30h
.text:00000000000021D0
.text:00000000000021D0 ; __unwind {
.text:00000000000021D0                 push    r13
.text:00000000000021D2                 push    r12
.text:00000000000021D4                 mov     edx, 5          ; category
.text:00000000000021D9                 push    rbp
.text:00000000000021DA                 push    rbx
.text:00000000000021DB                 mov     ebp, edi
.text:00000000000021DD                 sub     rsp, 88h
.text:00000000000021E4                 mov     rbx, cs:program_name
.text:00000000000021EB                 mov     rax, fs:28h
.text:00000000000021F4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000021F9                 xor     eax, eax
.text:00000000000021FB                 test    edi, edi
.text:00000000000021FD                 jz      short loc_222D
.text:00000000000021FF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002206                 xor     edi, edi        ; domainname
.text:0000000000002208                 call    _dcgettext
.text:000000000000220D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002214                 mov     rdx, rax
.text:0000000000002217                 mov     rcx, rbx
.text:000000000000221A                 mov     esi, 1
.text:000000000000221F                 xor     eax, eax
.text:0000000000002221                 call    ___fprintf_chk
.text:0000000000002226
.text:0000000000002226 loc_2226:                               ; CODE XREF: usage+2A6↓j
.text:0000000000002226                 mov     edi, ebp        ; status
.text:0000000000002228                 call    _exit
.text:000000000000222D ; ---------------------------------------------------------------------------
.text:000000000000222D
.text:000000000000222D loc_222D:                               ; CODE XREF: usage+2D↑j
.text:000000000000222D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION] [FILE]\nWrite totall"...
.text:0000000000002234                 xor     edi, edi        ; domainname
.text:0000000000002236                 call    _dcgettext
.text:000000000000223B                 mov     rdx, rbx
.text:000000000000223E                 mov     rsi, rax
.text:0000000000002241                 mov     edi, 1
.text:0000000000002246                 xor     eax, eax
.text:0000000000002248                 call    ___printf_chk
.text:000000000000224D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002254                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:000000000000225B                 mov     edx, 5          ; category
.text:0000000000002260                 xor     edi, edi        ; domainname
.text:0000000000002262                 call    _dcgettext
.text:0000000000002267                 mov     rsi, rbx        ; stream
.text:000000000000226A                 mov     rdi, rax        ; s
.text:000000000000226D                 call    _fputs_unlocked
.text:0000000000002272                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002279                 lea     rsi, asc_5924+2 ; msgid
.text:0000000000002280                 mov     edx, 5          ; category
.text:0000000000002285                 xor     edi, edi        ; domainname
.text:0000000000002287                 call    _dcgettext
.text:000000000000228C                 mov     rsi, rbx        ; stream
.text:000000000000228F                 mov     rdi, rax        ; s
.text:0000000000002292                 call    _fputs_unlocked
.text:0000000000002297                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000229E                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000022A5                 mov     edx, 5          ; category
.text:00000000000022AA                 xor     edi, edi        ; domainname
.text:00000000000022AC                 call    _dcgettext
.text:00000000000022B1                 mov     rsi, rbx        ; stream
.text:00000000000022B4                 mov     rdi, rax        ; s
.text:00000000000022B7                 call    _fputs_unlocked
.text:00000000000022BC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000022C3                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000022CA                 mov     edx, 5          ; category
.text:00000000000022CF                 xor     edi, edi        ; domainname
.text:00000000000022D1                 call    _dcgettext
.text:00000000000022D6                 mov     rsi, rbx        ; stream
.text:00000000000022D9                 mov     rdi, rax        ; s
.text:00000000000022DC                 lea     rbx, aTsort     ; "tsort"
.text:00000000000022E3                 call    _fputs_unlocked
.text:00000000000022E8                 lea     rax, asc_584A   ; "["
.text:00000000000022EF                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000022F6                 mov     [rsp+0A8h+var_48], 0
.text:00000000000022FF                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002308                 mov     rdx, rsp
.text:000000000000230B                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000230F                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002316                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000231B                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002322                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002327                 lea     rax, domainname ; "coreutils"
.text:000000000000232E                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002333                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000233A                 mov     [rsp+0A8h+var_98], rax
.text:000000000000233F                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000002346                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000234B                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002350                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000002357                 mov     [rsp+0A8h+var_88], rax
.text:000000000000235C                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000002363                 mov     [rsp+0A8h+var_80], rax
.text:0000000000002368                 mov     [rsp+0A8h+var_70], rax
.text:000000000000236D                 mov     [rsp+0A8h+var_60], rax
.text:0000000000002372                 mov     [rsp+0A8h+var_50], rax
.text:0000000000002377                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: usage+1CD↓j
.text:0000000000002380                 add     rdx, 10h
.text:0000000000002384                 mov     rdi, [rdx]
.text:0000000000002387                 test    rdi, rdi
.text:000000000000238A                 jz      short loc_239F
.text:000000000000238C                 mov     ecx, 6
.text:0000000000002391                 mov     rsi, rbx
.text:0000000000002394                 repe cmpsb
.text:0000000000002396                 setnbe  al
.text:0000000000002399                 sbb     al, 0
.text:000000000000239B                 test    al, al
.text:000000000000239D                 jnz     short loc_2380
.text:000000000000239F
.text:000000000000239F loc_239F:                               ; CODE XREF: usage+1BA↑j
.text:000000000000239F                 mov     r12, [rdx+8]
.text:00000000000023A3                 xor     edi, edi        ; domainname
.text:00000000000023A5                 mov     edx, 5          ; category
.text:00000000000023AA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000023B1                 test    r12, r12
.text:00000000000023B4                 jz      loc_247B
.text:00000000000023BA                 call    _dcgettext
.text:00000000000023BF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000023C6                 lea     rdx, unk_58C0
.text:00000000000023CD                 mov     rsi, rax
.text:00000000000023D0                 mov     edi, 1
.text:00000000000023D5                 xor     eax, eax
.text:00000000000023D7                 call    ___printf_chk
.text:00000000000023DC                 xor     esi, esi        ; locale
.text:00000000000023DE                 mov     edi, 5          ; category
.text:00000000000023E3                 call    _setlocale
.text:00000000000023E8                 test    rax, rax
.text:00000000000023EB                 jz      short loc_2409
.text:00000000000023ED                 lea     rsi, s2         ; "en_"
.text:00000000000023F4                 mov     edx, 3          ; n
.text:00000000000023F9                 mov     rdi, rax        ; s1
.text:00000000000023FC                 call    _strncmp
.text:0000000000002401                 test    eax, eax
.text:0000000000002403                 jnz     loc_2510
.text:0000000000002409
.text:0000000000002409 loc_2409:                               ; CODE XREF: usage+21B↑j
.text:0000000000002409                                         ; usage+365↓j
.text:0000000000002409                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002410                 xor     edi, edi        ; domainname
.text:0000000000002412                 mov     edx, 5          ; category
.text:0000000000002417                 call    _dcgettext
.text:000000000000241C                 lea     rcx, aTsort     ; "tsort"
.text:0000000000002423                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000242A                 mov     rsi, rax
.text:000000000000242D                 mov     edi, 1
.text:0000000000002432                 xor     eax, eax
.text:0000000000002434                 call    ___printf_chk
.text:0000000000002439                 cmp     r12, rbx
.text:000000000000243C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002443                 lea     rbx, asc_5924+3 ; ""
.text:000000000000244A                 cmovz   rbx, rcx
.text:000000000000244E
.text:000000000000244E loc_244E:                               ; CODE XREF: usage+334↓j
.text:000000000000244E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002455                 xor     edi, edi        ; domainname
.text:0000000000002457                 mov     edx, 5          ; category
.text:000000000000245C                 call    _dcgettext
.text:0000000000002461                 mov     rcx, rbx
.text:0000000000002464                 mov     rsi, rax
.text:0000000000002467                 mov     rdx, r12
.text:000000000000246A                 mov     edi, 1
.text:000000000000246F                 xor     eax, eax
.text:0000000000002471                 call    ___printf_chk
.text:0000000000002476                 jmp     loc_2226
.text:000000000000247B ; ---------------------------------------------------------------------------
.text:000000000000247B
.text:000000000000247B loc_247B:                               ; CODE XREF: usage+1E4↑j
.text:000000000000247B                 call    _dcgettext
.text:0000000000002480                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002487                 lea     rdx, unk_58C0
.text:000000000000248E                 mov     rsi, rax
.text:0000000000002491                 mov     edi, 1
.text:0000000000002496                 xor     eax, eax
.text:0000000000002498                 call    ___printf_chk
.text:000000000000249D                 xor     esi, esi        ; locale
.text:000000000000249F                 mov     edi, 5          ; category
.text:00000000000024A4                 call    _setlocale
.text:00000000000024A9                 test    rax, rax
.text:00000000000024AC                 jz      short loc_24C6
.text:00000000000024AE                 lea     rsi, s2         ; "en_"
.text:00000000000024B5                 mov     edx, 3          ; n
.text:00000000000024BA                 mov     rdi, rax        ; s1
.text:00000000000024BD                 call    _strncmp
.text:00000000000024C2                 test    eax, eax
.text:00000000000024C4                 jnz     short loc_2509
.text:00000000000024C6
.text:00000000000024C6 loc_24C6:                               ; CODE XREF: usage+2DC↑j
.text:00000000000024C6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000024CD                 mov     edx, 5          ; category
.text:00000000000024D2                 xor     edi, edi        ; domainname
.text:00000000000024D4                 lea     r12, aTsort     ; "tsort"
.text:00000000000024DB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000024E2                 call    _dcgettext
.text:00000000000024E7                 lea     rcx, aTsort     ; "tsort"
.text:00000000000024EE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000024F5                 mov     rsi, rax
.text:00000000000024F8                 mov     edi, 1
.text:00000000000024FD                 xor     eax, eax
.text:00000000000024FF                 call    ___printf_chk
.text:0000000000002504                 jmp     loc_244E
.text:0000000000002509 ; ---------------------------------------------------------------------------
.text:0000000000002509
.text:0000000000002509 loc_2509:                               ; CODE XREF: usage+2F4↑j
.text:0000000000002509                 lea     r12, aTsort     ; "tsort"
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: usage+233↑j
.text:0000000000002510                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002517                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000251E                 xor     edi, edi        ; domainname
.text:0000000000002520                 mov     edx, 5          ; category
.text:0000000000002525                 call    _dcgettext
.text:000000000000252A                 mov     rsi, r13        ; stream
.text:000000000000252D                 mov     rdi, rax        ; s
.text:0000000000002530                 call    _fputs_unlocked
.text:0000000000002535                 jmp     loc_2409
.text:0000000000002535 ; } // starts at 21D0
.text:0000000000002535 usage           endp
.text:0000000000002535
.text:0000000000002535 ; ---------------------------------------------------------------------------
.text:000000000000253A                 align 20h
.text:0000000000002540
.text:0000000000002540 ; =============== S U B R O U T I N E =======================================
.text:0000000000002540
.text:0000000000002540
.text:0000000000002540                 public close_stdout_set_file_name
.text:0000000000002540 close_stdout_set_file_name proc near
.text:0000000000002540 ; __unwind {
.text:0000000000002540                 mov     cs:file_name, rdi
.text:0000000000002547                 retn
.text:0000000000002547 ; } // starts at 2540
.text:0000000000002547 close_stdout_set_file_name endp
.text:0000000000002547
.text:0000000000002547 ; ---------------------------------------------------------------------------
.text:0000000000002548                 align 10h
.text:0000000000002550
.text:0000000000002550 ; =============== S U B R O U T I N E =======================================
.text:0000000000002550
.text:0000000000002550
.text:0000000000002550                 public close_stdout_set_ignore_EPIPE
.text:0000000000002550 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002550 ; __unwind {
.text:0000000000002550                 mov     cs:ignore_EPIPE, dil
.text:0000000000002557                 retn
.text:0000000000002557 ; } // starts at 2550
.text:0000000000002557 close_stdout_set_ignore_EPIPE endp
.text:0000000000002557
.text:0000000000002557 ; ---------------------------------------------------------------------------
.text:0000000000002558                 align 20h
.text:0000000000002560
.text:0000000000002560 ; =============== S U B R O U T I N E =======================================
.text:0000000000002560
.text:0000000000002560 ; Attributes: info_from_lumina
.text:0000000000002560
.text:0000000000002560 ; void __cdecl close_stdout()
.text:0000000000002560                 public close_stdout
.text:0000000000002560 close_stdout    proc near               ; DATA XREF: main+5B↑o
.text:0000000000002560 ; __unwind {
.text:0000000000002560                 push    rbp
.text:0000000000002561                 push    rbx
.text:0000000000002562                 sub     rsp, 8
.text:0000000000002566                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000256D                 call    close_stream
.text:0000000000002572                 test    eax, eax
.text:0000000000002574                 jz      short loc_258C
.text:0000000000002576                 call    ___errno_location
.text:000000000000257B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002582                 mov     rbx, rax
.text:0000000000002585                 jz      short loc_25A3
.text:0000000000002587                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000258A                 jnz     short loc_25A3
.text:000000000000258C
.text:000000000000258C loc_258C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000258C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002593                 call    close_stream
.text:0000000000002598                 test    eax, eax
.text:000000000000259A                 jnz     short loc_25E2
.text:000000000000259C                 add     rsp, 8
.text:00000000000025A0                 pop     rbx
.text:00000000000025A1                 pop     rbp
.text:00000000000025A2                 retn
.text:00000000000025A3 ; ---------------------------------------------------------------------------
.text:00000000000025A3
.text:00000000000025A3 loc_25A3:                               ; CODE XREF: close_stdout+25↑j
.text:00000000000025A3                                         ; close_stdout+2A↑j
.text:00000000000025A3                 lea     rsi, aWriteError ; "write error"
.text:00000000000025AA                 xor     edi, edi        ; domainname
.text:00000000000025AC                 mov     edx, 5          ; category
.text:00000000000025B1                 call    _dcgettext
.text:00000000000025B6                 mov     rdi, cs:file_name
.text:00000000000025BD                 mov     rbp, rax
.text:00000000000025C0                 test    rdi, rdi
.text:00000000000025C3                 jz      short loc_25ED
.text:00000000000025C5                 call    quotearg_colon
.text:00000000000025CA                 mov     esi, [rbx]      ; errnum
.text:00000000000025CC                 lea     rdx, format     ; "%s: %s"
.text:00000000000025D3                 mov     rcx, rax
.text:00000000000025D6                 mov     r8, rbp
.text:00000000000025D9                 xor     edi, edi        ; status
.text:00000000000025DB                 xor     eax, eax
.text:00000000000025DD                 call    _error
.text:00000000000025E2
.text:00000000000025E2 loc_25E2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000025E2                                         ; close_stdout+A2↓j
.text:00000000000025E2                 mov     edi, cs:exit_failure ; status
.text:00000000000025E8                 call    __exit
.text:00000000000025ED ; ---------------------------------------------------------------------------
.text:00000000000025ED
.text:00000000000025ED loc_25ED:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000025ED                 mov     esi, [rbx]      ; errnum
.text:00000000000025EF                 lea     rdx, format+4   ; format
.text:00000000000025F6                 mov     rcx, rax
.text:00000000000025F9                 xor     edi, edi        ; status
.text:00000000000025FB                 xor     eax, eax
.text:00000000000025FD                 call    _error
.text:0000000000002602                 jmp     short loc_25E2
.text:0000000000002602 ; } // starts at 2560
.text:0000000000002602 close_stdout    endp
.text:0000000000002602
.text:0000000000002602 ; ---------------------------------------------------------------------------
.text:0000000000002604                 align 10h
.text:0000000000002610
.text:0000000000002610 ; =============== S U B R O U T I N E =======================================
.text:0000000000002610
.text:0000000000002610
.text:0000000000002610 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000002610                 public fdadvise
.text:0000000000002610 fdadvise        proc near
.text:0000000000002610 ; __unwind {
.text:0000000000002610                 jmp     _posix_fadvise
.text:0000000000002610 ; } // starts at 2610
.text:0000000000002610 fdadvise        endp
.text:0000000000002610
.text:0000000000002610 ; ---------------------------------------------------------------------------
.text:0000000000002615                 align 20h
.text:0000000000002620
.text:0000000000002620 ; =============== S U B R O U T I N E =======================================
.text:0000000000002620
.text:0000000000002620
.text:0000000000002620                 public fadvise
.text:0000000000002620 fadvise         proc near               ; CODE XREF: main+125↑p
.text:0000000000002620 ; __unwind {
.text:0000000000002620                 test    rdi, rdi
.text:0000000000002623                 jz      short locret_2640
.text:0000000000002625                 push    rbx
.text:0000000000002626                 mov     ebx, esi
.text:0000000000002628                 call    _fileno
.text:000000000000262D                 mov     ecx, ebx        ; advise
.text:000000000000262F                 xor     edx, edx        ; len
.text:0000000000002631                 xor     esi, esi        ; offset
.text:0000000000002633                 pop     rbx
.text:0000000000002634                 mov     edi, eax        ; fd
.text:0000000000002636                 jmp     _posix_fadvise
.text:0000000000002636 ; ---------------------------------------------------------------------------
.text:000000000000263B                 align 20h
.text:0000000000002640
.text:0000000000002640 locret_2640:                            ; CODE XREF: fadvise+3↑j
.text:0000000000002640                 rep retn
.text:0000000000002640 ; } // starts at 2620
.text:0000000000002640 fadvise         endp
.text:0000000000002640
.text:0000000000002640 ; ---------------------------------------------------------------------------
.text:0000000000002642                 align 10h
.text:0000000000002650
.text:0000000000002650 ; =============== S U B R O U T I N E =======================================
.text:0000000000002650
.text:0000000000002650
.text:0000000000002650 protect_fd      proc near               ; CODE XREF: freopen_safer+83↓p
.text:0000000000002650                                         ; freopen_safer+A1↓p ...
.text:0000000000002650 ; __unwind {
.text:0000000000002650                 push    rbp
.text:0000000000002651                 push    rbx
.text:0000000000002652                 mov     ebp, edi
.text:0000000000002654                 lea     rdi, aDevNull   ; "/dev/null"
.text:000000000000265B                 xor     esi, esi        ; oflag
.text:000000000000265D                 xor     eax, eax
.text:000000000000265F                 sub     rsp, 8
.text:0000000000002663                 mov     ebx, 1
.text:0000000000002668                 call    _open
.text:000000000000266D                 cmp     ebp, eax
.text:000000000000266F                 jz      short loc_2689
.text:0000000000002671                 xor     ebx, ebx
.text:0000000000002673                 test    eax, eax
.text:0000000000002675                 js      short loc_2689
.text:0000000000002677                 mov     edi, eax        ; fd
.text:0000000000002679                 call    _close
.text:000000000000267E                 call    ___errno_location
.text:0000000000002683                 mov     dword ptr [rax], 9
.text:0000000000002689
.text:0000000000002689 loc_2689:                               ; CODE XREF: protect_fd+1F↑j
.text:0000000000002689                                         ; protect_fd+25↑j
.text:0000000000002689                 add     rsp, 8
.text:000000000000268D                 mov     eax, ebx
.text:000000000000268F                 pop     rbx
.text:0000000000002690                 pop     rbp
.text:0000000000002691                 retn
.text:0000000000002691 ; } // starts at 2650
.text:0000000000002691 protect_fd      endp
.text:0000000000002691
.text:0000000000002691 ; ---------------------------------------------------------------------------
.text:0000000000002692                 align 20h
.text:00000000000026A0
.text:00000000000026A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000026A0
.text:00000000000026A0
.text:00000000000026A0                 public freopen_safer
.text:00000000000026A0 freopen_safer   proc near               ; CODE XREF: main+10B↑p
.text:00000000000026A0
.text:00000000000026A0 filename        = qword ptr -40h
.text:00000000000026A0
.text:00000000000026A0 ; __unwind {
.text:00000000000026A0                 push    r15
.text:00000000000026A2                 push    r14
.text:00000000000026A4                 mov     r15, rsi
.text:00000000000026A7                 push    r13
.text:00000000000026A9                 push    r12
.text:00000000000026AB                 mov     r12, rdx
.text:00000000000026AE                 push    rbp
.text:00000000000026AF                 push    rbx
.text:00000000000026B0                 sub     rsp, 18h
.text:00000000000026B4                 mov     [rsp+48h+filename], rdi
.text:00000000000026B9                 mov     rdi, rdx        ; stream
.text:00000000000026BC                 call    _fileno
.text:00000000000026C1                 mov     ebx, eax
.text:00000000000026C3                 call    ___errno_location
.text:00000000000026C8                 cmp     ebx, 1
.text:00000000000026CB                 mov     r14, rax
.text:00000000000026CE                 jz      loc_2830
.text:00000000000026D4                 cmp     ebx, 2
.text:00000000000026D7                 jz      loc_2820
.text:00000000000026DD                 test    ebx, ebx
.text:00000000000026DF                 jz      loc_2798
.text:00000000000026E5                 mov     esi, 2          ; fd2
.text:00000000000026EA                 mov     edi, 2          ; fd
.text:00000000000026EF                 call    _dup2
.text:00000000000026F4                 cmp     eax, 2
.text:00000000000026F7                 setnz   bl
.text:00000000000026FA
.text:00000000000026FA loc_26FA:                               ; CODE XREF: freopen_safer+182↓j
.text:00000000000026FA                 mov     esi, 1          ; fd2
.text:00000000000026FF                 mov     edi, 1          ; fd
.text:0000000000002704                 call    _dup2
.text:0000000000002709                 cmp     eax, 1
.text:000000000000270C                 setnz   bpl
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: freopen_safer+194↓j
.text:0000000000002710                 xor     esi, esi        ; fd2
.text:0000000000002712                 xor     edi, edi        ; fd
.text:0000000000002714                 call    _dup2
.text:0000000000002719                 test    eax, eax
.text:000000000000271B                 jz      loc_27A8
.text:0000000000002721                 xor     edi, edi
.text:0000000000002723                 call    protect_fd
.text:0000000000002728                 test    al, al
.text:000000000000272A                 mov     r13d, eax
.text:000000000000272D                 jz      loc_2840
.text:0000000000002733                 test    bpl, bpl
.text:0000000000002736                 jnz     short loc_27B0
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: freopen_safer+10E↓j
.text:0000000000002738                                         ; freopen_safer+11E↓j
.text:0000000000002738                 test    bl, bl
.text:000000000000273A                 jz      short loc_2750
.text:000000000000273C                 mov     edi, 2
.text:0000000000002741                 call    protect_fd
.text:0000000000002746                 test    al, al
.text:0000000000002748                 mov     ebx, eax
.text:000000000000274A                 jz      loc_2800
.text:0000000000002750
.text:0000000000002750 loc_2750:                               ; CODE XREF: freopen_safer+9A↑j
.text:0000000000002750                                         ; freopen_safer+FF↓j
.text:0000000000002750                 mov     rdi, [rsp+48h+filename] ; filename
.text:0000000000002755                 mov     rdx, r12        ; stream
.text:0000000000002758                 mov     rsi, r15        ; modes
.text:000000000000275B                 call    _freopen
.text:0000000000002760                 mov     r12, rax
.text:0000000000002763
.text:0000000000002763 loc_2763:                               ; CODE XREF: freopen_safer+1A9↓j
.text:0000000000002763                 test    bl, bl
.text:0000000000002765                 mov     r15d, [r14]
.text:0000000000002768                 jnz     loc_2810
.text:000000000000276E
.text:000000000000276E loc_276E:                               ; CODE XREF: freopen_safer+17A↓j
.text:000000000000276E                 test    bpl, bpl
.text:0000000000002771                 jnz     short loc_27E0
.text:0000000000002773                 test    r13b, r13b
.text:0000000000002776                 jnz     short loc_27EF
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: freopen_safer+14D↓j
.text:0000000000002778                                         ; freopen_safer+156↓j
.text:0000000000002778                 test    r12, r12
.text:000000000000277B                 jnz     short loc_2780
.text:000000000000277D                 mov     [r14], r15d
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: freopen_safer+DB↑j
.text:0000000000002780                 add     rsp, 18h
.text:0000000000002784                 mov     rax, r12
.text:0000000000002787                 pop     rbx
.text:0000000000002788                 pop     rbp
.text:0000000000002789                 pop     r12
.text:000000000000278B                 pop     r13
.text:000000000000278D                 pop     r14
.text:000000000000278F                 pop     r15
.text:0000000000002791                 retn
.text:0000000000002791 ; ---------------------------------------------------------------------------
.text:0000000000002792                 align 8
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: freopen_safer+3F↑j
.text:0000000000002798                 xor     ebx, ebx
.text:000000000000279A                 xor     ebp, ebp
.text:000000000000279C                 xor     r13d, r13d
.text:000000000000279F                 jmp     short loc_2750
.text:000000000000279F ; ---------------------------------------------------------------------------
.text:00000000000027A1                 align 8
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: freopen_safer+7B↑j
.text:00000000000027A8                 xor     r13d, r13d
.text:00000000000027AB                 test    bpl, bpl
.text:00000000000027AE                 jz      short loc_2738
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: freopen_safer+96↑j
.text:00000000000027B0                 mov     edi, 1
.text:00000000000027B5                 call    protect_fd
.text:00000000000027BA                 test    al, al
.text:00000000000027BC                 mov     ebp, eax
.text:00000000000027BE                 jnz     loc_2738
.text:00000000000027C4                 xor     r12d, r12d
.text:00000000000027C7                 test    bl, bl
.text:00000000000027C9                 mov     r15d, [r14]
.text:00000000000027CC                 jz      short loc_27E0
.text:00000000000027CE                 mov     edi, 2          ; fd
.text:00000000000027D3                 call    _close
.text:00000000000027D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: freopen_safer+D1↑j
.text:00000000000027E0                                         ; freopen_safer+12C↑j
.text:00000000000027E0                 mov     edi, 1          ; fd
.text:00000000000027E5                 call    _close
.text:00000000000027EA                 test    r13b, r13b
.text:00000000000027ED                 jz      short loc_2778
.text:00000000000027EF
.text:00000000000027EF loc_27EF:                               ; CODE XREF: freopen_safer+D6↑j
.text:00000000000027EF                 xor     edi, edi        ; fd
.text:00000000000027F1                 call    _close
.text:00000000000027F6                 jmp     short loc_2778
.text:00000000000027F6 ; ---------------------------------------------------------------------------
.text:00000000000027F8                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: freopen_safer+AA↑j
.text:0000000000002800                 mov     r15d, [r14]
.text:0000000000002803                 xor     r12d, r12d
.text:0000000000002806                 db      2Eh
.text:0000000000002806                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: freopen_safer+C8↑j
.text:0000000000002810                 mov     edi, 2          ; fd
.text:0000000000002815                 call    _close
.text:000000000000281A                 jmp     loc_276E
.text:000000000000281A ; ---------------------------------------------------------------------------
.text:000000000000281F                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: freopen_safer+37↑j
.text:0000000000002820                 xor     ebx, ebx
.text:0000000000002822                 jmp     loc_26FA
.text:0000000000002822 ; ---------------------------------------------------------------------------
.text:0000000000002827                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: freopen_safer+2E↑j
.text:0000000000002830                 xor     ebx, ebx
.text:0000000000002832                 xor     ebp, ebp
.text:0000000000002834                 jmp     loc_2710
.text:0000000000002834 ; ---------------------------------------------------------------------------
.text:0000000000002839                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: freopen_safer+8D↑j
.text:0000000000002840                 mov     r13d, 1
.text:0000000000002846                 xor     r12d, r12d
.text:0000000000002849                 jmp     loc_2763
.text:0000000000002849 ; } // starts at 26A0
.text:0000000000002849 freopen_safer   endp
.text:0000000000002849
.text:0000000000002849 ; ---------------------------------------------------------------------------
.text:000000000000284E                 align 10h
.text:0000000000002850
.text:0000000000002850 ; =============== S U B R O U T I N E =======================================
.text:0000000000002850
.text:0000000000002850
.text:0000000000002850                 public parse_long_options
.text:0000000000002850 parse_long_options proc near
.text:0000000000002850
.text:0000000000002850 var_100         = qword ptr -100h
.text:0000000000002850 var_F8          = dword ptr -0F8h
.text:0000000000002850 var_F4          = dword ptr -0F4h
.text:0000000000002850 var_F0          = qword ptr -0F0h
.text:0000000000002850 var_E8          = qword ptr -0E8h
.text:0000000000002850 var_E0          = qword ptr -0E0h
.text:0000000000002850 var_D8          = byte ptr -0D8h
.text:0000000000002850 var_A8          = xmmword ptr -0A8h
.text:0000000000002850 var_98          = xmmword ptr -98h
.text:0000000000002850 var_88          = xmmword ptr -88h
.text:0000000000002850 var_78          = xmmword ptr -78h
.text:0000000000002850 var_68          = xmmword ptr -68h
.text:0000000000002850 var_58          = xmmword ptr -58h
.text:0000000000002850 var_48          = xmmword ptr -48h
.text:0000000000002850 var_38          = xmmword ptr -38h
.text:0000000000002850 arg_0           = byte ptr  8
.text:0000000000002850
.text:0000000000002850 ; __unwind {
.text:0000000000002850                 push    r13
.text:0000000000002852                 push    r12
.text:0000000000002854                 mov     r13, r8
.text:0000000000002857                 push    rbp
.text:0000000000002858                 push    rbx
.text:0000000000002859                 mov     rbp, rdx
.text:000000000000285C                 mov     r12, rcx
.text:000000000000285F                 sub     rsp, 0E8h
.text:0000000000002866                 test    al, al
.text:0000000000002868                 jz      short loc_28A4
.text:000000000000286A                 movaps  [rsp+108h+var_A8], xmm0
.text:000000000000286F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000002874                 movaps  [rsp+108h+var_88], xmm2
.text:000000000000287C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000002884                 movaps  [rsp+108h+var_68], xmm4
.text:000000000000288C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000002894                 movaps  [rsp+108h+var_48], xmm6
.text:000000000000289C                 movaps  [rsp+108h+var_38], xmm7
.text:00000000000028A4
.text:00000000000028A4 loc_28A4:                               ; CODE XREF: parse_long_options+18↑j
.text:00000000000028A4                 mov     rax, fs:28h
.text:00000000000028AD                 mov     [rsp+108h+var_E0], rax
.text:00000000000028B2                 xor     eax, eax
.text:00000000000028B4                 cmp     edi, 2
.text:00000000000028B7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:00000000000028BD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:00000000000028C7                 jz      short loc_2900
.text:00000000000028C9
.text:00000000000028C9 loc_28C9:                               ; CODE XREF: parse_long_options+CE↓j
.text:00000000000028C9                                         ; parse_long_options+DD↓j ...
.text:00000000000028C9                 mov     rax, [rsp+108h+var_E0]
.text:00000000000028CE                 xor     rax, fs:28h
.text:00000000000028D7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:00000000000028DD                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:00000000000028E7                 jnz     loc_298A
.text:00000000000028ED                 add     rsp, 0E8h
.text:00000000000028F4                 pop     rbx
.text:00000000000028F5                 pop     rbp
.text:00000000000028F6                 pop     r12
.text:00000000000028F8                 pop     r13
.text:00000000000028FA                 retn
.text:00000000000028FA ; ---------------------------------------------------------------------------
.text:00000000000028FB                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000002900                 lea     rcx, long_options ; longopts
.text:0000000000002907                 lea     rdx, shortopts  ; "+"
.text:000000000000290E                 xor     r8d, r8d        ; longind
.text:0000000000002911                 mov     [rsp+108h+var_100], r9
.text:0000000000002916                 call    _getopt_long
.text:000000000000291B                 cmp     eax, 0FFFFFFFFh
.text:000000000000291E                 jz      short loc_28C9
.text:0000000000002920                 cmp     eax, 68h ; 'h'
.text:0000000000002923                 mov     r9, [rsp+108h+var_100]
.text:0000000000002928                 jz      short loc_2980
.text:000000000000292A                 cmp     eax, 76h ; 'v'
.text:000000000000292D                 jnz     short loc_28C9
.text:000000000000292F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000002937                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000293E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000002943                 mov     rcx, r13
.text:0000000000002946                 mov     rdx, r12
.text:0000000000002949                 mov     rsi, rbp
.text:000000000000294C                 mov     [rsp+108h+var_F0], rax
.text:0000000000002951                 lea     rax, [rsp+108h+var_D8]
.text:0000000000002956                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:000000000000295E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000002966                 mov     [rsp+108h+var_E8], rax
.text:000000000000296B                 call    version_etc_va
.text:0000000000002970                 xor     edi, edi        ; status
.text:0000000000002972                 call    _exit
.text:0000000000002972 ; ---------------------------------------------------------------------------
.text:0000000000002977                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000002980                 xor     edi, edi
.text:0000000000002982                 call    r9
.text:0000000000002985                 jmp     loc_28C9
.text:000000000000298A ; ---------------------------------------------------------------------------
.text:000000000000298A
.text:000000000000298A loc_298A:                               ; CODE XREF: parse_long_options+97↑j
.text:000000000000298A                 call    ___stack_chk_fail
.text:000000000000298A ; } // starts at 2850
.text:000000000000298A parse_long_options endp
.text:000000000000298A
.text:000000000000298A ; ---------------------------------------------------------------------------
.text:000000000000298F                 align 10h
.text:0000000000002990
.text:0000000000002990 ; =============== S U B R O U T I N E =======================================
.text:0000000000002990
.text:0000000000002990
.text:0000000000002990                 public parse_gnu_standard_options_only
.text:0000000000002990 parse_gnu_standard_options_only proc near
.text:0000000000002990                                         ; CODE XREF: main+9F↑p
.text:0000000000002990
.text:0000000000002990 var_F8          = dword ptr -0F8h
.text:0000000000002990 var_F4          = dword ptr -0F4h
.text:0000000000002990 var_F0          = qword ptr -0F0h
.text:0000000000002990 var_E8          = qword ptr -0E8h
.text:0000000000002990 var_E0          = qword ptr -0E0h
.text:0000000000002990 var_D8          = byte ptr -0D8h
.text:0000000000002990 var_A8          = xmmword ptr -0A8h
.text:0000000000002990 var_98          = xmmword ptr -98h
.text:0000000000002990 var_88          = xmmword ptr -88h
.text:0000000000002990 var_78          = xmmword ptr -78h
.text:0000000000002990 var_68          = xmmword ptr -68h
.text:0000000000002990 var_58          = xmmword ptr -58h
.text:0000000000002990 var_48          = xmmword ptr -48h
.text:0000000000002990 var_38          = xmmword ptr -38h
.text:0000000000002990 arg_0           = qword ptr  8
.text:0000000000002990 arg_8           = byte ptr  10h
.text:0000000000002990
.text:0000000000002990 ; __unwind {
.text:0000000000002990                 push    r14
.text:0000000000002992                 push    r13
.text:0000000000002994                 mov     r14, r8
.text:0000000000002997                 push    r12
.text:0000000000002999                 push    rbp
.text:000000000000299A                 mov     r12, rdx
.text:000000000000299D                 push    rbx
.text:000000000000299E                 mov     r13, rcx
.text:00000000000029A1                 sub     rsp, 0D0h
.text:00000000000029A8                 test    al, al
.text:00000000000029AA                 mov     rbp, [rsp+0F8h+arg_0]
.text:00000000000029B2                 jz      short loc_29EB
.text:00000000000029B4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:00000000000029B9                 movaps  [rsp+0F8h+var_98], xmm1
.text:00000000000029BE                 movaps  [rsp+0F8h+var_88], xmm2
.text:00000000000029C3                 movaps  [rsp+0F8h+var_78], xmm3
.text:00000000000029CB                 movaps  [rsp+0F8h+var_68], xmm4
.text:00000000000029D3                 movaps  [rsp+0F8h+var_58], xmm5
.text:00000000000029DB                 movaps  [rsp+0F8h+var_48], xmm6
.text:00000000000029E3                 movaps  [rsp+0F8h+var_38], xmm7
.text:00000000000029EB
.text:00000000000029EB loc_29EB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:00000000000029EB                 mov     rax, fs:28h
.text:00000000000029F4                 mov     [rsp+0F8h+var_E0], rax
.text:00000000000029F9                 xor     eax, eax
.text:00000000000029FB                 lea     rdx, asc_5924+3 ; ""
.text:0000000000002A02                 lea     rax, shortopts  ; "+"
.text:0000000000002A09                 test    r9b, r9b
.text:0000000000002A0C                 lea     rcx, long_options ; longopts
.text:0000000000002A13                 cmovz   rdx, rax        ; shortopts
.text:0000000000002A17                 xor     r8d, r8d        ; longind
.text:0000000000002A1A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000002A20                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000002A2A                 call    _getopt_long
.text:0000000000002A2F                 cmp     eax, 0FFFFFFFFh
.text:0000000000002A32                 jz      short loc_2A98
.text:0000000000002A34                 cmp     eax, 68h ; 'h'
.text:0000000000002A37                 jz      loc_2AC0
.text:0000000000002A3D                 cmp     eax, 76h ; 'v'
.text:0000000000002A40                 jnz     short loc_2A90
.text:0000000000002A42                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000002A4A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002A51                 mov     r8, rsp
.text:0000000000002A54                 mov     rcx, r14
.text:0000000000002A57                 mov     rdx, r13
.text:0000000000002A5A                 mov     rsi, r12
.text:0000000000002A5D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000002A62                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000002A67                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000002A6E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000002A76                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000002A7B                 call    version_etc_va
.text:0000000000002A80                 xor     edi, edi        ; status
.text:0000000000002A82                 call    _exit
.text:0000000000002A82 ; ---------------------------------------------------------------------------
.text:0000000000002A87                 align 10h
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000002A90                 mov     edi, cs:exit_failure
.text:0000000000002A96                 call    rbp
.text:0000000000002A98
.text:0000000000002A98 loc_2A98:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000002A98                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000002A98                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000002A9D                 xor     rax, fs:28h
.text:0000000000002AA6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000002AAC                 jnz     short loc_2AC6
.text:0000000000002AAE                 add     rsp, 0D0h
.text:0000000000002AB5                 pop     rbx
.text:0000000000002AB6                 pop     rbp
.text:0000000000002AB7                 pop     r12
.text:0000000000002AB9                 pop     r13
.text:0000000000002ABB                 pop     r14
.text:0000000000002ABD                 retn
.text:0000000000002ABD ; ---------------------------------------------------------------------------
.text:0000000000002ABE                 align 20h
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000002AC0                 xor     edi, edi
.text:0000000000002AC2                 call    rbp
.text:0000000000002AC4                 jmp     short loc_2A98
.text:0000000000002AC6 ; ---------------------------------------------------------------------------
.text:0000000000002AC6
.text:0000000000002AC6 loc_2AC6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000002AC6                 call    ___stack_chk_fail
.text:0000000000002AC6 ; } // starts at 2990
.text:0000000000002AC6 parse_gnu_standard_options_only endp
.text:0000000000002AC6
.text:0000000000002AC6 ; ---------------------------------------------------------------------------
.text:0000000000002ACB                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AD0
.text:0000000000002AD0
.text:0000000000002AD0                 public set_program_name
.text:0000000000002AD0 set_program_name proc near              ; CODE XREF: main+26↑p
.text:0000000000002AD0 ; __unwind {
.text:0000000000002AD0                 test    rdi, rdi
.text:0000000000002AD3                 push    rbx
.text:0000000000002AD4                 jz      short loc_2B4D
.text:0000000000002AD6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002ADB                 mov     rbx, rdi
.text:0000000000002ADE                 call    _strrchr
.text:0000000000002AE3                 test    rax, rax
.text:0000000000002AE6                 jz      short loc_2B3D
.text:0000000000002AE8                 lea     r8, [rax+1]
.text:0000000000002AEC                 mov     rdx, r8
.text:0000000000002AEF                 sub     rdx, rbx
.text:0000000000002AF2                 cmp     rdx, 6
.text:0000000000002AF6                 jle     short loc_2B3D
.text:0000000000002AF8                 lea     rsi, [rax-6]
.text:0000000000002AFC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002B03                 mov     ecx, 7
.text:0000000000002B08                 repe cmpsb
.text:0000000000002B0A                 setnbe  dl
.text:0000000000002B0D                 sbb     dl, 0
.text:0000000000002B10                 test    dl, dl
.text:0000000000002B12                 jnz     short loc_2B3D
.text:0000000000002B14                 lea     rdi, aLt        ; "lt-"
.text:0000000000002B1B                 mov     ecx, 3
.text:0000000000002B20                 mov     rsi, r8
.text:0000000000002B23                 mov     rbx, r8
.text:0000000000002B26                 repe cmpsb
.text:0000000000002B28                 setnbe  dl
.text:0000000000002B2B                 sbb     dl, 0
.text:0000000000002B2E                 test    dl, dl
.text:0000000000002B30                 jnz     short loc_2B3D
.text:0000000000002B32                 lea     rbx, [rax+4]
.text:0000000000002B36                 mov     cs:__bss_start, rbx
.text:0000000000002B3D
.text:0000000000002B3D loc_2B3D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002B3D                                         ; set_program_name+26↑j ...
.text:0000000000002B3D                 mov     cs:program_name, rbx
.text:0000000000002B44                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002B4B                 pop     rbx
.text:0000000000002B4C                 retn
.text:0000000000002B4D ; ---------------------------------------------------------------------------
.text:0000000000002B4D
.text:0000000000002B4D loc_2B4D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002B4D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002B54                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002B5B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002B60                 mov     esi, 1          ; size
.text:0000000000002B65                 call    _fwrite
.text:0000000000002B6A                 call    _abort
.text:0000000000002B6A ; } // starts at 2AD0
.text:0000000000002B6A set_program_name endp
.text:0000000000002B6A
.text:0000000000002B6A ; ---------------------------------------------------------------------------
.text:0000000000002B6F                 align 10h
.text:0000000000002B70
.text:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B70
.text:0000000000002B70 ; Attributes: info_from_lumina
.text:0000000000002B70
.text:0000000000002B70 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002B70 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002B70                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002B70 ; __unwind {
.text:0000000000002B70                 push    rbp
.text:0000000000002B71                 push    rbx
.text:0000000000002B72                 mov     rbp, rdi
.text:0000000000002B75                 mov     ebx, esi
.text:0000000000002B77                 sub     rsp, 8
.text:0000000000002B7B                 call    locale_charset
.text:0000000000002B80                 movzx   edx, byte ptr [rax]
.text:0000000000002B83                 and     edx, 0FFFFFFDFh
.text:0000000000002B86                 cmp     dl, 55h ; 'U'
.text:0000000000002B89                 jz      short loc_2C00
.text:0000000000002B8B                 cmp     dl, 47h ; 'G'
.text:0000000000002B8E                 jz      short loc_2BB0
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002B90                                         ; gettext_quote+50↓j ...
.text:0000000000002B90                 lea     rax, unk_5C4B
.text:0000000000002B97                 lea     rdx, asc_5C4D   ; "'"
.text:0000000000002B9E                 cmp     ebx, 9
.text:0000000000002BA1                 cmovnz  rax, rdx
.text:0000000000002BA5                 add     rsp, 8
.text:0000000000002BA9                 pop     rbx
.text:0000000000002BAA                 pop     rbp
.text:0000000000002BAB                 retn
.text:0000000000002BAB ; ---------------------------------------------------------------------------
.text:0000000000002BAC                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002BB0                 movzx   edx, byte ptr [rax+1]
.text:0000000000002BB4                 and     edx, 0FFFFFFDFh
.text:0000000000002BB7                 cmp     dl, 42h ; 'B'
.text:0000000000002BBA                 jnz     short loc_2B90
.text:0000000000002BBC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002BC0                 jnz     short loc_2B90
.text:0000000000002BC2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002BC6                 jnz     short loc_2B90
.text:0000000000002BC8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002BCC                 jnz     short loc_2B90
.text:0000000000002BCE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002BD2                 jnz     short loc_2B90
.text:0000000000002BD4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002BD8                 jnz     short loc_2B90
.text:0000000000002BDA                 cmp     byte ptr [rax+7], 0
.text:0000000000002BDE                 jnz     short loc_2B90
.text:0000000000002BE0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002BE4                 lea     rax, unk_5C44
.text:0000000000002BEB                 lea     rdx, unk_5C48
.text:0000000000002BF2                 cmovnz  rax, rdx
.text:0000000000002BF6                 add     rsp, 8
.text:0000000000002BFA                 pop     rbx
.text:0000000000002BFB                 pop     rbp
.text:0000000000002BFC                 retn
.text:0000000000002BFC ; ---------------------------------------------------------------------------
.text:0000000000002BFD                 align 20h
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002C00                 movzx   edx, byte ptr [rax+1]
.text:0000000000002C04                 and     edx, 0FFFFFFDFh
.text:0000000000002C07                 cmp     dl, 54h ; 'T'
.text:0000000000002C0A                 jnz     short loc_2B90
.text:0000000000002C0C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002C10                 and     edx, 0FFFFFFDFh
.text:0000000000002C13                 cmp     dl, 46h ; 'F'
.text:0000000000002C16                 jnz     loc_2B90
.text:0000000000002C1C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002C20                 jnz     loc_2B90
.text:0000000000002C26                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002C2A                 jnz     loc_2B90
.text:0000000000002C30                 cmp     byte ptr [rax+5], 0
.text:0000000000002C34                 jnz     loc_2B90
.text:0000000000002C3A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002C3E                 lea     rax, unk_5C3C
.text:0000000000002C45                 lea     rdx, unk_5C40
.text:0000000000002C4C                 cmovnz  rax, rdx
.text:0000000000002C50                 add     rsp, 8
.text:0000000000002C54                 pop     rbx
.text:0000000000002C55                 pop     rbp
.text:0000000000002C56                 retn
.text:0000000000002C56 ; } // starts at 2B70
.text:0000000000002C56 gettext_quote   endp
.text:0000000000002C56
.text:0000000000002C56 ; ---------------------------------------------------------------------------
.text:0000000000002C57                 align 20h
.text:0000000000002C60
.text:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C60
.text:0000000000002C60 ; Attributes: info_from_lumina
.text:0000000000002C60
.text:0000000000002C60 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002C60 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002C60                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002C60
.text:0000000000002C60 var_E0          = dword ptr -0E0h
.text:0000000000002C60 var_DB          = byte ptr -0DBh
.text:0000000000002C60 var_DA          = byte ptr -0DAh
.text:0000000000002C60 var_D9          = byte ptr -0D9h
.text:0000000000002C60 s               = qword ptr -0D8h
.text:0000000000002C60 n               = qword ptr -0D0h
.text:0000000000002C60 var_C8          = qword ptr -0C8h
.text:0000000000002C60 ps              = qword ptr -0C0h
.text:0000000000002C60 var_B8          = qword ptr -0B8h
.text:0000000000002C60 var_B0          = qword ptr -0B0h
.text:0000000000002C60 var_A8          = qword ptr -0A8h
.text:0000000000002C60 s2              = qword ptr -0A0h
.text:0000000000002C60 var_98          = qword ptr -98h
.text:0000000000002C60 var_90          = qword ptr -90h
.text:0000000000002C60 var_88          = qword ptr -88h
.text:0000000000002C60 var_80          = qword ptr -80h
.text:0000000000002C60 var_78          = qword ptr -78h
.text:0000000000002C60 var_70          = dword ptr -70h
.text:0000000000002C60 var_6C          = byte ptr -6Ch
.text:0000000000002C60 var_6B          = byte ptr -6Bh
.text:0000000000002C60 var_6A          = byte ptr -6Ah
.text:0000000000002C60 var_69          = byte ptr -69h
.text:0000000000002C60 var_68          = qword ptr -68h
.text:0000000000002C60 var_60          = qword ptr -60h
.text:0000000000002C60 wc              = dword ptr -4Ch
.text:0000000000002C60 var_48          = qword ptr -48h
.text:0000000000002C60 var_40          = qword ptr -40h
.text:0000000000002C60 arg_0           = qword ptr  8
.text:0000000000002C60 arg_8           = qword ptr  10h
.text:0000000000002C60 arg_10          = qword ptr  18h
.text:0000000000002C60
.text:0000000000002C60 ; __unwind {
.text:0000000000002C60                 push    r15
.text:0000000000002C62                 push    r14
.text:0000000000002C64                 mov     r15d, r8d
.text:0000000000002C67                 push    r13
.text:0000000000002C69                 push    r12
.text:0000000000002C6B                 mov     r14, rdi
.text:0000000000002C6E                 push    rbp
.text:0000000000002C6F                 push    rbx
.text:0000000000002C70                 mov     ebx, r9d
.text:0000000000002C73                 mov     r13, rsi
.text:0000000000002C76                 mov     rbp, rcx
.text:0000000000002C79                 and     ebx, 2
.text:0000000000002C7C                 sub     rsp, 0B8h
.text:0000000000002C83                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002C8B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002C90                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002C95                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002C9A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002C9F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002CA7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002CAC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002CB4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002CB9                 mov     rax, fs:28h
.text:0000000000002CC2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002CCA                 xor     eax, eax
.text:0000000000002CCC                 call    ___ctype_get_mb_cur_max
.text:0000000000002CD1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002CD5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002CDA                 ja      def_2CF1        ; jumptable 00000000000121F1 default case
.text:0000000000002CE0                 lea     rcx, jpt_2CF1
.text:0000000000002CE7                 mov     edx, r15d
.text:0000000000002CEA                 movsxd  rax, ds:(jpt_2CF1 - 5CA0h)[rcx+rdx*4]
.text:0000000000002CEE                 add     rax, rcx
.text:0000000000002CF1                 jmp     rax             ; switch jump
.text:0000000000002CF3 ; ---------------------------------------------------------------------------
.text:0000000000002CF3
.text:0000000000002CF3 loc_2CF3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CF3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002CF3                                         ; DATA XREF: ...
.text:0000000000002CF3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002CF8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CFD                 xor     r12d, r12d
.text:0000000000002D00                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D09                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D0E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002D13
.text:0000000000002D13 loc_2D13:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002D13                 lea     rax, asc_5C4D   ; "'"
.text:0000000000002D1A                 mov     [rsp+0E8h+n], 1
.text:0000000000002D23                 xor     r15d, r15d
.text:0000000000002D26                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002D2E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002D33
.text:0000000000002D33 loc_2D33:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002D33                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002D33                 xor     r11d, r11d
.text:0000000000002D36                 mov     rax, rbp
.text:0000000000002D39                 mov     r8d, r12d
.text:0000000000002D3C                 mov     rbp, r11
.text:0000000000002D3F                 mov     r11, rax
.text:0000000000002D42                 nop     word ptr [rax+rax+00h]
.text:0000000000002D48
.text:0000000000002D48 loc_2D48:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002D48                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002D48                 cmp     r11, rbp
.text:0000000000002D4B                 setnz   r12b
.text:0000000000002D4F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D53                 jnz     short loc_2D62
.text:0000000000002D55                 mov     rax, [rsp+0E8h+s]
.text:0000000000002D5A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002D5E                 setnz   r12b
.text:0000000000002D62
.text:0000000000002D62 loc_2D62:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002D62                 test    r12b, r12b
.text:0000000000002D65                 jz      loc_33C0
.text:0000000000002D6B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D70                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002D75                 lea     r9, [rdi+rbp]
.text:0000000000002D79                 setnz   al
.text:0000000000002D7C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002D80                 mov     r10d, eax
.text:0000000000002D83                 jz      loc_2E30
.text:0000000000002D89                 mov     rax, [rsp+0E8h+n]
.text:0000000000002D8E                 test    rax, rax
.text:0000000000002D91                 jz      loc_31C0
.text:0000000000002D97                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D9B                 lea     rbx, [rbp+rax+0]
.text:0000000000002DA0                 jnz     short loc_2DD0
.text:0000000000002DA2                 cmp     rax, 1
.text:0000000000002DA6                 jbe     short loc_2DD0
.text:0000000000002DA8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002DAD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002DB2                 mov     [rsp+0E8h+ps], r9
.text:0000000000002DB7                 call    _strlen
.text:0000000000002DBC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002DC2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002DC8                 mov     r11, rax
.text:0000000000002DCB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002DD0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002DD0                 cmp     rbx, r11
.text:0000000000002DD3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002DD8                 ja      loc_3390
.text:0000000000002DDE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002DE3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002DE8                 mov     rdi, r9         ; s1
.text:0000000000002DEB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002DF0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002DF5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002DFA                 call    _memcmp
.text:0000000000002DFF                 test    eax, eax
.text:0000000000002E01                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002E06                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002E0C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002E11                 jnz     loc_3390
.text:0000000000002E17                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002E1C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002E22                 jnz     loc_3DA5
.text:0000000000002E28                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002E30                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002E30                 movzx   ebx, byte ptr [r9]
.text:0000000000002E34                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002E37                 ja      def_2E4E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000002E3D                 lea     rcx, jpt_2E4E
.text:0000000000002E44                 movzx   edx, bl
.text:0000000000002E47                 movsxd  rax, ds:(jpt_2E4E - 5CCCh)[rcx+rdx*4]
.text:0000000000002E4B                 add     rax, rcx
.text:0000000000002E4E                 jmp     rax             ; switch jump
.text:0000000000002E50 ; ---------------------------------------------------------------------------
.text:0000000000002E50
.text:0000000000002E50 loc_2E50:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002E50                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000002E50                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002E53
.text:0000000000002E53 loc_2E53:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002E53                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002E53                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002E57                 setnz   al
.text:0000000000002E5A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E5E                 jnz     short loc_2E6C
.text:0000000000002E60                 mov     rax, [rsp+0E8h+s]
.text:0000000000002E65                 cmp     byte ptr [rax+1], 0
.text:0000000000002E69                 setnz   al
.text:0000000000002E6C
.text:0000000000002E6C loc_2E6C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000002E6C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002E71                 setz    dl
.text:0000000000002E74                 test    al, al
.text:0000000000002E76                 jz      loc_30C8
.text:0000000000002E7C
.text:0000000000002E7C loc_2E7C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000002E7C                 xor     r12d, r12d
.text:0000000000002E7F                 xor     eax, eax
.text:0000000000002E81                 nop     dword ptr [rax+00000000h]
.text:0000000000002E88
.text:0000000000002E88 loc_2E88:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002E88                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002E88                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000002E8D                 jnz     loc_2FA2
.text:0000000000002E93                 test    dl, dl
.text:0000000000002E95                 jnz     loc_2FA2
.text:0000000000002E9B
.text:0000000000002E9B loc_2E9B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000002E9B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002EA0                 test    rsi, rsi
.text:0000000000002EA3                 jz      short loc_2EB9
.text:0000000000002EA5                 mov     edx, ebx
.text:0000000000002EA7                 shr     dl, 5
.text:0000000000002EAA                 movzx   edx, dl
.text:0000000000002EAD                 mov     edx, [rsi+rdx*4]
.text:0000000000002EB0                 bt      edx, ebx
.text:0000000000002EB3                 jb      loc_3003
.text:0000000000002EB9
.text:0000000000002EB9 loc_2EB9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002EB9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002EB9                 test    r10b, r10b
.text:0000000000002EBC                 jnz     loc_3003
.text:0000000000002EC2                 xor     eax, 1
.text:0000000000002EC5                 add     rbp, 1
.text:0000000000002EC9                 and     eax, r8d
.text:0000000000002ECC
.text:0000000000002ECC loc_2ECC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000002ECC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000002ECC                 test    al, al
.text:0000000000002ECE                 jz      short loc_2EF0
.text:0000000000002ED0                 cmp     r13, r15
.text:0000000000002ED3                 jbe     short loc_2EDA
.text:0000000000002ED5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002EDA
.text:0000000000002EDA loc_2EDA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000002EDA                 lea     rax, [r15+1]
.text:0000000000002EDE                 cmp     r13, rax
.text:0000000000002EE1                 jbe     short loc_2EE9
.text:0000000000002EE3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002EE9
.text:0000000000002EE9 loc_2EE9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002EE9                 add     r15, 2
.text:0000000000002EED                 xor     r8d, r8d
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002EF0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002EF0                 cmp     r15, r13
.text:0000000000002EF3                 jnb     short loc_2EF9
.text:0000000000002EF5                 mov     [r14+r15], bl
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002EF9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000002EFE                 add     r15, 1
.text:0000000000002F02                 mov     eax, 0
.text:0000000000002F07                 test    r12b, r12b
.text:0000000000002F0A                 cmovz   edi, eax
.text:0000000000002F0D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002F12                 jmp     loc_2D48
.text:0000000000002F12 ; ---------------------------------------------------------------------------
.text:0000000000002F17                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F20                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000002F20                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002F23
.text:0000000000002F23 loc_2F23:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F23                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002F23                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002F27                 cmp     eax, 2
.text:0000000000002F2A                 jz      loc_34E8
.text:0000000000002F30                 cmp     eax, 5
.text:0000000000002F33                 jz      loc_34A8
.text:0000000000002F39                 cmp     eax, 2
.text:0000000000002F3C                 mov     ebx, 3Fh ; '?'
.text:0000000000002F41                 setz    dl
.text:0000000000002F44                 xor     r12d, r12d
.text:0000000000002F47                 xor     eax, eax
.text:0000000000002F49                 jmp     loc_2E88
.text:0000000000002F49 ; ---------------------------------------------------------------------------
.text:0000000000002F4E                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002F50                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000002F50                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002F53
.text:0000000000002F53 loc_2F53:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F53                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002F53                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002F58                 jz      loc_3460
.text:0000000000002F5E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002F63                 xor     edx, edx
.text:0000000000002F65                 xor     eax, eax
.text:0000000000002F67                 mov     ebx, 27h ; '''
.text:0000000000002F6C                 jmp     loc_2E88
.text:0000000000002F6C ; ---------------------------------------------------------------------------
.text:0000000000002F71                 align 8
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002F78                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002F78                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000002F7D                 mov     ebx, 74h ; 't'
.text:0000000000002F82
.text:0000000000002F82 loc_2F82:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002F82                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002F82                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002F87                 setz    al
.text:0000000000002F8A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002F8E                 jnz     loc_30DE
.text:0000000000002F94
.text:0000000000002F94 loc_2F94:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002F94                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002F94                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002F99                 jnz     short loc_3000
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000002F9B                 mov     ebx, edx
.text:0000000000002F9D                 xor     r12d, r12d
.text:0000000000002FA0                 xor     eax, eax
.text:0000000000002FA2
.text:0000000000002FA2 loc_2FA2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002FA2                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002FA2                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FA7                 jnz     loc_2E9B
.text:0000000000002FAD                 jmp     loc_2EB9
.text:0000000000002FAD ; ---------------------------------------------------------------------------
.text:0000000000002FB2                 align 8
.text:0000000000002FB8
.text:0000000000002FB8 loc_2FB8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002FB8                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002FB8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000002FBD                 mov     ebx, 62h ; 'b'
.text:0000000000002FC2                 jmp     short loc_2F94
.text:0000000000002FC2 ; ---------------------------------------------------------------------------
.text:0000000000002FC4                 align 8
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002FC8                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000002FC8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000002FCD                 jz      loc_33A0
.text:0000000000002FD3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002FD8                 jz      loc_31F0
.text:0000000000002FDE
.text:0000000000002FDE loc_2FDE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000002FDE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002FE3                 jz      loc_31F0
.text:0000000000002FE9                 cmp     [rsp+0E8h+n], 0
.text:0000000000002FEF                 jnz     loc_33AB
.text:0000000000002FF5                 mov     ebx, 5Ch ; '\'
.text:0000000000002FFA                 nop     word ptr [rax+rax+00h]
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003000                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003000                 xor     r12d, r12d
.text:0000000000003003
.text:0000000000003003 loc_3003:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003003                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003003                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003008                 setz    dl
.text:000000000000300B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003010                 mov     eax, edx
.text:0000000000003012                 jnz     loc_3868
.text:0000000000003018                 mov     eax, r8d
.text:000000000000301B                 xor     eax, 1
.text:000000000000301E                 and     al, dl
.text:0000000000003020                 jz      short loc_3051
.text:0000000000003022                 cmp     r13, r15
.text:0000000000003025                 jbe     short loc_302C
.text:0000000000003027                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000302C
.text:000000000000302C loc_302C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000302C                 lea     rdx, [r15+1]
.text:0000000000003030                 cmp     r13, rdx
.text:0000000000003033                 jbe     short loc_303B
.text:0000000000003035                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000303B
.text:000000000000303B loc_303B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000303B                 lea     rdx, [r15+2]
.text:000000000000303F                 cmp     r13, rdx
.text:0000000000003042                 jbe     short loc_304A
.text:0000000000003044                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000304A
.text:000000000000304A loc_304A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000304A                 add     r15, 3
.text:000000000000304E                 mov     r8d, eax
.text:0000000000003051
.text:0000000000003051 loc_3051:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000003051                 cmp     r13, r15
.text:0000000000003054                 jbe     short loc_305B
.text:0000000000003056                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000305B
.text:000000000000305B loc_305B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000305B                 add     r15, 1
.text:000000000000305F                 add     rbp, 1
.text:0000000000003063                 jmp     loc_2EF0
.text:0000000000003063 ; ---------------------------------------------------------------------------
.text:0000000000003068                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003070                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003070                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000003075                 jnz     loc_3243
.text:000000000000307B                 xor     edx, edx
.text:000000000000307D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003082                 jz      loc_2F9B
.text:0000000000003088                 add     rbp, 1
.text:000000000000308C                 jmp     loc_2D48
.text:000000000000308C ; ---------------------------------------------------------------------------
.text:0000000000003091                 align 8
.text:0000000000003098
.text:0000000000003098 loc_3098:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003098                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003098                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000309D                 setz    dl
.text:00000000000030A0                 xor     eax, eax
.text:00000000000030A2                 jmp     loc_2E88
.text:00000000000030A2 ; ---------------------------------------------------------------------------
.text:00000000000030A7                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030B0                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:00000000000030B0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000030B5                 mov     ebx, 61h ; 'a'
.text:00000000000030BA                 jmp     loc_2F94
.text:00000000000030BA ; ---------------------------------------------------------------------------
.text:00000000000030BF                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030C0                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:00000000000030C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000030C5                 setz    dl
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000030C8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000030C8                 test    rbp, rbp
.text:00000000000030CB                 jnz     loc_2E7C
.text:00000000000030D1
.text:00000000000030D1 loc_30D1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000030D1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000030D1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000030D6                 and     al, dl
.text:00000000000030D8                 jz      loc_2E88
.text:00000000000030DE
.text:00000000000030DE loc_30DE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000030DE                 mov     rbp, r11
.text:00000000000030E1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000030E9                 jmp     loc_37E9
.text:00000000000030E9 ; ---------------------------------------------------------------------------
.text:00000000000030EE                 align 10h
.text:00000000000030F0
.text:00000000000030F0 loc_30F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030F0                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:00000000000030F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000030F5                 setz    dl
.text:00000000000030F8                 xor     r12d, r12d
.text:00000000000030FB                 jmp     short loc_30D1
.text:00000000000030FB ; ---------------------------------------------------------------------------
.text:00000000000030FD                 align 20h
.text:0000000000003100
.text:0000000000003100 loc_3100:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003100                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003100                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003105                 mov     ebx, 20h ; ' '
.text:000000000000310A                 setz    dl
.text:000000000000310D                 jmp     short loc_30D1
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:000000000000310F                 align 10h
.text:0000000000003110
.text:0000000000003110 loc_3110:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003110                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003110                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003115                 mov     ebx, 72h ; 'r'
.text:000000000000311A                 jmp     loc_2F82
.text:000000000000311A ; ---------------------------------------------------------------------------
.text:000000000000311F                 align 20h
.text:0000000000003120
.text:0000000000003120 loc_3120:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003120                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003120                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000003125                 mov     ebx, 66h ; 'f'
.text:000000000000312A                 jmp     loc_2F94
.text:000000000000312A ; ---------------------------------------------------------------------------
.text:000000000000312F                 align 10h
.text:0000000000003130
.text:0000000000003130 loc_3130:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003130                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003130                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000003135                 mov     ebx, 76h ; 'v'
.text:000000000000313A                 jmp     loc_2F94
.text:000000000000313A ; ---------------------------------------------------------------------------
.text:000000000000313F                 align 20h
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003140                                         ; DATA XREF: .rodata:jpt_2E4E↓o
.text:0000000000003140                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000003145                 mov     ebx, 6Eh ; 'n'
.text:000000000000314A                 jmp     loc_2F82
.text:000000000000314A ; ---------------------------------------------------------------------------
.text:000000000000314F                 align 10h
.text:0000000000003150
.text:0000000000003150 def_31DA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000003150                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000003150                                         ; DATA XREF: ...
.text:0000000000003150                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003153                 nop     dword ptr [rax+rax+00h]
.text:0000000000003158
.text:0000000000003158 def_2E4E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000003158                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000003158                                         ; DATA XREF: ...
.text:0000000000003158                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000315E                 jnz     loc_3508
.text:0000000000003164                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000003169                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000316E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003173                 call    ___ctype_b_loc
.text:0000000000003178                 mov     rcx, [rax]
.text:000000000000317B                 movzx   edx, bl
.text:000000000000317E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003184                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000318A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000318F                 mov     edi, 1
.text:0000000000003194                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003198                 and     ax, 4000h
.text:000000000000319C                 setnz   r12b
.text:00000000000031A0                 setz    al
.text:00000000000031A3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000031A7
.text:00000000000031A7 loc_31A7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000031A7                 test    al, al
.text:00000000000031A9                 jnz     loc_3B41
.text:00000000000031AF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000031B4                 setz    dl
.text:00000000000031B7                 jmp     loc_2E88
.text:00000000000031B7 ; ---------------------------------------------------------------------------
.text:00000000000031BC                 align 20h
.text:00000000000031C0
.text:00000000000031C0 loc_31C0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000031C0                 movzx   ebx, byte ptr [r9]
.text:00000000000031C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000031C7                 ja      short def_31DA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000031C9                 lea     rcx, jpt_31DA
.text:00000000000031D0                 movzx   edx, bl
.text:00000000000031D3                 movsxd  rax, ds:(jpt_31DA - 5EC8h)[rcx+rdx*4]
.text:00000000000031D7                 add     rax, rcx
.text:00000000000031DA                 jmp     rax             ; switch jump
.text:00000000000031DA ; ---------------------------------------------------------------------------
.text:00000000000031DC                 align 20h
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000031E0                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:00000000000031E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000031E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000031E8                 jnz     loc_2FDE
.text:00000000000031EE                 xchg    ax, ax
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000031F0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000031F0                 mov     edx, 5Ch ; '\'
.text:00000000000031F5                 mov     ebx, 5Ch ; '\'
.text:00000000000031FA                 jmp     loc_2F94
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FF                 align 20h
.text:0000000000003200
.text:0000000000003200 loc_3200:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003200                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003200                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003205                 xor     r10d, r10d
.text:0000000000003208                 mov     ebx, 66h ; 'f'
.text:000000000000320D                 jmp     loc_2F94
.text:000000000000320D ; ---------------------------------------------------------------------------
.text:0000000000003212                 align 8
.text:0000000000003218
.text:0000000000003218 loc_3218:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003218                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003218                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000321D                 xor     r10d, r10d
.text:0000000000003220                 mov     ebx, 6Eh ; 'n'
.text:0000000000003225                 jmp     loc_2F82
.text:0000000000003225 ; ---------------------------------------------------------------------------
.text:000000000000322A                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003230                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003230                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000003235                 jmp     loc_3000
.text:0000000000003235 ; ---------------------------------------------------------------------------
.text:000000000000323A                 align 20h
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003240                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003240                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000003243
.text:0000000000003243 loc_3243:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000003243                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003248                 setz    dl
.text:000000000000324B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003250                 jnz     loc_3DEA
.text:0000000000003256                 mov     eax, r8d
.text:0000000000003259                 mov     rcx, r15
.text:000000000000325C                 xor     eax, 1
.text:000000000000325F                 and     al, dl
.text:0000000000003261                 jz      short loc_3290
.text:0000000000003263                 cmp     r13, r15
.text:0000000000003266                 jbe     short loc_326D
.text:0000000000003268                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000326D
.text:000000000000326D loc_326D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000326D                 lea     rcx, [r15+1]
.text:0000000000003271                 cmp     r13, rcx
.text:0000000000003274                 jbe     short loc_327C
.text:0000000000003276                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000327C
.text:000000000000327C loc_327C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000327C                 lea     rcx, [r15+2]
.text:0000000000003280                 cmp     r13, rcx
.text:0000000000003283                 ja      loc_38B9
.text:0000000000003289
.text:0000000000003289 loc_3289:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003289                 lea     rcx, [r15+3]
.text:000000000000328D                 mov     r8d, eax
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003290                 cmp     r13, rcx
.text:0000000000003293                 jbe     short loc_329A
.text:0000000000003295                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000329A
.text:000000000000329A loc_329A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000329A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000329F                 lea     r15, [rcx+1]
.text:00000000000032A3                 jz      loc_38A9
.text:00000000000032A9                 lea     rax, [rbp+1]
.text:00000000000032AD                 cmp     rax, r11
.text:00000000000032B0                 jnb     short loc_32CB
.text:00000000000032B2                 mov     rax, [rsp+0E8h+s]
.text:00000000000032B7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000032BC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000032C0                 sub     eax, 30h ; '0'
.text:00000000000032C3                 cmp     al, 9
.text:00000000000032C5                 jbe     loc_3AF9
.text:00000000000032CB
.text:00000000000032CB loc_32CB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000032CB                 mov     eax, r12d
.text:00000000000032CE                 mov     ebx, 30h ; '0'
.text:00000000000032D3                 xor     r12d, r12d
.text:00000000000032D6                 jmp     loc_2E88
.text:00000000000032D6 ; ---------------------------------------------------------------------------
.text:00000000000032DB                 align 20h
.text:00000000000032E0
.text:00000000000032E0 loc_32E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032E0                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:00000000000032E0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000032E5                 mov     r12d, r10d
.text:00000000000032E8                 setz    dl
.text:00000000000032EB                 xor     r10d, r10d
.text:00000000000032EE                 xor     eax, eax
.text:00000000000032F0                 jmp     loc_2E88
.text:00000000000032F0 ; ---------------------------------------------------------------------------
.text:00000000000032F5                 align 8
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000032F8                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:00000000000032F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000032FD                 setz    dl
.text:0000000000003300                 xor     r10d, r10d
.text:0000000000003303                 jmp     loc_30C8
.text:0000000000003303 ; ---------------------------------------------------------------------------
.text:0000000000003308                 align 10h
.text:0000000000003310
.text:0000000000003310 loc_3310:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003310                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003310                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003315                 setz    dl
.text:0000000000003318                 xor     r10d, r10d
.text:000000000000331B                 xor     r12d, r12d
.text:000000000000331E                 jmp     loc_30D1
.text:000000000000331E ; ---------------------------------------------------------------------------
.text:0000000000003323                 align 8
.text:0000000000003328
.text:0000000000003328 loc_3328:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003328                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003328                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000332D                 mov     r12d, r10d
.text:0000000000003330                 mov     ebx, 20h ; ' '
.text:0000000000003335                 setz    dl
.text:0000000000003338                 xor     r10d, r10d
.text:000000000000333B                 jmp     loc_30D1
.text:0000000000003340 ; ---------------------------------------------------------------------------
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003340                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003340                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000003345                 xor     r10d, r10d
.text:0000000000003348                 mov     ebx, 72h ; 'r'
.text:000000000000334D                 jmp     loc_2F82
.text:000000000000334D ; ---------------------------------------------------------------------------
.text:0000000000003352                 align 8
.text:0000000000003358
.text:0000000000003358 loc_3358:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003358                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003358                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000335D                 jmp     loc_3000
.text:000000000000335D ; ---------------------------------------------------------------------------
.text:0000000000003362                 align 8
.text:0000000000003368
.text:0000000000003368 loc_3368:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003368                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003368                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000336D                 xor     r10d, r10d
.text:0000000000003370                 mov     ebx, 74h ; 't'
.text:0000000000003375                 jmp     loc_2F82
.text:0000000000003375 ; ---------------------------------------------------------------------------
.text:000000000000337A                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003380                                         ; DATA XREF: .rodata:jpt_31DA↓o
.text:0000000000003380                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003385                 jmp     loc_3000
.text:0000000000003385 ; ---------------------------------------------------------------------------
.text:000000000000338A                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003390                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003390                 xor     r10d, r10d
.text:0000000000003393                 jmp     loc_2E30
.text:0000000000003393 ; ---------------------------------------------------------------------------
.text:0000000000003398                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000033A0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000033A5                 jnz     loc_3D10
.text:00000000000033AB
.text:00000000000033AB loc_33AB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000033AB                 add     rbp, 1
.text:00000000000033AF                 mov     eax, r8d
.text:00000000000033B2                 xor     r12d, r12d
.text:00000000000033B5                 mov     ebx, 5Ch ; '\'
.text:00000000000033BA                 jmp     loc_2ECC
.text:00000000000033BA ; ---------------------------------------------------------------------------
.text:00000000000033BF                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000033C0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000033C5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000033CA                 mov     r12d, r8d
.text:00000000000033CD                 mov     rbp, r11
.text:00000000000033D0                 setz    dl
.text:00000000000033D3                 mov     eax, ebx
.text:00000000000033D5                 test    r15, r15
.text:00000000000033D8                 setz    cl
.text:00000000000033DB                 and     eax, edx
.text:00000000000033DD                 and     al, cl
.text:00000000000033DF                 jnz     loc_3E46
.text:00000000000033E5                 mov     eax, ebx
.text:00000000000033E7                 xor     eax, 1
.text:00000000000033EA                 and     dl, al
.text:00000000000033EC                 jz      loc_3D5C
.text:00000000000033F2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000033F7                 jz      loc_3D5A
.text:00000000000033FD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003402                 jnz     loc_3DFD
.text:0000000000003408                 test    r13, r13
.text:000000000000340B                 setz    al
.text:000000000000340E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003414                 setnz   dl
.text:0000000000003417                 and     al, dl
.text:0000000000003419                 jz      loc_3E3C
.text:000000000000341F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003424
.text:0000000000003424 loc_3424:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000003424                 lea     rbx, asc_5C4D   ; "'"
.text:000000000000342B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000342F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003437                 mov     r15d, 1
.text:000000000000343D                 mov     [rsp+0E8h+n], 1
.text:0000000000003446                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000344B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003450                 mov     [rsp+0E8h+var_6C], al
.text:0000000000003454                 jmp     loc_2D33
.text:0000000000003454 ; ---------------------------------------------------------------------------
.text:0000000000003459                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000003460                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003465                 jnz     loc_3D10
.text:000000000000346B                 test    r13, r13
.text:000000000000346E                 jz      loc_3870
.text:0000000000003474                 xor     edx, edx
.text:0000000000003476                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000347C                 jnz     loc_3870
.text:0000000000003482
.text:0000000000003482 loc_3482:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003482                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003482                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003487                 add     r15, 3
.text:000000000000348B                 xor     eax, eax
.text:000000000000348D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003492                 xor     r8d, r8d
.text:0000000000003495                 mov     r13, rdx
.text:0000000000003498                 mov     ebx, 27h ; '''
.text:000000000000349D                 jmp     loc_2EB9
.text:000000000000349D ; ---------------------------------------------------------------------------
.text:00000000000034A2                 align 8
.text:00000000000034A8
.text:00000000000034A8 loc_34A8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000034A8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000034AD                 jz      short loc_34D0
.text:00000000000034AF                 lea     rcx, [rbp+2]
.text:00000000000034B3                 cmp     rcx, r11
.text:00000000000034B6                 jnb     short loc_34D0
.text:00000000000034B8                 mov     rax, [rsp+0E8h+s]
.text:00000000000034BD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000034C2                 jz      loc_3C52
.text:00000000000034C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000034D0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000034D0                 xor     edx, edx
.text:00000000000034D2                 xor     r12d, r12d
.text:00000000000034D5                 xor     eax, eax
.text:00000000000034D7                 mov     ebx, 3Fh ; '?'
.text:00000000000034DC                 jmp     loc_2E88
.text:00000000000034DC ; ---------------------------------------------------------------------------
.text:00000000000034E1                 align 8
.text:00000000000034E8
.text:00000000000034E8 loc_34E8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000034E8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034ED                 jnz     loc_3D10
.text:00000000000034F3                 xor     r12d, r12d
.text:00000000000034F6                 xor     eax, eax
.text:00000000000034F8                 mov     ebx, 3Fh ; '?'
.text:00000000000034FD                 jmp     loc_2EB9
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:0000000000003502                 align 8
.text:0000000000003508
.text:0000000000003508 loc_3508:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003508                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003510                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003514                 mov     [rsp+0E8h+var_48], 0
.text:0000000000003520                 mov     [rsp+0E8h+ps], rax
.text:0000000000003525                 jnz     short loc_3554
.text:0000000000003527                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000352C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000003531                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000003536                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000353B                 call    _strlen
.text:0000000000003540                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000003546                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000354C                 mov     r11, rax
.text:000000000000354F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003554
.text:0000000000003554 loc_3554:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000003554                 lea     rax, [rsp+0E8h+wc]
.text:000000000000355C                 xor     ecx, ecx
.text:000000000000355E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000003562                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000003567                 mov     rbx, rcx
.text:000000000000356A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000003572                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000003577                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000357C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003584                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003589                 mov     [rsp+0E8h+var_78], r13
.text:000000000000358E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003593
.text:0000000000003593 loc_3593:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003593                 mov     rax, [rsp+0E8h+s]
.text:0000000000003598                 lea     r14, [rbp+rbx+0]
.text:000000000000359D                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000035A2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000035A7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000035AC                 lea     r13, [rax+r14]
.text:00000000000035B0                 sub     rdx, r14
.text:00000000000035B3                 mov     rsi, r13
.text:00000000000035B6                 call    rpl_mbrtowc
.text:00000000000035BB                 test    rax, rax
.text:00000000000035BE                 mov     r15, rax
.text:00000000000035C1                 jz      short loc_3611
.text:00000000000035C3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000035C7                 jz      loc_3BE5
.text:00000000000035CD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000035D1                 jz      loc_3B71
.text:00000000000035D7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000035DC                 setz    al
.text:00000000000035DF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000035E3                 jnz     loc_3780
.text:00000000000035E9
.text:00000000000035E9 loc_35E9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000035E9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000035E9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000035F0                 call    _iswprint
.text:00000000000035F5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000035FA                 test    eax, eax
.text:00000000000035FC                 mov     eax, 0
.text:0000000000003601                 cmovz   r12d, eax
.text:0000000000003605                 add     rbx, r15
.text:0000000000003608                 call    _mbsinit
.text:000000000000360D                 test    eax, eax
.text:000000000000360F                 jz      short loc_3593
.text:0000000000003611
.text:0000000000003611 loc_3611:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003611                 mov     edx, r12d
.text:0000000000003614                 mov     rdi, rbx
.text:0000000000003617                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000361D                 xor     edx, 1
.text:0000000000003620                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003625                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000362B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000362F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003637                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000363C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003641                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003646
.text:0000000000003646 loc_3646:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000003646                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000003646                 cmp     rdi, 1
.text:000000000000364A                 jbe     loc_3C4B
.text:0000000000003650
.text:0000000000003650 loc_3650:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000003650                 mov     rcx, rdi
.text:0000000000003653                 xor     esi, esi
.text:0000000000003655                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000365B                 add     rcx, rbp
.text:000000000000365E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003663                 jmp     loc_371E
.text:0000000000003663 ; ---------------------------------------------------------------------------
.text:0000000000003668                 align 10h
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000003670                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003675                 setz    al
.text:0000000000003678                 test    r9b, r9b
.text:000000000000367B                 jnz     loc_3B30
.text:0000000000003681                 mov     esi, r8d
.text:0000000000003684                 xor     esi, 1
.text:0000000000003687                 and     al, sil
.text:000000000000368A                 jz      short loc_36BB
.text:000000000000368C                 cmp     r13, r15
.text:000000000000368F                 jbe     short loc_3696
.text:0000000000003691                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003696
.text:0000000000003696 loc_3696:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003696                 lea     rsi, [r15+1]
.text:000000000000369A                 cmp     r13, rsi
.text:000000000000369D                 jbe     short loc_36A5
.text:000000000000369F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000036A5
.text:00000000000036A5 loc_36A5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000036A5                 lea     rsi, [r15+2]
.text:00000000000036A9                 cmp     r13, rsi
.text:00000000000036AC                 jbe     short loc_36B4
.text:00000000000036AE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000036B4
.text:00000000000036B4 loc_36B4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000036B4                 add     r15, 3
.text:00000000000036B8                 mov     r8d, eax
.text:00000000000036BB
.text:00000000000036BB loc_36BB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000036BB                 cmp     r13, r15
.text:00000000000036BE                 jbe     short loc_36C5
.text:00000000000036C0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000036C5
.text:00000000000036C5 loc_36C5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000036C5                 lea     rax, [r15+1]
.text:00000000000036C9                 cmp     r13, rax
.text:00000000000036CC                 jbe     short loc_36DB
.text:00000000000036CE                 mov     eax, ebx
.text:00000000000036D0                 shr     al, 6
.text:00000000000036D3                 add     eax, 30h ; '0'
.text:00000000000036D6                 mov     [r14+r15+1], al
.text:00000000000036DB
.text:00000000000036DB loc_36DB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000036DB                 lea     rax, [r15+2]
.text:00000000000036DF                 cmp     r13, rax
.text:00000000000036E2                 jbe     short loc_36F4
.text:00000000000036E4                 mov     eax, ebx
.text:00000000000036E6                 shr     al, 3
.text:00000000000036E9                 and     eax, 7
.text:00000000000036EC                 add     eax, 30h ; '0'
.text:00000000000036EF                 mov     [r14+r15+2], al
.text:00000000000036F4
.text:00000000000036F4 loc_36F4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000036F4                 and     ebx, 7
.text:00000000000036F7                 add     rbp, 1
.text:00000000000036FB                 add     r15, 3
.text:00000000000036FF                 add     ebx, 30h ; '0'
.text:0000000000003702                 cmp     rbp, rcx
.text:0000000000003705                 jnb     loc_2EF0
.text:000000000000370B                 mov     esi, edx
.text:000000000000370D
.text:000000000000370D loc_370D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000370D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000370D                 cmp     r13, r15
.text:0000000000003710                 jbe     short loc_3716
.text:0000000000003712                 mov     [r14+r15], bl
.text:0000000000003716
.text:0000000000003716 loc_3716:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003716                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000371A                 add     r15, 1
.text:000000000000371E
.text:000000000000371E loc_371E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000371E                 test    dl, dl
.text:0000000000003720                 jnz     loc_3670
.text:0000000000003726                 mov     eax, esi
.text:0000000000003728                 xor     eax, 1
.text:000000000000372B                 and     eax, r8d
.text:000000000000372E                 test    r10b, r10b
.text:0000000000003731                 jz      short loc_3741
.text:0000000000003733                 cmp     r13, r15
.text:0000000000003736                 jbe     short loc_373D
.text:0000000000003738                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000373D
.text:000000000000373D loc_373D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000373D                 add     r15, 1
.text:0000000000003741
.text:0000000000003741 loc_3741:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000003741                 add     rbp, 1
.text:0000000000003745                 cmp     rbp, rcx
.text:0000000000003748                 jnb     loc_2ECC
.text:000000000000374E                 test    al, al
.text:0000000000003750                 jz      loc_3B4E
.text:0000000000003756                 cmp     r13, r15
.text:0000000000003759                 jbe     short loc_3760
.text:000000000000375B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003760
.text:0000000000003760 loc_3760:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000003760                 lea     rax, [r15+1]
.text:0000000000003764                 cmp     r13, rax
.text:0000000000003767                 jbe     short loc_376F
.text:0000000000003769                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000376F
.text:000000000000376F loc_376F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000376F                 add     r15, 2
.text:0000000000003773                 xor     r10d, r10d
.text:0000000000003776                 xor     r8d, r8d
.text:0000000000003779                 jmp     short loc_370D
.text:0000000000003779 ; ---------------------------------------------------------------------------
.text:000000000000377B                 align 20h
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003780                 cmp     r15, 1
.text:0000000000003784                 jz      loc_35E9
.text:000000000000378A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000378F                 lea     rcx, [rdi+r15]
.text:0000000000003793                 lea     rdx, [rdi+r14+1]
.text:0000000000003798                 lea     r8, [rcx+r14]
.text:000000000000379C                 jmp     short loc_37AD
.text:000000000000379C ; ---------------------------------------------------------------------------
.text:000000000000379E                 align 20h
.text:00000000000037A0
.text:00000000000037A0 loc_37A0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000037A0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000037A0                 add     rdx, 1
.text:00000000000037A4                 cmp     r8, rdx
.text:00000000000037A7                 jz      loc_35E9
.text:00000000000037AD
.text:00000000000037AD loc_37AD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000037AD                 movzx   ecx, byte ptr [rdx]
.text:00000000000037B0                 sub     ecx, 5Bh ; '['
.text:00000000000037B3                 cmp     cl, 21h ; '!'
.text:00000000000037B6                 ja      short loc_37A0
.text:00000000000037B8                 mov     esi, 1
.text:00000000000037BD                 shl     rsi, cl
.text:00000000000037C0                 mov     rcx, rsi
.text:00000000000037C3                 mov     rsi, 20000002Bh
.text:00000000000037CD                 test    rcx, rsi
.text:00000000000037D0                 jz      short loc_37A0
.text:00000000000037D2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000037D7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000037DC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000037E1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000037E9
.text:00000000000037E9 loc_37E9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000037E9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000037E9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000037EE                 jz      short loc_3800
.text:00000000000037F0                 test    al, al
.text:00000000000037F2                 mov     eax, 4
.text:00000000000037F7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000037FC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003800
.text:0000000000003800 loc_3800:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003800                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003800                 sub     rsp, 8
.text:0000000000003804                 mov     rcx, rbp
.text:0000000000003807                 mov     rsi, r13
.text:000000000000380A                 push    [rsp+0F0h+var_88]
.text:000000000000380E                 push    [rsp+0F8h+var_80]
.text:0000000000003812                 mov     rdi, r14
.text:0000000000003815                 push    0
.text:0000000000003817                 mov     r9d, [rsp+108h+var_70]
.text:000000000000381F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003824                 mov     rdx, [rsp+108h+s]
.text:0000000000003829                 and     r9d, 0FFFFFFFDh
.text:000000000000382D                 call    quotearg_buffer_restyled
.text:0000000000003832                 add     rsp, 20h
.text:0000000000003836                 mov     r15, rax
.text:0000000000003839
.text:0000000000003839 loc_3839:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003839                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003839                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003841                 xor     rbx, fs:28h
.text:000000000000384A                 mov     rax, r15
.text:000000000000384D                 jnz     loc_3E53
.text:0000000000003853                 add     rsp, 0B8h
.text:000000000000385A                 pop     rbx
.text:000000000000385B                 pop     rbp
.text:000000000000385C                 pop     r12
.text:000000000000385E                 pop     r13
.text:0000000000003860                 pop     r14
.text:0000000000003862                 pop     r15
.text:0000000000003864                 retn
.text:0000000000003864 ; ---------------------------------------------------------------------------
.text:0000000000003865                 align 8
.text:0000000000003868
.text:0000000000003868 loc_3868:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003868                 mov     rbp, r11
.text:000000000000386B                 jmp     loc_37E9
.text:0000000000003870 ; ---------------------------------------------------------------------------
.text:0000000000003870
.text:0000000000003870 loc_3870:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003870                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003870                 cmp     r13, r15
.text:0000000000003873                 jbe     short loc_387A
.text:0000000000003875                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000387A
.text:000000000000387A loc_387A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000387A                 lea     rax, [r15+1]
.text:000000000000387E                 cmp     r13, rax
.text:0000000000003881                 jbe     short loc_3889
.text:0000000000003883                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003889
.text:0000000000003889 loc_3889:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003889                 lea     rax, [r15+2]
.text:000000000000388D                 cmp     r13, rax
.text:0000000000003890                 jbe     loc_3E82
.text:0000000000003896                 mov     rdx, r13
.text:0000000000003899                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000389F                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000038A4                 jmp     loc_3482
.text:00000000000038A9 ; ---------------------------------------------------------------------------
.text:00000000000038A9
.text:00000000000038A9 loc_38A9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:00000000000038A9                 mov     eax, r12d
.text:00000000000038AC                 mov     ebx, 30h ; '0'
.text:00000000000038B1                 xor     r12d, r12d
.text:00000000000038B4                 jmp     loc_2EB9
.text:00000000000038B9 ; ---------------------------------------------------------------------------
.text:00000000000038B9
.text:00000000000038B9 loc_38B9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:00000000000038B9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000038BF                 jmp     loc_3289
.text:00000000000038C4 ; ---------------------------------------------------------------------------
.text:00000000000038C4
.text:00000000000038C4 loc_38C4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000038C4                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:00000000000038C4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000038C6                 jnz     loc_2CF3        ; jumptable 00000000000121F1 case 1
.text:00000000000038CC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000038D1
.text:00000000000038D1 loc_38D1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000038D1                 test    r13, r13
.text:00000000000038D4                 jnz     loc_3E6A
.text:00000000000038DA                 lea     rax, asc_5C4D   ; "'"
.text:00000000000038E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000038EA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000038EF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000038F4                 xor     r12d, r12d
.text:00000000000038F7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000038FC                 mov     [rsp+0E8h+n], 1
.text:0000000000003905                 mov     [rsp+0E8h+s2], rax
.text:000000000000390A                 mov     r15d, 1
.text:0000000000003910                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003918                 jmp     loc_2D33
.text:0000000000003918 ; ---------------------------------------------------------------------------
.text:000000000000391D                 align 20h
.text:0000000000003920
.text:0000000000003920 loc_3920:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003920                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:0000000000003920                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003922                 jnz     loc_3D1D
.text:0000000000003928                 test    r13, r13
.text:000000000000392B                 jz      loc_3B56
.text:0000000000003931                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003935                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000393A                 xor     r12d, r12d
.text:000000000000393D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003942                 mov     [rsp+0E8h+var_98], 0
.text:000000000000394B
.text:000000000000394B loc_394B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000394B                 lea     rax, unk_5C4B
.text:0000000000003952                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003957                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000395C                 mov     [rsp+0E8h+n], 1
.text:0000000000003965                 mov     r15d, 1
.text:000000000000396B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003970                 jmp     loc_2D33
.text:0000000000003975 ; ---------------------------------------------------------------------------
.text:0000000000003975
.text:0000000000003975 loc_3975:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003975                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:0000000000003975                 lea     rax, unk_5C4B   ; jumptable 00000000000121F1 case 6
.text:000000000000397C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003981                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003986                 xor     r12d, r12d
.text:0000000000003989                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003992                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003997                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000399C                 mov     [rsp+0E8h+n], 1
.text:00000000000039A5                 xor     r15d, r15d
.text:00000000000039A8                 mov     [rsp+0E8h+s2], rax
.text:00000000000039AD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000039B5                 jmp     loc_2D33
.text:00000000000039BA ; ---------------------------------------------------------------------------
.text:00000000000039BA
.text:00000000000039BA loc_39BA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039BA                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:00000000000039BA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000039BF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000039C4                 xor     r12d, r12d
.text:00000000000039C7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000039D0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000039D5                 xor     r15d, r15d
.text:00000000000039D8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000039DD                 mov     [rsp+0E8h+n], 0
.text:00000000000039E6                 mov     [rsp+0E8h+s2], 0
.text:00000000000039EF                 jmp     loc_2D33
.text:00000000000039F4 ; ---------------------------------------------------------------------------
.text:00000000000039F4
.text:00000000000039F4 loc_39F4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000039F4                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:00000000000039F4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000039F9                 jz      short loc_3A51
.text:00000000000039FB                 lea     rsi, asc_5C4F   ; "`"
.text:0000000000003A02                 xor     edi, edi        ; domainname
.text:0000000000003A04                 mov     edx, 5          ; category
.text:0000000000003A09                 call    _dcgettext
.text:0000000000003A0E                 mov     rcx, rax
.text:0000000000003A11                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003A16                 lea     rax, asc_5C4F   ; "`"
.text:0000000000003A1D                 cmp     rcx, rax
.text:0000000000003A20                 jz      loc_3DBE
.text:0000000000003A26
.text:0000000000003A26 loc_3A26:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003A26                 lea     rsi, asc_5C4D   ; "'"
.text:0000000000003A2D                 xor     edi, edi        ; domainname
.text:0000000000003A2F                 mov     edx, 5          ; category
.text:0000000000003A34                 call    _dcgettext
.text:0000000000003A39                 mov     rcx, rax
.text:0000000000003A3C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003A41                 lea     rax, asc_5C4D   ; "'"
.text:0000000000003A48                 cmp     rcx, rax
.text:0000000000003A4B                 jz      loc_3DD4
.text:0000000000003A51
.text:0000000000003A51 loc_3A51:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003A51                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003A51                 xor     r15d, r15d
.text:0000000000003A54                 test    ebx, ebx
.text:0000000000003A56                 jz      loc_3C1D
.text:0000000000003A5C
.text:0000000000003A5C loc_3A5C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003A5C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003A5C                 test    ebx, ebx
.text:0000000000003A5E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003A63                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003A68                 xor     r12d, r12d
.text:0000000000003A6B                 mov     rdi, rbx        ; s
.text:0000000000003A6E                 call    _strlen
.text:0000000000003A73                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003A78                 mov     [rsp+0E8h+n], rax
.text:0000000000003A7D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003A82                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003A87                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003A90                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003A95                 jmp     loc_2D33
.text:0000000000003A9A ; ---------------------------------------------------------------------------
.text:0000000000003A9A
.text:0000000000003A9A loc_3A9A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003A9A                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:0000000000003A9A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003A9F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003AA4                 xor     r12d, r12d
.text:0000000000003AA7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AB0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003AB5                 xor     r15d, r15d
.text:0000000000003AB8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003ABD                 mov     [rsp+0E8h+n], 0
.text:0000000000003AC6                 mov     [rsp+0E8h+s2], 0
.text:0000000000003ACF                 jmp     loc_2D33
.text:0000000000003AD4 ; ---------------------------------------------------------------------------
.text:0000000000003AD4
.text:0000000000003AD4 loc_3AD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003AD4                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:0000000000003AD4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003AD9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003ADE                 xor     r12d, r12d
.text:0000000000003AE1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003AEA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003AEF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003AF4                 jmp     loc_2D13
.text:0000000000003AF9 ; ---------------------------------------------------------------------------
.text:0000000000003AF9
.text:0000000000003AF9 loc_3AF9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003AF9                 cmp     r13, r15
.text:0000000000003AFC                 jbe     short loc_3B03
.text:0000000000003AFE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003B03
.text:0000000000003B03 loc_3B03:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003B03                 lea     rax, [rcx+2]
.text:0000000000003B07                 cmp     r13, rax
.text:0000000000003B0A                 jbe     short loc_3B12
.text:0000000000003B0C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003B12                 mov     eax, r12d
.text:0000000000003B15                 lea     r15, [rcx+3]
.text:0000000000003B19                 xor     r12d, r12d
.text:0000000000003B1C                 mov     ebx, 30h ; '0'
.text:0000000000003B21                 jmp     loc_2E88
.text:0000000000003B21 ; ---------------------------------------------------------------------------
.text:0000000000003B26                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003B30                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003B35                 mov     rbp, r11
.text:0000000000003B38                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003B3C                 jmp     loc_37E9
.text:0000000000003B41 ; ---------------------------------------------------------------------------
.text:0000000000003B41
.text:0000000000003B41 loc_3B41:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003B41                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003B46                 xor     r12d, r12d
.text:0000000000003B49                 jmp     loc_3650
.text:0000000000003B4E ; ---------------------------------------------------------------------------
.text:0000000000003B4E
.text:0000000000003B4E loc_3B4E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003B4E                 xor     r10d, r10d
.text:0000000000003B51                 jmp     loc_370D
.text:0000000000003B56 ; ---------------------------------------------------------------------------
.text:0000000000003B56
.text:0000000000003B56 loc_3B56:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003B56                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B5F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B64                 xor     r12d, r12d
.text:0000000000003B67                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B6C                 jmp     loc_394B
.text:0000000000003B71 ; ---------------------------------------------------------------------------
.text:0000000000003B71
.text:0000000000003B71 loc_3B71:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003B71                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003B76                 mov     rsi, r14
.text:0000000000003B79                 mov     rcx, r13
.text:0000000000003B7C                 mov     rax, rbx
.text:0000000000003B7F                 mov     rdi, rbx
.text:0000000000003B82                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003B88                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003B8D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003B95                 cmp     rsi, r11
.text:0000000000003B98                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003B9E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003BA6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003BAB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003BB0                 jnb     short loc_3BD8
.text:0000000000003BB2                 cmp     byte ptr [rcx], 0
.text:0000000000003BB5                 jnz     short loc_3BC7
.text:0000000000003BB7                 jmp     short loc_3BD8
.text:0000000000003BB7 ; ---------------------------------------------------------------------------
.text:0000000000003BB9                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003BC0                 cmp     byte ptr [r9+rax], 0
.text:0000000000003BC5                 jz      short loc_3BD5
.text:0000000000003BC7
.text:0000000000003BC7 loc_3BC7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003BC7                 add     rax, 1
.text:0000000000003BCB                 lea     rdx, [rbp+rax+0]
.text:0000000000003BD0                 cmp     r11, rdx
.text:0000000000003BD3                 ja      short loc_3BC0
.text:0000000000003BD5
.text:0000000000003BD5 loc_3BD5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003BD5                 mov     rdi, rax
.text:0000000000003BD8
.text:0000000000003BD8 loc_3BD8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003BD8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003BD8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003BDD                 xor     r12d, r12d
.text:0000000000003BE0                 jmp     loc_3646
.text:0000000000003BE5 ; ---------------------------------------------------------------------------
.text:0000000000003BE5
.text:0000000000003BE5 loc_3BE5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003BE5                 mov     rdi, rbx
.text:0000000000003BE8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003BEE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003BF3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003BF9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003C01                 xor     r12d, r12d
.text:0000000000003C04                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003C09                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003C0E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003C13                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003C18                 jmp     loc_3646
.text:0000000000003C1D ; ---------------------------------------------------------------------------
.text:0000000000003C1D
.text:0000000000003C1D loc_3C1D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003C1D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003C22                 movzx   eax, byte ptr [rdx]
.text:0000000000003C25                 test    al, al
.text:0000000000003C27                 jz      loc_3A5C
.text:0000000000003C2D                 nop     dword ptr [rax]
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003C30                 cmp     r13, r15
.text:0000000000003C33                 jbe     short loc_3C39
.text:0000000000003C35                 mov     [r14+r15], al
.text:0000000000003C39
.text:0000000000003C39 loc_3C39:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003C39                 add     r15, 1
.text:0000000000003C3D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003C42                 test    al, al
.text:0000000000003C44                 jnz     short loc_3C30
.text:0000000000003C46                 jmp     loc_3A5C
.text:0000000000003C4B ; ---------------------------------------------------------------------------
.text:0000000000003C4B
.text:0000000000003C4B loc_3C4B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003C4B                 mov     eax, edx
.text:0000000000003C4D                 jmp     loc_31A7
.text:0000000000003C52 ; ---------------------------------------------------------------------------
.text:0000000000003C52
.text:0000000000003C52 loc_3C52:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003C52                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003C56                 cmp     bl, 3Eh ; '>'
.text:0000000000003C59                 ja      loc_34D0
.text:0000000000003C5F                 mov     rax, 7000A38200000000h
.text:0000000000003C69                 bt      rax, rbx
.text:0000000000003C6D                 jnb     loc_34D0
.text:0000000000003C73                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003C78                 jnz     loc_3E62
.text:0000000000003C7E                 cmp     r13, r15
.text:0000000000003C81                 jbe     short loc_3C88
.text:0000000000003C83                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003C88
.text:0000000000003C88 loc_3C88:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003C88                 lea     rax, [r15+1]
.text:0000000000003C8C                 cmp     r13, rax
.text:0000000000003C8F                 jbe     short loc_3C97
.text:0000000000003C91                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003C97
.text:0000000000003C97 loc_3C97:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003C97                 lea     rax, [r15+2]
.text:0000000000003C9B                 cmp     r13, rax
.text:0000000000003C9E                 jbe     short loc_3CA6
.text:0000000000003CA0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003CA6
.text:0000000000003CA6 loc_3CA6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003CA6                 lea     rax, [r15+3]
.text:0000000000003CAA                 cmp     r13, rax
.text:0000000000003CAD                 jbe     short loc_3CB5
.text:0000000000003CAF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003CB5
.text:0000000000003CB5 loc_3CB5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003CB5                 add     r15, 4
.text:0000000000003CB9                 xor     edx, edx
.text:0000000000003CBB                 xor     r12d, r12d
.text:0000000000003CBE                 xor     eax, eax
.text:0000000000003CC0                 mov     rbp, rcx
.text:0000000000003CC3                 jmp     loc_2E88
.text:0000000000003CC8 ; ---------------------------------------------------------------------------
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003CC8                                         ; DATA XREF: .rodata:jpt_2CF1↓o
.text:0000000000003CC8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003CCA                 jz      loc_3E58
.text:0000000000003CD0                 lea     rax, asc_5C4D   ; "'"
.text:0000000000003CD7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003CDC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003CE1                 xor     r12d, r12d
.text:0000000000003CE4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003CED                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003CF2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003CF7                 mov     [rsp+0E8h+n], 1
.text:0000000000003D00                 xor     r15d, r15d
.text:0000000000003D03                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D08                 jmp     loc_2D33
.text:0000000000003D08 ; ---------------------------------------------------------------------------
.text:0000000000003D0D                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003D10                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003D10                 mov     rbp, r11
.text:0000000000003D13                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003D18                 jmp     loc_37E9
.text:0000000000003D1D ; ---------------------------------------------------------------------------
.text:0000000000003D1D
.text:0000000000003D1D loc_3D1D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003D1D                 lea     rax, unk_5C4B
.text:0000000000003D24                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D29                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D2E                 xor     r12d, r12d
.text:0000000000003D31                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D3A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D3F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D44                 mov     [rsp+0E8h+n], 1
.text:0000000000003D4D                 xor     r15d, r15d
.text:0000000000003D50                 mov     [rsp+0E8h+s2], rax
.text:0000000000003D55                 jmp     loc_2D33
.text:0000000000003D5A ; ---------------------------------------------------------------------------
.text:0000000000003D5A
.text:0000000000003D5A loc_3D5A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003D5A                 mov     eax, edx
.text:0000000000003D5C
.text:0000000000003D5C loc_3D5C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003D5C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003D5C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003D61                 test    rbx, rbx
.text:0000000000003D64                 jz      short loc_3D92
.text:0000000000003D66                 test    al, al
.text:0000000000003D68                 jz      short loc_3D92
.text:0000000000003D6A                 movzx   ecx, byte ptr [rbx]
.text:0000000000003D6D                 mov     rax, rbx
.text:0000000000003D70                 test    cl, cl
.text:0000000000003D72                 jz      short loc_3D92
.text:0000000000003D74                 mov     rdx, r15
.text:0000000000003D77                 sub     rax, r15
.text:0000000000003D7A
.text:0000000000003D7A loc_3D7A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003D7A                 cmp     r13, rdx
.text:0000000000003D7D                 jbe     short loc_3D83
.text:0000000000003D7F                 mov     [r14+rdx], cl
.text:0000000000003D83
.text:0000000000003D83 loc_3D83:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003D83                 add     rdx, 1
.text:0000000000003D87                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000003D8B                 test    cl, cl
.text:0000000000003D8D                 jnz     short loc_3D7A
.text:0000000000003D8F                 mov     r15, rdx
.text:0000000000003D92
.text:0000000000003D92 loc_3D92:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003D92                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003D92                 cmp     r13, r15
.text:0000000000003D95                 jbe     loc_3839
.text:0000000000003D9B                 mov     byte ptr [r14+r15], 0
.text:0000000000003DA0                 jmp     loc_3839
.text:0000000000003DA5 ; ---------------------------------------------------------------------------
.text:0000000000003DA5
.text:0000000000003DA5 loc_3DA5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003DA5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003DAA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DAF                 mov     rbp, r11
.text:0000000000003DB2                 setz    al
.text:0000000000003DB5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DB9                 jmp     loc_37E9
.text:0000000000003DBE ; ---------------------------------------------------------------------------
.text:0000000000003DBE
.text:0000000000003DBE loc_3DBE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000003DBE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DC2                 mov     rdi, rcx
.text:0000000000003DC5                 call    gettext_quote
.text:0000000000003DCA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003DCF                 jmp     loc_3A26
.text:0000000000003DD4 ; ---------------------------------------------------------------------------
.text:0000000000003DD4
.text:0000000000003DD4 loc_3DD4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003DD4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003DD8                 mov     rdi, rcx
.text:0000000000003DDB                 call    gettext_quote
.text:0000000000003DE0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003DE5                 jmp     loc_3A51
.text:0000000000003DEA ; ---------------------------------------------------------------------------
.text:0000000000003DEA
.text:0000000000003DEA loc_3DEA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000003DEA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DEF                 mov     rbp, r11
.text:0000000000003DF2                 mov     eax, edx
.text:0000000000003DF4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DF8                 jmp     loc_37E9
.text:0000000000003DFD ; ---------------------------------------------------------------------------
.text:0000000000003DFD
.text:0000000000003DFD loc_3DFD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000003DFD                 sub     rsp, 8
.text:0000000000003E01                 mov     r8d, 5
.text:0000000000003E07                 mov     rcx, r11
.text:0000000000003E0A                 push    [rsp+0F0h+var_88]
.text:0000000000003E0E                 push    [rsp+0F8h+var_80]
.text:0000000000003E12                 mov     rdi, r14
.text:0000000000003E15                 push    [rsp+100h+var_C8]
.text:0000000000003E19                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003E21                 mov     rdx, [rsp+108h+s]
.text:0000000000003E26                 mov     rsi, [rsp+108h+var_98]
.text:0000000000003E2B                 call    quotearg_buffer_restyled
.text:0000000000003E30                 add     rsp, 20h
.text:0000000000003E34                 mov     r15, rax
.text:0000000000003E37                 jmp     loc_3839
.text:0000000000003E3C ; ---------------------------------------------------------------------------
.text:0000000000003E3C
.text:0000000000003E3C loc_3E3C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000003E3C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003E41                 jmp     loc_3D5C
.text:0000000000003E46 ; ---------------------------------------------------------------------------
.text:0000000000003E46
.text:0000000000003E46 loc_3E46:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003E46                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003E4E                 jmp     loc_37E9
.text:0000000000003E53 ; ---------------------------------------------------------------------------
.text:0000000000003E53
.text:0000000000003E53 loc_3E53:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003E53                 call    ___stack_chk_fail
.text:0000000000003E58 ; ---------------------------------------------------------------------------
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003E58                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003E5D                 jmp     loc_38D1
.text:0000000000003E62 ; ---------------------------------------------------------------------------
.text:0000000000003E62
.text:0000000000003E62 loc_3E62:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003E62                 mov     rbp, r11
.text:0000000000003E65                 jmp     loc_3800
.text:0000000000003E6A ; ---------------------------------------------------------------------------
.text:0000000000003E6A
.text:0000000000003E6A loc_3E6A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000003E6A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003E6F                 xor     eax, eax
.text:0000000000003E71                 xor     r12d, r12d
.text:0000000000003E74                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003E7D                 jmp     loc_3424
.text:0000000000003E82 ; ---------------------------------------------------------------------------
.text:0000000000003E82
.text:0000000000003E82 loc_3E82:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003E82                 mov     rdx, r13
.text:0000000000003E85                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003E8A                 jmp     loc_3482
.text:0000000000003E8F ; ---------------------------------------------------------------------------
.text:0000000000003E8F
.text:0000000000003E8F def_2CF1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000003E8F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000003E8F ; } // starts at 2C60
.text:0000000000003E8F quotearg_buffer_restyled endp
.text:0000000000003E8F
.text:0000000000003E8F ; ---------------------------------------------------------------------------
.text:0000000000003E94                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003EA0                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003EA0
.text:0000000000003EA0 var_50          = qword ptr -50h
.text:0000000000003EA0 var_48          = qword ptr -48h
.text:0000000000003EA0 var_40          = dword ptr -40h
.text:0000000000003EA0 var_3C          = dword ptr -3Ch
.text:0000000000003EA0
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 push    r15
.text:0000000000003EA2                 push    r14
.text:0000000000003EA4                 movsxd  r15, edi
.text:0000000000003EA7                 push    r13
.text:0000000000003EA9                 push    r12
.text:0000000000003EAB                 mov     r14, rdx
.text:0000000000003EAE                 push    rbp
.text:0000000000003EAF                 push    rbx
.text:0000000000003EB0                 mov     rbp, rcx
.text:0000000000003EB3                 sub     rsp, 28h
.text:0000000000003EB7                 mov     [rsp+58h+var_50], rsi
.text:0000000000003EBC                 call    ___errno_location
.text:0000000000003EC1                 mov     r13, rax
.text:0000000000003EC4                 mov     eax, [rax]
.text:0000000000003EC6                 test    r15d, r15d
.text:0000000000003EC9                 mov     rbx, cs:slotvec
.text:0000000000003ED0                 mov     [rsp+58h+var_40], eax
.text:0000000000003ED4                 js      loc_4041
.text:0000000000003EDA                 cmp     cs:nslots, r15d
.text:0000000000003EE1                 jg      short loc_3F45
.text:0000000000003EE3                 cmp     r15d, 7FFFFFFFh
.text:0000000000003EEA                 jz      loc_4046
.text:0000000000003EF0                 lea     r12d, [r15+1]
.text:0000000000003EF4                 lea     rax, slotvec0
.text:0000000000003EFB                 movsxd  rsi, r12d
.text:0000000000003EFE                 shl     rsi, 4
.text:0000000000003F02                 cmp     rbx, rax
.text:0000000000003F05                 jz      loc_4020
.text:0000000000003F0B                 mov     rdi, rbx
.text:0000000000003F0E                 call    xrealloc
.text:0000000000003F13                 mov     rbx, rax
.text:0000000000003F16                 mov     cs:slotvec, rax
.text:0000000000003F1D
.text:0000000000003F1D loc_3F1D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000003F1D                 movsxd  rdi, cs:nslots
.text:0000000000003F24                 mov     edx, r12d
.text:0000000000003F27                 xor     esi, esi        ; c
.text:0000000000003F29                 sub     edx, edi
.text:0000000000003F2B                 shl     rdi, 4
.text:0000000000003F2F                 movsxd  rdx, edx
.text:0000000000003F32                 add     rdi, rbx        ; s
.text:0000000000003F35                 shl     rdx, 4          ; n
.text:0000000000003F39                 call    _memset
.text:0000000000003F3E                 mov     cs:nslots, r12d
.text:0000000000003F45
.text:0000000000003F45 loc_3F45:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003F45                 mov     eax, [rbp+4]
.text:0000000000003F48                 shl     r15, 4
.text:0000000000003F4C                 sub     rsp, 8
.text:0000000000003F50                 add     rbx, r15
.text:0000000000003F53                 lea     r15, [rbp+8]
.text:0000000000003F57                 mov     r8d, [rbp+0]
.text:0000000000003F5B                 mov     r11, [rbx]
.text:0000000000003F5E                 mov     r12, [rbx+8]
.text:0000000000003F62                 mov     rcx, r14
.text:0000000000003F65                 or      eax, 1
.text:0000000000003F68                 mov     [rsp+60h+var_3C], eax
.text:0000000000003F6C                 push    qword ptr [rbp+30h]
.text:0000000000003F6F                 mov     r9d, eax
.text:0000000000003F72                 push    qword ptr [rbp+28h]
.text:0000000000003F75                 push    r15
.text:0000000000003F77                 mov     rsi, r11
.text:0000000000003F7A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003F7F                 mov     rdi, r12
.text:0000000000003F82                 mov     [rsp+78h+var_48], r11
.text:0000000000003F87                 call    quotearg_buffer_restyled
.text:0000000000003F8C                 add     rsp, 20h
.text:0000000000003F90                 mov     r11, [rsp+58h+var_48]
.text:0000000000003F95                 cmp     r11, rax
.text:0000000000003F98                 ja      short loc_4001
.text:0000000000003F9A                 lea     rsi, [rax+1]
.text:0000000000003F9E                 lea     rax, slot0
.text:0000000000003FA5                 cmp     r12, rax
.text:0000000000003FA8                 mov     [rbx], rsi
.text:0000000000003FAB                 jz      short loc_3FBF
.text:0000000000003FAD                 mov     rdi, r12        ; ptr
.text:0000000000003FB0                 mov     [rsp+58h+var_48], rsi
.text:0000000000003FB5                 call    _free
.text:0000000000003FBA                 mov     rsi, [rsp+58h+var_48]
.text:0000000000003FBF
.text:0000000000003FBF loc_3FBF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000003FBF                 mov     rdi, rsi
.text:0000000000003FC2                 mov     [rsp+58h+var_48], rsi
.text:0000000000003FC7                 call    xmalloc
.text:0000000000003FCC                 sub     rsp, 8
.text:0000000000003FD0                 mov     [rbx+8], rax
.text:0000000000003FD4                 mov     r8d, [rbp+0]
.text:0000000000003FD8                 push    qword ptr [rbp+30h]
.text:0000000000003FDB                 push    qword ptr [rbp+28h]
.text:0000000000003FDE                 mov     rcx, r14
.text:0000000000003FE1                 push    r15
.text:0000000000003FE3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003FE8                 mov     rdi, rax
.text:0000000000003FEB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003FF0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003FF5                 mov     r12, rax
.text:0000000000003FF8                 call    quotearg_buffer_restyled
.text:0000000000003FFD                 add     rsp, 20h
.text:0000000000004001
.text:0000000000004001 loc_4001:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004001                 mov     eax, [rsp+58h+var_40]
.text:0000000000004005                 mov     [r13+0], eax
.text:0000000000004009                 add     rsp, 28h
.text:000000000000400D                 mov     rax, r12
.text:0000000000004010                 pop     rbx
.text:0000000000004011                 pop     rbp
.text:0000000000004012                 pop     r12
.text:0000000000004014                 pop     r13
.text:0000000000004016                 pop     r14
.text:0000000000004018                 pop     r15
.text:000000000000401A                 retn
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401B                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000004020                 xor     edi, edi
.text:0000000000004022                 call    xrealloc
.text:0000000000004027                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000402F                 mov     rbx, rax
.text:0000000000004032                 mov     cs:slotvec, rax
.text:0000000000004039                 movups  xmmword ptr [rax], xmm0
.text:000000000000403C                 jmp     loc_3F1D
.text:0000000000004041 ; ---------------------------------------------------------------------------
.text:0000000000004041
.text:0000000000004041 loc_4041:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000004041                 call    _abort
.text:0000000000004046 ; ---------------------------------------------------------------------------
.text:0000000000004046
.text:0000000000004046 loc_4046:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000004046                 call    xalloc_die
.text:0000000000004046 ; } // starts at 3EA0
.text:0000000000004046 quotearg_n_options endp
.text:0000000000004046
.text:0000000000004046 ; ---------------------------------------------------------------------------
.text:000000000000404B                 align 10h
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050 ; Attributes: info_from_lumina
.text:0000000000004050
.text:0000000000004050 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000004050                 public clone_quoting_options
.text:0000000000004050 clone_quoting_options proc near
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 push    r12
.text:0000000000004052                 push    rbp
.text:0000000000004053                 push    rbx
.text:0000000000004054                 mov     rbx, rdi
.text:0000000000004057                 call    ___errno_location
.text:000000000000405C                 mov     r12d, [rax]
.text:000000000000405F                 mov     rbp, rax
.text:0000000000004062                 lea     rax, default_quoting_options
.text:0000000000004069                 test    rbx, rbx
.text:000000000000406C                 mov     esi, 38h ; '8'  ; n
.text:0000000000004071                 cmovz   rbx, rax
.text:0000000000004075                 mov     rdi, rbx        ; src
.text:0000000000004078                 call    xmemdup
.text:000000000000407D                 mov     [rbp+0], r12d
.text:0000000000004081                 pop     rbx
.text:0000000000004082                 pop     rbp
.text:0000000000004083                 pop     r12
.text:0000000000004085                 retn
.text:0000000000004085 ; } // starts at 4050
.text:0000000000004085 clone_quoting_options endp
.text:0000000000004085
.text:0000000000004085 ; ---------------------------------------------------------------------------
.text:0000000000004086                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090
.text:0000000000004090                 public get_quoting_style
.text:0000000000004090 get_quoting_style proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 lea     rax, default_quoting_options
.text:0000000000004097                 test    rdi, rdi
.text:000000000000409A                 cmovz   rdi, rax
.text:000000000000409E                 mov     eax, [rdi]
.text:00000000000040A0                 retn
.text:00000000000040A0 ; } // starts at 4090
.text:00000000000040A0 get_quoting_style endp
.text:00000000000040A0
.text:00000000000040A0 ; ---------------------------------------------------------------------------
.text:00000000000040A1                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0
.text:00000000000040B0                 public set_quoting_style
.text:00000000000040B0 set_quoting_style proc near
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 lea     rax, default_quoting_options
.text:00000000000040B7                 test    rdi, rdi
.text:00000000000040BA                 cmovz   rdi, rax
.text:00000000000040BE                 mov     [rdi], esi
.text:00000000000040C0                 retn
.text:00000000000040C0 ; } // starts at 40B0
.text:00000000000040C0 set_quoting_style endp
.text:00000000000040C0
.text:00000000000040C0 ; ---------------------------------------------------------------------------
.text:00000000000040C1                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0 ; Attributes: info_from_lumina
.text:00000000000040D0
.text:00000000000040D0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000040D0                 public set_char_quoting
.text:00000000000040D0 set_char_quoting proc near
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 lea     rax, default_quoting_options
.text:00000000000040D7                 test    rdi, rdi
.text:00000000000040DA                 mov     ecx, esi
.text:00000000000040DC                 cmovz   rdi, rax
.text:00000000000040E0                 mov     eax, esi
.text:00000000000040E2                 and     ecx, 1Fh
.text:00000000000040E5                 shr     al, 5
.text:00000000000040E8                 movzx   eax, al
.text:00000000000040EB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000040F0                 mov     esi, [rdi]
.text:00000000000040F2                 mov     eax, esi
.text:00000000000040F4                 shr     eax, cl
.text:00000000000040F6                 xor     edx, eax
.text:00000000000040F8                 and     eax, 1
.text:00000000000040FB                 and     edx, 1
.text:00000000000040FE                 shl     edx, cl
.text:0000000000004100                 xor     edx, esi
.text:0000000000004102                 mov     [rdi], edx
.text:0000000000004104                 retn
.text:0000000000004104 ; } // starts at 40D0
.text:0000000000004104 set_char_quoting endp
.text:0000000000004104
.text:0000000000004104 ; ---------------------------------------------------------------------------
.text:0000000000004105                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110
.text:0000000000004110                 public set_quoting_flags
.text:0000000000004110 set_quoting_flags proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 lea     rax, default_quoting_options
.text:0000000000004117                 test    rdi, rdi
.text:000000000000411A                 cmovz   rdi, rax
.text:000000000000411E                 mov     eax, [rdi+4]
.text:0000000000004121                 mov     [rdi+4], esi
.text:0000000000004124                 retn
.text:0000000000004124 ; } // starts at 4110
.text:0000000000004124 set_quoting_flags endp
.text:0000000000004124
.text:0000000000004124 ; ---------------------------------------------------------------------------
.text:0000000000004125                 align 10h
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130 ; Attributes: info_from_lumina
.text:0000000000004130
.text:0000000000004130 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000004130                 public set_custom_quoting
.text:0000000000004130 set_custom_quoting proc near
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 lea     rax, default_quoting_options
.text:0000000000004137                 test    rdi, rdi
.text:000000000000413A                 cmovz   rdi, rax
.text:000000000000413E                 test    rsi, rsi
.text:0000000000004141                 mov     dword ptr [rdi], 0Ah
.text:0000000000004147                 jz      short loc_4157
.text:0000000000004149                 test    rdx, rdx
.text:000000000000414C                 jz      short loc_4157
.text:000000000000414E                 mov     [rdi+28h], rsi
.text:0000000000004152                 mov     [rdi+30h], rdx
.text:0000000000004156                 retn
.text:0000000000004157 ; ---------------------------------------------------------------------------
.text:0000000000004157
.text:0000000000004157 loc_4157:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000004157                                         ; set_custom_quoting+1C↑j
.text:0000000000004157                 sub     rsp, 8
.text:000000000000415B                 call    _abort
.text:000000000000415B ; } // starts at 4130
.text:000000000000415B set_custom_quoting endp
.text:000000000000415B
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160 ; Attributes: info_from_lumina
.text:0000000000004160
.text:0000000000004160 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000004160                 public quotearg_buffer
.text:0000000000004160 quotearg_buffer proc near
.text:0000000000004160
.text:0000000000004160 var_40          = qword ptr -40h
.text:0000000000004160
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 push    r15
.text:0000000000004162                 push    r14
.text:0000000000004164                 lea     rax, default_quoting_options
.text:000000000000416B                 push    r13
.text:000000000000416D                 push    r12
.text:000000000000416F                 mov     r13, rdi
.text:0000000000004172                 push    rbp
.text:0000000000004173                 push    rbx
.text:0000000000004174                 mov     rbx, r8
.text:0000000000004177                 mov     r14, rsi
.text:000000000000417A                 mov     r15, rdx
.text:000000000000417D                 sub     rsp, 18h
.text:0000000000004181                 test    r8, r8
.text:0000000000004184                 cmovz   rbx, rax
.text:0000000000004188                 mov     [rsp+48h+var_40], rcx
.text:000000000000418D                 call    ___errno_location
.text:0000000000004192                 mov     r12d, [rax]
.text:0000000000004195                 mov     rbp, rax
.text:0000000000004198                 lea     rax, [rbx+8]
.text:000000000000419C                 sub     rsp, 8
.text:00000000000041A0                 mov     r9d, [rbx+4]
.text:00000000000041A4                 push    qword ptr [rbx+30h]
.text:00000000000041A7                 mov     r8d, [rbx]
.text:00000000000041AA                 push    qword ptr [rbx+28h]
.text:00000000000041AD                 mov     rdx, r15
.text:00000000000041B0                 push    rax
.text:00000000000041B1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000041B6                 mov     rsi, r14
.text:00000000000041B9                 mov     rdi, r13
.text:00000000000041BC                 call    quotearg_buffer_restyled
.text:00000000000041C1                 mov     [rbp+0], r12d
.text:00000000000041C5                 add     rsp, 38h
.text:00000000000041C9                 pop     rbx
.text:00000000000041CA                 pop     rbp
.text:00000000000041CB                 pop     r12
.text:00000000000041CD                 pop     r13
.text:00000000000041CF                 pop     r14
.text:00000000000041D1                 pop     r15
.text:00000000000041D3                 retn
.text:00000000000041D3 ; } // starts at 4160
.text:00000000000041D3 quotearg_buffer endp
.text:00000000000041D3
.text:00000000000041D3 ; ---------------------------------------------------------------------------
.text:00000000000041D4                 align 20h
.text:00000000000041E0
.text:00000000000041E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041E0
.text:00000000000041E0 ; Attributes: info_from_lumina
.text:00000000000041E0
.text:00000000000041E0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000041E0                 public quotearg_alloc_mem
.text:00000000000041E0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000041E0
.text:00000000000041E0 var_5C          = dword ptr -5Ch
.text:00000000000041E0 var_58          = qword ptr -58h
.text:00000000000041E0 var_50          = qword ptr -50h
.text:00000000000041E0 var_48          = qword ptr -48h
.text:00000000000041E0 var_40          = qword ptr -40h
.text:00000000000041E0
.text:00000000000041E0 ; __unwind {
.text:00000000000041E0                 push    r15
.text:00000000000041E2                 push    r14
.text:00000000000041E4                 lea     rax, default_quoting_options
.text:00000000000041EB                 push    r13
.text:00000000000041ED                 push    r12
.text:00000000000041EF                 mov     r12, rdx
.text:00000000000041F2                 push    rbp
.text:00000000000041F3                 push    rbx
.text:00000000000041F4                 mov     rbx, rcx
.text:00000000000041F7                 mov     r14, rdi
.text:00000000000041FA                 mov     r15, rsi
.text:00000000000041FD                 sub     rsp, 38h
.text:0000000000004201                 test    rcx, rcx
.text:0000000000004204                 cmovz   rbx, rax
.text:0000000000004208                 xor     ebp, ebp
.text:000000000000420A                 call    ___errno_location
.text:000000000000420F                 test    r12, r12
.text:0000000000004212                 mov     r13, rax
.text:0000000000004215                 mov     eax, [rax]
.text:0000000000004217                 setz    bpl
.text:000000000000421B                 or      ebp, [rbx+4]
.text:000000000000421E                 lea     r10, [rbx+8]
.text:0000000000004222                 sub     rsp, 8
.text:0000000000004226                 mov     r8d, [rbx]
.text:0000000000004229                 mov     rcx, r15
.text:000000000000422C                 mov     [rsp+70h+var_5C], eax
.text:0000000000004230                 push    qword ptr [rbx+30h]
.text:0000000000004233                 mov     rdx, r14
.text:0000000000004236                 push    qword ptr [rbx+28h]
.text:0000000000004239                 push    r10
.text:000000000000423B                 xor     esi, esi
.text:000000000000423D                 mov     r9d, ebp
.text:0000000000004240                 xor     edi, edi
.text:0000000000004242                 mov     [rsp+88h+var_48], r10
.text:0000000000004247                 call    quotearg_buffer_restyled
.text:000000000000424C                 lea     rsi, [rax+1]
.text:0000000000004250                 mov     [rsp+88h+var_40], rax
.text:0000000000004255                 add     rsp, 20h
.text:0000000000004259                 mov     rdi, rsi
.text:000000000000425C                 mov     [rsp+68h+var_50], rsi
.text:0000000000004261                 call    xmalloc
.text:0000000000004266                 mov     [rsp+68h+var_58], rax
.text:000000000000426B                 sub     rsp, 8
.text:000000000000426F                 push    qword ptr [rbx+30h]
.text:0000000000004272                 push    qword ptr [rbx+28h]
.text:0000000000004275                 mov     r10, [rsp+80h+var_48]
.text:000000000000427A                 mov     r9d, ebp
.text:000000000000427D                 mov     r8d, [rbx]
.text:0000000000004280                 mov     rcx, r15
.text:0000000000004283                 mov     rdx, r14
.text:0000000000004286                 mov     rdi, rax
.text:0000000000004289                 push    r10
.text:000000000000428B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004290                 call    quotearg_buffer_restyled
.text:0000000000004295                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004299                 add     rsp, 20h
.text:000000000000429D                 test    r12, r12
.text:00000000000042A0                 mov     [r13+0], eax
.text:00000000000042A4                 jz      short loc_42AF
.text:00000000000042A6                 mov     r11, [rsp+68h+var_40]
.text:00000000000042AB                 mov     [r12], r11
.text:00000000000042AF
.text:00000000000042AF loc_42AF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000042AF                 mov     rax, [rsp+68h+var_58]
.text:00000000000042B4                 add     rsp, 38h
.text:00000000000042B8                 pop     rbx
.text:00000000000042B9                 pop     rbp
.text:00000000000042BA                 pop     r12
.text:00000000000042BC                 pop     r13
.text:00000000000042BE                 pop     r14
.text:00000000000042C0                 pop     r15
.text:00000000000042C2                 retn
.text:00000000000042C2 ; } // starts at 41E0
.text:00000000000042C2 quotearg_alloc_mem endp
.text:00000000000042C2
.text:00000000000042C2 ; ---------------------------------------------------------------------------
.text:00000000000042C3                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0
.text:00000000000042D0                 public quotearg_alloc
.text:00000000000042D0 quotearg_alloc  proc near
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 mov     rcx, rdx
.text:00000000000042D3                 xor     edx, edx
.text:00000000000042D5                 jmp     quotearg_alloc_mem
.text:00000000000042D5 ; } // starts at 42D0
.text:00000000000042D5 quotearg_alloc  endp
.text:00000000000042D5
.text:00000000000042D5 ; ---------------------------------------------------------------------------
.text:00000000000042DA                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void __cdecl quotearg_free()
.text:00000000000042E0                 public quotearg_free
.text:00000000000042E0 quotearg_free   proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 mov     eax, cs:nslots
.text:00000000000042E6                 push    r12
.text:00000000000042E8                 mov     r12, cs:slotvec
.text:00000000000042EF                 push    rbp
.text:00000000000042F0                 push    rbx
.text:00000000000042F1                 cmp     eax, 1
.text:00000000000042F4                 jle     short loc_4321
.text:00000000000042F6                 sub     eax, 2
.text:00000000000042F9                 lea     rbx, [r12+18h]
.text:00000000000042FE                 shl     rax, 4
.text:0000000000004302                 lea     rbp, [r12+rax+28h]
.text:0000000000004307                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004310
.text:0000000000004310 loc_4310:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004310                 mov     rdi, [rbx]      ; ptr
.text:0000000000004313                 add     rbx, 10h
.text:0000000000004317                 call    _free
.text:000000000000431C                 cmp     rbx, rbp
.text:000000000000431F                 jnz     short loc_4310
.text:0000000000004321
.text:0000000000004321 loc_4321:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000004321                 mov     rdi, [r12+8]    ; ptr
.text:0000000000004326                 lea     rbx, slot0
.text:000000000000432D                 cmp     rdi, rbx
.text:0000000000004330                 jz      short loc_4349
.text:0000000000004332                 call    _free
.text:0000000000004337                 mov     cs:slotvec0, 100h
.text:0000000000004342                 mov     cs:off_208078, rbx
.text:0000000000004349
.text:0000000000004349 loc_4349:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000004349                 lea     rbx, slotvec0
.text:0000000000004350                 cmp     r12, rbx
.text:0000000000004353                 jz      short loc_4364
.text:0000000000004355                 mov     rdi, r12        ; ptr
.text:0000000000004358                 call    _free
.text:000000000000435D                 mov     cs:slotvec, rbx
.text:0000000000004364
.text:0000000000004364 loc_4364:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000004364                 pop     rbx
.text:0000000000004365                 mov     cs:nslots, 1
.text:000000000000436F                 pop     rbp
.text:0000000000004370                 pop     r12
.text:0000000000004372                 retn
.text:0000000000004372 ; } // starts at 42E0
.text:0000000000004372 quotearg_free   endp
.text:0000000000004372
.text:0000000000004372 ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380
.text:0000000000004380                 public quotearg_n
.text:0000000000004380 quotearg_n      proc near
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rcx, default_quoting_options
.text:0000000000004387                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000438E                 jmp     quotearg_n_options
.text:000000000000438E ; } // starts at 4380
.text:000000000000438E quotearg_n      endp
.text:000000000000438E
.text:000000000000438E ; ---------------------------------------------------------------------------
.text:0000000000004393                 align 20h
.text:00000000000043A0
.text:00000000000043A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043A0
.text:00000000000043A0
.text:00000000000043A0                 public quotearg_n_mem
.text:00000000000043A0 quotearg_n_mem  proc near
.text:00000000000043A0 ; __unwind {
.text:00000000000043A0                 lea     rcx, default_quoting_options
.text:00000000000043A7                 jmp     quotearg_n_options
.text:00000000000043A7 ; } // starts at 43A0
.text:00000000000043A7 quotearg_n_mem  endp
.text:00000000000043A7
.text:00000000000043A7 ; ---------------------------------------------------------------------------
.text:00000000000043AC                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0                 public quotearg
.text:00000000000043B0 quotearg        proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rcx, default_quoting_options
.text:00000000000043B7                 mov     rsi, rdi
.text:00000000000043BA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000043C1                 xor     edi, edi
.text:00000000000043C3                 jmp     quotearg_n_options
.text:00000000000043C3 ; } // starts at 43B0
.text:00000000000043C3 quotearg        endp
.text:00000000000043C3
.text:00000000000043C3 ; ---------------------------------------------------------------------------
.text:00000000000043C8                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0
.text:00000000000043D0                 public quotearg_mem
.text:00000000000043D0 quotearg_mem    proc near
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 lea     rcx, default_quoting_options
.text:00000000000043D7                 mov     rdx, rsi
.text:00000000000043DA                 mov     rsi, rdi
.text:00000000000043DD                 xor     edi, edi
.text:00000000000043DF                 jmp     quotearg_n_options
.text:00000000000043DF ; } // starts at 43D0
.text:00000000000043DF quotearg_mem    endp
.text:00000000000043DF
.text:00000000000043DF ; ---------------------------------------------------------------------------
.text:00000000000043E4                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0 ; Attributes: info_from_lumina
.text:00000000000043F0
.text:00000000000043F0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000043F0                 public quotearg_n_style
.text:00000000000043F0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000043F0
.text:00000000000043F0 var_48          = dword ptr -48h
.text:00000000000043F0 var_44          = qword ptr -44h
.text:00000000000043F0 var_3C          = qword ptr -3Ch
.text:00000000000043F0 var_34          = qword ptr -34h
.text:00000000000043F0 var_2C          = qword ptr -2Ch
.text:00000000000043F0 var_24          = qword ptr -24h
.text:00000000000043F0 var_1C          = qword ptr -1Ch
.text:00000000000043F0 var_14          = dword ptr -14h
.text:00000000000043F0 var_10          = qword ptr -10h
.text:00000000000043F0
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 sub     rsp, 48h
.text:00000000000043F4                 mov     rax, rdx
.text:00000000000043F7                 mov     rdx, fs:28h
.text:0000000000004400                 mov     [rsp+48h+var_10], rdx
.text:0000000000004405                 xor     edx, edx
.text:0000000000004407                 cmp     esi, 0Ah
.text:000000000000440A                 jz      short loc_4474
.text:000000000000440C                 mov     [rsp+48h+var_48], esi
.text:000000000000440F                 mov     rcx, rsp
.text:0000000000004412                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004419                 mov     rsi, rax
.text:000000000000441C                 mov     [rsp+48h+var_44], 0
.text:0000000000004425                 mov     [rsp+48h+var_3C], 0
.text:000000000000442E                 mov     [rsp+48h+var_34], 0
.text:0000000000004437                 mov     [rsp+48h+var_2C], 0
.text:0000000000004440                 mov     [rsp+48h+var_24], 0
.text:0000000000004449                 mov     [rsp+48h+var_1C], 0
.text:0000000000004452                 mov     [rsp+48h+var_14], 0
.text:000000000000445A                 call    quotearg_n_options
.text:000000000000445F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004464                 xor     rcx, fs:28h
.text:000000000000446D                 jnz     short loc_4479
.text:000000000000446F                 add     rsp, 48h
.text:0000000000004473                 retn
.text:0000000000004474 ; ---------------------------------------------------------------------------
.text:0000000000004474
.text:0000000000004474 loc_4474:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000004474                 call    _abort
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:0000000000004479
.text:0000000000004479 loc_4479:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000004479                 call    ___stack_chk_fail
.text:0000000000004479 ; } // starts at 43F0
.text:0000000000004479 quotearg_n_style endp
.text:0000000000004479
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:000000000000447E                 align 20h
.text:0000000000004480
.text:0000000000004480 ; =============== S U B R O U T I N E =======================================
.text:0000000000004480
.text:0000000000004480 ; Attributes: info_from_lumina
.text:0000000000004480
.text:0000000000004480 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004480                 public quotearg_n_style_mem
.text:0000000000004480 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004480
.text:0000000000004480 var_48          = dword ptr -48h
.text:0000000000004480 var_44          = qword ptr -44h
.text:0000000000004480 var_3C          = qword ptr -3Ch
.text:0000000000004480 var_34          = qword ptr -34h
.text:0000000000004480 var_2C          = qword ptr -2Ch
.text:0000000000004480 var_24          = qword ptr -24h
.text:0000000000004480 var_1C          = qword ptr -1Ch
.text:0000000000004480 var_14          = dword ptr -14h
.text:0000000000004480 var_10          = qword ptr -10h
.text:0000000000004480
.text:0000000000004480 ; __unwind {
.text:0000000000004480                 sub     rsp, 48h
.text:0000000000004484                 mov     rax, rdx
.text:0000000000004487                 mov     rdx, rcx
.text:000000000000448A                 mov     rcx, fs:28h
.text:0000000000004493                 mov     [rsp+48h+var_10], rcx
.text:0000000000004498                 xor     ecx, ecx
.text:000000000000449A                 cmp     esi, 0Ah
.text:000000000000449D                 jz      short loc_4500
.text:000000000000449F                 mov     [rsp+48h+var_48], esi
.text:00000000000044A2                 mov     rcx, rsp
.text:00000000000044A5                 mov     rsi, rax
.text:00000000000044A8                 mov     [rsp+48h+var_44], 0
.text:00000000000044B1                 mov     [rsp+48h+var_3C], 0
.text:00000000000044BA                 mov     [rsp+48h+var_34], 0
.text:00000000000044C3                 mov     [rsp+48h+var_2C], 0
.text:00000000000044CC                 mov     [rsp+48h+var_24], 0
.text:00000000000044D5                 mov     [rsp+48h+var_1C], 0
.text:00000000000044DE                 mov     [rsp+48h+var_14], 0
.text:00000000000044E6                 call    quotearg_n_options
.text:00000000000044EB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000044F0                 xor     rdx, fs:28h
.text:00000000000044F9                 jnz     short loc_4505
.text:00000000000044FB                 add     rsp, 48h
.text:00000000000044FF                 retn
.text:0000000000004500 ; ---------------------------------------------------------------------------
.text:0000000000004500
.text:0000000000004500 loc_4500:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004500                 call    _abort
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004505                 call    ___stack_chk_fail
.text:0000000000004505 ; } // starts at 4480
.text:0000000000004505 quotearg_n_style_mem endp
.text:0000000000004505
.text:0000000000004505 ; ---------------------------------------------------------------------------
.text:000000000000450A                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510
.text:0000000000004510                 public quotearg_style
.text:0000000000004510 quotearg_style  proc near
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 mov     rdx, rsi
.text:0000000000004513                 mov     esi, edi
.text:0000000000004515                 xor     edi, edi
.text:0000000000004517                 jmp     quotearg_n_style
.text:0000000000004517 ; } // starts at 4510
.text:0000000000004517 quotearg_style  endp
.text:0000000000004517
.text:0000000000004517 ; ---------------------------------------------------------------------------
.text:000000000000451C                 align 20h
.text:0000000000004520
.text:0000000000004520 ; =============== S U B R O U T I N E =======================================
.text:0000000000004520
.text:0000000000004520
.text:0000000000004520                 public quotearg_style_mem
.text:0000000000004520 quotearg_style_mem proc near
.text:0000000000004520 ; __unwind {
.text:0000000000004520                 mov     rcx, rdx
.text:0000000000004523                 mov     rdx, rsi
.text:0000000000004526                 mov     esi, edi
.text:0000000000004528                 xor     edi, edi
.text:000000000000452A                 jmp     quotearg_n_style_mem
.text:000000000000452A ; } // starts at 4520
.text:000000000000452A quotearg_style_mem endp
.text:000000000000452A
.text:000000000000452A ; ---------------------------------------------------------------------------
.text:000000000000452F                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530 ; Attributes: info_from_lumina
.text:0000000000004530
.text:0000000000004530 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000004530                 public quotearg_char_mem
.text:0000000000004530 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000004530                                         ; quotearg_colon+C↓j ...
.text:0000000000004530
.text:0000000000004530 var_48          = xmmword ptr -48h
.text:0000000000004530 var_38          = xmmword ptr -38h
.text:0000000000004530 var_28          = xmmword ptr -28h
.text:0000000000004530 var_18          = qword ptr -18h
.text:0000000000004530 var_10          = qword ptr -10h
.text:0000000000004530
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 sub     rsp, 48h
.text:0000000000004534                 mov     ecx, edx
.text:0000000000004536                 mov     rax, fs:28h
.text:000000000000453F                 mov     [rsp+48h+var_10], rax
.text:0000000000004544                 xor     eax, eax
.text:0000000000004546                 mov     rax, cs:qword_208270
.text:000000000000454D                 mov     r8, rsp
.text:0000000000004550                 and     ecx, 1Fh
.text:0000000000004553                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000455B                 mov     [rsp+48h+var_18], rax
.text:0000000000004560                 mov     eax, edx
.text:0000000000004562                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000004566                 shr     al, 5
.text:0000000000004569                 movzx   eax, al
.text:000000000000456C                 lea     r9, [r8+rax*4+8]
.text:0000000000004571                 movdqa  xmm0, cs:xmmword_208250
.text:0000000000004579                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000457E                 movdqa  xmm0, cs:xmmword_208260
.text:0000000000004586                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000458B                 mov     edx, [r9]
.text:000000000000458E                 mov     eax, edx
.text:0000000000004590                 shr     eax, cl
.text:0000000000004592                 not     eax
.text:0000000000004594                 and     eax, 1
.text:0000000000004597                 shl     eax, cl
.text:0000000000004599                 mov     rcx, r8
.text:000000000000459C                 xor     eax, edx
.text:000000000000459E                 mov     rdx, rsi
.text:00000000000045A1                 mov     rsi, rdi
.text:00000000000045A4                 mov     [r9], eax
.text:00000000000045A7                 xor     edi, edi
.text:00000000000045A9                 call    quotearg_n_options
.text:00000000000045AE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000045B3                 xor     rsi, fs:28h
.text:00000000000045BC                 jnz     short loc_45C3
.text:00000000000045BE                 add     rsp, 48h
.text:00000000000045C2                 retn
.text:00000000000045C3 ; ---------------------------------------------------------------------------
.text:00000000000045C3
.text:00000000000045C3 loc_45C3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000045C3                 call    ___stack_chk_fail
.text:00000000000045C3 ; } // starts at 4530
.text:00000000000045C3 quotearg_char_mem endp
.text:00000000000045C3
.text:00000000000045C3 ; ---------------------------------------------------------------------------
.text:00000000000045C8                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0
.text:00000000000045D0                 public quotearg_char
.text:00000000000045D0 quotearg_char   proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 movsx   edx, sil
.text:00000000000045D4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045DB                 jmp     quotearg_char_mem
.text:00000000000045DB ; } // starts at 45D0
.text:00000000000045DB quotearg_char   endp
.text:00000000000045DB
.text:00000000000045E0
.text:00000000000045E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045E0
.text:00000000000045E0
.text:00000000000045E0                 public quotearg_colon
.text:00000000000045E0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000045E0 ; __unwind {
.text:00000000000045E0                 mov     edx, 3Ah ; ':'
.text:00000000000045E5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000045EC                 jmp     quotearg_char_mem
.text:00000000000045EC ; } // starts at 45E0
.text:00000000000045EC quotearg_colon  endp
.text:00000000000045EC
.text:00000000000045EC ; ---------------------------------------------------------------------------
.text:00000000000045F1                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600                 public quotearg_colon_mem
.text:0000000000004600 quotearg_colon_mem proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 mov     edx, 3Ah ; ':'
.text:0000000000004605                 jmp     quotearg_char_mem
.text:0000000000004605 ; } // starts at 4600
.text:0000000000004605 quotearg_colon_mem endp
.text:0000000000004605
.text:0000000000004605 ; ---------------------------------------------------------------------------
.text:000000000000460A                 align 10h
.text:0000000000004610
.text:0000000000004610 ; =============== S U B R O U T I N E =======================================
.text:0000000000004610
.text:0000000000004610 ; Attributes: info_from_lumina
.text:0000000000004610
.text:0000000000004610 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004610                 public quotearg_n_style_colon
.text:0000000000004610 quotearg_n_style_colon proc near        ; CODE XREF: main+4DE↑p
.text:0000000000004610                                         ; main+607↑p ...
.text:0000000000004610
.text:0000000000004610 var_48          = dword ptr -48h
.text:0000000000004610 var_44          = qword ptr -44h
.text:0000000000004610 var_3C          = qword ptr -3Ch
.text:0000000000004610 var_34          = qword ptr -34h
.text:0000000000004610 var_2C          = qword ptr -2Ch
.text:0000000000004610 var_24          = qword ptr -24h
.text:0000000000004610 var_1C          = qword ptr -1Ch
.text:0000000000004610 var_14          = dword ptr -14h
.text:0000000000004610 var_10          = qword ptr -10h
.text:0000000000004610
.text:0000000000004610 ; __unwind {
.text:0000000000004610                 sub     rsp, 48h
.text:0000000000004614                 mov     rax, rdx
.text:0000000000004617                 mov     rdx, fs:28h
.text:0000000000004620                 mov     [rsp+48h+var_10], rdx
.text:0000000000004625                 xor     edx, edx
.text:0000000000004627                 cmp     esi, 0Ah
.text:000000000000462A                 jz      short loc_4694
.text:000000000000462C                 mov     [rsp+48h+var_48], esi
.text:000000000000462F                 mov     rcx, rsp
.text:0000000000004632                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004639                 mov     rsi, rax
.text:000000000000463C                 mov     [rsp+48h+var_44], 0
.text:0000000000004645                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000464E                 mov     [rsp+48h+var_34], 0
.text:0000000000004657                 mov     [rsp+48h+var_2C], 0
.text:0000000000004660                 mov     [rsp+48h+var_24], 0
.text:0000000000004669                 mov     [rsp+48h+var_1C], 0
.text:0000000000004672                 mov     [rsp+48h+var_14], 0
.text:000000000000467A                 call    quotearg_n_options
.text:000000000000467F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004684                 xor     rcx, fs:28h
.text:000000000000468D                 jnz     short loc_4699
.text:000000000000468F                 add     rsp, 48h
.text:0000000000004693                 retn
.text:0000000000004694 ; ---------------------------------------------------------------------------
.text:0000000000004694
.text:0000000000004694 loc_4694:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004694                 call    _abort
.text:0000000000004699 ; ---------------------------------------------------------------------------
.text:0000000000004699
.text:0000000000004699 loc_4699:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004699                 call    ___stack_chk_fail
.text:0000000000004699 ; } // starts at 4610
.text:0000000000004699 quotearg_n_style_colon endp
.text:0000000000004699
.text:0000000000004699 ; ---------------------------------------------------------------------------
.text:000000000000469E                 align 20h
.text:00000000000046A0
.text:00000000000046A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046A0
.text:00000000000046A0 ; Attributes: info_from_lumina
.text:00000000000046A0
.text:00000000000046A0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000046A0                 public quotearg_n_custom_mem
.text:00000000000046A0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000046A0                                         ; quotearg_custom+12↓j ...
.text:00000000000046A0
.text:00000000000046A0 var_48          = xmmword ptr -48h
.text:00000000000046A0 var_38          = xmmword ptr -38h
.text:00000000000046A0 var_28          = xmmword ptr -28h
.text:00000000000046A0 var_18          = qword ptr -18h
.text:00000000000046A0 var_10          = qword ptr -10h
.text:00000000000046A0
.text:00000000000046A0 ; __unwind {
.text:00000000000046A0                 sub     rsp, 48h
.text:00000000000046A4                 mov     r9, rcx
.text:00000000000046A7                 mov     rcx, cs:qword_208270
.text:00000000000046AE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000046B6                 mov     rax, fs:28h
.text:00000000000046BF                 mov     [rsp+48h+var_10], rax
.text:00000000000046C4                 xor     eax, eax
.text:00000000000046C6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000046CA                 test    rsi, rsi
.text:00000000000046CD                 mov     [rsp+48h+var_18], rcx
.text:00000000000046D2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000046D9                 movdqa  xmm0, cs:xmmword_208250
.text:00000000000046E1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000046E6                 movdqa  xmm0, cs:xmmword_208260
.text:00000000000046EE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000046F3                 jz      short loc_4727
.text:00000000000046F5                 test    rdx, rdx
.text:00000000000046F8                 jz      short loc_4727
.text:00000000000046FA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000046FF                 mov     [rsp+48h+var_18], rdx
.text:0000000000004704                 mov     rcx, rsp
.text:0000000000004707                 mov     rdx, r8
.text:000000000000470A                 mov     rsi, r9
.text:000000000000470D                 call    quotearg_n_options
.text:0000000000004712                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004717                 xor     rdi, fs:28h
.text:0000000000004720                 jnz     short loc_472C
.text:0000000000004722                 add     rsp, 48h
.text:0000000000004726                 retn
.text:0000000000004727 ; ---------------------------------------------------------------------------
.text:0000000000004727
.text:0000000000004727 loc_4727:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000004727                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000004727                 call    _abort
.text:000000000000472C ; ---------------------------------------------------------------------------
.text:000000000000472C
.text:000000000000472C loc_472C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000472C                 call    ___stack_chk_fail
.text:000000000000472C ; } // starts at 46A0
.text:000000000000472C quotearg_n_custom_mem endp
.text:000000000000472C
.text:000000000000472C ; ---------------------------------------------------------------------------
.text:0000000000004731                 align 20h
.text:0000000000004740
.text:0000000000004740 ; =============== S U B R O U T I N E =======================================
.text:0000000000004740
.text:0000000000004740
.text:0000000000004740                 public quotearg_n_custom
.text:0000000000004740 quotearg_n_custom proc near
.text:0000000000004740 ; __unwind {
.text:0000000000004740                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000004747                 jmp     quotearg_n_custom_mem
.text:0000000000004747 ; } // starts at 4740
.text:0000000000004747 quotearg_n_custom endp
.text:0000000000004747
.text:0000000000004747 ; ---------------------------------------------------------------------------
.text:000000000000474C                 align 10h
.text:0000000000004750
.text:0000000000004750 ; =============== S U B R O U T I N E =======================================
.text:0000000000004750
.text:0000000000004750
.text:0000000000004750                 public quotearg_custom
.text:0000000000004750 quotearg_custom proc near
.text:0000000000004750 ; __unwind {
.text:0000000000004750                 mov     rcx, rdx
.text:0000000000004753                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000475A                 mov     rdx, rsi
.text:000000000000475D                 mov     rsi, rdi
.text:0000000000004760                 xor     edi, edi
.text:0000000000004762                 jmp     quotearg_n_custom_mem
.text:0000000000004762 ; } // starts at 4750
.text:0000000000004762 quotearg_custom endp
.text:0000000000004762
.text:0000000000004762 ; ---------------------------------------------------------------------------
.text:0000000000004767                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770
.text:0000000000004770                 public quotearg_custom_mem
.text:0000000000004770 quotearg_custom_mem proc near
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 mov     r8, rcx
.text:0000000000004773                 mov     rcx, rdx
.text:0000000000004776                 mov     rdx, rsi
.text:0000000000004779                 mov     rsi, rdi
.text:000000000000477C                 xor     edi, edi
.text:000000000000477E                 jmp     quotearg_n_custom_mem
.text:000000000000477E ; } // starts at 4770
.text:000000000000477E quotearg_custom_mem endp
.text:000000000000477E
.text:000000000000477E ; ---------------------------------------------------------------------------
.text:0000000000004783                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790
.text:0000000000004790                 public quote_n_mem
.text:0000000000004790 quote_n_mem     proc near
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 lea     rcx, quote_quoting_options
.text:0000000000004797                 jmp     quotearg_n_options
.text:0000000000004797 ; } // starts at 4790
.text:0000000000004797 quote_n_mem     endp
.text:0000000000004797
.text:0000000000004797 ; ---------------------------------------------------------------------------
.text:000000000000479C                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quote_mem
.text:00000000000047A0 quote_mem       proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 lea     rcx, quote_quoting_options
.text:00000000000047A7                 mov     rdx, rsi
.text:00000000000047AA                 mov     rsi, rdi
.text:00000000000047AD                 xor     edi, edi
.text:00000000000047AF                 jmp     quotearg_n_options
.text:00000000000047AF ; } // starts at 47A0
.text:00000000000047AF quote_mem       endp
.text:00000000000047AF
.text:00000000000047AF ; ---------------------------------------------------------------------------
.text:00000000000047B4                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0                 public quote_n
.text:00000000000047C0 quote_n         proc near
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 lea     rcx, quote_quoting_options
.text:00000000000047C7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047CE                 jmp     quotearg_n_options
.text:00000000000047CE ; } // starts at 47C0
.text:00000000000047CE quote_n         endp
.text:00000000000047CE
.text:00000000000047CE ; ---------------------------------------------------------------------------
.text:00000000000047D3                 align 20h
.text:00000000000047E0
.text:00000000000047E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047E0
.text:00000000000047E0
.text:00000000000047E0                 public quote
.text:00000000000047E0 quote           proc near               ; CODE XREF: main+70B↑p
.text:00000000000047E0 ; __unwind {
.text:00000000000047E0                 lea     rcx, quote_quoting_options
.text:00000000000047E7                 mov     rsi, rdi
.text:00000000000047EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000047F1                 xor     edi, edi
.text:00000000000047F3                 jmp     quotearg_n_options
.text:00000000000047F3 ; } // starts at 47E0
.text:00000000000047F3 quote           endp
.text:00000000000047F3
.text:00000000000047F3 ; ---------------------------------------------------------------------------
.text:00000000000047F8                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800                 public init_tokenbuffer
.text:0000000000004800 init_tokenbuffer proc near              ; CODE XREF: main+134↑p
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 mov     qword ptr [rdi], 0
.text:0000000000004807                 mov     qword ptr [rdi+8], 0
.text:000000000000480F                 retn
.text:000000000000480F ; } // starts at 4800
.text:000000000000480F init_tokenbuffer endp
.text:000000000000480F
.text:0000000000004810
.text:0000000000004810 ; =============== S U B R O U T I N E =======================================
.text:0000000000004810
.text:0000000000004810
.text:0000000000004810 ; __int64 __fastcall readtoken(_IO_FILE *)
.text:0000000000004810                 public readtoken
.text:0000000000004810 readtoken       proc near               ; CODE XREF: main+160↑p
.text:0000000000004810                                         ; readtokens+100↓p
.text:0000000000004810
.text:0000000000004810 var_68          = xmmword ptr -68h
.text:0000000000004810 var_58          = xmmword ptr -58h
.text:0000000000004810 var_40          = qword ptr -40h
.text:0000000000004810
.text:0000000000004810 ; __unwind {
.text:0000000000004810                 push    r15
.text:0000000000004812                 push    r14
.text:0000000000004814                 push    r13
.text:0000000000004816                 push    r12
.text:0000000000004818                 mov     r13, rcx
.text:000000000000481B                 push    rbp
.text:000000000000481C                 push    rbx
.text:000000000000481D                 mov     rbp, rdi
.text:0000000000004820                 pxor    xmm0, xmm0
.text:0000000000004824                 sub     rsp, 38h
.text:0000000000004828                 mov     rax, fs:28h
.text:0000000000004831                 mov     [rsp+68h+var_40], rax
.text:0000000000004836                 xor     eax, eax
.text:0000000000004838                 test    rdx, rdx
.text:000000000000483B                 movaps  [rsp+68h+var_68], xmm0
.text:000000000000483F                 movaps  [rsp+68h+var_58], xmm0
.text:0000000000004844                 jz      short loc_48AC
.text:0000000000004846                 add     rdx, rsi
.text:0000000000004849                 mov     rdi, rsp
.text:000000000000484C                 mov     r8d, 1
.text:0000000000004852                 nop     word ptr [rax+rax+00h]
.text:0000000000004858
.text:0000000000004858 loc_4858:                               ; CODE XREF: readtoken+6A↓j
.text:0000000000004858                 mov     rbx, r8
.text:000000000000485B                 add     rsi, 1
.text:000000000000485F                 movzx   ecx, byte ptr [rsi-1]
.text:0000000000004863                 mov     rax, rcx
.text:0000000000004866                 and     ecx, 3Fh
.text:0000000000004869                 shr     rax, 3
.text:000000000000486D                 shl     rbx, cl
.text:0000000000004870                 and     eax, 18h
.text:0000000000004873                 or      [rdi+rax], rbx
.text:0000000000004877                 cmp     rdx, rsi
.text:000000000000487A                 jnz     short loc_4858
.text:000000000000487C                 mov     rax, [rbp+8]
.text:0000000000004880                 cmp     rax, [rbp+10h]
.text:0000000000004884                 jnb     short loc_48B6
.text:0000000000004886                 db      2Eh
.text:0000000000004886                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004890
.text:0000000000004890 loc_4890:                               ; CODE XREF: readtoken+A4↓j
.text:0000000000004890                 lea     rdx, [rax+1]
.text:0000000000004894                 mov     [rbp+8], rdx
.text:0000000000004898                 movzx   ebx, byte ptr [rax]
.text:000000000000489B
.text:000000000000489B loc_489B:                               ; CODE XREF: readtoken+B2↓j
.text:000000000000489B                 movsxd  rax, ebx
.text:000000000000489E                 shr     rax, 6
.text:00000000000048A2                 mov     rax, qword ptr [rsp+rax*8+68h+var_68]
.text:00000000000048A6                 bt      rax, rbx
.text:00000000000048AA                 jnb     short loc_48C4
.text:00000000000048AC
.text:00000000000048AC loc_48AC:                               ; CODE XREF: readtoken+34↑j
.text:00000000000048AC                 mov     rax, [rbp+8]
.text:00000000000048B0                 cmp     rax, [rbp+10h]
.text:00000000000048B4                 jb      short loc_4890
.text:00000000000048B6
.text:00000000000048B6 loc_48B6:                               ; CODE XREF: readtoken+74↑j
.text:00000000000048B6                 mov     rdi, rbp        ; _IO_FILE *
.text:00000000000048B9                 call    ___uflow
.text:00000000000048BE                 test    eax, eax
.text:00000000000048C0                 mov     ebx, eax
.text:00000000000048C2                 jns     short loc_489B
.text:00000000000048C4
.text:00000000000048C4 loc_48C4:                               ; CODE XREF: readtoken+9A↑j
.text:00000000000048C4                 mov     r15, [r13+8]
.text:00000000000048C8                 mov     r14, [r13+0]
.text:00000000000048CC                 xor     r12d, r12d
.text:00000000000048CF
.text:00000000000048CF loc_48CF:                               ; CODE XREF: readtoken+1AA↓j
.text:00000000000048CF                 test    ebx, ebx
.text:00000000000048D1                 jns     short loc_48E0
.text:00000000000048D3                 test    r12, r12
.text:00000000000048D6                 jz      short loc_492A
.text:00000000000048D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000048E0
.text:00000000000048E0 loc_48E0:                               ; CODE XREF: readtoken+C1↑j
.text:00000000000048E0                                         ; readtoken+113↓j ...
.text:00000000000048E0                 cmp     r12, r14
.text:00000000000048E3                 jz      short loc_4938
.text:00000000000048E5                 test    ebx, ebx
.text:00000000000048E7                 lea     rdx, [r15+r12]
.text:00000000000048EB                 js      loc_4980
.text:00000000000048F1
.text:00000000000048F1 loc_48F1:                               ; CODE XREF: readtoken+163↓j
.text:00000000000048F1                 movsxd  rax, ebx
.text:00000000000048F4                 shr     rax, 6
.text:00000000000048F8                 mov     rax, qword ptr [rsp+rax*8+68h+var_68]
.text:00000000000048FC                 bt      rax, rbx
.text:0000000000004900                 jb      short loc_4980
.text:0000000000004902                 mov     [rdx], bl
.text:0000000000004904                 add     r12, 1
.text:0000000000004908                 mov     rax, [rbp+8]
.text:000000000000490C                 cmp     rax, [rbp+10h]
.text:0000000000004910                 jnb     loc_49B0
.text:0000000000004916                 lea     rdx, [rax+1]
.text:000000000000491A                 mov     [rbp+8], rdx
.text:000000000000491E                 movzx   ebx, byte ptr [rax]
.text:0000000000004921                 test    ebx, ebx
.text:0000000000004923                 jns     short loc_48E0
.text:0000000000004925                 test    r12, r12
.text:0000000000004928                 jnz     short loc_48E0
.text:000000000000492A
.text:000000000000492A loc_492A:                               ; CODE XREF: readtoken+C6↑j
.text:000000000000492A                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000004931                 jmp     short loc_498B
.text:0000000000004931 ; ---------------------------------------------------------------------------
.text:0000000000004933                 align 8
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: readtoken+D3↑j
.text:0000000000004938                 test    r15, r15
.text:000000000000493B                 jz      loc_49C0
.text:0000000000004941                 mov     rax, 5555555555555553h
.text:000000000000494B                 cmp     r12, rax
.text:000000000000494E                 ja      loc_49D4
.text:0000000000004954                 mov     rax, r12
.text:0000000000004957                 shr     rax, 1
.text:000000000000495A                 lea     r14, [r12+rax+1]
.text:000000000000495F
.text:000000000000495F loc_495F:                               ; CODE XREF: readtoken+1C2↓j
.text:000000000000495F                 mov     rdi, r15
.text:0000000000004962                 mov     rsi, r14
.text:0000000000004965                 call    xrealloc
.text:000000000000496A                 test    ebx, ebx
.text:000000000000496C                 mov     r15, rax
.text:000000000000496F                 lea     rdx, [r15+r12]
.text:0000000000004973                 jns     loc_48F1
.text:0000000000004979                 nop     dword ptr [rax+00000000h]
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: readtoken+DB↑j
.text:0000000000004980                                         ; readtoken+F0↑j
.text:0000000000004980                 mov     byte ptr [rdx], 0
.text:0000000000004983                 mov     [r13+8], r15
.text:0000000000004987                 mov     [r13+0], r14
.text:000000000000498B
.text:000000000000498B loc_498B:                               ; CODE XREF: readtoken+121↑j
.text:000000000000498B                 mov     rdi, [rsp+68h+var_40]
.text:0000000000004990                 xor     rdi, fs:28h
.text:0000000000004999                 mov     rax, r12
.text:000000000000499C                 jnz     short loc_49D9
.text:000000000000499E                 add     rsp, 38h
.text:00000000000049A2                 pop     rbx
.text:00000000000049A3                 pop     rbp
.text:00000000000049A4                 pop     r12
.text:00000000000049A6                 pop     r13
.text:00000000000049A8                 pop     r14
.text:00000000000049AA                 pop     r15
.text:00000000000049AC                 retn
.text:00000000000049AC ; ---------------------------------------------------------------------------
.text:00000000000049AD                 align 10h
.text:00000000000049B0
.text:00000000000049B0 loc_49B0:                               ; CODE XREF: readtoken+100↑j
.text:00000000000049B0                 mov     rdi, rbp        ; _IO_FILE *
.text:00000000000049B3                 call    ___uflow
.text:00000000000049B8                 mov     ebx, eax
.text:00000000000049BA                 jmp     loc_48CF
.text:00000000000049BA ; ---------------------------------------------------------------------------
.text:00000000000049BF                 align 20h
.text:00000000000049C0
.text:00000000000049C0 loc_49C0:                               ; CODE XREF: readtoken+12B↑j
.text:00000000000049C0                 test    r12, r12
.text:00000000000049C3                 mov     ecx, 80h
.text:00000000000049C8                 cmovnz  rcx, r12
.text:00000000000049CC                 test    rcx, rcx
.text:00000000000049CF                 mov     r14, rcx
.text:00000000000049D2                 jns     short loc_495F
.text:00000000000049D4
.text:00000000000049D4 loc_49D4:                               ; CODE XREF: readtoken+13E↑j
.text:00000000000049D4                 call    xalloc_die
.text:00000000000049D9 ; ---------------------------------------------------------------------------
.text:00000000000049D9
.text:00000000000049D9 loc_49D9:                               ; CODE XREF: readtoken+18C↑j
.text:00000000000049D9                 call    ___stack_chk_fail
.text:00000000000049D9 ; } // starts at 4810
.text:00000000000049D9 readtoken       endp
.text:00000000000049D9
.text:00000000000049D9 ; ---------------------------------------------------------------------------
.text:00000000000049DE                 align 20h
.text:00000000000049E0
.text:00000000000049E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049E0
.text:00000000000049E0
.text:00000000000049E0                 public readtokens
.text:00000000000049E0 readtokens      proc near
.text:00000000000049E0
.text:00000000000049E0 var_90          = qword ptr -90h
.text:00000000000049E0 var_88          = qword ptr -88h
.text:00000000000049E0 var_80          = qword ptr -80h
.text:00000000000049E0 var_78          = qword ptr -78h
.text:00000000000049E0 var_70          = qword ptr -70h
.text:00000000000049E0 var_68          = qword ptr -68h
.text:00000000000049E0 var_60          = qword ptr -60h
.text:00000000000049E0 var_58          = qword ptr -58h
.text:00000000000049E0 src             = qword ptr -50h
.text:00000000000049E0 var_40          = qword ptr -40h
.text:00000000000049E0
.text:00000000000049E0 ; __unwind {
.text:00000000000049E0                 push    r15
.text:00000000000049E2                 push    r14
.text:00000000000049E4                 push    r13
.text:00000000000049E6                 push    r12
.text:00000000000049E8                 push    rbp
.text:00000000000049E9                 push    rbx
.text:00000000000049EA                 lea     rbp, [rsi+1]
.text:00000000000049EE                 sub     rsp, 68h
.text:00000000000049F2                 mov     rax, fs:28h
.text:00000000000049FB                 mov     [rsp+98h+var_40], rax
.text:0000000000004A00                 xor     eax, eax
.text:0000000000004A02                 mov     [rsp+98h+var_88], rdx
.text:0000000000004A07                 test    rsi, rsi
.text:0000000000004A0A                 mov     eax, 40h ; '@'
.text:0000000000004A0F                 mov     edx, 8
.text:0000000000004A14                 cmovz   rbp, rax
.text:0000000000004A18                 mov     [rsp+98h+var_90], rdi
.text:0000000000004A1D                 mov     rax, rdx
.text:0000000000004A20                 mov     [rsp+98h+var_80], rcx
.text:0000000000004A25                 mov     [rsp+98h+var_60], r8
.text:0000000000004A2A                 mul     rbp
.text:0000000000004A2D                 mov     [rsp+98h+var_68], r9
.text:0000000000004A32                 jo      loc_4C00
.text:0000000000004A38                 xor     ecx, ecx
.text:0000000000004A3A
.text:0000000000004A3A loc_4A3A:                               ; CODE XREF: readtokens+225↓j
.text:0000000000004A3A                 test    rax, rax
.text:0000000000004A3D                 js      loc_4BFB
.text:0000000000004A43                 test    rcx, rcx
.text:0000000000004A46                 jnz     loc_4BFB
.text:0000000000004A4C                 lea     rbx, ds:0[rbp*8]
.text:0000000000004A54                 mov     rdi, rbx
.text:0000000000004A57                 call    xmalloc
.text:0000000000004A5C                 mov     rdi, rbx
.text:0000000000004A5F                 mov     r12, rax
.text:0000000000004A62                 xor     ebx, ebx
.text:0000000000004A64                 call    xmalloc
.text:0000000000004A69                 mov     r13, rax
.text:0000000000004A6C                 lea     rax, [rsp+98h+var_58]
.text:0000000000004A71                 mov     [rsp+98h+var_58], 0
.text:0000000000004A7A                 mov     [rsp+98h+src], 0
.text:0000000000004A83                 mov     [rsp+98h+var_78], rax
.text:0000000000004A88                 jmp     short loc_4ACC
.text:0000000000004A88 ; ---------------------------------------------------------------------------
.text:0000000000004A8A                 align 10h
.text:0000000000004A90
.text:0000000000004A90 loc_4A90:                               ; CODE XREF: readtokens+10B↓j
.text:0000000000004A90                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A94                 jz      loc_4B4C
.text:0000000000004A9A
.text:0000000000004A9A loc_4A9A:                               ; CODE XREF: readtokens+166↓j
.text:0000000000004A9A                 mov     r15, r14
.text:0000000000004A9D                 add     r15, 1
.text:0000000000004AA1                 js      loc_4BFB
.text:0000000000004AA7                 mov     rdi, r15
.text:0000000000004AAA                 call    xmalloc
.text:0000000000004AAF                 mov     rsi, [rsp+98h+src] ; src
.text:0000000000004AB4                 mov     [r13+rbx*8+0], r14
.text:0000000000004AB9                 mov     rdx, r15        ; n
.text:0000000000004ABC                 mov     rdi, rax        ; dest
.text:0000000000004ABF                 call    _memcpy
.text:0000000000004AC4                 mov     [r12+rbx*8], rax
.text:0000000000004AC8                 add     rbx, 1
.text:0000000000004ACC
.text:0000000000004ACC loc_4ACC:                               ; CODE XREF: readtokens+A8↑j
.text:0000000000004ACC                 mov     rcx, [rsp+98h+var_78]
.text:0000000000004AD1                 mov     rdx, [rsp+98h+var_80]
.text:0000000000004AD6                 mov     rsi, [rsp+98h+var_88]
.text:0000000000004ADB                 mov     rdi, [rsp+98h+var_90] ; _IO_FILE *
.text:0000000000004AE0                 call    readtoken
.text:0000000000004AE5                 cmp     rbx, rbp
.text:0000000000004AE8                 mov     r14, rax
.text:0000000000004AEB                 jb      short loc_4A90
.text:0000000000004AED                 test    r12, r12
.text:0000000000004AF0                 jz      loc_4BA8
.text:0000000000004AF6                 mov     rax, 0AAAAAAAAAAAAAA9h
.text:0000000000004B00                 cmp     rbp, rax
.text:0000000000004B03                 ja      loc_4BFB
.text:0000000000004B09                 mov     rax, rbp
.text:0000000000004B0C                 mov     rdi, r12
.text:0000000000004B0F                 shr     rax, 1
.text:0000000000004B12                 lea     rbp, [rbp+rax+1]
.text:0000000000004B17                 lea     rdx, ds:0[rbp*8]
.text:0000000000004B1F                 mov     rsi, rdx
.text:0000000000004B22                 mov     [rsp+98h+var_70], rdx
.text:0000000000004B27                 call    xrealloc
.text:0000000000004B2C                 mov     rdx, [rsp+98h+var_70]
.text:0000000000004B31                 mov     r12, rax
.text:0000000000004B34
.text:0000000000004B34 loc_4B34:                               ; CODE XREF: readtokens+20C↓j
.text:0000000000004B34                 mov     rdi, r13
.text:0000000000004B37                 mov     rsi, rdx
.text:0000000000004B3A                 call    xrealloc
.text:0000000000004B3F                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B43                 mov     r13, rax
.text:0000000000004B46                 jnz     loc_4A9A
.text:0000000000004B4C
.text:0000000000004B4C loc_4B4C:                               ; CODE XREF: readtokens+B4↑j
.text:0000000000004B4C                 mov     qword ptr [r12+rbx*8], 0
.text:0000000000004B54                 mov     rdi, [rsp+98h+src] ; ptr
.text:0000000000004B59                 mov     qword ptr [r13+rbx*8+0], 0
.text:0000000000004B62                 call    _free
.text:0000000000004B67                 cmp     [rsp+98h+var_68], 0
.text:0000000000004B6D                 mov     rax, [rsp+98h+var_60]
.text:0000000000004B72                 mov     [rax], r12
.text:0000000000004B75                 jz      short loc_4BF1
.text:0000000000004B77                 mov     rax, [rsp+98h+var_68]
.text:0000000000004B7C                 mov     [rax], r13
.text:0000000000004B7F
.text:0000000000004B7F loc_4B7F:                               ; CODE XREF: readtokens+219↓j
.text:0000000000004B7F                 mov     rcx, [rsp+98h+var_40]
.text:0000000000004B84                 xor     rcx, fs:28h
.text:0000000000004B8D                 mov     rax, rbx
.text:0000000000004B90                 jnz     short loc_4C0A
.text:0000000000004B92                 add     rsp, 68h
.text:0000000000004B96                 pop     rbx
.text:0000000000004B97                 pop     rbp
.text:0000000000004B98                 pop     r12
.text:0000000000004B9A                 pop     r13
.text:0000000000004B9C                 pop     r14
.text:0000000000004B9E                 pop     r15
.text:0000000000004BA0                 retn
.text:0000000000004BA0 ; ---------------------------------------------------------------------------
.text:0000000000004BA1                 align 8
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: readtokens+110↑j
.text:0000000000004BA8                 test    rbp, rbp
.text:0000000000004BAB                 mov     eax, 10h
.text:0000000000004BB0                 mov     edx, 8
.text:0000000000004BB5                 cmovz   rbp, rax
.text:0000000000004BB9                 mov     rax, rdx
.text:0000000000004BBC                 xor     esi, esi
.text:0000000000004BBE                 mul     rbp
.text:0000000000004BC1                 jo      short loc_4C0F
.text:0000000000004BC3
.text:0000000000004BC3 loc_4BC3:                               ; CODE XREF: readtokens+234↓j
.text:0000000000004BC3                 test    rax, rax
.text:0000000000004BC6                 js      short loc_4BFB
.text:0000000000004BC8                 test    rsi, rsi
.text:0000000000004BCB                 jnz     short loc_4BFB
.text:0000000000004BCD                 lea     rdx, ds:0[rbp*8]
.text:0000000000004BD5                 xor     edi, edi
.text:0000000000004BD7                 mov     rsi, rdx
.text:0000000000004BDA                 mov     [rsp+98h+var_70], rdx
.text:0000000000004BDF                 call    xrealloc
.text:0000000000004BE4                 mov     rdx, [rsp+98h+var_70]
.text:0000000000004BE9                 mov     r12, rax
.text:0000000000004BEC                 jmp     loc_4B34
.text:0000000000004BF1 ; ---------------------------------------------------------------------------
.text:0000000000004BF1
.text:0000000000004BF1 loc_4BF1:                               ; CODE XREF: readtokens+195↑j
.text:0000000000004BF1                 mov     rdi, r13        ; ptr
.text:0000000000004BF4                 call    _free
.text:0000000000004BF9                 jmp     short loc_4B7F
.text:0000000000004BFB ; ---------------------------------------------------------------------------
.text:0000000000004BFB
.text:0000000000004BFB loc_4BFB:                               ; CODE XREF: readtokens+5D↑j
.text:0000000000004BFB                                         ; readtokens+66↑j ...
.text:0000000000004BFB                 call    xalloc_die
.text:0000000000004C00 ; ---------------------------------------------------------------------------
.text:0000000000004C00
.text:0000000000004C00 loc_4C00:                               ; CODE XREF: readtokens+52↑j
.text:0000000000004C00                 mov     ecx, 1
.text:0000000000004C05                 jmp     loc_4A3A
.text:0000000000004C0A ; ---------------------------------------------------------------------------
.text:0000000000004C0A
.text:0000000000004C0A loc_4C0A:                               ; CODE XREF: readtokens+1B0↑j
.text:0000000000004C0A                 call    ___stack_chk_fail
.text:0000000000004C0F ; ---------------------------------------------------------------------------
.text:0000000000004C0F
.text:0000000000004C0F loc_4C0F:                               ; CODE XREF: readtokens+1E1↑j
.text:0000000000004C0F                 mov     esi, 1
.text:0000000000004C14                 jmp     short loc_4BC3
.text:0000000000004C14 ; } // starts at 49E0
.text:0000000000004C14 readtokens      endp
.text:0000000000004C14
.text:0000000000004C14 ; ---------------------------------------------------------------------------
.text:0000000000004C16                 align 20h
.text:0000000000004C20
.text:0000000000004C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C20
.text:0000000000004C20
.text:0000000000004C20 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004C20                 public version_etc_arn
.text:0000000000004C20 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_505B↓j
.text:0000000000004C20                                         ; version_etc_va:loc_50AB↓p ...
.text:0000000000004C20
.text:0000000000004C20 var_58          = qword ptr -58h
.text:0000000000004C20 var_50          = qword ptr -50h
.text:0000000000004C20 var_48          = qword ptr -48h
.text:0000000000004C20 var_40          = qword ptr -40h
.text:0000000000004C20
.text:0000000000004C20 ; __unwind {
.text:0000000000004C20                 push    r15
.text:0000000000004C22                 push    r14
.text:0000000000004C24                 push    r13
.text:0000000000004C26                 push    r12
.text:0000000000004C28                 mov     r12, r9
.text:0000000000004C2B                 push    rbp
.text:0000000000004C2C                 push    rbx
.text:0000000000004C2D                 mov     rbp, rdi
.text:0000000000004C30                 mov     rbx, r8
.text:0000000000004C33                 sub     rsp, 28h
.text:0000000000004C37                 test    rsi, rsi
.text:0000000000004C3A                 jz      loc_4D58
.text:0000000000004C40                 mov     r8, rdx
.text:0000000000004C43                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004C4A                 mov     r9, rcx
.text:0000000000004C4D                 xor     eax, eax
.text:0000000000004C4F                 mov     rcx, rsi
.text:0000000000004C52                 mov     esi, 1
.text:0000000000004C57                 call    ___fprintf_chk
.text:0000000000004C5C
.text:0000000000004C5C loc_4C5C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004C5C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004C63                 xor     edi, edi        ; domainname
.text:0000000000004C65                 mov     edx, 5          ; category
.text:0000000000004C6A                 call    _dcgettext
.text:0000000000004C6F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004C76                 mov     rcx, rax
.text:0000000000004C79                 mov     r8d, 7E3h
.text:0000000000004C7F                 mov     esi, 1
.text:0000000000004C84                 mov     rdi, rbp
.text:0000000000004C87                 xor     eax, eax
.text:0000000000004C89                 call    ___fprintf_chk
.text:0000000000004C8E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004C95                 xor     edi, edi        ; domainname
.text:0000000000004C97                 mov     edx, 5          ; category
.text:0000000000004C9C                 call    _dcgettext
.text:0000000000004CA1                 mov     rsi, rbp        ; stream
.text:0000000000004CA4                 mov     rdi, rax        ; s
.text:0000000000004CA7                 call    _fputs_unlocked
.text:0000000000004CAC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004CB0                 ja      def_4CC4        ; jumptable 0000000000004CC4 default case
.text:0000000000004CB6                 lea     rdx, jpt_4CC4
.text:0000000000004CBD                 movsxd  rax, ds:(jpt_4CC4 - 6408h)[rdx+r12*4]
.text:0000000000004CC1                 add     rax, rdx
.text:0000000000004CC4                 jmp     rax             ; switch jump
.text:0000000000004CC4 ; ---------------------------------------------------------------------------
.text:0000000000004CC6                 align 10h
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004CD0                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004CD0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004CC4 case 8
.text:0000000000004CD4                 mov     rax, [rbx+10h]
.text:0000000000004CD8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004CDF                 mov     r8, [rbx+8]
.text:0000000000004CE3                 mov     edx, 5          ; category
.text:0000000000004CE8                 xor     edi, edi        ; domainname
.text:0000000000004CEA                 mov     r13, [rbx+30h]
.text:0000000000004CEE                 mov     r12, [rbx+28h]
.text:0000000000004CF2                 mov     [rsp+58h+var_48], r9
.text:0000000000004CF7                 mov     r15, [rbx+20h]
.text:0000000000004CFB                 mov     r14, [rbx+18h]
.text:0000000000004CFF                 mov     [rsp+58h+var_58], rax
.text:0000000000004D03                 mov     [rsp+58h+var_50], r8
.text:0000000000004D08                 mov     rbx, [rbx]
.text:0000000000004D0B                 call    _dcgettext
.text:0000000000004D10                 sub     rsp, 8
.text:0000000000004D14
.text:0000000000004D14 loc_4D14:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004D14                 mov     r9, [rsp+60h+var_48]
.text:0000000000004D19                 mov     rdx, rax
.text:0000000000004D1C                 mov     rcx, rbx
.text:0000000000004D1F                 mov     esi, 1
.text:0000000000004D24                 mov     rdi, rbp
.text:0000000000004D27                 xor     eax, eax
.text:0000000000004D29                 push    r9
.text:0000000000004D2B                 push    r13
.text:0000000000004D2D                 push    r12
.text:0000000000004D2F                 push    r15
.text:0000000000004D31                 push    r14
.text:0000000000004D33                 mov     r9, [rsp+88h+var_58]
.text:0000000000004D38                 mov     r8, [rsp+88h+var_50]
.text:0000000000004D3D                 call    ___fprintf_chk
.text:0000000000004D42                 add     rsp, 30h
.text:0000000000004D46
.text:0000000000004D46 loc_4D46:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D46                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004D46                 add     rsp, 28h        ; jumptable 0000000000004CC4 case 0
.text:0000000000004D4A                 pop     rbx
.text:0000000000004D4B                 pop     rbp
.text:0000000000004D4C                 pop     r12
.text:0000000000004D4E                 pop     r13
.text:0000000000004D50                 pop     r14
.text:0000000000004D52                 pop     r15
.text:0000000000004D54                 retn
.text:0000000000004D54 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 8
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004D58                 mov     r8, rcx
.text:0000000000004D5B                 mov     rcx, rdx
.text:0000000000004D5E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004D65                 mov     esi, 1
.text:0000000000004D6A                 xor     eax, eax
.text:0000000000004D6C                 call    ___fprintf_chk
.text:0000000000004D71                 jmp     loc_4C5C
.text:0000000000004D71 ; ---------------------------------------------------------------------------
.text:0000000000004D76                 align 20h
.text:0000000000004D80
.text:0000000000004D80 loc_4D80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004D80                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004D80                 mov     r10, [rbx+40h]  ; jumptable 0000000000004CC4 case 9
.text:0000000000004D84                 mov     r9, [rbx+38h]
.text:0000000000004D88                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004D8F                 mov     rax, [rbx+10h]
.text:0000000000004D93                 mov     r8, [rbx+8]
.text:0000000000004D97                 mov     edx, 5          ; category
.text:0000000000004D9C                 mov     r13, [rbx+30h]
.text:0000000000004DA0                 mov     r12, [rbx+28h]
.text:0000000000004DA4                 mov     r15, [rbx+20h]
.text:0000000000004DA8                 mov     r14, [rbx+18h]
.text:0000000000004DAC                 mov     rbx, [rbx]
.text:0000000000004DAF                 mov     [rsp+58h+var_40], r10
.text:0000000000004DB4                 mov     [rsp+58h+var_48], r9
.text:0000000000004DB9                 mov     [rsp+58h+var_58], rax
.text:0000000000004DBD                 mov     [rsp+58h+var_50], r8
.text:0000000000004DC2
.text:0000000000004DC2 loc_4DC2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004DC2                 xor     edi, edi        ; domainname
.text:0000000000004DC4                 call    _dcgettext
.text:0000000000004DC9                 mov     r10, [rsp+58h+var_40]
.text:0000000000004DCE                 push    r10
.text:0000000000004DD0                 jmp     loc_4D14
.text:0000000000004DD0 ; ---------------------------------------------------------------------------
.text:0000000000004DD5                 align 8
.text:0000000000004DD8
.text:0000000000004DD8 loc_4DD8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004DD8                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004DD8                 mov     rbx, [rbx]      ; jumptable 0000000000004CC4 case 1
.text:0000000000004DDB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004DE2                 mov     edx, 5          ; category
.text:0000000000004DE7                 xor     edi, edi        ; domainname
.text:0000000000004DE9                 call    _dcgettext
.text:0000000000004DEE                 add     rsp, 28h
.text:0000000000004DF2                 mov     rcx, rbx
.text:0000000000004DF5                 mov     rdi, rbp
.text:0000000000004DF8                 pop     rbx
.text:0000000000004DF9                 pop     rbp
.text:0000000000004DFA                 pop     r12
.text:0000000000004DFC                 pop     r13
.text:0000000000004DFE                 pop     r14
.text:0000000000004E00                 pop     r15
.text:0000000000004E02                 mov     rdx, rax
.text:0000000000004E05                 mov     esi, 1
.text:0000000000004E0A                 xor     eax, eax
.text:0000000000004E0C                 jmp     ___fprintf_chk
.text:0000000000004E0C ; ---------------------------------------------------------------------------
.text:0000000000004E11                 align 8
.text:0000000000004E18
.text:0000000000004E18 loc_4E18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E18                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004E18                 mov     r12, [rbx+8]    ; jumptable 0000000000004CC4 case 2
.text:0000000000004E1C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004E23                 mov     rbx, [rbx]
.text:0000000000004E26                 mov     edx, 5          ; category
.text:0000000000004E2B                 xor     edi, edi        ; domainname
.text:0000000000004E2D                 call    _dcgettext
.text:0000000000004E32                 add     rsp, 28h
.text:0000000000004E36                 mov     r8, r12
.text:0000000000004E39                 mov     rcx, rbx
.text:0000000000004E3C                 mov     rdi, rbp
.text:0000000000004E3F                 mov     rdx, rax
.text:0000000000004E42                 mov     esi, 1
.text:0000000000004E47                 pop     rbx
.text:0000000000004E48                 pop     rbp
.text:0000000000004E49                 pop     r12
.text:0000000000004E4B                 pop     r13
.text:0000000000004E4D                 pop     r14
.text:0000000000004E4F                 pop     r15
.text:0000000000004E51                 xor     eax, eax
.text:0000000000004E53                 jmp     ___fprintf_chk
.text:0000000000004E53 ; ---------------------------------------------------------------------------
.text:0000000000004E58                 align 20h
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004E60                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004E60                 mov     r13, [rbx+10h]  ; jumptable 0000000000004CC4 case 3
.text:0000000000004E64                 mov     r12, [rbx+8]
.text:0000000000004E68                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000004E6F                 mov     rbx, [rbx]
.text:0000000000004E72                 mov     edx, 5          ; category
.text:0000000000004E77                 xor     edi, edi        ; domainname
.text:0000000000004E79                 call    _dcgettext
.text:0000000000004E7E                 add     rsp, 28h
.text:0000000000004E82                 mov     r9, r13
.text:0000000000004E85                 mov     r8, r12
.text:0000000000004E88                 mov     rcx, rbx
.text:0000000000004E8B                 mov     rdi, rbp
.text:0000000000004E8E                 mov     rdx, rax
.text:0000000000004E91                 pop     rbx
.text:0000000000004E92                 pop     rbp
.text:0000000000004E93                 pop     r12
.text:0000000000004E95                 pop     r13
.text:0000000000004E97                 pop     r14
.text:0000000000004E99                 pop     r15
.text:0000000000004E9B                 mov     esi, 1
.text:0000000000004EA0                 xor     eax, eax
.text:0000000000004EA2                 jmp     ___fprintf_chk
.text:0000000000004EA2 ; ---------------------------------------------------------------------------
.text:0000000000004EA7                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004EB0                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004EB0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004CC4 case 4
.text:0000000000004EB7                 mov     edx, 5          ; category
.text:0000000000004EBC                 xor     edi, edi        ; domainname
.text:0000000000004EBE                 mov     r14, [rbx+18h]
.text:0000000000004EC2                 mov     r13, [rbx+10h]
.text:0000000000004EC6                 mov     r12, [rbx+8]
.text:0000000000004ECA                 mov     rbx, [rbx]
.text:0000000000004ECD                 call    _dcgettext
.text:0000000000004ED2                 sub     rsp, 8
.text:0000000000004ED6
.text:0000000000004ED6 loc_4ED6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004ED6                 push    r14
.text:0000000000004ED8                 mov     rdx, rax
.text:0000000000004EDB                 mov     r9, r13
.text:0000000000004EDE                 mov     r8, r12
.text:0000000000004EE1                 mov     rcx, rbx
.text:0000000000004EE4                 mov     rdi, rbp
.text:0000000000004EE7                 mov     esi, 1
.text:0000000000004EEC                 xor     eax, eax
.text:0000000000004EEE                 call    ___fprintf_chk
.text:0000000000004EF3                 pop     rax
.text:0000000000004EF4                 pop     rdx
.text:0000000000004EF5                 add     rsp, 28h
.text:0000000000004EF9                 pop     rbx
.text:0000000000004EFA                 pop     rbp
.text:0000000000004EFB                 pop     r12
.text:0000000000004EFD                 pop     r13
.text:0000000000004EFF                 pop     r14
.text:0000000000004F01                 pop     r15
.text:0000000000004F03                 retn
.text:0000000000004F03 ; ---------------------------------------------------------------------------
.text:0000000000004F04                 align 8
.text:0000000000004F08
.text:0000000000004F08 loc_4F08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F08                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004F08                 mov     r15, [rbx+20h]  ; jumptable 0000000000004CC4 case 5
.text:0000000000004F0C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004F13                 mov     edx, 5          ; category
.text:0000000000004F18                 xor     edi, edi        ; domainname
.text:0000000000004F1A                 mov     r14, [rbx+18h]
.text:0000000000004F1E                 mov     r13, [rbx+10h]
.text:0000000000004F22                 mov     r12, [rbx+8]
.text:0000000000004F26                 mov     rbx, [rbx]
.text:0000000000004F29                 call    _dcgettext
.text:0000000000004F2E                 push    r15
.text:0000000000004F30                 jmp     short loc_4ED6
.text:0000000000004F30 ; ---------------------------------------------------------------------------
.text:0000000000004F32                 align 8
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004F38                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004F38                 mov     r8, [rbx+8]     ; jumptable 0000000000004CC4 case 6
.text:0000000000004F3C                 mov     r12, [rbx+28h]
.text:0000000000004F40                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004F47                 mov     r15, [rbx+20h]
.text:0000000000004F4B                 mov     r14, [rbx+18h]
.text:0000000000004F4F                 mov     edx, 5          ; category
.text:0000000000004F54                 mov     r13, [rbx+10h]
.text:0000000000004F58                 xor     edi, edi        ; domainname
.text:0000000000004F5A                 mov     rbx, [rbx]
.text:0000000000004F5D                 mov     [rsp+58h+var_58], r8
.text:0000000000004F61                 call    _dcgettext
.text:0000000000004F66                 sub     rsp, 8
.text:0000000000004F6A                 mov     r9, r13
.text:0000000000004F6D                 push    r12
.text:0000000000004F6F                 push    r15
.text:0000000000004F71                 push    r14
.text:0000000000004F73
.text:0000000000004F73 loc_4F73:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004F73                 mov     r8, [rsp+78h+var_58]
.text:0000000000004F78                 mov     rcx, rbx
.text:0000000000004F7B                 mov     rdx, rax
.text:0000000000004F7E                 mov     rdi, rbp
.text:0000000000004F81                 mov     esi, 1
.text:0000000000004F86                 xor     eax, eax
.text:0000000000004F88                 call    ___fprintf_chk
.text:0000000000004F8D                 add     rsp, 20h
.text:0000000000004F91                 add     rsp, 28h
.text:0000000000004F95                 pop     rbx
.text:0000000000004F96                 pop     rbp
.text:0000000000004F97                 pop     r12
.text:0000000000004F99                 pop     r13
.text:0000000000004F9B                 pop     r14
.text:0000000000004F9D                 pop     r15
.text:0000000000004F9F                 retn
.text:0000000000004FA0 ; ---------------------------------------------------------------------------
.text:0000000000004FA0
.text:0000000000004FA0 loc_4FA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FA0                                         ; DATA XREF: .rodata:jpt_4CC4↓o
.text:0000000000004FA0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004CC4 case 7
.text:0000000000004FA4                 mov     r13, [rbx+30h]
.text:0000000000004FA8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000004FAF                 mov     r12, [rbx+28h]
.text:0000000000004FB3                 mov     r15, [rbx+20h]
.text:0000000000004FB7                 mov     edx, 5          ; category
.text:0000000000004FBC                 mov     r14, [rbx+18h]
.text:0000000000004FC0                 mov     r8, [rbx+8]
.text:0000000000004FC4                 xor     edi, edi        ; domainname
.text:0000000000004FC6                 mov     [rsp+58h+var_50], r9
.text:0000000000004FCB                 mov     rbx, [rbx]
.text:0000000000004FCE                 mov     [rsp+58h+var_58], r8
.text:0000000000004FD2                 call    _dcgettext
.text:0000000000004FD7                 push    r13
.text:0000000000004FD9                 push    r12
.text:0000000000004FDB                 push    r15
.text:0000000000004FDD                 push    r14
.text:0000000000004FDF                 mov     r9, [rsp+78h+var_50]
.text:0000000000004FE4                 jmp     short loc_4F73
.text:0000000000004FE4 ; ---------------------------------------------------------------------------
.text:0000000000004FE6                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 def_4CC4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004FF0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004CC4 default case
.text:0000000000004FF4                 mov     r9, [rbx+38h]
.text:0000000000004FF8                 mov     edx, 5
.text:0000000000004FFD                 mov     rax, [rbx+10h]
.text:0000000000005001                 mov     r8, [rbx+8]
.text:0000000000005005                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000500C                 mov     r13, [rbx+30h]
.text:0000000000005010                 mov     r12, [rbx+28h]
.text:0000000000005014                 mov     r15, [rbx+20h]
.text:0000000000005018                 mov     r14, [rbx+18h]
.text:000000000000501C                 mov     [rsp+58h+var_40], r10
.text:0000000000005021                 mov     [rsp+58h+var_48], r9
.text:0000000000005026                 mov     [rsp+58h+var_58], rax
.text:000000000000502A                 mov     [rsp+58h+var_50], r8
.text:000000000000502F                 mov     rbx, [rbx]
.text:0000000000005032                 jmp     loc_4DC2
.text:0000000000005032 ; } // starts at 4C20
.text:0000000000005032 version_etc_arn endp
.text:0000000000005032
.text:0000000000005032 ; ---------------------------------------------------------------------------
.text:0000000000005037                 align 20h
.text:0000000000005040
.text:0000000000005040 ; =============== S U B R O U T I N E =======================================
.text:0000000000005040
.text:0000000000005040 ; Attributes: info_from_lumina
.text:0000000000005040
.text:0000000000005040 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005040                 public version_etc_ar
.text:0000000000005040 version_etc_ar  proc near
.text:0000000000005040 ; __unwind {
.text:0000000000005040                 xor     r9d, r9d
.text:0000000000005043                 cmp     qword ptr [r8], 0
.text:0000000000005047                 jz      short loc_505B
.text:0000000000005049                 nop     dword ptr [rax+00000000h]
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005050                 add     r9, 1
.text:0000000000005054                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005059                 jnz     short loc_5050
.text:000000000000505B
.text:000000000000505B loc_505B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000505B                 jmp     version_etc_arn
.text:000000000000505B ; } // starts at 5040
.text:000000000000505B version_etc_ar  endp
.text:000000000000505B
.text:0000000000005060
.text:0000000000005060 ; =============== S U B R O U T I N E =======================================
.text:0000000000005060
.text:0000000000005060 ; Attributes: info_from_lumina
.text:0000000000005060
.text:0000000000005060 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005060                 public version_etc_va
.text:0000000000005060 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000005060                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000005060
.text:0000000000005060 authtab         = qword ptr -68h
.text:0000000000005060 var_10          = qword ptr -10h
.text:0000000000005060
.text:0000000000005060 ; __unwind {
.text:0000000000005060                 sub     rsp, 68h
.text:0000000000005064                 mov     r10, r8
.text:0000000000005067                 xor     r9d, r9d
.text:000000000000506A                 mov     rax, fs:28h
.text:0000000000005073                 mov     [rsp+68h+var_10], rax
.text:0000000000005078                 xor     eax, eax
.text:000000000000507A                 mov     r8, rsp
.text:000000000000507D                 nop     dword ptr [rax]
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005080                 mov     eax, [r10]
.text:0000000000005083                 cmp     eax, 2Fh ; '/'
.text:0000000000005086                 ja      short loc_50CA
.text:0000000000005088                 mov     r11d, eax
.text:000000000000508B                 add     r11, [r10+10h]
.text:000000000000508F                 add     eax, 8
.text:0000000000005092                 mov     [r10], eax
.text:0000000000005095
.text:0000000000005095 loc_5095:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005095                 mov     rax, [r11]
.text:0000000000005098                 test    rax, rax
.text:000000000000509B                 mov     [r8+r9*8], rax
.text:000000000000509F                 jz      short loc_50AB
.text:00000000000050A1                 add     r9, 1
.text:00000000000050A5                 cmp     r9, 0Ah
.text:00000000000050A9                 jnz     short loc_5080
.text:00000000000050AB
.text:00000000000050AB loc_50AB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000050AB                 call    version_etc_arn
.text:00000000000050B0                 mov     rax, [rsp+68h+var_10]
.text:00000000000050B5                 xor     rax, fs:28h
.text:00000000000050BE                 jnz     short loc_50C5
.text:00000000000050C0                 add     rsp, 68h
.text:00000000000050C4                 retn
.text:00000000000050C5 ; ---------------------------------------------------------------------------
.text:00000000000050C5
.text:00000000000050C5 loc_50C5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000050C5                 call    ___stack_chk_fail
.text:00000000000050CA ; ---------------------------------------------------------------------------
.text:00000000000050CA
.text:00000000000050CA loc_50CA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000050CA                 mov     r11, [r10+8]
.text:00000000000050CE                 lea     rax, [r11+8]
.text:00000000000050D2                 mov     [r10+8], rax
.text:00000000000050D6                 jmp     short loc_5095
.text:00000000000050D6 ; } // starts at 5060
.text:00000000000050D6 version_etc_va  endp
.text:00000000000050D6
.text:00000000000050D6 ; ---------------------------------------------------------------------------
.text:00000000000050D8                 align 20h
.text:00000000000050E0
.text:00000000000050E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050E0
.text:00000000000050E0 ; Attributes: info_from_lumina
.text:00000000000050E0
.text:00000000000050E0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000050E0                 public version_etc
.text:00000000000050E0 version_etc     proc near
.text:00000000000050E0
.text:00000000000050E0 var_C0          = dword ptr -0C0h
.text:00000000000050E0 var_B8          = qword ptr -0B8h
.text:00000000000050E0 var_B0          = qword ptr -0B0h
.text:00000000000050E0 var_A8          = byte ptr -0A8h
.text:00000000000050E0 var_50          = qword ptr -50h
.text:00000000000050E0 var_48          = byte ptr -48h
.text:00000000000050E0 var_28          = qword ptr -28h
.text:00000000000050E0 var_20          = qword ptr -20h
.text:00000000000050E0 arg_0           = byte ptr  8
.text:00000000000050E0
.text:00000000000050E0 ; __unwind {
.text:00000000000050E0                 push    rbp
.text:00000000000050E1                 push    rbx
.text:00000000000050E2                 mov     r10d, 20h ; ' '
.text:00000000000050E8                 xor     r11d, r11d
.text:00000000000050EB                 sub     rsp, 0B8h
.text:00000000000050F2                 mov     rax, fs:28h
.text:00000000000050FB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005100                 xor     eax, eax
.text:0000000000005102                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000510A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005112                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000511A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000511F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005127                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000512F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005134                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000513C                 xor     r9d, r9d
.text:000000000000513F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005144                 mov     rbp, rax
.text:0000000000005147                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005150
.text:0000000000005150 loc_5150:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005150                 cmp     r10d, 2Fh ; '/'
.text:0000000000005154                 ja      short loc_51AC
.text:0000000000005156                 mov     eax, r10d
.text:0000000000005159                 mov     r11d, 1
.text:000000000000515F                 add     r10d, 8
.text:0000000000005163                 add     rax, rbp
.text:0000000000005166
.text:0000000000005166 loc_5166:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005166                 mov     rax, [rax]
.text:0000000000005169                 test    rax, rax
.text:000000000000516C                 mov     [r8+r9*8], rax
.text:0000000000005170                 jz      short loc_517C
.text:0000000000005172                 add     r9, 1
.text:0000000000005176                 cmp     r9, 0Ah
.text:000000000000517A                 jnz     short loc_5150
.text:000000000000517C
.text:000000000000517C loc_517C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000517C                 test    r11b, r11b
.text:000000000000517F                 jnz     short loc_51A5
.text:0000000000005181
.text:0000000000005181 loc_5181:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005181                 call    version_etc_arn
.text:0000000000005186                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000518B                 xor     rax, fs:28h
.text:0000000000005194                 jnz     short loc_51A0
.text:0000000000005196                 add     rsp, 0B8h
.text:000000000000519D                 pop     rbx
.text:000000000000519E                 pop     rbp
.text:000000000000519F                 retn
.text:00000000000051A0 ; ---------------------------------------------------------------------------
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000051A0                 call    ___stack_chk_fail
.text:00000000000051A5 ; ---------------------------------------------------------------------------
.text:00000000000051A5
.text:00000000000051A5 loc_51A5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000051A5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000051AA                 jmp     short loc_5181
.text:00000000000051AC ; ---------------------------------------------------------------------------
.text:00000000000051AC
.text:00000000000051AC loc_51AC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000051AC                 mov     rax, rbx
.text:00000000000051AF                 add     rbx, 8
.text:00000000000051B3                 jmp     short loc_5166
.text:00000000000051B3 ; } // starts at 50E0
.text:00000000000051B3 version_etc     endp
.text:00000000000051B3
.text:00000000000051B3 ; ---------------------------------------------------------------------------
.text:00000000000051B5                 align 20h
.text:00000000000051C0
.text:00000000000051C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051C0
.text:00000000000051C0 ; Attributes: info_from_lumina
.text:00000000000051C0
.text:00000000000051C0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000051C0                 public emit_bug_reporting_address
.text:00000000000051C0 emit_bug_reporting_address proc near
.text:00000000000051C0 ; __unwind {
.text:00000000000051C0                 push    rbx
.text:00000000000051C1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000051C8                 mov     edx, 5          ; category
.text:00000000000051CD                 xor     edi, edi        ; domainname
.text:00000000000051CF                 call    _dcgettext
.text:00000000000051D4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000051DB                 mov     rsi, rax
.text:00000000000051DE                 mov     edi, 1
.text:00000000000051E3                 xor     eax, eax
.text:00000000000051E5                 call    ___printf_chk
.text:00000000000051EA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000051F1                 mov     edx, 5          ; category
.text:00000000000051F6                 xor     edi, edi        ; domainname
.text:00000000000051F8                 call    _dcgettext
.text:00000000000051FD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005204                 lea     rdx, unk_58C0
.text:000000000000520B                 mov     rsi, rax
.text:000000000000520E                 mov     edi, 1
.text:0000000000005213                 xor     eax, eax
.text:0000000000005215                 call    ___printf_chk
.text:000000000000521A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005221                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005228                 xor     edi, edi        ; domainname
.text:000000000000522A                 mov     edx, 5          ; category
.text:000000000000522F                 call    _dcgettext
.text:0000000000005234                 mov     rsi, rbx        ; stream
.text:0000000000005237                 mov     rdi, rax        ; s
.text:000000000000523A                 pop     rbx
.text:000000000000523B                 jmp     _fputs_unlocked
.text:000000000000523B ; } // starts at 51C0
.text:000000000000523B emit_bug_reporting_address endp
.text:000000000000523B
.text:0000000000005240
.text:0000000000005240 ; =============== S U B R O U T I N E =======================================
.text:0000000000005240
.text:0000000000005240
.text:0000000000005240                 public xmalloc
.text:0000000000005240 xmalloc         proc near               ; CODE XREF: main+350↑p
.text:0000000000005240                                         ; new_item+E↑p ...
.text:0000000000005240 ; __unwind {
.text:0000000000005240                 push    rbx
.text:0000000000005241                 mov     rbx, rdi
.text:0000000000005244                 call    _malloc
.text:0000000000005249                 test    rax, rax
.text:000000000000524C                 jnz     short loc_5253
.text:000000000000524E                 test    rbx, rbx
.text:0000000000005251                 jnz     short loc_5255
.text:0000000000005253
.text:0000000000005253 loc_5253:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005253                 pop     rbx
.text:0000000000005254                 retn
.text:0000000000005255 ; ---------------------------------------------------------------------------
.text:0000000000005255
.text:0000000000005255 loc_5255:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005255                 call    xalloc_die
.text:0000000000005255 ; } // starts at 5240
.text:0000000000005255 xmalloc         endp
.text:0000000000005255
.text:0000000000005255 ; ---------------------------------------------------------------------------
.text:000000000000525A                 align 20h
.text:0000000000005260
.text:0000000000005260 ; =============== S U B R O U T I N E =======================================
.text:0000000000005260
.text:0000000000005260 ; Attributes: info_from_lumina
.text:0000000000005260
.text:0000000000005260 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005260                 public xnmalloc
.text:0000000000005260 xnmalloc        proc near
.text:0000000000005260 ; __unwind {
.text:0000000000005260                 mov     rax, rdi
.text:0000000000005263                 mul     rsi
.text:0000000000005266                 mov     rdi, rax
.text:0000000000005269                 seto    al
.text:000000000000526C                 test    rdi, rdi
.text:000000000000526F                 js      short loc_527B
.text:0000000000005271                 movzx   eax, al
.text:0000000000005274                 test    rax, rax
.text:0000000000005277                 jnz     short loc_527B
.text:0000000000005279                 jmp     short xmalloc
.text:000000000000527B ; ---------------------------------------------------------------------------
.text:000000000000527B
.text:000000000000527B loc_527B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000527B                                         ; xnmalloc+17↑j
.text:000000000000527B                 sub     rsp, 8
.text:000000000000527F                 call    xalloc_die
.text:000000000000527F ; } // starts at 5260
.text:000000000000527F xnmalloc        endp
.text:000000000000527F
.text:000000000000527F ; ---------------------------------------------------------------------------
.text:0000000000005284                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290
.text:0000000000005290                 public xcharalloc
.text:0000000000005290 xcharalloc      proc near
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 jmp     short xmalloc
.text:0000000000005290 ; } // starts at 5290
.text:0000000000005290 xcharalloc      endp
.text:0000000000005290
.text:0000000000005290 ; ---------------------------------------------------------------------------
.text:0000000000005292                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: info_from_lumina
.text:00000000000052A0
.text:00000000000052A0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000052A0                 public xrealloc
.text:00000000000052A0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000052A0                                         ; quotearg_n_options+182↑p ...
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 test    rsi, rsi
.text:00000000000052A3                 push    rbx
.text:00000000000052A4                 mov     rbx, rsi
.text:00000000000052A7                 jnz     short loc_52AE
.text:00000000000052A9                 test    rdi, rdi
.text:00000000000052AC                 jnz     short loc_52C8
.text:00000000000052AE
.text:00000000000052AE loc_52AE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000052AE                 mov     rsi, rbx        ; size
.text:00000000000052B1                 call    _realloc
.text:00000000000052B6                 test    rax, rax
.text:00000000000052B9                 jnz     short loc_52C0
.text:00000000000052BB                 test    rbx, rbx
.text:00000000000052BE                 jnz     short loc_52D1
.text:00000000000052C0
.text:00000000000052C0 loc_52C0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000052C0                 pop     rbx
.text:00000000000052C1                 retn
.text:00000000000052C1 ; ---------------------------------------------------------------------------
.text:00000000000052C2                 align 8
.text:00000000000052C8
.text:00000000000052C8 loc_52C8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000052C8                 call    _free
.text:00000000000052CD                 xor     eax, eax
.text:00000000000052CF                 pop     rbx
.text:00000000000052D0                 retn
.text:00000000000052D1 ; ---------------------------------------------------------------------------
.text:00000000000052D1
.text:00000000000052D1 loc_52D1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000052D1                 call    xalloc_die
.text:00000000000052D1 ; } // starts at 52A0
.text:00000000000052D1 xrealloc        endp
.text:00000000000052D1
.text:00000000000052D1 ; ---------------------------------------------------------------------------
.text:00000000000052D6                 align 20h
.text:00000000000052E0
.text:00000000000052E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052E0
.text:00000000000052E0 ; Attributes: info_from_lumina
.text:00000000000052E0
.text:00000000000052E0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000052E0                 public xnrealloc
.text:00000000000052E0 xnrealloc       proc near
.text:00000000000052E0 ; __unwind {
.text:00000000000052E0                 mov     rax, rsi
.text:00000000000052E3                 mul     rdx
.text:00000000000052E6                 mov     rsi, rax
.text:00000000000052E9                 seto    al
.text:00000000000052EC                 test    rsi, rsi
.text:00000000000052EF                 js      short loc_52FB
.text:00000000000052F1                 movzx   eax, al
.text:00000000000052F4                 test    rax, rax
.text:00000000000052F7                 jnz     short loc_52FB
.text:00000000000052F9                 jmp     short xrealloc
.text:00000000000052FB ; ---------------------------------------------------------------------------
.text:00000000000052FB
.text:00000000000052FB loc_52FB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000052FB                                         ; xnrealloc+17↑j
.text:00000000000052FB                 sub     rsp, 8
.text:00000000000052FF                 call    xalloc_die
.text:00000000000052FF ; } // starts at 52E0
.text:00000000000052FF xnrealloc       endp
.text:00000000000052FF
.text:00000000000052FF ; ---------------------------------------------------------------------------
.text:0000000000005304                 align 10h
.text:0000000000005310
.text:0000000000005310 ; =============== S U B R O U T I N E =======================================
.text:0000000000005310
.text:0000000000005310 ; Attributes: info_from_lumina
.text:0000000000005310
.text:0000000000005310 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005310                 public x2nrealloc
.text:0000000000005310 x2nrealloc      proc near
.text:0000000000005310 ; __unwind {
.text:0000000000005310                 test    rdi, rdi
.text:0000000000005313                 mov     r9, rdx
.text:0000000000005316                 mov     rcx, [rsi]
.text:0000000000005319                 jz      short loc_5350
.text:000000000000531B                 xor     edx, edx
.text:000000000000531D                 mov     rax, 5555555555555554h
.text:0000000000005327                 div     r9
.text:000000000000532A                 cmp     rax, rcx
.text:000000000000532D                 jbe     short loc_536B
.text:000000000000532F                 mov     rax, rcx
.text:0000000000005332                 shr     rax, 1
.text:0000000000005335                 lea     rcx, [rax+rcx+1]
.text:000000000000533A
.text:000000000000533A loc_533A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000533A                 mov     [rsi], rcx
.text:000000000000533D                 imul    rcx, r9
.text:0000000000005341                 mov     rsi, rcx
.text:0000000000005344                 jmp     xrealloc
.text:0000000000005344 ; ---------------------------------------------------------------------------
.text:0000000000005349                 align 10h
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005350                 test    rcx, rcx
.text:0000000000005353                 jz      short loc_5378
.text:0000000000005355
.text:0000000000005355 loc_5355:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005355                 mov     rax, rcx
.text:0000000000005358                 mul     r9
.text:000000000000535B                 seto    dl
.text:000000000000535E                 test    rax, rax
.text:0000000000005361                 movzx   edx, dl
.text:0000000000005364                 js      short loc_536B
.text:0000000000005366                 test    rdx, rdx
.text:0000000000005369                 jz      short loc_533A
.text:000000000000536B
.text:000000000000536B loc_536B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000536B                                         ; x2nrealloc+54↑j
.text:000000000000536B                 sub     rsp, 8
.text:000000000000536F                 call    xalloc_die
.text:000000000000536F ; ---------------------------------------------------------------------------
.text:0000000000005374                 align 8
.text:0000000000005378
.text:0000000000005378 loc_5378:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005378                 xor     edx, edx
.text:000000000000537A                 mov     eax, 80h
.text:000000000000537F                 xor     r8d, r8d
.text:0000000000005382                 div     r9
.text:0000000000005385                 test    rax, rax
.text:0000000000005388                 setz    r8b
.text:000000000000538C                 lea     rcx, [r8+rax]
.text:0000000000005390                 jmp     short loc_5355
.text:0000000000005390 ; } // starts at 5310
.text:0000000000005390 x2nrealloc      endp
.text:0000000000005390
.text:0000000000005390 ; ---------------------------------------------------------------------------
.text:0000000000005392                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0 ; Attributes: info_from_lumina
.text:00000000000053A0
.text:00000000000053A0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000053A0                 public x2realloc
.text:00000000000053A0 x2realloc       proc near
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 test    rdi, rdi
.text:00000000000053A3                 mov     rax, [rsi]
.text:00000000000053A6                 jz      short loc_53D0
.text:00000000000053A8                 mov     rdx, 5555555555555553h
.text:00000000000053B2                 cmp     rax, rdx
.text:00000000000053B5                 ja      short loc_53E1
.text:00000000000053B7                 mov     rdx, rax
.text:00000000000053BA                 shr     rdx, 1
.text:00000000000053BD                 lea     rax, [rdx+rax+1]
.text:00000000000053C2
.text:00000000000053C2 loc_53C2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000053C2                 mov     [rsi], rax
.text:00000000000053C5                 mov     rsi, rax
.text:00000000000053C8                 jmp     xrealloc
.text:00000000000053C8 ; ---------------------------------------------------------------------------
.text:00000000000053CD                 align 10h
.text:00000000000053D0
.text:00000000000053D0 loc_53D0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000053D0                 test    rax, rax
.text:00000000000053D3                 mov     edx, 80h
.text:00000000000053D8                 cmovz   rax, rdx
.text:00000000000053DC                 test    rax, rax
.text:00000000000053DF                 jns     short loc_53C2
.text:00000000000053E1
.text:00000000000053E1 loc_53E1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000053E1                 sub     rsp, 8
.text:00000000000053E5                 call    xalloc_die
.text:00000000000053E5 ; } // starts at 53A0
.text:00000000000053E5 x2realloc       endp
.text:00000000000053E5
.text:00000000000053E5 ; ---------------------------------------------------------------------------
.text:00000000000053EA                 align 10h
.text:00000000000053F0
.text:00000000000053F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053F0
.text:00000000000053F0
.text:00000000000053F0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000053F0                 public xzalloc
.text:00000000000053F0 xzalloc         proc near
.text:00000000000053F0 ; __unwind {
.text:00000000000053F0                 push    rbx
.text:00000000000053F1                 mov     rbx, rdi
.text:00000000000053F4                 call    xmalloc
.text:00000000000053F9                 mov     rdx, rbx        ; n
.text:00000000000053FC                 xor     esi, esi        ; c
.text:00000000000053FE                 mov     rdi, rax        ; s
.text:0000000000005401                 pop     rbx
.text:0000000000005402                 jmp     _memset
.text:0000000000005402 ; } // starts at 53F0
.text:0000000000005402 xzalloc         endp
.text:0000000000005402
.text:0000000000005402 ; ---------------------------------------------------------------------------
.text:0000000000005407                 align 10h
.text:0000000000005410
.text:0000000000005410 ; =============== S U B R O U T I N E =======================================
.text:0000000000005410
.text:0000000000005410 ; Attributes: info_from_lumina
.text:0000000000005410
.text:0000000000005410 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005410                 public xcalloc
.text:0000000000005410 xcalloc         proc near
.text:0000000000005410 ; __unwind {
.text:0000000000005410                 mov     rax, rdi
.text:0000000000005413                 sub     rsp, 8
.text:0000000000005417                 mul     rsi
.text:000000000000541A                 seto    dl
.text:000000000000541D                 test    rax, rax
.text:0000000000005420                 js      short loc_5439
.text:0000000000005422                 movzx   edx, dl
.text:0000000000005425                 test    rdx, rdx
.text:0000000000005428                 jnz     short loc_5439
.text:000000000000542A                 call    _calloc
.text:000000000000542F                 test    rax, rax
.text:0000000000005432                 jz      short loc_5439
.text:0000000000005434                 add     rsp, 8
.text:0000000000005438                 retn
.text:0000000000005439 ; ---------------------------------------------------------------------------
.text:0000000000005439
.text:0000000000005439 loc_5439:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005439                                         ; xcalloc+18↑j ...
.text:0000000000005439                 call    xalloc_die
.text:0000000000005439 ; } // starts at 5410
.text:0000000000005439 xcalloc         endp
.text:0000000000005439
.text:0000000000005439 ; ---------------------------------------------------------------------------
.text:000000000000543E                 align 20h
.text:0000000000005440
.text:0000000000005440 ; =============== S U B R O U T I N E =======================================
.text:0000000000005440
.text:0000000000005440 ; Attributes: info_from_lumina
.text:0000000000005440
.text:0000000000005440 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005440                 public xmemdup
.text:0000000000005440 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005440                                         ; xstrdup+11↓j
.text:0000000000005440 ; __unwind {
.text:0000000000005440                 push    rbp
.text:0000000000005441                 push    rbx
.text:0000000000005442                 mov     rbp, rdi
.text:0000000000005445                 mov     rdi, rsi
.text:0000000000005448                 mov     rbx, rsi
.text:000000000000544B                 sub     rsp, 8
.text:000000000000544F                 call    xmalloc
.text:0000000000005454                 add     rsp, 8
.text:0000000000005458                 mov     rdx, rbx        ; n
.text:000000000000545B                 mov     rsi, rbp        ; src
.text:000000000000545E                 pop     rbx
.text:000000000000545F                 pop     rbp
.text:0000000000005460                 mov     rdi, rax        ; dest
.text:0000000000005463                 jmp     _memcpy
.text:0000000000005463 ; } // starts at 5440
.text:0000000000005463 xmemdup         endp
.text:0000000000005463
.text:0000000000005463 ; ---------------------------------------------------------------------------
.text:0000000000005468                 align 10h
.text:0000000000005470
.text:0000000000005470 ; =============== S U B R O U T I N E =======================================
.text:0000000000005470
.text:0000000000005470
.text:0000000000005470 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005470                 public xstrdup
.text:0000000000005470 xstrdup         proc near               ; CODE XREF: new_item+1E↑p
.text:0000000000005470 ; __unwind {
.text:0000000000005470                 push    rbx
.text:0000000000005471                 mov     rbx, rdi
.text:0000000000005474                 call    _strlen
.text:0000000000005479                 mov     rdi, rbx        ; src
.text:000000000000547C                 lea     rsi, [rax+1]    ; n
.text:0000000000005480                 pop     rbx
.text:0000000000005481                 jmp     short xmemdup
.text:0000000000005481 ; } // starts at 5470
.text:0000000000005481 xstrdup         endp
.text:0000000000005481
.text:0000000000005481 ; ---------------------------------------------------------------------------
.text:0000000000005483                 align 10h
.text:0000000000005490
.text:0000000000005490 ; =============== S U B R O U T I N E =======================================
.text:0000000000005490
.text:0000000000005490 ; Attributes: noreturn info_from_lumina
.text:0000000000005490
.text:0000000000005490 ; void __cdecl xalloc_die()
.text:0000000000005490                 public xalloc_die
.text:0000000000005490 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_4046↑p
.text:0000000000005490                                         ; readtoken:loc_49D4↑p ...
.text:0000000000005490 ; __unwind {
.text:0000000000005490                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005497                 sub     rsp, 8
.text:000000000000549B                 mov     edx, 5          ; category
.text:00000000000054A0                 xor     edi, edi        ; domainname
.text:00000000000054A2                 call    _dcgettext
.text:00000000000054A7                 mov     edi, cs:exit_failure ; status
.text:00000000000054AD                 lea     rdx, format+4   ; format
.text:00000000000054B4                 mov     rcx, rax
.text:00000000000054B7                 xor     esi, esi        ; errnum
.text:00000000000054B9                 xor     eax, eax
.text:00000000000054BB                 call    _error
.text:00000000000054C0                 call    _abort
.text:00000000000054C0 ; } // starts at 5490
.text:00000000000054C0 xalloc_die      endp
.text:00000000000054C0
.text:00000000000054C0 ; ---------------------------------------------------------------------------
.text:00000000000054C5                 align 10h
.text:00000000000054D0
.text:00000000000054D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054D0
.text:00000000000054D0 ; Attributes: info_from_lumina
.text:00000000000054D0
.text:00000000000054D0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000054D0                 public rpl_fclose
.text:00000000000054D0 rpl_fclose      proc near               ; CODE XREF: main+484↑p
.text:00000000000054D0                                         ; close_stream+15↓p
.text:00000000000054D0 ; __unwind {
.text:00000000000054D0                 push    r12
.text:00000000000054D2                 push    rbp
.text:00000000000054D3                 push    rbx
.text:00000000000054D4                 mov     rbx, rdi
.text:00000000000054D7                 call    _fileno
.text:00000000000054DC                 test    eax, eax
.text:00000000000054DE                 mov     rdi, rbx        ; fp
.text:00000000000054E1                 js      short loc_5537
.text:00000000000054E3                 call    ___freading
.text:00000000000054E8                 test    eax, eax
.text:00000000000054EA                 jnz     short loc_5518
.text:00000000000054EC
.text:00000000000054EC loc_54EC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000054EC                 mov     rdi, rbx        ; stream
.text:00000000000054EF                 call    rpl_fflush
.text:00000000000054F4                 test    eax, eax
.text:00000000000054F6                 jz      short loc_5534
.text:00000000000054F8                 call    ___errno_location
.text:00000000000054FD                 mov     r12d, [rax]
.text:0000000000005500                 mov     rdi, rbx        ; stream
.text:0000000000005503                 mov     rbp, rax
.text:0000000000005506                 call    _fclose
.text:000000000000550B                 test    r12d, r12d
.text:000000000000550E                 jnz     short loc_5540
.text:0000000000005510
.text:0000000000005510 loc_5510:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000005510                 pop     rbx
.text:0000000000005511                 pop     rbp
.text:0000000000005512                 pop     r12
.text:0000000000005514                 retn
.text:0000000000005514 ; ---------------------------------------------------------------------------
.text:0000000000005515                 align 8
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000005518                 mov     rdi, rbx        ; stream
.text:000000000000551B                 call    _fileno
.text:0000000000005520                 xor     esi, esi        ; offset
.text:0000000000005522                 mov     edx, 1          ; whence
.text:0000000000005527                 mov     edi, eax        ; fd
.text:0000000000005529                 call    _lseek
.text:000000000000552E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005532                 jnz     short loc_54EC
.text:0000000000005534
.text:0000000000005534 loc_5534:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000005534                 mov     rdi, rbx        ; stream
.text:0000000000005537
.text:0000000000005537 loc_5537:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000005537                 pop     rbx
.text:0000000000005538                 pop     rbp
.text:0000000000005539                 pop     r12
.text:000000000000553B                 jmp     _fclose
.text:0000000000005540 ; ---------------------------------------------------------------------------
.text:0000000000005540
.text:0000000000005540 loc_5540:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000005540                 mov     [rbp+0], r12d
.text:0000000000005544                 mov     eax, 0FFFFFFFFh
.text:0000000000005549                 jmp     short loc_5510
.text:0000000000005549 ; } // starts at 54D0
.text:0000000000005549 rpl_fclose      endp
.text:0000000000005549
.text:0000000000005549 ; ---------------------------------------------------------------------------
.text:000000000000554B                 align 10h
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550 ; Attributes: info_from_lumina
.text:0000000000005550
.text:0000000000005550 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000005550                 public rpl_fflush
.text:0000000000005550 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 test    rdi, rdi
.text:0000000000005553                 push    rbx
.text:0000000000005554                 mov     rbx, rdi
.text:0000000000005557                 jz      short loc_556A
.text:0000000000005559                 call    ___freading
.text:000000000000555E                 test    eax, eax
.text:0000000000005560                 jz      short loc_556A
.text:0000000000005562                 test    dword ptr [rbx], 100h
.text:0000000000005568                 jnz     short loc_5578
.text:000000000000556A
.text:000000000000556A loc_556A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000556A                                         ; rpl_fflush+10↑j
.text:000000000000556A                 mov     rdi, rbx        ; stream
.text:000000000000556D                 pop     rbx
.text:000000000000556E                 jmp     _fflush
.text:000000000000556E ; ---------------------------------------------------------------------------
.text:0000000000005573                 align 8
.text:0000000000005578
.text:0000000000005578 loc_5578:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000005578                 mov     rdi, rbx
.text:000000000000557B                 mov     edx, 1
.text:0000000000005580                 xor     esi, esi
.text:0000000000005582                 call    rpl_fseeko
.text:0000000000005587                 mov     rdi, rbx        ; stream
.text:000000000000558A                 pop     rbx
.text:000000000000558B                 jmp     _fflush
.text:000000000000558B ; } // starts at 5550
.text:000000000000558B rpl_fflush      endp
.text:000000000000558B
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590 ; Attributes: info_from_lumina
.text:0000000000005590
.text:0000000000005590 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000005590                 public rpl_fseeko
.text:0000000000005590 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 mov     rax, [rdi+8]
.text:0000000000005594                 cmp     [rdi+10h], rax
.text:0000000000005598                 jz      short loc_55A0
.text:000000000000559A
.text:000000000000559A loc_559A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000559A                                         ; rpl_fseeko+1F↓j
.text:000000000000559A                 jmp     _fseeko
.text:000000000000559A ; ---------------------------------------------------------------------------
.text:000000000000559F                 align 20h
.text:00000000000055A0
.text:00000000000055A0 loc_55A0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000055A0                 mov     rax, [rdi+20h]
.text:00000000000055A4                 cmp     [rdi+28h], rax
.text:00000000000055A8                 jnz     short loc_559A
.text:00000000000055AA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000055AF                 jnz     short loc_559A
.text:00000000000055B1                 push    r12
.text:00000000000055B3                 push    rbp
.text:00000000000055B4                 mov     r12d, edx
.text:00000000000055B7                 push    rbx
.text:00000000000055B8                 mov     rbp, rsi
.text:00000000000055BB                 mov     rbx, rdi
.text:00000000000055BE                 call    _fileno
.text:00000000000055C3                 mov     edx, r12d       ; whence
.text:00000000000055C6                 mov     rsi, rbp        ; offset
.text:00000000000055C9                 mov     edi, eax        ; fd
.text:00000000000055CB                 call    _lseek
.text:00000000000055D0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000055D4                 jz      short loc_55E2
.text:00000000000055D6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000055D9                 mov     [rbx+90h], rax
.text:00000000000055E0                 xor     eax, eax
.text:00000000000055E2
.text:00000000000055E2 loc_55E2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000055E2                 pop     rbx
.text:00000000000055E3                 pop     rbp
.text:00000000000055E4                 pop     r12
.text:00000000000055E6                 retn
.text:00000000000055E6 ; } // starts at 5590
.text:00000000000055E6 rpl_fseeko      endp
.text:00000000000055E6
.text:00000000000055E6 ; ---------------------------------------------------------------------------
.text:00000000000055E7                 align 10h
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000055F0                 public rpl_mbrtowc
.text:00000000000055F0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000055F0
.text:00000000000055F0 pwc             = dword ptr -34h
.text:00000000000055F0 var_30          = qword ptr -30h
.text:00000000000055F0
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 push    r13
.text:00000000000055F2                 push    r12
.text:00000000000055F4                 mov     r13, rsi
.text:00000000000055F7                 push    rbp
.text:00000000000055F8                 push    rbx
.text:00000000000055F9                 mov     rbx, rdi
.text:00000000000055FC                 mov     r12, rdx
.text:00000000000055FF                 sub     rsp, 18h
.text:0000000000005603                 mov     rax, fs:28h
.text:000000000000560C                 mov     [rsp+38h+var_30], rax
.text:0000000000005611                 xor     eax, eax
.text:0000000000005613                 lea     rax, [rsp+38h+pwc]
.text:0000000000005618                 test    rdi, rdi
.text:000000000000561B                 cmovz   rbx, rax
.text:000000000000561F                 mov     rdi, rbx        ; pwc
.text:0000000000005622                 call    _mbrtowc
.text:0000000000005627                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000562B                 mov     rbp, rax
.text:000000000000562E                 jbe     short loc_5650
.text:0000000000005630                 test    r12, r12
.text:0000000000005633                 jz      short loc_5650
.text:0000000000005635                 xor     edi, edi
.text:0000000000005637                 call    hard_locale
.text:000000000000563C                 test    al, al
.text:000000000000563E                 jnz     short loc_5650
.text:0000000000005640                 movzx   eax, byte ptr [r13+0]
.text:0000000000005645                 mov     ebp, 1
.text:000000000000564A                 mov     [rbx], eax
.text:000000000000564C                 nop     dword ptr [rax+00h]
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005650                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005650                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005655                 xor     rdx, fs:28h
.text:000000000000565E                 mov     rax, rbp
.text:0000000000005661                 jnz     short loc_566E
.text:0000000000005663                 add     rsp, 18h
.text:0000000000005667                 pop     rbx
.text:0000000000005668                 pop     rbp
.text:0000000000005669                 pop     r12
.text:000000000000566B                 pop     r13
.text:000000000000566D                 retn
.text:000000000000566E ; ---------------------------------------------------------------------------
.text:000000000000566E
.text:000000000000566E loc_566E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000566E                 call    ___stack_chk_fail
.text:000000000000566E ; } // starts at 55F0
.text:000000000000566E rpl_mbrtowc     endp
.text:000000000000566E
.text:000000000000566E ; ---------------------------------------------------------------------------
.text:0000000000005673                 align 20h
.text:0000000000005680
.text:0000000000005680 ; =============== S U B R O U T I N E =======================================
.text:0000000000005680
.text:0000000000005680 ; Attributes: info_from_lumina
.text:0000000000005680
.text:0000000000005680 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005680                 public close_stream
.text:0000000000005680 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005680                                         ; close_stdout+33↑p
.text:0000000000005680 ; __unwind {
.text:0000000000005680                 push    r12
.text:0000000000005682                 push    rbp
.text:0000000000005683                 mov     rbp, rdi
.text:0000000000005686                 push    rbx
.text:0000000000005687                 call    ___fpending
.text:000000000000568C                 mov     ebx, [rbp+0]
.text:000000000000568F                 mov     rdi, rbp        ; stream
.text:0000000000005692                 mov     r12, rax
.text:0000000000005695                 call    rpl_fclose
.text:000000000000569A                 and     ebx, 20h
.text:000000000000569D                 test    ebx, ebx
.text:000000000000569F                 jnz     short loc_56B8
.text:00000000000056A1                 test    eax, eax
.text:00000000000056A3                 jz      short loc_56AF
.text:00000000000056A5                 test    r12, r12
.text:00000000000056A8                 mov     eax, 0FFFFFFFFh
.text:00000000000056AD                 jz      short loc_56E8
.text:00000000000056AF
.text:00000000000056AF loc_56AF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000056AF                 pop     rbx
.text:00000000000056B0                 pop     rbp
.text:00000000000056B1                 pop     r12
.text:00000000000056B3                 retn
.text:00000000000056B3 ; ---------------------------------------------------------------------------
.text:00000000000056B4                 align 8
.text:00000000000056B8
.text:00000000000056B8 loc_56B8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000056B8                 test    eax, eax
.text:00000000000056BA                 jnz     short loc_56D8
.text:00000000000056BC                 call    ___errno_location
.text:00000000000056C1                 mov     dword ptr [rax], 0
.text:00000000000056C7                 mov     eax, 0FFFFFFFFh
.text:00000000000056CC                 pop     rbx
.text:00000000000056CD                 pop     rbp
.text:00000000000056CE                 pop     r12
.text:00000000000056D0                 retn
.text:00000000000056D0 ; ---------------------------------------------------------------------------
.text:00000000000056D1                 align 8
.text:00000000000056D8
.text:00000000000056D8 loc_56D8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000056D8                 pop     rbx
.text:00000000000056D9                 mov     eax, 0FFFFFFFFh
.text:00000000000056DE                 pop     rbp
.text:00000000000056DF                 pop     r12
.text:00000000000056E1                 retn
.text:00000000000056E1 ; ---------------------------------------------------------------------------
.text:00000000000056E2                 align 8
.text:00000000000056E8
.text:00000000000056E8 loc_56E8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000056E8                 call    ___errno_location
.text:00000000000056ED                 cmp     dword ptr [rax], 9
.text:00000000000056F0                 pop     rbx
.text:00000000000056F1                 pop     rbp
.text:00000000000056F2                 pop     r12
.text:00000000000056F4                 setnz   al
.text:00000000000056F7                 movzx   eax, al
.text:00000000000056FA                 neg     eax
.text:00000000000056FC                 retn
.text:00000000000056FC ; } // starts at 5680
.text:00000000000056FC close_stream    endp
.text:00000000000056FC
.text:00000000000056FC ; ---------------------------------------------------------------------------
.text:00000000000056FD                 align 20h
.text:0000000000005700
.text:0000000000005700 ; =============== S U B R O U T I N E =======================================
.text:0000000000005700
.text:0000000000005700
.text:0000000000005700                 public hard_locale
.text:0000000000005700 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005700 ; __unwind {
.text:0000000000005700                 sub     rsp, 8
.text:0000000000005704                 xor     esi, esi        ; locale
.text:0000000000005706                 call    _setlocale
.text:000000000000570B                 mov     rdx, rax
.text:000000000000570E                 mov     eax, 1
.text:0000000000005713                 test    rdx, rdx
.text:0000000000005716                 jz      short loc_5735
.text:0000000000005718                 lea     rdi, aC         ; "C"
.text:000000000000571F                 mov     ecx, 2
.text:0000000000005724                 mov     rsi, rdx
.text:0000000000005727                 repe cmpsb
.text:0000000000005729                 setnbe  cl
.text:000000000000572C                 sbb     cl, 0
.text:000000000000572F                 xor     eax, eax
.text:0000000000005731                 test    cl, cl
.text:0000000000005733                 jnz     short loc_5740
.text:0000000000005735
.text:0000000000005735 loc_5735:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005735                 add     rsp, 8
.text:0000000000005739                 retn
.text:0000000000005739 ; ---------------------------------------------------------------------------
.text:000000000000573A                 align 20h
.text:0000000000005740
.text:0000000000005740 loc_5740:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005740                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005747                 mov     ecx, 6
.text:000000000000574C                 mov     rsi, rdx
.text:000000000000574F                 repe cmpsb
.text:0000000000005751                 setnbe  al
.text:0000000000005754                 sbb     al, 0
.text:0000000000005756                 test    al, al
.text:0000000000005758                 setnz   al
.text:000000000000575B                 add     rsp, 8
.text:000000000000575F                 retn
.text:000000000000575F ; } // starts at 5700
.text:000000000000575F hard_locale     endp
.text:000000000000575F
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760                 public locale_charset
.text:0000000000005760 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 sub     rsp, 8
.text:0000000000005764                 mov     edi, 0Eh        ; item
.text:0000000000005769                 call    _nl_langinfo
.text:000000000000576E                 test    rax, rax
.text:0000000000005771                 jz      short loc_5790
.text:0000000000005773                 cmp     byte ptr [rax], 0
.text:0000000000005776                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000577D                 cmovz   rax, rdx
.text:0000000000005781                 add     rsp, 8
.text:0000000000005785                 retn
.text:0000000000005785 ; ---------------------------------------------------------------------------
.text:0000000000005786                 align 10h
.text:0000000000005790
.text:0000000000005790 loc_5790:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005790                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005797                 add     rsp, 8
.text:000000000000579B                 retn
.text:000000000000579B ; } // starts at 5760
.text:000000000000579B locale_charset  endp
.text:000000000000579B
.text:000000000000579B ; ---------------------------------------------------------------------------
.text:000000000000579C                 align 20h
.text:00000000000057A0
.text:00000000000057A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057A0
.text:00000000000057A0 ; Attributes: info_from_lumina
.text:00000000000057A0
.text:00000000000057A0 ; void _libc_csu_init(void)
.text:00000000000057A0                 public __libc_csu_init
.text:00000000000057A0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000057A0 ; __unwind {
.text:00000000000057A0                 push    r15
.text:00000000000057A2                 push    r14
.text:00000000000057A4                 mov     r15, rdx
.text:00000000000057A7                 push    r13
.text:00000000000057A9                 push    r12
.text:00000000000057AB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000057B2                 push    rbp
.text:00000000000057B3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000057BA                 push    rbx
.text:00000000000057BB                 mov     r13d, edi
.text:00000000000057BE                 mov     r14, rsi
.text:00000000000057C1                 sub     rbp, r12
.text:00000000000057C4                 sub     rsp, 8
.text:00000000000057C8                 sar     rbp, 3
.text:00000000000057CC                 call    _init_proc
.text:00000000000057D1                 test    rbp, rbp
.text:00000000000057D4                 jz      short loc_57F6
.text:00000000000057D6                 xor     ebx, ebx
.text:00000000000057D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000057E0                 mov     rdx, r15
.text:00000000000057E3                 mov     rsi, r14
.text:00000000000057E6                 mov     edi, r13d
.text:00000000000057E9                 call    ds:(__frame_dummy_init_array_entry - 207B70h)[r12+rbx*8]
.text:00000000000057ED                 add     rbx, 1
.text:00000000000057F1                 cmp     rbp, rbx
.text:00000000000057F4                 jnz     short loc_57E0
.text:00000000000057F6
.text:00000000000057F6 loc_57F6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000057F6                 add     rsp, 8
.text:00000000000057FA                 pop     rbx
.text:00000000000057FB                 pop     rbp
.text:00000000000057FC                 pop     r12
.text:00000000000057FE                 pop     r13
.text:0000000000005800                 pop     r14
.text:0000000000005802                 pop     r15
.text:0000000000005804                 retn
.text:0000000000005804 ; } // starts at 57A0
.text:0000000000005804 __libc_csu_init endp
.text:0000000000005804
.text:0000000000005804 ; ---------------------------------------------------------------------------
.text:0000000000005805                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810
.text:0000000000005810 ; void _libc_csu_fini(void)
.text:0000000000005810                 public __libc_csu_fini
.text:0000000000005810 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 rep retn
.text:0000000000005810 ; } // starts at 5810
.text:0000000000005810 __libc_csu_fini endp
.text:0000000000005810
.text:0000000000005810 ; ---------------------------------------------------------------------------
.text:0000000000005812                 align 20h
.text:0000000000005820
.text:0000000000005820 ; =============== S U B R O U T I N E =======================================
.text:0000000000005820
.text:0000000000005820
.text:0000000000005820 atexit          proc near               ; CODE XREF: main+62↑p
.text:0000000000005820 ; __unwind {
.text:0000000000005820                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000005827                 xor     esi, esi        ; obj
.text:0000000000005829                 jmp     ___cxa_atexit
.text:0000000000005829 ; } // starts at 5820
.text:0000000000005829 atexit          endp
.text:0000000000005829
.text:0000000000005829 _text           ends
.text:0000000000005829
LOAD:000000000000582E ; ===========================================================================
LOAD:000000000000582E
LOAD:000000000000582E ; Segment type: Pure code
LOAD:000000000000582E ; Segment permissions: Read/Execute
LOAD:000000000000582E LOAD            segment byte public 'CODE' use64
LOAD:000000000000582E                 assume cs:LOAD
LOAD:000000000000582E                 ;org 582Eh
LOAD:000000000000582E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000582E                 align 10h
LOAD:000000000000582E LOAD            ends
LOAD:000000000000582E
.fini:0000000000005830 ; ===========================================================================
.fini:0000000000005830
.fini:0000000000005830 ; Segment type: Pure code
.fini:0000000000005830 ; Segment permissions: Read/Execute
.fini:0000000000005830 _fini           segment dword public 'CODE' use64
.fini:0000000000005830                 assume cs:_fini
.fini:0000000000005830                 ;org 5830h
.fini:0000000000005830                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000005830
.fini:0000000000005830 ; =============== S U B R O U T I N E =======================================
.fini:0000000000005830
.fini:0000000000005830
.fini:0000000000005830                 public _term_proc
.fini:0000000000005830 _term_proc      proc near
.fini:0000000000005830                 sub     rsp, 8          ; _fini
.fini:0000000000005834                 add     rsp, 8
.fini:0000000000005838                 retn
.fini:0000000000005838 _term_proc      endp
.fini:0000000000005838
.fini:0000000000005838 _fini           ends
.fini:0000000000005838
LOAD:0000000000005839 ; ===========================================================================
LOAD:0000000000005839
LOAD:0000000000005839 ; Segment type: Pure code
LOAD:0000000000005839 ; Segment permissions: Read/Execute
LOAD:0000000000005839 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005839                 assume cs:LOAD
LOAD:0000000000005839                 ;org 5839h
LOAD:0000000000005839                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005839                 align 20h
LOAD:0000000000005839 LOAD            ends
LOAD:0000000000005839
.rodata:0000000000005840 ; ===========================================================================
.rodata:0000000000005840
.rodata:0000000000005840 ; Segment type: Pure data
.rodata:0000000000005840 ; Segment permissions: Read
.rodata:0000000000005840 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000005840                 assume cs:_rodata
.rodata:0000000000005840                 ;org 5840h
.rodata:0000000000005840                 public _IO_stdin_used
.rodata:0000000000005840 _IO_stdin_used  db    1
.rodata:0000000000005841                 db    0
.rodata:0000000000005842                 db    2
.rodata:0000000000005843                 db    0
.rodata:0000000000005844 aTsort          db 'tsort',0            ; DATA XREF: main+7B↑o
.rodata:0000000000005844                                         ; usage+10C↑o ...
.rodata:000000000000584A asc_584A        db '[',0                ; DATA XREF: usage+118↑o
.rodata:000000000000584C aTestInvocation db 'test invocation',0  ; DATA XREF: usage+13F↑o
.rodata:000000000000585C aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000585C                                         ; DATA XREF: usage+16F↑o
.rodata:000000000000585C                                         ; usage+26C↑o ...
.rodata:0000000000005872 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+180↑o
.rodata:000000000000587C aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+18C↑o
.rodata:000000000000588B aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+11F↑o
.rodata:0000000000005895 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+14B↑o
.rodata:000000000000589F aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+163↑o
.rodata:00000000000058A9 ; const char aSOnlineHelpS[]
.rodata:00000000000058A9 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:00000000000058A9                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000058C0 unk_58C0        db  47h ; G             ; DATA XREF: main+82↑o
.rodata:00000000000058C0                                         ; usage+1F6↑o ...
.rodata:00000000000058C1                 db  4Eh ; N
.rodata:00000000000058C2                 db  55h ; U
.rodata:00000000000058C3                 db  20h
.rodata:00000000000058C4 ; const char domainname[]
.rodata:00000000000058C4 domainname      db 'coreutils',0        ; DATA XREF: main+43↑o
.rodata:00000000000058C4                                         ; main+4F↑o ...
.rodata:00000000000058CE ; const char s2[]
.rodata:00000000000058CE s2              db 'en_',0              ; DATA XREF: usage+21D↑o
.rodata:00000000000058CE                                         ; usage+2DE↑o
.rodata:00000000000058D2 ; const char aFullDocumentat[]
.rodata:00000000000058D2 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000058D2                                         ; DATA XREF: usage:loc_2409↑o
.rodata:00000000000058D2                                         ; usage:loc_24C6↑o
.rodata:00000000000058ED ; const char dirname[]
.rodata:00000000000058ED dirname         db '/usr/local/share/locale',0
.rodata:00000000000058ED                                         ; DATA XREF: main+3C↑o
.rodata:0000000000005905 aMarkKettenis   db 'Mark Kettenis',0    ; DATA XREF: main+67↑o
.rodata:0000000000005913 ; const char aExtraOperandS[]
.rodata:0000000000005913 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+710↑o
.rodata:0000000000005924 asc_5924        db ' ',9,0Ah,0          ; DATA XREF: main+154↑o
.rodata:0000000000005924                                         ; usage+A9↑o ...
.rodata:0000000000005928 ; const char file[]
.rodata:0000000000005928 file            db '../coreutils-8.31/src/tsort.c',0
.rodata:0000000000005928                                         ; DATA XREF: main+5E3↑o
.rodata:0000000000005928                                         ; main+6B4↑o ...
.rodata:0000000000005946 ; const char aLen0[]
.rodata:0000000000005946 aLen0           db 'len != 0',0         ; DATA XREF: main+74F↑o
.rodata:000000000000594F ; const char aRoot[]
.rodata:000000000000594F aRoot           db 'root',0             ; DATA XREF: main+6F0↑o
.rodata:0000000000005954 ; const char aStreqStrSStr[]
.rodata:0000000000005954 aStreqStrSStr   db '!STREQ (str, s->str)',0
.rodata:0000000000005954                                         ; DATA XREF: main+6BB↑o
.rodata:0000000000005969 ; const char assertion[]
.rodata:0000000000005969 assertion       db '!STREQ (str, p->str)',0
.rodata:0000000000005969                                         ; DATA XREF: main+5EA↑o
.rodata:000000000000597E ; const char msgid[]
.rodata:000000000000597E msgid           db '%s: input contains a loop:',0
.rodata:000000000000597E                                         ; DATA XREF: main+4E3↑o
.rodata:0000000000005999 ; const char aStandardInput[]
.rodata:0000000000005999 aStandardInput  db 'standard input',0   ; DATA XREF: main+66E↑o
.rodata:00000000000059A8 ; const char aTrySHelpForMor[]
.rodata:00000000000059A8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000059A8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000059CF                 align 10h
.rodata:00000000000059D0 ; const char aUsageSOptionFi[]
.rodata:00000000000059D0 aUsageSOptionFi db 'Usage: %s [OPTION] [FILE]',0Ah
.rodata:00000000000059D0                                         ; DATA XREF: usage:loc_222D↑o
.rodata:00000000000059D0                 db 'Write totally ordered list consistent with the partial ordering i'
.rodata:00000000000059D0                 db 'n FILE.',0Ah,0
.rodata:0000000000005A34                 align 8
.rodata:0000000000005A38 ; const char aWithNoFileOrWh[]
.rodata:0000000000005A38 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+84↑o
.rodata:0000000000005A38                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000005A70 ; const char aHelpDisplayThi[]
.rodata:0000000000005A70 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005A70                                         ; DATA XREF: usage+CE↑o
.rodata:0000000000005A9D                 align 20h
.rodata:0000000000005AA0 ; const char aVersionOutputV[]
.rodata:0000000000005AA0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005AA0                                         ; DATA XREF: usage+F3↑o
.rodata:0000000000005AD6                 align 8
.rodata:0000000000005AD8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000005AD8                                         ; DATA XREF: usage+1EF↑o
.rodata:0000000000005AD8                                         ; usage+253↑o ...
.rodata:0000000000005B00 ; const char aReportAnyTrans[]
.rodata:0000000000005B00 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000005B00                                         ; DATA XREF: usage+347↑o
.rodata:0000000000005B00                 db 'am/>',0Ah,0
.rodata:0000000000005B47                 align 8
.rodata:0000000000005B48 ; const char aOrAvailableLoc[]
.rodata:0000000000005B48 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005B48                                         ; DATA XREF: usage:loc_244E↑o
.rodata:0000000000005B7B                 align 20h
.rodata:0000000000005B80 ; const char aSInputContains_0[]
.rodata:0000000000005B80 aSInputContains_0 db '%s: input contains an odd number of tokens',0
.rodata:0000000000005B80                                         ; DATA XREF: main+63D↑o
.rodata:0000000000005BAB                 align 10h
.rodata:0000000000005BB0 ; const char _PRETTY_FUNCTION___6928[]
.rodata:0000000000005BB0 __PRETTY_FUNCTION___6928 db 'search_item',0
.rodata:0000000000005BB0                                         ; DATA XREF: main:loc_1CCC↑o
.rodata:0000000000005BB0                                         ; main:loc_1D9D↑o ...
.rodata:0000000000005BBC ; const char _PRETTY_FUNCTION___6982[]
.rodata:0000000000005BBC __PRETTY_FUNCTION___6982 db 'tsort',0   ; DATA XREF: main:loc_1E31↑o
.rodata:0000000000005BC2 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005BC7 ; const char aWriteError[]
.rodata:0000000000005BC7 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_25A3↑o
.rodata:0000000000005BC7                                         ; main+101↑o
.rodata:0000000000005BD3 ; const char format[]
.rodata:0000000000005BD3 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000005BD3                                         ; main+616↑o ...
.rodata:0000000000005BDA ; const char aDevNull[]
.rodata:0000000000005BDA aDevNull        db '/dev/null',0        ; DATA XREF: protect_fd+4↑o
.rodata:0000000000005BE4 ; const char shortopts[]
.rodata:0000000000005BE4 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000005BE4                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000005BE6 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000005BEB aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:0000000000005BF3                 align 8
.rodata:0000000000005BF8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005BF8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005C30 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005C38 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000005C38                                         ; main+C8↑o ...
.rodata:0000000000005C3C unk_5C3C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000005C3D                 db  80h
.rodata:0000000000005C3E                 db  98h
.rodata:0000000000005C3F                 db    0
.rodata:0000000000005C40 unk_5C40        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005C41                 db  80h
.rodata:0000000000005C42                 db  99h
.rodata:0000000000005C43                 db    0
.rodata:0000000000005C44 unk_5C44        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005C45                 db    7
.rodata:0000000000005C46                 db  65h ; e
.rodata:0000000000005C47                 db    0
.rodata:0000000000005C48 unk_5C48        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005C49                 db 0AFh
.rodata:0000000000005C4A                 db    0
.rodata:0000000000005C4B unk_5C4B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2B90↑o
.rodata:0000000000005C4B                                         ; quotearg_buffer_restyled:loc_394B↑o ...
.rodata:0000000000005C4C                 db    0
.rodata:0000000000005C4D ; const char asc_5C4D[2]
.rodata:0000000000005C4D asc_5C4D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000005C4D                                         ; quotearg_buffer_restyled:loc_2D13↑o ...
.rodata:0000000000005C4F ; const char asc_5C4F[2]
.rodata:0000000000005C4F asc_5C4F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000005C4F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005C51 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005C59 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207BE8↓o
.rodata:0000000000005C5F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207BF0↓o
.rodata:0000000000005C6C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207BF8↓o
.rodata:0000000000005C6C                                         ; .data.rel.ro:0000000000207C18↓o
.rodata:0000000000005C79 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005C79                                         ; DATA XREF: .data.rel.ro:0000000000207C00↓o
.rodata:0000000000005C8D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:0000000000005C95 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:0000000000005C9D                 align 20h
.rodata:0000000000005CA0 jpt_2CF1        dd offset loc_3A9A - 5CA0h
.rodata:0000000000005CA0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005CA0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005CA0                 dd offset loc_2CF3 - 5CA0h ; jump table for switch statement
.rodata:0000000000005CA0                 dd offset loc_3CC8 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_3AD4 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_38C4 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_3920 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_3975 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_39BA - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_39F4 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_39F4 - 5CA0h
.rodata:0000000000005CA0                 dd offset loc_39F4 - 5CA0h
.rodata:0000000000005CCC jpt_2E4E        dd offset loc_3070 - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000005CCC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh ; jump table for switch statement
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset loc_30B0 - 5CCCh, offset loc_2FB8 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_2F78 - 5CCCh, offset loc_3140 - 5CCCh, offset loc_3130 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3120 - 5CCCh, offset loc_3110 - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh
.rodata:0000000000005CCC                 dd offset def_2E4E - 5CCCh, offset def_2E4E - 5CCCh, offset loc_3100 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30F0 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_30C0 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30F0 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_30F0 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_2F53 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_30F0 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30F0 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_30F0 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30F0 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_30F0 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_2F23 - 5CCCh, offset def_2E4E - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_2FC8 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30F0 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh, offset loc_3098 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_2E53 - 5CCCh, offset loc_30F0 - 5CCCh, offset loc_2E53 - 5CCCh
.rodata:0000000000005CCC                 dd offset loc_30C0 - 5CCCh
.rodata:0000000000005EC8 jpt_31DA        dd offset loc_3240 - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005EC8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h ; jump table for switch statement
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset loc_3230 - 5EC8h, offset loc_3380 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3368 - 5EC8h, offset loc_3218 - 5EC8h, offset loc_3358 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3200 - 5EC8h, offset loc_3340 - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset def_31DA - 5EC8h
.rodata:0000000000005EC8                 dd offset def_31DA - 5EC8h, offset def_31DA - 5EC8h, offset loc_3328 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3310 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_32F8 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3310 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_3310 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_2F50 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_3310 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3310 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_3310 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3310 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_3310 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_2F20 - 5EC8h, offset def_31DA - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_31E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_3310 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h, offset loc_32E0 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_2E50 - 5EC8h, offset loc_3310 - 5EC8h, offset loc_2E50 - 5EC8h
.rodata:0000000000005EC8                 dd offset loc_32F8 - 5EC8h
.rodata:00000000000060C4                 align 20h
.rodata:00000000000060E0                 public quoting_style_vals
.rodata:00000000000060E0 quoting_style_vals db    0
.rodata:00000000000060E1                 db    0
.rodata:00000000000060E2                 db    0
.rodata:00000000000060E3                 db    0
.rodata:00000000000060E4                 db    1
.rodata:00000000000060E5                 db    0
.rodata:00000000000060E6                 db    0
.rodata:00000000000060E7                 db    0
.rodata:00000000000060E8                 db    2
.rodata:00000000000060E9                 db    0
.rodata:00000000000060EA                 db    0
.rodata:00000000000060EB                 db    0
.rodata:00000000000060EC                 db    3
.rodata:00000000000060ED                 db    0
.rodata:00000000000060EE                 db    0
.rodata:00000000000060EF                 db    0
.rodata:00000000000060F0                 db    4
.rodata:00000000000060F1                 db    0
.rodata:00000000000060F2                 db    0
.rodata:00000000000060F3                 db    0
.rodata:00000000000060F4                 db    5
.rodata:00000000000060F5                 db    0
.rodata:00000000000060F6                 db    0
.rodata:00000000000060F7                 db    0
.rodata:00000000000060F8                 db    6
.rodata:00000000000060F9                 db    0
.rodata:00000000000060FA                 db    0
.rodata:00000000000060FB                 db    0
.rodata:00000000000060FC                 db    7
.rodata:00000000000060FD                 db    0
.rodata:00000000000060FE                 db    0
.rodata:00000000000060FF                 db    0
.rodata:0000000000006100                 db    8
.rodata:0000000000006101                 db    0
.rodata:0000000000006102                 db    0
.rodata:0000000000006103                 db    0
.rodata:0000000000006104                 db    9
.rodata:0000000000006105                 db    0
.rodata:0000000000006106                 db    0
.rodata:0000000000006107                 db    0
.rodata:0000000000006108 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006114 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000611B ; const char aC_0[]
.rodata:000000000000611B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4C5C↑o
.rodata:000000000000611F ; const char aWrittenByS[]
.rodata:000000000000611F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000611F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000612F ; const char aWrittenBySAndS[]
.rodata:000000000000612F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000612F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006146 ; const char aWrittenBySSAnd[]
.rodata:0000000000006146 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006146                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006162 ; const char aReportBugsToS[]
.rodata:0000000000006162 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006162                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006177 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006177                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000618D ; const char aSHomePageS[]
.rodata:000000000000618D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000618D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000061A1                 align 8
.rodata:00000000000061A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000061A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000061A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000061A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000061A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000061A8                 db '.',0Ah
.rodata:00000000000061A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000061A8                 db 0Ah,0
.rodata:0000000000006274                 align 8
.rodata:0000000000006278 ; const char aWrittenBySSSAn[]
.rodata:0000000000006278 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006278                                         ; DATA XREF: version_etc_arn:loc_4EB0↑o
.rodata:0000000000006278                 db 'and %s.',0Ah,0
.rodata:0000000000006298 ; const char aWrittenBySSSSA[]
.rodata:0000000000006298 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006298                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000006298                 db '%s, and %s.',0Ah,0
.rodata:00000000000062BC                 align 20h
.rodata:00000000000062C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000062C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000062C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000062E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000062E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000062E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000062E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000006314                 align 8
.rodata:0000000000006318 ; const char aWrittenBySSSSS[]
.rodata:0000000000006318 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006318                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000006318                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006318                 db 'and %s.',0Ah,0
.rodata:0000000000006348 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000006348 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006348                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000006348                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006348                 db '%s, and %s.',0Ah,0
.rodata:000000000000637C                 align 20h
.rodata:0000000000006380 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000006380                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000006380                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000006380                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000063BC                 align 20h
.rodata:00000000000063C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000063C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000063C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000063C0                 db 0
.rodata:0000000000006401                 align 8
.rodata:0000000000006408 jpt_4CC4        dd offset loc_4D46 - 6408h
.rodata:0000000000006408                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000006408                                         ; version_etc_arn+9D↑r
.rodata:0000000000006408                 dd offset loc_4DD8 - 6408h ; jump table for switch statement
.rodata:0000000000006408                 dd offset loc_4E18 - 6408h
.rodata:0000000000006408                 dd offset loc_4E60 - 6408h
.rodata:0000000000006408                 dd offset loc_4EB0 - 6408h
.rodata:0000000000006408                 dd offset loc_4F08 - 6408h
.rodata:0000000000006408                 dd offset loc_4F38 - 6408h
.rodata:0000000000006408                 dd offset loc_4FA0 - 6408h
.rodata:0000000000006408                 dd offset loc_4CD0 - 6408h
.rodata:0000000000006408                 dd offset loc_4D80 - 6408h
.rodata:0000000000006430                 align 20h
.rodata:0000000000006440                 public version_etc_copyright
.rodata:0000000000006440 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000006440                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000646F ; const char aMemoryExhauste[]
.rodata:000000000000646F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000006480 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000006482 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5740↑o
.rodata:0000000000006488 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000006488                                         ; locale_charset:loc_5790↑o
.rodata:0000000000006488 _rodata         ends
.rodata:0000000000006488
LOAD:000000000000648E ; ===========================================================================
LOAD:000000000000648E
LOAD:000000000000648E ; Segment type: Pure code
LOAD:000000000000648E ; Segment permissions: Read/Execute
LOAD:000000000000648E LOAD            segment byte public 'CODE' use64
LOAD:000000000000648E                 assume cs:LOAD
LOAD:000000000000648E                 ;org 648Eh
LOAD:000000000000648E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000648E                 align 10h
LOAD:000000000000648E LOAD            ends
LOAD:000000000000648E
.eh_frame_hdr:0000000000006490 ; ===========================================================================
.eh_frame_hdr:0000000000006490
.eh_frame_hdr:0000000000006490 ; Segment type: Pure data
.eh_frame_hdr:0000000000006490 ; Segment permissions: Read
.eh_frame_hdr:0000000000006490 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000006490                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000006490                 ;org 6490h
.eh_frame_hdr:0000000000006490 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000006491                 db  1Bh
.eh_frame_hdr:0000000000006492                 db    3
.eh_frame_hdr:0000000000006493                 db  3Bh ; ;
.eh_frame_hdr:0000000000006494                 db 0ACh
.eh_frame_hdr:0000000000006495                 db    2
.eh_frame_hdr:0000000000006496                 db    0
.eh_frame_hdr:0000000000006497                 db    0
.eh_frame_hdr:0000000000006498                 db  54h ; T
.eh_frame_hdr:0000000000006499                 db    0
.eh_frame_hdr:000000000000649A                 db    0
.eh_frame_hdr:000000000000649B                 db    0
.eh_frame_hdr:000000000000649C                 db  40h ; @
.eh_frame_hdr:000000000000649D                 db 0AFh
.eh_frame_hdr:000000000000649E                 db 0FFh
.eh_frame_hdr:000000000000649F                 db 0FFh
.eh_frame_hdr:00000000000064A0                 db 0F8h
.eh_frame_hdr:00000000000064A1                 db    2
.eh_frame_hdr:00000000000064A2                 db    0
.eh_frame_hdr:00000000000064A3                 db    0
.eh_frame_hdr:00000000000064A4                 db  50h ; P
.eh_frame_hdr:00000000000064A5                 db 0B2h
.eh_frame_hdr:00000000000064A6                 db 0FFh
.eh_frame_hdr:00000000000064A7                 db 0FFh
.eh_frame_hdr:00000000000064A8                 db  20h
.eh_frame_hdr:00000000000064A9                 db    3
.eh_frame_hdr:00000000000064AA                 db    0
.eh_frame_hdr:00000000000064AB                 db    0
.eh_frame_hdr:00000000000064AC                 db  60h ; `
.eh_frame_hdr:00000000000064AD                 db 0B2h
.eh_frame_hdr:00000000000064AE                 db 0FFh
.eh_frame_hdr:00000000000064AF                 db 0FFh
.eh_frame_hdr:00000000000064B0                 db  60h ; `
.eh_frame_hdr:00000000000064B1                 db    4
.eh_frame_hdr:00000000000064B2                 db    0
.eh_frame_hdr:00000000000064B3                 db    0
.eh_frame_hdr:00000000000064B4                 db 0C0h
.eh_frame_hdr:00000000000064B5                 db 0B9h
.eh_frame_hdr:00000000000064B6                 db 0FFh
.eh_frame_hdr:00000000000064B7                 db 0FFh
.eh_frame_hdr:00000000000064B8                 db 0C8h
.eh_frame_hdr:00000000000064B9                 db    2
.eh_frame_hdr:00000000000064BA                 db    0
.eh_frame_hdr:00000000000064BB                 db    0
.eh_frame_hdr:00000000000064BC                 db 0D0h
.eh_frame_hdr:00000000000064BD                 db 0BAh
.eh_frame_hdr:00000000000064BE                 db 0FFh
.eh_frame_hdr:00000000000064BF                 db 0FFh
.eh_frame_hdr:00000000000064C0                 db  38h ; 8
.eh_frame_hdr:00000000000064C1                 db    3
.eh_frame_hdr:00000000000064C2                 db    0
.eh_frame_hdr:00000000000064C3                 db    0
.eh_frame_hdr:00000000000064C4                 db 0E0h
.eh_frame_hdr:00000000000064C5                 db 0BAh
.eh_frame_hdr:00000000000064C6                 db 0FFh
.eh_frame_hdr:00000000000064C7                 db 0FFh
.eh_frame_hdr:00000000000064C8                 db  4Ch ; L
.eh_frame_hdr:00000000000064C9                 db    3
.eh_frame_hdr:00000000000064CA                 db    0
.eh_frame_hdr:00000000000064CB                 db    0
.eh_frame_hdr:00000000000064CC                 db  50h ; P
.eh_frame_hdr:00000000000064CD                 db 0BBh
.eh_frame_hdr:00000000000064CE                 db 0FFh
.eh_frame_hdr:00000000000064CF                 db 0FFh
.eh_frame_hdr:00000000000064D0                 db  8Ch
.eh_frame_hdr:00000000000064D1                 db    3
.eh_frame_hdr:00000000000064D2                 db    0
.eh_frame_hdr:00000000000064D3                 db    0
.eh_frame_hdr:00000000000064D4                 db 0C0h
.eh_frame_hdr:00000000000064D5                 db 0BBh
.eh_frame_hdr:00000000000064D6                 db 0FFh
.eh_frame_hdr:00000000000064D7                 db 0FFh
.eh_frame_hdr:00000000000064D8                 db 0B4h
.eh_frame_hdr:00000000000064D9                 db    3
.eh_frame_hdr:00000000000064DA                 db    0
.eh_frame_hdr:00000000000064DB                 db    0
.eh_frame_hdr:00000000000064DC                 db    0
.eh_frame_hdr:00000000000064DD                 db 0BCh
.eh_frame_hdr:00000000000064DE                 db 0FFh
.eh_frame_hdr:00000000000064DF                 db 0FFh
.eh_frame_hdr:00000000000064E0                 db 0C8h
.eh_frame_hdr:00000000000064E1                 db    3
.eh_frame_hdr:00000000000064E2                 db    0
.eh_frame_hdr:00000000000064E3                 db    0
.eh_frame_hdr:00000000000064E4                 db  40h ; @
.eh_frame_hdr:00000000000064E5                 db 0BDh
.eh_frame_hdr:00000000000064E6                 db 0FFh
.eh_frame_hdr:00000000000064E7                 db 0FFh
.eh_frame_hdr:00000000000064E8                 db  34h ; 4
.eh_frame_hdr:00000000000064E9                 db    4
.eh_frame_hdr:00000000000064EA                 db    0
.eh_frame_hdr:00000000000064EB                 db    0
.eh_frame_hdr:00000000000064EC                 db 0B0h
.eh_frame_hdr:00000000000064ED                 db 0C0h
.eh_frame_hdr:00000000000064EE                 db 0FFh
.eh_frame_hdr:00000000000064EF                 db 0FFh
.eh_frame_hdr:00000000000064F0                 db 0C8h
.eh_frame_hdr:00000000000064F1                 db    4
.eh_frame_hdr:00000000000064F2                 db    0
.eh_frame_hdr:00000000000064F3                 db    0
.eh_frame_hdr:00000000000064F4                 db 0C0h
.eh_frame_hdr:00000000000064F5                 db 0C0h
.eh_frame_hdr:00000000000064F6                 db 0FFh
.eh_frame_hdr:00000000000064F7                 db 0FFh
.eh_frame_hdr:00000000000064F8                 db 0DCh
.eh_frame_hdr:00000000000064F9                 db    4
.eh_frame_hdr:00000000000064FA                 db    0
.eh_frame_hdr:00000000000064FB                 db    0
.eh_frame_hdr:00000000000064FC                 db 0D0h
.eh_frame_hdr:00000000000064FD                 db 0C0h
.eh_frame_hdr:00000000000064FE                 db 0FFh
.eh_frame_hdr:00000000000064FF                 db 0FFh
.eh_frame_hdr:0000000000006500                 db 0F0h
.eh_frame_hdr:0000000000006501                 db    4
.eh_frame_hdr:0000000000006502                 db    0
.eh_frame_hdr:0000000000006503                 db    0
.eh_frame_hdr:0000000000006504                 db  80h
.eh_frame_hdr:0000000000006505                 db 0C1h
.eh_frame_hdr:0000000000006506                 db 0FFh
.eh_frame_hdr:0000000000006507                 db 0FFh
.eh_frame_hdr:0000000000006508                 db  20h
.eh_frame_hdr:0000000000006509                 db    5
.eh_frame_hdr:000000000000650A                 db    0
.eh_frame_hdr:000000000000650B                 db    0
.eh_frame_hdr:000000000000650C                 db  90h
.eh_frame_hdr:000000000000650D                 db 0C1h
.eh_frame_hdr:000000000000650E                 db 0FFh
.eh_frame_hdr:000000000000650F                 db 0FFh
.eh_frame_hdr:0000000000006510                 db  34h ; 4
.eh_frame_hdr:0000000000006511                 db    5
.eh_frame_hdr:0000000000006512                 db    0
.eh_frame_hdr:0000000000006513                 db    0
.eh_frame_hdr:0000000000006514                 db 0C0h
.eh_frame_hdr:0000000000006515                 db 0C1h
.eh_frame_hdr:0000000000006516                 db 0FFh
.eh_frame_hdr:0000000000006517                 db 0FFh
.eh_frame_hdr:0000000000006518                 db  50h ; P
.eh_frame_hdr:0000000000006519                 db    5
.eh_frame_hdr:000000000000651A                 db    0
.eh_frame_hdr:000000000000651B                 db    0
.eh_frame_hdr:000000000000651C                 db  10h
.eh_frame_hdr:000000000000651D                 db 0C2h
.eh_frame_hdr:000000000000651E                 db 0FFh
.eh_frame_hdr:000000000000651F                 db 0FFh
.eh_frame_hdr:0000000000006520                 db  78h ; x
.eh_frame_hdr:0000000000006521                 db    5
.eh_frame_hdr:0000000000006522                 db    0
.eh_frame_hdr:0000000000006523                 db    0
.eh_frame_hdr:0000000000006524                 db 0C0h
.eh_frame_hdr:0000000000006525                 db 0C3h
.eh_frame_hdr:0000000000006526                 db 0FFh
.eh_frame_hdr:0000000000006527                 db 0FFh
.eh_frame_hdr:0000000000006528                 db 0C8h
.eh_frame_hdr:0000000000006529                 db    5
.eh_frame_hdr:000000000000652A                 db    0
.eh_frame_hdr:000000000000652B                 db    0
.eh_frame_hdr:000000000000652C                 db    0
.eh_frame_hdr:000000000000652D                 db 0C5h
.eh_frame_hdr:000000000000652E                 db 0FFh
.eh_frame_hdr:000000000000652F                 db 0FFh
.eh_frame_hdr:0000000000006530                 db    4
.eh_frame_hdr:0000000000006531                 db    6
.eh_frame_hdr:0000000000006532                 db    0
.eh_frame_hdr:0000000000006533                 db    0
.eh_frame_hdr:0000000000006534                 db  40h ; @
.eh_frame_hdr:0000000000006535                 db 0C6h
.eh_frame_hdr:0000000000006536                 db 0FFh
.eh_frame_hdr:0000000000006537                 db 0FFh
.eh_frame_hdr:0000000000006538                 db  50h ; P
.eh_frame_hdr:0000000000006539                 db    6
.eh_frame_hdr:000000000000653A                 db    0
.eh_frame_hdr:000000000000653B                 db    0
.eh_frame_hdr:000000000000653C                 db 0E0h
.eh_frame_hdr:000000000000653D                 db 0C6h
.eh_frame_hdr:000000000000653E                 db 0FFh
.eh_frame_hdr:000000000000653F                 db 0FFh
.eh_frame_hdr:0000000000006540                 db  70h ; p
.eh_frame_hdr:0000000000006541                 db    6
.eh_frame_hdr:0000000000006542                 db    0
.eh_frame_hdr:0000000000006543                 db    0
.eh_frame_hdr:0000000000006544                 db 0D0h
.eh_frame_hdr:0000000000006545                 db 0C7h
.eh_frame_hdr:0000000000006546                 db 0FFh
.eh_frame_hdr:0000000000006547                 db 0FFh
.eh_frame_hdr:0000000000006548                 db 0B4h
.eh_frame_hdr:0000000000006549                 db    6
.eh_frame_hdr:000000000000654A                 db    0
.eh_frame_hdr:000000000000654B                 db    0
.eh_frame_hdr:000000000000654C                 db  10h
.eh_frame_hdr:000000000000654D                 db 0DAh
.eh_frame_hdr:000000000000654E                 db 0FFh
.eh_frame_hdr:000000000000654F                 db 0FFh
.eh_frame_hdr:0000000000006550                 db  2Ch ; ,
.eh_frame_hdr:0000000000006551                 db    7
.eh_frame_hdr:0000000000006552                 db    0
.eh_frame_hdr:0000000000006553                 db    0
.eh_frame_hdr:0000000000006554                 db 0C0h
.eh_frame_hdr:0000000000006555                 db 0DBh
.eh_frame_hdr:0000000000006556                 db 0FFh
.eh_frame_hdr:0000000000006557                 db 0FFh
.eh_frame_hdr:0000000000006558                 db  98h
.eh_frame_hdr:0000000000006559                 db    7
.eh_frame_hdr:000000000000655A                 db    0
.eh_frame_hdr:000000000000655B                 db    0
.eh_frame_hdr:000000000000655C                 db    0
.eh_frame_hdr:000000000000655D                 db 0DCh
.eh_frame_hdr:000000000000655E                 db 0FFh
.eh_frame_hdr:000000000000655F                 db 0FFh
.eh_frame_hdr:0000000000006560                 db 0C4h
.eh_frame_hdr:0000000000006561                 db    7
.eh_frame_hdr:0000000000006562                 db    0
.eh_frame_hdr:0000000000006563                 db    0
.eh_frame_hdr:0000000000006564                 db  20h
.eh_frame_hdr:0000000000006565                 db 0DCh
.eh_frame_hdr:0000000000006566                 db 0FFh
.eh_frame_hdr:0000000000006567                 db 0FFh
.eh_frame_hdr:0000000000006568                 db 0D8h
.eh_frame_hdr:0000000000006569                 db    7
.eh_frame_hdr:000000000000656A                 db    0
.eh_frame_hdr:000000000000656B                 db    0
.eh_frame_hdr:000000000000656C                 db  40h ; @
.eh_frame_hdr:000000000000656D                 db 0DCh
.eh_frame_hdr:000000000000656E                 db 0FFh
.eh_frame_hdr:000000000000656F                 db 0FFh
.eh_frame_hdr:0000000000006570                 db 0ECh
.eh_frame_hdr:0000000000006571                 db    7
.eh_frame_hdr:0000000000006572                 db    0
.eh_frame_hdr:0000000000006573                 db    0
.eh_frame_hdr:0000000000006574                 db  80h
.eh_frame_hdr:0000000000006575                 db 0DCh
.eh_frame_hdr:0000000000006576                 db 0FFh
.eh_frame_hdr:0000000000006577                 db 0FFh
.eh_frame_hdr:0000000000006578                 db    0
.eh_frame_hdr:0000000000006579                 db    8
.eh_frame_hdr:000000000000657A                 db    0
.eh_frame_hdr:000000000000657B                 db    0
.eh_frame_hdr:000000000000657C                 db 0A0h
.eh_frame_hdr:000000000000657D                 db 0DCh
.eh_frame_hdr:000000000000657E                 db 0FFh
.eh_frame_hdr:000000000000657F                 db 0FFh
.eh_frame_hdr:0000000000006580                 db  14h
.eh_frame_hdr:0000000000006581                 db    8
.eh_frame_hdr:0000000000006582                 db    0
.eh_frame_hdr:0000000000006583                 db    0
.eh_frame_hdr:0000000000006584                 db 0D0h
.eh_frame_hdr:0000000000006585                 db 0DCh
.eh_frame_hdr:0000000000006586                 db 0FFh
.eh_frame_hdr:0000000000006587                 db 0FFh
.eh_frame_hdr:0000000000006588                 db  28h ; (
.eh_frame_hdr:0000000000006589                 db    8
.eh_frame_hdr:000000000000658A                 db    0
.eh_frame_hdr:000000000000658B                 db    0
.eh_frame_hdr:000000000000658C                 db  50h ; P
.eh_frame_hdr:000000000000658D                 db 0DDh
.eh_frame_hdr:000000000000658E                 db 0FFh
.eh_frame_hdr:000000000000658F                 db 0FFh
.eh_frame_hdr:0000000000006590                 db  7Ch ; |
.eh_frame_hdr:0000000000006591                 db    8
.eh_frame_hdr:0000000000006592                 db    0
.eh_frame_hdr:0000000000006593                 db    0
.eh_frame_hdr:0000000000006594                 db  40h ; @
.eh_frame_hdr:0000000000006595                 db 0DEh
.eh_frame_hdr:0000000000006596                 db 0FFh
.eh_frame_hdr:0000000000006597                 db 0FFh
.eh_frame_hdr:0000000000006598                 db 0E8h
.eh_frame_hdr:0000000000006599                 db    8
.eh_frame_hdr:000000000000659A                 db    0
.eh_frame_hdr:000000000000659B                 db    0
.eh_frame_hdr:000000000000659C                 db  50h ; P
.eh_frame_hdr:000000000000659D                 db 0DEh
.eh_frame_hdr:000000000000659E                 db 0FFh
.eh_frame_hdr:000000000000659F                 db 0FFh
.eh_frame_hdr:00000000000065A0                 db 0FCh
.eh_frame_hdr:00000000000065A1                 db    8
.eh_frame_hdr:00000000000065A2                 db    0
.eh_frame_hdr:00000000000065A3                 db    0
.eh_frame_hdr:00000000000065A4                 db 0F0h
.eh_frame_hdr:00000000000065A5                 db 0DEh
.eh_frame_hdr:00000000000065A6                 db 0FFh
.eh_frame_hdr:00000000000065A7                 db 0FFh
.eh_frame_hdr:00000000000065A8                 db  28h ; (
.eh_frame_hdr:00000000000065A9                 db    9
.eh_frame_hdr:00000000000065AA                 db    0
.eh_frame_hdr:00000000000065AB                 db    0
.eh_frame_hdr:00000000000065AC                 db  10h
.eh_frame_hdr:00000000000065AD                 db 0DFh
.eh_frame_hdr:00000000000065AE                 db 0FFh
.eh_frame_hdr:00000000000065AF                 db 0FFh
.eh_frame_hdr:00000000000065B0                 db  3Ch ; <
.eh_frame_hdr:00000000000065B1                 db    9
.eh_frame_hdr:00000000000065B2                 db    0
.eh_frame_hdr:00000000000065B3                 db    0
.eh_frame_hdr:00000000000065B4                 db  20h
.eh_frame_hdr:00000000000065B5                 db 0DFh
.eh_frame_hdr:00000000000065B6                 db 0FFh
.eh_frame_hdr:00000000000065B7                 db 0FFh
.eh_frame_hdr:00000000000065B8                 db  50h ; P
.eh_frame_hdr:00000000000065B9                 db    9
.eh_frame_hdr:00000000000065BA                 db    0
.eh_frame_hdr:00000000000065BB                 db    0
.eh_frame_hdr:00000000000065BC                 db  40h ; @
.eh_frame_hdr:00000000000065BD                 db 0DFh
.eh_frame_hdr:00000000000065BE                 db 0FFh
.eh_frame_hdr:00000000000065BF                 db 0FFh
.eh_frame_hdr:00000000000065C0                 db  64h ; d
.eh_frame_hdr:00000000000065C1                 db    9
.eh_frame_hdr:00000000000065C2                 db    0
.eh_frame_hdr:00000000000065C3                 db    0
.eh_frame_hdr:00000000000065C4                 db  60h ; `
.eh_frame_hdr:00000000000065C5                 db 0DFh
.eh_frame_hdr:00000000000065C6                 db 0FFh
.eh_frame_hdr:00000000000065C7                 db 0FFh
.eh_frame_hdr:00000000000065C8                 db  78h ; x
.eh_frame_hdr:00000000000065C9                 db    9
.eh_frame_hdr:00000000000065CA                 db    0
.eh_frame_hdr:00000000000065CB                 db    0
.eh_frame_hdr:00000000000065CC                 db 0F0h
.eh_frame_hdr:00000000000065CD                 db 0DFh
.eh_frame_hdr:00000000000065CE                 db 0FFh
.eh_frame_hdr:00000000000065CF                 db 0FFh
.eh_frame_hdr:00000000000065D0                 db  94h
.eh_frame_hdr:00000000000065D1                 db    9
.eh_frame_hdr:00000000000065D2                 db    0
.eh_frame_hdr:00000000000065D3                 db    0
.eh_frame_hdr:00000000000065D4                 db  80h
.eh_frame_hdr:00000000000065D5                 db 0E0h
.eh_frame_hdr:00000000000065D6                 db 0FFh
.eh_frame_hdr:00000000000065D7                 db 0FFh
.eh_frame_hdr:00000000000065D8                 db 0B0h
.eh_frame_hdr:00000000000065D9                 db    9
.eh_frame_hdr:00000000000065DA                 db    0
.eh_frame_hdr:00000000000065DB                 db    0
.eh_frame_hdr:00000000000065DC                 db  90h
.eh_frame_hdr:00000000000065DD                 db 0E0h
.eh_frame_hdr:00000000000065DE                 db 0FFh
.eh_frame_hdr:00000000000065DF                 db 0FFh
.eh_frame_hdr:00000000000065E0                 db 0C4h
.eh_frame_hdr:00000000000065E1                 db    9
.eh_frame_hdr:00000000000065E2                 db    0
.eh_frame_hdr:00000000000065E3                 db    0
.eh_frame_hdr:00000000000065E4                 db 0A0h
.eh_frame_hdr:00000000000065E5                 db 0E0h
.eh_frame_hdr:00000000000065E6                 db 0FFh
.eh_frame_hdr:00000000000065E7                 db 0FFh
.eh_frame_hdr:00000000000065E8                 db 0D8h
.eh_frame_hdr:00000000000065E9                 db    9
.eh_frame_hdr:00000000000065EA                 db    0
.eh_frame_hdr:00000000000065EB                 db    0
.eh_frame_hdr:00000000000065EC                 db  40h ; @
.eh_frame_hdr:00000000000065ED                 db 0E1h
.eh_frame_hdr:00000000000065EE                 db 0FFh
.eh_frame_hdr:00000000000065EF                 db 0FFh
.eh_frame_hdr:00000000000065F0                 db 0F4h
.eh_frame_hdr:00000000000065F1                 db    9
.eh_frame_hdr:00000000000065F2                 db    0
.eh_frame_hdr:00000000000065F3                 db    0
.eh_frame_hdr:00000000000065F4                 db  50h ; P
.eh_frame_hdr:00000000000065F5                 db 0E1h
.eh_frame_hdr:00000000000065F6                 db 0FFh
.eh_frame_hdr:00000000000065F7                 db 0FFh
.eh_frame_hdr:00000000000065F8                 db    8
.eh_frame_hdr:00000000000065F9                 db  0Ah
.eh_frame_hdr:00000000000065FA                 db    0
.eh_frame_hdr:00000000000065FB                 db    0
.eh_frame_hdr:00000000000065FC                 db  70h ; p
.eh_frame_hdr:00000000000065FD                 db 0E1h
.eh_frame_hdr:00000000000065FE                 db 0FFh
.eh_frame_hdr:00000000000065FF                 db 0FFh
.eh_frame_hdr:0000000000006600                 db  1Ch
.eh_frame_hdr:0000000000006601                 db  0Ah
.eh_frame_hdr:0000000000006602                 db    0
.eh_frame_hdr:0000000000006603                 db    0
.eh_frame_hdr:0000000000006604                 db  80h
.eh_frame_hdr:0000000000006605                 db 0E1h
.eh_frame_hdr:0000000000006606                 db 0FFh
.eh_frame_hdr:0000000000006607                 db 0FFh
.eh_frame_hdr:0000000000006608                 db  30h ; 0
.eh_frame_hdr:0000000000006609                 db  0Ah
.eh_frame_hdr:000000000000660A                 db    0
.eh_frame_hdr:000000000000660B                 db    0
.eh_frame_hdr:000000000000660C                 db  10h
.eh_frame_hdr:000000000000660D                 db 0E2h
.eh_frame_hdr:000000000000660E                 db 0FFh
.eh_frame_hdr:000000000000660F                 db 0FFh
.eh_frame_hdr:0000000000006610                 db  4Ch ; L
.eh_frame_hdr:0000000000006611                 db  0Ah
.eh_frame_hdr:0000000000006612                 db    0
.eh_frame_hdr:0000000000006613                 db    0
.eh_frame_hdr:0000000000006614                 db 0B0h
.eh_frame_hdr:0000000000006615                 db 0E2h
.eh_frame_hdr:0000000000006616                 db 0FFh
.eh_frame_hdr:0000000000006617                 db 0FFh
.eh_frame_hdr:0000000000006618                 db  68h ; h
.eh_frame_hdr:0000000000006619                 db  0Ah
.eh_frame_hdr:000000000000661A                 db    0
.eh_frame_hdr:000000000000661B                 db    0
.eh_frame_hdr:000000000000661C                 db 0C0h
.eh_frame_hdr:000000000000661D                 db 0E2h
.eh_frame_hdr:000000000000661E                 db 0FFh
.eh_frame_hdr:000000000000661F                 db 0FFh
.eh_frame_hdr:0000000000006620                 db  7Ch ; |
.eh_frame_hdr:0000000000006621                 db  0Ah
.eh_frame_hdr:0000000000006622                 db    0
.eh_frame_hdr:0000000000006623                 db    0
.eh_frame_hdr:0000000000006624                 db 0E0h
.eh_frame_hdr:0000000000006625                 db 0E2h
.eh_frame_hdr:0000000000006626                 db 0FFh
.eh_frame_hdr:0000000000006627                 db 0FFh
.eh_frame_hdr:0000000000006628                 db  90h
.eh_frame_hdr:0000000000006629                 db  0Ah
.eh_frame_hdr:000000000000662A                 db    0
.eh_frame_hdr:000000000000662B                 db    0
.eh_frame_hdr:000000000000662C                 db    0
.eh_frame_hdr:000000000000662D                 db 0E3h
.eh_frame_hdr:000000000000662E                 db 0FFh
.eh_frame_hdr:000000000000662F                 db 0FFh
.eh_frame_hdr:0000000000006630                 db 0A4h
.eh_frame_hdr:0000000000006631                 db  0Ah
.eh_frame_hdr:0000000000006632                 db    0
.eh_frame_hdr:0000000000006633                 db    0
.eh_frame_hdr:0000000000006634                 db  10h
.eh_frame_hdr:0000000000006635                 db 0E3h
.eh_frame_hdr:0000000000006636                 db 0FFh
.eh_frame_hdr:0000000000006637                 db 0FFh
.eh_frame_hdr:0000000000006638                 db 0B8h
.eh_frame_hdr:0000000000006639                 db  0Ah
.eh_frame_hdr:000000000000663A                 db    0
.eh_frame_hdr:000000000000663B                 db    0
.eh_frame_hdr:000000000000663C                 db  30h ; 0
.eh_frame_hdr:000000000000663D                 db 0E3h
.eh_frame_hdr:000000000000663E                 db 0FFh
.eh_frame_hdr:000000000000663F                 db 0FFh
.eh_frame_hdr:0000000000006640                 db 0CCh
.eh_frame_hdr:0000000000006641                 db  0Ah
.eh_frame_hdr:0000000000006642                 db    0
.eh_frame_hdr:0000000000006643                 db    0
.eh_frame_hdr:0000000000006644                 db  50h ; P
.eh_frame_hdr:0000000000006645                 db 0E3h
.eh_frame_hdr:0000000000006646                 db 0FFh
.eh_frame_hdr:0000000000006647                 db 0FFh
.eh_frame_hdr:0000000000006648                 db 0E0h
.eh_frame_hdr:0000000000006649                 db  0Ah
.eh_frame_hdr:000000000000664A                 db    0
.eh_frame_hdr:000000000000664B                 db    0
.eh_frame_hdr:000000000000664C                 db  70h ; p
.eh_frame_hdr:000000000000664D                 db 0E3h
.eh_frame_hdr:000000000000664E                 db 0FFh
.eh_frame_hdr:000000000000664F                 db 0FFh
.eh_frame_hdr:0000000000006650                 db 0F8h
.eh_frame_hdr:0000000000006651                 db  0Ah
.eh_frame_hdr:0000000000006652                 db    0
.eh_frame_hdr:0000000000006653                 db    0
.eh_frame_hdr:0000000000006654                 db  80h
.eh_frame_hdr:0000000000006655                 db 0E3h
.eh_frame_hdr:0000000000006656                 db 0FFh
.eh_frame_hdr:0000000000006657                 db 0FFh
.eh_frame_hdr:0000000000006658                 db  0Ch
.eh_frame_hdr:0000000000006659                 db  0Bh
.eh_frame_hdr:000000000000665A                 db    0
.eh_frame_hdr:000000000000665B                 db    0
.eh_frame_hdr:000000000000665C                 db  50h ; P
.eh_frame_hdr:000000000000665D                 db 0E5h
.eh_frame_hdr:000000000000665E                 db 0FFh
.eh_frame_hdr:000000000000665F                 db 0FFh
.eh_frame_hdr:0000000000006660                 db  58h ; X
.eh_frame_hdr:0000000000006661                 db  0Bh
.eh_frame_hdr:0000000000006662                 db    0
.eh_frame_hdr:0000000000006663                 db    0
.eh_frame_hdr:0000000000006664                 db  90h
.eh_frame_hdr:0000000000006665                 db 0E7h
.eh_frame_hdr:0000000000006666                 db 0FFh
.eh_frame_hdr:0000000000006667                 db 0FFh
.eh_frame_hdr:0000000000006668                 db 0A8h
.eh_frame_hdr:0000000000006669                 db  0Bh
.eh_frame_hdr:000000000000666A                 db    0
.eh_frame_hdr:000000000000666B                 db    0
.eh_frame_hdr:000000000000666C                 db 0B0h
.eh_frame_hdr:000000000000666D                 db 0EBh
.eh_frame_hdr:000000000000666E                 db 0FFh
.eh_frame_hdr:000000000000666F                 db 0FFh
.eh_frame_hdr:0000000000006670                 db 0BCh
.eh_frame_hdr:0000000000006671                 db  0Ch
.eh_frame_hdr:0000000000006672                 db    0
.eh_frame_hdr:0000000000006673                 db    0
.eh_frame_hdr:0000000000006674                 db 0D0h
.eh_frame_hdr:0000000000006675                 db 0EBh
.eh_frame_hdr:0000000000006676                 db 0FFh
.eh_frame_hdr:0000000000006677                 db 0FFh
.eh_frame_hdr:0000000000006678                 db 0D0h
.eh_frame_hdr:0000000000006679                 db  0Ch
.eh_frame_hdr:000000000000667A                 db    0
.eh_frame_hdr:000000000000667B                 db    0
.eh_frame_hdr:000000000000667C                 db  50h ; P
.eh_frame_hdr:000000000000667D                 db 0ECh
.eh_frame_hdr:000000000000667E                 db 0FFh
.eh_frame_hdr:000000000000667F                 db 0FFh
.eh_frame_hdr:0000000000006680                 db 0ECh
.eh_frame_hdr:0000000000006681                 db  0Ch
.eh_frame_hdr:0000000000006682                 db    0
.eh_frame_hdr:0000000000006683                 db    0
.eh_frame_hdr:0000000000006684                 db  30h ; 0
.eh_frame_hdr:0000000000006685                 db 0EDh
.eh_frame_hdr:0000000000006686                 db 0FFh
.eh_frame_hdr:0000000000006687                 db 0FFh
.eh_frame_hdr:0000000000006688                 db  18h
.eh_frame_hdr:0000000000006689                 db  0Dh
.eh_frame_hdr:000000000000668A                 db    0
.eh_frame_hdr:000000000000668B                 db    0
.eh_frame_hdr:000000000000668C                 db 0B0h
.eh_frame_hdr:000000000000668D                 db 0EDh
.eh_frame_hdr:000000000000668E                 db 0FFh
.eh_frame_hdr:000000000000668F                 db 0FFh
.eh_frame_hdr:0000000000006690                 db  38h ; 8
.eh_frame_hdr:0000000000006691                 db  0Dh
.eh_frame_hdr:0000000000006692                 db    0
.eh_frame_hdr:0000000000006693                 db    0
.eh_frame_hdr:0000000000006694                 db 0D0h
.eh_frame_hdr:0000000000006695                 db 0EDh
.eh_frame_hdr:0000000000006696                 db 0FFh
.eh_frame_hdr:0000000000006697                 db 0FFh
.eh_frame_hdr:0000000000006698                 db  54h ; T
.eh_frame_hdr:0000000000006699                 db  0Dh
.eh_frame_hdr:000000000000669A                 db    0
.eh_frame_hdr:000000000000669B                 db    0
.eh_frame_hdr:000000000000669C                 db    0
.eh_frame_hdr:000000000000669D                 db 0EEh
.eh_frame_hdr:000000000000669E                 db 0FFh
.eh_frame_hdr:000000000000669F                 db 0FFh
.eh_frame_hdr:00000000000066A0                 db  68h ; h
.eh_frame_hdr:00000000000066A1                 db  0Dh
.eh_frame_hdr:00000000000066A2                 db    0
.eh_frame_hdr:00000000000066A3                 db    0
.eh_frame_hdr:00000000000066A4                 db  10h
.eh_frame_hdr:00000000000066A5                 db 0EEh
.eh_frame_hdr:00000000000066A6                 db 0FFh
.eh_frame_hdr:00000000000066A7                 db 0FFh
.eh_frame_hdr:00000000000066A8                 db  7Ch ; |
.eh_frame_hdr:00000000000066A9                 db  0Dh
.eh_frame_hdr:00000000000066AA                 db    0
.eh_frame_hdr:00000000000066AB                 db    0
.eh_frame_hdr:00000000000066AC                 db  50h ; P
.eh_frame_hdr:00000000000066AD                 db 0EEh
.eh_frame_hdr:00000000000066AE                 db 0FFh
.eh_frame_hdr:00000000000066AF                 db 0FFh
.eh_frame_hdr:00000000000066B0                 db 0A0h
.eh_frame_hdr:00000000000066B1                 db  0Dh
.eh_frame_hdr:00000000000066B2                 db    0
.eh_frame_hdr:00000000000066B3                 db    0
.eh_frame_hdr:00000000000066B4                 db  80h
.eh_frame_hdr:00000000000066B5                 db 0EEh
.eh_frame_hdr:00000000000066B6                 db 0FFh
.eh_frame_hdr:00000000000066B7                 db 0FFh
.eh_frame_hdr:00000000000066B8                 db 0B4h
.eh_frame_hdr:00000000000066B9                 db  0Dh
.eh_frame_hdr:00000000000066BA                 db    0
.eh_frame_hdr:00000000000066BB                 db    0
.eh_frame_hdr:00000000000066BC                 db  10h
.eh_frame_hdr:00000000000066BD                 db 0EFh
.eh_frame_hdr:00000000000066BE                 db 0FFh
.eh_frame_hdr:00000000000066BF                 db 0FFh
.eh_frame_hdr:00000000000066C0                 db 0CCh
.eh_frame_hdr:00000000000066C1                 db  0Dh
.eh_frame_hdr:00000000000066C2                 db    0
.eh_frame_hdr:00000000000066C3                 db    0
.eh_frame_hdr:00000000000066C4                 db  60h ; `
.eh_frame_hdr:00000000000066C5                 db 0EFh
.eh_frame_hdr:00000000000066C6                 db 0FFh
.eh_frame_hdr:00000000000066C7                 db 0FFh
.eh_frame_hdr:00000000000066C8                 db 0E4h
.eh_frame_hdr:00000000000066C9                 db  0Dh
.eh_frame_hdr:00000000000066CA                 db    0
.eh_frame_hdr:00000000000066CB                 db    0
.eh_frame_hdr:00000000000066CC                 db  80h
.eh_frame_hdr:00000000000066CD                 db 0EFh
.eh_frame_hdr:00000000000066CE                 db 0FFh
.eh_frame_hdr:00000000000066CF                 db 0FFh
.eh_frame_hdr:00000000000066D0                 db    0
.eh_frame_hdr:00000000000066D1                 db  0Eh
.eh_frame_hdr:00000000000066D2                 db    0
.eh_frame_hdr:00000000000066D3                 db    0
.eh_frame_hdr:00000000000066D4                 db 0B0h
.eh_frame_hdr:00000000000066D5                 db 0EFh
.eh_frame_hdr:00000000000066D6                 db 0FFh
.eh_frame_hdr:00000000000066D7                 db 0FFh
.eh_frame_hdr:00000000000066D8                 db  1Ch
.eh_frame_hdr:00000000000066D9                 db  0Eh
.eh_frame_hdr:00000000000066DA                 db    0
.eh_frame_hdr:00000000000066DB                 db    0
.eh_frame_hdr:00000000000066DC                 db 0E0h
.eh_frame_hdr:00000000000066DD                 db 0EFh
.eh_frame_hdr:00000000000066DE                 db 0FFh
.eh_frame_hdr:00000000000066DF                 db 0FFh
.eh_frame_hdr:00000000000066E0                 db  44h ; D
.eh_frame_hdr:00000000000066E1                 db  0Eh
.eh_frame_hdr:00000000000066E2                 db    0
.eh_frame_hdr:00000000000066E3                 db    0
.eh_frame_hdr:00000000000066E4                 db    0
.eh_frame_hdr:00000000000066E5                 db 0F0h
.eh_frame_hdr:00000000000066E6                 db 0FFh
.eh_frame_hdr:00000000000066E7                 db 0FFh
.eh_frame_hdr:00000000000066E8                 db  60h ; `
.eh_frame_hdr:00000000000066E9                 db  0Eh
.eh_frame_hdr:00000000000066EA                 db    0
.eh_frame_hdr:00000000000066EB                 db    0
.eh_frame_hdr:00000000000066EC                 db  40h ; @
.eh_frame_hdr:00000000000066ED                 db 0F0h
.eh_frame_hdr:00000000000066EE                 db 0FFh
.eh_frame_hdr:00000000000066EF                 db 0FFh
.eh_frame_hdr:00000000000066F0                 db  78h ; x
.eh_frame_hdr:00000000000066F1                 db  0Eh
.eh_frame_hdr:00000000000066F2                 db    0
.eh_frame_hdr:00000000000066F3                 db    0
.eh_frame_hdr:00000000000066F4                 db 0C0h
.eh_frame_hdr:00000000000066F5                 db 0F0h
.eh_frame_hdr:00000000000066F6                 db 0FFh
.eh_frame_hdr:00000000000066F7                 db 0FFh
.eh_frame_hdr:00000000000066F8                 db 0B0h
.eh_frame_hdr:00000000000066F9                 db  0Eh
.eh_frame_hdr:00000000000066FA                 db    0
.eh_frame_hdr:00000000000066FB                 db    0
.eh_frame_hdr:00000000000066FC                 db    0
.eh_frame_hdr:00000000000066FD                 db 0F1h
.eh_frame_hdr:00000000000066FE                 db 0FFh
.eh_frame_hdr:00000000000066FF                 db 0FFh
.eh_frame_hdr:0000000000006700                 db 0D0h
.eh_frame_hdr:0000000000006701                 db  0Eh
.eh_frame_hdr:0000000000006702                 db    0
.eh_frame_hdr:0000000000006703                 db    0
.eh_frame_hdr:0000000000006704                 db  60h ; `
.eh_frame_hdr:0000000000006705                 db 0F1h
.eh_frame_hdr:0000000000006706                 db 0FFh
.eh_frame_hdr:0000000000006707                 db 0FFh
.eh_frame_hdr:0000000000006708                 db    0
.eh_frame_hdr:0000000000006709                 db  0Fh
.eh_frame_hdr:000000000000670A                 db    0
.eh_frame_hdr:000000000000670B                 db    0
.eh_frame_hdr:000000000000670C                 db 0F0h
.eh_frame_hdr:000000000000670D                 db 0F1h
.eh_frame_hdr:000000000000670E                 db 0FFh
.eh_frame_hdr:000000000000670F                 db 0FFh
.eh_frame_hdr:0000000000006710                 db  40h ; @
.eh_frame_hdr:0000000000006711                 db  0Fh
.eh_frame_hdr:0000000000006712                 db    0
.eh_frame_hdr:0000000000006713                 db    0
.eh_frame_hdr:0000000000006714                 db  70h ; p
.eh_frame_hdr:0000000000006715                 db 0F2h
.eh_frame_hdr:0000000000006716                 db 0FFh
.eh_frame_hdr:0000000000006717                 db 0FFh
.eh_frame_hdr:0000000000006718                 db  90h
.eh_frame_hdr:0000000000006719                 db  0Fh
.eh_frame_hdr:000000000000671A                 db    0
.eh_frame_hdr:000000000000671B                 db    0
.eh_frame_hdr:000000000000671C                 db 0D0h
.eh_frame_hdr:000000000000671D                 db 0F2h
.eh_frame_hdr:000000000000671E                 db 0FFh
.eh_frame_hdr:000000000000671F                 db 0FFh
.eh_frame_hdr:0000000000006720                 db 0B0h
.eh_frame_hdr:0000000000006721                 db  0Fh
.eh_frame_hdr:0000000000006722                 db    0
.eh_frame_hdr:0000000000006723                 db    0
.eh_frame_hdr:0000000000006724                 db  10h
.eh_frame_hdr:0000000000006725                 db 0F3h
.eh_frame_hdr:0000000000006726                 db 0FFh
.eh_frame_hdr:0000000000006727                 db 0FFh
.eh_frame_hdr:0000000000006728                 db 0D0h
.eh_frame_hdr:0000000000006729                 db  0Fh
.eh_frame_hdr:000000000000672A                 db    0
.eh_frame_hdr:000000000000672B                 db    0
.eh_frame_hdr:000000000000672C                 db  80h
.eh_frame_hdr:000000000000672D                 db 0F3h
.eh_frame_hdr:000000000000672E                 db 0FFh
.eh_frame_hdr:000000000000672F                 db 0FFh
.eh_frame_hdr:0000000000006730                 db  18h
.eh_frame_hdr:0000000000006731                 db  10h
.eh_frame_hdr:0000000000006732                 db    0
.eh_frame_hdr:0000000000006733                 db    0
.eh_frame_hdr:0000000000006734                 db  90h
.eh_frame_hdr:0000000000006735                 db 0F3h
.eh_frame_hdr:0000000000006736                 db 0FFh
.eh_frame_hdr:0000000000006737                 db 0FFh
.eh_frame_hdr:0000000000006738                 db  30h ; 0
.eh_frame_hdr:0000000000006739                 db  10h
.eh_frame_hdr:000000000000673A                 db    0
.eh_frame_hdr:000000000000673B                 db    0
.eh_frame_hdr:000000000000673B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000673B
LOAD:000000000000673C ; ===========================================================================
LOAD:000000000000673C
LOAD:000000000000673C ; Segment type: Pure code
LOAD:000000000000673C ; Segment permissions: Read/Execute
LOAD:000000000000673C LOAD            segment byte public 'CODE' use64
LOAD:000000000000673C                 assume cs:LOAD
LOAD:000000000000673C                 ;org 673Ch
LOAD:000000000000673C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000673C                 align 20h
LOAD:000000000000673C LOAD            ends
LOAD:000000000000673C
.eh_frame:0000000000006740 ; ===========================================================================
.eh_frame:0000000000006740
.eh_frame:0000000000006740 ; Segment type: Pure data
.eh_frame:0000000000006740 ; Segment permissions: Read
.eh_frame:0000000000006740 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000006740                 assume cs:_eh_frame
.eh_frame:0000000000006740                 ;org 6740h
.eh_frame:0000000000006740                 db  14h
.eh_frame:0000000000006741                 db    0
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db    0
.eh_frame:0000000000006745                 db    0
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db    1
.eh_frame:0000000000006749                 db  7Ah ; z
.eh_frame:000000000000674A                 db  52h ; R
.eh_frame:000000000000674B                 db    0
.eh_frame:000000000000674C                 db    1
.eh_frame:000000000000674D                 db  78h ; x
.eh_frame:000000000000674E                 db  10h
.eh_frame:000000000000674F                 db    1
.eh_frame:0000000000006750                 db  1Bh
.eh_frame:0000000000006751                 db  0Ch
.eh_frame:0000000000006752                 db    7
.eh_frame:0000000000006753                 db    8
.eh_frame:0000000000006754                 db  90h
.eh_frame:0000000000006755                 db    1
.eh_frame:0000000000006756                 db    7
.eh_frame:0000000000006757                 db  10h
.eh_frame:0000000000006758                 db  14h
.eh_frame:0000000000006759                 db    0
.eh_frame:000000000000675A                 db    0
.eh_frame:000000000000675B                 db    0
.eh_frame:000000000000675C                 db  1Ch
.eh_frame:000000000000675D                 db    0
.eh_frame:000000000000675E                 db    0
.eh_frame:000000000000675F                 db    0
.eh_frame:0000000000006760                 db 0F0h
.eh_frame:0000000000006761                 db 0B6h
.eh_frame:0000000000006762                 db 0FFh
.eh_frame:0000000000006763                 db 0FFh
.eh_frame:0000000000006764                 db  2Bh ; +
.eh_frame:0000000000006765                 db    0
.eh_frame:0000000000006766                 db    0
.eh_frame:0000000000006767                 db    0
.eh_frame:0000000000006768                 db    0
.eh_frame:0000000000006769                 db    0
.eh_frame:000000000000676A                 db    0
.eh_frame:000000000000676B                 db    0
.eh_frame:000000000000676C                 db    0
.eh_frame:000000000000676D                 db    0
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db  14h
.eh_frame:0000000000006771                 db    0
.eh_frame:0000000000006772                 db    0
.eh_frame:0000000000006773                 db    0
.eh_frame:0000000000006774                 db    0
.eh_frame:0000000000006775                 db    0
.eh_frame:0000000000006776                 db    0
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db    1
.eh_frame:0000000000006779                 db  7Ah ; z
.eh_frame:000000000000677A                 db  52h ; R
.eh_frame:000000000000677B                 db    0
.eh_frame:000000000000677C                 db    1
.eh_frame:000000000000677D                 db  78h ; x
.eh_frame:000000000000677E                 db  10h
.eh_frame:000000000000677F                 db    1
.eh_frame:0000000000006780                 db  1Bh
.eh_frame:0000000000006781                 db  0Ch
.eh_frame:0000000000006782                 db    7
.eh_frame:0000000000006783                 db    8
.eh_frame:0000000000006784                 db  90h
.eh_frame:0000000000006785                 db    1
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db  24h ; $
.eh_frame:0000000000006789                 db    0
.eh_frame:000000000000678A                 db    0
.eh_frame:000000000000678B                 db    0
.eh_frame:000000000000678C                 db  1Ch
.eh_frame:000000000000678D                 db    0
.eh_frame:000000000000678E                 db    0
.eh_frame:000000000000678F                 db    0
.eh_frame:0000000000006790                 db  40h ; @
.eh_frame:0000000000006791                 db 0ACh
.eh_frame:0000000000006792                 db 0FFh
.eh_frame:0000000000006793                 db 0FFh
.eh_frame:0000000000006794                 db  10h
.eh_frame:0000000000006795                 db    3
.eh_frame:0000000000006796                 db    0
.eh_frame:0000000000006797                 db    0
.eh_frame:0000000000006798                 db    0
.eh_frame:0000000000006799                 db  0Eh
.eh_frame:000000000000679A                 db  10h
.eh_frame:000000000000679B                 db  46h ; F
.eh_frame:000000000000679C                 db  0Eh
.eh_frame:000000000000679D                 db  18h
.eh_frame:000000000000679E                 db  4Ah ; J
.eh_frame:000000000000679F                 db  0Fh
.eh_frame:00000000000067A0                 db  0Bh
.eh_frame:00000000000067A1                 db  77h ; w
.eh_frame:00000000000067A2                 db    8
.eh_frame:00000000000067A3                 db  80h
.eh_frame:00000000000067A4                 db    0
.eh_frame:00000000000067A5                 db  3Fh ; ?
.eh_frame:00000000000067A6                 db  1Ah
.eh_frame:00000000000067A7                 db  3Bh ; ;
.eh_frame:00000000000067A8                 db  2Ah ; *
.eh_frame:00000000000067A9                 db  33h ; 3
.eh_frame:00000000000067AA                 db  24h ; $
.eh_frame:00000000000067AB                 db  22h ; "
.eh_frame:00000000000067AC                 db    0
.eh_frame:00000000000067AD                 db    0
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db  14h
.eh_frame:00000000000067B1                 db    0
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db  44h ; D
.eh_frame:00000000000067B5                 db    0
.eh_frame:00000000000067B6                 db    0
.eh_frame:00000000000067B7                 db    0
.eh_frame:00000000000067B8                 db  28h ; (
.eh_frame:00000000000067B9                 db 0AFh
.eh_frame:00000000000067BA                 db 0FFh
.eh_frame:00000000000067BB                 db 0FFh
.eh_frame:00000000000067BC                 db    8
.eh_frame:00000000000067BD                 db    0
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db    0
.eh_frame:00000000000067C1                 db    0
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db    0
.eh_frame:00000000000067C5                 db    0
.eh_frame:00000000000067C6                 db    0
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db  10h
.eh_frame:00000000000067C9                 db    0
.eh_frame:00000000000067CA                 db    0
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db  5Ch ; \
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  90h
.eh_frame:00000000000067D1                 db 0B7h
.eh_frame:00000000000067D2                 db 0FFh
.eh_frame:00000000000067D3                 db 0FFh
.eh_frame:00000000000067D4                 db  0Bh
.eh_frame:00000000000067D5                 db    0
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db    0
.eh_frame:00000000000067D9                 db    0
.eh_frame:00000000000067DA                 db    0
.eh_frame:00000000000067DB                 db    0
.eh_frame:00000000000067DC                 db  3Ch ; <
.eh_frame:00000000000067DD                 db    0
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db  70h ; p
.eh_frame:00000000000067E1                 db    0
.eh_frame:00000000000067E2                 db    0
.eh_frame:00000000000067E3                 db    0
.eh_frame:00000000000067E4                 db  8Ch
.eh_frame:00000000000067E5                 db 0B7h
.eh_frame:00000000000067E6                 db 0FFh
.eh_frame:00000000000067E7                 db 0FFh
.eh_frame:00000000000067E8                 db  65h ; e
.eh_frame:00000000000067E9                 db    0
.eh_frame:00000000000067EA                 db    0
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db    0
.eh_frame:00000000000067ED                 db  41h ; A
.eh_frame:00000000000067EE                 db  0Eh
.eh_frame:00000000000067EF                 db  10h
.eh_frame:00000000000067F0                 db  86h
.eh_frame:00000000000067F1                 db    2
.eh_frame:00000000000067F2                 db  41h ; A
.eh_frame:00000000000067F3                 db  0Eh
.eh_frame:00000000000067F4                 db  18h
.eh_frame:00000000000067F5                 db  83h
.eh_frame:00000000000067F6                 db    3
.eh_frame:00000000000067F7                 db  4Ah ; J
.eh_frame:00000000000067F8                 db  0Eh
.eh_frame:00000000000067F9                 db  20h
.eh_frame:00000000000067FA                 db  6Bh ; k
.eh_frame:00000000000067FB                 db  0Ah
.eh_frame:00000000000067FC                 db  0Eh
.eh_frame:00000000000067FD                 db  18h
.eh_frame:00000000000067FE                 db  41h ; A
.eh_frame:00000000000067FF                 db  0Eh
.eh_frame:0000000000006800                 db  10h
.eh_frame:0000000000006801                 db  41h ; A
.eh_frame:0000000000006802                 db  0Eh
.eh_frame:0000000000006803                 db    8
.eh_frame:0000000000006804                 db  47h ; G
.eh_frame:0000000000006805                 db  0Bh
.eh_frame:0000000000006806                 db  44h ; D
.eh_frame:0000000000006807                 db  0Ah
.eh_frame:0000000000006808                 db  0Eh
.eh_frame:0000000000006809                 db  18h
.eh_frame:000000000000680A                 db  46h ; F
.eh_frame:000000000000680B                 db  0Eh
.eh_frame:000000000000680C                 db  10h
.eh_frame:000000000000680D                 db  41h ; A
.eh_frame:000000000000680E                 db  0Eh
.eh_frame:000000000000680F                 db    8
.eh_frame:0000000000006810                 db  45h ; E
.eh_frame:0000000000006811                 db  0Bh
.eh_frame:0000000000006812                 db  4Bh ; K
.eh_frame:0000000000006813                 db  0Eh
.eh_frame:0000000000006814                 db  18h
.eh_frame:0000000000006815                 db  47h ; G
.eh_frame:0000000000006816                 db  0Eh
.eh_frame:0000000000006817                 db  10h
.eh_frame:0000000000006818                 db  41h ; A
.eh_frame:0000000000006819                 db  0Eh
.eh_frame:000000000000681A                 db    8
.eh_frame:000000000000681B                 db    0
.eh_frame:000000000000681C                 db  24h ; $
.eh_frame:000000000000681D                 db    0
.eh_frame:000000000000681E                 db    0
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db 0B0h
.eh_frame:0000000000006821                 db    0
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db 0BCh
.eh_frame:0000000000006825                 db 0B7h
.eh_frame:0000000000006826                 db 0FFh
.eh_frame:0000000000006827                 db 0FFh
.eh_frame:0000000000006828                 db  62h ; b
.eh_frame:0000000000006829                 db    0
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db    0
.eh_frame:000000000000682D                 db  41h ; A
.eh_frame:000000000000682E                 db  0Eh
.eh_frame:000000000000682F                 db  10h
.eh_frame:0000000000006830                 db  86h
.eh_frame:0000000000006831                 db    2
.eh_frame:0000000000006832                 db  41h ; A
.eh_frame:0000000000006833                 db  0Eh
.eh_frame:0000000000006834                 db  18h
.eh_frame:0000000000006835                 db  83h
.eh_frame:0000000000006836                 db    3
.eh_frame:0000000000006837                 db  4Ch ; L
.eh_frame:0000000000006838                 db  0Eh
.eh_frame:0000000000006839                 db  20h
.eh_frame:000000000000683A                 db    2
.eh_frame:000000000000683B                 db  51h ; Q
.eh_frame:000000000000683C                 db  0Eh
.eh_frame:000000000000683D                 db  18h
.eh_frame:000000000000683E                 db  41h ; A
.eh_frame:000000000000683F                 db  0Eh
.eh_frame:0000000000006840                 db  10h
.eh_frame:0000000000006841                 db  41h ; A
.eh_frame:0000000000006842                 db  0Eh
.eh_frame:0000000000006843                 db    8
.eh_frame:0000000000006844                 db  10h
.eh_frame:0000000000006845                 db    0
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db 0D8h
.eh_frame:0000000000006849                 db    0
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db    4
.eh_frame:000000000000684D                 db 0B8h
.eh_frame:000000000000684E                 db 0FFh
.eh_frame:000000000000684F                 db 0FFh
.eh_frame:0000000000006850                 db  39h ; 9
.eh_frame:0000000000006851                 db    0
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db    0
.eh_frame:0000000000006855                 db    0
.eh_frame:0000000000006856                 db    0
.eh_frame:0000000000006857                 db    0
.eh_frame:0000000000006858                 db  68h ; h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db 0ECh
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db  30h ; 0
.eh_frame:0000000000006861                 db 0B8h
.eh_frame:0000000000006862                 db 0FFh
.eh_frame:0000000000006863                 db 0FFh
.eh_frame:0000000000006864                 db  31h ; 1
.eh_frame:0000000000006865                 db    1
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db    0
.eh_frame:0000000000006869                 db  4Bh ; K
.eh_frame:000000000000686A                 db  0Eh
.eh_frame:000000000000686B                 db  10h
.eh_frame:000000000000686C                 db  8Dh
.eh_frame:000000000000686D                 db    2
.eh_frame:000000000000686E                 db  42h ; B
.eh_frame:000000000000686F                 db  0Eh
.eh_frame:0000000000006870                 db  18h
.eh_frame:0000000000006871                 db  8Ch
.eh_frame:0000000000006872                 db    3
.eh_frame:0000000000006873                 db  41h ; A
.eh_frame:0000000000006874                 db  0Eh
.eh_frame:0000000000006875                 db  20h
.eh_frame:0000000000006876                 db  86h
.eh_frame:0000000000006877                 db    4
.eh_frame:0000000000006878                 db  41h ; A
.eh_frame:0000000000006879                 db  0Eh
.eh_frame:000000000000687A                 db  28h ; (
.eh_frame:000000000000687B                 db  83h
.eh_frame:000000000000687C                 db    5
.eh_frame:000000000000687D                 db  47h ; G
.eh_frame:000000000000687E                 db  0Eh
.eh_frame:000000000000687F                 db  30h ; 0
.eh_frame:0000000000006880                 db  77h ; w
.eh_frame:0000000000006881                 db  0Eh
.eh_frame:0000000000006882                 db  28h ; (
.eh_frame:0000000000006883                 db  41h ; A
.eh_frame:0000000000006884                 db  0Eh
.eh_frame:0000000000006885                 db  20h
.eh_frame:0000000000006886                 db  41h ; A
.eh_frame:0000000000006887                 db  0Eh
.eh_frame:0000000000006888                 db  18h
.eh_frame:0000000000006889                 db  42h ; B
.eh_frame:000000000000688A                 db  0Eh
.eh_frame:000000000000688B                 db  10h
.eh_frame:000000000000688C                 db  42h ; B
.eh_frame:000000000000688D                 db  0Eh
.eh_frame:000000000000688E                 db    8
.eh_frame:000000000000688F                 db  45h ; E
.eh_frame:0000000000006890                 db 0C3h
.eh_frame:0000000000006891                 db 0C6h
.eh_frame:0000000000006892                 db 0CCh
.eh_frame:0000000000006893                 db 0CDh
.eh_frame:0000000000006894                 db  48h ; H
.eh_frame:0000000000006895                 db  0Eh
.eh_frame:0000000000006896                 db  30h ; 0
.eh_frame:0000000000006897                 db  83h
.eh_frame:0000000000006898                 db    5
.eh_frame:0000000000006899                 db  86h
.eh_frame:000000000000689A                 db    4
.eh_frame:000000000000689B                 db  8Ch
.eh_frame:000000000000689C                 db    3
.eh_frame:000000000000689D                 db  8Dh
.eh_frame:000000000000689E                 db    2
.eh_frame:000000000000689F                 db  4Bh ; K
.eh_frame:00000000000068A0                 db  0Ah
.eh_frame:00000000000068A1                 db  0Eh
.eh_frame:00000000000068A2                 db  28h ; (
.eh_frame:00000000000068A3                 db  41h ; A
.eh_frame:00000000000068A4                 db  0Eh
.eh_frame:00000000000068A5                 db  20h
.eh_frame:00000000000068A6                 db  41h ; A
.eh_frame:00000000000068A7                 db  0Eh
.eh_frame:00000000000068A8                 db  18h
.eh_frame:00000000000068A9                 db  42h ; B
.eh_frame:00000000000068AA                 db  0Eh
.eh_frame:00000000000068AB                 db  10h
.eh_frame:00000000000068AC                 db  42h ; B
.eh_frame:00000000000068AD                 db  0Eh
.eh_frame:00000000000068AE                 db    8
.eh_frame:00000000000068AF                 db  47h ; G
.eh_frame:00000000000068B0                 db  0Bh
.eh_frame:00000000000068B1                 db    2
.eh_frame:00000000000068B2                 db  8Bh
.eh_frame:00000000000068B3                 db  0Ah
.eh_frame:00000000000068B4                 db  0Eh
.eh_frame:00000000000068B5                 db  28h ; (
.eh_frame:00000000000068B6                 db  46h ; F
.eh_frame:00000000000068B7                 db  0Eh
.eh_frame:00000000000068B8                 db  20h
.eh_frame:00000000000068B9                 db  41h ; A
.eh_frame:00000000000068BA                 db  0Eh
.eh_frame:00000000000068BB                 db  18h
.eh_frame:00000000000068BC                 db  42h ; B
.eh_frame:00000000000068BD                 db  0Eh
.eh_frame:00000000000068BE                 db  10h
.eh_frame:00000000000068BF                 db  42h ; B
.eh_frame:00000000000068C0                 db  0Eh
.eh_frame:00000000000068C1                 db    8
.eh_frame:00000000000068C2                 db  42h ; B
.eh_frame:00000000000068C3                 db  0Bh
.eh_frame:00000000000068C4                 db  28h ; (
.eh_frame:00000000000068C5                 db    0
.eh_frame:00000000000068C6                 db    0
.eh_frame:00000000000068C7                 db    0
.eh_frame:00000000000068C8                 db  58h ; X
.eh_frame:00000000000068C9                 db    1
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db    4
.eh_frame:00000000000068CD                 db 0B9h
.eh_frame:00000000000068CE                 db 0FFh
.eh_frame:00000000000068CF                 db 0FFh
.eh_frame:00000000000068D0                 db  6Ah ; j
.eh_frame:00000000000068D1                 db    3
.eh_frame:00000000000068D2                 db    0
.eh_frame:00000000000068D3                 db    0
.eh_frame:00000000000068D4                 db    0
.eh_frame:00000000000068D5                 db  42h ; B
.eh_frame:00000000000068D6                 db  0Eh
.eh_frame:00000000000068D7                 db  10h
.eh_frame:00000000000068D8                 db  8Dh
.eh_frame:00000000000068D9                 db    2
.eh_frame:00000000000068DA                 db  42h ; B
.eh_frame:00000000000068DB                 db  0Eh
.eh_frame:00000000000068DC                 db  18h
.eh_frame:00000000000068DD                 db  8Ch
.eh_frame:00000000000068DE                 db    3
.eh_frame:00000000000068DF                 db  46h ; F
.eh_frame:00000000000068E0                 db  0Eh
.eh_frame:00000000000068E1                 db  20h
.eh_frame:00000000000068E2                 db  86h
.eh_frame:00000000000068E3                 db    4
.eh_frame:00000000000068E4                 db  41h ; A
.eh_frame:00000000000068E5                 db  0Eh
.eh_frame:00000000000068E6                 db  28h ; (
.eh_frame:00000000000068E7                 db  83h
.eh_frame:00000000000068E8                 db    5
.eh_frame:00000000000068E9                 db  49h ; I
.eh_frame:00000000000068EA                 db  0Eh
.eh_frame:00000000000068EB                 db 0B0h
.eh_frame:00000000000068EC                 db    1
.eh_frame:00000000000068ED                 db    0
.eh_frame:00000000000068EE                 db    0
.eh_frame:00000000000068EF                 db    0
.eh_frame:00000000000068F0                 db  64h ; d
.eh_frame:00000000000068F1                 db    0
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db  84h
.eh_frame:00000000000068F5                 db    1
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db 0F8h
.eh_frame:00000000000068F9                 db 0ADh
.eh_frame:00000000000068FA                 db 0FFh
.eh_frame:00000000000068FB                 db 0FFh
.eh_frame:00000000000068FC                 db  60h ; `
.eh_frame:00000000000068FD                 db    7
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db    0
.eh_frame:0000000000006901                 db  42h ; B
.eh_frame:0000000000006902                 db  0Eh
.eh_frame:0000000000006903                 db  10h
.eh_frame:0000000000006904                 db  8Fh
.eh_frame:0000000000006905                 db    2
.eh_frame:0000000000006906                 db  42h ; B
.eh_frame:0000000000006907                 db  0Eh
.eh_frame:0000000000006908                 db  18h
.eh_frame:0000000000006909                 db  8Eh
.eh_frame:000000000000690A                 db    3
.eh_frame:000000000000690B                 db  42h ; B
.eh_frame:000000000000690C                 db  0Eh
.eh_frame:000000000000690D                 db  20h
.eh_frame:000000000000690E                 db  8Dh
.eh_frame:000000000000690F                 db    4
.eh_frame:0000000000006910                 db  42h ; B
.eh_frame:0000000000006911                 db  0Eh
.eh_frame:0000000000006912                 db  28h ; (
.eh_frame:0000000000006913                 db  8Ch
.eh_frame:0000000000006914                 db    5
.eh_frame:0000000000006915                 db  41h ; A
.eh_frame:0000000000006916                 db  0Eh
.eh_frame:0000000000006917                 db  30h ; 0
.eh_frame:0000000000006918                 db  86h
.eh_frame:0000000000006919                 db    6
.eh_frame:000000000000691A                 db  41h ; A
.eh_frame:000000000000691B                 db  0Eh
.eh_frame:000000000000691C                 db  38h ; 8
.eh_frame:000000000000691D                 db  83h
.eh_frame:000000000000691E                 db    7
.eh_frame:000000000000691F                 db  49h ; I
.eh_frame:0000000000006920                 db  0Eh
.eh_frame:0000000000006921                 db  90h
.eh_frame:0000000000006922                 db    1
.eh_frame:0000000000006923                 db    2
.eh_frame:0000000000006924                 db  5Fh ; _
.eh_frame:0000000000006925                 db  0Eh
.eh_frame:0000000000006926                 db  98h
.eh_frame:0000000000006927                 db    1
.eh_frame:0000000000006928                 db  49h ; I
.eh_frame:0000000000006929                 db  0Eh
.eh_frame:000000000000692A                 db 0A0h
.eh_frame:000000000000692B                 db    1
.eh_frame:000000000000692C                 db  4Fh ; O
.eh_frame:000000000000692D                 db  0Eh
.eh_frame:000000000000692E                 db 0A8h
.eh_frame:000000000000692F                 db    1
.eh_frame:0000000000006930                 db  53h ; S
.eh_frame:0000000000006931                 db  0Eh
.eh_frame:0000000000006932                 db 0B0h
.eh_frame:0000000000006933                 db    1
.eh_frame:0000000000006934                 db  54h ; T
.eh_frame:0000000000006935                 db  0Eh
.eh_frame:0000000000006936                 db  90h
.eh_frame:0000000000006937                 db    1
.eh_frame:0000000000006938                 db    3
.eh_frame:0000000000006939                 db 0FFh
.eh_frame:000000000000693A                 db    3
.eh_frame:000000000000693B                 db  0Ah
.eh_frame:000000000000693C                 db  0Eh
.eh_frame:000000000000693D                 db  38h ; 8
.eh_frame:000000000000693E                 db  41h ; A
.eh_frame:000000000000693F                 db  0Eh
.eh_frame:0000000000006940                 db  30h ; 0
.eh_frame:0000000000006941                 db  41h ; A
.eh_frame:0000000000006942                 db  0Eh
.eh_frame:0000000000006943                 db  28h ; (
.eh_frame:0000000000006944                 db  42h ; B
.eh_frame:0000000000006945                 db  0Eh
.eh_frame:0000000000006946                 db  20h
.eh_frame:0000000000006947                 db  42h ; B
.eh_frame:0000000000006948                 db  0Eh
.eh_frame:0000000000006949                 db  18h
.eh_frame:000000000000694A                 db  42h ; B
.eh_frame:000000000000694B                 db  0Eh
.eh_frame:000000000000694C                 db  10h
.eh_frame:000000000000694D                 db  42h ; B
.eh_frame:000000000000694E                 db  0Eh
.eh_frame:000000000000694F                 db    8
.eh_frame:0000000000006950                 db  46h ; F
.eh_frame:0000000000006951                 db  0Bh
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db    0
.eh_frame:0000000000006955                 db    0
.eh_frame:0000000000006956                 db    0
.eh_frame:0000000000006957                 db    0
.eh_frame:0000000000006958                 db  10h
.eh_frame:0000000000006959                 db    0
.eh_frame:000000000000695A                 db    0
.eh_frame:000000000000695B                 db    0
.eh_frame:000000000000695C                 db 0ECh
.eh_frame:000000000000695D                 db    1
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db 0E0h
.eh_frame:0000000000006961                 db 0BBh
.eh_frame:0000000000006962                 db 0FFh
.eh_frame:0000000000006963                 db 0FFh
.eh_frame:0000000000006964                 db    8
.eh_frame:0000000000006965                 db    0
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db    0
.eh_frame:0000000000006969                 db    0
.eh_frame:000000000000696A                 db    0
.eh_frame:000000000000696B                 db    0
.eh_frame:000000000000696C                 db  10h
.eh_frame:000000000000696D                 db    0
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db    0
.eh_frame:0000000000006971                 db    2
.eh_frame:0000000000006972                 db    0
.eh_frame:0000000000006973                 db    0
.eh_frame:0000000000006974                 db 0DCh
.eh_frame:0000000000006975                 db 0BBh
.eh_frame:0000000000006976                 db 0FFh
.eh_frame:0000000000006977                 db 0FFh
.eh_frame:0000000000006978                 db    8
.eh_frame:0000000000006979                 db    0
.eh_frame:000000000000697A                 db    0
.eh_frame:000000000000697B                 db    0
.eh_frame:000000000000697C                 db    0
.eh_frame:000000000000697D                 db    0
.eh_frame:000000000000697E                 db    0
.eh_frame:000000000000697F                 db    0
.eh_frame:0000000000006980                 db  2Ch ; ,
.eh_frame:0000000000006981                 db    0
.eh_frame:0000000000006982                 db    0
.eh_frame:0000000000006983                 db    0
.eh_frame:0000000000006984                 db  14h
.eh_frame:0000000000006985                 db    2
.eh_frame:0000000000006986                 db    0
.eh_frame:0000000000006987                 db    0
.eh_frame:0000000000006988                 db 0D8h
.eh_frame:0000000000006989                 db 0BBh
.eh_frame:000000000000698A                 db 0FFh
.eh_frame:000000000000698B                 db 0FFh
.eh_frame:000000000000698C                 db 0A4h
.eh_frame:000000000000698D                 db    0
.eh_frame:000000000000698E                 db    0
.eh_frame:000000000000698F                 db    0
.eh_frame:0000000000006990                 db    0
.eh_frame:0000000000006991                 db  41h ; A
.eh_frame:0000000000006992                 db  0Eh
.eh_frame:0000000000006993                 db  10h
.eh_frame:0000000000006994                 db  86h
.eh_frame:0000000000006995                 db    2
.eh_frame:0000000000006996                 db  41h ; A
.eh_frame:0000000000006997                 db  0Eh
.eh_frame:0000000000006998                 db  18h
.eh_frame:0000000000006999                 db  83h
.eh_frame:000000000000699A                 db    3
.eh_frame:000000000000699B                 db  44h ; D
.eh_frame:000000000000699C                 db  0Eh
.eh_frame:000000000000699D                 db  20h
.eh_frame:000000000000699E                 db  7Ah ; z
.eh_frame:000000000000699F                 db  0Ah
.eh_frame:00000000000069A0                 db  0Eh
.eh_frame:00000000000069A1                 db  18h
.eh_frame:00000000000069A2                 db  41h ; A
.eh_frame:00000000000069A3                 db  0Eh
.eh_frame:00000000000069A4                 db  10h
.eh_frame:00000000000069A5                 db  41h ; A
.eh_frame:00000000000069A6                 db  0Eh
.eh_frame:00000000000069A7                 db    8
.eh_frame:00000000000069A8                 db  41h ; A
.eh_frame:00000000000069A9                 db  0Bh
.eh_frame:00000000000069AA                 db    0
.eh_frame:00000000000069AB                 db    0
.eh_frame:00000000000069AC                 db    0
.eh_frame:00000000000069AD                 db    0
.eh_frame:00000000000069AE                 db    0
.eh_frame:00000000000069AF                 db    0
.eh_frame:00000000000069B0                 db  10h
.eh_frame:00000000000069B1                 db    0
.eh_frame:00000000000069B2                 db    0
.eh_frame:00000000000069B3                 db    0
.eh_frame:00000000000069B4                 db  44h ; D
.eh_frame:00000000000069B5                 db    2
.eh_frame:00000000000069B6                 db    0
.eh_frame:00000000000069B7                 db    0
.eh_frame:00000000000069B8                 db  58h ; X
.eh_frame:00000000000069B9                 db 0BCh
.eh_frame:00000000000069BA                 db 0FFh
.eh_frame:00000000000069BB                 db 0FFh
.eh_frame:00000000000069BC                 db    5
.eh_frame:00000000000069BD                 db    0
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db    0
.eh_frame:00000000000069C1                 db    0
.eh_frame:00000000000069C2                 db    0
.eh_frame:00000000000069C3                 db    0
.eh_frame:00000000000069C4                 db  18h
.eh_frame:00000000000069C5                 db    0
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db  58h ; X
.eh_frame:00000000000069C9                 db    2
.eh_frame:00000000000069CA                 db    0
.eh_frame:00000000000069CB                 db    0
.eh_frame:00000000000069CC                 db  54h ; T
.eh_frame:00000000000069CD                 db 0BCh
.eh_frame:00000000000069CE                 db 0FFh
.eh_frame:00000000000069CF                 db 0FFh
.eh_frame:00000000000069D0                 db  22h ; "
.eh_frame:00000000000069D1                 db    0
.eh_frame:00000000000069D2                 db    0
.eh_frame:00000000000069D3                 db    0
.eh_frame:00000000000069D4                 db    0
.eh_frame:00000000000069D5                 db  46h ; F
.eh_frame:00000000000069D6                 db  0Eh
.eh_frame:00000000000069D7                 db  10h
.eh_frame:00000000000069D8                 db  83h
.eh_frame:00000000000069D9                 db    2
.eh_frame:00000000000069DA                 db  4Eh ; N
.eh_frame:00000000000069DB                 db 0C3h
.eh_frame:00000000000069DC                 db  0Eh
.eh_frame:00000000000069DD                 db    8
.eh_frame:00000000000069DE                 db    0
.eh_frame:00000000000069DF                 db    0
.eh_frame:00000000000069E0                 db  24h ; $
.eh_frame:00000000000069E1                 db    0
.eh_frame:00000000000069E2                 db    0
.eh_frame:00000000000069E3                 db    0
.eh_frame:00000000000069E4                 db  74h ; t
.eh_frame:00000000000069E5                 db    2
.eh_frame:00000000000069E6                 db    0
.eh_frame:00000000000069E7                 db    0
.eh_frame:00000000000069E8                 db  68h ; h
.eh_frame:00000000000069E9                 db 0BCh
.eh_frame:00000000000069EA                 db 0FFh
.eh_frame:00000000000069EB                 db 0FFh
.eh_frame:00000000000069EC                 db  42h ; B
.eh_frame:00000000000069ED                 db    0
.eh_frame:00000000000069EE                 db    0
.eh_frame:00000000000069EF                 db    0
.eh_frame:00000000000069F0                 db    0
.eh_frame:00000000000069F1                 db  41h ; A
.eh_frame:00000000000069F2                 db  0Eh
.eh_frame:00000000000069F3                 db  10h
.eh_frame:00000000000069F4                 db  86h
.eh_frame:00000000000069F5                 db    2
.eh_frame:00000000000069F6                 db  41h ; A
.eh_frame:00000000000069F7                 db  0Eh
.eh_frame:00000000000069F8                 db  18h
.eh_frame:00000000000069F9                 db  83h
.eh_frame:00000000000069FA                 db    3
.eh_frame:00000000000069FB                 db  51h ; Q
.eh_frame:00000000000069FC                 db  0Eh
.eh_frame:00000000000069FD                 db  20h
.eh_frame:00000000000069FE                 db  6Ah ; j
.eh_frame:00000000000069FF                 db  0Eh
.eh_frame:0000000000006A00                 db  18h
.eh_frame:0000000000006A01                 db  43h ; C
.eh_frame:0000000000006A02                 db  0Eh
.eh_frame:0000000000006A03                 db  10h
.eh_frame:0000000000006A04                 db  41h ; A
.eh_frame:0000000000006A05                 db  0Eh
.eh_frame:0000000000006A06                 db    8
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db  4Ch ; L
.eh_frame:0000000000006A09                 db    0
.eh_frame:0000000000006A0A                 db    0
.eh_frame:0000000000006A0B                 db    0
.eh_frame:0000000000006A0C                 db  9Ch
.eh_frame:0000000000006A0D                 db    2
.eh_frame:0000000000006A0E                 db    0
.eh_frame:0000000000006A0F                 db    0
.eh_frame:0000000000006A10                 db  90h
.eh_frame:0000000000006A11                 db 0BCh
.eh_frame:0000000000006A12                 db 0FFh
.eh_frame:0000000000006A13                 db 0FFh
.eh_frame:0000000000006A14                 db 0AEh
.eh_frame:0000000000006A15                 db    1
.eh_frame:0000000000006A16                 db    0
.eh_frame:0000000000006A17                 db    0
.eh_frame:0000000000006A18                 db    0
.eh_frame:0000000000006A19                 db  42h ; B
.eh_frame:0000000000006A1A                 db  0Eh
.eh_frame:0000000000006A1B                 db  10h
.eh_frame:0000000000006A1C                 db  8Fh
.eh_frame:0000000000006A1D                 db    2
.eh_frame:0000000000006A1E                 db  42h ; B
.eh_frame:0000000000006A1F                 db  0Eh
.eh_frame:0000000000006A20                 db  18h
.eh_frame:0000000000006A21                 db  8Eh
.eh_frame:0000000000006A22                 db    3
.eh_frame:0000000000006A23                 db  45h ; E
.eh_frame:0000000000006A24                 db  0Eh
.eh_frame:0000000000006A25                 db  20h
.eh_frame:0000000000006A26                 db  8Dh
.eh_frame:0000000000006A27                 db    4
.eh_frame:0000000000006A28                 db  42h ; B
.eh_frame:0000000000006A29                 db  0Eh
.eh_frame:0000000000006A2A                 db  28h ; (
.eh_frame:0000000000006A2B                 db  8Ch
.eh_frame:0000000000006A2C                 db    5
.eh_frame:0000000000006A2D                 db  44h ; D
.eh_frame:0000000000006A2E                 db  0Eh
.eh_frame:0000000000006A2F                 db  30h ; 0
.eh_frame:0000000000006A30                 db  86h
.eh_frame:0000000000006A31                 db    6
.eh_frame:0000000000006A32                 db  41h ; A
.eh_frame:0000000000006A33                 db  0Eh
.eh_frame:0000000000006A34                 db  38h ; 8
.eh_frame:0000000000006A35                 db  83h
.eh_frame:0000000000006A36                 db    7
.eh_frame:0000000000006A37                 db  44h ; D
.eh_frame:0000000000006A38                 db  0Eh
.eh_frame:0000000000006A39                 db  50h ; P
.eh_frame:0000000000006A3A                 db    2
.eh_frame:0000000000006A3B                 db 0D0h
.eh_frame:0000000000006A3C                 db  0Ah
.eh_frame:0000000000006A3D                 db  0Eh
.eh_frame:0000000000006A3E                 db  38h ; 8
.eh_frame:0000000000006A3F                 db  44h ; D
.eh_frame:0000000000006A40                 db  0Eh
.eh_frame:0000000000006A41                 db  30h ; 0
.eh_frame:0000000000006A42                 db  41h ; A
.eh_frame:0000000000006A43                 db  0Eh
.eh_frame:0000000000006A44                 db  28h ; (
.eh_frame:0000000000006A45                 db  42h ; B
.eh_frame:0000000000006A46                 db  0Eh
.eh_frame:0000000000006A47                 db  20h
.eh_frame:0000000000006A48                 db  42h ; B
.eh_frame:0000000000006A49                 db  0Eh
.eh_frame:0000000000006A4A                 db  18h
.eh_frame:0000000000006A4B                 db  42h ; B
.eh_frame:0000000000006A4C                 db  0Eh
.eh_frame:0000000000006A4D                 db  10h
.eh_frame:0000000000006A4E                 db  42h ; B
.eh_frame:0000000000006A4F                 db  0Eh
.eh_frame:0000000000006A50                 db    8
.eh_frame:0000000000006A51                 db  47h ; G
.eh_frame:0000000000006A52                 db  0Bh
.eh_frame:0000000000006A53                 db    0
.eh_frame:0000000000006A54                 db    0
.eh_frame:0000000000006A55                 db    0
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db  38h ; 8
.eh_frame:0000000000006A59                 db    0
.eh_frame:0000000000006A5A                 db    0
.eh_frame:0000000000006A5B                 db    0
.eh_frame:0000000000006A5C                 db 0ECh
.eh_frame:0000000000006A5D                 db    2
.eh_frame:0000000000006A5E                 db    0
.eh_frame:0000000000006A5F                 db    0
.eh_frame:0000000000006A60                 db 0F0h
.eh_frame:0000000000006A61                 db 0BDh
.eh_frame:0000000000006A62                 db 0FFh
.eh_frame:0000000000006A63                 db 0FFh
.eh_frame:0000000000006A64                 db  3Fh ; ?
.eh_frame:0000000000006A65                 db    1
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db    0
.eh_frame:0000000000006A69                 db  42h ; B
.eh_frame:0000000000006A6A                 db  0Eh
.eh_frame:0000000000006A6B                 db  10h
.eh_frame:0000000000006A6C                 db  8Dh
.eh_frame:0000000000006A6D                 db    2
.eh_frame:0000000000006A6E                 db  42h ; B
.eh_frame:0000000000006A6F                 db  0Eh
.eh_frame:0000000000006A70                 db  18h
.eh_frame:0000000000006A71                 db  8Ch
.eh_frame:0000000000006A72                 db    3
.eh_frame:0000000000006A73                 db  44h ; D
.eh_frame:0000000000006A74                 db  0Eh
.eh_frame:0000000000006A75                 db  20h
.eh_frame:0000000000006A76                 db  86h
.eh_frame:0000000000006A77                 db    4
.eh_frame:0000000000006A78                 db  41h ; A
.eh_frame:0000000000006A79                 db  0Eh
.eh_frame:0000000000006A7A                 db  28h ; (
.eh_frame:0000000000006A7B                 db  83h
.eh_frame:0000000000006A7C                 db    5
.eh_frame:0000000000006A7D                 db  4Dh ; M
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db  90h
.eh_frame:0000000000006A80                 db    2
.eh_frame:0000000000006A81                 db    2
.eh_frame:0000000000006A82                 db  8Eh
.eh_frame:0000000000006A83                 db  0Ah
.eh_frame:0000000000006A84                 db  0Eh
.eh_frame:0000000000006A85                 db  28h ; (
.eh_frame:0000000000006A86                 db  41h ; A
.eh_frame:0000000000006A87                 db  0Eh
.eh_frame:0000000000006A88                 db  20h
.eh_frame:0000000000006A89                 db  41h ; A
.eh_frame:0000000000006A8A                 db  0Eh
.eh_frame:0000000000006A8B                 db  18h
.eh_frame:0000000000006A8C                 db  42h ; B
.eh_frame:0000000000006A8D                 db  0Eh
.eh_frame:0000000000006A8E                 db  10h
.eh_frame:0000000000006A8F                 db  42h ; B
.eh_frame:0000000000006A90                 db  0Eh
.eh_frame:0000000000006A91                 db    8
.eh_frame:0000000000006A92                 db  46h ; F
.eh_frame:0000000000006A93                 db  0Bh
.eh_frame:0000000000006A94                 db  48h ; H
.eh_frame:0000000000006A95                 db    0
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db  28h ; (
.eh_frame:0000000000006A99                 db    3
.eh_frame:0000000000006A9A                 db    0
.eh_frame:0000000000006A9B                 db    0
.eh_frame:0000000000006A9C                 db 0F4h
.eh_frame:0000000000006A9D                 db 0BEh
.eh_frame:0000000000006A9E                 db 0FFh
.eh_frame:0000000000006A9F                 db 0FFh
.eh_frame:0000000000006AA0                 db  3Bh ; ;
.eh_frame:0000000000006AA1                 db    1
.eh_frame:0000000000006AA2                 db    0
.eh_frame:0000000000006AA3                 db    0
.eh_frame:0000000000006AA4                 db    0
.eh_frame:0000000000006AA5                 db  42h ; B
.eh_frame:0000000000006AA6                 db  0Eh
.eh_frame:0000000000006AA7                 db  10h
.eh_frame:0000000000006AA8                 db  8Eh
.eh_frame:0000000000006AA9                 db    2
.eh_frame:0000000000006AAA                 db  42h ; B
.eh_frame:0000000000006AAB                 db  0Eh
.eh_frame:0000000000006AAC                 db  18h
.eh_frame:0000000000006AAD                 db  8Dh
.eh_frame:0000000000006AAE                 db    3
.eh_frame:0000000000006AAF                 db  45h ; E
.eh_frame:0000000000006AB0                 db  0Eh
.eh_frame:0000000000006AB1                 db  20h
.eh_frame:0000000000006AB2                 db  8Ch
.eh_frame:0000000000006AB3                 db    4
.eh_frame:0000000000006AB4                 db  41h ; A
.eh_frame:0000000000006AB5                 db  0Eh
.eh_frame:0000000000006AB6                 db  28h ; (
.eh_frame:0000000000006AB7                 db  86h
.eh_frame:0000000000006AB8                 db    5
.eh_frame:0000000000006AB9                 db  44h ; D
.eh_frame:0000000000006ABA                 db  0Eh
.eh_frame:0000000000006ABB                 db  30h ; 0
.eh_frame:0000000000006ABC                 db  83h
.eh_frame:0000000000006ABD                 db    6
.eh_frame:0000000000006ABE                 db  4Ah ; J
.eh_frame:0000000000006ABF                 db  0Eh
.eh_frame:0000000000006AC0                 db  80h
.eh_frame:0000000000006AC1                 db    2
.eh_frame:0000000000006AC2                 db    3
.eh_frame:0000000000006AC3                 db  0Dh
.eh_frame:0000000000006AC4                 db    1
.eh_frame:0000000000006AC5                 db  0Ah
.eh_frame:0000000000006AC6                 db  0Eh
.eh_frame:0000000000006AC7                 db  30h ; 0
.eh_frame:0000000000006AC8                 db  41h ; A
.eh_frame:0000000000006AC9                 db  0Eh
.eh_frame:0000000000006ACA                 db  28h ; (
.eh_frame:0000000000006ACB                 db  41h ; A
.eh_frame:0000000000006ACC                 db  0Eh
.eh_frame:0000000000006ACD                 db  20h
.eh_frame:0000000000006ACE                 db  42h ; B
.eh_frame:0000000000006ACF                 db  0Eh
.eh_frame:0000000000006AD0                 db  18h
.eh_frame:0000000000006AD1                 db  42h ; B
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  10h
.eh_frame:0000000000006AD4                 db  42h ; B
.eh_frame:0000000000006AD5                 db  0Eh
.eh_frame:0000000000006AD6                 db    8
.eh_frame:0000000000006AD7                 db  43h ; C
.eh_frame:0000000000006AD8                 db  0Bh
.eh_frame:0000000000006AD9                 db    0
.eh_frame:0000000000006ADA                 db    0
.eh_frame:0000000000006ADB                 db    0
.eh_frame:0000000000006ADC                 db    0
.eh_frame:0000000000006ADD                 db    0
.eh_frame:0000000000006ADE                 db    0
.eh_frame:0000000000006ADF                 db    0
.eh_frame:0000000000006AE0                 db  1Ch
.eh_frame:0000000000006AE1                 db    0
.eh_frame:0000000000006AE2                 db    0
.eh_frame:0000000000006AE3                 db    0
.eh_frame:0000000000006AE4                 db  74h ; t
.eh_frame:0000000000006AE5                 db    3
.eh_frame:0000000000006AE6                 db    0
.eh_frame:0000000000006AE7                 db    0
.eh_frame:0000000000006AE8                 db 0E8h
.eh_frame:0000000000006AE9                 db 0BFh
.eh_frame:0000000000006AEA                 db 0FFh
.eh_frame:0000000000006AEB                 db 0FFh
.eh_frame:0000000000006AEC                 db  9Fh
.eh_frame:0000000000006AED                 db    0
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db    0
.eh_frame:0000000000006AF1                 db  44h ; D
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db  10h
.eh_frame:0000000000006AF4                 db  83h
.eh_frame:0000000000006AF5                 db    2
.eh_frame:0000000000006AF6                 db    2
.eh_frame:0000000000006AF7                 db  78h ; x
.eh_frame:0000000000006AF8                 db  0Ah
.eh_frame:0000000000006AF9                 db  0Eh
.eh_frame:0000000000006AFA                 db    8
.eh_frame:0000000000006AFB                 db  41h ; A
.eh_frame:0000000000006AFC                 db  0Bh
.eh_frame:0000000000006AFD                 db    0
.eh_frame:0000000000006AFE                 db    0
.eh_frame:0000000000006AFF                 db    0
.eh_frame:0000000000006B00                 db  40h ; @
.eh_frame:0000000000006B01                 db    0
.eh_frame:0000000000006B02                 db    0
.eh_frame:0000000000006B03                 db    0
.eh_frame:0000000000006B04                 db  94h
.eh_frame:0000000000006B05                 db    3
.eh_frame:0000000000006B06                 db    0
.eh_frame:0000000000006B07                 db    0
.eh_frame:0000000000006B08                 db  68h ; h
.eh_frame:0000000000006B09                 db 0C0h
.eh_frame:0000000000006B0A                 db 0FFh
.eh_frame:0000000000006B0B                 db 0FFh
.eh_frame:0000000000006B0C                 db 0E7h
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db    0
.eh_frame:0000000000006B11                 db  41h ; A
.eh_frame:0000000000006B12                 db  0Eh
.eh_frame:0000000000006B13                 db  10h
.eh_frame:0000000000006B14                 db  86h
.eh_frame:0000000000006B15                 db    2
.eh_frame:0000000000006B16                 db  41h ; A
.eh_frame:0000000000006B17                 db  0Eh
.eh_frame:0000000000006B18                 db  18h
.eh_frame:0000000000006B19                 db  83h
.eh_frame:0000000000006B1A                 db    3
.eh_frame:0000000000006B1B                 db  49h ; I
.eh_frame:0000000000006B1C                 db  0Eh
.eh_frame:0000000000006B1D                 db  20h
.eh_frame:0000000000006B1E                 db  6Eh ; n
.eh_frame:0000000000006B1F                 db  0Ah
.eh_frame:0000000000006B20                 db  0Eh
.eh_frame:0000000000006B21                 db  18h
.eh_frame:0000000000006B22                 db  41h ; A
.eh_frame:0000000000006B23                 db  0Eh
.eh_frame:0000000000006B24                 db  10h
.eh_frame:0000000000006B25                 db  41h ; A
.eh_frame:0000000000006B26                 db  0Eh
.eh_frame:0000000000006B27                 db    8
.eh_frame:0000000000006B28                 db  45h ; E
.eh_frame:0000000000006B29                 db  0Bh
.eh_frame:0000000000006B2A                 db    2
.eh_frame:0000000000006B2B                 db  4Ah ; J
.eh_frame:0000000000006B2C                 db  0Ah
.eh_frame:0000000000006B2D                 db  0Eh
.eh_frame:0000000000006B2E                 db  18h
.eh_frame:0000000000006B2F                 db  41h ; A
.eh_frame:0000000000006B30                 db  0Eh
.eh_frame:0000000000006B31                 db  10h
.eh_frame:0000000000006B32                 db  41h ; A
.eh_frame:0000000000006B33                 db  0Eh
.eh_frame:0000000000006B34                 db    8
.eh_frame:0000000000006B35                 db  44h ; D
.eh_frame:0000000000006B36                 db  0Bh
.eh_frame:0000000000006B37                 db    2
.eh_frame:0000000000006B38                 db  54h ; T
.eh_frame:0000000000006B39                 db  0Eh
.eh_frame:0000000000006B3A                 db  18h
.eh_frame:0000000000006B3B                 db  41h ; A
.eh_frame:0000000000006B3C                 db  0Eh
.eh_frame:0000000000006B3D                 db  10h
.eh_frame:0000000000006B3E                 db  41h ; A
.eh_frame:0000000000006B3F                 db  0Eh
.eh_frame:0000000000006B40                 db    8
.eh_frame:0000000000006B41                 db    0
.eh_frame:0000000000006B42                 db    0
.eh_frame:0000000000006B43                 db    0
.eh_frame:0000000000006B44                 db  74h ; t
.eh_frame:0000000000006B45                 db    0
.eh_frame:0000000000006B46                 db    0
.eh_frame:0000000000006B47                 db    0
.eh_frame:0000000000006B48                 db 0D8h
.eh_frame:0000000000006B49                 db    3
.eh_frame:0000000000006B4A                 db    0
.eh_frame:0000000000006B4B                 db    0
.eh_frame:0000000000006B4C                 db  14h
.eh_frame:0000000000006B4D                 db 0C1h
.eh_frame:0000000000006B4E                 db 0FFh
.eh_frame:0000000000006B4F                 db 0FFh
.eh_frame:0000000000006B50                 db  34h ; 4
.eh_frame:0000000000006B51                 db  12h
.eh_frame:0000000000006B52                 db    0
.eh_frame:0000000000006B53                 db    0
.eh_frame:0000000000006B54                 db    0
.eh_frame:0000000000006B55                 db  42h ; B
.eh_frame:0000000000006B56                 db  0Eh
.eh_frame:0000000000006B57                 db  10h
.eh_frame:0000000000006B58                 db  8Fh
.eh_frame:0000000000006B59                 db    2
.eh_frame:0000000000006B5A                 db  42h ; B
.eh_frame:0000000000006B5B                 db  0Eh
.eh_frame:0000000000006B5C                 db  18h
.eh_frame:0000000000006B5D                 db  8Eh
.eh_frame:0000000000006B5E                 db    3
.eh_frame:0000000000006B5F                 db  45h ; E
.eh_frame:0000000000006B60                 db  0Eh
.eh_frame:0000000000006B61                 db  20h
.eh_frame:0000000000006B62                 db  8Dh
.eh_frame:0000000000006B63                 db    4
.eh_frame:0000000000006B64                 db  42h ; B
.eh_frame:0000000000006B65                 db  0Eh
.eh_frame:0000000000006B66                 db  28h ; (
.eh_frame:0000000000006B67                 db  8Ch
.eh_frame:0000000000006B68                 db    5
.eh_frame:0000000000006B69                 db  44h ; D
.eh_frame:0000000000006B6A                 db  0Eh
.eh_frame:0000000000006B6B                 db  30h ; 0
.eh_frame:0000000000006B6C                 db  86h
.eh_frame:0000000000006B6D                 db    6
.eh_frame:0000000000006B6E                 db  41h ; A
.eh_frame:0000000000006B6F                 db  0Eh
.eh_frame:0000000000006B70                 db  38h ; 8
.eh_frame:0000000000006B71                 db  83h
.eh_frame:0000000000006B72                 db    7
.eh_frame:0000000000006B73                 db  53h ; S
.eh_frame:0000000000006B74                 db  0Eh
.eh_frame:0000000000006B75                 db 0F0h
.eh_frame:0000000000006B76                 db    1
.eh_frame:0000000000006B77                 db    3
.eh_frame:0000000000006B78                 db  81h
.eh_frame:0000000000006B79                 db  0Bh
.eh_frame:0000000000006B7A                 db  0Eh
.eh_frame:0000000000006B7B                 db 0F8h
.eh_frame:0000000000006B7C                 db    1
.eh_frame:0000000000006B7D                 db  4Ah ; J
.eh_frame:0000000000006B7E                 db  0Eh
.eh_frame:0000000000006B7F                 db  80h
.eh_frame:0000000000006B80                 db    2
.eh_frame:0000000000006B81                 db  44h ; D
.eh_frame:0000000000006B82                 db  0Eh
.eh_frame:0000000000006B83                 db  88h
.eh_frame:0000000000006B84                 db    2
.eh_frame:0000000000006B85                 db  45h ; E
.eh_frame:0000000000006B86                 db  0Eh
.eh_frame:0000000000006B87                 db  90h
.eh_frame:0000000000006B88                 db    2
.eh_frame:0000000000006B89                 db  5Fh ; _
.eh_frame:0000000000006B8A                 db  0Eh
.eh_frame:0000000000006B8B                 db 0F0h
.eh_frame:0000000000006B8C                 db    1
.eh_frame:0000000000006B8D                 db  64h ; d
.eh_frame:0000000000006B8E                 db  0Ah
.eh_frame:0000000000006B8F                 db  0Eh
.eh_frame:0000000000006B90                 db  38h ; 8
.eh_frame:0000000000006B91                 db  41h ; A
.eh_frame:0000000000006B92                 db  0Eh
.eh_frame:0000000000006B93                 db  30h ; 0
.eh_frame:0000000000006B94                 db  41h ; A
.eh_frame:0000000000006B95                 db  0Eh
.eh_frame:0000000000006B96                 db  28h ; (
.eh_frame:0000000000006B97                 db  42h ; B
.eh_frame:0000000000006B98                 db  0Eh
.eh_frame:0000000000006B99                 db  20h
.eh_frame:0000000000006B9A                 db  42h ; B
.eh_frame:0000000000006B9B                 db  0Eh
.eh_frame:0000000000006B9C                 db  18h
.eh_frame:0000000000006B9D                 db  42h ; B
.eh_frame:0000000000006B9E                 db  0Eh
.eh_frame:0000000000006B9F                 db  10h
.eh_frame:0000000000006BA0                 db  42h ; B
.eh_frame:0000000000006BA1                 db  0Eh
.eh_frame:0000000000006BA2                 db    8
.eh_frame:0000000000006BA3                 db  44h ; D
.eh_frame:0000000000006BA4                 db  0Bh
.eh_frame:0000000000006BA5                 db    3
.eh_frame:0000000000006BA6                 db  99h
.eh_frame:0000000000006BA7                 db    5
.eh_frame:0000000000006BA8                 db  0Eh
.eh_frame:0000000000006BA9                 db 0F8h
.eh_frame:0000000000006BAA                 db    1
.eh_frame:0000000000006BAB                 db  4Dh ; M
.eh_frame:0000000000006BAC                 db  0Eh
.eh_frame:0000000000006BAD                 db  80h
.eh_frame:0000000000006BAE                 db    2
.eh_frame:0000000000006BAF                 db  44h ; D
.eh_frame:0000000000006BB0                 db  0Eh
.eh_frame:0000000000006BB1                 db  88h
.eh_frame:0000000000006BB2                 db    2
.eh_frame:0000000000006BB3                 db  47h ; G
.eh_frame:0000000000006BB4                 db  0Eh
.eh_frame:0000000000006BB5                 db  90h
.eh_frame:0000000000006BB6                 db    2
.eh_frame:0000000000006BB7                 db  5Bh ; [
.eh_frame:0000000000006BB8                 db  0Eh
.eh_frame:0000000000006BB9                 db 0F0h
.eh_frame:0000000000006BBA                 db    1
.eh_frame:0000000000006BBB                 db    0
.eh_frame:0000000000006BBC                 db  68h ; h
.eh_frame:0000000000006BBD                 db    0
.eh_frame:0000000000006BBE                 db    0
.eh_frame:0000000000006BBF                 db    0
.eh_frame:0000000000006BC0                 db  50h ; P
.eh_frame:0000000000006BC1                 db    4
.eh_frame:0000000000006BC2                 db    0
.eh_frame:0000000000006BC3                 db    0
.eh_frame:0000000000006BC4                 db 0DCh
.eh_frame:0000000000006BC5                 db 0D2h
.eh_frame:0000000000006BC6                 db 0FFh
.eh_frame:0000000000006BC7                 db 0FFh
.eh_frame:0000000000006BC8                 db 0ABh
.eh_frame:0000000000006BC9                 db    1
.eh_frame:0000000000006BCA                 db    0
.eh_frame:0000000000006BCB                 db    0
.eh_frame:0000000000006BCC                 db    0
.eh_frame:0000000000006BCD                 db  42h ; B
.eh_frame:0000000000006BCE                 db  0Eh
.eh_frame:0000000000006BCF                 db  10h
.eh_frame:0000000000006BD0                 db  8Fh
.eh_frame:0000000000006BD1                 db    2
.eh_frame:0000000000006BD2                 db  42h ; B
.eh_frame:0000000000006BD3                 db  0Eh
.eh_frame:0000000000006BD4                 db  18h
.eh_frame:0000000000006BD5                 db  8Eh
.eh_frame:0000000000006BD6                 db    3
.eh_frame:0000000000006BD7                 db  45h ; E
.eh_frame:0000000000006BD8                 db  0Eh
.eh_frame:0000000000006BD9                 db  20h
.eh_frame:0000000000006BDA                 db  8Dh
.eh_frame:0000000000006BDB                 db    4
.eh_frame:0000000000006BDC                 db  42h ; B
.eh_frame:0000000000006BDD                 db  0Eh
.eh_frame:0000000000006BDE                 db  28h ; (
.eh_frame:0000000000006BDF                 db  8Ch
.eh_frame:0000000000006BE0                 db    5
.eh_frame:0000000000006BE1                 db  44h ; D
.eh_frame:0000000000006BE2                 db  0Eh
.eh_frame:0000000000006BE3                 db  30h ; 0
.eh_frame:0000000000006BE4                 db  86h
.eh_frame:0000000000006BE5                 db    6
.eh_frame:0000000000006BE6                 db  41h ; A
.eh_frame:0000000000006BE7                 db  0Eh
.eh_frame:0000000000006BE8                 db  38h ; 8
.eh_frame:0000000000006BE9                 db  83h
.eh_frame:0000000000006BEA                 db    7
.eh_frame:0000000000006BEB                 db  47h ; G
.eh_frame:0000000000006BEC                 db  0Eh
.eh_frame:0000000000006BED                 db  60h ; `
.eh_frame:0000000000006BEE                 db    2
.eh_frame:0000000000006BEF                 db  99h
.eh_frame:0000000000006BF0                 db  0Eh
.eh_frame:0000000000006BF1                 db  68h ; h
.eh_frame:0000000000006BF2                 db  5Fh ; _
.eh_frame:0000000000006BF3                 db  0Eh
.eh_frame:0000000000006BF4                 db  70h ; p
.eh_frame:0000000000006BF5                 db  46h ; F
.eh_frame:0000000000006BF6                 db  0Eh
.eh_frame:0000000000006BF7                 db  78h ; x
.eh_frame:0000000000006BF8                 db  42h ; B
.eh_frame:0000000000006BF9                 db  0Eh
.eh_frame:0000000000006BFA                 db  80h
.eh_frame:0000000000006BFB                 db    1
.eh_frame:0000000000006BFC                 db  59h ; Y
.eh_frame:0000000000006BFD                 db  0Eh
.eh_frame:0000000000006BFE                 db  60h ; `
.eh_frame:0000000000006BFF                 db    2
.eh_frame:0000000000006C00                 db  40h ; @
.eh_frame:0000000000006C01                 db  0Eh
.eh_frame:0000000000006C02                 db  68h ; h
.eh_frame:0000000000006C03                 db  4Bh ; K
.eh_frame:0000000000006C04                 db  0Eh
.eh_frame:0000000000006C05                 db  70h ; p
.eh_frame:0000000000006C06                 db  43h ; C
.eh_frame:0000000000006C07                 db  0Eh
.eh_frame:0000000000006C08                 db  78h ; x
.eh_frame:0000000000006C09                 db  45h ; E
.eh_frame:0000000000006C0A                 db  0Eh
.eh_frame:0000000000006C0B                 db  80h
.eh_frame:0000000000006C0C                 db    1
.eh_frame:0000000000006C0D                 db  5Eh ; ^
.eh_frame:0000000000006C0E                 db  0Eh
.eh_frame:0000000000006C0F                 db  60h ; `
.eh_frame:0000000000006C10                 db  4Ch ; L
.eh_frame:0000000000006C11                 db  0Ah
.eh_frame:0000000000006C12                 db  0Eh
.eh_frame:0000000000006C13                 db  38h ; 8
.eh_frame:0000000000006C14                 db  44h ; D
.eh_frame:0000000000006C15                 db  0Eh
.eh_frame:0000000000006C16                 db  30h ; 0
.eh_frame:0000000000006C17                 db  41h ; A
.eh_frame:0000000000006C18                 db  0Eh
.eh_frame:0000000000006C19                 db  28h ; (
.eh_frame:0000000000006C1A                 db  42h ; B
.eh_frame:0000000000006C1B                 db  0Eh
.eh_frame:0000000000006C1C                 db  20h
.eh_frame:0000000000006C1D                 db  42h ; B
.eh_frame:0000000000006C1E                 db  0Eh
.eh_frame:0000000000006C1F                 db  18h
.eh_frame:0000000000006C20                 db  42h ; B
.eh_frame:0000000000006C21                 db  0Eh
.eh_frame:0000000000006C22                 db  10h
.eh_frame:0000000000006C23                 db  42h ; B
.eh_frame:0000000000006C24                 db  0Eh
.eh_frame:0000000000006C25                 db    8
.eh_frame:0000000000006C26                 db  46h ; F
.eh_frame:0000000000006C27                 db  0Bh
.eh_frame:0000000000006C28                 db  28h ; (
.eh_frame:0000000000006C29                 db    0
.eh_frame:0000000000006C2A                 db    0
.eh_frame:0000000000006C2B                 db    0
.eh_frame:0000000000006C2C                 db 0BCh
.eh_frame:0000000000006C2D                 db    4
.eh_frame:0000000000006C2E                 db    0
.eh_frame:0000000000006C2F                 db    0
.eh_frame:0000000000006C30                 db  20h
.eh_frame:0000000000006C31                 db 0D4h
.eh_frame:0000000000006C32                 db 0FFh
.eh_frame:0000000000006C33                 db 0FFh
.eh_frame:0000000000006C34                 db  36h ; 6
.eh_frame:0000000000006C35                 db    0
.eh_frame:0000000000006C36                 db    0
.eh_frame:0000000000006C37                 db    0
.eh_frame:0000000000006C38                 db    0
.eh_frame:0000000000006C39                 db  42h ; B
.eh_frame:0000000000006C3A                 db  0Eh
.eh_frame:0000000000006C3B                 db  10h
.eh_frame:0000000000006C3C                 db  8Ch
.eh_frame:0000000000006C3D                 db    2
.eh_frame:0000000000006C3E                 db  41h ; A
.eh_frame:0000000000006C3F                 db  0Eh
.eh_frame:0000000000006C40                 db  18h
.eh_frame:0000000000006C41                 db  86h
.eh_frame:0000000000006C42                 db    3
.eh_frame:0000000000006C43                 db  41h ; A
.eh_frame:0000000000006C44                 db  0Eh
.eh_frame:0000000000006C45                 db  20h
.eh_frame:0000000000006C46                 db  83h
.eh_frame:0000000000006C47                 db    4
.eh_frame:0000000000006C48                 db  6Eh ; n
.eh_frame:0000000000006C49                 db  0Eh
.eh_frame:0000000000006C4A                 db  18h
.eh_frame:0000000000006C4B                 db  41h ; A
.eh_frame:0000000000006C4C                 db  0Eh
.eh_frame:0000000000006C4D                 db  10h
.eh_frame:0000000000006C4E                 db  42h ; B
.eh_frame:0000000000006C4F                 db  0Eh
.eh_frame:0000000000006C50                 db    8
.eh_frame:0000000000006C51                 db    0
.eh_frame:0000000000006C52                 db    0
.eh_frame:0000000000006C53                 db    0
.eh_frame:0000000000006C54                 db  10h
.eh_frame:0000000000006C55                 db    0
.eh_frame:0000000000006C56                 db    0
.eh_frame:0000000000006C57                 db    0
.eh_frame:0000000000006C58                 db 0E8h
.eh_frame:0000000000006C59                 db    4
.eh_frame:0000000000006C5A                 db    0
.eh_frame:0000000000006C5B                 db    0
.eh_frame:0000000000006C5C                 db  34h ; 4
.eh_frame:0000000000006C5D                 db 0D4h
.eh_frame:0000000000006C5E                 db 0FFh
.eh_frame:0000000000006C5F                 db 0FFh
.eh_frame:0000000000006C60                 db  11h
.eh_frame:0000000000006C61                 db    0
.eh_frame:0000000000006C62                 db    0
.eh_frame:0000000000006C63                 db    0
.eh_frame:0000000000006C64                 db    0
.eh_frame:0000000000006C65                 db    0
.eh_frame:0000000000006C66                 db    0
.eh_frame:0000000000006C67                 db    0
.eh_frame:0000000000006C68                 db  10h
.eh_frame:0000000000006C69                 db    0
.eh_frame:0000000000006C6A                 db    0
.eh_frame:0000000000006C6B                 db    0
.eh_frame:0000000000006C6C                 db 0FCh
.eh_frame:0000000000006C6D                 db    4
.eh_frame:0000000000006C6E                 db    0
.eh_frame:0000000000006C6F                 db    0
.eh_frame:0000000000006C70                 db  40h ; @
.eh_frame:0000000000006C71                 db 0D4h
.eh_frame:0000000000006C72                 db 0FFh
.eh_frame:0000000000006C73                 db 0FFh
.eh_frame:0000000000006C74                 db  11h
.eh_frame:0000000000006C75                 db    0
.eh_frame:0000000000006C76                 db    0
.eh_frame:0000000000006C77                 db    0
.eh_frame:0000000000006C78                 db    0
.eh_frame:0000000000006C79                 db    0
.eh_frame:0000000000006C7A                 db    0
.eh_frame:0000000000006C7B                 db    0
.eh_frame:0000000000006C7C                 db  10h
.eh_frame:0000000000006C7D                 db    0
.eh_frame:0000000000006C7E                 db    0
.eh_frame:0000000000006C7F                 db    0
.eh_frame:0000000000006C80                 db  10h
.eh_frame:0000000000006C81                 db    5
.eh_frame:0000000000006C82                 db    0
.eh_frame:0000000000006C83                 db    0
.eh_frame:0000000000006C84                 db  4Ch ; L
.eh_frame:0000000000006C85                 db 0D4h
.eh_frame:0000000000006C86                 db 0FFh
.eh_frame:0000000000006C87                 db 0FFh
.eh_frame:0000000000006C88                 db  35h ; 5
.eh_frame:0000000000006C89                 db    0
.eh_frame:0000000000006C8A                 db    0
.eh_frame:0000000000006C8B                 db    0
.eh_frame:0000000000006C8C                 db    0
.eh_frame:0000000000006C8D                 db    0
.eh_frame:0000000000006C8E                 db    0
.eh_frame:0000000000006C8F                 db    0
.eh_frame:0000000000006C90                 db  10h
.eh_frame:0000000000006C91                 db    0
.eh_frame:0000000000006C92                 db    0
.eh_frame:0000000000006C93                 db    0
.eh_frame:0000000000006C94                 db  24h ; $
.eh_frame:0000000000006C95                 db    5
.eh_frame:0000000000006C96                 db    0
.eh_frame:0000000000006C97                 db    0
.eh_frame:0000000000006C98                 db  78h ; x
.eh_frame:0000000000006C99                 db 0D4h
.eh_frame:0000000000006C9A                 db 0FFh
.eh_frame:0000000000006C9B                 db 0FFh
.eh_frame:0000000000006C9C                 db  15h
.eh_frame:0000000000006C9D                 db    0
.eh_frame:0000000000006C9E                 db    0
.eh_frame:0000000000006C9F                 db    0
.eh_frame:0000000000006CA0                 db    0
.eh_frame:0000000000006CA1                 db    0
.eh_frame:0000000000006CA2                 db    0
.eh_frame:0000000000006CA3                 db    0
.eh_frame:0000000000006CA4                 db  10h
.eh_frame:0000000000006CA5                 db    0
.eh_frame:0000000000006CA6                 db    0
.eh_frame:0000000000006CA7                 db    0
.eh_frame:0000000000006CA8                 db  38h ; 8
.eh_frame:0000000000006CA9                 db    5
.eh_frame:0000000000006CAA                 db    0
.eh_frame:0000000000006CAB                 db    0
.eh_frame:0000000000006CAC                 db  84h
.eh_frame:0000000000006CAD                 db 0D4h
.eh_frame:0000000000006CAE                 db 0FFh
.eh_frame:0000000000006CAF                 db 0FFh
.eh_frame:0000000000006CB0                 db  30h ; 0
.eh_frame:0000000000006CB1                 db    0
.eh_frame:0000000000006CB2                 db    0
.eh_frame:0000000000006CB3                 db    0
.eh_frame:0000000000006CB4                 db    0
.eh_frame:0000000000006CB5                 db  6Bh ; k
.eh_frame:0000000000006CB6                 db  0Eh
.eh_frame:0000000000006CB7                 db  10h
.eh_frame:0000000000006CB8                 db  50h ; P
.eh_frame:0000000000006CB9                 db    0
.eh_frame:0000000000006CBA                 db    0
.eh_frame:0000000000006CBB                 db    0
.eh_frame:0000000000006CBC                 db  4Ch ; L
.eh_frame:0000000000006CBD                 db    5
.eh_frame:0000000000006CBE                 db    0
.eh_frame:0000000000006CBF                 db    0
.eh_frame:0000000000006CC0                 db 0A0h
.eh_frame:0000000000006CC1                 db 0D4h
.eh_frame:0000000000006CC2                 db 0FFh
.eh_frame:0000000000006CC3                 db 0FFh
.eh_frame:0000000000006CC4                 db  74h ; t
.eh_frame:0000000000006CC5                 db    0
.eh_frame:0000000000006CC6                 db    0
.eh_frame:0000000000006CC7                 db    0
.eh_frame:0000000000006CC8                 db    0
.eh_frame:0000000000006CC9                 db  42h ; B
.eh_frame:0000000000006CCA                 db  0Eh
.eh_frame:0000000000006CCB                 db  10h
.eh_frame:0000000000006CCC                 db  8Fh
.eh_frame:0000000000006CCD                 db    2
.eh_frame:0000000000006CCE                 db  42h ; B
.eh_frame:0000000000006CCF                 db  0Eh
.eh_frame:0000000000006CD0                 db  18h
.eh_frame:0000000000006CD1                 db  8Eh
.eh_frame:0000000000006CD2                 db    3
.eh_frame:0000000000006CD3                 db  49h ; I
.eh_frame:0000000000006CD4                 db  0Eh
.eh_frame:0000000000006CD5                 db  20h
.eh_frame:0000000000006CD6                 db  8Dh
.eh_frame:0000000000006CD7                 db    4
.eh_frame:0000000000006CD8                 db  42h ; B
.eh_frame:0000000000006CD9                 db  0Eh
.eh_frame:0000000000006CDA                 db  28h ; (
.eh_frame:0000000000006CDB                 db  8Ch
.eh_frame:0000000000006CDC                 db    5
.eh_frame:0000000000006CDD                 db  44h ; D
.eh_frame:0000000000006CDE                 db  0Eh
.eh_frame:0000000000006CDF                 db  30h ; 0
.eh_frame:0000000000006CE0                 db  86h
.eh_frame:0000000000006CE1                 db    6
.eh_frame:0000000000006CE2                 db  41h ; A
.eh_frame:0000000000006CE3                 db  0Eh
.eh_frame:0000000000006CE4                 db  38h ; 8
.eh_frame:0000000000006CE5                 db  83h
.eh_frame:0000000000006CE6                 db    7
.eh_frame:0000000000006CE7                 db  4Dh ; M
.eh_frame:0000000000006CE8                 db  0Eh
.eh_frame:0000000000006CE9                 db  50h ; P
.eh_frame:0000000000006CEA                 db  5Fh ; _
.eh_frame:0000000000006CEB                 db  0Eh
.eh_frame:0000000000006CEC                 db  58h ; X
.eh_frame:0000000000006CED                 db  47h ; G
.eh_frame:0000000000006CEE                 db  0Eh
.eh_frame:0000000000006CEF                 db  60h ; `
.eh_frame:0000000000006CF0                 db  46h ; F
.eh_frame:0000000000006CF1                 db  0Eh
.eh_frame:0000000000006CF2                 db  68h ; h
.eh_frame:0000000000006CF3                 db  44h ; D
.eh_frame:0000000000006CF4                 db  0Eh
.eh_frame:0000000000006CF5                 db  70h ; p
.eh_frame:0000000000006CF6                 db  58h ; X
.eh_frame:0000000000006CF7                 db  0Eh
.eh_frame:0000000000006CF8                 db  38h ; 8
.eh_frame:0000000000006CF9                 db  41h ; A
.eh_frame:0000000000006CFA                 db  0Eh
.eh_frame:0000000000006CFB                 db  30h ; 0
.eh_frame:0000000000006CFC                 db  41h ; A
.eh_frame:0000000000006CFD                 db  0Eh
.eh_frame:0000000000006CFE                 db  28h ; (
.eh_frame:0000000000006CFF                 db  42h ; B
.eh_frame:0000000000006D00                 db  0Eh
.eh_frame:0000000000006D01                 db  20h
.eh_frame:0000000000006D02                 db  42h ; B
.eh_frame:0000000000006D03                 db  0Eh
.eh_frame:0000000000006D04                 db  18h
.eh_frame:0000000000006D05                 db  42h ; B
.eh_frame:0000000000006D06                 db  0Eh
.eh_frame:0000000000006D07                 db  10h
.eh_frame:0000000000006D08                 db  42h ; B
.eh_frame:0000000000006D09                 db  0Eh
.eh_frame:0000000000006D0A                 db    8
.eh_frame:0000000000006D0B                 db    0
.eh_frame:0000000000006D0C                 db  68h ; h
.eh_frame:0000000000006D0D                 db    0
.eh_frame:0000000000006D0E                 db    0
.eh_frame:0000000000006D0F                 db    0
.eh_frame:0000000000006D10                 db 0A0h
.eh_frame:0000000000006D11                 db    5
.eh_frame:0000000000006D12                 db    0
.eh_frame:0000000000006D13                 db    0
.eh_frame:0000000000006D14                 db 0CCh
.eh_frame:0000000000006D15                 db 0D4h
.eh_frame:0000000000006D16                 db 0FFh
.eh_frame:0000000000006D17                 db 0FFh
.eh_frame:0000000000006D18                 db 0E3h
.eh_frame:0000000000006D19                 db    0
.eh_frame:0000000000006D1A                 db    0
.eh_frame:0000000000006D1B                 db    0
.eh_frame:0000000000006D1C                 db    0
.eh_frame:0000000000006D1D                 db  42h ; B
.eh_frame:0000000000006D1E                 db  0Eh
.eh_frame:0000000000006D1F                 db  10h
.eh_frame:0000000000006D20                 db  8Fh
.eh_frame:0000000000006D21                 db    2
.eh_frame:0000000000006D22                 db  42h ; B
.eh_frame:0000000000006D23                 db  0Eh
.eh_frame:0000000000006D24                 db  18h
.eh_frame:0000000000006D25                 db  8Eh
.eh_frame:0000000000006D26                 db    3
.eh_frame:0000000000006D27                 db  49h ; I
.eh_frame:0000000000006D28                 db  0Eh
.eh_frame:0000000000006D29                 db  20h
.eh_frame:0000000000006D2A                 db  8Dh
.eh_frame:0000000000006D2B                 db    4
.eh_frame:0000000000006D2C                 db  42h ; B
.eh_frame:0000000000006D2D                 db  0Eh
.eh_frame:0000000000006D2E                 db  28h ; (
.eh_frame:0000000000006D2F                 db  8Ch
.eh_frame:0000000000006D30                 db    5
.eh_frame:0000000000006D31                 db  44h ; D
.eh_frame:0000000000006D32                 db  0Eh
.eh_frame:0000000000006D33                 db  30h ; 0
.eh_frame:0000000000006D34                 db  86h
.eh_frame:0000000000006D35                 db    6
.eh_frame:0000000000006D36                 db  41h ; A
.eh_frame:0000000000006D37                 db  0Eh
.eh_frame:0000000000006D38                 db  38h ; 8
.eh_frame:0000000000006D39                 db  83h
.eh_frame:0000000000006D3A                 db    7
.eh_frame:0000000000006D3B                 db  4Dh ; M
.eh_frame:0000000000006D3C                 db  0Eh
.eh_frame:0000000000006D3D                 db  70h ; p
.eh_frame:0000000000006D3E                 db  65h ; e
.eh_frame:0000000000006D3F                 db  0Eh
.eh_frame:0000000000006D40                 db  78h ; x
.eh_frame:0000000000006D41                 db  4Dh ; M
.eh_frame:0000000000006D42                 db  0Eh
.eh_frame:0000000000006D43                 db  80h
.eh_frame:0000000000006D44                 db    1
.eh_frame:0000000000006D45                 db  46h ; F
.eh_frame:0000000000006D46                 db  0Eh
.eh_frame:0000000000006D47                 db  88h
.eh_frame:0000000000006D48                 db    1
.eh_frame:0000000000006D49                 db  42h ; B
.eh_frame:0000000000006D4A                 db  0Eh
.eh_frame:0000000000006D4B                 db  90h
.eh_frame:0000000000006D4C                 db    1
.eh_frame:0000000000006D4D                 db  5Eh ; ^
.eh_frame:0000000000006D4E                 db  0Eh
.eh_frame:0000000000006D4F                 db  70h ; p
.eh_frame:0000000000006D50                 db  56h ; V
.eh_frame:0000000000006D51                 db  0Eh
.eh_frame:0000000000006D52                 db  78h ; x
.eh_frame:0000000000006D53                 db  43h ; C
.eh_frame:0000000000006D54                 db  0Eh
.eh_frame:0000000000006D55                 db  80h
.eh_frame:0000000000006D56                 db    1
.eh_frame:0000000000006D57                 db  43h ; C
.eh_frame:0000000000006D58                 db  0Eh
.eh_frame:0000000000006D59                 db  88h
.eh_frame:0000000000006D5A                 db    1
.eh_frame:0000000000006D5B                 db  56h ; V
.eh_frame:0000000000006D5C                 db  0Eh
.eh_frame:0000000000006D5D                 db  90h
.eh_frame:0000000000006D5E                 db    1
.eh_frame:0000000000006D5F                 db  52h ; R
.eh_frame:0000000000006D60                 db  0Eh
.eh_frame:0000000000006D61                 db  70h ; p
.eh_frame:0000000000006D62                 db  5Bh ; [
.eh_frame:0000000000006D63                 db  0Eh
.eh_frame:0000000000006D64                 db  38h ; 8
.eh_frame:0000000000006D65                 db  41h ; A
.eh_frame:0000000000006D66                 db  0Eh
.eh_frame:0000000000006D67                 db  30h ; 0
.eh_frame:0000000000006D68                 db  41h ; A
.eh_frame:0000000000006D69                 db  0Eh
.eh_frame:0000000000006D6A                 db  28h ; (
.eh_frame:0000000000006D6B                 db  42h ; B
.eh_frame:0000000000006D6C                 db  0Eh
.eh_frame:0000000000006D6D                 db  20h
.eh_frame:0000000000006D6E                 db  42h ; B
.eh_frame:0000000000006D6F                 db  0Eh
.eh_frame:0000000000006D70                 db  18h
.eh_frame:0000000000006D71                 db  42h ; B
.eh_frame:0000000000006D72                 db  0Eh
.eh_frame:0000000000006D73                 db  10h
.eh_frame:0000000000006D74                 db  42h ; B
.eh_frame:0000000000006D75                 db  0Eh
.eh_frame:0000000000006D76                 db    8
.eh_frame:0000000000006D77                 db    0
.eh_frame:0000000000006D78                 db  10h
.eh_frame:0000000000006D79                 db    0
.eh_frame:0000000000006D7A                 db    0
.eh_frame:0000000000006D7B                 db    0
.eh_frame:0000000000006D7C                 db  0Ch
.eh_frame:0000000000006D7D                 db    6
.eh_frame:0000000000006D7E                 db    0
.eh_frame:0000000000006D7F                 db    0
.eh_frame:0000000000006D80                 db  50h ; P
.eh_frame:0000000000006D81                 db 0D5h
.eh_frame:0000000000006D82                 db 0FFh
.eh_frame:0000000000006D83                 db 0FFh
.eh_frame:0000000000006D84                 db  0Ah
.eh_frame:0000000000006D85                 db    0
.eh_frame:0000000000006D86                 db    0
.eh_frame:0000000000006D87                 db    0
.eh_frame:0000000000006D88                 db    0
.eh_frame:0000000000006D89                 db    0
.eh_frame:0000000000006D8A                 db    0
.eh_frame:0000000000006D8B                 db    0
.eh_frame:0000000000006D8C                 db  28h ; (
.eh_frame:0000000000006D8D                 db    0
.eh_frame:0000000000006D8E                 db    0
.eh_frame:0000000000006D8F                 db    0
.eh_frame:0000000000006D90                 db  20h
.eh_frame:0000000000006D91                 db    6
.eh_frame:0000000000006D92                 db    0
.eh_frame:0000000000006D93                 db    0
.eh_frame:0000000000006D94                 db  4Ch ; L
.eh_frame:0000000000006D95                 db 0D5h
.eh_frame:0000000000006D96                 db 0FFh
.eh_frame:0000000000006D97                 db 0FFh
.eh_frame:0000000000006D98                 db  93h
.eh_frame:0000000000006D99                 db    0
.eh_frame:0000000000006D9A                 db    0
.eh_frame:0000000000006D9B                 db    0
.eh_frame:0000000000006D9C                 db    0
.eh_frame:0000000000006D9D                 db  48h ; H
.eh_frame:0000000000006D9E                 db  0Eh
.eh_frame:0000000000006D9F                 db  10h
.eh_frame:0000000000006DA0                 db  8Ch
.eh_frame:0000000000006DA1                 db    2
.eh_frame:0000000000006DA2                 db  48h ; H
.eh_frame:0000000000006DA3                 db  0Eh
.eh_frame:0000000000006DA4                 db  18h
.eh_frame:0000000000006DA5                 db  86h
.eh_frame:0000000000006DA6                 db    3
.eh_frame:0000000000006DA7                 db  41h ; A
.eh_frame:0000000000006DA8                 db  0Eh
.eh_frame:0000000000006DA9                 db  20h
.eh_frame:0000000000006DAA                 db  83h
.eh_frame:0000000000006DAB                 db    4
.eh_frame:0000000000006DAC                 db    2
.eh_frame:0000000000006DAD                 db  74h ; t
.eh_frame:0000000000006DAE                 db  0Eh
.eh_frame:0000000000006DAF                 db  18h
.eh_frame:0000000000006DB0                 db  4Bh ; K
.eh_frame:0000000000006DB1                 db  0Eh
.eh_frame:0000000000006DB2                 db  10h
.eh_frame:0000000000006DB3                 db  42h ; B
.eh_frame:0000000000006DB4                 db  0Eh
.eh_frame:0000000000006DB5                 db    8
.eh_frame:0000000000006DB6                 db    0
.eh_frame:0000000000006DB7                 db    0
.eh_frame:0000000000006DB8                 db  10h
.eh_frame:0000000000006DB9                 db    0
.eh_frame:0000000000006DBA                 db    0
.eh_frame:0000000000006DBB                 db    0
.eh_frame:0000000000006DBC                 db  4Ch ; L
.eh_frame:0000000000006DBD                 db    6
.eh_frame:0000000000006DBE                 db    0
.eh_frame:0000000000006DBF                 db    0
.eh_frame:0000000000006DC0                 db 0C0h
.eh_frame:0000000000006DC1                 db 0D5h
.eh_frame:0000000000006DC2                 db 0FFh
.eh_frame:0000000000006DC3                 db 0FFh
.eh_frame:0000000000006DC4                 db  13h
.eh_frame:0000000000006DC5                 db    0
.eh_frame:0000000000006DC6                 db    0
.eh_frame:0000000000006DC7                 db    0
.eh_frame:0000000000006DC8                 db    0
.eh_frame:0000000000006DC9                 db    0
.eh_frame:0000000000006DCA                 db    0
.eh_frame:0000000000006DCB                 db    0
.eh_frame:0000000000006DCC                 db  10h
.eh_frame:0000000000006DCD                 db    0
.eh_frame:0000000000006DCE                 db    0
.eh_frame:0000000000006DCF                 db    0
.eh_frame:0000000000006DD0                 db  60h ; `
.eh_frame:0000000000006DD1                 db    6
.eh_frame:0000000000006DD2                 db    0
.eh_frame:0000000000006DD3                 db    0
.eh_frame:0000000000006DD4                 db 0CCh
.eh_frame:0000000000006DD5                 db 0D5h
.eh_frame:0000000000006DD6                 db 0FFh
.eh_frame:0000000000006DD7                 db 0FFh
.eh_frame:0000000000006DD8                 db  0Ch
.eh_frame:0000000000006DD9                 db    0
.eh_frame:0000000000006DDA                 db    0
.eh_frame:0000000000006DDB                 db    0
.eh_frame:0000000000006DDC                 db    0
.eh_frame:0000000000006DDD                 db    0
.eh_frame:0000000000006DDE                 db    0
.eh_frame:0000000000006DDF                 db    0
.eh_frame:0000000000006DE0                 db  10h
.eh_frame:0000000000006DE1                 db    0
.eh_frame:0000000000006DE2                 db    0
.eh_frame:0000000000006DE3                 db    0
.eh_frame:0000000000006DE4                 db  74h ; t
.eh_frame:0000000000006DE5                 db    6
.eh_frame:0000000000006DE6                 db    0
.eh_frame:0000000000006DE7                 db    0
.eh_frame:0000000000006DE8                 db 0C8h
.eh_frame:0000000000006DE9                 db 0D5h
.eh_frame:0000000000006DEA                 db 0FFh
.eh_frame:0000000000006DEB                 db 0FFh
.eh_frame:0000000000006DEC                 db  18h
.eh_frame:0000000000006DED                 db    0
.eh_frame:0000000000006DEE                 db    0
.eh_frame:0000000000006DEF                 db    0
.eh_frame:0000000000006DF0                 db    0
.eh_frame:0000000000006DF1                 db    0
.eh_frame:0000000000006DF2                 db    0
.eh_frame:0000000000006DF3                 db    0
.eh_frame:0000000000006DF4                 db  10h
.eh_frame:0000000000006DF5                 db    0
.eh_frame:0000000000006DF6                 db    0
.eh_frame:0000000000006DF7                 db    0
.eh_frame:0000000000006DF8                 db  88h
.eh_frame:0000000000006DF9                 db    6
.eh_frame:0000000000006DFA                 db    0
.eh_frame:0000000000006DFB                 db    0
.eh_frame:0000000000006DFC                 db 0D4h
.eh_frame:0000000000006DFD                 db 0D5h
.eh_frame:0000000000006DFE                 db 0FFh
.eh_frame:0000000000006DFF                 db 0FFh
.eh_frame:0000000000006E00                 db  14h
.eh_frame:0000000000006E01                 db    0
.eh_frame:0000000000006E02                 db    0
.eh_frame:0000000000006E03                 db    0
.eh_frame:0000000000006E04                 db    0
.eh_frame:0000000000006E05                 db    0
.eh_frame:0000000000006E06                 db    0
.eh_frame:0000000000006E07                 db    0
.eh_frame:0000000000006E08                 db  18h
.eh_frame:0000000000006E09                 db    0
.eh_frame:0000000000006E0A                 db    0
.eh_frame:0000000000006E0B                 db    0
.eh_frame:0000000000006E0C                 db  9Ch
.eh_frame:0000000000006E0D                 db    6
.eh_frame:0000000000006E0E                 db    0
.eh_frame:0000000000006E0F                 db    0
.eh_frame:0000000000006E10                 db 0E0h
.eh_frame:0000000000006E11                 db 0D5h
.eh_frame:0000000000006E12                 db 0FFh
.eh_frame:0000000000006E13                 db 0FFh
.eh_frame:0000000000006E14                 db  8Eh
.eh_frame:0000000000006E15                 db    0
.eh_frame:0000000000006E16                 db    0
.eh_frame:0000000000006E17                 db    0
.eh_frame:0000000000006E18                 db    0
.eh_frame:0000000000006E19                 db  44h ; D
.eh_frame:0000000000006E1A                 db  0Eh
.eh_frame:0000000000006E1B                 db  50h ; P
.eh_frame:0000000000006E1C                 db    2
.eh_frame:0000000000006E1D                 db  7Fh ; 
.eh_frame:0000000000006E1E                 db  0Ah
.eh_frame:0000000000006E1F                 db  0Eh
.eh_frame:0000000000006E20                 db    8
.eh_frame:0000000000006E21                 db  41h ; A
.eh_frame:0000000000006E22                 db  0Bh
.eh_frame:0000000000006E23                 db    0
.eh_frame:0000000000006E24                 db  18h
.eh_frame:0000000000006E25                 db    0
.eh_frame:0000000000006E26                 db    0
.eh_frame:0000000000006E27                 db    0
.eh_frame:0000000000006E28                 db 0B8h
.eh_frame:0000000000006E29                 db    6
.eh_frame:0000000000006E2A                 db    0
.eh_frame:0000000000006E2B                 db    0
.eh_frame:0000000000006E2C                 db  54h ; T
.eh_frame:0000000000006E2D                 db 0D6h
.eh_frame:0000000000006E2E                 db 0FFh
.eh_frame:0000000000006E2F                 db 0FFh
.eh_frame:0000000000006E30                 db  8Ah
.eh_frame:0000000000006E31                 db    0
.eh_frame:0000000000006E32                 db    0
.eh_frame:0000000000006E33                 db    0
.eh_frame:0000000000006E34                 db    0
.eh_frame:0000000000006E35                 db  44h ; D
.eh_frame:0000000000006E36                 db  0Eh
.eh_frame:0000000000006E37                 db  50h ; P
.eh_frame:0000000000006E38                 db    2
.eh_frame:0000000000006E39                 db  7Bh ; {
.eh_frame:0000000000006E3A                 db  0Ah
.eh_frame:0000000000006E3B                 db  0Eh
.eh_frame:0000000000006E3C                 db    8
.eh_frame:0000000000006E3D                 db  41h ; A
.eh_frame:0000000000006E3E                 db  0Bh
.eh_frame:0000000000006E3F                 db    0
.eh_frame:0000000000006E40                 db  10h
.eh_frame:0000000000006E41                 db    0
.eh_frame:0000000000006E42                 db    0
.eh_frame:0000000000006E43                 db    0
.eh_frame:0000000000006E44                 db 0D4h
.eh_frame:0000000000006E45                 db    6
.eh_frame:0000000000006E46                 db    0
.eh_frame:0000000000006E47                 db    0
.eh_frame:0000000000006E48                 db 0C8h
.eh_frame:0000000000006E49                 db 0D6h
.eh_frame:0000000000006E4A                 db 0FFh
.eh_frame:0000000000006E4B                 db 0FFh
.eh_frame:0000000000006E4C                 db  0Ch
.eh_frame:0000000000006E4D                 db    0
.eh_frame:0000000000006E4E                 db    0
.eh_frame:0000000000006E4F                 db    0
.eh_frame:0000000000006E50                 db    0
.eh_frame:0000000000006E51                 db    0
.eh_frame:0000000000006E52                 db    0
.eh_frame:0000000000006E53                 db    0
.eh_frame:0000000000006E54                 db  10h
.eh_frame:0000000000006E55                 db    0
.eh_frame:0000000000006E56                 db    0
.eh_frame:0000000000006E57                 db    0
.eh_frame:0000000000006E58                 db 0E8h
.eh_frame:0000000000006E59                 db    6
.eh_frame:0000000000006E5A                 db    0
.eh_frame:0000000000006E5B                 db    0
.eh_frame:0000000000006E5C                 db 0C4h
.eh_frame:0000000000006E5D                 db 0D6h
.eh_frame:0000000000006E5E                 db 0FFh
.eh_frame:0000000000006E5F                 db 0FFh
.eh_frame:0000000000006E60                 db  0Fh
.eh_frame:0000000000006E61                 db    0
.eh_frame:0000000000006E62                 db    0
.eh_frame:0000000000006E63                 db    0
.eh_frame:0000000000006E64                 db    0
.eh_frame:0000000000006E65                 db    0
.eh_frame:0000000000006E66                 db    0
.eh_frame:0000000000006E67                 db    0
.eh_frame:0000000000006E68                 db  18h
.eh_frame:0000000000006E69                 db    0
.eh_frame:0000000000006E6A                 db    0
.eh_frame:0000000000006E6B                 db    0
.eh_frame:0000000000006E6C                 db 0FCh
.eh_frame:0000000000006E6D                 db    6
.eh_frame:0000000000006E6E                 db    0
.eh_frame:0000000000006E6F                 db    0
.eh_frame:0000000000006E70                 db 0C0h
.eh_frame:0000000000006E71                 db 0D6h
.eh_frame:0000000000006E72                 db 0FFh
.eh_frame:0000000000006E73                 db 0FFh
.eh_frame:0000000000006E74                 db  98h
.eh_frame:0000000000006E75                 db    0
.eh_frame:0000000000006E76                 db    0
.eh_frame:0000000000006E77                 db    0
.eh_frame:0000000000006E78                 db    0
.eh_frame:0000000000006E79                 db  44h ; D
.eh_frame:0000000000006E7A                 db  0Eh
.eh_frame:0000000000006E7B                 db  50h ; P
.eh_frame:0000000000006E7C                 db    2
.eh_frame:0000000000006E7D                 db  8Eh
.eh_frame:0000000000006E7E                 db  0Ah
.eh_frame:0000000000006E7F                 db  0Eh
.eh_frame:0000000000006E80                 db    8
.eh_frame:0000000000006E81                 db  41h ; A
.eh_frame:0000000000006E82                 db  0Bh
.eh_frame:0000000000006E83                 db    0
.eh_frame:0000000000006E84                 db  10h
.eh_frame:0000000000006E85                 db    0
.eh_frame:0000000000006E86                 db    0
.eh_frame:0000000000006E87                 db    0
.eh_frame:0000000000006E88                 db  18h
.eh_frame:0000000000006E89                 db    7
.eh_frame:0000000000006E8A                 db    0
.eh_frame:0000000000006E8B                 db    0
.eh_frame:0000000000006E8C                 db  44h ; D
.eh_frame:0000000000006E8D                 db 0D7h
.eh_frame:0000000000006E8E                 db 0FFh
.eh_frame:0000000000006E8F                 db 0FFh
.eh_frame:0000000000006E90                 db  10h
.eh_frame:0000000000006E91                 db    0
.eh_frame:0000000000006E92                 db    0
.eh_frame:0000000000006E93                 db    0
.eh_frame:0000000000006E94                 db    0
.eh_frame:0000000000006E95                 db    0
.eh_frame:0000000000006E96                 db    0
.eh_frame:0000000000006E97                 db    0
.eh_frame:0000000000006E98                 db  10h
.eh_frame:0000000000006E99                 db    0
.eh_frame:0000000000006E9A                 db    0
.eh_frame:0000000000006E9B                 db    0
.eh_frame:0000000000006E9C                 db  2Ch ; ,
.eh_frame:0000000000006E9D                 db    7
.eh_frame:0000000000006E9E                 db    0
.eh_frame:0000000000006E9F                 db    0
.eh_frame:0000000000006EA0                 db  40h ; @
.eh_frame:0000000000006EA1                 db 0D7h
.eh_frame:0000000000006EA2                 db 0FFh
.eh_frame:0000000000006EA3                 db 0FFh
.eh_frame:0000000000006EA4                 db  11h
.eh_frame:0000000000006EA5                 db    0
.eh_frame:0000000000006EA6                 db    0
.eh_frame:0000000000006EA7                 db    0
.eh_frame:0000000000006EA8                 db    0
.eh_frame:0000000000006EA9                 db    0
.eh_frame:0000000000006EAA                 db    0
.eh_frame:0000000000006EAB                 db    0
.eh_frame:0000000000006EAC                 db  10h
.eh_frame:0000000000006EAD                 db    0
.eh_frame:0000000000006EAE                 db    0
.eh_frame:0000000000006EAF                 db    0
.eh_frame:0000000000006EB0                 db  40h ; @
.eh_frame:0000000000006EB1                 db    7
.eh_frame:0000000000006EB2                 db    0
.eh_frame:0000000000006EB3                 db    0
.eh_frame:0000000000006EB4                 db  4Ch ; L
.eh_frame:0000000000006EB5                 db 0D7h
.eh_frame:0000000000006EB6                 db 0FFh
.eh_frame:0000000000006EB7                 db 0FFh
.eh_frame:0000000000006EB8                 db  0Ah
.eh_frame:0000000000006EB9                 db    0
.eh_frame:0000000000006EBA                 db    0
.eh_frame:0000000000006EBB                 db    0
.eh_frame:0000000000006EBC                 db    0
.eh_frame:0000000000006EBD                 db    0
.eh_frame:0000000000006EBE                 db    0
.eh_frame:0000000000006EBF                 db    0
.eh_frame:0000000000006EC0                 db  18h
.eh_frame:0000000000006EC1                 db    0
.eh_frame:0000000000006EC2                 db    0
.eh_frame:0000000000006EC3                 db    0
.eh_frame:0000000000006EC4                 db  54h ; T
.eh_frame:0000000000006EC5                 db    7
.eh_frame:0000000000006EC6                 db    0
.eh_frame:0000000000006EC7                 db    0
.eh_frame:0000000000006EC8                 db  48h ; H
.eh_frame:0000000000006EC9                 db 0D7h
.eh_frame:0000000000006ECA                 db 0FFh
.eh_frame:0000000000006ECB                 db 0FFh
.eh_frame:0000000000006ECC                 db  8Eh
.eh_frame:0000000000006ECD                 db    0
.eh_frame:0000000000006ECE                 db    0
.eh_frame:0000000000006ECF                 db    0
.eh_frame:0000000000006ED0                 db    0
.eh_frame:0000000000006ED1                 db  44h ; D
.eh_frame:0000000000006ED2                 db  0Eh
.eh_frame:0000000000006ED3                 db  50h ; P
.eh_frame:0000000000006ED4                 db    2
.eh_frame:0000000000006ED5                 db  7Fh ; 
.eh_frame:0000000000006ED6                 db  0Ah
.eh_frame:0000000000006ED7                 db  0Eh
.eh_frame:0000000000006ED8                 db    8
.eh_frame:0000000000006ED9                 db  41h ; A
.eh_frame:0000000000006EDA                 db  0Bh
.eh_frame:0000000000006EDB                 db    0
.eh_frame:0000000000006EDC                 db  18h
.eh_frame:0000000000006EDD                 db    0
.eh_frame:0000000000006EDE                 db    0
.eh_frame:0000000000006EDF                 db    0
.eh_frame:0000000000006EE0                 db  70h ; p
.eh_frame:0000000000006EE1                 db    7
.eh_frame:0000000000006EE2                 db    0
.eh_frame:0000000000006EE3                 db    0
.eh_frame:0000000000006EE4                 db 0BCh
.eh_frame:0000000000006EE5                 db 0D7h
.eh_frame:0000000000006EE6                 db 0FFh
.eh_frame:0000000000006EE7                 db 0FFh
.eh_frame:0000000000006EE8                 db  91h
.eh_frame:0000000000006EE9                 db    0
.eh_frame:0000000000006EEA                 db    0
.eh_frame:0000000000006EEB                 db    0
.eh_frame:0000000000006EEC                 db    0
.eh_frame:0000000000006EED                 db  44h ; D
.eh_frame:0000000000006EEE                 db  0Eh
.eh_frame:0000000000006EEF                 db  50h ; P
.eh_frame:0000000000006EF0                 db    2
.eh_frame:0000000000006EF1                 db  82h
.eh_frame:0000000000006EF2                 db  0Ah
.eh_frame:0000000000006EF3                 db  0Eh
.eh_frame:0000000000006EF4                 db    8
.eh_frame:0000000000006EF5                 db  41h ; A
.eh_frame:0000000000006EF6                 db  0Bh
.eh_frame:0000000000006EF7                 db    0
.eh_frame:0000000000006EF8                 db  10h
.eh_frame:0000000000006EF9                 db    0
.eh_frame:0000000000006EFA                 db    0
.eh_frame:0000000000006EFB                 db    0
.eh_frame:0000000000006EFC                 db  8Ch
.eh_frame:0000000000006EFD                 db    7
.eh_frame:0000000000006EFE                 db    0
.eh_frame:0000000000006EFF                 db    0
.eh_frame:0000000000006F00                 db  40h ; @
.eh_frame:0000000000006F01                 db 0D8h
.eh_frame:0000000000006F02                 db 0FFh
.eh_frame:0000000000006F03                 db 0FFh
.eh_frame:0000000000006F04                 db  0Ch
.eh_frame:0000000000006F05                 db    0
.eh_frame:0000000000006F06                 db    0
.eh_frame:0000000000006F07                 db    0
.eh_frame:0000000000006F08                 db    0
.eh_frame:0000000000006F09                 db    0
.eh_frame:0000000000006F0A                 db    0
.eh_frame:0000000000006F0B                 db    0
.eh_frame:0000000000006F0C                 db  10h
.eh_frame:0000000000006F0D                 db    0
.eh_frame:0000000000006F0E                 db    0
.eh_frame:0000000000006F0F                 db    0
.eh_frame:0000000000006F10                 db 0A0h
.eh_frame:0000000000006F11                 db    7
.eh_frame:0000000000006F12                 db    0
.eh_frame:0000000000006F13                 db    0
.eh_frame:0000000000006F14                 db  3Ch ; <
.eh_frame:0000000000006F15                 db 0D8h
.eh_frame:0000000000006F16                 db 0FFh
.eh_frame:0000000000006F17                 db 0FFh
.eh_frame:0000000000006F18                 db  17h
.eh_frame:0000000000006F19                 db    0
.eh_frame:0000000000006F1A                 db    0
.eh_frame:0000000000006F1B                 db    0
.eh_frame:0000000000006F1C                 db    0
.eh_frame:0000000000006F1D                 db    0
.eh_frame:0000000000006F1E                 db    0
.eh_frame:0000000000006F1F                 db    0
.eh_frame:0000000000006F20                 db  10h
.eh_frame:0000000000006F21                 db    0
.eh_frame:0000000000006F22                 db    0
.eh_frame:0000000000006F23                 db    0
.eh_frame:0000000000006F24                 db 0B4h
.eh_frame:0000000000006F25                 db    7
.eh_frame:0000000000006F26                 db    0
.eh_frame:0000000000006F27                 db    0
.eh_frame:0000000000006F28                 db  48h ; H
.eh_frame:0000000000006F29                 db 0D8h
.eh_frame:0000000000006F2A                 db 0FFh
.eh_frame:0000000000006F2B                 db 0FFh
.eh_frame:0000000000006F2C                 db  13h
.eh_frame:0000000000006F2D                 db    0
.eh_frame:0000000000006F2E                 db    0
.eh_frame:0000000000006F2F                 db    0
.eh_frame:0000000000006F30                 db    0
.eh_frame:0000000000006F31                 db    0
.eh_frame:0000000000006F32                 db    0
.eh_frame:0000000000006F33                 db    0
.eh_frame:0000000000006F34                 db  10h
.eh_frame:0000000000006F35                 db    0
.eh_frame:0000000000006F36                 db    0
.eh_frame:0000000000006F37                 db    0
.eh_frame:0000000000006F38                 db 0C8h
.eh_frame:0000000000006F39                 db    7
.eh_frame:0000000000006F3A                 db    0
.eh_frame:0000000000006F3B                 db    0
.eh_frame:0000000000006F3C                 db  54h ; T
.eh_frame:0000000000006F3D                 db 0D8h
.eh_frame:0000000000006F3E                 db 0FFh
.eh_frame:0000000000006F3F                 db 0FFh
.eh_frame:0000000000006F40                 db  0Ch
.eh_frame:0000000000006F41                 db    0
.eh_frame:0000000000006F42                 db    0
.eh_frame:0000000000006F43                 db    0
.eh_frame:0000000000006F44                 db    0
.eh_frame:0000000000006F45                 db    0
.eh_frame:0000000000006F46                 db    0
.eh_frame:0000000000006F47                 db    0
.eh_frame:0000000000006F48                 db  10h
.eh_frame:0000000000006F49                 db    0
.eh_frame:0000000000006F4A                 db    0
.eh_frame:0000000000006F4B                 db    0
.eh_frame:0000000000006F4C                 db 0DCh
.eh_frame:0000000000006F4D                 db    7
.eh_frame:0000000000006F4E                 db    0
.eh_frame:0000000000006F4F                 db    0
.eh_frame:0000000000006F50                 db  50h ; P
.eh_frame:0000000000006F51                 db 0D8h
.eh_frame:0000000000006F52                 db 0FFh
.eh_frame:0000000000006F53                 db 0FFh
.eh_frame:0000000000006F54                 db  14h
.eh_frame:0000000000006F55                 db    0
.eh_frame:0000000000006F56                 db    0
.eh_frame:0000000000006F57                 db    0
.eh_frame:0000000000006F58                 db    0
.eh_frame:0000000000006F59                 db    0
.eh_frame:0000000000006F5A                 db    0
.eh_frame:0000000000006F5B                 db    0
.eh_frame:0000000000006F5C                 db  10h
.eh_frame:0000000000006F5D                 db    0
.eh_frame:0000000000006F5E                 db    0
.eh_frame:0000000000006F5F                 db    0
.eh_frame:0000000000006F60                 db 0F0h
.eh_frame:0000000000006F61                 db    7
.eh_frame:0000000000006F62                 db    0
.eh_frame:0000000000006F63                 db    0
.eh_frame:0000000000006F64                 db  5Ch ; \
.eh_frame:0000000000006F65                 db 0D8h
.eh_frame:0000000000006F66                 db 0FFh
.eh_frame:0000000000006F67                 db 0FFh
.eh_frame:0000000000006F68                 db  13h
.eh_frame:0000000000006F69                 db    0
.eh_frame:0000000000006F6A                 db    0
.eh_frame:0000000000006F6B                 db    0
.eh_frame:0000000000006F6C                 db    0
.eh_frame:0000000000006F6D                 db    0
.eh_frame:0000000000006F6E                 db    0
.eh_frame:0000000000006F6F                 db    0
.eh_frame:0000000000006F70                 db  14h
.eh_frame:0000000000006F71                 db    0
.eh_frame:0000000000006F72                 db    0
.eh_frame:0000000000006F73                 db    0
.eh_frame:0000000000006F74                 db    4
.eh_frame:0000000000006F75                 db    8
.eh_frame:0000000000006F76                 db    0
.eh_frame:0000000000006F77                 db    0
.eh_frame:0000000000006F78                 db  68h ; h
.eh_frame:0000000000006F79                 db 0D8h
.eh_frame:0000000000006F7A                 db 0FFh
.eh_frame:0000000000006F7B                 db 0FFh
.eh_frame:0000000000006F7C                 db  18h
.eh_frame:0000000000006F7D                 db    0
.eh_frame:0000000000006F7E                 db    0
.eh_frame:0000000000006F7F                 db    0
.eh_frame:0000000000006F80                 db    0
.eh_frame:0000000000006F81                 db    0
.eh_frame:0000000000006F82                 db    0
.eh_frame:0000000000006F83                 db    0
.eh_frame:0000000000006F84                 db    0
.eh_frame:0000000000006F85                 db    0
.eh_frame:0000000000006F86                 db    0
.eh_frame:0000000000006F87                 db    0
.eh_frame:0000000000006F88                 db  10h
.eh_frame:0000000000006F89                 db    0
.eh_frame:0000000000006F8A                 db    0
.eh_frame:0000000000006F8B                 db    0
.eh_frame:0000000000006F8C                 db  1Ch
.eh_frame:0000000000006F8D                 db    8
.eh_frame:0000000000006F8E                 db    0
.eh_frame:0000000000006F8F                 db    0
.eh_frame:0000000000006F90                 db  70h ; p
.eh_frame:0000000000006F91                 db 0D8h
.eh_frame:0000000000006F92                 db 0FFh
.eh_frame:0000000000006F93                 db 0FFh
.eh_frame:0000000000006F94                 db  10h
.eh_frame:0000000000006F95                 db    0
.eh_frame:0000000000006F96                 db    0
.eh_frame:0000000000006F97                 db    0
.eh_frame:0000000000006F98                 db    0
.eh_frame:0000000000006F99                 db    0
.eh_frame:0000000000006F9A                 db    0
.eh_frame:0000000000006F9B                 db    0
.eh_frame:0000000000006F9C                 db  48h ; H
.eh_frame:0000000000006F9D                 db    0
.eh_frame:0000000000006F9E                 db    0
.eh_frame:0000000000006F9F                 db    0
.eh_frame:0000000000006FA0                 db  30h ; 0
.eh_frame:0000000000006FA1                 db    8
.eh_frame:0000000000006FA2                 db    0
.eh_frame:0000000000006FA3                 db    0
.eh_frame:0000000000006FA4                 db  6Ch ; l
.eh_frame:0000000000006FA5                 db 0D8h
.eh_frame:0000000000006FA6                 db 0FFh
.eh_frame:0000000000006FA7                 db 0FFh
.eh_frame:0000000000006FA8                 db 0CEh
.eh_frame:0000000000006FA9                 db    1
.eh_frame:0000000000006FAA                 db    0
.eh_frame:0000000000006FAB                 db    0
.eh_frame:0000000000006FAC                 db    0
.eh_frame:0000000000006FAD                 db  42h ; B
.eh_frame:0000000000006FAE                 db  0Eh
.eh_frame:0000000000006FAF                 db  10h
.eh_frame:0000000000006FB0                 db  8Fh
.eh_frame:0000000000006FB1                 db    2
.eh_frame:0000000000006FB2                 db  42h ; B
.eh_frame:0000000000006FB3                 db  0Eh
.eh_frame:0000000000006FB4                 db  18h
.eh_frame:0000000000006FB5                 db  8Eh
.eh_frame:0000000000006FB6                 db    3
.eh_frame:0000000000006FB7                 db  42h ; B
.eh_frame:0000000000006FB8                 db  0Eh
.eh_frame:0000000000006FB9                 db  20h
.eh_frame:0000000000006FBA                 db  8Dh
.eh_frame:0000000000006FBB                 db    4
.eh_frame:0000000000006FBC                 db  42h ; B
.eh_frame:0000000000006FBD                 db  0Eh
.eh_frame:0000000000006FBE                 db  28h ; (
.eh_frame:0000000000006FBF                 db  8Ch
.eh_frame:0000000000006FC0                 db    5
.eh_frame:0000000000006FC1                 db  44h ; D
.eh_frame:0000000000006FC2                 db  0Eh
.eh_frame:0000000000006FC3                 db  30h ; 0
.eh_frame:0000000000006FC4                 db  86h
.eh_frame:0000000000006FC5                 db    6
.eh_frame:0000000000006FC6                 db  41h ; A
.eh_frame:0000000000006FC7                 db  0Eh
.eh_frame:0000000000006FC8                 db  38h ; 8
.eh_frame:0000000000006FC9                 db  83h
.eh_frame:0000000000006FCA                 db    7
.eh_frame:0000000000006FCB                 db  4Bh ; K
.eh_frame:0000000000006FCC                 db  0Eh
.eh_frame:0000000000006FCD                 db  70h ; p
.eh_frame:0000000000006FCE                 db    3
.eh_frame:0000000000006FCF                 db  7Ah ; z
.eh_frame:0000000000006FD0                 db    1
.eh_frame:0000000000006FD1                 db  0Ah
.eh_frame:0000000000006FD2                 db  0Eh
.eh_frame:0000000000006FD3                 db  38h ; 8
.eh_frame:0000000000006FD4                 db  41h ; A
.eh_frame:0000000000006FD5                 db  0Eh
.eh_frame:0000000000006FD6                 db  30h ; 0
.eh_frame:0000000000006FD7                 db  41h ; A
.eh_frame:0000000000006FD8                 db  0Eh
.eh_frame:0000000000006FD9                 db  28h ; (
.eh_frame:0000000000006FDA                 db  42h ; B
.eh_frame:0000000000006FDB                 db  0Eh
.eh_frame:0000000000006FDC                 db  20h
.eh_frame:0000000000006FDD                 db  42h ; B
.eh_frame:0000000000006FDE                 db  0Eh
.eh_frame:0000000000006FDF                 db  18h
.eh_frame:0000000000006FE0                 db  42h ; B
.eh_frame:0000000000006FE1                 db  0Eh
.eh_frame:0000000000006FE2                 db  10h
.eh_frame:0000000000006FE3                 db  42h ; B
.eh_frame:0000000000006FE4                 db  0Eh
.eh_frame:0000000000006FE5                 db    8
.eh_frame:0000000000006FE6                 db  44h ; D
.eh_frame:0000000000006FE7                 db  0Bh
.eh_frame:0000000000006FE8                 db  4Ch ; L
.eh_frame:0000000000006FE9                 db    0
.eh_frame:0000000000006FEA                 db    0
.eh_frame:0000000000006FEB                 db    0
.eh_frame:0000000000006FEC                 db  7Ch ; |
.eh_frame:0000000000006FED                 db    8
.eh_frame:0000000000006FEE                 db    0
.eh_frame:0000000000006FEF                 db    0
.eh_frame:0000000000006FF0                 db 0F0h
.eh_frame:0000000000006FF1                 db 0D9h
.eh_frame:0000000000006FF2                 db 0FFh
.eh_frame:0000000000006FF3                 db 0FFh
.eh_frame:0000000000006FF4                 db  36h ; 6
.eh_frame:0000000000006FF5                 db    2
.eh_frame:0000000000006FF6                 db    0
.eh_frame:0000000000006FF7                 db    0
.eh_frame:0000000000006FF8                 db    0
.eh_frame:0000000000006FF9                 db  42h ; B
.eh_frame:0000000000006FFA                 db  0Eh
.eh_frame:0000000000006FFB                 db  10h
.eh_frame:0000000000006FFC                 db  8Fh
.eh_frame:0000000000006FFD                 db    2
.eh_frame:0000000000006FFE                 db  42h ; B
.eh_frame:0000000000006FFF                 db  0Eh
.eh_frame:0000000000007000                 db  18h
.eh_frame:0000000000007001                 db  8Eh
.eh_frame:0000000000007002                 db    3
.eh_frame:0000000000007003                 db  42h ; B
.eh_frame:0000000000007004                 db  0Eh
.eh_frame:0000000000007005                 db  20h
.eh_frame:0000000000007006                 db  8Dh
.eh_frame:0000000000007007                 db    4
.eh_frame:0000000000007008                 db  42h ; B
.eh_frame:0000000000007009                 db  0Eh
.eh_frame:000000000000700A                 db  28h ; (
.eh_frame:000000000000700B                 db  8Ch
.eh_frame:000000000000700C                 db    5
.eh_frame:000000000000700D                 db  41h ; A
.eh_frame:000000000000700E                 db  0Eh
.eh_frame:000000000000700F                 db  30h ; 0
.eh_frame:0000000000007010                 db  86h
.eh_frame:0000000000007011                 db    6
.eh_frame:0000000000007012                 db  41h ; A
.eh_frame:0000000000007013                 db  0Eh
.eh_frame:0000000000007014                 db  38h ; 8
.eh_frame:0000000000007015                 db  83h
.eh_frame:0000000000007016                 db    7
.eh_frame:0000000000007017                 db  48h ; H
.eh_frame:0000000000007018                 db  0Eh
.eh_frame:0000000000007019                 db 0A0h
.eh_frame:000000000000701A                 db    1
.eh_frame:000000000000701B                 db    3
.eh_frame:000000000000701C                 db 0A4h
.eh_frame:000000000000701D                 db    1
.eh_frame:000000000000701E                 db  0Ah
.eh_frame:000000000000701F                 db  0Eh
.eh_frame:0000000000007020                 db  38h ; 8
.eh_frame:0000000000007021                 db  41h ; A
.eh_frame:0000000000007022                 db  0Eh
.eh_frame:0000000000007023                 db  30h ; 0
.eh_frame:0000000000007024                 db  41h ; A
.eh_frame:0000000000007025                 db  0Eh
.eh_frame:0000000000007026                 db  28h ; (
.eh_frame:0000000000007027                 db  42h ; B
.eh_frame:0000000000007028                 db  0Eh
.eh_frame:0000000000007029                 db  20h
.eh_frame:000000000000702A                 db  42h ; B
.eh_frame:000000000000702B                 db  0Eh
.eh_frame:000000000000702C                 db  18h
.eh_frame:000000000000702D                 db  42h ; B
.eh_frame:000000000000702E                 db  0Eh
.eh_frame:000000000000702F                 db  10h
.eh_frame:0000000000007030                 db  42h ; B
.eh_frame:0000000000007031                 db  0Eh
.eh_frame:0000000000007032                 db    8
.eh_frame:0000000000007033                 db  48h ; H
.eh_frame:0000000000007034                 db  0Bh
.eh_frame:0000000000007035                 db    0
.eh_frame:0000000000007036                 db    0
.eh_frame:0000000000007037                 db    0
.eh_frame:0000000000007038                 db  10h
.eh_frame:0000000000007039                 db    1
.eh_frame:000000000000703A                 db    0
.eh_frame:000000000000703B                 db    0
.eh_frame:000000000000703C                 db 0CCh
.eh_frame:000000000000703D                 db    8
.eh_frame:000000000000703E                 db    0
.eh_frame:000000000000703F                 db    0
.eh_frame:0000000000007040                 db 0E0h
.eh_frame:0000000000007041                 db 0DBh
.eh_frame:0000000000007042                 db 0FFh
.eh_frame:0000000000007043                 db 0FFh
.eh_frame:0000000000007044                 db  17h
.eh_frame:0000000000007045                 db    4
.eh_frame:0000000000007046                 db    0
.eh_frame:0000000000007047                 db    0
.eh_frame:0000000000007048                 db    0
.eh_frame:0000000000007049                 db  42h ; B
.eh_frame:000000000000704A                 db  0Eh
.eh_frame:000000000000704B                 db  10h
.eh_frame:000000000000704C                 db  8Fh
.eh_frame:000000000000704D                 db    2
.eh_frame:000000000000704E                 db  42h ; B
.eh_frame:000000000000704F                 db  0Eh
.eh_frame:0000000000007050                 db  18h
.eh_frame:0000000000007051                 db  8Eh
.eh_frame:0000000000007052                 db    3
.eh_frame:0000000000007053                 db  42h ; B
.eh_frame:0000000000007054                 db  0Eh
.eh_frame:0000000000007055                 db  20h
.eh_frame:0000000000007056                 db  8Dh
.eh_frame:0000000000007057                 db    4
.eh_frame:0000000000007058                 db  42h ; B
.eh_frame:0000000000007059                 db  0Eh
.eh_frame:000000000000705A                 db  28h ; (
.eh_frame:000000000000705B                 db  8Ch
.eh_frame:000000000000705C                 db    5
.eh_frame:000000000000705D                 db  44h ; D
.eh_frame:000000000000705E                 db  0Eh
.eh_frame:000000000000705F                 db  30h ; 0
.eh_frame:0000000000007060                 db  86h
.eh_frame:0000000000007061                 db    6
.eh_frame:0000000000007062                 db  41h ; A
.eh_frame:0000000000007063                 db  0Eh
.eh_frame:0000000000007064                 db  38h ; 8
.eh_frame:0000000000007065                 db  83h
.eh_frame:0000000000007066                 db    7
.eh_frame:0000000000007067                 db  4Ah ; J
.eh_frame:0000000000007068                 db  0Eh
.eh_frame:0000000000007069                 db  60h ; `
.eh_frame:000000000000706A                 db    2
.eh_frame:000000000000706B                 db 0DDh
.eh_frame:000000000000706C                 db  0Eh
.eh_frame:000000000000706D                 db  68h ; h
.eh_frame:000000000000706E                 db  57h ; W
.eh_frame:000000000000706F                 db  0Eh
.eh_frame:0000000000007070                 db  70h ; p
.eh_frame:0000000000007071                 db  42h ; B
.eh_frame:0000000000007072                 db  0Eh
.eh_frame:0000000000007073                 db  78h ; x
.eh_frame:0000000000007074                 db  42h ; B
.eh_frame:0000000000007075                 db  0Eh
.eh_frame:0000000000007076                 db  80h
.eh_frame:0000000000007077                 db    1
.eh_frame:0000000000007078                 db  42h ; B
.eh_frame:0000000000007079                 db  0Eh
.eh_frame:000000000000707A                 db  88h
.eh_frame:000000000000707B                 db    1
.eh_frame:000000000000707C                 db  42h ; B
.eh_frame:000000000000707D                 db  0Eh
.eh_frame:000000000000707E                 db  90h
.eh_frame:000000000000707F                 db    1
.eh_frame:0000000000007080                 db  53h ; S
.eh_frame:0000000000007081                 db  0Eh
.eh_frame:0000000000007082                 db  60h ; `
.eh_frame:0000000000007083                 db  44h ; D
.eh_frame:0000000000007084                 db  0Ah
.eh_frame:0000000000007085                 db  0Eh
.eh_frame:0000000000007086                 db  38h ; 8
.eh_frame:0000000000007087                 db  41h ; A
.eh_frame:0000000000007088                 db  0Eh
.eh_frame:0000000000007089                 db  30h ; 0
.eh_frame:000000000000708A                 db  41h ; A
.eh_frame:000000000000708B                 db  0Eh
.eh_frame:000000000000708C                 db  28h ; (
.eh_frame:000000000000708D                 db  42h ; B
.eh_frame:000000000000708E                 db  0Eh
.eh_frame:000000000000708F                 db  20h
.eh_frame:0000000000007090                 db  42h ; B
.eh_frame:0000000000007091                 db  0Eh
.eh_frame:0000000000007092                 db  18h
.eh_frame:0000000000007093                 db  42h ; B
.eh_frame:0000000000007094                 db  0Eh
.eh_frame:0000000000007095                 db  10h
.eh_frame:0000000000007096                 db  42h ; B
.eh_frame:0000000000007097                 db  0Eh
.eh_frame:0000000000007098                 db    8
.eh_frame:0000000000007099                 db  44h ; D
.eh_frame:000000000000709A                 db  0Bh
.eh_frame:000000000000709B                 db    2
.eh_frame:000000000000709C                 db  78h ; x
.eh_frame:000000000000709D                 db  0Ah
.eh_frame:000000000000709E                 db  0Eh
.eh_frame:000000000000709F                 db  68h ; h
.eh_frame:00000000000070A0                 db  48h ; H
.eh_frame:00000000000070A1                 db  0Bh
.eh_frame:00000000000070A2                 db  5Ah ; Z
.eh_frame:00000000000070A3                 db  0Ah
.eh_frame:00000000000070A4                 db  0Eh
.eh_frame:00000000000070A5                 db  38h ; 8
.eh_frame:00000000000070A6                 db  47h ; G
.eh_frame:00000000000070A7                 db  0Eh
.eh_frame:00000000000070A8                 db  30h ; 0
.eh_frame:00000000000070A9                 db  41h ; A
.eh_frame:00000000000070AA                 db  0Eh
.eh_frame:00000000000070AB                 db  28h ; (
.eh_frame:00000000000070AC                 db  42h ; B
.eh_frame:00000000000070AD                 db  0Eh
.eh_frame:00000000000070AE                 db  20h
.eh_frame:00000000000070AF                 db  42h ; B
.eh_frame:00000000000070B0                 db  0Eh
.eh_frame:00000000000070B1                 db  18h
.eh_frame:00000000000070B2                 db  42h ; B
.eh_frame:00000000000070B3                 db  0Eh
.eh_frame:00000000000070B4                 db  10h
.eh_frame:00000000000070B5                 db  42h ; B
.eh_frame:00000000000070B6                 db  0Eh
.eh_frame:00000000000070B7                 db    8
.eh_frame:00000000000070B8                 db  56h ; V
.eh_frame:00000000000070B9                 db  0Bh
.eh_frame:00000000000070BA                 db  5Eh ; ^
.eh_frame:00000000000070BB                 db  0Ah
.eh_frame:00000000000070BC                 db  0Eh
.eh_frame:00000000000070BD                 db  38h ; 8
.eh_frame:00000000000070BE                 db  52h ; R
.eh_frame:00000000000070BF                 db  0Eh
.eh_frame:00000000000070C0                 db  30h ; 0
.eh_frame:00000000000070C1                 db  41h ; A
.eh_frame:00000000000070C2                 db  0Eh
.eh_frame:00000000000070C3                 db  28h ; (
.eh_frame:00000000000070C4                 db  42h ; B
.eh_frame:00000000000070C5                 db  0Eh
.eh_frame:00000000000070C6                 db  20h
.eh_frame:00000000000070C7                 db  42h ; B
.eh_frame:00000000000070C8                 db  0Eh
.eh_frame:00000000000070C9                 db  18h
.eh_frame:00000000000070CA                 db  42h ; B
.eh_frame:00000000000070CB                 db  0Eh
.eh_frame:00000000000070CC                 db  10h
.eh_frame:00000000000070CD                 db  42h ; B
.eh_frame:00000000000070CE                 db  0Eh
.eh_frame:00000000000070CF                 db    8
.eh_frame:00000000000070D0                 db  4Fh ; O
.eh_frame:00000000000070D1                 db  0Bh
.eh_frame:00000000000070D2                 db  62h ; b
.eh_frame:00000000000070D3                 db  0Ah
.eh_frame:00000000000070D4                 db  0Eh
.eh_frame:00000000000070D5                 db  38h ; 8
.eh_frame:00000000000070D6                 db  50h ; P
.eh_frame:00000000000070D7                 db  0Eh
.eh_frame:00000000000070D8                 db  30h ; 0
.eh_frame:00000000000070D9                 db  41h ; A
.eh_frame:00000000000070DA                 db  0Eh
.eh_frame:00000000000070DB                 db  28h ; (
.eh_frame:00000000000070DC                 db  42h ; B
.eh_frame:00000000000070DD                 db  0Eh
.eh_frame:00000000000070DE                 db  20h
.eh_frame:00000000000070DF                 db  42h ; B
.eh_frame:00000000000070E0                 db  0Eh
.eh_frame:00000000000070E1                 db  18h
.eh_frame:00000000000070E2                 db  42h ; B
.eh_frame:00000000000070E3                 db  0Eh
.eh_frame:00000000000070E4                 db  10h
.eh_frame:00000000000070E5                 db  42h ; B
.eh_frame:00000000000070E6                 db  0Eh
.eh_frame:00000000000070E7                 db    8
.eh_frame:00000000000070E8                 db  55h ; U
.eh_frame:00000000000070E9                 db  0Bh
.eh_frame:00000000000070EA                 db  66h ; f
.eh_frame:00000000000070EB                 db  0Eh
.eh_frame:00000000000070EC                 db  68h ; h
.eh_frame:00000000000070ED                 db  42h ; B
.eh_frame:00000000000070EE                 db  0Eh
.eh_frame:00000000000070EF                 db  70h ; p
.eh_frame:00000000000070F0                 db  5Ch ; \
.eh_frame:00000000000070F1                 db  0Eh
.eh_frame:00000000000070F2                 db  68h ; h
.eh_frame:00000000000070F3                 db  41h ; A
.eh_frame:00000000000070F4                 db  0Eh
.eh_frame:00000000000070F5                 db  60h ; `
.eh_frame:00000000000070F6                 db  44h ; D
.eh_frame:00000000000070F7                 db  0Ah
.eh_frame:00000000000070F8                 db  0Eh
.eh_frame:00000000000070F9                 db  38h ; 8
.eh_frame:00000000000070FA                 db  41h ; A
.eh_frame:00000000000070FB                 db  0Eh
.eh_frame:00000000000070FC                 db  30h ; 0
.eh_frame:00000000000070FD                 db  41h ; A
.eh_frame:00000000000070FE                 db  0Eh
.eh_frame:00000000000070FF                 db  28h ; (
.eh_frame:0000000000007100                 db  42h ; B
.eh_frame:0000000000007101                 db  0Eh
.eh_frame:0000000000007102                 db  20h
.eh_frame:0000000000007103                 db  42h ; B
.eh_frame:0000000000007104                 db  0Eh
.eh_frame:0000000000007105                 db  18h
.eh_frame:0000000000007106                 db  42h ; B
.eh_frame:0000000000007107                 db  0Eh
.eh_frame:0000000000007108                 db  10h
.eh_frame:0000000000007109                 db  42h ; B
.eh_frame:000000000000710A                 db  0Eh
.eh_frame:000000000000710B                 db    8
.eh_frame:000000000000710C                 db  45h ; E
.eh_frame:000000000000710D                 db  0Bh
.eh_frame:000000000000710E                 db  68h ; h
.eh_frame:000000000000710F                 db  0Ah
.eh_frame:0000000000007110                 db  0Eh
.eh_frame:0000000000007111                 db  68h ; h
.eh_frame:0000000000007112                 db  48h ; H
.eh_frame:0000000000007113                 db  0Bh
.eh_frame:0000000000007114                 db  72h ; r
.eh_frame:0000000000007115                 db  0Eh
.eh_frame:0000000000007116                 db  68h ; h
.eh_frame:0000000000007117                 db  45h ; E
.eh_frame:0000000000007118                 db  0Eh
.eh_frame:0000000000007119                 db  70h ; p
.eh_frame:000000000000711A                 db  42h ; B
.eh_frame:000000000000711B                 db  0Eh
.eh_frame:000000000000711C                 db  78h ; x
.eh_frame:000000000000711D                 db  42h ; B
.eh_frame:000000000000711E                 db  0Eh
.eh_frame:000000000000711F                 db  80h
.eh_frame:0000000000007120                 db    1
.eh_frame:0000000000007121                 db  5Eh ; ^
.eh_frame:0000000000007122                 db  0Eh
.eh_frame:0000000000007123                 db  60h ; `
.eh_frame:0000000000007124                 db  44h ; D
.eh_frame:0000000000007125                 db  0Ah
.eh_frame:0000000000007126                 db  0Eh
.eh_frame:0000000000007127                 db  38h ; 8
.eh_frame:0000000000007128                 db  41h ; A
.eh_frame:0000000000007129                 db  0Eh
.eh_frame:000000000000712A                 db  30h ; 0
.eh_frame:000000000000712B                 db  41h ; A
.eh_frame:000000000000712C                 db  0Eh
.eh_frame:000000000000712D                 db  28h ; (
.eh_frame:000000000000712E                 db  42h ; B
.eh_frame:000000000000712F                 db  0Eh
.eh_frame:0000000000007130                 db  20h
.eh_frame:0000000000007131                 db  42h ; B
.eh_frame:0000000000007132                 db  0Eh
.eh_frame:0000000000007133                 db  18h
.eh_frame:0000000000007134                 db  42h ; B
.eh_frame:0000000000007135                 db  0Eh
.eh_frame:0000000000007136                 db  10h
.eh_frame:0000000000007137                 db  42h ; B
.eh_frame:0000000000007138                 db  0Eh
.eh_frame:0000000000007139                 db    8
.eh_frame:000000000000713A                 db  41h ; A
.eh_frame:000000000000713B                 db  0Bh
.eh_frame:000000000000713C                 db  79h ; y
.eh_frame:000000000000713D                 db  0Ah
.eh_frame:000000000000713E                 db  0Eh
.eh_frame:000000000000713F                 db  68h ; h
.eh_frame:0000000000007140                 db  42h ; B
.eh_frame:0000000000007141                 db  0Eh
.eh_frame:0000000000007142                 db  70h ; p
.eh_frame:0000000000007143                 db  42h ; B
.eh_frame:0000000000007144                 db  0Eh
.eh_frame:0000000000007145                 db  78h ; x
.eh_frame:0000000000007146                 db  42h ; B
.eh_frame:0000000000007147                 db  0Eh
.eh_frame:0000000000007148                 db  80h
.eh_frame:0000000000007149                 db    1
.eh_frame:000000000000714A                 db  51h ; Q
.eh_frame:000000000000714B                 db  0Bh
.eh_frame:000000000000714C                 db  10h
.eh_frame:000000000000714D                 db    0
.eh_frame:000000000000714E                 db    0
.eh_frame:000000000000714F                 db    0
.eh_frame:0000000000007150                 db 0E0h
.eh_frame:0000000000007151                 db    9
.eh_frame:0000000000007152                 db    0
.eh_frame:0000000000007153                 db    0
.eh_frame:0000000000007154                 db 0ECh
.eh_frame:0000000000007155                 db 0DEh
.eh_frame:0000000000007156                 db 0FFh
.eh_frame:0000000000007157                 db 0FFh
.eh_frame:0000000000007158                 db  20h
.eh_frame:0000000000007159                 db    0
.eh_frame:000000000000715A                 db    0
.eh_frame:000000000000715B                 db    0
.eh_frame:000000000000715C                 db    0
.eh_frame:000000000000715D                 db    0
.eh_frame:000000000000715E                 db    0
.eh_frame:000000000000715F                 db    0
.eh_frame:0000000000007160                 db  18h
.eh_frame:0000000000007161                 db    0
.eh_frame:0000000000007162                 db    0
.eh_frame:0000000000007163                 db    0
.eh_frame:0000000000007164                 db 0F4h
.eh_frame:0000000000007165                 db    9
.eh_frame:0000000000007166                 db    0
.eh_frame:0000000000007167                 db    0
.eh_frame:0000000000007168                 db 0F8h
.eh_frame:0000000000007169                 db 0DEh
.eh_frame:000000000000716A                 db 0FFh
.eh_frame:000000000000716B                 db 0FFh
.eh_frame:000000000000716C                 db  78h ; x
.eh_frame:000000000000716D                 db    0
.eh_frame:000000000000716E                 db    0
.eh_frame:000000000000716F                 db    0
.eh_frame:0000000000007170                 db    0
.eh_frame:0000000000007171                 db  44h ; D
.eh_frame:0000000000007172                 db  0Eh
.eh_frame:0000000000007173                 db  70h ; p
.eh_frame:0000000000007174                 db    2
.eh_frame:0000000000007175                 db  60h ; `
.eh_frame:0000000000007176                 db  0Ah
.eh_frame:0000000000007177                 db  0Eh
.eh_frame:0000000000007178                 db    8
.eh_frame:0000000000007179                 db  41h ; A
.eh_frame:000000000000717A                 db  0Bh
.eh_frame:000000000000717B                 db    0
.eh_frame:000000000000717C                 db  28h ; (
.eh_frame:000000000000717D                 db    0
.eh_frame:000000000000717E                 db    0
.eh_frame:000000000000717F                 db    0
.eh_frame:0000000000007180                 db  10h
.eh_frame:0000000000007181                 db  0Ah
.eh_frame:0000000000007182                 db    0
.eh_frame:0000000000007183                 db    0
.eh_frame:0000000000007184                 db  5Ch ; \
.eh_frame:0000000000007185                 db 0DFh
.eh_frame:0000000000007186                 db 0FFh
.eh_frame:0000000000007187                 db 0FFh
.eh_frame:0000000000007188                 db 0D5h
.eh_frame:0000000000007189                 db    0
.eh_frame:000000000000718A                 db    0
.eh_frame:000000000000718B                 db    0
.eh_frame:000000000000718C                 db    0
.eh_frame:000000000000718D                 db  41h ; A
.eh_frame:000000000000718E                 db  0Eh
.eh_frame:000000000000718F                 db  10h
.eh_frame:0000000000007190                 db  86h
.eh_frame:0000000000007191                 db    2
.eh_frame:0000000000007192                 db  41h ; A
.eh_frame:0000000000007193                 db  0Eh
.eh_frame:0000000000007194                 db  18h
.eh_frame:0000000000007195                 db  83h
.eh_frame:0000000000007196                 db    3
.eh_frame:0000000000007197                 db  50h ; P
.eh_frame:0000000000007198                 db  0Eh
.eh_frame:0000000000007199                 db 0D0h
.eh_frame:000000000000719A                 db    1
.eh_frame:000000000000719B                 db    2
.eh_frame:000000000000719C                 db 0ABh
.eh_frame:000000000000719D                 db  0Ah
.eh_frame:000000000000719E                 db  0Eh
.eh_frame:000000000000719F                 db  18h
.eh_frame:00000000000071A0                 db  41h ; A
.eh_frame:00000000000071A1                 db  0Eh
.eh_frame:00000000000071A2                 db  10h
.eh_frame:00000000000071A3                 db  41h ; A
.eh_frame:00000000000071A4                 db  0Eh
.eh_frame:00000000000071A5                 db    8
.eh_frame:00000000000071A6                 db  41h ; A
.eh_frame:00000000000071A7                 db  0Bh
.eh_frame:00000000000071A8                 db  1Ch
.eh_frame:00000000000071A9                 db    0
.eh_frame:00000000000071AA                 db    0
.eh_frame:00000000000071AB                 db    0
.eh_frame:00000000000071AC                 db  3Ch ; <
.eh_frame:00000000000071AD                 db  0Ah
.eh_frame:00000000000071AE                 db    0
.eh_frame:00000000000071AF                 db    0
.eh_frame:00000000000071B0                 db  10h
.eh_frame:00000000000071B1                 db 0E0h
.eh_frame:00000000000071B2                 db 0FFh
.eh_frame:00000000000071B3                 db 0FFh
.eh_frame:00000000000071B4                 db  80h
.eh_frame:00000000000071B5                 db    0
.eh_frame:00000000000071B6                 db    0
.eh_frame:00000000000071B7                 db    0
.eh_frame:00000000000071B8                 db    0
.eh_frame:00000000000071B9                 db  41h ; A
.eh_frame:00000000000071BA                 db  0Eh
.eh_frame:00000000000071BB                 db  10h
.eh_frame:00000000000071BC                 db  83h
.eh_frame:00000000000071BD                 db    2
.eh_frame:00000000000071BE                 db    2
.eh_frame:00000000000071BF                 db  7Ah ; z
.eh_frame:00000000000071C0                 db  0Eh
.eh_frame:00000000000071C1                 db    8
.eh_frame:00000000000071C2                 db    0
.eh_frame:00000000000071C3                 db    0
.eh_frame:00000000000071C4                 db    0
.eh_frame:00000000000071C5                 db    0
.eh_frame:00000000000071C6                 db    0
.eh_frame:00000000000071C7                 db    0
.eh_frame:00000000000071C8                 db  18h
.eh_frame:00000000000071C9                 db    0
.eh_frame:00000000000071CA                 db    0
.eh_frame:00000000000071CB                 db    0
.eh_frame:00000000000071CC                 db  5Ch ; \
.eh_frame:00000000000071CD                 db  0Ah
.eh_frame:00000000000071CE                 db    0
.eh_frame:00000000000071CF                 db    0
.eh_frame:00000000000071D0                 db  70h ; p
.eh_frame:00000000000071D1                 db 0E0h
.eh_frame:00000000000071D2                 db 0FFh
.eh_frame:00000000000071D3                 db 0FFh
.eh_frame:00000000000071D4                 db  1Ah
.eh_frame:00000000000071D5                 db    0
.eh_frame:00000000000071D6                 db    0
.eh_frame:00000000000071D7                 db    0
.eh_frame:00000000000071D8                 db    0
.eh_frame:00000000000071D9                 db  41h ; A
.eh_frame:00000000000071DA                 db  0Eh
.eh_frame:00000000000071DB                 db  10h
.eh_frame:00000000000071DC                 db  83h
.eh_frame:00000000000071DD                 db    2
.eh_frame:00000000000071DE                 db  53h ; S
.eh_frame:00000000000071DF                 db  0Ah
.eh_frame:00000000000071E0                 db  0Eh
.eh_frame:00000000000071E1                 db    8
.eh_frame:00000000000071E2                 db  41h ; A
.eh_frame:00000000000071E3                 db  0Bh
.eh_frame:00000000000071E4                 db  10h
.eh_frame:00000000000071E5                 db    0
.eh_frame:00000000000071E6                 db    0
.eh_frame:00000000000071E7                 db    0
.eh_frame:00000000000071E8                 db  78h ; x
.eh_frame:00000000000071E9                 db  0Ah
.eh_frame:00000000000071EA                 db    0
.eh_frame:00000000000071EB                 db    0
.eh_frame:00000000000071EC                 db  74h ; t
.eh_frame:00000000000071ED                 db 0E0h
.eh_frame:00000000000071EE                 db 0FFh
.eh_frame:00000000000071EF                 db 0FFh
.eh_frame:00000000000071F0                 db  24h ; $
.eh_frame:00000000000071F1                 db    0
.eh_frame:00000000000071F2                 db    0
.eh_frame:00000000000071F3                 db    0
.eh_frame:00000000000071F4                 db    0
.eh_frame:00000000000071F5                 db  5Fh ; _
.eh_frame:00000000000071F6                 db  0Eh
.eh_frame:00000000000071F7                 db  10h
.eh_frame:00000000000071F8                 db  10h
.eh_frame:00000000000071F9                 db    0
.eh_frame:00000000000071FA                 db    0
.eh_frame:00000000000071FB                 db    0
.eh_frame:00000000000071FC                 db  8Ch
.eh_frame:00000000000071FD                 db  0Ah
.eh_frame:00000000000071FE                 db    0
.eh_frame:00000000000071FF                 db    0
.eh_frame:0000000000007200                 db  90h
.eh_frame:0000000000007201                 db 0E0h
.eh_frame:0000000000007202                 db 0FFh
.eh_frame:0000000000007203                 db 0FFh
.eh_frame:0000000000007204                 db    2
.eh_frame:0000000000007205                 db    0
.eh_frame:0000000000007206                 db    0
.eh_frame:0000000000007207                 db    0
.eh_frame:0000000000007208                 db    0
.eh_frame:0000000000007209                 db    0
.eh_frame:000000000000720A                 db    0
.eh_frame:000000000000720B                 db    0
.eh_frame:000000000000720C                 db  20h
.eh_frame:000000000000720D                 db    0
.eh_frame:000000000000720E                 db    0
.eh_frame:000000000000720F                 db    0
.eh_frame:0000000000007210                 db 0A0h
.eh_frame:0000000000007211                 db  0Ah
.eh_frame:0000000000007212                 db    0
.eh_frame:0000000000007213                 db    0
.eh_frame:0000000000007214                 db  8Ch
.eh_frame:0000000000007215                 db 0E0h
.eh_frame:0000000000007216                 db 0FFh
.eh_frame:0000000000007217                 db 0FFh
.eh_frame:0000000000007218                 db  36h ; 6
.eh_frame:0000000000007219                 db    0
.eh_frame:000000000000721A                 db    0
.eh_frame:000000000000721B                 db    0
.eh_frame:000000000000721C                 db    0
.eh_frame:000000000000721D                 db  44h ; D
.eh_frame:000000000000721E                 db  0Eh
.eh_frame:000000000000721F                 db  10h
.eh_frame:0000000000007220                 db  83h
.eh_frame:0000000000007221                 db    2
.eh_frame:0000000000007222                 db  5Dh ; ]
.eh_frame:0000000000007223                 db  0Ah
.eh_frame:0000000000007224                 db  0Eh
.eh_frame:0000000000007225                 db    8
.eh_frame:0000000000007226                 db  47h ; G
.eh_frame:0000000000007227                 db  0Bh
.eh_frame:0000000000007228                 db  48h ; H
.eh_frame:0000000000007229                 db  0Ah
.eh_frame:000000000000722A                 db  0Eh
.eh_frame:000000000000722B                 db    8
.eh_frame:000000000000722C                 db  41h ; A
.eh_frame:000000000000722D                 db  0Bh
.eh_frame:000000000000722E                 db    0
.eh_frame:000000000000722F                 db    0
.eh_frame:0000000000007230                 db  10h
.eh_frame:0000000000007231                 db    0
.eh_frame:0000000000007232                 db    0
.eh_frame:0000000000007233                 db    0
.eh_frame:0000000000007234                 db 0C4h
.eh_frame:0000000000007235                 db  0Ah
.eh_frame:0000000000007236                 db    0
.eh_frame:0000000000007237                 db    0
.eh_frame:0000000000007238                 db 0A8h
.eh_frame:0000000000007239                 db 0E0h
.eh_frame:000000000000723A                 db 0FFh
.eh_frame:000000000000723B                 db 0FFh
.eh_frame:000000000000723C                 db  24h ; $
.eh_frame:000000000000723D                 db    0
.eh_frame:000000000000723E                 db    0
.eh_frame:000000000000723F                 db    0
.eh_frame:0000000000007240                 db    0
.eh_frame:0000000000007241                 db  5Fh ; _
.eh_frame:0000000000007242                 db  0Eh
.eh_frame:0000000000007243                 db  10h
.eh_frame:0000000000007244                 db  14h
.eh_frame:0000000000007245                 db    0
.eh_frame:0000000000007246                 db    0
.eh_frame:0000000000007247                 db    0
.eh_frame:0000000000007248                 db 0D8h
.eh_frame:0000000000007249                 db  0Ah
.eh_frame:000000000000724A                 db    0
.eh_frame:000000000000724B                 db    0
.eh_frame:000000000000724C                 db 0C4h
.eh_frame:000000000000724D                 db 0E0h
.eh_frame:000000000000724E                 db 0FFh
.eh_frame:000000000000724F                 db 0FFh
.eh_frame:0000000000007250                 db  82h
.eh_frame:0000000000007251                 db    0
.eh_frame:0000000000007252                 db    0
.eh_frame:0000000000007253                 db    0
.eh_frame:0000000000007254                 db    0
.eh_frame:0000000000007255                 db    2
.eh_frame:0000000000007256                 db  5Fh ; _
.eh_frame:0000000000007257                 db  0Eh
.eh_frame:0000000000007258                 db  10h
.eh_frame:0000000000007259                 db  49h ; I
.eh_frame:000000000000725A                 db  0Eh
.eh_frame:000000000000725B                 db    8
.eh_frame:000000000000725C                 db  14h
.eh_frame:000000000000725D                 db    0
.eh_frame:000000000000725E                 db    0
.eh_frame:000000000000725F                 db    0
.eh_frame:0000000000007260                 db 0F0h
.eh_frame:0000000000007261                 db  0Ah
.eh_frame:0000000000007262                 db    0
.eh_frame:0000000000007263                 db    0
.eh_frame:0000000000007264                 db  3Ch ; <
.eh_frame:0000000000007265                 db 0E1h
.eh_frame:0000000000007266                 db 0FFh
.eh_frame:0000000000007267                 db 0FFh
.eh_frame:0000000000007268                 db  4Ah ; J
.eh_frame:0000000000007269                 db    0
.eh_frame:000000000000726A                 db    0
.eh_frame:000000000000726B                 db    0
.eh_frame:000000000000726C                 db    0
.eh_frame:000000000000726D                 db    2
.eh_frame:000000000000726E                 db  45h ; E
.eh_frame:000000000000726F                 db  0Eh
.eh_frame:0000000000007270                 db  10h
.eh_frame:0000000000007271                 db    0
.eh_frame:0000000000007272                 db    0
.eh_frame:0000000000007273                 db    0
.eh_frame:0000000000007274                 db  18h
.eh_frame:0000000000007275                 db    0
.eh_frame:0000000000007276                 db    0
.eh_frame:0000000000007277                 db    0
.eh_frame:0000000000007278                 db    8
.eh_frame:0000000000007279                 db  0Bh
.eh_frame:000000000000727A                 db    0
.eh_frame:000000000000727B                 db    0
.eh_frame:000000000000727C                 db  74h ; t
.eh_frame:000000000000727D                 db 0E1h
.eh_frame:000000000000727E                 db 0FFh
.eh_frame:000000000000727F                 db 0FFh
.eh_frame:0000000000007280                 db  17h
.eh_frame:0000000000007281                 db    0
.eh_frame:0000000000007282                 db    0
.eh_frame:0000000000007283                 db    0
.eh_frame:0000000000007284                 db    0
.eh_frame:0000000000007285                 db  41h ; A
.eh_frame:0000000000007286                 db  0Eh
.eh_frame:0000000000007287                 db  10h
.eh_frame:0000000000007288                 db  83h
.eh_frame:0000000000007289                 db    2
.eh_frame:000000000000728A                 db  51h ; Q
.eh_frame:000000000000728B                 db  0Eh
.eh_frame:000000000000728C                 db    8
.eh_frame:000000000000728D                 db    0
.eh_frame:000000000000728E                 db    0
.eh_frame:000000000000728F                 db    0
.eh_frame:0000000000007290                 db  18h
.eh_frame:0000000000007291                 db    0
.eh_frame:0000000000007292                 db    0
.eh_frame:0000000000007293                 db    0
.eh_frame:0000000000007294                 db  24h ; $
.eh_frame:0000000000007295                 db  0Bh
.eh_frame:0000000000007296                 db    0
.eh_frame:0000000000007297                 db    0
.eh_frame:0000000000007298                 db  78h ; x
.eh_frame:0000000000007299                 db 0E1h
.eh_frame:000000000000729A                 db 0FFh
.eh_frame:000000000000729B                 db 0FFh
.eh_frame:000000000000729C                 db  2Eh ; .
.eh_frame:000000000000729D                 db    0
.eh_frame:000000000000729E                 db    0
.eh_frame:000000000000729F                 db    0
.eh_frame:00000000000072A0                 db    0
.eh_frame:00000000000072A1                 db  47h ; G
.eh_frame:00000000000072A2                 db  0Eh
.eh_frame:00000000000072A3                 db  10h
.eh_frame:00000000000072A4                 db  61h ; a
.eh_frame:00000000000072A5                 db  0Ah
.eh_frame:00000000000072A6                 db  0Eh
.eh_frame:00000000000072A7                 db    8
.eh_frame:00000000000072A8                 db  41h ; A
.eh_frame:00000000000072A9                 db  0Bh
.eh_frame:00000000000072AA                 db    0
.eh_frame:00000000000072AB                 db    0
.eh_frame:00000000000072AC                 db  24h ; $
.eh_frame:00000000000072AD                 db    0
.eh_frame:00000000000072AE                 db    0
.eh_frame:00000000000072AF                 db    0
.eh_frame:00000000000072B0                 db  40h ; @
.eh_frame:00000000000072B1                 db  0Bh
.eh_frame:00000000000072B2                 db    0
.eh_frame:00000000000072B3                 db    0
.eh_frame:00000000000072B4                 db  8Ch
.eh_frame:00000000000072B5                 db 0E1h
.eh_frame:00000000000072B6                 db 0FFh
.eh_frame:00000000000072B7                 db 0FFh
.eh_frame:00000000000072B8                 db  28h ; (
.eh_frame:00000000000072B9                 db    0
.eh_frame:00000000000072BA                 db    0
.eh_frame:00000000000072BB                 db    0
.eh_frame:00000000000072BC                 db    0
.eh_frame:00000000000072BD                 db  41h ; A
.eh_frame:00000000000072BE                 db  0Eh
.eh_frame:00000000000072BF                 db  10h
.eh_frame:00000000000072C0                 db  86h
.eh_frame:00000000000072C1                 db    2
.eh_frame:00000000000072C2                 db  41h ; A
.eh_frame:00000000000072C3                 db  0Eh
.eh_frame:00000000000072C4                 db  18h
.eh_frame:00000000000072C5                 db  83h
.eh_frame:00000000000072C6                 db    3
.eh_frame:00000000000072C7                 db  4Dh ; M
.eh_frame:00000000000072C8                 db  0Eh
.eh_frame:00000000000072C9                 db  20h
.eh_frame:00000000000072CA                 db  49h ; I
.eh_frame:00000000000072CB                 db  0Eh
.eh_frame:00000000000072CC                 db  18h
.eh_frame:00000000000072CD                 db  47h ; G
.eh_frame:00000000000072CE                 db  0Eh
.eh_frame:00000000000072CF                 db  10h
.eh_frame:00000000000072D0                 db  41h ; A
.eh_frame:00000000000072D1                 db  0Eh
.eh_frame:00000000000072D2                 db    8
.eh_frame:00000000000072D3                 db    0
.eh_frame:00000000000072D4                 db  18h
.eh_frame:00000000000072D5                 db    0
.eh_frame:00000000000072D6                 db    0
.eh_frame:00000000000072D7                 db    0
.eh_frame:00000000000072D8                 db  68h ; h
.eh_frame:00000000000072D9                 db  0Bh
.eh_frame:00000000000072DA                 db    0
.eh_frame:00000000000072DB                 db    0
.eh_frame:00000000000072DC                 db  94h
.eh_frame:00000000000072DD                 db 0E1h
.eh_frame:00000000000072DE                 db 0FFh
.eh_frame:00000000000072DF                 db 0FFh
.eh_frame:00000000000072E0                 db  13h
.eh_frame:00000000000072E1                 db    0
.eh_frame:00000000000072E2                 db    0
.eh_frame:00000000000072E3                 db    0
.eh_frame:00000000000072E4                 db    0
.eh_frame:00000000000072E5                 db  41h ; A
.eh_frame:00000000000072E6                 db  0Eh
.eh_frame:00000000000072E7                 db  10h
.eh_frame:00000000000072E8                 db  83h
.eh_frame:00000000000072E9                 db    2
.eh_frame:00000000000072EA                 db  50h ; P
.eh_frame:00000000000072EB                 db  0Eh
.eh_frame:00000000000072EC                 db    8
.eh_frame:00000000000072ED                 db    0
.eh_frame:00000000000072EE                 db    0
.eh_frame:00000000000072EF                 db    0
.eh_frame:00000000000072F0                 db  14h
.eh_frame:00000000000072F1                 db    0
.eh_frame:00000000000072F2                 db    0
.eh_frame:00000000000072F3                 db    0
.eh_frame:00000000000072F4                 db  84h
.eh_frame:00000000000072F5                 db  0Bh
.eh_frame:00000000000072F6                 db    0
.eh_frame:00000000000072F7                 db    0
.eh_frame:00000000000072F8                 db  98h
.eh_frame:00000000000072F9                 db 0E1h
.eh_frame:00000000000072FA                 db 0FFh
.eh_frame:00000000000072FB                 db 0FFh
.eh_frame:00000000000072FC                 db  35h ; 5
.eh_frame:00000000000072FD                 db    0
.eh_frame:00000000000072FE                 db    0
.eh_frame:00000000000072FF                 db    0
.eh_frame:0000000000007300                 db    0
.eh_frame:0000000000007301                 db  4Bh ; K
.eh_frame:0000000000007302                 db  0Eh
.eh_frame:0000000000007303                 db  10h
.eh_frame:0000000000007304                 db    0
.eh_frame:0000000000007305                 db    0
.eh_frame:0000000000007306                 db    0
.eh_frame:0000000000007307                 db    0
.eh_frame:0000000000007308                 db  34h ; 4
.eh_frame:0000000000007309                 db    0
.eh_frame:000000000000730A                 db    0
.eh_frame:000000000000730B                 db    0
.eh_frame:000000000000730C                 db  9Ch
.eh_frame:000000000000730D                 db  0Bh
.eh_frame:000000000000730E                 db    0
.eh_frame:000000000000730F                 db    0
.eh_frame:0000000000007310                 db 0C0h
.eh_frame:0000000000007311                 db 0E1h
.eh_frame:0000000000007312                 db 0FFh
.eh_frame:0000000000007313                 db 0FFh
.eh_frame:0000000000007314                 db  7Bh ; {
.eh_frame:0000000000007315                 db    0
.eh_frame:0000000000007316                 db    0
.eh_frame:0000000000007317                 db    0
.eh_frame:0000000000007318                 db    0
.eh_frame:0000000000007319                 db  42h ; B
.eh_frame:000000000000731A                 db  0Eh
.eh_frame:000000000000731B                 db  10h
.eh_frame:000000000000731C                 db  8Ch
.eh_frame:000000000000731D                 db    2
.eh_frame:000000000000731E                 db  41h ; A
.eh_frame:000000000000731F                 db  0Eh
.eh_frame:0000000000007320                 db  18h
.eh_frame:0000000000007321                 db  86h
.eh_frame:0000000000007322                 db    3
.eh_frame:0000000000007323                 db  41h ; A
.eh_frame:0000000000007324                 db  0Eh
.eh_frame:0000000000007325                 db  20h
.eh_frame:0000000000007326                 db  83h
.eh_frame:0000000000007327                 db    4
.eh_frame:0000000000007328                 db  7Dh ; }
.eh_frame:0000000000007329                 db  0Ah
.eh_frame:000000000000732A                 db  0Eh
.eh_frame:000000000000732B                 db  18h
.eh_frame:000000000000732C                 db  41h ; A
.eh_frame:000000000000732D                 db  0Eh
.eh_frame:000000000000732E                 db  10h
.eh_frame:000000000000732F                 db  42h ; B
.eh_frame:0000000000007330                 db  0Eh
.eh_frame:0000000000007331                 db    8
.eh_frame:0000000000007332                 db  44h ; D
.eh_frame:0000000000007333                 db  0Bh
.eh_frame:0000000000007334                 db  60h ; `
.eh_frame:0000000000007335                 db  0Ah
.eh_frame:0000000000007336                 db  0Eh
.eh_frame:0000000000007337                 db  18h
.eh_frame:0000000000007338                 db  41h ; A
.eh_frame:0000000000007339                 db  0Eh
.eh_frame:000000000000733A                 db  10h
.eh_frame:000000000000733B                 db  42h ; B
.eh_frame:000000000000733C                 db  0Eh
.eh_frame:000000000000733D                 db    8
.eh_frame:000000000000733E                 db  45h ; E
.eh_frame:000000000000733F                 db  0Bh
.eh_frame:0000000000007340                 db  1Ch
.eh_frame:0000000000007341                 db    0
.eh_frame:0000000000007342                 db    0
.eh_frame:0000000000007343                 db    0
.eh_frame:0000000000007344                 db 0D4h
.eh_frame:0000000000007345                 db  0Bh
.eh_frame:0000000000007346                 db    0
.eh_frame:0000000000007347                 db    0
.eh_frame:0000000000007348                 db    8
.eh_frame:0000000000007349                 db 0E2h
.eh_frame:000000000000734A                 db 0FFh
.eh_frame:000000000000734B                 db 0FFh
.eh_frame:000000000000734C                 db  40h ; @
.eh_frame:000000000000734D                 db    0
.eh_frame:000000000000734E                 db    0
.eh_frame:000000000000734F                 db    0
.eh_frame:0000000000007350                 db    0
.eh_frame:0000000000007351                 db  44h ; D
.eh_frame:0000000000007352                 db  0Eh
.eh_frame:0000000000007353                 db  10h
.eh_frame:0000000000007354                 db  83h
.eh_frame:0000000000007355                 db    2
.eh_frame:0000000000007356                 db  5Ah ; Z
.eh_frame:0000000000007357                 db  0Ah
.eh_frame:0000000000007358                 db  0Eh
.eh_frame:0000000000007359                 db    8
.eh_frame:000000000000735A                 db  4Ah ; J
.eh_frame:000000000000735B                 db  0Bh
.eh_frame:000000000000735C                 db  53h ; S
.eh_frame:000000000000735D                 db  0Eh
.eh_frame:000000000000735E                 db    8
.eh_frame:000000000000735F                 db    0
.eh_frame:0000000000007360                 db  2Ch ; ,
.eh_frame:0000000000007361                 db    0
.eh_frame:0000000000007362                 db    0
.eh_frame:0000000000007363                 db    0
.eh_frame:0000000000007364                 db 0F4h
.eh_frame:0000000000007365                 db  0Bh
.eh_frame:0000000000007366                 db    0
.eh_frame:0000000000007367                 db    0
.eh_frame:0000000000007368                 db  28h ; (
.eh_frame:0000000000007369                 db 0E2h
.eh_frame:000000000000736A                 db 0FFh
.eh_frame:000000000000736B                 db 0FFh
.eh_frame:000000000000736C                 db  57h ; W
.eh_frame:000000000000736D                 db    0
.eh_frame:000000000000736E                 db    0
.eh_frame:000000000000736F                 db    0
.eh_frame:0000000000007370                 db    0
.eh_frame:0000000000007371                 db  63h ; c
.eh_frame:0000000000007372                 db  0Eh
.eh_frame:0000000000007373                 db  10h
.eh_frame:0000000000007374                 db  8Ch
.eh_frame:0000000000007375                 db    2
.eh_frame:0000000000007376                 db  41h ; A
.eh_frame:0000000000007377                 db  0Eh
.eh_frame:0000000000007378                 db  18h
.eh_frame:0000000000007379                 db  86h
.eh_frame:000000000000737A                 db    3
.eh_frame:000000000000737B                 db  44h ; D
.eh_frame:000000000000737C                 db  0Eh
.eh_frame:000000000000737D                 db  20h
.eh_frame:000000000000737E                 db  83h
.eh_frame:000000000000737F                 db    4
.eh_frame:0000000000007380                 db  6Bh ; k
.eh_frame:0000000000007381                 db  0Eh
.eh_frame:0000000000007382                 db  18h
.eh_frame:0000000000007383                 db  41h ; A
.eh_frame:0000000000007384                 db  0Eh
.eh_frame:0000000000007385                 db  10h
.eh_frame:0000000000007386                 db  42h ; B
.eh_frame:0000000000007387                 db  0Eh
.eh_frame:0000000000007388                 db    8
.eh_frame:0000000000007389                 db    0
.eh_frame:000000000000738A                 db    0
.eh_frame:000000000000738B                 db    0
.eh_frame:000000000000738C                 db    0
.eh_frame:000000000000738D                 db    0
.eh_frame:000000000000738E                 db    0
.eh_frame:000000000000738F                 db    0
.eh_frame:0000000000007390                 db  3Ch ; <
.eh_frame:0000000000007391                 db    0
.eh_frame:0000000000007392                 db    0
.eh_frame:0000000000007393                 db    0
.eh_frame:0000000000007394                 db  24h ; $
.eh_frame:0000000000007395                 db  0Ch
.eh_frame:0000000000007396                 db    0
.eh_frame:0000000000007397                 db    0
.eh_frame:0000000000007398                 db  58h ; X
.eh_frame:0000000000007399                 db 0E2h
.eh_frame:000000000000739A                 db 0FFh
.eh_frame:000000000000739B                 db 0FFh
.eh_frame:000000000000739C                 db  83h
.eh_frame:000000000000739D                 db    0
.eh_frame:000000000000739E                 db    0
.eh_frame:000000000000739F                 db    0
.eh_frame:00000000000073A0                 db    0
.eh_frame:00000000000073A1                 db  42h ; B
.eh_frame:00000000000073A2                 db  0Eh
.eh_frame:00000000000073A3                 db  10h
.eh_frame:00000000000073A4                 db  8Dh
.eh_frame:00000000000073A5                 db    2
.eh_frame:00000000000073A6                 db  42h ; B
.eh_frame:00000000000073A7                 db  0Eh
.eh_frame:00000000000073A8                 db  18h
.eh_frame:00000000000073A9                 db  8Ch
.eh_frame:00000000000073AA                 db    3
.eh_frame:00000000000073AB                 db  44h ; D
.eh_frame:00000000000073AC                 db  0Eh
.eh_frame:00000000000073AD                 db  20h
.eh_frame:00000000000073AE                 db  86h
.eh_frame:00000000000073AF                 db    4
.eh_frame:00000000000073B0                 db  41h ; A
.eh_frame:00000000000073B1                 db  0Eh
.eh_frame:00000000000073B2                 db  28h ; (
.eh_frame:00000000000073B3                 db  83h
.eh_frame:00000000000073B4                 db    5
.eh_frame:00000000000073B5                 db  4Ah ; J
.eh_frame:00000000000073B6                 db  0Eh
.eh_frame:00000000000073B7                 db  40h ; @
.eh_frame:00000000000073B8                 db    2
.eh_frame:00000000000073B9                 db  64h ; d
.eh_frame:00000000000073BA                 db  0Ah
.eh_frame:00000000000073BB                 db  0Eh
.eh_frame:00000000000073BC                 db  28h ; (
.eh_frame:00000000000073BD                 db  41h ; A
.eh_frame:00000000000073BE                 db  0Eh
.eh_frame:00000000000073BF                 db  20h
.eh_frame:00000000000073C0                 db  41h ; A
.eh_frame:00000000000073C1                 db  0Eh
.eh_frame:00000000000073C2                 db  18h
.eh_frame:00000000000073C3                 db  42h ; B
.eh_frame:00000000000073C4                 db  0Eh
.eh_frame:00000000000073C5                 db  10h
.eh_frame:00000000000073C6                 db  42h ; B
.eh_frame:00000000000073C7                 db  0Eh
.eh_frame:00000000000073C8                 db    8
.eh_frame:00000000000073C9                 db  41h ; A
.eh_frame:00000000000073CA                 db  0Bh
.eh_frame:00000000000073CB                 db    0
.eh_frame:00000000000073CC                 db    0
.eh_frame:00000000000073CD                 db    0
.eh_frame:00000000000073CE                 db    0
.eh_frame:00000000000073CF                 db    0
.eh_frame:00000000000073D0                 db  4Ch ; L
.eh_frame:00000000000073D1                 db    0
.eh_frame:00000000000073D2                 db    0
.eh_frame:00000000000073D3                 db    0
.eh_frame:00000000000073D4                 db  64h ; d
.eh_frame:00000000000073D5                 db  0Ch
.eh_frame:00000000000073D6                 db    0
.eh_frame:00000000000073D7                 db    0
.eh_frame:00000000000073D8                 db 0A8h
.eh_frame:00000000000073D9                 db 0E2h
.eh_frame:00000000000073DA                 db 0FFh
.eh_frame:00000000000073DB                 db 0FFh
.eh_frame:00000000000073DC                 db  7Dh ; }
.eh_frame:00000000000073DD                 db    0
.eh_frame:00000000000073DE                 db    0
.eh_frame:00000000000073DF                 db    0
.eh_frame:00000000000073E0                 db    0
.eh_frame:00000000000073E1                 db  42h ; B
.eh_frame:00000000000073E2                 db  0Eh
.eh_frame:00000000000073E3                 db  10h
.eh_frame:00000000000073E4                 db  8Ch
.eh_frame:00000000000073E5                 db    2
.eh_frame:00000000000073E6                 db  41h ; A
.eh_frame:00000000000073E7                 db  0Eh
.eh_frame:00000000000073E8                 db  18h
.eh_frame:00000000000073E9                 db  86h
.eh_frame:00000000000073EA                 db    3
.eh_frame:00000000000073EB                 db  44h ; D
.eh_frame:00000000000073EC                 db  0Eh
.eh_frame:00000000000073ED                 db  20h
.eh_frame:00000000000073EE                 db  83h
.eh_frame:00000000000073EF                 db    4
.eh_frame:00000000000073F0                 db  69h ; i
.eh_frame:00000000000073F1                 db  0Ah
.eh_frame:00000000000073F2                 db  0Eh
.eh_frame:00000000000073F3                 db  18h
.eh_frame:00000000000073F4                 db  41h ; A
.eh_frame:00000000000073F5                 db  0Eh
.eh_frame:00000000000073F6                 db  10h
.eh_frame:00000000000073F7                 db  42h ; B
.eh_frame:00000000000073F8                 db  0Eh
.eh_frame:00000000000073F9                 db    8
.eh_frame:00000000000073FA                 db  45h ; E
.eh_frame:00000000000073FB                 db  0Bh
.eh_frame:00000000000073FC                 db  55h ; U
.eh_frame:00000000000073FD                 db  0Ah
.eh_frame:00000000000073FE                 db  0Eh
.eh_frame:00000000000073FF                 db  18h
.eh_frame:0000000000007400                 db  41h ; A
.eh_frame:0000000000007401                 db  0Eh
.eh_frame:0000000000007402                 db  10h
.eh_frame:0000000000007403                 db  42h ; B
.eh_frame:0000000000007404                 db  0Eh
.eh_frame:0000000000007405                 db    8
.eh_frame:0000000000007406                 db  48h ; H
.eh_frame:0000000000007407                 db  0Bh
.eh_frame:0000000000007408                 db  41h ; A
.eh_frame:0000000000007409                 db  0Ah
.eh_frame:000000000000740A                 db  0Eh
.eh_frame:000000000000740B                 db  18h
.eh_frame:000000000000740C                 db  46h ; F
.eh_frame:000000000000740D                 db  0Eh
.eh_frame:000000000000740E                 db  10h
.eh_frame:000000000000740F                 db  42h ; B
.eh_frame:0000000000007410                 db  0Eh
.eh_frame:0000000000007411                 db    8
.eh_frame:0000000000007412                 db  47h ; G
.eh_frame:0000000000007413                 db  0Bh
.eh_frame:0000000000007414                 db  49h ; I
.eh_frame:0000000000007415                 db  0Eh
.eh_frame:0000000000007416                 db  18h
.eh_frame:0000000000007417                 db  41h ; A
.eh_frame:0000000000007418                 db  0Eh
.eh_frame:0000000000007419                 db  10h
.eh_frame:000000000000741A                 db  42h ; B
.eh_frame:000000000000741B                 db  0Eh
.eh_frame:000000000000741C                 db    8
.eh_frame:000000000000741D                 db    0
.eh_frame:000000000000741E                 db    0
.eh_frame:000000000000741F                 db    0
.eh_frame:0000000000007420                 db  1Ch
.eh_frame:0000000000007421                 db    0
.eh_frame:0000000000007422                 db    0
.eh_frame:0000000000007423                 db    0
.eh_frame:0000000000007424                 db 0B4h
.eh_frame:0000000000007425                 db  0Ch
.eh_frame:0000000000007426                 db    0
.eh_frame:0000000000007427                 db    0
.eh_frame:0000000000007428                 db 0D8h
.eh_frame:0000000000007429                 db 0E2h
.eh_frame:000000000000742A                 db 0FFh
.eh_frame:000000000000742B                 db 0FFh
.eh_frame:000000000000742C                 db  60h ; `
.eh_frame:000000000000742D                 db    0
.eh_frame:000000000000742E                 db    0
.eh_frame:000000000000742F                 db    0
.eh_frame:0000000000007430                 db    0
.eh_frame:0000000000007431                 db  44h ; D
.eh_frame:0000000000007432                 db  0Eh
.eh_frame:0000000000007433                 db  10h
.eh_frame:0000000000007434                 db  75h ; u
.eh_frame:0000000000007435                 db  0Ah
.eh_frame:0000000000007436                 db  0Eh
.eh_frame:0000000000007437                 db    8
.eh_frame:0000000000007438                 db  47h ; G
.eh_frame:0000000000007439                 db  0Bh
.eh_frame:000000000000743A                 db  5Fh ; _
.eh_frame:000000000000743B                 db  0Eh
.eh_frame:000000000000743C                 db    8
.eh_frame:000000000000743D                 db    0
.eh_frame:000000000000743E                 db    0
.eh_frame:000000000000743F                 db    0
.eh_frame:0000000000007440                 db  1Ch
.eh_frame:0000000000007441                 db    0
.eh_frame:0000000000007442                 db    0
.eh_frame:0000000000007443                 db    0
.eh_frame:0000000000007444                 db 0D4h
.eh_frame:0000000000007445                 db  0Ch
.eh_frame:0000000000007446                 db    0
.eh_frame:0000000000007447                 db    0
.eh_frame:0000000000007448                 db  18h
.eh_frame:0000000000007449                 db 0E3h
.eh_frame:000000000000744A                 db 0FFh
.eh_frame:000000000000744B                 db 0FFh
.eh_frame:000000000000744C                 db  3Ch ; <
.eh_frame:000000000000744D                 db    0
.eh_frame:000000000000744E                 db    0
.eh_frame:000000000000744F                 db    0
.eh_frame:0000000000007450                 db    0
.eh_frame:0000000000007451                 db  44h ; D
.eh_frame:0000000000007452                 db  0Eh
.eh_frame:0000000000007453                 db  10h
.eh_frame:0000000000007454                 db  61h ; a
.eh_frame:0000000000007455                 db  0Ah
.eh_frame:0000000000007456                 db  0Eh
.eh_frame:0000000000007457                 db    8
.eh_frame:0000000000007458                 db  4Bh ; K
.eh_frame:0000000000007459                 db  0Bh
.eh_frame:000000000000745A                 db  4Bh ; K
.eh_frame:000000000000745B                 db  0Eh
.eh_frame:000000000000745C                 db    8
.eh_frame:000000000000745D                 db    0
.eh_frame:000000000000745E                 db    0
.eh_frame:000000000000745F                 db    0
.eh_frame:0000000000007460                 db  44h ; D
.eh_frame:0000000000007461                 db    0
.eh_frame:0000000000007462                 db    0
.eh_frame:0000000000007463                 db    0
.eh_frame:0000000000007464                 db 0F4h
.eh_frame:0000000000007465                 db  0Ch
.eh_frame:0000000000007466                 db    0
.eh_frame:0000000000007467                 db    0
.eh_frame:0000000000007468                 db  38h ; 8
.eh_frame:0000000000007469                 db 0E3h
.eh_frame:000000000000746A                 db 0FFh
.eh_frame:000000000000746B                 db 0FFh
.eh_frame:000000000000746C                 db  65h ; e
.eh_frame:000000000000746D                 db    0
.eh_frame:000000000000746E                 db    0
.eh_frame:000000000000746F                 db    0
.eh_frame:0000000000007470                 db    0
.eh_frame:0000000000007471                 db  42h ; B
.eh_frame:0000000000007472                 db  0Eh
.eh_frame:0000000000007473                 db  10h
.eh_frame:0000000000007474                 db  8Fh
.eh_frame:0000000000007475                 db    2
.eh_frame:0000000000007476                 db  42h ; B
.eh_frame:0000000000007477                 db  0Eh
.eh_frame:0000000000007478                 db  18h
.eh_frame:0000000000007479                 db  8Eh
.eh_frame:000000000000747A                 db    3
.eh_frame:000000000000747B                 db  45h ; E
.eh_frame:000000000000747C                 db  0Eh
.eh_frame:000000000000747D                 db  20h
.eh_frame:000000000000747E                 db  8Dh
.eh_frame:000000000000747F                 db    4
.eh_frame:0000000000007480                 db  42h ; B
.eh_frame:0000000000007481                 db  0Eh
.eh_frame:0000000000007482                 db  28h ; (
.eh_frame:0000000000007483                 db  8Ch
.eh_frame:0000000000007484                 db    5
.eh_frame:0000000000007485                 db  48h ; H
.eh_frame:0000000000007486                 db  0Eh
.eh_frame:0000000000007487                 db  30h ; 0
.eh_frame:0000000000007488                 db  86h
.eh_frame:0000000000007489                 db    6
.eh_frame:000000000000748A                 db  48h ; H
.eh_frame:000000000000748B                 db  0Eh
.eh_frame:000000000000748C                 db  38h ; 8
.eh_frame:000000000000748D                 db  83h
.eh_frame:000000000000748E                 db    7
.eh_frame:000000000000748F                 db  4Dh ; M
.eh_frame:0000000000007490                 db  0Eh
.eh_frame:0000000000007491                 db  40h ; @
.eh_frame:0000000000007492                 db  72h ; r
.eh_frame:0000000000007493                 db  0Eh
.eh_frame:0000000000007494                 db  38h ; 8
.eh_frame:0000000000007495                 db  41h ; A
.eh_frame:0000000000007496                 db  0Eh
.eh_frame:0000000000007497                 db  30h ; 0
.eh_frame:0000000000007498                 db  41h ; A
.eh_frame:0000000000007499                 db  0Eh
.eh_frame:000000000000749A                 db  28h ; (
.eh_frame:000000000000749B                 db  42h ; B
.eh_frame:000000000000749C                 db  0Eh
.eh_frame:000000000000749D                 db  20h
.eh_frame:000000000000749E                 db  42h ; B
.eh_frame:000000000000749F                 db  0Eh
.eh_frame:00000000000074A0                 db  18h
.eh_frame:00000000000074A1                 db  42h ; B
.eh_frame:00000000000074A2                 db  0Eh
.eh_frame:00000000000074A3                 db  10h
.eh_frame:00000000000074A4                 db  42h ; B
.eh_frame:00000000000074A5                 db  0Eh
.eh_frame:00000000000074A6                 db    8
.eh_frame:00000000000074A7                 db    0
.eh_frame:00000000000074A8                 db  14h
.eh_frame:00000000000074A9                 db    0
.eh_frame:00000000000074AA                 db    0
.eh_frame:00000000000074AB                 db    0
.eh_frame:00000000000074AC                 db  3Ch ; <
.eh_frame:00000000000074AD                 db  0Dh
.eh_frame:00000000000074AE                 db    0
.eh_frame:00000000000074AF                 db    0
.eh_frame:00000000000074B0                 db  60h ; `
.eh_frame:00000000000074B1                 db 0E3h
.eh_frame:00000000000074B2                 db 0FFh
.eh_frame:00000000000074B3                 db 0FFh
.eh_frame:00000000000074B4                 db    2
.eh_frame:00000000000074B5                 db    0
.eh_frame:00000000000074B6                 db    0
.eh_frame:00000000000074B7                 db    0
.eh_frame:00000000000074B8                 db    0
.eh_frame:00000000000074B9                 db    0
.eh_frame:00000000000074BA                 db    0
.eh_frame:00000000000074BB                 db    0
.eh_frame:00000000000074BC                 db    0
.eh_frame:00000000000074BD                 db    0
.eh_frame:00000000000074BE                 db    0
.eh_frame:00000000000074BF                 db    0
.eh_frame:00000000000074C0                 db  10h
.eh_frame:00000000000074C1                 db    0
.eh_frame:00000000000074C2                 db    0
.eh_frame:00000000000074C3                 db    0
.eh_frame:00000000000074C4                 db  54h ; T
.eh_frame:00000000000074C5                 db  0Dh
.eh_frame:00000000000074C6                 db    0
.eh_frame:00000000000074C7                 db    0
.eh_frame:00000000000074C8                 db  58h ; X
.eh_frame:00000000000074C9                 db 0E3h
.eh_frame:00000000000074CA                 db 0FFh
.eh_frame:00000000000074CB                 db 0FFh
.eh_frame:00000000000074CC                 db  0Eh
.eh_frame:00000000000074CD                 db    0
.eh_frame:00000000000074CE                 db    0
.eh_frame:00000000000074CF                 db    0
.eh_frame:00000000000074D0                 db    0
.eh_frame:00000000000074D1                 db    0
.eh_frame:00000000000074D2                 db    0
.eh_frame:00000000000074D3                 db    0
.eh_frame:00000000000074D4 __FRAME_END__   db    0
.eh_frame:00000000000074D5                 db    0
.eh_frame:00000000000074D6                 db    0
.eh_frame:00000000000074D7                 db    0
.eh_frame:00000000000074D7 _eh_frame       ends
.eh_frame:00000000000074D7
.init_array:0000000000207B70 ; ELF Initialization Function Table
.init_array:0000000000207B70 ; ===========================================================================
.init_array:0000000000207B70
.init_array:0000000000207B70 ; Segment type: Pure data
.init_array:0000000000207B70 ; Segment permissions: Read/Write
.init_array:0000000000207B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B70                 assume cs:_init_array
.init_array:0000000000207B70                 ;org 207B70h
.init_array:0000000000207B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B70
.fini_array:0000000000207B78 ; ELF Termination Function Table
.fini_array:0000000000207B78 ; ===========================================================================
.fini_array:0000000000207B78
.fini_array:0000000000207B78 ; Segment type: Pure data
.fini_array:0000000000207B78 ; Segment permissions: Read/Write
.fini_array:0000000000207B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B78                 assume cs:_fini_array
.fini_array:0000000000207B78                 ;org 207B78h
.fini_array:0000000000207B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B78
.data.rel.ro:0000000000207B80 ; ===========================================================================
.data.rel.ro:0000000000207B80
.data.rel.ro:0000000000207B80 ; Segment type: Pure data
.data.rel.ro:0000000000207B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B80                 ;org 207B80h
.data.rel.ro:0000000000207B80 ; struct option long_options
.data.rel.ro:0000000000207B80 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000207B80                                         ; DATA XREF: parse_long_options:loc_2900↑o
.data.rel.ro:0000000000207B80                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000207B80                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207B80                 dq 0                    ; flag
.data.rel.ro:0000000000207B80                 dd 68h                  ; val
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  76h ; v
.data.rel.ro:0000000000207BB9                 db    0
.data.rel.ro:0000000000207BBA                 db    0
.data.rel.ro:0000000000207BBB                 db    0
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 db    0
.data.rel.ro:0000000000207BC1                 db    0
.data.rel.ro:0000000000207BC2                 db    0
.data.rel.ro:0000000000207BC3                 db    0
.data.rel.ro:0000000000207BC4                 db    0
.data.rel.ro:0000000000207BC5                 db    0
.data.rel.ro:0000000000207BC6                 db    0
.data.rel.ro:0000000000207BC7                 db    0
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db    0
.data.rel.ro:0000000000207BD9                 db    0
.data.rel.ro:0000000000207BDA                 db    0
.data.rel.ro:0000000000207BDB                 db    0
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 public quoting_style_args
.data.rel.ro:0000000000207BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C08                 dq offset file+1Ch      ; "c"
.data.rel.ro:0000000000207C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C30                 db    0
.data.rel.ro:0000000000207C31                 db    0
.data.rel.ro:0000000000207C32                 db    0
.data.rel.ro:0000000000207C33                 db    0
.data.rel.ro:0000000000207C34                 db    0
.data.rel.ro:0000000000207C35                 db    0
.data.rel.ro:0000000000207C36                 db    0
.data.rel.ro:0000000000207C37                 db    0
.data.rel.ro:0000000000207C37 _data_rel_ro    ends
.data.rel.ro:0000000000207C37
LOAD:0000000000207C38 ; ELF Dynamic Information
LOAD:0000000000207C38 ; ===========================================================================
LOAD:0000000000207C38
LOAD:0000000000207C38 ; Segment type: Pure data
LOAD:0000000000207C38 ; Segment permissions: Read/Write
LOAD:0000000000207C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C38                 assume cs:LOAD
LOAD:0000000000207C38                 ;org 207C38h
LOAD:0000000000207C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C48                 Elf64_Dyn <0Ch, 13B8h>  ; DT_INIT
LOAD:0000000000207C58                 Elf64_Dyn <0Dh, 5830h>  ; DT_FINI
LOAD:0000000000207C68                 Elf64_Dyn <19h, 207B70h> ; DT_INIT_ARRAY
LOAD:0000000000207C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207C88                 Elf64_Dyn <1Ah, 207B78h> ; DT_FINI_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CB8                 Elf64_Dyn <5, 8C8h>     ; DT_STRTAB
LOAD:0000000000207CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CD8                 Elf64_Dyn <0Ah, 2C2h>   ; DT_STRSZ
LOAD:0000000000207CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D08                 Elf64_Dyn <3, 207E28h>  ; DT_PLTGOT
LOAD:0000000000207D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000207D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D38                 Elf64_Dyn <17h, 0F38h>  ; DT_JMPREL
LOAD:0000000000207D48                 Elf64_Dyn <7, 0C68h>    ; DT_RELA
LOAD:0000000000207D58                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000207D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207D98                 Elf64_Dyn <6FFFFFFEh, 0C08h> ; DT_VERNEED
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFF0h, 0B8Ah> ; DT_VERSYM
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000207DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207DE8                 db    0
LOAD:0000000000207DE9                 db    0
LOAD:0000000000207DEA                 db    0
LOAD:0000000000207DEB                 db    0
LOAD:0000000000207DEC                 db    0
LOAD:0000000000207DED                 db    0
LOAD:0000000000207DEE                 db    0
LOAD:0000000000207DEF                 db    0
LOAD:0000000000207DF0                 db    0
LOAD:0000000000207DF1                 db    0
LOAD:0000000000207DF2                 db    0
LOAD:0000000000207DF3                 db    0
LOAD:0000000000207DF4                 db    0
LOAD:0000000000207DF5                 db    0
LOAD:0000000000207DF6                 db    0
LOAD:0000000000207DF7                 db    0
LOAD:0000000000207DF8                 db    0
LOAD:0000000000207DF9                 db    0
LOAD:0000000000207DFA                 db    0
LOAD:0000000000207DFB                 db    0
LOAD:0000000000207DFC                 db    0
LOAD:0000000000207DFD                 db    0
LOAD:0000000000207DFE                 db    0
LOAD:0000000000207DFF                 db    0
LOAD:0000000000207E00                 db    0
LOAD:0000000000207E01                 db    0
LOAD:0000000000207E02                 db    0
LOAD:0000000000207E03                 db    0
LOAD:0000000000207E04                 db    0
LOAD:0000000000207E05                 db    0
LOAD:0000000000207E06                 db    0
LOAD:0000000000207E07                 db    0
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E27 LOAD            ends
LOAD:0000000000207E27
.got:0000000000207E28 ; ===========================================================================
.got:0000000000207E28
.got:0000000000207E28 ; Segment type: Pure data
.got:0000000000207E28 ; Segment permissions: Read/Write
.got:0000000000207E28 _got            segment qword public 'DATA' use64
.got:0000000000207E28                 assume cs:_got
.got:0000000000207E28                 ;org 207E28h
.got:0000000000207E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E30 qword_207E30    dq 0                    ; DATA XREF: sub_13D0↑r
.got:0000000000207E38 qword_207E38    dq 0                    ; DATA XREF: sub_13D0+6↑r
.got:0000000000207E40 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000207E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E58 __errno_location_ptr dq offset __errno_location
.got:0000000000207E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E70 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E78 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:0000000000207E80 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207E88 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207E90 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207E90                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207E98 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EA0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EA0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EA8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EB0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EB0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EC8 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000207ED0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207ED8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EE0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207EE0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207EF0 freopen_ptr     dq offset freopen       ; DATA XREF: _freopen↑r
.got:0000000000207EF8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000207F00 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000207F00                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000207F08 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F10 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F10                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F18 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F20 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000207F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F78 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FC8                                         ; DATA XREF: start+24↑r
.got:0000000000207FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE0 _got            ends
.got:0000000000207FE0
LOAD:0000000000207FE8 ; ===========================================================================
LOAD:0000000000207FE8
LOAD:0000000000207FE8 ; Segment type: Pure data
LOAD:0000000000207FE8 ; Segment permissions: Read/Write
LOAD:0000000000207FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FE8                 assume cs:LOAD
LOAD:0000000000207FE8                 ;org 207FE8h
LOAD:0000000000207FE8                 align 20h
LOAD:0000000000207FE8 LOAD            ends
LOAD:0000000000207FE8
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+72↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_25E2↑r
.data:0000000000208018                                         ; parse_gnu_standard_options_only:loc_2A90↑r ...
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_3F1D↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000208080                                         ; LOAD:0000000000000868↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000208088                                         ; usage+7D↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public stdin@@GLIBC_2_2_5
.bss:0000000000208090 ; _IO_FILE *stdin
.bss:0000000000208090 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000208090                                         ; main+FA↑r ...
.bss:0000000000208090                                         ; Alternative name is 'stdin'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208098                 public optind@@GLIBC_2_2_5
.bss:0000000000208098 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000008B0↑o
.bss:0000000000208098                                         ; main+A4↑r ...
.bss:0000000000208098                                         ; Alternative name is 'optind'
.bss:0000000000208098                                         ; Copy of shared data
.bss:000000000020809C                 align 20h
.bss:00000000002080A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080A0                                         ; DATA XREF: LOAD:0000000000000838↑o
.bss:00000000002080A0                                         ; LOAD:0000000000000850↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 align 20h
.bss:00000000002080C0                 public opterr@@GLIBC_2_2_5
.bss:00000000002080C0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002080C0                                         ; parse_long_options+67↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'opterr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C4                 align 20h
.bss:00000000002080E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080E0 ; FILE *stderr
.bss:00000000002080E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:00000000002080E0                                         ; usage+3D↑r ...
.bss:00000000002080E0                                         ; Alternative name is 'stderr'
.bss:00000000002080E0                                         ; Copy of shared data
.bss:00000000002080E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080E9                 align 10h
.bss:00000000002080F0 n_strings       dq ?                    ; DATA XREF: main:loc_1AB2↑r
.bss:00000000002080F0                                         ; main+40C↑r ...
.bss:00000000002080F8 loop            dq ?                    ; DATA XREF: main:loc_1C15↑r
.bss:00000000002080F8                                         ; detect_loop+16↑r ...
.bss:0000000000208100 zeros           dq ?                    ; DATA XREF: main+41F↑r
.bss:0000000000208100                                         ; main:loc_1D91↑w ...
.bss:0000000000208108 head            dq ?                    ; DATA XREF: main+3E9↑r
.bss:0000000000208108                                         ; main+413↑r ...
.bss:0000000000208110 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000208110                                         ; close_stdout+1B↑r
.bss:0000000000208111                 align 8
.bss:0000000000208118 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000208118                                         ; close_stdout+56↑r
.bss:0000000000208120                 public program_name
.bss:0000000000208120 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000208120                                         ; set_program_name:loc_2B3D↑w
.bss:0000000000208128                 align 20h
.bss:0000000000208140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208140                                         ; quotearg_free+46↑o ...
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200                 db    ? ;
.bss:0000000000208201                 db    ? ;
.bss:0000000000208202                 db    ? ;
.bss:0000000000208203                 db    ? ;
.bss:0000000000208204                 db    ? ;
.bss:0000000000208205                 db    ? ;
.bss:0000000000208206                 db    ? ;
.bss:0000000000208207                 db    ? ;
.bss:0000000000208208                 db    ? ;
.bss:0000000000208209                 db    ? ;
.bss:000000000020820A                 db    ? ;
.bss:000000000020820B                 db    ? ;
.bss:000000000020820C                 db    ? ;
.bss:000000000020820D                 db    ? ;
.bss:000000000020820E                 db    ? ;
.bss:000000000020820F                 db    ? ;
.bss:0000000000208210                 db    ? ;
.bss:0000000000208211                 db    ? ;
.bss:0000000000208212                 db    ? ;
.bss:0000000000208213                 db    ? ;
.bss:0000000000208214                 db    ? ;
.bss:0000000000208215                 db    ? ;
.bss:0000000000208216                 db    ? ;
.bss:0000000000208217                 db    ? ;
.bss:0000000000208218                 db    ? ;
.bss:0000000000208219                 db    ? ;
.bss:000000000020821A                 db    ? ;
.bss:000000000020821B                 db    ? ;
.bss:000000000020821C                 db    ? ;
.bss:000000000020821D                 db    ? ;
.bss:000000000020821E                 db    ? ;
.bss:000000000020821F                 db    ? ;
.bss:0000000000208220                 db    ? ;
.bss:0000000000208221                 db    ? ;
.bss:0000000000208222                 db    ? ;
.bss:0000000000208223                 db    ? ;
.bss:0000000000208224                 db    ? ;
.bss:0000000000208225                 db    ? ;
.bss:0000000000208226                 db    ? ;
.bss:0000000000208227                 db    ? ;
.bss:0000000000208228                 db    ? ;
.bss:0000000000208229                 db    ? ;
.bss:000000000020822A                 db    ? ;
.bss:000000000020822B                 db    ? ;
.bss:000000000020822C                 db    ? ;
.bss:000000000020822D                 db    ? ;
.bss:000000000020822E                 db    ? ;
.bss:000000000020822F                 db    ? ;
.bss:0000000000208230                 db    ? ;
.bss:0000000000208231                 db    ? ;
.bss:0000000000208232                 db    ? ;
.bss:0000000000208233                 db    ? ;
.bss:0000000000208234                 db    ? ;
.bss:0000000000208235                 db    ? ;
.bss:0000000000208236                 db    ? ;
.bss:0000000000208237                 db    ? ;
.bss:0000000000208238                 db    ? ;
.bss:0000000000208239                 db    ? ;
.bss:000000000020823A                 db    ? ;
.bss:000000000020823B                 db    ? ;
.bss:000000000020823C                 db    ? ;
.bss:000000000020823D                 db    ? ;
.bss:000000000020823E                 db    ? ;
.bss:000000000020823F                 db    ? ;
.bss:0000000000208240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208240                                         ; get_quoting_style↑o ...
.bss:0000000000208250 xmmword_208250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208250                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208260 xmmword_208260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208260                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208270 qword_208270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208270                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208270 _bss            ends
.bss:0000000000208270
.prgend:0000000000208278 ; ===========================================================================
.prgend:0000000000208278
.prgend:0000000000208278 ; Segment type: Zero-length
.prgend:0000000000208278 _prgend         segment byte public '' use64
.prgend:0000000000208278 _end            label byte
.prgend:0000000000208278 _prgend         ends
.prgend:0000000000208278
extern:0000000000208280 ; ===========================================================================
extern:0000000000208280
extern:0000000000208280 ; Segment type: Externs
extern:0000000000208280 ; extern
extern:0000000000208280 ; int _uflow(_IO_FILE *)
extern:0000000000208280                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:0000000000208280                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:0000000000208288 ; void free(void *ptr)
extern:0000000000208288                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208288                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208290 ; void __noreturn abort(void)
extern:0000000000208290                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208290                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208298 ; int *_errno_location(void)
extern:0000000000208298                 extrn __errno_location:near
extern:0000000000208298                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208298                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002082A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002082A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002082A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002082A8 ; void __noreturn exit(int status)
extern:00000000002082A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002082A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002082B0 ; size_t _fpending(FILE *fp)
extern:00000000002082B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002082B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002082B8 ; int puts(const char *s)
extern:00000000002082B8                 extrn puts:near         ; CODE XREF: _puts↑j
extern:00000000002082B8                                         ; DATA XREF: .got:puts_ptr↑o
extern:00000000002082C0 ; char *textdomain(const char *domainname)
extern:00000000002082C0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002082C0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002082C8 ; int fclose(FILE *stream)
extern:00000000002082C8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002082C8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002082D0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002082D0                 extrn bindtextdomain:near
extern:00000000002082D0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002082D0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002082D8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002082D8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002082D8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002082E0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002082E0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002082E0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002082E0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082E8 ; size_t strlen(const char *s)
extern:00000000002082E8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082E8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082F0                 extrn __stack_chk_fail:near
extern:00000000002082F0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082F0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082F8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082F8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082F8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000208300 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000208300                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000208300                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000208308 ; int dup2(int fd, int fd2)
extern:0000000000208308                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000208308                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000208310 ; char *strrchr(const char *s, int c)
extern:0000000000208310                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000208310                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000208318 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000208318                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000208318                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000208320 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000208320                 extrn __assert_fail:near
extern:0000000000208320                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000208320                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000208328 ; void *memset(void *s, int c, size_t n)
extern:0000000000208328                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000208328                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000208330 ; FILE *freopen(const char *filename, const char *modes, FILE *stream)
extern:0000000000208330                 extrn freopen:near      ; CODE XREF: _freopen↑j
extern:0000000000208330                                         ; DATA XREF: .got:freopen_ptr↑o
extern:0000000000208338 ; int close(int fd)
extern:0000000000208338                 extrn close:near        ; CODE XREF: _close↑j
extern:0000000000208338                                         ; DATA XREF: .got:close_ptr↑o
extern:0000000000208340 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:0000000000208340                 extrn posix_fadvise:near
extern:0000000000208340                                         ; CODE XREF: _posix_fadvise↑j
extern:0000000000208340                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:0000000000208348 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000208348                 extrn __libc_start_main:near
extern:0000000000208348                                         ; CODE XREF: start+24↑p
extern:0000000000208348                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000208350 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000208350                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000208350                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208358 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208358                 extrn fputs_unlocked:near
extern:0000000000208358                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208358                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208360 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208360                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208360                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208368 ; int strcmp(const char *s1, const char *s2)
extern:0000000000208368                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000208368                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000208370 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208370                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208370                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208378 ; int fileno(FILE *stream)
extern:0000000000208378                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208378                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208380 ; void *malloc(size_t size)
extern:0000000000208380                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208380                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208388 ; int fflush(FILE *stream)
extern:0000000000208388                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208388                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208390 ; char *nl_langinfo(nl_item item)
extern:0000000000208390                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208390                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208398 ; int _freading(FILE *fp)
extern:0000000000208398                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208398                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002083A0 ; void *realloc(void *ptr, size_t size)
extern:00000000002083A0                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002083A0                                         ; DATA XREF: .got:realloc_ptr↑o
extern:00000000002083A8 ; char *setlocale(int category, const char *locale)
extern:00000000002083A8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:00000000002083A8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:00000000002083B0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:00000000002083B0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002083B8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002083B8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002083B8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002083C0 ; int open(const char *file, int oflag, ...)
extern:00000000002083C0                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002083C0                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002083C8 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002083C8                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002083C8                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002083D0 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002083D0                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002083D0                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002083D8 ; void __noreturn exit(int status)
extern:00000000002083D8                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002083D8                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002083E0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002083E0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002083E0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002083E8                 extrn __fprintf_chk:near
extern:00000000002083E8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002083E8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002083F0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002083F0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002083F0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083F8 ; int iswprint(wint_t wc)
extern:00000000002083F8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083F8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000208400 ; int __fastcall __cxa_finalize(void *)
extern:0000000000208400                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000208400                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000208400                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000208408 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000208408                 extrn __ctype_b_loc:near
extern:0000000000208408                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000208408                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000208410                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000208410                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000208418                 extrn __gmon_start__:near ; weak
extern:0000000000208418                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000208418                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000208420                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000208420                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000208420
extern:0000000000208420
extern:0000000000208420                 end start
