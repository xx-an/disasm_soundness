LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 3219450264E2D240D0E3BF7AD8DAC127A8651132194683ED700B0B0D4C0E062C
LOAD:0000000000000000 ; Input MD5    : CCE2195659A7CF95C10DE07377B9B150
LOAD:0000000000000000 ; Input CRC32  : A46BA63A
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/ln
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'ln.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'force-link.c'
LOAD:0000000000000000 ; Source File : 'relpath.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'backupfile.c'
LOAD:0000000000000000 ; Source File : 'backup-find.c'
LOAD:0000000000000000 ; Source File : 'canonicalize.c'
LOAD:0000000000000000 ; Source File : 'closein.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'dirname.c'
LOAD:0000000000000000 ; Source File : 'dirname-lgpl.c'
LOAD:0000000000000000 ; Source File : 'basename-lgpl.c'
LOAD:0000000000000000 ; Source File : 'stripslash.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'file-set.c'
LOAD:0000000000000000 ; Source File : 'filenamecat.c'
LOAD:0000000000000000 ; Source File : 'filenamecat-lgpl.c'
LOAD:0000000000000000 ; Source File : 'hash.c'
LOAD:0000000000000000 ; Source File : 'hash-triple.c'
LOAD:0000000000000000 ; Source File : 'openat-safer.c'
LOAD:0000000000000000 ; Source File : 'opendirat.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'renameatu.c'
LOAD:0000000000000000 ; Source File : 'same.c'
LOAD:0000000000000000 ; Source File : 'tempname.c'
LOAD:0000000000000000 ; Source File : 'fd-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetcwd.c'
LOAD:0000000000000000 ; Source File : 'yesno.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'freadahead.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'areadlink-with-size.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'hash-pjw.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'randint.c'
LOAD:0000000000000000 ; Source File : 'randread.c'
LOAD:0000000000000000 ; Source File : 'rand-isaac.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 57340h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0ED00h               ; Size in file image
LOAD:00000000000000D8                 dq 0ED00h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0F870h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20F870h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 838h                 ; Size in file image
LOAD:0000000000000110                 dq 0A30h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0FB38h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20FB38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0CAB8h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0CAB8h               ; Physical address
LOAD:00000000000001B0                 dq 56Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 56Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0F870h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20F870h              ; Physical address
LOAD:0000000000000220                 dq 790h                 ; Size in file image
LOAD:0000000000000228                 dq 790h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 8Bh, 0ECh, 60h, 7Fh, 29h, 2Bh, 0D9h, 0D0h, 0C8h, 0A9h ; Desc
LOAD:0000000000000284                 db 0EEh, 5Fh, 0B3h, 7Bh, 0DEh, 0BAh, 0D4h, 60h, 0F0h, 6Bh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 57h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 57h, 58h, 5Eh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aGetenv - offset byte_BE0, 12h, 0, 0, \ ; "getenv"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_BE0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_BE0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_BE0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_BE0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_BE0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aStrcpy - offset byte_BE0, 12h, 0, 0, \ ; "strcpy"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_BE0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aReadChk - offset byte_BE0, 12h, 0, 0, \ ; "__read_chk"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aMkdir - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "mkdir"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aUnlinkat - offset byte_BE0, 12h, 0, 0, \ ; "unlinkat"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aReadlink - offset byte_BE0, 12h, 0, 0, \ ; "readlink"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aFcntl - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000430                            0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetpid - offset byte_BE0, 12h, 0, 0, \ ; "getpid"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFreadUnlocked - offset byte_BE0, 12h, 0, 0, \ ; "fread_unlocked"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_BE0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aFpathconf+1 - offset byte_BE0, 12h, 0, 0, \ ; "pathconf"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aFclose - offset byte_BE0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aBindtextdomain - offset byte_BE0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aDcgettext - offset byte_BE0, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_BE0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStrlen - offset byte_BE0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLxstat - offset byte_BE0, 12h, 0, 0, \ ; "__lxstat"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aOpenat - offset byte_BE0, 12h, 0, 0, \ ; "openat"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStackChkFail - offset byte_BE0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aGetuid - offset byte_BE0, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGetoptLong - offset byte_BE0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aMbrtowc - offset byte_BE0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFxstatat - offset byte_BE0, 12h, 0, 0, \ ; "__fxstatat"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aOverflow - offset byte_BE0, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aStrrchr - offset byte_BE0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aLseek - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aGettimeofday - offset byte_BE0, 12h, 0, 0, \ ; "gettimeofday"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aAssertFail - offset byte_BE0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemset - offset byte_BE0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aGetcwd - offset byte_BE0, 12h, 0, 0, \ ; "getcwd"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFclose+1 - offset byte_BE0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRewinddir - offset byte_BE0, 12h, 0, 0, \ ; "rewinddir"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aStrspn - offset byte_BE0, 12h, 0, 0, \ ; "strspn"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aClosedir - offset byte_BE0, 12h, 0, 0, \ ; "closedir"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aLibcStartMain - offset byte_BE0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemcmp - offset byte_BE0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFputsUnlocked - offset byte_BE0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCalloc - offset byte_BE0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aGetdelim - offset byte_BE0, 12h, 0, 0, \ ; "__getdelim"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aStrcmp - offset byte_BE0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFpathconf - offset byte_BE0, 12h, 0, 0, \ ; "fpathconf"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aRpmatch - offset byte_BE0, 12h, 0, 0, \ ; "rpmatch"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aSyscall - offset byte_BE0, 12h, 0, 0, \ ; "syscall"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aGmonStart - offset byte_BE0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMemcpy - offset byte_BE0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFileno - offset byte_BE0, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aGetgid - offset byte_BE0, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aXstat - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000808                            0>
LOAD:0000000000000820                 Elf64_Sym <offset aReaddir - offset byte_BE0, 12h, 0, 0, \ ; "readdir"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aMalloc - offset byte_BE0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFflush - offset byte_BE0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aNlLanginfo - offset byte_BE0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aFreading - offset byte_BE0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aRealloc - offset byte_BE0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFdopen - offset byte_BE0, 12h, 0, 0, \ ; "fdopen"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aSymlinkat+3 - offset byte_BE0, 12h, 0, 0, \ ; "linkat"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aSetlocale - offset byte_BE0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aPrintfChk - offset byte_BE0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aSetvbuf - offset byte_BE0, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aMempcpy - offset byte_BE0, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aMemmove - offset byte_BE0, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aError - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000958                            0>
LOAD:0000000000000970                 Elf64_Sym <offset aExplicitBzeroC - offset byte_BE0, 12h, 0, 0, \ ; "__explicit_bzero_chk"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aFdopen+2 - offset byte_BE0, 12h, 0, 0, \ ; "open"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aFseeko - offset byte_BE0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aFopen - offset byte_BE0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000009B8                            0>
LOAD:00000000000009D0                 Elf64_Sym <offset aFdopendir - offset byte_BE0, 12h, 0, 0, \ ; "fdopendir"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aCxaAtexit - offset byte_BE0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aRenameat - offset byte_BE0, 12h, 0, 0, \ ; "renameat"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aGetppid - offset byte_BE0, 12h, 0, 0, \ ; "getppid"
LOAD:0000000000000A18                            offset dword_0, 0>
LOAD:0000000000000A30                 Elf64_Sym <offset aExit+1 - offset byte_BE0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000A30                            offset dword_0, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aFwrite - offset byte_BE0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000A48                            offset dword_0, 0>
LOAD:0000000000000A60                 Elf64_Sym <offset aFprintfChk - offset byte_BE0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000A60                            offset dword_0, 0>
LOAD:0000000000000A78                 Elf64_Sym <offset aItmRegistertmc - offset byte_BE0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000A78                            offset dword_0, 0>
LOAD:0000000000000A90                 Elf64_Sym <offset aMbsinit - offset byte_BE0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000A90                            offset dword_0, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aSymlinkat - offset byte_BE0, 12h, 0, 0, \ ; "symlinkat"
LOAD:0000000000000AA8                            offset dword_0, 0>
LOAD:0000000000000AC0                 Elf64_Sym <offset aIswprint - offset byte_BE0, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000AC0                            offset dword_0, 0>
LOAD:0000000000000AD8                 Elf64_Sym <offset aCxaFinalize - offset byte_BE0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000AD8                            offset dword_0, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aCtypeBLoc - offset byte_BE0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000AF0                            offset dword_0, 0>
LOAD:0000000000000B08                 Elf64_Sym <offset aStdout - offset byte_BE0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000B08                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000B20                 Elf64_Sym <offset aProgname - offset byte_BE0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000B20                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B38                 Elf64_Sym <offset aStdin - offset byte_BE0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000B38                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000B50                 Elf64_Sym <offset aProgramInvocat - offset byte_BE0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000B50                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B68                 Elf64_Sym <offset aPrognameFull - offset byte_BE0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000B68                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B80                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_BE0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000B80                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000B98                 Elf64_Sym <offset aStderr - offset byte_BE0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000B98                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000BB0                 Elf64_Sym <offset aOptind - offset byte_BE0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000BB0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000BC8                 Elf64_Sym <offset aOptarg - offset byte_BE0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000BC8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000BE0 ; ELF String Table
LOAD:0000000000000BE0 byte_BE0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000BE0                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000BE1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001088↓o
LOAD:0000000000000BEB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000BF2 aStrcpy         db 'strcpy',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000BF9 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000C06 aReaddir        db 'readdir',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C0E aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C18 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000C20 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000C26 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000C2E aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000BB0↑o
LOAD:0000000000000C35 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C3D aRpmatch        db 'rpmatch',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C45 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000C4F aUnlinkat       db 'unlinkat',0         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000C58 aClosedir       db 'closedir',0         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000C61 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C67 aReadChk        db '__read_chk',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000C72 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000C83 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C8C aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000C95 aMkdir          db 'mkdir',0            ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000C9B aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000CA3 aRewinddir      db 'rewinddir',0        ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000CAD aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000CB3 aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000CB9 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000CB9                                         ; LOAD:0000000000000A30↑o
LOAD:0000000000000CBF aGetpid         db 'getpid',0           ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000CC6 aStrspn         db 'strspn',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000CCD aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000CCD                                         ; DATA XREF: LOAD:0000000000000B50↑o
LOAD:0000000000000CE5 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000CF3 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000CF3                                         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000D0A aGetppid        db 'getppid',0          ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000D12 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000D19 aRenameat       db 'renameat',0         ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D22 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000D29 aFreadUnlocked  db 'fread_unlocked',0   ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000D38 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000D3F aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000D50 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000D57 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000D5F aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000D6D aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000D74 aFpathconf      db 'fpathconf',0        ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000D74                                         ; LOAD:0000000000000490↑o
LOAD:0000000000000D7E aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D84 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000D8B aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000D8B                                         ; LOAD:0000000000000670↑o
LOAD:0000000000000D92 aSymlinkat      db 'symlinkat',0        ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000D92                                         ; LOAD:00000000000008C8↑o
LOAD:0000000000000D9C aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000DA3 aFdopendir      db 'fdopendir',0        ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000DAD aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000DB5 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000DBC aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000DC8 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000DD6 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000DDD aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000BC8↑o
LOAD:0000000000000DE4 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000DEF aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000B98↑o
LOAD:0000000000000DF6 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000DFD aReadlink       db 'readlink',0         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000E06 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000E12 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000E19 aGetcwd         db 'getcwd',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000E20 aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000E2B aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000E32 aGettimeofday   db 'gettimeofday',0     ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000E3F aExplicitBzeroC db '__explicit_bzero_chk',0
LOAD:0000000000000E3F                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E54 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000E5F aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000E5F                                         ; DATA XREF: LOAD:0000000000000B80↑o
LOAD:0000000000000E7D aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000E7D                                         ; LOAD:0000000000000988↑o
LOAD:0000000000000E84 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000E93 aSyscall        db 'syscall',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000E9B aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000EA3 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000EA9 aOpenat         db 'openat',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000EB0 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000EB8 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000EC0 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000EC0                                         ; LOAD:0000000000000478↑o
LOAD:0000000000000ECF aFxstatat       db '__fxstatat',0       ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000EDA aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000EE1 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000EE1                                         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000EF3 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000EFA aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000F05 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000F14 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000F19 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000F24 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000B68↑o
LOAD:0000000000000F34 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000F41 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001098↓o
LOAD:0000000000000F4B aGlibc225       db 'GLIBC_2.25',0       ; DATA XREF: LOAD:00000000000010A8↓o
LOAD:0000000000000F56 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:00000000000010B8↓o
LOAD:0000000000000F62 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:00000000000010C8↓o
LOAD:0000000000000F6D aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:00000000000010D8↓o
LOAD:0000000000000F77 aGlibc225_0     db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:00000000000010E8↓o
LOAD:0000000000000F83 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000F83                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000F9F aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000FAE aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000FAE                                         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000FC8 ; ELF GNU Symbol Version Table
LOAD:0000000000000FC8                 dw 0
LOAD:0000000000000FCA                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000FCC                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000FCE                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000FD0                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000FD2                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000FD4                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000FD6                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000FD8                 dw 2                    ; strcpy@@GLIBC_2.2.5
LOAD:0000000000000FDA                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000FDC                 dw 3                    ; __read_chk@@GLIBC_2.4
LOAD:0000000000000FDE                 dw 2                    ; mkdir@@GLIBC_2.2.5
LOAD:0000000000000FE0                 dw 3                    ; unlinkat@@GLIBC_2.4
LOAD:0000000000000FE2                 dw 2                    ; readlink@@GLIBC_2.2.5
LOAD:0000000000000FE4                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000FE6                 dw 2                    ; getpid@@GLIBC_2.2.5
LOAD:0000000000000FE8                 dw 2                    ; fread_unlocked@@GLIBC_2.2.5
LOAD:0000000000000FEA                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000FEC                 dw 2                    ; pathconf@@GLIBC_2.2.5
LOAD:0000000000000FEE                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000FF0                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000FF2                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000FF4                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000FF6                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000FF8                 dw 2                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000FFA                 dw 3                    ; openat@@GLIBC_2.4
LOAD:0000000000000FFC                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000FFE                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000001000                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000001002                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000001004                 dw 3                    ; __fxstatat@@GLIBC_2.4
LOAD:0000000000001006                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000001008                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:000000000000100A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:000000000000100C                 dw 2                    ; gettimeofday@@GLIBC_2.2.5
LOAD:000000000000100E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000001010                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000001012                 dw 2                    ; getcwd@@GLIBC_2.2.5
LOAD:0000000000001014                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000001016                 dw 2                    ; rewinddir@@GLIBC_2.2.5
LOAD:0000000000001018                 dw 2                    ; strspn@@GLIBC_2.2.5
LOAD:000000000000101A                 dw 2                    ; closedir@@GLIBC_2.2.5
LOAD:000000000000101C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:000000000000101E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000001020                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000001022                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000001024                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000001026                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000001028                 dw 2                    ; fpathconf@@GLIBC_2.2.5
LOAD:000000000000102A                 dw 2                    ; rpmatch@@GLIBC_2.2.5
LOAD:000000000000102C                 dw 2                    ; syscall@@GLIBC_2.2.5
LOAD:000000000000102E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000001030                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000001032                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000001034                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000001036                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000001038                 dw 2                    ; readdir@@GLIBC_2.2.5
LOAD:000000000000103A                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:000000000000103C                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:000000000000103E                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000001040                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000001042                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000001044                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000001046                 dw 3                    ; linkat@@GLIBC_2.4
LOAD:0000000000001048                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:000000000000104A                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:000000000000104C                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:000000000000104E                 dw 2                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000001050                 dw 2                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000001052                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000001054                 dw 6                    ; __explicit_bzero_chk@@GLIBC_2.25
LOAD:0000000000001056                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000001058                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:000000000000105A                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:000000000000105C                 dw 3                    ; fdopendir@@GLIBC_2.4
LOAD:000000000000105E                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000001060                 dw 3                    ; renameat@@GLIBC_2.4
LOAD:0000000000001062                 dw 2                    ; getppid@@GLIBC_2.2.5
LOAD:0000000000001064                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000001066                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000001068                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:000000000000106A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:000000000000106C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:000000000000106E                 dw 3                    ; symlinkat@@GLIBC_2.4
LOAD:0000000000001070                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000001072                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000001074                 dw 7                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000001076                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000001078                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:000000000000107A                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:000000000000107C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:000000000000107E                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000001080                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000001082                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000001084                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000001086                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000001088 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001088                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_BE0, 10h, 0> ; "libc.so.6"
LOAD:0000000000001098                 Elf64_Vernaux <0D696913h, 0, 7, offset aGlibc23 - offset byte_BE0, \ ; "GLIBC_2.3"
LOAD:0000000000001098                                10h>
LOAD:00000000000010A8                 Elf64_Vernaux <6969185h, 0, 6, offset aGlibc225 - offset byte_BE0, \ ; "GLIBC_2.25"
LOAD:00000000000010A8                                10h>
LOAD:00000000000010B8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_BE0, \ ; "GLIBC_2.3.4"
LOAD:00000000000010B8                                10h>
LOAD:00000000000010C8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_BE0, \ ; "GLIBC_2.14"
LOAD:00000000000010C8                                10h>
LOAD:00000000000010D8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_BE0, \ ; "GLIBC_2.4"
LOAD:00000000000010D8                                10h>
LOAD:00000000000010E8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225_0 - offset byte_BE0, \ ; "GLIBC_2.2.5"
LOAD:00000000000010E8                                0>
LOAD:00000000000010F8 ; ELF RELA Relocation Table
LOAD:00000000000010F8                 Elf64_Rela <20F870h, 8, 2BB0h> ; R_X86_64_RELATIVE +2BB0h
LOAD:0000000000001110                 Elf64_Rela <20F878h, 8, 2B70h> ; R_X86_64_RELATIVE +2B70h
LOAD:0000000000001128                 Elf64_Rela <20F880h, 8, 0B182h> ; R_X86_64_RELATIVE +0B182h
LOAD:0000000000001140                 Elf64_Rela <20F8A0h, 8, 0B10Fh> ; R_X86_64_RELATIVE +0B10Fh
LOAD:0000000000001158                 Elf64_Rela <20F8C0h, 8, 0B189h> ; R_X86_64_RELATIVE +0B189h
LOAD:0000000000001170                 Elf64_Rela <20F8E0h, 8, 0B198h> ; R_X86_64_RELATIVE +0B198h
LOAD:0000000000001188                 Elf64_Rela <20F900h, 8, 0B1ACh> ; R_X86_64_RELATIVE +0B1ACh
LOAD:00000000000011A0                 Elf64_Rela <20F920h, 8, 0B1B2h> ; R_X86_64_RELATIVE +0B1B2h
LOAD:00000000000011B8                 Elf64_Rela <20F940h, 8, 0B1BEh> ; R_X86_64_RELATIVE +0B1BEh
LOAD:00000000000011D0                 Elf64_Rela <20F960h, 8, 0B19Bh> ; R_X86_64_RELATIVE +0B19Bh
LOAD:00000000000011E8                 Elf64_Rela <20F980h, 8, 0B1C5h> ; R_X86_64_RELATIVE +0B1C5h
LOAD:0000000000001200                 Elf64_Rela <20F9A0h, 8, 0B1CDh> ; R_X86_64_RELATIVE +0B1CDh
LOAD:0000000000001218                 Elf64_Rela <20F9C0h, 8, 0B1D6h> ; R_X86_64_RELATIVE +0B1D6h
LOAD:0000000000001230                 Elf64_Rela <20F9E0h, 8, 0B1DFh> ; R_X86_64_RELATIVE +0B1DFh
LOAD:0000000000001248                 Elf64_Rela <20FA00h, 8, 0B1E8h> ; R_X86_64_RELATIVE +0B1E8h
LOAD:0000000000001260                 Elf64_Rela <20FA20h, 8, 0B1F0h> ; R_X86_64_RELATIVE +0B1F0h
LOAD:0000000000001278                 Elf64_Rela <20FA40h, 8, 0B1F5h> ; R_X86_64_RELATIVE +0B1F5h
LOAD:0000000000001290                 Elf64_Rela <20FA80h, 8, 0BF9Ch> ; R_X86_64_RELATIVE +0BF9Ch
LOAD:00000000000012A8                 Elf64_Rela <20FA88h, 8, 0BFA1h> ; R_X86_64_RELATIVE +0BFA1h
LOAD:00000000000012C0                 Elf64_Rela <20FA90h, 8, 0BFA5h> ; R_X86_64_RELATIVE +0BFA5h
LOAD:00000000000012D8                 Elf64_Rela <20FA98h, 8, 0BFACh> ; R_X86_64_RELATIVE +0BFACh
LOAD:00000000000012F0                 Elf64_Rela <20FAA0h, 8, 0BFB2h> ; R_X86_64_RELATIVE +0BFB2h
LOAD:0000000000001308                 Elf64_Rela <20FAA8h, 8, 0BFBBh> ; R_X86_64_RELATIVE +0BFBBh
LOAD:0000000000001320                 Elf64_Rela <20FAB0h, 8, 0BFBFh> ; R_X86_64_RELATIVE +0BFBFh
LOAD:0000000000001338                 Elf64_Rela <20FAB8h, 8, 0BFC8h> ; R_X86_64_RELATIVE +0BFC8h
LOAD:0000000000001350                 Elf64_Rela <20FAE0h, 8, 0C139h> ; R_X86_64_RELATIVE +0C139h
LOAD:0000000000001368                 Elf64_Rela <20FAE8h, 8, 0C141h> ; R_X86_64_RELATIVE +0C141h
LOAD:0000000000001380                 Elf64_Rela <20FAF0h, 8, 0C147h> ; R_X86_64_RELATIVE +0C147h
LOAD:0000000000001398                 Elf64_Rela <20FAF8h, 8, 0C154h> ; R_X86_64_RELATIVE +0C154h
LOAD:00000000000013B0                 Elf64_Rela <20FB00h, 8, 0C161h> ; R_X86_64_RELATIVE +0C161h
LOAD:00000000000013C8                 Elf64_Rela <20FB08h, 8, 0B1E6h> ; R_X86_64_RELATIVE +0B1E6h
LOAD:00000000000013E0                 Elf64_Rela <20FB10h, 8, 0C175h> ; R_X86_64_RELATIVE +0C175h
LOAD:00000000000013F8                 Elf64_Rela <20FB18h, 8, 0C15Ah> ; R_X86_64_RELATIVE +0C15Ah
LOAD:0000000000001410                 Elf64_Rela <20FB20h, 8, 0B0F5h> ; R_X86_64_RELATIVE +0B0F5h
LOAD:0000000000001428                 Elf64_Rela <20FB28h, 8, 0C17Dh> ; R_X86_64_RELATIVE +0C17Dh
LOAD:0000000000001440                 Elf64_Rela <210008h, 8, 210008h> ; R_X86_64_RELATIVE +210008h
LOAD:0000000000001458                 Elf64_Rela <210018h, 8, 0BF6Fh> ; R_X86_64_RELATIVE +0BF6Fh
LOAD:0000000000001470                 Elf64_Rela <210080h, 8, 210090h> ; R_X86_64_RELATIVE +210090h
LOAD:0000000000001488                 Elf64_Rela <210098h, 8, 210160h> ; R_X86_64_RELATIVE +210160h
LOAD:00000000000014A0                 Elf64_Rela <2100A0h, 8, 99C0h> ; R_X86_64_RELATIVE +99C0h
LOAD:00000000000014B8                 Elf64_Rela <20FFC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000014D0                 Elf64_Rela <20FFD0h, 2A00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000014E8                 Elf64_Rela <20FFD8h, 3300000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001500                 Elf64_Rela <20FFE0h, 5100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001518                 Elf64_Rela <20FFE8h, 5500000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001530                 Elf64_Rela <2100C0h, 5800000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001548                 Elf64_Rela <2100C8h, 5700000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001560                 Elf64_Rela <2100D0h, 5900000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001578                 Elf64_Rela <2100D8h, 5E00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001590                 Elf64_Rela <2100E0h, 5F00000005h, 0> ; R_X86_64_COPY optarg
LOAD:00000000000015A8                 Elf64_Rela <2100E8h, 5B00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000015C0                 Elf64_Rela <210100h, 5D00000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000015D8 ; ELF JMPREL Relocation Table
LOAD:00000000000015D8                 Elf64_Rela <20FD40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000015F0                 Elf64_Rela <20FD48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001608                 Elf64_Rela <20FD50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001620                 Elf64_Rela <20FD58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001638                 Elf64_Rela <20FD60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001650                 Elf64_Rela <20FD68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001668                 Elf64_Rela <20FD70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT strcpy
LOAD:0000000000001680                 Elf64_Rela <20FD78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001698                 Elf64_Rela <20FD80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT __read_chk
LOAD:00000000000016B0                 Elf64_Rela <20FD88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT mkdir
LOAD:00000000000016C8                 Elf64_Rela <20FD90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT unlinkat
LOAD:00000000000016E0                 Elf64_Rela <20FD98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT readlink
LOAD:00000000000016F8                 Elf64_Rela <20FDA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001710                 Elf64_Rela <20FDA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getpid
LOAD:0000000000001728                 Elf64_Rela <20FDB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT fread_unlocked
LOAD:0000000000001740                 Elf64_Rela <20FDB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001758                 Elf64_Rela <20FDC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT pathconf
LOAD:0000000000001770                 Elf64_Rela <20FDC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001788                 Elf64_Rela <20FDD0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000017A0                 Elf64_Rela <20FDD8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000017B8                 Elf64_Rela <20FDE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000017D0                 Elf64_Rela <20FDE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000017E8                 Elf64_Rela <20FDF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000001800                 Elf64_Rela <20FDF8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT openat
LOAD:0000000000001818                 Elf64_Rela <20FE00h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001830                 Elf64_Rela <20FE08h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001848                 Elf64_Rela <20FE10h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001860                 Elf64_Rela <20FE18h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001878                 Elf64_Rela <20FE20h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstatat
LOAD:0000000000001890                 Elf64_Rela <20FE28h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000018A8                 Elf64_Rela <20FE30h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000018C0                 Elf64_Rela <20FE38h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000018D8                 Elf64_Rela <20FE40h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT gettimeofday
LOAD:00000000000018F0                 Elf64_Rela <20FE48h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001908                 Elf64_Rela <20FE50h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001920                 Elf64_Rela <20FE58h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getcwd
LOAD:0000000000001938                 Elf64_Rela <20FE60h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001950                 Elf64_Rela <20FE68h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT rewinddir
LOAD:0000000000001968                 Elf64_Rela <20FE70h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT strspn
LOAD:0000000000001980                 Elf64_Rela <20FE78h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT closedir
LOAD:0000000000001998                 Elf64_Rela <20FE80h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000019B0                 Elf64_Rela <20FE88h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000019C8                 Elf64_Rela <20FE90h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000019E0                 Elf64_Rela <20FE98h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:00000000000019F8                 Elf64_Rela <20FEA0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001A10                 Elf64_Rela <20FEA8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fpathconf
LOAD:0000000000001A28                 Elf64_Rela <20FEB0h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT rpmatch
LOAD:0000000000001A40                 Elf64_Rela <20FEB8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT syscall
LOAD:0000000000001A58                 Elf64_Rela <20FEC0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001A70                 Elf64_Rela <20FEC8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001A88                 Elf64_Rela <20FED0h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000001AA0                 Elf64_Rela <20FED8h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001AB8                 Elf64_Rela <20FEE0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT readdir
LOAD:0000000000001AD0                 Elf64_Rela <20FEE8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001AE8                 Elf64_Rela <20FEF0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001B00                 Elf64_Rela <20FEF8h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001B18                 Elf64_Rela <20FF00h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001B30                 Elf64_Rela <20FF08h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001B48                 Elf64_Rela <20FF10h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001B60                 Elf64_Rela <20FF18h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT linkat
LOAD:0000000000001B78                 Elf64_Rela <20FF20h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001B90                 Elf64_Rela <20FF28h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001BA8                 Elf64_Rela <20FF30h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001BC0                 Elf64_Rela <20FF38h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001BD8                 Elf64_Rela <20FF40h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001BF0                 Elf64_Rela <20FF48h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001C08                 Elf64_Rela <20FF50h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __explicit_bzero_chk
LOAD:0000000000001C20                 Elf64_Rela <20FF58h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001C38                 Elf64_Rela <20FF60h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001C50                 Elf64_Rela <20FF68h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001C68                 Elf64_Rela <20FF70h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT fdopendir
LOAD:0000000000001C80                 Elf64_Rela <20FF78h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001C98                 Elf64_Rela <20FF80h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT renameat
LOAD:0000000000001CB0                 Elf64_Rela <20FF88h, 4D00000007h, 0> ; R_X86_64_JUMP_SLOT getppid
LOAD:0000000000001CC8                 Elf64_Rela <20FF90h, 4E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001CE0                 Elf64_Rela <20FF98h, 4F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001CF8                 Elf64_Rela <20FFA0h, 5000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001D10                 Elf64_Rela <20FFA8h, 5200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001D28                 Elf64_Rela <20FFB0h, 5300000007h, 0> ; R_X86_64_JUMP_SLOT symlinkat
LOAD:0000000000001D40                 Elf64_Rela <20FFB8h, 5400000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001D58                 Elf64_Rela <20FFC0h, 5600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001D58 LOAD            ends
LOAD:0000000000001D58
.init:0000000000001D70 ; ===========================================================================
.init:0000000000001D70
.init:0000000000001D70 ; Segment type: Pure code
.init:0000000000001D70 ; Segment permissions: Read/Execute
.init:0000000000001D70 _init           segment dword public 'CODE' use64
.init:0000000000001D70                 assume cs:_init
.init:0000000000001D70                 ;org 1D70h
.init:0000000000001D70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001D70
.init:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.init:0000000000001D70
.init:0000000000001D70
.init:0000000000001D70                 public _init_proc
.init:0000000000001D70 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001D70                 sub     rsp, 8          ; _init
.init:0000000000001D74                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001D7B                 test    rax, rax
.init:0000000000001D7E                 jz      short loc_1D82
.init:0000000000001D80                 call    rax ; __gmon_start__
.init:0000000000001D82
.init:0000000000001D82 loc_1D82:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001D82                 add     rsp, 8
.init:0000000000001D86                 retn
.init:0000000000001D86 _init_proc      endp
.init:0000000000001D86
.init:0000000000001D86 _init           ends
.init:0000000000001D86
LOAD:0000000000001D87 ; ===========================================================================
LOAD:0000000000001D87
LOAD:0000000000001D87 ; Segment type: Pure code
LOAD:0000000000001D87 ; Segment permissions: Read/Execute
LOAD:0000000000001D87 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001D87                 assume cs:LOAD
LOAD:0000000000001D87                 ;org 1D87h
LOAD:0000000000001D87                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001D87                 align 10h
LOAD:0000000000001D87 LOAD            ends
LOAD:0000000000001D87
.plt:0000000000001D90 ; ===========================================================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Segment type: Pure code
.plt:0000000000001D90 ; Segment permissions: Read/Execute
.plt:0000000000001D90 _plt            segment para public 'CODE' use64
.plt:0000000000001D90                 assume cs:_plt
.plt:0000000000001D90                 ;org 1D90h
.plt:0000000000001D90                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90
.plt:0000000000001D90 sub_1D90        proc near               ; CODE XREF: .plt:0000000000001DAB↓j
.plt:0000000000001D90                                         ; .plt:0000000000001DBB↓j ...
.plt:0000000000001D90 ; __unwind {
.plt:0000000000001D90                 push    cs:qword_20FD30
.plt:0000000000001D96                 jmp     cs:qword_20FD38
.plt:0000000000001D96 sub_1D90        endp
.plt:0000000000001D96
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D9C                 align 20h
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; char *getenv(const char *name)
.plt:0000000000001DA0 _getenv         proc near               ; CODE XREF: set_simple_backup_suffix+37↓p
.plt:0000000000001DA0                                         ; xget_version+15↓p
.plt:0000000000001DA0                 jmp     cs:getenv_ptr
.plt:0000000000001DA0 _getenv         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    0
.plt:0000000000001DAB                 jmp     sub_1D90
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; void free(void *ptr)
.plt:0000000000001DB0 _free           proc near               ; CODE XREF: main+500↓p
.plt:0000000000001DB0                                         ; do_link+105↓p ...
.plt:0000000000001DB0                 jmp     cs:free_ptr
.plt:0000000000001DB0 _free           endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    1
.plt:0000000000001DBB                 jmp     sub_1D90
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: noreturn thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; void __noreturn abort(void)
.plt:0000000000001DC0 _abort          proc near               ; CODE XREF: safe_hasher:loc_557D↓p
.plt:0000000000001DC0                                         ; hash_get_first+3C↓p ...
.plt:0000000000001DC0                 jmp     cs:abort_ptr
.plt:0000000000001DC0 _abort          endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    2
.plt:0000000000001DCB                 jmp     sub_1D90
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; int *__errno_location(void)
.plt:0000000000001DD0 ___errno_location proc near             ; CODE XREF: main+654↓p
.plt:0000000000001DD0                                         ; main+7CC↓p ...
.plt:0000000000001DD0                 jmp     cs:__errno_location_ptr
.plt:0000000000001DD0 ___errno_location endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    3
.plt:0000000000001DDB                 jmp     sub_1D90
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001DE0 _strncmp        proc near               ; CODE XREF: usage+314↓p
.plt:0000000000001DE0                                         ; usage+3D5↓p ...
.plt:0000000000001DE0                 jmp     cs:strncmp_ptr
.plt:0000000000001DE0 _strncmp        endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    4
.plt:0000000000001DEB                 jmp     sub_1D90
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: noreturn thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; void __noreturn _exit(int status)
.plt:0000000000001DF0 __exit          proc near               ; CODE XREF: close_stdin+AE↓p
.plt:0000000000001DF0                                         ; close_stdout+88↓p
.plt:0000000000001DF0                 jmp     cs:_exit_ptr
.plt:0000000000001DF0 __exit          endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    5
.plt:0000000000001DFB                 jmp     sub_1D90
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; char *strcpy(char *dest, const char *src)
.plt:0000000000001E00 _strcpy         proc near               ; CODE XREF: do_link+63D↓p
.plt:0000000000001E00                 jmp     cs:strcpy_ptr
.plt:0000000000001E00 _strcpy         endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    6
.plt:0000000000001E0B                 jmp     sub_1D90
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; size_t __fpending(FILE *fp)
.plt:0000000000001E10 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001E10                 jmp     cs:__fpending_ptr
.plt:0000000000001E10 ___fpending     endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    7
.plt:0000000000001E1B                 jmp     sub_1D90
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ___read_chk     proc near               ; CODE XREF: randread_new+118↓p
.plt:0000000000001E20                 jmp     cs:__read_chk_ptr
.plt:0000000000001E20 ___read_chk     endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    8
.plt:0000000000001E2B                 jmp     sub_1D90
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; int mkdir(const char *path, __mode_t mode)
.plt:0000000000001E30 _mkdir          proc near               ; CODE XREF: try_dir+5↓j
.plt:0000000000001E30                 jmp     cs:mkdir_ptr
.plt:0000000000001E30 _mkdir          endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    9
.plt:0000000000001E3B                 jmp     sub_1D90
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; int unlinkat(int fd, const char *name, int flag)
.plt:0000000000001E40 _unlinkat       proc near               ; CODE XREF: force_linkat+142↓p
.plt:0000000000001E40                                         ; force_symlinkat+131↓p
.plt:0000000000001E40                 jmp     cs:unlinkat_ptr
.plt:0000000000001E40 _unlinkat       endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    0Ah
.plt:0000000000001E4B                 jmp     sub_1D90
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; ssize_t readlink(const char *path, char *buf, size_t len)
.plt:0000000000001E50 _readlink       proc near               ; CODE XREF: areadlink_with_size+59↓p
.plt:0000000000001E50                 jmp     cs:readlink_ptr
.plt:0000000000001E50 _readlink       endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    0Bh
.plt:0000000000001E5B                 jmp     sub_1D90
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001E60 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001E60                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001E60                 jmp     cs:fcntl_ptr
.plt:0000000000001E60 _fcntl          endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    0Ch
.plt:0000000000001E6B                 jmp     sub_1D90
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; __pid_t getpid(void)
.plt:0000000000001E70 _getpid         proc near               ; CODE XREF: randread_new+197↓p
.plt:0000000000001E70                                         ; randread_new+2C2↓p
.plt:0000000000001E70                 jmp     cs:getpid_ptr
.plt:0000000000001E70 _getpid         endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    0Dh
.plt:0000000000001E7B                 jmp     sub_1D90
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001E80 _fread_unlocked proc near               ; CODE XREF: randread+61↓p
.plt:0000000000001E80                 jmp     cs:fread_unlocked_ptr
.plt:0000000000001E80 _fread_unlocked endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    0Eh
.plt:0000000000001E8B                 jmp     sub_1D90
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; char *textdomain(const char *domainname)
.plt:0000000000001E90 _textdomain     proc near               ; CODE XREF: main+68↓p
.plt:0000000000001E90                 jmp     cs:textdomain_ptr
.plt:0000000000001E90 _textdomain     endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    0Fh
.plt:0000000000001E9B                 jmp     sub_1D90
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; __int64 pathconf(const char *path, int name)
.plt:0000000000001EA0 _pathconf       proc near               ; CODE XREF: backupfile_internal+5AF↓p
.plt:0000000000001EA0                 jmp     cs:pathconf_ptr
.plt:0000000000001EA0 _pathconf       endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    10h
.plt:0000000000001EAB                 jmp     sub_1D90
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ; int fclose(FILE *stream)
.plt:0000000000001EB0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001EB0                                         ; rpl_fclose+6B↓j
.plt:0000000000001EB0                 jmp     cs:fclose_ptr
.plt:0000000000001EB0 _fclose         endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    11h
.plt:0000000000001EBB                 jmp     sub_1D90
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001EC0 _bindtextdomain proc near               ; CODE XREF: main+5C↓p
.plt:0000000000001EC0                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001EC0 _bindtextdomain endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    12h
.plt:0000000000001ECB                 jmp     sub_1D90
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001ED0 _dcgettext      proc near               ; CODE XREF: main+2A0↓p
.plt:0000000000001ED0                                         ; main+3B9↓p ...
.plt:0000000000001ED0                 jmp     cs:dcgettext_ptr
.plt:0000000000001ED0 _dcgettext      endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    13h
.plt:0000000000001EDB                 jmp     sub_1D90
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001EE0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001EE0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001EE0 ___ctype_get_mb_cur_max endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    14h
.plt:0000000000001EEB                 jmp     sub_1D90
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; size_t strlen(const char *s)
.plt:0000000000001EF0 _strlen         proc near               ; CODE XREF: do_link+613↓p
.plt:0000000000001EF0                                         ; buffer_or_output+19↓p ...
.plt:0000000000001EF0                 jmp     cs:strlen_ptr
.plt:0000000000001EF0 _strlen         endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    15h
.plt:0000000000001EFB                 jmp     sub_1D90
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001F00 ___lxstat       proc near               ; CODE XREF: canonicalize_filename_mode:loc_4BB0↓p
.plt:0000000000001F00                                         ; try_nocreate+26↓p
.plt:0000000000001F00                 jmp     cs:__lxstat_ptr
.plt:0000000000001F00 ___lxstat       endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    16h
.plt:0000000000001F0B                 jmp     sub_1D90
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int openat(int fd, const char *file, int oflag, ...)
.plt:0000000000001F10 _openat         proc near               ; CODE XREF: openat_safer+22↓p
.plt:0000000000001F10                 jmp     cs:openat_ptr
.plt:0000000000001F10 _openat         endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    17h
.plt:0000000000001F1B                 jmp     sub_1D90
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: noreturn thunk
.plt:0000000000001F20
.plt:0000000000001F20 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2A43↓p
.plt:0000000000001F20                                         ; do_link:loc_36A1↓p ...
.plt:0000000000001F20                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001F20 ___stack_chk_fail endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    18h
.plt:0000000000001F2B                 jmp     sub_1D90
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; __uid_t getuid(void)
.plt:0000000000001F30 _getuid         proc near               ; CODE XREF: randread_new+1C4↓p
.plt:0000000000001F30                 jmp     cs:getuid_ptr
.plt:0000000000001F30 _getuid         endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    19h
.plt:0000000000001F3B                 jmp     sub_1D90
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001F40 _getopt_long    proc near               ; CODE XREF: main+C6↓p
.plt:0000000000001F40                 jmp     cs:getopt_long_ptr
.plt:0000000000001F40 _getopt_long    endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    1Ah
.plt:0000000000001F4B                 jmp     sub_1D90
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001F50 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001F50                 jmp     cs:mbrtowc_ptr
.plt:0000000000001F50 _mbrtowc        endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    1Bh
.plt:0000000000001F5B                 jmp     sub_1D90
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; int __fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
.plt:0000000000001F60 ___fxstatat     proc near               ; CODE XREF: do_link+8E↓p
.plt:0000000000001F60                                         ; do_link+351↓p ...
.plt:0000000000001F60                 jmp     cs:__fxstatat_ptr
.plt:0000000000001F60 ___fxstatat     endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    1Ch
.plt:0000000000001F6B                 jmp     sub_1D90
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001F70 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000001F70                 jmp     cs:__overflow_ptr
.plt:0000000000001F70 ___overflow     endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    1Dh
.plt:0000000000001F7B                 jmp     sub_1D90
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; char *strrchr(const char *s, int c)
.plt:0000000000001F80 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001F80                 jmp     cs:strrchr_ptr
.plt:0000000000001F80 _strrchr        endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    1Eh
.plt:0000000000001F8B                 jmp     sub_1D90
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001F90 _lseek          proc near               ; CODE XREF: rpl_fseeko+3B↓p
.plt:0000000000001F90                                         ; rpl_fclose+59↓p
.plt:0000000000001F90                 jmp     cs:lseek_ptr
.plt:0000000000001F90 _lseek          endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    1Fh
.plt:0000000000001F9B                 jmp     sub_1D90
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
.plt:0000000000001FA0 _gettimeofday   proc near               ; CODE XREF: randread_new+188↓p
.plt:0000000000001FA0                                         ; randread_new+278↓p
.plt:0000000000001FA0                 jmp     cs:gettimeofday_ptr
.plt:0000000000001FA0 _gettimeofday   endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    20h ; ' '
.plt:0000000000001FAB                 jmp     sub_1D90
.plt:0000000000001FB0
.plt:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FB0
.plt:0000000000001FB0 ; Attributes: noreturn thunk
.plt:0000000000001FB0
.plt:0000000000001FB0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001FB0 ___assert_fail  proc near               ; CODE XREF: gen_tempname_len+30↓p
.plt:0000000000001FB0                 jmp     cs:__assert_fail_ptr
.plt:0000000000001FB0 ___assert_fail  endp
.plt:0000000000001FB0
.plt:0000000000001FB6 ; ---------------------------------------------------------------------------
.plt:0000000000001FB6                 push    21h ; '!'
.plt:0000000000001FBB                 jmp     sub_1D90
.plt:0000000000001FC0
.plt:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FC0
.plt:0000000000001FC0 ; Attributes: thunk
.plt:0000000000001FC0
.plt:0000000000001FC0 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001FC0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001FC0                                         ; xzalloc+12↓j
.plt:0000000000001FC0                 jmp     cs:memset_ptr
.plt:0000000000001FC0 _memset         endp
.plt:0000000000001FC0
.plt:0000000000001FC6 ; ---------------------------------------------------------------------------
.plt:0000000000001FC6                 push    22h ; '"'
.plt:0000000000001FCB                 jmp     sub_1D90
.plt:0000000000001FD0
.plt:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FD0
.plt:0000000000001FD0 ; Attributes: thunk
.plt:0000000000001FD0
.plt:0000000000001FD0 ; char *getcwd(char *buf, size_t size)
.plt:0000000000001FD0 _getcwd         proc near               ; CODE XREF: xgetcwd+5↓p
.plt:0000000000001FD0                 jmp     cs:getcwd_ptr
.plt:0000000000001FD0 _getcwd         endp
.plt:0000000000001FD0
.plt:0000000000001FD6 ; ---------------------------------------------------------------------------
.plt:0000000000001FD6                 push    23h ; '#'
.plt:0000000000001FDB                 jmp     sub_1D90
.plt:0000000000001FE0
.plt:0000000000001FE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FE0
.plt:0000000000001FE0 ; Attributes: thunk
.plt:0000000000001FE0
.plt:0000000000001FE0 ; int close(int fd)
.plt:0000000000001FE0 _close          proc near               ; CODE XREF: opendirat+55↓p
.plt:0000000000001FE0                                         ; fd_safer_flag+26↓p ...
.plt:0000000000001FE0                 jmp     cs:close_ptr
.plt:0000000000001FE0 _close          endp
.plt:0000000000001FE0
.plt:0000000000001FE6 ; ---------------------------------------------------------------------------
.plt:0000000000001FE6                 push    24h ; '$'
.plt:0000000000001FEB                 jmp     sub_1D90
.plt:0000000000001FF0
.plt:0000000000001FF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FF0
.plt:0000000000001FF0 ; Attributes: thunk
.plt:0000000000001FF0
.plt:0000000000001FF0 ; void rewinddir(DIR *dirp)
.plt:0000000000001FF0 _rewinddir      proc near               ; CODE XREF: backupfile_internal+101↓p
.plt:0000000000001FF0                 jmp     cs:rewinddir_ptr
.plt:0000000000001FF0 _rewinddir      endp
.plt:0000000000001FF0
.plt:0000000000001FF6 ; ---------------------------------------------------------------------------
.plt:0000000000001FF6                 push    25h ; '%'
.plt:0000000000001FFB                 jmp     sub_1D90
.plt:0000000000002000
.plt:0000000000002000 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002000
.plt:0000000000002000 ; Attributes: thunk
.plt:0000000000002000
.plt:0000000000002000 ; size_t strspn(const char *s, const char *accept)
.plt:0000000000002000 _strspn         proc near               ; CODE XREF: canonicalize_filename_mode+2A4↓p
.plt:0000000000002000                                         ; try_tempname_len+68↓p
.plt:0000000000002000                 jmp     cs:strspn_ptr
.plt:0000000000002000 _strspn         endp
.plt:0000000000002000
.plt:0000000000002006 ; ---------------------------------------------------------------------------
.plt:0000000000002006                 push    26h ; '&'
.plt:000000000000200B                 jmp     sub_1D90
.plt:0000000000002010
.plt:0000000000002010 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002010
.plt:0000000000002010 ; Attributes: thunk
.plt:0000000000002010
.plt:0000000000002010 ; int closedir(DIR *dirp)
.plt:0000000000002010 _closedir       proc near               ; CODE XREF: backupfile_internal+377↓p
.plt:0000000000002010                                         ; backupfile_internal+5DA↓p
.plt:0000000000002010                 jmp     cs:closedir_ptr
.plt:0000000000002010 _closedir       endp
.plt:0000000000002010
.plt:0000000000002016 ; ---------------------------------------------------------------------------
.plt:0000000000002016                 push    27h ; '''
.plt:000000000000201B                 jmp     sub_1D90
.plt:0000000000002020
.plt:0000000000002020 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002020
.plt:0000000000002020 ; Attributes: thunk
.plt:0000000000002020
.plt:0000000000002020 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002020 _memcmp         proc near               ; CODE XREF: backupfile_internal+163↓p
.plt:0000000000002020                                         ; backupfile_internal+1E9↓p ...
.plt:0000000000002020                 jmp     cs:memcmp_ptr
.plt:0000000000002020 _memcmp         endp
.plt:0000000000002020
.plt:0000000000002026 ; ---------------------------------------------------------------------------
.plt:0000000000002026                 push    28h ; '('
.plt:000000000000202B                 jmp     sub_1D90
.plt:0000000000002030
.plt:0000000000002030 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002030
.plt:0000000000002030 ; Attributes: thunk
.plt:0000000000002030
.plt:0000000000002030 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002030 _fputs_unlocked proc near               ; CODE XREF: usage+A6↓p
.plt:0000000000002030                                         ; usage+CB↓p ...
.plt:0000000000002030                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002030 _fputs_unlocked endp
.plt:0000000000002030
.plt:0000000000002036 ; ---------------------------------------------------------------------------
.plt:0000000000002036                 push    29h ; ')'
.plt:000000000000203B                 jmp     sub_1D90
.plt:0000000000002040
.plt:0000000000002040 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002040
.plt:0000000000002040 ; Attributes: thunk
.plt:0000000000002040
.plt:0000000000002040 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002040 _calloc         proc near               ; CODE XREF: hash_initialize+B1↓p
.plt:0000000000002040                                         ; hash_rehash+C6↓p ...
.plt:0000000000002040                 jmp     cs:calloc_ptr
.plt:0000000000002040 _calloc         endp
.plt:0000000000002040
.plt:0000000000002046 ; ---------------------------------------------------------------------------
.plt:0000000000002046                 push    2Ah ; '*'
.plt:000000000000204B                 jmp     sub_1D90
.plt:0000000000002050
.plt:0000000000002050 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002050
.plt:0000000000002050 ; Attributes: thunk
.plt:0000000000002050
.plt:0000000000002050 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000002050 ___getdelim     proc near               ; CODE XREF: yesno+3F↓p
.plt:0000000000002050                 jmp     cs:__getdelim_ptr
.plt:0000000000002050 ___getdelim     endp
.plt:0000000000002050
.plt:0000000000002056 ; ---------------------------------------------------------------------------
.plt:0000000000002056                 push    2Bh ; '+'
.plt:000000000000205B                 jmp     sub_1D90
.plt:0000000000002060
.plt:0000000000002060 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002060
.plt:0000000000002060 ; Attributes: thunk
.plt:0000000000002060
.plt:0000000000002060 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002060 _strcmp         proc near               ; CODE XREF: triple_compare_ino_str+24↓p
.plt:0000000000002060                 jmp     cs:strcmp_ptr
.plt:0000000000002060 _strcmp         endp
.plt:0000000000002060
.plt:0000000000002066 ; ---------------------------------------------------------------------------
.plt:0000000000002066                 push    2Ch ; ','
.plt:000000000000206B                 jmp     sub_1D90
.plt:0000000000002070
.plt:0000000000002070 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002070
.plt:0000000000002070 ; Attributes: thunk
.plt:0000000000002070
.plt:0000000000002070 ; __int64 fpathconf(int fd, int name)
.plt:0000000000002070 _fpathconf      proc near               ; CODE XREF: backupfile_internal+463↓p
.plt:0000000000002070                 jmp     cs:fpathconf_ptr
.plt:0000000000002070 _fpathconf      endp
.plt:0000000000002070
.plt:0000000000002076 ; ---------------------------------------------------------------------------
.plt:0000000000002076                 push    2Dh ; '-'
.plt:000000000000207B                 jmp     sub_1D90
.plt:0000000000002080
.plt:0000000000002080 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002080
.plt:0000000000002080 ; Attributes: thunk
.plt:0000000000002080
.plt:0000000000002080 ; int rpmatch(const char *response)
.plt:0000000000002080 _rpmatch        proc near               ; CODE XREF: yesno:loc_9728↓p
.plt:0000000000002080                 jmp     cs:rpmatch_ptr
.plt:0000000000002080 _rpmatch        endp
.plt:0000000000002080
.plt:0000000000002086 ; ---------------------------------------------------------------------------
.plt:0000000000002086                 push    2Eh ; '.'
.plt:000000000000208B                 jmp     sub_1D90
.plt:0000000000002090
.plt:0000000000002090 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002090
.plt:0000000000002090 ; Attributes: thunk
.plt:0000000000002090
.plt:0000000000002090 ; __int64 syscall(__int64 sysno, ...)
.plt:0000000000002090 _syscall        proc near               ; CODE XREF: renameat2+46↓p
.plt:0000000000002090                 jmp     cs:syscall_ptr
.plt:0000000000002090 _syscall        endp
.plt:0000000000002090
.plt:0000000000002096 ; ---------------------------------------------------------------------------
.plt:0000000000002096                 push    2Fh ; '/'
.plt:000000000000209B                 jmp     sub_1D90
.plt:00000000000020A0
.plt:00000000000020A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020A0
.plt:00000000000020A0 ; Attributes: thunk
.plt:00000000000020A0
.plt:00000000000020A0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000020A0 _memcpy         proc near               ; CODE XREF: do_link+631↓p
.plt:00000000000020A0                                         ; buffer_or_output+42↓p ...
.plt:00000000000020A0                 jmp     cs:memcpy_ptr
.plt:00000000000020A0 _memcpy         endp
.plt:00000000000020A0
.plt:00000000000020A6 ; ---------------------------------------------------------------------------
.plt:00000000000020A6                 push    30h ; '0'
.plt:00000000000020AB                 jmp     sub_1D90
.plt:00000000000020B0
.plt:00000000000020B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020B0
.plt:00000000000020B0 ; Attributes: thunk
.plt:00000000000020B0
.plt:00000000000020B0 ; int fileno(FILE *stream)
.plt:00000000000020B0 _fileno         proc near               ; CODE XREF: rpl_fseeko+2E↓p
.plt:00000000000020B0                                         ; rpl_fclose+7↓p ...
.plt:00000000000020B0                 jmp     cs:fileno_ptr
.plt:00000000000020B0 _fileno         endp
.plt:00000000000020B0
.plt:00000000000020B6 ; ---------------------------------------------------------------------------
.plt:00000000000020B6                 push    31h ; '1'
.plt:00000000000020BB                 jmp     sub_1D90
.plt:00000000000020C0
.plt:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020C0
.plt:00000000000020C0 ; Attributes: thunk
.plt:00000000000020C0
.plt:00000000000020C0 ; __gid_t getgid(void)
.plt:00000000000020C0 _getgid         proc near               ; CODE XREF: randread_new+1FC↓p
.plt:00000000000020C0                 jmp     cs:getgid_ptr
.plt:00000000000020C0 _getgid         endp
.plt:00000000000020C0
.plt:00000000000020C6 ; ---------------------------------------------------------------------------
.plt:00000000000020C6                 push    32h ; '2'
.plt:00000000000020CB                 jmp     sub_1D90
.plt:00000000000020D0
.plt:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020D0
.plt:00000000000020D0 ; Attributes: thunk
.plt:00000000000020D0
.plt:00000000000020D0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000020D0 ___xstat        proc near               ; CODE XREF: main+25A↓p
.plt:00000000000020D0                                         ; do_link+962↓p ...
.plt:00000000000020D0                 jmp     cs:__xstat_ptr
.plt:00000000000020D0 ___xstat        endp
.plt:00000000000020D0
.plt:00000000000020D6 ; ---------------------------------------------------------------------------
.plt:00000000000020D6                 push    33h ; '3'
.plt:00000000000020DB                 jmp     sub_1D90
.plt:00000000000020E0
.plt:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020E0
.plt:00000000000020E0 ; Attributes: thunk
.plt:00000000000020E0
.plt:00000000000020E0 ; struct dirent *readdir(DIR *dirp)
.plt:00000000000020E0 _readdir        proc near               ; CODE XREF: backupfile_internal+133↓p
.plt:00000000000020E0                                         ; backupfile_internal+2DA↓p
.plt:00000000000020E0                 jmp     cs:readdir_ptr
.plt:00000000000020E0 _readdir        endp
.plt:00000000000020E0
.plt:00000000000020E6 ; ---------------------------------------------------------------------------
.plt:00000000000020E6                 push    34h ; '4'
.plt:00000000000020EB                 jmp     sub_1D90
.plt:00000000000020F0
.plt:00000000000020F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000020F0
.plt:00000000000020F0 ; Attributes: thunk
.plt:00000000000020F0
.plt:00000000000020F0 ; void *malloc(size_t size)
.plt:00000000000020F0 _malloc         proc near               ; CODE XREF: samedir_template+22↓p
.plt:00000000000020F0                                         ; backupfile_internal+9A↓p ...
.plt:00000000000020F0                 jmp     cs:malloc_ptr
.plt:00000000000020F0 _malloc         endp
.plt:00000000000020F0
.plt:00000000000020F6 ; ---------------------------------------------------------------------------
.plt:00000000000020F6                 push    35h ; '5'
.plt:00000000000020FB                 jmp     sub_1D90
.plt:0000000000002100
.plt:0000000000002100 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002100
.plt:0000000000002100 ; Attributes: thunk
.plt:0000000000002100
.plt:0000000000002100 ; int fflush(FILE *stream)
.plt:0000000000002100 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000002100                                         ; rpl_fflush+3B↓j
.plt:0000000000002100                 jmp     cs:fflush_ptr
.plt:0000000000002100 _fflush         endp
.plt:0000000000002100
.plt:0000000000002106 ; ---------------------------------------------------------------------------
.plt:0000000000002106                 push    36h ; '6'
.plt:000000000000210B                 jmp     sub_1D90
.plt:0000000000002110
.plt:0000000000002110 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002110
.plt:0000000000002110 ; Attributes: thunk
.plt:0000000000002110
.plt:0000000000002110 ; char *nl_langinfo(nl_item item)
.plt:0000000000002110 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000002110                 jmp     cs:nl_langinfo_ptr
.plt:0000000000002110 _nl_langinfo    endp
.plt:0000000000002110
.plt:0000000000002116 ; ---------------------------------------------------------------------------
.plt:0000000000002116                 push    37h ; '7'
.plt:000000000000211B                 jmp     sub_1D90
.plt:0000000000002120
.plt:0000000000002120 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002120
.plt:0000000000002120 ; Attributes: thunk
.plt:0000000000002120
.plt:0000000000002120 ; int __freading(FILE *fp)
.plt:0000000000002120 ___freading     proc near               ; CODE XREF: rpl_fflush+9↓p
.plt:0000000000002120                                         ; rpl_fclose+13↓p
.plt:0000000000002120                 jmp     cs:__freading_ptr
.plt:0000000000002120 ___freading     endp
.plt:0000000000002120
.plt:0000000000002126 ; ---------------------------------------------------------------------------
.plt:0000000000002126                 push    38h ; '8'
.plt:000000000000212B                 jmp     sub_1D90
.plt:0000000000002130
.plt:0000000000002130 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002130
.plt:0000000000002130 ; Attributes: thunk
.plt:0000000000002130
.plt:0000000000002130 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002130 _realloc        proc near               ; CODE XREF: backupfile_internal+261↓p
.plt:0000000000002130                                         ; xrealloc+11↓p
.plt:0000000000002130                 jmp     cs:realloc_ptr
.plt:0000000000002130 _realloc        endp
.plt:0000000000002130
.plt:0000000000002136 ; ---------------------------------------------------------------------------
.plt:0000000000002136                 push    39h ; '9'
.plt:000000000000213B                 jmp     sub_1D90
.plt:0000000000002140
.plt:0000000000002140 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002140
.plt:0000000000002140 ; Attributes: thunk
.plt:0000000000002140
.plt:0000000000002140 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000002140 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000002140                 jmp     cs:fdopen_ptr
.plt:0000000000002140 _fdopen         endp
.plt:0000000000002140
.plt:0000000000002146 ; ---------------------------------------------------------------------------
.plt:0000000000002146                 push    3Ah ; ':'
.plt:000000000000214B                 jmp     sub_1D90
.plt:0000000000002150
.plt:0000000000002150 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002150
.plt:0000000000002150 ; Attributes: thunk
.plt:0000000000002150
.plt:0000000000002150 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
.plt:0000000000002150 _linkat         proc near               ; CODE XREF: atomic_link+58↓p
.plt:0000000000002150                                         ; try_link+13↓j ...
.plt:0000000000002150                 jmp     cs:linkat_ptr
.plt:0000000000002150 _linkat         endp
.plt:0000000000002150
.plt:0000000000002156 ; ---------------------------------------------------------------------------
.plt:0000000000002156                 push    3Bh ; ';'
.plt:000000000000215B                 jmp     sub_1D90
.plt:0000000000002160
.plt:0000000000002160 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002160
.plt:0000000000002160 ; Attributes: thunk
.plt:0000000000002160
.plt:0000000000002160 ; char *setlocale(int category, const char *locale)
.plt:0000000000002160 _setlocale      proc near               ; CODE XREF: main+49↓p
.plt:0000000000002160                                         ; usage+2FB↓p ...
.plt:0000000000002160                 jmp     cs:setlocale_ptr
.plt:0000000000002160 _setlocale      endp
.plt:0000000000002160
.plt:0000000000002166 ; ---------------------------------------------------------------------------
.plt:0000000000002166                 push    3Ch ; '<'
.plt:000000000000216B                 jmp     sub_1D90
.plt:0000000000002170
.plt:0000000000002170 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002170
.plt:0000000000002170 ; Attributes: thunk
.plt:0000000000002170
.plt:0000000000002170 ___printf_chk   proc near               ; CODE XREF: do_link+163↓p
.plt:0000000000002170                                         ; usage+81↓p ...
.plt:0000000000002170                 jmp     cs:__printf_chk_ptr
.plt:0000000000002170 ___printf_chk   endp
.plt:0000000000002170
.plt:0000000000002176 ; ---------------------------------------------------------------------------
.plt:0000000000002176                 push    3Dh ; '='
.plt:000000000000217B                 jmp     sub_1D90
.plt:0000000000002180
.plt:0000000000002180 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002180
.plt:0000000000002180 ; Attributes: thunk
.plt:0000000000002180
.plt:0000000000002180 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000002180 _setvbuf        proc near               ; CODE XREF: randread_new+82↓p
.plt:0000000000002180                 jmp     cs:setvbuf_ptr
.plt:0000000000002180 _setvbuf        endp
.plt:0000000000002180
.plt:0000000000002186 ; ---------------------------------------------------------------------------
.plt:0000000000002186                 push    3Eh ; '>'
.plt:000000000000218B                 jmp     sub_1D90
.plt:0000000000002190
.plt:0000000000002190 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002190
.plt:0000000000002190 ; Attributes: thunk
.plt:0000000000002190
.plt:0000000000002190 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000002190 _mempcpy        proc near               ; CODE XREF: samedir_template+3A↓p
.plt:0000000000002190                                         ; mfile_name_concat+AD↓p ...
.plt:0000000000002190                 jmp     cs:mempcpy_ptr
.plt:0000000000002190 _mempcpy        endp
.plt:0000000000002190
.plt:0000000000002196 ; ---------------------------------------------------------------------------
.plt:0000000000002196                 push    3Fh ; '?'
.plt:000000000000219B                 jmp     sub_1D90
.plt:00000000000021A0
.plt:00000000000021A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021A0
.plt:00000000000021A0 ; Attributes: thunk
.plt:00000000000021A0
.plt:00000000000021A0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:00000000000021A0 _memmove        proc near               ; CODE XREF: canonicalize_filename_mode+4A8↓p
.plt:00000000000021A0                 jmp     cs:memmove_ptr
.plt:00000000000021A0 _memmove        endp
.plt:00000000000021A0
.plt:00000000000021A6 ; ---------------------------------------------------------------------------
.plt:00000000000021A6                 push    40h ; '@'
.plt:00000000000021AB                 jmp     sub_1D90
.plt:00000000000021B0
.plt:00000000000021B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021B0
.plt:00000000000021B0 ; Attributes: thunk
.plt:00000000000021B0
.plt:00000000000021B0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000021B0 _error          proc near               ; CODE XREF: main+2B4↓p
.plt:00000000000021B0                                         ; main+668↓p ...
.plt:00000000000021B0                 jmp     cs:error_ptr
.plt:00000000000021B0 _error          endp
.plt:00000000000021B0
.plt:00000000000021B6 ; ---------------------------------------------------------------------------
.plt:00000000000021B6                 push    41h ; 'A'
.plt:00000000000021BB                 jmp     sub_1D90
.plt:00000000000021C0
.plt:00000000000021C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021C0
.plt:00000000000021C0 ; Attributes: thunk
.plt:00000000000021C0
.plt:00000000000021C0 ___explicit_bzero_chk proc near         ; CODE XREF: randint_free+10↓p
.plt:00000000000021C0                                         ; randint_all_free+32↓p ...
.plt:00000000000021C0                 jmp     cs:__explicit_bzero_chk_ptr
.plt:00000000000021C0 ___explicit_bzero_chk endp
.plt:00000000000021C0
.plt:00000000000021C6 ; ---------------------------------------------------------------------------
.plt:00000000000021C6                 push    42h ; 'B'
.plt:00000000000021CB                 jmp     sub_1D90
.plt:00000000000021D0
.plt:00000000000021D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021D0
.plt:00000000000021D0 ; Attributes: thunk
.plt:00000000000021D0
.plt:00000000000021D0 ; int open(const char *file, int oflag, ...)
.plt:00000000000021D0 _open           proc near               ; CODE XREF: try_file+11↓j
.plt:00000000000021D0                                         ; randread_new+EA↓p
.plt:00000000000021D0                 jmp     cs:open_ptr
.plt:00000000000021D0 _open           endp
.plt:00000000000021D0
.plt:00000000000021D6 ; ---------------------------------------------------------------------------
.plt:00000000000021D6                 push    43h ; 'C'
.plt:00000000000021DB                 jmp     sub_1D90
.plt:00000000000021E0
.plt:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021E0
.plt:00000000000021E0 ; Attributes: thunk
.plt:00000000000021E0
.plt:00000000000021E0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000021E0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_97EA↓j
.plt:00000000000021E0                 jmp     cs:fseeko_ptr
.plt:00000000000021E0 _fseeko         endp
.plt:00000000000021E0
.plt:00000000000021E6 ; ---------------------------------------------------------------------------
.plt:00000000000021E6                 push    44h ; 'D'
.plt:00000000000021EB                 jmp     sub_1D90
.plt:00000000000021F0
.plt:00000000000021F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000021F0
.plt:00000000000021F0 ; Attributes: thunk
.plt:00000000000021F0
.plt:00000000000021F0 ; FILE *fopen(const char *filename, const char *modes)
.plt:00000000000021F0 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:00000000000021F0                 jmp     cs:fopen_ptr
.plt:00000000000021F0 _fopen          endp
.plt:00000000000021F0
.plt:00000000000021F6 ; ---------------------------------------------------------------------------
.plt:00000000000021F6                 push    45h ; 'E'
.plt:00000000000021FB                 jmp     sub_1D90
.plt:0000000000002200
.plt:0000000000002200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002200
.plt:0000000000002200 ; Attributes: thunk
.plt:0000000000002200
.plt:0000000000002200 ; DIR *fdopendir(int fd)
.plt:0000000000002200 _fdopendir      proc near               ; CODE XREF: opendirat+22↓p
.plt:0000000000002200                 jmp     cs:fdopendir_ptr
.plt:0000000000002200 _fdopendir      endp
.plt:0000000000002200
.plt:0000000000002206 ; ---------------------------------------------------------------------------
.plt:0000000000002206                 push    46h ; 'F'
.plt:000000000000220B                 jmp     sub_1D90
.plt:0000000000002210
.plt:0000000000002210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002210
.plt:0000000000002210 ; Attributes: thunk
.plt:0000000000002210
.plt:0000000000002210 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002210 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002210                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002210 ___cxa_atexit   endp
.plt:0000000000002210
.plt:0000000000002216 ; ---------------------------------------------------------------------------
.plt:0000000000002216                 push    47h ; 'G'
.plt:000000000000221B                 jmp     sub_1D90
.plt:0000000000002220
.plt:0000000000002220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002220
.plt:0000000000002220 ; Attributes: thunk
.plt:0000000000002220
.plt:0000000000002220 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
.plt:0000000000002220 _renameat       proc near               ; CODE XREF: do_link+2DA↓p
.plt:0000000000002220                                         ; do_link+84E↓p ...
.plt:0000000000002220                 jmp     cs:renameat_ptr
.plt:0000000000002220 _renameat       endp
.plt:0000000000002220
.plt:0000000000002226 ; ---------------------------------------------------------------------------
.plt:0000000000002226                 push    48h ; 'H'
.plt:000000000000222B                 jmp     sub_1D90
.plt:0000000000002230
.plt:0000000000002230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002230
.plt:0000000000002230 ; Attributes: thunk
.plt:0000000000002230
.plt:0000000000002230 ; __pid_t getppid(void)
.plt:0000000000002230 _getppid        proc near               ; CODE XREF: randread_new+1A3↓p
.plt:0000000000002230                                         ; randread_new+2F7↓p
.plt:0000000000002230                 jmp     cs:getppid_ptr
.plt:0000000000002230 _getppid        endp
.plt:0000000000002230
.plt:0000000000002236 ; ---------------------------------------------------------------------------
.plt:0000000000002236                 push    49h ; 'I'
.plt:000000000000223B                 jmp     sub_1D90
.plt:0000000000002240
.plt:0000000000002240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002240
.plt:0000000000002240 ; Attributes: noreturn thunk
.plt:0000000000002240
.plt:0000000000002240 ; void __noreturn exit(int status)
.plt:0000000000002240 _exit           proc near               ; CODE XREF: main+1ED↓p
.plt:0000000000002240                                         ; usage+58↓p
.plt:0000000000002240                 jmp     cs:exit_ptr
.plt:0000000000002240 _exit           endp
.plt:0000000000002240
.plt:0000000000002246 ; ---------------------------------------------------------------------------
.plt:0000000000002246                 push    4Ah ; 'J'
.plt:000000000000224B                 jmp     sub_1D90
.plt:0000000000002250
.plt:0000000000002250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002250
.plt:0000000000002250 ; Attributes: thunk
.plt:0000000000002250
.plt:0000000000002250 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002250 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000002250                 jmp     cs:fwrite_ptr
.plt:0000000000002250 _fwrite         endp
.plt:0000000000002250
.plt:0000000000002256 ; ---------------------------------------------------------------------------
.plt:0000000000002256                 push    4Bh ; 'K'
.plt:000000000000225B                 jmp     sub_1D90
.plt:0000000000002260
.plt:0000000000002260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002260
.plt:0000000000002260 ; Attributes: thunk
.plt:0000000000002260
.plt:0000000000002260 ___fprintf_chk  proc near               ; CODE XREF: do_link+9CD↓p
.plt:0000000000002260                                         ; usage+51↓p ...
.plt:0000000000002260                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002260 ___fprintf_chk  endp
.plt:0000000000002260
.plt:0000000000002266 ; ---------------------------------------------------------------------------
.plt:0000000000002266                 push    4Ch ; 'L'
.plt:000000000000226B                 jmp     sub_1D90
.plt:0000000000002270
.plt:0000000000002270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002270
.plt:0000000000002270 ; Attributes: thunk
.plt:0000000000002270
.plt:0000000000002270 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002270 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002270                 jmp     cs:mbsinit_ptr
.plt:0000000000002270 _mbsinit        endp
.plt:0000000000002270
.plt:0000000000002276 ; ---------------------------------------------------------------------------
.plt:0000000000002276                 push    4Dh ; 'M'
.plt:000000000000227B                 jmp     sub_1D90
.plt:0000000000002280
.plt:0000000000002280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002280
.plt:0000000000002280 ; Attributes: thunk
.plt:0000000000002280
.plt:0000000000002280 ; int symlinkat(const char *from, int tofd, const char *to)
.plt:0000000000002280 _symlinkat      proc near               ; CODE XREF: atomic_link+16↓p
.plt:0000000000002280                                         ; try_symlink+C↓j ...
.plt:0000000000002280                 jmp     cs:symlinkat_ptr
.plt:0000000000002280 _symlinkat      endp
.plt:0000000000002280
.plt:0000000000002286 ; ---------------------------------------------------------------------------
.plt:0000000000002286                 push    4Eh ; 'N'
.plt:000000000000228B                 jmp     sub_1D90
.plt:0000000000002290
.plt:0000000000002290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002290
.plt:0000000000002290 ; Attributes: thunk
.plt:0000000000002290
.plt:0000000000002290 ; int iswprint(wint_t wc)
.plt:0000000000002290 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002290                 jmp     cs:iswprint_ptr
.plt:0000000000002290 _iswprint       endp
.plt:0000000000002290
.plt:0000000000002296 ; ---------------------------------------------------------------------------
.plt:0000000000002296                 push    4Fh ; 'O'
.plt:000000000000229B                 jmp     sub_1D90
.plt:00000000000022A0
.plt:00000000000022A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000022A0
.plt:00000000000022A0 ; Attributes: thunk
.plt:00000000000022A0
.plt:00000000000022A0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000022A0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000022A0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000022A0 ___ctype_b_loc  endp
.plt:00000000000022A0
.plt:00000000000022A6 ; ---------------------------------------------------------------------------
.plt:00000000000022A6                 push    50h ; 'P'
.plt:00000000000022AB                 jmp     sub_1D90
.plt:00000000000022AB ; } // starts at 1D90
.plt:00000000000022AB _plt            ends
.plt:00000000000022AB
.plt.got:00000000000022B0 ; ===========================================================================
.plt.got:00000000000022B0
.plt.got:00000000000022B0 ; Segment type: Pure code
.plt.got:00000000000022B0 ; Segment permissions: Read/Execute
.plt.got:00000000000022B0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000022B0                 assume cs:_plt_got
.plt.got:00000000000022B0                 ;org 22B0h
.plt.got:00000000000022B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000022B0
.plt.got:00000000000022B0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000022B0
.plt.got:00000000000022B0 ; Attributes: thunk
.plt.got:00000000000022B0
.plt.got:00000000000022B0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000022B0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000022B0 ; __unwind {
.plt.got:00000000000022B0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000022B0 __cxa_finalize  endp
.plt.got:00000000000022B0
.plt.got:00000000000022B0 ; ---------------------------------------------------------------------------
.plt.got:00000000000022B6                 align 8
.plt.got:00000000000022B6 ; } // starts at 22B0
.plt.got:00000000000022B6 _plt_got        ends
.plt.got:00000000000022B6
LOAD:00000000000022B8 ; ===========================================================================
LOAD:00000000000022B8
LOAD:00000000000022B8 ; Segment type: Pure code
LOAD:00000000000022B8 ; Segment permissions: Read/Execute
LOAD:00000000000022B8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000022B8                 assume cs:LOAD
LOAD:00000000000022B8                 ;org 22B8h
LOAD:00000000000022B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000022B8                 align 20h
LOAD:00000000000022B8 LOAD            ends
LOAD:00000000000022B8
.text:00000000000022C0 ; ===========================================================================
.text:00000000000022C0
.text:00000000000022C0 ; Segment type: Pure code
.text:00000000000022C0 ; Segment permissions: Read/Execute
.text:00000000000022C0 _text           segment para public 'CODE' use64
.text:00000000000022C0                 assume cs:_text
.text:00000000000022C0                 ;org 22C0h
.text:00000000000022C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000022C0
.text:00000000000022C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022C0
.text:00000000000022C0
.text:00000000000022C0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000022C0                 public main
.text:00000000000022C0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000022C0
.text:00000000000022C0 var_100         = qword ptr -100h
.text:00000000000022C0 stat_buf        = qword ptr -0F8h
.text:00000000000022C0 newfd           = dword ptr -0F0h
.text:00000000000022C0 var_EC          = dword ptr -0ECh
.text:00000000000022C0 old             = qword ptr -0E0h
.text:00000000000022C0 var_D8          = byte ptr -0D8h
.text:00000000000022C0 var_C0          = dword ptr -0C0h
.text:00000000000022C0 var_40          = qword ptr -40h
.text:00000000000022C0
.text:00000000000022C0 ; __unwind {
.text:00000000000022C0                 push    r15
.text:00000000000022C2                 push    r14
.text:00000000000022C4                 xor     r15d, r15d
.text:00000000000022C7                 push    r13
.text:00000000000022C9                 push    r12
.text:00000000000022CB                 xor     r14d, r14d
.text:00000000000022CE                 push    rbp
.text:00000000000022CF                 push    rbx
.text:00000000000022D0                 mov     ebx, edi
.text:00000000000022D2                 mov     rbp, rsi
.text:00000000000022D5                 xor     r12d, r12d
.text:00000000000022D8                 xor     r13d, r13d
.text:00000000000022DB                 sub     rsp, 0D8h
.text:00000000000022E2                 mov     rdi, [rsi]
.text:00000000000022E5                 mov     rax, fs:28h
.text:00000000000022EE                 mov     [rsp+108h+var_40], rax
.text:00000000000022F6                 xor     eax, eax
.text:00000000000022F8                 call    set_program_name
.text:00000000000022FD                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000002304                 mov     edi, 6          ; category
.text:0000000000002309                 call    _setlocale
.text:000000000000230E                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002315                 lea     rdi, domainname ; "coreutils"
.text:000000000000231C                 call    _bindtextdomain
.text:0000000000002321                 lea     rdi, domainname ; "coreutils"
.text:0000000000002328                 call    _textdomain
.text:000000000000232D                 lea     rdi, close_stdin
.text:0000000000002334                 call    atexit
.text:0000000000002339                 lea     rax, [rsp+108h+var_D8]
.text:000000000000233E                 mov     cs:hard_dir_link, 0
.text:0000000000002345                 mov     cs:verbose, 0
.text:000000000000234C                 mov     cs:interactive, 0
.text:0000000000002353                 mov     cs:remove_existing_files, 0
.text:000000000000235A                 mov     cs:symbolic_link, 0
.text:0000000000002361                 mov     [rsp+108h+var_100], 0
.text:000000000000236A                 mov     [rsp+108h+stat_buf], rax
.text:000000000000236F                 nop
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: main+11A↓j
.text:0000000000002370                                         ; main+151↓j ...
.text:0000000000002370                 lea     rcx, long_options ; longopts
.text:0000000000002377                 lea     rdx, shortopts  ; "bdfinrst:vFLPS:T"
.text:000000000000237E                 xor     r8d, r8d        ; longind
.text:0000000000002381                 mov     rsi, rbp        ; argv
.text:0000000000002384                 mov     edi, ebx        ; argc
.text:0000000000002386                 call    _getopt_long
.text:000000000000238B                 cmp     eax, 0FFFFFFFFh
.text:000000000000238E                 mov     r8d, eax
.text:0000000000002391                 jz      loc_25FC
.text:0000000000002397                 cmp     r8d, 62h ; 'b'
.text:000000000000239B                 jz      loc_24E0
.text:00000000000023A1                 jle     short loc_23E0
.text:00000000000023A3                 cmp     r8d, 6Eh ; 'n'
.text:00000000000023A7                 jz      loc_24D0
.text:00000000000023AD                 jle     short loc_2420
.text:00000000000023AF                 cmp     r8d, 73h ; 's'
.text:00000000000023B3                 jz      loc_25D0
.text:00000000000023B9                 jle     loc_24B8
.text:00000000000023BF                 cmp     r8d, 74h ; 't'
.text:00000000000023C3                 jz      loc_2500
.text:00000000000023C9                 cmp     r8d, 76h ; 'v'
.text:00000000000023CD                 jnz     loc_25F2
.text:00000000000023D3                 mov     cs:verbose, 1
.text:00000000000023DA                 jmp     short loc_2370
.text:00000000000023DA ; ---------------------------------------------------------------------------
.text:00000000000023DC                 align 20h
.text:00000000000023E0
.text:00000000000023E0 loc_23E0:                               ; CODE XREF: main+E1↑j
.text:00000000000023E0                 cmp     r8d, 4Ch ; 'L'
.text:00000000000023E4                 jz      loc_2580
.text:00000000000023EA                 jle     short loc_2450
.text:00000000000023EC                 cmp     r8d, 53h ; 'S'
.text:00000000000023F0                 jz      loc_25B8
.text:00000000000023F6                 cmp     r8d, 54h ; 'T'
.text:00000000000023FA                 jz      loc_25A8
.text:0000000000002400                 cmp     r8d, 50h ; 'P'
.text:0000000000002404                 jnz     loc_25F2
.text:000000000000240A                 mov     cs:logical, 0
.text:0000000000002411                 jmp     loc_2370
.text:0000000000002411 ; ---------------------------------------------------------------------------
.text:0000000000002416                 align 20h
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: main+ED↑j
.text:0000000000002420                 cmp     r8d, 66h ; 'f'
.text:0000000000002424                 jz      loc_2590
.text:000000000000242A                 cmp     r8d, 69h ; 'i'
.text:000000000000242E                 jnz     loc_25EC
.text:0000000000002434                 mov     cs:remove_existing_files, 0
.text:000000000000243B                 mov     cs:interactive, 1
.text:0000000000002442                 jmp     loc_2370
.text:0000000000002442 ; ---------------------------------------------------------------------------
.text:0000000000002447                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: main+12A↑j
.text:0000000000002450                 cmp     r8d, 0FFFFFF7Eh
.text:0000000000002457                 jz      loc_294D
.text:000000000000245D                 cmp     r8d, 46h ; 'F'
.text:0000000000002461                 jz      loc_25E0
.text:0000000000002467                 cmp     r8d, 0FFFFFF7Dh
.text:000000000000246E                 jnz     loc_25F2
.text:0000000000002474                 sub     rsp, 8
.text:0000000000002478                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000247F                 mov     rcx, cs:Version
.text:0000000000002486                 push    0
.text:0000000000002488                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:000000000000248F                 lea     r8, aMikeParker ; "Mike Parker"
.text:0000000000002496                 lea     rdx, unk_B0B7
.text:000000000000249D                 lea     rsi, aLn        ; "ln"
.text:00000000000024A4                 xor     eax, eax
.text:00000000000024A6                 call    version_etc
.text:00000000000024AB                 xor     edi, edi        ; status
.text:00000000000024AD                 call    _exit
.text:00000000000024AD ; ---------------------------------------------------------------------------
.text:00000000000024B2                 align 8
.text:00000000000024B8
.text:00000000000024B8 loc_24B8:                               ; CODE XREF: main+F9↑j
.text:00000000000024B8                 cmp     r8d, 72h ; 'r'
.text:00000000000024BC                 jnz     loc_25F2
.text:00000000000024C2                 mov     cs:relative, 1
.text:00000000000024C9                 jmp     loc_2370
.text:00000000000024C9 ; ---------------------------------------------------------------------------
.text:00000000000024CE                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: main+E7↑j
.text:00000000000024D0                 mov     cs:dereference_dest_dir_symlinks, 0
.text:00000000000024D7                 jmp     loc_2370
.text:00000000000024D7 ; ---------------------------------------------------------------------------
.text:00000000000024DC                 align 20h
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: main+DB↑j
.text:00000000000024E0                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000024E7                 mov     r13d, 1
.text:00000000000024ED                 test    rax, rax
.text:00000000000024F0                 cmovnz  r14, rax
.text:00000000000024F4                 jmp     loc_2370
.text:00000000000024F4 ; ---------------------------------------------------------------------------
.text:00000000000024F9                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: main+103↑j
.text:0000000000002500                 test    r12, r12
.text:0000000000002503                 jnz     loc_29DD
.text:0000000000002509                 mov     rdx, [rsp+108h+stat_buf] ; stat_buf
.text:000000000000250E                 mov     rsi, cs:optarg@@GLIBC_2_2_5 ; filename
.text:0000000000002515                 mov     edi, 1          ; ver
.text:000000000000251A                 call    ___xstat
.text:000000000000251F                 test    eax, eax
.text:0000000000002521                 jnz     loc_2A62
.text:0000000000002527                 mov     eax, [rsp+108h+var_C0]
.text:000000000000252B                 mov     r12, cs:optarg@@GLIBC_2_2_5
.text:0000000000002532                 and     eax, 0F000h
.text:0000000000002537                 cmp     eax, 4000h
.text:000000000000253C                 jz      loc_2370
.text:0000000000002542                 mov     rsi, r12
.text:0000000000002545                 mov     edi, 4
.text:000000000000254A                 call    quotearg_style
.text:000000000000254F                 lea     rsi, msgid      ; "target %s is not a directory"
.text:0000000000002556                 mov     rbx, rax
.text:0000000000002559                 mov     edx, 5          ; category
.text:000000000000255E                 xor     edi, edi        ; domainname
.text:0000000000002560                 call    _dcgettext
.text:0000000000002565                 mov     rcx, rbx
.text:0000000000002568                 mov     rdx, rax        ; format
.text:000000000000256B                 xor     esi, esi        ; errnum
.text:000000000000256D                 mov     edi, 1          ; status
.text:0000000000002572                 xor     eax, eax
.text:0000000000002574                 call    _error
.text:0000000000002579                 nop     dword ptr [rax+00000000h]
.text:0000000000002580
.text:0000000000002580 loc_2580:                               ; CODE XREF: main+124↑j
.text:0000000000002580                 mov     cs:logical, 1
.text:0000000000002587                 jmp     loc_2370
.text:0000000000002587 ; ---------------------------------------------------------------------------
.text:000000000000258C                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: main+164↑j
.text:0000000000002590                 mov     cs:remove_existing_files, 1
.text:0000000000002597                 mov     cs:interactive, 0
.text:000000000000259E                 jmp     loc_2370
.text:000000000000259E ; ---------------------------------------------------------------------------
.text:00000000000025A3                 align 8
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: main+13A↑j
.text:00000000000025A8                 mov     r15d, 1
.text:00000000000025AE                 jmp     loc_2370
.text:00000000000025AE ; ---------------------------------------------------------------------------
.text:00000000000025B3                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: main+130↑j
.text:00000000000025B8                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000025BF                 mov     r13d, 1
.text:00000000000025C5                 mov     [rsp+108h+var_100], rax
.text:00000000000025CA                 jmp     loc_2370
.text:00000000000025CA ; ---------------------------------------------------------------------------
.text:00000000000025CF                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: main+F3↑j
.text:00000000000025D0                 mov     cs:symbolic_link, 1
.text:00000000000025D7                 jmp     loc_2370
.text:00000000000025D7 ; ---------------------------------------------------------------------------
.text:00000000000025DC                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: main+1A1↑j
.text:00000000000025E0                                         ; main+330↓j
.text:00000000000025E0                 mov     cs:hard_dir_link, 1
.text:00000000000025E7                 jmp     loc_2370
.text:00000000000025EC ; ---------------------------------------------------------------------------
.text:00000000000025EC
.text:00000000000025EC loc_25EC:                               ; CODE XREF: main+16E↑j
.text:00000000000025EC                 cmp     r8d, 64h ; 'd'
.text:00000000000025F0                 jz      short loc_25E0
.text:00000000000025F2
.text:00000000000025F2 loc_25F2:                               ; CODE XREF: main+10D↑j
.text:00000000000025F2                                         ; main+144↑j ...
.text:00000000000025F2                 mov     edi, 1          ; status
.text:00000000000025F7                 call    usage
.text:00000000000025FC ; ---------------------------------------------------------------------------
.text:00000000000025FC
.text:00000000000025FC loc_25FC:                               ; CODE XREF: main+D1↑j
.text:00000000000025FC                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002603                 mov     ecx, ebx
.text:0000000000002605                 sub     ecx, eax
.text:0000000000002607                 lea     rbx, [rbp+rax*8+0]
.text:000000000000260C                 test    ecx, ecx
.text:000000000000260E                 jle     loc_2954
.text:0000000000002614                 cmp     cs:relative, 0
.text:000000000000261B                 jz      short loc_262A
.text:000000000000261D                 cmp     cs:symbolic_link, 0
.text:0000000000002624                 jz      loc_297A
.text:000000000000262A
.text:000000000000262A loc_262A:                               ; CODE XREF: main+35B↑j
.text:000000000000262A                 cmp     cs:hard_dir_link, 0
.text:0000000000002631                 jnz     short loc_263A
.text:0000000000002633                 mov     cs:beware_hard_dir_link, 0
.text:000000000000263A
.text:000000000000263A loc_263A:                               ; CODE XREF: main+371↑j
.text:000000000000263A                 test    r15b, r15b
.text:000000000000263D                 jz      loc_2710
.text:0000000000002643                 test    r12, r12
.text:0000000000002646                 jnz     loc_2A1F
.text:000000000000264C                 cmp     ecx, 2
.text:000000000000264F                 jnz     loc_299E
.text:0000000000002655
.text:0000000000002655 loc_2655:                               ; CODE XREF: main+628↓j
.text:0000000000002655                 test    r13b, r13b
.text:0000000000002658                 jz      loc_28A7
.text:000000000000265E                 mov     r12d, 2
.text:0000000000002664                 xor     ebp, ebp
.text:0000000000002666
.text:0000000000002666 loc_2666:                               ; CODE XREF: main+58C↓j
.text:0000000000002666                                         ; main+79D↓j
.text:0000000000002666                 lea     rsi, aBackupType ; "backup type"
.text:000000000000266D                 mov     edx, 5          ; category
.text:0000000000002672                 xor     edi, edi        ; domainname
.text:0000000000002674                 mov     dword ptr [rsp+108h+stat_buf], r8d
.text:0000000000002679                 call    _dcgettext
.text:000000000000267E                 mov     rsi, r14
.text:0000000000002681                 mov     rdi, rax
.text:0000000000002684                 call    xget_version
.text:0000000000002689                 mov     r8d, dword ptr [rsp+108h+stat_buf]
.text:000000000000268E
.text:000000000000268E loc_268E:                               ; CODE XREF: main+586↓j
.text:000000000000268E                 mov     rdi, [rsp+108h+var_100]
.text:0000000000002693                 mov     dword ptr [rsp+108h+stat_buf], r8d
.text:0000000000002698                 mov     cs:backup_type, eax
.text:000000000000269E                 call    set_simple_backup_suffix
.text:00000000000026A3                 test    rbp, rbp
.text:00000000000026A6                 mov     r8d, dword ptr [rsp+108h+stat_buf]
.text:00000000000026AB                 jz      loc_28C5
.text:00000000000026B1                 cmp     r12d, 1
.text:00000000000026B5                 jle     loc_293A
.text:00000000000026BB                 cmp     cs:remove_existing_files, 0
.text:00000000000026C2                 jz      loc_275B
.text:00000000000026C8                 cmp     cs:symbolic_link, 0
.text:00000000000026CF                 jnz     loc_275B
.text:00000000000026D5                 cmp     cs:backup_type, 3
.text:00000000000026DC                 jz      short loc_275B
.text:00000000000026DE                 lea     r8, triple_free
.text:00000000000026E5                 lea     rcx, triple_compare
.text:00000000000026EC                 xor     esi, esi
.text:00000000000026EE                 lea     rdx, triple_hash
.text:00000000000026F5                 mov     edi, 3Dh ; '='
.text:00000000000026FA                 call    hash_initialize
.text:00000000000026FF                 test    rax, rax
.text:0000000000002702                 mov     cs:dest_set, rax
.text:0000000000002709                 jnz     short loc_275B
.text:000000000000270B                 call    xalloc_die
.text:0000000000002710 ; ---------------------------------------------------------------------------
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: main+37D↑j
.text:0000000000002710                 test    r12, r12
.text:0000000000002713                 setz    r15b
.text:0000000000002717                 cmp     ecx, 1
.text:000000000000271A                 jg      loc_27F9
.text:0000000000002720                 test    r15b, r15b
.text:0000000000002723                 jz      loc_27F9
.text:0000000000002729                 test    r13b, r13b
.text:000000000000272C                 jnz     loc_2A48
.text:0000000000002732                 mov     rdi, [rsp+108h+var_100]
.text:0000000000002737                 lea     rbp, asc_BF52+2 ; "."
.text:000000000000273E                 mov     cs:backup_type, 0
.text:0000000000002748                 mov     r12d, 1
.text:000000000000274E                 call    set_simple_backup_suffix
.text:0000000000002753                 mov     [rsp+108h+newfd], 0FFFFFF9Ch
.text:000000000000275B
.text:000000000000275B loc_275B:                               ; CODE XREF: main+402↑j
.text:000000000000275B                                         ; main+40F↑j ...
.text:000000000000275B                 lea     eax, [r12-1]
.text:0000000000002760                 lea     r14, [rsp+108h+old]
.text:0000000000002765                 mov     r13, rbx
.text:0000000000002768                 lea     r15, [rbx+rax*8+8]
.text:000000000000276D                 mov     ebx, 1
.text:0000000000002772                 nop     word ptr [rax+rax+00h]
.text:0000000000002778
.text:0000000000002778 loc_2778:                               ; CODE XREF: main+508↓j
.text:0000000000002778                 mov     rdi, [r13+0]
.text:000000000000277C                 add     r13, 8
.text:0000000000002780                 call    last_component
.text:0000000000002785                 mov     rdx, r14
.text:0000000000002788                 mov     rsi, rax
.text:000000000000278B                 mov     rdi, rbp
.text:000000000000278E                 call    file_name_concat
.text:0000000000002793                 mov     rdi, [rsp+108h+old]
.text:0000000000002798                 mov     r12, rax
.text:000000000000279B                 call    strip_trailing_slashes
.text:00000000000027A0                 mov     rdi, [r13-8]    ; src
.text:00000000000027A4                 mov     rdx, [rsp+108h+old] ; old
.text:00000000000027A9                 mov     r8d, 0FFFFFFFFh
.text:00000000000027AF                 mov     esi, [rsp+108h+newfd] ; newfd
.text:00000000000027B3                 mov     rcx, r12        ; void *
.text:00000000000027B6                 call    do_link
.text:00000000000027BB                 mov     rdi, r12        ; ptr
.text:00000000000027BE                 and     ebx, eax
.text:00000000000027C0                 call    _free
.text:00000000000027C5                 cmp     r13, r15
.text:00000000000027C8                 jnz     short loc_2778
.text:00000000000027CA
.text:00000000000027CA loc_27CA:                               ; CODE XREF: main+61B↓j
.text:00000000000027CA                                         ; main+688↓j
.text:00000000000027CA                 xor     ebx, 1
.text:00000000000027CD                 mov     rcx, [rsp+108h+var_40]
.text:00000000000027D5                 xor     rcx, fs:28h
.text:00000000000027DE                 movzx   eax, bl
.text:00000000000027E1                 jnz     loc_2A43
.text:00000000000027E7                 add     rsp, 0D8h
.text:00000000000027EE                 pop     rbx
.text:00000000000027EF                 pop     rbp
.text:00000000000027F0                 pop     r12
.text:00000000000027F2                 pop     r13
.text:00000000000027F4                 pop     r14
.text:00000000000027F6                 pop     r15
.text:00000000000027F8                 retn
.text:00000000000027F9 ; ---------------------------------------------------------------------------
.text:00000000000027F9
.text:00000000000027F9 loc_27F9:                               ; CODE XREF: main+45A↑j
.text:00000000000027F9                                         ; main+463↑j
.text:00000000000027F9                 cmp     ecx, 2
.text:00000000000027FC                 jnz     short loc_2851
.text:00000000000027FE                 test    r15b, r15b
.text:0000000000002801                 jz      short loc_2851
.text:0000000000002803                 mov     rdx, [rbx+8]    ; to
.text:0000000000002807                 mov     rdi, [rbx]      ; from
.text:000000000000280A                 mov     esi, 0FFFFFF9Ch ; tofd
.text:000000000000280F                 mov     dword ptr [rsp+108h+stat_buf], ecx
.text:0000000000002813                 call    atomic_link
.text:0000000000002818                 test    eax, eax
.text:000000000000281A                 mov     r8d, eax
.text:000000000000281D                 mov     ecx, dword ptr [rsp+108h+stat_buf]
.text:0000000000002821                 js      loc_292D
.text:0000000000002827                 cmp     eax, 11h
.text:000000000000282A                 jz      loc_292D
.text:0000000000002830                 cmp     eax, 14h
.text:0000000000002833                 jz      loc_292D
.text:0000000000002839                 mov     r12d, 2
.text:000000000000283F                 xor     ebp, ebp
.text:0000000000002841
.text:0000000000002841 loc_2841:                               ; CODE XREF: main+5E5↓j
.text:0000000000002841                 xor     eax, eax
.text:0000000000002843                 test    r13b, r13b
.text:0000000000002846                 jz      loc_268E
.text:000000000000284C                 jmp     loc_2666
.text:0000000000002851 ; ---------------------------------------------------------------------------
.text:0000000000002851
.text:0000000000002851 loc_2851:                               ; CODE XREF: main+53C↑j
.text:0000000000002851                                         ; main+541↑j
.text:0000000000002851                 test    r12, r12
.text:0000000000002854                 mov     rbp, r12
.text:0000000000002857                 jz      loc_292D
.text:000000000000285D
.text:000000000000285D loc_285D:                               ; CODE XREF: main+675↓j
.text:000000000000285D                 cmp     cs:dereference_dest_dir_symlinks, 1
.text:0000000000002864                 mov     rsi, rbp
.text:0000000000002867                 mov     edi, 0FFFFFF9Ch
.text:000000000000286C                 mov     [rsp+108h+var_EC], r8d
.text:0000000000002871                 mov     dword ptr [rsp+108h+stat_buf], ecx
.text:0000000000002875                 sbb     edx, edx
.text:0000000000002877                 xor     eax, eax
.text:0000000000002879                 and     edx, 20000h
.text:000000000000287F                 add     edx, 210000h
.text:0000000000002885                 call    openat_safer
.text:000000000000288A                 test    eax, eax
.text:000000000000288C                 mov     [rsp+108h+newfd], eax
.text:0000000000002890                 mov     ecx, dword ptr [rsp+108h+stat_buf]
.text:0000000000002894                 mov     r8d, [rsp+108h+var_EC]
.text:0000000000002899                 js      short loc_28E0
.text:000000000000289B                 movzx   r15d, r15b
.text:000000000000289F                 sub     ecx, r15d
.text:00000000000028A2                 mov     r12d, ecx
.text:00000000000028A5                 jmp     short loc_2841
.text:00000000000028A7 ; ---------------------------------------------------------------------------
.text:00000000000028A7
.text:00000000000028A7 loc_28A7:                               ; CODE XREF: main+398↑j
.text:00000000000028A7                 mov     rdi, [rsp+108h+var_100]
.text:00000000000028AC                 mov     dword ptr [rsp+108h+stat_buf], r8d
.text:00000000000028B1                 mov     cs:backup_type, 0
.text:00000000000028BB                 call    set_simple_backup_suffix
.text:00000000000028C0                 mov     r8d, dword ptr [rsp+108h+stat_buf]
.text:00000000000028C5
.text:00000000000028C5 loc_28C5:                               ; CODE XREF: main+3EB↑j
.text:00000000000028C5                 mov     rdx, [rbx+8]    ; old
.text:00000000000028C9                 mov     rdi, [rbx]      ; src
.text:00000000000028CC                 mov     esi, 0FFFFFF9Ch ; newfd
.text:00000000000028D1                 mov     rcx, rdx        ; void *
.text:00000000000028D4                 call    do_link
.text:00000000000028D9                 mov     ebx, eax
.text:00000000000028DB                 jmp     loc_27CA
.text:00000000000028E0 ; ---------------------------------------------------------------------------
.text:00000000000028E0
.text:00000000000028E0 loc_28E0:                               ; CODE XREF: main+5D9↑j
.text:00000000000028E0                 cmp     ecx, 2
.text:00000000000028E3                 jnz     short loc_28EE
.text:00000000000028E5                 test    r12, r12
.text:00000000000028E8                 jz      loc_2655
.text:00000000000028EE
.text:00000000000028EE loc_28EE:                               ; CODE XREF: main+623↑j
.text:00000000000028EE                 mov     rsi, rbp
.text:00000000000028F1                 mov     edi, 4
.text:00000000000028F6                 call    quotearg_style
.text:00000000000028FB                 lea     rsi, aTargetS   ; "target %s"
.text:0000000000002902                 mov     edx, 5          ; category
.text:0000000000002907                 xor     edi, edi        ; domainname
.text:0000000000002909                 mov     rbp, rax
.text:000000000000290C                 call    _dcgettext
.text:0000000000002911                 mov     rbx, rax
.text:0000000000002914                 call    ___errno_location
.text:0000000000002919                 mov     esi, [rax]      ; errnum
.text:000000000000291B                 mov     rcx, rbp
.text:000000000000291E                 mov     rdx, rbx        ; format
.text:0000000000002921                 mov     edi, 1          ; status
.text:0000000000002926                 xor     eax, eax
.text:0000000000002928                 call    _error
.text:000000000000292D
.text:000000000000292D loc_292D:                               ; CODE XREF: main+561↑j
.text:000000000000292D                                         ; main+56A↑j ...
.text:000000000000292D                 movsxd  rax, ecx
.text:0000000000002930                 mov     rbp, [rbx+rax*8-8]
.text:0000000000002935                 jmp     loc_285D
.text:000000000000293A ; ---------------------------------------------------------------------------
.text:000000000000293A
.text:000000000000293A loc_293A:                               ; CODE XREF: main+3F5↑j
.text:000000000000293A                 test    r12d, r12d
.text:000000000000293D                 jnz     loc_275B
.text:0000000000002943                 mov     ebx, 1
.text:0000000000002948                 jmp     loc_27CA
.text:000000000000294D ; ---------------------------------------------------------------------------
.text:000000000000294D
.text:000000000000294D loc_294D:                               ; CODE XREF: main+197↑j
.text:000000000000294D                 xor     edi, edi        ; status
.text:000000000000294F                 call    usage
.text:0000000000002954 ; ---------------------------------------------------------------------------
.text:0000000000002954
.text:0000000000002954 loc_2954:                               ; CODE XREF: main+34E↑j
.text:0000000000002954                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:000000000000295B                 xor     edi, edi        ; domainname
.text:000000000000295D                 mov     edx, 5          ; category
.text:0000000000002962                 call    _dcgettext
.text:0000000000002967                 xor     esi, esi        ; errnum
.text:0000000000002969                 mov     rdx, rax        ; format
.text:000000000000296C                 xor     edi, edi        ; status
.text:000000000000296E                 xor     eax, eax
.text:0000000000002970                 call    _error
.text:0000000000002975                 jmp     loc_25F2
.text:000000000000297A ; ---------------------------------------------------------------------------
.text:000000000000297A
.text:000000000000297A loc_297A:                               ; CODE XREF: main+364↑j
.text:000000000000297A                 lea     rsi, aCannotDoRelati ; "cannot do --relative without --symbolic"
.text:0000000000002981                 mov     edx, 5          ; category
.text:0000000000002986                 xor     edi, edi        ; domainname
.text:0000000000002988                 call    _dcgettext
.text:000000000000298D                 xor     esi, esi        ; errnum
.text:000000000000298F                 mov     rdx, rax        ; format
.text:0000000000002992                 mov     edi, 1          ; status
.text:0000000000002997                 xor     eax, eax
.text:0000000000002999                 call    _error
.text:000000000000299E
.text:000000000000299E loc_299E:                               ; CODE XREF: main+38F↑j
.text:000000000000299E                 sub     ecx, 1
.text:00000000000029A1                 jz      short loc_2A01
.text:00000000000029A3                 mov     rsi, [rbx+10h]
.text:00000000000029A7                 mov     edi, 4
.text:00000000000029AC                 call    quotearg_style
.text:00000000000029B1                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000029B8                 mov     rbx, rax
.text:00000000000029BB                 mov     edx, 5          ; category
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: main+75D↓j
.text:00000000000029C0                 xor     edi, edi        ; domainname
.text:00000000000029C2                 call    _dcgettext
.text:00000000000029C7                 mov     rcx, rbx
.text:00000000000029CA                 mov     rdx, rax        ; format
.text:00000000000029CD                 xor     esi, esi        ; errnum
.text:00000000000029CF                 xor     edi, edi        ; status
.text:00000000000029D1                 xor     eax, eax
.text:00000000000029D3                 call    _error
.text:00000000000029D8                 jmp     loc_25F2
.text:00000000000029DD ; ---------------------------------------------------------------------------
.text:00000000000029DD
.text:00000000000029DD loc_29DD:                               ; CODE XREF: main+243↑j
.text:00000000000029DD                 lea     rsi, aMultipleTarget ; "multiple target directories specified"
.text:00000000000029E4                 mov     edx, 5          ; category
.text:00000000000029E9                 xor     edi, edi        ; domainname
.text:00000000000029EB                 call    _dcgettext
.text:00000000000029F0                 xor     esi, esi        ; errnum
.text:00000000000029F2                 mov     rdx, rax        ; format
.text:00000000000029F5                 mov     edi, 1          ; status
.text:00000000000029FA                 xor     eax, eax
.text:00000000000029FC                 call    _error
.text:0000000000002A01
.text:0000000000002A01 loc_2A01:                               ; CODE XREF: main+6E1↑j
.text:0000000000002A01                 mov     rsi, [rbx]
.text:0000000000002A04                 mov     edi, 4
.text:0000000000002A09                 call    quotearg_style
.text:0000000000002A0E                 mov     edx, 5
.text:0000000000002A13                 mov     rbx, rax
.text:0000000000002A16                 lea     rsi, aMissingDestina ; "missing destination file operand after "...
.text:0000000000002A1D                 jmp     short loc_29C0
.text:0000000000002A1F ; ---------------------------------------------------------------------------
.text:0000000000002A1F
.text:0000000000002A1F loc_2A1F:                               ; CODE XREF: main+386↑j
.text:0000000000002A1F                 lea     rsi, aCannotCombineT ; "cannot combine --target-directory and -"...
.text:0000000000002A26                 mov     edx, 5          ; category
.text:0000000000002A2B                 xor     edi, edi        ; domainname
.text:0000000000002A2D                 call    _dcgettext
.text:0000000000002A32                 xor     esi, esi        ; errnum
.text:0000000000002A34                 mov     rdx, rax        ; format
.text:0000000000002A37                 mov     edi, 1          ; status
.text:0000000000002A3C                 xor     eax, eax
.text:0000000000002A3E                 call    _error
.text:0000000000002A43
.text:0000000000002A43 loc_2A43:                               ; CODE XREF: main+521↑j
.text:0000000000002A43                 call    ___stack_chk_fail
.text:0000000000002A48 ; ---------------------------------------------------------------------------
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: main+46C↑j
.text:0000000000002A48                 mov     r12d, 1
.text:0000000000002A4E                 mov     [rsp+108h+newfd], 0FFFFFF9Ch
.text:0000000000002A56                 lea     rbp, asc_BF52+2 ; "."
.text:0000000000002A5D                 jmp     loc_2666
.text:0000000000002A62 ; ---------------------------------------------------------------------------
.text:0000000000002A62
.text:0000000000002A62 loc_2A62:                               ; CODE XREF: main+261↑j
.text:0000000000002A62                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002A69                 mov     edi, 4
.text:0000000000002A6E                 call    quotearg_style
.text:0000000000002A73                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:0000000000002A7A                 mov     edx, 5          ; category
.text:0000000000002A7F                 xor     edi, edi        ; domainname
.text:0000000000002A81                 mov     rbp, rax
.text:0000000000002A84                 call    _dcgettext
.text:0000000000002A89                 mov     rbx, rax
.text:0000000000002A8C                 call    ___errno_location
.text:0000000000002A91                 mov     esi, [rax]      ; errnum
.text:0000000000002A93                 mov     rcx, rbp
.text:0000000000002A96                 mov     rdx, rbx        ; format
.text:0000000000002A99                 mov     edi, 1          ; status
.text:0000000000002A9E                 xor     eax, eax
.text:0000000000002AA0                 call    _error
.text:0000000000002AA0 ; } // starts at 22C0
.text:0000000000002AA5                 db      2Eh
.text:0000000000002AA5                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002AAF                 nop
.text:0000000000002AAF main            endp ; sp-analysis failed
.text:0000000000002AAF
.text:0000000000002AB0
.text:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AB0
.text:0000000000002AB0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002AB0
.text:0000000000002AB0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002AB0                 public start
.text:0000000000002AB0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002AB0 ; __unwind {
.text:0000000000002AB0                 xor     ebp, ebp
.text:0000000000002AB2                 mov     r9, rdx         ; rtld_fini
.text:0000000000002AB5                 pop     rsi             ; argc
.text:0000000000002AB6                 mov     rdx, rsp        ; ubp_av
.text:0000000000002AB9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000002ABD                 push    rax
.text:0000000000002ABE                 push    rsp             ; stack_end
.text:0000000000002ABF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002AC6                 lea     rcx, __libc_csu_init ; init
.text:0000000000002ACD                 lea     rdi, main       ; main
.text:0000000000002AD4                 call    cs:__libc_start_main_ptr
.text:0000000000002ADA                 hlt
.text:0000000000002ADA ; } // starts at 2AB0
.text:0000000000002ADA start           endp
.text:0000000000002ADA
.text:0000000000002ADA ; ---------------------------------------------------------------------------
.text:0000000000002ADB                 align 20h
.text:0000000000002AE0
.text:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002AE0
.text:0000000000002AE0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002AE0
.text:0000000000002AE0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2B93↓p
.text:0000000000002AE0                 lea     rdi, __bss_start
.text:0000000000002AE7                 push    rbp
.text:0000000000002AE8                 lea     rax, __bss_start
.text:0000000000002AEF                 cmp     rax, rdi
.text:0000000000002AF2                 mov     rbp, rsp
.text:0000000000002AF5                 jz      short loc_2B10
.text:0000000000002AF7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000002AFE                 test    rax, rax
.text:0000000000002B01                 jz      short loc_2B10
.text:0000000000002B03                 pop     rbp
.text:0000000000002B04                 jmp     rax
.text:0000000000002B04 ; ---------------------------------------------------------------------------
.text:0000000000002B06                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002B10                                         ; deregister_tm_clones+21↑j
.text:0000000000002B10                 pop     rbp
.text:0000000000002B11                 retn
.text:0000000000002B11 deregister_tm_clones endp
.text:0000000000002B11
.text:0000000000002B11 ; ---------------------------------------------------------------------------
.text:0000000000002B12                 align 20h
.text:0000000000002B20
.text:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B20
.text:0000000000002B20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002B20
.text:0000000000002B20 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002B20                 lea     rdi, __bss_start
.text:0000000000002B27                 lea     rsi, __bss_start
.text:0000000000002B2E                 push    rbp
.text:0000000000002B2F                 sub     rsi, rdi
.text:0000000000002B32                 mov     rbp, rsp
.text:0000000000002B35                 sar     rsi, 3
.text:0000000000002B39                 mov     rax, rsi
.text:0000000000002B3C                 shr     rax, 3Fh
.text:0000000000002B40                 add     rsi, rax
.text:0000000000002B43                 sar     rsi, 1
.text:0000000000002B46                 jz      short loc_2B60
.text:0000000000002B48                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000002B4F                 test    rax, rax
.text:0000000000002B52                 jz      short loc_2B60
.text:0000000000002B54                 pop     rbp
.text:0000000000002B55                 jmp     rax
.text:0000000000002B55 ; ---------------------------------------------------------------------------
.text:0000000000002B57                 align 20h
.text:0000000000002B60
.text:0000000000002B60 loc_2B60:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002B60                                         ; register_tm_clones+32↑j
.text:0000000000002B60                 pop     rbp
.text:0000000000002B61                 retn
.text:0000000000002B61 register_tm_clones endp
.text:0000000000002B61
.text:0000000000002B61 ; ---------------------------------------------------------------------------
.text:0000000000002B62                 align 10h
.text:0000000000002B70
.text:0000000000002B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B70
.text:0000000000002B70 ; Attributes: info_from_lumina
.text:0000000000002B70
.text:0000000000002B70 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002B70                 cmp     cs:completed_7697, 0
.text:0000000000002B77                 jnz     short locret_2BA8
.text:0000000000002B79                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002B81                 push    rbp
.text:0000000000002B82                 mov     rbp, rsp
.text:0000000000002B85                 jz      short loc_2B93
.text:0000000000002B87                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000002B8E                 call    __cxa_finalize
.text:0000000000002B93
.text:0000000000002B93 loc_2B93:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002B93                 call    deregister_tm_clones
.text:0000000000002B98                 mov     cs:completed_7697, 1
.text:0000000000002B9F                 pop     rbp
.text:0000000000002BA0                 retn
.text:0000000000002BA0 ; ---------------------------------------------------------------------------
.text:0000000000002BA1                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 locret_2BA8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002BA8                 rep retn
.text:0000000000002BA8 __do_global_dtors_aux endp
.text:0000000000002BA8
.text:0000000000002BA8 ; ---------------------------------------------------------------------------
.text:0000000000002BAA                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BB0
.text:0000000000002BB0 ; Attributes: bp-based frame
.text:0000000000002BB0
.text:0000000000002BB0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002BB0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002BB0                 push    rbp
.text:0000000000002BB1                 mov     rbp, rsp
.text:0000000000002BB4                 pop     rbp
.text:0000000000002BB5                 jmp     register_tm_clones
.text:0000000000002BB5 frame_dummy     endp
.text:0000000000002BB5
.text:0000000000002BB5 ; ---------------------------------------------------------------------------
.text:0000000000002BBA                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0
.text:0000000000002BC0 ; __int64 __fastcall atomic_link(char *from, int tofd, char *to)
.text:0000000000002BC0 atomic_link     proc near               ; CODE XREF: main+553↑p
.text:0000000000002BC0                                         ; do_link:loc_3000↓p
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 sub     rsp, 8
.text:0000000000002BC4                 cmp     cs:symbolic_link, 0
.text:0000000000002BCB                 jz      short loc_2BF0
.text:0000000000002BCD                 cmp     cs:relative, 0
.text:0000000000002BD4                 jnz     short loc_2C30
.text:0000000000002BD6                 call    _symlinkat
.text:0000000000002BDB                 test    eax, eax
.text:0000000000002BDD                 js      short loc_2C21
.text:0000000000002BDF
.text:0000000000002BDF loc_2BDF:                               ; CODE XREF: atomic_link+5F↓j
.text:0000000000002BDF                 xor     eax, eax
.text:0000000000002BE1
.text:0000000000002BE1 loc_2BE1:                               ; CODE XREF: atomic_link+75↓j
.text:0000000000002BE1                 add     rsp, 8
.text:0000000000002BE5                 retn
.text:0000000000002BE5 ; ---------------------------------------------------------------------------
.text:0000000000002BE6                 align 10h
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: atomic_link+B↑j
.text:0000000000002BF0                 cmp     cs:beware_hard_dir_link, 0
.text:0000000000002BF7                 jnz     short loc_2C30
.text:0000000000002BF9                 xor     r8d, r8d
.text:0000000000002BFC                 cmp     cs:logical, 0
.text:0000000000002C03                 mov     rcx, rdx        ; to
.text:0000000000002C06                 mov     edx, esi        ; tofd
.text:0000000000002C08                 mov     rsi, rdi        ; from
.text:0000000000002C0B                 mov     edi, 0FFFFFF9Ch ; fromfd
.text:0000000000002C10                 setnz   r8b
.text:0000000000002C14                 shl     r8d, 0Ah        ; flags
.text:0000000000002C18                 call    _linkat
.text:0000000000002C1D                 test    eax, eax
.text:0000000000002C1F                 jns     short loc_2BDF
.text:0000000000002C21
.text:0000000000002C21 loc_2C21:                               ; CODE XREF: atomic_link+1D↑j
.text:0000000000002C21                 call    ___errno_location
.text:0000000000002C26                 mov     eax, [rax]
.text:0000000000002C28                 add     rsp, 8
.text:0000000000002C2C                 retn
.text:0000000000002C2C ; ---------------------------------------------------------------------------
.text:0000000000002C2D                 align 10h
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: atomic_link+14↑j
.text:0000000000002C30                                         ; atomic_link+37↑j
.text:0000000000002C30                 mov     eax, 0FFFFFFFFh
.text:0000000000002C35                 jmp     short loc_2BE1
.text:0000000000002C35 ; } // starts at 2BC0
.text:0000000000002C35 atomic_link     endp
.text:0000000000002C35
.text:0000000000002C35 ; ---------------------------------------------------------------------------
.text:0000000000002C37                 align 20h
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40
.text:0000000000002C40 ; __int64 __fastcall do_link(void *src, int newfd, char *old, void *)
.text:0000000000002C40 do_link         proc near               ; CODE XREF: main+4F6↑p
.text:0000000000002C40                                         ; main+614↑p
.text:0000000000002C40
.text:0000000000002C40 ptr             = qword ptr -188h
.text:0000000000002C40 var_180         = qword ptr -180h
.text:0000000000002C40 var_178         = qword ptr -178h
.text:0000000000002C40 var_16C         = dword ptr -16Ch
.text:0000000000002C40 stat_buf        = stat ptr -168h
.text:0000000000002C40 var_D8          = stat ptr -0D8h
.text:0000000000002C40 var_40          = qword ptr -40h
.text:0000000000002C40
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 push    r15
.text:0000000000002C42                 push    r14
.text:0000000000002C44                 mov     r10d, r8d
.text:0000000000002C47                 push    r13
.text:0000000000002C49                 push    r12
.text:0000000000002C4B                 xor     r13d, r13d
.text:0000000000002C4E                 push    rbp
.text:0000000000002C4F                 push    rbx
.text:0000000000002C50                 mov     r12d, esi
.text:0000000000002C53                 mov     rbx, rdi
.text:0000000000002C56                 mov     rbp, rdx
.text:0000000000002C59                 mov     r14, rcx
.text:0000000000002C5C                 sub     rsp, 158h
.text:0000000000002C63                 mov     rax, fs:28h
.text:0000000000002C6C                 mov     [rsp+188h+var_40], rax
.text:0000000000002C74                 xor     eax, eax
.text:0000000000002C76                 cmp     cs:logical, 0
.text:0000000000002C7D                 setz    r13b
.text:0000000000002C81                 shl     r13d, 8
.text:0000000000002C85                 test    r8d, r8d
.text:0000000000002C88                 js      loc_3000
.text:0000000000002C8E
.text:0000000000002C8E loc_2C8E:                               ; CODE XREF: do_link+3C8↓j
.text:0000000000002C8E                 test    r10d, r10d
.text:0000000000002C91                 movzx   r15d, cs:symbolic_link
.text:0000000000002C99                 jnz     loc_2DF0
.text:0000000000002C9F                 cmp     cs:dest_set, 0
.text:0000000000002CA7                 jz      loc_30B0
.text:0000000000002CAD                 test    r15b, r15b
.text:0000000000002CB0                 jnz     loc_3210
.text:0000000000002CB6                 lea     r15, [rsp+188h+stat_buf]
.text:0000000000002CBB                 mov     r8d, r13d       ; flag
.text:0000000000002CBE                 mov     rdx, rbx        ; filename
.text:0000000000002CC1                 mov     esi, 0FFFFFF9Ch ; fildes
.text:0000000000002CC6                 mov     edi, 1          ; ver
.text:0000000000002CCB                 mov     rcx, r15        ; stat_buf
.text:0000000000002CCE                 call    ___fxstatat
.text:0000000000002CD3                 test    eax, eax
.text:0000000000002CD5                 jnz     loc_30D0
.text:0000000000002CDB                 mov     [rsp+188h+ptr], 0
.text:0000000000002CE3                 xor     r13d, r13d
.text:0000000000002CE6
.text:0000000000002CE6 loc_2CE6:                               ; CODE XREF: do_link+489↓j
.text:0000000000002CE6                 mov     rdi, cs:dest_set
.text:0000000000002CED                 mov     rdx, r15
.text:0000000000002CF0                 mov     rsi, r14
.text:0000000000002CF3                 call    record_file
.text:0000000000002CF8
.text:0000000000002CF8 loc_2CF8:                               ; CODE XREF: do_link+47E↓j
.text:0000000000002CF8                 cmp     cs:verbose, 0
.text:0000000000002CFF                 mov     r15d, 1
.text:0000000000002D05                 jz      loc_2DAA
.text:0000000000002D0B                 test    r13, r13
.text:0000000000002D0E                 jz      loc_323B
.text:0000000000002D14                 sub     rbp, r14
.text:0000000000002D17                 test    rbp, rbp
.text:0000000000002D1A                 jg      loc_3250
.text:0000000000002D20                 mov     r15, r13
.text:0000000000002D23                 xor     r12d, r12d
.text:0000000000002D26
.text:0000000000002D26 loc_2D26:                               ; CODE XREF: do_link+642↓j
.text:0000000000002D26                 mov     rdx, r15
.text:0000000000002D29                 mov     esi, 4
.text:0000000000002D2E                 mov     edi, 2
.text:0000000000002D33                 call    quotearg_n_style
.text:0000000000002D38                 mov     rdi, r12        ; ptr
.text:0000000000002D3B                 lea     r12, unk_AFA4
.text:0000000000002D42                 mov     rbp, rax
.text:0000000000002D45                 call    _free
.text:0000000000002D4A
.text:0000000000002D4A loc_2D4A:                               ; CODE XREF: do_link+605↓j
.text:0000000000002D4A                 mov     rdx, rbx
.text:0000000000002D4D                 mov     esi, 4
.text:0000000000002D52                 mov     edi, 1
.text:0000000000002D57                 call    quotearg_n_style
.text:0000000000002D5C                 cmp     cs:symbolic_link, 1
.text:0000000000002D63                 mov     rdx, r14
.text:0000000000002D66                 mov     esi, 4
.text:0000000000002D6B                 mov     r15, rax
.text:0000000000002D6E                 sbb     ebx, ebx
.text:0000000000002D70                 xor     edi, edi
.text:0000000000002D72                 call    quotearg_n_style
.text:0000000000002D77                 and     ebx, 10h
.text:0000000000002D7A                 sub     rsp, 8
.text:0000000000002D7E                 lea     rsi, aSSSCS     ; "%s%s%s %c> %s\n"
.text:0000000000002D85                 push    r15
.text:0000000000002D87                 add     ebx, 2Dh ; '-'
.text:0000000000002D8A                 mov     r8, rax
.text:0000000000002D8D                 mov     rdx, rbp
.text:0000000000002D90                 mov     r9d, ebx
.text:0000000000002D93                 mov     rcx, r12
.text:0000000000002D96                 mov     edi, 1
.text:0000000000002D9B                 xor     eax, eax
.text:0000000000002D9D                 mov     r15d, 1
.text:0000000000002DA3                 call    ___printf_chk
.text:0000000000002DA8                 pop     rax
.text:0000000000002DA9                 pop     rdx
.text:0000000000002DAA
.text:0000000000002DAA loc_2DAA:                               ; CODE XREF: do_link+C5↑j
.text:0000000000002DAA                                         ; do_link+2C8↓j ...
.text:0000000000002DAA                 mov     rdi, r13        ; ptr
.text:0000000000002DAD                 call    _free
.text:0000000000002DB2                 mov     rdi, [rsp+188h+ptr] ; ptr
.text:0000000000002DB6                 call    _free
.text:0000000000002DBB
.text:0000000000002DBB loc_2DBB:                               ; CODE XREF: do_link+3B3↓j
.text:0000000000002DBB                                         ; do_link+4CF↓j ...
.text:0000000000002DBB                 mov     rbx, [rsp+188h+var_40]
.text:0000000000002DC3                 xor     rbx, fs:28h
.text:0000000000002DCC                 mov     eax, r15d
.text:0000000000002DCF                 jnz     loc_36A1
.text:0000000000002DD5                 add     rsp, 158h
.text:0000000000002DDC                 pop     rbx
.text:0000000000002DDD                 pop     rbp
.text:0000000000002DDE                 pop     r12
.text:0000000000002DE0                 pop     r13
.text:0000000000002DE2                 pop     r14
.text:0000000000002DE4                 pop     r15
.text:0000000000002DE6                 retn
.text:0000000000002DE6 ; ---------------------------------------------------------------------------
.text:0000000000002DE7                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: do_link+59↑j
.text:0000000000002DF0                 test    r15b, r15b
.text:0000000000002DF3                 mov     dword ptr [rsp+188h+var_178], 1
.text:0000000000002DFB                 jz      loc_3328
.text:0000000000002E01
.text:0000000000002E01 loc_2E01:                               ; CODE XREF: do_link+724↓j
.text:0000000000002E01                                         ; do_link+738↓j
.text:0000000000002E01                 cmp     cs:relative, 0
.text:0000000000002E08                 mov     [rsp+188h+ptr], 0
.text:0000000000002E10                 jnz     loc_3168
.text:0000000000002E16
.text:0000000000002E16 loc_2E16:                               ; CODE XREF: do_link+5A6↓j
.text:0000000000002E16                                         ; do_link+6DE↓j
.text:0000000000002E16                 cmp     cs:remove_existing_files, 0
.text:0000000000002E1D                 jnz     loc_2F70
.text:0000000000002E23                 cmp     cs:interactive, 0
.text:0000000000002E2A                 jnz     loc_2F70
.text:0000000000002E30                 mov     r9d, cs:backup_type
.text:0000000000002E37                 test    r9d, r9d
.text:0000000000002E3A                 jnz     loc_2F70
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: do_link+374↓j
.text:0000000000002E40                                         ; do_link+87F↓j
.text:0000000000002E40                 xor     r9d, r9d
.text:0000000000002E43                 xor     r13d, r13d
.text:0000000000002E46
.text:0000000000002E46 loc_2E46:                               ; CODE XREF: do_link+467↓j
.text:0000000000002E46                                         ; do_link+860↓j
.text:0000000000002E46                 cmp     cs:symbolic_link, 0
.text:0000000000002E4D                 jnz     loc_31F0
.text:0000000000002E53                 xor     r8d, r8d
.text:0000000000002E56                 cmp     cs:logical, 0
.text:0000000000002E5D                 mov     rcx, rbp
.text:0000000000002E60                 mov     rsi, rbx
.text:0000000000002E63                 mov     edx, r12d
.text:0000000000002E66                 mov     edi, 0FFFFFF9Ch
.text:0000000000002E6B                 setnz   r8b
.text:0000000000002E6F                 sub     rsp, 8
.text:0000000000002E73                 push    r10
.text:0000000000002E75                 shl     r8d, 0Ah
.text:0000000000002E79                 call    force_linkat
.text:0000000000002E7E                 pop     rcx
.text:0000000000002E7F                 pop     rsi
.text:0000000000002E80                 mov     r15d, eax
.text:0000000000002E83
.text:0000000000002E83 loc_2E83:                               ; CODE XREF: do_link+5C7↓j
.text:0000000000002E83                 test    r15d, r15d
.text:0000000000002E86                 jle     loc_36A6
.text:0000000000002E8C                 mov     rdx, rbx
.text:0000000000002E8F                 mov     esi, 4
.text:0000000000002E94                 mov     edi, 1
.text:0000000000002E99                 call    quotearg_n_style
.text:0000000000002E9E                 xor     edi, edi
.text:0000000000002EA0                 mov     rdx, r14
.text:0000000000002EA3                 mov     esi, 4
.text:0000000000002EA8                 mov     [rsp+188h+var_180], rax
.text:0000000000002EAD                 call    quotearg_n_style
.text:0000000000002EB2                 cmp     cs:symbolic_link, 0
.text:0000000000002EB9                 mov     rcx, rax
.text:0000000000002EBC                 jz      loc_3118
.text:0000000000002EC2                 cmp     r15d, 24h ; '$'
.text:0000000000002EC6                 jz      short loc_2ED1
.text:0000000000002EC8                 cmp     byte ptr [rbx], 0
.text:0000000000002ECB                 jnz     loc_3290
.text:0000000000002ED1
.text:0000000000002ED1 loc_2ED1:                               ; CODE XREF: do_link+286↑j
.text:0000000000002ED1                 lea     rsi, aFailedToCreate ; "failed to create symbolic link %s -> %s"
.text:0000000000002ED8                 mov     edx, 5          ; category
.text:0000000000002EDD                 xor     edi, edi        ; domainname
.text:0000000000002EDF                 mov     [rsp+188h+var_178], rcx
.text:0000000000002EE4                 call    _dcgettext
.text:0000000000002EE9                 mov     rcx, [rsp+188h+var_178]
.text:0000000000002EEE                 mov     rdx, rax        ; format
.text:0000000000002EF1
.text:0000000000002EF1 loc_2EF1:                               ; CODE XREF: do_link+51D↓j
.text:0000000000002EF1                                         ; do_link+670↓j ...
.text:0000000000002EF1                 mov     r8, [rsp+188h+var_180]
.text:0000000000002EF6                 mov     esi, r15d       ; errnum
.text:0000000000002EF9                 xor     edi, edi        ; status
.text:0000000000002EFB                 xor     eax, eax
.text:0000000000002EFD                 xor     r15d, r15d
.text:0000000000002F00                 call    _error
.text:0000000000002F05                 test    r13, r13
.text:0000000000002F08                 jz      loc_2DAA
.text:0000000000002F0E                 mov     rcx, rbp        ; new
.text:0000000000002F11                 mov     edx, r12d       ; newfd
.text:0000000000002F14                 mov     rsi, r13        ; old
.text:0000000000002F17                 mov     edi, r12d       ; oldfd
.text:0000000000002F1A                 call    _renameat
.text:0000000000002F1F                 test    eax, eax
.text:0000000000002F21                 jz      loc_2DAA
.text:0000000000002F27                 mov     rsi, r14
.text:0000000000002F2A                 mov     edi, 4
.text:0000000000002F2F                 call    quotearg_style
.text:0000000000002F34                 lea     rsi, aCannotUnBackup ; "cannot un-backup %s"
.text:0000000000002F3B                 xor     edi, edi        ; domainname
.text:0000000000002F3D                 mov     edx, 5          ; category
.text:0000000000002F42                 mov     rbp, rax
.text:0000000000002F45                 call    _dcgettext
.text:0000000000002F4A                 mov     rbx, rax
.text:0000000000002F4D                 call    ___errno_location
.text:0000000000002F52                 mov     esi, [rax]      ; errnum
.text:0000000000002F54                 mov     rcx, rbp
.text:0000000000002F57                 mov     rdx, rbx        ; format
.text:0000000000002F5A                 xor     edi, edi        ; status
.text:0000000000002F5C                 xor     eax, eax
.text:0000000000002F5E                 call    _error
.text:0000000000002F63                 jmp     loc_2DAA
.text:0000000000002F63 ; ---------------------------------------------------------------------------
.text:0000000000002F68                 align 10h
.text:0000000000002F70
.text:0000000000002F70 loc_2F70:                               ; CODE XREF: do_link+1DD↑j
.text:0000000000002F70                                         ; do_link+1EA↑j ...
.text:0000000000002F70                 lea     r13, [rsp+188h+var_D8]
.text:0000000000002F78                 mov     r8d, 100h       ; flag
.text:0000000000002F7E                 mov     rdx, rbp        ; filename
.text:0000000000002F81                 mov     esi, r12d       ; fildes
.text:0000000000002F84                 mov     edi, 1          ; ver
.text:0000000000002F89                 mov     dword ptr [rsp+188h+var_180], r10d
.text:0000000000002F8E                 mov     rcx, r13        ; stat_buf
.text:0000000000002F91                 call    ___fxstatat
.text:0000000000002F96                 test    eax, eax
.text:0000000000002F98                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:0000000000002F9D                 jz      short loc_3010
.text:0000000000002F9F                 mov     dword ptr [rsp+188h+var_180], r10d
.text:0000000000002FA4                 call    ___errno_location
.text:0000000000002FA9                 cmp     dword ptr [rax], 2
.text:0000000000002FAC                 mov     r13, rax
.text:0000000000002FAF                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:0000000000002FB4                 jz      loc_2E40
.text:0000000000002FBA                 mov     rsi, r14
.text:0000000000002FBD                 mov     edi, 4
.text:0000000000002FC2                 xor     r15d, r15d
.text:0000000000002FC5                 call    quotearg_style
.text:0000000000002FCA                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:0000000000002FD1                 mov     edx, 5          ; category
.text:0000000000002FD6                 xor     edi, edi        ; domainname
.text:0000000000002FD8                 mov     rbx, rax
.text:0000000000002FDB                 call    _dcgettext
.text:0000000000002FE0                 mov     esi, [r13+0]    ; errnum
.text:0000000000002FE4                 mov     rdx, rax        ; format
.text:0000000000002FE7                 mov     rcx, rbx
.text:0000000000002FEA                 xor     edi, edi        ; status
.text:0000000000002FEC                 xor     eax, eax
.text:0000000000002FEE                 call    _error
.text:0000000000002FF3                 jmp     loc_2DBB
.text:0000000000002FF3 ; ---------------------------------------------------------------------------
.text:0000000000002FF8                 align 20h
.text:0000000000003000
.text:0000000000003000 loc_3000:                               ; CODE XREF: do_link+48↑j
.text:0000000000003000                 call    atomic_link
.text:0000000000003005                 mov     r10d, eax
.text:0000000000003008                 jmp     loc_2C8E
.text:0000000000003008 ; ---------------------------------------------------------------------------
.text:000000000000300D                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: do_link+35D↑j
.text:0000000000003010                 mov     eax, [rsp+188h+var_D8.st_mode]
.text:0000000000003017                 and     eax, 0F000h
.text:000000000000301C                 cmp     eax, 4000h
.text:0000000000003021                 jz      loc_33C0
.text:0000000000003027                 mov     rdi, cs:dest_set
.text:000000000000302E                 mov     rdx, r13
.text:0000000000003031                 mov     rsi, r14
.text:0000000000003034                 mov     dword ptr [rsp+188h+var_180], r10d
.text:0000000000003039                 call    seen_file
.text:000000000000303E                 test    al, al
.text:0000000000003040                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:0000000000003045                 jnz     loc_3508
.text:000000000000304B                 mov     r8d, cs:backup_type
.text:0000000000003052                 movzx   eax, cs:remove_existing_files
.text:0000000000003059                 test    r8d, r8d
.text:000000000000305C                 jz      short loc_3068
.text:000000000000305E                 movzx   eax, cs:symbolic_link
.text:0000000000003065                 xor     eax, 1
.text:0000000000003068
.text:0000000000003068 loc_3068:                               ; CODE XREF: do_link+41C↑j
.text:0000000000003068                 test    al, al
.text:000000000000306A                 jz      short loc_308B
.text:000000000000306C                 mov     edi, dword ptr [rsp+188h+var_178]
.text:0000000000003070                 test    edi, edi
.text:0000000000003072                 jnz     loc_358D
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: do_link+974↓j
.text:0000000000003078                 mov     rax, [rsp+188h+var_D8.st_ino]
.text:0000000000003080                 cmp     [rsp+188h+stat_buf.st_ino], rax
.text:0000000000003085                 jz      loc_3629
.text:000000000000308B
.text:000000000000308B loc_308B:                               ; CODE XREF: do_link+42A↑j
.text:000000000000308B                                         ; do_link+96E↓j ...
.text:000000000000308B                 test    r10d, r10d
.text:000000000000308E                 js      loc_3450
.text:0000000000003094                 cmp     r10d, 11h
.text:0000000000003098                 jz      loc_3450
.text:000000000000309E
.text:000000000000309E loc_309E:                               ; CODE XREF: do_link+829↓j
.text:000000000000309E                 mov     r9d, 1
.text:00000000000030A4                 xor     r13d, r13d
.text:00000000000030A7                 jmp     loc_2E46
.text:00000000000030A7 ; ---------------------------------------------------------------------------
.text:00000000000030AC                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: do_link+67↑j
.text:00000000000030B0                 mov     [rsp+188h+ptr], 0
.text:00000000000030B8                 xor     r13d, r13d
.text:00000000000030BB
.text:00000000000030BB loc_30BB:                               ; CODE XREF: do_link+A6E↓j
.text:00000000000030BB                 test    r15b, r15b
.text:00000000000030BE                 jnz     loc_2CF8
.text:00000000000030C4                 lea     r15, [rsp+188h+stat_buf]
.text:00000000000030C9                 jmp     loc_2CE6
.text:00000000000030C9 ; ---------------------------------------------------------------------------
.text:00000000000030CE                 align 10h
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: do_link+95↑j
.text:00000000000030D0                                         ; do_link+713↓j
.text:00000000000030D0                 mov     rsi, rbx
.text:00000000000030D3                 mov     edi, 4
.text:00000000000030D8                 xor     r15d, r15d
.text:00000000000030DB                 call    quotearg_style
.text:00000000000030E0                 lea     rsi, aFailedToAccess ; "failed to access %s"
.text:00000000000030E7                 mov     edx, 5          ; category
.text:00000000000030EC                 xor     edi, edi        ; domainname
.text:00000000000030EE                 mov     rbp, rax
.text:00000000000030F1                 call    _dcgettext
.text:00000000000030F6                 mov     rbx, rax
.text:00000000000030F9                 call    ___errno_location
.text:00000000000030FE                 mov     esi, [rax]      ; errnum
.text:0000000000003100                 mov     rcx, rbp
.text:0000000000003103                 mov     rdx, rbx        ; format
.text:0000000000003106                 xor     edi, edi        ; status
.text:0000000000003108                 xor     eax, eax
.text:000000000000310A                 call    _error
.text:000000000000310F                 jmp     loc_2DBB
.text:000000000000310F ; ---------------------------------------------------------------------------
.text:0000000000003114                 align 8
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: do_link+27C↑j
.text:0000000000003118                 cmp     r15d, 1Fh
.text:000000000000311C                 jz      loc_3400
.text:0000000000003122                 cmp     r15d, 7Ah ; 'z'
.text:0000000000003126                 jz      short loc_313D
.text:0000000000003128                 cmp     r15d, 11h
.text:000000000000312C                 jz      short loc_313D
.text:000000000000312E                 mov     eax, r15d
.text:0000000000003131                 and     eax, 0FFFFFFFDh
.text:0000000000003134                 cmp     eax, 1Ch
.text:0000000000003137                 jnz     loc_3428
.text:000000000000313D
.text:000000000000313D loc_313D:                               ; CODE XREF: do_link+4E6↑j
.text:000000000000313D                                         ; do_link+4EC↑j
.text:000000000000313D                 lea     rsi, aFailedToCreate_0 ; "failed to create hard link %s"
.text:0000000000003144                 mov     edx, 5          ; category
.text:0000000000003149                 xor     edi, edi        ; domainname
.text:000000000000314B                 mov     [rsp+188h+var_178], rcx
.text:0000000000003150                 call    _dcgettext
.text:0000000000003155                 mov     rcx, [rsp+188h+var_178]
.text:000000000000315A                 mov     rdx, rax
.text:000000000000315D                 jmp     loc_2EF1
.text:000000000000315D ; ---------------------------------------------------------------------------
.text:0000000000003162                 align 8
.text:0000000000003168
.text:0000000000003168 loc_3168:                               ; CODE XREF: do_link+1D0↑j
.text:0000000000003168                 mov     rdi, r14
.text:000000000000316B                 mov     dword ptr [rsp+188h+ptr], r10d
.text:000000000000316F                 call    dir_name
.text:0000000000003174                 mov     esi, 2
.text:0000000000003179                 mov     rdi, rax        ; src
.text:000000000000317C                 mov     [rsp+188h+var_180], rax
.text:0000000000003181                 call    canonicalize_filename_mode
.text:0000000000003186                 mov     esi, 2
.text:000000000000318B                 mov     r13, rax
.text:000000000000318E                 mov     rdi, rbx        ; src
.text:0000000000003191                 call    canonicalize_filename_mode
.text:0000000000003196                 test    r13, r13
.text:0000000000003199                 mov     r15, rax
.text:000000000000319C                 mov     r10d, dword ptr [rsp+188h+ptr]
.text:00000000000031A0                 jz      short loc_31AB
.text:00000000000031A2                 test    rax, rax
.text:00000000000031A5                 jnz     loc_32B8
.text:00000000000031AB
.text:00000000000031AB loc_31AB:                               ; CODE XREF: do_link+560↑j
.text:00000000000031AB                 mov     rdi, [rsp+188h+var_180] ; ptr
.text:00000000000031B0                 mov     dword ptr [rsp+188h+ptr], r10d
.text:00000000000031B4                 call    _free
.text:00000000000031B9                 mov     rdi, r13        ; ptr
.text:00000000000031BC                 call    _free
.text:00000000000031C1                 mov     rdi, r15        ; ptr
.text:00000000000031C4                 call    _free
.text:00000000000031C9                 mov     r10d, dword ptr [rsp+188h+ptr]
.text:00000000000031CD
.text:00000000000031CD loc_31CD:                               ; CODE XREF: do_link+6D4↓j
.text:00000000000031CD                                         ; do_link+948↓j
.text:00000000000031CD                 mov     rdi, rbx        ; src
.text:00000000000031D0                 mov     dword ptr [rsp+188h+var_180], r10d
.text:00000000000031D5                 call    xstrdup
.text:00000000000031DA                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:00000000000031DF                 mov     rbx, rax
.text:00000000000031E2                 mov     [rsp+188h+ptr], rax
.text:00000000000031E6                 jmp     loc_2E16
.text:00000000000031E6 ; ---------------------------------------------------------------------------
.text:00000000000031EB                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: do_link+20D↑j
.text:00000000000031F0                 mov     r8d, r10d
.text:00000000000031F3                 mov     ecx, r9d
.text:00000000000031F6                 mov     rdx, rbp
.text:00000000000031F9                 mov     esi, r12d
.text:00000000000031FC                 mov     rdi, rbx
.text:00000000000031FF                 call    force_symlinkat
.text:0000000000003204                 mov     r15d, eax
.text:0000000000003207                 jmp     loc_2E83
.text:0000000000003207 ; ---------------------------------------------------------------------------
.text:000000000000320C                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: do_link+70↑j
.text:0000000000003210                 cmp     cs:verbose, 0
.text:0000000000003217                 jnz     short loc_3230
.text:0000000000003219                 mov     [rsp+188h+ptr], 0
.text:0000000000003221                 xor     r13d, r13d
.text:0000000000003224                 jmp     loc_2DAA
.text:0000000000003224 ; ---------------------------------------------------------------------------
.text:0000000000003229                 align 10h
.text:0000000000003230
.text:0000000000003230 loc_3230:                               ; CODE XREF: do_link+5D7↑j
.text:0000000000003230                 xor     r13d, r13d
.text:0000000000003233                 mov     [rsp+188h+ptr], 0
.text:000000000000323B
.text:000000000000323B loc_323B:                               ; CODE XREF: do_link+CE↑j
.text:000000000000323B                 lea     r12, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003242                 mov     rbp, r12
.text:0000000000003245                 jmp     loc_2D4A
.text:0000000000003245 ; ---------------------------------------------------------------------------
.text:000000000000324A                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: do_link+DA↑j
.text:0000000000003250                 mov     rdi, r13        ; s
.text:0000000000003253                 call    _strlen
.text:0000000000003258                 lea     rdi, [rbp+rax+1]
.text:000000000000325D                 call    xmalloc
.text:0000000000003262                 mov     rsi, r14        ; src
.text:0000000000003265                 mov     r12, rax
.text:0000000000003268                 mov     rdx, rbp        ; n
.text:000000000000326B                 mov     rdi, rax        ; dest
.text:000000000000326E                 mov     r15, r12
.text:0000000000003271                 call    _memcpy
.text:0000000000003276                 lea     rdi, [r12+rbp]  ; dest
.text:000000000000327A                 mov     rsi, r13        ; src
.text:000000000000327D                 call    _strcpy
.text:0000000000003282                 jmp     loc_2D26
.text:0000000000003282 ; ---------------------------------------------------------------------------
.text:0000000000003287                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: do_link+28B↑j
.text:0000000000003290                 lea     rsi, aFailedToCreate_1 ; "failed to create symbolic link %s"
.text:0000000000003297                 mov     edx, 5          ; category
.text:000000000000329C                 xor     edi, edi        ; domainname
.text:000000000000329E                 mov     [rsp+188h+var_178], rax
.text:00000000000032A3                 call    _dcgettext
.text:00000000000032A8                 mov     rcx, [rsp+188h+var_178]
.text:00000000000032AD                 mov     rdx, rax
.text:00000000000032B0                 jmp     loc_2EF1
.text:00000000000032B0 ; ---------------------------------------------------------------------------
.text:00000000000032B5                 align 8
.text:00000000000032B8
.text:00000000000032B8 loc_32B8:                               ; CODE XREF: do_link+565↑j
.text:00000000000032B8                 mov     edi, 1000h
.text:00000000000032BD                 mov     [rsp+188h+var_16C], r10d
.text:00000000000032C2                 call    xmalloc
.text:00000000000032C7                 mov     ecx, 1000h
.text:00000000000032CC                 mov     rdx, rax
.text:00000000000032CF                 mov     rsi, r13
.text:00000000000032D2                 mov     rdi, r15
.text:00000000000032D5                 mov     [rsp+188h+ptr], rax
.text:00000000000032D9                 call    relpath
.text:00000000000032DE                 test    al, al
.text:00000000000032E0                 mov     r10d, [rsp+188h+var_16C]
.text:00000000000032E5                 jz      loc_3560
.text:00000000000032EB                 mov     rdi, [rsp+188h+var_180] ; ptr
.text:00000000000032F0                 mov     [rsp+188h+var_16C], r10d
.text:00000000000032F5                 call    _free
.text:00000000000032FA                 mov     rdi, r13        ; ptr
.text:00000000000032FD                 call    _free
.text:0000000000003302                 mov     rdi, r15        ; ptr
.text:0000000000003305                 call    _free
.text:000000000000330A                 cmp     [rsp+188h+ptr], 0
.text:000000000000330F                 mov     r10d, [rsp+188h+var_16C]
.text:0000000000003314                 jz      loc_31CD
.text:000000000000331A                 mov     rbx, [rsp+188h+ptr]
.text:000000000000331E                 jmp     loc_2E16
.text:000000000000331E ; ---------------------------------------------------------------------------
.text:0000000000003323                 align 8
.text:0000000000003328
.text:0000000000003328 loc_3328:                               ; CODE XREF: do_link+1BB↑j
.text:0000000000003328                 lea     r15, [rsp+188h+stat_buf]
.text:000000000000332D                 mov     r8d, r13d       ; flag
.text:0000000000003330                 mov     rdx, rbx        ; filename
.text:0000000000003333                 mov     esi, 0FFFFFF9Ch ; fildes
.text:0000000000003338                 mov     edi, 1          ; ver
.text:000000000000333D                 mov     dword ptr [rsp+188h+ptr], r10d
.text:0000000000003341                 mov     rcx, r15        ; stat_buf
.text:0000000000003344                 call    ___fxstatat
.text:0000000000003349                 test    eax, eax
.text:000000000000334B                 mov     dword ptr [rsp+188h+var_178], eax
.text:000000000000334F                 mov     r10d, dword ptr [rsp+188h+ptr]
.text:0000000000003353                 jnz     loc_30D0
.text:0000000000003359                 movzx   r15d, cs:hard_dir_link
.text:0000000000003361                 test    r15b, r15b
.text:0000000000003364                 jnz     loc_2E01
.text:000000000000336A                 mov     eax, [rsp+188h+stat_buf.st_mode]
.text:000000000000336E                 and     eax, 0F000h
.text:0000000000003373                 cmp     eax, 4000h
.text:0000000000003378                 jnz     loc_2E01
.text:000000000000337E                 mov     rdx, rbx
.text:0000000000003381                 xor     edi, edi
.text:0000000000003383                 mov     esi, 3
.text:0000000000003388                 call    quotearg_n_style_colon
.text:000000000000338D                 lea     rsi, aSHardLinkNotAl ; "%s: hard link not allowed for directory"
.text:0000000000003394                 mov     rbx, rax
.text:0000000000003397                 xor     edi, edi        ; domainname
.text:0000000000003399                 mov     edx, 5          ; category
.text:000000000000339E                 call    _dcgettext
.text:00000000000033A3                 mov     rcx, rbx
.text:00000000000033A6                 mov     rdx, rax        ; format
.text:00000000000033A9                 xor     esi, esi        ; errnum
.text:00000000000033AB                 xor     edi, edi        ; status
.text:00000000000033AD                 xor     eax, eax
.text:00000000000033AF                 call    _error
.text:00000000000033B4                 jmp     loc_2DBB
.text:00000000000033B4 ; ---------------------------------------------------------------------------
.text:00000000000033B9                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: do_link+3E1↑j
.text:00000000000033C0                 mov     rdx, r14
.text:00000000000033C3                 mov     esi, 3
.text:00000000000033C8                 xor     edi, edi
.text:00000000000033CA                 call    quotearg_n_style_colon
.text:00000000000033CF                 lea     rsi, aSCannotOverwri ; "%s: cannot overwrite directory"
.text:00000000000033D6                 mov     rbx, rax
.text:00000000000033D9                 mov     edx, 5          ; category
.text:00000000000033DE                 xor     edi, edi        ; domainname
.text:00000000000033E0                 xor     r15d, r15d
.text:00000000000033E3                 call    _dcgettext
.text:00000000000033E8                 mov     rcx, rbx
.text:00000000000033EB                 mov     rdx, rax        ; format
.text:00000000000033EE                 xor     esi, esi        ; errnum
.text:00000000000033F0                 xor     edi, edi        ; status
.text:00000000000033F2                 xor     eax, eax
.text:00000000000033F4                 call    _error
.text:00000000000033F9                 jmp     loc_2DBB
.text:00000000000033F9 ; ---------------------------------------------------------------------------
.text:00000000000033FE                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: do_link+4DC↑j
.text:0000000000003400                 lea     rsi, aFailedToCreate_2 ; "failed to create hard link to %.0s%s"
.text:0000000000003407                 mov     edx, 5          ; category
.text:000000000000340C                 xor     edi, edi        ; domainname
.text:000000000000340E                 mov     [rsp+188h+var_178], rax
.text:0000000000003413                 call    _dcgettext
.text:0000000000003418                 mov     rcx, [rsp+188h+var_178]
.text:000000000000341D                 mov     rdx, rax
.text:0000000000003420                 jmp     loc_2EF1
.text:0000000000003420 ; ---------------------------------------------------------------------------
.text:0000000000003425                 align 8
.text:0000000000003428
.text:0000000000003428 loc_3428:                               ; CODE XREF: do_link+4F7↑j
.text:0000000000003428                 lea     rsi, aFailedToCreate_3 ; "failed to create hard link %s => %s"
.text:000000000000342F                 mov     edx, 5          ; category
.text:0000000000003434                 xor     edi, edi        ; domainname
.text:0000000000003436                 mov     [rsp+188h+var_178], rcx
.text:000000000000343B                 call    _dcgettext
.text:0000000000003440                 mov     rcx, [rsp+188h+var_178]
.text:0000000000003445                 mov     rdx, rax
.text:0000000000003448                 jmp     loc_2EF1
.text:0000000000003448 ; ---------------------------------------------------------------------------
.text:000000000000344D                 align 10h
.text:0000000000003450
.text:0000000000003450 loc_3450:                               ; CODE XREF: do_link+44E↑j
.text:0000000000003450                                         ; do_link+458↑j
.text:0000000000003450                 movzx   r15d, cs:interactive
.text:0000000000003458                 test    r15b, r15b
.text:000000000000345B                 jnz     loc_35C0
.text:0000000000003461
.text:0000000000003461 loc_3461:                               ; CODE XREF: do_link+9DE↓j
.text:0000000000003461                 mov     edx, cs:backup_type
.text:0000000000003467                 test    edx, edx
.text:0000000000003469                 jz      loc_309E
.text:000000000000346F                 mov     rsi, rbp
.text:0000000000003472                 mov     edi, r12d
.text:0000000000003475                 mov     dword ptr [rsp+188h+var_180], r10d
.text:000000000000347A                 call    find_backup_file_name
.text:000000000000347F                 mov     edx, r12d       ; newfd
.text:0000000000003482                 mov     rcx, rax        ; new
.text:0000000000003485                 mov     rsi, rbp        ; old
.text:0000000000003488                 mov     edi, r12d       ; oldfd
.text:000000000000348B                 mov     r13, rax
.text:000000000000348E                 call    _renameat
.text:0000000000003493                 test    eax, eax
.text:0000000000003495                 mov     r9d, 1
.text:000000000000349B                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:00000000000034A0                 jz      loc_2E46
.text:00000000000034A6                 call    ___errno_location
.text:00000000000034AB                 mov     r15d, [rax]
.text:00000000000034AE                 mov     rdi, r13        ; ptr
.text:00000000000034B1                 call    _free
.text:00000000000034B6                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:00000000000034BB                 cmp     r15d, 2
.text:00000000000034BF                 jz      loc_2E40
.text:00000000000034C5                 mov     rsi, r14
.text:00000000000034C8                 mov     edi, 4
.text:00000000000034CD                 call    quotearg_style
.text:00000000000034D2                 lea     rsi, aCannotBackupS ; "cannot backup %s"
.text:00000000000034D9                 mov     rbx, rax
.text:00000000000034DC                 mov     edx, 5          ; category
.text:00000000000034E1                 xor     edi, edi        ; domainname
.text:00000000000034E3                 call    _dcgettext
.text:00000000000034E8                 mov     esi, r15d       ; errnum
.text:00000000000034EB                 mov     rdx, rax        ; format
.text:00000000000034EE                 mov     rcx, rbx
.text:00000000000034F1                 xor     edi, edi        ; status
.text:00000000000034F3                 xor     eax, eax
.text:00000000000034F5                 xor     r15d, r15d
.text:00000000000034F8                 call    _error
.text:00000000000034FD                 jmp     loc_2DBB
.text:00000000000034FD ; ---------------------------------------------------------------------------
.text:0000000000003502                 align 8
.text:0000000000003508
.text:0000000000003508 loc_3508:                               ; CODE XREF: do_link+405↑j
.text:0000000000003508                 mov     rdx, rbx
.text:000000000000350B                 mov     esi, 4
.text:0000000000003510                 mov     edi, 1
.text:0000000000003515                 call    quotearg_n_style
.text:000000000000351A                 mov     rdx, r14
.text:000000000000351D                 mov     esi, 4
.text:0000000000003522                 xor     edi, edi
.text:0000000000003524                 mov     rbp, rax
.text:0000000000003527                 call    quotearg_n_style
.text:000000000000352C                 lea     rsi, aWillNotOverwri ; "will not overwrite just-created %s with"...
.text:0000000000003533                 mov     rbx, rax
.text:0000000000003536                 mov     edx, 5          ; category
.text:000000000000353B
.text:000000000000353B loc_353B:                               ; CODE XREF: do_link+A5C↓j
.text:000000000000353B                 xor     edi, edi        ; domainname
.text:000000000000353D                 xor     r15d, r15d
.text:0000000000003540                 call    _dcgettext
.text:0000000000003545                 mov     r8, rbp
.text:0000000000003548                 mov     rdx, rax        ; format
.text:000000000000354B                 mov     rcx, rbx
.text:000000000000354E                 xor     esi, esi        ; errnum
.text:0000000000003550                 xor     edi, edi        ; status
.text:0000000000003552                 xor     eax, eax
.text:0000000000003554                 call    _error
.text:0000000000003559                 jmp     loc_2DBB
.text:0000000000003559 ; ---------------------------------------------------------------------------
.text:000000000000355E                 align 20h
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: do_link+6A5↑j
.text:0000000000003560                 mov     rdi, [rsp+188h+ptr] ; ptr
.text:0000000000003564                 call    _free
.text:0000000000003569                 mov     rdi, [rsp+188h+var_180] ; ptr
.text:000000000000356E                 call    _free
.text:0000000000003573                 mov     rdi, r13        ; ptr
.text:0000000000003576                 call    _free
.text:000000000000357B                 mov     rdi, r15        ; ptr
.text:000000000000357E                 call    _free
.text:0000000000003583                 mov     r10d, [rsp+188h+var_16C]
.text:0000000000003588                 jmp     loc_31CD
.text:000000000000358D ; ---------------------------------------------------------------------------
.text:000000000000358D
.text:000000000000358D loc_358D:                               ; CODE XREF: do_link+432↑j
.text:000000000000358D                 lea     r15, [rsp+188h+stat_buf]
.text:0000000000003592                 mov     rsi, rbx        ; filename
.text:0000000000003595                 mov     edi, 1          ; ver
.text:000000000000359A                 mov     dword ptr [rsp+188h+var_180], r10d
.text:000000000000359F                 mov     rdx, r15        ; stat_buf
.text:00000000000035A2                 call    ___xstat
.text:00000000000035A7                 test    eax, eax
.text:00000000000035A9                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:00000000000035AE                 jnz     loc_308B
.text:00000000000035B4                 jmp     loc_3078
.text:00000000000035B4 ; ---------------------------------------------------------------------------
.text:00000000000035B9                 align 20h
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: do_link+81B↑j
.text:00000000000035C0                 mov     rsi, r14
.text:00000000000035C3                 mov     edi, 4
.text:00000000000035C8                 mov     dword ptr [rsp+188h+var_178], r10d
.text:00000000000035CD                 call    quotearg_style
.text:00000000000035D2                 mov     rcx, cs:program_name
.text:00000000000035D9                 lea     rsi, aSReplaceS ; "%s: replace %s? "
.text:00000000000035E0                 xor     edi, edi        ; domainname
.text:00000000000035E2                 mov     edx, 5          ; category
.text:00000000000035E7                 mov     r13, rax
.text:00000000000035EA                 mov     [rsp+188h+var_180], rcx
.text:00000000000035EF                 call    _dcgettext
.text:00000000000035F4                 mov     rcx, [rsp+188h+var_180]
.text:00000000000035F9                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003600                 mov     rdx, rax
.text:0000000000003603                 mov     r8, r13
.text:0000000000003606                 mov     esi, 1
.text:000000000000360B                 xor     eax, eax
.text:000000000000360D                 call    ___fprintf_chk
.text:0000000000003612                 call    yesno
.text:0000000000003617                 test    al, al
.text:0000000000003619                 mov     r10d, dword ptr [rsp+188h+var_178]
.text:000000000000361E                 jnz     loc_3461
.text:0000000000003624                 jmp     loc_2DBB
.text:0000000000003629 ; ---------------------------------------------------------------------------
.text:0000000000003629
.text:0000000000003629 loc_3629:                               ; CODE XREF: do_link+445↑j
.text:0000000000003629                 mov     rax, [rsp+188h+var_D8.st_dev]
.text:0000000000003631                 cmp     [rsp+188h+stat_buf.st_dev], rax
.text:0000000000003636                 jnz     loc_308B
.text:000000000000363C                 cmp     [rsp+188h+stat_buf.st_nlink], 1
.text:0000000000003642                 jz      short loc_3669
.text:0000000000003644                 mov     rcx, rbp
.text:0000000000003647                 mov     edx, r12d
.text:000000000000364A                 mov     rsi, rbx
.text:000000000000364D                 mov     edi, 0FFFFFF9Ch
.text:0000000000003652                 mov     dword ptr [rsp+188h+var_180], r10d
.text:0000000000003657                 call    same_nameat
.text:000000000000365C                 test    al, al
.text:000000000000365E                 mov     r10d, dword ptr [rsp+188h+var_180]
.text:0000000000003663                 jz      loc_308B
.text:0000000000003669
.text:0000000000003669 loc_3669:                               ; CODE XREF: do_link+A02↑j
.text:0000000000003669                 mov     rdx, r14
.text:000000000000366C                 mov     esi, 4
.text:0000000000003671                 mov     edi, 1
.text:0000000000003676                 call    quotearg_n_style
.text:000000000000367B                 mov     rdx, rbx
.text:000000000000367E                 mov     esi, 4
.text:0000000000003683                 xor     edi, edi
.text:0000000000003685                 mov     rbp, rax
.text:0000000000003688                 call    quotearg_n_style
.text:000000000000368D                 mov     edx, 5
.text:0000000000003692                 mov     rbx, rax
.text:0000000000003695                 lea     rsi, aSAndSAreTheSam ; "%s and %s are the same file"
.text:000000000000369C                 jmp     loc_353B
.text:00000000000036A1 ; ---------------------------------------------------------------------------
.text:00000000000036A1
.text:00000000000036A1 loc_36A1:                               ; CODE XREF: do_link+18F↑j
.text:00000000000036A1                 call    ___stack_chk_fail
.text:00000000000036A6 ; ---------------------------------------------------------------------------
.text:00000000000036A6
.text:00000000000036A6 loc_36A6:                               ; CODE XREF: do_link+246↑j
.text:00000000000036A6                 movzx   r15d, cs:symbolic_link
.text:00000000000036AE                 jmp     loc_30BB
.text:00000000000036AE ; } // starts at 2C40
.text:00000000000036AE do_link         endp
.text:00000000000036AE
.text:00000000000036AE ; ---------------------------------------------------------------------------
.text:00000000000036B3                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0 ; Attributes: noreturn
.text:00000000000036C0
.text:00000000000036C0 ; void __fastcall __noreturn usage(int status)
.text:00000000000036C0                 public usage
.text:00000000000036C0 usage           proc near               ; CODE XREF: main+337↑p
.text:00000000000036C0                                         ; main+68F↑p ...
.text:00000000000036C0
.text:00000000000036C0 var_A8          = qword ptr -0A8h
.text:00000000000036C0 var_A0          = qword ptr -0A0h
.text:00000000000036C0 var_98          = qword ptr -98h
.text:00000000000036C0 var_90          = qword ptr -90h
.text:00000000000036C0 var_88          = qword ptr -88h
.text:00000000000036C0 var_80          = qword ptr -80h
.text:00000000000036C0 var_78          = qword ptr -78h
.text:00000000000036C0 var_70          = qword ptr -70h
.text:00000000000036C0 var_68          = qword ptr -68h
.text:00000000000036C0 var_60          = qword ptr -60h
.text:00000000000036C0 var_58          = qword ptr -58h
.text:00000000000036C0 var_50          = qword ptr -50h
.text:00000000000036C0 var_48          = qword ptr -48h
.text:00000000000036C0 var_40          = qword ptr -40h
.text:00000000000036C0 var_30          = qword ptr -30h
.text:00000000000036C0
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 push    r13
.text:00000000000036C2                 push    r12
.text:00000000000036C4                 mov     edx, 5          ; category
.text:00000000000036C9                 push    rbp
.text:00000000000036CA                 push    rbx
.text:00000000000036CB                 mov     ebp, edi
.text:00000000000036CD                 sub     rsp, 88h
.text:00000000000036D4                 mov     rbx, cs:program_name
.text:00000000000036DB                 mov     rax, fs:28h
.text:00000000000036E4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000036E9                 xor     eax, eax
.text:00000000000036EB                 test    edi, edi
.text:00000000000036ED                 jz      short loc_371D
.text:00000000000036EF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000036F6                 xor     edi, edi        ; domainname
.text:00000000000036F8                 call    _dcgettext
.text:00000000000036FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003704                 mov     rdx, rax
.text:0000000000003707                 mov     rcx, rbx
.text:000000000000370A                 mov     esi, 1
.text:000000000000370F                 xor     eax, eax
.text:0000000000003711                 call    ___fprintf_chk
.text:0000000000003716
.text:0000000000003716 loc_3716:                               ; CODE XREF: usage+38E↓j
.text:0000000000003716                 mov     edi, ebp        ; status
.text:0000000000003718                 call    _exit
.text:000000000000371D ; ---------------------------------------------------------------------------
.text:000000000000371D
.text:000000000000371D loc_371D:                               ; CODE XREF: usage+2D↑j
.text:000000000000371D                 lea     rsi, aUsageSOptionTT ; "Usage: %s [OPTION]... [-T] TARGET LINK_"...
.text:0000000000003724                 xor     edi, edi        ; domainname
.text:0000000000003726                 call    _dcgettext
.text:000000000000372B                 mov     rcx, rbx
.text:000000000000372E                 mov     r9, rbx
.text:0000000000003731                 mov     r8, rbx
.text:0000000000003734                 mov     rdx, rbx
.text:0000000000003737                 mov     rsi, rax
.text:000000000000373A                 mov     edi, 1
.text:000000000000373F                 xor     eax, eax
.text:0000000000003741                 call    ___printf_chk
.text:0000000000003746                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000374D                 lea     rsi, aInThe1stFormCr ; "In the 1st form, create a link to TARGE"...
.text:0000000000003754                 mov     edx, 5          ; category
.text:0000000000003759                 xor     edi, edi        ; domainname
.text:000000000000375B                 call    _dcgettext
.text:0000000000003760                 mov     rsi, rbx        ; stream
.text:0000000000003763                 mov     rdi, rax        ; s
.text:0000000000003766                 call    _fputs_unlocked
.text:000000000000376B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003772                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003779                 mov     edx, 5          ; category
.text:000000000000377E                 xor     edi, edi        ; domainname
.text:0000000000003780                 call    _dcgettext
.text:0000000000003785                 mov     rsi, rbx        ; stream
.text:0000000000003788                 mov     rdi, rax        ; s
.text:000000000000378B                 call    _fputs_unlocked
.text:0000000000003790                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003797                 lea     rsi, aBackupControlM ; "      --backup[=CONTROL]      make a ba"...
.text:000000000000379E                 mov     edx, 5          ; category
.text:00000000000037A3                 xor     edi, edi        ; domainname
.text:00000000000037A5                 call    _dcgettext
.text:00000000000037AA                 mov     rsi, rbx        ; stream
.text:00000000000037AD                 mov     rdi, rax        ; s
.text:00000000000037B0                 call    _fputs_unlocked
.text:00000000000037B5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037BC                 lea     rsi, aIInteractivePr ; "  -i, --interactive           prompt wh"...
.text:00000000000037C3                 mov     edx, 5          ; category
.text:00000000000037C8                 xor     edi, edi        ; domainname
.text:00000000000037CA                 call    _dcgettext
.text:00000000000037CF                 mov     rsi, rbx        ; stream
.text:00000000000037D2                 mov     rdi, rax        ; s
.text:00000000000037D5                 call    _fputs_unlocked
.text:00000000000037DA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037E1                 lea     rsi, aSSuffixSuffixO ; "  -S, --suffix=SUFFIX         override "...
.text:00000000000037E8                 mov     edx, 5          ; category
.text:00000000000037ED                 xor     edi, edi        ; domainname
.text:00000000000037EF                 call    _dcgettext
.text:00000000000037F4                 mov     rsi, rbx        ; stream
.text:00000000000037F7                 mov     rdi, rax        ; s
.text:00000000000037FA                 call    _fputs_unlocked
.text:00000000000037FF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003806                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000380D                 mov     edx, 5          ; category
.text:0000000000003812                 xor     edi, edi        ; domainname
.text:0000000000003814                 call    _dcgettext
.text:0000000000003819                 mov     rsi, rbx        ; stream
.text:000000000000381C                 mov     rdi, rax        ; s
.text:000000000000381F                 call    _fputs_unlocked
.text:0000000000003824                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000382B                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003832                 mov     edx, 5          ; category
.text:0000000000003837                 xor     edi, edi        ; domainname
.text:0000000000003839                 call    _dcgettext
.text:000000000000383E                 mov     rsi, rbx        ; stream
.text:0000000000003841                 mov     rdi, rax        ; s
.text:0000000000003844                 call    _fputs_unlocked
.text:0000000000003849                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003850                 lea     rsi, aTheBackupSuffi ; "\nThe backup suffix is '~', unless set "...
.text:0000000000003857                 mov     edx, 5          ; category
.text:000000000000385C                 xor     edi, edi        ; domainname
.text:000000000000385E                 call    _dcgettext
.text:0000000000003863                 mov     rsi, rbx        ; stream
.text:0000000000003866                 mov     rdi, rax        ; s
.text:0000000000003869                 call    _fputs_unlocked
.text:000000000000386E                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003875                 lea     rsi, aNoneOffNeverMa ; "  none, off       never make backups (e"...
.text:000000000000387C                 mov     edx, 5          ; category
.text:0000000000003881                 xor     edi, edi        ; domainname
.text:0000000000003883                 call    _dcgettext
.text:0000000000003888                 mov     rsi, rbx        ; stream
.text:000000000000388B                 mov     rdi, rax        ; s
.text:000000000000388E                 lea     rbx, aLn        ; "ln"
.text:0000000000003895                 call    _fputs_unlocked
.text:000000000000389A                 lea     rsi, aUsingSIgnoresL ; "\nUsing -s ignores -L and -P.  Otherwis"...
.text:00000000000038A1                 mov     edx, 5          ; category
.text:00000000000038A6                 xor     edi, edi        ; domainname
.text:00000000000038A8                 call    _dcgettext
.text:00000000000038AD                 lea     rdx, aP         ; "-P"
.text:00000000000038B4                 mov     rsi, rax
.text:00000000000038B7                 mov     edi, 1
.text:00000000000038BC                 xor     eax, eax
.text:00000000000038BE                 call    ___printf_chk
.text:00000000000038C3                 lea     rax, asc_B041   ; "["
.text:00000000000038CA                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000038D1                 mov     [rsp+0A8h+var_48], 0
.text:00000000000038DA                 mov     [rsp+0A8h+var_40], 0
.text:00000000000038E3                 mov     rdx, rsp
.text:00000000000038E6                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000038EA                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000038F1                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000038F6                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000038FD                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000003902                 lea     rax, domainname ; "coreutils"
.text:0000000000003909                 mov     [rsp+0A8h+var_68], rcx
.text:000000000000390E                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003915                 mov     [rsp+0A8h+var_98], rax
.text:000000000000391A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003921                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003926                 mov     [rsp+0A8h+var_90], rax
.text:000000000000392B                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003932                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003937                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000393E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003943                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003948                 mov     [rsp+0A8h+var_60], rax
.text:000000000000394D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000003952                 nop     word ptr [rax+rax+00h]
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: usage+2B5↓j
.text:0000000000003958                 add     rdx, 10h
.text:000000000000395C                 mov     rdi, [rdx]
.text:000000000000395F                 test    rdi, rdi
.text:0000000000003962                 jz      short loc_3977
.text:0000000000003964                 mov     ecx, 3
.text:0000000000003969                 mov     rsi, rbx
.text:000000000000396C                 repe cmpsb
.text:000000000000396E                 setnbe  al
.text:0000000000003971                 sbb     al, 0
.text:0000000000003973                 test    al, al
.text:0000000000003975                 jnz     short loc_3958
.text:0000000000003977
.text:0000000000003977 loc_3977:                               ; CODE XREF: usage+2A2↑j
.text:0000000000003977                 mov     r12, [rdx+8]
.text:000000000000397B                 xor     edi, edi        ; domainname
.text:000000000000397D                 mov     edx, 5          ; category
.text:0000000000003982                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003989                 test    r12, r12
.text:000000000000398C                 jz      loc_3A53
.text:0000000000003992                 call    _dcgettext
.text:0000000000003997                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000399E                 lea     rdx, unk_B0B7
.text:00000000000039A5                 mov     rsi, rax
.text:00000000000039A8                 mov     edi, 1
.text:00000000000039AD                 xor     eax, eax
.text:00000000000039AF                 call    ___printf_chk
.text:00000000000039B4                 xor     esi, esi        ; locale
.text:00000000000039B6                 mov     edi, 5          ; category
.text:00000000000039BB                 call    _setlocale
.text:00000000000039C0                 test    rax, rax
.text:00000000000039C3                 jz      short loc_39E1
.text:00000000000039C5                 lea     rsi, s2         ; "en_"
.text:00000000000039CC                 mov     edx, 3          ; n
.text:00000000000039D1                 mov     rdi, rax        ; s1
.text:00000000000039D4                 call    _strncmp
.text:00000000000039D9                 test    eax, eax
.text:00000000000039DB                 jnz     loc_3AE8
.text:00000000000039E1
.text:00000000000039E1 loc_39E1:                               ; CODE XREF: usage+303↑j
.text:00000000000039E1                                         ; usage+44D↓j
.text:00000000000039E1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000039E8                 xor     edi, edi        ; domainname
.text:00000000000039EA                 mov     edx, 5          ; category
.text:00000000000039EF                 call    _dcgettext
.text:00000000000039F4                 lea     rcx, aLn        ; "ln"
.text:00000000000039FB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A02                 mov     rsi, rax
.text:0000000000003A05                 mov     edi, 1
.text:0000000000003A0A                 xor     eax, eax
.text:0000000000003A0C                 call    ___printf_chk
.text:0000000000003A11                 cmp     r12, rbx
.text:0000000000003A14                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003A1B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003A22                 cmovz   rbx, rcx
.text:0000000000003A26
.text:0000000000003A26 loc_3A26:                               ; CODE XREF: usage+41C↓j
.text:0000000000003A26                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003A2D                 xor     edi, edi        ; domainname
.text:0000000000003A2F                 mov     edx, 5          ; category
.text:0000000000003A34                 call    _dcgettext
.text:0000000000003A39                 mov     rcx, rbx
.text:0000000000003A3C                 mov     rsi, rax
.text:0000000000003A3F                 mov     rdx, r12
.text:0000000000003A42                 mov     edi, 1
.text:0000000000003A47                 xor     eax, eax
.text:0000000000003A49                 call    ___printf_chk
.text:0000000000003A4E                 jmp     loc_3716
.text:0000000000003A53 ; ---------------------------------------------------------------------------
.text:0000000000003A53
.text:0000000000003A53 loc_3A53:                               ; CODE XREF: usage+2CC↑j
.text:0000000000003A53                 call    _dcgettext
.text:0000000000003A58                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A5F                 lea     rdx, unk_B0B7
.text:0000000000003A66                 mov     rsi, rax
.text:0000000000003A69                 mov     edi, 1
.text:0000000000003A6E                 xor     eax, eax
.text:0000000000003A70                 call    ___printf_chk
.text:0000000000003A75                 xor     esi, esi        ; locale
.text:0000000000003A77                 mov     edi, 5          ; category
.text:0000000000003A7C                 call    _setlocale
.text:0000000000003A81                 test    rax, rax
.text:0000000000003A84                 jz      short loc_3A9E
.text:0000000000003A86                 lea     rsi, s2         ; "en_"
.text:0000000000003A8D                 mov     edx, 3          ; n
.text:0000000000003A92                 mov     rdi, rax        ; s1
.text:0000000000003A95                 call    _strncmp
.text:0000000000003A9A                 test    eax, eax
.text:0000000000003A9C                 jnz     short loc_3AE1
.text:0000000000003A9E
.text:0000000000003A9E loc_3A9E:                               ; CODE XREF: usage+3C4↑j
.text:0000000000003A9E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003AA5                 mov     edx, 5          ; category
.text:0000000000003AAA                 xor     edi, edi        ; domainname
.text:0000000000003AAC                 lea     r12, aLn        ; "ln"
.text:0000000000003AB3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003ABA                 call    _dcgettext
.text:0000000000003ABF                 lea     rcx, aLn        ; "ln"
.text:0000000000003AC6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003ACD                 mov     rsi, rax
.text:0000000000003AD0                 mov     edi, 1
.text:0000000000003AD5                 xor     eax, eax
.text:0000000000003AD7                 call    ___printf_chk
.text:0000000000003ADC                 jmp     loc_3A26
.text:0000000000003AE1 ; ---------------------------------------------------------------------------
.text:0000000000003AE1
.text:0000000000003AE1 loc_3AE1:                               ; CODE XREF: usage+3DC↑j
.text:0000000000003AE1                 lea     r12, aLn        ; "ln"
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: usage+31B↑j
.text:0000000000003AE8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003AEF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003AF6                 xor     edi, edi        ; domainname
.text:0000000000003AF8                 mov     edx, 5          ; category
.text:0000000000003AFD                 call    _dcgettext
.text:0000000000003B02                 mov     rsi, r13        ; stream
.text:0000000000003B05                 mov     rdi, rax        ; s
.text:0000000000003B08                 call    _fputs_unlocked
.text:0000000000003B0D                 jmp     loc_39E1
.text:0000000000003B0D ; } // starts at 36C0
.text:0000000000003B0D usage           endp
.text:0000000000003B0D
.text:0000000000003B0D ; ---------------------------------------------------------------------------
.text:0000000000003B12                 align 20h
.text:0000000000003B20
.text:0000000000003B20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B20
.text:0000000000003B20
.text:0000000000003B20 ; __int64 __fastcall try_link(char *to)
.text:0000000000003B20 try_link        proc near               ; DATA XREF: force_linkat+71↓o
.text:0000000000003B20 ; __unwind {
.text:0000000000003B20                 mov     rax, rsi
.text:0000000000003B23                 mov     rcx, rdi        ; to
.text:0000000000003B26                 mov     edx, [rsi+10h]  ; tofd
.text:0000000000003B29                 mov     r8d, [rax+14h]  ; flags
.text:0000000000003B2D                 mov     rsi, [rsi+8]    ; from
.text:0000000000003B31                 mov     edi, [rax]      ; fromfd
.text:0000000000003B33                 jmp     _linkat
.text:0000000000003B33 ; } // starts at 3B20
.text:0000000000003B33 try_link        endp
.text:0000000000003B33
.text:0000000000003B33 ; ---------------------------------------------------------------------------
.text:0000000000003B38                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40
.text:0000000000003B40 ; __int64 __fastcall samedir_template(void *src, void *dest)
.text:0000000000003B40 samedir_template proc near              ; CODE XREF: force_linkat+5B↓p
.text:0000000000003B40                                         ; force_symlinkat+49↓p
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 push    r12
.text:0000000000003B42                 push    rbp
.text:0000000000003B43                 mov     rbp, rdi
.text:0000000000003B46                 push    rbx
.text:0000000000003B47                 mov     r12, rsi
.text:0000000000003B4A                 call    last_component
.text:0000000000003B4F                 sub     rax, rbp
.text:0000000000003B52                 lea     rdi, [rax+9]    ; size
.text:0000000000003B56                 mov     rbx, rax
.text:0000000000003B59                 cmp     rdi, 100h
.text:0000000000003B60                 jbe     short loc_3B71
.text:0000000000003B62                 call    _malloc
.text:0000000000003B67                 mov     r12, rax
.text:0000000000003B6A                 xor     eax, eax
.text:0000000000003B6C                 test    r12, r12
.text:0000000000003B6F                 jz      short loc_3B93
.text:0000000000003B71
.text:0000000000003B71 loc_3B71:                               ; CODE XREF: samedir_template+20↑j
.text:0000000000003B71                 mov     rdx, rbx        ; n
.text:0000000000003B74                 mov     rsi, rbp        ; src
.text:0000000000003B77                 mov     rdi, r12        ; dest
.text:0000000000003B7A                 call    _mempcpy
.text:0000000000003B7F                 mov     rcx, 5858585858587543h
.text:0000000000003B89                 mov     byte ptr [rax+8], 0
.text:0000000000003B8D                 mov     [rax], rcx
.text:0000000000003B90                 mov     rax, r12
.text:0000000000003B93
.text:0000000000003B93 loc_3B93:                               ; CODE XREF: samedir_template+2F↑j
.text:0000000000003B93                 pop     rbx
.text:0000000000003B94                 pop     rbp
.text:0000000000003B95                 pop     r12
.text:0000000000003B97                 retn
.text:0000000000003B97 ; } // starts at 3B40
.text:0000000000003B97 samedir_template endp
.text:0000000000003B97
.text:0000000000003B97 ; ---------------------------------------------------------------------------
.text:0000000000003B98                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BA0
.text:0000000000003BA0
.text:0000000000003BA0 ; __int64 __fastcall try_symlink(char *to)
.text:0000000000003BA0 try_symlink     proc near               ; DATA XREF: force_symlinkat+5F↓o
.text:0000000000003BA0 ; __unwind {
.text:0000000000003BA0                 mov     rax, rsi
.text:0000000000003BA3                 mov     rdx, rdi        ; to
.text:0000000000003BA6                 mov     esi, [rsi+8]    ; tofd
.text:0000000000003BA9                 mov     rdi, [rax]      ; from
.text:0000000000003BAC                 jmp     _symlinkat
.text:0000000000003BAC ; } // starts at 3BA0
.text:0000000000003BAC try_symlink     endp
.text:0000000000003BAC
.text:0000000000003BAC ; ---------------------------------------------------------------------------
.text:0000000000003BB1                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0
.text:0000000000003BC0                 public force_linkat
.text:0000000000003BC0 force_linkat    proc near               ; CODE XREF: do_link+239↑p
.text:0000000000003BC0
.text:0000000000003BC0 var_178         = qword ptr -178h
.text:0000000000003BC0 var_16C         = dword ptr -16Ch
.text:0000000000003BC0 var_168         = dword ptr -168h
.text:0000000000003BC0 var_160         = qword ptr -160h
.text:0000000000003BC0 var_158         = dword ptr -158h
.text:0000000000003BC0 var_154         = dword ptr -154h
.text:0000000000003BC0 dest            = byte ptr -148h
.text:0000000000003BC0 var_40          = qword ptr -40h
.text:0000000000003BC0 arg_0           = dword ptr  8
.text:0000000000003BC0
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 push    r15
.text:0000000000003BC2                 push    r14
.text:0000000000003BC4                 mov     r14d, edi
.text:0000000000003BC7                 push    r13
.text:0000000000003BC9                 push    r12
.text:0000000000003BCB                 mov     r13, rsi
.text:0000000000003BCE                 push    rbp
.text:0000000000003BCF                 push    rbx
.text:0000000000003BD0                 mov     rbx, rcx
.text:0000000000003BD3                 mov     ebp, edx
.text:0000000000003BD5                 mov     r12d, r8d
.text:0000000000003BD8                 sub     rsp, 148h
.text:0000000000003BDF                 mov     ecx, [rsp+178h+arg_0]
.text:0000000000003BE6                 mov     rax, fs:28h
.text:0000000000003BEF                 mov     [rsp+178h+var_40], rax
.text:0000000000003BF7                 xor     eax, eax
.text:0000000000003BF9                 test    ecx, ecx
.text:0000000000003BFB                 js      loc_3CB0
.text:0000000000003C01
.text:0000000000003C01 loc_3C01:                               ; CODE XREF: force_linkat+10D↓j
.text:0000000000003C01                 cmp     r9b, 1
.text:0000000000003C05                 jnz     short loc_3C80
.text:0000000000003C07                 cmp     ecx, 11h
.text:0000000000003C0A                 jnz     short loc_3C80
.text:0000000000003C0C                 lea     rax, [rsp+178h+dest]
.text:0000000000003C11                 mov     rdi, rbx        ; src
.text:0000000000003C14                 mov     rsi, rax        ; dest
.text:0000000000003C17                 mov     [rsp+178h+var_178], rax
.text:0000000000003C1B                 call    samedir_template
.text:0000000000003C20                 test    rax, rax
.text:0000000000003C23                 mov     r15, rax
.text:0000000000003C26                 jz      loc_3D10
.text:0000000000003C2C                 lea     rdx, [rsp+178h+var_168]
.text:0000000000003C31                 lea     rcx, try_link
.text:0000000000003C38                 xor     esi, esi
.text:0000000000003C3A                 mov     r8d, 6
.text:0000000000003C40                 mov     rdi, rax        ; s
.text:0000000000003C43                 mov     [rsp+178h+var_168], r14d
.text:0000000000003C48                 mov     [rsp+178h+var_160], r13
.text:0000000000003C4D                 mov     [rsp+178h+var_158], ebp
.text:0000000000003C51                 mov     [rsp+178h+var_154], r12d
.text:0000000000003C56                 call    try_tempname_len
.text:0000000000003C5B                 test    eax, eax
.text:0000000000003C5D                 jz      short loc_3CD8
.text:0000000000003C5F                 call    ___errno_location
.text:0000000000003C64                 mov     ecx, [rax]
.text:0000000000003C66
.text:0000000000003C66 loc_3C66:                               ; CODE XREF: force_linkat+14B↓j
.text:0000000000003C66                 cmp     r15, [rsp+178h+var_178]
.text:0000000000003C6A                 jz      short loc_3C80
.text:0000000000003C6C                 mov     rdi, r15        ; ptr
.text:0000000000003C6F                 mov     dword ptr [rsp+178h+var_178], ecx
.text:0000000000003C72                 call    _free
.text:0000000000003C77                 mov     ecx, dword ptr [rsp+178h+var_178]
.text:0000000000003C7A                 nop     word ptr [rax+rax+00h]
.text:0000000000003C80
.text:0000000000003C80 loc_3C80:                               ; CODE XREF: force_linkat+45↑j
.text:0000000000003C80                                         ; force_linkat+4A↑j ...
.text:0000000000003C80                 mov     rbx, [rsp+178h+var_40]
.text:0000000000003C88                 xor     rbx, fs:28h
.text:0000000000003C91                 mov     eax, ecx
.text:0000000000003C93                 jnz     loc_3D1C
.text:0000000000003C99                 add     rsp, 148h
.text:0000000000003CA0                 pop     rbx
.text:0000000000003CA1                 pop     rbp
.text:0000000000003CA2                 pop     r12
.text:0000000000003CA4                 pop     r13
.text:0000000000003CA6                 pop     r14
.text:0000000000003CA8                 pop     r15
.text:0000000000003CAA                 retn
.text:0000000000003CAA ; ---------------------------------------------------------------------------
.text:0000000000003CAB                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: force_linkat+3B↑j
.text:0000000000003CB0                 mov     rcx, rbx        ; to
.text:0000000000003CB3                 mov     dword ptr [rsp+178h+var_178], r9d
.text:0000000000003CB7                 call    _linkat
.text:0000000000003CBC                 test    eax, eax
.text:0000000000003CBE                 mov     ecx, eax
.text:0000000000003CC0                 jz      short loc_3C80
.text:0000000000003CC2                 call    ___errno_location
.text:0000000000003CC7                 mov     r9d, dword ptr [rsp+178h+var_178]
.text:0000000000003CCB                 mov     ecx, [rax]
.text:0000000000003CCD                 jmp     loc_3C01
.text:0000000000003CCD ; ---------------------------------------------------------------------------
.text:0000000000003CD2                 align 8
.text:0000000000003CD8
.text:0000000000003CD8 loc_3CD8:                               ; CODE XREF: force_linkat+9D↑j
.text:0000000000003CD8                 mov     rcx, rbx        ; new
.text:0000000000003CDB                 mov     edx, ebp        ; newfd
.text:0000000000003CDD                 mov     rsi, r15        ; old
.text:0000000000003CE0                 mov     edi, ebp        ; oldfd
.text:0000000000003CE2                 call    _renameat
.text:0000000000003CE7                 test    eax, eax
.text:0000000000003CE9                 mov     ecx, 0FFFFFFFFh
.text:0000000000003CEE                 jz      short loc_3CF7
.text:0000000000003CF0                 call    ___errno_location
.text:0000000000003CF5                 mov     ecx, [rax]
.text:0000000000003CF7
.text:0000000000003CF7 loc_3CF7:                               ; CODE XREF: force_linkat+12E↑j
.text:0000000000003CF7                 xor     edx, edx        ; flag
.text:0000000000003CF9                 mov     rsi, r15        ; name
.text:0000000000003CFC                 mov     edi, ebp        ; fd
.text:0000000000003CFE                 mov     [rsp+178h+var_16C], ecx
.text:0000000000003D02                 call    _unlinkat
.text:0000000000003D07                 mov     ecx, [rsp+178h+var_16C]
.text:0000000000003D0B                 jmp     loc_3C66
.text:0000000000003D10 ; ---------------------------------------------------------------------------
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: force_linkat+66↑j
.text:0000000000003D10                 call    ___errno_location
.text:0000000000003D15                 mov     ecx, [rax]
.text:0000000000003D17                 jmp     loc_3C80
.text:0000000000003D1C ; ---------------------------------------------------------------------------
.text:0000000000003D1C
.text:0000000000003D1C loc_3D1C:                               ; CODE XREF: force_linkat+D3↑j
.text:0000000000003D1C                 call    ___stack_chk_fail
.text:0000000000003D1C ; } // starts at 3BC0
.text:0000000000003D1C force_linkat    endp
.text:0000000000003D1C
.text:0000000000003D1C ; ---------------------------------------------------------------------------
.text:0000000000003D21                 align 10h
.text:0000000000003D30
.text:0000000000003D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D30
.text:0000000000003D30
.text:0000000000003D30                 public force_symlinkat
.text:0000000000003D30 force_symlinkat proc near               ; CODE XREF: do_link+5BF↑p
.text:0000000000003D30
.text:0000000000003D30 var_14C         = dword ptr -14Ch
.text:0000000000003D30 var_148         = qword ptr -148h
.text:0000000000003D30 var_140         = dword ptr -140h
.text:0000000000003D30 dest            = byte ptr -138h
.text:0000000000003D30 var_30          = qword ptr -30h
.text:0000000000003D30
.text:0000000000003D30 ; __unwind {
.text:0000000000003D30                 push    r14
.text:0000000000003D32                 push    r13
.text:0000000000003D34                 push    r12
.text:0000000000003D36                 push    rbp
.text:0000000000003D37                 mov     r12, rdi
.text:0000000000003D3A                 push    rbx
.text:0000000000003D3B                 mov     ebp, esi
.text:0000000000003D3D                 mov     rbx, rdx
.text:0000000000003D40                 sub     rsp, 130h
.text:0000000000003D47                 mov     rax, fs:28h
.text:0000000000003D50                 mov     [rsp+158h+var_30], rax
.text:0000000000003D58                 xor     eax, eax
.text:0000000000003D5A                 test    r8d, r8d
.text:0000000000003D5D                 js      loc_3E08
.text:0000000000003D63
.text:0000000000003D63 loc_3D63:                               ; CODE XREF: force_symlinkat+F4↓j
.text:0000000000003D63                 cmp     cl, 1
.text:0000000000003D66                 jnz     short loc_3DD8
.text:0000000000003D68                 cmp     r8d, 11h
.text:0000000000003D6C                 jnz     short loc_3DD8
.text:0000000000003D6E                 lea     r14, [rsp+158h+dest]
.text:0000000000003D73                 mov     rdi, rbx        ; src
.text:0000000000003D76                 mov     rsi, r14        ; dest
.text:0000000000003D79                 call    samedir_template
.text:0000000000003D7E                 test    rax, rax
.text:0000000000003D81                 mov     r13, rax
.text:0000000000003D84                 jz      loc_3E70
.text:0000000000003D8A                 lea     rdx, [rsp+158h+var_148]
.text:0000000000003D8F                 lea     rcx, try_symlink
.text:0000000000003D96                 xor     esi, esi
.text:0000000000003D98                 mov     r8d, 6
.text:0000000000003D9E                 mov     rdi, rax        ; s
.text:0000000000003DA1                 mov     [rsp+158h+var_148], r12
.text:0000000000003DA6                 mov     [rsp+158h+var_140], ebp
.text:0000000000003DAA                 call    try_tempname_len
.text:0000000000003DAF                 test    eax, eax
.text:0000000000003DB1                 jz      short loc_3E30
.text:0000000000003DB3                 call    ___errno_location
.text:0000000000003DB8                 mov     r8d, [rax]
.text:0000000000003DBB
.text:0000000000003DBB loc_3DBB:                               ; CODE XREF: force_symlinkat+117↓j
.text:0000000000003DBB                                         ; force_symlinkat+13B↓j
.text:0000000000003DBB                 cmp     r13, r14
.text:0000000000003DBE                 jz      short loc_3DD8
.text:0000000000003DC0                 mov     rdi, r13        ; ptr
.text:0000000000003DC3                 mov     [rsp+158h+var_14C], r8d
.text:0000000000003DC8                 call    _free
.text:0000000000003DCD                 mov     r8d, [rsp+158h+var_14C]
.text:0000000000003DD2                 nop     word ptr [rax+rax+00h]
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: force_symlinkat+36↑j
.text:0000000000003DD8                                         ; force_symlinkat+3C↑j ...
.text:0000000000003DD8                 mov     rbx, [rsp+158h+var_30]
.text:0000000000003DE0                 xor     rbx, fs:28h
.text:0000000000003DE9                 mov     eax, r8d
.text:0000000000003DEC                 jnz     loc_3E7D
.text:0000000000003DF2                 add     rsp, 130h
.text:0000000000003DF9                 pop     rbx
.text:0000000000003DFA                 pop     rbp
.text:0000000000003DFB                 pop     r12
.text:0000000000003DFD                 pop     r13
.text:0000000000003DFF                 pop     r14
.text:0000000000003E01                 retn
.text:0000000000003E01 ; ---------------------------------------------------------------------------
.text:0000000000003E02                 align 8
.text:0000000000003E08
.text:0000000000003E08 loc_3E08:                               ; CODE XREF: force_symlinkat+2D↑j
.text:0000000000003E08                 mov     [rsp+158h+var_14C], ecx
.text:0000000000003E0C                 call    _symlinkat
.text:0000000000003E11                 test    eax, eax
.text:0000000000003E13                 mov     r8d, eax
.text:0000000000003E16                 jz      short loc_3DD8
.text:0000000000003E18                 call    ___errno_location
.text:0000000000003E1D                 mov     ecx, [rsp+158h+var_14C]
.text:0000000000003E21                 mov     r8d, [rax]
.text:0000000000003E24                 jmp     loc_3D63
.text:0000000000003E24 ; ---------------------------------------------------------------------------
.text:0000000000003E29                 align 10h
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: force_symlinkat+81↑j
.text:0000000000003E30                 mov     rcx, rbx        ; new
.text:0000000000003E33                 mov     edx, ebp        ; newfd
.text:0000000000003E35                 mov     rsi, r13        ; old
.text:0000000000003E38                 mov     edi, ebp        ; oldfd
.text:0000000000003E3A                 call    _renameat
.text:0000000000003E3F                 test    eax, eax
.text:0000000000003E41                 mov     r8d, 0FFFFFFFFh
.text:0000000000003E47                 jz      loc_3DBB
.text:0000000000003E4D                 call    ___errno_location
.text:0000000000003E52                 mov     r8d, [rax]
.text:0000000000003E55                 xor     edx, edx        ; flag
.text:0000000000003E57                 mov     rsi, r13        ; name
.text:0000000000003E5A                 mov     edi, ebp        ; fd
.text:0000000000003E5C                 mov     [rsp+158h+var_14C], r8d
.text:0000000000003E61                 call    _unlinkat
.text:0000000000003E66                 mov     r8d, [rsp+158h+var_14C]
.text:0000000000003E6B                 jmp     loc_3DBB
.text:0000000000003E70 ; ---------------------------------------------------------------------------
.text:0000000000003E70
.text:0000000000003E70 loc_3E70:                               ; CODE XREF: force_symlinkat+54↑j
.text:0000000000003E70                 call    ___errno_location
.text:0000000000003E75                 mov     r8d, [rax]
.text:0000000000003E78                 jmp     loc_3DD8
.text:0000000000003E7D ; ---------------------------------------------------------------------------
.text:0000000000003E7D
.text:0000000000003E7D loc_3E7D:                               ; CODE XREF: force_symlinkat+BC↑j
.text:0000000000003E7D                 call    ___stack_chk_fail
.text:0000000000003E7D ; } // starts at 3D30
.text:0000000000003E7D force_symlinkat endp
.text:0000000000003E7D
.text:0000000000003E7D ; ---------------------------------------------------------------------------
.text:0000000000003E82                 align 10h
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90
.text:0000000000003E90 ; __int64 __fastcall buffer_or_output(void *src)
.text:0000000000003E90 buffer_or_output proc near              ; CODE XREF: relpath+10D↓p
.text:0000000000003E90                                         ; relpath+14D↓p ...
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 push    r14
.text:0000000000003E92                 push    r13
.text:0000000000003E94                 mov     r14, rdi
.text:0000000000003E97                 push    r12
.text:0000000000003E99                 push    rbp
.text:0000000000003E9A                 push    rbx
.text:0000000000003E9B                 mov     r13, [rsi]
.text:0000000000003E9E                 test    r13, r13
.text:0000000000003EA1                 jz      short loc_3EF0
.text:0000000000003EA3                 mov     r12, rdx
.text:0000000000003EA6                 mov     rbx, rsi
.text:0000000000003EA9                 call    _strlen
.text:0000000000003EAE                 mov     rbp, rax
.text:0000000000003EB1                 cmp     [r12], rbp
.text:0000000000003EB5                 mov     eax, 1
.text:0000000000003EBA                 ja      short loc_3EC8
.text:0000000000003EBC                 pop     rbx
.text:0000000000003EBD                 pop     rbp
.text:0000000000003EBE                 pop     r12
.text:0000000000003EC0                 pop     r13
.text:0000000000003EC2                 pop     r14
.text:0000000000003EC4                 retn
.text:0000000000003EC4 ; ---------------------------------------------------------------------------
.text:0000000000003EC5                 align 8
.text:0000000000003EC8
.text:0000000000003EC8 loc_3EC8:                               ; CODE XREF: buffer_or_output+2A↑j
.text:0000000000003EC8                 lea     rdx, [rbp+1]    ; n
.text:0000000000003ECC                 mov     rsi, r14        ; src
.text:0000000000003ECF                 mov     rdi, r13        ; s
.text:0000000000003ED2                 call    _memcpy
.text:0000000000003ED7                 add     [rbx], rbp
.text:0000000000003EDA                 sub     [r12], rbp
.text:0000000000003EDE                 xor     eax, eax
.text:0000000000003EE0                 pop     rbx
.text:0000000000003EE1                 pop     rbp
.text:0000000000003EE2                 pop     r12
.text:0000000000003EE4                 pop     r13
.text:0000000000003EE6                 pop     r14
.text:0000000000003EE8                 retn
.text:0000000000003EE8 ; ---------------------------------------------------------------------------
.text:0000000000003EE9                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 loc_3EF0:                               ; CODE XREF: buffer_or_output+11↑j
.text:0000000000003EF0                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003EF7                 call    _fputs_unlocked
.text:0000000000003EFC                 pop     rbx
.text:0000000000003EFD                 xor     eax, eax
.text:0000000000003EFF                 pop     rbp
.text:0000000000003F00                 pop     r12
.text:0000000000003F02                 pop     r13
.text:0000000000003F04                 pop     r14
.text:0000000000003F06                 retn
.text:0000000000003F06 ; } // starts at 3E90
.text:0000000000003F06 buffer_or_output endp
.text:0000000000003F06
.text:0000000000003F06 ; ---------------------------------------------------------------------------
.text:0000000000003F07                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10
.text:0000000000003F10                 public relpath
.text:0000000000003F10 relpath         proc near               ; CODE XREF: do_link+699↑p
.text:0000000000003F10
.text:0000000000003F10 var_48          = qword ptr -48h
.text:0000000000003F10 var_40          = qword ptr -40h
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    r15
.text:0000000000003F12                 push    r14
.text:0000000000003F14                 push    r13
.text:0000000000003F16                 push    r12
.text:0000000000003F18                 push    rbp
.text:0000000000003F19                 push    rbx
.text:0000000000003F1A                 sub     rsp, 18h
.text:0000000000003F1E                 movzx   r8d, byte ptr [rdi+1]
.text:0000000000003F23                 mov     [rsp+48h+var_48], rcx
.text:0000000000003F27                 movzx   ecx, byte ptr [rsi+1]
.text:0000000000003F2B                 mov     [rsp+48h+var_40], rdx
.text:0000000000003F30                 cmp     cl, 2Fh ; '/'
.text:0000000000003F33                 setz    r9b
.text:0000000000003F37                 cmp     r8b, 2Fh ; '/'
.text:0000000000003F3B                 setz    dl
.text:0000000000003F3E                 xor     eax, eax
.text:0000000000003F40                 cmp     r9b, dl
.text:0000000000003F43                 jz      short loc_3F58
.text:0000000000003F45
.text:0000000000003F45 loc_3F45:                               ; CODE XREF: relpath+58↓j
.text:0000000000003F45                                         ; relpath+C1↓j ...
.text:0000000000003F45                 add     rsp, 18h
.text:0000000000003F49                 pop     rbx
.text:0000000000003F4A                 pop     rbp
.text:0000000000003F4B                 pop     r12
.text:0000000000003F4D                 pop     r13
.text:0000000000003F4F                 pop     r14
.text:0000000000003F51                 pop     r15
.text:0000000000003F53                 retn
.text:0000000000003F53 ; ---------------------------------------------------------------------------
.text:0000000000003F54                 align 8
.text:0000000000003F58
.text:0000000000003F58 loc_3F58:                               ; CODE XREF: relpath+33↑j
.text:0000000000003F58                 movzx   edx, byte ptr [rdi]
.text:0000000000003F5B                 movzx   r10d, byte ptr [rsi]
.text:0000000000003F5F                 test    dl, dl
.text:0000000000003F61                 setz    r9b
.text:0000000000003F65                 test    r10b, r10b
.text:0000000000003F68                 jz      short loc_3F45
.text:0000000000003F6A                 cmp     r10b, dl
.text:0000000000003F6D                 setnz   al
.text:0000000000003F70                 or      al, r9b
.text:0000000000003F73                 jnz     loc_4140
.text:0000000000003F79                 xor     edx, edx
.text:0000000000003F7B                 xor     r9d, r9d
.text:0000000000003F7E                 jmp     short loc_3FA4
.text:0000000000003F80 ; ---------------------------------------------------------------------------
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: relpath+A9↓j
.text:0000000000003F80                 add     rdx, 1
.text:0000000000003F84                 cmp     r8b, cl
.text:0000000000003F87                 jnz     loc_4120
.text:0000000000003F8D                 test    r10b, r10b
.text:0000000000003F90                 jnz     loc_4120
.text:0000000000003F96                 mov     r10d, ecx
.text:0000000000003F99                 movzx   r8d, byte ptr [rdi+rdx+1]
.text:0000000000003F9F                 movzx   ecx, byte ptr [rsi+rdx+1]
.text:0000000000003FA4
.text:0000000000003FA4 loc_3FA4:                               ; CODE XREF: relpath+6E↑j
.text:0000000000003FA4                 lea     r11d, [rdx+1]
.text:0000000000003FA8                 cmp     r10b, 2Fh ; '/'
.text:0000000000003FAC                 cmovz   r9d, r11d
.text:0000000000003FB0                 test    r8b, r8b
.text:0000000000003FB3                 setz    r10b
.text:0000000000003FB7                 test    cl, cl
.text:0000000000003FB9                 jnz     short loc_3F80
.text:0000000000003FBB                 cmp     r8b, 2Fh ; '/'
.text:0000000000003FBF                 jz      loc_4130
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: relpath+213↓j
.text:0000000000003FC5                 test    r10b, r10b
.text:0000000000003FC8                 jnz     loc_4130
.text:0000000000003FCE
.text:0000000000003FCE loc_3FCE:                               ; CODE XREF: relpath+219↓j
.text:0000000000003FCE                 test    r9d, r9d
.text:0000000000003FD1                 jz      loc_3F45
.text:0000000000003FD7
.text:0000000000003FD7 loc_3FD7:                               ; CODE XREF: relpath+223↓j
.text:0000000000003FD7                 movsxd  r9, r9d
.text:0000000000003FDA                 lea     r12, [rsi+r9]
.text:0000000000003FDE                 lea     rbx, [rdi+r9]
.text:0000000000003FE2                 movzx   eax, byte ptr [r12]
.text:0000000000003FE7                 cmp     al, 2Fh ; '/'
.text:0000000000003FE9                 jnz     short loc_3FF5
.text:0000000000003FEB                 movzx   eax, byte ptr [r12+1]
.text:0000000000003FF1                 add     r12, 1
.text:0000000000003FF5
.text:0000000000003FF5 loc_3FF5:                               ; CODE XREF: relpath+D9↑j
.text:0000000000003FF5                 xor     edx, edx
.text:0000000000003FF7                 cmp     byte ptr [rbx], 2Fh ; '/'
.text:0000000000003FFA                 setz    dl
.text:0000000000003FFD                 add     rbx, rdx
.text:0000000000004000                 test    al, al
.text:0000000000004002                 jnz     short loc_4048
.text:0000000000004004                 cmp     byte ptr [rbx], 0
.text:0000000000004007                 lea     rax, asc_BF52+2 ; "."
.text:000000000000400E                 lea     rsi, [rsp+48h+var_40]
.text:0000000000004013                 mov     rdx, rsp
.text:0000000000004016                 cmovz   rbx, rax
.text:000000000000401A                 mov     rdi, rbx        ; src
.text:000000000000401D                 call    buffer_or_output
.text:0000000000004022                 mov     ebp, eax
.text:0000000000004024
.text:0000000000004024 loc_4024:                               ; CODE XREF: relpath+1A3↓j
.text:0000000000004024                                         ; relpath+1D2↓j
.text:0000000000004024                 test    bpl, bpl
.text:0000000000004027                 jnz     loc_40F0
.text:000000000000402D
.text:000000000000402D loc_402D:                               ; CODE XREF: relpath+20B↓j
.text:000000000000402D                 add     rsp, 18h
.text:0000000000004031                 mov     eax, ebp
.text:0000000000004033                 pop     rbx
.text:0000000000004034                 xor     eax, 1
.text:0000000000004037                 pop     rbp
.text:0000000000004038                 pop     r12
.text:000000000000403A                 pop     r13
.text:000000000000403C                 pop     r14
.text:000000000000403E                 pop     r15
.text:0000000000004040                 retn
.text:0000000000004040 ; ---------------------------------------------------------------------------
.text:0000000000004041                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: relpath+F2↑j
.text:0000000000004048                 lea     r13, [rsp+48h+var_40]
.text:000000000000404D                 mov     r14, rsp
.text:0000000000004050                 lea     rdi, asc_BF52+1 ; src
.text:0000000000004057                 mov     rdx, r14
.text:000000000000405A                 mov     rsi, r13
.text:000000000000405D                 call    buffer_or_output
.text:0000000000004062                 mov     ebp, eax
.text:0000000000004064                 movzx   eax, byte ptr [r12]
.text:0000000000004069                 test    al, al
.text:000000000000406B                 jz      short loc_40B0
.text:000000000000406D                 lea     r15, asc_BF52   ; "/.."
.text:0000000000004074                 jmp     short loc_408D
.text:0000000000004074 ; ---------------------------------------------------------------------------
.text:0000000000004076                 align 20h
.text:0000000000004080
.text:0000000000004080 loc_4080:                               ; CODE XREF: relpath+17F↓j
.text:0000000000004080                 add     r12, 1
.text:0000000000004084                 movzx   eax, byte ptr [r12]
.text:0000000000004089                 test    al, al
.text:000000000000408B                 jz      short loc_40B0
.text:000000000000408D
.text:000000000000408D loc_408D:                               ; CODE XREF: relpath+164↑j
.text:000000000000408D                                         ; relpath+19C↓j
.text:000000000000408D                 cmp     al, 2Fh ; '/'
.text:000000000000408F                 jnz     short loc_4080
.text:0000000000004091                 add     r12, 1
.text:0000000000004095                 mov     rdx, r14
.text:0000000000004098                 mov     rsi, r13
.text:000000000000409B                 mov     rdi, r15        ; src
.text:000000000000409E                 call    buffer_or_output
.text:00000000000040A3                 or      ebp, eax
.text:00000000000040A5                 movzx   eax, byte ptr [r12]
.text:00000000000040AA                 test    al, al
.text:00000000000040AC                 jnz     short loc_408D
.text:00000000000040AE                 xchg    ax, ax
.text:00000000000040B0
.text:00000000000040B0 loc_40B0:                               ; CODE XREF: relpath+15B↑j
.text:00000000000040B0                                         ; relpath+17B↑j
.text:00000000000040B0                 cmp     byte ptr [rbx], 0
.text:00000000000040B3                 jz      loc_4024
.text:00000000000040B9                 lea     rdi, aLibs+6    ; src
.text:00000000000040C0                 mov     rdx, r14
.text:00000000000040C3                 mov     rsi, r13
.text:00000000000040C6                 call    buffer_or_output
.text:00000000000040CB                 mov     rdx, r14
.text:00000000000040CE                 mov     r12d, eax
.text:00000000000040D1                 mov     rsi, r13
.text:00000000000040D4                 mov     rdi, rbx        ; src
.text:00000000000040D7                 call    buffer_or_output
.text:00000000000040DC                 or      r12d, eax
.text:00000000000040DF                 or      ebp, r12d
.text:00000000000040E2                 jmp     loc_4024
.text:00000000000040E2 ; ---------------------------------------------------------------------------
.text:00000000000040E7                 align 10h
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: relpath+117↑j
.text:00000000000040F0                 lea     rsi, aGeneratingRela ; "generating relative path"
.text:00000000000040F7                 xor     edi, edi        ; domainname
.text:00000000000040F9                 mov     edx, 5          ; category
.text:00000000000040FE                 call    _dcgettext
.text:0000000000004103                 lea     rdx, aS_0+2     ; format
.text:000000000000410A                 mov     rcx, rax
.text:000000000000410D                 mov     esi, 24h ; '$'  ; errnum
.text:0000000000004112                 xor     edi, edi        ; status
.text:0000000000004114                 xor     eax, eax
.text:0000000000004116                 call    _error
.text:000000000000411B                 jmp     loc_402D
.text:0000000000004120 ; ---------------------------------------------------------------------------
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: relpath+77↑j
.text:0000000000004120                                         ; relpath+80↑j
.text:0000000000004120                 cmp     cl, 2Fh ; '/'
.text:0000000000004123                 jz      loc_3FC5
.text:0000000000004129                 jmp     loc_3FCE
.text:0000000000004129 ; ---------------------------------------------------------------------------
.text:000000000000412E                 align 10h
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: relpath+AF↑j
.text:0000000000004130                                         ; relpath+B8↑j
.text:0000000000004130                 mov     r9d, r11d
.text:0000000000004133                 jmp     loc_3FD7
.text:0000000000004133 ; ---------------------------------------------------------------------------
.text:0000000000004138                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: relpath+63↑j
.text:0000000000004140                 xor     eax, eax
.text:0000000000004142                 jmp     loc_3F45
.text:0000000000004142 ; } // starts at 3F10
.text:0000000000004142 relpath         endp
.text:0000000000004142
.text:0000000000004142 ; ---------------------------------------------------------------------------
.text:0000000000004147                 align 10h
.text:0000000000004150
.text:0000000000004150 ; =============== S U B R O U T I N E =======================================
.text:0000000000004150
.text:0000000000004150
.text:0000000000004150                 public set_simple_backup_suffix
.text:0000000000004150 set_simple_backup_suffix proc near      ; CODE XREF: main+3DE↑p
.text:0000000000004150                                         ; main+48E↑p ...
.text:0000000000004150 ; __unwind {
.text:0000000000004150                 test    rdi, rdi
.text:0000000000004153                 push    rbx
.text:0000000000004154                 mov     rbx, rdi
.text:0000000000004157                 jz      short loc_4180
.text:0000000000004159
.text:0000000000004159 loc_4159:                               ; CODE XREF: set_simple_backup_suffix+44↓j
.text:0000000000004159                 cmp     byte ptr [rbx], 0
.text:000000000000415C                 jnz     short loc_4170
.text:000000000000415E
.text:000000000000415E loc_415E:                               ; CODE XREF: set_simple_backup_suffix+2B↓j
.text:000000000000415E                                         ; set_simple_backup_suffix+42↓j
.text:000000000000415E                 lea     rbx, asc_BF74   ; "~"
.text:0000000000004165
.text:0000000000004165 loc_4165:                               ; CODE XREF: set_simple_backup_suffix+2D↓j
.text:0000000000004165                 mov     cs:simple_backup_suffix, rbx
.text:000000000000416C                 pop     rbx
.text:000000000000416D                 retn
.text:000000000000416D ; ---------------------------------------------------------------------------
.text:000000000000416E                 align 10h
.text:0000000000004170
.text:0000000000004170 loc_4170:                               ; CODE XREF: set_simple_backup_suffix+C↑j
.text:0000000000004170                 mov     rdi, rbx
.text:0000000000004173                 call    last_component
.text:0000000000004178                 cmp     rax, rbx
.text:000000000000417B                 jnz     short loc_415E
.text:000000000000417D                 jmp     short loc_4165
.text:000000000000417D ; ---------------------------------------------------------------------------
.text:000000000000417F                 align 20h
.text:0000000000004180
.text:0000000000004180 loc_4180:                               ; CODE XREF: set_simple_backup_suffix+7↑j
.text:0000000000004180                 lea     rdi, name       ; "SIMPLE_BACKUP_SUFFIX"
.text:0000000000004187                 call    _getenv
.text:000000000000418C                 test    rax, rax
.text:000000000000418F                 mov     rbx, rax
.text:0000000000004192                 jz      short loc_415E
.text:0000000000004194                 jmp     short loc_4159
.text:0000000000004194 ; } // starts at 4150
.text:0000000000004194 set_simple_backup_suffix endp
.text:0000000000004194
.text:0000000000004194 ; ---------------------------------------------------------------------------
.text:0000000000004196                 align 20h
.text:00000000000041A0
.text:00000000000041A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041A0
.text:00000000000041A0
.text:00000000000041A0                 public backupfile_internal
.text:00000000000041A0 backupfile_internal proc near           ; CODE XREF: find_backup_file_name+6↓p
.text:00000000000041A0
.text:00000000000041A0 fd              = dword ptr -0B0h
.text:00000000000041A0 src             = qword ptr -0A8h
.text:00000000000041A0 var_A0          = qword ptr -0A0h
.text:00000000000041A0 var_98          = dword ptr -98h
.text:00000000000041A0 var_94          = dword ptr -94h
.text:00000000000041A0 var_90          = qword ptr -90h
.text:00000000000041A0 size            = qword ptr -88h
.text:00000000000041A0 n               = qword ptr -80h
.text:00000000000041A0 var_78          = qword ptr -78h
.text:00000000000041A0 var_70          = qword ptr -70h
.text:00000000000041A0 var_68          = qword ptr -68h
.text:00000000000041A0 var_60          = qword ptr -60h
.text:00000000000041A0 var_55          = byte ptr -55h
.text:00000000000041A0 var_54          = dword ptr -54h
.text:00000000000041A0 var_50          = qword ptr -50h
.text:00000000000041A0 var_44          = dword ptr -44h
.text:00000000000041A0 var_40          = qword ptr -40h
.text:00000000000041A0
.text:00000000000041A0 ; __unwind {
.text:00000000000041A0                 push    r15
.text:00000000000041A2                 push    r14
.text:00000000000041A4                 push    r13
.text:00000000000041A6                 push    r12
.text:00000000000041A8                 push    rbp
.text:00000000000041A9                 push    rbx
.text:00000000000041AA                 mov     rbx, rsi
.text:00000000000041AD                 sub     rsp, 88h
.text:00000000000041B4                 mov     [rsp+0B8h+var_54], edi
.text:00000000000041B8                 mov     rdi, rsi
.text:00000000000041BB                 mov     [rsp+0B8h+src], rsi
.text:00000000000041C0                 mov     [rsp+0B8h+var_98], edx
.text:00000000000041C4                 mov     [rsp+0B8h+var_55], cl
.text:00000000000041C8                 mov     rax, fs:28h
.text:00000000000041D1                 mov     [rsp+0B8h+var_40], rax
.text:00000000000041D6                 xor     eax, eax
.text:00000000000041D8                 call    last_component
.text:00000000000041DD                 mov     rdi, rax        ; s
.text:00000000000041E0                 mov     r14, rax
.text:00000000000041E3                 call    _strlen
.text:00000000000041E8                 mov     rdi, cs:simple_backup_suffix ; s
.text:00000000000041EF                 sub     r14, rbx
.text:00000000000041F2                 add     rax, r14
.text:00000000000041F5                 mov     [rsp+0B8h+var_A0], rax
.text:00000000000041FA                 test    rdi, rdi
.text:00000000000041FD                 jz      loc_4784
.text:0000000000004203
.text:0000000000004203 loc_4203:                               ; CODE XREF: backupfile_internal+5F0↓j
.text:0000000000004203                 call    _strlen
.text:0000000000004208                 mov     rsi, [rsp+0B8h+var_A0]
.text:000000000000420D                 add     rax, 1
.text:0000000000004211                 cmp     rax, 9
.text:0000000000004215                 mov     [rsp+0B8h+var_68], rax
.text:000000000000421A                 lea     rdx, [rsi+1]
.text:000000000000421E                 mov     rsi, rax
.text:0000000000004221                 mov     eax, 9
.text:0000000000004226                 cmovnb  rax, rsi
.text:000000000000422A                 add     rax, rdx
.text:000000000000422D                 mov     [rsp+0B8h+n], rdx
.text:0000000000004232                 mov     rdi, rax        ; size
.text:0000000000004235                 mov     [rsp+0B8h+var_78], rax
.text:000000000000423A                 call    _malloc
.text:000000000000423F                 test    rax, rax
.text:0000000000004242                 mov     r15, rax
.text:0000000000004245                 jz      loc_4530
.text:000000000000424B                 lea     rax, [rsp+0B8h+var_44]
.text:0000000000004250                 mov     [rsp+0B8h+var_44], 0FFFFFFFFh
.text:0000000000004258                 mov     [rsp+0B8h+var_70], 0
.text:0000000000004261                 xor     r13d, r13d
.text:0000000000004264                 mov     [rsp+0B8h+var_50], rax
.text:0000000000004269
.text:0000000000004269 loc_4269:                               ; CODE XREF: backupfile_internal+366↓j
.text:0000000000004269                 mov     rdx, [rsp+0B8h+n] ; n
.text:000000000000426E                 mov     rsi, [rsp+0B8h+src] ; src
.text:0000000000004273                 mov     rdi, r15        ; dest
.text:0000000000004276                 call    _memcpy
.text:000000000000427B                 cmp     [rsp+0B8h+var_98], 1
.text:0000000000004280                 jz      loc_4560
.text:0000000000004286                 lea     rbp, [r15+r14]
.text:000000000000428A                 mov     rdi, rbp
.text:000000000000428D                 call    base_len
.text:0000000000004292                 test    r13, r13
.text:0000000000004295                 mov     r12, rax
.text:0000000000004298                 jz      loc_4640
.text:000000000000429E                 mov     rdi, r13        ; dirp
.text:00000000000042A1                 call    _rewinddir
.text:00000000000042A6
.text:00000000000042A6 loc_42A6:                               ; CODE XREF: backupfile_internal+4E1↓j
.text:00000000000042A6                 mov     rax, [rsp+0B8h+var_78]
.text:00000000000042AB                 mov     [rsp+0B8h+var_90], 1
.text:00000000000042B4                 mov     [rsp+0B8h+var_94], 2
.text:00000000000042BC                 mov     [rsp+0B8h+size], rax
.text:00000000000042C1                 lea     rax, [r12+4]
.text:00000000000042C6                 mov     qword ptr [rsp+0B8h+fd], rax
.text:00000000000042CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000042D0
.text:00000000000042D0 loc_42D0:                               ; CODE XREF: backupfile_internal+152↓j
.text:00000000000042D0                                         ; backupfile_internal+16A↓j ...
.text:00000000000042D0                 mov     rdi, r13        ; dirp
.text:00000000000042D3                 call    _readdir
.text:00000000000042D8                 test    rax, rax
.text:00000000000042DB                 jz      loc_4490
.text:00000000000042E1
.text:00000000000042E1 loc_42E1:                               ; CODE XREF: backupfile_internal+2E2↓j
.text:00000000000042E1                 lea     rbx, [rax+13h]
.text:00000000000042E5                 mov     rdi, rbx        ; s
.text:00000000000042E8                 call    _strlen
.text:00000000000042ED                 cmp     rax, qword ptr [rsp+0B8h+fd]
.text:00000000000042F2                 jb      short loc_42D0
.text:00000000000042F4                 lea     rbp, [r12+2]
.text:00000000000042F9                 lea     rdi, [r15+r14]  ; s1
.text:00000000000042FD                 mov     rsi, rbx        ; s2
.text:0000000000004300                 mov     rdx, rbp        ; n
.text:0000000000004303                 call    _memcmp
.text:0000000000004308                 test    eax, eax
.text:000000000000430A                 jnz     short loc_42D0
.text:000000000000430C                 add     rbx, rbp
.text:000000000000430F                 movzx   eax, byte ptr [rbx]
.text:0000000000004312                 lea     edx, [rax-31h]
.text:0000000000004315                 cmp     dl, 8
.text:0000000000004318                 ja      short loc_42D0
.text:000000000000431A                 cmp     al, 39h ; '9'
.text:000000000000431C                 movsx   eax, byte ptr [rbx+1]
.text:0000000000004320                 mov     ebp, 1
.text:0000000000004325                 setz    r8b
.text:0000000000004329                 mov     ecx, eax
.text:000000000000432B                 sub     eax, 30h ; '0'
.text:000000000000432E                 cmp     eax, 9
.text:0000000000004331                 ja      short loc_4353
.text:0000000000004333                 nop     dword ptr [rax+rax+00h]
.text:0000000000004338
.text:0000000000004338 loc_4338:                               ; CODE XREF: backupfile_internal+1B1↓j
.text:0000000000004338                 cmp     cl, 39h ; '9'
.text:000000000000433B                 setz    al
.text:000000000000433E                 add     rbp, 1
.text:0000000000004342                 and     r8d, eax
.text:0000000000004345                 movsx   eax, byte ptr [rbx+rbp]
.text:0000000000004349                 mov     ecx, eax
.text:000000000000434B                 sub     eax, 30h ; '0'
.text:000000000000434E                 cmp     eax, 9
.text:0000000000004351                 jbe     short loc_4338
.text:0000000000004353
.text:0000000000004353 loc_4353:                               ; CODE XREF: backupfile_internal+191↑j
.text:0000000000004353                 cmp     cl, 7Eh ; '~'
.text:0000000000004356                 jnz     loc_42D0
.text:000000000000435C                 cmp     byte ptr [rbx+rbp+1], 0
.text:0000000000004361                 jnz     loc_42D0
.text:0000000000004367                 mov     rdx, [rsp+0B8h+var_90] ; n
.text:000000000000436C                 cmp     rdx, rbp
.text:000000000000436F                 jb      short loc_439C
.text:0000000000004371                 mov     byte ptr [rsp+0B8h+var_60], r8b
.text:0000000000004376                 jnz     loc_42D0
.text:000000000000437C                 mov     rax, [rsp+0B8h+var_A0]
.text:0000000000004381                 mov     rsi, rbx        ; s2
.text:0000000000004384                 lea     rdi, [r15+rax+2] ; s1
.text:0000000000004389                 call    _memcmp
.text:000000000000438E                 test    eax, eax
.text:0000000000004390                 movzx   r8d, byte ptr [rsp+0B8h+var_60]
.text:0000000000004396                 jg      loc_42D0
.text:000000000000439C
.text:000000000000439C loc_439C:                               ; CODE XREF: backupfile_internal+1CF↑j
.text:000000000000439C                 movzx   esi, r8b
.text:00000000000043A0                 movzx   r9d, r8b
.text:00000000000043A4                 mov     [rsp+0B8h+var_94], esi
.text:00000000000043A8                 mov     rsi, [rsp+0B8h+var_A0]
.text:00000000000043AD                 lea     rax, [r9+rbp]
.text:00000000000043B1                 mov     [rsp+0B8h+var_90], rax
.text:00000000000043B6                 lea     rcx, [rsi+rax+4]
.text:00000000000043BB                 cmp     rcx, [rsp+0B8h+size]
.text:00000000000043C0                 jbe     loc_46F8
.text:00000000000043C6                 mov     edx, 2
.text:00000000000043CB                 xor     esi, esi
.text:00000000000043CD                 mov     rax, rdx
.text:00000000000043D0                 mul     rcx
.text:00000000000043D3                 jo      loc_47A3
.text:00000000000043D9
.text:00000000000043D9 loc_43D9:                               ; CODE XREF: backupfile_internal+608↓j
.text:00000000000043D9                 test    rax, rax
.text:00000000000043DC                 js      loc_4690
.text:00000000000043E2                 test    rsi, rsi
.text:00000000000043E5                 jnz     loc_4690
.text:00000000000043EB                 lea     rax, [rcx+rcx]
.text:00000000000043EF                 mov     [rsp+0B8h+size], rax
.text:00000000000043F4
.text:00000000000043F4 loc_43F4:                               ; CODE XREF: backupfile_internal+4F5↓j
.text:00000000000043F4                 mov     rsi, [rsp+0B8h+size] ; size
.text:00000000000043F9                 mov     rdi, r15        ; ptr
.text:00000000000043FC                 mov     [rsp+0B8h+var_60], r9
.text:0000000000004401                 call    _realloc
.text:0000000000004406                 test    rax, rax
.text:0000000000004409                 mov     r8, rax
.text:000000000000440C                 mov     r9, [rsp+0B8h+var_60]
.text:0000000000004411                 jz      loc_46A0
.text:0000000000004417
.text:0000000000004417 loc_4417:                               ; CODE XREF: backupfile_internal+55B↓j
.text:0000000000004417                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000441C                 lea     rdx, [rbp+2]    ; n
.text:0000000000004420                 mov     [rsp+0B8h+var_60], r8
.text:0000000000004425                 mov     rsi, rbx        ; src
.text:0000000000004428                 add     rax, r8
.text:000000000000442B                 mov     r8d, 7E2Eh
.text:0000000000004431                 lea     rcx, [rax+r9+2]
.text:0000000000004436                 mov     [rax], r8w
.text:000000000000443A                 mov     byte ptr [rax+2], 30h ; '0'
.text:000000000000443E                 mov     rdi, rcx        ; dest
.text:0000000000004441                 call    _memcpy
.text:0000000000004446                 add     rbp, rax
.text:0000000000004449                 mov     r8, [rsp+0B8h+var_60]
.text:000000000000444E                 movzx   edx, byte ptr [rbp-1]
.text:0000000000004452                 lea     rax, [rbp-1]
.text:0000000000004456                 cmp     dl, 39h ; '9'
.text:0000000000004459                 jnz     short loc_446F
.text:000000000000445B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004460
.text:0000000000004460 loc_4460:                               ; CODE XREF: backupfile_internal+2CD↓j
.text:0000000000004460                 mov     byte ptr [rax], 30h ; '0'
.text:0000000000004463                 sub     rax, 1
.text:0000000000004467                 movzx   edx, byte ptr [rax]
.text:000000000000446A                 cmp     dl, 39h ; '9'
.text:000000000000446D                 jz      short loc_4460
.text:000000000000446F
.text:000000000000446F loc_446F:                               ; CODE XREF: backupfile_internal+2B9↑j
.text:000000000000446F                 add     edx, 1
.text:0000000000004472                 mov     rdi, r13        ; dirp
.text:0000000000004475                 mov     r15, r8
.text:0000000000004478                 mov     [rax], dl
.text:000000000000447A                 call    _readdir
.text:000000000000447F                 test    rax, rax
.text:0000000000004482                 jnz     loc_42E1
.text:0000000000004488                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: backupfile_internal+13B↑j
.text:0000000000004490                                         ; backupfile_internal+58D↓j
.text:0000000000004490                 mov     eax, [rsp+0B8h+var_94]
.text:0000000000004494                 cmp     eax, 2
.text:0000000000004497                 jz      loc_4580
.text:000000000000449D                 cmp     eax, 3
.text:00000000000044A0                 jz      loc_46A0
.text:00000000000044A6                 cmp     eax, 1
.text:00000000000044A9                 jz      loc_45B0
.text:00000000000044AF
.text:00000000000044AF loc_44AF:                               ; CODE XREF: backupfile_internal+3DA↓j
.text:00000000000044AF                                         ; backupfile_internal+42A↓j ...
.text:00000000000044AF                 cmp     [rsp+0B8h+var_55], 0
.text:00000000000044B4                 jz      loc_476E
.text:00000000000044BA                 mov     edx, [rsp+0B8h+var_44]
.text:00000000000044BE                 lea     rcx, [r15+r14]
.text:00000000000044C2                 test    edx, edx
.text:00000000000044C4                 jns     short loc_44D9
.text:00000000000044C6                 mov     [rsp+0B8h+var_44], 0FFFFFF9Ch
.text:00000000000044CE                 mov     rcx, r15
.text:00000000000044D1                 mov     edx, 0FFFFFF9Ch
.text:00000000000044D6                 xor     r14d, r14d
.text:00000000000044D9
.text:00000000000044D9 loc_44D9:                               ; CODE XREF: backupfile_internal+324↑j
.text:00000000000044D9                 xor     r8d, r8d
.text:00000000000044DC                 cmp     [rsp+0B8h+var_98], 1
.text:00000000000044E1                 mov     rsi, [rsp+0B8h+src]
.text:00000000000044E6                 mov     edi, 0FFFFFF9Ch
.text:00000000000044EB                 setnz   r8b
.text:00000000000044EF                 call    renameat2
.text:00000000000044F4                 test    eax, eax
.text:00000000000044F6                 jz      loc_476E
.text:00000000000044FC                 call    ___errno_location
.text:0000000000004501                 mov     ebp, [rax]
.text:0000000000004503                 cmp     ebp, 11h
.text:0000000000004506                 jz      loc_4269
.text:000000000000450C                 test    r13, r13
.text:000000000000450F                 mov     rbx, rax
.text:0000000000004512                 jz      short loc_451C
.text:0000000000004514                 mov     rdi, r13        ; dirp
.text:0000000000004517                 call    _closedir
.text:000000000000451C
.text:000000000000451C loc_451C:                               ; CODE XREF: backupfile_internal+372↑j
.text:000000000000451C                 mov     rdi, r15        ; ptr
.text:000000000000451F                 xor     r15d, r15d
.text:0000000000004522                 call    _free
.text:0000000000004527                 mov     [rbx], ebp
.text:0000000000004529                 nop     dword ptr [rax+00000000h]
.text:0000000000004530
.text:0000000000004530 loc_4530:                               ; CODE XREF: backupfile_internal+A5↑j
.text:0000000000004530                                         ; backupfile_internal+516↓j ...
.text:0000000000004530                 mov     rsi, [rsp+0B8h+var_40]
.text:0000000000004535                 xor     rsi, fs:28h
.text:000000000000453E                 mov     rax, r15
.text:0000000000004541                 jnz     loc_47AD
.text:0000000000004547                 add     rsp, 88h
.text:000000000000454E                 pop     rbx
.text:000000000000454F                 pop     rbp
.text:0000000000004550                 pop     r12
.text:0000000000004552                 pop     r13
.text:0000000000004554                 pop     r14
.text:0000000000004556                 pop     r15
.text:0000000000004558                 retn
.text:0000000000004558 ; ---------------------------------------------------------------------------
.text:0000000000004559                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: backupfile_internal+E0↑j
.text:0000000000004560                 mov     rax, [rsp+0B8h+var_A0]
.text:0000000000004565                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:000000000000456A                 mov     rsi, cs:simple_backup_suffix ; src
.text:0000000000004571                 lea     rdi, [r15+rax]  ; dest
.text:0000000000004575                 call    _memcpy
.text:000000000000457A                 jmp     loc_44AF
.text:000000000000457A ; ---------------------------------------------------------------------------
.text:000000000000457F                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: backupfile_internal+2F7↑j
.text:0000000000004580                 cmp     [rsp+0B8h+var_98], 2
.text:0000000000004585                 jnz     short loc_45B0
.text:0000000000004587                 mov     rax, [rsp+0B8h+var_A0]
.text:000000000000458C                 mov     rdx, [rsp+0B8h+var_68] ; n
.text:0000000000004591                 mov     rsi, cs:simple_backup_suffix ; src
.text:0000000000004598                 lea     rdi, [r15+rax]  ; dest
.text:000000000000459C                 call    _memcpy
.text:00000000000045A1                 mov     [rsp+0B8h+var_98], 1
.text:00000000000045A9                 nop     dword ptr [rax+00000000h]
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: backupfile_internal+309↑j
.text:00000000000045B0                                         ; backupfile_internal+3E5↑j
.text:00000000000045B0                 mov     rdi, r15
.text:00000000000045B3                 call    last_component
.text:00000000000045B8                 mov     rdi, rax
.text:00000000000045BB                 mov     rbx, rax
.text:00000000000045BE                 call    base_len
.text:00000000000045C3                 cmp     rax, 0Eh
.text:00000000000045C7                 mov     rbp, rax
.text:00000000000045CA                 jbe     loc_44AF
.text:00000000000045D0                 cmp     [rsp+0B8h+var_70], 0
.text:00000000000045D6                 jnz     loc_46C0
.text:00000000000045DC                 mov     edi, [rsp+0B8h+var_44]
.text:00000000000045E0                 mov     [rsp+0B8h+fd], edi
.text:00000000000045E4                 call    ___errno_location
.text:00000000000045E9                 mov     edi, [rsp+0B8h+fd] ; fd
.text:00000000000045ED                 mov     r12, rax
.text:00000000000045F0                 test    edi, edi
.text:00000000000045F2                 js      loc_4732
.text:00000000000045F8                 mov     dword ptr [rax], 0
.text:00000000000045FE                 mov     esi, 3          ; name
.text:0000000000004603                 call    _fpathconf
.text:0000000000004608                 mov     ecx, [r12]
.text:000000000000460C                 xor     edx, edx
.text:000000000000460E                 test    ecx, ecx
.text:0000000000004610                 setz    dl
.text:0000000000004613                 sub     rax, rdx
.text:0000000000004616
.text:0000000000004616 loc_4616:                               ; CODE XREF: backupfile_internal+5C9↓j
.text:0000000000004616                 test    rax, rax
.text:0000000000004619                 mov     [rsp+0B8h+var_70], rax
.text:000000000000461E                 jns     loc_46C0
.text:0000000000004624                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004628                 jnz     loc_4795
.text:000000000000462E                 mov     [rsp+0B8h+var_70], 0FFFFFFFFFFFFFFFFh
.text:0000000000004637                 jmp     loc_44AF
.text:0000000000004637 ; ---------------------------------------------------------------------------
.text:000000000000463C                 align 20h
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: backupfile_internal+F8↑j
.text:0000000000004640                 mov     rcx, [rsp+0B8h+var_50]
.text:0000000000004645                 mov     edi, [rsp+0B8h+var_54]
.text:0000000000004649                 mov     r9d, 2Eh ; '.'
.text:000000000000464F                 xor     edx, edx
.text:0000000000004651                 movzx   ebx, word ptr [rbp+0]
.text:0000000000004655                 mov     rsi, r15
.text:0000000000004658                 mov     [rbp+0], r9w
.text:000000000000465D                 call    opendirat
.text:0000000000004662                 test    rax, rax
.text:0000000000004665                 mov     r13, rax
.text:0000000000004668                 lea     rdx, [rbp+r12+0]
.text:000000000000466D                 jz      loc_4700
.text:0000000000004673                 mov     [rbp+0], bx
.text:0000000000004677                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000467D                 mov     byte ptr [rdx+4], 0
.text:0000000000004681                 jmp     loc_42A6
.text:0000000000004681 ; ---------------------------------------------------------------------------
.text:0000000000004686                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: backupfile_internal+23C↑j
.text:0000000000004690                                         ; backupfile_internal+245↑j
.text:0000000000004690                 mov     [rsp+0B8h+size], rcx
.text:0000000000004695                 jmp     loc_43F4
.text:0000000000004695 ; ---------------------------------------------------------------------------
.text:000000000000469A                 align 20h
.text:00000000000046A0
.text:00000000000046A0 loc_46A0:                               ; CODE XREF: backupfile_internal+271↑j
.text:00000000000046A0                                         ; backupfile_internal+300↑j
.text:00000000000046A0                 mov     rdi, r15        ; ptr
.text:00000000000046A3                 xor     r15d, r15d
.text:00000000000046A6                 call    _free
.text:00000000000046AB                 call    ___errno_location
.text:00000000000046B0                 mov     dword ptr [rax], 0Ch
.text:00000000000046B6                 jmp     loc_4530
.text:00000000000046B6 ; ---------------------------------------------------------------------------
.text:00000000000046BB                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: backupfile_internal+436↑j
.text:00000000000046C0                                         ; backupfile_internal+47E↑j
.text:00000000000046C0                 cmp     rbp, [rsp+0B8h+var_70]
.text:00000000000046C5                 jbe     loc_44AF
.text:00000000000046CB
.text:00000000000046CB loc_46CB:                               ; CODE XREF: backupfile_internal+5FE↓j
.text:00000000000046CB                 mov     rax, [rsp+0B8h+var_A0]
.text:00000000000046D0                 mov     rsi, [rsp+0B8h+var_70]
.text:00000000000046D5                 add     rax, r15
.text:00000000000046D8                 lea     rdx, [rsi-1]
.text:00000000000046DC                 sub     rax, rbx
.text:00000000000046DF                 cmp     rax, rsi
.text:00000000000046E2                 cmovnb  rax, rdx
.text:00000000000046E6                 mov     byte ptr [rbx+rax], 7Eh ; '~'
.text:00000000000046EA                 mov     byte ptr [rbx+rax+1], 0
.text:00000000000046EF                 jmp     loc_44AF
.text:00000000000046EF ; ---------------------------------------------------------------------------
.text:00000000000046F4                 align 8
.text:00000000000046F8
.text:00000000000046F8 loc_46F8:                               ; CODE XREF: backupfile_internal+220↑j
.text:00000000000046F8                 mov     r8, r15
.text:00000000000046FB                 jmp     loc_4417
.text:0000000000004700 ; ---------------------------------------------------------------------------
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: backupfile_internal+4CD↑j
.text:0000000000004700                 mov     qword ptr [rsp+0B8h+fd], rdx
.text:0000000000004705                 call    ___errno_location
.text:000000000000470A                 cmp     dword ptr [rax], 0Ch
.text:000000000000470D                 mov     rdx, qword ptr [rsp+0B8h+fd]
.text:0000000000004712                 mov     [rbp+0], bx
.text:0000000000004716                 mov     dword ptr [rdx], 7E317E2Eh
.text:000000000000471C                 mov     byte ptr [rdx+4], 0
.text:0000000000004720                 setz    al
.text:0000000000004723                 movzx   eax, al
.text:0000000000004726                 add     eax, 2
.text:0000000000004729                 mov     [rsp+0B8h+var_94], eax
.text:000000000000472D                 jmp     loc_4490
.text:0000000000004732 ; ---------------------------------------------------------------------------
.text:0000000000004732
.text:0000000000004732 loc_4732:                               ; CODE XREF: backupfile_internal+452↑j
.text:0000000000004732                 movzx   edx, word ptr [rbx]
.text:0000000000004735                 mov     esi, 2Eh ; '.'
.text:000000000000473A                 mov     rdi, r15        ; path
.text:000000000000473D                 mov     [rbx], si
.text:0000000000004740                 mov     dword ptr [rax], 0
.text:0000000000004746                 mov     esi, 3          ; name
.text:000000000000474B                 mov     [rsp+0B8h+fd], edx
.text:000000000000474F                 call    _pathconf
.text:0000000000004754                 mov     edi, [r12]
.text:0000000000004758                 mov     edx, [rsp+0B8h+fd]
.text:000000000000475C                 xor     ecx, ecx
.text:000000000000475E                 test    edi, edi
.text:0000000000004760                 mov     [rbx], dx
.text:0000000000004763                 setz    cl
.text:0000000000004766                 sub     rax, rcx
.text:0000000000004769                 jmp     loc_4616
.text:000000000000476E ; ---------------------------------------------------------------------------
.text:000000000000476E
.text:000000000000476E loc_476E:                               ; CODE XREF: backupfile_internal+314↑j
.text:000000000000476E                                         ; backupfile_internal+356↑j
.text:000000000000476E                 test    r13, r13
.text:0000000000004771                 jz      loc_4530
.text:0000000000004777                 mov     rdi, r13        ; dirp
.text:000000000000477A                 call    _closedir
.text:000000000000477F                 jmp     loc_4530
.text:0000000000004784 ; ---------------------------------------------------------------------------
.text:0000000000004784
.text:0000000000004784 loc_4784:                               ; CODE XREF: backupfile_internal+5D↑j
.text:0000000000004784                 call    set_simple_backup_suffix
.text:0000000000004789                 mov     rdi, cs:simple_backup_suffix
.text:0000000000004790                 jmp     loc_4203
.text:0000000000004795 ; ---------------------------------------------------------------------------
.text:0000000000004795
.text:0000000000004795 loc_4795:                               ; CODE XREF: backupfile_internal+488↑j
.text:0000000000004795                 mov     [rsp+0B8h+var_70], 0Eh
.text:000000000000479E                 jmp     loc_46CB
.text:00000000000047A3 ; ---------------------------------------------------------------------------
.text:00000000000047A3
.text:00000000000047A3 loc_47A3:                               ; CODE XREF: backupfile_internal+233↑j
.text:00000000000047A3                 mov     esi, 1
.text:00000000000047A8                 jmp     loc_43D9
.text:00000000000047AD ; ---------------------------------------------------------------------------
.text:00000000000047AD
.text:00000000000047AD loc_47AD:                               ; CODE XREF: backupfile_internal+3A1↑j
.text:00000000000047AD                 call    ___stack_chk_fail
.text:00000000000047AD ; } // starts at 41A0
.text:00000000000047AD backupfile_internal endp
.text:00000000000047AD
.text:00000000000047AD ; ---------------------------------------------------------------------------
.text:00000000000047B2                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0 get_version_part_0 proc near            ; CODE XREF: get_version+A↓j
.text:00000000000047C0                                         ; xget_version:loc_4872↓j
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 sub     rsp, 8
.text:00000000000047C4                 mov     r9, cs:argmatch_die
.text:00000000000047CB                 lea     rdx, backup_args
.text:00000000000047D2                 lea     rcx, backup_types
.text:00000000000047D9                 mov     r8d, 4
.text:00000000000047DF                 call    __xargmatch_internal
.text:00000000000047E4                 lea     rdx, backup_types
.text:00000000000047EB                 mov     eax, [rdx+rax*4]
.text:00000000000047EE                 add     rsp, 8
.text:00000000000047F2                 retn
.text:00000000000047F2 ; } // starts at 47C0
.text:00000000000047F2 get_version_part_0 endp
.text:00000000000047F2
.text:00000000000047F2 ; ---------------------------------------------------------------------------
.text:00000000000047F3                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800                 public find_backup_file_name
.text:0000000000004800 find_backup_file_name proc near         ; CODE XREF: do_link+83A↑p
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 sub     rsp, 8
.text:0000000000004804                 xor     ecx, ecx
.text:0000000000004806                 call    backupfile_internal
.text:000000000000480B                 test    rax, rax
.text:000000000000480E                 jz      short loc_4815
.text:0000000000004810                 add     rsp, 8
.text:0000000000004814                 retn
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: find_backup_file_name+E↑j
.text:0000000000004815                 call    xalloc_die
.text:0000000000004815 ; } // starts at 4800
.text:0000000000004815 find_backup_file_name endp
.text:0000000000004815
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:000000000000481A                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820
.text:0000000000004820                 public get_version
.text:0000000000004820 get_version     proc near
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 test    rsi, rsi
.text:0000000000004823                 jz      short loc_4830
.text:0000000000004825                 cmp     byte ptr [rsi], 0
.text:0000000000004828                 jz      short loc_4830
.text:000000000000482A                 jmp     short get_version_part_0
.text:000000000000482A ; ---------------------------------------------------------------------------
.text:000000000000482C                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: get_version+3↑j
.text:0000000000004830                                         ; get_version+8↑j
.text:0000000000004830                 mov     eax, 2
.text:0000000000004835                 retn
.text:0000000000004835 ; } // starts at 4820
.text:0000000000004835 get_version     endp
.text:0000000000004835
.text:0000000000004835 ; ---------------------------------------------------------------------------
.text:0000000000004836                 align 20h
.text:0000000000004840
.text:0000000000004840 ; =============== S U B R O U T I N E =======================================
.text:0000000000004840
.text:0000000000004840
.text:0000000000004840                 public xget_version
.text:0000000000004840 xget_version    proc near               ; CODE XREF: main+3C4↑p
.text:0000000000004840 ; __unwind {
.text:0000000000004840                 test    rsi, rsi
.text:0000000000004843                 jz      short loc_484A
.text:0000000000004845                 cmp     byte ptr [rsi], 0
.text:0000000000004848                 jnz     short loc_4872
.text:000000000000484A
.text:000000000000484A loc_484A:                               ; CODE XREF: xget_version+3↑j
.text:000000000000484A                 lea     rdi, aVersionControl ; "VERSION_CONTROL"
.text:0000000000004851                 sub     rsp, 8
.text:0000000000004855                 call    _getenv
.text:000000000000485A                 test    rax, rax
.text:000000000000485D                 jz      short loc_4880
.text:000000000000485F                 cmp     byte ptr [rax], 0
.text:0000000000004862                 jz      short loc_4880
.text:0000000000004864                 lea     rdi, unk_BF8B
.text:000000000000486B                 mov     rsi, rax
.text:000000000000486E                 add     rsp, 8
.text:0000000000004872
.text:0000000000004872 loc_4872:                               ; CODE XREF: xget_version+8↑j
.text:0000000000004872                 jmp     get_version_part_0
.text:0000000000004872 ; ---------------------------------------------------------------------------
.text:0000000000004877                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: xget_version+1D↑j
.text:0000000000004880                                         ; xget_version+22↑j
.text:0000000000004880                 mov     eax, 2
.text:0000000000004885                 add     rsp, 8
.text:0000000000004889                 retn
.text:0000000000004889 ; } // starts at 4840
.text:0000000000004889 xget_version    endp
.text:0000000000004889
.text:0000000000004889 ; ---------------------------------------------------------------------------
.text:000000000000488A                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; char *__fastcall canonicalize_filename_mode(const char *name, canonicalize_mode_t_0 can_mode)
.text:0000000000004890                 public canonicalize_filename_mode
.text:0000000000004890 canonicalize_filename_mode proc near    ; CODE XREF: do_link+541↑p
.text:0000000000004890                                         ; do_link+551↑p
.text:0000000000004890
.text:0000000000004890 var_114         = dword ptr -114h
.text:0000000000004890 stat_buf        = qword ptr -110h
.text:0000000000004890 var_108         = qword ptr -108h
.text:0000000000004890 var_FD          = byte ptr -0FDh
.text:0000000000004890 var_FC          = dword ptr -0FCh
.text:0000000000004890 n               = qword ptr -0F8h
.text:0000000000004890 ptr             = qword ptr -0F0h
.text:0000000000004890 var_E8          = qword ptr -0E8h
.text:0000000000004890 var_E0          = qword ptr -0E0h
.text:0000000000004890 var_D8          = byte ptr -0D8h
.text:0000000000004890 var_C0          = dword ptr -0C0h
.text:0000000000004890 var_A8          = qword ptr -0A8h
.text:0000000000004890 var_40          = qword ptr -40h
.text:0000000000004890
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 push    r15
.text:0000000000004892                 push    r14
.text:0000000000004894                 push    r13
.text:0000000000004896                 push    r12
.text:0000000000004898                 push    rbp
.text:0000000000004899                 push    rbx
.text:000000000000489A                 sub     rsp, 0E8h
.text:00000000000048A1                 mov     rax, fs:28h
.text:00000000000048AA                 mov     [rsp+118h+var_40], rax
.text:00000000000048B2                 xor     eax, eax
.text:00000000000048B4                 mov     eax, esi
.text:00000000000048B6                 and     eax, 4
.text:00000000000048B9                 setnz   [rsp+118h+var_FD]
.text:00000000000048BE                 and     esi, 3
.text:00000000000048C1                 mov     [rsp+118h+var_FC], eax
.text:00000000000048C5                 lea     eax, [rsi-1]
.text:00000000000048C8                 mov     [rsp+118h+var_114], esi
.text:00000000000048CC                 test    esi, eax
.text:00000000000048CE                 jnz     loc_4E20
.text:00000000000048D4                 test    rdi, rdi
.text:00000000000048D7                 mov     r14, rdi
.text:00000000000048DA                 jz      loc_4E20
.text:00000000000048E0                 movzx   eax, byte ptr [rdi]
.text:00000000000048E3                 test    al, al
.text:00000000000048E5                 jz      loc_4E60
.text:00000000000048EB                 cmp     al, 2Fh ; '/'
.text:00000000000048ED                 jz      loc_4DB0
.text:00000000000048F3                 call    xgetcwd
.text:00000000000048F8                 test    rax, rax
.text:00000000000048FB                 mov     rbp, rax
.text:00000000000048FE                 jz      loc_4AB0
.text:0000000000004904                 mov     rdi, rax        ; s
.text:0000000000004907                 call    _strlen
.text:000000000000490C                 cmp     rax, 0FFFh
.text:0000000000004912                 mov     r15, rax
.text:0000000000004915                 jbe     loc_4DD0
.text:000000000000491B                 add     r15, rbp
.text:000000000000491E                 mov     rbx, r15
.text:0000000000004921
.text:0000000000004921 loc_4921:                               ; CODE XREF: canonicalize_filename_mode+53B↓j
.text:0000000000004921                                         ; canonicalize_filename_mode+55A↓j
.text:0000000000004921                 lea     rax, [rsp+118h+var_D8]
.text:0000000000004926                 mov     [rsp+118h+n], r14
.text:000000000000492B                 mov     [rsp+118h+var_108], 0
.text:0000000000004934                 mov     [rsp+118h+var_E8], 0
.text:000000000000493D                 mov     [rsp+118h+ptr], 0
.text:0000000000004946                 mov     [rsp+118h+stat_buf], rax
.text:000000000000494B
.text:000000000000494B loc_494B:                               ; CODE XREF: canonicalize_filename_mode+3D5↓j
.text:000000000000494B                                         ; canonicalize_filename_mode+3F0↓j ...
.text:000000000000494B                 movzx   eax, byte ptr [r14]
.text:000000000000494F                 test    al, al
.text:0000000000004951                 jz      loc_4A5F
.text:0000000000004957                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: canonicalize_filename_mode+1C9↓j
.text:0000000000004960                 cmp     al, 2Fh ; '/'
.text:0000000000004962                 jnz     short loc_497C
.text:0000000000004964                 nop     dword ptr [rax+00h]
.text:0000000000004968
.text:0000000000004968 loc_4968:                               ; CODE XREF: canonicalize_filename_mode+E2↓j
.text:0000000000004968                 add     r14, 1
.text:000000000000496C                 movzx   eax, byte ptr [r14]
.text:0000000000004970                 cmp     al, 2Fh ; '/'
.text:0000000000004972                 jz      short loc_4968
.text:0000000000004974                 test    al, al
.text:0000000000004976                 jz      loc_4C40
.text:000000000000497C
.text:000000000000497C loc_497C:                               ; CODE XREF: canonicalize_filename_mode+D2↑j
.text:000000000000497C                 mov     r13, r14
.text:000000000000497F                 jmp     short loc_498D
.text:000000000000497F ; ---------------------------------------------------------------------------
.text:0000000000004981                 align 8
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: canonicalize_filename_mode+108↓j
.text:0000000000004988                 cmp     dl, 2Fh ; '/'
.text:000000000000498B                 jz      short loc_499A
.text:000000000000498D
.text:000000000000498D loc_498D:                               ; CODE XREF: canonicalize_filename_mode+EF↑j
.text:000000000000498D                 add     r13, 1
.text:0000000000004991                 movzx   edx, byte ptr [r13+0]
.text:0000000000004996                 test    dl, dl
.text:0000000000004998                 jnz     short loc_4988
.text:000000000000499A
.text:000000000000499A loc_499A:                               ; CODE XREF: canonicalize_filename_mode+FB↑j
.text:000000000000499A                                         ; canonicalize_filename_mode+3B3↓j
.text:000000000000499A                 cmp     r13, r14
.text:000000000000499D                 jz      loc_4A5F
.text:00000000000049A3                 mov     r12, r13
.text:00000000000049A6                 sub     r12, r14
.text:00000000000049A9                 cmp     r12, 1
.text:00000000000049AD                 jz      loc_4B80
.text:00000000000049B3                 cmp     r12, 2
.text:00000000000049B7                 jnz     short loc_49C1
.text:00000000000049B9                 cmp     al, 2Eh ; '.'
.text:00000000000049BB                 jz      loc_4C50
.text:00000000000049C1
.text:00000000000049C1 loc_49C1:                               ; CODE XREF: canonicalize_filename_mode+127↑j
.text:00000000000049C1                                         ; canonicalize_filename_mode+2F2↓j ...
.text:00000000000049C1                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:00000000000049C6                 jz      short loc_49D0
.text:00000000000049C8                 mov     byte ptr [r15], 2Fh ; '/'
.text:00000000000049CC                 add     r15, 1
.text:00000000000049D0
.text:00000000000049D0 loc_49D0:                               ; CODE XREF: canonicalize_filename_mode+136↑j
.text:00000000000049D0                 lea     rax, [r15+r12]
.text:00000000000049D4                 cmp     rbx, rax
.text:00000000000049D7                 ja      short loc_4A0A
.text:00000000000049D9                 sub     rbx, rbp
.text:00000000000049DC                 sub     r15, rbp
.text:00000000000049DF                 mov     rdi, rbp
.text:00000000000049E2                 lea     rax, [r12+rbx+1]
.text:00000000000049E7                 add     rbx, 1000h
.text:00000000000049EE                 cmp     r12, 1000h
.text:00000000000049F5                 cmovge  rbx, rax
.text:00000000000049F9                 mov     rsi, rbx
.text:00000000000049FC                 call    xrealloc
.text:0000000000004A01                 mov     rbp, rax
.text:0000000000004A04                 add     rbx, rax
.text:0000000000004A07                 add     r15, rax
.text:0000000000004A0A
.text:0000000000004A0A loc_4A0A:                               ; CODE XREF: canonicalize_filename_mode+147↑j
.text:0000000000004A0A                 mov     rdi, r15        ; dest
.text:0000000000004A0D                 mov     rdx, r12        ; n
.text:0000000000004A10                 mov     rsi, r14        ; src
.text:0000000000004A13                 call    _memcpy
.text:0000000000004A18                 cmp     [rsp+118h+var_114], 2
.text:0000000000004A1D                 lea     r15, [r15+r12]
.text:0000000000004A21                 mov     byte ptr [r15], 0
.text:0000000000004A25                 jnz     loc_4AE0
.text:0000000000004A2B                 cmp     [rsp+118h+var_FD], 0
.text:0000000000004A30                 jz      loc_4AE0
.text:0000000000004A36
.text:0000000000004A36 loc_4A36:                               ; CODE XREF: canonicalize_filename_mode+290↓j
.text:0000000000004A36                 mov     [rsp+118h+var_C0], 0
.text:0000000000004A3E
.text:0000000000004A3E loc_4A3E:                               ; CODE XREF: canonicalize_filename_mode+31B↓j
.text:0000000000004A3E                 cmp     byte ptr [r13+0], 0
.text:0000000000004A43                 jz      short loc_4A50
.text:0000000000004A45                 cmp     [rsp+118h+var_114], 2
.text:0000000000004A4A                 jnz     loc_4EA7
.text:0000000000004A50
.text:0000000000004A50 loc_4A50:                               ; CODE XREF: canonicalize_filename_mode+1B3↑j
.text:0000000000004A50                                         ; canonicalize_filename_mode+2B8↓j ...
.text:0000000000004A50                 mov     r14, r13
.text:0000000000004A53                 movzx   eax, byte ptr [r14]
.text:0000000000004A57                 test    al, al
.text:0000000000004A59                 jnz     loc_4960
.text:0000000000004A5F
.text:0000000000004A5F loc_4A5F:                               ; CODE XREF: canonicalize_filename_mode+C1↑j
.text:0000000000004A5F                                         ; canonicalize_filename_mode+10D↑j
.text:0000000000004A5F                 lea     rax, [rbp+1]
.text:0000000000004A63                 cmp     r15, rax
.text:0000000000004A66                 jbe     short loc_4A73
.text:0000000000004A68                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000004A6D                 jnz     short loc_4A73
.text:0000000000004A6F                 sub     r15, 1
.text:0000000000004A73
.text:0000000000004A73 loc_4A73:                               ; CODE XREF: canonicalize_filename_mode+1D6↑j
.text:0000000000004A73                                         ; canonicalize_filename_mode+1DD↑j
.text:0000000000004A73                 lea     rax, [r15+1]
.text:0000000000004A77                 mov     byte ptr [r15], 0
.text:0000000000004A7B                 cmp     rbx, rax
.text:0000000000004A7E                 jz      short loc_4A92
.text:0000000000004A80                 sub     r15, rbp
.text:0000000000004A83                 mov     rdi, rbp
.text:0000000000004A86                 lea     rsi, [r15+1]
.text:0000000000004A8A                 call    xrealloc
.text:0000000000004A8F                 mov     rbp, rax
.text:0000000000004A92
.text:0000000000004A92 loc_4A92:                               ; CODE XREF: canonicalize_filename_mode+1EE↑j
.text:0000000000004A92                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000004A97                 call    _free
.text:0000000000004A9C                 mov     rax, [rsp+118h+var_108]
.text:0000000000004AA1                 test    rax, rax
.text:0000000000004AA4                 jz      short loc_4AB0
.text:0000000000004AA6                 mov     rdi, rax        ; ptr
.text:0000000000004AA9                 call    hash_free
.text:0000000000004AAE                 xchg    ax, ax
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: canonicalize_filename_mode+6E↑j
.text:0000000000004AB0                                         ; canonicalize_filename_mode+214↑j ...
.text:0000000000004AB0                 mov     rcx, [rsp+118h+var_40]
.text:0000000000004AB8                 xor     rcx, fs:28h
.text:0000000000004AC1                 mov     rax, rbp
.text:0000000000004AC4                 jnz     loc_4EC1
.text:0000000000004ACA                 add     rsp, 0E8h
.text:0000000000004AD1                 pop     rbx
.text:0000000000004AD2                 pop     rbp
.text:0000000000004AD3                 pop     r12
.text:0000000000004AD5                 pop     r13
.text:0000000000004AD7                 pop     r14
.text:0000000000004AD9                 pop     r15
.text:0000000000004ADB                 retn
.text:0000000000004ADB ; ---------------------------------------------------------------------------
.text:0000000000004ADC                 align 20h
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: canonicalize_filename_mode+195↑j
.text:0000000000004AE0                                         ; canonicalize_filename_mode+1A0↑j
.text:0000000000004AE0                 mov     eax, [rsp+118h+var_FC]
.text:0000000000004AE4                 mov     rdx, [rsp+118h+stat_buf] ; stat_buf
.text:0000000000004AE9                 mov     rsi, rbp        ; filename
.text:0000000000004AEC                 mov     edi, 1          ; ver
.text:0000000000004AF1                 test    eax, eax
.text:0000000000004AF3                 jz      loc_4BB0
.text:0000000000004AF9                 call    ___xstat
.text:0000000000004AFE                 test    eax, eax
.text:0000000000004B00                 setnz   al
.text:0000000000004B03
.text:0000000000004B03 loc_4B03:                               ; CODE XREF: canonicalize_filename_mode+32A↓j
.text:0000000000004B03                 test    al, al
.text:0000000000004B05                 jz      loc_4B90
.text:0000000000004B0B                 call    ___errno_location
.text:0000000000004B10                 mov     r14, rax
.text:0000000000004B13                 mov     edx, [rax]
.text:0000000000004B15                 mov     eax, [rsp+118h+var_114]
.text:0000000000004B19                 test    eax, eax
.text:0000000000004B1B                 jz      short loc_4B4E
.text:0000000000004B1D                 cmp     eax, 1
.text:0000000000004B20                 jnz     loc_4A36
.text:0000000000004B26                 lea     rsi, aLibs+6    ; accept
.text:0000000000004B2D                 mov     rdi, r13        ; s
.text:0000000000004B30                 mov     dword ptr [rsp+118h+var_E0], edx
.text:0000000000004B34                 call    _strspn
.text:0000000000004B39                 cmp     byte ptr [r13+rax+0], 0
.text:0000000000004B3F                 mov     edx, dword ptr [rsp+118h+var_E0]
.text:0000000000004B43                 jnz     short loc_4B4E
.text:0000000000004B45                 cmp     edx, 2
.text:0000000000004B48                 jz      loc_4A50
.text:0000000000004B4E
.text:0000000000004B4E loc_4B4E:                               ; CODE XREF: canonicalize_filename_mode+28B↑j
.text:0000000000004B4E                                         ; canonicalize_filename_mode+2B3↑j
.text:0000000000004B4E                 mov     r12, r14
.text:0000000000004B51
.text:0000000000004B51 loc_4B51:                               ; CODE XREF: canonicalize_filename_mode+624↓j
.text:0000000000004B51                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000004B56                 mov     [rsp+118h+var_114], edx
.text:0000000000004B5A                 call    _free
.text:0000000000004B5F                 mov     rdi, rbp        ; ptr
.text:0000000000004B62                 call    _free
.text:0000000000004B67                 cmp     [rsp+118h+var_108], 0
.text:0000000000004B6D                 mov     edx, [rsp+118h+var_114]
.text:0000000000004B71                 jz      loc_4C2C
.text:0000000000004B77                 jmp     loc_4C1A
.text:0000000000004B77 ; ---------------------------------------------------------------------------
.text:0000000000004B7C                 align 20h
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: canonicalize_filename_mode+11D↑j
.text:0000000000004B80                 cmp     al, 2Eh ; '.'
.text:0000000000004B82                 jnz     loc_49C1
.text:0000000000004B88                 jmp     loc_4A50
.text:0000000000004B88 ; ---------------------------------------------------------------------------
.text:0000000000004B8D                 align 10h
.text:0000000000004B90
.text:0000000000004B90 loc_4B90:                               ; CODE XREF: canonicalize_filename_mode+275↑j
.text:0000000000004B90                 mov     eax, [rsp+118h+var_C0]
.text:0000000000004B94                 and     eax, 0F000h
.text:0000000000004B99                 cmp     eax, 0A000h
.text:0000000000004B9E                 jz      short loc_4BC0
.text:0000000000004BA0                 cmp     eax, 4000h
.text:0000000000004BA5                 jz      loc_4A50
.text:0000000000004BAB                 jmp     loc_4A3E
.text:0000000000004BB0 ; ---------------------------------------------------------------------------
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: canonicalize_filename_mode+263↑j
.text:0000000000004BB0                 call    ___lxstat
.text:0000000000004BB5                 test    eax, eax
.text:0000000000004BB7                 setnz   al
.text:0000000000004BBA                 jmp     loc_4B03
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBF                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: canonicalize_filename_mode+30E↑j
.text:0000000000004BC0                 cmp     [rsp+118h+var_108], 0
.text:0000000000004BC6                 jz      loc_4D76
.text:0000000000004BCC
.text:0000000000004BCC loc_4BCC:                               ; CODE XREF: canonicalize_filename_mode+50F↓j
.text:0000000000004BCC                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000004BD1                 mov     rsi, [rsp+118h+n]
.text:0000000000004BD6                 mov     rdi, [rsp+118h+var_108]
.text:0000000000004BDB                 call    seen_file
.text:0000000000004BE0                 test    al, al
.text:0000000000004BE2                 jz      loc_4CA0
.text:0000000000004BE8                 cmp     [rsp+118h+var_114], 2
.text:0000000000004BED                 jz      loc_4A50
.text:0000000000004BF3                 call    ___errno_location
.text:0000000000004BF8                 mov     edx, 28h ; '('
.text:0000000000004BFD                 mov     r12, rax
.text:0000000000004C00
.text:0000000000004C00 loc_4C00:                               ; CODE XREF: canonicalize_filename_mode+5BF↓j
.text:0000000000004C00                 mov     rdi, [rsp+118h+ptr] ; ptr
.text:0000000000004C05                 mov     [rsp+118h+var_114], edx
.text:0000000000004C09                 call    _free
.text:0000000000004C0E                 mov     rdi, rbp        ; ptr
.text:0000000000004C11                 call    _free
.text:0000000000004C16                 mov     edx, [rsp+118h+var_114]
.text:0000000000004C1A
.text:0000000000004C1A loc_4C1A:                               ; CODE XREF: canonicalize_filename_mode+2E7↑j
.text:0000000000004C1A                 mov     rdi, [rsp+118h+var_108] ; ptr
.text:0000000000004C1F                 mov     [rsp+118h+var_114], edx
.text:0000000000004C23                 call    hash_free
.text:0000000000004C28                 mov     edx, [rsp+118h+var_114]
.text:0000000000004C2C
.text:0000000000004C2C loc_4C2C:                               ; CODE XREF: canonicalize_filename_mode+2E1↑j
.text:0000000000004C2C                 mov     [r12], edx
.text:0000000000004C30                 xor     ebp, ebp
.text:0000000000004C32                 jmp     loc_4AB0
.text:0000000000004C32 ; ---------------------------------------------------------------------------
.text:0000000000004C37                 align 20h
.text:0000000000004C40
.text:0000000000004C40 loc_4C40:                               ; CODE XREF: canonicalize_filename_mode+E6↑j
.text:0000000000004C40                 mov     r13, r14
.text:0000000000004C43                 jmp     loc_499A
.text:0000000000004C43 ; ---------------------------------------------------------------------------
.text:0000000000004C48                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: canonicalize_filename_mode+12B↑j
.text:0000000000004C50                 cmp     byte ptr [r14+1], 2Eh ; '.'
.text:0000000000004C55                 jnz     loc_49C1
.text:0000000000004C5B                 lea     rax, [rbp+1]
.text:0000000000004C5F                 mov     r14, r13
.text:0000000000004C62                 cmp     r15, rax
.text:0000000000004C65                 jbe     loc_494B
.text:0000000000004C6B                 lea     rax, [r15-1]
.text:0000000000004C6F                 cmp     rbp, rax
.text:0000000000004C72                 jnb     loc_4EB9
.text:0000000000004C78                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:0000000000004C7D                 mov     r15, rax
.text:0000000000004C80                 jz      loc_494B
.text:0000000000004C86
.text:0000000000004C86 loc_4C86:                               ; CODE XREF: canonicalize_filename_mode+40E↓j
.text:0000000000004C86                 sub     r15, 1
.text:0000000000004C8A                 cmp     rbp, r15
.text:0000000000004C8D                 jz      loc_4A50
.text:0000000000004C93                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000004C98                 jz      loc_4A50
.text:0000000000004C9E                 jmp     short loc_4C86
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA0
.text:0000000000004CA0 loc_4CA0:                               ; CODE XREF: canonicalize_filename_mode+352↑j
.text:0000000000004CA0                 mov     rdx, [rsp+118h+stat_buf]
.text:0000000000004CA5                 mov     rsi, [rsp+118h+n]
.text:0000000000004CAA                 mov     rdi, [rsp+118h+var_108]
.text:0000000000004CAF                 call    record_file
.text:0000000000004CB4                 mov     rsi, [rsp+118h+var_A8]
.text:0000000000004CB9                 mov     rdi, rbp        ; path
.text:0000000000004CBC                 call    areadlink_with_size
.text:0000000000004CC1                 test    rax, rax
.text:0000000000004CC4                 mov     r14, rax
.text:0000000000004CC7                 jz      loc_4E32
.text:0000000000004CCD                 mov     rdi, rax        ; s
.text:0000000000004CD0                 call    _strlen
.text:0000000000004CD5                 mov     rdi, r13        ; s
.text:0000000000004CD8                 mov     r12, rax
.text:0000000000004CDB                 mov     [rsp+118h+n], rax
.text:0000000000004CE0                 call    _strlen
.text:0000000000004CE5                 cmp     [rsp+118h+var_E8], 0
.text:0000000000004CEB                 mov     rdx, rax
.text:0000000000004CEE                 lea     rcx, [r12+rdx+1]
.text:0000000000004CF3                 jz      loc_4DEF
.text:0000000000004CF9                 cmp     [rsp+118h+var_E8], rcx
.text:0000000000004CFE                 jnb     short loc_4D21
.text:0000000000004D00                 mov     rdi, [rsp+118h+ptr]
.text:0000000000004D05                 mov     rsi, rcx
.text:0000000000004D08                 mov     [rsp+118h+var_E0], rdx
.text:0000000000004D0D                 mov     [rsp+118h+var_E8], rcx
.text:0000000000004D12                 call    xrealloc
.text:0000000000004D17                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000004D1C                 mov     [rsp+118h+ptr], rax
.text:0000000000004D21
.text:0000000000004D21 loc_4D21:                               ; CODE XREF: canonicalize_filename_mode+46E↑j
.text:0000000000004D21                                         ; canonicalize_filename_mode+58B↓j
.text:0000000000004D21                 mov     r12, [rsp+118h+ptr]
.text:0000000000004D26                 mov     rdi, [rsp+118h+n]
.text:0000000000004D2B                 add     rdx, 1          ; n
.text:0000000000004D2F                 mov     rsi, r13        ; src
.text:0000000000004D32                 add     rdi, r12        ; dest
.text:0000000000004D35                 mov     r13, r12
.text:0000000000004D38                 call    _memmove
.text:0000000000004D3D                 mov     rdx, [rsp+118h+n] ; n
.text:0000000000004D42                 mov     rsi, r14        ; src
.text:0000000000004D45                 mov     rdi, r12        ; dest
.text:0000000000004D48                 call    _memcpy
.text:0000000000004D4D                 cmp     byte ptr [r14], 2Fh ; '/'
.text:0000000000004D51                 mov     [rsp+118h+n], r12
.text:0000000000004D56                 lea     rax, [rbp+1]
.text:0000000000004D5A                 jz      loc_4E54
.text:0000000000004D60                 cmp     r15, rax
.text:0000000000004D63                 ja      loc_4E72
.text:0000000000004D69
.text:0000000000004D69 loc_4D69:                               ; CODE XREF: canonicalize_filename_mode+5CB↓j
.text:0000000000004D69                                         ; canonicalize_filename_mode+5F5↓j ...
.text:0000000000004D69                 mov     rdi, r14        ; ptr
.text:0000000000004D6C                 call    _free
.text:0000000000004D71                 jmp     loc_4A50
.text:0000000000004D76 ; ---------------------------------------------------------------------------
.text:0000000000004D76
.text:0000000000004D76 loc_4D76:                               ; CODE XREF: canonicalize_filename_mode+336↑j
.text:0000000000004D76                 lea     r8, triple_free
.text:0000000000004D7D                 lea     rcx, triple_compare_ino_str
.text:0000000000004D84                 xor     esi, esi
.text:0000000000004D86                 lea     rdx, triple_hash
.text:0000000000004D8D                 mov     edi, 7
.text:0000000000004D92                 call    hash_initialize
.text:0000000000004D97                 test    rax, rax
.text:0000000000004D9A                 mov     [rsp+118h+var_108], rax
.text:0000000000004D9F                 jnz     loc_4BCC
.text:0000000000004DA5                 call    xalloc_die
.text:0000000000004DA5 ; ---------------------------------------------------------------------------
.text:0000000000004DAA                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: canonicalize_filename_mode+5D↑j
.text:0000000000004DB0                 mov     edi, 1000h
.text:0000000000004DB5                 call    xmalloc
.text:0000000000004DBA                 mov     rbp, rax
.text:0000000000004DBD                 lea     rbx, [rax+1000h]
.text:0000000000004DC4                 lea     r15, [rax+1]
.text:0000000000004DC8                 mov     byte ptr [rax], 2Fh ; '/'
.text:0000000000004DCB                 jmp     loc_4921
.text:0000000000004DD0 ; ---------------------------------------------------------------------------
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: canonicalize_filename_mode+85↑j
.text:0000000000004DD0                 mov     rdi, rbp
.text:0000000000004DD3                 mov     esi, 1000h
.text:0000000000004DD8                 call    xrealloc
.text:0000000000004DDD                 mov     rbp, rax
.text:0000000000004DE0                 add     r15, rax
.text:0000000000004DE3                 lea     rbx, [rax+1000h]
.text:0000000000004DEA                 jmp     loc_4921
.text:0000000000004DEF ; ---------------------------------------------------------------------------
.text:0000000000004DEF
.text:0000000000004DEF loc_4DEF:                               ; CODE XREF: canonicalize_filename_mode+463↑j
.text:0000000000004DEF                 cmp     rcx, 1000h
.text:0000000000004DF6                 mov     eax, 1000h
.text:0000000000004DFB                 mov     [rsp+118h+var_E0], rdx
.text:0000000000004E00                 cmovnb  rax, rcx
.text:0000000000004E04                 mov     rdi, rax
.text:0000000000004E07                 mov     [rsp+118h+var_E8], rax
.text:0000000000004E0C                 call    xmalloc
.text:0000000000004E11                 mov     rdx, [rsp+118h+var_E0]
.text:0000000000004E16                 mov     [rsp+118h+ptr], rax
.text:0000000000004E1B                 jmp     loc_4D21
.text:0000000000004E20 ; ---------------------------------------------------------------------------
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: canonicalize_filename_mode+3E↑j
.text:0000000000004E20                                         ; canonicalize_filename_mode+4A↑j
.text:0000000000004E20                 call    ___errno_location
.text:0000000000004E25                 xor     ebp, ebp
.text:0000000000004E27                 mov     dword ptr [rax], 16h
.text:0000000000004E2D                 jmp     loc_4AB0
.text:0000000000004E32 ; ---------------------------------------------------------------------------
.text:0000000000004E32
.text:0000000000004E32 loc_4E32:                               ; CODE XREF: canonicalize_filename_mode+437↑j
.text:0000000000004E32                 call    ___errno_location
.text:0000000000004E37                 cmp     [rsp+118h+var_114], 2
.text:0000000000004E3C                 mov     r14, rax
.text:0000000000004E3F                 mov     edx, [rax]
.text:0000000000004E41                 jnz     short loc_4E4C
.text:0000000000004E43                 cmp     edx, 0Ch
.text:0000000000004E46                 jnz     loc_4A50
.text:0000000000004E4C
.text:0000000000004E4C loc_4E4C:                               ; CODE XREF: canonicalize_filename_mode+5B1↑j
.text:0000000000004E4C                 mov     r12, r14
.text:0000000000004E4F                 jmp     loc_4C00
.text:0000000000004E54 ; ---------------------------------------------------------------------------
.text:0000000000004E54
.text:0000000000004E54 loc_4E54:                               ; CODE XREF: canonicalize_filename_mode+4CA↑j
.text:0000000000004E54                 mov     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000004E58                 mov     r15, rax
.text:0000000000004E5B                 jmp     loc_4D69
.text:0000000000004E60 ; ---------------------------------------------------------------------------
.text:0000000000004E60
.text:0000000000004E60 loc_4E60:                               ; CODE XREF: canonicalize_filename_mode+55↑j
.text:0000000000004E60                 call    ___errno_location
.text:0000000000004E65                 xor     ebp, ebp
.text:0000000000004E67                 mov     dword ptr [rax], 2
.text:0000000000004E6D                 jmp     loc_4AB0
.text:0000000000004E72 ; ---------------------------------------------------------------------------
.text:0000000000004E72
.text:0000000000004E72 loc_4E72:                               ; CODE XREF: canonicalize_filename_mode+4D3↑j
.text:0000000000004E72                 lea     rax, [r15-1]
.text:0000000000004E76                 cmp     rbp, rax
.text:0000000000004E79                 jnb     short loc_4E82
.text:0000000000004E7B                 cmp     byte ptr [r15-2], 2Fh ; '/'
.text:0000000000004E80                 jnz     short loc_4E8D
.text:0000000000004E82
.text:0000000000004E82 loc_4E82:                               ; CODE XREF: canonicalize_filename_mode+5E9↑j
.text:0000000000004E82                 mov     r15, rax
.text:0000000000004E85                 jmp     loc_4D69
.text:0000000000004E8A ; ---------------------------------------------------------------------------
.text:0000000000004E8A
.text:0000000000004E8A loc_4E8A:                               ; CODE XREF: canonicalize_filename_mode+615↓j
.text:0000000000004E8A                 mov     rax, r15
.text:0000000000004E8D
.text:0000000000004E8D loc_4E8D:                               ; CODE XREF: canonicalize_filename_mode+5F0↑j
.text:0000000000004E8D                 lea     r15, [rax-1]
.text:0000000000004E91                 cmp     rbp, r15
.text:0000000000004E94                 jz      loc_4D69
.text:0000000000004E9A                 cmp     byte ptr [r15-1], 2Fh ; '/'
.text:0000000000004E9F                 jz      loc_4D69
.text:0000000000004EA5                 jmp     short loc_4E8A
.text:0000000000004EA7 ; ---------------------------------------------------------------------------
.text:0000000000004EA7
.text:0000000000004EA7 loc_4EA7:                               ; CODE XREF: canonicalize_filename_mode+1BA↑j
.text:0000000000004EA7                 call    ___errno_location
.text:0000000000004EAC                 mov     edx, 14h
.text:0000000000004EB1                 mov     r12, rax
.text:0000000000004EB4                 jmp     loc_4B51
.text:0000000000004EB9 ; ---------------------------------------------------------------------------
.text:0000000000004EB9
.text:0000000000004EB9 loc_4EB9:                               ; CODE XREF: canonicalize_filename_mode+3E2↑j
.text:0000000000004EB9                 mov     r15, rax
.text:0000000000004EBC                 jmp     loc_494B
.text:0000000000004EC1 ; ---------------------------------------------------------------------------
.text:0000000000004EC1
.text:0000000000004EC1 loc_4EC1:                               ; CODE XREF: canonicalize_filename_mode+234↑j
.text:0000000000004EC1                 call    ___stack_chk_fail
.text:0000000000004EC1 ; } // starts at 4890
.text:0000000000004EC1 canonicalize_filename_mode endp
.text:0000000000004EC1
.text:0000000000004EC1 ; ---------------------------------------------------------------------------
.text:0000000000004EC6                 align 10h
.text:0000000000004ED0
.text:0000000000004ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004ED0
.text:0000000000004ED0
.text:0000000000004ED0                 public close_stdin_set_file_name
.text:0000000000004ED0 close_stdin_set_file_name proc near
.text:0000000000004ED0 ; __unwind {
.text:0000000000004ED0                 mov     cs:file_name, rdi
.text:0000000000004ED7                 retn
.text:0000000000004ED7 ; } // starts at 4ED0
.text:0000000000004ED7 close_stdin_set_file_name endp
.text:0000000000004ED7
.text:0000000000004ED7 ; ---------------------------------------------------------------------------
.text:0000000000004ED8                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0
.text:0000000000004EE0                 public close_stdin
.text:0000000000004EE0 close_stdin     proc near               ; DATA XREF: main+6D↑o
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 push    r12
.text:0000000000004EE2                 push    rbp
.text:0000000000004EE3                 push    rbx
.text:0000000000004EE4                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:0000000000004EEB                 mov     rdi, rbx
.text:0000000000004EEE                 call    freadahead
.text:0000000000004EF3                 test    rax, rax
.text:0000000000004EF6                 jnz     loc_4F98
.text:0000000000004EFC                 mov     rdi, rbx        ; stream
.text:0000000000004EFF                 call    close_stream
.text:0000000000004F04                 test    eax, eax
.text:0000000000004F06                 jnz     short loc_4F38
.text:0000000000004F08                 pop     rbx
.text:0000000000004F09                 pop     rbp
.text:0000000000004F0A                 pop     r12
.text:0000000000004F0C                 jmp     close_stdout
.text:0000000000004F0C ; ---------------------------------------------------------------------------
.text:0000000000004F11                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: close_stdin+D0↓j
.text:0000000000004F18                 call    rpl_fflush
.text:0000000000004F1D                 test    eax, eax
.text:0000000000004F1F                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000004F26                 jz      loc_4FB6
.text:0000000000004F2C                 call    close_stream
.text:0000000000004F31                 nop     dword ptr [rax+00000000h]
.text:0000000000004F38
.text:0000000000004F38 loc_4F38:                               ; CODE XREF: close_stdin+26↑j
.text:0000000000004F38                                         ; close_stdin+DD↓j
.text:0000000000004F38                 lea     rsi, aErrorClosingFi ; "error closing file"
.text:0000000000004F3F                 xor     edi, edi        ; domainname
.text:0000000000004F41                 mov     edx, 5          ; category
.text:0000000000004F46                 call    _dcgettext
.text:0000000000004F4B                 mov     rbx, cs:file_name
.text:0000000000004F52                 mov     r12, rax
.text:0000000000004F55                 call    ___errno_location
.text:0000000000004F5A                 mov     rbp, rax
.text:0000000000004F5D                 test    rbx, rbx
.text:0000000000004F60                 jz      short loc_4FD0
.text:0000000000004F62                 mov     rdi, rbx
.text:0000000000004F65                 call    quotearg_colon
.text:0000000000004F6A                 mov     esi, [rbp+0]    ; errnum
.text:0000000000004F6D                 lea     rdx, format     ; "%s: %s"
.text:0000000000004F74                 mov     rcx, rax
.text:0000000000004F77                 mov     r8, r12
.text:0000000000004F7A                 xor     edi, edi        ; status
.text:0000000000004F7C                 xor     eax, eax
.text:0000000000004F7E                 call    _error
.text:0000000000004F83
.text:0000000000004F83 loc_4F83:                               ; CODE XREF: close_stdin+105↓j
.text:0000000000004F83                 call    close_stdout
.text:0000000000004F88                 mov     edi, cs:exit_failure ; status
.text:0000000000004F8E                 call    __exit
.text:0000000000004F8E ; ---------------------------------------------------------------------------
.text:0000000000004F93                 align 8
.text:0000000000004F98
.text:0000000000004F98 loc_4F98:                               ; CODE XREF: close_stdin+16↑j
.text:0000000000004F98                 xor     esi, esi
.text:0000000000004F9A                 mov     rdi, rbx
.text:0000000000004F9D                 mov     edx, 1
.text:0000000000004FA2                 call    rpl_fseeko
.text:0000000000004FA7                 test    eax, eax
.text:0000000000004FA9                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000004FB0                 jz      loc_4F18
.text:0000000000004FB6
.text:0000000000004FB6 loc_4FB6:                               ; CODE XREF: close_stdin+46↑j
.text:0000000000004FB6                 call    close_stream
.text:0000000000004FBB                 test    eax, eax
.text:0000000000004FBD                 jnz     loc_4F38
.text:0000000000004FC3                 pop     rbx
.text:0000000000004FC4                 pop     rbp
.text:0000000000004FC5                 pop     r12
.text:0000000000004FC7                 jmp     close_stdout
.text:0000000000004FC7 ; ---------------------------------------------------------------------------
.text:0000000000004FCC                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 loc_4FD0:                               ; CODE XREF: close_stdin+80↑j
.text:0000000000004FD0                 mov     esi, [rax]      ; errnum
.text:0000000000004FD2                 lea     rdx, aS_0+2     ; format
.text:0000000000004FD9                 mov     rcx, r12
.text:0000000000004FDC                 xor     edi, edi        ; status
.text:0000000000004FDE                 xor     eax, eax
.text:0000000000004FE0                 call    _error
.text:0000000000004FE5                 jmp     short loc_4F83
.text:0000000000004FE5 ; } // starts at 4EE0
.text:0000000000004FE5 close_stdin     endp
.text:0000000000004FE5
.text:0000000000004FE5 ; ---------------------------------------------------------------------------
.text:0000000000004FE7                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0
.text:0000000000004FF0                 public close_stdout_set_file_name
.text:0000000000004FF0 close_stdout_set_file_name proc near
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 mov     cs:file_name_0, rdi
.text:0000000000004FF7                 retn
.text:0000000000004FF7 ; } // starts at 4FF0
.text:0000000000004FF7 close_stdout_set_file_name endp
.text:0000000000004FF7
.text:0000000000004FF7 ; ---------------------------------------------------------------------------
.text:0000000000004FF8                 align 20h
.text:0000000000005000
.text:0000000000005000 ; =============== S U B R O U T I N E =======================================
.text:0000000000005000
.text:0000000000005000
.text:0000000000005000                 public close_stdout_set_ignore_EPIPE
.text:0000000000005000 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005000 ; __unwind {
.text:0000000000005000                 mov     cs:ignore_EPIPE, dil
.text:0000000000005007                 retn
.text:0000000000005007 ; } // starts at 5000
.text:0000000000005007 close_stdout_set_ignore_EPIPE endp
.text:0000000000005007
.text:0000000000005007 ; ---------------------------------------------------------------------------
.text:0000000000005008                 align 10h
.text:0000000000005010
.text:0000000000005010 ; =============== S U B R O U T I N E =======================================
.text:0000000000005010
.text:0000000000005010 ; Attributes: info_from_lumina
.text:0000000000005010
.text:0000000000005010 ; void __cdecl close_stdout()
.text:0000000000005010                 public close_stdout
.text:0000000000005010 close_stdout    proc near               ; CODE XREF: close_stdin+2C↑j
.text:0000000000005010                                         ; close_stdin:loc_4F83↑p ...
.text:0000000000005010 ; __unwind {
.text:0000000000005010                 push    rbp
.text:0000000000005011                 push    rbx
.text:0000000000005012                 sub     rsp, 8
.text:0000000000005016                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000501D                 call    close_stream
.text:0000000000005022                 test    eax, eax
.text:0000000000005024                 jz      short loc_503C
.text:0000000000005026                 call    ___errno_location
.text:000000000000502B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005032                 mov     rbx, rax
.text:0000000000005035                 jz      short loc_5053
.text:0000000000005037                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000503A                 jnz     short loc_5053
.text:000000000000503C
.text:000000000000503C loc_503C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000503C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005043                 call    close_stream
.text:0000000000005048                 test    eax, eax
.text:000000000000504A                 jnz     short loc_5092
.text:000000000000504C                 add     rsp, 8
.text:0000000000005050                 pop     rbx
.text:0000000000005051                 pop     rbp
.text:0000000000005052                 retn
.text:0000000000005053 ; ---------------------------------------------------------------------------
.text:0000000000005053
.text:0000000000005053 loc_5053:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005053                                         ; close_stdout+2A↑j
.text:0000000000005053                 lea     rsi, aWriteError ; "write error"
.text:000000000000505A                 xor     edi, edi        ; domainname
.text:000000000000505C                 mov     edx, 5          ; category
.text:0000000000005061                 call    _dcgettext
.text:0000000000005066                 mov     rdi, cs:file_name_0
.text:000000000000506D                 mov     rbp, rax
.text:0000000000005070                 test    rdi, rdi
.text:0000000000005073                 jz      short loc_509D
.text:0000000000005075                 call    quotearg_colon
.text:000000000000507A                 mov     esi, [rbx]      ; errnum
.text:000000000000507C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005083                 mov     rcx, rax
.text:0000000000005086                 mov     r8, rbp
.text:0000000000005089                 xor     edi, edi        ; status
.text:000000000000508B                 xor     eax, eax
.text:000000000000508D                 call    _error
.text:0000000000005092
.text:0000000000005092 loc_5092:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005092                                         ; close_stdout+A2↓j
.text:0000000000005092                 mov     edi, cs:exit_failure ; status
.text:0000000000005098                 call    __exit
.text:000000000000509D ; ---------------------------------------------------------------------------
.text:000000000000509D
.text:000000000000509D loc_509D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000509D                 mov     esi, [rbx]      ; errnum
.text:000000000000509F                 lea     rdx, aS_0+2     ; format
.text:00000000000050A6                 mov     rcx, rax
.text:00000000000050A9                 xor     edi, edi        ; status
.text:00000000000050AB                 xor     eax, eax
.text:00000000000050AD                 call    _error
.text:00000000000050B2                 jmp     short loc_5092
.text:00000000000050B2 ; } // starts at 5010
.text:00000000000050B2 close_stdout    endp
.text:00000000000050B2
.text:00000000000050B2 ; ---------------------------------------------------------------------------
.text:00000000000050B4                 align 20h
.text:00000000000050C0
.text:00000000000050C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050C0
.text:00000000000050C0
.text:00000000000050C0                 public dir_name
.text:00000000000050C0 dir_name        proc near               ; CODE XREF: do_link+52F↑p
.text:00000000000050C0                                         ; same_nameat_part_0+2B↓p ...
.text:00000000000050C0 ; __unwind {
.text:00000000000050C0                 sub     rsp, 8
.text:00000000000050C4                 call    mdir_name
.text:00000000000050C9                 test    rax, rax
.text:00000000000050CC                 jz      short loc_50D3
.text:00000000000050CE                 add     rsp, 8
.text:00000000000050D2                 retn
.text:00000000000050D3 ; ---------------------------------------------------------------------------
.text:00000000000050D3
.text:00000000000050D3 loc_50D3:                               ; CODE XREF: dir_name+C↑j
.text:00000000000050D3                 call    xalloc_die
.text:00000000000050D3 ; } // starts at 50C0
.text:00000000000050D3 dir_name        endp
.text:00000000000050D3
.text:00000000000050D3 ; ---------------------------------------------------------------------------
.text:00000000000050D8                 align 20h
.text:00000000000050E0
.text:00000000000050E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000050E0
.text:00000000000050E0 ; Attributes: info_from_lumina
.text:00000000000050E0
.text:00000000000050E0 ; size_t __fastcall dir_len(const char *file)
.text:00000000000050E0                 public dir_len
.text:00000000000050E0 dir_len         proc near               ; CODE XREF: mdir_name+9↓p
.text:00000000000050E0 ; __unwind {
.text:00000000000050E0                 push    rbp
.text:00000000000050E1                 push    rbx
.text:00000000000050E2                 xor     ebp, ebp
.text:00000000000050E4                 mov     rbx, rdi
.text:00000000000050E7                 sub     rsp, 8
.text:00000000000050EB                 cmp     byte ptr [rdi], 2Fh ; '/'
.text:00000000000050EE                 setz    bpl
.text:00000000000050F2                 call    last_component
.text:00000000000050F7                 mov     rcx, rax
.text:00000000000050FA                 sub     rcx, rbx
.text:00000000000050FD                 cmp     rcx, rbp
.text:0000000000005100                 jbe     short loc_5130
.text:0000000000005102                 cmp     byte ptr [rax-1], 2Fh ; '/'
.text:0000000000005106                 lea     rdx, [rcx-1]
.text:000000000000510A                 jz      short loc_511E
.text:000000000000510C                 jmp     short loc_5130
.text:000000000000510C ; ---------------------------------------------------------------------------
.text:000000000000510E                 align 10h
.text:0000000000005110
.text:0000000000005110 loc_5110:                               ; CODE XREF: dir_len+41↓j
.text:0000000000005110                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000005115                 lea     rax, [rdx-1]
.text:0000000000005119                 jnz     short loc_5123
.text:000000000000511B                 mov     rdx, rax
.text:000000000000511E
.text:000000000000511E loc_511E:                               ; CODE XREF: dir_len+2A↑j
.text:000000000000511E                 cmp     rbp, rdx
.text:0000000000005121                 jnz     short loc_5110
.text:0000000000005123
.text:0000000000005123 loc_5123:                               ; CODE XREF: dir_len+39↑j
.text:0000000000005123                 add     rsp, 8
.text:0000000000005127                 mov     rax, rdx
.text:000000000000512A                 pop     rbx
.text:000000000000512B                 pop     rbp
.text:000000000000512C                 retn
.text:000000000000512C ; ---------------------------------------------------------------------------
.text:000000000000512D                 align 10h
.text:0000000000005130
.text:0000000000005130 loc_5130:                               ; CODE XREF: dir_len+20↑j
.text:0000000000005130                                         ; dir_len+2C↑j
.text:0000000000005130                 add     rsp, 8
.text:0000000000005134                 mov     rdx, rcx
.text:0000000000005137                 mov     rax, rdx
.text:000000000000513A                 pop     rbx
.text:000000000000513B                 pop     rbp
.text:000000000000513C                 retn
.text:000000000000513C ; } // starts at 50E0
.text:000000000000513C dir_len         endp
.text:000000000000513C
.text:000000000000513C ; ---------------------------------------------------------------------------
.text:000000000000513D                 align 20h
.text:0000000000005140
.text:0000000000005140 ; =============== S U B R O U T I N E =======================================
.text:0000000000005140
.text:0000000000005140 ; Attributes: info_from_lumina
.text:0000000000005140
.text:0000000000005140 ; char *__fastcall mdir_name(const char *file)
.text:0000000000005140                 public mdir_name
.text:0000000000005140 mdir_name       proc near               ; CODE XREF: dir_name+4↑p
.text:0000000000005140 ; __unwind {
.text:0000000000005140                 push    rbp
.text:0000000000005141                 push    rbx
.text:0000000000005142                 mov     rbp, rdi
.text:0000000000005145                 sub     rsp, 8
.text:0000000000005149                 call    dir_len
.text:000000000000514E                 test    rax, rax
.text:0000000000005151                 mov     rbx, rax
.text:0000000000005154                 setz    al
.text:0000000000005157                 movzx   eax, al
.text:000000000000515A                 lea     rdi, [rbx+rax+1] ; size
.text:000000000000515F                 call    _malloc
.text:0000000000005164                 test    rax, rax
.text:0000000000005167                 mov     rcx, rax
.text:000000000000516A                 jz      short loc_5186
.text:000000000000516C                 mov     rdx, rbx        ; n
.text:000000000000516F                 mov     rsi, rbp        ; src
.text:0000000000005172                 mov     rdi, rax        ; dest
.text:0000000000005175                 call    _memcpy
.text:000000000000517A                 test    rbx, rbx
.text:000000000000517D                 mov     rcx, rax
.text:0000000000005180                 jz      short loc_5190
.text:0000000000005182
.text:0000000000005182 loc_5182:                               ; CODE XREF: mdir_name+58↓j
.text:0000000000005182                 mov     byte ptr [rcx+rbx], 0
.text:0000000000005186
.text:0000000000005186 loc_5186:                               ; CODE XREF: mdir_name+2A↑j
.text:0000000000005186                 add     rsp, 8
.text:000000000000518A                 mov     rax, rcx
.text:000000000000518D                 pop     rbx
.text:000000000000518E                 pop     rbp
.text:000000000000518F                 retn
.text:0000000000005190 ; ---------------------------------------------------------------------------
.text:0000000000005190
.text:0000000000005190 loc_5190:                               ; CODE XREF: mdir_name+40↑j
.text:0000000000005190                 mov     byte ptr [rax], 2Eh ; '.'
.text:0000000000005193                 mov     ebx, 1
.text:0000000000005198                 jmp     short loc_5182
.text:0000000000005198 ; } // starts at 5140
.text:0000000000005198 mdir_name       endp
.text:0000000000005198
.text:0000000000005198 ; ---------------------------------------------------------------------------
.text:000000000000519A                 align 20h
.text:00000000000051A0
.text:00000000000051A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051A0
.text:00000000000051A0 ; Attributes: info_from_lumina
.text:00000000000051A0
.text:00000000000051A0 ; char *__fastcall last_component(const char *name)
.text:00000000000051A0                 public last_component
.text:00000000000051A0 last_component  proc near               ; CODE XREF: main+4C0↑p
.text:00000000000051A0                                         ; samedir_template+A↑p ...
.text:00000000000051A0 ; __unwind {
.text:00000000000051A0                 movzx   edx, byte ptr [rdi]
.text:00000000000051A3                 mov     rax, rdi
.text:00000000000051A6                 cmp     dl, 2Fh ; '/'
.text:00000000000051A9                 jnz     short loc_51BC
.text:00000000000051AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: last_component+1A↓j
.text:00000000000051B0                 add     rax, 1
.text:00000000000051B4                 movzx   edx, byte ptr [rax]
.text:00000000000051B7                 cmp     dl, 2Fh ; '/'
.text:00000000000051BA                 jz      short loc_51B0
.text:00000000000051BC
.text:00000000000051BC loc_51BC:                               ; CODE XREF: last_component+9↑j
.text:00000000000051BC                 test    dl, dl
.text:00000000000051BE                 jz      short locret_51FA
.text:00000000000051C0                 mov     rcx, rax
.text:00000000000051C3                 xor     esi, esi
.text:00000000000051C5                 jmp     short loc_51E5
.text:00000000000051C5 ; ---------------------------------------------------------------------------
.text:00000000000051C7                 align 10h
.text:00000000000051D0
.text:00000000000051D0 loc_51D0:                               ; CODE XREF: last_component+48↓j
.text:00000000000051D0                 test    sil, sil
.text:00000000000051D3                 jz      short loc_51DA
.text:00000000000051D5                 mov     rax, rcx
.text:00000000000051D8                 xor     esi, esi
.text:00000000000051DA
.text:00000000000051DA loc_51DA:                               ; CODE XREF: last_component+33↑j
.text:00000000000051DA                 add     rcx, 1
.text:00000000000051DE                 movzx   edx, byte ptr [rcx]
.text:00000000000051E1                 test    dl, dl
.text:00000000000051E3                 jz      short locret_51FA
.text:00000000000051E5
.text:00000000000051E5 loc_51E5:                               ; CODE XREF: last_component+25↑j
.text:00000000000051E5                                         ; last_component+58↓j
.text:00000000000051E5                 cmp     dl, 2Fh ; '/'
.text:00000000000051E8                 jnz     short loc_51D0
.text:00000000000051EA                 add     rcx, 1
.text:00000000000051EE                 movzx   edx, byte ptr [rcx]
.text:00000000000051F1                 mov     esi, 1
.text:00000000000051F6                 test    dl, dl
.text:00000000000051F8                 jnz     short loc_51E5
.text:00000000000051FA
.text:00000000000051FA locret_51FA:                            ; CODE XREF: last_component+1E↑j
.text:00000000000051FA                                         ; last_component+43↑j
.text:00000000000051FA                 rep retn
.text:00000000000051FA ; } // starts at 51A0
.text:00000000000051FA last_component  endp
.text:00000000000051FA
.text:00000000000051FA ; ---------------------------------------------------------------------------
.text:00000000000051FC                 align 20h
.text:0000000000005200
.text:0000000000005200 ; =============== S U B R O U T I N E =======================================
.text:0000000000005200
.text:0000000000005200 ; Attributes: info_from_lumina
.text:0000000000005200
.text:0000000000005200 ; size_t __fastcall base_len(const char *name)
.text:0000000000005200                 public base_len
.text:0000000000005200 base_len        proc near               ; CODE XREF: backupfile_internal+ED↑p
.text:0000000000005200                                         ; backupfile_internal+41E↑p ...
.text:0000000000005200 ; __unwind {
.text:0000000000005200                 push    rbx
.text:0000000000005201                 mov     rbx, rdi
.text:0000000000005204                 call    _strlen
.text:0000000000005209                 cmp     rax, 1
.text:000000000000520D                 jbe     short loc_521A
.text:000000000000520F                 cmp     byte ptr [rbx+rax-1], 2Fh ; '/'
.text:0000000000005214                 lea     rdx, [rax-1]
.text:0000000000005218                 jz      short loc_5228
.text:000000000000521A
.text:000000000000521A loc_521A:                               ; CODE XREF: base_len+D↑j
.text:000000000000521A                 pop     rbx
.text:000000000000521B                 retn
.text:000000000000521B ; ---------------------------------------------------------------------------
.text:000000000000521C                 align 20h
.text:0000000000005220
.text:0000000000005220 loc_5220:                               ; CODE XREF: base_len+37↓j
.text:0000000000005220                 mov     rdx, rax
.text:0000000000005223                 nop     dword ptr [rax+rax+00h]
.text:0000000000005228
.text:0000000000005228 loc_5228:                               ; CODE XREF: base_len+18↑j
.text:0000000000005228                 cmp     rdx, 1
.text:000000000000522C                 jz      short loc_5240
.text:000000000000522E                 cmp     byte ptr [rbx+rdx-1], 2Fh ; '/'
.text:0000000000005233                 lea     rax, [rdx-1]
.text:0000000000005237                 jz      short loc_5220
.text:0000000000005239                 mov     rax, rdx
.text:000000000000523C                 pop     rbx
.text:000000000000523D                 retn
.text:000000000000523D ; ---------------------------------------------------------------------------
.text:000000000000523E                 align 20h
.text:0000000000005240
.text:0000000000005240 loc_5240:                               ; CODE XREF: base_len+2C↑j
.text:0000000000005240                 mov     eax, 1
.text:0000000000005245                 pop     rbx
.text:0000000000005246                 retn
.text:0000000000005246 ; } // starts at 5200
.text:0000000000005246 base_len        endp
.text:0000000000005246
.text:0000000000005246 ; ---------------------------------------------------------------------------
.text:0000000000005247                 align 10h
.text:0000000000005250
.text:0000000000005250 ; =============== S U B R O U T I N E =======================================
.text:0000000000005250
.text:0000000000005250
.text:0000000000005250                 public strip_trailing_slashes
.text:0000000000005250 strip_trailing_slashes proc near        ; CODE XREF: main+4DB↑p
.text:0000000000005250 ; __unwind {
.text:0000000000005250                 push    rbp
.text:0000000000005251                 push    rbx
.text:0000000000005252                 mov     rbp, rdi
.text:0000000000005255                 sub     rsp, 8
.text:0000000000005259                 call    last_component
.text:000000000000525E                 cmp     byte ptr [rax], 0
.text:0000000000005261                 mov     rbx, rax
.text:0000000000005264                 cmovz   rbx, rbp
.text:0000000000005268                 mov     rdi, rbx
.text:000000000000526B                 call    base_len
.text:0000000000005270                 add     rbx, rax
.text:0000000000005273                 cmp     byte ptr [rbx], 0
.text:0000000000005276                 mov     byte ptr [rbx], 0
.text:0000000000005279                 setnz   al
.text:000000000000527C                 add     rsp, 8
.text:0000000000005280                 pop     rbx
.text:0000000000005281                 pop     rbp
.text:0000000000005282                 retn
.text:0000000000005282 ; } // starts at 5250
.text:0000000000005282 strip_trailing_slashes endp
.text:0000000000005282
.text:0000000000005282 ; ---------------------------------------------------------------------------
.text:0000000000005283                 align 10h
.text:0000000000005290
.text:0000000000005290 ; =============== S U B R O U T I N E =======================================
.text:0000000000005290
.text:0000000000005290 ; Attributes: info_from_lumina
.text:0000000000005290
.text:0000000000005290 ; void __fastcall record_file(Hash_table *ht, const char *file, const stat *stats)
.text:0000000000005290                 public record_file
.text:0000000000005290 record_file     proc near               ; CODE XREF: do_link+B3↑p
.text:0000000000005290                                         ; canonicalize_filename_mode+41F↑p
.text:0000000000005290 ; __unwind {
.text:0000000000005290                 test    rdi, rdi
.text:0000000000005293                 jz      short locret_5310
.text:0000000000005295                 push    r13
.text:0000000000005297                 push    r12
.text:0000000000005299                 mov     r13, rdi
.text:000000000000529C                 push    rbp
.text:000000000000529D                 push    rbx
.text:000000000000529E                 mov     r12, rsi
.text:00000000000052A1                 mov     edi, 18h
.text:00000000000052A6                 mov     rbp, rdx
.text:00000000000052A9                 sub     rsp, 8
.text:00000000000052AD                 call    xmalloc
.text:00000000000052B2                 mov     rdi, r12        ; src
.text:00000000000052B5                 mov     rbx, rax
.text:00000000000052B8                 call    xstrdup
.text:00000000000052BD                 mov     [rbx], rax
.text:00000000000052C0                 mov     rax, [rbp+8]
.text:00000000000052C4                 mov     rsi, rbx
.text:00000000000052C7                 mov     rdi, r13
.text:00000000000052CA                 mov     [rbx+8], rax
.text:00000000000052CE                 mov     rax, [rbp+0]
.text:00000000000052D2                 mov     [rbx+10h], rax
.text:00000000000052D6                 call    hash_insert
.text:00000000000052DB                 test    rax, rax
.text:00000000000052DE                 jz      short loc_5312
.text:00000000000052E0                 cmp     rbx, rax
.text:00000000000052E3                 jz      short loc_5300
.text:00000000000052E5                 add     rsp, 8
.text:00000000000052E9                 mov     rdi, rbx        ; ptr
.text:00000000000052EC                 pop     rbx
.text:00000000000052ED                 pop     rbp
.text:00000000000052EE                 pop     r12
.text:00000000000052F0                 pop     r13
.text:00000000000052F2                 jmp     triple_free
.text:00000000000052F2 ; ---------------------------------------------------------------------------
.text:00000000000052F7                 align 20h
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: record_file+53↑j
.text:0000000000005300                 add     rsp, 8
.text:0000000000005304                 pop     rbx
.text:0000000000005305                 pop     rbp
.text:0000000000005306                 pop     r12
.text:0000000000005308                 pop     r13
.text:000000000000530A                 retn
.text:000000000000530A ; ---------------------------------------------------------------------------
.text:000000000000530B                 align 10h
.text:0000000000005310
.text:0000000000005310 locret_5310:                            ; CODE XREF: record_file+3↑j
.text:0000000000005310                 rep retn
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005312
.text:0000000000005312 loc_5312:                               ; CODE XREF: record_file+4E↑j
.text:0000000000005312                 call    xalloc_die
.text:0000000000005312 ; } // starts at 5290
.text:0000000000005312 record_file     endp
.text:0000000000005312
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005317                 align 20h
.text:0000000000005320
.text:0000000000005320 ; =============== S U B R O U T I N E =======================================
.text:0000000000005320
.text:0000000000005320 ; Attributes: info_from_lumina
.text:0000000000005320
.text:0000000000005320 ; _Bool __fastcall seen_file(const Hash_table *ht, const char *file, const stat *stats)
.text:0000000000005320                 public seen_file
.text:0000000000005320 seen_file       proc near               ; CODE XREF: do_link+3F9↑p
.text:0000000000005320                                         ; canonicalize_filename_mode+34B↑p
.text:0000000000005320
.text:0000000000005320 var_28          = qword ptr -28h
.text:0000000000005320 var_20          = qword ptr -20h
.text:0000000000005320 var_18          = qword ptr -18h
.text:0000000000005320 var_10          = qword ptr -10h
.text:0000000000005320
.text:0000000000005320 ; __unwind {
.text:0000000000005320                 sub     rsp, 28h
.text:0000000000005324                 mov     rax, fs:28h
.text:000000000000532D                 mov     [rsp+28h+var_10], rax
.text:0000000000005332                 xor     eax, eax
.text:0000000000005334                 test    rdi, rdi
.text:0000000000005337                 jz      short loc_535C
.text:0000000000005339                 mov     rax, [rdx+8]
.text:000000000000533D                 mov     [rsp+28h+var_28], rsi
.text:0000000000005341                 mov     rsi, rsp
.text:0000000000005344                 mov     [rsp+28h+var_20], rax
.text:0000000000005349                 mov     rax, [rdx]
.text:000000000000534C                 mov     [rsp+28h+var_18], rax
.text:0000000000005351                 call    hash_lookup
.text:0000000000005356                 test    rax, rax
.text:0000000000005359                 setnz   al
.text:000000000000535C
.text:000000000000535C loc_535C:                               ; CODE XREF: seen_file+17↑j
.text:000000000000535C                 mov     rcx, [rsp+28h+var_10]
.text:0000000000005361                 xor     rcx, fs:28h
.text:000000000000536A                 jnz     short loc_5371
.text:000000000000536C                 add     rsp, 28h
.text:0000000000005370                 retn
.text:0000000000005371 ; ---------------------------------------------------------------------------
.text:0000000000005371
.text:0000000000005371 loc_5371:                               ; CODE XREF: seen_file+4A↑j
.text:0000000000005371                 call    ___stack_chk_fail
.text:0000000000005371 ; } // starts at 5320
.text:0000000000005371 seen_file       endp
.text:0000000000005371
.text:0000000000005371 ; ---------------------------------------------------------------------------
.text:0000000000005376                 align 20h
.text:0000000000005380
.text:0000000000005380 ; =============== S U B R O U T I N E =======================================
.text:0000000000005380
.text:0000000000005380
.text:0000000000005380                 public file_name_concat
.text:0000000000005380 file_name_concat proc near              ; CODE XREF: main+4CE↑p
.text:0000000000005380 ; __unwind {
.text:0000000000005380                 sub     rsp, 8
.text:0000000000005384                 call    mfile_name_concat
.text:0000000000005389                 test    rax, rax
.text:000000000000538C                 jz      short loc_5393
.text:000000000000538E                 add     rsp, 8
.text:0000000000005392                 retn
.text:0000000000005393 ; ---------------------------------------------------------------------------
.text:0000000000005393
.text:0000000000005393 loc_5393:                               ; CODE XREF: file_name_concat+C↑j
.text:0000000000005393                 call    xalloc_die
.text:0000000000005393 ; } // starts at 5380
.text:0000000000005393 file_name_concat endp
.text:0000000000005393
.text:0000000000005393 ; ---------------------------------------------------------------------------
.text:0000000000005398                 align 20h
.text:00000000000053A0
.text:00000000000053A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053A0
.text:00000000000053A0
.text:00000000000053A0 ; __int64 __fastcall mfile_name_concat(void *src, void *)
.text:00000000000053A0                 public mfile_name_concat
.text:00000000000053A0 mfile_name_concat proc near             ; CODE XREF: file_name_concat+4↑p
.text:00000000000053A0
.text:00000000000053A0 var_48          = qword ptr -48h
.text:00000000000053A0 var_39          = byte ptr -39h
.text:00000000000053A0
.text:00000000000053A0 ; __unwind {
.text:00000000000053A0                 push    r15
.text:00000000000053A2                 push    r14
.text:00000000000053A4                 mov     r15, rdx
.text:00000000000053A7                 push    r13
.text:00000000000053A9                 push    r12
.text:00000000000053AB                 mov     r12, rdi
.text:00000000000053AE                 push    rbp
.text:00000000000053AF                 push    rbx
.text:00000000000053B0                 mov     rbp, rsi
.text:00000000000053B3                 sub     rsp, 18h
.text:00000000000053B7                 call    last_component
.text:00000000000053BC                 mov     rbx, rax
.text:00000000000053BF                 mov     rdi, rax
.text:00000000000053C2                 call    base_len
.text:00000000000053C7                 sub     rbx, r12
.text:00000000000053CA                 mov     r13, rax
.text:00000000000053CD                 mov     rdi, rbp        ; s
.text:00000000000053D0                 add     rbx, rax
.text:00000000000053D3                 call    _strlen
.text:00000000000053D8                 test    r13, r13
.text:00000000000053DB                 mov     r14, rax
.text:00000000000053DE                 jz      short loc_5410
.text:00000000000053E0                 cmp     byte ptr [r12+rbx-1], 2Fh ; '/'
.text:00000000000053E6                 jz      loc_5490
.text:00000000000053EC                 xor     eax, eax
.text:00000000000053EE                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:00000000000053F2                 mov     edx, 0
.text:00000000000053F7                 setnz   al
.text:00000000000053FA                 mov     [rsp+48h+var_48], rax
.text:00000000000053FE                 mov     eax, 2Fh ; '/'
.text:0000000000005403                 cmovz   eax, edx
.text:0000000000005406                 mov     [rsp+48h+var_39], al
.text:000000000000540A                 jmp     short loc_542E
.text:000000000000540A ; ---------------------------------------------------------------------------
.text:000000000000540C                 align 10h
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: mfile_name_concat+3E↑j
.text:0000000000005410                 xor     eax, eax
.text:0000000000005412                 cmp     byte ptr [rbp+0], 2Fh ; '/'
.text:0000000000005416                 mov     edx, 0
.text:000000000000541B                 setz    al
.text:000000000000541E                 mov     [rsp+48h+var_48], rax
.text:0000000000005422                 mov     eax, 2Eh ; '.'
.text:0000000000005427                 cmovnz  eax, edx
.text:000000000000542A                 mov     [rsp+48h+var_39], al
.text:000000000000542E
.text:000000000000542E loc_542E:                               ; CODE XREF: mfile_name_concat+6A↑j
.text:000000000000542E                                         ; mfile_name_concat+FD↓j
.text:000000000000542E                 lea     rdi, [rbx+r14+1]
.text:0000000000005433                 add     rdi, [rsp+48h+var_48] ; size
.text:0000000000005437                 call    _malloc
.text:000000000000543C                 test    rax, rax
.text:000000000000543F                 mov     r13, rax
.text:0000000000005442                 jz      short loc_5476
.text:0000000000005444                 mov     rdi, rax        ; dest
.text:0000000000005447                 mov     rdx, rbx        ; n
.text:000000000000544A                 mov     rsi, r12        ; src
.text:000000000000544D                 call    _mempcpy
.text:0000000000005452                 movzx   ecx, [rsp+48h+var_39]
.text:0000000000005457                 mov     rdi, [rsp+48h+var_48]
.text:000000000000545B                 add     rdi, rax        ; dest
.text:000000000000545E                 test    r15, r15
.text:0000000000005461                 mov     [rax], cl
.text:0000000000005463                 jz      short loc_5468
.text:0000000000005465                 mov     [r15], rdi
.text:0000000000005468
.text:0000000000005468 loc_5468:                               ; CODE XREF: mfile_name_concat+C3↑j
.text:0000000000005468                 mov     rdx, r14        ; n
.text:000000000000546B                 mov     rsi, rbp        ; src
.text:000000000000546E                 call    _mempcpy
.text:0000000000005473                 mov     byte ptr [rax], 0
.text:0000000000005476
.text:0000000000005476 loc_5476:                               ; CODE XREF: mfile_name_concat+A2↑j
.text:0000000000005476                 add     rsp, 18h
.text:000000000000547A                 mov     rax, r13
.text:000000000000547D                 pop     rbx
.text:000000000000547E                 pop     rbp
.text:000000000000547F                 pop     r12
.text:0000000000005481                 pop     r13
.text:0000000000005483                 pop     r14
.text:0000000000005485                 pop     r15
.text:0000000000005487                 retn
.text:0000000000005487 ; ---------------------------------------------------------------------------
.text:0000000000005488                 align 10h
.text:0000000000005490
.text:0000000000005490 loc_5490:                               ; CODE XREF: mfile_name_concat+46↑j
.text:0000000000005490                 mov     [rsp+48h+var_48], 0
.text:0000000000005498                 mov     [rsp+48h+var_39], 0
.text:000000000000549D                 jmp     short loc_542E
.text:000000000000549D ; } // starts at 53A0
.text:000000000000549D mfile_name_concat endp
.text:000000000000549D
.text:000000000000549D ; ---------------------------------------------------------------------------
.text:000000000000549F                 align 20h
.text:00000000000054A0
.text:00000000000054A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054A0
.text:00000000000054A0 ; Attributes: info_from_lumina
.text:00000000000054A0
.text:00000000000054A0 ; size_t __fastcall next_prime(size_t candidate)
.text:00000000000054A0 next_prime      proc near               ; CODE XREF: hash_initialize+7B↓p
.text:00000000000054A0                                         ; hash_rehash+7B↓p
.text:00000000000054A0 ; __unwind {
.text:00000000000054A0                 cmp     rdi, 0Ah
.text:00000000000054A4                 mov     eax, 0Ah
.text:00000000000054A9                 mov     r9, 0AAAAAAAAAAAAAAABh
.text:00000000000054B3                 cmovb   rdi, rax
.text:00000000000054B7                 or      rdi, 1
.text:00000000000054BB                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:00000000000054BF                 jz      short loc_552F
.text:00000000000054C1                 nop     dword ptr [rax+00000000h]
.text:00000000000054C8
.text:00000000000054C8 loc_54C8:                               ; CODE XREF: next_prime+8D↓j
.text:00000000000054C8                 mov     rax, rdi
.text:00000000000054CB                 mov     rcx, rdi
.text:00000000000054CE                 mul     r9
.text:00000000000054D1                 mov     rax, rdx
.text:00000000000054D4                 shr     rax, 1
.text:00000000000054D7                 lea     rax, [rax+rax*2]
.text:00000000000054DB                 sub     rcx, rax
.text:00000000000054DE                 cmp     rdi, 9
.text:00000000000054E2                 mov     rax, rcx
.text:00000000000054E5                 jbe     short loc_5520
.text:00000000000054E7                 test    rcx, rcx
.text:00000000000054EA                 jz      short loc_5525
.text:00000000000054EC                 mov     r8d, 10h
.text:00000000000054F2                 mov     esi, 9
.text:00000000000054F7                 mov     ecx, 3
.text:00000000000054FC                 jmp     short loc_5509
.text:00000000000054FC ; ---------------------------------------------------------------------------
.text:00000000000054FE                 align 20h
.text:0000000000005500
.text:0000000000005500 loc_5500:                               ; CODE XREF: next_prime+7E↓j
.text:0000000000005500                 add     r8, 8
.text:0000000000005504                 test    rdx, rdx
.text:0000000000005507                 jz      short loc_5525
.text:0000000000005509
.text:0000000000005509 loc_5509:                               ; CODE XREF: next_prime+5C↑j
.text:0000000000005509                 add     rcx, 2
.text:000000000000550D                 xor     edx, edx
.text:000000000000550F                 mov     rax, rdi
.text:0000000000005512                 div     rcx
.text:0000000000005515                 add     rsi, r8
.text:0000000000005518                 cmp     rsi, rdi
.text:000000000000551B                 mov     rax, rdx
.text:000000000000551E                 jb      short loc_5500
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: next_prime+45↑j
.text:0000000000005520                 test    rax, rax
.text:0000000000005523                 jnz     short loc_552F
.text:0000000000005525
.text:0000000000005525 loc_5525:                               ; CODE XREF: next_prime+4A↑j
.text:0000000000005525                                         ; next_prime+67↑j
.text:0000000000005525                 add     rdi, 2
.text:0000000000005529                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000552D                 jnz     short loc_54C8
.text:000000000000552F
.text:000000000000552F loc_552F:                               ; CODE XREF: next_prime+1F↑j
.text:000000000000552F                                         ; next_prime+83↑j
.text:000000000000552F                 mov     rax, rdi
.text:0000000000005532                 retn
.text:0000000000005532 ; } // starts at 54A0
.text:0000000000005532 next_prime      endp
.text:0000000000005532
.text:0000000000005532 ; ---------------------------------------------------------------------------
.text:0000000000005533                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540 raw_hasher      proc near               ; DATA XREF: hash_initialize+4↓o
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 mov     rax, rdi
.text:0000000000005543                 xor     edx, edx
.text:0000000000005545                 ror     rax, 3
.text:0000000000005549                 div     rsi
.text:000000000000554C                 mov     rax, rdx
.text:000000000000554F                 retn
.text:000000000000554F ; } // starts at 5540
.text:000000000000554F raw_hasher      endp
.text:000000000000554F
.text:0000000000005550
.text:0000000000005550 ; =============== S U B R O U T I N E =======================================
.text:0000000000005550
.text:0000000000005550
.text:0000000000005550 raw_comparator  proc near               ; DATA XREF: hash_initialize+30↓o
.text:0000000000005550 ; __unwind {
.text:0000000000005550                 cmp     rdi, rsi
.text:0000000000005553                 setz    al
.text:0000000000005556                 retn
.text:0000000000005556 ; } // starts at 5550
.text:0000000000005556 raw_comparator  endp
.text:0000000000005556
.text:0000000000005556 ; ---------------------------------------------------------------------------
.text:0000000000005557                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560 ; Attributes: info_from_lumina
.text:0000000000005560
.text:0000000000005560 ; hash_entry *__fastcall safe_hasher(const Hash_table *table, const void *key)
.text:0000000000005560 safe_hasher     proc near               ; CODE XREF: hash_find_entry+14↓p
.text:0000000000005560                                         ; transfer_entries+65↓p ...
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 push    rbx
.text:0000000000005561                 mov     rbx, rdi
.text:0000000000005564                 mov     rdi, rsi
.text:0000000000005567                 mov     rsi, [rbx+10h]
.text:000000000000556B                 call    qword ptr [rbx+30h]
.text:000000000000556E                 cmp     [rbx+10h], rax
.text:0000000000005572                 jbe     short loc_557D
.text:0000000000005574                 shl     rax, 4
.text:0000000000005578                 add     rax, [rbx]
.text:000000000000557B                 pop     rbx
.text:000000000000557C                 retn
.text:000000000000557D ; ---------------------------------------------------------------------------
.text:000000000000557D
.text:000000000000557D loc_557D:                               ; CODE XREF: safe_hasher+12↑j
.text:000000000000557D                 call    _abort
.text:000000000000557D ; } // starts at 5560
.text:000000000000557D safe_hasher     endp
.text:000000000000557D
.text:000000000000557D ; ---------------------------------------------------------------------------
.text:0000000000005582                 align 10h
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590 ; Attributes: info_from_lumina
.text:0000000000005590
.text:0000000000005590 ; void *__fastcall hash_find_entry(Hash_table *table, const void *entry, hash_entry **bucket_head, _Bool delete)
.text:0000000000005590 hash_find_entry proc near               ; CODE XREF: hash_insert_if_absent+34↓p
.text:0000000000005590                                         ; hash_insert_if_absent+1CF↓p ...
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 push    r14
.text:0000000000005592                 push    r13
.text:0000000000005594                 mov     r14, rdx
.text:0000000000005597                 push    r12
.text:0000000000005599                 push    rbp
.text:000000000000559A                 mov     r12, rdi
.text:000000000000559D                 push    rbx
.text:000000000000559E                 mov     rbp, rsi
.text:00000000000055A1                 mov     r13d, ecx
.text:00000000000055A4                 call    safe_hasher
.text:00000000000055A9                 mov     [r14], rax
.text:00000000000055AC                 mov     rsi, [rax]
.text:00000000000055AF                 test    rsi, rsi
.text:00000000000055B2                 jz      loc_56A0
.text:00000000000055B8                 cmp     rsi, rbp
.text:00000000000055BB                 mov     rbx, rax
.text:00000000000055BE                 jz      loc_5653
.text:00000000000055C4                 mov     rdi, rbp
.text:00000000000055C7                 call    qword ptr [r12+38h]
.text:00000000000055CC                 test    al, al
.text:00000000000055CE                 jnz     loc_5650
.text:00000000000055D4                 mov     rax, [rbx+8]
.text:00000000000055D8                 test    rax, rax
.text:00000000000055DB                 jz      loc_56A0
.text:00000000000055E1                 mov     rsi, [rax]
.text:00000000000055E4                 cmp     rbp, rsi
.text:00000000000055E7                 jnz     short loc_5609
.text:00000000000055E9                 jmp     short loc_561C
.text:00000000000055E9 ; ---------------------------------------------------------------------------
.text:00000000000055EB                 align 10h
.text:00000000000055F0
.text:00000000000055F0 loc_55F0:                               ; CODE XREF: hash_find_entry+83↓j
.text:00000000000055F0                 mov     rbx, [rbx+8]
.text:00000000000055F4                 mov     rax, [rbx+8]
.text:00000000000055F8                 test    rax, rax
.text:00000000000055FB                 jz      loc_56A0
.text:0000000000005601                 mov     rsi, [rax]
.text:0000000000005604                 cmp     rsi, rbp
.text:0000000000005607                 jz      short loc_561C
.text:0000000000005609
.text:0000000000005609 loc_5609:                               ; CODE XREF: hash_find_entry+57↑j
.text:0000000000005609                 mov     rdi, rbp
.text:000000000000560C                 call    qword ptr [r12+38h]
.text:0000000000005611                 test    al, al
.text:0000000000005613                 jz      short loc_55F0
.text:0000000000005615                 mov     rax, [rbx+8]
.text:0000000000005619                 mov     rsi, [rax]
.text:000000000000561C
.text:000000000000561C loc_561C:                               ; CODE XREF: hash_find_entry+59↑j
.text:000000000000561C                                         ; hash_find_entry+77↑j
.text:000000000000561C                 test    r13b, r13b
.text:000000000000561F                 jz      short loc_563E
.text:0000000000005621                 mov     rdx, [rax+8]
.text:0000000000005625                 mov     [rbx+8], rdx
.text:0000000000005629                 mov     qword ptr [rax], 0
.text:0000000000005630                 mov     rdx, [r12+48h]
.text:0000000000005635                 mov     [rax+8], rdx
.text:0000000000005639                 mov     [r12+48h], rax
.text:000000000000563E
.text:000000000000563E loc_563E:                               ; CODE XREF: hash_find_entry+8F↑j
.text:000000000000563E                                         ; hash_find_entry+C6↓j ...
.text:000000000000563E                 pop     rbx
.text:000000000000563F                 mov     rax, rsi
.text:0000000000005642                 pop     rbp
.text:0000000000005643                 pop     r12
.text:0000000000005645                 pop     r13
.text:0000000000005647                 pop     r14
.text:0000000000005649                 retn
.text:0000000000005649 ; ---------------------------------------------------------------------------
.text:000000000000564A                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: hash_find_entry+3E↑j
.text:0000000000005650                 mov     rsi, [rbx]
.text:0000000000005653
.text:0000000000005653 loc_5653:                               ; CODE XREF: hash_find_entry+2E↑j
.text:0000000000005653                 test    r13b, r13b
.text:0000000000005656                 jz      short loc_563E
.text:0000000000005658                 mov     rax, [rbx+8]
.text:000000000000565C                 test    rax, rax
.text:000000000000565F                 jz      short loc_5690
.text:0000000000005661                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000005665                 movups  xmmword ptr [rbx], xmm0
.text:0000000000005668                 mov     qword ptr [rax], 0
.text:000000000000566F                 mov     rdx, [r12+48h]
.text:0000000000005674                 mov     [rax+8], rdx
.text:0000000000005678                 mov     [r12+48h], rax
.text:000000000000567D                 mov     rax, rsi
.text:0000000000005680                 pop     rbx
.text:0000000000005681                 pop     rbp
.text:0000000000005682                 pop     r12
.text:0000000000005684                 pop     r13
.text:0000000000005686                 pop     r14
.text:0000000000005688                 retn
.text:0000000000005688 ; ---------------------------------------------------------------------------
.text:0000000000005689                 align 10h
.text:0000000000005690
.text:0000000000005690 loc_5690:                               ; CODE XREF: hash_find_entry+CF↑j
.text:0000000000005690                 mov     qword ptr [rbx], 0
.text:0000000000005697                 jmp     short loc_563E
.text:0000000000005697 ; ---------------------------------------------------------------------------
.text:0000000000005699                 align 20h
.text:00000000000056A0
.text:00000000000056A0 loc_56A0:                               ; CODE XREF: hash_find_entry+22↑j
.text:00000000000056A0                                         ; hash_find_entry+4B↑j ...
.text:00000000000056A0                 xor     esi, esi
.text:00000000000056A2                 pop     rbx
.text:00000000000056A3                 mov     rax, rsi
.text:00000000000056A6                 pop     rbp
.text:00000000000056A7                 pop     r12
.text:00000000000056A9                 pop     r13
.text:00000000000056AB                 pop     r14
.text:00000000000056AD                 retn
.text:00000000000056AD ; } // starts at 5590
.text:00000000000056AD hash_find_entry endp
.text:00000000000056AD
.text:00000000000056AD ; ---------------------------------------------------------------------------
.text:00000000000056AE                 align 10h
.text:00000000000056B0
.text:00000000000056B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056B0
.text:00000000000056B0 ; Attributes: info_from_lumina
.text:00000000000056B0
.text:00000000000056B0 ; _Bool check_tuning(Hash_table *table)
.text:00000000000056B0 check_tuning    proc near               ; CODE XREF: hash_initialize+60↓p
.text:00000000000056B0                                         ; hash_initialize+11B↓p ...
.text:00000000000056B0 ; __unwind {
.text:00000000000056B0                 mov     rdx, [rdi]
.text:00000000000056B3                 lea     rcx, default_tuning
.text:00000000000056BA                 mov     eax, 1
.text:00000000000056BF                 cmp     rdx, rcx
.text:00000000000056C2                 jz      short locret_5725
.text:00000000000056C4                 movss   xmm0, dword ptr [rdx+8]
.text:00000000000056C9                 ucomiss xmm0, cs:dword_C0B4
.text:00000000000056D0                 jbe     short loc_5720
.text:00000000000056D2                 movss   xmm1, cs:dword_C0B8
.text:00000000000056DA                 ucomiss xmm1, xmm0
.text:00000000000056DD                 jbe     short loc_5720
.text:00000000000056DF                 movss   xmm1, dword ptr [rdx+0Ch]
.text:00000000000056E4                 ucomiss xmm1, cs:dword_C0BC
.text:00000000000056EB                 jbe     short loc_5720
.text:00000000000056ED                 movss   xmm1, dword ptr [rdx]
.text:00000000000056F1                 ucomiss xmm1, cs:dword_C0C0
.text:00000000000056F8                 jb      short loc_5720
.text:00000000000056FA                 addss   xmm1, cs:dword_C0B4
.text:0000000000005702                 movss   xmm2, dword ptr [rdx+4]
.text:0000000000005707                 ucomiss xmm2, xmm1
.text:000000000000570A                 jbe     short loc_5720
.text:000000000000570C                 movss   xmm3, cs:dword_C0C4
.text:0000000000005714                 ucomiss xmm3, xmm2
.text:0000000000005717                 jb      short loc_5720
.text:0000000000005719                 ucomiss xmm0, xmm1
.text:000000000000571C                 ja      short locret_5725
.text:000000000000571E                 xchg    ax, ax
.text:0000000000005720
.text:0000000000005720 loc_5720:                               ; CODE XREF: check_tuning+20↑j
.text:0000000000005720                                         ; check_tuning+2D↑j ...
.text:0000000000005720                 mov     [rdi], rcx
.text:0000000000005723                 xor     eax, eax
.text:0000000000005725
.text:0000000000005725 locret_5725:                            ; CODE XREF: check_tuning+12↑j
.text:0000000000005725                                         ; check_tuning+6C↑j
.text:0000000000005725                 rep retn
.text:0000000000005725 ; } // starts at 56B0
.text:0000000000005725 check_tuning    endp
.text:0000000000005725
.text:0000000000005725 ; ---------------------------------------------------------------------------
.text:0000000000005727                 align 10h
.text:0000000000005730
.text:0000000000005730 ; =============== S U B R O U T I N E =======================================
.text:0000000000005730
.text:0000000000005730 ; Attributes: info_from_lumina
.text:0000000000005730
.text:0000000000005730 ; _Bool __fastcall transfer_entries(Hash_table *dst, Hash_table *src, _Bool safe)
.text:0000000000005730 transfer_entries proc near              ; CODE XREF: hash_rehash+12F↓p
.text:0000000000005730                                         ; hash_rehash+152↓p ...
.text:0000000000005730 ; __unwind {
.text:0000000000005730                 push    r15
.text:0000000000005732                 push    r14
.text:0000000000005734                 push    r13
.text:0000000000005736                 push    r12
.text:0000000000005738                 push    rbp
.text:0000000000005739                 push    rbx
.text:000000000000573A                 sub     rsp, 8
.text:000000000000573E                 mov     r12, [rsi]
.text:0000000000005741                 cmp     r12, [rsi+8]
.text:0000000000005745                 jnb     loc_5828
.text:000000000000574B                 mov     rbp, rdi
.text:000000000000574E                 mov     r13, rsi
.text:0000000000005751                 mov     r14d, edx
.text:0000000000005754                 nop     dword ptr [rax+00h]
.text:0000000000005758
.text:0000000000005758 loc_5758:                               ; CODE XREF: transfer_entries+F2↓j
.text:0000000000005758                 mov     r15, [r12]
.text:000000000000575C                 test    r15, r15
.text:000000000000575F                 jz      loc_581A
.text:0000000000005765                 mov     rbx, [r12+8]
.text:000000000000576A                 test    rbx, rbx
.text:000000000000576D                 jnz     short loc_578C
.text:000000000000576F                 jmp     short loc_57CB
.text:000000000000576F ; ---------------------------------------------------------------------------
.text:0000000000005771                 align 8
.text:0000000000005778
.text:0000000000005778 loc_5778:                               ; CODE XREF: transfer_entries+72↓j
.text:0000000000005778                 mov     rcx, [rax+8]
.text:000000000000577C                 test    rdx, rdx
.text:000000000000577F                 mov     [rbx+8], rcx
.text:0000000000005783                 mov     [rax+8], rbx
.text:0000000000005787                 mov     rbx, rdx
.text:000000000000578A                 jz      short loc_57C7
.text:000000000000578C
.text:000000000000578C loc_578C:                               ; CODE XREF: transfer_entries+3D↑j
.text:000000000000578C                                         ; transfer_entries+95↓j
.text:000000000000578C                 mov     r15, [rbx]
.text:000000000000578F                 mov     rdi, rbp
.text:0000000000005792                 mov     rsi, r15
.text:0000000000005795                 call    safe_hasher
.text:000000000000579A                 cmp     qword ptr [rax], 0
.text:000000000000579E                 mov     rdx, [rbx+8]
.text:00000000000057A2                 jnz     short loc_5778
.text:00000000000057A4                 mov     [rax], r15
.text:00000000000057A7                 add     qword ptr [rbp+18h], 1
.text:00000000000057AC                 test    rdx, rdx
.text:00000000000057AF                 mov     qword ptr [rbx], 0
.text:00000000000057B6                 mov     rax, [rbp+48h]
.text:00000000000057BA                 mov     [rbx+8], rax
.text:00000000000057BE                 mov     [rbp+48h], rbx
.text:00000000000057C2                 mov     rbx, rdx
.text:00000000000057C5                 jnz     short loc_578C
.text:00000000000057C7
.text:00000000000057C7 loc_57C7:                               ; CODE XREF: transfer_entries+5A↑j
.text:00000000000057C7                 mov     r15, [r12]
.text:00000000000057CB
.text:00000000000057CB loc_57CB:                               ; CODE XREF: transfer_entries+3F↑j
.text:00000000000057CB                 test    r14b, r14b
.text:00000000000057CE                 mov     qword ptr [r12+8], 0
.text:00000000000057D7                 jnz     short loc_581A
.text:00000000000057D9                 mov     rsi, r15
.text:00000000000057DC                 mov     rdi, rbp
.text:00000000000057DF                 call    safe_hasher
.text:00000000000057E4                 cmp     qword ptr [rax], 0
.text:00000000000057E8                 mov     rbx, rax
.text:00000000000057EB                 jz      short loc_5840
.text:00000000000057ED                 mov     rax, [rbp+48h]
.text:00000000000057F1                 test    rax, rax
.text:00000000000057F4                 jz      short loc_5850
.text:00000000000057F6                 mov     rdx, [rax+8]
.text:00000000000057FA                 mov     [rbp+48h], rdx
.text:00000000000057FE
.text:00000000000057FE loc_57FE:                               ; CODE XREF: transfer_entries+12D↓j
.text:00000000000057FE                 mov     rdx, [rbx+8]
.text:0000000000005802                 mov     [rax], r15
.text:0000000000005805                 mov     [rax+8], rdx
.text:0000000000005809                 mov     [rbx+8], rax
.text:000000000000580D
.text:000000000000580D loc_580D:                               ; CODE XREF: transfer_entries+118↓j
.text:000000000000580D                 mov     qword ptr [r12], 0
.text:0000000000005815                 sub     qword ptr [r13+18h], 1
.text:000000000000581A
.text:000000000000581A loc_581A:                               ; CODE XREF: transfer_entries+2F↑j
.text:000000000000581A                                         ; transfer_entries+A7↑j
.text:000000000000581A                 add     r12, 10h
.text:000000000000581E                 cmp     [r13+8], r12
.text:0000000000005822                 ja      loc_5758
.text:0000000000005828
.text:0000000000005828 loc_5828:                               ; CODE XREF: transfer_entries+15↑j
.text:0000000000005828                 add     rsp, 8
.text:000000000000582C                 mov     eax, 1
.text:0000000000005831                 pop     rbx
.text:0000000000005832                 pop     rbp
.text:0000000000005833                 pop     r12
.text:0000000000005835                 pop     r13
.text:0000000000005837                 pop     r14
.text:0000000000005839                 pop     r15
.text:000000000000583B                 retn
.text:000000000000583B ; ---------------------------------------------------------------------------
.text:000000000000583C                 align 20h
.text:0000000000005840
.text:0000000000005840 loc_5840:                               ; CODE XREF: transfer_entries+BB↑j
.text:0000000000005840                 mov     [rax], r15
.text:0000000000005843                 add     qword ptr [rbp+18h], 1
.text:0000000000005848                 jmp     short loc_580D
.text:0000000000005848 ; ---------------------------------------------------------------------------
.text:000000000000584A                 align 10h
.text:0000000000005850
.text:0000000000005850 loc_5850:                               ; CODE XREF: transfer_entries+C4↑j
.text:0000000000005850                 mov     edi, 10h        ; size
.text:0000000000005855                 call    _malloc
.text:000000000000585A                 test    rax, rax
.text:000000000000585D                 jnz     short loc_57FE
.text:000000000000585F                 add     rsp, 8
.text:0000000000005863                 xor     eax, eax
.text:0000000000005865                 pop     rbx
.text:0000000000005866                 pop     rbp
.text:0000000000005867                 pop     r12
.text:0000000000005869                 pop     r13
.text:000000000000586B                 pop     r14
.text:000000000000586D                 pop     r15
.text:000000000000586F                 retn
.text:000000000000586F ; } // starts at 5730
.text:000000000000586F transfer_entries endp
.text:000000000000586F
.text:0000000000005870
.text:0000000000005870 ; =============== S U B R O U T I N E =======================================
.text:0000000000005870
.text:0000000000005870
.text:0000000000005870                 public hash_get_n_buckets
.text:0000000000005870 hash_get_n_buckets proc near
.text:0000000000005870 ; __unwind {
.text:0000000000005870                 mov     rax, [rdi+10h]
.text:0000000000005874                 retn
.text:0000000000005874 ; } // starts at 5870
.text:0000000000005874 hash_get_n_buckets endp
.text:0000000000005874
.text:0000000000005874 ; ---------------------------------------------------------------------------
.text:0000000000005875                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880
.text:0000000000005880                 public hash_get_n_buckets_used
.text:0000000000005880 hash_get_n_buckets_used proc near
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 mov     rax, [rdi+18h]
.text:0000000000005884                 retn
.text:0000000000005884 ; } // starts at 5880
.text:0000000000005884 hash_get_n_buckets_used endp
.text:0000000000005884
.text:0000000000005884 ; ---------------------------------------------------------------------------
.text:0000000000005885                 align 10h
.text:0000000000005890
.text:0000000000005890 ; =============== S U B R O U T I N E =======================================
.text:0000000000005890
.text:0000000000005890
.text:0000000000005890                 public hash_get_n_entries
.text:0000000000005890 hash_get_n_entries proc near
.text:0000000000005890 ; __unwind {
.text:0000000000005890                 mov     rax, [rdi+20h]
.text:0000000000005894                 retn
.text:0000000000005894 ; } // starts at 5890
.text:0000000000005894 hash_get_n_entries endp
.text:0000000000005894
.text:0000000000005894 ; ---------------------------------------------------------------------------
.text:0000000000005895                 align 20h
.text:00000000000058A0
.text:00000000000058A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058A0
.text:00000000000058A0 ; Attributes: info_from_lumina
.text:00000000000058A0
.text:00000000000058A0 ; size_t __fastcall hash_get_max_bucket_length(const Hash_table *table)
.text:00000000000058A0                 public hash_get_max_bucket_length
.text:00000000000058A0 hash_get_max_bucket_length proc near
.text:00000000000058A0 ; __unwind {
.text:00000000000058A0                 mov     rsi, [rdi]
.text:00000000000058A3                 mov     rdi, [rdi+8]
.text:00000000000058A7                 xor     eax, eax
.text:00000000000058A9                 cmp     rsi, rdi
.text:00000000000058AC                 jnb     short locret_58E7
.text:00000000000058AE                 xchg    ax, ax
.text:00000000000058B0
.text:00000000000058B0 loc_58B0:                               ; CODE XREF: hash_get_max_bucket_length+43↓j
.text:00000000000058B0                 cmp     qword ptr [rsi], 0
.text:00000000000058B4                 jz      short loc_58DC
.text:00000000000058B6                 mov     rdx, [rsi+8]
.text:00000000000058BA                 mov     ecx, 1
.text:00000000000058BF                 test    rdx, rdx
.text:00000000000058C2                 jz      short loc_58D5
.text:00000000000058C4                 nop     dword ptr [rax+00h]
.text:00000000000058C8
.text:00000000000058C8 loc_58C8:                               ; CODE XREF: hash_get_max_bucket_length+33↓j
.text:00000000000058C8                 mov     rdx, [rdx+8]
.text:00000000000058CC                 add     rcx, 1
.text:00000000000058D0                 test    rdx, rdx
.text:00000000000058D3                 jnz     short loc_58C8
.text:00000000000058D5
.text:00000000000058D5 loc_58D5:                               ; CODE XREF: hash_get_max_bucket_length+22↑j
.text:00000000000058D5                 cmp     rax, rcx
.text:00000000000058D8                 cmovb   rax, rcx
.text:00000000000058DC
.text:00000000000058DC loc_58DC:                               ; CODE XREF: hash_get_max_bucket_length+14↑j
.text:00000000000058DC                 add     rsi, 10h
.text:00000000000058E0                 cmp     rsi, rdi
.text:00000000000058E3                 jb      short loc_58B0
.text:00000000000058E5                 rep retn
.text:00000000000058E7 ; ---------------------------------------------------------------------------
.text:00000000000058E7
.text:00000000000058E7 locret_58E7:                            ; CODE XREF: hash_get_max_bucket_length+C↑j
.text:00000000000058E7                 rep retn
.text:00000000000058E7 ; } // starts at 58A0
.text:00000000000058E7 hash_get_max_bucket_length endp
.text:00000000000058E7
.text:00000000000058E7 ; ---------------------------------------------------------------------------
.text:00000000000058E9                 align 10h
.text:00000000000058F0
.text:00000000000058F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000058F0
.text:00000000000058F0 ; Attributes: info_from_lumina
.text:00000000000058F0
.text:00000000000058F0 ; _Bool __fastcall hash_table_ok(const Hash_table *table)
.text:00000000000058F0                 public hash_table_ok
.text:00000000000058F0 hash_table_ok   proc near
.text:00000000000058F0 ; __unwind {
.text:00000000000058F0                 mov     rcx, [rdi]
.text:00000000000058F3                 mov     r8, [rdi+8]
.text:00000000000058F7                 xor     edx, edx
.text:00000000000058F9                 xor     esi, esi
.text:00000000000058FB                 cmp     rcx, r8
.text:00000000000058FE                 jnb     short loc_5936
.text:0000000000005900
.text:0000000000005900 loc_5900:                               ; CODE XREF: hash_table_ok+44↓j
.text:0000000000005900                 cmp     qword ptr [rcx], 0
.text:0000000000005904                 jz      short loc_592D
.text:0000000000005906                 mov     rax, [rcx+8]
.text:000000000000590A                 add     rsi, 1
.text:000000000000590E                 add     rdx, 1
.text:0000000000005912                 test    rax, rax
.text:0000000000005915                 jz      short loc_592D
.text:0000000000005917                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005920
.text:0000000000005920 loc_5920:                               ; CODE XREF: hash_table_ok+3B↓j
.text:0000000000005920                 mov     rax, [rax+8]
.text:0000000000005924                 add     rdx, 1
.text:0000000000005928                 test    rax, rax
.text:000000000000592B                 jnz     short loc_5920
.text:000000000000592D
.text:000000000000592D loc_592D:                               ; CODE XREF: hash_table_ok+14↑j
.text:000000000000592D                                         ; hash_table_ok+25↑j
.text:000000000000592D                 add     rcx, 10h
.text:0000000000005931                 cmp     rcx, r8
.text:0000000000005934                 jb      short loc_5900
.text:0000000000005936
.text:0000000000005936 loc_5936:                               ; CODE XREF: hash_table_ok+E↑j
.text:0000000000005936                 xor     eax, eax
.text:0000000000005938                 cmp     [rdi+18h], rsi
.text:000000000000593C                 jz      short loc_5940
.text:000000000000593E                 rep retn
.text:0000000000005940 ; ---------------------------------------------------------------------------
.text:0000000000005940
.text:0000000000005940 loc_5940:                               ; CODE XREF: hash_table_ok+4C↑j
.text:0000000000005940                 cmp     [rdi+20h], rdx
.text:0000000000005944                 setz    al
.text:0000000000005947                 retn
.text:0000000000005947 ; } // starts at 58F0
.text:0000000000005947 hash_table_ok   endp
.text:0000000000005947
.text:0000000000005947 ; ---------------------------------------------------------------------------
.text:0000000000005948                 align 10h
.text:0000000000005950
.text:0000000000005950 ; =============== S U B R O U T I N E =======================================
.text:0000000000005950
.text:0000000000005950 ; Attributes: info_from_lumina
.text:0000000000005950
.text:0000000000005950 ; void __fastcall hash_print_statistics(const Hash_table *table, FILE *stream)
.text:0000000000005950                 public hash_print_statistics
.text:0000000000005950 hash_print_statistics proc near
.text:0000000000005950 ; __unwind {
.text:0000000000005950                 push    r13
.text:0000000000005952                 push    r12
.text:0000000000005954                 mov     r12, rsi
.text:0000000000005957                 push    rbp
.text:0000000000005958                 push    rbx
.text:0000000000005959                 xor     ebx, ebx
.text:000000000000595B                 sub     rsp, 8
.text:000000000000595F                 mov     rsi, [rdi]
.text:0000000000005962                 mov     rcx, [rdi+20h]
.text:0000000000005966                 mov     rbp, [rdi+10h]
.text:000000000000596A                 mov     r13, [rdi+18h]
.text:000000000000596E                 mov     rdi, [rdi+8]
.text:0000000000005972                 cmp     rsi, rdi
.text:0000000000005975                 jnb     short loc_59B5
.text:0000000000005977                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005980
.text:0000000000005980 loc_5980:                               ; CODE XREF: hash_print_statistics+63↓j
.text:0000000000005980                 cmp     qword ptr [rsi], 0
.text:0000000000005984                 jz      short loc_59AC
.text:0000000000005986                 mov     rax, [rsi+8]
.text:000000000000598A                 mov     edx, 1
.text:000000000000598F                 test    rax, rax
.text:0000000000005992                 jz      short loc_59A5
.text:0000000000005994                 nop     dword ptr [rax+00h]
.text:0000000000005998
.text:0000000000005998 loc_5998:                               ; CODE XREF: hash_print_statistics+53↓j
.text:0000000000005998                 mov     rax, [rax+8]
.text:000000000000599C                 add     rdx, 1
.text:00000000000059A0                 test    rax, rax
.text:00000000000059A3                 jnz     short loc_5998
.text:00000000000059A5
.text:00000000000059A5 loc_59A5:                               ; CODE XREF: hash_print_statistics+42↑j
.text:00000000000059A5                 cmp     rbx, rdx
.text:00000000000059A8                 cmovb   rbx, rdx
.text:00000000000059AC
.text:00000000000059AC loc_59AC:                               ; CODE XREF: hash_print_statistics+34↑j
.text:00000000000059AC                 add     rsi, 10h
.text:00000000000059B0                 cmp     rsi, rdi
.text:00000000000059B3                 jb      short loc_5980
.text:00000000000059B5
.text:00000000000059B5 loc_59B5:                               ; CODE XREF: hash_print_statistics+25↑j
.text:00000000000059B5                 lea     rdx, aEntriesLu ; "# entries:         %lu\n"
.text:00000000000059BC                 mov     esi, 1
.text:00000000000059C1                 mov     rdi, r12
.text:00000000000059C4                 xor     eax, eax
.text:00000000000059C6                 call    ___fprintf_chk
.text:00000000000059CB                 lea     rdx, aBucketsLu ; "# buckets:         %lu\n"
.text:00000000000059D2                 xor     eax, eax
.text:00000000000059D4                 mov     rcx, rbp
.text:00000000000059D7                 mov     esi, 1
.text:00000000000059DC                 mov     rdi, r12
.text:00000000000059DF                 call    ___fprintf_chk
.text:00000000000059E4                 test    r13, r13
.text:00000000000059E7                 js      short loc_5A50
.text:00000000000059E9                 pxor    xmm0, xmm0
.text:00000000000059ED                 test    rbp, rbp
.text:00000000000059F0                 cvtsi2sd xmm0, r13
.text:00000000000059F5                 mulsd   xmm0, cs:qword_C0D8
.text:00000000000059FD                 js      short loc_5A79
.text:00000000000059FF
.text:00000000000059FF loc_59FF:                               ; CODE XREF: hash_print_statistics+127↓j
.text:00000000000059FF                 pxor    xmm1, xmm1
.text:0000000000005A03                 cvtsi2sd xmm1, rbp
.text:0000000000005A08
.text:0000000000005A08 loc_5A08:                               ; CODE XREF: hash_print_statistics+142↓j
.text:0000000000005A08                 divsd   xmm0, xmm1
.text:0000000000005A0C                 lea     rdx, aBucketsUsedLu2 ; "# buckets used:    %lu (%.2f%%)\n"
.text:0000000000005A13                 mov     rcx, r13
.text:0000000000005A16                 mov     rdi, r12
.text:0000000000005A19                 mov     esi, 1
.text:0000000000005A1E                 mov     eax, 1
.text:0000000000005A23                 call    ___fprintf_chk
.text:0000000000005A28                 add     rsp, 8
.text:0000000000005A2C                 mov     rcx, rbx
.text:0000000000005A2F                 mov     rdi, r12
.text:0000000000005A32                 pop     rbx
.text:0000000000005A33                 pop     rbp
.text:0000000000005A34                 pop     r12
.text:0000000000005A36                 pop     r13
.text:0000000000005A38                 lea     rdx, aMaxBucketLengt ; "max bucket length: %lu\n"
.text:0000000000005A3F                 mov     esi, 1
.text:0000000000005A44                 xor     eax, eax
.text:0000000000005A46                 jmp     ___fprintf_chk
.text:0000000000005A46 ; ---------------------------------------------------------------------------
.text:0000000000005A4B                 align 10h
.text:0000000000005A50
.text:0000000000005A50 loc_5A50:                               ; CODE XREF: hash_print_statistics+97↑j
.text:0000000000005A50                 mov     rax, r13
.text:0000000000005A53                 mov     rdx, r13
.text:0000000000005A56                 pxor    xmm0, xmm0
.text:0000000000005A5A                 shr     rax, 1
.text:0000000000005A5D                 and     edx, 1
.text:0000000000005A60                 or      rax, rdx
.text:0000000000005A63                 test    rbp, rbp
.text:0000000000005A66                 cvtsi2sd xmm0, rax
.text:0000000000005A6B                 addsd   xmm0, xmm0
.text:0000000000005A6F                 mulsd   xmm0, cs:qword_C0D8
.text:0000000000005A77                 jns     short loc_59FF
.text:0000000000005A79
.text:0000000000005A79 loc_5A79:                               ; CODE XREF: hash_print_statistics+AD↑j
.text:0000000000005A79                 mov     rax, rbp
.text:0000000000005A7C                 pxor    xmm1, xmm1
.text:0000000000005A80                 shr     rax, 1
.text:0000000000005A83                 and     ebp, 1
.text:0000000000005A86                 or      rax, rbp
.text:0000000000005A89                 cvtsi2sd xmm1, rax
.text:0000000000005A8E                 addsd   xmm1, xmm1
.text:0000000000005A92                 jmp     loc_5A08
.text:0000000000005A92 ; } // starts at 5950
.text:0000000000005A92 hash_print_statistics endp
.text:0000000000005A92
.text:0000000000005A92 ; ---------------------------------------------------------------------------
.text:0000000000005A97                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; void *__fastcall hash_lookup(const Hash_table *table, const void *entry)
.text:0000000000005AA0                 public hash_lookup
.text:0000000000005AA0 hash_lookup     proc near               ; CODE XREF: seen_file+31↑p
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 push    r12
.text:0000000000005AA2                 push    rbp
.text:0000000000005AA3                 mov     r12, rdi
.text:0000000000005AA6                 push    rbx
.text:0000000000005AA7                 mov     rbp, rsi
.text:0000000000005AAA                 call    safe_hasher
.text:0000000000005AAF                 mov     rsi, [rax]
.text:0000000000005AB2                 test    rsi, rsi
.text:0000000000005AB5                 jz      short loc_5ADD
.text:0000000000005AB7                 mov     rbx, rax
.text:0000000000005ABA                 jmp     short loc_5AC3
.text:0000000000005ABA ; ---------------------------------------------------------------------------
.text:0000000000005ABC                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 loc_5AC0:                               ; CODE XREF: hash_lookup+3B↓j
.text:0000000000005AC0                 mov     rsi, [rbx]
.text:0000000000005AC3
.text:0000000000005AC3 loc_5AC3:                               ; CODE XREF: hash_lookup+1A↑j
.text:0000000000005AC3                 cmp     rsi, rbp
.text:0000000000005AC6                 jz      short loc_5ADF
.text:0000000000005AC8                 mov     rdi, rbp
.text:0000000000005ACB                 call    qword ptr [r12+38h]
.text:0000000000005AD0                 test    al, al
.text:0000000000005AD2                 jnz     short loc_5AF0
.text:0000000000005AD4                 mov     rbx, [rbx+8]
.text:0000000000005AD8                 test    rbx, rbx
.text:0000000000005ADB                 jnz     short loc_5AC0
.text:0000000000005ADD
.text:0000000000005ADD loc_5ADD:                               ; CODE XREF: hash_lookup+15↑j
.text:0000000000005ADD                 xor     esi, esi
.text:0000000000005ADF
.text:0000000000005ADF loc_5ADF:                               ; CODE XREF: hash_lookup+26↑j
.text:0000000000005ADF                 pop     rbx
.text:0000000000005AE0                 mov     rax, rsi
.text:0000000000005AE3                 pop     rbp
.text:0000000000005AE4                 pop     r12
.text:0000000000005AE6                 retn
.text:0000000000005AE6 ; ---------------------------------------------------------------------------
.text:0000000000005AE7                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: hash_lookup+32↑j
.text:0000000000005AF0                 mov     rsi, [rbx]
.text:0000000000005AF3                 pop     rbx
.text:0000000000005AF4                 pop     rbp
.text:0000000000005AF5                 mov     rax, rsi
.text:0000000000005AF8                 pop     r12
.text:0000000000005AFA                 retn
.text:0000000000005AFA ; } // starts at 5AA0
.text:0000000000005AFA hash_lookup     endp
.text:0000000000005AFA
.text:0000000000005AFA ; ---------------------------------------------------------------------------
.text:0000000000005AFB                 align 20h
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00 ; Attributes: info_from_lumina
.text:0000000000005B00
.text:0000000000005B00 ; void *__fastcall hash_get_first(const Hash_table *table)
.text:0000000000005B00                 public hash_get_first
.text:0000000000005B00 hash_get_first  proc near
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 cmp     qword ptr [rdi+20h], 0
.text:0000000000005B05                 jz      short loc_5B33
.text:0000000000005B07                 mov     rdx, [rdi]
.text:0000000000005B0A                 mov     rcx, [rdi+8]
.text:0000000000005B0E                 cmp     rdx, rcx
.text:0000000000005B11                 jnb     short loc_5B38
.text:0000000000005B13                 mov     rax, [rdx]
.text:0000000000005B16                 test    rax, rax
.text:0000000000005B19                 jnz     short locret_5B36
.text:0000000000005B1B                 nop     dword ptr [rax+rax+00h]
.text:0000000000005B20
.text:0000000000005B20 loc_5B20:                               ; CODE XREF: hash_get_first+2F↓j
.text:0000000000005B20                 add     rdx, 10h
.text:0000000000005B24                 cmp     rdx, rcx
.text:0000000000005B27                 jnb     short loc_5B38
.text:0000000000005B29                 mov     rax, [rdx]
.text:0000000000005B2C                 test    rax, rax
.text:0000000000005B2F                 jz      short loc_5B20
.text:0000000000005B31                 rep retn
.text:0000000000005B33 ; ---------------------------------------------------------------------------
.text:0000000000005B33
.text:0000000000005B33 loc_5B33:                               ; CODE XREF: hash_get_first+5↑j
.text:0000000000005B33                 xor     eax, eax
.text:0000000000005B35                 retn
.text:0000000000005B36 ; ---------------------------------------------------------------------------
.text:0000000000005B36
.text:0000000000005B36 locret_5B36:                            ; CODE XREF: hash_get_first+19↑j
.text:0000000000005B36                 rep retn
.text:0000000000005B38 ; ---------------------------------------------------------------------------
.text:0000000000005B38
.text:0000000000005B38 loc_5B38:                               ; CODE XREF: hash_get_first+11↑j
.text:0000000000005B38                                         ; hash_get_first+27↑j
.text:0000000000005B38                 sub     rsp, 8
.text:0000000000005B3C                 call    _abort
.text:0000000000005B3C ; } // starts at 5B00
.text:0000000000005B3C hash_get_first  endp
.text:0000000000005B3C
.text:0000000000005B3C ; ---------------------------------------------------------------------------
.text:0000000000005B41                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50 ; Attributes: info_from_lumina
.text:0000000000005B50
.text:0000000000005B50 ; void *__fastcall hash_get_next(const Hash_table *table, const void *entry)
.text:0000000000005B50                 public hash_get_next
.text:0000000000005B50 hash_get_next   proc near
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 push    rbp
.text:0000000000005B51                 push    rbx
.text:0000000000005B52                 mov     rbp, rdi
.text:0000000000005B55                 mov     rbx, rsi
.text:0000000000005B58                 sub     rsp, 8
.text:0000000000005B5C                 call    safe_hasher
.text:0000000000005B61                 mov     rdx, rax
.text:0000000000005B64                 mov     rcx, rax
.text:0000000000005B67                 mov     rax, [rdx]
.text:0000000000005B6A                 mov     rdx, [rdx+8]
.text:0000000000005B6E                 cmp     rax, rbx
.text:0000000000005B71                 jz      short loc_5B89
.text:0000000000005B73                 nop     dword ptr [rax+rax+00h]
.text:0000000000005B78
.text:0000000000005B78 loc_5B78:                               ; CODE XREF: hash_get_next+37↓j
.text:0000000000005B78                 test    rdx, rdx
.text:0000000000005B7B                 jz      short loc_5B8E
.text:0000000000005B7D                 mov     rax, [rdx]
.text:0000000000005B80                 mov     rdx, [rdx+8]
.text:0000000000005B84                 cmp     rax, rbx
.text:0000000000005B87                 jnz     short loc_5B78
.text:0000000000005B89
.text:0000000000005B89 loc_5B89:                               ; CODE XREF: hash_get_next+21↑j
.text:0000000000005B89                 test    rdx, rdx
.text:0000000000005B8C                 jnz     short loc_5BB8
.text:0000000000005B8E
.text:0000000000005B8E loc_5B8E:                               ; CODE XREF: hash_get_next+2B↑j
.text:0000000000005B8E                 mov     rdx, [rbp+8]
.text:0000000000005B92                 jmp     short loc_5BA0
.text:0000000000005B92 ; ---------------------------------------------------------------------------
.text:0000000000005B94                 align 8
.text:0000000000005B98
.text:0000000000005B98 loc_5B98:                               ; CODE XREF: hash_get_next+57↓j
.text:0000000000005B98                 mov     rax, [rcx]
.text:0000000000005B9B                 test    rax, rax
.text:0000000000005B9E                 jnz     short loc_5BAB
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: hash_get_next+42↑j
.text:0000000000005BA0                 add     rcx, 10h
.text:0000000000005BA4                 cmp     rdx, rcx
.text:0000000000005BA7                 ja      short loc_5B98
.text:0000000000005BA9                 xor     eax, eax
.text:0000000000005BAB
.text:0000000000005BAB loc_5BAB:                               ; CODE XREF: hash_get_next+4E↑j
.text:0000000000005BAB                 add     rsp, 8
.text:0000000000005BAF                 pop     rbx
.text:0000000000005BB0                 pop     rbp
.text:0000000000005BB1                 retn
.text:0000000000005BB1 ; ---------------------------------------------------------------------------
.text:0000000000005BB2                 align 8
.text:0000000000005BB8
.text:0000000000005BB8 loc_5BB8:                               ; CODE XREF: hash_get_next+3C↑j
.text:0000000000005BB8                 mov     rax, [rdx]
.text:0000000000005BBB                 add     rsp, 8
.text:0000000000005BBF                 pop     rbx
.text:0000000000005BC0                 pop     rbp
.text:0000000000005BC1                 retn
.text:0000000000005BC1 ; } // starts at 5B50
.text:0000000000005BC1 hash_get_next   endp
.text:0000000000005BC1
.text:0000000000005BC1 ; ---------------------------------------------------------------------------
.text:0000000000005BC2                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0 ; Attributes: info_from_lumina
.text:0000000000005BD0
.text:0000000000005BD0 ; size_t __fastcall hash_get_entries(const Hash_table *table, void **buffer, size_t buffer_size)
.text:0000000000005BD0                 public hash_get_entries
.text:0000000000005BD0 hash_get_entries proc near
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 mov     r9, [rdi]
.text:0000000000005BD3                 cmp     [rdi+8], r9
.text:0000000000005BD7                 jbe     short loc_5C32
.text:0000000000005BD9                 xor     r8d, r8d
.text:0000000000005BDC
.text:0000000000005BDC loc_5BDC:                               ; CODE XREF: hash_get_entries+55↓j
.text:0000000000005BDC                 mov     rcx, [r9]
.text:0000000000005BDF                 test    rcx, rcx
.text:0000000000005BE2                 jz      short loc_5C1D
.text:0000000000005BE4                 cmp     rdx, r8
.text:0000000000005BE7                 jbe     short loc_5C27
.text:0000000000005BE9                 mov     [rsi+r8*8], rcx
.text:0000000000005BED                 mov     rcx, [r9+8]
.text:0000000000005BF1                 lea     rax, [r8+1]
.text:0000000000005BF5                 test    rcx, rcx
.text:0000000000005BF8                 jz      short loc_5C1A
.text:0000000000005BFA                 nop     word ptr [rax+rax+00h]
.text:0000000000005C00
.text:0000000000005C00 loc_5C00:                               ; CODE XREF: hash_get_entries+48↓j
.text:0000000000005C00                 cmp     rdx, rax
.text:0000000000005C03                 jz      short locret_5C30
.text:0000000000005C05                 mov     r8, [rcx]
.text:0000000000005C08                 add     rax, 1
.text:0000000000005C0C                 mov     [rsi+rax*8-8], r8
.text:0000000000005C11                 mov     rcx, [rcx+8]
.text:0000000000005C15                 test    rcx, rcx
.text:0000000000005C18                 jnz     short loc_5C00
.text:0000000000005C1A
.text:0000000000005C1A loc_5C1A:                               ; CODE XREF: hash_get_entries+28↑j
.text:0000000000005C1A                 mov     r8, rax
.text:0000000000005C1D
.text:0000000000005C1D loc_5C1D:                               ; CODE XREF: hash_get_entries+12↑j
.text:0000000000005C1D                 add     r9, 10h
.text:0000000000005C21                 cmp     [rdi+8], r9
.text:0000000000005C25                 ja      short loc_5BDC
.text:0000000000005C27
.text:0000000000005C27 loc_5C27:                               ; CODE XREF: hash_get_entries+17↑j
.text:0000000000005C27                 mov     rax, r8
.text:0000000000005C2A                 retn
.text:0000000000005C2A ; ---------------------------------------------------------------------------
.text:0000000000005C2B                 align 10h
.text:0000000000005C30
.text:0000000000005C30 locret_5C30:                            ; CODE XREF: hash_get_entries+33↑j
.text:0000000000005C30                 rep retn
.text:0000000000005C32 ; ---------------------------------------------------------------------------
.text:0000000000005C32
.text:0000000000005C32 loc_5C32:                               ; CODE XREF: hash_get_entries+7↑j
.text:0000000000005C32                 xor     eax, eax
.text:0000000000005C34                 retn
.text:0000000000005C34 ; } // starts at 5BD0
.text:0000000000005C34 hash_get_entries endp
.text:0000000000005C34
.text:0000000000005C34 ; ---------------------------------------------------------------------------
.text:0000000000005C35                 align 20h
.text:0000000000005C40
.text:0000000000005C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C40
.text:0000000000005C40 ; Attributes: info_from_lumina
.text:0000000000005C40
.text:0000000000005C40 ; size_t __fastcall hash_do_for_each(const Hash_table *table, Hash_processor processor, void *processor_data)
.text:0000000000005C40                 public hash_do_for_each
.text:0000000000005C40 hash_do_for_each proc near
.text:0000000000005C40 ; __unwind {
.text:0000000000005C40                 push    r15
.text:0000000000005C42                 push    r14
.text:0000000000005C44                 push    r13
.text:0000000000005C46                 push    r12
.text:0000000000005C48                 push    rbp
.text:0000000000005C49                 push    rbx
.text:0000000000005C4A                 sub     rsp, 8
.text:0000000000005C4E                 mov     r14, [rdi]
.text:0000000000005C51                 cmp     [rdi+8], r14
.text:0000000000005C55                 jbe     short loc_5CA6
.text:0000000000005C57                 mov     r13, rdx
.text:0000000000005C5A                 mov     r12, rsi
.text:0000000000005C5D                 mov     r15, rdi
.text:0000000000005C60                 xor     ebp, ebp
.text:0000000000005C62
.text:0000000000005C62 loc_5C62:                               ; CODE XREF: hash_do_for_each+52↓j
.text:0000000000005C62                 mov     rdi, [r14]
.text:0000000000005C65                 test    rdi, rdi
.text:0000000000005C68                 jz      short loc_5C8A
.text:0000000000005C6A                 mov     rbx, r14
.text:0000000000005C6D                 jmp     short loc_5C73
.text:0000000000005C6D ; ---------------------------------------------------------------------------
.text:0000000000005C6F                 align 10h
.text:0000000000005C70
.text:0000000000005C70 loc_5C70:                               ; CODE XREF: hash_do_for_each+48↓j
.text:0000000000005C70                 mov     rdi, [rbx]
.text:0000000000005C73
.text:0000000000005C73 loc_5C73:                               ; CODE XREF: hash_do_for_each+2D↑j
.text:0000000000005C73                 mov     rsi, r13
.text:0000000000005C76                 call    r12
.text:0000000000005C79                 test    al, al
.text:0000000000005C7B                 jz      short loc_5C94
.text:0000000000005C7D                 mov     rbx, [rbx+8]
.text:0000000000005C81                 add     rbp, 1
.text:0000000000005C85                 test    rbx, rbx
.text:0000000000005C88                 jnz     short loc_5C70
.text:0000000000005C8A
.text:0000000000005C8A loc_5C8A:                               ; CODE XREF: hash_do_for_each+28↑j
.text:0000000000005C8A                 add     r14, 10h
.text:0000000000005C8E                 cmp     [r15+8], r14
.text:0000000000005C92                 ja      short loc_5C62
.text:0000000000005C94
.text:0000000000005C94 loc_5C94:                               ; CODE XREF: hash_do_for_each+3B↑j
.text:0000000000005C94                                         ; hash_do_for_each+68↓j
.text:0000000000005C94                 add     rsp, 8
.text:0000000000005C98                 mov     rax, rbp
.text:0000000000005C9B                 pop     rbx
.text:0000000000005C9C                 pop     rbp
.text:0000000000005C9D                 pop     r12
.text:0000000000005C9F                 pop     r13
.text:0000000000005CA1                 pop     r14
.text:0000000000005CA3                 pop     r15
.text:0000000000005CA5                 retn
.text:0000000000005CA6 ; ---------------------------------------------------------------------------
.text:0000000000005CA6
.text:0000000000005CA6 loc_5CA6:                               ; CODE XREF: hash_do_for_each+15↑j
.text:0000000000005CA6                 xor     ebp, ebp
.text:0000000000005CA8                 jmp     short loc_5C94
.text:0000000000005CA8 ; } // starts at 5C40
.text:0000000000005CA8 hash_do_for_each endp
.text:0000000000005CA8
.text:0000000000005CA8 ; ---------------------------------------------------------------------------
.text:0000000000005CAA                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CB0
.text:0000000000005CB0 ; Attributes: info_from_lumina
.text:0000000000005CB0
.text:0000000000005CB0 ; size_t __fastcall hash_string(const char *string, size_t n_buckets)
.text:0000000000005CB0                 public hash_string
.text:0000000000005CB0 hash_string     proc near
.text:0000000000005CB0 ; __unwind {
.text:0000000000005CB0                 movzx   ecx, byte ptr [rdi]
.text:0000000000005CB3                 xor     edx, edx
.text:0000000000005CB5                 test    cl, cl
.text:0000000000005CB7                 jz      short loc_5CDD
.text:0000000000005CB9                 nop     dword ptr [rax+00000000h]
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: hash_string+2B↓j
.text:0000000000005CC0                 mov     rax, rdx
.text:0000000000005CC3                 add     rdi, 1
.text:0000000000005CC7                 shl     rax, 5
.text:0000000000005CCB                 sub     rax, rdx
.text:0000000000005CCE                 xor     edx, edx
.text:0000000000005CD0                 add     rax, rcx
.text:0000000000005CD3                 movzx   ecx, byte ptr [rdi]
.text:0000000000005CD6                 div     rsi
.text:0000000000005CD9                 test    cl, cl
.text:0000000000005CDB                 jnz     short loc_5CC0
.text:0000000000005CDD
.text:0000000000005CDD loc_5CDD:                               ; CODE XREF: hash_string+7↑j
.text:0000000000005CDD                 mov     rax, rdx
.text:0000000000005CE0                 retn
.text:0000000000005CE0 ; } // starts at 5CB0
.text:0000000000005CE0 hash_string     endp
.text:0000000000005CE0
.text:0000000000005CE0 ; ---------------------------------------------------------------------------
.text:0000000000005CE1                 align 10h
.text:0000000000005CF0
.text:0000000000005CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CF0
.text:0000000000005CF0 ; Attributes: info_from_lumina
.text:0000000000005CF0
.text:0000000000005CF0 ; void __fastcall hash_reset_tuning(Hash_tuning *tuning)
.text:0000000000005CF0                 public hash_reset_tuning
.text:0000000000005CF0 hash_reset_tuning proc near
.text:0000000000005CF0 ; __unwind {
.text:0000000000005CF0                 mov     rax, 3F80000000000000h
.text:0000000000005CFA                 mov     byte ptr [rdi+10h], 0
.text:0000000000005CFE                 mov     [rdi], rax
.text:0000000000005D01                 mov     rax, 3FB4FDF43F4CCCCDh
.text:0000000000005D0B                 mov     [rdi+8], rax
.text:0000000000005D0F                 retn
.text:0000000000005D0F ; } // starts at 5CF0
.text:0000000000005D0F hash_reset_tuning endp
.text:0000000000005D0F
.text:0000000000005D10
.text:0000000000005D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D10
.text:0000000000005D10 ; Attributes: info_from_lumina
.text:0000000000005D10
.text:0000000000005D10 ; Hash_table *__fastcall hash_initialize(size_t candidate, const Hash_tuning *tuning, Hash_hasher hasher, Hash_comparator comparator, Hash_data_freer data_freer)
.text:0000000000005D10                 public hash_initialize
.text:0000000000005D10 hash_initialize proc near               ; CODE XREF: main+43A↑p
.text:0000000000005D10                                         ; canonicalize_filename_mode+502↑p
.text:0000000000005D10 ; __unwind {
.text:0000000000005D10                 push    r15
.text:0000000000005D12                 push    r14
.text:0000000000005D14                 lea     rax, raw_hasher
.text:0000000000005D1B                 push    r13
.text:0000000000005D1D                 push    r12
.text:0000000000005D1F                 mov     r12, rdx
.text:0000000000005D22                 push    rbp
.text:0000000000005D23                 push    rbx
.text:0000000000005D24                 mov     r13, rcx
.text:0000000000005D27                 mov     rbp, rdi
.text:0000000000005D2A                 mov     edi, 50h ; 'P'  ; size
.text:0000000000005D2F                 mov     r15, rsi
.text:0000000000005D32                 sub     rsp, 8
.text:0000000000005D36                 test    rdx, rdx
.text:0000000000005D39                 mov     r14, r8
.text:0000000000005D3C                 cmovz   r12, rax
.text:0000000000005D40                 lea     rax, raw_comparator
.text:0000000000005D47                 test    rcx, rcx
.text:0000000000005D4A                 cmovz   r13, rax
.text:0000000000005D4E                 call    _malloc
.text:0000000000005D53                 test    rax, rax
.text:0000000000005D56                 mov     rbx, rax
.text:0000000000005D59                 jz      loc_5E0A
.text:0000000000005D5F                 test    r15, r15
.text:0000000000005D62                 lea     rdi, [rax+28h]
.text:0000000000005D66                 jz      loc_5E20
.text:0000000000005D6C                 mov     [rax+28h], r15
.text:0000000000005D70                 call    check_tuning
.text:0000000000005D75                 test    al, al
.text:0000000000005D77                 jz      loc_5E00
.text:0000000000005D7D                 cmp     byte ptr [r15+10h], 0
.text:0000000000005D82                 jz      loc_5E80
.text:0000000000005D88
.text:0000000000005D88 loc_5D88:                               ; CODE XREF: hash_initialize+16A↓j
.text:0000000000005D88                                         ; hash_initialize+1A5↓j
.text:0000000000005D88                 mov     rdi, rbp
.text:0000000000005D8B                 call    next_prime
.text:0000000000005D90                 mov     edx, 8
.text:0000000000005D95                 mov     rbp, rax
.text:0000000000005D98                 xor     ecx, ecx
.text:0000000000005D9A                 mov     rax, rdx
.text:0000000000005D9D                 mul     rbp
.text:0000000000005DA0                 jo      loc_5EBA
.text:0000000000005DA6
.text:0000000000005DA6 loc_5DA6:                               ; CODE XREF: hash_initialize+1AF↓j
.text:0000000000005DA6                 test    rax, rax
.text:0000000000005DA9                 js      short loc_5E00
.text:0000000000005DAB                 test    rcx, rcx
.text:0000000000005DAE                 jnz     short loc_5E00
.text:0000000000005DB0                 test    rbp, rbp
.text:0000000000005DB3                 mov     [rbx+10h], rbp
.text:0000000000005DB7                 jz      short loc_5E00
.text:0000000000005DB9                 mov     esi, 10h        ; size
.text:0000000000005DBE                 mov     rdi, rbp        ; nmemb
.text:0000000000005DC1                 call    _calloc
.text:0000000000005DC6                 test    rax, rax
.text:0000000000005DC9                 mov     [rbx], rax
.text:0000000000005DCC                 jz      short loc_5E00
.text:0000000000005DCE                 shl     rbp, 4
.text:0000000000005DD2                 mov     qword ptr [rbx+18h], 0
.text:0000000000005DDA                 mov     qword ptr [rbx+20h], 0
.text:0000000000005DE2                 add     rbp, rax
.text:0000000000005DE5                 mov     [rbx+30h], r12
.text:0000000000005DE9                 mov     [rbx+38h], r13
.text:0000000000005DED                 mov     [rbx+8], rbp
.text:0000000000005DF1                 mov     [rbx+40h], r14
.text:0000000000005DF5                 mov     qword ptr [rbx+48h], 0
.text:0000000000005DFD                 jmp     short loc_5E0A
.text:0000000000005DFD ; ---------------------------------------------------------------------------
.text:0000000000005DFF                 align 20h
.text:0000000000005E00
.text:0000000000005E00 loc_5E00:                               ; CODE XREF: hash_initialize+67↑j
.text:0000000000005E00                                         ; hash_initialize+99↑j ...
.text:0000000000005E00                 mov     rdi, rbx        ; ptr
.text:0000000000005E03                 xor     ebx, ebx
.text:0000000000005E05                 call    _free
.text:0000000000005E0A
.text:0000000000005E0A loc_5E0A:                               ; CODE XREF: hash_initialize+49↑j
.text:0000000000005E0A                                         ; hash_initialize+ED↑j
.text:0000000000005E0A                 add     rsp, 8
.text:0000000000005E0E                 mov     rax, rbx
.text:0000000000005E11                 pop     rbx
.text:0000000000005E12                 pop     rbp
.text:0000000000005E13                 pop     r12
.text:0000000000005E15                 pop     r13
.text:0000000000005E17                 pop     r14
.text:0000000000005E19                 pop     r15
.text:0000000000005E1B                 retn
.text:0000000000005E1B ; ---------------------------------------------------------------------------
.text:0000000000005E1C                 align 20h
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: hash_initialize+56↑j
.text:0000000000005E20                 lea     rax, default_tuning
.text:0000000000005E27                 mov     [rbx+28h], rax
.text:0000000000005E2B                 call    check_tuning
.text:0000000000005E30                 test    al, al
.text:0000000000005E32                 movss   xmm1, cs:dword_C0C8
.text:0000000000005E3A                 jz      short loc_5E00
.text:0000000000005E3C                 test    rbp, rbp
.text:0000000000005E3F                 js      short loc_5E8B
.text:0000000000005E41
.text:0000000000005E41 loc_5E41:                               ; CODE XREF: hash_initialize+179↓j
.text:0000000000005E41                 pxor    xmm0, xmm0
.text:0000000000005E45                 cvtsi2ss xmm0, rbp
.text:0000000000005E4A
.text:0000000000005E4A loc_5E4A:                               ; CODE XREF: hash_initialize+194↓j
.text:0000000000005E4A                 divss   xmm0, xmm1
.text:0000000000005E4E                 ucomiss xmm0, cs:dword_C0CC
.text:0000000000005E55                 jnb     short loc_5E00
.text:0000000000005E57                 ucomiss xmm0, cs:dword_C0D0
.text:0000000000005E5E                 jb      short loc_5EB0
.text:0000000000005E60                 subss   xmm0, cs:dword_C0D0
.text:0000000000005E68                 mov     rax, 8000000000000000h
.text:0000000000005E72                 cvttss2si rbp, xmm0
.text:0000000000005E77                 xor     rbp, rax
.text:0000000000005E7A                 jmp     loc_5D88
.text:0000000000005E7A ; ---------------------------------------------------------------------------
.text:0000000000005E7F                 align 20h
.text:0000000000005E80
.text:0000000000005E80 loc_5E80:                               ; CODE XREF: hash_initialize+72↑j
.text:0000000000005E80                 test    rbp, rbp
.text:0000000000005E83                 movss   xmm1, dword ptr [r15+8]
.text:0000000000005E89                 jns     short loc_5E41
.text:0000000000005E8B
.text:0000000000005E8B loc_5E8B:                               ; CODE XREF: hash_initialize+12F↑j
.text:0000000000005E8B                 mov     rax, rbp
.text:0000000000005E8E                 pxor    xmm0, xmm0
.text:0000000000005E92                 shr     rax, 1
.text:0000000000005E95                 and     ebp, 1
.text:0000000000005E98                 or      rax, rbp
.text:0000000000005E9B                 cvtsi2ss xmm0, rax
.text:0000000000005EA0                 addss   xmm0, xmm0
.text:0000000000005EA4                 jmp     short loc_5E4A
.text:0000000000005EA4 ; ---------------------------------------------------------------------------
.text:0000000000005EA6                 align 10h
.text:0000000000005EB0
.text:0000000000005EB0 loc_5EB0:                               ; CODE XREF: hash_initialize+14E↑j
.text:0000000000005EB0                 cvttss2si rbp, xmm0
.text:0000000000005EB5                 jmp     loc_5D88
.text:0000000000005EBA ; ---------------------------------------------------------------------------
.text:0000000000005EBA
.text:0000000000005EBA loc_5EBA:                               ; CODE XREF: hash_initialize+90↑j
.text:0000000000005EBA                 mov     ecx, 1
.text:0000000000005EBF                 jmp     loc_5DA6
.text:0000000000005EBF ; } // starts at 5D10
.text:0000000000005EBF hash_initialize endp
.text:0000000000005EBF
.text:0000000000005EBF ; ---------------------------------------------------------------------------
.text:0000000000005EC4                 align 10h
.text:0000000000005ED0
.text:0000000000005ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005ED0
.text:0000000000005ED0 ; Attributes: info_from_lumina
.text:0000000000005ED0
.text:0000000000005ED0 ; void __fastcall hash_clear(Hash_table *table)
.text:0000000000005ED0                 public hash_clear
.text:0000000000005ED0 hash_clear      proc near
.text:0000000000005ED0 ; __unwind {
.text:0000000000005ED0                 push    r12
.text:0000000000005ED2                 push    rbp
.text:0000000000005ED3                 mov     rbp, rdi
.text:0000000000005ED6                 push    rbx
.text:0000000000005ED7                 mov     r12, [rdi]
.text:0000000000005EDA                 cmp     r12, [rdi+8]
.text:0000000000005EDE                 jnb     short loc_5F4B
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: hash_clear+79↓j
.text:0000000000005EE0                 cmp     qword ptr [r12], 0
.text:0000000000005EE5                 jz      short loc_5F41
.text:0000000000005EE7                 mov     rbx, [r12+8]
.text:0000000000005EEC                 mov     rax, [rbp+40h]
.text:0000000000005EF0                 test    rbx, rbx
.text:0000000000005EF3                 jz      short loc_5F25
.text:0000000000005EF5                 nop     dword ptr [rax]
.text:0000000000005EF8
.text:0000000000005EF8 loc_5EF8:                               ; CODE XREF: hash_clear+53↓j
.text:0000000000005EF8                 test    rax, rax
.text:0000000000005EFB                 jz      short loc_5F06
.text:0000000000005EFD                 mov     rdi, [rbx]
.text:0000000000005F00                 call    rax
.text:0000000000005F02                 mov     rax, [rbp+40h]
.text:0000000000005F06
.text:0000000000005F06 loc_5F06:                               ; CODE XREF: hash_clear+2B↑j
.text:0000000000005F06                 mov     rdx, [rbx+8]
.text:0000000000005F0A                 mov     rcx, [rbp+48h]
.text:0000000000005F0E                 mov     qword ptr [rbx], 0
.text:0000000000005F15                 test    rdx, rdx
.text:0000000000005F18                 mov     [rbx+8], rcx
.text:0000000000005F1C                 mov     [rbp+48h], rbx
.text:0000000000005F20                 mov     rbx, rdx
.text:0000000000005F23                 jnz     short loc_5EF8
.text:0000000000005F25
.text:0000000000005F25 loc_5F25:                               ; CODE XREF: hash_clear+23↑j
.text:0000000000005F25                 test    rax, rax
.text:0000000000005F28                 jz      short loc_5F30
.text:0000000000005F2A                 mov     rdi, [r12]
.text:0000000000005F2E                 call    rax
.text:0000000000005F30
.text:0000000000005F30 loc_5F30:                               ; CODE XREF: hash_clear+58↑j
.text:0000000000005F30                 mov     qword ptr [r12], 0
.text:0000000000005F38                 mov     qword ptr [r12+8], 0
.text:0000000000005F41
.text:0000000000005F41 loc_5F41:                               ; CODE XREF: hash_clear+15↑j
.text:0000000000005F41                 add     r12, 10h
.text:0000000000005F45                 cmp     [rbp+8], r12
.text:0000000000005F49                 ja      short loc_5EE0
.text:0000000000005F4B
.text:0000000000005F4B loc_5F4B:                               ; CODE XREF: hash_clear+E↑j
.text:0000000000005F4B                 mov     qword ptr [rbp+18h], 0
.text:0000000000005F53                 mov     qword ptr [rbp+20h], 0
.text:0000000000005F5B                 pop     rbx
.text:0000000000005F5C                 pop     rbp
.text:0000000000005F5D                 pop     r12
.text:0000000000005F5F                 retn
.text:0000000000005F5F ; } // starts at 5ED0
.text:0000000000005F5F hash_clear      endp
.text:0000000000005F5F
.text:0000000000005F60
.text:0000000000005F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F60
.text:0000000000005F60 ; Attributes: info_from_lumina
.text:0000000000005F60
.text:0000000000005F60 ; void __fastcall hash_free(Hash_table *table)
.text:0000000000005F60                 public hash_free
.text:0000000000005F60 hash_free       proc near               ; CODE XREF: canonicalize_filename_mode+219↑p
.text:0000000000005F60                                         ; canonicalize_filename_mode+393↑p
.text:0000000000005F60 ; __unwind {
.text:0000000000005F60                 push    r12
.text:0000000000005F62                 push    rbp
.text:0000000000005F63                 mov     r12, rdi
.text:0000000000005F66                 push    rbx
.text:0000000000005F67                 cmp     qword ptr [rdi+40h], 0
.text:0000000000005F6C                 mov     rbp, [rdi]
.text:0000000000005F6F                 mov     rax, [rdi+8]
.text:0000000000005F73                 jz      short loc_5FC3
.text:0000000000005F75                 cmp     qword ptr [rdi+20h], 0
.text:0000000000005F7A                 jz      short loc_5FC3
.text:0000000000005F7C                 cmp     rbp, rax
.text:0000000000005F7F                 jnb     short loc_5FFC
.text:0000000000005F81                 nop     dword ptr [rax+00000000h]
.text:0000000000005F88
.text:0000000000005F88 loc_5F88:                               ; CODE XREF: hash_free+5D↓j
.text:0000000000005F88                 mov     rdi, [rbp+0]
.text:0000000000005F8C                 test    rdi, rdi
.text:0000000000005F8F                 jz      short loc_5FB6
.text:0000000000005F91                 mov     rbx, rbp
.text:0000000000005F94                 jmp     short loc_5FA3
.text:0000000000005F94 ; ---------------------------------------------------------------------------
.text:0000000000005F96                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: hash_free+4F↓j
.text:0000000000005FA0                 mov     rdi, [rbx]
.text:0000000000005FA3
.text:0000000000005FA3 loc_5FA3:                               ; CODE XREF: hash_free+34↑j
.text:0000000000005FA3                 call    qword ptr [r12+40h]
.text:0000000000005FA8                 mov     rbx, [rbx+8]
.text:0000000000005FAC                 test    rbx, rbx
.text:0000000000005FAF                 jnz     short loc_5FA0
.text:0000000000005FB1                 mov     rax, [r12+8]
.text:0000000000005FB6
.text:0000000000005FB6 loc_5FB6:                               ; CODE XREF: hash_free+2F↑j
.text:0000000000005FB6                 add     rbp, 10h
.text:0000000000005FBA                 cmp     rax, rbp
.text:0000000000005FBD                 ja      short loc_5F88
.text:0000000000005FBF                 mov     rbp, [r12]
.text:0000000000005FC3
.text:0000000000005FC3 loc_5FC3:                               ; CODE XREF: hash_free+13↑j
.text:0000000000005FC3                                         ; hash_free+1A↑j
.text:0000000000005FC3                 cmp     rbp, rax
.text:0000000000005FC6                 jnb     short loc_5FFC
.text:0000000000005FC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005FD0
.text:0000000000005FD0 loc_5FD0:                               ; CODE XREF: hash_free+9A↓j
.text:0000000000005FD0                 mov     rdi, [rbp+8]    ; ptr
.text:0000000000005FD4                 test    rdi, rdi
.text:0000000000005FD7                 jz      short loc_5FF1
.text:0000000000005FD9                 nop     dword ptr [rax+00000000h]
.text:0000000000005FE0
.text:0000000000005FE0 loc_5FE0:                               ; CODE XREF: hash_free+8F↓j
.text:0000000000005FE0                 mov     rbx, [rdi+8]
.text:0000000000005FE4                 call    _free
.text:0000000000005FE9                 test    rbx, rbx
.text:0000000000005FEC                 mov     rdi, rbx
.text:0000000000005FEF                 jnz     short loc_5FE0
.text:0000000000005FF1
.text:0000000000005FF1 loc_5FF1:                               ; CODE XREF: hash_free+77↑j
.text:0000000000005FF1                 add     rbp, 10h
.text:0000000000005FF5                 cmp     [r12+8], rbp
.text:0000000000005FFA                 ja      short loc_5FD0
.text:0000000000005FFC
.text:0000000000005FFC loc_5FFC:                               ; CODE XREF: hash_free+1F↑j
.text:0000000000005FFC                                         ; hash_free+66↑j
.text:0000000000005FFC                 mov     rdi, [r12+48h]  ; ptr
.text:0000000000006001                 test    rdi, rdi
.text:0000000000006004                 jz      short loc_6021
.text:0000000000006006                 db      2Eh
.text:0000000000006006                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: hash_free+BF↓j
.text:0000000000006010                 mov     rbx, [rdi+8]
.text:0000000000006014                 call    _free
.text:0000000000006019                 test    rbx, rbx
.text:000000000000601C                 mov     rdi, rbx
.text:000000000000601F                 jnz     short loc_6010
.text:0000000000006021
.text:0000000000006021 loc_6021:                               ; CODE XREF: hash_free+A4↑j
.text:0000000000006021                 mov     rdi, [r12]      ; ptr
.text:0000000000006025                 call    _free
.text:000000000000602A                 pop     rbx
.text:000000000000602B                 mov     rdi, r12        ; ptr
.text:000000000000602E                 pop     rbp
.text:000000000000602F                 pop     r12
.text:0000000000006031                 jmp     _free
.text:0000000000006031 ; } // starts at 5F60
.text:0000000000006031 hash_free       endp
.text:0000000000006031
.text:0000000000006031 ; ---------------------------------------------------------------------------
.text:0000000000006036                 align 20h
.text:0000000000006040
.text:0000000000006040 ; =============== S U B R O U T I N E =======================================
.text:0000000000006040
.text:0000000000006040 ; Attributes: info_from_lumina
.text:0000000000006040
.text:0000000000006040 ; _Bool __fastcall hash_rehash(Hash_table *table, size_t candidate)
.text:0000000000006040                 public hash_rehash
.text:0000000000006040 hash_rehash     proc near               ; CODE XREF: hash_insert_if_absent+1BB↓p
.text:0000000000006040                                         ; hash_delete+10F↓p
.text:0000000000006040
.text:0000000000006040 ptr             = qword ptr -78h
.text:0000000000006040 var_70          = qword ptr -70h
.text:0000000000006040 var_68          = qword ptr -68h
.text:0000000000006040 var_60          = qword ptr -60h
.text:0000000000006040 var_58          = qword ptr -58h
.text:0000000000006040 var_50          = qword ptr -50h
.text:0000000000006040 var_48          = qword ptr -48h
.text:0000000000006040 var_40          = qword ptr -40h
.text:0000000000006040 var_38          = qword ptr -38h
.text:0000000000006040 var_30          = qword ptr -30h
.text:0000000000006040 var_20          = qword ptr -20h
.text:0000000000006040
.text:0000000000006040 ; __unwind {
.text:0000000000006040                 push    r12
.text:0000000000006042                 push    rbp
.text:0000000000006043                 mov     rbp, rdi
.text:0000000000006046                 push    rbx
.text:0000000000006047                 sub     rsp, 60h
.text:000000000000604B                 mov     r12, [rdi+28h]
.text:000000000000604F                 mov     rax, fs:28h
.text:0000000000006058                 mov     [rsp+78h+var_20], rax
.text:000000000000605D                 xor     eax, eax
.text:000000000000605F                 cmp     byte ptr [r12+10h], 0
.text:0000000000006065                 jnz     short loc_60B8
.text:0000000000006067                 test    rsi, rsi
.text:000000000000606A                 js      loc_61E8
.text:0000000000006070                 pxor    xmm0, xmm0
.text:0000000000006074                 cvtsi2ss xmm0, rsi
.text:0000000000006079
.text:0000000000006079 loc_6079:                               ; CODE XREF: hash_rehash+1C1↓j
.text:0000000000006079                 divss   xmm0, dword ptr [r12+8]
.text:0000000000006080                 ucomiss xmm0, cs:dword_C0CC
.text:0000000000006087                 jnb     loc_61C0
.text:000000000000608D                 ucomiss xmm0, cs:dword_C0D0
.text:0000000000006094                 jb      loc_6210
.text:000000000000609A                 subss   xmm0, cs:dword_C0D0
.text:00000000000060A2                 mov     rax, 8000000000000000h
.text:00000000000060AC                 cvttss2si rsi, xmm0
.text:00000000000060B1                 xor     rsi, rax
.text:00000000000060B4                 nop     dword ptr [rax+00h]
.text:00000000000060B8
.text:00000000000060B8 loc_60B8:                               ; CODE XREF: hash_rehash+25↑j
.text:00000000000060B8                                         ; hash_rehash+1D5↓j
.text:00000000000060B8                 mov     rdi, rsi
.text:00000000000060BB                 call    next_prime
.text:00000000000060C0                 mov     edx, 8
.text:00000000000060C5                 mov     rbx, rax
.text:00000000000060C8                 xor     ecx, ecx
.text:00000000000060CA                 mov     rax, rdx
.text:00000000000060CD                 mul     rbx
.text:00000000000060D0                 jo      loc_626F
.text:00000000000060D6
.text:00000000000060D6 loc_60D6:                               ; CODE XREF: hash_rehash+234↓j
.text:00000000000060D6                 test    rax, rax
.text:00000000000060D9                 mov     eax, 1
.text:00000000000060DE                 cmovs   rcx, rax
.text:00000000000060E2                 test    rbx, rbx
.text:00000000000060E5                 jz      loc_61C0
.text:00000000000060EB                 and     ecx, 1
.text:00000000000060EE                 jnz     loc_61C0
.text:00000000000060F4                 cmp     [rbp+10h], rbx
.text:00000000000060F8                 jz      loc_6220
.text:00000000000060FE                 mov     esi, 10h        ; size
.text:0000000000006103                 mov     rdi, rbx        ; nmemb
.text:0000000000006106                 call    _calloc
.text:000000000000610B                 test    rax, rax
.text:000000000000610E                 mov     [rsp+78h+ptr], rax
.text:0000000000006112                 jz      loc_61C0
.text:0000000000006118                 mov     [rsp+78h+var_68], rbx
.text:000000000000611D                 shl     rbx, 4
.text:0000000000006121                 mov     [rsp+78h+var_50], r12
.text:0000000000006126                 add     rbx, rax
.text:0000000000006129                 mov     rax, [rbp+30h]
.text:000000000000612D                 mov     r12, rsp
.text:0000000000006130                 xor     edx, edx
.text:0000000000006132                 mov     rsi, rbp
.text:0000000000006135                 mov     rdi, r12
.text:0000000000006138                 mov     [rsp+78h+var_70], rbx
.text:000000000000613D                 mov     [rsp+78h+var_60], 0
.text:0000000000006146                 mov     [rsp+78h+var_48], rax
.text:000000000000614B                 mov     rax, [rbp+38h]
.text:000000000000614F                 mov     [rsp+78h+var_58], 0
.text:0000000000006158                 mov     [rsp+78h+var_40], rax
.text:000000000000615D                 mov     rax, [rbp+40h]
.text:0000000000006161                 mov     [rsp+78h+var_38], rax
.text:0000000000006166                 mov     rax, [rbp+48h]
.text:000000000000616A                 mov     [rsp+78h+var_30], rax
.text:000000000000616F                 call    transfer_entries
.text:0000000000006174                 test    al, al
.text:0000000000006176                 mov     ebx, eax
.text:0000000000006178                 jnz     loc_6230
.text:000000000000617E                 mov     rax, [rsp+78h+var_30]
.text:0000000000006183                 mov     edx, 1
.text:0000000000006188                 mov     rsi, r12
.text:000000000000618B                 mov     rdi, rbp
.text:000000000000618E                 mov     [rbp+48h], rax
.text:0000000000006192                 call    transfer_entries
.text:0000000000006197                 test    al, al
.text:0000000000006199                 jz      loc_6279
.text:000000000000619F                 xor     edx, edx
.text:00000000000061A1                 mov     rsi, r12
.text:00000000000061A4                 mov     rdi, rbp
.text:00000000000061A7                 call    transfer_entries
.text:00000000000061AC                 test    al, al
.text:00000000000061AE                 jz      loc_6279
.text:00000000000061B4                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:00000000000061B8                 call    _free
.text:00000000000061BD                 jmp     short loc_61C2
.text:00000000000061BD ; ---------------------------------------------------------------------------
.text:00000000000061BF                 align 20h
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: hash_rehash+47↑j
.text:00000000000061C0                                         ; hash_rehash+A5↑j ...
.text:00000000000061C0                 xor     ebx, ebx
.text:00000000000061C2
.text:00000000000061C2 loc_61C2:                               ; CODE XREF: hash_rehash+17D↑j
.text:00000000000061C2                                         ; hash_rehash+1E5↓j ...
.text:00000000000061C2                 mov     rcx, [rsp+78h+var_20]
.text:00000000000061C7                 xor     rcx, fs:28h
.text:00000000000061D0                 mov     eax, ebx
.text:00000000000061D2                 jnz     loc_626A
.text:00000000000061D8                 add     rsp, 60h
.text:00000000000061DC                 pop     rbx
.text:00000000000061DD                 pop     rbp
.text:00000000000061DE                 pop     r12
.text:00000000000061E0                 retn
.text:00000000000061E0 ; ---------------------------------------------------------------------------
.text:00000000000061E1                 align 8
.text:00000000000061E8
.text:00000000000061E8 loc_61E8:                               ; CODE XREF: hash_rehash+2A↑j
.text:00000000000061E8                 mov     rax, rsi
.text:00000000000061EB                 pxor    xmm0, xmm0
.text:00000000000061EF                 shr     rax, 1
.text:00000000000061F2                 and     esi, 1
.text:00000000000061F5                 or      rax, rsi
.text:00000000000061F8                 cvtsi2ss xmm0, rax
.text:00000000000061FD                 addss   xmm0, xmm0
.text:0000000000006201                 jmp     loc_6079
.text:0000000000006201 ; ---------------------------------------------------------------------------
.text:0000000000006206                 align 10h
.text:0000000000006210
.text:0000000000006210 loc_6210:                               ; CODE XREF: hash_rehash+54↑j
.text:0000000000006210                 cvttss2si rsi, xmm0
.text:0000000000006215                 jmp     loc_60B8
.text:0000000000006215 ; ---------------------------------------------------------------------------
.text:000000000000621A                 align 20h
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: hash_rehash+B8↑j
.text:0000000000006220                 mov     ebx, 1
.text:0000000000006225                 jmp     short loc_61C2
.text:0000000000006225 ; ---------------------------------------------------------------------------
.text:0000000000006227                 align 10h
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: hash_rehash+138↑j
.text:0000000000006230                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000006234                 call    _free
.text:0000000000006239                 mov     rax, [rsp+78h+ptr]
.text:000000000000623D                 mov     [rbp+0], rax
.text:0000000000006241                 mov     rax, [rsp+78h+var_70]
.text:0000000000006246                 mov     [rbp+8], rax
.text:000000000000624A                 mov     rax, [rsp+78h+var_68]
.text:000000000000624F                 mov     [rbp+10h], rax
.text:0000000000006253                 mov     rax, [rsp+78h+var_60]
.text:0000000000006258                 mov     [rbp+18h], rax
.text:000000000000625C                 mov     rax, [rsp+78h+var_30]
.text:0000000000006261                 mov     [rbp+48h], rax
.text:0000000000006265                 jmp     loc_61C2
.text:000000000000626A ; ---------------------------------------------------------------------------
.text:000000000000626A
.text:000000000000626A loc_626A:                               ; CODE XREF: hash_rehash+192↑j
.text:000000000000626A                 call    ___stack_chk_fail
.text:000000000000626F ; ---------------------------------------------------------------------------
.text:000000000000626F
.text:000000000000626F loc_626F:                               ; CODE XREF: hash_rehash+90↑j
.text:000000000000626F                 mov     ecx, 1
.text:0000000000006274                 jmp     loc_60D6
.text:0000000000006279 ; ---------------------------------------------------------------------------
.text:0000000000006279
.text:0000000000006279 loc_6279:                               ; CODE XREF: hash_rehash+159↑j
.text:0000000000006279                                         ; hash_rehash+16E↑j
.text:0000000000006279                 call    _abort
.text:0000000000006279 ; } // starts at 6040
.text:0000000000006279 hash_rehash     endp
.text:0000000000006279
.text:0000000000006279 ; ---------------------------------------------------------------------------
.text:000000000000627E                 align 20h
.text:0000000000006280
.text:0000000000006280 ; =============== S U B R O U T I N E =======================================
.text:0000000000006280
.text:0000000000006280 ; Attributes: info_from_lumina
.text:0000000000006280
.text:0000000000006280 ; int __fastcall hash_insert_if_absent(Hash_table *table, const void *entry, const void **matched_ent)
.text:0000000000006280                 public hash_insert_if_absent
.text:0000000000006280 hash_insert_if_absent proc near         ; CODE XREF: hash_insert+1B↓p
.text:0000000000006280
.text:0000000000006280 var_38          = qword ptr -38h
.text:0000000000006280 var_30          = qword ptr -30h
.text:0000000000006280
.text:0000000000006280 ; __unwind {
.text:0000000000006280                 push    r13
.text:0000000000006282                 push    r12
.text:0000000000006284                 push    rbp
.text:0000000000006285                 push    rbx
.text:0000000000006286                 sub     rsp, 18h
.text:000000000000628A                 mov     rax, fs:28h
.text:0000000000006293                 mov     [rsp+38h+var_30], rax
.text:0000000000006298                 xor     eax, eax
.text:000000000000629A                 test    rsi, rsi
.text:000000000000629D                 jz      loc_645D
.text:00000000000062A3                 mov     r12, rsp
.text:00000000000062A6                 xor     ecx, ecx
.text:00000000000062A8                 mov     r13, rdx
.text:00000000000062AB                 mov     rdx, r12
.text:00000000000062AE                 mov     rbx, rdi
.text:00000000000062B1                 mov     rbp, rsi
.text:00000000000062B4                 call    hash_find_entry
.text:00000000000062B9                 test    rax, rax
.text:00000000000062BC                 mov     rdx, rax
.text:00000000000062BF                 jz      short loc_62F0
.text:00000000000062C1                 xor     eax, eax
.text:00000000000062C3                 test    r13, r13
.text:00000000000062C6                 jz      short loc_62CC
.text:00000000000062C8                 mov     [r13+0], rdx
.text:00000000000062CC
.text:00000000000062CC loc_62CC:                               ; CODE XREF: hash_insert_if_absent+46↑j
.text:00000000000062CC                                         ; hash_insert_if_absent+E9↓j ...
.text:00000000000062CC                 mov     rcx, [rsp+38h+var_30]
.text:00000000000062D1                 xor     rcx, fs:28h
.text:00000000000062DA                 jnz     loc_64FF
.text:00000000000062E0                 add     rsp, 18h
.text:00000000000062E4                 pop     rbx
.text:00000000000062E5                 pop     rbp
.text:00000000000062E6                 pop     r12
.text:00000000000062E8                 pop     r13
.text:00000000000062EA                 retn
.text:00000000000062EA ; ---------------------------------------------------------------------------
.text:00000000000062EB                 align 10h
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: hash_insert_if_absent+3F↑j
.text:00000000000062F0                 mov     rax, [rbx+18h]
.text:00000000000062F4                 test    rax, rax
.text:00000000000062F7                 js      short loc_6370
.text:00000000000062F9                 pxor    xmm1, xmm1
.text:00000000000062FD                 mov     rdx, [rbx+28h]
.text:0000000000006301                 cvtsi2ss xmm1, rax
.text:0000000000006306                 mov     rax, [rbx+10h]
.text:000000000000630A                 test    rax, rax
.text:000000000000630D                 js      loc_639A
.text:0000000000006313
.text:0000000000006313 loc_6313:                               ; CODE XREF: hash_insert_if_absent+114↓j
.text:0000000000006313                 pxor    xmm0, xmm0
.text:0000000000006317                 cvtsi2ss xmm0, rax
.text:000000000000631C
.text:000000000000631C loc_631C:                               ; CODE XREF: hash_insert_if_absent+133↓j
.text:000000000000631C                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000006321                 ucomiss xmm1, xmm0
.text:0000000000006324                 ja      loc_63C0
.text:000000000000632A
.text:000000000000632A loc_632A:                               ; CODE XREF: hash_insert_if_absent+188↓j
.text:000000000000632A                                         ; hash_insert_if_absent+1D7↓j
.text:000000000000632A                 mov     r12, [rsp+38h+var_38]
.text:000000000000632E                 cmp     qword ptr [r12], 0
.text:0000000000006333                 jz      loc_6468
.text:0000000000006339                 mov     rax, [rbx+48h]
.text:000000000000633D                 test    rax, rax
.text:0000000000006340                 jz      loc_6480
.text:0000000000006346                 mov     rdx, [rax+8]
.text:000000000000634A                 mov     [rbx+48h], rdx
.text:000000000000634E
.text:000000000000634E loc_634E:                               ; CODE XREF: hash_insert_if_absent+20D↓j
.text:000000000000634E                 mov     rdx, [r12+8]
.text:0000000000006353                 mov     [rax], rbp
.text:0000000000006356                 mov     [rax+8], rdx
.text:000000000000635A                 mov     [r12+8], rax
.text:000000000000635F                 mov     eax, 1
.text:0000000000006364                 add     qword ptr [rbx+20h], 1
.text:0000000000006369                 jmp     loc_62CC
.text:0000000000006369 ; ---------------------------------------------------------------------------
.text:000000000000636E                 align 10h
.text:0000000000006370
.text:0000000000006370 loc_6370:                               ; CODE XREF: hash_insert_if_absent+77↑j
.text:0000000000006370                 mov     rdx, rax
.text:0000000000006373                 pxor    xmm1, xmm1
.text:0000000000006377                 and     eax, 1
.text:000000000000637A                 shr     rdx, 1
.text:000000000000637D                 or      rdx, rax
.text:0000000000006380                 mov     rax, [rbx+10h]
.text:0000000000006384                 cvtsi2ss xmm1, rdx
.text:0000000000006389                 mov     rdx, [rbx+28h]
.text:000000000000638D                 test    rax, rax
.text:0000000000006390                 addss   xmm1, xmm1
.text:0000000000006394                 jns     loc_6313
.text:000000000000639A
.text:000000000000639A loc_639A:                               ; CODE XREF: hash_insert_if_absent+8D↑j
.text:000000000000639A                 mov     rcx, rax
.text:000000000000639D                 pxor    xmm0, xmm0
.text:00000000000063A1                 shr     rcx, 1
.text:00000000000063A4                 and     eax, 1
.text:00000000000063A7                 or      rcx, rax
.text:00000000000063AA                 cvtsi2ss xmm0, rcx
.text:00000000000063AF                 addss   xmm0, xmm0
.text:00000000000063B3                 jmp     loc_631C
.text:00000000000063B3 ; ---------------------------------------------------------------------------
.text:00000000000063B8                 align 20h
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: hash_insert_if_absent+A4↑j
.text:00000000000063C0                 lea     rdi, [rbx+28h]
.text:00000000000063C4                 call    check_tuning
.text:00000000000063C9                 mov     rax, [rbx+10h]
.text:00000000000063CD                 mov     rdx, [rbx+28h]
.text:00000000000063D1                 test    rax, rax
.text:00000000000063D4                 movss   xmm2, dword ptr [rdx+8]
.text:00000000000063D9                 js      loc_64A0
.text:00000000000063DF                 pxor    xmm0, xmm0
.text:00000000000063E3                 cvtsi2ss xmm0, rax
.text:00000000000063E8
.text:00000000000063E8 loc_63E8:                               ; CODE XREF: hash_insert_if_absent+239↓j
.text:00000000000063E8                 mov     rax, [rbx+18h]
.text:00000000000063EC                 test    rax, rax
.text:00000000000063EF                 js      loc_64C0
.text:00000000000063F5                 pxor    xmm1, xmm1
.text:00000000000063F9                 cvtsi2ss xmm1, rax
.text:00000000000063FE
.text:00000000000063FE loc_63FE:                               ; CODE XREF: hash_insert_if_absent+259↓j
.text:00000000000063FE                 movaps  xmm3, xmm2
.text:0000000000006401                 mulss   xmm3, xmm0
.text:0000000000006405                 ucomiss xmm1, xmm3
.text:0000000000006408                 jbe     loc_632A
.text:000000000000640E                 cmp     byte ptr [rdx+10h], 0
.text:0000000000006412                 mulss   xmm0, dword ptr [rdx+0Ch]
.text:0000000000006417                 jnz     short loc_641D
.text:0000000000006419                 mulss   xmm0, xmm2
.text:000000000000641D
.text:000000000000641D loc_641D:                               ; CODE XREF: hash_insert_if_absent+197↑j
.text:000000000000641D                 ucomiss xmm0, cs:dword_C0CC
.text:0000000000006424                 jnb     short loc_6493
.text:0000000000006426                 ucomiss xmm0, cs:dword_C0D0
.text:000000000000642D                 jnb     loc_64E0
.text:0000000000006433                 cvttss2si rsi, xmm0
.text:0000000000006438
.text:0000000000006438 loc_6438:                               ; CODE XREF: hash_insert_if_absent+27A↓j
.text:0000000000006438                 mov     rdi, rbx
.text:000000000000643B                 call    hash_rehash
.text:0000000000006440                 test    al, al
.text:0000000000006442                 jz      short loc_6493
.text:0000000000006444                 xor     ecx, ecx
.text:0000000000006446                 mov     rdx, r12
.text:0000000000006449                 mov     rsi, rbp
.text:000000000000644C                 mov     rdi, rbx
.text:000000000000644F                 call    hash_find_entry
.text:0000000000006454                 test    rax, rax
.text:0000000000006457                 jz      loc_632A
.text:000000000000645D
.text:000000000000645D loc_645D:                               ; CODE XREF: hash_insert_if_absent+1D↑j
.text:000000000000645D                 call    _abort
.text:000000000000645D ; ---------------------------------------------------------------------------
.text:0000000000006462                 align 8
.text:0000000000006468
.text:0000000000006468 loc_6468:                               ; CODE XREF: hash_insert_if_absent+B3↑j
.text:0000000000006468                 mov     [r12], rbp
.text:000000000000646C                 mov     eax, 1
.text:0000000000006471                 add     qword ptr [rbx+20h], 1
.text:0000000000006476                 add     qword ptr [rbx+18h], 1
.text:000000000000647B                 jmp     loc_62CC
.text:0000000000006480 ; ---------------------------------------------------------------------------
.text:0000000000006480
.text:0000000000006480 loc_6480:                               ; CODE XREF: hash_insert_if_absent+C0↑j
.text:0000000000006480                 mov     edi, 10h        ; size
.text:0000000000006485                 call    _malloc
.text:000000000000648A                 test    rax, rax
.text:000000000000648D                 jnz     loc_634E
.text:0000000000006493
.text:0000000000006493 loc_6493:                               ; CODE XREF: hash_insert_if_absent+1A4↑j
.text:0000000000006493                                         ; hash_insert_if_absent+1C2↑j
.text:0000000000006493                 mov     eax, 0FFFFFFFFh
.text:0000000000006498                 jmp     loc_62CC
.text:0000000000006498 ; ---------------------------------------------------------------------------
.text:000000000000649D                 align 20h
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: hash_insert_if_absent+159↑j
.text:00000000000064A0                 mov     rcx, rax
.text:00000000000064A3                 pxor    xmm0, xmm0
.text:00000000000064A7                 shr     rcx, 1
.text:00000000000064AA                 and     eax, 1
.text:00000000000064AD                 or      rcx, rax
.text:00000000000064B0                 cvtsi2ss xmm0, rcx
.text:00000000000064B5                 addss   xmm0, xmm0
.text:00000000000064B9                 jmp     loc_63E8
.text:00000000000064B9 ; ---------------------------------------------------------------------------
.text:00000000000064BE                 align 20h
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: hash_insert_if_absent+16F↑j
.text:00000000000064C0                 mov     rcx, rax
.text:00000000000064C3                 pxor    xmm1, xmm1
.text:00000000000064C7                 shr     rcx, 1
.text:00000000000064CA                 and     eax, 1
.text:00000000000064CD                 or      rcx, rax
.text:00000000000064D0                 cvtsi2ss xmm1, rcx
.text:00000000000064D5                 addss   xmm1, xmm1
.text:00000000000064D9                 jmp     loc_63FE
.text:00000000000064D9 ; ---------------------------------------------------------------------------
.text:00000000000064DE                 align 20h
.text:00000000000064E0
.text:00000000000064E0 loc_64E0:                               ; CODE XREF: hash_insert_if_absent+1AD↑j
.text:00000000000064E0                 subss   xmm0, cs:dword_C0D0
.text:00000000000064E8                 mov     rax, 8000000000000000h
.text:00000000000064F2                 cvttss2si rsi, xmm0
.text:00000000000064F7                 xor     rsi, rax
.text:00000000000064FA                 jmp     loc_6438
.text:00000000000064FF ; ---------------------------------------------------------------------------
.text:00000000000064FF
.text:00000000000064FF loc_64FF:                               ; CODE XREF: hash_insert_if_absent+5A↑j
.text:00000000000064FF                 call    ___stack_chk_fail
.text:00000000000064FF ; } // starts at 6280
.text:00000000000064FF hash_insert_if_absent endp
.text:00000000000064FF
.text:00000000000064FF ; ---------------------------------------------------------------------------
.text:0000000000006504                 align 10h
.text:0000000000006510
.text:0000000000006510 ; =============== S U B R O U T I N E =======================================
.text:0000000000006510
.text:0000000000006510 ; Attributes: info_from_lumina
.text:0000000000006510
.text:0000000000006510 ; void *__fastcall hash_insert(Hash_table *table, const void *entry)
.text:0000000000006510                 public hash_insert
.text:0000000000006510 hash_insert     proc near               ; CODE XREF: record_file+46↑p
.text:0000000000006510
.text:0000000000006510 var_18          = qword ptr -18h
.text:0000000000006510 var_10          = qword ptr -10h
.text:0000000000006510
.text:0000000000006510 ; __unwind {
.text:0000000000006510                 push    rbx
.text:0000000000006511                 mov     rbx, rsi
.text:0000000000006514                 sub     rsp, 10h
.text:0000000000006518                 mov     rdx, rsp
.text:000000000000651B                 mov     rax, fs:28h
.text:0000000000006524                 mov     [rsp+18h+var_10], rax
.text:0000000000006529                 xor     eax, eax
.text:000000000000652B                 call    hash_insert_if_absent
.text:0000000000006530                 cmp     eax, 0FFFFFFFFh
.text:0000000000006533                 jz      short loc_6560
.text:0000000000006535                 test    eax, eax
.text:0000000000006537                 jnz     short loc_653D
.text:0000000000006539                 mov     rbx, [rsp+18h+var_18]
.text:000000000000653D
.text:000000000000653D loc_653D:                               ; CODE XREF: hash_insert+27↑j
.text:000000000000653D                                         ; hash_insert+52↓j
.text:000000000000653D                 mov     rcx, [rsp+18h+var_10]
.text:0000000000006542                 xor     rcx, fs:28h
.text:000000000000654B                 mov     rax, rbx
.text:000000000000654E                 jnz     short loc_6564
.text:0000000000006550                 add     rsp, 10h
.text:0000000000006554                 pop     rbx
.text:0000000000006555                 retn
.text:0000000000006555 ; ---------------------------------------------------------------------------
.text:0000000000006556                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: hash_insert+23↑j
.text:0000000000006560                 xor     ebx, ebx
.text:0000000000006562                 jmp     short loc_653D
.text:0000000000006564 ; ---------------------------------------------------------------------------
.text:0000000000006564
.text:0000000000006564 loc_6564:                               ; CODE XREF: hash_insert+3E↑j
.text:0000000000006564                 call    ___stack_chk_fail
.text:0000000000006564 ; } // starts at 6510
.text:0000000000006564 hash_insert     endp
.text:0000000000006564
.text:0000000000006564 ; ---------------------------------------------------------------------------
.text:0000000000006569                 align 10h
.text:0000000000006570
.text:0000000000006570 ; =============== S U B R O U T I N E =======================================
.text:0000000000006570
.text:0000000000006570 ; Attributes: info_from_lumina
.text:0000000000006570
.text:0000000000006570 ; void *__fastcall hash_delete(Hash_table *table, const void *entry)
.text:0000000000006570                 public hash_delete
.text:0000000000006570 hash_delete     proc near
.text:0000000000006570
.text:0000000000006570 var_28          = qword ptr -28h
.text:0000000000006570 var_20          = qword ptr -20h
.text:0000000000006570
.text:0000000000006570 ; __unwind {
.text:0000000000006570                 push    r12
.text:0000000000006572                 push    rbp
.text:0000000000006573                 mov     ecx, 1
.text:0000000000006578                 push    rbx
.text:0000000000006579                 mov     rbx, rdi
.text:000000000000657C                 sub     rsp, 10h
.text:0000000000006580                 mov     rdx, rsp
.text:0000000000006583                 mov     rax, fs:28h
.text:000000000000658C                 mov     [rsp+28h+var_20], rax
.text:0000000000006591                 xor     eax, eax
.text:0000000000006593                 call    hash_find_entry
.text:0000000000006598                 test    rax, rax
.text:000000000000659B                 mov     rbp, rax
.text:000000000000659E                 jz      short loc_65AF
.text:00000000000065A0                 mov     rax, [rsp+28h+var_28]
.text:00000000000065A4                 sub     qword ptr [rbx+20h], 1
.text:00000000000065A9                 cmp     qword ptr [rax], 0
.text:00000000000065AD                 jz      short loc_65D0
.text:00000000000065AF
.text:00000000000065AF loc_65AF:                               ; CODE XREF: hash_delete+2E↑j
.text:00000000000065AF                                         ; hash_delete+9F↓j ...
.text:00000000000065AF                 mov     rcx, [rsp+28h+var_20]
.text:00000000000065B4                 xor     rcx, fs:28h
.text:00000000000065BD                 mov     rax, rbp
.text:00000000000065C0                 jnz     loc_676E
.text:00000000000065C6                 add     rsp, 10h
.text:00000000000065CA                 pop     rbx
.text:00000000000065CB                 pop     rbp
.text:00000000000065CC                 pop     r12
.text:00000000000065CE                 retn
.text:00000000000065CE ; ---------------------------------------------------------------------------
.text:00000000000065CF                 align 10h
.text:00000000000065D0
.text:00000000000065D0 loc_65D0:                               ; CODE XREF: hash_delete+3D↑j
.text:00000000000065D0                 mov     rax, [rbx+18h]
.text:00000000000065D4                 sub     rax, 1
.text:00000000000065D8                 test    rax, rax
.text:00000000000065DB                 mov     [rbx+18h], rax
.text:00000000000065DF                 js      loc_66E0
.text:00000000000065E5                 pxor    xmm0, xmm0
.text:00000000000065E9                 cvtsi2ss xmm0, rax
.text:00000000000065EE
.text:00000000000065EE loc_65EE:                               ; CODE XREF: hash_delete+189↓j
.text:00000000000065EE                 mov     rax, [rbx+10h]
.text:00000000000065F2                 mov     rdx, [rbx+28h]
.text:00000000000065F6                 test    rax, rax
.text:00000000000065F9                 js      loc_66C0
.text:00000000000065FF                 pxor    xmm1, xmm1
.text:0000000000006603                 cvtsi2ss xmm1, rax
.text:0000000000006608
.text:0000000000006608 loc_6608:                               ; CODE XREF: hash_delete+169↓j
.text:0000000000006608                 mulss   xmm1, dword ptr [rdx]
.text:000000000000660C                 ucomiss xmm1, xmm0
.text:000000000000660F                 jbe     short loc_65AF
.text:0000000000006611                 lea     rdi, [rbx+28h]
.text:0000000000006615                 call    check_tuning
.text:000000000000661A                 mov     rax, [rbx+10h]
.text:000000000000661E                 mov     rdx, [rbx+28h]
.text:0000000000006622                 test    rax, rax
.text:0000000000006625                 js      loc_6750
.text:000000000000662B                 pxor    xmm0, xmm0
.text:000000000000662F                 cvtsi2ss xmm0, rax
.text:0000000000006634
.text:0000000000006634 loc_6634:                               ; CODE XREF: hash_delete+1F9↓j
.text:0000000000006634                 mov     rax, [rbx+18h]
.text:0000000000006638                 test    rax, rax
.text:000000000000663B                 js      loc_6730
.text:0000000000006641                 pxor    xmm1, xmm1
.text:0000000000006645                 cvtsi2ss xmm1, rax
.text:000000000000664A
.text:000000000000664A loc_664A:                               ; CODE XREF: hash_delete+1D9↓j
.text:000000000000664A                 movss   xmm2, dword ptr [rdx]
.text:000000000000664E                 mulss   xmm2, xmm0
.text:0000000000006652                 ucomiss xmm2, xmm1
.text:0000000000006655                 jbe     loc_65AF
.text:000000000000665B                 cmp     byte ptr [rdx+10h], 0
.text:000000000000665F                 mulss   xmm0, dword ptr [rdx+4]
.text:0000000000006664                 jz      loc_6720
.text:000000000000666A
.text:000000000000666A loc_666A:                               ; CODE XREF: hash_delete+1B5↓j
.text:000000000000666A                 ucomiss xmm0, cs:dword_C0D0
.text:0000000000006671                 jnb     loc_6700
.text:0000000000006677                 cvttss2si rsi, xmm0
.text:000000000000667C
.text:000000000000667C loc_667C:                               ; CODE XREF: hash_delete+1AA↓j
.text:000000000000667C                 mov     rdi, rbx
.text:000000000000667F                 call    hash_rehash
.text:0000000000006684                 test    al, al
.text:0000000000006686                 jnz     loc_65AF
.text:000000000000668C                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000006690                 test    rdi, rdi
.text:0000000000006693                 jz      short loc_66A9
.text:0000000000006695                 nop     dword ptr [rax]
.text:0000000000006698
.text:0000000000006698 loc_6698:                               ; CODE XREF: hash_delete+137↓j
.text:0000000000006698                 mov     r12, [rdi+8]
.text:000000000000669C                 call    _free
.text:00000000000066A1                 test    r12, r12
.text:00000000000066A4                 mov     rdi, r12
.text:00000000000066A7                 jnz     short loc_6698
.text:00000000000066A9
.text:00000000000066A9 loc_66A9:                               ; CODE XREF: hash_delete+123↑j
.text:00000000000066A9                 mov     qword ptr [rbx+48h], 0
.text:00000000000066B1                 jmp     loc_65AF
.text:00000000000066B1 ; ---------------------------------------------------------------------------
.text:00000000000066B6                 align 20h
.text:00000000000066C0
.text:00000000000066C0 loc_66C0:                               ; CODE XREF: hash_delete+89↑j
.text:00000000000066C0                 mov     rcx, rax
.text:00000000000066C3                 pxor    xmm1, xmm1
.text:00000000000066C7                 shr     rcx, 1
.text:00000000000066CA                 and     eax, 1
.text:00000000000066CD                 or      rcx, rax
.text:00000000000066D0                 cvtsi2ss xmm1, rcx
.text:00000000000066D5                 addss   xmm1, xmm1
.text:00000000000066D9                 jmp     loc_6608
.text:00000000000066D9 ; ---------------------------------------------------------------------------
.text:00000000000066DE                 align 20h
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: hash_delete+6F↑j
.text:00000000000066E0                 mov     rdx, rax
.text:00000000000066E3                 pxor    xmm0, xmm0
.text:00000000000066E7                 shr     rdx, 1
.text:00000000000066EA                 and     eax, 1
.text:00000000000066ED                 or      rdx, rax
.text:00000000000066F0                 cvtsi2ss xmm0, rdx
.text:00000000000066F5                 addss   xmm0, xmm0
.text:00000000000066F9                 jmp     loc_65EE
.text:00000000000066F9 ; ---------------------------------------------------------------------------
.text:00000000000066FE                 align 20h
.text:0000000000006700
.text:0000000000006700 loc_6700:                               ; CODE XREF: hash_delete+101↑j
.text:0000000000006700                 subss   xmm0, cs:dword_C0D0
.text:0000000000006708                 mov     rax, 8000000000000000h
.text:0000000000006712                 cvttss2si rsi, xmm0
.text:0000000000006717                 xor     rsi, rax
.text:000000000000671A                 jmp     loc_667C
.text:000000000000671A ; ---------------------------------------------------------------------------
.text:000000000000671F                 align 20h
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: hash_delete+F4↑j
.text:0000000000006720                 mulss   xmm0, dword ptr [rdx+8]
.text:0000000000006725                 jmp     loc_666A
.text:0000000000006725 ; ---------------------------------------------------------------------------
.text:000000000000672A                 align 10h
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: hash_delete+CB↑j
.text:0000000000006730                 mov     rcx, rax
.text:0000000000006733                 pxor    xmm1, xmm1
.text:0000000000006737                 shr     rcx, 1
.text:000000000000673A                 and     eax, 1
.text:000000000000673D                 or      rcx, rax
.text:0000000000006740                 cvtsi2ss xmm1, rcx
.text:0000000000006745                 addss   xmm1, xmm1
.text:0000000000006749                 jmp     loc_664A
.text:0000000000006749 ; ---------------------------------------------------------------------------
.text:000000000000674E                 align 10h
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: hash_delete+B5↑j
.text:0000000000006750                 mov     rcx, rax
.text:0000000000006753                 pxor    xmm0, xmm0
.text:0000000000006757                 shr     rcx, 1
.text:000000000000675A                 and     eax, 1
.text:000000000000675D                 or      rcx, rax
.text:0000000000006760                 cvtsi2ss xmm0, rcx
.text:0000000000006765                 addss   xmm0, xmm0
.text:0000000000006769                 jmp     loc_6634
.text:000000000000676E ; ---------------------------------------------------------------------------
.text:000000000000676E
.text:000000000000676E loc_676E:                               ; CODE XREF: hash_delete+50↑j
.text:000000000000676E                 call    ___stack_chk_fail
.text:000000000000676E ; } // starts at 6570
.text:000000000000676E hash_delete     endp
.text:000000000000676E
.text:000000000000676E ; ---------------------------------------------------------------------------
.text:0000000000006773                 align 20h
.text:0000000000006780
.text:0000000000006780 ; =============== S U B R O U T I N E =======================================
.text:0000000000006780
.text:0000000000006780 ; Attributes: info_from_lumina
.text:0000000000006780
.text:0000000000006780 ; size_t __fastcall triple_hash(const void *x, size_t table_size)
.text:0000000000006780                 public triple_hash
.text:0000000000006780 triple_hash     proc near               ; DATA XREF: main+42E↑o
.text:0000000000006780                                         ; canonicalize_filename_mode+4F6↑o
.text:0000000000006780 ; __unwind {
.text:0000000000006780                 push    rbp
.text:0000000000006781                 push    rbx
.text:0000000000006782                 mov     rbp, rdi
.text:0000000000006785                 mov     rbx, rsi
.text:0000000000006788                 sub     rsp, 8
.text:000000000000678C                 mov     rdi, [rdi]
.text:000000000000678F                 call    hash_pjw
.text:0000000000006794                 xor     rax, [rbp+8]
.text:0000000000006798                 xor     edx, edx
.text:000000000000679A                 add     rsp, 8
.text:000000000000679E                 div     rbx
.text:00000000000067A1                 pop     rbx
.text:00000000000067A2                 pop     rbp
.text:00000000000067A3                 mov     rax, rdx
.text:00000000000067A6                 retn
.text:00000000000067A6 ; } // starts at 6780
.text:00000000000067A6 triple_hash     endp
.text:00000000000067A6
.text:00000000000067A6 ; ---------------------------------------------------------------------------
.text:00000000000067A7                 align 10h
.text:00000000000067B0
.text:00000000000067B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067B0
.text:00000000000067B0
.text:00000000000067B0                 public triple_hash_no_name
.text:00000000000067B0 triple_hash_no_name proc near
.text:00000000000067B0 ; __unwind {
.text:00000000000067B0                 mov     rax, [rdi+8]
.text:00000000000067B4                 xor     edx, edx
.text:00000000000067B6                 div     rsi
.text:00000000000067B9                 mov     rax, rdx
.text:00000000000067BC                 retn
.text:00000000000067BC ; } // starts at 67B0
.text:00000000000067BC triple_hash_no_name endp
.text:00000000000067BC
.text:00000000000067BC ; ---------------------------------------------------------------------------
.text:00000000000067BD                 align 20h
.text:00000000000067C0
.text:00000000000067C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067C0
.text:00000000000067C0 ; Attributes: info_from_lumina
.text:00000000000067C0
.text:00000000000067C0 ; _Bool __fastcall triple_compare(const void *x, const void *y)
.text:00000000000067C0                 public triple_compare
.text:00000000000067C0 triple_compare  proc near               ; DATA XREF: main+425↑o
.text:00000000000067C0 ; __unwind {
.text:00000000000067C0                 xor     eax, eax
.text:00000000000067C2                 mov     rdx, [rsi+8]
.text:00000000000067C6                 cmp     [rdi+8], rdx
.text:00000000000067CA                 jz      short loc_67D0
.text:00000000000067CC
.text:00000000000067CC locret_67CC:                            ; CODE XREF: triple_compare+18↓j
.text:00000000000067CC                 rep retn
.text:00000000000067CC ; ---------------------------------------------------------------------------
.text:00000000000067CE                 align 10h
.text:00000000000067D0
.text:00000000000067D0 loc_67D0:                               ; CODE XREF: triple_compare+A↑j
.text:00000000000067D0                 mov     rcx, [rsi+10h]
.text:00000000000067D4                 cmp     [rdi+10h], rcx
.text:00000000000067D8                 jnz     short locret_67CC
.text:00000000000067DA                 sub     rsp, 8
.text:00000000000067DE                 mov     rsi, [rsi]
.text:00000000000067E1                 mov     rdi, [rdi]
.text:00000000000067E4                 call    same_name
.text:00000000000067E9                 add     rsp, 8
.text:00000000000067ED                 retn
.text:00000000000067ED ; } // starts at 67C0
.text:00000000000067ED triple_compare  endp
.text:00000000000067ED
.text:00000000000067ED ; ---------------------------------------------------------------------------
.text:00000000000067EE                 align 10h
.text:00000000000067F0
.text:00000000000067F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067F0
.text:00000000000067F0 ; Attributes: info_from_lumina
.text:00000000000067F0
.text:00000000000067F0 ; _Bool __fastcall triple_compare_ino_str(const void *x, const void *y)
.text:00000000000067F0                 public triple_compare_ino_str
.text:00000000000067F0 triple_compare_ino_str proc near        ; DATA XREF: canonicalize_filename_mode+4ED↑o
.text:00000000000067F0 ; __unwind {
.text:00000000000067F0                 xor     eax, eax
.text:00000000000067F2                 mov     rdx, [rsi+8]
.text:00000000000067F6                 cmp     [rdi+8], rdx
.text:00000000000067FA                 jz      short loc_6800
.text:00000000000067FC
.text:00000000000067FC locret_67FC:                            ; CODE XREF: triple_compare_ino_str+18↓j
.text:00000000000067FC                 rep retn
.text:00000000000067FC ; ---------------------------------------------------------------------------
.text:00000000000067FE                 align 20h
.text:0000000000006800
.text:0000000000006800 loc_6800:                               ; CODE XREF: triple_compare_ino_str+A↑j
.text:0000000000006800                 mov     rcx, [rsi+10h]
.text:0000000000006804                 cmp     [rdi+10h], rcx
.text:0000000000006808                 jnz     short locret_67FC
.text:000000000000680A                 sub     rsp, 8
.text:000000000000680E                 mov     rsi, [rsi]      ; s2
.text:0000000000006811                 mov     rdi, [rdi]      ; s1
.text:0000000000006814                 call    _strcmp
.text:0000000000006819                 test    eax, eax
.text:000000000000681B                 setz    al
.text:000000000000681E                 add     rsp, 8
.text:0000000000006822                 retn
.text:0000000000006822 ; } // starts at 67F0
.text:0000000000006822 triple_compare_ino_str endp
.text:0000000000006822
.text:0000000000006822 ; ---------------------------------------------------------------------------
.text:0000000000006823                 align 10h
.text:0000000000006830
.text:0000000000006830 ; =============== S U B R O U T I N E =======================================
.text:0000000000006830
.text:0000000000006830
.text:0000000000006830 ; __int64 __fastcall triple_free(void *ptr)
.text:0000000000006830                 public triple_free
.text:0000000000006830 triple_free     proc near               ; CODE XREF: record_file+62↑j
.text:0000000000006830                                         ; DATA XREF: main+41E↑o ...
.text:0000000000006830 ; __unwind {
.text:0000000000006830                 push    rbx
.text:0000000000006831                 mov     rbx, rdi
.text:0000000000006834                 mov     rdi, [rdi]      ; ptr
.text:0000000000006837                 call    _free
.text:000000000000683C                 mov     rdi, rbx        ; ptr
.text:000000000000683F                 pop     rbx
.text:0000000000006840                 jmp     _free
.text:0000000000006840 ; } // starts at 6830
.text:0000000000006840 triple_free     endp
.text:0000000000006840
.text:0000000000006840 ; ---------------------------------------------------------------------------
.text:0000000000006845                 align 10h
.text:0000000000006850
.text:0000000000006850 ; =============== S U B R O U T I N E =======================================
.text:0000000000006850
.text:0000000000006850
.text:0000000000006850                 public openat_safer
.text:0000000000006850 openat_safer    proc near               ; CODE XREF: main+5C5↑p
.text:0000000000006850                                         ; opendirat+15↓p
.text:0000000000006850
.text:0000000000006850 var_58          = dword ptr -58h
.text:0000000000006850 var_50          = qword ptr -50h
.text:0000000000006850 var_48          = qword ptr -48h
.text:0000000000006850 var_40          = qword ptr -40h
.text:0000000000006850 var_38          = byte ptr -38h
.text:0000000000006850 var_20          = qword ptr -20h
.text:0000000000006850 arg_0           = byte ptr  8
.text:0000000000006850
.text:0000000000006850 ; __unwind {
.text:0000000000006850                 sub     rsp, 58h
.text:0000000000006854                 mov     [rsp+58h+var_20], rcx
.text:0000000000006859                 xor     ecx, ecx
.text:000000000000685B                 mov     rax, fs:28h
.text:0000000000006864                 mov     [rsp+58h+var_40], rax
.text:0000000000006869                 xor     eax, eax
.text:000000000000686B                 test    dl, 40h
.text:000000000000686E                 jnz     short loc_6898
.text:0000000000006870
.text:0000000000006870 loc_6870:                               ; CODE XREF: openat_safer+67↓j
.text:0000000000006870                 xor     eax, eax
.text:0000000000006872                 call    _openat
.text:0000000000006877                 mov     edi, eax        ; fd
.text:0000000000006879                 call    fd_safer_flag
.text:000000000000687E                 mov     rsi, [rsp+58h+var_40]
.text:0000000000006883                 xor     rsi, fs:28h
.text:000000000000688C                 jnz     short loc_68B9
.text:000000000000688E                 add     rsp, 58h
.text:0000000000006892                 retn
.text:0000000000006892 ; ---------------------------------------------------------------------------
.text:0000000000006893                 align 8
.text:0000000000006898
.text:0000000000006898 loc_6898:                               ; CODE XREF: openat_safer+1E↑j
.text:0000000000006898                 lea     rax, [rsp+58h+arg_0]
.text:000000000000689D                 mov     [rsp+58h+var_58], 18h
.text:00000000000068A4                 mov     ecx, dword ptr [rsp+58h+var_20]
.text:00000000000068A8                 mov     [rsp+58h+var_50], rax
.text:00000000000068AD                 lea     rax, [rsp+58h+var_38]
.text:00000000000068B2                 mov     [rsp+58h+var_48], rax
.text:00000000000068B7                 jmp     short loc_6870
.text:00000000000068B9 ; ---------------------------------------------------------------------------
.text:00000000000068B9
.text:00000000000068B9 loc_68B9:                               ; CODE XREF: openat_safer+3C↑j
.text:00000000000068B9                 call    ___stack_chk_fail
.text:00000000000068B9 ; } // starts at 6850
.text:00000000000068B9 openat_safer    endp
.text:00000000000068B9
.text:00000000000068B9 ; ---------------------------------------------------------------------------
.text:00000000000068BE                 align 20h
.text:00000000000068C0
.text:00000000000068C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068C0
.text:00000000000068C0
.text:00000000000068C0                 public opendirat
.text:00000000000068C0 opendirat       proc near               ; CODE XREF: backupfile_internal+4BD↑p
.text:00000000000068C0 ; __unwind {
.text:00000000000068C0                 push    r13
.text:00000000000068C2                 push    r12
.text:00000000000068C4                 or      edx, 90900h
.text:00000000000068CA                 push    rbp
.text:00000000000068CB                 push    rbx
.text:00000000000068CC                 xor     eax, eax
.text:00000000000068CE                 mov     r12, rcx
.text:00000000000068D1                 sub     rsp, 8
.text:00000000000068D5                 call    openat_safer
.text:00000000000068DA                 test    eax, eax
.text:00000000000068DC                 js      short loc_6930
.text:00000000000068DE                 mov     edi, eax        ; fd
.text:00000000000068E0                 mov     ebx, eax
.text:00000000000068E2                 call    _fdopendir
.text:00000000000068E7                 test    rax, rax
.text:00000000000068EA                 mov     rbp, rax
.text:00000000000068ED                 jz      short loc_6908
.text:00000000000068EF                 mov     [r12], ebx
.text:00000000000068F3                 add     rsp, 8
.text:00000000000068F7                 mov     rax, rbp
.text:00000000000068FA                 pop     rbx
.text:00000000000068FB                 pop     rbp
.text:00000000000068FC                 pop     r12
.text:00000000000068FE                 pop     r13
.text:0000000000006900                 retn
.text:0000000000006900 ; ---------------------------------------------------------------------------
.text:0000000000006901                 align 8
.text:0000000000006908
.text:0000000000006908 loc_6908:                               ; CODE XREF: opendirat+2D↑j
.text:0000000000006908                 call    ___errno_location
.text:000000000000690D                 mov     r13d, [rax]
.text:0000000000006910                 mov     r12, rax
.text:0000000000006913                 mov     edi, ebx        ; fd
.text:0000000000006915                 call    _close
.text:000000000000691A                 mov     rax, rbp
.text:000000000000691D                 mov     [r12], r13d
.text:0000000000006921                 add     rsp, 8
.text:0000000000006925                 pop     rbx
.text:0000000000006926                 pop     rbp
.text:0000000000006927                 pop     r12
.text:0000000000006929                 pop     r13
.text:000000000000692B                 retn
.text:000000000000692B ; ---------------------------------------------------------------------------
.text:000000000000692C                 align 10h
.text:0000000000006930
.text:0000000000006930 loc_6930:                               ; CODE XREF: opendirat+1C↑j
.text:0000000000006930                 add     rsp, 8
.text:0000000000006934                 xor     ebp, ebp
.text:0000000000006936                 pop     rbx
.text:0000000000006937                 mov     rax, rbp
.text:000000000000693A                 pop     rbp
.text:000000000000693B                 pop     r12
.text:000000000000693D                 pop     r13
.text:000000000000693F                 retn
.text:000000000000693F ; } // starts at 68C0
.text:000000000000693F opendirat       endp
.text:000000000000693F
.text:0000000000006940
.text:0000000000006940 ; =============== S U B R O U T I N E =======================================
.text:0000000000006940
.text:0000000000006940
.text:0000000000006940                 public set_program_name
.text:0000000000006940 set_program_name proc near              ; CODE XREF: main+38↑p
.text:0000000000006940 ; __unwind {
.text:0000000000006940                 test    rdi, rdi
.text:0000000000006943                 push    rbx
.text:0000000000006944                 jz      short loc_69BD
.text:0000000000006946                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000694B                 mov     rbx, rdi
.text:000000000000694E                 call    _strrchr
.text:0000000000006953                 test    rax, rax
.text:0000000000006956                 jz      short loc_69AD
.text:0000000000006958                 lea     r8, [rax+1]
.text:000000000000695C                 mov     rdx, r8
.text:000000000000695F                 sub     rdx, rbx
.text:0000000000006962                 cmp     rdx, 6
.text:0000000000006966                 jle     short loc_69AD
.text:0000000000006968                 lea     rsi, [rax-6]
.text:000000000000696C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000006973                 mov     ecx, 7
.text:0000000000006978                 repe cmpsb
.text:000000000000697A                 setnbe  dl
.text:000000000000697D                 sbb     dl, 0
.text:0000000000006980                 test    dl, dl
.text:0000000000006982                 jnz     short loc_69AD
.text:0000000000006984                 lea     rdi, aLt        ; "lt-"
.text:000000000000698B                 mov     ecx, 3
.text:0000000000006990                 mov     rsi, r8
.text:0000000000006993                 mov     rbx, r8
.text:0000000000006996                 repe cmpsb
.text:0000000000006998                 setnbe  dl
.text:000000000000699B                 sbb     dl, 0
.text:000000000000699E                 test    dl, dl
.text:00000000000069A0                 jnz     short loc_69AD
.text:00000000000069A2                 lea     rbx, [rax+4]
.text:00000000000069A6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:00000000000069AD
.text:00000000000069AD loc_69AD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000069AD                                         ; set_program_name+26↑j ...
.text:00000000000069AD                 mov     cs:program_name, rbx
.text:00000000000069B4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000069BB                 pop     rbx
.text:00000000000069BC                 retn
.text:00000000000069BD ; ---------------------------------------------------------------------------
.text:00000000000069BD
.text:00000000000069BD loc_69BD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000069BD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:00000000000069C4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:00000000000069CB                 mov     edx, 37h ; '7'  ; n
.text:00000000000069D0                 mov     esi, 1          ; size
.text:00000000000069D5                 call    _fwrite
.text:00000000000069DA                 call    _abort
.text:00000000000069DA ; } // starts at 6940
.text:00000000000069DA set_program_name endp
.text:00000000000069DA
.text:00000000000069DA ; ---------------------------------------------------------------------------
.text:00000000000069DF                 align 20h
.text:00000000000069E0
.text:00000000000069E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069E0
.text:00000000000069E0 ; Attributes: info_from_lumina
.text:00000000000069E0
.text:00000000000069E0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:00000000000069E0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:00000000000069E0                                         ; quotearg_buffer_restyled+117B↓p
.text:00000000000069E0 ; __unwind {
.text:00000000000069E0                 push    rbp
.text:00000000000069E1                 push    rbx
.text:00000000000069E2                 mov     rbp, rdi
.text:00000000000069E5                 mov     ebx, esi
.text:00000000000069E7                 sub     rsp, 8
.text:00000000000069EB                 call    locale_charset
.text:00000000000069F0                 movzx   edx, byte ptr [rax]
.text:00000000000069F3                 and     edx, 0FFFFFFDFh
.text:00000000000069F6                 cmp     dl, 55h ; 'U'
.text:00000000000069F9                 jz      short loc_6A70
.text:00000000000069FB                 cmp     dl, 47h ; 'G'
.text:00000000000069FE                 jz      short loc_6A20
.text:0000000000006A00
.text:0000000000006A00 loc_6A00:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000006A00                                         ; gettext_quote+50↓j ...
.text:0000000000006A00                 lea     rax, unk_C133
.text:0000000000006A07                 lea     rdx, asc_C135   ; "'"
.text:0000000000006A0E                 cmp     ebx, 9
.text:0000000000006A11                 cmovnz  rax, rdx
.text:0000000000006A15                 add     rsp, 8
.text:0000000000006A19                 pop     rbx
.text:0000000000006A1A                 pop     rbp
.text:0000000000006A1B                 retn
.text:0000000000006A1B ; ---------------------------------------------------------------------------
.text:0000000000006A1C                 align 20h
.text:0000000000006A20
.text:0000000000006A20 loc_6A20:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000006A20                 movzx   edx, byte ptr [rax+1]
.text:0000000000006A24                 and     edx, 0FFFFFFDFh
.text:0000000000006A27                 cmp     dl, 42h ; 'B'
.text:0000000000006A2A                 jnz     short loc_6A00
.text:0000000000006A2C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000006A30                 jnz     short loc_6A00
.text:0000000000006A32                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000006A36                 jnz     short loc_6A00
.text:0000000000006A38                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000006A3C                 jnz     short loc_6A00
.text:0000000000006A3E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000006A42                 jnz     short loc_6A00
.text:0000000000006A44                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000006A48                 jnz     short loc_6A00
.text:0000000000006A4A                 cmp     byte ptr [rax+7], 0
.text:0000000000006A4E                 jnz     short loc_6A00
.text:0000000000006A50                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000006A54                 lea     rax, unk_C12C
.text:0000000000006A5B                 lea     rdx, unk_C130
.text:0000000000006A62                 cmovnz  rax, rdx
.text:0000000000006A66                 add     rsp, 8
.text:0000000000006A6A                 pop     rbx
.text:0000000000006A6B                 pop     rbp
.text:0000000000006A6C                 retn
.text:0000000000006A6C ; ---------------------------------------------------------------------------
.text:0000000000006A6D                 align 10h
.text:0000000000006A70
.text:0000000000006A70 loc_6A70:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000006A70                 movzx   edx, byte ptr [rax+1]
.text:0000000000006A74                 and     edx, 0FFFFFFDFh
.text:0000000000006A77                 cmp     dl, 54h ; 'T'
.text:0000000000006A7A                 jnz     short loc_6A00
.text:0000000000006A7C                 movzx   edx, byte ptr [rax+2]
.text:0000000000006A80                 and     edx, 0FFFFFFDFh
.text:0000000000006A83                 cmp     dl, 46h ; 'F'
.text:0000000000006A86                 jnz     loc_6A00
.text:0000000000006A8C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000006A90                 jnz     loc_6A00
.text:0000000000006A96                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000006A9A                 jnz     loc_6A00
.text:0000000000006AA0                 cmp     byte ptr [rax+5], 0
.text:0000000000006AA4                 jnz     loc_6A00
.text:0000000000006AAA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000006AAE                 lea     rax, unk_C124
.text:0000000000006AB5                 lea     rdx, unk_C128
.text:0000000000006ABC                 cmovnz  rax, rdx
.text:0000000000006AC0                 add     rsp, 8
.text:0000000000006AC4                 pop     rbx
.text:0000000000006AC5                 pop     rbp
.text:0000000000006AC6                 retn
.text:0000000000006AC6 ; } // starts at 69E0
.text:0000000000006AC6 gettext_quote   endp
.text:0000000000006AC6
.text:0000000000006AC6 ; ---------------------------------------------------------------------------
.text:0000000000006AC7                 align 10h
.text:0000000000006AD0
.text:0000000000006AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AD0
.text:0000000000006AD0 ; Attributes: info_from_lumina
.text:0000000000006AD0
.text:0000000000006AD0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000006AD0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000006AD0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000006AD0
.text:0000000000006AD0 var_E0          = dword ptr -0E0h
.text:0000000000006AD0 var_DB          = byte ptr -0DBh
.text:0000000000006AD0 var_DA          = byte ptr -0DAh
.text:0000000000006AD0 var_D9          = byte ptr -0D9h
.text:0000000000006AD0 s               = qword ptr -0D8h
.text:0000000000006AD0 n               = qword ptr -0D0h
.text:0000000000006AD0 var_C8          = qword ptr -0C8h
.text:0000000000006AD0 ps              = qword ptr -0C0h
.text:0000000000006AD0 var_B8          = qword ptr -0B8h
.text:0000000000006AD0 var_B0          = qword ptr -0B0h
.text:0000000000006AD0 var_A8          = qword ptr -0A8h
.text:0000000000006AD0 s2              = qword ptr -0A0h
.text:0000000000006AD0 var_98          = qword ptr -98h
.text:0000000000006AD0 var_90          = qword ptr -90h
.text:0000000000006AD0 var_88          = qword ptr -88h
.text:0000000000006AD0 var_80          = qword ptr -80h
.text:0000000000006AD0 var_78          = qword ptr -78h
.text:0000000000006AD0 var_70          = dword ptr -70h
.text:0000000000006AD0 var_6C          = byte ptr -6Ch
.text:0000000000006AD0 var_6B          = byte ptr -6Bh
.text:0000000000006AD0 var_6A          = byte ptr -6Ah
.text:0000000000006AD0 var_69          = byte ptr -69h
.text:0000000000006AD0 var_68          = qword ptr -68h
.text:0000000000006AD0 var_60          = qword ptr -60h
.text:0000000000006AD0 wc              = dword ptr -4Ch
.text:0000000000006AD0 var_48          = qword ptr -48h
.text:0000000000006AD0 var_40          = qword ptr -40h
.text:0000000000006AD0 arg_0           = qword ptr  8
.text:0000000000006AD0 arg_8           = qword ptr  10h
.text:0000000000006AD0 arg_10          = qword ptr  18h
.text:0000000000006AD0
.text:0000000000006AD0 ; __unwind {
.text:0000000000006AD0                 push    r15
.text:0000000000006AD2                 push    r14
.text:0000000000006AD4                 mov     r15d, r8d
.text:0000000000006AD7                 push    r13
.text:0000000000006AD9                 push    r12
.text:0000000000006ADB                 mov     r14, rdi
.text:0000000000006ADE                 push    rbp
.text:0000000000006ADF                 push    rbx
.text:0000000000006AE0                 mov     ebx, r9d
.text:0000000000006AE3                 mov     r13, rsi
.text:0000000000006AE6                 mov     rbp, rcx
.text:0000000000006AE9                 and     ebx, 2
.text:0000000000006AEC                 sub     rsp, 0B8h
.text:0000000000006AF3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000006AFB                 mov     [rsp+0E8h+s], rdx
.text:0000000000006B00                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000006B05                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000006B0A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000006B0F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000006B17                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006B1C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000006B24                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006B29                 mov     rax, fs:28h
.text:0000000000006B32                 mov     [rsp+0E8h+var_40], rax
.text:0000000000006B3A                 xor     eax, eax
.text:0000000000006B3C                 call    ___ctype_get_mb_cur_max
.text:0000000000006B41                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000006B45                 mov     [rsp+0E8h+var_90], rax
.text:0000000000006B4A                 ja      def_6B61        ; jumptable 00000000000121F1 default case
.text:0000000000006B50                 lea     rcx, jpt_6B61
.text:0000000000006B57                 mov     edx, r15d
.text:0000000000006B5A                 movsxd  rax, ds:(jpt_6B61 - 0C1A0h)[rcx+rdx*4]
.text:0000000000006B5E                 add     rax, rcx
.text:0000000000006B61                 jmp     rax             ; switch jump
.text:0000000000006B63 ; ---------------------------------------------------------------------------
.text:0000000000006B63
.text:0000000000006B63 loc_6B63:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006B63                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000006B63                                         ; DATA XREF: ...
.text:0000000000006B63                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000006B68                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B6D                 xor     r12d, r12d
.text:0000000000006B70                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B79                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006B7E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006B83
.text:0000000000006B83 loc_6B83:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000006B83                 lea     rax, asc_C135   ; "'"
.text:0000000000006B8A                 mov     [rsp+0E8h+n], 1
.text:0000000000006B93                 xor     r15d, r15d
.text:0000000000006B96                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006B9E                 mov     [rsp+0E8h+s2], rax
.text:0000000000006BA3
.text:0000000000006BA3 loc_6BA3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000006BA3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000006BA3                 xor     r11d, r11d
.text:0000000000006BA6                 mov     rax, rbp
.text:0000000000006BA9                 mov     r8d, r12d
.text:0000000000006BAC                 mov     rbp, r11
.text:0000000000006BAF                 mov     r11, rax
.text:0000000000006BB2                 nop     word ptr [rax+rax+00h]
.text:0000000000006BB8
.text:0000000000006BB8 loc_6BB8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000006BB8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000006BB8                 cmp     r11, rbp
.text:0000000000006BBB                 setnz   r12b
.text:0000000000006BBF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006BC3                 jnz     short loc_6BD2
.text:0000000000006BC5                 mov     rax, [rsp+0E8h+s]
.text:0000000000006BCA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000006BCE                 setnz   r12b
.text:0000000000006BD2
.text:0000000000006BD2 loc_6BD2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000006BD2                 test    r12b, r12b
.text:0000000000006BD5                 jz      loc_7230
.text:0000000000006BDB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006BE0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000006BE5                 lea     r9, [rdi+rbp]
.text:0000000000006BE9                 setnz   al
.text:0000000000006BEC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000006BF0                 mov     r10d, eax
.text:0000000000006BF3                 jz      loc_6CA0
.text:0000000000006BF9                 mov     rax, [rsp+0E8h+n]
.text:0000000000006BFE                 test    rax, rax
.text:0000000000006C01                 jz      loc_7030
.text:0000000000006C07                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006C0B                 lea     rbx, [rbp+rax+0]
.text:0000000000006C10                 jnz     short loc_6C40
.text:0000000000006C12                 cmp     rax, 1
.text:0000000000006C16                 jbe     short loc_6C40
.text:0000000000006C18                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000006C1D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000006C22                 mov     [rsp+0E8h+ps], r9
.text:0000000000006C27                 call    _strlen
.text:0000000000006C2C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006C32                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000006C38                 mov     r11, rax
.text:0000000000006C3B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000006C40
.text:0000000000006C40 loc_6C40:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000006C40                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000006C40                 cmp     rbx, r11
.text:0000000000006C43                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006C48                 ja      loc_7200
.text:0000000000006C4E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000006C53                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000006C58                 mov     rdi, r9         ; s1
.text:0000000000006C5B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000006C60                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000006C65                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000006C6A                 call    _memcmp
.text:0000000000006C6F                 test    eax, eax
.text:0000000000006C71                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006C76                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000006C7C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000006C81                 jnz     loc_7200
.text:0000000000006C87                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006C8C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006C92                 jnz     loc_7C15
.text:0000000000006C98                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006CA0
.text:0000000000006CA0 loc_6CA0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000006CA0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000006CA0                 movzx   ebx, byte ptr [r9]
.text:0000000000006CA4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006CA7                 ja      def_6CBE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000006CAD                 lea     rcx, jpt_6CBE
.text:0000000000006CB4                 movzx   edx, bl
.text:0000000000006CB7                 movsxd  rax, ds:(jpt_6CBE - 0C1CCh)[rcx+rdx*4]
.text:0000000000006CBB                 add     rax, rcx
.text:0000000000006CBE                 jmp     rax             ; switch jump
.text:0000000000006CC0 ; ---------------------------------------------------------------------------
.text:0000000000006CC0
.text:0000000000006CC0 loc_6CC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006CC0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000006CC0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000006CC3
.text:0000000000006CC3 loc_6CC3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006CC3                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006CC3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000006CC7                 setnz   al
.text:0000000000006CCA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000006CCE                 jnz     short loc_6CDC
.text:0000000000006CD0                 mov     rax, [rsp+0E8h+s]
.text:0000000000006CD5                 cmp     byte ptr [rax+1], 0
.text:0000000000006CD9                 setnz   al
.text:0000000000006CDC
.text:0000000000006CDC loc_6CDC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000006CDC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006CE1                 setz    dl
.text:0000000000006CE4                 test    al, al
.text:0000000000006CE6                 jz      loc_6F38
.text:0000000000006CEC
.text:0000000000006CEC loc_6CEC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000006CEC                 xor     r12d, r12d
.text:0000000000006CEF                 xor     eax, eax
.text:0000000000006CF1                 nop     dword ptr [rax+00000000h]
.text:0000000000006CF8
.text:0000000000006CF8 loc_6CF8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000006CF8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000006CF8                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000006CFD                 jnz     loc_6E12
.text:0000000000006D03                 test    dl, dl
.text:0000000000006D05                 jnz     loc_6E12
.text:0000000000006D0B
.text:0000000000006D0B loc_6D0B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000006D0B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000006D10                 test    rsi, rsi
.text:0000000000006D13                 jz      short loc_6D29
.text:0000000000006D15                 mov     edx, ebx
.text:0000000000006D17                 shr     dl, 5
.text:0000000000006D1A                 movzx   edx, dl
.text:0000000000006D1D                 mov     edx, [rsi+rdx*4]
.text:0000000000006D20                 bt      edx, ebx
.text:0000000000006D23                 jb      loc_6E73
.text:0000000000006D29
.text:0000000000006D29 loc_6D29:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000006D29                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000006D29                 test    r10b, r10b
.text:0000000000006D2C                 jnz     loc_6E73
.text:0000000000006D32                 xor     eax, 1
.text:0000000000006D35                 add     rbp, 1
.text:0000000000006D39                 and     eax, r8d
.text:0000000000006D3C
.text:0000000000006D3C loc_6D3C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000006D3C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000006D3C                 test    al, al
.text:0000000000006D3E                 jz      short loc_6D60
.text:0000000000006D40                 cmp     r13, r15
.text:0000000000006D43                 jbe     short loc_6D4A
.text:0000000000006D45                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006D4A
.text:0000000000006D4A loc_6D4A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000006D4A                 lea     rax, [r15+1]
.text:0000000000006D4E                 cmp     r13, rax
.text:0000000000006D51                 jbe     short loc_6D59
.text:0000000000006D53                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000006D59
.text:0000000000006D59 loc_6D59:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000006D59                 add     r15, 2
.text:0000000000006D5D                 xor     r8d, r8d
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000006D60                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000006D60                 cmp     r15, r13
.text:0000000000006D63                 jnb     short loc_6D69
.text:0000000000006D65                 mov     [r14+r15], bl
.text:0000000000006D69
.text:0000000000006D69 loc_6D69:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000006D69                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000006D6E                 add     r15, 1
.text:0000000000006D72                 mov     eax, 0
.text:0000000000006D77                 test    r12b, r12b
.text:0000000000006D7A                 cmovz   edi, eax
.text:0000000000006D7D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000006D82                 jmp     loc_6BB8
.text:0000000000006D82 ; ---------------------------------------------------------------------------
.text:0000000000006D87                 align 10h
.text:0000000000006D90
.text:0000000000006D90 loc_6D90:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006D90                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000006D90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000006D93
.text:0000000000006D93 loc_6D93:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006D93                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006D93                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000006D97                 cmp     eax, 2
.text:0000000000006D9A                 jz      loc_7358
.text:0000000000006DA0                 cmp     eax, 5
.text:0000000000006DA3                 jz      loc_7318
.text:0000000000006DA9                 cmp     eax, 2
.text:0000000000006DAC                 mov     ebx, 3Fh ; '?'
.text:0000000000006DB1                 setz    dl
.text:0000000000006DB4                 xor     r12d, r12d
.text:0000000000006DB7                 xor     eax, eax
.text:0000000000006DB9                 jmp     loc_6CF8
.text:0000000000006DB9 ; ---------------------------------------------------------------------------
.text:0000000000006DBE                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006DC0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000006DC0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000006DC3
.text:0000000000006DC3 loc_6DC3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006DC3                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006DC3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000006DC8                 jz      loc_72D0
.text:0000000000006DCE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000006DD3                 xor     edx, edx
.text:0000000000006DD5                 xor     eax, eax
.text:0000000000006DD7                 mov     ebx, 27h ; '''
.text:0000000000006DDC                 jmp     loc_6CF8
.text:0000000000006DDC ; ---------------------------------------------------------------------------
.text:0000000000006DE1                 align 8
.text:0000000000006DE8
.text:0000000000006DE8 loc_6DE8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006DE8                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006DE8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000006DED                 mov     ebx, 74h ; 't'
.text:0000000000006DF2
.text:0000000000006DF2 loc_6DF2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000006DF2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000006DF2                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006DF7                 setz    al
.text:0000000000006DFA                 and     al, [rsp+0E8h+var_D9]
.text:0000000000006DFE                 jnz     loc_6F4E
.text:0000000000006E04
.text:0000000000006E04 loc_6E04:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000006E04                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000006E04                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006E09                 jnz     short loc_6E70
.text:0000000000006E0B
.text:0000000000006E0B loc_6E0B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000006E0B                 mov     ebx, edx
.text:0000000000006E0D                 xor     r12d, r12d
.text:0000000000006E10                 xor     eax, eax
.text:0000000000006E12
.text:0000000000006E12 loc_6E12:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000006E12                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000006E12                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006E17                 jnz     loc_6D0B
.text:0000000000006E1D                 jmp     loc_6D29
.text:0000000000006E1D ; ---------------------------------------------------------------------------
.text:0000000000006E22                 align 8
.text:0000000000006E28
.text:0000000000006E28 loc_6E28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006E28                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006E28                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000006E2D                 mov     ebx, 62h ; 'b'
.text:0000000000006E32                 jmp     short loc_6E04
.text:0000000000006E32 ; ---------------------------------------------------------------------------
.text:0000000000006E34                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006E38                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006E38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000006E3D                 jz      loc_7210
.text:0000000000006E43                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006E48                 jz      loc_7060
.text:0000000000006E4E
.text:0000000000006E4E loc_6E4E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000006E4E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006E53                 jz      loc_7060
.text:0000000000006E59                 cmp     [rsp+0E8h+n], 0
.text:0000000000006E5F                 jnz     loc_721B
.text:0000000000006E65                 mov     ebx, 5Ch ; '\'
.text:0000000000006E6A                 nop     word ptr [rax+rax+00h]
.text:0000000000006E70
.text:0000000000006E70 loc_6E70:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000006E70                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000006E70                 xor     r12d, r12d
.text:0000000000006E73
.text:0000000000006E73 loc_6E73:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000006E73                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000006E73                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006E78                 setz    dl
.text:0000000000006E7B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006E80                 mov     eax, edx
.text:0000000000006E82                 jnz     loc_76D8
.text:0000000000006E88                 mov     eax, r8d
.text:0000000000006E8B                 xor     eax, 1
.text:0000000000006E8E                 and     al, dl
.text:0000000000006E90                 jz      short loc_6EC1
.text:0000000000006E92                 cmp     r13, r15
.text:0000000000006E95                 jbe     short loc_6E9C
.text:0000000000006E97                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006E9C
.text:0000000000006E9C loc_6E9C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000006E9C                 lea     rdx, [r15+1]
.text:0000000000006EA0                 cmp     r13, rdx
.text:0000000000006EA3                 jbe     short loc_6EAB
.text:0000000000006EA5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000006EAB
.text:0000000000006EAB loc_6EAB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000006EAB                 lea     rdx, [r15+2]
.text:0000000000006EAF                 cmp     r13, rdx
.text:0000000000006EB2                 jbe     short loc_6EBA
.text:0000000000006EB4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006EBA
.text:0000000000006EBA loc_6EBA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000006EBA                 add     r15, 3
.text:0000000000006EBE                 mov     r8d, eax
.text:0000000000006EC1
.text:0000000000006EC1 loc_6EC1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000006EC1                 cmp     r13, r15
.text:0000000000006EC4                 jbe     short loc_6ECB
.text:0000000000006EC6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006ECB
.text:0000000000006ECB loc_6ECB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000006ECB                 add     r15, 1
.text:0000000000006ECF                 add     rbp, 1
.text:0000000000006ED3                 jmp     loc_6D60
.text:0000000000006ED3 ; ---------------------------------------------------------------------------
.text:0000000000006ED8                 align 20h
.text:0000000000006EE0
.text:0000000000006EE0 loc_6EE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006EE0                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006EE0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000006EE5                 jnz     loc_70B3
.text:0000000000006EEB                 xor     edx, edx
.text:0000000000006EED                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000006EF2                 jz      loc_6E0B
.text:0000000000006EF8                 add     rbp, 1
.text:0000000000006EFC                 jmp     loc_6BB8
.text:0000000000006EFC ; ---------------------------------------------------------------------------
.text:0000000000006F01                 align 8
.text:0000000000006F08
.text:0000000000006F08 loc_6F08:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F08                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F08                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000006F0D                 setz    dl
.text:0000000000006F10                 xor     eax, eax
.text:0000000000006F12                 jmp     loc_6CF8
.text:0000000000006F12 ; ---------------------------------------------------------------------------
.text:0000000000006F17                 align 20h
.text:0000000000006F20
.text:0000000000006F20 loc_6F20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F20                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F20                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000006F25                 mov     ebx, 61h ; 'a'
.text:0000000000006F2A                 jmp     loc_6E04
.text:0000000000006F2A ; ---------------------------------------------------------------------------
.text:0000000000006F2F                 align 10h
.text:0000000000006F30
.text:0000000000006F30 loc_6F30:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F30                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F30                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000006F35                 setz    dl
.text:0000000000006F38
.text:0000000000006F38 loc_6F38:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000006F38                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000006F38                 test    rbp, rbp
.text:0000000000006F3B                 jnz     loc_6CEC
.text:0000000000006F41
.text:0000000000006F41 loc_6F41:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000006F41                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000006F41                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006F46                 and     al, dl
.text:0000000000006F48                 jz      loc_6CF8
.text:0000000000006F4E
.text:0000000000006F4E loc_6F4E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000006F4E                 mov     rbp, r11
.text:0000000000006F51                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006F59                 jmp     loc_7659
.text:0000000000006F59 ; ---------------------------------------------------------------------------
.text:0000000000006F5E                 align 20h
.text:0000000000006F60
.text:0000000000006F60 loc_6F60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F60                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F60                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000006F65                 setz    dl
.text:0000000000006F68                 xor     r12d, r12d
.text:0000000000006F6B                 jmp     short loc_6F41
.text:0000000000006F6B ; ---------------------------------------------------------------------------
.text:0000000000006F6D                 align 10h
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F70                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000006F75                 mov     ebx, 20h ; ' '
.text:0000000000006F7A                 setz    dl
.text:0000000000006F7D                 jmp     short loc_6F41
.text:0000000000006F7D ; ---------------------------------------------------------------------------
.text:0000000000006F7F                 align 20h
.text:0000000000006F80
.text:0000000000006F80 loc_6F80:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F80                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F80                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000006F85                 mov     ebx, 72h ; 'r'
.text:0000000000006F8A                 jmp     loc_6DF2
.text:0000000000006F8A ; ---------------------------------------------------------------------------
.text:0000000000006F8F                 align 10h
.text:0000000000006F90
.text:0000000000006F90 loc_6F90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006F90                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006F90                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000006F95                 mov     ebx, 66h ; 'f'
.text:0000000000006F9A                 jmp     loc_6E04
.text:0000000000006F9A ; ---------------------------------------------------------------------------
.text:0000000000006F9F                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 loc_6FA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006FA0                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006FA0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000006FA5                 mov     ebx, 76h ; 'v'
.text:0000000000006FAA                 jmp     loc_6E04
.text:0000000000006FAA ; ---------------------------------------------------------------------------
.text:0000000000006FAF                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 loc_6FB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006FB0                                         ; DATA XREF: .rodata:jpt_6CBE↓o
.text:0000000000006FB0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000006FB5                 mov     ebx, 6Eh ; 'n'
.text:0000000000006FBA                 jmp     loc_6DF2
.text:0000000000006FBA ; ---------------------------------------------------------------------------
.text:0000000000006FBF                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 def_704A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000006FC0                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000006FC0                                         ; DATA XREF: ...
.text:0000000000006FC0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006FC3                 nop     dword ptr [rax+rax+00h]
.text:0000000000006FC8
.text:0000000000006FC8 def_6CBE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000006FC8                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000006FC8                                         ; DATA XREF: ...
.text:0000000000006FC8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000006FCE                 jnz     loc_7378
.text:0000000000006FD4                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000006FD9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000006FDE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006FE3                 call    ___ctype_b_loc
.text:0000000000006FE8                 mov     rcx, [rax]
.text:0000000000006FEB                 movzx   edx, bl
.text:0000000000006FEE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006FF4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000006FFA                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000006FFF                 mov     edi, 1
.text:0000000000007004                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000007008                 and     ax, 4000h
.text:000000000000700C                 setnz   r12b
.text:0000000000007010                 setz    al
.text:0000000000007013                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007017
.text:0000000000007017 loc_7017:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000007017                 test    al, al
.text:0000000000007019                 jnz     loc_79B1
.text:000000000000701F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007024                 setz    dl
.text:0000000000007027                 jmp     loc_6CF8
.text:0000000000007027 ; ---------------------------------------------------------------------------
.text:000000000000702C                 align 10h
.text:0000000000007030
.text:0000000000007030 loc_7030:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000007030                 movzx   ebx, byte ptr [r9]
.text:0000000000007034                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007037                 ja      short def_704A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000007039                 lea     rcx, jpt_704A
.text:0000000000007040                 movzx   edx, bl
.text:0000000000007043                 movsxd  rax, ds:(jpt_704A - 0C3C8h)[rcx+rdx*4]
.text:0000000000007047                 add     rax, rcx
.text:000000000000704A                 jmp     rax             ; switch jump
.text:000000000000704A ; ---------------------------------------------------------------------------
.text:000000000000704C                 align 10h
.text:0000000000007050
.text:0000000000007050 loc_7050:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007050                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007050                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000007053                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007058                 jnz     loc_6E4E
.text:000000000000705E                 xchg    ax, ax
.text:0000000000007060
.text:0000000000007060 loc_7060:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000007060                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000007060                 mov     edx, 5Ch ; '\'
.text:0000000000007065                 mov     ebx, 5Ch ; '\'
.text:000000000000706A                 jmp     loc_6E04
.text:000000000000706A ; ---------------------------------------------------------------------------
.text:000000000000706F                 align 10h
.text:0000000000007070
.text:0000000000007070 loc_7070:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007070                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007070                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000007075                 xor     r10d, r10d
.text:0000000000007078                 mov     ebx, 66h ; 'f'
.text:000000000000707D                 jmp     loc_6E04
.text:000000000000707D ; ---------------------------------------------------------------------------
.text:0000000000007082                 align 8
.text:0000000000007088
.text:0000000000007088 loc_7088:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007088                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007088                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000708D                 xor     r10d, r10d
.text:0000000000007090                 mov     ebx, 6Eh ; 'n'
.text:0000000000007095                 jmp     loc_6DF2
.text:0000000000007095 ; ---------------------------------------------------------------------------
.text:000000000000709A                 align 20h
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000070A0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000070A0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000070A5                 jmp     loc_6E70
.text:00000000000070A5 ; ---------------------------------------------------------------------------
.text:00000000000070AA                 align 10h
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000070B0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000070B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000070B3
.text:00000000000070B3 loc_70B3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000070B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000070B8                 setz    dl
.text:00000000000070BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000070C0                 jnz     loc_7C5A
.text:00000000000070C6                 mov     eax, r8d
.text:00000000000070C9                 mov     rcx, r15
.text:00000000000070CC                 xor     eax, 1
.text:00000000000070CF                 and     al, dl
.text:00000000000070D1                 jz      short loc_7100
.text:00000000000070D3                 cmp     r13, r15
.text:00000000000070D6                 jbe     short loc_70DD
.text:00000000000070D8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000070DD
.text:00000000000070DD loc_70DD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000070DD                 lea     rcx, [r15+1]
.text:00000000000070E1                 cmp     r13, rcx
.text:00000000000070E4                 jbe     short loc_70EC
.text:00000000000070E6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000070EC
.text:00000000000070EC loc_70EC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000070EC                 lea     rcx, [r15+2]
.text:00000000000070F0                 cmp     r13, rcx
.text:00000000000070F3                 ja      loc_7729
.text:00000000000070F9
.text:00000000000070F9 loc_70F9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000070F9                 lea     rcx, [r15+3]
.text:00000000000070FD                 mov     r8d, eax
.text:0000000000007100
.text:0000000000007100 loc_7100:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000007100                 cmp     r13, rcx
.text:0000000000007103                 jbe     short loc_710A
.text:0000000000007105                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000710A
.text:000000000000710A loc_710A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000710A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000710F                 lea     r15, [rcx+1]
.text:0000000000007113                 jz      loc_7719
.text:0000000000007119                 lea     rax, [rbp+1]
.text:000000000000711D                 cmp     rax, r11
.text:0000000000007120                 jnb     short loc_713B
.text:0000000000007122                 mov     rax, [rsp+0E8h+s]
.text:0000000000007127                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000712C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000007130                 sub     eax, 30h ; '0'
.text:0000000000007133                 cmp     al, 9
.text:0000000000007135                 jbe     loc_7969
.text:000000000000713B
.text:000000000000713B loc_713B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000713B                 mov     eax, r12d
.text:000000000000713E                 mov     ebx, 30h ; '0'
.text:0000000000007143                 xor     r12d, r12d
.text:0000000000007146                 jmp     loc_6CF8
.text:0000000000007146 ; ---------------------------------------------------------------------------
.text:000000000000714B                 align 10h
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007150                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007150                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000007155                 mov     r12d, r10d
.text:0000000000007158                 setz    dl
.text:000000000000715B                 xor     r10d, r10d
.text:000000000000715E                 xor     eax, eax
.text:0000000000007160                 jmp     loc_6CF8
.text:0000000000007160 ; ---------------------------------------------------------------------------
.text:0000000000007165                 align 8
.text:0000000000007168
.text:0000000000007168 loc_7168:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007168                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007168                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000716D                 setz    dl
.text:0000000000007170                 xor     r10d, r10d
.text:0000000000007173                 jmp     loc_6F38
.text:0000000000007173 ; ---------------------------------------------------------------------------
.text:0000000000007178                 align 20h
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007180                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007180                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000007185                 setz    dl
.text:0000000000007188                 xor     r10d, r10d
.text:000000000000718B                 xor     r12d, r12d
.text:000000000000718E                 jmp     loc_6F41
.text:000000000000718E ; ---------------------------------------------------------------------------
.text:0000000000007193                 align 8
.text:0000000000007198
.text:0000000000007198 loc_7198:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000007198                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:0000000000007198                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000719D                 mov     r12d, r10d
.text:00000000000071A0                 mov     ebx, 20h ; ' '
.text:00000000000071A5                 setz    dl
.text:00000000000071A8                 xor     r10d, r10d
.text:00000000000071AB                 jmp     loc_6F41
.text:00000000000071B0 ; ---------------------------------------------------------------------------
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000071B0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000071B0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000071B5                 xor     r10d, r10d
.text:00000000000071B8                 mov     ebx, 72h ; 'r'
.text:00000000000071BD                 jmp     loc_6DF2
.text:00000000000071BD ; ---------------------------------------------------------------------------
.text:00000000000071C2                 align 8
.text:00000000000071C8
.text:00000000000071C8 loc_71C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000071C8                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000071C8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000071CD                 jmp     loc_6E70
.text:00000000000071CD ; ---------------------------------------------------------------------------
.text:00000000000071D2                 align 8
.text:00000000000071D8
.text:00000000000071D8 loc_71D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000071D8                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000071D8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000071DD                 xor     r10d, r10d
.text:00000000000071E0                 mov     ebx, 74h ; 't'
.text:00000000000071E5                 jmp     loc_6DF2
.text:00000000000071E5 ; ---------------------------------------------------------------------------
.text:00000000000071EA                 align 10h
.text:00000000000071F0
.text:00000000000071F0 loc_71F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000071F0                                         ; DATA XREF: .rodata:jpt_704A↓o
.text:00000000000071F0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000071F5                 jmp     loc_6E70
.text:00000000000071F5 ; ---------------------------------------------------------------------------
.text:00000000000071FA                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000007200                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000007200                 xor     r10d, r10d
.text:0000000000007203                 jmp     loc_6CA0
.text:0000000000007203 ; ---------------------------------------------------------------------------
.text:0000000000007208                 align 10h
.text:0000000000007210
.text:0000000000007210 loc_7210:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000007210                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007215                 jnz     loc_7B80
.text:000000000000721B
.text:000000000000721B loc_721B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000721B                 add     rbp, 1
.text:000000000000721F                 mov     eax, r8d
.text:0000000000007222                 xor     r12d, r12d
.text:0000000000007225                 mov     ebx, 5Ch ; '\'
.text:000000000000722A                 jmp     loc_6D3C
.text:000000000000722A ; ---------------------------------------------------------------------------
.text:000000000000722F                 align 10h
.text:0000000000007230
.text:0000000000007230 loc_7230:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000007230                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007235                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000723A                 mov     r12d, r8d
.text:000000000000723D                 mov     rbp, r11
.text:0000000000007240                 setz    dl
.text:0000000000007243                 mov     eax, ebx
.text:0000000000007245                 test    r15, r15
.text:0000000000007248                 setz    cl
.text:000000000000724B                 and     eax, edx
.text:000000000000724D                 and     al, cl
.text:000000000000724F                 jnz     loc_7CB6
.text:0000000000007255                 mov     eax, ebx
.text:0000000000007257                 xor     eax, 1
.text:000000000000725A                 and     dl, al
.text:000000000000725C                 jz      loc_7BCC
.text:0000000000007262                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000007267                 jz      loc_7BCA
.text:000000000000726D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000007272                 jnz     loc_7C6D
.text:0000000000007278                 test    r13, r13
.text:000000000000727B                 setz    al
.text:000000000000727E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000007284                 setnz   dl
.text:0000000000007287                 and     al, dl
.text:0000000000007289                 jz      loc_7CAC
.text:000000000000728F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000007294
.text:0000000000007294 loc_7294:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000007294                 lea     rbx, asc_C135   ; "'"
.text:000000000000729B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000729F                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000072A7                 mov     r15d, 1
.text:00000000000072AD                 mov     [rsp+0E8h+n], 1
.text:00000000000072B6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000072BB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000072C0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000072C4                 jmp     loc_6BA3
.text:00000000000072C4 ; ---------------------------------------------------------------------------
.text:00000000000072C9                 align 10h
.text:00000000000072D0
.text:00000000000072D0 loc_72D0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000072D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000072D5                 jnz     loc_7B80
.text:00000000000072DB                 test    r13, r13
.text:00000000000072DE                 jz      loc_76E0
.text:00000000000072E4                 xor     edx, edx
.text:00000000000072E6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000072EC                 jnz     loc_76E0
.text:00000000000072F2
.text:00000000000072F2 loc_72F2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000072F2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000072F2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000072F7                 add     r15, 3
.text:00000000000072FB                 xor     eax, eax
.text:00000000000072FD                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007302                 xor     r8d, r8d
.text:0000000000007305                 mov     r13, rdx
.text:0000000000007308                 mov     ebx, 27h ; '''
.text:000000000000730D                 jmp     loc_6D29
.text:000000000000730D ; ---------------------------------------------------------------------------
.text:0000000000007312                 align 8
.text:0000000000007318
.text:0000000000007318 loc_7318:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000007318                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000731D                 jz      short loc_7340
.text:000000000000731F                 lea     rcx, [rbp+2]
.text:0000000000007323                 cmp     rcx, r11
.text:0000000000007326                 jnb     short loc_7340
.text:0000000000007328                 mov     rax, [rsp+0E8h+s]
.text:000000000000732D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000007332                 jz      loc_7AC2
.text:0000000000007338                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007340
.text:0000000000007340 loc_7340:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000007340                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000007340                 xor     edx, edx
.text:0000000000007342                 xor     r12d, r12d
.text:0000000000007345                 xor     eax, eax
.text:0000000000007347                 mov     ebx, 3Fh ; '?'
.text:000000000000734C                 jmp     loc_6CF8
.text:000000000000734C ; ---------------------------------------------------------------------------
.text:0000000000007351                 align 8
.text:0000000000007358
.text:0000000000007358 loc_7358:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000007358                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000735D                 jnz     loc_7B80
.text:0000000000007363                 xor     r12d, r12d
.text:0000000000007366                 xor     eax, eax
.text:0000000000007368                 mov     ebx, 3Fh ; '?'
.text:000000000000736D                 jmp     loc_6D29
.text:000000000000736D ; ---------------------------------------------------------------------------
.text:0000000000007372                 align 8
.text:0000000000007378
.text:0000000000007378 loc_7378:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000007378                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000007380                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007384                 mov     [rsp+0E8h+var_48], 0
.text:0000000000007390                 mov     [rsp+0E8h+ps], rax
.text:0000000000007395                 jnz     short loc_73C4
.text:0000000000007397                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000739C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000073A1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000073A6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000073AB                 call    _strlen
.text:00000000000073B0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000073B6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000073BC                 mov     r11, rax
.text:00000000000073BF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000073C4
.text:00000000000073C4 loc_73C4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000073C4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000073CC                 xor     ecx, ecx
.text:00000000000073CE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000073D2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000073D7                 mov     rbx, rcx
.text:00000000000073DA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000073E2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000073E7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000073EC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000073F4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000073F9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000073FE                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000007403
.text:0000000000007403 loc_7403:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000007403                 mov     rax, [rsp+0E8h+s]
.text:0000000000007408                 lea     r14, [rbp+rbx+0]
.text:000000000000740D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000007412                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000007417                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000741C                 lea     r13, [rax+r14]
.text:0000000000007420                 sub     rdx, r14
.text:0000000000007423                 mov     rsi, r13
.text:0000000000007426                 call    rpl_mbrtowc
.text:000000000000742B                 test    rax, rax
.text:000000000000742E                 mov     r15, rax
.text:0000000000007431                 jz      short loc_7481
.text:0000000000007433                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007437                 jz      loc_7A55
.text:000000000000743D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000007441                 jz      loc_79E1
.text:0000000000007447                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000744C                 setz    al
.text:000000000000744F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000007453                 jnz     loc_75F0
.text:0000000000007459
.text:0000000000007459 loc_7459:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000007459                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000007459                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000007460                 call    _iswprint
.text:0000000000007465                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000746A                 test    eax, eax
.text:000000000000746C                 mov     eax, 0
.text:0000000000007471                 cmovz   r12d, eax
.text:0000000000007475                 add     rbx, r15
.text:0000000000007478                 call    _mbsinit
.text:000000000000747D                 test    eax, eax
.text:000000000000747F                 jz      short loc_7403
.text:0000000000007481
.text:0000000000007481 loc_7481:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000007481                 mov     edx, r12d
.text:0000000000007484                 mov     rdi, rbx
.text:0000000000007487                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000748D                 xor     edx, 1
.text:0000000000007490                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007495                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000749B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000749F                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000074A7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000074AC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000074B1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000074B6
.text:00000000000074B6 loc_74B6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000074B6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000074B6                 cmp     rdi, 1
.text:00000000000074BA                 jbe     loc_7ABB
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000074C0                 mov     rcx, rdi
.text:00000000000074C3                 xor     esi, esi
.text:00000000000074C5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000074CB                 add     rcx, rbp
.text:00000000000074CE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000074D3                 jmp     loc_758E
.text:00000000000074D3 ; ---------------------------------------------------------------------------
.text:00000000000074D8                 align 20h
.text:00000000000074E0
.text:00000000000074E0 loc_74E0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000074E0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000074E5                 setz    al
.text:00000000000074E8                 test    r9b, r9b
.text:00000000000074EB                 jnz     loc_79A0
.text:00000000000074F1                 mov     esi, r8d
.text:00000000000074F4                 xor     esi, 1
.text:00000000000074F7                 and     al, sil
.text:00000000000074FA                 jz      short loc_752B
.text:00000000000074FC                 cmp     r13, r15
.text:00000000000074FF                 jbe     short loc_7506
.text:0000000000007501                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007506
.text:0000000000007506 loc_7506:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000007506                 lea     rsi, [r15+1]
.text:000000000000750A                 cmp     r13, rsi
.text:000000000000750D                 jbe     short loc_7515
.text:000000000000750F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007515
.text:0000000000007515 loc_7515:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000007515                 lea     rsi, [r15+2]
.text:0000000000007519                 cmp     r13, rsi
.text:000000000000751C                 jbe     short loc_7524
.text:000000000000751E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007524
.text:0000000000007524 loc_7524:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000007524                 add     r15, 3
.text:0000000000007528                 mov     r8d, eax
.text:000000000000752B
.text:000000000000752B loc_752B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000752B                 cmp     r13, r15
.text:000000000000752E                 jbe     short loc_7535
.text:0000000000007530                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007535
.text:0000000000007535 loc_7535:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000007535                 lea     rax, [r15+1]
.text:0000000000007539                 cmp     r13, rax
.text:000000000000753C                 jbe     short loc_754B
.text:000000000000753E                 mov     eax, ebx
.text:0000000000007540                 shr     al, 6
.text:0000000000007543                 add     eax, 30h ; '0'
.text:0000000000007546                 mov     [r14+r15+1], al
.text:000000000000754B
.text:000000000000754B loc_754B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000754B                 lea     rax, [r15+2]
.text:000000000000754F                 cmp     r13, rax
.text:0000000000007552                 jbe     short loc_7564
.text:0000000000007554                 mov     eax, ebx
.text:0000000000007556                 shr     al, 3
.text:0000000000007559                 and     eax, 7
.text:000000000000755C                 add     eax, 30h ; '0'
.text:000000000000755F                 mov     [r14+r15+2], al
.text:0000000000007564
.text:0000000000007564 loc_7564:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000007564                 and     ebx, 7
.text:0000000000007567                 add     rbp, 1
.text:000000000000756B                 add     r15, 3
.text:000000000000756F                 add     ebx, 30h ; '0'
.text:0000000000007572                 cmp     rbp, rcx
.text:0000000000007575                 jnb     loc_6D60
.text:000000000000757B                 mov     esi, edx
.text:000000000000757D
.text:000000000000757D loc_757D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000757D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000757D                 cmp     r13, r15
.text:0000000000007580                 jbe     short loc_7586
.text:0000000000007582                 mov     [r14+r15], bl
.text:0000000000007586
.text:0000000000007586 loc_7586:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000007586                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000758A                 add     r15, 1
.text:000000000000758E
.text:000000000000758E loc_758E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000758E                 test    dl, dl
.text:0000000000007590                 jnz     loc_74E0
.text:0000000000007596                 mov     eax, esi
.text:0000000000007598                 xor     eax, 1
.text:000000000000759B                 and     eax, r8d
.text:000000000000759E                 test    r10b, r10b
.text:00000000000075A1                 jz      short loc_75B1
.text:00000000000075A3                 cmp     r13, r15
.text:00000000000075A6                 jbe     short loc_75AD
.text:00000000000075A8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000075AD
.text:00000000000075AD loc_75AD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000075AD                 add     r15, 1
.text:00000000000075B1
.text:00000000000075B1 loc_75B1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000075B1                 add     rbp, 1
.text:00000000000075B5                 cmp     rbp, rcx
.text:00000000000075B8                 jnb     loc_6D3C
.text:00000000000075BE                 test    al, al
.text:00000000000075C0                 jz      loc_79BE
.text:00000000000075C6                 cmp     r13, r15
.text:00000000000075C9                 jbe     short loc_75D0
.text:00000000000075CB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000075D0
.text:00000000000075D0 loc_75D0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000075D0                 lea     rax, [r15+1]
.text:00000000000075D4                 cmp     r13, rax
.text:00000000000075D7                 jbe     short loc_75DF
.text:00000000000075D9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000075DF
.text:00000000000075DF loc_75DF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000075DF                 add     r15, 2
.text:00000000000075E3                 xor     r10d, r10d
.text:00000000000075E6                 xor     r8d, r8d
.text:00000000000075E9                 jmp     short loc_757D
.text:00000000000075E9 ; ---------------------------------------------------------------------------
.text:00000000000075EB                 align 10h
.text:00000000000075F0
.text:00000000000075F0 loc_75F0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000075F0                 cmp     r15, 1
.text:00000000000075F4                 jz      loc_7459
.text:00000000000075FA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000075FF                 lea     rcx, [rdi+r15]
.text:0000000000007603                 lea     rdx, [rdi+r14+1]
.text:0000000000007608                 lea     r8, [rcx+r14]
.text:000000000000760C                 jmp     short loc_761D
.text:000000000000760C ; ---------------------------------------------------------------------------
.text:000000000000760E                 align 10h
.text:0000000000007610
.text:0000000000007610 loc_7610:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000007610                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000007610                 add     rdx, 1
.text:0000000000007614                 cmp     r8, rdx
.text:0000000000007617                 jz      loc_7459
.text:000000000000761D
.text:000000000000761D loc_761D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000761D                 movzx   ecx, byte ptr [rdx]
.text:0000000000007620                 sub     ecx, 5Bh ; '['
.text:0000000000007623                 cmp     cl, 21h ; '!'
.text:0000000000007626                 ja      short loc_7610
.text:0000000000007628                 mov     esi, 1
.text:000000000000762D                 shl     rsi, cl
.text:0000000000007630                 mov     rcx, rsi
.text:0000000000007633                 mov     rsi, 20000002Bh
.text:000000000000763D                 test    rcx, rsi
.text:0000000000007640                 jz      short loc_7610
.text:0000000000007642                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007647                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000764C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000007651                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007659
.text:0000000000007659 loc_7659:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000007659                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000007659                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000765E                 jz      short loc_7670
.text:0000000000007660                 test    al, al
.text:0000000000007662                 mov     eax, 4
.text:0000000000007667                 cmovz   eax, [rsp+0E8h+var_E0]
.text:000000000000766C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000007670
.text:0000000000007670 loc_7670:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000007670                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000007670                 sub     rsp, 8
.text:0000000000007674                 mov     rcx, rbp
.text:0000000000007677                 mov     rsi, r13
.text:000000000000767A                 push    [rsp+0F0h+var_88]
.text:000000000000767E                 push    [rsp+0F8h+var_80]
.text:0000000000007682                 mov     rdi, r14
.text:0000000000007685                 push    0
.text:0000000000007687                 mov     r9d, [rsp+108h+var_70]
.text:000000000000768F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000007694                 mov     rdx, [rsp+108h+s]
.text:0000000000007699                 and     r9d, 0FFFFFFFDh
.text:000000000000769D                 call    quotearg_buffer_restyled
.text:00000000000076A2                 add     rsp, 20h
.text:00000000000076A6                 mov     r15, rax
.text:00000000000076A9
.text:00000000000076A9 loc_76A9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000076A9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000076A9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000076B1                 xor     rbx, fs:28h
.text:00000000000076BA                 mov     rax, r15
.text:00000000000076BD                 jnz     loc_7CC3
.text:00000000000076C3                 add     rsp, 0B8h
.text:00000000000076CA                 pop     rbx
.text:00000000000076CB                 pop     rbp
.text:00000000000076CC                 pop     r12
.text:00000000000076CE                 pop     r13
.text:00000000000076D0                 pop     r14
.text:00000000000076D2                 pop     r15
.text:00000000000076D4                 retn
.text:00000000000076D4 ; ---------------------------------------------------------------------------
.text:00000000000076D5                 align 8
.text:00000000000076D8
.text:00000000000076D8 loc_76D8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:00000000000076D8                 mov     rbp, r11
.text:00000000000076DB                 jmp     loc_7659
.text:00000000000076E0 ; ---------------------------------------------------------------------------
.text:00000000000076E0
.text:00000000000076E0 loc_76E0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:00000000000076E0                                         ; quotearg_buffer_restyled+81C↑j
.text:00000000000076E0                 cmp     r13, r15
.text:00000000000076E3                 jbe     short loc_76EA
.text:00000000000076E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000076EA
.text:00000000000076EA loc_76EA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:00000000000076EA                 lea     rax, [r15+1]
.text:00000000000076EE                 cmp     r13, rax
.text:00000000000076F1                 jbe     short loc_76F9
.text:00000000000076F3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:00000000000076F9
.text:00000000000076F9 loc_76F9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:00000000000076F9                 lea     rax, [r15+2]
.text:00000000000076FD                 cmp     r13, rax
.text:0000000000007700                 jbe     loc_7CF2
.text:0000000000007706                 mov     rdx, r13
.text:0000000000007709                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000770F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000007714                 jmp     loc_72F2
.text:0000000000007719 ; ---------------------------------------------------------------------------
.text:0000000000007719
.text:0000000000007719 loc_7719:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000007719                 mov     eax, r12d
.text:000000000000771C                 mov     ebx, 30h ; '0'
.text:0000000000007721                 xor     r12d, r12d
.text:0000000000007724                 jmp     loc_6D29
.text:0000000000007729 ; ---------------------------------------------------------------------------
.text:0000000000007729
.text:0000000000007729 loc_7729:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000007729                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000772F                 jmp     loc_70F9
.text:0000000000007734 ; ---------------------------------------------------------------------------
.text:0000000000007734
.text:0000000000007734 loc_7734:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007734                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:0000000000007734                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000007736                 jnz     loc_6B63        ; jumptable 00000000000121F1 case 1
.text:000000000000773C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007741
.text:0000000000007741 loc_7741:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000007741                 test    r13, r13
.text:0000000000007744                 jnz     loc_7CDA
.text:000000000000774A                 lea     rax, asc_C135   ; "'"
.text:0000000000007751                 mov     [rsp+0E8h+var_98], 0
.text:000000000000775A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000775F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007764                 xor     r12d, r12d
.text:0000000000007767                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000776C                 mov     [rsp+0E8h+n], 1
.text:0000000000007775                 mov     [rsp+0E8h+s2], rax
.text:000000000000777A                 mov     r15d, 1
.text:0000000000007780                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007788                 jmp     loc_6BA3
.text:0000000000007788 ; ---------------------------------------------------------------------------
.text:000000000000778D                 align 10h
.text:0000000000007790
.text:0000000000007790 loc_7790:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007790                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:0000000000007790                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000007792                 jnz     loc_7B8D
.text:0000000000007798                 test    r13, r13
.text:000000000000779B                 jz      loc_79C6
.text:00000000000077A1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000077A5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000077AA                 xor     r12d, r12d
.text:00000000000077AD                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000077B2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000077BB
.text:00000000000077BB loc_77BB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000077BB                 lea     rax, unk_C133
.text:00000000000077C2                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000077C7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000077CC                 mov     [rsp+0E8h+n], 1
.text:00000000000077D5                 mov     r15d, 1
.text:00000000000077DB                 mov     [rsp+0E8h+s2], rax
.text:00000000000077E0                 jmp     loc_6BA3
.text:00000000000077E5 ; ---------------------------------------------------------------------------
.text:00000000000077E5
.text:00000000000077E5 loc_77E5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000077E5                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:00000000000077E5                 lea     rax, unk_C133   ; jumptable 00000000000121F1 case 6
.text:00000000000077EC                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000077F1                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000077F6                 xor     r12d, r12d
.text:00000000000077F9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007802                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007807                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000780C                 mov     [rsp+0E8h+n], 1
.text:0000000000007815                 xor     r15d, r15d
.text:0000000000007818                 mov     [rsp+0E8h+s2], rax
.text:000000000000781D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000007825                 jmp     loc_6BA3
.text:000000000000782A ; ---------------------------------------------------------------------------
.text:000000000000782A
.text:000000000000782A loc_782A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000782A                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:000000000000782A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000782F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007834                 xor     r12d, r12d
.text:0000000000007837                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007840                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007845                 xor     r15d, r15d
.text:0000000000007848                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000784D                 mov     [rsp+0E8h+n], 0
.text:0000000000007856                 mov     [rsp+0E8h+s2], 0
.text:000000000000785F                 jmp     loc_6BA3
.text:0000000000007864 ; ---------------------------------------------------------------------------
.text:0000000000007864
.text:0000000000007864 loc_7864:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007864                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:0000000000007864                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000007869                 jz      short loc_78C1
.text:000000000000786B                 lea     rsi, asc_C137   ; "`"
.text:0000000000007872                 xor     edi, edi        ; domainname
.text:0000000000007874                 mov     edx, 5          ; category
.text:0000000000007879                 call    _dcgettext
.text:000000000000787E                 mov     rcx, rax
.text:0000000000007881                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007886                 lea     rax, asc_C137   ; "`"
.text:000000000000788D                 cmp     rcx, rax
.text:0000000000007890                 jz      loc_7C2E
.text:0000000000007896
.text:0000000000007896 loc_7896:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000007896                 lea     rsi, asc_C135   ; "'"
.text:000000000000789D                 xor     edi, edi        ; domainname
.text:000000000000789F                 mov     edx, 5          ; category
.text:00000000000078A4                 call    _dcgettext
.text:00000000000078A9                 mov     rcx, rax
.text:00000000000078AC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000078B1                 lea     rax, asc_C135   ; "'"
.text:00000000000078B8                 cmp     rcx, rax
.text:00000000000078BB                 jz      loc_7C44
.text:00000000000078C1
.text:00000000000078C1 loc_78C1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:00000000000078C1                                         ; quotearg_buffer_restyled+1185↓j
.text:00000000000078C1                 xor     r15d, r15d
.text:00000000000078C4                 test    ebx, ebx
.text:00000000000078C6                 jz      loc_7A8D
.text:00000000000078CC
.text:00000000000078CC loc_78CC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:00000000000078CC                                         ; quotearg_buffer_restyled+FE6↓j
.text:00000000000078CC                 test    ebx, ebx
.text:00000000000078CE                 mov     rbx, [rsp+0E8h+var_88]
.text:00000000000078D3                 setnz   [rsp+0E8h+var_D9]
.text:00000000000078D8                 xor     r12d, r12d
.text:00000000000078DB                 mov     rdi, rbx        ; s
.text:00000000000078DE                 call    _strlen
.text:00000000000078E3                 mov     [rsp+0E8h+s2], rbx
.text:00000000000078E8                 mov     [rsp+0E8h+n], rax
.text:00000000000078ED                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000078F2                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000078F7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007900                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007905                 jmp     loc_6BA3
.text:000000000000790A ; ---------------------------------------------------------------------------
.text:000000000000790A
.text:000000000000790A loc_790A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000790A                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:000000000000790A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000790F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007914                 xor     r12d, r12d
.text:0000000000007917                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007920                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000007925                 xor     r15d, r15d
.text:0000000000007928                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000792D                 mov     [rsp+0E8h+n], 0
.text:0000000000007936                 mov     [rsp+0E8h+s2], 0
.text:000000000000793F                 jmp     loc_6BA3
.text:0000000000007944 ; ---------------------------------------------------------------------------
.text:0000000000007944
.text:0000000000007944 loc_7944:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007944                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:0000000000007944                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000007949                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000794E                 xor     r12d, r12d
.text:0000000000007951                 mov     [rsp+0E8h+var_98], 0
.text:000000000000795A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000795F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007964                 jmp     loc_6B83
.text:0000000000007969 ; ---------------------------------------------------------------------------
.text:0000000000007969
.text:0000000000007969 loc_7969:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000007969                 cmp     r13, r15
.text:000000000000796C                 jbe     short loc_7973
.text:000000000000796E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000007973
.text:0000000000007973 loc_7973:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000007973                 lea     rax, [rcx+2]
.text:0000000000007977                 cmp     r13, rax
.text:000000000000797A                 jbe     short loc_7982
.text:000000000000797C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000007982
.text:0000000000007982 loc_7982:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000007982                 mov     eax, r12d
.text:0000000000007985                 lea     r15, [rcx+3]
.text:0000000000007989                 xor     r12d, r12d
.text:000000000000798C                 mov     ebx, 30h ; '0'
.text:0000000000007991                 jmp     loc_6CF8
.text:0000000000007991 ; ---------------------------------------------------------------------------
.text:0000000000007996                 align 20h
.text:00000000000079A0
.text:00000000000079A0 loc_79A0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000079A0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000079A5                 mov     rbp, r11
.text:00000000000079A8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000079AC                 jmp     loc_7659
.text:00000000000079B1 ; ---------------------------------------------------------------------------
.text:00000000000079B1
.text:00000000000079B1 loc_79B1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000079B1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000079B6                 xor     r12d, r12d
.text:00000000000079B9                 jmp     loc_74C0
.text:00000000000079BE ; ---------------------------------------------------------------------------
.text:00000000000079BE
.text:00000000000079BE loc_79BE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000079BE                 xor     r10d, r10d
.text:00000000000079C1                 jmp     loc_757D
.text:00000000000079C6 ; ---------------------------------------------------------------------------
.text:00000000000079C6
.text:00000000000079C6 loc_79C6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:00000000000079C6                 mov     [rsp+0E8h+var_98], 0
.text:00000000000079CF                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000079D4                 xor     r12d, r12d
.text:00000000000079D7                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000079DC                 jmp     loc_77BB
.text:00000000000079E1 ; ---------------------------------------------------------------------------
.text:00000000000079E1
.text:00000000000079E1 loc_79E1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:00000000000079E1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000079E6                 mov     rsi, r14
.text:00000000000079E9                 mov     rcx, r13
.text:00000000000079EC                 mov     rax, rbx
.text:00000000000079EF                 mov     rdi, rbx
.text:00000000000079F2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000079F8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000079FD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000007A05                 cmp     rsi, r11
.text:0000000000007A08                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007A0E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007A16                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007A1B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007A20                 jnb     short loc_7A48
.text:0000000000007A22                 cmp     byte ptr [rcx], 0
.text:0000000000007A25                 jnz     short loc_7A37
.text:0000000000007A27                 jmp     short loc_7A48
.text:0000000000007A27 ; ---------------------------------------------------------------------------
.text:0000000000007A29                 align 10h
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000007A30                 cmp     byte ptr [r9+rax], 0
.text:0000000000007A35                 jz      short loc_7A45
.text:0000000000007A37
.text:0000000000007A37 loc_7A37:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000007A37                 add     rax, 1
.text:0000000000007A3B                 lea     rdx, [rbp+rax+0]
.text:0000000000007A40                 cmp     r11, rdx
.text:0000000000007A43                 ja      short loc_7A30
.text:0000000000007A45
.text:0000000000007A45 loc_7A45:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000007A45                 mov     rdi, rax
.text:0000000000007A48
.text:0000000000007A48 loc_7A48:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000007A48                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000007A48                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007A4D                 xor     r12d, r12d
.text:0000000000007A50                 jmp     loc_74B6
.text:0000000000007A55 ; ---------------------------------------------------------------------------
.text:0000000000007A55
.text:0000000000007A55 loc_7A55:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000007A55                 mov     rdi, rbx
.text:0000000000007A58                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000007A5E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000007A63                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000007A69                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000007A71                 xor     r12d, r12d
.text:0000000000007A74                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000007A79                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000007A7E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000007A83                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000007A88                 jmp     loc_74B6
.text:0000000000007A8D ; ---------------------------------------------------------------------------
.text:0000000000007A8D
.text:0000000000007A8D loc_7A8D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000007A8D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000007A92                 movzx   eax, byte ptr [rdx]
.text:0000000000007A95                 test    al, al
.text:0000000000007A97                 jz      loc_78CC
.text:0000000000007A9D                 nop     dword ptr [rax]
.text:0000000000007AA0
.text:0000000000007AA0 loc_7AA0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000007AA0                 cmp     r13, r15
.text:0000000000007AA3                 jbe     short loc_7AA9
.text:0000000000007AA5                 mov     [r14+r15], al
.text:0000000000007AA9
.text:0000000000007AA9 loc_7AA9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000007AA9                 add     r15, 1
.text:0000000000007AAD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000007AB2                 test    al, al
.text:0000000000007AB4                 jnz     short loc_7AA0
.text:0000000000007AB6                 jmp     loc_78CC
.text:0000000000007ABB ; ---------------------------------------------------------------------------
.text:0000000000007ABB
.text:0000000000007ABB loc_7ABB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000007ABB                 mov     eax, edx
.text:0000000000007ABD                 jmp     loc_7017
.text:0000000000007AC2 ; ---------------------------------------------------------------------------
.text:0000000000007AC2
.text:0000000000007AC2 loc_7AC2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000007AC2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000007AC6                 cmp     bl, 3Eh ; '>'
.text:0000000000007AC9                 ja      loc_7340
.text:0000000000007ACF                 mov     rax, 7000A38200000000h
.text:0000000000007AD9                 bt      rax, rbx
.text:0000000000007ADD                 jnb     loc_7340
.text:0000000000007AE3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007AE8                 jnz     loc_7CD2
.text:0000000000007AEE                 cmp     r13, r15
.text:0000000000007AF1                 jbe     short loc_7AF8
.text:0000000000007AF3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000007AF8
.text:0000000000007AF8 loc_7AF8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000007AF8                 lea     rax, [r15+1]
.text:0000000000007AFC                 cmp     r13, rax
.text:0000000000007AFF                 jbe     short loc_7B07
.text:0000000000007B01                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000007B07
.text:0000000000007B07 loc_7B07:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000007B07                 lea     rax, [r15+2]
.text:0000000000007B0B                 cmp     r13, rax
.text:0000000000007B0E                 jbe     short loc_7B16
.text:0000000000007B10                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000007B16
.text:0000000000007B16 loc_7B16:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000007B16                 lea     rax, [r15+3]
.text:0000000000007B1A                 cmp     r13, rax
.text:0000000000007B1D                 jbe     short loc_7B25
.text:0000000000007B1F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000007B25
.text:0000000000007B25 loc_7B25:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000007B25                 add     r15, 4
.text:0000000000007B29                 xor     edx, edx
.text:0000000000007B2B                 xor     r12d, r12d
.text:0000000000007B2E                 xor     eax, eax
.text:0000000000007B30                 mov     rbp, rcx
.text:0000000000007B33                 jmp     loc_6CF8
.text:0000000000007B38 ; ---------------------------------------------------------------------------
.text:0000000000007B38
.text:0000000000007B38 loc_7B38:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007B38                                         ; DATA XREF: .rodata:jpt_6B61↓o
.text:0000000000007B38                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000007B3A                 jz      loc_7CC8
.text:0000000000007B40                 lea     rax, asc_C135   ; "'"
.text:0000000000007B47                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007B4C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007B51                 xor     r12d, r12d
.text:0000000000007B54                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007B5D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007B62                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007B67                 mov     [rsp+0E8h+n], 1
.text:0000000000007B70                 xor     r15d, r15d
.text:0000000000007B73                 mov     [rsp+0E8h+s2], rax
.text:0000000000007B78                 jmp     loc_6BA3
.text:0000000000007B78 ; ---------------------------------------------------------------------------
.text:0000000000007B7D                 align 20h
.text:0000000000007B80
.text:0000000000007B80 loc_7B80:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000007B80                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000007B80                 mov     rbp, r11
.text:0000000000007B83                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007B88                 jmp     loc_7659
.text:0000000000007B8D ; ---------------------------------------------------------------------------
.text:0000000000007B8D
.text:0000000000007B8D loc_7B8D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000007B8D                 lea     rax, unk_C133
.text:0000000000007B94                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007B99                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007B9E                 xor     r12d, r12d
.text:0000000000007BA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007BAA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007BAF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000007BB4                 mov     [rsp+0E8h+n], 1
.text:0000000000007BBD                 xor     r15d, r15d
.text:0000000000007BC0                 mov     [rsp+0E8h+s2], rax
.text:0000000000007BC5                 jmp     loc_6BA3
.text:0000000000007BCA ; ---------------------------------------------------------------------------
.text:0000000000007BCA
.text:0000000000007BCA loc_7BCA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000007BCA                 mov     eax, edx
.text:0000000000007BCC
.text:0000000000007BCC loc_7BCC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000007BCC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000007BCC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000007BD1                 test    rbx, rbx
.text:0000000000007BD4                 jz      short loc_7C02
.text:0000000000007BD6                 test    al, al
.text:0000000000007BD8                 jz      short loc_7C02
.text:0000000000007BDA                 movzx   ecx, byte ptr [rbx]
.text:0000000000007BDD                 mov     rax, rbx
.text:0000000000007BE0                 test    cl, cl
.text:0000000000007BE2                 jz      short loc_7C02
.text:0000000000007BE4                 mov     rdx, r15
.text:0000000000007BE7                 sub     rax, r15
.text:0000000000007BEA
.text:0000000000007BEA loc_7BEA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000007BEA                 cmp     r13, rdx
.text:0000000000007BED                 jbe     short loc_7BF3
.text:0000000000007BEF                 mov     [r14+rdx], cl
.text:0000000000007BF3
.text:0000000000007BF3 loc_7BF3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000007BF3                 add     rdx, 1
.text:0000000000007BF7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000007BFB                 test    cl, cl
.text:0000000000007BFD                 jnz     short loc_7BEA
.text:0000000000007BFF                 mov     r15, rdx
.text:0000000000007C02
.text:0000000000007C02 loc_7C02:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000007C02                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000007C02                 cmp     r13, r15
.text:0000000000007C05                 jbe     loc_76A9
.text:0000000000007C0B                 mov     byte ptr [r14+r15], 0
.text:0000000000007C10                 jmp     loc_76A9
.text:0000000000007C15 ; ---------------------------------------------------------------------------
.text:0000000000007C15
.text:0000000000007C15 loc_7C15:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000007C15                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007C1A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000007C1F                 mov     rbp, r11
.text:0000000000007C22                 setz    al
.text:0000000000007C25                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007C29                 jmp     loc_7659
.text:0000000000007C2E ; ---------------------------------------------------------------------------
.text:0000000000007C2E
.text:0000000000007C2E loc_7C2E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000007C2E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007C32                 mov     rdi, rcx
.text:0000000000007C35                 call    gettext_quote
.text:0000000000007C3A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007C3F                 jmp     loc_7896
.text:0000000000007C44 ; ---------------------------------------------------------------------------
.text:0000000000007C44
.text:0000000000007C44 loc_7C44:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000007C44                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000007C48                 mov     rdi, rcx
.text:0000000000007C4B                 call    gettext_quote
.text:0000000000007C50                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007C55                 jmp     loc_78C1
.text:0000000000007C5A ; ---------------------------------------------------------------------------
.text:0000000000007C5A
.text:0000000000007C5A loc_7C5A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000007C5A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000007C5F                 mov     rbp, r11
.text:0000000000007C62                 mov     eax, edx
.text:0000000000007C64                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000007C68                 jmp     loc_7659
.text:0000000000007C6D ; ---------------------------------------------------------------------------
.text:0000000000007C6D
.text:0000000000007C6D loc_7C6D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000007C6D                 sub     rsp, 8
.text:0000000000007C71                 mov     r8d, 5
.text:0000000000007C77                 mov     rcx, r11
.text:0000000000007C7A                 push    [rsp+0F0h+var_88]
.text:0000000000007C7E                 push    [rsp+0F8h+var_80]
.text:0000000000007C82                 mov     rdi, r14
.text:0000000000007C85                 push    [rsp+100h+var_C8]
.text:0000000000007C89                 mov     r9d, [rsp+108h+var_70]
.text:0000000000007C91                 mov     rdx, [rsp+108h+s]
.text:0000000000007C96                 mov     rsi, [rsp+108h+var_98]
.text:0000000000007C9B                 call    quotearg_buffer_restyled
.text:0000000000007CA0                 add     rsp, 20h
.text:0000000000007CA4                 mov     r15, rax
.text:0000000000007CA7                 jmp     loc_76A9
.text:0000000000007CAC ; ---------------------------------------------------------------------------
.text:0000000000007CAC
.text:0000000000007CAC loc_7CAC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000007CAC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000007CB1                 jmp     loc_7BCC
.text:0000000000007CB6 ; ---------------------------------------------------------------------------
.text:0000000000007CB6
.text:0000000000007CB6 loc_7CB6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000007CB6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007CBE                 jmp     loc_7659
.text:0000000000007CC3 ; ---------------------------------------------------------------------------
.text:0000000000007CC3
.text:0000000000007CC3 loc_7CC3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000007CC3                 call    ___stack_chk_fail
.text:0000000000007CC8 ; ---------------------------------------------------------------------------
.text:0000000000007CC8
.text:0000000000007CC8 loc_7CC8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000007CC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007CCD                 jmp     loc_7741
.text:0000000000007CD2 ; ---------------------------------------------------------------------------
.text:0000000000007CD2
.text:0000000000007CD2 loc_7CD2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000007CD2                 mov     rbp, r11
.text:0000000000007CD5                 jmp     loc_7670
.text:0000000000007CDA ; ---------------------------------------------------------------------------
.text:0000000000007CDA
.text:0000000000007CDA loc_7CDA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000007CDA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000007CDF                 xor     eax, eax
.text:0000000000007CE1                 xor     r12d, r12d
.text:0000000000007CE4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007CED                 jmp     loc_7294
.text:0000000000007CF2 ; ---------------------------------------------------------------------------
.text:0000000000007CF2
.text:0000000000007CF2 loc_7CF2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000007CF2                 mov     rdx, r13
.text:0000000000007CF5                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000007CFA                 jmp     loc_72F2
.text:0000000000007CFF ; ---------------------------------------------------------------------------
.text:0000000000007CFF
.text:0000000000007CFF def_6B61:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000007CFF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000007CFF ; } // starts at 6AD0
.text:0000000000007CFF quotearg_buffer_restyled endp
.text:0000000000007CFF
.text:0000000000007CFF ; ---------------------------------------------------------------------------
.text:0000000000007D04                 align 10h
.text:0000000000007D10
.text:0000000000007D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007D10
.text:0000000000007D10
.text:0000000000007D10 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000007D10                                         ; quotearg_n_mem+7↓j ...
.text:0000000000007D10
.text:0000000000007D10 var_50          = qword ptr -50h
.text:0000000000007D10 var_48          = qword ptr -48h
.text:0000000000007D10 var_40          = dword ptr -40h
.text:0000000000007D10 var_3C          = dword ptr -3Ch
.text:0000000000007D10
.text:0000000000007D10 ; __unwind {
.text:0000000000007D10                 push    r15
.text:0000000000007D12                 push    r14
.text:0000000000007D14                 movsxd  r15, edi
.text:0000000000007D17                 push    r13
.text:0000000000007D19                 push    r12
.text:0000000000007D1B                 mov     r14, rdx
.text:0000000000007D1E                 push    rbp
.text:0000000000007D1F                 push    rbx
.text:0000000000007D20                 mov     rbp, rcx
.text:0000000000007D23                 sub     rsp, 28h
.text:0000000000007D27                 mov     [rsp+58h+var_50], rsi
.text:0000000000007D2C                 call    ___errno_location
.text:0000000000007D31                 mov     r13, rax
.text:0000000000007D34                 mov     eax, [rax]
.text:0000000000007D36                 test    r15d, r15d
.text:0000000000007D39                 mov     rbx, cs:slotvec
.text:0000000000007D40                 mov     [rsp+58h+var_40], eax
.text:0000000000007D44                 js      loc_7EB1
.text:0000000000007D4A                 cmp     cs:nslots, r15d
.text:0000000000007D51                 jg      short loc_7DB5
.text:0000000000007D53                 cmp     r15d, 7FFFFFFFh
.text:0000000000007D5A                 jz      loc_7EB6
.text:0000000000007D60                 lea     r12d, [r15+1]
.text:0000000000007D64                 lea     rax, slotvec0
.text:0000000000007D6B                 movsxd  rsi, r12d
.text:0000000000007D6E                 shl     rsi, 4
.text:0000000000007D72                 cmp     rbx, rax
.text:0000000000007D75                 jz      loc_7E90
.text:0000000000007D7B                 mov     rdi, rbx
.text:0000000000007D7E                 call    xrealloc
.text:0000000000007D83                 mov     rbx, rax
.text:0000000000007D86                 mov     cs:slotvec, rax
.text:0000000000007D8D
.text:0000000000007D8D loc_7D8D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000007D8D                 movsxd  rdi, cs:nslots
.text:0000000000007D94                 mov     edx, r12d
.text:0000000000007D97                 xor     esi, esi        ; c
.text:0000000000007D99                 sub     edx, edi
.text:0000000000007D9B                 shl     rdi, 4
.text:0000000000007D9F                 movsxd  rdx, edx
.text:0000000000007DA2                 add     rdi, rbx        ; s
.text:0000000000007DA5                 shl     rdx, 4          ; n
.text:0000000000007DA9                 call    _memset
.text:0000000000007DAE                 mov     cs:nslots, r12d
.text:0000000000007DB5
.text:0000000000007DB5 loc_7DB5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000007DB5                 mov     eax, [rbp+4]
.text:0000000000007DB8                 shl     r15, 4
.text:0000000000007DBC                 sub     rsp, 8
.text:0000000000007DC0                 add     rbx, r15
.text:0000000000007DC3                 lea     r15, [rbp+8]
.text:0000000000007DC7                 mov     r8d, [rbp+0]
.text:0000000000007DCB                 mov     r11, [rbx]
.text:0000000000007DCE                 mov     r12, [rbx+8]
.text:0000000000007DD2                 mov     rcx, r14
.text:0000000000007DD5                 or      eax, 1
.text:0000000000007DD8                 mov     [rsp+60h+var_3C], eax
.text:0000000000007DDC                 push    qword ptr [rbp+30h]
.text:0000000000007DDF                 mov     r9d, eax
.text:0000000000007DE2                 push    qword ptr [rbp+28h]
.text:0000000000007DE5                 push    r15
.text:0000000000007DE7                 mov     rsi, r11
.text:0000000000007DEA                 mov     rdx, [rsp+78h+var_50]
.text:0000000000007DEF                 mov     rdi, r12
.text:0000000000007DF2                 mov     [rsp+78h+var_48], r11
.text:0000000000007DF7                 call    quotearg_buffer_restyled
.text:0000000000007DFC                 add     rsp, 20h
.text:0000000000007E00                 mov     r11, [rsp+58h+var_48]
.text:0000000000007E05                 cmp     r11, rax
.text:0000000000007E08                 ja      short loc_7E71
.text:0000000000007E0A                 lea     rsi, [rax+1]
.text:0000000000007E0E                 lea     rax, slot0
.text:0000000000007E15                 cmp     r12, rax
.text:0000000000007E18                 mov     [rbx], rsi
.text:0000000000007E1B                 jz      short loc_7E2F
.text:0000000000007E1D                 mov     rdi, r12        ; ptr
.text:0000000000007E20                 mov     [rsp+58h+var_48], rsi
.text:0000000000007E25                 call    _free
.text:0000000000007E2A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000007E2F
.text:0000000000007E2F loc_7E2F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000007E2F                 mov     rdi, rsi
.text:0000000000007E32                 mov     [rsp+58h+var_48], rsi
.text:0000000000007E37                 call    xmalloc
.text:0000000000007E3C                 sub     rsp, 8
.text:0000000000007E40                 mov     [rbx+8], rax
.text:0000000000007E44                 mov     r8d, [rbp+0]
.text:0000000000007E48                 push    qword ptr [rbp+30h]
.text:0000000000007E4B                 push    qword ptr [rbp+28h]
.text:0000000000007E4E                 mov     rcx, r14
.text:0000000000007E51                 push    r15
.text:0000000000007E53                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000007E58                 mov     rdi, rax
.text:0000000000007E5B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000007E60                 mov     rsi, [rsp+78h+var_48]
.text:0000000000007E65                 mov     r12, rax
.text:0000000000007E68                 call    quotearg_buffer_restyled
.text:0000000000007E6D                 add     rsp, 20h
.text:0000000000007E71
.text:0000000000007E71 loc_7E71:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000007E71                 mov     eax, [rsp+58h+var_40]
.text:0000000000007E75                 mov     [r13+0], eax
.text:0000000000007E79                 add     rsp, 28h
.text:0000000000007E7D                 mov     rax, r12
.text:0000000000007E80                 pop     rbx
.text:0000000000007E81                 pop     rbp
.text:0000000000007E82                 pop     r12
.text:0000000000007E84                 pop     r13
.text:0000000000007E86                 pop     r14
.text:0000000000007E88                 pop     r15
.text:0000000000007E8A                 retn
.text:0000000000007E8A ; ---------------------------------------------------------------------------
.text:0000000000007E8B                 align 10h
.text:0000000000007E90
.text:0000000000007E90 loc_7E90:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000007E90                 xor     edi, edi
.text:0000000000007E92                 call    xrealloc
.text:0000000000007E97                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000007E9F                 mov     rbx, rax
.text:0000000000007EA2                 mov     cs:slotvec, rax
.text:0000000000007EA9                 movups  xmmword ptr [rax], xmm0
.text:0000000000007EAC                 jmp     loc_7D8D
.text:0000000000007EB1 ; ---------------------------------------------------------------------------
.text:0000000000007EB1
.text:0000000000007EB1 loc_7EB1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000007EB1                 call    _abort
.text:0000000000007EB6 ; ---------------------------------------------------------------------------
.text:0000000000007EB6
.text:0000000000007EB6 loc_7EB6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000007EB6                 call    xalloc_die
.text:0000000000007EB6 ; } // starts at 7D10
.text:0000000000007EB6 quotearg_n_options endp
.text:0000000000007EB6
.text:0000000000007EB6 ; ---------------------------------------------------------------------------
.text:0000000000007EBB                 align 20h
.text:0000000000007EC0
.text:0000000000007EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007EC0
.text:0000000000007EC0 ; Attributes: info_from_lumina
.text:0000000000007EC0
.text:0000000000007EC0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000007EC0                 public clone_quoting_options
.text:0000000000007EC0 clone_quoting_options proc near
.text:0000000000007EC0 ; __unwind {
.text:0000000000007EC0                 push    r12
.text:0000000000007EC2                 push    rbp
.text:0000000000007EC3                 push    rbx
.text:0000000000007EC4                 mov     rbx, rdi
.text:0000000000007EC7                 call    ___errno_location
.text:0000000000007ECC                 mov     r12d, [rax]
.text:0000000000007ECF                 mov     rbp, rax
.text:0000000000007ED2                 lea     rax, default_quoting_options
.text:0000000000007ED9                 test    rbx, rbx
.text:0000000000007EDC                 mov     esi, 38h ; '8'  ; n
.text:0000000000007EE1                 cmovz   rbx, rax
.text:0000000000007EE5                 mov     rdi, rbx        ; src
.text:0000000000007EE8                 call    xmemdup
.text:0000000000007EED                 mov     [rbp+0], r12d
.text:0000000000007EF1                 pop     rbx
.text:0000000000007EF2                 pop     rbp
.text:0000000000007EF3                 pop     r12
.text:0000000000007EF5                 retn
.text:0000000000007EF5 ; } // starts at 7EC0
.text:0000000000007EF5 clone_quoting_options endp
.text:0000000000007EF5
.text:0000000000007EF5 ; ---------------------------------------------------------------------------
.text:0000000000007EF6                 align 20h
.text:0000000000007F00
.text:0000000000007F00 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F00
.text:0000000000007F00
.text:0000000000007F00                 public get_quoting_style
.text:0000000000007F00 get_quoting_style proc near
.text:0000000000007F00 ; __unwind {
.text:0000000000007F00                 lea     rax, default_quoting_options
.text:0000000000007F07                 test    rdi, rdi
.text:0000000000007F0A                 cmovz   rdi, rax
.text:0000000000007F0E                 mov     eax, [rdi]
.text:0000000000007F10                 retn
.text:0000000000007F10 ; } // starts at 7F00
.text:0000000000007F10 get_quoting_style endp
.text:0000000000007F10
.text:0000000000007F10 ; ---------------------------------------------------------------------------
.text:0000000000007F11                 align 20h
.text:0000000000007F20
.text:0000000000007F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F20
.text:0000000000007F20
.text:0000000000007F20                 public set_quoting_style
.text:0000000000007F20 set_quoting_style proc near
.text:0000000000007F20 ; __unwind {
.text:0000000000007F20                 lea     rax, default_quoting_options
.text:0000000000007F27                 test    rdi, rdi
.text:0000000000007F2A                 cmovz   rdi, rax
.text:0000000000007F2E                 mov     [rdi], esi
.text:0000000000007F30                 retn
.text:0000000000007F30 ; } // starts at 7F20
.text:0000000000007F30 set_quoting_style endp
.text:0000000000007F30
.text:0000000000007F30 ; ---------------------------------------------------------------------------
.text:0000000000007F31                 align 20h
.text:0000000000007F40
.text:0000000000007F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F40
.text:0000000000007F40 ; Attributes: info_from_lumina
.text:0000000000007F40
.text:0000000000007F40 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000007F40                 public set_char_quoting
.text:0000000000007F40 set_char_quoting proc near
.text:0000000000007F40 ; __unwind {
.text:0000000000007F40                 lea     rax, default_quoting_options
.text:0000000000007F47                 test    rdi, rdi
.text:0000000000007F4A                 mov     ecx, esi
.text:0000000000007F4C                 cmovz   rdi, rax
.text:0000000000007F50                 mov     eax, esi
.text:0000000000007F52                 and     ecx, 1Fh
.text:0000000000007F55                 shr     al, 5
.text:0000000000007F58                 movzx   eax, al
.text:0000000000007F5B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000007F60                 mov     esi, [rdi]
.text:0000000000007F62                 mov     eax, esi
.text:0000000000007F64                 shr     eax, cl
.text:0000000000007F66                 xor     edx, eax
.text:0000000000007F68                 and     eax, 1
.text:0000000000007F6B                 and     edx, 1
.text:0000000000007F6E                 shl     edx, cl
.text:0000000000007F70                 xor     edx, esi
.text:0000000000007F72                 mov     [rdi], edx
.text:0000000000007F74                 retn
.text:0000000000007F74 ; } // starts at 7F40
.text:0000000000007F74 set_char_quoting endp
.text:0000000000007F74
.text:0000000000007F74 ; ---------------------------------------------------------------------------
.text:0000000000007F75                 align 20h
.text:0000000000007F80
.text:0000000000007F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F80
.text:0000000000007F80
.text:0000000000007F80                 public set_quoting_flags
.text:0000000000007F80 set_quoting_flags proc near
.text:0000000000007F80 ; __unwind {
.text:0000000000007F80                 lea     rax, default_quoting_options
.text:0000000000007F87                 test    rdi, rdi
.text:0000000000007F8A                 cmovz   rdi, rax
.text:0000000000007F8E                 mov     eax, [rdi+4]
.text:0000000000007F91                 mov     [rdi+4], esi
.text:0000000000007F94                 retn
.text:0000000000007F94 ; } // starts at 7F80
.text:0000000000007F94 set_quoting_flags endp
.text:0000000000007F94
.text:0000000000007F94 ; ---------------------------------------------------------------------------
.text:0000000000007F95                 align 20h
.text:0000000000007FA0
.text:0000000000007FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FA0
.text:0000000000007FA0 ; Attributes: info_from_lumina
.text:0000000000007FA0
.text:0000000000007FA0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000007FA0                 public set_custom_quoting
.text:0000000000007FA0 set_custom_quoting proc near
.text:0000000000007FA0 ; __unwind {
.text:0000000000007FA0                 lea     rax, default_quoting_options
.text:0000000000007FA7                 test    rdi, rdi
.text:0000000000007FAA                 cmovz   rdi, rax
.text:0000000000007FAE                 test    rsi, rsi
.text:0000000000007FB1                 mov     dword ptr [rdi], 0Ah
.text:0000000000007FB7                 jz      short loc_7FC7
.text:0000000000007FB9                 test    rdx, rdx
.text:0000000000007FBC                 jz      short loc_7FC7
.text:0000000000007FBE                 mov     [rdi+28h], rsi
.text:0000000000007FC2                 mov     [rdi+30h], rdx
.text:0000000000007FC6                 retn
.text:0000000000007FC7 ; ---------------------------------------------------------------------------
.text:0000000000007FC7
.text:0000000000007FC7 loc_7FC7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000007FC7                                         ; set_custom_quoting+1C↑j
.text:0000000000007FC7                 sub     rsp, 8
.text:0000000000007FCB                 call    _abort
.text:0000000000007FCB ; } // starts at 7FA0
.text:0000000000007FCB set_custom_quoting endp
.text:0000000000007FCB
.text:0000000000007FD0
.text:0000000000007FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FD0
.text:0000000000007FD0 ; Attributes: info_from_lumina
.text:0000000000007FD0
.text:0000000000007FD0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000007FD0                 public quotearg_buffer
.text:0000000000007FD0 quotearg_buffer proc near
.text:0000000000007FD0
.text:0000000000007FD0 var_40          = qword ptr -40h
.text:0000000000007FD0
.text:0000000000007FD0 ; __unwind {
.text:0000000000007FD0                 push    r15
.text:0000000000007FD2                 push    r14
.text:0000000000007FD4                 lea     rax, default_quoting_options
.text:0000000000007FDB                 push    r13
.text:0000000000007FDD                 push    r12
.text:0000000000007FDF                 mov     r13, rdi
.text:0000000000007FE2                 push    rbp
.text:0000000000007FE3                 push    rbx
.text:0000000000007FE4                 mov     rbx, r8
.text:0000000000007FE7                 mov     r14, rsi
.text:0000000000007FEA                 mov     r15, rdx
.text:0000000000007FED                 sub     rsp, 18h
.text:0000000000007FF1                 test    r8, r8
.text:0000000000007FF4                 cmovz   rbx, rax
.text:0000000000007FF8                 mov     [rsp+48h+var_40], rcx
.text:0000000000007FFD                 call    ___errno_location
.text:0000000000008002                 mov     r12d, [rax]
.text:0000000000008005                 mov     rbp, rax
.text:0000000000008008                 lea     rax, [rbx+8]
.text:000000000000800C                 sub     rsp, 8
.text:0000000000008010                 mov     r9d, [rbx+4]
.text:0000000000008014                 push    qword ptr [rbx+30h]
.text:0000000000008017                 mov     r8d, [rbx]
.text:000000000000801A                 push    qword ptr [rbx+28h]
.text:000000000000801D                 mov     rdx, r15
.text:0000000000008020                 push    rax
.text:0000000000008021                 mov     rcx, [rsp+68h+var_40]
.text:0000000000008026                 mov     rsi, r14
.text:0000000000008029                 mov     rdi, r13
.text:000000000000802C                 call    quotearg_buffer_restyled
.text:0000000000008031                 mov     [rbp+0], r12d
.text:0000000000008035                 add     rsp, 38h
.text:0000000000008039                 pop     rbx
.text:000000000000803A                 pop     rbp
.text:000000000000803B                 pop     r12
.text:000000000000803D                 pop     r13
.text:000000000000803F                 pop     r14
.text:0000000000008041                 pop     r15
.text:0000000000008043                 retn
.text:0000000000008043 ; } // starts at 7FD0
.text:0000000000008043 quotearg_buffer endp
.text:0000000000008043
.text:0000000000008043 ; ---------------------------------------------------------------------------
.text:0000000000008044                 align 10h
.text:0000000000008050
.text:0000000000008050 ; =============== S U B R O U T I N E =======================================
.text:0000000000008050
.text:0000000000008050 ; Attributes: info_from_lumina
.text:0000000000008050
.text:0000000000008050 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000008050                 public quotearg_alloc_mem
.text:0000000000008050 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000008050
.text:0000000000008050 var_5C          = dword ptr -5Ch
.text:0000000000008050 var_58          = qword ptr -58h
.text:0000000000008050 var_50          = qword ptr -50h
.text:0000000000008050 var_48          = qword ptr -48h
.text:0000000000008050 var_40          = qword ptr -40h
.text:0000000000008050
.text:0000000000008050 ; __unwind {
.text:0000000000008050                 push    r15
.text:0000000000008052                 push    r14
.text:0000000000008054                 lea     rax, default_quoting_options
.text:000000000000805B                 push    r13
.text:000000000000805D                 push    r12
.text:000000000000805F                 mov     r12, rdx
.text:0000000000008062                 push    rbp
.text:0000000000008063                 push    rbx
.text:0000000000008064                 mov     rbx, rcx
.text:0000000000008067                 mov     r14, rdi
.text:000000000000806A                 mov     r15, rsi
.text:000000000000806D                 sub     rsp, 38h
.text:0000000000008071                 test    rcx, rcx
.text:0000000000008074                 cmovz   rbx, rax
.text:0000000000008078                 xor     ebp, ebp
.text:000000000000807A                 call    ___errno_location
.text:000000000000807F                 test    r12, r12
.text:0000000000008082                 mov     r13, rax
.text:0000000000008085                 mov     eax, [rax]
.text:0000000000008087                 setz    bpl
.text:000000000000808B                 or      ebp, [rbx+4]
.text:000000000000808E                 lea     r10, [rbx+8]
.text:0000000000008092                 sub     rsp, 8
.text:0000000000008096                 mov     r8d, [rbx]
.text:0000000000008099                 mov     rcx, r15
.text:000000000000809C                 mov     [rsp+70h+var_5C], eax
.text:00000000000080A0                 push    qword ptr [rbx+30h]
.text:00000000000080A3                 mov     rdx, r14
.text:00000000000080A6                 push    qword ptr [rbx+28h]
.text:00000000000080A9                 push    r10
.text:00000000000080AB                 xor     esi, esi
.text:00000000000080AD                 mov     r9d, ebp
.text:00000000000080B0                 xor     edi, edi
.text:00000000000080B2                 mov     [rsp+88h+var_48], r10
.text:00000000000080B7                 call    quotearg_buffer_restyled
.text:00000000000080BC                 lea     rsi, [rax+1]
.text:00000000000080C0                 mov     [rsp+88h+var_40], rax
.text:00000000000080C5                 add     rsp, 20h
.text:00000000000080C9                 mov     rdi, rsi
.text:00000000000080CC                 mov     [rsp+68h+var_50], rsi
.text:00000000000080D1                 call    xmalloc
.text:00000000000080D6                 mov     [rsp+68h+var_58], rax
.text:00000000000080DB                 sub     rsp, 8
.text:00000000000080DF                 push    qword ptr [rbx+30h]
.text:00000000000080E2                 push    qword ptr [rbx+28h]
.text:00000000000080E5                 mov     r10, [rsp+80h+var_48]
.text:00000000000080EA                 mov     r9d, ebp
.text:00000000000080ED                 mov     r8d, [rbx]
.text:00000000000080F0                 mov     rcx, r15
.text:00000000000080F3                 mov     rdx, r14
.text:00000000000080F6                 mov     rdi, rax
.text:00000000000080F9                 push    r10
.text:00000000000080FB                 mov     rsi, [rsp+88h+var_50]
.text:0000000000008100                 call    quotearg_buffer_restyled
.text:0000000000008105                 mov     eax, [rsp+88h+var_5C]
.text:0000000000008109                 add     rsp, 20h
.text:000000000000810D                 test    r12, r12
.text:0000000000008110                 mov     [r13+0], eax
.text:0000000000008114                 jz      short loc_811F
.text:0000000000008116                 mov     r11, [rsp+68h+var_40]
.text:000000000000811B                 mov     [r12], r11
.text:000000000000811F
.text:000000000000811F loc_811F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000811F                 mov     rax, [rsp+68h+var_58]
.text:0000000000008124                 add     rsp, 38h
.text:0000000000008128                 pop     rbx
.text:0000000000008129                 pop     rbp
.text:000000000000812A                 pop     r12
.text:000000000000812C                 pop     r13
.text:000000000000812E                 pop     r14
.text:0000000000008130                 pop     r15
.text:0000000000008132                 retn
.text:0000000000008132 ; } // starts at 8050
.text:0000000000008132 quotearg_alloc_mem endp
.text:0000000000008132
.text:0000000000008132 ; ---------------------------------------------------------------------------
.text:0000000000008133                 align 20h
.text:0000000000008140
.text:0000000000008140 ; =============== S U B R O U T I N E =======================================
.text:0000000000008140
.text:0000000000008140
.text:0000000000008140                 public quotearg_alloc
.text:0000000000008140 quotearg_alloc  proc near
.text:0000000000008140 ; __unwind {
.text:0000000000008140                 mov     rcx, rdx
.text:0000000000008143                 xor     edx, edx
.text:0000000000008145                 jmp     quotearg_alloc_mem
.text:0000000000008145 ; } // starts at 8140
.text:0000000000008145 quotearg_alloc  endp
.text:0000000000008145
.text:0000000000008145 ; ---------------------------------------------------------------------------
.text:000000000000814A                 align 10h
.text:0000000000008150
.text:0000000000008150 ; =============== S U B R O U T I N E =======================================
.text:0000000000008150
.text:0000000000008150 ; Attributes: info_from_lumina
.text:0000000000008150
.text:0000000000008150 ; void __cdecl quotearg_free()
.text:0000000000008150                 public quotearg_free
.text:0000000000008150 quotearg_free   proc near
.text:0000000000008150 ; __unwind {
.text:0000000000008150                 mov     eax, cs:nslots
.text:0000000000008156                 push    r12
.text:0000000000008158                 mov     r12, cs:slotvec
.text:000000000000815F                 push    rbp
.text:0000000000008160                 push    rbx
.text:0000000000008161                 cmp     eax, 1
.text:0000000000008164                 jle     short loc_8191
.text:0000000000008166                 sub     eax, 2
.text:0000000000008169                 lea     rbx, [r12+18h]
.text:000000000000816E                 shl     rax, 4
.text:0000000000008172                 lea     rbp, [r12+rax+28h]
.text:0000000000008177                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008180
.text:0000000000008180 loc_8180:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000008180                 mov     rdi, [rbx]      ; ptr
.text:0000000000008183                 add     rbx, 10h
.text:0000000000008187                 call    _free
.text:000000000000818C                 cmp     rbx, rbp
.text:000000000000818F                 jnz     short loc_8180
.text:0000000000008191
.text:0000000000008191 loc_8191:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000008191                 mov     rdi, [r12+8]    ; ptr
.text:0000000000008196                 lea     rbx, slot0
.text:000000000000819D                 cmp     rdi, rbx
.text:00000000000081A0                 jz      short loc_81B9
.text:00000000000081A2                 call    _free
.text:00000000000081A7                 mov     cs:slotvec0, 100h
.text:00000000000081B2                 mov     cs:off_210098, rbx
.text:00000000000081B9
.text:00000000000081B9 loc_81B9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000081B9                 lea     rbx, slotvec0
.text:00000000000081C0                 cmp     r12, rbx
.text:00000000000081C3                 jz      short loc_81D4
.text:00000000000081C5                 mov     rdi, r12        ; ptr
.text:00000000000081C8                 call    _free
.text:00000000000081CD                 mov     cs:slotvec, rbx
.text:00000000000081D4
.text:00000000000081D4 loc_81D4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000081D4                 pop     rbx
.text:00000000000081D5                 mov     cs:nslots, 1
.text:00000000000081DF                 pop     rbp
.text:00000000000081E0                 pop     r12
.text:00000000000081E2                 retn
.text:00000000000081E2 ; } // starts at 8150
.text:00000000000081E2 quotearg_free   endp
.text:00000000000081E2
.text:00000000000081E2 ; ---------------------------------------------------------------------------
.text:00000000000081E3                 align 10h
.text:00000000000081F0
.text:00000000000081F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081F0
.text:00000000000081F0
.text:00000000000081F0                 public quotearg_n
.text:00000000000081F0 quotearg_n      proc near
.text:00000000000081F0 ; __unwind {
.text:00000000000081F0                 lea     rcx, default_quoting_options
.text:00000000000081F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000081FE                 jmp     quotearg_n_options
.text:00000000000081FE ; } // starts at 81F0
.text:00000000000081FE quotearg_n      endp
.text:00000000000081FE
.text:00000000000081FE ; ---------------------------------------------------------------------------
.text:0000000000008203                 align 10h
.text:0000000000008210
.text:0000000000008210 ; =============== S U B R O U T I N E =======================================
.text:0000000000008210
.text:0000000000008210
.text:0000000000008210                 public quotearg_n_mem
.text:0000000000008210 quotearg_n_mem  proc near
.text:0000000000008210 ; __unwind {
.text:0000000000008210                 lea     rcx, default_quoting_options
.text:0000000000008217                 jmp     quotearg_n_options
.text:0000000000008217 ; } // starts at 8210
.text:0000000000008217 quotearg_n_mem  endp
.text:0000000000008217
.text:0000000000008217 ; ---------------------------------------------------------------------------
.text:000000000000821C                 align 20h
.text:0000000000008220
.text:0000000000008220 ; =============== S U B R O U T I N E =======================================
.text:0000000000008220
.text:0000000000008220
.text:0000000000008220                 public quotearg
.text:0000000000008220 quotearg        proc near
.text:0000000000008220 ; __unwind {
.text:0000000000008220                 lea     rcx, default_quoting_options
.text:0000000000008227                 mov     rsi, rdi
.text:000000000000822A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008231                 xor     edi, edi
.text:0000000000008233                 jmp     quotearg_n_options
.text:0000000000008233 ; } // starts at 8220
.text:0000000000008233 quotearg        endp
.text:0000000000008233
.text:0000000000008233 ; ---------------------------------------------------------------------------
.text:0000000000008238                 align 20h
.text:0000000000008240
.text:0000000000008240 ; =============== S U B R O U T I N E =======================================
.text:0000000000008240
.text:0000000000008240
.text:0000000000008240                 public quotearg_mem
.text:0000000000008240 quotearg_mem    proc near
.text:0000000000008240 ; __unwind {
.text:0000000000008240                 lea     rcx, default_quoting_options
.text:0000000000008247                 mov     rdx, rsi
.text:000000000000824A                 mov     rsi, rdi
.text:000000000000824D                 xor     edi, edi
.text:000000000000824F                 jmp     quotearg_n_options
.text:000000000000824F ; } // starts at 8240
.text:000000000000824F quotearg_mem    endp
.text:000000000000824F
.text:000000000000824F ; ---------------------------------------------------------------------------
.text:0000000000008254                 align 20h
.text:0000000000008260
.text:0000000000008260 ; =============== S U B R O U T I N E =======================================
.text:0000000000008260
.text:0000000000008260 ; Attributes: info_from_lumina
.text:0000000000008260
.text:0000000000008260 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000008260                 public quotearg_n_style
.text:0000000000008260 quotearg_n_style proc near              ; CODE XREF: do_link+F3↑p
.text:0000000000008260                                         ; do_link+117↑p ...
.text:0000000000008260
.text:0000000000008260 var_48          = dword ptr -48h
.text:0000000000008260 var_44          = qword ptr -44h
.text:0000000000008260 var_3C          = qword ptr -3Ch
.text:0000000000008260 var_34          = qword ptr -34h
.text:0000000000008260 var_2C          = qword ptr -2Ch
.text:0000000000008260 var_24          = qword ptr -24h
.text:0000000000008260 var_1C          = qword ptr -1Ch
.text:0000000000008260 var_14          = dword ptr -14h
.text:0000000000008260 var_10          = qword ptr -10h
.text:0000000000008260
.text:0000000000008260 ; __unwind {
.text:0000000000008260                 sub     rsp, 48h
.text:0000000000008264                 mov     rax, rdx
.text:0000000000008267                 mov     rdx, fs:28h
.text:0000000000008270                 mov     [rsp+48h+var_10], rdx
.text:0000000000008275                 xor     edx, edx
.text:0000000000008277                 cmp     esi, 0Ah
.text:000000000000827A                 jz      short loc_82E4
.text:000000000000827C                 mov     [rsp+48h+var_48], esi
.text:000000000000827F                 mov     rcx, rsp
.text:0000000000008282                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008289                 mov     rsi, rax
.text:000000000000828C                 mov     [rsp+48h+var_44], 0
.text:0000000000008295                 mov     [rsp+48h+var_3C], 0
.text:000000000000829E                 mov     [rsp+48h+var_34], 0
.text:00000000000082A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000082B0                 mov     [rsp+48h+var_24], 0
.text:00000000000082B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000082C2                 mov     [rsp+48h+var_14], 0
.text:00000000000082CA                 call    quotearg_n_options
.text:00000000000082CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000082D4                 xor     rcx, fs:28h
.text:00000000000082DD                 jnz     short loc_82E9
.text:00000000000082DF                 add     rsp, 48h
.text:00000000000082E3                 retn
.text:00000000000082E4 ; ---------------------------------------------------------------------------
.text:00000000000082E4
.text:00000000000082E4 loc_82E4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000082E4                 call    _abort
.text:00000000000082E9 ; ---------------------------------------------------------------------------
.text:00000000000082E9
.text:00000000000082E9 loc_82E9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000082E9                 call    ___stack_chk_fail
.text:00000000000082E9 ; } // starts at 8260
.text:00000000000082E9 quotearg_n_style endp
.text:00000000000082E9
.text:00000000000082E9 ; ---------------------------------------------------------------------------
.text:00000000000082EE                 align 10h
.text:00000000000082F0
.text:00000000000082F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000082F0
.text:00000000000082F0 ; Attributes: info_from_lumina
.text:00000000000082F0
.text:00000000000082F0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000082F0                 public quotearg_n_style_mem
.text:00000000000082F0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000082F0
.text:00000000000082F0 var_48          = dword ptr -48h
.text:00000000000082F0 var_44          = qword ptr -44h
.text:00000000000082F0 var_3C          = qword ptr -3Ch
.text:00000000000082F0 var_34          = qword ptr -34h
.text:00000000000082F0 var_2C          = qword ptr -2Ch
.text:00000000000082F0 var_24          = qword ptr -24h
.text:00000000000082F0 var_1C          = qword ptr -1Ch
.text:00000000000082F0 var_14          = dword ptr -14h
.text:00000000000082F0 var_10          = qword ptr -10h
.text:00000000000082F0
.text:00000000000082F0 ; __unwind {
.text:00000000000082F0                 sub     rsp, 48h
.text:00000000000082F4                 mov     rax, rdx
.text:00000000000082F7                 mov     rdx, rcx
.text:00000000000082FA                 mov     rcx, fs:28h
.text:0000000000008303                 mov     [rsp+48h+var_10], rcx
.text:0000000000008308                 xor     ecx, ecx
.text:000000000000830A                 cmp     esi, 0Ah
.text:000000000000830D                 jz      short loc_8370
.text:000000000000830F                 mov     [rsp+48h+var_48], esi
.text:0000000000008312                 mov     rcx, rsp
.text:0000000000008315                 mov     rsi, rax
.text:0000000000008318                 mov     [rsp+48h+var_44], 0
.text:0000000000008321                 mov     [rsp+48h+var_3C], 0
.text:000000000000832A                 mov     [rsp+48h+var_34], 0
.text:0000000000008333                 mov     [rsp+48h+var_2C], 0
.text:000000000000833C                 mov     [rsp+48h+var_24], 0
.text:0000000000008345                 mov     [rsp+48h+var_1C], 0
.text:000000000000834E                 mov     [rsp+48h+var_14], 0
.text:0000000000008356                 call    quotearg_n_options
.text:000000000000835B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000008360                 xor     rdx, fs:28h
.text:0000000000008369                 jnz     short loc_8375
.text:000000000000836B                 add     rsp, 48h
.text:000000000000836F                 retn
.text:0000000000008370 ; ---------------------------------------------------------------------------
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000008370                 call    _abort
.text:0000000000008375 ; ---------------------------------------------------------------------------
.text:0000000000008375
.text:0000000000008375 loc_8375:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000008375                 call    ___stack_chk_fail
.text:0000000000008375 ; } // starts at 82F0
.text:0000000000008375 quotearg_n_style_mem endp
.text:0000000000008375
.text:0000000000008375 ; ---------------------------------------------------------------------------
.text:000000000000837A                 align 20h
.text:0000000000008380
.text:0000000000008380 ; =============== S U B R O U T I N E =======================================
.text:0000000000008380
.text:0000000000008380
.text:0000000000008380                 public quotearg_style
.text:0000000000008380 quotearg_style  proc near               ; CODE XREF: main+28A↑p
.text:0000000000008380                                         ; main+636↑p ...
.text:0000000000008380 ; __unwind {
.text:0000000000008380                 mov     rdx, rsi
.text:0000000000008383                 mov     esi, edi
.text:0000000000008385                 xor     edi, edi
.text:0000000000008387                 jmp     quotearg_n_style
.text:0000000000008387 ; } // starts at 8380
.text:0000000000008387 quotearg_style  endp
.text:0000000000008387
.text:0000000000008387 ; ---------------------------------------------------------------------------
.text:000000000000838C                 align 10h
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390
.text:0000000000008390                 public quotearg_style_mem
.text:0000000000008390 quotearg_style_mem proc near
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 mov     rcx, rdx
.text:0000000000008393                 mov     rdx, rsi
.text:0000000000008396                 mov     esi, edi
.text:0000000000008398                 xor     edi, edi
.text:000000000000839A                 jmp     quotearg_n_style_mem
.text:000000000000839A ; } // starts at 8390
.text:000000000000839A quotearg_style_mem endp
.text:000000000000839A
.text:000000000000839A ; ---------------------------------------------------------------------------
.text:000000000000839F                 align 20h
.text:00000000000083A0
.text:00000000000083A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083A0
.text:00000000000083A0 ; Attributes: info_from_lumina
.text:00000000000083A0
.text:00000000000083A0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000083A0                 public quotearg_char_mem
.text:00000000000083A0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000083A0                                         ; quotearg_colon+C↓j ...
.text:00000000000083A0
.text:00000000000083A0 var_48          = xmmword ptr -48h
.text:00000000000083A0 var_38          = xmmword ptr -38h
.text:00000000000083A0 var_28          = xmmword ptr -28h
.text:00000000000083A0 var_18          = qword ptr -18h
.text:00000000000083A0 var_10          = qword ptr -10h
.text:00000000000083A0
.text:00000000000083A0 ; __unwind {
.text:00000000000083A0                 sub     rsp, 48h
.text:00000000000083A4                 mov     ecx, edx
.text:00000000000083A6                 mov     rax, fs:28h
.text:00000000000083AF                 mov     [rsp+48h+var_10], rax
.text:00000000000083B4                 xor     eax, eax
.text:00000000000083B6                 mov     rax, cs:qword_210290
.text:00000000000083BD                 mov     r8, rsp
.text:00000000000083C0                 and     ecx, 1Fh
.text:00000000000083C3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000083CB                 mov     [rsp+48h+var_18], rax
.text:00000000000083D0                 mov     eax, edx
.text:00000000000083D2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000083D6                 shr     al, 5
.text:00000000000083D9                 movzx   eax, al
.text:00000000000083DC                 lea     r9, [r8+rax*4+8]
.text:00000000000083E1                 movdqa  xmm0, cs:xmmword_210270
.text:00000000000083E9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000083EE                 movdqa  xmm0, cs:xmmword_210280
.text:00000000000083F6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000083FB                 mov     edx, [r9]
.text:00000000000083FE                 mov     eax, edx
.text:0000000000008400                 shr     eax, cl
.text:0000000000008402                 not     eax
.text:0000000000008404                 and     eax, 1
.text:0000000000008407                 shl     eax, cl
.text:0000000000008409                 mov     rcx, r8
.text:000000000000840C                 xor     eax, edx
.text:000000000000840E                 mov     rdx, rsi
.text:0000000000008411                 mov     rsi, rdi
.text:0000000000008414                 mov     [r9], eax
.text:0000000000008417                 xor     edi, edi
.text:0000000000008419                 call    quotearg_n_options
.text:000000000000841E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000008423                 xor     rsi, fs:28h
.text:000000000000842C                 jnz     short loc_8433
.text:000000000000842E                 add     rsp, 48h
.text:0000000000008432                 retn
.text:0000000000008433 ; ---------------------------------------------------------------------------
.text:0000000000008433
.text:0000000000008433 loc_8433:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000008433                 call    ___stack_chk_fail
.text:0000000000008433 ; } // starts at 83A0
.text:0000000000008433 quotearg_char_mem endp
.text:0000000000008433
.text:0000000000008433 ; ---------------------------------------------------------------------------
.text:0000000000008438                 align 20h
.text:0000000000008440
.text:0000000000008440 ; =============== S U B R O U T I N E =======================================
.text:0000000000008440
.text:0000000000008440
.text:0000000000008440                 public quotearg_char
.text:0000000000008440 quotearg_char   proc near
.text:0000000000008440 ; __unwind {
.text:0000000000008440                 movsx   edx, sil
.text:0000000000008444                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000844B                 jmp     quotearg_char_mem
.text:000000000000844B ; } // starts at 8440
.text:000000000000844B quotearg_char   endp
.text:000000000000844B
.text:0000000000008450
.text:0000000000008450 ; =============== S U B R O U T I N E =======================================
.text:0000000000008450
.text:0000000000008450
.text:0000000000008450                 public quotearg_colon
.text:0000000000008450 quotearg_colon  proc near               ; CODE XREF: close_stdin+85↑p
.text:0000000000008450                                         ; close_stdout+65↑p
.text:0000000000008450 ; __unwind {
.text:0000000000008450                 mov     edx, 3Ah ; ':'
.text:0000000000008455                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000845C                 jmp     quotearg_char_mem
.text:000000000000845C ; } // starts at 8450
.text:000000000000845C quotearg_colon  endp
.text:000000000000845C
.text:000000000000845C ; ---------------------------------------------------------------------------
.text:0000000000008461                 align 10h
.text:0000000000008470
.text:0000000000008470 ; =============== S U B R O U T I N E =======================================
.text:0000000000008470
.text:0000000000008470
.text:0000000000008470                 public quotearg_colon_mem
.text:0000000000008470 quotearg_colon_mem proc near
.text:0000000000008470 ; __unwind {
.text:0000000000008470                 mov     edx, 3Ah ; ':'
.text:0000000000008475                 jmp     quotearg_char_mem
.text:0000000000008475 ; } // starts at 8470
.text:0000000000008475 quotearg_colon_mem endp
.text:0000000000008475
.text:0000000000008475 ; ---------------------------------------------------------------------------
.text:000000000000847A                 align 20h
.text:0000000000008480
.text:0000000000008480 ; =============== S U B R O U T I N E =======================================
.text:0000000000008480
.text:0000000000008480 ; Attributes: info_from_lumina
.text:0000000000008480
.text:0000000000008480 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000008480                 public quotearg_n_style_colon
.text:0000000000008480 quotearg_n_style_colon proc near        ; CODE XREF: do_link+748↑p
.text:0000000000008480                                         ; do_link+78A↑p
.text:0000000000008480
.text:0000000000008480 var_48          = dword ptr -48h
.text:0000000000008480 var_44          = qword ptr -44h
.text:0000000000008480 var_3C          = qword ptr -3Ch
.text:0000000000008480 var_34          = qword ptr -34h
.text:0000000000008480 var_2C          = qword ptr -2Ch
.text:0000000000008480 var_24          = qword ptr -24h
.text:0000000000008480 var_1C          = qword ptr -1Ch
.text:0000000000008480 var_14          = dword ptr -14h
.text:0000000000008480 var_10          = qword ptr -10h
.text:0000000000008480
.text:0000000000008480 ; __unwind {
.text:0000000000008480                 sub     rsp, 48h
.text:0000000000008484                 mov     rax, rdx
.text:0000000000008487                 mov     rdx, fs:28h
.text:0000000000008490                 mov     [rsp+48h+var_10], rdx
.text:0000000000008495                 xor     edx, edx
.text:0000000000008497                 cmp     esi, 0Ah
.text:000000000000849A                 jz      short loc_8504
.text:000000000000849C                 mov     [rsp+48h+var_48], esi
.text:000000000000849F                 mov     rcx, rsp
.text:00000000000084A2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000084A9                 mov     rsi, rax
.text:00000000000084AC                 mov     [rsp+48h+var_44], 0
.text:00000000000084B5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000084BE                 mov     [rsp+48h+var_34], 0
.text:00000000000084C7                 mov     [rsp+48h+var_2C], 0
.text:00000000000084D0                 mov     [rsp+48h+var_24], 0
.text:00000000000084D9                 mov     [rsp+48h+var_1C], 0
.text:00000000000084E2                 mov     [rsp+48h+var_14], 0
.text:00000000000084EA                 call    quotearg_n_options
.text:00000000000084EF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000084F4                 xor     rcx, fs:28h
.text:00000000000084FD                 jnz     short loc_8509
.text:00000000000084FF                 add     rsp, 48h
.text:0000000000008503                 retn
.text:0000000000008504 ; ---------------------------------------------------------------------------
.text:0000000000008504
.text:0000000000008504 loc_8504:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000008504                 call    _abort
.text:0000000000008509 ; ---------------------------------------------------------------------------
.text:0000000000008509
.text:0000000000008509 loc_8509:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000008509                 call    ___stack_chk_fail
.text:0000000000008509 ; } // starts at 8480
.text:0000000000008509 quotearg_n_style_colon endp
.text:0000000000008509
.text:0000000000008509 ; ---------------------------------------------------------------------------
.text:000000000000850E                 align 10h
.text:0000000000008510
.text:0000000000008510 ; =============== S U B R O U T I N E =======================================
.text:0000000000008510
.text:0000000000008510 ; Attributes: info_from_lumina
.text:0000000000008510
.text:0000000000008510 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000008510                 public quotearg_n_custom_mem
.text:0000000000008510 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000008510                                         ; quotearg_custom+12↓j ...
.text:0000000000008510
.text:0000000000008510 var_48          = xmmword ptr -48h
.text:0000000000008510 var_38          = xmmword ptr -38h
.text:0000000000008510 var_28          = xmmword ptr -28h
.text:0000000000008510 var_18          = qword ptr -18h
.text:0000000000008510 var_10          = qword ptr -10h
.text:0000000000008510
.text:0000000000008510 ; __unwind {
.text:0000000000008510                 sub     rsp, 48h
.text:0000000000008514                 mov     r9, rcx
.text:0000000000008517                 mov     rcx, cs:qword_210290
.text:000000000000851E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000008526                 mov     rax, fs:28h
.text:000000000000852F                 mov     [rsp+48h+var_10], rax
.text:0000000000008534                 xor     eax, eax
.text:0000000000008536                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000853A                 test    rsi, rsi
.text:000000000000853D                 mov     [rsp+48h+var_18], rcx
.text:0000000000008542                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000008549                 movdqa  xmm0, cs:xmmword_210270
.text:0000000000008551                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000008556                 movdqa  xmm0, cs:xmmword_210280
.text:000000000000855E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000008563                 jz      short loc_8597
.text:0000000000008565                 test    rdx, rdx
.text:0000000000008568                 jz      short loc_8597
.text:000000000000856A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000856F                 mov     [rsp+48h+var_18], rdx
.text:0000000000008574                 mov     rcx, rsp
.text:0000000000008577                 mov     rdx, r8
.text:000000000000857A                 mov     rsi, r9
.text:000000000000857D                 call    quotearg_n_options
.text:0000000000008582                 mov     rdi, [rsp+48h+var_10]
.text:0000000000008587                 xor     rdi, fs:28h
.text:0000000000008590                 jnz     short loc_859C
.text:0000000000008592                 add     rsp, 48h
.text:0000000000008596                 retn
.text:0000000000008597 ; ---------------------------------------------------------------------------
.text:0000000000008597
.text:0000000000008597 loc_8597:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000008597                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000008597                 call    _abort
.text:000000000000859C ; ---------------------------------------------------------------------------
.text:000000000000859C
.text:000000000000859C loc_859C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000859C                 call    ___stack_chk_fail
.text:000000000000859C ; } // starts at 8510
.text:000000000000859C quotearg_n_custom_mem endp
.text:000000000000859C
.text:000000000000859C ; ---------------------------------------------------------------------------
.text:00000000000085A1                 align 10h
.text:00000000000085B0
.text:00000000000085B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085B0
.text:00000000000085B0
.text:00000000000085B0                 public quotearg_n_custom
.text:00000000000085B0 quotearg_n_custom proc near
.text:00000000000085B0 ; __unwind {
.text:00000000000085B0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000085B7                 jmp     quotearg_n_custom_mem
.text:00000000000085B7 ; } // starts at 85B0
.text:00000000000085B7 quotearg_n_custom endp
.text:00000000000085B7
.text:00000000000085B7 ; ---------------------------------------------------------------------------
.text:00000000000085BC                 align 20h
.text:00000000000085C0
.text:00000000000085C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085C0
.text:00000000000085C0
.text:00000000000085C0                 public quotearg_custom
.text:00000000000085C0 quotearg_custom proc near
.text:00000000000085C0 ; __unwind {
.text:00000000000085C0                 mov     rcx, rdx
.text:00000000000085C3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000085CA                 mov     rdx, rsi
.text:00000000000085CD                 mov     rsi, rdi
.text:00000000000085D0                 xor     edi, edi
.text:00000000000085D2                 jmp     quotearg_n_custom_mem
.text:00000000000085D2 ; } // starts at 85C0
.text:00000000000085D2 quotearg_custom endp
.text:00000000000085D2
.text:00000000000085D2 ; ---------------------------------------------------------------------------
.text:00000000000085D7                 align 20h
.text:00000000000085E0
.text:00000000000085E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000085E0
.text:00000000000085E0
.text:00000000000085E0                 public quotearg_custom_mem
.text:00000000000085E0 quotearg_custom_mem proc near
.text:00000000000085E0 ; __unwind {
.text:00000000000085E0                 mov     r8, rcx
.text:00000000000085E3                 mov     rcx, rdx
.text:00000000000085E6                 mov     rdx, rsi
.text:00000000000085E9                 mov     rsi, rdi
.text:00000000000085EC                 xor     edi, edi
.text:00000000000085EE                 jmp     quotearg_n_custom_mem
.text:00000000000085EE ; } // starts at 85E0
.text:00000000000085EE quotearg_custom_mem endp
.text:00000000000085EE
.text:00000000000085EE ; ---------------------------------------------------------------------------
.text:00000000000085F3                 align 20h
.text:0000000000008600
.text:0000000000008600 ; =============== S U B R O U T I N E =======================================
.text:0000000000008600
.text:0000000000008600
.text:0000000000008600                 public quote_n_mem
.text:0000000000008600 quote_n_mem     proc near
.text:0000000000008600 ; __unwind {
.text:0000000000008600                 lea     rcx, quote_quoting_options
.text:0000000000008607                 jmp     quotearg_n_options
.text:0000000000008607 ; } // starts at 8600
.text:0000000000008607 quote_n_mem     endp
.text:0000000000008607
.text:0000000000008607 ; ---------------------------------------------------------------------------
.text:000000000000860C                 align 10h
.text:0000000000008610
.text:0000000000008610 ; =============== S U B R O U T I N E =======================================
.text:0000000000008610
.text:0000000000008610
.text:0000000000008610                 public quote_mem
.text:0000000000008610 quote_mem       proc near
.text:0000000000008610 ; __unwind {
.text:0000000000008610                 lea     rcx, quote_quoting_options
.text:0000000000008617                 mov     rdx, rsi
.text:000000000000861A                 mov     rsi, rdi
.text:000000000000861D                 xor     edi, edi
.text:000000000000861F                 jmp     quotearg_n_options
.text:000000000000861F ; } // starts at 8610
.text:000000000000861F quote_mem       endp
.text:000000000000861F
.text:000000000000861F ; ---------------------------------------------------------------------------
.text:0000000000008624                 align 10h
.text:0000000000008630
.text:0000000000008630 ; =============== S U B R O U T I N E =======================================
.text:0000000000008630
.text:0000000000008630
.text:0000000000008630                 public quote_n
.text:0000000000008630 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↓p
.text:0000000000008630 ; __unwind {
.text:0000000000008630                 lea     rcx, quote_quoting_options
.text:0000000000008637                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000863E                 jmp     quotearg_n_options
.text:000000000000863E ; } // starts at 8630
.text:000000000000863E quote_n         endp
.text:000000000000863E
.text:000000000000863E ; ---------------------------------------------------------------------------
.text:0000000000008643                 align 10h
.text:0000000000008650
.text:0000000000008650 ; =============== S U B R O U T I N E =======================================
.text:0000000000008650
.text:0000000000008650
.text:0000000000008650                 public quote
.text:0000000000008650 quote           proc near               ; CODE XREF: argmatch_valid+5A↓p
.text:0000000000008650                                         ; argmatch_valid+A9↓p ...
.text:0000000000008650 ; __unwind {
.text:0000000000008650                 lea     rcx, quote_quoting_options
.text:0000000000008657                 mov     rsi, rdi
.text:000000000000865A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008661                 xor     edi, edi
.text:0000000000008663                 jmp     quotearg_n_options
.text:0000000000008663 ; } // starts at 8650
.text:0000000000008663 quote           endp
.text:0000000000008663
.text:0000000000008663 ; ---------------------------------------------------------------------------
.text:0000000000008668                 align 10h
.text:0000000000008670
.text:0000000000008670 ; =============== S U B R O U T I N E =======================================
.text:0000000000008670
.text:0000000000008670 ; Attributes: info_from_lumina
.text:0000000000008670
.text:0000000000008670                 public renameat2
.text:0000000000008670 renameat2       proc near               ; CODE XREF: backupfile_internal+34F↑p
.text:0000000000008670
.text:0000000000008670 oldfd           = dword ptr -174h
.text:0000000000008670 var_170         = qword ptr -170h
.text:0000000000008670 stat_buf        = stat ptr -168h
.text:0000000000008670 var_D8          = stat ptr -0D8h
.text:0000000000008670 var_40          = qword ptr -40h
.text:0000000000008670
.text:0000000000008670 ; __unwind {
.text:0000000000008670                 push    r15
.text:0000000000008672                 push    r14
.text:0000000000008674                 mov     r9d, r8d
.text:0000000000008677                 push    r13
.text:0000000000008679                 push    r12
.text:000000000000867B                 mov     r14d, edx
.text:000000000000867E                 push    rbp
.text:000000000000867F                 push    rbx
.text:0000000000008680                 mov     r12, rsi
.text:0000000000008683                 mov     r13, rcx
.text:0000000000008686                 mov     ebp, r8d
.text:0000000000008689                 mov     r8, rcx
.text:000000000000868C                 sub     rsp, 148h
.text:0000000000008693                 mov     ecx, edx
.text:0000000000008695                 mov     rdx, rsi
.text:0000000000008698                 mov     rax, fs:28h
.text:00000000000086A1                 mov     [rsp+178h+var_40], rax
.text:00000000000086A9                 xor     eax, eax
.text:00000000000086AB                 mov     esi, edi
.text:00000000000086AD                 mov     [rsp+178h+oldfd], edi
.text:00000000000086B1                 mov     edi, 13Ch       ; sysno
.text:00000000000086B6                 call    _syscall
.text:00000000000086BB                 mov     rbx, rax
.text:00000000000086BE                 mov     r15d, eax
.text:00000000000086C1                 call    ___errno_location
.text:00000000000086C6                 test    ebx, ebx
.text:00000000000086C8                 js      short loc_8700
.text:00000000000086CA
.text:00000000000086CA loc_86CA:                               ; CODE XREF: renameat2+A6↓j
.text:00000000000086CA                                         ; renameat2+F8↓j ...
.text:00000000000086CA                 mov     rdx, [rsp+178h+var_40]
.text:00000000000086D2                 xor     rdx, fs:28h
.text:00000000000086DB                 mov     eax, r15d
.text:00000000000086DE                 jnz     loc_88D5
.text:00000000000086E4                 add     rsp, 148h
.text:00000000000086EB                 pop     rbx
.text:00000000000086EC                 pop     rbp
.text:00000000000086ED                 pop     r12
.text:00000000000086EF                 pop     r13
.text:00000000000086F1                 pop     r14
.text:00000000000086F3                 pop     r15
.text:00000000000086F5                 retn
.text:00000000000086F5 ; ---------------------------------------------------------------------------
.text:00000000000086F6                 align 20h
.text:0000000000008700
.text:0000000000008700 loc_8700:                               ; CODE XREF: renameat2+58↑j
.text:0000000000008700                 mov     r9, rax
.text:0000000000008703                 mov     eax, [rax]
.text:0000000000008705                 lea     ecx, [rax-16h]
.text:0000000000008708                 and     ecx, 0FFFFFFEFh
.text:000000000000870B                 setnz   bl
.text:000000000000870E                 cmp     eax, 5Fh ; '_'
.text:0000000000008711                 setnz   al
.text:0000000000008714                 and     bl, al
.text:0000000000008716                 jnz     short loc_86CA
.text:0000000000008718                 test    ebp, ebp
.text:000000000000871A                 jnz     short loc_8770
.text:000000000000871C
.text:000000000000871C loc_871C:                               ; CODE XREF: renameat2+21D↓j
.text:000000000000871C                 mov     rdi, r12        ; s
.text:000000000000871F                 mov     [rsp+178h+var_170], r9
.text:0000000000008724                 call    _strlen
.text:0000000000008729                 mov     rdi, r13        ; s
.text:000000000000872C                 mov     rbp, rax
.text:000000000000872F                 call    _strlen
.text:0000000000008734                 test    rbp, rbp
.text:0000000000008737                 jz      short loc_8753
.text:0000000000008739                 test    rax, rax
.text:000000000000873C                 mov     r9, [rsp+178h+var_170]
.text:0000000000008741                 jz      short loc_8753
.text:0000000000008743                 cmp     byte ptr [r12+rbp-1], 2Fh ; '/'
.text:0000000000008749                 jz      short loc_8790
.text:000000000000874B                 cmp     byte ptr [r13+rax-1], 2Fh ; '/'
.text:0000000000008751                 jz      short loc_8790
.text:0000000000008753
.text:0000000000008753 loc_8753:                               ; CODE XREF: renameat2+C7↑j
.text:0000000000008753                                         ; renameat2+D1↑j ...
.text:0000000000008753                 mov     edi, [rsp+178h+oldfd] ; oldfd
.text:0000000000008757                 mov     rcx, r13        ; new
.text:000000000000875A                 mov     edx, r14d       ; newfd
.text:000000000000875D                 mov     rsi, r12        ; old
.text:0000000000008760                 call    _renameat
.text:0000000000008765                 mov     r15d, eax
.text:0000000000008768                 jmp     loc_86CA
.text:0000000000008768 ; ---------------------------------------------------------------------------
.text:000000000000876D                 align 10h
.text:0000000000008770
.text:0000000000008770 loc_8770:                               ; CODE XREF: renameat2+AA↑j
.text:0000000000008770                 and     ebp, 0FFFFFFFEh
.text:0000000000008773                 jz      short loc_87E0
.text:0000000000008775                 mov     dword ptr [r9], 5Fh ; '_'
.text:000000000000877C                 mov     r15d, 0FFFFFFFFh
.text:0000000000008782                 jmp     loc_86CA
.text:0000000000008782 ; ---------------------------------------------------------------------------
.text:0000000000008787                 align 10h
.text:0000000000008790
.text:0000000000008790 loc_8790:                               ; CODE XREF: renameat2+D9↑j
.text:0000000000008790                                         ; renameat2+E1↑j
.text:0000000000008790                 mov     esi, [rsp+178h+oldfd] ; fildes
.text:0000000000008794                 lea     rcx, [rsp+178h+stat_buf] ; stat_buf
.text:0000000000008799                 mov     r8d, 100h       ; flag
.text:000000000000879F                 mov     rdx, r12        ; filename
.text:00000000000087A2                 mov     edi, 1          ; ver
.text:00000000000087A7                 mov     [rsp+178h+var_170], r9
.text:00000000000087AC                 call    ___fxstatat
.text:00000000000087B1                 test    eax, eax
.text:00000000000087B3                 jnz     short loc_8819
.text:00000000000087B5                 test    bl, bl
.text:00000000000087B7                 mov     r9, [rsp+178h+var_170]
.text:00000000000087BC                 jz      short loc_883A
.text:00000000000087BE                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:00000000000087C2                 and     eax, 0F000h
.text:00000000000087C7                 cmp     eax, 4000h
.text:00000000000087CC                 jz      short loc_8753
.text:00000000000087CE                 mov     dword ptr [r9], 2
.text:00000000000087D5                 mov     r15d, 0FFFFFFFFh
.text:00000000000087DB                 jmp     loc_86CA
.text:00000000000087E0 ; ---------------------------------------------------------------------------
.text:00000000000087E0
.text:00000000000087E0 loc_87E0:                               ; CODE XREF: renameat2+103↑j
.text:00000000000087E0                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:00000000000087E8                 mov     r8d, 100h       ; flag
.text:00000000000087EE                 mov     rdx, r13        ; filename
.text:00000000000087F1                 mov     esi, r14d       ; fildes
.text:00000000000087F4                 mov     edi, 1          ; ver
.text:00000000000087F9                 mov     [rsp+178h+var_170], r9
.text:00000000000087FE                 call    ___fxstatat
.text:0000000000008803                 test    eax, eax
.text:0000000000008805                 mov     r9, [rsp+178h+var_170]
.text:000000000000880A                 jz      short loc_8828
.text:000000000000880C                 mov     eax, [r9]
.text:000000000000880F                 cmp     eax, 4Bh ; 'K'
.text:0000000000008812                 jz      short loc_8828
.text:0000000000008814                 cmp     eax, 2
.text:0000000000008817                 jz      short loc_8888
.text:0000000000008819
.text:0000000000008819 loc_8819:                               ; CODE XREF: renameat2+143↑j
.text:0000000000008819                                         ; renameat2+1FA↓j ...
.text:0000000000008819                 mov     r15d, 0FFFFFFFFh
.text:000000000000881F                 jmp     loc_86CA
.text:000000000000881F ; ---------------------------------------------------------------------------
.text:0000000000008824                 align 8
.text:0000000000008828
.text:0000000000008828 loc_8828:                               ; CODE XREF: renameat2+19A↑j
.text:0000000000008828                                         ; renameat2+1A2↑j
.text:0000000000008828                 mov     dword ptr [r9], 11h
.text:000000000000882F                 mov     r15d, 0FFFFFFFFh
.text:0000000000008835                 jmp     loc_86CA
.text:000000000000883A ; ---------------------------------------------------------------------------
.text:000000000000883A
.text:000000000000883A loc_883A:                               ; CODE XREF: renameat2+14C↑j
.text:000000000000883A                 lea     rcx, [rsp+178h+var_D8] ; stat_buf
.text:0000000000008842                 mov     r8d, 100h       ; flag
.text:0000000000008848                 mov     rdx, r13        ; filename
.text:000000000000884B                 mov     esi, r14d       ; fildes
.text:000000000000884E                 mov     edi, 1          ; ver
.text:0000000000008853                 mov     [rsp+178h+var_170], r9
.text:0000000000008858                 call    ___fxstatat
.text:000000000000885D                 test    eax, eax
.text:000000000000885F                 mov     r9, [rsp+178h+var_170]
.text:0000000000008864                 jz      short loc_8892
.text:0000000000008866                 cmp     dword ptr [r9], 2
.text:000000000000886A                 jnz     short loc_8819
.text:000000000000886C                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:0000000000008870                 and     eax, 0F000h
.text:0000000000008875                 cmp     eax, 4000h
.text:000000000000887A                 jnz     short loc_8819
.text:000000000000887C                 jmp     loc_8753
.text:000000000000887C ; ---------------------------------------------------------------------------
.text:0000000000008881                 align 8
.text:0000000000008888
.text:0000000000008888 loc_8888:                               ; CODE XREF: renameat2+1A7↑j
.text:0000000000008888                 mov     ebx, 1
.text:000000000000888D                 jmp     loc_871C
.text:0000000000008892 ; ---------------------------------------------------------------------------
.text:0000000000008892
.text:0000000000008892 loc_8892:                               ; CODE XREF: renameat2+1F4↑j
.text:0000000000008892                 mov     eax, [rsp+178h+var_D8.st_mode]
.text:0000000000008899                 and     eax, 0F000h
.text:000000000000889E                 cmp     eax, 4000h
.text:00000000000088A3                 jz      short loc_88B1
.text:00000000000088A5                 mov     dword ptr [r9], 14h
.text:00000000000088AC                 jmp     loc_8819
.text:00000000000088B1 ; ---------------------------------------------------------------------------
.text:00000000000088B1
.text:00000000000088B1 loc_88B1:                               ; CODE XREF: renameat2+233↑j
.text:00000000000088B1                 mov     eax, [rsp+178h+stat_buf.st_mode]
.text:00000000000088B5                 and     eax, 0F000h
.text:00000000000088BA                 cmp     eax, 4000h
.text:00000000000088BF                 jz      loc_8753
.text:00000000000088C5                 mov     dword ptr [r9], 15h
.text:00000000000088CC                 or      r15d, 0FFFFFFFFh
.text:00000000000088D0                 jmp     loc_86CA
.text:00000000000088D5 ; ---------------------------------------------------------------------------
.text:00000000000088D5
.text:00000000000088D5 loc_88D5:                               ; CODE XREF: renameat2+6E↑j
.text:00000000000088D5                 call    ___stack_chk_fail
.text:00000000000088D5 ; } // starts at 8670
.text:00000000000088D5 renameat2       endp
.text:00000000000088D5
.text:00000000000088D5 ; ---------------------------------------------------------------------------
.text:00000000000088DA                 align 20h
.text:00000000000088E0
.text:00000000000088E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088E0
.text:00000000000088E0
.text:00000000000088E0 ; __int64 __fastcall same_nameat_part_0(int fildes)
.text:00000000000088E0 same_nameat_part_0 proc near            ; CODE XREF: same_nameat+8D↓j
.text:00000000000088E0
.text:00000000000088E0 var_158         = qword ptr -158h
.text:00000000000088E0 var_150         = qword ptr -150h
.text:00000000000088E0 stat_buf        = stat ptr -0C8h
.text:00000000000088E0 var_30          = qword ptr -30h
.text:00000000000088E0
.text:00000000000088E0 ; __unwind {
.text:00000000000088E0                 push    r13
.text:00000000000088E2                 push    r12
.text:00000000000088E4                 mov     r13d, edi
.text:00000000000088E7                 push    rbp
.text:00000000000088E8                 push    rbx
.text:00000000000088E9                 mov     rdi, rsi
.text:00000000000088EC                 mov     ebp, edx
.text:00000000000088EE                 mov     r12, rcx
.text:00000000000088F1                 sub     rsp, 138h
.text:00000000000088F8                 mov     rax, fs:28h
.text:0000000000008901                 mov     [rsp+158h+var_30], rax
.text:0000000000008909                 xor     eax, eax
.text:000000000000890B                 call    dir_name
.text:0000000000008910                 mov     rcx, rsp        ; stat_buf
.text:0000000000008913                 mov     r8d, 100h       ; flag
.text:0000000000008919                 mov     rdx, rax        ; filename
.text:000000000000891C                 mov     esi, r13d       ; fildes
.text:000000000000891F                 mov     edi, 1          ; ver
.text:0000000000008924                 mov     rbx, rax
.text:0000000000008927                 call    ___fxstatat
.text:000000000000892C                 test    eax, eax
.text:000000000000892E                 jnz     loc_89E0
.text:0000000000008934
.text:0000000000008934 loc_8934:                               ; CODE XREF: same_nameat_part_0+11D↓j
.text:0000000000008934                 mov     rdi, rbx        ; ptr
.text:0000000000008937                 call    _free
.text:000000000000893C                 mov     rdi, r12
.text:000000000000893F                 call    dir_name
.text:0000000000008944                 lea     rcx, [rsp+158h+stat_buf] ; stat_buf
.text:000000000000894C                 mov     r8d, 100h       ; flag
.text:0000000000008952                 mov     rdx, rax        ; filename
.text:0000000000008955                 mov     esi, ebp        ; fildes
.text:0000000000008957                 mov     edi, 1          ; ver
.text:000000000000895C                 mov     rbx, rax
.text:000000000000895F                 call    ___fxstatat
.text:0000000000008964                 test    eax, eax
.text:0000000000008966                 jnz     short loc_89B8
.text:0000000000008968
.text:0000000000008968 loc_8968:                               ; CODE XREF: same_nameat_part_0+F5↓j
.text:0000000000008968                 xor     ebp, ebp
.text:000000000000896A                 mov     rax, [rsp+158h+stat_buf.st_ino]
.text:0000000000008972                 cmp     [rsp+158h+var_150], rax
.text:0000000000008977                 jnz     short loc_8989
.text:0000000000008979                 mov     rax, [rsp+158h+stat_buf.st_dev]
.text:0000000000008981                 cmp     [rsp+158h+var_158], rax
.text:0000000000008985                 setz    bpl
.text:0000000000008989
.text:0000000000008989 loc_8989:                               ; CODE XREF: same_nameat_part_0+97↑j
.text:0000000000008989                 mov     rdi, rbx        ; ptr
.text:000000000000898C                 call    _free
.text:0000000000008991                 mov     rdx, [rsp+158h+var_30]
.text:0000000000008999                 xor     rdx, fs:28h
.text:00000000000089A2                 mov     eax, ebp
.text:00000000000089A4                 jnz     short loc_8A02
.text:00000000000089A6                 add     rsp, 138h
.text:00000000000089AD                 pop     rbx
.text:00000000000089AE                 pop     rbp
.text:00000000000089AF                 pop     r12
.text:00000000000089B1                 pop     r13
.text:00000000000089B3                 retn
.text:00000000000089B3 ; ---------------------------------------------------------------------------
.text:00000000000089B4                 align 8
.text:00000000000089B8
.text:00000000000089B8 loc_89B8:                               ; CODE XREF: same_nameat_part_0+86↑j
.text:00000000000089B8                 call    ___errno_location
.text:00000000000089BD                 mov     esi, [rax]      ; errnum
.text:00000000000089BF                 lea     rdx, aS_0+2     ; format
.text:00000000000089C6                 mov     rcx, rbx
.text:00000000000089C9                 mov     edi, 1          ; status
.text:00000000000089CE                 xor     eax, eax
.text:00000000000089D0                 call    _error
.text:00000000000089D5                 jmp     short loc_8968
.text:00000000000089D5 ; ---------------------------------------------------------------------------
.text:00000000000089D7                 align 20h
.text:00000000000089E0
.text:00000000000089E0 loc_89E0:                               ; CODE XREF: same_nameat_part_0+4E↑j
.text:00000000000089E0                 call    ___errno_location
.text:00000000000089E5                 mov     esi, [rax]      ; errnum
.text:00000000000089E7                 lea     rdx, aS_0+2     ; format
.text:00000000000089EE                 mov     rcx, rbx
.text:00000000000089F1                 mov     edi, 1          ; status
.text:00000000000089F6                 xor     eax, eax
.text:00000000000089F8                 call    _error
.text:00000000000089FD                 jmp     loc_8934
.text:0000000000008A02 ; ---------------------------------------------------------------------------
.text:0000000000008A02
.text:0000000000008A02 loc_8A02:                               ; CODE XREF: same_nameat_part_0+C4↑j
.text:0000000000008A02                 call    ___stack_chk_fail
.text:0000000000008A02 ; } // starts at 88E0
.text:0000000000008A02 same_nameat_part_0 endp
.text:0000000000008A02
.text:0000000000008A02 ; ---------------------------------------------------------------------------
.text:0000000000008A07                 align 10h
.text:0000000000008A10
.text:0000000000008A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A10
.text:0000000000008A10
.text:0000000000008A10                 public same_nameat
.text:0000000000008A10 same_nameat     proc near               ; CODE XREF: do_link+A17↑p
.text:0000000000008A10                                         ; same_name+D↓j
.text:0000000000008A10
.text:0000000000008A10 fildes          = dword ptr -3Ch
.text:0000000000008A10
.text:0000000000008A10 ; __unwind {
.text:0000000000008A10                 push    r15
.text:0000000000008A12                 push    r14
.text:0000000000008A14                 mov     r15d, edx
.text:0000000000008A17                 push    r13
.text:0000000000008A19                 push    r12
.text:0000000000008A1B                 push    rbp
.text:0000000000008A1C                 push    rbx
.text:0000000000008A1D                 mov     rbp, rcx
.text:0000000000008A20                 mov     rbx, rsi
.text:0000000000008A23                 sub     rsp, 18h
.text:0000000000008A27                 mov     [rsp+48h+fildes], edi
.text:0000000000008A2B                 mov     rdi, rsi
.text:0000000000008A2E                 call    last_component
.text:0000000000008A33                 mov     rdi, rbp
.text:0000000000008A36                 mov     r12, rax
.text:0000000000008A39                 call    last_component
.text:0000000000008A3E                 mov     rdi, r12
.text:0000000000008A41                 mov     r13, rax
.text:0000000000008A44                 call    base_len
.text:0000000000008A49                 mov     rdi, r13
.text:0000000000008A4C                 mov     r14, rax
.text:0000000000008A4F                 call    base_len
.text:0000000000008A54                 cmp     r14, rax
.text:0000000000008A57                 jz      short loc_8A70
.text:0000000000008A59
.text:0000000000008A59 loc_8A59:                               ; CODE XREF: same_nameat+70↓j
.text:0000000000008A59                 add     rsp, 18h
.text:0000000000008A5D                 xor     eax, eax
.text:0000000000008A5F                 pop     rbx
.text:0000000000008A60                 pop     rbp
.text:0000000000008A61                 pop     r12
.text:0000000000008A63                 pop     r13
.text:0000000000008A65                 pop     r14
.text:0000000000008A67                 pop     r15
.text:0000000000008A69                 retn
.text:0000000000008A69 ; ---------------------------------------------------------------------------
.text:0000000000008A6A                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: same_nameat+47↑j
.text:0000000000008A70                 mov     rdx, r14        ; n
.text:0000000000008A73                 mov     rsi, r13        ; s2
.text:0000000000008A76                 mov     rdi, r12        ; s1
.text:0000000000008A79                 call    _memcmp
.text:0000000000008A7E                 test    eax, eax
.text:0000000000008A80                 jnz     short loc_8A59
.text:0000000000008A82                 mov     edi, [rsp+48h+fildes] ; fildes
.text:0000000000008A86                 add     rsp, 18h
.text:0000000000008A8A                 mov     rcx, rbp
.text:0000000000008A8D                 mov     edx, r15d
.text:0000000000008A90                 mov     rsi, rbx
.text:0000000000008A93                 pop     rbx
.text:0000000000008A94                 pop     rbp
.text:0000000000008A95                 pop     r12
.text:0000000000008A97                 pop     r13
.text:0000000000008A99                 pop     r14
.text:0000000000008A9B                 pop     r15
.text:0000000000008A9D                 jmp     same_nameat_part_0
.text:0000000000008A9D ; } // starts at 8A10
.text:0000000000008A9D same_nameat     endp
.text:0000000000008A9D
.text:0000000000008A9D ; ---------------------------------------------------------------------------
.text:0000000000008AA2                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AB0
.text:0000000000008AB0
.text:0000000000008AB0                 public same_name
.text:0000000000008AB0 same_name       proc near               ; CODE XREF: triple_compare+24↑p
.text:0000000000008AB0 ; __unwind {
.text:0000000000008AB0                 mov     edx, 0FFFFFF9Ch
.text:0000000000008AB5                 mov     rcx, rsi
.text:0000000000008AB8                 mov     rsi, rdi
.text:0000000000008ABB                 mov     edi, edx
.text:0000000000008ABD                 jmp     same_nameat
.text:0000000000008ABD ; } // starts at 8AB0
.text:0000000000008ABD same_name       endp
.text:0000000000008ABD
.text:0000000000008ABD ; ---------------------------------------------------------------------------
.text:0000000000008AC2                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AD0
.text:0000000000008AD0
.text:0000000000008AD0 ; __int64 __fastcall try_nocreate(char *filename)
.text:0000000000008AD0 try_nocreate    proc near               ; DATA XREF: gen_tempname_len+3D↓o
.text:0000000000008AD0
.text:0000000000008AD0 var_10          = qword ptr -10h
.text:0000000000008AD0
.text:0000000000008AD0 ; __unwind {
.text:0000000000008AD0                 push    rbx
.text:0000000000008AD1                 mov     rsi, rdi        ; filename
.text:0000000000008AD4                 mov     edi, 1          ; ver
.text:0000000000008AD9                 sub     rsp, 0A0h
.text:0000000000008AE0                 mov     rdx, rsp        ; stat_buf
.text:0000000000008AE3                 mov     rax, fs:28h
.text:0000000000008AEC                 mov     [rsp+0A8h+var_10], rax
.text:0000000000008AF4                 xor     eax, eax
.text:0000000000008AF6                 call    ___lxstat
.text:0000000000008AFB                 mov     ebx, eax
.text:0000000000008AFD                 call    ___errno_location
.text:0000000000008B02                 test    ebx, ebx
.text:0000000000008B04                 jz      short loc_8B20
.text:0000000000008B06                 mov     edx, [rax]
.text:0000000000008B08                 cmp     edx, 4Bh ; 'K'
.text:0000000000008B0B                 jz      short loc_8B20
.text:0000000000008B0D                 xor     eax, eax
.text:0000000000008B0F                 cmp     edx, 2
.text:0000000000008B12                 setnz   al
.text:0000000000008B15                 neg     eax
.text:0000000000008B17                 jmp     short loc_8B2B
.text:0000000000008B17 ; ---------------------------------------------------------------------------
.text:0000000000008B19                 align 20h
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: try_nocreate+34↑j
.text:0000000000008B20                                         ; try_nocreate+3B↑j
.text:0000000000008B20                 mov     dword ptr [rax], 11h
.text:0000000000008B26                 mov     eax, 0FFFFFFFFh
.text:0000000000008B2B
.text:0000000000008B2B loc_8B2B:                               ; CODE XREF: try_nocreate+47↑j
.text:0000000000008B2B                 mov     rcx, [rsp+0A8h+var_10]
.text:0000000000008B33                 xor     rcx, fs:28h
.text:0000000000008B3C                 jnz     short loc_8B47
.text:0000000000008B3E                 add     rsp, 0A0h
.text:0000000000008B45                 pop     rbx
.text:0000000000008B46                 retn
.text:0000000000008B47 ; ---------------------------------------------------------------------------
.text:0000000000008B47
.text:0000000000008B47 loc_8B47:                               ; CODE XREF: try_nocreate+6C↑j
.text:0000000000008B47                 call    ___stack_chk_fail
.text:0000000000008B47 ; } // starts at 8AD0
.text:0000000000008B47 try_nocreate    endp
.text:0000000000008B47
.text:0000000000008B47 ; ---------------------------------------------------------------------------
.text:0000000000008B4C                 align 10h
.text:0000000000008B50
.text:0000000000008B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B50
.text:0000000000008B50
.text:0000000000008B50 try_dir         proc near               ; DATA XREF: gen_tempname_len+75↓o
.text:0000000000008B50 ; __unwind {
.text:0000000000008B50                 mov     esi, 1C0h       ; mode
.text:0000000000008B55                 jmp     _mkdir
.text:0000000000008B55 ; } // starts at 8B50
.text:0000000000008B55 try_dir         endp
.text:0000000000008B55
.text:0000000000008B55 ; ---------------------------------------------------------------------------
.text:0000000000008B5A                 align 20h
.text:0000000000008B60
.text:0000000000008B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B60
.text:0000000000008B60
.text:0000000000008B60 try_file        proc near               ; DATA XREF: gen_tempname_len+55↓o
.text:0000000000008B60 ; __unwind {
.text:0000000000008B60                 mov     esi, [rsi]
.text:0000000000008B62                 mov     edx, 180h
.text:0000000000008B67                 xor     eax, eax
.text:0000000000008B69                 and     sil, 3Ch
.text:0000000000008B6D                 or      sil, 0C2h       ; oflag
.text:0000000000008B71                 jmp     _open
.text:0000000000008B71 ; } // starts at 8B60
.text:0000000000008B71 try_file        endp
.text:0000000000008B71
.text:0000000000008B71 ; ---------------------------------------------------------------------------
.text:0000000000008B76                 align 20h
.text:0000000000008B80
.text:0000000000008B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B80
.text:0000000000008B80
.text:0000000000008B80 ; __int64 __fastcall try_tempname_len(char *s)
.text:0000000000008B80                 public try_tempname_len
.text:0000000000008B80 try_tempname_len proc near              ; CODE XREF: force_linkat+96↑p
.text:0000000000008B80                                         ; force_symlinkat+7A↑p ...
.text:0000000000008B80
.text:0000000000008B80 var_68          = qword ptr -68h
.text:0000000000008B80 var_60          = qword ptr -60h
.text:0000000000008B80 var_58          = qword ptr -58h
.text:0000000000008B80 var_50          = qword ptr -50h
.text:0000000000008B80 var_48          = qword ptr -48h
.text:0000000000008B80 var_3C          = dword ptr -3Ch
.text:0000000000008B80
.text:0000000000008B80 ; __unwind {
.text:0000000000008B80                 push    r15
.text:0000000000008B82                 push    r14
.text:0000000000008B84                 mov     r15, rdi
.text:0000000000008B87                 push    r13
.text:0000000000008B89                 push    r12
.text:0000000000008B8B                 mov     r14, r8
.text:0000000000008B8E                 push    rbp
.text:0000000000008B8F                 push    rbx
.text:0000000000008B90                 mov     ebp, esi
.text:0000000000008B92                 sub     rsp, 38h
.text:0000000000008B96                 mov     [rsp+68h+var_50], rdx
.text:0000000000008B9B                 mov     [rsp+68h+var_68], rdi
.text:0000000000008B9F                 mov     [rsp+68h+var_48], rcx
.text:0000000000008BA4                 call    ___errno_location
.text:0000000000008BA9                 mov     [rsp+68h+var_60], rax
.text:0000000000008BAE                 mov     eax, [rax]
.text:0000000000008BB0                 mov     rdi, r15        ; s
.text:0000000000008BB3                 mov     [rsp+68h+var_3C], eax
.text:0000000000008BB7                 call    _strlen
.text:0000000000008BBC                 movsxd  rsi, ebp
.text:0000000000008BBF                 lea     rdx, [rsi+r14]
.text:0000000000008BC3                 cmp     rdx, rax
.text:0000000000008BC6                 ja      loc_8CDB
.text:0000000000008BCC                 sub     rax, r14
.text:0000000000008BCF                 mov     rbx, rax
.text:0000000000008BD2                 sub     rbx, rsi
.text:0000000000008BD5                 lea     rsi, name+13h   ; accept
.text:0000000000008BDC                 lea     rax, [r15+rbx]
.text:0000000000008BE0                 mov     rdi, rax        ; s
.text:0000000000008BE3                 mov     [rsp+68h+var_58], rax
.text:0000000000008BE8                 call    _strspn
.text:0000000000008BED                 cmp     r14, rax
.text:0000000000008BF0                 ja      loc_8CDB
.text:0000000000008BF6                 xor     edi, edi
.text:0000000000008BF8                 mov     rsi, r14
.text:0000000000008BFB                 call    randint_all_new
.text:0000000000008C00                 test    rax, rax
.text:0000000000008C03                 mov     rbp, rax
.text:0000000000008C06                 jz      loc_8CED
.text:0000000000008C0C                 mov     rax, [rsp+68h+var_68]
.text:0000000000008C10                 lea     r12, letters    ; "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM"...
.text:0000000000008C17                 mov     r13d, 3A2F8h
.text:0000000000008C1D                 add     rax, r14
.text:0000000000008C20                 add     rbx, rax
.text:0000000000008C23                 nop     dword ptr [rax+rax+00h]
.text:0000000000008C28
.text:0000000000008C28 loc_8C28:                               ; CODE XREF: try_tempname_len+FD↓j
.text:0000000000008C28                 test    r14, r14
.text:0000000000008C2B                 mov     r15, [rsp+68h+var_58]
.text:0000000000008C30                 jz      short loc_8C57
.text:0000000000008C32                 nop     word ptr [rax+rax+00h]
.text:0000000000008C38
.text:0000000000008C38 loc_8C38:                               ; CODE XREF: try_tempname_len+D5↓j
.text:0000000000008C38                 mov     esi, 3Dh ; '='
.text:0000000000008C3D                 mov     rdi, rbp
.text:0000000000008C40                 add     r15, 1
.text:0000000000008C44                 call    randint_genmax
.text:0000000000008C49                 movzx   eax, byte ptr [r12+rax]
.text:0000000000008C4E                 mov     [r15-1], al
.text:0000000000008C52                 cmp     r15, rbx
.text:0000000000008C55                 jnz     short loc_8C38
.text:0000000000008C57
.text:0000000000008C57 loc_8C57:                               ; CODE XREF: try_tempname_len+B0↑j
.text:0000000000008C57                 mov     rsi, [rsp+68h+var_50]
.text:0000000000008C5C                 mov     rdi, [rsp+68h+var_68]
.text:0000000000008C60                 mov     rax, [rsp+68h+var_48]
.text:0000000000008C65                 call    rax
.text:0000000000008C67                 test    eax, eax
.text:0000000000008C69                 mov     edx, eax
.text:0000000000008C6B                 jns     short loc_8C99
.text:0000000000008C6D                 mov     rax, [rsp+68h+var_60]
.text:0000000000008C72                 mov     ecx, [rax]
.text:0000000000008C74                 cmp     ecx, 11h
.text:0000000000008C77                 jnz     short loc_8CD4
.text:0000000000008C79                 sub     r13d, 1
.text:0000000000008C7D                 jnz     short loc_8C28
.text:0000000000008C7F                 mov     rdi, rbp        ; ptr
.text:0000000000008C82                 call    randint_all_free
.text:0000000000008C87                 mov     rax, [rsp+68h+var_60]
.text:0000000000008C8C                 mov     edx, 0FFFFFFFFh
.text:0000000000008C91                 mov     dword ptr [rax], 11h
.text:0000000000008C97                 jmp     short loc_8CC3
.text:0000000000008C99 ; ---------------------------------------------------------------------------
.text:0000000000008C99
.text:0000000000008C99 loc_8C99:                               ; CODE XREF: try_tempname_len+EB↑j
.text:0000000000008C99                 mov     rcx, [rsp+68h+var_60]
.text:0000000000008C9E                 mov     eax, [rsp+68h+var_3C]
.text:0000000000008CA2                 mov     [rcx], eax
.text:0000000000008CA4                 mov     ecx, eax
.text:0000000000008CA6
.text:0000000000008CA6 loc_8CA6:                               ; CODE XREF: try_tempname_len+159↓j
.text:0000000000008CA6                 mov     rdi, rbp        ; ptr
.text:0000000000008CA9                 mov     dword ptr [rsp+68h+var_58], edx
.text:0000000000008CAD                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000008CB0                 call    randint_all_free
.text:0000000000008CB5                 mov     rax, [rsp+68h+var_60]
.text:0000000000008CBA                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:0000000000008CBD                 mov     edx, dword ptr [rsp+68h+var_58]
.text:0000000000008CC1                 mov     [rax], ecx
.text:0000000000008CC3
.text:0000000000008CC3 loc_8CC3:                               ; CODE XREF: try_tempname_len+117↑j
.text:0000000000008CC3                                         ; try_tempname_len+16B↓j ...
.text:0000000000008CC3                 add     rsp, 38h
.text:0000000000008CC7                 mov     eax, edx
.text:0000000000008CC9                 pop     rbx
.text:0000000000008CCA                 pop     rbp
.text:0000000000008CCB                 pop     r12
.text:0000000000008CCD                 pop     r13
.text:0000000000008CCF                 pop     r14
.text:0000000000008CD1                 pop     r15
.text:0000000000008CD3                 retn
.text:0000000000008CD4 ; ---------------------------------------------------------------------------
.text:0000000000008CD4
.text:0000000000008CD4 loc_8CD4:                               ; CODE XREF: try_tempname_len+F7↑j
.text:0000000000008CD4                 mov     edx, 0FFFFFFFFh
.text:0000000000008CD9                 jmp     short loc_8CA6
.text:0000000000008CDB ; ---------------------------------------------------------------------------
.text:0000000000008CDB
.text:0000000000008CDB loc_8CDB:                               ; CODE XREF: try_tempname_len+46↑j
.text:0000000000008CDB                                         ; try_tempname_len+70↑j
.text:0000000000008CDB                 mov     rax, [rsp+68h+var_60]
.text:0000000000008CE0                 mov     edx, 0FFFFFFFFh
.text:0000000000008CE5                 mov     dword ptr [rax], 16h
.text:0000000000008CEB                 jmp     short loc_8CC3
.text:0000000000008CED ; ---------------------------------------------------------------------------
.text:0000000000008CED
.text:0000000000008CED loc_8CED:                               ; CODE XREF: try_tempname_len+86↑j
.text:0000000000008CED                 mov     edx, 0FFFFFFFFh
.text:0000000000008CF2                 jmp     short loc_8CC3
.text:0000000000008CF2 ; } // starts at 8B80
.text:0000000000008CF2 try_tempname_len endp
.text:0000000000008CF2
.text:0000000000008CF2 ; ---------------------------------------------------------------------------
.text:0000000000008CF4                 align 20h
.text:0000000000008D00
.text:0000000000008D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D00
.text:0000000000008D00
.text:0000000000008D00                 public gen_tempname_len
.text:0000000000008D00 gen_tempname_len proc near              ; CODE XREF: gen_tempname+6↓j
.text:0000000000008D00
.text:0000000000008D00 var_C           = dword ptr -0Ch
.text:0000000000008D00
.text:0000000000008D00 ; __unwind {
.text:0000000000008D00                 sub     rsp, 18h
.text:0000000000008D04                 cmp     ecx, 1
.text:0000000000008D07                 mov     [rsp+18h+var_C], edx
.text:0000000000008D0B                 jz      short loc_8D70
.text:0000000000008D0D                 cmp     ecx, 2
.text:0000000000008D10                 jz      short loc_8D38
.text:0000000000008D12                 test    ecx, ecx
.text:0000000000008D14                 jz      short loc_8D50
.text:0000000000008D16                 lea     rcx, __PRETTY_FUNCTION___5642 ; "gen_tempname_len"
.text:0000000000008D1D                 lea     rsi, file       ; "../coreutils-8.31/lib/tempname.c"
.text:0000000000008D24                 lea     rdi, s          ; "! \"invalid KIND in __gen_tempname\""
.text:0000000000008D2B                 mov     edx, 147h       ; line
.text:0000000000008D30                 call    ___assert_fail
.text:0000000000008D30 ; ---------------------------------------------------------------------------
.text:0000000000008D35                 align 8
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: gen_tempname_len+10↑j
.text:0000000000008D38                 lea     rdx, [rsp+18h+var_C]
.text:0000000000008D3D                 lea     rcx, try_nocreate
.text:0000000000008D44                 call    try_tempname_len
.text:0000000000008D49                 add     rsp, 18h
.text:0000000000008D4D                 retn
.text:0000000000008D4D ; ---------------------------------------------------------------------------
.text:0000000000008D4E                 align 10h
.text:0000000000008D50
.text:0000000000008D50 loc_8D50:                               ; CODE XREF: gen_tempname_len+14↑j
.text:0000000000008D50                 lea     rdx, [rsp+18h+var_C]
.text:0000000000008D55                 lea     rcx, try_file
.text:0000000000008D5C                 call    try_tempname_len
.text:0000000000008D61                 add     rsp, 18h
.text:0000000000008D65                 retn
.text:0000000000008D65 ; ---------------------------------------------------------------------------
.text:0000000000008D66                 align 10h
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: gen_tempname_len+B↑j
.text:0000000000008D70                 lea     rdx, [rsp+18h+var_C]
.text:0000000000008D75                 lea     rcx, try_dir
.text:0000000000008D7C                 call    try_tempname_len
.text:0000000000008D81                 add     rsp, 18h
.text:0000000000008D85                 retn
.text:0000000000008D85 ; } // starts at 8D00
.text:0000000000008D85 gen_tempname_len endp
.text:0000000000008D85
.text:0000000000008D85 ; ---------------------------------------------------------------------------
.text:0000000000008D86                 align 10h
.text:0000000000008D90
.text:0000000000008D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D90
.text:0000000000008D90
.text:0000000000008D90                 public gen_tempname
.text:0000000000008D90 gen_tempname    proc near
.text:0000000000008D90 ; __unwind {
.text:0000000000008D90                 mov     r8d, 6
.text:0000000000008D96                 jmp     gen_tempname_len
.text:0000000000008D96 ; } // starts at 8D90
.text:0000000000008D96 gen_tempname    endp
.text:0000000000008D96
.text:0000000000008D96 ; ---------------------------------------------------------------------------
.text:0000000000008D9B                 align 20h
.text:0000000000008DA0
.text:0000000000008DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DA0
.text:0000000000008DA0
.text:0000000000008DA0                 public try_tempname
.text:0000000000008DA0 try_tempname    proc near
.text:0000000000008DA0 ; __unwind {
.text:0000000000008DA0                 mov     r8d, 6
.text:0000000000008DA6                 jmp     try_tempname_len
.text:0000000000008DA6 ; } // starts at 8DA0
.text:0000000000008DA6 try_tempname    endp
.text:0000000000008DA6
.text:0000000000008DA6 ; ---------------------------------------------------------------------------
.text:0000000000008DAB                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DB0
.text:0000000000008DB0 ; Attributes: info_from_lumina
.text:0000000000008DB0
.text:0000000000008DB0 ; __int64 __fastcall fd_safer_flag(int fd)
.text:0000000000008DB0                 public fd_safer_flag
.text:0000000000008DB0 fd_safer_flag   proc near               ; CODE XREF: openat_safer+29↑p
.text:0000000000008DB0 ; __unwind {
.text:0000000000008DB0                 push    r13
.text:0000000000008DB2                 push    r12
.text:0000000000008DB4                 push    rbp
.text:0000000000008DB5                 push    rbx
.text:0000000000008DB6                 mov     ebx, edi
.text:0000000000008DB8                 sub     rsp, 8
.text:0000000000008DBC                 cmp     edi, 2
.text:0000000000008DBF                 ja      short loc_8DE2
.text:0000000000008DC1                 call    dup_safer
.text:0000000000008DC6                 mov     r12d, eax
.text:0000000000008DC9                 call    ___errno_location
.text:0000000000008DCE                 mov     r13d, [rax]
.text:0000000000008DD1                 mov     rbp, rax
.text:0000000000008DD4                 mov     edi, ebx        ; fd
.text:0000000000008DD6                 call    _close
.text:0000000000008DDB                 mov     ebx, r12d
.text:0000000000008DDE                 mov     [rbp+0], r13d
.text:0000000000008DE2
.text:0000000000008DE2 loc_8DE2:                               ; CODE XREF: fd_safer_flag+F↑j
.text:0000000000008DE2                 add     rsp, 8
.text:0000000000008DE6                 mov     eax, ebx
.text:0000000000008DE8                 pop     rbx
.text:0000000000008DE9                 pop     rbp
.text:0000000000008DEA                 pop     r12
.text:0000000000008DEC                 pop     r13
.text:0000000000008DEE                 retn
.text:0000000000008DEE ; } // starts at 8DB0
.text:0000000000008DEE fd_safer_flag   endp
.text:0000000000008DEE
.text:0000000000008DEE ; ---------------------------------------------------------------------------
.text:0000000000008DEF                 align 10h
.text:0000000000008DF0
.text:0000000000008DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DF0
.text:0000000000008DF0
.text:0000000000008DF0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000008DF0                 public version_etc_arn
.text:0000000000008DF0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_922B↓j
.text:0000000000008DF0                                         ; version_etc_va:loc_927B↓p ...
.text:0000000000008DF0
.text:0000000000008DF0 var_58          = qword ptr -58h
.text:0000000000008DF0 var_50          = qword ptr -50h
.text:0000000000008DF0 var_48          = qword ptr -48h
.text:0000000000008DF0 var_40          = qword ptr -40h
.text:0000000000008DF0
.text:0000000000008DF0 ; __unwind {
.text:0000000000008DF0                 push    r15
.text:0000000000008DF2                 push    r14
.text:0000000000008DF4                 push    r13
.text:0000000000008DF6                 push    r12
.text:0000000000008DF8                 mov     r12, r9
.text:0000000000008DFB                 push    rbp
.text:0000000000008DFC                 push    rbx
.text:0000000000008DFD                 mov     rbp, rdi
.text:0000000000008E00                 mov     rbx, r8
.text:0000000000008E03                 sub     rsp, 28h
.text:0000000000008E07                 test    rsi, rsi
.text:0000000000008E0A                 jz      loc_8F28
.text:0000000000008E10                 mov     r8, rdx
.text:0000000000008E13                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000008E1A                 mov     r9, rcx
.text:0000000000008E1D                 xor     eax, eax
.text:0000000000008E1F                 mov     rcx, rsi
.text:0000000000008E22                 mov     esi, 1
.text:0000000000008E27                 call    ___fprintf_chk
.text:0000000000008E2C
.text:0000000000008E2C loc_8E2C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000008E2C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000008E33                 xor     edi, edi        ; domainname
.text:0000000000008E35                 mov     edx, 5          ; category
.text:0000000000008E3A                 call    _dcgettext
.text:0000000000008E3F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000008E46                 mov     rcx, rax
.text:0000000000008E49                 mov     r8d, 7E3h
.text:0000000000008E4F                 mov     esi, 1
.text:0000000000008E54                 mov     rdi, rbp
.text:0000000000008E57                 xor     eax, eax
.text:0000000000008E59                 call    ___fprintf_chk
.text:0000000000008E5E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000008E65                 xor     edi, edi        ; domainname
.text:0000000000008E67                 mov     edx, 5          ; category
.text:0000000000008E6C                 call    _dcgettext
.text:0000000000008E71                 mov     rsi, rbp        ; stream
.text:0000000000008E74                 mov     rdi, rax        ; s
.text:0000000000008E77                 call    _fputs_unlocked
.text:0000000000008E7C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000008E80                 ja      def_8E94        ; jumptable 0000000000008E94 default case
.text:0000000000008E86                 lea     rdx, jpt_8E94
.text:0000000000008E8D                 movsxd  rax, ds:(jpt_8E94 - 0C9B8h)[rdx+r12*4]
.text:0000000000008E91                 add     rax, rdx
.text:0000000000008E94                 jmp     rax             ; switch jump
.text:0000000000008E94 ; ---------------------------------------------------------------------------
.text:0000000000008E96                 align 20h
.text:0000000000008EA0
.text:0000000000008EA0 loc_8EA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008EA0                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000008EA0                 mov     r9, [rbx+38h]   ; jumptable 0000000000008E94 case 8
.text:0000000000008EA4                 mov     rax, [rbx+10h]
.text:0000000000008EA8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000008EAF                 mov     r8, [rbx+8]
.text:0000000000008EB3                 mov     edx, 5          ; category
.text:0000000000008EB8                 xor     edi, edi        ; domainname
.text:0000000000008EBA                 mov     r13, [rbx+30h]
.text:0000000000008EBE                 mov     r12, [rbx+28h]
.text:0000000000008EC2                 mov     [rsp+58h+var_48], r9
.text:0000000000008EC7                 mov     r15, [rbx+20h]
.text:0000000000008ECB                 mov     r14, [rbx+18h]
.text:0000000000008ECF                 mov     [rsp+58h+var_58], rax
.text:0000000000008ED3                 mov     [rsp+58h+var_50], r8
.text:0000000000008ED8                 mov     rbx, [rbx]
.text:0000000000008EDB                 call    _dcgettext
.text:0000000000008EE0                 sub     rsp, 8
.text:0000000000008EE4
.text:0000000000008EE4 loc_8EE4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000008EE4                 mov     r9, [rsp+60h+var_48]
.text:0000000000008EE9                 mov     rdx, rax
.text:0000000000008EEC                 mov     rcx, rbx
.text:0000000000008EEF                 mov     esi, 1
.text:0000000000008EF4                 mov     rdi, rbp
.text:0000000000008EF7                 xor     eax, eax
.text:0000000000008EF9                 push    r9
.text:0000000000008EFB                 push    r13
.text:0000000000008EFD                 push    r12
.text:0000000000008EFF                 push    r15
.text:0000000000008F01                 push    r14
.text:0000000000008F03                 mov     r9, [rsp+88h+var_58]
.text:0000000000008F08                 mov     r8, [rsp+88h+var_50]
.text:0000000000008F0D                 call    ___fprintf_chk
.text:0000000000008F12                 add     rsp, 30h
.text:0000000000008F16
.text:0000000000008F16 loc_8F16:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008F16                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000008F16                 add     rsp, 28h        ; jumptable 0000000000008E94 case 0
.text:0000000000008F1A                 pop     rbx
.text:0000000000008F1B                 pop     rbp
.text:0000000000008F1C                 pop     r12
.text:0000000000008F1E                 pop     r13
.text:0000000000008F20                 pop     r14
.text:0000000000008F22                 pop     r15
.text:0000000000008F24                 retn
.text:0000000000008F24 ; ---------------------------------------------------------------------------
.text:0000000000008F25                 align 8
.text:0000000000008F28
.text:0000000000008F28 loc_8F28:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000008F28                 mov     r8, rcx
.text:0000000000008F2B                 mov     rcx, rdx
.text:0000000000008F2E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000008F35                 mov     esi, 1
.text:0000000000008F3A                 xor     eax, eax
.text:0000000000008F3C                 call    ___fprintf_chk
.text:0000000000008F41                 jmp     loc_8E2C
.text:0000000000008F41 ; ---------------------------------------------------------------------------
.text:0000000000008F46                 align 10h
.text:0000000000008F50
.text:0000000000008F50 loc_8F50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008F50                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000008F50                 mov     r10, [rbx+40h]  ; jumptable 0000000000008E94 case 9
.text:0000000000008F54                 mov     r9, [rbx+38h]
.text:0000000000008F58                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000008F5F                 mov     rax, [rbx+10h]
.text:0000000000008F63                 mov     r8, [rbx+8]
.text:0000000000008F67                 mov     edx, 5          ; category
.text:0000000000008F6C                 mov     r13, [rbx+30h]
.text:0000000000008F70                 mov     r12, [rbx+28h]
.text:0000000000008F74                 mov     r15, [rbx+20h]
.text:0000000000008F78                 mov     r14, [rbx+18h]
.text:0000000000008F7C                 mov     rbx, [rbx]
.text:0000000000008F7F                 mov     [rsp+58h+var_40], r10
.text:0000000000008F84                 mov     [rsp+58h+var_48], r9
.text:0000000000008F89                 mov     [rsp+58h+var_58], rax
.text:0000000000008F8D                 mov     [rsp+58h+var_50], r8
.text:0000000000008F92
.text:0000000000008F92 loc_8F92:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000008F92                 xor     edi, edi        ; domainname
.text:0000000000008F94                 call    _dcgettext
.text:0000000000008F99                 mov     r10, [rsp+58h+var_40]
.text:0000000000008F9E                 push    r10
.text:0000000000008FA0                 jmp     loc_8EE4
.text:0000000000008FA0 ; ---------------------------------------------------------------------------
.text:0000000000008FA5                 align 8
.text:0000000000008FA8
.text:0000000000008FA8 loc_8FA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008FA8                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000008FA8                 mov     rbx, [rbx]      ; jumptable 0000000000008E94 case 1
.text:0000000000008FAB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000008FB2                 mov     edx, 5          ; category
.text:0000000000008FB7                 xor     edi, edi        ; domainname
.text:0000000000008FB9                 call    _dcgettext
.text:0000000000008FBE                 add     rsp, 28h
.text:0000000000008FC2                 mov     rcx, rbx
.text:0000000000008FC5                 mov     rdi, rbp
.text:0000000000008FC8                 pop     rbx
.text:0000000000008FC9                 pop     rbp
.text:0000000000008FCA                 pop     r12
.text:0000000000008FCC                 pop     r13
.text:0000000000008FCE                 pop     r14
.text:0000000000008FD0                 pop     r15
.text:0000000000008FD2                 mov     rdx, rax
.text:0000000000008FD5                 mov     esi, 1
.text:0000000000008FDA                 xor     eax, eax
.text:0000000000008FDC                 jmp     ___fprintf_chk
.text:0000000000008FDC ; ---------------------------------------------------------------------------
.text:0000000000008FE1                 align 8
.text:0000000000008FE8
.text:0000000000008FE8 loc_8FE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000008FE8                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000008FE8                 mov     r12, [rbx+8]    ; jumptable 0000000000008E94 case 2
.text:0000000000008FEC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000008FF3                 mov     rbx, [rbx]
.text:0000000000008FF6                 mov     edx, 5          ; category
.text:0000000000008FFB                 xor     edi, edi        ; domainname
.text:0000000000008FFD                 call    _dcgettext
.text:0000000000009002                 add     rsp, 28h
.text:0000000000009006                 mov     r8, r12
.text:0000000000009009                 mov     rcx, rbx
.text:000000000000900C                 mov     rdi, rbp
.text:000000000000900F                 mov     rdx, rax
.text:0000000000009012                 mov     esi, 1
.text:0000000000009017                 pop     rbx
.text:0000000000009018                 pop     rbp
.text:0000000000009019                 pop     r12
.text:000000000000901B                 pop     r13
.text:000000000000901D                 pop     r14
.text:000000000000901F                 pop     r15
.text:0000000000009021                 xor     eax, eax
.text:0000000000009023                 jmp     ___fprintf_chk
.text:0000000000009023 ; ---------------------------------------------------------------------------
.text:0000000000009028                 align 10h
.text:0000000000009030
.text:0000000000009030 loc_9030:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009030                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000009030                 mov     r13, [rbx+10h]  ; jumptable 0000000000008E94 case 3
.text:0000000000009034                 mov     r12, [rbx+8]
.text:0000000000009038                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000903F                 mov     rbx, [rbx]
.text:0000000000009042                 mov     edx, 5          ; category
.text:0000000000009047                 xor     edi, edi        ; domainname
.text:0000000000009049                 call    _dcgettext
.text:000000000000904E                 add     rsp, 28h
.text:0000000000009052                 mov     r9, r13
.text:0000000000009055                 mov     r8, r12
.text:0000000000009058                 mov     rcx, rbx
.text:000000000000905B                 mov     rdi, rbp
.text:000000000000905E                 mov     rdx, rax
.text:0000000000009061                 pop     rbx
.text:0000000000009062                 pop     rbp
.text:0000000000009063                 pop     r12
.text:0000000000009065                 pop     r13
.text:0000000000009067                 pop     r14
.text:0000000000009069                 pop     r15
.text:000000000000906B                 mov     esi, 1
.text:0000000000009070                 xor     eax, eax
.text:0000000000009072                 jmp     ___fprintf_chk
.text:0000000000009072 ; ---------------------------------------------------------------------------
.text:0000000000009077                 align 20h
.text:0000000000009080
.text:0000000000009080 loc_9080:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009080                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000009080                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000008E94 case 4
.text:0000000000009087                 mov     edx, 5          ; category
.text:000000000000908C                 xor     edi, edi        ; domainname
.text:000000000000908E                 mov     r14, [rbx+18h]
.text:0000000000009092                 mov     r13, [rbx+10h]
.text:0000000000009096                 mov     r12, [rbx+8]
.text:000000000000909A                 mov     rbx, [rbx]
.text:000000000000909D                 call    _dcgettext
.text:00000000000090A2                 sub     rsp, 8
.text:00000000000090A6
.text:00000000000090A6 loc_90A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000090A6                 push    r14
.text:00000000000090A8                 mov     rdx, rax
.text:00000000000090AB                 mov     r9, r13
.text:00000000000090AE                 mov     r8, r12
.text:00000000000090B1                 mov     rcx, rbx
.text:00000000000090B4                 mov     rdi, rbp
.text:00000000000090B7                 mov     esi, 1
.text:00000000000090BC                 xor     eax, eax
.text:00000000000090BE                 call    ___fprintf_chk
.text:00000000000090C3                 pop     rax
.text:00000000000090C4                 pop     rdx
.text:00000000000090C5                 add     rsp, 28h
.text:00000000000090C9                 pop     rbx
.text:00000000000090CA                 pop     rbp
.text:00000000000090CB                 pop     r12
.text:00000000000090CD                 pop     r13
.text:00000000000090CF                 pop     r14
.text:00000000000090D1                 pop     r15
.text:00000000000090D3                 retn
.text:00000000000090D3 ; ---------------------------------------------------------------------------
.text:00000000000090D4                 align 8
.text:00000000000090D8
.text:00000000000090D8 loc_90D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000090D8                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:00000000000090D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000008E94 case 5
.text:00000000000090DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000090E3                 mov     edx, 5          ; category
.text:00000000000090E8                 xor     edi, edi        ; domainname
.text:00000000000090EA                 mov     r14, [rbx+18h]
.text:00000000000090EE                 mov     r13, [rbx+10h]
.text:00000000000090F2                 mov     r12, [rbx+8]
.text:00000000000090F6                 mov     rbx, [rbx]
.text:00000000000090F9                 call    _dcgettext
.text:00000000000090FE                 push    r15
.text:0000000000009100                 jmp     short loc_90A6
.text:0000000000009100 ; ---------------------------------------------------------------------------
.text:0000000000009102                 align 8
.text:0000000000009108
.text:0000000000009108 loc_9108:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009108                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000009108                 mov     r8, [rbx+8]     ; jumptable 0000000000008E94 case 6
.text:000000000000910C                 mov     r12, [rbx+28h]
.text:0000000000009110                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000009117                 mov     r15, [rbx+20h]
.text:000000000000911B                 mov     r14, [rbx+18h]
.text:000000000000911F                 mov     edx, 5          ; category
.text:0000000000009124                 mov     r13, [rbx+10h]
.text:0000000000009128                 xor     edi, edi        ; domainname
.text:000000000000912A                 mov     rbx, [rbx]
.text:000000000000912D                 mov     [rsp+58h+var_58], r8
.text:0000000000009131                 call    _dcgettext
.text:0000000000009136                 sub     rsp, 8
.text:000000000000913A                 mov     r9, r13
.text:000000000000913D                 push    r12
.text:000000000000913F                 push    r15
.text:0000000000009141                 push    r14
.text:0000000000009143
.text:0000000000009143 loc_9143:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000009143                 mov     r8, [rsp+78h+var_58]
.text:0000000000009148                 mov     rcx, rbx
.text:000000000000914B                 mov     rdx, rax
.text:000000000000914E                 mov     rdi, rbp
.text:0000000000009151                 mov     esi, 1
.text:0000000000009156                 xor     eax, eax
.text:0000000000009158                 call    ___fprintf_chk
.text:000000000000915D                 add     rsp, 20h
.text:0000000000009161                 add     rsp, 28h
.text:0000000000009165                 pop     rbx
.text:0000000000009166                 pop     rbp
.text:0000000000009167                 pop     r12
.text:0000000000009169                 pop     r13
.text:000000000000916B                 pop     r14
.text:000000000000916D                 pop     r15
.text:000000000000916F                 retn
.text:0000000000009170 ; ---------------------------------------------------------------------------
.text:0000000000009170
.text:0000000000009170 loc_9170:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009170                                         ; DATA XREF: .rodata:jpt_8E94↓o
.text:0000000000009170                 mov     r9, [rbx+10h]   ; jumptable 0000000000008E94 case 7
.text:0000000000009174                 mov     r13, [rbx+30h]
.text:0000000000009178                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000917F                 mov     r12, [rbx+28h]
.text:0000000000009183                 mov     r15, [rbx+20h]
.text:0000000000009187                 mov     edx, 5          ; category
.text:000000000000918C                 mov     r14, [rbx+18h]
.text:0000000000009190                 mov     r8, [rbx+8]
.text:0000000000009194                 xor     edi, edi        ; domainname
.text:0000000000009196                 mov     [rsp+58h+var_50], r9
.text:000000000000919B                 mov     rbx, [rbx]
.text:000000000000919E                 mov     [rsp+58h+var_58], r8
.text:00000000000091A2                 call    _dcgettext
.text:00000000000091A7                 push    r13
.text:00000000000091A9                 push    r12
.text:00000000000091AB                 push    r15
.text:00000000000091AD                 push    r14
.text:00000000000091AF                 mov     r9, [rsp+78h+var_50]
.text:00000000000091B4                 jmp     short loc_9143
.text:00000000000091B4 ; ---------------------------------------------------------------------------
.text:00000000000091B6                 align 20h
.text:00000000000091C0
.text:00000000000091C0 def_8E94:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000091C0                 mov     r10, [rbx+40h]  ; jumptable 0000000000008E94 default case
.text:00000000000091C4                 mov     r9, [rbx+38h]
.text:00000000000091C8                 mov     edx, 5
.text:00000000000091CD                 mov     rax, [rbx+10h]
.text:00000000000091D1                 mov     r8, [rbx+8]
.text:00000000000091D5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000091DC                 mov     r13, [rbx+30h]
.text:00000000000091E0                 mov     r12, [rbx+28h]
.text:00000000000091E4                 mov     r15, [rbx+20h]
.text:00000000000091E8                 mov     r14, [rbx+18h]
.text:00000000000091EC                 mov     [rsp+58h+var_40], r10
.text:00000000000091F1                 mov     [rsp+58h+var_48], r9
.text:00000000000091F6                 mov     [rsp+58h+var_58], rax
.text:00000000000091FA                 mov     [rsp+58h+var_50], r8
.text:00000000000091FF                 mov     rbx, [rbx]
.text:0000000000009202                 jmp     loc_8F92
.text:0000000000009202 ; } // starts at 8DF0
.text:0000000000009202 version_etc_arn endp
.text:0000000000009202
.text:0000000000009202 ; ---------------------------------------------------------------------------
.text:0000000000009207                 align 10h
.text:0000000000009210
.text:0000000000009210 ; =============== S U B R O U T I N E =======================================
.text:0000000000009210
.text:0000000000009210 ; Attributes: info_from_lumina
.text:0000000000009210
.text:0000000000009210 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000009210                 public version_etc_ar
.text:0000000000009210 version_etc_ar  proc near
.text:0000000000009210 ; __unwind {
.text:0000000000009210                 xor     r9d, r9d
.text:0000000000009213                 cmp     qword ptr [r8], 0
.text:0000000000009217                 jz      short loc_922B
.text:0000000000009219                 nop     dword ptr [rax+00000000h]
.text:0000000000009220
.text:0000000000009220 loc_9220:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000009220                 add     r9, 1
.text:0000000000009224                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000009229                 jnz     short loc_9220
.text:000000000000922B
.text:000000000000922B loc_922B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000922B                 jmp     version_etc_arn
.text:000000000000922B ; } // starts at 9210
.text:000000000000922B version_etc_ar  endp
.text:000000000000922B
.text:0000000000009230
.text:0000000000009230 ; =============== S U B R O U T I N E =======================================
.text:0000000000009230
.text:0000000000009230 ; Attributes: info_from_lumina
.text:0000000000009230
.text:0000000000009230 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000009230                 public version_etc_va
.text:0000000000009230 version_etc_va  proc near
.text:0000000000009230
.text:0000000000009230 authtab         = qword ptr -68h
.text:0000000000009230 var_10          = qword ptr -10h
.text:0000000000009230
.text:0000000000009230 ; __unwind {
.text:0000000000009230                 sub     rsp, 68h
.text:0000000000009234                 mov     r10, r8
.text:0000000000009237                 xor     r9d, r9d
.text:000000000000923A                 mov     rax, fs:28h
.text:0000000000009243                 mov     [rsp+68h+var_10], rax
.text:0000000000009248                 xor     eax, eax
.text:000000000000924A                 mov     r8, rsp
.text:000000000000924D                 nop     dword ptr [rax]
.text:0000000000009250
.text:0000000000009250 loc_9250:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000009250                 mov     eax, [r10]
.text:0000000000009253                 cmp     eax, 2Fh ; '/'
.text:0000000000009256                 ja      short loc_929A
.text:0000000000009258                 mov     r11d, eax
.text:000000000000925B                 add     r11, [r10+10h]
.text:000000000000925F                 add     eax, 8
.text:0000000000009262                 mov     [r10], eax
.text:0000000000009265
.text:0000000000009265 loc_9265:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000009265                 mov     rax, [r11]
.text:0000000000009268                 test    rax, rax
.text:000000000000926B                 mov     [r8+r9*8], rax
.text:000000000000926F                 jz      short loc_927B
.text:0000000000009271                 add     r9, 1
.text:0000000000009275                 cmp     r9, 0Ah
.text:0000000000009279                 jnz     short loc_9250
.text:000000000000927B
.text:000000000000927B loc_927B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000927B                 call    version_etc_arn
.text:0000000000009280                 mov     rax, [rsp+68h+var_10]
.text:0000000000009285                 xor     rax, fs:28h
.text:000000000000928E                 jnz     short loc_9295
.text:0000000000009290                 add     rsp, 68h
.text:0000000000009294                 retn
.text:0000000000009295 ; ---------------------------------------------------------------------------
.text:0000000000009295
.text:0000000000009295 loc_9295:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000009295                 call    ___stack_chk_fail
.text:000000000000929A ; ---------------------------------------------------------------------------
.text:000000000000929A
.text:000000000000929A loc_929A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000929A                 mov     r11, [r10+8]
.text:000000000000929E                 lea     rax, [r11+8]
.text:00000000000092A2                 mov     [r10+8], rax
.text:00000000000092A6                 jmp     short loc_9265
.text:00000000000092A6 ; } // starts at 9230
.text:00000000000092A6 version_etc_va  endp
.text:00000000000092A6
.text:00000000000092A6 ; ---------------------------------------------------------------------------
.text:00000000000092A8                 align 10h
.text:00000000000092B0
.text:00000000000092B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092B0
.text:00000000000092B0 ; Attributes: info_from_lumina
.text:00000000000092B0
.text:00000000000092B0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000092B0                 public version_etc
.text:00000000000092B0 version_etc     proc near               ; CODE XREF: main+1E6↑p
.text:00000000000092B0
.text:00000000000092B0 var_C0          = dword ptr -0C0h
.text:00000000000092B0 var_B8          = qword ptr -0B8h
.text:00000000000092B0 var_B0          = qword ptr -0B0h
.text:00000000000092B0 var_A8          = byte ptr -0A8h
.text:00000000000092B0 var_50          = qword ptr -50h
.text:00000000000092B0 var_48          = byte ptr -48h
.text:00000000000092B0 var_28          = qword ptr -28h
.text:00000000000092B0 var_20          = qword ptr -20h
.text:00000000000092B0 arg_0           = byte ptr  8
.text:00000000000092B0
.text:00000000000092B0 ; __unwind {
.text:00000000000092B0                 push    rbp
.text:00000000000092B1                 push    rbx
.text:00000000000092B2                 mov     r10d, 20h ; ' '
.text:00000000000092B8                 xor     r11d, r11d
.text:00000000000092BB                 sub     rsp, 0B8h
.text:00000000000092C2                 mov     rax, fs:28h
.text:00000000000092CB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000092D0                 xor     eax, eax
.text:00000000000092D2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000092DA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000092E2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000092EA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000092EF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000092F7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000092FF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000009304                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000930C                 xor     r9d, r9d
.text:000000000000930F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000009314                 mov     rbp, rax
.text:0000000000009317                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009320
.text:0000000000009320 loc_9320:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000009320                 cmp     r10d, 2Fh ; '/'
.text:0000000000009324                 ja      short loc_937C
.text:0000000000009326                 mov     eax, r10d
.text:0000000000009329                 mov     r11d, 1
.text:000000000000932F                 add     r10d, 8
.text:0000000000009333                 add     rax, rbp
.text:0000000000009336
.text:0000000000009336 loc_9336:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000009336                 mov     rax, [rax]
.text:0000000000009339                 test    rax, rax
.text:000000000000933C                 mov     [r8+r9*8], rax
.text:0000000000009340                 jz      short loc_934C
.text:0000000000009342                 add     r9, 1
.text:0000000000009346                 cmp     r9, 0Ah
.text:000000000000934A                 jnz     short loc_9320
.text:000000000000934C
.text:000000000000934C loc_934C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000934C                 test    r11b, r11b
.text:000000000000934F                 jnz     short loc_9375
.text:0000000000009351
.text:0000000000009351 loc_9351:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000009351                 call    version_etc_arn
.text:0000000000009356                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000935B                 xor     rax, fs:28h
.text:0000000000009364                 jnz     short loc_9370
.text:0000000000009366                 add     rsp, 0B8h
.text:000000000000936D                 pop     rbx
.text:000000000000936E                 pop     rbp
.text:000000000000936F                 retn
.text:0000000000009370 ; ---------------------------------------------------------------------------
.text:0000000000009370
.text:0000000000009370 loc_9370:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000009370                 call    ___stack_chk_fail
.text:0000000000009375 ; ---------------------------------------------------------------------------
.text:0000000000009375
.text:0000000000009375 loc_9375:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000009375                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000937A                 jmp     short loc_9351
.text:000000000000937C ; ---------------------------------------------------------------------------
.text:000000000000937C
.text:000000000000937C loc_937C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000937C                 mov     rax, rbx
.text:000000000000937F                 add     rbx, 8
.text:0000000000009383                 jmp     short loc_9336
.text:0000000000009383 ; } // starts at 92B0
.text:0000000000009383 version_etc     endp
.text:0000000000009383
.text:0000000000009383 ; ---------------------------------------------------------------------------
.text:0000000000009385                 align 10h
.text:0000000000009390
.text:0000000000009390 ; =============== S U B R O U T I N E =======================================
.text:0000000000009390
.text:0000000000009390 ; Attributes: info_from_lumina
.text:0000000000009390
.text:0000000000009390 ; void __cdecl emit_bug_reporting_address()
.text:0000000000009390                 public emit_bug_reporting_address
.text:0000000000009390 emit_bug_reporting_address proc near
.text:0000000000009390 ; __unwind {
.text:0000000000009390                 push    rbx
.text:0000000000009391                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000009398                 mov     edx, 5          ; category
.text:000000000000939D                 xor     edi, edi        ; domainname
.text:000000000000939F                 call    _dcgettext
.text:00000000000093A4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000093AB                 mov     rsi, rax
.text:00000000000093AE                 mov     edi, 1
.text:00000000000093B3                 xor     eax, eax
.text:00000000000093B5                 call    ___printf_chk
.text:00000000000093BA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000093C1                 mov     edx, 5          ; category
.text:00000000000093C6                 xor     edi, edi        ; domainname
.text:00000000000093C8                 call    _dcgettext
.text:00000000000093CD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000093D4                 lea     rdx, unk_B0B7
.text:00000000000093DB                 mov     rsi, rax
.text:00000000000093DE                 mov     edi, 1
.text:00000000000093E3                 xor     eax, eax
.text:00000000000093E5                 call    ___printf_chk
.text:00000000000093EA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000093F1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000093F8                 xor     edi, edi        ; domainname
.text:00000000000093FA                 mov     edx, 5          ; category
.text:00000000000093FF                 call    _dcgettext
.text:0000000000009404                 mov     rsi, rbx        ; stream
.text:0000000000009407                 mov     rdi, rax        ; s
.text:000000000000940A                 pop     rbx
.text:000000000000940B                 jmp     _fputs_unlocked
.text:000000000000940B ; } // starts at 9390
.text:000000000000940B emit_bug_reporting_address endp
.text:000000000000940B
.text:0000000000009410
.text:0000000000009410 ; =============== S U B R O U T I N E =======================================
.text:0000000000009410
.text:0000000000009410
.text:0000000000009410                 public xmalloc
.text:0000000000009410 xmalloc         proc near               ; CODE XREF: do_link+61D↑p
.text:0000000000009410                                         ; do_link+682↑p ...
.text:0000000000009410 ; __unwind {
.text:0000000000009410                 push    rbx
.text:0000000000009411                 mov     rbx, rdi
.text:0000000000009414                 call    _malloc
.text:0000000000009419                 test    rax, rax
.text:000000000000941C                 jnz     short loc_9423
.text:000000000000941E                 test    rbx, rbx
.text:0000000000009421                 jnz     short loc_9425
.text:0000000000009423
.text:0000000000009423 loc_9423:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000009423                 pop     rbx
.text:0000000000009424                 retn
.text:0000000000009425 ; ---------------------------------------------------------------------------
.text:0000000000009425
.text:0000000000009425 loc_9425:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000009425                 call    xalloc_die
.text:0000000000009425 ; } // starts at 9410
.text:0000000000009425 xmalloc         endp
.text:0000000000009425
.text:0000000000009425 ; ---------------------------------------------------------------------------
.text:000000000000942A                 align 10h
.text:0000000000009430
.text:0000000000009430 ; =============== S U B R O U T I N E =======================================
.text:0000000000009430
.text:0000000000009430 ; Attributes: info_from_lumina
.text:0000000000009430
.text:0000000000009430 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000009430                 public xnmalloc
.text:0000000000009430 xnmalloc        proc near
.text:0000000000009430 ; __unwind {
.text:0000000000009430                 mov     rax, rdi
.text:0000000000009433                 mul     rsi
.text:0000000000009436                 mov     rdi, rax
.text:0000000000009439                 seto    al
.text:000000000000943C                 test    rdi, rdi
.text:000000000000943F                 js      short loc_944B
.text:0000000000009441                 movzx   eax, al
.text:0000000000009444                 test    rax, rax
.text:0000000000009447                 jnz     short loc_944B
.text:0000000000009449                 jmp     short xmalloc
.text:000000000000944B ; ---------------------------------------------------------------------------
.text:000000000000944B
.text:000000000000944B loc_944B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000944B                                         ; xnmalloc+17↑j
.text:000000000000944B                 sub     rsp, 8
.text:000000000000944F                 call    xalloc_die
.text:000000000000944F ; } // starts at 9430
.text:000000000000944F xnmalloc        endp
.text:000000000000944F
.text:000000000000944F ; ---------------------------------------------------------------------------
.text:0000000000009454                 align 20h
.text:0000000000009460
.text:0000000000009460 ; =============== S U B R O U T I N E =======================================
.text:0000000000009460
.text:0000000000009460
.text:0000000000009460                 public xcharalloc
.text:0000000000009460 xcharalloc      proc near
.text:0000000000009460 ; __unwind {
.text:0000000000009460                 jmp     short xmalloc
.text:0000000000009460 ; } // starts at 9460
.text:0000000000009460 xcharalloc      endp
.text:0000000000009460
.text:0000000000009460 ; ---------------------------------------------------------------------------
.text:0000000000009462                 align 10h
.text:0000000000009470
.text:0000000000009470 ; =============== S U B R O U T I N E =======================================
.text:0000000000009470
.text:0000000000009470 ; Attributes: info_from_lumina
.text:0000000000009470
.text:0000000000009470 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000009470                 public xrealloc
.text:0000000000009470 xrealloc        proc near               ; CODE XREF: canonicalize_filename_mode+16C↑p
.text:0000000000009470                                         ; canonicalize_filename_mode+1FA↑p ...
.text:0000000000009470 ; __unwind {
.text:0000000000009470                 test    rsi, rsi
.text:0000000000009473                 push    rbx
.text:0000000000009474                 mov     rbx, rsi
.text:0000000000009477                 jnz     short loc_947E
.text:0000000000009479                 test    rdi, rdi
.text:000000000000947C                 jnz     short loc_9498
.text:000000000000947E
.text:000000000000947E loc_947E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000947E                 mov     rsi, rbx        ; size
.text:0000000000009481                 call    _realloc
.text:0000000000009486                 test    rax, rax
.text:0000000000009489                 jnz     short loc_9490
.text:000000000000948B                 test    rbx, rbx
.text:000000000000948E                 jnz     short loc_94A1
.text:0000000000009490
.text:0000000000009490 loc_9490:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000009490                 pop     rbx
.text:0000000000009491                 retn
.text:0000000000009491 ; ---------------------------------------------------------------------------
.text:0000000000009492                 align 8
.text:0000000000009498
.text:0000000000009498 loc_9498:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000009498                 call    _free
.text:000000000000949D                 xor     eax, eax
.text:000000000000949F                 pop     rbx
.text:00000000000094A0                 retn
.text:00000000000094A1 ; ---------------------------------------------------------------------------
.text:00000000000094A1
.text:00000000000094A1 loc_94A1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000094A1                 call    xalloc_die
.text:00000000000094A1 ; } // starts at 9470
.text:00000000000094A1 xrealloc        endp
.text:00000000000094A1
.text:00000000000094A1 ; ---------------------------------------------------------------------------
.text:00000000000094A6                 align 10h
.text:00000000000094B0
.text:00000000000094B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094B0
.text:00000000000094B0 ; Attributes: info_from_lumina
.text:00000000000094B0
.text:00000000000094B0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000094B0                 public xnrealloc
.text:00000000000094B0 xnrealloc       proc near
.text:00000000000094B0 ; __unwind {
.text:00000000000094B0                 mov     rax, rsi
.text:00000000000094B3                 mul     rdx
.text:00000000000094B6                 mov     rsi, rax
.text:00000000000094B9                 seto    al
.text:00000000000094BC                 test    rsi, rsi
.text:00000000000094BF                 js      short loc_94CB
.text:00000000000094C1                 movzx   eax, al
.text:00000000000094C4                 test    rax, rax
.text:00000000000094C7                 jnz     short loc_94CB
.text:00000000000094C9                 jmp     short xrealloc
.text:00000000000094CB ; ---------------------------------------------------------------------------
.text:00000000000094CB
.text:00000000000094CB loc_94CB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000094CB                                         ; xnrealloc+17↑j
.text:00000000000094CB                 sub     rsp, 8
.text:00000000000094CF                 call    xalloc_die
.text:00000000000094CF ; } // starts at 94B0
.text:00000000000094CF xnrealloc       endp
.text:00000000000094CF
.text:00000000000094CF ; ---------------------------------------------------------------------------
.text:00000000000094D4                 align 20h
.text:00000000000094E0
.text:00000000000094E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094E0
.text:00000000000094E0 ; Attributes: info_from_lumina
.text:00000000000094E0
.text:00000000000094E0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000094E0                 public x2nrealloc
.text:00000000000094E0 x2nrealloc      proc near
.text:00000000000094E0 ; __unwind {
.text:00000000000094E0                 test    rdi, rdi
.text:00000000000094E3                 mov     r9, rdx
.text:00000000000094E6                 mov     rcx, [rsi]
.text:00000000000094E9                 jz      short loc_9520
.text:00000000000094EB                 xor     edx, edx
.text:00000000000094ED                 mov     rax, 5555555555555554h
.text:00000000000094F7                 div     r9
.text:00000000000094FA                 cmp     rax, rcx
.text:00000000000094FD                 jbe     short loc_953B
.text:00000000000094FF                 mov     rax, rcx
.text:0000000000009502                 shr     rax, 1
.text:0000000000009505                 lea     rcx, [rax+rcx+1]
.text:000000000000950A
.text:000000000000950A loc_950A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000950A                 mov     [rsi], rcx
.text:000000000000950D                 imul    rcx, r9
.text:0000000000009511                 mov     rsi, rcx
.text:0000000000009514                 jmp     xrealloc
.text:0000000000009514 ; ---------------------------------------------------------------------------
.text:0000000000009519                 align 20h
.text:0000000000009520
.text:0000000000009520 loc_9520:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000009520                 test    rcx, rcx
.text:0000000000009523                 jz      short loc_9548
.text:0000000000009525
.text:0000000000009525 loc_9525:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000009525                 mov     rax, rcx
.text:0000000000009528                 mul     r9
.text:000000000000952B                 seto    dl
.text:000000000000952E                 test    rax, rax
.text:0000000000009531                 movzx   edx, dl
.text:0000000000009534                 js      short loc_953B
.text:0000000000009536                 test    rdx, rdx
.text:0000000000009539                 jz      short loc_950A
.text:000000000000953B
.text:000000000000953B loc_953B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000953B                                         ; x2nrealloc+54↑j
.text:000000000000953B                 sub     rsp, 8
.text:000000000000953F                 call    xalloc_die
.text:000000000000953F ; ---------------------------------------------------------------------------
.text:0000000000009544                 align 8
.text:0000000000009548
.text:0000000000009548 loc_9548:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000009548                 xor     edx, edx
.text:000000000000954A                 mov     eax, 80h
.text:000000000000954F                 xor     r8d, r8d
.text:0000000000009552                 div     r9
.text:0000000000009555                 test    rax, rax
.text:0000000000009558                 setz    r8b
.text:000000000000955C                 lea     rcx, [r8+rax]
.text:0000000000009560                 jmp     short loc_9525
.text:0000000000009560 ; } // starts at 94E0
.text:0000000000009560 x2nrealloc      endp
.text:0000000000009560
.text:0000000000009560 ; ---------------------------------------------------------------------------
.text:0000000000009562                 align 10h
.text:0000000000009570
.text:0000000000009570 ; =============== S U B R O U T I N E =======================================
.text:0000000000009570
.text:0000000000009570 ; Attributes: info_from_lumina
.text:0000000000009570
.text:0000000000009570 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000009570                 public x2realloc
.text:0000000000009570 x2realloc       proc near
.text:0000000000009570 ; __unwind {
.text:0000000000009570                 test    rdi, rdi
.text:0000000000009573                 mov     rax, [rsi]
.text:0000000000009576                 jz      short loc_95A0
.text:0000000000009578                 mov     rdx, 5555555555555553h
.text:0000000000009582                 cmp     rax, rdx
.text:0000000000009585                 ja      short loc_95B1
.text:0000000000009587                 mov     rdx, rax
.text:000000000000958A                 shr     rdx, 1
.text:000000000000958D                 lea     rax, [rdx+rax+1]
.text:0000000000009592
.text:0000000000009592 loc_9592:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000009592                 mov     [rsi], rax
.text:0000000000009595                 mov     rsi, rax
.text:0000000000009598                 jmp     xrealloc
.text:0000000000009598 ; ---------------------------------------------------------------------------
.text:000000000000959D                 align 20h
.text:00000000000095A0
.text:00000000000095A0 loc_95A0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000095A0                 test    rax, rax
.text:00000000000095A3                 mov     edx, 80h
.text:00000000000095A8                 cmovz   rax, rdx
.text:00000000000095AC                 test    rax, rax
.text:00000000000095AF                 jns     short loc_9592
.text:00000000000095B1
.text:00000000000095B1 loc_95B1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000095B1                 sub     rsp, 8
.text:00000000000095B5                 call    xalloc_die
.text:00000000000095B5 ; } // starts at 9570
.text:00000000000095B5 x2realloc       endp
.text:00000000000095B5
.text:00000000000095B5 ; ---------------------------------------------------------------------------
.text:00000000000095BA                 align 20h
.text:00000000000095C0
.text:00000000000095C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095C0
.text:00000000000095C0
.text:00000000000095C0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000095C0                 public xzalloc
.text:00000000000095C0 xzalloc         proc near
.text:00000000000095C0 ; __unwind {
.text:00000000000095C0                 push    rbx
.text:00000000000095C1                 mov     rbx, rdi
.text:00000000000095C4                 call    xmalloc
.text:00000000000095C9                 mov     rdx, rbx        ; n
.text:00000000000095CC                 xor     esi, esi        ; c
.text:00000000000095CE                 mov     rdi, rax        ; s
.text:00000000000095D1                 pop     rbx
.text:00000000000095D2                 jmp     _memset
.text:00000000000095D2 ; } // starts at 95C0
.text:00000000000095D2 xzalloc         endp
.text:00000000000095D2
.text:00000000000095D2 ; ---------------------------------------------------------------------------
.text:00000000000095D7                 align 20h
.text:00000000000095E0
.text:00000000000095E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095E0
.text:00000000000095E0 ; Attributes: info_from_lumina
.text:00000000000095E0
.text:00000000000095E0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000095E0                 public xcalloc
.text:00000000000095E0 xcalloc         proc near
.text:00000000000095E0 ; __unwind {
.text:00000000000095E0                 mov     rax, rdi
.text:00000000000095E3                 sub     rsp, 8
.text:00000000000095E7                 mul     rsi
.text:00000000000095EA                 seto    dl
.text:00000000000095ED                 test    rax, rax
.text:00000000000095F0                 js      short loc_9609
.text:00000000000095F2                 movzx   edx, dl
.text:00000000000095F5                 test    rdx, rdx
.text:00000000000095F8                 jnz     short loc_9609
.text:00000000000095FA                 call    _calloc
.text:00000000000095FF                 test    rax, rax
.text:0000000000009602                 jz      short loc_9609
.text:0000000000009604                 add     rsp, 8
.text:0000000000009608                 retn
.text:0000000000009609 ; ---------------------------------------------------------------------------
.text:0000000000009609
.text:0000000000009609 loc_9609:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000009609                                         ; xcalloc+18↑j ...
.text:0000000000009609                 call    xalloc_die
.text:0000000000009609 ; } // starts at 95E0
.text:0000000000009609 xcalloc         endp
.text:0000000000009609
.text:0000000000009609 ; ---------------------------------------------------------------------------
.text:000000000000960E                 align 10h
.text:0000000000009610
.text:0000000000009610 ; =============== S U B R O U T I N E =======================================
.text:0000000000009610
.text:0000000000009610 ; Attributes: info_from_lumina
.text:0000000000009610
.text:0000000000009610 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000009610                 public xmemdup
.text:0000000000009610 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000009610                                         ; xstrdup+11↓j
.text:0000000000009610 ; __unwind {
.text:0000000000009610                 push    rbp
.text:0000000000009611                 push    rbx
.text:0000000000009612                 mov     rbp, rdi
.text:0000000000009615                 mov     rdi, rsi
.text:0000000000009618                 mov     rbx, rsi
.text:000000000000961B                 sub     rsp, 8
.text:000000000000961F                 call    xmalloc
.text:0000000000009624                 add     rsp, 8
.text:0000000000009628                 mov     rdx, rbx        ; n
.text:000000000000962B                 mov     rsi, rbp        ; src
.text:000000000000962E                 pop     rbx
.text:000000000000962F                 pop     rbp
.text:0000000000009630                 mov     rdi, rax        ; dest
.text:0000000000009633                 jmp     _memcpy
.text:0000000000009633 ; } // starts at 9610
.text:0000000000009633 xmemdup         endp
.text:0000000000009633
.text:0000000000009633 ; ---------------------------------------------------------------------------
.text:0000000000009638                 align 20h
.text:0000000000009640
.text:0000000000009640 ; =============== S U B R O U T I N E =======================================
.text:0000000000009640
.text:0000000000009640
.text:0000000000009640 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000009640                 public xstrdup
.text:0000000000009640 xstrdup         proc near               ; CODE XREF: do_link+595↑p
.text:0000000000009640                                         ; record_file+28↑p
.text:0000000000009640 ; __unwind {
.text:0000000000009640                 push    rbx
.text:0000000000009641                 mov     rbx, rdi
.text:0000000000009644                 call    _strlen
.text:0000000000009649                 mov     rdi, rbx        ; src
.text:000000000000964C                 lea     rsi, [rax+1]    ; n
.text:0000000000009650                 pop     rbx
.text:0000000000009651                 jmp     short xmemdup
.text:0000000000009651 ; } // starts at 9640
.text:0000000000009651 xstrdup         endp
.text:0000000000009651
.text:0000000000009651 ; ---------------------------------------------------------------------------
.text:0000000000009653                 align 20h
.text:0000000000009660
.text:0000000000009660 ; =============== S U B R O U T I N E =======================================
.text:0000000000009660
.text:0000000000009660 ; Attributes: noreturn info_from_lumina
.text:0000000000009660
.text:0000000000009660 ; void __cdecl xalloc_die()
.text:0000000000009660                 public xalloc_die
.text:0000000000009660 xalloc_die      proc near               ; CODE XREF: main+44B↑p
.text:0000000000009660                                         ; find_backup_file_name:loc_4815↑p ...
.text:0000000000009660 ; __unwind {
.text:0000000000009660                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000009667                 sub     rsp, 8
.text:000000000000966B                 mov     edx, 5          ; category
.text:0000000000009670                 xor     edi, edi        ; domainname
.text:0000000000009672                 call    _dcgettext
.text:0000000000009677                 mov     edi, cs:exit_failure ; status
.text:000000000000967D                 lea     rdx, aS_0+2     ; format
.text:0000000000009684                 mov     rcx, rax
.text:0000000000009687                 xor     esi, esi        ; errnum
.text:0000000000009689                 xor     eax, eax
.text:000000000000968B                 call    _error
.text:0000000000009690                 call    _abort
.text:0000000000009690 ; } // starts at 9660
.text:0000000000009690 xalloc_die      endp
.text:0000000000009690
.text:0000000000009690 ; ---------------------------------------------------------------------------
.text:0000000000009695                 align 20h
.text:00000000000096A0
.text:00000000000096A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096A0
.text:00000000000096A0 ; Attributes: info_from_lumina
.text:00000000000096A0
.text:00000000000096A0 ; char *__cdecl xgetcwd()
.text:00000000000096A0                 public xgetcwd
.text:00000000000096A0 xgetcwd         proc near               ; CODE XREF: canonicalize_filename_mode+63↑p
.text:00000000000096A0 ; __unwind {
.text:00000000000096A0                 push    rbx
.text:00000000000096A1                 xor     esi, esi        ; size
.text:00000000000096A3                 xor     edi, edi        ; buf
.text:00000000000096A5                 call    _getcwd
.text:00000000000096AA                 test    rax, rax
.text:00000000000096AD                 mov     rbx, rax
.text:00000000000096B0                 jz      short loc_96C0
.text:00000000000096B2
.text:00000000000096B2 loc_96B2:                               ; CODE XREF: xgetcwd+28↓j
.text:00000000000096B2                 mov     rax, rbx
.text:00000000000096B5                 pop     rbx
.text:00000000000096B6                 retn
.text:00000000000096B6 ; ---------------------------------------------------------------------------
.text:00000000000096B7                 align 20h
.text:00000000000096C0
.text:00000000000096C0 loc_96C0:                               ; CODE XREF: xgetcwd+10↑j
.text:00000000000096C0                 call    ___errno_location
.text:00000000000096C5                 cmp     dword ptr [rax], 0Ch
.text:00000000000096C8                 jnz     short loc_96B2
.text:00000000000096CA                 call    xalloc_die
.text:00000000000096CA ; } // starts at 96A0
.text:00000000000096CA xgetcwd         endp
.text:00000000000096CA
.text:00000000000096CA ; ---------------------------------------------------------------------------
.text:00000000000096CF                 align 10h
.text:00000000000096D0
.text:00000000000096D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096D0
.text:00000000000096D0
.text:00000000000096D0                 public yesno
.text:00000000000096D0 yesno           proc near               ; CODE XREF: do_link+9D2↑p
.text:00000000000096D0
.text:00000000000096D0 lineptr         = qword ptr -20h
.text:00000000000096D0 n               = qword ptr -18h
.text:00000000000096D0 var_10          = qword ptr -10h
.text:00000000000096D0
.text:00000000000096D0 ; __unwind {
.text:00000000000096D0                 push    rbx
.text:00000000000096D1                 mov     edx, 0Ah        ; delimiter
.text:00000000000096D6                 xor     ebx, ebx
.text:00000000000096D8                 sub     rsp, 20h
.text:00000000000096DC                 mov     rcx, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000096E3                 lea     rsi, [rsp+28h+n] ; n
.text:00000000000096E8                 lea     rdi, [rsp+28h+lineptr] ; lineptr
.text:00000000000096ED                 mov     [rsp+28h+lineptr], 0
.text:00000000000096F6                 mov     rax, fs:28h
.text:00000000000096FF                 mov     [rsp+28h+var_10], rax
.text:0000000000009704                 xor     eax, eax
.text:0000000000009706                 mov     [rsp+28h+n], 0
.text:000000000000970F                 call    ___getdelim
.text:0000000000009714                 test    rax, rax
.text:0000000000009717                 jle     short loc_9732
.text:0000000000009719                 mov     rdi, [rsp+28h+lineptr] ; response
.text:000000000000971E                 lea     rax, [rdi+rax-1]
.text:0000000000009723                 cmp     byte ptr [rax], 0Ah
.text:0000000000009726                 jz      short loc_9758
.text:0000000000009728
.text:0000000000009728 loc_9728:                               ; CODE XREF: yesno+90↓j
.text:0000000000009728                 call    _rpmatch
.text:000000000000972D                 test    eax, eax
.text:000000000000972F                 setnle  bl
.text:0000000000009732
.text:0000000000009732 loc_9732:                               ; CODE XREF: yesno+47↑j
.text:0000000000009732                 mov     rdi, [rsp+28h+lineptr] ; ptr
.text:0000000000009737                 call    _free
.text:000000000000973C                 mov     rdx, [rsp+28h+var_10]
.text:0000000000009741                 xor     rdx, fs:28h
.text:000000000000974A                 mov     eax, ebx
.text:000000000000974C                 jnz     short loc_9762
.text:000000000000974E                 add     rsp, 20h
.text:0000000000009752                 pop     rbx
.text:0000000000009753                 retn
.text:0000000000009753 ; ---------------------------------------------------------------------------
.text:0000000000009754                 align 8
.text:0000000000009758
.text:0000000000009758 loc_9758:                               ; CODE XREF: yesno+56↑j
.text:0000000000009758                 mov     byte ptr [rax], 0
.text:000000000000975B                 mov     rdi, [rsp+28h+lineptr]
.text:0000000000009760                 jmp     short loc_9728
.text:0000000000009762 ; ---------------------------------------------------------------------------
.text:0000000000009762
.text:0000000000009762 loc_9762:                               ; CODE XREF: yesno+7C↑j
.text:0000000000009762                 call    ___stack_chk_fail
.text:0000000000009762 ; } // starts at 96D0
.text:0000000000009762 yesno           endp
.text:0000000000009762
.text:0000000000009762 ; ---------------------------------------------------------------------------
.text:0000000000009767                 align 10h
.text:0000000000009770
.text:0000000000009770 ; =============== S U B R O U T I N E =======================================
.text:0000000000009770
.text:0000000000009770 ; Attributes: info_from_lumina
.text:0000000000009770
.text:0000000000009770 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000009770                 public rpl_fflush
.text:0000000000009770 rpl_fflush      proc near               ; CODE XREF: close_stdin:loc_4F18↑p
.text:0000000000009770                                         ; rpl_fclose+1F↓p
.text:0000000000009770 ; __unwind {
.text:0000000000009770                 test    rdi, rdi
.text:0000000000009773                 push    rbx
.text:0000000000009774                 mov     rbx, rdi
.text:0000000000009777                 jz      short loc_978A
.text:0000000000009779                 call    ___freading
.text:000000000000977E                 test    eax, eax
.text:0000000000009780                 jz      short loc_978A
.text:0000000000009782                 test    dword ptr [rbx], 100h
.text:0000000000009788                 jnz     short loc_9798
.text:000000000000978A
.text:000000000000978A loc_978A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000978A                                         ; rpl_fflush+10↑j
.text:000000000000978A                 mov     rdi, rbx        ; stream
.text:000000000000978D                 pop     rbx
.text:000000000000978E                 jmp     _fflush
.text:000000000000978E ; ---------------------------------------------------------------------------
.text:0000000000009793                 align 8
.text:0000000000009798
.text:0000000000009798 loc_9798:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000009798                 mov     rdi, rbx
.text:000000000000979B                 mov     edx, 1
.text:00000000000097A0                 xor     esi, esi
.text:00000000000097A2                 call    rpl_fseeko
.text:00000000000097A7                 mov     rdi, rbx        ; stream
.text:00000000000097AA                 pop     rbx
.text:00000000000097AB                 jmp     _fflush
.text:00000000000097AB ; } // starts at 9770
.text:00000000000097AB rpl_fflush      endp
.text:00000000000097AB
.text:00000000000097B0
.text:00000000000097B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097B0
.text:00000000000097B0
.text:00000000000097B0                 public freadahead
.text:00000000000097B0 freadahead      proc near               ; CODE XREF: close_stdin+E↑p
.text:00000000000097B0 ; __unwind {
.text:00000000000097B0                 xor     eax, eax
.text:00000000000097B2                 mov     rcx, [rdi+20h]
.text:00000000000097B6                 cmp     [rdi+28h], rcx
.text:00000000000097BA                 ja      short locret_97D7
.text:00000000000097BC                 mov     rax, [rdi+10h]
.text:00000000000097C0                 sub     rax, [rdi+8]
.text:00000000000097C4                 test    dword ptr [rdi], 100h
.text:00000000000097CA                 jz      short locret_97D7
.text:00000000000097CC                 mov     rdx, [rdi+58h]
.text:00000000000097D0                 sub     rdx, [rdi+48h]
.text:00000000000097D4                 add     rax, rdx
.text:00000000000097D7
.text:00000000000097D7 locret_97D7:                            ; CODE XREF: freadahead+A↑j
.text:00000000000097D7                                         ; freadahead+1A↑j
.text:00000000000097D7                 rep retn
.text:00000000000097D7 ; } // starts at 97B0
.text:00000000000097D7 freadahead      endp
.text:00000000000097D7
.text:00000000000097D7 ; ---------------------------------------------------------------------------
.text:00000000000097D9                 align 20h
.text:00000000000097E0
.text:00000000000097E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000097E0
.text:00000000000097E0 ; Attributes: info_from_lumina
.text:00000000000097E0
.text:00000000000097E0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000097E0                 public rpl_fseeko
.text:00000000000097E0 rpl_fseeko      proc near               ; CODE XREF: close_stdin+C2↑p
.text:00000000000097E0                                         ; rpl_fflush+32↑p
.text:00000000000097E0 ; __unwind {
.text:00000000000097E0                 mov     rax, [rdi+8]
.text:00000000000097E4                 cmp     [rdi+10h], rax
.text:00000000000097E8                 jz      short loc_97F0
.text:00000000000097EA
.text:00000000000097EA loc_97EA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000097EA                                         ; rpl_fseeko+1F↓j
.text:00000000000097EA                 jmp     _fseeko
.text:00000000000097EA ; ---------------------------------------------------------------------------
.text:00000000000097EF                 align 10h
.text:00000000000097F0
.text:00000000000097F0 loc_97F0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000097F0                 mov     rax, [rdi+20h]
.text:00000000000097F4                 cmp     [rdi+28h], rax
.text:00000000000097F8                 jnz     short loc_97EA
.text:00000000000097FA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000097FF                 jnz     short loc_97EA
.text:0000000000009801                 push    r12
.text:0000000000009803                 push    rbp
.text:0000000000009804                 mov     r12d, edx
.text:0000000000009807                 push    rbx
.text:0000000000009808                 mov     rbp, rsi
.text:000000000000980B                 mov     rbx, rdi
.text:000000000000980E                 call    _fileno
.text:0000000000009813                 mov     edx, r12d       ; whence
.text:0000000000009816                 mov     rsi, rbp        ; offset
.text:0000000000009819                 mov     edi, eax        ; fd
.text:000000000000981B                 call    _lseek
.text:0000000000009820                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009824                 jz      short loc_9832
.text:0000000000009826                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000009829                 mov     [rbx+90h], rax
.text:0000000000009830                 xor     eax, eax
.text:0000000000009832
.text:0000000000009832 loc_9832:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000009832                 pop     rbx
.text:0000000000009833                 pop     rbp
.text:0000000000009834                 pop     r12
.text:0000000000009836                 retn
.text:0000000000009836 ; } // starts at 97E0
.text:0000000000009836 rpl_fseeko      endp
.text:0000000000009836
.text:0000000000009836 ; ---------------------------------------------------------------------------
.text:0000000000009837                 align 20h
.text:0000000000009840
.text:0000000000009840 ; =============== S U B R O U T I N E =======================================
.text:0000000000009840
.text:0000000000009840 ; Attributes: info_from_lumina
.text:0000000000009840
.text:0000000000009840 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000009840                 public rpl_mbrtowc
.text:0000000000009840 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000009840
.text:0000000000009840 pwc             = dword ptr -34h
.text:0000000000009840 var_30          = qword ptr -30h
.text:0000000000009840
.text:0000000000009840 ; __unwind {
.text:0000000000009840                 push    r13
.text:0000000000009842                 push    r12
.text:0000000000009844                 mov     r13, rsi
.text:0000000000009847                 push    rbp
.text:0000000000009848                 push    rbx
.text:0000000000009849                 mov     rbx, rdi
.text:000000000000984C                 mov     r12, rdx
.text:000000000000984F                 sub     rsp, 18h
.text:0000000000009853                 mov     rax, fs:28h
.text:000000000000985C                 mov     [rsp+38h+var_30], rax
.text:0000000000009861                 xor     eax, eax
.text:0000000000009863                 lea     rax, [rsp+38h+pwc]
.text:0000000000009868                 test    rdi, rdi
.text:000000000000986B                 cmovz   rbx, rax
.text:000000000000986F                 mov     rdi, rbx        ; pwc
.text:0000000000009872                 call    _mbrtowc
.text:0000000000009877                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000987B                 mov     rbp, rax
.text:000000000000987E                 jbe     short loc_98A0
.text:0000000000009880                 test    r12, r12
.text:0000000000009883                 jz      short loc_98A0
.text:0000000000009885                 xor     edi, edi
.text:0000000000009887                 call    hard_locale
.text:000000000000988C                 test    al, al
.text:000000000000988E                 jnz     short loc_98A0
.text:0000000000009890                 movzx   eax, byte ptr [r13+0]
.text:0000000000009895                 mov     ebp, 1
.text:000000000000989A                 mov     [rbx], eax
.text:000000000000989C                 nop     dword ptr [rax+00h]
.text:00000000000098A0
.text:00000000000098A0 loc_98A0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000098A0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000098A0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000098A5                 xor     rdx, fs:28h
.text:00000000000098AE                 mov     rax, rbp
.text:00000000000098B1                 jnz     short loc_98BE
.text:00000000000098B3                 add     rsp, 18h
.text:00000000000098B7                 pop     rbx
.text:00000000000098B8                 pop     rbp
.text:00000000000098B9                 pop     r12
.text:00000000000098BB                 pop     r13
.text:00000000000098BD                 retn
.text:00000000000098BE ; ---------------------------------------------------------------------------
.text:00000000000098BE
.text:00000000000098BE loc_98BE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000098BE                 call    ___stack_chk_fail
.text:00000000000098BE ; } // starts at 9840
.text:00000000000098BE rpl_mbrtowc     endp
.text:00000000000098BE
.text:00000000000098BE ; ---------------------------------------------------------------------------
.text:00000000000098C3                 align 10h
.text:00000000000098D0
.text:00000000000098D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098D0
.text:00000000000098D0 ; Attributes: info_from_lumina
.text:00000000000098D0
.text:00000000000098D0 ; char *__fastcall areadlink_with_size(const char *file, size_t size)
.text:00000000000098D0                 public areadlink_with_size
.text:00000000000098D0 areadlink_with_size proc near           ; CODE XREF: canonicalize_filename_mode+42C↑p
.text:00000000000098D0 ; __unwind {
.text:00000000000098D0                 push    r15
.text:00000000000098D2                 push    r14
.text:00000000000098D4                 mov     eax, 401h
.text:00000000000098D9                 push    r13
.text:00000000000098DB                 push    r12
.text:00000000000098DD                 mov     r13, rdi
.text:00000000000098E0                 push    rbp
.text:00000000000098E1                 push    rbx
.text:00000000000098E2                 lea     rbx, [rsi+1]
.text:00000000000098E6                 mov     r14, 3FFFFFFFFFFFFFFFh
.text:00000000000098F0                 mov     r15, 7FFFFFFFFFFFFFFEh
.text:00000000000098FA                 sub     rsp, 8
.text:00000000000098FE                 cmp     rsi, 401h
.text:0000000000009905                 cmovnb  rbx, rax
.text:0000000000009909                 nop     dword ptr [rax+00000000h]
.text:0000000000009910
.text:0000000000009910 loc_9910:                               ; CODE XREF: areadlink_with_size+AF↓j
.text:0000000000009910                 mov     rdi, rbx        ; size
.text:0000000000009913                 call    _malloc
.text:0000000000009918                 test    rax, rax
.text:000000000000991B                 mov     rbp, rax
.text:000000000000991E                 jz      short loc_995B
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: areadlink_with_size+89↓j
.text:0000000000009920                 mov     rdx, rbx        ; len
.text:0000000000009923                 mov     rsi, rax        ; buf
.text:0000000000009926                 mov     rdi, r13        ; path
.text:0000000000009929                 call    _readlink
.text:000000000000992E                 test    rax, rax
.text:0000000000009931                 mov     r12, rax
.text:0000000000009934                 js      short loc_9988
.text:0000000000009936
.text:0000000000009936 loc_9936:                               ; CODE XREF: areadlink_with_size+C0↓j
.text:0000000000009936                 cmp     rbx, r12
.text:0000000000009939                 ja      short loc_99A0
.text:000000000000993B                 mov     rdi, rbp        ; ptr
.text:000000000000993E                 call    _free
.text:0000000000009943                 cmp     rbx, r14
.text:0000000000009946                 ja      short loc_9970
.text:0000000000009948                 add     rbx, rbx
.text:000000000000994B                 mov     rdi, rbx        ; size
.text:000000000000994E                 call    _malloc
.text:0000000000009953                 test    rax, rax
.text:0000000000009956                 mov     rbp, rax
.text:0000000000009959                 jnz     short loc_9920
.text:000000000000995B
.text:000000000000995B loc_995B:                               ; CODE XREF: areadlink_with_size+4E↑j
.text:000000000000995B                                         ; areadlink_with_size+CC↓j ...
.text:000000000000995B                 add     rsp, 8
.text:000000000000995F                 mov     rax, rbp
.text:0000000000009962                 pop     rbx
.text:0000000000009963                 pop     rbp
.text:0000000000009964                 pop     r12
.text:0000000000009966                 pop     r13
.text:0000000000009968                 pop     r14
.text:000000000000996A                 pop     r15
.text:000000000000996C                 retn
.text:000000000000996C ; ---------------------------------------------------------------------------
.text:000000000000996D                 align 10h
.text:0000000000009970
.text:0000000000009970 loc_9970:                               ; CODE XREF: areadlink_with_size+76↑j
.text:0000000000009970                 cmp     rbx, r15
.text:0000000000009973                 ja      short loc_99B0
.text:0000000000009975                 mov     rbx, 7FFFFFFFFFFFFFFFh
.text:000000000000997F                 jmp     short loc_9910
.text:000000000000997F ; ---------------------------------------------------------------------------
.text:0000000000009981                 align 8
.text:0000000000009988
.text:0000000000009988 loc_9988:                               ; CODE XREF: areadlink_with_size+64↑j
.text:0000000000009988                 call    ___errno_location
.text:000000000000998D                 cmp     dword ptr [rax], 22h ; '"'
.text:0000000000009990                 jz      short loc_9936
.text:0000000000009992                 mov     rdi, rbp        ; ptr
.text:0000000000009995                 xor     ebp, ebp
.text:0000000000009997                 call    _free
.text:000000000000999C                 jmp     short loc_995B
.text:000000000000999C ; ---------------------------------------------------------------------------
.text:000000000000999E                 align 20h
.text:00000000000099A0
.text:00000000000099A0 loc_99A0:                               ; CODE XREF: areadlink_with_size+69↑j
.text:00000000000099A0                 mov     byte ptr [rbp+r12+0], 0
.text:00000000000099A6                 jmp     short loc_995B
.text:00000000000099A6 ; ---------------------------------------------------------------------------
.text:00000000000099A8                 align 10h
.text:00000000000099B0
.text:00000000000099B0 loc_99B0:                               ; CODE XREF: areadlink_with_size+A3↑j
.text:00000000000099B0                 call    ___errno_location
.text:00000000000099B5                 xor     ebp, ebp
.text:00000000000099B7                 mov     dword ptr [rax], 0Ch
.text:00000000000099BD                 jmp     short loc_995B
.text:00000000000099BD ; } // starts at 98D0
.text:00000000000099BD areadlink_with_size endp
.text:00000000000099BD
.text:00000000000099BD ; ---------------------------------------------------------------------------
.text:00000000000099BF                 align 20h
.text:00000000000099C0
.text:00000000000099C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099C0
.text:00000000000099C0 ; Attributes: noreturn
.text:00000000000099C0
.text:00000000000099C0 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:00000000000099C0 ; __unwind {
.text:00000000000099C0                 mov     edi, 1          ; status
.text:00000000000099C5                 jmp     usage
.text:00000000000099C5 ; } // starts at 99C0
.text:00000000000099C5 __argmatch_die  endp
.text:00000000000099C5
.text:00000000000099C5 ; ---------------------------------------------------------------------------
.text:00000000000099CA                 align 10h
.text:00000000000099D0
.text:00000000000099D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000099D0
.text:00000000000099D0 ; Attributes: info_from_lumina
.text:00000000000099D0
.text:00000000000099D0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:00000000000099D0                 public argmatch
.text:00000000000099D0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:00000000000099D0
.text:00000000000099D0 var_58          = qword ptr -58h
.text:00000000000099D0 s2              = qword ptr -50h
.text:00000000000099D0 var_41          = byte ptr -41h
.text:00000000000099D0 var_40          = qword ptr -40h
.text:00000000000099D0
.text:00000000000099D0 ; __unwind {
.text:00000000000099D0                 push    r15
.text:00000000000099D2                 push    r14
.text:00000000000099D4                 mov     r15, rsi
.text:00000000000099D7                 push    r13
.text:00000000000099D9                 push    r12
.text:00000000000099DB                 mov     r13, rcx
.text:00000000000099DE                 push    rbp
.text:00000000000099DF                 push    rbx
.text:00000000000099E0                 mov     rbp, rdx
.text:00000000000099E3                 sub     rsp, 28h
.text:00000000000099E7                 mov     [rsp+58h+s2], rdi
.text:00000000000099EC                 mov     [rsp+58h+var_40], rdx
.text:00000000000099F1                 call    _strlen
.text:00000000000099F6                 mov     r14, [r15]
.text:00000000000099F9                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000009A01                 test    r14, r14
.text:0000000000009A04                 jz      loc_9ABD
.text:0000000000009A0A                 mov     r12, rax
.text:0000000000009A0D                 mov     [rsp+58h+var_41], 0
.text:0000000000009A12                 xor     ebx, ebx
.text:0000000000009A14                 jmp     short loc_9A67
.text:0000000000009A14 ; ---------------------------------------------------------------------------
.text:0000000000009A16                 align 20h
.text:0000000000009A20
.text:0000000000009A20 loc_9A20:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000009A20                 mov     rax, [rsp+58h+var_40]
.text:0000000000009A25                 test    rax, rax
.text:0000000000009A28                 jz      loc_9AD0
.text:0000000000009A2E                 mov     rdi, [rsp+58h+var_58]
.text:0000000000009A32                 mov     rdx, r13        ; n
.text:0000000000009A35                 mov     rsi, rbp        ; s2
.text:0000000000009A38                 imul    rdi, r13
.text:0000000000009A3C                 add     rdi, rax        ; s1
.text:0000000000009A3F                 call    _memcmp
.text:0000000000009A44                 test    eax, eax
.text:0000000000009A46                 movzx   eax, [rsp+58h+var_41]
.text:0000000000009A4B                 mov     ecx, 1
.text:0000000000009A50                 cmovnz  eax, ecx
.text:0000000000009A53                 mov     [rsp+58h+var_41], al
.text:0000000000009A57
.text:0000000000009A57 loc_9A57:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000009A57                                         ; argmatch+105↓j
.text:0000000000009A57                 add     rbx, 1
.text:0000000000009A5B                 add     rbp, r13
.text:0000000000009A5E                 mov     r14, [r15+rbx*8]
.text:0000000000009A62                 test    r14, r14
.text:0000000000009A65                 jz      short loc_9AA8
.text:0000000000009A67
.text:0000000000009A67 loc_9A67:                               ; CODE XREF: argmatch+44↑j
.text:0000000000009A67                                         ; argmatch+D1↓j
.text:0000000000009A67                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000009A6C                 mov     rdx, r12        ; n
.text:0000000000009A6F                 mov     rdi, r14        ; s1
.text:0000000000009A72                 call    _strncmp
.text:0000000000009A77                 test    eax, eax
.text:0000000000009A79                 jnz     short loc_9A57
.text:0000000000009A7B                 mov     rdi, r14        ; s
.text:0000000000009A7E                 call    _strlen
.text:0000000000009A83                 cmp     rax, r12
.text:0000000000009A86                 jz      short loc_9AE0
.text:0000000000009A88                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000009A8D                 jnz     short loc_9A20
.text:0000000000009A8F                 mov     [rsp+58h+var_58], rbx
.text:0000000000009A93                 add     rbx, 1
.text:0000000000009A97                 add     rbp, r13
.text:0000000000009A9A                 mov     r14, [r15+rbx*8]
.text:0000000000009A9E                 test    r14, r14
.text:0000000000009AA1                 jnz     short loc_9A67
.text:0000000000009AA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000009AA8
.text:0000000000009AA8 loc_9AA8:                               ; CODE XREF: argmatch+95↑j
.text:0000000000009AA8                 cmp     [rsp+58h+var_41], 0
.text:0000000000009AAD                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000009AB4                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000009AB9                 mov     [rsp+58h+var_58], rax
.text:0000000000009ABD
.text:0000000000009ABD loc_9ABD:                               ; CODE XREF: argmatch+34↑j
.text:0000000000009ABD                                         ; argmatch+114↓j
.text:0000000000009ABD                 mov     rax, [rsp+58h+var_58]
.text:0000000000009AC1                 add     rsp, 28h
.text:0000000000009AC5                 pop     rbx
.text:0000000000009AC6                 pop     rbp
.text:0000000000009AC7                 pop     r12
.text:0000000000009AC9                 pop     r13
.text:0000000000009ACB                 pop     r14
.text:0000000000009ACD                 pop     r15
.text:0000000000009ACF                 retn
.text:0000000000009AD0 ; ---------------------------------------------------------------------------
.text:0000000000009AD0
.text:0000000000009AD0 loc_9AD0:                               ; CODE XREF: argmatch+58↑j
.text:0000000000009AD0                 mov     [rsp+58h+var_41], 1
.text:0000000000009AD5                 jmp     short loc_9A57
.text:0000000000009AD5 ; ---------------------------------------------------------------------------
.text:0000000000009AD7                 align 20h
.text:0000000000009AE0
.text:0000000000009AE0 loc_9AE0:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000009AE0                 mov     [rsp+58h+var_58], rbx
.text:0000000000009AE4                 jmp     short loc_9ABD
.text:0000000000009AE4 ; } // starts at 99D0
.text:0000000000009AE4 argmatch        endp
.text:0000000000009AE4
.text:0000000000009AE4 ; ---------------------------------------------------------------------------
.text:0000000000009AE6                 align 10h
.text:0000000000009AF0
.text:0000000000009AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009AF0
.text:0000000000009AF0 ; Attributes: info_from_lumina
.text:0000000000009AF0
.text:0000000000009AF0 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000009AF0                 public argmatch_invalid
.text:0000000000009AF0 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000009AF0 ; __unwind {
.text:0000000000009AF0                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009AF4                 push    r12
.text:0000000000009AF6                 mov     edx, 5          ; category
.text:0000000000009AFB                 push    rbp
.text:0000000000009AFC                 mov     r12, rsi
.text:0000000000009AFF                 push    rbx
.text:0000000000009B00                 mov     rbp, rdi
.text:0000000000009B03                 jz      short loc_9B50
.text:0000000000009B05                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000009B0C                 xor     edi, edi        ; domainname
.text:0000000000009B0E                 call    _dcgettext
.text:0000000000009B13                 mov     rbx, rax
.text:0000000000009B16
.text:0000000000009B16 loc_9B16:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000009B16                 mov     rsi, rbp
.text:0000000000009B19                 mov     edi, 1
.text:0000000000009B1E                 call    quote_n
.text:0000000000009B23                 mov     rdx, r12
.text:0000000000009B26                 mov     rbp, rax
.text:0000000000009B29                 mov     esi, 8
.text:0000000000009B2E                 xor     edi, edi
.text:0000000000009B30                 call    quotearg_n_style
.text:0000000000009B35                 mov     r8, rbp
.text:0000000000009B38                 mov     rdx, rbx        ; format
.text:0000000000009B3B                 mov     rcx, rax
.text:0000000000009B3E                 pop     rbx
.text:0000000000009B3F                 pop     rbp
.text:0000000000009B40                 pop     r12
.text:0000000000009B42                 xor     esi, esi        ; errnum
.text:0000000000009B44                 xor     edi, edi        ; status
.text:0000000000009B46                 xor     eax, eax
.text:0000000000009B48                 jmp     _error
.text:0000000000009B48 ; ---------------------------------------------------------------------------
.text:0000000000009B4D                 align 10h
.text:0000000000009B50
.text:0000000000009B50 loc_9B50:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000009B50                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000009B57                 xor     edi, edi        ; domainname
.text:0000000000009B59                 call    _dcgettext
.text:0000000000009B5E                 mov     rbx, rax
.text:0000000000009B61                 jmp     short loc_9B16
.text:0000000000009B61 ; } // starts at 9AF0
.text:0000000000009B61 argmatch_invalid endp
.text:0000000000009B61
.text:0000000000009B61 ; ---------------------------------------------------------------------------
.text:0000000000009B63                 align 10h
.text:0000000000009B70
.text:0000000000009B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B70
.text:0000000000009B70 ; Attributes: info_from_lumina
.text:0000000000009B70
.text:0000000000009B70 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000009B70                 public argmatch_valid
.text:0000000000009B70 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000009B70 ; __unwind {
.text:0000000000009B70                 push    r15
.text:0000000000009B72                 push    r14
.text:0000000000009B74                 mov     r14, rdi
.text:0000000000009B77                 push    r13
.text:0000000000009B79                 push    r12
.text:0000000000009B7B                 xor     edi, edi        ; domainname
.text:0000000000009B7D                 push    rbp
.text:0000000000009B7E                 push    rbx
.text:0000000000009B7F                 mov     rbp, rsi
.text:0000000000009B82                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000009B89                 mov     r12, rdx
.text:0000000000009B8C                 mov     edx, 5          ; category
.text:0000000000009B91                 sub     rsp, 8
.text:0000000000009B95                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000009B9C                 call    _dcgettext
.text:0000000000009BA1                 mov     rdi, rax        ; s
.text:0000000000009BA4                 mov     rsi, rbx        ; stream
.text:0000000000009BA7                 call    _fputs_unlocked
.text:0000000000009BAC                 mov     r15, [r14]
.text:0000000000009BAF                 test    r15, r15
.text:0000000000009BB2                 jz      loc_9C48
.text:0000000000009BB8                 xor     r13d, r13d
.text:0000000000009BBB                 xor     ebx, ebx
.text:0000000000009BBD                 jmp     short loc_9BF8
.text:0000000000009BBD ; ---------------------------------------------------------------------------
.text:0000000000009BBF                 align 20h
.text:0000000000009BC0
.text:0000000000009BC0 loc_9BC0:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000009BC0                                         ; argmatch_valid+9D↓j
.text:0000000000009BC0                 mov     rdi, r15
.text:0000000000009BC3                 add     rbx, 1
.text:0000000000009BC7                 mov     r13, rbp
.text:0000000000009BCA                 call    quote
.text:0000000000009BCF                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000009BD6                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000009BDD                 mov     rcx, rax
.text:0000000000009BE0                 mov     esi, 1
.text:0000000000009BE5                 xor     eax, eax
.text:0000000000009BE7                 add     rbp, r12
.text:0000000000009BEA                 call    ___fprintf_chk
.text:0000000000009BEF                 mov     r15, [r14+rbx*8]
.text:0000000000009BF3                 test    r15, r15
.text:0000000000009BF6                 jz      short loc_9C48
.text:0000000000009BF8
.text:0000000000009BF8 loc_9BF8:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000009BF8                                         ; argmatch_valid+D2↓j
.text:0000000000009BF8                 test    rbx, rbx
.text:0000000000009BFB                 jz      short loc_9BC0
.text:0000000000009BFD                 mov     rdx, r12        ; n
.text:0000000000009C00                 mov     rsi, rbp        ; s2
.text:0000000000009C03                 mov     rdi, r13        ; s1
.text:0000000000009C06                 call    _memcmp
.text:0000000000009C0B                 test    eax, eax
.text:0000000000009C0D                 jnz     short loc_9BC0
.text:0000000000009C0F                 mov     rdi, r15
.text:0000000000009C12                 add     rbx, 1
.text:0000000000009C16                 add     rbp, r12
.text:0000000000009C19                 call    quote
.text:0000000000009C1E                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000009C25                 lea     rdx, aS_0       ; ", %s"
.text:0000000000009C2C                 mov     rcx, rax
.text:0000000000009C2F                 mov     esi, 1
.text:0000000000009C34                 xor     eax, eax
.text:0000000000009C36                 call    ___fprintf_chk
.text:0000000000009C3B                 mov     r15, [r14+rbx*8]
.text:0000000000009C3F                 test    r15, r15
.text:0000000000009C42                 jnz     short loc_9BF8
.text:0000000000009C44                 nop     dword ptr [rax+00h]
.text:0000000000009C48
.text:0000000000009C48 loc_9C48:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000009C48                                         ; argmatch_valid+86↑j
.text:0000000000009C48                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000009C4F                 mov     rax, [rdi+28h]
.text:0000000000009C53                 cmp     rax, [rdi+30h]
.text:0000000000009C57                 jnb     short loc_9C78
.text:0000000000009C59                 lea     rdx, [rax+1]
.text:0000000000009C5D                 mov     [rdi+28h], rdx
.text:0000000000009C61                 mov     byte ptr [rax], 0Ah
.text:0000000000009C64                 add     rsp, 8
.text:0000000000009C68                 pop     rbx
.text:0000000000009C69                 pop     rbp
.text:0000000000009C6A                 pop     r12
.text:0000000000009C6C                 pop     r13
.text:0000000000009C6E                 pop     r14
.text:0000000000009C70                 pop     r15
.text:0000000000009C72                 retn
.text:0000000000009C72 ; ---------------------------------------------------------------------------
.text:0000000000009C73                 align 8
.text:0000000000009C78
.text:0000000000009C78 loc_9C78:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000009C78                 add     rsp, 8
.text:0000000000009C7C                 mov     esi, 0Ah        ; int
.text:0000000000009C81                 pop     rbx
.text:0000000000009C82                 pop     rbp
.text:0000000000009C83                 pop     r12
.text:0000000000009C85                 pop     r13
.text:0000000000009C87                 pop     r14
.text:0000000000009C89                 pop     r15
.text:0000000000009C8B                 jmp     ___overflow
.text:0000000000009C8B ; } // starts at 9B70
.text:0000000000009C8B argmatch_valid  endp
.text:0000000000009C8B
.text:0000000000009C90
.text:0000000000009C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C90
.text:0000000000009C90 ; Attributes: info_from_lumina
.text:0000000000009C90
.text:0000000000009C90 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000009C90                 public __xargmatch_internal
.text:0000000000009C90 __xargmatch_internal proc near          ; CODE XREF: get_version_part_0+1F↑p
.text:0000000000009C90 ; __unwind {
.text:0000000000009C90                 push    r15
.text:0000000000009C92                 push    r14
.text:0000000000009C94                 mov     r14, rdi
.text:0000000000009C97                 push    r13
.text:0000000000009C99                 push    r12
.text:0000000000009C9B                 mov     r12, rsi
.text:0000000000009C9E                 push    rbp
.text:0000000000009C9F                 push    rbx
.text:0000000000009CA0                 mov     rbp, rcx
.text:0000000000009CA3                 mov     rbx, rdx
.text:0000000000009CA6                 mov     rcx, r8
.text:0000000000009CA9                 mov     rdx, rbp
.text:0000000000009CAC                 sub     rsp, 8
.text:0000000000009CB0                 mov     rsi, rbx
.text:0000000000009CB3                 mov     rdi, r12
.text:0000000000009CB6                 mov     r15, r8
.text:0000000000009CB9                 mov     r13, r9
.text:0000000000009CBC                 call    argmatch
.text:0000000000009CC1                 test    rax, rax
.text:0000000000009CC4                 js      short loc_9CD5
.text:0000000000009CC6
.text:0000000000009CC6 loc_9CC6:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000009CC6                 add     rsp, 8
.text:0000000000009CCA                 pop     rbx
.text:0000000000009CCB                 pop     rbp
.text:0000000000009CCC                 pop     r12
.text:0000000000009CCE                 pop     r13
.text:0000000000009CD0                 pop     r14
.text:0000000000009CD2                 pop     r15
.text:0000000000009CD4                 retn
.text:0000000000009CD5 ; ---------------------------------------------------------------------------
.text:0000000000009CD5
.text:0000000000009CD5 loc_9CD5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000009CD5                 mov     rdx, rax
.text:0000000000009CD8                 mov     rsi, r12
.text:0000000000009CDB                 mov     rdi, r14
.text:0000000000009CDE                 call    argmatch_invalid
.text:0000000000009CE3                 mov     rdx, r15
.text:0000000000009CE6                 mov     rsi, rbp
.text:0000000000009CE9                 mov     rdi, rbx
.text:0000000000009CEC                 call    argmatch_valid
.text:0000000000009CF1                 call    r13
.text:0000000000009CF4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009CFB                 jmp     short loc_9CC6
.text:0000000000009CFB ; } // starts at 9C90
.text:0000000000009CFB __xargmatch_internal endp
.text:0000000000009CFB
.text:0000000000009CFB ; ---------------------------------------------------------------------------
.text:0000000000009CFD                 align 20h
.text:0000000000009D00
.text:0000000000009D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D00
.text:0000000000009D00 ; Attributes: info_from_lumina
.text:0000000000009D00
.text:0000000000009D00 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000009D00                 public argmatch_to_argument
.text:0000000000009D00 argmatch_to_argument proc near
.text:0000000000009D00 ; __unwind {
.text:0000000000009D00                 push    r14
.text:0000000000009D02                 push    r13
.text:0000000000009D04                 push    r12
.text:0000000000009D06                 push    rbp
.text:0000000000009D07                 push    rbx
.text:0000000000009D08                 mov     r14, [rsi]
.text:0000000000009D0B                 test    r14, r14
.text:0000000000009D0E                 jz      short loc_9D41
.text:0000000000009D10                 mov     r12, rcx
.text:0000000000009D13                 mov     r13, rdi
.text:0000000000009D16                 mov     rbp, rdx
.text:0000000000009D19                 lea     rbx, [rsi+8]
.text:0000000000009D1D                 jmp     short loc_9D2F
.text:0000000000009D1D ; ---------------------------------------------------------------------------
.text:0000000000009D1F                 align 20h
.text:0000000000009D20
.text:0000000000009D20 loc_9D20:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000009D20                 mov     r14, [rbx]
.text:0000000000009D23                 add     rbp, r12
.text:0000000000009D26                 add     rbx, 8
.text:0000000000009D2A                 test    r14, r14
.text:0000000000009D2D                 jz      short loc_9D41
.text:0000000000009D2F
.text:0000000000009D2F loc_9D2F:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000009D2F                 mov     rdx, r12        ; n
.text:0000000000009D32                 mov     rsi, rbp        ; s2
.text:0000000000009D35                 mov     rdi, r13        ; s1
.text:0000000000009D38                 call    _memcmp
.text:0000000000009D3D                 test    eax, eax
.text:0000000000009D3F                 jnz     short loc_9D20
.text:0000000000009D41
.text:0000000000009D41 loc_9D41:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000009D41                                         ; argmatch_to_argument+2D↑j
.text:0000000000009D41                 pop     rbx
.text:0000000000009D42                 mov     rax, r14
.text:0000000000009D45                 pop     rbp
.text:0000000000009D46                 pop     r12
.text:0000000000009D48                 pop     r13
.text:0000000000009D4A                 pop     r14
.text:0000000000009D4C                 retn
.text:0000000000009D4C ; } // starts at 9D00
.text:0000000000009D4C argmatch_to_argument endp
.text:0000000000009D4C
.text:0000000000009D4C ; ---------------------------------------------------------------------------
.text:0000000000009D4D                 align 10h
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50 ; Attributes: info_from_lumina
.text:0000000000009D50
.text:0000000000009D50 ; int __fastcall close_stream(FILE *stream)
.text:0000000000009D50                 public close_stream
.text:0000000000009D50 close_stream    proc near               ; CODE XREF: close_stdin+1F↑p
.text:0000000000009D50                                         ; close_stdin+4C↑p ...
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 push    r12
.text:0000000000009D52                 push    rbp
.text:0000000000009D53                 mov     rbp, rdi
.text:0000000000009D56                 push    rbx
.text:0000000000009D57                 call    ___fpending
.text:0000000000009D5C                 mov     ebx, [rbp+0]
.text:0000000000009D5F                 mov     rdi, rbp        ; stream
.text:0000000000009D62                 mov     r12, rax
.text:0000000000009D65                 call    rpl_fclose
.text:0000000000009D6A                 and     ebx, 20h
.text:0000000000009D6D                 test    ebx, ebx
.text:0000000000009D6F                 jnz     short loc_9D88
.text:0000000000009D71                 test    eax, eax
.text:0000000000009D73                 jz      short loc_9D7F
.text:0000000000009D75                 test    r12, r12
.text:0000000000009D78                 mov     eax, 0FFFFFFFFh
.text:0000000000009D7D                 jz      short loc_9DB8
.text:0000000000009D7F
.text:0000000000009D7F loc_9D7F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000009D7F                 pop     rbx
.text:0000000000009D80                 pop     rbp
.text:0000000000009D81                 pop     r12
.text:0000000000009D83                 retn
.text:0000000000009D83 ; ---------------------------------------------------------------------------
.text:0000000000009D84                 align 8
.text:0000000000009D88
.text:0000000000009D88 loc_9D88:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000009D88                 test    eax, eax
.text:0000000000009D8A                 jnz     short loc_9DA8
.text:0000000000009D8C                 call    ___errno_location
.text:0000000000009D91                 mov     dword ptr [rax], 0
.text:0000000000009D97                 mov     eax, 0FFFFFFFFh
.text:0000000000009D9C                 pop     rbx
.text:0000000000009D9D                 pop     rbp
.text:0000000000009D9E                 pop     r12
.text:0000000000009DA0                 retn
.text:0000000000009DA0 ; ---------------------------------------------------------------------------
.text:0000000000009DA1                 align 8
.text:0000000000009DA8
.text:0000000000009DA8 loc_9DA8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000009DA8                 pop     rbx
.text:0000000000009DA9                 mov     eax, 0FFFFFFFFh
.text:0000000000009DAE                 pop     rbp
.text:0000000000009DAF                 pop     r12
.text:0000000000009DB1                 retn
.text:0000000000009DB1 ; ---------------------------------------------------------------------------
.text:0000000000009DB2                 align 8
.text:0000000000009DB8
.text:0000000000009DB8 loc_9DB8:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000009DB8                 call    ___errno_location
.text:0000000000009DBD                 cmp     dword ptr [rax], 9
.text:0000000000009DC0                 pop     rbx
.text:0000000000009DC1                 pop     rbp
.text:0000000000009DC2                 pop     r12
.text:0000000000009DC4                 setnz   al
.text:0000000000009DC7                 movzx   eax, al
.text:0000000000009DCA                 neg     eax
.text:0000000000009DCC                 retn
.text:0000000000009DCC ; } // starts at 9D50
.text:0000000000009DCC close_stream    endp
.text:0000000000009DCC
.text:0000000000009DCC ; ---------------------------------------------------------------------------
.text:0000000000009DCD                 align 10h
.text:0000000000009DD0
.text:0000000000009DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DD0
.text:0000000000009DD0
.text:0000000000009DD0                 public hard_locale
.text:0000000000009DD0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000009DD0 ; __unwind {
.text:0000000000009DD0                 sub     rsp, 8
.text:0000000000009DD4                 xor     esi, esi        ; locale
.text:0000000000009DD6                 call    _setlocale
.text:0000000000009DDB                 mov     rdx, rax
.text:0000000000009DDE                 mov     eax, 1
.text:0000000000009DE3                 test    rdx, rdx
.text:0000000000009DE6                 jz      short loc_9E05
.text:0000000000009DE8                 lea     rdi, aC         ; "C"
.text:0000000000009DEF                 mov     ecx, 2
.text:0000000000009DF4                 mov     rsi, rdx
.text:0000000000009DF7                 repe cmpsb
.text:0000000000009DF9                 setnbe  cl
.text:0000000000009DFC                 sbb     cl, 0
.text:0000000000009DFF                 xor     eax, eax
.text:0000000000009E01                 test    cl, cl
.text:0000000000009E03                 jnz     short loc_9E10
.text:0000000000009E05
.text:0000000000009E05 loc_9E05:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000009E05                 add     rsp, 8
.text:0000000000009E09                 retn
.text:0000000000009E09 ; ---------------------------------------------------------------------------
.text:0000000000009E0A                 align 10h
.text:0000000000009E10
.text:0000000000009E10 loc_9E10:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000009E10                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000009E17                 mov     ecx, 6
.text:0000000000009E1C                 mov     rsi, rdx
.text:0000000000009E1F                 repe cmpsb
.text:0000000000009E21                 setnbe  al
.text:0000000000009E24                 sbb     al, 0
.text:0000000000009E26                 test    al, al
.text:0000000000009E28                 setnz   al
.text:0000000000009E2B                 add     rsp, 8
.text:0000000000009E2F                 retn
.text:0000000000009E2F ; } // starts at 9DD0
.text:0000000000009E2F hard_locale     endp
.text:0000000000009E2F
.text:0000000000009E30
.text:0000000000009E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E30
.text:0000000000009E30 ; Attributes: info_from_lumina
.text:0000000000009E30
.text:0000000000009E30 ; size_t __fastcall hash_pjw(const void *x, size_t tablesize)
.text:0000000000009E30                 public hash_pjw
.text:0000000000009E30 hash_pjw        proc near               ; CODE XREF: triple_hash+F↑p
.text:0000000000009E30 ; __unwind {
.text:0000000000009E30                 movsx   rcx, byte ptr [rdi]
.text:0000000000009E34                 test    cl, cl
.text:0000000000009E36                 jz      short loc_9E60
.text:0000000000009E38                 xor     eax, eax
.text:0000000000009E3A                 nop     word ptr [rax+rax+00h]
.text:0000000000009E40
.text:0000000000009E40 loc_9E40:                               ; CODE XREF: hash_pjw+21↓j
.text:0000000000009E40                 rol     rax, 9
.text:0000000000009E44                 add     rdi, 1
.text:0000000000009E48                 add     rax, rcx
.text:0000000000009E4B                 movsx   rcx, byte ptr [rdi]
.text:0000000000009E4F                 test    cl, cl
.text:0000000000009E51                 jnz     short loc_9E40
.text:0000000000009E53                 xor     edx, edx
.text:0000000000009E55                 div     rsi
.text:0000000000009E58                 mov     rax, rdx
.text:0000000000009E5B                 retn
.text:0000000000009E5B ; ---------------------------------------------------------------------------
.text:0000000000009E5C                 align 20h
.text:0000000000009E60
.text:0000000000009E60 loc_9E60:                               ; CODE XREF: hash_pjw+6↑j
.text:0000000000009E60                 xor     edx, edx
.text:0000000000009E62                 mov     rax, rdx
.text:0000000000009E65                 retn
.text:0000000000009E65 ; } // starts at 9E30
.text:0000000000009E65 hash_pjw        endp
.text:0000000000009E65
.text:0000000000009E65 ; ---------------------------------------------------------------------------
.text:0000000000009E66                 align 10h
.text:0000000000009E70
.text:0000000000009E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E70
.text:0000000000009E70
.text:0000000000009E70                 public locale_charset
.text:0000000000009E70 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009E70 ; __unwind {
.text:0000000000009E70                 sub     rsp, 8
.text:0000000000009E74                 mov     edi, 0Eh        ; item
.text:0000000000009E79                 call    _nl_langinfo
.text:0000000000009E7E                 test    rax, rax
.text:0000000000009E81                 jz      short loc_9EA0
.text:0000000000009E83                 cmp     byte ptr [rax], 0
.text:0000000000009E86                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000009E8D                 cmovz   rax, rdx
.text:0000000000009E91                 add     rsp, 8
.text:0000000000009E95                 retn
.text:0000000000009E95 ; ---------------------------------------------------------------------------
.text:0000000000009E96                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 loc_9EA0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009EA0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009EA7                 add     rsp, 8
.text:0000000000009EAB                 retn
.text:0000000000009EAB ; } // starts at 9E70
.text:0000000000009EAB locale_charset  endp
.text:0000000000009EAB
.text:0000000000009EAB ; ---------------------------------------------------------------------------
.text:0000000000009EAC                 align 10h
.text:0000000000009EB0
.text:0000000000009EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EB0
.text:0000000000009EB0
.text:0000000000009EB0                 public randint_new
.text:0000000000009EB0 randint_new     proc near
.text:0000000000009EB0 ; __unwind {
.text:0000000000009EB0                 push    rbx
.text:0000000000009EB1                 mov     rbx, rdi
.text:0000000000009EB4                 mov     edi, 18h
.text:0000000000009EB9                 call    xmalloc
.text:0000000000009EBE                 mov     [rax], rbx
.text:0000000000009EC1                 mov     qword ptr [rax+10h], 0
.text:0000000000009EC9                 mov     qword ptr [rax+8], 0
.text:0000000000009ED1                 pop     rbx
.text:0000000000009ED2                 retn
.text:0000000000009ED2 ; } // starts at 9EB0
.text:0000000000009ED2 randint_new     endp
.text:0000000000009ED2
.text:0000000000009ED2 ; ---------------------------------------------------------------------------
.text:0000000000009ED3                 align 20h
.text:0000000000009EE0
.text:0000000000009EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EE0
.text:0000000000009EE0
.text:0000000000009EE0                 public randint_all_new
.text:0000000000009EE0 randint_all_new proc near               ; CODE XREF: try_tempname_len+7B↑p
.text:0000000000009EE0 ; __unwind {
.text:0000000000009EE0                 push    rbx
.text:0000000000009EE1                 call    randread_new
.text:0000000000009EE6                 test    rax, rax
.text:0000000000009EE9                 jz      short loc_9F10
.text:0000000000009EEB                 mov     rbx, rax
.text:0000000000009EEE                 mov     edi, 18h
.text:0000000000009EF3                 call    xmalloc
.text:0000000000009EF8                 mov     [rax], rbx
.text:0000000000009EFB                 mov     qword ptr [rax+10h], 0
.text:0000000000009F03                 mov     qword ptr [rax+8], 0
.text:0000000000009F0B                 pop     rbx
.text:0000000000009F0C                 retn
.text:0000000000009F0C ; ---------------------------------------------------------------------------
.text:0000000000009F0D                 align 10h
.text:0000000000009F10
.text:0000000000009F10 loc_9F10:                               ; CODE XREF: randint_all_new+9↑j
.text:0000000000009F10                 xor     eax, eax
.text:0000000000009F12                 pop     rbx
.text:0000000000009F13                 retn
.text:0000000000009F13 ; } // starts at 9EE0
.text:0000000000009F13 randint_all_new endp
.text:0000000000009F13
.text:0000000000009F13 ; ---------------------------------------------------------------------------
.text:0000000000009F14                 align 20h
.text:0000000000009F20
.text:0000000000009F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F20
.text:0000000000009F20
.text:0000000000009F20                 public randint_get_source
.text:0000000000009F20 randint_get_source proc near
.text:0000000000009F20 ; __unwind {
.text:0000000000009F20                 mov     rax, [rdi]
.text:0000000000009F23                 retn
.text:0000000000009F23 ; } // starts at 9F20
.text:0000000000009F23 randint_get_source endp
.text:0000000000009F23
.text:0000000000009F23 ; ---------------------------------------------------------------------------
.text:0000000000009F24                 align 10h
.text:0000000000009F30
.text:0000000000009F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F30
.text:0000000000009F30
.text:0000000000009F30                 public randint_genmax
.text:0000000000009F30 randint_genmax  proc near               ; CODE XREF: try_tempname_len+C4↑p
.text:0000000000009F30
.text:0000000000009F30 var_50          = qword ptr -50h
.text:0000000000009F30 var_48          = byte ptr -48h
.text:0000000000009F30 var_40          = qword ptr -40h
.text:0000000000009F30
.text:0000000000009F30 ; __unwind {
.text:0000000000009F30                 push    r15
.text:0000000000009F32                 push    r14
.text:0000000000009F34                 lea     r15, [rsi+1]
.text:0000000000009F38                 push    r13
.text:0000000000009F3A                 push    r12
.text:0000000000009F3C                 mov     r13, rdi
.text:0000000000009F3F                 push    rbp
.text:0000000000009F40                 push    rbx
.text:0000000000009F41                 mov     r14, rsi
.text:0000000000009F44                 sub     rsp, 28h
.text:0000000000009F48                 mov     rbp, [rdi+8]
.text:0000000000009F4C                 mov     rbx, [rdi+10h]
.text:0000000000009F50                 mov     rax, fs:28h
.text:0000000000009F59                 mov     [rsp+58h+var_40], rax
.text:0000000000009F5E                 xor     eax, eax
.text:0000000000009F60                 mov     rax, [rdi]
.text:0000000000009F63                 lea     r12, [rsp+58h+var_48]
.text:0000000000009F68                 mov     [rsp+58h+var_50], rax
.text:0000000000009F6D                 jmp     short loc_9FA5
.text:0000000000009F6D ; ---------------------------------------------------------------------------
.text:0000000000009F6F                 align 10h
.text:0000000000009F70
.text:0000000000009F70 loc_9F70:                               ; CODE XREF: randint_genmax+78↓j
.text:0000000000009F70                 cmp     rbx, r14
.text:0000000000009F73                 jz      loc_9FFF
.text:0000000000009F79
.text:0000000000009F79 loc_9F79:                               ; CODE XREF: randint_genmax+C9↓j
.text:0000000000009F79                 mov     rax, rbx
.text:0000000000009F7C                 xor     edx, edx
.text:0000000000009F7E                 sub     rax, r14
.text:0000000000009F81                 div     r15
.text:0000000000009F84                 sub     rbx, rdx
.text:0000000000009F87                 mov     rdi, rdx
.text:0000000000009F8A                 mov     rsi, rax
.text:0000000000009F8D                 xor     edx, edx
.text:0000000000009F8F                 mov     rax, rbp
.text:0000000000009F92                 div     r15
.text:0000000000009F95                 cmp     rbp, rbx
.text:0000000000009F98                 jbe     loc_A038
.text:0000000000009F9E                 lea     rbx, [rdi-1]
.text:0000000000009FA2                 mov     rbp, rdx
.text:0000000000009FA5
.text:0000000000009FA5 loc_9FA5:                               ; CODE XREF: randint_genmax+3D↑j
.text:0000000000009FA5                 cmp     rbx, r14
.text:0000000000009FA8                 jnb     short loc_9F70
.text:0000000000009FAA                 mov     rax, rbx
.text:0000000000009FAD                 xor     edx, edx
.text:0000000000009FAF                 nop
.text:0000000000009FB0
.text:0000000000009FB0 loc_9FB0:                               ; CODE XREF: randint_genmax+91↓j
.text:0000000000009FB0                 shl     rax, 8
.text:0000000000009FB4                 add     rdx, 1
.text:0000000000009FB8                 add     rax, 0FFh
.text:0000000000009FBE                 cmp     r14, rax
.text:0000000000009FC1                 ja      short loc_9FB0
.text:0000000000009FC3                 mov     rdi, [rsp+58h+var_50]
.text:0000000000009FC8                 mov     rsi, r12
.text:0000000000009FCB                 call    randread
.text:0000000000009FD0                 mov     rax, r12
.text:0000000000009FD3                 nop     dword ptr [rax+rax+00h]
.text:0000000000009FD8
.text:0000000000009FD8 loc_9FD8:                               ; CODE XREF: randint_genmax+C4↓j
.text:0000000000009FD8                 movzx   edx, byte ptr [rax]
.text:0000000000009FDB                 shl     rbx, 8
.text:0000000000009FDF                 shl     rbp, 8
.text:0000000000009FE3                 add     rbx, 0FFh
.text:0000000000009FEA                 add     rax, 1
.text:0000000000009FEE                 add     rbp, rdx
.text:0000000000009FF1                 cmp     r14, rbx
.text:0000000000009FF4                 ja      short loc_9FD8
.text:0000000000009FF6                 cmp     rbx, r14
.text:0000000000009FF9                 jnz     loc_9F79
.text:0000000000009FFF
.text:0000000000009FFF loc_9FFF:                               ; CODE XREF: randint_genmax+43↑j
.text:0000000000009FFF                 mov     qword ptr [r13+10h], 0
.text:000000000000A007                 mov     qword ptr [r13+8], 0
.text:000000000000A00F
.text:000000000000A00F loc_A00F:                               ; CODE XREF: randint_genmax+113↓j
.text:000000000000A00F                 mov     rcx, [rsp+58h+var_40]
.text:000000000000A014                 xor     rcx, fs:28h
.text:000000000000A01D                 mov     rax, rbp
.text:000000000000A020                 jnz     short loc_A045
.text:000000000000A022                 add     rsp, 28h
.text:000000000000A026                 pop     rbx
.text:000000000000A027                 pop     rbp
.text:000000000000A028                 pop     r12
.text:000000000000A02A                 pop     r13
.text:000000000000A02C                 pop     r14
.text:000000000000A02E                 pop     r15
.text:000000000000A030                 retn
.text:000000000000A030 ; ---------------------------------------------------------------------------
.text:000000000000A031                 align 8
.text:000000000000A038
.text:000000000000A038 loc_A038:                               ; CODE XREF: randint_genmax+68↑j
.text:000000000000A038                 mov     [r13+8], rax
.text:000000000000A03C                 mov     [r13+10h], rsi
.text:000000000000A040                 mov     rbp, rdx
.text:000000000000A043                 jmp     short loc_A00F
.text:000000000000A045 ; ---------------------------------------------------------------------------
.text:000000000000A045
.text:000000000000A045 loc_A045:                               ; CODE XREF: randint_genmax+F0↑j
.text:000000000000A045                 call    ___stack_chk_fail
.text:000000000000A045 ; } // starts at 9F30
.text:000000000000A045 randint_genmax  endp
.text:000000000000A045
.text:000000000000A045 ; ---------------------------------------------------------------------------
.text:000000000000A04A                 align 10h
.text:000000000000A050
.text:000000000000A050 ; =============== S U B R O U T I N E =======================================
.text:000000000000A050
.text:000000000000A050
.text:000000000000A050 ; __int64 __fastcall randint_free(void *ptr)
.text:000000000000A050                 public randint_free
.text:000000000000A050 randint_free    proc near
.text:000000000000A050 ; __unwind {
.text:000000000000A050                 push    rbx
.text:000000000000A051                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A058                 mov     rbx, rdi
.text:000000000000A05B                 mov     esi, 18h
.text:000000000000A060                 call    ___explicit_bzero_chk
.text:000000000000A065                 mov     rdi, rbx        ; ptr
.text:000000000000A068                 pop     rbx
.text:000000000000A069                 jmp     _free
.text:000000000000A069 ; } // starts at A050
.text:000000000000A069 randint_free    endp
.text:000000000000A069
.text:000000000000A069 ; ---------------------------------------------------------------------------
.text:000000000000A06E                 align 10h
.text:000000000000A070
.text:000000000000A070 ; =============== S U B R O U T I N E =======================================
.text:000000000000A070
.text:000000000000A070
.text:000000000000A070 ; __int64 __fastcall randint_all_free(void *ptr)
.text:000000000000A070                 public randint_all_free
.text:000000000000A070 randint_all_free proc near              ; CODE XREF: try_tempname_len+102↑p
.text:000000000000A070                                         ; try_tempname_len+130↑p
.text:000000000000A070 ; __unwind {
.text:000000000000A070                 push    r13
.text:000000000000A072                 push    r12
.text:000000000000A074                 push    rbp
.text:000000000000A075                 push    rbx
.text:000000000000A076                 mov     rbx, rdi
.text:000000000000A079                 sub     rsp, 8
.text:000000000000A07D                 mov     rdi, [rdi]      ; ptr
.text:000000000000A080                 call    randread_free
.text:000000000000A085                 mov     r12d, eax
.text:000000000000A088                 call    ___errno_location
.text:000000000000A08D                 mov     r13d, [rax]
.text:000000000000A090                 mov     rdi, rbx
.text:000000000000A093                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A09A                 mov     esi, 18h
.text:000000000000A09F                 mov     rbp, rax
.text:000000000000A0A2                 call    ___explicit_bzero_chk
.text:000000000000A0A7                 mov     rdi, rbx        ; ptr
.text:000000000000A0AA                 call    _free
.text:000000000000A0AF                 mov     [rbp+0], r13d
.text:000000000000A0B3                 add     rsp, 8
.text:000000000000A0B7                 mov     eax, r12d
.text:000000000000A0BA                 pop     rbx
.text:000000000000A0BB                 pop     rbp
.text:000000000000A0BC                 pop     r12
.text:000000000000A0BE                 pop     r13
.text:000000000000A0C0                 retn
.text:000000000000A0C0 ; } // starts at A070
.text:000000000000A0C0 randint_all_free endp
.text:000000000000A0C0
.text:000000000000A0C0 ; ---------------------------------------------------------------------------
.text:000000000000A0C1                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0D0
.text:000000000000A0D0 ; Attributes: noreturn
.text:000000000000A0D0
.text:000000000000A0D0 randread_error  proc near               ; DATA XREF: randread_new+5A↓o
.text:000000000000A0D0                                         ; randread_new+C4↓o ...
.text:000000000000A0D0 ; __unwind {
.text:000000000000A0D0                 push    rbp
.text:000000000000A0D1                 push    rbx
.text:000000000000A0D2                 sub     rsp, 8
.text:000000000000A0D6                 test    rdi, rdi
.text:000000000000A0D9                 jz      short loc_A118
.text:000000000000A0DB                 call    quote
.text:000000000000A0E0                 mov     rbp, rax
.text:000000000000A0E3                 call    ___errno_location
.text:000000000000A0E8                 cmp     dword ptr [rax], 0
.text:000000000000A0EB                 mov     rbx, rax
.text:000000000000A0EE                 mov     edx, 5          ; category
.text:000000000000A0F3                 jz      short loc_A11D
.text:000000000000A0F5                 lea     rsi, aSReadError ; "%s: read error"
.text:000000000000A0FC                 xor     edi, edi        ; domainname
.text:000000000000A0FE                 call    _dcgettext
.text:000000000000A103
.text:000000000000A103 loc_A103:                               ; CODE XREF: randread_error+5B↓j
.text:000000000000A103                 mov     edi, cs:exit_failure ; status
.text:000000000000A109                 mov     esi, [rbx]      ; errnum
.text:000000000000A10B                 mov     rdx, rax        ; format
.text:000000000000A10E                 mov     rcx, rbp
.text:000000000000A111                 xor     eax, eax
.text:000000000000A113                 call    _error
.text:000000000000A118
.text:000000000000A118 loc_A118:                               ; CODE XREF: randread_error+9↑j
.text:000000000000A118                 call    _abort
.text:000000000000A11D ; ---------------------------------------------------------------------------
.text:000000000000A11D
.text:000000000000A11D loc_A11D:                               ; CODE XREF: randread_error+23↑j
.text:000000000000A11D                 lea     rsi, aSEndOfFile ; "%s: end of file"
.text:000000000000A124                 xor     edi, edi        ; domainname
.text:000000000000A126                 call    _dcgettext
.text:000000000000A12B                 jmp     short loc_A103
.text:000000000000A12B ; } // starts at A0D0
.text:000000000000A12B randread_error  endp
.text:000000000000A12B
.text:000000000000A12B ; ---------------------------------------------------------------------------
.text:000000000000A12D                 align 10h
.text:000000000000A130
.text:000000000000A130 ; =============== S U B R O U T I N E =======================================
.text:000000000000A130
.text:000000000000A130
.text:000000000000A130                 public randread_new
.text:000000000000A130 randread_new    proc near               ; CODE XREF: randint_all_new+1↑p
.text:000000000000A130
.text:000000000000A130 var_68          = qword ptr -68h
.text:000000000000A130 var_60          = qword ptr -60h
.text:000000000000A130 tv              = timeval ptr -58h
.text:000000000000A130 var_40          = qword ptr -40h
.text:000000000000A130
.text:000000000000A130 ; __unwind {
.text:000000000000A130                 push    r15
.text:000000000000A132                 push    r14
.text:000000000000A134                 push    r13
.text:000000000000A136                 push    r12
.text:000000000000A138                 push    rbp
.text:000000000000A139                 push    rbx
.text:000000000000A13A                 sub     rsp, 38h
.text:000000000000A13E                 mov     rax, fs:28h
.text:000000000000A147                 mov     [rsp+68h+var_40], rax
.text:000000000000A14C                 xor     eax, eax
.text:000000000000A14E                 test    rsi, rsi
.text:000000000000A151                 jz      loc_A278
.text:000000000000A157                 test    rdi, rdi
.text:000000000000A15A                 mov     r12, rdi
.text:000000000000A15D                 mov     rbp, rsi
.text:000000000000A160                 jz      short loc_A1E0
.text:000000000000A162                 lea     rsi, aRb        ; "rb"
.text:000000000000A169                 call    fopen_safer
.text:000000000000A16E                 test    rax, rax
.text:000000000000A171                 mov     r13, rax
.text:000000000000A174                 jz      loc_A378
.text:000000000000A17A                 mov     edi, 1038h
.text:000000000000A17F                 call    xmalloc
.text:000000000000A184                 mov     rbx, rax
.text:000000000000A187                 mov     [rax], r13
.text:000000000000A18A                 lea     rax, randread_error
.text:000000000000A191                 cmp     rbp, 1000h
.text:000000000000A198                 mov     ecx, 1000h
.text:000000000000A19D                 lea     rsi, [rbx+18h]  ; buf
.text:000000000000A1A1                 cmovbe  rcx, rbp        ; n
.text:000000000000A1A5                 mov     [rbx+8], rax
.text:000000000000A1A9                 mov     [rbx+10h], r12
.text:000000000000A1AD                 xor     edx, edx        ; modes
.text:000000000000A1AF                 mov     rdi, r13        ; stream
.text:000000000000A1B2                 call    _setvbuf
.text:000000000000A1B7
.text:000000000000A1B7 loc_A1B7:                               ; CODE XREF: randread_new+13D↓j
.text:000000000000A1B7                                         ; randread_new+16F↓j ...
.text:000000000000A1B7                 mov     rdx, [rsp+68h+var_40]
.text:000000000000A1BC                 xor     rdx, fs:28h
.text:000000000000A1C5                 mov     rax, rbx
.text:000000000000A1C8                 jnz     loc_A37F
.text:000000000000A1CE                 add     rsp, 38h
.text:000000000000A1D2                 pop     rbx
.text:000000000000A1D3                 pop     rbp
.text:000000000000A1D4                 pop     r12
.text:000000000000A1D6                 pop     r13
.text:000000000000A1D8                 pop     r14
.text:000000000000A1DA                 pop     r15
.text:000000000000A1DC                 retn
.text:000000000000A1DC ; ---------------------------------------------------------------------------
.text:000000000000A1DD                 align 20h
.text:000000000000A1E0
.text:000000000000A1E0 loc_A1E0:                               ; CODE XREF: randread_new+30↑j
.text:000000000000A1E0                 mov     edi, 1038h
.text:000000000000A1E5                 call    xmalloc
.text:000000000000A1EA                 mov     rbx, rax
.text:000000000000A1ED                 mov     qword ptr [rax], 0
.text:000000000000A1F4                 lea     rax, randread_error
.text:000000000000A1FB                 lea     rdi, aDevUrandom ; "/dev/urandom"
.text:000000000000A202                 xor     esi, esi        ; oflag
.text:000000000000A204                 mov     qword ptr [rbx+10h], 0
.text:000000000000A20C                 mov     [rbx+8], rax
.text:000000000000A210                 mov     qword ptr [rbx+18h], 0
.text:000000000000A218                 xor     eax, eax
.text:000000000000A21A                 call    _open
.text:000000000000A21F                 test    eax, eax
.text:000000000000A221                 lea     r13, [rbx+20h]
.text:000000000000A225                 mov     r15d, eax
.text:000000000000A228                 js      short loc_A2A8
.text:000000000000A22A                 cmp     rbp, 800h
.text:000000000000A231                 mov     rdx, rbp
.text:000000000000A234                 mov     r14d, 800h
.text:000000000000A23A                 cmova   rdx, r14
.text:000000000000A23E                 mov     ecx, 1018h
.text:000000000000A243                 mov     rsi, r13
.text:000000000000A246                 mov     edi, eax
.text:000000000000A248                 call    ___read_chk
.text:000000000000A24D                 mov     edi, r15d       ; fd
.text:000000000000A250                 mov     rbp, rax
.text:000000000000A253                 call    _close
.text:000000000000A258                 cmp     rbp, 7FFh
.text:000000000000A25F                 jle     loc_A384
.text:000000000000A265
.text:000000000000A265 loc_A265:                               ; CODE XREF: randread_new+1F6↓j
.text:000000000000A265                                         ; randread_new+223↓j ...
.text:000000000000A265                 mov     rdi, r13
.text:000000000000A268                 call    isaac_seed
.text:000000000000A26D                 jmp     loc_A1B7
.text:000000000000A26D ; ---------------------------------------------------------------------------
.text:000000000000A272                 align 8
.text:000000000000A278
.text:000000000000A278 loc_A278:                               ; CODE XREF: randread_new+21↑j
.text:000000000000A278                 mov     edi, 1038h
.text:000000000000A27D                 call    xmalloc
.text:000000000000A282                 mov     rbx, rax
.text:000000000000A285                 mov     qword ptr [rax], 0
.text:000000000000A28C                 lea     rax, randread_error
.text:000000000000A293                 mov     qword ptr [rbx+10h], 0
.text:000000000000A29B                 mov     [rbx+8], rax
.text:000000000000A29F                 jmp     loc_A1B7
.text:000000000000A29F ; ---------------------------------------------------------------------------
.text:000000000000A2A4                 align 8
.text:000000000000A2A8
.text:000000000000A2A8 loc_A2A8:                               ; CODE XREF: randread_new+F8↑j
.text:000000000000A2A8                 lea     r12, [rsp+68h+tv]
.text:000000000000A2AD                 xor     esi, esi        ; tz
.text:000000000000A2AF                 mov     r14d, 18h
.text:000000000000A2B5                 mov     rdi, r12        ; tv
.text:000000000000A2B8                 call    _gettimeofday
.text:000000000000A2BD                 movdqa  xmm0, xmmword ptr [rsp+68h+tv.tv_sec]
.text:000000000000A2C3                 movups  xmmword ptr [rbx+20h], xmm0
.text:000000000000A2C7                 call    _getpid
.text:000000000000A2CC                 mov     [rbx+30h], eax
.text:000000000000A2CF                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A2D3                 call    _getppid
.text:000000000000A2D8                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A2DC                 mov     [rbx+34h], eax
.text:000000000000A2DF
.text:000000000000A2DF loc_A2DF:                               ; CODE XREF: randread_new+324↓j
.text:000000000000A2DF                 mov     ebp, 800h
.text:000000000000A2E4                 mov     eax, 4
.text:000000000000A2E9                 sub     rbp, r14
.text:000000000000A2EC                 cmp     rbp, 4
.text:000000000000A2F0                 cmova   rbp, rax
.text:000000000000A2F4                 call    _getuid
.text:000000000000A2F9                 test    ebp, ebp
.text:000000000000A2FB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A2FF                 lea     rcx, [r13+r14+0]
.text:000000000000A304                 mov     esi, ebp
.text:000000000000A306                 jz      short loc_A31C
.text:000000000000A308                 xor     eax, eax
.text:000000000000A30A
.text:000000000000A30A loc_A30A:                               ; CODE XREF: randread_new+1EA↓j
.text:000000000000A30A                 mov     edx, eax
.text:000000000000A30C                 add     eax, 1
.text:000000000000A30F                 movzx   edi, byte ptr [r12+rdx]
.text:000000000000A314                 cmp     eax, esi
.text:000000000000A316                 mov     [rcx+rdx], dil
.text:000000000000A31A                 jb      short loc_A30A
.text:000000000000A31C
.text:000000000000A31C loc_A31C:                               ; CODE XREF: randread_new+1D6↑j
.text:000000000000A31C                 add     rbp, r14
.text:000000000000A31F                 cmp     rbp, 7FFh
.text:000000000000A326                 ja      loc_A265
.text:000000000000A32C                 call    _getgid
.text:000000000000A331                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A335                 mov     eax, 800h
.text:000000000000A33A                 mov     edx, 4
.text:000000000000A33F                 sub     rax, rbp
.text:000000000000A342                 lea     rcx, [r13+rbp+0]
.text:000000000000A347                 cmp     rax, 4
.text:000000000000A34B                 cmova   rax, rdx
.text:000000000000A34F                 test    eax, eax
.text:000000000000A351                 mov     esi, eax
.text:000000000000A353                 jz      loc_A265
.text:000000000000A359                 xor     eax, eax
.text:000000000000A35B
.text:000000000000A35B loc_A35B:                               ; CODE XREF: randread_new+23B↓j
.text:000000000000A35B                 mov     edx, eax
.text:000000000000A35D                 add     eax, 1
.text:000000000000A360                 movzx   edi, byte ptr [r12+rdx]
.text:000000000000A365                 cmp     eax, esi
.text:000000000000A367                 mov     [rcx+rdx], dil
.text:000000000000A36B                 jb      short loc_A35B
.text:000000000000A36D                 jmp     loc_A265
.text:000000000000A36D ; ---------------------------------------------------------------------------
.text:000000000000A372                 align 8
.text:000000000000A378
.text:000000000000A378 loc_A378:                               ; CODE XREF: randread_new+44↑j
.text:000000000000A378                 xor     ebx, ebx
.text:000000000000A37A                 jmp     loc_A1B7
.text:000000000000A37F ; ---------------------------------------------------------------------------
.text:000000000000A37F
.text:000000000000A37F loc_A37F:                               ; CODE XREF: randread_new+98↑j
.text:000000000000A37F                 call    ___stack_chk_fail
.text:000000000000A384 ; ---------------------------------------------------------------------------
.text:000000000000A384
.text:000000000000A384 loc_A384:                               ; CODE XREF: randread_new+12F↑j
.text:000000000000A384                 test    rbp, rbp
.text:000000000000A387                 mov     r15, r14
.text:000000000000A38A                 mov     eax, 10h
.text:000000000000A38F                 cmovs   rbp, r12
.text:000000000000A393                 lea     r12, [rsp+68h+tv]
.text:000000000000A398                 sub     r15, rbp
.text:000000000000A39B                 cmp     r15, 10h
.text:000000000000A39F                 mov     rdi, r12        ; tv
.text:000000000000A3A2                 cmova   r15, rax
.text:000000000000A3A6                 xor     esi, esi        ; tz
.text:000000000000A3A8                 call    _gettimeofday
.text:000000000000A3AD                 lea     rax, [r13+rbp+0]
.text:000000000000A3B2                 add     rbp, r15
.text:000000000000A3B5                 mov     ecx, r15d
.text:000000000000A3B8                 cmp     rbp, 7FFh
.text:000000000000A3BF                 mov     rsi, r12
.text:000000000000A3C2                 mov     rdi, rax
.text:000000000000A3C5                 rep movsb
.text:000000000000A3C7                 ja      loc_A265
.text:000000000000A3CD                 mov     r15, r14
.text:000000000000A3D0                 mov     r8d, 4
.text:000000000000A3D6                 sub     r15, rbp
.text:000000000000A3D9                 mov     [rsp+68h+var_60], r8
.text:000000000000A3DE                 cmp     r15, 4
.text:000000000000A3E2                 cmova   r15, r8
.text:000000000000A3E6                 lea     rdx, [rbp+r15+0]
.text:000000000000A3EB                 add     rbp, r13
.text:000000000000A3EE                 mov     [rsp+68h+var_68], rdx
.text:000000000000A3F2                 call    _getpid
.text:000000000000A3F7                 mov     rdx, [rsp+68h+var_68]
.text:000000000000A3FB                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A3FF                 mov     ecx, r15d
.text:000000000000A402                 mov     rdi, rbp
.text:000000000000A405                 mov     rsi, r12
.text:000000000000A408                 mov     r8, [rsp+68h+var_60]
.text:000000000000A40D                 rep movsb
.text:000000000000A40F                 cmp     rdx, 7FFh
.text:000000000000A416                 jg      loc_A265
.text:000000000000A41C                 sub     r14, rdx
.text:000000000000A41F                 cmp     r14, 4
.text:000000000000A423                 cmova   r14, r8
.text:000000000000A427                 call    _getppid
.text:000000000000A42C                 mov     rdx, [rsp+68h+var_68]
.text:000000000000A430                 mov     dword ptr [rsp+68h+tv.tv_sec], eax
.text:000000000000A434                 mov     ecx, r14d
.text:000000000000A437                 mov     rsi, r12
.text:000000000000A43A                 lea     rax, [r13+rdx+0]
.text:000000000000A43F                 add     r14, rdx
.text:000000000000A442                 cmp     r14, 7FFh
.text:000000000000A449                 mov     rdi, rax
.text:000000000000A44C                 rep movsb
.text:000000000000A44E                 ja      loc_A265
.text:000000000000A454                 jmp     loc_A2DF
.text:000000000000A454 ; } // starts at A130
.text:000000000000A454 randread_new    endp
.text:000000000000A454
.text:000000000000A454 ; ---------------------------------------------------------------------------
.text:000000000000A459                 align 20h
.text:000000000000A460
.text:000000000000A460 ; =============== S U B R O U T I N E =======================================
.text:000000000000A460
.text:000000000000A460
.text:000000000000A460                 public randread_set_handler
.text:000000000000A460 randread_set_handler proc near
.text:000000000000A460 ; __unwind {
.text:000000000000A460                 mov     [rdi+8], rsi
.text:000000000000A464                 retn
.text:000000000000A464 ; } // starts at A460
.text:000000000000A464 randread_set_handler endp
.text:000000000000A464
.text:000000000000A464 ; ---------------------------------------------------------------------------
.text:000000000000A465                 align 10h
.text:000000000000A470
.text:000000000000A470 ; =============== S U B R O U T I N E =======================================
.text:000000000000A470
.text:000000000000A470
.text:000000000000A470                 public randread_set_handler_arg
.text:000000000000A470 randread_set_handler_arg proc near
.text:000000000000A470 ; __unwind {
.text:000000000000A470                 mov     [rdi+10h], rsi
.text:000000000000A474                 retn
.text:000000000000A474 ; } // starts at A470
.text:000000000000A474 randread_set_handler_arg endp
.text:000000000000A474
.text:000000000000A474 ; ---------------------------------------------------------------------------
.text:000000000000A475                 align 20h
.text:000000000000A480
.text:000000000000A480 ; =============== S U B R O U T I N E =======================================
.text:000000000000A480
.text:000000000000A480
.text:000000000000A480                 public randread
.text:000000000000A480 randread        proc near               ; CODE XREF: randint_genmax+9B↑p
.text:000000000000A480
.text:000000000000A480 src             = qword ptr -40h
.text:000000000000A480
.text:000000000000A480 ; __unwind {
.text:000000000000A480                 push    r15
.text:000000000000A482                 push    r14
.text:000000000000A484                 push    r13
.text:000000000000A486                 push    r12
.text:000000000000A488                 mov     r12, rdi
.text:000000000000A48B                 push    rbp
.text:000000000000A48C                 push    rbx
.text:000000000000A48D                 mov     rbp, rdx
.text:000000000000A490                 mov     rbx, rsi
.text:000000000000A493                 sub     rsp, 18h
.text:000000000000A497                 mov     rcx, [rdi]
.text:000000000000A49A                 test    rcx, rcx
.text:000000000000A49D                 mov     [rsp+48h+src], rcx
.text:000000000000A4A2                 jz      short loc_A508
.text:000000000000A4A4                 call    ___errno_location
.text:000000000000A4A9                 mov     rcx, [rsp+48h+src]
.text:000000000000A4AE                 mov     r13, rax
.text:000000000000A4B1                 jmp     short loc_A4D6
.text:000000000000A4B1 ; ---------------------------------------------------------------------------
.text:000000000000A4B3                 align 8
.text:000000000000A4B8
.text:000000000000A4B8 loc_A4B8:                               ; CODE XREF: randread+70↓j
.text:000000000000A4B8                 mov     rax, [r12]
.text:000000000000A4BC                 mov     rdi, [r12+10h]
.text:000000000000A4C1                 mov     eax, [rax]
.text:000000000000A4C3                 and     eax, 20h
.text:000000000000A4C6                 cmovnz  eax, edx
.text:000000000000A4C9                 mov     [r13+0], eax
.text:000000000000A4CD                 call    qword ptr [r12+8]
.text:000000000000A4D2                 mov     rcx, [r12]      ; stream
.text:000000000000A4D6
.text:000000000000A4D6 loc_A4D6:                               ; CODE XREF: randread+31↑j
.text:000000000000A4D6                 mov     rdx, rbp        ; n
.text:000000000000A4D9                 mov     rdi, rbx        ; ptr
.text:000000000000A4DC                 mov     esi, 1          ; size
.text:000000000000A4E1                 call    _fread_unlocked
.text:000000000000A4E6                 add     rbx, rax
.text:000000000000A4E9                 sub     rbp, rax
.text:000000000000A4EC                 mov     edx, [r13+0]
.text:000000000000A4F0                 jnz     short loc_A4B8
.text:000000000000A4F2
.text:000000000000A4F2 loc_A4F2:                               ; CODE XREF: randread+16E↓j
.text:000000000000A4F2                 add     rsp, 18h
.text:000000000000A4F6                 pop     rbx
.text:000000000000A4F7                 pop     rbp
.text:000000000000A4F8                 pop     r12
.text:000000000000A4FA                 pop     r13
.text:000000000000A4FC                 pop     r14
.text:000000000000A4FE                 pop     r15
.text:000000000000A500                 retn
.text:000000000000A500 ; ---------------------------------------------------------------------------
.text:000000000000A501                 align 8
.text:000000000000A508
.text:000000000000A508 loc_A508:                               ; CODE XREF: randread+22↑j
.text:000000000000A508                 mov     r14, [rdi+18h]
.text:000000000000A50C                 lea     rax, [rdi+838h]
.text:000000000000A513                 lea     r13, [rdi+20h]
.text:000000000000A517                 mov     [rsp+48h+src], rax
.text:000000000000A51C                 cmp     rdx, r14
.text:000000000000A51F                 jbe     loc_A602
.text:000000000000A525
.text:000000000000A525 loc_A525:                               ; CODE XREF: randread+14A↓j
.text:000000000000A525                 mov     esi, 800h
.text:000000000000A52A                 mov     rdi, rbx        ; dest
.text:000000000000A52D                 mov     rdx, r14        ; n
.text:000000000000A530                 sub     rsi, r14
.text:000000000000A533                 add     rsi, [rsp+48h+src] ; src
.text:000000000000A538                 add     rbx, r14
.text:000000000000A53B                 sub     rbp, r14
.text:000000000000A53E                 call    _memcpy
.text:000000000000A543                 test    bl, 7
.text:000000000000A546                 jnz     short loc_A5B0
.text:000000000000A548                 cmp     rbp, 7FFh
.text:000000000000A54F                 jbe     loc_A5F3
.text:000000000000A555                 lea     r15, [rbp-800h]
.text:000000000000A55C                 mov     r14, r15
.text:000000000000A55F                 and     r14d, 7FFh
.text:000000000000A566                 jmp     short loc_A57C
.text:000000000000A566 ; ---------------------------------------------------------------------------
.text:000000000000A568                 align 10h
.text:000000000000A570
.text:000000000000A570 loc_A570:                               ; CODE XREF: randread+114↓j
.text:000000000000A570                 cmp     r15, r14
.text:000000000000A573                 jz      short loc_A5B0
.text:000000000000A575                 sub     r15, 800h
.text:000000000000A57C
.text:000000000000A57C loc_A57C:                               ; CODE XREF: randread+E6↑j
.text:000000000000A57C                 mov     rsi, rbx
.text:000000000000A57F                 mov     rdi, r13
.text:000000000000A582                 add     rbx, 800h
.text:000000000000A589                 call    isaac_refill
.text:000000000000A58E                 test    r15, r15
.text:000000000000A591                 mov     rbp, r15
.text:000000000000A594                 jnz     short loc_A570
.text:000000000000A596                 mov     qword ptr [r12+18h], 0
.text:000000000000A59F                 add     rsp, 18h
.text:000000000000A5A3                 pop     rbx
.text:000000000000A5A4                 pop     rbp
.text:000000000000A5A5                 pop     r12
.text:000000000000A5A7                 pop     r13
.text:000000000000A5A9                 pop     r14
.text:000000000000A5AB                 pop     r15
.text:000000000000A5AD                 retn
.text:000000000000A5AD ; ---------------------------------------------------------------------------
.text:000000000000A5AE                 align 10h
.text:000000000000A5B0
.text:000000000000A5B0 loc_A5B0:                               ; CODE XREF: randread+C6↑j
.text:000000000000A5B0                                         ; randread+F3↑j
.text:000000000000A5B0                 mov     rsi, [rsp+48h+src]
.text:000000000000A5B5                 mov     rdi, r13
.text:000000000000A5B8                 mov     r14d, 800h
.text:000000000000A5BE                 call    isaac_refill
.text:000000000000A5C3                 cmp     rbp, 800h
.text:000000000000A5CA                 ja      loc_A525
.text:000000000000A5D0
.text:000000000000A5D0 loc_A5D0:                               ; CODE XREF: randread+180↓j
.text:000000000000A5D0                 mov     r14d, 800h
.text:000000000000A5D6
.text:000000000000A5D6 loc_A5D6:                               ; CODE XREF: randread+194↓j
.text:000000000000A5D6                 mov     rsi, [rsp+48h+src] ; src
.text:000000000000A5DB                 mov     rdx, rbp        ; n
.text:000000000000A5DE                 mov     rdi, rbx        ; dest
.text:000000000000A5E1                 sub     r14, rbp
.text:000000000000A5E4                 call    _memcpy
.text:000000000000A5E9                 mov     [r12+18h], r14
.text:000000000000A5EE                 jmp     loc_A4F2
.text:000000000000A5F3 ; ---------------------------------------------------------------------------
.text:000000000000A5F3
.text:000000000000A5F3 loc_A5F3:                               ; CODE XREF: randread+CF↑j
.text:000000000000A5F3                 mov     rsi, [rsp+48h+src]
.text:000000000000A5F8                 mov     rdi, r13
.text:000000000000A5FB                 call    isaac_refill
.text:000000000000A600                 jmp     short loc_A5D0
.text:000000000000A602 ; ---------------------------------------------------------------------------
.text:000000000000A602
.text:000000000000A602 loc_A602:                               ; CODE XREF: randread+9F↑j
.text:000000000000A602                 mov     r15, rax
.text:000000000000A605                 sub     r15, r14
.text:000000000000A608                 lea     rax, [r15+800h]
.text:000000000000A60F                 mov     [rsp+48h+src], rax
.text:000000000000A614                 jmp     short loc_A5D6
.text:000000000000A614 ; } // starts at A480
.text:000000000000A614 randread        endp
.text:000000000000A614
.text:000000000000A614 ; ---------------------------------------------------------------------------
.text:000000000000A616                 align 20h
.text:000000000000A620
.text:000000000000A620 ; =============== S U B R O U T I N E =======================================
.text:000000000000A620
.text:000000000000A620
.text:000000000000A620 ; __int64 __fastcall randread_free(void *ptr)
.text:000000000000A620                 public randread_free
.text:000000000000A620 randread_free   proc near               ; CODE XREF: randint_all_free+10↑p
.text:000000000000A620 ; __unwind {
.text:000000000000A620                 push    rbp
.text:000000000000A621                 push    rbx
.text:000000000000A622                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A629                 mov     rbx, rdi
.text:000000000000A62C                 mov     esi, 1038h
.text:000000000000A631                 sub     rsp, 8
.text:000000000000A635                 mov     rbp, [rdi]
.text:000000000000A638                 call    ___explicit_bzero_chk
.text:000000000000A63D                 mov     rdi, rbx        ; ptr
.text:000000000000A640                 call    _free
.text:000000000000A645                 test    rbp, rbp
.text:000000000000A648                 jz      short loc_A660
.text:000000000000A64A                 add     rsp, 8
.text:000000000000A64E                 mov     rdi, rbp        ; stream
.text:000000000000A651                 pop     rbx
.text:000000000000A652                 pop     rbp
.text:000000000000A653                 jmp     rpl_fclose
.text:000000000000A653 ; ---------------------------------------------------------------------------
.text:000000000000A658                 align 20h
.text:000000000000A660
.text:000000000000A660 loc_A660:                               ; CODE XREF: randread_free+28↑j
.text:000000000000A660                 add     rsp, 8
.text:000000000000A664                 xor     eax, eax
.text:000000000000A666                 pop     rbx
.text:000000000000A667                 pop     rbp
.text:000000000000A668                 retn
.text:000000000000A668 ; } // starts at A620
.text:000000000000A668 randread_free   endp
.text:000000000000A668
.text:000000000000A668 ; ---------------------------------------------------------------------------
.text:000000000000A669                 align 10h
.text:000000000000A670
.text:000000000000A670 ; =============== S U B R O U T I N E =======================================
.text:000000000000A670
.text:000000000000A670
.text:000000000000A670                 public isaac_refill
.text:000000000000A670 isaac_refill    proc near               ; CODE XREF: randread+109↑p
.text:000000000000A670                                         ; randread+13E↑p ...
.text:000000000000A670 ; __unwind {
.text:000000000000A670                 mov     rax, [rdi+810h]
.text:000000000000A677                 mov     rdx, [rdi+800h]
.text:000000000000A67E                 lea     r9, [rdi+400h]
.text:000000000000A685                 lea     rcx, [rax+1]
.text:000000000000A689                 mov     rax, rdi
.text:000000000000A68C                 mov     [rdi+810h], rcx
.text:000000000000A693                 add     rcx, [rdi+808h]
.text:000000000000A69A                 nop     word ptr [rax+rax+00h]
.text:000000000000A6A0
.text:000000000000A6A0 loc_A6A0:                               ; CODE XREF: isaac_refill+149↓j
.text:000000000000A6A0                 mov     r8, rdx
.text:000000000000A6A3                 shl     r8, 15h
.text:000000000000A6A7                 xor     rdx, r8
.text:000000000000A6AA                 mov     r8, [rax]
.text:000000000000A6AD                 not     rdx
.text:000000000000A6B0                 add     rdx, [rax+400h]
.text:000000000000A6B7                 mov     r10, r8
.text:000000000000A6BA                 and     r10d, 7F8h
.text:000000000000A6C1                 mov     r11, [rdi+r10]
.text:000000000000A6C5                 mov     r10, rdx
.text:000000000000A6C8                 shr     r10, 5
.text:000000000000A6CC                 add     r11, rdx
.text:000000000000A6CF                 xor     rdx, r10
.text:000000000000A6D2                 add     rcx, r11
.text:000000000000A6D5                 mov     [rax], rcx
.text:000000000000A6D8                 shr     rcx, 8
.text:000000000000A6DC                 and     ecx, 7F8h
.text:000000000000A6E2                 mov     r11, [rdi+rcx]
.text:000000000000A6E6                 add     r11, r8
.text:000000000000A6E9                 mov     [rsi], r11
.text:000000000000A6EC                 add     rdx, [rax+408h]
.text:000000000000A6F3                 mov     rcx, [rax+8]
.text:000000000000A6F7                 mov     r10, rdx
.text:000000000000A6FA                 mov     rdx, rcx
.text:000000000000A6FD                 and     edx, 7F8h
.text:000000000000A703                 mov     r8, [rdi+rdx]
.text:000000000000A707                 mov     rdx, r10
.text:000000000000A70A                 shl     rdx, 0Ch
.text:000000000000A70E                 xor     rdx, r10
.text:000000000000A711                 add     r8, r10
.text:000000000000A714                 add     r8, r11
.text:000000000000A717                 mov     [rax+8], r8
.text:000000000000A71B                 shr     r8, 8
.text:000000000000A71F                 and     r8d, 7F8h
.text:000000000000A726                 add     rcx, [rdi+r8]
.text:000000000000A72A                 mov     [rsi+8], rcx
.text:000000000000A72E                 mov     r8, [rax+10h]
.text:000000000000A732                 mov     r11, rcx
.text:000000000000A735                 add     rdx, [rax+410h]
.text:000000000000A73C                 mov     rcx, r8
.text:000000000000A73F                 and     ecx, 7F8h
.text:000000000000A745                 mov     r10, [rdi+rcx]
.text:000000000000A749                 add     r10, rdx
.text:000000000000A74C                 mov     rcx, r10
.text:000000000000A74F                 add     rcx, r11
.text:000000000000A752                 mov     [rax+10h], rcx
.text:000000000000A756                 shr     rcx, 8
.text:000000000000A75A                 and     ecx, 7F8h
.text:000000000000A760                 mov     r10, [rdi+rcx]
.text:000000000000A764                 mov     rcx, rdx
.text:000000000000A767                 shr     rcx, 21h
.text:000000000000A76B                 xor     rdx, rcx
.text:000000000000A76E                 add     r10, r8
.text:000000000000A771                 mov     [rsi+10h], r10
.text:000000000000A775                 mov     rcx, [rax+18h]
.text:000000000000A779                 add     rdx, [rax+418h]
.text:000000000000A780                 mov     r8, rcx
.text:000000000000A783                 and     r8d, 7F8h
.text:000000000000A78A                 mov     r11, [rdi+r8]
.text:000000000000A78E                 add     r11, rdx
.text:000000000000A791                 mov     r8, r11
.text:000000000000A794                 add     r8, r10
.text:000000000000A797                 add     rax, 20h ; ' '
.text:000000000000A79B                 add     rsi, 20h ; ' '
.text:000000000000A79F                 mov     [rax-8], r8
.text:000000000000A7A3                 shr     r8, 8
.text:000000000000A7A7                 and     r8d, 7F8h
.text:000000000000A7AE                 add     rcx, [rdi+r8]
.text:000000000000A7B2                 mov     [rsi-8], rcx
.text:000000000000A7B6                 cmp     rax, r9
.text:000000000000A7B9                 jb      loc_A6A0
.text:000000000000A7BF                 lea     r9, [rdi+800h]
.text:000000000000A7C6                 db      2Eh
.text:000000000000A7C6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A7D0
.text:000000000000A7D0 loc_A7D0:                               ; CODE XREF: isaac_refill+279↓j
.text:000000000000A7D0                 mov     r8, rdx
.text:000000000000A7D3                 shl     r8, 15h
.text:000000000000A7D7                 xor     rdx, r8
.text:000000000000A7DA                 mov     r8, [rax]
.text:000000000000A7DD                 not     rdx
.text:000000000000A7E0                 add     rdx, [rax-400h]
.text:000000000000A7E7                 mov     r10, r8
.text:000000000000A7EA                 and     r10d, 7F8h
.text:000000000000A7F1                 mov     r11, [rdi+r10]
.text:000000000000A7F5                 mov     r10, rdx
.text:000000000000A7F8                 shr     r10, 5
.text:000000000000A7FC                 add     r11, rdx
.text:000000000000A7FF                 xor     rdx, r10
.text:000000000000A802                 add     rcx, r11
.text:000000000000A805                 mov     [rax], rcx
.text:000000000000A808                 shr     rcx, 8
.text:000000000000A80C                 and     ecx, 7F8h
.text:000000000000A812                 mov     r11, [rdi+rcx]
.text:000000000000A816                 add     r11, r8
.text:000000000000A819                 mov     [rsi], r11
.text:000000000000A81C                 add     rdx, [rax-3F8h]
.text:000000000000A823                 mov     rcx, [rax+8]
.text:000000000000A827                 mov     r10, rdx
.text:000000000000A82A                 mov     rdx, rcx
.text:000000000000A82D                 and     edx, 7F8h
.text:000000000000A833                 mov     r8, [rdi+rdx]
.text:000000000000A837                 mov     rdx, r10
.text:000000000000A83A                 shl     rdx, 0Ch
.text:000000000000A83E                 xor     rdx, r10
.text:000000000000A841                 add     r8, r10
.text:000000000000A844                 add     r8, r11
.text:000000000000A847                 mov     [rax+8], r8
.text:000000000000A84B                 shr     r8, 8
.text:000000000000A84F                 and     r8d, 7F8h
.text:000000000000A856                 add     rcx, [rdi+r8]
.text:000000000000A85A                 mov     [rsi+8], rcx
.text:000000000000A85E                 mov     r8, [rax+10h]
.text:000000000000A862                 mov     r11, rcx
.text:000000000000A865                 add     rdx, [rax-3F0h]
.text:000000000000A86C                 mov     rcx, r8
.text:000000000000A86F                 and     ecx, 7F8h
.text:000000000000A875                 mov     r10, [rdi+rcx]
.text:000000000000A879                 add     r10, rdx
.text:000000000000A87C                 mov     rcx, r10
.text:000000000000A87F                 add     rcx, r11
.text:000000000000A882                 mov     [rax+10h], rcx
.text:000000000000A886                 shr     rcx, 8
.text:000000000000A88A                 and     ecx, 7F8h
.text:000000000000A890                 mov     r10, [rdi+rcx]
.text:000000000000A894                 mov     rcx, rdx
.text:000000000000A897                 shr     rcx, 21h
.text:000000000000A89B                 xor     rdx, rcx
.text:000000000000A89E                 add     r10, r8
.text:000000000000A8A1                 mov     [rsi+10h], r10
.text:000000000000A8A5                 mov     rcx, [rax+18h]
.text:000000000000A8A9                 add     rdx, [rax-3E8h]
.text:000000000000A8B0                 mov     r8, rcx
.text:000000000000A8B3                 and     r8d, 7F8h
.text:000000000000A8BA                 mov     r11, [rdi+r8]
.text:000000000000A8BE                 add     r11, rdx
.text:000000000000A8C1                 mov     r8, r11
.text:000000000000A8C4                 add     r8, r10
.text:000000000000A8C7                 add     rax, 20h ; ' '
.text:000000000000A8CB                 add     rsi, 20h ; ' '
.text:000000000000A8CF                 mov     [rax-8], r8
.text:000000000000A8D3                 shr     r8, 8
.text:000000000000A8D7                 and     r8d, 7F8h
.text:000000000000A8DE                 add     rcx, [rdi+r8]
.text:000000000000A8E2                 mov     [rsi-8], rcx
.text:000000000000A8E6                 cmp     rax, r9
.text:000000000000A8E9                 jb      loc_A7D0
.text:000000000000A8EF                 mov     [rdi+800h], rdx
.text:000000000000A8F6                 mov     [rdi+808h], rcx
.text:000000000000A8FD                 retn
.text:000000000000A8FD ; } // starts at A670
.text:000000000000A8FD isaac_refill    endp
.text:000000000000A8FD
.text:000000000000A8FD ; ---------------------------------------------------------------------------
.text:000000000000A8FE                 align 20h
.text:000000000000A900
.text:000000000000A900 ; =============== S U B R O U T I N E =======================================
.text:000000000000A900
.text:000000000000A900
.text:000000000000A900                 public isaac_seed
.text:000000000000A900 isaac_seed      proc near               ; CODE XREF: randread_new+138↑p
.text:000000000000A900 ; __unwind {
.text:000000000000A900                 push    r13
.text:000000000000A902                 push    r12
.text:000000000000A904                 lea     r12, [rdi+800h]
.text:000000000000A90B                 push    rbp
.text:000000000000A90C                 mov     rdx, rdi
.text:000000000000A90F                 push    rbx
.text:000000000000A910                 mov     rax, rdi
.text:000000000000A913                 mov     rcx, 98F5704F6C44C0ABh
.text:000000000000A91D                 mov     r10, 0AE985BF2CBFC89EDh
.text:000000000000A927                 mov     rbp, 48FE4A0FA5A09315h
.text:000000000000A931                 mov     rsi, 82F053DB8355E0CEh
.text:000000000000A93B                 mov     r8, 0B29B2E824A595524h
.text:000000000000A945                 mov     rbx, 8C0EA5053D4712A0h
.text:000000000000A94F                 mov     r11, 0B9F8B322C73AC862h
.text:000000000000A959                 mov     r9, 647C4677A2884B7Ch
.text:000000000000A963                 nop     dword ptr [rax+rax+00h]
.text:000000000000A968
.text:000000000000A968 loc_A968:                               ; CODE XREF: isaac_seed+13A↓j
.text:000000000000A968                 add     rsi, [rax+20h]
.text:000000000000A96C                 add     rcx, [rax+38h]
.text:000000000000A970                 mov     r13, [rax]
.text:000000000000A973                 add     rbp, [rax+28h]
.text:000000000000A977                 add     r10, [rax+30h]
.text:000000000000A97B                 sub     r13, rsi
.text:000000000000A97E                 add     r9, r13
.text:000000000000A981                 mov     r13, rcx
.text:000000000000A984                 shr     r13, 9
.text:000000000000A988                 add     rcx, r9
.text:000000000000A98B                 xor     rbp, r13
.text:000000000000A98E                 mov     r13, [rax+8]
.text:000000000000A992                 sub     r13, rbp
.text:000000000000A995                 add     r11, r13
.text:000000000000A998                 mov     r13, r9
.text:000000000000A99B                 shl     r13, 9
.text:000000000000A99F                 add     r9, r11
.text:000000000000A9A2                 xor     r10, r13
.text:000000000000A9A5                 mov     r13, [rax+10h]
.text:000000000000A9A9                 sub     r13, r10
.text:000000000000A9AC                 add     rbx, r13
.text:000000000000A9AF                 mov     r13, r11
.text:000000000000A9B2                 shr     r13, 17h
.text:000000000000A9B6                 add     r11, rbx
.text:000000000000A9B9                 xor     rcx, r13
.text:000000000000A9BC                 mov     r13, [rax+18h]
.text:000000000000A9C0                 sub     r13, rcx
.text:000000000000A9C3                 add     r8, r13
.text:000000000000A9C6                 mov     r13, rbx
.text:000000000000A9C9                 shl     r13, 0Fh
.text:000000000000A9CD                 add     rbx, r8
.text:000000000000A9D0                 xor     r9, r13
.text:000000000000A9D3                 mov     r13, r8
.text:000000000000A9D6                 sub     rsi, r9
.text:000000000000A9D9                 shr     r13, 0Eh
.text:000000000000A9DD                 mov     [rax], r9
.text:000000000000A9E0                 xor     r11, r13
.text:000000000000A9E3                 mov     r13, rsi
.text:000000000000A9E6                 add     r8, rsi
.text:000000000000A9E9                 sub     rbp, r11
.text:000000000000A9EC                 shl     r13, 14h
.text:000000000000A9F0                 mov     [rax+8], r11
.text:000000000000A9F4                 xor     rbx, r13
.text:000000000000A9F7                 lea     r13, [rsi+rbp]
.text:000000000000A9FB                 mov     rsi, rbp
.text:000000000000A9FE                 sub     r10, rbx
.text:000000000000AA01                 shr     rsi, 11h
.text:000000000000AA05                 mov     [rax+10h], rbx
.text:000000000000AA09                 xor     r8, rsi
.text:000000000000AA0C                 mov     rsi, r10
.text:000000000000AA0F                 add     rbp, r10
.text:000000000000AA12                 sub     rcx, r8
.text:000000000000AA15                 shl     rsi, 0Eh
.text:000000000000AA19                 mov     [rax+18h], r8
.text:000000000000AA1D                 xor     rsi, r13
.text:000000000000AA20                 add     r10, rcx
.text:000000000000AA23                 mov     [rax+28h], rbp
.text:000000000000AA27                 mov     [rax+20h], rsi
.text:000000000000AA2B                 mov     [rax+30h], r10
.text:000000000000AA2F                 add     rax, 40h ; '@'
.text:000000000000AA33                 mov     [rax-8], rcx
.text:000000000000AA37                 cmp     r12, rax
.text:000000000000AA3A                 jnz     loc_A968
.text:000000000000AA40
.text:000000000000AA40 loc_AA40:                               ; CODE XREF: isaac_seed+212↓j
.text:000000000000AA40                 add     rsi, [rdx+20h]
.text:000000000000AA44                 add     rcx, [rdx+38h]
.text:000000000000AA48                 mov     r12, [rdx]
.text:000000000000AA4B                 add     rbp, [rdx+28h]
.text:000000000000AA4F                 add     r10, [rdx+30h]
.text:000000000000AA53                 sub     r12, rsi
.text:000000000000AA56                 add     r9, r12
.text:000000000000AA59                 mov     r12, rcx
.text:000000000000AA5C                 shr     r12, 9
.text:000000000000AA60                 add     rcx, r9
.text:000000000000AA63                 xor     rbp, r12
.text:000000000000AA66                 mov     r12, [rdx+8]
.text:000000000000AA6A                 sub     r12, rbp
.text:000000000000AA6D                 add     r11, r12
.text:000000000000AA70                 mov     r12, r9
.text:000000000000AA73                 shl     r12, 9
.text:000000000000AA77                 add     r9, r11
.text:000000000000AA7A                 xor     r10, r12
.text:000000000000AA7D                 mov     r12, [rdx+10h]
.text:000000000000AA81                 sub     r12, r10
.text:000000000000AA84                 add     rbx, r12
.text:000000000000AA87                 mov     r12, r11
.text:000000000000AA8A                 shr     r12, 17h
.text:000000000000AA8E                 add     r11, rbx
.text:000000000000AA91                 xor     rcx, r12
.text:000000000000AA94                 mov     r12, [rdx+18h]
.text:000000000000AA98                 sub     r12, rcx
.text:000000000000AA9B                 add     r8, r12
.text:000000000000AA9E                 mov     r12, rbx
.text:000000000000AAA1                 shl     r12, 0Fh
.text:000000000000AAA5                 add     rbx, r8
.text:000000000000AAA8                 xor     r9, r12
.text:000000000000AAAB                 mov     r12, r8
.text:000000000000AAAE                 sub     rsi, r9
.text:000000000000AAB1                 shr     r12, 0Eh
.text:000000000000AAB5                 mov     [rdx], r9
.text:000000000000AAB8                 xor     r11, r12
.text:000000000000AABB                 mov     r12, rsi
.text:000000000000AABE                 add     r8, rsi
.text:000000000000AAC1                 sub     rbp, r11
.text:000000000000AAC4                 shl     r12, 14h
.text:000000000000AAC8                 mov     [rdx+8], r11
.text:000000000000AACC                 xor     rbx, r12
.text:000000000000AACF                 lea     r12, [rsi+rbp]
.text:000000000000AAD3                 mov     rsi, rbp
.text:000000000000AAD6                 sub     r10, rbx
.text:000000000000AAD9                 shr     rsi, 11h
.text:000000000000AADD                 mov     [rdx+10h], rbx
.text:000000000000AAE1                 xor     r8, rsi
.text:000000000000AAE4                 mov     rsi, r10
.text:000000000000AAE7                 add     rbp, r10
.text:000000000000AAEA                 sub     rcx, r8
.text:000000000000AAED                 shl     rsi, 0Eh
.text:000000000000AAF1                 mov     [rdx+18h], r8
.text:000000000000AAF5                 xor     rsi, r12
.text:000000000000AAF8                 add     r10, rcx
.text:000000000000AAFB                 mov     [rdx+28h], rbp
.text:000000000000AAFF                 mov     [rdx+20h], rsi
.text:000000000000AB03                 mov     [rdx+30h], r10
.text:000000000000AB07                 add     rdx, 40h ; '@'
.text:000000000000AB0B                 mov     [rdx-8], rcx
.text:000000000000AB0F                 cmp     rax, rdx
.text:000000000000AB12                 jnz     loc_AA40
.text:000000000000AB18                 pop     rbx
.text:000000000000AB19                 mov     qword ptr [rdi+810h], 0
.text:000000000000AB24                 mov     qword ptr [rdi+808h], 0
.text:000000000000AB2F                 pop     rbp
.text:000000000000AB30                 mov     qword ptr [rdi+800h], 0
.text:000000000000AB3B                 pop     r12
.text:000000000000AB3D                 pop     r13
.text:000000000000AB3F                 retn
.text:000000000000AB3F ; } // starts at A900
.text:000000000000AB3F isaac_seed      endp
.text:000000000000AB3F
.text:000000000000AB40
.text:000000000000AB40 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB40
.text:000000000000AB40
.text:000000000000AB40                 public dup_safer
.text:000000000000AB40 dup_safer       proc near               ; CODE XREF: fd_safer_flag+11↑p
.text:000000000000AB40                                         ; fopen_safer+32↓p
.text:000000000000AB40 ; __unwind {
.text:000000000000AB40                 mov     edx, 3
.text:000000000000AB45                 xor     esi, esi
.text:000000000000AB47                 xor     eax, eax
.text:000000000000AB49                 jmp     rpl_fcntl
.text:000000000000AB49 ; } // starts at AB40
.text:000000000000AB49 dup_safer       endp
.text:000000000000AB49
.text:000000000000AB49 ; ---------------------------------------------------------------------------
.text:000000000000AB4E                 align 10h
.text:000000000000AB50
.text:000000000000AB50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AB50
.text:000000000000AB50 ; Attributes: info_from_lumina
.text:000000000000AB50
.text:000000000000AB50 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000AB50                 public rpl_fclose
.text:000000000000AB50 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:000000000000AB50                                         ; randread_free+33↑j ...
.text:000000000000AB50 ; __unwind {
.text:000000000000AB50                 push    r12
.text:000000000000AB52                 push    rbp
.text:000000000000AB53                 push    rbx
.text:000000000000AB54                 mov     rbx, rdi
.text:000000000000AB57                 call    _fileno
.text:000000000000AB5C                 test    eax, eax
.text:000000000000AB5E                 mov     rdi, rbx        ; fp
.text:000000000000AB61                 js      short loc_ABB7
.text:000000000000AB63                 call    ___freading
.text:000000000000AB68                 test    eax, eax
.text:000000000000AB6A                 jnz     short loc_AB98
.text:000000000000AB6C
.text:000000000000AB6C loc_AB6C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000AB6C                 mov     rdi, rbx        ; stream
.text:000000000000AB6F                 call    rpl_fflush
.text:000000000000AB74                 test    eax, eax
.text:000000000000AB76                 jz      short loc_ABB4
.text:000000000000AB78                 call    ___errno_location
.text:000000000000AB7D                 mov     r12d, [rax]
.text:000000000000AB80                 mov     rdi, rbx        ; stream
.text:000000000000AB83                 mov     rbp, rax
.text:000000000000AB86                 call    _fclose
.text:000000000000AB8B                 test    r12d, r12d
.text:000000000000AB8E                 jnz     short loc_ABC0
.text:000000000000AB90
.text:000000000000AB90 loc_AB90:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000AB90                 pop     rbx
.text:000000000000AB91                 pop     rbp
.text:000000000000AB92                 pop     r12
.text:000000000000AB94                 retn
.text:000000000000AB94 ; ---------------------------------------------------------------------------
.text:000000000000AB95                 align 8
.text:000000000000AB98
.text:000000000000AB98 loc_AB98:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000AB98                 mov     rdi, rbx        ; stream
.text:000000000000AB9B                 call    _fileno
.text:000000000000ABA0                 xor     esi, esi        ; offset
.text:000000000000ABA2                 mov     edx, 1          ; whence
.text:000000000000ABA7                 mov     edi, eax        ; fd
.text:000000000000ABA9                 call    _lseek
.text:000000000000ABAE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000ABB2                 jnz     short loc_AB6C
.text:000000000000ABB4
.text:000000000000ABB4 loc_ABB4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000ABB4                 mov     rdi, rbx        ; stream
.text:000000000000ABB7
.text:000000000000ABB7 loc_ABB7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000ABB7                 pop     rbx
.text:000000000000ABB8                 pop     rbp
.text:000000000000ABB9                 pop     r12
.text:000000000000ABBB                 jmp     _fclose
.text:000000000000ABC0 ; ---------------------------------------------------------------------------
.text:000000000000ABC0
.text:000000000000ABC0 loc_ABC0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000ABC0                 mov     [rbp+0], r12d
.text:000000000000ABC4                 mov     eax, 0FFFFFFFFh
.text:000000000000ABC9                 jmp     short loc_AB90
.text:000000000000ABC9 ; } // starts at AB50
.text:000000000000ABC9 rpl_fclose      endp
.text:000000000000ABC9
.text:000000000000ABC9 ; ---------------------------------------------------------------------------
.text:000000000000ABCB                 align 10h
.text:000000000000ABD0
.text:000000000000ABD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABD0
.text:000000000000ABD0
.text:000000000000ABD0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000ABD0                 public rpl_fcntl
.text:000000000000ABD0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:000000000000ABD0
.text:000000000000ABD0 var_68          = dword ptr -68h
.text:000000000000ABD0 var_60          = qword ptr -60h
.text:000000000000ABD0 var_58          = qword ptr -58h
.text:000000000000ABD0 var_50          = qword ptr -50h
.text:000000000000ABD0 var_48          = byte ptr -48h
.text:000000000000ABD0 var_38          = qword ptr -38h
.text:000000000000ABD0 var_30          = qword ptr -30h
.text:000000000000ABD0 var_28          = qword ptr -28h
.text:000000000000ABD0 var_20          = qword ptr -20h
.text:000000000000ABD0 arg_0           = byte ptr  8
.text:000000000000ABD0
.text:000000000000ABD0 ; __unwind {
.text:000000000000ABD0                 push    r12
.text:000000000000ABD2                 push    rbp
.text:000000000000ABD3                 mov     ebp, edi
.text:000000000000ABD5                 push    rbx
.text:000000000000ABD6                 sub     rsp, 50h
.text:000000000000ABDA                 mov     rax, fs:28h
.text:000000000000ABE3                 mov     [rsp+68h+var_50], rax
.text:000000000000ABE8                 xor     eax, eax
.text:000000000000ABEA                 lea     rax, [rsp+68h+arg_0]
.text:000000000000ABEF                 test    esi, esi
.text:000000000000ABF1                 mov     [rsp+68h+var_38], rdx
.text:000000000000ABF6                 mov     [rsp+68h+var_30], rcx
.text:000000000000ABFB                 mov     [rsp+68h+var_28], r8
.text:000000000000AC00                 mov     [rsp+68h+var_60], rax
.text:000000000000AC05                 lea     rax, [rsp+68h+var_48]
.text:000000000000AC0A                 mov     [rsp+68h+var_20], r9
.text:000000000000AC0F                 mov     [rsp+68h+var_68], 10h
.text:000000000000AC16                 mov     [rsp+68h+var_58], rax
.text:000000000000AC1B                 jz      loc_AE22
.text:000000000000AC21                 cmp     esi, 406h
.text:000000000000AC27                 jnz     short loc_AC70
.text:000000000000AC29                 mov     rax, [rsp+68h+var_58]
.text:000000000000AC2E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000AC35                 mov     [rsp+68h+var_68], 18h
.text:000000000000AC3C                 mov     r12d, [rax+10h]
.text:000000000000AC40                 mov     edx, r12d
.text:000000000000AC43                 js      loc_AD73
.text:000000000000AC49                 xor     eax, eax
.text:000000000000AC4B                 mov     esi, 406h       ; cmd
.text:000000000000AC50                 call    _fcntl
.text:000000000000AC55                 test    eax, eax
.text:000000000000AC57                 mov     ebx, eax
.text:000000000000AC59                 js      loc_ADE8
.text:000000000000AC5F
.text:000000000000AC5F loc_AC5F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000AC5F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000AC69                 jmp     short loc_ACB0
.text:000000000000AC69 ; ---------------------------------------------------------------------------
.text:000000000000AC6B                 align 10h
.text:000000000000AC70
.text:000000000000AC70 loc_AC70:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000AC70                 cmp     esi, 0Bh
.text:000000000000AC73                 jz      short loc_ACA0
.text:000000000000AC75                 jg      short loc_ACD0
.text:000000000000AC77                 cmp     esi, 4
.text:000000000000AC7A                 jz      loc_AD50
.text:000000000000AC80                 jg      loc_AD40
.text:000000000000AC86                 cmp     esi, 2
.text:000000000000AC89                 jz      loc_AD50
.text:000000000000AC8F                 jg      short loc_ACA0
.text:000000000000AC91                 cmp     esi, 1
.text:000000000000AC94                 jnz     short loc_ACF8
.text:000000000000AC96                 db      2Eh
.text:000000000000AC96                 nop     word ptr [rax+rax+00000000h]
.text:000000000000ACA0
.text:000000000000ACA0 loc_ACA0:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000ACA0                                         ; rpl_fcntl+BF↑j ...
.text:000000000000ACA0                 mov     edi, ebp        ; fd
.text:000000000000ACA2                 xor     eax, eax
.text:000000000000ACA4                 call    _fcntl
.text:000000000000ACA9                 mov     ebx, eax
.text:000000000000ACAB                 nop     dword ptr [rax+rax+00h]
.text:000000000000ACB0
.text:000000000000ACB0 loc_ACB0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000ACB0                                         ; rpl_fcntl+147↓j ...
.text:000000000000ACB0                 mov     rcx, [rsp+68h+var_50]
.text:000000000000ACB5                 xor     rcx, fs:28h
.text:000000000000ACBE                 mov     eax, ebx
.text:000000000000ACC0                 jnz     loc_AE1D
.text:000000000000ACC6                 add     rsp, 50h
.text:000000000000ACCA                 pop     rbx
.text:000000000000ACCB                 pop     rbp
.text:000000000000ACCC                 pop     r12
.text:000000000000ACCE                 retn
.text:000000000000ACCE ; ---------------------------------------------------------------------------
.text:000000000000ACCF                 align 10h
.text:000000000000ACD0
.text:000000000000ACD0 loc_ACD0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000ACD0                 cmp     esi, 407h
.text:000000000000ACD6                 jg      short loc_AD20
.text:000000000000ACD8                 cmp     esi, 406h
.text:000000000000ACDE                 jge     short loc_AD50
.text:000000000000ACE0                 cmp     esi, 401h
.text:000000000000ACE6                 jz      short loc_ACA0
.text:000000000000ACE8                 cmp     esi, 402h
.text:000000000000ACEE                 jz      short loc_AD50
.text:000000000000ACF0                 cmp     esi, 400h
.text:000000000000ACF6                 jz      short loc_AD50
.text:000000000000ACF8
.text:000000000000ACF8 loc_ACF8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000ACF8                                         ; rpl_fcntl+164↓j ...
.text:000000000000ACF8                 mov     eax, [rsp+68h+var_68]
.text:000000000000ACFB                 cmp     eax, 2Fh ; '/'
.text:000000000000ACFE                 ja      loc_AE3A
.text:000000000000AD04                 add     rax, [rsp+68h+var_58]
.text:000000000000AD09
.text:000000000000AD09 loc_AD09:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000AD09                 mov     rdx, [rax]
.text:000000000000AD0C                 mov     edi, ebp        ; fd
.text:000000000000AD0E                 xor     eax, eax
.text:000000000000AD10                 call    _fcntl
.text:000000000000AD15                 mov     ebx, eax
.text:000000000000AD17                 jmp     short loc_ACB0
.text:000000000000AD17 ; ---------------------------------------------------------------------------
.text:000000000000AD19                 align 20h
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000AD20                 cmp     esi, 409h
.text:000000000000AD26                 jz      short loc_AD50
.text:000000000000AD28                 jl      loc_ACA0
.text:000000000000AD2E                 cmp     esi, 40Ah
.text:000000000000AD34                 jnz     short loc_ACF8
.text:000000000000AD36                 jmp     loc_ACA0
.text:000000000000AD36 ; ---------------------------------------------------------------------------
.text:000000000000AD3B                 align 20h
.text:000000000000AD40
.text:000000000000AD40 loc_AD40:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000AD40                 cmp     esi, 9
.text:000000000000AD43                 jz      loc_ACA0
.text:000000000000AD49                 jg      short loc_AD50
.text:000000000000AD4B                 cmp     esi, 8
.text:000000000000AD4E                 jnz     short loc_ACF8
.text:000000000000AD50
.text:000000000000AD50 loc_AD50:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000AD50                                         ; rpl_fcntl+B9↑j ...
.text:000000000000AD50                 mov     eax, [rsp+68h+var_68]
.text:000000000000AD53                 cmp     eax, 2Fh ; '/'
.text:000000000000AD56                 ja      loc_AE44
.text:000000000000AD5C                 add     rax, [rsp+68h+var_58]
.text:000000000000AD61
.text:000000000000AD61 loc_AD61:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000AD61                 mov     edx, [rax]
.text:000000000000AD63                 mov     edi, ebp        ; fd
.text:000000000000AD65                 xor     eax, eax
.text:000000000000AD67                 call    _fcntl
.text:000000000000AD6C                 mov     ebx, eax
.text:000000000000AD6E                 jmp     loc_ACB0
.text:000000000000AD73 ; ---------------------------------------------------------------------------
.text:000000000000AD73
.text:000000000000AD73 loc_AD73:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000AD73                 xor     esi, esi        ; cmd
.text:000000000000AD75                 xor     eax, eax
.text:000000000000AD77                 call    _fcntl
.text:000000000000AD7C                 test    eax, eax
.text:000000000000AD7E                 mov     ebx, eax
.text:000000000000AD80                 js      loc_ACB0
.text:000000000000AD86                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000AD8D                 jnz     loc_ACB0
.text:000000000000AD93
.text:000000000000AD93 loc_AD93:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000AD93                 xor     eax, eax
.text:000000000000AD95                 mov     esi, 1          ; cmd
.text:000000000000AD9A                 mov     edi, ebx        ; fd
.text:000000000000AD9C                 call    _fcntl
.text:000000000000ADA1                 test    eax, eax
.text:000000000000ADA3                 js      short loc_ADC1
.text:000000000000ADA5                 or      eax, 1
.text:000000000000ADA8                 mov     esi, 2          ; cmd
.text:000000000000ADAD                 mov     edi, ebx        ; fd
.text:000000000000ADAF                 mov     edx, eax
.text:000000000000ADB1                 xor     eax, eax
.text:000000000000ADB3                 call    _fcntl
.text:000000000000ADB8                 cmp     eax, 0FFFFFFFFh
.text:000000000000ADBB                 jnz     loc_ACB0
.text:000000000000ADC1
.text:000000000000ADC1 loc_ADC1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000ADC1                 call    ___errno_location
.text:000000000000ADC6                 mov     r12d, [rax]
.text:000000000000ADC9                 mov     rbp, rax
.text:000000000000ADCC                 mov     edi, ebx        ; fd
.text:000000000000ADCE                 call    _close
.text:000000000000ADD3                 mov     ebx, 0FFFFFFFFh
.text:000000000000ADD8                 mov     [rbp+0], r12d
.text:000000000000ADDC                 jmp     loc_ACB0
.text:000000000000ADDC ; ---------------------------------------------------------------------------
.text:000000000000ADE1                 align 8
.text:000000000000ADE8
.text:000000000000ADE8 loc_ADE8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000ADE8                 call    ___errno_location
.text:000000000000ADED                 cmp     dword ptr [rax], 16h
.text:000000000000ADF0                 jnz     loc_AC5F
.text:000000000000ADF6                 xor     esi, esi        ; cmd
.text:000000000000ADF8                 xor     eax, eax
.text:000000000000ADFA                 mov     edx, r12d
.text:000000000000ADFD                 mov     edi, ebp        ; fd
.text:000000000000ADFF                 call    _fcntl
.text:000000000000AE04                 test    eax, eax
.text:000000000000AE06                 mov     ebx, eax
.text:000000000000AE08                 js      loc_ACB0
.text:000000000000AE0E                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000AE18                 jmp     loc_AD93
.text:000000000000AE1D ; ---------------------------------------------------------------------------
.text:000000000000AE1D
.text:000000000000AE1D loc_AE1D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000AE1D                 call    ___stack_chk_fail
.text:000000000000AE22 ; ---------------------------------------------------------------------------
.text:000000000000AE22
.text:000000000000AE22 loc_AE22:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000AE22                 mov     rax, [rsp+68h+var_58]
.text:000000000000AE27                 xor     esi, esi        ; cmd
.text:000000000000AE29                 mov     edx, [rax+10h]
.text:000000000000AE2C                 xor     eax, eax
.text:000000000000AE2E                 call    _fcntl
.text:000000000000AE33                 mov     ebx, eax
.text:000000000000AE35                 jmp     loc_ACB0
.text:000000000000AE3A ; ---------------------------------------------------------------------------
.text:000000000000AE3A
.text:000000000000AE3A loc_AE3A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000AE3A                 mov     rax, [rsp+68h+var_60]
.text:000000000000AE3F                 jmp     loc_AD09
.text:000000000000AE44 ; ---------------------------------------------------------------------------
.text:000000000000AE44
.text:000000000000AE44 loc_AE44:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000AE44                 mov     rax, [rsp+68h+var_60]
.text:000000000000AE49                 jmp     loc_AD61
.text:000000000000AE49 ; } // starts at ABD0
.text:000000000000AE49 rpl_fcntl       endp
.text:000000000000AE49
.text:000000000000AE49 ; ---------------------------------------------------------------------------
.text:000000000000AE4E                 align 10h
.text:000000000000AE50
.text:000000000000AE50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE50
.text:000000000000AE50
.text:000000000000AE50                 public fopen_safer
.text:000000000000AE50 fopen_safer     proc near               ; CODE XREF: randread_new+39↑p
.text:000000000000AE50 ; __unwind {
.text:000000000000AE50                 push    r12
.text:000000000000AE52                 push    rbp
.text:000000000000AE53                 mov     rbp, rsi
.text:000000000000AE56                 push    rbx
.text:000000000000AE57                 call    _fopen
.text:000000000000AE5C                 test    rax, rax
.text:000000000000AE5F                 mov     rbx, rax
.text:000000000000AE62                 jz      short loc_AE71
.text:000000000000AE64                 mov     rdi, rax        ; stream
.text:000000000000AE67                 call    _fileno
.text:000000000000AE6C                 cmp     eax, 2
.text:000000000000AE6F                 jbe     short loc_AE80
.text:000000000000AE71
.text:000000000000AE71 loc_AE71:                               ; CODE XREF: fopen_safer+12↑j
.text:000000000000AE71                                         ; fopen_safer+5B↓j ...
.text:000000000000AE71                 mov     rax, rbx
.text:000000000000AE74                 pop     rbx
.text:000000000000AE75                 pop     rbp
.text:000000000000AE76                 pop     r12
.text:000000000000AE78                 retn
.text:000000000000AE78 ; ---------------------------------------------------------------------------
.text:000000000000AE79                 align 20h
.text:000000000000AE80
.text:000000000000AE80 loc_AE80:                               ; CODE XREF: fopen_safer+1F↑j
.text:000000000000AE80                 mov     edi, eax
.text:000000000000AE82                 call    dup_safer
.text:000000000000AE87                 test    eax, eax
.text:000000000000AE89                 mov     r12d, eax
.text:000000000000AE8C                 js      short loc_AEC8
.text:000000000000AE8E                 mov     rdi, rbx        ; stream
.text:000000000000AE91                 call    rpl_fclose
.text:000000000000AE96                 test    eax, eax
.text:000000000000AE98                 jnz     short loc_AEAD
.text:000000000000AE9A                 mov     rsi, rbp        ; modes
.text:000000000000AE9D                 mov     edi, r12d       ; fd
.text:000000000000AEA0                 call    _fdopen
.text:000000000000AEA5                 test    rax, rax
.text:000000000000AEA8                 mov     rbx, rax
.text:000000000000AEAB                 jnz     short loc_AE71
.text:000000000000AEAD
.text:000000000000AEAD loc_AEAD:                               ; CODE XREF: fopen_safer+48↑j
.text:000000000000AEAD                 call    ___errno_location
.text:000000000000AEB2                 mov     ebp, [rax]
.text:000000000000AEB4                 mov     rbx, rax
.text:000000000000AEB7                 mov     edi, r12d       ; fd
.text:000000000000AEBA                 call    _close
.text:000000000000AEBF                 mov     [rbx], ebp
.text:000000000000AEC1                 xor     ebx, ebx
.text:000000000000AEC3                 jmp     short loc_AE71
.text:000000000000AEC3 ; ---------------------------------------------------------------------------
.text:000000000000AEC5                 align 8
.text:000000000000AEC8
.text:000000000000AEC8 loc_AEC8:                               ; CODE XREF: fopen_safer+3C↑j
.text:000000000000AEC8                 call    ___errno_location
.text:000000000000AECD                 mov     r12d, [rax]
.text:000000000000AED0                 mov     rbp, rax
.text:000000000000AED3                 mov     rdi, rbx        ; stream
.text:000000000000AED6                 call    rpl_fclose
.text:000000000000AEDB                 xor     ebx, ebx
.text:000000000000AEDD                 mov     [rbp+0], r12d
.text:000000000000AEE1                 jmp     short loc_AE71
.text:000000000000AEE1 ; } // starts at AE50
.text:000000000000AEE1 fopen_safer     endp
.text:000000000000AEE1
.text:000000000000AEE1 ; ---------------------------------------------------------------------------
.text:000000000000AEE3                 align 10h
.text:000000000000AEF0
.text:000000000000AEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AEF0
.text:000000000000AEF0 ; Attributes: info_from_lumina
.text:000000000000AEF0
.text:000000000000AEF0 ; void _libc_csu_init(void)
.text:000000000000AEF0                 public __libc_csu_init
.text:000000000000AEF0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000AEF0 ; __unwind {
.text:000000000000AEF0                 push    r15
.text:000000000000AEF2                 push    r14
.text:000000000000AEF4                 mov     r15, rdx
.text:000000000000AEF7                 push    r13
.text:000000000000AEF9                 push    r12
.text:000000000000AEFB                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000AF02                 push    rbp
.text:000000000000AF03                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000AF0A                 push    rbx
.text:000000000000AF0B                 mov     r13d, edi
.text:000000000000AF0E                 mov     r14, rsi
.text:000000000000AF11                 sub     rbp, r12
.text:000000000000AF14                 sub     rsp, 8
.text:000000000000AF18                 sar     rbp, 3
.text:000000000000AF1C                 call    _init_proc
.text:000000000000AF21                 test    rbp, rbp
.text:000000000000AF24                 jz      short loc_AF46
.text:000000000000AF26                 xor     ebx, ebx
.text:000000000000AF28                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000AF30
.text:000000000000AF30 loc_AF30:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000AF30                 mov     rdx, r15
.text:000000000000AF33                 mov     rsi, r14
.text:000000000000AF36                 mov     edi, r13d
.text:000000000000AF39                 call    ds:(__frame_dummy_init_array_entry - 20F870h)[r12+rbx*8]
.text:000000000000AF3D                 add     rbx, 1
.text:000000000000AF41                 cmp     rbp, rbx
.text:000000000000AF44                 jnz     short loc_AF30
.text:000000000000AF46
.text:000000000000AF46 loc_AF46:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000AF46                 add     rsp, 8
.text:000000000000AF4A                 pop     rbx
.text:000000000000AF4B                 pop     rbp
.text:000000000000AF4C                 pop     r12
.text:000000000000AF4E                 pop     r13
.text:000000000000AF50                 pop     r14
.text:000000000000AF52                 pop     r15
.text:000000000000AF54                 retn
.text:000000000000AF54 ; } // starts at AEF0
.text:000000000000AF54 __libc_csu_init endp
.text:000000000000AF54
.text:000000000000AF54 ; ---------------------------------------------------------------------------
.text:000000000000AF55                 align 20h
.text:000000000000AF60
.text:000000000000AF60 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF60
.text:000000000000AF60
.text:000000000000AF60 ; void _libc_csu_fini(void)
.text:000000000000AF60                 public __libc_csu_fini
.text:000000000000AF60 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000AF60 ; __unwind {
.text:000000000000AF60                 rep retn
.text:000000000000AF60 ; } // starts at AF60
.text:000000000000AF60 __libc_csu_fini endp
.text:000000000000AF60
.text:000000000000AF60 ; ---------------------------------------------------------------------------
.text:000000000000AF62                 align 10h
.text:000000000000AF70
.text:000000000000AF70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF70
.text:000000000000AF70
.text:000000000000AF70 atexit          proc near               ; CODE XREF: main+74↑p
.text:000000000000AF70 ; __unwind {
.text:000000000000AF70                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000AF77                 xor     esi, esi        ; obj
.text:000000000000AF79                 jmp     ___cxa_atexit
.text:000000000000AF79 ; } // starts at AF70
.text:000000000000AF79 atexit          endp
.text:000000000000AF79
.text:000000000000AF79 _text           ends
.text:000000000000AF79
LOAD:000000000000AF7E ; ===========================================================================
LOAD:000000000000AF7E
LOAD:000000000000AF7E ; Segment type: Pure code
LOAD:000000000000AF7E ; Segment permissions: Read/Execute
LOAD:000000000000AF7E LOAD            segment byte public 'CODE' use64
LOAD:000000000000AF7E                 assume cs:LOAD
LOAD:000000000000AF7E                 ;org 0AF7Eh
LOAD:000000000000AF7E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000AF7E                 align 20h
LOAD:000000000000AF7E LOAD            ends
LOAD:000000000000AF7E
.fini:000000000000AF80 ; ===========================================================================
.fini:000000000000AF80
.fini:000000000000AF80 ; Segment type: Pure code
.fini:000000000000AF80 ; Segment permissions: Read/Execute
.fini:000000000000AF80 _fini           segment dword public 'CODE' use64
.fini:000000000000AF80                 assume cs:_fini
.fini:000000000000AF80                 ;org 0AF80h
.fini:000000000000AF80                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000AF80
.fini:000000000000AF80 ; =============== S U B R O U T I N E =======================================
.fini:000000000000AF80
.fini:000000000000AF80
.fini:000000000000AF80                 public _term_proc
.fini:000000000000AF80 _term_proc      proc near
.fini:000000000000AF80                 sub     rsp, 8          ; _fini
.fini:000000000000AF84                 add     rsp, 8
.fini:000000000000AF88                 retn
.fini:000000000000AF88 _term_proc      endp
.fini:000000000000AF88
.fini:000000000000AF88 _fini           ends
.fini:000000000000AF88
LOAD:000000000000AF89 ; ===========================================================================
LOAD:000000000000AF89
LOAD:000000000000AF89 ; Segment type: Pure code
LOAD:000000000000AF89 ; Segment permissions: Read/Execute
LOAD:000000000000AF89 LOAD            segment byte public 'CODE' use64
LOAD:000000000000AF89                 assume cs:LOAD
LOAD:000000000000AF89                 ;org 0AF89h
LOAD:000000000000AF89                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000AF89                 align 20h
LOAD:000000000000AF89 LOAD            ends
LOAD:000000000000AF89
.rodata:000000000000AFA0 ; ===========================================================================
.rodata:000000000000AFA0
.rodata:000000000000AFA0 ; Segment type: Pure data
.rodata:000000000000AFA0 ; Segment permissions: Read
.rodata:000000000000AFA0 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000AFA0                 assume cs:_rodata
.rodata:000000000000AFA0                 ;org 0AFA0h
.rodata:000000000000AFA0                 public _IO_stdin_used
.rodata:000000000000AFA0 _IO_stdin_used  db    1
.rodata:000000000000AFA1                 db    0
.rodata:000000000000AFA2                 db    2
.rodata:000000000000AFA3                 db    0
.rodata:000000000000AFA4 unk_AFA4        db  20h                 ; DATA XREF: do_link+FB↑o
.rodata:000000000000AFA5                 db  7Eh ; ~
.rodata:000000000000AFA6                 db  20h
.rodata:000000000000AFA7                 db    0
.rodata:000000000000AFA8 ; const char aFailedToAccess[]
.rodata:000000000000AFA8 aFailedToAccess db 'failed to access %s',0
.rodata:000000000000AFA8                                         ; DATA XREF: main+7B3↑o
.rodata:000000000000AFA8                                         ; do_link+38A↑o ...
.rodata:000000000000AFBC aSAndSAreTheSam db '%s and %s are the same file',0
.rodata:000000000000AFBC                                         ; DATA XREF: do_link+A55↑o
.rodata:000000000000AFD8 ; const char aSReplaceS[]
.rodata:000000000000AFD8 aSReplaceS      db '%s: replace %s? ',0 ; DATA XREF: do_link+999↑o
.rodata:000000000000AFE9 ; const char aCannotBackupS[]
.rodata:000000000000AFE9 aCannotBackupS  db 'cannot backup %s',0 ; DATA XREF: do_link+892↑o
.rodata:000000000000AFFA aSSSCS          db '%s%s%s %c> %s',0Ah,0
.rodata:000000000000AFFA                                         ; DATA XREF: do_link+13E↑o
.rodata:000000000000B009 ; const char aFailedToCreate_0[]
.rodata:000000000000B009 aFailedToCreate_0 db 'failed to create hard link %s',0
.rodata:000000000000B009                                         ; DATA XREF: do_link:loc_313D↑o
.rodata:000000000000B027 ; const char aCannotUnBackup[]
.rodata:000000000000B027 aCannotUnBackup db 'cannot un-backup %s',0
.rodata:000000000000B027                                         ; DATA XREF: do_link+2F4↑o
.rodata:000000000000B03B aLn             db 'ln',0               ; DATA XREF: main+1DD↑o
.rodata:000000000000B03B                                         ; usage+1CE↑o ...
.rodata:000000000000B03E aP              db '-P',0               ; DATA XREF: usage+1ED↑o
.rodata:000000000000B041 asc_B041        db '[',0                ; DATA XREF: usage+203↑o
.rodata:000000000000B043 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+22A↑o
.rodata:000000000000B053 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000B053                                         ; DATA XREF: usage+25A↑o
.rodata:000000000000B053                                         ; usage+354↑o ...
.rodata:000000000000B069 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+26B↑o
.rodata:000000000000B073 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+277↑o
.rodata:000000000000B082 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+20A↑o
.rodata:000000000000B08C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+236↑o
.rodata:000000000000B096 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+24E↑o
.rodata:000000000000B0A0 ; const char aSOnlineHelpS[]
.rodata:000000000000B0A0 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2C2↑o
.rodata:000000000000B0A0                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000B0B7 unk_B0B7        db  47h ; G             ; DATA XREF: main+1D6↑o
.rodata:000000000000B0B7                                         ; usage+2DE↑o ...
.rodata:000000000000B0B8                 db  4Eh ; N
.rodata:000000000000B0B9                 db  55h ; U
.rodata:000000000000B0BA                 db  20h
.rodata:000000000000B0BB ; const char domainname[]
.rodata:000000000000B0BB domainname      db 'coreutils',0        ; DATA XREF: main+55↑o
.rodata:000000000000B0BB                                         ; main+61↑o ...
.rodata:000000000000B0C5 ; const char s2[]
.rodata:000000000000B0C5 s2              db 'en_',0              ; DATA XREF: usage+305↑o
.rodata:000000000000B0C5                                         ; usage+3C6↑o
.rodata:000000000000B0C9 ; const char aFullDocumentat[]
.rodata:000000000000B0C9 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000B0C9                                         ; DATA XREF: usage:loc_39E1↑o
.rodata:000000000000B0C9                                         ; usage:loc_3A9E↑o
.rodata:000000000000B0E4 ; const char dirname[]
.rodata:000000000000B0E4 dirname         db '/usr/local/share/locale',0
.rodata:000000000000B0E4                                         ; DATA XREF: main+4E↑o
.rodata:000000000000B0FC ; const char msgid[]
.rodata:000000000000B0FC msgid           db 'target %s is not a directory',0
.rodata:000000000000B0FC                                         ; DATA XREF: main+28F↑o
.rodata:000000000000B119 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1C8↑o
.rodata:000000000000B129 aMikeParker     db 'Mike Parker',0      ; DATA XREF: main+1CF↑o
.rodata:000000000000B135 ; const char shortopts[]
.rodata:000000000000B135 shortopts       db 'bdfinrst:vFLPS:T',0 ; DATA XREF: main+B7↑o
.rodata:000000000000B146 ; const char aMissingFileOpe[]
.rodata:000000000000B146 aMissingFileOpe db 'missing file operand',0
.rodata:000000000000B146                                         ; DATA XREF: main:loc_2954↑o
.rodata:000000000000B15B ; const char aExtraOperandS[]
.rodata:000000000000B15B aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+6F1↑o
.rodata:000000000000B16C ; const char aTargetS[]
.rodata:000000000000B16C aTargetS        db 'target %s',0        ; DATA XREF: main+63B↑o
.rodata:000000000000B176 ; const char aBackupType[]
.rodata:000000000000B176 aBackupType     db 'backup type',0      ; DATA XREF: main:loc_2666↑o
.rodata:000000000000B182 aBackup         db 'backup',0           ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000B189 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:000000000020F8C0↓o
.rodata:000000000000B198 aNoTargetDirect db 'no-target-directory',0
.rodata:000000000000B198                                         ; DATA XREF: .data.rel.ro:000000000020F8E0↓o
.rodata:000000000000B198                                         ; .data.rel.ro:000000000020F960↓o
.rodata:000000000000B1AC aForce          db 'force',0            ; DATA XREF: .data.rel.ro:000000000020F900↓o
.rodata:000000000000B1B2 aInteractive    db 'interactive',0      ; DATA XREF: .data.rel.ro:000000000020F920↓o
.rodata:000000000000B1BE aSuffix         db 'suffix',0           ; DATA XREF: .data.rel.ro:000000000020F940↓o
.rodata:000000000000B1C5 aLogical        db 'logical',0          ; DATA XREF: .data.rel.ro:000000000020F980↓o
.rodata:000000000000B1CD aPhysical       db 'physical',0         ; DATA XREF: .data.rel.ro:000000000020F9A0↓o
.rodata:000000000000B1D6 aRelative       db 'relative',0         ; DATA XREF: .data.rel.ro:000000000020F9C0↓o
.rodata:000000000000B1DF aSymbolic       db 'symbolic',0         ; DATA XREF: .data.rel.ro:000000000020F9E0↓o
.rodata:000000000000B1DF                                         ; .data.rel.ro:000000000020FB08↓o
.rodata:000000000000B1E8 aVerbose        db 'verbose',0          ; DATA XREF: .data.rel.ro:000000000020FA00↓o
.rodata:000000000000B1F0 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020FA20↓o
.rodata:000000000000B1F5 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020FA40↓o
.rodata:000000000000B1FD                 align 20h
.rodata:000000000000B200 ; const char aSHardLinkNotAl[]
.rodata:000000000000B200 aSHardLinkNotAl db '%s: hard link not allowed for directory',0
.rodata:000000000000B200                                         ; DATA XREF: do_link+74D↑o
.rodata:000000000000B228 ; const char aSCannotOverwri[]
.rodata:000000000000B228 aSCannotOverwri db '%s: cannot overwrite directory',0
.rodata:000000000000B228                                         ; DATA XREF: do_link+78F↑o
.rodata:000000000000B247                 align 8
.rodata:000000000000B248 ; const char aWillNotOverwri[]
.rodata:000000000000B248 aWillNotOverwri db 'will not overwrite just-created %s with %s',0
.rodata:000000000000B248                                         ; DATA XREF: do_link+8EC↑o
.rodata:000000000000B273                 align 8
.rodata:000000000000B278 ; const char aFailedToCreate_1[]
.rodata:000000000000B278 aFailedToCreate_1 db 'failed to create symbolic link %s',0
.rodata:000000000000B278                                         ; DATA XREF: do_link:loc_3290↑o
.rodata:000000000000B29A                 align 20h
.rodata:000000000000B2A0 ; const char aFailedToCreate[]
.rodata:000000000000B2A0 aFailedToCreate db 'failed to create symbolic link %s -> %s',0
.rodata:000000000000B2A0                                         ; DATA XREF: do_link:loc_2ED1↑o
.rodata:000000000000B2C8 ; const char aFailedToCreate_2[]
.rodata:000000000000B2C8 aFailedToCreate_2 db 'failed to create hard link to %.0s%s',0
.rodata:000000000000B2C8                                         ; DATA XREF: do_link:loc_3400↑o
.rodata:000000000000B2ED                 align 10h
.rodata:000000000000B2F0 ; const char aFailedToCreate_3[]
.rodata:000000000000B2F0 aFailedToCreate_3 db 'failed to create hard link %s => %s',0
.rodata:000000000000B2F0                                         ; DATA XREF: do_link:loc_3428↑o
.rodata:000000000000B314                 align 8
.rodata:000000000000B318 ; const char aTrySHelpForMor[]
.rodata:000000000000B318 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000B318                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000B33F                 align 20h
.rodata:000000000000B340 ; const char aUsageSOptionTT[]
.rodata:000000000000B340 aUsageSOptionTT db 'Usage: %s [OPTION]... [-T] TARGET LINK_NAME',0Ah
.rodata:000000000000B340                                         ; DATA XREF: usage:loc_371D↑o
.rodata:000000000000B340                 db '  or:  %s [OPTION]... TARGET',0Ah
.rodata:000000000000B340                 db '  or:  %s [OPTION]... TARGET... DIRECTORY',0Ah
.rodata:000000000000B340                 db '  or:  %s [OPTION]... -t DIRECTORY TARGET...',0Ah,0
.rodata:000000000000B3E1                 align 8
.rodata:000000000000B3E8 ; const char aInThe1stFormCr[]
.rodata:000000000000B3E8 aInThe1stFormCr db 'In the 1st form, create a link to TARGET with the name LINK_NAME.'
.rodata:000000000000B3E8                                         ; DATA XREF: usage+8D↑o
.rodata:000000000000B3E8                 db 0Ah
.rodata:000000000000B3E8                 db 'In the 2nd form, create a link to TARGET in the current directory'
.rodata:000000000000B3E8                 db '.',0Ah
.rodata:000000000000B3E8                 db 'In the 3rd and 4th forms, create links to each TARGET in DIRECTOR'
.rodata:000000000000B3E8                 db 'Y.',0Ah
.rodata:000000000000B3E8                 db 'Create hard links by default, symbolic links with --symbolic.',0Ah
.rodata:000000000000B3E8                 db 'By default, each destination (name of new link) should not alread'
.rodata:000000000000B3E8                 db 'y exist.',0Ah
.rodata:000000000000B3E8                 db 'When creating hard links, each TARGET must exist.  Symbolic links'
.rodata:000000000000B3E8                 db 0Ah
.rodata:000000000000B3E8                 db 'can hold arbitrary text; if later resolved, a relative link is',0Ah
.rodata:000000000000B3E8                 db 'interpreted in relation to its parent directory.',0Ah,0
.rodata:000000000000B5EC                 align 10h
.rodata:000000000000B5F0 ; const char aMandatoryArgum[]
.rodata:000000000000B5F0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+B2↑o
.rodata:000000000000B5F0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000B5F0                 db 'ns too.',0Ah,0
.rodata:000000000000B63B                 align 20h
.rodata:000000000000B640 ; const char aBackupControlM[]
.rodata:000000000000B640 aBackupControlM db '      --backup[=CONTROL]      make a backup of each existing dest'
.rodata:000000000000B640                                         ; DATA XREF: usage+D7↑o
.rodata:000000000000B640                 db 'ination file',0Ah
.rodata:000000000000B640                 db '  -b                          like --backup but does not accept a'
.rodata:000000000000B640                 db 'n argument',0Ah
.rodata:000000000000B640                 db '  -d, -F, --directory         allow the superuser to attempt to h'
.rodata:000000000000B640                 db 'ard link',0Ah
.rodata:000000000000B640                 db '                                directories (note: will probably '
.rodata:000000000000B640                 db 'fail due to',0Ah
.rodata:000000000000B640                 db '                                system restrictions, even for the'
.rodata:000000000000B640                 db ' superuser)',0Ah
.rodata:000000000000B640                 db '  -f, --force                 remove existing destination files',0Ah
.rodata:000000000000B640                 db 0
.rodata:000000000000B7FF                 align 20h
.rodata:000000000000B800 ; const char aIInteractivePr[]
.rodata:000000000000B800 aIInteractivePr db '  -i, --interactive           prompt whether to remove destinatio'
.rodata:000000000000B800                                         ; DATA XREF: usage+FC↑o
.rodata:000000000000B800                 db 'ns',0Ah
.rodata:000000000000B800                 db '  -L, --logical               dereference TARGETs that are symbol'
.rodata:000000000000B800                 db 'ic links',0Ah
.rodata:000000000000B800                 db '  -n, --no-dereference        treat LINK_NAME as a normal file if'
.rodata:000000000000B800                 db 0Ah
.rodata:000000000000B800                 db '                                it is a symbolic link to a direct'
.rodata:000000000000B800                 db 'ory',0Ah
.rodata:000000000000B800                 db '  -P, --physical              make hard links directly to symboli'
.rodata:000000000000B800                 db 'c links',0Ah
.rodata:000000000000B800                 db '  -r, --relative              create symbolic links relative to l'
.rodata:000000000000B800                 db 'ink location',0Ah
.rodata:000000000000B800                 db '  -s, --symbolic              make symbolic links instead of hard'
.rodata:000000000000B800                 db ' links',0Ah,0
.rodata:000000000000B9F5                 align 8
.rodata:000000000000B9F8 ; const char aSSuffixSuffixO[]
.rodata:000000000000B9F8 aSSuffixSuffixO db '  -S, --suffix=SUFFIX         override the usual backup suffix',0Ah
.rodata:000000000000B9F8                                         ; DATA XREF: usage+121↑o
.rodata:000000000000B9F8                 db '  -t, --target-directory=DIRECTORY  specify the DIRECTORY in whic'
.rodata:000000000000B9F8                 db 'h to create',0Ah
.rodata:000000000000B9F8                 db '                                the links',0Ah
.rodata:000000000000B9F8                 db '  -T, --no-target-directory   treat LINK_NAME as a normal file al'
.rodata:000000000000B9F8                 db 'ways',0Ah
.rodata:000000000000B9F8                 db '  -v, --verbose               print name of each linked file',0Ah
.rodata:000000000000B9F8                 db 0
.rodata:000000000000BB32                 align 8
.rodata:000000000000BB38 ; const char aHelpDisplayThi[]
.rodata:000000000000BB38 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000BB38                                         ; DATA XREF: usage+146↑o
.rodata:000000000000BB65                 align 8
.rodata:000000000000BB68 ; const char aVersionOutputV[]
.rodata:000000000000BB68 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000BB68                                         ; DATA XREF: usage+16B↑o
.rodata:000000000000BB9E                 align 20h
.rodata:000000000000BBA0 ; const char aTheBackupSuffi[]
.rodata:000000000000BBA0 aTheBackupSuffi db 0Ah                  ; DATA XREF: usage+190↑o
.rodata:000000000000BBA0                 db 'The backup suffix is ',27h,'~',27h,', unless set with --suffix or'
.rodata:000000000000BBA0                 db ' SIMPLE_BACKUP_SUFFIX.',0Ah
.rodata:000000000000BBA0                 db 'The version control method may be selected via the --backup optio'
.rodata:000000000000BBA0                 db 'n or through',0Ah
.rodata:000000000000BBA0                 db 'the VERSION_CONTROL environment variable.  Here are the values:',0Ah
.rodata:000000000000BBA0                 db 0Ah,0
.rodata:000000000000BC7D                 align 20h
.rodata:000000000000BC80 ; const char aNoneOffNeverMa[]
.rodata:000000000000BC80 aNoneOffNeverMa db '  none, off       never make backups (even if --backup is given)',0Ah
.rodata:000000000000BC80                                         ; DATA XREF: usage+1B5↑o
.rodata:000000000000BC80                 db '  numbered, t     make numbered backups',0Ah
.rodata:000000000000BC80                 db '  existing, nil   numbered if numbered backups exist, simple othe'
.rodata:000000000000BC80                 db 'rwise',0Ah
.rodata:000000000000BC80                 db '  simple, never   always make simple backups',0Ah,0
.rodata:000000000000BD5E                 align 20h
.rodata:000000000000BD60 ; const char aUsingSIgnoresL[]
.rodata:000000000000BD60 aUsingSIgnoresL db 0Ah                  ; DATA XREF: usage+1DA↑o
.rodata:000000000000BD60                 db 'Using -s ignores -L and -P.  Otherwise, the last option specified'
.rodata:000000000000BD60                 db ' controls',0Ah
.rodata:000000000000BD60                 db 'behavior when a TARGET is a symbolic link, defaulting to %s.',0Ah
.rodata:000000000000BD60                 db 0
.rodata:000000000000BDEA                 align 10h
.rodata:000000000000BDF0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000BDF0                                         ; DATA XREF: usage+2D7↑o
.rodata:000000000000BDF0                                         ; usage+33B↑o ...
.rodata:000000000000BE18 ; const char aReportAnyTrans[]
.rodata:000000000000BE18 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000BE18                                         ; DATA XREF: usage+42F↑o
.rodata:000000000000BE18                 db 'am/>',0Ah,0
.rodata:000000000000BE5F                 align 20h
.rodata:000000000000BE60 ; const char aOrAvailableLoc[]
.rodata:000000000000BE60 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000BE60                                         ; DATA XREF: usage:loc_3A26↑o
.rodata:000000000000BE93                 align 8
.rodata:000000000000BE98 ; const char aMultipleTarget[]
.rodata:000000000000BE98 aMultipleTarget db 'multiple target directories specified',0
.rodata:000000000000BE98                                         ; DATA XREF: main:loc_29DD↑o
.rodata:000000000000BEBE                 align 20h
.rodata:000000000000BEC0 ; const char aCannotDoRelati[]
.rodata:000000000000BEC0 aCannotDoRelati db 'cannot do --relative without --symbolic',0
.rodata:000000000000BEC0                                         ; DATA XREF: main:loc_297A↑o
.rodata:000000000000BEE8 ; const char aCannotCombineT[]
.rodata:000000000000BEE8 aCannotCombineT db 'cannot combine --target-directory and --no-target-directory',0
.rodata:000000000000BEE8                                         ; DATA XREF: main:loc_2A1F↑o
.rodata:000000000000BF24                 align 8
.rodata:000000000000BF28 aMissingDestina db 'missing destination file operand after %s',0
.rodata:000000000000BF28                                         ; DATA XREF: main+756↑o
.rodata:000000000000BF52 asc_BF52        db '/..',0              ; DATA XREF: relpath+15D↑o
.rodata:000000000000BF52                                         ; relpath+140↑o ...
.rodata:000000000000BF56 ; const char aGeneratingRela[]
.rodata:000000000000BF56 aGeneratingRela db 'generating relative path',0
.rodata:000000000000BF56                                         ; DATA XREF: relpath:loc_40F0↑o
.rodata:000000000000BF6F a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000BF74 asc_BF74        db '~',0                ; DATA XREF: set_simple_backup_suffix:loc_415E↑o
.rodata:000000000000BF76 ; const char name[]
.rodata:000000000000BF76 name            db 'SIMPLE_BACKUP_SUFFIX',0
.rodata:000000000000BF76                                         ; DATA XREF: set_simple_backup_suffix:loc_4180↑o
.rodata:000000000000BF8B unk_BF8B        db  24h ; $             ; DATA XREF: xget_version+24↑o
.rodata:000000000000BF8C ; const char aVersionControl[]
.rodata:000000000000BF8C aVersionControl db 'VERSION_CONTROL',0  ; DATA XREF: xget_version:loc_484A↑o
.rodata:000000000000BF9C aNone           db 'none',0             ; DATA XREF: .data.rel.ro:backup_args↓o
.rodata:000000000000BFA1 aOff            db 'off',0              ; DATA XREF: .data.rel.ro:000000000020FA88↓o
.rodata:000000000000BFA5 aSimple         db 'simple',0           ; DATA XREF: .data.rel.ro:000000000020FA90↓o
.rodata:000000000000BFAC aNever          db 'never',0            ; DATA XREF: .data.rel.ro:000000000020FA98↓o
.rodata:000000000000BFB2 aExisting       db 'existing',0         ; DATA XREF: .data.rel.ro:000000000020FAA0↓o
.rodata:000000000000BFBB aNil            db 'nil',0              ; DATA XREF: .data.rel.ro:000000000020FAA8↓o
.rodata:000000000000BFBF aNumbered       db 'numbered',0         ; DATA XREF: .data.rel.ro:000000000020FAB0↓o
.rodata:000000000000BFC8 aT              db 't',0                ; DATA XREF: .data.rel.ro:000000000020FAB8↓o
.rodata:000000000000BFCA                 align 20h
.rodata:000000000000BFE0 backup_types    db    0                 ; DATA XREF: get_version_part_0+12↑o
.rodata:000000000000BFE0                                         ; get_version_part_0+24↑o
.rodata:000000000000BFE1                 db    0
.rodata:000000000000BFE2                 db    0
.rodata:000000000000BFE3                 db    0
.rodata:000000000000BFE4                 db    0
.rodata:000000000000BFE5                 db    0
.rodata:000000000000BFE6                 db    0
.rodata:000000000000BFE7                 db    0
.rodata:000000000000BFE8                 db    1
.rodata:000000000000BFE9                 db    0
.rodata:000000000000BFEA                 db    0
.rodata:000000000000BFEB                 db    0
.rodata:000000000000BFEC                 db    1
.rodata:000000000000BFED                 db    0
.rodata:000000000000BFEE                 db    0
.rodata:000000000000BFEF                 db    0
.rodata:000000000000BFF0                 db    2
.rodata:000000000000BFF1                 db    0
.rodata:000000000000BFF2                 db    0
.rodata:000000000000BFF3                 db    0
.rodata:000000000000BFF4                 db    2
.rodata:000000000000BFF5                 db    0
.rodata:000000000000BFF6                 db    0
.rodata:000000000000BFF7                 db    0
.rodata:000000000000BFF8                 db    3
.rodata:000000000000BFF9                 db    0
.rodata:000000000000BFFA                 db    0
.rodata:000000000000BFFB                 db    0
.rodata:000000000000BFFC                 db    3
.rodata:000000000000BFFD                 db    0
.rodata:000000000000BFFE                 db    0
.rodata:000000000000BFFF                 db    0
.rodata:000000000000C000 ; const char aErrorClosingFi[]
.rodata:000000000000C000 aErrorClosingFi db 'error closing file',0
.rodata:000000000000C000                                         ; DATA XREF: close_stdin:loc_4F38↑o
.rodata:000000000000C013 ; const char format[]
.rodata:000000000000C013 format          db '%s: %s',0           ; DATA XREF: close_stdin+8D↑o
.rodata:000000000000C013                                         ; close_stdout+6C↑o
.rodata:000000000000C01A ; const char aWriteError[]
.rodata:000000000000C01A aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5053↑o
.rodata:000000000000C026 aEntriesLu      db '# entries:         %lu',0Ah,0
.rodata:000000000000C026                                         ; DATA XREF: hash_print_statistics:loc_59B5↑o
.rodata:000000000000C03E aBucketsLu      db '# buckets:         %lu',0Ah,0
.rodata:000000000000C03E                                         ; DATA XREF: hash_print_statistics+7B↑o
.rodata:000000000000C056 aMaxBucketLengt db 'max bucket length: %lu',0Ah,0
.rodata:000000000000C056                                         ; DATA XREF: hash_print_statistics+E8↑o
.rodata:000000000000C06E                 align 10h
.rodata:000000000000C070 aBucketsUsedLu2 db '# buckets used:    %lu (%.2f%%)',0Ah,0
.rodata:000000000000C070                                         ; DATA XREF: hash_print_statistics+BC↑o
.rodata:000000000000C091                 align 20h
.rodata:000000000000C0A0 default_tuning  db    0                 ; DATA XREF: check_tuning+3↑o
.rodata:000000000000C0A0                                         ; hash_initialize:loc_5E20↑o
.rodata:000000000000C0A1                 db    0
.rodata:000000000000C0A2                 db    0
.rodata:000000000000C0A3                 db    0
.rodata:000000000000C0A4                 db    0
.rodata:000000000000C0A5                 db    0
.rodata:000000000000C0A6                 db  80h
.rodata:000000000000C0A7                 db  3Fh ; ?
.rodata:000000000000C0A8                 db 0CDh
.rodata:000000000000C0A9                 db 0CCh
.rodata:000000000000C0AA                 db  4Ch ; L
.rodata:000000000000C0AB                 db  3Fh ; ?
.rodata:000000000000C0AC                 db 0F4h
.rodata:000000000000C0AD                 db 0FDh
.rodata:000000000000C0AE                 db 0B4h
.rodata:000000000000C0AF                 db  3Fh ; ?
.rodata:000000000000C0B0                 db    0
.rodata:000000000000C0B1                 db    0
.rodata:000000000000C0B2                 db    0
.rodata:000000000000C0B3                 db    0
.rodata:000000000000C0B4 dword_C0B4      dd 3DCCCCCDh            ; DATA XREF: check_tuning+19↑r
.rodata:000000000000C0B4                                         ; check_tuning+4A↑r
.rodata:000000000000C0B8 dword_C0B8      dd 3F666666h            ; DATA XREF: check_tuning+22↑r
.rodata:000000000000C0BC dword_C0BC      dd 3F8CCCCDh            ; DATA XREF: check_tuning+34↑r
.rodata:000000000000C0C0 dword_C0C0      dd 0                    ; DATA XREF: check_tuning+41↑r
.rodata:000000000000C0C4 dword_C0C4      dd 3F800000h            ; DATA XREF: check_tuning+5C↑r
.rodata:000000000000C0C8 dword_C0C8      dd 3F4CCCCDh            ; DATA XREF: hash_initialize+122↑r
.rodata:000000000000C0CC dword_C0CC      dd 5F800000h            ; DATA XREF: hash_initialize+13E↑r
.rodata:000000000000C0CC                                         ; hash_rehash+40↑r ...
.rodata:000000000000C0D0 dword_C0D0      dd 5F000000h            ; DATA XREF: hash_initialize+147↑r
.rodata:000000000000C0D0                                         ; hash_initialize+150↑r ...
.rodata:000000000000C0D4                 align 8
.rodata:000000000000C0D8 qword_C0D8      dq 4059000000000000h    ; DATA XREF: hash_print_statistics+A5↑r
.rodata:000000000000C0D8                                         ; hash_print_statistics+11F↑r
.rodata:000000000000C0E0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000C0E0                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000C118 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000C118                                         ; relpath+1A9↑o ...
.rodata:000000000000C120 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000C124 unk_C124        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000C125                 db  80h
.rodata:000000000000C126                 db  98h
.rodata:000000000000C127                 db    0
.rodata:000000000000C128 unk_C128        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000C129                 db  80h
.rodata:000000000000C12A                 db  99h
.rodata:000000000000C12B                 db    0
.rodata:000000000000C12C unk_C12C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000C12D                 db    7
.rodata:000000000000C12E                 db  65h ; e
.rodata:000000000000C12F                 db    0
.rodata:000000000000C130 unk_C130        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000C131                 db 0AFh
.rodata:000000000000C132                 db    0
.rodata:000000000000C133 unk_C133        db  22h ; "             ; DATA XREF: gettext_quote:loc_6A00↑o
.rodata:000000000000C133                                         ; quotearg_buffer_restyled:loc_77BB↑o ...
.rodata:000000000000C134                 db    0
.rodata:000000000000C135 ; const char asc_C135[2]
.rodata:000000000000C135 asc_C135        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000C135                                         ; quotearg_buffer_restyled:loc_6B83↑o ...
.rodata:000000000000C137 ; const char asc_C137[2]
.rodata:000000000000C137 asc_C137        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000C137                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000C139 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000C141 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020FAE8↓o
.rodata:000000000000C147 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020FAF0↓o
.rodata:000000000000C154 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020FAF8↓o
.rodata:000000000000C154                                         ; .data.rel.ro:000000000020FB18↓o
.rodata:000000000000C161 aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000C161                                         ; DATA XREF: .data.rel.ro:000000000020FB00↓o
.rodata:000000000000C175 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020FB10↓o
.rodata:000000000000C17D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020FB28↓o
.rodata:000000000000C185                 align 20h
.rodata:000000000000C1A0 jpt_6B61        dd offset loc_790A - 0C1A0h
.rodata:000000000000C1A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000C1A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000C1A0                 dd offset loc_6B63 - 0C1A0h ; jump table for switch statement
.rodata:000000000000C1A0                 dd offset loc_7B38 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7944 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7734 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7790 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_77E5 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_782A - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7864 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7864 - 0C1A0h
.rodata:000000000000C1A0                 dd offset loc_7864 - 0C1A0h
.rodata:000000000000C1CC jpt_6CBE        dd offset loc_6EE0 - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000C1CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh ; jump table for switch statement
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset loc_6F20 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6E28 - 0C1CCh, offset loc_6DE8 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6FB0 - 0C1CCh, offset loc_6FA0 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F90 - 0C1CCh, offset loc_6F80 - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset def_6CBE - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F70 - 0C1CCh, offset loc_6F60 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F30 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6DC3 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F60 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F60 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F60 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6D93 - 0C1CCh
.rodata:000000000000C1CC                 dd offset def_6CBE - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F60 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6E38 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6F08 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F08 - 0C1CCh, offset loc_6CC3 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F60 - 0C1CCh, offset loc_6CC3 - 0C1CCh
.rodata:000000000000C1CC                 dd offset loc_6F30 - 0C1CCh
.rodata:000000000000C3C8 jpt_704A        dd offset loc_70B0 - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000C3C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h ; jump table for switch statement
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset loc_70A0 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_71F0 - 0C3C8h, offset loc_71D8 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7088 - 0C3C8h, offset loc_71C8 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7070 - 0C3C8h, offset loc_71B0 - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset def_704A - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7198 - 0C3C8h, offset loc_7180 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7168 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_6DC0 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7180 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7180 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7180 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_6D90 - 0C3C8h
.rodata:000000000000C3C8                 dd offset def_704A - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7180 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7050 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_7150 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7150 - 0C3C8h, offset loc_6CC0 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7180 - 0C3C8h, offset loc_6CC0 - 0C3C8h
.rodata:000000000000C3C8                 dd offset loc_7168 - 0C3C8h
.rodata:000000000000C5C4                 align 20h
.rodata:000000000000C5E0                 public quoting_style_vals
.rodata:000000000000C5E0 quoting_style_vals db    0
.rodata:000000000000C5E1                 db    0
.rodata:000000000000C5E2                 db    0
.rodata:000000000000C5E3                 db    0
.rodata:000000000000C5E4                 db    1
.rodata:000000000000C5E5                 db    0
.rodata:000000000000C5E6                 db    0
.rodata:000000000000C5E7                 db    0
.rodata:000000000000C5E8                 db    2
.rodata:000000000000C5E9                 db    0
.rodata:000000000000C5EA                 db    0
.rodata:000000000000C5EB                 db    0
.rodata:000000000000C5EC                 db    3
.rodata:000000000000C5ED                 db    0
.rodata:000000000000C5EE                 db    0
.rodata:000000000000C5EF                 db    0
.rodata:000000000000C5F0                 db    4
.rodata:000000000000C5F1                 db    0
.rodata:000000000000C5F2                 db    0
.rodata:000000000000C5F3                 db    0
.rodata:000000000000C5F4                 db    5
.rodata:000000000000C5F5                 db    0
.rodata:000000000000C5F6                 db    0
.rodata:000000000000C5F7                 db    0
.rodata:000000000000C5F8                 db    6
.rodata:000000000000C5F9                 db    0
.rodata:000000000000C5FA                 db    0
.rodata:000000000000C5FB                 db    0
.rodata:000000000000C5FC                 db    7
.rodata:000000000000C5FD                 db    0
.rodata:000000000000C5FE                 db    0
.rodata:000000000000C5FF                 db    0
.rodata:000000000000C600                 db    8
.rodata:000000000000C601                 db    0
.rodata:000000000000C602                 db    0
.rodata:000000000000C603                 db    0
.rodata:000000000000C604                 db    9
.rodata:000000000000C605                 db    0
.rodata:000000000000C606                 db    0
.rodata:000000000000C607                 db    0
.rodata:000000000000C608 ; const char file[]
.rodata:000000000000C608 file            db '../coreutils-8.31/lib/tempname.c',0
.rodata:000000000000C608                                         ; DATA XREF: gen_tempname_len+1D↑o
.rodata:000000000000C629                 align 10h
.rodata:000000000000C630 ; const char s[]
.rodata:000000000000C630 s               db '! "invalid KIND in __gen_tempname"',0
.rodata:000000000000C630                                         ; DATA XREF: gen_tempname_len+24↑o
.rodata:000000000000C653                 align 20h
.rodata:000000000000C660 ; const char _PRETTY_FUNCTION___5642[]
.rodata:000000000000C660 __PRETTY_FUNCTION___5642 db 'gen_tempname_len',0
.rodata:000000000000C660                                         ; DATA XREF: gen_tempname_len+16↑o
.rodata:000000000000C671                 align 20h
.rodata:000000000000C680 letters         db 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789',0
.rodata:000000000000C680                                         ; DATA XREF: try_tempname_len+90↑o
.rodata:000000000000C6BF aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000C6CB aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000C6D2 ; const char aC_0[]
.rodata:000000000000C6D2 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_8E2C↑o
.rodata:000000000000C6D6 ; const char aWrittenByS[]
.rodata:000000000000C6D6 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000C6D6                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000C6E6 ; const char aWrittenBySAndS[]
.rodata:000000000000C6E6 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000C6E6                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000C6FD ; const char aWrittenBySSAnd[]
.rodata:000000000000C6FD aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000C6FD                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000C719 ; const char aReportBugsToS[]
.rodata:000000000000C719 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000C719                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000C72E aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000C72E                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000C744 ; const char aSHomePageS[]
.rodata:000000000000C744 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000C744                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000C758 ; const char aLicenseGplv3Gn[]
.rodata:000000000000C758 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000C758                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000C758                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000C758                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000C758                 db '.',0Ah
.rodata:000000000000C758                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000C758                 db 0Ah,0
.rodata:000000000000C824                 align 8
.rodata:000000000000C828 ; const char aWrittenBySSSAn[]
.rodata:000000000000C828 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C828                                         ; DATA XREF: version_etc_arn:loc_9080↑o
.rodata:000000000000C828                 db 'and %s.',0Ah,0
.rodata:000000000000C848 ; const char aWrittenBySSSSA[]
.rodata:000000000000C848 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C848                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000C848                 db '%s, and %s.',0Ah,0
.rodata:000000000000C86C                 align 10h
.rodata:000000000000C870 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000C870 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C870                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000C870                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000C898 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000C898 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C898                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000C898                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000C8C4                 align 8
.rodata:000000000000C8C8 ; const char aWrittenBySSSSS[]
.rodata:000000000000C8C8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C8C8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000C8C8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C8C8                 db 'and %s.',0Ah,0
.rodata:000000000000C8F8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000C8F8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C8F8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000C8F8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C8F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000C92C                 align 10h
.rodata:000000000000C930 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000C930                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000C930                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000C930                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000C96C                 align 10h
.rodata:000000000000C970 ; const char aGeneralHelpUsi[]
.rodata:000000000000C970 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000C970                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000C970                 db 0
.rodata:000000000000C9B1                 align 8
.rodata:000000000000C9B8 jpt_8E94        dd offset loc_8F16 - 0C9B8h
.rodata:000000000000C9B8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000C9B8                                         ; version_etc_arn+9D↑r
.rodata:000000000000C9B8                 dd offset loc_8FA8 - 0C9B8h ; jump table for switch statement
.rodata:000000000000C9B8                 dd offset loc_8FE8 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_9030 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_9080 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_90D8 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_9108 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_9170 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_8EA0 - 0C9B8h
.rodata:000000000000C9B8                 dd offset loc_8F50 - 0C9B8h
.rodata:000000000000C9E0                 public version_etc_copyright
.rodata:000000000000C9E0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000C9E0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000CA0F ; const char aMemoryExhauste[]
.rodata:000000000000CA0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000CA20 ; const char aInvalidArgumen[]
.rodata:000000000000CA20 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:000000000000CA20                                         ; DATA XREF: argmatch_invalid:loc_9B50↑o
.rodata:000000000000CA3B ; const char aAmbiguousArgum[]
.rodata:000000000000CA3B aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:000000000000CA3B                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:000000000000CA58 ; const char aValidArguments[]
.rodata:000000000000CA58 aValidArguments db 'Valid arguments are:',0
.rodata:000000000000CA58                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:000000000000CA6D aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:000000000000CA6D                 db '  - %s',0
.rodata:000000000000CA75 aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000000CA75                                         ; relpath+1F3↑o ...
.rodata:000000000000CA7A aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000CA7C aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_9E10↑o
.rodata:000000000000CA82 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000CA82                                         ; locale_charset:loc_9EA0↑o
.rodata:000000000000CA88 ; const char aSEndOfFile[]
.rodata:000000000000CA88 aSEndOfFile     db '%s: end of file',0  ; DATA XREF: randread_error:loc_A11D↑o
.rodata:000000000000CA98 ; const char aSReadError[]
.rodata:000000000000CA98 aSReadError     db '%s: read error',0   ; DATA XREF: randread_error+25↑o
.rodata:000000000000CAA7 ; const char aDevUrandom[]
.rodata:000000000000CAA7 aDevUrandom     db '/dev/urandom',0     ; DATA XREF: randread_new+CB↑o
.rodata:000000000000CAB4 aRb             db 'rb',0               ; DATA XREF: randread_new+32↑o
.rodata:000000000000CAB4 _rodata         ends
.rodata:000000000000CAB4
LOAD:000000000000CAB7 ; ===========================================================================
LOAD:000000000000CAB7
LOAD:000000000000CAB7 ; Segment type: Pure code
LOAD:000000000000CAB7 ; Segment permissions: Read/Execute
LOAD:000000000000CAB7 LOAD            segment byte public 'CODE' use64
LOAD:000000000000CAB7                 assume cs:LOAD
LOAD:000000000000CAB7                 ;org 0CAB7h
LOAD:000000000000CAB7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000CAB7                 align 8
LOAD:000000000000CAB7 LOAD            ends
LOAD:000000000000CAB7
.eh_frame_hdr:000000000000CAB8 ; ===========================================================================
.eh_frame_hdr:000000000000CAB8
.eh_frame_hdr:000000000000CAB8 ; Segment type: Pure data
.eh_frame_hdr:000000000000CAB8 ; Segment permissions: Read
.eh_frame_hdr:000000000000CAB8 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000CAB8                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000CAB8                 ;org 0CAB8h
.eh_frame_hdr:000000000000CAB8 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000CAB9                 db  1Bh
.eh_frame_hdr:000000000000CABA                 db    3
.eh_frame_hdr:000000000000CABB                 db  3Bh ; ;
.eh_frame_hdr:000000000000CABC                 db  6Ch ; l
.eh_frame_hdr:000000000000CABD                 db    5
.eh_frame_hdr:000000000000CABE                 db    0
.eh_frame_hdr:000000000000CABF                 db    0
.eh_frame_hdr:000000000000CAC0                 db 0ACh
.eh_frame_hdr:000000000000CAC1                 db    0
.eh_frame_hdr:000000000000CAC2                 db    0
.eh_frame_hdr:000000000000CAC3                 db    0
.eh_frame_hdr:000000000000CAC4                 db 0D8h
.eh_frame_hdr:000000000000CAC5                 db  52h ; R
.eh_frame_hdr:000000000000CAC6                 db 0FFh
.eh_frame_hdr:000000000000CAC7                 db 0FFh
.eh_frame_hdr:000000000000CAC8                 db 0B8h
.eh_frame_hdr:000000000000CAC9                 db    5
.eh_frame_hdr:000000000000CACA                 db    0
.eh_frame_hdr:000000000000CACB                 db    0
.eh_frame_hdr:000000000000CACC                 db 0F8h
.eh_frame_hdr:000000000000CACD                 db  57h ; W
.eh_frame_hdr:000000000000CACE                 db 0FFh
.eh_frame_hdr:000000000000CACF                 db 0FFh
.eh_frame_hdr:000000000000CAD0                 db 0E0h
.eh_frame_hdr:000000000000CAD1                 db    5
.eh_frame_hdr:000000000000CAD2                 db    0
.eh_frame_hdr:000000000000CAD3                 db    0
.eh_frame_hdr:000000000000CAD4                 db    8
.eh_frame_hdr:000000000000CAD5                 db  58h ; X
.eh_frame_hdr:000000000000CAD6                 db 0FFh
.eh_frame_hdr:000000000000CAD7                 db 0FFh
.eh_frame_hdr:000000000000CAD8                 db 0B4h
.eh_frame_hdr:000000000000CAD9                 db    6
.eh_frame_hdr:000000000000CADA                 db    0
.eh_frame_hdr:000000000000CADB                 db    0
.eh_frame_hdr:000000000000CADC                 db 0F8h
.eh_frame_hdr:000000000000CADD                 db  5Fh ; _
.eh_frame_hdr:000000000000CADE                 db 0FFh
.eh_frame_hdr:000000000000CADF                 db 0FFh
.eh_frame_hdr:000000000000CAE0                 db  88h
.eh_frame_hdr:000000000000CAE1                 db    5
.eh_frame_hdr:000000000000CAE2                 db    0
.eh_frame_hdr:000000000000CAE3                 db    0
.eh_frame_hdr:000000000000CAE4                 db    8
.eh_frame_hdr:000000000000CAE5                 db  61h ; a
.eh_frame_hdr:000000000000CAE6                 db 0FFh
.eh_frame_hdr:000000000000CAE7                 db 0FFh
.eh_frame_hdr:000000000000CAE8                 db 0F8h
.eh_frame_hdr:000000000000CAE9                 db    5
.eh_frame_hdr:000000000000CAEA                 db    0
.eh_frame_hdr:000000000000CAEB                 db    0
.eh_frame_hdr:000000000000CAEC                 db  88h
.eh_frame_hdr:000000000000CAED                 db  61h ; a
.eh_frame_hdr:000000000000CAEE                 db 0FFh
.eh_frame_hdr:000000000000CAEF                 db 0FFh
.eh_frame_hdr:000000000000CAF0                 db  18h
.eh_frame_hdr:000000000000CAF1                 db    6
.eh_frame_hdr:000000000000CAF2                 db    0
.eh_frame_hdr:000000000000CAF3                 db    0
.eh_frame_hdr:000000000000CAF4                 db    8
.eh_frame_hdr:000000000000CAF5                 db  6Ch ; l
.eh_frame_hdr:000000000000CAF6                 db 0FFh
.eh_frame_hdr:000000000000CAF7                 db 0FFh
.eh_frame_hdr:000000000000CAF8                 db  88h
.eh_frame_hdr:000000000000CAF9                 db    6
.eh_frame_hdr:000000000000CAFA                 db    0
.eh_frame_hdr:000000000000CAFB                 db    0
.eh_frame_hdr:000000000000CAFC                 db  68h ; h
.eh_frame_hdr:000000000000CAFD                 db  70h ; p
.eh_frame_hdr:000000000000CAFE                 db 0FFh
.eh_frame_hdr:000000000000CAFF                 db 0FFh
.eh_frame_hdr:000000000000CB00                 db  10h
.eh_frame_hdr:000000000000CB01                 db    7
.eh_frame_hdr:000000000000CB02                 db    0
.eh_frame_hdr:000000000000CB03                 db    0
.eh_frame_hdr:000000000000CB04                 db  88h
.eh_frame_hdr:000000000000CB05                 db  70h ; p
.eh_frame_hdr:000000000000CB06                 db 0FFh
.eh_frame_hdr:000000000000CB07                 db 0FFh
.eh_frame_hdr:000000000000CB08                 db  24h ; $
.eh_frame_hdr:000000000000CB09                 db    7
.eh_frame_hdr:000000000000CB0A                 db    0
.eh_frame_hdr:000000000000CB0B                 db    0
.eh_frame_hdr:000000000000CB0C                 db 0E8h
.eh_frame_hdr:000000000000CB0D                 db  70h ; p
.eh_frame_hdr:000000000000CB0E                 db 0FFh
.eh_frame_hdr:000000000000CB0F                 db 0FFh
.eh_frame_hdr:000000000000CB10                 db  50h ; P
.eh_frame_hdr:000000000000CB11                 db    7
.eh_frame_hdr:000000000000CB12                 db    0
.eh_frame_hdr:000000000000CB13                 db    0
.eh_frame_hdr:000000000000CB14                 db    8
.eh_frame_hdr:000000000000CB15                 db  71h ; q
.eh_frame_hdr:000000000000CB16                 db 0FFh
.eh_frame_hdr:000000000000CB17                 db 0FFh
.eh_frame_hdr:000000000000CB18                 db  64h ; d
.eh_frame_hdr:000000000000CB19                 db    7
.eh_frame_hdr:000000000000CB1A                 db    0
.eh_frame_hdr:000000000000CB1B                 db    0
.eh_frame_hdr:000000000000CB1C                 db  78h ; x
.eh_frame_hdr:000000000000CB1D                 db  72h ; r
.eh_frame_hdr:000000000000CB1E                 db 0FFh
.eh_frame_hdr:000000000000CB1F                 db 0FFh
.eh_frame_hdr:000000000000CB20                 db 0B0h
.eh_frame_hdr:000000000000CB21                 db    7
.eh_frame_hdr:000000000000CB22                 db    0
.eh_frame_hdr:000000000000CB23                 db    0
.eh_frame_hdr:000000000000CB24                 db 0D8h
.eh_frame_hdr:000000000000CB25                 db  73h ; s
.eh_frame_hdr:000000000000CB26                 db 0FFh
.eh_frame_hdr:000000000000CB27                 db 0FFh
.eh_frame_hdr:000000000000CB28                 db 0F8h
.eh_frame_hdr:000000000000CB29                 db    7
.eh_frame_hdr:000000000000CB2A                 db    0
.eh_frame_hdr:000000000000CB2B                 db    0
.eh_frame_hdr:000000000000CB2C                 db  58h ; X
.eh_frame_hdr:000000000000CB2D                 db  74h ; t
.eh_frame_hdr:000000000000CB2E                 db 0FFh
.eh_frame_hdr:000000000000CB2F                 db 0FFh
.eh_frame_hdr:000000000000CB30                 db  58h ; X
.eh_frame_hdr:000000000000CB31                 db    8
.eh_frame_hdr:000000000000CB32                 db    0
.eh_frame_hdr:000000000000CB33                 db    0
.eh_frame_hdr:000000000000CB34                 db  98h
.eh_frame_hdr:000000000000CB35                 db  76h ; v
.eh_frame_hdr:000000000000CB36                 db 0FFh
.eh_frame_hdr:000000000000CB37                 db 0FFh
.eh_frame_hdr:000000000000CB38                 db 0C0h
.eh_frame_hdr:000000000000CB39                 db    8
.eh_frame_hdr:000000000000CB3A                 db    0
.eh_frame_hdr:000000000000CB3B                 db    0
.eh_frame_hdr:000000000000CB3C                 db 0E8h
.eh_frame_hdr:000000000000CB3D                 db  76h ; v
.eh_frame_hdr:000000000000CB3E                 db 0FFh
.eh_frame_hdr:000000000000CB3F                 db 0FFh
.eh_frame_hdr:000000000000CB40                 db 0DCh
.eh_frame_hdr:000000000000CB41                 db    8
.eh_frame_hdr:000000000000CB42                 db    0
.eh_frame_hdr:000000000000CB43                 db    0
.eh_frame_hdr:000000000000CB44                 db    8
.eh_frame_hdr:000000000000CB45                 db  7Dh ; }
.eh_frame_hdr:000000000000CB46                 db 0FFh
.eh_frame_hdr:000000000000CB47                 db 0FFh
.eh_frame_hdr:000000000000CB48                 db  30h ; 0
.eh_frame_hdr:000000000000CB49                 db    9
.eh_frame_hdr:000000000000CB4A                 db    0
.eh_frame_hdr:000000000000CB4B                 db    0
.eh_frame_hdr:000000000000CB4C                 db  48h ; H
.eh_frame_hdr:000000000000CB4D                 db  7Dh ; }
.eh_frame_hdr:000000000000CB4E                 db 0FFh
.eh_frame_hdr:000000000000CB4F                 db 0FFh
.eh_frame_hdr:000000000000CB50                 db  48h ; H
.eh_frame_hdr:000000000000CB51                 db    9
.eh_frame_hdr:000000000000CB52                 db    0
.eh_frame_hdr:000000000000CB53                 db    0
.eh_frame_hdr:000000000000CB54                 db  68h ; h
.eh_frame_hdr:000000000000CB55                 db  7Dh ; }
.eh_frame_hdr:000000000000CB56                 db 0FFh
.eh_frame_hdr:000000000000CB57                 db 0FFh
.eh_frame_hdr:000000000000CB58                 db  64h ; d
.eh_frame_hdr:000000000000CB59                 db    9
.eh_frame_hdr:000000000000CB5A                 db    0
.eh_frame_hdr:000000000000CB5B                 db    0
.eh_frame_hdr:000000000000CB5C                 db  88h
.eh_frame_hdr:000000000000CB5D                 db  7Dh ; }
.eh_frame_hdr:000000000000CB5E                 db 0FFh
.eh_frame_hdr:000000000000CB5F                 db 0FFh
.eh_frame_hdr:000000000000CB60                 db  78h ; x
.eh_frame_hdr:000000000000CB61                 db    9
.eh_frame_hdr:000000000000CB62                 db    0
.eh_frame_hdr:000000000000CB63                 db    0
.eh_frame_hdr:000000000000CB64                 db 0D8h
.eh_frame_hdr:000000000000CB65                 db  7Dh ; }
.eh_frame_hdr:000000000000CB66                 db 0FFh
.eh_frame_hdr:000000000000CB67                 db 0FFh
.eh_frame_hdr:000000000000CB68                 db  98h
.eh_frame_hdr:000000000000CB69                 db    9
.eh_frame_hdr:000000000000CB6A                 db    0
.eh_frame_hdr:000000000000CB6B                 db    0
.eh_frame_hdr:000000000000CB6C                 db  18h
.eh_frame_hdr:000000000000CB6D                 db  84h
.eh_frame_hdr:000000000000CB6E                 db 0FFh
.eh_frame_hdr:000000000000CB6F                 db 0FFh
.eh_frame_hdr:000000000000CB70                 db 0E8h
.eh_frame_hdr:000000000000CB71                 db    9
.eh_frame_hdr:000000000000CB72                 db    0
.eh_frame_hdr:000000000000CB73                 db    0
.eh_frame_hdr:000000000000CB74                 db  28h ; (
.eh_frame_hdr:000000000000CB75                 db  84h
.eh_frame_hdr:000000000000CB76                 db 0FFh
.eh_frame_hdr:000000000000CB77                 db 0FFh
.eh_frame_hdr:000000000000CB78                 db 0FCh
.eh_frame_hdr:000000000000CB79                 db    9
.eh_frame_hdr:000000000000CB7A                 db    0
.eh_frame_hdr:000000000000CB7B                 db    0
.eh_frame_hdr:000000000000CB7C                 db  38h ; 8
.eh_frame_hdr:000000000000CB7D                 db  85h
.eh_frame_hdr:000000000000CB7E                 db 0FFh
.eh_frame_hdr:000000000000CB7F                 db 0FFh
.eh_frame_hdr:000000000000CB80                 db  38h ; 8
.eh_frame_hdr:000000000000CB81                 db  0Ah
.eh_frame_hdr:000000000000CB82                 db    0
.eh_frame_hdr:000000000000CB83                 db    0
.eh_frame_hdr:000000000000CB84                 db  48h ; H
.eh_frame_hdr:000000000000CB85                 db  85h
.eh_frame_hdr:000000000000CB86                 db 0FFh
.eh_frame_hdr:000000000000CB87                 db 0FFh
.eh_frame_hdr:000000000000CB88                 db  4Ch ; L
.eh_frame_hdr:000000000000CB89                 db  0Ah
.eh_frame_hdr:000000000000CB8A                 db    0
.eh_frame_hdr:000000000000CB8B                 db    0
.eh_frame_hdr:000000000000CB8C                 db  58h ; X
.eh_frame_hdr:000000000000CB8D                 db  85h
.eh_frame_hdr:000000000000CB8E                 db 0FFh
.eh_frame_hdr:000000000000CB8F                 db 0FFh
.eh_frame_hdr:000000000000CB90                 db  60h ; `
.eh_frame_hdr:000000000000CB91                 db  0Ah
.eh_frame_hdr:000000000000CB92                 db    0
.eh_frame_hdr:000000000000CB93                 db    0
.eh_frame_hdr:000000000000CB94                 db    8
.eh_frame_hdr:000000000000CB95                 db  86h
.eh_frame_hdr:000000000000CB96                 db 0FFh
.eh_frame_hdr:000000000000CB97                 db 0FFh
.eh_frame_hdr:000000000000CB98                 db  90h
.eh_frame_hdr:000000000000CB99                 db  0Ah
.eh_frame_hdr:000000000000CB9A                 db    0
.eh_frame_hdr:000000000000CB9B                 db    0
.eh_frame_hdr:000000000000CB9C                 db  28h ; (
.eh_frame_hdr:000000000000CB9D                 db  86h
.eh_frame_hdr:000000000000CB9E                 db 0FFh
.eh_frame_hdr:000000000000CB9F                 db 0FFh
.eh_frame_hdr:000000000000CBA0                 db 0B0h
.eh_frame_hdr:000000000000CBA1                 db  0Ah
.eh_frame_hdr:000000000000CBA2                 db    0
.eh_frame_hdr:000000000000CBA3                 db    0
.eh_frame_hdr:000000000000CBA4                 db  88h
.eh_frame_hdr:000000000000CBA5                 db  86h
.eh_frame_hdr:000000000000CBA6                 db 0FFh
.eh_frame_hdr:000000000000CBA7                 db 0FFh
.eh_frame_hdr:000000000000CBA8                 db 0E4h
.eh_frame_hdr:000000000000CBA9                 db  0Ah
.eh_frame_hdr:000000000000CBAA                 db    0
.eh_frame_hdr:000000000000CBAB                 db    0
.eh_frame_hdr:000000000000CBAC                 db 0E8h
.eh_frame_hdr:000000000000CBAD                 db  86h
.eh_frame_hdr:000000000000CBAE                 db 0FFh
.eh_frame_hdr:000000000000CBAF                 db 0FFh
.eh_frame_hdr:000000000000CBB0                 db  10h
.eh_frame_hdr:000000000000CBB1                 db  0Bh
.eh_frame_hdr:000000000000CBB2                 db    0
.eh_frame_hdr:000000000000CBB3                 db    0
.eh_frame_hdr:000000000000CBB4                 db  48h ; H
.eh_frame_hdr:000000000000CBB5                 db  87h
.eh_frame_hdr:000000000000CBB6                 db 0FFh
.eh_frame_hdr:000000000000CBB7                 db 0FFh
.eh_frame_hdr:000000000000CBB8                 db  24h ; $
.eh_frame_hdr:000000000000CBB9                 db  0Bh
.eh_frame_hdr:000000000000CBBA                 db    0
.eh_frame_hdr:000000000000CBBB                 db    0
.eh_frame_hdr:000000000000CBBC                 db  98h
.eh_frame_hdr:000000000000CBBD                 db  87h
.eh_frame_hdr:000000000000CBBE                 db 0FFh
.eh_frame_hdr:000000000000CBBF                 db 0FFh
.eh_frame_hdr:000000000000CBC0                 db  50h ; P
.eh_frame_hdr:000000000000CBC1                 db  0Bh
.eh_frame_hdr:000000000000CBC2                 db    0
.eh_frame_hdr:000000000000CBC3                 db    0
.eh_frame_hdr:000000000000CBC4                 db 0D8h
.eh_frame_hdr:000000000000CBC5                 db  87h
.eh_frame_hdr:000000000000CBC6                 db 0FFh
.eh_frame_hdr:000000000000CBC7                 db 0FFh
.eh_frame_hdr:000000000000CBC8                 db  78h ; x
.eh_frame_hdr:000000000000CBC9                 db  0Bh
.eh_frame_hdr:000000000000CBCA                 db    0
.eh_frame_hdr:000000000000CBCB                 db    0
.eh_frame_hdr:000000000000CBCC                 db  68h ; h
.eh_frame_hdr:000000000000CBCD                 db  88h
.eh_frame_hdr:000000000000CBCE                 db 0FFh
.eh_frame_hdr:000000000000CBCF                 db 0FFh
.eh_frame_hdr:000000000000CBD0                 db 0D8h
.eh_frame_hdr:000000000000CBD1                 db  0Bh
.eh_frame_hdr:000000000000CBD2                 db    0
.eh_frame_hdr:000000000000CBD3                 db    0
.eh_frame_hdr:000000000000CBD4                 db 0C8h
.eh_frame_hdr:000000000000CBD5                 db  88h
.eh_frame_hdr:000000000000CBD6                 db 0FFh
.eh_frame_hdr:000000000000CBD7                 db 0FFh
.eh_frame_hdr:000000000000CBD8                 db 0F8h
.eh_frame_hdr:000000000000CBD9                 db  0Bh
.eh_frame_hdr:000000000000CBDA                 db    0
.eh_frame_hdr:000000000000CBDB                 db    0
.eh_frame_hdr:000000000000CBDC                 db 0E8h
.eh_frame_hdr:000000000000CBDD                 db  88h
.eh_frame_hdr:000000000000CBDE                 db 0FFh
.eh_frame_hdr:000000000000CBDF                 db 0FFh
.eh_frame_hdr:000000000000CBE0                 db  18h
.eh_frame_hdr:000000000000CBE1                 db  0Ch
.eh_frame_hdr:000000000000CBE2                 db    0
.eh_frame_hdr:000000000000CBE3                 db    0
.eh_frame_hdr:000000000000CBE4                 db 0E8h
.eh_frame_hdr:000000000000CBE5                 db  89h
.eh_frame_hdr:000000000000CBE6                 db 0FFh
.eh_frame_hdr:000000000000CBE7                 db 0FFh
.eh_frame_hdr:000000000000CBE8                 db  68h ; h
.eh_frame_hdr:000000000000CBE9                 db  0Ch
.eh_frame_hdr:000000000000CBEA                 db    0
.eh_frame_hdr:000000000000CBEB                 db    0
.eh_frame_hdr:000000000000CBEC                 db  88h
.eh_frame_hdr:000000000000CBED                 db  8Ah
.eh_frame_hdr:000000000000CBEE                 db 0FFh
.eh_frame_hdr:000000000000CBEF                 db 0FFh
.eh_frame_hdr:000000000000CBF0                 db  7Ch ; |
.eh_frame_hdr:000000000000CBF1                 db  0Ch
.eh_frame_hdr:000000000000CBF2                 db    0
.eh_frame_hdr:000000000000CBF3                 db    0
.eh_frame_hdr:000000000000CBF4                 db  98h
.eh_frame_hdr:000000000000CBF5                 db  8Ah
.eh_frame_hdr:000000000000CBF6                 db 0FFh
.eh_frame_hdr:000000000000CBF7                 db 0FFh
.eh_frame_hdr:000000000000CBF8                 db  90h
.eh_frame_hdr:000000000000CBF9                 db  0Ch
.eh_frame_hdr:000000000000CBFA                 db    0
.eh_frame_hdr:000000000000CBFB                 db    0
.eh_frame_hdr:000000000000CBFC                 db 0A8h
.eh_frame_hdr:000000000000CBFD                 db  8Ah
.eh_frame_hdr:000000000000CBFE                 db 0FFh
.eh_frame_hdr:000000000000CBFF                 db 0FFh
.eh_frame_hdr:000000000000CC00                 db 0A4h
.eh_frame_hdr:000000000000CC01                 db  0Ch
.eh_frame_hdr:000000000000CC02                 db    0
.eh_frame_hdr:000000000000CC03                 db    0
.eh_frame_hdr:000000000000CC04                 db 0D8h
.eh_frame_hdr:000000000000CC05                 db  8Ah
.eh_frame_hdr:000000000000CC06                 db 0FFh
.eh_frame_hdr:000000000000CC07                 db 0FFh
.eh_frame_hdr:000000000000CC08                 db 0C0h
.eh_frame_hdr:000000000000CC09                 db  0Ch
.eh_frame_hdr:000000000000CC0A                 db    0
.eh_frame_hdr:000000000000CC0B                 db    0
.eh_frame_hdr:000000000000CC0C                 db 0F8h
.eh_frame_hdr:000000000000CC0D                 db  8Bh
.eh_frame_hdr:000000000000CC0E                 db 0FFh
.eh_frame_hdr:000000000000CC0F                 db 0FFh
.eh_frame_hdr:000000000000CC10                 db  20h
.eh_frame_hdr:000000000000CC11                 db  0Dh
.eh_frame_hdr:000000000000CC12                 db    0
.eh_frame_hdr:000000000000CC13                 db    0
.eh_frame_hdr:000000000000CC14                 db  78h ; x
.eh_frame_hdr:000000000000CC15                 db  8Ch
.eh_frame_hdr:000000000000CC16                 db 0FFh
.eh_frame_hdr:000000000000CC17                 db 0FFh
.eh_frame_hdr:000000000000CC18                 db  34h ; 4
.eh_frame_hdr:000000000000CC19                 db  0Dh
.eh_frame_hdr:000000000000CC1A                 db    0
.eh_frame_hdr:000000000000CC1B                 db    0
.eh_frame_hdr:000000000000CC1C                 db 0B8h
.eh_frame_hdr:000000000000CC1D                 db  8Dh
.eh_frame_hdr:000000000000CC1E                 db 0FFh
.eh_frame_hdr:000000000000CC1F                 db 0FFh
.eh_frame_hdr:000000000000CC20                 db  94h
.eh_frame_hdr:000000000000CC21                 db  0Dh
.eh_frame_hdr:000000000000CC22                 db    0
.eh_frame_hdr:000000000000CC23                 db    0
.eh_frame_hdr:000000000000CC24                 db 0C8h
.eh_frame_hdr:000000000000CC25                 db  8Dh
.eh_frame_hdr:000000000000CC26                 db 0FFh
.eh_frame_hdr:000000000000CC27                 db 0FFh
.eh_frame_hdr:000000000000CC28                 db 0A8h
.eh_frame_hdr:000000000000CC29                 db  0Dh
.eh_frame_hdr:000000000000CC2A                 db    0
.eh_frame_hdr:000000000000CC2B                 db    0
.eh_frame_hdr:000000000000CC2C                 db 0D8h
.eh_frame_hdr:000000000000CC2D                 db  8Dh
.eh_frame_hdr:000000000000CC2E                 db 0FFh
.eh_frame_hdr:000000000000CC2F                 db 0FFh
.eh_frame_hdr:000000000000CC30                 db 0BCh
.eh_frame_hdr:000000000000CC31                 db  0Dh
.eh_frame_hdr:000000000000CC32                 db    0
.eh_frame_hdr:000000000000CC33                 db    0
.eh_frame_hdr:000000000000CC34                 db 0E8h
.eh_frame_hdr:000000000000CC35                 db  8Dh
.eh_frame_hdr:000000000000CC36                 db 0FFh
.eh_frame_hdr:000000000000CC37                 db 0FFh
.eh_frame_hdr:000000000000CC38                 db 0D0h
.eh_frame_hdr:000000000000CC39                 db  0Dh
.eh_frame_hdr:000000000000CC3A                 db    0
.eh_frame_hdr:000000000000CC3B                 db    0
.eh_frame_hdr:000000000000CC3C                 db  38h ; 8
.eh_frame_hdr:000000000000CC3D                 db  8Eh
.eh_frame_hdr:000000000000CC3E                 db 0FFh
.eh_frame_hdr:000000000000CC3F                 db 0FFh
.eh_frame_hdr:000000000000CC40                 db 0E4h
.eh_frame_hdr:000000000000CC41                 db  0Dh
.eh_frame_hdr:000000000000CC42                 db    0
.eh_frame_hdr:000000000000CC43                 db    0
.eh_frame_hdr:000000000000CC44                 db  98h
.eh_frame_hdr:000000000000CC45                 db  8Eh
.eh_frame_hdr:000000000000CC46                 db 0FFh
.eh_frame_hdr:000000000000CC47                 db 0FFh
.eh_frame_hdr:000000000000CC48                 db 0F8h
.eh_frame_hdr:000000000000CC49                 db  0Dh
.eh_frame_hdr:000000000000CC4A                 db    0
.eh_frame_hdr:000000000000CC4B                 db    0
.eh_frame_hdr:000000000000CC4C                 db 0E8h
.eh_frame_hdr:000000000000CC4D                 db  8Fh
.eh_frame_hdr:000000000000CC4E                 db 0FFh
.eh_frame_hdr:000000000000CC4F                 db 0FFh
.eh_frame_hdr:000000000000CC50                 db  34h ; 4
.eh_frame_hdr:000000000000CC51                 db  0Eh
.eh_frame_hdr:000000000000CC52                 db    0
.eh_frame_hdr:000000000000CC53                 db    0
.eh_frame_hdr:000000000000CC54                 db  48h ; H
.eh_frame_hdr:000000000000CC55                 db  90h
.eh_frame_hdr:000000000000CC56                 db 0FFh
.eh_frame_hdr:000000000000CC57                 db 0FFh
.eh_frame_hdr:000000000000CC58                 db  6Ch ; l
.eh_frame_hdr:000000000000CC59                 db  0Eh
.eh_frame_hdr:000000000000CC5A                 db    0
.eh_frame_hdr:000000000000CC5B                 db    0
.eh_frame_hdr:000000000000CC5C                 db  98h
.eh_frame_hdr:000000000000CC5D                 db  90h
.eh_frame_hdr:000000000000CC5E                 db 0FFh
.eh_frame_hdr:000000000000CC5F                 db 0FFh
.eh_frame_hdr:000000000000CC60                 db  80h
.eh_frame_hdr:000000000000CC61                 db  0Eh
.eh_frame_hdr:000000000000CC62                 db    0
.eh_frame_hdr:000000000000CC63                 db    0
.eh_frame_hdr:000000000000CC64                 db  18h
.eh_frame_hdr:000000000000CC65                 db  91h
.eh_frame_hdr:000000000000CC66                 db 0FFh
.eh_frame_hdr:000000000000CC67                 db 0FFh
.eh_frame_hdr:000000000000CC68                 db 0B4h
.eh_frame_hdr:000000000000CC69                 db  0Eh
.eh_frame_hdr:000000000000CC6A                 db    0
.eh_frame_hdr:000000000000CC6B                 db    0
.eh_frame_hdr:000000000000CC6C                 db  88h
.eh_frame_hdr:000000000000CC6D                 db  91h
.eh_frame_hdr:000000000000CC6E                 db 0FFh
.eh_frame_hdr:000000000000CC6F                 db 0FFh
.eh_frame_hdr:000000000000CC70                 db 0C8h
.eh_frame_hdr:000000000000CC71                 db  0Eh
.eh_frame_hdr:000000000000CC72                 db    0
.eh_frame_hdr:000000000000CC73                 db    0
.eh_frame_hdr:000000000000CC74                 db 0F8h
.eh_frame_hdr:000000000000CC75                 db  91h
.eh_frame_hdr:000000000000CC76                 db 0FFh
.eh_frame_hdr:000000000000CC77                 db 0FFh
.eh_frame_hdr:000000000000CC78                 db  14h
.eh_frame_hdr:000000000000CC79                 db  0Fh
.eh_frame_hdr:000000000000CC7A                 db    0
.eh_frame_hdr:000000000000CC7B                 db    0
.eh_frame_hdr:000000000000CC7C                 db  38h ; 8
.eh_frame_hdr:000000000000CC7D                 db  92h
.eh_frame_hdr:000000000000CC7E                 db 0FFh
.eh_frame_hdr:000000000000CC7F                 db 0FFh
.eh_frame_hdr:000000000000CC80                 db  28h ; (
.eh_frame_hdr:000000000000CC81                 db  0Fh
.eh_frame_hdr:000000000000CC82                 db    0
.eh_frame_hdr:000000000000CC83                 db    0
.eh_frame_hdr:000000000000CC84                 db  58h ; X
.eh_frame_hdr:000000000000CC85                 db  92h
.eh_frame_hdr:000000000000CC86                 db 0FFh
.eh_frame_hdr:000000000000CC87                 db 0FFh
.eh_frame_hdr:000000000000CC88                 db  3Ch ; <
.eh_frame_hdr:000000000000CC89                 db  0Fh
.eh_frame_hdr:000000000000CC8A                 db    0
.eh_frame_hdr:000000000000CC8B                 db    0
.eh_frame_hdr:000000000000CC8C                 db  18h
.eh_frame_hdr:000000000000CC8D                 db  94h
.eh_frame_hdr:000000000000CC8E                 db 0FFh
.eh_frame_hdr:000000000000CC8F                 db 0FFh
.eh_frame_hdr:000000000000CC90                 db  88h
.eh_frame_hdr:000000000000CC91                 db  0Fh
.eh_frame_hdr:000000000000CC92                 db    0
.eh_frame_hdr:000000000000CC93                 db    0
.eh_frame_hdr:000000000000CC94                 db 0A8h
.eh_frame_hdr:000000000000CC95                 db  94h
.eh_frame_hdr:000000000000CC96                 db 0FFh
.eh_frame_hdr:000000000000CC97                 db 0FFh
.eh_frame_hdr:000000000000CC98                 db 0B4h
.eh_frame_hdr:000000000000CC99                 db  0Fh
.eh_frame_hdr:000000000000CC9A                 db    0
.eh_frame_hdr:000000000000CC9B                 db    0
.eh_frame_hdr:000000000000CC9C                 db  88h
.eh_frame_hdr:000000000000CC9D                 db  95h
.eh_frame_hdr:000000000000CC9E                 db 0FFh
.eh_frame_hdr:000000000000CC9F                 db 0FFh
.eh_frame_hdr:000000000000CCA0                 db 0E0h
.eh_frame_hdr:000000000000CCA1                 db  0Fh
.eh_frame_hdr:000000000000CCA2                 db    0
.eh_frame_hdr:000000000000CCA3                 db    0
.eh_frame_hdr:000000000000CCA4                 db 0C8h
.eh_frame_hdr:000000000000CCA5                 db  97h
.eh_frame_hdr:000000000000CCA6                 db 0FFh
.eh_frame_hdr:000000000000CCA7                 db 0FFh
.eh_frame_hdr:000000000000CCA8                 db  18h
.eh_frame_hdr:000000000000CCA9                 db  10h
.eh_frame_hdr:000000000000CCAA                 db    0
.eh_frame_hdr:000000000000CCAB                 db    0
.eh_frame_hdr:000000000000CCAC                 db  58h ; X
.eh_frame_hdr:000000000000CCAD                 db  9Ah
.eh_frame_hdr:000000000000CCAE                 db 0FFh
.eh_frame_hdr:000000000000CCAF                 db 0FFh
.eh_frame_hdr:000000000000CCB0                 db  54h ; T
.eh_frame_hdr:000000000000CCB1                 db  10h
.eh_frame_hdr:000000000000CCB2                 db    0
.eh_frame_hdr:000000000000CCB3                 db    0
.eh_frame_hdr:000000000000CCB4                 db 0B8h
.eh_frame_hdr:000000000000CCB5                 db  9Ah
.eh_frame_hdr:000000000000CCB6                 db 0FFh
.eh_frame_hdr:000000000000CCB7                 db 0FFh
.eh_frame_hdr:000000000000CCB8                 db  78h ; x
.eh_frame_hdr:000000000000CCB9                 db  10h
.eh_frame_hdr:000000000000CCBA                 db    0
.eh_frame_hdr:000000000000CCBB                 db    0
.eh_frame_hdr:000000000000CCBC                 db 0C8h
.eh_frame_hdr:000000000000CCBD                 db  9Ch
.eh_frame_hdr:000000000000CCBE                 db 0FFh
.eh_frame_hdr:000000000000CCBF                 db 0FFh
.eh_frame_hdr:000000000000CCC0                 db 0B0h
.eh_frame_hdr:000000000000CCC1                 db  10h
.eh_frame_hdr:000000000000CCC2                 db    0
.eh_frame_hdr:000000000000CCC3                 db    0
.eh_frame_hdr:000000000000CCC4                 db 0F8h
.eh_frame_hdr:000000000000CCC5                 db  9Ch
.eh_frame_hdr:000000000000CCC6                 db 0FFh
.eh_frame_hdr:000000000000CCC7                 db 0FFh
.eh_frame_hdr:000000000000CCC8                 db 0D8h
.eh_frame_hdr:000000000000CCC9                 db  10h
.eh_frame_hdr:000000000000CCCA                 db    0
.eh_frame_hdr:000000000000CCCB                 db    0
.eh_frame_hdr:000000000000CCCC                 db    8
.eh_frame_hdr:000000000000CCCD                 db  9Dh
.eh_frame_hdr:000000000000CCCE                 db 0FFh
.eh_frame_hdr:000000000000CCCF                 db 0FFh
.eh_frame_hdr:000000000000CCD0                 db 0ECh
.eh_frame_hdr:000000000000CCD1                 db  10h
.eh_frame_hdr:000000000000CCD2                 db    0
.eh_frame_hdr:000000000000CCD3                 db    0
.eh_frame_hdr:000000000000CCD4                 db  38h ; 8
.eh_frame_hdr:000000000000CCD5                 db  9Dh
.eh_frame_hdr:000000000000CCD6                 db 0FFh
.eh_frame_hdr:000000000000CCD7                 db 0FFh
.eh_frame_hdr:000000000000CCD8                 db    4
.eh_frame_hdr:000000000000CCD9                 db  11h
.eh_frame_hdr:000000000000CCDA                 db    0
.eh_frame_hdr:000000000000CCDB                 db    0
.eh_frame_hdr:000000000000CCDC                 db  78h ; x
.eh_frame_hdr:000000000000CCDD                 db  9Dh
.eh_frame_hdr:000000000000CCDE                 db 0FFh
.eh_frame_hdr:000000000000CCDF                 db 0FFh
.eh_frame_hdr:000000000000CCE0                 db  1Ch
.eh_frame_hdr:000000000000CCE1                 db  11h
.eh_frame_hdr:000000000000CCE2                 db    0
.eh_frame_hdr:000000000000CCE3                 db    0
.eh_frame_hdr:000000000000CCE4                 db  98h
.eh_frame_hdr:000000000000CCE5                 db  9Dh
.eh_frame_hdr:000000000000CCE6                 db 0FFh
.eh_frame_hdr:000000000000CCE7                 db 0FFh
.eh_frame_hdr:000000000000CCE8                 db  38h ; 8
.eh_frame_hdr:000000000000CCE9                 db  11h
.eh_frame_hdr:000000000000CCEA                 db    0
.eh_frame_hdr:000000000000CCEB                 db    0
.eh_frame_hdr:000000000000CCEC                 db    8
.eh_frame_hdr:000000000000CCED                 db  9Eh
.eh_frame_hdr:000000000000CCEE                 db 0FFh
.eh_frame_hdr:000000000000CCEF                 db 0FFh
.eh_frame_hdr:000000000000CCF0                 db  58h ; X
.eh_frame_hdr:000000000000CCF1                 db  11h
.eh_frame_hdr:000000000000CCF2                 db    0
.eh_frame_hdr:000000000000CCF3                 db    0
.eh_frame_hdr:000000000000CCF4                 db  88h
.eh_frame_hdr:000000000000CCF5                 db  9Eh
.eh_frame_hdr:000000000000CCF6                 db 0FFh
.eh_frame_hdr:000000000000CCF7                 db 0FFh
.eh_frame_hdr:000000000000CCF8                 db 0B8h
.eh_frame_hdr:000000000000CCF9                 db  11h
.eh_frame_hdr:000000000000CCFA                 db    0
.eh_frame_hdr:000000000000CCFB                 db    0
.eh_frame_hdr:000000000000CCFC                 db  28h ; (
.eh_frame_hdr:000000000000CCFD                 db  9Fh
.eh_frame_hdr:000000000000CCFE                 db 0FFh
.eh_frame_hdr:000000000000CCFF                 db 0FFh
.eh_frame_hdr:000000000000CD00                 db 0D8h
.eh_frame_hdr:000000000000CD01                 db  11h
.eh_frame_hdr:000000000000CD02                 db    0
.eh_frame_hdr:000000000000CD03                 db    0
.eh_frame_hdr:000000000000CD04                 db  18h
.eh_frame_hdr:000000000000CD05                 db 0A0h
.eh_frame_hdr:000000000000CD06                 db 0FFh
.eh_frame_hdr:000000000000CD07                 db 0FFh
.eh_frame_hdr:000000000000CD08                 db  1Ch
.eh_frame_hdr:000000000000CD09                 db  12h
.eh_frame_hdr:000000000000CD0A                 db    0
.eh_frame_hdr:000000000000CD0B                 db    0
.eh_frame_hdr:000000000000CD0C                 db  58h ; X
.eh_frame_hdr:000000000000CD0D                 db 0B2h
.eh_frame_hdr:000000000000CD0E                 db 0FFh
.eh_frame_hdr:000000000000CD0F                 db 0FFh
.eh_frame_hdr:000000000000CD10                 db  94h
.eh_frame_hdr:000000000000CD11                 db  12h
.eh_frame_hdr:000000000000CD12                 db    0
.eh_frame_hdr:000000000000CD13                 db    0
.eh_frame_hdr:000000000000CD14                 db    8
.eh_frame_hdr:000000000000CD15                 db 0B4h
.eh_frame_hdr:000000000000CD16                 db 0FFh
.eh_frame_hdr:000000000000CD17                 db 0FFh
.eh_frame_hdr:000000000000CD18                 db    0
.eh_frame_hdr:000000000000CD19                 db  13h
.eh_frame_hdr:000000000000CD1A                 db    0
.eh_frame_hdr:000000000000CD1B                 db    0
.eh_frame_hdr:000000000000CD1C                 db  48h ; H
.eh_frame_hdr:000000000000CD1D                 db 0B4h
.eh_frame_hdr:000000000000CD1E                 db 0FFh
.eh_frame_hdr:000000000000CD1F                 db 0FFh
.eh_frame_hdr:000000000000CD20                 db  2Ch ; ,
.eh_frame_hdr:000000000000CD21                 db  13h
.eh_frame_hdr:000000000000CD22                 db    0
.eh_frame_hdr:000000000000CD23                 db    0
.eh_frame_hdr:000000000000CD24                 db  68h ; h
.eh_frame_hdr:000000000000CD25                 db 0B4h
.eh_frame_hdr:000000000000CD26                 db 0FFh
.eh_frame_hdr:000000000000CD27                 db 0FFh
.eh_frame_hdr:000000000000CD28                 db  40h ; @
.eh_frame_hdr:000000000000CD29                 db  13h
.eh_frame_hdr:000000000000CD2A                 db    0
.eh_frame_hdr:000000000000CD2B                 db    0
.eh_frame_hdr:000000000000CD2C                 db  88h
.eh_frame_hdr:000000000000CD2D                 db 0B4h
.eh_frame_hdr:000000000000CD2E                 db 0FFh
.eh_frame_hdr:000000000000CD2F                 db 0FFh
.eh_frame_hdr:000000000000CD30                 db  54h ; T
.eh_frame_hdr:000000000000CD31                 db  13h
.eh_frame_hdr:000000000000CD32                 db    0
.eh_frame_hdr:000000000000CD33                 db    0
.eh_frame_hdr:000000000000CD34                 db 0C8h
.eh_frame_hdr:000000000000CD35                 db 0B4h
.eh_frame_hdr:000000000000CD36                 db 0FFh
.eh_frame_hdr:000000000000CD37                 db 0FFh
.eh_frame_hdr:000000000000CD38                 db  68h ; h
.eh_frame_hdr:000000000000CD39                 db  13h
.eh_frame_hdr:000000000000CD3A                 db    0
.eh_frame_hdr:000000000000CD3B                 db    0
.eh_frame_hdr:000000000000CD3C                 db 0E8h
.eh_frame_hdr:000000000000CD3D                 db 0B4h
.eh_frame_hdr:000000000000CD3E                 db 0FFh
.eh_frame_hdr:000000000000CD3F                 db 0FFh
.eh_frame_hdr:000000000000CD40                 db  7Ch ; |
.eh_frame_hdr:000000000000CD41                 db  13h
.eh_frame_hdr:000000000000CD42                 db    0
.eh_frame_hdr:000000000000CD43                 db    0
.eh_frame_hdr:000000000000CD44                 db  18h
.eh_frame_hdr:000000000000CD45                 db 0B5h
.eh_frame_hdr:000000000000CD46                 db 0FFh
.eh_frame_hdr:000000000000CD47                 db 0FFh
.eh_frame_hdr:000000000000CD48                 db  90h
.eh_frame_hdr:000000000000CD49                 db  13h
.eh_frame_hdr:000000000000CD4A                 db    0
.eh_frame_hdr:000000000000CD4B                 db    0
.eh_frame_hdr:000000000000CD4C                 db  98h
.eh_frame_hdr:000000000000CD4D                 db 0B5h
.eh_frame_hdr:000000000000CD4E                 db 0FFh
.eh_frame_hdr:000000000000CD4F                 db 0FFh
.eh_frame_hdr:000000000000CD50                 db 0E4h
.eh_frame_hdr:000000000000CD51                 db  13h
.eh_frame_hdr:000000000000CD52                 db    0
.eh_frame_hdr:000000000000CD53                 db    0
.eh_frame_hdr:000000000000CD54                 db  88h
.eh_frame_hdr:000000000000CD55                 db 0B6h
.eh_frame_hdr:000000000000CD56                 db 0FFh
.eh_frame_hdr:000000000000CD57                 db 0FFh
.eh_frame_hdr:000000000000CD58                 db  50h ; P
.eh_frame_hdr:000000000000CD59                 db  14h
.eh_frame_hdr:000000000000CD5A                 db    0
.eh_frame_hdr:000000000000CD5B                 db    0
.eh_frame_hdr:000000000000CD5C                 db  98h
.eh_frame_hdr:000000000000CD5D                 db 0B6h
.eh_frame_hdr:000000000000CD5E                 db 0FFh
.eh_frame_hdr:000000000000CD5F                 db 0FFh
.eh_frame_hdr:000000000000CD60                 db  64h ; d
.eh_frame_hdr:000000000000CD61                 db  14h
.eh_frame_hdr:000000000000CD62                 db    0
.eh_frame_hdr:000000000000CD63                 db    0
.eh_frame_hdr:000000000000CD64                 db  38h ; 8
.eh_frame_hdr:000000000000CD65                 db 0B7h
.eh_frame_hdr:000000000000CD66                 db 0FFh
.eh_frame_hdr:000000000000CD67                 db 0FFh
.eh_frame_hdr:000000000000CD68                 db  90h
.eh_frame_hdr:000000000000CD69                 db  14h
.eh_frame_hdr:000000000000CD6A                 db    0
.eh_frame_hdr:000000000000CD6B                 db    0
.eh_frame_hdr:000000000000CD6C                 db  58h ; X
.eh_frame_hdr:000000000000CD6D                 db 0B7h
.eh_frame_hdr:000000000000CD6E                 db 0FFh
.eh_frame_hdr:000000000000CD6F                 db 0FFh
.eh_frame_hdr:000000000000CD70                 db 0A4h
.eh_frame_hdr:000000000000CD71                 db  14h
.eh_frame_hdr:000000000000CD72                 db    0
.eh_frame_hdr:000000000000CD73                 db    0
.eh_frame_hdr:000000000000CD74                 db  68h ; h
.eh_frame_hdr:000000000000CD75                 db 0B7h
.eh_frame_hdr:000000000000CD76                 db 0FFh
.eh_frame_hdr:000000000000CD77                 db 0FFh
.eh_frame_hdr:000000000000CD78                 db 0B8h
.eh_frame_hdr:000000000000CD79                 db  14h
.eh_frame_hdr:000000000000CD7A                 db    0
.eh_frame_hdr:000000000000CD7B                 db    0
.eh_frame_hdr:000000000000CD7C                 db  88h
.eh_frame_hdr:000000000000CD7D                 db 0B7h
.eh_frame_hdr:000000000000CD7E                 db 0FFh
.eh_frame_hdr:000000000000CD7F                 db 0FFh
.eh_frame_hdr:000000000000CD80                 db 0CCh
.eh_frame_hdr:000000000000CD81                 db  14h
.eh_frame_hdr:000000000000CD82                 db    0
.eh_frame_hdr:000000000000CD83                 db    0
.eh_frame_hdr:000000000000CD84                 db 0A8h
.eh_frame_hdr:000000000000CD85                 db 0B7h
.eh_frame_hdr:000000000000CD86                 db 0FFh
.eh_frame_hdr:000000000000CD87                 db 0FFh
.eh_frame_hdr:000000000000CD88                 db 0E0h
.eh_frame_hdr:000000000000CD89                 db  14h
.eh_frame_hdr:000000000000CD8A                 db    0
.eh_frame_hdr:000000000000CD8B                 db    0
.eh_frame_hdr:000000000000CD8C                 db  38h ; 8
.eh_frame_hdr:000000000000CD8D                 db 0B8h
.eh_frame_hdr:000000000000CD8E                 db 0FFh
.eh_frame_hdr:000000000000CD8F                 db 0FFh
.eh_frame_hdr:000000000000CD90                 db 0FCh
.eh_frame_hdr:000000000000CD91                 db  14h
.eh_frame_hdr:000000000000CD92                 db    0
.eh_frame_hdr:000000000000CD93                 db    0
.eh_frame_hdr:000000000000CD94                 db 0C8h
.eh_frame_hdr:000000000000CD95                 db 0B8h
.eh_frame_hdr:000000000000CD96                 db 0FFh
.eh_frame_hdr:000000000000CD97                 db 0FFh
.eh_frame_hdr:000000000000CD98                 db  18h
.eh_frame_hdr:000000000000CD99                 db  15h
.eh_frame_hdr:000000000000CD9A                 db    0
.eh_frame_hdr:000000000000CD9B                 db    0
.eh_frame_hdr:000000000000CD9C                 db 0D8h
.eh_frame_hdr:000000000000CD9D                 db 0B8h
.eh_frame_hdr:000000000000CD9E                 db 0FFh
.eh_frame_hdr:000000000000CD9F                 db 0FFh
.eh_frame_hdr:000000000000CDA0                 db  2Ch ; ,
.eh_frame_hdr:000000000000CDA1                 db  15h
.eh_frame_hdr:000000000000CDA2                 db    0
.eh_frame_hdr:000000000000CDA3                 db    0
.eh_frame_hdr:000000000000CDA4                 db 0E8h
.eh_frame_hdr:000000000000CDA5                 db 0B8h
.eh_frame_hdr:000000000000CDA6                 db 0FFh
.eh_frame_hdr:000000000000CDA7                 db 0FFh
.eh_frame_hdr:000000000000CDA8                 db  40h ; @
.eh_frame_hdr:000000000000CDA9                 db  15h
.eh_frame_hdr:000000000000CDAA                 db    0
.eh_frame_hdr:000000000000CDAB                 db    0
.eh_frame_hdr:000000000000CDAC                 db  88h
.eh_frame_hdr:000000000000CDAD                 db 0B9h
.eh_frame_hdr:000000000000CDAE                 db 0FFh
.eh_frame_hdr:000000000000CDAF                 db 0FFh
.eh_frame_hdr:000000000000CDB0                 db  5Ch ; \
.eh_frame_hdr:000000000000CDB1                 db  15h
.eh_frame_hdr:000000000000CDB2                 db    0
.eh_frame_hdr:000000000000CDB3                 db    0
.eh_frame_hdr:000000000000CDB4                 db  98h
.eh_frame_hdr:000000000000CDB5                 db 0B9h
.eh_frame_hdr:000000000000CDB6                 db 0FFh
.eh_frame_hdr:000000000000CDB7                 db 0FFh
.eh_frame_hdr:000000000000CDB8                 db  70h ; p
.eh_frame_hdr:000000000000CDB9                 db  15h
.eh_frame_hdr:000000000000CDBA                 db    0
.eh_frame_hdr:000000000000CDBB                 db    0
.eh_frame_hdr:000000000000CDBC                 db 0B8h
.eh_frame_hdr:000000000000CDBD                 db 0B9h
.eh_frame_hdr:000000000000CDBE                 db 0FFh
.eh_frame_hdr:000000000000CDBF                 db 0FFh
.eh_frame_hdr:000000000000CDC0                 db  84h
.eh_frame_hdr:000000000000CDC1                 db  15h
.eh_frame_hdr:000000000000CDC2                 db    0
.eh_frame_hdr:000000000000CDC3                 db    0
.eh_frame_hdr:000000000000CDC4                 db 0C8h
.eh_frame_hdr:000000000000CDC5                 db 0B9h
.eh_frame_hdr:000000000000CDC6                 db 0FFh
.eh_frame_hdr:000000000000CDC7                 db 0FFh
.eh_frame_hdr:000000000000CDC8                 db  98h
.eh_frame_hdr:000000000000CDC9                 db  15h
.eh_frame_hdr:000000000000CDCA                 db    0
.eh_frame_hdr:000000000000CDCB                 db    0
.eh_frame_hdr:000000000000CDCC                 db  58h ; X
.eh_frame_hdr:000000000000CDCD                 db 0BAh
.eh_frame_hdr:000000000000CDCE                 db 0FFh
.eh_frame_hdr:000000000000CDCF                 db 0FFh
.eh_frame_hdr:000000000000CDD0                 db 0B4h
.eh_frame_hdr:000000000000CDD1                 db  15h
.eh_frame_hdr:000000000000CDD2                 db    0
.eh_frame_hdr:000000000000CDD3                 db    0
.eh_frame_hdr:000000000000CDD4                 db 0F8h
.eh_frame_hdr:000000000000CDD5                 db 0BAh
.eh_frame_hdr:000000000000CDD6                 db 0FFh
.eh_frame_hdr:000000000000CDD7                 db 0FFh
.eh_frame_hdr:000000000000CDD8                 db 0D0h
.eh_frame_hdr:000000000000CDD9                 db  15h
.eh_frame_hdr:000000000000CDDA                 db    0
.eh_frame_hdr:000000000000CDDB                 db    0
.eh_frame_hdr:000000000000CDDC                 db    8
.eh_frame_hdr:000000000000CDDD                 db 0BBh
.eh_frame_hdr:000000000000CDDE                 db 0FFh
.eh_frame_hdr:000000000000CDDF                 db 0FFh
.eh_frame_hdr:000000000000CDE0                 db 0E4h
.eh_frame_hdr:000000000000CDE1                 db  15h
.eh_frame_hdr:000000000000CDE2                 db    0
.eh_frame_hdr:000000000000CDE3                 db    0
.eh_frame_hdr:000000000000CDE4                 db  28h ; (
.eh_frame_hdr:000000000000CDE5                 db 0BBh
.eh_frame_hdr:000000000000CDE6                 db 0FFh
.eh_frame_hdr:000000000000CDE7                 db 0FFh
.eh_frame_hdr:000000000000CDE8                 db 0F8h
.eh_frame_hdr:000000000000CDE9                 db  15h
.eh_frame_hdr:000000000000CDEA                 db    0
.eh_frame_hdr:000000000000CDEB                 db    0
.eh_frame_hdr:000000000000CDEC                 db  48h ; H
.eh_frame_hdr:000000000000CDED                 db 0BBh
.eh_frame_hdr:000000000000CDEE                 db 0FFh
.eh_frame_hdr:000000000000CDEF                 db 0FFh
.eh_frame_hdr:000000000000CDF0                 db  0Ch
.eh_frame_hdr:000000000000CDF1                 db  16h
.eh_frame_hdr:000000000000CDF2                 db    0
.eh_frame_hdr:000000000000CDF3                 db    0
.eh_frame_hdr:000000000000CDF4                 db  58h ; X
.eh_frame_hdr:000000000000CDF5                 db 0BBh
.eh_frame_hdr:000000000000CDF6                 db 0FFh
.eh_frame_hdr:000000000000CDF7                 db 0FFh
.eh_frame_hdr:000000000000CDF8                 db  20h
.eh_frame_hdr:000000000000CDF9                 db  16h
.eh_frame_hdr:000000000000CDFA                 db    0
.eh_frame_hdr:000000000000CDFB                 db    0
.eh_frame_hdr:000000000000CDFC                 db  78h ; x
.eh_frame_hdr:000000000000CDFD                 db 0BBh
.eh_frame_hdr:000000000000CDFE                 db 0FFh
.eh_frame_hdr:000000000000CDFF                 db 0FFh
.eh_frame_hdr:000000000000CE00                 db  34h ; 4
.eh_frame_hdr:000000000000CE01                 db  16h
.eh_frame_hdr:000000000000CE02                 db    0
.eh_frame_hdr:000000000000CE03                 db    0
.eh_frame_hdr:000000000000CE04                 db  98h
.eh_frame_hdr:000000000000CE05                 db 0BBh
.eh_frame_hdr:000000000000CE06                 db 0FFh
.eh_frame_hdr:000000000000CE07                 db 0FFh
.eh_frame_hdr:000000000000CE08                 db  48h ; H
.eh_frame_hdr:000000000000CE09                 db  16h
.eh_frame_hdr:000000000000CE0A                 db    0
.eh_frame_hdr:000000000000CE0B                 db    0
.eh_frame_hdr:000000000000CE0C                 db 0B8h
.eh_frame_hdr:000000000000CE0D                 db 0BBh
.eh_frame_hdr:000000000000CE0E                 db 0FFh
.eh_frame_hdr:000000000000CE0F                 db 0FFh
.eh_frame_hdr:000000000000CE10                 db  60h ; `
.eh_frame_hdr:000000000000CE11                 db  16h
.eh_frame_hdr:000000000000CE12                 db    0
.eh_frame_hdr:000000000000CE13                 db    0
.eh_frame_hdr:000000000000CE14                 db  28h ; (
.eh_frame_hdr:000000000000CE15                 db 0BEh
.eh_frame_hdr:000000000000CE16                 db 0FFh
.eh_frame_hdr:000000000000CE17                 db 0FFh
.eh_frame_hdr:000000000000CE18                 db 0B0h
.eh_frame_hdr:000000000000CE19                 db  16h
.eh_frame_hdr:000000000000CE1A                 db    0
.eh_frame_hdr:000000000000CE1B                 db    0
.eh_frame_hdr:000000000000CE1C                 db  58h ; X
.eh_frame_hdr:000000000000CE1D                 db 0BFh
.eh_frame_hdr:000000000000CE1E                 db 0FFh
.eh_frame_hdr:000000000000CE1F                 db 0FFh
.eh_frame_hdr:000000000000CE20                 db 0ECh
.eh_frame_hdr:000000000000CE21                 db  16h
.eh_frame_hdr:000000000000CE22                 db    0
.eh_frame_hdr:000000000000CE23                 db    0
.eh_frame_hdr:000000000000CE24                 db 0F8h
.eh_frame_hdr:000000000000CE25                 db 0BFh
.eh_frame_hdr:000000000000CE26                 db 0FFh
.eh_frame_hdr:000000000000CE27                 db 0FFh
.eh_frame_hdr:000000000000CE28                 db  4Ch ; L
.eh_frame_hdr:000000000000CE29                 db  17h
.eh_frame_hdr:000000000000CE2A                 db    0
.eh_frame_hdr:000000000000CE2B                 db    0
.eh_frame_hdr:000000000000CE2C                 db  18h
.eh_frame_hdr:000000000000CE2D                 db 0C0h
.eh_frame_hdr:000000000000CE2E                 db 0FFh
.eh_frame_hdr:000000000000CE2F                 db 0FFh
.eh_frame_hdr:000000000000CE30                 db  60h ; `
.eh_frame_hdr:000000000000CE31                 db  17h
.eh_frame_hdr:000000000000CE32                 db    0
.eh_frame_hdr:000000000000CE33                 db    0
.eh_frame_hdr:000000000000CE34                 db  98h
.eh_frame_hdr:000000000000CE35                 db 0C0h
.eh_frame_hdr:000000000000CE36                 db 0FFh
.eh_frame_hdr:000000000000CE37                 db 0FFh
.eh_frame_hdr:000000000000CE38                 db  84h
.eh_frame_hdr:000000000000CE39                 db  17h
.eh_frame_hdr:000000000000CE3A                 db    0
.eh_frame_hdr:000000000000CE3B                 db    0
.eh_frame_hdr:000000000000CE3C                 db 0A8h
.eh_frame_hdr:000000000000CE3D                 db 0C0h
.eh_frame_hdr:000000000000CE3E                 db 0FFh
.eh_frame_hdr:000000000000CE3F                 db 0FFh
.eh_frame_hdr:000000000000CE40                 db  98h
.eh_frame_hdr:000000000000CE41                 db  17h
.eh_frame_hdr:000000000000CE42                 db    0
.eh_frame_hdr:000000000000CE43                 db    0
.eh_frame_hdr:000000000000CE44                 db 0C8h
.eh_frame_hdr:000000000000CE45                 db 0C0h
.eh_frame_hdr:000000000000CE46                 db 0FFh
.eh_frame_hdr:000000000000CE47                 db 0FFh
.eh_frame_hdr:000000000000CE48                 db 0ACh
.eh_frame_hdr:000000000000CE49                 db  17h
.eh_frame_hdr:000000000000CE4A                 db    0
.eh_frame_hdr:000000000000CE4B                 db    0
.eh_frame_hdr:000000000000CE4C                 db  48h ; H
.eh_frame_hdr:000000000000CE4D                 db 0C2h
.eh_frame_hdr:000000000000CE4E                 db 0FFh
.eh_frame_hdr:000000000000CE4F                 db 0FFh
.eh_frame_hdr:000000000000CE50                 db 0F8h
.eh_frame_hdr:000000000000CE51                 db  17h
.eh_frame_hdr:000000000000CE52                 db    0
.eh_frame_hdr:000000000000CE53                 db    0
.eh_frame_hdr:000000000000CE54                 db 0D8h
.eh_frame_hdr:000000000000CE55                 db 0C2h
.eh_frame_hdr:000000000000CE56                 db 0FFh
.eh_frame_hdr:000000000000CE57                 db 0FFh
.eh_frame_hdr:000000000000CE58                 db  1Ch
.eh_frame_hdr:000000000000CE59                 db  18h
.eh_frame_hdr:000000000000CE5A                 db    0
.eh_frame_hdr:000000000000CE5B                 db    0
.eh_frame_hdr:000000000000CE5C                 db 0E8h
.eh_frame_hdr:000000000000CE5D                 db 0C2h
.eh_frame_hdr:000000000000CE5E                 db 0FFh
.eh_frame_hdr:000000000000CE5F                 db 0FFh
.eh_frame_hdr:000000000000CE60                 db  30h ; 0
.eh_frame_hdr:000000000000CE61                 db  18h
.eh_frame_hdr:000000000000CE62                 db    0
.eh_frame_hdr:000000000000CE63                 db    0
.eh_frame_hdr:000000000000CE64                 db 0F8h
.eh_frame_hdr:000000000000CE65                 db 0C2h
.eh_frame_hdr:000000000000CE66                 db 0FFh
.eh_frame_hdr:000000000000CE67                 db 0FFh
.eh_frame_hdr:000000000000CE68                 db  48h ; H
.eh_frame_hdr:000000000000CE69                 db  18h
.eh_frame_hdr:000000000000CE6A                 db    0
.eh_frame_hdr:000000000000CE6B                 db    0
.eh_frame_hdr:000000000000CE6C                 db  38h ; 8
.eh_frame_hdr:000000000000CE6D                 db 0C3h
.eh_frame_hdr:000000000000CE6E                 db 0FFh
.eh_frame_hdr:000000000000CE6F                 db 0FFh
.eh_frame_hdr:000000000000CE70                 db  80h
.eh_frame_hdr:000000000000CE71                 db  18h
.eh_frame_hdr:000000000000CE72                 db    0
.eh_frame_hdr:000000000000CE73                 db    0
.eh_frame_hdr:000000000000CE74                 db  58h ; X
.eh_frame_hdr:000000000000CE75                 db 0C7h
.eh_frame_hdr:000000000000CE76                 db 0FFh
.eh_frame_hdr:000000000000CE77                 db 0FFh
.eh_frame_hdr:000000000000CE78                 db  94h
.eh_frame_hdr:000000000000CE79                 db  19h
.eh_frame_hdr:000000000000CE7A                 db    0
.eh_frame_hdr:000000000000CE7B                 db    0
.eh_frame_hdr:000000000000CE7C                 db  78h ; x
.eh_frame_hdr:000000000000CE7D                 db 0C7h
.eh_frame_hdr:000000000000CE7E                 db 0FFh
.eh_frame_hdr:000000000000CE7F                 db 0FFh
.eh_frame_hdr:000000000000CE80                 db 0A8h
.eh_frame_hdr:000000000000CE81                 db  19h
.eh_frame_hdr:000000000000CE82                 db    0
.eh_frame_hdr:000000000000CE83                 db    0
.eh_frame_hdr:000000000000CE84                 db 0F8h
.eh_frame_hdr:000000000000CE85                 db 0C7h
.eh_frame_hdr:000000000000CE86                 db 0FFh
.eh_frame_hdr:000000000000CE87                 db 0FFh
.eh_frame_hdr:000000000000CE88                 db 0C4h
.eh_frame_hdr:000000000000CE89                 db  19h
.eh_frame_hdr:000000000000CE8A                 db    0
.eh_frame_hdr:000000000000CE8B                 db    0
.eh_frame_hdr:000000000000CE8C                 db 0D8h
.eh_frame_hdr:000000000000CE8D                 db 0C8h
.eh_frame_hdr:000000000000CE8E                 db 0FFh
.eh_frame_hdr:000000000000CE8F                 db 0FFh
.eh_frame_hdr:000000000000CE90                 db 0F0h
.eh_frame_hdr:000000000000CE91                 db  19h
.eh_frame_hdr:000000000000CE92                 db    0
.eh_frame_hdr:000000000000CE93                 db    0
.eh_frame_hdr:000000000000CE94                 db  58h ; X
.eh_frame_hdr:000000000000CE95                 db 0C9h
.eh_frame_hdr:000000000000CE96                 db 0FFh
.eh_frame_hdr:000000000000CE97                 db 0FFh
.eh_frame_hdr:000000000000CE98                 db  10h
.eh_frame_hdr:000000000000CE99                 db  1Ah
.eh_frame_hdr:000000000000CE9A                 db    0
.eh_frame_hdr:000000000000CE9B                 db    0
.eh_frame_hdr:000000000000CE9C                 db  78h ; x
.eh_frame_hdr:000000000000CE9D                 db 0C9h
.eh_frame_hdr:000000000000CE9E                 db 0FFh
.eh_frame_hdr:000000000000CE9F                 db 0FFh
.eh_frame_hdr:000000000000CEA0                 db  2Ch ; ,
.eh_frame_hdr:000000000000CEA1                 db  1Ah
.eh_frame_hdr:000000000000CEA2                 db    0
.eh_frame_hdr:000000000000CEA3                 db    0
.eh_frame_hdr:000000000000CEA4                 db 0A8h
.eh_frame_hdr:000000000000CEA5                 db 0C9h
.eh_frame_hdr:000000000000CEA6                 db 0FFh
.eh_frame_hdr:000000000000CEA7                 db 0FFh
.eh_frame_hdr:000000000000CEA8                 db  40h ; @
.eh_frame_hdr:000000000000CEA9                 db  1Ah
.eh_frame_hdr:000000000000CEAA                 db    0
.eh_frame_hdr:000000000000CEAB                 db    0
.eh_frame_hdr:000000000000CEAC                 db 0B8h
.eh_frame_hdr:000000000000CEAD                 db 0C9h
.eh_frame_hdr:000000000000CEAE                 db 0FFh
.eh_frame_hdr:000000000000CEAF                 db 0FFh
.eh_frame_hdr:000000000000CEB0                 db  54h ; T
.eh_frame_hdr:000000000000CEB1                 db  1Ah
.eh_frame_hdr:000000000000CEB2                 db    0
.eh_frame_hdr:000000000000CEB3                 db    0
.eh_frame_hdr:000000000000CEB4                 db 0F8h
.eh_frame_hdr:000000000000CEB5                 db 0C9h
.eh_frame_hdr:000000000000CEB6                 db 0FFh
.eh_frame_hdr:000000000000CEB7                 db 0FFh
.eh_frame_hdr:000000000000CEB8                 db  78h ; x
.eh_frame_hdr:000000000000CEB9                 db  1Ah
.eh_frame_hdr:000000000000CEBA                 db    0
.eh_frame_hdr:000000000000CEBB                 db    0
.eh_frame_hdr:000000000000CEBC                 db  28h ; (
.eh_frame_hdr:000000000000CEBD                 db 0CAh
.eh_frame_hdr:000000000000CEBE                 db 0FFh
.eh_frame_hdr:000000000000CEBF                 db 0FFh
.eh_frame_hdr:000000000000CEC0                 db  8Ch
.eh_frame_hdr:000000000000CEC1                 db  1Ah
.eh_frame_hdr:000000000000CEC2                 db    0
.eh_frame_hdr:000000000000CEC3                 db    0
.eh_frame_hdr:000000000000CEC4                 db 0B8h
.eh_frame_hdr:000000000000CEC5                 db 0CAh
.eh_frame_hdr:000000000000CEC6                 db 0FFh
.eh_frame_hdr:000000000000CEC7                 db 0FFh
.eh_frame_hdr:000000000000CEC8                 db 0A4h
.eh_frame_hdr:000000000000CEC9                 db  1Ah
.eh_frame_hdr:000000000000CECA                 db    0
.eh_frame_hdr:000000000000CECB                 db    0
.eh_frame_hdr:000000000000CECC                 db    8
.eh_frame_hdr:000000000000CECD                 db 0CBh
.eh_frame_hdr:000000000000CECE                 db 0FFh
.eh_frame_hdr:000000000000CECF                 db 0FFh
.eh_frame_hdr:000000000000CED0                 db 0BCh
.eh_frame_hdr:000000000000CED1                 db  1Ah
.eh_frame_hdr:000000000000CED2                 db    0
.eh_frame_hdr:000000000000CED3                 db    0
.eh_frame_hdr:000000000000CED4                 db  28h ; (
.eh_frame_hdr:000000000000CED5                 db 0CBh
.eh_frame_hdr:000000000000CED6                 db 0FFh
.eh_frame_hdr:000000000000CED7                 db 0FFh
.eh_frame_hdr:000000000000CED8                 db 0D8h
.eh_frame_hdr:000000000000CED9                 db  1Ah
.eh_frame_hdr:000000000000CEDA                 db    0
.eh_frame_hdr:000000000000CEDB                 db    0
.eh_frame_hdr:000000000000CEDC                 db  58h ; X
.eh_frame_hdr:000000000000CEDD                 db 0CBh
.eh_frame_hdr:000000000000CEDE                 db 0FFh
.eh_frame_hdr:000000000000CEDF                 db 0FFh
.eh_frame_hdr:000000000000CEE0                 db 0F4h
.eh_frame_hdr:000000000000CEE1                 db  1Ah
.eh_frame_hdr:000000000000CEE2                 db    0
.eh_frame_hdr:000000000000CEE3                 db    0
.eh_frame_hdr:000000000000CEE4                 db  88h
.eh_frame_hdr:000000000000CEE5                 db 0CBh
.eh_frame_hdr:000000000000CEE6                 db 0FFh
.eh_frame_hdr:000000000000CEE7                 db 0FFh
.eh_frame_hdr:000000000000CEE8                 db  1Ch
.eh_frame_hdr:000000000000CEE9                 db  1Bh
.eh_frame_hdr:000000000000CEEA                 db    0
.eh_frame_hdr:000000000000CEEB                 db    0
.eh_frame_hdr:000000000000CEEC                 db 0A8h
.eh_frame_hdr:000000000000CEED                 db 0CBh
.eh_frame_hdr:000000000000CEEE                 db 0FFh
.eh_frame_hdr:000000000000CEEF                 db 0FFh
.eh_frame_hdr:000000000000CEF0                 db  38h ; 8
.eh_frame_hdr:000000000000CEF1                 db  1Bh
.eh_frame_hdr:000000000000CEF2                 db    0
.eh_frame_hdr:000000000000CEF3                 db    0
.eh_frame_hdr:000000000000CEF4                 db 0E8h
.eh_frame_hdr:000000000000CEF5                 db 0CBh
.eh_frame_hdr:000000000000CEF6                 db 0FFh
.eh_frame_hdr:000000000000CEF7                 db 0FFh
.eh_frame_hdr:000000000000CEF8                 db  50h ; P
.eh_frame_hdr:000000000000CEF9                 db  1Bh
.eh_frame_hdr:000000000000CEFA                 db    0
.eh_frame_hdr:000000000000CEFB                 db    0
.eh_frame_hdr:000000000000CEFC                 db  18h
.eh_frame_hdr:000000000000CEFD                 db 0CCh
.eh_frame_hdr:000000000000CEFE                 db 0FFh
.eh_frame_hdr:000000000000CEFF                 db 0FFh
.eh_frame_hdr:000000000000CF00                 db  70h ; p
.eh_frame_hdr:000000000000CF01                 db  1Bh
.eh_frame_hdr:000000000000CF02                 db    0
.eh_frame_hdr:000000000000CF03                 db    0
.eh_frame_hdr:000000000000CF04                 db 0B8h
.eh_frame_hdr:000000000000CF05                 db 0CCh
.eh_frame_hdr:000000000000CF06                 db 0FFh
.eh_frame_hdr:000000000000CF07                 db 0FFh
.eh_frame_hdr:000000000000CF08                 db  98h
.eh_frame_hdr:000000000000CF09                 db  1Bh
.eh_frame_hdr:000000000000CF0A                 db    0
.eh_frame_hdr:000000000000CF0B                 db    0
.eh_frame_hdr:000000000000CF0C                 db 0F8h
.eh_frame_hdr:000000000000CF0D                 db 0CCh
.eh_frame_hdr:000000000000CF0E                 db 0FFh
.eh_frame_hdr:000000000000CF0F                 db 0FFh
.eh_frame_hdr:000000000000CF10                 db 0B8h
.eh_frame_hdr:000000000000CF11                 db  1Bh
.eh_frame_hdr:000000000000CF12                 db    0
.eh_frame_hdr:000000000000CF13                 db    0
.eh_frame_hdr:000000000000CF14                 db  28h ; (
.eh_frame_hdr:000000000000CF15                 db 0CDh
.eh_frame_hdr:000000000000CF16                 db 0FFh
.eh_frame_hdr:000000000000CF17                 db 0FFh
.eh_frame_hdr:000000000000CF18                 db 0D0h
.eh_frame_hdr:000000000000CF19                 db  1Bh
.eh_frame_hdr:000000000000CF1A                 db    0
.eh_frame_hdr:000000000000CF1B                 db    0
.eh_frame_hdr:000000000000CF1C                 db  88h
.eh_frame_hdr:000000000000CF1D                 db 0CDh
.eh_frame_hdr:000000000000CF1E                 db 0FFh
.eh_frame_hdr:000000000000CF1F                 db 0FFh
.eh_frame_hdr:000000000000CF20                 db    0
.eh_frame_hdr:000000000000CF21                 db  1Ch
.eh_frame_hdr:000000000000CF22                 db    0
.eh_frame_hdr:000000000000CF23                 db    0
.eh_frame_hdr:000000000000CF24                 db  18h
.eh_frame_hdr:000000000000CF25                 db 0CEh
.eh_frame_hdr:000000000000CF26                 db 0FFh
.eh_frame_hdr:000000000000CF27                 db 0FFh
.eh_frame_hdr:000000000000CF28                 db  40h ; @
.eh_frame_hdr:000000000000CF29                 db  1Ch
.eh_frame_hdr:000000000000CF2A                 db    0
.eh_frame_hdr:000000000000CF2B                 db    0
.eh_frame_hdr:000000000000CF2C                 db    8
.eh_frame_hdr:000000000000CF2D                 db 0CFh
.eh_frame_hdr:000000000000CF2E                 db 0FFh
.eh_frame_hdr:000000000000CF2F                 db 0FFh
.eh_frame_hdr:000000000000CF30                 db  90h
.eh_frame_hdr:000000000000CF31                 db  1Ch
.eh_frame_hdr:000000000000CF32                 db    0
.eh_frame_hdr:000000000000CF33                 db    0
.eh_frame_hdr:000000000000CF34                 db  18h
.eh_frame_hdr:000000000000CF35                 db 0CFh
.eh_frame_hdr:000000000000CF36                 db 0FFh
.eh_frame_hdr:000000000000CF37                 db 0FFh
.eh_frame_hdr:000000000000CF38                 db 0A4h
.eh_frame_hdr:000000000000CF39                 db  1Ch
.eh_frame_hdr:000000000000CF3A                 db    0
.eh_frame_hdr:000000000000CF3B                 db    0
.eh_frame_hdr:000000000000CF3C                 db  38h ; 8
.eh_frame_hdr:000000000000CF3D                 db 0D0h
.eh_frame_hdr:000000000000CF3E                 db 0FFh
.eh_frame_hdr:000000000000CF3F                 db 0FFh
.eh_frame_hdr:000000000000CF40                 db 0F0h
.eh_frame_hdr:000000000000CF41                 db  1Ch
.eh_frame_hdr:000000000000CF42                 db    0
.eh_frame_hdr:000000000000CF43                 db    0
.eh_frame_hdr:000000000000CF44                 db 0B8h
.eh_frame_hdr:000000000000CF45                 db 0D0h
.eh_frame_hdr:000000000000CF46                 db 0FFh
.eh_frame_hdr:000000000000CF47                 db 0FFh
.eh_frame_hdr:000000000000CF48                 db  1Ch
.eh_frame_hdr:000000000000CF49                 db  1Dh
.eh_frame_hdr:000000000000CF4A                 db    0
.eh_frame_hdr:000000000000CF4B                 db    0
.eh_frame_hdr:000000000000CF4C                 db 0D8h
.eh_frame_hdr:000000000000CF4D                 db 0D1h
.eh_frame_hdr:000000000000CF4E                 db 0FFh
.eh_frame_hdr:000000000000CF4F                 db 0FFh
.eh_frame_hdr:000000000000CF50                 db  7Ch ; |
.eh_frame_hdr:000000000000CF51                 db  1Dh
.eh_frame_hdr:000000000000CF52                 db    0
.eh_frame_hdr:000000000000CF53                 db    0
.eh_frame_hdr:000000000000CF54                 db  48h ; H
.eh_frame_hdr:000000000000CF55                 db 0D2h
.eh_frame_hdr:000000000000CF56                 db 0FFh
.eh_frame_hdr:000000000000CF57                 db 0FFh
.eh_frame_hdr:000000000000CF58                 db 0C8h
.eh_frame_hdr:000000000000CF59                 db  1Dh
.eh_frame_hdr:000000000000CF5A                 db    0
.eh_frame_hdr:000000000000CF5B                 db    0
.eh_frame_hdr:000000000000CF5C                 db  98h
.eh_frame_hdr:000000000000CF5D                 db 0D2h
.eh_frame_hdr:000000000000CF5E                 db 0FFh
.eh_frame_hdr:000000000000CF5F                 db 0FFh
.eh_frame_hdr:000000000000CF60                 db    8
.eh_frame_hdr:000000000000CF61                 db  1Eh
.eh_frame_hdr:000000000000CF62                 db    0
.eh_frame_hdr:000000000000CF63                 db    0
.eh_frame_hdr:000000000000CF64                 db  18h
.eh_frame_hdr:000000000000CF65                 db 0D3h
.eh_frame_hdr:000000000000CF66                 db 0FFh
.eh_frame_hdr:000000000000CF67                 db 0FFh
.eh_frame_hdr:000000000000CF68                 db  58h ; X
.eh_frame_hdr:000000000000CF69                 db  1Eh
.eh_frame_hdr:000000000000CF6A                 db    0
.eh_frame_hdr:000000000000CF6B                 db    0
.eh_frame_hdr:000000000000CF6C                 db  78h ; x
.eh_frame_hdr:000000000000CF6D                 db 0D3h
.eh_frame_hdr:000000000000CF6E                 db 0FFh
.eh_frame_hdr:000000000000CF6F                 db 0FFh
.eh_frame_hdr:000000000000CF70                 db  78h ; x
.eh_frame_hdr:000000000000CF71                 db  1Eh
.eh_frame_hdr:000000000000CF72                 db    0
.eh_frame_hdr:000000000000CF73                 db    0
.eh_frame_hdr:000000000000CF74                 db 0B8h
.eh_frame_hdr:000000000000CF75                 db 0D3h
.eh_frame_hdr:000000000000CF76                 db 0FFh
.eh_frame_hdr:000000000000CF77                 db 0FFh
.eh_frame_hdr:000000000000CF78                 db  90h
.eh_frame_hdr:000000000000CF79                 db  1Eh
.eh_frame_hdr:000000000000CF7A                 db    0
.eh_frame_hdr:000000000000CF7B                 db    0
.eh_frame_hdr:000000000000CF7C                 db 0F8h
.eh_frame_hdr:000000000000CF7D                 db 0D3h
.eh_frame_hdr:000000000000CF7E                 db 0FFh
.eh_frame_hdr:000000000000CF7F                 db 0FFh
.eh_frame_hdr:000000000000CF80                 db 0B0h
.eh_frame_hdr:000000000000CF81                 db  1Eh
.eh_frame_hdr:000000000000CF82                 db    0
.eh_frame_hdr:000000000000CF83                 db    0
.eh_frame_hdr:000000000000CF84                 db  28h ; (
.eh_frame_hdr:000000000000CF85                 db 0D4h
.eh_frame_hdr:000000000000CF86                 db 0FFh
.eh_frame_hdr:000000000000CF87                 db 0FFh
.eh_frame_hdr:000000000000CF88                 db 0CCh
.eh_frame_hdr:000000000000CF89                 db  1Eh
.eh_frame_hdr:000000000000CF8A                 db    0
.eh_frame_hdr:000000000000CF8B                 db    0
.eh_frame_hdr:000000000000CF8C                 db  68h ; h
.eh_frame_hdr:000000000000CF8D                 db 0D4h
.eh_frame_hdr:000000000000CF8E                 db 0FFh
.eh_frame_hdr:000000000000CF8F                 db 0FFh
.eh_frame_hdr:000000000000CF90                 db 0ECh
.eh_frame_hdr:000000000000CF91                 db  1Eh
.eh_frame_hdr:000000000000CF92                 db    0
.eh_frame_hdr:000000000000CF93                 db    0
.eh_frame_hdr:000000000000CF94                 db  78h ; x
.eh_frame_hdr:000000000000CF95                 db 0D4h
.eh_frame_hdr:000000000000CF96                 db 0FFh
.eh_frame_hdr:000000000000CF97                 db 0FFh
.eh_frame_hdr:000000000000CF98                 db    0
.eh_frame_hdr:000000000000CF99                 db  1Fh
.eh_frame_hdr:000000000000CF9A                 db    0
.eh_frame_hdr:000000000000CF9B                 db    0
.eh_frame_hdr:000000000000CF9C                 db  98h
.eh_frame_hdr:000000000000CF9D                 db 0D5h
.eh_frame_hdr:000000000000CF9E                 db 0FFh
.eh_frame_hdr:000000000000CF9F                 db 0FFh
.eh_frame_hdr:000000000000CFA0                 db  4Ch ; L
.eh_frame_hdr:000000000000CFA1                 db  1Fh
.eh_frame_hdr:000000000000CFA2                 db    0
.eh_frame_hdr:000000000000CFA3                 db    0
.eh_frame_hdr:000000000000CFA4                 db 0B8h
.eh_frame_hdr:000000000000CFA5                 db 0D5h
.eh_frame_hdr:000000000000CFA6                 db 0FFh
.eh_frame_hdr:000000000000CFA7                 db 0FFh
.eh_frame_hdr:000000000000CFA8                 db  68h ; h
.eh_frame_hdr:000000000000CFA9                 db  1Fh
.eh_frame_hdr:000000000000CFAA                 db    0
.eh_frame_hdr:000000000000CFAB                 db    0
.eh_frame_hdr:000000000000CFAC                 db  18h
.eh_frame_hdr:000000000000CFAD                 db 0D6h
.eh_frame_hdr:000000000000CFAE                 db 0FFh
.eh_frame_hdr:000000000000CFAF                 db 0FFh
.eh_frame_hdr:000000000000CFB0                 db 0A0h
.eh_frame_hdr:000000000000CFB1                 db  1Fh
.eh_frame_hdr:000000000000CFB2                 db    0
.eh_frame_hdr:000000000000CFB3                 db    0
.eh_frame_hdr:000000000000CFB4                 db  78h ; x
.eh_frame_hdr:000000000000CFB5                 db 0D6h
.eh_frame_hdr:000000000000CFB6                 db 0FFh
.eh_frame_hdr:000000000000CFB7                 db 0FFh
.eh_frame_hdr:000000000000CFB8                 db 0C0h
.eh_frame_hdr:000000000000CFB9                 db  1Fh
.eh_frame_hdr:000000000000CFBA                 db    0
.eh_frame_hdr:000000000000CFBB                 db    0
.eh_frame_hdr:000000000000CFBC                 db 0A8h
.eh_frame_hdr:000000000000CFBD                 db 0D9h
.eh_frame_hdr:000000000000CFBE                 db 0FFh
.eh_frame_hdr:000000000000CFBF                 db 0FFh
.eh_frame_hdr:000000000000CFC0                 db  0Ch
.eh_frame_hdr:000000000000CFC1                 db  20h
.eh_frame_hdr:000000000000CFC2                 db    0
.eh_frame_hdr:000000000000CFC3                 db    0
.eh_frame_hdr:000000000000CFC4                 db 0B8h
.eh_frame_hdr:000000000000CFC5                 db 0D9h
.eh_frame_hdr:000000000000CFC6                 db 0FFh
.eh_frame_hdr:000000000000CFC7                 db 0FFh
.eh_frame_hdr:000000000000CFC8                 db  20h
.eh_frame_hdr:000000000000CFC9                 db  20h
.eh_frame_hdr:000000000000CFCA                 db    0
.eh_frame_hdr:000000000000CFCB                 db    0
.eh_frame_hdr:000000000000CFCC                 db 0C8h
.eh_frame_hdr:000000000000CFCD                 db 0D9h
.eh_frame_hdr:000000000000CFCE                 db 0FFh
.eh_frame_hdr:000000000000CFCF                 db 0FFh
.eh_frame_hdr:000000000000CFD0                 db  34h ; 4
.eh_frame_hdr:000000000000CFD1                 db  20h
.eh_frame_hdr:000000000000CFD2                 db    0
.eh_frame_hdr:000000000000CFD3                 db    0
.eh_frame_hdr:000000000000CFD4                 db  68h ; h
.eh_frame_hdr:000000000000CFD5                 db 0DBh
.eh_frame_hdr:000000000000CFD6                 db 0FFh
.eh_frame_hdr:000000000000CFD7                 db 0FFh
.eh_frame_hdr:000000000000CFD8                 db  98h
.eh_frame_hdr:000000000000CFD9                 db  20h
.eh_frame_hdr:000000000000CFDA                 db    0
.eh_frame_hdr:000000000000CFDB                 db    0
.eh_frame_hdr:000000000000CFDC                 db 0B8h
.eh_frame_hdr:000000000000CFDD                 db 0DBh
.eh_frame_hdr:000000000000CFDE                 db 0FFh
.eh_frame_hdr:000000000000CFDF                 db 0FFh
.eh_frame_hdr:000000000000CFE0                 db 0D0h
.eh_frame_hdr:000000000000CFE1                 db  20h
.eh_frame_hdr:000000000000CFE2                 db    0
.eh_frame_hdr:000000000000CFE3                 db    0
.eh_frame_hdr:000000000000CFE4                 db  48h ; H
.eh_frame_hdr:000000000000CFE5                 db 0DEh
.eh_frame_hdr:000000000000CFE6                 db 0FFh
.eh_frame_hdr:000000000000CFE7                 db 0FFh
.eh_frame_hdr:000000000000CFE8                 db 0E4h
.eh_frame_hdr:000000000000CFE9                 db  20h
.eh_frame_hdr:000000000000CFEA                 db    0
.eh_frame_hdr:000000000000CFEB                 db    0
.eh_frame_hdr:000000000000CFEC                 db  88h
.eh_frame_hdr:000000000000CFED                 db 0E0h
.eh_frame_hdr:000000000000CFEE                 db 0FFh
.eh_frame_hdr:000000000000CFEF                 db 0FFh
.eh_frame_hdr:000000000000CFF0                 db  18h
.eh_frame_hdr:000000000000CFF1                 db  21h ; !
.eh_frame_hdr:000000000000CFF2                 db    0
.eh_frame_hdr:000000000000CFF3                 db    0
.eh_frame_hdr:000000000000CFF4                 db  98h
.eh_frame_hdr:000000000000CFF5                 db 0E0h
.eh_frame_hdr:000000000000CFF6                 db 0FFh
.eh_frame_hdr:000000000000CFF7                 db 0FFh
.eh_frame_hdr:000000000000CFF8                 db  30h ; 0
.eh_frame_hdr:000000000000CFF9                 db  21h ; !
.eh_frame_hdr:000000000000CFFA                 db    0
.eh_frame_hdr:000000000000CFFB                 db    0
.eh_frame_hdr:000000000000CFFC                 db  18h
.eh_frame_hdr:000000000000CFFD                 db 0E1h
.eh_frame_hdr:000000000000CFFE                 db 0FFh
.eh_frame_hdr:000000000000CFFF                 db 0FFh
.eh_frame_hdr:000000000000D000                 db  68h ; h
.eh_frame_hdr:000000000000D001                 db  21h ; !
.eh_frame_hdr:000000000000D002                 db    0
.eh_frame_hdr:000000000000D003                 db    0
.eh_frame_hdr:000000000000D004                 db  98h
.eh_frame_hdr:000000000000D005                 db 0E3h
.eh_frame_hdr:000000000000D006                 db 0FFh
.eh_frame_hdr:000000000000D007                 db 0FFh
.eh_frame_hdr:000000000000D008                 db 0A0h
.eh_frame_hdr:000000000000D009                 db  21h ; !
.eh_frame_hdr:000000000000D00A                 db    0
.eh_frame_hdr:000000000000D00B                 db    0
.eh_frame_hdr:000000000000D00C                 db  38h ; 8
.eh_frame_hdr:000000000000D00D                 db 0E4h
.eh_frame_hdr:000000000000D00E                 db 0FFh
.eh_frame_hdr:000000000000D00F                 db 0FFh
.eh_frame_hdr:000000000000D010                 db 0D0h
.eh_frame_hdr:000000000000D011                 db  21h ; !
.eh_frame_hdr:000000000000D012                 db    0
.eh_frame_hdr:000000000000D013                 db    0
.eh_frame_hdr:000000000000D014                 db 0A8h
.eh_frame_hdr:000000000000D015                 db 0E4h
.eh_frame_hdr:000000000000D016                 db 0FFh
.eh_frame_hdr:000000000000D017                 db 0FFh
.eh_frame_hdr:000000000000D018                 db  18h
.eh_frame_hdr:000000000000D019                 db  22h ; "
.eh_frame_hdr:000000000000D01A                 db    0
.eh_frame_hdr:000000000000D01B                 db    0
.eh_frame_hdr:000000000000D01C                 db 0B8h
.eh_frame_hdr:000000000000D01D                 db 0E4h
.eh_frame_hdr:000000000000D01E                 db 0FFh
.eh_frame_hdr:000000000000D01F                 db 0FFh
.eh_frame_hdr:000000000000D020                 db  30h ; 0
.eh_frame_hdr:000000000000D021                 db  22h ; "
.eh_frame_hdr:000000000000D022                 db    0
.eh_frame_hdr:000000000000D023                 db    0
.eh_frame_hdr:000000000000D023 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000D023
LOAD:000000000000D024 ; ===========================================================================
LOAD:000000000000D024
LOAD:000000000000D024 ; Segment type: Pure code
LOAD:000000000000D024 ; Segment permissions: Read/Execute
LOAD:000000000000D024 LOAD            segment byte public 'CODE' use64
LOAD:000000000000D024                 assume cs:LOAD
LOAD:000000000000D024                 ;org 0D024h
LOAD:000000000000D024                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000D024                 align 8
LOAD:000000000000D024 LOAD            ends
LOAD:000000000000D024
.eh_frame:000000000000D028 ; ===========================================================================
.eh_frame:000000000000D028
.eh_frame:000000000000D028 ; Segment type: Pure data
.eh_frame:000000000000D028 ; Segment permissions: Read
.eh_frame:000000000000D028 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000D028                 assume cs:_eh_frame
.eh_frame:000000000000D028                 ;org 0D028h
.eh_frame:000000000000D028                 db  14h
.eh_frame:000000000000D029                 db    0
.eh_frame:000000000000D02A                 db    0
.eh_frame:000000000000D02B                 db    0
.eh_frame:000000000000D02C                 db    0
.eh_frame:000000000000D02D                 db    0
.eh_frame:000000000000D02E                 db    0
.eh_frame:000000000000D02F                 db    0
.eh_frame:000000000000D030                 db    1
.eh_frame:000000000000D031                 db  7Ah ; z
.eh_frame:000000000000D032                 db  52h ; R
.eh_frame:000000000000D033                 db    0
.eh_frame:000000000000D034                 db    1
.eh_frame:000000000000D035                 db  78h ; x
.eh_frame:000000000000D036                 db  10h
.eh_frame:000000000000D037                 db    1
.eh_frame:000000000000D038                 db  1Bh
.eh_frame:000000000000D039                 db  0Ch
.eh_frame:000000000000D03A                 db    7
.eh_frame:000000000000D03B                 db    8
.eh_frame:000000000000D03C                 db  90h
.eh_frame:000000000000D03D                 db    1
.eh_frame:000000000000D03E                 db    7
.eh_frame:000000000000D03F                 db  10h
.eh_frame:000000000000D040                 db  14h
.eh_frame:000000000000D041                 db    0
.eh_frame:000000000000D042                 db    0
.eh_frame:000000000000D043                 db    0
.eh_frame:000000000000D044                 db  1Ch
.eh_frame:000000000000D045                 db    0
.eh_frame:000000000000D046                 db    0
.eh_frame:000000000000D047                 db    0
.eh_frame:000000000000D048                 db  68h ; h
.eh_frame:000000000000D049                 db  5Ah ; Z
.eh_frame:000000000000D04A                 db 0FFh
.eh_frame:000000000000D04B                 db 0FFh
.eh_frame:000000000000D04C                 db  2Bh ; +
.eh_frame:000000000000D04D                 db    0
.eh_frame:000000000000D04E                 db    0
.eh_frame:000000000000D04F                 db    0
.eh_frame:000000000000D050                 db    0
.eh_frame:000000000000D051                 db    0
.eh_frame:000000000000D052                 db    0
.eh_frame:000000000000D053                 db    0
.eh_frame:000000000000D054                 db    0
.eh_frame:000000000000D055                 db    0
.eh_frame:000000000000D056                 db    0
.eh_frame:000000000000D057                 db    0
.eh_frame:000000000000D058                 db  14h
.eh_frame:000000000000D059                 db    0
.eh_frame:000000000000D05A                 db    0
.eh_frame:000000000000D05B                 db    0
.eh_frame:000000000000D05C                 db    0
.eh_frame:000000000000D05D                 db    0
.eh_frame:000000000000D05E                 db    0
.eh_frame:000000000000D05F                 db    0
.eh_frame:000000000000D060                 db    1
.eh_frame:000000000000D061                 db  7Ah ; z
.eh_frame:000000000000D062                 db  52h ; R
.eh_frame:000000000000D063                 db    0
.eh_frame:000000000000D064                 db    1
.eh_frame:000000000000D065                 db  78h ; x
.eh_frame:000000000000D066                 db  10h
.eh_frame:000000000000D067                 db    1
.eh_frame:000000000000D068                 db  1Bh
.eh_frame:000000000000D069                 db  0Ch
.eh_frame:000000000000D06A                 db    7
.eh_frame:000000000000D06B                 db    8
.eh_frame:000000000000D06C                 db  90h
.eh_frame:000000000000D06D                 db    1
.eh_frame:000000000000D06E                 db    0
.eh_frame:000000000000D06F                 db    0
.eh_frame:000000000000D070                 db  24h ; $
.eh_frame:000000000000D071                 db    0
.eh_frame:000000000000D072                 db    0
.eh_frame:000000000000D073                 db    0
.eh_frame:000000000000D074                 db  1Ch
.eh_frame:000000000000D075                 db    0
.eh_frame:000000000000D076                 db    0
.eh_frame:000000000000D077                 db    0
.eh_frame:000000000000D078                 db  18h
.eh_frame:000000000000D079                 db  4Dh ; M
.eh_frame:000000000000D07A                 db 0FFh
.eh_frame:000000000000D07B                 db 0FFh
.eh_frame:000000000000D07C                 db  20h
.eh_frame:000000000000D07D                 db    5
.eh_frame:000000000000D07E                 db    0
.eh_frame:000000000000D07F                 db    0
.eh_frame:000000000000D080                 db    0
.eh_frame:000000000000D081                 db  0Eh
.eh_frame:000000000000D082                 db  10h
.eh_frame:000000000000D083                 db  46h ; F
.eh_frame:000000000000D084                 db  0Eh
.eh_frame:000000000000D085                 db  18h
.eh_frame:000000000000D086                 db  4Ah ; J
.eh_frame:000000000000D087                 db  0Fh
.eh_frame:000000000000D088                 db  0Bh
.eh_frame:000000000000D089                 db  77h ; w
.eh_frame:000000000000D08A                 db    8
.eh_frame:000000000000D08B                 db  80h
.eh_frame:000000000000D08C                 db    0
.eh_frame:000000000000D08D                 db  3Fh ; ?
.eh_frame:000000000000D08E                 db  1Ah
.eh_frame:000000000000D08F                 db  3Bh ; ;
.eh_frame:000000000000D090                 db  2Ah ; *
.eh_frame:000000000000D091                 db  33h ; 3
.eh_frame:000000000000D092                 db  24h ; $
.eh_frame:000000000000D093                 db  22h ; "
.eh_frame:000000000000D094                 db    0
.eh_frame:000000000000D095                 db    0
.eh_frame:000000000000D096                 db    0
.eh_frame:000000000000D097                 db    0
.eh_frame:000000000000D098                 db  14h
.eh_frame:000000000000D099                 db    0
.eh_frame:000000000000D09A                 db    0
.eh_frame:000000000000D09B                 db    0
.eh_frame:000000000000D09C                 db  44h ; D
.eh_frame:000000000000D09D                 db    0
.eh_frame:000000000000D09E                 db    0
.eh_frame:000000000000D09F                 db    0
.eh_frame:000000000000D0A0                 db  10h
.eh_frame:000000000000D0A1                 db  52h ; R
.eh_frame:000000000000D0A2                 db 0FFh
.eh_frame:000000000000D0A3                 db 0FFh
.eh_frame:000000000000D0A4                 db    8
.eh_frame:000000000000D0A5                 db    0
.eh_frame:000000000000D0A6                 db    0
.eh_frame:000000000000D0A7                 db    0
.eh_frame:000000000000D0A8                 db    0
.eh_frame:000000000000D0A9                 db    0
.eh_frame:000000000000D0AA                 db    0
.eh_frame:000000000000D0AB                 db    0
.eh_frame:000000000000D0AC                 db    0
.eh_frame:000000000000D0AD                 db    0
.eh_frame:000000000000D0AE                 db    0
.eh_frame:000000000000D0AF                 db    0
.eh_frame:000000000000D0B0                 db  1Ch
.eh_frame:000000000000D0B1                 db    0
.eh_frame:000000000000D0B2                 db    0
.eh_frame:000000000000D0B3                 db    0
.eh_frame:000000000000D0B4                 db  5Ch ; \
.eh_frame:000000000000D0B5                 db    0
.eh_frame:000000000000D0B6                 db    0
.eh_frame:000000000000D0B7                 db    0
.eh_frame:000000000000D0B8                 db    8
.eh_frame:000000000000D0B9                 db  5Bh ; [
.eh_frame:000000000000D0BA                 db 0FFh
.eh_frame:000000000000D0BB                 db 0FFh
.eh_frame:000000000000D0BC                 db  77h ; w
.eh_frame:000000000000D0BD                 db    0
.eh_frame:000000000000D0BE                 db    0
.eh_frame:000000000000D0BF                 db    0
.eh_frame:000000000000D0C0                 db    0
.eh_frame:000000000000D0C1                 db  44h ; D
.eh_frame:000000000000D0C2                 db  0Eh
.eh_frame:000000000000D0C3                 db  10h
.eh_frame:000000000000D0C4                 db  61h ; a
.eh_frame:000000000000D0C5                 db  0Ah
.eh_frame:000000000000D0C6                 db  0Eh
.eh_frame:000000000000D0C7                 db    8
.eh_frame:000000000000D0C8                 db  4Bh ; K
.eh_frame:000000000000D0C9                 db  0Bh
.eh_frame:000000000000D0CA                 db  7Ch ; |
.eh_frame:000000000000D0CB                 db  0Ah
.eh_frame:000000000000D0CC                 db  0Eh
.eh_frame:000000000000D0CD                 db    8
.eh_frame:000000000000D0CE                 db  44h ; D
.eh_frame:000000000000D0CF                 db  0Bh
.eh_frame:000000000000D0D0                 db  6Ch ; l
.eh_frame:000000000000D0D1                 db    0
.eh_frame:000000000000D0D2                 db    0
.eh_frame:000000000000D0D3                 db    0
.eh_frame:000000000000D0D4                 db  7Ch ; |
.eh_frame:000000000000D0D5                 db    0
.eh_frame:000000000000D0D6                 db    0
.eh_frame:000000000000D0D7                 db    0
.eh_frame:000000000000D0D8                 db  68h ; h
.eh_frame:000000000000D0D9                 db  5Bh ; [
.eh_frame:000000000000D0DA                 db 0FFh
.eh_frame:000000000000D0DB                 db 0FFh
.eh_frame:000000000000D0DC                 db  73h ; s
.eh_frame:000000000000D0DD                 db  0Ah
.eh_frame:000000000000D0DE                 db    0
.eh_frame:000000000000D0DF                 db    0
.eh_frame:000000000000D0E0                 db    0
.eh_frame:000000000000D0E1                 db  42h ; B
.eh_frame:000000000000D0E2                 db  0Eh
.eh_frame:000000000000D0E3                 db  10h
.eh_frame:000000000000D0E4                 db  8Fh
.eh_frame:000000000000D0E5                 db    2
.eh_frame:000000000000D0E6                 db  42h ; B
.eh_frame:000000000000D0E7                 db  0Eh
.eh_frame:000000000000D0E8                 db  18h
.eh_frame:000000000000D0E9                 db  8Eh
.eh_frame:000000000000D0EA                 db    3
.eh_frame:000000000000D0EB                 db  45h ; E
.eh_frame:000000000000D0EC                 db  0Eh
.eh_frame:000000000000D0ED                 db  20h
.eh_frame:000000000000D0EE                 db  8Dh
.eh_frame:000000000000D0EF                 db    4
.eh_frame:000000000000D0F0                 db  42h ; B
.eh_frame:000000000000D0F1                 db  0Eh
.eh_frame:000000000000D0F2                 db  28h ; (
.eh_frame:000000000000D0F3                 db  8Ch
.eh_frame:000000000000D0F4                 db    5
.eh_frame:000000000000D0F5                 db  44h ; D
.eh_frame:000000000000D0F6                 db  0Eh
.eh_frame:000000000000D0F7                 db  30h ; 0
.eh_frame:000000000000D0F8                 db  86h
.eh_frame:000000000000D0F9                 db    6
.eh_frame:000000000000D0FA                 db  41h ; A
.eh_frame:000000000000D0FB                 db  0Eh
.eh_frame:000000000000D0FC                 db  38h ; 8
.eh_frame:000000000000D0FD                 db  83h
.eh_frame:000000000000D0FE                 db    7
.eh_frame:000000000000D0FF                 db  53h ; S
.eh_frame:000000000000D100                 db  0Eh
.eh_frame:000000000000D101                 db  90h
.eh_frame:000000000000D102                 db    3
.eh_frame:000000000000D103                 db    3
.eh_frame:000000000000D104                 db  1Bh
.eh_frame:000000000000D105                 db    1
.eh_frame:000000000000D106                 db  0Eh
.eh_frame:000000000000D107                 db  98h
.eh_frame:000000000000D108                 db    3
.eh_frame:000000000000D109                 db  49h ; I
.eh_frame:000000000000D10A                 db  0Eh
.eh_frame:000000000000D10B                 db 0A0h
.eh_frame:000000000000D10C                 db    3
.eh_frame:000000000000D10D                 db  62h ; b
.eh_frame:000000000000D10E                 db  0Eh
.eh_frame:000000000000D10F                 db  98h
.eh_frame:000000000000D110                 db    3
.eh_frame:000000000000D111                 db  41h ; A
.eh_frame:000000000000D112                 db  0Eh
.eh_frame:000000000000D113                 db  90h
.eh_frame:000000000000D114                 db    3
.eh_frame:000000000000D115                 db  72h ; r
.eh_frame:000000000000D116                 db  0Ah
.eh_frame:000000000000D117                 db  0Eh
.eh_frame:000000000000D118                 db  38h ; 8
.eh_frame:000000000000D119                 db  41h ; A
.eh_frame:000000000000D11A                 db  0Eh
.eh_frame:000000000000D11B                 db  30h ; 0
.eh_frame:000000000000D11C                 db  41h ; A
.eh_frame:000000000000D11D                 db  0Eh
.eh_frame:000000000000D11E                 db  28h ; (
.eh_frame:000000000000D11F                 db  42h ; B
.eh_frame:000000000000D120                 db  0Eh
.eh_frame:000000000000D121                 db  20h
.eh_frame:000000000000D122                 db  42h ; B
.eh_frame:000000000000D123                 db  0Eh
.eh_frame:000000000000D124                 db  18h
.eh_frame:000000000000D125                 db  42h ; B
.eh_frame:000000000000D126                 db  0Eh
.eh_frame:000000000000D127                 db  10h
.eh_frame:000000000000D128                 db  42h ; B
.eh_frame:000000000000D129                 db  0Eh
.eh_frame:000000000000D12A                 db    8
.eh_frame:000000000000D12B                 db  4Ah ; J
.eh_frame:000000000000D12C                 db  0Bh
.eh_frame:000000000000D12D                 db    2
.eh_frame:000000000000D12E                 db  83h
.eh_frame:000000000000D12F                 db  0Eh
.eh_frame:000000000000D130                 db  98h
.eh_frame:000000000000D131                 db    3
.eh_frame:000000000000D132                 db  42h ; B
.eh_frame:000000000000D133                 db  0Eh
.eh_frame:000000000000D134                 db 0A0h
.eh_frame:000000000000D135                 db    3
.eh_frame:000000000000D136                 db  4Ah ; J
.eh_frame:000000000000D137                 db  0Eh
.eh_frame:000000000000D138                 db  98h
.eh_frame:000000000000D139                 db    3
.eh_frame:000000000000D13A                 db  41h ; A
.eh_frame:000000000000D13B                 db  0Eh
.eh_frame:000000000000D13C                 db  90h
.eh_frame:000000000000D13D                 db    3
.eh_frame:000000000000D13E                 db    0
.eh_frame:000000000000D13F                 db    0
.eh_frame:000000000000D140                 db  28h ; (
.eh_frame:000000000000D141                 db    0
.eh_frame:000000000000D142                 db    0
.eh_frame:000000000000D143                 db    0
.eh_frame:000000000000D144                 db 0ECh
.eh_frame:000000000000D145                 db    0
.eh_frame:000000000000D146                 db    0
.eh_frame:000000000000D147                 db    0
.eh_frame:000000000000D148                 db  78h ; x
.eh_frame:000000000000D149                 db  65h ; e
.eh_frame:000000000000D14A                 db 0FFh
.eh_frame:000000000000D14B                 db 0FFh
.eh_frame:000000000000D14C                 db  52h ; R
.eh_frame:000000000000D14D                 db    4
.eh_frame:000000000000D14E                 db    0
.eh_frame:000000000000D14F                 db    0
.eh_frame:000000000000D150                 db    0
.eh_frame:000000000000D151                 db  42h ; B
.eh_frame:000000000000D152                 db  0Eh
.eh_frame:000000000000D153                 db  10h
.eh_frame:000000000000D154                 db  8Dh
.eh_frame:000000000000D155                 db    2
.eh_frame:000000000000D156                 db  42h ; B
.eh_frame:000000000000D157                 db  0Eh
.eh_frame:000000000000D158                 db  18h
.eh_frame:000000000000D159                 db  8Ch
.eh_frame:000000000000D15A                 db    3
.eh_frame:000000000000D15B                 db  46h ; F
.eh_frame:000000000000D15C                 db  0Eh
.eh_frame:000000000000D15D                 db  20h
.eh_frame:000000000000D15E                 db  86h
.eh_frame:000000000000D15F                 db    4
.eh_frame:000000000000D160                 db  41h ; A
.eh_frame:000000000000D161                 db  0Eh
.eh_frame:000000000000D162                 db  28h ; (
.eh_frame:000000000000D163                 db  83h
.eh_frame:000000000000D164                 db    5
.eh_frame:000000000000D165                 db  49h ; I
.eh_frame:000000000000D166                 db  0Eh
.eh_frame:000000000000D167                 db 0B0h
.eh_frame:000000000000D168                 db    1
.eh_frame:000000000000D169                 db    0
.eh_frame:000000000000D16A                 db    0
.eh_frame:000000000000D16B                 db    0
.eh_frame:000000000000D16C                 db  58h ; X
.eh_frame:000000000000D16D                 db    0
.eh_frame:000000000000D16E                 db    0
.eh_frame:000000000000D16F                 db    0
.eh_frame:000000000000D170                 db  18h
.eh_frame:000000000000D171                 db    1
.eh_frame:000000000000D172                 db    0
.eh_frame:000000000000D173                 db    0
.eh_frame:000000000000D174                 db  4Ch ; L
.eh_frame:000000000000D175                 db  51h ; Q
.eh_frame:000000000000D176                 db 0FFh
.eh_frame:000000000000D177                 db 0FFh
.eh_frame:000000000000D178                 db 0E5h
.eh_frame:000000000000D179                 db    7
.eh_frame:000000000000D17A                 db    0
.eh_frame:000000000000D17B                 db    0
.eh_frame:000000000000D17C                 db    0
.eh_frame:000000000000D17D                 db  42h ; B
.eh_frame:000000000000D17E                 db  0Eh
.eh_frame:000000000000D17F                 db  10h
.eh_frame:000000000000D180                 db  8Fh
.eh_frame:000000000000D181                 db    2
.eh_frame:000000000000D182                 db  42h ; B
.eh_frame:000000000000D183                 db  0Eh
.eh_frame:000000000000D184                 db  18h
.eh_frame:000000000000D185                 db  8Eh
.eh_frame:000000000000D186                 db    3
.eh_frame:000000000000D187                 db  45h ; E
.eh_frame:000000000000D188                 db  0Eh
.eh_frame:000000000000D189                 db  20h
.eh_frame:000000000000D18A                 db  8Dh
.eh_frame:000000000000D18B                 db    4
.eh_frame:000000000000D18C                 db  42h ; B
.eh_frame:000000000000D18D                 db  0Eh
.eh_frame:000000000000D18E                 db  28h ; (
.eh_frame:000000000000D18F                 db  8Ch
.eh_frame:000000000000D190                 db    5
.eh_frame:000000000000D191                 db  44h ; D
.eh_frame:000000000000D192                 db  0Eh
.eh_frame:000000000000D193                 db  30h ; 0
.eh_frame:000000000000D194                 db  86h
.eh_frame:000000000000D195                 db    6
.eh_frame:000000000000D196                 db  41h ; A
.eh_frame:000000000000D197                 db  0Eh
.eh_frame:000000000000D198                 db  38h ; 8
.eh_frame:000000000000D199                 db  83h
.eh_frame:000000000000D19A                 db    7
.eh_frame:000000000000D19B                 db  52h ; R
.eh_frame:000000000000D19C                 db  0Eh
.eh_frame:000000000000D19D                 db  90h
.eh_frame:000000000000D19E                 db    2
.eh_frame:000000000000D19F                 db    3
.eh_frame:000000000000D1A0                 db  96h
.eh_frame:000000000000D1A1                 db    1
.eh_frame:000000000000D1A2                 db  0Ah
.eh_frame:000000000000D1A3                 db  0Eh
.eh_frame:000000000000D1A4                 db  98h
.eh_frame:000000000000D1A5                 db    2
.eh_frame:000000000000D1A6                 db  50h ; P
.eh_frame:000000000000D1A7                 db  0Eh
.eh_frame:000000000000D1A8                 db 0A0h
.eh_frame:000000000000D1A9                 db    2
.eh_frame:000000000000D1AA                 db  70h ; p
.eh_frame:000000000000D1AB                 db  0Bh
.eh_frame:000000000000D1AC                 db    3
.eh_frame:000000000000D1AD                 db  36h ; 6
.eh_frame:000000000000D1AE                 db    3
.eh_frame:000000000000D1AF                 db  0Ah
.eh_frame:000000000000D1B0                 db  0Eh
.eh_frame:000000000000D1B1                 db  38h ; 8
.eh_frame:000000000000D1B2                 db  41h ; A
.eh_frame:000000000000D1B3                 db  0Eh
.eh_frame:000000000000D1B4                 db  30h ; 0
.eh_frame:000000000000D1B5                 db  41h ; A
.eh_frame:000000000000D1B6                 db  0Eh
.eh_frame:000000000000D1B7                 db  28h ; (
.eh_frame:000000000000D1B8                 db  42h ; B
.eh_frame:000000000000D1B9                 db  0Eh
.eh_frame:000000000000D1BA                 db  20h
.eh_frame:000000000000D1BB                 db  42h ; B
.eh_frame:000000000000D1BC                 db  0Eh
.eh_frame:000000000000D1BD                 db  18h
.eh_frame:000000000000D1BE                 db  42h ; B
.eh_frame:000000000000D1BF                 db  0Eh
.eh_frame:000000000000D1C0                 db  10h
.eh_frame:000000000000D1C1                 db  42h ; B
.eh_frame:000000000000D1C2                 db  0Eh
.eh_frame:000000000000D1C3                 db    8
.eh_frame:000000000000D1C4                 db  41h ; A
.eh_frame:000000000000D1C5                 db  0Bh
.eh_frame:000000000000D1C6                 db    0
.eh_frame:000000000000D1C7                 db    0
.eh_frame:000000000000D1C8                 db  10h
.eh_frame:000000000000D1C9                 db    0
.eh_frame:000000000000D1CA                 db    0
.eh_frame:000000000000D1CB                 db    0
.eh_frame:000000000000D1CC                 db  74h ; t
.eh_frame:000000000000D1CD                 db    1
.eh_frame:000000000000D1CE                 db    0
.eh_frame:000000000000D1CF                 db    0
.eh_frame:000000000000D1D0                 db  50h ; P
.eh_frame:000000000000D1D1                 db  69h ; i
.eh_frame:000000000000D1D2                 db 0FFh
.eh_frame:000000000000D1D3                 db 0FFh
.eh_frame:000000000000D1D4                 db  18h
.eh_frame:000000000000D1D5                 db    0
.eh_frame:000000000000D1D6                 db    0
.eh_frame:000000000000D1D7                 db    0
.eh_frame:000000000000D1D8                 db    0
.eh_frame:000000000000D1D9                 db    0
.eh_frame:000000000000D1DA                 db    0
.eh_frame:000000000000D1DB                 db    0
.eh_frame:000000000000D1DC                 db  28h ; (
.eh_frame:000000000000D1DD                 db    0
.eh_frame:000000000000D1DE                 db    0
.eh_frame:000000000000D1DF                 db    0
.eh_frame:000000000000D1E0                 db  88h
.eh_frame:000000000000D1E1                 db    1
.eh_frame:000000000000D1E2                 db    0
.eh_frame:000000000000D1E3                 db    0
.eh_frame:000000000000D1E4                 db  5Ch ; \
.eh_frame:000000000000D1E5                 db  69h ; i
.eh_frame:000000000000D1E6                 db 0FFh
.eh_frame:000000000000D1E7                 db 0FFh
.eh_frame:000000000000D1E8                 db  58h ; X
.eh_frame:000000000000D1E9                 db    0
.eh_frame:000000000000D1EA                 db    0
.eh_frame:000000000000D1EB                 db    0
.eh_frame:000000000000D1EC                 db    0
.eh_frame:000000000000D1ED                 db  42h ; B
.eh_frame:000000000000D1EE                 db  0Eh
.eh_frame:000000000000D1EF                 db  10h
.eh_frame:000000000000D1F0                 db  8Ch
.eh_frame:000000000000D1F1                 db    2
.eh_frame:000000000000D1F2                 db  41h ; A
.eh_frame:000000000000D1F3                 db  0Eh
.eh_frame:000000000000D1F4                 db  18h
.eh_frame:000000000000D1F5                 db  86h
.eh_frame:000000000000D1F6                 db    3
.eh_frame:000000000000D1F7                 db  44h ; D
.eh_frame:000000000000D1F8                 db  0Eh
.eh_frame:000000000000D1F9                 db  20h
.eh_frame:000000000000D1FA                 db  83h
.eh_frame:000000000000D1FB                 db    4
.eh_frame:000000000000D1FC                 db    2
.eh_frame:000000000000D1FD                 db  4Dh ; M
.eh_frame:000000000000D1FE                 db  0Eh
.eh_frame:000000000000D1FF                 db  18h
.eh_frame:000000000000D200                 db  41h ; A
.eh_frame:000000000000D201                 db  0Eh
.eh_frame:000000000000D202                 db  10h
.eh_frame:000000000000D203                 db  42h ; B
.eh_frame:000000000000D204                 db  0Eh
.eh_frame:000000000000D205                 db    8
.eh_frame:000000000000D206                 db    0
.eh_frame:000000000000D207                 db    0
.eh_frame:000000000000D208                 db  10h
.eh_frame:000000000000D209                 db    0
.eh_frame:000000000000D20A                 db    0
.eh_frame:000000000000D20B                 db    0
.eh_frame:000000000000D20C                 db 0B4h
.eh_frame:000000000000D20D                 db    1
.eh_frame:000000000000D20E                 db    0
.eh_frame:000000000000D20F                 db    0
.eh_frame:000000000000D210                 db  90h
.eh_frame:000000000000D211                 db  69h ; i
.eh_frame:000000000000D212                 db 0FFh
.eh_frame:000000000000D213                 db 0FFh
.eh_frame:000000000000D214                 db  11h
.eh_frame:000000000000D215                 db    0
.eh_frame:000000000000D216                 db    0
.eh_frame:000000000000D217                 db    0
.eh_frame:000000000000D218                 db    0
.eh_frame:000000000000D219                 db    0
.eh_frame:000000000000D21A                 db    0
.eh_frame:000000000000D21B                 db    0
.eh_frame:000000000000D21C                 db  48h ; H
.eh_frame:000000000000D21D                 db    0
.eh_frame:000000000000D21E                 db    0
.eh_frame:000000000000D21F                 db    0
.eh_frame:000000000000D220                 db 0C8h
.eh_frame:000000000000D221                 db    1
.eh_frame:000000000000D222                 db    0
.eh_frame:000000000000D223                 db    0
.eh_frame:000000000000D224                 db  9Ch
.eh_frame:000000000000D225                 db  69h ; i
.eh_frame:000000000000D226                 db 0FFh
.eh_frame:000000000000D227                 db 0FFh
.eh_frame:000000000000D228                 db  61h ; a
.eh_frame:000000000000D229                 db    1
.eh_frame:000000000000D22A                 db    0
.eh_frame:000000000000D22B                 db    0
.eh_frame:000000000000D22C                 db    0
.eh_frame:000000000000D22D                 db  42h ; B
.eh_frame:000000000000D22E                 db  0Eh
.eh_frame:000000000000D22F                 db  10h
.eh_frame:000000000000D230                 db  8Fh
.eh_frame:000000000000D231                 db    2
.eh_frame:000000000000D232                 db  42h ; B
.eh_frame:000000000000D233                 db  0Eh
.eh_frame:000000000000D234                 db  18h
.eh_frame:000000000000D235                 db  8Eh
.eh_frame:000000000000D236                 db    3
.eh_frame:000000000000D237                 db  45h ; E
.eh_frame:000000000000D238                 db  0Eh
.eh_frame:000000000000D239                 db  20h
.eh_frame:000000000000D23A                 db  8Dh
.eh_frame:000000000000D23B                 db    4
.eh_frame:000000000000D23C                 db  42h ; B
.eh_frame:000000000000D23D                 db  0Eh
.eh_frame:000000000000D23E                 db  28h ; (
.eh_frame:000000000000D23F                 db  8Ch
.eh_frame:000000000000D240                 db    5
.eh_frame:000000000000D241                 db  44h ; D
.eh_frame:000000000000D242                 db  0Eh
.eh_frame:000000000000D243                 db  30h ; 0
.eh_frame:000000000000D244                 db  86h
.eh_frame:000000000000D245                 db    6
.eh_frame:000000000000D246                 db  41h ; A
.eh_frame:000000000000D247                 db  0Eh
.eh_frame:000000000000D248                 db  38h ; 8
.eh_frame:000000000000D249                 db  83h
.eh_frame:000000000000D24A                 db    7
.eh_frame:000000000000D24B                 db  4Fh ; O
.eh_frame:000000000000D24C                 db  0Eh
.eh_frame:000000000000D24D                 db  80h
.eh_frame:000000000000D24E                 db    3
.eh_frame:000000000000D24F                 db    2
.eh_frame:000000000000D250                 db 0C1h
.eh_frame:000000000000D251                 db  0Ah
.eh_frame:000000000000D252                 db  0Eh
.eh_frame:000000000000D253                 db  38h ; 8
.eh_frame:000000000000D254                 db  41h ; A
.eh_frame:000000000000D255                 db  0Eh
.eh_frame:000000000000D256                 db  30h ; 0
.eh_frame:000000000000D257                 db  41h ; A
.eh_frame:000000000000D258                 db  0Eh
.eh_frame:000000000000D259                 db  28h ; (
.eh_frame:000000000000D25A                 db  42h ; B
.eh_frame:000000000000D25B                 db  0Eh
.eh_frame:000000000000D25C                 db  20h
.eh_frame:000000000000D25D                 db  42h ; B
.eh_frame:000000000000D25E                 db  0Eh
.eh_frame:000000000000D25F                 db  18h
.eh_frame:000000000000D260                 db  42h ; B
.eh_frame:000000000000D261                 db  0Eh
.eh_frame:000000000000D262                 db  10h
.eh_frame:000000000000D263                 db  42h ; B
.eh_frame:000000000000D264                 db  0Eh
.eh_frame:000000000000D265                 db    8
.eh_frame:000000000000D266                 db  46h ; F
.eh_frame:000000000000D267                 db  0Bh
.eh_frame:000000000000D268                 db  44h ; D
.eh_frame:000000000000D269                 db    0
.eh_frame:000000000000D26A                 db    0
.eh_frame:000000000000D26B                 db    0
.eh_frame:000000000000D26C                 db  14h
.eh_frame:000000000000D26D                 db    2
.eh_frame:000000000000D26E                 db    0
.eh_frame:000000000000D26F                 db    0
.eh_frame:000000000000D270                 db 0C0h
.eh_frame:000000000000D271                 db  6Ah ; j
.eh_frame:000000000000D272                 db 0FFh
.eh_frame:000000000000D273                 db 0FFh
.eh_frame:000000000000D274                 db  52h ; R
.eh_frame:000000000000D275                 db    1
.eh_frame:000000000000D276                 db    0
.eh_frame:000000000000D277                 db    0
.eh_frame:000000000000D278                 db    0
.eh_frame:000000000000D279                 db  42h ; B
.eh_frame:000000000000D27A                 db  0Eh
.eh_frame:000000000000D27B                 db  10h
.eh_frame:000000000000D27C                 db  8Eh
.eh_frame:000000000000D27D                 db    2
.eh_frame:000000000000D27E                 db  42h ; B
.eh_frame:000000000000D27F                 db  0Eh
.eh_frame:000000000000D280                 db  18h
.eh_frame:000000000000D281                 db  8Dh
.eh_frame:000000000000D282                 db    3
.eh_frame:000000000000D283                 db  42h ; B
.eh_frame:000000000000D284                 db  0Eh
.eh_frame:000000000000D285                 db  20h
.eh_frame:000000000000D286                 db  8Ch
.eh_frame:000000000000D287                 db    4
.eh_frame:000000000000D288                 db  41h ; A
.eh_frame:000000000000D289                 db  0Eh
.eh_frame:000000000000D28A                 db  28h ; (
.eh_frame:000000000000D28B                 db  86h
.eh_frame:000000000000D28C                 db    5
.eh_frame:000000000000D28D                 db  44h ; D
.eh_frame:000000000000D28E                 db  0Eh
.eh_frame:000000000000D28F                 db  30h ; 0
.eh_frame:000000000000D290                 db  83h
.eh_frame:000000000000D291                 db    6
.eh_frame:000000000000D292                 db  4Ch ; L
.eh_frame:000000000000D293                 db  0Eh
.eh_frame:000000000000D294                 db 0E0h
.eh_frame:000000000000D295                 db    2
.eh_frame:000000000000D296                 db    2
.eh_frame:000000000000D297                 db 0B2h
.eh_frame:000000000000D298                 db  0Ah
.eh_frame:000000000000D299                 db  0Eh
.eh_frame:000000000000D29A                 db  30h ; 0
.eh_frame:000000000000D29B                 db  41h ; A
.eh_frame:000000000000D29C                 db  0Eh
.eh_frame:000000000000D29D                 db  28h ; (
.eh_frame:000000000000D29E                 db  41h ; A
.eh_frame:000000000000D29F                 db  0Eh
.eh_frame:000000000000D2A0                 db  20h
.eh_frame:000000000000D2A1                 db  42h ; B
.eh_frame:000000000000D2A2                 db  0Eh
.eh_frame:000000000000D2A3                 db  18h
.eh_frame:000000000000D2A4                 db  42h ; B
.eh_frame:000000000000D2A5                 db  0Eh
.eh_frame:000000000000D2A6                 db  10h
.eh_frame:000000000000D2A7                 db  42h ; B
.eh_frame:000000000000D2A8                 db  0Eh
.eh_frame:000000000000D2A9                 db    8
.eh_frame:000000000000D2AA                 db  47h ; G
.eh_frame:000000000000D2AB                 db  0Bh
.eh_frame:000000000000D2AC                 db    0
.eh_frame:000000000000D2AD                 db    0
.eh_frame:000000000000D2AE                 db    0
.eh_frame:000000000000D2AF                 db    0
.eh_frame:000000000000D2B0                 db  5Ch ; \
.eh_frame:000000000000D2B1                 db    0
.eh_frame:000000000000D2B2                 db    0
.eh_frame:000000000000D2B3                 db    0
.eh_frame:000000000000D2B4                 db  5Ch ; \
.eh_frame:000000000000D2B5                 db    2
.eh_frame:000000000000D2B6                 db    0
.eh_frame:000000000000D2B7                 db    0
.eh_frame:000000000000D2B8                 db 0D8h
.eh_frame:000000000000D2B9                 db  6Bh ; k
.eh_frame:000000000000D2BA                 db 0FFh
.eh_frame:000000000000D2BB                 db 0FFh
.eh_frame:000000000000D2BC                 db  77h ; w
.eh_frame:000000000000D2BD                 db    0
.eh_frame:000000000000D2BE                 db    0
.eh_frame:000000000000D2BF                 db    0
.eh_frame:000000000000D2C0                 db    0
.eh_frame:000000000000D2C1                 db  42h ; B
.eh_frame:000000000000D2C2                 db  0Eh
.eh_frame:000000000000D2C3                 db  10h
.eh_frame:000000000000D2C4                 db  8Eh
.eh_frame:000000000000D2C5                 db    2
.eh_frame:000000000000D2C6                 db  42h ; B
.eh_frame:000000000000D2C7                 db  0Eh
.eh_frame:000000000000D2C8                 db  18h
.eh_frame:000000000000D2C9                 db  8Dh
.eh_frame:000000000000D2CA                 db    3
.eh_frame:000000000000D2CB                 db  45h ; E
.eh_frame:000000000000D2CC                 db  0Eh
.eh_frame:000000000000D2CD                 db  20h
.eh_frame:000000000000D2CE                 db  8Ch
.eh_frame:000000000000D2CF                 db    4
.eh_frame:000000000000D2D0                 db  41h ; A
.eh_frame:000000000000D2D1                 db  0Eh
.eh_frame:000000000000D2D2                 db  28h ; (
.eh_frame:000000000000D2D3                 db  86h
.eh_frame:000000000000D2D4                 db    5
.eh_frame:000000000000D2D5                 db  41h ; A
.eh_frame:000000000000D2D6                 db  0Eh
.eh_frame:000000000000D2D7                 db  30h ; 0
.eh_frame:000000000000D2D8                 db  83h
.eh_frame:000000000000D2D9                 db    6
.eh_frame:000000000000D2DA                 db  62h ; b
.eh_frame:000000000000D2DB                 db  0Ah
.eh_frame:000000000000D2DC                 db  0Eh
.eh_frame:000000000000D2DD                 db  28h ; (
.eh_frame:000000000000D2DE                 db  41h ; A
.eh_frame:000000000000D2DF                 db  0Eh
.eh_frame:000000000000D2E0                 db  20h
.eh_frame:000000000000D2E1                 db  42h ; B
.eh_frame:000000000000D2E2                 db  0Eh
.eh_frame:000000000000D2E3                 db  18h
.eh_frame:000000000000D2E4                 db  42h ; B
.eh_frame:000000000000D2E5                 db  0Eh
.eh_frame:000000000000D2E6                 db  10h
.eh_frame:000000000000D2E7                 db  42h ; B
.eh_frame:000000000000D2E8                 db  0Eh
.eh_frame:000000000000D2E9                 db    8
.eh_frame:000000000000D2EA                 db  44h ; D
.eh_frame:000000000000D2EB                 db  0Bh
.eh_frame:000000000000D2EC                 db  59h ; Y
.eh_frame:000000000000D2ED                 db  0Ah
.eh_frame:000000000000D2EE                 db  0Eh
.eh_frame:000000000000D2EF                 db  28h ; (
.eh_frame:000000000000D2F0                 db  41h ; A
.eh_frame:000000000000D2F1                 db  0Eh
.eh_frame:000000000000D2F2                 db  20h
.eh_frame:000000000000D2F3                 db  42h ; B
.eh_frame:000000000000D2F4                 db  0Eh
.eh_frame:000000000000D2F5                 db  18h
.eh_frame:000000000000D2F6                 db  42h ; B
.eh_frame:000000000000D2F7                 db  0Eh
.eh_frame:000000000000D2F8                 db  10h
.eh_frame:000000000000D2F9                 db  42h ; B
.eh_frame:000000000000D2FA                 db  0Eh
.eh_frame:000000000000D2FB                 db    8
.eh_frame:000000000000D2FC                 db  48h ; H
.eh_frame:000000000000D2FD                 db  0Bh
.eh_frame:000000000000D2FE                 db  4Dh ; M
.eh_frame:000000000000D2FF                 db  0Eh
.eh_frame:000000000000D300                 db  28h ; (
.eh_frame:000000000000D301                 db  43h ; C
.eh_frame:000000000000D302                 db  0Eh
.eh_frame:000000000000D303                 db  20h
.eh_frame:000000000000D304                 db  42h ; B
.eh_frame:000000000000D305                 db  0Eh
.eh_frame:000000000000D306                 db  18h
.eh_frame:000000000000D307                 db  42h ; B
.eh_frame:000000000000D308                 db  0Eh
.eh_frame:000000000000D309                 db  10h
.eh_frame:000000000000D30A                 db  42h ; B
.eh_frame:000000000000D30B                 db  0Eh
.eh_frame:000000000000D30C                 db    8
.eh_frame:000000000000D30D                 db    0
.eh_frame:000000000000D30E                 db    0
.eh_frame:000000000000D30F                 db    0
.eh_frame:000000000000D310                 db  64h ; d
.eh_frame:000000000000D311                 db    0
.eh_frame:000000000000D312                 db    0
.eh_frame:000000000000D313                 db    0
.eh_frame:000000000000D314                 db 0BCh
.eh_frame:000000000000D315                 db    2
.eh_frame:000000000000D316                 db    0
.eh_frame:000000000000D317                 db    0
.eh_frame:000000000000D318                 db 0F8h
.eh_frame:000000000000D319                 db  6Bh ; k
.eh_frame:000000000000D31A                 db 0FFh
.eh_frame:000000000000D31B                 db 0FFh
.eh_frame:000000000000D31C                 db  37h ; 7
.eh_frame:000000000000D31D                 db    2
.eh_frame:000000000000D31E                 db    0
.eh_frame:000000000000D31F                 db    0
.eh_frame:000000000000D320                 db    0
.eh_frame:000000000000D321                 db  42h ; B
.eh_frame:000000000000D322                 db  0Eh
.eh_frame:000000000000D323                 db  10h
.eh_frame:000000000000D324                 db  8Fh
.eh_frame:000000000000D325                 db    2
.eh_frame:000000000000D326                 db  42h ; B
.eh_frame:000000000000D327                 db  0Eh
.eh_frame:000000000000D328                 db  18h
.eh_frame:000000000000D329                 db  8Eh
.eh_frame:000000000000D32A                 db    3
.eh_frame:000000000000D32B                 db  42h ; B
.eh_frame:000000000000D32C                 db  0Eh
.eh_frame:000000000000D32D                 db  20h
.eh_frame:000000000000D32E                 db  8Dh
.eh_frame:000000000000D32F                 db    4
.eh_frame:000000000000D330                 db  42h ; B
.eh_frame:000000000000D331                 db  0Eh
.eh_frame:000000000000D332                 db  28h ; (
.eh_frame:000000000000D333                 db  8Ch
.eh_frame:000000000000D334                 db    5
.eh_frame:000000000000D335                 db  41h ; A
.eh_frame:000000000000D336                 db  0Eh
.eh_frame:000000000000D337                 db  30h ; 0
.eh_frame:000000000000D338                 db  86h
.eh_frame:000000000000D339                 db    6
.eh_frame:000000000000D33A                 db  41h ; A
.eh_frame:000000000000D33B                 db  0Eh
.eh_frame:000000000000D33C                 db  38h ; 8
.eh_frame:000000000000D33D                 db  83h
.eh_frame:000000000000D33E                 db    7
.eh_frame:000000000000D33F                 db  44h ; D
.eh_frame:000000000000D340                 db  0Eh
.eh_frame:000000000000D341                 db  50h ; P
.eh_frame:000000000000D342                 db  6Bh ; k
.eh_frame:000000000000D343                 db  0Ah
.eh_frame:000000000000D344                 db  0Eh
.eh_frame:000000000000D345                 db  38h ; 8
.eh_frame:000000000000D346                 db  41h ; A
.eh_frame:000000000000D347                 db  0Eh
.eh_frame:000000000000D348                 db  30h ; 0
.eh_frame:000000000000D349                 db  41h ; A
.eh_frame:000000000000D34A                 db  0Eh
.eh_frame:000000000000D34B                 db  28h ; (
.eh_frame:000000000000D34C                 db  42h ; B
.eh_frame:000000000000D34D                 db  0Eh
.eh_frame:000000000000D34E                 db  20h
.eh_frame:000000000000D34F                 db  42h ; B
.eh_frame:000000000000D350                 db  0Eh
.eh_frame:000000000000D351                 db  18h
.eh_frame:000000000000D352                 db  42h ; B
.eh_frame:000000000000D353                 db  0Eh
.eh_frame:000000000000D354                 db  10h
.eh_frame:000000000000D355                 db  42h ; B
.eh_frame:000000000000D356                 db  0Eh
.eh_frame:000000000000D357                 db    8
.eh_frame:000000000000D358                 db  45h ; E
.eh_frame:000000000000D359                 db  0Bh
.eh_frame:000000000000D35A                 db    2
.eh_frame:000000000000D35B                 db 0D9h
.eh_frame:000000000000D35C                 db  0Ah
.eh_frame:000000000000D35D                 db  0Eh
.eh_frame:000000000000D35E                 db  38h ; 8
.eh_frame:000000000000D35F                 db  43h ; C
.eh_frame:000000000000D360                 db  0Eh
.eh_frame:000000000000D361                 db  30h ; 0
.eh_frame:000000000000D362                 db  44h ; D
.eh_frame:000000000000D363                 db  0Eh
.eh_frame:000000000000D364                 db  28h ; (
.eh_frame:000000000000D365                 db  42h ; B
.eh_frame:000000000000D366                 db  0Eh
.eh_frame:000000000000D367                 db  20h
.eh_frame:000000000000D368                 db  42h ; B
.eh_frame:000000000000D369                 db  0Eh
.eh_frame:000000000000D36A                 db  18h
.eh_frame:000000000000D36B                 db  42h ; B
.eh_frame:000000000000D36C                 db  0Eh
.eh_frame:000000000000D36D                 db  10h
.eh_frame:000000000000D36E                 db  42h ; B
.eh_frame:000000000000D36F                 db  0Eh
.eh_frame:000000000000D370                 db    8
.eh_frame:000000000000D371                 db  48h ; H
.eh_frame:000000000000D372                 db  0Bh
.eh_frame:000000000000D373                 db    0
.eh_frame:000000000000D374                 db    0
.eh_frame:000000000000D375                 db    0
.eh_frame:000000000000D376                 db    0
.eh_frame:000000000000D377                 db    0
.eh_frame:000000000000D378                 db  18h
.eh_frame:000000000000D379                 db    0
.eh_frame:000000000000D37A                 db    0
.eh_frame:000000000000D37B                 db    0
.eh_frame:000000000000D37C                 db  24h ; $
.eh_frame:000000000000D37D                 db    3
.eh_frame:000000000000D37E                 db    0
.eh_frame:000000000000D37F                 db    0
.eh_frame:000000000000D380                 db 0D0h
.eh_frame:000000000000D381                 db  6Dh ; m
.eh_frame:000000000000D382                 db 0FFh
.eh_frame:000000000000D383                 db 0FFh
.eh_frame:000000000000D384                 db  46h ; F
.eh_frame:000000000000D385                 db    0
.eh_frame:000000000000D386                 db    0
.eh_frame:000000000000D387                 db    0
.eh_frame:000000000000D388                 db    0
.eh_frame:000000000000D389                 db  44h ; D
.eh_frame:000000000000D38A                 db  0Eh
.eh_frame:000000000000D38B                 db  10h
.eh_frame:000000000000D38C                 db  83h
.eh_frame:000000000000D38D                 db    2
.eh_frame:000000000000D38E                 db  59h ; Y
.eh_frame:000000000000D38F                 db  0Ah
.eh_frame:000000000000D390                 db  0Eh
.eh_frame:000000000000D391                 db    8
.eh_frame:000000000000D392                 db  43h ; C
.eh_frame:000000000000D393                 db  0Bh
.eh_frame:000000000000D394                 db  50h ; P
.eh_frame:000000000000D395                 db    0
.eh_frame:000000000000D396                 db    0
.eh_frame:000000000000D397                 db    0
.eh_frame:000000000000D398                 db  40h ; @
.eh_frame:000000000000D399                 db    3
.eh_frame:000000000000D39A                 db    0
.eh_frame:000000000000D39B                 db    0
.eh_frame:000000000000D39C                 db    4
.eh_frame:000000000000D39D                 db  6Eh ; n
.eh_frame:000000000000D39E                 db 0FFh
.eh_frame:000000000000D39F                 db 0FFh
.eh_frame:000000000000D3A0                 db  12h
.eh_frame:000000000000D3A1                 db    6
.eh_frame:000000000000D3A2                 db    0
.eh_frame:000000000000D3A3                 db    0
.eh_frame:000000000000D3A4                 db    0
.eh_frame:000000000000D3A5                 db  42h ; B
.eh_frame:000000000000D3A6                 db  0Eh
.eh_frame:000000000000D3A7                 db  10h
.eh_frame:000000000000D3A8                 db  8Fh
.eh_frame:000000000000D3A9                 db    2
.eh_frame:000000000000D3AA                 db  42h ; B
.eh_frame:000000000000D3AB                 db  0Eh
.eh_frame:000000000000D3AC                 db  18h
.eh_frame:000000000000D3AD                 db  8Eh
.eh_frame:000000000000D3AE                 db    3
.eh_frame:000000000000D3AF                 db  42h ; B
.eh_frame:000000000000D3B0                 db  0Eh
.eh_frame:000000000000D3B1                 db  20h
.eh_frame:000000000000D3B2                 db  8Dh
.eh_frame:000000000000D3B3                 db    4
.eh_frame:000000000000D3B4                 db  42h ; B
.eh_frame:000000000000D3B5                 db  0Eh
.eh_frame:000000000000D3B6                 db  28h ; (
.eh_frame:000000000000D3B7                 db  8Ch
.eh_frame:000000000000D3B8                 db    5
.eh_frame:000000000000D3B9                 db  41h ; A
.eh_frame:000000000000D3BA                 db  0Eh
.eh_frame:000000000000D3BB                 db  30h ; 0
.eh_frame:000000000000D3BC                 db  86h
.eh_frame:000000000000D3BD                 db    6
.eh_frame:000000000000D3BE                 db  41h ; A
.eh_frame:000000000000D3BF                 db  0Eh
.eh_frame:000000000000D3C0                 db  38h ; 8
.eh_frame:000000000000D3C1                 db  83h
.eh_frame:000000000000D3C2                 db    7
.eh_frame:000000000000D3C3                 db  4Ah ; J
.eh_frame:000000000000D3C4                 db  0Eh
.eh_frame:000000000000D3C5                 db 0C0h
.eh_frame:000000000000D3C6                 db    1
.eh_frame:000000000000D3C7                 db    3
.eh_frame:000000000000D3C8                 db  9Ah
.eh_frame:000000000000D3C9                 db    3
.eh_frame:000000000000D3CA                 db  0Ah
.eh_frame:000000000000D3CB                 db  0Eh
.eh_frame:000000000000D3CC                 db  38h ; 8
.eh_frame:000000000000D3CD                 db  41h ; A
.eh_frame:000000000000D3CE                 db  0Eh
.eh_frame:000000000000D3CF                 db  30h ; 0
.eh_frame:000000000000D3D0                 db  41h ; A
.eh_frame:000000000000D3D1                 db  0Eh
.eh_frame:000000000000D3D2                 db  28h ; (
.eh_frame:000000000000D3D3                 db  42h ; B
.eh_frame:000000000000D3D4                 db  0Eh
.eh_frame:000000000000D3D5                 db  20h
.eh_frame:000000000000D3D6                 db  42h ; B
.eh_frame:000000000000D3D7                 db  0Eh
.eh_frame:000000000000D3D8                 db  18h
.eh_frame:000000000000D3D9                 db  42h ; B
.eh_frame:000000000000D3DA                 db  0Eh
.eh_frame:000000000000D3DB                 db  10h
.eh_frame:000000000000D3DC                 db  42h ; B
.eh_frame:000000000000D3DD                 db  0Eh
.eh_frame:000000000000D3DE                 db    8
.eh_frame:000000000000D3DF                 db  48h ; H
.eh_frame:000000000000D3E0                 db  0Bh
.eh_frame:000000000000D3E1                 db    0
.eh_frame:000000000000D3E2                 db    0
.eh_frame:000000000000D3E3                 db    0
.eh_frame:000000000000D3E4                 db    0
.eh_frame:000000000000D3E5                 db    0
.eh_frame:000000000000D3E6                 db    0
.eh_frame:000000000000D3E7                 db    0
.eh_frame:000000000000D3E8                 db  14h
.eh_frame:000000000000D3E9                 db    0
.eh_frame:000000000000D3EA                 db    0
.eh_frame:000000000000D3EB                 db    0
.eh_frame:000000000000D3EC                 db  94h
.eh_frame:000000000000D3ED                 db    3
.eh_frame:000000000000D3EE                 db    0
.eh_frame:000000000000D3EF                 db    0
.eh_frame:000000000000D3F0                 db 0D0h
.eh_frame:000000000000D3F1                 db  73h ; s
.eh_frame:000000000000D3F2                 db 0FFh
.eh_frame:000000000000D3F3                 db 0FFh
.eh_frame:000000000000D3F4                 db  33h ; 3
.eh_frame:000000000000D3F5                 db    0
.eh_frame:000000000000D3F6                 db    0
.eh_frame:000000000000D3F7                 db    0
.eh_frame:000000000000D3F8                 db    0
.eh_frame:000000000000D3F9                 db  44h ; D
.eh_frame:000000000000D3FA                 db  0Eh
.eh_frame:000000000000D3FB                 db  10h
.eh_frame:000000000000D3FC                 db  6Eh ; n
.eh_frame:000000000000D3FD                 db  0Eh
.eh_frame:000000000000D3FE                 db    8
.eh_frame:000000000000D3FF                 db    0
.eh_frame:000000000000D400                 db  18h
.eh_frame:000000000000D401                 db    0
.eh_frame:000000000000D402                 db    0
.eh_frame:000000000000D403                 db    0
.eh_frame:000000000000D404                 db 0ACh
.eh_frame:000000000000D405                 db    3
.eh_frame:000000000000D406                 db    0
.eh_frame:000000000000D407                 db    0
.eh_frame:000000000000D408                 db 0F8h
.eh_frame:000000000000D409                 db  73h ; s
.eh_frame:000000000000D40A                 db 0FFh
.eh_frame:000000000000D40B                 db 0FFh
.eh_frame:000000000000D40C                 db  1Ah
.eh_frame:000000000000D40D                 db    0
.eh_frame:000000000000D40E                 db    0
.eh_frame:000000000000D40F                 db    0
.eh_frame:000000000000D410                 db    0
.eh_frame:000000000000D411                 db  44h ; D
.eh_frame:000000000000D412                 db  0Eh
.eh_frame:000000000000D413                 db  10h
.eh_frame:000000000000D414                 db  50h ; P
.eh_frame:000000000000D415                 db  0Ah
.eh_frame:000000000000D416                 db  0Eh
.eh_frame:000000000000D417                 db    8
.eh_frame:000000000000D418                 db  41h ; A
.eh_frame:000000000000D419                 db  0Bh
.eh_frame:000000000000D41A                 db    0
.eh_frame:000000000000D41B                 db    0
.eh_frame:000000000000D41C                 db  10h
.eh_frame:000000000000D41D                 db    0
.eh_frame:000000000000D41E                 db    0
.eh_frame:000000000000D41F                 db    0
.eh_frame:000000000000D420                 db 0C8h
.eh_frame:000000000000D421                 db    3
.eh_frame:000000000000D422                 db    0
.eh_frame:000000000000D423                 db    0
.eh_frame:000000000000D424                 db 0FCh
.eh_frame:000000000000D425                 db  73h ; s
.eh_frame:000000000000D426                 db 0FFh
.eh_frame:000000000000D427                 db 0FFh
.eh_frame:000000000000D428                 db  16h
.eh_frame:000000000000D429                 db    0
.eh_frame:000000000000D42A                 db    0
.eh_frame:000000000000D42B                 db    0
.eh_frame:000000000000D42C                 db    0
.eh_frame:000000000000D42D                 db    0
.eh_frame:000000000000D42E                 db    0
.eh_frame:000000000000D42F                 db    0
.eh_frame:000000000000D430                 db  1Ch
.eh_frame:000000000000D431                 db    0
.eh_frame:000000000000D432                 db    0
.eh_frame:000000000000D433                 db    0
.eh_frame:000000000000D434                 db 0DCh
.eh_frame:000000000000D435                 db    3
.eh_frame:000000000000D436                 db    0
.eh_frame:000000000000D437                 db    0
.eh_frame:000000000000D438                 db    8
.eh_frame:000000000000D439                 db  74h ; t
.eh_frame:000000000000D43A                 db 0FFh
.eh_frame:000000000000D43B                 db 0FFh
.eh_frame:000000000000D43C                 db  4Ah ; J
.eh_frame:000000000000D43D                 db    0
.eh_frame:000000000000D43E                 db    0
.eh_frame:000000000000D43F                 db    0
.eh_frame:000000000000D440                 db    0
.eh_frame:000000000000D441                 db  55h ; U
.eh_frame:000000000000D442                 db  0Eh
.eh_frame:000000000000D443                 db  10h
.eh_frame:000000000000D444                 db  5Dh ; ]
.eh_frame:000000000000D445                 db  0Eh
.eh_frame:000000000000D446                 db    8
.eh_frame:000000000000D447                 db  4Eh ; N
.eh_frame:000000000000D448                 db  0Eh
.eh_frame:000000000000D449                 db  10h
.eh_frame:000000000000D44A                 db  49h ; I
.eh_frame:000000000000D44B                 db  0Eh
.eh_frame:000000000000D44C                 db    8
.eh_frame:000000000000D44D                 db    0
.eh_frame:000000000000D44E                 db    0
.eh_frame:000000000000D44F                 db    0
.eh_frame:000000000000D450                 db  4Ch ; L
.eh_frame:000000000000D451                 db    0
.eh_frame:000000000000D452                 db    0
.eh_frame:000000000000D453                 db    0
.eh_frame:000000000000D454                 db 0FCh
.eh_frame:000000000000D455                 db    3
.eh_frame:000000000000D456                 db    0
.eh_frame:000000000000D457                 db    0
.eh_frame:000000000000D458                 db  38h ; 8
.eh_frame:000000000000D459                 db  74h ; t
.eh_frame:000000000000D45A                 db 0FFh
.eh_frame:000000000000D45B                 db 0FFh
.eh_frame:000000000000D45C                 db  36h ; 6
.eh_frame:000000000000D45D                 db    6
.eh_frame:000000000000D45E                 db    0
.eh_frame:000000000000D45F                 db    0
.eh_frame:000000000000D460                 db    0
.eh_frame:000000000000D461                 db  42h ; B
.eh_frame:000000000000D462                 db  0Eh
.eh_frame:000000000000D463                 db  10h
.eh_frame:000000000000D464                 db  8Fh
.eh_frame:000000000000D465                 db    2
.eh_frame:000000000000D466                 db  42h ; B
.eh_frame:000000000000D467                 db  0Eh
.eh_frame:000000000000D468                 db  18h
.eh_frame:000000000000D469                 db  8Eh
.eh_frame:000000000000D46A                 db    3
.eh_frame:000000000000D46B                 db  42h ; B
.eh_frame:000000000000D46C                 db  0Eh
.eh_frame:000000000000D46D                 db  20h
.eh_frame:000000000000D46E                 db  8Dh
.eh_frame:000000000000D46F                 db    4
.eh_frame:000000000000D470                 db  42h ; B
.eh_frame:000000000000D471                 db  0Eh
.eh_frame:000000000000D472                 db  28h ; (
.eh_frame:000000000000D473                 db  8Ch
.eh_frame:000000000000D474                 db    5
.eh_frame:000000000000D475                 db  41h ; A
.eh_frame:000000000000D476                 db  0Eh
.eh_frame:000000000000D477                 db  30h ; 0
.eh_frame:000000000000D478                 db  86h
.eh_frame:000000000000D479                 db    6
.eh_frame:000000000000D47A                 db  41h ; A
.eh_frame:000000000000D47B                 db  0Eh
.eh_frame:000000000000D47C                 db  38h ; 8
.eh_frame:000000000000D47D                 db  83h
.eh_frame:000000000000D47E                 db    7
.eh_frame:000000000000D47F                 db  47h ; G
.eh_frame:000000000000D480                 db  0Eh
.eh_frame:000000000000D481                 db 0A0h
.eh_frame:000000000000D482                 db    2
.eh_frame:000000000000D483                 db    3
.eh_frame:000000000000D484                 db  30h ; 0
.eh_frame:000000000000D485                 db    2
.eh_frame:000000000000D486                 db  0Ah
.eh_frame:000000000000D487                 db  0Eh
.eh_frame:000000000000D488                 db  38h ; 8
.eh_frame:000000000000D489                 db  41h ; A
.eh_frame:000000000000D48A                 db  0Eh
.eh_frame:000000000000D48B                 db  30h ; 0
.eh_frame:000000000000D48C                 db  41h ; A
.eh_frame:000000000000D48D                 db  0Eh
.eh_frame:000000000000D48E                 db  28h ; (
.eh_frame:000000000000D48F                 db  42h ; B
.eh_frame:000000000000D490                 db  0Eh
.eh_frame:000000000000D491                 db  20h
.eh_frame:000000000000D492                 db  42h ; B
.eh_frame:000000000000D493                 db  0Eh
.eh_frame:000000000000D494                 db  18h
.eh_frame:000000000000D495                 db  42h ; B
.eh_frame:000000000000D496                 db  0Eh
.eh_frame:000000000000D497                 db  10h
.eh_frame:000000000000D498                 db  42h ; B
.eh_frame:000000000000D499                 db  0Eh
.eh_frame:000000000000D49A                 db    8
.eh_frame:000000000000D49B                 db  45h ; E
.eh_frame:000000000000D49C                 db  0Bh
.eh_frame:000000000000D49D                 db    0
.eh_frame:000000000000D49E                 db    0
.eh_frame:000000000000D49F                 db    0
.eh_frame:000000000000D4A0                 db  10h
.eh_frame:000000000000D4A1                 db    0
.eh_frame:000000000000D4A2                 db    0
.eh_frame:000000000000D4A3                 db    0
.eh_frame:000000000000D4A4                 db  4Ch ; L
.eh_frame:000000000000D4A5                 db    4
.eh_frame:000000000000D4A6                 db    0
.eh_frame:000000000000D4A7                 db    0
.eh_frame:000000000000D4A8                 db  28h ; (
.eh_frame:000000000000D4A9                 db  7Ah ; z
.eh_frame:000000000000D4AA                 db 0FFh
.eh_frame:000000000000D4AB                 db 0FFh
.eh_frame:000000000000D4AC                 db    8
.eh_frame:000000000000D4AD                 db    0
.eh_frame:000000000000D4AE                 db    0
.eh_frame:000000000000D4AF                 db    0
.eh_frame:000000000000D4B0                 db    0
.eh_frame:000000000000D4B1                 db    0
.eh_frame:000000000000D4B2                 db    0
.eh_frame:000000000000D4B3                 db    0
.eh_frame:000000000000D4B4                 db  38h ; 8
.eh_frame:000000000000D4B5                 db    0
.eh_frame:000000000000D4B6                 db    0
.eh_frame:000000000000D4B7                 db    0
.eh_frame:000000000000D4B8                 db  60h ; `
.eh_frame:000000000000D4B9                 db    4
.eh_frame:000000000000D4BA                 db    0
.eh_frame:000000000000D4BB                 db    0
.eh_frame:000000000000D4BC                 db  24h ; $
.eh_frame:000000000000D4BD                 db  7Ah ; z
.eh_frame:000000000000D4BE                 db 0FFh
.eh_frame:000000000000D4BF                 db 0FFh
.eh_frame:000000000000D4C0                 db    7
.eh_frame:000000000000D4C1                 db    1
.eh_frame:000000000000D4C2                 db    0
.eh_frame:000000000000D4C3                 db    0
.eh_frame:000000000000D4C4                 db    0
.eh_frame:000000000000D4C5                 db  42h ; B
.eh_frame:000000000000D4C6                 db  0Eh
.eh_frame:000000000000D4C7                 db  10h
.eh_frame:000000000000D4C8                 db  8Ch
.eh_frame:000000000000D4C9                 db    2
.eh_frame:000000000000D4CA                 db  41h ; A
.eh_frame:000000000000D4CB                 db  0Eh
.eh_frame:000000000000D4CC                 db  18h
.eh_frame:000000000000D4CD                 db  86h
.eh_frame:000000000000D4CE                 db    3
.eh_frame:000000000000D4CF                 db  41h ; A
.eh_frame:000000000000D4D0                 db  0Eh
.eh_frame:000000000000D4D1                 db  20h
.eh_frame:000000000000D4D2                 db  83h
.eh_frame:000000000000D4D3                 db    4
.eh_frame:000000000000D4D4                 db  65h ; e
.eh_frame:000000000000D4D5                 db  0Ah
.eh_frame:000000000000D4D6                 db  0Eh
.eh_frame:000000000000D4D7                 db  18h
.eh_frame:000000000000D4D8                 db  41h ; A
.eh_frame:000000000000D4D9                 db  0Eh
.eh_frame:000000000000D4DA                 db  10h
.eh_frame:000000000000D4DB                 db  42h ; B
.eh_frame:000000000000D4DC                 db  0Eh
.eh_frame:000000000000D4DD                 db    8
.eh_frame:000000000000D4DE                 db  4Ch ; L
.eh_frame:000000000000D4DF                 db  0Bh
.eh_frame:000000000000D4E0                 db    2
.eh_frame:000000000000D4E1                 db 0ACh
.eh_frame:000000000000D4E2                 db  0Ah
.eh_frame:000000000000D4E3                 db  0Eh
.eh_frame:000000000000D4E4                 db  18h
.eh_frame:000000000000D4E5                 db  41h ; A
.eh_frame:000000000000D4E6                 db  0Eh
.eh_frame:000000000000D4E7                 db  10h
.eh_frame:000000000000D4E8                 db  42h ; B
.eh_frame:000000000000D4E9                 db  0Eh
.eh_frame:000000000000D4EA                 db    8
.eh_frame:000000000000D4EB                 db  49h ; I
.eh_frame:000000000000D4EC                 db  0Bh
.eh_frame:000000000000D4ED                 db    0
.eh_frame:000000000000D4EE                 db    0
.eh_frame:000000000000D4EF                 db    0
.eh_frame:000000000000D4F0                 db  10h
.eh_frame:000000000000D4F1                 db    0
.eh_frame:000000000000D4F2                 db    0
.eh_frame:000000000000D4F3                 db    0
.eh_frame:000000000000D4F4                 db  9Ch
.eh_frame:000000000000D4F5                 db    4
.eh_frame:000000000000D4F6                 db    0
.eh_frame:000000000000D4F7                 db    0
.eh_frame:000000000000D4F8                 db 0F8h
.eh_frame:000000000000D4F9                 db  7Ah ; z
.eh_frame:000000000000D4FA                 db 0FFh
.eh_frame:000000000000D4FB                 db 0FFh
.eh_frame:000000000000D4FC                 db    8
.eh_frame:000000000000D4FD                 db    0
.eh_frame:000000000000D4FE                 db    0
.eh_frame:000000000000D4FF                 db    0
.eh_frame:000000000000D500                 db    0
.eh_frame:000000000000D501                 db    0
.eh_frame:000000000000D502                 db    0
.eh_frame:000000000000D503                 db    0
.eh_frame:000000000000D504                 db  10h
.eh_frame:000000000000D505                 db    0
.eh_frame:000000000000D506                 db    0
.eh_frame:000000000000D507                 db    0
.eh_frame:000000000000D508                 db 0B0h
.eh_frame:000000000000D509                 db    4
.eh_frame:000000000000D50A                 db    0
.eh_frame:000000000000D50B                 db    0
.eh_frame:000000000000D50C                 db 0F4h
.eh_frame:000000000000D50D                 db  7Ah ; z
.eh_frame:000000000000D50E                 db 0FFh
.eh_frame:000000000000D50F                 db 0FFh
.eh_frame:000000000000D510                 db    8
.eh_frame:000000000000D511                 db    0
.eh_frame:000000000000D512                 db    0
.eh_frame:000000000000D513                 db    0
.eh_frame:000000000000D514                 db    0
.eh_frame:000000000000D515                 db    0
.eh_frame:000000000000D516                 db    0
.eh_frame:000000000000D517                 db    0
.eh_frame:000000000000D518                 db  2Ch ; ,
.eh_frame:000000000000D519                 db    0
.eh_frame:000000000000D51A                 db    0
.eh_frame:000000000000D51B                 db    0
.eh_frame:000000000000D51C                 db 0C4h
.eh_frame:000000000000D51D                 db    4
.eh_frame:000000000000D51E                 db    0
.eh_frame:000000000000D51F                 db    0
.eh_frame:000000000000D520                 db 0F0h
.eh_frame:000000000000D521                 db  7Ah ; z
.eh_frame:000000000000D522                 db 0FFh
.eh_frame:000000000000D523                 db 0FFh
.eh_frame:000000000000D524                 db 0A4h
.eh_frame:000000000000D525                 db    0
.eh_frame:000000000000D526                 db    0
.eh_frame:000000000000D527                 db    0
.eh_frame:000000000000D528                 db    0
.eh_frame:000000000000D529                 db  41h ; A
.eh_frame:000000000000D52A                 db  0Eh
.eh_frame:000000000000D52B                 db  10h
.eh_frame:000000000000D52C                 db  86h
.eh_frame:000000000000D52D                 db    2
.eh_frame:000000000000D52E                 db  41h ; A
.eh_frame:000000000000D52F                 db  0Eh
.eh_frame:000000000000D530                 db  18h
.eh_frame:000000000000D531                 db  83h
.eh_frame:000000000000D532                 db    3
.eh_frame:000000000000D533                 db  44h ; D
.eh_frame:000000000000D534                 db  0Eh
.eh_frame:000000000000D535                 db  20h
.eh_frame:000000000000D536                 db  7Ah ; z
.eh_frame:000000000000D537                 db  0Ah
.eh_frame:000000000000D538                 db  0Eh
.eh_frame:000000000000D539                 db  18h
.eh_frame:000000000000D53A                 db  41h ; A
.eh_frame:000000000000D53B                 db  0Eh
.eh_frame:000000000000D53C                 db  10h
.eh_frame:000000000000D53D                 db  41h ; A
.eh_frame:000000000000D53E                 db  0Eh
.eh_frame:000000000000D53F                 db    8
.eh_frame:000000000000D540                 db  41h ; A
.eh_frame:000000000000D541                 db  0Bh
.eh_frame:000000000000D542                 db    0
.eh_frame:000000000000D543                 db    0
.eh_frame:000000000000D544                 db    0
.eh_frame:000000000000D545                 db    0
.eh_frame:000000000000D546                 db    0
.eh_frame:000000000000D547                 db    0
.eh_frame:000000000000D548                 db  1Ch
.eh_frame:000000000000D549                 db    0
.eh_frame:000000000000D54A                 db    0
.eh_frame:000000000000D54B                 db    0
.eh_frame:000000000000D54C                 db 0F4h
.eh_frame:000000000000D54D                 db    4
.eh_frame:000000000000D54E                 db    0
.eh_frame:000000000000D54F                 db    0
.eh_frame:000000000000D550                 db  70h ; p
.eh_frame:000000000000D551                 db  7Bh ; {
.eh_frame:000000000000D552                 db 0FFh
.eh_frame:000000000000D553                 db 0FFh
.eh_frame:000000000000D554                 db  18h
.eh_frame:000000000000D555                 db    0
.eh_frame:000000000000D556                 db    0
.eh_frame:000000000000D557                 db    0
.eh_frame:000000000000D558                 db    0
.eh_frame:000000000000D559                 db  44h ; D
.eh_frame:000000000000D55A                 db  0Eh
.eh_frame:000000000000D55B                 db  10h
.eh_frame:000000000000D55C                 db  4Eh ; N
.eh_frame:000000000000D55D                 db  0Ah
.eh_frame:000000000000D55E                 db  0Eh
.eh_frame:000000000000D55F                 db    8
.eh_frame:000000000000D560                 db  41h ; A
.eh_frame:000000000000D561                 db  0Bh
.eh_frame:000000000000D562                 db    0
.eh_frame:000000000000D563                 db    0
.eh_frame:000000000000D564                 db    0
.eh_frame:000000000000D565                 db    0
.eh_frame:000000000000D566                 db    0
.eh_frame:000000000000D567                 db    0
.eh_frame:000000000000D568                 db  30h ; 0
.eh_frame:000000000000D569                 db    0
.eh_frame:000000000000D56A                 db    0
.eh_frame:000000000000D56B                 db    0
.eh_frame:000000000000D56C                 db  14h
.eh_frame:000000000000D56D                 db    5
.eh_frame:000000000000D56E                 db    0
.eh_frame:000000000000D56F                 db    0
.eh_frame:000000000000D570                 db  70h ; p
.eh_frame:000000000000D571                 db  7Bh ; {
.eh_frame:000000000000D572                 db 0FFh
.eh_frame:000000000000D573                 db 0FFh
.eh_frame:000000000000D574                 db  5Dh ; ]
.eh_frame:000000000000D575                 db    0
.eh_frame:000000000000D576                 db    0
.eh_frame:000000000000D577                 db    0
.eh_frame:000000000000D578                 db    0
.eh_frame:000000000000D579                 db  41h ; A
.eh_frame:000000000000D57A                 db  0Eh
.eh_frame:000000000000D57B                 db  10h
.eh_frame:000000000000D57C                 db  86h
.eh_frame:000000000000D57D                 db    2
.eh_frame:000000000000D57E                 db  41h ; A
.eh_frame:000000000000D57F                 db  0Eh
.eh_frame:000000000000D580                 db  18h
.eh_frame:000000000000D581                 db  83h
.eh_frame:000000000000D582                 db    3
.eh_frame:000000000000D583                 db  49h ; I
.eh_frame:000000000000D584                 db  0Eh
.eh_frame:000000000000D585                 db  20h
.eh_frame:000000000000D586                 db  7Ch ; |
.eh_frame:000000000000D587                 db  0Ah
.eh_frame:000000000000D588                 db  0Eh
.eh_frame:000000000000D589                 db  18h
.eh_frame:000000000000D58A                 db  44h ; D
.eh_frame:000000000000D58B                 db  0Eh
.eh_frame:000000000000D58C                 db  10h
.eh_frame:000000000000D58D                 db  41h ; A
.eh_frame:000000000000D58E                 db  0Eh
.eh_frame:000000000000D58F                 db    8
.eh_frame:000000000000D590                 db  44h ; D
.eh_frame:000000000000D591                 db  0Bh
.eh_frame:000000000000D592                 db  44h ; D
.eh_frame:000000000000D593                 db  0Eh
.eh_frame:000000000000D594                 db  18h
.eh_frame:000000000000D595                 db  47h ; G
.eh_frame:000000000000D596                 db  0Eh
.eh_frame:000000000000D597                 db  10h
.eh_frame:000000000000D598                 db  41h ; A
.eh_frame:000000000000D599                 db  0Eh
.eh_frame:000000000000D59A                 db    8
.eh_frame:000000000000D59B                 db    0
.eh_frame:000000000000D59C                 db  28h ; (
.eh_frame:000000000000D59D                 db    0
.eh_frame:000000000000D59E                 db    0
.eh_frame:000000000000D59F                 db    0
.eh_frame:000000000000D5A0                 db  48h ; H
.eh_frame:000000000000D5A1                 db    5
.eh_frame:000000000000D5A2                 db    0
.eh_frame:000000000000D5A3                 db    0
.eh_frame:000000000000D5A4                 db  9Ch
.eh_frame:000000000000D5A5                 db  7Bh ; {
.eh_frame:000000000000D5A6                 db 0FFh
.eh_frame:000000000000D5A7                 db 0FFh
.eh_frame:000000000000D5A8                 db  5Ah ; Z
.eh_frame:000000000000D5A9                 db    0
.eh_frame:000000000000D5AA                 db    0
.eh_frame:000000000000D5AB                 db    0
.eh_frame:000000000000D5AC                 db    0
.eh_frame:000000000000D5AD                 db  41h ; A
.eh_frame:000000000000D5AE                 db  0Eh
.eh_frame:000000000000D5AF                 db  10h
.eh_frame:000000000000D5B0                 db  86h
.eh_frame:000000000000D5B1                 db    2
.eh_frame:000000000000D5B2                 db  41h ; A
.eh_frame:000000000000D5B3                 db  0Eh
.eh_frame:000000000000D5B4                 db  18h
.eh_frame:000000000000D5B5                 db  83h
.eh_frame:000000000000D5B6                 db    3
.eh_frame:000000000000D5B7                 db  47h ; G
.eh_frame:000000000000D5B8                 db  0Eh
.eh_frame:000000000000D5B9                 db  20h
.eh_frame:000000000000D5BA                 db    2
.eh_frame:000000000000D5BB                 db  41h ; A
.eh_frame:000000000000D5BC                 db  0Ah
.eh_frame:000000000000D5BD                 db  0Eh
.eh_frame:000000000000D5BE                 db  18h
.eh_frame:000000000000D5BF                 db  44h ; D
.eh_frame:000000000000D5C0                 db  0Eh
.eh_frame:000000000000D5C1                 db  10h
.eh_frame:000000000000D5C2                 db  41h ; A
.eh_frame:000000000000D5C3                 db  0Eh
.eh_frame:000000000000D5C4                 db    8
.eh_frame:000000000000D5C5                 db  41h ; A
.eh_frame:000000000000D5C6                 db  0Bh
.eh_frame:000000000000D5C7                 db    0
.eh_frame:000000000000D5C8                 db  10h
.eh_frame:000000000000D5C9                 db    0
.eh_frame:000000000000D5CA                 db    0
.eh_frame:000000000000D5CB                 db    0
.eh_frame:000000000000D5CC                 db  74h ; t
.eh_frame:000000000000D5CD                 db    5
.eh_frame:000000000000D5CE                 db    0
.eh_frame:000000000000D5CF                 db    0
.eh_frame:000000000000D5D0                 db 0D0h
.eh_frame:000000000000D5D1                 db  7Bh ; {
.eh_frame:000000000000D5D2                 db 0FFh
.eh_frame:000000000000D5D3                 db 0FFh
.eh_frame:000000000000D5D4                 db  5Ch ; \
.eh_frame:000000000000D5D5                 db    0
.eh_frame:000000000000D5D6                 db    0
.eh_frame:000000000000D5D7                 db    0
.eh_frame:000000000000D5D8                 db    0
.eh_frame:000000000000D5D9                 db    0
.eh_frame:000000000000D5DA                 db    0
.eh_frame:000000000000D5DB                 db    0
.eh_frame:000000000000D5DC                 db  28h ; (
.eh_frame:000000000000D5DD                 db    0
.eh_frame:000000000000D5DE                 db    0
.eh_frame:000000000000D5DF                 db    0
.eh_frame:000000000000D5E0                 db  88h
.eh_frame:000000000000D5E1                 db    5
.eh_frame:000000000000D5E2                 db    0
.eh_frame:000000000000D5E3                 db    0
.eh_frame:000000000000D5E4                 db  1Ch
.eh_frame:000000000000D5E5                 db  7Ch ; |
.eh_frame:000000000000D5E6                 db 0FFh
.eh_frame:000000000000D5E7                 db 0FFh
.eh_frame:000000000000D5E8                 db  47h ; G
.eh_frame:000000000000D5E9                 db    0
.eh_frame:000000000000D5EA                 db    0
.eh_frame:000000000000D5EB                 db    0
.eh_frame:000000000000D5EC                 db    0
.eh_frame:000000000000D5ED                 db  41h ; A
.eh_frame:000000000000D5EE                 db  0Eh
.eh_frame:000000000000D5EF                 db  10h
.eh_frame:000000000000D5F0                 db  83h
.eh_frame:000000000000D5F1                 db    2
.eh_frame:000000000000D5F2                 db  5Ah ; Z
.eh_frame:000000000000D5F3                 db  0Ah
.eh_frame:000000000000D5F4                 db  0Eh
.eh_frame:000000000000D5F5                 db    8
.eh_frame:000000000000D5F6                 db  45h ; E
.eh_frame:000000000000D5F7                 db  0Bh
.eh_frame:000000000000D5F8                 db  5Dh ; ]
.eh_frame:000000000000D5F9                 db  0Ah
.eh_frame:000000000000D5FA                 db  0Eh
.eh_frame:000000000000D5FB                 db    8
.eh_frame:000000000000D5FC                 db  43h ; C
.eh_frame:000000000000D5FD                 db  0Bh
.eh_frame:000000000000D5FE                 db  46h ; F
.eh_frame:000000000000D5FF                 db  0Eh
.eh_frame:000000000000D600                 db    8
.eh_frame:000000000000D601                 db    0
.eh_frame:000000000000D602                 db    0
.eh_frame:000000000000D603                 db    0
.eh_frame:000000000000D604                 db    0
.eh_frame:000000000000D605                 db    0
.eh_frame:000000000000D606                 db    0
.eh_frame:000000000000D607                 db    0
.eh_frame:000000000000D608                 db  24h ; $
.eh_frame:000000000000D609                 db    0
.eh_frame:000000000000D60A                 db    0
.eh_frame:000000000000D60B                 db    0
.eh_frame:000000000000D60C                 db 0B4h
.eh_frame:000000000000D60D                 db    5
.eh_frame:000000000000D60E                 db    0
.eh_frame:000000000000D60F                 db    0
.eh_frame:000000000000D610                 db  40h ; @
.eh_frame:000000000000D611                 db  7Ch ; |
.eh_frame:000000000000D612                 db 0FFh
.eh_frame:000000000000D613                 db 0FFh
.eh_frame:000000000000D614                 db  33h ; 3
.eh_frame:000000000000D615                 db    0
.eh_frame:000000000000D616                 db    0
.eh_frame:000000000000D617                 db    0
.eh_frame:000000000000D618                 db    0
.eh_frame:000000000000D619                 db  41h ; A
.eh_frame:000000000000D61A                 db  0Eh
.eh_frame:000000000000D61B                 db  10h
.eh_frame:000000000000D61C                 db  86h
.eh_frame:000000000000D61D                 db    2
.eh_frame:000000000000D61E                 db  41h ; A
.eh_frame:000000000000D61F                 db  0Eh
.eh_frame:000000000000D620                 db  18h
.eh_frame:000000000000D621                 db  83h
.eh_frame:000000000000D622                 db    3
.eh_frame:000000000000D623                 db  47h ; G
.eh_frame:000000000000D624                 db  0Eh
.eh_frame:000000000000D625                 db  20h
.eh_frame:000000000000D626                 db  67h ; g
.eh_frame:000000000000D627                 db  0Eh
.eh_frame:000000000000D628                 db  18h
.eh_frame:000000000000D629                 db  41h ; A
.eh_frame:000000000000D62A                 db  0Eh
.eh_frame:000000000000D62B                 db  10h
.eh_frame:000000000000D62C                 db  41h ; A
.eh_frame:000000000000D62D                 db  0Eh
.eh_frame:000000000000D62E                 db    8
.eh_frame:000000000000D62F                 db    0
.eh_frame:000000000000D630                 db  5Ch ; \
.eh_frame:000000000000D631                 db    0
.eh_frame:000000000000D632                 db    0
.eh_frame:000000000000D633                 db    0
.eh_frame:000000000000D634                 db 0DCh
.eh_frame:000000000000D635                 db    5
.eh_frame:000000000000D636                 db    0
.eh_frame:000000000000D637                 db    0
.eh_frame:000000000000D638                 db  58h ; X
.eh_frame:000000000000D639                 db  7Ch ; |
.eh_frame:000000000000D63A                 db 0FFh
.eh_frame:000000000000D63B                 db 0FFh
.eh_frame:000000000000D63C                 db  87h
.eh_frame:000000000000D63D                 db    0
.eh_frame:000000000000D63E                 db    0
.eh_frame:000000000000D63F                 db    0
.eh_frame:000000000000D640                 db    0
.eh_frame:000000000000D641                 db  47h ; G
.eh_frame:000000000000D642                 db  0Eh
.eh_frame:000000000000D643                 db  10h
.eh_frame:000000000000D644                 db  8Dh
.eh_frame:000000000000D645                 db    2
.eh_frame:000000000000D646                 db  42h ; B
.eh_frame:000000000000D647                 db  0Eh
.eh_frame:000000000000D648                 db  18h
.eh_frame:000000000000D649                 db  8Ch
.eh_frame:000000000000D64A                 db    3
.eh_frame:000000000000D64B                 db  44h ; D
.eh_frame:000000000000D64C                 db  0Eh
.eh_frame:000000000000D64D                 db  20h
.eh_frame:000000000000D64E                 db  86h
.eh_frame:000000000000D64F                 db    4
.eh_frame:000000000000D650                 db  41h ; A
.eh_frame:000000000000D651                 db  0Eh
.eh_frame:000000000000D652                 db  28h ; (
.eh_frame:000000000000D653                 db  83h
.eh_frame:000000000000D654                 db    5
.eh_frame:000000000000D655                 db  4Fh ; O
.eh_frame:000000000000D656                 db  0Eh
.eh_frame:000000000000D657                 db  30h ; 0
.eh_frame:000000000000D658                 db  7Ch ; |
.eh_frame:000000000000D659                 db  0Ah
.eh_frame:000000000000D65A                 db  0Eh
.eh_frame:000000000000D65B                 db  28h ; (
.eh_frame:000000000000D65C                 db  44h ; D
.eh_frame:000000000000D65D                 db 0C3h
.eh_frame:000000000000D65E                 db  0Eh
.eh_frame:000000000000D65F                 db  20h
.eh_frame:000000000000D660                 db  41h ; A
.eh_frame:000000000000D661                 db 0C6h
.eh_frame:000000000000D662                 db  0Eh
.eh_frame:000000000000D663                 db  18h
.eh_frame:000000000000D664                 db  42h ; B
.eh_frame:000000000000D665                 db 0CCh
.eh_frame:000000000000D666                 db  0Eh
.eh_frame:000000000000D667                 db  10h
.eh_frame:000000000000D668                 db  42h ; B
.eh_frame:000000000000D669                 db 0CDh
.eh_frame:000000000000D66A                 db  0Eh
.eh_frame:000000000000D66B                 db    8
.eh_frame:000000000000D66C                 db  4Eh ; N
.eh_frame:000000000000D66D                 db  0Bh
.eh_frame:000000000000D66E                 db  44h ; D
.eh_frame:000000000000D66F                 db  0Eh
.eh_frame:000000000000D670                 db  28h ; (
.eh_frame:000000000000D671                 db  41h ; A
.eh_frame:000000000000D672                 db  0Eh
.eh_frame:000000000000D673                 db  20h
.eh_frame:000000000000D674                 db  41h ; A
.eh_frame:000000000000D675                 db  0Eh
.eh_frame:000000000000D676                 db  18h
.eh_frame:000000000000D677                 db  42h ; B
.eh_frame:000000000000D678                 db  0Eh
.eh_frame:000000000000D679                 db  10h
.eh_frame:000000000000D67A                 db  42h ; B
.eh_frame:000000000000D67B                 db  0Eh
.eh_frame:000000000000D67C                 db    8
.eh_frame:000000000000D67D                 db  46h ; F
.eh_frame:000000000000D67E                 db 0C3h
.eh_frame:000000000000D67F                 db 0C6h
.eh_frame:000000000000D680                 db 0CCh
.eh_frame:000000000000D681                 db 0CDh
.eh_frame:000000000000D682                 db  42h ; B
.eh_frame:000000000000D683                 db  0Eh
.eh_frame:000000000000D684                 db  30h ; 0
.eh_frame:000000000000D685                 db  83h
.eh_frame:000000000000D686                 db    5
.eh_frame:000000000000D687                 db  86h
.eh_frame:000000000000D688                 db    4
.eh_frame:000000000000D689                 db  8Ch
.eh_frame:000000000000D68A                 db    3
.eh_frame:000000000000D68B                 db  8Dh
.eh_frame:000000000000D68C                 db    2
.eh_frame:000000000000D68D                 db    0
.eh_frame:000000000000D68E                 db    0
.eh_frame:000000000000D68F                 db    0
.eh_frame:000000000000D690                 db  1Ch
.eh_frame:000000000000D691                 db    0
.eh_frame:000000000000D692                 db    0
.eh_frame:000000000000D693                 db    0
.eh_frame:000000000000D694                 db  3Ch ; <
.eh_frame:000000000000D695                 db    6
.eh_frame:000000000000D696                 db    0
.eh_frame:000000000000D697                 db    0
.eh_frame:000000000000D698                 db  88h
.eh_frame:000000000000D699                 db  7Ch ; |
.eh_frame:000000000000D69A                 db 0FFh
.eh_frame:000000000000D69B                 db 0FFh
.eh_frame:000000000000D69C                 db  56h ; V
.eh_frame:000000000000D69D                 db    0
.eh_frame:000000000000D69E                 db    0
.eh_frame:000000000000D69F                 db    0
.eh_frame:000000000000D6A0                 db    0
.eh_frame:000000000000D6A1                 db  44h ; D
.eh_frame:000000000000D6A2                 db  0Eh
.eh_frame:000000000000D6A3                 db  30h ; 0
.eh_frame:000000000000D6A4                 db    2
.eh_frame:000000000000D6A5                 db  4Ch ; L
.eh_frame:000000000000D6A6                 db  0Ah
.eh_frame:000000000000D6A7                 db  0Eh
.eh_frame:000000000000D6A8                 db    8
.eh_frame:000000000000D6A9                 db  41h ; A
.eh_frame:000000000000D6AA                 db  0Bh
.eh_frame:000000000000D6AB                 db    0
.eh_frame:000000000000D6AC                 db    0
.eh_frame:000000000000D6AD                 db    0
.eh_frame:000000000000D6AE                 db    0
.eh_frame:000000000000D6AF                 db    0
.eh_frame:000000000000D6B0                 db  1Ch
.eh_frame:000000000000D6B1                 db    0
.eh_frame:000000000000D6B2                 db    0
.eh_frame:000000000000D6B3                 db    0
.eh_frame:000000000000D6B4                 db  5Ch ; \
.eh_frame:000000000000D6B5                 db    6
.eh_frame:000000000000D6B6                 db    0
.eh_frame:000000000000D6B7                 db    0
.eh_frame:000000000000D6B8                 db 0C8h
.eh_frame:000000000000D6B9                 db  7Ch ; |
.eh_frame:000000000000D6BA                 db 0FFh
.eh_frame:000000000000D6BB                 db 0FFh
.eh_frame:000000000000D6BC                 db  18h
.eh_frame:000000000000D6BD                 db    0
.eh_frame:000000000000D6BE                 db    0
.eh_frame:000000000000D6BF                 db    0
.eh_frame:000000000000D6C0                 db    0
.eh_frame:000000000000D6C1                 db  44h ; D
.eh_frame:000000000000D6C2                 db  0Eh
.eh_frame:000000000000D6C3                 db  10h
.eh_frame:000000000000D6C4                 db  4Eh ; N
.eh_frame:000000000000D6C5                 db  0Ah
.eh_frame:000000000000D6C6                 db  0Eh
.eh_frame:000000000000D6C7                 db    8
.eh_frame:000000000000D6C8                 db  41h ; A
.eh_frame:000000000000D6C9                 db  0Bh
.eh_frame:000000000000D6CA                 db    0
.eh_frame:000000000000D6CB                 db    0
.eh_frame:000000000000D6CC                 db    0
.eh_frame:000000000000D6CD                 db    0
.eh_frame:000000000000D6CE                 db    0
.eh_frame:000000000000D6CF                 db    0
.eh_frame:000000000000D6D0                 db  4Ch ; L
.eh_frame:000000000000D6D1                 db    0
.eh_frame:000000000000D6D2                 db    0
.eh_frame:000000000000D6D3                 db    0
.eh_frame:000000000000D6D4                 db  7Ch ; |
.eh_frame:000000000000D6D5                 db    6
.eh_frame:000000000000D6D6                 db    0
.eh_frame:000000000000D6D7                 db    0
.eh_frame:000000000000D6D8                 db 0C8h
.eh_frame:000000000000D6D9                 db  7Ch ; |
.eh_frame:000000000000D6DA                 db 0FFh
.eh_frame:000000000000D6DB                 db 0FFh
.eh_frame:000000000000D6DC                 db 0FFh
.eh_frame:000000000000D6DD                 db    0
.eh_frame:000000000000D6DE                 db    0
.eh_frame:000000000000D6DF                 db    0
.eh_frame:000000000000D6E0                 db    0
.eh_frame:000000000000D6E1                 db  42h ; B
.eh_frame:000000000000D6E2                 db  0Eh
.eh_frame:000000000000D6E3                 db  10h
.eh_frame:000000000000D6E4                 db  8Fh
.eh_frame:000000000000D6E5                 db    2
.eh_frame:000000000000D6E6                 db  42h ; B
.eh_frame:000000000000D6E7                 db  0Eh
.eh_frame:000000000000D6E8                 db  18h
.eh_frame:000000000000D6E9                 db  8Eh
.eh_frame:000000000000D6EA                 db    3
.eh_frame:000000000000D6EB                 db  45h ; E
.eh_frame:000000000000D6EC                 db  0Eh
.eh_frame:000000000000D6ED                 db  20h
.eh_frame:000000000000D6EE                 db  8Dh
.eh_frame:000000000000D6EF                 db    4
.eh_frame:000000000000D6F0                 db  42h ; B
.eh_frame:000000000000D6F1                 db  0Eh
.eh_frame:000000000000D6F2                 db  28h ; (
.eh_frame:000000000000D6F3                 db  8Ch
.eh_frame:000000000000D6F4                 db    5
.eh_frame:000000000000D6F5                 db  44h ; D
.eh_frame:000000000000D6F6                 db  0Eh
.eh_frame:000000000000D6F7                 db  30h ; 0
.eh_frame:000000000000D6F8                 db  86h
.eh_frame:000000000000D6F9                 db    6
.eh_frame:000000000000D6FA                 db  41h ; A
.eh_frame:000000000000D6FB                 db  0Eh
.eh_frame:000000000000D6FC                 db  38h ; 8
.eh_frame:000000000000D6FD                 db  83h
.eh_frame:000000000000D6FE                 db    7
.eh_frame:000000000000D6FF                 db  47h ; G
.eh_frame:000000000000D700                 db  0Eh
.eh_frame:000000000000D701                 db  50h ; P
.eh_frame:000000000000D702                 db    2
.eh_frame:000000000000D703                 db 0C3h
.eh_frame:000000000000D704                 db  0Ah
.eh_frame:000000000000D705                 db  0Eh
.eh_frame:000000000000D706                 db  38h ; 8
.eh_frame:000000000000D707                 db  44h ; D
.eh_frame:000000000000D708                 db  0Eh
.eh_frame:000000000000D709                 db  30h ; 0
.eh_frame:000000000000D70A                 db  41h ; A
.eh_frame:000000000000D70B                 db  0Eh
.eh_frame:000000000000D70C                 db  28h ; (
.eh_frame:000000000000D70D                 db  42h ; B
.eh_frame:000000000000D70E                 db  0Eh
.eh_frame:000000000000D70F                 db  20h
.eh_frame:000000000000D710                 db  42h ; B
.eh_frame:000000000000D711                 db  0Eh
.eh_frame:000000000000D712                 db  18h
.eh_frame:000000000000D713                 db  42h ; B
.eh_frame:000000000000D714                 db  0Eh
.eh_frame:000000000000D715                 db  10h
.eh_frame:000000000000D716                 db  42h ; B
.eh_frame:000000000000D717                 db  0Eh
.eh_frame:000000000000D718                 db    8
.eh_frame:000000000000D719                 db  49h ; I
.eh_frame:000000000000D71A                 db  0Bh
.eh_frame:000000000000D71B                 db    0
.eh_frame:000000000000D71C                 db    0
.eh_frame:000000000000D71D                 db    0
.eh_frame:000000000000D71E                 db    0
.eh_frame:000000000000D71F                 db    0
.eh_frame:000000000000D720                 db  10h
.eh_frame:000000000000D721                 db    0
.eh_frame:000000000000D722                 db    0
.eh_frame:000000000000D723                 db    0
.eh_frame:000000000000D724                 db 0CCh
.eh_frame:000000000000D725                 db    6
.eh_frame:000000000000D726                 db    0
.eh_frame:000000000000D727                 db    0
.eh_frame:000000000000D728                 db  78h ; x
.eh_frame:000000000000D729                 db  7Dh ; }
.eh_frame:000000000000D72A                 db 0FFh
.eh_frame:000000000000D72B                 db 0FFh
.eh_frame:000000000000D72C                 db  93h
.eh_frame:000000000000D72D                 db    0
.eh_frame:000000000000D72E                 db    0
.eh_frame:000000000000D72F                 db    0
.eh_frame:000000000000D730                 db    0
.eh_frame:000000000000D731                 db    0
.eh_frame:000000000000D732                 db    0
.eh_frame:000000000000D733                 db    0
.eh_frame:000000000000D734                 db  10h
.eh_frame:000000000000D735                 db    0
.eh_frame:000000000000D736                 db    0
.eh_frame:000000000000D737                 db    0
.eh_frame:000000000000D738                 db 0E0h
.eh_frame:000000000000D739                 db    6
.eh_frame:000000000000D73A                 db    0
.eh_frame:000000000000D73B                 db    0
.eh_frame:000000000000D73C                 db    4
.eh_frame:000000000000D73D                 db  7Eh ; ~
.eh_frame:000000000000D73E                 db 0FFh
.eh_frame:000000000000D73F                 db 0FFh
.eh_frame:000000000000D740                 db  10h
.eh_frame:000000000000D741                 db    0
.eh_frame:000000000000D742                 db    0
.eh_frame:000000000000D743                 db    0
.eh_frame:000000000000D744                 db    0
.eh_frame:000000000000D745                 db    0
.eh_frame:000000000000D746                 db    0
.eh_frame:000000000000D747                 db    0
.eh_frame:000000000000D748                 db  10h
.eh_frame:000000000000D749                 db    0
.eh_frame:000000000000D74A                 db    0
.eh_frame:000000000000D74B                 db    0
.eh_frame:000000000000D74C                 db 0F4h
.eh_frame:000000000000D74D                 db    6
.eh_frame:000000000000D74E                 db    0
.eh_frame:000000000000D74F                 db    0
.eh_frame:000000000000D750                 db    0
.eh_frame:000000000000D751                 db  7Eh ; ~
.eh_frame:000000000000D752                 db 0FFh
.eh_frame:000000000000D753                 db 0FFh
.eh_frame:000000000000D754                 db    7
.eh_frame:000000000000D755                 db    0
.eh_frame:000000000000D756                 db    0
.eh_frame:000000000000D757                 db    0
.eh_frame:000000000000D758                 db    0
.eh_frame:000000000000D759                 db    0
.eh_frame:000000000000D75A                 db    0
.eh_frame:000000000000D75B                 db    0
.eh_frame:000000000000D75C                 db  18h
.eh_frame:000000000000D75D                 db    0
.eh_frame:000000000000D75E                 db    0
.eh_frame:000000000000D75F                 db    0
.eh_frame:000000000000D760                 db    8
.eh_frame:000000000000D761                 db    7
.eh_frame:000000000000D762                 db    0
.eh_frame:000000000000D763                 db    0
.eh_frame:000000000000D764                 db 0FCh
.eh_frame:000000000000D765                 db  7Dh ; }
.eh_frame:000000000000D766                 db 0FFh
.eh_frame:000000000000D767                 db 0FFh
.eh_frame:000000000000D768                 db  22h ; "
.eh_frame:000000000000D769                 db    0
.eh_frame:000000000000D76A                 db    0
.eh_frame:000000000000D76B                 db    0
.eh_frame:000000000000D76C                 db    0
.eh_frame:000000000000D76D                 db  41h ; A
.eh_frame:000000000000D76E                 db  0Eh
.eh_frame:000000000000D76F                 db  10h
.eh_frame:000000000000D770                 db  83h
.eh_frame:000000000000D771                 db    2
.eh_frame:000000000000D772                 db  5Bh ; [
.eh_frame:000000000000D773                 db  0Ah
.eh_frame:000000000000D774                 db  0Eh
.eh_frame:000000000000D775                 db    8
.eh_frame:000000000000D776                 db  41h ; A
.eh_frame:000000000000D777                 db  0Bh
.eh_frame:000000000000D778                 db  5Ch ; \
.eh_frame:000000000000D779                 db    0
.eh_frame:000000000000D77A                 db    0
.eh_frame:000000000000D77B                 db    0
.eh_frame:000000000000D77C                 db  24h ; $
.eh_frame:000000000000D77D                 db    7
.eh_frame:000000000000D77E                 db    0
.eh_frame:000000000000D77F                 db    0
.eh_frame:000000000000D780                 db  10h
.eh_frame:000000000000D781                 db  7Eh ; ~
.eh_frame:000000000000D782                 db 0FFh
.eh_frame:000000000000D783                 db 0FFh
.eh_frame:000000000000D784                 db  1Eh
.eh_frame:000000000000D785                 db    1
.eh_frame:000000000000D786                 db    0
.eh_frame:000000000000D787                 db    0
.eh_frame:000000000000D788                 db    0
.eh_frame:000000000000D789                 db  42h ; B
.eh_frame:000000000000D78A                 db  0Eh
.eh_frame:000000000000D78B                 db  10h
.eh_frame:000000000000D78C                 db  8Eh
.eh_frame:000000000000D78D                 db    2
.eh_frame:000000000000D78E                 db  42h ; B
.eh_frame:000000000000D78F                 db  0Eh
.eh_frame:000000000000D790                 db  18h
.eh_frame:000000000000D791                 db  8Dh
.eh_frame:000000000000D792                 db    3
.eh_frame:000000000000D793                 db  45h ; E
.eh_frame:000000000000D794                 db  0Eh
.eh_frame:000000000000D795                 db  20h
.eh_frame:000000000000D796                 db  8Ch
.eh_frame:000000000000D797                 db    4
.eh_frame:000000000000D798                 db  41h ; A
.eh_frame:000000000000D799                 db  0Eh
.eh_frame:000000000000D79A                 db  28h ; (
.eh_frame:000000000000D79B                 db  86h
.eh_frame:000000000000D79C                 db    5
.eh_frame:000000000000D79D                 db  44h ; D
.eh_frame:000000000000D79E                 db  0Eh
.eh_frame:000000000000D79F                 db  30h ; 0
.eh_frame:000000000000D7A0                 db  83h
.eh_frame:000000000000D7A1                 db    6
.eh_frame:000000000000D7A2                 db    2
.eh_frame:000000000000D7A3                 db 0A1h
.eh_frame:000000000000D7A4                 db  0Ah
.eh_frame:000000000000D7A5                 db  0Eh
.eh_frame:000000000000D7A6                 db  28h ; (
.eh_frame:000000000000D7A7                 db  44h ; D
.eh_frame:000000000000D7A8                 db  0Eh
.eh_frame:000000000000D7A9                 db  20h
.eh_frame:000000000000D7AA                 db  42h ; B
.eh_frame:000000000000D7AB                 db  0Eh
.eh_frame:000000000000D7AC                 db  18h
.eh_frame:000000000000D7AD                 db  42h ; B
.eh_frame:000000000000D7AE                 db  0Eh
.eh_frame:000000000000D7AF                 db  10h
.eh_frame:000000000000D7B0                 db  42h ; B
.eh_frame:000000000000D7B1                 db  0Eh
.eh_frame:000000000000D7B2                 db    8
.eh_frame:000000000000D7B3                 db  47h ; G
.eh_frame:000000000000D7B4                 db  0Bh
.eh_frame:000000000000D7B5                 db  71h ; q
.eh_frame:000000000000D7B6                 db  0Ah
.eh_frame:000000000000D7B7                 db  0Eh
.eh_frame:000000000000D7B8                 db  28h ; (
.eh_frame:000000000000D7B9                 db  41h ; A
.eh_frame:000000000000D7BA                 db  0Eh
.eh_frame:000000000000D7BB                 db  20h
.eh_frame:000000000000D7BC                 db  42h ; B
.eh_frame:000000000000D7BD                 db  0Eh
.eh_frame:000000000000D7BE                 db  18h
.eh_frame:000000000000D7BF                 db  42h ; B
.eh_frame:000000000000D7C0                 db  0Eh
.eh_frame:000000000000D7C1                 db  10h
.eh_frame:000000000000D7C2                 db  42h ; B
.eh_frame:000000000000D7C3                 db  0Eh
.eh_frame:000000000000D7C4                 db    8
.eh_frame:000000000000D7C5                 db  48h ; H
.eh_frame:000000000000D7C6                 db  0Bh
.eh_frame:000000000000D7C7                 db  53h ; S
.eh_frame:000000000000D7C8                 db  0Eh
.eh_frame:000000000000D7C9                 db  28h ; (
.eh_frame:000000000000D7CA                 db  44h ; D
.eh_frame:000000000000D7CB                 db  0Eh
.eh_frame:000000000000D7CC                 db  20h
.eh_frame:000000000000D7CD                 db  42h ; B
.eh_frame:000000000000D7CE                 db  0Eh
.eh_frame:000000000000D7CF                 db  18h
.eh_frame:000000000000D7D0                 db  42h ; B
.eh_frame:000000000000D7D1                 db  0Eh
.eh_frame:000000000000D7D2                 db  10h
.eh_frame:000000000000D7D3                 db  42h ; B
.eh_frame:000000000000D7D4                 db  0Eh
.eh_frame:000000000000D7D5                 db    8
.eh_frame:000000000000D7D6                 db    0
.eh_frame:000000000000D7D7                 db    0
.eh_frame:000000000000D7D8                 db  10h
.eh_frame:000000000000D7D9                 db    0
.eh_frame:000000000000D7DA                 db    0
.eh_frame:000000000000D7DB                 db    0
.eh_frame:000000000000D7DC                 db  84h
.eh_frame:000000000000D7DD                 db    7
.eh_frame:000000000000D7DE                 db    0
.eh_frame:000000000000D7DF                 db    0
.eh_frame:000000000000D7E0                 db 0D0h
.eh_frame:000000000000D7E1                 db  7Eh ; ~
.eh_frame:000000000000D7E2                 db 0FFh
.eh_frame:000000000000D7E3                 db 0FFh
.eh_frame:000000000000D7E4                 db  77h ; w
.eh_frame:000000000000D7E5                 db    0
.eh_frame:000000000000D7E6                 db    0
.eh_frame:000000000000D7E7                 db    0
.eh_frame:000000000000D7E8                 db    0
.eh_frame:000000000000D7E9                 db    0
.eh_frame:000000000000D7EA                 db    0
.eh_frame:000000000000D7EB                 db    0
.eh_frame:000000000000D7EC                 db  5Ch ; \
.eh_frame:000000000000D7ED                 db    0
.eh_frame:000000000000D7EE                 db    0
.eh_frame:000000000000D7EF                 db    0
.eh_frame:000000000000D7F0                 db  98h
.eh_frame:000000000000D7F1                 db    7
.eh_frame:000000000000D7F2                 db    0
.eh_frame:000000000000D7F3                 db    0
.eh_frame:000000000000D7F4                 db  3Ch ; <
.eh_frame:000000000000D7F5                 db  7Fh ; 
.eh_frame:000000000000D7F6                 db 0FFh
.eh_frame:000000000000D7F7                 db 0FFh
.eh_frame:000000000000D7F8                 db  40h ; @
.eh_frame:000000000000D7F9                 db    1
.eh_frame:000000000000D7FA                 db    0
.eh_frame:000000000000D7FB                 db    0
.eh_frame:000000000000D7FC                 db    0
.eh_frame:000000000000D7FD                 db  42h ; B
.eh_frame:000000000000D7FE                 db  0Eh
.eh_frame:000000000000D7FF                 db  10h
.eh_frame:000000000000D800                 db  8Fh
.eh_frame:000000000000D801                 db    2
.eh_frame:000000000000D802                 db  42h ; B
.eh_frame:000000000000D803                 db  0Eh
.eh_frame:000000000000D804                 db  18h
.eh_frame:000000000000D805                 db  8Eh
.eh_frame:000000000000D806                 db    3
.eh_frame:000000000000D807                 db  42h ; B
.eh_frame:000000000000D808                 db  0Eh
.eh_frame:000000000000D809                 db  20h
.eh_frame:000000000000D80A                 db  8Dh
.eh_frame:000000000000D80B                 db    4
.eh_frame:000000000000D80C                 db  42h ; B
.eh_frame:000000000000D80D                 db  0Eh
.eh_frame:000000000000D80E                 db  28h ; (
.eh_frame:000000000000D80F                 db  8Ch
.eh_frame:000000000000D810                 db    5
.eh_frame:000000000000D811                 db  41h ; A
.eh_frame:000000000000D812                 db  0Eh
.eh_frame:000000000000D813                 db  30h ; 0
.eh_frame:000000000000D814                 db  86h
.eh_frame:000000000000D815                 db    6
.eh_frame:000000000000D816                 db  41h ; A
.eh_frame:000000000000D817                 db  0Eh
.eh_frame:000000000000D818                 db  38h ; 8
.eh_frame:000000000000D819                 db  83h
.eh_frame:000000000000D81A                 db    7
.eh_frame:000000000000D81B                 db  44h ; D
.eh_frame:000000000000D81C                 db  0Eh
.eh_frame:000000000000D81D                 db  40h ; @
.eh_frame:000000000000D81E                 db    2
.eh_frame:000000000000D81F                 db 0EEh
.eh_frame:000000000000D820                 db  0Ah
.eh_frame:000000000000D821                 db  0Eh
.eh_frame:000000000000D822                 db  38h ; 8
.eh_frame:000000000000D823                 db  46h ; F
.eh_frame:000000000000D824                 db  0Eh
.eh_frame:000000000000D825                 db  30h ; 0
.eh_frame:000000000000D826                 db  41h ; A
.eh_frame:000000000000D827                 db  0Eh
.eh_frame:000000000000D828                 db  28h ; (
.eh_frame:000000000000D829                 db  42h ; B
.eh_frame:000000000000D82A                 db  0Eh
.eh_frame:000000000000D82B                 db  20h
.eh_frame:000000000000D82C                 db  42h ; B
.eh_frame:000000000000D82D                 db  0Eh
.eh_frame:000000000000D82E                 db  18h
.eh_frame:000000000000D82F                 db  42h ; B
.eh_frame:000000000000D830                 db  0Eh
.eh_frame:000000000000D831                 db  10h
.eh_frame:000000000000D832                 db  42h ; B
.eh_frame:000000000000D833                 db  0Eh
.eh_frame:000000000000D834                 db    8
.eh_frame:000000000000D835                 db  45h ; E
.eh_frame:000000000000D836                 db  0Bh
.eh_frame:000000000000D837                 db  63h ; c
.eh_frame:000000000000D838                 db  0Eh
.eh_frame:000000000000D839                 db  38h ; 8
.eh_frame:000000000000D83A                 db  43h ; C
.eh_frame:000000000000D83B                 db  0Eh
.eh_frame:000000000000D83C                 db  30h ; 0
.eh_frame:000000000000D83D                 db  41h ; A
.eh_frame:000000000000D83E                 db  0Eh
.eh_frame:000000000000D83F                 db  28h ; (
.eh_frame:000000000000D840                 db  42h ; B
.eh_frame:000000000000D841                 db  0Eh
.eh_frame:000000000000D842                 db  20h
.eh_frame:000000000000D843                 db  42h ; B
.eh_frame:000000000000D844                 db  0Eh
.eh_frame:000000000000D845                 db  18h
.eh_frame:000000000000D846                 db  42h ; B
.eh_frame:000000000000D847                 db  0Eh
.eh_frame:000000000000D848                 db  10h
.eh_frame:000000000000D849                 db  42h ; B
.eh_frame:000000000000D84A                 db  0Eh
.eh_frame:000000000000D84B                 db    8
.eh_frame:000000000000D84C                 db  10h
.eh_frame:000000000000D84D                 db    0
.eh_frame:000000000000D84E                 db    0
.eh_frame:000000000000D84F                 db    0
.eh_frame:000000000000D850                 db 0F8h
.eh_frame:000000000000D851                 db    7
.eh_frame:000000000000D852                 db    0
.eh_frame:000000000000D853                 db    0
.eh_frame:000000000000D854                 db  1Ch
.eh_frame:000000000000D855                 db  80h
.eh_frame:000000000000D856                 db 0FFh
.eh_frame:000000000000D857                 db 0FFh
.eh_frame:000000000000D858                 db    5
.eh_frame:000000000000D859                 db    0
.eh_frame:000000000000D85A                 db    0
.eh_frame:000000000000D85B                 db    0
.eh_frame:000000000000D85C                 db    0
.eh_frame:000000000000D85D                 db    0
.eh_frame:000000000000D85E                 db    0
.eh_frame:000000000000D85F                 db    0
.eh_frame:000000000000D860                 db  10h
.eh_frame:000000000000D861                 db    0
.eh_frame:000000000000D862                 db    0
.eh_frame:000000000000D863                 db    0
.eh_frame:000000000000D864                 db  0Ch
.eh_frame:000000000000D865                 db    8
.eh_frame:000000000000D866                 db    0
.eh_frame:000000000000D867                 db    0
.eh_frame:000000000000D868                 db  18h
.eh_frame:000000000000D869                 db  80h
.eh_frame:000000000000D86A                 db 0FFh
.eh_frame:000000000000D86B                 db 0FFh
.eh_frame:000000000000D86C                 db    5
.eh_frame:000000000000D86D                 db    0
.eh_frame:000000000000D86E                 db    0
.eh_frame:000000000000D86F                 db    0
.eh_frame:000000000000D870                 db    0
.eh_frame:000000000000D871                 db    0
.eh_frame:000000000000D872                 db    0
.eh_frame:000000000000D873                 db    0
.eh_frame:000000000000D874                 db  10h
.eh_frame:000000000000D875                 db    0
.eh_frame:000000000000D876                 db    0
.eh_frame:000000000000D877                 db    0
.eh_frame:000000000000D878                 db  20h
.eh_frame:000000000000D879                 db    8
.eh_frame:000000000000D87A                 db    0
.eh_frame:000000000000D87B                 db    0
.eh_frame:000000000000D87C                 db  14h
.eh_frame:000000000000D87D                 db  80h
.eh_frame:000000000000D87E                 db 0FFh
.eh_frame:000000000000D87F                 db 0FFh
.eh_frame:000000000000D880                 db    5
.eh_frame:000000000000D881                 db    0
.eh_frame:000000000000D882                 db    0
.eh_frame:000000000000D883                 db    0
.eh_frame:000000000000D884                 db    0
.eh_frame:000000000000D885                 db    0
.eh_frame:000000000000D886                 db    0
.eh_frame:000000000000D887                 db    0
.eh_frame:000000000000D888                 db  10h
.eh_frame:000000000000D889                 db    0
.eh_frame:000000000000D88A                 db    0
.eh_frame:000000000000D88B                 db    0
.eh_frame:000000000000D88C                 db  34h ; 4
.eh_frame:000000000000D88D                 db    8
.eh_frame:000000000000D88E                 db    0
.eh_frame:000000000000D88F                 db    0
.eh_frame:000000000000D890                 db  10h
.eh_frame:000000000000D891                 db  80h
.eh_frame:000000000000D892                 db 0FFh
.eh_frame:000000000000D893                 db 0FFh
.eh_frame:000000000000D894                 db  49h ; I
.eh_frame:000000000000D895                 db    0
.eh_frame:000000000000D896                 db    0
.eh_frame:000000000000D897                 db    0
.eh_frame:000000000000D898                 db    0
.eh_frame:000000000000D899                 db    0
.eh_frame:000000000000D89A                 db    0
.eh_frame:000000000000D89B                 db    0
.eh_frame:000000000000D89C                 db  10h
.eh_frame:000000000000D89D                 db    0
.eh_frame:000000000000D89E                 db    0
.eh_frame:000000000000D89F                 db    0
.eh_frame:000000000000D8A0                 db  48h ; H
.eh_frame:000000000000D8A1                 db    8
.eh_frame:000000000000D8A2                 db    0
.eh_frame:000000000000D8A3                 db    0
.eh_frame:000000000000D8A4                 db  4Ch ; L
.eh_frame:000000000000D8A5                 db  80h
.eh_frame:000000000000D8A6                 db 0FFh
.eh_frame:000000000000D8A7                 db 0FFh
.eh_frame:000000000000D8A8                 db  58h ; X
.eh_frame:000000000000D8A9                 db    0
.eh_frame:000000000000D8AA                 db    0
.eh_frame:000000000000D8AB                 db    0
.eh_frame:000000000000D8AC                 db    0
.eh_frame:000000000000D8AD                 db    0
.eh_frame:000000000000D8AE                 db    0
.eh_frame:000000000000D8AF                 db    0
.eh_frame:000000000000D8B0                 db  38h ; 8
.eh_frame:000000000000D8B1                 db    0
.eh_frame:000000000000D8B2                 db    0
.eh_frame:000000000000D8B3                 db    0
.eh_frame:000000000000D8B4                 db  5Ch ; \
.eh_frame:000000000000D8B5                 db    8
.eh_frame:000000000000D8B6                 db    0
.eh_frame:000000000000D8B7                 db    0
.eh_frame:000000000000D8B8                 db  98h
.eh_frame:000000000000D8B9                 db  80h
.eh_frame:000000000000D8BA                 db 0FFh
.eh_frame:000000000000D8BB                 db 0FFh
.eh_frame:000000000000D8BC                 db  47h ; G
.eh_frame:000000000000D8BD                 db    1
.eh_frame:000000000000D8BE                 db    0
.eh_frame:000000000000D8BF                 db    0
.eh_frame:000000000000D8C0                 db    0
.eh_frame:000000000000D8C1                 db  42h ; B
.eh_frame:000000000000D8C2                 db  0Eh
.eh_frame:000000000000D8C3                 db  10h
.eh_frame:000000000000D8C4                 db  8Dh
.eh_frame:000000000000D8C5                 db    2
.eh_frame:000000000000D8C6                 db  42h ; B
.eh_frame:000000000000D8C7                 db  0Eh
.eh_frame:000000000000D8C8                 db  18h
.eh_frame:000000000000D8C9                 db  8Ch
.eh_frame:000000000000D8CA                 db    3
.eh_frame:000000000000D8CB                 db  44h ; D
.eh_frame:000000000000D8CC                 db  0Eh
.eh_frame:000000000000D8CD                 db  20h
.eh_frame:000000000000D8CE                 db  86h
.eh_frame:000000000000D8CF                 db    4
.eh_frame:000000000000D8D0                 db  41h ; A
.eh_frame:000000000000D8D1                 db  0Eh
.eh_frame:000000000000D8D2                 db  28h ; (
.eh_frame:000000000000D8D3                 db  83h
.eh_frame:000000000000D8D4                 db    5
.eh_frame:000000000000D8D5                 db  46h ; F
.eh_frame:000000000000D8D6                 db  0Eh
.eh_frame:000000000000D8D7                 db  30h ; 0
.eh_frame:000000000000D8D8                 db    2
.eh_frame:000000000000D8D9                 db 0CDh
.eh_frame:000000000000D8DA                 db  0Ah
.eh_frame:000000000000D8DB                 db  0Eh
.eh_frame:000000000000D8DC                 db  28h ; (
.eh_frame:000000000000D8DD                 db  47h ; G
.eh_frame:000000000000D8DE                 db  0Eh
.eh_frame:000000000000D8DF                 db  20h
.eh_frame:000000000000D8E0                 db  41h ; A
.eh_frame:000000000000D8E1                 db  0Eh
.eh_frame:000000000000D8E2                 db  18h
.eh_frame:000000000000D8E3                 db  42h ; B
.eh_frame:000000000000D8E4                 db  0Eh
.eh_frame:000000000000D8E5                 db  10h
.eh_frame:000000000000D8E6                 db  42h ; B
.eh_frame:000000000000D8E7                 db  0Eh
.eh_frame:000000000000D8E8                 db    8
.eh_frame:000000000000D8E9                 db  58h ; X
.eh_frame:000000000000D8EA                 db  0Bh
.eh_frame:000000000000D8EB                 db    0
.eh_frame:000000000000D8EC                 db  34h ; 4
.eh_frame:000000000000D8ED                 db    0
.eh_frame:000000000000D8EE                 db    0
.eh_frame:000000000000D8EF                 db    0
.eh_frame:000000000000D8F0                 db  98h
.eh_frame:000000000000D8F1                 db    8
.eh_frame:000000000000D8F2                 db    0
.eh_frame:000000000000D8F3                 db    0
.eh_frame:000000000000D8F4                 db 0ACh
.eh_frame:000000000000D8F5                 db  81h
.eh_frame:000000000000D8F6                 db 0FFh
.eh_frame:000000000000D8F7                 db 0FFh
.eh_frame:000000000000D8F8                 db  5Bh ; [
.eh_frame:000000000000D8F9                 db    0
.eh_frame:000000000000D8FA                 db    0
.eh_frame:000000000000D8FB                 db    0
.eh_frame:000000000000D8FC                 db    0
.eh_frame:000000000000D8FD                 db  42h ; B
.eh_frame:000000000000D8FE                 db  0Eh
.eh_frame:000000000000D8FF                 db  10h
.eh_frame:000000000000D900                 db  8Ch
.eh_frame:000000000000D901                 db    2
.eh_frame:000000000000D902                 db  41h ; A
.eh_frame:000000000000D903                 db  0Eh
.eh_frame:000000000000D904                 db  18h
.eh_frame:000000000000D905                 db  86h
.eh_frame:000000000000D906                 db    3
.eh_frame:000000000000D907                 db  44h ; D
.eh_frame:000000000000D908                 db  0Eh
.eh_frame:000000000000D909                 db  20h
.eh_frame:000000000000D90A                 db  83h
.eh_frame:000000000000D90B                 db    4
.eh_frame:000000000000D90C                 db  79h ; y
.eh_frame:000000000000D90D                 db  0Ah
.eh_frame:000000000000D90E                 db  0Eh
.eh_frame:000000000000D90F                 db  18h
.eh_frame:000000000000D910                 db  44h ; D
.eh_frame:000000000000D911                 db  0Eh
.eh_frame:000000000000D912                 db  10h
.eh_frame:000000000000D913                 db  42h ; B
.eh_frame:000000000000D914                 db  0Eh
.eh_frame:000000000000D915                 db    8
.eh_frame:000000000000D916                 db  4Ah ; J
.eh_frame:000000000000D917                 db  0Bh
.eh_frame:000000000000D918                 db  44h ; D
.eh_frame:000000000000D919                 db  0Eh
.eh_frame:000000000000D91A                 db  18h
.eh_frame:000000000000D91B                 db  41h ; A
.eh_frame:000000000000D91C                 db  0Eh
.eh_frame:000000000000D91D                 db  10h
.eh_frame:000000000000D91E                 db  45h ; E
.eh_frame:000000000000D91F                 db  0Eh
.eh_frame:000000000000D920                 db    8
.eh_frame:000000000000D921                 db    0
.eh_frame:000000000000D922                 db    0
.eh_frame:000000000000D923                 db    0
.eh_frame:000000000000D924                 db  10h
.eh_frame:000000000000D925                 db    0
.eh_frame:000000000000D926                 db    0
.eh_frame:000000000000D927                 db    0
.eh_frame:000000000000D928                 db 0D0h
.eh_frame:000000000000D929                 db    8
.eh_frame:000000000000D92A                 db    0
.eh_frame:000000000000D92B                 db    0
.eh_frame:000000000000D92C                 db 0D4h
.eh_frame:000000000000D92D                 db  81h
.eh_frame:000000000000D92E                 db 0FFh
.eh_frame:000000000000D92F                 db 0FFh
.eh_frame:000000000000D930                 db  41h ; A
.eh_frame:000000000000D931                 db    0
.eh_frame:000000000000D932                 db    0
.eh_frame:000000000000D933                 db    0
.eh_frame:000000000000D934                 db    0
.eh_frame:000000000000D935                 db  7Ch ; |
.eh_frame:000000000000D936                 db  0Eh
.eh_frame:000000000000D937                 db  10h
.eh_frame:000000000000D938                 db  30h ; 0
.eh_frame:000000000000D939                 db    0
.eh_frame:000000000000D93A                 db    0
.eh_frame:000000000000D93B                 db    0
.eh_frame:000000000000D93C                 db 0E4h
.eh_frame:000000000000D93D                 db    8
.eh_frame:000000000000D93E                 db    0
.eh_frame:000000000000D93F                 db    0
.eh_frame:000000000000D940                 db  10h
.eh_frame:000000000000D941                 db  82h
.eh_frame:000000000000D942                 db 0FFh
.eh_frame:000000000000D943                 db 0FFh
.eh_frame:000000000000D944                 db  72h ; r
.eh_frame:000000000000D945                 db    0
.eh_frame:000000000000D946                 db    0
.eh_frame:000000000000D947                 db    0
.eh_frame:000000000000D948                 db    0
.eh_frame:000000000000D949                 db  41h ; A
.eh_frame:000000000000D94A                 db  0Eh
.eh_frame:000000000000D94B                 db  10h
.eh_frame:000000000000D94C                 db  86h
.eh_frame:000000000000D94D                 db    2
.eh_frame:000000000000D94E                 db  41h ; A
.eh_frame:000000000000D94F                 db  0Eh
.eh_frame:000000000000D950                 db  18h
.eh_frame:000000000000D951                 db  83h
.eh_frame:000000000000D952                 db    3
.eh_frame:000000000000D953                 db  4Ah ; J
.eh_frame:000000000000D954                 db  0Eh
.eh_frame:000000000000D955                 db  20h
.eh_frame:000000000000D956                 db    2
.eh_frame:000000000000D957                 db  53h ; S
.eh_frame:000000000000D958                 db  0Ah
.eh_frame:000000000000D959                 db  0Eh
.eh_frame:000000000000D95A                 db  18h
.eh_frame:000000000000D95B                 db  41h ; A
.eh_frame:000000000000D95C                 db  0Eh
.eh_frame:000000000000D95D                 db  10h
.eh_frame:000000000000D95E                 db  41h ; A
.eh_frame:000000000000D95F                 db  0Eh
.eh_frame:000000000000D960                 db    8
.eh_frame:000000000000D961                 db  47h ; G
.eh_frame:000000000000D962                 db  0Bh
.eh_frame:000000000000D963                 db  47h ; G
.eh_frame:000000000000D964                 db  0Eh
.eh_frame:000000000000D965                 db  18h
.eh_frame:000000000000D966                 db  41h ; A
.eh_frame:000000000000D967                 db  0Eh
.eh_frame:000000000000D968                 db  10h
.eh_frame:000000000000D969                 db  41h ; A
.eh_frame:000000000000D96A                 db  0Eh
.eh_frame:000000000000D96B                 db    8
.eh_frame:000000000000D96C                 db  10h
.eh_frame:000000000000D96D                 db    0
.eh_frame:000000000000D96E                 db    0
.eh_frame:000000000000D96F                 db    0
.eh_frame:000000000000D970                 db  18h
.eh_frame:000000000000D971                 db    9
.eh_frame:000000000000D972                 db    0
.eh_frame:000000000000D973                 db    0
.eh_frame:000000000000D974                 db  5Ch ; \
.eh_frame:000000000000D975                 db  82h
.eh_frame:000000000000D976                 db 0FFh
.eh_frame:000000000000D977                 db 0FFh
.eh_frame:000000000000D978                 db  65h ; e
.eh_frame:000000000000D979                 db    0
.eh_frame:000000000000D97A                 db    0
.eh_frame:000000000000D97B                 db    0
.eh_frame:000000000000D97C                 db    0
.eh_frame:000000000000D97D                 db    0
.eh_frame:000000000000D97E                 db    0
.eh_frame:000000000000D97F                 db    0
.eh_frame:000000000000D980                 db  48h ; H
.eh_frame:000000000000D981                 db    0
.eh_frame:000000000000D982                 db    0
.eh_frame:000000000000D983                 db    0
.eh_frame:000000000000D984                 db  2Ch ; ,
.eh_frame:000000000000D985                 db    9
.eh_frame:000000000000D986                 db    0
.eh_frame:000000000000D987                 db    0
.eh_frame:000000000000D988                 db 0B8h
.eh_frame:000000000000D989                 db  82h
.eh_frame:000000000000D98A                 db 0FFh
.eh_frame:000000000000D98B                 db 0FFh
.eh_frame:000000000000D98C                 db  6Ah ; j
.eh_frame:000000000000D98D                 db    0
.eh_frame:000000000000D98E                 db    0
.eh_frame:000000000000D98F                 db    0
.eh_frame:000000000000D990                 db    0
.eh_frame:000000000000D991                 db  42h ; B
.eh_frame:000000000000D992                 db  0Eh
.eh_frame:000000000000D993                 db  10h
.eh_frame:000000000000D994                 db  8Fh
.eh_frame:000000000000D995                 db    2
.eh_frame:000000000000D996                 db  42h ; B
.eh_frame:000000000000D997                 db  0Eh
.eh_frame:000000000000D998                 db  18h
.eh_frame:000000000000D999                 db  8Eh
.eh_frame:000000000000D99A                 db    3
.eh_frame:000000000000D99B                 db  42h ; B
.eh_frame:000000000000D99C                 db  0Eh
.eh_frame:000000000000D99D                 db  20h
.eh_frame:000000000000D99E                 db  8Dh
.eh_frame:000000000000D99F                 db    4
.eh_frame:000000000000D9A0                 db  42h ; B
.eh_frame:000000000000D9A1                 db  0Eh
.eh_frame:000000000000D9A2                 db  28h ; (
.eh_frame:000000000000D9A3                 db  8Ch
.eh_frame:000000000000D9A4                 db    5
.eh_frame:000000000000D9A5                 db  41h ; A
.eh_frame:000000000000D9A6                 db  0Eh
.eh_frame:000000000000D9A7                 db  30h ; 0
.eh_frame:000000000000D9A8                 db  86h
.eh_frame:000000000000D9A9                 db    6
.eh_frame:000000000000D9AA                 db  41h ; A
.eh_frame:000000000000D9AB                 db  0Eh
.eh_frame:000000000000D9AC                 db  38h ; 8
.eh_frame:000000000000D9AD                 db  83h
.eh_frame:000000000000D9AE                 db    7
.eh_frame:000000000000D9AF                 db  44h ; D
.eh_frame:000000000000D9B0                 db  0Eh
.eh_frame:000000000000D9B1                 db  40h ; @
.eh_frame:000000000000D9B2                 db    2
.eh_frame:000000000000D9B3                 db  4Ah ; J
.eh_frame:000000000000D9B4                 db  0Ah
.eh_frame:000000000000D9B5                 db  0Eh
.eh_frame:000000000000D9B6                 db  38h ; 8
.eh_frame:000000000000D9B7                 db  44h ; D
.eh_frame:000000000000D9B8                 db  0Eh
.eh_frame:000000000000D9B9                 db  30h ; 0
.eh_frame:000000000000D9BA                 db  41h ; A
.eh_frame:000000000000D9BB                 db  0Eh
.eh_frame:000000000000D9BC                 db  28h ; (
.eh_frame:000000000000D9BD                 db  42h ; B
.eh_frame:000000000000D9BE                 db  0Eh
.eh_frame:000000000000D9BF                 db  20h
.eh_frame:000000000000D9C0                 db  42h ; B
.eh_frame:000000000000D9C1                 db  0Eh
.eh_frame:000000000000D9C2                 db  18h
.eh_frame:000000000000D9C3                 db  42h ; B
.eh_frame:000000000000D9C4                 db  0Eh
.eh_frame:000000000000D9C5                 db  10h
.eh_frame:000000000000D9C6                 db  42h ; B
.eh_frame:000000000000D9C7                 db  0Eh
.eh_frame:000000000000D9C8                 db    8
.eh_frame:000000000000D9C9                 db  41h ; A
.eh_frame:000000000000D9CA                 db  0Bh
.eh_frame:000000000000D9CB                 db    0
.eh_frame:000000000000D9CC                 db  10h
.eh_frame:000000000000D9CD                 db    0
.eh_frame:000000000000D9CE                 db    0
.eh_frame:000000000000D9CF                 db    0
.eh_frame:000000000000D9D0                 db  78h ; x
.eh_frame:000000000000D9D1                 db    9
.eh_frame:000000000000D9D2                 db    0
.eh_frame:000000000000D9D3                 db    0
.eh_frame:000000000000D9D4                 db 0DCh
.eh_frame:000000000000D9D5                 db  82h
.eh_frame:000000000000D9D6                 db 0FFh
.eh_frame:000000000000D9D7                 db 0FFh
.eh_frame:000000000000D9D8                 db  31h ; 1
.eh_frame:000000000000D9D9                 db    0
.eh_frame:000000000000D9DA                 db    0
.eh_frame:000000000000D9DB                 db    0
.eh_frame:000000000000D9DC                 db    0
.eh_frame:000000000000D9DD                 db    0
.eh_frame:000000000000D9DE                 db    0
.eh_frame:000000000000D9DF                 db    0
.eh_frame:000000000000D9E0                 db  10h
.eh_frame:000000000000D9E1                 db    0
.eh_frame:000000000000D9E2                 db    0
.eh_frame:000000000000D9E3                 db    0
.eh_frame:000000000000D9E4                 db  8Ch
.eh_frame:000000000000D9E5                 db    9
.eh_frame:000000000000D9E6                 db    0
.eh_frame:000000000000D9E7                 db    0
.eh_frame:000000000000D9E8                 db    8
.eh_frame:000000000000D9E9                 db  83h
.eh_frame:000000000000D9EA                 db 0FFh
.eh_frame:000000000000D9EB                 db 0FFh
.eh_frame:000000000000D9EC                 db  20h
.eh_frame:000000000000D9ED                 db    0
.eh_frame:000000000000D9EE                 db    0
.eh_frame:000000000000D9EF                 db    0
.eh_frame:000000000000D9F0                 db    0
.eh_frame:000000000000D9F1                 db    0
.eh_frame:000000000000D9F2                 db    0
.eh_frame:000000000000D9F3                 db    0
.eh_frame:000000000000D9F4                 db  48h ; H
.eh_frame:000000000000D9F5                 db    0
.eh_frame:000000000000D9F6                 db    0
.eh_frame:000000000000D9F7                 db    0
.eh_frame:000000000000D9F8                 db 0A0h
.eh_frame:000000000000D9F9                 db    9
.eh_frame:000000000000D9FA                 db    0
.eh_frame:000000000000D9FB                 db    0
.eh_frame:000000000000D9FC                 db  14h
.eh_frame:000000000000D9FD                 db  83h
.eh_frame:000000000000D9FE                 db 0FFh
.eh_frame:000000000000D9FF                 db 0FFh
.eh_frame:000000000000DA00                 db 0B4h
.eh_frame:000000000000DA01                 db    1
.eh_frame:000000000000DA02                 db    0
.eh_frame:000000000000DA03                 db    0
.eh_frame:000000000000DA04                 db    0
.eh_frame:000000000000DA05                 db  42h ; B
.eh_frame:000000000000DA06                 db  0Eh
.eh_frame:000000000000DA07                 db  10h
.eh_frame:000000000000DA08                 db  8Fh
.eh_frame:000000000000DA09                 db    2
.eh_frame:000000000000DA0A                 db  42h ; B
.eh_frame:000000000000DA0B                 db  0Eh
.eh_frame:000000000000DA0C                 db  18h
.eh_frame:000000000000DA0D                 db  8Eh
.eh_frame:000000000000DA0E                 db    3
.eh_frame:000000000000DA0F                 db  49h ; I
.eh_frame:000000000000DA10                 db  0Eh
.eh_frame:000000000000DA11                 db  20h
.eh_frame:000000000000DA12                 db  8Dh
.eh_frame:000000000000DA13                 db    4
.eh_frame:000000000000DA14                 db  42h ; B
.eh_frame:000000000000DA15                 db  0Eh
.eh_frame:000000000000DA16                 db  28h ; (
.eh_frame:000000000000DA17                 db  8Ch
.eh_frame:000000000000DA18                 db    5
.eh_frame:000000000000DA19                 db  44h ; D
.eh_frame:000000000000DA1A                 db  0Eh
.eh_frame:000000000000DA1B                 db  30h ; 0
.eh_frame:000000000000DA1C                 db  86h
.eh_frame:000000000000DA1D                 db    6
.eh_frame:000000000000DA1E                 db  41h ; A
.eh_frame:000000000000DA1F                 db  0Eh
.eh_frame:000000000000DA20                 db  38h ; 8
.eh_frame:000000000000DA21                 db  83h
.eh_frame:000000000000DA22                 db    7
.eh_frame:000000000000DA23                 db  52h ; R
.eh_frame:000000000000DA24                 db  0Eh
.eh_frame:000000000000DA25                 db  40h ; @
.eh_frame:000000000000DA26                 db    2
.eh_frame:000000000000DA27                 db 0D8h
.eh_frame:000000000000DA28                 db  0Ah
.eh_frame:000000000000DA29                 db  0Eh
.eh_frame:000000000000DA2A                 db  38h ; 8
.eh_frame:000000000000DA2B                 db  44h ; D
.eh_frame:000000000000DA2C                 db  0Eh
.eh_frame:000000000000DA2D                 db  30h ; 0
.eh_frame:000000000000DA2E                 db  41h ; A
.eh_frame:000000000000DA2F                 db  0Eh
.eh_frame:000000000000DA30                 db  28h ; (
.eh_frame:000000000000DA31                 db  42h ; B
.eh_frame:000000000000DA32                 db  0Eh
.eh_frame:000000000000DA33                 db  20h
.eh_frame:000000000000DA34                 db  42h ; B
.eh_frame:000000000000DA35                 db  0Eh
.eh_frame:000000000000DA36                 db  18h
.eh_frame:000000000000DA37                 db  42h ; B
.eh_frame:000000000000DA38                 db  0Eh
.eh_frame:000000000000DA39                 db  10h
.eh_frame:000000000000DA3A                 db  42h ; B
.eh_frame:000000000000DA3B                 db  0Eh
.eh_frame:000000000000DA3C                 db    8
.eh_frame:000000000000DA3D                 db  45h ; E
.eh_frame:000000000000DA3E                 db  0Bh
.eh_frame:000000000000DA3F                 db    0
.eh_frame:000000000000DA40                 db  28h ; (
.eh_frame:000000000000DA41                 db    0
.eh_frame:000000000000DA42                 db    0
.eh_frame:000000000000DA43                 db    0
.eh_frame:000000000000DA44                 db 0ECh
.eh_frame:000000000000DA45                 db    9
.eh_frame:000000000000DA46                 db    0
.eh_frame:000000000000DA47                 db    0
.eh_frame:000000000000DA48                 db  88h
.eh_frame:000000000000DA49                 db  84h
.eh_frame:000000000000DA4A                 db 0FFh
.eh_frame:000000000000DA4B                 db 0FFh
.eh_frame:000000000000DA4C                 db  90h
.eh_frame:000000000000DA4D                 db    0
.eh_frame:000000000000DA4E                 db    0
.eh_frame:000000000000DA4F                 db    0
.eh_frame:000000000000DA50                 db    0
.eh_frame:000000000000DA51                 db  42h ; B
.eh_frame:000000000000DA52                 db  0Eh
.eh_frame:000000000000DA53                 db  10h
.eh_frame:000000000000DA54                 db  8Ch
.eh_frame:000000000000DA55                 db    2
.eh_frame:000000000000DA56                 db  41h ; A
.eh_frame:000000000000DA57                 db  0Eh
.eh_frame:000000000000DA58                 db  18h
.eh_frame:000000000000DA59                 db  86h
.eh_frame:000000000000DA5A                 db    3
.eh_frame:000000000000DA5B                 db  44h ; D
.eh_frame:000000000000DA5C                 db  0Eh
.eh_frame:000000000000DA5D                 db  20h
.eh_frame:000000000000DA5E                 db  83h
.eh_frame:000000000000DA5F                 db    4
.eh_frame:000000000000DA60                 db    2
.eh_frame:000000000000DA61                 db  85h
.eh_frame:000000000000DA62                 db  0Eh
.eh_frame:000000000000DA63                 db  18h
.eh_frame:000000000000DA64                 db  41h ; A
.eh_frame:000000000000DA65                 db  0Eh
.eh_frame:000000000000DA66                 db  10h
.eh_frame:000000000000DA67                 db  42h ; B
.eh_frame:000000000000DA68                 db  0Eh
.eh_frame:000000000000DA69                 db    8
.eh_frame:000000000000DA6A                 db    0
.eh_frame:000000000000DA6B                 db    0
.eh_frame:000000000000DA6C                 db  28h ; (
.eh_frame:000000000000DA6D                 db    0
.eh_frame:000000000000DA6E                 db    0
.eh_frame:000000000000DA6F                 db    0
.eh_frame:000000000000DA70                 db  18h
.eh_frame:000000000000DA71                 db  0Ah
.eh_frame:000000000000DA72                 db    0
.eh_frame:000000000000DA73                 db    0
.eh_frame:000000000000DA74                 db 0ECh
.eh_frame:000000000000DA75                 db  84h
.eh_frame:000000000000DA76                 db 0FFh
.eh_frame:000000000000DA77                 db 0FFh
.eh_frame:000000000000DA78                 db 0D6h
.eh_frame:000000000000DA79                 db    0
.eh_frame:000000000000DA7A                 db    0
.eh_frame:000000000000DA7B                 db    0
.eh_frame:000000000000DA7C                 db    0
.eh_frame:000000000000DA7D                 db  42h ; B
.eh_frame:000000000000DA7E                 db  0Eh
.eh_frame:000000000000DA7F                 db  10h
.eh_frame:000000000000DA80                 db  8Ch
.eh_frame:000000000000DA81                 db    2
.eh_frame:000000000000DA82                 db  41h ; A
.eh_frame:000000000000DA83                 db  0Eh
.eh_frame:000000000000DA84                 db  18h
.eh_frame:000000000000DA85                 db  86h
.eh_frame:000000000000DA86                 db    3
.eh_frame:000000000000DA87                 db  44h ; D
.eh_frame:000000000000DA88                 db  0Eh
.eh_frame:000000000000DA89                 db  20h
.eh_frame:000000000000DA8A                 db  83h
.eh_frame:000000000000DA8B                 db    4
.eh_frame:000000000000DA8C                 db    2
.eh_frame:000000000000DA8D                 db 0C4h
.eh_frame:000000000000DA8E                 db  0Eh
.eh_frame:000000000000DA8F                 db  18h
.eh_frame:000000000000DA90                 db  44h ; D
.eh_frame:000000000000DA91                 db  0Eh
.eh_frame:000000000000DA92                 db  10h
.eh_frame:000000000000DA93                 db  42h ; B
.eh_frame:000000000000DA94                 db  0Eh
.eh_frame:000000000000DA95                 db    8
.eh_frame:000000000000DA96                 db    0
.eh_frame:000000000000DA97                 db    0
.eh_frame:000000000000DA98                 db  34h ; 4
.eh_frame:000000000000DA99                 db    0
.eh_frame:000000000000DA9A                 db    0
.eh_frame:000000000000DA9B                 db    0
.eh_frame:000000000000DA9C                 db  44h ; D
.eh_frame:000000000000DA9D                 db  0Ah
.eh_frame:000000000000DA9E                 db    0
.eh_frame:000000000000DA9F                 db    0
.eh_frame:000000000000DAA0                 db 0A0h
.eh_frame:000000000000DAA1                 db  85h
.eh_frame:000000000000DAA2                 db 0FFh
.eh_frame:000000000000DAA3                 db 0FFh
.eh_frame:000000000000DAA4                 db  3Eh ; >
.eh_frame:000000000000DAA5                 db    2
.eh_frame:000000000000DAA6                 db    0
.eh_frame:000000000000DAA7                 db    0
.eh_frame:000000000000DAA8                 db    0
.eh_frame:000000000000DAA9                 db  42h ; B
.eh_frame:000000000000DAAA                 db  0Eh
.eh_frame:000000000000DAAB                 db  10h
.eh_frame:000000000000DAAC                 db  8Ch
.eh_frame:000000000000DAAD                 db    2
.eh_frame:000000000000DAAE                 db  41h ; A
.eh_frame:000000000000DAAF                 db  0Eh
.eh_frame:000000000000DAB0                 db  18h
.eh_frame:000000000000DAB1                 db  86h
.eh_frame:000000000000DAB2                 db    3
.eh_frame:000000000000DAB3                 db  44h ; D
.eh_frame:000000000000DAB4                 db  0Eh
.eh_frame:000000000000DAB5                 db  20h
.eh_frame:000000000000DAB6                 db  83h
.eh_frame:000000000000DAB7                 db    4
.eh_frame:000000000000DAB8                 db  44h ; D
.eh_frame:000000000000DAB9                 db  0Eh
.eh_frame:000000000000DABA                 db  80h
.eh_frame:000000000000DABB                 db    1
.eh_frame:000000000000DABC                 db    3
.eh_frame:000000000000DABD                 db  91h
.eh_frame:000000000000DABE                 db    1
.eh_frame:000000000000DABF                 db  0Ah
.eh_frame:000000000000DAC0                 db  0Eh
.eh_frame:000000000000DAC1                 db  20h
.eh_frame:000000000000DAC2                 db  41h ; A
.eh_frame:000000000000DAC3                 db  0Eh
.eh_frame:000000000000DAC4                 db  18h
.eh_frame:000000000000DAC5                 db  41h ; A
.eh_frame:000000000000DAC6                 db  0Eh
.eh_frame:000000000000DAC7                 db  10h
.eh_frame:000000000000DAC8                 db  42h ; B
.eh_frame:000000000000DAC9                 db  0Eh
.eh_frame:000000000000DACA                 db    8
.eh_frame:000000000000DACB                 db  48h ; H
.eh_frame:000000000000DACC                 db  0Bh
.eh_frame:000000000000DACD                 db    0
.eh_frame:000000000000DACE                 db    0
.eh_frame:000000000000DACF                 db    0
.eh_frame:000000000000DAD0                 db  38h ; 8
.eh_frame:000000000000DAD1                 db    0
.eh_frame:000000000000DAD2                 db    0
.eh_frame:000000000000DAD3                 db    0
.eh_frame:000000000000DAD4                 db  7Ch ; |
.eh_frame:000000000000DAD5                 db  0Ah
.eh_frame:000000000000DAD6                 db    0
.eh_frame:000000000000DAD7                 db    0
.eh_frame:000000000000DAD8                 db 0A8h
.eh_frame:000000000000DAD9                 db  87h
.eh_frame:000000000000DADA                 db 0FFh
.eh_frame:000000000000DADB                 db 0FFh
.eh_frame:000000000000DADC                 db  84h
.eh_frame:000000000000DADD                 db    2
.eh_frame:000000000000DADE                 db    0
.eh_frame:000000000000DADF                 db    0
.eh_frame:000000000000DAE0                 db    0
.eh_frame:000000000000DAE1                 db  42h ; B
.eh_frame:000000000000DAE2                 db  0Eh
.eh_frame:000000000000DAE3                 db  10h
.eh_frame:000000000000DAE4                 db  8Dh
.eh_frame:000000000000DAE5                 db    2
.eh_frame:000000000000DAE6                 db  42h ; B
.eh_frame:000000000000DAE7                 db  0Eh
.eh_frame:000000000000DAE8                 db  18h
.eh_frame:000000000000DAE9                 db  8Ch
.eh_frame:000000000000DAEA                 db    3
.eh_frame:000000000000DAEB                 db  41h ; A
.eh_frame:000000000000DAEC                 db  0Eh
.eh_frame:000000000000DAED                 db  20h
.eh_frame:000000000000DAEE                 db  86h
.eh_frame:000000000000DAEF                 db    4
.eh_frame:000000000000DAF0                 db  41h ; A
.eh_frame:000000000000DAF1                 db  0Eh
.eh_frame:000000000000DAF2                 db  28h ; (
.eh_frame:000000000000DAF3                 db  83h
.eh_frame:000000000000DAF4                 db    5
.eh_frame:000000000000DAF5                 db  44h ; D
.eh_frame:000000000000DAF6                 db  0Eh
.eh_frame:000000000000DAF7                 db  40h ; @
.eh_frame:000000000000DAF8                 db    2
.eh_frame:000000000000DAF9                 db  5Ah ; Z
.eh_frame:000000000000DAFA                 db  0Ah
.eh_frame:000000000000DAFB                 db  0Eh
.eh_frame:000000000000DAFC                 db  28h ; (
.eh_frame:000000000000DAFD                 db  41h ; A
.eh_frame:000000000000DAFE                 db  0Eh
.eh_frame:000000000000DAFF                 db  20h
.eh_frame:000000000000DB00                 db  41h ; A
.eh_frame:000000000000DB01                 db  0Eh
.eh_frame:000000000000DB02                 db  18h
.eh_frame:000000000000DB03                 db  42h ; B
.eh_frame:000000000000DB04                 db  0Eh
.eh_frame:000000000000DB05                 db  10h
.eh_frame:000000000000DB06                 db  42h ; B
.eh_frame:000000000000DB07                 db  0Eh
.eh_frame:000000000000DB08                 db    8
.eh_frame:000000000000DB09                 db  46h ; F
.eh_frame:000000000000DB0A                 db  0Bh
.eh_frame:000000000000DB0B                 db    0
.eh_frame:000000000000DB0C                 db  20h
.eh_frame:000000000000DB0D                 db    0
.eh_frame:000000000000DB0E                 db    0
.eh_frame:000000000000DB0F                 db    0
.eh_frame:000000000000DB10                 db 0B8h
.eh_frame:000000000000DB11                 db  0Ah
.eh_frame:000000000000DB12                 db    0
.eh_frame:000000000000DB13                 db    0
.eh_frame:000000000000DB14                 db 0FCh
.eh_frame:000000000000DB15                 db  89h
.eh_frame:000000000000DB16                 db 0FFh
.eh_frame:000000000000DB17                 db 0FFh
.eh_frame:000000000000DB18                 db  59h ; Y
.eh_frame:000000000000DB19                 db    0
.eh_frame:000000000000DB1A                 db    0
.eh_frame:000000000000DB1B                 db    0
.eh_frame:000000000000DB1C                 db    0
.eh_frame:000000000000DB1D                 db  41h ; A
.eh_frame:000000000000DB1E                 db  0Eh
.eh_frame:000000000000DB1F                 db  10h
.eh_frame:000000000000DB20                 db  83h
.eh_frame:000000000000DB21                 db    2
.eh_frame:000000000000DB22                 db  47h ; G
.eh_frame:000000000000DB23                 db  0Eh
.eh_frame:000000000000DB24                 db  20h
.eh_frame:000000000000DB25                 db  7Ch ; |
.eh_frame:000000000000DB26                 db  0Ah
.eh_frame:000000000000DB27                 db  0Eh
.eh_frame:000000000000DB28                 db  10h
.eh_frame:000000000000DB29                 db  41h ; A
.eh_frame:000000000000DB2A                 db  0Eh
.eh_frame:000000000000DB2B                 db    8
.eh_frame:000000000000DB2C                 db  4Bh ; K
.eh_frame:000000000000DB2D                 db  0Bh
.eh_frame:000000000000DB2E                 db    0
.eh_frame:000000000000DB2F                 db    0
.eh_frame:000000000000DB30                 db  34h ; 4
.eh_frame:000000000000DB31                 db    0
.eh_frame:000000000000DB32                 db    0
.eh_frame:000000000000DB33                 db    0
.eh_frame:000000000000DB34                 db 0DCh
.eh_frame:000000000000DB35                 db  0Ah
.eh_frame:000000000000DB36                 db    0
.eh_frame:000000000000DB37                 db    0
.eh_frame:000000000000DB38                 db  38h ; 8
.eh_frame:000000000000DB39                 db  8Ah
.eh_frame:000000000000DB3A                 db 0FFh
.eh_frame:000000000000DB3B                 db 0FFh
.eh_frame:000000000000DB3C                 db    3
.eh_frame:000000000000DB3D                 db    2
.eh_frame:000000000000DB3E                 db    0
.eh_frame:000000000000DB3F                 db    0
.eh_frame:000000000000DB40                 db    0
.eh_frame:000000000000DB41                 db  42h ; B
.eh_frame:000000000000DB42                 db  0Eh
.eh_frame:000000000000DB43                 db  10h
.eh_frame:000000000000DB44                 db  8Ch
.eh_frame:000000000000DB45                 db    2
.eh_frame:000000000000DB46                 db  41h ; A
.eh_frame:000000000000DB47                 db  0Eh
.eh_frame:000000000000DB48                 db  18h
.eh_frame:000000000000DB49                 db  86h
.eh_frame:000000000000DB4A                 db    3
.eh_frame:000000000000DB4B                 db  46h ; F
.eh_frame:000000000000DB4C                 db  0Eh
.eh_frame:000000000000DB4D                 db  20h
.eh_frame:000000000000DB4E                 db  83h
.eh_frame:000000000000DB4F                 db    4
.eh_frame:000000000000DB50                 db  47h ; G
.eh_frame:000000000000DB51                 db  0Eh
.eh_frame:000000000000DB52                 db  30h ; 0
.eh_frame:000000000000DB53                 db    2
.eh_frame:000000000000DB54                 db  4Ah ; J
.eh_frame:000000000000DB55                 db  0Ah
.eh_frame:000000000000DB56                 db  0Eh
.eh_frame:000000000000DB57                 db  20h
.eh_frame:000000000000DB58                 db  41h ; A
.eh_frame:000000000000DB59                 db  0Eh
.eh_frame:000000000000DB5A                 db  18h
.eh_frame:000000000000DB5B                 db  41h ; A
.eh_frame:000000000000DB5C                 db  0Eh
.eh_frame:000000000000DB5D                 db  10h
.eh_frame:000000000000DB5E                 db  42h ; B
.eh_frame:000000000000DB5F                 db  0Eh
.eh_frame:000000000000DB60                 db    8
.eh_frame:000000000000DB61                 db  42h ; B
.eh_frame:000000000000DB62                 db  0Bh
.eh_frame:000000000000DB63                 db    0
.eh_frame:000000000000DB64                 db    0
.eh_frame:000000000000DB65                 db    0
.eh_frame:000000000000DB66                 db    0
.eh_frame:000000000000DB67                 db    0
.eh_frame:000000000000DB68                 db  24h ; $
.eh_frame:000000000000DB69                 db    0
.eh_frame:000000000000DB6A                 db    0
.eh_frame:000000000000DB6B                 db    0
.eh_frame:000000000000DB6C                 db  14h
.eh_frame:000000000000DB6D                 db  0Bh
.eh_frame:000000000000DB6E                 db    0
.eh_frame:000000000000DB6F                 db    0
.eh_frame:000000000000DB70                 db  10h
.eh_frame:000000000000DB71                 db  8Ch
.eh_frame:000000000000DB72                 db 0FFh
.eh_frame:000000000000DB73                 db 0FFh
.eh_frame:000000000000DB74                 db  27h ; '
.eh_frame:000000000000DB75                 db    0
.eh_frame:000000000000DB76                 db    0
.eh_frame:000000000000DB77                 db    0
.eh_frame:000000000000DB78                 db    0
.eh_frame:000000000000DB79                 db  41h ; A
.eh_frame:000000000000DB7A                 db  0Eh
.eh_frame:000000000000DB7B                 db  10h
.eh_frame:000000000000DB7C                 db  86h
.eh_frame:000000000000DB7D                 db    2
.eh_frame:000000000000DB7E                 db  41h ; A
.eh_frame:000000000000DB7F                 db  0Eh
.eh_frame:000000000000DB80                 db  18h
.eh_frame:000000000000DB81                 db  83h
.eh_frame:000000000000DB82                 db    3
.eh_frame:000000000000DB83                 db  4Ah ; J
.eh_frame:000000000000DB84                 db  0Eh
.eh_frame:000000000000DB85                 db  20h
.eh_frame:000000000000DB86                 db  52h ; R
.eh_frame:000000000000DB87                 db  0Eh
.eh_frame:000000000000DB88                 db  18h
.eh_frame:000000000000DB89                 db  44h ; D
.eh_frame:000000000000DB8A                 db  0Eh
.eh_frame:000000000000DB8B                 db  10h
.eh_frame:000000000000DB8C                 db  41h ; A
.eh_frame:000000000000DB8D                 db  0Eh
.eh_frame:000000000000DB8E                 db    8
.eh_frame:000000000000DB8F                 db    0
.eh_frame:000000000000DB90                 db  10h
.eh_frame:000000000000DB91                 db    0
.eh_frame:000000000000DB92                 db    0
.eh_frame:000000000000DB93                 db    0
.eh_frame:000000000000DB94                 db  3Ch ; <
.eh_frame:000000000000DB95                 db  0Bh
.eh_frame:000000000000DB96                 db    0
.eh_frame:000000000000DB97                 db    0
.eh_frame:000000000000DB98                 db  18h
.eh_frame:000000000000DB99                 db  8Ch
.eh_frame:000000000000DB9A                 db 0FFh
.eh_frame:000000000000DB9B                 db 0FFh
.eh_frame:000000000000DB9C                 db  0Dh
.eh_frame:000000000000DB9D                 db    0
.eh_frame:000000000000DB9E                 db    0
.eh_frame:000000000000DB9F                 db    0
.eh_frame:000000000000DBA0                 db    0
.eh_frame:000000000000DBA1                 db    0
.eh_frame:000000000000DBA2                 db    0
.eh_frame:000000000000DBA3                 db    0
.eh_frame:000000000000DBA4                 db  14h
.eh_frame:000000000000DBA5                 db    0
.eh_frame:000000000000DBA6                 db    0
.eh_frame:000000000000DBA7                 db    0
.eh_frame:000000000000DBA8                 db  50h ; P
.eh_frame:000000000000DBA9                 db  0Bh
.eh_frame:000000000000DBAA                 db    0
.eh_frame:000000000000DBAB                 db    0
.eh_frame:000000000000DBAC                 db  14h
.eh_frame:000000000000DBAD                 db  8Ch
.eh_frame:000000000000DBAE                 db 0FFh
.eh_frame:000000000000DBAF                 db 0FFh
.eh_frame:000000000000DBB0                 db  2Eh ; .
.eh_frame:000000000000DBB1                 db    0
.eh_frame:000000000000DBB2                 db    0
.eh_frame:000000000000DBB3                 db    0
.eh_frame:000000000000DBB4                 db    0
.eh_frame:000000000000DBB5                 db  5Eh ; ^
.eh_frame:000000000000DBB6                 db  0Eh
.eh_frame:000000000000DBB7                 db  10h
.eh_frame:000000000000DBB8                 db  4Fh ; O
.eh_frame:000000000000DBB9                 db  0Eh
.eh_frame:000000000000DBBA                 db    8
.eh_frame:000000000000DBBB                 db    0
.eh_frame:000000000000DBBC                 db  14h
.eh_frame:000000000000DBBD                 db    0
.eh_frame:000000000000DBBE                 db    0
.eh_frame:000000000000DBBF                 db    0
.eh_frame:000000000000DBC0                 db  68h ; h
.eh_frame:000000000000DBC1                 db  0Bh
.eh_frame:000000000000DBC2                 db    0
.eh_frame:000000000000DBC3                 db    0
.eh_frame:000000000000DBC4                 db  2Ch ; ,
.eh_frame:000000000000DBC5                 db  8Ch
.eh_frame:000000000000DBC6                 db 0FFh
.eh_frame:000000000000DBC7                 db 0FFh
.eh_frame:000000000000DBC8                 db  33h ; 3
.eh_frame:000000000000DBC9                 db    0
.eh_frame:000000000000DBCA                 db    0
.eh_frame:000000000000DBCB                 db    0
.eh_frame:000000000000DBCC                 db    0
.eh_frame:000000000000DBCD                 db  5Eh ; ^
.eh_frame:000000000000DBCE                 db  0Eh
.eh_frame:000000000000DBCF                 db  10h
.eh_frame:000000000000DBD0                 db  54h ; T
.eh_frame:000000000000DBD1                 db  0Eh
.eh_frame:000000000000DBD2                 db    8
.eh_frame:000000000000DBD3                 db    0
.eh_frame:000000000000DBD4                 db  18h
.eh_frame:000000000000DBD5                 db    0
.eh_frame:000000000000DBD6                 db    0
.eh_frame:000000000000DBD7                 db    0
.eh_frame:000000000000DBD8                 db  80h
.eh_frame:000000000000DBD9                 db  0Bh
.eh_frame:000000000000DBDA                 db    0
.eh_frame:000000000000DBDB                 db    0
.eh_frame:000000000000DBDC                 db  54h ; T
.eh_frame:000000000000DBDD                 db  8Ch
.eh_frame:000000000000DBDE                 db 0FFh
.eh_frame:000000000000DBDF                 db 0FFh
.eh_frame:000000000000DBE0                 db  15h
.eh_frame:000000000000DBE1                 db    0
.eh_frame:000000000000DBE2                 db    0
.eh_frame:000000000000DBE3                 db    0
.eh_frame:000000000000DBE4                 db    0
.eh_frame:000000000000DBE5                 db  41h ; A
.eh_frame:000000000000DBE6                 db  0Eh
.eh_frame:000000000000DBE7                 db  10h
.eh_frame:000000000000DBE8                 db  83h
.eh_frame:000000000000DBE9                 db    2
.eh_frame:000000000000DBEA                 db  4Fh ; O
.eh_frame:000000000000DBEB                 db  0Eh
.eh_frame:000000000000DBEC                 db    8
.eh_frame:000000000000DBED                 db    0
.eh_frame:000000000000DBEE                 db    0
.eh_frame:000000000000DBEF                 db    0
.eh_frame:000000000000DBF0                 db  1Ch
.eh_frame:000000000000DBF1                 db    0
.eh_frame:000000000000DBF2                 db    0
.eh_frame:000000000000DBF3                 db    0
.eh_frame:000000000000DBF4                 db  9Ch
.eh_frame:000000000000DBF5                 db  0Bh
.eh_frame:000000000000DBF6                 db    0
.eh_frame:000000000000DBF7                 db    0
.eh_frame:000000000000DBF8                 db  58h ; X
.eh_frame:000000000000DBF9                 db  8Ch
.eh_frame:000000000000DBFA                 db 0FFh
.eh_frame:000000000000DBFB                 db 0FFh
.eh_frame:000000000000DBFC                 db  6Eh ; n
.eh_frame:000000000000DBFD                 db    0
.eh_frame:000000000000DBFE                 db    0
.eh_frame:000000000000DBFF                 db    0
.eh_frame:000000000000DC00                 db    0
.eh_frame:000000000000DC01                 db  44h ; D
.eh_frame:000000000000DC02                 db  0Eh
.eh_frame:000000000000DC03                 db  60h ; `
.eh_frame:000000000000DC04                 db  7Eh ; ~
.eh_frame:000000000000DC05                 db  0Ah
.eh_frame:000000000000DC06                 db  0Eh
.eh_frame:000000000000DC07                 db    8
.eh_frame:000000000000DC08                 db  46h ; F
.eh_frame:000000000000DC09                 db  0Bh
.eh_frame:000000000000DC0A                 db    0
.eh_frame:000000000000DC0B                 db    0
.eh_frame:000000000000DC0C                 db    0
.eh_frame:000000000000DC0D                 db    0
.eh_frame:000000000000DC0E                 db    0
.eh_frame:000000000000DC0F                 db    0
.eh_frame:000000000000DC10                 db  5Ch ; \
.eh_frame:000000000000DC11                 db    0
.eh_frame:000000000000DC12                 db    0
.eh_frame:000000000000DC13                 db    0
.eh_frame:000000000000DC14                 db 0BCh
.eh_frame:000000000000DC15                 db  0Bh
.eh_frame:000000000000DC16                 db    0
.eh_frame:000000000000DC17                 db    0
.eh_frame:000000000000DC18                 db 0A8h
.eh_frame:000000000000DC19                 db  8Ch
.eh_frame:000000000000DC1A                 db 0FFh
.eh_frame:000000000000DC1B                 db 0FFh
.eh_frame:000000000000DC1C                 db  80h
.eh_frame:000000000000DC1D                 db    0
.eh_frame:000000000000DC1E                 db    0
.eh_frame:000000000000DC1F                 db    0
.eh_frame:000000000000DC20                 db    0
.eh_frame:000000000000DC21                 db  42h ; B
.eh_frame:000000000000DC22                 db  0Eh
.eh_frame:000000000000DC23                 db  10h
.eh_frame:000000000000DC24                 db  8Dh
.eh_frame:000000000000DC25                 db    2
.eh_frame:000000000000DC26                 db  42h ; B
.eh_frame:000000000000DC27                 db  0Eh
.eh_frame:000000000000DC28                 db  18h
.eh_frame:000000000000DC29                 db  8Ch
.eh_frame:000000000000DC2A                 db    3
.eh_frame:000000000000DC2B                 db  47h ; G
.eh_frame:000000000000DC2C                 db  0Eh
.eh_frame:000000000000DC2D                 db  20h
.eh_frame:000000000000DC2E                 db  86h
.eh_frame:000000000000DC2F                 db    4
.eh_frame:000000000000DC30                 db  41h ; A
.eh_frame:000000000000DC31                 db  0Eh
.eh_frame:000000000000DC32                 db  28h ; (
.eh_frame:000000000000DC33                 db  83h
.eh_frame:000000000000DC34                 db    5
.eh_frame:000000000000DC35                 db  49h ; I
.eh_frame:000000000000DC36                 db  0Eh
.eh_frame:000000000000DC37                 db  30h ; 0
.eh_frame:000000000000DC38                 db  62h ; b
.eh_frame:000000000000DC39                 db  0Ah
.eh_frame:000000000000DC3A                 db  0Eh
.eh_frame:000000000000DC3B                 db  28h ; (
.eh_frame:000000000000DC3C                 db  44h ; D
.eh_frame:000000000000DC3D                 db  0Eh
.eh_frame:000000000000DC3E                 db  20h
.eh_frame:000000000000DC3F                 db  41h ; A
.eh_frame:000000000000DC40                 db  0Eh
.eh_frame:000000000000DC41                 db  18h
.eh_frame:000000000000DC42                 db  42h ; B
.eh_frame:000000000000DC43                 db  0Eh
.eh_frame:000000000000DC44                 db  10h
.eh_frame:000000000000DC45                 db  42h ; B
.eh_frame:000000000000DC46                 db  0Eh
.eh_frame:000000000000DC47                 db    8
.eh_frame:000000000000DC48                 db  48h ; H
.eh_frame:000000000000DC49                 db  0Bh
.eh_frame:000000000000DC4A                 db  5Dh ; ]
.eh_frame:000000000000DC4B                 db  0Ah
.eh_frame:000000000000DC4C                 db  0Eh
.eh_frame:000000000000DC4D                 db  28h ; (
.eh_frame:000000000000DC4E                 db  41h ; A
.eh_frame:000000000000DC4F                 db  0Eh
.eh_frame:000000000000DC50                 db  20h
.eh_frame:000000000000DC51                 db  41h ; A
.eh_frame:000000000000DC52                 db  0Eh
.eh_frame:000000000000DC53                 db  18h
.eh_frame:000000000000DC54                 db  42h ; B
.eh_frame:000000000000DC55                 db  0Eh
.eh_frame:000000000000DC56                 db  10h
.eh_frame:000000000000DC57                 db  42h ; B
.eh_frame:000000000000DC58                 db  0Eh
.eh_frame:000000000000DC59                 db    8
.eh_frame:000000000000DC5A                 db  45h ; E
.eh_frame:000000000000DC5B                 db  0Bh
.eh_frame:000000000000DC5C                 db  44h ; D
.eh_frame:000000000000DC5D                 db  0Eh
.eh_frame:000000000000DC5E                 db  28h ; (
.eh_frame:000000000000DC5F                 db  43h ; C
.eh_frame:000000000000DC60                 db  0Eh
.eh_frame:000000000000DC61                 db  20h
.eh_frame:000000000000DC62                 db  44h ; D
.eh_frame:000000000000DC63                 db  0Eh
.eh_frame:000000000000DC64                 db  18h
.eh_frame:000000000000DC65                 db  42h ; B
.eh_frame:000000000000DC66                 db  0Eh
.eh_frame:000000000000DC67                 db  10h
.eh_frame:000000000000DC68                 db  42h ; B
.eh_frame:000000000000DC69                 db  0Eh
.eh_frame:000000000000DC6A                 db    8
.eh_frame:000000000000DC6B                 db    0
.eh_frame:000000000000DC6C                 db    0
.eh_frame:000000000000DC6D                 db    0
.eh_frame:000000000000DC6E                 db    0
.eh_frame:000000000000DC6F                 db    0
.eh_frame:000000000000DC70                 db  1Ch
.eh_frame:000000000000DC71                 db    0
.eh_frame:000000000000DC72                 db    0
.eh_frame:000000000000DC73                 db    0
.eh_frame:000000000000DC74                 db  1Ch
.eh_frame:000000000000DC75                 db  0Ch
.eh_frame:000000000000DC76                 db    0
.eh_frame:000000000000DC77                 db    0
.eh_frame:000000000000DC78                 db 0C8h
.eh_frame:000000000000DC79                 db  8Ch
.eh_frame:000000000000DC7A                 db 0FFh
.eh_frame:000000000000DC7B                 db 0FFh
.eh_frame:000000000000DC7C                 db  9Fh
.eh_frame:000000000000DC7D                 db    0
.eh_frame:000000000000DC7E                 db    0
.eh_frame:000000000000DC7F                 db    0
.eh_frame:000000000000DC80                 db    0
.eh_frame:000000000000DC81                 db  44h ; D
.eh_frame:000000000000DC82                 db  0Eh
.eh_frame:000000000000DC83                 db  10h
.eh_frame:000000000000DC84                 db  83h
.eh_frame:000000000000DC85                 db    2
.eh_frame:000000000000DC86                 db    2
.eh_frame:000000000000DC87                 db  78h ; x
.eh_frame:000000000000DC88                 db  0Ah
.eh_frame:000000000000DC89                 db  0Eh
.eh_frame:000000000000DC8A                 db    8
.eh_frame:000000000000DC8B                 db  41h ; A
.eh_frame:000000000000DC8C                 db  0Bh
.eh_frame:000000000000DC8D                 db    0
.eh_frame:000000000000DC8E                 db    0
.eh_frame:000000000000DC8F                 db    0
.eh_frame:000000000000DC90                 db  40h ; @
.eh_frame:000000000000DC91                 db    0
.eh_frame:000000000000DC92                 db    0
.eh_frame:000000000000DC93                 db    0
.eh_frame:000000000000DC94                 db  3Ch ; <
.eh_frame:000000000000DC95                 db  0Ch
.eh_frame:000000000000DC96                 db    0
.eh_frame:000000000000DC97                 db    0
.eh_frame:000000000000DC98                 db  48h ; H
.eh_frame:000000000000DC99                 db  8Dh
.eh_frame:000000000000DC9A                 db 0FFh
.eh_frame:000000000000DC9B                 db 0FFh
.eh_frame:000000000000DC9C                 db 0E7h
.eh_frame:000000000000DC9D                 db    0
.eh_frame:000000000000DC9E                 db    0
.eh_frame:000000000000DC9F                 db    0
.eh_frame:000000000000DCA0                 db    0
.eh_frame:000000000000DCA1                 db  41h ; A
.eh_frame:000000000000DCA2                 db  0Eh
.eh_frame:000000000000DCA3                 db  10h
.eh_frame:000000000000DCA4                 db  86h
.eh_frame:000000000000DCA5                 db    2
.eh_frame:000000000000DCA6                 db  41h ; A
.eh_frame:000000000000DCA7                 db  0Eh
.eh_frame:000000000000DCA8                 db  18h
.eh_frame:000000000000DCA9                 db  83h
.eh_frame:000000000000DCAA                 db    3
.eh_frame:000000000000DCAB                 db  49h ; I
.eh_frame:000000000000DCAC                 db  0Eh
.eh_frame:000000000000DCAD                 db  20h
.eh_frame:000000000000DCAE                 db  6Eh ; n
.eh_frame:000000000000DCAF                 db  0Ah
.eh_frame:000000000000DCB0                 db  0Eh
.eh_frame:000000000000DCB1                 db  18h
.eh_frame:000000000000DCB2                 db  41h ; A
.eh_frame:000000000000DCB3                 db  0Eh
.eh_frame:000000000000DCB4                 db  10h
.eh_frame:000000000000DCB5                 db  41h ; A
.eh_frame:000000000000DCB6                 db  0Eh
.eh_frame:000000000000DCB7                 db    8
.eh_frame:000000000000DCB8                 db  45h ; E
.eh_frame:000000000000DCB9                 db  0Bh
.eh_frame:000000000000DCBA                 db    2
.eh_frame:000000000000DCBB                 db  4Ah ; J
.eh_frame:000000000000DCBC                 db  0Ah
.eh_frame:000000000000DCBD                 db  0Eh
.eh_frame:000000000000DCBE                 db  18h
.eh_frame:000000000000DCBF                 db  41h ; A
.eh_frame:000000000000DCC0                 db  0Eh
.eh_frame:000000000000DCC1                 db  10h
.eh_frame:000000000000DCC2                 db  41h ; A
.eh_frame:000000000000DCC3                 db  0Eh
.eh_frame:000000000000DCC4                 db    8
.eh_frame:000000000000DCC5                 db  44h ; D
.eh_frame:000000000000DCC6                 db  0Bh
.eh_frame:000000000000DCC7                 db    2
.eh_frame:000000000000DCC8                 db  54h ; T
.eh_frame:000000000000DCC9                 db  0Eh
.eh_frame:000000000000DCCA                 db  18h
.eh_frame:000000000000DCCB                 db  41h ; A
.eh_frame:000000000000DCCC                 db  0Eh
.eh_frame:000000000000DCCD                 db  10h
.eh_frame:000000000000DCCE                 db  41h ; A
.eh_frame:000000000000DCCF                 db  0Eh
.eh_frame:000000000000DCD0                 db    8
.eh_frame:000000000000DCD1                 db    0
.eh_frame:000000000000DCD2                 db    0
.eh_frame:000000000000DCD3                 db    0
.eh_frame:000000000000DCD4                 db  74h ; t
.eh_frame:000000000000DCD5                 db    0
.eh_frame:000000000000DCD6                 db    0
.eh_frame:000000000000DCD7                 db    0
.eh_frame:000000000000DCD8                 db  80h
.eh_frame:000000000000DCD9                 db  0Ch
.eh_frame:000000000000DCDA                 db    0
.eh_frame:000000000000DCDB                 db    0
.eh_frame:000000000000DCDC                 db 0F4h
.eh_frame:000000000000DCDD                 db  8Dh
.eh_frame:000000000000DCDE                 db 0FFh
.eh_frame:000000000000DCDF                 db 0FFh
.eh_frame:000000000000DCE0                 db  34h ; 4
.eh_frame:000000000000DCE1                 db  12h
.eh_frame:000000000000DCE2                 db    0
.eh_frame:000000000000DCE3                 db    0
.eh_frame:000000000000DCE4                 db    0
.eh_frame:000000000000DCE5                 db  42h ; B
.eh_frame:000000000000DCE6                 db  0Eh
.eh_frame:000000000000DCE7                 db  10h
.eh_frame:000000000000DCE8                 db  8Fh
.eh_frame:000000000000DCE9                 db    2
.eh_frame:000000000000DCEA                 db  42h ; B
.eh_frame:000000000000DCEB                 db  0Eh
.eh_frame:000000000000DCEC                 db  18h
.eh_frame:000000000000DCED                 db  8Eh
.eh_frame:000000000000DCEE                 db    3
.eh_frame:000000000000DCEF                 db  45h ; E
.eh_frame:000000000000DCF0                 db  0Eh
.eh_frame:000000000000DCF1                 db  20h
.eh_frame:000000000000DCF2                 db  8Dh
.eh_frame:000000000000DCF3                 db    4
.eh_frame:000000000000DCF4                 db  42h ; B
.eh_frame:000000000000DCF5                 db  0Eh
.eh_frame:000000000000DCF6                 db  28h ; (
.eh_frame:000000000000DCF7                 db  8Ch
.eh_frame:000000000000DCF8                 db    5
.eh_frame:000000000000DCF9                 db  44h ; D
.eh_frame:000000000000DCFA                 db  0Eh
.eh_frame:000000000000DCFB                 db  30h ; 0
.eh_frame:000000000000DCFC                 db  86h
.eh_frame:000000000000DCFD                 db    6
.eh_frame:000000000000DCFE                 db  41h ; A
.eh_frame:000000000000DCFF                 db  0Eh
.eh_frame:000000000000DD00                 db  38h ; 8
.eh_frame:000000000000DD01                 db  83h
.eh_frame:000000000000DD02                 db    7
.eh_frame:000000000000DD03                 db  53h ; S
.eh_frame:000000000000DD04                 db  0Eh
.eh_frame:000000000000DD05                 db 0F0h
.eh_frame:000000000000DD06                 db    1
.eh_frame:000000000000DD07                 db    3
.eh_frame:000000000000DD08                 db  81h
.eh_frame:000000000000DD09                 db  0Bh
.eh_frame:000000000000DD0A                 db  0Eh
.eh_frame:000000000000DD0B                 db 0F8h
.eh_frame:000000000000DD0C                 db    1
.eh_frame:000000000000DD0D                 db  4Ah ; J
.eh_frame:000000000000DD0E                 db  0Eh
.eh_frame:000000000000DD0F                 db  80h
.eh_frame:000000000000DD10                 db    2
.eh_frame:000000000000DD11                 db  44h ; D
.eh_frame:000000000000DD12                 db  0Eh
.eh_frame:000000000000DD13                 db  88h
.eh_frame:000000000000DD14                 db    2
.eh_frame:000000000000DD15                 db  45h ; E
.eh_frame:000000000000DD16                 db  0Eh
.eh_frame:000000000000DD17                 db  90h
.eh_frame:000000000000DD18                 db    2
.eh_frame:000000000000DD19                 db  5Fh ; _
.eh_frame:000000000000DD1A                 db  0Eh
.eh_frame:000000000000DD1B                 db 0F0h
.eh_frame:000000000000DD1C                 db    1
.eh_frame:000000000000DD1D                 db  64h ; d
.eh_frame:000000000000DD1E                 db  0Ah
.eh_frame:000000000000DD1F                 db  0Eh
.eh_frame:000000000000DD20                 db  38h ; 8
.eh_frame:000000000000DD21                 db  41h ; A
.eh_frame:000000000000DD22                 db  0Eh
.eh_frame:000000000000DD23                 db  30h ; 0
.eh_frame:000000000000DD24                 db  41h ; A
.eh_frame:000000000000DD25                 db  0Eh
.eh_frame:000000000000DD26                 db  28h ; (
.eh_frame:000000000000DD27                 db  42h ; B
.eh_frame:000000000000DD28                 db  0Eh
.eh_frame:000000000000DD29                 db  20h
.eh_frame:000000000000DD2A                 db  42h ; B
.eh_frame:000000000000DD2B                 db  0Eh
.eh_frame:000000000000DD2C                 db  18h
.eh_frame:000000000000DD2D                 db  42h ; B
.eh_frame:000000000000DD2E                 db  0Eh
.eh_frame:000000000000DD2F                 db  10h
.eh_frame:000000000000DD30                 db  42h ; B
.eh_frame:000000000000DD31                 db  0Eh
.eh_frame:000000000000DD32                 db    8
.eh_frame:000000000000DD33                 db  44h ; D
.eh_frame:000000000000DD34                 db  0Bh
.eh_frame:000000000000DD35                 db    3
.eh_frame:000000000000DD36                 db  99h
.eh_frame:000000000000DD37                 db    5
.eh_frame:000000000000DD38                 db  0Eh
.eh_frame:000000000000DD39                 db 0F8h
.eh_frame:000000000000DD3A                 db    1
.eh_frame:000000000000DD3B                 db  4Dh ; M
.eh_frame:000000000000DD3C                 db  0Eh
.eh_frame:000000000000DD3D                 db  80h
.eh_frame:000000000000DD3E                 db    2
.eh_frame:000000000000DD3F                 db  44h ; D
.eh_frame:000000000000DD40                 db  0Eh
.eh_frame:000000000000DD41                 db  88h
.eh_frame:000000000000DD42                 db    2
.eh_frame:000000000000DD43                 db  47h ; G
.eh_frame:000000000000DD44                 db  0Eh
.eh_frame:000000000000DD45                 db  90h
.eh_frame:000000000000DD46                 db    2
.eh_frame:000000000000DD47                 db  5Bh ; [
.eh_frame:000000000000DD48                 db  0Eh
.eh_frame:000000000000DD49                 db 0F0h
.eh_frame:000000000000DD4A                 db    1
.eh_frame:000000000000DD4B                 db    0
.eh_frame:000000000000DD4C                 db  68h ; h
.eh_frame:000000000000DD4D                 db    0
.eh_frame:000000000000DD4E                 db    0
.eh_frame:000000000000DD4F                 db    0
.eh_frame:000000000000DD50                 db 0F8h
.eh_frame:000000000000DD51                 db  0Ch
.eh_frame:000000000000DD52                 db    0
.eh_frame:000000000000DD53                 db    0
.eh_frame:000000000000DD54                 db 0BCh
.eh_frame:000000000000DD55                 db  9Fh
.eh_frame:000000000000DD56                 db 0FFh
.eh_frame:000000000000DD57                 db 0FFh
.eh_frame:000000000000DD58                 db 0ABh
.eh_frame:000000000000DD59                 db    1
.eh_frame:000000000000DD5A                 db    0
.eh_frame:000000000000DD5B                 db    0
.eh_frame:000000000000DD5C                 db    0
.eh_frame:000000000000DD5D                 db  42h ; B
.eh_frame:000000000000DD5E                 db  0Eh
.eh_frame:000000000000DD5F                 db  10h
.eh_frame:000000000000DD60                 db  8Fh
.eh_frame:000000000000DD61                 db    2
.eh_frame:000000000000DD62                 db  42h ; B
.eh_frame:000000000000DD63                 db  0Eh
.eh_frame:000000000000DD64                 db  18h
.eh_frame:000000000000DD65                 db  8Eh
.eh_frame:000000000000DD66                 db    3
.eh_frame:000000000000DD67                 db  45h ; E
.eh_frame:000000000000DD68                 db  0Eh
.eh_frame:000000000000DD69                 db  20h
.eh_frame:000000000000DD6A                 db  8Dh
.eh_frame:000000000000DD6B                 db    4
.eh_frame:000000000000DD6C                 db  42h ; B
.eh_frame:000000000000DD6D                 db  0Eh
.eh_frame:000000000000DD6E                 db  28h ; (
.eh_frame:000000000000DD6F                 db  8Ch
.eh_frame:000000000000DD70                 db    5
.eh_frame:000000000000DD71                 db  44h ; D
.eh_frame:000000000000DD72                 db  0Eh
.eh_frame:000000000000DD73                 db  30h ; 0
.eh_frame:000000000000DD74                 db  86h
.eh_frame:000000000000DD75                 db    6
.eh_frame:000000000000DD76                 db  41h ; A
.eh_frame:000000000000DD77                 db  0Eh
.eh_frame:000000000000DD78                 db  38h ; 8
.eh_frame:000000000000DD79                 db  83h
.eh_frame:000000000000DD7A                 db    7
.eh_frame:000000000000DD7B                 db  47h ; G
.eh_frame:000000000000DD7C                 db  0Eh
.eh_frame:000000000000DD7D                 db  60h ; `
.eh_frame:000000000000DD7E                 db    2
.eh_frame:000000000000DD7F                 db  99h
.eh_frame:000000000000DD80                 db  0Eh
.eh_frame:000000000000DD81                 db  68h ; h
.eh_frame:000000000000DD82                 db  5Fh ; _
.eh_frame:000000000000DD83                 db  0Eh
.eh_frame:000000000000DD84                 db  70h ; p
.eh_frame:000000000000DD85                 db  46h ; F
.eh_frame:000000000000DD86                 db  0Eh
.eh_frame:000000000000DD87                 db  78h ; x
.eh_frame:000000000000DD88                 db  42h ; B
.eh_frame:000000000000DD89                 db  0Eh
.eh_frame:000000000000DD8A                 db  80h
.eh_frame:000000000000DD8B                 db    1
.eh_frame:000000000000DD8C                 db  59h ; Y
.eh_frame:000000000000DD8D                 db  0Eh
.eh_frame:000000000000DD8E                 db  60h ; `
.eh_frame:000000000000DD8F                 db    2
.eh_frame:000000000000DD90                 db  40h ; @
.eh_frame:000000000000DD91                 db  0Eh
.eh_frame:000000000000DD92                 db  68h ; h
.eh_frame:000000000000DD93                 db  4Bh ; K
.eh_frame:000000000000DD94                 db  0Eh
.eh_frame:000000000000DD95                 db  70h ; p
.eh_frame:000000000000DD96                 db  43h ; C
.eh_frame:000000000000DD97                 db  0Eh
.eh_frame:000000000000DD98                 db  78h ; x
.eh_frame:000000000000DD99                 db  45h ; E
.eh_frame:000000000000DD9A                 db  0Eh
.eh_frame:000000000000DD9B                 db  80h
.eh_frame:000000000000DD9C                 db    1
.eh_frame:000000000000DD9D                 db  5Eh ; ^
.eh_frame:000000000000DD9E                 db  0Eh
.eh_frame:000000000000DD9F                 db  60h ; `
.eh_frame:000000000000DDA0                 db  4Ch ; L
.eh_frame:000000000000DDA1                 db  0Ah
.eh_frame:000000000000DDA2                 db  0Eh
.eh_frame:000000000000DDA3                 db  38h ; 8
.eh_frame:000000000000DDA4                 db  44h ; D
.eh_frame:000000000000DDA5                 db  0Eh
.eh_frame:000000000000DDA6                 db  30h ; 0
.eh_frame:000000000000DDA7                 db  41h ; A
.eh_frame:000000000000DDA8                 db  0Eh
.eh_frame:000000000000DDA9                 db  28h ; (
.eh_frame:000000000000DDAA                 db  42h ; B
.eh_frame:000000000000DDAB                 db  0Eh
.eh_frame:000000000000DDAC                 db  20h
.eh_frame:000000000000DDAD                 db  42h ; B
.eh_frame:000000000000DDAE                 db  0Eh
.eh_frame:000000000000DDAF                 db  18h
.eh_frame:000000000000DDB0                 db  42h ; B
.eh_frame:000000000000DDB1                 db  0Eh
.eh_frame:000000000000DDB2                 db  10h
.eh_frame:000000000000DDB3                 db  42h ; B
.eh_frame:000000000000DDB4                 db  0Eh
.eh_frame:000000000000DDB5                 db    8
.eh_frame:000000000000DDB6                 db  46h ; F
.eh_frame:000000000000DDB7                 db  0Bh
.eh_frame:000000000000DDB8                 db  28h ; (
.eh_frame:000000000000DDB9                 db    0
.eh_frame:000000000000DDBA                 db    0
.eh_frame:000000000000DDBB                 db    0
.eh_frame:000000000000DDBC                 db  64h ; d
.eh_frame:000000000000DDBD                 db  0Dh
.eh_frame:000000000000DDBE                 db    0
.eh_frame:000000000000DDBF                 db    0
.eh_frame:000000000000DDC0                 db    0
.eh_frame:000000000000DDC1                 db 0A1h
.eh_frame:000000000000DDC2                 db 0FFh
.eh_frame:000000000000DDC3                 db 0FFh
.eh_frame:000000000000DDC4                 db  36h ; 6
.eh_frame:000000000000DDC5                 db    0
.eh_frame:000000000000DDC6                 db    0
.eh_frame:000000000000DDC7                 db    0
.eh_frame:000000000000DDC8                 db    0
.eh_frame:000000000000DDC9                 db  42h ; B
.eh_frame:000000000000DDCA                 db  0Eh
.eh_frame:000000000000DDCB                 db  10h
.eh_frame:000000000000DDCC                 db  8Ch
.eh_frame:000000000000DDCD                 db    2
.eh_frame:000000000000DDCE                 db  41h ; A
.eh_frame:000000000000DDCF                 db  0Eh
.eh_frame:000000000000DDD0                 db  18h
.eh_frame:000000000000DDD1                 db  86h
.eh_frame:000000000000DDD2                 db    3
.eh_frame:000000000000DDD3                 db  41h ; A
.eh_frame:000000000000DDD4                 db  0Eh
.eh_frame:000000000000DDD5                 db  20h
.eh_frame:000000000000DDD6                 db  83h
.eh_frame:000000000000DDD7                 db    4
.eh_frame:000000000000DDD8                 db  6Eh ; n
.eh_frame:000000000000DDD9                 db  0Eh
.eh_frame:000000000000DDDA                 db  18h
.eh_frame:000000000000DDDB                 db  41h ; A
.eh_frame:000000000000DDDC                 db  0Eh
.eh_frame:000000000000DDDD                 db  10h
.eh_frame:000000000000DDDE                 db  42h ; B
.eh_frame:000000000000DDDF                 db  0Eh
.eh_frame:000000000000DDE0                 db    8
.eh_frame:000000000000DDE1                 db    0
.eh_frame:000000000000DDE2                 db    0
.eh_frame:000000000000DDE3                 db    0
.eh_frame:000000000000DDE4                 db  10h
.eh_frame:000000000000DDE5                 db    0
.eh_frame:000000000000DDE6                 db    0
.eh_frame:000000000000DDE7                 db    0
.eh_frame:000000000000DDE8                 db  90h
.eh_frame:000000000000DDE9                 db  0Dh
.eh_frame:000000000000DDEA                 db    0
.eh_frame:000000000000DDEB                 db    0
.eh_frame:000000000000DDEC                 db  14h
.eh_frame:000000000000DDED                 db 0A1h
.eh_frame:000000000000DDEE                 db 0FFh
.eh_frame:000000000000DDEF                 db 0FFh
.eh_frame:000000000000DDF0                 db  11h
.eh_frame:000000000000DDF1                 db    0
.eh_frame:000000000000DDF2                 db    0
.eh_frame:000000000000DDF3                 db    0
.eh_frame:000000000000DDF4                 db    0
.eh_frame:000000000000DDF5                 db    0
.eh_frame:000000000000DDF6                 db    0
.eh_frame:000000000000DDF7                 db    0
.eh_frame:000000000000DDF8                 db  10h
.eh_frame:000000000000DDF9                 db    0
.eh_frame:000000000000DDFA                 db    0
.eh_frame:000000000000DDFB                 db    0
.eh_frame:000000000000DDFC                 db 0A4h
.eh_frame:000000000000DDFD                 db  0Dh
.eh_frame:000000000000DDFE                 db    0
.eh_frame:000000000000DDFF                 db    0
.eh_frame:000000000000DE00                 db  20h
.eh_frame:000000000000DE01                 db 0A1h
.eh_frame:000000000000DE02                 db 0FFh
.eh_frame:000000000000DE03                 db 0FFh
.eh_frame:000000000000DE04                 db  11h
.eh_frame:000000000000DE05                 db    0
.eh_frame:000000000000DE06                 db    0
.eh_frame:000000000000DE07                 db    0
.eh_frame:000000000000DE08                 db    0
.eh_frame:000000000000DE09                 db    0
.eh_frame:000000000000DE0A                 db    0
.eh_frame:000000000000DE0B                 db    0
.eh_frame:000000000000DE0C                 db  10h
.eh_frame:000000000000DE0D                 db    0
.eh_frame:000000000000DE0E                 db    0
.eh_frame:000000000000DE0F                 db    0
.eh_frame:000000000000DE10                 db 0B8h
.eh_frame:000000000000DE11                 db  0Dh
.eh_frame:000000000000DE12                 db    0
.eh_frame:000000000000DE13                 db    0
.eh_frame:000000000000DE14                 db  2Ch ; ,
.eh_frame:000000000000DE15                 db 0A1h
.eh_frame:000000000000DE16                 db 0FFh
.eh_frame:000000000000DE17                 db 0FFh
.eh_frame:000000000000DE18                 db  35h ; 5
.eh_frame:000000000000DE19                 db    0
.eh_frame:000000000000DE1A                 db    0
.eh_frame:000000000000DE1B                 db    0
.eh_frame:000000000000DE1C                 db    0
.eh_frame:000000000000DE1D                 db    0
.eh_frame:000000000000DE1E                 db    0
.eh_frame:000000000000DE1F                 db    0
.eh_frame:000000000000DE20                 db  10h
.eh_frame:000000000000DE21                 db    0
.eh_frame:000000000000DE22                 db    0
.eh_frame:000000000000DE23                 db    0
.eh_frame:000000000000DE24                 db 0CCh
.eh_frame:000000000000DE25                 db  0Dh
.eh_frame:000000000000DE26                 db    0
.eh_frame:000000000000DE27                 db    0
.eh_frame:000000000000DE28                 db  58h ; X
.eh_frame:000000000000DE29                 db 0A1h
.eh_frame:000000000000DE2A                 db 0FFh
.eh_frame:000000000000DE2B                 db 0FFh
.eh_frame:000000000000DE2C                 db  15h
.eh_frame:000000000000DE2D                 db    0
.eh_frame:000000000000DE2E                 db    0
.eh_frame:000000000000DE2F                 db    0
.eh_frame:000000000000DE30                 db    0
.eh_frame:000000000000DE31                 db    0
.eh_frame:000000000000DE32                 db    0
.eh_frame:000000000000DE33                 db    0
.eh_frame:000000000000DE34                 db  10h
.eh_frame:000000000000DE35                 db    0
.eh_frame:000000000000DE36                 db    0
.eh_frame:000000000000DE37                 db    0
.eh_frame:000000000000DE38                 db 0E0h
.eh_frame:000000000000DE39                 db  0Dh
.eh_frame:000000000000DE3A                 db    0
.eh_frame:000000000000DE3B                 db    0
.eh_frame:000000000000DE3C                 db  64h ; d
.eh_frame:000000000000DE3D                 db 0A1h
.eh_frame:000000000000DE3E                 db 0FFh
.eh_frame:000000000000DE3F                 db 0FFh
.eh_frame:000000000000DE40                 db  30h ; 0
.eh_frame:000000000000DE41                 db    0
.eh_frame:000000000000DE42                 db    0
.eh_frame:000000000000DE43                 db    0
.eh_frame:000000000000DE44                 db    0
.eh_frame:000000000000DE45                 db  6Bh ; k
.eh_frame:000000000000DE46                 db  0Eh
.eh_frame:000000000000DE47                 db  10h
.eh_frame:000000000000DE48                 db  50h ; P
.eh_frame:000000000000DE49                 db    0
.eh_frame:000000000000DE4A                 db    0
.eh_frame:000000000000DE4B                 db    0
.eh_frame:000000000000DE4C                 db 0F4h
.eh_frame:000000000000DE4D                 db  0Dh
.eh_frame:000000000000DE4E                 db    0
.eh_frame:000000000000DE4F                 db    0
.eh_frame:000000000000DE50                 db  80h
.eh_frame:000000000000DE51                 db 0A1h
.eh_frame:000000000000DE52                 db 0FFh
.eh_frame:000000000000DE53                 db 0FFh
.eh_frame:000000000000DE54                 db  74h ; t
.eh_frame:000000000000DE55                 db    0
.eh_frame:000000000000DE56                 db    0
.eh_frame:000000000000DE57                 db    0
.eh_frame:000000000000DE58                 db    0
.eh_frame:000000000000DE59                 db  42h ; B
.eh_frame:000000000000DE5A                 db  0Eh
.eh_frame:000000000000DE5B                 db  10h
.eh_frame:000000000000DE5C                 db  8Fh
.eh_frame:000000000000DE5D                 db    2
.eh_frame:000000000000DE5E                 db  42h ; B
.eh_frame:000000000000DE5F                 db  0Eh
.eh_frame:000000000000DE60                 db  18h
.eh_frame:000000000000DE61                 db  8Eh
.eh_frame:000000000000DE62                 db    3
.eh_frame:000000000000DE63                 db  49h ; I
.eh_frame:000000000000DE64                 db  0Eh
.eh_frame:000000000000DE65                 db  20h
.eh_frame:000000000000DE66                 db  8Dh
.eh_frame:000000000000DE67                 db    4
.eh_frame:000000000000DE68                 db  42h ; B
.eh_frame:000000000000DE69                 db  0Eh
.eh_frame:000000000000DE6A                 db  28h ; (
.eh_frame:000000000000DE6B                 db  8Ch
.eh_frame:000000000000DE6C                 db    5
.eh_frame:000000000000DE6D                 db  44h ; D
.eh_frame:000000000000DE6E                 db  0Eh
.eh_frame:000000000000DE6F                 db  30h ; 0
.eh_frame:000000000000DE70                 db  86h
.eh_frame:000000000000DE71                 db    6
.eh_frame:000000000000DE72                 db  41h ; A
.eh_frame:000000000000DE73                 db  0Eh
.eh_frame:000000000000DE74                 db  38h ; 8
.eh_frame:000000000000DE75                 db  83h
.eh_frame:000000000000DE76                 db    7
.eh_frame:000000000000DE77                 db  4Dh ; M
.eh_frame:000000000000DE78                 db  0Eh
.eh_frame:000000000000DE79                 db  50h ; P
.eh_frame:000000000000DE7A                 db  5Fh ; _
.eh_frame:000000000000DE7B                 db  0Eh
.eh_frame:000000000000DE7C                 db  58h ; X
.eh_frame:000000000000DE7D                 db  47h ; G
.eh_frame:000000000000DE7E                 db  0Eh
.eh_frame:000000000000DE7F                 db  60h ; `
.eh_frame:000000000000DE80                 db  46h ; F
.eh_frame:000000000000DE81                 db  0Eh
.eh_frame:000000000000DE82                 db  68h ; h
.eh_frame:000000000000DE83                 db  44h ; D
.eh_frame:000000000000DE84                 db  0Eh
.eh_frame:000000000000DE85                 db  70h ; p
.eh_frame:000000000000DE86                 db  58h ; X
.eh_frame:000000000000DE87                 db  0Eh
.eh_frame:000000000000DE88                 db  38h ; 8
.eh_frame:000000000000DE89                 db  41h ; A
.eh_frame:000000000000DE8A                 db  0Eh
.eh_frame:000000000000DE8B                 db  30h ; 0
.eh_frame:000000000000DE8C                 db  41h ; A
.eh_frame:000000000000DE8D                 db  0Eh
.eh_frame:000000000000DE8E                 db  28h ; (
.eh_frame:000000000000DE8F                 db  42h ; B
.eh_frame:000000000000DE90                 db  0Eh
.eh_frame:000000000000DE91                 db  20h
.eh_frame:000000000000DE92                 db  42h ; B
.eh_frame:000000000000DE93                 db  0Eh
.eh_frame:000000000000DE94                 db  18h
.eh_frame:000000000000DE95                 db  42h ; B
.eh_frame:000000000000DE96                 db  0Eh
.eh_frame:000000000000DE97                 db  10h
.eh_frame:000000000000DE98                 db  42h ; B
.eh_frame:000000000000DE99                 db  0Eh
.eh_frame:000000000000DE9A                 db    8
.eh_frame:000000000000DE9B                 db    0
.eh_frame:000000000000DE9C                 db  68h ; h
.eh_frame:000000000000DE9D                 db    0
.eh_frame:000000000000DE9E                 db    0
.eh_frame:000000000000DE9F                 db    0
.eh_frame:000000000000DEA0                 db  48h ; H
.eh_frame:000000000000DEA1                 db  0Eh
.eh_frame:000000000000DEA2                 db    0
.eh_frame:000000000000DEA3                 db    0
.eh_frame:000000000000DEA4                 db 0ACh
.eh_frame:000000000000DEA5                 db 0A1h
.eh_frame:000000000000DEA6                 db 0FFh
.eh_frame:000000000000DEA7                 db 0FFh
.eh_frame:000000000000DEA8                 db 0E3h
.eh_frame:000000000000DEA9                 db    0
.eh_frame:000000000000DEAA                 db    0
.eh_frame:000000000000DEAB                 db    0
.eh_frame:000000000000DEAC                 db    0
.eh_frame:000000000000DEAD                 db  42h ; B
.eh_frame:000000000000DEAE                 db  0Eh
.eh_frame:000000000000DEAF                 db  10h
.eh_frame:000000000000DEB0                 db  8Fh
.eh_frame:000000000000DEB1                 db    2
.eh_frame:000000000000DEB2                 db  42h ; B
.eh_frame:000000000000DEB3                 db  0Eh
.eh_frame:000000000000DEB4                 db  18h
.eh_frame:000000000000DEB5                 db  8Eh
.eh_frame:000000000000DEB6                 db    3
.eh_frame:000000000000DEB7                 db  49h ; I
.eh_frame:000000000000DEB8                 db  0Eh
.eh_frame:000000000000DEB9                 db  20h
.eh_frame:000000000000DEBA                 db  8Dh
.eh_frame:000000000000DEBB                 db    4
.eh_frame:000000000000DEBC                 db  42h ; B
.eh_frame:000000000000DEBD                 db  0Eh
.eh_frame:000000000000DEBE                 db  28h ; (
.eh_frame:000000000000DEBF                 db  8Ch
.eh_frame:000000000000DEC0                 db    5
.eh_frame:000000000000DEC1                 db  44h ; D
.eh_frame:000000000000DEC2                 db  0Eh
.eh_frame:000000000000DEC3                 db  30h ; 0
.eh_frame:000000000000DEC4                 db  86h
.eh_frame:000000000000DEC5                 db    6
.eh_frame:000000000000DEC6                 db  41h ; A
.eh_frame:000000000000DEC7                 db  0Eh
.eh_frame:000000000000DEC8                 db  38h ; 8
.eh_frame:000000000000DEC9                 db  83h
.eh_frame:000000000000DECA                 db    7
.eh_frame:000000000000DECB                 db  4Dh ; M
.eh_frame:000000000000DECC                 db  0Eh
.eh_frame:000000000000DECD                 db  70h ; p
.eh_frame:000000000000DECE                 db  65h ; e
.eh_frame:000000000000DECF                 db  0Eh
.eh_frame:000000000000DED0                 db  78h ; x
.eh_frame:000000000000DED1                 db  4Dh ; M
.eh_frame:000000000000DED2                 db  0Eh
.eh_frame:000000000000DED3                 db  80h
.eh_frame:000000000000DED4                 db    1
.eh_frame:000000000000DED5                 db  46h ; F
.eh_frame:000000000000DED6                 db  0Eh
.eh_frame:000000000000DED7                 db  88h
.eh_frame:000000000000DED8                 db    1
.eh_frame:000000000000DED9                 db  42h ; B
.eh_frame:000000000000DEDA                 db  0Eh
.eh_frame:000000000000DEDB                 db  90h
.eh_frame:000000000000DEDC                 db    1
.eh_frame:000000000000DEDD                 db  5Eh ; ^
.eh_frame:000000000000DEDE                 db  0Eh
.eh_frame:000000000000DEDF                 db  70h ; p
.eh_frame:000000000000DEE0                 db  56h ; V
.eh_frame:000000000000DEE1                 db  0Eh
.eh_frame:000000000000DEE2                 db  78h ; x
.eh_frame:000000000000DEE3                 db  43h ; C
.eh_frame:000000000000DEE4                 db  0Eh
.eh_frame:000000000000DEE5                 db  80h
.eh_frame:000000000000DEE6                 db    1
.eh_frame:000000000000DEE7                 db  43h ; C
.eh_frame:000000000000DEE8                 db  0Eh
.eh_frame:000000000000DEE9                 db  88h
.eh_frame:000000000000DEEA                 db    1
.eh_frame:000000000000DEEB                 db  56h ; V
.eh_frame:000000000000DEEC                 db  0Eh
.eh_frame:000000000000DEED                 db  90h
.eh_frame:000000000000DEEE                 db    1
.eh_frame:000000000000DEEF                 db  52h ; R
.eh_frame:000000000000DEF0                 db  0Eh
.eh_frame:000000000000DEF1                 db  70h ; p
.eh_frame:000000000000DEF2                 db  5Bh ; [
.eh_frame:000000000000DEF3                 db  0Eh
.eh_frame:000000000000DEF4                 db  38h ; 8
.eh_frame:000000000000DEF5                 db  41h ; A
.eh_frame:000000000000DEF6                 db  0Eh
.eh_frame:000000000000DEF7                 db  30h ; 0
.eh_frame:000000000000DEF8                 db  41h ; A
.eh_frame:000000000000DEF9                 db  0Eh
.eh_frame:000000000000DEFA                 db  28h ; (
.eh_frame:000000000000DEFB                 db  42h ; B
.eh_frame:000000000000DEFC                 db  0Eh
.eh_frame:000000000000DEFD                 db  20h
.eh_frame:000000000000DEFE                 db  42h ; B
.eh_frame:000000000000DEFF                 db  0Eh
.eh_frame:000000000000DF00                 db  18h
.eh_frame:000000000000DF01                 db  42h ; B
.eh_frame:000000000000DF02                 db  0Eh
.eh_frame:000000000000DF03                 db  10h
.eh_frame:000000000000DF04                 db  42h ; B
.eh_frame:000000000000DF05                 db  0Eh
.eh_frame:000000000000DF06                 db    8
.eh_frame:000000000000DF07                 db    0
.eh_frame:000000000000DF08                 db  10h
.eh_frame:000000000000DF09                 db    0
.eh_frame:000000000000DF0A                 db    0
.eh_frame:000000000000DF0B                 db    0
.eh_frame:000000000000DF0C                 db 0B4h
.eh_frame:000000000000DF0D                 db  0Eh
.eh_frame:000000000000DF0E                 db    0
.eh_frame:000000000000DF0F                 db    0
.eh_frame:000000000000DF10                 db  30h ; 0
.eh_frame:000000000000DF11                 db 0A2h
.eh_frame:000000000000DF12                 db 0FFh
.eh_frame:000000000000DF13                 db 0FFh
.eh_frame:000000000000DF14                 db  0Ah
.eh_frame:000000000000DF15                 db    0
.eh_frame:000000000000DF16                 db    0
.eh_frame:000000000000DF17                 db    0
.eh_frame:000000000000DF18                 db    0
.eh_frame:000000000000DF19                 db    0
.eh_frame:000000000000DF1A                 db    0
.eh_frame:000000000000DF1B                 db    0
.eh_frame:000000000000DF1C                 db  28h ; (
.eh_frame:000000000000DF1D                 db    0
.eh_frame:000000000000DF1E                 db    0
.eh_frame:000000000000DF1F                 db    0
.eh_frame:000000000000DF20                 db 0C8h
.eh_frame:000000000000DF21                 db  0Eh
.eh_frame:000000000000DF22                 db    0
.eh_frame:000000000000DF23                 db    0
.eh_frame:000000000000DF24                 db  2Ch ; ,
.eh_frame:000000000000DF25                 db 0A2h
.eh_frame:000000000000DF26                 db 0FFh
.eh_frame:000000000000DF27                 db 0FFh
.eh_frame:000000000000DF28                 db  93h
.eh_frame:000000000000DF29                 db    0
.eh_frame:000000000000DF2A                 db    0
.eh_frame:000000000000DF2B                 db    0
.eh_frame:000000000000DF2C                 db    0
.eh_frame:000000000000DF2D                 db  48h ; H
.eh_frame:000000000000DF2E                 db  0Eh
.eh_frame:000000000000DF2F                 db  10h
.eh_frame:000000000000DF30                 db  8Ch
.eh_frame:000000000000DF31                 db    2
.eh_frame:000000000000DF32                 db  48h ; H
.eh_frame:000000000000DF33                 db  0Eh
.eh_frame:000000000000DF34                 db  18h
.eh_frame:000000000000DF35                 db  86h
.eh_frame:000000000000DF36                 db    3
.eh_frame:000000000000DF37                 db  41h ; A
.eh_frame:000000000000DF38                 db  0Eh
.eh_frame:000000000000DF39                 db  20h
.eh_frame:000000000000DF3A                 db  83h
.eh_frame:000000000000DF3B                 db    4
.eh_frame:000000000000DF3C                 db    2
.eh_frame:000000000000DF3D                 db  74h ; t
.eh_frame:000000000000DF3E                 db  0Eh
.eh_frame:000000000000DF3F                 db  18h
.eh_frame:000000000000DF40                 db  4Bh ; K
.eh_frame:000000000000DF41                 db  0Eh
.eh_frame:000000000000DF42                 db  10h
.eh_frame:000000000000DF43                 db  42h ; B
.eh_frame:000000000000DF44                 db  0Eh
.eh_frame:000000000000DF45                 db    8
.eh_frame:000000000000DF46                 db    0
.eh_frame:000000000000DF47                 db    0
.eh_frame:000000000000DF48                 db  10h
.eh_frame:000000000000DF49                 db    0
.eh_frame:000000000000DF4A                 db    0
.eh_frame:000000000000DF4B                 db    0
.eh_frame:000000000000DF4C                 db 0F4h
.eh_frame:000000000000DF4D                 db  0Eh
.eh_frame:000000000000DF4E                 db    0
.eh_frame:000000000000DF4F                 db    0
.eh_frame:000000000000DF50                 db 0A0h
.eh_frame:000000000000DF51                 db 0A2h
.eh_frame:000000000000DF52                 db 0FFh
.eh_frame:000000000000DF53                 db 0FFh
.eh_frame:000000000000DF54                 db  13h
.eh_frame:000000000000DF55                 db    0
.eh_frame:000000000000DF56                 db    0
.eh_frame:000000000000DF57                 db    0
.eh_frame:000000000000DF58                 db    0
.eh_frame:000000000000DF59                 db    0
.eh_frame:000000000000DF5A                 db    0
.eh_frame:000000000000DF5B                 db    0
.eh_frame:000000000000DF5C                 db  10h
.eh_frame:000000000000DF5D                 db    0
.eh_frame:000000000000DF5E                 db    0
.eh_frame:000000000000DF5F                 db    0
.eh_frame:000000000000DF60                 db    8
.eh_frame:000000000000DF61                 db  0Fh
.eh_frame:000000000000DF62                 db    0
.eh_frame:000000000000DF63                 db    0
.eh_frame:000000000000DF64                 db 0ACh
.eh_frame:000000000000DF65                 db 0A2h
.eh_frame:000000000000DF66                 db 0FFh
.eh_frame:000000000000DF67                 db 0FFh
.eh_frame:000000000000DF68                 db  0Ch
.eh_frame:000000000000DF69                 db    0
.eh_frame:000000000000DF6A                 db    0
.eh_frame:000000000000DF6B                 db    0
.eh_frame:000000000000DF6C                 db    0
.eh_frame:000000000000DF6D                 db    0
.eh_frame:000000000000DF6E                 db    0
.eh_frame:000000000000DF6F                 db    0
.eh_frame:000000000000DF70                 db  10h
.eh_frame:000000000000DF71                 db    0
.eh_frame:000000000000DF72                 db    0
.eh_frame:000000000000DF73                 db    0
.eh_frame:000000000000DF74                 db  1Ch
.eh_frame:000000000000DF75                 db  0Fh
.eh_frame:000000000000DF76                 db    0
.eh_frame:000000000000DF77                 db    0
.eh_frame:000000000000DF78                 db 0A8h
.eh_frame:000000000000DF79                 db 0A2h
.eh_frame:000000000000DF7A                 db 0FFh
.eh_frame:000000000000DF7B                 db 0FFh
.eh_frame:000000000000DF7C                 db  18h
.eh_frame:000000000000DF7D                 db    0
.eh_frame:000000000000DF7E                 db    0
.eh_frame:000000000000DF7F                 db    0
.eh_frame:000000000000DF80                 db    0
.eh_frame:000000000000DF81                 db    0
.eh_frame:000000000000DF82                 db    0
.eh_frame:000000000000DF83                 db    0
.eh_frame:000000000000DF84                 db  10h
.eh_frame:000000000000DF85                 db    0
.eh_frame:000000000000DF86                 db    0
.eh_frame:000000000000DF87                 db    0
.eh_frame:000000000000DF88                 db  30h ; 0
.eh_frame:000000000000DF89                 db  0Fh
.eh_frame:000000000000DF8A                 db    0
.eh_frame:000000000000DF8B                 db    0
.eh_frame:000000000000DF8C                 db 0B4h
.eh_frame:000000000000DF8D                 db 0A2h
.eh_frame:000000000000DF8E                 db 0FFh
.eh_frame:000000000000DF8F                 db 0FFh
.eh_frame:000000000000DF90                 db  14h
.eh_frame:000000000000DF91                 db    0
.eh_frame:000000000000DF92                 db    0
.eh_frame:000000000000DF93                 db    0
.eh_frame:000000000000DF94                 db    0
.eh_frame:000000000000DF95                 db    0
.eh_frame:000000000000DF96                 db    0
.eh_frame:000000000000DF97                 db    0
.eh_frame:000000000000DF98                 db  18h
.eh_frame:000000000000DF99                 db    0
.eh_frame:000000000000DF9A                 db    0
.eh_frame:000000000000DF9B                 db    0
.eh_frame:000000000000DF9C                 db  44h ; D
.eh_frame:000000000000DF9D                 db  0Fh
.eh_frame:000000000000DF9E                 db    0
.eh_frame:000000000000DF9F                 db    0
.eh_frame:000000000000DFA0                 db 0C0h
.eh_frame:000000000000DFA1                 db 0A2h
.eh_frame:000000000000DFA2                 db 0FFh
.eh_frame:000000000000DFA3                 db 0FFh
.eh_frame:000000000000DFA4                 db  8Eh
.eh_frame:000000000000DFA5                 db    0
.eh_frame:000000000000DFA6                 db    0
.eh_frame:000000000000DFA7                 db    0
.eh_frame:000000000000DFA8                 db    0
.eh_frame:000000000000DFA9                 db  44h ; D
.eh_frame:000000000000DFAA                 db  0Eh
.eh_frame:000000000000DFAB                 db  50h ; P
.eh_frame:000000000000DFAC                 db    2
.eh_frame:000000000000DFAD                 db  7Fh ; 
.eh_frame:000000000000DFAE                 db  0Ah
.eh_frame:000000000000DFAF                 db  0Eh
.eh_frame:000000000000DFB0                 db    8
.eh_frame:000000000000DFB1                 db  41h ; A
.eh_frame:000000000000DFB2                 db  0Bh
.eh_frame:000000000000DFB3                 db    0
.eh_frame:000000000000DFB4                 db  18h
.eh_frame:000000000000DFB5                 db    0
.eh_frame:000000000000DFB6                 db    0
.eh_frame:000000000000DFB7                 db    0
.eh_frame:000000000000DFB8                 db  60h ; `
.eh_frame:000000000000DFB9                 db  0Fh
.eh_frame:000000000000DFBA                 db    0
.eh_frame:000000000000DFBB                 db    0
.eh_frame:000000000000DFBC                 db  34h ; 4
.eh_frame:000000000000DFBD                 db 0A3h
.eh_frame:000000000000DFBE                 db 0FFh
.eh_frame:000000000000DFBF                 db 0FFh
.eh_frame:000000000000DFC0                 db  8Ah
.eh_frame:000000000000DFC1                 db    0
.eh_frame:000000000000DFC2                 db    0
.eh_frame:000000000000DFC3                 db    0
.eh_frame:000000000000DFC4                 db    0
.eh_frame:000000000000DFC5                 db  44h ; D
.eh_frame:000000000000DFC6                 db  0Eh
.eh_frame:000000000000DFC7                 db  50h ; P
.eh_frame:000000000000DFC8                 db    2
.eh_frame:000000000000DFC9                 db  7Bh ; {
.eh_frame:000000000000DFCA                 db  0Ah
.eh_frame:000000000000DFCB                 db  0Eh
.eh_frame:000000000000DFCC                 db    8
.eh_frame:000000000000DFCD                 db  41h ; A
.eh_frame:000000000000DFCE                 db  0Bh
.eh_frame:000000000000DFCF                 db    0
.eh_frame:000000000000DFD0                 db  10h
.eh_frame:000000000000DFD1                 db    0
.eh_frame:000000000000DFD2                 db    0
.eh_frame:000000000000DFD3                 db    0
.eh_frame:000000000000DFD4                 db  7Ch ; |
.eh_frame:000000000000DFD5                 db  0Fh
.eh_frame:000000000000DFD6                 db    0
.eh_frame:000000000000DFD7                 db    0
.eh_frame:000000000000DFD8                 db 0A8h
.eh_frame:000000000000DFD9                 db 0A3h
.eh_frame:000000000000DFDA                 db 0FFh
.eh_frame:000000000000DFDB                 db 0FFh
.eh_frame:000000000000DFDC                 db  0Ch
.eh_frame:000000000000DFDD                 db    0
.eh_frame:000000000000DFDE                 db    0
.eh_frame:000000000000DFDF                 db    0
.eh_frame:000000000000DFE0                 db    0
.eh_frame:000000000000DFE1                 db    0
.eh_frame:000000000000DFE2                 db    0
.eh_frame:000000000000DFE3                 db    0
.eh_frame:000000000000DFE4                 db  10h
.eh_frame:000000000000DFE5                 db    0
.eh_frame:000000000000DFE6                 db    0
.eh_frame:000000000000DFE7                 db    0
.eh_frame:000000000000DFE8                 db  90h
.eh_frame:000000000000DFE9                 db  0Fh
.eh_frame:000000000000DFEA                 db    0
.eh_frame:000000000000DFEB                 db    0
.eh_frame:000000000000DFEC                 db 0A4h
.eh_frame:000000000000DFED                 db 0A3h
.eh_frame:000000000000DFEE                 db 0FFh
.eh_frame:000000000000DFEF                 db 0FFh
.eh_frame:000000000000DFF0                 db  0Fh
.eh_frame:000000000000DFF1                 db    0
.eh_frame:000000000000DFF2                 db    0
.eh_frame:000000000000DFF3                 db    0
.eh_frame:000000000000DFF4                 db    0
.eh_frame:000000000000DFF5                 db    0
.eh_frame:000000000000DFF6                 db    0
.eh_frame:000000000000DFF7                 db    0
.eh_frame:000000000000DFF8                 db  18h
.eh_frame:000000000000DFF9                 db    0
.eh_frame:000000000000DFFA                 db    0
.eh_frame:000000000000DFFB                 db    0
.eh_frame:000000000000DFFC                 db 0A4h
.eh_frame:000000000000DFFD                 db  0Fh
.eh_frame:000000000000DFFE                 db    0
.eh_frame:000000000000DFFF                 db    0
.eh_frame:000000000000E000                 db 0A0h
.eh_frame:000000000000E001                 db 0A3h
.eh_frame:000000000000E002                 db 0FFh
.eh_frame:000000000000E003                 db 0FFh
.eh_frame:000000000000E004                 db  98h
.eh_frame:000000000000E005                 db    0
.eh_frame:000000000000E006                 db    0
.eh_frame:000000000000E007                 db    0
.eh_frame:000000000000E008                 db    0
.eh_frame:000000000000E009                 db  44h ; D
.eh_frame:000000000000E00A                 db  0Eh
.eh_frame:000000000000E00B                 db  50h ; P
.eh_frame:000000000000E00C                 db    2
.eh_frame:000000000000E00D                 db  8Eh
.eh_frame:000000000000E00E                 db  0Ah
.eh_frame:000000000000E00F                 db  0Eh
.eh_frame:000000000000E010                 db    8
.eh_frame:000000000000E011                 db  41h ; A
.eh_frame:000000000000E012                 db  0Bh
.eh_frame:000000000000E013                 db    0
.eh_frame:000000000000E014                 db  10h
.eh_frame:000000000000E015                 db    0
.eh_frame:000000000000E016                 db    0
.eh_frame:000000000000E017                 db    0
.eh_frame:000000000000E018                 db 0C0h
.eh_frame:000000000000E019                 db  0Fh
.eh_frame:000000000000E01A                 db    0
.eh_frame:000000000000E01B                 db    0
.eh_frame:000000000000E01C                 db  24h ; $
.eh_frame:000000000000E01D                 db 0A4h
.eh_frame:000000000000E01E                 db 0FFh
.eh_frame:000000000000E01F                 db 0FFh
.eh_frame:000000000000E020                 db  10h
.eh_frame:000000000000E021                 db    0
.eh_frame:000000000000E022                 db    0
.eh_frame:000000000000E023                 db    0
.eh_frame:000000000000E024                 db    0
.eh_frame:000000000000E025                 db    0
.eh_frame:000000000000E026                 db    0
.eh_frame:000000000000E027                 db    0
.eh_frame:000000000000E028                 db  10h
.eh_frame:000000000000E029                 db    0
.eh_frame:000000000000E02A                 db    0
.eh_frame:000000000000E02B                 db    0
.eh_frame:000000000000E02C                 db 0D4h
.eh_frame:000000000000E02D                 db  0Fh
.eh_frame:000000000000E02E                 db    0
.eh_frame:000000000000E02F                 db    0
.eh_frame:000000000000E030                 db  20h
.eh_frame:000000000000E031                 db 0A4h
.eh_frame:000000000000E032                 db 0FFh
.eh_frame:000000000000E033                 db 0FFh
.eh_frame:000000000000E034                 db  11h
.eh_frame:000000000000E035                 db    0
.eh_frame:000000000000E036                 db    0
.eh_frame:000000000000E037                 db    0
.eh_frame:000000000000E038                 db    0
.eh_frame:000000000000E039                 db    0
.eh_frame:000000000000E03A                 db    0
.eh_frame:000000000000E03B                 db    0
.eh_frame:000000000000E03C                 db  10h
.eh_frame:000000000000E03D                 db    0
.eh_frame:000000000000E03E                 db    0
.eh_frame:000000000000E03F                 db    0
.eh_frame:000000000000E040                 db 0E8h
.eh_frame:000000000000E041                 db  0Fh
.eh_frame:000000000000E042                 db    0
.eh_frame:000000000000E043                 db    0
.eh_frame:000000000000E044                 db  2Ch ; ,
.eh_frame:000000000000E045                 db 0A4h
.eh_frame:000000000000E046                 db 0FFh
.eh_frame:000000000000E047                 db 0FFh
.eh_frame:000000000000E048                 db  0Ah
.eh_frame:000000000000E049                 db    0
.eh_frame:000000000000E04A                 db    0
.eh_frame:000000000000E04B                 db    0
.eh_frame:000000000000E04C                 db    0
.eh_frame:000000000000E04D                 db    0
.eh_frame:000000000000E04E                 db    0
.eh_frame:000000000000E04F                 db    0
.eh_frame:000000000000E050                 db  18h
.eh_frame:000000000000E051                 db    0
.eh_frame:000000000000E052                 db    0
.eh_frame:000000000000E053                 db    0
.eh_frame:000000000000E054                 db 0FCh
.eh_frame:000000000000E055                 db  0Fh
.eh_frame:000000000000E056                 db    0
.eh_frame:000000000000E057                 db    0
.eh_frame:000000000000E058                 db  28h ; (
.eh_frame:000000000000E059                 db 0A4h
.eh_frame:000000000000E05A                 db 0FFh
.eh_frame:000000000000E05B                 db 0FFh
.eh_frame:000000000000E05C                 db  8Eh
.eh_frame:000000000000E05D                 db    0
.eh_frame:000000000000E05E                 db    0
.eh_frame:000000000000E05F                 db    0
.eh_frame:000000000000E060                 db    0
.eh_frame:000000000000E061                 db  44h ; D
.eh_frame:000000000000E062                 db  0Eh
.eh_frame:000000000000E063                 db  50h ; P
.eh_frame:000000000000E064                 db    2
.eh_frame:000000000000E065                 db  7Fh ; 
.eh_frame:000000000000E066                 db  0Ah
.eh_frame:000000000000E067                 db  0Eh
.eh_frame:000000000000E068                 db    8
.eh_frame:000000000000E069                 db  41h ; A
.eh_frame:000000000000E06A                 db  0Bh
.eh_frame:000000000000E06B                 db    0
.eh_frame:000000000000E06C                 db  18h
.eh_frame:000000000000E06D                 db    0
.eh_frame:000000000000E06E                 db    0
.eh_frame:000000000000E06F                 db    0
.eh_frame:000000000000E070                 db  18h
.eh_frame:000000000000E071                 db  10h
.eh_frame:000000000000E072                 db    0
.eh_frame:000000000000E073                 db    0
.eh_frame:000000000000E074                 db  9Ch
.eh_frame:000000000000E075                 db 0A4h
.eh_frame:000000000000E076                 db 0FFh
.eh_frame:000000000000E077                 db 0FFh
.eh_frame:000000000000E078                 db  91h
.eh_frame:000000000000E079                 db    0
.eh_frame:000000000000E07A                 db    0
.eh_frame:000000000000E07B                 db    0
.eh_frame:000000000000E07C                 db    0
.eh_frame:000000000000E07D                 db  44h ; D
.eh_frame:000000000000E07E                 db  0Eh
.eh_frame:000000000000E07F                 db  50h ; P
.eh_frame:000000000000E080                 db    2
.eh_frame:000000000000E081                 db  82h
.eh_frame:000000000000E082                 db  0Ah
.eh_frame:000000000000E083                 db  0Eh
.eh_frame:000000000000E084                 db    8
.eh_frame:000000000000E085                 db  41h ; A
.eh_frame:000000000000E086                 db  0Bh
.eh_frame:000000000000E087                 db    0
.eh_frame:000000000000E088                 db  10h
.eh_frame:000000000000E089                 db    0
.eh_frame:000000000000E08A                 db    0
.eh_frame:000000000000E08B                 db    0
.eh_frame:000000000000E08C                 db  34h ; 4
.eh_frame:000000000000E08D                 db  10h
.eh_frame:000000000000E08E                 db    0
.eh_frame:000000000000E08F                 db    0
.eh_frame:000000000000E090                 db  20h
.eh_frame:000000000000E091                 db 0A5h
.eh_frame:000000000000E092                 db 0FFh
.eh_frame:000000000000E093                 db 0FFh
.eh_frame:000000000000E094                 db  0Ch
.eh_frame:000000000000E095                 db    0
.eh_frame:000000000000E096                 db    0
.eh_frame:000000000000E097                 db    0
.eh_frame:000000000000E098                 db    0
.eh_frame:000000000000E099                 db    0
.eh_frame:000000000000E09A                 db    0
.eh_frame:000000000000E09B                 db    0
.eh_frame:000000000000E09C                 db  10h
.eh_frame:000000000000E09D                 db    0
.eh_frame:000000000000E09E                 db    0
.eh_frame:000000000000E09F                 db    0
.eh_frame:000000000000E0A0                 db  48h ; H
.eh_frame:000000000000E0A1                 db  10h
.eh_frame:000000000000E0A2                 db    0
.eh_frame:000000000000E0A3                 db    0
.eh_frame:000000000000E0A4                 db  1Ch
.eh_frame:000000000000E0A5                 db 0A5h
.eh_frame:000000000000E0A6                 db 0FFh
.eh_frame:000000000000E0A7                 db 0FFh
.eh_frame:000000000000E0A8                 db  17h
.eh_frame:000000000000E0A9                 db    0
.eh_frame:000000000000E0AA                 db    0
.eh_frame:000000000000E0AB                 db    0
.eh_frame:000000000000E0AC                 db    0
.eh_frame:000000000000E0AD                 db    0
.eh_frame:000000000000E0AE                 db    0
.eh_frame:000000000000E0AF                 db    0
.eh_frame:000000000000E0B0                 db  10h
.eh_frame:000000000000E0B1                 db    0
.eh_frame:000000000000E0B2                 db    0
.eh_frame:000000000000E0B3                 db    0
.eh_frame:000000000000E0B4                 db  5Ch ; \
.eh_frame:000000000000E0B5                 db  10h
.eh_frame:000000000000E0B6                 db    0
.eh_frame:000000000000E0B7                 db    0
.eh_frame:000000000000E0B8                 db  28h ; (
.eh_frame:000000000000E0B9                 db 0A5h
.eh_frame:000000000000E0BA                 db 0FFh
.eh_frame:000000000000E0BB                 db 0FFh
.eh_frame:000000000000E0BC                 db  13h
.eh_frame:000000000000E0BD                 db    0
.eh_frame:000000000000E0BE                 db    0
.eh_frame:000000000000E0BF                 db    0
.eh_frame:000000000000E0C0                 db    0
.eh_frame:000000000000E0C1                 db    0
.eh_frame:000000000000E0C2                 db    0
.eh_frame:000000000000E0C3                 db    0
.eh_frame:000000000000E0C4                 db  10h
.eh_frame:000000000000E0C5                 db    0
.eh_frame:000000000000E0C6                 db    0
.eh_frame:000000000000E0C7                 db    0
.eh_frame:000000000000E0C8                 db  70h ; p
.eh_frame:000000000000E0C9                 db  10h
.eh_frame:000000000000E0CA                 db    0
.eh_frame:000000000000E0CB                 db    0
.eh_frame:000000000000E0CC                 db  34h ; 4
.eh_frame:000000000000E0CD                 db 0A5h
.eh_frame:000000000000E0CE                 db 0FFh
.eh_frame:000000000000E0CF                 db 0FFh
.eh_frame:000000000000E0D0                 db  0Ch
.eh_frame:000000000000E0D1                 db    0
.eh_frame:000000000000E0D2                 db    0
.eh_frame:000000000000E0D3                 db    0
.eh_frame:000000000000E0D4                 db    0
.eh_frame:000000000000E0D5                 db    0
.eh_frame:000000000000E0D6                 db    0
.eh_frame:000000000000E0D7                 db    0
.eh_frame:000000000000E0D8                 db  10h
.eh_frame:000000000000E0D9                 db    0
.eh_frame:000000000000E0DA                 db    0
.eh_frame:000000000000E0DB                 db    0
.eh_frame:000000000000E0DC                 db  84h
.eh_frame:000000000000E0DD                 db  10h
.eh_frame:000000000000E0DE                 db    0
.eh_frame:000000000000E0DF                 db    0
.eh_frame:000000000000E0E0                 db  30h ; 0
.eh_frame:000000000000E0E1                 db 0A5h
.eh_frame:000000000000E0E2                 db 0FFh
.eh_frame:000000000000E0E3                 db 0FFh
.eh_frame:000000000000E0E4                 db  14h
.eh_frame:000000000000E0E5                 db    0
.eh_frame:000000000000E0E6                 db    0
.eh_frame:000000000000E0E7                 db    0
.eh_frame:000000000000E0E8                 db    0
.eh_frame:000000000000E0E9                 db    0
.eh_frame:000000000000E0EA                 db    0
.eh_frame:000000000000E0EB                 db    0
.eh_frame:000000000000E0EC                 db  10h
.eh_frame:000000000000E0ED                 db    0
.eh_frame:000000000000E0EE                 db    0
.eh_frame:000000000000E0EF                 db    0
.eh_frame:000000000000E0F0                 db  98h
.eh_frame:000000000000E0F1                 db  10h
.eh_frame:000000000000E0F2                 db    0
.eh_frame:000000000000E0F3                 db    0
.eh_frame:000000000000E0F4                 db  3Ch ; <
.eh_frame:000000000000E0F5                 db 0A5h
.eh_frame:000000000000E0F6                 db 0FFh
.eh_frame:000000000000E0F7                 db 0FFh
.eh_frame:000000000000E0F8                 db  13h
.eh_frame:000000000000E0F9                 db    0
.eh_frame:000000000000E0FA                 db    0
.eh_frame:000000000000E0FB                 db    0
.eh_frame:000000000000E0FC                 db    0
.eh_frame:000000000000E0FD                 db    0
.eh_frame:000000000000E0FE                 db    0
.eh_frame:000000000000E0FF                 db    0
.eh_frame:000000000000E100                 db  14h
.eh_frame:000000000000E101                 db    0
.eh_frame:000000000000E102                 db    0
.eh_frame:000000000000E103                 db    0
.eh_frame:000000000000E104                 db 0ACh
.eh_frame:000000000000E105                 db  10h
.eh_frame:000000000000E106                 db    0
.eh_frame:000000000000E107                 db    0
.eh_frame:000000000000E108                 db  48h ; H
.eh_frame:000000000000E109                 db 0A5h
.eh_frame:000000000000E10A                 db 0FFh
.eh_frame:000000000000E10B                 db 0FFh
.eh_frame:000000000000E10C                 db  18h
.eh_frame:000000000000E10D                 db    0
.eh_frame:000000000000E10E                 db    0
.eh_frame:000000000000E10F                 db    0
.eh_frame:000000000000E110                 db    0
.eh_frame:000000000000E111                 db    0
.eh_frame:000000000000E112                 db    0
.eh_frame:000000000000E113                 db    0
.eh_frame:000000000000E114                 db    0
.eh_frame:000000000000E115                 db    0
.eh_frame:000000000000E116                 db    0
.eh_frame:000000000000E117                 db    0
.eh_frame:000000000000E118                 db  4Ch ; L
.eh_frame:000000000000E119                 db    0
.eh_frame:000000000000E11A                 db    0
.eh_frame:000000000000E11B                 db    0
.eh_frame:000000000000E11C                 db 0C4h
.eh_frame:000000000000E11D                 db  10h
.eh_frame:000000000000E11E                 db    0
.eh_frame:000000000000E11F                 db    0
.eh_frame:000000000000E120                 db  50h ; P
.eh_frame:000000000000E121                 db 0A5h
.eh_frame:000000000000E122                 db 0FFh
.eh_frame:000000000000E123                 db 0FFh
.eh_frame:000000000000E124                 db  6Ah ; j
.eh_frame:000000000000E125                 db    2
.eh_frame:000000000000E126                 db    0
.eh_frame:000000000000E127                 db    0
.eh_frame:000000000000E128                 db    0
.eh_frame:000000000000E129                 db  42h ; B
.eh_frame:000000000000E12A                 db  0Eh
.eh_frame:000000000000E12B                 db  10h
.eh_frame:000000000000E12C                 db  8Fh
.eh_frame:000000000000E12D                 db    2
.eh_frame:000000000000E12E                 db  42h ; B
.eh_frame:000000000000E12F                 db  0Eh
.eh_frame:000000000000E130                 db  18h
.eh_frame:000000000000E131                 db  8Eh
.eh_frame:000000000000E132                 db    3
.eh_frame:000000000000E133                 db  45h ; E
.eh_frame:000000000000E134                 db  0Eh
.eh_frame:000000000000E135                 db  20h
.eh_frame:000000000000E136                 db  8Dh
.eh_frame:000000000000E137                 db    4
.eh_frame:000000000000E138                 db  42h ; B
.eh_frame:000000000000E139                 db  0Eh
.eh_frame:000000000000E13A                 db  28h ; (
.eh_frame:000000000000E13B                 db  8Ch
.eh_frame:000000000000E13C                 db    5
.eh_frame:000000000000E13D                 db  44h ; D
.eh_frame:000000000000E13E                 db  0Eh
.eh_frame:000000000000E13F                 db  30h ; 0
.eh_frame:000000000000E140                 db  86h
.eh_frame:000000000000E141                 db    6
.eh_frame:000000000000E142                 db  41h ; A
.eh_frame:000000000000E143                 db  0Eh
.eh_frame:000000000000E144                 db  38h ; 8
.eh_frame:000000000000E145                 db  83h
.eh_frame:000000000000E146                 db    7
.eh_frame:000000000000E147                 db  53h ; S
.eh_frame:000000000000E148                 db  0Eh
.eh_frame:000000000000E149                 db  80h
.eh_frame:000000000000E14A                 db    3
.eh_frame:000000000000E14B                 db    2
.eh_frame:000000000000E14C                 db  58h ; X
.eh_frame:000000000000E14D                 db  0Ah
.eh_frame:000000000000E14E                 db  0Eh
.eh_frame:000000000000E14F                 db  38h ; 8
.eh_frame:000000000000E150                 db  41h ; A
.eh_frame:000000000000E151                 db  0Eh
.eh_frame:000000000000E152                 db  30h ; 0
.eh_frame:000000000000E153                 db  41h ; A
.eh_frame:000000000000E154                 db  0Eh
.eh_frame:000000000000E155                 db  28h ; (
.eh_frame:000000000000E156                 db  42h ; B
.eh_frame:000000000000E157                 db  0Eh
.eh_frame:000000000000E158                 db  20h
.eh_frame:000000000000E159                 db  42h ; B
.eh_frame:000000000000E15A                 db  0Eh
.eh_frame:000000000000E15B                 db  18h
.eh_frame:000000000000E15C                 db  42h ; B
.eh_frame:000000000000E15D                 db  0Eh
.eh_frame:000000000000E15E                 db  10h
.eh_frame:000000000000E15F                 db  42h ; B
.eh_frame:000000000000E160                 db  0Eh
.eh_frame:000000000000E161                 db    8
.eh_frame:000000000000E162                 db  4Bh ; K
.eh_frame:000000000000E163                 db  0Bh
.eh_frame:000000000000E164                 db    0
.eh_frame:000000000000E165                 db    0
.eh_frame:000000000000E166                 db    0
.eh_frame:000000000000E167                 db    0
.eh_frame:000000000000E168                 db  38h ; 8
.eh_frame:000000000000E169                 db    0
.eh_frame:000000000000E16A                 db    0
.eh_frame:000000000000E16B                 db    0
.eh_frame:000000000000E16C                 db  14h
.eh_frame:000000000000E16D                 db  11h
.eh_frame:000000000000E16E                 db    0
.eh_frame:000000000000E16F                 db    0
.eh_frame:000000000000E170                 db  70h ; p
.eh_frame:000000000000E171                 db 0A7h
.eh_frame:000000000000E172                 db 0FFh
.eh_frame:000000000000E173                 db 0FFh
.eh_frame:000000000000E174                 db  27h ; '
.eh_frame:000000000000E175                 db    1
.eh_frame:000000000000E176                 db    0
.eh_frame:000000000000E177                 db    0
.eh_frame:000000000000E178                 db    0
.eh_frame:000000000000E179                 db  42h ; B
.eh_frame:000000000000E17A                 db  0Eh
.eh_frame:000000000000E17B                 db  10h
.eh_frame:000000000000E17C                 db  8Dh
.eh_frame:000000000000E17D                 db    2
.eh_frame:000000000000E17E                 db  42h ; B
.eh_frame:000000000000E17F                 db  0Eh
.eh_frame:000000000000E180                 db  18h
.eh_frame:000000000000E181                 db  8Ch
.eh_frame:000000000000E182                 db    3
.eh_frame:000000000000E183                 db  44h ; D
.eh_frame:000000000000E184                 db  0Eh
.eh_frame:000000000000E185                 db  20h
.eh_frame:000000000000E186                 db  86h
.eh_frame:000000000000E187                 db    4
.eh_frame:000000000000E188                 db  41h ; A
.eh_frame:000000000000E189                 db  0Eh
.eh_frame:000000000000E18A                 db  28h ; (
.eh_frame:000000000000E18B                 db  83h
.eh_frame:000000000000E18C                 db    5
.eh_frame:000000000000E18D                 db  4Fh ; O
.eh_frame:000000000000E18E                 db  0Eh
.eh_frame:000000000000E18F                 db 0E0h
.eh_frame:000000000000E190                 db    2
.eh_frame:000000000000E191                 db    2
.eh_frame:000000000000E192                 db 0B5h
.eh_frame:000000000000E193                 db  0Ah
.eh_frame:000000000000E194                 db  0Eh
.eh_frame:000000000000E195                 db  28h ; (
.eh_frame:000000000000E196                 db  41h ; A
.eh_frame:000000000000E197                 db  0Eh
.eh_frame:000000000000E198                 db  20h
.eh_frame:000000000000E199                 db  41h ; A
.eh_frame:000000000000E19A                 db  0Eh
.eh_frame:000000000000E19B                 db  18h
.eh_frame:000000000000E19C                 db  42h ; B
.eh_frame:000000000000E19D                 db  0Eh
.eh_frame:000000000000E19E                 db  10h
.eh_frame:000000000000E19F                 db  42h ; B
.eh_frame:000000000000E1A0                 db  0Eh
.eh_frame:000000000000E1A1                 db    8
.eh_frame:000000000000E1A2                 db  45h ; E
.eh_frame:000000000000E1A3                 db  0Bh
.eh_frame:000000000000E1A4                 db  5Ch ; \
.eh_frame:000000000000E1A5                 db    0
.eh_frame:000000000000E1A6                 db    0
.eh_frame:000000000000E1A7                 db    0
.eh_frame:000000000000E1A8                 db  50h ; P
.eh_frame:000000000000E1A9                 db  11h
.eh_frame:000000000000E1AA                 db    0
.eh_frame:000000000000E1AB                 db    0
.eh_frame:000000000000E1AC                 db  64h ; d
.eh_frame:000000000000E1AD                 db 0A8h
.eh_frame:000000000000E1AE                 db 0FFh
.eh_frame:000000000000E1AF                 db 0FFh
.eh_frame:000000000000E1B0                 db  92h
.eh_frame:000000000000E1B1                 db    0
.eh_frame:000000000000E1B2                 db    0
.eh_frame:000000000000E1B3                 db    0
.eh_frame:000000000000E1B4                 db    0
.eh_frame:000000000000E1B5                 db  42h ; B
.eh_frame:000000000000E1B6                 db  0Eh
.eh_frame:000000000000E1B7                 db  10h
.eh_frame:000000000000E1B8                 db  8Fh
.eh_frame:000000000000E1B9                 db    2
.eh_frame:000000000000E1BA                 db  42h ; B
.eh_frame:000000000000E1BB                 db  0Eh
.eh_frame:000000000000E1BC                 db  18h
.eh_frame:000000000000E1BD                 db  8Eh
.eh_frame:000000000000E1BE                 db    3
.eh_frame:000000000000E1BF                 db  45h ; E
.eh_frame:000000000000E1C0                 db  0Eh
.eh_frame:000000000000E1C1                 db  20h
.eh_frame:000000000000E1C2                 db  8Dh
.eh_frame:000000000000E1C3                 db    4
.eh_frame:000000000000E1C4                 db  42h ; B
.eh_frame:000000000000E1C5                 db  0Eh
.eh_frame:000000000000E1C6                 db  28h ; (
.eh_frame:000000000000E1C7                 db  8Ch
.eh_frame:000000000000E1C8                 db    5
.eh_frame:000000000000E1C9                 db  41h ; A
.eh_frame:000000000000E1CA                 db  0Eh
.eh_frame:000000000000E1CB                 db  30h ; 0
.eh_frame:000000000000E1CC                 db  86h
.eh_frame:000000000000E1CD                 db    6
.eh_frame:000000000000E1CE                 db  41h ; A
.eh_frame:000000000000E1CF                 db  0Eh
.eh_frame:000000000000E1D0                 db  38h ; 8
.eh_frame:000000000000E1D1                 db  83h
.eh_frame:000000000000E1D2                 db    7
.eh_frame:000000000000E1D3                 db  4Ah ; J
.eh_frame:000000000000E1D4                 db  0Eh
.eh_frame:000000000000E1D5                 db  50h ; P
.eh_frame:000000000000E1D6                 db  76h ; v
.eh_frame:000000000000E1D7                 db  0Ah
.eh_frame:000000000000E1D8                 db  0Eh
.eh_frame:000000000000E1D9                 db  38h ; 8
.eh_frame:000000000000E1DA                 db  43h ; C
.eh_frame:000000000000E1DB                 db  0Eh
.eh_frame:000000000000E1DC                 db  30h ; 0
.eh_frame:000000000000E1DD                 db  41h ; A
.eh_frame:000000000000E1DE                 db  0Eh
.eh_frame:000000000000E1DF                 db  28h ; (
.eh_frame:000000000000E1E0                 db  42h ; B
.eh_frame:000000000000E1E1                 db  0Eh
.eh_frame:000000000000E1E2                 db  20h
.eh_frame:000000000000E1E3                 db  42h ; B
.eh_frame:000000000000E1E4                 db  0Eh
.eh_frame:000000000000E1E5                 db  18h
.eh_frame:000000000000E1E6                 db  42h ; B
.eh_frame:000000000000E1E7                 db  0Eh
.eh_frame:000000000000E1E8                 db  10h
.eh_frame:000000000000E1E9                 db  42h ; B
.eh_frame:000000000000E1EA                 db  0Eh
.eh_frame:000000000000E1EB                 db    8
.eh_frame:000000000000E1EC                 db  47h ; G
.eh_frame:000000000000E1ED                 db  0Bh
.eh_frame:000000000000E1EE                 db  5Ah ; Z
.eh_frame:000000000000E1EF                 db  0Eh
.eh_frame:000000000000E1F0                 db  38h ; 8
.eh_frame:000000000000E1F1                 db  4Ah ; J
.eh_frame:000000000000E1F2                 db  0Eh
.eh_frame:000000000000E1F3                 db  30h ; 0
.eh_frame:000000000000E1F4                 db  41h ; A
.eh_frame:000000000000E1F5                 db  0Eh
.eh_frame:000000000000E1F6                 db  28h ; (
.eh_frame:000000000000E1F7                 db  42h ; B
.eh_frame:000000000000E1F8                 db  0Eh
.eh_frame:000000000000E1F9                 db  20h
.eh_frame:000000000000E1FA                 db  42h ; B
.eh_frame:000000000000E1FB                 db  0Eh
.eh_frame:000000000000E1FC                 db  18h
.eh_frame:000000000000E1FD                 db  42h ; B
.eh_frame:000000000000E1FE                 db  0Eh
.eh_frame:000000000000E1FF                 db  10h
.eh_frame:000000000000E200                 db  42h ; B
.eh_frame:000000000000E201                 db  0Eh
.eh_frame:000000000000E202                 db    8
.eh_frame:000000000000E203                 db    0
.eh_frame:000000000000E204                 db  10h
.eh_frame:000000000000E205                 db    0
.eh_frame:000000000000E206                 db    0
.eh_frame:000000000000E207                 db    0
.eh_frame:000000000000E208                 db 0B0h
.eh_frame:000000000000E209                 db  11h
.eh_frame:000000000000E20A                 db    0
.eh_frame:000000000000E20B                 db    0
.eh_frame:000000000000E20C                 db 0A4h
.eh_frame:000000000000E20D                 db 0A8h
.eh_frame:000000000000E20E                 db 0FFh
.eh_frame:000000000000E20F                 db 0FFh
.eh_frame:000000000000E210                 db  12h
.eh_frame:000000000000E211                 db    0
.eh_frame:000000000000E212                 db    0
.eh_frame:000000000000E213                 db    0
.eh_frame:000000000000E214                 db    0
.eh_frame:000000000000E215                 db    0
.eh_frame:000000000000E216                 db    0
.eh_frame:000000000000E217                 db    0
.eh_frame:000000000000E218                 db  20h
.eh_frame:000000000000E219                 db    0
.eh_frame:000000000000E21A                 db    0
.eh_frame:000000000000E21B                 db    0
.eh_frame:000000000000E21C                 db 0C4h
.eh_frame:000000000000E21D                 db  11h
.eh_frame:000000000000E21E                 db    0
.eh_frame:000000000000E21F                 db    0
.eh_frame:000000000000E220                 db 0B0h
.eh_frame:000000000000E221                 db 0A8h
.eh_frame:000000000000E222                 db 0FFh
.eh_frame:000000000000E223                 db 0FFh
.eh_frame:000000000000E224                 db  7Ch ; |
.eh_frame:000000000000E225                 db    0
.eh_frame:000000000000E226                 db    0
.eh_frame:000000000000E227                 db    0
.eh_frame:000000000000E228                 db    0
.eh_frame:000000000000E229                 db  41h ; A
.eh_frame:000000000000E22A                 db  0Eh
.eh_frame:000000000000E22B                 db  10h
.eh_frame:000000000000E22C                 db  83h
.eh_frame:000000000000E22D                 db    2
.eh_frame:000000000000E22E                 db  4Fh ; O
.eh_frame:000000000000E22F                 db  0Eh
.eh_frame:000000000000E230                 db 0B0h
.eh_frame:000000000000E231                 db    1
.eh_frame:000000000000E232                 db    2
.eh_frame:000000000000E233                 db  65h ; e
.eh_frame:000000000000E234                 db  0Ah
.eh_frame:000000000000E235                 db  0Eh
.eh_frame:000000000000E236                 db  10h
.eh_frame:000000000000E237                 db  41h ; A
.eh_frame:000000000000E238                 db  0Eh
.eh_frame:000000000000E239                 db    8
.eh_frame:000000000000E23A                 db  41h ; A
.eh_frame:000000000000E23B                 db  0Bh
.eh_frame:000000000000E23C                 db  10h
.eh_frame:000000000000E23D                 db    0
.eh_frame:000000000000E23E                 db    0
.eh_frame:000000000000E23F                 db    0
.eh_frame:000000000000E240                 db 0E8h
.eh_frame:000000000000E241                 db  11h
.eh_frame:000000000000E242                 db    0
.eh_frame:000000000000E243                 db    0
.eh_frame:000000000000E244                 db  0Ch
.eh_frame:000000000000E245                 db 0A9h
.eh_frame:000000000000E246                 db 0FFh
.eh_frame:000000000000E247                 db 0FFh
.eh_frame:000000000000E248                 db  0Ah
.eh_frame:000000000000E249                 db    0
.eh_frame:000000000000E24A                 db    0
.eh_frame:000000000000E24B                 db    0
.eh_frame:000000000000E24C                 db    0
.eh_frame:000000000000E24D                 db    0
.eh_frame:000000000000E24E                 db    0
.eh_frame:000000000000E24F                 db    0
.eh_frame:000000000000E250                 db  10h
.eh_frame:000000000000E251                 db    0
.eh_frame:000000000000E252                 db    0
.eh_frame:000000000000E253                 db    0
.eh_frame:000000000000E254                 db 0FCh
.eh_frame:000000000000E255                 db  11h
.eh_frame:000000000000E256                 db    0
.eh_frame:000000000000E257                 db    0
.eh_frame:000000000000E258                 db    8
.eh_frame:000000000000E259                 db 0A9h
.eh_frame:000000000000E25A                 db 0FFh
.eh_frame:000000000000E25B                 db 0FFh
.eh_frame:000000000000E25C                 db  16h
.eh_frame:000000000000E25D                 db    0
.eh_frame:000000000000E25E                 db    0
.eh_frame:000000000000E25F                 db    0
.eh_frame:000000000000E260                 db    0
.eh_frame:000000000000E261                 db    0
.eh_frame:000000000000E262                 db    0
.eh_frame:000000000000E263                 db    0
.eh_frame:000000000000E264                 db  48h ; H
.eh_frame:000000000000E265                 db    0
.eh_frame:000000000000E266                 db    0
.eh_frame:000000000000E267                 db    0
.eh_frame:000000000000E268                 db  10h
.eh_frame:000000000000E269                 db  12h
.eh_frame:000000000000E26A                 db    0
.eh_frame:000000000000E26B                 db    0
.eh_frame:000000000000E26C                 db  14h
.eh_frame:000000000000E26D                 db 0A9h
.eh_frame:000000000000E26E                 db 0FFh
.eh_frame:000000000000E26F                 db 0FFh
.eh_frame:000000000000E270                 db  74h ; t
.eh_frame:000000000000E271                 db    1
.eh_frame:000000000000E272                 db    0
.eh_frame:000000000000E273                 db    0
.eh_frame:000000000000E274                 db    0
.eh_frame:000000000000E275                 db  42h ; B
.eh_frame:000000000000E276                 db  0Eh
.eh_frame:000000000000E277                 db  10h
.eh_frame:000000000000E278                 db  8Fh
.eh_frame:000000000000E279                 db    2
.eh_frame:000000000000E27A                 db  42h ; B
.eh_frame:000000000000E27B                 db  0Eh
.eh_frame:000000000000E27C                 db  18h
.eh_frame:000000000000E27D                 db  8Eh
.eh_frame:000000000000E27E                 db    3
.eh_frame:000000000000E27F                 db  45h ; E
.eh_frame:000000000000E280                 db  0Eh
.eh_frame:000000000000E281                 db  20h
.eh_frame:000000000000E282                 db  8Dh
.eh_frame:000000000000E283                 db    4
.eh_frame:000000000000E284                 db  42h ; B
.eh_frame:000000000000E285                 db  0Eh
.eh_frame:000000000000E286                 db  28h ; (
.eh_frame:000000000000E287                 db  8Ch
.eh_frame:000000000000E288                 db    5
.eh_frame:000000000000E289                 db  44h ; D
.eh_frame:000000000000E28A                 db  0Eh
.eh_frame:000000000000E28B                 db  30h ; 0
.eh_frame:000000000000E28C                 db  86h
.eh_frame:000000000000E28D                 db    6
.eh_frame:000000000000E28E                 db  41h ; A
.eh_frame:000000000000E28F                 db  0Eh
.eh_frame:000000000000E290                 db  38h ; 8
.eh_frame:000000000000E291                 db  83h
.eh_frame:000000000000E292                 db    7
.eh_frame:000000000000E293                 db  46h ; F
.eh_frame:000000000000E294                 db  0Eh
.eh_frame:000000000000E295                 db  70h ; p
.eh_frame:000000000000E296                 db    3
.eh_frame:000000000000E297                 db  31h ; 1
.eh_frame:000000000000E298                 db    1
.eh_frame:000000000000E299                 db  0Ah
.eh_frame:000000000000E29A                 db  0Eh
.eh_frame:000000000000E29B                 db  38h ; 8
.eh_frame:000000000000E29C                 db  43h ; C
.eh_frame:000000000000E29D                 db  0Eh
.eh_frame:000000000000E29E                 db  30h ; 0
.eh_frame:000000000000E29F                 db  41h ; A
.eh_frame:000000000000E2A0                 db  0Eh
.eh_frame:000000000000E2A1                 db  28h ; (
.eh_frame:000000000000E2A2                 db  42h ; B
.eh_frame:000000000000E2A3                 db  0Eh
.eh_frame:000000000000E2A4                 db  20h
.eh_frame:000000000000E2A5                 db  42h ; B
.eh_frame:000000000000E2A6                 db  0Eh
.eh_frame:000000000000E2A7                 db  18h
.eh_frame:000000000000E2A8                 db  42h ; B
.eh_frame:000000000000E2A9                 db  0Eh
.eh_frame:000000000000E2AA                 db  10h
.eh_frame:000000000000E2AB                 db  42h ; B
.eh_frame:000000000000E2AC                 db  0Eh
.eh_frame:000000000000E2AD                 db    8
.eh_frame:000000000000E2AE                 db  41h ; A
.eh_frame:000000000000E2AF                 db  0Bh
.eh_frame:000000000000E2B0                 db  20h
.eh_frame:000000000000E2B1                 db    0
.eh_frame:000000000000E2B2                 db    0
.eh_frame:000000000000E2B3                 db    0
.eh_frame:000000000000E2B4                 db  5Ch ; \
.eh_frame:000000000000E2B5                 db  12h
.eh_frame:000000000000E2B6                 db    0
.eh_frame:000000000000E2B7                 db    0
.eh_frame:000000000000E2B8                 db  48h ; H
.eh_frame:000000000000E2B9                 db 0AAh
.eh_frame:000000000000E2BA                 db 0FFh
.eh_frame:000000000000E2BB                 db 0FFh
.eh_frame:000000000000E2BC                 db  86h
.eh_frame:000000000000E2BD                 db    0
.eh_frame:000000000000E2BE                 db    0
.eh_frame:000000000000E2BF                 db    0
.eh_frame:000000000000E2C0                 db    0
.eh_frame:000000000000E2C1                 db  44h ; D
.eh_frame:000000000000E2C2                 db  0Eh
.eh_frame:000000000000E2C3                 db  20h
.eh_frame:000000000000E2C4                 db    2
.eh_frame:000000000000E2C5                 db  49h ; I
.eh_frame:000000000000E2C6                 db  0Ah
.eh_frame:000000000000E2C7                 db  0Eh
.eh_frame:000000000000E2C8                 db    8
.eh_frame:000000000000E2C9                 db  43h ; C
.eh_frame:000000000000E2CA                 db  0Bh
.eh_frame:000000000000E2CB                 db  55h ; U
.eh_frame:000000000000E2CC                 db  0Ah
.eh_frame:000000000000E2CD                 db  0Eh
.eh_frame:000000000000E2CE                 db    8
.eh_frame:000000000000E2CF                 db  4Bh ; K
.eh_frame:000000000000E2D0                 db  0Bh
.eh_frame:000000000000E2D1                 db  55h ; U
.eh_frame:000000000000E2D2                 db  0Eh
.eh_frame:000000000000E2D3                 db    8
.eh_frame:000000000000E2D4                 db  10h
.eh_frame:000000000000E2D5                 db    0
.eh_frame:000000000000E2D6                 db    0
.eh_frame:000000000000E2D7                 db    0
.eh_frame:000000000000E2D8                 db  80h
.eh_frame:000000000000E2D9                 db  12h
.eh_frame:000000000000E2DA                 db    0
.eh_frame:000000000000E2DB                 db    0
.eh_frame:000000000000E2DC                 db 0B4h
.eh_frame:000000000000E2DD                 db 0AAh
.eh_frame:000000000000E2DE                 db 0FFh
.eh_frame:000000000000E2DF                 db 0FFh
.eh_frame:000000000000E2E0                 db  0Bh
.eh_frame:000000000000E2E1                 db    0
.eh_frame:000000000000E2E2                 db    0
.eh_frame:000000000000E2E3                 db    0
.eh_frame:000000000000E2E4                 db    0
.eh_frame:000000000000E2E5                 db    0
.eh_frame:000000000000E2E6                 db    0
.eh_frame:000000000000E2E7                 db    0
.eh_frame:000000000000E2E8                 db  14h
.eh_frame:000000000000E2E9                 db    0
.eh_frame:000000000000E2EA                 db    0
.eh_frame:000000000000E2EB                 db    0
.eh_frame:000000000000E2EC                 db  94h
.eh_frame:000000000000E2ED                 db  12h
.eh_frame:000000000000E2EE                 db    0
.eh_frame:000000000000E2EF                 db    0
.eh_frame:000000000000E2F0                 db 0B0h
.eh_frame:000000000000E2F1                 db 0AAh
.eh_frame:000000000000E2F2                 db 0FFh
.eh_frame:000000000000E2F3                 db 0FFh
.eh_frame:000000000000E2F4                 db  0Bh
.eh_frame:000000000000E2F5                 db    0
.eh_frame:000000000000E2F6                 db    0
.eh_frame:000000000000E2F7                 db    0
.eh_frame:000000000000E2F8                 db    0
.eh_frame:000000000000E2F9                 db    0
.eh_frame:000000000000E2FA                 db    0
.eh_frame:000000000000E2FB                 db    0
.eh_frame:000000000000E2FC                 db    0
.eh_frame:000000000000E2FD                 db    0
.eh_frame:000000000000E2FE                 db    0
.eh_frame:000000000000E2FF                 db    0
.eh_frame:000000000000E300                 db  34h ; 4
.eh_frame:000000000000E301                 db    0
.eh_frame:000000000000E302                 db    0
.eh_frame:000000000000E303                 db    0
.eh_frame:000000000000E304                 db 0ACh
.eh_frame:000000000000E305                 db  12h
.eh_frame:000000000000E306                 db    0
.eh_frame:000000000000E307                 db    0
.eh_frame:000000000000E308                 db 0A8h
.eh_frame:000000000000E309                 db 0AAh
.eh_frame:000000000000E30A                 db 0FFh
.eh_frame:000000000000E30B                 db 0FFh
.eh_frame:000000000000E30C                 db  3Fh ; ?
.eh_frame:000000000000E30D                 db    0
.eh_frame:000000000000E30E                 db    0
.eh_frame:000000000000E30F                 db    0
.eh_frame:000000000000E310                 db    0
.eh_frame:000000000000E311                 db  42h ; B
.eh_frame:000000000000E312                 db  0Eh
.eh_frame:000000000000E313                 db  10h
.eh_frame:000000000000E314                 db  8Dh
.eh_frame:000000000000E315                 db    2
.eh_frame:000000000000E316                 db  42h ; B
.eh_frame:000000000000E317                 db  0Eh
.eh_frame:000000000000E318                 db  18h
.eh_frame:000000000000E319                 db  8Ch
.eh_frame:000000000000E31A                 db    3
.eh_frame:000000000000E31B                 db  41h ; A
.eh_frame:000000000000E31C                 db  0Eh
.eh_frame:000000000000E31D                 db  20h
.eh_frame:000000000000E31E                 db  86h
.eh_frame:000000000000E31F                 db    4
.eh_frame:000000000000E320                 db  41h ; A
.eh_frame:000000000000E321                 db  0Eh
.eh_frame:000000000000E322                 db  28h ; (
.eh_frame:000000000000E323                 db  83h
.eh_frame:000000000000E324                 db    5
.eh_frame:000000000000E325                 db  46h ; F
.eh_frame:000000000000E326                 db  0Eh
.eh_frame:000000000000E327                 db  30h ; 0
.eh_frame:000000000000E328                 db  6Ah ; j
.eh_frame:000000000000E329                 db  0Eh
.eh_frame:000000000000E32A                 db  28h ; (
.eh_frame:000000000000E32B                 db  43h ; C
.eh_frame:000000000000E32C                 db  0Eh
.eh_frame:000000000000E32D                 db  20h
.eh_frame:000000000000E32E                 db  41h ; A
.eh_frame:000000000000E32F                 db  0Eh
.eh_frame:000000000000E330                 db  18h
.eh_frame:000000000000E331                 db  42h ; B
.eh_frame:000000000000E332                 db  0Eh
.eh_frame:000000000000E333                 db  10h
.eh_frame:000000000000E334                 db  42h ; B
.eh_frame:000000000000E335                 db  0Eh
.eh_frame:000000000000E336                 db    8
.eh_frame:000000000000E337                 db    0
.eh_frame:000000000000E338                 db  10h
.eh_frame:000000000000E339                 db    1
.eh_frame:000000000000E33A                 db    0
.eh_frame:000000000000E33B                 db    0
.eh_frame:000000000000E33C                 db 0E4h
.eh_frame:000000000000E33D                 db  12h
.eh_frame:000000000000E33E                 db    0
.eh_frame:000000000000E33F                 db    0
.eh_frame:000000000000E340                 db 0B0h
.eh_frame:000000000000E341                 db 0AAh
.eh_frame:000000000000E342                 db 0FFh
.eh_frame:000000000000E343                 db 0FFh
.eh_frame:000000000000E344                 db  17h
.eh_frame:000000000000E345                 db    4
.eh_frame:000000000000E346                 db    0
.eh_frame:000000000000E347                 db    0
.eh_frame:000000000000E348                 db    0
.eh_frame:000000000000E349                 db  42h ; B
.eh_frame:000000000000E34A                 db  0Eh
.eh_frame:000000000000E34B                 db  10h
.eh_frame:000000000000E34C                 db  8Fh
.eh_frame:000000000000E34D                 db    2
.eh_frame:000000000000E34E                 db  42h ; B
.eh_frame:000000000000E34F                 db  0Eh
.eh_frame:000000000000E350                 db  18h
.eh_frame:000000000000E351                 db  8Eh
.eh_frame:000000000000E352                 db    3
.eh_frame:000000000000E353                 db  42h ; B
.eh_frame:000000000000E354                 db  0Eh
.eh_frame:000000000000E355                 db  20h
.eh_frame:000000000000E356                 db  8Dh
.eh_frame:000000000000E357                 db    4
.eh_frame:000000000000E358                 db  42h ; B
.eh_frame:000000000000E359                 db  0Eh
.eh_frame:000000000000E35A                 db  28h ; (
.eh_frame:000000000000E35B                 db  8Ch
.eh_frame:000000000000E35C                 db    5
.eh_frame:000000000000E35D                 db  44h ; D
.eh_frame:000000000000E35E                 db  0Eh
.eh_frame:000000000000E35F                 db  30h ; 0
.eh_frame:000000000000E360                 db  86h
.eh_frame:000000000000E361                 db    6
.eh_frame:000000000000E362                 db  41h ; A
.eh_frame:000000000000E363                 db  0Eh
.eh_frame:000000000000E364                 db  38h ; 8
.eh_frame:000000000000E365                 db  83h
.eh_frame:000000000000E366                 db    7
.eh_frame:000000000000E367                 db  4Ah ; J
.eh_frame:000000000000E368                 db  0Eh
.eh_frame:000000000000E369                 db  60h ; `
.eh_frame:000000000000E36A                 db    2
.eh_frame:000000000000E36B                 db 0DDh
.eh_frame:000000000000E36C                 db  0Eh
.eh_frame:000000000000E36D                 db  68h ; h
.eh_frame:000000000000E36E                 db  57h ; W
.eh_frame:000000000000E36F                 db  0Eh
.eh_frame:000000000000E370                 db  70h ; p
.eh_frame:000000000000E371                 db  42h ; B
.eh_frame:000000000000E372                 db  0Eh
.eh_frame:000000000000E373                 db  78h ; x
.eh_frame:000000000000E374                 db  42h ; B
.eh_frame:000000000000E375                 db  0Eh
.eh_frame:000000000000E376                 db  80h
.eh_frame:000000000000E377                 db    1
.eh_frame:000000000000E378                 db  42h ; B
.eh_frame:000000000000E379                 db  0Eh
.eh_frame:000000000000E37A                 db  88h
.eh_frame:000000000000E37B                 db    1
.eh_frame:000000000000E37C                 db  42h ; B
.eh_frame:000000000000E37D                 db  0Eh
.eh_frame:000000000000E37E                 db  90h
.eh_frame:000000000000E37F                 db    1
.eh_frame:000000000000E380                 db  53h ; S
.eh_frame:000000000000E381                 db  0Eh
.eh_frame:000000000000E382                 db  60h ; `
.eh_frame:000000000000E383                 db  44h ; D
.eh_frame:000000000000E384                 db  0Ah
.eh_frame:000000000000E385                 db  0Eh
.eh_frame:000000000000E386                 db  38h ; 8
.eh_frame:000000000000E387                 db  41h ; A
.eh_frame:000000000000E388                 db  0Eh
.eh_frame:000000000000E389                 db  30h ; 0
.eh_frame:000000000000E38A                 db  41h ; A
.eh_frame:000000000000E38B                 db  0Eh
.eh_frame:000000000000E38C                 db  28h ; (
.eh_frame:000000000000E38D                 db  42h ; B
.eh_frame:000000000000E38E                 db  0Eh
.eh_frame:000000000000E38F                 db  20h
.eh_frame:000000000000E390                 db  42h ; B
.eh_frame:000000000000E391                 db  0Eh
.eh_frame:000000000000E392                 db  18h
.eh_frame:000000000000E393                 db  42h ; B
.eh_frame:000000000000E394                 db  0Eh
.eh_frame:000000000000E395                 db  10h
.eh_frame:000000000000E396                 db  42h ; B
.eh_frame:000000000000E397                 db  0Eh
.eh_frame:000000000000E398                 db    8
.eh_frame:000000000000E399                 db  44h ; D
.eh_frame:000000000000E39A                 db  0Bh
.eh_frame:000000000000E39B                 db    2
.eh_frame:000000000000E39C                 db  78h ; x
.eh_frame:000000000000E39D                 db  0Ah
.eh_frame:000000000000E39E                 db  0Eh
.eh_frame:000000000000E39F                 db  68h ; h
.eh_frame:000000000000E3A0                 db  48h ; H
.eh_frame:000000000000E3A1                 db  0Bh
.eh_frame:000000000000E3A2                 db  5Ah ; Z
.eh_frame:000000000000E3A3                 db  0Ah
.eh_frame:000000000000E3A4                 db  0Eh
.eh_frame:000000000000E3A5                 db  38h ; 8
.eh_frame:000000000000E3A6                 db  47h ; G
.eh_frame:000000000000E3A7                 db  0Eh
.eh_frame:000000000000E3A8                 db  30h ; 0
.eh_frame:000000000000E3A9                 db  41h ; A
.eh_frame:000000000000E3AA                 db  0Eh
.eh_frame:000000000000E3AB                 db  28h ; (
.eh_frame:000000000000E3AC                 db  42h ; B
.eh_frame:000000000000E3AD                 db  0Eh
.eh_frame:000000000000E3AE                 db  20h
.eh_frame:000000000000E3AF                 db  42h ; B
.eh_frame:000000000000E3B0                 db  0Eh
.eh_frame:000000000000E3B1                 db  18h
.eh_frame:000000000000E3B2                 db  42h ; B
.eh_frame:000000000000E3B3                 db  0Eh
.eh_frame:000000000000E3B4                 db  10h
.eh_frame:000000000000E3B5                 db  42h ; B
.eh_frame:000000000000E3B6                 db  0Eh
.eh_frame:000000000000E3B7                 db    8
.eh_frame:000000000000E3B8                 db  56h ; V
.eh_frame:000000000000E3B9                 db  0Bh
.eh_frame:000000000000E3BA                 db  5Eh ; ^
.eh_frame:000000000000E3BB                 db  0Ah
.eh_frame:000000000000E3BC                 db  0Eh
.eh_frame:000000000000E3BD                 db  38h ; 8
.eh_frame:000000000000E3BE                 db  52h ; R
.eh_frame:000000000000E3BF                 db  0Eh
.eh_frame:000000000000E3C0                 db  30h ; 0
.eh_frame:000000000000E3C1                 db  41h ; A
.eh_frame:000000000000E3C2                 db  0Eh
.eh_frame:000000000000E3C3                 db  28h ; (
.eh_frame:000000000000E3C4                 db  42h ; B
.eh_frame:000000000000E3C5                 db  0Eh
.eh_frame:000000000000E3C6                 db  20h
.eh_frame:000000000000E3C7                 db  42h ; B
.eh_frame:000000000000E3C8                 db  0Eh
.eh_frame:000000000000E3C9                 db  18h
.eh_frame:000000000000E3CA                 db  42h ; B
.eh_frame:000000000000E3CB                 db  0Eh
.eh_frame:000000000000E3CC                 db  10h
.eh_frame:000000000000E3CD                 db  42h ; B
.eh_frame:000000000000E3CE                 db  0Eh
.eh_frame:000000000000E3CF                 db    8
.eh_frame:000000000000E3D0                 db  4Fh ; O
.eh_frame:000000000000E3D1                 db  0Bh
.eh_frame:000000000000E3D2                 db  62h ; b
.eh_frame:000000000000E3D3                 db  0Ah
.eh_frame:000000000000E3D4                 db  0Eh
.eh_frame:000000000000E3D5                 db  38h ; 8
.eh_frame:000000000000E3D6                 db  50h ; P
.eh_frame:000000000000E3D7                 db  0Eh
.eh_frame:000000000000E3D8                 db  30h ; 0
.eh_frame:000000000000E3D9                 db  41h ; A
.eh_frame:000000000000E3DA                 db  0Eh
.eh_frame:000000000000E3DB                 db  28h ; (
.eh_frame:000000000000E3DC                 db  42h ; B
.eh_frame:000000000000E3DD                 db  0Eh
.eh_frame:000000000000E3DE                 db  20h
.eh_frame:000000000000E3DF                 db  42h ; B
.eh_frame:000000000000E3E0                 db  0Eh
.eh_frame:000000000000E3E1                 db  18h
.eh_frame:000000000000E3E2                 db  42h ; B
.eh_frame:000000000000E3E3                 db  0Eh
.eh_frame:000000000000E3E4                 db  10h
.eh_frame:000000000000E3E5                 db  42h ; B
.eh_frame:000000000000E3E6                 db  0Eh
.eh_frame:000000000000E3E7                 db    8
.eh_frame:000000000000E3E8                 db  55h ; U
.eh_frame:000000000000E3E9                 db  0Bh
.eh_frame:000000000000E3EA                 db  66h ; f
.eh_frame:000000000000E3EB                 db  0Eh
.eh_frame:000000000000E3EC                 db  68h ; h
.eh_frame:000000000000E3ED                 db  42h ; B
.eh_frame:000000000000E3EE                 db  0Eh
.eh_frame:000000000000E3EF                 db  70h ; p
.eh_frame:000000000000E3F0                 db  5Ch ; \
.eh_frame:000000000000E3F1                 db  0Eh
.eh_frame:000000000000E3F2                 db  68h ; h
.eh_frame:000000000000E3F3                 db  41h ; A
.eh_frame:000000000000E3F4                 db  0Eh
.eh_frame:000000000000E3F5                 db  60h ; `
.eh_frame:000000000000E3F6                 db  44h ; D
.eh_frame:000000000000E3F7                 db  0Ah
.eh_frame:000000000000E3F8                 db  0Eh
.eh_frame:000000000000E3F9                 db  38h ; 8
.eh_frame:000000000000E3FA                 db  41h ; A
.eh_frame:000000000000E3FB                 db  0Eh
.eh_frame:000000000000E3FC                 db  30h ; 0
.eh_frame:000000000000E3FD                 db  41h ; A
.eh_frame:000000000000E3FE                 db  0Eh
.eh_frame:000000000000E3FF                 db  28h ; (
.eh_frame:000000000000E400                 db  42h ; B
.eh_frame:000000000000E401                 db  0Eh
.eh_frame:000000000000E402                 db  20h
.eh_frame:000000000000E403                 db  42h ; B
.eh_frame:000000000000E404                 db  0Eh
.eh_frame:000000000000E405                 db  18h
.eh_frame:000000000000E406                 db  42h ; B
.eh_frame:000000000000E407                 db  0Eh
.eh_frame:000000000000E408                 db  10h
.eh_frame:000000000000E409                 db  42h ; B
.eh_frame:000000000000E40A                 db  0Eh
.eh_frame:000000000000E40B                 db    8
.eh_frame:000000000000E40C                 db  45h ; E
.eh_frame:000000000000E40D                 db  0Bh
.eh_frame:000000000000E40E                 db  68h ; h
.eh_frame:000000000000E40F                 db  0Ah
.eh_frame:000000000000E410                 db  0Eh
.eh_frame:000000000000E411                 db  68h ; h
.eh_frame:000000000000E412                 db  48h ; H
.eh_frame:000000000000E413                 db  0Bh
.eh_frame:000000000000E414                 db  72h ; r
.eh_frame:000000000000E415                 db  0Eh
.eh_frame:000000000000E416                 db  68h ; h
.eh_frame:000000000000E417                 db  45h ; E
.eh_frame:000000000000E418                 db  0Eh
.eh_frame:000000000000E419                 db  70h ; p
.eh_frame:000000000000E41A                 db  42h ; B
.eh_frame:000000000000E41B                 db  0Eh
.eh_frame:000000000000E41C                 db  78h ; x
.eh_frame:000000000000E41D                 db  42h ; B
.eh_frame:000000000000E41E                 db  0Eh
.eh_frame:000000000000E41F                 db  80h
.eh_frame:000000000000E420                 db    1
.eh_frame:000000000000E421                 db  5Eh ; ^
.eh_frame:000000000000E422                 db  0Eh
.eh_frame:000000000000E423                 db  60h ; `
.eh_frame:000000000000E424                 db  44h ; D
.eh_frame:000000000000E425                 db  0Ah
.eh_frame:000000000000E426                 db  0Eh
.eh_frame:000000000000E427                 db  38h ; 8
.eh_frame:000000000000E428                 db  41h ; A
.eh_frame:000000000000E429                 db  0Eh
.eh_frame:000000000000E42A                 db  30h ; 0
.eh_frame:000000000000E42B                 db  41h ; A
.eh_frame:000000000000E42C                 db  0Eh
.eh_frame:000000000000E42D                 db  28h ; (
.eh_frame:000000000000E42E                 db  42h ; B
.eh_frame:000000000000E42F                 db  0Eh
.eh_frame:000000000000E430                 db  20h
.eh_frame:000000000000E431                 db  42h ; B
.eh_frame:000000000000E432                 db  0Eh
.eh_frame:000000000000E433                 db  18h
.eh_frame:000000000000E434                 db  42h ; B
.eh_frame:000000000000E435                 db  0Eh
.eh_frame:000000000000E436                 db  10h
.eh_frame:000000000000E437                 db  42h ; B
.eh_frame:000000000000E438                 db  0Eh
.eh_frame:000000000000E439                 db    8
.eh_frame:000000000000E43A                 db  41h ; A
.eh_frame:000000000000E43B                 db  0Bh
.eh_frame:000000000000E43C                 db  79h ; y
.eh_frame:000000000000E43D                 db  0Ah
.eh_frame:000000000000E43E                 db  0Eh
.eh_frame:000000000000E43F                 db  68h ; h
.eh_frame:000000000000E440                 db  42h ; B
.eh_frame:000000000000E441                 db  0Eh
.eh_frame:000000000000E442                 db  70h ; p
.eh_frame:000000000000E443                 db  42h ; B
.eh_frame:000000000000E444                 db  0Eh
.eh_frame:000000000000E445                 db  78h ; x
.eh_frame:000000000000E446                 db  42h ; B
.eh_frame:000000000000E447                 db  0Eh
.eh_frame:000000000000E448                 db  80h
.eh_frame:000000000000E449                 db    1
.eh_frame:000000000000E44A                 db  51h ; Q
.eh_frame:000000000000E44B                 db  0Bh
.eh_frame:000000000000E44C                 db  10h
.eh_frame:000000000000E44D                 db    0
.eh_frame:000000000000E44E                 db    0
.eh_frame:000000000000E44F                 db    0
.eh_frame:000000000000E450                 db 0F8h
.eh_frame:000000000000E451                 db  13h
.eh_frame:000000000000E452                 db    0
.eh_frame:000000000000E453                 db    0
.eh_frame:000000000000E454                 db 0BCh
.eh_frame:000000000000E455                 db 0ADh
.eh_frame:000000000000E456                 db 0FFh
.eh_frame:000000000000E457                 db 0FFh
.eh_frame:000000000000E458                 db  20h
.eh_frame:000000000000E459                 db    0
.eh_frame:000000000000E45A                 db    0
.eh_frame:000000000000E45B                 db    0
.eh_frame:000000000000E45C                 db    0
.eh_frame:000000000000E45D                 db    0
.eh_frame:000000000000E45E                 db    0
.eh_frame:000000000000E45F                 db    0
.eh_frame:000000000000E460                 db  18h
.eh_frame:000000000000E461                 db    0
.eh_frame:000000000000E462                 db    0
.eh_frame:000000000000E463                 db    0
.eh_frame:000000000000E464                 db  0Ch
.eh_frame:000000000000E465                 db  14h
.eh_frame:000000000000E466                 db    0
.eh_frame:000000000000E467                 db    0
.eh_frame:000000000000E468                 db 0C8h
.eh_frame:000000000000E469                 db 0ADh
.eh_frame:000000000000E46A                 db 0FFh
.eh_frame:000000000000E46B                 db 0FFh
.eh_frame:000000000000E46C                 db  78h ; x
.eh_frame:000000000000E46D                 db    0
.eh_frame:000000000000E46E                 db    0
.eh_frame:000000000000E46F                 db    0
.eh_frame:000000000000E470                 db    0
.eh_frame:000000000000E471                 db  44h ; D
.eh_frame:000000000000E472                 db  0Eh
.eh_frame:000000000000E473                 db  70h ; p
.eh_frame:000000000000E474                 db    2
.eh_frame:000000000000E475                 db  60h ; `
.eh_frame:000000000000E476                 db  0Ah
.eh_frame:000000000000E477                 db  0Eh
.eh_frame:000000000000E478                 db    8
.eh_frame:000000000000E479                 db  41h ; A
.eh_frame:000000000000E47A                 db  0Bh
.eh_frame:000000000000E47B                 db    0
.eh_frame:000000000000E47C                 db  28h ; (
.eh_frame:000000000000E47D                 db    0
.eh_frame:000000000000E47E                 db    0
.eh_frame:000000000000E47F                 db    0
.eh_frame:000000000000E480                 db  28h ; (
.eh_frame:000000000000E481                 db  14h
.eh_frame:000000000000E482                 db    0
.eh_frame:000000000000E483                 db    0
.eh_frame:000000000000E484                 db  2Ch ; ,
.eh_frame:000000000000E485                 db 0AEh
.eh_frame:000000000000E486                 db 0FFh
.eh_frame:000000000000E487                 db 0FFh
.eh_frame:000000000000E488                 db 0D5h
.eh_frame:000000000000E489                 db    0
.eh_frame:000000000000E48A                 db    0
.eh_frame:000000000000E48B                 db    0
.eh_frame:000000000000E48C                 db    0
.eh_frame:000000000000E48D                 db  41h ; A
.eh_frame:000000000000E48E                 db  0Eh
.eh_frame:000000000000E48F                 db  10h
.eh_frame:000000000000E490                 db  86h
.eh_frame:000000000000E491                 db    2
.eh_frame:000000000000E492                 db  41h ; A
.eh_frame:000000000000E493                 db  0Eh
.eh_frame:000000000000E494                 db  18h
.eh_frame:000000000000E495                 db  83h
.eh_frame:000000000000E496                 db    3
.eh_frame:000000000000E497                 db  50h ; P
.eh_frame:000000000000E498                 db  0Eh
.eh_frame:000000000000E499                 db 0D0h
.eh_frame:000000000000E49A                 db    1
.eh_frame:000000000000E49B                 db    2
.eh_frame:000000000000E49C                 db 0ABh
.eh_frame:000000000000E49D                 db  0Ah
.eh_frame:000000000000E49E                 db  0Eh
.eh_frame:000000000000E49F                 db  18h
.eh_frame:000000000000E4A0                 db  41h ; A
.eh_frame:000000000000E4A1                 db  0Eh
.eh_frame:000000000000E4A2                 db  10h
.eh_frame:000000000000E4A3                 db  41h ; A
.eh_frame:000000000000E4A4                 db  0Eh
.eh_frame:000000000000E4A5                 db    8
.eh_frame:000000000000E4A6                 db  41h ; A
.eh_frame:000000000000E4A7                 db  0Bh
.eh_frame:000000000000E4A8                 db  1Ch
.eh_frame:000000000000E4A9                 db    0
.eh_frame:000000000000E4AA                 db    0
.eh_frame:000000000000E4AB                 db    0
.eh_frame:000000000000E4AC                 db  54h ; T
.eh_frame:000000000000E4AD                 db  14h
.eh_frame:000000000000E4AE                 db    0
.eh_frame:000000000000E4AF                 db    0
.eh_frame:000000000000E4B0                 db 0E0h
.eh_frame:000000000000E4B1                 db 0AEh
.eh_frame:000000000000E4B2                 db 0FFh
.eh_frame:000000000000E4B3                 db 0FFh
.eh_frame:000000000000E4B4                 db  80h
.eh_frame:000000000000E4B5                 db    0
.eh_frame:000000000000E4B6                 db    0
.eh_frame:000000000000E4B7                 db    0
.eh_frame:000000000000E4B8                 db    0
.eh_frame:000000000000E4B9                 db  41h ; A
.eh_frame:000000000000E4BA                 db  0Eh
.eh_frame:000000000000E4BB                 db  10h
.eh_frame:000000000000E4BC                 db  83h
.eh_frame:000000000000E4BD                 db    2
.eh_frame:000000000000E4BE                 db    2
.eh_frame:000000000000E4BF                 db  7Ah ; z
.eh_frame:000000000000E4C0                 db  0Eh
.eh_frame:000000000000E4C1                 db    8
.eh_frame:000000000000E4C2                 db    0
.eh_frame:000000000000E4C3                 db    0
.eh_frame:000000000000E4C4                 db    0
.eh_frame:000000000000E4C5                 db    0
.eh_frame:000000000000E4C6                 db    0
.eh_frame:000000000000E4C7                 db    0
.eh_frame:000000000000E4C8                 db  18h
.eh_frame:000000000000E4C9                 db    0
.eh_frame:000000000000E4CA                 db    0
.eh_frame:000000000000E4CB                 db    0
.eh_frame:000000000000E4CC                 db  74h ; t
.eh_frame:000000000000E4CD                 db  14h
.eh_frame:000000000000E4CE                 db    0
.eh_frame:000000000000E4CF                 db    0
.eh_frame:000000000000E4D0                 db  40h ; @
.eh_frame:000000000000E4D1                 db 0AFh
.eh_frame:000000000000E4D2                 db 0FFh
.eh_frame:000000000000E4D3                 db 0FFh
.eh_frame:000000000000E4D4                 db  1Ah
.eh_frame:000000000000E4D5                 db    0
.eh_frame:000000000000E4D6                 db    0
.eh_frame:000000000000E4D7                 db    0
.eh_frame:000000000000E4D8                 db    0
.eh_frame:000000000000E4D9                 db  41h ; A
.eh_frame:000000000000E4DA                 db  0Eh
.eh_frame:000000000000E4DB                 db  10h
.eh_frame:000000000000E4DC                 db  83h
.eh_frame:000000000000E4DD                 db    2
.eh_frame:000000000000E4DE                 db  53h ; S
.eh_frame:000000000000E4DF                 db  0Ah
.eh_frame:000000000000E4E0                 db  0Eh
.eh_frame:000000000000E4E1                 db    8
.eh_frame:000000000000E4E2                 db  41h ; A
.eh_frame:000000000000E4E3                 db  0Bh
.eh_frame:000000000000E4E4                 db  10h
.eh_frame:000000000000E4E5                 db    0
.eh_frame:000000000000E4E6                 db    0
.eh_frame:000000000000E4E7                 db    0
.eh_frame:000000000000E4E8                 db  90h
.eh_frame:000000000000E4E9                 db  14h
.eh_frame:000000000000E4EA                 db    0
.eh_frame:000000000000E4EB                 db    0
.eh_frame:000000000000E4EC                 db  44h ; D
.eh_frame:000000000000E4ED                 db 0AFh
.eh_frame:000000000000E4EE                 db 0FFh
.eh_frame:000000000000E4EF                 db 0FFh
.eh_frame:000000000000E4F0                 db  24h ; $
.eh_frame:000000000000E4F1                 db    0
.eh_frame:000000000000E4F2                 db    0
.eh_frame:000000000000E4F3                 db    0
.eh_frame:000000000000E4F4                 db    0
.eh_frame:000000000000E4F5                 db  5Fh ; _
.eh_frame:000000000000E4F6                 db  0Eh
.eh_frame:000000000000E4F7                 db  10h
.eh_frame:000000000000E4F8                 db  10h
.eh_frame:000000000000E4F9                 db    0
.eh_frame:000000000000E4FA                 db    0
.eh_frame:000000000000E4FB                 db    0
.eh_frame:000000000000E4FC                 db 0A4h
.eh_frame:000000000000E4FD                 db  14h
.eh_frame:000000000000E4FE                 db    0
.eh_frame:000000000000E4FF                 db    0
.eh_frame:000000000000E500                 db  60h ; `
.eh_frame:000000000000E501                 db 0AFh
.eh_frame:000000000000E502                 db 0FFh
.eh_frame:000000000000E503                 db 0FFh
.eh_frame:000000000000E504                 db    2
.eh_frame:000000000000E505                 db    0
.eh_frame:000000000000E506                 db    0
.eh_frame:000000000000E507                 db    0
.eh_frame:000000000000E508                 db    0
.eh_frame:000000000000E509                 db    0
.eh_frame:000000000000E50A                 db    0
.eh_frame:000000000000E50B                 db    0
.eh_frame:000000000000E50C                 db  20h
.eh_frame:000000000000E50D                 db    0
.eh_frame:000000000000E50E                 db    0
.eh_frame:000000000000E50F                 db    0
.eh_frame:000000000000E510                 db 0B8h
.eh_frame:000000000000E511                 db  14h
.eh_frame:000000000000E512                 db    0
.eh_frame:000000000000E513                 db    0
.eh_frame:000000000000E514                 db  5Ch ; \
.eh_frame:000000000000E515                 db 0AFh
.eh_frame:000000000000E516                 db 0FFh
.eh_frame:000000000000E517                 db 0FFh
.eh_frame:000000000000E518                 db  36h ; 6
.eh_frame:000000000000E519                 db    0
.eh_frame:000000000000E51A                 db    0
.eh_frame:000000000000E51B                 db    0
.eh_frame:000000000000E51C                 db    0
.eh_frame:000000000000E51D                 db  44h ; D
.eh_frame:000000000000E51E                 db  0Eh
.eh_frame:000000000000E51F                 db  10h
.eh_frame:000000000000E520                 db  83h
.eh_frame:000000000000E521                 db    2
.eh_frame:000000000000E522                 db  5Dh ; ]
.eh_frame:000000000000E523                 db  0Ah
.eh_frame:000000000000E524                 db  0Eh
.eh_frame:000000000000E525                 db    8
.eh_frame:000000000000E526                 db  47h ; G
.eh_frame:000000000000E527                 db  0Bh
.eh_frame:000000000000E528                 db  48h ; H
.eh_frame:000000000000E529                 db  0Ah
.eh_frame:000000000000E52A                 db  0Eh
.eh_frame:000000000000E52B                 db    8
.eh_frame:000000000000E52C                 db  41h ; A
.eh_frame:000000000000E52D                 db  0Bh
.eh_frame:000000000000E52E                 db    0
.eh_frame:000000000000E52F                 db    0
.eh_frame:000000000000E530                 db  10h
.eh_frame:000000000000E531                 db    0
.eh_frame:000000000000E532                 db    0
.eh_frame:000000000000E533                 db    0
.eh_frame:000000000000E534                 db 0DCh
.eh_frame:000000000000E535                 db  14h
.eh_frame:000000000000E536                 db    0
.eh_frame:000000000000E537                 db    0
.eh_frame:000000000000E538                 db  78h ; x
.eh_frame:000000000000E539                 db 0AFh
.eh_frame:000000000000E53A                 db 0FFh
.eh_frame:000000000000E53B                 db 0FFh
.eh_frame:000000000000E53C                 db  24h ; $
.eh_frame:000000000000E53D                 db    0
.eh_frame:000000000000E53E                 db    0
.eh_frame:000000000000E53F                 db    0
.eh_frame:000000000000E540                 db    0
.eh_frame:000000000000E541                 db  5Fh ; _
.eh_frame:000000000000E542                 db  0Eh
.eh_frame:000000000000E543                 db  10h
.eh_frame:000000000000E544                 db  14h
.eh_frame:000000000000E545                 db    0
.eh_frame:000000000000E546                 db    0
.eh_frame:000000000000E547                 db    0
.eh_frame:000000000000E548                 db 0F0h
.eh_frame:000000000000E549                 db  14h
.eh_frame:000000000000E54A                 db    0
.eh_frame:000000000000E54B                 db    0
.eh_frame:000000000000E54C                 db  94h
.eh_frame:000000000000E54D                 db 0AFh
.eh_frame:000000000000E54E                 db 0FFh
.eh_frame:000000000000E54F                 db 0FFh
.eh_frame:000000000000E550                 db  82h
.eh_frame:000000000000E551                 db    0
.eh_frame:000000000000E552                 db    0
.eh_frame:000000000000E553                 db    0
.eh_frame:000000000000E554                 db    0
.eh_frame:000000000000E555                 db    2
.eh_frame:000000000000E556                 db  5Fh ; _
.eh_frame:000000000000E557                 db  0Eh
.eh_frame:000000000000E558                 db  10h
.eh_frame:000000000000E559                 db  49h ; I
.eh_frame:000000000000E55A                 db  0Eh
.eh_frame:000000000000E55B                 db    8
.eh_frame:000000000000E55C                 db  14h
.eh_frame:000000000000E55D                 db    0
.eh_frame:000000000000E55E                 db    0
.eh_frame:000000000000E55F                 db    0
.eh_frame:000000000000E560                 db    8
.eh_frame:000000000000E561                 db  15h
.eh_frame:000000000000E562                 db    0
.eh_frame:000000000000E563                 db    0
.eh_frame:000000000000E564                 db  0Ch
.eh_frame:000000000000E565                 db 0B0h
.eh_frame:000000000000E566                 db 0FFh
.eh_frame:000000000000E567                 db 0FFh
.eh_frame:000000000000E568                 db  4Ah ; J
.eh_frame:000000000000E569                 db    0
.eh_frame:000000000000E56A                 db    0
.eh_frame:000000000000E56B                 db    0
.eh_frame:000000000000E56C                 db    0
.eh_frame:000000000000E56D                 db    2
.eh_frame:000000000000E56E                 db  45h ; E
.eh_frame:000000000000E56F                 db  0Eh
.eh_frame:000000000000E570                 db  10h
.eh_frame:000000000000E571                 db    0
.eh_frame:000000000000E572                 db    0
.eh_frame:000000000000E573                 db    0
.eh_frame:000000000000E574                 db  18h
.eh_frame:000000000000E575                 db    0
.eh_frame:000000000000E576                 db    0
.eh_frame:000000000000E577                 db    0
.eh_frame:000000000000E578                 db  20h
.eh_frame:000000000000E579                 db  15h
.eh_frame:000000000000E57A                 db    0
.eh_frame:000000000000E57B                 db    0
.eh_frame:000000000000E57C                 db  44h ; D
.eh_frame:000000000000E57D                 db 0B0h
.eh_frame:000000000000E57E                 db 0FFh
.eh_frame:000000000000E57F                 db 0FFh
.eh_frame:000000000000E580                 db  17h
.eh_frame:000000000000E581                 db    0
.eh_frame:000000000000E582                 db    0
.eh_frame:000000000000E583                 db    0
.eh_frame:000000000000E584                 db    0
.eh_frame:000000000000E585                 db  41h ; A
.eh_frame:000000000000E586                 db  0Eh
.eh_frame:000000000000E587                 db  10h
.eh_frame:000000000000E588                 db  83h
.eh_frame:000000000000E589                 db    2
.eh_frame:000000000000E58A                 db  51h ; Q
.eh_frame:000000000000E58B                 db  0Eh
.eh_frame:000000000000E58C                 db    8
.eh_frame:000000000000E58D                 db    0
.eh_frame:000000000000E58E                 db    0
.eh_frame:000000000000E58F                 db    0
.eh_frame:000000000000E590                 db  18h
.eh_frame:000000000000E591                 db    0
.eh_frame:000000000000E592                 db    0
.eh_frame:000000000000E593                 db    0
.eh_frame:000000000000E594                 db  3Ch ; <
.eh_frame:000000000000E595                 db  15h
.eh_frame:000000000000E596                 db    0
.eh_frame:000000000000E597                 db    0
.eh_frame:000000000000E598                 db  48h ; H
.eh_frame:000000000000E599                 db 0B0h
.eh_frame:000000000000E59A                 db 0FFh
.eh_frame:000000000000E59B                 db 0FFh
.eh_frame:000000000000E59C                 db  2Eh ; .
.eh_frame:000000000000E59D                 db    0
.eh_frame:000000000000E59E                 db    0
.eh_frame:000000000000E59F                 db    0
.eh_frame:000000000000E5A0                 db    0
.eh_frame:000000000000E5A1                 db  47h ; G
.eh_frame:000000000000E5A2                 db  0Eh
.eh_frame:000000000000E5A3                 db  10h
.eh_frame:000000000000E5A4                 db  61h ; a
.eh_frame:000000000000E5A5                 db  0Ah
.eh_frame:000000000000E5A6                 db  0Eh
.eh_frame:000000000000E5A7                 db    8
.eh_frame:000000000000E5A8                 db  41h ; A
.eh_frame:000000000000E5A9                 db  0Bh
.eh_frame:000000000000E5AA                 db    0
.eh_frame:000000000000E5AB                 db    0
.eh_frame:000000000000E5AC                 db  24h ; $
.eh_frame:000000000000E5AD                 db    0
.eh_frame:000000000000E5AE                 db    0
.eh_frame:000000000000E5AF                 db    0
.eh_frame:000000000000E5B0                 db  58h ; X
.eh_frame:000000000000E5B1                 db  15h
.eh_frame:000000000000E5B2                 db    0
.eh_frame:000000000000E5B3                 db    0
.eh_frame:000000000000E5B4                 db  5Ch ; \
.eh_frame:000000000000E5B5                 db 0B0h
.eh_frame:000000000000E5B6                 db 0FFh
.eh_frame:000000000000E5B7                 db 0FFh
.eh_frame:000000000000E5B8                 db  28h ; (
.eh_frame:000000000000E5B9                 db    0
.eh_frame:000000000000E5BA                 db    0
.eh_frame:000000000000E5BB                 db    0
.eh_frame:000000000000E5BC                 db    0
.eh_frame:000000000000E5BD                 db  41h ; A
.eh_frame:000000000000E5BE                 db  0Eh
.eh_frame:000000000000E5BF                 db  10h
.eh_frame:000000000000E5C0                 db  86h
.eh_frame:000000000000E5C1                 db    2
.eh_frame:000000000000E5C2                 db  41h ; A
.eh_frame:000000000000E5C3                 db  0Eh
.eh_frame:000000000000E5C4                 db  18h
.eh_frame:000000000000E5C5                 db  83h
.eh_frame:000000000000E5C6                 db    3
.eh_frame:000000000000E5C7                 db  4Dh ; M
.eh_frame:000000000000E5C8                 db  0Eh
.eh_frame:000000000000E5C9                 db  20h
.eh_frame:000000000000E5CA                 db  49h ; I
.eh_frame:000000000000E5CB                 db  0Eh
.eh_frame:000000000000E5CC                 db  18h
.eh_frame:000000000000E5CD                 db  47h ; G
.eh_frame:000000000000E5CE                 db  0Eh
.eh_frame:000000000000E5CF                 db  10h
.eh_frame:000000000000E5D0                 db  41h ; A
.eh_frame:000000000000E5D1                 db  0Eh
.eh_frame:000000000000E5D2                 db    8
.eh_frame:000000000000E5D3                 db    0
.eh_frame:000000000000E5D4                 db  18h
.eh_frame:000000000000E5D5                 db    0
.eh_frame:000000000000E5D6                 db    0
.eh_frame:000000000000E5D7                 db    0
.eh_frame:000000000000E5D8                 db  80h
.eh_frame:000000000000E5D9                 db  15h
.eh_frame:000000000000E5DA                 db    0
.eh_frame:000000000000E5DB                 db    0
.eh_frame:000000000000E5DC                 db  64h ; d
.eh_frame:000000000000E5DD                 db 0B0h
.eh_frame:000000000000E5DE                 db 0FFh
.eh_frame:000000000000E5DF                 db 0FFh
.eh_frame:000000000000E5E0                 db  13h
.eh_frame:000000000000E5E1                 db    0
.eh_frame:000000000000E5E2                 db    0
.eh_frame:000000000000E5E3                 db    0
.eh_frame:000000000000E5E4                 db    0
.eh_frame:000000000000E5E5                 db  41h ; A
.eh_frame:000000000000E5E6                 db  0Eh
.eh_frame:000000000000E5E7                 db  10h
.eh_frame:000000000000E5E8                 db  83h
.eh_frame:000000000000E5E9                 db    2
.eh_frame:000000000000E5EA                 db  50h ; P
.eh_frame:000000000000E5EB                 db  0Eh
.eh_frame:000000000000E5EC                 db    8
.eh_frame:000000000000E5ED                 db    0
.eh_frame:000000000000E5EE                 db    0
.eh_frame:000000000000E5EF                 db    0
.eh_frame:000000000000E5F0                 db  14h
.eh_frame:000000000000E5F1                 db    0
.eh_frame:000000000000E5F2                 db    0
.eh_frame:000000000000E5F3                 db    0
.eh_frame:000000000000E5F4                 db  9Ch
.eh_frame:000000000000E5F5                 db  15h
.eh_frame:000000000000E5F6                 db    0
.eh_frame:000000000000E5F7                 db    0
.eh_frame:000000000000E5F8                 db  68h ; h
.eh_frame:000000000000E5F9                 db 0B0h
.eh_frame:000000000000E5FA                 db 0FFh
.eh_frame:000000000000E5FB                 db 0FFh
.eh_frame:000000000000E5FC                 db  35h ; 5
.eh_frame:000000000000E5FD                 db    0
.eh_frame:000000000000E5FE                 db    0
.eh_frame:000000000000E5FF                 db    0
.eh_frame:000000000000E600                 db    0
.eh_frame:000000000000E601                 db  4Bh ; K
.eh_frame:000000000000E602                 db  0Eh
.eh_frame:000000000000E603                 db  10h
.eh_frame:000000000000E604                 db    0
.eh_frame:000000000000E605                 db    0
.eh_frame:000000000000E606                 db    0
.eh_frame:000000000000E607                 db    0
.eh_frame:000000000000E608                 db  1Ch
.eh_frame:000000000000E609                 db    0
.eh_frame:000000000000E60A                 db    0
.eh_frame:000000000000E60B                 db    0
.eh_frame:000000000000E60C                 db 0B4h
.eh_frame:000000000000E60D                 db  15h
.eh_frame:000000000000E60E                 db    0
.eh_frame:000000000000E60F                 db    0
.eh_frame:000000000000E610                 db  90h
.eh_frame:000000000000E611                 db 0B0h
.eh_frame:000000000000E612                 db 0FFh
.eh_frame:000000000000E613                 db 0FFh
.eh_frame:000000000000E614                 db  2Fh ; /
.eh_frame:000000000000E615                 db    0
.eh_frame:000000000000E616                 db    0
.eh_frame:000000000000E617                 db    0
.eh_frame:000000000000E618                 db    0
.eh_frame:000000000000E619                 db  41h ; A
.eh_frame:000000000000E61A                 db  0Eh
.eh_frame:000000000000E61B                 db  10h
.eh_frame:000000000000E61C                 db  83h
.eh_frame:000000000000E61D                 db    2
.eh_frame:000000000000E61E                 db  55h ; U
.eh_frame:000000000000E61F                 db  0Ah
.eh_frame:000000000000E620                 db  0Eh
.eh_frame:000000000000E621                 db    8
.eh_frame:000000000000E622                 db  4Ah ; J
.eh_frame:000000000000E623                 db  0Bh
.eh_frame:000000000000E624                 db    0
.eh_frame:000000000000E625                 db    0
.eh_frame:000000000000E626                 db    0
.eh_frame:000000000000E627                 db    0
.eh_frame:000000000000E628                 db  24h ; $
.eh_frame:000000000000E629                 db    0
.eh_frame:000000000000E62A                 db    0
.eh_frame:000000000000E62B                 db    0
.eh_frame:000000000000E62C                 db 0D4h
.eh_frame:000000000000E62D                 db  15h
.eh_frame:000000000000E62E                 db    0
.eh_frame:000000000000E62F                 db    0
.eh_frame:000000000000E630                 db 0A0h
.eh_frame:000000000000E631                 db 0B0h
.eh_frame:000000000000E632                 db 0FFh
.eh_frame:000000000000E633                 db 0FFh
.eh_frame:000000000000E634                 db  97h
.eh_frame:000000000000E635                 db    0
.eh_frame:000000000000E636                 db    0
.eh_frame:000000000000E637                 db    0
.eh_frame:000000000000E638                 db    0
.eh_frame:000000000000E639                 db  41h ; A
.eh_frame:000000000000E63A                 db  0Eh
.eh_frame:000000000000E63B                 db  10h
.eh_frame:000000000000E63C                 db  83h
.eh_frame:000000000000E63D                 db    2
.eh_frame:000000000000E63E                 db  4Bh ; K
.eh_frame:000000000000E63F                 db  0Eh
.eh_frame:000000000000E640                 db  30h ; 0
.eh_frame:000000000000E641                 db    2
.eh_frame:000000000000E642                 db  76h ; v
.eh_frame:000000000000E643                 db  0Ah
.eh_frame:000000000000E644                 db  0Eh
.eh_frame:000000000000E645                 db  10h
.eh_frame:000000000000E646                 db  41h ; A
.eh_frame:000000000000E647                 db  0Eh
.eh_frame:000000000000E648                 db    8
.eh_frame:000000000000E649                 db  45h ; E
.eh_frame:000000000000E64A                 db  0Bh
.eh_frame:000000000000E64B                 db    0
.eh_frame:000000000000E64C                 db    0
.eh_frame:000000000000E64D                 db    0
.eh_frame:000000000000E64E                 db    0
.eh_frame:000000000000E64F                 db    0
.eh_frame:000000000000E650                 db  1Ch
.eh_frame:000000000000E651                 db    0
.eh_frame:000000000000E652                 db    0
.eh_frame:000000000000E653                 db    0
.eh_frame:000000000000E654                 db 0FCh
.eh_frame:000000000000E655                 db  15h
.eh_frame:000000000000E656                 db    0
.eh_frame:000000000000E657                 db    0
.eh_frame:000000000000E658                 db  18h
.eh_frame:000000000000E659                 db 0B1h
.eh_frame:000000000000E65A                 db 0FFh
.eh_frame:000000000000E65B                 db 0FFh
.eh_frame:000000000000E65C                 db  40h ; @
.eh_frame:000000000000E65D                 db    0
.eh_frame:000000000000E65E                 db    0
.eh_frame:000000000000E65F                 db    0
.eh_frame:000000000000E660                 db    0
.eh_frame:000000000000E661                 db  44h ; D
.eh_frame:000000000000E662                 db  0Eh
.eh_frame:000000000000E663                 db  10h
.eh_frame:000000000000E664                 db  83h
.eh_frame:000000000000E665                 db    2
.eh_frame:000000000000E666                 db  5Ah ; Z
.eh_frame:000000000000E667                 db  0Ah
.eh_frame:000000000000E668                 db  0Eh
.eh_frame:000000000000E669                 db    8
.eh_frame:000000000000E66A                 db  4Ah ; J
.eh_frame:000000000000E66B                 db  0Bh
.eh_frame:000000000000E66C                 db  53h ; S
.eh_frame:000000000000E66D                 db  0Eh
.eh_frame:000000000000E66E                 db    8
.eh_frame:000000000000E66F                 db    0
.eh_frame:000000000000E670                 db  14h
.eh_frame:000000000000E671                 db    0
.eh_frame:000000000000E672                 db    0
.eh_frame:000000000000E673                 db    0
.eh_frame:000000000000E674                 db  1Ch
.eh_frame:000000000000E675                 db  16h
.eh_frame:000000000000E676                 db    0
.eh_frame:000000000000E677                 db    0
.eh_frame:000000000000E678                 db  38h ; 8
.eh_frame:000000000000E679                 db 0B1h
.eh_frame:000000000000E67A                 db 0FFh
.eh_frame:000000000000E67B                 db 0FFh
.eh_frame:000000000000E67C                 db  29h ; )
.eh_frame:000000000000E67D                 db    0
.eh_frame:000000000000E67E                 db    0
.eh_frame:000000000000E67F                 db    0
.eh_frame:000000000000E680                 db    0
.eh_frame:000000000000E681                 db    0
.eh_frame:000000000000E682                 db    0
.eh_frame:000000000000E683                 db    0
.eh_frame:000000000000E684                 db    0
.eh_frame:000000000000E685                 db    0
.eh_frame:000000000000E686                 db    0
.eh_frame:000000000000E687                 db    0
.eh_frame:000000000000E688                 db  2Ch ; ,
.eh_frame:000000000000E689                 db    0
.eh_frame:000000000000E68A                 db    0
.eh_frame:000000000000E68B                 db    0
.eh_frame:000000000000E68C                 db  34h ; 4
.eh_frame:000000000000E68D                 db  16h
.eh_frame:000000000000E68E                 db    0
.eh_frame:000000000000E68F                 db    0
.eh_frame:000000000000E690                 db  50h ; P
.eh_frame:000000000000E691                 db 0B1h
.eh_frame:000000000000E692                 db 0FFh
.eh_frame:000000000000E693                 db 0FFh
.eh_frame:000000000000E694                 db  57h ; W
.eh_frame:000000000000E695                 db    0
.eh_frame:000000000000E696                 db    0
.eh_frame:000000000000E697                 db    0
.eh_frame:000000000000E698                 db    0
.eh_frame:000000000000E699                 db  63h ; c
.eh_frame:000000000000E69A                 db  0Eh
.eh_frame:000000000000E69B                 db  10h
.eh_frame:000000000000E69C                 db  8Ch
.eh_frame:000000000000E69D                 db    2
.eh_frame:000000000000E69E                 db  41h ; A
.eh_frame:000000000000E69F                 db  0Eh
.eh_frame:000000000000E6A0                 db  18h
.eh_frame:000000000000E6A1                 db  86h
.eh_frame:000000000000E6A2                 db    3
.eh_frame:000000000000E6A3                 db  44h ; D
.eh_frame:000000000000E6A4                 db  0Eh
.eh_frame:000000000000E6A5                 db  20h
.eh_frame:000000000000E6A6                 db  83h
.eh_frame:000000000000E6A7                 db    4
.eh_frame:000000000000E6A8                 db  6Bh ; k
.eh_frame:000000000000E6A9                 db  0Eh
.eh_frame:000000000000E6AA                 db  18h
.eh_frame:000000000000E6AB                 db  41h ; A
.eh_frame:000000000000E6AC                 db  0Eh
.eh_frame:000000000000E6AD                 db  10h
.eh_frame:000000000000E6AE                 db  42h ; B
.eh_frame:000000000000E6AF                 db  0Eh
.eh_frame:000000000000E6B0                 db    8
.eh_frame:000000000000E6B1                 db    0
.eh_frame:000000000000E6B2                 db    0
.eh_frame:000000000000E6B3                 db    0
.eh_frame:000000000000E6B4                 db    0
.eh_frame:000000000000E6B5                 db    0
.eh_frame:000000000000E6B6                 db    0
.eh_frame:000000000000E6B7                 db    0
.eh_frame:000000000000E6B8                 db  3Ch ; <
.eh_frame:000000000000E6B9                 db    0
.eh_frame:000000000000E6BA                 db    0
.eh_frame:000000000000E6BB                 db    0
.eh_frame:000000000000E6BC                 db  64h ; d
.eh_frame:000000000000E6BD                 db  16h
.eh_frame:000000000000E6BE                 db    0
.eh_frame:000000000000E6BF                 db    0
.eh_frame:000000000000E6C0                 db  80h
.eh_frame:000000000000E6C1                 db 0B1h
.eh_frame:000000000000E6C2                 db 0FFh
.eh_frame:000000000000E6C3                 db 0FFh
.eh_frame:000000000000E6C4                 db  83h
.eh_frame:000000000000E6C5                 db    0
.eh_frame:000000000000E6C6                 db    0
.eh_frame:000000000000E6C7                 db    0
.eh_frame:000000000000E6C8                 db    0
.eh_frame:000000000000E6C9                 db  42h ; B
.eh_frame:000000000000E6CA                 db  0Eh
.eh_frame:000000000000E6CB                 db  10h
.eh_frame:000000000000E6CC                 db  8Dh
.eh_frame:000000000000E6CD                 db    2
.eh_frame:000000000000E6CE                 db  42h ; B
.eh_frame:000000000000E6CF                 db  0Eh
.eh_frame:000000000000E6D0                 db  18h
.eh_frame:000000000000E6D1                 db  8Ch
.eh_frame:000000000000E6D2                 db    3
.eh_frame:000000000000E6D3                 db  44h ; D
.eh_frame:000000000000E6D4                 db  0Eh
.eh_frame:000000000000E6D5                 db  20h
.eh_frame:000000000000E6D6                 db  86h
.eh_frame:000000000000E6D7                 db    4
.eh_frame:000000000000E6D8                 db  41h ; A
.eh_frame:000000000000E6D9                 db  0Eh
.eh_frame:000000000000E6DA                 db  28h ; (
.eh_frame:000000000000E6DB                 db  83h
.eh_frame:000000000000E6DC                 db    5
.eh_frame:000000000000E6DD                 db  4Ah ; J
.eh_frame:000000000000E6DE                 db  0Eh
.eh_frame:000000000000E6DF                 db  40h ; @
.eh_frame:000000000000E6E0                 db    2
.eh_frame:000000000000E6E1                 db  64h ; d
.eh_frame:000000000000E6E2                 db  0Ah
.eh_frame:000000000000E6E3                 db  0Eh
.eh_frame:000000000000E6E4                 db  28h ; (
.eh_frame:000000000000E6E5                 db  41h ; A
.eh_frame:000000000000E6E6                 db  0Eh
.eh_frame:000000000000E6E7                 db  20h
.eh_frame:000000000000E6E8                 db  41h ; A
.eh_frame:000000000000E6E9                 db  0Eh
.eh_frame:000000000000E6EA                 db  18h
.eh_frame:000000000000E6EB                 db  42h ; B
.eh_frame:000000000000E6EC                 db  0Eh
.eh_frame:000000000000E6ED                 db  10h
.eh_frame:000000000000E6EE                 db  42h ; B
.eh_frame:000000000000E6EF                 db  0Eh
.eh_frame:000000000000E6F0                 db    8
.eh_frame:000000000000E6F1                 db  41h ; A
.eh_frame:000000000000E6F2                 db  0Bh
.eh_frame:000000000000E6F3                 db    0
.eh_frame:000000000000E6F4                 db    0
.eh_frame:000000000000E6F5                 db    0
.eh_frame:000000000000E6F6                 db    0
.eh_frame:000000000000E6F7                 db    0
.eh_frame:000000000000E6F8                 db  4Ch ; L
.eh_frame:000000000000E6F9                 db    0
.eh_frame:000000000000E6FA                 db    0
.eh_frame:000000000000E6FB                 db    0
.eh_frame:000000000000E6FC                 db 0A4h
.eh_frame:000000000000E6FD                 db  16h
.eh_frame:000000000000E6FE                 db    0
.eh_frame:000000000000E6FF                 db    0
.eh_frame:000000000000E700                 db 0D0h
.eh_frame:000000000000E701                 db 0B1h
.eh_frame:000000000000E702                 db 0FFh
.eh_frame:000000000000E703                 db 0FFh
.eh_frame:000000000000E704                 db 0EFh
.eh_frame:000000000000E705                 db    0
.eh_frame:000000000000E706                 db    0
.eh_frame:000000000000E707                 db    0
.eh_frame:000000000000E708                 db    0
.eh_frame:000000000000E709                 db  42h ; B
.eh_frame:000000000000E70A                 db  0Eh
.eh_frame:000000000000E70B                 db  10h
.eh_frame:000000000000E70C                 db  8Fh
.eh_frame:000000000000E70D                 db    2
.eh_frame:000000000000E70E                 db  42h ; B
.eh_frame:000000000000E70F                 db  0Eh
.eh_frame:000000000000E710                 db  18h
.eh_frame:000000000000E711                 db  8Eh
.eh_frame:000000000000E712                 db    3
.eh_frame:000000000000E713                 db  47h ; G
.eh_frame:000000000000E714                 db  0Eh
.eh_frame:000000000000E715                 db  20h
.eh_frame:000000000000E716                 db  8Dh
.eh_frame:000000000000E717                 db    4
.eh_frame:000000000000E718                 db  42h ; B
.eh_frame:000000000000E719                 db  0Eh
.eh_frame:000000000000E71A                 db  28h ; (
.eh_frame:000000000000E71B                 db  8Ch
.eh_frame:000000000000E71C                 db    5
.eh_frame:000000000000E71D                 db  44h ; D
.eh_frame:000000000000E71E                 db  0Eh
.eh_frame:000000000000E71F                 db  30h ; 0
.eh_frame:000000000000E720                 db  86h
.eh_frame:000000000000E721                 db    6
.eh_frame:000000000000E722                 db  41h ; A
.eh_frame:000000000000E723                 db  0Eh
.eh_frame:000000000000E724                 db  38h ; 8
.eh_frame:000000000000E725                 db  83h
.eh_frame:000000000000E726                 db    7
.eh_frame:000000000000E727                 db  5Ch ; \
.eh_frame:000000000000E728                 db  0Eh
.eh_frame:000000000000E729                 db  40h ; @
.eh_frame:000000000000E72A                 db    2
.eh_frame:000000000000E72B                 db  61h ; a
.eh_frame:000000000000E72C                 db  0Ah
.eh_frame:000000000000E72D                 db  0Eh
.eh_frame:000000000000E72E                 db  38h ; 8
.eh_frame:000000000000E72F                 db  44h ; D
.eh_frame:000000000000E730                 db  0Eh
.eh_frame:000000000000E731                 db  30h ; 0
.eh_frame:000000000000E732                 db  41h ; A
.eh_frame:000000000000E733                 db  0Eh
.eh_frame:000000000000E734                 db  28h ; (
.eh_frame:000000000000E735                 db  42h ; B
.eh_frame:000000000000E736                 db  0Eh
.eh_frame:000000000000E737                 db  20h
.eh_frame:000000000000E738                 db  42h ; B
.eh_frame:000000000000E739                 db  0Eh
.eh_frame:000000000000E73A                 db  18h
.eh_frame:000000000000E73B                 db  42h ; B
.eh_frame:000000000000E73C                 db  0Eh
.eh_frame:000000000000E73D                 db  10h
.eh_frame:000000000000E73E                 db  42h ; B
.eh_frame:000000000000E73F                 db  0Eh
.eh_frame:000000000000E740                 db    8
.eh_frame:000000000000E741                 db  44h ; D
.eh_frame:000000000000E742                 db  0Bh
.eh_frame:000000000000E743                 db    0
.eh_frame:000000000000E744                 db    0
.eh_frame:000000000000E745                 db    0
.eh_frame:000000000000E746                 db    0
.eh_frame:000000000000E747                 db    0
.eh_frame:000000000000E748                 db  10h
.eh_frame:000000000000E749                 db    0
.eh_frame:000000000000E74A                 db    0
.eh_frame:000000000000E74B                 db    0
.eh_frame:000000000000E74C                 db 0F4h
.eh_frame:000000000000E74D                 db  16h
.eh_frame:000000000000E74E                 db    0
.eh_frame:000000000000E74F                 db    0
.eh_frame:000000000000E750                 db  70h ; p
.eh_frame:000000000000E751                 db 0B2h
.eh_frame:000000000000E752                 db 0FFh
.eh_frame:000000000000E753                 db 0FFh
.eh_frame:000000000000E754                 db  0Ah
.eh_frame:000000000000E755                 db    0
.eh_frame:000000000000E756                 db    0
.eh_frame:000000000000E757                 db    0
.eh_frame:000000000000E758                 db    0
.eh_frame:000000000000E759                 db    0
.eh_frame:000000000000E75A                 db    0
.eh_frame:000000000000E75B                 db    0
.eh_frame:000000000000E75C                 db  48h ; H
.eh_frame:000000000000E75D                 db    0
.eh_frame:000000000000E75E                 db    0
.eh_frame:000000000000E75F                 db    0
.eh_frame:000000000000E760                 db    8
.eh_frame:000000000000E761                 db  17h
.eh_frame:000000000000E762                 db    0
.eh_frame:000000000000E763                 db    0
.eh_frame:000000000000E764                 db  6Ch ; l
.eh_frame:000000000000E765                 db 0B2h
.eh_frame:000000000000E766                 db 0FFh
.eh_frame:000000000000E767                 db 0FFh
.eh_frame:000000000000E768                 db  16h
.eh_frame:000000000000E769                 db    1
.eh_frame:000000000000E76A                 db    0
.eh_frame:000000000000E76B                 db    0
.eh_frame:000000000000E76C                 db    0
.eh_frame:000000000000E76D                 db  42h ; B
.eh_frame:000000000000E76E                 db  0Eh
.eh_frame:000000000000E76F                 db  10h
.eh_frame:000000000000E770                 db  8Fh
.eh_frame:000000000000E771                 db    2
.eh_frame:000000000000E772                 db  42h ; B
.eh_frame:000000000000E773                 db  0Eh
.eh_frame:000000000000E774                 db  18h
.eh_frame:000000000000E775                 db  8Eh
.eh_frame:000000000000E776                 db    3
.eh_frame:000000000000E777                 db  45h ; E
.eh_frame:000000000000E778                 db  0Eh
.eh_frame:000000000000E779                 db  20h
.eh_frame:000000000000E77A                 db  8Dh
.eh_frame:000000000000E77B                 db    4
.eh_frame:000000000000E77C                 db  42h ; B
.eh_frame:000000000000E77D                 db  0Eh
.eh_frame:000000000000E77E                 db  28h ; (
.eh_frame:000000000000E77F                 db  8Ch
.eh_frame:000000000000E780                 db    5
.eh_frame:000000000000E781                 db  44h ; D
.eh_frame:000000000000E782                 db  0Eh
.eh_frame:000000000000E783                 db  30h ; 0
.eh_frame:000000000000E784                 db  86h
.eh_frame:000000000000E785                 db    6
.eh_frame:000000000000E786                 db  41h ; A
.eh_frame:000000000000E787                 db  0Eh
.eh_frame:000000000000E788                 db  38h ; 8
.eh_frame:000000000000E789                 db  83h
.eh_frame:000000000000E78A                 db    7
.eh_frame:000000000000E78B                 db  47h ; G
.eh_frame:000000000000E78C                 db  0Eh
.eh_frame:000000000000E78D                 db  60h ; `
.eh_frame:000000000000E78E                 db    2
.eh_frame:000000000000E78F                 db 0DEh
.eh_frame:000000000000E790                 db  0Ah
.eh_frame:000000000000E791                 db  0Eh
.eh_frame:000000000000E792                 db  38h ; 8
.eh_frame:000000000000E793                 db  41h ; A
.eh_frame:000000000000E794                 db  0Eh
.eh_frame:000000000000E795                 db  30h ; 0
.eh_frame:000000000000E796                 db  41h ; A
.eh_frame:000000000000E797                 db  0Eh
.eh_frame:000000000000E798                 db  28h ; (
.eh_frame:000000000000E799                 db  42h ; B
.eh_frame:000000000000E79A                 db  0Eh
.eh_frame:000000000000E79B                 db  20h
.eh_frame:000000000000E79C                 db  42h ; B
.eh_frame:000000000000E79D                 db  0Eh
.eh_frame:000000000000E79E                 db  18h
.eh_frame:000000000000E79F                 db  42h ; B
.eh_frame:000000000000E7A0                 db  0Eh
.eh_frame:000000000000E7A1                 db  10h
.eh_frame:000000000000E7A2                 db  42h ; B
.eh_frame:000000000000E7A3                 db  0Eh
.eh_frame:000000000000E7A4                 db    8
.eh_frame:000000000000E7A5                 db  41h ; A
.eh_frame:000000000000E7A6                 db  0Bh
.eh_frame:000000000000E7A7                 db    0
.eh_frame:000000000000E7A8                 db  28h ; (
.eh_frame:000000000000E7A9                 db    0
.eh_frame:000000000000E7AA                 db    0
.eh_frame:000000000000E7AB                 db    0
.eh_frame:000000000000E7AC                 db  54h ; T
.eh_frame:000000000000E7AD                 db  17h
.eh_frame:000000000000E7AE                 db    0
.eh_frame:000000000000E7AF                 db    0
.eh_frame:000000000000E7B0                 db  40h ; @
.eh_frame:000000000000E7B1                 db 0B3h
.eh_frame:000000000000E7B2                 db 0FFh
.eh_frame:000000000000E7B3                 db 0FFh
.eh_frame:000000000000E7B4                 db  73h ; s
.eh_frame:000000000000E7B5                 db    0
.eh_frame:000000000000E7B6                 db    0
.eh_frame:000000000000E7B7                 db    0
.eh_frame:000000000000E7B8                 db    0
.eh_frame:000000000000E7B9                 db  46h ; F
.eh_frame:000000000000E7BA                 db  0Eh
.eh_frame:000000000000E7BB                 db  10h
.eh_frame:000000000000E7BC                 db  8Ch
.eh_frame:000000000000E7BD                 db    2
.eh_frame:000000000000E7BE                 db  46h ; F
.eh_frame:000000000000E7BF                 db  0Eh
.eh_frame:000000000000E7C0                 db  18h
.eh_frame:000000000000E7C1                 db  86h
.eh_frame:000000000000E7C2                 db    3
.eh_frame:000000000000E7C3                 db  44h ; D
.eh_frame:000000000000E7C4                 db  0Eh
.eh_frame:000000000000E7C5                 db  20h
.eh_frame:000000000000E7C6                 db  83h
.eh_frame:000000000000E7C7                 db    4
.eh_frame:000000000000E7C8                 db  7Fh ; 
.eh_frame:000000000000E7C9                 db  0Ah
.eh_frame:000000000000E7CA                 db  0Eh
.eh_frame:000000000000E7CB                 db  18h
.eh_frame:000000000000E7CC                 db  41h ; A
.eh_frame:000000000000E7CD                 db  0Eh
.eh_frame:000000000000E7CE                 db  10h
.eh_frame:000000000000E7CF                 db  42h ; B
.eh_frame:000000000000E7D0                 db  0Eh
.eh_frame:000000000000E7D1                 db    8
.eh_frame:000000000000E7D2                 db  4Eh ; N
.eh_frame:000000000000E7D3                 db  0Bh
.eh_frame:000000000000E7D4                 db  5Ch ; \
.eh_frame:000000000000E7D5                 db    0
.eh_frame:000000000000E7D6                 db    0
.eh_frame:000000000000E7D7                 db    0
.eh_frame:000000000000E7D8                 db  80h
.eh_frame:000000000000E7D9                 db  17h
.eh_frame:000000000000E7DA                 db    0
.eh_frame:000000000000E7DB                 db    0
.eh_frame:000000000000E7DC                 db  94h
.eh_frame:000000000000E7DD                 db 0B3h
.eh_frame:000000000000E7DE                 db 0FFh
.eh_frame:000000000000E7DF                 db 0FFh
.eh_frame:000000000000E7E0                 db  20h
.eh_frame:000000000000E7E1                 db    1
.eh_frame:000000000000E7E2                 db    0
.eh_frame:000000000000E7E3                 db    0
.eh_frame:000000000000E7E4                 db    0
.eh_frame:000000000000E7E5                 db  42h ; B
.eh_frame:000000000000E7E6                 db  0Eh
.eh_frame:000000000000E7E7                 db  10h
.eh_frame:000000000000E7E8                 db  8Fh
.eh_frame:000000000000E7E9                 db    2
.eh_frame:000000000000E7EA                 db  42h ; B
.eh_frame:000000000000E7EB                 db  0Eh
.eh_frame:000000000000E7EC                 db  18h
.eh_frame:000000000000E7ED                 db  8Eh
.eh_frame:000000000000E7EE                 db    3
.eh_frame:000000000000E7EF                 db  45h ; E
.eh_frame:000000000000E7F0                 db  0Eh
.eh_frame:000000000000E7F1                 db  20h
.eh_frame:000000000000E7F2                 db  8Dh
.eh_frame:000000000000E7F3                 db    4
.eh_frame:000000000000E7F4                 db  42h ; B
.eh_frame:000000000000E7F5                 db  0Eh
.eh_frame:000000000000E7F6                 db  28h ; (
.eh_frame:000000000000E7F7                 db  8Ch
.eh_frame:000000000000E7F8                 db    5
.eh_frame:000000000000E7F9                 db  43h ; C
.eh_frame:000000000000E7FA                 db  0Eh
.eh_frame:000000000000E7FB                 db  30h ; 0
.eh_frame:000000000000E7FC                 db  86h
.eh_frame:000000000000E7FD                 db    6
.eh_frame:000000000000E7FE                 db  41h ; A
.eh_frame:000000000000E7FF                 db  0Eh
.eh_frame:000000000000E800                 db  38h ; 8
.eh_frame:000000000000E801                 db  83h
.eh_frame:000000000000E802                 db    7
.eh_frame:000000000000E803                 db  56h ; V
.eh_frame:000000000000E804                 db  0Eh
.eh_frame:000000000000E805                 db  40h ; @
.eh_frame:000000000000E806                 db    2
.eh_frame:000000000000E807                 db 0D3h
.eh_frame:000000000000E808                 db  0Ah
.eh_frame:000000000000E809                 db  0Eh
.eh_frame:000000000000E80A                 db  38h ; 8
.eh_frame:000000000000E80B                 db  41h ; A
.eh_frame:000000000000E80C                 db  0Eh
.eh_frame:000000000000E80D                 db  30h ; 0
.eh_frame:000000000000E80E                 db  41h ; A
.eh_frame:000000000000E80F                 db  0Eh
.eh_frame:000000000000E810                 db  28h ; (
.eh_frame:000000000000E811                 db  42h ; B
.eh_frame:000000000000E812                 db  0Eh
.eh_frame:000000000000E813                 db  20h
.eh_frame:000000000000E814                 db  42h ; B
.eh_frame:000000000000E815                 db  0Eh
.eh_frame:000000000000E816                 db  18h
.eh_frame:000000000000E817                 db  42h ; B
.eh_frame:000000000000E818                 db  0Eh
.eh_frame:000000000000E819                 db  10h
.eh_frame:000000000000E81A                 db  42h ; B
.eh_frame:000000000000E81B                 db  0Eh
.eh_frame:000000000000E81C                 db    8
.eh_frame:000000000000E81D                 db  46h ; F
.eh_frame:000000000000E81E                 db  0Bh
.eh_frame:000000000000E81F                 db  44h ; D
.eh_frame:000000000000E820                 db  0Eh
.eh_frame:000000000000E821                 db  38h ; 8
.eh_frame:000000000000E822                 db  46h ; F
.eh_frame:000000000000E823                 db  0Eh
.eh_frame:000000000000E824                 db  30h ; 0
.eh_frame:000000000000E825                 db  41h ; A
.eh_frame:000000000000E826                 db  0Eh
.eh_frame:000000000000E827                 db  28h ; (
.eh_frame:000000000000E828                 db  42h ; B
.eh_frame:000000000000E829                 db  0Eh
.eh_frame:000000000000E82A                 db  20h
.eh_frame:000000000000E82B                 db  42h ; B
.eh_frame:000000000000E82C                 db  0Eh
.eh_frame:000000000000E82D                 db  18h
.eh_frame:000000000000E82E                 db  42h ; B
.eh_frame:000000000000E82F                 db  0Eh
.eh_frame:000000000000E830                 db  10h
.eh_frame:000000000000E831                 db  42h ; B
.eh_frame:000000000000E832                 db  0Eh
.eh_frame:000000000000E833                 db    8
.eh_frame:000000000000E834                 db  48h ; H
.eh_frame:000000000000E835                 db    0
.eh_frame:000000000000E836                 db    0
.eh_frame:000000000000E837                 db    0
.eh_frame:000000000000E838                 db 0E0h
.eh_frame:000000000000E839                 db  17h
.eh_frame:000000000000E83A                 db    0
.eh_frame:000000000000E83B                 db    0
.eh_frame:000000000000E83C                 db  54h ; T
.eh_frame:000000000000E83D                 db 0B4h
.eh_frame:000000000000E83E                 db 0FFh
.eh_frame:000000000000E83F                 db 0FFh
.eh_frame:000000000000E840                 db  6Dh ; m
.eh_frame:000000000000E841                 db    0
.eh_frame:000000000000E842                 db    0
.eh_frame:000000000000E843                 db    0
.eh_frame:000000000000E844                 db    0
.eh_frame:000000000000E845                 db  42h ; B
.eh_frame:000000000000E846                 db  0Eh
.eh_frame:000000000000E847                 db  10h
.eh_frame:000000000000E848                 db  8Fh
.eh_frame:000000000000E849                 db    2
.eh_frame:000000000000E84A                 db  42h ; B
.eh_frame:000000000000E84B                 db  0Eh
.eh_frame:000000000000E84C                 db  18h
.eh_frame:000000000000E84D                 db  8Eh
.eh_frame:000000000000E84E                 db    3
.eh_frame:000000000000E84F                 db  45h ; E
.eh_frame:000000000000E850                 db  0Eh
.eh_frame:000000000000E851                 db  20h
.eh_frame:000000000000E852                 db  8Dh
.eh_frame:000000000000E853                 db    4
.eh_frame:000000000000E854                 db  42h ; B
.eh_frame:000000000000E855                 db  0Eh
.eh_frame:000000000000E856                 db  28h ; (
.eh_frame:000000000000E857                 db  8Ch
.eh_frame:000000000000E858                 db    5
.eh_frame:000000000000E859                 db  44h ; D
.eh_frame:000000000000E85A                 db  0Eh
.eh_frame:000000000000E85B                 db  30h ; 0
.eh_frame:000000000000E85C                 db  86h
.eh_frame:000000000000E85D                 db    6
.eh_frame:000000000000E85E                 db  41h ; A
.eh_frame:000000000000E85F                 db  0Eh
.eh_frame:000000000000E860                 db  38h ; 8
.eh_frame:000000000000E861                 db  83h
.eh_frame:000000000000E862                 db    7
.eh_frame:000000000000E863                 db  50h ; P
.eh_frame:000000000000E864                 db  0Eh
.eh_frame:000000000000E865                 db  40h ; @
.eh_frame:000000000000E866                 db  5Ah ; Z
.eh_frame:000000000000E867                 db  0Ah
.eh_frame:000000000000E868                 db  0Eh
.eh_frame:000000000000E869                 db  38h ; 8
.eh_frame:000000000000E86A                 db  41h ; A
.eh_frame:000000000000E86B                 db  0Eh
.eh_frame:000000000000E86C                 db  30h ; 0
.eh_frame:000000000000E86D                 db  41h ; A
.eh_frame:000000000000E86E                 db  0Eh
.eh_frame:000000000000E86F                 db  28h ; (
.eh_frame:000000000000E870                 db  42h ; B
.eh_frame:000000000000E871                 db  0Eh
.eh_frame:000000000000E872                 db  20h
.eh_frame:000000000000E873                 db  42h ; B
.eh_frame:000000000000E874                 db  0Eh
.eh_frame:000000000000E875                 db  18h
.eh_frame:000000000000E876                 db  42h ; B
.eh_frame:000000000000E877                 db  0Eh
.eh_frame:000000000000E878                 db  10h
.eh_frame:000000000000E879                 db  42h ; B
.eh_frame:000000000000E87A                 db  0Eh
.eh_frame:000000000000E87B                 db    8
.eh_frame:000000000000E87C                 db  41h ; A
.eh_frame:000000000000E87D                 db  0Bh
.eh_frame:000000000000E87E                 db    0
.eh_frame:000000000000E87F                 db    0
.eh_frame:000000000000E880                 db  3Ch ; <
.eh_frame:000000000000E881                 db    0
.eh_frame:000000000000E882                 db    0
.eh_frame:000000000000E883                 db    0
.eh_frame:000000000000E884                 db  2Ch ; ,
.eh_frame:000000000000E885                 db  18h
.eh_frame:000000000000E886                 db    0
.eh_frame:000000000000E887                 db    0
.eh_frame:000000000000E888                 db  78h ; x
.eh_frame:000000000000E889                 db 0B4h
.eh_frame:000000000000E88A                 db 0FFh
.eh_frame:000000000000E88B                 db 0FFh
.eh_frame:000000000000E88C                 db  4Dh ; M
.eh_frame:000000000000E88D                 db    0
.eh_frame:000000000000E88E                 db    0
.eh_frame:000000000000E88F                 db    0
.eh_frame:000000000000E890                 db    0
.eh_frame:000000000000E891                 db  42h ; B
.eh_frame:000000000000E892                 db  0Eh
.eh_frame:000000000000E893                 db  10h
.eh_frame:000000000000E894                 db  8Eh
.eh_frame:000000000000E895                 db    2
.eh_frame:000000000000E896                 db  42h ; B
.eh_frame:000000000000E897                 db  0Eh
.eh_frame:000000000000E898                 db  18h
.eh_frame:000000000000E899                 db  8Dh
.eh_frame:000000000000E89A                 db    3
.eh_frame:000000000000E89B                 db  42h ; B
.eh_frame:000000000000E89C                 db  0Eh
.eh_frame:000000000000E89D                 db  20h
.eh_frame:000000000000E89E                 db  8Ch
.eh_frame:000000000000E89F                 db    4
.eh_frame:000000000000E8A0                 db  41h ; A
.eh_frame:000000000000E8A1                 db  0Eh
.eh_frame:000000000000E8A2                 db  28h ; (
.eh_frame:000000000000E8A3                 db  86h
.eh_frame:000000000000E8A4                 db    5
.eh_frame:000000000000E8A5                 db  41h ; A
.eh_frame:000000000000E8A6                 db  0Eh
.eh_frame:000000000000E8A7                 db  30h ; 0
.eh_frame:000000000000E8A8                 db  83h
.eh_frame:000000000000E8A9                 db    6
.eh_frame:000000000000E8AA                 db  7Ah ; z
.eh_frame:000000000000E8AB                 db  0Eh
.eh_frame:000000000000E8AC                 db  28h ; (
.eh_frame:000000000000E8AD                 db  44h ; D
.eh_frame:000000000000E8AE                 db  0Eh
.eh_frame:000000000000E8AF                 db  20h
.eh_frame:000000000000E8B0                 db  42h ; B
.eh_frame:000000000000E8B1                 db  0Eh
.eh_frame:000000000000E8B2                 db  18h
.eh_frame:000000000000E8B3                 db  42h ; B
.eh_frame:000000000000E8B4                 db  0Eh
.eh_frame:000000000000E8B5                 db  10h
.eh_frame:000000000000E8B6                 db  42h ; B
.eh_frame:000000000000E8B7                 db  0Eh
.eh_frame:000000000000E8B8                 db    8
.eh_frame:000000000000E8B9                 db    0
.eh_frame:000000000000E8BA                 db    0
.eh_frame:000000000000E8BB                 db    0
.eh_frame:000000000000E8BC                 db    0
.eh_frame:000000000000E8BD                 db    0
.eh_frame:000000000000E8BE                 db    0
.eh_frame:000000000000E8BF                 db    0
.eh_frame:000000000000E8C0                 db  4Ch ; L
.eh_frame:000000000000E8C1                 db    0
.eh_frame:000000000000E8C2                 db    0
.eh_frame:000000000000E8C3                 db    0
.eh_frame:000000000000E8C4                 db  6Ch ; l
.eh_frame:000000000000E8C5                 db  18h
.eh_frame:000000000000E8C6                 db    0
.eh_frame:000000000000E8C7                 db    0
.eh_frame:000000000000E8C8                 db  88h
.eh_frame:000000000000E8C9                 db 0B4h
.eh_frame:000000000000E8CA                 db 0FFh
.eh_frame:000000000000E8CB                 db 0FFh
.eh_frame:000000000000E8CC                 db  7Dh ; }
.eh_frame:000000000000E8CD                 db    0
.eh_frame:000000000000E8CE                 db    0
.eh_frame:000000000000E8CF                 db    0
.eh_frame:000000000000E8D0                 db    0
.eh_frame:000000000000E8D1                 db  42h ; B
.eh_frame:000000000000E8D2                 db  0Eh
.eh_frame:000000000000E8D3                 db  10h
.eh_frame:000000000000E8D4                 db  8Ch
.eh_frame:000000000000E8D5                 db    2
.eh_frame:000000000000E8D6                 db  41h ; A
.eh_frame:000000000000E8D7                 db  0Eh
.eh_frame:000000000000E8D8                 db  18h
.eh_frame:000000000000E8D9                 db  86h
.eh_frame:000000000000E8DA                 db    3
.eh_frame:000000000000E8DB                 db  44h ; D
.eh_frame:000000000000E8DC                 db  0Eh
.eh_frame:000000000000E8DD                 db  20h
.eh_frame:000000000000E8DE                 db  83h
.eh_frame:000000000000E8DF                 db    4
.eh_frame:000000000000E8E0                 db  69h ; i
.eh_frame:000000000000E8E1                 db  0Ah
.eh_frame:000000000000E8E2                 db  0Eh
.eh_frame:000000000000E8E3                 db  18h
.eh_frame:000000000000E8E4                 db  41h ; A
.eh_frame:000000000000E8E5                 db  0Eh
.eh_frame:000000000000E8E6                 db  10h
.eh_frame:000000000000E8E7                 db  42h ; B
.eh_frame:000000000000E8E8                 db  0Eh
.eh_frame:000000000000E8E9                 db    8
.eh_frame:000000000000E8EA                 db  45h ; E
.eh_frame:000000000000E8EB                 db  0Bh
.eh_frame:000000000000E8EC                 db  55h ; U
.eh_frame:000000000000E8ED                 db  0Ah
.eh_frame:000000000000E8EE                 db  0Eh
.eh_frame:000000000000E8EF                 db  18h
.eh_frame:000000000000E8F0                 db  41h ; A
.eh_frame:000000000000E8F1                 db  0Eh
.eh_frame:000000000000E8F2                 db  10h
.eh_frame:000000000000E8F3                 db  42h ; B
.eh_frame:000000000000E8F4                 db  0Eh
.eh_frame:000000000000E8F5                 db    8
.eh_frame:000000000000E8F6                 db  48h ; H
.eh_frame:000000000000E8F7                 db  0Bh
.eh_frame:000000000000E8F8                 db  41h ; A
.eh_frame:000000000000E8F9                 db  0Ah
.eh_frame:000000000000E8FA                 db  0Eh
.eh_frame:000000000000E8FB                 db  18h
.eh_frame:000000000000E8FC                 db  46h ; F
.eh_frame:000000000000E8FD                 db  0Eh
.eh_frame:000000000000E8FE                 db  10h
.eh_frame:000000000000E8FF                 db  42h ; B
.eh_frame:000000000000E900                 db  0Eh
.eh_frame:000000000000E901                 db    8
.eh_frame:000000000000E902                 db  47h ; G
.eh_frame:000000000000E903                 db  0Bh
.eh_frame:000000000000E904                 db  49h ; I
.eh_frame:000000000000E905                 db  0Eh
.eh_frame:000000000000E906                 db  18h
.eh_frame:000000000000E907                 db  41h ; A
.eh_frame:000000000000E908                 db  0Eh
.eh_frame:000000000000E909                 db  10h
.eh_frame:000000000000E90A                 db  42h ; B
.eh_frame:000000000000E90B                 db  0Eh
.eh_frame:000000000000E90C                 db    8
.eh_frame:000000000000E90D                 db    0
.eh_frame:000000000000E90E                 db    0
.eh_frame:000000000000E90F                 db    0
.eh_frame:000000000000E910                 db  1Ch
.eh_frame:000000000000E911                 db    0
.eh_frame:000000000000E912                 db    0
.eh_frame:000000000000E913                 db    0
.eh_frame:000000000000E914                 db 0BCh
.eh_frame:000000000000E915                 db  18h
.eh_frame:000000000000E916                 db    0
.eh_frame:000000000000E917                 db    0
.eh_frame:000000000000E918                 db 0B8h
.eh_frame:000000000000E919                 db 0B4h
.eh_frame:000000000000E91A                 db 0FFh
.eh_frame:000000000000E91B                 db 0FFh
.eh_frame:000000000000E91C                 db  60h ; `
.eh_frame:000000000000E91D                 db    0
.eh_frame:000000000000E91E                 db    0
.eh_frame:000000000000E91F                 db    0
.eh_frame:000000000000E920                 db    0
.eh_frame:000000000000E921                 db  44h ; D
.eh_frame:000000000000E922                 db  0Eh
.eh_frame:000000000000E923                 db  10h
.eh_frame:000000000000E924                 db  75h ; u
.eh_frame:000000000000E925                 db  0Ah
.eh_frame:000000000000E926                 db  0Eh
.eh_frame:000000000000E927                 db    8
.eh_frame:000000000000E928                 db  47h ; G
.eh_frame:000000000000E929                 db  0Bh
.eh_frame:000000000000E92A                 db  5Fh ; _
.eh_frame:000000000000E92B                 db  0Eh
.eh_frame:000000000000E92C                 db    8
.eh_frame:000000000000E92D                 db    0
.eh_frame:000000000000E92E                 db    0
.eh_frame:000000000000E92F                 db    0
.eh_frame:000000000000E930                 db  14h
.eh_frame:000000000000E931                 db    0
.eh_frame:000000000000E932                 db    0
.eh_frame:000000000000E933                 db    0
.eh_frame:000000000000E934                 db 0DCh
.eh_frame:000000000000E935                 db  18h
.eh_frame:000000000000E936                 db    0
.eh_frame:000000000000E937                 db    0
.eh_frame:000000000000E938                 db 0F8h
.eh_frame:000000000000E939                 db 0B4h
.eh_frame:000000000000E93A                 db 0FFh
.eh_frame:000000000000E93B                 db 0FFh
.eh_frame:000000000000E93C                 db  36h ; 6
.eh_frame:000000000000E93D                 db    0
.eh_frame:000000000000E93E                 db    0
.eh_frame:000000000000E93F                 db    0
.eh_frame:000000000000E940                 db    0
.eh_frame:000000000000E941                 db    0
.eh_frame:000000000000E942                 db    0
.eh_frame:000000000000E943                 db    0
.eh_frame:000000000000E944                 db    0
.eh_frame:000000000000E945                 db    0
.eh_frame:000000000000E946                 db    0
.eh_frame:000000000000E947                 db    0
.eh_frame:000000000000E948                 db  1Ch
.eh_frame:000000000000E949                 db    0
.eh_frame:000000000000E94A                 db    0
.eh_frame:000000000000E94B                 db    0
.eh_frame:000000000000E94C                 db 0F4h
.eh_frame:000000000000E94D                 db  18h
.eh_frame:000000000000E94E                 db    0
.eh_frame:000000000000E94F                 db    0
.eh_frame:000000000000E950                 db  20h
.eh_frame:000000000000E951                 db 0B5h
.eh_frame:000000000000E952                 db 0FFh
.eh_frame:000000000000E953                 db 0FFh
.eh_frame:000000000000E954                 db  3Ch ; <
.eh_frame:000000000000E955                 db    0
.eh_frame:000000000000E956                 db    0
.eh_frame:000000000000E957                 db    0
.eh_frame:000000000000E958                 db    0
.eh_frame:000000000000E959                 db  44h ; D
.eh_frame:000000000000E95A                 db  0Eh
.eh_frame:000000000000E95B                 db  10h
.eh_frame:000000000000E95C                 db  61h ; a
.eh_frame:000000000000E95D                 db  0Ah
.eh_frame:000000000000E95E                 db  0Eh
.eh_frame:000000000000E95F                 db    8
.eh_frame:000000000000E960                 db  4Bh ; K
.eh_frame:000000000000E961                 db  0Bh
.eh_frame:000000000000E962                 db  4Bh ; K
.eh_frame:000000000000E963                 db  0Eh
.eh_frame:000000000000E964                 db    8
.eh_frame:000000000000E965                 db    0
.eh_frame:000000000000E966                 db    0
.eh_frame:000000000000E967                 db    0
.eh_frame:000000000000E968                 db  18h
.eh_frame:000000000000E969                 db    0
.eh_frame:000000000000E96A                 db    0
.eh_frame:000000000000E96B                 db    0
.eh_frame:000000000000E96C                 db  14h
.eh_frame:000000000000E96D                 db  19h
.eh_frame:000000000000E96E                 db    0
.eh_frame:000000000000E96F                 db    0
.eh_frame:000000000000E970                 db  40h ; @
.eh_frame:000000000000E971                 db 0B5h
.eh_frame:000000000000E972                 db 0FFh
.eh_frame:000000000000E973                 db 0FFh
.eh_frame:000000000000E974                 db  23h ; #
.eh_frame:000000000000E975                 db    0
.eh_frame:000000000000E976                 db    0
.eh_frame:000000000000E977                 db    0
.eh_frame:000000000000E978                 db    0
.eh_frame:000000000000E979                 db  41h ; A
.eh_frame:000000000000E97A                 db  0Eh
.eh_frame:000000000000E97B                 db  10h
.eh_frame:000000000000E97C                 db  83h
.eh_frame:000000000000E97D                 db    2
.eh_frame:000000000000E97E                 db  61h ; a
.eh_frame:000000000000E97F                 db  0Eh
.eh_frame:000000000000E980                 db    8
.eh_frame:000000000000E981                 db    0
.eh_frame:000000000000E982                 db    0
.eh_frame:000000000000E983                 db    0
.eh_frame:000000000000E984                 db  1Ch
.eh_frame:000000000000E985                 db    0
.eh_frame:000000000000E986                 db    0
.eh_frame:000000000000E987                 db    0
.eh_frame:000000000000E988                 db  30h ; 0
.eh_frame:000000000000E989                 db  19h
.eh_frame:000000000000E98A                 db    0
.eh_frame:000000000000E98B                 db    0
.eh_frame:000000000000E98C                 db  54h ; T
.eh_frame:000000000000E98D                 db 0B5h
.eh_frame:000000000000E98E                 db 0FFh
.eh_frame:000000000000E98F                 db 0FFh
.eh_frame:000000000000E990                 db  34h ; 4
.eh_frame:000000000000E991                 db    0
.eh_frame:000000000000E992                 db    0
.eh_frame:000000000000E993                 db    0
.eh_frame:000000000000E994                 db    0
.eh_frame:000000000000E995                 db  41h ; A
.eh_frame:000000000000E996                 db  0Eh
.eh_frame:000000000000E997                 db  10h
.eh_frame:000000000000E998                 db  83h
.eh_frame:000000000000E999                 db    2
.eh_frame:000000000000E99A                 db  6Bh ; k
.eh_frame:000000000000E99B                 db  0Ah
.eh_frame:000000000000E99C                 db  0Eh
.eh_frame:000000000000E99D                 db    8
.eh_frame:000000000000E99E                 db  44h ; D
.eh_frame:000000000000E99F                 db  0Bh
.eh_frame:000000000000E9A0                 db  43h ; C
.eh_frame:000000000000E9A1                 db  0Eh
.eh_frame:000000000000E9A2                 db    8
.eh_frame:000000000000E9A3                 db    0
.eh_frame:000000000000E9A4                 db  10h
.eh_frame:000000000000E9A5                 db    0
.eh_frame:000000000000E9A6                 db    0
.eh_frame:000000000000E9A7                 db    0
.eh_frame:000000000000E9A8                 db  50h ; P
.eh_frame:000000000000E9A9                 db  19h
.eh_frame:000000000000E9AA                 db    0
.eh_frame:000000000000E9AB                 db    0
.eh_frame:000000000000E9AC                 db  74h ; t
.eh_frame:000000000000E9AD                 db 0B5h
.eh_frame:000000000000E9AE                 db 0FFh
.eh_frame:000000000000E9AF                 db 0FFh
.eh_frame:000000000000E9B0                 db    4
.eh_frame:000000000000E9B1                 db    0
.eh_frame:000000000000E9B2                 db    0
.eh_frame:000000000000E9B3                 db    0
.eh_frame:000000000000E9B4                 db    0
.eh_frame:000000000000E9B5                 db    0
.eh_frame:000000000000E9B6                 db    0
.eh_frame:000000000000E9B7                 db    0
.eh_frame:000000000000E9B8                 db  48h ; H
.eh_frame:000000000000E9B9                 db    0
.eh_frame:000000000000E9BA                 db    0
.eh_frame:000000000000E9BB                 db    0
.eh_frame:000000000000E9BC                 db  64h ; d
.eh_frame:000000000000E9BD                 db  19h
.eh_frame:000000000000E9BE                 db    0
.eh_frame:000000000000E9BF                 db    0
.eh_frame:000000000000E9C0                 db  70h ; p
.eh_frame:000000000000E9C1                 db 0B5h
.eh_frame:000000000000E9C2                 db 0FFh
.eh_frame:000000000000E9C3                 db 0FFh
.eh_frame:000000000000E9C4                 db  1Ah
.eh_frame:000000000000E9C5                 db    1
.eh_frame:000000000000E9C6                 db    0
.eh_frame:000000000000E9C7                 db    0
.eh_frame:000000000000E9C8                 db    0
.eh_frame:000000000000E9C9                 db  42h ; B
.eh_frame:000000000000E9CA                 db  0Eh
.eh_frame:000000000000E9CB                 db  10h
.eh_frame:000000000000E9CC                 db  8Fh
.eh_frame:000000000000E9CD                 db    2
.eh_frame:000000000000E9CE                 db  42h ; B
.eh_frame:000000000000E9CF                 db  0Eh
.eh_frame:000000000000E9D0                 db  18h
.eh_frame:000000000000E9D1                 db  8Eh
.eh_frame:000000000000E9D2                 db    3
.eh_frame:000000000000E9D3                 db  46h ; F
.eh_frame:000000000000E9D4                 db  0Eh
.eh_frame:000000000000E9D5                 db  20h
.eh_frame:000000000000E9D6                 db  8Dh
.eh_frame:000000000000E9D7                 db    4
.eh_frame:000000000000E9D8                 db  42h ; B
.eh_frame:000000000000E9D9                 db  0Eh
.eh_frame:000000000000E9DA                 db  28h ; (
.eh_frame:000000000000E9DB                 db  8Ch
.eh_frame:000000000000E9DC                 db    5
.eh_frame:000000000000E9DD                 db  44h ; D
.eh_frame:000000000000E9DE                 db  0Eh
.eh_frame:000000000000E9DF                 db  30h ; 0
.eh_frame:000000000000E9E0                 db  86h
.eh_frame:000000000000E9E1                 db    6
.eh_frame:000000000000E9E2                 db  41h ; A
.eh_frame:000000000000E9E3                 db  0Eh
.eh_frame:000000000000E9E4                 db  38h ; 8
.eh_frame:000000000000E9E5                 db  83h
.eh_frame:000000000000E9E6                 db    7
.eh_frame:000000000000E9E7                 db  47h ; G
.eh_frame:000000000000E9E8                 db  0Eh
.eh_frame:000000000000E9E9                 db  60h ; `
.eh_frame:000000000000E9EA                 db    2
.eh_frame:000000000000E9EB                 db 0DEh
.eh_frame:000000000000E9EC                 db  0Ah
.eh_frame:000000000000E9ED                 db  0Eh
.eh_frame:000000000000E9EE                 db  38h ; 8
.eh_frame:000000000000E9EF                 db  41h ; A
.eh_frame:000000000000E9F0                 db  0Eh
.eh_frame:000000000000E9F1                 db  30h ; 0
.eh_frame:000000000000E9F2                 db  41h ; A
.eh_frame:000000000000E9F3                 db  0Eh
.eh_frame:000000000000E9F4                 db  28h ; (
.eh_frame:000000000000E9F5                 db  42h ; B
.eh_frame:000000000000E9F6                 db  0Eh
.eh_frame:000000000000E9F7                 db  20h
.eh_frame:000000000000E9F8                 db  42h ; B
.eh_frame:000000000000E9F9                 db  0Eh
.eh_frame:000000000000E9FA                 db  18h
.eh_frame:000000000000E9FB                 db  42h ; B
.eh_frame:000000000000E9FC                 db  0Eh
.eh_frame:000000000000E9FD                 db  10h
.eh_frame:000000000000E9FE                 db  42h ; B
.eh_frame:000000000000E9FF                 db  0Eh
.eh_frame:000000000000EA00                 db    8
.eh_frame:000000000000EA01                 db  48h ; H
.eh_frame:000000000000EA02                 db  0Bh
.eh_frame:000000000000EA03                 db    0
.eh_frame:000000000000EA04                 db  18h
.eh_frame:000000000000EA05                 db    0
.eh_frame:000000000000EA06                 db    0
.eh_frame:000000000000EA07                 db    0
.eh_frame:000000000000EA08                 db 0B0h
.eh_frame:000000000000EA09                 db  19h
.eh_frame:000000000000EA0A                 db    0
.eh_frame:000000000000EA0B                 db    0
.eh_frame:000000000000EA0C                 db  44h ; D
.eh_frame:000000000000EA0D                 db 0B6h
.eh_frame:000000000000EA0E                 db 0FFh
.eh_frame:000000000000EA0F                 db 0FFh
.eh_frame:000000000000EA10                 db  1Eh
.eh_frame:000000000000EA11                 db    0
.eh_frame:000000000000EA12                 db    0
.eh_frame:000000000000EA13                 db    0
.eh_frame:000000000000EA14                 db    0
.eh_frame:000000000000EA15                 db  41h ; A
.eh_frame:000000000000EA16                 db  0Eh
.eh_frame:000000000000EA17                 db  10h
.eh_frame:000000000000EA18                 db  83h
.eh_frame:000000000000EA19                 db    2
.eh_frame:000000000000EA1A                 db  58h ; X
.eh_frame:000000000000EA1B                 db  0Eh
.eh_frame:000000000000EA1C                 db    8
.eh_frame:000000000000EA1D                 db    0
.eh_frame:000000000000EA1E                 db    0
.eh_frame:000000000000EA1F                 db    0
.eh_frame:000000000000EA20                 db  34h ; 4
.eh_frame:000000000000EA21                 db    0
.eh_frame:000000000000EA22                 db    0
.eh_frame:000000000000EA23                 db    0
.eh_frame:000000000000EA24                 db 0CCh
.eh_frame:000000000000EA25                 db  19h
.eh_frame:000000000000EA26                 db    0
.eh_frame:000000000000EA27                 db    0
.eh_frame:000000000000EA28                 db  48h ; H
.eh_frame:000000000000EA29                 db 0B6h
.eh_frame:000000000000EA2A                 db 0FFh
.eh_frame:000000000000EA2B                 db 0FFh
.eh_frame:000000000000EA2C                 db  51h ; Q
.eh_frame:000000000000EA2D                 db    0
.eh_frame:000000000000EA2E                 db    0
.eh_frame:000000000000EA2F                 db    0
.eh_frame:000000000000EA30                 db    0
.eh_frame:000000000000EA31                 db  42h ; B
.eh_frame:000000000000EA32                 db  0Eh
.eh_frame:000000000000EA33                 db  10h
.eh_frame:000000000000EA34                 db  8Dh
.eh_frame:000000000000EA35                 db    2
.eh_frame:000000000000EA36                 db  42h ; B
.eh_frame:000000000000EA37                 db  0Eh
.eh_frame:000000000000EA38                 db  18h
.eh_frame:000000000000EA39                 db  8Ch
.eh_frame:000000000000EA3A                 db    3
.eh_frame:000000000000EA3B                 db  41h ; A
.eh_frame:000000000000EA3C                 db  0Eh
.eh_frame:000000000000EA3D                 db  20h
.eh_frame:000000000000EA3E                 db  86h
.eh_frame:000000000000EA3F                 db    4
.eh_frame:000000000000EA40                 db  41h ; A
.eh_frame:000000000000EA41                 db  0Eh
.eh_frame:000000000000EA42                 db  28h ; (
.eh_frame:000000000000EA43                 db  83h
.eh_frame:000000000000EA44                 db    5
.eh_frame:000000000000EA45                 db  47h ; G
.eh_frame:000000000000EA46                 db  0Eh
.eh_frame:000000000000EA47                 db  30h ; 0
.eh_frame:000000000000EA48                 db  7Ah ; z
.eh_frame:000000000000EA49                 db  0Eh
.eh_frame:000000000000EA4A                 db  28h ; (
.eh_frame:000000000000EA4B                 db  44h ; D
.eh_frame:000000000000EA4C                 db  0Eh
.eh_frame:000000000000EA4D                 db  20h
.eh_frame:000000000000EA4E                 db  41h ; A
.eh_frame:000000000000EA4F                 db  0Eh
.eh_frame:000000000000EA50                 db  18h
.eh_frame:000000000000EA51                 db  42h ; B
.eh_frame:000000000000EA52                 db  0Eh
.eh_frame:000000000000EA53                 db  10h
.eh_frame:000000000000EA54                 db  42h ; B
.eh_frame:000000000000EA55                 db  0Eh
.eh_frame:000000000000EA56                 db    8
.eh_frame:000000000000EA57                 db    0
.eh_frame:000000000000EA58                 db  1Ch
.eh_frame:000000000000EA59                 db    0
.eh_frame:000000000000EA5A                 db    0
.eh_frame:000000000000EA5B                 db    0
.eh_frame:000000000000EA5C                 db    4
.eh_frame:000000000000EA5D                 db  1Ah
.eh_frame:000000000000EA5E                 db    0
.eh_frame:000000000000EA5F                 db    0
.eh_frame:000000000000EA60                 db  70h ; p
.eh_frame:000000000000EA61                 db 0B6h
.eh_frame:000000000000EA62                 db 0FFh
.eh_frame:000000000000EA63                 db 0FFh
.eh_frame:000000000000EA64                 db  5Dh ; ]
.eh_frame:000000000000EA65                 db    0
.eh_frame:000000000000EA66                 db    0
.eh_frame:000000000000EA67                 db    0
.eh_frame:000000000000EA68                 db    0
.eh_frame:000000000000EA69                 db  41h ; A
.eh_frame:000000000000EA6A                 db  0Eh
.eh_frame:000000000000EA6B                 db  10h
.eh_frame:000000000000EA6C                 db  86h
.eh_frame:000000000000EA6D                 db    2
.eh_frame:000000000000EA6E                 db  41h ; A
.eh_frame:000000000000EA6F                 db  0Eh
.eh_frame:000000000000EA70                 db  18h
.eh_frame:000000000000EA71                 db  83h
.eh_frame:000000000000EA72                 db    3
.eh_frame:000000000000EA73                 db  44h ; D
.eh_frame:000000000000EA74                 db  0Eh
.eh_frame:000000000000EA75                 db  20h
.eh_frame:000000000000EA76                 db    0
.eh_frame:000000000000EA77                 db    0
.eh_frame:000000000000EA78                 db  48h ; H
.eh_frame:000000000000EA79                 db    0
.eh_frame:000000000000EA7A                 db    0
.eh_frame:000000000000EA7B                 db    0
.eh_frame:000000000000EA7C                 db  24h ; $
.eh_frame:000000000000EA7D                 db  1Ah
.eh_frame:000000000000EA7E                 db    0
.eh_frame:000000000000EA7F                 db    0
.eh_frame:000000000000EA80                 db 0B0h
.eh_frame:000000000000EA81                 db 0B6h
.eh_frame:000000000000EA82                 db 0FFh
.eh_frame:000000000000EA83                 db 0FFh
.eh_frame:000000000000EA84                 db  29h ; )
.eh_frame:000000000000EA85                 db    3
.eh_frame:000000000000EA86                 db    0
.eh_frame:000000000000EA87                 db    0
.eh_frame:000000000000EA88                 db    0
.eh_frame:000000000000EA89                 db  42h ; B
.eh_frame:000000000000EA8A                 db  0Eh
.eh_frame:000000000000EA8B                 db  10h
.eh_frame:000000000000EA8C                 db  8Fh
.eh_frame:000000000000EA8D                 db    2
.eh_frame:000000000000EA8E                 db  42h ; B
.eh_frame:000000000000EA8F                 db  0Eh
.eh_frame:000000000000EA90                 db  18h
.eh_frame:000000000000EA91                 db  8Eh
.eh_frame:000000000000EA92                 db    3
.eh_frame:000000000000EA93                 db  42h ; B
.eh_frame:000000000000EA94                 db  0Eh
.eh_frame:000000000000EA95                 db  20h
.eh_frame:000000000000EA96                 db  8Dh
.eh_frame:000000000000EA97                 db    4
.eh_frame:000000000000EA98                 db  42h ; B
.eh_frame:000000000000EA99                 db  0Eh
.eh_frame:000000000000EA9A                 db  28h ; (
.eh_frame:000000000000EA9B                 db  8Ch
.eh_frame:000000000000EA9C                 db    5
.eh_frame:000000000000EA9D                 db  41h ; A
.eh_frame:000000000000EA9E                 db  0Eh
.eh_frame:000000000000EA9F                 db  30h ; 0
.eh_frame:000000000000EAA0                 db  86h
.eh_frame:000000000000EAA1                 db    6
.eh_frame:000000000000EAA2                 db  41h ; A
.eh_frame:000000000000EAA3                 db  0Eh
.eh_frame:000000000000EAA4                 db  38h ; 8
.eh_frame:000000000000EAA5                 db  83h
.eh_frame:000000000000EAA6                 db    7
.eh_frame:000000000000EAA7                 db  44h ; D
.eh_frame:000000000000EAA8                 db  0Eh
.eh_frame:000000000000EAA9                 db  70h ; p
.eh_frame:000000000000EAAA                 db    2
.eh_frame:000000000000EAAB                 db  94h
.eh_frame:000000000000EAAC                 db  0Ah
.eh_frame:000000000000EAAD                 db  0Eh
.eh_frame:000000000000EAAE                 db  38h ; 8
.eh_frame:000000000000EAAF                 db  41h ; A
.eh_frame:000000000000EAB0                 db  0Eh
.eh_frame:000000000000EAB1                 db  30h ; 0
.eh_frame:000000000000EAB2                 db  41h ; A
.eh_frame:000000000000EAB3                 db  0Eh
.eh_frame:000000000000EAB4                 db  28h ; (
.eh_frame:000000000000EAB5                 db  42h ; B
.eh_frame:000000000000EAB6                 db  0Eh
.eh_frame:000000000000EAB7                 db  20h
.eh_frame:000000000000EAB8                 db  42h ; B
.eh_frame:000000000000EAB9                 db  0Eh
.eh_frame:000000000000EABA                 db  18h
.eh_frame:000000000000EABB                 db  42h ; B
.eh_frame:000000000000EABC                 db  0Eh
.eh_frame:000000000000EABD                 db  10h
.eh_frame:000000000000EABE                 db  42h ; B
.eh_frame:000000000000EABF                 db  0Eh
.eh_frame:000000000000EAC0                 db    8
.eh_frame:000000000000EAC1                 db  44h ; D
.eh_frame:000000000000EAC2                 db  0Bh
.eh_frame:000000000000EAC3                 db    0
.eh_frame:000000000000EAC4                 db  10h
.eh_frame:000000000000EAC5                 db    0
.eh_frame:000000000000EAC6                 db    0
.eh_frame:000000000000EAC7                 db    0
.eh_frame:000000000000EAC8                 db  70h ; p
.eh_frame:000000000000EAC9                 db  1Ah
.eh_frame:000000000000EACA                 db    0
.eh_frame:000000000000EACB                 db    0
.eh_frame:000000000000EACC                 db  94h
.eh_frame:000000000000EACD                 db 0B9h
.eh_frame:000000000000EACE                 db 0FFh
.eh_frame:000000000000EACF                 db 0FFh
.eh_frame:000000000000EAD0                 db    5
.eh_frame:000000000000EAD1                 db    0
.eh_frame:000000000000EAD2                 db    0
.eh_frame:000000000000EAD3                 db    0
.eh_frame:000000000000EAD4                 db    0
.eh_frame:000000000000EAD5                 db    0
.eh_frame:000000000000EAD6                 db    0
.eh_frame:000000000000EAD7                 db    0
.eh_frame:000000000000EAD8                 db  10h
.eh_frame:000000000000EAD9                 db    0
.eh_frame:000000000000EADA                 db    0
.eh_frame:000000000000EADB                 db    0
.eh_frame:000000000000EADC                 db  84h
.eh_frame:000000000000EADD                 db  1Ah
.eh_frame:000000000000EADE                 db    0
.eh_frame:000000000000EADF                 db    0
.eh_frame:000000000000EAE0                 db  90h
.eh_frame:000000000000EAE1                 db 0B9h
.eh_frame:000000000000EAE2                 db 0FFh
.eh_frame:000000000000EAE3                 db 0FFh
.eh_frame:000000000000EAE4                 db    5
.eh_frame:000000000000EAE5                 db    0
.eh_frame:000000000000EAE6                 db    0
.eh_frame:000000000000EAE7                 db    0
.eh_frame:000000000000EAE8                 db    0
.eh_frame:000000000000EAE9                 db    0
.eh_frame:000000000000EAEA                 db    0
.eh_frame:000000000000EAEB                 db    0
.eh_frame:000000000000EAEC                 db  60h ; `
.eh_frame:000000000000EAED                 db    0
.eh_frame:000000000000EAEE                 db    0
.eh_frame:000000000000EAEF                 db    0
.eh_frame:000000000000EAF0                 db  98h
.eh_frame:000000000000EAF1                 db  1Ah
.eh_frame:000000000000EAF2                 db    0
.eh_frame:000000000000EAF3                 db    0
.eh_frame:000000000000EAF4                 db  8Ch
.eh_frame:000000000000EAF5                 db 0B9h
.eh_frame:000000000000EAF6                 db 0FFh
.eh_frame:000000000000EAF7                 db 0FFh
.eh_frame:000000000000EAF8                 db  96h
.eh_frame:000000000000EAF9                 db    1
.eh_frame:000000000000EAFA                 db    0
.eh_frame:000000000000EAFB                 db    0
.eh_frame:000000000000EAFC                 db    0
.eh_frame:000000000000EAFD                 db  42h ; B
.eh_frame:000000000000EAFE                 db  0Eh
.eh_frame:000000000000EAFF                 db  10h
.eh_frame:000000000000EB00                 db  8Fh
.eh_frame:000000000000EB01                 db    2
.eh_frame:000000000000EB02                 db  42h ; B
.eh_frame:000000000000EB03                 db  0Eh
.eh_frame:000000000000EB04                 db  18h
.eh_frame:000000000000EB05                 db  8Eh
.eh_frame:000000000000EB06                 db    3
.eh_frame:000000000000EB07                 db  42h ; B
.eh_frame:000000000000EB08                 db  0Eh
.eh_frame:000000000000EB09                 db  20h
.eh_frame:000000000000EB0A                 db  8Dh
.eh_frame:000000000000EB0B                 db    4
.eh_frame:000000000000EB0C                 db  42h ; B
.eh_frame:000000000000EB0D                 db  0Eh
.eh_frame:000000000000EB0E                 db  28h ; (
.eh_frame:000000000000EB0F                 db  8Ch
.eh_frame:000000000000EB10                 db    5
.eh_frame:000000000000EB11                 db  44h ; D
.eh_frame:000000000000EB12                 db  0Eh
.eh_frame:000000000000EB13                 db  30h ; 0
.eh_frame:000000000000EB14                 db  86h
.eh_frame:000000000000EB15                 db    6
.eh_frame:000000000000EB16                 db  41h ; A
.eh_frame:000000000000EB17                 db  0Eh
.eh_frame:000000000000EB18                 db  38h ; 8
.eh_frame:000000000000EB19                 db  83h
.eh_frame:000000000000EB1A                 db    7
.eh_frame:000000000000EB1B                 db  4Ah ; J
.eh_frame:000000000000EB1C                 db  0Eh
.eh_frame:000000000000EB1D                 db  50h ; P
.eh_frame:000000000000EB1E                 db    2
.eh_frame:000000000000EB1F                 db  5Fh ; _
.eh_frame:000000000000EB20                 db  0Ah
.eh_frame:000000000000EB21                 db  0Eh
.eh_frame:000000000000EB22                 db  38h ; 8
.eh_frame:000000000000EB23                 db  41h ; A
.eh_frame:000000000000EB24                 db  0Eh
.eh_frame:000000000000EB25                 db  30h ; 0
.eh_frame:000000000000EB26                 db  41h ; A
.eh_frame:000000000000EB27                 db  0Eh
.eh_frame:000000000000EB28                 db  28h ; (
.eh_frame:000000000000EB29                 db  42h ; B
.eh_frame:000000000000EB2A                 db  0Eh
.eh_frame:000000000000EB2B                 db  20h
.eh_frame:000000000000EB2C                 db  42h ; B
.eh_frame:000000000000EB2D                 db  0Eh
.eh_frame:000000000000EB2E                 db  18h
.eh_frame:000000000000EB2F                 db  42h ; B
.eh_frame:000000000000EB30                 db  0Eh
.eh_frame:000000000000EB31                 db  10h
.eh_frame:000000000000EB32                 db  42h ; B
.eh_frame:000000000000EB33                 db  0Eh
.eh_frame:000000000000EB34                 db    8
.eh_frame:000000000000EB35                 db  48h ; H
.eh_frame:000000000000EB36                 db  0Bh
.eh_frame:000000000000EB37                 db    2
.eh_frame:000000000000EB38                 db  9Bh
.eh_frame:000000000000EB39                 db  0Ah
.eh_frame:000000000000EB3A                 db  0Eh
.eh_frame:000000000000EB3B                 db  38h ; 8
.eh_frame:000000000000EB3C                 db  41h ; A
.eh_frame:000000000000EB3D                 db  0Eh
.eh_frame:000000000000EB3E                 db  30h ; 0
.eh_frame:000000000000EB3F                 db  41h ; A
.eh_frame:000000000000EB40                 db  0Eh
.eh_frame:000000000000EB41                 db  28h ; (
.eh_frame:000000000000EB42                 db  42h ; B
.eh_frame:000000000000EB43                 db  0Eh
.eh_frame:000000000000EB44                 db  20h
.eh_frame:000000000000EB45                 db  42h ; B
.eh_frame:000000000000EB46                 db  0Eh
.eh_frame:000000000000EB47                 db  18h
.eh_frame:000000000000EB48                 db  42h ; B
.eh_frame:000000000000EB49                 db  0Eh
.eh_frame:000000000000EB4A                 db  10h
.eh_frame:000000000000EB4B                 db  42h ; B
.eh_frame:000000000000EB4C                 db  0Eh
.eh_frame:000000000000EB4D                 db    8
.eh_frame:000000000000EB4E                 db  43h ; C
.eh_frame:000000000000EB4F                 db  0Bh
.eh_frame:000000000000EB50                 db  34h ; 4
.eh_frame:000000000000EB51                 db    0
.eh_frame:000000000000EB52                 db    0
.eh_frame:000000000000EB53                 db    0
.eh_frame:000000000000EB54                 db 0FCh
.eh_frame:000000000000EB55                 db  1Ah
.eh_frame:000000000000EB56                 db    0
.eh_frame:000000000000EB57                 db    0
.eh_frame:000000000000EB58                 db 0C8h
.eh_frame:000000000000EB59                 db 0BAh
.eh_frame:000000000000EB5A                 db 0FFh
.eh_frame:000000000000EB5B                 db 0FFh
.eh_frame:000000000000EB5C                 db  49h ; I
.eh_frame:000000000000EB5D                 db    0
.eh_frame:000000000000EB5E                 db    0
.eh_frame:000000000000EB5F                 db    0
.eh_frame:000000000000EB60                 db    0
.eh_frame:000000000000EB61                 db  41h ; A
.eh_frame:000000000000EB62                 db  0Eh
.eh_frame:000000000000EB63                 db  10h
.eh_frame:000000000000EB64                 db  86h
.eh_frame:000000000000EB65                 db    2
.eh_frame:000000000000EB66                 db  41h ; A
.eh_frame:000000000000EB67                 db  0Eh
.eh_frame:000000000000EB68                 db  18h
.eh_frame:000000000000EB69                 db  83h
.eh_frame:000000000000EB6A                 db    3
.eh_frame:000000000000EB6B                 db  53h ; S
.eh_frame:000000000000EB6C                 db  0Eh
.eh_frame:000000000000EB6D                 db  20h
.eh_frame:000000000000EB6E                 db  59h ; Y
.eh_frame:000000000000EB6F                 db  0Ah
.eh_frame:000000000000EB70                 db  0Eh
.eh_frame:000000000000EB71                 db  18h
.eh_frame:000000000000EB72                 db  44h ; D
.eh_frame:000000000000EB73                 db  0Eh
.eh_frame:000000000000EB74                 db  10h
.eh_frame:000000000000EB75                 db  41h ; A
.eh_frame:000000000000EB76                 db  0Eh
.eh_frame:000000000000EB77                 db    8
.eh_frame:000000000000EB78                 db  4Dh ; M
.eh_frame:000000000000EB79                 db  0Bh
.eh_frame:000000000000EB7A                 db  44h ; D
.eh_frame:000000000000EB7B                 db  0Eh
.eh_frame:000000000000EB7C                 db  18h
.eh_frame:000000000000EB7D                 db  43h ; C
.eh_frame:000000000000EB7E                 db  0Eh
.eh_frame:000000000000EB7F                 db  10h
.eh_frame:000000000000EB80                 db  41h ; A
.eh_frame:000000000000EB81                 db  0Eh
.eh_frame:000000000000EB82                 db    8
.eh_frame:000000000000EB83                 db    0
.eh_frame:000000000000EB84                 db    0
.eh_frame:000000000000EB85                 db    0
.eh_frame:000000000000EB86                 db    0
.eh_frame:000000000000EB87                 db    0
.eh_frame:000000000000EB88                 db  10h
.eh_frame:000000000000EB89                 db    0
.eh_frame:000000000000EB8A                 db    0
.eh_frame:000000000000EB8B                 db    0
.eh_frame:000000000000EB8C                 db  34h ; 4
.eh_frame:000000000000EB8D                 db  1Bh
.eh_frame:000000000000EB8E                 db    0
.eh_frame:000000000000EB8F                 db    0
.eh_frame:000000000000EB90                 db 0E0h
.eh_frame:000000000000EB91                 db 0BAh
.eh_frame:000000000000EB92                 db 0FFh
.eh_frame:000000000000EB93                 db 0FFh
.eh_frame:000000000000EB94                 db  8Eh
.eh_frame:000000000000EB95                 db    2
.eh_frame:000000000000EB96                 db    0
.eh_frame:000000000000EB97                 db    0
.eh_frame:000000000000EB98                 db    0
.eh_frame:000000000000EB99                 db    0
.eh_frame:000000000000EB9A                 db    0
.eh_frame:000000000000EB9B                 db    0
.eh_frame:000000000000EB9C                 db  30h ; 0
.eh_frame:000000000000EB9D                 db    0
.eh_frame:000000000000EB9E                 db    0
.eh_frame:000000000000EB9F                 db    0
.eh_frame:000000000000EBA0                 db  48h ; H
.eh_frame:000000000000EBA1                 db  1Bh
.eh_frame:000000000000EBA2                 db    0
.eh_frame:000000000000EBA3                 db    0
.eh_frame:000000000000EBA4                 db  5Ch ; \
.eh_frame:000000000000EBA5                 db 0BDh
.eh_frame:000000000000EBA6                 db 0FFh
.eh_frame:000000000000EBA7                 db 0FFh
.eh_frame:000000000000EBA8                 db  40h ; @
.eh_frame:000000000000EBA9                 db    2
.eh_frame:000000000000EBAA                 db    0
.eh_frame:000000000000EBAB                 db    0
.eh_frame:000000000000EBAC                 db    0
.eh_frame:000000000000EBAD                 db  42h ; B
.eh_frame:000000000000EBAE                 db  0Eh
.eh_frame:000000000000EBAF                 db  10h
.eh_frame:000000000000EBB0                 db  8Dh
.eh_frame:000000000000EBB1                 db    2
.eh_frame:000000000000EBB2                 db  42h ; B
.eh_frame:000000000000EBB3                 db  0Eh
.eh_frame:000000000000EBB4                 db  18h
.eh_frame:000000000000EBB5                 db  8Ch
.eh_frame:000000000000EBB6                 db    3
.eh_frame:000000000000EBB7                 db  48h ; H
.eh_frame:000000000000EBB8                 db  0Eh
.eh_frame:000000000000EBB9                 db  20h
.eh_frame:000000000000EBBA                 db  86h
.eh_frame:000000000000EBBB                 db    4
.eh_frame:000000000000EBBC                 db  44h ; D
.eh_frame:000000000000EBBD                 db  0Eh
.eh_frame:000000000000EBBE                 db  28h ; (
.eh_frame:000000000000EBBF                 db  83h
.eh_frame:000000000000EBC0                 db    5
.eh_frame:000000000000EBC1                 db    3
.eh_frame:000000000000EBC2                 db    9
.eh_frame:000000000000EBC3                 db    2
.eh_frame:000000000000EBC4                 db  0Eh
.eh_frame:000000000000EBC5                 db  20h
.eh_frame:000000000000EBC6                 db  57h ; W
.eh_frame:000000000000EBC7                 db  0Eh
.eh_frame:000000000000EBC8                 db  18h
.eh_frame:000000000000EBC9                 db  4Dh ; M
.eh_frame:000000000000EBCA                 db  0Eh
.eh_frame:000000000000EBCB                 db  10h
.eh_frame:000000000000EBCC                 db  42h ; B
.eh_frame:000000000000EBCD                 db  0Eh
.eh_frame:000000000000EBCE                 db    8
.eh_frame:000000000000EBCF                 db    0
.eh_frame:000000000000EBD0                 db  14h
.eh_frame:000000000000EBD1                 db    0
.eh_frame:000000000000EBD2                 db    0
.eh_frame:000000000000EBD3                 db    0
.eh_frame:000000000000EBD4                 db  7Ch ; |
.eh_frame:000000000000EBD5                 db  1Bh
.eh_frame:000000000000EBD6                 db    0
.eh_frame:000000000000EBD7                 db    0
.eh_frame:000000000000EBD8                 db  68h ; h
.eh_frame:000000000000EBD9                 db 0BFh
.eh_frame:000000000000EBDA                 db 0FFh
.eh_frame:000000000000EBDB                 db 0FFh
.eh_frame:000000000000EBDC                 db  0Eh
.eh_frame:000000000000EBDD                 db    0
.eh_frame:000000000000EBDE                 db    0
.eh_frame:000000000000EBDF                 db    0
.eh_frame:000000000000EBE0                 db    0
.eh_frame:000000000000EBE1                 db    0
.eh_frame:000000000000EBE2                 db    0
.eh_frame:000000000000EBE3                 db    0
.eh_frame:000000000000EBE4                 db    0
.eh_frame:000000000000EBE5                 db    0
.eh_frame:000000000000EBE6                 db    0
.eh_frame:000000000000EBE7                 db    0
.eh_frame:000000000000EBE8                 db  34h ; 4
.eh_frame:000000000000EBE9                 db    0
.eh_frame:000000000000EBEA                 db    0
.eh_frame:000000000000EBEB                 db    0
.eh_frame:000000000000EBEC                 db  94h
.eh_frame:000000000000EBED                 db  1Bh
.eh_frame:000000000000EBEE                 db    0
.eh_frame:000000000000EBEF                 db    0
.eh_frame:000000000000EBF0                 db  60h ; `
.eh_frame:000000000000EBF1                 db 0BFh
.eh_frame:000000000000EBF2                 db 0FFh
.eh_frame:000000000000EBF3                 db 0FFh
.eh_frame:000000000000EBF4                 db  7Bh ; {
.eh_frame:000000000000EBF5                 db    0
.eh_frame:000000000000EBF6                 db    0
.eh_frame:000000000000EBF7                 db    0
.eh_frame:000000000000EBF8                 db    0
.eh_frame:000000000000EBF9                 db  42h ; B
.eh_frame:000000000000EBFA                 db  0Eh
.eh_frame:000000000000EBFB                 db  10h
.eh_frame:000000000000EBFC                 db  8Ch
.eh_frame:000000000000EBFD                 db    2
.eh_frame:000000000000EBFE                 db  41h ; A
.eh_frame:000000000000EBFF                 db  0Eh
.eh_frame:000000000000EC00                 db  18h
.eh_frame:000000000000EC01                 db  86h
.eh_frame:000000000000EC02                 db    3
.eh_frame:000000000000EC03                 db  41h ; A
.eh_frame:000000000000EC04                 db  0Eh
.eh_frame:000000000000EC05                 db  20h
.eh_frame:000000000000EC06                 db  83h
.eh_frame:000000000000EC07                 db    4
.eh_frame:000000000000EC08                 db  7Dh ; }
.eh_frame:000000000000EC09                 db  0Ah
.eh_frame:000000000000EC0A                 db  0Eh
.eh_frame:000000000000EC0B                 db  18h
.eh_frame:000000000000EC0C                 db  41h ; A
.eh_frame:000000000000EC0D                 db  0Eh
.eh_frame:000000000000EC0E                 db  10h
.eh_frame:000000000000EC0F                 db  42h ; B
.eh_frame:000000000000EC10                 db  0Eh
.eh_frame:000000000000EC11                 db    8
.eh_frame:000000000000EC12                 db  44h ; D
.eh_frame:000000000000EC13                 db  0Bh
.eh_frame:000000000000EC14                 db  60h ; `
.eh_frame:000000000000EC15                 db  0Ah
.eh_frame:000000000000EC16                 db  0Eh
.eh_frame:000000000000EC17                 db  18h
.eh_frame:000000000000EC18                 db  41h ; A
.eh_frame:000000000000EC19                 db  0Eh
.eh_frame:000000000000EC1A                 db  10h
.eh_frame:000000000000EC1B                 db  42h ; B
.eh_frame:000000000000EC1C                 db  0Eh
.eh_frame:000000000000EC1D                 db    8
.eh_frame:000000000000EC1E                 db  45h ; E
.eh_frame:000000000000EC1F                 db  0Bh
.eh_frame:000000000000EC20                 db  34h ; 4
.eh_frame:000000000000EC21                 db    0
.eh_frame:000000000000EC22                 db    0
.eh_frame:000000000000EC23                 db    0
.eh_frame:000000000000EC24                 db 0CCh
.eh_frame:000000000000EC25                 db  1Bh
.eh_frame:000000000000EC26                 db    0
.eh_frame:000000000000EC27                 db    0
.eh_frame:000000000000EC28                 db 0A8h
.eh_frame:000000000000EC29                 db 0BFh
.eh_frame:000000000000EC2A                 db 0FFh
.eh_frame:000000000000EC2B                 db 0FFh
.eh_frame:000000000000EC2C                 db  7Eh ; ~
.eh_frame:000000000000EC2D                 db    2
.eh_frame:000000000000EC2E                 db    0
.eh_frame:000000000000EC2F                 db    0
.eh_frame:000000000000EC30                 db    0
.eh_frame:000000000000EC31                 db  42h ; B
.eh_frame:000000000000EC32                 db  0Eh
.eh_frame:000000000000EC33                 db  10h
.eh_frame:000000000000EC34                 db  8Ch
.eh_frame:000000000000EC35                 db    2
.eh_frame:000000000000EC36                 db  41h ; A
.eh_frame:000000000000EC37                 db  0Eh
.eh_frame:000000000000EC38                 db  18h
.eh_frame:000000000000EC39                 db  86h
.eh_frame:000000000000EC3A                 db    3
.eh_frame:000000000000EC3B                 db  43h ; C
.eh_frame:000000000000EC3C                 db  0Eh
.eh_frame:000000000000EC3D                 db  20h
.eh_frame:000000000000EC3E                 db  83h
.eh_frame:000000000000EC3F                 db    4
.eh_frame:000000000000EC40                 db  44h ; D
.eh_frame:000000000000EC41                 db  0Eh
.eh_frame:000000000000EC42                 db  70h ; p
.eh_frame:000000000000EC43                 db    2
.eh_frame:000000000000EC44                 db 0F0h
.eh_frame:000000000000EC45                 db  0Ah
.eh_frame:000000000000EC46                 db  0Eh
.eh_frame:000000000000EC47                 db  20h
.eh_frame:000000000000EC48                 db  41h ; A
.eh_frame:000000000000EC49                 db  0Eh
.eh_frame:000000000000EC4A                 db  18h
.eh_frame:000000000000EC4B                 db  41h ; A
.eh_frame:000000000000EC4C                 db  0Eh
.eh_frame:000000000000EC4D                 db  10h
.eh_frame:000000000000EC4E                 db  42h ; B
.eh_frame:000000000000EC4F                 db  0Eh
.eh_frame:000000000000EC50                 db    8
.eh_frame:000000000000EC51                 db  42h ; B
.eh_frame:000000000000EC52                 db  0Bh
.eh_frame:000000000000EC53                 db    0
.eh_frame:000000000000EC54                 db    0
.eh_frame:000000000000EC55                 db    0
.eh_frame:000000000000EC56                 db    0
.eh_frame:000000000000EC57                 db    0
.eh_frame:000000000000EC58                 db  2Ch ; ,
.eh_frame:000000000000EC59                 db    0
.eh_frame:000000000000EC5A                 db    0
.eh_frame:000000000000EC5B                 db    0
.eh_frame:000000000000EC5C                 db    4
.eh_frame:000000000000EC5D                 db  1Ch
.eh_frame:000000000000EC5E                 db    0
.eh_frame:000000000000EC5F                 db    0
.eh_frame:000000000000EC60                 db 0F0h
.eh_frame:000000000000EC61                 db 0C1h
.eh_frame:000000000000EC62                 db 0FFh
.eh_frame:000000000000EC63                 db 0FFh
.eh_frame:000000000000EC64                 db  93h
.eh_frame:000000000000EC65                 db    0
.eh_frame:000000000000EC66                 db    0
.eh_frame:000000000000EC67                 db    0
.eh_frame:000000000000EC68                 db    0
.eh_frame:000000000000EC69                 db  42h ; B
.eh_frame:000000000000EC6A                 db  0Eh
.eh_frame:000000000000EC6B                 db  10h
.eh_frame:000000000000EC6C                 db  8Ch
.eh_frame:000000000000EC6D                 db    2
.eh_frame:000000000000EC6E                 db  41h ; A
.eh_frame:000000000000EC6F                 db  0Eh
.eh_frame:000000000000EC70                 db  18h
.eh_frame:000000000000EC71                 db  86h
.eh_frame:000000000000EC72                 db    3
.eh_frame:000000000000EC73                 db  44h ; D
.eh_frame:000000000000EC74                 db  0Eh
.eh_frame:000000000000EC75                 db  20h
.eh_frame:000000000000EC76                 db  83h
.eh_frame:000000000000EC77                 db    4
.eh_frame:000000000000EC78                 db  5Eh ; ^
.eh_frame:000000000000EC79                 db  0Ah
.eh_frame:000000000000EC7A                 db  0Eh
.eh_frame:000000000000EC7B                 db  18h
.eh_frame:000000000000EC7C                 db  41h ; A
.eh_frame:000000000000EC7D                 db  0Eh
.eh_frame:000000000000EC7E                 db  10h
.eh_frame:000000000000EC7F                 db  42h ; B
.eh_frame:000000000000EC80                 db  0Eh
.eh_frame:000000000000EC81                 db    8
.eh_frame:000000000000EC82                 db  48h ; H
.eh_frame:000000000000EC83                 db  0Bh
.eh_frame:000000000000EC84                 db    0
.eh_frame:000000000000EC85                 db    0
.eh_frame:000000000000EC86                 db    0
.eh_frame:000000000000EC87                 db    0
.eh_frame:000000000000EC88                 db  44h ; D
.eh_frame:000000000000EC89                 db    0
.eh_frame:000000000000EC8A                 db    0
.eh_frame:000000000000EC8B                 db    0
.eh_frame:000000000000EC8C                 db  34h ; 4
.eh_frame:000000000000EC8D                 db  1Ch
.eh_frame:000000000000EC8E                 db    0
.eh_frame:000000000000EC8F                 db    0
.eh_frame:000000000000EC90                 db  60h ; `
.eh_frame:000000000000EC91                 db 0C2h
.eh_frame:000000000000EC92                 db 0FFh
.eh_frame:000000000000EC93                 db 0FFh
.eh_frame:000000000000EC94                 db  65h ; e
.eh_frame:000000000000EC95                 db    0
.eh_frame:000000000000EC96                 db    0
.eh_frame:000000000000EC97                 db    0
.eh_frame:000000000000EC98                 db    0
.eh_frame:000000000000EC99                 db  42h ; B
.eh_frame:000000000000EC9A                 db  0Eh
.eh_frame:000000000000EC9B                 db  10h
.eh_frame:000000000000EC9C                 db  8Fh
.eh_frame:000000000000EC9D                 db    2
.eh_frame:000000000000EC9E                 db  42h ; B
.eh_frame:000000000000EC9F                 db  0Eh
.eh_frame:000000000000ECA0                 db  18h
.eh_frame:000000000000ECA1                 db  8Eh
.eh_frame:000000000000ECA2                 db    3
.eh_frame:000000000000ECA3                 db  45h ; E
.eh_frame:000000000000ECA4                 db  0Eh
.eh_frame:000000000000ECA5                 db  20h
.eh_frame:000000000000ECA6                 db  8Dh
.eh_frame:000000000000ECA7                 db    4
.eh_frame:000000000000ECA8                 db  42h ; B
.eh_frame:000000000000ECA9                 db  0Eh
.eh_frame:000000000000ECAA                 db  28h ; (
.eh_frame:000000000000ECAB                 db  8Ch
.eh_frame:000000000000ECAC                 db    5
.eh_frame:000000000000ECAD                 db  48h ; H
.eh_frame:000000000000ECAE                 db  0Eh
.eh_frame:000000000000ECAF                 db  30h ; 0
.eh_frame:000000000000ECB0                 db  86h
.eh_frame:000000000000ECB1                 db    6
.eh_frame:000000000000ECB2                 db  48h ; H
.eh_frame:000000000000ECB3                 db  0Eh
.eh_frame:000000000000ECB4                 db  38h ; 8
.eh_frame:000000000000ECB5                 db  83h
.eh_frame:000000000000ECB6                 db    7
.eh_frame:000000000000ECB7                 db  4Dh ; M
.eh_frame:000000000000ECB8                 db  0Eh
.eh_frame:000000000000ECB9                 db  40h ; @
.eh_frame:000000000000ECBA                 db  72h ; r
.eh_frame:000000000000ECBB                 db  0Eh
.eh_frame:000000000000ECBC                 db  38h ; 8
.eh_frame:000000000000ECBD                 db  41h ; A
.eh_frame:000000000000ECBE                 db  0Eh
.eh_frame:000000000000ECBF                 db  30h ; 0
.eh_frame:000000000000ECC0                 db  41h ; A
.eh_frame:000000000000ECC1                 db  0Eh
.eh_frame:000000000000ECC2                 db  28h ; (
.eh_frame:000000000000ECC3                 db  42h ; B
.eh_frame:000000000000ECC4                 db  0Eh
.eh_frame:000000000000ECC5                 db  20h
.eh_frame:000000000000ECC6                 db  42h ; B
.eh_frame:000000000000ECC7                 db  0Eh
.eh_frame:000000000000ECC8                 db  18h
.eh_frame:000000000000ECC9                 db  42h ; B
.eh_frame:000000000000ECCA                 db  0Eh
.eh_frame:000000000000ECCB                 db  10h
.eh_frame:000000000000ECCC                 db  42h ; B
.eh_frame:000000000000ECCD                 db  0Eh
.eh_frame:000000000000ECCE                 db    8
.eh_frame:000000000000ECCF                 db    0
.eh_frame:000000000000ECD0                 db  14h
.eh_frame:000000000000ECD1                 db    0
.eh_frame:000000000000ECD2                 db    0
.eh_frame:000000000000ECD3                 db    0
.eh_frame:000000000000ECD4                 db  7Ch ; |
.eh_frame:000000000000ECD5                 db  1Ch
.eh_frame:000000000000ECD6                 db    0
.eh_frame:000000000000ECD7                 db    0
.eh_frame:000000000000ECD8                 db  88h
.eh_frame:000000000000ECD9                 db 0C2h
.eh_frame:000000000000ECDA                 db 0FFh
.eh_frame:000000000000ECDB                 db 0FFh
.eh_frame:000000000000ECDC                 db    2
.eh_frame:000000000000ECDD                 db    0
.eh_frame:000000000000ECDE                 db    0
.eh_frame:000000000000ECDF                 db    0
.eh_frame:000000000000ECE0                 db    0
.eh_frame:000000000000ECE1                 db    0
.eh_frame:000000000000ECE2                 db    0
.eh_frame:000000000000ECE3                 db    0
.eh_frame:000000000000ECE4                 db    0
.eh_frame:000000000000ECE5                 db    0
.eh_frame:000000000000ECE6                 db    0
.eh_frame:000000000000ECE7                 db    0
.eh_frame:000000000000ECE8                 db  10h
.eh_frame:000000000000ECE9                 db    0
.eh_frame:000000000000ECEA                 db    0
.eh_frame:000000000000ECEB                 db    0
.eh_frame:000000000000ECEC                 db  94h
.eh_frame:000000000000ECED                 db  1Ch
.eh_frame:000000000000ECEE                 db    0
.eh_frame:000000000000ECEF                 db    0
.eh_frame:000000000000ECF0                 db  80h
.eh_frame:000000000000ECF1                 db 0C2h
.eh_frame:000000000000ECF2                 db 0FFh
.eh_frame:000000000000ECF3                 db 0FFh
.eh_frame:000000000000ECF4                 db  0Eh
.eh_frame:000000000000ECF5                 db    0
.eh_frame:000000000000ECF6                 db    0
.eh_frame:000000000000ECF7                 db    0
.eh_frame:000000000000ECF8                 db    0
.eh_frame:000000000000ECF9                 db    0
.eh_frame:000000000000ECFA                 db    0
.eh_frame:000000000000ECFB                 db    0
.eh_frame:000000000000ECFC __FRAME_END__   db    0
.eh_frame:000000000000ECFD                 db    0
.eh_frame:000000000000ECFE                 db    0
.eh_frame:000000000000ECFF                 db    0
.eh_frame:000000000000ECFF _eh_frame       ends
.eh_frame:000000000000ECFF
.init_array:000000000020F870 ; ELF Initialization Function Table
.init_array:000000000020F870 ; ===========================================================================
.init_array:000000000020F870
.init_array:000000000020F870 ; Segment type: Pure data
.init_array:000000000020F870 ; Segment permissions: Read/Write
.init_array:000000000020F870 _init_array     segment qword public 'DATA' use64
.init_array:000000000020F870                 assume cs:_init_array
.init_array:000000000020F870                 ;org 20F870h
.init_array:000000000020F870 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020F870                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020F870                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020F870 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020F870
.fini_array:000000000020F878 ; ELF Termination Function Table
.fini_array:000000000020F878 ; ===========================================================================
.fini_array:000000000020F878
.fini_array:000000000020F878 ; Segment type: Pure data
.fini_array:000000000020F878 ; Segment permissions: Read/Write
.fini_array:000000000020F878 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020F878                 assume cs:_fini_array
.fini_array:000000000020F878                 ;org 20F878h
.fini_array:000000000020F878 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020F878                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020F878 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020F878
.data.rel.ro:000000000020F880 ; ===========================================================================
.data.rel.ro:000000000020F880
.data.rel.ro:000000000020F880 ; Segment type: Pure data
.data.rel.ro:000000000020F880 ; Segment permissions: Read/Write
.data.rel.ro:000000000020F880 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020F880                 assume cs:_data_rel_ro
.data.rel.ro:000000000020F880                 ;org 20F880h
.data.rel.ro:000000000020F880 ; struct option long_options
.data.rel.ro:000000000020F880 long_options    dq offset aBackup       ; name
.data.rel.ro:000000000020F880                                         ; DATA XREF: main:loc_2370↑o
.data.rel.ro:000000000020F880                 dd 2                    ; has_arg ; "backup"
.data.rel.ro:000000000020F880                 db 4 dup(0)
.data.rel.ro:000000000020F880                 dq 0                    ; flag
.data.rel.ro:000000000020F880                 dd 62h                  ; val
.data.rel.ro:000000000020F880                 db 4 dup(0)
.data.rel.ro:000000000020F8A0                 dq offset msgid+13h     ; "directory"
.data.rel.ro:000000000020F8A8                 db    0
.data.rel.ro:000000000020F8A9                 db    0
.data.rel.ro:000000000020F8AA                 db    0
.data.rel.ro:000000000020F8AB                 db    0
.data.rel.ro:000000000020F8AC                 db    0
.data.rel.ro:000000000020F8AD                 db    0
.data.rel.ro:000000000020F8AE                 db    0
.data.rel.ro:000000000020F8AF                 db    0
.data.rel.ro:000000000020F8B0                 db    0
.data.rel.ro:000000000020F8B1                 db    0
.data.rel.ro:000000000020F8B2                 db    0
.data.rel.ro:000000000020F8B3                 db    0
.data.rel.ro:000000000020F8B4                 db    0
.data.rel.ro:000000000020F8B5                 db    0
.data.rel.ro:000000000020F8B6                 db    0
.data.rel.ro:000000000020F8B7                 db    0
.data.rel.ro:000000000020F8B8                 db  46h ; F
.data.rel.ro:000000000020F8B9                 db    0
.data.rel.ro:000000000020F8BA                 db    0
.data.rel.ro:000000000020F8BB                 db    0
.data.rel.ro:000000000020F8BC                 db    0
.data.rel.ro:000000000020F8BD                 db    0
.data.rel.ro:000000000020F8BE                 db    0
.data.rel.ro:000000000020F8BF                 db    0
.data.rel.ro:000000000020F8C0                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:000000000020F8C8                 db    0
.data.rel.ro:000000000020F8C9                 db    0
.data.rel.ro:000000000020F8CA                 db    0
.data.rel.ro:000000000020F8CB                 db    0
.data.rel.ro:000000000020F8CC                 db    0
.data.rel.ro:000000000020F8CD                 db    0
.data.rel.ro:000000000020F8CE                 db    0
.data.rel.ro:000000000020F8CF                 db    0
.data.rel.ro:000000000020F8D0                 db    0
.data.rel.ro:000000000020F8D1                 db    0
.data.rel.ro:000000000020F8D2                 db    0
.data.rel.ro:000000000020F8D3                 db    0
.data.rel.ro:000000000020F8D4                 db    0
.data.rel.ro:000000000020F8D5                 db    0
.data.rel.ro:000000000020F8D6                 db    0
.data.rel.ro:000000000020F8D7                 db    0
.data.rel.ro:000000000020F8D8                 db  6Eh ; n
.data.rel.ro:000000000020F8D9                 db    0
.data.rel.ro:000000000020F8DA                 db    0
.data.rel.ro:000000000020F8DB                 db    0
.data.rel.ro:000000000020F8DC                 db    0
.data.rel.ro:000000000020F8DD                 db    0
.data.rel.ro:000000000020F8DE                 db    0
.data.rel.ro:000000000020F8DF                 db    0
.data.rel.ro:000000000020F8E0                 dq offset aNoTargetDirect ; "no-target-directory"
.data.rel.ro:000000000020F8E8                 db    0
.data.rel.ro:000000000020F8E9                 db    0
.data.rel.ro:000000000020F8EA                 db    0
.data.rel.ro:000000000020F8EB                 db    0
.data.rel.ro:000000000020F8EC                 db    0
.data.rel.ro:000000000020F8ED                 db    0
.data.rel.ro:000000000020F8EE                 db    0
.data.rel.ro:000000000020F8EF                 db    0
.data.rel.ro:000000000020F8F0                 db    0
.data.rel.ro:000000000020F8F1                 db    0
.data.rel.ro:000000000020F8F2                 db    0
.data.rel.ro:000000000020F8F3                 db    0
.data.rel.ro:000000000020F8F4                 db    0
.data.rel.ro:000000000020F8F5                 db    0
.data.rel.ro:000000000020F8F6                 db    0
.data.rel.ro:000000000020F8F7                 db    0
.data.rel.ro:000000000020F8F8                 db  54h ; T
.data.rel.ro:000000000020F8F9                 db    0
.data.rel.ro:000000000020F8FA                 db    0
.data.rel.ro:000000000020F8FB                 db    0
.data.rel.ro:000000000020F8FC                 db    0
.data.rel.ro:000000000020F8FD                 db    0
.data.rel.ro:000000000020F8FE                 db    0
.data.rel.ro:000000000020F8FF                 db    0
.data.rel.ro:000000000020F900                 dq offset aForce        ; "force"
.data.rel.ro:000000000020F908                 db    0
.data.rel.ro:000000000020F909                 db    0
.data.rel.ro:000000000020F90A                 db    0
.data.rel.ro:000000000020F90B                 db    0
.data.rel.ro:000000000020F90C                 db    0
.data.rel.ro:000000000020F90D                 db    0
.data.rel.ro:000000000020F90E                 db    0
.data.rel.ro:000000000020F90F                 db    0
.data.rel.ro:000000000020F910                 db    0
.data.rel.ro:000000000020F911                 db    0
.data.rel.ro:000000000020F912                 db    0
.data.rel.ro:000000000020F913                 db    0
.data.rel.ro:000000000020F914                 db    0
.data.rel.ro:000000000020F915                 db    0
.data.rel.ro:000000000020F916                 db    0
.data.rel.ro:000000000020F917                 db    0
.data.rel.ro:000000000020F918                 db  66h ; f
.data.rel.ro:000000000020F919                 db    0
.data.rel.ro:000000000020F91A                 db    0
.data.rel.ro:000000000020F91B                 db    0
.data.rel.ro:000000000020F91C                 db    0
.data.rel.ro:000000000020F91D                 db    0
.data.rel.ro:000000000020F91E                 db    0
.data.rel.ro:000000000020F91F                 db    0
.data.rel.ro:000000000020F920                 dq offset aInteractive  ; "interactive"
.data.rel.ro:000000000020F928                 db    0
.data.rel.ro:000000000020F929                 db    0
.data.rel.ro:000000000020F92A                 db    0
.data.rel.ro:000000000020F92B                 db    0
.data.rel.ro:000000000020F92C                 db    0
.data.rel.ro:000000000020F92D                 db    0
.data.rel.ro:000000000020F92E                 db    0
.data.rel.ro:000000000020F92F                 db    0
.data.rel.ro:000000000020F930                 db    0
.data.rel.ro:000000000020F931                 db    0
.data.rel.ro:000000000020F932                 db    0
.data.rel.ro:000000000020F933                 db    0
.data.rel.ro:000000000020F934                 db    0
.data.rel.ro:000000000020F935                 db    0
.data.rel.ro:000000000020F936                 db    0
.data.rel.ro:000000000020F937                 db    0
.data.rel.ro:000000000020F938                 db  69h ; i
.data.rel.ro:000000000020F939                 db    0
.data.rel.ro:000000000020F93A                 db    0
.data.rel.ro:000000000020F93B                 db    0
.data.rel.ro:000000000020F93C                 db    0
.data.rel.ro:000000000020F93D                 db    0
.data.rel.ro:000000000020F93E                 db    0
.data.rel.ro:000000000020F93F                 db    0
.data.rel.ro:000000000020F940                 dq offset aSuffix       ; "suffix"
.data.rel.ro:000000000020F948                 db    1
.data.rel.ro:000000000020F949                 db    0
.data.rel.ro:000000000020F94A                 db    0
.data.rel.ro:000000000020F94B                 db    0
.data.rel.ro:000000000020F94C                 db    0
.data.rel.ro:000000000020F94D                 db    0
.data.rel.ro:000000000020F94E                 db    0
.data.rel.ro:000000000020F94F                 db    0
.data.rel.ro:000000000020F950                 db    0
.data.rel.ro:000000000020F951                 db    0
.data.rel.ro:000000000020F952                 db    0
.data.rel.ro:000000000020F953                 db    0
.data.rel.ro:000000000020F954                 db    0
.data.rel.ro:000000000020F955                 db    0
.data.rel.ro:000000000020F956                 db    0
.data.rel.ro:000000000020F957                 db    0
.data.rel.ro:000000000020F958                 db  53h ; S
.data.rel.ro:000000000020F959                 db    0
.data.rel.ro:000000000020F95A                 db    0
.data.rel.ro:000000000020F95B                 db    0
.data.rel.ro:000000000020F95C                 db    0
.data.rel.ro:000000000020F95D                 db    0
.data.rel.ro:000000000020F95E                 db    0
.data.rel.ro:000000000020F95F                 db    0
.data.rel.ro:000000000020F960                 dq offset aNoTargetDirect+3 ; "target-directory"
.data.rel.ro:000000000020F968                 db    1
.data.rel.ro:000000000020F969                 db    0
.data.rel.ro:000000000020F96A                 db    0
.data.rel.ro:000000000020F96B                 db    0
.data.rel.ro:000000000020F96C                 db    0
.data.rel.ro:000000000020F96D                 db    0
.data.rel.ro:000000000020F96E                 db    0
.data.rel.ro:000000000020F96F                 db    0
.data.rel.ro:000000000020F970                 db    0
.data.rel.ro:000000000020F971                 db    0
.data.rel.ro:000000000020F972                 db    0
.data.rel.ro:000000000020F973                 db    0
.data.rel.ro:000000000020F974                 db    0
.data.rel.ro:000000000020F975                 db    0
.data.rel.ro:000000000020F976                 db    0
.data.rel.ro:000000000020F977                 db    0
.data.rel.ro:000000000020F978                 db  74h ; t
.data.rel.ro:000000000020F979                 db    0
.data.rel.ro:000000000020F97A                 db    0
.data.rel.ro:000000000020F97B                 db    0
.data.rel.ro:000000000020F97C                 db    0
.data.rel.ro:000000000020F97D                 db    0
.data.rel.ro:000000000020F97E                 db    0
.data.rel.ro:000000000020F97F                 db    0
.data.rel.ro:000000000020F980                 dq offset aLogical      ; "logical"
.data.rel.ro:000000000020F988                 db    0
.data.rel.ro:000000000020F989                 db    0
.data.rel.ro:000000000020F98A                 db    0
.data.rel.ro:000000000020F98B                 db    0
.data.rel.ro:000000000020F98C                 db    0
.data.rel.ro:000000000020F98D                 db    0
.data.rel.ro:000000000020F98E                 db    0
.data.rel.ro:000000000020F98F                 db    0
.data.rel.ro:000000000020F990                 db    0
.data.rel.ro:000000000020F991                 db    0
.data.rel.ro:000000000020F992                 db    0
.data.rel.ro:000000000020F993                 db    0
.data.rel.ro:000000000020F994                 db    0
.data.rel.ro:000000000020F995                 db    0
.data.rel.ro:000000000020F996                 db    0
.data.rel.ro:000000000020F997                 db    0
.data.rel.ro:000000000020F998                 db  4Ch ; L
.data.rel.ro:000000000020F999                 db    0
.data.rel.ro:000000000020F99A                 db    0
.data.rel.ro:000000000020F99B                 db    0
.data.rel.ro:000000000020F99C                 db    0
.data.rel.ro:000000000020F99D                 db    0
.data.rel.ro:000000000020F99E                 db    0
.data.rel.ro:000000000020F99F                 db    0
.data.rel.ro:000000000020F9A0                 dq offset aPhysical     ; "physical"
.data.rel.ro:000000000020F9A8                 db    0
.data.rel.ro:000000000020F9A9                 db    0
.data.rel.ro:000000000020F9AA                 db    0
.data.rel.ro:000000000020F9AB                 db    0
.data.rel.ro:000000000020F9AC                 db    0
.data.rel.ro:000000000020F9AD                 db    0
.data.rel.ro:000000000020F9AE                 db    0
.data.rel.ro:000000000020F9AF                 db    0
.data.rel.ro:000000000020F9B0                 db    0
.data.rel.ro:000000000020F9B1                 db    0
.data.rel.ro:000000000020F9B2                 db    0
.data.rel.ro:000000000020F9B3                 db    0
.data.rel.ro:000000000020F9B4                 db    0
.data.rel.ro:000000000020F9B5                 db    0
.data.rel.ro:000000000020F9B6                 db    0
.data.rel.ro:000000000020F9B7                 db    0
.data.rel.ro:000000000020F9B8                 db  50h ; P
.data.rel.ro:000000000020F9B9                 db    0
.data.rel.ro:000000000020F9BA                 db    0
.data.rel.ro:000000000020F9BB                 db    0
.data.rel.ro:000000000020F9BC                 db    0
.data.rel.ro:000000000020F9BD                 db    0
.data.rel.ro:000000000020F9BE                 db    0
.data.rel.ro:000000000020F9BF                 db    0
.data.rel.ro:000000000020F9C0                 dq offset aRelative     ; "relative"
.data.rel.ro:000000000020F9C8                 db    0
.data.rel.ro:000000000020F9C9                 db    0
.data.rel.ro:000000000020F9CA                 db    0
.data.rel.ro:000000000020F9CB                 db    0
.data.rel.ro:000000000020F9CC                 db    0
.data.rel.ro:000000000020F9CD                 db    0
.data.rel.ro:000000000020F9CE                 db    0
.data.rel.ro:000000000020F9CF                 db    0
.data.rel.ro:000000000020F9D0                 db    0
.data.rel.ro:000000000020F9D1                 db    0
.data.rel.ro:000000000020F9D2                 db    0
.data.rel.ro:000000000020F9D3                 db    0
.data.rel.ro:000000000020F9D4                 db    0
.data.rel.ro:000000000020F9D5                 db    0
.data.rel.ro:000000000020F9D6                 db    0
.data.rel.ro:000000000020F9D7                 db    0
.data.rel.ro:000000000020F9D8                 db  72h ; r
.data.rel.ro:000000000020F9D9                 db    0
.data.rel.ro:000000000020F9DA                 db    0
.data.rel.ro:000000000020F9DB                 db    0
.data.rel.ro:000000000020F9DC                 db    0
.data.rel.ro:000000000020F9DD                 db    0
.data.rel.ro:000000000020F9DE                 db    0
.data.rel.ro:000000000020F9DF                 db    0
.data.rel.ro:000000000020F9E0                 dq offset aSymbolic     ; "symbolic"
.data.rel.ro:000000000020F9E8                 db    0
.data.rel.ro:000000000020F9E9                 db    0
.data.rel.ro:000000000020F9EA                 db    0
.data.rel.ro:000000000020F9EB                 db    0
.data.rel.ro:000000000020F9EC                 db    0
.data.rel.ro:000000000020F9ED                 db    0
.data.rel.ro:000000000020F9EE                 db    0
.data.rel.ro:000000000020F9EF                 db    0
.data.rel.ro:000000000020F9F0                 db    0
.data.rel.ro:000000000020F9F1                 db    0
.data.rel.ro:000000000020F9F2                 db    0
.data.rel.ro:000000000020F9F3                 db    0
.data.rel.ro:000000000020F9F4                 db    0
.data.rel.ro:000000000020F9F5                 db    0
.data.rel.ro:000000000020F9F6                 db    0
.data.rel.ro:000000000020F9F7                 db    0
.data.rel.ro:000000000020F9F8                 db  73h ; s
.data.rel.ro:000000000020F9F9                 db    0
.data.rel.ro:000000000020F9FA                 db    0
.data.rel.ro:000000000020F9FB                 db    0
.data.rel.ro:000000000020F9FC                 db    0
.data.rel.ro:000000000020F9FD                 db    0
.data.rel.ro:000000000020F9FE                 db    0
.data.rel.ro:000000000020F9FF                 db    0
.data.rel.ro:000000000020FA00                 dq offset aVerbose      ; "verbose"
.data.rel.ro:000000000020FA08                 db    0
.data.rel.ro:000000000020FA09                 db    0
.data.rel.ro:000000000020FA0A                 db    0
.data.rel.ro:000000000020FA0B                 db    0
.data.rel.ro:000000000020FA0C                 db    0
.data.rel.ro:000000000020FA0D                 db    0
.data.rel.ro:000000000020FA0E                 db    0
.data.rel.ro:000000000020FA0F                 db    0
.data.rel.ro:000000000020FA10                 db    0
.data.rel.ro:000000000020FA11                 db    0
.data.rel.ro:000000000020FA12                 db    0
.data.rel.ro:000000000020FA13                 db    0
.data.rel.ro:000000000020FA14                 db    0
.data.rel.ro:000000000020FA15                 db    0
.data.rel.ro:000000000020FA16                 db    0
.data.rel.ro:000000000020FA17                 db    0
.data.rel.ro:000000000020FA18                 db  76h ; v
.data.rel.ro:000000000020FA19                 db    0
.data.rel.ro:000000000020FA1A                 db    0
.data.rel.ro:000000000020FA1B                 db    0
.data.rel.ro:000000000020FA1C                 db    0
.data.rel.ro:000000000020FA1D                 db    0
.data.rel.ro:000000000020FA1E                 db    0
.data.rel.ro:000000000020FA1F                 db    0
.data.rel.ro:000000000020FA20                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020FA28                 db    0
.data.rel.ro:000000000020FA29                 db    0
.data.rel.ro:000000000020FA2A                 db    0
.data.rel.ro:000000000020FA2B                 db    0
.data.rel.ro:000000000020FA2C                 db    0
.data.rel.ro:000000000020FA2D                 db    0
.data.rel.ro:000000000020FA2E                 db    0
.data.rel.ro:000000000020FA2F                 db    0
.data.rel.ro:000000000020FA30                 db    0
.data.rel.ro:000000000020FA31                 db    0
.data.rel.ro:000000000020FA32                 db    0
.data.rel.ro:000000000020FA33                 db    0
.data.rel.ro:000000000020FA34                 db    0
.data.rel.ro:000000000020FA35                 db    0
.data.rel.ro:000000000020FA36                 db    0
.data.rel.ro:000000000020FA37                 db    0
.data.rel.ro:000000000020FA38                 db  7Eh ; ~
.data.rel.ro:000000000020FA39                 db 0FFh
.data.rel.ro:000000000020FA3A                 db 0FFh
.data.rel.ro:000000000020FA3B                 db 0FFh
.data.rel.ro:000000000020FA3C                 db    0
.data.rel.ro:000000000020FA3D                 db    0
.data.rel.ro:000000000020FA3E                 db    0
.data.rel.ro:000000000020FA3F                 db    0
.data.rel.ro:000000000020FA40                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020FA48                 db    0
.data.rel.ro:000000000020FA49                 db    0
.data.rel.ro:000000000020FA4A                 db    0
.data.rel.ro:000000000020FA4B                 db    0
.data.rel.ro:000000000020FA4C                 db    0
.data.rel.ro:000000000020FA4D                 db    0
.data.rel.ro:000000000020FA4E                 db    0
.data.rel.ro:000000000020FA4F                 db    0
.data.rel.ro:000000000020FA50                 db    0
.data.rel.ro:000000000020FA51                 db    0
.data.rel.ro:000000000020FA52                 db    0
.data.rel.ro:000000000020FA53                 db    0
.data.rel.ro:000000000020FA54                 db    0
.data.rel.ro:000000000020FA55                 db    0
.data.rel.ro:000000000020FA56                 db    0
.data.rel.ro:000000000020FA57                 db    0
.data.rel.ro:000000000020FA58                 db  7Dh ; }
.data.rel.ro:000000000020FA59                 db 0FFh
.data.rel.ro:000000000020FA5A                 db 0FFh
.data.rel.ro:000000000020FA5B                 db 0FFh
.data.rel.ro:000000000020FA5C                 db    0
.data.rel.ro:000000000020FA5D                 db    0
.data.rel.ro:000000000020FA5E                 db    0
.data.rel.ro:000000000020FA5F                 db    0
.data.rel.ro:000000000020FA60                 db    0
.data.rel.ro:000000000020FA61                 db    0
.data.rel.ro:000000000020FA62                 db    0
.data.rel.ro:000000000020FA63                 db    0
.data.rel.ro:000000000020FA64                 db    0
.data.rel.ro:000000000020FA65                 db    0
.data.rel.ro:000000000020FA66                 db    0
.data.rel.ro:000000000020FA67                 db    0
.data.rel.ro:000000000020FA68                 db    0
.data.rel.ro:000000000020FA69                 db    0
.data.rel.ro:000000000020FA6A                 db    0
.data.rel.ro:000000000020FA6B                 db    0
.data.rel.ro:000000000020FA6C                 db    0
.data.rel.ro:000000000020FA6D                 db    0
.data.rel.ro:000000000020FA6E                 db    0
.data.rel.ro:000000000020FA6F                 db    0
.data.rel.ro:000000000020FA70                 db    0
.data.rel.ro:000000000020FA71                 db    0
.data.rel.ro:000000000020FA72                 db    0
.data.rel.ro:000000000020FA73                 db    0
.data.rel.ro:000000000020FA74                 db    0
.data.rel.ro:000000000020FA75                 db    0
.data.rel.ro:000000000020FA76                 db    0
.data.rel.ro:000000000020FA77                 db    0
.data.rel.ro:000000000020FA78                 db    0
.data.rel.ro:000000000020FA79                 db    0
.data.rel.ro:000000000020FA7A                 db    0
.data.rel.ro:000000000020FA7B                 db    0
.data.rel.ro:000000000020FA7C                 db    0
.data.rel.ro:000000000020FA7D                 db    0
.data.rel.ro:000000000020FA7E                 db    0
.data.rel.ro:000000000020FA7F                 db    0
.data.rel.ro:000000000020FA80 backup_args     dq offset aNone         ; DATA XREF: get_version_part_0+B↑o
.data.rel.ro:000000000020FA80                                         ; "none"
.data.rel.ro:000000000020FA88                 dq offset aOff          ; "off"
.data.rel.ro:000000000020FA90                 dq offset aSimple       ; "simple"
.data.rel.ro:000000000020FA98                 dq offset aNever        ; "never"
.data.rel.ro:000000000020FAA0                 dq offset aExisting     ; "existing"
.data.rel.ro:000000000020FAA8                 dq offset aNil          ; "nil"
.data.rel.ro:000000000020FAB0                 dq offset aNumbered     ; "numbered"
.data.rel.ro:000000000020FAB8                 dq offset aT            ; "t"
.data.rel.ro:000000000020FAC0                 db    0
.data.rel.ro:000000000020FAC1                 db    0
.data.rel.ro:000000000020FAC2                 db    0
.data.rel.ro:000000000020FAC3                 db    0
.data.rel.ro:000000000020FAC4                 db    0
.data.rel.ro:000000000020FAC5                 db    0
.data.rel.ro:000000000020FAC6                 db    0
.data.rel.ro:000000000020FAC7                 db    0
.data.rel.ro:000000000020FAC8                 db    0
.data.rel.ro:000000000020FAC9                 db    0
.data.rel.ro:000000000020FACA                 db    0
.data.rel.ro:000000000020FACB                 db    0
.data.rel.ro:000000000020FACC                 db    0
.data.rel.ro:000000000020FACD                 db    0
.data.rel.ro:000000000020FACE                 db    0
.data.rel.ro:000000000020FACF                 db    0
.data.rel.ro:000000000020FAD0                 db    0
.data.rel.ro:000000000020FAD1                 db    0
.data.rel.ro:000000000020FAD2                 db    0
.data.rel.ro:000000000020FAD3                 db    0
.data.rel.ro:000000000020FAD4                 db    0
.data.rel.ro:000000000020FAD5                 db    0
.data.rel.ro:000000000020FAD6                 db    0
.data.rel.ro:000000000020FAD7                 db    0
.data.rel.ro:000000000020FAD8                 db    0
.data.rel.ro:000000000020FAD9                 db    0
.data.rel.ro:000000000020FADA                 db    0
.data.rel.ro:000000000020FADB                 db    0
.data.rel.ro:000000000020FADC                 db    0
.data.rel.ro:000000000020FADD                 db    0
.data.rel.ro:000000000020FADE                 db    0
.data.rel.ro:000000000020FADF                 db    0
.data.rel.ro:000000000020FAE0                 public quoting_style_args
.data.rel.ro:000000000020FAE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020FAE8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020FAF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020FAF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020FB00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020FB08                 dq offset aSymbolic+7   ; "c"
.data.rel.ro:000000000020FB10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020FB18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020FB20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020FB28                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020FB30                 db    0
.data.rel.ro:000000000020FB31                 db    0
.data.rel.ro:000000000020FB32                 db    0
.data.rel.ro:000000000020FB33                 db    0
.data.rel.ro:000000000020FB34                 db    0
.data.rel.ro:000000000020FB35                 db    0
.data.rel.ro:000000000020FB36                 db    0
.data.rel.ro:000000000020FB37                 db    0
.data.rel.ro:000000000020FB37 _data_rel_ro    ends
.data.rel.ro:000000000020FB37
LOAD:000000000020FB38 ; ELF Dynamic Information
LOAD:000000000020FB38 ; ===========================================================================
LOAD:000000000020FB38
LOAD:000000000020FB38 ; Segment type: Pure data
LOAD:000000000020FB38 ; Segment permissions: Read/Write
LOAD:000000000020FB38 LOAD            segment byte public 'DATA' use64
LOAD:000000000020FB38                 assume cs:LOAD
LOAD:000000000020FB38                 ;org 20FB38h
LOAD:000000000020FB38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020FB38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020FB38                                         ; DT_NEEDED libc.so.6
LOAD:000000000020FB48                 Elf64_Dyn <0Ch, 1D70h>  ; DT_INIT
LOAD:000000000020FB58                 Elf64_Dyn <0Dh, 0AF80h> ; DT_FINI
LOAD:000000000020FB68                 Elf64_Dyn <19h, 20F870h> ; DT_INIT_ARRAY
LOAD:000000000020FB78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020FB88                 Elf64_Dyn <1Ah, 20F878h> ; DT_FINI_ARRAY
LOAD:000000000020FB98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020FBA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020FBB8                 Elf64_Dyn <5, 0BE0h>    ; DT_STRTAB
LOAD:000000000020FBC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020FBD8                 Elf64_Dyn <0Ah, 3E8h>   ; DT_STRSZ
LOAD:000000000020FBE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020FBF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020FC08                 Elf64_Dyn <3, 20FD28h>  ; DT_PLTGOT
LOAD:000000000020FC18                 Elf64_Dyn <2, 798h>     ; DT_PLTRELSZ
LOAD:000000000020FC28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020FC38                 Elf64_Dyn <17h, 15D8h>  ; DT_JMPREL
LOAD:000000000020FC48                 Elf64_Dyn <7, 10F8h>    ; DT_RELA
LOAD:000000000020FC58                 Elf64_Dyn <8, 4E0h>     ; DT_RELASZ
LOAD:000000000020FC68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020FC78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020FC88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020FC98                 Elf64_Dyn <6FFFFFFEh, 1088h> ; DT_VERNEED
LOAD:000000000020FCA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020FCB8                 Elf64_Dyn <6FFFFFF0h, 0FC8h> ; DT_VERSYM
LOAD:000000000020FCC8                 Elf64_Dyn <6FFFFFF9h, 28h> ; DT_RELACOUNT
LOAD:000000000020FCD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020FCE8                 db    0
LOAD:000000000020FCE9                 db    0
LOAD:000000000020FCEA                 db    0
LOAD:000000000020FCEB                 db    0
LOAD:000000000020FCEC                 db    0
LOAD:000000000020FCED                 db    0
LOAD:000000000020FCEE                 db    0
LOAD:000000000020FCEF                 db    0
LOAD:000000000020FCF0                 db    0
LOAD:000000000020FCF1                 db    0
LOAD:000000000020FCF2                 db    0
LOAD:000000000020FCF3                 db    0
LOAD:000000000020FCF4                 db    0
LOAD:000000000020FCF5                 db    0
LOAD:000000000020FCF6                 db    0
LOAD:000000000020FCF7                 db    0
LOAD:000000000020FCF8                 db    0
LOAD:000000000020FCF9                 db    0
LOAD:000000000020FCFA                 db    0
LOAD:000000000020FCFB                 db    0
LOAD:000000000020FCFC                 db    0
LOAD:000000000020FCFD                 db    0
LOAD:000000000020FCFE                 db    0
LOAD:000000000020FCFF                 db    0
LOAD:000000000020FD00                 db    0
LOAD:000000000020FD01                 db    0
LOAD:000000000020FD02                 db    0
LOAD:000000000020FD03                 db    0
LOAD:000000000020FD04                 db    0
LOAD:000000000020FD05                 db    0
LOAD:000000000020FD06                 db    0
LOAD:000000000020FD07                 db    0
LOAD:000000000020FD08                 db    0
LOAD:000000000020FD09                 db    0
LOAD:000000000020FD0A                 db    0
LOAD:000000000020FD0B                 db    0
LOAD:000000000020FD0C                 db    0
LOAD:000000000020FD0D                 db    0
LOAD:000000000020FD0E                 db    0
LOAD:000000000020FD0F                 db    0
LOAD:000000000020FD10                 db    0
LOAD:000000000020FD11                 db    0
LOAD:000000000020FD12                 db    0
LOAD:000000000020FD13                 db    0
LOAD:000000000020FD14                 db    0
LOAD:000000000020FD15                 db    0
LOAD:000000000020FD16                 db    0
LOAD:000000000020FD17                 db    0
LOAD:000000000020FD18                 db    0
LOAD:000000000020FD19                 db    0
LOAD:000000000020FD1A                 db    0
LOAD:000000000020FD1B                 db    0
LOAD:000000000020FD1C                 db    0
LOAD:000000000020FD1D                 db    0
LOAD:000000000020FD1E                 db    0
LOAD:000000000020FD1F                 db    0
LOAD:000000000020FD20                 db    0
LOAD:000000000020FD21                 db    0
LOAD:000000000020FD22                 db    0
LOAD:000000000020FD23                 db    0
LOAD:000000000020FD24                 db    0
LOAD:000000000020FD25                 db    0
LOAD:000000000020FD26                 db    0
LOAD:000000000020FD27                 db    0
LOAD:000000000020FD27 LOAD            ends
LOAD:000000000020FD27
.got:000000000020FD28 ; ===========================================================================
.got:000000000020FD28
.got:000000000020FD28 ; Segment type: Pure data
.got:000000000020FD28 ; Segment permissions: Read/Write
.got:000000000020FD28 _got            segment qword public 'DATA' use64
.got:000000000020FD28                 assume cs:_got
.got:000000000020FD28                 ;org 20FD28h
.got:000000000020FD28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020FD30 qword_20FD30    dq 0                    ; DATA XREF: sub_1D90↑r
.got:000000000020FD38 qword_20FD38    dq 0                    ; DATA XREF: sub_1D90+6↑r
.got:000000000020FD40 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:000000000020FD48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020FD50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020FD58 __errno_location_ptr dq offset __errno_location
.got:000000000020FD58                                         ; DATA XREF: ___errno_location↑r
.got:000000000020FD60 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020FD68 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020FD70 strcpy_ptr      dq offset strcpy        ; DATA XREF: _strcpy↑r
.got:000000000020FD78 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020FD80 __read_chk_ptr  dq offset __read_chk    ; DATA XREF: ___read_chk↑r
.got:000000000020FD88 mkdir_ptr       dq offset mkdir         ; DATA XREF: _mkdir↑r
.got:000000000020FD90 unlinkat_ptr    dq offset unlinkat      ; DATA XREF: _unlinkat↑r
.got:000000000020FD98 readlink_ptr    dq offset readlink      ; DATA XREF: _readlink↑r
.got:000000000020FDA0 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020FDA8 getpid_ptr      dq offset getpid        ; DATA XREF: _getpid↑r
.got:000000000020FDB0 fread_unlocked_ptr dq offset fread_unlocked
.got:000000000020FDB0                                         ; DATA XREF: _fread_unlocked↑r
.got:000000000020FDB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020FDC0 pathconf_ptr    dq offset pathconf      ; DATA XREF: _pathconf↑r
.got:000000000020FDC8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020FDD0 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020FDD0                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020FDD8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020FDE0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020FDE0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020FDE8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020FDF0 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:000000000020FDF8 openat_ptr      dq offset openat        ; DATA XREF: _openat↑r
.got:000000000020FE00 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020FE00                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020FE08 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:000000000020FE10 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020FE18 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020FE20 __fxstatat_ptr  dq offset __fxstatat    ; DATA XREF: ___fxstatat↑r
.got:000000000020FE28 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020FE30 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020FE38 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020FE40 gettimeofday_ptr dq offset gettimeofday ; DATA XREF: _gettimeofday↑r
.got:000000000020FE48 __assert_fail_ptr dq offset __assert_fail
.got:000000000020FE48                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020FE50 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020FE58 getcwd_ptr      dq offset getcwd        ; DATA XREF: _getcwd↑r
.got:000000000020FE60 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020FE68 rewinddir_ptr   dq offset rewinddir     ; DATA XREF: _rewinddir↑r
.got:000000000020FE70 strspn_ptr      dq offset strspn        ; DATA XREF: _strspn↑r
.got:000000000020FE78 closedir_ptr    dq offset closedir      ; DATA XREF: _closedir↑r
.got:000000000020FE80 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020FE88 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020FE88                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020FE90 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020FE98 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:000000000020FEA0 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020FEA8 fpathconf_ptr   dq offset fpathconf     ; DATA XREF: _fpathconf↑r
.got:000000000020FEB0 rpmatch_ptr     dq offset rpmatch       ; DATA XREF: _rpmatch↑r
.got:000000000020FEB8 syscall_ptr     dq offset syscall       ; DATA XREF: _syscall↑r
.got:000000000020FEC0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020FEC8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020FED0 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:000000000020FED8 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:000000000020FEE0 readdir_ptr     dq offset readdir       ; DATA XREF: _readdir↑r
.got:000000000020FEE8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020FEF0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020FEF8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020FF00 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020FF08 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020FF10 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020FF18 linkat_ptr      dq offset linkat        ; DATA XREF: _linkat↑r
.got:000000000020FF20 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020FF28 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020FF30 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000020FF38 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000020FF40 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000020FF48 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020FF50 __explicit_bzero_chk_ptr dq offset __explicit_bzero_chk
.got:000000000020FF50                                         ; DATA XREF: ___explicit_bzero_chk↑r
.got:000000000020FF58 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:000000000020FF60 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020FF68 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020FF70 fdopendir_ptr   dq offset fdopendir     ; DATA XREF: _fdopendir↑r
.got:000000000020FF78 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020FF80 renameat_ptr    dq offset renameat      ; DATA XREF: _renameat↑r
.got:000000000020FF88 getppid_ptr     dq offset getppid       ; DATA XREF: _getppid↑r
.got:000000000020FF90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020FF98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020FFA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020FFA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020FFA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020FFB0 symlinkat_ptr   dq offset symlinkat     ; DATA XREF: _symlinkat↑r
.got:000000000020FFB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020FFC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020FFC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020FFC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020FFC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020FFD0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020FFD0                                         ; DATA XREF: start+24↑r
.got:000000000020FFD8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020FFD8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020FFE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020FFE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020FFE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020FFE8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020FFE8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020FFE8 _got            ends
.got:000000000020FFE8
LOAD:000000000020FFF0 ; ===========================================================================
LOAD:000000000020FFF0
LOAD:000000000020FFF0 ; Segment type: Pure data
LOAD:000000000020FFF0 ; Segment permissions: Read/Write
LOAD:000000000020FFF0 LOAD            segment byte public 'DATA' use64
LOAD:000000000020FFF0                 assume cs:LOAD
LOAD:000000000020FFF0                 ;org 20FFF0h
LOAD:000000000020FFF0                 align 20h
LOAD:000000000020FFF0 LOAD            ends
LOAD:000000000020FFF0
.data:0000000000210000 ; ===========================================================================
.data:0000000000210000
.data:0000000000210000 ; Segment type: Pure data
.data:0000000000210000 ; Segment permissions: Read/Write
.data:0000000000210000 _data           segment align_32 public 'DATA' use64
.data:0000000000210000                 assume cs:_data
.data:0000000000210000                 ;org 210000h
.data:0000000000210000                 public __data_start ; weak
.data:0000000000210000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000210000                                         ; data_start
.data:0000000000210001                 db    0
.data:0000000000210002                 db    0
.data:0000000000210003                 db    0
.data:0000000000210004                 db    0
.data:0000000000210005                 db    0
.data:0000000000210006                 db    0
.data:0000000000210007                 db    0
.data:0000000000210008                 public __dso_handle
.data:0000000000210008 ; void *_dso_handle
.data:0000000000210008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000210008                                         ; atexit↑r ...
.data:0000000000210010 dereference_dest_dir_symlinks db 1      ; DATA XREF: main:loc_24D0↑w
.data:0000000000210010                                         ; main:loc_285D↑r
.data:0000000000210011                 align 8
.data:0000000000210018                 public Version
.data:0000000000210018 Version         dq offset a831          ; DATA XREF: main+1BF↑r
.data:0000000000210018                                         ; "8.31"
.data:0000000000210020                 public exit_failure
.data:0000000000210020 ; int exit_failure
.data:0000000000210020 exit_failure    dd 1                    ; DATA XREF: close_stdin+A8↑r
.data:0000000000210020                                         ; close_stdout:loc_5092↑r ...
.data:0000000000210024                 align 20h
.data:0000000000210040                 public quote_quoting_options
.data:0000000000210040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000210040                                         ; quote_mem↑o ...
.data:0000000000210041                 db    0
.data:0000000000210042                 db    0
.data:0000000000210043                 db    0
.data:0000000000210044                 db    0
.data:0000000000210045                 db    0
.data:0000000000210046                 db    0
.data:0000000000210047                 db    0
.data:0000000000210048                 db    0
.data:0000000000210049                 db    0
.data:000000000021004A                 db    0
.data:000000000021004B                 db    0
.data:000000000021004C                 db    0
.data:000000000021004D                 db    0
.data:000000000021004E                 db    0
.data:000000000021004F                 db    0
.data:0000000000210050                 db    0
.data:0000000000210051                 db    0
.data:0000000000210052                 db    0
.data:0000000000210053                 db    0
.data:0000000000210054                 db    0
.data:0000000000210055                 db    0
.data:0000000000210056                 db    0
.data:0000000000210057                 db    0
.data:0000000000210058                 db    0
.data:0000000000210059                 db    0
.data:000000000021005A                 db    0
.data:000000000021005B                 db    0
.data:000000000021005C                 db    0
.data:000000000021005D                 db    0
.data:000000000021005E                 db    0
.data:000000000021005F                 db    0
.data:0000000000210060                 db    0
.data:0000000000210061                 db    0
.data:0000000000210062                 db    0
.data:0000000000210063                 db    0
.data:0000000000210064                 db    0
.data:0000000000210065                 db    0
.data:0000000000210066                 db    0
.data:0000000000210067                 db    0
.data:0000000000210068                 db    0
.data:0000000000210069                 db    0
.data:000000000021006A                 db    0
.data:000000000021006B                 db    0
.data:000000000021006C                 db    0
.data:000000000021006D                 db    0
.data:000000000021006E                 db    0
.data:000000000021006F                 db    0
.data:0000000000210070                 db    0
.data:0000000000210071                 db    0
.data:0000000000210072                 db    0
.data:0000000000210073                 db    0
.data:0000000000210074                 db    0
.data:0000000000210075                 db    0
.data:0000000000210076                 db    0
.data:0000000000210077                 db    0
.data:0000000000210078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000210078                                         ; quotearg_n_options:loc_7D8D↑r ...
.data:000000000021007C                 align 20h
.data:0000000000210080 ; void *slotvec
.data:0000000000210080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000210080                                         ; quotearg_n_options+76↑w ...
.data:0000000000210088                 align 10h
.data:0000000000210090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000210090                                         ; quotearg_n_options+187↑r ...
.data:0000000000210098 off_210098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002100A0                 public argmatch_die
.data:00000000002100A0 argmatch_die    dq offset __argmatch_die
.data:00000000002100A0                                         ; DATA XREF: get_version_part_0+4↑r
.data:00000000002100A0 _data           ends
.data:00000000002100A0
LOAD:00000000002100A8 ; ===========================================================================
LOAD:00000000002100A8
LOAD:00000000002100A8 ; Segment type: Pure data
LOAD:00000000002100A8 ; Segment permissions: Read/Write
LOAD:00000000002100A8 LOAD            segment byte public 'DATA' use64
LOAD:00000000002100A8                 assume cs:LOAD
LOAD:00000000002100A8                 ;org 2100A8h
LOAD:00000000002100A8                 public __bss_start
LOAD:00000000002100A8 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:00000000002100A8                                         ; deregister_tm_clones+8↑o ...
LOAD:00000000002100A8                                         ; Alternative name is '_edata'
LOAD:00000000002100A8                                         ; __TMC_END__
LOAD:00000000002100A8                                         ; _edata
LOAD:00000000002100A9                 db    ? ;
LOAD:00000000002100AA                 db    ? ;
LOAD:00000000002100AB                 db    ? ;
LOAD:00000000002100AC                 db    ? ;
LOAD:00000000002100AD                 db    ? ;
LOAD:00000000002100AE                 db    ? ;
LOAD:00000000002100AF                 db    ? ;
LOAD:00000000002100B0                 db    ? ;
LOAD:00000000002100B1                 db    ? ;
LOAD:00000000002100B2                 db    ? ;
LOAD:00000000002100B3                 db    ? ;
LOAD:00000000002100B4                 db    ? ;
LOAD:00000000002100B5                 db    ? ;
LOAD:00000000002100B6                 db    ? ;
LOAD:00000000002100B7                 db    ? ;
LOAD:00000000002100B8                 db    ? ;
LOAD:00000000002100B9                 db    ? ;
LOAD:00000000002100BA                 db    ? ;
LOAD:00000000002100BB                 db    ? ;
LOAD:00000000002100BC                 db    ? ;
LOAD:00000000002100BD                 db    ? ;
LOAD:00000000002100BE                 db    ? ;
LOAD:00000000002100BF                 db    ? ;
LOAD:00000000002100BF LOAD            ends
LOAD:00000000002100BF
.bss:00000000002100C0 ; ===========================================================================
.bss:00000000002100C0
.bss:00000000002100C0 ; Segment type: Uninitialized
.bss:00000000002100C0 ; Segment permissions: Read/Write
.bss:00000000002100C0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002100C0                 assume cs:_bss
.bss:00000000002100C0                 ;org 2100C0h
.bss:00000000002100C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002100C0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:00000000002100C0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:00000000002100C0                                         ; DATA XREF: LOAD:0000000000000B20↑o
.bss:00000000002100C0                                         ; LOAD:0000000000000B80↑o ...
.bss:00000000002100C0                                         ; Alternative name is '__progname'
.bss:00000000002100C0                                         ; Copy of shared data
.bss:00000000002100C8                 public stdout@@GLIBC_2_2_5
.bss:00000000002100C8 ; FILE *stdout
.bss:00000000002100C8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B08↑o
.bss:00000000002100C8                                         ; main+1B8↑r ...
.bss:00000000002100C8                                         ; Alternative name is 'stdout'
.bss:00000000002100C8                                         ; Copy of shared data
.bss:00000000002100D0                 public stdin@@GLIBC_2_2_5
.bss:00000000002100D0 ; FILE *stdin
.bss:00000000002100D0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000B38↑o
.bss:00000000002100D0                                         ; close_stdin+4↑r ...
.bss:00000000002100D0                                         ; Alternative name is 'stdin'
.bss:00000000002100D0                                         ; Copy of shared data
.bss:00000000002100D8                 public optind@@GLIBC_2_2_5
.bss:00000000002100D8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000BB0↑o
.bss:00000000002100D8                                         ; main:loc_25FC↑r
.bss:00000000002100D8                                         ; Alternative name is 'optind'
.bss:00000000002100D8                                         ; Copy of shared data
.bss:00000000002100DC                 align 20h
.bss:00000000002100E0                 public optarg@@GLIBC_2_2_5
.bss:00000000002100E0 ; char *optarg
.bss:00000000002100E0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000BC8↑o
.bss:00000000002100E0                                         ; main:loc_24E0↑r ...
.bss:00000000002100E0                                         ; Alternative name is 'optarg'
.bss:00000000002100E0                                         ; Copy of shared data
.bss:00000000002100E8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002100E8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002100E8                                         ; DATA XREF: LOAD:0000000000000B50↑o
.bss:00000000002100E8                                         ; LOAD:0000000000000B68↑o ...
.bss:00000000002100E8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002100E8                                         ; Copy of shared data
.bss:00000000002100F0                 align 20h
.bss:0000000000210100                 public stderr@@GLIBC_2_2_5
.bss:0000000000210100 ; FILE *stderr
.bss:0000000000210100 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B98↑o
.bss:0000000000210100                                         ; do_link+9B9↑r ...
.bss:0000000000210100                                         ; Alternative name is 'stderr'
.bss:0000000000210100                                         ; Copy of shared data
.bss:0000000000210108 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000210108                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000210109                 align 10h
.bss:0000000000210110 dest_set        dq ?                    ; DATA XREF: main+442↑w
.bss:0000000000210110                                         ; do_link+5F↑r ...
.bss:0000000000210118 beware_hard_dir_link db ?               ; DATA XREF: main+373↑w
.bss:0000000000210118                                         ; atomic_link:loc_2BF0↑r
.bss:0000000000210119 hard_dir_link   db ?                    ; DATA XREF: main+7E↑w
.bss:0000000000210119                                         ; main:loc_25E0↑w ...
.bss:000000000021011A verbose         db ?                    ; DATA XREF: main+85↑w
.bss:000000000021011A                                         ; main+113↑w ...
.bss:000000000021011B remove_existing_files db ?              ; DATA XREF: main+93↑w
.bss:000000000021011B                                         ; main+174↑w ...
.bss:000000000021011C interactive     db ?                    ; DATA XREF: main+8C↑w
.bss:000000000021011C                                         ; main+17B↑w ...
.bss:000000000021011D logical         db ?                    ; DATA XREF: main+14A↑w
.bss:000000000021011D                                         ; main:loc_2580↑w ...
.bss:000000000021011E relative        db ?                    ; DATA XREF: main+202↑w
.bss:000000000021011E                                         ; main+354↑r ...
.bss:000000000021011F symbolic_link   db ?                    ; DATA XREF: main+9A↑w
.bss:000000000021011F                                         ; main:loc_25D0↑w ...
.bss:0000000000210120 backup_type     dd ?                    ; DATA XREF: main+3D8↑w
.bss:0000000000210120                                         ; main+415↑r ...
.bss:0000000000210124                 align 8
.bss:0000000000210128                 public simple_backup_suffix
.bss:0000000000210128 ; char *simple_backup_suffix
.bss:0000000000210128 simple_backup_suffix dq ?               ; DATA XREF: set_simple_backup_suffix:loc_4165↑w
.bss:0000000000210128                                         ; backupfile_internal+48↑r ...
.bss:0000000000210130 file_name       dq ?                    ; DATA XREF: close_stdin_set_file_name↑w
.bss:0000000000210130                                         ; close_stdin+6B↑r
.bss:0000000000210138 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000210138                                         ; close_stdout+1B↑r
.bss:0000000000210139                 align 20h
.bss:0000000000210140 file_name_0     dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000210140                                         ; close_stdout+56↑r
.bss:0000000000210148                 public program_name
.bss:0000000000210148 program_name    dq ?                    ; DATA XREF: do_link+992↑r
.bss:0000000000210148                                         ; usage+14↑r ...
.bss:0000000000210150                 align 20h
.bss:0000000000210160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000210160                                         ; quotearg_free+46↑o ...
.bss:0000000000210161                 db    ? ;
.bss:0000000000210162                 db    ? ;
.bss:0000000000210163                 db    ? ;
.bss:0000000000210164                 db    ? ;
.bss:0000000000210165                 db    ? ;
.bss:0000000000210166                 db    ? ;
.bss:0000000000210167                 db    ? ;
.bss:0000000000210168                 db    ? ;
.bss:0000000000210169                 db    ? ;
.bss:000000000021016A                 db    ? ;
.bss:000000000021016B                 db    ? ;
.bss:000000000021016C                 db    ? ;
.bss:000000000021016D                 db    ? ;
.bss:000000000021016E                 db    ? ;
.bss:000000000021016F                 db    ? ;
.bss:0000000000210170                 db    ? ;
.bss:0000000000210171                 db    ? ;
.bss:0000000000210172                 db    ? ;
.bss:0000000000210173                 db    ? ;
.bss:0000000000210174                 db    ? ;
.bss:0000000000210175                 db    ? ;
.bss:0000000000210176                 db    ? ;
.bss:0000000000210177                 db    ? ;
.bss:0000000000210178                 db    ? ;
.bss:0000000000210179                 db    ? ;
.bss:000000000021017A                 db    ? ;
.bss:000000000021017B                 db    ? ;
.bss:000000000021017C                 db    ? ;
.bss:000000000021017D                 db    ? ;
.bss:000000000021017E                 db    ? ;
.bss:000000000021017F                 db    ? ;
.bss:0000000000210180                 db    ? ;
.bss:0000000000210181                 db    ? ;
.bss:0000000000210182                 db    ? ;
.bss:0000000000210183                 db    ? ;
.bss:0000000000210184                 db    ? ;
.bss:0000000000210185                 db    ? ;
.bss:0000000000210186                 db    ? ;
.bss:0000000000210187                 db    ? ;
.bss:0000000000210188                 db    ? ;
.bss:0000000000210189                 db    ? ;
.bss:000000000021018A                 db    ? ;
.bss:000000000021018B                 db    ? ;
.bss:000000000021018C                 db    ? ;
.bss:000000000021018D                 db    ? ;
.bss:000000000021018E                 db    ? ;
.bss:000000000021018F                 db    ? ;
.bss:0000000000210190                 db    ? ;
.bss:0000000000210191                 db    ? ;
.bss:0000000000210192                 db    ? ;
.bss:0000000000210193                 db    ? ;
.bss:0000000000210194                 db    ? ;
.bss:0000000000210195                 db    ? ;
.bss:0000000000210196                 db    ? ;
.bss:0000000000210197                 db    ? ;
.bss:0000000000210198                 db    ? ;
.bss:0000000000210199                 db    ? ;
.bss:000000000021019A                 db    ? ;
.bss:000000000021019B                 db    ? ;
.bss:000000000021019C                 db    ? ;
.bss:000000000021019D                 db    ? ;
.bss:000000000021019E                 db    ? ;
.bss:000000000021019F                 db    ? ;
.bss:00000000002101A0                 db    ? ;
.bss:00000000002101A1                 db    ? ;
.bss:00000000002101A2                 db    ? ;
.bss:00000000002101A3                 db    ? ;
.bss:00000000002101A4                 db    ? ;
.bss:00000000002101A5                 db    ? ;
.bss:00000000002101A6                 db    ? ;
.bss:00000000002101A7                 db    ? ;
.bss:00000000002101A8                 db    ? ;
.bss:00000000002101A9                 db    ? ;
.bss:00000000002101AA                 db    ? ;
.bss:00000000002101AB                 db    ? ;
.bss:00000000002101AC                 db    ? ;
.bss:00000000002101AD                 db    ? ;
.bss:00000000002101AE                 db    ? ;
.bss:00000000002101AF                 db    ? ;
.bss:00000000002101B0                 db    ? ;
.bss:00000000002101B1                 db    ? ;
.bss:00000000002101B2                 db    ? ;
.bss:00000000002101B3                 db    ? ;
.bss:00000000002101B4                 db    ? ;
.bss:00000000002101B5                 db    ? ;
.bss:00000000002101B6                 db    ? ;
.bss:00000000002101B7                 db    ? ;
.bss:00000000002101B8                 db    ? ;
.bss:00000000002101B9                 db    ? ;
.bss:00000000002101BA                 db    ? ;
.bss:00000000002101BB                 db    ? ;
.bss:00000000002101BC                 db    ? ;
.bss:00000000002101BD                 db    ? ;
.bss:00000000002101BE                 db    ? ;
.bss:00000000002101BF                 db    ? ;
.bss:00000000002101C0                 db    ? ;
.bss:00000000002101C1                 db    ? ;
.bss:00000000002101C2                 db    ? ;
.bss:00000000002101C3                 db    ? ;
.bss:00000000002101C4                 db    ? ;
.bss:00000000002101C5                 db    ? ;
.bss:00000000002101C6                 db    ? ;
.bss:00000000002101C7                 db    ? ;
.bss:00000000002101C8                 db    ? ;
.bss:00000000002101C9                 db    ? ;
.bss:00000000002101CA                 db    ? ;
.bss:00000000002101CB                 db    ? ;
.bss:00000000002101CC                 db    ? ;
.bss:00000000002101CD                 db    ? ;
.bss:00000000002101CE                 db    ? ;
.bss:00000000002101CF                 db    ? ;
.bss:00000000002101D0                 db    ? ;
.bss:00000000002101D1                 db    ? ;
.bss:00000000002101D2                 db    ? ;
.bss:00000000002101D3                 db    ? ;
.bss:00000000002101D4                 db    ? ;
.bss:00000000002101D5                 db    ? ;
.bss:00000000002101D6                 db    ? ;
.bss:00000000002101D7                 db    ? ;
.bss:00000000002101D8                 db    ? ;
.bss:00000000002101D9                 db    ? ;
.bss:00000000002101DA                 db    ? ;
.bss:00000000002101DB                 db    ? ;
.bss:00000000002101DC                 db    ? ;
.bss:00000000002101DD                 db    ? ;
.bss:00000000002101DE                 db    ? ;
.bss:00000000002101DF                 db    ? ;
.bss:00000000002101E0                 db    ? ;
.bss:00000000002101E1                 db    ? ;
.bss:00000000002101E2                 db    ? ;
.bss:00000000002101E3                 db    ? ;
.bss:00000000002101E4                 db    ? ;
.bss:00000000002101E5                 db    ? ;
.bss:00000000002101E6                 db    ? ;
.bss:00000000002101E7                 db    ? ;
.bss:00000000002101E8                 db    ? ;
.bss:00000000002101E9                 db    ? ;
.bss:00000000002101EA                 db    ? ;
.bss:00000000002101EB                 db    ? ;
.bss:00000000002101EC                 db    ? ;
.bss:00000000002101ED                 db    ? ;
.bss:00000000002101EE                 db    ? ;
.bss:00000000002101EF                 db    ? ;
.bss:00000000002101F0                 db    ? ;
.bss:00000000002101F1                 db    ? ;
.bss:00000000002101F2                 db    ? ;
.bss:00000000002101F3                 db    ? ;
.bss:00000000002101F4                 db    ? ;
.bss:00000000002101F5                 db    ? ;
.bss:00000000002101F6                 db    ? ;
.bss:00000000002101F7                 db    ? ;
.bss:00000000002101F8                 db    ? ;
.bss:00000000002101F9                 db    ? ;
.bss:00000000002101FA                 db    ? ;
.bss:00000000002101FB                 db    ? ;
.bss:00000000002101FC                 db    ? ;
.bss:00000000002101FD                 db    ? ;
.bss:00000000002101FE                 db    ? ;
.bss:00000000002101FF                 db    ? ;
.bss:0000000000210200                 db    ? ;
.bss:0000000000210201                 db    ? ;
.bss:0000000000210202                 db    ? ;
.bss:0000000000210203                 db    ? ;
.bss:0000000000210204                 db    ? ;
.bss:0000000000210205                 db    ? ;
.bss:0000000000210206                 db    ? ;
.bss:0000000000210207                 db    ? ;
.bss:0000000000210208                 db    ? ;
.bss:0000000000210209                 db    ? ;
.bss:000000000021020A                 db    ? ;
.bss:000000000021020B                 db    ? ;
.bss:000000000021020C                 db    ? ;
.bss:000000000021020D                 db    ? ;
.bss:000000000021020E                 db    ? ;
.bss:000000000021020F                 db    ? ;
.bss:0000000000210210                 db    ? ;
.bss:0000000000210211                 db    ? ;
.bss:0000000000210212                 db    ? ;
.bss:0000000000210213                 db    ? ;
.bss:0000000000210214                 db    ? ;
.bss:0000000000210215                 db    ? ;
.bss:0000000000210216                 db    ? ;
.bss:0000000000210217                 db    ? ;
.bss:0000000000210218                 db    ? ;
.bss:0000000000210219                 db    ? ;
.bss:000000000021021A                 db    ? ;
.bss:000000000021021B                 db    ? ;
.bss:000000000021021C                 db    ? ;
.bss:000000000021021D                 db    ? ;
.bss:000000000021021E                 db    ? ;
.bss:000000000021021F                 db    ? ;
.bss:0000000000210220                 db    ? ;
.bss:0000000000210221                 db    ? ;
.bss:0000000000210222                 db    ? ;
.bss:0000000000210223                 db    ? ;
.bss:0000000000210224                 db    ? ;
.bss:0000000000210225                 db    ? ;
.bss:0000000000210226                 db    ? ;
.bss:0000000000210227                 db    ? ;
.bss:0000000000210228                 db    ? ;
.bss:0000000000210229                 db    ? ;
.bss:000000000021022A                 db    ? ;
.bss:000000000021022B                 db    ? ;
.bss:000000000021022C                 db    ? ;
.bss:000000000021022D                 db    ? ;
.bss:000000000021022E                 db    ? ;
.bss:000000000021022F                 db    ? ;
.bss:0000000000210230                 db    ? ;
.bss:0000000000210231                 db    ? ;
.bss:0000000000210232                 db    ? ;
.bss:0000000000210233                 db    ? ;
.bss:0000000000210234                 db    ? ;
.bss:0000000000210235                 db    ? ;
.bss:0000000000210236                 db    ? ;
.bss:0000000000210237                 db    ? ;
.bss:0000000000210238                 db    ? ;
.bss:0000000000210239                 db    ? ;
.bss:000000000021023A                 db    ? ;
.bss:000000000021023B                 db    ? ;
.bss:000000000021023C                 db    ? ;
.bss:000000000021023D                 db    ? ;
.bss:000000000021023E                 db    ? ;
.bss:000000000021023F                 db    ? ;
.bss:0000000000210240                 db    ? ;
.bss:0000000000210241                 db    ? ;
.bss:0000000000210242                 db    ? ;
.bss:0000000000210243                 db    ? ;
.bss:0000000000210244                 db    ? ;
.bss:0000000000210245                 db    ? ;
.bss:0000000000210246                 db    ? ;
.bss:0000000000210247                 db    ? ;
.bss:0000000000210248                 db    ? ;
.bss:0000000000210249                 db    ? ;
.bss:000000000021024A                 db    ? ;
.bss:000000000021024B                 db    ? ;
.bss:000000000021024C                 db    ? ;
.bss:000000000021024D                 db    ? ;
.bss:000000000021024E                 db    ? ;
.bss:000000000021024F                 db    ? ;
.bss:0000000000210250                 db    ? ;
.bss:0000000000210251                 db    ? ;
.bss:0000000000210252                 db    ? ;
.bss:0000000000210253                 db    ? ;
.bss:0000000000210254                 db    ? ;
.bss:0000000000210255                 db    ? ;
.bss:0000000000210256                 db    ? ;
.bss:0000000000210257                 db    ? ;
.bss:0000000000210258                 db    ? ;
.bss:0000000000210259                 db    ? ;
.bss:000000000021025A                 db    ? ;
.bss:000000000021025B                 db    ? ;
.bss:000000000021025C                 db    ? ;
.bss:000000000021025D                 db    ? ;
.bss:000000000021025E                 db    ? ;
.bss:000000000021025F                 db    ? ;
.bss:0000000000210260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000210260                                         ; get_quoting_style↑o ...
.bss:0000000000210270 xmmword_210270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000210270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000210280 xmmword_210280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000210280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000210290 qword_210290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000210290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000210298 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000210298                                         ; rpl_fcntl:loc_AC5F↑w ...
.bss:000000000021029C                 align 20h
.bss:000000000021029C _bss            ends
.bss:000000000021029C
.prgend:00000000002102A0 ; ===========================================================================
.prgend:00000000002102A0
.prgend:00000000002102A0 ; Segment type: Zero-length
.prgend:00000000002102A0 _prgend         segment byte public '' use64
.prgend:00000000002102A0 _end            label byte
.prgend:00000000002102A0 _prgend         ends
.prgend:00000000002102A0
extern:00000000002102A8 ; ===========================================================================
extern:00000000002102A8
extern:00000000002102A8 ; Segment type: Externs
extern:00000000002102A8 ; extern
extern:00000000002102A8 ; char *getenv(const char *name)
extern:00000000002102A8                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:00000000002102A8                                         ; DATA XREF: .got:getenv_ptr↑o
extern:00000000002102B0 ; void free(void *ptr)
extern:00000000002102B0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002102B0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002102B8 ; void __noreturn abort(void)
extern:00000000002102B8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002102B8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002102C0 ; int *_errno_location(void)
extern:00000000002102C0                 extrn __errno_location:near
extern:00000000002102C0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002102C0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002102C8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002102C8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002102C8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002102D0 ; void __noreturn exit(int status)
extern:00000000002102D0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002102D0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002102D8 ; char *strcpy(char *dest, const char *src)
extern:00000000002102D8                 extrn strcpy:near       ; CODE XREF: _strcpy↑j
extern:00000000002102D8                                         ; DATA XREF: .got:strcpy_ptr↑o
extern:00000000002102E0 ; size_t _fpending(FILE *fp)
extern:00000000002102E0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002102E0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002102E8                 extrn __read_chk:near   ; CODE XREF: ___read_chk↑j
extern:00000000002102E8                                         ; DATA XREF: .got:__read_chk_ptr↑o
extern:00000000002102F0 ; int mkdir(const char *path, __mode_t mode)
extern:00000000002102F0                 extrn mkdir:near        ; CODE XREF: _mkdir↑j
extern:00000000002102F0                                         ; DATA XREF: .got:mkdir_ptr↑o
extern:00000000002102F8 ; int unlinkat(int fd, const char *name, int flag)
extern:00000000002102F8                 extrn unlinkat:near     ; CODE XREF: _unlinkat↑j
extern:00000000002102F8                                         ; DATA XREF: .got:unlinkat_ptr↑o
extern:0000000000210300 ; ssize_t readlink(const char *path, char *buf, size_t len)
extern:0000000000210300                 extrn readlink:near     ; CODE XREF: _readlink↑j
extern:0000000000210300                                         ; DATA XREF: .got:readlink_ptr↑o
extern:0000000000210308 ; int fcntl(int fd, int cmd, ...)
extern:0000000000210308                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000210308                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000210310 ; __pid_t getpid(void)
extern:0000000000210310                 extrn getpid:near       ; CODE XREF: _getpid↑j
extern:0000000000210310                                         ; DATA XREF: .got:getpid_ptr↑o
extern:0000000000210318 ; size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream)
extern:0000000000210318                 extrn fread_unlocked:near
extern:0000000000210318                                         ; CODE XREF: _fread_unlocked↑j
extern:0000000000210318                                         ; DATA XREF: .got:fread_unlocked_ptr↑o
extern:0000000000210320 ; char *textdomain(const char *domainname)
extern:0000000000210320                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000210320                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000210328 ; __int64 pathconf(const char *path, int name)
extern:0000000000210328                 extrn pathconf:near     ; CODE XREF: _pathconf↑j
extern:0000000000210328                                         ; DATA XREF: .got:pathconf_ptr↑o
extern:0000000000210330 ; int fclose(FILE *stream)
extern:0000000000210330                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000210330                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000210338 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000210338                 extrn bindtextdomain:near
extern:0000000000210338                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000210338                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000210340 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000210340                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000210340                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000210348 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000210348                 extrn __ctype_get_mb_cur_max:near
extern:0000000000210348                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000210348                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000210350 ; size_t strlen(const char *s)
extern:0000000000210350                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000210350                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000210358 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000210358                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000210358                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000210360 ; int openat(int fd, const char *file, int oflag, ...)
extern:0000000000210360                 extrn openat:near       ; CODE XREF: _openat↑j
extern:0000000000210360                                         ; DATA XREF: .got:openat_ptr↑o
extern:0000000000210368                 extrn __stack_chk_fail:near
extern:0000000000210368                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000210368                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000210370 ; __uid_t getuid(void)
extern:0000000000210370                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:0000000000210370                                         ; DATA XREF: .got:getuid_ptr↑o
extern:0000000000210378 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000210378                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000210378                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000210380 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000210380                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000210380                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000210388 ; int _fxstatat(int ver, int fildes, const char *filename, struct stat *stat_buf, int flag)
extern:0000000000210388                 extrn __fxstatat:near   ; CODE XREF: ___fxstatat↑j
extern:0000000000210388                                         ; DATA XREF: .got:__fxstatat_ptr↑o
extern:0000000000210390 ; int _overflow(_IO_FILE *, int)
extern:0000000000210390                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000210390                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000210398 ; char *strrchr(const char *s, int c)
extern:0000000000210398                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000210398                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002103A0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002103A0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002103A0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002103A8 ; int gettimeofday(struct timeval *tv, __timezone_ptr_t tz)
extern:00000000002103A8                 extrn gettimeofday:near ; CODE XREF: _gettimeofday↑j
extern:00000000002103A8                                         ; DATA XREF: .got:gettimeofday_ptr↑o
extern:00000000002103B0 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002103B0                 extrn __assert_fail:near
extern:00000000002103B0                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002103B0                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002103B8 ; void *memset(void *s, int c, size_t n)
extern:00000000002103B8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002103B8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002103C0 ; char *getcwd(char *buf, size_t size)
extern:00000000002103C0                 extrn getcwd:near       ; CODE XREF: _getcwd↑j
extern:00000000002103C0                                         ; DATA XREF: .got:getcwd_ptr↑o
extern:00000000002103C8 ; int close(int fd)
extern:00000000002103C8                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002103C8                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002103D0 ; void rewinddir(DIR *dirp)
extern:00000000002103D0                 extrn rewinddir:near    ; CODE XREF: _rewinddir↑j
extern:00000000002103D0                                         ; DATA XREF: .got:rewinddir_ptr↑o
extern:00000000002103D8 ; size_t strspn(const char *s, const char *accept)
extern:00000000002103D8                 extrn strspn:near       ; CODE XREF: _strspn↑j
extern:00000000002103D8                                         ; DATA XREF: .got:strspn_ptr↑o
extern:00000000002103E0 ; int closedir(DIR *dirp)
extern:00000000002103E0                 extrn closedir:near     ; CODE XREF: _closedir↑j
extern:00000000002103E0                                         ; DATA XREF: .got:closedir_ptr↑o
extern:00000000002103E8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002103E8                 extrn __libc_start_main:near
extern:00000000002103E8                                         ; CODE XREF: start+24↑p
extern:00000000002103E8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002103F0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002103F0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002103F0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002103F8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002103F8                 extrn fputs_unlocked:near
extern:00000000002103F8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002103F8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000210400 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000210400                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000210400                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000210408 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:0000000000210408                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:0000000000210408                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:0000000000210410 ; int strcmp(const char *s1, const char *s2)
extern:0000000000210410                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000210410                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000210418 ; __int64 fpathconf(int fd, int name)
extern:0000000000210418                 extrn fpathconf:near    ; CODE XREF: _fpathconf↑j
extern:0000000000210418                                         ; DATA XREF: .got:fpathconf_ptr↑o
extern:0000000000210420 ; int rpmatch(const char *response)
extern:0000000000210420                 extrn rpmatch:near      ; CODE XREF: _rpmatch↑j
extern:0000000000210420                                         ; DATA XREF: .got:rpmatch_ptr↑o
extern:0000000000210428 ; __int64 syscall(__int64 sysno, ...)
extern:0000000000210428                 extrn syscall:near      ; CODE XREF: _syscall↑j
extern:0000000000210428                                         ; DATA XREF: .got:syscall_ptr↑o
extern:0000000000210430 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000210430                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000210430                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000210438 ; int fileno(FILE *stream)
extern:0000000000210438                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000210438                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000210440 ; __gid_t getgid(void)
extern:0000000000210440                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:0000000000210440                                         ; DATA XREF: .got:getgid_ptr↑o
extern:0000000000210448 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000210448                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000210448                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000210450 ; struct dirent *readdir(DIR *dirp)
extern:0000000000210450                 extrn readdir:near      ; CODE XREF: _readdir↑j
extern:0000000000210450                                         ; DATA XREF: .got:readdir_ptr↑o
extern:0000000000210458 ; void *malloc(size_t size)
extern:0000000000210458                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000210458                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000210460 ; int fflush(FILE *stream)
extern:0000000000210460                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000210460                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000210468 ; char *nl_langinfo(nl_item item)
extern:0000000000210468                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000210468                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000210470 ; int _freading(FILE *fp)
extern:0000000000210470                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000210470                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000210478 ; void *realloc(void *ptr, size_t size)
extern:0000000000210478                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000210478                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000210480 ; FILE *fdopen(int fd, const char *modes)
extern:0000000000210480                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:0000000000210480                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:0000000000210488 ; int linkat(int fromfd, const char *from, int tofd, const char *to, int flags)
extern:0000000000210488                 extrn linkat:near       ; CODE XREF: _linkat↑j
extern:0000000000210488                                         ; DATA XREF: .got:linkat_ptr↑o
extern:0000000000210490 ; char *setlocale(int category, const char *locale)
extern:0000000000210490                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000210490                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000210498                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000210498                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:00000000002104A0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:00000000002104A0                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:00000000002104A0                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:00000000002104A8 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:00000000002104A8                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:00000000002104A8                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:00000000002104B0 ; void *memmove(void *dest, const void *src, size_t n)
extern:00000000002104B0                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:00000000002104B0                                         ; DATA XREF: .got:memmove_ptr↑o
extern:00000000002104B8 ; void error(int status, int errnum, const char *format, ...)
extern:00000000002104B8                 extrn error:near        ; CODE XREF: _error↑j
extern:00000000002104B8                                         ; DATA XREF: .got:error_ptr↑o
extern:00000000002104C0                 extrn __explicit_bzero_chk:near
extern:00000000002104C0                                         ; CODE XREF: ___explicit_bzero_chk↑j
extern:00000000002104C0                                         ; DATA XREF: .got:__explicit_bzero_chk_ptr↑o
extern:00000000002104C8 ; int open(const char *file, int oflag, ...)
extern:00000000002104C8                 extrn open:near         ; CODE XREF: _open↑j
extern:00000000002104C8                                         ; DATA XREF: .got:open_ptr↑o
extern:00000000002104D0 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:00000000002104D0                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:00000000002104D0                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:00000000002104D8 ; FILE *fopen(const char *filename, const char *modes)
extern:00000000002104D8                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:00000000002104D8                                         ; DATA XREF: .got:fopen_ptr↑o
extern:00000000002104E0 ; DIR *fdopendir(int fd)
extern:00000000002104E0                 extrn fdopendir:near    ; CODE XREF: _fdopendir↑j
extern:00000000002104E0                                         ; DATA XREF: .got:fdopendir_ptr↑o
extern:00000000002104E8 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:00000000002104E8                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:00000000002104E8                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002104F0 ; int renameat(int oldfd, const char *old, int newfd, const char *new)
extern:00000000002104F0                 extrn renameat:near     ; CODE XREF: _renameat↑j
extern:00000000002104F0                                         ; DATA XREF: .got:renameat_ptr↑o
extern:00000000002104F8 ; __pid_t getppid(void)
extern:00000000002104F8                 extrn getppid:near      ; CODE XREF: _getppid↑j
extern:00000000002104F8                                         ; DATA XREF: .got:getppid_ptr↑o
extern:0000000000210500 ; void __noreturn exit(int status)
extern:0000000000210500                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000210500                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000210508 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000210508                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000210508                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000210510                 extrn __fprintf_chk:near
extern:0000000000210510                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000210510                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000210518 ; int mbsinit(const mbstate_t *ps)
extern:0000000000210518                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000210518                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000210520 ; int symlinkat(const char *from, int tofd, const char *to)
extern:0000000000210520                 extrn symlinkat:near    ; CODE XREF: _symlinkat↑j
extern:0000000000210520                                         ; DATA XREF: .got:symlinkat_ptr↑o
extern:0000000000210528 ; int iswprint(wint_t wc)
extern:0000000000210528                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000210528                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000210530 ; int __fastcall __cxa_finalize(void *)
extern:0000000000210530                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000210530                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000210530                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000210538 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000210538                 extrn __ctype_b_loc:near
extern:0000000000210538                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000210538                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000210540                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000210540                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000210548                 extrn __gmon_start__:near ; weak
extern:0000000000210548                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000210548                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000210550                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000210550                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000210550
extern:0000000000210550
extern:0000000000210550                 end start
