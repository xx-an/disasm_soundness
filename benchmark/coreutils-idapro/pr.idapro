LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 225673128B44FFD0921403ACC5C9F44DBA6A0615B660C2D2976FB35F3970AB91
LOAD:0000000000000000 ; Input MD5    : 58C4209E677A8841A8A2A9B4C42D0B27
LOAD:0000000000000000 ; Input CRC32  : C2DD22FB
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/pr
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'pr.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'imaxtostr.c'
LOAD:0000000000000000 ; Source File : 'mbswidth.c'
LOAD:0000000000000000 ; Source File : 'nstrftime.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoimax.c'
LOAD:0000000000000000 ; Source File : 'xstrtol.c'
LOAD:0000000000000000 ; Source File : 'xstrtol-error.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 4EB98h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 10018h               ; Size in file image
LOAD:00000000000000D8                 dq 10018h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 107D0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2107D0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 910h                 ; Size in file image
LOAD:0000000000000110                 dq 0BD0h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 10B98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 210B98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0E664h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0E664h               ; Physical address
LOAD:00000000000001B0                 dq 3ECh                 ; Size in file image
LOAD:00000000000001B8                 dq 3ECh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 107D0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2107D0h              ; Physical address
LOAD:0000000000000220                 dq 830h                 ; Size in file image
LOAD:0000000000000228                 dq 830h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0D3h, 0BDh, 60h, 3Ch, 62h, 0AFh, 56h, 68h, 9Ah, 39h ; Desc
LOAD:0000000000000284                 db 6Dh, 3Ch, 1Fh, 0A9h, 0CEh, 3, 27h, 0E5h, 3Ah, 4Eh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Bh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Bh, 4Ch, 52h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aUflow - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "__uflow"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aGetenv - offset byte_AC0, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_AC0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aAbort - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000358                            0>
LOAD:0000000000000370                 Elf64_Sym <offset aErrnoLocation - offset byte_AC0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_AC0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_AC0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aLocaltimeR - offset byte_AC0, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aExit - offset byte_AC0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aFpending - offset byte_AC0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aIswcntrl - offset byte_AC0, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFcntl - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:0000000000000418                            0>
LOAD:0000000000000430                 Elf64_Sym <offset aClockGettime - offset byte_AC0, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aUnsetenv+2 - offset byte_AC0, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AC0, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrtolInternal - offset byte_AC0, 12h, 0, 0, \ ; "__strtol_internal"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aFclose - offset byte_AC0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aBindtextdomain - offset byte_AC0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aDcgettext - offset byte_AC0, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrlen - offset byte_AC0, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStackChkFail - offset byte_AC0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGetoptLong - offset byte_AC0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMbrtowc - offset byte_AC0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aStrchr - offset byte_AC0, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aOverflow - offset byte_AC0, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrrchr - offset byte_AC0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aGmtimeR - offset byte_AC0, 12h, 0, 0, \ ; "gmtime_r"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aLseek - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005B0                            0>
LOAD:00000000000005C8                 Elf64_Sym <offset aAssertFail - offset byte_AC0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aStrtoulInterna - offset byte_AC0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aMemset - offset byte_AC0, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFclose+1 - offset byte_AC0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aPosixFadvise - offset byte_AC0, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aLibcStartMain - offset byte_AC0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aMemcmp - offset byte_AC0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFputsUnlocked - offset byte_AC0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aCalloc - offset byte_AC0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aStrcmp - offset byte_AC0, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aGmonStart - offset byte_AC0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrtol - offset byte_AC0, 12h, 0, 0, \ ; "strtol"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aMemcpy - offset byte_AC0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aTzset - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:0000000000000700                            0>
LOAD:0000000000000718                 Elf64_Sym <offset aFileno - offset byte_AC0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aWcwidth - offset byte_AC0, 12h, 0, 0, \ ; "wcwidth"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMalloc - offset byte_AC0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFflush - offset byte_AC0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aNlLanginfo - offset byte_AC0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aUngetc - offset byte_AC0, 12h, 0, 0, \ ; "ungetc"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFxstat - offset byte_AC0, 12h, 0, 0, \ ; "__fxstat"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aMktime - offset byte_AC0, 12h, 0, 0, \ ; "mktime"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFreading - offset byte_AC0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_AC0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFdopen - offset byte_AC0, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aSetlocale - offset byte_AC0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aPrintfChk - offset byte_AC0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aTimegm - offset byte_AC0, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aStrftime - offset byte_AC0, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aError - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000880                            0>
LOAD:0000000000000898                 Elf64_Sym <offset aFseeko - offset byte_AC0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFopen - offset byte_AC0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000008B0                            0>
LOAD:00000000000008C8                 Elf64_Sym <offset aUnsetenv - offset byte_AC0, 12h, 0, 0, \ ; "unsetenv"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCxaAtexit - offset byte_AC0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aExit+1 - offset byte_AC0, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aFwrite - offset byte_AC0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aFprintfChk - offset byte_AC0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aItmRegistertmc - offset byte_AC0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aMbsinit - offset byte_AC0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aIswprint - offset byte_AC0, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aCxaFinalize - offset byte_AC0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aCtypeBLoc - offset byte_AC0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aSprintfChk - offset byte_AC0, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aStdout - offset byte_AC0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A00                 Elf64_Sym <offset aProgname - offset byte_AC0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A00                            offset __bss_start, 8>
LOAD:0000000000000A18                 Elf64_Sym <offset aStdin - offset byte_AC0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000A18                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aProgramInvocat - offset byte_AC0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A30                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aPrognameFull - offset byte_AC0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A48                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AC0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A60                            offset __bss_start, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aStderr - offset byte_AC0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A78                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aOptind - offset byte_AC0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000A90                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000AA8                 Elf64_Sym <offset aOptarg - offset byte_AC0, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000AA8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0 ; ELF String Table
LOAD:0000000000000AC0 byte_AC0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AC0                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AC1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F20↓o
LOAD:0000000000000ACB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000AD2 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000ADB aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AE8 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000AF2 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000AFA aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000B00 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B08 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000B0F aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B17 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000B21 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B27 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B38 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000B41 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B49 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000B4F aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000B55 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000B55                                         ; LOAD:00000000000008F8↑o
LOAD:0000000000000B5B aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B5B                                         ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000B73 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000B7C aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B8A aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B96 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000B96                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BAD aStrtol         db 'strtol',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000BB4 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BC2 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000BC9 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000BD0 aUngetc         db 'ungetc',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BD7 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BDE aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000BEF aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000BF6 aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BF6                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000BFF aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000C0D aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C14 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C1A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000C21 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000C21                                         ; LOAD:0000000000000610↑o
LOAD:0000000000000C28 aStrtolInternal db '__strtol_internal',0
LOAD:0000000000000C28                                         ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000C3A aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000C41 aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000C48 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C50 aTzset          db 'tzset',0            ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C56 aUflow          db '__uflow',0          ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C5E aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C6A aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000C78 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000C7F aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000C86 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C91 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000C98 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000CA0 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000CAC aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000CB5 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000CBC aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000CC3 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000CD1 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000CDC aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000CE3 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000CEC aMktime         db 'mktime',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000CF3 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000CF3                                         ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000D11 aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000D18 aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000D18                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D2C aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000D2C                                         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000D40 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000D4F aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000D55 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D63 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000D63                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000D72 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000D79 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D79                                         ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000D8B aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000D92 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000D9D aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000D9D                                         ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000DB0 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000DBF aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000DC4 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DCF aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000DDF aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000DEC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F30↓o
LOAD:0000000000000DF8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F40↓o
LOAD:0000000000000E03 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F50↓o
LOAD:0000000000000E0D aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000000F60↓o
LOAD:0000000000000E18 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F70↓o
LOAD:0000000000000E24 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000F80↓o
LOAD:0000000000000E2E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E2E                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000E4A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000E59 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E59                                         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000E73                 align 4
LOAD:0000000000000E74 ; ELF GNU Symbol Version Table
LOAD:0000000000000E74                 dw 0
LOAD:0000000000000E76                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000E78                 dw 3                    ; __uflow@@GLIBC_2.2.5
LOAD:0000000000000E7A                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000E7C                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E7E                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E80                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E82                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E84                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000E86                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:0000000000000E88                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000E8A                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000E8C                 dw 3                    ; iswcntrl@@GLIBC_2.2.5
LOAD:0000000000000E8E                 dw 3                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 4                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000000E92                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000E96                 dw 3                    ; __strtol_internal@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000EA0                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 5                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000EA4                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000EA8                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000EAA                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000EAE                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:0000000000000EB0                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 3                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000EB6                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000EB8                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000EBA                 dw 3                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000EC8                 dw 3                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000ECA                 dw 6                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000ECC                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:0000000000000ECE                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 3                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000ED4                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000ED6                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 3                    ; ungetc@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 3                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000000EDE                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000EE0                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000EE2                 dw 3                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000EE4                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000EE6                 dw 7                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000EE8                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:0000000000000EEA                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000EEE                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 3                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000EF2                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000EF6                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000EF8                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 7                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000EFC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000EFE                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F00                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F02                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000F06                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F08                 dw 7                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F0A                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F0C                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 3                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000F10                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 0
LOAD:0000000000000F1E                 dw 0
LOAD:0000000000000F20 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000F20                 Elf64_Verneed <1, 6, offset aLibcSo6 - offset byte_AC0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F30                 Elf64_Vernaux <9691974h, 0, 7, offset aGlibc234 - offset byte_AC0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F30                                10h>
LOAD:0000000000000F40                 Elf64_Vernaux <6969194h, 0, 6, offset aGlibc214 - offset byte_AC0, \ ; "GLIBC_2.14"
LOAD:0000000000000F40                                10h>
LOAD:0000000000000F50                 Elf64_Vernaux <0D696914h, 0, 5, offset aGlibc24 - offset byte_AC0, \ ; "GLIBC_2.4"
LOAD:0000000000000F50                                10h>
LOAD:0000000000000F60                 Elf64_Vernaux <6969197h, 0, 4, offset aGlibc217 - offset byte_AC0, \ ; "GLIBC_2.17"
LOAD:0000000000000F60                                10h>
LOAD:0000000000000F70                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_AC0, \ ; "GLIBC_2.2.5"
LOAD:0000000000000F70                                10h>
LOAD:0000000000000F80                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_AC0, 0> ; "GLIBC_2.3"
LOAD:0000000000000F90 ; ELF RELA Relocation Table
LOAD:0000000000000F90                 Elf64_Rela <2107D0h, 8, 2A10h> ; R_X86_64_RELATIVE +2A10h
LOAD:0000000000000FA8                 Elf64_Rela <2107D8h, 8, 29D0h> ; R_X86_64_RELATIVE +29D0h
LOAD:0000000000000FC0                 Elf64_Rela <2107E0h, 8, 0C01Dh> ; R_X86_64_RELATIVE +0C01Dh
LOAD:0000000000000FD8                 Elf64_Rela <210800h, 8, 0BE87h> ; R_X86_64_RELATIVE +0BE87h
LOAD:0000000000000FF0                 Elf64_Rela <210820h, 8, 0C023h> ; R_X86_64_RELATIVE +0C023h
LOAD:0000000000001008                 Elf64_Rela <210840h, 8, 0C02Ah> ; R_X86_64_RELATIVE +0C02Ah
LOAD:0000000000001020                 Elf64_Rela <210860h, 8, 0C03Dh> ; R_X86_64_RELATIVE +0C03Dh
LOAD:0000000000001038                 Elf64_Rela <210880h, 8, 0C04Ah> ; R_X86_64_RELATIVE +0C04Ah
LOAD:0000000000001050                 Elf64_Rela <2108A0h, 8, 0C056h> ; R_X86_64_RELATIVE +0C056h
LOAD:0000000000001068                 Elf64_Rela <2108C0h, 8, 0C062h> ; R_X86_64_RELATIVE +0C062h
LOAD:0000000000001080                 Elf64_Rela <2108E0h, 8, 0C0E1h> ; R_X86_64_RELATIVE +0C0E1h
LOAD:0000000000001098                 Elf64_Rela <210900h, 8, 0C06Ch> ; R_X86_64_RELATIVE +0C06Ch
LOAD:00000000000010B0                 Elf64_Rela <210920h, 8, 0C078h> ; R_X86_64_RELATIVE +0C078h
LOAD:00000000000010C8                 Elf64_Rela <210940h, 8, 0C083h> ; R_X86_64_RELATIVE +0C083h
LOAD:00000000000010E0                 Elf64_Rela <210960h, 8, 0C08Ah> ; R_X86_64_RELATIVE +0C08Ah
LOAD:00000000000010F8                 Elf64_Rela <210980h, 8, 0C090h> ; R_X86_64_RELATIVE +0C090h
LOAD:0000000000001110                 Elf64_Rela <2109A0h, 8, 0C09Dh> ; R_X86_64_RELATIVE +0C09Dh
LOAD:0000000000001128                 Elf64_Rela <2109C0h, 8, 0C0AFh> ; R_X86_64_RELATIVE +0C0AFh
LOAD:0000000000001140                 Elf64_Rela <2109E0h, 8, 0C0B6h> ; R_X86_64_RELATIVE +0C0B6h
LOAD:0000000000001158                 Elf64_Rela <210A00h, 8, 0C0C7h> ; R_X86_64_RELATIVE +0C0C7h
LOAD:0000000000001170                 Elf64_Rela <210A20h, 8, 0C0D1h> ; R_X86_64_RELATIVE +0C0D1h
LOAD:0000000000001188                 Elf64_Rela <210A40h, 8, 0C0DCh> ; R_X86_64_RELATIVE +0C0DCh
LOAD:00000000000011A0                 Elf64_Rela <210A60h, 8, 0C0E8h> ; R_X86_64_RELATIVE +0C0E8h
LOAD:00000000000011B8                 Elf64_Rela <210A80h, 8, 0C0F8h> ; R_X86_64_RELATIVE +0C0F8h
LOAD:00000000000011D0                 Elf64_Rela <210AA0h, 8, 0C10Eh> ; R_X86_64_RELATIVE +0C10Eh
LOAD:00000000000011E8                 Elf64_Rela <210AC0h, 8, 0C109h> ; R_X86_64_RELATIVE +0C109h
LOAD:0000000000001200                 Elf64_Rela <210AE0h, 8, 0C114h> ; R_X86_64_RELATIVE +0C114h
LOAD:0000000000001218                 Elf64_Rela <210B00h, 8, 0C119h> ; R_X86_64_RELATIVE +0C119h
LOAD:0000000000001230                 Elf64_Rela <210B40h, 8, 0DAB7h> ; R_X86_64_RELATIVE +0DAB7h
LOAD:0000000000001248                 Elf64_Rela <210B48h, 8, 0DABFh> ; R_X86_64_RELATIVE +0DABFh
LOAD:0000000000001260                 Elf64_Rela <210B50h, 8, 0DAC5h> ; R_X86_64_RELATIVE +0DAC5h
LOAD:0000000000001278                 Elf64_Rela <210B58h, 8, 0DAD2h> ; R_X86_64_RELATIVE +0DAD2h
LOAD:0000000000001290                 Elf64_Rela <210B60h, 8, 0DADFh> ; R_X86_64_RELATIVE +0DADFh
LOAD:00000000000012A8                 Elf64_Rela <210B68h, 8, 0DAF3h> ; R_X86_64_RELATIVE +0DAF3h
LOAD:00000000000012C0                 Elf64_Rela <210B70h, 8, 0DAF5h> ; R_X86_64_RELATIVE +0DAF5h
LOAD:00000000000012D8                 Elf64_Rela <210B78h, 8, 0DAD8h> ; R_X86_64_RELATIVE +0DAD8h
LOAD:00000000000012F0                 Elf64_Rela <210B80h, 8, 0BFD1h> ; R_X86_64_RELATIVE +0BFD1h
LOAD:0000000000001308                 Elf64_Rela <210B88h, 8, 0DAFDh> ; R_X86_64_RELATIVE +0DAFDh
LOAD:0000000000001320                 Elf64_Rela <211008h, 8, 211008h> ; R_X86_64_RELATIVE +211008h
LOAD:0000000000001338                 Elf64_Rela <211050h, 8, 0BEE5h> ; R_X86_64_RELATIVE +0BEE5h
LOAD:0000000000001350                 Elf64_Rela <211058h, 8, 0D835h> ; R_X86_64_RELATIVE +0D835h
LOAD:0000000000001368                 Elf64_Rela <2110C0h, 8, 2110D0h> ; R_X86_64_RELATIVE +2110D0h
LOAD:0000000000001380                 Elf64_Rela <2110D8h, 8, 211260h> ; R_X86_64_RELATIVE +211260h
LOAD:0000000000001398                 Elf64_Rela <210FC8h, 800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:00000000000013B0                 Elf64_Rela <210FD0h, 2400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000013C8                 Elf64_Rela <210FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000013E0                 Elf64_Rela <210FE0h, 4400000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000013F8                 Elf64_Rela <210FE8h, 4700000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001410                 Elf64_Rela <2110E0h, 4C00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001428                 Elf64_Rela <2110E8h, 4B00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001440                 Elf64_Rela <2110F0h, 4D00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001458                 Elf64_Rela <2110F8h, 5200000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001470                 Elf64_Rela <211100h, 5300000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001488                 Elf64_Rela <211108h, 4F00000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000014A0                 Elf64_Rela <211120h, 5100000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000014B8 ; ELF JMPREL Relocation Table
LOAD:00000000000014B8                 Elf64_Rela <210DA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:00000000000014D0                 Elf64_Rela <210DA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT __uflow
LOAD:00000000000014E8                 Elf64_Rela <210DB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000001500                 Elf64_Rela <210DB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001518                 Elf64_Rela <210DC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001530                 Elf64_Rela <210DC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001548                 Elf64_Rela <210DD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001560                 Elf64_Rela <210DD8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:0000000000001578                 Elf64_Rela <210DE0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001590                 Elf64_Rela <210DE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000015A8                 Elf64_Rela <210DF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:00000000000015C0                 Elf64_Rela <210DF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:00000000000015D8                 Elf64_Rela <210E00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:00000000000015F0                 Elf64_Rela <210E08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000001608                 Elf64_Rela <210E10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001620                 Elf64_Rela <210E18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __strtol_internal
LOAD:0000000000001638                 Elf64_Rela <210E20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001650                 Elf64_Rela <210E28h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001668                 Elf64_Rela <210E30h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001680                 Elf64_Rela <210E38h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001698                 Elf64_Rela <210E40h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000016B0                 Elf64_Rela <210E48h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000016C8                 Elf64_Rela <210E50h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000016E0                 Elf64_Rela <210E58h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000016F8                 Elf64_Rela <210E60h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001710                 Elf64_Rela <210E68h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001728                 Elf64_Rela <210E70h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001740                 Elf64_Rela <210E78h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:0000000000001758                 Elf64_Rela <210E80h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001770                 Elf64_Rela <210E88h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001788                 Elf64_Rela <210E90h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:00000000000017A0                 Elf64_Rela <210E98h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000017B8                 Elf64_Rela <210EA0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000017D0                 Elf64_Rela <210EA8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000017E8                 Elf64_Rela <210EB0h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001800                 Elf64_Rela <210EB8h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001818                 Elf64_Rela <210EC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001830                 Elf64_Rela <210EC8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001848                 Elf64_Rela <210ED0h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001860                 Elf64_Rela <210ED8h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001878                 Elf64_Rela <210EE0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000001890                 Elf64_Rela <210EE8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000018A8                 Elf64_Rela <210EF0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:00000000000018C0                 Elf64_Rela <210EF8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000018D8                 Elf64_Rela <210F00h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000018F0                 Elf64_Rela <210F08h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001908                 Elf64_Rela <210F10h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT ungetc
LOAD:0000000000001920                 Elf64_Rela <210F18h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001938                 Elf64_Rela <210F20h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:0000000000001950                 Elf64_Rela <210F28h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001968                 Elf64_Rela <210F30h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001980                 Elf64_Rela <210F38h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001998                 Elf64_Rela <210F40h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000019B0                 Elf64_Rela <210F48h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000019C8                 Elf64_Rela <210F50h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:00000000000019E0                 Elf64_Rela <210F58h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:00000000000019F8                 Elf64_Rela <210F60h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001A10                 Elf64_Rela <210F68h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001A28                 Elf64_Rela <210F70h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001A40                 Elf64_Rela <210F78h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:0000000000001A58                 Elf64_Rela <210F80h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001A70                 Elf64_Rela <210F88h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001A88                 Elf64_Rela <210F90h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001AA0                 Elf64_Rela <210F98h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001AB8                 Elf64_Rela <210FA0h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001AD0                 Elf64_Rela <210FA8h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001AE8                 Elf64_Rela <210FB0h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001B00                 Elf64_Rela <210FB8h, 4900000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001B18                 Elf64_Rela <210FC0h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000001B18 LOAD            ends
LOAD:0000000000001B18
.init:0000000000001B30 ; ===========================================================================
.init:0000000000001B30
.init:0000000000001B30 ; Segment type: Pure code
.init:0000000000001B30 ; Segment permissions: Read/Execute
.init:0000000000001B30 _init           segment dword public 'CODE' use64
.init:0000000000001B30                 assume cs:_init
.init:0000000000001B30                 ;org 1B30h
.init:0000000000001B30                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001B30
.init:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.init:0000000000001B30
.init:0000000000001B30
.init:0000000000001B30                 public _init_proc
.init:0000000000001B30 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001B30                 sub     rsp, 8          ; _init
.init:0000000000001B34                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001B3B                 test    rax, rax
.init:0000000000001B3E                 jz      short loc_1B42
.init:0000000000001B40                 call    rax ; __gmon_start__
.init:0000000000001B42
.init:0000000000001B42 loc_1B42:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001B42                 add     rsp, 8
.init:0000000000001B46                 retn
.init:0000000000001B46 _init_proc      endp
.init:0000000000001B46
.init:0000000000001B46 _init           ends
.init:0000000000001B46
LOAD:0000000000001B47 ; ===========================================================================
LOAD:0000000000001B47
LOAD:0000000000001B47 ; Segment type: Pure code
LOAD:0000000000001B47 ; Segment permissions: Read/Execute
LOAD:0000000000001B47 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001B47                 assume cs:LOAD
LOAD:0000000000001B47                 ;org 1B47h
LOAD:0000000000001B47                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001B47                 align 10h
LOAD:0000000000001B47 LOAD            ends
LOAD:0000000000001B47
.plt:0000000000001B50 ; ===========================================================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Segment type: Pure code
.plt:0000000000001B50 ; Segment permissions: Read/Execute
.plt:0000000000001B50 _plt            segment para public 'CODE' use64
.plt:0000000000001B50                 assume cs:_plt
.plt:0000000000001B50                 ;org 1B50h
.plt:0000000000001B50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50
.plt:0000000000001B50 sub_1B50        proc near               ; CODE XREF: .plt:0000000000001B6B↓j
.plt:0000000000001B50                                         ; .plt:0000000000001B7B↓j ...
.plt:0000000000001B50 ; __unwind {
.plt:0000000000001B50                 push    cs:qword_210D90
.plt:0000000000001B56                 jmp     cs:qword_210D98
.plt:0000000000001B56 sub_1B50        endp
.plt:0000000000001B56
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B5C                 align 20h
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; const __int32_t **__ctype_toupper_loc(void)
.plt:0000000000001B60 ___ctype_toupper_loc proc near          ; CODE XREF: memcpy_lowcase_0+13↓p
.plt:0000000000001B60                 jmp     cs:__ctype_toupper_loc_ptr
.plt:0000000000001B60 ___ctype_toupper_loc endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    0
.plt:0000000000001B6B                 jmp     sub_1B50
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int __uflow(_IO_FILE *)
.plt:0000000000001B70 ___uflow        proc near               ; CODE XREF: skip_read+AB↓p
.plt:0000000000001B70                                         ; skip_read+1E3↓p ...
.plt:0000000000001B70                 jmp     cs:__uflow_ptr
.plt:0000000000001B70 ___uflow        endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1
.plt:0000000000001B7B                 jmp     sub_1B50
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; char *getenv(const char *name)
.plt:0000000000001B80 _getenv         proc near               ; CODE XREF: main+18E↓p
.plt:0000000000001B80                                         ; main+7CF↓p ...
.plt:0000000000001B80                 jmp     cs:getenv_ptr
.plt:0000000000001B80 _getenv         endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    2
.plt:0000000000001B8B                 jmp     sub_1B50
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; void free(void *ptr)
.plt:0000000000001B90 _free           proc near               ; CODE XREF: main+174↓p
.plt:0000000000001B90                                         ; main+2A5↓p ...
.plt:0000000000001B90                 jmp     cs:free_ptr
.plt:0000000000001B90 _free           endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    3
.plt:0000000000001B9B                 jmp     sub_1B50
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: noreturn thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; void __noreturn abort(void)
.plt:0000000000001BA0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001BA0                                         ; quotearg_buffer_restyled:def_7BD1↓p ...
.plt:0000000000001BA0                 jmp     cs:abort_ptr
.plt:0000000000001BA0 _abort          endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    4
.plt:0000000000001BAB                 jmp     sub_1B50
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int *__errno_location(void)
.plt:0000000000001BB0 ___errno_location proc near             ; CODE XREF: main+855↓p
.plt:0000000000001BB0                                         ; close_file_part_4+B3↓p ...
.plt:0000000000001BB0                 jmp     cs:__errno_location_ptr
.plt:0000000000001BB0 ___errno_location endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    5
.plt:0000000000001BBB                 jmp     sub_1B50
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001BC0 _strncmp        proc near               ; CODE XREF: usage+42C↓p
.plt:0000000000001BC0                                         ; usage+4ED↓p
.plt:0000000000001BC0                 jmp     cs:strncmp_ptr
.plt:0000000000001BC0 _strncmp        endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    6
.plt:0000000000001BCB                 jmp     sub_1B50
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000001BD0 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:0000000000001BD0                                         ; mktime_z+AA↓p
.plt:0000000000001BD0                 jmp     cs:localtime_r_ptr
.plt:0000000000001BD0 _localtime_r    endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    7
.plt:0000000000001BDB                 jmp     sub_1B50
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: noreturn thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; void __noreturn _exit(int status)
.plt:0000000000001BE0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001BE0                 jmp     cs:_exit_ptr
.plt:0000000000001BE0 __exit          endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    8
.plt:0000000000001BEB                 jmp     sub_1B50
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; size_t __fpending(FILE *fp)
.plt:0000000000001BF0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001BF0                 jmp     cs:__fpending_ptr
.plt:0000000000001BF0 ___fpending     endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    9
.plt:0000000000001BFB                 jmp     sub_1B50
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int iswcntrl(wint_t wc)
.plt:0000000000001C00 _iswcntrl       proc near               ; CODE XREF: mbsnwidth+F7↓p
.plt:0000000000001C00                 jmp     cs:iswcntrl_ptr
.plt:0000000000001C00 _iswcntrl       endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    0Ah
.plt:0000000000001C0B                 jmp     sub_1B50
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001C10 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001C10                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001C10                 jmp     cs:fcntl_ptr
.plt:0000000000001C10 _fcntl          endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    0Bh
.plt:0000000000001C1B                 jmp     sub_1B50
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:0000000000001C20 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:0000000000001C20                                         ; current_timespec+19↓p
.plt:0000000000001C20                 jmp     cs:clock_gettime_ptr
.plt:0000000000001C20 _clock_gettime  endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    0Ch
.plt:0000000000001C2B                 jmp     sub_1B50
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int setenv(const char *name, const char *value, int replace)
.plt:0000000000001C30 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:0000000000001C30                 jmp     cs:setenv_ptr
.plt:0000000000001C30 _setenv         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    0Dh
.plt:0000000000001C3B                 jmp     sub_1B50
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *textdomain(const char *domainname)
.plt:0000000000001C40 _textdomain     proc near               ; CODE XREF: main+60↓p
.plt:0000000000001C40                 jmp     cs:textdomain_ptr
.plt:0000000000001C40 _textdomain     endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    0Eh
.plt:0000000000001C4B                 jmp     sub_1B50
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; __int64 __strtol_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001C50 ___strtol_internal proc near            ; CODE XREF: xstrtoimax+59↓p
.plt:0000000000001C50                 jmp     cs:__strtol_internal_ptr
.plt:0000000000001C50 ___strtol_internal endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    0Fh
.plt:0000000000001C5B                 jmp     sub_1B50
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int fclose(FILE *stream)
.plt:0000000000001C60 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001C60                                         ; rpl_fclose+6B↓j
.plt:0000000000001C60                 jmp     cs:fclose_ptr
.plt:0000000000001C60 _fclose         endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    10h
.plt:0000000000001C6B                 jmp     sub_1B50
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001C70 _bindtextdomain proc near               ; CODE XREF: main+54↓p
.plt:0000000000001C70                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001C70 _bindtextdomain endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    11h
.plt:0000000000001C7B                 jmp     sub_1B50
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001C80 _dcgettext      proc near               ; CODE XREF: main+37C↓p
.plt:0000000000001C80                                         ; main+44F↓p ...
.plt:0000000000001C80                 jmp     cs:dcgettext_ptr
.plt:0000000000001C80 _dcgettext      endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    12h
.plt:0000000000001C8B                 jmp     sub_1B50
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001C90 ___ctype_get_mb_cur_max proc near       ; CODE XREF: mbsnwidth+29↓p
.plt:0000000000001C90                                         ; quotearg_buffer_restyled+6C↓p
.plt:0000000000001C90                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001C90 ___ctype_get_mb_cur_max endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    13h
.plt:0000000000001C9B                 jmp     sub_1B50
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; size_t strlen(const char *s)
.plt:0000000000001CA0 _strlen         proc near               ; CODE XREF: separator_string+4↓p
.plt:0000000000001CA0                                         ; gnu_mbswidth+B↓p ...
.plt:0000000000001CA0                 jmp     cs:strlen_ptr
.plt:0000000000001CA0 _strlen         endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    14h
.plt:0000000000001CAB                 jmp     sub_1B50
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: noreturn thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_28D9↓p
.plt:0000000000001CB0                                         ; first_last_page:loc_2CA0↓p ...
.plt:0000000000001CB0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001CB0 ___stack_chk_fail endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    15h
.plt:0000000000001CBB                 jmp     sub_1B50
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001CC0 _getopt_long    proc near               ; CODE XREF: main+EF↓p
.plt:0000000000001CC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001CC0 _getopt_long    endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    16h
.plt:0000000000001CCB                 jmp     sub_1B50
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001CD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001CD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001CD0 _mbrtowc        endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    17h
.plt:0000000000001CDB                 jmp     sub_1B50
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; char *strchr(const char *s, int c)
.plt:0000000000001CE0 _strchr         proc near               ; CODE XREF: xstrtoimax+EC↓p
.plt:0000000000001CE0                                         ; xstrtoimax+10F↓p ...
.plt:0000000000001CE0                 jmp     cs:strchr_ptr
.plt:0000000000001CE0 _strchr         endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    18h
.plt:0000000000001CEB                 jmp     sub_1B50
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001CF0 ___overflow     proc near               ; CODE XREF: pad_across_to+65↓p
.plt:0000000000001CF0                                         ; print_white_space:loc_3070↓p ...
.plt:0000000000001CF0                 jmp     cs:__overflow_ptr
.plt:0000000000001CF0 ___overflow     endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    19h
.plt:0000000000001CFB                 jmp     sub_1B50
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; char *strrchr(const char *s, int c)
.plt:0000000000001D00 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001D00                 jmp     cs:strrchr_ptr
.plt:0000000000001D00 _strrchr        endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    1Ah
.plt:0000000000001D0B                 jmp     sub_1B50
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000001D10 _gmtime_r       proc near               ; CODE XREF: localtime_rz+90↓j
.plt:0000000000001D10                 jmp     cs:gmtime_r_ptr
.plt:0000000000001D10 _gmtime_r       endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    1Bh
.plt:0000000000001D1B                 jmp     sub_1B50
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001D20 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001D20                                         ; rpl_fseeko+3B↓p
.plt:0000000000001D20                 jmp     cs:lseek_ptr
.plt:0000000000001D20 _lseek          endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    1Ch
.plt:0000000000001D2B                 jmp     sub_1B50
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: noreturn thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001D30 ___assert_fail  proc near               ; CODE XREF: xstrtoimax+6A9↓p
.plt:0000000000001D30                                         ; xstrtol+6A9↓p ...
.plt:0000000000001D30                 jmp     cs:__assert_fail_ptr
.plt:0000000000001D30 ___assert_fail  endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    1Dh
.plt:0000000000001D3B                 jmp     sub_1B50
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001D40 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001D40                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001D40 ___strtoul_internal endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    1Eh
.plt:0000000000001D4B                 jmp     sub_1B50
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001D50 _memset         proc near               ; CODE XREF: __strftime_internal+11D↓p
.plt:0000000000001D50                                         ; __strftime_internal+2E1↓p ...
.plt:0000000000001D50                 jmp     cs:memset_ptr
.plt:0000000000001D50 _memset         endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    1Fh
.plt:0000000000001D5B                 jmp     sub_1B50
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; int close(int fd)
.plt:0000000000001D60 _close          proc near               ; CODE XREF: fopen_safer+6A↓p
.plt:0000000000001D60                                         ; rpl_fcntl+1FE↓p
.plt:0000000000001D60                 jmp     cs:close_ptr
.plt:0000000000001D60 _close          endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    20h ; ' '
.plt:0000000000001D6B                 jmp     sub_1B50
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001D70 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001D70                                         ; fadvise+16↓j
.plt:0000000000001D70                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001D70 _posix_fadvise  endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    21h ; '!'
.plt:0000000000001D7B                 jmp     sub_1B50
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001D80 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001D80                 jmp     cs:memcmp_ptr
.plt:0000000000001D80 _memcmp         endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    22h ; '"'
.plt:0000000000001D8B                 jmp     sub_1B50
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001D90 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001D90                                         ; usage+C2↓p ...
.plt:0000000000001D90                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001D90 _fputs_unlocked endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    23h ; '#'
.plt:0000000000001D9B                 jmp     sub_1B50
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001DA0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001DA0                 jmp     cs:calloc_ptr
.plt:0000000000001DA0 _calloc         endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    24h ; '$'
.plt:0000000000001DAB                 jmp     sub_1B50
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001DB0 _strcmp         proc near               ; CODE XREF: save_abbr+46↓p
.plt:0000000000001DB0                                         ; save_abbr+8E↓p ...
.plt:0000000000001DB0                 jmp     cs:strcmp_ptr
.plt:0000000000001DB0 _strcmp         endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    25h ; '%'
.plt:0000000000001DBB                 jmp     sub_1B50
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000001DC0 _strtol         proc near               ; CODE XREF: xstrtol+57↓p
.plt:0000000000001DC0                 jmp     cs:strtol_ptr
.plt:0000000000001DC0 _strtol         endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    26h ; '&'
.plt:0000000000001DCB                 jmp     sub_1B50
.plt:0000000000001DD0
.plt:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DD0
.plt:0000000000001DD0 ; Attributes: thunk
.plt:0000000000001DD0
.plt:0000000000001DD0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001DD0 _memcpy         proc near               ; CODE XREF: __strftime_internal:loc_6C01↓p
.plt:0000000000001DD0                                         ; __strftime_internal:loc_7380↓p ...
.plt:0000000000001DD0                 jmp     cs:memcpy_ptr
.plt:0000000000001DD0 _memcpy         endp
.plt:0000000000001DD0
.plt:0000000000001DD6 ; ---------------------------------------------------------------------------
.plt:0000000000001DD6                 push    27h ; '''
.plt:0000000000001DDB                 jmp     sub_1B50
.plt:0000000000001DE0
.plt:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DE0
.plt:0000000000001DE0 ; Attributes: thunk
.plt:0000000000001DE0
.plt:0000000000001DE0 ; void tzset(void)
.plt:0000000000001DE0 _tzset          proc near               ; CODE XREF: revert_tz:loc_B820↓p
.plt:0000000000001DE0                                         ; set_tz:loc_BAD8↓p
.plt:0000000000001DE0                 jmp     cs:tzset_ptr
.plt:0000000000001DE0 _tzset          endp
.plt:0000000000001DE0
.plt:0000000000001DE6 ; ---------------------------------------------------------------------------
.plt:0000000000001DE6                 push    28h ; '('
.plt:0000000000001DEB                 jmp     sub_1B50
.plt:0000000000001DF0
.plt:0000000000001DF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DF0
.plt:0000000000001DF0 ; Attributes: thunk
.plt:0000000000001DF0
.plt:0000000000001DF0 ; int fileno(FILE *stream)
.plt:0000000000001DF0 _fileno         proc near               ; CODE XREF: close_file_part_4+10↓p
.plt:0000000000001DF0                                         ; print_files+317↓p ...
.plt:0000000000001DF0                 jmp     cs:fileno_ptr
.plt:0000000000001DF0 _fileno         endp
.plt:0000000000001DF0
.plt:0000000000001DF6 ; ---------------------------------------------------------------------------
.plt:0000000000001DF6                 push    29h ; ')'
.plt:0000000000001DFB                 jmp     sub_1B50
.plt:0000000000001E00
.plt:0000000000001E00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E00
.plt:0000000000001E00 ; Attributes: thunk
.plt:0000000000001E00
.plt:0000000000001E00 ; int wcwidth(wchar_t c)
.plt:0000000000001E00 _wcwidth        proc near               ; CODE XREF: mbsnwidth+E3↓p
.plt:0000000000001E00                 jmp     cs:wcwidth_ptr
.plt:0000000000001E00 _wcwidth        endp
.plt:0000000000001E00
.plt:0000000000001E06 ; ---------------------------------------------------------------------------
.plt:0000000000001E06                 push    2Ah ; '*'
.plt:0000000000001E0B                 jmp     sub_1B50
.plt:0000000000001E10
.plt:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E10
.plt:0000000000001E10 ; Attributes: thunk
.plt:0000000000001E10
.plt:0000000000001E10 ; void *malloc(size_t size)
.plt:0000000000001E10 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001E10                                         ; tzalloc+2A↓p ...
.plt:0000000000001E10                 jmp     cs:malloc_ptr
.plt:0000000000001E10 _malloc         endp
.plt:0000000000001E10
.plt:0000000000001E16 ; ---------------------------------------------------------------------------
.plt:0000000000001E16                 push    2Bh ; '+'
.plt:0000000000001E1B                 jmp     sub_1B50
.plt:0000000000001E20
.plt:0000000000001E20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E20
.plt:0000000000001E20 ; Attributes: thunk
.plt:0000000000001E20
.plt:0000000000001E20 ; int fflush(FILE *stream)
.plt:0000000000001E20 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001E20                                         ; rpl_fflush+3B↓j
.plt:0000000000001E20                 jmp     cs:fflush_ptr
.plt:0000000000001E20 _fflush         endp
.plt:0000000000001E20
.plt:0000000000001E26 ; ---------------------------------------------------------------------------
.plt:0000000000001E26                 push    2Ch ; ','
.plt:0000000000001E2B                 jmp     sub_1B50
.plt:0000000000001E30
.plt:0000000000001E30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E30
.plt:0000000000001E30 ; Attributes: thunk
.plt:0000000000001E30
.plt:0000000000001E30 ; char *nl_langinfo(nl_item item)
.plt:0000000000001E30 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001E30                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001E30 _nl_langinfo    endp
.plt:0000000000001E30
.plt:0000000000001E36 ; ---------------------------------------------------------------------------
.plt:0000000000001E36                 push    2Dh ; '-'
.plt:0000000000001E3B                 jmp     sub_1B50
.plt:0000000000001E40
.plt:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E40
.plt:0000000000001E40 ; Attributes: thunk
.plt:0000000000001E40
.plt:0000000000001E40 ; int ungetc(int c, FILE *stream)
.plt:0000000000001E40 _ungetc         proc near               ; CODE XREF: skip_read+1C3↓p
.plt:0000000000001E40                                         ; read_rest_of_line+AB↓p ...
.plt:0000000000001E40                 jmp     cs:ungetc_ptr
.plt:0000000000001E40 _ungetc         endp
.plt:0000000000001E40
.plt:0000000000001E46 ; ---------------------------------------------------------------------------
.plt:0000000000001E46                 push    2Eh ; '.'
.plt:0000000000001E4B                 jmp     sub_1B50
.plt:0000000000001E50
.plt:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E50
.plt:0000000000001E50 ; Attributes: thunk
.plt:0000000000001E50
.plt:0000000000001E50 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001E50 ___fxstat       proc near               ; CODE XREF: init_header+19D↓p
.plt:0000000000001E50                 jmp     cs:__fxstat_ptr
.plt:0000000000001E50 ___fxstat       endp
.plt:0000000000001E50
.plt:0000000000001E56 ; ---------------------------------------------------------------------------
.plt:0000000000001E56                 push    2Fh ; '/'
.plt:0000000000001E5B                 jmp     sub_1B50
.plt:0000000000001E60
.plt:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E60
.plt:0000000000001E60 ; Attributes: thunk
.plt:0000000000001E60
.plt:0000000000001E60 ; time_t mktime(struct tm *tp)
.plt:0000000000001E60 _mktime         proc near               ; CODE XREF: mktime_z+3B↓p
.plt:0000000000001E60                 jmp     cs:mktime_ptr
.plt:0000000000001E60 _mktime         endp
.plt:0000000000001E60
.plt:0000000000001E66 ; ---------------------------------------------------------------------------
.plt:0000000000001E66                 push    30h ; '0'
.plt:0000000000001E6B                 jmp     sub_1B50
.plt:0000000000001E70
.plt:0000000000001E70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E70
.plt:0000000000001E70 ; Attributes: thunk
.plt:0000000000001E70
.plt:0000000000001E70 ; int __freading(FILE *fp)
.plt:0000000000001E70 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001E70                                         ; rpl_fflush+9↓p
.plt:0000000000001E70                 jmp     cs:__freading_ptr
.plt:0000000000001E70 ___freading     endp
.plt:0000000000001E70
.plt:0000000000001E76 ; ---------------------------------------------------------------------------
.plt:0000000000001E76                 push    31h ; '1'
.plt:0000000000001E7B                 jmp     sub_1B50
.plt:0000000000001E80
.plt:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E80
.plt:0000000000001E80 ; Attributes: thunk
.plt:0000000000001E80
.plt:0000000000001E80 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001E80 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001E80                 jmp     cs:realloc_ptr
.plt:0000000000001E80 _realloc        endp
.plt:0000000000001E80
.plt:0000000000001E86 ; ---------------------------------------------------------------------------
.plt:0000000000001E86                 push    32h ; '2'
.plt:0000000000001E8B                 jmp     sub_1B50
.plt:0000000000001E90
.plt:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001E90
.plt:0000000000001E90 ; Attributes: thunk
.plt:0000000000001E90
.plt:0000000000001E90 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001E90 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001E90                 jmp     cs:fdopen_ptr
.plt:0000000000001E90 _fdopen         endp
.plt:0000000000001E90
.plt:0000000000001E96 ; ---------------------------------------------------------------------------
.plt:0000000000001E96                 push    33h ; '3'
.plt:0000000000001E9B                 jmp     sub_1B50
.plt:0000000000001EA0
.plt:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EA0
.plt:0000000000001EA0 ; Attributes: thunk
.plt:0000000000001EA0
.plt:0000000000001EA0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001EA0 _setlocale      proc near               ; CODE XREF: main+41↓p
.plt:0000000000001EA0                                         ; usage+413↓p ...
.plt:0000000000001EA0                 jmp     cs:setlocale_ptr
.plt:0000000000001EA0 _setlocale      endp
.plt:0000000000001EA0
.plt:0000000000001EA6 ; ---------------------------------------------------------------------------
.plt:0000000000001EA6                 push    34h ; '4'
.plt:0000000000001EAB                 jmp     sub_1B50
.plt:0000000000001EB0
.plt:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EB0
.plt:0000000000001EB0 ; Attributes: thunk
.plt:0000000000001EB0
.plt:0000000000001EB0 ___printf_chk   proc near               ; CODE XREF: print_header+D0↓p
.plt:0000000000001EB0                                         ; usage+78↓p ...
.plt:0000000000001EB0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001EB0 ___printf_chk   endp
.plt:0000000000001EB0
.plt:0000000000001EB6 ; ---------------------------------------------------------------------------
.plt:0000000000001EB6                 push    35h ; '5'
.plt:0000000000001EBB                 jmp     sub_1B50
.plt:0000000000001EC0
.plt:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EC0
.plt:0000000000001EC0 ; Attributes: thunk
.plt:0000000000001EC0
.plt:0000000000001EC0 ; time_t timegm(struct tm *tp)
.plt:0000000000001EC0 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000001EC0                 jmp     cs:timegm_ptr
.plt:0000000000001EC0 _timegm         endp
.plt:0000000000001EC0
.plt:0000000000001EC6 ; ---------------------------------------------------------------------------
.plt:0000000000001EC6                 push    36h ; '6'
.plt:0000000000001ECB                 jmp     sub_1B50
.plt:0000000000001ED0
.plt:0000000000001ED0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001ED0
.plt:0000000000001ED0 ; Attributes: thunk
.plt:0000000000001ED0
.plt:0000000000001ED0 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000001ED0 _strftime       proc near               ; CODE XREF: __strftime_internal+418↓p
.plt:0000000000001ED0                 jmp     cs:strftime_ptr
.plt:0000000000001ED0 _strftime       endp
.plt:0000000000001ED0
.plt:0000000000001ED6 ; ---------------------------------------------------------------------------
.plt:0000000000001ED6                 push    37h ; '7'
.plt:0000000000001EDB                 jmp     sub_1B50
.plt:0000000000001EE0
.plt:0000000000001EE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EE0
.plt:0000000000001EE0 ; Attributes: thunk
.plt:0000000000001EE0
.plt:0000000000001EE0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001EE0 _error          proc near               ; CODE XREF: main+866↓p
.plt:0000000000001EE0                                         ; main+8BA↓p ...
.plt:0000000000001EE0                 jmp     cs:error_ptr
.plt:0000000000001EE0 _error          endp
.plt:0000000000001EE0
.plt:0000000000001EE6 ; ---------------------------------------------------------------------------
.plt:0000000000001EE6                 push    38h ; '8'
.plt:0000000000001EEB                 jmp     sub_1B50
.plt:0000000000001EF0
.plt:0000000000001EF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001EF0
.plt:0000000000001EF0 ; Attributes: thunk
.plt:0000000000001EF0
.plt:0000000000001EF0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001EF0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_B68A↓j
.plt:0000000000001EF0                 jmp     cs:fseeko_ptr
.plt:0000000000001EF0 _fseeko         endp
.plt:0000000000001EF0
.plt:0000000000001EF6 ; ---------------------------------------------------------------------------
.plt:0000000000001EF6                 push    39h ; '9'
.plt:0000000000001EFB                 jmp     sub_1B50
.plt:0000000000001F00
.plt:0000000000001F00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F00
.plt:0000000000001F00 ; Attributes: thunk
.plt:0000000000001F00
.plt:0000000000001F00 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001F00 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001F00                 jmp     cs:fopen_ptr
.plt:0000000000001F00 _fopen          endp
.plt:0000000000001F00
.plt:0000000000001F06 ; ---------------------------------------------------------------------------
.plt:0000000000001F06                 push    3Ah ; ':'
.plt:0000000000001F0B                 jmp     sub_1B50
.plt:0000000000001F10
.plt:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F10
.plt:0000000000001F10 ; Attributes: thunk
.plt:0000000000001F10
.plt:0000000000001F10 ; int unsetenv(const char *name)
.plt:0000000000001F10 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000001F10                 jmp     cs:unsetenv_ptr
.plt:0000000000001F10 _unsetenv       endp
.plt:0000000000001F10
.plt:0000000000001F16 ; ---------------------------------------------------------------------------
.plt:0000000000001F16                 push    3Bh ; ';'
.plt:0000000000001F1B                 jmp     sub_1B50
.plt:0000000000001F20
.plt:0000000000001F20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F20
.plt:0000000000001F20 ; Attributes: thunk
.plt:0000000000001F20
.plt:0000000000001F20 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001F20 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001F20                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001F20 ___cxa_atexit   endp
.plt:0000000000001F20
.plt:0000000000001F26 ; ---------------------------------------------------------------------------
.plt:0000000000001F26                 push    3Ch ; '<'
.plt:0000000000001F2B                 jmp     sub_1B50
.plt:0000000000001F30
.plt:0000000000001F30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F30
.plt:0000000000001F30 ; Attributes: noreturn thunk
.plt:0000000000001F30
.plt:0000000000001F30 ; void __noreturn exit(int status)
.plt:0000000000001F30 _exit           proc near               ; CODE XREF: main+754↓p
.plt:0000000000001F30                                         ; usage+58↓p
.plt:0000000000001F30                 jmp     cs:exit_ptr
.plt:0000000000001F30 _exit           endp
.plt:0000000000001F30
.plt:0000000000001F36 ; ---------------------------------------------------------------------------
.plt:0000000000001F36                 push    3Dh ; '='
.plt:0000000000001F3B                 jmp     sub_1B50
.plt:0000000000001F40
.plt:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F40
.plt:0000000000001F40 ; Attributes: thunk
.plt:0000000000001F40
.plt:0000000000001F40 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001F40 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001F40                 jmp     cs:fwrite_ptr
.plt:0000000000001F40 _fwrite         endp
.plt:0000000000001F40
.plt:0000000000001F46 ; ---------------------------------------------------------------------------
.plt:0000000000001F46                 push    3Eh ; '>'
.plt:0000000000001F4B                 jmp     sub_1B50
.plt:0000000000001F50
.plt:0000000000001F50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F50
.plt:0000000000001F50 ; Attributes: thunk
.plt:0000000000001F50
.plt:0000000000001F50 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001F50                                         ; version_etc_arn+37↓p ...
.plt:0000000000001F50                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001F50 ___fprintf_chk  endp
.plt:0000000000001F50
.plt:0000000000001F56 ; ---------------------------------------------------------------------------
.plt:0000000000001F56                 push    3Fh ; '?'
.plt:0000000000001F5B                 jmp     sub_1B50
.plt:0000000000001F60
.plt:0000000000001F60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F60
.plt:0000000000001F60 ; Attributes: thunk
.plt:0000000000001F60
.plt:0000000000001F60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001F60 _mbsinit        proc near               ; CODE XREF: mbsnwidth+A7↓p
.plt:0000000000001F60                                         ; quotearg_buffer_restyled+9A8↓p
.plt:0000000000001F60                 jmp     cs:mbsinit_ptr
.plt:0000000000001F60 _mbsinit        endp
.plt:0000000000001F60
.plt:0000000000001F66 ; ---------------------------------------------------------------------------
.plt:0000000000001F66                 push    40h ; '@'
.plt:0000000000001F6B                 jmp     sub_1B50
.plt:0000000000001F70
.plt:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F70
.plt:0000000000001F70 ; Attributes: thunk
.plt:0000000000001F70
.plt:0000000000001F70 ; int iswprint(wint_t wc)
.plt:0000000000001F70 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001F70                 jmp     cs:iswprint_ptr
.plt:0000000000001F70 _iswprint       endp
.plt:0000000000001F70
.plt:0000000000001F76 ; ---------------------------------------------------------------------------
.plt:0000000000001F76                 push    41h ; 'A'
.plt:0000000000001F7B                 jmp     sub_1B50
.plt:0000000000001F80
.plt:0000000000001F80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F80
.plt:0000000000001F80 ; Attributes: thunk
.plt:0000000000001F80
.plt:0000000000001F80 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001F80 ___ctype_tolower_loc proc near          ; CODE XREF: memcpy_lowcase+13↓p
.plt:0000000000001F80                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001F80 ___ctype_tolower_loc endp
.plt:0000000000001F80
.plt:0000000000001F86 ; ---------------------------------------------------------------------------
.plt:0000000000001F86                 push    42h ; 'B'
.plt:0000000000001F8B                 jmp     sub_1B50
.plt:0000000000001F90
.plt:0000000000001F90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001F90
.plt:0000000000001F90 ; Attributes: thunk
.plt:0000000000001F90
.plt:0000000000001F90 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001F90 ___ctype_b_loc  proc near               ; CODE XREF: char_to_clump+3A↓p
.plt:0000000000001F90                                         ; print_char+25↓p ...
.plt:0000000000001F90                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001F90 ___ctype_b_loc  endp
.plt:0000000000001F90
.plt:0000000000001F96 ; ---------------------------------------------------------------------------
.plt:0000000000001F96                 push    43h ; 'C'
.plt:0000000000001F9B                 jmp     sub_1B50
.plt:0000000000001FA0
.plt:0000000000001FA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001FA0
.plt:0000000000001FA0 ; Attributes: thunk
.plt:0000000000001FA0
.plt:0000000000001FA0 ___sprintf_chk  proc near               ; CODE XREF: init_header+20A↓p
.plt:0000000000001FA0                                         ; print_header+71↓p ...
.plt:0000000000001FA0                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000001FA0 ___sprintf_chk  endp
.plt:0000000000001FA0
.plt:0000000000001FA6 ; ---------------------------------------------------------------------------
.plt:0000000000001FA6                 push    44h ; 'D'
.plt:0000000000001FAB                 jmp     sub_1B50
.plt:0000000000001FAB ; } // starts at 1B50
.plt:0000000000001FAB _plt            ends
.plt:0000000000001FAB
.plt.got:0000000000001FB0 ; ===========================================================================
.plt.got:0000000000001FB0
.plt.got:0000000000001FB0 ; Segment type: Pure code
.plt.got:0000000000001FB0 ; Segment permissions: Read/Execute
.plt.got:0000000000001FB0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001FB0                 assume cs:_plt_got
.plt.got:0000000000001FB0                 ;org 1FB0h
.plt.got:0000000000001FB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001FB0
.plt.got:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001FB0
.plt.got:0000000000001FB0 ; Attributes: thunk
.plt.got:0000000000001FB0
.plt.got:0000000000001FB0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001FB0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001FB0 ; __unwind {
.plt.got:0000000000001FB0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001FB0 __cxa_finalize  endp
.plt.got:0000000000001FB0
.plt.got:0000000000001FB0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001FB6                 align 8
.plt.got:0000000000001FB6 ; } // starts at 1FB0
.plt.got:0000000000001FB6 _plt_got        ends
.plt.got:0000000000001FB6
LOAD:0000000000001FB8 ; ===========================================================================
LOAD:0000000000001FB8
LOAD:0000000000001FB8 ; Segment type: Pure code
LOAD:0000000000001FB8 ; Segment permissions: Read/Execute
LOAD:0000000000001FB8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001FB8                 assume cs:LOAD
LOAD:0000000000001FB8                 ;org 1FB8h
LOAD:0000000000001FB8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001FB8                 align 20h
LOAD:0000000000001FB8 LOAD            ends
LOAD:0000000000001FB8
.text:0000000000001FC0 ; ===========================================================================
.text:0000000000001FC0
.text:0000000000001FC0 ; Segment type: Pure code
.text:0000000000001FC0 ; Segment permissions: Read/Execute
.text:0000000000001FC0 _text           segment para public 'CODE' use64
.text:0000000000001FC0                 assume cs:_text
.text:0000000000001FC0                 ;org 1FC0h
.text:0000000000001FC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001FC0
.text:0000000000001FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FC0
.text:0000000000001FC0
.text:0000000000001FC0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001FC0                 public main
.text:0000000000001FC0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001FC0
.text:0000000000001FC0 var_80          = qword ptr -80h
.text:0000000000001FC0 var_74          = dword ptr -74h
.text:0000000000001FC0 var_70          = qword ptr -70h
.text:0000000000001FC0 var_68          = qword ptr -68h
.text:0000000000001FC0 var_60          = dword ptr -60h
.text:0000000000001FC0 var_5B          = byte ptr -5Bh
.text:0000000000001FC0 var_5A          = byte ptr -5Ah
.text:0000000000001FC0 var_59          = byte ptr -59h
.text:0000000000001FC0 longind         = dword ptr -4Ch
.text:0000000000001FC0 var_48          = qword ptr -48h
.text:0000000000001FC0 var_40          = qword ptr -40h
.text:0000000000001FC0
.text:0000000000001FC0 ; __unwind {
.text:0000000000001FC0                 push    r15
.text:0000000000001FC2                 push    r14
.text:0000000000001FC4                 push    r13
.text:0000000000001FC6                 push    r12
.text:0000000000001FC8                 mov     r12d, edi
.text:0000000000001FCB                 push    rbp
.text:0000000000001FCC                 push    rbx
.text:0000000000001FCD                 mov     r13, rsi
.text:0000000000001FD0                 sub     rsp, 58h
.text:0000000000001FD4                 mov     rdi, [rsi]
.text:0000000000001FD7                 mov     rax, fs:28h
.text:0000000000001FE0                 mov     [rsp+88h+var_40], rax
.text:0000000000001FE5                 xor     eax, eax
.text:0000000000001FE7                 mov     [rsp+88h+var_48], 0
.text:0000000000001FF0                 call    set_program_name
.text:0000000000001FF5                 lea     rsi, asc_BEE4+1 ; locale
.text:0000000000001FFC                 mov     edi, 6          ; category
.text:0000000000002001                 call    _setlocale
.text:0000000000002006                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:000000000000200D                 lea     rdi, domainname ; "coreutils"
.text:0000000000002014                 call    _bindtextdomain
.text:0000000000002019                 lea     rdi, domainname ; "coreutils"
.text:0000000000002020                 call    _textdomain
.text:0000000000002025                 lea     rdi, close_stdout
.text:000000000000202C                 call    atexit
.text:0000000000002031                 cmp     r12d, 1
.text:0000000000002035                 mov     [rsp+88h+var_68], 0
.text:000000000000203E                 jle     short loc_2056
.text:0000000000002040                 lea     edi, [r12-1]
.text:0000000000002045                 movsxd  rdi, edi
.text:0000000000002048                 shl     rdi, 3
.text:000000000000204C                 call    xmalloc
.text:0000000000002051                 mov     [rsp+88h+var_68], rax
.text:0000000000002056
.text:0000000000002056 loc_2056:                               ; CODE XREF: main+7E↑j
.text:0000000000002056                 lea     rax, [rsp+88h+var_48]
.text:000000000000205B                 lea     r14, [rsp+88h+longind]
.text:0000000000002060                 lea     rbp, jpt_20DD
.text:0000000000002067                 xor     ebx, ebx
.text:0000000000002069                 xor     r15d, r15d
.text:000000000000206C                 mov     [rsp+88h+var_59], 0
.text:0000000000002071                 mov     [rsp+88h+var_5A], 0
.text:0000000000002076                 mov     [rsp+88h+var_5B], 0
.text:000000000000207B                 mov     [rsp+88h+var_60], 0
.text:0000000000002083                 mov     [rsp+88h+var_70], rax
.text:0000000000002088                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002090
.text:0000000000002090 loc_2090:                               ; CODE XREF: main+137↓j
.text:0000000000002090                                         ; main+342↓j ...
.text:0000000000002090                 lea     rdx, short_options ; "-0123456789D:FJN:S::TW:abcde::fh:i::l:m"...
.text:0000000000002097                 lea     rcx, long_options ; longopts
.text:000000000000209E                 mov     r8, r14         ; longind
.text:00000000000020A1                 mov     rsi, r13        ; argv
.text:00000000000020A4                 mov     edi, r12d       ; argc
.text:00000000000020A7                 mov     [rsp+88h+longind], 0FFFFFFFFh
.text:00000000000020AF                 call    _getopt_long
.text:00000000000020B4                 cmp     eax, 0FFFFFFFFh
.text:00000000000020B7                 mov     edx, eax
.text:00000000000020B9                 jz      short loc_2124
.text:00000000000020BB                 lea     eax, [rax-30h]
.text:00000000000020BE                 cmp     eax, 9
.text:00000000000020C1                 jbe     short loc_20E0
.text:00000000000020C3                 add     edx, 83h        ; switch 261 cases
.text:00000000000020C9                 cmp     edx, 104h
.text:00000000000020CF                 ja      def_20DD        ; jumptable 00000000000020DD default case, cases -129-0,2-67,69,71-73,75-77,79-82,85,86,88-96,103,106,107,112,113,117,120-127
.text:00000000000020D5                 movsxd  rax, ss:(jpt_20DD - 0D3E0h)[rbp+rdx*4]
.text:00000000000020DA                 add     rax, rbp
.text:00000000000020DD                 jmp     rax             ; switch jump
.text:00000000000020DD ; ---------------------------------------------------------------------------
.text:00000000000020DF                 align 20h
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: main+101↑j
.text:00000000000020E0                 lea     rcx, [rbx+1]
.text:00000000000020E4                 cmp     rcx, [rsp+88h+var_48]
.text:00000000000020E9                 jnb     short loc_2100
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: main+162↓j
.text:00000000000020EB                 mov     [r15+rbx], dl
.text:00000000000020EF                 mov     byte ptr [r15+rcx], 0
.text:00000000000020F4                 mov     rbx, rcx
.text:00000000000020F7                 jmp     short loc_2090
.text:00000000000020F7 ; ---------------------------------------------------------------------------
.text:00000000000020F9                 align 20h
.text:0000000000002100
.text:0000000000002100 loc_2100:                               ; CODE XREF: main+129↑j
.text:0000000000002100                 mov     rsi, [rsp+88h+var_70]
.text:0000000000002105                 mov     rdi, r15
.text:0000000000002108                 mov     [rsp+88h+var_74], edx
.text:000000000000210C                 mov     [rsp+88h+var_80], rcx
.text:0000000000002111                 call    x2realloc
.text:0000000000002116                 mov     edx, [rsp+88h+var_74]
.text:000000000000211A                 mov     r15, rax
.text:000000000000211D                 mov     rcx, [rsp+88h+var_80]
.text:0000000000002122                 jmp     short loc_20EB
.text:0000000000002124 ; ---------------------------------------------------------------------------
.text:0000000000002124
.text:0000000000002124 loc_2124:                               ; CODE XREF: main+F9↑j
.text:0000000000002124                 test    r15, r15
.text:0000000000002127                 jz      short loc_2139
.text:0000000000002129                 mov     rdi, r15
.text:000000000000212C                 call    parse_column_count
.text:0000000000002131                 mov     rdi, r15        ; ptr
.text:0000000000002134                 call    _free
.text:0000000000002139
.text:0000000000002139 loc_2139:                               ; CODE XREF: main+167↑j
.text:0000000000002139                 cmp     cs:date_format, 0
.text:0000000000002141                 jz      loc_2788
.text:0000000000002147
.text:0000000000002147 loc_2147:                               ; CODE XREF: main+7F5↓j
.text:0000000000002147                 lea     rdi, name       ; "TZ"
.text:000000000000214E                 call    _getenv
.text:0000000000002153                 mov     rdi, rax        ; src
.text:0000000000002156                 call    tzalloc
.text:000000000000215B                 cmp     cs:first_page_number, 0
.text:0000000000002163                 mov     cs:localtz, rax
.text:000000000000216A                 jnz     short loc_2177
.text:000000000000216C                 mov     cs:first_page_number, 1
.text:0000000000002177
.text:0000000000002177 loc_2177:                               ; CODE XREF: main+1AA↑j
.text:0000000000002177                 movzx   edi, cs:parallel_files
.text:000000000000217E                 test    dil, dil
.text:0000000000002181                 jz      short loc_219D
.text:0000000000002183                 cmp     cs:explicit_columns, 0
.text:000000000000218A                 jnz     loc_28DE
.text:0000000000002190                 cmp     cs:print_across_flag, 0
.text:0000000000002197                 jnz     loc_285B
.text:000000000000219D
.text:000000000000219D loc_219D:                               ; CODE XREF: main+1C1↑j
.text:000000000000219D                 cmp     [rsp+88h+var_5B], 0
.text:00000000000021A2                 jz      short loc_21D6
.text:00000000000021A4                 cmp     [rsp+88h+var_5A], 0
.text:00000000000021A9                 jz      loc_2727
.text:00000000000021AF                 test    dil, dil
.text:00000000000021B2                 jnz     short loc_21C1
.text:00000000000021B4                 cmp     cs:explicit_columns, 0
.text:00000000000021BB                 jz      loc_283E
.text:00000000000021C1
.text:00000000000021C1 loc_21C1:                               ; CODE XREF: main+1F2↑j
.text:00000000000021C1                 cmp     [rsp+88h+var_59], 0
.text:00000000000021C6                 mov     cs:truncate_lines, 1
.text:00000000000021CD                 jz      short loc_21D6
.text:00000000000021CF
.text:00000000000021CF loc_21CF:                               ; CODE XREF: main+798↓j
.text:00000000000021CF                                         ; main+7AC↓j
.text:00000000000021CF                 mov     cs:use_col_separator, 1
.text:00000000000021D6
.text:00000000000021D6 loc_21D6:                               ; CODE XREF: main+1E2↑j
.text:00000000000021D6                                         ; main+20D↑j ...
.text:00000000000021D6                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000021DC                 cmp     r12d, eax
.text:00000000000021DF                 jle     short loc_221F
.text:00000000000021E1                 mov     ecx, [rsp+88h+var_60]
.text:00000000000021E5                 movsxd  rdx, eax
.text:00000000000021E8                 mov     esi, r12d
.text:00000000000021EB                 mov     r9, [rsp+88h+var_68]
.text:00000000000021F0                 sub     esi, eax
.text:00000000000021F2                 lea     rdx, [r13+rdx*8+0]
.text:00000000000021F7                 mov     eax, ecx
.text:00000000000021F9                 add     esi, eax
.text:00000000000021FB                 nop     dword ptr [rax+rax+00h]
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: main+252↓j
.text:0000000000002200                 mov     r8, [rdx]
.text:0000000000002203                 add     ecx, 1
.text:0000000000002206                 add     rdx, 8
.text:000000000000220A                 cmp     ecx, esi
.text:000000000000220C                 mov     [r9+rax*8], r8
.text:0000000000002210                 mov     eax, ecx
.text:0000000000002212                 jnz     short loc_2200
.text:0000000000002214                 mov     [rsp+88h+var_60], ecx
.text:0000000000002218                 mov     cs:optind@@GLIBC_2_2_5, r12d
.text:000000000000221F
.text:000000000000221F loc_221F:                               ; CODE XREF: main+21F↑j
.text:000000000000221F                 cmp     [rsp+88h+var_60], 0
.text:0000000000002224                 jz      loc_2719
.text:000000000000222A                 test    dil, dil
.text:000000000000222D                 jnz     loc_282B
.text:0000000000002233                 mov     eax, [rsp+88h+var_60]
.text:0000000000002237                 mov     rbx, [rsp+88h+var_68]
.text:000000000000223C                 sub     eax, 1
.text:000000000000223F                 lea     rbp, [rbx+rax*8+8]
.text:0000000000002244                 nop     dword ptr [rax+00h]
.text:0000000000002248
.text:0000000000002248 loc_2248:                               ; CODE XREF: main+29C↓j
.text:0000000000002248                 mov     rsi, rbx
.text:000000000000224B                 mov     edi, 1
.text:0000000000002250                 add     rbx, 8
.text:0000000000002254                 call    print_files
.text:0000000000002259                 cmp     rbp, rbx
.text:000000000000225C                 jnz     short loc_2248
.text:000000000000225E
.text:000000000000225E loc_225E:                               ; CODE XREF: main+762↓j
.text:000000000000225E                                         ; main+879↓j
.text:000000000000225E                 mov     rdi, cs:number_buff ; ptr
.text:0000000000002265                 call    _free
.text:000000000000226A                 mov     rdi, cs:clump_buff ; ptr
.text:0000000000002271                 call    _free
.text:0000000000002276                 mov     rdi, cs:column_vector ; ptr
.text:000000000000227D                 call    _free
.text:0000000000002282                 mov     rdi, cs:line_vector ; ptr
.text:0000000000002289                 call    _free
.text:000000000000228E                 mov     rdi, cs:end_vector ; ptr
.text:0000000000002295                 call    _free
.text:000000000000229A                 mov     rdi, cs:buff    ; ptr
.text:00000000000022A1                 call    _free
.text:00000000000022A6                 cmp     cs:have_read_stdin, 0
.text:00000000000022AD                 jnz     loc_27EA
.text:00000000000022B3
.text:00000000000022B3 loc_22B3:                               ; CODE XREF: main+839↓j
.text:00000000000022B3                 mov     rbx, [rsp+88h+var_40]
.text:00000000000022B8                 xor     rbx, fs:28h
.text:00000000000022C1                 movzx   eax, cs:failed_opens
.text:00000000000022C8                 jnz     loc_28D9
.text:00000000000022CE                 add     rsp, 58h
.text:00000000000022D2                 pop     rbx
.text:00000000000022D3                 pop     rbp
.text:00000000000022D4                 pop     r12
.text:00000000000022D6                 pop     r13
.text:00000000000022D8                 pop     r14
.text:00000000000022DA                 pop     r15
.text:00000000000022DC                 retn
.text:00000000000022DD ; ---------------------------------------------------------------------------
.text:00000000000022DD
.text:00000000000022DD loc_22DD:                               ; CODE XREF: main+11D↑j
.text:00000000000022DD                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000022DD                 mov     rdx, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 129
.text:00000000000022E4                 test    rdx, rdx
.text:00000000000022E7                 jz      loc_287F
.text:00000000000022ED                 mov     edi, [rsp+88h+longind]
.text:00000000000022F1                 xor     esi, esi
.text:00000000000022F3                 call    first_last_page
.text:00000000000022F8                 test    al, al
.text:00000000000022FA                 jz      loc_28A3
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: main+3B8↓j
.text:0000000000002300                                         ; main+405↓j ...
.text:0000000000002300                 xor     ebx, ebx
.text:0000000000002302                 jmp     loc_2090
.text:0000000000002307 ; ---------------------------------------------------------------------------
.text:0000000000002307
.text:0000000000002307 loc_2307:                               ; CODE XREF: main+11D↑j
.text:0000000000002307                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002307                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 128
.text:000000000000230E                 xor     ebx, ebx
.text:0000000000002310                 call    parse_column_count
.text:0000000000002315                 mov     rdi, r15        ; ptr
.text:0000000000002318                 xor     r15d, r15d
.text:000000000000231B                 call    _free
.text:0000000000002320                 mov     [rsp+88h+var_48], 0
.text:0000000000002329                 jmp     loc_2090
.text:000000000000232E ; ---------------------------------------------------------------------------
.text:000000000000232E
.text:000000000000232E loc_232E:                               ; CODE XREF: main+11D↑j
.text:000000000000232E                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:000000000000232E                 lea     rsi, msgid      ; jumptable 00000000000020DD case 119
.text:0000000000002335                 xor     edi, edi        ; domainname
.text:0000000000002337                 mov     edx, 5          ; category
.text:000000000000233C                 call    _dcgettext
.text:0000000000002341                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002348                 lea     rcx, asc_BEE4+1 ; ""
.text:000000000000234F                 xor     r9d, r9d
.text:0000000000002352                 mov     esi, 1
.text:0000000000002357                 mov     r8, rax
.text:000000000000235A                 mov     edx, 7FFFFFFFh
.text:000000000000235F                 call    xdectoumax
.text:0000000000002364                 movzx   esi, cs:truncate_lines
.text:000000000000236B                 test    sil, sil
.text:000000000000236E                 mov     [rsp+88h+var_5B], sil
.text:0000000000002373                 mov     [rsp+88h+var_5A], sil
.text:0000000000002378                 jnz     short loc_2300
.text:000000000000237A                 mov     cs:chars_per_line, eax
.text:0000000000002380                 mov     [rsp+88h+var_5A], 1
.text:0000000000002385                 xor     ebx, ebx
.text:0000000000002387                 mov     [rsp+88h+var_5B], 1
.text:000000000000238C                 jmp     loc_2090
.text:0000000000002391 ; ---------------------------------------------------------------------------
.text:0000000000002391
.text:0000000000002391 loc_2391:                               ; CODE XREF: main+11D↑j
.text:0000000000002391                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002391                 mov     cs:use_esc_sequence, 1 ; jumptable 00000000000020DD case 118
.text:0000000000002398                 xor     ebx, ebx
.text:000000000000239A                 jmp     loc_2090
.text:000000000000239F ; ---------------------------------------------------------------------------
.text:000000000000239F
.text:000000000000239F loc_239F:                               ; CODE XREF: main+11D↑j
.text:000000000000239F                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:000000000000239F                 mov     cs:extremities, 0 ; jumptable 00000000000020DD case 116
.text:00000000000023A6                 mov     cs:keep_FF, 1
.text:00000000000023AD                 xor     ebx, ebx
.text:00000000000023AF                 jmp     loc_2090
.text:00000000000023B4 ; ---------------------------------------------------------------------------
.text:00000000000023B4
.text:00000000000023B4 loc_23B4:                               ; CODE XREF: main+11D↑j
.text:00000000000023B4                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000023B4                 movzx   eax, cs:use_col_separator ; jumptable 00000000000020DD case 115
.text:00000000000023BB                 test    al, al
.text:00000000000023BD                 mov     [rsp+88h+var_5B], al
.text:00000000000023C1                 mov     [rsp+88h+var_59], al
.text:00000000000023C5                 jnz     loc_2300
.text:00000000000023CB                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000023D2                 test    rdi, rdi
.text:00000000000023D5                 jz      loc_2777
.text:00000000000023DB                 call    separator_string
.text:00000000000023E0                 xor     ebx, ebx
.text:00000000000023E2                 mov     [rsp+88h+var_59], 1
.text:00000000000023E7                 mov     [rsp+88h+var_5B], 1
.text:00000000000023EC                 jmp     loc_2090
.text:00000000000023F1 ; ---------------------------------------------------------------------------
.text:00000000000023F1
.text:00000000000023F1 loc_23F1:                               ; CODE XREF: main+11D↑j
.text:00000000000023F1                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000023F1                 mov     cs:ignore_failed_opens, 1 ; jumptable 00000000000020DD case 114
.text:00000000000023F8                 xor     ebx, ebx
.text:00000000000023FA                 jmp     loc_2090
.text:00000000000023FF ; ---------------------------------------------------------------------------
.text:00000000000023FF
.text:00000000000023FF loc_23FF:                               ; CODE XREF: main+11D↑j
.text:00000000000023FF                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000023FF                 lea     rsi, aOMarginInvalid ; jumptable 00000000000020DD case 111
.text:0000000000002406                 mov     edx, 5          ; category
.text:000000000000240B                 xor     edi, edi        ; domainname
.text:000000000000240D                 xor     ebx, ebx
.text:000000000000240F                 call    _dcgettext
.text:0000000000002414                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000241B                 lea     rcx, asc_BEE4+1 ; ""
.text:0000000000002422                 mov     r8, rax
.text:0000000000002425                 xor     r9d, r9d
.text:0000000000002428                 mov     edx, 7FFFFFFFh
.text:000000000000242D                 xor     esi, esi
.text:000000000000242F                 call    xdectoumax
.text:0000000000002434                 mov     cs:chars_per_margin, eax
.text:000000000000243A                 jmp     loc_2090
.text:000000000000243F ; ---------------------------------------------------------------------------
.text:000000000000243F
.text:000000000000243F loc_243F:                               ; CODE XREF: main+11D↑j
.text:000000000000243F                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:000000000000243F                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 110
.text:0000000000002446                 mov     cs:numbered_lines, 1
.text:000000000000244D                 test    rdi, rdi
.text:0000000000002450                 jz      loc_2300
.text:0000000000002456                 lea     rcx, chars_per_number
.text:000000000000245D                 lea     rdx, number_separator
.text:0000000000002464                 mov     esi, 6Eh ; 'n'
.text:0000000000002469                 xor     ebx, ebx
.text:000000000000246B                 call    getoptarg
.text:0000000000002470                 jmp     loc_2090
.text:0000000000002475 ; ---------------------------------------------------------------------------
.text:0000000000002475
.text:0000000000002475 loc_2475:                               ; CODE XREF: main+11D↑j
.text:0000000000002475                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002475                 mov     cs:parallel_files, 1 ; jumptable 00000000000020DD case 109
.text:000000000000247C                 mov     cs:storing_columns, 0
.text:0000000000002483                 xor     ebx, ebx
.text:0000000000002485                 jmp     loc_2090
.text:000000000000248A ; ---------------------------------------------------------------------------
.text:000000000000248A
.text:000000000000248A loc_248A:                               ; CODE XREF: main+11D↑j
.text:000000000000248A                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:000000000000248A                 lea     rsi, aLPageLengthInv ; jumptable 00000000000020DD case 108
.text:0000000000002491                 mov     edx, 5          ; category
.text:0000000000002496                 xor     edi, edi        ; domainname
.text:0000000000002498                 xor     ebx, ebx
.text:000000000000249A                 call    _dcgettext
.text:000000000000249F                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000024A6                 lea     rcx, asc_BEE4+1 ; ""
.text:00000000000024AD                 mov     r8, rax
.text:00000000000024B0                 xor     r9d, r9d
.text:00000000000024B3                 mov     edx, 7FFFFFFFh
.text:00000000000024B8                 mov     esi, 1
.text:00000000000024BD                 call    xdectoumax
.text:00000000000024C2                 mov     cs:lines_per_page, eax
.text:00000000000024C8                 jmp     loc_2090
.text:00000000000024CD ; ---------------------------------------------------------------------------
.text:00000000000024CD
.text:00000000000024CD loc_24CD:                               ; CODE XREF: main+11D↑j
.text:00000000000024CD                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000024CD                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 105
.text:00000000000024D4                 test    rdi, rdi
.text:00000000000024D7                 jz      short loc_24F1
.text:00000000000024D9                 lea     rcx, chars_per_output_tab
.text:00000000000024E0                 lea     rdx, output_tab_char
.text:00000000000024E7                 mov     esi, 69h ; 'i'
.text:00000000000024EC                 call    getoptarg
.text:00000000000024F1
.text:00000000000024F1 loc_24F1:                               ; CODE XREF: main+517↑j
.text:00000000000024F1                 mov     cs:tabify_output, 1
.text:00000000000024F8                 xor     ebx, ebx
.text:00000000000024FA                 jmp     loc_2090
.text:00000000000024FF ; ---------------------------------------------------------------------------
.text:00000000000024FF
.text:00000000000024FF loc_24FF:                               ; CODE XREF: main+11D↑j
.text:00000000000024FF                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000024FF                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 104
.text:0000000000002506                 xor     ebx, ebx
.text:0000000000002508                 mov     cs:custom_header, rax
.text:000000000000250F                 jmp     loc_2090
.text:0000000000002514 ; ---------------------------------------------------------------------------
.text:0000000000002514
.text:0000000000002514 loc_2514:                               ; CODE XREF: main+11D↑j
.text:0000000000002514                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002514                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 101
.text:000000000000251B                 test    rdi, rdi
.text:000000000000251E                 jz      short loc_2538
.text:0000000000002520                 lea     rcx, chars_per_input_tab
.text:0000000000002527                 lea     rdx, input_tab_char
.text:000000000000252E                 mov     esi, 65h ; 'e'
.text:0000000000002533                 call    getoptarg
.text:0000000000002538
.text:0000000000002538 loc_2538:                               ; CODE XREF: main+55E↑j
.text:0000000000002538                 mov     cs:untabify_input, 1
.text:000000000000253F                 xor     ebx, ebx
.text:0000000000002541                 jmp     loc_2090
.text:0000000000002546 ; ---------------------------------------------------------------------------
.text:0000000000002546
.text:0000000000002546 loc_2546:                               ; CODE XREF: main+11D↑j
.text:0000000000002546                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002546                 mov     cs:double_space, 1 ; jumptable 00000000000020DD case 100
.text:000000000000254D                 xor     ebx, ebx
.text:000000000000254F                 jmp     loc_2090
.text:0000000000002554 ; ---------------------------------------------------------------------------
.text:0000000000002554
.text:0000000000002554 loc_2554:                               ; CODE XREF: main+11D↑j
.text:0000000000002554                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002554                 mov     cs:use_cntrl_prefix, 1 ; jumptable 00000000000020DD case 99
.text:000000000000255B                 xor     ebx, ebx
.text:000000000000255D                 jmp     loc_2090
.text:0000000000002562 ; ---------------------------------------------------------------------------
.text:0000000000002562
.text:0000000000002562 loc_2562:                               ; CODE XREF: main+11D↑j
.text:0000000000002562                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002562                 mov     cs:balance_columns, 1 ; jumptable 00000000000020DD case 98
.text:0000000000002569                 xor     ebx, ebx
.text:000000000000256B                 jmp     loc_2090
.text:0000000000002570 ; ---------------------------------------------------------------------------
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: main+11D↑j
.text:0000000000002570                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002570                 mov     cs:print_across_flag, 1 ; jumptable 00000000000020DD case 97
.text:0000000000002577                 mov     cs:storing_columns, 0
.text:000000000000257E                 xor     ebx, ebx
.text:0000000000002580                 jmp     loc_2090
.text:0000000000002585 ; ---------------------------------------------------------------------------
.text:0000000000002585
.text:0000000000002585 loc_2585:                               ; CODE XREF: main+11D↑j
.text:0000000000002585                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002585                 lea     rsi, aWPageWidthInva_0 ; jumptable 00000000000020DD case 87
.text:000000000000258C                 mov     edx, 5          ; category
.text:0000000000002591                 xor     edi, edi        ; domainname
.text:0000000000002593                 mov     cs:truncate_lines, 1
.text:000000000000259A                 xor     ebx, ebx
.text:000000000000259C                 call    _dcgettext
.text:00000000000025A1                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000025A8                 lea     rcx, asc_BEE4+1 ; ""
.text:00000000000025AF                 mov     r8, rax
.text:00000000000025B2                 xor     r9d, r9d
.text:00000000000025B5                 mov     edx, 7FFFFFFFh
.text:00000000000025BA                 mov     esi, 1
.text:00000000000025BF                 call    xdectoumax
.text:00000000000025C4                 mov     [rsp+88h+var_5A], 0
.text:00000000000025C9                 mov     cs:chars_per_line, eax
.text:00000000000025CF                 jmp     loc_2090
.text:00000000000025D4 ; ---------------------------------------------------------------------------
.text:00000000000025D4
.text:00000000000025D4 loc_25D4:                               ; CODE XREF: main+11D↑j
.text:00000000000025D4                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000025D4                 mov     cs:extremities, 0 ; jumptable 00000000000020DD case 84
.text:00000000000025DB                 mov     cs:keep_FF, 0
.text:00000000000025E2                 xor     ebx, ebx
.text:00000000000025E4                 jmp     loc_2090
.text:00000000000025E9 ; ---------------------------------------------------------------------------
.text:00000000000025E9
.text:00000000000025E9 loc_25E9:                               ; CODE XREF: main+11D↑j
.text:00000000000025E9                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000025E9                 mov     rdi, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 83
.text:00000000000025F0                 lea     rax, asc_BEE4+1 ; ""
.text:00000000000025F7                 mov     cs:col_sep_length, 0
.text:0000000000002601                 mov     cs:use_col_separator, 1
.text:0000000000002608                 mov     [rsp+88h+var_59], 0
.text:000000000000260D                 mov     cs:col_sep_string, rax
.text:0000000000002614                 test    rdi, rdi
.text:0000000000002617                 jz      loc_2300
.text:000000000000261D                 call    separator_string
.text:0000000000002622                 xor     ebx, ebx
.text:0000000000002624                 jmp     loc_2090
.text:0000000000002629 ; ---------------------------------------------------------------------------
.text:0000000000002629
.text:0000000000002629 loc_2629:                               ; CODE XREF: main+11D↑j
.text:0000000000002629                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002629                 lea     rsi, aNNumberInvalid ; jumptable 00000000000020DD case 78
.text:0000000000002630                 mov     edx, 5          ; category
.text:0000000000002635                 xor     edi, edi        ; domainname
.text:0000000000002637                 mov     cs:skip_count, 0
.text:000000000000263E                 xor     ebx, ebx
.text:0000000000002640                 call    _dcgettext
.text:0000000000002645                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000264C                 lea     rcx, asc_BEE4+1 ; ""
.text:0000000000002653                 mov     r8, rax
.text:0000000000002656                 xor     r9d, r9d
.text:0000000000002659                 mov     edx, 7FFFFFFFh
.text:000000000000265E                 mov     rsi, 0FFFFFFFF80000000h
.text:0000000000002665                 call    xdectoumax
.text:000000000000266A                 mov     cs:start_line_num, eax
.text:0000000000002670                 jmp     loc_2090
.text:0000000000002675 ; ---------------------------------------------------------------------------
.text:0000000000002675
.text:0000000000002675 loc_2675:                               ; CODE XREF: main+11D↑j
.text:0000000000002675                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002675                 mov     cs:join_lines, 1 ; jumptable 00000000000020DD case 74
.text:000000000000267C                 xor     ebx, ebx
.text:000000000000267E                 jmp     loc_2090
.text:0000000000002683 ; ---------------------------------------------------------------------------
.text:0000000000002683
.text:0000000000002683 loc_2683:                               ; CODE XREF: main+11D↑j
.text:0000000000002683                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002683                 mov     cs:use_form_feed, 1 ; jumptable 00000000000020DD cases 70,102
.text:000000000000268A                 xor     ebx, ebx
.text:000000000000268C                 jmp     loc_2090
.text:0000000000002691 ; ---------------------------------------------------------------------------
.text:0000000000002691
.text:0000000000002691 loc_2691:                               ; CODE XREF: main+11D↑j
.text:0000000000002691                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:0000000000002691                 mov     rax, cs:optarg@@GLIBC_2_2_5 ; jumptable 00000000000020DD case 68
.text:0000000000002698                 xor     ebx, ebx
.text:000000000000269A                 mov     cs:date_format, rax
.text:00000000000026A1                 jmp     loc_2090
.text:00000000000026A6 ; ---------------------------------------------------------------------------
.text:00000000000026A6
.text:00000000000026A6 loc_26A6:                               ; CODE XREF: main+11D↑j
.text:00000000000026A6                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000026A6                 cmp     cs:first_page_number, 0 ; jumptable 00000000000020DD case 1
.text:00000000000026AE                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000026B5                 jnz     short loc_26C0
.text:00000000000026B7                 cmp     byte ptr [rax], 2Bh ; '+'
.text:00000000000026BA                 jz      loc_27BA
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: main+6F5↑j
.text:00000000000026C0                                         ; main+81C↓j
.text:00000000000026C0                 mov     edx, [rsp+88h+var_60]
.text:00000000000026C4                 mov     rsi, [rsp+88h+var_68]
.text:00000000000026C9                 xor     ebx, ebx
.text:00000000000026CB                 mov     [rsi+rdx*8], rax
.text:00000000000026CF                 lea     eax, [rdx+1]
.text:00000000000026D2                 mov     [rsp+88h+var_60], eax
.text:00000000000026D6                 jmp     loc_2090
.text:00000000000026DB ; ---------------------------------------------------------------------------
.text:00000000000026DB
.text:00000000000026DB loc_26DB:                               ; CODE XREF: main+11D↑j
.text:00000000000026DB                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:00000000000026DB                 sub     rsp, 8          ; jumptable 00000000000020DD case -131
.text:00000000000026DF                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000026E6                 mov     rcx, cs:Version
.text:00000000000026ED                 push    0
.text:00000000000026EF                 lea     r9, aRolandHuebner ; "Roland Huebner"
.text:00000000000026F6                 lea     r8, aPeteTermaat ; "Pete TerMaat"
.text:00000000000026FD                 lea     rdx, unk_BF75
.text:0000000000002704                 lea     rsi, aPr        ; "pr"
.text:000000000000270B                 xor     eax, eax
.text:000000000000270D                 call    version_etc
.text:0000000000002712                 xor     edi, edi        ; status
.text:0000000000002714                 call    _exit
.text:0000000000002719 ; ---------------------------------------------------------------------------
.text:0000000000002719
.text:0000000000002719 loc_2719:                               ; CODE XREF: main+264↑j
.text:0000000000002719                 xor     esi, esi
.text:000000000000271B                 xor     edi, edi
.text:000000000000271D                 call    print_files
.text:0000000000002722                 jmp     loc_225E
.text:0000000000002727 ; ---------------------------------------------------------------------------
.text:0000000000002727
.text:0000000000002727 loc_2727:                               ; CODE XREF: main+1E9↑j
.text:0000000000002727                 cmp     cs:use_col_separator, 1
.text:000000000000272E                 jz      loc_21D6
.text:0000000000002734                 cmp     [rsp+88h+var_59], 0
.text:0000000000002739                 jz      loc_21D6
.text:000000000000273F                 test    dil, dil
.text:0000000000002742                 jnz     short loc_2751
.text:0000000000002744                 cmp     cs:explicit_columns, 0
.text:000000000000274B                 jz      loc_21D6
.text:0000000000002751
.text:0000000000002751 loc_2751:                               ; CODE XREF: main+782↑j
.text:0000000000002751                 cmp     cs:truncate_lines, 0
.text:0000000000002758                 jnz     loc_21CF
.text:000000000000275E                 cmp     cs:col_sep_length, 0
.text:0000000000002765                 mov     cs:join_lines, 1
.text:000000000000276C                 jg      loc_21CF
.text:0000000000002772                 jmp     loc_21D6
.text:0000000000002777 ; ---------------------------------------------------------------------------
.text:0000000000002777
.text:0000000000002777 loc_2777:                               ; CODE XREF: main+415↑j
.text:0000000000002777                 mov     [rsp+88h+var_59], 1
.text:000000000000277C                 mov     [rsp+88h+var_5B], 1
.text:0000000000002781                 xor     ebx, ebx
.text:0000000000002783                 jmp     loc_2090
.text:0000000000002788 ; ---------------------------------------------------------------------------
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: main+181↑j
.text:0000000000002788                 lea     rdi, aPosixlyCorrect ; "POSIXLY_CORRECT"
.text:000000000000278F                 call    _getenv
.text:0000000000002794                 test    rax, rax
.text:0000000000002797                 jz      short loc_27E1
.text:0000000000002799                 mov     edi, 2
.text:000000000000279E                 call    hard_locale
.text:00000000000027A3                 test    al, al
.text:00000000000027A5                 lea     rdx, aBEHMY     ; "%b %e %H:%M %Y"
.text:00000000000027AC                 jnz     short loc_27E1
.text:00000000000027AE
.text:00000000000027AE loc_27AE:                               ; CODE XREF: main+828↓j
.text:00000000000027AE                 mov     cs:date_format, rdx
.text:00000000000027B5                 jmp     loc_2147
.text:00000000000027BA ; ---------------------------------------------------------------------------
.text:00000000000027BA
.text:00000000000027BA loc_27BA:                               ; CODE XREF: main+6FA↑j
.text:00000000000027BA                 lea     rdx, [rax+1]
.text:00000000000027BE                 mov     esi, 2Bh ; '+'
.text:00000000000027C3                 mov     edi, 0FFFFFFFEh
.text:00000000000027C8                 call    first_last_page
.text:00000000000027CD                 test    al, al
.text:00000000000027CF                 jnz     loc_2300
.text:00000000000027D5                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:00000000000027DC                 jmp     loc_26C0
.text:00000000000027E1 ; ---------------------------------------------------------------------------
.text:00000000000027E1
.text:00000000000027E1 loc_27E1:                               ; CODE XREF: main+7D7↑j
.text:00000000000027E1                                         ; main+7EC↑j
.text:00000000000027E1                 lea     rdx, aYMDHM     ; "%Y-%m-%d %H:%M"
.text:00000000000027E8                 jmp     short loc_27AE
.text:00000000000027EA ; ---------------------------------------------------------------------------
.text:00000000000027EA
.text:00000000000027EA loc_27EA:                               ; CODE XREF: main+2ED↑j
.text:00000000000027EA                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:00000000000027F1                 call    rpl_fclose
.text:00000000000027F6                 add     eax, 1
.text:00000000000027F9                 jnz     loc_22B3
.text:00000000000027FF                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000002806                 mov     edx, 5          ; category
.text:000000000000280B                 xor     edi, edi        ; domainname
.text:000000000000280D                 call    _dcgettext
.text:0000000000002812                 mov     rbx, rax
.text:0000000000002815                 call    ___errno_location
.text:000000000000281A                 mov     esi, [rax]      ; errnum
.text:000000000000281C                 mov     rdx, rbx        ; format
.text:000000000000281F                 mov     edi, 1          ; status
.text:0000000000002824                 xor     eax, eax
.text:0000000000002826                 call    _error
.text:000000000000282B
.text:000000000000282B loc_282B:                               ; CODE XREF: main+26D↑j
.text:000000000000282B                 mov     rsi, [rsp+88h+var_68]
.text:0000000000002830                 mov     edi, [rsp+88h+var_60]
.text:0000000000002834                 call    print_files
.text:0000000000002839                 jmp     loc_225E
.text:000000000000283E ; ---------------------------------------------------------------------------
.text:000000000000283E
.text:000000000000283E loc_283E:                               ; CODE XREF: main+1FB↑j
.text:000000000000283E                 mov     cs:join_lines, 1
.text:0000000000002845                 jmp     loc_21D6
.text:000000000000284A ; ---------------------------------------------------------------------------
.text:000000000000284A
.text:000000000000284A loc_284A:                               ; CODE XREF: main+11D↑j
.text:000000000000284A                                         ; DATA XREF: .rodata:jpt_20DD↓o
.text:000000000000284A                 xor     edi, edi        ; jumptable 00000000000020DD case -130
.text:000000000000284C                 call    usage
.text:0000000000002851 ; ---------------------------------------------------------------------------
.text:0000000000002851
.text:0000000000002851 def_20DD:                               ; CODE XREF: main+10F↑j
.text:0000000000002851                                         ; main+11D↑j
.text:0000000000002851                                         ; DATA XREF: ...
.text:0000000000002851                 mov     edi, 1          ; jumptable 00000000000020DD default case, cases -129-0,2-67,69,71-73,75-77,79-82,85,86,88-96,103,106,107,112,113,117,120-127
.text:0000000000002856                 call    usage
.text:000000000000285B ; ---------------------------------------------------------------------------
.text:000000000000285B
.text:000000000000285B loc_285B:                               ; CODE XREF: main+1D7↑j
.text:000000000000285B                 lea     rsi, aCannotSpecifyB ; "cannot specify both printing across and"...
.text:0000000000002862                 mov     edx, 5          ; category
.text:0000000000002867                 xor     edi, edi        ; domainname
.text:0000000000002869                 call    _dcgettext
.text:000000000000286E                 xor     esi, esi        ; errnum
.text:0000000000002870                 mov     rdx, rax        ; format
.text:0000000000002873                 mov     edi, 1          ; status
.text:0000000000002878                 xor     eax, eax
.text:000000000000287A                 call    _error
.text:000000000000287F
.text:000000000000287F loc_287F:                               ; CODE XREF: main+327↑j
.text:000000000000287F                 lea     rsi, aPagesFirstPage ; "'--pages=FIRST_PAGE[:LAST_PAGE]' missin"...
.text:0000000000002886                 mov     edx, 5          ; category
.text:000000000000288B                 xor     edi, edi        ; domainname
.text:000000000000288D                 call    _dcgettext
.text:0000000000002892                 xor     esi, esi        ; errnum
.text:0000000000002894                 mov     rdx, rax        ; format
.text:0000000000002897                 mov     edi, 1          ; status
.text:000000000000289C                 xor     eax, eax
.text:000000000000289E                 call    _error
.text:00000000000028A3
.text:00000000000028A3 loc_28A3:                               ; CODE XREF: main+33A↑j
.text:00000000000028A3                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:00000000000028AA                 call    quote
.text:00000000000028AF                 lea     rsi, aInvalidPageRan ; "invalid page range %s"
.text:00000000000028B6                 mov     rbx, rax
.text:00000000000028B9                 mov     edx, 5          ; category
.text:00000000000028BE                 xor     edi, edi        ; domainname
.text:00000000000028C0                 call    _dcgettext
.text:00000000000028C5                 mov     rcx, rbx
.text:00000000000028C8                 mov     rdx, rax        ; format
.text:00000000000028CB                 xor     esi, esi        ; errnum
.text:00000000000028CD                 mov     edi, 1          ; status
.text:00000000000028D2                 xor     eax, eax
.text:00000000000028D4                 call    _error
.text:00000000000028D9
.text:00000000000028D9 loc_28D9:                               ; CODE XREF: main+308↑j
.text:00000000000028D9                 call    ___stack_chk_fail
.text:00000000000028DE ; ---------------------------------------------------------------------------
.text:00000000000028DE
.text:00000000000028DE loc_28DE:                               ; CODE XREF: main+1CA↑j
.text:00000000000028DE                 lea     rsi, aCannotSpecifyN ; "cannot specify number of columns when p"...
.text:00000000000028E5                 mov     edx, 5          ; category
.text:00000000000028EA                 xor     edi, edi        ; domainname
.text:00000000000028EC                 call    _dcgettext
.text:00000000000028F1                 xor     esi, esi        ; errnum
.text:00000000000028F3                 mov     rdx, rax        ; format
.text:00000000000028F6                 mov     edi, 1          ; status
.text:00000000000028FB                 xor     eax, eax
.text:00000000000028FD                 call    _error
.text:00000000000028FD ; } // starts at 1FC0
.text:0000000000002902                 db      2Eh
.text:0000000000002902                 nop     word ptr [rax+rax+00000000h]
.text:000000000000290C                 nop     dword ptr [rax+00h]
.text:000000000000290C main            endp ; sp-analysis failed
.text:000000000000290C
.text:0000000000002910
.text:0000000000002910 ; =============== S U B R O U T I N E =======================================
.text:0000000000002910
.text:0000000000002910 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002910
.text:0000000000002910 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002910                 public start
.text:0000000000002910 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002910 ; __unwind {
.text:0000000000002910                 xor     ebp, ebp
.text:0000000000002912                 mov     r9, rdx         ; rtld_fini
.text:0000000000002915                 pop     rsi             ; argc
.text:0000000000002916                 mov     rdx, rsp        ; ubp_av
.text:0000000000002919                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000291D                 push    rax
.text:000000000000291E                 push    rsp             ; stack_end
.text:000000000000291F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002926                 lea     rcx, __libc_csu_init ; init
.text:000000000000292D                 lea     rdi, main       ; main
.text:0000000000002934                 call    cs:__libc_start_main_ptr
.text:000000000000293A                 hlt
.text:000000000000293A ; } // starts at 2910
.text:000000000000293A start           endp
.text:000000000000293A
.text:000000000000293A ; ---------------------------------------------------------------------------
.text:000000000000293B                 align 20h
.text:0000000000002940
.text:0000000000002940 ; =============== S U B R O U T I N E =======================================
.text:0000000000002940
.text:0000000000002940 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002940
.text:0000000000002940 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_29F3↓p
.text:0000000000002940                 lea     rdi, __bss_start
.text:0000000000002947                 push    rbp
.text:0000000000002948                 lea     rax, __bss_start
.text:000000000000294F                 cmp     rax, rdi
.text:0000000000002952                 mov     rbp, rsp
.text:0000000000002955                 jz      short loc_2970
.text:0000000000002957                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000295E                 test    rax, rax
.text:0000000000002961                 jz      short loc_2970
.text:0000000000002963                 pop     rbp
.text:0000000000002964                 jmp     rax
.text:0000000000002964 ; ---------------------------------------------------------------------------
.text:0000000000002966                 align 10h
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002970                                         ; deregister_tm_clones+21↑j
.text:0000000000002970                 pop     rbp
.text:0000000000002971                 retn
.text:0000000000002971 deregister_tm_clones endp
.text:0000000000002971
.text:0000000000002971 ; ---------------------------------------------------------------------------
.text:0000000000002972                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002980
.text:0000000000002980 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002980                 lea     rdi, __bss_start
.text:0000000000002987                 lea     rsi, __bss_start
.text:000000000000298E                 push    rbp
.text:000000000000298F                 sub     rsi, rdi
.text:0000000000002992                 mov     rbp, rsp
.text:0000000000002995                 sar     rsi, 3
.text:0000000000002999                 mov     rax, rsi
.text:000000000000299C                 shr     rax, 3Fh
.text:00000000000029A0                 add     rsi, rax
.text:00000000000029A3                 sar     rsi, 1
.text:00000000000029A6                 jz      short loc_29C0
.text:00000000000029A8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000029AF                 test    rax, rax
.text:00000000000029B2                 jz      short loc_29C0
.text:00000000000029B4                 pop     rbp
.text:00000000000029B5                 jmp     rax
.text:00000000000029B5 ; ---------------------------------------------------------------------------
.text:00000000000029B7                 align 20h
.text:00000000000029C0
.text:00000000000029C0 loc_29C0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000029C0                                         ; register_tm_clones+32↑j
.text:00000000000029C0                 pop     rbp
.text:00000000000029C1                 retn
.text:00000000000029C1 register_tm_clones endp
.text:00000000000029C1
.text:00000000000029C1 ; ---------------------------------------------------------------------------
.text:00000000000029C2                 align 10h
.text:00000000000029D0
.text:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000029D0
.text:00000000000029D0 ; Attributes: info_from_lumina
.text:00000000000029D0
.text:00000000000029D0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000029D0                 cmp     cs:completed_7697, 0
.text:00000000000029D7                 jnz     short locret_2A08
.text:00000000000029D9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000029E1                 push    rbp
.text:00000000000029E2                 mov     rbp, rsp
.text:00000000000029E5                 jz      short loc_29F3
.text:00000000000029E7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000029EE                 call    __cxa_finalize
.text:00000000000029F3
.text:00000000000029F3 loc_29F3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000029F3                 call    deregister_tm_clones
.text:00000000000029F8                 mov     cs:completed_7697, 1
.text:00000000000029FF                 pop     rbp
.text:0000000000002A00                 retn
.text:0000000000002A00 ; ---------------------------------------------------------------------------
.text:0000000000002A01                 align 8
.text:0000000000002A08
.text:0000000000002A08 locret_2A08:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002A08                 rep retn
.text:0000000000002A08 __do_global_dtors_aux endp
.text:0000000000002A08
.text:0000000000002A08 ; ---------------------------------------------------------------------------
.text:0000000000002A0A                 align 10h
.text:0000000000002A10
.text:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A10
.text:0000000000002A10 ; Attributes: bp-based frame
.text:0000000000002A10
.text:0000000000002A10 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002A10                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002A10                 push    rbp
.text:0000000000002A11                 mov     rbp, rsp
.text:0000000000002A14                 pop     rbp
.text:0000000000002A15                 jmp     register_tm_clones
.text:0000000000002A15 frame_dummy     endp
.text:0000000000002A15
.text:0000000000002A15 ; ---------------------------------------------------------------------------
.text:0000000000002A1A                 align 20h
.text:0000000000002A20
.text:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A20
.text:0000000000002A20
.text:0000000000002A20 cols_ready_to_print proc near           ; CODE XREF: print_files:loc_487B↓p
.text:0000000000002A20                                         ; print_files:loc_48C0↓p ...
.text:0000000000002A20 ; __unwind {
.text:0000000000002A20                 mov     eax, cs:columns
.text:0000000000002A26                 mov     rcx, cs:column_vector
.text:0000000000002A2D                 test    eax, eax
.text:0000000000002A2F                 jz      short locret_2A76
.text:0000000000002A31                 movzx   esi, cs:storing_columns
.text:0000000000002A38                 sub     eax, 1
.text:0000000000002A3B                 lea     rdx, [rcx+10h]
.text:0000000000002A3F                 shl     rax, 6
.text:0000000000002A43                 lea     rcx, [rcx+rax+50h]
.text:0000000000002A48                 xor     eax, eax
.text:0000000000002A4A                 nop     word ptr [rax+rax+00h]
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: cols_ready_to_print+54↓j
.text:0000000000002A50                 cmp     dword ptr [rdx], 1
.text:0000000000002A53                 jbe     short loc_2A6A
.text:0000000000002A55                 test    sil, sil
.text:0000000000002A58                 jz      short loc_2A6D
.text:0000000000002A5A                 mov     r8d, [rdx+1Ch]
.text:0000000000002A5E                 test    r8d, r8d
.text:0000000000002A61                 jle     short loc_2A6D
.text:0000000000002A63                 mov     edi, [rdx+20h]
.text:0000000000002A66                 test    edi, edi
.text:0000000000002A68                 jle     short loc_2A6D
.text:0000000000002A6A
.text:0000000000002A6A loc_2A6A:                               ; CODE XREF: cols_ready_to_print+33↑j
.text:0000000000002A6A                 add     eax, 1
.text:0000000000002A6D
.text:0000000000002A6D loc_2A6D:                               ; CODE XREF: cols_ready_to_print+38↑j
.text:0000000000002A6D                                         ; cols_ready_to_print+41↑j ...
.text:0000000000002A6D                 add     rdx, 40h ; '@'
.text:0000000000002A71                 cmp     rdx, rcx
.text:0000000000002A74                 jnz     short loc_2A50
.text:0000000000002A76
.text:0000000000002A76 locret_2A76:                            ; CODE XREF: cols_ready_to_print+F↑j
.text:0000000000002A76                 rep retn
.text:0000000000002A76 ; } // starts at 2A20
.text:0000000000002A76 cols_ready_to_print endp
.text:0000000000002A76
.text:0000000000002A76 ; ---------------------------------------------------------------------------
.text:0000000000002A78                 align 20h
.text:0000000000002A80
.text:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A80
.text:0000000000002A80
.text:0000000000002A80 reset_status    proc near               ; CODE XREF: print_files+817↓p
.text:0000000000002A80                                         ; print_files:loc_4F7C↓p
.text:0000000000002A80 ; __unwind {
.text:0000000000002A80                 mov     edx, cs:columns
.text:0000000000002A86                 mov     rdi, cs:column_vector
.text:0000000000002A8D                 test    edx, edx
.text:0000000000002A8F                 jz      short loc_2AD1
.text:0000000000002A91                 sub     edx, 1
.text:0000000000002A94                 mov     ecx, cs:files_ready_to_read
.text:0000000000002A9A                 lea     rax, [rdi+10h]
.text:0000000000002A9E                 shl     rdx, 6
.text:0000000000002AA2                 xor     esi, esi
.text:0000000000002AA4                 lea     rdx, [rdi+rdx+50h]
.text:0000000000002AA9                 nop     dword ptr [rax+00000000h]
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: reset_status+4A↓j
.text:0000000000002AB0                 cmp     dword ptr [rax], 2
.text:0000000000002AB3                 jnz     short loc_2AC3
.text:0000000000002AB5                 mov     dword ptr [rax], 0
.text:0000000000002ABB                 add     ecx, 1
.text:0000000000002ABE                 mov     esi, 1
.text:0000000000002AC3
.text:0000000000002AC3 loc_2AC3:                               ; CODE XREF: reset_status+33↑j
.text:0000000000002AC3                 add     rax, 40h ; '@'
.text:0000000000002AC7                 cmp     rax, rdx
.text:0000000000002ACA                 jnz     short loc_2AB0
.text:0000000000002ACC                 test    sil, sil
.text:0000000000002ACF                 jnz     short loc_2AEB
.text:0000000000002AD1
.text:0000000000002AD1 loc_2AD1:                               ; CODE XREF: reset_status+F↑j
.text:0000000000002AD1                                         ; reset_status+71↓j
.text:0000000000002AD1                 cmp     cs:storing_columns, 0
.text:0000000000002AD8                 jz      short locret_2AE9
.text:0000000000002ADA                 xor     eax, eax
.text:0000000000002ADC                 cmp     dword ptr [rdi+10h], 3
.text:0000000000002AE0                 setnz   al
.text:0000000000002AE3                 mov     cs:files_ready_to_read, eax
.text:0000000000002AE9
.text:0000000000002AE9 locret_2AE9:                            ; CODE XREF: reset_status+58↑j
.text:0000000000002AE9                 rep retn
.text:0000000000002AEB ; ---------------------------------------------------------------------------
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: reset_status+4F↑j
.text:0000000000002AEB                 mov     cs:files_ready_to_read, ecx
.text:0000000000002AF1                 jmp     short loc_2AD1
.text:0000000000002AF1 ; } // starts at 2A80
.text:0000000000002AF1 reset_status    endp
.text:0000000000002AF1
.text:0000000000002AF1 ; ---------------------------------------------------------------------------
.text:0000000000002AF3                 align 20h
.text:0000000000002B00
.text:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B00
.text:0000000000002B00
.text:0000000000002B00 store_char      proc near               ; DATA XREF: read_line:loc_3DBB↓o
.text:0000000000002B00                                         ; print_files+440↓o ...
.text:0000000000002B00 ; __unwind {
.text:0000000000002B00                 mov     ecx, cs:buff_current
.text:0000000000002B06                 push    rbx
.text:0000000000002B07                 mov     ebx, edi
.text:0000000000002B09                 cmp     rcx, cs:buff_allocated
.text:0000000000002B10                 mov     rax, cs:buff
.text:0000000000002B17                 mov     rdx, rcx
.text:0000000000002B1A                 jb      short loc_2B3B
.text:0000000000002B1C                 lea     rsi, buff_allocated
.text:0000000000002B23                 mov     rdi, rax
.text:0000000000002B26                 call    x2realloc
.text:0000000000002B2B                 mov     ecx, cs:buff_current
.text:0000000000002B31                 mov     cs:buff, rax
.text:0000000000002B38                 mov     rdx, rcx
.text:0000000000002B3B
.text:0000000000002B3B loc_2B3B:                               ; CODE XREF: store_char+1A↑j
.text:0000000000002B3B                 add     edx, 1
.text:0000000000002B3E                 mov     [rax+rcx], bl
.text:0000000000002B41                 mov     cs:buff_current, edx
.text:0000000000002B47                 pop     rbx
.text:0000000000002B48                 retn
.text:0000000000002B48 ; } // starts at 2B00
.text:0000000000002B48 store_char      endp
.text:0000000000002B48
.text:0000000000002B48 ; ---------------------------------------------------------------------------
.text:0000000000002B49                 align 10h
.text:0000000000002B50
.text:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B50
.text:0000000000002B50
.text:0000000000002B50 integer_overflow proc near              ; CODE XREF: separator_string:loc_2CD0↓p
.text:0000000000002B50                                         ; print_files:loc_5236↓p
.text:0000000000002B50 ; __unwind {
.text:0000000000002B50                 lea     rsi, aIntegerOverflo ; "integer overflow"
.text:0000000000002B57                 mov     edx, 5          ; category
.text:0000000000002B5C                 xor     edi, edi        ; domainname
.text:0000000000002B5E                 sub     rsp, 8
.text:0000000000002B62                 call    _dcgettext
.text:0000000000002B67                 xor     esi, esi        ; errnum
.text:0000000000002B69                 mov     rdx, rax        ; format
.text:0000000000002B6C                 mov     edi, 1          ; status
.text:0000000000002B71                 xor     eax, eax
.text:0000000000002B73                 call    _error
.text:0000000000002B73 ; } // starts at 2B50
.text:0000000000002B78                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002B78 integer_overflow endp ; sp-analysis failed
.text:0000000000002B78
.text:0000000000002B80
.text:0000000000002B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B80
.text:0000000000002B80
.text:0000000000002B80 first_last_page proc near               ; CODE XREF: main+333↑p
.text:0000000000002B80                                         ; main+808↑p
.text:0000000000002B80
.text:0000000000002B80 var_48          = qword ptr -48h
.text:0000000000002B80 var_40          = qword ptr -40h
.text:0000000000002B80 var_38          = qword ptr -38h
.text:0000000000002B80 var_30          = qword ptr -30h
.text:0000000000002B80
.text:0000000000002B80 ; __unwind {
.text:0000000000002B80                 push    r14
.text:0000000000002B82                 push    r13
.text:0000000000002B84                 lea     r8, asc_BEE4+1  ; ""
.text:0000000000002B8B                 push    r12
.text:0000000000002B8D                 push    rbp
.text:0000000000002B8E                 mov     r14d, edi
.text:0000000000002B91                 push    rbx
.text:0000000000002B92                 mov     rbx, rdx
.text:0000000000002B95                 mov     r13d, esi
.text:0000000000002B98                 mov     edx, 0Ah
.text:0000000000002B9D                 mov     rdi, rbx        ; nptr
.text:0000000000002BA0                 sub     rsp, 20h
.text:0000000000002BA4                 lea     rcx, [rsp+48h+var_40]
.text:0000000000002BA9                 mov     r12, rsp
.text:0000000000002BAC                 mov     [rsp+48h+var_38], 0FFFFFFFFFFFFFFFFh
.text:0000000000002BB5                 mov     rsi, r12
.text:0000000000002BB8                 mov     rax, fs:28h
.text:0000000000002BC1                 mov     [rsp+48h+var_30], rax
.text:0000000000002BC6                 xor     eax, eax
.text:0000000000002BC8                 call    xstrtoumax
.text:0000000000002BCD                 test    eax, 0FFFFFFFDh
.text:0000000000002BD2                 jnz     loc_2C88
.text:0000000000002BD8                 mov     rdi, [rsp+48h+var_48]
.text:0000000000002BDC                 cmp     rdi, rbx
.text:0000000000002BDF                 jz      short loc_2C58
.text:0000000000002BE1                 cmp     [rsp+48h+var_40], 0
.text:0000000000002BE7                 jz      short loc_2C58
.text:0000000000002BE9                 movzx   eax, byte ptr [rdi]
.text:0000000000002BEC                 cmp     al, 3Ah ; ':'
.text:0000000000002BEE                 jz      short loc_2C18
.text:0000000000002BF0
.text:0000000000002BF0 loc_2BF0:                               ; CODE XREF: first_last_page+103↓j
.text:0000000000002BF0                 test    al, al
.text:0000000000002BF2                 jnz     short loc_2C58
.text:0000000000002BF4                 mov     rax, [rsp+48h+var_40]
.text:0000000000002BF9                 mov     cs:first_page_number, rax
.text:0000000000002C00                 mov     rax, [rsp+48h+var_38]
.text:0000000000002C05                 mov     cs:last_page_number, rax
.text:0000000000002C0C                 mov     eax, 1
.text:0000000000002C11                 jmp     short loc_2C5A
.text:0000000000002C11 ; ---------------------------------------------------------------------------
.text:0000000000002C13                 align 8
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: first_last_page+6E↑j
.text:0000000000002C18                 lea     rbp, [rdi+1]
.text:0000000000002C1C                 lea     rcx, [rsp+48h+var_38]
.text:0000000000002C21                 lea     r8, asc_BEE4+1  ; ""
.text:0000000000002C28                 mov     edx, 0Ah
.text:0000000000002C2D                 mov     rsi, r12
.text:0000000000002C30                 mov     rdi, rbp        ; nptr
.text:0000000000002C33                 call    xstrtoumax
.text:0000000000002C38                 test    eax, eax
.text:0000000000002C3A                 jnz     short loc_2C88
.text:0000000000002C3C                 mov     rax, [rsp+48h+var_48]
.text:0000000000002C40                 cmp     rax, rbp
.text:0000000000002C43                 jz      short loc_2C58
.text:0000000000002C45                 mov     rdx, [rsp+48h+var_40]
.text:0000000000002C4A                 cmp     [rsp+48h+var_38], rdx
.text:0000000000002C4F                 jnb     short loc_2C80
.text:0000000000002C51                 nop     dword ptr [rax+00000000h]
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: first_last_page+5F↑j
.text:0000000000002C58                                         ; first_last_page+67↑j ...
.text:0000000000002C58                 xor     eax, eax
.text:0000000000002C5A
.text:0000000000002C5A loc_2C5A:                               ; CODE XREF: first_last_page+91↑j
.text:0000000000002C5A                 mov     rsi, [rsp+48h+var_30]
.text:0000000000002C5F                 xor     rsi, fs:28h
.text:0000000000002C68                 jnz     short loc_2CA0
.text:0000000000002C6A                 add     rsp, 20h
.text:0000000000002C6E                 pop     rbx
.text:0000000000002C6F                 pop     rbp
.text:0000000000002C70                 pop     r12
.text:0000000000002C72                 pop     r13
.text:0000000000002C74                 pop     r14
.text:0000000000002C76                 retn
.text:0000000000002C76 ; ---------------------------------------------------------------------------
.text:0000000000002C77                 align 20h
.text:0000000000002C80
.text:0000000000002C80 loc_2C80:                               ; CODE XREF: first_last_page+CF↑j
.text:0000000000002C80                 movzx   eax, byte ptr [rax]
.text:0000000000002C83                 jmp     loc_2BF0
.text:0000000000002C88 ; ---------------------------------------------------------------------------
.text:0000000000002C88
.text:0000000000002C88 loc_2C88:                               ; CODE XREF: first_last_page+52↑j
.text:0000000000002C88                                         ; first_last_page+BA↑j
.text:0000000000002C88                 lea     rcx, long_options
.text:0000000000002C8F                 movsx   edx, r13b
.text:0000000000002C93                 mov     r8, rbx
.text:0000000000002C96                 mov     esi, r14d
.text:0000000000002C99                 mov     edi, eax
.text:0000000000002C9B                 call    xstrtol_fatal
.text:0000000000002CA0 ; ---------------------------------------------------------------------------
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: first_last_page+E8↑j
.text:0000000000002CA0                 call    ___stack_chk_fail
.text:0000000000002CA0 ; } // starts at 2B80
.text:0000000000002CA0 first_last_page endp
.text:0000000000002CA0
.text:0000000000002CA0 ; ---------------------------------------------------------------------------
.text:0000000000002CA5                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CB0
.text:0000000000002CB0
.text:0000000000002CB0 separator_string proc near              ; CODE XREF: main+41B↑p
.text:0000000000002CB0                                         ; main+65D↑p
.text:0000000000002CB0 ; __unwind {
.text:0000000000002CB0                 push    rbx
.text:0000000000002CB1                 mov     rbx, rdi
.text:0000000000002CB4                 call    _strlen
.text:0000000000002CB9                 cmp     rax, 7FFFFFFFh
.text:0000000000002CBF                 ja      short loc_2CD0
.text:0000000000002CC1                 mov     cs:col_sep_string, rbx
.text:0000000000002CC8                 mov     cs:col_sep_length, eax
.text:0000000000002CCE                 pop     rbx
.text:0000000000002CCF                 retn
.text:0000000000002CD0 ; ---------------------------------------------------------------------------
.text:0000000000002CD0
.text:0000000000002CD0 loc_2CD0:                               ; CODE XREF: separator_string+F↑j
.text:0000000000002CD0                 call    integer_overflow
.text:0000000000002CD0 ; } // starts at 2CB0
.text:0000000000002CD5                 nop
.text:0000000000002CD6                 db      2Eh
.text:0000000000002CD6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002CD6 separator_string endp ; sp-analysis failed
.text:0000000000002CD6
.text:0000000000002CE0
.text:0000000000002CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002CE0
.text:0000000000002CE0
.text:0000000000002CE0 parse_column_count proc near            ; CODE XREF: main+16C↑p
.text:0000000000002CE0                                         ; main+350↑p
.text:0000000000002CE0 ; __unwind {
.text:0000000000002CE0                 push    rbx
.text:0000000000002CE1                 lea     rsi, aInvalidNumberO ; "invalid number of columns"
.text:0000000000002CE8                 mov     rbx, rdi
.text:0000000000002CEB                 mov     edx, 5          ; category
.text:0000000000002CF0                 xor     edi, edi        ; domainname
.text:0000000000002CF2                 call    _dcgettext
.text:0000000000002CF7                 lea     rcx, asc_BEE4+1 ; ""
.text:0000000000002CFE                 mov     rdi, rbx
.text:0000000000002D01                 mov     r8, rax
.text:0000000000002D04                 xor     r9d, r9d
.text:0000000000002D07                 mov     edx, 7FFFFFFFh
.text:0000000000002D0C                 mov     esi, 1
.text:0000000000002D11                 call    xdectoumax
.text:0000000000002D16                 mov     cs:explicit_columns, 1
.text:0000000000002D1D                 mov     cs:columns, eax
.text:0000000000002D23                 pop     rbx
.text:0000000000002D24                 retn
.text:0000000000002D24 ; } // starts at 2CE0
.text:0000000000002D24 parse_column_count endp
.text:0000000000002D24
.text:0000000000002D24 ; ---------------------------------------------------------------------------
.text:0000000000002D25                 align 10h
.text:0000000000002D30
.text:0000000000002D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D30
.text:0000000000002D30
.text:0000000000002D30 init_header     proc near               ; CODE XREF: print_files+322↓p
.text:0000000000002D30                                         ; print_files+CF0↓p ...
.text:0000000000002D30
.text:0000000000002D30 var_138         = xmmword ptr -138h
.text:0000000000002D30 var_128         = byte ptr -128h
.text:0000000000002D30 stat_buf        = stat ptr -0E8h
.text:0000000000002D30 var_58          = byte ptr -58h
.text:0000000000002D30 var_40          = qword ptr -40h
.text:0000000000002D30
.text:0000000000002D30 ; __unwind {
.text:0000000000002D30                 push    r15
.text:0000000000002D32                 push    r14
.text:0000000000002D34                 mov     ecx, 2
.text:0000000000002D39                 push    r13
.text:0000000000002D3B                 push    r12
.text:0000000000002D3D                 mov     r12d, esi
.text:0000000000002D40                 push    rbp
.text:0000000000002D41                 push    rbx
.text:0000000000002D42                 mov     rbx, rdi
.text:0000000000002D45                 lea     rdi, asc_E548+1 ; "-"
.text:0000000000002D4C                 mov     rsi, rbx
.text:0000000000002D4F                 sub     rsp, 108h
.text:0000000000002D56                 mov     rax, fs:28h
.text:0000000000002D5F                 mov     [rsp+138h+var_40], rax
.text:0000000000002D67                 xor     eax, eax
.text:0000000000002D69                 repe cmpsb
.text:0000000000002D6B                 setnbe  al
.text:0000000000002D6E                 sbb     al, 0
.text:0000000000002D70                 test    al, al
.text:0000000000002D72                 jz      loc_2E98
.text:0000000000002D78                 test    r12d, r12d
.text:0000000000002D7B                 jns     loc_2EC0
.text:0000000000002D81
.text:0000000000002D81 loc_2D81:                               ; CODE XREF: init_header+1A4↓j
.text:0000000000002D81                 cmp     cs:timespec_7349.tv_sec, 0
.text:0000000000002D89                 jz      loc_2EAC
.text:0000000000002D8F
.text:0000000000002D8F loc_2D8F:                               ; CODE XREF: init_header+176↓j
.text:0000000000002D8F                                         ; init_header+188↓j
.text:0000000000002D8F                 movdqa  xmm0, xmmword ptr cs:timespec_7349.tv_sec
.text:0000000000002D97                 movaps  [rsp+138h+var_138], xmm0
.text:0000000000002D9B                 mov     r15, qword ptr [rsp+138h+var_138+8]
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: init_header+1C3↓j
.text:0000000000002DA0                 lea     r14, [rsp+138h+var_128]
.text:0000000000002DA5                 mov     rsi, rsp
.text:0000000000002DA8                 mov     rdi, cs:localtz
.text:0000000000002DAF                 mov     rdx, r14
.text:0000000000002DB2                 call    localtime_rz
.text:0000000000002DB7                 test    rax, rax
.text:0000000000002DBA                 jz      loc_2F00
.text:0000000000002DC0                 mov     r8, cs:localtz
.text:0000000000002DC7                 mov     rdx, cs:date_format
.text:0000000000002DCE                 mov     r9d, r15d
.text:0000000000002DD1                 mov     rcx, r14
.text:0000000000002DD4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000002DDB                 xor     edi, edi
.text:0000000000002DDD                 call    nstrftime
.text:0000000000002DE2                 lea     r13, [rax+1]
.text:0000000000002DE6                 mov     rdi, r13
.text:0000000000002DE9                 call    xmalloc
.text:0000000000002DEE                 mov     r8, cs:localtz
.text:0000000000002DF5                 mov     rdx, cs:date_format
.text:0000000000002DFC                 mov     r9d, r15d
.text:0000000000002DFF                 mov     rcx, r14
.text:0000000000002E02                 mov     rsi, r13
.text:0000000000002E05                 mov     rdi, rax
.text:0000000000002E08                 mov     rbp, rax
.text:0000000000002E0B                 call    nstrftime
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: init_header+20F↓j
.text:0000000000002E10                 mov     rdi, cs:date_text ; ptr
.text:0000000000002E17                 call    _free
.text:0000000000002E1C                 mov     rax, cs:custom_header
.text:0000000000002E23                 mov     cs:date_text, rbp
.text:0000000000002E2A                 test    rax, rax
.text:0000000000002E2D                 jnz     short loc_2E3D
.text:0000000000002E2F                 lea     rax, asc_BEE4+1 ; ""
.text:0000000000002E36                 test    r12d, r12d
.text:0000000000002E39                 cmovns  rax, rbx
.text:0000000000002E3D
.text:0000000000002E3D loc_2E3D:                               ; CODE XREF: init_header+FD↑j
.text:0000000000002E3D                 xor     esi, esi
.text:0000000000002E3F                 mov     ebx, cs:chars_per_line
.text:0000000000002E45                 mov     rdi, rbp
.text:0000000000002E48                 mov     cs:file_text, rax
.text:0000000000002E4F                 call    gnu_mbswidth
.text:0000000000002E54                 mov     rdi, cs:file_text
.text:0000000000002E5B                 sub     ebx, eax
.text:0000000000002E5D                 xor     esi, esi
.text:0000000000002E5F                 call    gnu_mbswidth
.text:0000000000002E64                 sub     ebx, eax
.text:0000000000002E66                 mov     rax, [rsp+138h+var_40]
.text:0000000000002E6E                 xor     rax, fs:28h
.text:0000000000002E77                 mov     cs:header_width_available, ebx
.text:0000000000002E7D                 jnz     loc_2F44
.text:0000000000002E83                 add     rsp, 108h
.text:0000000000002E8A                 pop     rbx
.text:0000000000002E8B                 pop     rbp
.text:0000000000002E8C                 pop     r12
.text:0000000000002E8E                 pop     r13
.text:0000000000002E90                 pop     r14
.text:0000000000002E92                 pop     r15
.text:0000000000002E94                 retn
.text:0000000000002E94 ; ---------------------------------------------------------------------------
.text:0000000000002E95                 align 8
.text:0000000000002E98
.text:0000000000002E98 loc_2E98:                               ; CODE XREF: init_header+42↑j
.text:0000000000002E98                 cmp     cs:timespec_7349.tv_sec, 0
.text:0000000000002EA0                 mov     r12d, 0FFFFFFFFh
.text:0000000000002EA6                 jnz     loc_2D8F
.text:0000000000002EAC
.text:0000000000002EAC loc_2EAC:                               ; CODE XREF: init_header+59↑j
.text:0000000000002EAC                 lea     rdi, timespec_7349 ; tp
.text:0000000000002EB3                 call    gettime
.text:0000000000002EB8                 jmp     loc_2D8F
.text:0000000000002EB8 ; ---------------------------------------------------------------------------
.text:0000000000002EBD                 align 20h
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: init_header+4B↑j
.text:0000000000002EC0                 lea     rdx, [rsp+138h+stat_buf] ; stat_buf
.text:0000000000002EC5                 mov     esi, r12d       ; fildes
.text:0000000000002EC8                 mov     edi, 1          ; ver
.text:0000000000002ECD                 call    ___fxstat
.text:0000000000002ED2                 test    eax, eax
.text:0000000000002ED4                 jnz     loc_2D81
.text:0000000000002EDA                 mov     r15, [rsp+138h+stat_buf.st_mtim.tv_nsec]
.text:0000000000002EE2                 mov     rax, [rsp+138h+stat_buf.st_mtim.tv_sec]
.text:0000000000002EEA                 mov     qword ptr [rsp+138h+var_138+8], r15
.text:0000000000002EEF                 mov     qword ptr [rsp+138h+var_138], rax
.text:0000000000002EF3                 jmp     loc_2DA0
.text:0000000000002EF3 ; ---------------------------------------------------------------------------
.text:0000000000002EF8                 align 20h
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: init_header+8A↑j
.text:0000000000002F00                 mov     edi, 21h ; '!'
.text:0000000000002F05                 call    xmalloc
.text:0000000000002F0A                 mov     rdi, qword ptr [rsp+138h+var_138]
.text:0000000000002F0E                 lea     rsi, [rsp+138h+var_58]
.text:0000000000002F16                 mov     rbp, rax
.text:0000000000002F19                 call    imaxtostr
.text:0000000000002F1E                 lea     rcx, aS09d      ; "%s.%09d"
.text:0000000000002F25                 mov     r8, rax
.text:0000000000002F28                 mov     r9d, r15d
.text:0000000000002F2B                 mov     edx, 21h ; '!'
.text:0000000000002F30                 mov     esi, 1
.text:0000000000002F35                 mov     rdi, rbp
.text:0000000000002F38                 xor     eax, eax
.text:0000000000002F3A                 call    ___sprintf_chk
.text:0000000000002F3F                 jmp     loc_2E10
.text:0000000000002F44 ; ---------------------------------------------------------------------------
.text:0000000000002F44
.text:0000000000002F44 loc_2F44:                               ; CODE XREF: init_header+14D↑j
.text:0000000000002F44                 call    ___stack_chk_fail
.text:0000000000002F44 ; } // starts at 2D30
.text:0000000000002F44 init_header     endp
.text:0000000000002F44
.text:0000000000002F44 ; ---------------------------------------------------------------------------
.text:0000000000002F49                 align 10h
.text:0000000000002F50
.text:0000000000002F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002F50
.text:0000000000002F50
.text:0000000000002F50 pad_across_to   proc near               ; CODE XREF: print_header+2C↓p
.text:0000000000002F50                                         ; print_stored+15A↓p ...
.text:0000000000002F50 ; __unwind {
.text:0000000000002F50                 push    rbp
.text:0000000000002F51                 push    rbx
.text:0000000000002F52                 mov     ebp, edi
.text:0000000000002F54                 sub     rsp, 8
.text:0000000000002F58                 cmp     cs:tabify_output, 0
.text:0000000000002F5F                 mov     ebx, cs:output_position
.text:0000000000002F65                 jnz     short loc_2FA0
.text:0000000000002F67
.text:0000000000002F67 loc_2F67:                               ; CODE XREF: pad_across_to+6A↓j
.text:0000000000002F67                 add     ebx, 1
.text:0000000000002F6A                 cmp     ebx, ebp
.text:0000000000002F6C                 jg      short loc_2F91
.text:0000000000002F6E
.text:0000000000002F6E loc_2F6E:                               ; CODE XREF: pad_across_to+3F↓j
.text:0000000000002F6E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002F75                 mov     rax, [rdi+28h]
.text:0000000000002F79                 cmp     rax, [rdi+30h]
.text:0000000000002F7D                 jnb     short loc_2FB0
.text:0000000000002F7F                 lea     rdx, [rax+1]
.text:0000000000002F83                 add     ebx, 1
.text:0000000000002F86                 cmp     ebx, ebp
.text:0000000000002F88                 mov     [rdi+28h], rdx
.text:0000000000002F8C                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000002F8F                 jle     short loc_2F6E
.text:0000000000002F91
.text:0000000000002F91 loc_2F91:                               ; CODE XREF: pad_across_to+1C↑j
.text:0000000000002F91                 mov     cs:output_position, ebp
.text:0000000000002F97                 add     rsp, 8
.text:0000000000002F9B                 pop     rbx
.text:0000000000002F9C                 pop     rbp
.text:0000000000002F9D                 retn
.text:0000000000002F9D ; ---------------------------------------------------------------------------
.text:0000000000002F9E                 align 20h
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: pad_across_to+15↑j
.text:0000000000002FA0                 sub     ebp, ebx
.text:0000000000002FA2                 mov     cs:spaces_not_printed, ebp
.text:0000000000002FA8                 add     rsp, 8
.text:0000000000002FAC                 pop     rbx
.text:0000000000002FAD                 pop     rbp
.text:0000000000002FAE                 retn
.text:0000000000002FAE ; ---------------------------------------------------------------------------
.text:0000000000002FAF                 align 10h
.text:0000000000002FB0
.text:0000000000002FB0 loc_2FB0:                               ; CODE XREF: pad_across_to+2D↑j
.text:0000000000002FB0                 mov     esi, 20h ; ' '  ; int
.text:0000000000002FB5                 call    ___overflow
.text:0000000000002FBA                 jmp     short loc_2F67
.text:0000000000002FBA ; } // starts at 2F50
.text:0000000000002FBA pad_across_to   endp
.text:0000000000002FBA
.text:0000000000002FBA ; ---------------------------------------------------------------------------
.text:0000000000002FBC                 align 20h
.text:0000000000002FC0
.text:0000000000002FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002FC0
.text:0000000000002FC0
.text:0000000000002FC0 print_white_space proc near             ; CODE XREF: print_sep_string+56↓p
.text:0000000000002FC0                                         ; print_sep_string+A8↓p ...
.text:0000000000002FC0 ; __unwind {
.text:0000000000002FC0                 push    r12
.text:0000000000002FC2                 mov     r12d, cs:spaces_not_printed
.text:0000000000002FC9                 push    rbp
.text:0000000000002FCA                 mov     ebp, cs:output_position
.text:0000000000002FD0                 push    rbx
.text:0000000000002FD1                 add     r12d, ebp
.text:0000000000002FD4                 mov     eax, r12d
.text:0000000000002FD7                 sub     eax, ebp
.text:0000000000002FD9                 cmp     eax, 1
.text:0000000000002FDC                 jle     short loc_3024
.text:0000000000002FDE                 xchg    ax, ax
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: print_white_space+62↓j
.text:0000000000002FE0                 mov     ecx, cs:chars_per_output_tab
.text:0000000000002FE6                 mov     eax, ebp
.text:0000000000002FE8                 cdq
.text:0000000000002FE9                 idiv    ecx
.text:0000000000002FEB                 sub     ecx, edx
.text:0000000000002FED                 lea     ebx, [rcx+rbp]
.text:0000000000002FF0                 cmp     r12d, ebx
.text:0000000000002FF3                 jl      short loc_3024
.text:0000000000002FF5                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002FFC                 movzx   esi, cs:output_tab_char ; int
.text:0000000000003003                 mov     rax, [rdi+28h]
.text:0000000000003007                 cmp     rax, [rdi+30h]
.text:000000000000300B                 jnb     short loc_3070
.text:000000000000300D                 lea     rdx, [rax+1]
.text:0000000000003011                 mov     ebp, ebx
.text:0000000000003013                 mov     [rdi+28h], rdx
.text:0000000000003017                 mov     [rax], sil
.text:000000000000301A
.text:000000000000301A loc_301A:                               ; CODE XREF: print_white_space+B7↓j
.text:000000000000301A                 mov     eax, r12d
.text:000000000000301D                 sub     eax, ebp
.text:000000000000301F                 cmp     eax, 1
.text:0000000000003022                 jg      short loc_2FE0
.text:0000000000003024
.text:0000000000003024 loc_3024:                               ; CODE XREF: print_white_space+1C↑j
.text:0000000000003024                                         ; print_white_space+33↑j ...
.text:0000000000003024                 add     ebp, 1
.text:0000000000003027                 cmp     r12d, ebp
.text:000000000000302A                 jl      short loc_3050
.text:000000000000302C
.text:000000000000302C loc_302C:                               ; CODE XREF: print_white_space+8E↓j
.text:000000000000302C                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003033                 mov     rax, [rdi+28h]
.text:0000000000003037                 cmp     rax, [rdi+30h]
.text:000000000000303B                 jnb     short loc_3080
.text:000000000000303D                 lea     rdx, [rax+1]
.text:0000000000003041                 add     ebp, 1
.text:0000000000003044                 cmp     r12d, ebp
.text:0000000000003047                 mov     [rdi+28h], rdx
.text:000000000000304B                 mov     byte ptr [rax], 20h ; ' '
.text:000000000000304E                 jge     short loc_302C
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: print_white_space+6A↑j
.text:0000000000003050                 pop     rbx
.text:0000000000003051                 mov     cs:output_position, r12d
.text:0000000000003058                 mov     cs:spaces_not_printed, 0
.text:0000000000003062                 pop     rbp
.text:0000000000003063                 pop     r12
.text:0000000000003065                 retn
.text:0000000000003065 ; ---------------------------------------------------------------------------
.text:0000000000003066                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: print_white_space+4B↑j
.text:0000000000003070                 call    ___overflow
.text:0000000000003075                 mov     ebp, ebx
.text:0000000000003077                 jmp     short loc_301A
.text:0000000000003077 ; ---------------------------------------------------------------------------
.text:0000000000003079                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: print_white_space+7B↑j
.text:0000000000003080                 mov     esi, 20h ; ' '  ; int
.text:0000000000003085                 call    ___overflow
.text:000000000000308A                 jmp     short loc_3024
.text:000000000000308A ; } // starts at 2FC0
.text:000000000000308A print_white_space endp
.text:000000000000308A
.text:000000000000308A ; ---------------------------------------------------------------------------
.text:000000000000308C                 align 10h
.text:0000000000003090
.text:0000000000003090 ; =============== S U B R O U T I N E =======================================
.text:0000000000003090
.text:0000000000003090
.text:0000000000003090 print_sep_string proc near              ; CODE XREF: print_stored:loc_36D8↓p
.text:0000000000003090                                         ; align_column:loc_3900↓p ...
.text:0000000000003090 ; __unwind {
.text:0000000000003090                 mov     edx, cs:separators_not_printed
.text:0000000000003096                 mov     eax, cs:spaces_not_printed
.text:000000000000309C                 test    edx, edx
.text:000000000000309E                 jle     loc_3190
.text:00000000000030A4                 push    r14
.text:00000000000030A6                 push    r13
.text:00000000000030A8                 xor     r13d, r13d
.text:00000000000030AB                 push    r12
.text:00000000000030AD                 mov     r12, cs:col_sep_string
.text:00000000000030B4                 push    rbp
.text:00000000000030B5                 mov     ebp, cs:col_sep_length
.text:00000000000030BB                 push    rbx
.text:00000000000030BC                 nop     dword ptr [rax+00h]
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: print_sep_string+C6↓j
.text:00000000000030C0                 lea     r14d, [rbp+r12+0]
.text:00000000000030C5                 mov     rbx, r12
.text:00000000000030C8
.text:00000000000030C8 loc_30C8:                               ; CODE XREF: print_sep_string+D9↓j
.text:00000000000030C8                 mov     edx, r14d
.text:00000000000030CB                 sub     edx, ebx
.text:00000000000030CD                 test    edx, edx
.text:00000000000030CF                 jle     short loc_3121
.text:00000000000030D1
.text:00000000000030D1 loc_30D1:                               ; CODE XREF: print_sep_string+8F↓j
.text:00000000000030D1                 movzx   esi, byte ptr [rbx]
.text:00000000000030D4                 add     rbx, 1
.text:00000000000030D8                 cmp     sil, 20h ; ' '
.text:00000000000030DC                 jz      loc_3160
.text:00000000000030E2                 test    eax, eax
.text:00000000000030E4                 jle     short loc_30EF
.text:00000000000030E6                 call    print_white_space
.text:00000000000030EB                 movzx   esi, byte ptr [rbx-1] ; int
.text:00000000000030EF
.text:00000000000030EF loc_30EF:                               ; CODE XREF: print_sep_string+54↑j
.text:00000000000030EF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000030F6                 mov     rax, [rdi+28h]
.text:00000000000030FA                 cmp     rax, [rdi+30h]
.text:00000000000030FE                 jnb     short loc_3170
.text:0000000000003100                 lea     rdx, [rax+1]
.text:0000000000003104                 mov     [rdi+28h], rdx
.text:0000000000003108                 mov     [rax], sil
.text:000000000000310B
.text:000000000000310B loc_310B:                               ; CODE XREF: print_sep_string+E5↓j
.text:000000000000310B                 mov     edx, r14d
.text:000000000000310E                 add     cs:output_position, 1
.text:0000000000003115                 mov     eax, cs:spaces_not_printed
.text:000000000000311B                 sub     edx, ebx
.text:000000000000311D                 test    edx, edx
.text:000000000000311F                 jg      short loc_30D1
.text:0000000000003121
.text:0000000000003121 loc_3121:                               ; CODE XREF: print_sep_string+3F↑j
.text:0000000000003121                 test    ebp, ebp
.text:0000000000003123                 mov     edx, r13d
.text:0000000000003126                 cmovns  edx, ebp
.text:0000000000003129                 sub     ebp, 1
.text:000000000000312C                 movsxd  rcx, edx
.text:000000000000312F                 sub     ebp, edx
.text:0000000000003131                 add     r12, rcx
.text:0000000000003134                 test    eax, eax
.text:0000000000003136                 jle     short loc_313D
.text:0000000000003138                 call    print_white_space
.text:000000000000313D
.text:000000000000313D loc_313D:                               ; CODE XREF: print_sep_string+A6↑j
.text:000000000000313D                 mov     eax, cs:separators_not_printed
.text:0000000000003143                 sub     eax, 1
.text:0000000000003146                 test    eax, eax
.text:0000000000003148                 mov     cs:separators_not_printed, eax
.text:000000000000314E                 jle     short loc_3180
.text:0000000000003150                 mov     eax, cs:spaces_not_printed
.text:0000000000003156                 jmp     loc_30C0
.text:0000000000003156 ; ---------------------------------------------------------------------------
.text:000000000000315B                 align 20h
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: print_sep_string+4C↑j
.text:0000000000003160                 add     eax, 1
.text:0000000000003163                 mov     cs:spaces_not_printed, eax
.text:0000000000003169                 jmp     loc_30C8
.text:0000000000003169 ; ---------------------------------------------------------------------------
.text:000000000000316E                 align 10h
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: print_sep_string+6E↑j
.text:0000000000003170                 call    ___overflow
.text:0000000000003175                 jmp     short loc_310B
.text:0000000000003175 ; ---------------------------------------------------------------------------
.text:0000000000003177                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: print_sep_string+BE↑j
.text:0000000000003180                 pop     rbx
.text:0000000000003181                 pop     rbp
.text:0000000000003182                 pop     r12
.text:0000000000003184                 pop     r13
.text:0000000000003186                 pop     r14
.text:0000000000003188                 retn
.text:0000000000003188 ; ---------------------------------------------------------------------------
.text:0000000000003189                 align 10h
.text:0000000000003190
.text:0000000000003190 loc_3190:                               ; CODE XREF: print_sep_string+E↑j
.text:0000000000003190                 test    eax, eax
.text:0000000000003192                 jg      short loc_3196
.text:0000000000003194                 rep retn
.text:0000000000003196 ; ---------------------------------------------------------------------------
.text:0000000000003196
.text:0000000000003196 loc_3196:                               ; CODE XREF: print_sep_string+102↑j
.text:0000000000003196                 jmp     print_white_space
.text:0000000000003196 ; } // starts at 3090
.text:0000000000003196 print_sep_string endp
.text:0000000000003196
.text:0000000000003196 ; ---------------------------------------------------------------------------
.text:000000000000319B                 align 20h
.text:00000000000031A0
.text:00000000000031A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031A0
.text:00000000000031A0
.text:00000000000031A0 print_header    proc near               ; CODE XREF: print_stored:loc_36C8↓p
.text:00000000000031A0                                         ; read_line:loc_4130↓p ...
.text:00000000000031A0
.text:00000000000031A0 var_20          = qword ptr -20h
.text:00000000000031A0
.text:00000000000031A0 ; __unwind {
.text:00000000000031A0                 push    rbp
.text:00000000000031A1                 push    rbx
.text:00000000000031A2                 sub     rsp, 128h
.text:00000000000031A9                 mov     edi, cs:chars_per_margin
.text:00000000000031AF                 mov     cs:output_position, 0
.text:00000000000031B9                 mov     rax, fs:28h
.text:00000000000031C2                 mov     [rsp+138h+var_20], rax
.text:00000000000031CA                 xor     eax, eax
.text:00000000000031CC                 call    pad_across_to
.text:00000000000031D1                 call    print_white_space
.text:00000000000031D6                 mov     rbx, cs:page_number
.text:00000000000031DD                 mov     edx, 5          ; category
.text:00000000000031E2                 test    rbx, rbx
.text:00000000000031E5                 jz      loc_32A7
.text:00000000000031EB                 lea     rsi, aPageLu    ; "Page %lu"
.text:00000000000031F2                 mov     rbp, rsp
.text:00000000000031F5                 xor     edi, edi        ; domainname
.text:00000000000031F7                 call    _dcgettext
.text:00000000000031FC                 mov     r8, rbx
.text:00000000000031FF                 mov     rcx, rax
.text:0000000000003202                 mov     edx, 114h
.text:0000000000003207                 mov     esi, 1
.text:000000000000320C                 mov     rdi, rbp
.text:000000000000320F                 xor     eax, eax
.text:0000000000003211                 call    ___sprintf_chk
.text:0000000000003216                 mov     ebx, cs:header_width_available
.text:000000000000321C                 xor     esi, esi
.text:000000000000321E                 mov     rdi, rbp
.text:0000000000003221                 call    gnu_mbswidth
.text:0000000000003226                 mov     r8, cs:date_text
.text:000000000000322D                 mov     edx, cs:chars_per_margin
.text:0000000000003233                 lea     rcx, asc_BEE4+1 ; ""
.text:000000000000323A                 sub     ebx, eax
.text:000000000000323C                 mov     eax, 0
.text:0000000000003241                 lea     rsi, aSSSSSS    ; "\n\n%*s%s%*s%s%*s%s\n\n\n"
.text:0000000000003248                 cmovs   ebx, eax
.text:000000000000324B                 lea     rax, asc_BECA   ; " "
.text:0000000000003252                 sub     rsp, 8
.text:0000000000003256                 mov     r9d, ebx
.text:0000000000003259                 push    rbp
.text:000000000000325A                 mov     edi, 1
.text:000000000000325F                 sar     r9d, 1
.text:0000000000003262                 push    rax
.text:0000000000003263                 sub     ebx, r9d
.text:0000000000003266                 push    rbx
.text:0000000000003267                 push    cs:file_text
.text:000000000000326D                 push    rax
.text:000000000000326E                 xor     eax, eax
.text:0000000000003270                 call    ___printf_chk
.text:0000000000003275                 add     rsp, 30h
.text:0000000000003279                 mov     cs:print_a_header, 0
.text:0000000000003280                 mov     cs:output_position, 0
.text:000000000000328A                 mov     rax, [rsp+138h+var_20]
.text:0000000000003292                 xor     rax, fs:28h
.text:000000000000329B                 jnz     short loc_32C6
.text:000000000000329D                 add     rsp, 128h
.text:00000000000032A4                 pop     rbx
.text:00000000000032A5                 pop     rbp
.text:00000000000032A6                 retn
.text:00000000000032A7 ; ---------------------------------------------------------------------------
.text:00000000000032A7
.text:00000000000032A7 loc_32A7:                               ; CODE XREF: print_header+45↑j
.text:00000000000032A7                 lea     rsi, aPageNumberOver ; "page number overflow"
.text:00000000000032AE                 xor     edi, edi        ; domainname
.text:00000000000032B0                 call    _dcgettext
.text:00000000000032B5                 xor     esi, esi        ; errnum
.text:00000000000032B7                 mov     rdx, rax        ; format
.text:00000000000032BA                 mov     edi, 1          ; status
.text:00000000000032BF                 xor     eax, eax
.text:00000000000032C1                 call    _error
.text:00000000000032C6
.text:00000000000032C6 loc_32C6:                               ; CODE XREF: print_header+FB↑j
.text:00000000000032C6                 call    ___stack_chk_fail
.text:00000000000032C6 ; } // starts at 31A0
.text:00000000000032C6 print_header    endp
.text:00000000000032C6
.text:00000000000032C6 ; ---------------------------------------------------------------------------
.text:00000000000032CB                 align 10h
.text:00000000000032D0
.text:00000000000032D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032D0
.text:00000000000032D0
.text:00000000000032D0 char_to_clump   proc near               ; CODE XREF: read_line+56↓p
.text:00000000000032D0                                         ; read_line+210↓p
.text:00000000000032D0
.text:00000000000032D0 var_24          = byte ptr -24h
.text:00000000000032D0 var_23          = byte ptr -23h
.text:00000000000032D0 var_22          = byte ptr -22h
.text:00000000000032D0 var_20          = qword ptr -20h
.text:00000000000032D0
.text:00000000000032D0 ; __unwind {
.text:00000000000032D0                 push    r12
.text:00000000000032D2                 push    rbp
.text:00000000000032D3                 mov     ebp, edi
.text:00000000000032D5                 push    rbx
.text:00000000000032D6                 sub     rsp, 10h
.text:00000000000032DA                 mov     rbx, cs:clump_buff
.text:00000000000032E1                 mov     ecx, cs:chars_per_input_tab
.text:00000000000032E7                 mov     rax, fs:28h
.text:00000000000032F0                 mov     [rsp+28h+var_20], rax
.text:00000000000032F5                 xor     eax, eax
.text:00000000000032F7                 cmp     cs:input_tab_char, dil
.text:00000000000032FE                 jz      short loc_3365
.text:0000000000003300                 cmp     dil, 9
.text:0000000000003304                 jz      short loc_3360
.text:0000000000003306                 movzx   r12d, dil
.text:000000000000330A                 call    ___ctype_b_loc
.text:000000000000330F                 mov     rax, [rax]
.text:0000000000003312                 test    byte ptr [rax+r12*2+1], 40h
.text:0000000000003318                 jnz     loc_3400
.text:000000000000331E                 cmp     cs:use_esc_sequence, 0
.text:0000000000003325                 jnz     loc_3438
.text:000000000000332B                 cmp     cs:use_cntrl_prefix, 0
.text:0000000000003332                 jz      loc_3490
.text:0000000000003338                 test    bpl, bpl
.text:000000000000333B                 js      loc_3438
.text:0000000000003341                 xor     ebp, 40h
.text:0000000000003344                 mov     byte ptr [rbx], 5Eh ; '^'
.text:0000000000003347                 mov     esi, cs:input_position
.text:000000000000334D                 mov     [rbx+1], bpl
.text:0000000000003351                 mov     eax, 2
.text:0000000000003356                 mov     edx, 2
.text:000000000000335B                 jmp     short loc_3390
.text:000000000000335B ; ---------------------------------------------------------------------------
.text:000000000000335D                 align 20h
.text:0000000000003360
.text:0000000000003360 loc_3360:                               ; CODE XREF: char_to_clump+34↑j
.text:0000000000003360                 mov     ecx, 8
.text:0000000000003365
.text:0000000000003365 loc_3365:                               ; CODE XREF: char_to_clump+2E↑j
.text:0000000000003365                 mov     esi, cs:input_position
.text:000000000000336B                 mov     eax, esi
.text:000000000000336D                 cdq
.text:000000000000336E                 idiv    ecx
.text:0000000000003370                 sub     ecx, edx
.text:0000000000003372                 cmp     cs:untabify_input, 0
.text:0000000000003379                 mov     edx, ecx
.text:000000000000337B                 jnz     short loc_33B8
.text:000000000000337D                 test    edx, edx
.text:000000000000337F                 mov     [rbx], bpl
.text:0000000000003382                 mov     eax, 1
.text:0000000000003387                 js      short loc_33E3
.text:0000000000003389                 nop     dword ptr [rax+00000000h]
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: char_to_clump+8B↑j
.text:0000000000003390                                         ; char_to_clump+111↓j ...
.text:0000000000003390                 add     edx, esi
.text:0000000000003392                 mov     cs:input_position, edx
.text:0000000000003398
.text:0000000000003398 loc_3398:                               ; CODE XREF: char_to_clump+129↓j
.text:0000000000003398                                         ; char_to_clump+15C↓j
.text:0000000000003398                 mov     rdi, [rsp+28h+var_20]
.text:000000000000339D                 xor     rdi, fs:28h
.text:00000000000033A6                 jnz     loc_34D7
.text:00000000000033AC                 add     rsp, 10h
.text:00000000000033B0                 pop     rbx
.text:00000000000033B1                 pop     rbp
.text:00000000000033B2                 pop     r12
.text:00000000000033B4                 retn
.text:00000000000033B4 ; ---------------------------------------------------------------------------
.text:00000000000033B5                 align 8
.text:00000000000033B8
.text:00000000000033B8 loc_33B8:                               ; CODE XREF: char_to_clump+AB↑j
.text:00000000000033B8                 test    ecx, ecx
.text:00000000000033BA                 jz      loc_34D0
.text:00000000000033C0                 lea     eax, [rcx-1]
.text:00000000000033C3                 lea     rax, [rbx+rax+1]
.text:00000000000033C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: char_to_clump+10B↓j
.text:00000000000033D0                 add     rbx, 1
.text:00000000000033D4                 mov     byte ptr [rbx-1], 20h ; ' '
.text:00000000000033D8                 cmp     rax, rbx
.text:00000000000033DB                 jnz     short loc_33D0
.text:00000000000033DD                 test    edx, edx
.text:00000000000033DF                 mov     eax, edx
.text:00000000000033E1                 jns     short loc_3390
.text:00000000000033E3
.text:00000000000033E3 loc_33E3:                               ; CODE XREF: char_to_clump+B7↑j
.text:00000000000033E3                 test    esi, esi
.text:00000000000033E5                 jz      short loc_3420
.text:00000000000033E7                 mov     ecx, edx
.text:00000000000033E9                 neg     ecx
.text:00000000000033EB
.text:00000000000033EB loc_33EB:                               ; CODE XREF: char_to_clump+1FA↓j
.text:00000000000033EB                 cmp     ecx, esi
.text:00000000000033ED                 jl      short loc_3390
.text:00000000000033EF                 mov     cs:input_position, 0
.text:00000000000033F9                 jmp     short loc_3398
.text:00000000000033F9 ; ---------------------------------------------------------------------------
.text:00000000000033FB                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: char_to_clump+48↑j
.text:0000000000003400                 mov     [rbx], bpl
.text:0000000000003403                 mov     esi, cs:input_position
.text:0000000000003409                 mov     eax, 1
.text:000000000000340E                 mov     edx, 1
.text:0000000000003413                 jmp     loc_3390
.text:0000000000003413 ; ---------------------------------------------------------------------------
.text:0000000000003418                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: char_to_clump+115↑j
.text:0000000000003420                                         ; char_to_clump+1E5↓j
.text:0000000000003420                 mov     cs:input_position, 0
.text:000000000000342A                 xor     eax, eax
.text:000000000000342C                 jmp     loc_3398
.text:000000000000342C ; ---------------------------------------------------------------------------
.text:0000000000003431                 align 8
.text:0000000000003438
.text:0000000000003438 loc_3438:                               ; CODE XREF: char_to_clump+55↑j
.text:0000000000003438                                         ; char_to_clump+6B↑j
.text:0000000000003438                 lea     rdi, [rsp+28h+var_24]
.text:000000000000343D                 lea     rcx, a03o       ; "%03o"
.text:0000000000003444                 mov     edx, 4
.text:0000000000003449                 mov     esi, 1
.text:000000000000344E                 mov     byte ptr [rbx], 5Ch ; '\'
.text:0000000000003451                 movzx   r8d, bpl
.text:0000000000003455                 xor     eax, eax
.text:0000000000003457                 call    ___sprintf_chk
.text:000000000000345C                 movzx   eax, [rsp+28h+var_24]
.text:0000000000003461                 mov     esi, cs:input_position
.text:0000000000003467                 mov     edx, 4
.text:000000000000346C                 mov     [rbx+1], al
.text:000000000000346F                 movzx   eax, [rsp+28h+var_23]
.text:0000000000003474                 mov     [rbx+2], al
.text:0000000000003477                 movzx   eax, [rsp+28h+var_22]
.text:000000000000347C                 mov     [rbx+3], al
.text:000000000000347F                 mov     eax, 4
.text:0000000000003484                 jmp     loc_3390
.text:0000000000003484 ; ---------------------------------------------------------------------------
.text:0000000000003489                 align 10h
.text:0000000000003490
.text:0000000000003490 loc_3490:                               ; CODE XREF: char_to_clump+62↑j
.text:0000000000003490                 cmp     bpl, 8
.text:0000000000003494                 mov     esi, cs:input_position
.text:000000000000349A                 jz      short loc_34B0
.text:000000000000349C                 mov     [rbx], bpl
.text:000000000000349F                 mov     eax, 1
.text:00000000000034A4                 xor     edx, edx
.text:00000000000034A6                 jmp     loc_3390
.text:00000000000034A6 ; ---------------------------------------------------------------------------
.text:00000000000034AB                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: char_to_clump+1CA↑j
.text:00000000000034B0                 test    esi, esi
.text:00000000000034B2                 mov     byte ptr [rbx], 8
.text:00000000000034B5                 jz      loc_3420
.text:00000000000034BB                 mov     ecx, 1
.text:00000000000034C0                 mov     eax, 1
.text:00000000000034C5                 mov     edx, 0FFFFFFFFh
.text:00000000000034CA                 jmp     loc_33EB
.text:00000000000034CA ; ---------------------------------------------------------------------------
.text:00000000000034CF                 align 10h
.text:00000000000034D0
.text:00000000000034D0 loc_34D0:                               ; CODE XREF: char_to_clump+EA↑j
.text:00000000000034D0                 xor     eax, eax
.text:00000000000034D2                 jmp     loc_3390
.text:00000000000034D7 ; ---------------------------------------------------------------------------
.text:00000000000034D7
.text:00000000000034D7 loc_34D7:                               ; CODE XREF: char_to_clump+D6↑j
.text:00000000000034D7                 call    ___stack_chk_fail
.text:00000000000034D7 ; } // starts at 32D0
.text:00000000000034D7 char_to_clump   endp
.text:00000000000034D7
.text:00000000000034D7 ; ---------------------------------------------------------------------------
.text:00000000000034DC                 align 20h
.text:00000000000034E0
.text:00000000000034E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034E0
.text:00000000000034E0
.text:00000000000034E0 print_char      proc near               ; CODE XREF: print_stored+88↓p
.text:00000000000034E0                                         ; DATA XREF: print_files+432↓o ...
.text:00000000000034E0 ; __unwind {
.text:00000000000034E0                 push    rbp
.text:00000000000034E1                 push    rbx
.text:00000000000034E2                 mov     ebx, edi
.text:00000000000034E4                 sub     rsp, 8
.text:00000000000034E8                 cmp     cs:tabify_output, 0
.text:00000000000034EF                 jz      short loc_3520
.text:00000000000034F1                 cmp     dil, 20h ; ' '
.text:00000000000034F5                 mov     eax, cs:spaces_not_printed
.text:00000000000034FB                 jz      short loc_3570
.text:00000000000034FD                 test    eax, eax
.text:00000000000034FF                 movzx   ebp, dil
.text:0000000000003503                 jg      short loc_3558
.text:0000000000003505                 call    ___ctype_b_loc
.text:000000000000350A                 mov     rax, [rax]
.text:000000000000350D                 test    byte ptr [rax+rbp*2+1], 40h
.text:0000000000003512                 jnz     short loc_3548
.text:0000000000003514
.text:0000000000003514 loc_3514:                               ; CODE XREF: print_char+8C↓j
.text:0000000000003514                 cmp     bl, 8
.text:0000000000003517                 jnz     short loc_3520
.text:0000000000003519                 sub     cs:output_position, 1
.text:0000000000003520
.text:0000000000003520 loc_3520:                               ; CODE XREF: print_char+F↑j
.text:0000000000003520                                         ; print_char+37↑j ...
.text:0000000000003520                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003527                 mov     rax, [rdi+28h]
.text:000000000000352B                 cmp     rax, [rdi+30h]
.text:000000000000352F                 jnb     short loc_3580
.text:0000000000003531                 lea     rdx, [rax+1]
.text:0000000000003535                 mov     [rdi+28h], rdx
.text:0000000000003539                 mov     [rax], bl
.text:000000000000353B                 add     rsp, 8
.text:000000000000353F                 pop     rbx
.text:0000000000003540                 pop     rbp
.text:0000000000003541                 retn
.text:0000000000003541 ; ---------------------------------------------------------------------------
.text:0000000000003542                 align 8
.text:0000000000003548
.text:0000000000003548 loc_3548:                               ; CODE XREF: print_char+32↑j
.text:0000000000003548                                         ; print_char+8A↓j
.text:0000000000003548                 add     cs:output_position, 1
.text:000000000000354F                 jmp     short loc_3520
.text:000000000000354F ; ---------------------------------------------------------------------------
.text:0000000000003551                 align 8
.text:0000000000003558
.text:0000000000003558 loc_3558:                               ; CODE XREF: print_char+23↑j
.text:0000000000003558                 call    print_white_space
.text:000000000000355D                 call    ___ctype_b_loc
.text:0000000000003562                 mov     rax, [rax]
.text:0000000000003565                 test    byte ptr [rax+rbp*2+1], 40h
.text:000000000000356A                 jnz     short loc_3548
.text:000000000000356C                 jmp     short loc_3514
.text:000000000000356C ; ---------------------------------------------------------------------------
.text:000000000000356E                 align 10h
.text:0000000000003570
.text:0000000000003570 loc_3570:                               ; CODE XREF: print_char+1B↑j
.text:0000000000003570                 add     eax, 1
.text:0000000000003573                 mov     cs:spaces_not_printed, eax
.text:0000000000003579                 add     rsp, 8
.text:000000000000357D                 pop     rbx
.text:000000000000357E                 pop     rbp
.text:000000000000357F                 retn
.text:0000000000003580 ; ---------------------------------------------------------------------------
.text:0000000000003580
.text:0000000000003580 loc_3580:                               ; CODE XREF: print_char+4F↑j
.text:0000000000003580                 add     rsp, 8
.text:0000000000003584                 movzx   esi, bl         ; int
.text:0000000000003587                 pop     rbx
.text:0000000000003588                 pop     rbp
.text:0000000000003589                 jmp     ___overflow
.text:0000000000003589 ; } // starts at 34E0
.text:0000000000003589 print_char      endp
.text:0000000000003589
.text:0000000000003589 ; ---------------------------------------------------------------------------
.text:000000000000358E                 align 10h
.text:0000000000003590
.text:0000000000003590 ; =============== S U B R O U T I N E =======================================
.text:0000000000003590
.text:0000000000003590
.text:0000000000003590 print_stored    proc near               ; DATA XREF: print_files+447↓o
.text:0000000000003590                                         ; print_files+513↓o
.text:0000000000003590 ; __unwind {
.text:0000000000003590                 push    r13
.text:0000000000003592                 push    r12
.text:0000000000003594                 mov     r13, rdi
.text:0000000000003597                 push    rbp
.text:0000000000003598                 push    rbx
.text:0000000000003599                 sub     rsp, 8
.text:000000000000359D                 movsxd  r12, dword ptr [rdi+28h]
.text:00000000000035A1                 mov     rbp, cs:buff
.text:00000000000035A8                 mov     cs:pad_vertically, 1
.text:00000000000035AF                 lea     eax, [r12+1]
.text:00000000000035B4                 mov     [rdi+28h], eax
.text:00000000000035B7                 mov     rax, cs:line_vector
.text:00000000000035BE                 movsxd  rbx, dword ptr [rax+r12*4]
.text:00000000000035C2                 movsxd  rax, dword ptr [rax+r12*4+4]
.text:00000000000035C7                 add     rbx, rbp
.text:00000000000035CA                 add     rbp, rax
.text:00000000000035CD                 cmp     cs:print_a_header, 0
.text:00000000000035D4                 jnz     loc_36C8
.text:00000000000035DA
.text:00000000000035DA loc_35DA:                               ; CODE XREF: print_stored+13D↓j
.text:00000000000035DA                 cmp     dword ptr [r13+10h], 1
.text:00000000000035DF                 jz      loc_3670
.text:00000000000035E5
.text:00000000000035E5 loc_35E5:                               ; CODE XREF: print_stored+11C↓j
.text:00000000000035E5                 mov     eax, cs:col_sep_length
.text:00000000000035EB                 mov     edi, cs:padding_not_printed
.text:00000000000035F1                 cmp     eax, edi
.text:00000000000035F3                 jl      loc_36E8
.text:00000000000035F9
.text:00000000000035F9 loc_35F9:                               ; CODE XREF: print_stored+169↓j
.text:00000000000035F9                 cmp     cs:use_col_separator, 0
.text:0000000000003600                 jnz     loc_36D8
.text:0000000000003606
.text:0000000000003606 loc_3606:                               ; CODE XREF: print_stored+14D↓j
.text:0000000000003606                 cmp     rbx, rbp
.text:0000000000003609                 jz      short loc_3622
.text:000000000000360B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: print_stored+90↓j
.text:0000000000003610                 add     rbx, 1
.text:0000000000003614                 movsx   edi, byte ptr [rbx-1]
.text:0000000000003618                 call    print_char
.text:000000000000361D                 cmp     rbp, rbx
.text:0000000000003620                 jnz     short loc_3610
.text:0000000000003622
.text:0000000000003622 loc_3622:                               ; CODE XREF: print_stored+79↑j
.text:0000000000003622                 mov     eax, cs:spaces_not_printed
.text:0000000000003628                 test    eax, eax
.text:000000000000362A                 jnz     short loc_3659
.text:000000000000362C                 mov     rdx, cs:end_vector
.text:0000000000003633                 mov     eax, [r13+34h]
.text:0000000000003637                 mov     ecx, cs:col_sep_length
.text:000000000000363D                 mov     esi, [rdx+r12*4]
.text:0000000000003641                 add     esi, eax
.text:0000000000003643                 sub     eax, ecx
.text:0000000000003645                 cmp     eax, cs:chars_per_margin
.text:000000000000364B                 mov     edx, esi
.text:000000000000364D                 mov     cs:output_position, esi
.text:0000000000003653                 jz      loc_3700
.text:0000000000003659
.text:0000000000003659 loc_3659:                               ; CODE XREF: print_stored+9A↑j
.text:0000000000003659                                         ; print_stored+129↓j ...
.text:0000000000003659                 add     rsp, 8
.text:000000000000365D                 mov     eax, 1
.text:0000000000003662                 pop     rbx
.text:0000000000003663                 pop     rbp
.text:0000000000003664                 pop     r12
.text:0000000000003666                 pop     r13
.text:0000000000003668                 retn
.text:0000000000003668 ; ---------------------------------------------------------------------------
.text:0000000000003669                 align 10h
.text:0000000000003670
.text:0000000000003670 loc_3670:                               ; CODE XREF: print_stored+4F↑j
.text:0000000000003670                 mov     edx, cs:columns
.text:0000000000003676                 mov     rcx, cs:column_vector
.text:000000000000367D                 test    edx, edx
.text:000000000000367F                 jle     short loc_36A7
.text:0000000000003681                 sub     edx, 1
.text:0000000000003684                 lea     rax, [rcx+10h]
.text:0000000000003688                 shl     rdx, 6
.text:000000000000368C                 lea     rdx, [rcx+rdx+50h]
.text:0000000000003691                 nop     dword ptr [rax+00000000h]
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: print_stored+115↓j
.text:0000000000003698                 mov     dword ptr [rax], 2
.text:000000000000369E                 add     rax, 40h ; '@'
.text:00000000000036A2                 cmp     rax, rdx
.text:00000000000036A5                 jnz     short loc_3698
.text:00000000000036A7
.text:00000000000036A7 loc_36A7:                               ; CODE XREF: print_stored+EF↑j
.text:00000000000036A7                 mov     edx, [rcx+30h]
.text:00000000000036AA                 test    edx, edx
.text:00000000000036AC                 jg      loc_35E5
.text:00000000000036B2                 cmp     cs:extremities, 0
.text:00000000000036B9                 jnz     short loc_3659
.text:00000000000036BB                 mov     cs:pad_vertically, 0
.text:00000000000036C2                 jmp     short loc_3659
.text:00000000000036C2 ; ---------------------------------------------------------------------------
.text:00000000000036C4                 align 8
.text:00000000000036C8
.text:00000000000036C8 loc_36C8:                               ; CODE XREF: print_stored+44↑j
.text:00000000000036C8                 call    print_header
.text:00000000000036CD                 jmp     loc_35DA
.text:00000000000036CD ; ---------------------------------------------------------------------------
.text:00000000000036D2                 align 8
.text:00000000000036D8
.text:00000000000036D8 loc_36D8:                               ; CODE XREF: print_stored+70↑j
.text:00000000000036D8                 call    print_sep_string
.text:00000000000036DD                 jmp     loc_3606
.text:00000000000036DD ; ---------------------------------------------------------------------------
.text:00000000000036E2                 align 8
.text:00000000000036E8
.text:00000000000036E8 loc_36E8:                               ; CODE XREF: print_stored+63↑j
.text:00000000000036E8                 sub     edi, eax
.text:00000000000036EA                 call    pad_across_to
.text:00000000000036EF                 mov     cs:padding_not_printed, 0
.text:00000000000036F9                 jmp     loc_35F9
.text:00000000000036F9 ; ---------------------------------------------------------------------------
.text:00000000000036FE                 align 20h
.text:0000000000003700
.text:0000000000003700 loc_3700:                               ; CODE XREF: print_stored+C3↑j
.text:0000000000003700                 sub     edx, ecx
.text:0000000000003702                 mov     eax, 1
.text:0000000000003707                 mov     cs:output_position, edx
.text:000000000000370D                 add     rsp, 8
.text:0000000000003711                 pop     rbx
.text:0000000000003712                 pop     rbp
.text:0000000000003713                 pop     r12
.text:0000000000003715                 pop     r13
.text:0000000000003717                 retn
.text:0000000000003717 ; } // starts at 3590
.text:0000000000003717 print_stored    endp
.text:0000000000003717
.text:0000000000003717 ; ---------------------------------------------------------------------------
.text:0000000000003718                 align 20h
.text:0000000000003720
.text:0000000000003720 ; =============== S U B R O U T I N E =======================================
.text:0000000000003720
.text:0000000000003720
.text:0000000000003720 hold_file_isra_1 proc near              ; CODE XREF: skip_read+192↓p
.text:0000000000003720                                         ; skip_read+1D0↓p ...
.text:0000000000003720 ; __unwind {
.text:0000000000003720                 cmp     cs:parallel_files, 0
.text:0000000000003727                 jnz     short loc_3790
.text:0000000000003729                 mov     edx, cs:columns
.text:000000000000372F                 mov     rdi, cs:column_vector
.text:0000000000003736                 test    edx, edx
.text:0000000000003738                 jz      short loc_377A
.text:000000000000373A                 sub     edx, 1
.text:000000000000373D                 movzx   ecx, cs:storing_columns
.text:0000000000003744                 lea     rax, [rdi+10h]
.text:0000000000003748                 shl     rdx, 6
.text:000000000000374C                 lea     rdx, [rdi+rdx+50h]
.text:0000000000003751                 jmp     short loc_3767
.text:0000000000003751 ; ---------------------------------------------------------------------------
.text:0000000000003753                 align 8
.text:0000000000003758
.text:0000000000003758 loc_3758:                               ; CODE XREF: hold_file_isra_1+49↓j
.text:0000000000003758                 mov     dword ptr [rax], 1
.text:000000000000375E                 add     rax, 40h ; '@'
.text:0000000000003762                 cmp     rax, rdx
.text:0000000000003765                 jz      short loc_377A
.text:0000000000003767
.text:0000000000003767 loc_3767:                               ; CODE XREF: hold_file_isra_1+31↑j
.text:0000000000003767                                         ; hold_file_isra_1+58↓j
.text:0000000000003767                 test    cl, cl
.text:0000000000003769                 jnz     short loc_3758
.text:000000000000376B                 mov     dword ptr [rax], 2
.text:0000000000003771                 add     rax, 40h ; '@'
.text:0000000000003775                 cmp     rax, rdx
.text:0000000000003778                 jnz     short loc_3767
.text:000000000000377A
.text:000000000000377A loc_377A:                               ; CODE XREF: hold_file_isra_1+18↑j
.text:000000000000377A                                         ; hold_file_isra_1+45↑j
.text:000000000000377A                 mov     dword ptr [rsi], 0
.text:0000000000003780                 sub     cs:files_ready_to_read, 1
.text:0000000000003787                 retn
.text:0000000000003787 ; ---------------------------------------------------------------------------
.text:0000000000003788                 align 10h
.text:0000000000003790
.text:0000000000003790 loc_3790:                               ; CODE XREF: hold_file_isra_1+7↑j
.text:0000000000003790                 mov     dword ptr [rdi], 2
.text:0000000000003796                 sub     cs:files_ready_to_read, 1
.text:000000000000379D                 mov     dword ptr [rsi], 0
.text:00000000000037A3                 retn
.text:00000000000037A3 ; } // starts at 3720
.text:00000000000037A3 hold_file_isra_1 endp
.text:00000000000037A3
.text:00000000000037A3 ; ---------------------------------------------------------------------------
.text:00000000000037A4                 align 10h
.text:00000000000037B0
.text:00000000000037B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037B0
.text:00000000000037B0
.text:00000000000037B0 add_line_number_isra_2 proc near        ; CODE XREF: align_column+35↓j
.text:00000000000037B0                                         ; read_line+3BC↓p
.text:00000000000037B0 ; __unwind {
.text:00000000000037B0                 push    r12
.text:00000000000037B2                 mov     r9d, cs:line_number
.text:00000000000037B9                 lea     rcx, aD         ; "%*d"
.text:00000000000037C0                 push    rbp
.text:00000000000037C1                 mov     r8d, cs:chars_per_number
.text:00000000000037C8                 mov     rbp, rdi
.text:00000000000037CB                 mov     rdi, cs:number_buff
.text:00000000000037D2                 push    rbx
.text:00000000000037D3                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000037DA                 xor     eax, eax
.text:00000000000037DC                 mov     esi, 1
.text:00000000000037E1                 call    ___sprintf_chk
.text:00000000000037E6                 mov     edx, cs:chars_per_number
.text:00000000000037EC                 add     cs:line_number, 1
.text:00000000000037F3                 sub     eax, edx
.text:00000000000037F5                 movsxd  rbx, eax
.text:00000000000037F8                 add     rbx, cs:number_buff
.text:00000000000037FF                 test    edx, edx
.text:0000000000003801                 jle     short loc_3820
.text:0000000000003803                 lea     eax, [rdx-1]
.text:0000000000003806                 lea     r12, [rbx+rax+1]
.text:000000000000380B                 nop     dword ptr [rax+rax+00h]
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: add_line_number_isra_2+6E↓j
.text:0000000000003810                 add     rbx, 1
.text:0000000000003814                 movsx   edi, byte ptr [rbx-1]
.text:0000000000003818                 call    qword ptr [rbp+0]
.text:000000000000381B                 cmp     rbx, r12
.text:000000000000381E                 jnz     short loc_3810
.text:0000000000003820
.text:0000000000003820 loc_3820:                               ; CODE XREF: add_line_number_isra_2+51↑j
.text:0000000000003820                 cmp     cs:columns, 1
.text:0000000000003827                 movsx   edi, cs:number_separator
.text:000000000000382E                 jg      short loc_3880
.text:0000000000003830                 call    qword ptr [rbp+0]
.text:0000000000003833                 cmp     cs:number_separator, 9
.text:000000000000383A                 jnz     short loc_3857
.text:000000000000383C                 mov     esi, cs:output_position
.text:0000000000003842                 mov     ecx, cs:chars_per_output_tab
.text:0000000000003848                 mov     eax, esi
.text:000000000000384A                 cdq
.text:000000000000384B                 idiv    ecx
.text:000000000000384D                 sub     ecx, edx
.text:000000000000384F                 add     ecx, esi
.text:0000000000003851                 mov     cs:output_position, ecx
.text:0000000000003857
.text:0000000000003857 loc_3857:                               ; CODE XREF: add_line_number_isra_2+8A↑j
.text:0000000000003857                                         ; add_line_number_isra_2+D9↓j ...
.text:0000000000003857                 cmp     cs:truncate_lines, 0
.text:000000000000385E                 jz      short loc_3875
.text:0000000000003860                 cmp     cs:parallel_files, 0
.text:0000000000003867                 jnz     short loc_3875
.text:0000000000003869                 mov     eax, cs:number_width
.text:000000000000386F                 add     cs:input_position, eax
.text:0000000000003875
.text:0000000000003875 loc_3875:                               ; CODE XREF: add_line_number_isra_2+AE↑j
.text:0000000000003875                                         ; add_line_number_isra_2+B7↑j
.text:0000000000003875                 pop     rbx
.text:0000000000003876                 pop     rbp
.text:0000000000003877                 pop     r12
.text:0000000000003879                 retn
.text:0000000000003879 ; ---------------------------------------------------------------------------
.text:000000000000387A                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: add_line_number_isra_2+7E↑j
.text:0000000000003880                 cmp     dil, 9
.text:0000000000003884                 jz      short loc_388B
.text:0000000000003886                 call    qword ptr [rbp+0]
.text:0000000000003889                 jmp     short loc_3857
.text:000000000000388B ; ---------------------------------------------------------------------------
.text:000000000000388B
.text:000000000000388B loc_388B:                               ; CODE XREF: add_line_number_isra_2+D4↑j
.text:000000000000388B                 mov     eax, cs:number_width
.text:0000000000003891                 sub     eax, cs:chars_per_number
.text:0000000000003897                 test    eax, eax
.text:0000000000003899                 lea     ebx, [rax-1]
.text:000000000000389C                 jle     short loc_3857
.text:000000000000389E                 xchg    ax, ax
.text:00000000000038A0
.text:00000000000038A0 loc_38A0:                               ; CODE XREF: add_line_number_isra_2+FE↓j
.text:00000000000038A0                 sub     ebx, 1
.text:00000000000038A3                 mov     edi, 20h ; ' '
.text:00000000000038A8                 call    qword ptr [rbp+0]
.text:00000000000038AB                 cmp     ebx, 0FFFFFFFFh
.text:00000000000038AE                 jnz     short loc_38A0
.text:00000000000038B0                 jmp     short loc_3857
.text:00000000000038B0 ; } // starts at 37B0
.text:00000000000038B0 add_line_number_isra_2 endp
.text:00000000000038B0
.text:00000000000038B0 ; ---------------------------------------------------------------------------
.text:00000000000038B2                 align 20h
.text:00000000000038C0
.text:00000000000038C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038C0
.text:00000000000038C0
.text:00000000000038C0 align_column    proc near               ; CODE XREF: read_line+E7↓p
.text:00000000000038C0                                         ; print_files+9C3↓p
.text:00000000000038C0 ; __unwind {
.text:00000000000038C0                 push    rbx
.text:00000000000038C1                 mov     eax, cs:col_sep_length
.text:00000000000038C7                 mov     rbx, rdi
.text:00000000000038CA                 mov     edi, [rdi+34h]
.text:00000000000038CD                 cmp     edi, eax
.text:00000000000038CF                 mov     cs:padding_not_printed, edi
.text:00000000000038D5                 jg      short loc_3910
.text:00000000000038D7
.text:00000000000038D7 loc_38D7:                               ; CODE XREF: align_column+61↓j
.text:00000000000038D7                 cmp     cs:use_col_separator, 0
.text:00000000000038DE                 jnz     short loc_3900
.text:00000000000038E0
.text:00000000000038E0 loc_38E0:                               ; CODE XREF: align_column+45↓j
.text:00000000000038E0                 cmp     byte ptr [rbx+38h], 0
.text:00000000000038E4                 jnz     short loc_38F0
.text:00000000000038E6                 pop     rbx
.text:00000000000038E7                 retn
.text:00000000000038E7 ; ---------------------------------------------------------------------------
.text:00000000000038E8                 align 10h
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: align_column+24↑j
.text:00000000000038F0                 lea     rdi, [rbx+20h]
.text:00000000000038F4                 pop     rbx
.text:00000000000038F5                 jmp     add_line_number_isra_2
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038FA                 align 20h
.text:0000000000003900
.text:0000000000003900 loc_3900:                               ; CODE XREF: align_column+1E↑j
.text:0000000000003900                 call    print_sep_string
.text:0000000000003905                 jmp     short loc_38E0
.text:0000000000003905 ; ---------------------------------------------------------------------------
.text:0000000000003907                 align 10h
.text:0000000000003910
.text:0000000000003910 loc_3910:                               ; CODE XREF: align_column+15↑j
.text:0000000000003910                 sub     edi, eax
.text:0000000000003912                 call    pad_across_to
.text:0000000000003917                 mov     cs:padding_not_printed, 0
.text:0000000000003921                 jmp     short loc_38D7
.text:0000000000003921 ; } // starts at 38C0
.text:0000000000003921 align_column    endp
.text:0000000000003921
.text:0000000000003921 ; ---------------------------------------------------------------------------
.text:0000000000003923                 align 10h
.text:0000000000003930
.text:0000000000003930 ; =============== S U B R O U T I N E =======================================
.text:0000000000003930
.text:0000000000003930
.text:0000000000003930 close_file_part_4 proc near             ; CODE XREF: skip_read+10E↓p
.text:0000000000003930                                         ; read_rest_of_line+9F↓j ...
.text:0000000000003930 ; __unwind {
.text:0000000000003930                 push    rbx
.text:0000000000003931                 mov     rbx, rdi
.text:0000000000003934                 mov     rdi, [rdi]      ; stream
.text:0000000000003937                 test    byte ptr [rdi], 20h
.text:000000000000393A                 jnz     loc_3A00
.text:0000000000003940                 call    _fileno
.text:0000000000003945                 test    eax, eax
.text:0000000000003947                 jnz     short loc_39C0
.text:0000000000003949
.text:0000000000003949 loc_3949:                               ; CODE XREF: close_file_part_4+9A↓j
.text:0000000000003949                 cmp     cs:parallel_files, 0
.text:0000000000003950                 jnz     short loc_39A0
.text:0000000000003952                 mov     edx, cs:columns
.text:0000000000003958                 mov     rcx, cs:column_vector
.text:000000000000395F                 test    edx, edx
.text:0000000000003961                 jz      short loc_39AE
.text:0000000000003963                 sub     edx, 1
.text:0000000000003966                 lea     rax, [rcx+10h]
.text:000000000000396A                 shl     rdx, 6
.text:000000000000396E                 lea     rdx, [rcx+rdx+50h]
.text:0000000000003973                 nop     dword ptr [rax+rax+00h]
.text:0000000000003978
.text:0000000000003978 loc_3978:                               ; CODE XREF: close_file_part_4+63↓j
.text:0000000000003978                 mov     ecx, [rax+1Ch]
.text:000000000000397B                 mov     dword ptr [rax], 3
.text:0000000000003981                 test    ecx, ecx
.text:0000000000003983                 jnz     short loc_398C
.text:0000000000003985                 mov     dword ptr [rax+20h], 0
.text:000000000000398C
.text:000000000000398C loc_398C:                               ; CODE XREF: close_file_part_4+53↑j
.text:000000000000398C                 add     rax, 40h ; '@'
.text:0000000000003990                 cmp     rax, rdx
.text:0000000000003993                 jnz     short loc_3978
.text:0000000000003995                 sub     cs:files_ready_to_read, 1
.text:000000000000399C                 pop     rbx
.text:000000000000399D                 retn
.text:000000000000399D ; ---------------------------------------------------------------------------
.text:000000000000399E                 align 20h
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: close_file_part_4+20↑j
.text:00000000000039A0                 mov     dword ptr [rbx+10h], 3
.text:00000000000039A7                 mov     dword ptr [rbx+30h], 0
.text:00000000000039AE
.text:00000000000039AE loc_39AE:                               ; CODE XREF: close_file_part_4+31↑j
.text:00000000000039AE                 sub     cs:files_ready_to_read, 1
.text:00000000000039B5                 pop     rbx
.text:00000000000039B6                 retn
.text:00000000000039B6 ; ---------------------------------------------------------------------------
.text:00000000000039B7                 align 20h
.text:00000000000039C0
.text:00000000000039C0 loc_39C0:                               ; CODE XREF: close_file_part_4+17↑j
.text:00000000000039C0                 mov     rdi, [rbx]      ; stream
.text:00000000000039C3                 call    rpl_fclose
.text:00000000000039C8                 test    eax, eax
.text:00000000000039CA                 jz      loc_3949
.text:00000000000039D0                 mov     rdx, [rbx+8]
.text:00000000000039D4                 mov     esi, 3
.text:00000000000039D9                 xor     edi, edi
.text:00000000000039DB                 call    quotearg_n_style_colon
.text:00000000000039E0                 mov     rbx, rax
.text:00000000000039E3                 call    ___errno_location
.text:00000000000039E8                 mov     esi, [rax]      ; errnum
.text:00000000000039EA                 lea     rdx, format+4   ; format
.text:00000000000039F1                 mov     rcx, rbx
.text:00000000000039F4                 mov     edi, 1          ; status
.text:00000000000039F9                 xor     eax, eax
.text:00000000000039FB                 call    _error
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: close_file_part_4+A↑j
.text:0000000000003A00                 mov     rdx, [rbx+8]
.text:0000000000003A04                 mov     esi, 3
.text:0000000000003A09                 xor     edi, edi
.text:0000000000003A0B                 call    quotearg_n_style_colon
.text:0000000000003A10                 mov     rbx, rax
.text:0000000000003A13                 call    ___errno_location
.text:0000000000003A18                 mov     esi, [rax]      ; errnum
.text:0000000000003A1A                 lea     rdx, format+4   ; format
.text:0000000000003A21                 mov     rcx, rbx
.text:0000000000003A24                 mov     edi, 1          ; status
.text:0000000000003A29                 xor     eax, eax
.text:0000000000003A2B                 call    _error
.text:0000000000003A2B ; } // starts at 3930
.text:0000000000003A2B close_file_part_4 endp ; sp-analysis failed
.text:0000000000003A2B
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30 skip_read       proc near               ; CODE XREF: print_files+BF4↓p
.text:0000000000003A30                                         ; print_files+C4C↓p
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 push    r13
.text:0000000000003A32                 push    r12
.text:0000000000003A34                 mov     r13, rdi
.text:0000000000003A37                 push    rbp
.text:0000000000003A38                 push    rbx
.text:0000000000003A39                 mov     r12d, esi
.text:0000000000003A3C                 sub     rsp, 8
.text:0000000000003A40                 mov     rbx, [rdi]
.text:0000000000003A43                 mov     rax, [rbx+8]
.text:0000000000003A47                 cmp     rax, [rbx+10h]
.text:0000000000003A4B                 jnb     loc_3C10
.text:0000000000003A51                 lea     rdx, [rax+1]
.text:0000000000003A55                 mov     [rbx+8], rdx
.text:0000000000003A59                 movzx   eax, byte ptr [rax]
.text:0000000000003A5C
.text:0000000000003A5C loc_3A5C:                               ; CODE XREF: skip_read+1E8↓j
.text:0000000000003A5C                 cmp     eax, 0Ch
.text:0000000000003A5F                 jz      loc_3AF0
.text:0000000000003A65                 mov     byte ptr [r13+39h], 0
.text:0000000000003A6A                 xor     ebp, ebp
.text:0000000000003A6C
.text:0000000000003A6C loc_3A6C:                               ; CODE XREF: skip_read+F9↓j
.text:0000000000003A6C                 cmp     cs:last_line, 0
.text:0000000000003A73                 jnz     short loc_3AE8
.text:0000000000003A75
.text:0000000000003A75 loc_3A75:                               ; CODE XREF: skip_read+B0↓j
.text:0000000000003A75                                         ; skip_read+BD↓j
.text:0000000000003A75                 cmp     eax, 0Ah
.text:0000000000003A78                 jz      short loc_3AA6
.text:0000000000003A7A
.text:0000000000003A7A loc_3A7A:                               ; CODE XREF: skip_read+74↓j
.text:0000000000003A7A                 cmp     eax, 0Ch
.text:0000000000003A7D                 jz      loc_3B50
.text:0000000000003A83                 cmp     eax, 0FFFFFFFFh
.text:0000000000003A86                 jz      loc_3B30
.text:0000000000003A8C                 mov     rax, [rbx+8]
.text:0000000000003A90                 cmp     rax, [rbx+10h]
.text:0000000000003A94                 jnb     short loc_3AD8
.text:0000000000003A96                 lea     rdx, [rax+1]
.text:0000000000003A9A                 mov     [rbx+8], rdx
.text:0000000000003A9E                 movzx   eax, byte ptr [rax]
.text:0000000000003AA1                 cmp     eax, 0Ah
.text:0000000000003AA4                 jnz     short loc_3A7A
.text:0000000000003AA6
.text:0000000000003AA6 loc_3AA6:                               ; CODE XREF: skip_read+48↑j
.text:0000000000003AA6                                         ; skip_read+105↓j ...
.text:0000000000003AA6                 cmp     cs:skip_count, 0
.text:0000000000003AAD                 jz      short loc_3ACA
.text:0000000000003AAF                 cmp     cs:parallel_files, 1
.text:0000000000003AB6                 jnz     short loc_3ABE
.text:0000000000003AB8                 cmp     r12d, 1
.text:0000000000003ABC                 jnz     short loc_3ACA
.text:0000000000003ABE
.text:0000000000003ABE loc_3ABE:                               ; CODE XREF: skip_read+86↑j
.text:0000000000003ABE                 test    bpl, bpl
.text:0000000000003AC1                 jnz     short loc_3ACA
.text:0000000000003AC3                 add     cs:line_count, 1
.text:0000000000003ACA
.text:0000000000003ACA loc_3ACA:                               ; CODE XREF: skip_read+7D↑j
.text:0000000000003ACA                                         ; skip_read+8C↑j ...
.text:0000000000003ACA                 add     rsp, 8
.text:0000000000003ACE                 pop     rbx
.text:0000000000003ACF                 pop     rbp
.text:0000000000003AD0                 pop     r12
.text:0000000000003AD2                 pop     r13
.text:0000000000003AD4                 retn
.text:0000000000003AD4 ; ---------------------------------------------------------------------------
.text:0000000000003AD5                 align 8
.text:0000000000003AD8
.text:0000000000003AD8 loc_3AD8:                               ; CODE XREF: skip_read+64↑j
.text:0000000000003AD8                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003ADB                 call    ___uflow
.text:0000000000003AE0                 jmp     short loc_3A75
.text:0000000000003AE0 ; ---------------------------------------------------------------------------
.text:0000000000003AE2                 align 8
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: skip_read+43↑j
.text:0000000000003AE8                 mov     byte ptr [r13+39h], 1
.text:0000000000003AED                 jmp     short loc_3A75
.text:0000000000003AED ; ---------------------------------------------------------------------------
.text:0000000000003AEF                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: skip_read+2F↑j
.text:0000000000003AF0                 cmp     byte ptr [r13+39h], 0
.text:0000000000003AF5                 jz      loc_3BD0
.text:0000000000003AFB                 mov     rax, [rbx+8]
.text:0000000000003AFF                 cmp     rax, [rbx+10h]
.text:0000000000003B03                 jnb     loc_3C63
.text:0000000000003B09                 lea     rdx, [rax+1]
.text:0000000000003B0D                 mov     [rbx+8], rdx
.text:0000000000003B11                 movzx   eax, byte ptr [rax]
.text:0000000000003B14
.text:0000000000003B14 loc_3B14:                               ; CODE XREF: skip_read+23B↓j
.text:0000000000003B14                 cmp     eax, 0Ah
.text:0000000000003B17                 jz      loc_3C3A
.text:0000000000003B1D
.text:0000000000003B1D loc_3B1D:                               ; CODE XREF: skip_read+21F↓j
.text:0000000000003B1D                                         ; skip_read+248↓j
.text:0000000000003B1D                 cmp     eax, 0Ch
.text:0000000000003B20                 mov     byte ptr [r13+39h], 0
.text:0000000000003B25                 setz    bpl
.text:0000000000003B29                 jmp     loc_3A6C
.text:0000000000003B29 ; ---------------------------------------------------------------------------
.text:0000000000003B2E                 align 10h
.text:0000000000003B30
.text:0000000000003B30 loc_3B30:                               ; CODE XREF: skip_read+56↑j
.text:0000000000003B30                 cmp     dword ptr [r13+10h], 3
.text:0000000000003B35                 jz      loc_3AA6
.text:0000000000003B3B                 mov     rdi, r13
.text:0000000000003B3E                 call    close_file_part_4
.text:0000000000003B43                 jmp     loc_3AA6
.text:0000000000003B43 ; ---------------------------------------------------------------------------
.text:0000000000003B48                 align 10h
.text:0000000000003B50
.text:0000000000003B50 loc_3B50:                               ; CODE XREF: skip_read+4D↑j
.text:0000000000003B50                 movzx   eax, cs:last_line
.text:0000000000003B57
.text:0000000000003B57 loc_3B57:                               ; CODE XREF: skip_read+1B3↓j
.text:0000000000003B57                 test    al, al
.text:0000000000003B59                 jz      short loc_3B9C
.text:0000000000003B5B                 cmp     cs:parallel_files, 0
.text:0000000000003B62                 jnz     loc_3C30
.text:0000000000003B68                 mov     edx, cs:columns
.text:0000000000003B6E                 mov     rcx, cs:column_vector
.text:0000000000003B75                 test    edx, edx
.text:0000000000003B77                 jz      short loc_3B9C
.text:0000000000003B79                 sub     edx, 1
.text:0000000000003B7C                 lea     rax, [rcx+39h]
.text:0000000000003B80                 shl     rdx, 6
.text:0000000000003B84                 lea     rdx, [rcx+rdx+79h]
.text:0000000000003B89                 nop     dword ptr [rax+00000000h]
.text:0000000000003B90
.text:0000000000003B90 loc_3B90:                               ; CODE XREF: skip_read+16A↓j
.text:0000000000003B90                 mov     byte ptr [rax], 0
.text:0000000000003B93                 add     rax, 40h ; '@'
.text:0000000000003B97                 cmp     rax, rdx
.text:0000000000003B9A                 jnz     short loc_3B90
.text:0000000000003B9C
.text:0000000000003B9C loc_3B9C:                               ; CODE XREF: skip_read+129↑j
.text:0000000000003B9C                                         ; skip_read+147↑j ...
.text:0000000000003B9C                 mov     rax, [rbx+8]
.text:0000000000003BA0                 cmp     rax, [rbx+10h]
.text:0000000000003BA4                 jnb     loc_3C54
.text:0000000000003BAA                 lea     rdx, [rax+1]
.text:0000000000003BAE                 mov     [rbx+8], rdx
.text:0000000000003BB2                 movzx   edi, byte ptr [rax] ; c
.text:0000000000003BB5
.text:0000000000003BB5 loc_3BB5:                               ; CODE XREF: skip_read+22E↓j
.text:0000000000003BB5                 cmp     edi, 0Ah
.text:0000000000003BB8                 jnz     short loc_3BF0
.text:0000000000003BBA                 lea     rsi, [r13+30h]
.text:0000000000003BBE                 lea     rdi, [r13+10h]
.text:0000000000003BC2                 call    hold_file_isra_1
.text:0000000000003BC7                 jmp     loc_3AA6
.text:0000000000003BC7 ; ---------------------------------------------------------------------------
.text:0000000000003BCC                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 loc_3BD0:                               ; CODE XREF: skip_read+C5↑j
.text:0000000000003BD0                 movzx   ebp, cs:last_line
.text:0000000000003BD7                 test    bpl, bpl
.text:0000000000003BDA                 mov     eax, ebp
.text:0000000000003BDC                 jz      short loc_3C20
.text:0000000000003BDE                 mov     byte ptr [r13+39h], 1
.text:0000000000003BE3                 jmp     loc_3B57
.text:0000000000003BE3 ; ---------------------------------------------------------------------------
.text:0000000000003BE8                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 loc_3BF0:                               ; CODE XREF: skip_read+188↑j
.text:0000000000003BF0                 mov     rsi, rbx        ; stream
.text:0000000000003BF3                 call    _ungetc
.text:0000000000003BF8                 lea     rsi, [r13+30h]
.text:0000000000003BFC                 lea     rdi, [r13+10h]
.text:0000000000003C00                 call    hold_file_isra_1
.text:0000000000003C05                 jmp     loc_3AA6
.text:0000000000003C05 ; ---------------------------------------------------------------------------
.text:0000000000003C0A                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: skip_read+1B↑j
.text:0000000000003C10                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003C13                 call    ___uflow
.text:0000000000003C18                 jmp     loc_3A5C
.text:0000000000003C18 ; ---------------------------------------------------------------------------
.text:0000000000003C1D                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: skip_read+1AC↑j
.text:0000000000003C20                 mov     ebp, 1
.text:0000000000003C25                 jmp     loc_3B9C
.text:0000000000003C25 ; ---------------------------------------------------------------------------
.text:0000000000003C2A                 align 10h
.text:0000000000003C30
.text:0000000000003C30 loc_3C30:                               ; CODE XREF: skip_read+132↑j
.text:0000000000003C30                 mov     byte ptr [r13+39h], 0
.text:0000000000003C35                 jmp     loc_3B9C
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3A
.text:0000000000003C3A loc_3C3A:                               ; CODE XREF: skip_read+E7↑j
.text:0000000000003C3A                 mov     rax, [rbx+8]
.text:0000000000003C3E                 cmp     rax, [rbx+10h]
.text:0000000000003C42                 jnb     short loc_3C70
.text:0000000000003C44                 lea     rdx, [rax+1]
.text:0000000000003C48                 mov     [rbx+8], rdx
.text:0000000000003C4C                 movzx   eax, byte ptr [rax]
.text:0000000000003C4F                 jmp     loc_3B1D
.text:0000000000003C54 ; ---------------------------------------------------------------------------
.text:0000000000003C54
.text:0000000000003C54 loc_3C54:                               ; CODE XREF: skip_read+174↑j
.text:0000000000003C54                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003C57                 call    ___uflow
.text:0000000000003C5C                 mov     edi, eax
.text:0000000000003C5E                 jmp     loc_3BB5
.text:0000000000003C63 ; ---------------------------------------------------------------------------
.text:0000000000003C63
.text:0000000000003C63 loc_3C63:                               ; CODE XREF: skip_read+D3↑j
.text:0000000000003C63                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003C66                 call    ___uflow
.text:0000000000003C6B                 jmp     loc_3B14
.text:0000000000003C70 ; ---------------------------------------------------------------------------
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: skip_read+212↑j
.text:0000000000003C70                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003C73                 call    ___uflow
.text:0000000000003C78                 jmp     loc_3B1D
.text:0000000000003C78 ; } // starts at 3A30
.text:0000000000003C78 skip_read       endp
.text:0000000000003C78
.text:0000000000003C78 ; ---------------------------------------------------------------------------
.text:0000000000003C7D                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80 read_rest_of_line proc near             ; CODE XREF: print_files+983↓p
.text:0000000000003C80                                         ; print_files+A13↓p
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 push    rbp
.text:0000000000003C81                 push    rbx
.text:0000000000003C82                 mov     rbp, rdi
.text:0000000000003C85                 sub     rsp, 8
.text:0000000000003C89                 mov     rbx, [rdi]
.text:0000000000003C8C                 jmp     short loc_3CAA
.text:0000000000003C8C ; ---------------------------------------------------------------------------
.text:0000000000003C8E                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: read_rest_of_line+32↓j
.text:0000000000003C90                 lea     rdx, [rax+1]
.text:0000000000003C94                 mov     [rbx+8], rdx
.text:0000000000003C98                 movzx   eax, byte ptr [rax]
.text:0000000000003C9B                 cmp     eax, 0Ah
.text:0000000000003C9E                 jz      short loc_3CC1
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: read_rest_of_line+3F↓j
.text:0000000000003CA0                 cmp     eax, 0Ch
.text:0000000000003CA3                 jz      short loc_3CD0
.text:0000000000003CA5                 cmp     eax, 0FFFFFFFFh
.text:0000000000003CA8                 jz      short loc_3D10
.text:0000000000003CAA
.text:0000000000003CAA loc_3CAA:                               ; CODE XREF: read_rest_of_line+C↑j
.text:0000000000003CAA                 mov     rax, [rbx+8]
.text:0000000000003CAE                 cmp     rax, [rbx+10h]
.text:0000000000003CB2                 jb      short loc_3C90
.text:0000000000003CB4                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003CB7                 call    ___uflow
.text:0000000000003CBC                 cmp     eax, 0Ah
.text:0000000000003CBF                 jnz     short loc_3CA0
.text:0000000000003CC1
.text:0000000000003CC1 loc_3CC1:                               ; CODE XREF: read_rest_of_line+1E↑j
.text:0000000000003CC1                                         ; read_rest_of_line+94↓j
.text:0000000000003CC1                 add     rsp, 8
.text:0000000000003CC5                 pop     rbx
.text:0000000000003CC6                 pop     rbp
.text:0000000000003CC7                 retn
.text:0000000000003CC7 ; ---------------------------------------------------------------------------
.text:0000000000003CC8                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 loc_3CD0:                               ; CODE XREF: read_rest_of_line+23↑j
.text:0000000000003CD0                 mov     rax, [rbx+8]
.text:0000000000003CD4                 cmp     rax, [rbx+10h]
.text:0000000000003CD8                 jnb     short loc_3D3B
.text:0000000000003CDA                 lea     rdx, [rax+1]
.text:0000000000003CDE                 mov     [rbx+8], rdx
.text:0000000000003CE2                 movzx   edi, byte ptr [rax] ; c
.text:0000000000003CE5
.text:0000000000003CE5 loc_3CE5:                               ; CODE XREF: read_rest_of_line+C5↓j
.text:0000000000003CE5                 cmp     edi, 0Ah
.text:0000000000003CE8                 jnz     short loc_3D28
.text:0000000000003CEA                 cmp     cs:keep_FF, 0
.text:0000000000003CF1                 jz      short loc_3CFA
.text:0000000000003CF3
.text:0000000000003CF3 loc_3CF3:                               ; CODE XREF: read_rest_of_line+B7↓j
.text:0000000000003CF3                 mov     cs:print_a_FF, 1
.text:0000000000003CFA
.text:0000000000003CFA loc_3CFA:                               ; CODE XREF: read_rest_of_line+71↑j
.text:0000000000003CFA                                         ; read_rest_of_line+B9↓j
.text:0000000000003CFA                 add     rsp, 8
.text:0000000000003CFE                 lea     rsi, [rbp+30h]
.text:0000000000003D02                 lea     rdi, [rbp+10h]
.text:0000000000003D06                 pop     rbx
.text:0000000000003D07                 pop     rbp
.text:0000000000003D08                 jmp     hold_file_isra_1
.text:0000000000003D08 ; ---------------------------------------------------------------------------
.text:0000000000003D0D                 align 10h
.text:0000000000003D10
.text:0000000000003D10 loc_3D10:                               ; CODE XREF: read_rest_of_line+28↑j
.text:0000000000003D10                 cmp     dword ptr [rbp+10h], 3
.text:0000000000003D14                 jz      short loc_3CC1
.text:0000000000003D16                 add     rsp, 8
.text:0000000000003D1A                 mov     rdi, rbp
.text:0000000000003D1D                 pop     rbx
.text:0000000000003D1E                 pop     rbp
.text:0000000000003D1F                 jmp     close_file_part_4
.text:0000000000003D1F ; ---------------------------------------------------------------------------
.text:0000000000003D24                 align 8
.text:0000000000003D28
.text:0000000000003D28 loc_3D28:                               ; CODE XREF: read_rest_of_line+68↑j
.text:0000000000003D28                 mov     rsi, rbx        ; stream
.text:0000000000003D2B                 call    _ungetc
.text:0000000000003D30                 cmp     cs:keep_FF, 0
.text:0000000000003D37                 jnz     short loc_3CF3
.text:0000000000003D39                 jmp     short loc_3CFA
.text:0000000000003D3B ; ---------------------------------------------------------------------------
.text:0000000000003D3B
.text:0000000000003D3B loc_3D3B:                               ; CODE XREF: read_rest_of_line+58↑j
.text:0000000000003D3B                 mov     rdi, rbx        ; _IO_FILE *
.text:0000000000003D3E                 call    ___uflow
.text:0000000000003D43                 mov     edi, eax
.text:0000000000003D45                 jmp     short loc_3CE5
.text:0000000000003D45 ; } // starts at 3C80
.text:0000000000003D45 read_rest_of_line endp
.text:0000000000003D45
.text:0000000000003D45 ; ---------------------------------------------------------------------------
.text:0000000000003D47                 align 10h
.text:0000000000003D50
.text:0000000000003D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D50
.text:0000000000003D50
.text:0000000000003D50 read_line       proc near               ; CODE XREF: print_files+8E7↓p
.text:0000000000003D50                                         ; DATA XREF: print_files+439↓o ...
.text:0000000000003D50 ; __unwind {
.text:0000000000003D50                 push    r14
.text:0000000000003D52                 push    r13
.text:0000000000003D54                 push    r12
.text:0000000000003D56                 push    rbp
.text:0000000000003D57                 push    rbx
.text:0000000000003D58                 mov     rbx, rdi
.text:0000000000003D5B                 mov     rdi, [rdi]      ; _IO_FILE *
.text:0000000000003D5E                 mov     rax, [rdi+8]
.text:0000000000003D62                 cmp     rax, [rdi+10h]
.text:0000000000003D66                 jnb     loc_4120
.text:0000000000003D6C                 lea     rdx, [rax+1]
.text:0000000000003D70                 mov     [rdi+8], rdx
.text:0000000000003D74                 movzx   ebp, byte ptr [rax]
.text:0000000000003D77
.text:0000000000003D77 loc_3D77:                               ; CODE XREF: read_line+3D7↓j
.text:0000000000003D77                 cmp     ebp, 0Ch
.text:0000000000003D7A                 mov     r13d, cs:input_position
.text:0000000000003D81                 jz      loc_3FA0
.text:0000000000003D87
.text:0000000000003D87 loc_3D87:                               ; CODE XREF: read_line+278↓j
.text:0000000000003D87                                         ; read_line+29A↓j ...
.text:0000000000003D87                 cmp     ebp, 0Ah
.text:0000000000003D8A                 mov     byte ptr [rbx+39h], 0
.text:0000000000003D8E                 jz      short loc_3DAE
.text:0000000000003D90                 cmp     ebp, 0Ch
.text:0000000000003D93                 jz      loc_3FF0
.text:0000000000003D99                 cmp     ebp, 0FFFFFFFFh
.text:0000000000003D9C                 jz      loc_3EA0
.text:0000000000003DA2                 movsx   edi, bpl
.text:0000000000003DA6                 call    char_to_clump
.text:0000000000003DAB                 mov     r12d, eax
.text:0000000000003DAE
.text:0000000000003DAE loc_3DAE:                               ; CODE XREF: read_line+3E↑j
.text:0000000000003DAE                 cmp     cs:truncate_lines, 0
.text:0000000000003DB5                 jnz     loc_3E78
.text:0000000000003DBB
.text:0000000000003DBB loc_3DBB:                               ; CODE XREF: read_line+134↓j
.text:0000000000003DBB                 lea     rax, store_char
.text:0000000000003DC2                 cmp     [rbx+20h], rax
.text:0000000000003DC6                 jz      loc_3EE1
.text:0000000000003DCC                 cmp     cs:print_a_header, 0
.text:0000000000003DD3                 mov     cs:pad_vertically, 1
.text:0000000000003DDA                 jz      short loc_3DE9
.text:0000000000003DDC                 cmp     cs:storing_columns, 0
.text:0000000000003DE3                 jz      loc_4130
.text:0000000000003DE9
.text:0000000000003DE9 loc_3DE9:                               ; CODE XREF: read_line+8A↑j
.text:0000000000003DE9                                         ; read_line+3E5↓j
.text:0000000000003DE9                 cmp     cs:parallel_files, 0
.text:0000000000003DF0                 jz      loc_3EC0
.text:0000000000003DF6                 cmp     cs:align_empty_cols, 0
.text:0000000000003DFD                 jz      loc_3EC0
.text:0000000000003E03                 mov     eax, cs:separators_not_printed
.text:0000000000003E09                 mov     r13, cs:column_vector
.text:0000000000003E10                 mov     cs:separators_not_printed, 0
.text:0000000000003E1A                 test    eax, eax
.text:0000000000003E1C                 jle     short loc_3E48
.text:0000000000003E1E                 lea     r14d, [rax-1]
.text:0000000000003E22                 add     r14, 1
.text:0000000000003E26                 shl     r14, 6
.text:0000000000003E2A                 add     r14, r13
.text:0000000000003E2D                 nop     dword ptr [rax]
.text:0000000000003E30
.text:0000000000003E30 loc_3E30:                               ; CODE XREF: read_line+F6↓j
.text:0000000000003E30                 mov     rdi, r13
.text:0000000000003E33                 add     r13, 40h ; '@'
.text:0000000000003E37                 call    align_column
.text:0000000000003E3C                 add     cs:separators_not_printed, 1
.text:0000000000003E43                 cmp     r14, r13
.text:0000000000003E46                 jnz     short loc_3E30
.text:0000000000003E48
.text:0000000000003E48 loc_3E48:                               ; CODE XREF: read_line+CC↑j
.text:0000000000003E48                 cmp     cs:truncate_lines, 0
.text:0000000000003E4F                 mov     edi, [rbx+34h]
.text:0000000000003E52                 mov     cs:padding_not_printed, edi
.text:0000000000003E58                 jz      loc_4178
.text:0000000000003E5E                 mov     eax, cs:chars_per_column
.text:0000000000003E64                 mov     cs:spaces_not_printed, eax
.text:0000000000003E6A
.text:0000000000003E6A loc_3E6A:                               ; CODE XREF: read_line+432↓j
.text:0000000000003E6A                 mov     cs:align_empty_cols, 0
.text:0000000000003E71                 jmp     short loc_3EC6
.text:0000000000003E71 ; ---------------------------------------------------------------------------
.text:0000000000003E73                 align 8
.text:0000000000003E78
.text:0000000000003E78 loc_3E78:                               ; CODE XREF: read_line+65↑j
.text:0000000000003E78                 mov     eax, cs:chars_per_column
.text:0000000000003E7E                 cmp     cs:input_position, eax
.text:0000000000003E84                 jle     loc_3DBB
.text:0000000000003E8A                 pop     rbx
.text:0000000000003E8B                 mov     cs:input_position, r13d
.text:0000000000003E92                 xor     eax, eax
.text:0000000000003E94                 pop     rbp
.text:0000000000003E95                 pop     r12
.text:0000000000003E97                 pop     r13
.text:0000000000003E99                 pop     r14
.text:0000000000003E9B                 retn
.text:0000000000003E9B ; ---------------------------------------------------------------------------
.text:0000000000003E9C                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: read_line+4C↑j
.text:0000000000003EA0                                         ; read_line+201↓j
.text:0000000000003EA0                 cmp     dword ptr [rbx+10h], 3
.text:0000000000003EA4                 jnz     loc_4060
.text:0000000000003EAA
.text:0000000000003EAA loc_3EAA:                               ; CODE XREF: read_line+1A5↓j
.text:0000000000003EAA                                         ; read_line+1EF↓j
.text:0000000000003EAA                 mov     eax, 1
.text:0000000000003EAF
.text:0000000000003EAF loc_3EAF:                               ; CODE XREF: read_line+40A↓j
.text:0000000000003EAF                 pop     rbx
.text:0000000000003EB0                 pop     rbp
.text:0000000000003EB1                 pop     r12
.text:0000000000003EB3                 pop     r13
.text:0000000000003EB5                 pop     r14
.text:0000000000003EB7                 retn
.text:0000000000003EB7 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: read_line+A0↑j
.text:0000000000003EC0                                         ; read_line+AD↑j
.text:0000000000003EC0                 mov     edi, cs:padding_not_printed
.text:0000000000003EC6
.text:0000000000003EC6 loc_3EC6:                               ; CODE XREF: read_line+121↑j
.text:0000000000003EC6                 mov     eax, cs:col_sep_length
.text:0000000000003ECC                 cmp     eax, edi
.text:0000000000003ECE                 jl      loc_40A0
.text:0000000000003ED4
.text:0000000000003ED4 loc_3ED4:                               ; CODE XREF: read_line+361↓j
.text:0000000000003ED4                 cmp     cs:use_col_separator, 0
.text:0000000000003EDB                 jnz     loc_40C0
.text:0000000000003EE1
.text:0000000000003EE1 loc_3EE1:                               ; CODE XREF: read_line+76↑j
.text:0000000000003EE1                                         ; read_line+375↓j
.text:0000000000003EE1                 cmp     byte ptr [rbx+38h], 0
.text:0000000000003EE5                 jnz     loc_4108
.text:0000000000003EEB
.text:0000000000003EEB loc_3EEB:                               ; CODE XREF: read_line+3C1↓j
.text:0000000000003EEB                 cmp     ebp, 0Ah
.text:0000000000003EEE                 mov     cs:empty_line, 0
.text:0000000000003EF5                 jz      short loc_3EAA
.text:0000000000003EF7                 test    r12d, r12d
.text:0000000000003EFA                 mov     rbp, cs:clump_buff
.text:0000000000003F01                 jz      short loc_3F20
.text:0000000000003F03                 lea     eax, [r12-1]
.text:0000000000003F08                 lea     r12, [rbp+rax+1]
.text:0000000000003F0D                 nop     dword ptr [rax]
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: read_line+1CE↓j
.text:0000000000003F10                 add     rbp, 1
.text:0000000000003F14                 movsx   edi, byte ptr [rbp-1]
.text:0000000000003F18                 call    qword ptr [rbx+20h]
.text:0000000000003F1B                 cmp     r12, rbp
.text:0000000000003F1E                 jnz     short loc_3F10
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: read_line+1B1↑j
.text:0000000000003F20                                         ; read_line+22B↓j ...
.text:0000000000003F20                 mov     rdi, [rbx]      ; _IO_FILE *
.text:0000000000003F23                 mov     rax, [rdi+8]
.text:0000000000003F27                 cmp     rax, [rdi+10h]
.text:0000000000003F2B                 jnb     loc_4190
.text:0000000000003F31                 lea     rdx, [rax+1]
.text:0000000000003F35                 mov     [rdi+8], rdx
.text:0000000000003F39                 movzx   eax, byte ptr [rax]
.text:0000000000003F3C
.text:0000000000003F3C loc_3F3C:                               ; CODE XREF: read_line+445↓j
.text:0000000000003F3C                 cmp     eax, 0Ah
.text:0000000000003F3F                 jz      loc_3EAA
.text:0000000000003F45                 cmp     eax, 0Ch
.text:0000000000003F48                 jz      loc_40D0
.text:0000000000003F4E                 cmp     eax, 0FFFFFFFFh
.text:0000000000003F51                 jz      loc_3EA0
.text:0000000000003F57                 movsx   edi, al
.text:0000000000003F5A                 mov     ebp, cs:input_position
.text:0000000000003F60                 call    char_to_clump
.text:0000000000003F65                 cmp     cs:truncate_lines, 0
.text:0000000000003F6C                 jnz     loc_4140
.text:0000000000003F72
.text:0000000000003F72 loc_3F72:                               ; CODE XREF: read_line+3FC↓j
.text:0000000000003F72                 test    eax, eax
.text:0000000000003F74                 mov     rbp, cs:clump_buff
.text:0000000000003F7B                 jz      short loc_3F20
.text:0000000000003F7D                 sub     eax, 1
.text:0000000000003F80                 lea     r12, [rbp+rax+1]
.text:0000000000003F85                 nop     dword ptr [rax]
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: read_line+246↓j
.text:0000000000003F88                 add     rbp, 1
.text:0000000000003F8C                 movsx   edi, byte ptr [rbp-1]
.text:0000000000003F90                 call    qword ptr [rbx+20h]
.text:0000000000003F93                 cmp     rbp, r12
.text:0000000000003F96                 jnz     short loc_3F88
.text:0000000000003F98                 jmp     short loc_3F20
.text:0000000000003F98 ; ---------------------------------------------------------------------------
.text:0000000000003F9A                 align 20h
.text:0000000000003FA0
.text:0000000000003FA0 loc_3FA0:                               ; CODE XREF: read_line+31↑j
.text:0000000000003FA0                 cmp     byte ptr [rbx+39h], 0
.text:0000000000003FA4                 mov     rdi, [rbx]      ; _IO_FILE *
.text:0000000000003FA7                 mov     rax, [rdi+8]
.text:0000000000003FAB                 mov     rdx, [rdi+10h]
.text:0000000000003FAF                 jz      short loc_3FFB
.text:0000000000003FB1                 cmp     rdx, rax
.text:0000000000003FB4                 jbe     loc_41B0
.text:0000000000003FBA                 lea     rdx, [rax+1]
.text:0000000000003FBE                 mov     [rdi+8], rdx
.text:0000000000003FC2                 movzx   ebp, byte ptr [rax]
.text:0000000000003FC5
.text:0000000000003FC5 loc_3FC5:                               ; CODE XREF: read_line+467↓j
.text:0000000000003FC5                 cmp     ebp, 0Ah
.text:0000000000003FC8                 jnz     loc_3D87
.text:0000000000003FCE                 mov     rdi, [rbx]      ; _IO_FILE *
.text:0000000000003FD1                 mov     rax, [rdi+8]
.text:0000000000003FD5                 cmp     rax, [rdi+10h]
.text:0000000000003FD9                 jnb     loc_41C8
.text:0000000000003FDF                 lea     rdx, [rax+1]
.text:0000000000003FE3                 mov     [rdi+8], rdx
.text:0000000000003FE7                 movzx   ebp, byte ptr [rax]
.text:0000000000003FEA                 jmp     loc_3D87
.text:0000000000003FEA ; ---------------------------------------------------------------------------
.text:0000000000003FEF                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 loc_3FF0:                               ; CODE XREF: read_line+43↑j
.text:0000000000003FF0                 mov     rdi, [rbx]      ; _IO_FILE *
.text:0000000000003FF3                 mov     rax, [rdi+8]
.text:0000000000003FF7                 mov     rdx, [rdi+10h]
.text:0000000000003FFB
.text:0000000000003FFB loc_3FFB:                               ; CODE XREF: read_line+25F↑j
.text:0000000000003FFB                 cmp     rax, rdx
.text:0000000000003FFE                 jnb     loc_41A0
.text:0000000000004004                 lea     rdx, [rax+1]
.text:0000000000004008                 mov     [rdi+8], rdx
.text:000000000000400C                 movzx   edi, byte ptr [rax] ; c
.text:000000000000400F
.text:000000000000400F loc_400F:                               ; CODE XREF: read_line+457↓j
.text:000000000000400F                 cmp     edi, 0Ah
.text:0000000000004012                 jnz     short loc_4080
.text:0000000000004014                 cmp     cs:print_a_header, 0
.text:000000000000401B                 mov     cs:FF_only, 1
.text:0000000000004022                 jz      short loc_4031
.text:0000000000004024
.text:0000000000004024 loc_4024:                               ; CODE XREF: read_line+348↓j
.text:0000000000004024                 cmp     cs:storing_columns, 0
.text:000000000000402B                 jz      loc_4160
.text:0000000000004031
.text:0000000000004031 loc_4031:                               ; CODE XREF: read_line+2D2↑j
.text:0000000000004031                                         ; read_line+346↓j ...
.text:0000000000004031                 cmp     cs:keep_FF, 0
.text:0000000000004038                 jz      short loc_4041
.text:000000000000403A                 mov     cs:print_a_FF, 1
.text:0000000000004041
.text:0000000000004041 loc_4041:                               ; CODE XREF: read_line+2E8↑j
.text:0000000000004041                                         ; read_line+41C↓j
.text:0000000000004041                 lea     rsi, [rbx+30h]
.text:0000000000004045                 lea     rdi, [rbx+10h]
.text:0000000000004049                 call    hold_file_isra_1
.text:000000000000404E                 pop     rbx
.text:000000000000404F                 mov     eax, 1
.text:0000000000004054                 pop     rbp
.text:0000000000004055                 pop     r12
.text:0000000000004057                 pop     r13
.text:0000000000004059                 pop     r14
.text:000000000000405B                 retn
.text:000000000000405B ; ---------------------------------------------------------------------------
.text:000000000000405C                 align 20h
.text:0000000000004060
.text:0000000000004060 loc_4060:                               ; CODE XREF: read_line+154↑j
.text:0000000000004060                 mov     rdi, rbx
.text:0000000000004063                 call    close_file_part_4
.text:0000000000004068                 pop     rbx
.text:0000000000004069                 mov     eax, 1
.text:000000000000406E                 pop     rbp
.text:000000000000406F                 pop     r12
.text:0000000000004071                 pop     r13
.text:0000000000004073                 pop     r14
.text:0000000000004075                 retn
.text:0000000000004075 ; ---------------------------------------------------------------------------
.text:0000000000004076                 align 20h
.text:0000000000004080
.text:0000000000004080 loc_4080:                               ; CODE XREF: read_line+2C2↑j
.text:0000000000004080                 mov     rsi, [rbx]      ; stream
.text:0000000000004083                 call    _ungetc
.text:0000000000004088                 cmp     cs:print_a_header, 0
.text:000000000000408F                 mov     cs:FF_only, 1
.text:0000000000004096                 jz      short loc_4031
.text:0000000000004098                 jmp     short loc_4024
.text:0000000000004098 ; ---------------------------------------------------------------------------
.text:000000000000409A                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: read_line+17E↑j
.text:00000000000040A0                 sub     edi, eax
.text:00000000000040A2                 call    pad_across_to
.text:00000000000040A7                 mov     cs:padding_not_printed, 0
.text:00000000000040B1                 jmp     loc_3ED4
.text:00000000000040B1 ; ---------------------------------------------------------------------------
.text:00000000000040B6                 align 20h
.text:00000000000040C0
.text:00000000000040C0 loc_40C0:                               ; CODE XREF: read_line+18B↑j
.text:00000000000040C0                 call    print_sep_string
.text:00000000000040C5                 jmp     loc_3EE1
.text:00000000000040C5 ; ---------------------------------------------------------------------------
.text:00000000000040CA                 align 10h
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: read_line+1F8↑j
.text:00000000000040D0                 mov     rdi, [rbx]      ; _IO_FILE *
.text:00000000000040D3                 mov     rax, [rdi+8]
.text:00000000000040D7                 cmp     rax, [rdi+10h]
.text:00000000000040DB                 jnb     loc_41BC
.text:00000000000040E1                 lea     rdx, [rax+1]
.text:00000000000040E5                 mov     [rdi+8], rdx
.text:00000000000040E9                 movzx   edi, byte ptr [rax] ; c
.text:00000000000040EC
.text:00000000000040EC loc_40EC:                               ; CODE XREF: read_line+473↓j
.text:00000000000040EC                 cmp     edi, 0Ah
.text:00000000000040EF                 jz      loc_4031
.text:00000000000040F5                 mov     rsi, [rbx]      ; stream
.text:00000000000040F8                 call    _ungetc
.text:00000000000040FD                 jmp     loc_4031
.text:00000000000040FD ; ---------------------------------------------------------------------------
.text:0000000000004102                 align 8
.text:0000000000004108
.text:0000000000004108 loc_4108:                               ; CODE XREF: read_line+195↑j
.text:0000000000004108                 lea     rdi, [rbx+20h]
.text:000000000000410C                 call    add_line_number_isra_2
.text:0000000000004111                 jmp     loc_3EEB
.text:0000000000004111 ; ---------------------------------------------------------------------------
.text:0000000000004116                 align 20h
.text:0000000000004120
.text:0000000000004120 loc_4120:                               ; CODE XREF: read_line+16↑j
.text:0000000000004120                 call    ___uflow
.text:0000000000004125                 mov     ebp, eax
.text:0000000000004127                 jmp     loc_3D77
.text:0000000000004127 ; ---------------------------------------------------------------------------
.text:000000000000412C                 align 10h
.text:0000000000004130
.text:0000000000004130 loc_4130:                               ; CODE XREF: read_line+93↑j
.text:0000000000004130                 call    print_header
.text:0000000000004135                 jmp     loc_3DE9
.text:0000000000004135 ; ---------------------------------------------------------------------------
.text:000000000000413A                 align 20h
.text:0000000000004140
.text:0000000000004140 loc_4140:                               ; CODE XREF: read_line+21C↑j
.text:0000000000004140                 mov     ecx, cs:chars_per_column
.text:0000000000004146                 cmp     cs:input_position, ecx
.text:000000000000414C                 jle     loc_3F72
.text:0000000000004152                 mov     cs:input_position, ebp
.text:0000000000004158                 xor     eax, eax
.text:000000000000415A                 jmp     loc_3EAF
.text:000000000000415A ; ---------------------------------------------------------------------------
.text:000000000000415F                 align 20h
.text:0000000000004160
.text:0000000000004160 loc_4160:                               ; CODE XREF: read_line+2DB↑j
.text:0000000000004160                 mov     cs:pad_vertically, 1
.text:0000000000004167                 call    print_header
.text:000000000000416C                 jmp     loc_4041
.text:000000000000416C ; ---------------------------------------------------------------------------
.text:0000000000004171                 align 8
.text:0000000000004178
.text:0000000000004178 loc_4178:                               ; CODE XREF: read_line+108↑j
.text:0000000000004178                 mov     cs:spaces_not_printed, 0
.text:0000000000004182                 jmp     loc_3E6A
.text:0000000000004182 ; ---------------------------------------------------------------------------
.text:0000000000004187                 align 10h
.text:0000000000004190
.text:0000000000004190 loc_4190:                               ; CODE XREF: read_line+1DB↑j
.text:0000000000004190                 call    ___uflow
.text:0000000000004195                 jmp     loc_3F3C
.text:0000000000004195 ; ---------------------------------------------------------------------------
.text:000000000000419A                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: read_line+2AE↑j
.text:00000000000041A0                 call    ___uflow
.text:00000000000041A5                 mov     edi, eax
.text:00000000000041A7                 jmp     loc_400F
.text:00000000000041A7 ; ---------------------------------------------------------------------------
.text:00000000000041AC                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: read_line+264↑j
.text:00000000000041B0                 call    ___uflow
.text:00000000000041B5                 mov     ebp, eax
.text:00000000000041B7                 jmp     loc_3FC5
.text:00000000000041BC ; ---------------------------------------------------------------------------
.text:00000000000041BC
.text:00000000000041BC loc_41BC:                               ; CODE XREF: read_line+38B↑j
.text:00000000000041BC                 call    ___uflow
.text:00000000000041C1                 mov     edi, eax
.text:00000000000041C3                 jmp     loc_40EC
.text:00000000000041C8 ; ---------------------------------------------------------------------------
.text:00000000000041C8
.text:00000000000041C8 loc_41C8:                               ; CODE XREF: read_line+289↑j
.text:00000000000041C8                 call    ___uflow
.text:00000000000041CD                 mov     ebp, eax
.text:00000000000041CF                 jmp     loc_3D87
.text:00000000000041CF ; } // starts at 3D50
.text:00000000000041CF read_line       endp
.text:00000000000041CF
.text:00000000000041CF ; ---------------------------------------------------------------------------
.text:00000000000041D4                 align 20h
.text:00000000000041E0
.text:00000000000041E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041E0
.text:00000000000041E0
.text:00000000000041E0 open_file       proc near               ; CODE XREF: print_files+237↓p
.text:00000000000041E0                                         ; print_files+307↓p
.text:00000000000041E0 ; __unwind {
.text:00000000000041E0                 push    rbp
.text:00000000000041E1                 push    rbx
.text:00000000000041E2                 mov     rbp, rdi
.text:00000000000041E5                 lea     rdi, asc_E548+1 ; "-"
.text:00000000000041EC                 mov     rbx, rsi
.text:00000000000041EF                 mov     ecx, 2
.text:00000000000041F4                 sub     rsp, 8
.text:00000000000041F8                 mov     rsi, rbp
.text:00000000000041FB                 repe cmpsb
.text:00000000000041FD                 setnbe  al
.text:0000000000004200                 sbb     al, 0
.text:0000000000004202                 test    al, al
.text:0000000000004204                 jnz     short loc_4260
.text:0000000000004206                 lea     rsi, aStandardInput ; "standard input"
.text:000000000000420D                 xor     edi, edi        ; domainname
.text:000000000000420F                 mov     edx, 5          ; category
.text:0000000000004214                 call    _dcgettext
.text:0000000000004219                 mov     rdi, cs:stdin@@GLIBC_2_2_5
.text:0000000000004220                 mov     [rbx+8], rax
.text:0000000000004224                 mov     cs:have_read_stdin, 1
.text:000000000000422B                 test    rdi, rdi
.text:000000000000422E                 mov     [rbx], rdi
.text:0000000000004231                 jz      short loc_427E
.text:0000000000004233
.text:0000000000004233 loc_4233:                               ; CODE XREF: open_file+9C↓j
.text:0000000000004233                 mov     esi, 2
.text:0000000000004238                 call    fadvise
.text:000000000000423D                 mov     dword ptr [rbx+10h], 0
.text:0000000000004244                 mov     byte ptr [rbx+39h], 0
.text:0000000000004248                 mov     ebx, 1
.text:000000000000424D                 add     cs:total_files, 1
.text:0000000000004254                 add     rsp, 8
.text:0000000000004258                 mov     eax, ebx
.text:000000000000425A                 pop     rbx
.text:000000000000425B                 pop     rbp
.text:000000000000425C                 retn
.text:000000000000425C ; ---------------------------------------------------------------------------
.text:000000000000425D                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: open_file+24↑j
.text:0000000000004260                 lea     rsi, aFirstLineNumbe+10h ; "r"
.text:0000000000004267                 mov     rdi, rbp
.text:000000000000426A                 mov     [rbx+8], rbp
.text:000000000000426E                 call    fopen_safer
.text:0000000000004273                 mov     rdi, rax
.text:0000000000004276                 mov     [rbx], rax
.text:0000000000004279                 test    rdi, rdi
.text:000000000000427C                 jnz     short loc_4233
.text:000000000000427E
.text:000000000000427E loc_427E:                               ; CODE XREF: open_file+51↑j
.text:000000000000427E                 movzx   ebx, cs:ignore_failed_opens
.text:0000000000004285                 mov     cs:failed_opens, 1
.text:000000000000428C                 test    bl, bl
.text:000000000000428E                 jz      short loc_42A0
.text:0000000000004290                 xor     ebx, ebx
.text:0000000000004292                 add     rsp, 8
.text:0000000000004296                 mov     eax, ebx
.text:0000000000004298                 pop     rbx
.text:0000000000004299                 pop     rbp
.text:000000000000429A                 retn
.text:000000000000429A ; ---------------------------------------------------------------------------
.text:000000000000429B                 align 20h
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: open_file+AE↑j
.text:00000000000042A0                 mov     rdx, rbp
.text:00000000000042A3                 mov     esi, 3
.text:00000000000042A8                 call    quotearg_n_style_colon
.text:00000000000042AD                 mov     rbp, rax
.text:00000000000042B0                 call    ___errno_location
.text:00000000000042B5                 mov     esi, [rax]      ; errnum
.text:00000000000042B7                 lea     rdx, format+4   ; format
.text:00000000000042BE                 mov     rcx, rbp
.text:00000000000042C1                 xor     eax, eax
.text:00000000000042C3                 xor     edi, edi        ; status
.text:00000000000042C5                 call    _error
.text:00000000000042CA                 add     rsp, 8
.text:00000000000042CE                 mov     eax, ebx
.text:00000000000042D0                 pop     rbx
.text:00000000000042D1                 pop     rbp
.text:00000000000042D2                 retn
.text:00000000000042D2 ; } // starts at 41E0
.text:00000000000042D2 open_file       endp
.text:00000000000042D2
.text:00000000000042D2 ; ---------------------------------------------------------------------------
.text:00000000000042D3                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0 print_files     proc near               ; CODE XREF: main+294↑p
.text:00000000000042E0                                         ; main+75D↑p ...
.text:00000000000042E0
.text:00000000000042E0 var_40          = dword ptr -40h
.text:00000000000042E0 var_39          = byte ptr -39h
.text:00000000000042E0
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 push    r15
.text:00000000000042E2                 push    r14
.text:00000000000042E4                 push    r13
.text:00000000000042E6                 push    r12
.text:00000000000042E8                 mov     r12d, edi
.text:00000000000042EB                 push    rbp
.text:00000000000042EC                 push    rbx
.text:00000000000042ED                 mov     rbp, rsi
.text:00000000000042F0                 sub     rsp, 18h
.text:00000000000042F4                 mov     edx, cs:lines_per_page
.text:00000000000042FA                 lea     eax, [rdx-0Ah]
.text:00000000000042FD                 test    eax, eax
.text:00000000000042FF                 mov     cs:lines_per_body, eax
.text:0000000000004305                 jle     loc_4573
.text:000000000000430B                 cmp     cs:extremities, 0
.text:0000000000004312                 jz      loc_4581
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: print_files+2A7↓j
.text:0000000000004318                 cmp     cs:double_space, 0
.text:000000000000431F                 jz      short loc_4336
.text:0000000000004321                 mov     edx, cs:lines_per_body
.text:0000000000004327                 mov     eax, edx
.text:0000000000004329                 shr     eax, 1Fh
.text:000000000000432C                 add     eax, edx
.text:000000000000432E                 sar     eax, 1
.text:0000000000004330                 mov     cs:lines_per_body, eax
.text:0000000000004336
.text:0000000000004336 loc_4336:                               ; CODE XREF: print_files+3F↑j
.text:0000000000004336                 test    r12d, r12d
.text:0000000000004339                 jnz     loc_4557
.text:000000000000433F                 mov     ecx, cs:columns
.text:0000000000004345                 mov     cs:parallel_files, 0
.text:000000000000434C
.text:000000000000434C loc_434C:                               ; CODE XREF: print_files+28E↓j
.text:000000000000434C                                         ; print_files+FA8↓j
.text:000000000000434C                 cmp     cs:storing_columns, 0
.text:0000000000004353                 jz      short loc_435C
.text:0000000000004355                 mov     cs:balance_columns, 1
.text:000000000000435C
.text:000000000000435C loc_435C:                               ; CODE XREF: print_files+73↑j
.text:000000000000435C                 cmp     ecx, 1
.text:000000000000435F                 movzx   edx, cs:join_lines
.text:0000000000004366                 jle     loc_478A
.text:000000000000436C                 cmp     cs:use_col_separator, 0
.text:0000000000004373                 jnz     loc_458C
.text:0000000000004379                 test    dl, dl
.text:000000000000437B                 jnz     loc_479C
.text:0000000000004381                 lea     rax, asc_BECA   ; " "
.text:0000000000004388                 mov     cs:col_sep_string, rax
.text:000000000000438F
.text:000000000000438F loc_438F:                               ; CODE XREF: print_files+4CA↓j
.text:000000000000438F                 mov     cs:col_sep_length, 1
.text:0000000000004399                 mov     cs:use_col_separator, 1
.text:00000000000043A0                 mov     eax, 1
.text:00000000000043A5
.text:00000000000043A5 loc_43A5:                               ; CODE XREF: print_files+2B4↓j
.text:00000000000043A5                                         ; print_files+2BD↓j ...
.text:00000000000043A5                 mov     cs:truncate_lines, 1
.text:00000000000043AC                 mov     cs:tabify_output, 1
.text:00000000000043B3
.text:00000000000043B3 loc_43B3:                               ; CODE XREF: print_files+4B7↓j
.text:00000000000043B3                 test    dl, dl
.text:00000000000043B5                 jz      short loc_43BE
.text:00000000000043B7                 mov     cs:truncate_lines, 0
.text:00000000000043BE
.text:00000000000043BE loc_43BE:                               ; CODE XREF: print_files+D5↑j
.text:00000000000043BE                 movzx   esi, cs:numbered_lines
.text:00000000000043C5                 test    sil, sil
.text:00000000000043C8                 jz      loc_45D0
.text:00000000000043CE                 cmp     cs:number_separator, 9
.text:00000000000043D5                 mov     edx, cs:start_line_num
.text:00000000000043DB                 mov     cs:line_count, edx
.text:00000000000043E1                 mov     edx, cs:chars_per_number
.text:00000000000043E7                 jz      loc_515B
.text:00000000000043ED                 add     edx, 1
.text:00000000000043F0                 mov     cs:number_width, edx
.text:00000000000043F6
.text:00000000000043F6 loc_43F6:                               ; CODE XREF: print_files+E98↓j
.text:00000000000043F6                 cmp     cs:parallel_files, 0
.text:00000000000043FD                 jz      loc_45D0
.text:0000000000004403                 mov     edi, cs:number_width
.text:0000000000004409
.text:0000000000004409 loc_4409:                               ; CODE XREF: print_files+2F2↓j
.text:0000000000004409                 lea     edx, [rcx-1]
.text:000000000000440C                 imul    edx, eax
.text:000000000000440F                 jo      loc_528D
.text:0000000000004415
.text:0000000000004415 loc_4415:                               ; CODE XREF: print_files+FB2↓j
.text:0000000000004415                 mov     eax, cs:chars_per_line
.text:000000000000441B                 sub     eax, edi
.text:000000000000441D                 sub     eax, edx
.text:000000000000441F                 jo      loc_524F
.text:0000000000004425                 cdq
.text:0000000000004426                 idiv    ecx
.text:0000000000004428                 test    eax, eax
.text:000000000000442A                 mov     cs:chars_per_column, eax
.text:0000000000004430                 jle     loc_5259
.text:0000000000004436                 test    sil, sil
.text:0000000000004439                 jz      short loc_446C
.text:000000000000443B                 mov     rdi, cs:number_buff ; ptr
.text:0000000000004442                 call    _free
.text:0000000000004447                 cmp     cs:chars_per_number, 0Bh
.text:000000000000444E                 mov     edi, 0Bh
.text:0000000000004453                 cmovnb  edi, cs:chars_per_number
.text:000000000000445A                 mov     edi, edi
.text:000000000000445C                 add     rdi, 1
.text:0000000000004460                 call    xmalloc
.text:0000000000004465                 mov     cs:number_buff, rax
.text:000000000000446C
.text:000000000000446C loc_446C:                               ; CODE XREF: print_files+159↑j
.text:000000000000446C                 mov     rdi, cs:clump_buff ; ptr
.text:0000000000004473                 call    _free
.text:0000000000004478                 cmp     cs:chars_per_input_tab, 8
.text:000000000000447F                 mov     edi, 8
.text:0000000000004484                 cmovge  edi, cs:chars_per_input_tab
.text:000000000000448B                 movsxd  rdi, edi
.text:000000000000448E                 call    xmalloc
.text:0000000000004493                 mov     rdi, cs:column_vector ; ptr
.text:000000000000449A                 mov     cs:clump_buff, rax
.text:00000000000044A1                 mov     cs:total_files, 0
.text:00000000000044AB                 call    _free
.text:00000000000044B0                 movsxd  rdi, cs:columns
.text:00000000000044B7                 mov     edx, 40h ; '@'
.text:00000000000044BC                 xor     ecx, ecx
.text:00000000000044BE                 mov     rax, rdx
.text:00000000000044C1                 mul     rdi
.text:00000000000044C4                 jo      loc_5245
.text:00000000000044CA
.text:00000000000044CA loc_44CA:                               ; CODE XREF: print_files+F6A↓j
.text:00000000000044CA                 test    rax, rax
.text:00000000000044CD                 js      loc_527D
.text:00000000000044D3                 test    rcx, rcx
.text:00000000000044D6                 jnz     loc_527D
.text:00000000000044DC                 shl     rdi, 6
.text:00000000000044E0                 call    xmalloc
.text:00000000000044E5                 cmp     cs:parallel_files, 0
.text:00000000000044EC                 mov     rbx, rax
.text:00000000000044EF                 mov     cs:column_vector, rax
.text:00000000000044F6                 jz      loc_45D7
.text:00000000000044FC                 test    r12d, r12d
.text:00000000000044FF                 jz      short loc_4538
.text:0000000000004501                 lea     eax, [r12-1]
.text:0000000000004506                 lea     r12, [rbp+rax*8+8]
.text:000000000000450B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: print_files+256↓j
.text:0000000000004510                 mov     rdi, [rbp+0]
.text:0000000000004514                 mov     rsi, rbx
.text:0000000000004517                 call    open_file
.text:000000000000451C                 test    al, al
.text:000000000000451E                 jnz     short loc_452B
.text:0000000000004520                 sub     cs:columns, 1
.text:0000000000004527                 sub     rbx, 40h ; '@'
.text:000000000000452B
.text:000000000000452B loc_452B:                               ; CODE XREF: print_files+23E↑j
.text:000000000000452B                 add     rbp, 8
.text:000000000000452F                 add     rbx, 40h ; '@'
.text:0000000000004533                 cmp     rbp, r12
.text:0000000000004536                 jnz     short loc_4510
.text:0000000000004538
.text:0000000000004538 loc_4538:                               ; CODE XREF: print_files+21F↑j
.text:0000000000004538                 mov     r11d, cs:columns
.text:000000000000453F                 test    r11d, r11d
.text:0000000000004542                 jnz     loc_4FC4
.text:0000000000004548
.text:0000000000004548 loc_4548:                               ; CODE XREF: print_files+30E↓j
.text:0000000000004548                                         ; print_files+5A2↓j ...
.text:0000000000004548                 add     rsp, 18h
.text:000000000000454C                 pop     rbx
.text:000000000000454D                 pop     rbp
.text:000000000000454E                 pop     r12
.text:0000000000004550                 pop     r13
.text:0000000000004552                 pop     r14
.text:0000000000004554                 pop     r15
.text:0000000000004556                 retn
.text:0000000000004557 ; ---------------------------------------------------------------------------
.text:0000000000004557
.text:0000000000004557 loc_4557:                               ; CODE XREF: print_files+59↑j
.text:0000000000004557                 cmp     cs:parallel_files, 0
.text:000000000000455E                 jz      loc_5282
.text:0000000000004564                 mov     cs:columns, r12d
.text:000000000000456B                 mov     ecx, r12d
.text:000000000000456E                 jmp     loc_434C
.text:0000000000004573 ; ---------------------------------------------------------------------------
.text:0000000000004573
.text:0000000000004573 loc_4573:                               ; CODE XREF: print_files+25↑j
.text:0000000000004573                 mov     cs:extremities, 0
.text:000000000000457A                 mov     cs:keep_FF, 1
.text:0000000000004581
.text:0000000000004581 loc_4581:                               ; CODE XREF: print_files+32↑j
.text:0000000000004581                 mov     cs:lines_per_body, edx
.text:0000000000004587                 jmp     loc_4318
.text:000000000000458C ; ---------------------------------------------------------------------------
.text:000000000000458C
.text:000000000000458C loc_458C:                               ; CODE XREF: print_files+93↑j
.text:000000000000458C                 test    dl, dl
.text:000000000000458E                 mov     eax, cs:col_sep_length
.text:0000000000004594                 jnz     loc_43A5
.text:000000000000459A                 cmp     eax, 1
.text:000000000000459D                 jnz     loc_43A5
.text:00000000000045A3                 mov     rsi, cs:col_sep_string
.text:00000000000045AA                 cmp     byte ptr [rsi], 9
.text:00000000000045AD                 jnz     loc_43A5
.text:00000000000045B3                 lea     rsi, asc_BECA   ; " "
.text:00000000000045BA                 mov     cs:col_sep_string, rsi
.text:00000000000045C1                 jmp     loc_43A5
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C6                 align 10h
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: print_files+E8↑j
.text:00000000000045D0                                         ; print_files+11D↑j
.text:00000000000045D0                 xor     edi, edi
.text:00000000000045D2                 jmp     loc_4409
.text:00000000000045D7 ; ---------------------------------------------------------------------------
.text:00000000000045D7
.text:00000000000045D7 loc_45D7:                               ; CODE XREF: print_files+216↑j
.text:00000000000045D7                 test    r12d, r12d
.text:00000000000045DA                 jle     loc_5104
.text:00000000000045E0                 mov     rdi, [rbp+0]
.text:00000000000045E4                 mov     rsi, rax
.text:00000000000045E7                 call    open_file
.text:00000000000045EC                 test    al, al
.text:00000000000045EE                 jz      loc_4548
.text:00000000000045F4                 mov     rdi, [rbx]      ; stream
.text:00000000000045F7                 call    _fileno
.text:00000000000045FC                 mov     rdi, [rbp+0]
.text:0000000000004600                 mov     esi, eax
.text:0000000000004602                 call    init_header
.text:0000000000004607                 mov     dword ptr [rbx+2Ch], 0
.text:000000000000460E
.text:000000000000460E loc_460E:                               ; CODE XREF: print_files+E76↓j
.text:000000000000460E                 mov     esi, cs:columns
.text:0000000000004614                 mov     rdx, [rbx+8]
.text:0000000000004618                 lea     rax, [rbx+40h]
.text:000000000000461C                 mov     rcx, [rbx]
.text:000000000000461F                 cmp     esi, 1
.text:0000000000004622                 jz      short loc_465A
.text:0000000000004624                 sub     esi, 2
.text:0000000000004627                 add     rsi, 2
.text:000000000000462B                 shl     rsi, 6
.text:000000000000462F                 add     rbx, rsi
.text:0000000000004632                 nop     word ptr [rax+rax+00h]
.text:0000000000004638
.text:0000000000004638 loc_4638:                               ; CODE XREF: print_files+378↓j
.text:0000000000004638                 mov     [rax+8], rdx
.text:000000000000463C                 mov     [rax], rcx
.text:000000000000463F                 add     rax, 40h ; '@'
.text:0000000000004643                 mov     dword ptr [rax-30h], 0
.text:000000000000464A                 mov     byte ptr [rax-7], 0
.text:000000000000464E                 mov     dword ptr [rax-14h], 0
.text:0000000000004655                 cmp     rax, rbx
.text:0000000000004658                 jnz     short loc_4638
.text:000000000000465A
.text:000000000000465A loc_465A:                               ; CODE XREF: print_files+342↑j
.text:000000000000465A                                         ; print_files+CF5↓j
.text:000000000000465A                 cmp     cs:storing_columns, 0
.text:0000000000004661                 mov     eax, cs:total_files
.text:0000000000004667                 mov     cs:files_ready_to_read, eax
.text:000000000000466D                 jnz     loc_4FDA
.text:0000000000004673
.text:0000000000004673 loc_4673:                               ; CODE XREF: print_files+E1F↓j
.text:0000000000004673                 mov     r13, cs:first_page_number
.text:000000000000467A                 cmp     r13, 1
.text:000000000000467E                 ja      loc_4E7E
.text:0000000000004684                 mov     cs:page_number, 1
.text:000000000000468F
.text:000000000000468F loc_468F:                               ; CODE XREF: print_files+CD3↓j
.text:000000000000468F                 movzx   ebx, cs:truncate_lines
.text:0000000000004696                 xor     r8d, r8d
.text:0000000000004699                 mov     esi, cs:chars_per_margin
.text:000000000000469F                 test    bl, bl
.text:00000000000046A1                 jz      short loc_46C6
.text:00000000000046A3                 mov     r8d, cs:chars_per_column
.text:00000000000046AA                 add     r8d, esi
.text:00000000000046AD                 cmp     cs:parallel_files, 0
.text:00000000000046B4                 jz      short loc_46C6
.text:00000000000046B6                 cmp     cs:numbered_lines, 0
.text:00000000000046BD                 jz      short loc_46C6
.text:00000000000046BF                 add     r8d, cs:number_width
.text:00000000000046C6
.text:00000000000046C6 loc_46C6:                               ; CODE XREF: print_files+3C1↑j
.text:00000000000046C6                                         ; print_files+3D4↑j ...
.text:00000000000046C6                 mov     eax, cs:col_sep_length
.text:00000000000046CC                 mov     r10d, cs:columns
.text:00000000000046D3                 movzx   r11d, cs:storing_columns
.text:00000000000046DB                 mov     r9, cs:column_vector
.text:00000000000046E2                 add     esi, eax
.text:00000000000046E4                 cmp     r10d, 1
.text:00000000000046E8                 mov     [rsp+48h+var_40], eax
.text:00000000000046EC                 mov     rax, r9
.text:00000000000046EF                 mov     ecx, r11d
.text:00000000000046F2                 jle     loc_51FD
.text:00000000000046F8                 movzx   eax, cs:parallel_files
.text:00000000000046FF                 movzx   edi, cs:numbered_lines
.text:0000000000004706                 mov     edx, 1
.text:000000000000470B                 mov     r15d, cs:chars_per_column
.text:0000000000004712                 lea     r14, print_char
.text:0000000000004719                 lea     r13, read_line
.text:0000000000004720                 lea     r12, store_char
.text:0000000000004727                 lea     rbp, print_stored
.text:000000000000472E                 xor     eax, 1
.text:0000000000004731                 mov     [rsp+48h+var_39], al
.text:0000000000004735                 mov     rax, r9
.text:0000000000004738                 jmp     short loc_477B
.text:0000000000004738 ; ---------------------------------------------------------------------------
.text:000000000000473A                 align 20h
.text:0000000000004740
.text:0000000000004740 loc_4740:                               ; CODE XREF: print_files+49E↓j
.text:0000000000004740                 mov     [rax+20h], r12
.text:0000000000004744                 mov     [rax+18h], rbp
.text:0000000000004748
.text:0000000000004748 loc_4748:                               ; CODE XREF: print_files+4A8↓j
.text:0000000000004748                 xor     ecx, ecx
.text:000000000000474A                 test    dil, dil
.text:000000000000474D                 jz      short loc_4759
.text:000000000000474F                 cmp     edx, 1
.text:0000000000004752                 setz    cl
.text:0000000000004755                 or      cl, [rsp+48h+var_39]
.text:0000000000004759
.text:0000000000004759 loc_4759:                               ; CODE XREF: print_files+46D↑j
.text:0000000000004759                 test    bl, bl
.text:000000000000475B                 mov     [rax+38h], cl
.text:000000000000475E                 mov     [rax+34h], esi
.text:0000000000004761                 jz      short loc_47B0
.text:0000000000004763                 mov     ecx, [rsp+48h+var_40]
.text:0000000000004767                 add     edx, 1
.text:000000000000476A                 add     rax, 40h ; '@'
.text:000000000000476E                 cmp     edx, r10d
.text:0000000000004771                 lea     esi, [rcx+r8]
.text:0000000000004775                 lea     r8d, [rsi+r15]
.text:0000000000004779                 jz      short loc_47C1
.text:000000000000477B
.text:000000000000477B loc_477B:                               ; CODE XREF: print_files+458↑j
.text:000000000000477B                                         ; print_files+4DF↓j
.text:000000000000477B                 test    r11b, r11b
.text:000000000000477E                 jnz     short loc_4740
.text:0000000000004780                 mov     [rax+20h], r14
.text:0000000000004784                 mov     [rax+18h], r13
.text:0000000000004788                 jmp     short loc_4748
.text:000000000000478A ; ---------------------------------------------------------------------------
.text:000000000000478A
.text:000000000000478A loc_478A:                               ; CODE XREF: print_files+86↑j
.text:000000000000478A                 mov     cs:storing_columns, 0
.text:0000000000004791                 mov     eax, cs:col_sep_length
.text:0000000000004797                 jmp     loc_43B3
.text:000000000000479C ; ---------------------------------------------------------------------------
.text:000000000000479C
.text:000000000000479C loc_479C:                               ; CODE XREF: print_files+9B↑j
.text:000000000000479C                 lea     rax, asc_BEE4   ; "\t"
.text:00000000000047A3                 mov     cs:col_sep_string, rax
.text:00000000000047AA                 jmp     loc_438F
.text:00000000000047AA ; ---------------------------------------------------------------------------
.text:00000000000047AF                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: print_files+481↑j
.text:00000000000047B0                 add     edx, 1
.text:00000000000047B3                 xor     r8d, r8d
.text:00000000000047B6                 xor     esi, esi
.text:00000000000047B8                 add     rax, 40h ; '@'
.text:00000000000047BC                 cmp     edx, r10d
.text:00000000000047BF                 jnz     short loc_477B
.text:00000000000047C1
.text:00000000000047C1 loc_47C1:                               ; CODE XREF: print_files+499↑j
.text:00000000000047C1                 lea     eax, [rdx-2]
.text:00000000000047C4                 mov     ecx, r11d
.text:00000000000047C7                 add     rax, 1
.text:00000000000047CB                 shl     rax, 6
.text:00000000000047CF                 add     rax, r9
.text:00000000000047D2
.text:00000000000047D2 loc_47D2:                               ; CODE XREF: print_files+F29↓j
.text:00000000000047D2                 test    r11b, r11b
.text:00000000000047D5                 jz      loc_4DFA
.text:00000000000047DB                 cmp     cs:balance_columns, 0
.text:00000000000047E2                 jz      loc_4DFA
.text:00000000000047E8                 lea     rbx, store_char
.text:00000000000047EF                 mov     [rax+20h], rbx
.text:00000000000047F3                 lea     rbx, print_stored
.text:00000000000047FA                 mov     [rax+18h], rbx
.text:00000000000047FE
.text:00000000000047FE loc_47FE:                               ; CODE XREF: print_files+B30↓j
.text:00000000000047FE                 test    dil, dil
.text:0000000000004801                 jz      short loc_4815
.text:0000000000004803                 movzx   edi, cs:parallel_files
.text:000000000000480A                 xor     edi, 1
.text:000000000000480D                 cmp     edx, 1
.text:0000000000004810                 setz    dl
.text:0000000000004813                 or      edi, edx
.text:0000000000004815
.text:0000000000004815 loc_4815:                               ; CODE XREF: print_files+521↑j
.text:0000000000004815                 mov     [rax+38h], dil
.text:0000000000004819                 mov     [rax+34h], esi
.text:000000000000481C                 test    cl, cl
.text:000000000000481E                 mov     eax, cs:line_count
.text:0000000000004824                 mov     rbp, r9
.text:0000000000004827                 mov     cs:line_number, eax
.text:000000000000482D                 jnz     loc_4B1C
.text:0000000000004833
.text:0000000000004833 loc_4833:                               ; CODE XREF: print_files+836↓j
.text:0000000000004833                 test    r10d, r10d
.text:0000000000004836                 jz      short loc_487B
.text:0000000000004838                 lea     edx, [r10-1]
.text:000000000000483C                 mov     ecx, cs:lines_per_body
.text:0000000000004842                 lea     rax, [r9+30h]
.text:0000000000004846                 shl     rdx, 6
.text:000000000000484A                 lea     rdx, [r9+rdx+70h]
.text:000000000000484F                 jmp     short loc_4863
.text:000000000000484F ; ---------------------------------------------------------------------------
.text:0000000000004851                 align 8
.text:0000000000004858
.text:0000000000004858 loc_4858:                               ; CODE XREF: print_files+58A↓j
.text:0000000000004858                 mov     [rax], ecx
.text:000000000000485A                 add     rax, 40h ; '@'
.text:000000000000485E                 cmp     rdx, rax
.text:0000000000004861                 jz      short loc_487B
.text:0000000000004863
.text:0000000000004863 loc_4863:                               ; CODE XREF: print_files+56F↑j
.text:0000000000004863                                         ; print_files+599↓j
.text:0000000000004863                 mov     r8d, [rax-20h]
.text:0000000000004867                 test    r8d, r8d
.text:000000000000486A                 jz      short loc_4858
.text:000000000000486C                 mov     dword ptr [rax], 0
.text:0000000000004872                 add     rax, 40h ; '@'
.text:0000000000004876                 cmp     rdx, rax
.text:0000000000004879                 jnz     short loc_4863
.text:000000000000487B
.text:000000000000487B loc_487B:                               ; CODE XREF: print_files+556↑j
.text:000000000000487B                                         ; print_files+581↑j ...
.text:000000000000487B                 call    cols_ready_to_print
.text:0000000000004880                 test    eax, eax
.text:0000000000004882                 jz      loc_4548
.text:0000000000004888                 cmp     cs:extremities, 0
.text:000000000000488F                 jz      short loc_4898
.text:0000000000004891                 mov     cs:print_a_header, 1
.text:0000000000004898
.text:0000000000004898 loc_4898:                               ; CODE XREF: print_files+5AF↑j
.text:0000000000004898                 cmp     cs:double_space, 0
.text:000000000000489F                 mov     cs:pad_vertically, 0
.text:00000000000048A6                 mov     r13d, cs:lines_per_body
.text:00000000000048AD                 jz      short loc_48B2
.text:00000000000048AF                 add     r13d, r13d
.text:00000000000048B2
.text:00000000000048B2 loc_48B2:                               ; CODE XREF: print_files+5CD↑j
.text:00000000000048B2                 xor     r12d, r12d
.text:00000000000048B5                 cmp     r13d, 0
.text:00000000000048B9                 jle     loc_51E2
.text:00000000000048BF                 nop
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: print_files+75E↓j
.text:00000000000048C0                 call    cols_ready_to_print
.text:00000000000048C5                 test    eax, eax
.text:00000000000048C7                 jz      loc_4A86
.text:00000000000048CD                 mov     edi, cs:columns
.text:00000000000048D3                 mov     cs:output_position, 0
.text:00000000000048DD                 mov     cs:spaces_not_printed, 0
.text:00000000000048E7                 mov     cs:separators_not_printed, 0
.text:00000000000048F1                 mov     cs:pad_vertically, 0
.text:00000000000048F8                 mov     cs:align_empty_cols, 0
.text:00000000000048FF                 test    edi, edi
.text:0000000000004901                 mov     cs:empty_line, 1
.text:0000000000004908                 mov     rbx, cs:column_vector
.text:000000000000490F                 jle     loc_49FC
.text:0000000000004915                 mov     ebp, 1
.text:000000000000491A                 jmp     short loc_4973
.text:000000000000491A ; ---------------------------------------------------------------------------
.text:000000000000491C                 align 20h
.text:0000000000004920
.text:0000000000004920 loc_4920:                               ; CODE XREF: print_files+6DC↓j
.text:0000000000004920                                         ; print_files+6E9↓j
.text:0000000000004920                 cmp     cs:parallel_files, 0
.text:0000000000004927                 jz      short loc_4950
.text:0000000000004929                 mov     eax, [rbx+10h]
.text:000000000000492C                 test    eax, eax
.text:000000000000492E                 jz      short loc_4950
.text:0000000000004930                 cmp     cs:empty_line, 0
.text:0000000000004937                 jnz     loc_4C70
.text:000000000000493D                 cmp     eax, 3
.text:0000000000004940                 jz      loc_4CA0
.text:0000000000004946                 cmp     eax, 2
.text:0000000000004949                 jz      loc_4CE0
.text:000000000000494F                 nop
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: print_files+647↑j
.text:0000000000004950                                         ; print_files+64E↑j ...
.text:0000000000004950                 cmp     cs:use_col_separator, 0
.text:0000000000004957                 jz      short loc_4960
.text:0000000000004959                 add     cs:separators_not_printed, 1
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: print_files+677↑j
.text:0000000000004960                 add     ebp, 1
.text:0000000000004963                 add     rbx, 40h ; '@'
.text:0000000000004967                 cmp     ebp, cs:columns
.text:000000000000496D                 jg      loc_4CB0
.text:0000000000004973
.text:0000000000004973 loc_4973:                               ; CODE XREF: print_files+63A↑j
.text:0000000000004973                 mov     esi, [rbx+30h]
.text:0000000000004976                 mov     cs:input_position, 0
.text:0000000000004980                 test    esi, esi
.text:0000000000004982                 jle     loc_4C80
.text:0000000000004988
.text:0000000000004988 loc_4988:                               ; CODE XREF: print_files+9A4↓j
.text:0000000000004988                 mov     eax, [rbx+34h]
.text:000000000000498B                 mov     cs:FF_only, 0
.text:0000000000004992                 mov     rdi, rbx
.text:0000000000004995                 mov     cs:padding_not_printed, eax
.text:000000000000499B                 call    qword ptr [rbx+18h]
.text:000000000000499E                 test    al, al
.text:00000000000049A0                 jz      loc_4C60
.text:00000000000049A6
.text:00000000000049A6 loc_49A6:                               ; CODE XREF: print_files+988↓j
.text:00000000000049A6                 mov     eax, [rbx+30h]
.text:00000000000049A9                 movzx   r9d, cs:pad_vertically
.text:00000000000049B1                 sub     eax, 1
.text:00000000000049B4                 or      r12d, r9d
.text:00000000000049B7                 test    eax, eax
.text:00000000000049B9                 mov     [rbx+30h], eax
.text:00000000000049BC                 jg      loc_4920
.text:00000000000049C2                 call    cols_ready_to_print
.text:00000000000049C7                 test    eax, eax
.text:00000000000049C9                 jnz     loc_4920
.text:00000000000049CF                 test    r9b, r9b
.text:00000000000049D2                 jz      loc_4CC8
.text:00000000000049D8
.text:00000000000049D8 loc_49D8:                               ; CODE XREF: print_files+9D7↓j
.text:00000000000049D8                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000049DF                 mov     rax, [rdi+28h]
.text:00000000000049E3                 cmp     rax, [rdi+30h]
.text:00000000000049E7                 jnb     loc_4DCB
.text:00000000000049ED                 lea     rdx, [rax+1]
.text:00000000000049F1                 mov     [rdi+28h], rdx
.text:00000000000049F5                 mov     byte ptr [rax], 0Ah
.text:00000000000049F8
.text:00000000000049F8 loc_49F8:                               ; CODE XREF: print_files+AF5↓j
.text:00000000000049F8                 sub     r13d, 1
.text:00000000000049FC
.text:00000000000049FC loc_49FC:                               ; CODE XREF: print_files+62F↑j
.text:00000000000049FC                                         ; print_files+9DD↓j
.text:00000000000049FC                 call    cols_ready_to_print
.text:0000000000004A01                 test    eax, eax
.text:0000000000004A03                 jz      loc_4CC8
.text:0000000000004A09
.text:0000000000004A09 loc_4A09:                               ; CODE XREF: print_files+9EF↓j
.text:0000000000004A09                 cmp     cs:double_space, 0
.text:0000000000004A10                 jz      short loc_4A3B
.text:0000000000004A12                 test    r12b, r12b
.text:0000000000004A15                 jz      short loc_4A3B
.text:0000000000004A17                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004A1E                 mov     rax, [rdi+28h]
.text:0000000000004A22                 cmp     rax, [rdi+30h]
.text:0000000000004A26                 jnb     loc_4E15
.text:0000000000004A2C                 lea     rdx, [rax+1]
.text:0000000000004A30                 mov     [rdi+28h], rdx
.text:0000000000004A34                 mov     byte ptr [rax], 0Ah
.text:0000000000004A37
.text:0000000000004A37 loc_4A37:                               ; CODE XREF: print_files+B3F↓j
.text:0000000000004A37                 sub     r13d, 1
.text:0000000000004A3B
.text:0000000000004A3B loc_4A3B:                               ; CODE XREF: print_files+730↑j
.text:0000000000004A3B                                         ; print_files+735↑j
.text:0000000000004A3B                 test    r13d, r13d
.text:0000000000004A3E                 jg      loc_48C0
.text:0000000000004A44
.text:0000000000004A44 loc_4A44:                               ; CODE XREF: print_files+9F5↓j
.text:0000000000004A44                 test    r13d, r13d
.text:0000000000004A47                 jnz     short loc_4A86
.text:0000000000004A49                 mov     r10d, cs:columns
.text:0000000000004A50                 mov     r9, cs:column_vector
.text:0000000000004A57                 test    r10d, r10d
.text:0000000000004A5A                 jle     short loc_4A86
.text:0000000000004A5C
.text:0000000000004A5C loc_4A5C:                               ; CODE XREF: print_files+F0B↓j
.text:0000000000004A5C                 lea     edx, [r10-1]
.text:0000000000004A60                 lea     rax, [r9+10h]
.text:0000000000004A64                 shl     rdx, 6
.text:0000000000004A68                 lea     rdx, [r9+rdx+50h]
.text:0000000000004A6D                 nop     dword ptr [rax]
.text:0000000000004A70
.text:0000000000004A70 loc_4A70:                               ; CODE XREF: print_files+7A1↓j
.text:0000000000004A70                 mov     ecx, [rax]
.text:0000000000004A72                 test    ecx, ecx
.text:0000000000004A74                 jnz     short loc_4A7A
.text:0000000000004A76                 mov     byte ptr [rax+29h], 1
.text:0000000000004A7A
.text:0000000000004A7A loc_4A7A:                               ; CODE XREF: print_files+794↑j
.text:0000000000004A7A                 add     rax, 40h ; '@'
.text:0000000000004A7E                 cmp     rdx, rax
.text:0000000000004A81                 jnz     short loc_4A70
.text:0000000000004A83                 xor     r13d, r13d
.text:0000000000004A86
.text:0000000000004A86 loc_4A86:                               ; CODE XREF: print_files+5E7↑j
.text:0000000000004A86                                         ; print_files+767↑j ...
.text:0000000000004A86                 test    r12b, r12b
.text:0000000000004A89                 mov     cs:pad_vertically, r12b
.text:0000000000004A90                 jz      short loc_4A9F
.text:0000000000004A92                 cmp     cs:extremities, 0
.text:0000000000004A99                 jnz     loc_4E24
.text:0000000000004A9F
.text:0000000000004A9F loc_4A9F:                               ; CODE XREF: print_files+7B0↑j
.text:0000000000004A9F                                         ; print_files:loc_51E2↓j ...
.text:0000000000004A9F                 cmp     cs:keep_FF, 0
.text:0000000000004AA6                 jz      short loc_4AD8
.text:0000000000004AA8                 cmp     cs:print_a_FF, 0
.text:0000000000004AAF                 jz      short loc_4AD8
.text:0000000000004AB1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004AB8                 mov     rax, [rdi+28h]
.text:0000000000004ABC                 cmp     rax, [rdi+30h]
.text:0000000000004AC0                 jnb     loc_520E
.text:0000000000004AC6                 lea     rdx, [rax+1]
.text:0000000000004ACA                 mov     [rdi+28h], rdx
.text:0000000000004ACE                 mov     byte ptr [rax], 0Ch
.text:0000000000004AD1
.text:0000000000004AD1 loc_4AD1:                               ; CODE XREF: print_files+F38↓j
.text:0000000000004AD1                 mov     cs:print_a_FF, 0
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: print_files+7C6↑j
.text:0000000000004AD8                                         ; print_files+7CF↑j ...
.text:0000000000004AD8                 mov     rax, cs:page_number
.text:0000000000004ADF                 add     rax, 1
.text:0000000000004AE3                 cmp     rax, cs:last_page_number
.text:0000000000004AEA                 mov     cs:page_number, rax
.text:0000000000004AF1                 ja      loc_4548
.text:0000000000004AF7                 call    reset_status
.text:0000000000004AFC                 movzx   ecx, cs:storing_columns
.text:0000000000004B03                 mov     r9, cs:column_vector
.text:0000000000004B0A                 mov     r10d, cs:columns
.text:0000000000004B11                 mov     rbp, r9
.text:0000000000004B14                 test    cl, cl
.text:0000000000004B16                 jz      loc_4833
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: print_files+54D↑j
.text:0000000000004B1C                 movzx   r11d, cs:balance_columns
.text:0000000000004B24                 mov     esi, r10d
.text:0000000000004B27                 mov     cs:buff_current, 0
.text:0000000000004B31                 cmp     r11b, 1
.text:0000000000004B35                 sbb     esi, 0
.text:0000000000004B38                 test    esi, esi
.text:0000000000004B3A                 mov     [rsp+48h+var_40], esi
.text:0000000000004B3E                 jle     loc_4FB8
.text:0000000000004B44                 lea     edx, [rsi-1]
.text:0000000000004B47                 lea     rax, [r9+2Ch]
.text:0000000000004B4B                 shl     rdx, 6
.text:0000000000004B4F                 lea     rdx, [r9+rdx+6Ch]
.text:0000000000004B54                 nop     dword ptr [rax+00h]
.text:0000000000004B58
.text:0000000000004B58 loc_4B58:                               ; CODE XREF: print_files+885↓j
.text:0000000000004B58                 mov     dword ptr [rax], 0
.text:0000000000004B5E                 add     rax, 40h ; '@'
.text:0000000000004B62                 cmp     rdx, rax
.text:0000000000004B65                 jnz     short loc_4B58
.text:0000000000004B67                 mov     eax, cs:files_ready_to_read
.text:0000000000004B6D                 test    eax, eax
.text:0000000000004B6F                 jz      loc_4FBA
.text:0000000000004B75                 xor     r13d, r13d
.text:0000000000004B78                 mov     r14d, 1
.text:0000000000004B7E                 xor     r12d, r12d
.text:0000000000004B81                 xor     r15d, r15d
.text:0000000000004B84                 nop     dword ptr [rax+00h]
.text:0000000000004B88
.text:0000000000004B88 loc_4B88:                               ; CODE XREF: print_files+957↓j
.text:0000000000004B88                 mov     ebx, cs:lines_per_body
.text:0000000000004B8E                 mov     [rbp+28h], r12d
.text:0000000000004B92                 test    ebx, ebx
.text:0000000000004B94                 jnz     short loc_4BA5
.text:0000000000004B96                 jmp     short loc_4C15
.text:0000000000004B96 ; ---------------------------------------------------------------------------
.text:0000000000004B98                 align 20h
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: print_files+8D8↓j
.text:0000000000004BA0                                         ; print_files+904↓j
.text:0000000000004BA0                 sub     ebx, 1
.text:0000000000004BA3                 jz      short loc_4C15
.text:0000000000004BA5
.text:0000000000004BA5 loc_4BA5:                               ; CODE XREF: print_files+8B4↑j
.text:0000000000004BA5                                         ; print_files+933↓j
.text:0000000000004BA5                 mov     esi, cs:files_ready_to_read
.text:0000000000004BAB                 test    esi, esi
.text:0000000000004BAD                 jz      loc_4D00
.text:0000000000004BB3                 mov     ecx, [rbp+10h]
.text:0000000000004BB6                 test    ecx, ecx
.text:0000000000004BB8                 jnz     short loc_4BA0
.text:0000000000004BBA                 mov     rdi, rbp
.text:0000000000004BBD                 mov     cs:input_position, 0
.text:0000000000004BC7                 call    read_line
.text:0000000000004BCC                 test    al, al
.text:0000000000004BCE                 jz      loc_4CF0
.text:0000000000004BD4
.text:0000000000004BD4 loc_4BD4:                               ; CODE XREF: print_files+A18↓j
.text:0000000000004BD4                 mov     edx, [rbp+10h]
.text:0000000000004BD7                 mov     eax, cs:buff_current
.text:0000000000004BDD                 test    edx, edx
.text:0000000000004BDF                 jz      short loc_4BE6
.text:0000000000004BE1                 cmp     r13d, eax
.text:0000000000004BE4                 jz      short loc_4BA0
.text:0000000000004BE6
.text:0000000000004BE6 loc_4BE6:                               ; CODE XREF: print_files+8FF↑j
.text:0000000000004BE6                 mov     rcx, cs:line_vector
.text:0000000000004BED                 add     dword ptr [rbp+2Ch], 1
.text:0000000000004BF1                 add     r12d, 1
.text:0000000000004BF5                 mov     esi, cs:input_position
.text:0000000000004BFB                 sub     ebx, 1
.text:0000000000004BFE                 mov     [rcx+r15*4], r13d
.text:0000000000004C02                 mov     r13d, eax
.text:0000000000004C05                 mov     rcx, cs:end_vector
.text:0000000000004C0C                 mov     [rcx+r15*4], esi
.text:0000000000004C10                 mov     r15d, r12d
.text:0000000000004C13                 jnz     short loc_4BA5
.text:0000000000004C15
.text:0000000000004C15 loc_4C15:                               ; CODE XREF: print_files+8B6↑j
.text:0000000000004C15                                         ; print_files+8C3↑j
.text:0000000000004C15                 add     r14d, 1
.text:0000000000004C19                 add     rbp, 40h ; '@'
.text:0000000000004C1D                 cmp     [rsp+48h+var_40], r14d
.text:0000000000004C22                 lea     rcx, ds:0[r15*4]
.text:0000000000004C2A                 mov     eax, r13d
.text:0000000000004C2D                 jl      short loc_4C3D
.text:0000000000004C2F                 mov     ebx, cs:files_ready_to_read
.text:0000000000004C35                 test    ebx, ebx
.text:0000000000004C37                 jnz     loc_4B88
.text:0000000000004C3D
.text:0000000000004C3D loc_4C3D:                               ; CODE XREF: print_files+94D↑j
.text:0000000000004C3D                 mov     rbp, cs:column_vector
.text:0000000000004C44                 mov     r10d, cs:columns
.text:0000000000004C4B                 movzx   r11d, cs:balance_columns
.text:0000000000004C53                 mov     r9, rbp
.text:0000000000004C56                 jmp     loc_4D24
.text:0000000000004C56 ; ---------------------------------------------------------------------------
.text:0000000000004C5B                 align 20h
.text:0000000000004C60
.text:0000000000004C60 loc_4C60:                               ; CODE XREF: print_files+6C0↑j
.text:0000000000004C60                 mov     rdi, rbx
.text:0000000000004C63                 call    read_rest_of_line
.text:0000000000004C68                 jmp     loc_49A6
.text:0000000000004C68 ; ---------------------------------------------------------------------------
.text:0000000000004C6D                 align 10h
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: print_files+657↑j
.text:0000000000004C70                                         ; print_files+9BE↓j
.text:0000000000004C70                 mov     cs:align_empty_cols, 1
.text:0000000000004C77                 jmp     loc_4950
.text:0000000000004C77 ; ---------------------------------------------------------------------------
.text:0000000000004C7C                 align 20h
.text:0000000000004C80
.text:0000000000004C80 loc_4C80:                               ; CODE XREF: print_files+6A2↑j
.text:0000000000004C80                 cmp     dword ptr [rbx+10h], 1
.text:0000000000004C84                 jz      loc_4988
.text:0000000000004C8A                 cmp     cs:parallel_files, 0
.text:0000000000004C91                 jz      loc_4950
.text:0000000000004C97                 cmp     cs:empty_line, 0
.text:0000000000004C9E                 jnz     short loc_4C70
.text:0000000000004CA0
.text:0000000000004CA0 loc_4CA0:                               ; CODE XREF: print_files+660↑j
.text:0000000000004CA0                                         ; print_files+A0D↓j
.text:0000000000004CA0                 mov     rdi, rbx
.text:0000000000004CA3                 call    align_column
.text:0000000000004CA8                 jmp     loc_4950
.text:0000000000004CA8 ; ---------------------------------------------------------------------------
.text:0000000000004CAD                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: print_files+68D↑j
.text:0000000000004CB0                 cmp     cs:pad_vertically, 0
.text:0000000000004CB7                 jnz     loc_49D8
.text:0000000000004CBD                 jmp     loc_49FC
.text:0000000000004CBD ; ---------------------------------------------------------------------------
.text:0000000000004CC2                 align 8
.text:0000000000004CC8
.text:0000000000004CC8 loc_4CC8:                               ; CODE XREF: print_files+6F2↑j
.text:0000000000004CC8                                         ; print_files+723↑j
.text:0000000000004CC8                 cmp     cs:extremities, 0
.text:0000000000004CCF                 jnz     loc_4A09
.text:0000000000004CD5                 jmp     loc_4A44
.text:0000000000004CD5 ; ---------------------------------------------------------------------------
.text:0000000000004CDA                 align 20h
.text:0000000000004CE0
.text:0000000000004CE0 loc_4CE0:                               ; CODE XREF: print_files+669↑j
.text:0000000000004CE0                 cmp     cs:FF_only, 0
.text:0000000000004CE7                 jz      loc_4950
.text:0000000000004CED                 jmp     short loc_4CA0
.text:0000000000004CED ; ---------------------------------------------------------------------------
.text:0000000000004CEF                 align 10h
.text:0000000000004CF0
.text:0000000000004CF0 loc_4CF0:                               ; CODE XREF: print_files+8EE↑j
.text:0000000000004CF0                 mov     rdi, rbp
.text:0000000000004CF3                 call    read_rest_of_line
.text:0000000000004CF8                 jmp     loc_4BD4
.text:0000000000004CF8 ; ---------------------------------------------------------------------------
.text:0000000000004CFD                 align 20h
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: print_files+8CD↑j
.text:0000000000004D00                 mov     r9, cs:column_vector
.text:0000000000004D07                 movzx   r11d, cs:balance_columns
.text:0000000000004D0F                 lea     rcx, ds:0[r15*4]
.text:0000000000004D17                 mov     r10d, cs:columns
.text:0000000000004D1E                 mov     eax, r13d
.text:0000000000004D21                 mov     rbp, r9
.text:0000000000004D24
.text:0000000000004D24 loc_4D24:                               ; CODE XREF: print_files+976↑j
.text:0000000000004D24                                         ; print_files+CDF↓j
.text:0000000000004D24                 mov     rdx, cs:line_vector
.text:0000000000004D2B                 test    r11b, r11b
.text:0000000000004D2E                 lea     r13d, [r10-1]
.text:0000000000004D32                 mov     [rdx+rcx], eax
.text:0000000000004D35                 jz      loc_4DDA
.text:0000000000004D3B                 test    r10d, r10d
.text:0000000000004D3E                 jle     short loc_4D7E
.text:0000000000004D40                 mov     eax, r12d
.text:0000000000004D43                 lea     ebx, [r10+1]
.text:0000000000004D47                 xor     edi, edi
.text:0000000000004D49                 cdq
.text:0000000000004D4A                 mov     rsi, r9
.text:0000000000004D4D                 mov     ecx, 1
.text:0000000000004D52                 idiv    r10d
.text:0000000000004D55                 lea     r12d, [rax+1]
.text:0000000000004D59                 nop     dword ptr [rax+00000000h]
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: print_files+A9C↓j
.text:0000000000004D60                 cmp     ecx, edx
.text:0000000000004D62                 mov     r8d, r12d
.text:0000000000004D65                 mov     [rsi+28h], edi
.text:0000000000004D68                 cmovg   r8d, eax
.text:0000000000004D6C                 add     ecx, 1
.text:0000000000004D6F                 add     rsi, 40h ; '@'
.text:0000000000004D73                 mov     [rsi-14h], r8d
.text:0000000000004D77                 add     edi, r8d
.text:0000000000004D7A                 cmp     ebx, ecx
.text:0000000000004D7C                 jnz     short loc_4D60
.text:0000000000004D7E
.text:0000000000004D7E loc_4D7E:                               ; CODE XREF: print_files+A5E↑j
.text:0000000000004D7E                 test    r13d, r13d
.text:0000000000004D81                 jz      short loc_4DC0
.text:0000000000004D83
.text:0000000000004D83 loc_4D83:                               ; CODE XREF: print_files+AFD↓j
.text:0000000000004D83                 lea     edx, [r10-2]
.text:0000000000004D87                 lea     rax, [r9+2Ch]
.text:0000000000004D8B                 mov     rcx, rdx
.text:0000000000004D8E                 shl     rdx, 6
.text:0000000000004D92                 lea     rsi, [r9+rdx+6Ch]
.text:0000000000004D97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: print_files+ACC↓j
.text:0000000000004DA0                 mov     edx, [rax]
.text:0000000000004DA2                 add     rax, 40h ; '@'
.text:0000000000004DA6                 mov     [rax-3Ch], edx
.text:0000000000004DA9                 cmp     rsi, rax
.text:0000000000004DAC                 jnz     short loc_4DA0
.text:0000000000004DAE                 mov     ebp, ecx
.text:0000000000004DB0                 add     rbp, 1
.text:0000000000004DB4                 shl     rbp, 6
.text:0000000000004DB8                 add     rbp, r9
.text:0000000000004DBB                 test    r11b, r11b
.text:0000000000004DBE                 jz      short loc_4DDF
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: print_files+AA1↑j
.text:0000000000004DC0                 mov     eax, [rbp+2Ch]
.text:0000000000004DC3                 mov     [rbp+30h], eax
.text:0000000000004DC6                 jmp     loc_487B
.text:0000000000004DCB ; ---------------------------------------------------------------------------
.text:0000000000004DCB
.text:0000000000004DCB loc_4DCB:                               ; CODE XREF: print_files+707↑j
.text:0000000000004DCB                 mov     esi, 0Ah        ; int
.text:0000000000004DD0                 call    ___overflow
.text:0000000000004DD5                 jmp     loc_49F8
.text:0000000000004DDA ; ---------------------------------------------------------------------------
.text:0000000000004DDA
.text:0000000000004DDA loc_4DDA:                               ; CODE XREF: print_files+A55↑j
.text:0000000000004DDA                 test    r13d, r13d
.text:0000000000004DDD                 jnz     short loc_4D83
.text:0000000000004DDF
.text:0000000000004DDF loc_4DDF:                               ; CODE XREF: print_files+ADE↑j
.text:0000000000004DDF                 mov     r11d, [rbp+10h]
.text:0000000000004DE3                 test    r11d, r11d
.text:0000000000004DE6                 jnz     loc_4E72
.text:0000000000004DEC                 mov     eax, cs:lines_per_body
.text:0000000000004DF2                 mov     [rbp+30h], eax
.text:0000000000004DF5                 jmp     loc_487B
.text:0000000000004DFA ; ---------------------------------------------------------------------------
.text:0000000000004DFA
.text:0000000000004DFA loc_4DFA:                               ; CODE XREF: print_files+4F5↑j
.text:0000000000004DFA                                         ; print_files+502↑j
.text:0000000000004DFA                 lea     rbx, print_char
.text:0000000000004E01                 mov     [rax+20h], rbx
.text:0000000000004E05                 lea     rbx, read_line
.text:0000000000004E0C                 mov     [rax+18h], rbx
.text:0000000000004E10                 jmp     loc_47FE
.text:0000000000004E15 ; ---------------------------------------------------------------------------
.text:0000000000004E15
.text:0000000000004E15 loc_4E15:                               ; CODE XREF: print_files+746↑j
.text:0000000000004E15                 mov     esi, 0Ah        ; int
.text:0000000000004E1A                 call    ___overflow
.text:0000000000004E1F                 jmp     loc_4A37
.text:0000000000004E24 ; ---------------------------------------------------------------------------
.text:0000000000004E24
.text:0000000000004E24 loc_4E24:                               ; CODE XREF: print_files+7B9↑j
.text:0000000000004E24                 cmp     cs:use_form_feed, 0
.text:0000000000004E2B                 jnz     loc_51C1
.text:0000000000004E31                 add     r13d, 5
.text:0000000000004E35                 jnz     short loc_4E55
.text:0000000000004E37                 jmp     loc_4AD8
.text:0000000000004E37 ; ---------------------------------------------------------------------------
.text:0000000000004E3C                 align 20h
.text:0000000000004E40
.text:0000000000004E40 loc_4E40:                               ; CODE XREF: print_files+B84↓j
.text:0000000000004E40                 lea     rdx, [rax+1]
.text:0000000000004E44                 mov     [rdi+28h], rdx
.text:0000000000004E48                 mov     byte ptr [rax], 0Ah
.text:0000000000004E4B
.text:0000000000004E4B loc_4E4B:                               ; CODE XREF: print_files+B90↓j
.text:0000000000004E4B                 sub     r13d, 1
.text:0000000000004E4F                 jz      loc_4AD8
.text:0000000000004E55
.text:0000000000004E55 loc_4E55:                               ; CODE XREF: print_files+B55↑j
.text:0000000000004E55                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000004E5C                 mov     rax, [rdi+28h]
.text:0000000000004E60                 cmp     rax, [rdi+30h]
.text:0000000000004E64                 jb      short loc_4E40
.text:0000000000004E66                 mov     esi, 0Ah        ; int
.text:0000000000004E6B                 call    ___overflow
.text:0000000000004E70                 jmp     short loc_4E4B
.text:0000000000004E72 ; ---------------------------------------------------------------------------
.text:0000000000004E72
.text:0000000000004E72 loc_4E72:                               ; CODE XREF: print_files+B06↑j
.text:0000000000004E72                 mov     dword ptr [rbp+30h], 0
.text:0000000000004E79                 jmp     loc_487B
.text:0000000000004E7E ; ---------------------------------------------------------------------------
.text:0000000000004E7E
.text:0000000000004E7E loc_4E7E:                               ; CODE XREF: print_files+39E↑j
.text:0000000000004E7E                 mov     r12d, 1
.text:0000000000004E84                 nop     dword ptr [rax+00h]
.text:0000000000004E88
.text:0000000000004E88 loc_4E88:                               ; CODE XREF: print_files+CBF↓j
.text:0000000000004E88                 cmp     cs:lines_per_body, 1
.text:0000000000004E8F                 mov     rbx, cs:column_vector
.text:0000000000004E96                 mov     r14d, 1
.text:0000000000004E9C                 mov     eax, cs:columns
.text:0000000000004EA2                 jle     short loc_4EFB
.text:0000000000004EA4                 nop     dword ptr [rax+00h]
.text:0000000000004EA8
.text:0000000000004EA8 loc_4EA8:                               ; CODE XREF: print_files+C19↓j
.text:0000000000004EA8                 test    eax, eax
.text:0000000000004EAA                 jle     short loc_4EEE
.text:0000000000004EAC                 mov     ebp, 1
.text:0000000000004EB1                 jmp     short loc_4EC3
.text:0000000000004EB1 ; ---------------------------------------------------------------------------
.text:0000000000004EB3                 align 8
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: print_files+BEA↓j
.text:0000000000004EB8                 add     ebp, 1
.text:0000000000004EBB                 add     rbx, 40h ; '@'
.text:0000000000004EBF                 cmp     ebp, eax
.text:0000000000004EC1                 jg      short loc_4EE7
.text:0000000000004EC3
.text:0000000000004EC3 loc_4EC3:                               ; CODE XREF: print_files+BD1↑j
.text:0000000000004EC3                                         ; print_files+C05↓j
.text:0000000000004EC3                 mov     r10d, [rbx+10h]
.text:0000000000004EC7                 test    r10d, r10d
.text:0000000000004ECA                 jnz     short loc_4EB8
.text:0000000000004ECC                 mov     esi, ebp
.text:0000000000004ECE                 mov     rdi, rbx
.text:0000000000004ED1                 add     ebp, 1
.text:0000000000004ED4                 call    skip_read
.text:0000000000004ED9                 mov     eax, cs:columns
.text:0000000000004EDF                 add     rbx, 40h ; '@'
.text:0000000000004EE3                 cmp     ebp, eax
.text:0000000000004EE5                 jle     short loc_4EC3
.text:0000000000004EE7
.text:0000000000004EE7 loc_4EE7:                               ; CODE XREF: print_files+BE1↑j
.text:0000000000004EE7                 mov     rbx, cs:column_vector
.text:0000000000004EEE
.text:0000000000004EEE loc_4EEE:                               ; CODE XREF: print_files+BCA↑j
.text:0000000000004EEE                 add     r14d, 1
.text:0000000000004EF2                 cmp     r14d, cs:lines_per_body
.text:0000000000004EF9                 jl      short loc_4EA8
.text:0000000000004EFB
.text:0000000000004EFB loc_4EFB:                               ; CODE XREF: print_files+BC2↑j
.text:0000000000004EFB                 test    eax, eax
.text:0000000000004EFD                 mov     cs:last_line, 1
.text:0000000000004F04                 jle     short loc_4F7C
.text:0000000000004F06                 mov     ebp, 1
.text:0000000000004F0B                 jmp     short loc_4F1B
.text:0000000000004F0B ; ---------------------------------------------------------------------------
.text:0000000000004F0D                 align 10h
.text:0000000000004F10
.text:0000000000004F10 loc_4F10:                               ; CODE XREF: print_files+C42↓j
.text:0000000000004F10                 add     ebp, 1
.text:0000000000004F13                 add     rbx, 40h ; '@'
.text:0000000000004F17                 cmp     ebp, eax
.text:0000000000004F19                 jg      short loc_4F3F
.text:0000000000004F1B
.text:0000000000004F1B loc_4F1B:                               ; CODE XREF: print_files+C2B↑j
.text:0000000000004F1B                                         ; print_files+C5D↓j
.text:0000000000004F1B                 mov     r9d, [rbx+10h]
.text:0000000000004F1F                 test    r9d, r9d
.text:0000000000004F22                 jnz     short loc_4F10
.text:0000000000004F24                 mov     esi, ebp
.text:0000000000004F26                 mov     rdi, rbx
.text:0000000000004F29                 add     ebp, 1
.text:0000000000004F2C                 call    skip_read
.text:0000000000004F31                 mov     eax, cs:columns
.text:0000000000004F37                 add     rbx, 40h ; '@'
.text:0000000000004F3B                 cmp     ebp, eax
.text:0000000000004F3D                 jle     short loc_4F1B
.text:0000000000004F3F
.text:0000000000004F3F loc_4F3F:                               ; CODE XREF: print_files+C39↑j
.text:0000000000004F3F                 cmp     cs:storing_columns, 0
.text:0000000000004F46                 jz      short loc_4F7C
.text:0000000000004F48                 test    eax, eax
.text:0000000000004F4A                 mov     rcx, cs:column_vector
.text:0000000000004F51                 jle     short loc_4F7C
.text:0000000000004F53                 sub     eax, 1
.text:0000000000004F56                 lea     rdx, [rcx+10h]
.text:0000000000004F5A                 shl     rax, 6
.text:0000000000004F5E                 lea     rax, [rcx+rax+50h]
.text:0000000000004F63                 nop     dword ptr [rax+rax+00h]
.text:0000000000004F68
.text:0000000000004F68 loc_4F68:                               ; CODE XREF: print_files+C9A↓j
.text:0000000000004F68                 cmp     dword ptr [rdx], 3
.text:0000000000004F6B                 jz      short loc_4F73
.text:0000000000004F6D                 mov     dword ptr [rdx], 2
.text:0000000000004F73
.text:0000000000004F73 loc_4F73:                               ; CODE XREF: print_files+C8B↑j
.text:0000000000004F73                 add     rdx, 40h ; '@'
.text:0000000000004F77                 cmp     rdx, rax
.text:0000000000004F7A                 jnz     short loc_4F68
.text:0000000000004F7C
.text:0000000000004F7C loc_4F7C:                               ; CODE XREF: print_files+C24↑j
.text:0000000000004F7C                                         ; print_files+C66↑j ...
.text:0000000000004F7C                 call    reset_status
.text:0000000000004F81                 mov     r8d, cs:files_ready_to_read
.text:0000000000004F88                 mov     cs:last_line, 0
.text:0000000000004F8F                 test    r8d, r8d
.text:0000000000004F92                 jle     loc_517D
.text:0000000000004F98                 add     r12, 1
.text:0000000000004F9C                 cmp     r13, r12
.text:0000000000004F9F                 jnz     loc_4E88
.text:0000000000004FA5
.text:0000000000004FA5 loc_4FA5:                               ; CODE XREF: print_files+ECC↓j
.text:0000000000004FA5                 mov     rax, cs:first_page_number
.text:0000000000004FAC                 mov     cs:page_number, rax
.text:0000000000004FB3                 jmp     loc_468F
.text:0000000000004FB8 ; ---------------------------------------------------------------------------
.text:0000000000004FB8
.text:0000000000004FB8 loc_4FB8:                               ; CODE XREF: print_files+85E↑j
.text:0000000000004FB8                 xor     eax, eax
.text:0000000000004FBA
.text:0000000000004FBA loc_4FBA:                               ; CODE XREF: print_files+88F↑j
.text:0000000000004FBA                 xor     ecx, ecx
.text:0000000000004FBC                 xor     r12d, r12d
.text:0000000000004FBF                 jmp     loc_4D24
.text:0000000000004FC4 ; ---------------------------------------------------------------------------
.text:0000000000004FC4
.text:0000000000004FC4 loc_4FC4:                               ; CODE XREF: print_files+262↑j
.text:0000000000004FC4                 lea     rdi, asc_BEE4+1 ; ""
.text:0000000000004FCB                 mov     esi, 0FFFFFFFFh
.text:0000000000004FD0                 call    init_header
.text:0000000000004FD5                 jmp     loc_465A
.text:0000000000004FDA ; ---------------------------------------------------------------------------
.text:0000000000004FDA
.text:0000000000004FDA loc_4FDA:                               ; CODE XREF: print_files+38D↑j
.text:0000000000004FDA                 mov     ebx, cs:lines_per_body
.text:0000000000004FE0                 imul    ebx, cs:columns
.text:0000000000004FE7                 jo      loc_5236
.text:0000000000004FED                 mov     r12d, ebx
.text:0000000000004FF0                 add     r12d, 1
.text:0000000000004FF4                 jo      loc_5236
.text:0000000000004FFA                 mov     ebp, cs:chars_per_column
.text:0000000000005000                 add     ebp, 1
.text:0000000000005003                 jo      loc_5236
.text:0000000000005009                 imul    ebp, ebx
.text:000000000000500C                 jo      loc_5236
.text:0000000000005012                 mov     rdi, cs:line_vector ; ptr
.text:0000000000005019                 call    _free
.text:000000000000501E                 mov     edx, 4
.text:0000000000005023                 movsxd  rcx, r12d
.text:0000000000005026                 xor     esi, esi
.text:0000000000005028                 mov     rax, rdx
.text:000000000000502B                 mul     rcx
.text:000000000000502E                 jo      loc_522C
.text:0000000000005034
.text:0000000000005034 loc_5034:                               ; CODE XREF: print_files+F51↓j
.text:0000000000005034                 test    rax, rax
.text:0000000000005037                 js      loc_527D
.text:000000000000503D                 test    rsi, rsi
.text:0000000000005040                 jnz     loc_527D
.text:0000000000005046                 lea     rdi, ds:0[rcx*4]
.text:000000000000504E                 movsxd  rbx, ebx
.text:0000000000005051                 call    xmalloc
.text:0000000000005056                 mov     rdi, cs:end_vector ; ptr
.text:000000000000505D                 mov     cs:line_vector, rax
.text:0000000000005064                 call    _free
.text:0000000000005069                 mov     edx, 4
.text:000000000000506E                 xor     ecx, ecx
.text:0000000000005070                 mov     rax, rdx
.text:0000000000005073                 mul     rbx
.text:0000000000005076                 jo      loc_523B
.text:000000000000507C
.text:000000000000507C loc_507C:                               ; CODE XREF: print_files+F60↓j
.text:000000000000507C                 test    rax, rax
.text:000000000000507F                 js      loc_527D
.text:0000000000005085                 test    rcx, rcx
.text:0000000000005088                 jnz     loc_527D
.text:000000000000508E                 lea     rdi, ds:0[rbx*4]
.text:0000000000005096                 movsxd  rbp, ebp
.text:0000000000005099                 call    xmalloc
.text:000000000000509E                 mov     rdi, cs:buff    ; ptr
.text:00000000000050A5                 mov     cs:end_vector, rax
.text:00000000000050AC                 call    _free
.text:00000000000050B1                 movzx   eax, cs:use_col_separator
.text:00000000000050B8                 lea     rdi, [rax+1]
.text:00000000000050BC                 mov     rax, rdi
.text:00000000000050BF                 mul     rbp
.text:00000000000050C2                 mov     rdi, rax
.text:00000000000050C5                 seto    al
.text:00000000000050C8                 test    rdi, rdi
.text:00000000000050CB                 movzx   eax, al
.text:00000000000050CE                 js      loc_527D
.text:00000000000050D4                 test    rax, rax
.text:00000000000050D7                 jnz     loc_527D
.text:00000000000050DD                 call    xmalloc
.text:00000000000050E2                 mov     cs:buff, rax
.text:00000000000050E9                 movzx   eax, cs:use_col_separator
.text:00000000000050F0                 add     rax, 1
.text:00000000000050F4                 imul    rbp, rax
.text:00000000000050F8                 mov     cs:buff_allocated, rbp
.text:00000000000050FF                 jmp     loc_4673
.text:0000000000005104 ; ---------------------------------------------------------------------------
.text:0000000000005104
.text:0000000000005104 loc_5104:                               ; CODE XREF: print_files+2FA↑j
.text:0000000000005104                 lea     rsi, aStandardInput ; "standard input"
.text:000000000000510B                 mov     edx, 5          ; category
.text:0000000000005110                 xor     edi, edi        ; domainname
.text:0000000000005112                 call    _dcgettext
.text:0000000000005117                 mov     [rbx+8], rax
.text:000000000000511B                 mov     rax, cs:stdin@@GLIBC_2_2_5
.text:0000000000005122                 lea     rdi, asc_BEE4+1 ; ""
.text:0000000000005129                 mov     dword ptr [rbx+10h], 0
.text:0000000000005130                 mov     byte ptr [rbx+39h], 0
.text:0000000000005134                 mov     esi, 0FFFFFFFFh
.text:0000000000005139                 mov     cs:have_read_stdin, 1
.text:0000000000005140                 add     cs:total_files, 1
.text:0000000000005147                 mov     [rbx], rax
.text:000000000000514A                 call    init_header
.text:000000000000514F                 mov     dword ptr [rbx+2Ch], 0
.text:0000000000005156                 jmp     loc_460E
.text:000000000000515B ; ---------------------------------------------------------------------------
.text:000000000000515B
.text:000000000000515B loc_515B:                               ; CODE XREF: print_files+107↑j
.text:000000000000515B                 mov     edi, edx
.text:000000000000515D                 sar     edi, 1Fh
.text:0000000000005160                 shr     edi, 1Dh
.text:0000000000005163                 lea     r8d, [rdx+rdi]
.text:0000000000005167                 and     r8d, 7
.text:000000000000516B                 sub     edi, r8d
.text:000000000000516E                 lea     edx, [rdx+rdi+8]
.text:0000000000005172                 mov     cs:number_width, edx
.text:0000000000005178                 jmp     loc_43F6
.text:000000000000517D ; ---------------------------------------------------------------------------
.text:000000000000517D
.text:000000000000517D loc_517D:                               ; CODE XREF: print_files+CB2↑j
.text:000000000000517D                 lea     rsi, aStartingPageNu ; "starting page number %lu exceeds page c"...
.text:0000000000005184                 xor     edi, edi        ; domainname
.text:0000000000005186                 mov     edx, 5          ; category
.text:000000000000518B                 call    _dcgettext
.text:0000000000005190                 xor     edi, edi        ; status
.text:0000000000005192                 mov     rdx, rax        ; format
.text:0000000000005195                 xor     esi, esi        ; errnum
.text:0000000000005197                 xor     eax, eax
.text:0000000000005199                 mov     r8, r12
.text:000000000000519C                 mov     rcx, r13
.text:000000000000519F                 call    _error
.text:00000000000051A4                 mov     edi, cs:files_ready_to_read
.text:00000000000051AA                 test    edi, edi
.text:00000000000051AC                 jg      loc_4FA5
.text:00000000000051B2                 add     rsp, 18h
.text:00000000000051B6                 pop     rbx
.text:00000000000051B7                 pop     rbp
.text:00000000000051B8                 pop     r12
.text:00000000000051BA                 pop     r13
.text:00000000000051BC                 pop     r14
.text:00000000000051BE                 pop     r15
.text:00000000000051C0                 retn
.text:00000000000051C1 ; ---------------------------------------------------------------------------
.text:00000000000051C1
.text:00000000000051C1 loc_51C1:                               ; CODE XREF: print_files+B4B↑j
.text:00000000000051C1                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000051C8                 mov     rax, [rdi+28h]
.text:00000000000051CC                 cmp     rax, [rdi+30h]
.text:00000000000051D0                 jnb     short loc_521D
.text:00000000000051D2                 lea     rdx, [rax+1]
.text:00000000000051D6                 mov     [rdi+28h], rdx
.text:00000000000051DA                 mov     byte ptr [rax], 0Ch
.text:00000000000051DD                 jmp     loc_4AD8
.text:00000000000051E2 ; ---------------------------------------------------------------------------
.text:00000000000051E2
.text:00000000000051E2 loc_51E2:                               ; CODE XREF: print_files+5D9↑j
.text:00000000000051E2                 jnz     loc_4A9F
.text:00000000000051E8                 test    r10d, r10d
.text:00000000000051EB                 jg      loc_4A5C
.text:00000000000051F1                 mov     cs:pad_vertically, 0
.text:00000000000051F8                 jmp     loc_4A9F
.text:00000000000051FD ; ---------------------------------------------------------------------------
.text:00000000000051FD
.text:00000000000051FD loc_51FD:                               ; CODE XREF: print_files+412↑j
.text:00000000000051FD                 mov     edx, 1
.text:0000000000005202                 movzx   edi, cs:numbered_lines
.text:0000000000005209                 jmp     loc_47D2
.text:000000000000520E ; ---------------------------------------------------------------------------
.text:000000000000520E
.text:000000000000520E loc_520E:                               ; CODE XREF: print_files+7E0↑j
.text:000000000000520E                 mov     esi, 0Ch        ; int
.text:0000000000005213                 call    ___overflow
.text:0000000000005218                 jmp     loc_4AD1
.text:000000000000521D ; ---------------------------------------------------------------------------
.text:000000000000521D
.text:000000000000521D loc_521D:                               ; CODE XREF: print_files+EF0↑j
.text:000000000000521D                 mov     esi, 0Ch        ; int
.text:0000000000005222                 call    ___overflow
.text:0000000000005227                 jmp     loc_4AD8
.text:000000000000522C ; ---------------------------------------------------------------------------
.text:000000000000522C
.text:000000000000522C loc_522C:                               ; CODE XREF: print_files+D4E↑j
.text:000000000000522C                 mov     esi, 1
.text:0000000000005231                 jmp     loc_5034
.text:0000000000005236 ; ---------------------------------------------------------------------------
.text:0000000000005236
.text:0000000000005236 loc_5236:                               ; CODE XREF: print_files+D07↑j
.text:0000000000005236                                         ; print_files+D14↑j ...
.text:0000000000005236                 call    integer_overflow
.text:000000000000523B
.text:000000000000523B loc_523B:                               ; CODE XREF: print_files+D96↑j
.text:000000000000523B                 mov     ecx, 1
.text:0000000000005240                 jmp     loc_507C
.text:0000000000005245 ; ---------------------------------------------------------------------------
.text:0000000000005245
.text:0000000000005245 loc_5245:                               ; CODE XREF: print_files+1E4↑j
.text:0000000000005245                 mov     ecx, 1
.text:000000000000524A                 jmp     loc_44CA
.text:000000000000524F ; ---------------------------------------------------------------------------
.text:000000000000524F
.text:000000000000524F loc_524F:                               ; CODE XREF: print_files+13F↑j
.text:000000000000524F                 mov     cs:chars_per_column, 0
.text:0000000000005259
.text:0000000000005259 loc_5259:                               ; CODE XREF: print_files+150↑j
.text:0000000000005259                 lea     rsi, aPageWidthTooNa ; "page width too narrow"
.text:0000000000005260                 mov     edx, 5          ; category
.text:0000000000005265                 xor     edi, edi        ; domainname
.text:0000000000005267                 call    _dcgettext
.text:000000000000526C                 xor     esi, esi        ; errnum
.text:000000000000526E                 mov     rdx, rax        ; format
.text:0000000000005271                 mov     edi, 1          ; status
.text:0000000000005276                 xor     eax, eax
.text:0000000000005278                 call    _error
.text:000000000000527D
.text:000000000000527D loc_527D:                               ; CODE XREF: print_files+1ED↑j
.text:000000000000527D                                         ; print_files+1F6↑j ...
.text:000000000000527D                 call    xalloc_die
.text:0000000000005282 ; ---------------------------------------------------------------------------
.text:0000000000005282
.text:0000000000005282 loc_5282:                               ; CODE XREF: print_files+27E↑j
.text:0000000000005282                 mov     ecx, cs:columns
.text:0000000000005288                 jmp     loc_434C
.text:000000000000528D ; ---------------------------------------------------------------------------
.text:000000000000528D
.text:000000000000528D loc_528D:                               ; CODE XREF: print_files+12F↑j
.text:000000000000528D                 mov     edx, 7FFFFFFFh
.text:0000000000005292                 jmp     loc_4415
.text:0000000000005292 ; } // starts at 42E0
.text:0000000000005292 print_files     endp
.text:0000000000005292
.text:0000000000005292 ; ---------------------------------------------------------------------------
.text:0000000000005297                 align 20h
.text:00000000000052A0
.text:00000000000052A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000052A0
.text:00000000000052A0 ; Attributes: noreturn
.text:00000000000052A0
.text:00000000000052A0 ; void __fastcall __noreturn usage(int status)
.text:00000000000052A0                 public usage
.text:00000000000052A0 usage           proc near               ; CODE XREF: main+88C↑p
.text:00000000000052A0                                         ; main+896↑p ...
.text:00000000000052A0
.text:00000000000052A0 var_A8          = qword ptr -0A8h
.text:00000000000052A0 var_A0          = qword ptr -0A0h
.text:00000000000052A0 var_98          = qword ptr -98h
.text:00000000000052A0 var_90          = qword ptr -90h
.text:00000000000052A0 var_88          = qword ptr -88h
.text:00000000000052A0 var_80          = qword ptr -80h
.text:00000000000052A0 var_78          = qword ptr -78h
.text:00000000000052A0 var_70          = qword ptr -70h
.text:00000000000052A0 var_68          = qword ptr -68h
.text:00000000000052A0 var_60          = qword ptr -60h
.text:00000000000052A0 var_58          = qword ptr -58h
.text:00000000000052A0 var_50          = qword ptr -50h
.text:00000000000052A0 var_48          = qword ptr -48h
.text:00000000000052A0 var_40          = qword ptr -40h
.text:00000000000052A0 var_30          = qword ptr -30h
.text:00000000000052A0
.text:00000000000052A0 ; __unwind {
.text:00000000000052A0                 push    r13
.text:00000000000052A2                 push    r12
.text:00000000000052A4                 mov     edx, 5          ; category
.text:00000000000052A9                 push    rbp
.text:00000000000052AA                 push    rbx
.text:00000000000052AB                 mov     ebp, edi
.text:00000000000052AD                 sub     rsp, 88h
.text:00000000000052B4                 mov     rbx, cs:program_name
.text:00000000000052BB                 mov     rax, fs:28h
.text:00000000000052C4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000052C9                 xor     eax, eax
.text:00000000000052CB                 test    edi, edi
.text:00000000000052CD                 jz      short loc_52FD
.text:00000000000052CF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000052D6                 xor     edi, edi        ; domainname
.text:00000000000052D8                 call    _dcgettext
.text:00000000000052DD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000052E4                 mov     rdx, rax
.text:00000000000052E7                 mov     rcx, rbx
.text:00000000000052EA                 mov     esi, 1
.text:00000000000052EF                 xor     eax, eax
.text:00000000000052F1                 call    ___fprintf_chk
.text:00000000000052F6
.text:00000000000052F6 loc_52F6:                               ; CODE XREF: usage+4A6↓j
.text:00000000000052F6                 mov     edi, ebp        ; status
.text:00000000000052F8                 call    _exit
.text:00000000000052FD ; ---------------------------------------------------------------------------
.text:00000000000052FD
.text:00000000000052FD loc_52FD:                               ; CODE XREF: usage+2D↑j
.text:00000000000052FD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n"
.text:0000000000005304                 xor     edi, edi        ; domainname
.text:0000000000005306                 call    _dcgettext
.text:000000000000530B                 mov     rdx, rbx
.text:000000000000530E                 mov     rsi, rax
.text:0000000000005311                 mov     edi, 1
.text:0000000000005316                 xor     eax, eax
.text:0000000000005318                 call    ___printf_chk
.text:000000000000531D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005324                 lea     rsi, aPaginateOrColu ; "Paginate or columnate FILE(s) for print"...
.text:000000000000532B                 mov     edx, 5          ; category
.text:0000000000005330                 xor     edi, edi        ; domainname
.text:0000000000005332                 call    _dcgettext
.text:0000000000005337                 mov     rsi, rbx        ; stream
.text:000000000000533A                 mov     rdi, rax        ; s
.text:000000000000533D                 call    _fputs_unlocked
.text:0000000000005342                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005349                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000005350                 mov     edx, 5          ; category
.text:0000000000005355                 xor     edi, edi        ; domainname
.text:0000000000005357                 call    _dcgettext
.text:000000000000535C                 mov     rsi, rbx        ; stream
.text:000000000000535F                 mov     rdi, rax        ; s
.text:0000000000005362                 call    _fputs_unlocked
.text:0000000000005367                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000536E                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000005375                 mov     edx, 5          ; category
.text:000000000000537A                 xor     edi, edi        ; domainname
.text:000000000000537C                 call    _dcgettext
.text:0000000000005381                 mov     rsi, rbx        ; stream
.text:0000000000005384                 mov     rdi, rax        ; s
.text:0000000000005387                 call    _fputs_unlocked
.text:000000000000538C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005393                 lea     rsi, aFirstPageLastP ; "  +FIRST_PAGE[:LAST_PAGE], --pages=FIRS"...
.text:000000000000539A                 mov     edx, 5          ; category
.text:000000000000539F                 xor     edi, edi        ; domainname
.text:00000000000053A1                 call    _dcgettext
.text:00000000000053A6                 mov     rsi, rbx        ; stream
.text:00000000000053A9                 mov     rdi, rax        ; s
.text:00000000000053AC                 call    _fputs_unlocked
.text:00000000000053B1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000053B8                 lea     rsi, aAAcrossPrintCo ; "  -a, --across      print columns acros"...
.text:00000000000053BF                 mov     edx, 5          ; category
.text:00000000000053C4                 xor     edi, edi        ; domainname
.text:00000000000053C6                 call    _dcgettext
.text:00000000000053CB                 mov     rsi, rbx        ; stream
.text:00000000000053CE                 mov     rdi, rax        ; s
.text:00000000000053D1                 call    _fputs_unlocked
.text:00000000000053D6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000053DD                 lea     rsi, aDDateFormatFor ; "  -D, --date-format=FORMAT\n           "...
.text:00000000000053E4                 mov     edx, 5          ; category
.text:00000000000053E9                 xor     edi, edi        ; domainname
.text:00000000000053EB                 call    _dcgettext
.text:00000000000053F0                 mov     rsi, rbx        ; stream
.text:00000000000053F3                 mov     rdi, rax        ; s
.text:00000000000053F6                 call    _fputs_unlocked
.text:00000000000053FB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005402                 lea     rsi, aHHeaderHeaderU ; "  -h, --header=HEADER\n                "...
.text:0000000000005409                 mov     edx, 5          ; category
.text:000000000000540E                 xor     edi, edi        ; domainname
.text:0000000000005410                 call    _dcgettext
.text:0000000000005415                 mov     rsi, rbx        ; stream
.text:0000000000005418                 mov     rdi, rax        ; s
.text:000000000000541B                 call    _fputs_unlocked
.text:0000000000005420                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005427                 lea     rsi, aLLengthPageLen ; "  -l, --length=PAGE_LENGTH\n           "...
.text:000000000000542E                 mov     edx, 5          ; category
.text:0000000000005433                 xor     edi, edi        ; domainname
.text:0000000000005435                 call    _dcgettext
.text:000000000000543A                 mov     rsi, rbx        ; stream
.text:000000000000543D                 mov     rdi, rax        ; s
.text:0000000000005440                 call    _fputs_unlocked
.text:0000000000005445                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000544C                 lea     rsi, aMMergePrintAll ; "  -m, --merge       print all files in "...
.text:0000000000005453                 mov     edx, 5          ; category
.text:0000000000005458                 xor     edi, edi        ; domainname
.text:000000000000545A                 call    _dcgettext
.text:000000000000545F                 mov     rsi, rbx        ; stream
.text:0000000000005462                 mov     rdi, rax        ; s
.text:0000000000005465                 call    _fputs_unlocked
.text:000000000000546A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005471                 lea     rsi, aNSepDigitsNumb ; "  -n[SEP[DIGITS]], --number-lines[=SEP["...
.text:0000000000005478                 mov     edx, 5          ; category
.text:000000000000547D                 xor     edi, edi        ; domainname
.text:000000000000547F                 call    _dcgettext
.text:0000000000005484                 mov     rsi, rbx        ; stream
.text:0000000000005487                 mov     rdi, rax        ; s
.text:000000000000548A                 call    _fputs_unlocked
.text:000000000000548F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005496                 lea     rsi, aOIndentMarginO ; "  -o, --indent=MARGIN\n                "...
.text:000000000000549D                 mov     edx, 5          ; category
.text:00000000000054A2                 xor     edi, edi        ; domainname
.text:00000000000054A4                 call    _dcgettext
.text:00000000000054A9                 mov     rsi, rbx        ; stream
.text:00000000000054AC                 mov     rdi, rax        ; s
.text:00000000000054AF                 call    _fputs_unlocked
.text:00000000000054B4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000054BB                 lea     rsi, aSCharSeparator ; "  -s[CHAR], --separator[=CHAR]\n       "...
.text:00000000000054C2                 mov     edx, 5          ; category
.text:00000000000054C7                 xor     edi, edi        ; domainname
.text:00000000000054C9                 call    _dcgettext
.text:00000000000054CE                 mov     rsi, rbx        ; stream
.text:00000000000054D1                 mov     rdi, rax        ; s
.text:00000000000054D4                 call    _fputs_unlocked
.text:00000000000054D9                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000054E0                 lea     rsi, aSStringSepStri ; "  -S[STRING], --sep-string[=STRING]\n  "...
.text:00000000000054E7                 mov     edx, 5          ; category
.text:00000000000054EC                 xor     edi, edi        ; domainname
.text:00000000000054EE                 call    _dcgettext
.text:00000000000054F3                 mov     rsi, rbx        ; stream
.text:00000000000054F6                 mov     rdi, rax        ; s
.text:00000000000054F9                 call    _fputs_unlocked
.text:00000000000054FE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005505                 lea     rsi, aTOmitHeaderOmi ; "  -t, --omit-header  omit page headers "...
.text:000000000000550C                 mov     edx, 5          ; category
.text:0000000000005511                 xor     edi, edi        ; domainname
.text:0000000000005513                 call    _dcgettext
.text:0000000000005518                 mov     rsi, rbx        ; stream
.text:000000000000551B                 mov     rdi, rax        ; s
.text:000000000000551E                 call    _fputs_unlocked
.text:0000000000005523                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000552A                 lea     rsi, aTOmitPaginatio ; "  -T, --omit-pagination\n              "...
.text:0000000000005531                 mov     edx, 5          ; category
.text:0000000000005536                 xor     edi, edi        ; domainname
.text:0000000000005538                 call    _dcgettext
.text:000000000000553D                 mov     rsi, rbx        ; stream
.text:0000000000005540                 mov     rdi, rax        ; s
.text:0000000000005543                 call    _fputs_unlocked
.text:0000000000005548                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000554F                 lea     rsi, aWPageWidthPage ; "  -W, --page-width=PAGE_WIDTH\n        "...
.text:0000000000005556                 mov     edx, 5          ; category
.text:000000000000555B                 xor     edi, edi        ; domainname
.text:000000000000555D                 call    _dcgettext
.text:0000000000005562                 mov     rsi, rbx        ; stream
.text:0000000000005565                 mov     rdi, rax        ; s
.text:0000000000005568                 call    _fputs_unlocked
.text:000000000000556D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005574                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000557B                 mov     edx, 5          ; category
.text:0000000000005580                 xor     edi, edi        ; domainname
.text:0000000000005582                 call    _dcgettext
.text:0000000000005587                 mov     rsi, rbx        ; stream
.text:000000000000558A                 mov     rdi, rax        ; s
.text:000000000000558D                 call    _fputs_unlocked
.text:0000000000005592                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005599                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000055A0                 mov     edx, 5          ; category
.text:00000000000055A5                 xor     edi, edi        ; domainname
.text:00000000000055A7                 call    _dcgettext
.text:00000000000055AC                 mov     rsi, rbx        ; stream
.text:00000000000055AF                 mov     rdi, rax        ; s
.text:00000000000055B2                 lea     rbx, aPr        ; "pr"
.text:00000000000055B9                 call    _fputs_unlocked
.text:00000000000055BE                 lea     rax, asc_BEFF   ; "["
.text:00000000000055C5                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000055CC                 mov     [rsp+0A8h+var_48], 0
.text:00000000000055D5                 mov     [rsp+0A8h+var_40], 0
.text:00000000000055DE                 mov     rdx, rsp
.text:00000000000055E1                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000055E5                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000055EC                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000055F1                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000055F8                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000055FD                 lea     rax, domainname ; "coreutils"
.text:0000000000005604                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000005609                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000005610                 mov     [rsp+0A8h+var_98], rax
.text:0000000000005615                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000561C                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000005621                 mov     [rsp+0A8h+var_90], rax
.text:0000000000005626                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000562D                 mov     [rsp+0A8h+var_88], rax
.text:0000000000005632                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000005639                 mov     [rsp+0A8h+var_80], rax
.text:000000000000563E                 mov     [rsp+0A8h+var_70], rax
.text:0000000000005643                 mov     [rsp+0A8h+var_60], rax
.text:0000000000005648                 mov     [rsp+0A8h+var_50], rax
.text:000000000000564D                 nop     dword ptr [rax]
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: usage+3CD↓j
.text:0000000000005650                 add     rdx, 10h
.text:0000000000005654                 mov     rdi, [rdx]
.text:0000000000005657                 test    rdi, rdi
.text:000000000000565A                 jz      short loc_566F
.text:000000000000565C                 mov     ecx, 3
.text:0000000000005661                 mov     rsi, rbx
.text:0000000000005664                 repe cmpsb
.text:0000000000005666                 setnbe  al
.text:0000000000005669                 sbb     al, 0
.text:000000000000566B                 test    al, al
.text:000000000000566D                 jnz     short loc_5650
.text:000000000000566F
.text:000000000000566F loc_566F:                               ; CODE XREF: usage+3BA↑j
.text:000000000000566F                 mov     r12, [rdx+8]
.text:0000000000005673                 xor     edi, edi        ; domainname
.text:0000000000005675                 mov     edx, 5          ; category
.text:000000000000567A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000005681                 test    r12, r12
.text:0000000000005684                 jz      loc_574B
.text:000000000000568A                 call    _dcgettext
.text:000000000000568F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005696                 lea     rdx, unk_BF75
.text:000000000000569D                 mov     rsi, rax
.text:00000000000056A0                 mov     edi, 1
.text:00000000000056A5                 xor     eax, eax
.text:00000000000056A7                 call    ___printf_chk
.text:00000000000056AC                 xor     esi, esi        ; locale
.text:00000000000056AE                 mov     edi, 5          ; category
.text:00000000000056B3                 call    _setlocale
.text:00000000000056B8                 test    rax, rax
.text:00000000000056BB                 jz      short loc_56D9
.text:00000000000056BD                 lea     rsi, s2         ; "en_"
.text:00000000000056C4                 mov     edx, 3          ; n
.text:00000000000056C9                 mov     rdi, rax        ; s1
.text:00000000000056CC                 call    _strncmp
.text:00000000000056D1                 test    eax, eax
.text:00000000000056D3                 jnz     loc_57E0
.text:00000000000056D9
.text:00000000000056D9 loc_56D9:                               ; CODE XREF: usage+41B↑j
.text:00000000000056D9                                         ; usage+565↓j
.text:00000000000056D9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000056E0                 xor     edi, edi        ; domainname
.text:00000000000056E2                 mov     edx, 5          ; category
.text:00000000000056E7                 call    _dcgettext
.text:00000000000056EC                 lea     rcx, aPr        ; "pr"
.text:00000000000056F3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000056FA                 mov     rsi, rax
.text:00000000000056FD                 mov     edi, 1
.text:0000000000005702                 xor     eax, eax
.text:0000000000005704                 call    ___printf_chk
.text:0000000000005709                 cmp     r12, rbx
.text:000000000000570C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000005713                 lea     rbx, asc_BEE4+1 ; ""
.text:000000000000571A                 cmovz   rbx, rcx
.text:000000000000571E
.text:000000000000571E loc_571E:                               ; CODE XREF: usage+534↓j
.text:000000000000571E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000005725                 xor     edi, edi        ; domainname
.text:0000000000005727                 mov     edx, 5          ; category
.text:000000000000572C                 call    _dcgettext
.text:0000000000005731                 mov     rcx, rbx
.text:0000000000005734                 mov     rsi, rax
.text:0000000000005737                 mov     rdx, r12
.text:000000000000573A                 mov     edi, 1
.text:000000000000573F                 xor     eax, eax
.text:0000000000005741                 call    ___printf_chk
.text:0000000000005746                 jmp     loc_52F6
.text:000000000000574B ; ---------------------------------------------------------------------------
.text:000000000000574B
.text:000000000000574B loc_574B:                               ; CODE XREF: usage+3E4↑j
.text:000000000000574B                 call    _dcgettext
.text:0000000000005750                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005757                 lea     rdx, unk_BF75
.text:000000000000575E                 mov     rsi, rax
.text:0000000000005761                 mov     edi, 1
.text:0000000000005766                 xor     eax, eax
.text:0000000000005768                 call    ___printf_chk
.text:000000000000576D                 xor     esi, esi        ; locale
.text:000000000000576F                 mov     edi, 5          ; category
.text:0000000000005774                 call    _setlocale
.text:0000000000005779                 test    rax, rax
.text:000000000000577C                 jz      short loc_5796
.text:000000000000577E                 lea     rsi, s2         ; "en_"
.text:0000000000005785                 mov     edx, 3          ; n
.text:000000000000578A                 mov     rdi, rax        ; s1
.text:000000000000578D                 call    _strncmp
.text:0000000000005792                 test    eax, eax
.text:0000000000005794                 jnz     short loc_57D9
.text:0000000000005796
.text:0000000000005796 loc_5796:                               ; CODE XREF: usage+4DC↑j
.text:0000000000005796                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000579D                 mov     edx, 5          ; category
.text:00000000000057A2                 xor     edi, edi        ; domainname
.text:00000000000057A4                 lea     r12, aPr        ; "pr"
.text:00000000000057AB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000057B2                 call    _dcgettext
.text:00000000000057B7                 lea     rcx, aPr        ; "pr"
.text:00000000000057BE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000057C5                 mov     rsi, rax
.text:00000000000057C8                 mov     edi, 1
.text:00000000000057CD                 xor     eax, eax
.text:00000000000057CF                 call    ___printf_chk
.text:00000000000057D4                 jmp     loc_571E
.text:00000000000057D9 ; ---------------------------------------------------------------------------
.text:00000000000057D9
.text:00000000000057D9 loc_57D9:                               ; CODE XREF: usage+4F4↑j
.text:00000000000057D9                 lea     r12, aPr        ; "pr"
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: usage+433↑j
.text:00000000000057E0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000057E7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000057EE                 xor     edi, edi        ; domainname
.text:00000000000057F0                 mov     edx, 5          ; category
.text:00000000000057F5                 call    _dcgettext
.text:00000000000057FA                 mov     rsi, r13        ; stream
.text:00000000000057FD                 mov     rdi, rax        ; s
.text:0000000000005800                 call    _fputs_unlocked
.text:0000000000005805                 jmp     loc_56D9
.text:0000000000005805 ; } // starts at 52A0
.text:0000000000005805 usage           endp
.text:0000000000005805
.text:0000000000005805 ; ---------------------------------------------------------------------------
.text:000000000000580A                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810
.text:0000000000005810 ; __int64 __fastcall getoptarg(char *nptr)
.text:0000000000005810 getoptarg       proc near               ; CODE XREF: main+4AB↑p
.text:0000000000005810                                         ; main+52C↑p ...
.text:0000000000005810
.text:0000000000005810 var_28          = qword ptr -28h
.text:0000000000005810 var_20          = qword ptr -20h
.text:0000000000005810
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 push    r12
.text:0000000000005812                 push    rbp
.text:0000000000005813                 mov     r12d, esi
.text:0000000000005816                 push    rbx
.text:0000000000005817                 mov     rbp, rcx
.text:000000000000581A                 mov     rbx, rdi
.text:000000000000581D                 sub     rsp, 10h
.text:0000000000005821                 movsx   esi, byte ptr [rdi]
.text:0000000000005824                 mov     rax, fs:28h
.text:000000000000582D                 mov     [rsp+28h+var_20], rax
.text:0000000000005832                 xor     eax, eax
.text:0000000000005834                 mov     eax, esi
.text:0000000000005836                 sub     esi, 30h ; '0'
.text:0000000000005839                 cmp     esi, 9
.text:000000000000583C                 jbe     short loc_5848
.text:000000000000583E                 mov     [rdx], al
.text:0000000000005840                 movzx   eax, byte ptr [rdi+1]
.text:0000000000005844                 add     rbx, 1
.text:0000000000005848
.text:0000000000005848 loc_5848:                               ; CODE XREF: getoptarg+2C↑j
.text:0000000000005848                 test    al, al
.text:000000000000584A                 jnz     short loc_5870
.text:000000000000584C
.text:000000000000584C loc_584C:                               ; CODE XREF: getoptarg+91↓j
.text:000000000000584C                 mov     rax, [rsp+28h+var_20]
.text:0000000000005851                 xor     rax, fs:28h
.text:000000000000585A                 jnz     loc_58FA
.text:0000000000005860                 add     rsp, 10h
.text:0000000000005864                 pop     rbx
.text:0000000000005865                 pop     rbp
.text:0000000000005866                 pop     r12
.text:0000000000005868                 retn
.text:0000000000005868 ; ---------------------------------------------------------------------------
.text:0000000000005869                 align 10h
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: getoptarg+3A↑j
.text:0000000000005870                 lea     r8, asc_BEE4+1  ; ""
.text:0000000000005877                 xor     esi, esi
.text:0000000000005879                 mov     rcx, rsp
.text:000000000000587C                 mov     edx, 0Ah
.text:0000000000005881                 mov     rdi, rbx        ; nptr
.text:0000000000005884                 call    xstrtol
.text:0000000000005889                 test    eax, eax
.text:000000000000588B                 jnz     short loc_58A3
.text:000000000000588D                 mov     rax, [rsp+28h+var_28]
.text:0000000000005891                 lea     rdx, [rax-1]
.text:0000000000005895                 cmp     rdx, 7FFFFFFEh
.text:000000000000589C                 ja      short loc_58A3
.text:000000000000589E                 mov     [rbp+0], eax
.text:00000000000058A1                 jmp     short loc_584C
.text:00000000000058A3 ; ---------------------------------------------------------------------------
.text:00000000000058A3
.text:00000000000058A3 loc_58A3:                               ; CODE XREF: getoptarg+7B↑j
.text:00000000000058A3                                         ; getoptarg+8C↑j
.text:00000000000058A3                 mov     rdi, rbx
.text:00000000000058A6                 movsx   r12d, r12b
.text:00000000000058AA                 call    quote
.text:00000000000058AF                 lea     rsi, aCExtraCharacte ; "'-%c' extra characters or invalid numbe"...
.text:00000000000058B6                 xor     edi, edi        ; domainname
.text:00000000000058B8                 mov     edx, 5          ; category
.text:00000000000058BD                 mov     rbp, rax
.text:00000000000058C0                 call    _dcgettext
.text:00000000000058C5                 cmp     [rsp+28h+var_28], 7FFFFFFFh
.text:00000000000058CD                 mov     rbx, rax
.text:00000000000058D0                 mov     esi, 4Bh ; 'K'
.text:00000000000058D5                 jg      short loc_58DE
.text:00000000000058D7                 call    ___errno_location
.text:00000000000058DC                 mov     esi, [rax]      ; errnum
.text:00000000000058DE
.text:00000000000058DE loc_58DE:                               ; CODE XREF: getoptarg+C5↑j
.text:00000000000058DE                 xor     edi, edi        ; status
.text:00000000000058E0                 mov     r8, rbp
.text:00000000000058E3                 mov     ecx, r12d
.text:00000000000058E6                 mov     rdx, rbx        ; format
.text:00000000000058E9                 xor     eax, eax
.text:00000000000058EB                 call    _error
.text:00000000000058F0                 mov     edi, 1          ; status
.text:00000000000058F5                 call    usage
.text:00000000000058FA ; ---------------------------------------------------------------------------
.text:00000000000058FA
.text:00000000000058FA loc_58FA:                               ; CODE XREF: getoptarg+4A↑j
.text:00000000000058FA                 call    ___stack_chk_fail
.text:00000000000058FA ; } // starts at 5810
.text:00000000000058FA getoptarg       endp
.text:00000000000058FA
.text:00000000000058FA ; ---------------------------------------------------------------------------
.text:00000000000058FF                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900
.text:0000000000005900                 public close_stdout_set_file_name
.text:0000000000005900 close_stdout_set_file_name proc near
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 mov     cs:file_name, rdi
.text:0000000000005907                 retn
.text:0000000000005907 ; } // starts at 5900
.text:0000000000005907 close_stdout_set_file_name endp
.text:0000000000005907
.text:0000000000005907 ; ---------------------------------------------------------------------------
.text:0000000000005908                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910
.text:0000000000005910                 public close_stdout_set_ignore_EPIPE
.text:0000000000005910 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 mov     cs:ignore_EPIPE, dil
.text:0000000000005917                 retn
.text:0000000000005917 ; } // starts at 5910
.text:0000000000005917 close_stdout_set_ignore_EPIPE endp
.text:0000000000005917
.text:0000000000005917 ; ---------------------------------------------------------------------------
.text:0000000000005918                 align 20h
.text:0000000000005920
.text:0000000000005920 ; =============== S U B R O U T I N E =======================================
.text:0000000000005920
.text:0000000000005920 ; Attributes: info_from_lumina
.text:0000000000005920
.text:0000000000005920 ; void __cdecl close_stdout()
.text:0000000000005920                 public close_stdout
.text:0000000000005920 close_stdout    proc near               ; DATA XREF: main+65↑o
.text:0000000000005920 ; __unwind {
.text:0000000000005920                 push    rbp
.text:0000000000005921                 push    rbx
.text:0000000000005922                 sub     rsp, 8
.text:0000000000005926                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:000000000000592D                 call    close_stream
.text:0000000000005932                 test    eax, eax
.text:0000000000005934                 jz      short loc_594C
.text:0000000000005936                 call    ___errno_location
.text:000000000000593B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005942                 mov     rbx, rax
.text:0000000000005945                 jz      short loc_5963
.text:0000000000005947                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000594A                 jnz     short loc_5963
.text:000000000000594C
.text:000000000000594C loc_594C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000594C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005953                 call    close_stream
.text:0000000000005958                 test    eax, eax
.text:000000000000595A                 jnz     short loc_59A2
.text:000000000000595C                 add     rsp, 8
.text:0000000000005960                 pop     rbx
.text:0000000000005961                 pop     rbp
.text:0000000000005962                 retn
.text:0000000000005963 ; ---------------------------------------------------------------------------
.text:0000000000005963
.text:0000000000005963 loc_5963:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005963                                         ; close_stdout+2A↑j
.text:0000000000005963                 lea     rsi, aWriteError ; "write error"
.text:000000000000596A                 xor     edi, edi        ; domainname
.text:000000000000596C                 mov     edx, 5          ; category
.text:0000000000005971                 call    _dcgettext
.text:0000000000005976                 mov     rdi, cs:file_name
.text:000000000000597D                 mov     rbp, rax
.text:0000000000005980                 test    rdi, rdi
.text:0000000000005983                 jz      short loc_59AD
.text:0000000000005985                 call    quotearg_colon
.text:000000000000598A                 mov     esi, [rbx]      ; errnum
.text:000000000000598C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005993                 mov     rcx, rax
.text:0000000000005996                 mov     r8, rbp
.text:0000000000005999                 xor     edi, edi        ; status
.text:000000000000599B                 xor     eax, eax
.text:000000000000599D                 call    _error
.text:00000000000059A2
.text:00000000000059A2 loc_59A2:                               ; CODE XREF: close_stdout+3A↑j
.text:00000000000059A2                                         ; close_stdout+A2↓j
.text:00000000000059A2                 mov     edi, cs:exit_failure ; status
.text:00000000000059A8                 call    __exit
.text:00000000000059AD ; ---------------------------------------------------------------------------
.text:00000000000059AD
.text:00000000000059AD loc_59AD:                               ; CODE XREF: close_stdout+63↑j
.text:00000000000059AD                 mov     esi, [rbx]      ; errnum
.text:00000000000059AF                 lea     rdx, format+4   ; format
.text:00000000000059B6                 mov     rcx, rax
.text:00000000000059B9                 xor     edi, edi        ; status
.text:00000000000059BB                 xor     eax, eax
.text:00000000000059BD                 call    _error
.text:00000000000059C2                 jmp     short loc_59A2
.text:00000000000059C2 ; } // starts at 5920
.text:00000000000059C2 close_stdout    endp
.text:00000000000059C2
.text:00000000000059C2 ; ---------------------------------------------------------------------------
.text:00000000000059C4                 align 10h
.text:00000000000059D0
.text:00000000000059D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059D0
.text:00000000000059D0
.text:00000000000059D0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:00000000000059D0                 public fdadvise
.text:00000000000059D0 fdadvise        proc near
.text:00000000000059D0 ; __unwind {
.text:00000000000059D0                 jmp     _posix_fadvise
.text:00000000000059D0 ; } // starts at 59D0
.text:00000000000059D0 fdadvise        endp
.text:00000000000059D0
.text:00000000000059D0 ; ---------------------------------------------------------------------------
.text:00000000000059D5                 align 20h
.text:00000000000059E0
.text:00000000000059E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059E0
.text:00000000000059E0
.text:00000000000059E0                 public fadvise
.text:00000000000059E0 fadvise         proc near               ; CODE XREF: open_file+58↑p
.text:00000000000059E0 ; __unwind {
.text:00000000000059E0                 test    rdi, rdi
.text:00000000000059E3                 jz      short locret_5A00
.text:00000000000059E5                 push    rbx
.text:00000000000059E6                 mov     ebx, esi
.text:00000000000059E8                 call    _fileno
.text:00000000000059ED                 mov     ecx, ebx        ; advise
.text:00000000000059EF                 xor     edx, edx        ; len
.text:00000000000059F1                 xor     esi, esi        ; offset
.text:00000000000059F3                 pop     rbx
.text:00000000000059F4                 mov     edi, eax        ; fd
.text:00000000000059F6                 jmp     _posix_fadvise
.text:00000000000059F6 ; ---------------------------------------------------------------------------
.text:00000000000059FB                 align 20h
.text:0000000000005A00
.text:0000000000005A00 locret_5A00:                            ; CODE XREF: fadvise+3↑j
.text:0000000000005A00                 rep retn
.text:0000000000005A00 ; } // starts at 59E0
.text:0000000000005A00 fadvise         endp
.text:0000000000005A00
.text:0000000000005A00 ; ---------------------------------------------------------------------------
.text:0000000000005A02                 align 10h
.text:0000000000005A10
.text:0000000000005A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A10
.text:0000000000005A10
.text:0000000000005A10                 public fopen_safer
.text:0000000000005A10 fopen_safer     proc near               ; CODE XREF: open_file+8E↑p
.text:0000000000005A10 ; __unwind {
.text:0000000000005A10                 push    r12
.text:0000000000005A12                 push    rbp
.text:0000000000005A13                 mov     rbp, rsi
.text:0000000000005A16                 push    rbx
.text:0000000000005A17                 call    _fopen
.text:0000000000005A1C                 test    rax, rax
.text:0000000000005A1F                 mov     rbx, rax
.text:0000000000005A22                 jz      short loc_5A31
.text:0000000000005A24                 mov     rdi, rax        ; stream
.text:0000000000005A27                 call    _fileno
.text:0000000000005A2C                 cmp     eax, 2
.text:0000000000005A2F                 jbe     short loc_5A40
.text:0000000000005A31
.text:0000000000005A31 loc_5A31:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000005A31                                         ; fopen_safer+5B↓j ...
.text:0000000000005A31                 mov     rax, rbx
.text:0000000000005A34                 pop     rbx
.text:0000000000005A35                 pop     rbp
.text:0000000000005A36                 pop     r12
.text:0000000000005A38                 retn
.text:0000000000005A38 ; ---------------------------------------------------------------------------
.text:0000000000005A39                 align 20h
.text:0000000000005A40
.text:0000000000005A40 loc_5A40:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000005A40                 mov     edi, eax
.text:0000000000005A42                 call    dup_safer
.text:0000000000005A47                 test    eax, eax
.text:0000000000005A49                 mov     r12d, eax
.text:0000000000005A4C                 js      short loc_5A88
.text:0000000000005A4E                 mov     rdi, rbx        ; stream
.text:0000000000005A51                 call    rpl_fclose
.text:0000000000005A56                 test    eax, eax
.text:0000000000005A58                 jnz     short loc_5A6D
.text:0000000000005A5A                 mov     rsi, rbp        ; modes
.text:0000000000005A5D                 mov     edi, r12d       ; fd
.text:0000000000005A60                 call    _fdopen
.text:0000000000005A65                 test    rax, rax
.text:0000000000005A68                 mov     rbx, rax
.text:0000000000005A6B                 jnz     short loc_5A31
.text:0000000000005A6D
.text:0000000000005A6D loc_5A6D:                               ; CODE XREF: fopen_safer+48↑j
.text:0000000000005A6D                 call    ___errno_location
.text:0000000000005A72                 mov     ebp, [rax]
.text:0000000000005A74                 mov     rbx, rax
.text:0000000000005A77                 mov     edi, r12d       ; fd
.text:0000000000005A7A                 call    _close
.text:0000000000005A7F                 mov     [rbx], ebp
.text:0000000000005A81                 xor     ebx, ebx
.text:0000000000005A83                 jmp     short loc_5A31
.text:0000000000005A83 ; ---------------------------------------------------------------------------
.text:0000000000005A85                 align 8
.text:0000000000005A88
.text:0000000000005A88 loc_5A88:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000005A88                 call    ___errno_location
.text:0000000000005A8D                 mov     r12d, [rax]
.text:0000000000005A90                 mov     rbp, rax
.text:0000000000005A93                 mov     rdi, rbx        ; stream
.text:0000000000005A96                 call    rpl_fclose
.text:0000000000005A9B                 xor     ebx, ebx
.text:0000000000005A9D                 mov     [rbp+0], r12d
.text:0000000000005AA1                 jmp     short loc_5A31
.text:0000000000005AA1 ; } // starts at 5A10
.text:0000000000005AA1 fopen_safer     endp
.text:0000000000005AA1
.text:0000000000005AA1 ; ---------------------------------------------------------------------------
.text:0000000000005AA3                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AB0
.text:0000000000005AB0
.text:0000000000005AB0 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000005AB0                 public gettime
.text:0000000000005AB0 gettime         proc near               ; CODE XREF: init_header+183↑p
.text:0000000000005AB0 ; __unwind {
.text:0000000000005AB0                 mov     rsi, rdi        ; tp
.text:0000000000005AB3                 xor     edi, edi        ; clock_id
.text:0000000000005AB5                 jmp     _clock_gettime
.text:0000000000005AB5 ; } // starts at 5AB0
.text:0000000000005AB5 gettime         endp
.text:0000000000005AB5
.text:0000000000005AB5 ; ---------------------------------------------------------------------------
.text:0000000000005ABA                 align 20h
.text:0000000000005AC0
.text:0000000000005AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AC0
.text:0000000000005AC0
.text:0000000000005AC0                 public current_timespec
.text:0000000000005AC0 current_timespec proc near
.text:0000000000005AC0
.text:0000000000005AC0 var_28          = qword ptr -28h
.text:0000000000005AC0 var_20          = qword ptr -20h
.text:0000000000005AC0 var_10          = qword ptr -10h
.text:0000000000005AC0
.text:0000000000005AC0 ; __unwind {
.text:0000000000005AC0                 sub     rsp, 28h
.text:0000000000005AC4                 xor     edi, edi        ; clock_id
.text:0000000000005AC6                 mov     rsi, rsp        ; tp
.text:0000000000005AC9                 mov     rax, fs:28h
.text:0000000000005AD2                 mov     [rsp+28h+var_10], rax
.text:0000000000005AD7                 xor     eax, eax
.text:0000000000005AD9                 call    _clock_gettime
.text:0000000000005ADE                 mov     rcx, [rsp+28h+var_10]
.text:0000000000005AE3                 xor     rcx, fs:28h
.text:0000000000005AEC                 mov     rax, [rsp+28h+var_28]
.text:0000000000005AF0                 mov     rdx, [rsp+28h+var_20]
.text:0000000000005AF5                 jnz     short loc_5AFC
.text:0000000000005AF7                 add     rsp, 28h
.text:0000000000005AFB                 retn
.text:0000000000005AFC ; ---------------------------------------------------------------------------
.text:0000000000005AFC
.text:0000000000005AFC loc_5AFC:                               ; CODE XREF: current_timespec+35↑j
.text:0000000000005AFC                 call    ___stack_chk_fail
.text:0000000000005AFC ; } // starts at 5AC0
.text:0000000000005AFC current_timespec endp
.text:0000000000005AFC
.text:0000000000005AFC ; ---------------------------------------------------------------------------
.text:0000000000005B01                 align 10h
.text:0000000000005B10
.text:0000000000005B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B10
.text:0000000000005B10
.text:0000000000005B10                 public hard_locale
.text:0000000000005B10 hard_locale     proc near               ; CODE XREF: main+7DE↑p
.text:0000000000005B10                                         ; rpl_mbrtowc+47↓p
.text:0000000000005B10 ; __unwind {
.text:0000000000005B10                 sub     rsp, 8
.text:0000000000005B14                 xor     esi, esi        ; locale
.text:0000000000005B16                 call    _setlocale
.text:0000000000005B1B                 mov     rdx, rax
.text:0000000000005B1E                 mov     eax, 1
.text:0000000000005B23                 test    rdx, rdx
.text:0000000000005B26                 jz      short loc_5B45
.text:0000000000005B28                 lea     rdi, aC         ; "C"
.text:0000000000005B2F                 mov     ecx, 2
.text:0000000000005B34                 mov     rsi, rdx
.text:0000000000005B37                 repe cmpsb
.text:0000000000005B39                 setnbe  cl
.text:0000000000005B3C                 sbb     cl, 0
.text:0000000000005B3F                 xor     eax, eax
.text:0000000000005B41                 test    cl, cl
.text:0000000000005B43                 jnz     short loc_5B50
.text:0000000000005B45
.text:0000000000005B45 loc_5B45:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005B45                 add     rsp, 8
.text:0000000000005B49                 retn
.text:0000000000005B49 ; ---------------------------------------------------------------------------
.text:0000000000005B4A                 align 10h
.text:0000000000005B50
.text:0000000000005B50 loc_5B50:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005B50                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005B57                 mov     ecx, 6
.text:0000000000005B5C                 mov     rsi, rdx
.text:0000000000005B5F                 repe cmpsb
.text:0000000000005B61                 setnbe  al
.text:0000000000005B64                 sbb     al, 0
.text:0000000000005B66                 test    al, al
.text:0000000000005B68                 setnz   al
.text:0000000000005B6B                 add     rsp, 8
.text:0000000000005B6F                 retn
.text:0000000000005B6F ; } // starts at 5B10
.text:0000000000005B6F hard_locale     endp
.text:0000000000005B6F
.text:0000000000005B70
.text:0000000000005B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B70
.text:0000000000005B70 ; Attributes: info_from_lumina
.text:0000000000005B70
.text:0000000000005B70 ; char *__fastcall imaxtostr(intmax_t i, char *buf)
.text:0000000000005B70                 public imaxtostr
.text:0000000000005B70 imaxtostr       proc near               ; CODE XREF: init_header+1E9↑p
.text:0000000000005B70 ; __unwind {
.text:0000000000005B70                 test    rdi, rdi
.text:0000000000005B73                 lea     rcx, [rsi+14h]
.text:0000000000005B77                 mov     byte ptr [rsi+14h], 0
.text:0000000000005B7B                 mov     r9, 6666666666666667h
.text:0000000000005B85                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000005B8F                 mov     r8d, 30h ; '0'
.text:0000000000005B95                 js      short loc_5BD3
.text:0000000000005B97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: imaxtostr+54↓j
.text:0000000000005BA0                 mov     rax, rdi
.text:0000000000005BA3                 sub     rcx, 1
.text:0000000000005BA7                 mul     rsi
.text:0000000000005BAA                 shr     rdx, 3
.text:0000000000005BAE                 lea     rax, [rdx+rdx*4]
.text:0000000000005BB2                 add     rax, rax
.text:0000000000005BB5                 sub     rdi, rax
.text:0000000000005BB8                 add     edi, 30h ; '0'
.text:0000000000005BBB                 test    rdx, rdx
.text:0000000000005BBE                 mov     [rcx], dil
.text:0000000000005BC1                 mov     rdi, rdx
.text:0000000000005BC4                 jnz     short loc_5BA0
.text:0000000000005BC6                 mov     rax, rcx
.text:0000000000005BC9                 retn
.text:0000000000005BC9 ; ---------------------------------------------------------------------------
.text:0000000000005BCA                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 loc_5BD0:                               ; CODE XREF: imaxtostr+8E↓j
.text:0000000000005BD0                 mov     rcx, rsi
.text:0000000000005BD3
.text:0000000000005BD3 loc_5BD3:                               ; CODE XREF: imaxtostr+25↑j
.text:0000000000005BD3                 mov     rax, rdi
.text:0000000000005BD6                 lea     rsi, [rcx-1]
.text:0000000000005BDA                 imul    r9
.text:0000000000005BDD                 mov     rax, rdi
.text:0000000000005BE0                 sar     rax, 3Fh
.text:0000000000005BE4                 sar     rdx, 2
.text:0000000000005BE8                 sub     rdx, rax
.text:0000000000005BEB                 lea     rax, [rdx+rdx*4]
.text:0000000000005BEF                 lea     eax, [r8+rax*2]
.text:0000000000005BF3                 sub     eax, edi
.text:0000000000005BF5                 test    rdx, rdx
.text:0000000000005BF8                 mov     rdi, rdx
.text:0000000000005BFB                 mov     [rcx-1], al
.text:0000000000005BFE                 jnz     short loc_5BD0
.text:0000000000005C00                 sub     rcx, 2
.text:0000000000005C04                 mov     byte ptr [rsi-1], 2Dh ; '-'
.text:0000000000005C08                 mov     rax, rcx
.text:0000000000005C0B                 retn
.text:0000000000005C0B ; } // starts at 5B70
.text:0000000000005C0B imaxtostr       endp
.text:0000000000005C0B
.text:0000000000005C0B ; ---------------------------------------------------------------------------
.text:0000000000005C0C                 align 10h
.text:0000000000005C10
.text:0000000000005C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C10
.text:0000000000005C10 ; Attributes: info_from_lumina
.text:0000000000005C10
.text:0000000000005C10 ; int __fastcall mbsnwidth(const char *string, size_t nbytes, int flags)
.text:0000000000005C10                 public mbsnwidth
.text:0000000000005C10 mbsnwidth       proc near               ; CODE XREF: gnu_mbswidth+1E↓j
.text:0000000000005C10
.text:0000000000005C10 var_5C          = dword ptr -5Ch
.text:0000000000005C10 c               = dword ptr -4Ch
.text:0000000000005C10 ps              = mbstate_t ptr -48h
.text:0000000000005C10 var_40          = qword ptr -40h
.text:0000000000005C10
.text:0000000000005C10 ; __unwind {
.text:0000000000005C10                 push    r15
.text:0000000000005C12                 push    r14
.text:0000000000005C14                 push    r13
.text:0000000000005C16                 push    r12
.text:0000000000005C18                 lea     r13, [rdi+rsi]
.text:0000000000005C1C                 push    rbp
.text:0000000000005C1D                 push    rbx
.text:0000000000005C1E                 mov     rbx, rdi
.text:0000000000005C21                 sub     rsp, 38h
.text:0000000000005C25                 mov     rax, fs:28h
.text:0000000000005C2E                 mov     [rsp+68h+var_40], rax
.text:0000000000005C33                 xor     eax, eax
.text:0000000000005C35                 mov     [rsp+68h+var_5C], edx
.text:0000000000005C39                 call    ___ctype_get_mb_cur_max
.text:0000000000005C3E                 cmp     rax, 1
.text:0000000000005C42                 jbe     loc_5D78
.text:0000000000005C48                 xor     ebp, ebp
.text:0000000000005C4A                 cmp     rbx, r13
.text:0000000000005C4D                 jnb     loc_5D3D
.text:0000000000005C53                 lea     r12, [rsp+68h+ps]
.text:0000000000005C58                 lea     r14, [rsp+68h+c]
.text:0000000000005C5D                 jmp     short loc_5C7B
.text:0000000000005C5D ; ---------------------------------------------------------------------------
.text:0000000000005C5F                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: mbsnwidth+70↓j
.text:0000000000005C60                 cmp     al, 25h ; '%'
.text:0000000000005C62                 jge     short loc_5C6B
.text:0000000000005C64                 sub     eax, 20h ; ' '
.text:0000000000005C67                 cmp     al, 3
.text:0000000000005C69                 ja      short loc_5C91
.text:0000000000005C6B
.text:0000000000005C6B loc_5C6B:                               ; CODE XREF: mbsnwidth+52↑j
.text:0000000000005C6B                                         ; mbsnwidth+78↓j ...
.text:0000000000005C6B                 add     rbx, 1
.text:0000000000005C6F                 add     ebp, 1
.text:0000000000005C72
.text:0000000000005C72 loc_5C72:                               ; CODE XREF: mbsnwidth+AE↓j
.text:0000000000005C72                                         ; mbsnwidth+15D↓j
.text:0000000000005C72                 cmp     rbx, r13
.text:0000000000005C75                 jnb     loc_5D3D
.text:0000000000005C7B
.text:0000000000005C7B loc_5C7B:                               ; CODE XREF: mbsnwidth+4D↑j
.text:0000000000005C7B                 movzx   eax, byte ptr [rbx]
.text:0000000000005C7E                 cmp     al, 3Fh ; '?'
.text:0000000000005C80                 jle     short loc_5C60
.text:0000000000005C82                 cmp     al, 41h ; 'A'
.text:0000000000005C84                 jl      short loc_5C91
.text:0000000000005C86                 cmp     al, 5Fh ; '_'
.text:0000000000005C88                 jle     short loc_5C6B
.text:0000000000005C8A                 sub     eax, 61h ; 'a'
.text:0000000000005C8D                 cmp     al, 1Dh
.text:0000000000005C8F                 jbe     short loc_5C6B
.text:0000000000005C91
.text:0000000000005C91 loc_5C91:                               ; CODE XREF: mbsnwidth+59↑j
.text:0000000000005C91                                         ; mbsnwidth+74↑j
.text:0000000000005C91                 mov     qword ptr [r12], 0
.text:0000000000005C99                 jmp     short loc_5CC0
.text:0000000000005C99 ; ---------------------------------------------------------------------------
.text:0000000000005C9B                 align 20h
.text:0000000000005CA0
.text:0000000000005CA0 loc_5CA0:                               ; CODE XREF: mbsnwidth+EA↓j
.text:0000000000005CA0                 mov     ecx, 7FFFFFFFh
.text:0000000000005CA5                 sub     ecx, ebp
.text:0000000000005CA7                 cmp     ecx, eax
.text:0000000000005CA9                 jl      loc_5DC0
.text:0000000000005CAF                 add     ebp, eax
.text:0000000000005CB1
.text:0000000000005CB1 loc_5CB1:                               ; CODE XREF: mbsnwidth+FE↓j
.text:0000000000005CB1                                         ; mbsnwidth+10F↓j
.text:0000000000005CB1                 mov     rdi, r12        ; ps
.text:0000000000005CB4                 add     rbx, r15
.text:0000000000005CB7                 call    _mbsinit
.text:0000000000005CBC                 test    eax, eax
.text:0000000000005CBE                 jnz     short loc_5C72
.text:0000000000005CC0
.text:0000000000005CC0 loc_5CC0:                               ; CODE XREF: mbsnwidth+89↑j
.text:0000000000005CC0                 mov     rdx, r13
.text:0000000000005CC3                 mov     rcx, r12
.text:0000000000005CC6                 mov     rsi, rbx
.text:0000000000005CC9                 sub     rdx, rbx
.text:0000000000005CCC                 mov     rdi, r14
.text:0000000000005CCF                 call    rpl_mbrtowc
.text:0000000000005CD4                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005CD8                 mov     r15, rax
.text:0000000000005CDB                 jz      short loc_5D28
.text:0000000000005CDD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005CE1                 jz      short loc_5D60
.text:0000000000005CE3                 mov     edi, [rsp+68h+c] ; c
.text:0000000000005CE7                 test    rax, rax
.text:0000000000005CEA                 mov     eax, 1
.text:0000000000005CEF                 cmovz   r15, rax
.text:0000000000005CF3                 call    _wcwidth
.text:0000000000005CF8                 test    eax, eax
.text:0000000000005CFA                 jns     short loc_5CA0
.text:0000000000005CFC                 test    byte ptr [rsp+68h+var_5C], 2
.text:0000000000005D01                 jnz     short loc_5D38
.text:0000000000005D03                 mov     edi, [rsp+68h+c] ; wc
.text:0000000000005D07                 call    _iswcntrl
.text:0000000000005D0C                 test    eax, eax
.text:0000000000005D0E                 jnz     short loc_5CB1
.text:0000000000005D10                 cmp     ebp, 7FFFFFFFh
.text:0000000000005D16                 jz      loc_5DC0
.text:0000000000005D1C                 add     ebp, 1
.text:0000000000005D1F                 jmp     short loc_5CB1
.text:0000000000005D1F ; ---------------------------------------------------------------------------
.text:0000000000005D21                 align 8
.text:0000000000005D28
.text:0000000000005D28 loc_5D28:                               ; CODE XREF: mbsnwidth+CB↑j
.text:0000000000005D28                 test    byte ptr [rsp+68h+var_5C], 1
.text:0000000000005D2D                 jz      loc_5C6B
.text:0000000000005D33                 nop     dword ptr [rax+rax+00h]
.text:0000000000005D38
.text:0000000000005D38 loc_5D38:                               ; CODE XREF: mbsnwidth+F1↑j
.text:0000000000005D38                                         ; mbsnwidth+155↓j ...
.text:0000000000005D38                 mov     ebp, 0FFFFFFFFh
.text:0000000000005D3D
.text:0000000000005D3D loc_5D3D:                               ; CODE XREF: mbsnwidth+3D↑j
.text:0000000000005D3D                                         ; mbsnwidth+65↑j ...
.text:0000000000005D3D                 mov     rsi, [rsp+68h+var_40]
.text:0000000000005D42                 xor     rsi, fs:28h
.text:0000000000005D4B                 mov     eax, ebp
.text:0000000000005D4D                 jnz     short loc_5DCA
.text:0000000000005D4F                 add     rsp, 38h
.text:0000000000005D53                 pop     rbx
.text:0000000000005D54                 pop     rbp
.text:0000000000005D55                 pop     r12
.text:0000000000005D57                 pop     r13
.text:0000000000005D59                 pop     r14
.text:0000000000005D5B                 pop     r15
.text:0000000000005D5D                 retn
.text:0000000000005D5D ; ---------------------------------------------------------------------------
.text:0000000000005D5E                 align 20h
.text:0000000000005D60
.text:0000000000005D60 loc_5D60:                               ; CODE XREF: mbsnwidth+D1↑j
.text:0000000000005D60                 test    byte ptr [rsp+68h+var_5C], 1
.text:0000000000005D65                 jnz     short loc_5D38
.text:0000000000005D67                 add     ebp, 1
.text:0000000000005D6A                 mov     rbx, r13
.text:0000000000005D6D                 jmp     loc_5C72
.text:0000000000005D6D ; ---------------------------------------------------------------------------
.text:0000000000005D72                 align 8
.text:0000000000005D78
.text:0000000000005D78 loc_5D78:                               ; CODE XREF: mbsnwidth+32↑j
.text:0000000000005D78                 xor     ebp, ebp
.text:0000000000005D7A                 cmp     rbx, r13
.text:0000000000005D7D                 jnb     short loc_5D3D
.text:0000000000005D7F                 call    ___ctype_b_loc
.text:0000000000005D84                 mov     edx, [rsp+68h+var_5C]
.text:0000000000005D88                 mov     rcx, [rax]
.text:0000000000005D8B                 xor     ebp, ebp
.text:0000000000005D8D                 and     edx, 2
.text:0000000000005D90
.text:0000000000005D90 loc_5D90:                               ; CODE XREF: mbsnwidth+1A7↓j
.text:0000000000005D90                 add     rbx, 1
.text:0000000000005D94                 movzx   eax, byte ptr [rbx-1]
.text:0000000000005D98                 movzx   eax, word ptr [rcx+rax*2]
.text:0000000000005D9C                 test    ah, 40h
.text:0000000000005D9F                 jnz     short loc_5DA9
.text:0000000000005DA1                 test    edx, edx
.text:0000000000005DA3                 jnz     short loc_5D38
.text:0000000000005DA5                 test    al, 2
.text:0000000000005DA7                 jnz     short loc_5DB4
.text:0000000000005DA9
.text:0000000000005DA9 loc_5DA9:                               ; CODE XREF: mbsnwidth+18F↑j
.text:0000000000005DA9                 cmp     ebp, 7FFFFFFFh
.text:0000000000005DAF                 jz      short loc_5D3D
.text:0000000000005DB1                 add     ebp, 1
.text:0000000000005DB4
.text:0000000000005DB4 loc_5DB4:                               ; CODE XREF: mbsnwidth+197↑j
.text:0000000000005DB4                 cmp     r13, rbx
.text:0000000000005DB7                 jnz     short loc_5D90
.text:0000000000005DB9                 jmp     short loc_5D3D
.text:0000000000005DB9 ; ---------------------------------------------------------------------------
.text:0000000000005DBB                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: mbsnwidth+99↑j
.text:0000000000005DC0                                         ; mbsnwidth+106↑j
.text:0000000000005DC0                 mov     ebp, 7FFFFFFFh
.text:0000000000005DC5                 jmp     loc_5D3D
.text:0000000000005DCA ; ---------------------------------------------------------------------------
.text:0000000000005DCA
.text:0000000000005DCA loc_5DCA:                               ; CODE XREF: mbsnwidth+13D↑j
.text:0000000000005DCA                 call    ___stack_chk_fail
.text:0000000000005DCA ; } // starts at 5C10
.text:0000000000005DCA mbsnwidth       endp
.text:0000000000005DCA
.text:0000000000005DCA ; ---------------------------------------------------------------------------
.text:0000000000005DCF                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0 ; Attributes: info_from_lumina
.text:0000000000005DD0
.text:0000000000005DD0 ; int __fastcall gnu_mbswidth(const char *string, int flags)
.text:0000000000005DD0                 public gnu_mbswidth
.text:0000000000005DD0 gnu_mbswidth    proc near               ; CODE XREF: init_header+11F↑p
.text:0000000000005DD0                                         ; init_header+12F↑p ...
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 push    rbp
.text:0000000000005DD1                 push    rbx
.text:0000000000005DD2                 mov     ebp, esi
.text:0000000000005DD4                 mov     rbx, rdi
.text:0000000000005DD7                 sub     rsp, 8
.text:0000000000005DDB                 call    _strlen
.text:0000000000005DE0                 add     rsp, 8
.text:0000000000005DE4                 mov     edx, ebp
.text:0000000000005DE6                 mov     rdi, rbx
.text:0000000000005DE9                 pop     rbx
.text:0000000000005DEA                 pop     rbp
.text:0000000000005DEB                 mov     rsi, rax
.text:0000000000005DEE                 jmp     mbsnwidth
.text:0000000000005DEE ; } // starts at 5DD0
.text:0000000000005DEE gnu_mbswidth    endp
.text:0000000000005DEE
.text:0000000000005DEE ; ---------------------------------------------------------------------------
.text:0000000000005DF3                 align 20h
.text:0000000000005E00
.text:0000000000005E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E00
.text:0000000000005E00 ; Attributes: info_from_lumina
.text:0000000000005E00
.text:0000000000005E00 ; char *__fastcall memcpy_lowcase(char *dest, const char *src, size_t len)
.text:0000000000005E00 memcpy_lowcase  proc near               ; CODE XREF: __strftime_internal+1500↓p
.text:0000000000005E00                                         ; __strftime_internal+1977↓p
.text:0000000000005E00 ; __unwind {
.text:0000000000005E00                 test    rdx, rdx
.text:0000000000005E03                 push    r12
.text:0000000000005E05                 push    rbp
.text:0000000000005E06                 mov     rbp, rdi
.text:0000000000005E09                 push    rbx
.text:0000000000005E0A                 jz      short loc_5E39
.text:0000000000005E0C                 mov     r12, rsi
.text:0000000000005E0F                 lea     rbx, [rdx-1]
.text:0000000000005E13                 call    ___ctype_tolower_loc
.text:0000000000005E18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005E20
.text:0000000000005E20 loc_5E20:                               ; CODE XREF: memcpy_lowcase+37↓j
.text:0000000000005E20                 movzx   ecx, byte ptr [r12+rbx]
.text:0000000000005E25                 mov     rdx, [rax]
.text:0000000000005E28                 mov     edx, [rdx+rcx*4]
.text:0000000000005E2B                 mov     [rbp+rbx+0], dl
.text:0000000000005E2F                 sub     rbx, 1
.text:0000000000005E33                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E37                 jnz     short loc_5E20
.text:0000000000005E39
.text:0000000000005E39 loc_5E39:                               ; CODE XREF: memcpy_lowcase+A↑j
.text:0000000000005E39                 mov     rax, rbp
.text:0000000000005E3C                 pop     rbx
.text:0000000000005E3D                 pop     rbp
.text:0000000000005E3E                 pop     r12
.text:0000000000005E40                 retn
.text:0000000000005E40 ; } // starts at 5E00
.text:0000000000005E40 memcpy_lowcase  endp
.text:0000000000005E40
.text:0000000000005E40 ; ---------------------------------------------------------------------------
.text:0000000000005E41                 align 10h
.text:0000000000005E50
.text:0000000000005E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E50
.text:0000000000005E50 ; Attributes: info_from_lumina
.text:0000000000005E50
.text:0000000000005E50 ; char *__fastcall memcpy_lowcase_0(char *dest, const char *src, size_t len)
.text:0000000000005E50 memcpy_lowcase_0 proc near              ; CODE XREF: __strftime_internal+313↓p
.text:0000000000005E50                                         ; __strftime_internal:loc_6391↓p ...
.text:0000000000005E50 ; __unwind {
.text:0000000000005E50                 test    rdx, rdx
.text:0000000000005E53                 push    r12
.text:0000000000005E55                 push    rbp
.text:0000000000005E56                 mov     rbp, rdi
.text:0000000000005E59                 push    rbx
.text:0000000000005E5A                 jz      short loc_5E89
.text:0000000000005E5C                 mov     r12, rsi
.text:0000000000005E5F                 lea     rbx, [rdx-1]
.text:0000000000005E63                 call    ___ctype_toupper_loc
.text:0000000000005E68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005E70
.text:0000000000005E70 loc_5E70:                               ; CODE XREF: memcpy_lowcase_0+37↓j
.text:0000000000005E70                 movzx   ecx, byte ptr [r12+rbx]
.text:0000000000005E75                 mov     rdx, [rax]
.text:0000000000005E78                 mov     edx, [rdx+rcx*4]
.text:0000000000005E7B                 mov     [rbp+rbx+0], dl
.text:0000000000005E7F                 sub     rbx, 1
.text:0000000000005E83                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005E87                 jnz     short loc_5E70
.text:0000000000005E89
.text:0000000000005E89 loc_5E89:                               ; CODE XREF: memcpy_lowcase_0+A↑j
.text:0000000000005E89                 mov     rax, rbp
.text:0000000000005E8C                 pop     rbx
.text:0000000000005E8D                 pop     rbp
.text:0000000000005E8E                 pop     r12
.text:0000000000005E90                 retn
.text:0000000000005E90 ; } // starts at 5E50
.text:0000000000005E90 memcpy_lowcase_0 endp
.text:0000000000005E90
.text:0000000000005E90 ; ---------------------------------------------------------------------------
.text:0000000000005E91                 align 20h
.text:0000000000005EA0
.text:0000000000005EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005EA0
.text:0000000000005EA0
.text:0000000000005EA0 ; __int64 __usercall _strftime_internal@<rax>(void *s@<rdi>, int, __int64, __int64, int)
.text:0000000000005EA0 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6AB↓p
.text:0000000000005EA0                                         ; __strftime_internal+768↓p ...
.text:0000000000005EA0
.text:0000000000005EA0 var_4F0         = qword ptr -4F0h
.text:0000000000005EA0 var_4E8         = qword ptr -4E8h
.text:0000000000005EA0 var_4E0         = qword ptr -4E0h
.text:0000000000005EA0 var_4D8         = qword ptr -4D8h
.text:0000000000005EA0 var_4CD         = byte ptr -4CDh
.text:0000000000005EA0 var_4CC         = dword ptr -4CCh
.text:0000000000005EA0 var_4C8         = qword ptr -4C8h
.text:0000000000005EA0 var_4C0         = dword ptr -4C0h
.text:0000000000005EA0 var_4B8         = qword ptr -4B8h
.text:0000000000005EA0 var_4B0         = qword ptr -4B0h
.text:0000000000005EA0 var_4A8         = qword ptr -4A8h
.text:0000000000005EA0 var_4A0         = qword ptr -4A0h
.text:0000000000005EA0 var_498         = qword ptr -498h
.text:0000000000005EA0 var_490         = dword ptr -490h
.text:0000000000005EA0 var_48C         = dword ptr -48Ch
.text:0000000000005EA0 var_488         = xmmword ptr -488h
.text:0000000000005EA0 var_478         = xmmword ptr -478h
.text:0000000000005EA0 var_468         = xmmword ptr -468h
.text:0000000000005EA0 var_458         = qword ptr -458h
.text:0000000000005EA0 format          = byte ptr -44Dh
.text:0000000000005EA0 var_44B         = byte ptr -44Bh
.text:0000000000005EA0 s               = byte ptr -448h
.text:0000000000005EA0 var_40          = qword ptr -40h
.text:0000000000005EA0 arg_0           = dword ptr  8
.text:0000000000005EA0 arg_8           = qword ptr  10h
.text:0000000000005EA0 arg_10          = qword ptr  18h
.text:0000000000005EA0 arg_18          = dword ptr  20h
.text:0000000000005EA0
.text:0000000000005EA0 ; __unwind {
.text:0000000000005EA0                 push    r15
.text:0000000000005EA2                 push    r14
.text:0000000000005EA4                 mov     r11, rdx
.text:0000000000005EA7                 push    r13
.text:0000000000005EA9                 push    r12
.text:0000000000005EAB                 mov     r13, rcx
.text:0000000000005EAE                 push    rbp
.text:0000000000005EAF                 push    rbx
.text:0000000000005EB0                 mov     rbp, rdi
.text:0000000000005EB3                 sub     rsp, 4C8h
.text:0000000000005EBA                 mov     rdi, [rcx+30h]
.text:0000000000005EBE                 mov     r15d, [rcx+8]
.text:0000000000005EC2                 mov     rax, [rsp+4F8h+arg_8]
.text:0000000000005ECA                 mov     [rsp+4F8h+var_4F0], rsi
.text:0000000000005ECF                 mov     [rsp+4F8h+var_4CC], r9d
.text:0000000000005ED4                 movsxd  r10, [rsp+4F8h+arg_0]
.text:0000000000005EDC                 mov     [rsp+4F8h+var_4CD], r8b
.text:0000000000005EE1                 mov     [rsp+4F8h+var_4E0], rax
.text:0000000000005EE6                 mov     rax, [rsp+4F8h+arg_10]
.text:0000000000005EEE                 mov     [rsp+4F8h+var_4E8], rax
.text:0000000000005EF3                 mov     rax, fs:28h
.text:0000000000005EFC                 mov     [rsp+4F8h+var_40], rax
.text:0000000000005F04                 xor     eax, eax
.text:0000000000005F06                 lea     rax, asc_BEE4+1 ; ""
.text:0000000000005F0D                 test    rdi, rdi
.text:0000000000005F10                 cmovnz  rax, rdi
.text:0000000000005F14                 cmp     r15d, 0Ch
.text:0000000000005F18                 mov     [rsp+4F8h+var_4D8], rax
.text:0000000000005F1D                 jle     loc_6010
.text:0000000000005F23                 sub     r15d, 0Ch
.text:0000000000005F27
.text:0000000000005F27 loc_5F27:                               ; CODE XREF: __strftime_internal+17C↓j
.text:0000000000005F27                 movzx   eax, byte ptr [r11]
.text:0000000000005F2B                 xor     r14d, r14d
.text:0000000000005F2E                 test    al, al
.text:0000000000005F30                 jz      loc_5FEC
.text:0000000000005F36                 mov     [rsp+4F8h+var_490], r15d
.text:0000000000005F3B                 mov     rbx, r11
.text:0000000000005F3E
.text:0000000000005F3E loc_5F3E:                               ; CODE XREF: __strftime_internal+146↓j
.text:0000000000005F3E                 cmp     al, 25h ; '%'
.text:0000000000005F40                 jz      loc_6028
.text:0000000000005F46                 test    r10d, r10d
.text:0000000000005F49                 mov     r12d, 0
.text:0000000000005F4F                 mov     eax, 1
.text:0000000000005F54                 cmovns  r12, r10
.text:0000000000005F58                 test    r12, r12
.text:0000000000005F5B                 cmovz   r12, rax
.text:0000000000005F5F                 mov     rax, [rsp+4F8h+var_4F0]
.text:0000000000005F64                 sub     rax, r14
.text:0000000000005F67                 cmp     rax, r12
.text:0000000000005F6A                 ja      short loc_5FA0
.text:0000000000005F6C
.text:0000000000005F6C loc_5F6C:                               ; CODE XREF: __strftime_internal+294↓j
.text:0000000000005F6C                                         ; __strftime_internal+450↓j ...
.text:0000000000005F6C                 xor     r14d, r14d
.text:0000000000005F6F
.text:0000000000005F6F loc_5F6F:                               ; CODE XREF: __strftime_internal+14F↓j
.text:0000000000005F6F                                         ; __strftime_internal+15B↓j ...
.text:0000000000005F6F                 mov     rbx, [rsp+4F8h+var_40]
.text:0000000000005F77                 xor     rbx, fs:28h
.text:0000000000005F80                 mov     rax, r14
.text:0000000000005F83                 jnz     loc_7935
.text:0000000000005F89                 add     rsp, 4C8h
.text:0000000000005F90                 pop     rbx
.text:0000000000005F91                 pop     rbp
.text:0000000000005F92                 pop     r12
.text:0000000000005F94                 pop     r13
.text:0000000000005F96                 pop     r14
.text:0000000000005F98                 pop     r15
.text:0000000000005F9A                 retn
.text:0000000000005F9A ; ---------------------------------------------------------------------------
.text:0000000000005F9B                 align 20h
.text:0000000000005FA0
.text:0000000000005FA0 loc_5FA0:                               ; CODE XREF: __strftime_internal+CA↑j
.text:0000000000005FA0                 test    rbp, rbp
.text:0000000000005FA3                 jz      short loc_5FCC
.text:0000000000005FA5                 cmp     r10d, 1
.text:0000000000005FA9                 jle     short loc_5FC2
.text:0000000000005FAB                 lea     r15, [r10-1]
.text:0000000000005FAF                 mov     rdi, rbp        ; s
.text:0000000000005FB2                 mov     esi, 20h ; ' '  ; c
.text:0000000000005FB7                 mov     rdx, r15        ; n
.text:0000000000005FBA                 add     rbp, r15
.text:0000000000005FBD                 call    _memset
.text:0000000000005FC2
.text:0000000000005FC2 loc_5FC2:                               ; CODE XREF: __strftime_internal+109↑j
.text:0000000000005FC2                 movzx   eax, byte ptr [rbx]
.text:0000000000005FC5                 add     rbp, 1
.text:0000000000005FC9                 mov     [rbp-1], al
.text:0000000000005FCC
.text:0000000000005FCC loc_5FCC:                               ; CODE XREF: __strftime_internal+103↑j
.text:0000000000005FCC                                         ; __strftime_internal+6EB↓j ...
.text:0000000000005FCC                 add     r14, r12
.text:0000000000005FCF                 mov     r12, rbx
.text:0000000000005FD2
.text:0000000000005FD2 loc_5FD2:                               ; CODE XREF: __strftime_internal+328↓j
.text:0000000000005FD2                                         ; __strftime_internal+420↓j ...
.text:0000000000005FD2                 movzx   eax, byte ptr [r12+1]
.text:0000000000005FD8                 lea     rbx, [r12+1]
.text:0000000000005FDD                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:0000000000005FE4                 test    al, al
.text:0000000000005FE6                 jnz     loc_5F3E
.text:0000000000005FEC
.text:0000000000005FEC loc_5FEC:                               ; CODE XREF: __strftime_internal+90↑j
.text:0000000000005FEC                 test    rbp, rbp
.text:0000000000005FEF                 jz      loc_5F6F
.text:0000000000005FF5                 cmp     [rsp+4F8h+var_4F0], 0
.text:0000000000005FFB                 jz      loc_5F6F
.text:0000000000006001                 mov     byte ptr [rbp+0], 0
.text:0000000000006005                 jmp     loc_5F6F
.text:0000000000006005 ; ---------------------------------------------------------------------------
.text:000000000000600A                 align 10h
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: __strftime_internal+7D↑j
.text:0000000000006010                 test    r15d, r15d
.text:0000000000006013                 mov     eax, 0Ch
.text:0000000000006018                 cmovz   r15d, eax
.text:000000000000601C                 jmp     loc_5F27
.text:000000000000601C ; ---------------------------------------------------------------------------
.text:0000000000006021                 align 8
.text:0000000000006028
.text:0000000000006028 loc_6028:                               ; CODE XREF: __strftime_internal+A0↑j
.text:0000000000006028                 movzx   eax, [rsp+4F8h+var_4CD]
.text:000000000000602D                 xor     r8d, r8d
.text:0000000000006030                 xor     r15d, r15d
.text:0000000000006033                 mov     edx, 1
.text:0000000000006038                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000603C
.text:000000000000603C loc_603C:                               ; CODE XREF: __strftime_internal+233↓j
.text:000000000000603C                                         ; __strftime_internal+246↓j ...
.text:000000000000603C                 add     rbx, 1
.text:0000000000006040                 movsx   eax, byte ptr [rbx]
.text:0000000000006043                 lea     ecx, [rax-23h]
.text:0000000000006046                 mov     esi, eax
.text:0000000000006048                 mov     r9d, eax
.text:000000000000604B                 cmp     cl, 3Ch ; '<'
.text:000000000000604E                 ja      short loc_607C
.text:0000000000006050                 mov     rdi, rdx
.text:0000000000006053                 mov     r11, 1000000000002500h
.text:000000000000605D                 shl     rdi, cl
.text:0000000000006060                 test    rdi, r11
.text:0000000000006063                 jnz     short loc_60D0
.text:0000000000006065                 test    cl, cl
.text:0000000000006067                 jz      short loc_60E0
.text:0000000000006069                 mov     rcx, 800000000000000h
.text:0000000000006073                 test    rdi, rcx
.text:0000000000006076                 jnz     loc_61D0
.text:000000000000607C
.text:000000000000607C loc_607C:                               ; CODE XREF: __strftime_internal+1AE↑j
.text:000000000000607C                 lea     edx, [rax-30h]
.text:000000000000607F                 cmp     edx, 9
.text:0000000000006082                 jbe     loc_61E0
.text:0000000000006088
.text:0000000000006088 loc_6088:                               ; CODE XREF: __strftime_internal+372↓j
.text:0000000000006088                                         ; __strftime_internal+3AC↓j
.text:0000000000006088                 cmp     sil, 45h ; 'E'
.text:000000000000608C                 jz      short loc_60B8
.text:000000000000608E                 xor     r11d, r11d
.text:0000000000006091                 cmp     sil, 4Fh ; 'O'
.text:0000000000006095                 jz      short loc_60B8
.text:0000000000006097
.text:0000000000006097 loc_6097:                               ; CODE XREF: __strftime_internal+227↓j
.text:0000000000006097                 cmp     sil, 7Ah        ; switch 123 cases
.text:000000000000609B                 ja      short def_60AF  ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000609D                 lea     rdx, jpt_60AF
.text:00000000000060A4                 movzx   eax, sil
.text:00000000000060A8                 movsxd  rax, ds:(jpt_60AF - 0D870h)[rdx+rax*4]
.text:00000000000060AC                 add     rax, rdx
.text:00000000000060AF                 jmp     rax             ; switch jump
.text:00000000000060AF ; ---------------------------------------------------------------------------
.text:00000000000060B1                 align 8
.text:00000000000060B8
.text:00000000000060B8 loc_60B8:                               ; CODE XREF: __strftime_internal+1EC↑j
.text:00000000000060B8                                         ; __strftime_internal+1F5↑j
.text:00000000000060B8                 movsx   r9d, byte ptr [rbx+1]
.text:00000000000060BD                 mov     r11d, eax
.text:00000000000060C0                 add     rbx, 1
.text:00000000000060C4                 mov     esi, r9d
.text:00000000000060C7                 jmp     short loc_6097
.text:00000000000060C7 ; ---------------------------------------------------------------------------
.text:00000000000060C9                 align 10h
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:00000000000060D0                 mov     r15d, eax
.text:00000000000060D3                 jmp     loc_603C
.text:00000000000060D3 ; ---------------------------------------------------------------------------
.text:00000000000060D8                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: __strftime_internal+1C7↑j
.text:00000000000060E0                 mov     r8d, 1
.text:00000000000060E6                 jmp     loc_603C
.text:00000000000060EB ; ---------------------------------------------------------------------------
.text:00000000000060EB
.text:00000000000060EB loc_60EB:                               ; CODE XREF: __strftime_internal+1212↓j
.text:00000000000060EB                 mov     rbx, r9
.text:00000000000060EE                 xchg    ax, ax
.text:00000000000060F0
.text:00000000000060F0 def_60AF:                               ; CODE XREF: __strftime_internal+1FB↑j
.text:00000000000060F0                                         ; __strftime_internal+20F↑j ...
.text:00000000000060F0                 lea     rax, [rbx-1]    ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000060F4                 mov     r8d, 1
.text:00000000000060FA
.text:00000000000060FA loc_60FA:                               ; CODE XREF: __strftime_internal+269↓j
.text:00000000000060FA                 mov     r9, rax
.text:00000000000060FD                 lea     rax, [rax-1]
.text:0000000000006101                 add     r8d, 1
.text:0000000000006105                 cmp     byte ptr [rax+1], 25h ; '%'
.text:0000000000006109                 jnz     short loc_60FA
.text:000000000000610B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006110                 mov     eax, 0
.text:0000000000006115                 movsxd  r8, r8d
.text:0000000000006118                 mov     rcx, r8
.text:000000000000611B                 mov     r12, rbx
.text:000000000000611E                 sub     rdx, r14
.text:0000000000006121                 test    r10d, r10d
.text:0000000000006124                 cmovns  eax, r10d
.text:0000000000006128                 cdqe
.text:000000000000612A                 cmp     rax, r8
.text:000000000000612D                 cmovnb  rcx, rax
.text:0000000000006131
.text:0000000000006131 loc_6131:                               ; CODE XREF: __strftime_internal+122D↓j
.text:0000000000006131                                         ; __strftime_internal+17E4↓j
.text:0000000000006131                 cmp     rcx, rdx
.text:0000000000006134                 jnb     loc_5F6C
.text:000000000000613A                 test    rbp, rbp
.text:000000000000613D                 jz      loc_61C5
.text:0000000000006143                 cmp     rax, r8
.text:0000000000006146                 jbe     short loc_6195
.text:0000000000006148                 movsxd  rdx, r10d
.text:000000000000614B                 mov     [rsp+4F8h+var_4B0], r8
.text:0000000000006150                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000006155                 sub     rdx, r8         ; n
.text:0000000000006158                 cmp     r15d, 30h ; '0'
.text:000000000000615C                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:0000000000006161                 lea     rbx, [rbp+rdx+0]
.text:0000000000006166                 jz      loc_73D6
.text:000000000000616C                 cmp     r15d, 2Bh ; '+'
.text:0000000000006170                 jz      loc_73D6
.text:0000000000006176                 mov     rdi, rbp        ; s
.text:0000000000006179                 mov     esi, 20h ; ' '  ; c
.text:000000000000617E                 mov     rbp, rbx
.text:0000000000006181                 call    _memset
.text:0000000000006186                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000618B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000006190                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006195
.text:0000000000006195 loc_6195:                               ; CODE XREF: __strftime_internal+2A6↑j
.text:0000000000006195                                         ; __strftime_internal+1555↓j
.text:0000000000006195                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000619A                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000000619F                 mov     rdx, r8         ; n
.text:00000000000061A2                 mov     [rsp+4F8h+var_4C8], r8
.text:00000000000061A7                 mov     rsi, r9         ; src
.text:00000000000061AA                 mov     rdi, rbp        ; dest
.text:00000000000061AD                 jz      loc_7380
.text:00000000000061B3                 call    memcpy_lowcase_0
.text:00000000000061B8                 mov     r8, [rsp+4F8h+var_4C8]
.text:00000000000061BD                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000061C2
.text:00000000000061C2 loc_61C2:                               ; CODE XREF: __strftime_internal+14EF↓j
.text:00000000000061C2                 add     rbp, r8
.text:00000000000061C5
.text:00000000000061C5 loc_61C5:                               ; CODE XREF: __strftime_internal+29D↑j
.text:00000000000061C5                 add     r14, rcx
.text:00000000000061C8                 jmp     loc_5FD2
.text:00000000000061C8 ; ---------------------------------------------------------------------------
.text:00000000000061CD                 align 10h
.text:00000000000061D0
.text:00000000000061D0 loc_61D0:                               ; CODE XREF: __strftime_internal+1D6↑j
.text:00000000000061D0                 mov     byte ptr [rsp+4F8h+var_4C8], 1
.text:00000000000061D5                 jmp     loc_603C
.text:00000000000061D5 ; ---------------------------------------------------------------------------
.text:00000000000061DA                 align 20h
.text:00000000000061E0
.text:00000000000061E0 loc_61E0:                               ; CODE XREF: __strftime_internal+1E2↑j
.text:00000000000061E0                 xor     r10d, r10d
.text:00000000000061E3
.text:00000000000061E3 loc_61E3:                               ; CODE XREF: __strftime_internal+36D↓j
.text:00000000000061E3                 movsx   eax, byte ptr [rbx+1]
.text:00000000000061E7                 cmp     r10d, 0CCCCCCCh
.text:00000000000061EE                 lea     rcx, [rbx+1]
.text:00000000000061F2                 mov     esi, eax
.text:00000000000061F4                 lea     edx, [rax-30h]
.text:00000000000061F7                 jg      short loc_6226
.text:00000000000061F9                 movsx   edi, byte ptr [rbx]
.text:00000000000061FC                 jz      short loc_6220
.text:00000000000061FE
.text:00000000000061FE loc_61FE:                               ; CODE XREF: __strftime_internal+384↓j
.text:00000000000061FE                 lea     r9d, [r10+r10*4]
.text:0000000000006202                 mov     rbx, rcx
.text:0000000000006205                 lea     r10d, [rdi+r9*2-30h]
.text:000000000000620A
.text:000000000000620A loc_620A:                               ; CODE XREF: __strftime_internal+39E↓j
.text:000000000000620A                 cmp     edx, 9
.text:000000000000620D                 jbe     short loc_61E3
.text:000000000000620F                 mov     r9d, eax
.text:0000000000006212                 jmp     loc_6088
.text:0000000000006212 ; ---------------------------------------------------------------------------
.text:0000000000006217                 align 20h
.text:0000000000006220
.text:0000000000006220 loc_6220:                               ; CODE XREF: __strftime_internal+35C↑j
.text:0000000000006220                 cmp     dil, 37h ; '7'
.text:0000000000006224                 jle     short loc_61FE
.text:0000000000006226
.text:0000000000006226 loc_6226:                               ; CODE XREF: __strftime_internal+357↑j
.text:0000000000006226                 cmp     edx, 9
.text:0000000000006229                 ja      short loc_6240
.text:000000000000622B                 movsx   eax, byte ptr [rbx+2]
.text:000000000000622F                 mov     r10d, 7FFFFFFFh
.text:0000000000006235                 add     rbx, 2
.text:0000000000006239                 mov     esi, eax
.text:000000000000623B                 lea     edx, [rax-30h]
.text:000000000000623E                 jmp     short loc_620A
.text:0000000000006240 ; ---------------------------------------------------------------------------
.text:0000000000006240
.text:0000000000006240 loc_6240:                               ; CODE XREF: __strftime_internal+389↑j
.text:0000000000006240                 mov     r9d, eax
.text:0000000000006243                 mov     rbx, rcx
.text:0000000000006246                 mov     r10d, 7FFFFFFFh
.text:000000000000624C                 jmp     loc_6088
.text:000000000000624C ; ---------------------------------------------------------------------------
.text:0000000000006251                 align 8
.text:0000000000006258
.text:0000000000006258 loc_6258:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006258                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006258                 cmp     r11d, 4Fh ; 'O' ; jumptable 00000000000060AF cases 88,99,120
.text:000000000000625C                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006262
.text:0000000000006262 loc_6262:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006262                                         ; __strftime_internal+10F6↓j
.text:0000000000006262                                         ; DATA XREF: ...
.text:0000000000006262                 xor     r8d, r8d        ; jumptable 00000000000060AF case 114
.text:0000000000006265
.text:0000000000006265 loc_6265:                               ; CODE XREF: __strftime_internal+659↓j
.text:0000000000006265                                         ; __strftime_internal+A27↓j ...
.text:0000000000006265                 mov     eax, 2520h
.text:000000000000626A                 test    r11d, r11d
.text:000000000000626D                 mov     word ptr [rsp+4F8h+format], ax
.text:0000000000006275                 jnz     loc_794B
.text:000000000000627B                 lea     rdx, [rsp+4F8h+format] ; format
.text:0000000000006283                 mov     r12, rbx
.text:0000000000006286                 lea     rax, [rdx+2]
.text:000000000000628A
.text:000000000000628A loc_628A:                               ; CODE XREF: __strftime_internal+541↓j
.text:000000000000628A                                         ; __strftime_internal+5B6↓j
.text:000000000000628A                 lea     r9, [rsp+4F8h+s]
.text:0000000000006292                 mov     [rax], sil
.text:0000000000006295                 mov     byte ptr [rax+1], 0
.text:0000000000006299                 mov     rcx, r13        ; tp
.text:000000000000629C                 mov     esi, 400h       ; maxsize
.text:00000000000062A1                 mov     [rsp+4F8h+var_4C0], r10d
.text:00000000000062A6                 mov     rdi, r9         ; s
.text:00000000000062A9                 mov     byte ptr [rsp+4F8h+var_4A8], r8b
.text:00000000000062AE                 mov     dword ptr [rsp+4F8h+var_4B0], r11d
.text:00000000000062B3                 mov     [rsp+4F8h+var_4B8], r9
.text:00000000000062B8                 call    _strftime
.text:00000000000062BD                 test    rax, rax
.text:00000000000062C0                 jz      loc_5FD2
.text:00000000000062C6                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:00000000000062CB                 lea     rcx, [rax-1]
.text:00000000000062CF                 mov     rdx, [rsp+4F8h+var_4F0]
.text:00000000000062D4                 mov     eax, 0
.text:00000000000062D9                 test    r10d, r10d
.text:00000000000062DC                 cmovns  rax, r10
.text:00000000000062E0                 cmp     rcx, rax
.text:00000000000062E3                 mov     rbx, rax
.text:00000000000062E6                 cmovnb  rbx, rcx
.text:00000000000062EA                 sub     rdx, r14
.text:00000000000062ED                 cmp     rdx, rbx
.text:00000000000062F0                 jbe     loc_5F6C
.text:00000000000062F6                 test    rbp, rbp
.text:00000000000062F9                 jz      loc_639E
.text:00000000000062FF                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006304                 mov     r9, [rsp+4F8h+var_4B8]
.text:0000000000006309                 movzx   r8d, byte ptr [rsp+4F8h+var_4A8]
.text:000000000000630F                 test    r11d, r11d
.text:0000000000006312                 jnz     short loc_636E
.text:0000000000006314                 cmp     rcx, rax
.text:0000000000006317                 jnb     short loc_636E
.text:0000000000006319                 movsxd  rdx, r10d
.text:000000000000631C                 mov     [rsp+4F8h+var_4A8], r9
.text:0000000000006321                 mov     [rsp+4F8h+var_4B0], rcx
.text:0000000000006326                 sub     rdx, rcx        ; n
.text:0000000000006329                 cmp     r15d, 30h ; '0'
.text:000000000000632D                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:0000000000006332                 lea     rax, [rbp+rdx+0]
.text:0000000000006337                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000633C                 jz      loc_73AF
.text:0000000000006342                 cmp     r15d, 2Bh ; '+'
.text:0000000000006346                 jz      loc_73AF
.text:000000000000634C                 mov     rdi, rbp        ; s
.text:000000000000634F                 mov     esi, 20h ; ' '  ; c
.text:0000000000006354                 call    _memset
.text:0000000000006359                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000635F                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006364                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000006369                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000636E
.text:000000000000636E loc_636E:                               ; CODE XREF: __strftime_internal+472↑j
.text:000000000000636E                                         ; __strftime_internal+477↑j ...
.text:000000000000636E                 test    r8b, r8b
.text:0000000000006371                 lea     rsi, [r9+1]
.text:0000000000006375                 mov     rdx, rcx
.text:0000000000006378                 jnz     loc_7398
.text:000000000000637E                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000006383                 mov     rdi, rbp
.text:0000000000006386                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000638B                 jz      loc_6C01
.text:0000000000006391
.text:0000000000006391 loc_6391:                               ; CODE XREF: __strftime_internal+D5B↓j
.text:0000000000006391                 call    memcpy_lowcase_0
.text:0000000000006396                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000639B
.text:000000000000639B loc_639B:                               ; CODE XREF: __strftime_internal+D6B↓j
.text:000000000000639B                                         ; __strftime_internal+150A↓j
.text:000000000000639B                 add     rbp, rcx
.text:000000000000639E
.text:000000000000639E loc_639E:                               ; CODE XREF: __strftime_internal+459↑j
.text:000000000000639E                                         ; __strftime_internal+CEB↓j
.text:000000000000639E                 add     r14, rbx
.text:00000000000063A1                 jmp     loc_5FD2
.text:00000000000063A6 ; ---------------------------------------------------------------------------
.text:00000000000063A6
.text:00000000000063A6 loc_63A6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000063A6                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000063A6                 test    r11d, r11d      ; jumptable 00000000000060AF cases 65,97
.text:00000000000063A9                 jnz     def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000063AF                 movzx   eax, byte ptr [rsp+4F8h+var_4C8]
.text:00000000000063B4                 test    r8b, r8b
.text:00000000000063B7                 lea     rdx, [rsp+4F8h+format]
.text:00000000000063BF                 mov     r12, rbx
.text:00000000000063C2                 cmovnz  eax, r8d
.text:00000000000063C6                 xor     r8d, r8d
.text:00000000000063C9                 xor     r11d, r11d
.text:00000000000063CC                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:00000000000063D0                 mov     eax, 2520h
.text:00000000000063D5                 mov     word ptr [rsp+4F8h+format], ax
.text:00000000000063DD                 lea     rax, [rdx+2]
.text:00000000000063E1                 jmp     loc_628A
.text:00000000000063E6 ; ---------------------------------------------------------------------------
.text:00000000000063E6
.text:00000000000063E6 loc_63E6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000063E6                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000063E6                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 83
.text:00000000000063EA                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000063F0                 mov     ecx, [r13+0]
.text:00000000000063F4                 mov     edi, 2
.text:00000000000063F9                 nop     dword ptr [rax+00000000h]
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: __strftime_internal+852↓j
.text:0000000000006400                                         ; __strftime_internal+1047↓j ...
.text:0000000000006400                 mov     eax, ecx
.text:0000000000006402                 xor     esi, esi
.text:0000000000006404                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006409                 shr     eax, 1Fh
.text:000000000000640C                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000006410                 mov     eax, ecx
.text:0000000000006412                 not     eax
.text:0000000000006414                 shr     eax, 1Fh
.text:0000000000006417
.text:0000000000006417 loc_6417:                               ; CODE XREF: __strftime_internal+8AB↓j
.text:0000000000006417                                         ; __strftime_internal+A02↓j ...
.text:0000000000006417                 cmp     r11d, 4Fh ; 'O'
.text:000000000000641B                 jnz     loc_72A0
.text:0000000000006421                 test    al, al
.text:0000000000006423                 jz      loc_72A0
.text:0000000000006429                 mov     esi, r9d
.text:000000000000642C
.text:000000000000642C loc_642C:                               ; CODE XREF: __strftime_internal+B0D↓j
.text:000000000000642C                                         ; __strftime_internal+158C↓j
.text:000000000000642C                 mov     edx, 2520h
.text:0000000000006431                 xor     r8d, r8d
.text:0000000000006434                 mov     word ptr [rsp+4F8h+format], dx
.text:000000000000643C
.text:000000000000643C loc_643C:                               ; CODE XREF: __strftime_internal+1AAD↓j
.text:000000000000643C                 lea     rdx, [rsp+4F8h+format]
.text:0000000000006444                 mov     [rsp+4F8h+var_44B], r11b
.text:000000000000644C                 mov     r12, rbx
.text:000000000000644F                 mov     r11d, edi
.text:0000000000006452                 lea     rax, [rdx+3]
.text:0000000000006456                 jmp     loc_628A
.text:000000000000645B ; ---------------------------------------------------------------------------
.text:000000000000645B
.text:000000000000645B loc_645B:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000645B                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000645B                 test    r10d, r10d      ; jumptable 00000000000060AF case 116
.text:000000000000645E                 mov     ecx, 0
.text:0000000000006463                 mov     eax, 1
.text:0000000000006468                 cmovns  ecx, r10d
.text:000000000000646C                 movsxd  rcx, ecx
.text:000000000000646F                 test    rcx, rcx
.text:0000000000006472                 cmovz   rcx, rax
.text:0000000000006476                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000647B                 sub     rax, r14
.text:000000000000647E                 cmp     rax, rcx
.text:0000000000006481                 jbe     loc_5F6C
.text:0000000000006487                 test    rbp, rbp
.text:000000000000648A                 jz      short loc_64D8
.text:000000000000648C                 cmp     r10d, 1
.text:0000000000006490                 jle     short loc_64CC
.text:0000000000006492                 movsxd  rdx, r10d
.text:0000000000006495                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000649A                 sub     rdx, 1          ; n
.text:000000000000649E                 cmp     r15d, 30h ; '0'
.text:00000000000064A2                 lea     r12, [rbp+rdx+0]
.text:00000000000064A7                 jz      loc_77C4
.text:00000000000064AD                 cmp     r15d, 2Bh ; '+'
.text:00000000000064B1                 jz      loc_77C4
.text:00000000000064B7                 mov     rdi, rbp        ; s
.text:00000000000064BA                 mov     esi, 20h ; ' '  ; c
.text:00000000000064BF                 mov     rbp, r12
.text:00000000000064C2                 call    _memset
.text:00000000000064C7                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000064CC
.text:00000000000064CC loc_64CC:                               ; CODE XREF: __strftime_internal+5F0↑j
.text:00000000000064CC                                         ; __strftime_internal+1939↓j
.text:00000000000064CC                 mov     byte ptr [rbp+0], 9
.text:00000000000064D0                 add     rbp, 1
.text:00000000000064D4                 nop     dword ptr [rax+00h]
.text:00000000000064D8
.text:00000000000064D8 loc_64D8:                               ; CODE XREF: __strftime_internal+5EA↑j
.text:00000000000064D8                                         ; __strftime_internal+7B5↓j ...
.text:00000000000064D8                 add     r14, rcx
.text:00000000000064DB                 mov     r12, rbx
.text:00000000000064DE                 jmp     loc_5FD2
.text:00000000000064E3 ; ---------------------------------------------------------------------------
.text:00000000000064E3
.text:00000000000064E3 loc_64E3:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000064E3                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000064E3                 mov     eax, 1          ; jumptable 00000000000060AF case 80
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: __strftime_internal+13A1↓j
.text:00000000000064E8                 test    r8b, r8b
.text:00000000000064EB                 jnz     loc_741B
.text:00000000000064F1                 mov     r8d, eax
.text:00000000000064F4                 mov     esi, 70h ; 'p'
.text:00000000000064F9                 jmp     loc_6265
.text:00000000000064FE ; ---------------------------------------------------------------------------
.text:00000000000064FE
.text:00000000000064FE loc_64FE:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000064FE                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000064FE                 lea     rax, aYMDHM+9   ; jumptable 00000000000060AF case 82
.text:0000000000006505                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000650D                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000006512
.text:0000000000006512 loc_6512:                               ; CODE XREF: __strftime_internal+81F↓j
.text:0000000000006512                                         ; __strftime_internal+11B2↓j ...
.text:0000000000006512                 movzx   r8d, byte ptr [rsp+4F8h+var_4C8]
.text:0000000000006518                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000651F                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000006526                 mov     dword ptr [rsp+4F8h+var_4B0], r10d
.text:000000000000652B                 xor     edi, edi        ; s
.text:000000000000652D                 mov     r9d, r15d
.text:0000000000006530                 mov     rcx, r13
.text:0000000000006533                 mov     dword ptr [rsp+4F8h+var_4C8], r8d
.text:0000000000006538                 push    rax             ; int
.text:0000000000006539                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000653D                 push    [rsp+508h+var_4E0] ; __int64
.text:0000000000006541                 mov     eax, [rsp+510h+var_4C0]
.text:0000000000006545                 push    rax             ; int
.text:0000000000006546                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000654B                 call    __strftime_internal
.text:0000000000006550                 add     rsp, 20h
.text:0000000000006554                 movsxd  r10, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006559                 mov     r11, rax
.text:000000000000655C                 mov     rsi, [rsp+4F8h+var_4F0]
.text:0000000000006561                 mov     eax, 0
.text:0000000000006566                 test    r10d, r10d
.text:0000000000006569                 cmovns  rax, r10
.text:000000000000656D                 cmp     r11, rax
.text:0000000000006570                 mov     r12, rax
.text:0000000000006573                 cmovnb  r12, r11
.text:0000000000006577                 sub     rsi, r14
.text:000000000000657A                 cmp     rsi, r12
.text:000000000000657D                 mov     [rsp+4F8h+var_4B0], rsi
.text:0000000000006582                 jbe     loc_5F6C
.text:0000000000006588                 test    rbp, rbp
.text:000000000000658B                 jz      loc_5FCC
.text:0000000000006591                 cmp     r11, rax
.text:0000000000006594                 jnb     short loc_65D6
.text:0000000000006596                 movsxd  rdx, r10d
.text:0000000000006599                 mov     [rsp+4F8h+var_4A0], r11
.text:000000000000659E                 sub     rdx, r11        ; n
.text:00000000000065A1                 cmp     r15d, 30h ; '0'
.text:00000000000065A5                 lea     rax, [rbp+rdx+0]
.text:00000000000065AA                 mov     [rsp+4F8h+var_4A8], rax
.text:00000000000065AF                 jz      loc_76AC
.text:00000000000065B5                 cmp     r15d, 2Bh ; '+'
.text:00000000000065B9                 jz      loc_76AC
.text:00000000000065BF                 mov     rdi, rbp        ; s
.text:00000000000065C2                 mov     esi, 20h ; ' '  ; c
.text:00000000000065C7                 call    _memset
.text:00000000000065CC                 mov     rbp, [rsp+4F8h+var_4A8]
.text:00000000000065D1                 mov     r11, [rsp+4F8h+var_4A0]
.text:00000000000065D6
.text:00000000000065D6 loc_65D6:                               ; CODE XREF: __strftime_internal+6F4↑j
.text:00000000000065D6                                         ; __strftime_internal+1823↓j
.text:00000000000065D6                 mov     eax, [rsp+4F8h+arg_18]
.text:00000000000065DD                 mov     [rsp+4F8h+var_4A8], r11
.text:00000000000065E2                 mov     rdi, rbp        ; s
.text:00000000000065E5                 mov     r9d, r15d
.text:00000000000065E8                 mov     rcx, r13
.text:00000000000065EB                 push    rax             ; int
.text:00000000000065EC                 push    [rsp+500h+var_4E8] ; __int64
.text:00000000000065F0                 push    [rsp+508h+var_4E0] ; __int64
.text:00000000000065F4                 mov     eax, [rsp+510h+var_4C0]
.text:00000000000065F8                 push    rax             ; int
.text:00000000000065F9                 mov     r8d, dword ptr [rsp+518h+var_4C8]
.text:00000000000065FE                 mov     rdx, [rsp+518h+var_4B8]
.text:0000000000006603                 mov     rsi, [rsp+518h+var_4B0]
.text:0000000000006608                 call    __strftime_internal
.text:000000000000660D                 mov     r11, [rsp+518h+var_4A8]
.text:0000000000006612                 add     rsp, 20h
.text:0000000000006616                 add     rbp, r11
.text:0000000000006619                 jmp     loc_5FCC
.text:000000000000661E ; ---------------------------------------------------------------------------
.text:000000000000661E
.text:000000000000661E loc_661E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000661E                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000661E                 mov     rdx, [rsp+4F8h+var_4F0] ; jumptable 00000000000060AF case 37
.text:0000000000006623                 mov     eax, 0
.text:0000000000006628                 mov     ecx, 1
.text:000000000000662D                 sub     rdx, r14
.text:0000000000006630                 test    r10d, r10d
.text:0000000000006633                 cmovns  eax, r10d
.text:0000000000006637                 cdqe
.text:0000000000006639                 test    rax, rax
.text:000000000000663C                 cmovnz  rcx, rax
.text:0000000000006640                 test    r11d, r11d
.text:0000000000006643                 jnz     loc_7678
.text:0000000000006649                 cmp     rcx, rdx
.text:000000000000664C                 jnb     loc_5F6C
.text:0000000000006652                 test    rbp, rbp
.text:0000000000006655                 jz      loc_64D8
.text:000000000000665B                 cmp     r10d, 1
.text:000000000000665F                 jle     short loc_669E
.text:0000000000006661                 movsxd  rdx, r10d
.text:0000000000006664                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000006669                 sub     rdx, 1          ; n
.text:000000000000666D                 cmp     r15d, 30h ; '0'
.text:0000000000006671                 lea     r12, [rbp+rdx+0]
.text:0000000000006676                 jz      loc_78E5
.text:000000000000667C                 cmp     r15d, 2Bh ; '+'
.text:0000000000006680                 mov     esi, 20h ; ' '  ; c
.text:0000000000006685                 jz      loc_78E5
.text:000000000000668B
.text:000000000000668B loc_668B:                               ; CODE XREF: __strftime_internal+1A4A↓j
.text:000000000000668B                 mov     rdi, rbp        ; s
.text:000000000000668E                 mov     rbp, r12
.text:0000000000006691                 call    _memset
.text:0000000000006696                 movzx   esi, byte ptr [rbx]
.text:0000000000006699                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000669E
.text:000000000000669E loc_669E:                               ; CODE XREF: __strftime_internal+7BF↑j
.text:000000000000669E                 mov     [rbp+0], sil
.text:00000000000066A2                 add     rbp, 1
.text:00000000000066A6                 jmp     loc_64D8
.text:00000000000066AB ; ---------------------------------------------------------------------------
.text:00000000000066AB
.text:00000000000066AB loc_66AB:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000066AB                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000066AB                 lea     rax, aHMS       ; jumptable 00000000000060AF case 84
.text:00000000000066B2                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:00000000000066BA                 mov     [rsp+4F8h+var_4B8], rax
.text:00000000000066BF                 jmp     loc_6512
.text:00000000000066C4 ; ---------------------------------------------------------------------------
.text:00000000000066C4
.text:00000000000066C4 loc_66C4:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000066C4                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000066C4                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 85
.text:00000000000066C8                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000066CE                 mov     esi, [r13+1Ch]
.text:00000000000066D2                 sub     esi, [r13+18h]
.text:00000000000066D6                 mov     edx, 92492493h
.text:00000000000066DB                 add     esi, 7
.text:00000000000066DE                 mov     eax, esi
.text:00000000000066E0                 imul    edx
.text:00000000000066E2
.text:00000000000066E2 loc_66E2:                               ; CODE XREF: __strftime_internal+10D9↓j
.text:00000000000066E2                 lea     ecx, [rdx+rsi]
.text:00000000000066E5                 sar     esi, 1Fh
.text:00000000000066E8                 mov     edi, 2
.text:00000000000066ED                 sar     ecx, 2
.text:00000000000066F0                 sub     ecx, esi
.text:00000000000066F2                 jmp     loc_6400
.text:00000000000066F7 ; ---------------------------------------------------------------------------
.text:00000000000066F7
.text:00000000000066F7 loc_66F7:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000066F7                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000066F7                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 89
.text:00000000000066FB                 jz      loc_742A
.text:0000000000006701                 cmp     r11d, 4Fh ; 'O'
.text:0000000000006705                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000670B                 mov     eax, [r13+14h]
.text:000000000000670F                 cmp     eax, 0FFFFF894h
.text:0000000000006714                 lea     ecx, [rax+76Ch]
.text:000000000000671A                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000671F                 cmp     eax, 0FFFFF894h
.text:0000000000006724                 setnl   al
.text:0000000000006727                 test    r15d, r15d
.text:000000000000672A                 jnz     loc_75A9
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: __strftime_internal+1703↓j
.text:0000000000006730                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006735                 cmp     r15d, 2Bh ; '+'
.text:0000000000006739                 jz      loc_75B3
.text:000000000000673F
.text:000000000000673F loc_673F:                               ; CODE XREF: __strftime_internal+170D↓j
.text:000000000000673F                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006744                 mov     edi, 4
.text:0000000000006749
.text:0000000000006749 loc_6749:                               ; CODE XREF: __strftime_internal+117A↓j
.text:0000000000006749                 xor     esi, esi
.text:000000000000674B                 jmp     loc_6417
.text:0000000000006750 ; ---------------------------------------------------------------------------
.text:0000000000006750
.text:0000000000006750 loc_6750:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006750                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006750                 movzx   esi, byte ptr [rsp+4F8h+var_4C8] ; jumptable 00000000000060AF case 90
.text:0000000000006755                 mov     rdi, [rsp+4F8h+var_4D8] ; s
.text:000000000000675A                 test    r8b, r8b
.text:000000000000675D                 mov     eax, 0
.text:0000000000006762                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000006767                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000676C                 cmovnz  esi, eax
.text:000000000000676F                 mov     byte ptr [rsp+4F8h+var_4C8], sil
.text:0000000000006774                 call    _strlen
.text:0000000000006779                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000677E                 mov     r12, rax
.text:0000000000006781                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006786                 mov     eax, 0
.text:000000000000678B                 test    r10d, r10d
.text:000000000000678E                 cmovns  rax, r10
.text:0000000000006792                 cmp     r12, rax
.text:0000000000006795                 mov     rcx, rax
.text:0000000000006798                 cmovnb  rcx, r12
.text:000000000000679C                 sub     rdx, r14
.text:000000000000679F                 cmp     rdx, rcx
.text:00000000000067A2                 jbe     loc_5F6C
.text:00000000000067A8                 test    rbp, rbp
.text:00000000000067AB                 jz      loc_64D8
.text:00000000000067B1                 cmp     r12, rax
.text:00000000000067B4                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000067BA                 jnb     short loc_6807
.text:00000000000067BC                 movsxd  rdx, r10d
.text:00000000000067BF                 mov     [rsp+4F8h+var_4B0], rcx
.text:00000000000067C4                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:00000000000067C9                 sub     rdx, r12        ; n
.text:00000000000067CC                 cmp     r15d, 30h ; '0'
.text:00000000000067D0                 lea     rax, [rbp+rdx+0]
.text:00000000000067D5                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:00000000000067DA                 jz      loc_789F
.text:00000000000067E0                 cmp     r15d, 2Bh ; '+'
.text:00000000000067E4                 jz      loc_789F
.text:00000000000067EA                 mov     rdi, rbp        ; s
.text:00000000000067ED                 mov     esi, 20h ; ' '  ; c
.text:00000000000067F2                 call    _memset
.text:00000000000067F7                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000067FD                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006802                 mov     rcx, [rsp+4F8h+var_4B0]
.text:0000000000006807
.text:0000000000006807 loc_6807:                               ; CODE XREF: __strftime_internal+91A↑j
.text:0000000000006807                                         ; __strftime_internal+1A1C↓j
.text:0000000000006807                 test    r8b, r8b
.text:000000000000680A                 jnz     loc_7807
.text:0000000000006810                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000006815                 mov     rdx, r12        ; n
.text:0000000000006818                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000681D                 mov     rsi, [rsp+4F8h+var_4D8] ; src
.text:0000000000006822                 mov     rdi, rbp        ; dest
.text:0000000000006825                 jz      loc_77F8
.text:000000000000682B                 call    memcpy_lowcase_0
.text:0000000000006830                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000006835
.text:0000000000006835 loc_6835:                               ; CODE XREF: __strftime_internal+1962↓j
.text:0000000000006835                                         ; __strftime_internal+1981↓j
.text:0000000000006835                 add     rbp, r12
.text:0000000000006838                 jmp     loc_64D8
.text:000000000000683D ; ---------------------------------------------------------------------------
.text:000000000000683D
.text:000000000000683D loc_683D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000683D                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000683D                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 121
.text:0000000000006841                 jz      loc_742A
.text:0000000000006847                 mov     esi, [r13+14h]
.text:000000000000684B                 mov     edx, 51EB851Fh
.text:0000000000006850                 mov     eax, esi
.text:0000000000006852                 imul    edx
.text:0000000000006854                 mov     eax, esi
.text:0000000000006856                 sar     eax, 1Fh
.text:0000000000006859                 mov     ecx, edx
.text:000000000000685B                 sar     ecx, 5
.text:000000000000685E                 sub     ecx, eax
.text:0000000000006860                 mov     eax, esi
.text:0000000000006862                 imul    ecx, 64h ; 'd'
.text:0000000000006865                 sub     eax, ecx
.text:0000000000006867                 mov     ecx, eax
.text:0000000000006869                 jns     short loc_6879
.text:000000000000686B                 neg     eax
.text:000000000000686D                 add     ecx, 64h ; 'd'
.text:0000000000006870                 cmp     esi, 0FFFFF893h
.text:0000000000006876                 cmovle  ecx, eax
.text:0000000000006879
.text:0000000000006879 loc_6879:                               ; CODE XREF: __strftime_internal+9C9↑j
.text:0000000000006879                                         ; __strftime_internal+FE9↓j
.text:0000000000006879                 test    r15d, r15d
.text:000000000000687C                 jz      loc_6EAA
.text:0000000000006882
.text:0000000000006882 loc_6882:                               ; CODE XREF: __strftime_internal+1004↓j
.text:0000000000006882                                         ; __strftime_internal+1AA6↓j
.text:0000000000006882                 mov     eax, 1
.text:0000000000006887                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000688C
.text:000000000000688C loc_688C:                               ; CODE XREF: __strftime_internal+114D↓j
.text:000000000000688C                 cmp     r15d, 2Bh ; '+'
.text:0000000000006890                 jz      loc_7003
.text:0000000000006896
.text:0000000000006896 loc_6896:                               ; CODE XREF: __strftime_internal+115D↓j
.text:0000000000006896                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000689B                 mov     edi, 2
.text:00000000000068A0                 xor     esi, esi
.text:00000000000068A2                 jmp     loc_6417
.text:00000000000068A7 ; ---------------------------------------------------------------------------
.text:00000000000068A7
.text:00000000000068A7 loc_68A7:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000068A7                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000068A7                 movzx   eax, byte ptr [rsp+4F8h+var_4C8] ; jumptable 00000000000060AF cases 98,104
.text:00000000000068AC                 test    r8b, r8b
.text:00000000000068AF                 cmovnz  eax, r8d
.text:00000000000068B3                 cmp     r11d, 45h ; 'E'
.text:00000000000068B7                 jz      loc_7826
.text:00000000000068BD                 mov     esi, r9d
.text:00000000000068C0                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:00000000000068C4                 xor     r8d, r8d
.text:00000000000068C7                 jmp     loc_6265
.text:00000000000068CC ; ---------------------------------------------------------------------------
.text:00000000000068CC
.text:00000000000068CC loc_68CC:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000068CC                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000068CC                 xor     r8d, r8d        ; jumptable 00000000000060AF case 122
.text:00000000000068CF
.text:00000000000068CF loc_68CF:                               ; CODE XREF: __strftime_internal+E98↓j
.text:00000000000068CF                 mov     ecx, [r13+20h]
.text:00000000000068D3                 test    ecx, ecx
.text:00000000000068D5                 js      loc_757E
.text:00000000000068DB                 mov     rcx, [r13+28h]
.text:00000000000068DF                 mov     byte ptr [rsp+4F8h+var_4C0], 1
.text:00000000000068E4                 test    ecx, ecx
.text:00000000000068E6                 js      short loc_68FC
.text:00000000000068E8                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000068ED                 jnz     short loc_68FC
.text:00000000000068EF                 mov     rax, [rsp+4F8h+var_4D8]
.text:00000000000068F4                 cmp     byte ptr [rax], 2Dh ; '-'
.text:00000000000068F7                 setz    byte ptr [rsp+4F8h+var_4C0]
.text:00000000000068FC
.text:00000000000068FC loc_68FC:                               ; CODE XREF: __strftime_internal+A46↑j
.text:00000000000068FC                                         ; __strftime_internal+A4D↑j
.text:00000000000068FC                 mov     eax, ecx
.text:00000000000068FE                 mov     edx, 91A2B3C5h
.text:0000000000006903                 mov     esi, 88888889h
.text:0000000000006908                 imul    edx
.text:000000000000690A                 mov     eax, ecx
.text:000000000000690C                 sar     eax, 1Fh
.text:000000000000690F                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000006913                 lea     r12d, [rdx+rcx]
.text:0000000000006917                 sar     r12d, 0Bh
.text:000000000000691B                 sub     r12d, eax
.text:000000000000691E                 mov     eax, ecx
.text:0000000000006920                 imul    esi
.text:0000000000006922                 lea     edi, [rdx+rcx]
.text:0000000000006925                 sar     edi, 5
.text:0000000000006928                 sub     edi, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000692C                 mov     eax, edi
.text:000000000000692E                 imul    esi
.text:0000000000006930                 mov     eax, edi
.text:0000000000006932                 sar     eax, 1Fh
.text:0000000000006935                 lea     esi, [rdx+rdi]
.text:0000000000006938                 sar     esi, 5
.text:000000000000693B                 sub     esi, eax
.text:000000000000693D                 mov     eax, edi
.text:000000000000693F                 imul    esi, 3Ch ; '<'
.text:0000000000006942                 imul    edi, 3Ch ; '<'
.text:0000000000006945                 sub     eax, esi
.text:0000000000006947                 sub     ecx, edi
.text:0000000000006949                 cmp     r8, 1
.text:000000000000694D                 mov     esi, eax
.text:000000000000694F                 jz      loc_77A2
.text:0000000000006955                 jb      loc_7880
.text:000000000000695B                 cmp     r8, 2
.text:000000000000695F                 jz      loc_7755
.text:0000000000006965                 cmp     r8, 3
.text:0000000000006969                 jnz     loc_782F
.text:000000000000696F                 test    ecx, ecx
.text:0000000000006971                 jnz     loc_7755
.text:0000000000006977                 test    eax, eax
.text:0000000000006979                 jnz     loc_77A2
.text:000000000000697F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006984                 mov     ecx, r12d
.text:0000000000006987                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000698C                 mov     edi, 3
.text:0000000000006991                 xor     eax, 1
.text:0000000000006994                 jmp     loc_6417
.text:0000000000006994 ; ---------------------------------------------------------------------------
.text:0000000000006999                 align 20h
.text:00000000000069A0
.text:00000000000069A0 loc_69A0:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000069A0                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000069A0                 cmp     r11d, 4Fh ; 'O' ; jumptable 00000000000060AF case 113
.text:00000000000069A4                 mov     eax, [r13+10h]
.text:00000000000069A8                 mov     edi, 1
.text:00000000000069AD                 jz      loc_642C
.text:00000000000069B3                 lea     edx, [rax+rax*4]
.text:00000000000069B6                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000069BB                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000069C0                 xor     esi, esi
.text:00000000000069C2                 lea     ecx, [rax+rdx*2]
.text:00000000000069C5                 sar     ecx, 5
.text:00000000000069C8                 add     ecx, 1
.text:00000000000069CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000069D0
.text:00000000000069D0 loc_69D0:                               ; CODE XREF: __strftime_internal+140C↓j
.text:00000000000069D0                 lea     r9, [rsp+4F8h+s]
.text:00000000000069D8                 mov     r12d, 0CCCCCCCDh
.text:00000000000069DE                 lea     r11, [r9+17h]
.text:00000000000069E2                 nop     word ptr [rax+rax+00h]
.text:00000000000069E8
.text:00000000000069E8 loc_69E8:                               ; CODE XREF: __strftime_internal+B82↓j
.text:00000000000069E8                 test    sil, 1
.text:00000000000069EC                 lea     r8, [r11-1]
.text:00000000000069F0                 jz      short loc_6A01
.text:00000000000069F2                 lea     rax, [r11-2]
.text:00000000000069F6                 mov     byte ptr [r11-1], 3Ah ; ':'
.text:00000000000069FB                 mov     r11, r8
.text:00000000000069FE                 mov     r8, rax
.text:0000000000006A01
.text:0000000000006A01 loc_6A01:                               ; CODE XREF: __strftime_internal+B50↑j
.text:0000000000006A01                 mov     eax, ecx
.text:0000000000006A03                 sar     esi, 1
.text:0000000000006A05                 mul     r12d
.text:0000000000006A08                 shr     edx, 3
.text:0000000000006A0B                 lea     eax, [rdx+rdx*4]
.text:0000000000006A0E                 add     eax, eax
.text:0000000000006A10                 sub     ecx, eax
.text:0000000000006A12                 mov     eax, esi
.text:0000000000006A14                 add     ecx, 30h ; '0'
.text:0000000000006A17                 or      eax, edx
.text:0000000000006A19                 mov     [r11-1], cl
.text:0000000000006A1D                 mov     ecx, edx
.text:0000000000006A1F                 mov     r11, r8
.text:0000000000006A22                 jnz     short loc_69E8
.text:0000000000006A24                 cmp     r10d, edi
.text:0000000000006A27                 cmovge  edi, r10d
.text:0000000000006A2B                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000006A30                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:0000000000006A34                 jnz     loc_72B8
.text:0000000000006A3A                 cmp     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006A3F                 jz      loc_6CD9
.text:0000000000006A45                 cmp     r15d, 2Dh ; '-'
.text:0000000000006A49                 jz      loc_7573
.text:0000000000006A4F                 mov     byte ptr [rsp+4F8h+var_4C0], 2Bh ; '+'
.text:0000000000006A54
.text:0000000000006A54 loc_6A54:                               ; CODE XREF: __strftime_internal+1421↓j
.text:0000000000006A54                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006A58                 lea     rcx, [r9+17h]
.text:0000000000006A5C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006A61                 sub     rcx, r8
.text:0000000000006A64                 lea     r12d, [rax-1]
.text:0000000000006A68                 sub     rdx, r14
.text:0000000000006A6B                 sub     r12d, ecx
.text:0000000000006A6E                 test    r12d, r12d
.text:0000000000006A71                 jle     loc_74BC
.text:0000000000006A77                 cmp     r15d, 5Fh ; '_'
.text:0000000000006A7B                 jz      loc_7436
.text:0000000000006A81                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006A86                 cmp     rax, rdx
.text:0000000000006A89                 mov     rdi, rax
.text:0000000000006A8C                 jnb     loc_5F6C
.text:0000000000006A92                 test    r10d, r10d
.text:0000000000006A95                 mov     eax, 0
.text:0000000000006A9A                 mov     esi, 1
.text:0000000000006A9F                 cmovns  eax, r10d
.text:0000000000006AA3                 cdqe
.text:0000000000006AA5                 test    rax, rax
.text:0000000000006AA8                 cmovnz  rsi, rax
.text:0000000000006AAC                 cmp     rsi, rdx
.text:0000000000006AAF                 jnb     loc_5F6C
.text:0000000000006AB5                 add     r14, rsi
.text:0000000000006AB8                 test    rbp, rbp
.text:0000000000006ABB                 movsxd  r9, r12d
.text:0000000000006ABE                 mov     r12, rbx
.text:0000000000006AC1                 jz      loc_6B64
.text:0000000000006AC7                 test    edi, edi
.text:0000000000006AC9                 jnz     short loc_6B1F
.text:0000000000006ACB                 cmp     rax, 1
.text:0000000000006ACF                 jbe     short loc_6B1F
.text:0000000000006AD1                 movsxd  rdx, r10d
.text:0000000000006AD4                 mov     [rsp+4F8h+var_4A0], r8
.text:0000000000006AD9                 mov     [rsp+4F8h+var_4A8], r9
.text:0000000000006ADE                 sub     rdx, 1          ; n
.text:0000000000006AE2                 cmp     r15d, 30h ; '0'
.text:0000000000006AE6                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000006AEB                 lea     r12, [rbp+rdx+0]
.text:0000000000006AF0                 jz      loc_78C1
.text:0000000000006AF6                 cmp     r15d, 2Bh ; '+'
.text:0000000000006AFA                 jz      loc_78C1
.text:0000000000006B00                 mov     rdi, rbp        ; s
.text:0000000000006B03                 mov     esi, 20h ; ' '  ; c
.text:0000000000006B08                 mov     rbp, r12
.text:0000000000006B0B                 call    _memset
.text:0000000000006B10                 mov     r8, [rsp+4F8h+var_4A0]
.text:0000000000006B15                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000006B1A                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000006B1F
.text:0000000000006B1F loc_6B1F:                               ; CODE XREF: __strftime_internal+C29↑j
.text:0000000000006B1F                                         ; __strftime_internal+C2F↑j ...
.text:0000000000006B1F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006B24                 add     rbp, 1
.text:0000000000006B28                 mov     r12, rbx
.text:0000000000006B2B                 mov     [rbp-1], al
.text:0000000000006B2E
.text:0000000000006B2E loc_6B2E:                               ; CODE XREF: __strftime_internal+1807↓j
.text:0000000000006B2E                 test    rbp, rbp
.text:0000000000006B31                 jz      short loc_6B64
.text:0000000000006B33                 mov     rdx, r9         ; n
.text:0000000000006B36                 mov     rdi, rbp        ; s
.text:0000000000006B39                 mov     esi, 30h ; '0'  ; c
.text:0000000000006B3E                 mov     [rsp+4F8h+var_4A8], r8
.text:0000000000006B43                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000006B48                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:0000000000006B4D                 call    _memset
.text:0000000000006B52                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006B57                 mov     r8, [rsp+4F8h+var_4A8]
.text:0000000000006B5C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000006B61                 add     rbp, r9
.text:0000000000006B64
.text:0000000000006B64 loc_6B64:                               ; CODE XREF: __strftime_internal+C21↑j
.text:0000000000006B64                                         ; __strftime_internal+C91↑j
.text:0000000000006B64                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006B69                 add     r14, r9
.text:0000000000006B6C                 xor     r11d, r11d
.text:0000000000006B6F                 xor     r10d, r10d
.text:0000000000006B72                 sub     rdx, r14
.text:0000000000006B75
.text:0000000000006B75 loc_6B75:                               ; CODE XREF: __strftime_internal+E72↓j
.text:0000000000006B75                                         ; __strftime_internal+14D7↓j ...
.text:0000000000006B75                 cmp     rcx, r11
.text:0000000000006B78                 mov     rbx, r11
.text:0000000000006B7B                 cmovnb  rbx, rcx
.text:0000000000006B7F                 cmp     rbx, rdx
.text:0000000000006B82                 jnb     loc_5F6C
.text:0000000000006B88                 test    rbp, rbp
.text:0000000000006B8B                 jz      loc_639E
.text:0000000000006B91                 mov     esi, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006B95                 test    esi, esi
.text:0000000000006B97                 jnz     short loc_6BE8
.text:0000000000006B99                 cmp     rcx, r11
.text:0000000000006B9C                 jnb     short loc_6BE8
.text:0000000000006B9E                 movsxd  rdx, r10d
.text:0000000000006BA1                 mov     [rsp+4F8h+var_4B0], r8
.text:0000000000006BA6                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000006BAB                 sub     rdx, rcx        ; n
.text:0000000000006BAE                 cmp     r15d, 30h ; '0'
.text:0000000000006BB2                 lea     rax, [rbp+rdx+0]
.text:0000000000006BB7                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:0000000000006BBC                 jz      loc_73FA
.text:0000000000006BC2                 cmp     r15d, 2Bh ; '+'
.text:0000000000006BC6                 jz      loc_73FA
.text:0000000000006BCC                 mov     rdi, rbp        ; s
.text:0000000000006BCF                 mov     esi, 20h ; ' '  ; c
.text:0000000000006BD4                 call    _memset
.text:0000000000006BD9                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:0000000000006BDE                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000006BE3                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000006BE8
.text:0000000000006BE8 loc_6BE8:                               ; CODE XREF: __strftime_internal+CF7↑j
.text:0000000000006BE8                                         ; __strftime_internal+CFC↑j ...
.text:0000000000006BE8                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000006BED                 mov     rdx, rcx        ; n
.text:0000000000006BF0                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000006BF5                 mov     rsi, r8         ; src
.text:0000000000006BF8                 mov     rdi, rbp        ; dest
.text:0000000000006BFB                 jnz     loc_6391
.text:0000000000006C01
.text:0000000000006C01 loc_6C01:                               ; CODE XREF: __strftime_internal+4EB↑j
.text:0000000000006C01                 call    _memcpy
.text:0000000000006C06                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000006C0B                 jmp     loc_639B
.text:0000000000006C10 ; ---------------------------------------------------------------------------
.text:0000000000006C10
.text:0000000000006C10 loc_6C10:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006C10                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006C10                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 00000000000060AF case 115
.text:0000000000006C16                 lea     rsi, [rsp+4F8h+var_488]
.text:0000000000006C1B                 mov     rax, [r13+30h]
.text:0000000000006C1F                 mov     rdi, [rsp+4F8h+var_4E8]
.text:0000000000006C24                 movaps  [rsp+4F8h+var_488], xmm0
.text:0000000000006C29                 mov     [rsp+4F8h+var_4C0], r10d
.text:0000000000006C2E                 movdqu  xmm0, xmmword ptr [r13+10h]
.text:0000000000006C34                 mov     [rsp+4F8h+var_458], rax
.text:0000000000006C3C                 movaps  [rsp+4F8h+var_478], xmm0
.text:0000000000006C44                 movdqu  xmm0, xmmword ptr [r13+20h]
.text:0000000000006C4A                 movaps  [rsp+4F8h+var_468], xmm0
.text:0000000000006C52                 call    mktime_z
.text:0000000000006C57                 lea     r9, [rsp+4F8h+s]
.text:0000000000006C5F                 mov     rsi, rax
.text:0000000000006C62                 mov     rcx, rax
.text:0000000000006C65                 mov     r11, 6666666666666667h
.text:0000000000006C6F                 mov     edi, 30h ; '0'
.text:0000000000006C74                 mov     r10d, [rsp+4F8h+var_4C0]
.text:0000000000006C79                 lea     r8, [r9+17h]
.text:0000000000006C7D                 nop     dword ptr [rax]
.text:0000000000006C80
.text:0000000000006C80 loc_6C80:                               ; CODE XREF: __strftime_internal+E1E↓j
.text:0000000000006C80                 mov     rax, rcx
.text:0000000000006C83                 imul    r11
.text:0000000000006C86                 mov     rax, rcx
.text:0000000000006C89                 sar     rax, 3Fh
.text:0000000000006C8D                 sar     rdx, 2
.text:0000000000006C91                 sub     rdx, rax
.text:0000000000006C94                 mov     rax, rdx
.text:0000000000006C97                 lea     rdx, [rdx+rdx*4]
.text:0000000000006C9B                 add     rdx, rdx
.text:0000000000006C9E                 sub     rcx, rdx
.text:0000000000006CA1                 mov     rdx, rcx
.text:0000000000006CA4                 mov     rcx, rax
.text:0000000000006CA7                 mov     eax, edi
.text:0000000000006CA9                 sub     eax, edx
.text:0000000000006CAB                 add     edx, 30h ; '0'
.text:0000000000006CAE                 test    rsi, rsi
.text:0000000000006CB1                 cmovs   edx, eax
.text:0000000000006CB4                 sub     r8, 1
.text:0000000000006CB8                 test    rcx, rcx
.text:0000000000006CBB                 mov     [r8], dl
.text:0000000000006CBE                 jnz     short loc_6C80
.text:0000000000006CC0                 test    r10d, r10d
.text:0000000000006CC3                 mov     edi, 1
.text:0000000000006CC8                 cmovg   edi, r10d
.text:0000000000006CCC                 test    rsi, rsi
.text:0000000000006CCF                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:0000000000006CD3                 js      loc_72B8
.text:0000000000006CD9
.text:0000000000006CD9 loc_6CD9:                               ; CODE XREF: __strftime_internal+B9F↑j
.text:0000000000006CD9                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000006CDE                 lea     rcx, [r9+17h]
.text:0000000000006CE2                 sub     rcx, r8
.text:0000000000006CE5                 sub     rdx, r14
.text:0000000000006CE8                 cmp     r15d, 2Dh ; '-'
.text:0000000000006CEC                 jz      short loc_6CFF
.text:0000000000006CEE                 mov     r12d, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006CF3                 sub     r12d, ecx
.text:0000000000006CF6                 test    r12d, r12d
.text:0000000000006CF9                 jg      loc_7689
.text:0000000000006CFF
.text:0000000000006CFF loc_6CFF:                               ; CODE XREF: __strftime_internal+E4C↑j
.text:0000000000006CFF                 test    r10d, r10d
.text:0000000000006D02                 mov     r11d, 0
.text:0000000000006D08                 mov     r12, rbx
.text:0000000000006D0B                 cmovns  r11d, r10d
.text:0000000000006D0F                 movsxd  r11, r11d
.text:0000000000006D12                 jmp     loc_6B75
.text:0000000000006D17 ; ---------------------------------------------------------------------------
.text:0000000000006D17
.text:0000000000006D17 loc_6D17:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006D17                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006D17                 movzx   eax, byte ptr [rbx+1] ; jumptable 00000000000060AF case 58
.text:0000000000006D1B                 lea     rdx, [rbx+1]
.text:0000000000006D1F                 cmp     al, 3Ah ; ':'
.text:0000000000006D21                 jz      loc_783A
.text:0000000000006D27                 mov     r8d, 1
.text:0000000000006D2D
.text:0000000000006D2D loc_6D2D:                               ; CODE XREF: __strftime_internal+19B5↓j
.text:0000000000006D2D                 cmp     al, 7Ah ; 'z'
.text:0000000000006D2F                 jnz     def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D35                 mov     rbx, rdx
.text:0000000000006D38                 jmp     loc_68CF
.text:0000000000006D3D ; ---------------------------------------------------------------------------
.text:0000000000006D3D
.text:0000000000006D3D loc_6D3D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006D3D                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006D3D                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF cases 71,86,103
.text:0000000000006D41                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006D47                 mov     edi, [r13+14h]
.text:0000000000006D4B                 mov     r8d, [r13+1Ch]
.text:0000000000006D4F                 mov     edx, 92492493h
.text:0000000000006D54                 mov     eax, edi
.text:0000000000006D56                 mov     ecx, r8d
.text:0000000000006D59                 sar     eax, 1Fh
.text:0000000000006D5C                 and     eax, 190h
.text:0000000000006D61                 lea     r12d, [rdi+rax-64h]
.text:0000000000006D66                 mov     eax, [r13+18h]
.text:0000000000006D6A                 sub     ecx, eax
.text:0000000000006D6C                 mov     [rsp+4F8h+var_4C0], eax
.text:0000000000006D70                 add     ecx, 17Eh
.text:0000000000006D76                 mov     eax, ecx
.text:0000000000006D78                 imul    edx
.text:0000000000006D7A                 lea     eax, [rdx+rcx]
.text:0000000000006D7D                 mov     edx, ecx
.text:0000000000006D7F                 sar     edx, 1Fh
.text:0000000000006D82                 sar     eax, 2
.text:0000000000006D85                 sub     eax, edx
.text:0000000000006D87                 lea     edx, ds:0[rax*8]
.text:0000000000006D8E                 sub     edx, eax
.text:0000000000006D90                 mov     eax, edx
.text:0000000000006D92                 mov     edx, r8d
.text:0000000000006D95                 sub     edx, ecx
.text:0000000000006D97                 lea     eax, [rdx+rax+3]
.text:0000000000006D9B                 test    eax, eax
.text:0000000000006D9D                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:0000000000006DA1                 js      loc_76C8
.text:0000000000006DA7                 test    r12b, 3
.text:0000000000006DAB                 mov     eax, 16Dh
.text:0000000000006DB0                 jnz     short loc_6DF7
.text:0000000000006DB2                 mov     ecx, 51EB851Fh
.text:0000000000006DB7                 mov     eax, r12d
.text:0000000000006DBA                 imul    ecx
.text:0000000000006DBC                 mov     eax, r12d
.text:0000000000006DBF                 sar     eax, 1Fh
.text:0000000000006DC2                 mov     dword ptr [rsp+4F8h+var_4B0], eax
.text:0000000000006DC6                 mov     ecx, edx
.text:0000000000006DC8                 sar     edx, 5
.text:0000000000006DCB                 sub     edx, eax
.text:0000000000006DCD                 mov     eax, 16Eh
.text:0000000000006DD2                 imul    edx, 64h ; 'd'
.text:0000000000006DD5                 cmp     r12d, edx
.text:0000000000006DD8                 jnz     short loc_6DF7
.text:0000000000006DDA                 sar     ecx, 7
.text:0000000000006DDD                 mov     eax, ecx
.text:0000000000006DDF                 sub     eax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000006DE3                 imul    eax, 190h
.text:0000000000006DE9                 cmp     r12d, eax
.text:0000000000006DEC                 setz    al
.text:0000000000006DEF                 movzx   eax, al
.text:0000000000006DF2                 add     eax, 16Dh
.text:0000000000006DF7
.text:0000000000006DF7 loc_6DF7:                               ; CODE XREF: __strftime_internal+F10↑j
.text:0000000000006DF7                                         ; __strftime_internal+F38↑j
.text:0000000000006DF7                 sub     r8d, eax
.text:0000000000006DFA                 mov     edx, 92492493h
.text:0000000000006DFF                 mov     ecx, r8d
.text:0000000000006E02                 sub     ecx, [rsp+4F8h+var_4C0]
.text:0000000000006E06                 add     ecx, 17Eh
.text:0000000000006E0C                 mov     eax, ecx
.text:0000000000006E0E                 sub     r8d, ecx
.text:0000000000006E11                 imul    edx
.text:0000000000006E13                 lea     eax, [rdx+rcx]
.text:0000000000006E16                 mov     edx, ecx
.text:0000000000006E18                 sar     edx, 1Fh
.text:0000000000006E1B                 sar     eax, 2
.text:0000000000006E1E                 sub     eax, edx
.text:0000000000006E20                 lea     edx, ds:0[rax*8]
.text:0000000000006E27                 sub     edx, eax
.text:0000000000006E29                 lea     ecx, [r8+rdx+3]
.text:0000000000006E2E                 mov     r8d, 1
.text:0000000000006E34                 test    ecx, ecx
.text:0000000000006E36                 jns     short loc_6E3F
.text:0000000000006E38                 mov     ecx, dword ptr [rsp+4F8h+var_4B8]
.text:0000000000006E3C                 xor     r8d, r8d
.text:0000000000006E3F
.text:0000000000006E3F loc_6E3F:                               ; CODE XREF: __strftime_internal+F96↑j
.text:0000000000006E3F                                         ; __strftime_internal+18B0↓j
.text:0000000000006E3F                 cmp     sil, 47h ; 'G'
.text:0000000000006E43                 jz      loc_7586
.text:0000000000006E49                 cmp     sil, 67h ; 'g'
.text:0000000000006E4D                 jnz     loc_777F
.text:0000000000006E53                 mov     ecx, 51EB851Fh
.text:0000000000006E58                 mov     eax, edi
.text:0000000000006E5A                 mov     esi, edi
.text:0000000000006E5C                 imul    ecx
.text:0000000000006E5E                 mov     eax, edx
.text:0000000000006E60                 mov     edx, edi
.text:0000000000006E62                 sar     edx, 1Fh
.text:0000000000006E65                 sar     eax, 5
.text:0000000000006E68                 sub     eax, edx
.text:0000000000006E6A                 imul    eax, 64h ; 'd'
.text:0000000000006E6D                 sub     esi, eax
.text:0000000000006E6F                 add     esi, r8d
.text:0000000000006E72                 mov     eax, esi
.text:0000000000006E74                 imul    ecx
.text:0000000000006E76                 mov     eax, esi
.text:0000000000006E78                 sar     eax, 1Fh
.text:0000000000006E7B                 mov     ecx, edx
.text:0000000000006E7D                 sar     ecx, 5
.text:0000000000006E80                 sub     ecx, eax
.text:0000000000006E82                 imul    ecx, 64h ; 'd'
.text:0000000000006E85                 sub     esi, ecx
.text:0000000000006E87                 mov     ecx, esi
.text:0000000000006E89                 jns     loc_6879
.text:0000000000006E8F                 mov     eax, 0FFFFF894h
.text:0000000000006E94                 sub     eax, r8d
.text:0000000000006E97                 cmp     edi, eax
.text:0000000000006E99                 jge     loc_793A
.text:0000000000006E9F                 neg     ecx
.text:0000000000006EA1                 test    r15d, r15d
.text:0000000000006EA4                 jnz     loc_6882
.text:0000000000006EAA
.text:0000000000006EAA loc_6EAA:                               ; CODE XREF: __strftime_internal+9DC↑j
.text:0000000000006EAA                                         ; __strftime_internal+1AA0↓j
.text:0000000000006EAA                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006EAF                 mov     eax, 1
.text:0000000000006EB4                 cmp     r15d, 2Bh ; '+'
.text:0000000000006EB8                 jz      loc_791A
.text:0000000000006EBE                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000006EC3                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000006EC8                 mov     edi, 2
.text:0000000000006ECD                 xor     esi, esi
.text:0000000000006ECF                 jmp     loc_6417
.text:0000000000006ED4 ; ---------------------------------------------------------------------------
.text:0000000000006ED4
.text:0000000000006ED4 loc_6ED4:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006ED4                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006ED4                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 100
.text:0000000000006ED8                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006EDE                 mov     ecx, [r13+0Ch]
.text:0000000000006EE2                 mov     edi, 2
.text:0000000000006EE7                 jmp     loc_6400
.text:0000000000006EEC ; ---------------------------------------------------------------------------
.text:0000000000006EEC
.text:0000000000006EEC loc_6EEC:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006EEC                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006EEC                 mov     eax, [r13+18h]  ; jumptable 00000000000060AF case 117
.text:0000000000006EF0                 mov     edx, 92492493h
.text:0000000000006EF5                 mov     edi, 1
.text:0000000000006EFA                 lea     ecx, [rax+6]
.text:0000000000006EFD                 mov     eax, ecx
.text:0000000000006EFF                 imul    edx
.text:0000000000006F01                 lea     eax, [rdx+rcx]
.text:0000000000006F04                 mov     edx, ecx
.text:0000000000006F06                 sar     edx, 1Fh
.text:0000000000006F09                 sar     eax, 2
.text:0000000000006F0C                 sub     eax, edx
.text:0000000000006F0E                 lea     edx, ds:0[rax*8]
.text:0000000000006F15                 sub     edx, eax
.text:0000000000006F17                 sub     ecx, edx
.text:0000000000006F19                 add     ecx, 1
.text:0000000000006F1C                 jmp     loc_6400
.text:0000000000006F21 ; ---------------------------------------------------------------------------
.text:0000000000006F21
.text:0000000000006F21 loc_6F21:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F21                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006F21                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 119
.text:0000000000006F25                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F2B                 mov     ecx, [r13+18h]
.text:0000000000006F2F                 mov     edi, 1
.text:0000000000006F34                 jmp     loc_6400
.text:0000000000006F39 ; ---------------------------------------------------------------------------
.text:0000000000006F39
.text:0000000000006F39 loc_6F39:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F39                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006F39                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 87
.text:0000000000006F3D                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F43                 mov     eax, [r13+18h]
.text:0000000000006F47                 mov     ecx, 92492493h
.text:0000000000006F4C                 lea     esi, [rax+6]
.text:0000000000006F4F                 mov     eax, esi
.text:0000000000006F51                 imul    ecx
.text:0000000000006F53                 lea     eax, [rdx+rsi]
.text:0000000000006F56                 mov     edx, esi
.text:0000000000006F58                 sar     edx, 1Fh
.text:0000000000006F5B                 sar     eax, 2
.text:0000000000006F5E                 sub     eax, edx
.text:0000000000006F60                 lea     edx, ds:0[rax*8]
.text:0000000000006F67                 sub     edx, eax
.text:0000000000006F69                 mov     eax, edx
.text:0000000000006F6B                 mov     edx, [r13+1Ch]
.text:0000000000006F6F                 sub     eax, esi
.text:0000000000006F71                 lea     esi, [rax+rdx+7]
.text:0000000000006F75                 mov     eax, esi
.text:0000000000006F77                 imul    ecx
.text:0000000000006F79                 jmp     loc_66E2
.text:0000000000006F7E ; ---------------------------------------------------------------------------
.text:0000000000006F7E
.text:0000000000006F7E loc_6F7E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F7E                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006F7E                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 66
.text:0000000000006F82                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000006F88                 test    r8b, r8b
.text:0000000000006F8B                 jz      loc_6265
.text:0000000000006F91                 mov     byte ptr [rsp+4F8h+var_4C8], r8b
.text:0000000000006F96                 jmp     loc_6262        ; jumptable 00000000000060AF case 114
.text:0000000000006F9B ; ---------------------------------------------------------------------------
.text:0000000000006F9B
.text:0000000000006F9B loc_6F9B:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000006F9B                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000006F9B                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 67
.text:0000000000006F9F                 jz      loc_742A
.text:0000000000006FA5                 mov     esi, [r13+14h]
.text:0000000000006FA9                 mov     edx, 51EB851Fh
.text:0000000000006FAE                 mov     eax, esi
.text:0000000000006FB0                 imul    edx
.text:0000000000006FB2                 mov     eax, edx
.text:0000000000006FB4                 mov     edx, esi
.text:0000000000006FB6                 sar     edx, 1Fh
.text:0000000000006FB9                 sar     eax, 5
.text:0000000000006FBC                 sub     eax, edx
.text:0000000000006FBE                 mov     edx, esi
.text:0000000000006FC0                 lea     ecx, [rax+13h]
.text:0000000000006FC3                 imul    eax, 64h ; 'd'
.text:0000000000006FC6                 sub     edx, eax
.text:0000000000006FC8                 mov     eax, edx
.text:0000000000006FCA                 shr     eax, 1Fh
.text:0000000000006FCD                 test    ecx, ecx
.text:0000000000006FCF                 setnle  dl
.text:0000000000006FD2                 and     eax, edx
.text:0000000000006FD4                 cmp     esi, 0FFFFF894h
.text:0000000000006FDA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000006FDF                 sub     ecx, eax
.text:0000000000006FE1                 cmp     esi, 0FFFFF894h
.text:0000000000006FE7                 setnl   al
.text:0000000000006FEA                 test    r15d, r15d
.text:0000000000006FED                 jnz     loc_688C
.text:0000000000006FF3                 cmp     [rsp+4F8h+var_4CC], 2Bh ; '+'
.text:0000000000006FF8                 mov     r15d, [rsp+4F8h+var_4CC]
.text:0000000000006FFD                 jnz     loc_6896
.text:0000000000007003
.text:0000000000007003 loc_7003:                               ; CODE XREF: __strftime_internal+9F0↑j
.text:0000000000007003                 mov     edi, 2
.text:0000000000007008                 mov     edx, 63h ; 'c'
.text:000000000000700D
.text:000000000000700D loc_700D:                               ; CODE XREF: __strftime_internal+171D↓j
.text:000000000000700D                 cmp     edx, ecx
.text:000000000000700F                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:0000000000007014                 mov     r15d, 2Bh ; '+'
.text:000000000000701A                 jb      loc_6749
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: __strftime_internal+1A84↓j
.text:0000000000007020                 cmp     r10d, edi
.text:0000000000007023                 mov     r15d, 2Bh ; '+'
.text:0000000000007029                 setnle  byte ptr [rsp+4F8h+var_4B8]
.text:000000000000702E                 xor     esi, esi
.text:0000000000007030                 jmp     loc_6417
.text:0000000000007035 ; ---------------------------------------------------------------------------
.text:0000000000007035
.text:0000000000007035 loc_7035:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007035                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007035                 test    r11d, r11d      ; jumptable 00000000000060AF case 68
.text:0000000000007038                 jnz     def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000703E                 lea     rax, aMDY       ; "%m/%d/%y"
.text:0000000000007045                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000704D                 mov     [rsp+4F8h+var_4B8], rax
.text:0000000000007052                 jmp     loc_6512
.text:0000000000007057 ; ---------------------------------------------------------------------------
.text:0000000000007057
.text:0000000000007057 loc_7057:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007057                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007057                 test    r11d, r11d      ; jumptable 00000000000060AF case 70
.text:000000000000705A                 jnz     def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007060                 test    r15d, r15d
.text:0000000000007063                 jnz     loc_785D
.text:0000000000007069                 test    r10d, r10d
.text:000000000000706C                 jns     loc_785D
.text:0000000000007072                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000007079                 mov     [rsp+4F8h+var_4C0], 4
.text:0000000000007081                 mov     r15d, 2Bh ; '+'
.text:0000000000007087                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000708C                 jmp     loc_6512
.text:0000000000007091 ; ---------------------------------------------------------------------------
.text:0000000000007091
.text:0000000000007091 loc_7091:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007091                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007091                 movzx   ecx, byte ptr [rbx-1] ; jumptable 00000000000060AF case 0
.text:0000000000007095                 lea     r9, [rbx-1]
.text:0000000000007099
.text:0000000000007099 loc_7099:                               ; CODE XREF: __strftime_internal+1995↓j
.text:0000000000007099                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000709E                 mov     eax, 0
.text:00000000000070A3                 sub     rdx, r14
.text:00000000000070A6                 test    r10d, r10d
.text:00000000000070A9                 cmovns  eax, r10d
.text:00000000000070AD                 cmp     cl, 25h ; '%'
.text:00000000000070B0                 cdqe
.text:00000000000070B2                 jnz     loc_60EB
.text:00000000000070B8                 test    rax, rax
.text:00000000000070BB                 mov     ecx, 1
.text:00000000000070C0                 mov     r12, r9
.text:00000000000070C3                 cmovnz  rcx, rax
.text:00000000000070C7                 mov     r8d, 1
.text:00000000000070CD                 jmp     loc_6131
.text:00000000000070D2 ; ---------------------------------------------------------------------------
.text:00000000000070D2
.text:00000000000070D2 loc_70D2:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000070D2                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000070D2                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 72
.text:00000000000070D6                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000070DC                 mov     ecx, [r13+8]
.text:00000000000070E0                 mov     edi, 2
.text:00000000000070E5                 jmp     loc_6400
.text:00000000000070EA ; ---------------------------------------------------------------------------
.text:00000000000070EA
.text:00000000000070EA loc_70EA:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000070EA                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000070EA                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 77
.text:00000000000070EE                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:00000000000070F4                 mov     ecx, [r13+4]
.text:00000000000070F8                 mov     edi, 2
.text:00000000000070FD                 jmp     loc_6400
.text:0000000000007102 ; ---------------------------------------------------------------------------
.text:0000000000007102
.text:0000000000007102 loc_7102:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007102                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007102                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 78
.text:0000000000007106                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000710C                 cmp     r10d, 0FFFFFFFFh
.text:0000000000007110                 jz      loc_7661
.text:0000000000007116                 cmp     r10d, 8
.text:000000000000711A                 jg      loc_7929
.text:0000000000007120                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000007127                 mov     esi, r10d
.text:000000000000712A                 mov     edi, 66666667h
.text:000000000000712F                 nop
.text:0000000000007130
.text:0000000000007130 loc_7130:                               ; CODE XREF: __strftime_internal+12A4↓j
.text:0000000000007130                 mov     eax, ecx
.text:0000000000007132                 add     esi, 1
.text:0000000000007135                 sar     ecx, 1Fh
.text:0000000000007138                 imul    edi
.text:000000000000713A                 sar     edx, 2
.text:000000000000713D                 sub     edx, ecx
.text:000000000000713F                 cmp     esi, 9
.text:0000000000007142                 mov     ecx, edx
.text:0000000000007144                 jnz     short loc_7130
.text:0000000000007146
.text:0000000000007146 loc_7146:                               ; CODE XREF: __strftime_internal+1A90↓j
.text:0000000000007146                 mov     edi, r10d
.text:0000000000007149                 jmp     loc_6400
.text:000000000000714E ; ---------------------------------------------------------------------------
.text:000000000000714E
.text:000000000000714E loc_714E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000714E                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000714E                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 73
.text:0000000000007152                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007158                 mov     ecx, [rsp+4F8h+var_490]
.text:000000000000715C                 mov     edi, 2
.text:0000000000007161                 jmp     loc_6400
.text:0000000000007166 ; ---------------------------------------------------------------------------
.text:0000000000007166
.text:0000000000007166 loc_7166:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007166                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007166                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 108
.text:000000000000716A                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007170                 mov     ecx, [rsp+4F8h+var_490]
.text:0000000000007174
.text:0000000000007174 loc_7174:                               ; CODE XREF: __strftime_internal+13E4↓j
.text:0000000000007174                                         ; __strftime_internal+13F7↓j
.text:0000000000007174                 test    r15d, r15d
.text:0000000000007177                 mov     edi, 2
.text:000000000000717C                 jnz     loc_6400
.text:0000000000007182                 mov     r15d, 5Fh ; '_'
.text:0000000000007188                 jmp     loc_6400
.text:000000000000718D ; ---------------------------------------------------------------------------
.text:000000000000718D
.text:000000000000718D loc_718D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000718D                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000718D                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 109
.text:0000000000007191                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007197                 mov     eax, [r13+10h]
.text:000000000000719B                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:00000000000071A0                 mov     edi, 2
.text:00000000000071A5                 cmp     eax, 0FFFFFFFFh
.text:00000000000071A8                 lea     ecx, [rax+1]
.text:00000000000071AB                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:00000000000071B0                 cmp     eax, 0FFFFFFFFh
.text:00000000000071B3                 setnl   al
.text:00000000000071B6                 xor     esi, esi
.text:00000000000071B8                 jmp     loc_6417
.text:00000000000071BD ; ---------------------------------------------------------------------------
.text:00000000000071BD
.text:00000000000071BD loc_71BD:                               ; CODE XREF: __strftime_internal+20F↑j
.text:00000000000071BD                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:00000000000071BD                 test    r10d, r10d      ; jumptable 00000000000060AF case 110
.text:00000000000071C0                 mov     ecx, 0
.text:00000000000071C5                 mov     eax, 1
.text:00000000000071CA                 cmovns  ecx, r10d
.text:00000000000071CE                 movsxd  rcx, ecx
.text:00000000000071D1                 test    rcx, rcx
.text:00000000000071D4                 cmovz   rcx, rax
.text:00000000000071D8                 mov     rax, [rsp+4F8h+var_4F0]
.text:00000000000071DD                 sub     rax, r14
.text:00000000000071E0                 cmp     rax, rcx
.text:00000000000071E3                 jbe     loc_5F6C
.text:00000000000071E9                 test    rbp, rbp
.text:00000000000071EC                 jz      loc_64D8
.text:00000000000071F2                 cmp     r10d, 1
.text:00000000000071F6                 jle     short loc_7232
.text:00000000000071F8                 movsxd  rdx, r10d
.text:00000000000071FB                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000007200                 sub     rdx, 1          ; n
.text:0000000000007204                 cmp     r15d, 30h ; '0'
.text:0000000000007208                 lea     r12, [rbp+rdx+0]
.text:000000000000720D                 jz      loc_77DE
.text:0000000000007213                 cmp     r15d, 2Bh ; '+'
.text:0000000000007217                 jz      loc_77DE
.text:000000000000721D                 mov     rdi, rbp        ; s
.text:0000000000007220                 mov     esi, 20h ; ' '  ; c
.text:0000000000007225                 mov     rbp, r12
.text:0000000000007228                 call    _memset
.text:000000000000722D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007232
.text:0000000000007232 loc_7232:                               ; CODE XREF: __strftime_internal+1356↑j
.text:0000000000007232                                         ; __strftime_internal+1953↓j
.text:0000000000007232                 mov     byte ptr [rbp+0], 0Ah
.text:0000000000007236                 add     rbp, 1
.text:000000000000723A                 jmp     loc_64D8
.text:000000000000723F ; ---------------------------------------------------------------------------
.text:000000000000723F
.text:000000000000723F loc_723F:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000723F                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:000000000000723F                 xor     eax, eax        ; jumptable 00000000000060AF case 112
.text:0000000000007241                 jmp     loc_64E8
.text:0000000000007246 ; ---------------------------------------------------------------------------
.text:0000000000007246
.text:0000000000007246 loc_7246:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007246                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007246                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 106
.text:000000000000724A                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007250                 mov     eax, [r13+1Ch]
.text:0000000000007254                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:0000000000007259                 mov     edi, 3
.text:000000000000725E                 cmp     eax, 0FFFFFFFFh
.text:0000000000007261                 lea     ecx, [rax+1]
.text:0000000000007264                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007269                 cmp     eax, 0FFFFFFFFh
.text:000000000000726C                 setnl   al
.text:000000000000726F                 xor     esi, esi
.text:0000000000007271                 jmp     loc_6417
.text:0000000000007276 ; ---------------------------------------------------------------------------
.text:0000000000007276
.text:0000000000007276 loc_7276:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007276                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007276                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 107
.text:000000000000727A                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007280                 mov     ecx, [r13+8]
.text:0000000000007284                 jmp     loc_7174
.text:0000000000007289 ; ---------------------------------------------------------------------------
.text:0000000000007289
.text:0000000000007289 loc_7289:                               ; CODE XREF: __strftime_internal+20F↑j
.text:0000000000007289                                         ; DATA XREF: .rodata:jpt_60AF↓o
.text:0000000000007289                 cmp     r11d, 45h ; 'E' ; jumptable 00000000000060AF case 101
.text:000000000000728D                 jz      def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:0000000000007293                 mov     ecx, [r13+0Ch]
.text:0000000000007297                 jmp     loc_7174
.text:0000000000007297 ; ---------------------------------------------------------------------------
.text:000000000000729C                 align 20h
.text:00000000000072A0
.text:00000000000072A0 loc_72A0:                               ; CODE XREF: __strftime_internal+57B↑j
.text:00000000000072A0                                         ; __strftime_internal+583↑j
.text:00000000000072A0                 mov     eax, ecx
.text:00000000000072A2                 neg     eax
.text:00000000000072A4                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:00000000000072A9                 cmovnz  ecx, eax
.text:00000000000072AC                 jmp     loc_69D0
.text:00000000000072AC ; ---------------------------------------------------------------------------
.text:00000000000072B1                 align 8
.text:00000000000072B8
.text:00000000000072B8 loc_72B8:                               ; CODE XREF: __strftime_internal+B94↑j
.text:00000000000072B8                                         ; __strftime_internal+E33↑j
.text:00000000000072B8                 cmp     r15d, 2Dh ; '-'
.text:00000000000072BC                 mov     byte ptr [rsp+4F8h+var_4C0], 2Dh ; '-'
.text:00000000000072C1                 jnz     loc_6A54
.text:00000000000072C7
.text:00000000000072C7 loc_72C7:                               ; CODE XREF: __strftime_internal+16D9↓j
.text:00000000000072C7                 test    r10d, r10d
.text:00000000000072CA                 mov     r11d, 0
.text:00000000000072D0                 mov     rax, [rsp+4F8h+var_4F0]
.text:00000000000072D5                 cmovns  r11d, r10d
.text:00000000000072D9                 mov     r12d, 1
.text:00000000000072DF                 movsxd  r11, r11d
.text:00000000000072E2                 test    r11, r11
.text:00000000000072E5                 cmovnz  r12, r11
.text:00000000000072E9                 sub     rax, r14
.text:00000000000072EC                 cmp     rax, r12
.text:00000000000072EF                 jbe     loc_5F6C
.text:00000000000072F5                 test    rbp, rbp
.text:00000000000072F8                 jz      short loc_735C
.text:00000000000072FA                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000072FE                 test    eax, eax
.text:0000000000007300                 jnz     short loc_7354
.text:0000000000007302                 cmp     r11, 1
.text:0000000000007306                 jbe     short loc_7354
.text:0000000000007308                 movsxd  rax, r10d
.text:000000000000730B                 mov     rdi, rbp        ; s
.text:000000000000730E                 mov     esi, 20h ; ' '  ; c
.text:0000000000007313                 lea     rcx, [rax-1]
.text:0000000000007317                 mov     [rsp+4F8h+var_498], r9
.text:000000000000731C                 mov     [rsp+4F8h+var_4A0], r8
.text:0000000000007321                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000007326                 mov     dword ptr [rsp+4F8h+var_4B8], r10d
.text:000000000000732B                 mov     rdx, rcx        ; n
.text:000000000000732E                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:0000000000007333                 call    _memset
.text:0000000000007338                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000733D                 mov     r9, [rsp+4F8h+var_498]
.text:0000000000007342                 mov     r8, [rsp+4F8h+var_4A0]
.text:0000000000007347                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000734C                 mov     r10d, dword ptr [rsp+4F8h+var_4B8]
.text:0000000000007351                 add     rbp, rcx
.text:0000000000007354
.text:0000000000007354 loc_7354:                               ; CODE XREF: __strftime_internal+1460↑j
.text:0000000000007354                                         ; __strftime_internal+1466↑j
.text:0000000000007354                 mov     [rbp+0], r15b
.text:0000000000007358                 add     rbp, 1
.text:000000000000735C
.text:000000000000735C loc_735C:                               ; CODE XREF: __strftime_internal+1458↑j
.text:000000000000735C                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007361                 lea     rcx, [r9+17h]
.text:0000000000007365                 add     r14, r12
.text:0000000000007368                 mov     r15d, 2Dh ; '-'
.text:000000000000736E                 mov     r12, rbx
.text:0000000000007371                 sub     rcx, r8
.text:0000000000007374                 sub     rdx, r14
.text:0000000000007377                 jmp     loc_6B75
.text:0000000000007377 ; ---------------------------------------------------------------------------
.text:000000000000737C                 align 20h
.text:0000000000007380
.text:0000000000007380 loc_7380:                               ; CODE XREF: __strftime_internal+30D↑j
.text:0000000000007380                 call    _memcpy
.text:0000000000007385                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000738A                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000738F                 jmp     loc_61C2
.text:000000000000738F ; ---------------------------------------------------------------------------
.text:0000000000007394                 align 8
.text:0000000000007398
.text:0000000000007398 loc_7398:                               ; CODE XREF: __strftime_internal+4D8↑j
.text:0000000000007398                 mov     rdi, rbp
.text:000000000000739B                 mov     [rsp+4F8h+var_4C8], rcx
.text:00000000000073A0                 call    memcpy_lowcase
.text:00000000000073A5                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000073AA                 jmp     loc_639B
.text:00000000000073AF ; ---------------------------------------------------------------------------
.text:00000000000073AF
.text:00000000000073AF loc_73AF:                               ; CODE XREF: __strftime_internal+49C↑j
.text:00000000000073AF                                         ; __strftime_internal+4A6↑j
.text:00000000000073AF                 mov     rdi, rbp        ; s
.text:00000000000073B2                 mov     esi, 30h ; '0'  ; c
.text:00000000000073B7                 call    _memset
.text:00000000000073BC                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000073C1                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000073C7                 mov     rcx, [rsp+4F8h+var_4B0]
.text:00000000000073CC                 mov     r9, [rsp+4F8h+var_4A8]
.text:00000000000073D1                 jmp     loc_636E
.text:00000000000073D6 ; ---------------------------------------------------------------------------
.text:00000000000073D6
.text:00000000000073D6 loc_73D6:                               ; CODE XREF: __strftime_internal+2C6↑j
.text:00000000000073D6                                         ; __strftime_internal+2D0↑j
.text:00000000000073D6                 mov     rdi, rbp        ; s
.text:00000000000073D9                 mov     esi, 30h ; '0'  ; c
.text:00000000000073DE                 mov     rbp, rbx
.text:00000000000073E1                 call    _memset
.text:00000000000073E6                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000073EB                 mov     rcx, [rsp+4F8h+var_4B8]
.text:00000000000073F0                 mov     r8, [rsp+4F8h+var_4B0]
.text:00000000000073F5                 jmp     loc_6195
.text:00000000000073FA ; ---------------------------------------------------------------------------
.text:00000000000073FA
.text:00000000000073FA loc_73FA:                               ; CODE XREF: __strftime_internal+D1C↑j
.text:00000000000073FA                                         ; __strftime_internal+D26↑j
.text:00000000000073FA                 mov     rdi, rbp        ; s
.text:00000000000073FD                 mov     esi, 30h ; '0'  ; c
.text:0000000000007402                 call    _memset
.text:0000000000007407                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000740C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:0000000000007411                 mov     r8, [rsp+4F8h+var_4B0]
.text:0000000000007416                 jmp     loc_6BE8
.text:000000000000741B ; ---------------------------------------------------------------------------
.text:000000000000741B
.text:000000000000741B loc_741B:                               ; CODE XREF: __strftime_internal+64B↑j
.text:000000000000741B                 mov     esi, 70h ; 'p'
.text:0000000000007420                 mov     byte ptr [rsp+4F8h+var_4C8], 0
.text:0000000000007425                 jmp     loc_6265
.text:000000000000742A ; ---------------------------------------------------------------------------
.text:000000000000742A
.text:000000000000742A loc_742A:                               ; CODE XREF: __strftime_internal+85B↑j
.text:000000000000742A                                         ; __strftime_internal+9A1↑j ...
.text:000000000000742A                 xor     edi, edi
.text:000000000000742C                 jmp     loc_642C
.text:0000000000007431 ; ---------------------------------------------------------------------------
.text:0000000000007431
.text:0000000000007431 loc_7431:                               ; CODE XREF: __strftime_internal+17ED↓j
.text:0000000000007431                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:0000000000007436
.text:0000000000007436 loc_7436:                               ; CODE XREF: __strftime_internal+BDB↑j
.text:0000000000007436                 movsxd  r15, r12d
.text:0000000000007439                 cmp     r15, rdx
.text:000000000000743C                 jnb     loc_5F6C
.text:0000000000007442                 test    rbp, rbp
.text:0000000000007445                 jz      short loc_7478
.text:0000000000007447                 mov     rdi, rbp        ; s
.text:000000000000744A                 mov     rdx, r15        ; n
.text:000000000000744D                 mov     esi, 20h ; ' '  ; c
.text:0000000000007452                 mov     dword ptr [rsp+4F8h+var_4A0], r10d
.text:0000000000007457                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000745C                 add     rbp, r15
.text:000000000000745F                 mov     [rsp+4F8h+var_4B8], r8
.text:0000000000007464                 call    _memset
.text:0000000000007469                 mov     r10d, dword ptr [rsp+4F8h+var_4A0]
.text:000000000000746E                 mov     r9, [rsp+4F8h+var_4A8]
.text:0000000000007473                 mov     r8, [rsp+4F8h+var_4B8]
.text:0000000000007478
.text:0000000000007478 loc_7478:                               ; CODE XREF: __strftime_internal+15A5↑j
.text:0000000000007478                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000747D                 mov     eax, r10d
.text:0000000000007480                 add     r14, r15
.text:0000000000007483                 sub     eax, r12d
.text:0000000000007486                 cmp     r10d, r12d
.text:0000000000007489                 mov     r10d, 0
.text:000000000000748F                 cmovg   r10d, eax
.text:0000000000007493                 sub     rdx, r14
.text:0000000000007496                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000749B                 jnz     loc_75C2
.text:00000000000074A1                 add     r9, 17h
.text:00000000000074A5                 movsxd  r11, r10d
.text:00000000000074A8                 mov     r12, rbx
.text:00000000000074AB                 mov     rcx, r9
.text:00000000000074AE                 mov     r15d, 5Fh ; '_'
.text:00000000000074B4                 sub     rcx, r8
.text:00000000000074B7                 jmp     loc_6B75
.text:00000000000074BC ; ---------------------------------------------------------------------------
.text:00000000000074BC
.text:00000000000074BC loc_74BC:                               ; CODE XREF: __strftime_internal+BD1↑j
.text:00000000000074BC                 test    r10d, r10d
.text:00000000000074BF                 mov     r11d, 0
.text:00000000000074C5                 mov     r12d, 1
.text:00000000000074CB                 cmovns  r11d, r10d
.text:00000000000074CF                 movsxd  r11, r11d
.text:00000000000074D2                 test    r11, r11
.text:00000000000074D5                 cmovnz  r12, r11
.text:00000000000074D9                 cmp     r12, rdx
.text:00000000000074DC                 jnb     loc_5F6C
.text:00000000000074E2                 test    rbp, rbp
.text:00000000000074E5                 jz      short loc_7560
.text:00000000000074E7                 mov     edi, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000074EB                 test    edi, edi
.text:00000000000074ED                 jnz     short loc_7554
.text:00000000000074EF                 cmp     r11, 1
.text:00000000000074F3                 jbe     short loc_7554
.text:00000000000074F5                 movsxd  rdx, r10d
.text:00000000000074F8                 mov     [rsp+4F8h+var_48C], r10d
.text:00000000000074FD                 mov     [rsp+4F8h+var_498], r8
.text:0000000000007502                 sub     rdx, 1          ; n
.text:0000000000007506                 cmp     r15d, 30h ; '0'
.text:000000000000750A                 mov     [rsp+4F8h+var_4A0], rcx
.text:000000000000750F                 lea     rax, [rbp+rdx+0]
.text:0000000000007514                 mov     [rsp+4F8h+var_4A8], r11
.text:0000000000007519                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000751E                 jz      loc_78EF
.text:0000000000007524                 cmp     r15d, 2Bh ; '+'
.text:0000000000007528                 jz      loc_78EF
.text:000000000000752E                 mov     rdi, rbp        ; s
.text:0000000000007531                 mov     esi, 20h ; ' '  ; c
.text:0000000000007536                 call    _memset
.text:000000000000753B                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000007540                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000007545                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000754A                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000754F                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000007554
.text:0000000000007554 loc_7554:                               ; CODE XREF: __strftime_internal+164D↑j
.text:0000000000007554                                         ; __strftime_internal+1653↑j ...
.text:0000000000007554                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007559                 add     rbp, 1
.text:000000000000755D                 mov     [rbp-1], al
.text:0000000000007560
.text:0000000000007560 loc_7560:                               ; CODE XREF: __strftime_internal+1645↑j
.text:0000000000007560                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007565                 add     r14, r12
.text:0000000000007568                 mov     r12, rbx
.text:000000000000756B                 sub     rdx, r14
.text:000000000000756E                 jmp     loc_6B75
.text:0000000000007573 ; ---------------------------------------------------------------------------
.text:0000000000007573
.text:0000000000007573 loc_7573:                               ; CODE XREF: __strftime_internal+BA9↑j
.text:0000000000007573                 mov     r15d, 2Bh ; '+'
.text:0000000000007579                 jmp     loc_72C7
.text:000000000000757E ; ---------------------------------------------------------------------------
.text:000000000000757E
.text:000000000000757E loc_757E:                               ; CODE XREF: __strftime_internal+A35↑j
.text:000000000000757E                 mov     r12, rbx
.text:0000000000007581                 jmp     loc_5FD2
.text:0000000000007586 ; ---------------------------------------------------------------------------
.text:0000000000007586
.text:0000000000007586 loc_7586:                               ; CODE XREF: __strftime_internal+FA3↑j
.text:0000000000007586                 mov     eax, 0FFFFF894h
.text:000000000000758B                 lea     ecx, [rdi+r8+76Ch]
.text:0000000000007593                 sub     eax, r8d
.text:0000000000007596                 cmp     edi, eax
.text:0000000000007598                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000759D                 setnl   al
.text:00000000000075A0                 test    r15d, r15d
.text:00000000000075A3                 jz      loc_6730
.text:00000000000075A9
.text:00000000000075A9 loc_75A9:                               ; CODE XREF: __strftime_internal+88A↑j
.text:00000000000075A9                 cmp     r15d, 2Bh ; '+'
.text:00000000000075AD                 jnz     loc_673F
.text:00000000000075B3
.text:00000000000075B3 loc_75B3:                               ; CODE XREF: __strftime_internal+899↑j
.text:00000000000075B3                 mov     edi, 4
.text:00000000000075B8                 mov     edx, 270Fh
.text:00000000000075BD                 jmp     loc_700D
.text:00000000000075C2 ; ---------------------------------------------------------------------------
.text:00000000000075C2
.text:00000000000075C2 loc_75C2:                               ; CODE XREF: __strftime_internal+15FB↑j
.text:00000000000075C2                 movsxd  r15, r10d
.text:00000000000075C5                 mov     r12d, 1
.text:00000000000075CB                 test    r15, r15
.text:00000000000075CE                 cmovnz  r12, r15
.text:00000000000075D2                 cmp     r12, rdx
.text:00000000000075D5                 jnb     loc_5F6C
.text:00000000000075DB                 test    rbp, rbp
.text:00000000000075DE                 jz      short loc_763B
.text:00000000000075E0                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:00000000000075E5                 test    r11d, r11d
.text:00000000000075E8                 jnz     short loc_762F
.text:00000000000075EA                 cmp     r15, 1
.text:00000000000075EE                 jbe     short loc_762F
.text:00000000000075F0                 lea     rcx, [r15-1]
.text:00000000000075F4                 mov     rdi, rbp        ; s
.text:00000000000075F7                 mov     esi, 20h ; ' '  ; c
.text:00000000000075FC                 mov     dword ptr [rsp+4F8h+var_498], r10d
.text:0000000000007601                 mov     [rsp+4F8h+var_4A0], r9
.text:0000000000007606                 mov     rdx, rcx        ; n
.text:0000000000007609                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000760E                 mov     [rsp+4F8h+var_4B8], rcx
.text:0000000000007613                 call    _memset
.text:0000000000007618                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000761D                 mov     r10d, dword ptr [rsp+4F8h+var_498]
.text:0000000000007622                 mov     r9, [rsp+4F8h+var_4A0]
.text:0000000000007627                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000762C                 add     rbp, rcx
.text:000000000000762F
.text:000000000000762F loc_762F:                               ; CODE XREF: __strftime_internal+1748↑j
.text:000000000000762F                                         ; __strftime_internal+174E↑j
.text:000000000000762F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007634                 add     rbp, 1
.text:0000000000007638                 mov     [rbp-1], al
.text:000000000000763B
.text:000000000000763B loc_763B:                               ; CODE XREF: __strftime_internal+173E↑j
.text:000000000000763B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:0000000000007640                 add     r9, 17h
.text:0000000000007644                 add     r14, r12
.text:0000000000007647                 mov     rcx, r9
.text:000000000000764A                 mov     r11, r15
.text:000000000000764D                 mov     r12, rbx
.text:0000000000007650                 sub     rcx, r8
.text:0000000000007653                 mov     r15d, 5Fh ; '_'
.text:0000000000007659                 sub     rdx, r14
.text:000000000000765C                 jmp     loc_6B75
.text:0000000000007661 ; ---------------------------------------------------------------------------
.text:0000000000007661
.text:0000000000007661 loc_7661:                               ; CODE XREF: __strftime_internal+1270↑j
.text:0000000000007661                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000007668                 mov     edi, 9
.text:000000000000766D                 mov     r10d, 9
.text:0000000000007673                 jmp     loc_6400
.text:0000000000007678 ; ---------------------------------------------------------------------------
.text:0000000000007678
.text:0000000000007678 loc_7678:                               ; CODE XREF: __strftime_internal+7A3↑j
.text:0000000000007678                 mov     r12, rbx
.text:000000000000767B                 mov     r9, rbx
.text:000000000000767E                 mov     r8d, 1
.text:0000000000007684                 jmp     loc_6131
.text:0000000000007689 ; ---------------------------------------------------------------------------
.text:0000000000007689
.text:0000000000007689 loc_7689:                               ; CODE XREF: __strftime_internal+E59↑j
.text:0000000000007689                 cmp     r15d, 5Fh ; '_'
.text:000000000000768D                 jz      loc_7431
.text:0000000000007693                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:0000000000007698                 cmp     rax, rdx
.text:000000000000769B                 jnb     loc_5F6C
.text:00000000000076A1                 movsxd  r9, r12d
.text:00000000000076A4                 mov     r12, rbx
.text:00000000000076A7                 jmp     loc_6B2E
.text:00000000000076AC ; ---------------------------------------------------------------------------
.text:00000000000076AC
.text:00000000000076AC loc_76AC:                               ; CODE XREF: __strftime_internal+70F↑j
.text:00000000000076AC                                         ; __strftime_internal+719↑j
.text:00000000000076AC                 mov     rdi, rbp        ; s
.text:00000000000076AF                 mov     esi, 30h ; '0'  ; c
.text:00000000000076B4                 call    _memset
.text:00000000000076B9                 mov     rbp, [rsp+4F8h+var_4A8]
.text:00000000000076BE                 mov     r11, [rsp+4F8h+var_4A0]
.text:00000000000076C3                 jmp     loc_65D6
.text:00000000000076C8 ; ---------------------------------------------------------------------------
.text:00000000000076C8
.text:00000000000076C8 loc_76C8:                               ; CODE XREF: __strftime_internal+F01↑j
.text:00000000000076C8                 sub     r12d, 1
.text:00000000000076CC                 mov     edx, 16Dh
.text:00000000000076D1                 test    r12b, 3
.text:00000000000076D5                 jnz     short loc_7713
.text:00000000000076D7                 mov     eax, r12d
.text:00000000000076DA                 mov     edx, 51EB851Fh
.text:00000000000076DF                 imul    edx
.text:00000000000076E1                 mov     eax, edx
.text:00000000000076E3                 mov     edx, r12d
.text:00000000000076E6                 sar     edx, 1Fh
.text:00000000000076E9                 sar     eax, 5
.text:00000000000076EC                 sub     eax, edx
.text:00000000000076EE                 mov     edx, 16Eh
.text:00000000000076F3                 imul    eax, 64h ; 'd'
.text:00000000000076F6                 cmp     r12d, eax
.text:00000000000076F9                 jnz     short loc_7713
.text:00000000000076FB                 mov     eax, r12d
.text:00000000000076FE                 mov     ecx, 190h
.text:0000000000007703                 cdq
.text:0000000000007704                 idiv    ecx
.text:0000000000007706                 cmp     edx, 1
.text:0000000000007709                 sbb     edx, edx
.text:000000000000770B                 not     edx
.text:000000000000770D                 add     edx, 16Eh
.text:0000000000007713
.text:0000000000007713 loc_7713:                               ; CODE XREF: __strftime_internal+1835↑j
.text:0000000000007713                                         ; __strftime_internal+1859↑j
.text:0000000000007713                 add     r8d, edx
.text:0000000000007716                 mov     edx, 92492493h
.text:000000000000771B                 mov     ecx, r8d
.text:000000000000771E                 sub     ecx, [rsp+4F8h+var_4C0]
.text:0000000000007722                 add     ecx, 17Eh
.text:0000000000007728                 mov     eax, ecx
.text:000000000000772A                 sub     r8d, ecx
.text:000000000000772D                 imul    edx
.text:000000000000772F                 lea     eax, [rdx+rcx]
.text:0000000000007732                 mov     edx, ecx
.text:0000000000007734                 sar     edx, 1Fh
.text:0000000000007737                 sar     eax, 2
.text:000000000000773A                 sub     eax, edx
.text:000000000000773C                 lea     edx, ds:0[rax*8]
.text:0000000000007743                 sub     edx, eax
.text:0000000000007745                 lea     ecx, [r8+rdx+3]
.text:000000000000774A                 mov     r8d, 0FFFFFFFFh
.text:0000000000007750                 jmp     loc_6E3F
.text:0000000000007755 ; ---------------------------------------------------------------------------
.text:0000000000007755
.text:0000000000007755 loc_7755:                               ; CODE XREF: __strftime_internal+ABF↑j
.text:0000000000007755                                         ; __strftime_internal+AD1↑j
.text:0000000000007755                 imul    esi, 64h ; 'd'
.text:0000000000007758                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000775D                 mov     edi, 9
.text:0000000000007762                 imul    eax, r12d, 2710h
.text:0000000000007769                 add     eax, esi
.text:000000000000776B                 mov     esi, 14h
.text:0000000000007770                 add     ecx, eax
.text:0000000000007772                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007777                 xor     eax, 1
.text:000000000000777A                 jmp     loc_6417
.text:000000000000777F ; ---------------------------------------------------------------------------
.text:000000000000777F
.text:000000000000777F loc_777F:                               ; CODE XREF: __strftime_internal+FAD↑j
.text:000000000000777F                 mov     eax, ecx
.text:0000000000007781                 mov     edx, 92492493h
.text:0000000000007786                 mov     edi, 2
.text:000000000000778B                 imul    edx
.text:000000000000778D                 lea     eax, [rdx+rcx]
.text:0000000000007790                 sar     ecx, 1Fh
.text:0000000000007793                 sar     eax, 2
.text:0000000000007796                 sub     eax, ecx
.text:0000000000007798                 mov     ecx, eax
.text:000000000000779A                 add     ecx, 1
.text:000000000000779D                 jmp     loc_6400
.text:00000000000077A2 ; ---------------------------------------------------------------------------
.text:00000000000077A2
.text:00000000000077A2 loc_77A2:                               ; CODE XREF: __strftime_internal+AAF↑j
.text:00000000000077A2                                         ; __strftime_internal+AD9↑j
.text:00000000000077A2                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:00000000000077A7                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:00000000000077AC                 mov     edi, 6
.text:00000000000077B1                 imul    ecx, r12d, 64h ; 'd'
.text:00000000000077B5                 xor     eax, 1
.text:00000000000077B8                 add     ecx, esi
.text:00000000000077BA                 mov     esi, 4
.text:00000000000077BF                 jmp     loc_6417
.text:00000000000077C4 ; ---------------------------------------------------------------------------
.text:00000000000077C4
.text:00000000000077C4 loc_77C4:                               ; CODE XREF: __strftime_internal+607↑j
.text:00000000000077C4                                         ; __strftime_internal+611↑j
.text:00000000000077C4                 mov     rdi, rbp        ; s
.text:00000000000077C7                 mov     esi, 30h ; '0'  ; c
.text:00000000000077CC                 mov     rbp, r12
.text:00000000000077CF                 call    _memset
.text:00000000000077D4                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000077D9                 jmp     loc_64CC
.text:00000000000077DE ; ---------------------------------------------------------------------------
.text:00000000000077DE
.text:00000000000077DE loc_77DE:                               ; CODE XREF: __strftime_internal+136D↑j
.text:00000000000077DE                                         ; __strftime_internal+1377↑j
.text:00000000000077DE                 mov     rdi, rbp        ; s
.text:00000000000077E1                 mov     esi, 30h ; '0'  ; c
.text:00000000000077E6                 mov     rbp, r12
.text:00000000000077E9                 call    _memset
.text:00000000000077EE                 mov     rcx, [rsp+4F8h+var_4C8]
.text:00000000000077F3                 jmp     loc_7232
.text:00000000000077F8 ; ---------------------------------------------------------------------------
.text:00000000000077F8
.text:00000000000077F8 loc_77F8:                               ; CODE XREF: __strftime_internal+985↑j
.text:00000000000077F8                 call    _memcpy
.text:00000000000077FD                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007802                 jmp     loc_6835
.text:0000000000007807 ; ---------------------------------------------------------------------------
.text:0000000000007807
.text:0000000000007807 loc_7807:                               ; CODE XREF: __strftime_internal+96A↑j
.text:0000000000007807                 mov     rsi, [rsp+4F8h+var_4D8]
.text:000000000000780C                 mov     rdx, r12
.text:000000000000780F                 mov     rdi, rbp
.text:0000000000007812                 mov     [rsp+4F8h+var_4C8], rcx
.text:0000000000007817                 call    memcpy_lowcase
.text:000000000000781C                 mov     rcx, [rsp+4F8h+var_4C8]
.text:0000000000007821                 jmp     loc_6835
.text:0000000000007826 ; ---------------------------------------------------------------------------
.text:0000000000007826
.text:0000000000007826 loc_7826:                               ; CODE XREF: __strftime_internal+A17↑j
.text:0000000000007826                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000782A                 jmp     def_60AF        ; jumptable 00000000000060AF default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000782F ; ---------------------------------------------------------------------------
.text:000000000000782F
.text:000000000000782F loc_782F:                               ; CODE XREF: __strftime_internal+AC9↑j
.text:000000000000782F                 movzx   ecx, byte ptr [rbx]
.text:0000000000007832                 mov     r9, rbx
.text:0000000000007835                 jmp     loc_7099
.text:000000000000783A ; ---------------------------------------------------------------------------
.text:000000000000783A
.text:000000000000783A loc_783A:                               ; CODE XREF: __strftime_internal+E81↑j
.text:000000000000783A                 lea     rcx, [rbx+2]
.text:000000000000783E                 mov     r8d, 1
.text:0000000000007844
.text:0000000000007844 loc_7844:                               ; CODE XREF: __strftime_internal+19BB↓j
.text:0000000000007844                 mov     rdx, rcx
.text:0000000000007847                 add     rcx, 1
.text:000000000000784B                 movzx   eax, byte ptr [rcx-1]
.text:000000000000784F                 add     r8, 1
.text:0000000000007853                 cmp     al, 3Ah ; ':'
.text:0000000000007855                 jnz     loc_6D2D
.text:000000000000785B                 jmp     short loc_7844
.text:000000000000785D ; ---------------------------------------------------------------------------
.text:000000000000785D
.text:000000000000785D loc_785D:                               ; CODE XREF: __strftime_internal+11C3↑j
.text:000000000000785D                                         ; __strftime_internal+11CC↑j
.text:000000000000785D                 mov     esi, r10d
.text:0000000000007860                 mov     eax, 0
.text:0000000000007865                 sub     esi, 6
.text:0000000000007868                 cmovns  eax, esi
.text:000000000000786B                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000786F                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:0000000000007876                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000787B                 jmp     loc_6512
.text:0000000000007880 ; ---------------------------------------------------------------------------
.text:0000000000007880
.text:0000000000007880 loc_7880:                               ; CODE XREF: __strftime_internal+AB5↑j
.text:0000000000007880                 imul    ecx, r12d, 64h ; 'd'
.text:0000000000007884                 xor     esi, esi
.text:0000000000007886                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000788B                 mov     edi, 5
.text:0000000000007890                 add     ecx, eax
.text:0000000000007892                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:0000000000007897                 xor     eax, 1
.text:000000000000789A                 jmp     loc_6417
.text:000000000000789F ; ---------------------------------------------------------------------------
.text:000000000000789F
.text:000000000000789F loc_789F:                               ; CODE XREF: __strftime_internal+93A↑j
.text:000000000000789F                                         ; __strftime_internal+944↑j
.text:000000000000789F                 mov     rdi, rbp        ; s
.text:00000000000078A2                 mov     esi, 30h ; '0'  ; c
.text:00000000000078A7                 call    _memset
.text:00000000000078AC                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:00000000000078B1                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:00000000000078B7                 mov     rcx, [rsp+4F8h+var_4B0]
.text:00000000000078BC                 jmp     loc_6807
.text:00000000000078C1 ; ---------------------------------------------------------------------------
.text:00000000000078C1
.text:00000000000078C1 loc_78C1:                               ; CODE XREF: __strftime_internal+C50↑j
.text:00000000000078C1                                         ; __strftime_internal+C5A↑j
.text:00000000000078C1                 mov     rdi, rbp        ; s
.text:00000000000078C4                 mov     esi, 30h ; '0'  ; c
.text:00000000000078C9                 mov     rbp, r12
.text:00000000000078CC                 call    _memset
.text:00000000000078D1                 mov     rcx, [rsp+4F8h+var_4B8]
.text:00000000000078D6                 mov     r9, [rsp+4F8h+var_4A8]
.text:00000000000078DB                 mov     r8, [rsp+4F8h+var_4A0]
.text:00000000000078E0                 jmp     loc_6B1F
.text:00000000000078E5 ; ---------------------------------------------------------------------------
.text:00000000000078E5
.text:00000000000078E5 loc_78E5:                               ; CODE XREF: __strftime_internal+7D6↑j
.text:00000000000078E5                                         ; __strftime_internal+7E5↑j
.text:00000000000078E5                 mov     esi, 30h ; '0'
.text:00000000000078EA                 jmp     loc_668B
.text:00000000000078EF ; ---------------------------------------------------------------------------
.text:00000000000078EF
.text:00000000000078EF loc_78EF:                               ; CODE XREF: __strftime_internal+167E↑j
.text:00000000000078EF                                         ; __strftime_internal+1688↑j
.text:00000000000078EF                 mov     rdi, rbp        ; s
.text:00000000000078F2                 mov     esi, 30h ; '0'  ; c
.text:00000000000078F7                 call    _memset
.text:00000000000078FC                 mov     rbp, [rsp+4F8h+var_4B8]
.text:0000000000007901                 mov     r11, [rsp+4F8h+var_4A8]
.text:0000000000007906                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000790B                 mov     r8, [rsp+4F8h+var_498]
.text:0000000000007910                 mov     r10d, [rsp+4F8h+var_48C]
.text:0000000000007915                 jmp     loc_7554
.text:000000000000791A ; ---------------------------------------------------------------------------
.text:000000000000791A
.text:000000000000791A loc_791A:                               ; CODE XREF: __strftime_internal+1018↑j
.text:000000000000791A                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000791F                 mov     edi, 2
.text:0000000000007924                 jmp     loc_7020
.text:0000000000007929 ; ---------------------------------------------------------------------------
.text:0000000000007929
.text:0000000000007929 loc_7929:                               ; CODE XREF: __strftime_internal+127A↑j
.text:0000000000007929                 mov     ecx, [rsp+4F8h+arg_18]
.text:0000000000007930                 jmp     loc_7146
.text:0000000000007935 ; ---------------------------------------------------------------------------
.text:0000000000007935
.text:0000000000007935 loc_7935:                               ; CODE XREF: __strftime_internal+E3↑j
.text:0000000000007935                 call    ___stack_chk_fail
.text:000000000000793A ; ---------------------------------------------------------------------------
.text:000000000000793A
.text:000000000000793A loc_793A:                               ; CODE XREF: __strftime_internal+FF9↑j
.text:000000000000793A                 add     ecx, 64h ; 'd'
.text:000000000000793D                 test    r15d, r15d
.text:0000000000007940                 jz      loc_6EAA
.text:0000000000007946                 jmp     loc_6882
.text:000000000000794B ; ---------------------------------------------------------------------------
.text:000000000000794B
.text:000000000000794B loc_794B:                               ; CODE XREF: __strftime_internal+3D5↑j
.text:000000000000794B                 xor     edi, edi
.text:000000000000794D                 jmp     loc_643C
.text:000000000000794D ; } // starts at 5EA0
.text:000000000000794D __strftime_internal endp
.text:000000000000794D
.text:000000000000794D ; ---------------------------------------------------------------------------
.text:0000000000007952                 align 20h
.text:0000000000007960
.text:0000000000007960 ; =============== S U B R O U T I N E =======================================
.text:0000000000007960
.text:0000000000007960
.text:0000000000007960                 public nstrftime
.text:0000000000007960 nstrftime       proc near               ; CODE XREF: init_header+AD↑p
.text:0000000000007960                                         ; init_header+DB↑p
.text:0000000000007960
.text:0000000000007960 var_11          = qword ptr -11h
.text:0000000000007960
.text:0000000000007960 ; __unwind {
.text:0000000000007960                 sub     rsp, 18h
.text:0000000000007964                 mov     rax, fs:28h
.text:000000000000796D                 mov     [rsp+18h+var_11+1], rax
.text:0000000000007972                 xor     eax, eax
.text:0000000000007974                 mov     byte ptr [rsp+18h+var_11], 0
.text:0000000000007979                 push    r9              ; int
.text:000000000000797B                 xor     r9d, r9d
.text:000000000000797E                 push    r8              ; __int64
.text:0000000000007980                 xor     r8d, r8d
.text:0000000000007983                 lea     rax, [rsp+28h+var_11]
.text:0000000000007988                 push    rax             ; __int64
.text:0000000000007989                 push    0FFFFFFFFFFFFFFFFh ; int
.text:000000000000798B                 call    __strftime_internal
.text:0000000000007990                 add     rsp, 20h
.text:0000000000007994                 mov     rdx, [rsp+18h+var_11+1]
.text:0000000000007999                 xor     rdx, fs:28h
.text:00000000000079A2                 jnz     short loc_79A9
.text:00000000000079A4                 add     rsp, 18h
.text:00000000000079A8                 retn
.text:00000000000079A9 ; ---------------------------------------------------------------------------
.text:00000000000079A9
.text:00000000000079A9 loc_79A9:                               ; CODE XREF: nstrftime+42↑j
.text:00000000000079A9                 call    ___stack_chk_fail
.text:00000000000079A9 ; } // starts at 7960
.text:00000000000079A9 nstrftime       endp
.text:00000000000079A9
.text:00000000000079A9 ; ---------------------------------------------------------------------------
.text:00000000000079AE                 align 10h
.text:00000000000079B0
.text:00000000000079B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079B0
.text:00000000000079B0
.text:00000000000079B0                 public set_program_name
.text:00000000000079B0 set_program_name proc near              ; CODE XREF: main+30↑p
.text:00000000000079B0 ; __unwind {
.text:00000000000079B0                 test    rdi, rdi
.text:00000000000079B3                 push    rbx
.text:00000000000079B4                 jz      short loc_7A2D
.text:00000000000079B6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000079BB                 mov     rbx, rdi
.text:00000000000079BE                 call    _strrchr
.text:00000000000079C3                 test    rax, rax
.text:00000000000079C6                 jz      short loc_7A1D
.text:00000000000079C8                 lea     r8, [rax+1]
.text:00000000000079CC                 mov     rdx, r8
.text:00000000000079CF                 sub     rdx, rbx
.text:00000000000079D2                 cmp     rdx, 6
.text:00000000000079D6                 jle     short loc_7A1D
.text:00000000000079D8                 lea     rsi, [rax-6]
.text:00000000000079DC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000079E3                 mov     ecx, 7
.text:00000000000079E8                 repe cmpsb
.text:00000000000079EA                 setnbe  dl
.text:00000000000079ED                 sbb     dl, 0
.text:00000000000079F0                 test    dl, dl
.text:00000000000079F2                 jnz     short loc_7A1D
.text:00000000000079F4                 lea     rdi, aLt        ; "lt-"
.text:00000000000079FB                 mov     ecx, 3
.text:0000000000007A00                 mov     rsi, r8
.text:0000000000007A03                 mov     rbx, r8
.text:0000000000007A06                 repe cmpsb
.text:0000000000007A08                 setnbe  dl
.text:0000000000007A0B                 sbb     dl, 0
.text:0000000000007A0E                 test    dl, dl
.text:0000000000007A10                 jnz     short loc_7A1D
.text:0000000000007A12                 lea     rbx, [rax+4]
.text:0000000000007A16                 mov     cs:__bss_start, rbx
.text:0000000000007A1D
.text:0000000000007A1D loc_7A1D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000007A1D                                         ; set_program_name+26↑j ...
.text:0000000000007A1D                 mov     cs:program_name, rbx
.text:0000000000007A24                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000007A2B                 pop     rbx
.text:0000000000007A2C                 retn
.text:0000000000007A2D ; ---------------------------------------------------------------------------
.text:0000000000007A2D
.text:0000000000007A2D loc_7A2D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000007A2D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000007A34                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000007A3B                 mov     edx, 37h ; '7'  ; n
.text:0000000000007A40                 mov     esi, 1          ; size
.text:0000000000007A45                 call    _fwrite
.text:0000000000007A4A                 call    _abort
.text:0000000000007A4A ; } // starts at 79B0
.text:0000000000007A4A set_program_name endp
.text:0000000000007A4A
.text:0000000000007A4A ; ---------------------------------------------------------------------------
.text:0000000000007A4F                 align 10h
.text:0000000000007A50
.text:0000000000007A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000007A50
.text:0000000000007A50 ; Attributes: info_from_lumina
.text:0000000000007A50
.text:0000000000007A50 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000007A50 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000007A50                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000007A50 ; __unwind {
.text:0000000000007A50                 push    rbp
.text:0000000000007A51                 push    rbx
.text:0000000000007A52                 mov     rbp, rdi
.text:0000000000007A55                 mov     ebx, esi
.text:0000000000007A57                 sub     rsp, 8
.text:0000000000007A5B                 call    locale_charset
.text:0000000000007A60                 movzx   edx, byte ptr [rax]
.text:0000000000007A63                 and     edx, 0FFFFFFDFh
.text:0000000000007A66                 cmp     dl, 55h ; 'U'
.text:0000000000007A69                 jz      short loc_7AE0
.text:0000000000007A6B                 cmp     dl, 47h ; 'G'
.text:0000000000007A6E                 jz      short loc_7A90
.text:0000000000007A70
.text:0000000000007A70 loc_7A70:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000007A70                                         ; gettext_quote+50↓j ...
.text:0000000000007A70                 lea     rax, unk_DAB3
.text:0000000000007A77                 lea     rdx, aInvalidSSArgum+19h ; "'"
.text:0000000000007A7E                 cmp     ebx, 9
.text:0000000000007A81                 cmovnz  rax, rdx
.text:0000000000007A85                 add     rsp, 8
.text:0000000000007A89                 pop     rbx
.text:0000000000007A8A                 pop     rbp
.text:0000000000007A8B                 retn
.text:0000000000007A8B ; ---------------------------------------------------------------------------
.text:0000000000007A8C                 align 10h
.text:0000000000007A90
.text:0000000000007A90 loc_7A90:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000007A90                 movzx   edx, byte ptr [rax+1]
.text:0000000000007A94                 and     edx, 0FFFFFFDFh
.text:0000000000007A97                 cmp     dl, 42h ; 'B'
.text:0000000000007A9A                 jnz     short loc_7A70
.text:0000000000007A9C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000007AA0                 jnz     short loc_7A70
.text:0000000000007AA2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000007AA6                 jnz     short loc_7A70
.text:0000000000007AA8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000007AAC                 jnz     short loc_7A70
.text:0000000000007AAE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000007AB2                 jnz     short loc_7A70
.text:0000000000007AB4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000007AB8                 jnz     short loc_7A70
.text:0000000000007ABA                 cmp     byte ptr [rax+7], 0
.text:0000000000007ABE                 jnz     short loc_7A70
.text:0000000000007AC0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000007AC4                 lea     rax, unk_DAAC
.text:0000000000007ACB                 lea     rdx, unk_DAB0
.text:0000000000007AD2                 cmovnz  rax, rdx
.text:0000000000007AD6                 add     rsp, 8
.text:0000000000007ADA                 pop     rbx
.text:0000000000007ADB                 pop     rbp
.text:0000000000007ADC                 retn
.text:0000000000007ADC ; ---------------------------------------------------------------------------
.text:0000000000007ADD                 align 20h
.text:0000000000007AE0
.text:0000000000007AE0 loc_7AE0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000007AE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000007AE4                 and     edx, 0FFFFFFDFh
.text:0000000000007AE7                 cmp     dl, 54h ; 'T'
.text:0000000000007AEA                 jnz     short loc_7A70
.text:0000000000007AEC                 movzx   edx, byte ptr [rax+2]
.text:0000000000007AF0                 and     edx, 0FFFFFFDFh
.text:0000000000007AF3                 cmp     dl, 46h ; 'F'
.text:0000000000007AF6                 jnz     loc_7A70
.text:0000000000007AFC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000007B00                 jnz     loc_7A70
.text:0000000000007B06                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000007B0A                 jnz     loc_7A70
.text:0000000000007B10                 cmp     byte ptr [rax+5], 0
.text:0000000000007B14                 jnz     loc_7A70
.text:0000000000007B1A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000007B1E                 lea     rax, unk_DAA4
.text:0000000000007B25                 lea     rdx, unk_DAA8
.text:0000000000007B2C                 cmovnz  rax, rdx
.text:0000000000007B30                 add     rsp, 8
.text:0000000000007B34                 pop     rbx
.text:0000000000007B35                 pop     rbp
.text:0000000000007B36                 retn
.text:0000000000007B36 ; } // starts at 7A50
.text:0000000000007B36 gettext_quote   endp
.text:0000000000007B36
.text:0000000000007B36 ; ---------------------------------------------------------------------------
.text:0000000000007B37                 align 20h
.text:0000000000007B40
.text:0000000000007B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B40
.text:0000000000007B40 ; Attributes: info_from_lumina
.text:0000000000007B40
.text:0000000000007B40 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000007B40 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000007B40                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000007B40
.text:0000000000007B40 var_E0          = dword ptr -0E0h
.text:0000000000007B40 var_DB          = byte ptr -0DBh
.text:0000000000007B40 var_DA          = byte ptr -0DAh
.text:0000000000007B40 var_D9          = byte ptr -0D9h
.text:0000000000007B40 s               = qword ptr -0D8h
.text:0000000000007B40 n               = qword ptr -0D0h
.text:0000000000007B40 var_C8          = qword ptr -0C8h
.text:0000000000007B40 ps              = qword ptr -0C0h
.text:0000000000007B40 var_B8          = qword ptr -0B8h
.text:0000000000007B40 var_B0          = qword ptr -0B0h
.text:0000000000007B40 var_A8          = qword ptr -0A8h
.text:0000000000007B40 s2              = qword ptr -0A0h
.text:0000000000007B40 var_98          = qword ptr -98h
.text:0000000000007B40 var_90          = qword ptr -90h
.text:0000000000007B40 var_88          = qword ptr -88h
.text:0000000000007B40 var_80          = qword ptr -80h
.text:0000000000007B40 var_78          = qword ptr -78h
.text:0000000000007B40 var_70          = dword ptr -70h
.text:0000000000007B40 var_6C          = byte ptr -6Ch
.text:0000000000007B40 var_6B          = byte ptr -6Bh
.text:0000000000007B40 var_6A          = byte ptr -6Ah
.text:0000000000007B40 var_69          = byte ptr -69h
.text:0000000000007B40 var_68          = qword ptr -68h
.text:0000000000007B40 var_60          = qword ptr -60h
.text:0000000000007B40 wc              = dword ptr -4Ch
.text:0000000000007B40 var_48          = qword ptr -48h
.text:0000000000007B40 var_40          = qword ptr -40h
.text:0000000000007B40 arg_0           = qword ptr  8
.text:0000000000007B40 arg_8           = qword ptr  10h
.text:0000000000007B40 arg_10          = qword ptr  18h
.text:0000000000007B40
.text:0000000000007B40 ; __unwind {
.text:0000000000007B40                 push    r15
.text:0000000000007B42                 push    r14
.text:0000000000007B44                 mov     r15d, r8d
.text:0000000000007B47                 push    r13
.text:0000000000007B49                 push    r12
.text:0000000000007B4B                 mov     r14, rdi
.text:0000000000007B4E                 push    rbp
.text:0000000000007B4F                 push    rbx
.text:0000000000007B50                 mov     ebx, r9d
.text:0000000000007B53                 mov     r13, rsi
.text:0000000000007B56                 mov     rbp, rcx
.text:0000000000007B59                 and     ebx, 2
.text:0000000000007B5C                 sub     rsp, 0B8h
.text:0000000000007B63                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000007B6B                 mov     [rsp+0E8h+s], rdx
.text:0000000000007B70                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000007B75                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000007B7A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000007B7F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000007B87                 mov     [rsp+0E8h+var_80], rax
.text:0000000000007B8C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000007B94                 mov     [rsp+0E8h+var_88], rax
.text:0000000000007B99                 mov     rax, fs:28h
.text:0000000000007BA2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000007BAA                 xor     eax, eax
.text:0000000000007BAC                 call    ___ctype_get_mb_cur_max
.text:0000000000007BB1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000007BB5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000007BBA                 ja      def_7BD1        ; jumptable 00000000000121F1 default case
.text:0000000000007BC0                 lea     rcx, jpt_7BD1
.text:0000000000007BC7                 mov     edx, r15d
.text:0000000000007BCA                 movsxd  rax, ds:(jpt_7BD1 - 0DB20h)[rcx+rdx*4]
.text:0000000000007BCE                 add     rax, rcx
.text:0000000000007BD1                 jmp     rax             ; switch jump
.text:0000000000007BD3 ; ---------------------------------------------------------------------------
.text:0000000000007BD3
.text:0000000000007BD3 loc_7BD3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000007BD3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000007BD3                                         ; DATA XREF: ...
.text:0000000000007BD3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000007BD8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000007BDD                 xor     r12d, r12d
.text:0000000000007BE0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000007BE9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000007BEE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000007BF3
.text:0000000000007BF3 loc_7BF3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000007BF3                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000007BFA                 mov     [rsp+0E8h+n], 1
.text:0000000000007C03                 xor     r15d, r15d
.text:0000000000007C06                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007C0E                 mov     [rsp+0E8h+s2], rax
.text:0000000000007C13
.text:0000000000007C13 loc_7C13:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000007C13                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000007C13                 xor     r11d, r11d
.text:0000000000007C16                 mov     rax, rbp
.text:0000000000007C19                 mov     r8d, r12d
.text:0000000000007C1C                 mov     rbp, r11
.text:0000000000007C1F                 mov     r11, rax
.text:0000000000007C22                 nop     word ptr [rax+rax+00h]
.text:0000000000007C28
.text:0000000000007C28 loc_7C28:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000007C28                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000007C28                 cmp     r11, rbp
.text:0000000000007C2B                 setnz   r12b
.text:0000000000007C2F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007C33                 jnz     short loc_7C42
.text:0000000000007C35                 mov     rax, [rsp+0E8h+s]
.text:0000000000007C3A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000007C3E                 setnz   r12b
.text:0000000000007C42
.text:0000000000007C42 loc_7C42:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000007C42                 test    r12b, r12b
.text:0000000000007C45                 jz      loc_82A0
.text:0000000000007C4B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007C50                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000007C55                 lea     r9, [rdi+rbp]
.text:0000000000007C59                 setnz   al
.text:0000000000007C5C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000007C60                 mov     r10d, eax
.text:0000000000007C63                 jz      loc_7D10
.text:0000000000007C69                 mov     rax, [rsp+0E8h+n]
.text:0000000000007C6E                 test    rax, rax
.text:0000000000007C71                 jz      loc_80A0
.text:0000000000007C77                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007C7B                 lea     rbx, [rbp+rax+0]
.text:0000000000007C80                 jnz     short loc_7CB0
.text:0000000000007C82                 cmp     rax, 1
.text:0000000000007C86                 jbe     short loc_7CB0
.text:0000000000007C88                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000007C8D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000007C92                 mov     [rsp+0E8h+ps], r9
.text:0000000000007C97                 call    _strlen
.text:0000000000007C9C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007CA2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000007CA8                 mov     r11, rax
.text:0000000000007CAB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000007CB0
.text:0000000000007CB0 loc_7CB0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000007CB0                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000007CB0                 cmp     rbx, r11
.text:0000000000007CB3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000007CB8                 ja      loc_8270
.text:0000000000007CBE                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000007CC3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000007CC8                 mov     rdi, r9         ; s1
.text:0000000000007CCB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000007CD0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000007CD5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000007CDA                 call    _memcmp
.text:0000000000007CDF                 test    eax, eax
.text:0000000000007CE1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000007CE6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000007CEC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000007CF1                 jnz     loc_8270
.text:0000000000007CF7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007CFC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000007D02                 jnz     loc_8C85
.text:0000000000007D08                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000007D10
.text:0000000000007D10 loc_7D10:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000007D10                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000007D10                 movzx   ebx, byte ptr [r9]
.text:0000000000007D14                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000007D17                 ja      def_7D2E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000007D1D                 lea     rcx, jpt_7D2E
.text:0000000000007D24                 movzx   edx, bl
.text:0000000000007D27                 movsxd  rax, ds:(jpt_7D2E - 0DB4Ch)[rcx+rdx*4]
.text:0000000000007D2B                 add     rax, rcx
.text:0000000000007D2E                 jmp     rax             ; switch jump
.text:0000000000007D30 ; ---------------------------------------------------------------------------
.text:0000000000007D30
.text:0000000000007D30 loc_7D30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007D30                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000007D30                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000007D33
.text:0000000000007D33 loc_7D33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007D33                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007D33                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000007D37                 setnz   al
.text:0000000000007D3A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000007D3E                 jnz     short loc_7D4C
.text:0000000000007D40                 mov     rax, [rsp+0E8h+s]
.text:0000000000007D45                 cmp     byte ptr [rax+1], 0
.text:0000000000007D49                 setnz   al
.text:0000000000007D4C
.text:0000000000007D4C loc_7D4C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000007D4C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007D51                 setz    dl
.text:0000000000007D54                 test    al, al
.text:0000000000007D56                 jz      loc_7FA8
.text:0000000000007D5C
.text:0000000000007D5C loc_7D5C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000007D5C                 xor     r12d, r12d
.text:0000000000007D5F                 xor     eax, eax
.text:0000000000007D61                 nop     dword ptr [rax+00000000h]
.text:0000000000007D68
.text:0000000000007D68 loc_7D68:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000007D68                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000007D68                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000007D6D                 jnz     loc_7E82
.text:0000000000007D73                 test    dl, dl
.text:0000000000007D75                 jnz     loc_7E82
.text:0000000000007D7B
.text:0000000000007D7B loc_7D7B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000007D7B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000007D80                 test    rsi, rsi
.text:0000000000007D83                 jz      short loc_7D99
.text:0000000000007D85                 mov     edx, ebx
.text:0000000000007D87                 shr     dl, 5
.text:0000000000007D8A                 movzx   edx, dl
.text:0000000000007D8D                 mov     edx, [rsi+rdx*4]
.text:0000000000007D90                 bt      edx, ebx
.text:0000000000007D93                 jb      loc_7EE3
.text:0000000000007D99
.text:0000000000007D99 loc_7D99:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000007D99                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000007D99                 test    r10b, r10b
.text:0000000000007D9C                 jnz     loc_7EE3
.text:0000000000007DA2                 xor     eax, 1
.text:0000000000007DA5                 add     rbp, 1
.text:0000000000007DA9                 and     eax, r8d
.text:0000000000007DAC
.text:0000000000007DAC loc_7DAC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000007DAC                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000007DAC                 test    al, al
.text:0000000000007DAE                 jz      short loc_7DD0
.text:0000000000007DB0                 cmp     r13, r15
.text:0000000000007DB3                 jbe     short loc_7DBA
.text:0000000000007DB5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007DBA
.text:0000000000007DBA loc_7DBA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000007DBA                 lea     rax, [r15+1]
.text:0000000000007DBE                 cmp     r13, rax
.text:0000000000007DC1                 jbe     short loc_7DC9
.text:0000000000007DC3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000007DC9
.text:0000000000007DC9 loc_7DC9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000007DC9                 add     r15, 2
.text:0000000000007DCD                 xor     r8d, r8d
.text:0000000000007DD0
.text:0000000000007DD0 loc_7DD0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000007DD0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000007DD0                 cmp     r15, r13
.text:0000000000007DD3                 jnb     short loc_7DD9
.text:0000000000007DD5                 mov     [r14+r15], bl
.text:0000000000007DD9
.text:0000000000007DD9 loc_7DD9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000007DD9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000007DDE                 add     r15, 1
.text:0000000000007DE2                 mov     eax, 0
.text:0000000000007DE7                 test    r12b, r12b
.text:0000000000007DEA                 cmovz   edi, eax
.text:0000000000007DED                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000007DF2                 jmp     loc_7C28
.text:0000000000007DF2 ; ---------------------------------------------------------------------------
.text:0000000000007DF7                 align 20h
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007E00                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000007E00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000007E03
.text:0000000000007E03 loc_7E03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E03                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007E03                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000007E07                 cmp     eax, 2
.text:0000000000007E0A                 jz      loc_83C8
.text:0000000000007E10                 cmp     eax, 5
.text:0000000000007E13                 jz      loc_8388
.text:0000000000007E19                 cmp     eax, 2
.text:0000000000007E1C                 mov     ebx, 3Fh ; '?'
.text:0000000000007E21                 setz    dl
.text:0000000000007E24                 xor     r12d, r12d
.text:0000000000007E27                 xor     eax, eax
.text:0000000000007E29                 jmp     loc_7D68
.text:0000000000007E29 ; ---------------------------------------------------------------------------
.text:0000000000007E2E                 align 10h
.text:0000000000007E30
.text:0000000000007E30 loc_7E30:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000007E30                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000007E30                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000007E33
.text:0000000000007E33 loc_7E33:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E33                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007E33                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000007E38                 jz      loc_8340
.text:0000000000007E3E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000007E43                 xor     edx, edx
.text:0000000000007E45                 xor     eax, eax
.text:0000000000007E47                 mov     ebx, 27h ; '''
.text:0000000000007E4C                 jmp     loc_7D68
.text:0000000000007E4C ; ---------------------------------------------------------------------------
.text:0000000000007E51                 align 8
.text:0000000000007E58
.text:0000000000007E58 loc_7E58:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E58                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007E58                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000007E5D                 mov     ebx, 74h ; 't'
.text:0000000000007E62
.text:0000000000007E62 loc_7E62:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000007E62                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000007E62                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007E67                 setz    al
.text:0000000000007E6A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000007E6E                 jnz     loc_7FBE
.text:0000000000007E74
.text:0000000000007E74 loc_7E74:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000007E74                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000007E74                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007E79                 jnz     short loc_7EE0
.text:0000000000007E7B
.text:0000000000007E7B loc_7E7B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000007E7B                 mov     ebx, edx
.text:0000000000007E7D                 xor     r12d, r12d
.text:0000000000007E80                 xor     eax, eax
.text:0000000000007E82
.text:0000000000007E82 loc_7E82:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000007E82                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000007E82                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007E87                 jnz     loc_7D7B
.text:0000000000007E8D                 jmp     loc_7D99
.text:0000000000007E8D ; ---------------------------------------------------------------------------
.text:0000000000007E92                 align 8
.text:0000000000007E98
.text:0000000000007E98 loc_7E98:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007E98                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007E98                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000007E9D                 mov     ebx, 62h ; 'b'
.text:0000000000007EA2                 jmp     short loc_7E74
.text:0000000000007EA2 ; ---------------------------------------------------------------------------
.text:0000000000007EA4                 align 8
.text:0000000000007EA8
.text:0000000000007EA8 loc_7EA8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007EA8                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007EA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000007EAD                 jz      loc_8280
.text:0000000000007EB3                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000007EB8                 jz      loc_80D0
.text:0000000000007EBE
.text:0000000000007EBE loc_7EBE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000007EBE                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007EC3                 jz      loc_80D0
.text:0000000000007EC9                 cmp     [rsp+0E8h+n], 0
.text:0000000000007ECF                 jnz     loc_828B
.text:0000000000007ED5                 mov     ebx, 5Ch ; '\'
.text:0000000000007EDA                 nop     word ptr [rax+rax+00h]
.text:0000000000007EE0
.text:0000000000007EE0 loc_7EE0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000007EE0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000007EE0                 xor     r12d, r12d
.text:0000000000007EE3
.text:0000000000007EE3 loc_7EE3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000007EE3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000007EE3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000007EE8                 setz    dl
.text:0000000000007EEB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000007EF0                 mov     eax, edx
.text:0000000000007EF2                 jnz     loc_8748
.text:0000000000007EF8                 mov     eax, r8d
.text:0000000000007EFB                 xor     eax, 1
.text:0000000000007EFE                 and     al, dl
.text:0000000000007F00                 jz      short loc_7F31
.text:0000000000007F02                 cmp     r13, r15
.text:0000000000007F05                 jbe     short loc_7F0C
.text:0000000000007F07                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000007F0C
.text:0000000000007F0C loc_7F0C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000007F0C                 lea     rdx, [r15+1]
.text:0000000000007F10                 cmp     r13, rdx
.text:0000000000007F13                 jbe     short loc_7F1B
.text:0000000000007F15                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000007F1B
.text:0000000000007F1B loc_7F1B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000007F1B                 lea     rdx, [r15+2]
.text:0000000000007F1F                 cmp     r13, rdx
.text:0000000000007F22                 jbe     short loc_7F2A
.text:0000000000007F24                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000007F2A
.text:0000000000007F2A loc_7F2A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000007F2A                 add     r15, 3
.text:0000000000007F2E                 mov     r8d, eax
.text:0000000000007F31
.text:0000000000007F31 loc_7F31:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000007F31                 cmp     r13, r15
.text:0000000000007F34                 jbe     short loc_7F3B
.text:0000000000007F36                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000007F3B
.text:0000000000007F3B loc_7F3B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000007F3B                 add     r15, 1
.text:0000000000007F3F                 add     rbp, 1
.text:0000000000007F43                 jmp     loc_7DD0
.text:0000000000007F43 ; ---------------------------------------------------------------------------
.text:0000000000007F48                 align 10h
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007F50                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007F50                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000007F55                 jnz     loc_8123
.text:0000000000007F5B                 xor     edx, edx
.text:0000000000007F5D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000007F62                 jz      loc_7E7B
.text:0000000000007F68                 add     rbp, 1
.text:0000000000007F6C                 jmp     loc_7C28
.text:0000000000007F6C ; ---------------------------------------------------------------------------
.text:0000000000007F71                 align 8
.text:0000000000007F78
.text:0000000000007F78 loc_7F78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007F78                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007F78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000007F7D                 setz    dl
.text:0000000000007F80                 xor     eax, eax
.text:0000000000007F82                 jmp     loc_7D68
.text:0000000000007F82 ; ---------------------------------------------------------------------------
.text:0000000000007F87                 align 10h
.text:0000000000007F90
.text:0000000000007F90 loc_7F90:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007F90                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007F90                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000007F95                 mov     ebx, 61h ; 'a'
.text:0000000000007F9A                 jmp     loc_7E74
.text:0000000000007F9A ; ---------------------------------------------------------------------------
.text:0000000000007F9F                 align 20h
.text:0000000000007FA0
.text:0000000000007FA0 loc_7FA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007FA0                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007FA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000007FA5                 setz    dl
.text:0000000000007FA8
.text:0000000000007FA8 loc_7FA8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000007FA8                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000007FA8                 test    rbp, rbp
.text:0000000000007FAB                 jnz     loc_7D5C
.text:0000000000007FB1
.text:0000000000007FB1 loc_7FB1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000007FB1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000007FB1                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000007FB6                 and     al, dl
.text:0000000000007FB8                 jz      loc_7D68
.text:0000000000007FBE
.text:0000000000007FBE loc_7FBE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000007FBE                 mov     rbp, r11
.text:0000000000007FC1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000007FC9                 jmp     loc_86C9
.text:0000000000007FC9 ; ---------------------------------------------------------------------------
.text:0000000000007FCE                 align 10h
.text:0000000000007FD0
.text:0000000000007FD0 loc_7FD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007FD0                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007FD0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000007FD5                 setz    dl
.text:0000000000007FD8                 xor     r12d, r12d
.text:0000000000007FDB                 jmp     short loc_7FB1
.text:0000000000007FDB ; ---------------------------------------------------------------------------
.text:0000000000007FDD                 align 20h
.text:0000000000007FE0
.text:0000000000007FE0 loc_7FE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007FE0                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007FE0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000007FE5                 mov     ebx, 20h ; ' '
.text:0000000000007FEA                 setz    dl
.text:0000000000007FED                 jmp     short loc_7FB1
.text:0000000000007FED ; ---------------------------------------------------------------------------
.text:0000000000007FEF                 align 10h
.text:0000000000007FF0
.text:0000000000007FF0 loc_7FF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000007FF0                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000007FF0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000007FF5                 mov     ebx, 72h ; 'r'
.text:0000000000007FFA                 jmp     loc_7E62
.text:0000000000007FFA ; ---------------------------------------------------------------------------
.text:0000000000007FFF                 align 20h
.text:0000000000008000
.text:0000000000008000 loc_8000:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008000                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000008000                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000008005                 mov     ebx, 66h ; 'f'
.text:000000000000800A                 jmp     loc_7E74
.text:000000000000800A ; ---------------------------------------------------------------------------
.text:000000000000800F                 align 10h
.text:0000000000008010
.text:0000000000008010 loc_8010:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008010                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000008010                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000008015                 mov     ebx, 76h ; 'v'
.text:000000000000801A                 jmp     loc_7E74
.text:000000000000801A ; ---------------------------------------------------------------------------
.text:000000000000801F                 align 20h
.text:0000000000008020
.text:0000000000008020 loc_8020:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008020                                         ; DATA XREF: .rodata:jpt_7D2E↓o
.text:0000000000008020                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000008025                 mov     ebx, 6Eh ; 'n'
.text:000000000000802A                 jmp     loc_7E62
.text:000000000000802A ; ---------------------------------------------------------------------------
.text:000000000000802F                 align 10h
.text:0000000000008030
.text:0000000000008030 def_80BA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000008030                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000008030                                         ; DATA XREF: ...
.text:0000000000008030                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000008033                 nop     dword ptr [rax+rax+00h]
.text:0000000000008038
.text:0000000000008038 def_7D2E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000008038                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000008038                                         ; DATA XREF: ...
.text:0000000000008038                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000803E                 jnz     loc_83E8
.text:0000000000008044                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000008049                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000804E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000008053                 call    ___ctype_b_loc
.text:0000000000008058                 mov     rcx, [rax]
.text:000000000000805B                 movzx   edx, bl
.text:000000000000805E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008064                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000806A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000806F                 mov     edi, 1
.text:0000000000008074                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000008078                 and     ax, 4000h
.text:000000000000807C                 setnz   r12b
.text:0000000000008080                 setz    al
.text:0000000000008083                 and     al, [rsp+0E8h+var_DB]
.text:0000000000008087
.text:0000000000008087 loc_8087:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000008087                 test    al, al
.text:0000000000008089                 jnz     loc_8A21
.text:000000000000808F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008094                 setz    dl
.text:0000000000008097                 jmp     loc_7D68
.text:0000000000008097 ; ---------------------------------------------------------------------------
.text:000000000000809C                 align 20h
.text:00000000000080A0
.text:00000000000080A0 loc_80A0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000080A0                 movzx   ebx, byte ptr [r9]
.text:00000000000080A4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000080A7                 ja      short def_80BA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000080A9                 lea     rcx, jpt_80BA
.text:00000000000080B0                 movzx   edx, bl
.text:00000000000080B3                 movsxd  rax, ds:(jpt_80BA - 0DD48h)[rcx+rdx*4]
.text:00000000000080B7                 add     rax, rcx
.text:00000000000080BA                 jmp     rax             ; switch jump
.text:00000000000080BA ; ---------------------------------------------------------------------------
.text:00000000000080BC                 align 20h
.text:00000000000080C0
.text:00000000000080C0 loc_80C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000080C0                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000080C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000080C3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000080C8                 jnz     loc_7EBE
.text:00000000000080CE                 xchg    ax, ax
.text:00000000000080D0
.text:00000000000080D0 loc_80D0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000080D0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000080D0                 mov     edx, 5Ch ; '\'
.text:00000000000080D5                 mov     ebx, 5Ch ; '\'
.text:00000000000080DA                 jmp     loc_7E74
.text:00000000000080DA ; ---------------------------------------------------------------------------
.text:00000000000080DF                 align 20h
.text:00000000000080E0
.text:00000000000080E0 loc_80E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000080E0                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000080E0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000080E5                 xor     r10d, r10d
.text:00000000000080E8                 mov     ebx, 66h ; 'f'
.text:00000000000080ED                 jmp     loc_7E74
.text:00000000000080ED ; ---------------------------------------------------------------------------
.text:00000000000080F2                 align 8
.text:00000000000080F8
.text:00000000000080F8 loc_80F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000080F8                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000080F8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000080FD                 xor     r10d, r10d
.text:0000000000008100                 mov     ebx, 6Eh ; 'n'
.text:0000000000008105                 jmp     loc_7E62
.text:0000000000008105 ; ---------------------------------------------------------------------------
.text:000000000000810A                 align 10h
.text:0000000000008110
.text:0000000000008110 loc_8110:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008110                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008110                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000008115                 jmp     loc_7EE0
.text:0000000000008115 ; ---------------------------------------------------------------------------
.text:000000000000811A                 align 20h
.text:0000000000008120
.text:0000000000008120 loc_8120:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008120                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008120                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000008123
.text:0000000000008123 loc_8123:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000008123                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008128                 setz    dl
.text:000000000000812B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008130                 jnz     loc_8CCA
.text:0000000000008136                 mov     eax, r8d
.text:0000000000008139                 mov     rcx, r15
.text:000000000000813C                 xor     eax, 1
.text:000000000000813F                 and     al, dl
.text:0000000000008141                 jz      short loc_8170
.text:0000000000008143                 cmp     r13, r15
.text:0000000000008146                 jbe     short loc_814D
.text:0000000000008148                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000814D
.text:000000000000814D loc_814D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000814D                 lea     rcx, [r15+1]
.text:0000000000008151                 cmp     r13, rcx
.text:0000000000008154                 jbe     short loc_815C
.text:0000000000008156                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000815C
.text:000000000000815C loc_815C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000815C                 lea     rcx, [r15+2]
.text:0000000000008160                 cmp     r13, rcx
.text:0000000000008163                 ja      loc_8799
.text:0000000000008169
.text:0000000000008169 loc_8169:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000008169                 lea     rcx, [r15+3]
.text:000000000000816D                 mov     r8d, eax
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000008170                 cmp     r13, rcx
.text:0000000000008173                 jbe     short loc_817A
.text:0000000000008175                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000817A
.text:000000000000817A loc_817A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000817A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000817F                 lea     r15, [rcx+1]
.text:0000000000008183                 jz      loc_8789
.text:0000000000008189                 lea     rax, [rbp+1]
.text:000000000000818D                 cmp     rax, r11
.text:0000000000008190                 jnb     short loc_81AB
.text:0000000000008192                 mov     rax, [rsp+0E8h+s]
.text:0000000000008197                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000819C                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000081A0                 sub     eax, 30h ; '0'
.text:00000000000081A3                 cmp     al, 9
.text:00000000000081A5                 jbe     loc_89D9
.text:00000000000081AB
.text:00000000000081AB loc_81AB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000081AB                 mov     eax, r12d
.text:00000000000081AE                 mov     ebx, 30h ; '0'
.text:00000000000081B3                 xor     r12d, r12d
.text:00000000000081B6                 jmp     loc_7D68
.text:00000000000081B6 ; ---------------------------------------------------------------------------
.text:00000000000081BB                 align 20h
.text:00000000000081C0
.text:00000000000081C0 loc_81C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000081C0                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000081C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000081C5                 mov     r12d, r10d
.text:00000000000081C8                 setz    dl
.text:00000000000081CB                 xor     r10d, r10d
.text:00000000000081CE                 xor     eax, eax
.text:00000000000081D0                 jmp     loc_7D68
.text:00000000000081D0 ; ---------------------------------------------------------------------------
.text:00000000000081D5                 align 8
.text:00000000000081D8
.text:00000000000081D8 loc_81D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000081D8                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000081D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000081DD                 setz    dl
.text:00000000000081E0                 xor     r10d, r10d
.text:00000000000081E3                 jmp     loc_7FA8
.text:00000000000081E3 ; ---------------------------------------------------------------------------
.text:00000000000081E8                 align 10h
.text:00000000000081F0
.text:00000000000081F0 loc_81F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000081F0                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:00000000000081F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000081F5                 setz    dl
.text:00000000000081F8                 xor     r10d, r10d
.text:00000000000081FB                 xor     r12d, r12d
.text:00000000000081FE                 jmp     loc_7FB1
.text:00000000000081FE ; ---------------------------------------------------------------------------
.text:0000000000008203                 align 8
.text:0000000000008208
.text:0000000000008208 loc_8208:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008208                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008208                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000820D                 mov     r12d, r10d
.text:0000000000008210                 mov     ebx, 20h ; ' '
.text:0000000000008215                 setz    dl
.text:0000000000008218                 xor     r10d, r10d
.text:000000000000821B                 jmp     loc_7FB1
.text:0000000000008220 ; ---------------------------------------------------------------------------
.text:0000000000008220
.text:0000000000008220 loc_8220:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008220                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008220                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000008225                 xor     r10d, r10d
.text:0000000000008228                 mov     ebx, 72h ; 'r'
.text:000000000000822D                 jmp     loc_7E62
.text:000000000000822D ; ---------------------------------------------------------------------------
.text:0000000000008232                 align 8
.text:0000000000008238
.text:0000000000008238 loc_8238:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008238                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008238                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000823D                 jmp     loc_7EE0
.text:000000000000823D ; ---------------------------------------------------------------------------
.text:0000000000008242                 align 8
.text:0000000000008248
.text:0000000000008248 loc_8248:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008248                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008248                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000824D                 xor     r10d, r10d
.text:0000000000008250                 mov     ebx, 74h ; 't'
.text:0000000000008255                 jmp     loc_7E62
.text:0000000000008255 ; ---------------------------------------------------------------------------
.text:000000000000825A                 align 20h
.text:0000000000008260
.text:0000000000008260 loc_8260:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000008260                                         ; DATA XREF: .rodata:jpt_80BA↓o
.text:0000000000008260                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000008265                 jmp     loc_7EE0
.text:0000000000008265 ; ---------------------------------------------------------------------------
.text:000000000000826A                 align 10h
.text:0000000000008270
.text:0000000000008270 loc_8270:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000008270                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000008270                 xor     r10d, r10d
.text:0000000000008273                 jmp     loc_7D10
.text:0000000000008273 ; ---------------------------------------------------------------------------
.text:0000000000008278                 align 20h
.text:0000000000008280
.text:0000000000008280 loc_8280:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000008280                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008285                 jnz     loc_8BF0
.text:000000000000828B
.text:000000000000828B loc_828B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000828B                 add     rbp, 1
.text:000000000000828F                 mov     eax, r8d
.text:0000000000008292                 xor     r12d, r12d
.text:0000000000008295                 mov     ebx, 5Ch ; '\'
.text:000000000000829A                 jmp     loc_7DAC
.text:000000000000829A ; ---------------------------------------------------------------------------
.text:000000000000829F                 align 20h
.text:00000000000082A0
.text:00000000000082A0 loc_82A0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000082A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000082A5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000082AA                 mov     r12d, r8d
.text:00000000000082AD                 mov     rbp, r11
.text:00000000000082B0                 setz    dl
.text:00000000000082B3                 mov     eax, ebx
.text:00000000000082B5                 test    r15, r15
.text:00000000000082B8                 setz    cl
.text:00000000000082BB                 and     eax, edx
.text:00000000000082BD                 and     al, cl
.text:00000000000082BF                 jnz     loc_8D26
.text:00000000000082C5                 mov     eax, ebx
.text:00000000000082C7                 xor     eax, 1
.text:00000000000082CA                 and     dl, al
.text:00000000000082CC                 jz      loc_8C3C
.text:00000000000082D2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000082D7                 jz      loc_8C3A
.text:00000000000082DD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000082E2                 jnz     loc_8CDD
.text:00000000000082E8                 test    r13, r13
.text:00000000000082EB                 setz    al
.text:00000000000082EE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000082F4                 setnz   dl
.text:00000000000082F7                 and     al, dl
.text:00000000000082F9                 jz      loc_8D1C
.text:00000000000082FF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008304
.text:0000000000008304 loc_8304:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000008304                 lea     rbx, aInvalidSSArgum+19h ; "'"
.text:000000000000830B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000830F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008317                 mov     r15d, 1
.text:000000000000831D                 mov     [rsp+0E8h+n], 1
.text:0000000000008326                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000832B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000008330                 mov     [rsp+0E8h+var_6C], al
.text:0000000000008334                 jmp     loc_7C13
.text:0000000000008334 ; ---------------------------------------------------------------------------
.text:0000000000008339                 align 20h
.text:0000000000008340
.text:0000000000008340 loc_8340:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000008340                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008345                 jnz     loc_8BF0
.text:000000000000834B                 test    r13, r13
.text:000000000000834E                 jz      loc_8750
.text:0000000000008354                 xor     edx, edx
.text:0000000000008356                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000835C                 jnz     loc_8750
.text:0000000000008362
.text:0000000000008362 loc_8362:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000008362                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000008362                 mov     [rsp+0E8h+var_98], r13
.text:0000000000008367                 add     r15, 3
.text:000000000000836B                 xor     eax, eax
.text:000000000000836D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000008372                 xor     r8d, r8d
.text:0000000000008375                 mov     r13, rdx
.text:0000000000008378                 mov     ebx, 27h ; '''
.text:000000000000837D                 jmp     loc_7D99
.text:000000000000837D ; ---------------------------------------------------------------------------
.text:0000000000008382                 align 8
.text:0000000000008388
.text:0000000000008388 loc_8388:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000008388                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000838D                 jz      short loc_83B0
.text:000000000000838F                 lea     rcx, [rbp+2]
.text:0000000000008393                 cmp     rcx, r11
.text:0000000000008396                 jnb     short loc_83B0
.text:0000000000008398                 mov     rax, [rsp+0E8h+s]
.text:000000000000839D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000083A2                 jz      loc_8B32
.text:00000000000083A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000083B0
.text:00000000000083B0 loc_83B0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000083B0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000083B0                 xor     edx, edx
.text:00000000000083B2                 xor     r12d, r12d
.text:00000000000083B5                 xor     eax, eax
.text:00000000000083B7                 mov     ebx, 3Fh ; '?'
.text:00000000000083BC                 jmp     loc_7D68
.text:00000000000083BC ; ---------------------------------------------------------------------------
.text:00000000000083C1                 align 8
.text:00000000000083C8
.text:00000000000083C8 loc_83C8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000083C8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000083CD                 jnz     loc_8BF0
.text:00000000000083D3                 xor     r12d, r12d
.text:00000000000083D6                 xor     eax, eax
.text:00000000000083D8                 mov     ebx, 3Fh ; '?'
.text:00000000000083DD                 jmp     loc_7D99
.text:00000000000083DD ; ---------------------------------------------------------------------------
.text:00000000000083E2                 align 8
.text:00000000000083E8
.text:00000000000083E8 loc_83E8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000083E8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000083F0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000083F4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000008400                 mov     [rsp+0E8h+ps], rax
.text:0000000000008405                 jnz     short loc_8434
.text:0000000000008407                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000840C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000008411                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000008416                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000841B                 call    _strlen
.text:0000000000008420                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000008426                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000842C                 mov     r11, rax
.text:000000000000842F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008434
.text:0000000000008434 loc_8434:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000008434                 lea     rax, [rsp+0E8h+wc]
.text:000000000000843C                 xor     ecx, ecx
.text:000000000000843E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000008442                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000008447                 mov     rbx, rcx
.text:000000000000844A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000008452                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000008457                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000845C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000008464                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000008469                 mov     [rsp+0E8h+var_78], r13
.text:000000000000846E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000008473
.text:0000000000008473 loc_8473:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000008473                 mov     rax, [rsp+0E8h+s]
.text:0000000000008478                 lea     r14, [rbp+rbx+0]
.text:000000000000847D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000008482                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000008487                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000848C                 lea     r13, [rax+r14]
.text:0000000000008490                 sub     rdx, r14
.text:0000000000008493                 mov     rsi, r13
.text:0000000000008496                 call    rpl_mbrtowc
.text:000000000000849B                 test    rax, rax
.text:000000000000849E                 mov     r15, rax
.text:00000000000084A1                 jz      short loc_84F1
.text:00000000000084A3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000084A7                 jz      loc_8AC5
.text:00000000000084AD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000084B1                 jz      loc_8A51
.text:00000000000084B7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000084BC                 setz    al
.text:00000000000084BF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000084C3                 jnz     loc_8660
.text:00000000000084C9
.text:00000000000084C9 loc_84C9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000084C9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000084C9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000084D0                 call    _iswprint
.text:00000000000084D5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000084DA                 test    eax, eax
.text:00000000000084DC                 mov     eax, 0
.text:00000000000084E1                 cmovz   r12d, eax
.text:00000000000084E5                 add     rbx, r15
.text:00000000000084E8                 call    _mbsinit
.text:00000000000084ED                 test    eax, eax
.text:00000000000084EF                 jz      short loc_8473
.text:00000000000084F1
.text:00000000000084F1 loc_84F1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000084F1                 mov     edx, r12d
.text:00000000000084F4                 mov     rdi, rbx
.text:00000000000084F7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000084FD                 xor     edx, 1
.text:0000000000008500                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000008505                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000850B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000850F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008517                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000851C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008521                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008526
.text:0000000000008526 loc_8526:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000008526                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000008526                 cmp     rdi, 1
.text:000000000000852A                 jbe     loc_8B2B
.text:0000000000008530
.text:0000000000008530 loc_8530:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000008530                 mov     rcx, rdi
.text:0000000000008533                 xor     esi, esi
.text:0000000000008535                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000853B                 add     rcx, rbp
.text:000000000000853E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000008543                 jmp     loc_85FE
.text:0000000000008543 ; ---------------------------------------------------------------------------
.text:0000000000008548                 align 10h
.text:0000000000008550
.text:0000000000008550 loc_8550:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000008550                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008555                 setz    al
.text:0000000000008558                 test    r9b, r9b
.text:000000000000855B                 jnz     loc_8A10
.text:0000000000008561                 mov     esi, r8d
.text:0000000000008564                 xor     esi, 1
.text:0000000000008567                 and     al, sil
.text:000000000000856A                 jz      short loc_859B
.text:000000000000856C                 cmp     r13, r15
.text:000000000000856F                 jbe     short loc_8576
.text:0000000000008571                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008576
.text:0000000000008576 loc_8576:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000008576                 lea     rsi, [r15+1]
.text:000000000000857A                 cmp     r13, rsi
.text:000000000000857D                 jbe     short loc_8585
.text:000000000000857F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000008585
.text:0000000000008585 loc_8585:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000008585                 lea     rsi, [r15+2]
.text:0000000000008589                 cmp     r13, rsi
.text:000000000000858C                 jbe     short loc_8594
.text:000000000000858E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000008594
.text:0000000000008594 loc_8594:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000008594                 add     r15, 3
.text:0000000000008598                 mov     r8d, eax
.text:000000000000859B
.text:000000000000859B loc_859B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000859B                 cmp     r13, r15
.text:000000000000859E                 jbe     short loc_85A5
.text:00000000000085A0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000085A5
.text:00000000000085A5 loc_85A5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000085A5                 lea     rax, [r15+1]
.text:00000000000085A9                 cmp     r13, rax
.text:00000000000085AC                 jbe     short loc_85BB
.text:00000000000085AE                 mov     eax, ebx
.text:00000000000085B0                 shr     al, 6
.text:00000000000085B3                 add     eax, 30h ; '0'
.text:00000000000085B6                 mov     [r14+r15+1], al
.text:00000000000085BB
.text:00000000000085BB loc_85BB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000085BB                 lea     rax, [r15+2]
.text:00000000000085BF                 cmp     r13, rax
.text:00000000000085C2                 jbe     short loc_85D4
.text:00000000000085C4                 mov     eax, ebx
.text:00000000000085C6                 shr     al, 3
.text:00000000000085C9                 and     eax, 7
.text:00000000000085CC                 add     eax, 30h ; '0'
.text:00000000000085CF                 mov     [r14+r15+2], al
.text:00000000000085D4
.text:00000000000085D4 loc_85D4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000085D4                 and     ebx, 7
.text:00000000000085D7                 add     rbp, 1
.text:00000000000085DB                 add     r15, 3
.text:00000000000085DF                 add     ebx, 30h ; '0'
.text:00000000000085E2                 cmp     rbp, rcx
.text:00000000000085E5                 jnb     loc_7DD0
.text:00000000000085EB                 mov     esi, edx
.text:00000000000085ED
.text:00000000000085ED loc_85ED:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000085ED                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000085ED                 cmp     r13, r15
.text:00000000000085F0                 jbe     short loc_85F6
.text:00000000000085F2                 mov     [r14+r15], bl
.text:00000000000085F6
.text:00000000000085F6 loc_85F6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000085F6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000085FA                 add     r15, 1
.text:00000000000085FE
.text:00000000000085FE loc_85FE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000085FE                 test    dl, dl
.text:0000000000008600                 jnz     loc_8550
.text:0000000000008606                 mov     eax, esi
.text:0000000000008608                 xor     eax, 1
.text:000000000000860B                 and     eax, r8d
.text:000000000000860E                 test    r10b, r10b
.text:0000000000008611                 jz      short loc_8621
.text:0000000000008613                 cmp     r13, r15
.text:0000000000008616                 jbe     short loc_861D
.text:0000000000008618                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000861D
.text:000000000000861D loc_861D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000861D                 add     r15, 1
.text:0000000000008621
.text:0000000000008621 loc_8621:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000008621                 add     rbp, 1
.text:0000000000008625                 cmp     rbp, rcx
.text:0000000000008628                 jnb     loc_7DAC
.text:000000000000862E                 test    al, al
.text:0000000000008630                 jz      loc_8A2E
.text:0000000000008636                 cmp     r13, r15
.text:0000000000008639                 jbe     short loc_8640
.text:000000000000863B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008640
.text:0000000000008640 loc_8640:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000008640                 lea     rax, [r15+1]
.text:0000000000008644                 cmp     r13, rax
.text:0000000000008647                 jbe     short loc_864F
.text:0000000000008649                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000864F
.text:000000000000864F loc_864F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000864F                 add     r15, 2
.text:0000000000008653                 xor     r10d, r10d
.text:0000000000008656                 xor     r8d, r8d
.text:0000000000008659                 jmp     short loc_85ED
.text:0000000000008659 ; ---------------------------------------------------------------------------
.text:000000000000865B                 align 20h
.text:0000000000008660
.text:0000000000008660 loc_8660:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000008660                 cmp     r15, 1
.text:0000000000008664                 jz      loc_84C9
.text:000000000000866A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000866F                 lea     rcx, [rdi+r15]
.text:0000000000008673                 lea     rdx, [rdi+r14+1]
.text:0000000000008678                 lea     r8, [rcx+r14]
.text:000000000000867C                 jmp     short loc_868D
.text:000000000000867C ; ---------------------------------------------------------------------------
.text:000000000000867E                 align 20h
.text:0000000000008680
.text:0000000000008680 loc_8680:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000008680                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000008680                 add     rdx, 1
.text:0000000000008684                 cmp     r8, rdx
.text:0000000000008687                 jz      loc_84C9
.text:000000000000868D
.text:000000000000868D loc_868D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000868D                 movzx   ecx, byte ptr [rdx]
.text:0000000000008690                 sub     ecx, 5Bh ; '['
.text:0000000000008693                 cmp     cl, 21h ; '!'
.text:0000000000008696                 ja      short loc_8680
.text:0000000000008698                 mov     esi, 1
.text:000000000000869D                 shl     rsi, cl
.text:00000000000086A0                 mov     rcx, rsi
.text:00000000000086A3                 mov     rsi, 20000002Bh
.text:00000000000086AD                 test    rcx, rsi
.text:00000000000086B0                 jz      short loc_8680
.text:00000000000086B2                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000086B7                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000086BC                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000086C1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000086C9
.text:00000000000086C9 loc_86C9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000086C9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000086C9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000086CE                 jz      short loc_86E0
.text:00000000000086D0                 test    al, al
.text:00000000000086D2                 mov     eax, 4
.text:00000000000086D7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000086DC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000086E0
.text:00000000000086E0 loc_86E0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000086E0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000086E0                 sub     rsp, 8
.text:00000000000086E4                 mov     rcx, rbp
.text:00000000000086E7                 mov     rsi, r13
.text:00000000000086EA                 push    [rsp+0F0h+var_88]
.text:00000000000086EE                 push    [rsp+0F8h+var_80]
.text:00000000000086F2                 mov     rdi, r14
.text:00000000000086F5                 push    0
.text:00000000000086F7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000086FF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000008704                 mov     rdx, [rsp+108h+s]
.text:0000000000008709                 and     r9d, 0FFFFFFFDh
.text:000000000000870D                 call    quotearg_buffer_restyled
.text:0000000000008712                 add     rsp, 20h
.text:0000000000008716                 mov     r15, rax
.text:0000000000008719
.text:0000000000008719 loc_8719:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000008719                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000008719                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000008721                 xor     rbx, fs:28h
.text:000000000000872A                 mov     rax, r15
.text:000000000000872D                 jnz     loc_8D33
.text:0000000000008733                 add     rsp, 0B8h
.text:000000000000873A                 pop     rbx
.text:000000000000873B                 pop     rbp
.text:000000000000873C                 pop     r12
.text:000000000000873E                 pop     r13
.text:0000000000008740                 pop     r14
.text:0000000000008742                 pop     r15
.text:0000000000008744                 retn
.text:0000000000008744 ; ---------------------------------------------------------------------------
.text:0000000000008745                 align 8
.text:0000000000008748
.text:0000000000008748 loc_8748:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000008748                 mov     rbp, r11
.text:000000000000874B                 jmp     loc_86C9
.text:0000000000008750 ; ---------------------------------------------------------------------------
.text:0000000000008750
.text:0000000000008750 loc_8750:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000008750                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000008750                 cmp     r13, r15
.text:0000000000008753                 jbe     short loc_875A
.text:0000000000008755                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000875A
.text:000000000000875A loc_875A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000875A                 lea     rax, [r15+1]
.text:000000000000875E                 cmp     r13, rax
.text:0000000000008761                 jbe     short loc_8769
.text:0000000000008763                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000008769
.text:0000000000008769 loc_8769:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000008769                 lea     rax, [r15+2]
.text:000000000000876D                 cmp     r13, rax
.text:0000000000008770                 jbe     loc_8D62
.text:0000000000008776                 mov     rdx, r13
.text:0000000000008779                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000877F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008784                 jmp     loc_8362
.text:0000000000008789 ; ---------------------------------------------------------------------------
.text:0000000000008789
.text:0000000000008789 loc_8789:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000008789                 mov     eax, r12d
.text:000000000000878C                 mov     ebx, 30h ; '0'
.text:0000000000008791                 xor     r12d, r12d
.text:0000000000008794                 jmp     loc_7D99
.text:0000000000008799 ; ---------------------------------------------------------------------------
.text:0000000000008799
.text:0000000000008799 loc_8799:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000008799                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000879F                 jmp     loc_8169
.text:00000000000087A4 ; ---------------------------------------------------------------------------
.text:00000000000087A4
.text:00000000000087A4 loc_87A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000087A4                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:00000000000087A4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:00000000000087A6                 jnz     loc_7BD3        ; jumptable 00000000000121F1 case 1
.text:00000000000087AC                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000087B1
.text:00000000000087B1 loc_87B1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:00000000000087B1                 test    r13, r13
.text:00000000000087B4                 jnz     loc_8D4A
.text:00000000000087BA                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:00000000000087C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000087CA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000087CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000087D4                 xor     r12d, r12d
.text:00000000000087D7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000087DC                 mov     [rsp+0E8h+n], 1
.text:00000000000087E5                 mov     [rsp+0E8h+s2], rax
.text:00000000000087EA                 mov     r15d, 1
.text:00000000000087F0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000087F8                 jmp     loc_7C13
.text:00000000000087F8 ; ---------------------------------------------------------------------------
.text:00000000000087FD                 align 20h
.text:0000000000008800
.text:0000000000008800 loc_8800:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008800                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:0000000000008800                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000008802                 jnz     loc_8BFD
.text:0000000000008808                 test    r13, r13
.text:000000000000880B                 jz      loc_8A36
.text:0000000000008811                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000008815                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000881A                 xor     r12d, r12d
.text:000000000000881D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008822                 mov     [rsp+0E8h+var_98], 0
.text:000000000000882B
.text:000000000000882B loc_882B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000882B                 lea     rax, unk_DAB3
.text:0000000000008832                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008837                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000883C                 mov     [rsp+0E8h+n], 1
.text:0000000000008845                 mov     r15d, 1
.text:000000000000884B                 mov     [rsp+0E8h+s2], rax
.text:0000000000008850                 jmp     loc_7C13
.text:0000000000008855 ; ---------------------------------------------------------------------------
.text:0000000000008855
.text:0000000000008855 loc_8855:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008855                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:0000000000008855                 lea     rax, unk_DAB3   ; jumptable 00000000000121F1 case 6
.text:000000000000885C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008861                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008866                 xor     r12d, r12d
.text:0000000000008869                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008872                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008877                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000887C                 mov     [rsp+0E8h+n], 1
.text:0000000000008885                 xor     r15d, r15d
.text:0000000000008888                 mov     [rsp+0E8h+s2], rax
.text:000000000000888D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000008895                 jmp     loc_7C13
.text:000000000000889A ; ---------------------------------------------------------------------------
.text:000000000000889A
.text:000000000000889A loc_889A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000889A                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:000000000000889A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000889F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000088A4                 xor     r12d, r12d
.text:00000000000088A7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000088B0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000088B5                 xor     r15d, r15d
.text:00000000000088B8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000088BD                 mov     [rsp+0E8h+n], 0
.text:00000000000088C6                 mov     [rsp+0E8h+s2], 0
.text:00000000000088CF                 jmp     loc_7C13
.text:00000000000088D4 ; ---------------------------------------------------------------------------
.text:00000000000088D4
.text:00000000000088D4 loc_88D4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000088D4                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:00000000000088D4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000088D9                 jz      short loc_8931
.text:00000000000088DB                 lea     rsi, asc_DAB5   ; "`"
.text:00000000000088E2                 xor     edi, edi        ; domainname
.text:00000000000088E4                 mov     edx, 5          ; category
.text:00000000000088E9                 call    _dcgettext
.text:00000000000088EE                 mov     rcx, rax
.text:00000000000088F1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000088F6                 lea     rax, asc_DAB5   ; "`"
.text:00000000000088FD                 cmp     rcx, rax
.text:0000000000008900                 jz      loc_8C9E
.text:0000000000008906
.text:0000000000008906 loc_8906:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000008906                 lea     rsi, aInvalidSSArgum+19h ; msgid
.text:000000000000890D                 xor     edi, edi        ; domainname
.text:000000000000890F                 mov     edx, 5          ; category
.text:0000000000008914                 call    _dcgettext
.text:0000000000008919                 mov     rcx, rax
.text:000000000000891C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000008921                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000008928                 cmp     rcx, rax
.text:000000000000892B                 jz      loc_8CB4
.text:0000000000008931
.text:0000000000008931 loc_8931:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000008931                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000008931                 xor     r15d, r15d
.text:0000000000008934                 test    ebx, ebx
.text:0000000000008936                 jz      loc_8AFD
.text:000000000000893C
.text:000000000000893C loc_893C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000893C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000893C                 test    ebx, ebx
.text:000000000000893E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000008943                 setnz   [rsp+0E8h+var_D9]
.text:0000000000008948                 xor     r12d, r12d
.text:000000000000894B                 mov     rdi, rbx        ; s
.text:000000000000894E                 call    _strlen
.text:0000000000008953                 mov     [rsp+0E8h+s2], rbx
.text:0000000000008958                 mov     [rsp+0E8h+n], rax
.text:000000000000895D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008962                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008967                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008970                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008975                 jmp     loc_7C13
.text:000000000000897A ; ---------------------------------------------------------------------------
.text:000000000000897A
.text:000000000000897A loc_897A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000897A                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:000000000000897A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000897F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008984                 xor     r12d, r12d
.text:0000000000008987                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008990                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000008995                 xor     r15d, r15d
.text:0000000000008998                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000899D                 mov     [rsp+0E8h+n], 0
.text:00000000000089A6                 mov     [rsp+0E8h+s2], 0
.text:00000000000089AF                 jmp     loc_7C13
.text:00000000000089B4 ; ---------------------------------------------------------------------------
.text:00000000000089B4
.text:00000000000089B4 loc_89B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000089B4                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:00000000000089B4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000089B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000089BE                 xor     r12d, r12d
.text:00000000000089C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000089CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000089CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000089D4                 jmp     loc_7BF3
.text:00000000000089D9 ; ---------------------------------------------------------------------------
.text:00000000000089D9
.text:00000000000089D9 loc_89D9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000089D9                 cmp     r13, r15
.text:00000000000089DC                 jbe     short loc_89E3
.text:00000000000089DE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000089E3
.text:00000000000089E3 loc_89E3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000089E3                 lea     rax, [rcx+2]
.text:00000000000089E7                 cmp     r13, rax
.text:00000000000089EA                 jbe     short loc_89F2
.text:00000000000089EC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000089F2
.text:00000000000089F2 loc_89F2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000089F2                 mov     eax, r12d
.text:00000000000089F5                 lea     r15, [rcx+3]
.text:00000000000089F9                 xor     r12d, r12d
.text:00000000000089FC                 mov     ebx, 30h ; '0'
.text:0000000000008A01                 jmp     loc_7D68
.text:0000000000008A01 ; ---------------------------------------------------------------------------
.text:0000000000008A06                 align 10h
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000008A10                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008A15                 mov     rbp, r11
.text:0000000000008A18                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008A1C                 jmp     loc_86C9
.text:0000000000008A21 ; ---------------------------------------------------------------------------
.text:0000000000008A21
.text:0000000000008A21 loc_8A21:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000008A21                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008A26                 xor     r12d, r12d
.text:0000000000008A29                 jmp     loc_8530
.text:0000000000008A2E ; ---------------------------------------------------------------------------
.text:0000000000008A2E
.text:0000000000008A2E loc_8A2E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000008A2E                 xor     r10d, r10d
.text:0000000000008A31                 jmp     loc_85ED
.text:0000000000008A36 ; ---------------------------------------------------------------------------
.text:0000000000008A36
.text:0000000000008A36 loc_8A36:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000008A36                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008A3F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008A44                 xor     r12d, r12d
.text:0000000000008A47                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008A4C                 jmp     loc_882B
.text:0000000000008A51 ; ---------------------------------------------------------------------------
.text:0000000000008A51
.text:0000000000008A51 loc_8A51:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000008A51                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008A56                 mov     rsi, r14
.text:0000000000008A59                 mov     rcx, r13
.text:0000000000008A5C                 mov     rax, rbx
.text:0000000000008A5F                 mov     rdi, rbx
.text:0000000000008A62                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000008A68                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000008A6D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000008A75                 cmp     rsi, r11
.text:0000000000008A78                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000008A7E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008A86                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000008A8B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008A90                 jnb     short loc_8AB8
.text:0000000000008A92                 cmp     byte ptr [rcx], 0
.text:0000000000008A95                 jnz     short loc_8AA7
.text:0000000000008A97                 jmp     short loc_8AB8
.text:0000000000008A97 ; ---------------------------------------------------------------------------
.text:0000000000008A99                 align 20h
.text:0000000000008AA0
.text:0000000000008AA0 loc_8AA0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000008AA0                 cmp     byte ptr [r9+rax], 0
.text:0000000000008AA5                 jz      short loc_8AB5
.text:0000000000008AA7
.text:0000000000008AA7 loc_8AA7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000008AA7                 add     rax, 1
.text:0000000000008AAB                 lea     rdx, [rbp+rax+0]
.text:0000000000008AB0                 cmp     r11, rdx
.text:0000000000008AB3                 ja      short loc_8AA0
.text:0000000000008AB5
.text:0000000000008AB5 loc_8AB5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000008AB5                 mov     rdi, rax
.text:0000000000008AB8
.text:0000000000008AB8 loc_8AB8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000008AB8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000008AB8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008ABD                 xor     r12d, r12d
.text:0000000000008AC0                 jmp     loc_8526
.text:0000000000008AC5 ; ---------------------------------------------------------------------------
.text:0000000000008AC5
.text:0000000000008AC5 loc_8AC5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000008AC5                 mov     rdi, rbx
.text:0000000000008AC8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000008ACE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000008AD3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000008AD9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000008AE1                 xor     r12d, r12d
.text:0000000000008AE4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000008AE9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000008AEE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000008AF3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000008AF8                 jmp     loc_8526
.text:0000000000008AFD ; ---------------------------------------------------------------------------
.text:0000000000008AFD
.text:0000000000008AFD loc_8AFD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000008AFD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000008B02                 movzx   eax, byte ptr [rdx]
.text:0000000000008B05                 test    al, al
.text:0000000000008B07                 jz      loc_893C
.text:0000000000008B0D                 nop     dword ptr [rax]
.text:0000000000008B10
.text:0000000000008B10 loc_8B10:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000008B10                 cmp     r13, r15
.text:0000000000008B13                 jbe     short loc_8B19
.text:0000000000008B15                 mov     [r14+r15], al
.text:0000000000008B19
.text:0000000000008B19 loc_8B19:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000008B19                 add     r15, 1
.text:0000000000008B1D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000008B22                 test    al, al
.text:0000000000008B24                 jnz     short loc_8B10
.text:0000000000008B26                 jmp     loc_893C
.text:0000000000008B2B ; ---------------------------------------------------------------------------
.text:0000000000008B2B
.text:0000000000008B2B loc_8B2B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000008B2B                 mov     eax, edx
.text:0000000000008B2D                 jmp     loc_8087
.text:0000000000008B32 ; ---------------------------------------------------------------------------
.text:0000000000008B32
.text:0000000000008B32 loc_8B32:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000008B32                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000008B36                 cmp     bl, 3Eh ; '>'
.text:0000000000008B39                 ja      loc_83B0
.text:0000000000008B3F                 mov     rax, 7000A38200000000h
.text:0000000000008B49                 bt      rax, rbx
.text:0000000000008B4D                 jnb     loc_83B0
.text:0000000000008B53                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008B58                 jnz     loc_8D42
.text:0000000000008B5E                 cmp     r13, r15
.text:0000000000008B61                 jbe     short loc_8B68
.text:0000000000008B63                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000008B68
.text:0000000000008B68 loc_8B68:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000008B68                 lea     rax, [r15+1]
.text:0000000000008B6C                 cmp     r13, rax
.text:0000000000008B6F                 jbe     short loc_8B77
.text:0000000000008B71                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000008B77
.text:0000000000008B77 loc_8B77:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000008B77                 lea     rax, [r15+2]
.text:0000000000008B7B                 cmp     r13, rax
.text:0000000000008B7E                 jbe     short loc_8B86
.text:0000000000008B80                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000008B86
.text:0000000000008B86 loc_8B86:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000008B86                 lea     rax, [r15+3]
.text:0000000000008B8A                 cmp     r13, rax
.text:0000000000008B8D                 jbe     short loc_8B95
.text:0000000000008B8F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000008B95
.text:0000000000008B95 loc_8B95:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000008B95                 add     r15, 4
.text:0000000000008B99                 xor     edx, edx
.text:0000000000008B9B                 xor     r12d, r12d
.text:0000000000008B9E                 xor     eax, eax
.text:0000000000008BA0                 mov     rbp, rcx
.text:0000000000008BA3                 jmp     loc_7D68
.text:0000000000008BA8 ; ---------------------------------------------------------------------------
.text:0000000000008BA8
.text:0000000000008BA8 loc_8BA8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008BA8                                         ; DATA XREF: .rodata:jpt_7BD1↓o
.text:0000000000008BA8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000008BAA                 jz      loc_8D38
.text:0000000000008BB0                 lea     rax, aInvalidSSArgum+19h ; "'"
.text:0000000000008BB7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008BBC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008BC1                 xor     r12d, r12d
.text:0000000000008BC4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008BCD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008BD2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008BD7                 mov     [rsp+0E8h+n], 1
.text:0000000000008BE0                 xor     r15d, r15d
.text:0000000000008BE3                 mov     [rsp+0E8h+s2], rax
.text:0000000000008BE8                 jmp     loc_7C13
.text:0000000000008BE8 ; ---------------------------------------------------------------------------
.text:0000000000008BED                 align 10h
.text:0000000000008BF0
.text:0000000000008BF0 loc_8BF0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000008BF0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000008BF0                 mov     rbp, r11
.text:0000000000008BF3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000008BF8                 jmp     loc_86C9
.text:0000000000008BFD ; ---------------------------------------------------------------------------
.text:0000000000008BFD
.text:0000000000008BFD loc_8BFD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000008BFD                 lea     rax, unk_DAB3
.text:0000000000008C04                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008C09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008C0E                 xor     r12d, r12d
.text:0000000000008C11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008C1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008C1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000008C24                 mov     [rsp+0E8h+n], 1
.text:0000000000008C2D                 xor     r15d, r15d
.text:0000000000008C30                 mov     [rsp+0E8h+s2], rax
.text:0000000000008C35                 jmp     loc_7C13
.text:0000000000008C3A ; ---------------------------------------------------------------------------
.text:0000000000008C3A
.text:0000000000008C3A loc_8C3A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000008C3A                 mov     eax, edx
.text:0000000000008C3C
.text:0000000000008C3C loc_8C3C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000008C3C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000008C3C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000008C41                 test    rbx, rbx
.text:0000000000008C44                 jz      short loc_8C72
.text:0000000000008C46                 test    al, al
.text:0000000000008C48                 jz      short loc_8C72
.text:0000000000008C4A                 movzx   ecx, byte ptr [rbx]
.text:0000000000008C4D                 mov     rax, rbx
.text:0000000000008C50                 test    cl, cl
.text:0000000000008C52                 jz      short loc_8C72
.text:0000000000008C54                 mov     rdx, r15
.text:0000000000008C57                 sub     rax, r15
.text:0000000000008C5A
.text:0000000000008C5A loc_8C5A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000008C5A                 cmp     r13, rdx
.text:0000000000008C5D                 jbe     short loc_8C63
.text:0000000000008C5F                 mov     [r14+rdx], cl
.text:0000000000008C63
.text:0000000000008C63 loc_8C63:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000008C63                 add     rdx, 1
.text:0000000000008C67                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000008C6B                 test    cl, cl
.text:0000000000008C6D                 jnz     short loc_8C5A
.text:0000000000008C6F                 mov     r15, rdx
.text:0000000000008C72
.text:0000000000008C72 loc_8C72:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000008C72                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000008C72                 cmp     r13, r15
.text:0000000000008C75                 jbe     loc_8719
.text:0000000000008C7B                 mov     byte ptr [r14+r15], 0
.text:0000000000008C80                 jmp     loc_8719
.text:0000000000008C85 ; ---------------------------------------------------------------------------
.text:0000000000008C85
.text:0000000000008C85 loc_8C85:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000008C85                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008C8A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008C8F                 mov     rbp, r11
.text:0000000000008C92                 setz    al
.text:0000000000008C95                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008C99                 jmp     loc_86C9
.text:0000000000008C9E ; ---------------------------------------------------------------------------
.text:0000000000008C9E
.text:0000000000008C9E loc_8C9E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000008C9E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000008CA2                 mov     rdi, rcx
.text:0000000000008CA5                 call    gettext_quote
.text:0000000000008CAA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000008CAF                 jmp     loc_8906
.text:0000000000008CB4 ; ---------------------------------------------------------------------------
.text:0000000000008CB4
.text:0000000000008CB4 loc_8CB4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000008CB4                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000008CB8                 mov     rdi, rcx
.text:0000000000008CBB                 call    gettext_quote
.text:0000000000008CC0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000008CC5                 jmp     loc_8931
.text:0000000000008CCA ; ---------------------------------------------------------------------------
.text:0000000000008CCA
.text:0000000000008CCA loc_8CCA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000008CCA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000008CCF                 mov     rbp, r11
.text:0000000000008CD2                 mov     eax, edx
.text:0000000000008CD4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000008CD8                 jmp     loc_86C9
.text:0000000000008CDD ; ---------------------------------------------------------------------------
.text:0000000000008CDD
.text:0000000000008CDD loc_8CDD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000008CDD                 sub     rsp, 8
.text:0000000000008CE1                 mov     r8d, 5
.text:0000000000008CE7                 mov     rcx, r11
.text:0000000000008CEA                 push    [rsp+0F0h+var_88]
.text:0000000000008CEE                 push    [rsp+0F8h+var_80]
.text:0000000000008CF2                 mov     rdi, r14
.text:0000000000008CF5                 push    [rsp+100h+var_C8]
.text:0000000000008CF9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000008D01                 mov     rdx, [rsp+108h+s]
.text:0000000000008D06                 mov     rsi, [rsp+108h+var_98]
.text:0000000000008D0B                 call    quotearg_buffer_restyled
.text:0000000000008D10                 add     rsp, 20h
.text:0000000000008D14                 mov     r15, rax
.text:0000000000008D17                 jmp     loc_8719
.text:0000000000008D1C ; ---------------------------------------------------------------------------
.text:0000000000008D1C
.text:0000000000008D1C loc_8D1C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000008D1C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000008D21                 jmp     loc_8C3C
.text:0000000000008D26 ; ---------------------------------------------------------------------------
.text:0000000000008D26
.text:0000000000008D26 loc_8D26:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000008D26                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008D2E                 jmp     loc_86C9
.text:0000000000008D33 ; ---------------------------------------------------------------------------
.text:0000000000008D33
.text:0000000000008D33 loc_8D33:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000008D33                 call    ___stack_chk_fail
.text:0000000000008D38 ; ---------------------------------------------------------------------------
.text:0000000000008D38
.text:0000000000008D38 loc_8D38:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000008D38                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008D3D                 jmp     loc_87B1
.text:0000000000008D42 ; ---------------------------------------------------------------------------
.text:0000000000008D42
.text:0000000000008D42 loc_8D42:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000008D42                 mov     rbp, r11
.text:0000000000008D45                 jmp     loc_86E0
.text:0000000000008D4A ; ---------------------------------------------------------------------------
.text:0000000000008D4A
.text:0000000000008D4A loc_8D4A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000008D4A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000008D4F                 xor     eax, eax
.text:0000000000008D51                 xor     r12d, r12d
.text:0000000000008D54                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008D5D                 jmp     loc_8304
.text:0000000000008D62 ; ---------------------------------------------------------------------------
.text:0000000000008D62
.text:0000000000008D62 loc_8D62:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000008D62                 mov     rdx, r13
.text:0000000000008D65                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000008D6A                 jmp     loc_8362
.text:0000000000008D6F ; ---------------------------------------------------------------------------
.text:0000000000008D6F
.text:0000000000008D6F def_7BD1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000008D6F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000008D6F ; } // starts at 7B40
.text:0000000000008D6F quotearg_buffer_restyled endp
.text:0000000000008D6F
.text:0000000000008D6F ; ---------------------------------------------------------------------------
.text:0000000000008D74                 align 20h
.text:0000000000008D80
.text:0000000000008D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D80
.text:0000000000008D80
.text:0000000000008D80 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000008D80                                         ; quotearg_n_mem+7↓j ...
.text:0000000000008D80
.text:0000000000008D80 var_50          = qword ptr -50h
.text:0000000000008D80 var_48          = qword ptr -48h
.text:0000000000008D80 var_40          = dword ptr -40h
.text:0000000000008D80 var_3C          = dword ptr -3Ch
.text:0000000000008D80
.text:0000000000008D80 ; __unwind {
.text:0000000000008D80                 push    r15
.text:0000000000008D82                 push    r14
.text:0000000000008D84                 movsxd  r15, edi
.text:0000000000008D87                 push    r13
.text:0000000000008D89                 push    r12
.text:0000000000008D8B                 mov     r14, rdx
.text:0000000000008D8E                 push    rbp
.text:0000000000008D8F                 push    rbx
.text:0000000000008D90                 mov     rbp, rcx
.text:0000000000008D93                 sub     rsp, 28h
.text:0000000000008D97                 mov     [rsp+58h+var_50], rsi
.text:0000000000008D9C                 call    ___errno_location
.text:0000000000008DA1                 mov     r13, rax
.text:0000000000008DA4                 mov     eax, [rax]
.text:0000000000008DA6                 test    r15d, r15d
.text:0000000000008DA9                 mov     rbx, cs:slotvec
.text:0000000000008DB0                 mov     [rsp+58h+var_40], eax
.text:0000000000008DB4                 js      loc_8F21
.text:0000000000008DBA                 cmp     cs:nslots, r15d
.text:0000000000008DC1                 jg      short loc_8E25
.text:0000000000008DC3                 cmp     r15d, 7FFFFFFFh
.text:0000000000008DCA                 jz      loc_8F26
.text:0000000000008DD0                 lea     r12d, [r15+1]
.text:0000000000008DD4                 lea     rax, slotvec0
.text:0000000000008DDB                 movsxd  rsi, r12d
.text:0000000000008DDE                 shl     rsi, 4
.text:0000000000008DE2                 cmp     rbx, rax
.text:0000000000008DE5                 jz      loc_8F00
.text:0000000000008DEB                 mov     rdi, rbx
.text:0000000000008DEE                 call    xrealloc
.text:0000000000008DF3                 mov     rbx, rax
.text:0000000000008DF6                 mov     cs:slotvec, rax
.text:0000000000008DFD
.text:0000000000008DFD loc_8DFD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000008DFD                 movsxd  rdi, cs:nslots
.text:0000000000008E04                 mov     edx, r12d
.text:0000000000008E07                 xor     esi, esi        ; c
.text:0000000000008E09                 sub     edx, edi
.text:0000000000008E0B                 shl     rdi, 4
.text:0000000000008E0F                 movsxd  rdx, edx
.text:0000000000008E12                 add     rdi, rbx        ; s
.text:0000000000008E15                 shl     rdx, 4          ; n
.text:0000000000008E19                 call    _memset
.text:0000000000008E1E                 mov     cs:nslots, r12d
.text:0000000000008E25
.text:0000000000008E25 loc_8E25:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000008E25                 mov     eax, [rbp+4]
.text:0000000000008E28                 shl     r15, 4
.text:0000000000008E2C                 sub     rsp, 8
.text:0000000000008E30                 add     rbx, r15
.text:0000000000008E33                 lea     r15, [rbp+8]
.text:0000000000008E37                 mov     r8d, [rbp+0]
.text:0000000000008E3B                 mov     r11, [rbx]
.text:0000000000008E3E                 mov     r12, [rbx+8]
.text:0000000000008E42                 mov     rcx, r14
.text:0000000000008E45                 or      eax, 1
.text:0000000000008E48                 mov     [rsp+60h+var_3C], eax
.text:0000000000008E4C                 push    qword ptr [rbp+30h]
.text:0000000000008E4F                 mov     r9d, eax
.text:0000000000008E52                 push    qword ptr [rbp+28h]
.text:0000000000008E55                 push    r15
.text:0000000000008E57                 mov     rsi, r11
.text:0000000000008E5A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000008E5F                 mov     rdi, r12
.text:0000000000008E62                 mov     [rsp+78h+var_48], r11
.text:0000000000008E67                 call    quotearg_buffer_restyled
.text:0000000000008E6C                 add     rsp, 20h
.text:0000000000008E70                 mov     r11, [rsp+58h+var_48]
.text:0000000000008E75                 cmp     r11, rax
.text:0000000000008E78                 ja      short loc_8EE1
.text:0000000000008E7A                 lea     rsi, [rax+1]
.text:0000000000008E7E                 lea     rax, slot0
.text:0000000000008E85                 cmp     r12, rax
.text:0000000000008E88                 mov     [rbx], rsi
.text:0000000000008E8B                 jz      short loc_8E9F
.text:0000000000008E8D                 mov     rdi, r12        ; ptr
.text:0000000000008E90                 mov     [rsp+58h+var_48], rsi
.text:0000000000008E95                 call    _free
.text:0000000000008E9A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000008E9F
.text:0000000000008E9F loc_8E9F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000008E9F                 mov     rdi, rsi
.text:0000000000008EA2                 mov     [rsp+58h+var_48], rsi
.text:0000000000008EA7                 call    xmalloc
.text:0000000000008EAC                 sub     rsp, 8
.text:0000000000008EB0                 mov     [rbx+8], rax
.text:0000000000008EB4                 mov     r8d, [rbp+0]
.text:0000000000008EB8                 push    qword ptr [rbp+30h]
.text:0000000000008EBB                 push    qword ptr [rbp+28h]
.text:0000000000008EBE                 mov     rcx, r14
.text:0000000000008EC1                 push    r15
.text:0000000000008EC3                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000008EC8                 mov     rdi, rax
.text:0000000000008ECB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000008ED0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000008ED5                 mov     r12, rax
.text:0000000000008ED8                 call    quotearg_buffer_restyled
.text:0000000000008EDD                 add     rsp, 20h
.text:0000000000008EE1
.text:0000000000008EE1 loc_8EE1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000008EE1                 mov     eax, [rsp+58h+var_40]
.text:0000000000008EE5                 mov     [r13+0], eax
.text:0000000000008EE9                 add     rsp, 28h
.text:0000000000008EED                 mov     rax, r12
.text:0000000000008EF0                 pop     rbx
.text:0000000000008EF1                 pop     rbp
.text:0000000000008EF2                 pop     r12
.text:0000000000008EF4                 pop     r13
.text:0000000000008EF6                 pop     r14
.text:0000000000008EF8                 pop     r15
.text:0000000000008EFA                 retn
.text:0000000000008EFA ; ---------------------------------------------------------------------------
.text:0000000000008EFB                 align 20h
.text:0000000000008F00
.text:0000000000008F00 loc_8F00:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000008F00                 xor     edi, edi
.text:0000000000008F02                 call    xrealloc
.text:0000000000008F07                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000008F0F                 mov     rbx, rax
.text:0000000000008F12                 mov     cs:slotvec, rax
.text:0000000000008F19                 movups  xmmword ptr [rax], xmm0
.text:0000000000008F1C                 jmp     loc_8DFD
.text:0000000000008F21 ; ---------------------------------------------------------------------------
.text:0000000000008F21
.text:0000000000008F21 loc_8F21:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000008F21                 call    _abort
.text:0000000000008F26 ; ---------------------------------------------------------------------------
.text:0000000000008F26
.text:0000000000008F26 loc_8F26:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000008F26                 call    xalloc_die
.text:0000000000008F26 ; } // starts at 8D80
.text:0000000000008F26 quotearg_n_options endp
.text:0000000000008F26
.text:0000000000008F26 ; ---------------------------------------------------------------------------
.text:0000000000008F2B                 align 10h
.text:0000000000008F30
.text:0000000000008F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F30
.text:0000000000008F30 ; Attributes: info_from_lumina
.text:0000000000008F30
.text:0000000000008F30 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000008F30                 public clone_quoting_options
.text:0000000000008F30 clone_quoting_options proc near
.text:0000000000008F30 ; __unwind {
.text:0000000000008F30                 push    r12
.text:0000000000008F32                 push    rbp
.text:0000000000008F33                 push    rbx
.text:0000000000008F34                 mov     rbx, rdi
.text:0000000000008F37                 call    ___errno_location
.text:0000000000008F3C                 mov     r12d, [rax]
.text:0000000000008F3F                 mov     rbp, rax
.text:0000000000008F42                 lea     rax, default_quoting_options
.text:0000000000008F49                 test    rbx, rbx
.text:0000000000008F4C                 mov     esi, 38h ; '8'  ; n
.text:0000000000008F51                 cmovz   rbx, rax
.text:0000000000008F55                 mov     rdi, rbx        ; src
.text:0000000000008F58                 call    xmemdup
.text:0000000000008F5D                 mov     [rbp+0], r12d
.text:0000000000008F61                 pop     rbx
.text:0000000000008F62                 pop     rbp
.text:0000000000008F63                 pop     r12
.text:0000000000008F65                 retn
.text:0000000000008F65 ; } // starts at 8F30
.text:0000000000008F65 clone_quoting_options endp
.text:0000000000008F65
.text:0000000000008F65 ; ---------------------------------------------------------------------------
.text:0000000000008F66                 align 10h
.text:0000000000008F70
.text:0000000000008F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F70
.text:0000000000008F70
.text:0000000000008F70                 public get_quoting_style
.text:0000000000008F70 get_quoting_style proc near
.text:0000000000008F70 ; __unwind {
.text:0000000000008F70                 lea     rax, default_quoting_options
.text:0000000000008F77                 test    rdi, rdi
.text:0000000000008F7A                 cmovz   rdi, rax
.text:0000000000008F7E                 mov     eax, [rdi]
.text:0000000000008F80                 retn
.text:0000000000008F80 ; } // starts at 8F70
.text:0000000000008F80 get_quoting_style endp
.text:0000000000008F80
.text:0000000000008F80 ; ---------------------------------------------------------------------------
.text:0000000000008F81                 align 10h
.text:0000000000008F90
.text:0000000000008F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F90
.text:0000000000008F90
.text:0000000000008F90                 public set_quoting_style
.text:0000000000008F90 set_quoting_style proc near
.text:0000000000008F90 ; __unwind {
.text:0000000000008F90                 lea     rax, default_quoting_options
.text:0000000000008F97                 test    rdi, rdi
.text:0000000000008F9A                 cmovz   rdi, rax
.text:0000000000008F9E                 mov     [rdi], esi
.text:0000000000008FA0                 retn
.text:0000000000008FA0 ; } // starts at 8F90
.text:0000000000008FA0 set_quoting_style endp
.text:0000000000008FA0
.text:0000000000008FA0 ; ---------------------------------------------------------------------------
.text:0000000000008FA1                 align 10h
.text:0000000000008FB0
.text:0000000000008FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FB0
.text:0000000000008FB0 ; Attributes: info_from_lumina
.text:0000000000008FB0
.text:0000000000008FB0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000008FB0                 public set_char_quoting
.text:0000000000008FB0 set_char_quoting proc near
.text:0000000000008FB0 ; __unwind {
.text:0000000000008FB0                 lea     rax, default_quoting_options
.text:0000000000008FB7                 test    rdi, rdi
.text:0000000000008FBA                 mov     ecx, esi
.text:0000000000008FBC                 cmovz   rdi, rax
.text:0000000000008FC0                 mov     eax, esi
.text:0000000000008FC2                 and     ecx, 1Fh
.text:0000000000008FC5                 shr     al, 5
.text:0000000000008FC8                 movzx   eax, al
.text:0000000000008FCB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000008FD0                 mov     esi, [rdi]
.text:0000000000008FD2                 mov     eax, esi
.text:0000000000008FD4                 shr     eax, cl
.text:0000000000008FD6                 xor     edx, eax
.text:0000000000008FD8                 and     eax, 1
.text:0000000000008FDB                 and     edx, 1
.text:0000000000008FDE                 shl     edx, cl
.text:0000000000008FE0                 xor     edx, esi
.text:0000000000008FE2                 mov     [rdi], edx
.text:0000000000008FE4                 retn
.text:0000000000008FE4 ; } // starts at 8FB0
.text:0000000000008FE4 set_char_quoting endp
.text:0000000000008FE4
.text:0000000000008FE4 ; ---------------------------------------------------------------------------
.text:0000000000008FE5                 align 10h
.text:0000000000008FF0
.text:0000000000008FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008FF0
.text:0000000000008FF0
.text:0000000000008FF0                 public set_quoting_flags
.text:0000000000008FF0 set_quoting_flags proc near
.text:0000000000008FF0 ; __unwind {
.text:0000000000008FF0                 lea     rax, default_quoting_options
.text:0000000000008FF7                 test    rdi, rdi
.text:0000000000008FFA                 cmovz   rdi, rax
.text:0000000000008FFE                 mov     eax, [rdi+4]
.text:0000000000009001                 mov     [rdi+4], esi
.text:0000000000009004                 retn
.text:0000000000009004 ; } // starts at 8FF0
.text:0000000000009004 set_quoting_flags endp
.text:0000000000009004
.text:0000000000009004 ; ---------------------------------------------------------------------------
.text:0000000000009005                 align 10h
.text:0000000000009010
.text:0000000000009010 ; =============== S U B R O U T I N E =======================================
.text:0000000000009010
.text:0000000000009010 ; Attributes: info_from_lumina
.text:0000000000009010
.text:0000000000009010 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000009010                 public set_custom_quoting
.text:0000000000009010 set_custom_quoting proc near
.text:0000000000009010 ; __unwind {
.text:0000000000009010                 lea     rax, default_quoting_options
.text:0000000000009017                 test    rdi, rdi
.text:000000000000901A                 cmovz   rdi, rax
.text:000000000000901E                 test    rsi, rsi
.text:0000000000009021                 mov     dword ptr [rdi], 0Ah
.text:0000000000009027                 jz      short loc_9037
.text:0000000000009029                 test    rdx, rdx
.text:000000000000902C                 jz      short loc_9037
.text:000000000000902E                 mov     [rdi+28h], rsi
.text:0000000000009032                 mov     [rdi+30h], rdx
.text:0000000000009036                 retn
.text:0000000000009037 ; ---------------------------------------------------------------------------
.text:0000000000009037
.text:0000000000009037 loc_9037:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000009037                                         ; set_custom_quoting+1C↑j
.text:0000000000009037                 sub     rsp, 8
.text:000000000000903B                 call    _abort
.text:000000000000903B ; } // starts at 9010
.text:000000000000903B set_custom_quoting endp
.text:000000000000903B
.text:0000000000009040
.text:0000000000009040 ; =============== S U B R O U T I N E =======================================
.text:0000000000009040
.text:0000000000009040 ; Attributes: info_from_lumina
.text:0000000000009040
.text:0000000000009040 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000009040                 public quotearg_buffer
.text:0000000000009040 quotearg_buffer proc near
.text:0000000000009040
.text:0000000000009040 var_40          = qword ptr -40h
.text:0000000000009040
.text:0000000000009040 ; __unwind {
.text:0000000000009040                 push    r15
.text:0000000000009042                 push    r14
.text:0000000000009044                 lea     rax, default_quoting_options
.text:000000000000904B                 push    r13
.text:000000000000904D                 push    r12
.text:000000000000904F                 mov     r13, rdi
.text:0000000000009052                 push    rbp
.text:0000000000009053                 push    rbx
.text:0000000000009054                 mov     rbx, r8
.text:0000000000009057                 mov     r14, rsi
.text:000000000000905A                 mov     r15, rdx
.text:000000000000905D                 sub     rsp, 18h
.text:0000000000009061                 test    r8, r8
.text:0000000000009064                 cmovz   rbx, rax
.text:0000000000009068                 mov     [rsp+48h+var_40], rcx
.text:000000000000906D                 call    ___errno_location
.text:0000000000009072                 mov     r12d, [rax]
.text:0000000000009075                 mov     rbp, rax
.text:0000000000009078                 lea     rax, [rbx+8]
.text:000000000000907C                 sub     rsp, 8
.text:0000000000009080                 mov     r9d, [rbx+4]
.text:0000000000009084                 push    qword ptr [rbx+30h]
.text:0000000000009087                 mov     r8d, [rbx]
.text:000000000000908A                 push    qword ptr [rbx+28h]
.text:000000000000908D                 mov     rdx, r15
.text:0000000000009090                 push    rax
.text:0000000000009091                 mov     rcx, [rsp+68h+var_40]
.text:0000000000009096                 mov     rsi, r14
.text:0000000000009099                 mov     rdi, r13
.text:000000000000909C                 call    quotearg_buffer_restyled
.text:00000000000090A1                 mov     [rbp+0], r12d
.text:00000000000090A5                 add     rsp, 38h
.text:00000000000090A9                 pop     rbx
.text:00000000000090AA                 pop     rbp
.text:00000000000090AB                 pop     r12
.text:00000000000090AD                 pop     r13
.text:00000000000090AF                 pop     r14
.text:00000000000090B1                 pop     r15
.text:00000000000090B3                 retn
.text:00000000000090B3 ; } // starts at 9040
.text:00000000000090B3 quotearg_buffer endp
.text:00000000000090B3
.text:00000000000090B3 ; ---------------------------------------------------------------------------
.text:00000000000090B4                 align 20h
.text:00000000000090C0
.text:00000000000090C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090C0
.text:00000000000090C0 ; Attributes: info_from_lumina
.text:00000000000090C0
.text:00000000000090C0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000090C0                 public quotearg_alloc_mem
.text:00000000000090C0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000090C0
.text:00000000000090C0 var_5C          = dword ptr -5Ch
.text:00000000000090C0 var_58          = qword ptr -58h
.text:00000000000090C0 var_50          = qword ptr -50h
.text:00000000000090C0 var_48          = qword ptr -48h
.text:00000000000090C0 var_40          = qword ptr -40h
.text:00000000000090C0
.text:00000000000090C0 ; __unwind {
.text:00000000000090C0                 push    r15
.text:00000000000090C2                 push    r14
.text:00000000000090C4                 lea     rax, default_quoting_options
.text:00000000000090CB                 push    r13
.text:00000000000090CD                 push    r12
.text:00000000000090CF                 mov     r12, rdx
.text:00000000000090D2                 push    rbp
.text:00000000000090D3                 push    rbx
.text:00000000000090D4                 mov     rbx, rcx
.text:00000000000090D7                 mov     r14, rdi
.text:00000000000090DA                 mov     r15, rsi
.text:00000000000090DD                 sub     rsp, 38h
.text:00000000000090E1                 test    rcx, rcx
.text:00000000000090E4                 cmovz   rbx, rax
.text:00000000000090E8                 xor     ebp, ebp
.text:00000000000090EA                 call    ___errno_location
.text:00000000000090EF                 test    r12, r12
.text:00000000000090F2                 mov     r13, rax
.text:00000000000090F5                 mov     eax, [rax]
.text:00000000000090F7                 setz    bpl
.text:00000000000090FB                 or      ebp, [rbx+4]
.text:00000000000090FE                 lea     r10, [rbx+8]
.text:0000000000009102                 sub     rsp, 8
.text:0000000000009106                 mov     r8d, [rbx]
.text:0000000000009109                 mov     rcx, r15
.text:000000000000910C                 mov     [rsp+70h+var_5C], eax
.text:0000000000009110                 push    qword ptr [rbx+30h]
.text:0000000000009113                 mov     rdx, r14
.text:0000000000009116                 push    qword ptr [rbx+28h]
.text:0000000000009119                 push    r10
.text:000000000000911B                 xor     esi, esi
.text:000000000000911D                 mov     r9d, ebp
.text:0000000000009120                 xor     edi, edi
.text:0000000000009122                 mov     [rsp+88h+var_48], r10
.text:0000000000009127                 call    quotearg_buffer_restyled
.text:000000000000912C                 lea     rsi, [rax+1]
.text:0000000000009130                 mov     [rsp+88h+var_40], rax
.text:0000000000009135                 add     rsp, 20h
.text:0000000000009139                 mov     rdi, rsi
.text:000000000000913C                 mov     [rsp+68h+var_50], rsi
.text:0000000000009141                 call    xmalloc
.text:0000000000009146                 mov     [rsp+68h+var_58], rax
.text:000000000000914B                 sub     rsp, 8
.text:000000000000914F                 push    qword ptr [rbx+30h]
.text:0000000000009152                 push    qword ptr [rbx+28h]
.text:0000000000009155                 mov     r10, [rsp+80h+var_48]
.text:000000000000915A                 mov     r9d, ebp
.text:000000000000915D                 mov     r8d, [rbx]
.text:0000000000009160                 mov     rcx, r15
.text:0000000000009163                 mov     rdx, r14
.text:0000000000009166                 mov     rdi, rax
.text:0000000000009169                 push    r10
.text:000000000000916B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000009170                 call    quotearg_buffer_restyled
.text:0000000000009175                 mov     eax, [rsp+88h+var_5C]
.text:0000000000009179                 add     rsp, 20h
.text:000000000000917D                 test    r12, r12
.text:0000000000009180                 mov     [r13+0], eax
.text:0000000000009184                 jz      short loc_918F
.text:0000000000009186                 mov     r11, [rsp+68h+var_40]
.text:000000000000918B                 mov     [r12], r11
.text:000000000000918F
.text:000000000000918F loc_918F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000918F                 mov     rax, [rsp+68h+var_58]
.text:0000000000009194                 add     rsp, 38h
.text:0000000000009198                 pop     rbx
.text:0000000000009199                 pop     rbp
.text:000000000000919A                 pop     r12
.text:000000000000919C                 pop     r13
.text:000000000000919E                 pop     r14
.text:00000000000091A0                 pop     r15
.text:00000000000091A2                 retn
.text:00000000000091A2 ; } // starts at 90C0
.text:00000000000091A2 quotearg_alloc_mem endp
.text:00000000000091A2
.text:00000000000091A2 ; ---------------------------------------------------------------------------
.text:00000000000091A3                 align 10h
.text:00000000000091B0
.text:00000000000091B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091B0
.text:00000000000091B0
.text:00000000000091B0                 public quotearg_alloc
.text:00000000000091B0 quotearg_alloc  proc near
.text:00000000000091B0 ; __unwind {
.text:00000000000091B0                 mov     rcx, rdx
.text:00000000000091B3                 xor     edx, edx
.text:00000000000091B5                 jmp     quotearg_alloc_mem
.text:00000000000091B5 ; } // starts at 91B0
.text:00000000000091B5 quotearg_alloc  endp
.text:00000000000091B5
.text:00000000000091B5 ; ---------------------------------------------------------------------------
.text:00000000000091BA                 align 20h
.text:00000000000091C0
.text:00000000000091C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091C0
.text:00000000000091C0 ; Attributes: info_from_lumina
.text:00000000000091C0
.text:00000000000091C0 ; void __cdecl quotearg_free()
.text:00000000000091C0                 public quotearg_free
.text:00000000000091C0 quotearg_free   proc near
.text:00000000000091C0 ; __unwind {
.text:00000000000091C0                 mov     eax, cs:nslots
.text:00000000000091C6                 push    r12
.text:00000000000091C8                 mov     r12, cs:slotvec
.text:00000000000091CF                 push    rbp
.text:00000000000091D0                 push    rbx
.text:00000000000091D1                 cmp     eax, 1
.text:00000000000091D4                 jle     short loc_9201
.text:00000000000091D6                 sub     eax, 2
.text:00000000000091D9                 lea     rbx, [r12+18h]
.text:00000000000091DE                 shl     rax, 4
.text:00000000000091E2                 lea     rbp, [r12+rax+28h]
.text:00000000000091E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000091F0
.text:00000000000091F0 loc_91F0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000091F0                 mov     rdi, [rbx]      ; ptr
.text:00000000000091F3                 add     rbx, 10h
.text:00000000000091F7                 call    _free
.text:00000000000091FC                 cmp     rbx, rbp
.text:00000000000091FF                 jnz     short loc_91F0
.text:0000000000009201
.text:0000000000009201 loc_9201:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000009201                 mov     rdi, [r12+8]    ; ptr
.text:0000000000009206                 lea     rbx, slot0
.text:000000000000920D                 cmp     rdi, rbx
.text:0000000000009210                 jz      short loc_9229
.text:0000000000009212                 call    _free
.text:0000000000009217                 mov     cs:slotvec0, 100h
.text:0000000000009222                 mov     cs:off_2110D8, rbx
.text:0000000000009229
.text:0000000000009229 loc_9229:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000009229                 lea     rbx, slotvec0
.text:0000000000009230                 cmp     r12, rbx
.text:0000000000009233                 jz      short loc_9244
.text:0000000000009235                 mov     rdi, r12        ; ptr
.text:0000000000009238                 call    _free
.text:000000000000923D                 mov     cs:slotvec, rbx
.text:0000000000009244
.text:0000000000009244 loc_9244:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000009244                 pop     rbx
.text:0000000000009245                 mov     cs:nslots, 1
.text:000000000000924F                 pop     rbp
.text:0000000000009250                 pop     r12
.text:0000000000009252                 retn
.text:0000000000009252 ; } // starts at 91C0
.text:0000000000009252 quotearg_free   endp
.text:0000000000009252
.text:0000000000009252 ; ---------------------------------------------------------------------------
.text:0000000000009253                 align 20h
.text:0000000000009260
.text:0000000000009260 ; =============== S U B R O U T I N E =======================================
.text:0000000000009260
.text:0000000000009260
.text:0000000000009260                 public quotearg_n
.text:0000000000009260 quotearg_n      proc near
.text:0000000000009260 ; __unwind {
.text:0000000000009260                 lea     rcx, default_quoting_options
.text:0000000000009267                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000926E                 jmp     quotearg_n_options
.text:000000000000926E ; } // starts at 9260
.text:000000000000926E quotearg_n      endp
.text:000000000000926E
.text:000000000000926E ; ---------------------------------------------------------------------------
.text:0000000000009273                 align 20h
.text:0000000000009280
.text:0000000000009280 ; =============== S U B R O U T I N E =======================================
.text:0000000000009280
.text:0000000000009280
.text:0000000000009280                 public quotearg_n_mem
.text:0000000000009280 quotearg_n_mem  proc near
.text:0000000000009280 ; __unwind {
.text:0000000000009280                 lea     rcx, default_quoting_options
.text:0000000000009287                 jmp     quotearg_n_options
.text:0000000000009287 ; } // starts at 9280
.text:0000000000009287 quotearg_n_mem  endp
.text:0000000000009287
.text:0000000000009287 ; ---------------------------------------------------------------------------
.text:000000000000928C                 align 10h
.text:0000000000009290
.text:0000000000009290 ; =============== S U B R O U T I N E =======================================
.text:0000000000009290
.text:0000000000009290
.text:0000000000009290                 public quotearg
.text:0000000000009290 quotearg        proc near
.text:0000000000009290 ; __unwind {
.text:0000000000009290                 lea     rcx, default_quoting_options
.text:0000000000009297                 mov     rsi, rdi
.text:000000000000929A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000092A1                 xor     edi, edi
.text:00000000000092A3                 jmp     quotearg_n_options
.text:00000000000092A3 ; } // starts at 9290
.text:00000000000092A3 quotearg        endp
.text:00000000000092A3
.text:00000000000092A3 ; ---------------------------------------------------------------------------
.text:00000000000092A8                 align 10h
.text:00000000000092B0
.text:00000000000092B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092B0
.text:00000000000092B0
.text:00000000000092B0                 public quotearg_mem
.text:00000000000092B0 quotearg_mem    proc near
.text:00000000000092B0 ; __unwind {
.text:00000000000092B0                 lea     rcx, default_quoting_options
.text:00000000000092B7                 mov     rdx, rsi
.text:00000000000092BA                 mov     rsi, rdi
.text:00000000000092BD                 xor     edi, edi
.text:00000000000092BF                 jmp     quotearg_n_options
.text:00000000000092BF ; } // starts at 92B0
.text:00000000000092BF quotearg_mem    endp
.text:00000000000092BF
.text:00000000000092BF ; ---------------------------------------------------------------------------
.text:00000000000092C4                 align 10h
.text:00000000000092D0
.text:00000000000092D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092D0
.text:00000000000092D0 ; Attributes: info_from_lumina
.text:00000000000092D0
.text:00000000000092D0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000092D0                 public quotearg_n_style
.text:00000000000092D0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:00000000000092D0
.text:00000000000092D0 var_48          = dword ptr -48h
.text:00000000000092D0 var_44          = qword ptr -44h
.text:00000000000092D0 var_3C          = qword ptr -3Ch
.text:00000000000092D0 var_34          = qword ptr -34h
.text:00000000000092D0 var_2C          = qword ptr -2Ch
.text:00000000000092D0 var_24          = qword ptr -24h
.text:00000000000092D0 var_1C          = qword ptr -1Ch
.text:00000000000092D0 var_14          = dword ptr -14h
.text:00000000000092D0 var_10          = qword ptr -10h
.text:00000000000092D0
.text:00000000000092D0 ; __unwind {
.text:00000000000092D0                 sub     rsp, 48h
.text:00000000000092D4                 mov     rax, rdx
.text:00000000000092D7                 mov     rdx, fs:28h
.text:00000000000092E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000092E5                 xor     edx, edx
.text:00000000000092E7                 cmp     esi, 0Ah
.text:00000000000092EA                 jz      short loc_9354
.text:00000000000092EC                 mov     [rsp+48h+var_48], esi
.text:00000000000092EF                 mov     rcx, rsp
.text:00000000000092F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000092F9                 mov     rsi, rax
.text:00000000000092FC                 mov     [rsp+48h+var_44], 0
.text:0000000000009305                 mov     [rsp+48h+var_3C], 0
.text:000000000000930E                 mov     [rsp+48h+var_34], 0
.text:0000000000009317                 mov     [rsp+48h+var_2C], 0
.text:0000000000009320                 mov     [rsp+48h+var_24], 0
.text:0000000000009329                 mov     [rsp+48h+var_1C], 0
.text:0000000000009332                 mov     [rsp+48h+var_14], 0
.text:000000000000933A                 call    quotearg_n_options
.text:000000000000933F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009344                 xor     rcx, fs:28h
.text:000000000000934D                 jnz     short loc_9359
.text:000000000000934F                 add     rsp, 48h
.text:0000000000009353                 retn
.text:0000000000009354 ; ---------------------------------------------------------------------------
.text:0000000000009354
.text:0000000000009354 loc_9354:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000009354                 call    _abort
.text:0000000000009359 ; ---------------------------------------------------------------------------
.text:0000000000009359
.text:0000000000009359 loc_9359:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000009359                 call    ___stack_chk_fail
.text:0000000000009359 ; } // starts at 92D0
.text:0000000000009359 quotearg_n_style endp
.text:0000000000009359
.text:0000000000009359 ; ---------------------------------------------------------------------------
.text:000000000000935E                 align 20h
.text:0000000000009360
.text:0000000000009360 ; =============== S U B R O U T I N E =======================================
.text:0000000000009360
.text:0000000000009360 ; Attributes: info_from_lumina
.text:0000000000009360
.text:0000000000009360 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000009360                 public quotearg_n_style_mem
.text:0000000000009360 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000009360
.text:0000000000009360 var_48          = dword ptr -48h
.text:0000000000009360 var_44          = qword ptr -44h
.text:0000000000009360 var_3C          = qword ptr -3Ch
.text:0000000000009360 var_34          = qword ptr -34h
.text:0000000000009360 var_2C          = qword ptr -2Ch
.text:0000000000009360 var_24          = qword ptr -24h
.text:0000000000009360 var_1C          = qword ptr -1Ch
.text:0000000000009360 var_14          = dword ptr -14h
.text:0000000000009360 var_10          = qword ptr -10h
.text:0000000000009360
.text:0000000000009360 ; __unwind {
.text:0000000000009360                 sub     rsp, 48h
.text:0000000000009364                 mov     rax, rdx
.text:0000000000009367                 mov     rdx, rcx
.text:000000000000936A                 mov     rcx, fs:28h
.text:0000000000009373                 mov     [rsp+48h+var_10], rcx
.text:0000000000009378                 xor     ecx, ecx
.text:000000000000937A                 cmp     esi, 0Ah
.text:000000000000937D                 jz      short loc_93E0
.text:000000000000937F                 mov     [rsp+48h+var_48], esi
.text:0000000000009382                 mov     rcx, rsp
.text:0000000000009385                 mov     rsi, rax
.text:0000000000009388                 mov     [rsp+48h+var_44], 0
.text:0000000000009391                 mov     [rsp+48h+var_3C], 0
.text:000000000000939A                 mov     [rsp+48h+var_34], 0
.text:00000000000093A3                 mov     [rsp+48h+var_2C], 0
.text:00000000000093AC                 mov     [rsp+48h+var_24], 0
.text:00000000000093B5                 mov     [rsp+48h+var_1C], 0
.text:00000000000093BE                 mov     [rsp+48h+var_14], 0
.text:00000000000093C6                 call    quotearg_n_options
.text:00000000000093CB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000093D0                 xor     rdx, fs:28h
.text:00000000000093D9                 jnz     short loc_93E5
.text:00000000000093DB                 add     rsp, 48h
.text:00000000000093DF                 retn
.text:00000000000093E0 ; ---------------------------------------------------------------------------
.text:00000000000093E0
.text:00000000000093E0 loc_93E0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000093E0                 call    _abort
.text:00000000000093E5 ; ---------------------------------------------------------------------------
.text:00000000000093E5
.text:00000000000093E5 loc_93E5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000093E5                 call    ___stack_chk_fail
.text:00000000000093E5 ; } // starts at 9360
.text:00000000000093E5 quotearg_n_style_mem endp
.text:00000000000093E5
.text:00000000000093E5 ; ---------------------------------------------------------------------------
.text:00000000000093EA                 align 10h
.text:00000000000093F0
.text:00000000000093F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000093F0
.text:00000000000093F0
.text:00000000000093F0                 public quotearg_style
.text:00000000000093F0 quotearg_style  proc near
.text:00000000000093F0 ; __unwind {
.text:00000000000093F0                 mov     rdx, rsi
.text:00000000000093F3                 mov     esi, edi
.text:00000000000093F5                 xor     edi, edi
.text:00000000000093F7                 jmp     quotearg_n_style
.text:00000000000093F7 ; } // starts at 93F0
.text:00000000000093F7 quotearg_style  endp
.text:00000000000093F7
.text:00000000000093F7 ; ---------------------------------------------------------------------------
.text:00000000000093FC                 align 20h
.text:0000000000009400
.text:0000000000009400 ; =============== S U B R O U T I N E =======================================
.text:0000000000009400
.text:0000000000009400
.text:0000000000009400                 public quotearg_style_mem
.text:0000000000009400 quotearg_style_mem proc near
.text:0000000000009400 ; __unwind {
.text:0000000000009400                 mov     rcx, rdx
.text:0000000000009403                 mov     rdx, rsi
.text:0000000000009406                 mov     esi, edi
.text:0000000000009408                 xor     edi, edi
.text:000000000000940A                 jmp     quotearg_n_style_mem
.text:000000000000940A ; } // starts at 9400
.text:000000000000940A quotearg_style_mem endp
.text:000000000000940A
.text:000000000000940A ; ---------------------------------------------------------------------------
.text:000000000000940F                 align 10h
.text:0000000000009410
.text:0000000000009410 ; =============== S U B R O U T I N E =======================================
.text:0000000000009410
.text:0000000000009410 ; Attributes: info_from_lumina
.text:0000000000009410
.text:0000000000009410 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000009410                 public quotearg_char_mem
.text:0000000000009410 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000009410                                         ; quotearg_colon+C↓j ...
.text:0000000000009410
.text:0000000000009410 var_48          = xmmword ptr -48h
.text:0000000000009410 var_38          = xmmword ptr -38h
.text:0000000000009410 var_28          = xmmword ptr -28h
.text:0000000000009410 var_18          = qword ptr -18h
.text:0000000000009410 var_10          = qword ptr -10h
.text:0000000000009410
.text:0000000000009410 ; __unwind {
.text:0000000000009410                 sub     rsp, 48h
.text:0000000000009414                 mov     ecx, edx
.text:0000000000009416                 mov     rax, fs:28h
.text:000000000000941F                 mov     [rsp+48h+var_10], rax
.text:0000000000009424                 xor     eax, eax
.text:0000000000009426                 mov     rax, cs:qword_211390
.text:000000000000942D                 mov     r8, rsp
.text:0000000000009430                 and     ecx, 1Fh
.text:0000000000009433                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000943B                 mov     [rsp+48h+var_18], rax
.text:0000000000009440                 mov     eax, edx
.text:0000000000009442                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000009446                 shr     al, 5
.text:0000000000009449                 movzx   eax, al
.text:000000000000944C                 lea     r9, [r8+rax*4+8]
.text:0000000000009451                 movdqa  xmm0, cs:xmmword_211370
.text:0000000000009459                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000945E                 movdqa  xmm0, cs:xmmword_211380
.text:0000000000009466                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000946B                 mov     edx, [r9]
.text:000000000000946E                 mov     eax, edx
.text:0000000000009470                 shr     eax, cl
.text:0000000000009472                 not     eax
.text:0000000000009474                 and     eax, 1
.text:0000000000009477                 shl     eax, cl
.text:0000000000009479                 mov     rcx, r8
.text:000000000000947C                 xor     eax, edx
.text:000000000000947E                 mov     rdx, rsi
.text:0000000000009481                 mov     rsi, rdi
.text:0000000000009484                 mov     [r9], eax
.text:0000000000009487                 xor     edi, edi
.text:0000000000009489                 call    quotearg_n_options
.text:000000000000948E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000009493                 xor     rsi, fs:28h
.text:000000000000949C                 jnz     short loc_94A3
.text:000000000000949E                 add     rsp, 48h
.text:00000000000094A2                 retn
.text:00000000000094A3 ; ---------------------------------------------------------------------------
.text:00000000000094A3
.text:00000000000094A3 loc_94A3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000094A3                 call    ___stack_chk_fail
.text:00000000000094A3 ; } // starts at 9410
.text:00000000000094A3 quotearg_char_mem endp
.text:00000000000094A3
.text:00000000000094A3 ; ---------------------------------------------------------------------------
.text:00000000000094A8                 align 10h
.text:00000000000094B0
.text:00000000000094B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094B0
.text:00000000000094B0
.text:00000000000094B0                 public quotearg_char
.text:00000000000094B0 quotearg_char   proc near
.text:00000000000094B0 ; __unwind {
.text:00000000000094B0                 movsx   edx, sil
.text:00000000000094B4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000094BB                 jmp     quotearg_char_mem
.text:00000000000094BB ; } // starts at 94B0
.text:00000000000094BB quotearg_char   endp
.text:00000000000094BB
.text:00000000000094C0
.text:00000000000094C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094C0
.text:00000000000094C0
.text:00000000000094C0                 public quotearg_colon
.text:00000000000094C0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000094C0 ; __unwind {
.text:00000000000094C0                 mov     edx, 3Ah ; ':'
.text:00000000000094C5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000094CC                 jmp     quotearg_char_mem
.text:00000000000094CC ; } // starts at 94C0
.text:00000000000094CC quotearg_colon  endp
.text:00000000000094CC
.text:00000000000094CC ; ---------------------------------------------------------------------------
.text:00000000000094D1                 align 20h
.text:00000000000094E0
.text:00000000000094E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094E0
.text:00000000000094E0
.text:00000000000094E0                 public quotearg_colon_mem
.text:00000000000094E0 quotearg_colon_mem proc near
.text:00000000000094E0 ; __unwind {
.text:00000000000094E0                 mov     edx, 3Ah ; ':'
.text:00000000000094E5                 jmp     quotearg_char_mem
.text:00000000000094E5 ; } // starts at 94E0
.text:00000000000094E5 quotearg_colon_mem endp
.text:00000000000094E5
.text:00000000000094E5 ; ---------------------------------------------------------------------------
.text:00000000000094EA                 align 10h
.text:00000000000094F0
.text:00000000000094F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000094F0
.text:00000000000094F0 ; Attributes: info_from_lumina
.text:00000000000094F0
.text:00000000000094F0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000094F0                 public quotearg_n_style_colon
.text:00000000000094F0 quotearg_n_style_colon proc near        ; CODE XREF: close_file_part_4+AB↑p
.text:00000000000094F0                                         ; close_file_part_4+DB↑p ...
.text:00000000000094F0
.text:00000000000094F0 var_48          = dword ptr -48h
.text:00000000000094F0 var_44          = qword ptr -44h
.text:00000000000094F0 var_3C          = qword ptr -3Ch
.text:00000000000094F0 var_34          = qword ptr -34h
.text:00000000000094F0 var_2C          = qword ptr -2Ch
.text:00000000000094F0 var_24          = qword ptr -24h
.text:00000000000094F0 var_1C          = qword ptr -1Ch
.text:00000000000094F0 var_14          = dword ptr -14h
.text:00000000000094F0 var_10          = qword ptr -10h
.text:00000000000094F0
.text:00000000000094F0 ; __unwind {
.text:00000000000094F0                 sub     rsp, 48h
.text:00000000000094F4                 mov     rax, rdx
.text:00000000000094F7                 mov     rdx, fs:28h
.text:0000000000009500                 mov     [rsp+48h+var_10], rdx
.text:0000000000009505                 xor     edx, edx
.text:0000000000009507                 cmp     esi, 0Ah
.text:000000000000950A                 jz      short loc_9574
.text:000000000000950C                 mov     [rsp+48h+var_48], esi
.text:000000000000950F                 mov     rcx, rsp
.text:0000000000009512                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009519                 mov     rsi, rax
.text:000000000000951C                 mov     [rsp+48h+var_44], 0
.text:0000000000009525                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000952E                 mov     [rsp+48h+var_34], 0
.text:0000000000009537                 mov     [rsp+48h+var_2C], 0
.text:0000000000009540                 mov     [rsp+48h+var_24], 0
.text:0000000000009549                 mov     [rsp+48h+var_1C], 0
.text:0000000000009552                 mov     [rsp+48h+var_14], 0
.text:000000000000955A                 call    quotearg_n_options
.text:000000000000955F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000009564                 xor     rcx, fs:28h
.text:000000000000956D                 jnz     short loc_9579
.text:000000000000956F                 add     rsp, 48h
.text:0000000000009573                 retn
.text:0000000000009574 ; ---------------------------------------------------------------------------
.text:0000000000009574
.text:0000000000009574 loc_9574:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000009574                 call    _abort
.text:0000000000009579 ; ---------------------------------------------------------------------------
.text:0000000000009579
.text:0000000000009579 loc_9579:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000009579                 call    ___stack_chk_fail
.text:0000000000009579 ; } // starts at 94F0
.text:0000000000009579 quotearg_n_style_colon endp
.text:0000000000009579
.text:0000000000009579 ; ---------------------------------------------------------------------------
.text:000000000000957E                 align 20h
.text:0000000000009580
.text:0000000000009580 ; =============== S U B R O U T I N E =======================================
.text:0000000000009580
.text:0000000000009580 ; Attributes: info_from_lumina
.text:0000000000009580
.text:0000000000009580 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000009580                 public quotearg_n_custom_mem
.text:0000000000009580 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000009580                                         ; quotearg_custom+12↓j ...
.text:0000000000009580
.text:0000000000009580 var_48          = xmmword ptr -48h
.text:0000000000009580 var_38          = xmmword ptr -38h
.text:0000000000009580 var_28          = xmmword ptr -28h
.text:0000000000009580 var_18          = qword ptr -18h
.text:0000000000009580 var_10          = qword ptr -10h
.text:0000000000009580
.text:0000000000009580 ; __unwind {
.text:0000000000009580                 sub     rsp, 48h
.text:0000000000009584                 mov     r9, rcx
.text:0000000000009587                 mov     rcx, cs:qword_211390
.text:000000000000958E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000009596                 mov     rax, fs:28h
.text:000000000000959F                 mov     [rsp+48h+var_10], rax
.text:00000000000095A4                 xor     eax, eax
.text:00000000000095A6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000095AA                 test    rsi, rsi
.text:00000000000095AD                 mov     [rsp+48h+var_18], rcx
.text:00000000000095B2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000095B9                 movdqa  xmm0, cs:xmmword_211370
.text:00000000000095C1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000095C6                 movdqa  xmm0, cs:xmmword_211380
.text:00000000000095CE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000095D3                 jz      short loc_9607
.text:00000000000095D5                 test    rdx, rdx
.text:00000000000095D8                 jz      short loc_9607
.text:00000000000095DA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000095DF                 mov     [rsp+48h+var_18], rdx
.text:00000000000095E4                 mov     rcx, rsp
.text:00000000000095E7                 mov     rdx, r8
.text:00000000000095EA                 mov     rsi, r9
.text:00000000000095ED                 call    quotearg_n_options
.text:00000000000095F2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000095F7                 xor     rdi, fs:28h
.text:0000000000009600                 jnz     short loc_960C
.text:0000000000009602                 add     rsp, 48h
.text:0000000000009606                 retn
.text:0000000000009607 ; ---------------------------------------------------------------------------
.text:0000000000009607
.text:0000000000009607 loc_9607:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000009607                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000009607                 call    _abort
.text:000000000000960C ; ---------------------------------------------------------------------------
.text:000000000000960C
.text:000000000000960C loc_960C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000960C                 call    ___stack_chk_fail
.text:000000000000960C ; } // starts at 9580
.text:000000000000960C quotearg_n_custom_mem endp
.text:000000000000960C
.text:000000000000960C ; ---------------------------------------------------------------------------
.text:0000000000009611                 align 20h
.text:0000000000009620
.text:0000000000009620 ; =============== S U B R O U T I N E =======================================
.text:0000000000009620
.text:0000000000009620
.text:0000000000009620                 public quotearg_n_custom
.text:0000000000009620 quotearg_n_custom proc near
.text:0000000000009620 ; __unwind {
.text:0000000000009620                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000009627                 jmp     quotearg_n_custom_mem
.text:0000000000009627 ; } // starts at 9620
.text:0000000000009627 quotearg_n_custom endp
.text:0000000000009627
.text:0000000000009627 ; ---------------------------------------------------------------------------
.text:000000000000962C                 align 10h
.text:0000000000009630
.text:0000000000009630 ; =============== S U B R O U T I N E =======================================
.text:0000000000009630
.text:0000000000009630
.text:0000000000009630                 public quotearg_custom
.text:0000000000009630 quotearg_custom proc near
.text:0000000000009630 ; __unwind {
.text:0000000000009630                 mov     rcx, rdx
.text:0000000000009633                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000963A                 mov     rdx, rsi
.text:000000000000963D                 mov     rsi, rdi
.text:0000000000009640                 xor     edi, edi
.text:0000000000009642                 jmp     quotearg_n_custom_mem
.text:0000000000009642 ; } // starts at 9630
.text:0000000000009642 quotearg_custom endp
.text:0000000000009642
.text:0000000000009642 ; ---------------------------------------------------------------------------
.text:0000000000009647                 align 10h
.text:0000000000009650
.text:0000000000009650 ; =============== S U B R O U T I N E =======================================
.text:0000000000009650
.text:0000000000009650
.text:0000000000009650                 public quotearg_custom_mem
.text:0000000000009650 quotearg_custom_mem proc near
.text:0000000000009650 ; __unwind {
.text:0000000000009650                 mov     r8, rcx
.text:0000000000009653                 mov     rcx, rdx
.text:0000000000009656                 mov     rdx, rsi
.text:0000000000009659                 mov     rsi, rdi
.text:000000000000965C                 xor     edi, edi
.text:000000000000965E                 jmp     quotearg_n_custom_mem
.text:000000000000965E ; } // starts at 9650
.text:000000000000965E quotearg_custom_mem endp
.text:000000000000965E
.text:000000000000965E ; ---------------------------------------------------------------------------
.text:0000000000009663                 align 10h
.text:0000000000009670
.text:0000000000009670 ; =============== S U B R O U T I N E =======================================
.text:0000000000009670
.text:0000000000009670
.text:0000000000009670                 public quote_n_mem
.text:0000000000009670 quote_n_mem     proc near
.text:0000000000009670 ; __unwind {
.text:0000000000009670                 lea     rcx, quote_quoting_options
.text:0000000000009677                 jmp     quotearg_n_options
.text:0000000000009677 ; } // starts at 9670
.text:0000000000009677 quote_n_mem     endp
.text:0000000000009677
.text:0000000000009677 ; ---------------------------------------------------------------------------
.text:000000000000967C                 align 20h
.text:0000000000009680
.text:0000000000009680 ; =============== S U B R O U T I N E =======================================
.text:0000000000009680
.text:0000000000009680
.text:0000000000009680                 public quote_mem
.text:0000000000009680 quote_mem       proc near
.text:0000000000009680 ; __unwind {
.text:0000000000009680                 lea     rcx, quote_quoting_options
.text:0000000000009687                 mov     rdx, rsi
.text:000000000000968A                 mov     rsi, rdi
.text:000000000000968D                 xor     edi, edi
.text:000000000000968F                 jmp     quotearg_n_options
.text:000000000000968F ; } // starts at 9680
.text:000000000000968F quote_mem       endp
.text:000000000000968F
.text:000000000000968F ; ---------------------------------------------------------------------------
.text:0000000000009694                 align 20h
.text:00000000000096A0
.text:00000000000096A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096A0
.text:00000000000096A0
.text:00000000000096A0                 public quote_n
.text:00000000000096A0 quote_n         proc near
.text:00000000000096A0 ; __unwind {
.text:00000000000096A0                 lea     rcx, quote_quoting_options
.text:00000000000096A7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000096AE                 jmp     quotearg_n_options
.text:00000000000096AE ; } // starts at 96A0
.text:00000000000096AE quote_n         endp
.text:00000000000096AE
.text:00000000000096AE ; ---------------------------------------------------------------------------
.text:00000000000096B3                 align 20h
.text:00000000000096C0
.text:00000000000096C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096C0
.text:00000000000096C0
.text:00000000000096C0                 public quote
.text:00000000000096C0 quote           proc near               ; CODE XREF: main+8EA↑p
.text:00000000000096C0                                         ; getoptarg+9A↑p ...
.text:00000000000096C0 ; __unwind {
.text:00000000000096C0                 lea     rcx, quote_quoting_options
.text:00000000000096C7                 mov     rsi, rdi
.text:00000000000096CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000096D1                 xor     edi, edi
.text:00000000000096D3                 jmp     quotearg_n_options
.text:00000000000096D3 ; } // starts at 96C0
.text:00000000000096D3 quote           endp
.text:00000000000096D3
.text:00000000000096D3 ; ---------------------------------------------------------------------------
.text:00000000000096D8                 align 20h
.text:00000000000096E0
.text:00000000000096E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096E0
.text:00000000000096E0
.text:00000000000096E0                 public dup_safer
.text:00000000000096E0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000096E0 ; __unwind {
.text:00000000000096E0                 mov     edx, 3
.text:00000000000096E5                 xor     esi, esi
.text:00000000000096E7                 xor     eax, eax
.text:00000000000096E9                 jmp     rpl_fcntl
.text:00000000000096E9 ; } // starts at 96E0
.text:00000000000096E9 dup_safer       endp
.text:00000000000096E9
.text:00000000000096E9 ; ---------------------------------------------------------------------------
.text:00000000000096EE                 align 10h
.text:00000000000096F0
.text:00000000000096F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000096F0
.text:00000000000096F0
.text:00000000000096F0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000096F0                 public version_etc_arn
.text:00000000000096F0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_9B2B↓j
.text:00000000000096F0                                         ; version_etc_va:loc_9B7B↓p ...
.text:00000000000096F0
.text:00000000000096F0 var_58          = qword ptr -58h
.text:00000000000096F0 var_50          = qword ptr -50h
.text:00000000000096F0 var_48          = qword ptr -48h
.text:00000000000096F0 var_40          = qword ptr -40h
.text:00000000000096F0
.text:00000000000096F0 ; __unwind {
.text:00000000000096F0                 push    r15
.text:00000000000096F2                 push    r14
.text:00000000000096F4                 push    r13
.text:00000000000096F6                 push    r12
.text:00000000000096F8                 mov     r12, r9
.text:00000000000096FB                 push    rbp
.text:00000000000096FC                 push    rbx
.text:00000000000096FD                 mov     rbp, rdi
.text:0000000000009700                 mov     rbx, r8
.text:0000000000009703                 sub     rsp, 28h
.text:0000000000009707                 test    rsi, rsi
.text:000000000000970A                 jz      loc_9828
.text:0000000000009710                 mov     r8, rdx
.text:0000000000009713                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000971A                 mov     r9, rcx
.text:000000000000971D                 xor     eax, eax
.text:000000000000971F                 mov     rcx, rsi
.text:0000000000009722                 mov     esi, 1
.text:0000000000009727                 call    ___fprintf_chk
.text:000000000000972C
.text:000000000000972C loc_972C:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000972C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000009733                 xor     edi, edi        ; domainname
.text:0000000000009735                 mov     edx, 5          ; category
.text:000000000000973A                 call    _dcgettext
.text:000000000000973F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000009746                 mov     rcx, rax
.text:0000000000009749                 mov     r8d, 7E3h
.text:000000000000974F                 mov     esi, 1
.text:0000000000009754                 mov     rdi, rbp
.text:0000000000009757                 xor     eax, eax
.text:0000000000009759                 call    ___fprintf_chk
.text:000000000000975E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000009765                 xor     edi, edi        ; domainname
.text:0000000000009767                 mov     edx, 5          ; category
.text:000000000000976C                 call    _dcgettext
.text:0000000000009771                 mov     rsi, rbp        ; stream
.text:0000000000009774                 mov     rdi, rax        ; s
.text:0000000000009777                 call    _fputs_unlocked
.text:000000000000977C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000009780                 ja      def_9794        ; jumptable 0000000000009794 default case
.text:0000000000009786                 lea     rdx, jpt_9794
.text:000000000000978D                 movsxd  rax, ds:(jpt_9794 - 0E284h)[rdx+r12*4]
.text:0000000000009791                 add     rax, rdx
.text:0000000000009794                 jmp     rax             ; switch jump
.text:0000000000009794 ; ---------------------------------------------------------------------------
.text:0000000000009796                 align 20h
.text:00000000000097A0
.text:00000000000097A0 loc_97A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000097A0                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:00000000000097A0                 mov     r9, [rbx+38h]   ; jumptable 0000000000009794 case 8
.text:00000000000097A4                 mov     rax, [rbx+10h]
.text:00000000000097A8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000097AF                 mov     r8, [rbx+8]
.text:00000000000097B3                 mov     edx, 5          ; category
.text:00000000000097B8                 xor     edi, edi        ; domainname
.text:00000000000097BA                 mov     r13, [rbx+30h]
.text:00000000000097BE                 mov     r12, [rbx+28h]
.text:00000000000097C2                 mov     [rsp+58h+var_48], r9
.text:00000000000097C7                 mov     r15, [rbx+20h]
.text:00000000000097CB                 mov     r14, [rbx+18h]
.text:00000000000097CF                 mov     [rsp+58h+var_58], rax
.text:00000000000097D3                 mov     [rsp+58h+var_50], r8
.text:00000000000097D8                 mov     rbx, [rbx]
.text:00000000000097DB                 call    _dcgettext
.text:00000000000097E0                 sub     rsp, 8
.text:00000000000097E4
.text:00000000000097E4 loc_97E4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:00000000000097E4                 mov     r9, [rsp+60h+var_48]
.text:00000000000097E9                 mov     rdx, rax
.text:00000000000097EC                 mov     rcx, rbx
.text:00000000000097EF                 mov     esi, 1
.text:00000000000097F4                 mov     rdi, rbp
.text:00000000000097F7                 xor     eax, eax
.text:00000000000097F9                 push    r9
.text:00000000000097FB                 push    r13
.text:00000000000097FD                 push    r12
.text:00000000000097FF                 push    r15
.text:0000000000009801                 push    r14
.text:0000000000009803                 mov     r9, [rsp+88h+var_58]
.text:0000000000009808                 mov     r8, [rsp+88h+var_50]
.text:000000000000980D                 call    ___fprintf_chk
.text:0000000000009812                 add     rsp, 30h
.text:0000000000009816
.text:0000000000009816 loc_9816:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009816                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009816                 add     rsp, 28h        ; jumptable 0000000000009794 case 0
.text:000000000000981A                 pop     rbx
.text:000000000000981B                 pop     rbp
.text:000000000000981C                 pop     r12
.text:000000000000981E                 pop     r13
.text:0000000000009820                 pop     r14
.text:0000000000009822                 pop     r15
.text:0000000000009824                 retn
.text:0000000000009824 ; ---------------------------------------------------------------------------
.text:0000000000009825                 align 8
.text:0000000000009828
.text:0000000000009828 loc_9828:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000009828                 mov     r8, rcx
.text:000000000000982B                 mov     rcx, rdx
.text:000000000000982E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000009835                 mov     esi, 1
.text:000000000000983A                 xor     eax, eax
.text:000000000000983C                 call    ___fprintf_chk
.text:0000000000009841                 jmp     loc_972C
.text:0000000000009841 ; ---------------------------------------------------------------------------
.text:0000000000009846                 align 10h
.text:0000000000009850
.text:0000000000009850 loc_9850:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009850                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009850                 mov     r10, [rbx+40h]  ; jumptable 0000000000009794 case 9
.text:0000000000009854                 mov     r9, [rbx+38h]
.text:0000000000009858                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000985F                 mov     rax, [rbx+10h]
.text:0000000000009863                 mov     r8, [rbx+8]
.text:0000000000009867                 mov     edx, 5          ; category
.text:000000000000986C                 mov     r13, [rbx+30h]
.text:0000000000009870                 mov     r12, [rbx+28h]
.text:0000000000009874                 mov     r15, [rbx+20h]
.text:0000000000009878                 mov     r14, [rbx+18h]
.text:000000000000987C                 mov     rbx, [rbx]
.text:000000000000987F                 mov     [rsp+58h+var_40], r10
.text:0000000000009884                 mov     [rsp+58h+var_48], r9
.text:0000000000009889                 mov     [rsp+58h+var_58], rax
.text:000000000000988D                 mov     [rsp+58h+var_50], r8
.text:0000000000009892
.text:0000000000009892 loc_9892:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000009892                 xor     edi, edi        ; domainname
.text:0000000000009894                 call    _dcgettext
.text:0000000000009899                 mov     r10, [rsp+58h+var_40]
.text:000000000000989E                 push    r10
.text:00000000000098A0                 jmp     loc_97E4
.text:00000000000098A0 ; ---------------------------------------------------------------------------
.text:00000000000098A5                 align 8
.text:00000000000098A8
.text:00000000000098A8 loc_98A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000098A8                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:00000000000098A8                 mov     rbx, [rbx]      ; jumptable 0000000000009794 case 1
.text:00000000000098AB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000098B2                 mov     edx, 5          ; category
.text:00000000000098B7                 xor     edi, edi        ; domainname
.text:00000000000098B9                 call    _dcgettext
.text:00000000000098BE                 add     rsp, 28h
.text:00000000000098C2                 mov     rcx, rbx
.text:00000000000098C5                 mov     rdi, rbp
.text:00000000000098C8                 pop     rbx
.text:00000000000098C9                 pop     rbp
.text:00000000000098CA                 pop     r12
.text:00000000000098CC                 pop     r13
.text:00000000000098CE                 pop     r14
.text:00000000000098D0                 pop     r15
.text:00000000000098D2                 mov     rdx, rax
.text:00000000000098D5                 mov     esi, 1
.text:00000000000098DA                 xor     eax, eax
.text:00000000000098DC                 jmp     ___fprintf_chk
.text:00000000000098DC ; ---------------------------------------------------------------------------
.text:00000000000098E1                 align 8
.text:00000000000098E8
.text:00000000000098E8 loc_98E8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000098E8                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:00000000000098E8                 mov     r12, [rbx+8]    ; jumptable 0000000000009794 case 2
.text:00000000000098EC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000098F3                 mov     rbx, [rbx]
.text:00000000000098F6                 mov     edx, 5          ; category
.text:00000000000098FB                 xor     edi, edi        ; domainname
.text:00000000000098FD                 call    _dcgettext
.text:0000000000009902                 add     rsp, 28h
.text:0000000000009906                 mov     r8, r12
.text:0000000000009909                 mov     rcx, rbx
.text:000000000000990C                 mov     rdi, rbp
.text:000000000000990F                 mov     rdx, rax
.text:0000000000009912                 mov     esi, 1
.text:0000000000009917                 pop     rbx
.text:0000000000009918                 pop     rbp
.text:0000000000009919                 pop     r12
.text:000000000000991B                 pop     r13
.text:000000000000991D                 pop     r14
.text:000000000000991F                 pop     r15
.text:0000000000009921                 xor     eax, eax
.text:0000000000009923                 jmp     ___fprintf_chk
.text:0000000000009923 ; ---------------------------------------------------------------------------
.text:0000000000009928                 align 10h
.text:0000000000009930
.text:0000000000009930 loc_9930:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009930                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009930                 mov     r13, [rbx+10h]  ; jumptable 0000000000009794 case 3
.text:0000000000009934                 mov     r12, [rbx+8]
.text:0000000000009938                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000993F                 mov     rbx, [rbx]
.text:0000000000009942                 mov     edx, 5          ; category
.text:0000000000009947                 xor     edi, edi        ; domainname
.text:0000000000009949                 call    _dcgettext
.text:000000000000994E                 add     rsp, 28h
.text:0000000000009952                 mov     r9, r13
.text:0000000000009955                 mov     r8, r12
.text:0000000000009958                 mov     rcx, rbx
.text:000000000000995B                 mov     rdi, rbp
.text:000000000000995E                 mov     rdx, rax
.text:0000000000009961                 pop     rbx
.text:0000000000009962                 pop     rbp
.text:0000000000009963                 pop     r12
.text:0000000000009965                 pop     r13
.text:0000000000009967                 pop     r14
.text:0000000000009969                 pop     r15
.text:000000000000996B                 mov     esi, 1
.text:0000000000009970                 xor     eax, eax
.text:0000000000009972                 jmp     ___fprintf_chk
.text:0000000000009972 ; ---------------------------------------------------------------------------
.text:0000000000009977                 align 20h
.text:0000000000009980
.text:0000000000009980 loc_9980:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009980                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009980                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000009794 case 4
.text:0000000000009987                 mov     edx, 5          ; category
.text:000000000000998C                 xor     edi, edi        ; domainname
.text:000000000000998E                 mov     r14, [rbx+18h]
.text:0000000000009992                 mov     r13, [rbx+10h]
.text:0000000000009996                 mov     r12, [rbx+8]
.text:000000000000999A                 mov     rbx, [rbx]
.text:000000000000999D                 call    _dcgettext
.text:00000000000099A2                 sub     rsp, 8
.text:00000000000099A6
.text:00000000000099A6 loc_99A6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000099A6                 push    r14
.text:00000000000099A8                 mov     rdx, rax
.text:00000000000099AB                 mov     r9, r13
.text:00000000000099AE                 mov     r8, r12
.text:00000000000099B1                 mov     rcx, rbx
.text:00000000000099B4                 mov     rdi, rbp
.text:00000000000099B7                 mov     esi, 1
.text:00000000000099BC                 xor     eax, eax
.text:00000000000099BE                 call    ___fprintf_chk
.text:00000000000099C3                 pop     rax
.text:00000000000099C4                 pop     rdx
.text:00000000000099C5                 add     rsp, 28h
.text:00000000000099C9                 pop     rbx
.text:00000000000099CA                 pop     rbp
.text:00000000000099CB                 pop     r12
.text:00000000000099CD                 pop     r13
.text:00000000000099CF                 pop     r14
.text:00000000000099D1                 pop     r15
.text:00000000000099D3                 retn
.text:00000000000099D3 ; ---------------------------------------------------------------------------
.text:00000000000099D4                 align 8
.text:00000000000099D8
.text:00000000000099D8 loc_99D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000099D8                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:00000000000099D8                 mov     r15, [rbx+20h]  ; jumptable 0000000000009794 case 5
.text:00000000000099DC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000099E3                 mov     edx, 5          ; category
.text:00000000000099E8                 xor     edi, edi        ; domainname
.text:00000000000099EA                 mov     r14, [rbx+18h]
.text:00000000000099EE                 mov     r13, [rbx+10h]
.text:00000000000099F2                 mov     r12, [rbx+8]
.text:00000000000099F6                 mov     rbx, [rbx]
.text:00000000000099F9                 call    _dcgettext
.text:00000000000099FE                 push    r15
.text:0000000000009A00                 jmp     short loc_99A6
.text:0000000000009A00 ; ---------------------------------------------------------------------------
.text:0000000000009A02                 align 8
.text:0000000000009A08
.text:0000000000009A08 loc_9A08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009A08                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009A08                 mov     r8, [rbx+8]     ; jumptable 0000000000009794 case 6
.text:0000000000009A0C                 mov     r12, [rbx+28h]
.text:0000000000009A10                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000009A17                 mov     r15, [rbx+20h]
.text:0000000000009A1B                 mov     r14, [rbx+18h]
.text:0000000000009A1F                 mov     edx, 5          ; category
.text:0000000000009A24                 mov     r13, [rbx+10h]
.text:0000000000009A28                 xor     edi, edi        ; domainname
.text:0000000000009A2A                 mov     rbx, [rbx]
.text:0000000000009A2D                 mov     [rsp+58h+var_58], r8
.text:0000000000009A31                 call    _dcgettext
.text:0000000000009A36                 sub     rsp, 8
.text:0000000000009A3A                 mov     r9, r13
.text:0000000000009A3D                 push    r12
.text:0000000000009A3F                 push    r15
.text:0000000000009A41                 push    r14
.text:0000000000009A43
.text:0000000000009A43 loc_9A43:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000009A43                 mov     r8, [rsp+78h+var_58]
.text:0000000000009A48                 mov     rcx, rbx
.text:0000000000009A4B                 mov     rdx, rax
.text:0000000000009A4E                 mov     rdi, rbp
.text:0000000000009A51                 mov     esi, 1
.text:0000000000009A56                 xor     eax, eax
.text:0000000000009A58                 call    ___fprintf_chk
.text:0000000000009A5D                 add     rsp, 20h
.text:0000000000009A61                 add     rsp, 28h
.text:0000000000009A65                 pop     rbx
.text:0000000000009A66                 pop     rbp
.text:0000000000009A67                 pop     r12
.text:0000000000009A69                 pop     r13
.text:0000000000009A6B                 pop     r14
.text:0000000000009A6D                 pop     r15
.text:0000000000009A6F                 retn
.text:0000000000009A70 ; ---------------------------------------------------------------------------
.text:0000000000009A70
.text:0000000000009A70 loc_9A70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000009A70                                         ; DATA XREF: .rodata:jpt_9794↓o
.text:0000000000009A70                 mov     r9, [rbx+10h]   ; jumptable 0000000000009794 case 7
.text:0000000000009A74                 mov     r13, [rbx+30h]
.text:0000000000009A78                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000009A7F                 mov     r12, [rbx+28h]
.text:0000000000009A83                 mov     r15, [rbx+20h]
.text:0000000000009A87                 mov     edx, 5          ; category
.text:0000000000009A8C                 mov     r14, [rbx+18h]
.text:0000000000009A90                 mov     r8, [rbx+8]
.text:0000000000009A94                 xor     edi, edi        ; domainname
.text:0000000000009A96                 mov     [rsp+58h+var_50], r9
.text:0000000000009A9B                 mov     rbx, [rbx]
.text:0000000000009A9E                 mov     [rsp+58h+var_58], r8
.text:0000000000009AA2                 call    _dcgettext
.text:0000000000009AA7                 push    r13
.text:0000000000009AA9                 push    r12
.text:0000000000009AAB                 push    r15
.text:0000000000009AAD                 push    r14
.text:0000000000009AAF                 mov     r9, [rsp+78h+var_50]
.text:0000000000009AB4                 jmp     short loc_9A43
.text:0000000000009AB4 ; ---------------------------------------------------------------------------
.text:0000000000009AB6                 align 20h
.text:0000000000009AC0
.text:0000000000009AC0 def_9794:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000009AC0                 mov     r10, [rbx+40h]  ; jumptable 0000000000009794 default case
.text:0000000000009AC4                 mov     r9, [rbx+38h]
.text:0000000000009AC8                 mov     edx, 5
.text:0000000000009ACD                 mov     rax, [rbx+10h]
.text:0000000000009AD1                 mov     r8, [rbx+8]
.text:0000000000009AD5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000009ADC                 mov     r13, [rbx+30h]
.text:0000000000009AE0                 mov     r12, [rbx+28h]
.text:0000000000009AE4                 mov     r15, [rbx+20h]
.text:0000000000009AE8                 mov     r14, [rbx+18h]
.text:0000000000009AEC                 mov     [rsp+58h+var_40], r10
.text:0000000000009AF1                 mov     [rsp+58h+var_48], r9
.text:0000000000009AF6                 mov     [rsp+58h+var_58], rax
.text:0000000000009AFA                 mov     [rsp+58h+var_50], r8
.text:0000000000009AFF                 mov     rbx, [rbx]
.text:0000000000009B02                 jmp     loc_9892
.text:0000000000009B02 ; } // starts at 96F0
.text:0000000000009B02 version_etc_arn endp
.text:0000000000009B02
.text:0000000000009B02 ; ---------------------------------------------------------------------------
.text:0000000000009B07                 align 10h
.text:0000000000009B10
.text:0000000000009B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B10
.text:0000000000009B10 ; Attributes: info_from_lumina
.text:0000000000009B10
.text:0000000000009B10 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000009B10                 public version_etc_ar
.text:0000000000009B10 version_etc_ar  proc near
.text:0000000000009B10 ; __unwind {
.text:0000000000009B10                 xor     r9d, r9d
.text:0000000000009B13                 cmp     qword ptr [r8], 0
.text:0000000000009B17                 jz      short loc_9B2B
.text:0000000000009B19                 nop     dword ptr [rax+00000000h]
.text:0000000000009B20
.text:0000000000009B20 loc_9B20:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000009B20                 add     r9, 1
.text:0000000000009B24                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000009B29                 jnz     short loc_9B20
.text:0000000000009B2B
.text:0000000000009B2B loc_9B2B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000009B2B                 jmp     version_etc_arn
.text:0000000000009B2B ; } // starts at 9B10
.text:0000000000009B2B version_etc_ar  endp
.text:0000000000009B2B
.text:0000000000009B30
.text:0000000000009B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009B30
.text:0000000000009B30 ; Attributes: info_from_lumina
.text:0000000000009B30
.text:0000000000009B30 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000009B30                 public version_etc_va
.text:0000000000009B30 version_etc_va  proc near
.text:0000000000009B30
.text:0000000000009B30 authtab         = qword ptr -68h
.text:0000000000009B30 var_10          = qword ptr -10h
.text:0000000000009B30
.text:0000000000009B30 ; __unwind {
.text:0000000000009B30                 sub     rsp, 68h
.text:0000000000009B34                 mov     r10, r8
.text:0000000000009B37                 xor     r9d, r9d
.text:0000000000009B3A                 mov     rax, fs:28h
.text:0000000000009B43                 mov     [rsp+68h+var_10], rax
.text:0000000000009B48                 xor     eax, eax
.text:0000000000009B4A                 mov     r8, rsp
.text:0000000000009B4D                 nop     dword ptr [rax]
.text:0000000000009B50
.text:0000000000009B50 loc_9B50:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000009B50                 mov     eax, [r10]
.text:0000000000009B53                 cmp     eax, 2Fh ; '/'
.text:0000000000009B56                 ja      short loc_9B9A
.text:0000000000009B58                 mov     r11d, eax
.text:0000000000009B5B                 add     r11, [r10+10h]
.text:0000000000009B5F                 add     eax, 8
.text:0000000000009B62                 mov     [r10], eax
.text:0000000000009B65
.text:0000000000009B65 loc_9B65:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000009B65                 mov     rax, [r11]
.text:0000000000009B68                 test    rax, rax
.text:0000000000009B6B                 mov     [r8+r9*8], rax
.text:0000000000009B6F                 jz      short loc_9B7B
.text:0000000000009B71                 add     r9, 1
.text:0000000000009B75                 cmp     r9, 0Ah
.text:0000000000009B79                 jnz     short loc_9B50
.text:0000000000009B7B
.text:0000000000009B7B loc_9B7B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000009B7B                 call    version_etc_arn
.text:0000000000009B80                 mov     rax, [rsp+68h+var_10]
.text:0000000000009B85                 xor     rax, fs:28h
.text:0000000000009B8E                 jnz     short loc_9B95
.text:0000000000009B90                 add     rsp, 68h
.text:0000000000009B94                 retn
.text:0000000000009B95 ; ---------------------------------------------------------------------------
.text:0000000000009B95
.text:0000000000009B95 loc_9B95:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000009B95                 call    ___stack_chk_fail
.text:0000000000009B9A ; ---------------------------------------------------------------------------
.text:0000000000009B9A
.text:0000000000009B9A loc_9B9A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000009B9A                 mov     r11, [r10+8]
.text:0000000000009B9E                 lea     rax, [r11+8]
.text:0000000000009BA2                 mov     [r10+8], rax
.text:0000000000009BA6                 jmp     short loc_9B65
.text:0000000000009BA6 ; } // starts at 9B30
.text:0000000000009BA6 version_etc_va  endp
.text:0000000000009BA6
.text:0000000000009BA6 ; ---------------------------------------------------------------------------
.text:0000000000009BA8                 align 10h
.text:0000000000009BB0
.text:0000000000009BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009BB0
.text:0000000000009BB0 ; Attributes: info_from_lumina
.text:0000000000009BB0
.text:0000000000009BB0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000009BB0                 public version_etc
.text:0000000000009BB0 version_etc     proc near               ; CODE XREF: main+74D↑p
.text:0000000000009BB0
.text:0000000000009BB0 var_C0          = dword ptr -0C0h
.text:0000000000009BB0 var_B8          = qword ptr -0B8h
.text:0000000000009BB0 var_B0          = qword ptr -0B0h
.text:0000000000009BB0 var_A8          = byte ptr -0A8h
.text:0000000000009BB0 var_50          = qword ptr -50h
.text:0000000000009BB0 var_48          = byte ptr -48h
.text:0000000000009BB0 var_28          = qword ptr -28h
.text:0000000000009BB0 var_20          = qword ptr -20h
.text:0000000000009BB0 arg_0           = byte ptr  8
.text:0000000000009BB0
.text:0000000000009BB0 ; __unwind {
.text:0000000000009BB0                 push    rbp
.text:0000000000009BB1                 push    rbx
.text:0000000000009BB2                 mov     r10d, 20h ; ' '
.text:0000000000009BB8                 xor     r11d, r11d
.text:0000000000009BBB                 sub     rsp, 0B8h
.text:0000000000009BC2                 mov     rax, fs:28h
.text:0000000000009BCB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000009BD0                 xor     eax, eax
.text:0000000000009BD2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000009BDA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000009BE2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000009BEA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000009BEF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000009BF7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000009BFF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000009C04                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000009C0C                 xor     r9d, r9d
.text:0000000000009C0F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000009C14                 mov     rbp, rax
.text:0000000000009C17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009C20
.text:0000000000009C20 loc_9C20:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000009C20                 cmp     r10d, 2Fh ; '/'
.text:0000000000009C24                 ja      short loc_9C7C
.text:0000000000009C26                 mov     eax, r10d
.text:0000000000009C29                 mov     r11d, 1
.text:0000000000009C2F                 add     r10d, 8
.text:0000000000009C33                 add     rax, rbp
.text:0000000000009C36
.text:0000000000009C36 loc_9C36:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000009C36                 mov     rax, [rax]
.text:0000000000009C39                 test    rax, rax
.text:0000000000009C3C                 mov     [r8+r9*8], rax
.text:0000000000009C40                 jz      short loc_9C4C
.text:0000000000009C42                 add     r9, 1
.text:0000000000009C46                 cmp     r9, 0Ah
.text:0000000000009C4A                 jnz     short loc_9C20
.text:0000000000009C4C
.text:0000000000009C4C loc_9C4C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000009C4C                 test    r11b, r11b
.text:0000000000009C4F                 jnz     short loc_9C75
.text:0000000000009C51
.text:0000000000009C51 loc_9C51:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000009C51                 call    version_etc_arn
.text:0000000000009C56                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000009C5B                 xor     rax, fs:28h
.text:0000000000009C64                 jnz     short loc_9C70
.text:0000000000009C66                 add     rsp, 0B8h
.text:0000000000009C6D                 pop     rbx
.text:0000000000009C6E                 pop     rbp
.text:0000000000009C6F                 retn
.text:0000000000009C70 ; ---------------------------------------------------------------------------
.text:0000000000009C70
.text:0000000000009C70 loc_9C70:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000009C70                 call    ___stack_chk_fail
.text:0000000000009C75 ; ---------------------------------------------------------------------------
.text:0000000000009C75
.text:0000000000009C75 loc_9C75:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000009C75                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000009C7A                 jmp     short loc_9C51
.text:0000000000009C7C ; ---------------------------------------------------------------------------
.text:0000000000009C7C
.text:0000000000009C7C loc_9C7C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000009C7C                 mov     rax, rbx
.text:0000000000009C7F                 add     rbx, 8
.text:0000000000009C83                 jmp     short loc_9C36
.text:0000000000009C83 ; } // starts at 9BB0
.text:0000000000009C83 version_etc     endp
.text:0000000000009C83
.text:0000000000009C83 ; ---------------------------------------------------------------------------
.text:0000000000009C85                 align 10h
.text:0000000000009C90
.text:0000000000009C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000009C90
.text:0000000000009C90 ; Attributes: info_from_lumina
.text:0000000000009C90
.text:0000000000009C90 ; void __cdecl emit_bug_reporting_address()
.text:0000000000009C90                 public emit_bug_reporting_address
.text:0000000000009C90 emit_bug_reporting_address proc near
.text:0000000000009C90 ; __unwind {
.text:0000000000009C90                 push    rbx
.text:0000000000009C91                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000009C98                 mov     edx, 5          ; category
.text:0000000000009C9D                 xor     edi, edi        ; domainname
.text:0000000000009C9F                 call    _dcgettext
.text:0000000000009CA4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000009CAB                 mov     rsi, rax
.text:0000000000009CAE                 mov     edi, 1
.text:0000000000009CB3                 xor     eax, eax
.text:0000000000009CB5                 call    ___printf_chk
.text:0000000000009CBA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000009CC1                 mov     edx, 5          ; category
.text:0000000000009CC6                 xor     edi, edi        ; domainname
.text:0000000000009CC8                 call    _dcgettext
.text:0000000000009CCD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000009CD4                 lea     rdx, unk_BF75
.text:0000000000009CDB                 mov     rsi, rax
.text:0000000000009CDE                 mov     edi, 1
.text:0000000000009CE3                 xor     eax, eax
.text:0000000000009CE5                 call    ___printf_chk
.text:0000000000009CEA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000009CF1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000009CF8                 xor     edi, edi        ; domainname
.text:0000000000009CFA                 mov     edx, 5          ; category
.text:0000000000009CFF                 call    _dcgettext
.text:0000000000009D04                 mov     rsi, rbx        ; stream
.text:0000000000009D07                 mov     rdi, rax        ; s
.text:0000000000009D0A                 pop     rbx
.text:0000000000009D0B                 jmp     _fputs_unlocked
.text:0000000000009D0B ; } // starts at 9C90
.text:0000000000009D0B emit_bug_reporting_address endp
.text:0000000000009D0B
.text:0000000000009D10
.text:0000000000009D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D10
.text:0000000000009D10
.text:0000000000009D10                 public xmalloc
.text:0000000000009D10 xmalloc         proc near               ; CODE XREF: main+8C↑p
.text:0000000000009D10                                         ; init_header+B9↑p ...
.text:0000000000009D10 ; __unwind {
.text:0000000000009D10                 push    rbx
.text:0000000000009D11                 mov     rbx, rdi
.text:0000000000009D14                 call    _malloc
.text:0000000000009D19                 test    rax, rax
.text:0000000000009D1C                 jnz     short loc_9D23
.text:0000000000009D1E                 test    rbx, rbx
.text:0000000000009D21                 jnz     short loc_9D25
.text:0000000000009D23
.text:0000000000009D23 loc_9D23:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000009D23                 pop     rbx
.text:0000000000009D24                 retn
.text:0000000000009D25 ; ---------------------------------------------------------------------------
.text:0000000000009D25
.text:0000000000009D25 loc_9D25:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000009D25                 call    xalloc_die
.text:0000000000009D25 ; } // starts at 9D10
.text:0000000000009D25 xmalloc         endp
.text:0000000000009D25
.text:0000000000009D25 ; ---------------------------------------------------------------------------
.text:0000000000009D2A                 align 10h
.text:0000000000009D30
.text:0000000000009D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D30
.text:0000000000009D30 ; Attributes: info_from_lumina
.text:0000000000009D30
.text:0000000000009D30 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000009D30                 public xnmalloc
.text:0000000000009D30 xnmalloc        proc near
.text:0000000000009D30 ; __unwind {
.text:0000000000009D30                 mov     rax, rdi
.text:0000000000009D33                 mul     rsi
.text:0000000000009D36                 mov     rdi, rax
.text:0000000000009D39                 seto    al
.text:0000000000009D3C                 test    rdi, rdi
.text:0000000000009D3F                 js      short loc_9D4B
.text:0000000000009D41                 movzx   eax, al
.text:0000000000009D44                 test    rax, rax
.text:0000000000009D47                 jnz     short loc_9D4B
.text:0000000000009D49                 jmp     short xmalloc
.text:0000000000009D4B ; ---------------------------------------------------------------------------
.text:0000000000009D4B
.text:0000000000009D4B loc_9D4B:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000009D4B                                         ; xnmalloc+17↑j
.text:0000000000009D4B                 sub     rsp, 8
.text:0000000000009D4F                 call    xalloc_die
.text:0000000000009D4F ; } // starts at 9D30
.text:0000000000009D4F xnmalloc        endp
.text:0000000000009D4F
.text:0000000000009D4F ; ---------------------------------------------------------------------------
.text:0000000000009D54                 align 20h
.text:0000000000009D60
.text:0000000000009D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D60
.text:0000000000009D60
.text:0000000000009D60                 public xcharalloc
.text:0000000000009D60 xcharalloc      proc near
.text:0000000000009D60 ; __unwind {
.text:0000000000009D60                 jmp     short xmalloc
.text:0000000000009D60 ; } // starts at 9D60
.text:0000000000009D60 xcharalloc      endp
.text:0000000000009D60
.text:0000000000009D60 ; ---------------------------------------------------------------------------
.text:0000000000009D62                 align 10h
.text:0000000000009D70
.text:0000000000009D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D70
.text:0000000000009D70 ; Attributes: info_from_lumina
.text:0000000000009D70
.text:0000000000009D70 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000009D70                 public xrealloc
.text:0000000000009D70 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000009D70                                         ; quotearg_n_options+182↑p ...
.text:0000000000009D70 ; __unwind {
.text:0000000000009D70                 test    rsi, rsi
.text:0000000000009D73                 push    rbx
.text:0000000000009D74                 mov     rbx, rsi
.text:0000000000009D77                 jnz     short loc_9D7E
.text:0000000000009D79                 test    rdi, rdi
.text:0000000000009D7C                 jnz     short loc_9D98
.text:0000000000009D7E
.text:0000000000009D7E loc_9D7E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000009D7E                 mov     rsi, rbx        ; size
.text:0000000000009D81                 call    _realloc
.text:0000000000009D86                 test    rax, rax
.text:0000000000009D89                 jnz     short loc_9D90
.text:0000000000009D8B                 test    rbx, rbx
.text:0000000000009D8E                 jnz     short loc_9DA1
.text:0000000000009D90
.text:0000000000009D90 loc_9D90:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000009D90                 pop     rbx
.text:0000000000009D91                 retn
.text:0000000000009D91 ; ---------------------------------------------------------------------------
.text:0000000000009D92                 align 8
.text:0000000000009D98
.text:0000000000009D98 loc_9D98:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000009D98                 call    _free
.text:0000000000009D9D                 xor     eax, eax
.text:0000000000009D9F                 pop     rbx
.text:0000000000009DA0                 retn
.text:0000000000009DA1 ; ---------------------------------------------------------------------------
.text:0000000000009DA1
.text:0000000000009DA1 loc_9DA1:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000009DA1                 call    xalloc_die
.text:0000000000009DA1 ; } // starts at 9D70
.text:0000000000009DA1 xrealloc        endp
.text:0000000000009DA1
.text:0000000000009DA1 ; ---------------------------------------------------------------------------
.text:0000000000009DA6                 align 10h
.text:0000000000009DB0
.text:0000000000009DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DB0
.text:0000000000009DB0 ; Attributes: info_from_lumina
.text:0000000000009DB0
.text:0000000000009DB0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000009DB0                 public xnrealloc
.text:0000000000009DB0 xnrealloc       proc near
.text:0000000000009DB0 ; __unwind {
.text:0000000000009DB0                 mov     rax, rsi
.text:0000000000009DB3                 mul     rdx
.text:0000000000009DB6                 mov     rsi, rax
.text:0000000000009DB9                 seto    al
.text:0000000000009DBC                 test    rsi, rsi
.text:0000000000009DBF                 js      short loc_9DCB
.text:0000000000009DC1                 movzx   eax, al
.text:0000000000009DC4                 test    rax, rax
.text:0000000000009DC7                 jnz     short loc_9DCB
.text:0000000000009DC9                 jmp     short xrealloc
.text:0000000000009DCB ; ---------------------------------------------------------------------------
.text:0000000000009DCB
.text:0000000000009DCB loc_9DCB:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000009DCB                                         ; xnrealloc+17↑j
.text:0000000000009DCB                 sub     rsp, 8
.text:0000000000009DCF                 call    xalloc_die
.text:0000000000009DCF ; } // starts at 9DB0
.text:0000000000009DCF xnrealloc       endp
.text:0000000000009DCF
.text:0000000000009DCF ; ---------------------------------------------------------------------------
.text:0000000000009DD4                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DE0
.text:0000000000009DE0 ; Attributes: info_from_lumina
.text:0000000000009DE0
.text:0000000000009DE0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000009DE0                 public x2nrealloc
.text:0000000000009DE0 x2nrealloc      proc near
.text:0000000000009DE0 ; __unwind {
.text:0000000000009DE0                 test    rdi, rdi
.text:0000000000009DE3                 mov     r9, rdx
.text:0000000000009DE6                 mov     rcx, [rsi]
.text:0000000000009DE9                 jz      short loc_9E20
.text:0000000000009DEB                 xor     edx, edx
.text:0000000000009DED                 mov     rax, 5555555555555554h
.text:0000000000009DF7                 div     r9
.text:0000000000009DFA                 cmp     rax, rcx
.text:0000000000009DFD                 jbe     short loc_9E3B
.text:0000000000009DFF                 mov     rax, rcx
.text:0000000000009E02                 shr     rax, 1
.text:0000000000009E05                 lea     rcx, [rax+rcx+1]
.text:0000000000009E0A
.text:0000000000009E0A loc_9E0A:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000009E0A                 mov     [rsi], rcx
.text:0000000000009E0D                 imul    rcx, r9
.text:0000000000009E11                 mov     rsi, rcx
.text:0000000000009E14                 jmp     xrealloc
.text:0000000000009E14 ; ---------------------------------------------------------------------------
.text:0000000000009E19                 align 20h
.text:0000000000009E20
.text:0000000000009E20 loc_9E20:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000009E20                 test    rcx, rcx
.text:0000000000009E23                 jz      short loc_9E48
.text:0000000000009E25
.text:0000000000009E25 loc_9E25:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000009E25                 mov     rax, rcx
.text:0000000000009E28                 mul     r9
.text:0000000000009E2B                 seto    dl
.text:0000000000009E2E                 test    rax, rax
.text:0000000000009E31                 movzx   edx, dl
.text:0000000000009E34                 js      short loc_9E3B
.text:0000000000009E36                 test    rdx, rdx
.text:0000000000009E39                 jz      short loc_9E0A
.text:0000000000009E3B
.text:0000000000009E3B loc_9E3B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000009E3B                                         ; x2nrealloc+54↑j
.text:0000000000009E3B                 sub     rsp, 8
.text:0000000000009E3F                 call    xalloc_die
.text:0000000000009E3F ; ---------------------------------------------------------------------------
.text:0000000000009E44                 align 8
.text:0000000000009E48
.text:0000000000009E48 loc_9E48:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000009E48                 xor     edx, edx
.text:0000000000009E4A                 mov     eax, 80h
.text:0000000000009E4F                 xor     r8d, r8d
.text:0000000000009E52                 div     r9
.text:0000000000009E55                 test    rax, rax
.text:0000000000009E58                 setz    r8b
.text:0000000000009E5C                 lea     rcx, [r8+rax]
.text:0000000000009E60                 jmp     short loc_9E25
.text:0000000000009E60 ; } // starts at 9DE0
.text:0000000000009E60 x2nrealloc      endp
.text:0000000000009E60
.text:0000000000009E60 ; ---------------------------------------------------------------------------
.text:0000000000009E62                 align 10h
.text:0000000000009E70
.text:0000000000009E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009E70
.text:0000000000009E70 ; Attributes: info_from_lumina
.text:0000000000009E70
.text:0000000000009E70 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000009E70                 public x2realloc
.text:0000000000009E70 x2realloc       proc near               ; CODE XREF: main+151↑p
.text:0000000000009E70                                         ; store_char+26↑p
.text:0000000000009E70 ; __unwind {
.text:0000000000009E70                 test    rdi, rdi
.text:0000000000009E73                 mov     rax, [rsi]
.text:0000000000009E76                 jz      short loc_9EA0
.text:0000000000009E78                 mov     rdx, 5555555555555553h
.text:0000000000009E82                 cmp     rax, rdx
.text:0000000000009E85                 ja      short loc_9EB1
.text:0000000000009E87                 mov     rdx, rax
.text:0000000000009E8A                 shr     rdx, 1
.text:0000000000009E8D                 lea     rax, [rdx+rax+1]
.text:0000000000009E92
.text:0000000000009E92 loc_9E92:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000009E92                 mov     [rsi], rax
.text:0000000000009E95                 mov     rsi, rax
.text:0000000000009E98                 jmp     xrealloc
.text:0000000000009E98 ; ---------------------------------------------------------------------------
.text:0000000000009E9D                 align 20h
.text:0000000000009EA0
.text:0000000000009EA0 loc_9EA0:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000009EA0                 test    rax, rax
.text:0000000000009EA3                 mov     edx, 80h
.text:0000000000009EA8                 cmovz   rax, rdx
.text:0000000000009EAC                 test    rax, rax
.text:0000000000009EAF                 jns     short loc_9E92
.text:0000000000009EB1
.text:0000000000009EB1 loc_9EB1:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000009EB1                 sub     rsp, 8
.text:0000000000009EB5                 call    xalloc_die
.text:0000000000009EB5 ; } // starts at 9E70
.text:0000000000009EB5 x2realloc       endp
.text:0000000000009EB5
.text:0000000000009EB5 ; ---------------------------------------------------------------------------
.text:0000000000009EBA                 align 20h
.text:0000000000009EC0
.text:0000000000009EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EC0
.text:0000000000009EC0
.text:0000000000009EC0 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000009EC0                 public xzalloc
.text:0000000000009EC0 xzalloc         proc near
.text:0000000000009EC0 ; __unwind {
.text:0000000000009EC0                 push    rbx
.text:0000000000009EC1                 mov     rbx, rdi
.text:0000000000009EC4                 call    xmalloc
.text:0000000000009EC9                 mov     rdx, rbx        ; n
.text:0000000000009ECC                 xor     esi, esi        ; c
.text:0000000000009ECE                 mov     rdi, rax        ; s
.text:0000000000009ED1                 pop     rbx
.text:0000000000009ED2                 jmp     _memset
.text:0000000000009ED2 ; } // starts at 9EC0
.text:0000000000009ED2 xzalloc         endp
.text:0000000000009ED2
.text:0000000000009ED2 ; ---------------------------------------------------------------------------
.text:0000000000009ED7                 align 20h
.text:0000000000009EE0
.text:0000000000009EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009EE0
.text:0000000000009EE0 ; Attributes: info_from_lumina
.text:0000000000009EE0
.text:0000000000009EE0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000009EE0                 public xcalloc
.text:0000000000009EE0 xcalloc         proc near
.text:0000000000009EE0 ; __unwind {
.text:0000000000009EE0                 mov     rax, rdi
.text:0000000000009EE3                 sub     rsp, 8
.text:0000000000009EE7                 mul     rsi
.text:0000000000009EEA                 seto    dl
.text:0000000000009EED                 test    rax, rax
.text:0000000000009EF0                 js      short loc_9F09
.text:0000000000009EF2                 movzx   edx, dl
.text:0000000000009EF5                 test    rdx, rdx
.text:0000000000009EF8                 jnz     short loc_9F09
.text:0000000000009EFA                 call    _calloc
.text:0000000000009EFF                 test    rax, rax
.text:0000000000009F02                 jz      short loc_9F09
.text:0000000000009F04                 add     rsp, 8
.text:0000000000009F08                 retn
.text:0000000000009F09 ; ---------------------------------------------------------------------------
.text:0000000000009F09
.text:0000000000009F09 loc_9F09:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000009F09                                         ; xcalloc+18↑j ...
.text:0000000000009F09                 call    xalloc_die
.text:0000000000009F09 ; } // starts at 9EE0
.text:0000000000009F09 xcalloc         endp
.text:0000000000009F09
.text:0000000000009F09 ; ---------------------------------------------------------------------------
.text:0000000000009F0E                 align 10h
.text:0000000000009F10
.text:0000000000009F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F10
.text:0000000000009F10 ; Attributes: info_from_lumina
.text:0000000000009F10
.text:0000000000009F10 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000009F10                 public xmemdup
.text:0000000000009F10 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000009F10                                         ; xstrdup+11↓j
.text:0000000000009F10 ; __unwind {
.text:0000000000009F10                 push    rbp
.text:0000000000009F11                 push    rbx
.text:0000000000009F12                 mov     rbp, rdi
.text:0000000000009F15                 mov     rdi, rsi
.text:0000000000009F18                 mov     rbx, rsi
.text:0000000000009F1B                 sub     rsp, 8
.text:0000000000009F1F                 call    xmalloc
.text:0000000000009F24                 add     rsp, 8
.text:0000000000009F28                 mov     rdx, rbx        ; n
.text:0000000000009F2B                 mov     rsi, rbp        ; src
.text:0000000000009F2E                 pop     rbx
.text:0000000000009F2F                 pop     rbp
.text:0000000000009F30                 mov     rdi, rax        ; dest
.text:0000000000009F33                 jmp     _memcpy
.text:0000000000009F33 ; } // starts at 9F10
.text:0000000000009F33 xmemdup         endp
.text:0000000000009F33
.text:0000000000009F33 ; ---------------------------------------------------------------------------
.text:0000000000009F38                 align 20h
.text:0000000000009F40
.text:0000000000009F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F40
.text:0000000000009F40
.text:0000000000009F40 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000009F40                 public xstrdup
.text:0000000000009F40 xstrdup         proc near
.text:0000000000009F40 ; __unwind {
.text:0000000000009F40                 push    rbx
.text:0000000000009F41                 mov     rbx, rdi
.text:0000000000009F44                 call    _strlen
.text:0000000000009F49                 mov     rdi, rbx        ; src
.text:0000000000009F4C                 lea     rsi, [rax+1]    ; n
.text:0000000000009F50                 pop     rbx
.text:0000000000009F51                 jmp     short xmemdup
.text:0000000000009F51 ; } // starts at 9F40
.text:0000000000009F51 xstrdup         endp
.text:0000000000009F51
.text:0000000000009F51 ; ---------------------------------------------------------------------------
.text:0000000000009F53                 align 20h
.text:0000000000009F60
.text:0000000000009F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F60
.text:0000000000009F60 ; Attributes: noreturn info_from_lumina
.text:0000000000009F60
.text:0000000000009F60 ; void __cdecl xalloc_die()
.text:0000000000009F60                 public xalloc_die
.text:0000000000009F60 xalloc_die      proc near               ; CODE XREF: print_files:loc_527D↑p
.text:0000000000009F60                                         ; quotearg_n_options:loc_8F26↑p ...
.text:0000000000009F60 ; __unwind {
.text:0000000000009F60                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000009F67                 sub     rsp, 8
.text:0000000000009F6B                 mov     edx, 5          ; category
.text:0000000000009F70                 xor     edi, edi        ; domainname
.text:0000000000009F72                 call    _dcgettext
.text:0000000000009F77                 mov     edi, cs:exit_failure ; status
.text:0000000000009F7D                 lea     rdx, format+4   ; format
.text:0000000000009F84                 mov     rcx, rax
.text:0000000000009F87                 xor     esi, esi        ; errnum
.text:0000000000009F89                 xor     eax, eax
.text:0000000000009F8B                 call    _error
.text:0000000000009F90                 call    _abort
.text:0000000000009F90 ; } // starts at 9F60
.text:0000000000009F90 xalloc_die      endp
.text:0000000000009F90
.text:0000000000009F90 ; ---------------------------------------------------------------------------
.text:0000000000009F95                 align 20h
.text:0000000000009FA0
.text:0000000000009FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009FA0
.text:0000000000009FA0
.text:0000000000009FA0                 public xnumtoimax
.text:0000000000009FA0 xnumtoimax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000009FA0
.text:0000000000009FA0 var_48          = qword ptr -48h
.text:0000000000009FA0 var_40          = qword ptr -40h
.text:0000000000009FA0 arg_0           = dword ptr  8
.text:0000000000009FA0
.text:0000000000009FA0 ; __unwind {
.text:0000000000009FA0                 push    r15
.text:0000000000009FA2                 push    r14
.text:0000000000009FA4                 mov     r15, rcx
.text:0000000000009FA7                 push    r13
.text:0000000000009FA9                 push    r12
.text:0000000000009FAB                 mov     r14, rdx
.text:0000000000009FAE                 push    rbp
.text:0000000000009FAF                 push    rbx
.text:0000000000009FB0                 mov     edx, esi
.text:0000000000009FB2                 xor     esi, esi
.text:0000000000009FB4                 mov     r12, rdi
.text:0000000000009FB7                 mov     r13, r9
.text:0000000000009FBA                 sub     rsp, 18h
.text:0000000000009FBE                 mov     rcx, rsp
.text:0000000000009FC1                 mov     ebx, [rsp+48h+arg_0]
.text:0000000000009FC5                 mov     rax, fs:28h
.text:0000000000009FCE                 mov     [rsp+48h+var_40], rax
.text:0000000000009FD3                 xor     eax, eax
.text:0000000000009FD5                 call    xstrtoimax
.text:0000000000009FDA                 test    eax, eax
.text:0000000000009FDC                 jnz     loc_A070
.text:0000000000009FE2                 mov     rbp, [rsp+48h+var_48]
.text:0000000000009FE6                 cmp     rbp, r14
.text:0000000000009FE9                 jl      short loc_9FF0
.text:0000000000009FEB                 cmp     rbp, r15
.text:0000000000009FEE                 jle     short loc_A046
.text:0000000000009FF0
.text:0000000000009FF0 loc_9FF0:                               ; CODE XREF: xnumtoimax+49↑j
.text:0000000000009FF0                 call    ___errno_location
.text:0000000000009FF5                 cmp     rbp, 3FFFFFFFh
.text:0000000000009FFC                 mov     r14, rax
.text:0000000000009FFF                 jle     loc_A090
.text:000000000000A005
.text:000000000000A005 loc_A005:                               ; CODE XREF: xnumtoimax+DD↓j
.text:000000000000A005                 mov     dword ptr [r14], 4Bh ; 'K'
.text:000000000000A00C
.text:000000000000A00C loc_A00C:                               ; CODE XREF: xnumtoimax+E2↓j
.text:000000000000A00C                                         ; xnumtoimax+EA↓j ...
.text:000000000000A00C                 mov     rdi, r12
.text:000000000000A00F                 call    quote
.text:000000000000A014                 mov     esi, [r14]
.text:000000000000A017                 mov     r8, rax
.text:000000000000A01A                 mov     eax, 0
.text:000000000000A01F                 lea     rdx, format     ; "%s: %s"
.text:000000000000A026                 mov     rcx, r13
.text:000000000000A029                 cmp     esi, 16h
.text:000000000000A02C                 cmovz   esi, eax        ; errnum
.text:000000000000A02F                 test    ebx, ebx
.text:000000000000A031                 mov     eax, 1
.text:000000000000A036                 cmovz   ebx, eax
.text:000000000000A039                 xor     eax, eax
.text:000000000000A03B                 mov     edi, ebx        ; status
.text:000000000000A03D                 call    _error
.text:000000000000A042                 mov     rbp, [rsp+48h+var_48]
.text:000000000000A046
.text:000000000000A046 loc_A046:                               ; CODE XREF: xnumtoimax+4E↑j
.text:000000000000A046                 mov     rdx, [rsp+48h+var_40]
.text:000000000000A04B                 xor     rdx, fs:28h
.text:000000000000A054                 mov     rax, rbp
.text:000000000000A057                 jnz     short loc_A0AC
.text:000000000000A059                 add     rsp, 18h
.text:000000000000A05D                 pop     rbx
.text:000000000000A05E                 pop     rbp
.text:000000000000A05F                 pop     r12
.text:000000000000A061                 pop     r13
.text:000000000000A063                 pop     r14
.text:000000000000A065                 pop     r15
.text:000000000000A067                 retn
.text:000000000000A067 ; ---------------------------------------------------------------------------
.text:000000000000A068                 align 10h
.text:000000000000A070
.text:000000000000A070 loc_A070:                               ; CODE XREF: xnumtoimax+3C↑j
.text:000000000000A070                 mov     ebp, eax
.text:000000000000A072                 call    ___errno_location
.text:000000000000A077                 cmp     ebp, 1
.text:000000000000A07A                 mov     r14, rax
.text:000000000000A07D                 jz      short loc_A005
.text:000000000000A07F                 cmp     ebp, 3
.text:000000000000A082                 jnz     short loc_A00C
.text:000000000000A084                 mov     dword ptr [rax], 0
.text:000000000000A08A                 jmp     short loc_A00C
.text:000000000000A08A ; ---------------------------------------------------------------------------
.text:000000000000A08C                 align 10h
.text:000000000000A090
.text:000000000000A090 loc_A090:                               ; CODE XREF: xnumtoimax+5F↑j
.text:000000000000A090                 cmp     rbp, 0FFFFFFFFBFFFFFFFh
.text:000000000000A097                 mov     eax, 22h ; '"'
.text:000000000000A09C                 mov     edx, 4Bh ; 'K'
.text:000000000000A0A1                 cmovle  eax, edx
.text:000000000000A0A4                 mov     [r14], eax
.text:000000000000A0A7                 jmp     loc_A00C
.text:000000000000A0AC ; ---------------------------------------------------------------------------
.text:000000000000A0AC
.text:000000000000A0AC loc_A0AC:                               ; CODE XREF: xnumtoimax+B7↑j
.text:000000000000A0AC                 call    ___stack_chk_fail
.text:000000000000A0AC ; } // starts at 9FA0
.text:000000000000A0AC xnumtoimax      endp
.text:000000000000A0AC
.text:000000000000A0AC ; ---------------------------------------------------------------------------
.text:000000000000A0B1                 align 20h
.text:000000000000A0C0
.text:000000000000A0C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0C0
.text:000000000000A0C0 ; Attributes: info_from_lumina
.text:000000000000A0C0
.text:000000000000A0C0 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:000000000000A0C0                 public xdectoumax
.text:000000000000A0C0 xdectoumax      proc near               ; CODE XREF: main+39F↑p
.text:000000000000A0C0                                         ; main+46F↑p ...
.text:000000000000A0C0 ; __unwind {
.text:000000000000A0C0                 sub     rsp, 10h
.text:000000000000A0C4                 push    r9
.text:000000000000A0C6                 mov     r9, r8
.text:000000000000A0C9                 mov     r8, rcx
.text:000000000000A0CC                 mov     rcx, rdx
.text:000000000000A0CF                 mov     rdx, rsi
.text:000000000000A0D2                 mov     esi, 0Ah
.text:000000000000A0D7                 call    xnumtoimax
.text:000000000000A0DC                 add     rsp, 18h
.text:000000000000A0E0                 retn
.text:000000000000A0E0 ; } // starts at A0C0
.text:000000000000A0E0 xdectoumax      endp
.text:000000000000A0E0
.text:000000000000A0E0 ; ---------------------------------------------------------------------------
.text:000000000000A0E1                 align 10h
.text:000000000000A0F0
.text:000000000000A0F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A0F0
.text:000000000000A0F0
.text:000000000000A0F0 ; __int64 __fastcall xstrtoimax(char *nptr)
.text:000000000000A0F0                 public xstrtoimax
.text:000000000000A0F0 xstrtoimax      proc near               ; CODE XREF: xnumtoimax+35↑p
.text:000000000000A0F0
.text:000000000000A0F0 var_50          = qword ptr -50h
.text:000000000000A0F0 endptr          = qword ptr -48h
.text:000000000000A0F0 var_40          = qword ptr -40h
.text:000000000000A0F0
.text:000000000000A0F0 ; __unwind {
.text:000000000000A0F0                 push    r15
.text:000000000000A0F2                 push    r14
.text:000000000000A0F4                 push    r13
.text:000000000000A0F6                 push    r12
.text:000000000000A0F8                 push    rbp
.text:000000000000A0F9                 push    rbx
.text:000000000000A0FA                 sub     rsp, 28h
.text:000000000000A0FE                 mov     rax, fs:28h
.text:000000000000A107                 mov     [rsp+58h+var_40], rax
.text:000000000000A10C                 xor     eax, eax
.text:000000000000A10E                 cmp     edx, 24h ; '$'
.text:000000000000A111                 ja      loc_A77F
.text:000000000000A117                 lea     rax, [rsp+58h+endptr]
.text:000000000000A11C                 test    rsi, rsi
.text:000000000000A11F                 mov     rbx, rsi
.text:000000000000A122                 mov     r12, rdi
.text:000000000000A125                 mov     ebp, edx
.text:000000000000A127                 mov     r14, rcx
.text:000000000000A12A                 cmovz   rbx, rax
.text:000000000000A12E                 mov     r15, r8
.text:000000000000A131                 call    ___errno_location
.text:000000000000A136                 xor     ecx, ecx        ; group
.text:000000000000A138                 mov     edx, ebp        ; base
.text:000000000000A13A                 mov     dword ptr [rax], 0
.text:000000000000A140                 mov     rsi, rbx        ; endptr
.text:000000000000A143                 mov     rdi, r12        ; nptr
.text:000000000000A146                 mov     r13, rax
.text:000000000000A149                 call    ___strtol_internal
.text:000000000000A14E                 mov     rcx, [rbx]
.text:000000000000A151                 mov     rbp, rax
.text:000000000000A154                 cmp     rcx, r12
.text:000000000000A157                 jz      short loc_A1B8
.text:000000000000A159                 mov     eax, [r13+0]
.text:000000000000A15D                 test    eax, eax
.text:000000000000A15F                 jnz     short loc_A1A0
.text:000000000000A161                 xor     r12d, r12d
.text:000000000000A164
.text:000000000000A164 loc_A164:                               ; CODE XREF: xstrtoimax+C1↓j
.text:000000000000A164                 test    r15, r15
.text:000000000000A167                 jz      short loc_A176
.text:000000000000A169                 movzx   r13d, byte ptr [rcx]
.text:000000000000A16D                 test    r13b, r13b
.text:000000000000A170                 jnz     loc_A1F3
.text:000000000000A176
.text:000000000000A176 loc_A176:                               ; CODE XREF: xstrtoimax+77↑j
.text:000000000000A176                                         ; xstrtoimax+226↓j
.text:000000000000A176                 mov     [r14], rbp
.text:000000000000A179
.text:000000000000A179 loc_A179:                               ; CODE XREF: xstrtoimax+B9↓j
.text:000000000000A179                                         ; xstrtoimax+E3↓j ...
.text:000000000000A179                 mov     rdi, [rsp+58h+var_40]
.text:000000000000A17E                 xor     rdi, fs:28h
.text:000000000000A187                 mov     eax, r12d
.text:000000000000A18A                 jnz     loc_A79E
.text:000000000000A190                 add     rsp, 28h
.text:000000000000A194                 pop     rbx
.text:000000000000A195                 pop     rbp
.text:000000000000A196                 pop     r12
.text:000000000000A198                 pop     r13
.text:000000000000A19A                 pop     r14
.text:000000000000A19C                 pop     r15
.text:000000000000A19E                 retn
.text:000000000000A19E ; ---------------------------------------------------------------------------
.text:000000000000A19F                 align 20h
.text:000000000000A1A0
.text:000000000000A1A0 loc_A1A0:                               ; CODE XREF: xstrtoimax+6F↑j
.text:000000000000A1A0                 cmp     eax, 22h ; '"'
.text:000000000000A1A3                 mov     r12d, 4
.text:000000000000A1A9                 jnz     short loc_A179
.text:000000000000A1AB                 mov     r12d, 1
.text:000000000000A1B1                 jmp     short loc_A164
.text:000000000000A1B1 ; ---------------------------------------------------------------------------
.text:000000000000A1B3                 align 8
.text:000000000000A1B8
.text:000000000000A1B8 loc_A1B8:                               ; CODE XREF: xstrtoimax+67↑j
.text:000000000000A1B8                 test    r15, r15
.text:000000000000A1BB                 jz      loc_A650
.text:000000000000A1C1                 movzx   r13d, byte ptr [rcx]
.text:000000000000A1C5                 mov     [rsp+58h+var_50], rcx
.text:000000000000A1CA                 mov     r12d, 4
.text:000000000000A1D0                 test    r13b, r13b
.text:000000000000A1D3                 jz      short loc_A179
.text:000000000000A1D5                 movsx   esi, r13b       ; c
.text:000000000000A1D9                 mov     rdi, r15        ; s
.text:000000000000A1DC                 call    _strchr
.text:000000000000A1E1                 test    rax, rax
.text:000000000000A1E4                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A1E9                 jz      short loc_A179
.text:000000000000A1EB                 mov     ebp, 1
.text:000000000000A1F0                 xor     r12d, r12d
.text:000000000000A1F3
.text:000000000000A1F3 loc_A1F3:                               ; CODE XREF: xstrtoimax+80↑j
.text:000000000000A1F3                 movsx   esi, r13b       ; c
.text:000000000000A1F7                 mov     rdi, r15        ; s
.text:000000000000A1FA                 mov     [rsp+58h+var_50], rcx
.text:000000000000A1FF                 call    _strchr
.text:000000000000A204                 test    rax, rax
.text:000000000000A207                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A20C                 jz      short def_A29E  ; jumptable 000000000000A29E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A20E                 lea     eax, [r13-45h]
.text:000000000000A212                 cmp     al, 2Fh ; '/'
.text:000000000000A214                 ja      short loc_A278
.text:000000000000A216                 mov     rdx, 814400308945h
.text:000000000000A220                 bt      rdx, rax
.text:000000000000A224                 jnb     short loc_A278
.text:000000000000A226                 mov     esi, 30h ; '0'  ; c
.text:000000000000A22B                 mov     rdi, r15        ; s
.text:000000000000A22E                 mov     [rsp+58h+var_50], rcx
.text:000000000000A233                 call    _strchr
.text:000000000000A238                 test    rax, rax
.text:000000000000A23B                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A240                 jz      short loc_A278
.text:000000000000A242                 movzx   eax, byte ptr [rcx+1]
.text:000000000000A246                 cmp     al, 44h ; 'D'
.text:000000000000A248                 jz      short loc_A256
.text:000000000000A24A                 cmp     al, 69h ; 'i'
.text:000000000000A24C                 jz      loc_A738
.text:000000000000A252                 cmp     al, 42h ; 'B'
.text:000000000000A254                 jnz     short loc_A278
.text:000000000000A256
.text:000000000000A256 loc_A256:                               ; CODE XREF: xstrtoimax+158↑j
.text:000000000000A256                 mov     edi, 2
.text:000000000000A25B                 mov     eax, 3E8h
.text:000000000000A260                 jmp     short loc_A282
.text:000000000000A260 ; ---------------------------------------------------------------------------
.text:000000000000A262                 align 8
.text:000000000000A268
.text:000000000000A268 def_A29E:                               ; CODE XREF: xstrtoimax+11C↑j
.text:000000000000A268                                         ; xstrtoimax+19A↓j ...
.text:000000000000A268                 mov     [r14], rbp      ; jumptable 000000000000A29E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A26B                 or      r12d, 2
.text:000000000000A26F                 jmp     loc_A179
.text:000000000000A26F ; ---------------------------------------------------------------------------
.text:000000000000A274                 align 8
.text:000000000000A278
.text:000000000000A278 loc_A278:                               ; CODE XREF: xstrtoimax+124↑j
.text:000000000000A278                                         ; xstrtoimax+134↑j ...
.text:000000000000A278                 mov     edi, 1
.text:000000000000A27D                 mov     eax, 400h
.text:000000000000A282
.text:000000000000A282 loc_A282:                               ; CODE XREF: xstrtoimax+170↑j
.text:000000000000A282                                         ; xstrtoimax+65B↓j
.text:000000000000A282                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:000000000000A286                 cmp     r13b, 35h
.text:000000000000A28A                 ja      short def_A29E  ; jumptable 000000000000A29E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A28C                 lea     rsi, jpt_A29E
.text:000000000000A293                 movzx   r13d, r13b
.text:000000000000A297                 movsxd  rdx, ds:(jpt_A29E - 0E348h)[rsi+r13*4]
.text:000000000000A29B                 add     rdx, rsi
.text:000000000000A29E                 jmp     rdx             ; switch jump
.text:000000000000A2A0 ; ---------------------------------------------------------------------------
.text:000000000000A2A0
.text:000000000000A2A0 loc_A2A0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A2A0                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A2A0                 mov     r8, 8000000000000000h ; jumptable 000000000000A29E cases 77,109
.text:000000000000A2AA                 movsxd  rsi, eax
.text:000000000000A2AD                 mov     rax, r8
.text:000000000000A2B0                 cqo
.text:000000000000A2B2                 idiv    rsi
.text:000000000000A2B5                 cmp     rbp, rax
.text:000000000000A2B8                 mov     r9, rax
.text:000000000000A2BB                 jl      loc_A765
.text:000000000000A2C1                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000A2CB                 mov     rax, r10
.text:000000000000A2CE                 cqo
.text:000000000000A2D0                 idiv    rsi
.text:000000000000A2D3                 cmp     rbp, rax
.text:000000000000A2D6                 jg      loc_A772
.text:000000000000A2DC                 imul    rbp, rsi
.text:000000000000A2E0                 cmp     r9, rbp
.text:000000000000A2E3                 jg      loc_A765
.text:000000000000A2E9                 cmp     rax, rbp
.text:000000000000A2EC                 jl      loc_A772
.text:000000000000A2F2                 imul    rbp, rsi
.text:000000000000A2F6                 xor     eax, eax
.text:000000000000A2F8
.text:000000000000A2F8 loc_A2F8:                               ; CODE XREF: xstrtoimax+67D↓j
.text:000000000000A2F8                                         ; xstrtoimax+68A↓j
.text:000000000000A2F8                 or      r12d, eax
.text:000000000000A2FB                 nop     dword ptr [rax+rax+00h]
.text:000000000000A300
.text:000000000000A300 loc_A300:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A300                                         ; xstrtoimax+259↓j ...
.text:000000000000A300                 movsxd  rax, edi        ; jumptable 000000000000A29E case 99
.text:000000000000A303                 add     rcx, rax
.text:000000000000A306                 mov     eax, r12d
.text:000000000000A309                 or      eax, 2
.text:000000000000A30C                 mov     [rbx], rcx
.text:000000000000A30F                 cmp     byte ptr [rcx], 0
.text:000000000000A312                 cmovnz  r12d, eax
.text:000000000000A316                 jmp     loc_A176
.text:000000000000A316 ; ---------------------------------------------------------------------------
.text:000000000000A31B                 align 20h
.text:000000000000A320
.text:000000000000A320 loc_A320:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A320                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A320                 mov     rax, 0C000000000000000h ; jumptable 000000000000A29E case 119
.text:000000000000A32A                 cmp     rbp, rax
.text:000000000000A32D                 jl      loc_A660
.text:000000000000A333                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000A33D                 cmp     rbp, rax
.text:000000000000A340                 jg      loc_A720
.text:000000000000A346                 add     rbp, rbp
.text:000000000000A349                 jmp     short loc_A300  ; jumptable 000000000000A29E case 99
.text:000000000000A349 ; ---------------------------------------------------------------------------
.text:000000000000A34B                 align 10h
.text:000000000000A350
.text:000000000000A350 loc_A350:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A350                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A350                 mov     rax, 0FFC0000000000000h ; jumptable 000000000000A29E case 98
.text:000000000000A35A                 cmp     rbp, rax
.text:000000000000A35D                 jl      loc_A660
.text:000000000000A363                 mov     rax, 3FFFFFFFFFFFFFh
.text:000000000000A36D                 cmp     rbp, rax
.text:000000000000A370                 jg      loc_A720
.text:000000000000A376                 shl     rbp, 9
.text:000000000000A37A                 jmp     short loc_A300  ; jumptable 000000000000A29E case 99
.text:000000000000A37A ; ---------------------------------------------------------------------------
.text:000000000000A37C                 align 20h
.text:000000000000A380
.text:000000000000A380 loc_A380:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A380                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A380                 movsxd  rsi, eax        ; jumptable 000000000000A29E case 90
.text:000000000000A383                 mov     rax, 8000000000000000h
.text:000000000000A38D                 mov     r8d, 7
.text:000000000000A393                 cqo
.text:000000000000A395                 xor     r11d, r11d
.text:000000000000A398                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A3A2                 idiv    rsi
.text:000000000000A3A5                 mov     r10, rax
.text:000000000000A3A8                 jmp     short loc_A3CF
.text:000000000000A3A8 ; ---------------------------------------------------------------------------
.text:000000000000A3AA                 align 10h
.text:000000000000A3B0
.text:000000000000A3B0 loc_A3B0:                               ; CODE XREF: xstrtoimax+2E2↓j
.text:000000000000A3B0                 mov     rax, r9
.text:000000000000A3B3                 cqo
.text:000000000000A3B5                 idiv    rsi
.text:000000000000A3B8                 cmp     rax, rbp
.text:000000000000A3BB                 jl      loc_A6A8
.text:000000000000A3C1                 imul    rbp, rsi
.text:000000000000A3C5
.text:000000000000A3C5 loc_A3C5:                               ; CODE XREF: xstrtoimax+2F4↓j
.text:000000000000A3C5                                         ; xstrtoimax+5C8↓j
.text:000000000000A3C5                 sub     r8d, 1
.text:000000000000A3C9                 jz      loc_A4F0
.text:000000000000A3CF
.text:000000000000A3CF loc_A3CF:                               ; CODE XREF: xstrtoimax+2B8↑j
.text:000000000000A3CF                 cmp     r10, rbp
.text:000000000000A3D2                 jle     short loc_A3B0
.text:000000000000A3D4                 mov     r11d, 1
.text:000000000000A3DA                 mov     rbp, 8000000000000000h
.text:000000000000A3E4                 jmp     short loc_A3C5
.text:000000000000A3E4 ; ---------------------------------------------------------------------------
.text:000000000000A3E6                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 loc_A3F0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A3F0                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A3F0                 movsxd  rsi, eax        ; jumptable 000000000000A29E case 89
.text:000000000000A3F3                 mov     rax, 8000000000000000h
.text:000000000000A3FD                 mov     r8d, 8
.text:000000000000A403                 cqo
.text:000000000000A405                 xor     r11d, r11d
.text:000000000000A408                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A412                 idiv    rsi
.text:000000000000A415                 mov     r10, rax
.text:000000000000A418                 jmp     short loc_A43F
.text:000000000000A418 ; ---------------------------------------------------------------------------
.text:000000000000A41A                 align 20h
.text:000000000000A420
.text:000000000000A420 loc_A420:                               ; CODE XREF: xstrtoimax+352↓j
.text:000000000000A420                 mov     rax, r9
.text:000000000000A423                 cqo
.text:000000000000A425                 idiv    rsi
.text:000000000000A428                 cmp     rax, rbp
.text:000000000000A42B                 jl      loc_A678
.text:000000000000A431                 imul    rbp, rsi
.text:000000000000A435
.text:000000000000A435 loc_A435:                               ; CODE XREF: xstrtoimax+364↓j
.text:000000000000A435                                         ; xstrtoimax+598↓j
.text:000000000000A435                 sub     r8d, 1
.text:000000000000A439                 jz      loc_A4F0
.text:000000000000A43F
.text:000000000000A43F loc_A43F:                               ; CODE XREF: xstrtoimax+328↑j
.text:000000000000A43F                 cmp     r10, rbp
.text:000000000000A442                 jle     short loc_A420
.text:000000000000A444                 mov     r11d, 1
.text:000000000000A44A                 mov     rbp, 8000000000000000h
.text:000000000000A454                 jmp     short loc_A435
.text:000000000000A454 ; ---------------------------------------------------------------------------
.text:000000000000A456                 align 20h
.text:000000000000A460
.text:000000000000A460 loc_A460:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A460                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A460                 mov     r8, 8000000000000000h ; jumptable 000000000000A29E cases 75,107
.text:000000000000A46A                 movsxd  rsi, eax
.text:000000000000A46D                 mov     rax, r8
.text:000000000000A470                 cqo
.text:000000000000A472                 idiv    rsi
.text:000000000000A475                 cmp     rbp, rax
.text:000000000000A478                 jl      loc_A660
.text:000000000000A47E                 sub     r8, 1
.text:000000000000A482                 mov     rax, r8
.text:000000000000A485                 cqo
.text:000000000000A487                 idiv    rsi
.text:000000000000A48A                 cmp     rbp, rax
.text:000000000000A48D                 jg      loc_A720
.text:000000000000A493                 imul    rbp, rsi
.text:000000000000A497                 jmp     loc_A300        ; jumptable 000000000000A29E case 99
.text:000000000000A497 ; ---------------------------------------------------------------------------
.text:000000000000A49C                 align 20h
.text:000000000000A4A0
.text:000000000000A4A0 loc_A4A0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A4A0                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A4A0                 movsxd  rsi, eax        ; jumptable 000000000000A29E cases 71,103
.text:000000000000A4A3                 mov     rax, 8000000000000000h
.text:000000000000A4AD                 mov     r8d, 3
.text:000000000000A4B3                 cqo
.text:000000000000A4B5                 xor     r11d, r11d
.text:000000000000A4B8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A4C2                 idiv    rsi
.text:000000000000A4C5                 mov     r10, rax
.text:000000000000A4C8
.text:000000000000A4C8 loc_A4C8:                               ; CODE XREF: xstrtoimax+3FA↓j
.text:000000000000A4C8                 cmp     r10, rbp
.text:000000000000A4CB                 jg      loc_A6C0
.text:000000000000A4D1                 mov     rax, r9
.text:000000000000A4D4                 cqo
.text:000000000000A4D6                 idiv    rsi
.text:000000000000A4D9                 cmp     rax, rbp
.text:000000000000A4DC                 jl      loc_A750
.text:000000000000A4E2                 imul    rbp, rsi
.text:000000000000A4E6
.text:000000000000A4E6 loc_A4E6:                               ; CODE XREF: xstrtoimax+5E0↓j
.text:000000000000A4E6                                         ; xstrtoimax+670↓j
.text:000000000000A4E6                 sub     r8d, 1
.text:000000000000A4EA                 jnz     short loc_A4C8
.text:000000000000A4EC                 nop     dword ptr [rax+00h]
.text:000000000000A4F0
.text:000000000000A4F0 loc_A4F0:                               ; CODE XREF: xstrtoimax+2D9↑j
.text:000000000000A4F0                                         ; xstrtoimax+349↑j ...
.text:000000000000A4F0                 or      r12d, r11d
.text:000000000000A4F3                 jmp     loc_A300        ; jumptable 000000000000A29E case 99
.text:000000000000A4F3 ; ---------------------------------------------------------------------------
.text:000000000000A4F8                 align 20h
.text:000000000000A500
.text:000000000000A500 loc_A500:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A500                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A500                 movsxd  rsi, eax        ; jumptable 000000000000A29E case 69
.text:000000000000A503                 mov     rax, 8000000000000000h
.text:000000000000A50D                 mov     r8d, 6
.text:000000000000A513                 cqo
.text:000000000000A515                 xor     r11d, r11d
.text:000000000000A518                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A522                 idiv    rsi
.text:000000000000A525                 mov     r10, rax
.text:000000000000A528                 jmp     short loc_A54B
.text:000000000000A528 ; ---------------------------------------------------------------------------
.text:000000000000A52A                 align 10h
.text:000000000000A530
.text:000000000000A530 loc_A530:                               ; CODE XREF: xstrtoimax+45E↓j
.text:000000000000A530                 mov     rax, r9
.text:000000000000A533                 cqo
.text:000000000000A535                 idiv    rsi
.text:000000000000A538                 cmp     rax, rbp
.text:000000000000A53B                 jl      loc_A6D8
.text:000000000000A541                 imul    rbp, rsi
.text:000000000000A545
.text:000000000000A545 loc_A545:                               ; CODE XREF: xstrtoimax+470↓j
.text:000000000000A545                                         ; xstrtoimax+5F8↓j
.text:000000000000A545                 sub     r8d, 1
.text:000000000000A549                 jz      short loc_A4F0
.text:000000000000A54B
.text:000000000000A54B loc_A54B:                               ; CODE XREF: xstrtoimax+438↑j
.text:000000000000A54B                 cmp     r10, rbp
.text:000000000000A54E                 jle     short loc_A530
.text:000000000000A550                 mov     r11d, 1
.text:000000000000A556                 mov     rbp, 8000000000000000h
.text:000000000000A560                 jmp     short loc_A545
.text:000000000000A560 ; ---------------------------------------------------------------------------
.text:000000000000A562                 align 8
.text:000000000000A568
.text:000000000000A568 loc_A568:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A568                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A568                 movsxd  rsi, eax        ; jumptable 000000000000A29E case 80
.text:000000000000A56B                 mov     rax, 8000000000000000h
.text:000000000000A575                 mov     r8d, 5
.text:000000000000A57B                 cqo
.text:000000000000A57D                 xor     r11d, r11d
.text:000000000000A580                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A58A                 idiv    rsi
.text:000000000000A58D                 mov     r10, rax
.text:000000000000A590                 jmp     short loc_A5B7
.text:000000000000A590 ; ---------------------------------------------------------------------------
.text:000000000000A592                 align 8
.text:000000000000A598
.text:000000000000A598 loc_A598:                               ; CODE XREF: xstrtoimax+4CA↓j
.text:000000000000A598                 mov     rax, r9
.text:000000000000A59B                 cqo
.text:000000000000A59D                 idiv    rsi
.text:000000000000A5A0                 cmp     rax, rbp
.text:000000000000A5A3                 jl      loc_A6F0
.text:000000000000A5A9                 imul    rbp, rsi
.text:000000000000A5AD
.text:000000000000A5AD loc_A5AD:                               ; CODE XREF: xstrtoimax+4DC↓j
.text:000000000000A5AD                                         ; xstrtoimax+610↓j
.text:000000000000A5AD                 sub     r8d, 1
.text:000000000000A5B1                 jz      loc_A4F0
.text:000000000000A5B7
.text:000000000000A5B7 loc_A5B7:                               ; CODE XREF: xstrtoimax+4A0↑j
.text:000000000000A5B7                 cmp     r10, rbp
.text:000000000000A5BA                 jle     short loc_A598
.text:000000000000A5BC                 mov     r11d, 1
.text:000000000000A5C2                 mov     rbp, 8000000000000000h
.text:000000000000A5CC                 jmp     short loc_A5AD
.text:000000000000A5CC ; ---------------------------------------------------------------------------
.text:000000000000A5CE                 align 10h
.text:000000000000A5D0
.text:000000000000A5D0 loc_A5D0:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A5D0                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A5D0                 mov     rax, 0FFE0000000000000h ; jumptable 000000000000A29E case 66
.text:000000000000A5DA                 cmp     rbp, rax
.text:000000000000A5DD                 jl      loc_A660
.text:000000000000A5E3                 mov     rax, 1FFFFFFFFFFFFFh
.text:000000000000A5ED                 cmp     rbp, rax
.text:000000000000A5F0                 jg      loc_A720
.text:000000000000A5F6                 shl     rbp, 0Ah
.text:000000000000A5FA                 jmp     loc_A300        ; jumptable 000000000000A29E case 99
.text:000000000000A5FA ; ---------------------------------------------------------------------------
.text:000000000000A5FF                 align 20h
.text:000000000000A600
.text:000000000000A600 loc_A600:                               ; CODE XREF: xstrtoimax+1AE↑j
.text:000000000000A600                                         ; DATA XREF: .rodata:jpt_A29E↓o
.text:000000000000A600                 movsxd  rsi, eax        ; jumptable 000000000000A29E cases 84,116
.text:000000000000A603                 mov     rax, 8000000000000000h
.text:000000000000A60D                 mov     r8d, 4
.text:000000000000A613                 cqo
.text:000000000000A615                 xor     r11d, r11d
.text:000000000000A618                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000A622                 idiv    rsi
.text:000000000000A625                 mov     r10, rax
.text:000000000000A628
.text:000000000000A628 loc_A628:                               ; CODE XREF: xstrtoimax+556↓j
.text:000000000000A628                 cmp     r10, rbp
.text:000000000000A62B                 jg      short loc_A690
.text:000000000000A62D                 mov     rax, r9
.text:000000000000A630                 cqo
.text:000000000000A632                 idiv    rsi
.text:000000000000A635                 cmp     rax, rbp
.text:000000000000A638                 jl      loc_A708
.text:000000000000A63E                 imul    rbp, rsi
.text:000000000000A642
.text:000000000000A642 loc_A642:                               ; CODE XREF: xstrtoimax+5B0↓j
.text:000000000000A642                                         ; xstrtoimax+628↓j
.text:000000000000A642                 sub     r8d, 1
.text:000000000000A646                 jnz     short loc_A628
.text:000000000000A648                 jmp     loc_A4F0
.text:000000000000A648 ; ---------------------------------------------------------------------------
.text:000000000000A64D                 align 10h
.text:000000000000A650
.text:000000000000A650 loc_A650:                               ; CODE XREF: xstrtoimax+CB↑j
.text:000000000000A650                 mov     r12d, 4
.text:000000000000A656                 jmp     loc_A179
.text:000000000000A656 ; ---------------------------------------------------------------------------
.text:000000000000A65B                 align 20h
.text:000000000000A660
.text:000000000000A660 loc_A660:                               ; CODE XREF: xstrtoimax+23D↑j
.text:000000000000A660                                         ; xstrtoimax+26D↑j ...
.text:000000000000A660                 mov     r12d, 1
.text:000000000000A666                 mov     rbp, 8000000000000000h
.text:000000000000A670                 jmp     loc_A300        ; jumptable 000000000000A29E case 99
.text:000000000000A670 ; ---------------------------------------------------------------------------
.text:000000000000A675                 align 8
.text:000000000000A678
.text:000000000000A678 loc_A678:                               ; CODE XREF: xstrtoimax+33B↑j
.text:000000000000A678                 mov     r11d, 1
.text:000000000000A67E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A688                 jmp     loc_A435
.text:000000000000A688 ; ---------------------------------------------------------------------------
.text:000000000000A68D                 align 10h
.text:000000000000A690
.text:000000000000A690 loc_A690:                               ; CODE XREF: xstrtoimax+53B↑j
.text:000000000000A690                 mov     r11d, 1
.text:000000000000A696                 mov     rbp, 8000000000000000h
.text:000000000000A6A0                 jmp     short loc_A642
.text:000000000000A6A0 ; ---------------------------------------------------------------------------
.text:000000000000A6A2                 align 8
.text:000000000000A6A8
.text:000000000000A6A8 loc_A6A8:                               ; CODE XREF: xstrtoimax+2CB↑j
.text:000000000000A6A8                 mov     r11d, 1
.text:000000000000A6AE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A6B8                 jmp     loc_A3C5
.text:000000000000A6B8 ; ---------------------------------------------------------------------------
.text:000000000000A6BD                 align 20h
.text:000000000000A6C0
.text:000000000000A6C0 loc_A6C0:                               ; CODE XREF: xstrtoimax+3DB↑j
.text:000000000000A6C0                 mov     r11d, 1
.text:000000000000A6C6                 mov     rbp, 8000000000000000h
.text:000000000000A6D0                 jmp     loc_A4E6
.text:000000000000A6D0 ; ---------------------------------------------------------------------------
.text:000000000000A6D5                 align 8
.text:000000000000A6D8
.text:000000000000A6D8 loc_A6D8:                               ; CODE XREF: xstrtoimax+44B↑j
.text:000000000000A6D8                 mov     r11d, 1
.text:000000000000A6DE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A6E8                 jmp     loc_A545
.text:000000000000A6E8 ; ---------------------------------------------------------------------------
.text:000000000000A6ED                 align 10h
.text:000000000000A6F0
.text:000000000000A6F0 loc_A6F0:                               ; CODE XREF: xstrtoimax+4B3↑j
.text:000000000000A6F0                 mov     r11d, 1
.text:000000000000A6F6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A700                 jmp     loc_A5AD
.text:000000000000A700 ; ---------------------------------------------------------------------------
.text:000000000000A705                 align 8
.text:000000000000A708
.text:000000000000A708 loc_A708:                               ; CODE XREF: xstrtoimax+548↑j
.text:000000000000A708                 mov     r11d, 1
.text:000000000000A70E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A718                 jmp     loc_A642
.text:000000000000A718 ; ---------------------------------------------------------------------------
.text:000000000000A71D                 align 20h
.text:000000000000A720
.text:000000000000A720 loc_A720:                               ; CODE XREF: xstrtoimax+250↑j
.text:000000000000A720                                         ; xstrtoimax+280↑j ...
.text:000000000000A720                 mov     r12d, 1
.text:000000000000A726                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A730                 jmp     loc_A300        ; jumptable 000000000000A29E case 99
.text:000000000000A730 ; ---------------------------------------------------------------------------
.text:000000000000A735                 align 8
.text:000000000000A738
.text:000000000000A738 loc_A738:                               ; CODE XREF: xstrtoimax+15C↑j
.text:000000000000A738                 xor     edi, edi
.text:000000000000A73A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000A73E                 mov     eax, 400h
.text:000000000000A743                 setz    dil
.text:000000000000A747                 lea     edi, [rdi+rdi+1]
.text:000000000000A74B                 jmp     loc_A282
.text:000000000000A750 ; ---------------------------------------------------------------------------
.text:000000000000A750
.text:000000000000A750 loc_A750:                               ; CODE XREF: xstrtoimax+3EC↑j
.text:000000000000A750                 mov     r11d, 1
.text:000000000000A756                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000A760                 jmp     loc_A4E6
.text:000000000000A765 ; ---------------------------------------------------------------------------
.text:000000000000A765
.text:000000000000A765 loc_A765:                               ; CODE XREF: xstrtoimax+1CB↑j
.text:000000000000A765                                         ; xstrtoimax+1F3↑j
.text:000000000000A765                 mov     eax, 1
.text:000000000000A76A                 mov     rbp, r8
.text:000000000000A76D                 jmp     loc_A2F8
.text:000000000000A772 ; ---------------------------------------------------------------------------
.text:000000000000A772
.text:000000000000A772 loc_A772:                               ; CODE XREF: xstrtoimax+1E6↑j
.text:000000000000A772                                         ; xstrtoimax+1FC↑j
.text:000000000000A772                 mov     eax, 1
.text:000000000000A777                 mov     rbp, r10
.text:000000000000A77A                 jmp     loc_A2F8
.text:000000000000A77F ; ---------------------------------------------------------------------------
.text:000000000000A77F
.text:000000000000A77F loc_A77F:                               ; CODE XREF: xstrtoimax+21↑j
.text:000000000000A77F                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoimax"
.text:000000000000A786                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000A78D                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000A794                 mov     edx, 54h ; 'T'  ; line
.text:000000000000A799                 call    ___assert_fail
.text:000000000000A79E ; ---------------------------------------------------------------------------
.text:000000000000A79E
.text:000000000000A79E loc_A79E:                               ; CODE XREF: xstrtoimax+9A↑j
.text:000000000000A79E                 call    ___stack_chk_fail
.text:000000000000A79E ; } // starts at A0F0
.text:000000000000A79E xstrtoimax      endp
.text:000000000000A79E
.text:000000000000A79E ; ---------------------------------------------------------------------------
.text:000000000000A7A3                 align 10h
.text:000000000000A7B0
.text:000000000000A7B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7B0
.text:000000000000A7B0
.text:000000000000A7B0 ; __int64 __fastcall xstrtol(char *nptr)
.text:000000000000A7B0                 public xstrtol
.text:000000000000A7B0 xstrtol         proc near               ; CODE XREF: getoptarg+74↑p
.text:000000000000A7B0
.text:000000000000A7B0 var_50          = qword ptr -50h
.text:000000000000A7B0 endptr          = qword ptr -48h
.text:000000000000A7B0 var_40          = qword ptr -40h
.text:000000000000A7B0
.text:000000000000A7B0 ; __unwind {
.text:000000000000A7B0                 push    r15
.text:000000000000A7B2                 push    r14
.text:000000000000A7B4                 push    r13
.text:000000000000A7B6                 push    r12
.text:000000000000A7B8                 push    rbp
.text:000000000000A7B9                 push    rbx
.text:000000000000A7BA                 sub     rsp, 28h
.text:000000000000A7BE                 mov     rax, fs:28h
.text:000000000000A7C7                 mov     [rsp+58h+var_40], rax
.text:000000000000A7CC                 xor     eax, eax
.text:000000000000A7CE                 cmp     edx, 24h ; '$'
.text:000000000000A7D1                 ja      loc_AE3F
.text:000000000000A7D7                 lea     rax, [rsp+58h+endptr]
.text:000000000000A7DC                 test    rsi, rsi
.text:000000000000A7DF                 mov     rbx, rsi
.text:000000000000A7E2                 mov     r12, rdi
.text:000000000000A7E5                 mov     ebp, edx
.text:000000000000A7E7                 mov     r14, rcx
.text:000000000000A7EA                 cmovz   rbx, rax
.text:000000000000A7EE                 mov     r15, r8
.text:000000000000A7F1                 call    ___errno_location
.text:000000000000A7F6                 mov     edx, ebp        ; base
.text:000000000000A7F8                 mov     dword ptr [rax], 0
.text:000000000000A7FE                 mov     rsi, rbx        ; endptr
.text:000000000000A801                 mov     rdi, r12        ; nptr
.text:000000000000A804                 mov     r13, rax
.text:000000000000A807                 call    _strtol
.text:000000000000A80C                 mov     rcx, [rbx]
.text:000000000000A80F                 mov     rbp, rax
.text:000000000000A812                 cmp     rcx, r12
.text:000000000000A815                 jz      short loc_A878
.text:000000000000A817                 mov     eax, [r13+0]
.text:000000000000A81B                 test    eax, eax
.text:000000000000A81D                 jnz     short loc_A860
.text:000000000000A81F                 xor     r12d, r12d
.text:000000000000A822
.text:000000000000A822 loc_A822:                               ; CODE XREF: xstrtol+C1↓j
.text:000000000000A822                 test    r15, r15
.text:000000000000A825                 jz      short loc_A834
.text:000000000000A827                 movzx   r13d, byte ptr [rcx]
.text:000000000000A82B                 test    r13b, r13b
.text:000000000000A82E                 jnz     loc_A8B3
.text:000000000000A834
.text:000000000000A834 loc_A834:                               ; CODE XREF: xstrtol+75↑j
.text:000000000000A834                                         ; xstrtol+226↓j
.text:000000000000A834                 mov     [r14], rbp
.text:000000000000A837
.text:000000000000A837 loc_A837:                               ; CODE XREF: xstrtol+B9↓j
.text:000000000000A837                                         ; xstrtol+E3↓j ...
.text:000000000000A837                 mov     rdi, [rsp+58h+var_40]
.text:000000000000A83C                 xor     rdi, fs:28h
.text:000000000000A845                 mov     eax, r12d
.text:000000000000A848                 jnz     loc_AE5E
.text:000000000000A84E                 add     rsp, 28h
.text:000000000000A852                 pop     rbx
.text:000000000000A853                 pop     rbp
.text:000000000000A854                 pop     r12
.text:000000000000A856                 pop     r13
.text:000000000000A858                 pop     r14
.text:000000000000A85A                 pop     r15
.text:000000000000A85C                 retn
.text:000000000000A85C ; ---------------------------------------------------------------------------
.text:000000000000A85D                 align 20h
.text:000000000000A860
.text:000000000000A860 loc_A860:                               ; CODE XREF: xstrtol+6D↑j
.text:000000000000A860                 cmp     eax, 22h ; '"'
.text:000000000000A863                 mov     r12d, 4
.text:000000000000A869                 jnz     short loc_A837
.text:000000000000A86B                 mov     r12d, 1
.text:000000000000A871                 jmp     short loc_A822
.text:000000000000A871 ; ---------------------------------------------------------------------------
.text:000000000000A873                 align 8
.text:000000000000A878
.text:000000000000A878 loc_A878:                               ; CODE XREF: xstrtol+65↑j
.text:000000000000A878                 test    r15, r15
.text:000000000000A87B                 jz      loc_AD10
.text:000000000000A881                 movzx   r13d, byte ptr [rcx]
.text:000000000000A885                 mov     [rsp+58h+var_50], rcx
.text:000000000000A88A                 mov     r12d, 4
.text:000000000000A890                 test    r13b, r13b
.text:000000000000A893                 jz      short loc_A837
.text:000000000000A895                 movsx   esi, r13b       ; c
.text:000000000000A899                 mov     rdi, r15        ; s
.text:000000000000A89C                 call    _strchr
.text:000000000000A8A1                 test    rax, rax
.text:000000000000A8A4                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A8A9                 jz      short loc_A837
.text:000000000000A8AB                 mov     ebp, 1
.text:000000000000A8B0                 xor     r12d, r12d
.text:000000000000A8B3
.text:000000000000A8B3 loc_A8B3:                               ; CODE XREF: xstrtol+7E↑j
.text:000000000000A8B3                 movsx   esi, r13b       ; c
.text:000000000000A8B7                 mov     rdi, r15        ; s
.text:000000000000A8BA                 mov     [rsp+58h+var_50], rcx
.text:000000000000A8BF                 call    _strchr
.text:000000000000A8C4                 test    rax, rax
.text:000000000000A8C7                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A8CC                 jz      short def_A95E  ; jumptable 000000000000A95E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A8CE                 lea     eax, [r13-45h]
.text:000000000000A8D2                 cmp     al, 2Fh ; '/'
.text:000000000000A8D4                 ja      short loc_A938
.text:000000000000A8D6                 mov     rdx, 814400308945h
.text:000000000000A8E0                 bt      rdx, rax
.text:000000000000A8E4                 jnb     short loc_A938
.text:000000000000A8E6                 mov     esi, 30h ; '0'  ; c
.text:000000000000A8EB                 mov     rdi, r15        ; s
.text:000000000000A8EE                 mov     [rsp+58h+var_50], rcx
.text:000000000000A8F3                 call    _strchr
.text:000000000000A8F8                 test    rax, rax
.text:000000000000A8FB                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A900                 jz      short loc_A938
.text:000000000000A902                 movzx   eax, byte ptr [rcx+1]
.text:000000000000A906                 cmp     al, 44h ; 'D'
.text:000000000000A908                 jz      short loc_A916
.text:000000000000A90A                 cmp     al, 69h ; 'i'
.text:000000000000A90C                 jz      loc_ADF8
.text:000000000000A912                 cmp     al, 42h ; 'B'
.text:000000000000A914                 jnz     short loc_A938
.text:000000000000A916
.text:000000000000A916 loc_A916:                               ; CODE XREF: xstrtol+158↑j
.text:000000000000A916                 mov     edi, 2
.text:000000000000A91B                 mov     eax, 3E8h
.text:000000000000A920                 jmp     short loc_A942
.text:000000000000A920 ; ---------------------------------------------------------------------------
.text:000000000000A922                 align 8
.text:000000000000A928
.text:000000000000A928 def_A95E:                               ; CODE XREF: xstrtol+11C↑j
.text:000000000000A928                                         ; xstrtol+19A↓j ...
.text:000000000000A928                 mov     [r14], rbp      ; jumptable 000000000000A95E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A92B                 or      r12d, 2
.text:000000000000A92F                 jmp     loc_A837
.text:000000000000A92F ; ---------------------------------------------------------------------------
.text:000000000000A934                 align 8
.text:000000000000A938
.text:000000000000A938 loc_A938:                               ; CODE XREF: xstrtol+124↑j
.text:000000000000A938                                         ; xstrtol+134↑j ...
.text:000000000000A938                 mov     edi, 1
.text:000000000000A93D                 mov     eax, 400h
.text:000000000000A942
.text:000000000000A942 loc_A942:                               ; CODE XREF: xstrtol+170↑j
.text:000000000000A942                                         ; xstrtol+65B↓j
.text:000000000000A942                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:000000000000A946                 cmp     r13b, 35h
.text:000000000000A94A                 ja      short def_A95E  ; jumptable 000000000000A95E default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000A94C                 lea     rsi, jpt_A95E
.text:000000000000A953                 movzx   r13d, r13b
.text:000000000000A957                 movsxd  rdx, ds:(jpt_A95E - 0E430h)[rsi+r13*4]
.text:000000000000A95B                 add     rdx, rsi
.text:000000000000A95E                 jmp     rdx             ; switch jump
.text:000000000000A960 ; ---------------------------------------------------------------------------
.text:000000000000A960
.text:000000000000A960 loc_A960:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000A960                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000A960                 mov     r8, 8000000000000000h ; jumptable 000000000000A95E cases 77,109
.text:000000000000A96A                 movsxd  rsi, eax
.text:000000000000A96D                 mov     rax, r8
.text:000000000000A970                 cqo
.text:000000000000A972                 idiv    rsi
.text:000000000000A975                 cmp     rbp, rax
.text:000000000000A978                 mov     r9, rax
.text:000000000000A97B                 jl      loc_AE25
.text:000000000000A981                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000A98B                 mov     rax, r10
.text:000000000000A98E                 cqo
.text:000000000000A990                 idiv    rsi
.text:000000000000A993                 cmp     rbp, rax
.text:000000000000A996                 jg      loc_AE32
.text:000000000000A99C                 imul    rbp, rsi
.text:000000000000A9A0                 cmp     r9, rbp
.text:000000000000A9A3                 jg      loc_AE25
.text:000000000000A9A9                 cmp     rax, rbp
.text:000000000000A9AC                 jl      loc_AE32
.text:000000000000A9B2                 imul    rbp, rsi
.text:000000000000A9B6                 xor     eax, eax
.text:000000000000A9B8
.text:000000000000A9B8 loc_A9B8:                               ; CODE XREF: xstrtol+67D↓j
.text:000000000000A9B8                                         ; xstrtol+68A↓j
.text:000000000000A9B8                 or      r12d, eax
.text:000000000000A9BB                 nop     dword ptr [rax+rax+00h]
.text:000000000000A9C0
.text:000000000000A9C0 loc_A9C0:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000A9C0                                         ; xstrtol+259↓j ...
.text:000000000000A9C0                 movsxd  rax, edi        ; jumptable 000000000000A95E case 99
.text:000000000000A9C3                 add     rcx, rax
.text:000000000000A9C6                 mov     eax, r12d
.text:000000000000A9C9                 or      eax, 2
.text:000000000000A9CC                 mov     [rbx], rcx
.text:000000000000A9CF                 cmp     byte ptr [rcx], 0
.text:000000000000A9D2                 cmovnz  r12d, eax
.text:000000000000A9D6                 jmp     loc_A834
.text:000000000000A9D6 ; ---------------------------------------------------------------------------
.text:000000000000A9DB                 align 20h
.text:000000000000A9E0
.text:000000000000A9E0 loc_A9E0:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000A9E0                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000A9E0                 mov     rax, 0C000000000000000h ; jumptable 000000000000A95E case 119
.text:000000000000A9EA                 cmp     rbp, rax
.text:000000000000A9ED                 jl      loc_AD20
.text:000000000000A9F3                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000A9FD                 cmp     rbp, rax
.text:000000000000AA00                 jg      loc_ADE0
.text:000000000000AA06                 add     rbp, rbp
.text:000000000000AA09                 jmp     short loc_A9C0  ; jumptable 000000000000A95E case 99
.text:000000000000AA09 ; ---------------------------------------------------------------------------
.text:000000000000AA0B                 align 10h
.text:000000000000AA10
.text:000000000000AA10 loc_AA10:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AA10                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AA10                 mov     rax, 0FFC0000000000000h ; jumptable 000000000000A95E case 98
.text:000000000000AA1A                 cmp     rbp, rax
.text:000000000000AA1D                 jl      loc_AD20
.text:000000000000AA23                 mov     rax, 3FFFFFFFFFFFFFh
.text:000000000000AA2D                 cmp     rbp, rax
.text:000000000000AA30                 jg      loc_ADE0
.text:000000000000AA36                 shl     rbp, 9
.text:000000000000AA3A                 jmp     short loc_A9C0  ; jumptable 000000000000A95E case 99
.text:000000000000AA3A ; ---------------------------------------------------------------------------
.text:000000000000AA3C                 align 20h
.text:000000000000AA40
.text:000000000000AA40 loc_AA40:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AA40                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AA40                 movsxd  rsi, eax        ; jumptable 000000000000A95E case 90
.text:000000000000AA43                 mov     rax, 8000000000000000h
.text:000000000000AA4D                 mov     r8d, 7
.text:000000000000AA53                 cqo
.text:000000000000AA55                 xor     r11d, r11d
.text:000000000000AA58                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000AA62                 idiv    rsi
.text:000000000000AA65                 mov     r10, rax
.text:000000000000AA68                 jmp     short loc_AA8F
.text:000000000000AA68 ; ---------------------------------------------------------------------------
.text:000000000000AA6A                 align 10h
.text:000000000000AA70
.text:000000000000AA70 loc_AA70:                               ; CODE XREF: xstrtol+2E2↓j
.text:000000000000AA70                 mov     rax, r9
.text:000000000000AA73                 cqo
.text:000000000000AA75                 idiv    rsi
.text:000000000000AA78                 cmp     rax, rbp
.text:000000000000AA7B                 jl      loc_AD68
.text:000000000000AA81                 imul    rbp, rsi
.text:000000000000AA85
.text:000000000000AA85 loc_AA85:                               ; CODE XREF: xstrtol+2F4↓j
.text:000000000000AA85                                         ; xstrtol+5C8↓j
.text:000000000000AA85                 sub     r8d, 1
.text:000000000000AA89                 jz      loc_ABB0
.text:000000000000AA8F
.text:000000000000AA8F loc_AA8F:                               ; CODE XREF: xstrtol+2B8↑j
.text:000000000000AA8F                 cmp     r10, rbp
.text:000000000000AA92                 jle     short loc_AA70
.text:000000000000AA94                 mov     r11d, 1
.text:000000000000AA9A                 mov     rbp, 8000000000000000h
.text:000000000000AAA4                 jmp     short loc_AA85
.text:000000000000AAA4 ; ---------------------------------------------------------------------------
.text:000000000000AAA6                 align 10h
.text:000000000000AAB0
.text:000000000000AAB0 loc_AAB0:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AAB0                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AAB0                 movsxd  rsi, eax        ; jumptable 000000000000A95E case 89
.text:000000000000AAB3                 mov     rax, 8000000000000000h
.text:000000000000AABD                 mov     r8d, 8
.text:000000000000AAC3                 cqo
.text:000000000000AAC5                 xor     r11d, r11d
.text:000000000000AAC8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000AAD2                 idiv    rsi
.text:000000000000AAD5                 mov     r10, rax
.text:000000000000AAD8                 jmp     short loc_AAFF
.text:000000000000AAD8 ; ---------------------------------------------------------------------------
.text:000000000000AADA                 align 20h
.text:000000000000AAE0
.text:000000000000AAE0 loc_AAE0:                               ; CODE XREF: xstrtol+352↓j
.text:000000000000AAE0                 mov     rax, r9
.text:000000000000AAE3                 cqo
.text:000000000000AAE5                 idiv    rsi
.text:000000000000AAE8                 cmp     rax, rbp
.text:000000000000AAEB                 jl      loc_AD38
.text:000000000000AAF1                 imul    rbp, rsi
.text:000000000000AAF5
.text:000000000000AAF5 loc_AAF5:                               ; CODE XREF: xstrtol+364↓j
.text:000000000000AAF5                                         ; xstrtol+598↓j
.text:000000000000AAF5                 sub     r8d, 1
.text:000000000000AAF9                 jz      loc_ABB0
.text:000000000000AAFF
.text:000000000000AAFF loc_AAFF:                               ; CODE XREF: xstrtol+328↑j
.text:000000000000AAFF                 cmp     r10, rbp
.text:000000000000AB02                 jle     short loc_AAE0
.text:000000000000AB04                 mov     r11d, 1
.text:000000000000AB0A                 mov     rbp, 8000000000000000h
.text:000000000000AB14                 jmp     short loc_AAF5
.text:000000000000AB14 ; ---------------------------------------------------------------------------
.text:000000000000AB16                 align 20h
.text:000000000000AB20
.text:000000000000AB20 loc_AB20:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AB20                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AB20                 mov     r8, 8000000000000000h ; jumptable 000000000000A95E cases 75,107
.text:000000000000AB2A                 movsxd  rsi, eax
.text:000000000000AB2D                 mov     rax, r8
.text:000000000000AB30                 cqo
.text:000000000000AB32                 idiv    rsi
.text:000000000000AB35                 cmp     rbp, rax
.text:000000000000AB38                 jl      loc_AD20
.text:000000000000AB3E                 sub     r8, 1
.text:000000000000AB42                 mov     rax, r8
.text:000000000000AB45                 cqo
.text:000000000000AB47                 idiv    rsi
.text:000000000000AB4A                 cmp     rbp, rax
.text:000000000000AB4D                 jg      loc_ADE0
.text:000000000000AB53                 imul    rbp, rsi
.text:000000000000AB57                 jmp     loc_A9C0        ; jumptable 000000000000A95E case 99
.text:000000000000AB57 ; ---------------------------------------------------------------------------
.text:000000000000AB5C                 align 20h
.text:000000000000AB60
.text:000000000000AB60 loc_AB60:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AB60                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AB60                 movsxd  rsi, eax        ; jumptable 000000000000A95E cases 71,103
.text:000000000000AB63                 mov     rax, 8000000000000000h
.text:000000000000AB6D                 mov     r8d, 3
.text:000000000000AB73                 cqo
.text:000000000000AB75                 xor     r11d, r11d
.text:000000000000AB78                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000AB82                 idiv    rsi
.text:000000000000AB85                 mov     r10, rax
.text:000000000000AB88
.text:000000000000AB88 loc_AB88:                               ; CODE XREF: xstrtol+3FA↓j
.text:000000000000AB88                 cmp     r10, rbp
.text:000000000000AB8B                 jg      loc_AD80
.text:000000000000AB91                 mov     rax, r9
.text:000000000000AB94                 cqo
.text:000000000000AB96                 idiv    rsi
.text:000000000000AB99                 cmp     rax, rbp
.text:000000000000AB9C                 jl      loc_AE10
.text:000000000000ABA2                 imul    rbp, rsi
.text:000000000000ABA6
.text:000000000000ABA6 loc_ABA6:                               ; CODE XREF: xstrtol+5E0↓j
.text:000000000000ABA6                                         ; xstrtol+670↓j
.text:000000000000ABA6                 sub     r8d, 1
.text:000000000000ABAA                 jnz     short loc_AB88
.text:000000000000ABAC                 nop     dword ptr [rax+00h]
.text:000000000000ABB0
.text:000000000000ABB0 loc_ABB0:                               ; CODE XREF: xstrtol+2D9↑j
.text:000000000000ABB0                                         ; xstrtol+349↑j ...
.text:000000000000ABB0                 or      r12d, r11d
.text:000000000000ABB3                 jmp     loc_A9C0        ; jumptable 000000000000A95E case 99
.text:000000000000ABB3 ; ---------------------------------------------------------------------------
.text:000000000000ABB8                 align 20h
.text:000000000000ABC0
.text:000000000000ABC0 loc_ABC0:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000ABC0                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000ABC0                 movsxd  rsi, eax        ; jumptable 000000000000A95E case 69
.text:000000000000ABC3                 mov     rax, 8000000000000000h
.text:000000000000ABCD                 mov     r8d, 6
.text:000000000000ABD3                 cqo
.text:000000000000ABD5                 xor     r11d, r11d
.text:000000000000ABD8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000ABE2                 idiv    rsi
.text:000000000000ABE5                 mov     r10, rax
.text:000000000000ABE8                 jmp     short loc_AC0B
.text:000000000000ABE8 ; ---------------------------------------------------------------------------
.text:000000000000ABEA                 align 10h
.text:000000000000ABF0
.text:000000000000ABF0 loc_ABF0:                               ; CODE XREF: xstrtol+45E↓j
.text:000000000000ABF0                 mov     rax, r9
.text:000000000000ABF3                 cqo
.text:000000000000ABF5                 idiv    rsi
.text:000000000000ABF8                 cmp     rax, rbp
.text:000000000000ABFB                 jl      loc_AD98
.text:000000000000AC01                 imul    rbp, rsi
.text:000000000000AC05
.text:000000000000AC05 loc_AC05:                               ; CODE XREF: xstrtol+470↓j
.text:000000000000AC05                                         ; xstrtol+5F8↓j
.text:000000000000AC05                 sub     r8d, 1
.text:000000000000AC09                 jz      short loc_ABB0
.text:000000000000AC0B
.text:000000000000AC0B loc_AC0B:                               ; CODE XREF: xstrtol+438↑j
.text:000000000000AC0B                 cmp     r10, rbp
.text:000000000000AC0E                 jle     short loc_ABF0
.text:000000000000AC10                 mov     r11d, 1
.text:000000000000AC16                 mov     rbp, 8000000000000000h
.text:000000000000AC20                 jmp     short loc_AC05
.text:000000000000AC20 ; ---------------------------------------------------------------------------
.text:000000000000AC22                 align 8
.text:000000000000AC28
.text:000000000000AC28 loc_AC28:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AC28                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AC28                 movsxd  rsi, eax        ; jumptable 000000000000A95E case 80
.text:000000000000AC2B                 mov     rax, 8000000000000000h
.text:000000000000AC35                 mov     r8d, 5
.text:000000000000AC3B                 cqo
.text:000000000000AC3D                 xor     r11d, r11d
.text:000000000000AC40                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000AC4A                 idiv    rsi
.text:000000000000AC4D                 mov     r10, rax
.text:000000000000AC50                 jmp     short loc_AC77
.text:000000000000AC50 ; ---------------------------------------------------------------------------
.text:000000000000AC52                 align 8
.text:000000000000AC58
.text:000000000000AC58 loc_AC58:                               ; CODE XREF: xstrtol+4CA↓j
.text:000000000000AC58                 mov     rax, r9
.text:000000000000AC5B                 cqo
.text:000000000000AC5D                 idiv    rsi
.text:000000000000AC60                 cmp     rax, rbp
.text:000000000000AC63                 jl      loc_ADB0
.text:000000000000AC69                 imul    rbp, rsi
.text:000000000000AC6D
.text:000000000000AC6D loc_AC6D:                               ; CODE XREF: xstrtol+4DC↓j
.text:000000000000AC6D                                         ; xstrtol+610↓j
.text:000000000000AC6D                 sub     r8d, 1
.text:000000000000AC71                 jz      loc_ABB0
.text:000000000000AC77
.text:000000000000AC77 loc_AC77:                               ; CODE XREF: xstrtol+4A0↑j
.text:000000000000AC77                 cmp     r10, rbp
.text:000000000000AC7A                 jle     short loc_AC58
.text:000000000000AC7C                 mov     r11d, 1
.text:000000000000AC82                 mov     rbp, 8000000000000000h
.text:000000000000AC8C                 jmp     short loc_AC6D
.text:000000000000AC8C ; ---------------------------------------------------------------------------
.text:000000000000AC8E                 align 10h
.text:000000000000AC90
.text:000000000000AC90 loc_AC90:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000AC90                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000AC90                 mov     rax, 0FFE0000000000000h ; jumptable 000000000000A95E case 66
.text:000000000000AC9A                 cmp     rbp, rax
.text:000000000000AC9D                 jl      loc_AD20
.text:000000000000ACA3                 mov     rax, 1FFFFFFFFFFFFFh
.text:000000000000ACAD                 cmp     rbp, rax
.text:000000000000ACB0                 jg      loc_ADE0
.text:000000000000ACB6                 shl     rbp, 0Ah
.text:000000000000ACBA                 jmp     loc_A9C0        ; jumptable 000000000000A95E case 99
.text:000000000000ACBA ; ---------------------------------------------------------------------------
.text:000000000000ACBF                 align 20h
.text:000000000000ACC0
.text:000000000000ACC0 loc_ACC0:                               ; CODE XREF: xstrtol+1AE↑j
.text:000000000000ACC0                                         ; DATA XREF: .rodata:jpt_A95E↓o
.text:000000000000ACC0                 movsxd  rsi, eax        ; jumptable 000000000000A95E cases 84,116
.text:000000000000ACC3                 mov     rax, 8000000000000000h
.text:000000000000ACCD                 mov     r8d, 4
.text:000000000000ACD3                 cqo
.text:000000000000ACD5                 xor     r11d, r11d
.text:000000000000ACD8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:000000000000ACE2                 idiv    rsi
.text:000000000000ACE5                 mov     r10, rax
.text:000000000000ACE8
.text:000000000000ACE8 loc_ACE8:                               ; CODE XREF: xstrtol+556↓j
.text:000000000000ACE8                 cmp     r10, rbp
.text:000000000000ACEB                 jg      short loc_AD50
.text:000000000000ACED                 mov     rax, r9
.text:000000000000ACF0                 cqo
.text:000000000000ACF2                 idiv    rsi
.text:000000000000ACF5                 cmp     rax, rbp
.text:000000000000ACF8                 jl      loc_ADC8
.text:000000000000ACFE                 imul    rbp, rsi
.text:000000000000AD02
.text:000000000000AD02 loc_AD02:                               ; CODE XREF: xstrtol+5B0↓j
.text:000000000000AD02                                         ; xstrtol+628↓j
.text:000000000000AD02                 sub     r8d, 1
.text:000000000000AD06                 jnz     short loc_ACE8
.text:000000000000AD08                 jmp     loc_ABB0
.text:000000000000AD08 ; ---------------------------------------------------------------------------
.text:000000000000AD0D                 align 10h
.text:000000000000AD10
.text:000000000000AD10 loc_AD10:                               ; CODE XREF: xstrtol+CB↑j
.text:000000000000AD10                 mov     r12d, 4
.text:000000000000AD16                 jmp     loc_A837
.text:000000000000AD16 ; ---------------------------------------------------------------------------
.text:000000000000AD1B                 align 20h
.text:000000000000AD20
.text:000000000000AD20 loc_AD20:                               ; CODE XREF: xstrtol+23D↑j
.text:000000000000AD20                                         ; xstrtol+26D↑j ...
.text:000000000000AD20                 mov     r12d, 1
.text:000000000000AD26                 mov     rbp, 8000000000000000h
.text:000000000000AD30                 jmp     loc_A9C0        ; jumptable 000000000000A95E case 99
.text:000000000000AD30 ; ---------------------------------------------------------------------------
.text:000000000000AD35                 align 8
.text:000000000000AD38
.text:000000000000AD38 loc_AD38:                               ; CODE XREF: xstrtol+33B↑j
.text:000000000000AD38                 mov     r11d, 1
.text:000000000000AD3E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000AD48                 jmp     loc_AAF5
.text:000000000000AD48 ; ---------------------------------------------------------------------------
.text:000000000000AD4D                 align 10h
.text:000000000000AD50
.text:000000000000AD50 loc_AD50:                               ; CODE XREF: xstrtol+53B↑j
.text:000000000000AD50                 mov     r11d, 1
.text:000000000000AD56                 mov     rbp, 8000000000000000h
.text:000000000000AD60                 jmp     short loc_AD02
.text:000000000000AD60 ; ---------------------------------------------------------------------------
.text:000000000000AD62                 align 8
.text:000000000000AD68
.text:000000000000AD68 loc_AD68:                               ; CODE XREF: xstrtol+2CB↑j
.text:000000000000AD68                 mov     r11d, 1
.text:000000000000AD6E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000AD78                 jmp     loc_AA85
.text:000000000000AD78 ; ---------------------------------------------------------------------------
.text:000000000000AD7D                 align 20h
.text:000000000000AD80
.text:000000000000AD80 loc_AD80:                               ; CODE XREF: xstrtol+3DB↑j
.text:000000000000AD80                 mov     r11d, 1
.text:000000000000AD86                 mov     rbp, 8000000000000000h
.text:000000000000AD90                 jmp     loc_ABA6
.text:000000000000AD90 ; ---------------------------------------------------------------------------
.text:000000000000AD95                 align 8
.text:000000000000AD98
.text:000000000000AD98 loc_AD98:                               ; CODE XREF: xstrtol+44B↑j
.text:000000000000AD98                 mov     r11d, 1
.text:000000000000AD9E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000ADA8                 jmp     loc_AC05
.text:000000000000ADA8 ; ---------------------------------------------------------------------------
.text:000000000000ADAD                 align 10h
.text:000000000000ADB0
.text:000000000000ADB0 loc_ADB0:                               ; CODE XREF: xstrtol+4B3↑j
.text:000000000000ADB0                 mov     r11d, 1
.text:000000000000ADB6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000ADC0                 jmp     loc_AC6D
.text:000000000000ADC0 ; ---------------------------------------------------------------------------
.text:000000000000ADC5                 align 8
.text:000000000000ADC8
.text:000000000000ADC8 loc_ADC8:                               ; CODE XREF: xstrtol+548↑j
.text:000000000000ADC8                 mov     r11d, 1
.text:000000000000ADCE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000ADD8                 jmp     loc_AD02
.text:000000000000ADD8 ; ---------------------------------------------------------------------------
.text:000000000000ADDD                 align 20h
.text:000000000000ADE0
.text:000000000000ADE0 loc_ADE0:                               ; CODE XREF: xstrtol+250↑j
.text:000000000000ADE0                                         ; xstrtol+280↑j ...
.text:000000000000ADE0                 mov     r12d, 1
.text:000000000000ADE6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000ADF0                 jmp     loc_A9C0        ; jumptable 000000000000A95E case 99
.text:000000000000ADF0 ; ---------------------------------------------------------------------------
.text:000000000000ADF5                 align 8
.text:000000000000ADF8
.text:000000000000ADF8 loc_ADF8:                               ; CODE XREF: xstrtol+15C↑j
.text:000000000000ADF8                 xor     edi, edi
.text:000000000000ADFA                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000ADFE                 mov     eax, 400h
.text:000000000000AE03                 setz    dil
.text:000000000000AE07                 lea     edi, [rdi+rdi+1]
.text:000000000000AE0B                 jmp     loc_A942
.text:000000000000AE10 ; ---------------------------------------------------------------------------
.text:000000000000AE10
.text:000000000000AE10 loc_AE10:                               ; CODE XREF: xstrtol+3EC↑j
.text:000000000000AE10                 mov     r11d, 1
.text:000000000000AE16                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:000000000000AE20                 jmp     loc_ABA6
.text:000000000000AE25 ; ---------------------------------------------------------------------------
.text:000000000000AE25
.text:000000000000AE25 loc_AE25:                               ; CODE XREF: xstrtol+1CB↑j
.text:000000000000AE25                                         ; xstrtol+1F3↑j
.text:000000000000AE25                 mov     eax, 1
.text:000000000000AE2A                 mov     rbp, r8
.text:000000000000AE2D                 jmp     loc_A9B8
.text:000000000000AE32 ; ---------------------------------------------------------------------------
.text:000000000000AE32
.text:000000000000AE32 loc_AE32:                               ; CODE XREF: xstrtol+1E6↑j
.text:000000000000AE32                                         ; xstrtol+1FC↑j
.text:000000000000AE32                 mov     eax, 1
.text:000000000000AE37                 mov     rbp, r10
.text:000000000000AE3A                 jmp     loc_A9B8
.text:000000000000AE3F ; ---------------------------------------------------------------------------
.text:000000000000AE3F
.text:000000000000AE3F loc_AE3F:                               ; CODE XREF: xstrtol+21↑j
.text:000000000000AE3F                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtol"
.text:000000000000AE46                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000AE4D                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000AE54                 mov     edx, 54h ; 'T'  ; line
.text:000000000000AE59                 call    ___assert_fail
.text:000000000000AE5E ; ---------------------------------------------------------------------------
.text:000000000000AE5E
.text:000000000000AE5E loc_AE5E:                               ; CODE XREF: xstrtol+98↑j
.text:000000000000AE5E                 call    ___stack_chk_fail
.text:000000000000AE5E ; } // starts at A7B0
.text:000000000000AE5E xstrtol         endp
.text:000000000000AE5E
.text:000000000000AE5E ; ---------------------------------------------------------------------------
.text:000000000000AE63                 align 10h
.text:000000000000AE70
.text:000000000000AE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE70
.text:000000000000AE70 ; Attributes: noreturn info_from_lumina
.text:000000000000AE70
.text:000000000000AE70 ; void __fastcall xstrtol_fatal(strtol_error err, int opt_idx, char c, const option *long_options, const char *arg)
.text:000000000000AE70                 public xstrtol_fatal
.text:000000000000AE70 xstrtol_fatal   proc near               ; CODE XREF: first_last_page+11B↑p
.text:000000000000AE70
.text:000000000000AE70 var_32          = byte ptr -32h
.text:000000000000AE70 var_31          = byte ptr -31h
.text:000000000000AE70 var_30          = qword ptr -30h
.text:000000000000AE70
.text:000000000000AE70 ; __unwind {
.text:000000000000AE70                 push    r13
.text:000000000000AE72                 push    r12
.text:000000000000AE74                 mov     r10d, esi
.text:000000000000AE77                 push    rbp
.text:000000000000AE78                 push    rbx
.text:000000000000AE79                 mov     r12, r8
.text:000000000000AE7C                 sub     rsp, 18h
.text:000000000000AE80                 mov     rax, fs:28h
.text:000000000000AE89                 mov     [rsp+38h+var_30], rax
.text:000000000000AE8E                 xor     eax, eax
.text:000000000000AE90                 cmp     edi, 3
.text:000000000000AE93                 mov     ebp, cs:exit_failure
.text:000000000000AE99                 ja      short loc_AEF4
.text:000000000000AE9B                 cmp     edi, 2
.text:000000000000AE9E                 jnb     short loc_AEEB
.text:000000000000AEA0                 sub     edi, 1
.text:000000000000AEA3                 lea     rsi, aSSArgumentSToo ; "%s%s argument '%s' too large"
.text:000000000000AEAA                 jnz     short loc_AEE6
.text:000000000000AEAC
.text:000000000000AEAC loc_AEAC:                               ; CODE XREF: xstrtol_fatal+82↓j
.text:000000000000AEAC                                         ; xstrtol_fatal+8E↓j
.text:000000000000AEAC                 test    r10d, r10d
.text:000000000000AEAF                 movsxd  rax, r10d
.text:000000000000AEB2                 js      short loc_AF02
.text:000000000000AEB4                 shl     rax, 5
.text:000000000000AEB8                 lea     rbx, asc_E548   ; "--"
.text:000000000000AEBF                 mov     r13, [rcx+rax]
.text:000000000000AEC3
.text:000000000000AEC3 loc_AEC3:                               ; CODE XREF: xstrtol_fatal+AA↓j
.text:000000000000AEC3                 mov     edx, 5          ; category
.text:000000000000AEC8                 xor     edi, edi        ; domainname
.text:000000000000AECA                 call    _dcgettext
.text:000000000000AECF                 mov     r9, r12
.text:000000000000AED2                 mov     rdx, rax        ; format
.text:000000000000AED5                 mov     r8, r13
.text:000000000000AED8                 mov     rcx, rbx
.text:000000000000AEDB                 xor     esi, esi        ; errnum
.text:000000000000AEDD                 mov     edi, ebp        ; status
.text:000000000000AEDF                 xor     eax, eax
.text:000000000000AEE1                 call    _error
.text:000000000000AEE6
.text:000000000000AEE6 loc_AEE6:                               ; CODE XREF: xstrtol_fatal+3A↑j
.text:000000000000AEE6                                         ; xstrtol_fatal+90↓j
.text:000000000000AEE6                 call    _abort
.text:000000000000AEEB ; ---------------------------------------------------------------------------
.text:000000000000AEEB
.text:000000000000AEEB loc_AEEB:                               ; CODE XREF: xstrtol_fatal+2E↑j
.text:000000000000AEEB                 lea     rsi, aInvalidSuffixI ; "invalid suffix in %s%s argument '%s'"
.text:000000000000AEF2                 jmp     short loc_AEAC
.text:000000000000AEF4 ; ---------------------------------------------------------------------------
.text:000000000000AEF4
.text:000000000000AEF4 loc_AEF4:                               ; CODE XREF: xstrtol_fatal+29↑j
.text:000000000000AEF4                 cmp     edi, 4
.text:000000000000AEF7                 lea     rsi, aInvalidSSArgum ; "invalid %s%s argument '%s'"
.text:000000000000AEFE                 jz      short loc_AEAC
.text:000000000000AF00                 jmp     short loc_AEE6
.text:000000000000AF02 ; ---------------------------------------------------------------------------
.text:000000000000AF02
.text:000000000000AF02 loc_AF02:                               ; CODE XREF: xstrtol_fatal+42↑j
.text:000000000000AF02                 lea     rbx, asc_E548   ; "--"
.text:000000000000AF09                 mov     [rsp+38h+var_32], dl
.text:000000000000AF0D                 mov     [rsp+38h+var_31], 0
.text:000000000000AF12                 lea     r13, [rsp+38h+var_32]
.text:000000000000AF17                 sub     rbx, rax
.text:000000000000AF1A                 jmp     short loc_AEC3
.text:000000000000AF1A ; } // starts at AE70
.text:000000000000AF1A xstrtol_fatal   endp
.text:000000000000AF1A
.text:000000000000AF1A ; ---------------------------------------------------------------------------
.text:000000000000AF1C                 align 20h
.text:000000000000AF20
.text:000000000000AF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF20
.text:000000000000AF20
.text:000000000000AF20 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:000000000000AF20                 public xstrtoumax
.text:000000000000AF20 xstrtoumax      proc near               ; CODE XREF: first_last_page+48↑p
.text:000000000000AF20                                         ; first_last_page+B3↑p
.text:000000000000AF20
.text:000000000000AF20 base            = dword ptr -50h
.text:000000000000AF20 endptr          = qword ptr -48h
.text:000000000000AF20 var_40          = qword ptr -40h
.text:000000000000AF20
.text:000000000000AF20 ; __unwind {
.text:000000000000AF20                 push    r15
.text:000000000000AF22                 push    r14
.text:000000000000AF24                 push    r13
.text:000000000000AF26                 push    r12
.text:000000000000AF28                 push    rbp
.text:000000000000AF29                 push    rbx
.text:000000000000AF2A                 sub     rsp, 28h
.text:000000000000AF2E                 mov     rax, fs:28h
.text:000000000000AF37                 mov     [rsp+58h+var_40], rax
.text:000000000000AF3C                 xor     eax, eax
.text:000000000000AF3E                 cmp     edx, 24h ; '$'
.text:000000000000AF41                 ja      loc_B2A5
.text:000000000000AF47                 lea     rax, [rsp+58h+endptr]
.text:000000000000AF4C                 mov     r15, rsi
.text:000000000000AF4F                 test    rsi, rsi
.text:000000000000AF52                 mov     rbp, rdi
.text:000000000000AF55                 mov     [rsp+58h+base], edx
.text:000000000000AF59                 mov     r14, rcx
.text:000000000000AF5C                 mov     r13, r8
.text:000000000000AF5F                 cmovz   r15, rax
.text:000000000000AF63                 call    ___errno_location
.text:000000000000AF68                 mov     dword ptr [rax], 0
.text:000000000000AF6E                 mov     r12, rax
.text:000000000000AF71                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000AF75                 call    ___ctype_b_loc
.text:000000000000AF7A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000AF7E                 mov     rsi, [rax]
.text:000000000000AF81                 mov     rax, rbp
.text:000000000000AF84                 jmp     short loc_AF97
.text:000000000000AF84 ; ---------------------------------------------------------------------------
.text:000000000000AF86                 align 10h
.text:000000000000AF90
.text:000000000000AF90 loc_AF90:                               ; CODE XREF: xstrtoumax+7F↓j
.text:000000000000AF90                 add     rax, 1
.text:000000000000AF94                 movzx   ebx, byte ptr [rax]
.text:000000000000AF97
.text:000000000000AF97 loc_AF97:                               ; CODE XREF: xstrtoumax+64↑j
.text:000000000000AF97                 movzx   ecx, bl
.text:000000000000AF9A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000AF9F                 jnz     short loc_AF90
.text:000000000000AFA1                 cmp     bl, 2Dh ; '-'
.text:000000000000AFA4                 jz      short loc_AFF8
.text:000000000000AFA6                 xor     ecx, ecx        ; group
.text:000000000000AFA8                 mov     rsi, r15        ; endptr
.text:000000000000AFAB                 mov     rdi, rbp        ; nptr
.text:000000000000AFAE                 call    ___strtoul_internal
.text:000000000000AFB3                 mov     rcx, [r15]
.text:000000000000AFB6                 mov     rbx, rax
.text:000000000000AFB9                 cmp     rcx, rbp
.text:000000000000AFBC                 jz      short loc_AFE8
.text:000000000000AFBE                 mov     eax, [r12]
.text:000000000000AFC2                 test    eax, eax
.text:000000000000AFC4                 jz      short loc_B028
.text:000000000000AFC6                 cmp     eax, 22h ; '"'
.text:000000000000AFC9                 mov     ebp, 1
.text:000000000000AFCE                 jnz     short loc_AFF8
.text:000000000000AFD0
.text:000000000000AFD0 loc_AFD0:                               ; CODE XREF: xstrtoumax+10A↓j
.text:000000000000AFD0                 test    r13, r13
.text:000000000000AFD3                 jz      short loc_AFDE
.text:000000000000AFD5                 movzx   r12d, byte ptr [rcx]
.text:000000000000AFD9                 test    r12b, r12b
.text:000000000000AFDC                 jnz     short loc_B057
.text:000000000000AFDE
.text:000000000000AFDE loc_AFDE:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000AFDE                 mov     [r14], rbx
.text:000000000000AFE1                 jmp     short loc_AFFD
.text:000000000000AFE1 ; ---------------------------------------------------------------------------
.text:000000000000AFE3                 align 8
.text:000000000000AFE8
.text:000000000000AFE8 loc_AFE8:                               ; CODE XREF: xstrtoumax+9C↑j
.text:000000000000AFE8                 test    r13, r13
.text:000000000000AFEB                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000AFF0                 jnz     short loc_B030
.text:000000000000AFF2                 nop     word ptr [rax+rax+00h]
.text:000000000000AFF8
.text:000000000000AFF8 loc_AFF8:                               ; CODE XREF: xstrtoumax+84↑j
.text:000000000000AFF8                                         ; xstrtoumax+AE↑j ...
.text:000000000000AFF8                 mov     ebp, 4
.text:000000000000AFFD
.text:000000000000AFFD loc_AFFD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:000000000000AFFD                                         ; xstrtoumax+217↓j ...
.text:000000000000AFFD                 mov     rdi, [rsp+58h+var_40]
.text:000000000000B002                 xor     rdi, fs:28h
.text:000000000000B00B                 mov     eax, ebp
.text:000000000000B00D                 jnz     loc_B2A0
.text:000000000000B013                 add     rsp, 28h
.text:000000000000B017                 pop     rbx
.text:000000000000B018                 pop     rbp
.text:000000000000B019                 pop     r12
.text:000000000000B01B                 pop     r13
.text:000000000000B01D                 pop     r14
.text:000000000000B01F                 pop     r15
.text:000000000000B021                 retn
.text:000000000000B021 ; ---------------------------------------------------------------------------
.text:000000000000B022                 align 8
.text:000000000000B028
.text:000000000000B028 loc_B028:                               ; CODE XREF: xstrtoumax+A4↑j
.text:000000000000B028                 xor     ebp, ebp
.text:000000000000B02A                 jmp     short loc_AFD0
.text:000000000000B02A ; ---------------------------------------------------------------------------
.text:000000000000B02C                 align 10h
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: xstrtoumax+D0↑j
.text:000000000000B030                 movzx   r12d, byte ptr [rbp+0]
.text:000000000000B035                 test    r12b, r12b
.text:000000000000B038                 jz      short loc_AFF8
.text:000000000000B03A                 movsx   esi, r12b       ; c
.text:000000000000B03E                 mov     rdi, r13        ; s
.text:000000000000B041                 xor     ebp, ebp
.text:000000000000B043                 call    _strchr
.text:000000000000B048                 test    rax, rax
.text:000000000000B04B                 mov     ebx, 1
.text:000000000000B050                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B055                 jz      short loc_AFF8
.text:000000000000B057
.text:000000000000B057 loc_B057:                               ; CODE XREF: xstrtoumax+BC↑j
.text:000000000000B057                 movsx   esi, r12b       ; c
.text:000000000000B05B                 mov     rdi, r13        ; s
.text:000000000000B05E                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000B063                 call    _strchr
.text:000000000000B068                 test    rax, rax
.text:000000000000B06B                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B070                 jz      def_B0F6        ; jumptable 000000000000B0F6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B076                 lea     eax, [r12-45h]
.text:000000000000B07B                 cmp     al, 2Fh ; '/'
.text:000000000000B07D                 ja      short loc_B0D0
.text:000000000000B07F                 mov     rdx, 814400308945h
.text:000000000000B089                 bt      rdx, rax
.text:000000000000B08D                 jnb     short loc_B0D0
.text:000000000000B08F                 mov     esi, 30h ; '0'  ; c
.text:000000000000B094                 mov     rdi, r13        ; s
.text:000000000000B097                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000B09C                 call    _strchr
.text:000000000000B0A1                 test    rax, rax
.text:000000000000B0A4                 mov     rcx, qword ptr [rsp+58h+base]
.text:000000000000B0A9                 jz      short loc_B0D0
.text:000000000000B0AB                 movzx   eax, byte ptr [rcx+1]
.text:000000000000B0AF                 cmp     al, 44h ; 'D'
.text:000000000000B0B1                 jz      short loc_B0BF
.text:000000000000B0B3                 cmp     al, 69h ; 'i'
.text:000000000000B0B5                 jz      loc_B288
.text:000000000000B0BB                 cmp     al, 42h ; 'B'
.text:000000000000B0BD                 jnz     short loc_B0D0
.text:000000000000B0BF
.text:000000000000B0BF loc_B0BF:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000B0BF                 mov     edi, 2
.text:000000000000B0C4                 mov     esi, 3E8h
.text:000000000000B0C9                 jmp     short loc_B0DA
.text:000000000000B0C9 ; ---------------------------------------------------------------------------
.text:000000000000B0CB                 align 10h
.text:000000000000B0D0
.text:000000000000B0D0 loc_B0D0:                               ; CODE XREF: xstrtoumax+15D↑j
.text:000000000000B0D0                                         ; xstrtoumax+16D↑j ...
.text:000000000000B0D0                 mov     edi, 1
.text:000000000000B0D5                 mov     esi, 400h
.text:000000000000B0DA
.text:000000000000B0DA loc_B0DA:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000B0DA                                         ; xstrtoumax+37B↓j
.text:000000000000B0DA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000B0DE                 cmp     r12b, 35h
.text:000000000000B0E2                 ja      short def_B0F6  ; jumptable 000000000000B0F6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B0E4                 lea     rdx, jpt_B0F6
.text:000000000000B0EB                 movzx   r12d, r12b
.text:000000000000B0EF                 movsxd  rax, ds:(jpt_B0F6 - 0E578h)[rdx+r12*4]
.text:000000000000B0F3                 add     rax, rdx
.text:000000000000B0F6                 jmp     rax             ; switch jump
.text:000000000000B0F8 ; ---------------------------------------------------------------------------
.text:000000000000B0F8
.text:000000000000B0F8 loc_B0F8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B0F8                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B0F8                 mov     rax, rbx        ; jumptable 000000000000B0F6 cases 77,109
.text:000000000000B0FB                 mul     rsi
.text:000000000000B0FE                 jo      loc_B2F1
.text:000000000000B104                 xor     r8d, r8d
.text:000000000000B107
.text:000000000000B107 loc_B107:                               ; CODE XREF: xstrtoumax+34E↓j
.text:000000000000B107                                         ; xstrtoumax+35E↓j ...
.text:000000000000B107                 mul     rsi
.text:000000000000B10A                 jo      loc_B2E2
.text:000000000000B110                 mov     rbx, rax
.text:000000000000B113
.text:000000000000B113 loc_B113:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:000000000000B113                 or      ebp, r8d
.text:000000000000B116                 db      2Eh
.text:000000000000B116                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B120
.text:000000000000B120 loc_B120:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B120                                         ; xstrtoumax+23B↓j ...
.text:000000000000B120                 movsxd  rdi, edi        ; jumptable 000000000000B0F6 case 99
.text:000000000000B123                 mov     eax, ebp
.text:000000000000B125                 add     rcx, rdi
.text:000000000000B128                 or      eax, 2
.text:000000000000B12B                 mov     [r15], rcx
.text:000000000000B12E                 cmp     byte ptr [rcx], 0
.text:000000000000B131                 mov     [r14], rbx
.text:000000000000B134                 cmovnz  ebp, eax
.text:000000000000B137                 jmp     loc_AFFD
.text:000000000000B13C ; ---------------------------------------------------------------------------
.text:000000000000B13C
.text:000000000000B13C def_B0F6:                               ; CODE XREF: xstrtoumax+150↑j
.text:000000000000B13C                                         ; xstrtoumax+1C2↑j ...
.text:000000000000B13C                 mov     [r14], rbx      ; jumptable 000000000000B0F6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000B13F                 or      ebp, 2
.text:000000000000B142                 jmp     loc_AFFD
.text:000000000000B147 ; ---------------------------------------------------------------------------
.text:000000000000B147
.text:000000000000B147 loc_B147:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B147                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B147                 mov     edx, 2          ; jumptable 000000000000B0F6 case 119
.text:000000000000B14C                 mov     rax, rdx
.text:000000000000B14F                 mul     rbx
.text:000000000000B152                 jo      loc_B1EE
.text:000000000000B158                 add     rbx, rbx
.text:000000000000B15B                 jmp     short loc_B120  ; jumptable 000000000000B0F6 case 99
.text:000000000000B15D ; ---------------------------------------------------------------------------
.text:000000000000B15D
.text:000000000000B15D loc_B15D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B15D                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B15D                 mov     edx, 200h       ; jumptable 000000000000B0F6 case 98
.text:000000000000B162                 mov     rax, rdx
.text:000000000000B165                 mul     rbx
.text:000000000000B168                 jo      loc_B1EE
.text:000000000000B16E                 shl     rbx, 9
.text:000000000000B172                 jmp     short loc_B120  ; jumptable 000000000000B0F6 case 99
.text:000000000000B174 ; ---------------------------------------------------------------------------
.text:000000000000B174
.text:000000000000B174 loc_B174:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B174                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B174                 mov     r8d, 7          ; jumptable 000000000000B0F6 case 90
.text:000000000000B17A                 xor     r9d, r9d
.text:000000000000B17D                 nop     dword ptr [rax]
.text:000000000000B180
.text:000000000000B180 loc_B180:                               ; CODE XREF: xstrtoumax+273↓j
.text:000000000000B180                 mov     rax, rbx
.text:000000000000B183                 mul     rsi
.text:000000000000B186                 mov     rbx, rax
.text:000000000000B189                 jo      loc_B31E
.text:000000000000B18F
.text:000000000000B18F loc_B18F:                               ; CODE XREF: xstrtoumax+408↓j
.text:000000000000B18F                 sub     r8d, 1
.text:000000000000B193                 jnz     short loc_B180
.text:000000000000B195
.text:000000000000B195 loc_B195:                               ; CODE XREF: xstrtoumax+29D↓j
.text:000000000000B195                                         ; xstrtoumax+2BD↓j ...
.text:000000000000B195                 or      ebp, r9d
.text:000000000000B198                 jmp     short loc_B120  ; jumptable 000000000000B0F6 case 99
.text:000000000000B19A ; ---------------------------------------------------------------------------
.text:000000000000B19A
.text:000000000000B19A loc_B19A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B19A                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B19A                 mov     r8d, 8          ; jumptable 000000000000B0F6 case 89
.text:000000000000B1A0                 xor     r9d, r9d
.text:000000000000B1A3                 nop     dword ptr [rax+rax+00h]
.text:000000000000B1A8
.text:000000000000B1A8 loc_B1A8:                               ; CODE XREF: xstrtoumax+29B↓j
.text:000000000000B1A8                 mov     rax, rbx
.text:000000000000B1AB                 mul     rsi
.text:000000000000B1AE                 mov     rbx, rax
.text:000000000000B1B1                 jo      loc_B300
.text:000000000000B1B7
.text:000000000000B1B7 loc_B1B7:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:000000000000B1B7                 sub     r8d, 1
.text:000000000000B1BB                 jnz     short loc_B1A8
.text:000000000000B1BD                 jmp     short loc_B195
.text:000000000000B1BF ; ---------------------------------------------------------------------------
.text:000000000000B1BF
.text:000000000000B1BF loc_B1BF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B1BF                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B1BF                 mov     r8d, 4          ; jumptable 000000000000B0F6 cases 84,116
.text:000000000000B1C5                 xor     r9d, r9d
.text:000000000000B1C8
.text:000000000000B1C8 loc_B1C8:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:000000000000B1C8                 mov     rax, rbx
.text:000000000000B1CB                 mul     rsi
.text:000000000000B1CE                 mov     rbx, rax
.text:000000000000B1D1                 jo      loc_B2D3
.text:000000000000B1D7
.text:000000000000B1D7 loc_B1D7:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:000000000000B1D7                 sub     r8d, 1
.text:000000000000B1DB                 jnz     short loc_B1C8
.text:000000000000B1DD                 jmp     short loc_B195
.text:000000000000B1DF ; ---------------------------------------------------------------------------
.text:000000000000B1DF
.text:000000000000B1DF loc_B1DF:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B1DF                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B1DF                 mov     rax, rbx        ; jumptable 000000000000B0F6 cases 75,107
.text:000000000000B1E2                 mul     rsi
.text:000000000000B1E5                 mov     rbx, rax
.text:000000000000B1E8                 jno     loc_B120        ; jumptable 000000000000B0F6 case 99
.text:000000000000B1EE
.text:000000000000B1EE loc_B1EE:                               ; CODE XREF: xstrtoumax+232↑j
.text:000000000000B1EE                                         ; xstrtoumax+248↑j ...
.text:000000000000B1EE                 mov     ebp, 1
.text:000000000000B1F3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B1F7                 jmp     loc_B120        ; jumptable 000000000000B0F6 case 99
.text:000000000000B1F7 ; ---------------------------------------------------------------------------
.text:000000000000B1FC                 align 20h
.text:000000000000B200
.text:000000000000B200 loc_B200:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B200                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B200                 mov     r8d, 5          ; jumptable 000000000000B0F6 case 80
.text:000000000000B206                 xor     r9d, r9d
.text:000000000000B209
.text:000000000000B209 loc_B209:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:000000000000B209                 mov     rax, rbx
.text:000000000000B20C                 mul     rsi
.text:000000000000B20F                 mov     rbx, rax
.text:000000000000B212                 jo      loc_B30F
.text:000000000000B218
.text:000000000000B218 loc_B218:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:000000000000B218                 sub     r8d, 1
.text:000000000000B21C                 jnz     short loc_B209
.text:000000000000B21E                 jmp     loc_B195
.text:000000000000B223 ; ---------------------------------------------------------------------------
.text:000000000000B223
.text:000000000000B223 loc_B223:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B223                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B223                 mov     r8d, 6          ; jumptable 000000000000B0F6 case 69
.text:000000000000B229                 xor     r9d, r9d
.text:000000000000B22C
.text:000000000000B22C loc_B22C:                               ; CODE XREF: xstrtoumax+31F↓j
.text:000000000000B22C                 mov     rax, rbx
.text:000000000000B22F                 mul     rsi
.text:000000000000B232                 mov     rbx, rax
.text:000000000000B235                 jo      loc_B2C4
.text:000000000000B23B
.text:000000000000B23B loc_B23B:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:000000000000B23B                 sub     r8d, 1
.text:000000000000B23F                 jnz     short loc_B22C
.text:000000000000B241                 jmp     loc_B195
.text:000000000000B246 ; ---------------------------------------------------------------------------
.text:000000000000B246
.text:000000000000B246 loc_B246:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B246                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B246                 mov     edx, 400h       ; jumptable 000000000000B0F6 case 66
.text:000000000000B24B                 mov     rax, rdx
.text:000000000000B24E                 mul     rbx
.text:000000000000B251                 jo      short loc_B1EE
.text:000000000000B253                 shl     rbx, 0Ah
.text:000000000000B257                 jmp     loc_B120        ; jumptable 000000000000B0F6 case 99
.text:000000000000B25C ; ---------------------------------------------------------------------------
.text:000000000000B25C
.text:000000000000B25C loc_B25C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:000000000000B25C                                         ; DATA XREF: .rodata:jpt_B0F6↓o
.text:000000000000B25C                 mov     rax, rbx        ; jumptable 000000000000B0F6 cases 71,103
.text:000000000000B25F                 mul     rsi
.text:000000000000B262                 jo      loc_B32D
.text:000000000000B268                 xor     r8d, r8d
.text:000000000000B26B
.text:000000000000B26B loc_B26B:                               ; CODE XREF: xstrtoumax+417↓j
.text:000000000000B26B                 mul     rsi
.text:000000000000B26E                 jno     loc_B107
.text:000000000000B274                 mov     r8d, 1
.text:000000000000B27A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B27E                 jmp     loc_B107
.text:000000000000B27E ; ---------------------------------------------------------------------------
.text:000000000000B283                 align 8
.text:000000000000B288
.text:000000000000B288 loc_B288:                               ; CODE XREF: xstrtoumax+195↑j
.text:000000000000B288                 xor     edi, edi
.text:000000000000B28A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000B28E                 mov     esi, 400h
.text:000000000000B293                 setz    dil
.text:000000000000B297                 lea     edi, [rdi+rdi+1]
.text:000000000000B29B                 jmp     loc_B0DA
.text:000000000000B2A0 ; ---------------------------------------------------------------------------
.text:000000000000B2A0
.text:000000000000B2A0 loc_B2A0:                               ; CODE XREF: xstrtoumax+ED↑j
.text:000000000000B2A0                 call    ___stack_chk_fail
.text:000000000000B2A5 ; ---------------------------------------------------------------------------
.text:000000000000B2A5
.text:000000000000B2A5 loc_B2A5:                               ; CODE XREF: xstrtoumax+21↑j
.text:000000000000B2A5                 lea     rcx, __PRETTY_FUNCTION___4162_1 ; "xstrtoumax"
.text:000000000000B2AC                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:000000000000B2B3                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000B2BA                 mov     edx, 54h ; 'T'  ; line
.text:000000000000B2BF                 call    ___assert_fail
.text:000000000000B2C4 ; ---------------------------------------------------------------------------
.text:000000000000B2C4
.text:000000000000B2C4 loc_B2C4:                               ; CODE XREF: xstrtoumax+315↑j
.text:000000000000B2C4                 mov     r9d, 1
.text:000000000000B2CA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B2CE                 jmp     loc_B23B
.text:000000000000B2D3 ; ---------------------------------------------------------------------------
.text:000000000000B2D3
.text:000000000000B2D3 loc_B2D3:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:000000000000B2D3                 mov     r9d, 1
.text:000000000000B2D9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B2DD                 jmp     loc_B1D7
.text:000000000000B2E2 ; ---------------------------------------------------------------------------
.text:000000000000B2E2
.text:000000000000B2E2 loc_B2E2:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:000000000000B2E2                 mov     r8d, 1
.text:000000000000B2E8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B2EC                 jmp     loc_B113
.text:000000000000B2F1 ; ---------------------------------------------------------------------------
.text:000000000000B2F1
.text:000000000000B2F1 loc_B2F1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:000000000000B2F1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B2F5                 mov     r8d, 1
.text:000000000000B2FB                 jmp     loc_B107
.text:000000000000B300 ; ---------------------------------------------------------------------------
.text:000000000000B300
.text:000000000000B300 loc_B300:                               ; CODE XREF: xstrtoumax+291↑j
.text:000000000000B300                 mov     r9d, 1
.text:000000000000B306                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B30A                 jmp     loc_B1B7
.text:000000000000B30F ; ---------------------------------------------------------------------------
.text:000000000000B30F
.text:000000000000B30F loc_B30F:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:000000000000B30F                 mov     r9d, 1
.text:000000000000B315                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B319                 jmp     loc_B218
.text:000000000000B31E ; ---------------------------------------------------------------------------
.text:000000000000B31E
.text:000000000000B31E loc_B31E:                               ; CODE XREF: xstrtoumax+269↑j
.text:000000000000B31E                 mov     r9d, 1
.text:000000000000B324                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B328                 jmp     loc_B18F
.text:000000000000B32D ; ---------------------------------------------------------------------------
.text:000000000000B32D
.text:000000000000B32D loc_B32D:                               ; CODE XREF: xstrtoumax+342↑j
.text:000000000000B32D                 mov     r8d, 1
.text:000000000000B333                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B337                 jmp     loc_B26B
.text:000000000000B337 ; } // starts at AF20
.text:000000000000B337 xstrtoumax      endp
.text:000000000000B337
.text:000000000000B337 ; ---------------------------------------------------------------------------
.text:000000000000B33C                 align 20h
.text:000000000000B340
.text:000000000000B340 ; =============== S U B R O U T I N E =======================================
.text:000000000000B340
.text:000000000000B340 ; Attributes: info_from_lumina
.text:000000000000B340
.text:000000000000B340 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000B340                 public rpl_fclose
.text:000000000000B340 rpl_fclose      proc near               ; CODE XREF: main+831↑p
.text:000000000000B340                                         ; close_file_part_4+93↑p ...
.text:000000000000B340 ; __unwind {
.text:000000000000B340                 push    r12
.text:000000000000B342                 push    rbp
.text:000000000000B343                 push    rbx
.text:000000000000B344                 mov     rbx, rdi
.text:000000000000B347                 call    _fileno
.text:000000000000B34C                 test    eax, eax
.text:000000000000B34E                 mov     rdi, rbx        ; fp
.text:000000000000B351                 js      short loc_B3A7
.text:000000000000B353                 call    ___freading
.text:000000000000B358                 test    eax, eax
.text:000000000000B35A                 jnz     short loc_B388
.text:000000000000B35C
.text:000000000000B35C loc_B35C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000B35C                 mov     rdi, rbx        ; stream
.text:000000000000B35F                 call    rpl_fflush
.text:000000000000B364                 test    eax, eax
.text:000000000000B366                 jz      short loc_B3A4
.text:000000000000B368                 call    ___errno_location
.text:000000000000B36D                 mov     r12d, [rax]
.text:000000000000B370                 mov     rdi, rbx        ; stream
.text:000000000000B373                 mov     rbp, rax
.text:000000000000B376                 call    _fclose
.text:000000000000B37B                 test    r12d, r12d
.text:000000000000B37E                 jnz     short loc_B3B0
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000B380                 pop     rbx
.text:000000000000B381                 pop     rbp
.text:000000000000B382                 pop     r12
.text:000000000000B384                 retn
.text:000000000000B384 ; ---------------------------------------------------------------------------
.text:000000000000B385                 align 8
.text:000000000000B388
.text:000000000000B388 loc_B388:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000B388                 mov     rdi, rbx        ; stream
.text:000000000000B38B                 call    _fileno
.text:000000000000B390                 xor     esi, esi        ; offset
.text:000000000000B392                 mov     edx, 1          ; whence
.text:000000000000B397                 mov     edi, eax        ; fd
.text:000000000000B399                 call    _lseek
.text:000000000000B39E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B3A2                 jnz     short loc_B35C
.text:000000000000B3A4
.text:000000000000B3A4 loc_B3A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000B3A4                 mov     rdi, rbx        ; stream
.text:000000000000B3A7
.text:000000000000B3A7 loc_B3A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000B3A7                 pop     rbx
.text:000000000000B3A8                 pop     rbp
.text:000000000000B3A9                 pop     r12
.text:000000000000B3AB                 jmp     _fclose
.text:000000000000B3B0 ; ---------------------------------------------------------------------------
.text:000000000000B3B0
.text:000000000000B3B0 loc_B3B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000B3B0                 mov     [rbp+0], r12d
.text:000000000000B3B4                 mov     eax, 0FFFFFFFFh
.text:000000000000B3B9                 jmp     short loc_B380
.text:000000000000B3B9 ; } // starts at B340
.text:000000000000B3B9 rpl_fclose      endp
.text:000000000000B3B9
.text:000000000000B3B9 ; ---------------------------------------------------------------------------
.text:000000000000B3BB                 align 20h
.text:000000000000B3C0
.text:000000000000B3C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B3C0
.text:000000000000B3C0
.text:000000000000B3C0 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:000000000000B3C0                 public rpl_fcntl
.text:000000000000B3C0 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:000000000000B3C0
.text:000000000000B3C0 var_68          = dword ptr -68h
.text:000000000000B3C0 var_60          = qword ptr -60h
.text:000000000000B3C0 var_58          = qword ptr -58h
.text:000000000000B3C0 var_50          = qword ptr -50h
.text:000000000000B3C0 var_48          = byte ptr -48h
.text:000000000000B3C0 var_38          = qword ptr -38h
.text:000000000000B3C0 var_30          = qword ptr -30h
.text:000000000000B3C0 var_28          = qword ptr -28h
.text:000000000000B3C0 var_20          = qword ptr -20h
.text:000000000000B3C0 arg_0           = byte ptr  8
.text:000000000000B3C0
.text:000000000000B3C0 ; __unwind {
.text:000000000000B3C0                 push    r12
.text:000000000000B3C2                 push    rbp
.text:000000000000B3C3                 mov     ebp, edi
.text:000000000000B3C5                 push    rbx
.text:000000000000B3C6                 sub     rsp, 50h
.text:000000000000B3CA                 mov     rax, fs:28h
.text:000000000000B3D3                 mov     [rsp+68h+var_50], rax
.text:000000000000B3D8                 xor     eax, eax
.text:000000000000B3DA                 lea     rax, [rsp+68h+arg_0]
.text:000000000000B3DF                 test    esi, esi
.text:000000000000B3E1                 mov     [rsp+68h+var_38], rdx
.text:000000000000B3E6                 mov     [rsp+68h+var_30], rcx
.text:000000000000B3EB                 mov     [rsp+68h+var_28], r8
.text:000000000000B3F0                 mov     [rsp+68h+var_60], rax
.text:000000000000B3F5                 lea     rax, [rsp+68h+var_48]
.text:000000000000B3FA                 mov     [rsp+68h+var_20], r9
.text:000000000000B3FF                 mov     [rsp+68h+var_68], 10h
.text:000000000000B406                 mov     [rsp+68h+var_58], rax
.text:000000000000B40B                 jz      loc_B612
.text:000000000000B411                 cmp     esi, 406h
.text:000000000000B417                 jnz     short loc_B460
.text:000000000000B419                 mov     rax, [rsp+68h+var_58]
.text:000000000000B41E                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:000000000000B425                 mov     [rsp+68h+var_68], 18h
.text:000000000000B42C                 mov     r12d, [rax+10h]
.text:000000000000B430                 mov     edx, r12d
.text:000000000000B433                 js      loc_B563
.text:000000000000B439                 xor     eax, eax
.text:000000000000B43B                 mov     esi, 406h       ; cmd
.text:000000000000B440                 call    _fcntl
.text:000000000000B445                 test    eax, eax
.text:000000000000B447                 mov     ebx, eax
.text:000000000000B449                 js      loc_B5D8
.text:000000000000B44F
.text:000000000000B44F loc_B44F:                               ; CODE XREF: rpl_fcntl+220↓j
.text:000000000000B44F                 mov     cs:have_dupfd_cloexec_3326, 1
.text:000000000000B459                 jmp     short loc_B4A0
.text:000000000000B459 ; ---------------------------------------------------------------------------
.text:000000000000B45B                 align 20h
.text:000000000000B460
.text:000000000000B460 loc_B460:                               ; CODE XREF: rpl_fcntl+57↑j
.text:000000000000B460                 cmp     esi, 0Bh
.text:000000000000B463                 jz      short loc_B490
.text:000000000000B465                 jg      short loc_B4C0
.text:000000000000B467                 cmp     esi, 4
.text:000000000000B46A                 jz      loc_B540
.text:000000000000B470                 jg      loc_B530
.text:000000000000B476                 cmp     esi, 2
.text:000000000000B479                 jz      loc_B540
.text:000000000000B47F                 jg      short loc_B490
.text:000000000000B481                 cmp     esi, 1
.text:000000000000B484                 jnz     short loc_B4E8
.text:000000000000B486                 db      2Eh
.text:000000000000B486                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B490
.text:000000000000B490 loc_B490:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:000000000000B490                                         ; rpl_fcntl+BF↑j ...
.text:000000000000B490                 mov     edi, ebp        ; fd
.text:000000000000B492                 xor     eax, eax
.text:000000000000B494                 call    _fcntl
.text:000000000000B499                 mov     ebx, eax
.text:000000000000B49B                 nop     dword ptr [rax+rax+00h]
.text:000000000000B4A0
.text:000000000000B4A0 loc_B4A0:                               ; CODE XREF: rpl_fcntl+99↑j
.text:000000000000B4A0                                         ; rpl_fcntl+147↓j ...
.text:000000000000B4A0                 mov     rcx, [rsp+68h+var_50]
.text:000000000000B4A5                 xor     rcx, fs:28h
.text:000000000000B4AE                 mov     eax, ebx
.text:000000000000B4B0                 jnz     loc_B60D
.text:000000000000B4B6                 add     rsp, 50h
.text:000000000000B4BA                 pop     rbx
.text:000000000000B4BB                 pop     rbp
.text:000000000000B4BC                 pop     r12
.text:000000000000B4BE                 retn
.text:000000000000B4BE ; ---------------------------------------------------------------------------
.text:000000000000B4BF                 align 20h
.text:000000000000B4C0
.text:000000000000B4C0 loc_B4C0:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:000000000000B4C0                 cmp     esi, 407h
.text:000000000000B4C6                 jg      short loc_B510
.text:000000000000B4C8                 cmp     esi, 406h
.text:000000000000B4CE                 jge     short loc_B540
.text:000000000000B4D0                 cmp     esi, 401h
.text:000000000000B4D6                 jz      short loc_B490
.text:000000000000B4D8                 cmp     esi, 402h
.text:000000000000B4DE                 jz      short loc_B540
.text:000000000000B4E0                 cmp     esi, 400h
.text:000000000000B4E6                 jz      short loc_B540
.text:000000000000B4E8
.text:000000000000B4E8 loc_B4E8:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:000000000000B4E8                                         ; rpl_fcntl+164↓j ...
.text:000000000000B4E8                 mov     eax, [rsp+68h+var_68]
.text:000000000000B4EB                 cmp     eax, 2Fh ; '/'
.text:000000000000B4EE                 ja      loc_B62A
.text:000000000000B4F4                 add     rax, [rsp+68h+var_58]
.text:000000000000B4F9
.text:000000000000B4F9 loc_B4F9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:000000000000B4F9                 mov     rdx, [rax]
.text:000000000000B4FC                 mov     edi, ebp        ; fd
.text:000000000000B4FE                 xor     eax, eax
.text:000000000000B500                 call    _fcntl
.text:000000000000B505                 mov     ebx, eax
.text:000000000000B507                 jmp     short loc_B4A0
.text:000000000000B507 ; ---------------------------------------------------------------------------
.text:000000000000B509                 align 10h
.text:000000000000B510
.text:000000000000B510 loc_B510:                               ; CODE XREF: rpl_fcntl+106↑j
.text:000000000000B510                 cmp     esi, 409h
.text:000000000000B516                 jz      short loc_B540
.text:000000000000B518                 jl      loc_B490
.text:000000000000B51E                 cmp     esi, 40Ah
.text:000000000000B524                 jnz     short loc_B4E8
.text:000000000000B526                 jmp     loc_B490
.text:000000000000B526 ; ---------------------------------------------------------------------------
.text:000000000000B52B                 align 10h
.text:000000000000B530
.text:000000000000B530 loc_B530:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:000000000000B530                 cmp     esi, 9
.text:000000000000B533                 jz      loc_B490
.text:000000000000B539                 jg      short loc_B540
.text:000000000000B53B                 cmp     esi, 8
.text:000000000000B53E                 jnz     short loc_B4E8
.text:000000000000B540
.text:000000000000B540 loc_B540:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:000000000000B540                                         ; rpl_fcntl+B9↑j ...
.text:000000000000B540                 mov     eax, [rsp+68h+var_68]
.text:000000000000B543                 cmp     eax, 2Fh ; '/'
.text:000000000000B546                 ja      loc_B634
.text:000000000000B54C                 add     rax, [rsp+68h+var_58]
.text:000000000000B551
.text:000000000000B551 loc_B551:                               ; CODE XREF: rpl_fcntl+279↓j
.text:000000000000B551                 mov     edx, [rax]
.text:000000000000B553                 mov     edi, ebp        ; fd
.text:000000000000B555                 xor     eax, eax
.text:000000000000B557                 call    _fcntl
.text:000000000000B55C                 mov     ebx, eax
.text:000000000000B55E                 jmp     loc_B4A0
.text:000000000000B563 ; ---------------------------------------------------------------------------
.text:000000000000B563
.text:000000000000B563 loc_B563:                               ; CODE XREF: rpl_fcntl+73↑j
.text:000000000000B563                 xor     esi, esi        ; cmd
.text:000000000000B565                 xor     eax, eax
.text:000000000000B567                 call    _fcntl
.text:000000000000B56C                 test    eax, eax
.text:000000000000B56E                 mov     ebx, eax
.text:000000000000B570                 js      loc_B4A0
.text:000000000000B576                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000B57D                 jnz     loc_B4A0
.text:000000000000B583
.text:000000000000B583 loc_B583:                               ; CODE XREF: rpl_fcntl+248↓j
.text:000000000000B583                 xor     eax, eax
.text:000000000000B585                 mov     esi, 1          ; cmd
.text:000000000000B58A                 mov     edi, ebx        ; fd
.text:000000000000B58C                 call    _fcntl
.text:000000000000B591                 test    eax, eax
.text:000000000000B593                 js      short loc_B5B1
.text:000000000000B595                 or      eax, 1
.text:000000000000B598                 mov     esi, 2          ; cmd
.text:000000000000B59D                 mov     edi, ebx        ; fd
.text:000000000000B59F                 mov     edx, eax
.text:000000000000B5A1                 xor     eax, eax
.text:000000000000B5A3                 call    _fcntl
.text:000000000000B5A8                 cmp     eax, 0FFFFFFFFh
.text:000000000000B5AB                 jnz     loc_B4A0
.text:000000000000B5B1
.text:000000000000B5B1 loc_B5B1:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:000000000000B5B1                 call    ___errno_location
.text:000000000000B5B6                 mov     r12d, [rax]
.text:000000000000B5B9                 mov     rbp, rax
.text:000000000000B5BC                 mov     edi, ebx        ; fd
.text:000000000000B5BE                 call    _close
.text:000000000000B5C3                 mov     ebx, 0FFFFFFFFh
.text:000000000000B5C8                 mov     [rbp+0], r12d
.text:000000000000B5CC                 jmp     loc_B4A0
.text:000000000000B5CC ; ---------------------------------------------------------------------------
.text:000000000000B5D1                 align 8
.text:000000000000B5D8
.text:000000000000B5D8 loc_B5D8:                               ; CODE XREF: rpl_fcntl+89↑j
.text:000000000000B5D8                 call    ___errno_location
.text:000000000000B5DD                 cmp     dword ptr [rax], 16h
.text:000000000000B5E0                 jnz     loc_B44F
.text:000000000000B5E6                 xor     esi, esi        ; cmd
.text:000000000000B5E8                 xor     eax, eax
.text:000000000000B5EA                 mov     edx, r12d
.text:000000000000B5ED                 mov     edi, ebp        ; fd
.text:000000000000B5EF                 call    _fcntl
.text:000000000000B5F4                 test    eax, eax
.text:000000000000B5F6                 mov     ebx, eax
.text:000000000000B5F8                 js      loc_B4A0
.text:000000000000B5FE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:000000000000B608                 jmp     loc_B583
.text:000000000000B60D ; ---------------------------------------------------------------------------
.text:000000000000B60D
.text:000000000000B60D loc_B60D:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:000000000000B60D                 call    ___stack_chk_fail
.text:000000000000B612 ; ---------------------------------------------------------------------------
.text:000000000000B612
.text:000000000000B612 loc_B612:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:000000000000B612                 mov     rax, [rsp+68h+var_58]
.text:000000000000B617                 xor     esi, esi        ; cmd
.text:000000000000B619                 mov     edx, [rax+10h]
.text:000000000000B61C                 xor     eax, eax
.text:000000000000B61E                 call    _fcntl
.text:000000000000B623                 mov     ebx, eax
.text:000000000000B625                 jmp     loc_B4A0
.text:000000000000B62A ; ---------------------------------------------------------------------------
.text:000000000000B62A
.text:000000000000B62A loc_B62A:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:000000000000B62A                 mov     rax, [rsp+68h+var_60]
.text:000000000000B62F                 jmp     loc_B4F9
.text:000000000000B634 ; ---------------------------------------------------------------------------
.text:000000000000B634
.text:000000000000B634 loc_B634:                               ; CODE XREF: rpl_fcntl+186↑j
.text:000000000000B634                 mov     rax, [rsp+68h+var_60]
.text:000000000000B639                 jmp     loc_B551
.text:000000000000B639 ; } // starts at B3C0
.text:000000000000B639 rpl_fcntl       endp
.text:000000000000B639
.text:000000000000B639 ; ---------------------------------------------------------------------------
.text:000000000000B63E                 align 20h
.text:000000000000B640
.text:000000000000B640 ; =============== S U B R O U T I N E =======================================
.text:000000000000B640
.text:000000000000B640 ; Attributes: info_from_lumina
.text:000000000000B640
.text:000000000000B640 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000B640                 public rpl_fflush
.text:000000000000B640 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000B640 ; __unwind {
.text:000000000000B640                 test    rdi, rdi
.text:000000000000B643                 push    rbx
.text:000000000000B644                 mov     rbx, rdi
.text:000000000000B647                 jz      short loc_B65A
.text:000000000000B649                 call    ___freading
.text:000000000000B64E                 test    eax, eax
.text:000000000000B650                 jz      short loc_B65A
.text:000000000000B652                 test    dword ptr [rbx], 100h
.text:000000000000B658                 jnz     short loc_B668
.text:000000000000B65A
.text:000000000000B65A loc_B65A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000B65A                                         ; rpl_fflush+10↑j
.text:000000000000B65A                 mov     rdi, rbx        ; stream
.text:000000000000B65D                 pop     rbx
.text:000000000000B65E                 jmp     _fflush
.text:000000000000B65E ; ---------------------------------------------------------------------------
.text:000000000000B663                 align 8
.text:000000000000B668
.text:000000000000B668 loc_B668:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000B668                 mov     rdi, rbx
.text:000000000000B66B                 mov     edx, 1
.text:000000000000B670                 xor     esi, esi
.text:000000000000B672                 call    rpl_fseeko
.text:000000000000B677                 mov     rdi, rbx        ; stream
.text:000000000000B67A                 pop     rbx
.text:000000000000B67B                 jmp     _fflush
.text:000000000000B67B ; } // starts at B640
.text:000000000000B67B rpl_fflush      endp
.text:000000000000B67B
.text:000000000000B680
.text:000000000000B680 ; =============== S U B R O U T I N E =======================================
.text:000000000000B680
.text:000000000000B680 ; Attributes: info_from_lumina
.text:000000000000B680
.text:000000000000B680 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000B680                 public rpl_fseeko
.text:000000000000B680 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000B680 ; __unwind {
.text:000000000000B680                 mov     rax, [rdi+8]
.text:000000000000B684                 cmp     [rdi+10h], rax
.text:000000000000B688                 jz      short loc_B690
.text:000000000000B68A
.text:000000000000B68A loc_B68A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000B68A                                         ; rpl_fseeko+1F↓j
.text:000000000000B68A                 jmp     _fseeko
.text:000000000000B68A ; ---------------------------------------------------------------------------
.text:000000000000B68F                 align 10h
.text:000000000000B690
.text:000000000000B690 loc_B690:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000B690                 mov     rax, [rdi+20h]
.text:000000000000B694                 cmp     [rdi+28h], rax
.text:000000000000B698                 jnz     short loc_B68A
.text:000000000000B69A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000B69F                 jnz     short loc_B68A
.text:000000000000B6A1                 push    r12
.text:000000000000B6A3                 push    rbp
.text:000000000000B6A4                 mov     r12d, edx
.text:000000000000B6A7                 push    rbx
.text:000000000000B6A8                 mov     rbp, rsi
.text:000000000000B6AB                 mov     rbx, rdi
.text:000000000000B6AE                 call    _fileno
.text:000000000000B6B3                 mov     edx, r12d       ; whence
.text:000000000000B6B6                 mov     rsi, rbp        ; offset
.text:000000000000B6B9                 mov     edi, eax        ; fd
.text:000000000000B6BB                 call    _lseek
.text:000000000000B6C0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B6C4                 jz      short loc_B6D2
.text:000000000000B6C6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000B6C9                 mov     [rbx+90h], rax
.text:000000000000B6D0                 xor     eax, eax
.text:000000000000B6D2
.text:000000000000B6D2 loc_B6D2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000B6D2                 pop     rbx
.text:000000000000B6D3                 pop     rbp
.text:000000000000B6D4                 pop     r12
.text:000000000000B6D6                 retn
.text:000000000000B6D6 ; } // starts at B680
.text:000000000000B6D6 rpl_fseeko      endp
.text:000000000000B6D6
.text:000000000000B6D6 ; ---------------------------------------------------------------------------
.text:000000000000B6D7                 align 20h
.text:000000000000B6E0
.text:000000000000B6E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B6E0
.text:000000000000B6E0 ; Attributes: info_from_lumina
.text:000000000000B6E0
.text:000000000000B6E0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000B6E0                 public rpl_mbrtowc
.text:000000000000B6E0 rpl_mbrtowc     proc near               ; CODE XREF: mbsnwidth+BF↑p
.text:000000000000B6E0                                         ; quotearg_buffer_restyled+956↑p
.text:000000000000B6E0
.text:000000000000B6E0 pwc             = dword ptr -34h
.text:000000000000B6E0 var_30          = qword ptr -30h
.text:000000000000B6E0
.text:000000000000B6E0 ; __unwind {
.text:000000000000B6E0                 push    r13
.text:000000000000B6E2                 push    r12
.text:000000000000B6E4                 mov     r13, rsi
.text:000000000000B6E7                 push    rbp
.text:000000000000B6E8                 push    rbx
.text:000000000000B6E9                 mov     rbx, rdi
.text:000000000000B6EC                 mov     r12, rdx
.text:000000000000B6EF                 sub     rsp, 18h
.text:000000000000B6F3                 mov     rax, fs:28h
.text:000000000000B6FC                 mov     [rsp+38h+var_30], rax
.text:000000000000B701                 xor     eax, eax
.text:000000000000B703                 lea     rax, [rsp+38h+pwc]
.text:000000000000B708                 test    rdi, rdi
.text:000000000000B70B                 cmovz   rbx, rax
.text:000000000000B70F                 mov     rdi, rbx        ; pwc
.text:000000000000B712                 call    _mbrtowc
.text:000000000000B717                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000B71B                 mov     rbp, rax
.text:000000000000B71E                 jbe     short loc_B740
.text:000000000000B720                 test    r12, r12
.text:000000000000B723                 jz      short loc_B740
.text:000000000000B725                 xor     edi, edi
.text:000000000000B727                 call    hard_locale
.text:000000000000B72C                 test    al, al
.text:000000000000B72E                 jnz     short loc_B740
.text:000000000000B730                 movzx   eax, byte ptr [r13+0]
.text:000000000000B735                 mov     ebp, 1
.text:000000000000B73A                 mov     [rbx], eax
.text:000000000000B73C                 nop     dword ptr [rax+00h]
.text:000000000000B740
.text:000000000000B740 loc_B740:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000B740                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000B740                 mov     rdx, [rsp+38h+var_30]
.text:000000000000B745                 xor     rdx, fs:28h
.text:000000000000B74E                 mov     rax, rbp
.text:000000000000B751                 jnz     short loc_B75E
.text:000000000000B753                 add     rsp, 18h
.text:000000000000B757                 pop     rbx
.text:000000000000B758                 pop     rbp
.text:000000000000B759                 pop     r12
.text:000000000000B75B                 pop     r13
.text:000000000000B75D                 retn
.text:000000000000B75E ; ---------------------------------------------------------------------------
.text:000000000000B75E
.text:000000000000B75E loc_B75E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000B75E                 call    ___stack_chk_fail
.text:000000000000B75E ; } // starts at B6E0
.text:000000000000B75E rpl_mbrtowc     endp
.text:000000000000B75E
.text:000000000000B75E ; ---------------------------------------------------------------------------
.text:000000000000B763                 align 10h
.text:000000000000B770
.text:000000000000B770 ; =============== S U B R O U T I N E =======================================
.text:000000000000B770
.text:000000000000B770 ; Attributes: info_from_lumina
.text:000000000000B770
.text:000000000000B770 ; int __fastcall setenv_TZ(const char *tz)
.text:000000000000B770 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_B7F4↓p
.text:000000000000B770                                         ; set_tz:loc_BA45↓p
.text:000000000000B770 ; __unwind {
.text:000000000000B770                 test    rdi, rdi
.text:000000000000B773                 jz      short loc_B790
.text:000000000000B775                 mov     rsi, rdi        ; value
.text:000000000000B778                 lea     rdi, name       ; "TZ"
.text:000000000000B77F                 mov     edx, 1          ; replace
.text:000000000000B784                 jmp     _setenv
.text:000000000000B784 ; ---------------------------------------------------------------------------
.text:000000000000B789                 align 10h
.text:000000000000B790
.text:000000000000B790 loc_B790:                               ; CODE XREF: setenv_TZ+3↑j
.text:000000000000B790                 lea     rdi, name       ; "TZ"
.text:000000000000B797                 jmp     _unsetenv
.text:000000000000B797 ; } // starts at B770
.text:000000000000B797 setenv_TZ       endp
.text:000000000000B797
.text:000000000000B797 ; ---------------------------------------------------------------------------
.text:000000000000B79C                 align 20h
.text:000000000000B7A0
.text:000000000000B7A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B7A0
.text:000000000000B7A0 ; Attributes: info_from_lumina
.text:000000000000B7A0
.text:000000000000B7A0 ; void __fastcall tzfree_0(timezone_t tz)
.text:000000000000B7A0 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:000000000000B7A0                                         ; set_tz+67↓p ...
.text:000000000000B7A0 ; __unwind {
.text:000000000000B7A0                 test    rdi, rdi
.text:000000000000B7A3                 jz      short locret_B7C8
.text:000000000000B7A5                 push    rbx
.text:000000000000B7A6                 db      2Eh
.text:000000000000B7A6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B7B0
.text:000000000000B7B0 loc_B7B0:                               ; CODE XREF: tzfree_0+1E↓j
.text:000000000000B7B0                 mov     rbx, [rdi]
.text:000000000000B7B3                 call    _free
.text:000000000000B7B8                 test    rbx, rbx
.text:000000000000B7BB                 mov     rdi, rbx
.text:000000000000B7BE                 jnz     short loc_B7B0
.text:000000000000B7C0                 pop     rbx
.text:000000000000B7C1                 retn
.text:000000000000B7C1 ; ---------------------------------------------------------------------------
.text:000000000000B7C2                 align 8
.text:000000000000B7C8
.text:000000000000B7C8 locret_B7C8:                            ; CODE XREF: tzfree_0+3↑j
.text:000000000000B7C8                 rep retn
.text:000000000000B7C8 ; } // starts at B7A0
.text:000000000000B7C8 tzfree_0        endp
.text:000000000000B7C8
.text:000000000000B7C8 ; ---------------------------------------------------------------------------
.text:000000000000B7CA                 align 10h
.text:000000000000B7D0
.text:000000000000B7D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B7D0
.text:000000000000B7D0 ; Attributes: info_from_lumina
.text:000000000000B7D0
.text:000000000000B7D0 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:000000000000B7D0 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:000000000000B7D0                                         ; localtime_rz+98↓p ...
.text:000000000000B7D0 ; __unwind {
.text:000000000000B7D0                 push    r13
.text:000000000000B7D2                 push    r12
.text:000000000000B7D4                 push    rbp
.text:000000000000B7D5                 push    rbx
.text:000000000000B7D6                 mov     rbp, rdi
.text:000000000000B7D9                 sub     rsp, 8
.text:000000000000B7DD                 call    ___errno_location
.text:000000000000B7E2                 cmp     byte ptr [rbp+8], 0
.text:000000000000B7E6                 mov     rbx, rax
.text:000000000000B7E9                 mov     r12d, [rax]
.text:000000000000B7EC                 lea     rdi, [rbp+9]
.text:000000000000B7F0                 jnz     short loc_B7F4
.text:000000000000B7F2                 xor     edi, edi        ; value
.text:000000000000B7F4
.text:000000000000B7F4 loc_B7F4:                               ; CODE XREF: revert_tz+20↑j
.text:000000000000B7F4                 call    setenv_TZ
.text:000000000000B7F9                 test    eax, eax
.text:000000000000B7FB                 jz      short loc_B820
.text:000000000000B7FD                 mov     r12d, [rbx]
.text:000000000000B800                 xor     r13d, r13d
.text:000000000000B803
.text:000000000000B803 loc_B803:                               ; CODE XREF: revert_tz+5B↓j
.text:000000000000B803                 mov     rdi, rbp
.text:000000000000B806                 call    tzfree_0
.text:000000000000B80B                 mov     [rbx], r12d
.text:000000000000B80E                 add     rsp, 8
.text:000000000000B812                 mov     eax, r13d
.text:000000000000B815                 pop     rbx
.text:000000000000B816                 pop     rbp
.text:000000000000B817                 pop     r12
.text:000000000000B819                 pop     r13
.text:000000000000B81B                 retn
.text:000000000000B81B ; ---------------------------------------------------------------------------
.text:000000000000B81C                 align 20h
.text:000000000000B820
.text:000000000000B820 loc_B820:                               ; CODE XREF: revert_tz+2B↑j
.text:000000000000B820                 call    _tzset
.text:000000000000B825                 mov     r13d, 1
.text:000000000000B82B                 jmp     short loc_B803
.text:000000000000B82B ; } // starts at B7D0
.text:000000000000B82B revert_tz       endp
.text:000000000000B82B
.text:000000000000B82B ; ---------------------------------------------------------------------------
.text:000000000000B82D                 align 10h
.text:000000000000B830
.text:000000000000B830 ; =============== S U B R O U T I N E =======================================
.text:000000000000B830
.text:000000000000B830 ; Attributes: info_from_lumina
.text:000000000000B830
.text:000000000000B830 ; timezone_t __fastcall tzalloc(const char *name)
.text:000000000000B830                 public tzalloc
.text:000000000000B830 tzalloc         proc near               ; CODE XREF: main+196↑p
.text:000000000000B830                                         ; save_abbr+EC↓p ...
.text:000000000000B830 ; __unwind {
.text:000000000000B830                 test    rdi, rdi
.text:000000000000B833                 push    r12
.text:000000000000B835                 push    rbp
.text:000000000000B836                 push    rbx
.text:000000000000B837                 jz      short loc_B898
.text:000000000000B839                 mov     r12, rdi
.text:000000000000B83C                 call    _strlen
.text:000000000000B841                 lea     rbp, [rax+1]
.text:000000000000B845                 mov     edi, 76h ; 'v'
.text:000000000000B84A                 cmp     rbp, 76h ; 'v'
.text:000000000000B84E                 cmovnb  rdi, rbp
.text:000000000000B852                 add     rdi, 11h
.text:000000000000B856                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000B85A                 call    _malloc
.text:000000000000B85F                 test    rax, rax
.text:000000000000B862                 mov     rbx, rax
.text:000000000000B865                 jz      short loc_B88B
.text:000000000000B867                 mov     qword ptr [rax], 0
.text:000000000000B86E                 lea     rdi, [rbx+9]    ; dest
.text:000000000000B872                 mov     eax, 1
.text:000000000000B877                 mov     [rbx+8], ax
.text:000000000000B87B                 mov     rdx, rbp        ; n
.text:000000000000B87E                 mov     rsi, r12        ; src
.text:000000000000B881                 call    _memcpy
.text:000000000000B886                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000000B88B
.text:000000000000B88B loc_B88B:                               ; CODE XREF: tzalloc+35↑j
.text:000000000000B88B                                         ; tzalloc+78↓j
.text:000000000000B88B                 mov     rax, rbx
.text:000000000000B88E                 pop     rbx
.text:000000000000B88F                 pop     rbp
.text:000000000000B890                 pop     r12
.text:000000000000B892                 retn
.text:000000000000B892 ; ---------------------------------------------------------------------------
.text:000000000000B893                 align 8
.text:000000000000B898
.text:000000000000B898 loc_B898:                               ; CODE XREF: tzalloc+7↑j
.text:000000000000B898                 mov     edi, 80h        ; size
.text:000000000000B89D                 call    _malloc
.text:000000000000B8A2                 test    rax, rax
.text:000000000000B8A5                 mov     rbx, rax
.text:000000000000B8A8                 jz      short loc_B88B
.text:000000000000B8AA                 xor     edx, edx
.text:000000000000B8AC                 mov     qword ptr [rbx], 0
.text:000000000000B8B3                 mov     rax, rbx
.text:000000000000B8B6                 mov     [rbx+8], dx
.text:000000000000B8BA                 pop     rbx
.text:000000000000B8BB                 pop     rbp
.text:000000000000B8BC                 pop     r12
.text:000000000000B8BE                 retn
.text:000000000000B8BE ; } // starts at B830
.text:000000000000B8BE tzalloc         endp
.text:000000000000B8BE
.text:000000000000B8BE ; ---------------------------------------------------------------------------
.text:000000000000B8BF                 align 20h
.text:000000000000B8C0
.text:000000000000B8C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B8C0
.text:000000000000B8C0 ; Attributes: info_from_lumina
.text:000000000000B8C0
.text:000000000000B8C0 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:000000000000B8C0 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:000000000000B8C0                                         ; mktime_z+51↓p
.text:000000000000B8C0 ; __unwind {
.text:000000000000B8C0                 push    r15
.text:000000000000B8C2                 push    r14
.text:000000000000B8C4                 mov     eax, 1
.text:000000000000B8C9                 push    r13
.text:000000000000B8CB                 push    r12
.text:000000000000B8CD                 push    rbp
.text:000000000000B8CE                 push    rbx
.text:000000000000B8CF                 sub     rsp, 8
.text:000000000000B8D3                 mov     rbp, [rsi+30h]
.text:000000000000B8D7                 test    rbp, rbp
.text:000000000000B8DA                 jz      loc_B970
.text:000000000000B8E0                 cmp     rsi, rbp
.text:000000000000B8E3                 mov     r12, rdi
.text:000000000000B8E6                 mov     r13, rsi
.text:000000000000B8E9                 ja      short loc_B8F4
.text:000000000000B8EB                 lea     rdx, [rsi+38h]
.text:000000000000B8EF                 cmp     rbp, rdx
.text:000000000000B8F2                 jb      short loc_B970
.text:000000000000B8F4
.text:000000000000B8F4 loc_B8F4:                               ; CODE XREF: save_abbr+29↑j
.text:000000000000B8F4                 cmp     byte ptr [rbp+0], 0
.text:000000000000B8F8                 lea     rbx, [r12+9]
.text:000000000000B8FD                 jz      short loc_B960
.text:000000000000B8FF                 nop
.text:000000000000B900
.text:000000000000B900 loc_B900:                               ; CODE XREF: save_abbr+76↓j
.text:000000000000B900                                         ; save_abbr+7F↓j
.text:000000000000B900                 mov     rsi, rbp        ; s2
.text:000000000000B903                 mov     rdi, rbx        ; s1
.text:000000000000B906                 call    _strcmp
.text:000000000000B90B                 test    eax, eax
.text:000000000000B90D                 jz      short loc_B967
.text:000000000000B90F
.text:000000000000B90F loc_B90F:                               ; CODE XREF: save_abbr+95↓j
.text:000000000000B90F                 cmp     byte ptr [rbx], 0
.text:000000000000B912                 jnz     short loc_B926
.text:000000000000B914                 lea     r14, [r12+9]
.text:000000000000B919                 cmp     r14, rbx
.text:000000000000B91C                 jnz     short loc_B980
.text:000000000000B91E                 cmp     byte ptr [r12+8], 0
.text:000000000000B924                 jz      short loc_B980
.text:000000000000B926
.text:000000000000B926 loc_B926:                               ; CODE XREF: save_abbr+52↑j
.text:000000000000B926                 mov     rdi, rbx        ; s
.text:000000000000B929                 call    _strlen
.text:000000000000B92E                 lea     rbx, [rbx+rax+1]
.text:000000000000B933                 cmp     byte ptr [rbx], 0
.text:000000000000B936                 jnz     short loc_B900
.text:000000000000B938                 mov     rax, [r12]
.text:000000000000B93C                 test    rax, rax
.text:000000000000B93F                 jz      short loc_B900
.text:000000000000B941                 lea     rbx, [rax+9]
.text:000000000000B945                 mov     rsi, rbp        ; s2
.text:000000000000B948                 mov     r12, rax
.text:000000000000B94B                 mov     rdi, rbx        ; s1
.text:000000000000B94E                 call    _strcmp
.text:000000000000B953                 test    eax, eax
.text:000000000000B955                 jnz     short loc_B90F
.text:000000000000B957                 jmp     short loc_B967
.text:000000000000B957 ; ---------------------------------------------------------------------------
.text:000000000000B959                 align 20h
.text:000000000000B960
.text:000000000000B960 loc_B960:                               ; CODE XREF: save_abbr+3D↑j
.text:000000000000B960                 lea     rbx, asc_BEE4+1 ; ""
.text:000000000000B967
.text:000000000000B967 loc_B967:                               ; CODE XREF: save_abbr+4D↑j
.text:000000000000B967                                         ; save_abbr+97↑j ...
.text:000000000000B967                 mov     [r13+30h], rbx
.text:000000000000B96B                 mov     eax, 1
.text:000000000000B970
.text:000000000000B970 loc_B970:                               ; CODE XREF: save_abbr+1A↑j
.text:000000000000B970                                         ; save_abbr+32↑j ...
.text:000000000000B970                 add     rsp, 8
.text:000000000000B974                 pop     rbx
.text:000000000000B975                 pop     rbp
.text:000000000000B976                 pop     r12
.text:000000000000B978                 pop     r13
.text:000000000000B97A                 pop     r14
.text:000000000000B97C                 pop     r15
.text:000000000000B97E                 retn
.text:000000000000B97E ; ---------------------------------------------------------------------------
.text:000000000000B97F                 align 20h
.text:000000000000B980
.text:000000000000B980 loc_B980:                               ; CODE XREF: save_abbr+5C↑j
.text:000000000000B980                                         ; save_abbr+64↑j
.text:000000000000B980                 mov     rdi, rbp        ; s
.text:000000000000B983                 call    _strlen
.text:000000000000B988                 lea     rdx, [rax+1]    ; n
.text:000000000000B98C                 mov     r15, rax
.text:000000000000B98F                 mov     rax, rbx
.text:000000000000B992                 sub     rax, r14
.text:000000000000B995                 mov     rcx, rax
.text:000000000000B998                 not     rcx
.text:000000000000B99B                 cmp     rcx, rdx
.text:000000000000B99E                 jb      short loc_B9D0
.text:000000000000B9A0                 add     rax, rdx
.text:000000000000B9A3                 cmp     rax, 76h ; 'v'
.text:000000000000B9A7                 jbe     short loc_B9E0
.text:000000000000B9A9                 mov     rdi, rbp        ; src
.text:000000000000B9AC                 call    tzalloc
.text:000000000000B9B1                 mov     rbx, rax
.text:000000000000B9B4                 mov     [r12], rax
.text:000000000000B9B8                 xor     eax, eax
.text:000000000000B9BA                 test    rbx, rbx
.text:000000000000B9BD                 jz      short loc_B970
.text:000000000000B9BF                 mov     byte ptr [rbx+8], 0
.text:000000000000B9C3                 add     rbx, 9
.text:000000000000B9C7                 jmp     short loc_B967
.text:000000000000B9C7 ; ---------------------------------------------------------------------------
.text:000000000000B9C9                 align 10h
.text:000000000000B9D0
.text:000000000000B9D0 loc_B9D0:                               ; CODE XREF: save_abbr+DE↑j
.text:000000000000B9D0                 call    ___errno_location
.text:000000000000B9D5                 mov     dword ptr [rax], 0Ch
.text:000000000000B9DB                 xor     eax, eax
.text:000000000000B9DD                 jmp     short loc_B970
.text:000000000000B9DD ; ---------------------------------------------------------------------------
.text:000000000000B9DF                 align 20h
.text:000000000000B9E0
.text:000000000000B9E0 loc_B9E0:                               ; CODE XREF: save_abbr+E7↑j
.text:000000000000B9E0                 mov     rsi, rbp        ; src
.text:000000000000B9E3                 mov     rdi, rbx        ; dest
.text:000000000000B9E6                 call    _memcpy
.text:000000000000B9EB                 mov     byte ptr [rbx+r15+1], 0
.text:000000000000B9F1                 jmp     loc_B967
.text:000000000000B9F1 ; } // starts at B8C0
.text:000000000000B9F1 save_abbr       endp
.text:000000000000B9F1
.text:000000000000B9F1 ; ---------------------------------------------------------------------------
.text:000000000000B9F6                 align 20h
.text:000000000000BA00
.text:000000000000BA00 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA00
.text:000000000000BA00 ; Attributes: info_from_lumina
.text:000000000000BA00
.text:000000000000BA00 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:000000000000BA00 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:000000000000BA00                                         ; mktime_z+27↓p
.text:000000000000BA00
.text:000000000000BA00 var_20          = qword ptr -20h
.text:000000000000BA00
.text:000000000000BA00 ; __unwind {
.text:000000000000BA00                 push    r12
.text:000000000000BA02                 push    rbp
.text:000000000000BA03                 mov     rbp, rdi
.text:000000000000BA06                 push    rbx
.text:000000000000BA07                 lea     rdi, name       ; "TZ"
.text:000000000000BA0E                 sub     rsp, 10h
.text:000000000000BA12                 call    _getenv
.text:000000000000BA17                 test    rax, rax
.text:000000000000BA1A                 mov     rbx, rax
.text:000000000000BA1D                 jz      loc_BAB8
.text:000000000000BA23                 cmp     byte ptr [rbp+8], 0
.text:000000000000BA27                 jnz     short loc_BA90
.text:000000000000BA29
.text:000000000000BA29 loc_BA29:                               ; CODE XREF: set_tz+A4↓j
.text:000000000000BA29                                         ; set_tz+C2↓j
.text:000000000000BA29                 mov     rdi, rbx        ; src
.text:000000000000BA2C                 call    tzalloc
.text:000000000000BA31                 test    rax, rax
.text:000000000000BA34                 mov     r12, rax
.text:000000000000BA37                 jz      short loc_BA7D
.text:000000000000BA39                 xor     edi, edi
.text:000000000000BA3B                 cmp     byte ptr [rbp+8], 0
.text:000000000000BA3F                 jz      short loc_BA45
.text:000000000000BA41                 lea     rdi, [rbp+9]    ; value
.text:000000000000BA45
.text:000000000000BA45 loc_BA45:                               ; CODE XREF: set_tz+3F↑j
.text:000000000000BA45                 call    setenv_TZ
.text:000000000000BA4A                 test    eax, eax
.text:000000000000BA4C                 jz      loc_BAD8
.text:000000000000BA52                 call    ___errno_location
.text:000000000000BA57                 cmp     r12, 1
.text:000000000000BA5B                 mov     ebx, [rax]
.text:000000000000BA5D                 jz      short loc_BA78
.text:000000000000BA5F                 mov     rdi, r12
.text:000000000000BA62                 mov     [rsp+28h+var_20], rax
.text:000000000000BA67                 call    tzfree_0
.text:000000000000BA6C                 mov     rax, [rsp+28h+var_20]
.text:000000000000BA71                 nop     dword ptr [rax+00000000h]
.text:000000000000BA78
.text:000000000000BA78 loc_BA78:                               ; CODE XREF: set_tz+5D↑j
.text:000000000000BA78                 mov     [rax], ebx
.text:000000000000BA7A                 xor     r12d, r12d
.text:000000000000BA7D
.text:000000000000BA7D loc_BA7D:                               ; CODE XREF: set_tz+37↑j
.text:000000000000BA7D                                         ; set_tz+DD↓j
.text:000000000000BA7D                 add     rsp, 10h
.text:000000000000BA81                 mov     rax, r12
.text:000000000000BA84                 pop     rbx
.text:000000000000BA85                 pop     rbp
.text:000000000000BA86                 pop     r12
.text:000000000000BA88                 retn
.text:000000000000BA88 ; ---------------------------------------------------------------------------
.text:000000000000BA89                 align 10h
.text:000000000000BA90
.text:000000000000BA90 loc_BA90:                               ; CODE XREF: set_tz+27↑j
.text:000000000000BA90                 lea     rdi, [rbp+9]    ; s1
.text:000000000000BA94                 mov     rsi, rax        ; s2
.text:000000000000BA97                 mov     r12d, 1
.text:000000000000BA9D                 call    _strcmp
.text:000000000000BAA2                 test    eax, eax
.text:000000000000BAA4                 jnz     short loc_BA29
.text:000000000000BAA6                 add     rsp, 10h
.text:000000000000BAAA                 mov     rax, r12
.text:000000000000BAAD                 pop     rbx
.text:000000000000BAAE                 pop     rbp
.text:000000000000BAAF                 pop     r12
.text:000000000000BAB1                 retn
.text:000000000000BAB1 ; ---------------------------------------------------------------------------
.text:000000000000BAB2                 align 8
.text:000000000000BAB8
.text:000000000000BAB8 loc_BAB8:                               ; CODE XREF: set_tz+1D↑j
.text:000000000000BAB8                 cmp     byte ptr [rbp+8], 0
.text:000000000000BABC                 mov     r12d, 1
.text:000000000000BAC2                 jnz     loc_BA29
.text:000000000000BAC8                 add     rsp, 10h
.text:000000000000BACC                 mov     rax, r12
.text:000000000000BACF                 pop     rbx
.text:000000000000BAD0                 pop     rbp
.text:000000000000BAD1                 pop     r12
.text:000000000000BAD3                 retn
.text:000000000000BAD3 ; ---------------------------------------------------------------------------
.text:000000000000BAD4                 align 8
.text:000000000000BAD8
.text:000000000000BAD8 loc_BAD8:                               ; CODE XREF: set_tz+4C↑j
.text:000000000000BAD8                 call    _tzset
.text:000000000000BADD                 jmp     short loc_BA7D
.text:000000000000BADD ; } // starts at BA00
.text:000000000000BADD set_tz          endp
.text:000000000000BADD
.text:000000000000BADD ; ---------------------------------------------------------------------------
.text:000000000000BADF                 align 20h
.text:000000000000BAE0
.text:000000000000BAE0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAE0
.text:000000000000BAE0
.text:000000000000BAE0                 public tzfree
.text:000000000000BAE0 tzfree          proc near
.text:000000000000BAE0 ; __unwind {
.text:000000000000BAE0                 cmp     rdi, 1
.text:000000000000BAE4                 jz      short locret_BAEB
.text:000000000000BAE6                 jmp     tzfree_0
.text:000000000000BAEB ; ---------------------------------------------------------------------------
.text:000000000000BAEB
.text:000000000000BAEB locret_BAEB:                            ; CODE XREF: tzfree+4↑j
.text:000000000000BAEB                 retn
.text:000000000000BAEB ; } // starts at BAE0
.text:000000000000BAEB tzfree          endp
.text:000000000000BAEB
.text:000000000000BAEB ; ---------------------------------------------------------------------------
.text:000000000000BAEC                 align 10h
.text:000000000000BAF0
.text:000000000000BAF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BAF0
.text:000000000000BAF0 ; Attributes: info_from_lumina
.text:000000000000BAF0
.text:000000000000BAF0 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:000000000000BAF0                 public localtime_rz
.text:000000000000BAF0 localtime_rz    proc near               ; CODE XREF: init_header+82↑p
.text:000000000000BAF0 ; __unwind {
.text:000000000000BAF0                 push    r13
.text:000000000000BAF2                 push    r12
.text:000000000000BAF4                 push    rbp
.text:000000000000BAF5                 push    rbx
.text:000000000000BAF6                 mov     rbp, rsi
.text:000000000000BAF9                 sub     rsp, 8
.text:000000000000BAFD                 test    rdi, rdi
.text:000000000000BB00                 jz      short loc_BB70
.text:000000000000BB02                 mov     r13, rdx
.text:000000000000BB05                 mov     rbx, rdi
.text:000000000000BB08                 call    set_tz
.text:000000000000BB0D                 test    rax, rax
.text:000000000000BB10                 mov     r12, rax
.text:000000000000BB13                 jz      short loc_BB5E
.text:000000000000BB15                 mov     rsi, r13        ; tp
.text:000000000000BB18                 mov     rdi, rbp        ; timer
.text:000000000000BB1B                 call    _localtime_r
.text:000000000000BB20                 test    rax, rax
.text:000000000000BB23                 jz      short loc_BB50
.text:000000000000BB25                 mov     rsi, r13
.text:000000000000BB28                 mov     rdi, rbx
.text:000000000000BB2B                 call    save_abbr
.text:000000000000BB30                 test    al, al
.text:000000000000BB32                 jz      short loc_BB50
.text:000000000000BB34                 cmp     r12, 1
.text:000000000000BB38                 jnz     short loc_BB85
.text:000000000000BB3A
.text:000000000000BB3A loc_BB3A:                               ; CODE XREF: localtime_rz+9F↓j
.text:000000000000BB3A                 add     rsp, 8
.text:000000000000BB3E                 mov     rax, r13
.text:000000000000BB41                 pop     rbx
.text:000000000000BB42                 pop     rbp
.text:000000000000BB43                 pop     r12
.text:000000000000BB45                 pop     r13
.text:000000000000BB47                 retn
.text:000000000000BB47 ; ---------------------------------------------------------------------------
.text:000000000000BB48                 align 10h
.text:000000000000BB50
.text:000000000000BB50 loc_BB50:                               ; CODE XREF: localtime_rz+33↑j
.text:000000000000BB50                                         ; localtime_rz+42↑j
.text:000000000000BB50                 cmp     r12, 1
.text:000000000000BB54                 jz      short loc_BB5E
.text:000000000000BB56                 mov     rdi, r12
.text:000000000000BB59                 call    revert_tz
.text:000000000000BB5E
.text:000000000000BB5E loc_BB5E:                               ; CODE XREF: localtime_rz+23↑j
.text:000000000000BB5E                                         ; localtime_rz+64↑j ...
.text:000000000000BB5E                 add     rsp, 8
.text:000000000000BB62                 xor     eax, eax
.text:000000000000BB64                 pop     rbx
.text:000000000000BB65                 pop     rbp
.text:000000000000BB66                 pop     r12
.text:000000000000BB68                 pop     r13
.text:000000000000BB6A                 retn
.text:000000000000BB6A ; ---------------------------------------------------------------------------
.text:000000000000BB6B                 align 10h
.text:000000000000BB70
.text:000000000000BB70 loc_BB70:                               ; CODE XREF: localtime_rz+10↑j
.text:000000000000BB70                 add     rsp, 8
.text:000000000000BB74                 mov     rdi, rbp        ; timer
.text:000000000000BB77                 mov     rsi, rdx        ; tp
.text:000000000000BB7A                 pop     rbx
.text:000000000000BB7B                 pop     rbp
.text:000000000000BB7C                 pop     r12
.text:000000000000BB7E                 pop     r13
.text:000000000000BB80                 jmp     _gmtime_r
.text:000000000000BB85 ; ---------------------------------------------------------------------------
.text:000000000000BB85
.text:000000000000BB85 loc_BB85:                               ; CODE XREF: localtime_rz+48↑j
.text:000000000000BB85                 mov     rdi, r12
.text:000000000000BB88                 call    revert_tz
.text:000000000000BB8D                 test    al, al
.text:000000000000BB8F                 jnz     short loc_BB3A
.text:000000000000BB91                 jmp     short loc_BB5E
.text:000000000000BB91 ; } // starts at BAF0
.text:000000000000BB91 localtime_rz    endp
.text:000000000000BB91
.text:000000000000BB91 ; ---------------------------------------------------------------------------
.text:000000000000BB93                 align 20h
.text:000000000000BBA0
.text:000000000000BBA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BBA0
.text:000000000000BBA0 ; Attributes: info_from_lumina
.text:000000000000BBA0
.text:000000000000BBA0 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:000000000000BBA0                 public mktime_z
.text:000000000000BBA0 mktime_z        proc near               ; CODE XREF: __strftime_internal+DB2↑p
.text:000000000000BBA0
.text:000000000000BBA0 timer           = qword ptr -60h
.text:000000000000BBA0 tp              = tm ptr -58h
.text:000000000000BBA0 var_20          = qword ptr -20h
.text:000000000000BBA0
.text:000000000000BBA0 ; __unwind {
.text:000000000000BBA0                 push    r12
.text:000000000000BBA2                 push    rbp
.text:000000000000BBA3                 push    rbx
.text:000000000000BBA4                 mov     rbx, rsi
.text:000000000000BBA7                 sub     rsp, 50h
.text:000000000000BBAB                 mov     rax, fs:28h
.text:000000000000BBB4                 mov     [rsp+68h+var_20], rax
.text:000000000000BBB9                 xor     eax, eax
.text:000000000000BBBB                 test    rdi, rdi
.text:000000000000BBBE                 jz      loc_BCC0
.text:000000000000BBC4                 mov     rbp, rdi
.text:000000000000BBC7                 call    set_tz
.text:000000000000BBCC                 test    rax, rax
.text:000000000000BBCF                 mov     r12, rax
.text:000000000000BBD2                 jz      loc_BCD0
.text:000000000000BBD8                 mov     rdi, rbx        ; tp
.text:000000000000BBDB                 call    _mktime
.text:000000000000BBE0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BBE4                 mov     [rsp+68h+timer], rax
.text:000000000000BBE9                 jz      short loc_BC40
.text:000000000000BBEB
.text:000000000000BBEB loc_BBEB:                               ; CODE XREF: mktime_z+10D↓j
.text:000000000000BBEB                 mov     rsi, rbx
.text:000000000000BBEE                 mov     rdi, rbp
.text:000000000000BBF1                 call    save_abbr
.text:000000000000BBF6                 test    al, al
.text:000000000000BBF8                 jnz     short loc_BC03
.text:000000000000BBFA                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:000000000000BC03
.text:000000000000BC03 loc_BC03:                               ; CODE XREF: mktime_z+58↑j
.text:000000000000BC03                                         ; mktime_z+B2↓j ...
.text:000000000000BC03                 cmp     r12, 1
.text:000000000000BC07                 jz      short loc_BC19
.text:000000000000BC09                 mov     rdi, r12
.text:000000000000BC0C                 call    revert_tz
.text:000000000000BC11                 test    al, al
.text:000000000000BC13                 jz      loc_BCD0
.text:000000000000BC19
.text:000000000000BC19 loc_BC19:                               ; CODE XREF: mktime_z+67↑j
.text:000000000000BC19                 mov     rax, [rsp+68h+timer]
.text:000000000000BC1E
.text:000000000000BC1E loc_BC1E:                               ; CODE XREF: mktime_z+128↓j
.text:000000000000BC1E                                         ; mktime_z+137↓j
.text:000000000000BC1E                 mov     rcx, [rsp+68h+var_20]
.text:000000000000BC23                 xor     rcx, fs:28h
.text:000000000000BC2C                 jnz     loc_BCDC
.text:000000000000BC32                 add     rsp, 50h
.text:000000000000BC36                 pop     rbx
.text:000000000000BC37                 pop     rbp
.text:000000000000BC38                 pop     r12
.text:000000000000BC3A                 retn
.text:000000000000BC3A ; ---------------------------------------------------------------------------
.text:000000000000BC3B                 align 20h
.text:000000000000BC40
.text:000000000000BC40 loc_BC40:                               ; CODE XREF: mktime_z+49↑j
.text:000000000000BC40                 lea     rsi, [rsp+68h+tp] ; tp
.text:000000000000BC45                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000000BC4A                 call    _localtime_r
.text:000000000000BC4F                 test    rax, rax
.text:000000000000BC52                 jz      short loc_BC03
.text:000000000000BC54                 mov     eax, [rbx]
.text:000000000000BC56                 mov     edx, [rbx+4]
.text:000000000000BC59                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000000BC5D                 xor     edx, [rsp+68h+tp.tm_min]
.text:000000000000BC61                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:000000000000BC65                 or      eax, edx
.text:000000000000BC67                 mov     edx, [rbx+8]
.text:000000000000BC6A                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000000BC6E                 or      eax, edx
.text:000000000000BC70                 mov     edx, [rbx+0Ch]
.text:000000000000BC73                 xor     edx, [rsp+68h+tp.tm_mday]
.text:000000000000BC77                 or      eax, edx
.text:000000000000BC79                 mov     edx, [rbx+10h]
.text:000000000000BC7C                 xor     edx, [rsp+68h+tp.tm_mon]
.text:000000000000BC80                 or      eax, edx
.text:000000000000BC82                 mov     edx, [rbx+14h]
.text:000000000000BC85                 xor     edx, [rsp+68h+tp.tm_year]
.text:000000000000BC89                 or      eax, edx
.text:000000000000BC8B                 mov     edx, [rbx+20h]
.text:000000000000BC8E                 test    edx, edx
.text:000000000000BC90                 setz    dil
.text:000000000000BC94                 test    ecx, ecx
.text:000000000000BC96                 setz    sil
.text:000000000000BC9A                 cmp     dil, sil
.text:000000000000BC9D                 jz      short loc_BCAB
.text:000000000000BC9F                 test    edx, edx
.text:000000000000BCA1                 js      short loc_BCAB
.text:000000000000BCA3                 test    ecx, ecx
.text:000000000000BCA5                 jns     loc_BC03
.text:000000000000BCAB
.text:000000000000BCAB loc_BCAB:                               ; CODE XREF: mktime_z+FD↑j
.text:000000000000BCAB                                         ; mktime_z+101↑j
.text:000000000000BCAB                 test    eax, eax
.text:000000000000BCAD                 jz      loc_BBEB
.text:000000000000BCB3                 jmp     loc_BC03
.text:000000000000BCB3 ; ---------------------------------------------------------------------------
.text:000000000000BCB8                 align 20h
.text:000000000000BCC0
.text:000000000000BCC0 loc_BCC0:                               ; CODE XREF: mktime_z+1E↑j
.text:000000000000BCC0                 mov     rdi, rsi        ; tp
.text:000000000000BCC3                 call    _timegm
.text:000000000000BCC8                 jmp     loc_BC1E
.text:000000000000BCC8 ; ---------------------------------------------------------------------------
.text:000000000000BCCD                 align 10h
.text:000000000000BCD0
.text:000000000000BCD0 loc_BCD0:                               ; CODE XREF: mktime_z+32↑j
.text:000000000000BCD0                                         ; mktime_z+73↑j
.text:000000000000BCD0                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000BCD7                 jmp     loc_BC1E
.text:000000000000BCDC ; ---------------------------------------------------------------------------
.text:000000000000BCDC
.text:000000000000BCDC loc_BCDC:                               ; CODE XREF: mktime_z+8C↑j
.text:000000000000BCDC                 call    ___stack_chk_fail
.text:000000000000BCDC ; } // starts at BBA0
.text:000000000000BCDC mktime_z        endp
.text:000000000000BCDC
.text:000000000000BCDC ; ---------------------------------------------------------------------------
.text:000000000000BCE1                 align 10h
.text:000000000000BCF0
.text:000000000000BCF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BCF0
.text:000000000000BCF0 ; Attributes: info_from_lumina
.text:000000000000BCF0
.text:000000000000BCF0 ; int __fastcall close_stream(FILE *stream)
.text:000000000000BCF0                 public close_stream
.text:000000000000BCF0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000BCF0                                         ; close_stdout+33↑p
.text:000000000000BCF0 ; __unwind {
.text:000000000000BCF0                 push    r12
.text:000000000000BCF2                 push    rbp
.text:000000000000BCF3                 mov     rbp, rdi
.text:000000000000BCF6                 push    rbx
.text:000000000000BCF7                 call    ___fpending
.text:000000000000BCFC                 mov     ebx, [rbp+0]
.text:000000000000BCFF                 mov     rdi, rbp        ; stream
.text:000000000000BD02                 mov     r12, rax
.text:000000000000BD05                 call    rpl_fclose
.text:000000000000BD0A                 and     ebx, 20h
.text:000000000000BD0D                 test    ebx, ebx
.text:000000000000BD0F                 jnz     short loc_BD28
.text:000000000000BD11                 test    eax, eax
.text:000000000000BD13                 jz      short loc_BD1F
.text:000000000000BD15                 test    r12, r12
.text:000000000000BD18                 mov     eax, 0FFFFFFFFh
.text:000000000000BD1D                 jz      short loc_BD58
.text:000000000000BD1F
.text:000000000000BD1F loc_BD1F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000BD1F                 pop     rbx
.text:000000000000BD20                 pop     rbp
.text:000000000000BD21                 pop     r12
.text:000000000000BD23                 retn
.text:000000000000BD23 ; ---------------------------------------------------------------------------
.text:000000000000BD24                 align 8
.text:000000000000BD28
.text:000000000000BD28 loc_BD28:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000BD28                 test    eax, eax
.text:000000000000BD2A                 jnz     short loc_BD48
.text:000000000000BD2C                 call    ___errno_location
.text:000000000000BD31                 mov     dword ptr [rax], 0
.text:000000000000BD37                 mov     eax, 0FFFFFFFFh
.text:000000000000BD3C                 pop     rbx
.text:000000000000BD3D                 pop     rbp
.text:000000000000BD3E                 pop     r12
.text:000000000000BD40                 retn
.text:000000000000BD40 ; ---------------------------------------------------------------------------
.text:000000000000BD41                 align 8
.text:000000000000BD48
.text:000000000000BD48 loc_BD48:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000BD48                 pop     rbx
.text:000000000000BD49                 mov     eax, 0FFFFFFFFh
.text:000000000000BD4E                 pop     rbp
.text:000000000000BD4F                 pop     r12
.text:000000000000BD51                 retn
.text:000000000000BD51 ; ---------------------------------------------------------------------------
.text:000000000000BD52                 align 8
.text:000000000000BD58
.text:000000000000BD58 loc_BD58:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000BD58                 call    ___errno_location
.text:000000000000BD5D                 cmp     dword ptr [rax], 9
.text:000000000000BD60                 pop     rbx
.text:000000000000BD61                 pop     rbp
.text:000000000000BD62                 pop     r12
.text:000000000000BD64                 setnz   al
.text:000000000000BD67                 movzx   eax, al
.text:000000000000BD6A                 neg     eax
.text:000000000000BD6C                 retn
.text:000000000000BD6C ; } // starts at BCF0
.text:000000000000BD6C close_stream    endp
.text:000000000000BD6C
.text:000000000000BD6C ; ---------------------------------------------------------------------------
.text:000000000000BD6D                 align 10h
.text:000000000000BD70
.text:000000000000BD70 ; =============== S U B R O U T I N E =======================================
.text:000000000000BD70
.text:000000000000BD70
.text:000000000000BD70                 public locale_charset
.text:000000000000BD70 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000BD70 ; __unwind {
.text:000000000000BD70                 sub     rsp, 8
.text:000000000000BD74                 mov     edi, 0Eh        ; item
.text:000000000000BD79                 call    _nl_langinfo
.text:000000000000BD7E                 test    rax, rax
.text:000000000000BD81                 jz      short loc_BDA0
.text:000000000000BD83                 cmp     byte ptr [rax], 0
.text:000000000000BD86                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000BD8D                 cmovz   rax, rdx
.text:000000000000BD91                 add     rsp, 8
.text:000000000000BD95                 retn
.text:000000000000BD95 ; ---------------------------------------------------------------------------
.text:000000000000BD96                 align 20h
.text:000000000000BDA0
.text:000000000000BDA0 loc_BDA0:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000BDA0                 lea     rax, aAscii     ; "ASCII"
.text:000000000000BDA7                 add     rsp, 8
.text:000000000000BDAB                 retn
.text:000000000000BDAB ; } // starts at BD70
.text:000000000000BDAB locale_charset  endp
.text:000000000000BDAB
.text:000000000000BDAB ; ---------------------------------------------------------------------------
.text:000000000000BDAC                 align 10h
.text:000000000000BDB0
.text:000000000000BDB0 ; =============== S U B R O U T I N E =======================================
.text:000000000000BDB0
.text:000000000000BDB0 ; Attributes: info_from_lumina
.text:000000000000BDB0
.text:000000000000BDB0 ; void _libc_csu_init(void)
.text:000000000000BDB0                 public __libc_csu_init
.text:000000000000BDB0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000BDB0 ; __unwind {
.text:000000000000BDB0                 push    r15
.text:000000000000BDB2                 push    r14
.text:000000000000BDB4                 mov     r15, rdx
.text:000000000000BDB7                 push    r13
.text:000000000000BDB9                 push    r12
.text:000000000000BDBB                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000BDC2                 push    rbp
.text:000000000000BDC3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000BDCA                 push    rbx
.text:000000000000BDCB                 mov     r13d, edi
.text:000000000000BDCE                 mov     r14, rsi
.text:000000000000BDD1                 sub     rbp, r12
.text:000000000000BDD4                 sub     rsp, 8
.text:000000000000BDD8                 sar     rbp, 3
.text:000000000000BDDC                 call    _init_proc
.text:000000000000BDE1                 test    rbp, rbp
.text:000000000000BDE4                 jz      short loc_BE06
.text:000000000000BDE6                 xor     ebx, ebx
.text:000000000000BDE8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000BDF0
.text:000000000000BDF0 loc_BDF0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000BDF0                 mov     rdx, r15
.text:000000000000BDF3                 mov     rsi, r14
.text:000000000000BDF6                 mov     edi, r13d
.text:000000000000BDF9                 call    ds:(__frame_dummy_init_array_entry - 2107D0h)[r12+rbx*8]
.text:000000000000BDFD                 add     rbx, 1
.text:000000000000BE01                 cmp     rbp, rbx
.text:000000000000BE04                 jnz     short loc_BDF0
.text:000000000000BE06
.text:000000000000BE06 loc_BE06:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000BE06                 add     rsp, 8
.text:000000000000BE0A                 pop     rbx
.text:000000000000BE0B                 pop     rbp
.text:000000000000BE0C                 pop     r12
.text:000000000000BE0E                 pop     r13
.text:000000000000BE10                 pop     r14
.text:000000000000BE12                 pop     r15
.text:000000000000BE14                 retn
.text:000000000000BE14 ; } // starts at BDB0
.text:000000000000BE14 __libc_csu_init endp
.text:000000000000BE14
.text:000000000000BE14 ; ---------------------------------------------------------------------------
.text:000000000000BE15                 align 20h
.text:000000000000BE20
.text:000000000000BE20 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE20
.text:000000000000BE20
.text:000000000000BE20 ; void _libc_csu_fini(void)
.text:000000000000BE20                 public __libc_csu_fini
.text:000000000000BE20 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000BE20 ; __unwind {
.text:000000000000BE20                 rep retn
.text:000000000000BE20 ; } // starts at BE20
.text:000000000000BE20 __libc_csu_fini endp
.text:000000000000BE20
.text:000000000000BE20 ; ---------------------------------------------------------------------------
.text:000000000000BE22                 align 10h
.text:000000000000BE30
.text:000000000000BE30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BE30
.text:000000000000BE30
.text:000000000000BE30 atexit          proc near               ; CODE XREF: main+6C↑p
.text:000000000000BE30 ; __unwind {
.text:000000000000BE30                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000BE37                 xor     esi, esi        ; obj
.text:000000000000BE39                 jmp     ___cxa_atexit
.text:000000000000BE39 ; } // starts at BE30
.text:000000000000BE39 atexit          endp
.text:000000000000BE39
.text:000000000000BE39 _text           ends
.text:000000000000BE39
LOAD:000000000000BE3E ; ===========================================================================
LOAD:000000000000BE3E
LOAD:000000000000BE3E ; Segment type: Pure code
LOAD:000000000000BE3E ; Segment permissions: Read/Execute
LOAD:000000000000BE3E LOAD            segment byte public 'CODE' use64
LOAD:000000000000BE3E                 assume cs:LOAD
LOAD:000000000000BE3E                 ;org 0BE3Eh
LOAD:000000000000BE3E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000BE3E                 align 20h
LOAD:000000000000BE3E LOAD            ends
LOAD:000000000000BE3E
.fini:000000000000BE40 ; ===========================================================================
.fini:000000000000BE40
.fini:000000000000BE40 ; Segment type: Pure code
.fini:000000000000BE40 ; Segment permissions: Read/Execute
.fini:000000000000BE40 _fini           segment dword public 'CODE' use64
.fini:000000000000BE40                 assume cs:_fini
.fini:000000000000BE40                 ;org 0BE40h
.fini:000000000000BE40                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000BE40
.fini:000000000000BE40 ; =============== S U B R O U T I N E =======================================
.fini:000000000000BE40
.fini:000000000000BE40
.fini:000000000000BE40                 public _term_proc
.fini:000000000000BE40 _term_proc      proc near
.fini:000000000000BE40                 sub     rsp, 8          ; _fini
.fini:000000000000BE44                 add     rsp, 8
.fini:000000000000BE48                 retn
.fini:000000000000BE48 _term_proc      endp
.fini:000000000000BE48
.fini:000000000000BE48 _fini           ends
.fini:000000000000BE48
LOAD:000000000000BE49 ; ===========================================================================
LOAD:000000000000BE49
LOAD:000000000000BE49 ; Segment type: Pure code
LOAD:000000000000BE49 ; Segment permissions: Read/Execute
LOAD:000000000000BE49 LOAD            segment byte public 'CODE' use64
LOAD:000000000000BE49                 assume cs:LOAD
LOAD:000000000000BE49                 ;org 0BE49h
LOAD:000000000000BE49                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000BE49                 align 20h
LOAD:000000000000BE49 LOAD            ends
LOAD:000000000000BE49
.rodata:000000000000BE60 ; ===========================================================================
.rodata:000000000000BE60
.rodata:000000000000BE60 ; Segment type: Pure data
.rodata:000000000000BE60 ; Segment permissions: Read
.rodata:000000000000BE60 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000BE60                 assume cs:_rodata
.rodata:000000000000BE60                 ;org 0BE60h
.rodata:000000000000BE60                 public _IO_stdin_used
.rodata:000000000000BE60 _IO_stdin_used  db    1
.rodata:000000000000BE61                 db    0
.rodata:000000000000BE62                 db    2
.rodata:000000000000BE63                 db    0
.rodata:000000000000BE64 ; const char aIntegerOverflo[]
.rodata:000000000000BE64 aIntegerOverflo db 'integer overflow',0 ; DATA XREF: integer_overflow↑o
.rodata:000000000000BE75 ; const char aInvalidNumberO[]
.rodata:000000000000BE75 aInvalidNumberO db 'invalid number of columns',0
.rodata:000000000000BE75                                         ; DATA XREF: parse_column_count+1↑o
.rodata:000000000000BE8F aS09d           db '%s.%09d',0          ; DATA XREF: init_header+1EE↑o
.rodata:000000000000BE97 ; const char aPageNumberOver[]
.rodata:000000000000BE97 aPageNumberOver db 'page number overflow',0
.rodata:000000000000BE97                                         ; DATA XREF: print_header:loc_32A7↑o
.rodata:000000000000BEAC ; const char aPageLu[]
.rodata:000000000000BEAC aPageLu         db 'Page %lu',0         ; DATA XREF: print_header+4B↑o
.rodata:000000000000BEB5 aSSSSSS         db 0Ah                  ; DATA XREF: print_header+A1↑o
.rodata:000000000000BEB5                 db 0Ah
.rodata:000000000000BEB5                 db '%*s%s%*s%s%*s%s',0Ah
.rodata:000000000000BEB5                 db 0Ah
.rodata:000000000000BEB5                 db 0Ah,0
.rodata:000000000000BECA asc_BECA        db ' ',0                ; DATA XREF: print_header+AB↑o
.rodata:000000000000BECA                                         ; print_files+A1↑o ...
.rodata:000000000000BECC a03o            db '%03o',0             ; DATA XREF: char_to_clump+16D↑o
.rodata:000000000000BED1 aD              db '%*d',0              ; DATA XREF: add_line_number_isra_2+9↑o
.rodata:000000000000BED5 ; const char aStandardInput[]
.rodata:000000000000BED5 aStandardInput  db 'standard input',0   ; DATA XREF: main+83F↑o
.rodata:000000000000BED5                                         ; open_file+26↑o ...
.rodata:000000000000BEE4 asc_BEE4        db 9,0                  ; DATA XREF: print_files:loc_479C↑o
.rodata:000000000000BEE4                                         ; main+35↑o ...
.rodata:000000000000BEE6 ; const char aPageWidthTooNa[]
.rodata:000000000000BEE6 aPageWidthTooNa db 'page width too narrow',0
.rodata:000000000000BEE6                                         ; DATA XREF: print_files:loc_5259↑o
.rodata:000000000000BEFC aPr             db 'pr',0               ; DATA XREF: main+744↑o
.rodata:000000000000BEFC                                         ; usage+312↑o ...
.rodata:000000000000BEFF asc_BEFF        db '[',0                ; DATA XREF: usage+31E↑o
.rodata:000000000000BF01 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+345↑o
.rodata:000000000000BF11 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000BF11                                         ; DATA XREF: usage+375↑o
.rodata:000000000000BF11                                         ; usage+46C↑o ...
.rodata:000000000000BF27 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+386↑o
.rodata:000000000000BF31 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+392↑o
.rodata:000000000000BF40 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+325↑o
.rodata:000000000000BF4A aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+351↑o
.rodata:000000000000BF54 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+369↑o
.rodata:000000000000BF5E ; const char aSOnlineHelpS[]
.rodata:000000000000BF5E aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+3DA↑o
.rodata:000000000000BF5E                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000BF75 unk_BF75        db  47h ; G             ; DATA XREF: main+73D↑o
.rodata:000000000000BF75                                         ; usage+3F6↑o ...
.rodata:000000000000BF76                 db  4Eh ; N
.rodata:000000000000BF77                 db  55h ; U
.rodata:000000000000BF78                 db  20h
.rodata:000000000000BF79 ; const char domainname[]
.rodata:000000000000BF79 domainname      db 'coreutils',0        ; DATA XREF: main+4D↑o
.rodata:000000000000BF79                                         ; main+59↑o ...
.rodata:000000000000BF83 ; const char s2[]
.rodata:000000000000BF83 s2              db 'en_',0              ; DATA XREF: usage+41D↑o
.rodata:000000000000BF83                                         ; usage+4DE↑o
.rodata:000000000000BF87 ; const char aFullDocumentat[]
.rodata:000000000000BF87 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000BF87                                         ; DATA XREF: usage:loc_56D9↑o
.rodata:000000000000BF87                                         ; usage:loc_5796↑o
.rodata:000000000000BFA2 aBEHMY          db '%b %e %H:%M %Y',0   ; DATA XREF: main+7E5↑o
.rodata:000000000000BFB1 aYMDHM          db '%Y-%m-%d %H:%M',0   ; DATA XREF: main:loc_27E1↑o
.rodata:000000000000BFB1                                         ; __strftime_internal:loc_64FE↑o
.rodata:000000000000BFC0 ; const char dirname[]
.rodata:000000000000BFC0 dirname         db '/usr/local/share/locale',0
.rodata:000000000000BFC0                                         ; DATA XREF: main+46↑o
.rodata:000000000000BFD8 ; const char aInvalidPageRan[]
.rodata:000000000000BFD8 aInvalidPageRan db 'invalid page range %s',0
.rodata:000000000000BFD8                                         ; DATA XREF: main+8EF↑o
.rodata:000000000000BFEE aRolandHuebner  db 'Roland Huebner',0   ; DATA XREF: main+72F↑o
.rodata:000000000000BFFD aPeteTermaat    db 'Pete TerMaat',0     ; DATA XREF: main+736↑o
.rodata:000000000000C00A ; const char aPosixlyCorrect[]
.rodata:000000000000C00A aPosixlyCorrect db 'POSIXLY_CORRECT',0  ; DATA XREF: main:loc_2788↑o
.rodata:000000000000C01A ; const char name[]
.rodata:000000000000C01A name            db 'TZ',0               ; DATA XREF: main:loc_2147↑o
.rodata:000000000000C01A                                         ; setenv_TZ+8↑o ...
.rodata:000000000000C01D aPages          db 'pages',0            ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000000C023 aAcross         db 'across',0           ; DATA XREF: .data.rel.ro:0000000000210820↓o
.rodata:000000000000C02A aShowControlCha db 'show-control-chars',0
.rodata:000000000000C02A                                         ; DATA XREF: .data.rel.ro:0000000000210840↓o
.rodata:000000000000C03D aDoubleSpace    db 'double-space',0     ; DATA XREF: .data.rel.ro:0000000000210860↓o
.rodata:000000000000C04A aDateFormat     db 'date-format',0      ; DATA XREF: .data.rel.ro:0000000000210880↓o
.rodata:000000000000C056 aExpandTabs     db 'expand-tabs',0      ; DATA XREF: .data.rel.ro:00000000002108A0↓o
.rodata:000000000000C062 aFormFeed       db 'form-feed',0        ; DATA XREF: .data.rel.ro:00000000002108C0↓o
.rodata:000000000000C06C aOutputTabs     db 'output-tabs',0      ; DATA XREF: .data.rel.ro:0000000000210900↓o
.rodata:000000000000C078 aJoinLines      db 'join-lines',0       ; DATA XREF: .data.rel.ro:0000000000210920↓o
.rodata:000000000000C083 aLength         db 'length',0           ; DATA XREF: .data.rel.ro:0000000000210940↓o
.rodata:000000000000C08A aMerge          db 'merge',0            ; DATA XREF: .data.rel.ro:0000000000210960↓o
.rodata:000000000000C090 aNumberLines    db 'number-lines',0     ; DATA XREF: .data.rel.ro:0000000000210980↓o
.rodata:000000000000C09D aFirstLineNumbe db 'first-line-number',0
.rodata:000000000000C09D                                         ; DATA XREF: .data.rel.ro:00000000002109A0↓o
.rodata:000000000000C0AF aIndent         db 'indent',0           ; DATA XREF: .data.rel.ro:00000000002109C0↓o
.rodata:000000000000C0B6 aNoFileWarnings db 'no-file-warnings',0 ; DATA XREF: .data.rel.ro:00000000002109E0↓o
.rodata:000000000000C0C7 aSeparator      db 'separator',0        ; DATA XREF: .data.rel.ro:0000000000210A00↓o
.rodata:000000000000C0D1 aSepString      db 'sep-string',0       ; DATA XREF: .data.rel.ro:0000000000210A20↓o
.rodata:000000000000C0DC aOmitHeader     db 'omit-header',0      ; DATA XREF: .data.rel.ro:0000000000210A40↓o
.rodata:000000000000C0DC                                         ; .data.rel.ro:00000000002108E0↓o
.rodata:000000000000C0E8 aOmitPagination db 'omit-pagination',0  ; DATA XREF: .data.rel.ro:0000000000210A60↓o
.rodata:000000000000C0F8 aShowNonprintin db 'show-nonprinting',0 ; DATA XREF: .data.rel.ro:0000000000210A80↓o
.rodata:000000000000C109 aPageWidth      db 'page-width',0       ; DATA XREF: .data.rel.ro:0000000000210AC0↓o
.rodata:000000000000C109                                         ; .data.rel.ro:0000000000210AA0↓o
.rodata:000000000000C114 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000210AE0↓o
.rodata:000000000000C119 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000210B00↓o
.rodata:000000000000C121                 align 8
.rodata:000000000000C128 ; const char aStartingPageNu[]
.rodata:000000000000C128 aStartingPageNu db 'starting page number %lu exceeds page count %lu',0
.rodata:000000000000C128                                         ; DATA XREF: print_files:loc_517D↑o
.rodata:000000000000C158 ; const char aTrySHelpForMor[]
.rodata:000000000000C158 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000C158                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000C17F                 align 20h
.rodata:000000000000C180 ; const char aUsageSOptionFi[]
.rodata:000000000000C180 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah,0
.rodata:000000000000C180                                         ; DATA XREF: usage:loc_52FD↑o
.rodata:000000000000C1A1                 align 8
.rodata:000000000000C1A8 ; const char aPaginateOrColu[]
.rodata:000000000000C1A8 aPaginateOrColu db 'Paginate or columnate FILE(s) for printing.',0Ah,0
.rodata:000000000000C1A8                                         ; DATA XREF: usage+84↑o
.rodata:000000000000C1D5                 align 8
.rodata:000000000000C1D8 ; const char aWithNoFileOrWh[]
.rodata:000000000000C1D8 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:000000000000C1D8                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:000000000000C210 ; const char aMandatoryArgum[]
.rodata:000000000000C210 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+CE↑o
.rodata:000000000000C210                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000C210                 db 'ns too.',0Ah,0
.rodata:000000000000C25B                 align 20h
.rodata:000000000000C260 ; const char aFirstPageLastP[]
.rodata:000000000000C260 aFirstPageLastP db '  +FIRST_PAGE[:LAST_PAGE], --pages=FIRST_PAGE[:LAST_PAGE]',0Ah
.rodata:000000000000C260                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000C260                 db '                    begin [stop] printing with page FIRST_[LAST_]'
.rodata:000000000000C260                 db 'PAGE',0Ah
.rodata:000000000000C260                 db '  -COLUMN, --columns=COLUMN',0Ah
.rodata:000000000000C260                 db '                    output COLUMN columns and print columns down,'
.rodata:000000000000C260                 db 0Ah
.rodata:000000000000C260                 db '                    unless -a is used. Balance number of lines in'
.rodata:000000000000C260                 db ' the',0Ah
.rodata:000000000000C260                 db '                    columns on each page',0Ah,0
.rodata:000000000000C3AE                 align 10h
.rodata:000000000000C3B0 ; const char aAAcrossPrintCo[]
.rodata:000000000000C3B0 aAAcrossPrintCo db '  -a, --across      print columns across rather than down, used t'
.rodata:000000000000C3B0                                         ; DATA XREF: usage+118↑o
.rodata:000000000000C3B0                 db 'ogether',0Ah
.rodata:000000000000C3B0                 db '                    with -COLUMN',0Ah
.rodata:000000000000C3B0                 db '  -c, --show-control-chars',0Ah
.rodata:000000000000C3B0                 db '                    use hat notation (^G) and octal backslash not'
.rodata:000000000000C3B0                 db 'ation',0Ah
.rodata:000000000000C3B0                 db '  -d, --double-space',0Ah
.rodata:000000000000C3B0                 db '                    double space the output',0Ah,0
.rodata:000000000000C4BE                 align 20h
.rodata:000000000000C4C0 ; const char aDDateFormatFor[]
.rodata:000000000000C4C0 aDDateFormatFor db '  -D, --date-format=FORMAT',0Ah
.rodata:000000000000C4C0                                         ; DATA XREF: usage+13D↑o
.rodata:000000000000C4C0                 db '                    use FORMAT for the header date',0Ah
.rodata:000000000000C4C0                 db '  -e[CHAR[WIDTH]], --expand-tabs[=CHAR[WIDTH]]',0Ah
.rodata:000000000000C4C0                 db '                    expand input CHARs (TABs) to tab WIDTH (8)',0Ah
.rodata:000000000000C4C0                 db '  -F, -f, --form-feed',0Ah
.rodata:000000000000C4C0                 db '                    use form feeds instead of newlines to separat'
.rodata:000000000000C4C0                 db 'e pages',0Ah
.rodata:000000000000C4C0                 db '                    (by a 3-line page header with -F or a 5-line '
.rodata:000000000000C4C0                 db 'header',0Ah
.rodata:000000000000C4C0                 db '                    and trailer without -F)',0Ah,0
.rodata:000000000000C650 ; const char aHHeaderHeaderU[]
.rodata:000000000000C650 aHHeaderHeaderU db '  -h, --header=HEADER',0Ah
.rodata:000000000000C650                                         ; DATA XREF: usage+162↑o
.rodata:000000000000C650                 db '                    use a centered HEADER instead of filename in '
.rodata:000000000000C650                 db 'page header,',0Ah
.rodata:000000000000C650                 db '                    -h "" prints a blank line, don',27h,'t use -h'
.rodata:000000000000C650                 db '""',0Ah
.rodata:000000000000C650                 db '  -i[CHAR[WIDTH]], --output-tabs[=CHAR[WIDTH]]',0Ah
.rodata:000000000000C650                 db '                    replace spaces with CHARs (TABs) to tab WIDTH'
.rodata:000000000000C650                 db ' (8)',0Ah
.rodata:000000000000C650                 db '  -J, --join-lines  merge full lines, turns off -W line truncatio'
.rodata:000000000000C650                 db 'n, no column',0Ah
.rodata:000000000000C650                 db '                    alignment, --sep-string[=STRING] sets separat'
.rodata:000000000000C650                 db 'ors',0Ah,0
.rodata:000000000000C7FB                 align 20h
.rodata:000000000000C800 ; const char aLLengthPageLen[]
.rodata:000000000000C800 aLLengthPageLen db '  -l, --length=PAGE_LENGTH',0Ah
.rodata:000000000000C800                                         ; DATA XREF: usage+187↑o
.rodata:000000000000C800                 db '                    set the page length to PAGE_LENGTH (66) lines'
.rodata:000000000000C800                 db 0Ah
.rodata:000000000000C800                 db '                    (default number of lines of text 56, and with'
.rodata:000000000000C800                 db ' -F 63).',0Ah
.rodata:000000000000C800                 db '                    implies -t if PAGE_LENGTH <= 10',0Ah,0
.rodata:000000000000C8DC                 align 20h
.rodata:000000000000C8E0 ; const char aMMergePrintAll[]
.rodata:000000000000C8E0 aMMergePrintAll db '  -m, --merge       print all files in parallel, one in each colu'
.rodata:000000000000C8E0                                         ; DATA XREF: usage+1AC↑o
.rodata:000000000000C8E0                 db 'mn,',0Ah
.rodata:000000000000C8E0                 db '                    truncate lines, but join lines of full length'
.rodata:000000000000C8E0                 db ' with -J',0Ah,0
.rodata:000000000000C970 ; const char aNSepDigitsNumb[]
.rodata:000000000000C970 aNSepDigitsNumb db '  -n[SEP[DIGITS]], --number-lines[=SEP[DIGITS]]',0Ah
.rodata:000000000000C970                                         ; DATA XREF: usage+1D1↑o
.rodata:000000000000C970                 db '                    number lines, use DIGITS (5) digits, then SEP'
.rodata:000000000000C970                 db ' (TAB),',0Ah
.rodata:000000000000C970                 db '                    default counting starts with 1st line of inpu'
.rodata:000000000000C970                 db 't file',0Ah
.rodata:000000000000C970                 db '  -N, --first-line-number=NUMBER',0Ah
.rodata:000000000000C970                 db '                    start counting with NUMBER at 1st line of fir'
.rodata:000000000000C970                 db 'st',0Ah
.rodata:000000000000C970                 db '                    page printed (see +FIRST_PAGE)',0Ah,0
.rodata:000000000000CACA                 align 10h
.rodata:000000000000CAD0 ; const char aOIndentMarginO[]
.rodata:000000000000CAD0 aOIndentMarginO db '  -o, --indent=MARGIN',0Ah
.rodata:000000000000CAD0                                         ; DATA XREF: usage+1F6↑o
.rodata:000000000000CAD0                 db '                    offset each line with MARGIN (zero) spaces, d'
.rodata:000000000000CAD0                 db 'o not',0Ah
.rodata:000000000000CAD0                 db '                    affect -w or -W, MARGIN will be added to PAGE'
.rodata:000000000000CAD0                 db '_WIDTH',0Ah
.rodata:000000000000CAD0                 db '  -r, --no-file-warnings',0Ah
.rodata:000000000000CAD0                 db '                    omit warning when a file cannot be opened',0Ah
.rodata:000000000000CAD0                 db 0
.rodata:000000000000CBCD                 align 10h
.rodata:000000000000CBD0 ; const char aSCharSeparator[]
.rodata:000000000000CBD0 aSCharSeparator db '  -s[CHAR], --separator[=CHAR]',0Ah
.rodata:000000000000CBD0                                         ; DATA XREF: usage+21B↑o
.rodata:000000000000CBD0                 db '                    separate columns by a single character, defau'
.rodata:000000000000CBD0                 db 'lt for CHAR',0Ah
.rodata:000000000000CBD0                 db '                    is the <TAB> character without -w and ',27h,'n'
.rodata:000000000000CBD0                 db 'o char',27h,' with -w.',0Ah
.rodata:000000000000CBD0                 db '                    -s[CHAR] turns off line truncation of all 3 c'
.rodata:000000000000CBD0                 db 'olumn',0Ah
.rodata:000000000000CBD0                 db '                    options (-COLUMN|-a -COLUMN|-m) except -w is '
.rodata:000000000000CBD0                 db 'set',0Ah,0
.rodata:000000000000CD16                 align 8
.rodata:000000000000CD18 ; const char aSStringSepStri[]
.rodata:000000000000CD18 aSStringSepStri db '  -S[STRING], --sep-string[=STRING]',0Ah
.rodata:000000000000CD18                                         ; DATA XREF: usage+240↑o
.rodata:000000000000CD18                 db '                    separate columns by STRING,',0Ah
.rodata:000000000000CD18                 db '                    without -S: Default separator <TAB> with -J a'
.rodata:000000000000CD18                 db 'nd <space>',0Ah
.rodata:000000000000CD18                 db '                    otherwise (same as -S" "), no effect on colum'
.rodata:000000000000CD18                 db 'n options',0Ah,0
.rodata:000000000000CE04                 align 8
.rodata:000000000000CE08 ; const char aTOmitHeaderOmi[]
.rodata:000000000000CE08 aTOmitHeaderOmi db '  -t, --omit-header  omit page headers and trailers;',0Ah
.rodata:000000000000CE08                                         ; DATA XREF: usage+265↑o
.rodata:000000000000CE08                 db '                     implied if PAGE_LENGTH <= 10',0Ah,0
.rodata:000000000000CE70 ; const char aTOmitPaginatio[]
.rodata:000000000000CE70 aTOmitPaginatio db '  -T, --omit-pagination',0Ah
.rodata:000000000000CE70                                         ; DATA XREF: usage+28A↑o
.rodata:000000000000CE70                 db '                    omit page headers and trailers, eliminate any'
.rodata:000000000000CE70                 db ' pagination',0Ah
.rodata:000000000000CE70                 db '                    by form feeds set in input files',0Ah
.rodata:000000000000CE70                 db '  -v, --show-nonprinting',0Ah
.rodata:000000000000CE70                 db '                    use octal backslash notation',0Ah
.rodata:000000000000CE70                 db '  -w, --width=PAGE_WIDTH',0Ah
.rodata:000000000000CE70                 db '                    set page width to PAGE_WIDTH (72) characters '
.rodata:000000000000CE70                 db 'for',0Ah
.rodata:000000000000CE70                 db '                    multiple text-column output only, -s[char] tu'
.rodata:000000000000CE70                 db 'rns off (72)',0Ah,0
.rodata:000000000000D001                 align 8
.rodata:000000000000D008 ; const char aWPageWidthPage[]
.rodata:000000000000D008 aWPageWidthPage db '  -W, --page-width=PAGE_WIDTH',0Ah
.rodata:000000000000D008                                         ; DATA XREF: usage+2AF↑o
.rodata:000000000000D008                 db '                    set page width to PAGE_WIDTH (72) characters '
.rodata:000000000000D008                 db 'always,',0Ah
.rodata:000000000000D008                 db '                    truncate lines, except -J option is set, no i'
.rodata:000000000000D008                 db 'nterference',0Ah
.rodata:000000000000D008                 db '                    with -S or -s',0Ah,0
.rodata:000000000000D0DF                 align 20h
.rodata:000000000000D0E0 ; const char aHelpDisplayThi[]
.rodata:000000000000D0E0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000D0E0                                         ; DATA XREF: usage+2D4↑o
.rodata:000000000000D10D                 align 10h
.rodata:000000000000D110 ; const char aVersionOutputV[]
.rodata:000000000000D110 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000D110                                         ; DATA XREF: usage+2F9↑o
.rodata:000000000000D146                 align 8
.rodata:000000000000D148 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000D148                                         ; DATA XREF: usage+3EF↑o
.rodata:000000000000D148                                         ; usage+453↑o ...
.rodata:000000000000D170 ; const char aReportAnyTrans[]
.rodata:000000000000D170 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000D170                                         ; DATA XREF: usage+547↑o
.rodata:000000000000D170                 db 'am/>',0Ah,0
.rodata:000000000000D1B7                 align 8
.rodata:000000000000D1B8 ; const char aOrAvailableLoc[]
.rodata:000000000000D1B8 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000D1B8                                         ; DATA XREF: usage:loc_571E↑o
.rodata:000000000000D1EB                 align 10h
.rodata:000000000000D1F0 ; const char aCExtraCharacte[]
.rodata:000000000000D1F0 aCExtraCharacte db 27h,'-%c',27h,' extra characters or invalid number in the argument'
.rodata:000000000000D1F0                                         ; DATA XREF: getoptarg+9F↑o
.rodata:000000000000D1F0                 db ': %s',0
.rodata:000000000000D22D                 align 10h
.rodata:000000000000D230 ; const char aPagesFirstPage[]
.rodata:000000000000D230 aPagesFirstPage db 27h,'--pages=FIRST_PAGE[:LAST_PAGE]',27h,' missing argument',0
.rodata:000000000000D230                                         ; DATA XREF: main:loc_287F↑o
.rodata:000000000000D262                 align 8
.rodata:000000000000D268 ; const char aLPageLengthInv[]
.rodata:000000000000D268 aLPageLengthInv db 27h,'-l PAGE_LENGTH',27h,' invalid number of lines',0
.rodata:000000000000D268                                         ; DATA XREF: main:loc_248A↑o
.rodata:000000000000D291                 align 8
.rodata:000000000000D298 ; const char aNNumberInvalid[]
.rodata:000000000000D298 aNNumberInvalid db 27h,'-N NUMBER',27h,' invalid starting line number',0
.rodata:000000000000D298                                         ; DATA XREF: main:loc_2629↑o
.rodata:000000000000D2C1                 align 8
.rodata:000000000000D2C8 ; const char aOMarginInvalid[]
.rodata:000000000000D2C8 aOMarginInvalid db 27h,'-o MARGIN',27h,' invalid line offset',0
.rodata:000000000000D2C8                                         ; DATA XREF: main:loc_23FF↑o
.rodata:000000000000D2E8 ; const char msgid[]
.rodata:000000000000D2E8 msgid           db 27h,'-w PAGE_WIDTH',27h,' invalid number of characters',0
.rodata:000000000000D2E8                                         ; DATA XREF: main:loc_232E↑o
.rodata:000000000000D315                 align 8
.rodata:000000000000D318 ; const char aWPageWidthInva_0[]
.rodata:000000000000D318 aWPageWidthInva_0 db 27h,'-W PAGE_WIDTH',27h,' invalid number of characters',0
.rodata:000000000000D318                                         ; DATA XREF: main:loc_2585↑o
.rodata:000000000000D345                 align 8
.rodata:000000000000D348 ; const char aCannotSpecifyN[]
.rodata:000000000000D348 aCannotSpecifyN db 'cannot specify number of columns when printing in parallel',0
.rodata:000000000000D348                                         ; DATA XREF: main:loc_28DE↑o
.rodata:000000000000D383                 align 8
.rodata:000000000000D388 ; const char aCannotSpecifyB[]
.rodata:000000000000D388 aCannotSpecifyB db 'cannot specify both printing across and printing in parallel',0
.rodata:000000000000D388                                         ; DATA XREF: main:loc_285B↑o
.rodata:000000000000D3C5                 align 20h
.rodata:000000000000D3E0 jpt_20DD        dd offset loc_26DB - 0D3E0h, offset loc_284A - 0D3E0h
.rodata:000000000000D3E0                                         ; DATA XREF: main+A0↑o
.rodata:000000000000D3E0                                         ; main+115↑r
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h ; jump table for switch statement
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_26A6 - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2691 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2683 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2675 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2629 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_25E9 - 0D3E0h, offset loc_25D4 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_2585 - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_2570 - 0D3E0h, offset loc_2562 - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_2554 - 0D3E0h, offset loc_2546 - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_2514 - 0D3E0h, offset loc_2683 - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_24FF - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_24CD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_248A - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_2475 - 0D3E0h, offset loc_243F - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_23FF - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_23F1 - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_23B4 - 0D3E0h, offset loc_239F - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2391 - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_232E - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset def_20DD - 0D3E0h
.rodata:000000000000D3E0                 dd offset def_20DD - 0D3E0h, offset loc_2307 - 0D3E0h
.rodata:000000000000D3E0                 dd offset loc_22DD - 0D3E0h
.rodata:000000000000D7F4                 align 20h
.rodata:000000000000D800 ; const char short_options[]
.rodata:000000000000D800 short_options   db '-0123456789D:FJN:S::TW:abcde::fh:i::l:mn::o:rs::tvw:',0
.rodata:000000000000D800                                         ; DATA XREF: main:loc_2090↑o
.rodata:000000000000D835 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000D83A ; const char aWriteError[]
.rodata:000000000000D83A aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5963↑o
.rodata:000000000000D846 ; const char format[]
.rodata:000000000000D846 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000D846                                         ; xnumtoimax+7F↑o ...
.rodata:000000000000D84D aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000D84F aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5B50↑o
.rodata:000000000000D855 aHMS            db '%H:%M:%S',0         ; DATA XREF: __strftime_internal:loc_66AB↑o
.rodata:000000000000D85E aYMD            db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+11D2↑o
.rodata:000000000000D85E                                         ; __strftime_internal+19CF↑o
.rodata:000000000000D867 aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+119E↑o
.rodata:000000000000D870 jpt_60AF        dd offset loc_7091 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                                         ; DATA XREF: __strftime_internal+1FD↑o
.rodata:000000000000D870                                         ; __strftime_internal+208↑r
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h ; jump table for switch statement
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_661E - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_6D17 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_63A6 - 0D870h
.rodata:000000000000D870                 dd offset loc_6F7E - 0D870h, offset loc_6F9B - 0D870h
.rodata:000000000000D870                 dd offset loc_7035 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_7057 - 0D870h, offset loc_6D3D - 0D870h
.rodata:000000000000D870                 dd offset loc_70D2 - 0D870h, offset loc_714E - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_70EA - 0D870h
.rodata:000000000000D870                 dd offset loc_7102 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_64E3 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_64FE - 0D870h, offset loc_63E6 - 0D870h
.rodata:000000000000D870                 dd offset loc_66AB - 0D870h, offset loc_66C4 - 0D870h
.rodata:000000000000D870                 dd offset loc_6D3D - 0D870h, offset loc_6F39 - 0D870h
.rodata:000000000000D870                 dd offset loc_6258 - 0D870h, offset loc_66F7 - 0D870h
.rodata:000000000000D870                 dd offset loc_6750 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_63A6 - 0D870h
.rodata:000000000000D870                 dd offset loc_68A7 - 0D870h, offset loc_6258 - 0D870h
.rodata:000000000000D870                 dd offset loc_6ED4 - 0D870h, offset loc_7289 - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_6D3D - 0D870h
.rodata:000000000000D870                 dd offset loc_68A7 - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_7246 - 0D870h, offset loc_7276 - 0D870h
.rodata:000000000000D870                 dd offset loc_7166 - 0D870h, offset loc_718D - 0D870h
.rodata:000000000000D870                 dd offset loc_71BD - 0D870h, offset def_60AF - 0D870h
.rodata:000000000000D870                 dd offset loc_723F - 0D870h, offset loc_69A0 - 0D870h
.rodata:000000000000D870                 dd offset loc_6262 - 0D870h, offset loc_6C10 - 0D870h
.rodata:000000000000D870                 dd offset loc_645B - 0D870h, offset loc_6EEC - 0D870h
.rodata:000000000000D870                 dd offset def_60AF - 0D870h, offset loc_6F21 - 0D870h
.rodata:000000000000D870                 dd offset loc_6258 - 0D870h, offset loc_683D - 0D870h
.rodata:000000000000D870                 dd offset loc_68CC - 0D870h
.rodata:000000000000DA5C                 align 20h
.rodata:000000000000DA60 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:000000000000DA60                                         ; DATA XREF: set_program_name+84↑o
.rodata:000000000000DA98 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:000000000000DAA0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000DAA4 unk_DAA4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000DAA5                 db  80h
.rodata:000000000000DAA6                 db  98h
.rodata:000000000000DAA7                 db    0
.rodata:000000000000DAA8 unk_DAA8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:000000000000DAA9                 db  80h
.rodata:000000000000DAAA                 db  99h
.rodata:000000000000DAAB                 db    0
.rodata:000000000000DAAC unk_DAAC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000DAAD                 db    7
.rodata:000000000000DAAE                 db  65h ; e
.rodata:000000000000DAAF                 db    0
.rodata:000000000000DAB0 unk_DAB0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:000000000000DAB1                 db 0AFh
.rodata:000000000000DAB2                 db    0
.rodata:000000000000DAB3 unk_DAB3        db  22h ; "             ; DATA XREF: gettext_quote:loc_7A70↑o
.rodata:000000000000DAB3                                         ; quotearg_buffer_restyled:loc_882B↑o ...
.rodata:000000000000DAB4                 db    0
.rodata:000000000000DAB5 ; const char asc_DAB5[2]
.rodata:000000000000DAB5 asc_DAB5        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000DAB5                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000000DAB7 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:000000000000DABF aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000210B48↓o
.rodata:000000000000DAC5 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000210B50↓o
.rodata:000000000000DAD2 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000210B58↓o
.rodata:000000000000DAD2                                         ; .data.rel.ro:0000000000210B78↓o
.rodata:000000000000DADF aShellEscapeAlw db 'shell-escape-always',0
.rodata:000000000000DADF                                         ; DATA XREF: .data.rel.ro:0000000000210B60↓o
.rodata:000000000000DAF3 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000210B68↓o
.rodata:000000000000DAF5 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000210B70↓o
.rodata:000000000000DAFD aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000210B88↓o
.rodata:000000000000DB05                 align 20h
.rodata:000000000000DB20 jpt_7BD1        dd offset loc_897A - 0DB20h
.rodata:000000000000DB20                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:000000000000DB20                                         ; quotearg_buffer_restyled+8A↑r
.rodata:000000000000DB20                 dd offset loc_7BD3 - 0DB20h ; jump table for switch statement
.rodata:000000000000DB20                 dd offset loc_8BA8 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_89B4 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_87A4 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_8800 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_8855 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_889A - 0DB20h
.rodata:000000000000DB20                 dd offset loc_88D4 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_88D4 - 0DB20h
.rodata:000000000000DB20                 dd offset loc_88D4 - 0DB20h
.rodata:000000000000DB4C jpt_7D2E        dd offset loc_7F50 - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000DB4C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch ; jump table for switch statement
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset loc_7F90 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7E98 - 0DB4Ch, offset loc_7E58 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_8020 - 0DB4Ch, offset loc_8010 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_8000 - 0DB4Ch, offset loc_7FF0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset def_7D2E - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FE0 - 0DB4Ch, offset loc_7FD0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7FA0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7E33 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7FD0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7FD0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7FD0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7E03 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset def_7D2E - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7FD0 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7EA8 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7F78 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7F78 - 0DB4Ch, offset loc_7D33 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FD0 - 0DB4Ch, offset loc_7D33 - 0DB4Ch
.rodata:000000000000DB4C                 dd offset loc_7FA0 - 0DB4Ch
.rodata:000000000000DD48 jpt_80BA        dd offset loc_8120 - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000DD48                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h ; jump table for switch statement
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset loc_8110 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_8260 - 0DD48h, offset loc_8248 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_80F8 - 0DD48h, offset loc_8238 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_80E0 - 0DD48h, offset loc_8220 - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset def_80BA - 0DD48h
.rodata:000000000000DD48                 dd offset loc_8208 - 0DD48h, offset loc_81F0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81D8 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_7E30 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81F0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81F0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81F0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_7E00 - 0DD48h
.rodata:000000000000DD48                 dd offset def_80BA - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81F0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_80C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_81C0 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81C0 - 0DD48h, offset loc_7D30 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81F0 - 0DD48h, offset loc_7D30 - 0DD48h
.rodata:000000000000DD48                 dd offset loc_81D8 - 0DD48h
.rodata:000000000000DF44                 align 20h
.rodata:000000000000DF60                 public quoting_style_vals
.rodata:000000000000DF60 quoting_style_vals db    0
.rodata:000000000000DF61                 db    0
.rodata:000000000000DF62                 db    0
.rodata:000000000000DF63                 db    0
.rodata:000000000000DF64                 db    1
.rodata:000000000000DF65                 db    0
.rodata:000000000000DF66                 db    0
.rodata:000000000000DF67                 db    0
.rodata:000000000000DF68                 db    2
.rodata:000000000000DF69                 db    0
.rodata:000000000000DF6A                 db    0
.rodata:000000000000DF6B                 db    0
.rodata:000000000000DF6C                 db    3
.rodata:000000000000DF6D                 db    0
.rodata:000000000000DF6E                 db    0
.rodata:000000000000DF6F                 db    0
.rodata:000000000000DF70                 db    4
.rodata:000000000000DF71                 db    0
.rodata:000000000000DF72                 db    0
.rodata:000000000000DF73                 db    0
.rodata:000000000000DF74                 db    5
.rodata:000000000000DF75                 db    0
.rodata:000000000000DF76                 db    0
.rodata:000000000000DF77                 db    0
.rodata:000000000000DF78                 db    6
.rodata:000000000000DF79                 db    0
.rodata:000000000000DF7A                 db    0
.rodata:000000000000DF7B                 db    0
.rodata:000000000000DF7C                 db    7
.rodata:000000000000DF7D                 db    0
.rodata:000000000000DF7E                 db    0
.rodata:000000000000DF7F                 db    0
.rodata:000000000000DF80                 db    8
.rodata:000000000000DF81                 db    0
.rodata:000000000000DF82                 db    0
.rodata:000000000000DF83                 db    0
.rodata:000000000000DF84                 db    9
.rodata:000000000000DF85                 db    0
.rodata:000000000000DF86                 db    0
.rodata:000000000000DF87                 db    0
.rodata:000000000000DF88 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000DF94 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000DF9B ; const char aC_0[]
.rodata:000000000000DF9B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_972C↑o
.rodata:000000000000DF9F ; const char aWrittenByS[]
.rodata:000000000000DF9F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000DF9F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000DFAF ; const char aWrittenBySAndS[]
.rodata:000000000000DFAF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000DFAF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000DFC6 ; const char aWrittenBySSAnd[]
.rodata:000000000000DFC6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000DFC6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000DFE2 ; const char aReportBugsToS[]
.rodata:000000000000DFE2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000DFE2                 db 'Report bugs to: %s',0Ah,0
.rodata:000000000000DFF7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000DFF7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000E00D ; const char aSHomePageS[]
.rodata:000000000000E00D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000E00D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000E021                 align 8
.rodata:000000000000E028 ; const char aLicenseGplv3Gn[]
.rodata:000000000000E028 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000E028                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000E028                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000E028                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000E028                 db '.',0Ah
.rodata:000000000000E028                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000E028                 db 0Ah,0
.rodata:000000000000E0F4                 align 8
.rodata:000000000000E0F8 ; const char aWrittenBySSSAn[]
.rodata:000000000000E0F8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E0F8                                         ; DATA XREF: version_etc_arn:loc_9980↑o
.rodata:000000000000E0F8                 db 'and %s.',0Ah,0
.rodata:000000000000E118 ; const char aWrittenBySSSSA[]
.rodata:000000000000E118 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E118                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000E118                 db '%s, and %s.',0Ah,0
.rodata:000000000000E13C                 align 20h
.rodata:000000000000E140 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000E140 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E140                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000E140                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000E168 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000E168 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E168                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000E168                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000E194                 align 8
.rodata:000000000000E198 ; const char aWrittenBySSSSS[]
.rodata:000000000000E198 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E198                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000E198                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E198                 db 'and %s.',0Ah,0
.rodata:000000000000E1C8 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000E1C8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E1C8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000E1C8                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E1C8                 db '%s, and %s.',0Ah,0
.rodata:000000000000E1FC                 align 20h
.rodata:000000000000E200 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000E200                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000E200                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000E200                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000E23C                 align 20h
.rodata:000000000000E240 ; const char aGeneralHelpUsi[]
.rodata:000000000000E240 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000E240                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000E240                 db 0
.rodata:000000000000E281                 align 4
.rodata:000000000000E284 jpt_9794        dd offset loc_9816 - 0E284h
.rodata:000000000000E284                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000E284                                         ; version_etc_arn+9D↑r
.rodata:000000000000E284                 dd offset loc_98A8 - 0E284h ; jump table for switch statement
.rodata:000000000000E284                 dd offset loc_98E8 - 0E284h
.rodata:000000000000E284                 dd offset loc_9930 - 0E284h
.rodata:000000000000E284                 dd offset loc_9980 - 0E284h
.rodata:000000000000E284                 dd offset loc_99D8 - 0E284h
.rodata:000000000000E284                 dd offset loc_9A08 - 0E284h
.rodata:000000000000E284                 dd offset loc_9A70 - 0E284h
.rodata:000000000000E284                 dd offset loc_97A0 - 0E284h
.rodata:000000000000E284                 dd offset loc_9850 - 0E284h
.rodata:000000000000E2AC                 align 20h
.rodata:000000000000E2C0                 public version_etc_copyright
.rodata:000000000000E2C0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000E2C0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000E2EF ; const char aMemoryExhauste[]
.rodata:000000000000E2EF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000E300 ; const char file[]
.rodata:000000000000E300 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000E300                                         ; DATA XREF: xstrtoimax+696↑o
.rodata:000000000000E300                                         ; xstrtol+696↑o ...
.rodata:000000000000E320 ; const char assertion[]
.rodata:000000000000E320 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000E320                                         ; DATA XREF: xstrtoimax+69D↑o
.rodata:000000000000E320                                         ; xstrtol+69D↑o ...
.rodata:000000000000E346                 align 8
.rodata:000000000000E348 jpt_A29E        dd offset loc_A5D0 - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                                         ; DATA XREF: xstrtoimax+19C↑o
.rodata:000000000000E348                                         ; xstrtoimax+1A7↑r
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A500 - 0E348h ; jump table for switch statement
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A4A0 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A460 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A2A0 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset loc_A568 - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset loc_A600 - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A3F0 - 0E348h
.rodata:000000000000E348                 dd offset loc_A380 - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset loc_A350 - 0E348h, offset loc_A300 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A4A0 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A460 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A2A0 - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset loc_A600 - 0E348h, offset def_A29E - 0E348h
.rodata:000000000000E348                 dd offset def_A29E - 0E348h, offset loc_A320 - 0E348h
.rodata:000000000000E420 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000E420 __PRETTY_FUNCTION___4162 db 'xstrtoimax',0
.rodata:000000000000E420                                         ; DATA XREF: xstrtoimax:loc_A77F↑o
.rodata:000000000000E42B                 align 10h
.rodata:000000000000E430 jpt_A95E        dd offset loc_AC90 - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                                         ; DATA XREF: xstrtol+19C↑o
.rodata:000000000000E430                                         ; xstrtol+1A7↑r
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_ABC0 - 0E430h ; jump table for switch statement
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_AB60 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_AB20 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_A960 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset loc_AC28 - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset loc_ACC0 - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_AAB0 - 0E430h
.rodata:000000000000E430                 dd offset loc_AA40 - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset loc_AA10 - 0E430h, offset loc_A9C0 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_AB60 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_AB20 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_A960 - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset loc_ACC0 - 0E430h, offset def_A95E - 0E430h
.rodata:000000000000E430                 dd offset def_A95E - 0E430h, offset loc_A9E0 - 0E430h
.rodata:000000000000E508 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000000E508 __PRETTY_FUNCTION___4162_0 db 'xstrtol',0
.rodata:000000000000E508                                         ; DATA XREF: xstrtol:loc_AE3F↑o
.rodata:000000000000E510 aInvalidSSArgum db 'invalid %s%s argument ',27h,'%s',27h,0
.rodata:000000000000E510                                         ; DATA XREF: xstrtol_fatal+87↑o
.rodata:000000000000E52B ; const char aSSArgumentSToo[]
.rodata:000000000000E52B aSSArgumentSToo db '%s%s argument ',27h,'%s',27h,' too large',0
.rodata:000000000000E52B                                         ; DATA XREF: xstrtol_fatal+33↑o
.rodata:000000000000E548 asc_E548        db '--',0               ; DATA XREF: xstrtol_fatal+48↑o
.rodata:000000000000E548                                         ; xstrtol_fatal:loc_AF02↑o ...
.rodata:000000000000E54B                 align 10h
.rodata:000000000000E550 aInvalidSuffixI db 'invalid suffix in %s%s argument ',27h,'%s',27h,0
.rodata:000000000000E550                                         ; DATA XREF: xstrtol_fatal:loc_AEEB↑o
.rodata:000000000000E575                 align 8
.rodata:000000000000E578 jpt_B0F6        dd offset loc_B246 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000E578                                         ; xstrtoumax+1CF↑r
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B223 - 0E578h ; jump table for switch statement
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B25C - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B1DF - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B0F8 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset loc_B200 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset loc_B1BF - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B19A - 0E578h
.rodata:000000000000E578                 dd offset loc_B174 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset loc_B15D - 0E578h, offset loc_B120 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B25C - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B1DF - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B0F8 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset loc_B1BF - 0E578h, offset def_B0F6 - 0E578h
.rodata:000000000000E578                 dd offset def_B0F6 - 0E578h, offset loc_B147 - 0E578h
.rodata:000000000000E650 ; const char _PRETTY_FUNCTION___4162_1[]
.rodata:000000000000E650 __PRETTY_FUNCTION___4162_1 db 'xstrtoumax',0
.rodata:000000000000E650                                         ; DATA XREF: xstrtoumax:loc_B2A5↑o
.rodata:000000000000E65B aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000E65B                                         ; locale_charset:loc_BDA0↑o
.rodata:000000000000E65B _rodata         ends
.rodata:000000000000E65B
LOAD:000000000000E661 ; ===========================================================================
LOAD:000000000000E661
LOAD:000000000000E661 ; Segment type: Pure code
LOAD:000000000000E661 ; Segment permissions: Read/Execute
LOAD:000000000000E661 LOAD            segment byte public 'CODE' use64
LOAD:000000000000E661                 assume cs:LOAD
LOAD:000000000000E661                 ;org 0E661h
LOAD:000000000000E661                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000E661                 align 4
LOAD:000000000000E661 LOAD            ends
LOAD:000000000000E661
.eh_frame_hdr:000000000000E664 ; ===========================================================================
.eh_frame_hdr:000000000000E664
.eh_frame_hdr:000000000000E664 ; Segment type: Pure data
.eh_frame_hdr:000000000000E664 ; Segment permissions: Read
.eh_frame_hdr:000000000000E664 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000E664                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000E664                 ;org 0E664h
.eh_frame_hdr:000000000000E664 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000E665                 db  1Bh
.eh_frame_hdr:000000000000E666                 db    3
.eh_frame_hdr:000000000000E667                 db  3Bh ; ;
.eh_frame_hdr:000000000000E668                 db 0E8h
.eh_frame_hdr:000000000000E669                 db    3
.eh_frame_hdr:000000000000E66A                 db    0
.eh_frame_hdr:000000000000E66B                 db    0
.eh_frame_hdr:000000000000E66C                 db  7Ch ; |
.eh_frame_hdr:000000000000E66D                 db    0
.eh_frame_hdr:000000000000E66E                 db    0
.eh_frame_hdr:000000000000E66F                 db    0
.eh_frame_hdr:000000000000E670                 db 0ECh
.eh_frame_hdr:000000000000E671                 db  34h ; 4
.eh_frame_hdr:000000000000E672                 db 0FFh
.eh_frame_hdr:000000000000E673                 db 0FFh
.eh_frame_hdr:000000000000E674                 db  34h ; 4
.eh_frame_hdr:000000000000E675                 db    4
.eh_frame_hdr:000000000000E676                 db    0
.eh_frame_hdr:000000000000E677                 db    0
.eh_frame_hdr:000000000000E678                 db  4Ch ; L
.eh_frame_hdr:000000000000E679                 db  39h ; 9
.eh_frame_hdr:000000000000E67A                 db 0FFh
.eh_frame_hdr:000000000000E67B                 db 0FFh
.eh_frame_hdr:000000000000E67C                 db  5Ch ; \
.eh_frame_hdr:000000000000E67D                 db    4
.eh_frame_hdr:000000000000E67E                 db    0
.eh_frame_hdr:000000000000E67F                 db    0
.eh_frame_hdr:000000000000E680                 db  5Ch ; \
.eh_frame_hdr:000000000000E681                 db  39h ; 9
.eh_frame_hdr:000000000000E682                 db 0FFh
.eh_frame_hdr:000000000000E683                 db 0FFh
.eh_frame_hdr:000000000000E684                 db 0D4h
.eh_frame_hdr:000000000000E685                 db    9
.eh_frame_hdr:000000000000E686                 db    0
.eh_frame_hdr:000000000000E687                 db    0
.eh_frame_hdr:000000000000E688                 db 0ACh
.eh_frame_hdr:000000000000E689                 db  42h ; B
.eh_frame_hdr:000000000000E68A                 db 0FFh
.eh_frame_hdr:000000000000E68B                 db 0FFh
.eh_frame_hdr:000000000000E68C                 db    4
.eh_frame_hdr:000000000000E68D                 db    4
.eh_frame_hdr:000000000000E68E                 db    0
.eh_frame_hdr:000000000000E68F                 db    0
.eh_frame_hdr:000000000000E690                 db 0BCh
.eh_frame_hdr:000000000000E691                 db  43h ; C
.eh_frame_hdr:000000000000E692                 db 0FFh
.eh_frame_hdr:000000000000E693                 db 0FFh
.eh_frame_hdr:000000000000E694                 db  74h ; t
.eh_frame_hdr:000000000000E695                 db    4
.eh_frame_hdr:000000000000E696                 db    0
.eh_frame_hdr:000000000000E697                 db    0
.eh_frame_hdr:000000000000E698                 db  1Ch
.eh_frame_hdr:000000000000E699                 db  44h ; D
.eh_frame_hdr:000000000000E69A                 db 0FFh
.eh_frame_hdr:000000000000E69B                 db 0FFh
.eh_frame_hdr:000000000000E69C                 db  88h
.eh_frame_hdr:000000000000E69D                 db    4
.eh_frame_hdr:000000000000E69E                 db    0
.eh_frame_hdr:000000000000E69F                 db    0
.eh_frame_hdr:000000000000E6A0                 db  9Ch
.eh_frame_hdr:000000000000E6A1                 db  44h ; D
.eh_frame_hdr:000000000000E6A2                 db 0FFh
.eh_frame_hdr:000000000000E6A3                 db 0FFh
.eh_frame_hdr:000000000000E6A4                 db  9Ch
.eh_frame_hdr:000000000000E6A5                 db    4
.eh_frame_hdr:000000000000E6A6                 db    0
.eh_frame_hdr:000000000000E6A7                 db    0
.eh_frame_hdr:000000000000E6A8                 db 0ECh
.eh_frame_hdr:000000000000E6A9                 db  44h ; D
.eh_frame_hdr:000000000000E6AA                 db 0FFh
.eh_frame_hdr:000000000000E6AB                 db 0FFh
.eh_frame_hdr:000000000000E6AC                 db 0B8h
.eh_frame_hdr:000000000000E6AD                 db    4
.eh_frame_hdr:000000000000E6AE                 db    0
.eh_frame_hdr:000000000000E6AF                 db    0
.eh_frame_hdr:000000000000E6B0                 db  1Ch
.eh_frame_hdr:000000000000E6B1                 db  45h ; E
.eh_frame_hdr:000000000000E6B2                 db 0FFh
.eh_frame_hdr:000000000000E6B3                 db 0FFh
.eh_frame_hdr:000000000000E6B4                 db 0CCh
.eh_frame_hdr:000000000000E6B5                 db    4
.eh_frame_hdr:000000000000E6B6                 db    0
.eh_frame_hdr:000000000000E6B7                 db    0
.eh_frame_hdr:000000000000E6B8                 db  4Ch ; L
.eh_frame_hdr:000000000000E6B9                 db  46h ; F
.eh_frame_hdr:000000000000E6BA                 db 0FFh
.eh_frame_hdr:000000000000E6BB                 db 0FFh
.eh_frame_hdr:000000000000E6BC                 db  10h
.eh_frame_hdr:000000000000E6BD                 db    5
.eh_frame_hdr:000000000000E6BE                 db    0
.eh_frame_hdr:000000000000E6BF                 db    0
.eh_frame_hdr:000000000000E6C0                 db  7Ch ; |
.eh_frame_hdr:000000000000E6C1                 db  46h ; F
.eh_frame_hdr:000000000000E6C2                 db 0FFh
.eh_frame_hdr:000000000000E6C3                 db 0FFh
.eh_frame_hdr:000000000000E6C4                 db  2Ch ; ,
.eh_frame_hdr:000000000000E6C5                 db    5
.eh_frame_hdr:000000000000E6C6                 db    0
.eh_frame_hdr:000000000000E6C7                 db    0
.eh_frame_hdr:000000000000E6C8                 db 0CCh
.eh_frame_hdr:000000000000E6C9                 db  46h ; F
.eh_frame_hdr:000000000000E6CA                 db 0FFh
.eh_frame_hdr:000000000000E6CB                 db 0FFh
.eh_frame_hdr:000000000000E6CC                 db  48h ; H
.eh_frame_hdr:000000000000E6CD                 db    5
.eh_frame_hdr:000000000000E6CE                 db    0
.eh_frame_hdr:000000000000E6CF                 db    0
.eh_frame_hdr:000000000000E6D0                 db 0ECh
.eh_frame_hdr:000000000000E6D1                 db  48h ; H
.eh_frame_hdr:000000000000E6D2                 db 0FFh
.eh_frame_hdr:000000000000E6D3                 db 0FFh
.eh_frame_hdr:000000000000E6D4                 db  98h
.eh_frame_hdr:000000000000E6D5                 db    5
.eh_frame_hdr:000000000000E6D6                 db    0
.eh_frame_hdr:000000000000E6D7                 db    0
.eh_frame_hdr:000000000000E6D8                 db  5Ch ; \
.eh_frame_hdr:000000000000E6D9                 db  49h ; I
.eh_frame_hdr:000000000000E6DA                 db 0FFh
.eh_frame_hdr:000000000000E6DB                 db 0FFh
.eh_frame_hdr:000000000000E6DC                 db 0D0h
.eh_frame_hdr:000000000000E6DD                 db    5
.eh_frame_hdr:000000000000E6DE                 db    0
.eh_frame_hdr:000000000000E6DF                 db    0
.eh_frame_hdr:000000000000E6E0                 db  2Ch ; ,
.eh_frame_hdr:000000000000E6E1                 db  4Ah ; J
.eh_frame_hdr:000000000000E6E2                 db 0FFh
.eh_frame_hdr:000000000000E6E3                 db 0FFh
.eh_frame_hdr:000000000000E6E4                 db    0
.eh_frame_hdr:000000000000E6E5                 db    6
.eh_frame_hdr:000000000000E6E6                 db    0
.eh_frame_hdr:000000000000E6E7                 db    0
.eh_frame_hdr:000000000000E6E8                 db  3Ch ; <
.eh_frame_hdr:000000000000E6E9                 db  4Bh ; K
.eh_frame_hdr:000000000000E6EA                 db 0FFh
.eh_frame_hdr:000000000000E6EB                 db 0FFh
.eh_frame_hdr:000000000000E6EC                 db  40h ; @
.eh_frame_hdr:000000000000E6ED                 db    6
.eh_frame_hdr:000000000000E6EE                 db    0
.eh_frame_hdr:000000000000E6EF                 db    0
.eh_frame_hdr:000000000000E6F0                 db  6Ch ; l
.eh_frame_hdr:000000000000E6F1                 db  4Ch ; L
.eh_frame_hdr:000000000000E6F2                 db 0FFh
.eh_frame_hdr:000000000000E6F3                 db 0FFh
.eh_frame_hdr:000000000000E6F4                 db  88h
.eh_frame_hdr:000000000000E6F5                 db    6
.eh_frame_hdr:000000000000E6F6                 db    0
.eh_frame_hdr:000000000000E6F7                 db    0
.eh_frame_hdr:000000000000E6F8                 db  7Ch ; |
.eh_frame_hdr:000000000000E6F9                 db  4Eh ; N
.eh_frame_hdr:000000000000E6FA                 db 0FFh
.eh_frame_hdr:000000000000E6FB                 db 0FFh
.eh_frame_hdr:000000000000E6FC                 db 0BCh
.eh_frame_hdr:000000000000E6FD                 db    6
.eh_frame_hdr:000000000000E6FE                 db    0
.eh_frame_hdr:000000000000E6FF                 db    0
.eh_frame_hdr:000000000000E700                 db  2Ch ; ,
.eh_frame_hdr:000000000000E701                 db  4Fh ; O
.eh_frame_hdr:000000000000E702                 db 0FFh
.eh_frame_hdr:000000000000E703                 db 0FFh
.eh_frame_hdr:000000000000E704                 db 0FCh
.eh_frame_hdr:000000000000E705                 db    6
.eh_frame_hdr:000000000000E706                 db    0
.eh_frame_hdr:000000000000E707                 db    0
.eh_frame_hdr:000000000000E708                 db 0BCh
.eh_frame_hdr:000000000000E709                 db  50h ; P
.eh_frame_hdr:000000000000E70A                 db 0FFh
.eh_frame_hdr:000000000000E70B                 db 0FFh
.eh_frame_hdr:000000000000E70C                 db  48h ; H
.eh_frame_hdr:000000000000E70D                 db    7
.eh_frame_hdr:000000000000E70E                 db    0
.eh_frame_hdr:000000000000E70F                 db    0
.eh_frame_hdr:000000000000E710                 db  4Ch ; L
.eh_frame_hdr:000000000000E711                 db  51h ; Q
.eh_frame_hdr:000000000000E712                 db 0FFh
.eh_frame_hdr:000000000000E713                 db 0FFh
.eh_frame_hdr:000000000000E714                 db  5Ch ; \
.eh_frame_hdr:000000000000E715                 db    7
.eh_frame_hdr:000000000000E716                 db    0
.eh_frame_hdr:000000000000E717                 db    0
.eh_frame_hdr:000000000000E718                 db  5Ch ; \
.eh_frame_hdr:000000000000E719                 db  52h ; R
.eh_frame_hdr:000000000000E71A                 db 0FFh
.eh_frame_hdr:000000000000E71B                 db 0FFh
.eh_frame_hdr:000000000000E71C                 db  8Ch
.eh_frame_hdr:000000000000E71D                 db    7
.eh_frame_hdr:000000000000E71E                 db    0
.eh_frame_hdr:000000000000E71F                 db    0
.eh_frame_hdr:000000000000E720                 db 0CCh
.eh_frame_hdr:000000000000E721                 db  52h ; R
.eh_frame_hdr:000000000000E722                 db 0FFh
.eh_frame_hdr:000000000000E723                 db 0FFh
.eh_frame_hdr:000000000000E724                 db 0B0h
.eh_frame_hdr:000000000000E725                 db    7
.eh_frame_hdr:000000000000E726                 db    0
.eh_frame_hdr:000000000000E727                 db    0
.eh_frame_hdr:000000000000E728                 db 0CCh
.eh_frame_hdr:000000000000E729                 db  53h ; S
.eh_frame_hdr:000000000000E72A                 db 0FFh
.eh_frame_hdr:000000000000E72B                 db 0FFh
.eh_frame_hdr:000000000000E72C                 db 0D4h
.eh_frame_hdr:000000000000E72D                 db    7
.eh_frame_hdr:000000000000E72E                 db    0
.eh_frame_hdr:000000000000E72F                 db    0
.eh_frame_hdr:000000000000E730                 db  1Ch
.eh_frame_hdr:000000000000E731                 db  56h ; V
.eh_frame_hdr:000000000000E732                 db 0FFh
.eh_frame_hdr:000000000000E733                 db 0FFh
.eh_frame_hdr:000000000000E734                 db  10h
.eh_frame_hdr:000000000000E735                 db    8
.eh_frame_hdr:000000000000E736                 db    0
.eh_frame_hdr:000000000000E737                 db    0
.eh_frame_hdr:000000000000E738                 db 0ECh
.eh_frame_hdr:000000000000E739                 db  56h ; V
.eh_frame_hdr:000000000000E73A                 db 0FFh
.eh_frame_hdr:000000000000E73B                 db 0FFh
.eh_frame_hdr:000000000000E73C                 db  54h ; T
.eh_frame_hdr:000000000000E73D                 db    8
.eh_frame_hdr:000000000000E73E                 db    0
.eh_frame_hdr:000000000000E73F                 db    0
.eh_frame_hdr:000000000000E740                 db  7Ch ; |
.eh_frame_hdr:000000000000E741                 db  5Bh ; [
.eh_frame_hdr:000000000000E742                 db 0FFh
.eh_frame_hdr:000000000000E743                 db 0FFh
.eh_frame_hdr:000000000000E744                 db 0CCh
.eh_frame_hdr:000000000000E745                 db    8
.eh_frame_hdr:000000000000E746                 db    0
.eh_frame_hdr:000000000000E747                 db    0
.eh_frame_hdr:000000000000E748                 db  7Ch ; |
.eh_frame_hdr:000000000000E749                 db  5Ch ; \
.eh_frame_hdr:000000000000E74A                 db 0FFh
.eh_frame_hdr:000000000000E74B                 db 0FFh
.eh_frame_hdr:000000000000E74C                 db  0Ch
.eh_frame_hdr:000000000000E74D                 db    9
.eh_frame_hdr:000000000000E74E                 db    0
.eh_frame_hdr:000000000000E74F                 db    0
.eh_frame_hdr:000000000000E750                 db  3Ch ; <
.eh_frame_hdr:000000000000E751                 db  6Ch ; l
.eh_frame_hdr:000000000000E752                 db 0FFh
.eh_frame_hdr:000000000000E753                 db 0FFh
.eh_frame_hdr:000000000000E754                 db  74h ; t
.eh_frame_hdr:000000000000E755                 db    9
.eh_frame_hdr:000000000000E756                 db    0
.eh_frame_hdr:000000000000E757                 db    0
.eh_frame_hdr:000000000000E758                 db 0ACh
.eh_frame_hdr:000000000000E759                 db  71h ; q
.eh_frame_hdr:000000000000E75A                 db 0FFh
.eh_frame_hdr:000000000000E75B                 db 0FFh
.eh_frame_hdr:000000000000E75C                 db 0A0h
.eh_frame_hdr:000000000000E75D                 db    9
.eh_frame_hdr:000000000000E75E                 db    0
.eh_frame_hdr:000000000000E75F                 db    0
.eh_frame_hdr:000000000000E760                 db  9Ch
.eh_frame_hdr:000000000000E761                 db  72h ; r
.eh_frame_hdr:000000000000E762                 db 0FFh
.eh_frame_hdr:000000000000E763                 db 0FFh
.eh_frame_hdr:000000000000E764                 db  34h ; 4
.eh_frame_hdr:000000000000E765                 db  0Ah
.eh_frame_hdr:000000000000E766                 db    0
.eh_frame_hdr:000000000000E767                 db    0
.eh_frame_hdr:000000000000E768                 db 0ACh
.eh_frame_hdr:000000000000E769                 db  72h ; r
.eh_frame_hdr:000000000000E76A                 db 0FFh
.eh_frame_hdr:000000000000E76B                 db 0FFh
.eh_frame_hdr:000000000000E76C                 db  48h ; H
.eh_frame_hdr:000000000000E76D                 db  0Ah
.eh_frame_hdr:000000000000E76E                 db    0
.eh_frame_hdr:000000000000E76F                 db    0
.eh_frame_hdr:000000000000E770                 db 0BCh
.eh_frame_hdr:000000000000E771                 db  72h ; r
.eh_frame_hdr:000000000000E772                 db 0FFh
.eh_frame_hdr:000000000000E773                 db 0FFh
.eh_frame_hdr:000000000000E774                 db  5Ch ; \
.eh_frame_hdr:000000000000E775                 db  0Ah
.eh_frame_hdr:000000000000E776                 db    0
.eh_frame_hdr:000000000000E777                 db    0
.eh_frame_hdr:000000000000E778                 db  6Ch ; l
.eh_frame_hdr:000000000000E779                 db  73h ; s
.eh_frame_hdr:000000000000E77A                 db 0FFh
.eh_frame_hdr:000000000000E77B                 db 0FFh
.eh_frame_hdr:000000000000E77C                 db  8Ch
.eh_frame_hdr:000000000000E77D                 db  0Ah
.eh_frame_hdr:000000000000E77E                 db    0
.eh_frame_hdr:000000000000E77F                 db    0
.eh_frame_hdr:000000000000E780                 db  7Ch ; |
.eh_frame_hdr:000000000000E781                 db  73h ; s
.eh_frame_hdr:000000000000E782                 db 0FFh
.eh_frame_hdr:000000000000E783                 db 0FFh
.eh_frame_hdr:000000000000E784                 db 0A0h
.eh_frame_hdr:000000000000E785                 db  0Ah
.eh_frame_hdr:000000000000E786                 db    0
.eh_frame_hdr:000000000000E787                 db    0
.eh_frame_hdr:000000000000E788                 db 0ACh
.eh_frame_hdr:000000000000E789                 db  73h ; s
.eh_frame_hdr:000000000000E78A                 db 0FFh
.eh_frame_hdr:000000000000E78B                 db 0FFh
.eh_frame_hdr:000000000000E78C                 db 0BCh
.eh_frame_hdr:000000000000E78D                 db  0Ah
.eh_frame_hdr:000000000000E78E                 db    0
.eh_frame_hdr:000000000000E78F                 db    0
.eh_frame_hdr:000000000000E790                 db  4Ch ; L
.eh_frame_hdr:000000000000E791                 db  74h ; t
.eh_frame_hdr:000000000000E792                 db 0FFh
.eh_frame_hdr:000000000000E793                 db 0FFh
.eh_frame_hdr:000000000000E794                 db 0ECh
.eh_frame_hdr:000000000000E795                 db  0Ah
.eh_frame_hdr:000000000000E796                 db    0
.eh_frame_hdr:000000000000E797                 db    0
.eh_frame_hdr:000000000000E798                 db  5Ch ; \
.eh_frame_hdr:000000000000E799                 db  74h ; t
.eh_frame_hdr:000000000000E79A                 db 0FFh
.eh_frame_hdr:000000000000E79B                 db 0FFh
.eh_frame_hdr:000000000000E79C                 db    0
.eh_frame_hdr:000000000000E79D                 db  0Bh
.eh_frame_hdr:000000000000E79E                 db    0
.eh_frame_hdr:000000000000E79F                 db    0
.eh_frame_hdr:000000000000E7A0                 db 0ACh
.eh_frame_hdr:000000000000E7A1                 db  74h ; t
.eh_frame_hdr:000000000000E7A2                 db 0FFh
.eh_frame_hdr:000000000000E7A3                 db 0FFh
.eh_frame_hdr:000000000000E7A4                 db  1Ch
.eh_frame_hdr:000000000000E7A5                 db  0Bh
.eh_frame_hdr:000000000000E7A6                 db    0
.eh_frame_hdr:000000000000E7A7                 db    0
.eh_frame_hdr:000000000000E7A8                 db  0Ch
.eh_frame_hdr:000000000000E7A9                 db  75h ; u
.eh_frame_hdr:000000000000E7AA                 db 0FFh
.eh_frame_hdr:000000000000E7AB                 db 0FFh
.eh_frame_hdr:000000000000E7AC                 db  3Ch ; <
.eh_frame_hdr:000000000000E7AD                 db  0Bh
.eh_frame_hdr:000000000000E7AE                 db    0
.eh_frame_hdr:000000000000E7AF                 db    0
.eh_frame_hdr:000000000000E7B0                 db 0ACh
.eh_frame_hdr:000000000000E7B1                 db  75h ; u
.eh_frame_hdr:000000000000E7B2                 db 0FFh
.eh_frame_hdr:000000000000E7B3                 db 0FFh
.eh_frame_hdr:000000000000E7B4                 db  54h ; T
.eh_frame_hdr:000000000000E7B5                 db  0Bh
.eh_frame_hdr:000000000000E7B6                 db    0
.eh_frame_hdr:000000000000E7B7                 db    0
.eh_frame_hdr:000000000000E7B8                 db  6Ch ; l
.eh_frame_hdr:000000000000E7B9                 db  77h ; w
.eh_frame_hdr:000000000000E7BA                 db 0FFh
.eh_frame_hdr:000000000000E7BB                 db 0FFh
.eh_frame_hdr:000000000000E7BC                 db 0A0h
.eh_frame_hdr:000000000000E7BD                 db  0Bh
.eh_frame_hdr:000000000000E7BE                 db    0
.eh_frame_hdr:000000000000E7BF                 db    0
.eh_frame_hdr:000000000000E7C0                 db  9Ch
.eh_frame_hdr:000000000000E7C1                 db  77h ; w
.eh_frame_hdr:000000000000E7C2                 db 0FFh
.eh_frame_hdr:000000000000E7C3                 db 0FFh
.eh_frame_hdr:000000000000E7C4                 db 0CCh
.eh_frame_hdr:000000000000E7C5                 db  0Bh
.eh_frame_hdr:000000000000E7C6                 db    0
.eh_frame_hdr:000000000000E7C7                 db    0
.eh_frame_hdr:000000000000E7C8                 db 0ECh
.eh_frame_hdr:000000000000E7C9                 db  77h ; w
.eh_frame_hdr:000000000000E7CA                 db 0FFh
.eh_frame_hdr:000000000000E7CB                 db 0FFh
.eh_frame_hdr:000000000000E7CC                 db 0F8h
.eh_frame_hdr:000000000000E7CD                 db  0Bh
.eh_frame_hdr:000000000000E7CE                 db    0
.eh_frame_hdr:000000000000E7CF                 db    0
.eh_frame_hdr:000000000000E7D0                 db  3Ch ; <
.eh_frame_hdr:000000000000E7D1                 db  78h ; x
.eh_frame_hdr:000000000000E7D2                 db 0FFh
.eh_frame_hdr:000000000000E7D3                 db 0FFh
.eh_frame_hdr:000000000000E7D4                 db  24h ; $
.eh_frame_hdr:000000000000E7D5                 db  0Ch
.eh_frame_hdr:000000000000E7D6                 db    0
.eh_frame_hdr:000000000000E7D7                 db    0
.eh_frame_hdr:000000000000E7D8                 db 0FCh
.eh_frame_hdr:000000000000E7D9                 db  92h
.eh_frame_hdr:000000000000E7DA                 db 0FFh
.eh_frame_hdr:000000000000E7DB                 db 0FFh
.eh_frame_hdr:000000000000E7DC                 db  9Ch
.eh_frame_hdr:000000000000E7DD                 db  0Ch
.eh_frame_hdr:000000000000E7DE                 db    0
.eh_frame_hdr:000000000000E7DF                 db    0
.eh_frame_hdr:000000000000E7E0                 db  4Ch ; L
.eh_frame_hdr:000000000000E7E1                 db  93h
.eh_frame_hdr:000000000000E7E2                 db 0FFh
.eh_frame_hdr:000000000000E7E3                 db 0FFh
.eh_frame_hdr:000000000000E7E4                 db 0CCh
.eh_frame_hdr:000000000000E7E5                 db  0Ch
.eh_frame_hdr:000000000000E7E6                 db    0
.eh_frame_hdr:000000000000E7E7                 db    0
.eh_frame_hdr:000000000000E7E8                 db 0ECh
.eh_frame_hdr:000000000000E7E9                 db  93h
.eh_frame_hdr:000000000000E7EA                 db 0FFh
.eh_frame_hdr:000000000000E7EB                 db 0FFh
.eh_frame_hdr:000000000000E7EC                 db 0ECh
.eh_frame_hdr:000000000000E7ED                 db  0Ch
.eh_frame_hdr:000000000000E7EE                 db    0
.eh_frame_hdr:000000000000E7EF                 db    0
.eh_frame_hdr:000000000000E7F0                 db 0DCh
.eh_frame_hdr:000000000000E7F1                 db  94h
.eh_frame_hdr:000000000000E7F2                 db 0FFh
.eh_frame_hdr:000000000000E7F3                 db 0FFh
.eh_frame_hdr:000000000000E7F4                 db  30h ; 0
.eh_frame_hdr:000000000000E7F5                 db  0Dh
.eh_frame_hdr:000000000000E7F6                 db    0
.eh_frame_hdr:000000000000E7F7                 db    0
.eh_frame_hdr:000000000000E7F8                 db  1Ch
.eh_frame_hdr:000000000000E7F9                 db 0A7h
.eh_frame_hdr:000000000000E7FA                 db 0FFh
.eh_frame_hdr:000000000000E7FB                 db 0FFh
.eh_frame_hdr:000000000000E7FC                 db 0A8h
.eh_frame_hdr:000000000000E7FD                 db  0Dh
.eh_frame_hdr:000000000000E7FE                 db    0
.eh_frame_hdr:000000000000E7FF                 db    0
.eh_frame_hdr:000000000000E800                 db 0CCh
.eh_frame_hdr:000000000000E801                 db 0A8h
.eh_frame_hdr:000000000000E802                 db 0FFh
.eh_frame_hdr:000000000000E803                 db 0FFh
.eh_frame_hdr:000000000000E804                 db  14h
.eh_frame_hdr:000000000000E805                 db  0Eh
.eh_frame_hdr:000000000000E806                 db    0
.eh_frame_hdr:000000000000E807                 db    0
.eh_frame_hdr:000000000000E808                 db  0Ch
.eh_frame_hdr:000000000000E809                 db 0A9h
.eh_frame_hdr:000000000000E80A                 db 0FFh
.eh_frame_hdr:000000000000E80B                 db 0FFh
.eh_frame_hdr:000000000000E80C                 db  40h ; @
.eh_frame_hdr:000000000000E80D                 db  0Eh
.eh_frame_hdr:000000000000E80E                 db    0
.eh_frame_hdr:000000000000E80F                 db    0
.eh_frame_hdr:000000000000E810                 db  2Ch ; ,
.eh_frame_hdr:000000000000E811                 db 0A9h
.eh_frame_hdr:000000000000E812                 db 0FFh
.eh_frame_hdr:000000000000E813                 db 0FFh
.eh_frame_hdr:000000000000E814                 db  54h ; T
.eh_frame_hdr:000000000000E815                 db  0Eh
.eh_frame_hdr:000000000000E816                 db    0
.eh_frame_hdr:000000000000E817                 db    0
.eh_frame_hdr:000000000000E818                 db  4Ch ; L
.eh_frame_hdr:000000000000E819                 db 0A9h
.eh_frame_hdr:000000000000E81A                 db 0FFh
.eh_frame_hdr:000000000000E81B                 db 0FFh
.eh_frame_hdr:000000000000E81C                 db  68h ; h
.eh_frame_hdr:000000000000E81D                 db  0Eh
.eh_frame_hdr:000000000000E81E                 db    0
.eh_frame_hdr:000000000000E81F                 db    0
.eh_frame_hdr:000000000000E820                 db  8Ch
.eh_frame_hdr:000000000000E821                 db 0A9h
.eh_frame_hdr:000000000000E822                 db 0FFh
.eh_frame_hdr:000000000000E823                 db 0FFh
.eh_frame_hdr:000000000000E824                 db  7Ch ; |
.eh_frame_hdr:000000000000E825                 db  0Eh
.eh_frame_hdr:000000000000E826                 db    0
.eh_frame_hdr:000000000000E827                 db    0
.eh_frame_hdr:000000000000E828                 db 0ACh
.eh_frame_hdr:000000000000E829                 db 0A9h
.eh_frame_hdr:000000000000E82A                 db 0FFh
.eh_frame_hdr:000000000000E82B                 db 0FFh
.eh_frame_hdr:000000000000E82C                 db  90h
.eh_frame_hdr:000000000000E82D                 db  0Eh
.eh_frame_hdr:000000000000E82E                 db    0
.eh_frame_hdr:000000000000E82F                 db    0
.eh_frame_hdr:000000000000E830                 db 0DCh
.eh_frame_hdr:000000000000E831                 db 0A9h
.eh_frame_hdr:000000000000E832                 db 0FFh
.eh_frame_hdr:000000000000E833                 db 0FFh
.eh_frame_hdr:000000000000E834                 db 0A4h
.eh_frame_hdr:000000000000E835                 db  0Eh
.eh_frame_hdr:000000000000E836                 db    0
.eh_frame_hdr:000000000000E837                 db    0
.eh_frame_hdr:000000000000E838                 db  5Ch ; \
.eh_frame_hdr:000000000000E839                 db 0AAh
.eh_frame_hdr:000000000000E83A                 db 0FFh
.eh_frame_hdr:000000000000E83B                 db 0FFh
.eh_frame_hdr:000000000000E83C                 db 0F8h
.eh_frame_hdr:000000000000E83D                 db  0Eh
.eh_frame_hdr:000000000000E83E                 db    0
.eh_frame_hdr:000000000000E83F                 db    0
.eh_frame_hdr:000000000000E840                 db  4Ch ; L
.eh_frame_hdr:000000000000E841                 db 0ABh
.eh_frame_hdr:000000000000E842                 db 0FFh
.eh_frame_hdr:000000000000E843                 db 0FFh
.eh_frame_hdr:000000000000E844                 db  64h ; d
.eh_frame_hdr:000000000000E845                 db  0Fh
.eh_frame_hdr:000000000000E846                 db    0
.eh_frame_hdr:000000000000E847                 db    0
.eh_frame_hdr:000000000000E848                 db  5Ch ; \
.eh_frame_hdr:000000000000E849                 db 0ABh
.eh_frame_hdr:000000000000E84A                 db 0FFh
.eh_frame_hdr:000000000000E84B                 db 0FFh
.eh_frame_hdr:000000000000E84C                 db  78h ; x
.eh_frame_hdr:000000000000E84D                 db  0Fh
.eh_frame_hdr:000000000000E84E                 db    0
.eh_frame_hdr:000000000000E84F                 db    0
.eh_frame_hdr:000000000000E850                 db 0FCh
.eh_frame_hdr:000000000000E851                 db 0ABh
.eh_frame_hdr:000000000000E852                 db 0FFh
.eh_frame_hdr:000000000000E853                 db 0FFh
.eh_frame_hdr:000000000000E854                 db 0A4h
.eh_frame_hdr:000000000000E855                 db  0Fh
.eh_frame_hdr:000000000000E856                 db    0
.eh_frame_hdr:000000000000E857                 db    0
.eh_frame_hdr:000000000000E858                 db  1Ch
.eh_frame_hdr:000000000000E859                 db 0ACh
.eh_frame_hdr:000000000000E85A                 db 0FFh
.eh_frame_hdr:000000000000E85B                 db 0FFh
.eh_frame_hdr:000000000000E85C                 db 0B8h
.eh_frame_hdr:000000000000E85D                 db  0Fh
.eh_frame_hdr:000000000000E85E                 db    0
.eh_frame_hdr:000000000000E85F                 db    0
.eh_frame_hdr:000000000000E860                 db  2Ch ; ,
.eh_frame_hdr:000000000000E861                 db 0ACh
.eh_frame_hdr:000000000000E862                 db 0FFh
.eh_frame_hdr:000000000000E863                 db 0FFh
.eh_frame_hdr:000000000000E864                 db 0CCh
.eh_frame_hdr:000000000000E865                 db  0Fh
.eh_frame_hdr:000000000000E866                 db    0
.eh_frame_hdr:000000000000E867                 db    0
.eh_frame_hdr:000000000000E868                 db  4Ch ; L
.eh_frame_hdr:000000000000E869                 db 0ACh
.eh_frame_hdr:000000000000E86A                 db 0FFh
.eh_frame_hdr:000000000000E86B                 db 0FFh
.eh_frame_hdr:000000000000E86C                 db 0E0h
.eh_frame_hdr:000000000000E86D                 db  0Fh
.eh_frame_hdr:000000000000E86E                 db    0
.eh_frame_hdr:000000000000E86F                 db    0
.eh_frame_hdr:000000000000E870                 db  6Ch ; l
.eh_frame_hdr:000000000000E871                 db 0ACh
.eh_frame_hdr:000000000000E872                 db 0FFh
.eh_frame_hdr:000000000000E873                 db 0FFh
.eh_frame_hdr:000000000000E874                 db 0F4h
.eh_frame_hdr:000000000000E875                 db  0Fh
.eh_frame_hdr:000000000000E876                 db    0
.eh_frame_hdr:000000000000E877                 db    0
.eh_frame_hdr:000000000000E878                 db 0FCh
.eh_frame_hdr:000000000000E879                 db 0ACh
.eh_frame_hdr:000000000000E87A                 db 0FFh
.eh_frame_hdr:000000000000E87B                 db 0FFh
.eh_frame_hdr:000000000000E87C                 db  10h
.eh_frame_hdr:000000000000E87D                 db  10h
.eh_frame_hdr:000000000000E87E                 db    0
.eh_frame_hdr:000000000000E87F                 db    0
.eh_frame_hdr:000000000000E880                 db  8Ch
.eh_frame_hdr:000000000000E881                 db 0ADh
.eh_frame_hdr:000000000000E882                 db 0FFh
.eh_frame_hdr:000000000000E883                 db 0FFh
.eh_frame_hdr:000000000000E884                 db  2Ch ; ,
.eh_frame_hdr:000000000000E885                 db  10h
.eh_frame_hdr:000000000000E886                 db    0
.eh_frame_hdr:000000000000E887                 db    0
.eh_frame_hdr:000000000000E888                 db  9Ch
.eh_frame_hdr:000000000000E889                 db 0ADh
.eh_frame_hdr:000000000000E88A                 db 0FFh
.eh_frame_hdr:000000000000E88B                 db 0FFh
.eh_frame_hdr:000000000000E88C                 db  40h ; @
.eh_frame_hdr:000000000000E88D                 db  10h
.eh_frame_hdr:000000000000E88E                 db    0
.eh_frame_hdr:000000000000E88F                 db    0
.eh_frame_hdr:000000000000E890                 db 0ACh
.eh_frame_hdr:000000000000E891                 db 0ADh
.eh_frame_hdr:000000000000E892                 db 0FFh
.eh_frame_hdr:000000000000E893                 db 0FFh
.eh_frame_hdr:000000000000E894                 db  54h ; T
.eh_frame_hdr:000000000000E895                 db  10h
.eh_frame_hdr:000000000000E896                 db    0
.eh_frame_hdr:000000000000E897                 db    0
.eh_frame_hdr:000000000000E898                 db  4Ch ; L
.eh_frame_hdr:000000000000E899                 db 0AEh
.eh_frame_hdr:000000000000E89A                 db 0FFh
.eh_frame_hdr:000000000000E89B                 db 0FFh
.eh_frame_hdr:000000000000E89C                 db  70h ; p
.eh_frame_hdr:000000000000E89D                 db  10h
.eh_frame_hdr:000000000000E89E                 db    0
.eh_frame_hdr:000000000000E89F                 db    0
.eh_frame_hdr:000000000000E8A0                 db  5Ch ; \
.eh_frame_hdr:000000000000E8A1                 db 0AEh
.eh_frame_hdr:000000000000E8A2                 db 0FFh
.eh_frame_hdr:000000000000E8A3                 db 0FFh
.eh_frame_hdr:000000000000E8A4                 db  84h
.eh_frame_hdr:000000000000E8A5                 db  10h
.eh_frame_hdr:000000000000E8A6                 db    0
.eh_frame_hdr:000000000000E8A7                 db    0
.eh_frame_hdr:000000000000E8A8                 db  7Ch ; |
.eh_frame_hdr:000000000000E8A9                 db 0AEh
.eh_frame_hdr:000000000000E8AA                 db 0FFh
.eh_frame_hdr:000000000000E8AB                 db 0FFh
.eh_frame_hdr:000000000000E8AC                 db  98h
.eh_frame_hdr:000000000000E8AD                 db  10h
.eh_frame_hdr:000000000000E8AE                 db    0
.eh_frame_hdr:000000000000E8AF                 db    0
.eh_frame_hdr:000000000000E8B0                 db  8Ch
.eh_frame_hdr:000000000000E8B1                 db 0AEh
.eh_frame_hdr:000000000000E8B2                 db 0FFh
.eh_frame_hdr:000000000000E8B3                 db 0FFh
.eh_frame_hdr:000000000000E8B4                 db 0ACh
.eh_frame_hdr:000000000000E8B5                 db  10h
.eh_frame_hdr:000000000000E8B6                 db    0
.eh_frame_hdr:000000000000E8B7                 db    0
.eh_frame_hdr:000000000000E8B8                 db  1Ch
.eh_frame_hdr:000000000000E8B9                 db 0AFh
.eh_frame_hdr:000000000000E8BA                 db 0FFh
.eh_frame_hdr:000000000000E8BB                 db 0FFh
.eh_frame_hdr:000000000000E8BC                 db 0C8h
.eh_frame_hdr:000000000000E8BD                 db  10h
.eh_frame_hdr:000000000000E8BE                 db    0
.eh_frame_hdr:000000000000E8BF                 db    0
.eh_frame_hdr:000000000000E8C0                 db 0BCh
.eh_frame_hdr:000000000000E8C1                 db 0AFh
.eh_frame_hdr:000000000000E8C2                 db 0FFh
.eh_frame_hdr:000000000000E8C3                 db 0FFh
.eh_frame_hdr:000000000000E8C4                 db 0E4h
.eh_frame_hdr:000000000000E8C5                 db  10h
.eh_frame_hdr:000000000000E8C6                 db    0
.eh_frame_hdr:000000000000E8C7                 db    0
.eh_frame_hdr:000000000000E8C8                 db 0CCh
.eh_frame_hdr:000000000000E8C9                 db 0AFh
.eh_frame_hdr:000000000000E8CA                 db 0FFh
.eh_frame_hdr:000000000000E8CB                 db 0FFh
.eh_frame_hdr:000000000000E8CC                 db 0F8h
.eh_frame_hdr:000000000000E8CD                 db  10h
.eh_frame_hdr:000000000000E8CE                 db    0
.eh_frame_hdr:000000000000E8CF                 db    0
.eh_frame_hdr:000000000000E8D0                 db 0ECh
.eh_frame_hdr:000000000000E8D1                 db 0AFh
.eh_frame_hdr:000000000000E8D2                 db 0FFh
.eh_frame_hdr:000000000000E8D3                 db 0FFh
.eh_frame_hdr:000000000000E8D4                 db  0Ch
.eh_frame_hdr:000000000000E8D5                 db  11h
.eh_frame_hdr:000000000000E8D6                 db    0
.eh_frame_hdr:000000000000E8D7                 db    0
.eh_frame_hdr:000000000000E8D8                 db  0Ch
.eh_frame_hdr:000000000000E8D9                 db 0B0h
.eh_frame_hdr:000000000000E8DA                 db 0FFh
.eh_frame_hdr:000000000000E8DB                 db 0FFh
.eh_frame_hdr:000000000000E8DC                 db  20h
.eh_frame_hdr:000000000000E8DD                 db  11h
.eh_frame_hdr:000000000000E8DE                 db    0
.eh_frame_hdr:000000000000E8DF                 db    0
.eh_frame_hdr:000000000000E8E0                 db  1Ch
.eh_frame_hdr:000000000000E8E1                 db 0B0h
.eh_frame_hdr:000000000000E8E2                 db 0FFh
.eh_frame_hdr:000000000000E8E3                 db 0FFh
.eh_frame_hdr:000000000000E8E4                 db  34h ; 4
.eh_frame_hdr:000000000000E8E5                 db  11h
.eh_frame_hdr:000000000000E8E6                 db    0
.eh_frame_hdr:000000000000E8E7                 db    0
.eh_frame_hdr:000000000000E8E8                 db  3Ch ; <
.eh_frame_hdr:000000000000E8E9                 db 0B0h
.eh_frame_hdr:000000000000E8EA                 db 0FFh
.eh_frame_hdr:000000000000E8EB                 db 0FFh
.eh_frame_hdr:000000000000E8EC                 db  48h ; H
.eh_frame_hdr:000000000000E8ED                 db  11h
.eh_frame_hdr:000000000000E8EE                 db    0
.eh_frame_hdr:000000000000E8EF                 db    0
.eh_frame_hdr:000000000000E8F0                 db  5Ch ; \
.eh_frame_hdr:000000000000E8F1                 db 0B0h
.eh_frame_hdr:000000000000E8F2                 db 0FFh
.eh_frame_hdr:000000000000E8F3                 db 0FFh
.eh_frame_hdr:000000000000E8F4                 db  5Ch ; \
.eh_frame_hdr:000000000000E8F5                 db  11h
.eh_frame_hdr:000000000000E8F6                 db    0
.eh_frame_hdr:000000000000E8F7                 db    0
.eh_frame_hdr:000000000000E8F8                 db  7Ch ; |
.eh_frame_hdr:000000000000E8F9                 db 0B0h
.eh_frame_hdr:000000000000E8FA                 db 0FFh
.eh_frame_hdr:000000000000E8FB                 db 0FFh
.eh_frame_hdr:000000000000E8FC                 db  74h ; t
.eh_frame_hdr:000000000000E8FD                 db  11h
.eh_frame_hdr:000000000000E8FE                 db    0
.eh_frame_hdr:000000000000E8FF                 db    0
.eh_frame_hdr:000000000000E900                 db  8Ch
.eh_frame_hdr:000000000000E901                 db 0B0h
.eh_frame_hdr:000000000000E902                 db 0FFh
.eh_frame_hdr:000000000000E903                 db 0FFh
.eh_frame_hdr:000000000000E904                 db  8Ch
.eh_frame_hdr:000000000000E905                 db  11h
.eh_frame_hdr:000000000000E906                 db    0
.eh_frame_hdr:000000000000E907                 db    0
.eh_frame_hdr:000000000000E908                 db 0ACh
.eh_frame_hdr:000000000000E909                 db 0B4h
.eh_frame_hdr:000000000000E90A                 db 0FFh
.eh_frame_hdr:000000000000E90B                 db 0FFh
.eh_frame_hdr:000000000000E90C                 db 0A0h
.eh_frame_hdr:000000000000E90D                 db  12h
.eh_frame_hdr:000000000000E90E                 db    0
.eh_frame_hdr:000000000000E90F                 db    0
.eh_frame_hdr:000000000000E910                 db 0CCh
.eh_frame_hdr:000000000000E911                 db 0B4h
.eh_frame_hdr:000000000000E912                 db 0FFh
.eh_frame_hdr:000000000000E913                 db 0FFh
.eh_frame_hdr:000000000000E914                 db 0B4h
.eh_frame_hdr:000000000000E915                 db  12h
.eh_frame_hdr:000000000000E916                 db    0
.eh_frame_hdr:000000000000E917                 db    0
.eh_frame_hdr:000000000000E918                 db  4Ch ; L
.eh_frame_hdr:000000000000E919                 db 0B5h
.eh_frame_hdr:000000000000E91A                 db 0FFh
.eh_frame_hdr:000000000000E91B                 db 0FFh
.eh_frame_hdr:000000000000E91C                 db 0D0h
.eh_frame_hdr:000000000000E91D                 db  12h
.eh_frame_hdr:000000000000E91E                 db    0
.eh_frame_hdr:000000000000E91F                 db    0
.eh_frame_hdr:000000000000E920                 db  2Ch ; ,
.eh_frame_hdr:000000000000E921                 db 0B6h
.eh_frame_hdr:000000000000E922                 db 0FFh
.eh_frame_hdr:000000000000E923                 db 0FFh
.eh_frame_hdr:000000000000E924                 db 0FCh
.eh_frame_hdr:000000000000E925                 db  12h
.eh_frame_hdr:000000000000E926                 db    0
.eh_frame_hdr:000000000000E927                 db    0
.eh_frame_hdr:000000000000E928                 db 0ACh
.eh_frame_hdr:000000000000E929                 db 0B6h
.eh_frame_hdr:000000000000E92A                 db 0FFh
.eh_frame_hdr:000000000000E92B                 db 0FFh
.eh_frame_hdr:000000000000E92C                 db  1Ch
.eh_frame_hdr:000000000000E92D                 db  13h
.eh_frame_hdr:000000000000E92E                 db    0
.eh_frame_hdr:000000000000E92F                 db    0
.eh_frame_hdr:000000000000E930                 db 0CCh
.eh_frame_hdr:000000000000E931                 db 0B6h
.eh_frame_hdr:000000000000E932                 db 0FFh
.eh_frame_hdr:000000000000E933                 db 0FFh
.eh_frame_hdr:000000000000E934                 db  38h ; 8
.eh_frame_hdr:000000000000E935                 db  13h
.eh_frame_hdr:000000000000E936                 db    0
.eh_frame_hdr:000000000000E937                 db    0
.eh_frame_hdr:000000000000E938                 db 0FCh
.eh_frame_hdr:000000000000E939                 db 0B6h
.eh_frame_hdr:000000000000E93A                 db 0FFh
.eh_frame_hdr:000000000000E93B                 db 0FFh
.eh_frame_hdr:000000000000E93C                 db  4Ch ; L
.eh_frame_hdr:000000000000E93D                 db  13h
.eh_frame_hdr:000000000000E93E                 db    0
.eh_frame_hdr:000000000000E93F                 db    0
.eh_frame_hdr:000000000000E940                 db  0Ch
.eh_frame_hdr:000000000000E941                 db 0B7h
.eh_frame_hdr:000000000000E942                 db 0FFh
.eh_frame_hdr:000000000000E943                 db 0FFh
.eh_frame_hdr:000000000000E944                 db  60h ; `
.eh_frame_hdr:000000000000E945                 db  13h
.eh_frame_hdr:000000000000E946                 db    0
.eh_frame_hdr:000000000000E947                 db    0
.eh_frame_hdr:000000000000E948                 db  4Ch ; L
.eh_frame_hdr:000000000000E949                 db 0B7h
.eh_frame_hdr:000000000000E94A                 db 0FFh
.eh_frame_hdr:000000000000E94B                 db 0FFh
.eh_frame_hdr:000000000000E94C                 db  84h
.eh_frame_hdr:000000000000E94D                 db  13h
.eh_frame_hdr:000000000000E94E                 db    0
.eh_frame_hdr:000000000000E94F                 db    0
.eh_frame_hdr:000000000000E950                 db  7Ch ; |
.eh_frame_hdr:000000000000E951                 db 0B7h
.eh_frame_hdr:000000000000E952                 db 0FFh
.eh_frame_hdr:000000000000E953                 db 0FFh
.eh_frame_hdr:000000000000E954                 db  98h
.eh_frame_hdr:000000000000E955                 db  13h
.eh_frame_hdr:000000000000E956                 db    0
.eh_frame_hdr:000000000000E957                 db    0
.eh_frame_hdr:000000000000E958                 db  0Ch
.eh_frame_hdr:000000000000E959                 db 0B8h
.eh_frame_hdr:000000000000E95A                 db 0FFh
.eh_frame_hdr:000000000000E95B                 db 0FFh
.eh_frame_hdr:000000000000E95C                 db 0B0h
.eh_frame_hdr:000000000000E95D                 db  13h
.eh_frame_hdr:000000000000E95E                 db    0
.eh_frame_hdr:000000000000E95F                 db    0
.eh_frame_hdr:000000000000E960                 db  5Ch ; \
.eh_frame_hdr:000000000000E961                 db 0B8h
.eh_frame_hdr:000000000000E962                 db 0FFh
.eh_frame_hdr:000000000000E963                 db 0FFh
.eh_frame_hdr:000000000000E964                 db 0C8h
.eh_frame_hdr:000000000000E965                 db  13h
.eh_frame_hdr:000000000000E966                 db    0
.eh_frame_hdr:000000000000E967                 db    0
.eh_frame_hdr:000000000000E968                 db  7Ch ; |
.eh_frame_hdr:000000000000E969                 db 0B8h
.eh_frame_hdr:000000000000E96A                 db 0FFh
.eh_frame_hdr:000000000000E96B                 db 0FFh
.eh_frame_hdr:000000000000E96C                 db 0E4h
.eh_frame_hdr:000000000000E96D                 db  13h
.eh_frame_hdr:000000000000E96E                 db    0
.eh_frame_hdr:000000000000E96F                 db    0
.eh_frame_hdr:000000000000E970                 db 0ACh
.eh_frame_hdr:000000000000E971                 db 0B8h
.eh_frame_hdr:000000000000E972                 db 0FFh
.eh_frame_hdr:000000000000E973                 db 0FFh
.eh_frame_hdr:000000000000E974                 db    0
.eh_frame_hdr:000000000000E975                 db  14h
.eh_frame_hdr:000000000000E976                 db    0
.eh_frame_hdr:000000000000E977                 db    0
.eh_frame_hdr:000000000000E978                 db 0DCh
.eh_frame_hdr:000000000000E979                 db 0B8h
.eh_frame_hdr:000000000000E97A                 db 0FFh
.eh_frame_hdr:000000000000E97B                 db 0FFh
.eh_frame_hdr:000000000000E97C                 db  28h ; (
.eh_frame_hdr:000000000000E97D                 db  14h
.eh_frame_hdr:000000000000E97E                 db    0
.eh_frame_hdr:000000000000E97F                 db    0
.eh_frame_hdr:000000000000E980                 db 0FCh
.eh_frame_hdr:000000000000E981                 db 0B8h
.eh_frame_hdr:000000000000E982                 db 0FFh
.eh_frame_hdr:000000000000E983                 db 0FFh
.eh_frame_hdr:000000000000E984                 db  44h ; D
.eh_frame_hdr:000000000000E985                 db  14h
.eh_frame_hdr:000000000000E986                 db    0
.eh_frame_hdr:000000000000E987                 db    0
.eh_frame_hdr:000000000000E988                 db  3Ch ; <
.eh_frame_hdr:000000000000E989                 db 0B9h
.eh_frame_hdr:000000000000E98A                 db 0FFh
.eh_frame_hdr:000000000000E98B                 db 0FFh
.eh_frame_hdr:000000000000E98C                 db  5Ch ; \
.eh_frame_hdr:000000000000E98D                 db  14h
.eh_frame_hdr:000000000000E98E                 db    0
.eh_frame_hdr:000000000000E98F                 db    0
.eh_frame_hdr:000000000000E990                 db  5Ch ; \
.eh_frame_hdr:000000000000E991                 db 0BAh
.eh_frame_hdr:000000000000E992                 db 0FFh
.eh_frame_hdr:000000000000E993                 db 0FFh
.eh_frame_hdr:000000000000E994                 db 0A8h
.eh_frame_hdr:000000000000E995                 db  14h
.eh_frame_hdr:000000000000E996                 db    0
.eh_frame_hdr:000000000000E997                 db    0
.eh_frame_hdr:000000000000E998                 db  8Ch
.eh_frame_hdr:000000000000E999                 db 0BAh
.eh_frame_hdr:000000000000E99A                 db 0FFh
.eh_frame_hdr:000000000000E99B                 db 0FFh
.eh_frame_hdr:000000000000E99C                 db 0C4h
.eh_frame_hdr:000000000000E99D                 db  14h
.eh_frame_hdr:000000000000E99E                 db    0
.eh_frame_hdr:000000000000E99F                 db    0
.eh_frame_hdr:000000000000E9A0                 db  4Ch ; L
.eh_frame_hdr:000000000000E9A1                 db 0C1h
.eh_frame_hdr:000000000000E9A2                 db 0FFh
.eh_frame_hdr:000000000000E9A3                 db 0FFh
.eh_frame_hdr:000000000000E9A4                 db  14h
.eh_frame_hdr:000000000000E9A5                 db  15h
.eh_frame_hdr:000000000000E9A6                 db    0
.eh_frame_hdr:000000000000E9A7                 db    0
.eh_frame_hdr:000000000000E9A8                 db  0Ch
.eh_frame_hdr:000000000000E9A9                 db 0C8h
.eh_frame_hdr:000000000000E9AA                 db 0FFh
.eh_frame_hdr:000000000000E9AB                 db 0FFh
.eh_frame_hdr:000000000000E9AC                 db  64h ; d
.eh_frame_hdr:000000000000E9AD                 db  15h
.eh_frame_hdr:000000000000E9AE                 db    0
.eh_frame_hdr:000000000000E9AF                 db    0
.eh_frame_hdr:000000000000E9B0                 db 0BCh
.eh_frame_hdr:000000000000E9B1                 db 0C8h
.eh_frame_hdr:000000000000E9B2                 db 0FFh
.eh_frame_hdr:000000000000E9B3                 db 0FFh
.eh_frame_hdr:000000000000E9B4                 db  8Ch
.eh_frame_hdr:000000000000E9B5                 db  15h
.eh_frame_hdr:000000000000E9B6                 db    0
.eh_frame_hdr:000000000000E9B7                 db    0
.eh_frame_hdr:000000000000E9B8                 db 0DCh
.eh_frame_hdr:000000000000E9B9                 db 0CCh
.eh_frame_hdr:000000000000E9BA                 db 0FFh
.eh_frame_hdr:000000000000E9BB                 db 0FFh
.eh_frame_hdr:000000000000E9BC                 db 0DCh
.eh_frame_hdr:000000000000E9BD                 db  15h
.eh_frame_hdr:000000000000E9BE                 db    0
.eh_frame_hdr:000000000000E9BF                 db    0
.eh_frame_hdr:000000000000E9C0                 db  5Ch ; \
.eh_frame_hdr:000000000000E9C1                 db 0CDh
.eh_frame_hdr:000000000000E9C2                 db 0FFh
.eh_frame_hdr:000000000000E9C3                 db 0FFh
.eh_frame_hdr:000000000000E9C4                 db  14h
.eh_frame_hdr:000000000000E9C5                 db  16h
.eh_frame_hdr:000000000000E9C6                 db    0
.eh_frame_hdr:000000000000E9C7                 db    0
.eh_frame_hdr:000000000000E9C8                 db 0DCh
.eh_frame_hdr:000000000000E9C9                 db 0CFh
.eh_frame_hdr:000000000000E9CA                 db 0FFh
.eh_frame_hdr:000000000000E9CB                 db 0FFh
.eh_frame_hdr:000000000000E9CC                 db  4Ch ; L
.eh_frame_hdr:000000000000E9CD                 db  16h
.eh_frame_hdr:000000000000E9CE                 db    0
.eh_frame_hdr:000000000000E9CF                 db    0
.eh_frame_hdr:000000000000E9D0                 db  1Ch
.eh_frame_hdr:000000000000E9D1                 db 0D0h
.eh_frame_hdr:000000000000E9D2                 db 0FFh
.eh_frame_hdr:000000000000E9D3                 db 0FFh
.eh_frame_hdr:000000000000E9D4                 db  6Ch ; l
.eh_frame_hdr:000000000000E9D5                 db  16h
.eh_frame_hdr:000000000000E9D6                 db    0
.eh_frame_hdr:000000000000E9D7                 db    0
.eh_frame_hdr:000000000000E9D8                 db  7Ch ; |
.eh_frame_hdr:000000000000E9D9                 db 0D0h
.eh_frame_hdr:000000000000E9DA                 db 0FFh
.eh_frame_hdr:000000000000E9DB                 db 0FFh
.eh_frame_hdr:000000000000E9DC                 db  9Ch
.eh_frame_hdr:000000000000E9DD                 db  16h
.eh_frame_hdr:000000000000E9DE                 db    0
.eh_frame_hdr:000000000000E9DF                 db    0
.eh_frame_hdr:000000000000E9E0                 db  0Ch
.eh_frame_hdr:000000000000E9E1                 db 0D1h
.eh_frame_hdr:000000000000E9E2                 db 0FFh
.eh_frame_hdr:000000000000E9E3                 db 0FFh
.eh_frame_hdr:000000000000E9E4                 db 0DCh
.eh_frame_hdr:000000000000E9E5                 db  16h
.eh_frame_hdr:000000000000E9E6                 db    0
.eh_frame_hdr:000000000000E9E7                 db    0
.eh_frame_hdr:000000000000E9E8                 db  3Ch ; <
.eh_frame_hdr:000000000000E9E9                 db 0D1h
.eh_frame_hdr:000000000000E9EA                 db 0FFh
.eh_frame_hdr:000000000000E9EB                 db 0FFh
.eh_frame_hdr:000000000000E9EC                 db 0F0h
.eh_frame_hdr:000000000000E9ED                 db  16h
.eh_frame_hdr:000000000000E9EE                 db    0
.eh_frame_hdr:000000000000E9EF                 db    0
.eh_frame_hdr:000000000000E9F0                 db  6Ch ; l
.eh_frame_hdr:000000000000E9F1                 db 0D1h
.eh_frame_hdr:000000000000E9F2                 db 0FFh
.eh_frame_hdr:000000000000E9F3                 db 0FFh
.eh_frame_hdr:000000000000E9F4                 db  0Ch
.eh_frame_hdr:000000000000E9F5                 db  17h
.eh_frame_hdr:000000000000E9F6                 db    0
.eh_frame_hdr:000000000000E9F7                 db    0
.eh_frame_hdr:000000000000E9F8                 db 0CCh
.eh_frame_hdr:000000000000E9F9                 db 0D1h
.eh_frame_hdr:000000000000E9FA                 db 0FFh
.eh_frame_hdr:000000000000E9FB                 db 0FFh
.eh_frame_hdr:000000000000E9FC                 db  48h ; H
.eh_frame_hdr:000000000000E9FD                 db  17h
.eh_frame_hdr:000000000000E9FE                 db    0
.eh_frame_hdr:000000000000E9FF                 db    0
.eh_frame_hdr:000000000000EA00                 db  5Ch ; \
.eh_frame_hdr:000000000000EA01                 db 0D2h
.eh_frame_hdr:000000000000EA02                 db 0FFh
.eh_frame_hdr:000000000000EA03                 db 0FFh
.eh_frame_hdr:000000000000EA04                 db  80h
.eh_frame_hdr:000000000000EA05                 db  17h
.eh_frame_hdr:000000000000EA06                 db    0
.eh_frame_hdr:000000000000EA07                 db    0
.eh_frame_hdr:000000000000EA08                 db  9Ch
.eh_frame_hdr:000000000000EA09                 db 0D3h
.eh_frame_hdr:000000000000EA0A                 db 0FFh
.eh_frame_hdr:000000000000EA0B                 db 0FFh
.eh_frame_hdr:000000000000EA0C                 db 0CCh
.eh_frame_hdr:000000000000EA0D                 db  17h
.eh_frame_hdr:000000000000EA0E                 db    0
.eh_frame_hdr:000000000000EA0F                 db    0
.eh_frame_hdr:000000000000EA10                 db  7Ch ; |
.eh_frame_hdr:000000000000EA11                 db 0D4h
.eh_frame_hdr:000000000000EA12                 db 0FFh
.eh_frame_hdr:000000000000EA13                 db 0FFh
.eh_frame_hdr:000000000000EA14                 db  20h
.eh_frame_hdr:000000000000EA15                 db  18h
.eh_frame_hdr:000000000000EA16                 db    0
.eh_frame_hdr:000000000000EA17                 db    0
.eh_frame_hdr:000000000000EA18                 db  8Ch
.eh_frame_hdr:000000000000EA19                 db 0D4h
.eh_frame_hdr:000000000000EA1A                 db 0FFh
.eh_frame_hdr:000000000000EA1B                 db 0FFh
.eh_frame_hdr:000000000000EA1C                 db  34h ; 4
.eh_frame_hdr:000000000000EA1D                 db  18h
.eh_frame_hdr:000000000000EA1E                 db    0
.eh_frame_hdr:000000000000EA1F                 db    0
.eh_frame_hdr:000000000000EA20                 db  3Ch ; <
.eh_frame_hdr:000000000000EA21                 db 0D5h
.eh_frame_hdr:000000000000EA22                 db 0FFh
.eh_frame_hdr:000000000000EA23                 db 0FFh
.eh_frame_hdr:000000000000EA24                 db  94h
.eh_frame_hdr:000000000000EA25                 db  18h
.eh_frame_hdr:000000000000EA26                 db    0
.eh_frame_hdr:000000000000EA27                 db    0
.eh_frame_hdr:000000000000EA28                 db  8Ch
.eh_frame_hdr:000000000000EA29                 db 0D6h
.eh_frame_hdr:000000000000EA2A                 db 0FFh
.eh_frame_hdr:000000000000EA2B                 db 0FFh
.eh_frame_hdr:000000000000EA2C                 db 0CCh
.eh_frame_hdr:000000000000EA2D                 db  18h
.eh_frame_hdr:000000000000EA2E                 db    0
.eh_frame_hdr:000000000000EA2F                 db    0
.eh_frame_hdr:000000000000EA30                 db  0Ch
.eh_frame_hdr:000000000000EA31                 db 0D7h
.eh_frame_hdr:000000000000EA32                 db 0FFh
.eh_frame_hdr:000000000000EA33                 db 0FFh
.eh_frame_hdr:000000000000EA34                 db  1Ch
.eh_frame_hdr:000000000000EA35                 db  19h
.eh_frame_hdr:000000000000EA36                 db    0
.eh_frame_hdr:000000000000EA37                 db    0
.eh_frame_hdr:000000000000EA38                 db  4Ch ; L
.eh_frame_hdr:000000000000EA39                 db 0D7h
.eh_frame_hdr:000000000000EA3A                 db 0FFh
.eh_frame_hdr:000000000000EA3B                 db 0FFh
.eh_frame_hdr:000000000000EA3C                 db  3Ch ; <
.eh_frame_hdr:000000000000EA3D                 db  19h
.eh_frame_hdr:000000000000EA3E                 db    0
.eh_frame_hdr:000000000000EA3F                 db    0
.eh_frame_hdr:000000000000EA40                 db 0BCh
.eh_frame_hdr:000000000000EA41                 db 0D7h
.eh_frame_hdr:000000000000EA42                 db 0FFh
.eh_frame_hdr:000000000000EA43                 db 0FFh
.eh_frame_hdr:000000000000EA44                 db  84h
.eh_frame_hdr:000000000000EA45                 db  19h
.eh_frame_hdr:000000000000EA46                 db    0
.eh_frame_hdr:000000000000EA47                 db    0
.eh_frame_hdr:000000000000EA48                 db 0CCh
.eh_frame_hdr:000000000000EA49                 db 0D7h
.eh_frame_hdr:000000000000EA4A                 db 0FFh
.eh_frame_hdr:000000000000EA4B                 db 0FFh
.eh_frame_hdr:000000000000EA4C                 db  9Ch
.eh_frame_hdr:000000000000EA4D                 db  19h
.eh_frame_hdr:000000000000EA4E                 db    0
.eh_frame_hdr:000000000000EA4F                 db    0
.eh_frame_hdr:000000000000EA4F _eh_frame_hdr   ends
.eh_frame_hdr:000000000000EA4F
.eh_frame:000000000000EA50 ; ===========================================================================
.eh_frame:000000000000EA50
.eh_frame:000000000000EA50 ; Segment type: Pure data
.eh_frame:000000000000EA50 ; Segment permissions: Read
.eh_frame:000000000000EA50 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000EA50                 assume cs:_eh_frame
.eh_frame:000000000000EA50                 ;org 0EA50h
.eh_frame:000000000000EA50                 db  14h
.eh_frame:000000000000EA51                 db    0
.eh_frame:000000000000EA52                 db    0
.eh_frame:000000000000EA53                 db    0
.eh_frame:000000000000EA54                 db    0
.eh_frame:000000000000EA55                 db    0
.eh_frame:000000000000EA56                 db    0
.eh_frame:000000000000EA57                 db    0
.eh_frame:000000000000EA58                 db    1
.eh_frame:000000000000EA59                 db  7Ah ; z
.eh_frame:000000000000EA5A                 db  52h ; R
.eh_frame:000000000000EA5B                 db    0
.eh_frame:000000000000EA5C                 db    1
.eh_frame:000000000000EA5D                 db  78h ; x
.eh_frame:000000000000EA5E                 db  10h
.eh_frame:000000000000EA5F                 db    1
.eh_frame:000000000000EA60                 db  1Bh
.eh_frame:000000000000EA61                 db  0Ch
.eh_frame:000000000000EA62                 db    7
.eh_frame:000000000000EA63                 db    8
.eh_frame:000000000000EA64                 db  90h
.eh_frame:000000000000EA65                 db    1
.eh_frame:000000000000EA66                 db    7
.eh_frame:000000000000EA67                 db  10h
.eh_frame:000000000000EA68                 db  14h
.eh_frame:000000000000EA69                 db    0
.eh_frame:000000000000EA6A                 db    0
.eh_frame:000000000000EA6B                 db    0
.eh_frame:000000000000EA6C                 db  1Ch
.eh_frame:000000000000EA6D                 db    0
.eh_frame:000000000000EA6E                 db    0
.eh_frame:000000000000EA6F                 db    0
.eh_frame:000000000000EA70                 db 0A0h
.eh_frame:000000000000EA71                 db  3Eh ; >
.eh_frame:000000000000EA72                 db 0FFh
.eh_frame:000000000000EA73                 db 0FFh
.eh_frame:000000000000EA74                 db  2Bh ; +
.eh_frame:000000000000EA75                 db    0
.eh_frame:000000000000EA76                 db    0
.eh_frame:000000000000EA77                 db    0
.eh_frame:000000000000EA78                 db    0
.eh_frame:000000000000EA79                 db    0
.eh_frame:000000000000EA7A                 db    0
.eh_frame:000000000000EA7B                 db    0
.eh_frame:000000000000EA7C                 db    0
.eh_frame:000000000000EA7D                 db    0
.eh_frame:000000000000EA7E                 db    0
.eh_frame:000000000000EA7F                 db    0
.eh_frame:000000000000EA80                 db  14h
.eh_frame:000000000000EA81                 db    0
.eh_frame:000000000000EA82                 db    0
.eh_frame:000000000000EA83                 db    0
.eh_frame:000000000000EA84                 db    0
.eh_frame:000000000000EA85                 db    0
.eh_frame:000000000000EA86                 db    0
.eh_frame:000000000000EA87                 db    0
.eh_frame:000000000000EA88                 db    1
.eh_frame:000000000000EA89                 db  7Ah ; z
.eh_frame:000000000000EA8A                 db  52h ; R
.eh_frame:000000000000EA8B                 db    0
.eh_frame:000000000000EA8C                 db    1
.eh_frame:000000000000EA8D                 db  78h ; x
.eh_frame:000000000000EA8E                 db  10h
.eh_frame:000000000000EA8F                 db    1
.eh_frame:000000000000EA90                 db  1Bh
.eh_frame:000000000000EA91                 db  0Ch
.eh_frame:000000000000EA92                 db    7
.eh_frame:000000000000EA93                 db    8
.eh_frame:000000000000EA94                 db  90h
.eh_frame:000000000000EA95                 db    1
.eh_frame:000000000000EA96                 db    0
.eh_frame:000000000000EA97                 db    0
.eh_frame:000000000000EA98                 db  24h ; $
.eh_frame:000000000000EA99                 db    0
.eh_frame:000000000000EA9A                 db    0
.eh_frame:000000000000EA9B                 db    0
.eh_frame:000000000000EA9C                 db  1Ch
.eh_frame:000000000000EA9D                 db    0
.eh_frame:000000000000EA9E                 db    0
.eh_frame:000000000000EA9F                 db    0
.eh_frame:000000000000EAA0                 db 0B0h
.eh_frame:000000000000EAA1                 db  30h ; 0
.eh_frame:000000000000EAA2                 db 0FFh
.eh_frame:000000000000EAA3                 db 0FFh
.eh_frame:000000000000EAA4                 db  60h ; `
.eh_frame:000000000000EAA5                 db    4
.eh_frame:000000000000EAA6                 db    0
.eh_frame:000000000000EAA7                 db    0
.eh_frame:000000000000EAA8                 db    0
.eh_frame:000000000000EAA9                 db  0Eh
.eh_frame:000000000000EAAA                 db  10h
.eh_frame:000000000000EAAB                 db  46h ; F
.eh_frame:000000000000EAAC                 db  0Eh
.eh_frame:000000000000EAAD                 db  18h
.eh_frame:000000000000EAAE                 db  4Ah ; J
.eh_frame:000000000000EAAF                 db  0Fh
.eh_frame:000000000000EAB0                 db  0Bh
.eh_frame:000000000000EAB1                 db  77h ; w
.eh_frame:000000000000EAB2                 db    8
.eh_frame:000000000000EAB3                 db  80h
.eh_frame:000000000000EAB4                 db    0
.eh_frame:000000000000EAB5                 db  3Fh ; ?
.eh_frame:000000000000EAB6                 db  1Ah
.eh_frame:000000000000EAB7                 db  3Bh ; ;
.eh_frame:000000000000EAB8                 db  2Ah ; *
.eh_frame:000000000000EAB9                 db  33h ; 3
.eh_frame:000000000000EABA                 db  24h ; $
.eh_frame:000000000000EABB                 db  22h ; "
.eh_frame:000000000000EABC                 db    0
.eh_frame:000000000000EABD                 db    0
.eh_frame:000000000000EABE                 db    0
.eh_frame:000000000000EABF                 db    0
.eh_frame:000000000000EAC0                 db  14h
.eh_frame:000000000000EAC1                 db    0
.eh_frame:000000000000EAC2                 db    0
.eh_frame:000000000000EAC3                 db    0
.eh_frame:000000000000EAC4                 db  44h ; D
.eh_frame:000000000000EAC5                 db    0
.eh_frame:000000000000EAC6                 db    0
.eh_frame:000000000000EAC7                 db    0
.eh_frame:000000000000EAC8                 db 0E8h
.eh_frame:000000000000EAC9                 db  34h ; 4
.eh_frame:000000000000EACA                 db 0FFh
.eh_frame:000000000000EACB                 db 0FFh
.eh_frame:000000000000EACC                 db    8
.eh_frame:000000000000EACD                 db    0
.eh_frame:000000000000EACE                 db    0
.eh_frame:000000000000EACF                 db    0
.eh_frame:000000000000EAD0                 db    0
.eh_frame:000000000000EAD1                 db    0
.eh_frame:000000000000EAD2                 db    0
.eh_frame:000000000000EAD3                 db    0
.eh_frame:000000000000EAD4                 db    0
.eh_frame:000000000000EAD5                 db    0
.eh_frame:000000000000EAD6                 db    0
.eh_frame:000000000000EAD7                 db    0
.eh_frame:000000000000EAD8                 db  10h
.eh_frame:000000000000EAD9                 db    0
.eh_frame:000000000000EADA                 db    0
.eh_frame:000000000000EADB                 db    0
.eh_frame:000000000000EADC                 db  5Ch ; \
.eh_frame:000000000000EADD                 db    0
.eh_frame:000000000000EADE                 db    0
.eh_frame:000000000000EADF                 db    0
.eh_frame:000000000000EAE0                 db  40h ; @
.eh_frame:000000000000EAE1                 db  3Fh ; ?
.eh_frame:000000000000EAE2                 db 0FFh
.eh_frame:000000000000EAE3                 db 0FFh
.eh_frame:000000000000EAE4                 db  58h ; X
.eh_frame:000000000000EAE5                 db    0
.eh_frame:000000000000EAE6                 db    0
.eh_frame:000000000000EAE7                 db    0
.eh_frame:000000000000EAE8                 db    0
.eh_frame:000000000000EAE9                 db    0
.eh_frame:000000000000EAEA                 db    0
.eh_frame:000000000000EAEB                 db    0
.eh_frame:000000000000EAEC                 db  10h
.eh_frame:000000000000EAED                 db    0
.eh_frame:000000000000EAEE                 db    0
.eh_frame:000000000000EAEF                 db    0
.eh_frame:000000000000EAF0                 db  70h ; p
.eh_frame:000000000000EAF1                 db    0
.eh_frame:000000000000EAF2                 db    0
.eh_frame:000000000000EAF3                 db    0
.eh_frame:000000000000EAF4                 db  8Ch
.eh_frame:000000000000EAF5                 db  3Fh ; ?
.eh_frame:000000000000EAF6                 db 0FFh
.eh_frame:000000000000EAF7                 db 0FFh
.eh_frame:000000000000EAF8                 db  73h ; s
.eh_frame:000000000000EAF9                 db    0
.eh_frame:000000000000EAFA                 db    0
.eh_frame:000000000000EAFB                 db    0
.eh_frame:000000000000EAFC                 db    0
.eh_frame:000000000000EAFD                 db    0
.eh_frame:000000000000EAFE                 db    0
.eh_frame:000000000000EAFF                 db    0
.eh_frame:000000000000EB00                 db  18h
.eh_frame:000000000000EB01                 db    0
.eh_frame:000000000000EB02                 db    0
.eh_frame:000000000000EB03                 db    0
.eh_frame:000000000000EB04                 db  84h
.eh_frame:000000000000EB05                 db    0
.eh_frame:000000000000EB06                 db    0
.eh_frame:000000000000EB07                 db    0
.eh_frame:000000000000EB08                 db 0F8h
.eh_frame:000000000000EB09                 db  3Fh ; ?
.eh_frame:000000000000EB0A                 db 0FFh
.eh_frame:000000000000EB0B                 db 0FFh
.eh_frame:000000000000EB0C                 db  49h ; I
.eh_frame:000000000000EB0D                 db    0
.eh_frame:000000000000EB0E                 db    0
.eh_frame:000000000000EB0F                 db    0
.eh_frame:000000000000EB10                 db    0
.eh_frame:000000000000EB11                 db  47h ; G
.eh_frame:000000000000EB12                 db  0Eh
.eh_frame:000000000000EB13                 db  10h
.eh_frame:000000000000EB14                 db  83h
.eh_frame:000000000000EB15                 db    2
.eh_frame:000000000000EB16                 db    2
.eh_frame:000000000000EB17                 db  41h ; A
.eh_frame:000000000000EB18                 db  0Eh
.eh_frame:000000000000EB19                 db    8
.eh_frame:000000000000EB1A                 db    0
.eh_frame:000000000000EB1B                 db    0
.eh_frame:000000000000EB1C                 db  10h
.eh_frame:000000000000EB1D                 db    0
.eh_frame:000000000000EB1E                 db    0
.eh_frame:000000000000EB1F                 db    0
.eh_frame:000000000000EB20                 db 0A0h
.eh_frame:000000000000EB21                 db    0
.eh_frame:000000000000EB22                 db    0
.eh_frame:000000000000EB23                 db    0
.eh_frame:000000000000EB24                 db  2Ch ; ,
.eh_frame:000000000000EB25                 db  40h ; @
.eh_frame:000000000000EB26                 db 0FFh
.eh_frame:000000000000EB27                 db 0FFh
.eh_frame:000000000000EB28                 db  28h ; (
.eh_frame:000000000000EB29                 db    0
.eh_frame:000000000000EB2A                 db    0
.eh_frame:000000000000EB2B                 db    0
.eh_frame:000000000000EB2C                 db    0
.eh_frame:000000000000EB2D                 db  52h ; R
.eh_frame:000000000000EB2E                 db  0Eh
.eh_frame:000000000000EB2F                 db  10h
.eh_frame:000000000000EB30                 db  40h ; @
.eh_frame:000000000000EB31                 db    0
.eh_frame:000000000000EB32                 db    0
.eh_frame:000000000000EB33                 db    0
.eh_frame:000000000000EB34                 db 0B4h
.eh_frame:000000000000EB35                 db    0
.eh_frame:000000000000EB36                 db    0
.eh_frame:000000000000EB37                 db    0
.eh_frame:000000000000EB38                 db  48h ; H
.eh_frame:000000000000EB39                 db  40h ; @
.eh_frame:000000000000EB3A                 db 0FFh
.eh_frame:000000000000EB3B                 db 0FFh
.eh_frame:000000000000EB3C                 db  25h ; %
.eh_frame:000000000000EB3D                 db    1
.eh_frame:000000000000EB3E                 db    0
.eh_frame:000000000000EB3F                 db    0
.eh_frame:000000000000EB40                 db    0
.eh_frame:000000000000EB41                 db  42h ; B
.eh_frame:000000000000EB42                 db  0Eh
.eh_frame:000000000000EB43                 db  10h
.eh_frame:000000000000EB44                 db  8Eh
.eh_frame:000000000000EB45                 db    2
.eh_frame:000000000000EB46                 db  42h ; B
.eh_frame:000000000000EB47                 db  0Eh
.eh_frame:000000000000EB48                 db  18h
.eh_frame:000000000000EB49                 db  8Dh
.eh_frame:000000000000EB4A                 db    3
.eh_frame:000000000000EB4B                 db  49h ; I
.eh_frame:000000000000EB4C                 db  0Eh
.eh_frame:000000000000EB4D                 db  20h
.eh_frame:000000000000EB4E                 db  8Ch
.eh_frame:000000000000EB4F                 db    4
.eh_frame:000000000000EB50                 db  41h ; A
.eh_frame:000000000000EB51                 db  0Eh
.eh_frame:000000000000EB52                 db  28h ; (
.eh_frame:000000000000EB53                 db  86h
.eh_frame:000000000000EB54                 db    5
.eh_frame:000000000000EB55                 db  44h ; D
.eh_frame:000000000000EB56                 db  0Eh
.eh_frame:000000000000EB57                 db  30h ; 0
.eh_frame:000000000000EB58                 db  83h
.eh_frame:000000000000EB59                 db    6
.eh_frame:000000000000EB5A                 db  52h ; R
.eh_frame:000000000000EB5B                 db  0Eh
.eh_frame:000000000000EB5C                 db  50h ; P
.eh_frame:000000000000EB5D                 db    2
.eh_frame:000000000000EB5E                 db 0CAh
.eh_frame:000000000000EB5F                 db  0Ah
.eh_frame:000000000000EB60                 db  0Eh
.eh_frame:000000000000EB61                 db  30h ; 0
.eh_frame:000000000000EB62                 db  41h ; A
.eh_frame:000000000000EB63                 db  0Eh
.eh_frame:000000000000EB64                 db  28h ; (
.eh_frame:000000000000EB65                 db  41h ; A
.eh_frame:000000000000EB66                 db  0Eh
.eh_frame:000000000000EB67                 db  20h
.eh_frame:000000000000EB68                 db  42h ; B
.eh_frame:000000000000EB69                 db  0Eh
.eh_frame:000000000000EB6A                 db  18h
.eh_frame:000000000000EB6B                 db  42h ; B
.eh_frame:000000000000EB6C                 db  0Eh
.eh_frame:000000000000EB6D                 db  10h
.eh_frame:000000000000EB6E                 db  42h ; B
.eh_frame:000000000000EB6F                 db  0Eh
.eh_frame:000000000000EB70                 db    8
.eh_frame:000000000000EB71                 db  4Ah ; J
.eh_frame:000000000000EB72                 db  0Bh
.eh_frame:000000000000EB73                 db    0
.eh_frame:000000000000EB74                 db  18h
.eh_frame:000000000000EB75                 db    0
.eh_frame:000000000000EB76                 db    0
.eh_frame:000000000000EB77                 db    0
.eh_frame:000000000000EB78                 db 0F8h
.eh_frame:000000000000EB79                 db    0
.eh_frame:000000000000EB7A                 db    0
.eh_frame:000000000000EB7B                 db    0
.eh_frame:000000000000EB7C                 db  34h ; 4
.eh_frame:000000000000EB7D                 db  41h ; A
.eh_frame:000000000000EB7E                 db 0FFh
.eh_frame:000000000000EB7F                 db 0FFh
.eh_frame:000000000000EB80                 db  25h ; %
.eh_frame:000000000000EB81                 db    0
.eh_frame:000000000000EB82                 db    0
.eh_frame:000000000000EB83                 db    0
.eh_frame:000000000000EB84                 db    0
.eh_frame:000000000000EB85                 db  41h ; A
.eh_frame:000000000000EB86                 db  0Eh
.eh_frame:000000000000EB87                 db  10h
.eh_frame:000000000000EB88                 db  83h
.eh_frame:000000000000EB89                 db    2
.eh_frame:000000000000EB8A                 db  5Eh ; ^
.eh_frame:000000000000EB8B                 db  0Ah
.eh_frame:000000000000EB8C                 db  0Eh
.eh_frame:000000000000EB8D                 db    8
.eh_frame:000000000000EB8E                 db  41h ; A
.eh_frame:000000000000EB8F                 db  0Bh
.eh_frame:000000000000EB90                 db  18h
.eh_frame:000000000000EB91                 db    0
.eh_frame:000000000000EB92                 db    0
.eh_frame:000000000000EB93                 db    0
.eh_frame:000000000000EB94                 db  14h
.eh_frame:000000000000EB95                 db    1
.eh_frame:000000000000EB96                 db    0
.eh_frame:000000000000EB97                 db    0
.eh_frame:000000000000EB98                 db  48h ; H
.eh_frame:000000000000EB99                 db  41h ; A
.eh_frame:000000000000EB9A                 db 0FFh
.eh_frame:000000000000EB9B                 db 0FFh
.eh_frame:000000000000EB9C                 db  45h ; E
.eh_frame:000000000000EB9D                 db    0
.eh_frame:000000000000EB9E                 db    0
.eh_frame:000000000000EB9F                 db    0
.eh_frame:000000000000EBA0                 db    0
.eh_frame:000000000000EBA1                 db  41h ; A
.eh_frame:000000000000EBA2                 db  0Eh
.eh_frame:000000000000EBA3                 db  10h
.eh_frame:000000000000EBA4                 db  83h
.eh_frame:000000000000EBA5                 db    2
.eh_frame:000000000000EBA6                 db    2
.eh_frame:000000000000EBA7                 db  43h ; C
.eh_frame:000000000000EBA8                 db  0Eh
.eh_frame:000000000000EBA9                 db    8
.eh_frame:000000000000EBAA                 db    0
.eh_frame:000000000000EBAB                 db    0
.eh_frame:000000000000EBAC                 db  4Ch ; L
.eh_frame:000000000000EBAD                 db    0
.eh_frame:000000000000EBAE                 db    0
.eh_frame:000000000000EBAF                 db    0
.eh_frame:000000000000EBB0                 db  30h ; 0
.eh_frame:000000000000EBB1                 db    1
.eh_frame:000000000000EBB2                 db    0
.eh_frame:000000000000EBB3                 db    0
.eh_frame:000000000000EBB4                 db  7Ch ; |
.eh_frame:000000000000EBB5                 db  41h ; A
.eh_frame:000000000000EBB6                 db 0FFh
.eh_frame:000000000000EBB7                 db 0FFh
.eh_frame:000000000000EBB8                 db  19h
.eh_frame:000000000000EBB9                 db    2
.eh_frame:000000000000EBBA                 db    0
.eh_frame:000000000000EBBB                 db    0
.eh_frame:000000000000EBBC                 db    0
.eh_frame:000000000000EBBD                 db  42h ; B
.eh_frame:000000000000EBBE                 db  0Eh
.eh_frame:000000000000EBBF                 db  10h
.eh_frame:000000000000EBC0                 db  8Fh
.eh_frame:000000000000EBC1                 db    2
.eh_frame:000000000000EBC2                 db  42h ; B
.eh_frame:000000000000EBC3                 db  0Eh
.eh_frame:000000000000EBC4                 db  18h
.eh_frame:000000000000EBC5                 db  8Eh
.eh_frame:000000000000EBC6                 db    3
.eh_frame:000000000000EBC7                 db  47h ; G
.eh_frame:000000000000EBC8                 db  0Eh
.eh_frame:000000000000EBC9                 db  20h
.eh_frame:000000000000EBCA                 db  8Dh
.eh_frame:000000000000EBCB                 db    4
.eh_frame:000000000000EBCC                 db  42h ; B
.eh_frame:000000000000EBCD                 db  0Eh
.eh_frame:000000000000EBCE                 db  28h ; (
.eh_frame:000000000000EBCF                 db  8Ch
.eh_frame:000000000000EBD0                 db    5
.eh_frame:000000000000EBD1                 db  44h ; D
.eh_frame:000000000000EBD2                 db  0Eh
.eh_frame:000000000000EBD3                 db  30h ; 0
.eh_frame:000000000000EBD4                 db  86h
.eh_frame:000000000000EBD5                 db    6
.eh_frame:000000000000EBD6                 db  41h ; A
.eh_frame:000000000000EBD7                 db  0Eh
.eh_frame:000000000000EBD8                 db  38h ; 8
.eh_frame:000000000000EBD9                 db  83h
.eh_frame:000000000000EBDA                 db    7
.eh_frame:000000000000EBDB                 db  54h ; T
.eh_frame:000000000000EBDC                 db  0Eh
.eh_frame:000000000000EBDD                 db 0C0h
.eh_frame:000000000000EBDE                 db    2
.eh_frame:000000000000EBDF                 db    3
.eh_frame:000000000000EBE0                 db  34h ; 4
.eh_frame:000000000000EBE1                 db    1
.eh_frame:000000000000EBE2                 db  0Ah
.eh_frame:000000000000EBE3                 db  0Eh
.eh_frame:000000000000EBE4                 db  38h ; 8
.eh_frame:000000000000EBE5                 db  41h ; A
.eh_frame:000000000000EBE6                 db  0Eh
.eh_frame:000000000000EBE7                 db  30h ; 0
.eh_frame:000000000000EBE8                 db  41h ; A
.eh_frame:000000000000EBE9                 db  0Eh
.eh_frame:000000000000EBEA                 db  28h ; (
.eh_frame:000000000000EBEB                 db  42h ; B
.eh_frame:000000000000EBEC                 db  0Eh
.eh_frame:000000000000EBED                 db  20h
.eh_frame:000000000000EBEE                 db  42h ; B
.eh_frame:000000000000EBEF                 db  0Eh
.eh_frame:000000000000EBF0                 db  18h
.eh_frame:000000000000EBF1                 db  42h ; B
.eh_frame:000000000000EBF2                 db  0Eh
.eh_frame:000000000000EBF3                 db  10h
.eh_frame:000000000000EBF4                 db  42h ; B
.eh_frame:000000000000EBF5                 db  0Eh
.eh_frame:000000000000EBF6                 db    8
.eh_frame:000000000000EBF7                 db  44h ; D
.eh_frame:000000000000EBF8                 db  0Bh
.eh_frame:000000000000EBF9                 db    0
.eh_frame:000000000000EBFA                 db    0
.eh_frame:000000000000EBFB                 db    0
.eh_frame:000000000000EBFC                 db  34h ; 4
.eh_frame:000000000000EBFD                 db    0
.eh_frame:000000000000EBFE                 db    0
.eh_frame:000000000000EBFF                 db    0
.eh_frame:000000000000EC00                 db  80h
.eh_frame:000000000000EC01                 db    1
.eh_frame:000000000000EC02                 db    0
.eh_frame:000000000000EC03                 db    0
.eh_frame:000000000000EC04                 db  4Ch ; L
.eh_frame:000000000000EC05                 db  43h ; C
.eh_frame:000000000000EC06                 db 0FFh
.eh_frame:000000000000EC07                 db 0FFh
.eh_frame:000000000000EC08                 db  6Ch ; l
.eh_frame:000000000000EC09                 db    0
.eh_frame:000000000000EC0A                 db    0
.eh_frame:000000000000EC0B                 db    0
.eh_frame:000000000000EC0C                 db    0
.eh_frame:000000000000EC0D                 db  41h ; A
.eh_frame:000000000000EC0E                 db  0Eh
.eh_frame:000000000000EC0F                 db  10h
.eh_frame:000000000000EC10                 db  86h
.eh_frame:000000000000EC11                 db    2
.eh_frame:000000000000EC12                 db  41h ; A
.eh_frame:000000000000EC13                 db  0Eh
.eh_frame:000000000000EC14                 db  18h
.eh_frame:000000000000EC15                 db  83h
.eh_frame:000000000000EC16                 db    3
.eh_frame:000000000000EC17                 db  46h ; F
.eh_frame:000000000000EC18                 db  0Eh
.eh_frame:000000000000EC19                 db  20h
.eh_frame:000000000000EC1A                 db    2
.eh_frame:000000000000EC1B                 db  43h ; C
.eh_frame:000000000000EC1C                 db  0Ah
.eh_frame:000000000000EC1D                 db  0Eh
.eh_frame:000000000000EC1E                 db  18h
.eh_frame:000000000000EC1F                 db  41h ; A
.eh_frame:000000000000EC20                 db  0Eh
.eh_frame:000000000000EC21                 db  10h
.eh_frame:000000000000EC22                 db  41h ; A
.eh_frame:000000000000EC23                 db  0Eh
.eh_frame:000000000000EC24                 db    8
.eh_frame:000000000000EC25                 db  43h ; C
.eh_frame:000000000000EC26                 db  0Bh
.eh_frame:000000000000EC27                 db  4Ch ; L
.eh_frame:000000000000EC28                 db  0Ah
.eh_frame:000000000000EC29                 db  0Eh
.eh_frame:000000000000EC2A                 db  18h
.eh_frame:000000000000EC2B                 db  41h ; A
.eh_frame:000000000000EC2C                 db  0Eh
.eh_frame:000000000000EC2D                 db  10h
.eh_frame:000000000000EC2E                 db  41h ; A
.eh_frame:000000000000EC2F                 db  0Eh
.eh_frame:000000000000EC30                 db    8
.eh_frame:000000000000EC31                 db  42h ; B
.eh_frame:000000000000EC32                 db  0Bh
.eh_frame:000000000000EC33                 db    0
.eh_frame:000000000000EC34                 db  2Ch ; ,
.eh_frame:000000000000EC35                 db    0
.eh_frame:000000000000EC36                 db    0
.eh_frame:000000000000EC37                 db    0
.eh_frame:000000000000EC38                 db 0B8h
.eh_frame:000000000000EC39                 db    1
.eh_frame:000000000000EC3A                 db    0
.eh_frame:000000000000EC3B                 db    0
.eh_frame:000000000000EC3C                 db  84h
.eh_frame:000000000000EC3D                 db  43h ; C
.eh_frame:000000000000EC3E                 db 0FFh
.eh_frame:000000000000EC3F                 db 0FFh
.eh_frame:000000000000EC40                 db 0CCh
.eh_frame:000000000000EC41                 db    0
.eh_frame:000000000000EC42                 db    0
.eh_frame:000000000000EC43                 db    0
.eh_frame:000000000000EC44                 db    0
.eh_frame:000000000000EC45                 db  42h ; B
.eh_frame:000000000000EC46                 db  0Eh
.eh_frame:000000000000EC47                 db  10h
.eh_frame:000000000000EC48                 db  8Ch
.eh_frame:000000000000EC49                 db    2
.eh_frame:000000000000EC4A                 db  48h ; H
.eh_frame:000000000000EC4B                 db  0Eh
.eh_frame:000000000000EC4C                 db  18h
.eh_frame:000000000000EC4D                 db  86h
.eh_frame:000000000000EC4E                 db    3
.eh_frame:000000000000EC4F                 db  47h ; G
.eh_frame:000000000000EC50                 db  0Eh
.eh_frame:000000000000EC51                 db  20h
.eh_frame:000000000000EC52                 db  83h
.eh_frame:000000000000EC53                 db    4
.eh_frame:000000000000EC54                 db    2
.eh_frame:000000000000EC55                 db  80h
.eh_frame:000000000000EC56                 db  0Ah
.eh_frame:000000000000EC57                 db  0Eh
.eh_frame:000000000000EC58                 db  18h
.eh_frame:000000000000EC59                 db  52h ; R
.eh_frame:000000000000EC5A                 db  0Eh
.eh_frame:000000000000EC5B                 db  10h
.eh_frame:000000000000EC5C                 db  42h ; B
.eh_frame:000000000000EC5D                 db  0Eh
.eh_frame:000000000000EC5E                 db    8
.eh_frame:000000000000EC5F                 db  4Bh ; K
.eh_frame:000000000000EC60                 db  0Bh
.eh_frame:000000000000EC61                 db    0
.eh_frame:000000000000EC62                 db    0
.eh_frame:000000000000EC63                 db    0
.eh_frame:000000000000EC64                 db  3Ch ; <
.eh_frame:000000000000EC65                 db    0
.eh_frame:000000000000EC66                 db    0
.eh_frame:000000000000EC67                 db    0
.eh_frame:000000000000EC68                 db 0E8h
.eh_frame:000000000000EC69                 db    1
.eh_frame:000000000000EC6A                 db    0
.eh_frame:000000000000EC6B                 db    0
.eh_frame:000000000000EC6C                 db  24h ; $
.eh_frame:000000000000EC6D                 db  44h ; D
.eh_frame:000000000000EC6E                 db 0FFh
.eh_frame:000000000000EC6F                 db 0FFh
.eh_frame:000000000000EC70                 db  0Bh
.eh_frame:000000000000EC71                 db    1
.eh_frame:000000000000EC72                 db    0
.eh_frame:000000000000EC73                 db    0
.eh_frame:000000000000EC74                 db    0
.eh_frame:000000000000EC75                 db  56h ; V
.eh_frame:000000000000EC76                 db  0Eh
.eh_frame:000000000000EC77                 db  10h
.eh_frame:000000000000EC78                 db  8Eh
.eh_frame:000000000000EC79                 db    2
.eh_frame:000000000000EC7A                 db  42h ; B
.eh_frame:000000000000EC7B                 db  0Eh
.eh_frame:000000000000EC7C                 db  18h
.eh_frame:000000000000EC7D                 db  8Dh
.eh_frame:000000000000EC7E                 db    3
.eh_frame:000000000000EC7F                 db  45h ; E
.eh_frame:000000000000EC80                 db  0Eh
.eh_frame:000000000000EC81                 db  20h
.eh_frame:000000000000EC82                 db  8Ch
.eh_frame:000000000000EC83                 db    4
.eh_frame:000000000000EC84                 db  48h ; H
.eh_frame:000000000000EC85                 db  0Eh
.eh_frame:000000000000EC86                 db  28h ; (
.eh_frame:000000000000EC87                 db  86h
.eh_frame:000000000000EC88                 db    5
.eh_frame:000000000000EC89                 db  47h ; G
.eh_frame:000000000000EC8A                 db  0Eh
.eh_frame:000000000000EC8B                 db  30h ; 0
.eh_frame:000000000000EC8C                 db  83h
.eh_frame:000000000000EC8D                 db    6
.eh_frame:000000000000EC8E                 db    2
.eh_frame:000000000000EC8F                 db 0C5h
.eh_frame:000000000000EC90                 db  0Eh
.eh_frame:000000000000EC91                 db  28h ; (
.eh_frame:000000000000EC92                 db  41h ; A
.eh_frame:000000000000EC93                 db  0Eh
.eh_frame:000000000000EC94                 db  20h
.eh_frame:000000000000EC95                 db  42h ; B
.eh_frame:000000000000EC96                 db  0Eh
.eh_frame:000000000000EC97                 db  18h
.eh_frame:000000000000EC98                 db  42h ; B
.eh_frame:000000000000EC99                 db  0Eh
.eh_frame:000000000000EC9A                 db  10h
.eh_frame:000000000000EC9B                 db  42h ; B
.eh_frame:000000000000EC9C                 db  0Eh
.eh_frame:000000000000EC9D                 db    8
.eh_frame:000000000000EC9E                 db  48h ; H
.eh_frame:000000000000EC9F                 db 0C3h
.eh_frame:000000000000ECA0                 db 0C6h
.eh_frame:000000000000ECA1                 db 0CCh
.eh_frame:000000000000ECA2                 db 0CDh
.eh_frame:000000000000ECA3                 db 0CEh
.eh_frame:000000000000ECA4                 db  44h ; D
.eh_frame:000000000000ECA5                 db    0
.eh_frame:000000000000ECA6                 db    0
.eh_frame:000000000000ECA7                 db    0
.eh_frame:000000000000ECA8                 db  28h ; (
.eh_frame:000000000000ECA9                 db    2
.eh_frame:000000000000ECAA                 db    0
.eh_frame:000000000000ECAB                 db    0
.eh_frame:000000000000ECAC                 db 0F4h
.eh_frame:000000000000ECAD                 db  44h ; D
.eh_frame:000000000000ECAE                 db 0FFh
.eh_frame:000000000000ECAF                 db 0FFh
.eh_frame:000000000000ECB0                 db  2Bh ; +
.eh_frame:000000000000ECB1                 db    1
.eh_frame:000000000000ECB2                 db    0
.eh_frame:000000000000ECB3                 db    0
.eh_frame:000000000000ECB4                 db    0
.eh_frame:000000000000ECB5                 db  41h ; A
.eh_frame:000000000000ECB6                 db  0Eh
.eh_frame:000000000000ECB7                 db  10h
.eh_frame:000000000000ECB8                 db  86h
.eh_frame:000000000000ECB9                 db    2
.eh_frame:000000000000ECBA                 db  41h ; A
.eh_frame:000000000000ECBB                 db  0Eh
.eh_frame:000000000000ECBC                 db  18h
.eh_frame:000000000000ECBD                 db  83h
.eh_frame:000000000000ECBE                 db    3
.eh_frame:000000000000ECBF                 db  47h ; G
.eh_frame:000000000000ECC0                 db  0Eh
.eh_frame:000000000000ECC1                 db 0C0h
.eh_frame:000000000000ECC2                 db    2
.eh_frame:000000000000ECC3                 db    2
.eh_frame:000000000000ECC4                 db 0ADh
.eh_frame:000000000000ECC5                 db  0Eh
.eh_frame:000000000000ECC6                 db 0C8h
.eh_frame:000000000000ECC7                 db    2
.eh_frame:000000000000ECC8                 db  44h ; D
.eh_frame:000000000000ECC9                 db  0Eh
.eh_frame:000000000000ECCA                 db 0D0h
.eh_frame:000000000000ECCB                 db    2
.eh_frame:000000000000ECCC                 db  49h ; I
.eh_frame:000000000000ECCD                 db  0Eh
.eh_frame:000000000000ECCE                 db 0D8h
.eh_frame:000000000000ECCF                 db    2
.eh_frame:000000000000ECD0                 db  44h ; D
.eh_frame:000000000000ECD1                 db  0Eh
.eh_frame:000000000000ECD2                 db 0E0h
.eh_frame:000000000000ECD3                 db    2
.eh_frame:000000000000ECD4                 db  46h ; F
.eh_frame:000000000000ECD5                 db  0Eh
.eh_frame:000000000000ECD6                 db 0E8h
.eh_frame:000000000000ECD7                 db    2
.eh_frame:000000000000ECD8                 db  41h ; A
.eh_frame:000000000000ECD9                 db  0Eh
.eh_frame:000000000000ECDA                 db 0F0h
.eh_frame:000000000000ECDB                 db    2
.eh_frame:000000000000ECDC                 db  4Bh ; K
.eh_frame:000000000000ECDD                 db  0Eh
.eh_frame:000000000000ECDE                 db 0C0h
.eh_frame:000000000000ECDF                 db    2
.eh_frame:000000000000ECE0                 db  6Bh ; k
.eh_frame:000000000000ECE1                 db  0Ah
.eh_frame:000000000000ECE2                 db  0Eh
.eh_frame:000000000000ECE3                 db  18h
.eh_frame:000000000000ECE4                 db  41h ; A
.eh_frame:000000000000ECE5                 db  0Eh
.eh_frame:000000000000ECE6                 db  10h
.eh_frame:000000000000ECE7                 db  41h ; A
.eh_frame:000000000000ECE8                 db  0Eh
.eh_frame:000000000000ECE9                 db    8
.eh_frame:000000000000ECEA                 db  41h ; A
.eh_frame:000000000000ECEB                 db  0Bh
.eh_frame:000000000000ECEC                 db  30h ; 0
.eh_frame:000000000000ECED                 db    0
.eh_frame:000000000000ECEE                 db    0
.eh_frame:000000000000ECEF                 db    0
.eh_frame:000000000000ECF0                 db  70h ; p
.eh_frame:000000000000ECF1                 db    2
.eh_frame:000000000000ECF2                 db    0
.eh_frame:000000000000ECF3                 db    0
.eh_frame:000000000000ECF4                 db 0DCh
.eh_frame:000000000000ECF5                 db  45h ; E
.eh_frame:000000000000ECF6                 db 0FFh
.eh_frame:000000000000ECF7                 db 0FFh
.eh_frame:000000000000ECF8                 db  0Ch
.eh_frame:000000000000ECF9                 db    2
.eh_frame:000000000000ECFA                 db    0
.eh_frame:000000000000ECFB                 db    0
.eh_frame:000000000000ECFC                 db    0
.eh_frame:000000000000ECFD                 db  42h ; B
.eh_frame:000000000000ECFE                 db  0Eh
.eh_frame:000000000000ECFF                 db  10h
.eh_frame:000000000000ED00                 db  8Ch
.eh_frame:000000000000ED01                 db    2
.eh_frame:000000000000ED02                 db  41h ; A
.eh_frame:000000000000ED03                 db  0Eh
.eh_frame:000000000000ED04                 db  18h
.eh_frame:000000000000ED05                 db  86h
.eh_frame:000000000000ED06                 db    3
.eh_frame:000000000000ED07                 db  43h ; C
.eh_frame:000000000000ED08                 db  0Eh
.eh_frame:000000000000ED09                 db  20h
.eh_frame:000000000000ED0A                 db  83h
.eh_frame:000000000000ED0B                 db    4
.eh_frame:000000000000ED0C                 db  44h ; D
.eh_frame:000000000000ED0D                 db  0Eh
.eh_frame:000000000000ED0E                 db  30h ; 0
.eh_frame:000000000000ED0F                 db    2
.eh_frame:000000000000ED10                 db 0D6h
.eh_frame:000000000000ED11                 db  0Ah
.eh_frame:000000000000ED12                 db  0Eh
.eh_frame:000000000000ED13                 db  20h
.eh_frame:000000000000ED14                 db  41h ; A
.eh_frame:000000000000ED15                 db  0Eh
.eh_frame:000000000000ED16                 db  18h
.eh_frame:000000000000ED17                 db  41h ; A
.eh_frame:000000000000ED18                 db  0Eh
.eh_frame:000000000000ED19                 db  10h
.eh_frame:000000000000ED1A                 db  42h ; B
.eh_frame:000000000000ED1B                 db  0Eh
.eh_frame:000000000000ED1C                 db    8
.eh_frame:000000000000ED1D                 db  44h ; D
.eh_frame:000000000000ED1E                 db  0Bh
.eh_frame:000000000000ED1F                 db    0
.eh_frame:000000000000ED20                 db  3Ch ; <
.eh_frame:000000000000ED21                 db    0
.eh_frame:000000000000ED22                 db    0
.eh_frame:000000000000ED23                 db    0
.eh_frame:000000000000ED24                 db 0A4h
.eh_frame:000000000000ED25                 db    2
.eh_frame:000000000000ED26                 db    0
.eh_frame:000000000000ED27                 db    0
.eh_frame:000000000000ED28                 db 0B8h
.eh_frame:000000000000ED29                 db  47h ; G
.eh_frame:000000000000ED2A                 db 0FFh
.eh_frame:000000000000ED2B                 db 0FFh
.eh_frame:000000000000ED2C                 db 0AEh
.eh_frame:000000000000ED2D                 db    0
.eh_frame:000000000000ED2E                 db    0
.eh_frame:000000000000ED2F                 db    0
.eh_frame:000000000000ED30                 db    0
.eh_frame:000000000000ED31                 db  41h ; A
.eh_frame:000000000000ED32                 db  0Eh
.eh_frame:000000000000ED33                 db  10h
.eh_frame:000000000000ED34                 db  86h
.eh_frame:000000000000ED35                 db    2
.eh_frame:000000000000ED36                 db  41h ; A
.eh_frame:000000000000ED37                 db  0Eh
.eh_frame:000000000000ED38                 db  18h
.eh_frame:000000000000ED39                 db  83h
.eh_frame:000000000000ED3A                 db    3
.eh_frame:000000000000ED3B                 db  46h ; F
.eh_frame:000000000000ED3C                 db  0Eh
.eh_frame:000000000000ED3D                 db  20h
.eh_frame:000000000000ED3E                 db    2
.eh_frame:000000000000ED3F                 db  57h ; W
.eh_frame:000000000000ED40                 db  0Ah
.eh_frame:000000000000ED41                 db  0Eh
.eh_frame:000000000000ED42                 db  18h
.eh_frame:000000000000ED43                 db  41h ; A
.eh_frame:000000000000ED44                 db  0Eh
.eh_frame:000000000000ED45                 db  10h
.eh_frame:000000000000ED46                 db  41h ; A
.eh_frame:000000000000ED47                 db  0Eh
.eh_frame:000000000000ED48                 db    8
.eh_frame:000000000000ED49                 db  47h ; G
.eh_frame:000000000000ED4A                 db  0Bh
.eh_frame:000000000000ED4B                 db  75h ; u
.eh_frame:000000000000ED4C                 db  0Ah
.eh_frame:000000000000ED4D                 db  0Eh
.eh_frame:000000000000ED4E                 db  18h
.eh_frame:000000000000ED4F                 db  41h ; A
.eh_frame:000000000000ED50                 db  0Eh
.eh_frame:000000000000ED51                 db  10h
.eh_frame:000000000000ED52                 db  41h ; A
.eh_frame:000000000000ED53                 db  0Eh
.eh_frame:000000000000ED54                 db    8
.eh_frame:000000000000ED55                 db  41h ; A
.eh_frame:000000000000ED56                 db  0Bh
.eh_frame:000000000000ED57                 db  44h ; D
.eh_frame:000000000000ED58                 db  0Eh
.eh_frame:000000000000ED59                 db  18h
.eh_frame:000000000000ED5A                 db  44h ; D
.eh_frame:000000000000ED5B                 db  0Eh
.eh_frame:000000000000ED5C                 db  10h
.eh_frame:000000000000ED5D                 db  41h ; A
.eh_frame:000000000000ED5E                 db  0Eh
.eh_frame:000000000000ED5F                 db    8
.eh_frame:000000000000ED60                 db  48h ; H
.eh_frame:000000000000ED61                 db    0
.eh_frame:000000000000ED62                 db    0
.eh_frame:000000000000ED63                 db    0
.eh_frame:000000000000ED64                 db 0E4h
.eh_frame:000000000000ED65                 db    2
.eh_frame:000000000000ED66                 db    0
.eh_frame:000000000000ED67                 db    0
.eh_frame:000000000000ED68                 db  28h ; (
.eh_frame:000000000000ED69                 db  48h ; H
.eh_frame:000000000000ED6A                 db 0FFh
.eh_frame:000000000000ED6B                 db 0FFh
.eh_frame:000000000000ED6C                 db  88h
.eh_frame:000000000000ED6D                 db    1
.eh_frame:000000000000ED6E                 db    0
.eh_frame:000000000000ED6F                 db    0
.eh_frame:000000000000ED70                 db    0
.eh_frame:000000000000ED71                 db  42h ; B
.eh_frame:000000000000ED72                 db  0Eh
.eh_frame:000000000000ED73                 db  10h
.eh_frame:000000000000ED74                 db  8Dh
.eh_frame:000000000000ED75                 db    2
.eh_frame:000000000000ED76                 db  42h ; B
.eh_frame:000000000000ED77                 db  0Eh
.eh_frame:000000000000ED78                 db  18h
.eh_frame:000000000000ED79                 db  8Ch
.eh_frame:000000000000ED7A                 db    3
.eh_frame:000000000000ED7B                 db  44h ; D
.eh_frame:000000000000ED7C                 db  0Eh
.eh_frame:000000000000ED7D                 db  20h
.eh_frame:000000000000ED7E                 db  86h
.eh_frame:000000000000ED7F                 db    4
.eh_frame:000000000000ED80                 db  41h ; A
.eh_frame:000000000000ED81                 db  0Eh
.eh_frame:000000000000ED82                 db  28h ; (
.eh_frame:000000000000ED83                 db  83h
.eh_frame:000000000000ED84                 db    5
.eh_frame:000000000000ED85                 db  44h ; D
.eh_frame:000000000000ED86                 db  0Eh
.eh_frame:000000000000ED87                 db  30h ; 0
.eh_frame:000000000000ED88                 db    2
.eh_frame:000000000000ED89                 db 0C0h
.eh_frame:000000000000ED8A                 db  0Ah
.eh_frame:000000000000ED8B                 db  0Eh
.eh_frame:000000000000ED8C                 db  28h ; (
.eh_frame:000000000000ED8D                 db  46h ; F
.eh_frame:000000000000ED8E                 db  0Eh
.eh_frame:000000000000ED8F                 db  20h
.eh_frame:000000000000ED90                 db  41h ; A
.eh_frame:000000000000ED91                 db  0Eh
.eh_frame:000000000000ED92                 db  18h
.eh_frame:000000000000ED93                 db  42h ; B
.eh_frame:000000000000ED94                 db  0Eh
.eh_frame:000000000000ED95                 db  10h
.eh_frame:000000000000ED96                 db  42h ; B
.eh_frame:000000000000ED97                 db  0Eh
.eh_frame:000000000000ED98                 db    8
.eh_frame:000000000000ED99                 db  48h ; H
.eh_frame:000000000000ED9A                 db  0Bh
.eh_frame:000000000000ED9B                 db    2
.eh_frame:000000000000ED9C                 db 0A1h
.eh_frame:000000000000ED9D                 db  0Eh
.eh_frame:000000000000ED9E                 db  28h ; (
.eh_frame:000000000000ED9F                 db  41h ; A
.eh_frame:000000000000EDA0                 db  0Eh
.eh_frame:000000000000EDA1                 db  20h
.eh_frame:000000000000EDA2                 db  41h ; A
.eh_frame:000000000000EDA3                 db  0Eh
.eh_frame:000000000000EDA4                 db  18h
.eh_frame:000000000000EDA5                 db  42h ; B
.eh_frame:000000000000EDA6                 db  0Eh
.eh_frame:000000000000EDA7                 db  10h
.eh_frame:000000000000EDA8                 db  42h ; B
.eh_frame:000000000000EDA9                 db  0Eh
.eh_frame:000000000000EDAA                 db    8
.eh_frame:000000000000EDAB                 db    0
.eh_frame:000000000000EDAC                 db  10h
.eh_frame:000000000000EDAD                 db    0
.eh_frame:000000000000EDAE                 db    0
.eh_frame:000000000000EDAF                 db    0
.eh_frame:000000000000EDB0                 db  30h ; 0
.eh_frame:000000000000EDB1                 db    3
.eh_frame:000000000000EDB2                 db    0
.eh_frame:000000000000EDB3                 db    0
.eh_frame:000000000000EDB4                 db  6Ch ; l
.eh_frame:000000000000EDB5                 db  49h ; I
.eh_frame:000000000000EDB6                 db 0FFh
.eh_frame:000000000000EDB7                 db 0FFh
.eh_frame:000000000000EDB8                 db  84h
.eh_frame:000000000000EDB9                 db    0
.eh_frame:000000000000EDBA                 db    0
.eh_frame:000000000000EDBB                 db    0
.eh_frame:000000000000EDBC                 db    0
.eh_frame:000000000000EDBD                 db    0
.eh_frame:000000000000EDBE                 db    0
.eh_frame:000000000000EDBF                 db    0
.eh_frame:000000000000EDC0                 db  2Ch ; ,
.eh_frame:000000000000EDC1                 db    0
.eh_frame:000000000000EDC2                 db    0
.eh_frame:000000000000EDC3                 db    0
.eh_frame:000000000000EDC4                 db  44h ; D
.eh_frame:000000000000EDC5                 db    3
.eh_frame:000000000000EDC6                 db    0
.eh_frame:000000000000EDC7                 db    0
.eh_frame:000000000000EDC8                 db 0E8h
.eh_frame:000000000000EDC9                 db  49h ; I
.eh_frame:000000000000EDCA                 db 0FFh
.eh_frame:000000000000EDCB                 db 0FFh
.eh_frame:000000000000EDCC                 db    2
.eh_frame:000000000000EDCD                 db    1
.eh_frame:000000000000EDCE                 db    0
.eh_frame:000000000000EDCF                 db    0
.eh_frame:000000000000EDD0                 db    0
.eh_frame:000000000000EDD1                 db  42h ; B
.eh_frame:000000000000EDD2                 db  0Eh
.eh_frame:000000000000EDD3                 db  10h
.eh_frame:000000000000EDD4                 db  8Ch
.eh_frame:000000000000EDD5                 db    2
.eh_frame:000000000000EDD6                 db  4Fh ; O
.eh_frame:000000000000EDD7                 db  0Eh
.eh_frame:000000000000EDD8                 db  18h
.eh_frame:000000000000EDD9                 db  86h
.eh_frame:000000000000EDDA                 db    3
.eh_frame:000000000000EDDB                 db  52h ; R
.eh_frame:000000000000EDDC                 db  0Eh
.eh_frame:000000000000EDDD                 db  20h
.eh_frame:000000000000EDDE                 db  83h
.eh_frame:000000000000EDDF                 db    4
.eh_frame:000000000000EDE0                 db    2
.eh_frame:000000000000EDE1                 db 0A3h
.eh_frame:000000000000EDE2                 db  0Ah
.eh_frame:000000000000EDE3                 db  0Eh
.eh_frame:000000000000EDE4                 db  18h
.eh_frame:000000000000EDE5                 db  41h ; A
.eh_frame:000000000000EDE6                 db  0Eh
.eh_frame:000000000000EDE7                 db  10h
.eh_frame:000000000000EDE8                 db  42h ; B
.eh_frame:000000000000EDE9                 db  0Eh
.eh_frame:000000000000EDEA                 db    8
.eh_frame:000000000000EDEB                 db  47h ; G
.eh_frame:000000000000EDEC                 db  0Bh
.eh_frame:000000000000EDED                 db    0
.eh_frame:000000000000EDEE                 db    0
.eh_frame:000000000000EDEF                 db    0
.eh_frame:000000000000EDF0                 db  20h
.eh_frame:000000000000EDF1                 db    0
.eh_frame:000000000000EDF2                 db    0
.eh_frame:000000000000EDF3                 db    0
.eh_frame:000000000000EDF4                 db  74h ; t
.eh_frame:000000000000EDF5                 db    3
.eh_frame:000000000000EDF6                 db    0
.eh_frame:000000000000EDF7                 db    0
.eh_frame:000000000000EDF8                 db 0C8h
.eh_frame:000000000000EDF9                 db  4Ah ; J
.eh_frame:000000000000EDFA                 db 0FFh
.eh_frame:000000000000EDFB                 db 0FFh
.eh_frame:000000000000EDFC                 db  63h ; c
.eh_frame:000000000000EDFD                 db    0
.eh_frame:000000000000EDFE                 db    0
.eh_frame:000000000000EDFF                 db    0
.eh_frame:000000000000EE00                 db    0
.eh_frame:000000000000EE01                 db  41h ; A
.eh_frame:000000000000EE02                 db  0Eh
.eh_frame:000000000000EE03                 db  10h
.eh_frame:000000000000EE04                 db  83h
.eh_frame:000000000000EE05                 db    2
.eh_frame:000000000000EE06                 db  66h ; f
.eh_frame:000000000000EE07                 db  0Ah
.eh_frame:000000000000EE08                 db  0Eh
.eh_frame:000000000000EE09                 db    8
.eh_frame:000000000000EE0A                 db  49h ; I
.eh_frame:000000000000EE0B                 db  0Bh
.eh_frame:000000000000EE0C                 db  45h ; E
.eh_frame:000000000000EE0D                 db  0Ah
.eh_frame:000000000000EE0E                 db  0Eh
.eh_frame:000000000000EE0F                 db    8
.eh_frame:000000000000EE10                 db  4Bh ; K
.eh_frame:000000000000EE11                 db  0Bh
.eh_frame:000000000000EE12                 db    0
.eh_frame:000000000000EE13                 db    0
.eh_frame:000000000000EE14                 db  20h
.eh_frame:000000000000EE15                 db    0
.eh_frame:000000000000EE16                 db    0
.eh_frame:000000000000EE17                 db    0
.eh_frame:000000000000EE18                 db  98h
.eh_frame:000000000000EE19                 db    3
.eh_frame:000000000000EE1A                 db    0
.eh_frame:000000000000EE1B                 db    0
.eh_frame:000000000000EE1C                 db  14h
.eh_frame:000000000000EE1D                 db  4Bh ; K
.eh_frame:000000000000EE1E                 db 0FFh
.eh_frame:000000000000EE1F                 db 0FFh
.eh_frame:000000000000EE20                 db    0
.eh_frame:000000000000EE21                 db    1
.eh_frame:000000000000EE22                 db    0
.eh_frame:000000000000EE23                 db    0
.eh_frame:000000000000EE24                 db    0
.eh_frame:000000000000EE25                 db  41h ; A
.eh_frame:000000000000EE26                 db  0Eh
.eh_frame:000000000000EE27                 db  10h
.eh_frame:000000000000EE28                 db  83h
.eh_frame:000000000000EE29                 db    2
.eh_frame:000000000000EE2A                 db    2
.eh_frame:000000000000EE2B                 db  6Ch ; l
.eh_frame:000000000000EE2C                 db  0Ah
.eh_frame:000000000000EE2D                 db  0Eh
.eh_frame:000000000000EE2E                 db    8
.eh_frame:000000000000EE2F                 db  43h ; C
.eh_frame:000000000000EE30                 db  0Bh
.eh_frame:000000000000EE31                 db  56h ; V
.eh_frame:000000000000EE32                 db  0Ah
.eh_frame:000000000000EE33                 db  0Eh
.eh_frame:000000000000EE34                 db    8
.eh_frame:000000000000EE35                 db  4Ah ; J
.eh_frame:000000000000EE36                 db  0Bh
.eh_frame:000000000000EE37                 db    0
.eh_frame:000000000000EE38                 db  38h ; 8
.eh_frame:000000000000EE39                 db    0
.eh_frame:000000000000EE3A                 db    0
.eh_frame:000000000000EE3B                 db    0
.eh_frame:000000000000EE3C                 db 0BCh
.eh_frame:000000000000EE3D                 db    3
.eh_frame:000000000000EE3E                 db    0
.eh_frame:000000000000EE3F                 db    0
.eh_frame:000000000000EE40                 db 0F0h
.eh_frame:000000000000EE41                 db  4Bh ; K
.eh_frame:000000000000EE42                 db 0FFh
.eh_frame:000000000000EE43                 db 0FFh
.eh_frame:000000000000EE44                 db  4Dh ; M
.eh_frame:000000000000EE45                 db    2
.eh_frame:000000000000EE46                 db    0
.eh_frame:000000000000EE47                 db    0
.eh_frame:000000000000EE48                 db    0
.eh_frame:000000000000EE49                 db  42h ; B
.eh_frame:000000000000EE4A                 db  0Eh
.eh_frame:000000000000EE4B                 db  10h
.eh_frame:000000000000EE4C                 db  8Dh
.eh_frame:000000000000EE4D                 db    2
.eh_frame:000000000000EE4E                 db  42h ; B
.eh_frame:000000000000EE4F                 db  0Eh
.eh_frame:000000000000EE50                 db  18h
.eh_frame:000000000000EE51                 db  8Ch
.eh_frame:000000000000EE52                 db    3
.eh_frame:000000000000EE53                 db  44h ; D
.eh_frame:000000000000EE54                 db  0Eh
.eh_frame:000000000000EE55                 db  20h
.eh_frame:000000000000EE56                 db  86h
.eh_frame:000000000000EE57                 db    4
.eh_frame:000000000000EE58                 db  41h ; A
.eh_frame:000000000000EE59                 db  0Eh
.eh_frame:000000000000EE5A                 db  28h ; (
.eh_frame:000000000000EE5B                 db  83h
.eh_frame:000000000000EE5C                 db    5
.eh_frame:000000000000EE5D                 db  47h ; G
.eh_frame:000000000000EE5E                 db  0Eh
.eh_frame:000000000000EE5F                 db  30h ; 0
.eh_frame:000000000000EE60                 db    2
.eh_frame:000000000000EE61                 db  8Eh
.eh_frame:000000000000EE62                 db  0Ah
.eh_frame:000000000000EE63                 db  0Eh
.eh_frame:000000000000EE64                 db  28h ; (
.eh_frame:000000000000EE65                 db  41h ; A
.eh_frame:000000000000EE66                 db  0Eh
.eh_frame:000000000000EE67                 db  20h
.eh_frame:000000000000EE68                 db  41h ; A
.eh_frame:000000000000EE69                 db  0Eh
.eh_frame:000000000000EE6A                 db  18h
.eh_frame:000000000000EE6B                 db  42h ; B
.eh_frame:000000000000EE6C                 db  0Eh
.eh_frame:000000000000EE6D                 db  10h
.eh_frame:000000000000EE6E                 db  42h ; B
.eh_frame:000000000000EE6F                 db  0Eh
.eh_frame:000000000000EE70                 db    8
.eh_frame:000000000000EE71                 db  44h ; D
.eh_frame:000000000000EE72                 db  0Bh
.eh_frame:000000000000EE73                 db    0
.eh_frame:000000000000EE74                 db  40h ; @
.eh_frame:000000000000EE75                 db    0
.eh_frame:000000000000EE76                 db    0
.eh_frame:000000000000EE77                 db    0
.eh_frame:000000000000EE78                 db 0F8h
.eh_frame:000000000000EE79                 db    3
.eh_frame:000000000000EE7A                 db    0
.eh_frame:000000000000EE7B                 db    0
.eh_frame:000000000000EE7C                 db    4
.eh_frame:000000000000EE7D                 db  4Eh ; N
.eh_frame:000000000000EE7E                 db 0FFh
.eh_frame:000000000000EE7F                 db 0FFh
.eh_frame:000000000000EE80                 db 0C7h
.eh_frame:000000000000EE81                 db    0
.eh_frame:000000000000EE82                 db    0
.eh_frame:000000000000EE83                 db    0
.eh_frame:000000000000EE84                 db    0
.eh_frame:000000000000EE85                 db  41h ; A
.eh_frame:000000000000EE86                 db  0Eh
.eh_frame:000000000000EE87                 db  10h
.eh_frame:000000000000EE88                 db  86h
.eh_frame:000000000000EE89                 db    2
.eh_frame:000000000000EE8A                 db  41h ; A
.eh_frame:000000000000EE8B                 db  0Eh
.eh_frame:000000000000EE8C                 db  18h
.eh_frame:000000000000EE8D                 db  83h
.eh_frame:000000000000EE8E                 db    3
.eh_frame:000000000000EE8F                 db  47h ; G
.eh_frame:000000000000EE90                 db  0Eh
.eh_frame:000000000000EE91                 db  20h
.eh_frame:000000000000EE92                 db  7Ch ; |
.eh_frame:000000000000EE93                 db  0Ah
.eh_frame:000000000000EE94                 db  0Eh
.eh_frame:000000000000EE95                 db  18h
.eh_frame:000000000000EE96                 db  41h ; A
.eh_frame:000000000000EE97                 db  0Eh
.eh_frame:000000000000EE98                 db  10h
.eh_frame:000000000000EE99                 db  41h ; A
.eh_frame:000000000000EE9A                 db  0Eh
.eh_frame:000000000000EE9B                 db    8
.eh_frame:000000000000EE9C                 db  49h ; I
.eh_frame:000000000000EE9D                 db  0Bh
.eh_frame:000000000000EE9E                 db  6Eh ; n
.eh_frame:000000000000EE9F                 db  0Ah
.eh_frame:000000000000EEA0                 db  0Eh
.eh_frame:000000000000EEA1                 db  18h
.eh_frame:000000000000EEA2                 db  49h ; I
.eh_frame:000000000000EEA3                 db  0Eh
.eh_frame:000000000000EEA4                 db  10h
.eh_frame:000000000000EEA5                 db  41h ; A
.eh_frame:000000000000EEA6                 db  0Eh
.eh_frame:000000000000EEA7                 db    8
.eh_frame:000000000000EEA8                 db  48h ; H
.eh_frame:000000000000EEA9                 db  0Bh
.eh_frame:000000000000EEAA                 db  4Ah ; J
.eh_frame:000000000000EEAB                 db  0Ah
.eh_frame:000000000000EEAC                 db  0Eh
.eh_frame:000000000000EEAD                 db  18h
.eh_frame:000000000000EEAE                 db  44h ; D
.eh_frame:000000000000EEAF                 db  0Eh
.eh_frame:000000000000EEB0                 db  10h
.eh_frame:000000000000EEB1                 db  41h ; A
.eh_frame:000000000000EEB2                 db  0Eh
.eh_frame:000000000000EEB3                 db    8
.eh_frame:000000000000EEB4                 db  49h ; I
.eh_frame:000000000000EEB5                 db  0Bh
.eh_frame:000000000000EEB6                 db    0
.eh_frame:000000000000EEB7                 db    0
.eh_frame:000000000000EEB8                 db  74h ; t
.eh_frame:000000000000EEB9                 db    0
.eh_frame:000000000000EEBA                 db    0
.eh_frame:000000000000EEBB                 db    0
.eh_frame:000000000000EEBC                 db  3Ch ; <
.eh_frame:000000000000EEBD                 db    4
.eh_frame:000000000000EEBE                 db    0
.eh_frame:000000000000EEBF                 db    0
.eh_frame:000000000000EEC0                 db  90h
.eh_frame:000000000000EEC1                 db  4Eh ; N
.eh_frame:000000000000EEC2                 db 0FFh
.eh_frame:000000000000EEC3                 db 0FFh
.eh_frame:000000000000EEC4                 db  84h
.eh_frame:000000000000EEC5                 db    4
.eh_frame:000000000000EEC6                 db    0
.eh_frame:000000000000EEC7                 db    0
.eh_frame:000000000000EEC8                 db    0
.eh_frame:000000000000EEC9                 db  42h ; B
.eh_frame:000000000000EECA                 db  0Eh
.eh_frame:000000000000EECB                 db  10h
.eh_frame:000000000000EECC                 db  8Eh
.eh_frame:000000000000EECD                 db    2
.eh_frame:000000000000EECE                 db  42h ; B
.eh_frame:000000000000EECF                 db  0Eh
.eh_frame:000000000000EED0                 db  18h
.eh_frame:000000000000EED1                 db  8Dh
.eh_frame:000000000000EED2                 db    3
.eh_frame:000000000000EED3                 db  42h ; B
.eh_frame:000000000000EED4                 db  0Eh
.eh_frame:000000000000EED5                 db  20h
.eh_frame:000000000000EED6                 db  8Ch
.eh_frame:000000000000EED7                 db    4
.eh_frame:000000000000EED8                 db  41h ; A
.eh_frame:000000000000EED9                 db  0Eh
.eh_frame:000000000000EEDA                 db  28h ; (
.eh_frame:000000000000EEDB                 db  86h
.eh_frame:000000000000EEDC                 db    5
.eh_frame:000000000000EEDD                 db  41h ; A
.eh_frame:000000000000EEDE                 db  0Eh
.eh_frame:000000000000EEDF                 db  30h ; 0
.eh_frame:000000000000EEE0                 db  83h
.eh_frame:000000000000EEE1                 db    6
.eh_frame:000000000000EEE2                 db    3
.eh_frame:000000000000EEE3                 db  33h ; 3
.eh_frame:000000000000EEE4                 db    1
.eh_frame:000000000000EEE5                 db  0Ah
.eh_frame:000000000000EEE6                 db  0Eh
.eh_frame:000000000000EEE7                 db  28h ; (
.eh_frame:000000000000EEE8                 db  4Ah ; J
.eh_frame:000000000000EEE9                 db  0Eh
.eh_frame:000000000000EEEA                 db  20h
.eh_frame:000000000000EEEB                 db  42h ; B
.eh_frame:000000000000EEEC                 db  0Eh
.eh_frame:000000000000EEED                 db  18h
.eh_frame:000000000000EEEE                 db  42h ; B
.eh_frame:000000000000EEEF                 db  0Eh
.eh_frame:000000000000EEF0                 db  10h
.eh_frame:000000000000EEF1                 db  42h ; B
.eh_frame:000000000000EEF2                 db  0Eh
.eh_frame:000000000000EEF3                 db    8
.eh_frame:000000000000EEF4                 db  45h ; E
.eh_frame:000000000000EEF5                 db  0Bh
.eh_frame:000000000000EEF6                 db  50h ; P
.eh_frame:000000000000EEF7                 db  0Ah
.eh_frame:000000000000EEF8                 db  0Eh
.eh_frame:000000000000EEF9                 db  28h ; (
.eh_frame:000000000000EEFA                 db  41h ; A
.eh_frame:000000000000EEFB                 db  0Eh
.eh_frame:000000000000EEFC                 db  20h
.eh_frame:000000000000EEFD                 db  42h ; B
.eh_frame:000000000000EEFE                 db  0Eh
.eh_frame:000000000000EEFF                 db  18h
.eh_frame:000000000000EF00                 db  42h ; B
.eh_frame:000000000000EF01                 db  0Eh
.eh_frame:000000000000EF02                 db  10h
.eh_frame:000000000000EF03                 db  42h ; B
.eh_frame:000000000000EF04                 db  0Eh
.eh_frame:000000000000EF05                 db    8
.eh_frame:000000000000EF06                 db  49h ; I
.eh_frame:000000000000EF07                 db  0Bh
.eh_frame:000000000000EF08                 db    3
.eh_frame:000000000000EF09                 db  8Fh
.eh_frame:000000000000EF0A                 db    1
.eh_frame:000000000000EF0B                 db  0Ah
.eh_frame:000000000000EF0C                 db  0Eh
.eh_frame:000000000000EF0D                 db  28h ; (
.eh_frame:000000000000EF0E                 db  46h ; F
.eh_frame:000000000000EF0F                 db  0Eh
.eh_frame:000000000000EF10                 db  20h
.eh_frame:000000000000EF11                 db  42h ; B
.eh_frame:000000000000EF12                 db  0Eh
.eh_frame:000000000000EF13                 db  18h
.eh_frame:000000000000EF14                 db  42h ; B
.eh_frame:000000000000EF15                 db  0Eh
.eh_frame:000000000000EF16                 db  10h
.eh_frame:000000000000EF17                 db  42h ; B
.eh_frame:000000000000EF18                 db  0Eh
.eh_frame:000000000000EF19                 db    8
.eh_frame:000000000000EF1A                 db  45h ; E
.eh_frame:000000000000EF1B                 db  0Bh
.eh_frame:000000000000EF1C                 db  49h ; I
.eh_frame:000000000000EF1D                 db  0Ah
.eh_frame:000000000000EF1E                 db  0Eh
.eh_frame:000000000000EF1F                 db  28h ; (
.eh_frame:000000000000EF20                 db  46h ; F
.eh_frame:000000000000EF21                 db  0Eh
.eh_frame:000000000000EF22                 db  20h
.eh_frame:000000000000EF23                 db  42h ; B
.eh_frame:000000000000EF24                 db  0Eh
.eh_frame:000000000000EF25                 db  18h
.eh_frame:000000000000EF26                 db  42h ; B
.eh_frame:000000000000EF27                 db  0Eh
.eh_frame:000000000000EF28                 db  10h
.eh_frame:000000000000EF29                 db  42h ; B
.eh_frame:000000000000EF2A                 db  0Eh
.eh_frame:000000000000EF2B                 db    8
.eh_frame:000000000000EF2C                 db  4Bh ; K
.eh_frame:000000000000EF2D                 db  0Bh
.eh_frame:000000000000EF2E                 db    0
.eh_frame:000000000000EF2F                 db    0
.eh_frame:000000000000EF30                 db  3Ch ; <
.eh_frame:000000000000EF31                 db    0
.eh_frame:000000000000EF32                 db    0
.eh_frame:000000000000EF33                 db    0
.eh_frame:000000000000EF34                 db 0B4h
.eh_frame:000000000000EF35                 db    4
.eh_frame:000000000000EF36                 db    0
.eh_frame:000000000000EF37                 db    0
.eh_frame:000000000000EF38                 db 0A8h
.eh_frame:000000000000EF39                 db  52h ; R
.eh_frame:000000000000EF3A                 db 0FFh
.eh_frame:000000000000EF3B                 db 0FFh
.eh_frame:000000000000EF3C                 db 0F3h
.eh_frame:000000000000EF3D                 db    0
.eh_frame:000000000000EF3E                 db    0
.eh_frame:000000000000EF3F                 db    0
.eh_frame:000000000000EF40                 db    0
.eh_frame:000000000000EF41                 db  41h ; A
.eh_frame:000000000000EF42                 db  0Eh
.eh_frame:000000000000EF43                 db  10h
.eh_frame:000000000000EF44                 db  86h
.eh_frame:000000000000EF45                 db    2
.eh_frame:000000000000EF46                 db  41h ; A
.eh_frame:000000000000EF47                 db  0Eh
.eh_frame:000000000000EF48                 db  18h
.eh_frame:000000000000EF49                 db  83h
.eh_frame:000000000000EF4A                 db    3
.eh_frame:000000000000EF4B                 db  56h ; V
.eh_frame:000000000000EF4C                 db  0Eh
.eh_frame:000000000000EF4D                 db  20h
.eh_frame:000000000000EF4E                 db    2
.eh_frame:000000000000EF4F                 db  60h ; `
.eh_frame:000000000000EF50                 db  0Ah
.eh_frame:000000000000EF51                 db  0Eh
.eh_frame:000000000000EF52                 db  18h
.eh_frame:000000000000EF53                 db  43h ; C
.eh_frame:000000000000EF54                 db  0Eh
.eh_frame:000000000000EF55                 db  10h
.eh_frame:000000000000EF56                 db  41h ; A
.eh_frame:000000000000EF57                 db  0Eh
.eh_frame:000000000000EF58                 db    8
.eh_frame:000000000000EF59                 db  44h ; D
.eh_frame:000000000000EF5A                 db  0Bh
.eh_frame:000000000000EF5B                 db  76h ; v
.eh_frame:000000000000EF5C                 db  0Ah
.eh_frame:000000000000EF5D                 db  0Eh
.eh_frame:000000000000EF5E                 db  18h
.eh_frame:000000000000EF5F                 db  43h ; C
.eh_frame:000000000000EF60                 db  0Eh
.eh_frame:000000000000EF61                 db  10h
.eh_frame:000000000000EF62                 db  41h ; A
.eh_frame:000000000000EF63                 db  0Eh
.eh_frame:000000000000EF64                 db    8
.eh_frame:000000000000EF65                 db  46h ; F
.eh_frame:000000000000EF66                 db  0Bh
.eh_frame:000000000000EF67                 db  6Eh ; n
.eh_frame:000000000000EF68                 db  0Eh
.eh_frame:000000000000EF69                 db  18h
.eh_frame:000000000000EF6A                 db  43h ; C
.eh_frame:000000000000EF6B                 db  0Eh
.eh_frame:000000000000EF6C                 db  10h
.eh_frame:000000000000EF6D                 db  41h ; A
.eh_frame:000000000000EF6E                 db  0Eh
.eh_frame:000000000000EF6F                 db    8
.eh_frame:000000000000EF70                 db  64h ; d
.eh_frame:000000000000EF71                 db    0
.eh_frame:000000000000EF72                 db    0
.eh_frame:000000000000EF73                 db    0
.eh_frame:000000000000EF74                 db 0F4h
.eh_frame:000000000000EF75                 db    4
.eh_frame:000000000000EF76                 db    0
.eh_frame:000000000000EF77                 db    0
.eh_frame:000000000000EF78                 db  68h ; h
.eh_frame:000000000000EF79                 db  53h ; S
.eh_frame:000000000000EF7A                 db 0FFh
.eh_frame:000000000000EF7B                 db 0FFh
.eh_frame:000000000000EF7C                 db 0B7h
.eh_frame:000000000000EF7D                 db  0Fh
.eh_frame:000000000000EF7E                 db    0
.eh_frame:000000000000EF7F                 db    0
.eh_frame:000000000000EF80                 db    0
.eh_frame:000000000000EF81                 db  42h ; B
.eh_frame:000000000000EF82                 db  0Eh
.eh_frame:000000000000EF83                 db  10h
.eh_frame:000000000000EF84                 db  8Fh
.eh_frame:000000000000EF85                 db    2
.eh_frame:000000000000EF86                 db  42h ; B
.eh_frame:000000000000EF87                 db  0Eh
.eh_frame:000000000000EF88                 db  18h
.eh_frame:000000000000EF89                 db  8Eh
.eh_frame:000000000000EF8A                 db    3
.eh_frame:000000000000EF8B                 db  42h ; B
.eh_frame:000000000000EF8C                 db  0Eh
.eh_frame:000000000000EF8D                 db  20h
.eh_frame:000000000000EF8E                 db  8Dh
.eh_frame:000000000000EF8F                 db    4
.eh_frame:000000000000EF90                 db  42h ; B
.eh_frame:000000000000EF91                 db  0Eh
.eh_frame:000000000000EF92                 db  28h ; (
.eh_frame:000000000000EF93                 db  8Ch
.eh_frame:000000000000EF94                 db    5
.eh_frame:000000000000EF95                 db  44h ; D
.eh_frame:000000000000EF96                 db  0Eh
.eh_frame:000000000000EF97                 db  30h ; 0
.eh_frame:000000000000EF98                 db  86h
.eh_frame:000000000000EF99                 db    6
.eh_frame:000000000000EF9A                 db  41h ; A
.eh_frame:000000000000EF9B                 db  0Eh
.eh_frame:000000000000EF9C                 db  38h ; 8
.eh_frame:000000000000EF9D                 db  83h
.eh_frame:000000000000EF9E                 db    7
.eh_frame:000000000000EF9F                 db  47h ; G
.eh_frame:000000000000EFA0                 db  0Eh
.eh_frame:000000000000EFA1                 db  50h ; P
.eh_frame:000000000000EFA2                 db    3
.eh_frame:000000000000EFA3                 db  58h ; X
.eh_frame:000000000000EFA4                 db    2
.eh_frame:000000000000EFA5                 db  0Ah
.eh_frame:000000000000EFA6                 db  0Eh
.eh_frame:000000000000EFA7                 db  38h ; 8
.eh_frame:000000000000EFA8                 db  41h ; A
.eh_frame:000000000000EFA9                 db  0Eh
.eh_frame:000000000000EFAA                 db  30h ; 0
.eh_frame:000000000000EFAB                 db  41h ; A
.eh_frame:000000000000EFAC                 db  0Eh
.eh_frame:000000000000EFAD                 db  28h ; (
.eh_frame:000000000000EFAE                 db  42h ; B
.eh_frame:000000000000EFAF                 db  0Eh
.eh_frame:000000000000EFB0                 db  20h
.eh_frame:000000000000EFB1                 db  42h ; B
.eh_frame:000000000000EFB2                 db  0Eh
.eh_frame:000000000000EFB3                 db  18h
.eh_frame:000000000000EFB4                 db  42h ; B
.eh_frame:000000000000EFB5                 db  0Eh
.eh_frame:000000000000EFB6                 db  10h
.eh_frame:000000000000EFB7                 db  42h ; B
.eh_frame:000000000000EFB8                 db  0Eh
.eh_frame:000000000000EFB9                 db    8
.eh_frame:000000000000EFBA                 db  41h ; A
.eh_frame:000000000000EFBB                 db  0Bh
.eh_frame:000000000000EFBC                 db    3
.eh_frame:000000000000EFBD                 db  5Fh ; _
.eh_frame:000000000000EFBE                 db  0Ch
.eh_frame:000000000000EFBF                 db  0Ah
.eh_frame:000000000000EFC0                 db  0Eh
.eh_frame:000000000000EFC1                 db  38h ; 8
.eh_frame:000000000000EFC2                 db  41h ; A
.eh_frame:000000000000EFC3                 db  0Eh
.eh_frame:000000000000EFC4                 db  30h ; 0
.eh_frame:000000000000EFC5                 db  41h ; A
.eh_frame:000000000000EFC6                 db  0Eh
.eh_frame:000000000000EFC7                 db  28h ; (
.eh_frame:000000000000EFC8                 db  42h ; B
.eh_frame:000000000000EFC9                 db  0Eh
.eh_frame:000000000000EFCA                 db  20h
.eh_frame:000000000000EFCB                 db  42h ; B
.eh_frame:000000000000EFCC                 db  0Eh
.eh_frame:000000000000EFCD                 db  18h
.eh_frame:000000000000EFCE                 db  42h ; B
.eh_frame:000000000000EFCF                 db  0Eh
.eh_frame:000000000000EFD0                 db  10h
.eh_frame:000000000000EFD1                 db  42h ; B
.eh_frame:000000000000EFD2                 db  0Eh
.eh_frame:000000000000EFD3                 db    8
.eh_frame:000000000000EFD4                 db  41h ; A
.eh_frame:000000000000EFD5                 db  0Bh
.eh_frame:000000000000EFD6                 db    0
.eh_frame:000000000000EFD7                 db    0
.eh_frame:000000000000EFD8                 db  28h ; (
.eh_frame:000000000000EFD9                 db    0
.eh_frame:000000000000EFDA                 db    0
.eh_frame:000000000000EFDB                 db    0
.eh_frame:000000000000EFDC                 db  5Ch ; \
.eh_frame:000000000000EFDD                 db    5
.eh_frame:000000000000EFDE                 db    0
.eh_frame:000000000000EFDF                 db    0
.eh_frame:000000000000EFE0                 db 0C0h
.eh_frame:000000000000EFE1                 db  62h ; b
.eh_frame:000000000000EFE2                 db 0FFh
.eh_frame:000000000000EFE3                 db 0FFh
.eh_frame:000000000000EFE4                 db  6Ah ; j
.eh_frame:000000000000EFE5                 db    5
.eh_frame:000000000000EFE6                 db    0
.eh_frame:000000000000EFE7                 db    0
.eh_frame:000000000000EFE8                 db    0
.eh_frame:000000000000EFE9                 db  42h ; B
.eh_frame:000000000000EFEA                 db  0Eh
.eh_frame:000000000000EFEB                 db  10h
.eh_frame:000000000000EFEC                 db  8Dh
.eh_frame:000000000000EFED                 db    2
.eh_frame:000000000000EFEE                 db  42h ; B
.eh_frame:000000000000EFEF                 db  0Eh
.eh_frame:000000000000EFF0                 db  18h
.eh_frame:000000000000EFF1                 db  8Ch
.eh_frame:000000000000EFF2                 db    3
.eh_frame:000000000000EFF3                 db  46h ; F
.eh_frame:000000000000EFF4                 db  0Eh
.eh_frame:000000000000EFF5                 db  20h
.eh_frame:000000000000EFF6                 db  86h
.eh_frame:000000000000EFF7                 db    4
.eh_frame:000000000000EFF8                 db  41h ; A
.eh_frame:000000000000EFF9                 db  0Eh
.eh_frame:000000000000EFFA                 db  28h ; (
.eh_frame:000000000000EFFB                 db  83h
.eh_frame:000000000000EFFC                 db    5
.eh_frame:000000000000EFFD                 db  49h ; I
.eh_frame:000000000000EFFE                 db  0Eh
.eh_frame:000000000000EFFF                 db 0B0h
.eh_frame:000000000000F000                 db    1
.eh_frame:000000000000F001                 db    0
.eh_frame:000000000000F002                 db    0
.eh_frame:000000000000F003                 db    0
.eh_frame:000000000000F004                 db  30h ; 0
.eh_frame:000000000000F005                 db    0
.eh_frame:000000000000F006                 db    0
.eh_frame:000000000000F007                 db    0
.eh_frame:000000000000F008                 db  88h
.eh_frame:000000000000F009                 db    5
.eh_frame:000000000000F00A                 db    0
.eh_frame:000000000000F00B                 db    0
.eh_frame:000000000000F00C                 db    4
.eh_frame:000000000000F00D                 db  68h ; h
.eh_frame:000000000000F00E                 db 0FFh
.eh_frame:000000000000F00F                 db 0FFh
.eh_frame:000000000000F010                 db 0EFh
.eh_frame:000000000000F011                 db    0
.eh_frame:000000000000F012                 db    0
.eh_frame:000000000000F013                 db    0
.eh_frame:000000000000F014                 db    0
.eh_frame:000000000000F015                 db  42h ; B
.eh_frame:000000000000F016                 db  0Eh
.eh_frame:000000000000F017                 db  10h
.eh_frame:000000000000F018                 db  8Ch
.eh_frame:000000000000F019                 db    2
.eh_frame:000000000000F01A                 db  41h ; A
.eh_frame:000000000000F01B                 db  0Eh
.eh_frame:000000000000F01C                 db  18h
.eh_frame:000000000000F01D                 db  86h
.eh_frame:000000000000F01E                 db    3
.eh_frame:000000000000F01F                 db  44h ; D
.eh_frame:000000000000F020                 db  0Eh
.eh_frame:000000000000F021                 db  20h
.eh_frame:000000000000F022                 db  83h
.eh_frame:000000000000F023                 db    4
.eh_frame:000000000000F024                 db  4Ah ; J
.eh_frame:000000000000F025                 db  0Eh
.eh_frame:000000000000F026                 db  30h ; 0
.eh_frame:000000000000F027                 db    2
.eh_frame:000000000000F028                 db  43h ; C
.eh_frame:000000000000F029                 db  0Ah
.eh_frame:000000000000F02A                 db  0Eh
.eh_frame:000000000000F02B                 db  20h
.eh_frame:000000000000F02C                 db  41h ; A
.eh_frame:000000000000F02D                 db  0Eh
.eh_frame:000000000000F02E                 db  18h
.eh_frame:000000000000F02F                 db  41h ; A
.eh_frame:000000000000F030                 db  0Eh
.eh_frame:000000000000F031                 db  10h
.eh_frame:000000000000F032                 db  42h ; B
.eh_frame:000000000000F033                 db  0Eh
.eh_frame:000000000000F034                 db    8
.eh_frame:000000000000F035                 db  48h ; H
.eh_frame:000000000000F036                 db  0Bh
.eh_frame:000000000000F037                 db    0
.eh_frame:000000000000F038                 db  5Ch ; \
.eh_frame:000000000000F039                 db    0
.eh_frame:000000000000F03A                 db    0
.eh_frame:000000000000F03B                 db    0
.eh_frame:000000000000F03C                 db 0BCh
.eh_frame:000000000000F03D                 db    5
.eh_frame:000000000000F03E                 db    0
.eh_frame:000000000000F03F                 db    0
.eh_frame:000000000000F040                 db  80h
.eh_frame:000000000000F041                 db  2Fh ; /
.eh_frame:000000000000F042                 db 0FFh
.eh_frame:000000000000F043                 db 0FFh
.eh_frame:000000000000F044                 db  42h ; B
.eh_frame:000000000000F045                 db    9
.eh_frame:000000000000F046                 db    0
.eh_frame:000000000000F047                 db    0
.eh_frame:000000000000F048                 db    0
.eh_frame:000000000000F049                 db  42h ; B
.eh_frame:000000000000F04A                 db  0Eh
.eh_frame:000000000000F04B                 db  10h
.eh_frame:000000000000F04C                 db  8Fh
.eh_frame:000000000000F04D                 db    2
.eh_frame:000000000000F04E                 db  42h ; B
.eh_frame:000000000000F04F                 db  0Eh
.eh_frame:000000000000F050                 db  18h
.eh_frame:000000000000F051                 db  8Eh
.eh_frame:000000000000F052                 db    3
.eh_frame:000000000000F053                 db  42h ; B
.eh_frame:000000000000F054                 db  0Eh
.eh_frame:000000000000F055                 db  20h
.eh_frame:000000000000F056                 db  8Dh
.eh_frame:000000000000F057                 db    4
.eh_frame:000000000000F058                 db  42h ; B
.eh_frame:000000000000F059                 db  0Eh
.eh_frame:000000000000F05A                 db  28h ; (
.eh_frame:000000000000F05B                 db  8Ch
.eh_frame:000000000000F05C                 db    5
.eh_frame:000000000000F05D                 db  44h ; D
.eh_frame:000000000000F05E                 db  0Eh
.eh_frame:000000000000F05F                 db  30h ; 0
.eh_frame:000000000000F060                 db  86h
.eh_frame:000000000000F061                 db    6
.eh_frame:000000000000F062                 db  41h ; A
.eh_frame:000000000000F063                 db  0Eh
.eh_frame:000000000000F064                 db  38h ; 8
.eh_frame:000000000000F065                 db  83h
.eh_frame:000000000000F066                 db    7
.eh_frame:000000000000F067                 db  47h ; G
.eh_frame:000000000000F068                 db  0Eh
.eh_frame:000000000000F069                 db  90h
.eh_frame:000000000000F06A                 db    1
.eh_frame:000000000000F06B                 db    3
.eh_frame:000000000000F06C                 db 0FEh
.eh_frame:000000000000F06D                 db    2
.eh_frame:000000000000F06E                 db  0Ah
.eh_frame:000000000000F06F                 db  0Eh
.eh_frame:000000000000F070                 db  38h ; 8
.eh_frame:000000000000F071                 db  41h ; A
.eh_frame:000000000000F072                 db  0Eh
.eh_frame:000000000000F073                 db  30h ; 0
.eh_frame:000000000000F074                 db  41h ; A
.eh_frame:000000000000F075                 db  0Eh
.eh_frame:000000000000F076                 db  28h ; (
.eh_frame:000000000000F077                 db  42h ; B
.eh_frame:000000000000F078                 db  0Eh
.eh_frame:000000000000F079                 db  20h
.eh_frame:000000000000F07A                 db  42h ; B
.eh_frame:000000000000F07B                 db  0Eh
.eh_frame:000000000000F07C                 db  18h
.eh_frame:000000000000F07D                 db  42h ; B
.eh_frame:000000000000F07E                 db  0Eh
.eh_frame:000000000000F07F                 db  10h
.eh_frame:000000000000F080                 db  42h ; B
.eh_frame:000000000000F081                 db  0Eh
.eh_frame:000000000000F082                 db    8
.eh_frame:000000000000F083                 db  41h ; A
.eh_frame:000000000000F084                 db  0Bh
.eh_frame:000000000000F085                 db    3
.eh_frame:000000000000F086                 db    2
.eh_frame:000000000000F087                 db    4
.eh_frame:000000000000F088                 db  0Ah
.eh_frame:000000000000F089                 db  0Eh
.eh_frame:000000000000F08A                 db  98h
.eh_frame:000000000000F08B                 db    1
.eh_frame:000000000000F08C                 db  50h ; P
.eh_frame:000000000000F08D                 db  0Eh
.eh_frame:000000000000F08E                 db 0A0h
.eh_frame:000000000000F08F                 db    1
.eh_frame:000000000000F090                 db  6Ah ; j
.eh_frame:000000000000F091                 db  0Bh
.eh_frame:000000000000F092                 db    0
.eh_frame:000000000000F093                 db    0
.eh_frame:000000000000F094                 db    0
.eh_frame:000000000000F095                 db    0
.eh_frame:000000000000F096                 db    0
.eh_frame:000000000000F097                 db    0
.eh_frame:000000000000F098                 db  10h
.eh_frame:000000000000F099                 db    0
.eh_frame:000000000000F09A                 db    0
.eh_frame:000000000000F09B                 db    0
.eh_frame:000000000000F09C                 db  1Ch
.eh_frame:000000000000F09D                 db    6
.eh_frame:000000000000F09E                 db    0
.eh_frame:000000000000F09F                 db    0
.eh_frame:000000000000F0A0                 db  60h ; `
.eh_frame:000000000000F0A1                 db  68h ; h
.eh_frame:000000000000F0A2                 db 0FFh
.eh_frame:000000000000F0A3                 db 0FFh
.eh_frame:000000000000F0A4                 db    8
.eh_frame:000000000000F0A5                 db    0
.eh_frame:000000000000F0A6                 db    0
.eh_frame:000000000000F0A7                 db    0
.eh_frame:000000000000F0A8                 db    0
.eh_frame:000000000000F0A9                 db    0
.eh_frame:000000000000F0AA                 db    0
.eh_frame:000000000000F0AB                 db    0
.eh_frame:000000000000F0AC                 db  10h
.eh_frame:000000000000F0AD                 db    0
.eh_frame:000000000000F0AE                 db    0
.eh_frame:000000000000F0AF                 db    0
.eh_frame:000000000000F0B0                 db  30h ; 0
.eh_frame:000000000000F0B1                 db    6
.eh_frame:000000000000F0B2                 db    0
.eh_frame:000000000000F0B3                 db    0
.eh_frame:000000000000F0B4                 db  5Ch ; \
.eh_frame:000000000000F0B5                 db  68h ; h
.eh_frame:000000000000F0B6                 db 0FFh
.eh_frame:000000000000F0B7                 db 0FFh
.eh_frame:000000000000F0B8                 db    8
.eh_frame:000000000000F0B9                 db    0
.eh_frame:000000000000F0BA                 db    0
.eh_frame:000000000000F0BB                 db    0
.eh_frame:000000000000F0BC                 db    0
.eh_frame:000000000000F0BD                 db    0
.eh_frame:000000000000F0BE                 db    0
.eh_frame:000000000000F0BF                 db    0
.eh_frame:000000000000F0C0                 db  2Ch ; ,
.eh_frame:000000000000F0C1                 db    0
.eh_frame:000000000000F0C2                 db    0
.eh_frame:000000000000F0C3                 db    0
.eh_frame:000000000000F0C4                 db  44h ; D
.eh_frame:000000000000F0C5                 db    6
.eh_frame:000000000000F0C6                 db    0
.eh_frame:000000000000F0C7                 db    0
.eh_frame:000000000000F0C8                 db  58h ; X
.eh_frame:000000000000F0C9                 db  68h ; h
.eh_frame:000000000000F0CA                 db 0FFh
.eh_frame:000000000000F0CB                 db 0FFh
.eh_frame:000000000000F0CC                 db 0A4h
.eh_frame:000000000000F0CD                 db    0
.eh_frame:000000000000F0CE                 db    0
.eh_frame:000000000000F0CF                 db    0
.eh_frame:000000000000F0D0                 db    0
.eh_frame:000000000000F0D1                 db  41h ; A
.eh_frame:000000000000F0D2                 db  0Eh
.eh_frame:000000000000F0D3                 db  10h
.eh_frame:000000000000F0D4                 db  86h
.eh_frame:000000000000F0D5                 db    2
.eh_frame:000000000000F0D6                 db  41h ; A
.eh_frame:000000000000F0D7                 db  0Eh
.eh_frame:000000000000F0D8                 db  18h
.eh_frame:000000000000F0D9                 db  83h
.eh_frame:000000000000F0DA                 db    3
.eh_frame:000000000000F0DB                 db  44h ; D
.eh_frame:000000000000F0DC                 db  0Eh
.eh_frame:000000000000F0DD                 db  20h
.eh_frame:000000000000F0DE                 db  7Ah ; z
.eh_frame:000000000000F0DF                 db  0Ah
.eh_frame:000000000000F0E0                 db  0Eh
.eh_frame:000000000000F0E1                 db  18h
.eh_frame:000000000000F0E2                 db  41h ; A
.eh_frame:000000000000F0E3                 db  0Eh
.eh_frame:000000000000F0E4                 db  10h
.eh_frame:000000000000F0E5                 db  41h ; A
.eh_frame:000000000000F0E6                 db  0Eh
.eh_frame:000000000000F0E7                 db    8
.eh_frame:000000000000F0E8                 db  41h ; A
.eh_frame:000000000000F0E9                 db  0Bh
.eh_frame:000000000000F0EA                 db    0
.eh_frame:000000000000F0EB                 db    0
.eh_frame:000000000000F0EC                 db    0
.eh_frame:000000000000F0ED                 db    0
.eh_frame:000000000000F0EE                 db    0
.eh_frame:000000000000F0EF                 db    0
.eh_frame:000000000000F0F0                 db  10h
.eh_frame:000000000000F0F1                 db    0
.eh_frame:000000000000F0F2                 db    0
.eh_frame:000000000000F0F3                 db    0
.eh_frame:000000000000F0F4                 db  74h ; t
.eh_frame:000000000000F0F5                 db    6
.eh_frame:000000000000F0F6                 db    0
.eh_frame:000000000000F0F7                 db    0
.eh_frame:000000000000F0F8                 db 0D8h
.eh_frame:000000000000F0F9                 db  68h ; h
.eh_frame:000000000000F0FA                 db 0FFh
.eh_frame:000000000000F0FB                 db 0FFh
.eh_frame:000000000000F0FC                 db    5
.eh_frame:000000000000F0FD                 db    0
.eh_frame:000000000000F0FE                 db    0
.eh_frame:000000000000F0FF                 db    0
.eh_frame:000000000000F100                 db    0
.eh_frame:000000000000F101                 db    0
.eh_frame:000000000000F102                 db    0
.eh_frame:000000000000F103                 db    0
.eh_frame:000000000000F104                 db  18h
.eh_frame:000000000000F105                 db    0
.eh_frame:000000000000F106                 db    0
.eh_frame:000000000000F107                 db    0
.eh_frame:000000000000F108                 db  88h
.eh_frame:000000000000F109                 db    6
.eh_frame:000000000000F10A                 db    0
.eh_frame:000000000000F10B                 db    0
.eh_frame:000000000000F10C                 db 0D4h
.eh_frame:000000000000F10D                 db  68h ; h
.eh_frame:000000000000F10E                 db 0FFh
.eh_frame:000000000000F10F                 db 0FFh
.eh_frame:000000000000F110                 db  22h ; "
.eh_frame:000000000000F111                 db    0
.eh_frame:000000000000F112                 db    0
.eh_frame:000000000000F113                 db    0
.eh_frame:000000000000F114                 db    0
.eh_frame:000000000000F115                 db  46h ; F
.eh_frame:000000000000F116                 db  0Eh
.eh_frame:000000000000F117                 db  10h
.eh_frame:000000000000F118                 db  83h
.eh_frame:000000000000F119                 db    2
.eh_frame:000000000000F11A                 db  4Eh ; N
.eh_frame:000000000000F11B                 db 0C3h
.eh_frame:000000000000F11C                 db  0Eh
.eh_frame:000000000000F11D                 db    8
.eh_frame:000000000000F11E                 db    0
.eh_frame:000000000000F11F                 db    0
.eh_frame:000000000000F120                 db  2Ch ; ,
.eh_frame:000000000000F121                 db    0
.eh_frame:000000000000F122                 db    0
.eh_frame:000000000000F123                 db    0
.eh_frame:000000000000F124                 db 0A4h
.eh_frame:000000000000F125                 db    6
.eh_frame:000000000000F126                 db    0
.eh_frame:000000000000F127                 db    0
.eh_frame:000000000000F128                 db 0E8h
.eh_frame:000000000000F129                 db  68h ; h
.eh_frame:000000000000F12A                 db 0FFh
.eh_frame:000000000000F12B                 db 0FFh
.eh_frame:000000000000F12C                 db  93h
.eh_frame:000000000000F12D                 db    0
.eh_frame:000000000000F12E                 db    0
.eh_frame:000000000000F12F                 db    0
.eh_frame:000000000000F130                 db    0
.eh_frame:000000000000F131                 db  42h ; B
.eh_frame:000000000000F132                 db  0Eh
.eh_frame:000000000000F133                 db  10h
.eh_frame:000000000000F134                 db  8Ch
.eh_frame:000000000000F135                 db    2
.eh_frame:000000000000F136                 db  41h ; A
.eh_frame:000000000000F137                 db  0Eh
.eh_frame:000000000000F138                 db  18h
.eh_frame:000000000000F139                 db  86h
.eh_frame:000000000000F13A                 db    3
.eh_frame:000000000000F13B                 db  44h ; D
.eh_frame:000000000000F13C                 db  0Eh
.eh_frame:000000000000F13D                 db  20h
.eh_frame:000000000000F13E                 db  83h
.eh_frame:000000000000F13F                 db    4
.eh_frame:000000000000F140                 db  5Eh ; ^
.eh_frame:000000000000F141                 db  0Ah
.eh_frame:000000000000F142                 db  0Eh
.eh_frame:000000000000F143                 db  18h
.eh_frame:000000000000F144                 db  41h ; A
.eh_frame:000000000000F145                 db  0Eh
.eh_frame:000000000000F146                 db  10h
.eh_frame:000000000000F147                 db  42h ; B
.eh_frame:000000000000F148                 db  0Eh
.eh_frame:000000000000F149                 db    8
.eh_frame:000000000000F14A                 db  48h ; H
.eh_frame:000000000000F14B                 db  0Bh
.eh_frame:000000000000F14C                 db    0
.eh_frame:000000000000F14D                 db    0
.eh_frame:000000000000F14E                 db    0
.eh_frame:000000000000F14F                 db    0
.eh_frame:000000000000F150                 db  10h
.eh_frame:000000000000F151                 db    0
.eh_frame:000000000000F152                 db    0
.eh_frame:000000000000F153                 db    0
.eh_frame:000000000000F154                 db 0D4h
.eh_frame:000000000000F155                 db    6
.eh_frame:000000000000F156                 db    0
.eh_frame:000000000000F157                 db    0
.eh_frame:000000000000F158                 db  58h ; X
.eh_frame:000000000000F159                 db  69h ; i
.eh_frame:000000000000F15A                 db 0FFh
.eh_frame:000000000000F15B                 db 0FFh
.eh_frame:000000000000F15C                 db  0Ah
.eh_frame:000000000000F15D                 db    0
.eh_frame:000000000000F15E                 db    0
.eh_frame:000000000000F15F                 db    0
.eh_frame:000000000000F160                 db    0
.eh_frame:000000000000F161                 db    0
.eh_frame:000000000000F162                 db    0
.eh_frame:000000000000F163                 db    0
.eh_frame:000000000000F164                 db  18h
.eh_frame:000000000000F165                 db    0
.eh_frame:000000000000F166                 db    0
.eh_frame:000000000000F167                 db    0
.eh_frame:000000000000F168                 db 0E8h
.eh_frame:000000000000F169                 db    6
.eh_frame:000000000000F16A                 db    0
.eh_frame:000000000000F16B                 db    0
.eh_frame:000000000000F16C                 db  54h ; T
.eh_frame:000000000000F16D                 db  69h ; i
.eh_frame:000000000000F16E                 db 0FFh
.eh_frame:000000000000F16F                 db 0FFh
.eh_frame:000000000000F170                 db  41h ; A
.eh_frame:000000000000F171                 db    0
.eh_frame:000000000000F172                 db    0
.eh_frame:000000000000F173                 db    0
.eh_frame:000000000000F174                 db    0
.eh_frame:000000000000F175                 db  44h ; D
.eh_frame:000000000000F176                 db  0Eh
.eh_frame:000000000000F177                 db  30h ; 0
.eh_frame:000000000000F178                 db  77h ; w
.eh_frame:000000000000F179                 db  0Ah
.eh_frame:000000000000F17A                 db  0Eh
.eh_frame:000000000000F17B                 db    8
.eh_frame:000000000000F17C                 db  41h ; A
.eh_frame:000000000000F17D                 db  0Bh
.eh_frame:000000000000F17E                 db    0
.eh_frame:000000000000F17F                 db    0
.eh_frame:000000000000F180                 db  1Ch
.eh_frame:000000000000F181                 db    0
.eh_frame:000000000000F182                 db    0
.eh_frame:000000000000F183                 db    0
.eh_frame:000000000000F184                 db    4
.eh_frame:000000000000F185                 db    7
.eh_frame:000000000000F186                 db    0
.eh_frame:000000000000F187                 db    0
.eh_frame:000000000000F188                 db  88h
.eh_frame:000000000000F189                 db  69h ; i
.eh_frame:000000000000F18A                 db 0FFh
.eh_frame:000000000000F18B                 db 0FFh
.eh_frame:000000000000F18C                 db  60h ; `
.eh_frame:000000000000F18D                 db    0
.eh_frame:000000000000F18E                 db    0
.eh_frame:000000000000F18F                 db    0
.eh_frame:000000000000F190                 db    0
.eh_frame:000000000000F191                 db  44h ; D
.eh_frame:000000000000F192                 db  0Eh
.eh_frame:000000000000F193                 db  10h
.eh_frame:000000000000F194                 db  75h ; u
.eh_frame:000000000000F195                 db  0Ah
.eh_frame:000000000000F196                 db  0Eh
.eh_frame:000000000000F197                 db    8
.eh_frame:000000000000F198                 db  47h ; G
.eh_frame:000000000000F199                 db  0Bh
.eh_frame:000000000000F19A                 db  5Fh ; _
.eh_frame:000000000000F19B                 db  0Eh
.eh_frame:000000000000F19C                 db    8
.eh_frame:000000000000F19D                 db    0
.eh_frame:000000000000F19E                 db    0
.eh_frame:000000000000F19F                 db    0
.eh_frame:000000000000F1A0                 db  14h
.eh_frame:000000000000F1A1                 db    0
.eh_frame:000000000000F1A2                 db    0
.eh_frame:000000000000F1A3                 db    0
.eh_frame:000000000000F1A4                 db  24h ; $
.eh_frame:000000000000F1A5                 db    7
.eh_frame:000000000000F1A6                 db    0
.eh_frame:000000000000F1A7                 db    0
.eh_frame:000000000000F1A8                 db 0C8h
.eh_frame:000000000000F1A9                 db  69h ; i
.eh_frame:000000000000F1AA                 db 0FFh
.eh_frame:000000000000F1AB                 db 0FFh
.eh_frame:000000000000F1AC                 db  9Ch
.eh_frame:000000000000F1AD                 db    0
.eh_frame:000000000000F1AE                 db    0
.eh_frame:000000000000F1AF                 db    0
.eh_frame:000000000000F1B0                 db    0
.eh_frame:000000000000F1B1                 db    0
.eh_frame:000000000000F1B2                 db    0
.eh_frame:000000000000F1B3                 db    0
.eh_frame:000000000000F1B4                 db    0
.eh_frame:000000000000F1B5                 db    0
.eh_frame:000000000000F1B6                 db    0
.eh_frame:000000000000F1B7                 db    0
.eh_frame:000000000000F1B8                 db  48h ; H
.eh_frame:000000000000F1B9                 db    0
.eh_frame:000000000000F1BA                 db    0
.eh_frame:000000000000F1BB                 db    0
.eh_frame:000000000000F1BC                 db  3Ch ; <
.eh_frame:000000000000F1BD                 db    7
.eh_frame:000000000000F1BE                 db    0
.eh_frame:000000000000F1BF                 db    0
.eh_frame:000000000000F1C0                 db  50h ; P
.eh_frame:000000000000F1C1                 db  6Ah ; j
.eh_frame:000000000000F1C2                 db 0FFh
.eh_frame:000000000000F1C3                 db 0FFh
.eh_frame:000000000000F1C4                 db 0BFh
.eh_frame:000000000000F1C5                 db    1
.eh_frame:000000000000F1C6                 db    0
.eh_frame:000000000000F1C7                 db    0
.eh_frame:000000000000F1C8                 db    0
.eh_frame:000000000000F1C9                 db  42h ; B
.eh_frame:000000000000F1CA                 db  0Eh
.eh_frame:000000000000F1CB                 db  10h
.eh_frame:000000000000F1CC                 db  8Fh
.eh_frame:000000000000F1CD                 db    2
.eh_frame:000000000000F1CE                 db  42h ; B
.eh_frame:000000000000F1CF                 db  0Eh
.eh_frame:000000000000F1D0                 db  18h
.eh_frame:000000000000F1D1                 db  8Eh
.eh_frame:000000000000F1D2                 db    3
.eh_frame:000000000000F1D3                 db  42h ; B
.eh_frame:000000000000F1D4                 db  0Eh
.eh_frame:000000000000F1D5                 db  20h
.eh_frame:000000000000F1D6                 db  8Dh
.eh_frame:000000000000F1D7                 db    4
.eh_frame:000000000000F1D8                 db  42h ; B
.eh_frame:000000000000F1D9                 db  0Eh
.eh_frame:000000000000F1DA                 db  28h ; (
.eh_frame:000000000000F1DB                 db  8Ch
.eh_frame:000000000000F1DC                 db    5
.eh_frame:000000000000F1DD                 db  45h ; E
.eh_frame:000000000000F1DE                 db  0Eh
.eh_frame:000000000000F1DF                 db  30h ; 0
.eh_frame:000000000000F1E0                 db  86h
.eh_frame:000000000000F1E1                 db    6
.eh_frame:000000000000F1E2                 db  41h ; A
.eh_frame:000000000000F1E3                 db  0Eh
.eh_frame:000000000000F1E4                 db  38h ; 8
.eh_frame:000000000000F1E5                 db  83h
.eh_frame:000000000000F1E6                 db    7
.eh_frame:000000000000F1E7                 db  47h ; G
.eh_frame:000000000000F1E8                 db  0Eh
.eh_frame:000000000000F1E9                 db  70h ; p
.eh_frame:000000000000F1EA                 db    3
.eh_frame:000000000000F1EB                 db  2Eh ; .
.eh_frame:000000000000F1EC                 db    1
.eh_frame:000000000000F1ED                 db  0Ah
.eh_frame:000000000000F1EE                 db  0Eh
.eh_frame:000000000000F1EF                 db  38h ; 8
.eh_frame:000000000000F1F0                 db  41h ; A
.eh_frame:000000000000F1F1                 db  0Eh
.eh_frame:000000000000F1F2                 db  30h ; 0
.eh_frame:000000000000F1F3                 db  41h ; A
.eh_frame:000000000000F1F4                 db  0Eh
.eh_frame:000000000000F1F5                 db  28h ; (
.eh_frame:000000000000F1F6                 db  42h ; B
.eh_frame:000000000000F1F7                 db  0Eh
.eh_frame:000000000000F1F8                 db  20h
.eh_frame:000000000000F1F9                 db  42h ; B
.eh_frame:000000000000F1FA                 db  0Eh
.eh_frame:000000000000F1FB                 db  18h
.eh_frame:000000000000F1FC                 db  42h ; B
.eh_frame:000000000000F1FD                 db  0Eh
.eh_frame:000000000000F1FE                 db  10h
.eh_frame:000000000000F1FF                 db  42h ; B
.eh_frame:000000000000F200                 db  0Eh
.eh_frame:000000000000F201                 db    8
.eh_frame:000000000000F202                 db  43h ; C
.eh_frame:000000000000F203                 db  0Bh
.eh_frame:000000000000F204                 db  28h ; (
.eh_frame:000000000000F205                 db    0
.eh_frame:000000000000F206                 db    0
.eh_frame:000000000000F207                 db    0
.eh_frame:000000000000F208                 db  88h
.eh_frame:000000000000F209                 db    7
.eh_frame:000000000000F20A                 db    0
.eh_frame:000000000000F20B                 db    0
.eh_frame:000000000000F20C                 db 0C4h
.eh_frame:000000000000F20D                 db  6Bh ; k
.eh_frame:000000000000F20E                 db 0FFh
.eh_frame:000000000000F20F                 db 0FFh
.eh_frame:000000000000F210                 db  23h ; #
.eh_frame:000000000000F211                 db    0
.eh_frame:000000000000F212                 db    0
.eh_frame:000000000000F213                 db    0
.eh_frame:000000000000F214                 db    0
.eh_frame:000000000000F215                 db  41h ; A
.eh_frame:000000000000F216                 db  0Eh
.eh_frame:000000000000F217                 db  10h
.eh_frame:000000000000F218                 db  86h
.eh_frame:000000000000F219                 db    2
.eh_frame:000000000000F21A                 db  41h ; A
.eh_frame:000000000000F21B                 db  0Eh
.eh_frame:000000000000F21C                 db  18h
.eh_frame:000000000000F21D                 db  83h
.eh_frame:000000000000F21E                 db    3
.eh_frame:000000000000F21F                 db  49h ; I
.eh_frame:000000000000F220                 db  0Eh
.eh_frame:000000000000F221                 db  20h
.eh_frame:000000000000F222                 db  49h ; I
.eh_frame:000000000000F223                 db  0Eh
.eh_frame:000000000000F224                 db  18h
.eh_frame:000000000000F225                 db  46h ; F
.eh_frame:000000000000F226                 db  0Eh
.eh_frame:000000000000F227                 db  10h
.eh_frame:000000000000F228                 db  41h ; A
.eh_frame:000000000000F229                 db  0Eh
.eh_frame:000000000000F22A                 db    8
.eh_frame:000000000000F22B                 db    0
.eh_frame:000000000000F22C                 db    0
.eh_frame:000000000000F22D                 db    0
.eh_frame:000000000000F22E                 db    0
.eh_frame:000000000000F22F                 db    0
.eh_frame:000000000000F230                 db  28h ; (
.eh_frame:000000000000F231                 db    0
.eh_frame:000000000000F232                 db    0
.eh_frame:000000000000F233                 db    0
.eh_frame:000000000000F234                 db 0B4h
.eh_frame:000000000000F235                 db    7
.eh_frame:000000000000F236                 db    0
.eh_frame:000000000000F237                 db    0
.eh_frame:000000000000F238                 db 0C8h
.eh_frame:000000000000F239                 db  6Bh ; k
.eh_frame:000000000000F23A                 db 0FFh
.eh_frame:000000000000F23B                 db 0FFh
.eh_frame:000000000000F23C                 db  41h ; A
.eh_frame:000000000000F23D                 db    0
.eh_frame:000000000000F23E                 db    0
.eh_frame:000000000000F23F                 db    0
.eh_frame:000000000000F240                 db    0
.eh_frame:000000000000F241                 db  45h ; E
.eh_frame:000000000000F242                 db  0Eh
.eh_frame:000000000000F243                 db  10h
.eh_frame:000000000000F244                 db  8Ch
.eh_frame:000000000000F245                 db    2
.eh_frame:000000000000F246                 db  41h ; A
.eh_frame:000000000000F247                 db  0Eh
.eh_frame:000000000000F248                 db  18h
.eh_frame:000000000000F249                 db  86h
.eh_frame:000000000000F24A                 db    3
.eh_frame:000000000000F24B                 db  44h ; D
.eh_frame:000000000000F24C                 db  0Eh
.eh_frame:000000000000F24D                 db  20h
.eh_frame:000000000000F24E                 db  83h
.eh_frame:000000000000F24F                 db    4
.eh_frame:000000000000F250                 db  73h ; s
.eh_frame:000000000000F251                 db  0Eh
.eh_frame:000000000000F252                 db  18h
.eh_frame:000000000000F253                 db  41h ; A
.eh_frame:000000000000F254                 db  0Eh
.eh_frame:000000000000F255                 db  10h
.eh_frame:000000000000F256                 db  42h ; B
.eh_frame:000000000000F257                 db  0Eh
.eh_frame:000000000000F258                 db    8
.eh_frame:000000000000F259                 db    0
.eh_frame:000000000000F25A                 db    0
.eh_frame:000000000000F25B                 db    0
.eh_frame:000000000000F25C                 db  28h ; (
.eh_frame:000000000000F25D                 db    0
.eh_frame:000000000000F25E                 db    0
.eh_frame:000000000000F25F                 db    0
.eh_frame:000000000000F260                 db 0E0h
.eh_frame:000000000000F261                 db    7
.eh_frame:000000000000F262                 db    0
.eh_frame:000000000000F263                 db    0
.eh_frame:000000000000F264                 db 0ECh
.eh_frame:000000000000F265                 db  6Bh ; k
.eh_frame:000000000000F266                 db 0FFh
.eh_frame:000000000000F267                 db 0FFh
.eh_frame:000000000000F268                 db  41h ; A
.eh_frame:000000000000F269                 db    0
.eh_frame:000000000000F26A                 db    0
.eh_frame:000000000000F26B                 db    0
.eh_frame:000000000000F26C                 db    0
.eh_frame:000000000000F26D                 db  45h ; E
.eh_frame:000000000000F26E                 db  0Eh
.eh_frame:000000000000F26F                 db  10h
.eh_frame:000000000000F270                 db  8Ch
.eh_frame:000000000000F271                 db    2
.eh_frame:000000000000F272                 db  41h ; A
.eh_frame:000000000000F273                 db  0Eh
.eh_frame:000000000000F274                 db  18h
.eh_frame:000000000000F275                 db  86h
.eh_frame:000000000000F276                 db    3
.eh_frame:000000000000F277                 db  44h ; D
.eh_frame:000000000000F278                 db  0Eh
.eh_frame:000000000000F279                 db  20h
.eh_frame:000000000000F27A                 db  83h
.eh_frame:000000000000F27B                 db    4
.eh_frame:000000000000F27C                 db  73h ; s
.eh_frame:000000000000F27D                 db  0Eh
.eh_frame:000000000000F27E                 db  18h
.eh_frame:000000000000F27F                 db  41h ; A
.eh_frame:000000000000F280                 db  0Eh
.eh_frame:000000000000F281                 db  10h
.eh_frame:000000000000F282                 db  42h ; B
.eh_frame:000000000000F283                 db  0Eh
.eh_frame:000000000000F284                 db    8
.eh_frame:000000000000F285                 db    0
.eh_frame:000000000000F286                 db    0
.eh_frame:000000000000F287                 db    0
.eh_frame:000000000000F288                 db  74h ; t
.eh_frame:000000000000F289                 db    0
.eh_frame:000000000000F28A                 db    0
.eh_frame:000000000000F28B                 db    0
.eh_frame:000000000000F28C                 db  0Ch
.eh_frame:000000000000F28D                 db    8
.eh_frame:000000000000F28E                 db    0
.eh_frame:000000000000F28F                 db    0
.eh_frame:000000000000F290                 db  10h
.eh_frame:000000000000F291                 db  6Ch ; l
.eh_frame:000000000000F292                 db 0FFh
.eh_frame:000000000000F293                 db 0FFh
.eh_frame:000000000000F294                 db 0B2h
.eh_frame:000000000000F295                 db  1Ah
.eh_frame:000000000000F296                 db    0
.eh_frame:000000000000F297                 db    0
.eh_frame:000000000000F298                 db    0
.eh_frame:000000000000F299                 db  42h ; B
.eh_frame:000000000000F29A                 db  0Eh
.eh_frame:000000000000F29B                 db  10h
.eh_frame:000000000000F29C                 db  8Fh
.eh_frame:000000000000F29D                 db    2
.eh_frame:000000000000F29E                 db  42h ; B
.eh_frame:000000000000F29F                 db  0Eh
.eh_frame:000000000000F2A0                 db  18h
.eh_frame:000000000000F2A1                 db  8Eh
.eh_frame:000000000000F2A2                 db    3
.eh_frame:000000000000F2A3                 db  45h ; E
.eh_frame:000000000000F2A4                 db  0Eh
.eh_frame:000000000000F2A5                 db  20h
.eh_frame:000000000000F2A6                 db  8Dh
.eh_frame:000000000000F2A7                 db    4
.eh_frame:000000000000F2A8                 db  42h ; B
.eh_frame:000000000000F2A9                 db  0Eh
.eh_frame:000000000000F2AA                 db  28h ; (
.eh_frame:000000000000F2AB                 db  8Ch
.eh_frame:000000000000F2AC                 db    5
.eh_frame:000000000000F2AD                 db  44h ; D
.eh_frame:000000000000F2AE                 db  0Eh
.eh_frame:000000000000F2AF                 db  30h ; 0
.eh_frame:000000000000F2B0                 db  86h
.eh_frame:000000000000F2B1                 db    6
.eh_frame:000000000000F2B2                 db  41h ; A
.eh_frame:000000000000F2B3                 db  0Eh
.eh_frame:000000000000F2B4                 db  38h ; 8
.eh_frame:000000000000F2B5                 db  83h
.eh_frame:000000000000F2B6                 db    7
.eh_frame:000000000000F2B7                 db  4Ah ; J
.eh_frame:000000000000F2B8                 db  0Eh
.eh_frame:000000000000F2B9                 db  80h
.eh_frame:000000000000F2BA                 db  0Ah
.eh_frame:000000000000F2BB                 db    2
.eh_frame:000000000000F2BC                 db 0D6h
.eh_frame:000000000000F2BD                 db  0Ah
.eh_frame:000000000000F2BE                 db  0Eh
.eh_frame:000000000000F2BF                 db  38h ; 8
.eh_frame:000000000000F2C0                 db  41h ; A
.eh_frame:000000000000F2C1                 db  0Eh
.eh_frame:000000000000F2C2                 db  30h ; 0
.eh_frame:000000000000F2C3                 db  41h ; A
.eh_frame:000000000000F2C4                 db  0Eh
.eh_frame:000000000000F2C5                 db  28h ; (
.eh_frame:000000000000F2C6                 db  42h ; B
.eh_frame:000000000000F2C7                 db  0Eh
.eh_frame:000000000000F2C8                 db  20h
.eh_frame:000000000000F2C9                 db  42h ; B
.eh_frame:000000000000F2CA                 db  0Eh
.eh_frame:000000000000F2CB                 db  18h
.eh_frame:000000000000F2CC                 db  42h ; B
.eh_frame:000000000000F2CD                 db  0Eh
.eh_frame:000000000000F2CE                 db  10h
.eh_frame:000000000000F2CF                 db  42h ; B
.eh_frame:000000000000F2D0                 db  0Eh
.eh_frame:000000000000F2D1                 db    8
.eh_frame:000000000000F2D2                 db  46h ; F
.eh_frame:000000000000F2D3                 db  0Bh
.eh_frame:000000000000F2D4                 db    3
.eh_frame:000000000000F2D5                 db  99h
.eh_frame:000000000000F2D6                 db    5
.eh_frame:000000000000F2D7                 db  0Eh
.eh_frame:000000000000F2D8                 db  88h
.eh_frame:000000000000F2D9                 db  0Ah
.eh_frame:000000000000F2DA                 db  44h ; D
.eh_frame:000000000000F2DB                 db  0Eh
.eh_frame:000000000000F2DC                 db  90h
.eh_frame:000000000000F2DD                 db  0Ah
.eh_frame:000000000000F2DE                 db  44h ; D
.eh_frame:000000000000F2DF                 db  0Eh
.eh_frame:000000000000F2E0                 db  98h
.eh_frame:000000000000F2E1                 db  0Ah
.eh_frame:000000000000F2E2                 db  45h ; E
.eh_frame:000000000000F2E3                 db  0Eh
.eh_frame:000000000000F2E4                 db 0A0h
.eh_frame:000000000000F2E5                 db  0Ah
.eh_frame:000000000000F2E6                 db  4Eh ; N
.eh_frame:000000000000F2E7                 db  0Eh
.eh_frame:000000000000F2E8                 db  80h
.eh_frame:000000000000F2E9                 db  0Ah
.eh_frame:000000000000F2EA                 db    2
.eh_frame:000000000000F2EB                 db  98h
.eh_frame:000000000000F2EC                 db  0Eh
.eh_frame:000000000000F2ED                 db  88h
.eh_frame:000000000000F2EE                 db  0Ah
.eh_frame:000000000000F2EF                 db  44h ; D
.eh_frame:000000000000F2F0                 db  0Eh
.eh_frame:000000000000F2F1                 db  90h
.eh_frame:000000000000F2F2                 db  0Ah
.eh_frame:000000000000F2F3                 db  44h ; D
.eh_frame:000000000000F2F4                 db  0Eh
.eh_frame:000000000000F2F5                 db  98h
.eh_frame:000000000000F2F6                 db  0Ah
.eh_frame:000000000000F2F7                 db  45h ; E
.eh_frame:000000000000F2F8                 db  0Eh
.eh_frame:000000000000F2F9                 db 0A0h
.eh_frame:000000000000F2FA                 db  0Ah
.eh_frame:000000000000F2FB                 db  5Dh ; ]
.eh_frame:000000000000F2FC                 db  0Eh
.eh_frame:000000000000F2FD                 db  80h
.eh_frame:000000000000F2FE                 db  0Ah
.eh_frame:000000000000F2FF                 db    0
.eh_frame:000000000000F300                 db  2Ch ; ,
.eh_frame:000000000000F301                 db    0
.eh_frame:000000000000F302                 db    0
.eh_frame:000000000000F303                 db    0
.eh_frame:000000000000F304                 db  84h
.eh_frame:000000000000F305                 db    8
.eh_frame:000000000000F306                 db    0
.eh_frame:000000000000F307                 db    0
.eh_frame:000000000000F308                 db  58h ; X
.eh_frame:000000000000F309                 db  86h
.eh_frame:000000000000F30A                 db 0FFh
.eh_frame:000000000000F30B                 db 0FFh
.eh_frame:000000000000F30C                 db  4Eh ; N
.eh_frame:000000000000F30D                 db    0
.eh_frame:000000000000F30E                 db    0
.eh_frame:000000000000F30F                 db    0
.eh_frame:000000000000F310                 db    0
.eh_frame:000000000000F311                 db  44h ; D
.eh_frame:000000000000F312                 db  0Eh
.eh_frame:000000000000F313                 db  20h
.eh_frame:000000000000F314                 db  57h ; W
.eh_frame:000000000000F315                 db  0Eh
.eh_frame:000000000000F316                 db  28h ; (
.eh_frame:000000000000F317                 db  45h ; E
.eh_frame:000000000000F318                 db  0Eh
.eh_frame:000000000000F319                 db  30h ; 0
.eh_frame:000000000000F31A                 db  49h ; I
.eh_frame:000000000000F31B                 db  0Eh
.eh_frame:000000000000F31C                 db  38h ; 8
.eh_frame:000000000000F31D                 db  42h ; B
.eh_frame:000000000000F31E                 db  0Eh
.eh_frame:000000000000F31F                 db  40h ; @
.eh_frame:000000000000F320                 db  49h ; I
.eh_frame:000000000000F321                 db  0Eh
.eh_frame:000000000000F322                 db  20h
.eh_frame:000000000000F323                 db  54h ; T
.eh_frame:000000000000F324                 db  0Ah
.eh_frame:000000000000F325                 db  0Eh
.eh_frame:000000000000F326                 db    8
.eh_frame:000000000000F327                 db  41h ; A
.eh_frame:000000000000F328                 db  0Bh
.eh_frame:000000000000F329                 db    0
.eh_frame:000000000000F32A                 db    0
.eh_frame:000000000000F32B                 db    0
.eh_frame:000000000000F32C                 db    0
.eh_frame:000000000000F32D                 db    0
.eh_frame:000000000000F32E                 db    0
.eh_frame:000000000000F32F                 db    0
.eh_frame:000000000000F330                 db  1Ch
.eh_frame:000000000000F331                 db    0
.eh_frame:000000000000F332                 db    0
.eh_frame:000000000000F333                 db    0
.eh_frame:000000000000F334                 db 0B4h
.eh_frame:000000000000F335                 db    8
.eh_frame:000000000000F336                 db    0
.eh_frame:000000000000F337                 db    0
.eh_frame:000000000000F338                 db  78h ; x
.eh_frame:000000000000F339                 db  86h
.eh_frame:000000000000F33A                 db 0FFh
.eh_frame:000000000000F33B                 db 0FFh
.eh_frame:000000000000F33C                 db  9Fh
.eh_frame:000000000000F33D                 db    0
.eh_frame:000000000000F33E                 db    0
.eh_frame:000000000000F33F                 db    0
.eh_frame:000000000000F340                 db    0
.eh_frame:000000000000F341                 db  44h ; D
.eh_frame:000000000000F342                 db  0Eh
.eh_frame:000000000000F343                 db  10h
.eh_frame:000000000000F344                 db  83h
.eh_frame:000000000000F345                 db    2
.eh_frame:000000000000F346                 db    2
.eh_frame:000000000000F347                 db  78h ; x
.eh_frame:000000000000F348                 db  0Ah
.eh_frame:000000000000F349                 db  0Eh
.eh_frame:000000000000F34A                 db    8
.eh_frame:000000000000F34B                 db  41h ; A
.eh_frame:000000000000F34C                 db  0Bh
.eh_frame:000000000000F34D                 db    0
.eh_frame:000000000000F34E                 db    0
.eh_frame:000000000000F34F                 db    0
.eh_frame:000000000000F350                 db  40h ; @
.eh_frame:000000000000F351                 db    0
.eh_frame:000000000000F352                 db    0
.eh_frame:000000000000F353                 db    0
.eh_frame:000000000000F354                 db 0D4h
.eh_frame:000000000000F355                 db    8
.eh_frame:000000000000F356                 db    0
.eh_frame:000000000000F357                 db    0
.eh_frame:000000000000F358                 db 0F8h
.eh_frame:000000000000F359                 db  86h
.eh_frame:000000000000F35A                 db 0FFh
.eh_frame:000000000000F35B                 db 0FFh
.eh_frame:000000000000F35C                 db 0E7h
.eh_frame:000000000000F35D                 db    0
.eh_frame:000000000000F35E                 db    0
.eh_frame:000000000000F35F                 db    0
.eh_frame:000000000000F360                 db    0
.eh_frame:000000000000F361                 db  41h ; A
.eh_frame:000000000000F362                 db  0Eh
.eh_frame:000000000000F363                 db  10h
.eh_frame:000000000000F364                 db  86h
.eh_frame:000000000000F365                 db    2
.eh_frame:000000000000F366                 db  41h ; A
.eh_frame:000000000000F367                 db  0Eh
.eh_frame:000000000000F368                 db  18h
.eh_frame:000000000000F369                 db  83h
.eh_frame:000000000000F36A                 db    3
.eh_frame:000000000000F36B                 db  49h ; I
.eh_frame:000000000000F36C                 db  0Eh
.eh_frame:000000000000F36D                 db  20h
.eh_frame:000000000000F36E                 db  6Eh ; n
.eh_frame:000000000000F36F                 db  0Ah
.eh_frame:000000000000F370                 db  0Eh
.eh_frame:000000000000F371                 db  18h
.eh_frame:000000000000F372                 db  41h ; A
.eh_frame:000000000000F373                 db  0Eh
.eh_frame:000000000000F374                 db  10h
.eh_frame:000000000000F375                 db  41h ; A
.eh_frame:000000000000F376                 db  0Eh
.eh_frame:000000000000F377                 db    8
.eh_frame:000000000000F378                 db  45h ; E
.eh_frame:000000000000F379                 db  0Bh
.eh_frame:000000000000F37A                 db    2
.eh_frame:000000000000F37B                 db  4Ah ; J
.eh_frame:000000000000F37C                 db  0Ah
.eh_frame:000000000000F37D                 db  0Eh
.eh_frame:000000000000F37E                 db  18h
.eh_frame:000000000000F37F                 db  41h ; A
.eh_frame:000000000000F380                 db  0Eh
.eh_frame:000000000000F381                 db  10h
.eh_frame:000000000000F382                 db  41h ; A
.eh_frame:000000000000F383                 db  0Eh
.eh_frame:000000000000F384                 db    8
.eh_frame:000000000000F385                 db  44h ; D
.eh_frame:000000000000F386                 db  0Bh
.eh_frame:000000000000F387                 db    2
.eh_frame:000000000000F388                 db  54h ; T
.eh_frame:000000000000F389                 db  0Eh
.eh_frame:000000000000F38A                 db  18h
.eh_frame:000000000000F38B                 db  41h ; A
.eh_frame:000000000000F38C                 db  0Eh
.eh_frame:000000000000F38D                 db  10h
.eh_frame:000000000000F38E                 db  41h ; A
.eh_frame:000000000000F38F                 db  0Eh
.eh_frame:000000000000F390                 db    8
.eh_frame:000000000000F391                 db    0
.eh_frame:000000000000F392                 db    0
.eh_frame:000000000000F393                 db    0
.eh_frame:000000000000F394                 db  74h ; t
.eh_frame:000000000000F395                 db    0
.eh_frame:000000000000F396                 db    0
.eh_frame:000000000000F397                 db    0
.eh_frame:000000000000F398                 db  18h
.eh_frame:000000000000F399                 db    9
.eh_frame:000000000000F39A                 db    0
.eh_frame:000000000000F39B                 db    0
.eh_frame:000000000000F39C                 db 0A4h
.eh_frame:000000000000F39D                 db  87h
.eh_frame:000000000000F39E                 db 0FFh
.eh_frame:000000000000F39F                 db 0FFh
.eh_frame:000000000000F3A0                 db  34h ; 4
.eh_frame:000000000000F3A1                 db  12h
.eh_frame:000000000000F3A2                 db    0
.eh_frame:000000000000F3A3                 db    0
.eh_frame:000000000000F3A4                 db    0
.eh_frame:000000000000F3A5                 db  42h ; B
.eh_frame:000000000000F3A6                 db  0Eh
.eh_frame:000000000000F3A7                 db  10h
.eh_frame:000000000000F3A8                 db  8Fh
.eh_frame:000000000000F3A9                 db    2
.eh_frame:000000000000F3AA                 db  42h ; B
.eh_frame:000000000000F3AB                 db  0Eh
.eh_frame:000000000000F3AC                 db  18h
.eh_frame:000000000000F3AD                 db  8Eh
.eh_frame:000000000000F3AE                 db    3
.eh_frame:000000000000F3AF                 db  45h ; E
.eh_frame:000000000000F3B0                 db  0Eh
.eh_frame:000000000000F3B1                 db  20h
.eh_frame:000000000000F3B2                 db  8Dh
.eh_frame:000000000000F3B3                 db    4
.eh_frame:000000000000F3B4                 db  42h ; B
.eh_frame:000000000000F3B5                 db  0Eh
.eh_frame:000000000000F3B6                 db  28h ; (
.eh_frame:000000000000F3B7                 db  8Ch
.eh_frame:000000000000F3B8                 db    5
.eh_frame:000000000000F3B9                 db  44h ; D
.eh_frame:000000000000F3BA                 db  0Eh
.eh_frame:000000000000F3BB                 db  30h ; 0
.eh_frame:000000000000F3BC                 db  86h
.eh_frame:000000000000F3BD                 db    6
.eh_frame:000000000000F3BE                 db  41h ; A
.eh_frame:000000000000F3BF                 db  0Eh
.eh_frame:000000000000F3C0                 db  38h ; 8
.eh_frame:000000000000F3C1                 db  83h
.eh_frame:000000000000F3C2                 db    7
.eh_frame:000000000000F3C3                 db  53h ; S
.eh_frame:000000000000F3C4                 db  0Eh
.eh_frame:000000000000F3C5                 db 0F0h
.eh_frame:000000000000F3C6                 db    1
.eh_frame:000000000000F3C7                 db    3
.eh_frame:000000000000F3C8                 db  81h
.eh_frame:000000000000F3C9                 db  0Bh
.eh_frame:000000000000F3CA                 db  0Eh
.eh_frame:000000000000F3CB                 db 0F8h
.eh_frame:000000000000F3CC                 db    1
.eh_frame:000000000000F3CD                 db  4Ah ; J
.eh_frame:000000000000F3CE                 db  0Eh
.eh_frame:000000000000F3CF                 db  80h
.eh_frame:000000000000F3D0                 db    2
.eh_frame:000000000000F3D1                 db  44h ; D
.eh_frame:000000000000F3D2                 db  0Eh
.eh_frame:000000000000F3D3                 db  88h
.eh_frame:000000000000F3D4                 db    2
.eh_frame:000000000000F3D5                 db  45h ; E
.eh_frame:000000000000F3D6                 db  0Eh
.eh_frame:000000000000F3D7                 db  90h
.eh_frame:000000000000F3D8                 db    2
.eh_frame:000000000000F3D9                 db  5Fh ; _
.eh_frame:000000000000F3DA                 db  0Eh
.eh_frame:000000000000F3DB                 db 0F0h
.eh_frame:000000000000F3DC                 db    1
.eh_frame:000000000000F3DD                 db  64h ; d
.eh_frame:000000000000F3DE                 db  0Ah
.eh_frame:000000000000F3DF                 db  0Eh
.eh_frame:000000000000F3E0                 db  38h ; 8
.eh_frame:000000000000F3E1                 db  41h ; A
.eh_frame:000000000000F3E2                 db  0Eh
.eh_frame:000000000000F3E3                 db  30h ; 0
.eh_frame:000000000000F3E4                 db  41h ; A
.eh_frame:000000000000F3E5                 db  0Eh
.eh_frame:000000000000F3E6                 db  28h ; (
.eh_frame:000000000000F3E7                 db  42h ; B
.eh_frame:000000000000F3E8                 db  0Eh
.eh_frame:000000000000F3E9                 db  20h
.eh_frame:000000000000F3EA                 db  42h ; B
.eh_frame:000000000000F3EB                 db  0Eh
.eh_frame:000000000000F3EC                 db  18h
.eh_frame:000000000000F3ED                 db  42h ; B
.eh_frame:000000000000F3EE                 db  0Eh
.eh_frame:000000000000F3EF                 db  10h
.eh_frame:000000000000F3F0                 db  42h ; B
.eh_frame:000000000000F3F1                 db  0Eh
.eh_frame:000000000000F3F2                 db    8
.eh_frame:000000000000F3F3                 db  44h ; D
.eh_frame:000000000000F3F4                 db  0Bh
.eh_frame:000000000000F3F5                 db    3
.eh_frame:000000000000F3F6                 db  99h
.eh_frame:000000000000F3F7                 db    5
.eh_frame:000000000000F3F8                 db  0Eh
.eh_frame:000000000000F3F9                 db 0F8h
.eh_frame:000000000000F3FA                 db    1
.eh_frame:000000000000F3FB                 db  4Dh ; M
.eh_frame:000000000000F3FC                 db  0Eh
.eh_frame:000000000000F3FD                 db  80h
.eh_frame:000000000000F3FE                 db    2
.eh_frame:000000000000F3FF                 db  44h ; D
.eh_frame:000000000000F400                 db  0Eh
.eh_frame:000000000000F401                 db  88h
.eh_frame:000000000000F402                 db    2
.eh_frame:000000000000F403                 db  47h ; G
.eh_frame:000000000000F404                 db  0Eh
.eh_frame:000000000000F405                 db  90h
.eh_frame:000000000000F406                 db    2
.eh_frame:000000000000F407                 db  5Bh ; [
.eh_frame:000000000000F408                 db  0Eh
.eh_frame:000000000000F409                 db 0F0h
.eh_frame:000000000000F40A                 db    1
.eh_frame:000000000000F40B                 db    0
.eh_frame:000000000000F40C                 db  68h ; h
.eh_frame:000000000000F40D                 db    0
.eh_frame:000000000000F40E                 db    0
.eh_frame:000000000000F40F                 db    0
.eh_frame:000000000000F410                 db  90h
.eh_frame:000000000000F411                 db    9
.eh_frame:000000000000F412                 db    0
.eh_frame:000000000000F413                 db    0
.eh_frame:000000000000F414                 db  6Ch ; l
.eh_frame:000000000000F415                 db  99h
.eh_frame:000000000000F416                 db 0FFh
.eh_frame:000000000000F417                 db 0FFh
.eh_frame:000000000000F418                 db 0ABh
.eh_frame:000000000000F419                 db    1
.eh_frame:000000000000F41A                 db    0
.eh_frame:000000000000F41B                 db    0
.eh_frame:000000000000F41C                 db    0
.eh_frame:000000000000F41D                 db  42h ; B
.eh_frame:000000000000F41E                 db  0Eh
.eh_frame:000000000000F41F                 db  10h
.eh_frame:000000000000F420                 db  8Fh
.eh_frame:000000000000F421                 db    2
.eh_frame:000000000000F422                 db  42h ; B
.eh_frame:000000000000F423                 db  0Eh
.eh_frame:000000000000F424                 db  18h
.eh_frame:000000000000F425                 db  8Eh
.eh_frame:000000000000F426                 db    3
.eh_frame:000000000000F427                 db  45h ; E
.eh_frame:000000000000F428                 db  0Eh
.eh_frame:000000000000F429                 db  20h
.eh_frame:000000000000F42A                 db  8Dh
.eh_frame:000000000000F42B                 db    4
.eh_frame:000000000000F42C                 db  42h ; B
.eh_frame:000000000000F42D                 db  0Eh
.eh_frame:000000000000F42E                 db  28h ; (
.eh_frame:000000000000F42F                 db  8Ch
.eh_frame:000000000000F430                 db    5
.eh_frame:000000000000F431                 db  44h ; D
.eh_frame:000000000000F432                 db  0Eh
.eh_frame:000000000000F433                 db  30h ; 0
.eh_frame:000000000000F434                 db  86h
.eh_frame:000000000000F435                 db    6
.eh_frame:000000000000F436                 db  41h ; A
.eh_frame:000000000000F437                 db  0Eh
.eh_frame:000000000000F438                 db  38h ; 8
.eh_frame:000000000000F439                 db  83h
.eh_frame:000000000000F43A                 db    7
.eh_frame:000000000000F43B                 db  47h ; G
.eh_frame:000000000000F43C                 db  0Eh
.eh_frame:000000000000F43D                 db  60h ; `
.eh_frame:000000000000F43E                 db    2
.eh_frame:000000000000F43F                 db  99h
.eh_frame:000000000000F440                 db  0Eh
.eh_frame:000000000000F441                 db  68h ; h
.eh_frame:000000000000F442                 db  5Fh ; _
.eh_frame:000000000000F443                 db  0Eh
.eh_frame:000000000000F444                 db  70h ; p
.eh_frame:000000000000F445                 db  46h ; F
.eh_frame:000000000000F446                 db  0Eh
.eh_frame:000000000000F447                 db  78h ; x
.eh_frame:000000000000F448                 db  42h ; B
.eh_frame:000000000000F449                 db  0Eh
.eh_frame:000000000000F44A                 db  80h
.eh_frame:000000000000F44B                 db    1
.eh_frame:000000000000F44C                 db  59h ; Y
.eh_frame:000000000000F44D                 db  0Eh
.eh_frame:000000000000F44E                 db  60h ; `
.eh_frame:000000000000F44F                 db    2
.eh_frame:000000000000F450                 db  40h ; @
.eh_frame:000000000000F451                 db  0Eh
.eh_frame:000000000000F452                 db  68h ; h
.eh_frame:000000000000F453                 db  4Bh ; K
.eh_frame:000000000000F454                 db  0Eh
.eh_frame:000000000000F455                 db  70h ; p
.eh_frame:000000000000F456                 db  43h ; C
.eh_frame:000000000000F457                 db  0Eh
.eh_frame:000000000000F458                 db  78h ; x
.eh_frame:000000000000F459                 db  45h ; E
.eh_frame:000000000000F45A                 db  0Eh
.eh_frame:000000000000F45B                 db  80h
.eh_frame:000000000000F45C                 db    1
.eh_frame:000000000000F45D                 db  5Eh ; ^
.eh_frame:000000000000F45E                 db  0Eh
.eh_frame:000000000000F45F                 db  60h ; `
.eh_frame:000000000000F460                 db  4Ch ; L
.eh_frame:000000000000F461                 db  0Ah
.eh_frame:000000000000F462                 db  0Eh
.eh_frame:000000000000F463                 db  38h ; 8
.eh_frame:000000000000F464                 db  44h ; D
.eh_frame:000000000000F465                 db  0Eh
.eh_frame:000000000000F466                 db  30h ; 0
.eh_frame:000000000000F467                 db  41h ; A
.eh_frame:000000000000F468                 db  0Eh
.eh_frame:000000000000F469                 db  28h ; (
.eh_frame:000000000000F46A                 db  42h ; B
.eh_frame:000000000000F46B                 db  0Eh
.eh_frame:000000000000F46C                 db  20h
.eh_frame:000000000000F46D                 db  42h ; B
.eh_frame:000000000000F46E                 db  0Eh
.eh_frame:000000000000F46F                 db  18h
.eh_frame:000000000000F470                 db  42h ; B
.eh_frame:000000000000F471                 db  0Eh
.eh_frame:000000000000F472                 db  10h
.eh_frame:000000000000F473                 db  42h ; B
.eh_frame:000000000000F474                 db  0Eh
.eh_frame:000000000000F475                 db    8
.eh_frame:000000000000F476                 db  46h ; F
.eh_frame:000000000000F477                 db  0Bh
.eh_frame:000000000000F478                 db  28h ; (
.eh_frame:000000000000F479                 db    0
.eh_frame:000000000000F47A                 db    0
.eh_frame:000000000000F47B                 db    0
.eh_frame:000000000000F47C                 db 0FCh
.eh_frame:000000000000F47D                 db    9
.eh_frame:000000000000F47E                 db    0
.eh_frame:000000000000F47F                 db    0
.eh_frame:000000000000F480                 db 0B0h
.eh_frame:000000000000F481                 db  9Ah
.eh_frame:000000000000F482                 db 0FFh
.eh_frame:000000000000F483                 db 0FFh
.eh_frame:000000000000F484                 db  36h ; 6
.eh_frame:000000000000F485                 db    0
.eh_frame:000000000000F486                 db    0
.eh_frame:000000000000F487                 db    0
.eh_frame:000000000000F488                 db    0
.eh_frame:000000000000F489                 db  42h ; B
.eh_frame:000000000000F48A                 db  0Eh
.eh_frame:000000000000F48B                 db  10h
.eh_frame:000000000000F48C                 db  8Ch
.eh_frame:000000000000F48D                 db    2
.eh_frame:000000000000F48E                 db  41h ; A
.eh_frame:000000000000F48F                 db  0Eh
.eh_frame:000000000000F490                 db  18h
.eh_frame:000000000000F491                 db  86h
.eh_frame:000000000000F492                 db    3
.eh_frame:000000000000F493                 db  41h ; A
.eh_frame:000000000000F494                 db  0Eh
.eh_frame:000000000000F495                 db  20h
.eh_frame:000000000000F496                 db  83h
.eh_frame:000000000000F497                 db    4
.eh_frame:000000000000F498                 db  6Eh ; n
.eh_frame:000000000000F499                 db  0Eh
.eh_frame:000000000000F49A                 db  18h
.eh_frame:000000000000F49B                 db  41h ; A
.eh_frame:000000000000F49C                 db  0Eh
.eh_frame:000000000000F49D                 db  10h
.eh_frame:000000000000F49E                 db  42h ; B
.eh_frame:000000000000F49F                 db  0Eh
.eh_frame:000000000000F4A0                 db    8
.eh_frame:000000000000F4A1                 db    0
.eh_frame:000000000000F4A2                 db    0
.eh_frame:000000000000F4A3                 db    0
.eh_frame:000000000000F4A4                 db  10h
.eh_frame:000000000000F4A5                 db    0
.eh_frame:000000000000F4A6                 db    0
.eh_frame:000000000000F4A7                 db    0
.eh_frame:000000000000F4A8                 db  28h ; (
.eh_frame:000000000000F4A9                 db  0Ah
.eh_frame:000000000000F4AA                 db    0
.eh_frame:000000000000F4AB                 db    0
.eh_frame:000000000000F4AC                 db 0C4h
.eh_frame:000000000000F4AD                 db  9Ah
.eh_frame:000000000000F4AE                 db 0FFh
.eh_frame:000000000000F4AF                 db 0FFh
.eh_frame:000000000000F4B0                 db  11h
.eh_frame:000000000000F4B1                 db    0
.eh_frame:000000000000F4B2                 db    0
.eh_frame:000000000000F4B3                 db    0
.eh_frame:000000000000F4B4                 db    0
.eh_frame:000000000000F4B5                 db    0
.eh_frame:000000000000F4B6                 db    0
.eh_frame:000000000000F4B7                 db    0
.eh_frame:000000000000F4B8                 db  10h
.eh_frame:000000000000F4B9                 db    0
.eh_frame:000000000000F4BA                 db    0
.eh_frame:000000000000F4BB                 db    0
.eh_frame:000000000000F4BC                 db  3Ch ; <
.eh_frame:000000000000F4BD                 db  0Ah
.eh_frame:000000000000F4BE                 db    0
.eh_frame:000000000000F4BF                 db    0
.eh_frame:000000000000F4C0                 db 0D0h
.eh_frame:000000000000F4C1                 db  9Ah
.eh_frame:000000000000F4C2                 db 0FFh
.eh_frame:000000000000F4C3                 db 0FFh
.eh_frame:000000000000F4C4                 db  11h
.eh_frame:000000000000F4C5                 db    0
.eh_frame:000000000000F4C6                 db    0
.eh_frame:000000000000F4C7                 db    0
.eh_frame:000000000000F4C8                 db    0
.eh_frame:000000000000F4C9                 db    0
.eh_frame:000000000000F4CA                 db    0
.eh_frame:000000000000F4CB                 db    0
.eh_frame:000000000000F4CC                 db  10h
.eh_frame:000000000000F4CD                 db    0
.eh_frame:000000000000F4CE                 db    0
.eh_frame:000000000000F4CF                 db    0
.eh_frame:000000000000F4D0                 db  50h ; P
.eh_frame:000000000000F4D1                 db  0Ah
.eh_frame:000000000000F4D2                 db    0
.eh_frame:000000000000F4D3                 db    0
.eh_frame:000000000000F4D4                 db 0DCh
.eh_frame:000000000000F4D5                 db  9Ah
.eh_frame:000000000000F4D6                 db 0FFh
.eh_frame:000000000000F4D7                 db 0FFh
.eh_frame:000000000000F4D8                 db  35h ; 5
.eh_frame:000000000000F4D9                 db    0
.eh_frame:000000000000F4DA                 db    0
.eh_frame:000000000000F4DB                 db    0
.eh_frame:000000000000F4DC                 db    0
.eh_frame:000000000000F4DD                 db    0
.eh_frame:000000000000F4DE                 db    0
.eh_frame:000000000000F4DF                 db    0
.eh_frame:000000000000F4E0                 db  10h
.eh_frame:000000000000F4E1                 db    0
.eh_frame:000000000000F4E2                 db    0
.eh_frame:000000000000F4E3                 db    0
.eh_frame:000000000000F4E4                 db  64h ; d
.eh_frame:000000000000F4E5                 db  0Ah
.eh_frame:000000000000F4E6                 db    0
.eh_frame:000000000000F4E7                 db    0
.eh_frame:000000000000F4E8                 db    8
.eh_frame:000000000000F4E9                 db  9Bh
.eh_frame:000000000000F4EA                 db 0FFh
.eh_frame:000000000000F4EB                 db 0FFh
.eh_frame:000000000000F4EC                 db  15h
.eh_frame:000000000000F4ED                 db    0
.eh_frame:000000000000F4EE                 db    0
.eh_frame:000000000000F4EF                 db    0
.eh_frame:000000000000F4F0                 db    0
.eh_frame:000000000000F4F1                 db    0
.eh_frame:000000000000F4F2                 db    0
.eh_frame:000000000000F4F3                 db    0
.eh_frame:000000000000F4F4                 db  10h
.eh_frame:000000000000F4F5                 db    0
.eh_frame:000000000000F4F6                 db    0
.eh_frame:000000000000F4F7                 db    0
.eh_frame:000000000000F4F8                 db  78h ; x
.eh_frame:000000000000F4F9                 db  0Ah
.eh_frame:000000000000F4FA                 db    0
.eh_frame:000000000000F4FB                 db    0
.eh_frame:000000000000F4FC                 db  14h
.eh_frame:000000000000F4FD                 db  9Bh
.eh_frame:000000000000F4FE                 db 0FFh
.eh_frame:000000000000F4FF                 db 0FFh
.eh_frame:000000000000F500                 db  30h ; 0
.eh_frame:000000000000F501                 db    0
.eh_frame:000000000000F502                 db    0
.eh_frame:000000000000F503                 db    0
.eh_frame:000000000000F504                 db    0
.eh_frame:000000000000F505                 db  6Bh ; k
.eh_frame:000000000000F506                 db  0Eh
.eh_frame:000000000000F507                 db  10h
.eh_frame:000000000000F508                 db  50h ; P
.eh_frame:000000000000F509                 db    0
.eh_frame:000000000000F50A                 db    0
.eh_frame:000000000000F50B                 db    0
.eh_frame:000000000000F50C                 db  8Ch
.eh_frame:000000000000F50D                 db  0Ah
.eh_frame:000000000000F50E                 db    0
.eh_frame:000000000000F50F                 db    0
.eh_frame:000000000000F510                 db  30h ; 0
.eh_frame:000000000000F511                 db  9Bh
.eh_frame:000000000000F512                 db 0FFh
.eh_frame:000000000000F513                 db 0FFh
.eh_frame:000000000000F514                 db  74h ; t
.eh_frame:000000000000F515                 db    0
.eh_frame:000000000000F516                 db    0
.eh_frame:000000000000F517                 db    0
.eh_frame:000000000000F518                 db    0
.eh_frame:000000000000F519                 db  42h ; B
.eh_frame:000000000000F51A                 db  0Eh
.eh_frame:000000000000F51B                 db  10h
.eh_frame:000000000000F51C                 db  8Fh
.eh_frame:000000000000F51D                 db    2
.eh_frame:000000000000F51E                 db  42h ; B
.eh_frame:000000000000F51F                 db  0Eh
.eh_frame:000000000000F520                 db  18h
.eh_frame:000000000000F521                 db  8Eh
.eh_frame:000000000000F522                 db    3
.eh_frame:000000000000F523                 db  49h ; I
.eh_frame:000000000000F524                 db  0Eh
.eh_frame:000000000000F525                 db  20h
.eh_frame:000000000000F526                 db  8Dh
.eh_frame:000000000000F527                 db    4
.eh_frame:000000000000F528                 db  42h ; B
.eh_frame:000000000000F529                 db  0Eh
.eh_frame:000000000000F52A                 db  28h ; (
.eh_frame:000000000000F52B                 db  8Ch
.eh_frame:000000000000F52C                 db    5
.eh_frame:000000000000F52D                 db  44h ; D
.eh_frame:000000000000F52E                 db  0Eh
.eh_frame:000000000000F52F                 db  30h ; 0
.eh_frame:000000000000F530                 db  86h
.eh_frame:000000000000F531                 db    6
.eh_frame:000000000000F532                 db  41h ; A
.eh_frame:000000000000F533                 db  0Eh
.eh_frame:000000000000F534                 db  38h ; 8
.eh_frame:000000000000F535                 db  83h
.eh_frame:000000000000F536                 db    7
.eh_frame:000000000000F537                 db  4Dh ; M
.eh_frame:000000000000F538                 db  0Eh
.eh_frame:000000000000F539                 db  50h ; P
.eh_frame:000000000000F53A                 db  5Fh ; _
.eh_frame:000000000000F53B                 db  0Eh
.eh_frame:000000000000F53C                 db  58h ; X
.eh_frame:000000000000F53D                 db  47h ; G
.eh_frame:000000000000F53E                 db  0Eh
.eh_frame:000000000000F53F                 db  60h ; `
.eh_frame:000000000000F540                 db  46h ; F
.eh_frame:000000000000F541                 db  0Eh
.eh_frame:000000000000F542                 db  68h ; h
.eh_frame:000000000000F543                 db  44h ; D
.eh_frame:000000000000F544                 db  0Eh
.eh_frame:000000000000F545                 db  70h ; p
.eh_frame:000000000000F546                 db  58h ; X
.eh_frame:000000000000F547                 db  0Eh
.eh_frame:000000000000F548                 db  38h ; 8
.eh_frame:000000000000F549                 db  41h ; A
.eh_frame:000000000000F54A                 db  0Eh
.eh_frame:000000000000F54B                 db  30h ; 0
.eh_frame:000000000000F54C                 db  41h ; A
.eh_frame:000000000000F54D                 db  0Eh
.eh_frame:000000000000F54E                 db  28h ; (
.eh_frame:000000000000F54F                 db  42h ; B
.eh_frame:000000000000F550                 db  0Eh
.eh_frame:000000000000F551                 db  20h
.eh_frame:000000000000F552                 db  42h ; B
.eh_frame:000000000000F553                 db  0Eh
.eh_frame:000000000000F554                 db  18h
.eh_frame:000000000000F555                 db  42h ; B
.eh_frame:000000000000F556                 db  0Eh
.eh_frame:000000000000F557                 db  10h
.eh_frame:000000000000F558                 db  42h ; B
.eh_frame:000000000000F559                 db  0Eh
.eh_frame:000000000000F55A                 db    8
.eh_frame:000000000000F55B                 db    0
.eh_frame:000000000000F55C                 db  68h ; h
.eh_frame:000000000000F55D                 db    0
.eh_frame:000000000000F55E                 db    0
.eh_frame:000000000000F55F                 db    0
.eh_frame:000000000000F560                 db 0E0h
.eh_frame:000000000000F561                 db  0Ah
.eh_frame:000000000000F562                 db    0
.eh_frame:000000000000F563                 db    0
.eh_frame:000000000000F564                 db  5Ch ; \
.eh_frame:000000000000F565                 db  9Bh
.eh_frame:000000000000F566                 db 0FFh
.eh_frame:000000000000F567                 db 0FFh
.eh_frame:000000000000F568                 db 0E3h
.eh_frame:000000000000F569                 db    0
.eh_frame:000000000000F56A                 db    0
.eh_frame:000000000000F56B                 db    0
.eh_frame:000000000000F56C                 db    0
.eh_frame:000000000000F56D                 db  42h ; B
.eh_frame:000000000000F56E                 db  0Eh
.eh_frame:000000000000F56F                 db  10h
.eh_frame:000000000000F570                 db  8Fh
.eh_frame:000000000000F571                 db    2
.eh_frame:000000000000F572                 db  42h ; B
.eh_frame:000000000000F573                 db  0Eh
.eh_frame:000000000000F574                 db  18h
.eh_frame:000000000000F575                 db  8Eh
.eh_frame:000000000000F576                 db    3
.eh_frame:000000000000F577                 db  49h ; I
.eh_frame:000000000000F578                 db  0Eh
.eh_frame:000000000000F579                 db  20h
.eh_frame:000000000000F57A                 db  8Dh
.eh_frame:000000000000F57B                 db    4
.eh_frame:000000000000F57C                 db  42h ; B
.eh_frame:000000000000F57D                 db  0Eh
.eh_frame:000000000000F57E                 db  28h ; (
.eh_frame:000000000000F57F                 db  8Ch
.eh_frame:000000000000F580                 db    5
.eh_frame:000000000000F581                 db  44h ; D
.eh_frame:000000000000F582                 db  0Eh
.eh_frame:000000000000F583                 db  30h ; 0
.eh_frame:000000000000F584                 db  86h
.eh_frame:000000000000F585                 db    6
.eh_frame:000000000000F586                 db  41h ; A
.eh_frame:000000000000F587                 db  0Eh
.eh_frame:000000000000F588                 db  38h ; 8
.eh_frame:000000000000F589                 db  83h
.eh_frame:000000000000F58A                 db    7
.eh_frame:000000000000F58B                 db  4Dh ; M
.eh_frame:000000000000F58C                 db  0Eh
.eh_frame:000000000000F58D                 db  70h ; p
.eh_frame:000000000000F58E                 db  65h ; e
.eh_frame:000000000000F58F                 db  0Eh
.eh_frame:000000000000F590                 db  78h ; x
.eh_frame:000000000000F591                 db  4Dh ; M
.eh_frame:000000000000F592                 db  0Eh
.eh_frame:000000000000F593                 db  80h
.eh_frame:000000000000F594                 db    1
.eh_frame:000000000000F595                 db  46h ; F
.eh_frame:000000000000F596                 db  0Eh
.eh_frame:000000000000F597                 db  88h
.eh_frame:000000000000F598                 db    1
.eh_frame:000000000000F599                 db  42h ; B
.eh_frame:000000000000F59A                 db  0Eh
.eh_frame:000000000000F59B                 db  90h
.eh_frame:000000000000F59C                 db    1
.eh_frame:000000000000F59D                 db  5Eh ; ^
.eh_frame:000000000000F59E                 db  0Eh
.eh_frame:000000000000F59F                 db  70h ; p
.eh_frame:000000000000F5A0                 db  56h ; V
.eh_frame:000000000000F5A1                 db  0Eh
.eh_frame:000000000000F5A2                 db  78h ; x
.eh_frame:000000000000F5A3                 db  43h ; C
.eh_frame:000000000000F5A4                 db  0Eh
.eh_frame:000000000000F5A5                 db  80h
.eh_frame:000000000000F5A6                 db    1
.eh_frame:000000000000F5A7                 db  43h ; C
.eh_frame:000000000000F5A8                 db  0Eh
.eh_frame:000000000000F5A9                 db  88h
.eh_frame:000000000000F5AA                 db    1
.eh_frame:000000000000F5AB                 db  56h ; V
.eh_frame:000000000000F5AC                 db  0Eh
.eh_frame:000000000000F5AD                 db  90h
.eh_frame:000000000000F5AE                 db    1
.eh_frame:000000000000F5AF                 db  52h ; R
.eh_frame:000000000000F5B0                 db  0Eh
.eh_frame:000000000000F5B1                 db  70h ; p
.eh_frame:000000000000F5B2                 db  5Bh ; [
.eh_frame:000000000000F5B3                 db  0Eh
.eh_frame:000000000000F5B4                 db  38h ; 8
.eh_frame:000000000000F5B5                 db  41h ; A
.eh_frame:000000000000F5B6                 db  0Eh
.eh_frame:000000000000F5B7                 db  30h ; 0
.eh_frame:000000000000F5B8                 db  41h ; A
.eh_frame:000000000000F5B9                 db  0Eh
.eh_frame:000000000000F5BA                 db  28h ; (
.eh_frame:000000000000F5BB                 db  42h ; B
.eh_frame:000000000000F5BC                 db  0Eh
.eh_frame:000000000000F5BD                 db  20h
.eh_frame:000000000000F5BE                 db  42h ; B
.eh_frame:000000000000F5BF                 db  0Eh
.eh_frame:000000000000F5C0                 db  18h
.eh_frame:000000000000F5C1                 db  42h ; B
.eh_frame:000000000000F5C2                 db  0Eh
.eh_frame:000000000000F5C3                 db  10h
.eh_frame:000000000000F5C4                 db  42h ; B
.eh_frame:000000000000F5C5                 db  0Eh
.eh_frame:000000000000F5C6                 db    8
.eh_frame:000000000000F5C7                 db    0
.eh_frame:000000000000F5C8                 db  10h
.eh_frame:000000000000F5C9                 db    0
.eh_frame:000000000000F5CA                 db    0
.eh_frame:000000000000F5CB                 db    0
.eh_frame:000000000000F5CC                 db  4Ch ; L
.eh_frame:000000000000F5CD                 db  0Bh
.eh_frame:000000000000F5CE                 db    0
.eh_frame:000000000000F5CF                 db    0
.eh_frame:000000000000F5D0                 db 0E0h
.eh_frame:000000000000F5D1                 db  9Bh
.eh_frame:000000000000F5D2                 db 0FFh
.eh_frame:000000000000F5D3                 db 0FFh
.eh_frame:000000000000F5D4                 db  0Ah
.eh_frame:000000000000F5D5                 db    0
.eh_frame:000000000000F5D6                 db    0
.eh_frame:000000000000F5D7                 db    0
.eh_frame:000000000000F5D8                 db    0
.eh_frame:000000000000F5D9                 db    0
.eh_frame:000000000000F5DA                 db    0
.eh_frame:000000000000F5DB                 db    0
.eh_frame:000000000000F5DC                 db  28h ; (
.eh_frame:000000000000F5DD                 db    0
.eh_frame:000000000000F5DE                 db    0
.eh_frame:000000000000F5DF                 db    0
.eh_frame:000000000000F5E0                 db  60h ; `
.eh_frame:000000000000F5E1                 db  0Bh
.eh_frame:000000000000F5E2                 db    0
.eh_frame:000000000000F5E3                 db    0
.eh_frame:000000000000F5E4                 db 0DCh
.eh_frame:000000000000F5E5                 db  9Bh
.eh_frame:000000000000F5E6                 db 0FFh
.eh_frame:000000000000F5E7                 db 0FFh
.eh_frame:000000000000F5E8                 db  93h
.eh_frame:000000000000F5E9                 db    0
.eh_frame:000000000000F5EA                 db    0
.eh_frame:000000000000F5EB                 db    0
.eh_frame:000000000000F5EC                 db    0
.eh_frame:000000000000F5ED                 db  48h ; H
.eh_frame:000000000000F5EE                 db  0Eh
.eh_frame:000000000000F5EF                 db  10h
.eh_frame:000000000000F5F0                 db  8Ch
.eh_frame:000000000000F5F1                 db    2
.eh_frame:000000000000F5F2                 db  48h ; H
.eh_frame:000000000000F5F3                 db  0Eh
.eh_frame:000000000000F5F4                 db  18h
.eh_frame:000000000000F5F5                 db  86h
.eh_frame:000000000000F5F6                 db    3
.eh_frame:000000000000F5F7                 db  41h ; A
.eh_frame:000000000000F5F8                 db  0Eh
.eh_frame:000000000000F5F9                 db  20h
.eh_frame:000000000000F5FA                 db  83h
.eh_frame:000000000000F5FB                 db    4
.eh_frame:000000000000F5FC                 db    2
.eh_frame:000000000000F5FD                 db  74h ; t
.eh_frame:000000000000F5FE                 db  0Eh
.eh_frame:000000000000F5FF                 db  18h
.eh_frame:000000000000F600                 db  4Bh ; K
.eh_frame:000000000000F601                 db  0Eh
.eh_frame:000000000000F602                 db  10h
.eh_frame:000000000000F603                 db  42h ; B
.eh_frame:000000000000F604                 db  0Eh
.eh_frame:000000000000F605                 db    8
.eh_frame:000000000000F606                 db    0
.eh_frame:000000000000F607                 db    0
.eh_frame:000000000000F608                 db  10h
.eh_frame:000000000000F609                 db    0
.eh_frame:000000000000F60A                 db    0
.eh_frame:000000000000F60B                 db    0
.eh_frame:000000000000F60C                 db  8Ch
.eh_frame:000000000000F60D                 db  0Bh
.eh_frame:000000000000F60E                 db    0
.eh_frame:000000000000F60F                 db    0
.eh_frame:000000000000F610                 db  50h ; P
.eh_frame:000000000000F611                 db  9Ch
.eh_frame:000000000000F612                 db 0FFh
.eh_frame:000000000000F613                 db 0FFh
.eh_frame:000000000000F614                 db  13h
.eh_frame:000000000000F615                 db    0
.eh_frame:000000000000F616                 db    0
.eh_frame:000000000000F617                 db    0
.eh_frame:000000000000F618                 db    0
.eh_frame:000000000000F619                 db    0
.eh_frame:000000000000F61A                 db    0
.eh_frame:000000000000F61B                 db    0
.eh_frame:000000000000F61C                 db  10h
.eh_frame:000000000000F61D                 db    0
.eh_frame:000000000000F61E                 db    0
.eh_frame:000000000000F61F                 db    0
.eh_frame:000000000000F620                 db 0A0h
.eh_frame:000000000000F621                 db  0Bh
.eh_frame:000000000000F622                 db    0
.eh_frame:000000000000F623                 db    0
.eh_frame:000000000000F624                 db  5Ch ; \
.eh_frame:000000000000F625                 db  9Ch
.eh_frame:000000000000F626                 db 0FFh
.eh_frame:000000000000F627                 db 0FFh
.eh_frame:000000000000F628                 db  0Ch
.eh_frame:000000000000F629                 db    0
.eh_frame:000000000000F62A                 db    0
.eh_frame:000000000000F62B                 db    0
.eh_frame:000000000000F62C                 db    0
.eh_frame:000000000000F62D                 db    0
.eh_frame:000000000000F62E                 db    0
.eh_frame:000000000000F62F                 db    0
.eh_frame:000000000000F630                 db  10h
.eh_frame:000000000000F631                 db    0
.eh_frame:000000000000F632                 db    0
.eh_frame:000000000000F633                 db    0
.eh_frame:000000000000F634                 db 0B4h
.eh_frame:000000000000F635                 db  0Bh
.eh_frame:000000000000F636                 db    0
.eh_frame:000000000000F637                 db    0
.eh_frame:000000000000F638                 db  58h ; X
.eh_frame:000000000000F639                 db  9Ch
.eh_frame:000000000000F63A                 db 0FFh
.eh_frame:000000000000F63B                 db 0FFh
.eh_frame:000000000000F63C                 db  18h
.eh_frame:000000000000F63D                 db    0
.eh_frame:000000000000F63E                 db    0
.eh_frame:000000000000F63F                 db    0
.eh_frame:000000000000F640                 db    0
.eh_frame:000000000000F641                 db    0
.eh_frame:000000000000F642                 db    0
.eh_frame:000000000000F643                 db    0
.eh_frame:000000000000F644                 db  10h
.eh_frame:000000000000F645                 db    0
.eh_frame:000000000000F646                 db    0
.eh_frame:000000000000F647                 db    0
.eh_frame:000000000000F648                 db 0C8h
.eh_frame:000000000000F649                 db  0Bh
.eh_frame:000000000000F64A                 db    0
.eh_frame:000000000000F64B                 db    0
.eh_frame:000000000000F64C                 db  64h ; d
.eh_frame:000000000000F64D                 db  9Ch
.eh_frame:000000000000F64E                 db 0FFh
.eh_frame:000000000000F64F                 db 0FFh
.eh_frame:000000000000F650                 db  14h
.eh_frame:000000000000F651                 db    0
.eh_frame:000000000000F652                 db    0
.eh_frame:000000000000F653                 db    0
.eh_frame:000000000000F654                 db    0
.eh_frame:000000000000F655                 db    0
.eh_frame:000000000000F656                 db    0
.eh_frame:000000000000F657                 db    0
.eh_frame:000000000000F658                 db  18h
.eh_frame:000000000000F659                 db    0
.eh_frame:000000000000F65A                 db    0
.eh_frame:000000000000F65B                 db    0
.eh_frame:000000000000F65C                 db 0DCh
.eh_frame:000000000000F65D                 db  0Bh
.eh_frame:000000000000F65E                 db    0
.eh_frame:000000000000F65F                 db    0
.eh_frame:000000000000F660                 db  70h ; p
.eh_frame:000000000000F661                 db  9Ch
.eh_frame:000000000000F662                 db 0FFh
.eh_frame:000000000000F663                 db 0FFh
.eh_frame:000000000000F664                 db  8Eh
.eh_frame:000000000000F665                 db    0
.eh_frame:000000000000F666                 db    0
.eh_frame:000000000000F667                 db    0
.eh_frame:000000000000F668                 db    0
.eh_frame:000000000000F669                 db  44h ; D
.eh_frame:000000000000F66A                 db  0Eh
.eh_frame:000000000000F66B                 db  50h ; P
.eh_frame:000000000000F66C                 db    2
.eh_frame:000000000000F66D                 db  7Fh ; 
.eh_frame:000000000000F66E                 db  0Ah
.eh_frame:000000000000F66F                 db  0Eh
.eh_frame:000000000000F670                 db    8
.eh_frame:000000000000F671                 db  41h ; A
.eh_frame:000000000000F672                 db  0Bh
.eh_frame:000000000000F673                 db    0
.eh_frame:000000000000F674                 db  18h
.eh_frame:000000000000F675                 db    0
.eh_frame:000000000000F676                 db    0
.eh_frame:000000000000F677                 db    0
.eh_frame:000000000000F678                 db 0F8h
.eh_frame:000000000000F679                 db  0Bh
.eh_frame:000000000000F67A                 db    0
.eh_frame:000000000000F67B                 db    0
.eh_frame:000000000000F67C                 db 0E4h
.eh_frame:000000000000F67D                 db  9Ch
.eh_frame:000000000000F67E                 db 0FFh
.eh_frame:000000000000F67F                 db 0FFh
.eh_frame:000000000000F680                 db  8Ah
.eh_frame:000000000000F681                 db    0
.eh_frame:000000000000F682                 db    0
.eh_frame:000000000000F683                 db    0
.eh_frame:000000000000F684                 db    0
.eh_frame:000000000000F685                 db  44h ; D
.eh_frame:000000000000F686                 db  0Eh
.eh_frame:000000000000F687                 db  50h ; P
.eh_frame:000000000000F688                 db    2
.eh_frame:000000000000F689                 db  7Bh ; {
.eh_frame:000000000000F68A                 db  0Ah
.eh_frame:000000000000F68B                 db  0Eh
.eh_frame:000000000000F68C                 db    8
.eh_frame:000000000000F68D                 db  41h ; A
.eh_frame:000000000000F68E                 db  0Bh
.eh_frame:000000000000F68F                 db    0
.eh_frame:000000000000F690                 db  10h
.eh_frame:000000000000F691                 db    0
.eh_frame:000000000000F692                 db    0
.eh_frame:000000000000F693                 db    0
.eh_frame:000000000000F694                 db  14h
.eh_frame:000000000000F695                 db  0Ch
.eh_frame:000000000000F696                 db    0
.eh_frame:000000000000F697                 db    0
.eh_frame:000000000000F698                 db  58h ; X
.eh_frame:000000000000F699                 db  9Dh
.eh_frame:000000000000F69A                 db 0FFh
.eh_frame:000000000000F69B                 db 0FFh
.eh_frame:000000000000F69C                 db  0Ch
.eh_frame:000000000000F69D                 db    0
.eh_frame:000000000000F69E                 db    0
.eh_frame:000000000000F69F                 db    0
.eh_frame:000000000000F6A0                 db    0
.eh_frame:000000000000F6A1                 db    0
.eh_frame:000000000000F6A2                 db    0
.eh_frame:000000000000F6A3                 db    0
.eh_frame:000000000000F6A4                 db  10h
.eh_frame:000000000000F6A5                 db    0
.eh_frame:000000000000F6A6                 db    0
.eh_frame:000000000000F6A7                 db    0
.eh_frame:000000000000F6A8                 db  28h ; (
.eh_frame:000000000000F6A9                 db  0Ch
.eh_frame:000000000000F6AA                 db    0
.eh_frame:000000000000F6AB                 db    0
.eh_frame:000000000000F6AC                 db  54h ; T
.eh_frame:000000000000F6AD                 db  9Dh
.eh_frame:000000000000F6AE                 db 0FFh
.eh_frame:000000000000F6AF                 db 0FFh
.eh_frame:000000000000F6B0                 db  0Fh
.eh_frame:000000000000F6B1                 db    0
.eh_frame:000000000000F6B2                 db    0
.eh_frame:000000000000F6B3                 db    0
.eh_frame:000000000000F6B4                 db    0
.eh_frame:000000000000F6B5                 db    0
.eh_frame:000000000000F6B6                 db    0
.eh_frame:000000000000F6B7                 db    0
.eh_frame:000000000000F6B8                 db  18h
.eh_frame:000000000000F6B9                 db    0
.eh_frame:000000000000F6BA                 db    0
.eh_frame:000000000000F6BB                 db    0
.eh_frame:000000000000F6BC                 db  3Ch ; <
.eh_frame:000000000000F6BD                 db  0Ch
.eh_frame:000000000000F6BE                 db    0
.eh_frame:000000000000F6BF                 db    0
.eh_frame:000000000000F6C0                 db  50h ; P
.eh_frame:000000000000F6C1                 db  9Dh
.eh_frame:000000000000F6C2                 db 0FFh
.eh_frame:000000000000F6C3                 db 0FFh
.eh_frame:000000000000F6C4                 db  98h
.eh_frame:000000000000F6C5                 db    0
.eh_frame:000000000000F6C6                 db    0
.eh_frame:000000000000F6C7                 db    0
.eh_frame:000000000000F6C8                 db    0
.eh_frame:000000000000F6C9                 db  44h ; D
.eh_frame:000000000000F6CA                 db  0Eh
.eh_frame:000000000000F6CB                 db  50h ; P
.eh_frame:000000000000F6CC                 db    2
.eh_frame:000000000000F6CD                 db  8Eh
.eh_frame:000000000000F6CE                 db  0Ah
.eh_frame:000000000000F6CF                 db  0Eh
.eh_frame:000000000000F6D0                 db    8
.eh_frame:000000000000F6D1                 db  41h ; A
.eh_frame:000000000000F6D2                 db  0Bh
.eh_frame:000000000000F6D3                 db    0
.eh_frame:000000000000F6D4                 db  10h
.eh_frame:000000000000F6D5                 db    0
.eh_frame:000000000000F6D6                 db    0
.eh_frame:000000000000F6D7                 db    0
.eh_frame:000000000000F6D8                 db  58h ; X
.eh_frame:000000000000F6D9                 db  0Ch
.eh_frame:000000000000F6DA                 db    0
.eh_frame:000000000000F6DB                 db    0
.eh_frame:000000000000F6DC                 db 0D4h
.eh_frame:000000000000F6DD                 db  9Dh
.eh_frame:000000000000F6DE                 db 0FFh
.eh_frame:000000000000F6DF                 db 0FFh
.eh_frame:000000000000F6E0                 db  10h
.eh_frame:000000000000F6E1                 db    0
.eh_frame:000000000000F6E2                 db    0
.eh_frame:000000000000F6E3                 db    0
.eh_frame:000000000000F6E4                 db    0
.eh_frame:000000000000F6E5                 db    0
.eh_frame:000000000000F6E6                 db    0
.eh_frame:000000000000F6E7                 db    0
.eh_frame:000000000000F6E8                 db  10h
.eh_frame:000000000000F6E9                 db    0
.eh_frame:000000000000F6EA                 db    0
.eh_frame:000000000000F6EB                 db    0
.eh_frame:000000000000F6EC                 db  6Ch ; l
.eh_frame:000000000000F6ED                 db  0Ch
.eh_frame:000000000000F6EE                 db    0
.eh_frame:000000000000F6EF                 db    0
.eh_frame:000000000000F6F0                 db 0D0h
.eh_frame:000000000000F6F1                 db  9Dh
.eh_frame:000000000000F6F2                 db 0FFh
.eh_frame:000000000000F6F3                 db 0FFh
.eh_frame:000000000000F6F4                 db  11h
.eh_frame:000000000000F6F5                 db    0
.eh_frame:000000000000F6F6                 db    0
.eh_frame:000000000000F6F7                 db    0
.eh_frame:000000000000F6F8                 db    0
.eh_frame:000000000000F6F9                 db    0
.eh_frame:000000000000F6FA                 db    0
.eh_frame:000000000000F6FB                 db    0
.eh_frame:000000000000F6FC                 db  10h
.eh_frame:000000000000F6FD                 db    0
.eh_frame:000000000000F6FE                 db    0
.eh_frame:000000000000F6FF                 db    0
.eh_frame:000000000000F700                 db  80h
.eh_frame:000000000000F701                 db  0Ch
.eh_frame:000000000000F702                 db    0
.eh_frame:000000000000F703                 db    0
.eh_frame:000000000000F704                 db 0DCh
.eh_frame:000000000000F705                 db  9Dh
.eh_frame:000000000000F706                 db 0FFh
.eh_frame:000000000000F707                 db 0FFh
.eh_frame:000000000000F708                 db  0Ah
.eh_frame:000000000000F709                 db    0
.eh_frame:000000000000F70A                 db    0
.eh_frame:000000000000F70B                 db    0
.eh_frame:000000000000F70C                 db    0
.eh_frame:000000000000F70D                 db    0
.eh_frame:000000000000F70E                 db    0
.eh_frame:000000000000F70F                 db    0
.eh_frame:000000000000F710                 db  18h
.eh_frame:000000000000F711                 db    0
.eh_frame:000000000000F712                 db    0
.eh_frame:000000000000F713                 db    0
.eh_frame:000000000000F714                 db  94h
.eh_frame:000000000000F715                 db  0Ch
.eh_frame:000000000000F716                 db    0
.eh_frame:000000000000F717                 db    0
.eh_frame:000000000000F718                 db 0D8h
.eh_frame:000000000000F719                 db  9Dh
.eh_frame:000000000000F71A                 db 0FFh
.eh_frame:000000000000F71B                 db 0FFh
.eh_frame:000000000000F71C                 db  8Eh
.eh_frame:000000000000F71D                 db    0
.eh_frame:000000000000F71E                 db    0
.eh_frame:000000000000F71F                 db    0
.eh_frame:000000000000F720                 db    0
.eh_frame:000000000000F721                 db  44h ; D
.eh_frame:000000000000F722                 db  0Eh
.eh_frame:000000000000F723                 db  50h ; P
.eh_frame:000000000000F724                 db    2
.eh_frame:000000000000F725                 db  7Fh ; 
.eh_frame:000000000000F726                 db  0Ah
.eh_frame:000000000000F727                 db  0Eh
.eh_frame:000000000000F728                 db    8
.eh_frame:000000000000F729                 db  41h ; A
.eh_frame:000000000000F72A                 db  0Bh
.eh_frame:000000000000F72B                 db    0
.eh_frame:000000000000F72C                 db  18h
.eh_frame:000000000000F72D                 db    0
.eh_frame:000000000000F72E                 db    0
.eh_frame:000000000000F72F                 db    0
.eh_frame:000000000000F730                 db 0B0h
.eh_frame:000000000000F731                 db  0Ch
.eh_frame:000000000000F732                 db    0
.eh_frame:000000000000F733                 db    0
.eh_frame:000000000000F734                 db  4Ch ; L
.eh_frame:000000000000F735                 db  9Eh
.eh_frame:000000000000F736                 db 0FFh
.eh_frame:000000000000F737                 db 0FFh
.eh_frame:000000000000F738                 db  91h
.eh_frame:000000000000F739                 db    0
.eh_frame:000000000000F73A                 db    0
.eh_frame:000000000000F73B                 db    0
.eh_frame:000000000000F73C                 db    0
.eh_frame:000000000000F73D                 db  44h ; D
.eh_frame:000000000000F73E                 db  0Eh
.eh_frame:000000000000F73F                 db  50h ; P
.eh_frame:000000000000F740                 db    2
.eh_frame:000000000000F741                 db  82h
.eh_frame:000000000000F742                 db  0Ah
.eh_frame:000000000000F743                 db  0Eh
.eh_frame:000000000000F744                 db    8
.eh_frame:000000000000F745                 db  41h ; A
.eh_frame:000000000000F746                 db  0Bh
.eh_frame:000000000000F747                 db    0
.eh_frame:000000000000F748                 db  10h
.eh_frame:000000000000F749                 db    0
.eh_frame:000000000000F74A                 db    0
.eh_frame:000000000000F74B                 db    0
.eh_frame:000000000000F74C                 db 0CCh
.eh_frame:000000000000F74D                 db  0Ch
.eh_frame:000000000000F74E                 db    0
.eh_frame:000000000000F74F                 db    0
.eh_frame:000000000000F750                 db 0D0h
.eh_frame:000000000000F751                 db  9Eh
.eh_frame:000000000000F752                 db 0FFh
.eh_frame:000000000000F753                 db 0FFh
.eh_frame:000000000000F754                 db  0Ch
.eh_frame:000000000000F755                 db    0
.eh_frame:000000000000F756                 db    0
.eh_frame:000000000000F757                 db    0
.eh_frame:000000000000F758                 db    0
.eh_frame:000000000000F759                 db    0
.eh_frame:000000000000F75A                 db    0
.eh_frame:000000000000F75B                 db    0
.eh_frame:000000000000F75C                 db  10h
.eh_frame:000000000000F75D                 db    0
.eh_frame:000000000000F75E                 db    0
.eh_frame:000000000000F75F                 db    0
.eh_frame:000000000000F760                 db 0E0h
.eh_frame:000000000000F761                 db  0Ch
.eh_frame:000000000000F762                 db    0
.eh_frame:000000000000F763                 db    0
.eh_frame:000000000000F764                 db 0CCh
.eh_frame:000000000000F765                 db  9Eh
.eh_frame:000000000000F766                 db 0FFh
.eh_frame:000000000000F767                 db 0FFh
.eh_frame:000000000000F768                 db  17h
.eh_frame:000000000000F769                 db    0
.eh_frame:000000000000F76A                 db    0
.eh_frame:000000000000F76B                 db    0
.eh_frame:000000000000F76C                 db    0
.eh_frame:000000000000F76D                 db    0
.eh_frame:000000000000F76E                 db    0
.eh_frame:000000000000F76F                 db    0
.eh_frame:000000000000F770                 db  10h
.eh_frame:000000000000F771                 db    0
.eh_frame:000000000000F772                 db    0
.eh_frame:000000000000F773                 db    0
.eh_frame:000000000000F774                 db 0F4h
.eh_frame:000000000000F775                 db  0Ch
.eh_frame:000000000000F776                 db    0
.eh_frame:000000000000F777                 db    0
.eh_frame:000000000000F778                 db 0D8h
.eh_frame:000000000000F779                 db  9Eh
.eh_frame:000000000000F77A                 db 0FFh
.eh_frame:000000000000F77B                 db 0FFh
.eh_frame:000000000000F77C                 db  13h
.eh_frame:000000000000F77D                 db    0
.eh_frame:000000000000F77E                 db    0
.eh_frame:000000000000F77F                 db    0
.eh_frame:000000000000F780                 db    0
.eh_frame:000000000000F781                 db    0
.eh_frame:000000000000F782                 db    0
.eh_frame:000000000000F783                 db    0
.eh_frame:000000000000F784                 db  10h
.eh_frame:000000000000F785                 db    0
.eh_frame:000000000000F786                 db    0
.eh_frame:000000000000F787                 db    0
.eh_frame:000000000000F788                 db    8
.eh_frame:000000000000F789                 db  0Dh
.eh_frame:000000000000F78A                 db    0
.eh_frame:000000000000F78B                 db    0
.eh_frame:000000000000F78C                 db 0E4h
.eh_frame:000000000000F78D                 db  9Eh
.eh_frame:000000000000F78E                 db 0FFh
.eh_frame:000000000000F78F                 db 0FFh
.eh_frame:000000000000F790                 db  0Ch
.eh_frame:000000000000F791                 db    0
.eh_frame:000000000000F792                 db    0
.eh_frame:000000000000F793                 db    0
.eh_frame:000000000000F794                 db    0
.eh_frame:000000000000F795                 db    0
.eh_frame:000000000000F796                 db    0
.eh_frame:000000000000F797                 db    0
.eh_frame:000000000000F798                 db  10h
.eh_frame:000000000000F799                 db    0
.eh_frame:000000000000F79A                 db    0
.eh_frame:000000000000F79B                 db    0
.eh_frame:000000000000F79C                 db  1Ch
.eh_frame:000000000000F79D                 db  0Dh
.eh_frame:000000000000F79E                 db    0
.eh_frame:000000000000F79F                 db    0
.eh_frame:000000000000F7A0                 db 0E0h
.eh_frame:000000000000F7A1                 db  9Eh
.eh_frame:000000000000F7A2                 db 0FFh
.eh_frame:000000000000F7A3                 db 0FFh
.eh_frame:000000000000F7A4                 db  14h
.eh_frame:000000000000F7A5                 db    0
.eh_frame:000000000000F7A6                 db    0
.eh_frame:000000000000F7A7                 db    0
.eh_frame:000000000000F7A8                 db    0
.eh_frame:000000000000F7A9                 db    0
.eh_frame:000000000000F7AA                 db    0
.eh_frame:000000000000F7AB                 db    0
.eh_frame:000000000000F7AC                 db  10h
.eh_frame:000000000000F7AD                 db    0
.eh_frame:000000000000F7AE                 db    0
.eh_frame:000000000000F7AF                 db    0
.eh_frame:000000000000F7B0                 db  30h ; 0
.eh_frame:000000000000F7B1                 db  0Dh
.eh_frame:000000000000F7B2                 db    0
.eh_frame:000000000000F7B3                 db    0
.eh_frame:000000000000F7B4                 db 0ECh
.eh_frame:000000000000F7B5                 db  9Eh
.eh_frame:000000000000F7B6                 db 0FFh
.eh_frame:000000000000F7B7                 db 0FFh
.eh_frame:000000000000F7B8                 db  13h
.eh_frame:000000000000F7B9                 db    0
.eh_frame:000000000000F7BA                 db    0
.eh_frame:000000000000F7BB                 db    0
.eh_frame:000000000000F7BC                 db    0
.eh_frame:000000000000F7BD                 db    0
.eh_frame:000000000000F7BE                 db    0
.eh_frame:000000000000F7BF                 db    0
.eh_frame:000000000000F7C0                 db  14h
.eh_frame:000000000000F7C1                 db    0
.eh_frame:000000000000F7C2                 db    0
.eh_frame:000000000000F7C3                 db    0
.eh_frame:000000000000F7C4                 db  44h ; D
.eh_frame:000000000000F7C5                 db  0Dh
.eh_frame:000000000000F7C6                 db    0
.eh_frame:000000000000F7C7                 db    0
.eh_frame:000000000000F7C8                 db 0F8h
.eh_frame:000000000000F7C9                 db  9Eh
.eh_frame:000000000000F7CA                 db 0FFh
.eh_frame:000000000000F7CB                 db 0FFh
.eh_frame:000000000000F7CC                 db  18h
.eh_frame:000000000000F7CD                 db    0
.eh_frame:000000000000F7CE                 db    0
.eh_frame:000000000000F7CF                 db    0
.eh_frame:000000000000F7D0                 db    0
.eh_frame:000000000000F7D1                 db    0
.eh_frame:000000000000F7D2                 db    0
.eh_frame:000000000000F7D3                 db    0
.eh_frame:000000000000F7D4                 db    0
.eh_frame:000000000000F7D5                 db    0
.eh_frame:000000000000F7D6                 db    0
.eh_frame:000000000000F7D7                 db    0
.eh_frame:000000000000F7D8                 db  14h
.eh_frame:000000000000F7D9                 db    0
.eh_frame:000000000000F7DA                 db    0
.eh_frame:000000000000F7DB                 db    0
.eh_frame:000000000000F7DC                 db  5Ch ; \
.eh_frame:000000000000F7DD                 db  0Dh
.eh_frame:000000000000F7DE                 db    0
.eh_frame:000000000000F7DF                 db    0
.eh_frame:000000000000F7E0                 db    0
.eh_frame:000000000000F7E1                 db  9Fh
.eh_frame:000000000000F7E2                 db 0FFh
.eh_frame:000000000000F7E3                 db 0FFh
.eh_frame:000000000000F7E4                 db  0Eh
.eh_frame:000000000000F7E5                 db    0
.eh_frame:000000000000F7E6                 db    0
.eh_frame:000000000000F7E7                 db    0
.eh_frame:000000000000F7E8                 db    0
.eh_frame:000000000000F7E9                 db    0
.eh_frame:000000000000F7EA                 db    0
.eh_frame:000000000000F7EB                 db    0
.eh_frame:000000000000F7EC                 db    0
.eh_frame:000000000000F7ED                 db    0
.eh_frame:000000000000F7EE                 db    0
.eh_frame:000000000000F7EF                 db    0
.eh_frame:000000000000F7F0                 db  10h
.eh_frame:000000000000F7F1                 db    1
.eh_frame:000000000000F7F2                 db    0
.eh_frame:000000000000F7F3                 db    0
.eh_frame:000000000000F7F4                 db  74h ; t
.eh_frame:000000000000F7F5                 db  0Dh
.eh_frame:000000000000F7F6                 db    0
.eh_frame:000000000000F7F7                 db    0
.eh_frame:000000000000F7F8                 db 0F8h
.eh_frame:000000000000F7F9                 db  9Eh
.eh_frame:000000000000F7FA                 db 0FFh
.eh_frame:000000000000F7FB                 db 0FFh
.eh_frame:000000000000F7FC                 db  17h
.eh_frame:000000000000F7FD                 db    4
.eh_frame:000000000000F7FE                 db    0
.eh_frame:000000000000F7FF                 db    0
.eh_frame:000000000000F800                 db    0
.eh_frame:000000000000F801                 db  42h ; B
.eh_frame:000000000000F802                 db  0Eh
.eh_frame:000000000000F803                 db  10h
.eh_frame:000000000000F804                 db  8Fh
.eh_frame:000000000000F805                 db    2
.eh_frame:000000000000F806                 db  42h ; B
.eh_frame:000000000000F807                 db  0Eh
.eh_frame:000000000000F808                 db  18h
.eh_frame:000000000000F809                 db  8Eh
.eh_frame:000000000000F80A                 db    3
.eh_frame:000000000000F80B                 db  42h ; B
.eh_frame:000000000000F80C                 db  0Eh
.eh_frame:000000000000F80D                 db  20h
.eh_frame:000000000000F80E                 db  8Dh
.eh_frame:000000000000F80F                 db    4
.eh_frame:000000000000F810                 db  42h ; B
.eh_frame:000000000000F811                 db  0Eh
.eh_frame:000000000000F812                 db  28h ; (
.eh_frame:000000000000F813                 db  8Ch
.eh_frame:000000000000F814                 db    5
.eh_frame:000000000000F815                 db  44h ; D
.eh_frame:000000000000F816                 db  0Eh
.eh_frame:000000000000F817                 db  30h ; 0
.eh_frame:000000000000F818                 db  86h
.eh_frame:000000000000F819                 db    6
.eh_frame:000000000000F81A                 db  41h ; A
.eh_frame:000000000000F81B                 db  0Eh
.eh_frame:000000000000F81C                 db  38h ; 8
.eh_frame:000000000000F81D                 db  83h
.eh_frame:000000000000F81E                 db    7
.eh_frame:000000000000F81F                 db  4Ah ; J
.eh_frame:000000000000F820                 db  0Eh
.eh_frame:000000000000F821                 db  60h ; `
.eh_frame:000000000000F822                 db    2
.eh_frame:000000000000F823                 db 0DDh
.eh_frame:000000000000F824                 db  0Eh
.eh_frame:000000000000F825                 db  68h ; h
.eh_frame:000000000000F826                 db  57h ; W
.eh_frame:000000000000F827                 db  0Eh
.eh_frame:000000000000F828                 db  70h ; p
.eh_frame:000000000000F829                 db  42h ; B
.eh_frame:000000000000F82A                 db  0Eh
.eh_frame:000000000000F82B                 db  78h ; x
.eh_frame:000000000000F82C                 db  42h ; B
.eh_frame:000000000000F82D                 db  0Eh
.eh_frame:000000000000F82E                 db  80h
.eh_frame:000000000000F82F                 db    1
.eh_frame:000000000000F830                 db  42h ; B
.eh_frame:000000000000F831                 db  0Eh
.eh_frame:000000000000F832                 db  88h
.eh_frame:000000000000F833                 db    1
.eh_frame:000000000000F834                 db  42h ; B
.eh_frame:000000000000F835                 db  0Eh
.eh_frame:000000000000F836                 db  90h
.eh_frame:000000000000F837                 db    1
.eh_frame:000000000000F838                 db  53h ; S
.eh_frame:000000000000F839                 db  0Eh
.eh_frame:000000000000F83A                 db  60h ; `
.eh_frame:000000000000F83B                 db  44h ; D
.eh_frame:000000000000F83C                 db  0Ah
.eh_frame:000000000000F83D                 db  0Eh
.eh_frame:000000000000F83E                 db  38h ; 8
.eh_frame:000000000000F83F                 db  41h ; A
.eh_frame:000000000000F840                 db  0Eh
.eh_frame:000000000000F841                 db  30h ; 0
.eh_frame:000000000000F842                 db  41h ; A
.eh_frame:000000000000F843                 db  0Eh
.eh_frame:000000000000F844                 db  28h ; (
.eh_frame:000000000000F845                 db  42h ; B
.eh_frame:000000000000F846                 db  0Eh
.eh_frame:000000000000F847                 db  20h
.eh_frame:000000000000F848                 db  42h ; B
.eh_frame:000000000000F849                 db  0Eh
.eh_frame:000000000000F84A                 db  18h
.eh_frame:000000000000F84B                 db  42h ; B
.eh_frame:000000000000F84C                 db  0Eh
.eh_frame:000000000000F84D                 db  10h
.eh_frame:000000000000F84E                 db  42h ; B
.eh_frame:000000000000F84F                 db  0Eh
.eh_frame:000000000000F850                 db    8
.eh_frame:000000000000F851                 db  44h ; D
.eh_frame:000000000000F852                 db  0Bh
.eh_frame:000000000000F853                 db    2
.eh_frame:000000000000F854                 db  78h ; x
.eh_frame:000000000000F855                 db  0Ah
.eh_frame:000000000000F856                 db  0Eh
.eh_frame:000000000000F857                 db  68h ; h
.eh_frame:000000000000F858                 db  48h ; H
.eh_frame:000000000000F859                 db  0Bh
.eh_frame:000000000000F85A                 db  5Ah ; Z
.eh_frame:000000000000F85B                 db  0Ah
.eh_frame:000000000000F85C                 db  0Eh
.eh_frame:000000000000F85D                 db  38h ; 8
.eh_frame:000000000000F85E                 db  47h ; G
.eh_frame:000000000000F85F                 db  0Eh
.eh_frame:000000000000F860                 db  30h ; 0
.eh_frame:000000000000F861                 db  41h ; A
.eh_frame:000000000000F862                 db  0Eh
.eh_frame:000000000000F863                 db  28h ; (
.eh_frame:000000000000F864                 db  42h ; B
.eh_frame:000000000000F865                 db  0Eh
.eh_frame:000000000000F866                 db  20h
.eh_frame:000000000000F867                 db  42h ; B
.eh_frame:000000000000F868                 db  0Eh
.eh_frame:000000000000F869                 db  18h
.eh_frame:000000000000F86A                 db  42h ; B
.eh_frame:000000000000F86B                 db  0Eh
.eh_frame:000000000000F86C                 db  10h
.eh_frame:000000000000F86D                 db  42h ; B
.eh_frame:000000000000F86E                 db  0Eh
.eh_frame:000000000000F86F                 db    8
.eh_frame:000000000000F870                 db  56h ; V
.eh_frame:000000000000F871                 db  0Bh
.eh_frame:000000000000F872                 db  5Eh ; ^
.eh_frame:000000000000F873                 db  0Ah
.eh_frame:000000000000F874                 db  0Eh
.eh_frame:000000000000F875                 db  38h ; 8
.eh_frame:000000000000F876                 db  52h ; R
.eh_frame:000000000000F877                 db  0Eh
.eh_frame:000000000000F878                 db  30h ; 0
.eh_frame:000000000000F879                 db  41h ; A
.eh_frame:000000000000F87A                 db  0Eh
.eh_frame:000000000000F87B                 db  28h ; (
.eh_frame:000000000000F87C                 db  42h ; B
.eh_frame:000000000000F87D                 db  0Eh
.eh_frame:000000000000F87E                 db  20h
.eh_frame:000000000000F87F                 db  42h ; B
.eh_frame:000000000000F880                 db  0Eh
.eh_frame:000000000000F881                 db  18h
.eh_frame:000000000000F882                 db  42h ; B
.eh_frame:000000000000F883                 db  0Eh
.eh_frame:000000000000F884                 db  10h
.eh_frame:000000000000F885                 db  42h ; B
.eh_frame:000000000000F886                 db  0Eh
.eh_frame:000000000000F887                 db    8
.eh_frame:000000000000F888                 db  4Fh ; O
.eh_frame:000000000000F889                 db  0Bh
.eh_frame:000000000000F88A                 db  62h ; b
.eh_frame:000000000000F88B                 db  0Ah
.eh_frame:000000000000F88C                 db  0Eh
.eh_frame:000000000000F88D                 db  38h ; 8
.eh_frame:000000000000F88E                 db  50h ; P
.eh_frame:000000000000F88F                 db  0Eh
.eh_frame:000000000000F890                 db  30h ; 0
.eh_frame:000000000000F891                 db  41h ; A
.eh_frame:000000000000F892                 db  0Eh
.eh_frame:000000000000F893                 db  28h ; (
.eh_frame:000000000000F894                 db  42h ; B
.eh_frame:000000000000F895                 db  0Eh
.eh_frame:000000000000F896                 db  20h
.eh_frame:000000000000F897                 db  42h ; B
.eh_frame:000000000000F898                 db  0Eh
.eh_frame:000000000000F899                 db  18h
.eh_frame:000000000000F89A                 db  42h ; B
.eh_frame:000000000000F89B                 db  0Eh
.eh_frame:000000000000F89C                 db  10h
.eh_frame:000000000000F89D                 db  42h ; B
.eh_frame:000000000000F89E                 db  0Eh
.eh_frame:000000000000F89F                 db    8
.eh_frame:000000000000F8A0                 db  55h ; U
.eh_frame:000000000000F8A1                 db  0Bh
.eh_frame:000000000000F8A2                 db  66h ; f
.eh_frame:000000000000F8A3                 db  0Eh
.eh_frame:000000000000F8A4                 db  68h ; h
.eh_frame:000000000000F8A5                 db  42h ; B
.eh_frame:000000000000F8A6                 db  0Eh
.eh_frame:000000000000F8A7                 db  70h ; p
.eh_frame:000000000000F8A8                 db  5Ch ; \
.eh_frame:000000000000F8A9                 db  0Eh
.eh_frame:000000000000F8AA                 db  68h ; h
.eh_frame:000000000000F8AB                 db  41h ; A
.eh_frame:000000000000F8AC                 db  0Eh
.eh_frame:000000000000F8AD                 db  60h ; `
.eh_frame:000000000000F8AE                 db  44h ; D
.eh_frame:000000000000F8AF                 db  0Ah
.eh_frame:000000000000F8B0                 db  0Eh
.eh_frame:000000000000F8B1                 db  38h ; 8
.eh_frame:000000000000F8B2                 db  41h ; A
.eh_frame:000000000000F8B3                 db  0Eh
.eh_frame:000000000000F8B4                 db  30h ; 0
.eh_frame:000000000000F8B5                 db  41h ; A
.eh_frame:000000000000F8B6                 db  0Eh
.eh_frame:000000000000F8B7                 db  28h ; (
.eh_frame:000000000000F8B8                 db  42h ; B
.eh_frame:000000000000F8B9                 db  0Eh
.eh_frame:000000000000F8BA                 db  20h
.eh_frame:000000000000F8BB                 db  42h ; B
.eh_frame:000000000000F8BC                 db  0Eh
.eh_frame:000000000000F8BD                 db  18h
.eh_frame:000000000000F8BE                 db  42h ; B
.eh_frame:000000000000F8BF                 db  0Eh
.eh_frame:000000000000F8C0                 db  10h
.eh_frame:000000000000F8C1                 db  42h ; B
.eh_frame:000000000000F8C2                 db  0Eh
.eh_frame:000000000000F8C3                 db    8
.eh_frame:000000000000F8C4                 db  45h ; E
.eh_frame:000000000000F8C5                 db  0Bh
.eh_frame:000000000000F8C6                 db  68h ; h
.eh_frame:000000000000F8C7                 db  0Ah
.eh_frame:000000000000F8C8                 db  0Eh
.eh_frame:000000000000F8C9                 db  68h ; h
.eh_frame:000000000000F8CA                 db  48h ; H
.eh_frame:000000000000F8CB                 db  0Bh
.eh_frame:000000000000F8CC                 db  72h ; r
.eh_frame:000000000000F8CD                 db  0Eh
.eh_frame:000000000000F8CE                 db  68h ; h
.eh_frame:000000000000F8CF                 db  45h ; E
.eh_frame:000000000000F8D0                 db  0Eh
.eh_frame:000000000000F8D1                 db  70h ; p
.eh_frame:000000000000F8D2                 db  42h ; B
.eh_frame:000000000000F8D3                 db  0Eh
.eh_frame:000000000000F8D4                 db  78h ; x
.eh_frame:000000000000F8D5                 db  42h ; B
.eh_frame:000000000000F8D6                 db  0Eh
.eh_frame:000000000000F8D7                 db  80h
.eh_frame:000000000000F8D8                 db    1
.eh_frame:000000000000F8D9                 db  5Eh ; ^
.eh_frame:000000000000F8DA                 db  0Eh
.eh_frame:000000000000F8DB                 db  60h ; `
.eh_frame:000000000000F8DC                 db  44h ; D
.eh_frame:000000000000F8DD                 db  0Ah
.eh_frame:000000000000F8DE                 db  0Eh
.eh_frame:000000000000F8DF                 db  38h ; 8
.eh_frame:000000000000F8E0                 db  41h ; A
.eh_frame:000000000000F8E1                 db  0Eh
.eh_frame:000000000000F8E2                 db  30h ; 0
.eh_frame:000000000000F8E3                 db  41h ; A
.eh_frame:000000000000F8E4                 db  0Eh
.eh_frame:000000000000F8E5                 db  28h ; (
.eh_frame:000000000000F8E6                 db  42h ; B
.eh_frame:000000000000F8E7                 db  0Eh
.eh_frame:000000000000F8E8                 db  20h
.eh_frame:000000000000F8E9                 db  42h ; B
.eh_frame:000000000000F8EA                 db  0Eh
.eh_frame:000000000000F8EB                 db  18h
.eh_frame:000000000000F8EC                 db  42h ; B
.eh_frame:000000000000F8ED                 db  0Eh
.eh_frame:000000000000F8EE                 db  10h
.eh_frame:000000000000F8EF                 db  42h ; B
.eh_frame:000000000000F8F0                 db  0Eh
.eh_frame:000000000000F8F1                 db    8
.eh_frame:000000000000F8F2                 db  41h ; A
.eh_frame:000000000000F8F3                 db  0Bh
.eh_frame:000000000000F8F4                 db  79h ; y
.eh_frame:000000000000F8F5                 db  0Ah
.eh_frame:000000000000F8F6                 db  0Eh
.eh_frame:000000000000F8F7                 db  68h ; h
.eh_frame:000000000000F8F8                 db  42h ; B
.eh_frame:000000000000F8F9                 db  0Eh
.eh_frame:000000000000F8FA                 db  70h ; p
.eh_frame:000000000000F8FB                 db  42h ; B
.eh_frame:000000000000F8FC                 db  0Eh
.eh_frame:000000000000F8FD                 db  78h ; x
.eh_frame:000000000000F8FE                 db  42h ; B
.eh_frame:000000000000F8FF                 db  0Eh
.eh_frame:000000000000F900                 db  80h
.eh_frame:000000000000F901                 db    1
.eh_frame:000000000000F902                 db  51h ; Q
.eh_frame:000000000000F903                 db  0Bh
.eh_frame:000000000000F904                 db  10h
.eh_frame:000000000000F905                 db    0
.eh_frame:000000000000F906                 db    0
.eh_frame:000000000000F907                 db    0
.eh_frame:000000000000F908                 db  88h
.eh_frame:000000000000F909                 db  0Eh
.eh_frame:000000000000F90A                 db    0
.eh_frame:000000000000F90B                 db    0
.eh_frame:000000000000F90C                 db    4
.eh_frame:000000000000F90D                 db 0A2h
.eh_frame:000000000000F90E                 db 0FFh
.eh_frame:000000000000F90F                 db 0FFh
.eh_frame:000000000000F910                 db  20h
.eh_frame:000000000000F911                 db    0
.eh_frame:000000000000F912                 db    0
.eh_frame:000000000000F913                 db    0
.eh_frame:000000000000F914                 db    0
.eh_frame:000000000000F915                 db    0
.eh_frame:000000000000F916                 db    0
.eh_frame:000000000000F917                 db    0
.eh_frame:000000000000F918                 db  18h
.eh_frame:000000000000F919                 db    0
.eh_frame:000000000000F91A                 db    0
.eh_frame:000000000000F91B                 db    0
.eh_frame:000000000000F91C                 db  9Ch
.eh_frame:000000000000F91D                 db  0Eh
.eh_frame:000000000000F91E                 db    0
.eh_frame:000000000000F91F                 db    0
.eh_frame:000000000000F920                 db  10h
.eh_frame:000000000000F921                 db 0A2h
.eh_frame:000000000000F922                 db 0FFh
.eh_frame:000000000000F923                 db 0FFh
.eh_frame:000000000000F924                 db  78h ; x
.eh_frame:000000000000F925                 db    0
.eh_frame:000000000000F926                 db    0
.eh_frame:000000000000F927                 db    0
.eh_frame:000000000000F928                 db    0
.eh_frame:000000000000F929                 db  44h ; D
.eh_frame:000000000000F92A                 db  0Eh
.eh_frame:000000000000F92B                 db  70h ; p
.eh_frame:000000000000F92C                 db    2
.eh_frame:000000000000F92D                 db  60h ; `
.eh_frame:000000000000F92E                 db  0Ah
.eh_frame:000000000000F92F                 db  0Eh
.eh_frame:000000000000F930                 db    8
.eh_frame:000000000000F931                 db  41h ; A
.eh_frame:000000000000F932                 db  0Bh
.eh_frame:000000000000F933                 db    0
.eh_frame:000000000000F934                 db  28h ; (
.eh_frame:000000000000F935                 db    0
.eh_frame:000000000000F936                 db    0
.eh_frame:000000000000F937                 db    0
.eh_frame:000000000000F938                 db 0B8h
.eh_frame:000000000000F939                 db  0Eh
.eh_frame:000000000000F93A                 db    0
.eh_frame:000000000000F93B                 db    0
.eh_frame:000000000000F93C                 db  74h ; t
.eh_frame:000000000000F93D                 db 0A2h
.eh_frame:000000000000F93E                 db 0FFh
.eh_frame:000000000000F93F                 db 0FFh
.eh_frame:000000000000F940                 db 0D5h
.eh_frame:000000000000F941                 db    0
.eh_frame:000000000000F942                 db    0
.eh_frame:000000000000F943                 db    0
.eh_frame:000000000000F944                 db    0
.eh_frame:000000000000F945                 db  41h ; A
.eh_frame:000000000000F946                 db  0Eh
.eh_frame:000000000000F947                 db  10h
.eh_frame:000000000000F948                 db  86h
.eh_frame:000000000000F949                 db    2
.eh_frame:000000000000F94A                 db  41h ; A
.eh_frame:000000000000F94B                 db  0Eh
.eh_frame:000000000000F94C                 db  18h
.eh_frame:000000000000F94D                 db  83h
.eh_frame:000000000000F94E                 db    3
.eh_frame:000000000000F94F                 db  50h ; P
.eh_frame:000000000000F950                 db  0Eh
.eh_frame:000000000000F951                 db 0D0h
.eh_frame:000000000000F952                 db    1
.eh_frame:000000000000F953                 db    2
.eh_frame:000000000000F954                 db 0ABh
.eh_frame:000000000000F955                 db  0Ah
.eh_frame:000000000000F956                 db  0Eh
.eh_frame:000000000000F957                 db  18h
.eh_frame:000000000000F958                 db  41h ; A
.eh_frame:000000000000F959                 db  0Eh
.eh_frame:000000000000F95A                 db  10h
.eh_frame:000000000000F95B                 db  41h ; A
.eh_frame:000000000000F95C                 db  0Eh
.eh_frame:000000000000F95D                 db    8
.eh_frame:000000000000F95E                 db  41h ; A
.eh_frame:000000000000F95F                 db  0Bh
.eh_frame:000000000000F960                 db  1Ch
.eh_frame:000000000000F961                 db    0
.eh_frame:000000000000F962                 db    0
.eh_frame:000000000000F963                 db    0
.eh_frame:000000000000F964                 db 0E4h
.eh_frame:000000000000F965                 db  0Eh
.eh_frame:000000000000F966                 db    0
.eh_frame:000000000000F967                 db    0
.eh_frame:000000000000F968                 db  28h ; (
.eh_frame:000000000000F969                 db 0A3h
.eh_frame:000000000000F96A                 db 0FFh
.eh_frame:000000000000F96B                 db 0FFh
.eh_frame:000000000000F96C                 db  80h
.eh_frame:000000000000F96D                 db    0
.eh_frame:000000000000F96E                 db    0
.eh_frame:000000000000F96F                 db    0
.eh_frame:000000000000F970                 db    0
.eh_frame:000000000000F971                 db  41h ; A
.eh_frame:000000000000F972                 db  0Eh
.eh_frame:000000000000F973                 db  10h
.eh_frame:000000000000F974                 db  83h
.eh_frame:000000000000F975                 db    2
.eh_frame:000000000000F976                 db    2
.eh_frame:000000000000F977                 db  7Ah ; z
.eh_frame:000000000000F978                 db  0Eh
.eh_frame:000000000000F979                 db    8
.eh_frame:000000000000F97A                 db    0
.eh_frame:000000000000F97B                 db    0
.eh_frame:000000000000F97C                 db    0
.eh_frame:000000000000F97D                 db    0
.eh_frame:000000000000F97E                 db    0
.eh_frame:000000000000F97F                 db    0
.eh_frame:000000000000F980                 db  18h
.eh_frame:000000000000F981                 db    0
.eh_frame:000000000000F982                 db    0
.eh_frame:000000000000F983                 db    0
.eh_frame:000000000000F984                 db    4
.eh_frame:000000000000F985                 db  0Fh
.eh_frame:000000000000F986                 db    0
.eh_frame:000000000000F987                 db    0
.eh_frame:000000000000F988                 db  88h
.eh_frame:000000000000F989                 db 0A3h
.eh_frame:000000000000F98A                 db 0FFh
.eh_frame:000000000000F98B                 db 0FFh
.eh_frame:000000000000F98C                 db  1Ah
.eh_frame:000000000000F98D                 db    0
.eh_frame:000000000000F98E                 db    0
.eh_frame:000000000000F98F                 db    0
.eh_frame:000000000000F990                 db    0
.eh_frame:000000000000F991                 db  41h ; A
.eh_frame:000000000000F992                 db  0Eh
.eh_frame:000000000000F993                 db  10h
.eh_frame:000000000000F994                 db  83h
.eh_frame:000000000000F995                 db    2
.eh_frame:000000000000F996                 db  53h ; S
.eh_frame:000000000000F997                 db  0Ah
.eh_frame:000000000000F998                 db  0Eh
.eh_frame:000000000000F999                 db    8
.eh_frame:000000000000F99A                 db  41h ; A
.eh_frame:000000000000F99B                 db  0Bh
.eh_frame:000000000000F99C                 db  10h
.eh_frame:000000000000F99D                 db    0
.eh_frame:000000000000F99E                 db    0
.eh_frame:000000000000F99F                 db    0
.eh_frame:000000000000F9A0                 db  20h
.eh_frame:000000000000F9A1                 db  0Fh
.eh_frame:000000000000F9A2                 db    0
.eh_frame:000000000000F9A3                 db    0
.eh_frame:000000000000F9A4                 db  8Ch
.eh_frame:000000000000F9A5                 db 0A3h
.eh_frame:000000000000F9A6                 db 0FFh
.eh_frame:000000000000F9A7                 db 0FFh
.eh_frame:000000000000F9A8                 db  24h ; $
.eh_frame:000000000000F9A9                 db    0
.eh_frame:000000000000F9AA                 db    0
.eh_frame:000000000000F9AB                 db    0
.eh_frame:000000000000F9AC                 db    0
.eh_frame:000000000000F9AD                 db  5Fh ; _
.eh_frame:000000000000F9AE                 db  0Eh
.eh_frame:000000000000F9AF                 db  10h
.eh_frame:000000000000F9B0                 db  10h
.eh_frame:000000000000F9B1                 db    0
.eh_frame:000000000000F9B2                 db    0
.eh_frame:000000000000F9B3                 db    0
.eh_frame:000000000000F9B4                 db  34h ; 4
.eh_frame:000000000000F9B5                 db  0Fh
.eh_frame:000000000000F9B6                 db    0
.eh_frame:000000000000F9B7                 db    0
.eh_frame:000000000000F9B8                 db 0A8h
.eh_frame:000000000000F9B9                 db 0A3h
.eh_frame:000000000000F9BA                 db 0FFh
.eh_frame:000000000000F9BB                 db 0FFh
.eh_frame:000000000000F9BC                 db    2
.eh_frame:000000000000F9BD                 db    0
.eh_frame:000000000000F9BE                 db    0
.eh_frame:000000000000F9BF                 db    0
.eh_frame:000000000000F9C0                 db    0
.eh_frame:000000000000F9C1                 db    0
.eh_frame:000000000000F9C2                 db    0
.eh_frame:000000000000F9C3                 db    0
.eh_frame:000000000000F9C4                 db  20h
.eh_frame:000000000000F9C5                 db    0
.eh_frame:000000000000F9C6                 db    0
.eh_frame:000000000000F9C7                 db    0
.eh_frame:000000000000F9C8                 db  48h ; H
.eh_frame:000000000000F9C9                 db  0Fh
.eh_frame:000000000000F9CA                 db    0
.eh_frame:000000000000F9CB                 db    0
.eh_frame:000000000000F9CC                 db 0A4h
.eh_frame:000000000000F9CD                 db 0A3h
.eh_frame:000000000000F9CE                 db 0FFh
.eh_frame:000000000000F9CF                 db 0FFh
.eh_frame:000000000000F9D0                 db  36h ; 6
.eh_frame:000000000000F9D1                 db    0
.eh_frame:000000000000F9D2                 db    0
.eh_frame:000000000000F9D3                 db    0
.eh_frame:000000000000F9D4                 db    0
.eh_frame:000000000000F9D5                 db  44h ; D
.eh_frame:000000000000F9D6                 db  0Eh
.eh_frame:000000000000F9D7                 db  10h
.eh_frame:000000000000F9D8                 db  83h
.eh_frame:000000000000F9D9                 db    2
.eh_frame:000000000000F9DA                 db  5Dh ; ]
.eh_frame:000000000000F9DB                 db  0Ah
.eh_frame:000000000000F9DC                 db  0Eh
.eh_frame:000000000000F9DD                 db    8
.eh_frame:000000000000F9DE                 db  47h ; G
.eh_frame:000000000000F9DF                 db  0Bh
.eh_frame:000000000000F9E0                 db  48h ; H
.eh_frame:000000000000F9E1                 db  0Ah
.eh_frame:000000000000F9E2                 db  0Eh
.eh_frame:000000000000F9E3                 db    8
.eh_frame:000000000000F9E4                 db  41h ; A
.eh_frame:000000000000F9E5                 db  0Bh
.eh_frame:000000000000F9E6                 db    0
.eh_frame:000000000000F9E7                 db    0
.eh_frame:000000000000F9E8                 db  10h
.eh_frame:000000000000F9E9                 db    0
.eh_frame:000000000000F9EA                 db    0
.eh_frame:000000000000F9EB                 db    0
.eh_frame:000000000000F9EC                 db  6Ch ; l
.eh_frame:000000000000F9ED                 db  0Fh
.eh_frame:000000000000F9EE                 db    0
.eh_frame:000000000000F9EF                 db    0
.eh_frame:000000000000F9F0                 db 0C0h
.eh_frame:000000000000F9F1                 db 0A3h
.eh_frame:000000000000F9F2                 db 0FFh
.eh_frame:000000000000F9F3                 db 0FFh
.eh_frame:000000000000F9F4                 db  24h ; $
.eh_frame:000000000000F9F5                 db    0
.eh_frame:000000000000F9F6                 db    0
.eh_frame:000000000000F9F7                 db    0
.eh_frame:000000000000F9F8                 db    0
.eh_frame:000000000000F9F9                 db  5Fh ; _
.eh_frame:000000000000F9FA                 db  0Eh
.eh_frame:000000000000F9FB                 db  10h
.eh_frame:000000000000F9FC                 db  14h
.eh_frame:000000000000F9FD                 db    0
.eh_frame:000000000000F9FE                 db    0
.eh_frame:000000000000F9FF                 db    0
.eh_frame:000000000000FA00                 db  80h
.eh_frame:000000000000FA01                 db  0Fh
.eh_frame:000000000000FA02                 db    0
.eh_frame:000000000000FA03                 db    0
.eh_frame:000000000000FA04                 db 0DCh
.eh_frame:000000000000FA05                 db 0A3h
.eh_frame:000000000000FA06                 db 0FFh
.eh_frame:000000000000FA07                 db 0FFh
.eh_frame:000000000000FA08                 db  82h
.eh_frame:000000000000FA09                 db    0
.eh_frame:000000000000FA0A                 db    0
.eh_frame:000000000000FA0B                 db    0
.eh_frame:000000000000FA0C                 db    0
.eh_frame:000000000000FA0D                 db    2
.eh_frame:000000000000FA0E                 db  5Fh ; _
.eh_frame:000000000000FA0F                 db  0Eh
.eh_frame:000000000000FA10                 db  10h
.eh_frame:000000000000FA11                 db  49h ; I
.eh_frame:000000000000FA12                 db  0Eh
.eh_frame:000000000000FA13                 db    8
.eh_frame:000000000000FA14                 db  14h
.eh_frame:000000000000FA15                 db    0
.eh_frame:000000000000FA16                 db    0
.eh_frame:000000000000FA17                 db    0
.eh_frame:000000000000FA18                 db  98h
.eh_frame:000000000000FA19                 db  0Fh
.eh_frame:000000000000FA1A                 db    0
.eh_frame:000000000000FA1B                 db    0
.eh_frame:000000000000FA1C                 db  54h ; T
.eh_frame:000000000000FA1D                 db 0A4h
.eh_frame:000000000000FA1E                 db 0FFh
.eh_frame:000000000000FA1F                 db 0FFh
.eh_frame:000000000000FA20                 db  4Ah ; J
.eh_frame:000000000000FA21                 db    0
.eh_frame:000000000000FA22                 db    0
.eh_frame:000000000000FA23                 db    0
.eh_frame:000000000000FA24                 db    0
.eh_frame:000000000000FA25                 db    2
.eh_frame:000000000000FA26                 db  45h ; E
.eh_frame:000000000000FA27                 db  0Eh
.eh_frame:000000000000FA28                 db  10h
.eh_frame:000000000000FA29                 db    0
.eh_frame:000000000000FA2A                 db    0
.eh_frame:000000000000FA2B                 db    0
.eh_frame:000000000000FA2C                 db  18h
.eh_frame:000000000000FA2D                 db    0
.eh_frame:000000000000FA2E                 db    0
.eh_frame:000000000000FA2F                 db    0
.eh_frame:000000000000FA30                 db 0B0h
.eh_frame:000000000000FA31                 db  0Fh
.eh_frame:000000000000FA32                 db    0
.eh_frame:000000000000FA33                 db    0
.eh_frame:000000000000FA34                 db  8Ch
.eh_frame:000000000000FA35                 db 0A4h
.eh_frame:000000000000FA36                 db 0FFh
.eh_frame:000000000000FA37                 db 0FFh
.eh_frame:000000000000FA38                 db  17h
.eh_frame:000000000000FA39                 db    0
.eh_frame:000000000000FA3A                 db    0
.eh_frame:000000000000FA3B                 db    0
.eh_frame:000000000000FA3C                 db    0
.eh_frame:000000000000FA3D                 db  41h ; A
.eh_frame:000000000000FA3E                 db  0Eh
.eh_frame:000000000000FA3F                 db  10h
.eh_frame:000000000000FA40                 db  83h
.eh_frame:000000000000FA41                 db    2
.eh_frame:000000000000FA42                 db  51h ; Q
.eh_frame:000000000000FA43                 db  0Eh
.eh_frame:000000000000FA44                 db    8
.eh_frame:000000000000FA45                 db    0
.eh_frame:000000000000FA46                 db    0
.eh_frame:000000000000FA47                 db    0
.eh_frame:000000000000FA48                 db  18h
.eh_frame:000000000000FA49                 db    0
.eh_frame:000000000000FA4A                 db    0
.eh_frame:000000000000FA4B                 db    0
.eh_frame:000000000000FA4C                 db 0CCh
.eh_frame:000000000000FA4D                 db  0Fh
.eh_frame:000000000000FA4E                 db    0
.eh_frame:000000000000FA4F                 db    0
.eh_frame:000000000000FA50                 db  90h
.eh_frame:000000000000FA51                 db 0A4h
.eh_frame:000000000000FA52                 db 0FFh
.eh_frame:000000000000FA53                 db 0FFh
.eh_frame:000000000000FA54                 db  2Eh ; .
.eh_frame:000000000000FA55                 db    0
.eh_frame:000000000000FA56                 db    0
.eh_frame:000000000000FA57                 db    0
.eh_frame:000000000000FA58                 db    0
.eh_frame:000000000000FA59                 db  47h ; G
.eh_frame:000000000000FA5A                 db  0Eh
.eh_frame:000000000000FA5B                 db  10h
.eh_frame:000000000000FA5C                 db  61h ; a
.eh_frame:000000000000FA5D                 db  0Ah
.eh_frame:000000000000FA5E                 db  0Eh
.eh_frame:000000000000FA5F                 db    8
.eh_frame:000000000000FA60                 db  41h ; A
.eh_frame:000000000000FA61                 db  0Bh
.eh_frame:000000000000FA62                 db    0
.eh_frame:000000000000FA63                 db    0
.eh_frame:000000000000FA64                 db  24h ; $
.eh_frame:000000000000FA65                 db    0
.eh_frame:000000000000FA66                 db    0
.eh_frame:000000000000FA67                 db    0
.eh_frame:000000000000FA68                 db 0E8h
.eh_frame:000000000000FA69                 db  0Fh
.eh_frame:000000000000FA6A                 db    0
.eh_frame:000000000000FA6B                 db    0
.eh_frame:000000000000FA6C                 db 0A4h
.eh_frame:000000000000FA6D                 db 0A4h
.eh_frame:000000000000FA6E                 db 0FFh
.eh_frame:000000000000FA6F                 db 0FFh
.eh_frame:000000000000FA70                 db  28h ; (
.eh_frame:000000000000FA71                 db    0
.eh_frame:000000000000FA72                 db    0
.eh_frame:000000000000FA73                 db    0
.eh_frame:000000000000FA74                 db    0
.eh_frame:000000000000FA75                 db  41h ; A
.eh_frame:000000000000FA76                 db  0Eh
.eh_frame:000000000000FA77                 db  10h
.eh_frame:000000000000FA78                 db  86h
.eh_frame:000000000000FA79                 db    2
.eh_frame:000000000000FA7A                 db  41h ; A
.eh_frame:000000000000FA7B                 db  0Eh
.eh_frame:000000000000FA7C                 db  18h
.eh_frame:000000000000FA7D                 db  83h
.eh_frame:000000000000FA7E                 db    3
.eh_frame:000000000000FA7F                 db  4Dh ; M
.eh_frame:000000000000FA80                 db  0Eh
.eh_frame:000000000000FA81                 db  20h
.eh_frame:000000000000FA82                 db  49h ; I
.eh_frame:000000000000FA83                 db  0Eh
.eh_frame:000000000000FA84                 db  18h
.eh_frame:000000000000FA85                 db  47h ; G
.eh_frame:000000000000FA86                 db  0Eh
.eh_frame:000000000000FA87                 db  10h
.eh_frame:000000000000FA88                 db  41h ; A
.eh_frame:000000000000FA89                 db  0Eh
.eh_frame:000000000000FA8A                 db    8
.eh_frame:000000000000FA8B                 db    0
.eh_frame:000000000000FA8C                 db  18h
.eh_frame:000000000000FA8D                 db    0
.eh_frame:000000000000FA8E                 db    0
.eh_frame:000000000000FA8F                 db    0
.eh_frame:000000000000FA90                 db  10h
.eh_frame:000000000000FA91                 db  10h
.eh_frame:000000000000FA92                 db    0
.eh_frame:000000000000FA93                 db    0
.eh_frame:000000000000FA94                 db 0ACh
.eh_frame:000000000000FA95                 db 0A4h
.eh_frame:000000000000FA96                 db 0FFh
.eh_frame:000000000000FA97                 db 0FFh
.eh_frame:000000000000FA98                 db  13h
.eh_frame:000000000000FA99                 db    0
.eh_frame:000000000000FA9A                 db    0
.eh_frame:000000000000FA9B                 db    0
.eh_frame:000000000000FA9C                 db    0
.eh_frame:000000000000FA9D                 db  41h ; A
.eh_frame:000000000000FA9E                 db  0Eh
.eh_frame:000000000000FA9F                 db  10h
.eh_frame:000000000000FAA0                 db  83h
.eh_frame:000000000000FAA1                 db    2
.eh_frame:000000000000FAA2                 db  50h ; P
.eh_frame:000000000000FAA3                 db  0Eh
.eh_frame:000000000000FAA4                 db    8
.eh_frame:000000000000FAA5                 db    0
.eh_frame:000000000000FAA6                 db    0
.eh_frame:000000000000FAA7                 db    0
.eh_frame:000000000000FAA8                 db  14h
.eh_frame:000000000000FAA9                 db    0
.eh_frame:000000000000FAAA                 db    0
.eh_frame:000000000000FAAB                 db    0
.eh_frame:000000000000FAAC                 db  2Ch ; ,
.eh_frame:000000000000FAAD                 db  10h
.eh_frame:000000000000FAAE                 db    0
.eh_frame:000000000000FAAF                 db    0
.eh_frame:000000000000FAB0                 db 0B0h
.eh_frame:000000000000FAB1                 db 0A4h
.eh_frame:000000000000FAB2                 db 0FFh
.eh_frame:000000000000FAB3                 db 0FFh
.eh_frame:000000000000FAB4                 db  35h ; 5
.eh_frame:000000000000FAB5                 db    0
.eh_frame:000000000000FAB6                 db    0
.eh_frame:000000000000FAB7                 db    0
.eh_frame:000000000000FAB8                 db    0
.eh_frame:000000000000FAB9                 db  4Bh ; K
.eh_frame:000000000000FABA                 db  0Eh
.eh_frame:000000000000FABB                 db  10h
.eh_frame:000000000000FABC                 db    0
.eh_frame:000000000000FABD                 db    0
.eh_frame:000000000000FABE                 db    0
.eh_frame:000000000000FABF                 db    0
.eh_frame:000000000000FAC0                 db  48h ; H
.eh_frame:000000000000FAC1                 db    0
.eh_frame:000000000000FAC2                 db    0
.eh_frame:000000000000FAC3                 db    0
.eh_frame:000000000000FAC4                 db  44h ; D
.eh_frame:000000000000FAC5                 db  10h
.eh_frame:000000000000FAC6                 db    0
.eh_frame:000000000000FAC7                 db    0
.eh_frame:000000000000FAC8                 db 0D8h
.eh_frame:000000000000FAC9                 db 0A4h
.eh_frame:000000000000FACA                 db 0FFh
.eh_frame:000000000000FACB                 db 0FFh
.eh_frame:000000000000FACC                 db  11h
.eh_frame:000000000000FACD                 db    1
.eh_frame:000000000000FACE                 db    0
.eh_frame:000000000000FACF                 db    0
.eh_frame:000000000000FAD0                 db    0
.eh_frame:000000000000FAD1                 db  42h ; B
.eh_frame:000000000000FAD2                 db  0Eh
.eh_frame:000000000000FAD3                 db  10h
.eh_frame:000000000000FAD4                 db  8Fh
.eh_frame:000000000000FAD5                 db    2
.eh_frame:000000000000FAD6                 db  42h ; B
.eh_frame:000000000000FAD7                 db  0Eh
.eh_frame:000000000000FAD8                 db  18h
.eh_frame:000000000000FAD9                 db  8Eh
.eh_frame:000000000000FADA                 db    3
.eh_frame:000000000000FADB                 db  45h ; E
.eh_frame:000000000000FADC                 db  0Eh
.eh_frame:000000000000FADD                 db  20h
.eh_frame:000000000000FADE                 db  8Dh
.eh_frame:000000000000FADF                 db    4
.eh_frame:000000000000FAE0                 db  42h ; B
.eh_frame:000000000000FAE1                 db  0Eh
.eh_frame:000000000000FAE2                 db  28h ; (
.eh_frame:000000000000FAE3                 db  8Ch
.eh_frame:000000000000FAE4                 db    5
.eh_frame:000000000000FAE5                 db  44h ; D
.eh_frame:000000000000FAE6                 db  0Eh
.eh_frame:000000000000FAE7                 db  30h ; 0
.eh_frame:000000000000FAE8                 db  86h
.eh_frame:000000000000FAE9                 db    6
.eh_frame:000000000000FAEA                 db  41h ; A
.eh_frame:000000000000FAEB                 db  0Eh
.eh_frame:000000000000FAEC                 db  38h ; 8
.eh_frame:000000000000FAED                 db  83h
.eh_frame:000000000000FAEE                 db    7
.eh_frame:000000000000FAEF                 db  4Eh ; N
.eh_frame:000000000000FAF0                 db  0Eh
.eh_frame:000000000000FAF1                 db  50h ; P
.eh_frame:000000000000FAF2                 db    2
.eh_frame:000000000000FAF3                 db  9Fh
.eh_frame:000000000000FAF4                 db  0Ah
.eh_frame:000000000000FAF5                 db  0Eh
.eh_frame:000000000000FAF6                 db  38h ; 8
.eh_frame:000000000000FAF7                 db  41h ; A
.eh_frame:000000000000FAF8                 db  0Eh
.eh_frame:000000000000FAF9                 db  30h ; 0
.eh_frame:000000000000FAFA                 db  41h ; A
.eh_frame:000000000000FAFB                 db  0Eh
.eh_frame:000000000000FAFC                 db  28h ; (
.eh_frame:000000000000FAFD                 db  42h ; B
.eh_frame:000000000000FAFE                 db  0Eh
.eh_frame:000000000000FAFF                 db  20h
.eh_frame:000000000000FB00                 db  42h ; B
.eh_frame:000000000000FB01                 db  0Eh
.eh_frame:000000000000FB02                 db  18h
.eh_frame:000000000000FB03                 db  42h ; B
.eh_frame:000000000000FB04                 db  0Eh
.eh_frame:000000000000FB05                 db  10h
.eh_frame:000000000000FB06                 db  42h ; B
.eh_frame:000000000000FB07                 db  0Eh
.eh_frame:000000000000FB08                 db    8
.eh_frame:000000000000FB09                 db  49h ; I
.eh_frame:000000000000FB0A                 db  0Bh
.eh_frame:000000000000FB0B                 db    0
.eh_frame:000000000000FB0C                 db  18h
.eh_frame:000000000000FB0D                 db    0
.eh_frame:000000000000FB0E                 db    0
.eh_frame:000000000000FB0F                 db    0
.eh_frame:000000000000FB10                 db  90h
.eh_frame:000000000000FB11                 db  10h
.eh_frame:000000000000FB12                 db    0
.eh_frame:000000000000FB13                 db    0
.eh_frame:000000000000FB14                 db 0ACh
.eh_frame:000000000000FB15                 db 0A5h
.eh_frame:000000000000FB16                 db 0FFh
.eh_frame:000000000000FB17                 db 0FFh
.eh_frame:000000000000FB18                 db  21h ; !
.eh_frame:000000000000FB19                 db    0
.eh_frame:000000000000FB1A                 db    0
.eh_frame:000000000000FB1B                 db    0
.eh_frame:000000000000FB1C                 db    0
.eh_frame:000000000000FB1D                 db  44h ; D
.eh_frame:000000000000FB1E                 db  0Eh
.eh_frame:000000000000FB1F                 db  18h
.eh_frame:000000000000FB20                 db  42h ; B
.eh_frame:000000000000FB21                 db  0Eh
.eh_frame:000000000000FB22                 db  20h
.eh_frame:000000000000FB23                 db  5Ah ; Z
.eh_frame:000000000000FB24                 db  0Eh
.eh_frame:000000000000FB25                 db    8
.eh_frame:000000000000FB26                 db    0
.eh_frame:000000000000FB27                 db    0
.eh_frame:000000000000FB28                 db  4Ch ; L
.eh_frame:000000000000FB29                 db    0
.eh_frame:000000000000FB2A                 db    0
.eh_frame:000000000000FB2B                 db    0
.eh_frame:000000000000FB2C                 db 0ACh
.eh_frame:000000000000FB2D                 db  10h
.eh_frame:000000000000FB2E                 db    0
.eh_frame:000000000000FB2F                 db    0
.eh_frame:000000000000FB30                 db 0C0h
.eh_frame:000000000000FB31                 db 0A5h
.eh_frame:000000000000FB32                 db 0FFh
.eh_frame:000000000000FB33                 db 0FFh
.eh_frame:000000000000FB34                 db 0B3h
.eh_frame:000000000000FB35                 db    6
.eh_frame:000000000000FB36                 db    0
.eh_frame:000000000000FB37                 db    0
.eh_frame:000000000000FB38                 db    0
.eh_frame:000000000000FB39                 db  42h ; B
.eh_frame:000000000000FB3A                 db  0Eh
.eh_frame:000000000000FB3B                 db  10h
.eh_frame:000000000000FB3C                 db  8Fh
.eh_frame:000000000000FB3D                 db    2
.eh_frame:000000000000FB3E                 db  42h ; B
.eh_frame:000000000000FB3F                 db  0Eh
.eh_frame:000000000000FB40                 db  18h
.eh_frame:000000000000FB41                 db  8Eh
.eh_frame:000000000000FB42                 db    3
.eh_frame:000000000000FB43                 db  42h ; B
.eh_frame:000000000000FB44                 db  0Eh
.eh_frame:000000000000FB45                 db  20h
.eh_frame:000000000000FB46                 db  8Dh
.eh_frame:000000000000FB47                 db    4
.eh_frame:000000000000FB48                 db  42h ; B
.eh_frame:000000000000FB49                 db  0Eh
.eh_frame:000000000000FB4A                 db  28h ; (
.eh_frame:000000000000FB4B                 db  8Ch
.eh_frame:000000000000FB4C                 db    5
.eh_frame:000000000000FB4D                 db  41h ; A
.eh_frame:000000000000FB4E                 db  0Eh
.eh_frame:000000000000FB4F                 db  30h ; 0
.eh_frame:000000000000FB50                 db  86h
.eh_frame:000000000000FB51                 db    6
.eh_frame:000000000000FB52                 db  41h ; A
.eh_frame:000000000000FB53                 db  0Eh
.eh_frame:000000000000FB54                 db  38h ; 8
.eh_frame:000000000000FB55                 db  83h
.eh_frame:000000000000FB56                 db    7
.eh_frame:000000000000FB57                 db  44h ; D
.eh_frame:000000000000FB58                 db  0Eh
.eh_frame:000000000000FB59                 db  60h ; `
.eh_frame:000000000000FB5A                 db    2
.eh_frame:000000000000FB5B                 db  96h
.eh_frame:000000000000FB5C                 db  0Ah
.eh_frame:000000000000FB5D                 db  0Eh
.eh_frame:000000000000FB5E                 db  38h ; 8
.eh_frame:000000000000FB5F                 db  41h ; A
.eh_frame:000000000000FB60                 db  0Eh
.eh_frame:000000000000FB61                 db  30h ; 0
.eh_frame:000000000000FB62                 db  41h ; A
.eh_frame:000000000000FB63                 db  0Eh
.eh_frame:000000000000FB64                 db  28h ; (
.eh_frame:000000000000FB65                 db  42h ; B
.eh_frame:000000000000FB66                 db  0Eh
.eh_frame:000000000000FB67                 db  20h
.eh_frame:000000000000FB68                 db  42h ; B
.eh_frame:000000000000FB69                 db  0Eh
.eh_frame:000000000000FB6A                 db  18h
.eh_frame:000000000000FB6B                 db  42h ; B
.eh_frame:000000000000FB6C                 db  0Eh
.eh_frame:000000000000FB6D                 db  10h
.eh_frame:000000000000FB6E                 db  42h ; B
.eh_frame:000000000000FB6F                 db  0Eh
.eh_frame:000000000000FB70                 db    8
.eh_frame:000000000000FB71                 db  42h ; B
.eh_frame:000000000000FB72                 db  0Bh
.eh_frame:000000000000FB73                 db    0
.eh_frame:000000000000FB74                 db    0
.eh_frame:000000000000FB75                 db    0
.eh_frame:000000000000FB76                 db    0
.eh_frame:000000000000FB77                 db    0
.eh_frame:000000000000FB78                 db  4Ch ; L
.eh_frame:000000000000FB79                 db    0
.eh_frame:000000000000FB7A                 db    0
.eh_frame:000000000000FB7B                 db    0
.eh_frame:000000000000FB7C                 db 0FCh
.eh_frame:000000000000FB7D                 db  10h
.eh_frame:000000000000FB7E                 db    0
.eh_frame:000000000000FB7F                 db    0
.eh_frame:000000000000FB80                 db  30h ; 0
.eh_frame:000000000000FB81                 db 0ACh
.eh_frame:000000000000FB82                 db 0FFh
.eh_frame:000000000000FB83                 db 0FFh
.eh_frame:000000000000FB84                 db 0B3h
.eh_frame:000000000000FB85                 db    6
.eh_frame:000000000000FB86                 db    0
.eh_frame:000000000000FB87                 db    0
.eh_frame:000000000000FB88                 db    0
.eh_frame:000000000000FB89                 db  42h ; B
.eh_frame:000000000000FB8A                 db  0Eh
.eh_frame:000000000000FB8B                 db  10h
.eh_frame:000000000000FB8C                 db  8Fh
.eh_frame:000000000000FB8D                 db    2
.eh_frame:000000000000FB8E                 db  42h ; B
.eh_frame:000000000000FB8F                 db  0Eh
.eh_frame:000000000000FB90                 db  18h
.eh_frame:000000000000FB91                 db  8Eh
.eh_frame:000000000000FB92                 db    3
.eh_frame:000000000000FB93                 db  42h ; B
.eh_frame:000000000000FB94                 db  0Eh
.eh_frame:000000000000FB95                 db  20h
.eh_frame:000000000000FB96                 db  8Dh
.eh_frame:000000000000FB97                 db    4
.eh_frame:000000000000FB98                 db  42h ; B
.eh_frame:000000000000FB99                 db  0Eh
.eh_frame:000000000000FB9A                 db  28h ; (
.eh_frame:000000000000FB9B                 db  8Ch
.eh_frame:000000000000FB9C                 db    5
.eh_frame:000000000000FB9D                 db  41h ; A
.eh_frame:000000000000FB9E                 db  0Eh
.eh_frame:000000000000FB9F                 db  30h ; 0
.eh_frame:000000000000FBA0                 db  86h
.eh_frame:000000000000FBA1                 db    6
.eh_frame:000000000000FBA2                 db  41h ; A
.eh_frame:000000000000FBA3                 db  0Eh
.eh_frame:000000000000FBA4                 db  38h ; 8
.eh_frame:000000000000FBA5                 db  83h
.eh_frame:000000000000FBA6                 db    7
.eh_frame:000000000000FBA7                 db  44h ; D
.eh_frame:000000000000FBA8                 db  0Eh
.eh_frame:000000000000FBA9                 db  60h ; `
.eh_frame:000000000000FBAA                 db    2
.eh_frame:000000000000FBAB                 db  94h
.eh_frame:000000000000FBAC                 db  0Ah
.eh_frame:000000000000FBAD                 db  0Eh
.eh_frame:000000000000FBAE                 db  38h ; 8
.eh_frame:000000000000FBAF                 db  41h ; A
.eh_frame:000000000000FBB0                 db  0Eh
.eh_frame:000000000000FBB1                 db  30h ; 0
.eh_frame:000000000000FBB2                 db  41h ; A
.eh_frame:000000000000FBB3                 db  0Eh
.eh_frame:000000000000FBB4                 db  28h ; (
.eh_frame:000000000000FBB5                 db  42h ; B
.eh_frame:000000000000FBB6                 db  0Eh
.eh_frame:000000000000FBB7                 db  20h
.eh_frame:000000000000FBB8                 db  42h ; B
.eh_frame:000000000000FBB9                 db  0Eh
.eh_frame:000000000000FBBA                 db  18h
.eh_frame:000000000000FBBB                 db  42h ; B
.eh_frame:000000000000FBBC                 db  0Eh
.eh_frame:000000000000FBBD                 db  10h
.eh_frame:000000000000FBBE                 db  42h ; B
.eh_frame:000000000000FBBF                 db  0Eh
.eh_frame:000000000000FBC0                 db    8
.eh_frame:000000000000FBC1                 db  44h ; D
.eh_frame:000000000000FBC2                 db  0Bh
.eh_frame:000000000000FBC3                 db    0
.eh_frame:000000000000FBC4                 db    0
.eh_frame:000000000000FBC5                 db    0
.eh_frame:000000000000FBC6                 db    0
.eh_frame:000000000000FBC7                 db    0
.eh_frame:000000000000FBC8                 db  24h ; $
.eh_frame:000000000000FBC9                 db    0
.eh_frame:000000000000FBCA                 db    0
.eh_frame:000000000000FBCB                 db    0
.eh_frame:000000000000FBCC                 db  4Ch ; L
.eh_frame:000000000000FBCD                 db  11h
.eh_frame:000000000000FBCE                 db    0
.eh_frame:000000000000FBCF                 db    0
.eh_frame:000000000000FBD0                 db 0A0h
.eh_frame:000000000000FBD1                 db 0B2h
.eh_frame:000000000000FBD2                 db 0FFh
.eh_frame:000000000000FBD3                 db 0FFh
.eh_frame:000000000000FBD4                 db 0ACh
.eh_frame:000000000000FBD5                 db    0
.eh_frame:000000000000FBD6                 db    0
.eh_frame:000000000000FBD7                 db    0
.eh_frame:000000000000FBD8                 db    0
.eh_frame:000000000000FBD9                 db  42h ; B
.eh_frame:000000000000FBDA                 db  0Eh
.eh_frame:000000000000FBDB                 db  10h
.eh_frame:000000000000FBDC                 db  8Dh
.eh_frame:000000000000FBDD                 db    2
.eh_frame:000000000000FBDE                 db  42h ; B
.eh_frame:000000000000FBDF                 db  0Eh
.eh_frame:000000000000FBE0                 db  18h
.eh_frame:000000000000FBE1                 db  8Ch
.eh_frame:000000000000FBE2                 db    3
.eh_frame:000000000000FBE3                 db  44h ; D
.eh_frame:000000000000FBE4                 db  0Eh
.eh_frame:000000000000FBE5                 db  20h
.eh_frame:000000000000FBE6                 db  86h
.eh_frame:000000000000FBE7                 db    4
.eh_frame:000000000000FBE8                 db  41h ; A
.eh_frame:000000000000FBE9                 db  0Eh
.eh_frame:000000000000FBEA                 db  28h ; (
.eh_frame:000000000000FBEB                 db  83h
.eh_frame:000000000000FBEC                 db    5
.eh_frame:000000000000FBED                 db  47h ; G
.eh_frame:000000000000FBEE                 db  0Eh
.eh_frame:000000000000FBEF                 db  40h ; @
.eh_frame:000000000000FBF0                 db  4Ch ; L
.eh_frame:000000000000FBF1                 db    0
.eh_frame:000000000000FBF2                 db    0
.eh_frame:000000000000FBF3                 db    0
.eh_frame:000000000000FBF4                 db  74h ; t
.eh_frame:000000000000FBF5                 db  11h
.eh_frame:000000000000FBF6                 db    0
.eh_frame:000000000000FBF7                 db    0
.eh_frame:000000000000FBF8                 db  28h ; (
.eh_frame:000000000000FBF9                 db 0B3h
.eh_frame:000000000000FBFA                 db 0FFh
.eh_frame:000000000000FBFB                 db 0FFh
.eh_frame:000000000000FBFC                 db  1Ch
.eh_frame:000000000000FBFD                 db    4
.eh_frame:000000000000FBFE                 db    0
.eh_frame:000000000000FBFF                 db    0
.eh_frame:000000000000FC00                 db    0
.eh_frame:000000000000FC01                 db  42h ; B
.eh_frame:000000000000FC02                 db  0Eh
.eh_frame:000000000000FC03                 db  10h
.eh_frame:000000000000FC04                 db  8Fh
.eh_frame:000000000000FC05                 db    2
.eh_frame:000000000000FC06                 db  42h ; B
.eh_frame:000000000000FC07                 db  0Eh
.eh_frame:000000000000FC08                 db  18h
.eh_frame:000000000000FC09                 db  8Eh
.eh_frame:000000000000FC0A                 db    3
.eh_frame:000000000000FC0B                 db  42h ; B
.eh_frame:000000000000FC0C                 db  0Eh
.eh_frame:000000000000FC0D                 db  20h
.eh_frame:000000000000FC0E                 db  8Dh
.eh_frame:000000000000FC0F                 db    4
.eh_frame:000000000000FC10                 db  42h ; B
.eh_frame:000000000000FC11                 db  0Eh
.eh_frame:000000000000FC12                 db  28h ; (
.eh_frame:000000000000FC13                 db  8Ch
.eh_frame:000000000000FC14                 db    5
.eh_frame:000000000000FC15                 db  41h ; A
.eh_frame:000000000000FC16                 db  0Eh
.eh_frame:000000000000FC17                 db  30h ; 0
.eh_frame:000000000000FC18                 db  86h
.eh_frame:000000000000FC19                 db    6
.eh_frame:000000000000FC1A                 db  41h ; A
.eh_frame:000000000000FC1B                 db  0Eh
.eh_frame:000000000000FC1C                 db  38h ; 8
.eh_frame:000000000000FC1D                 db  83h
.eh_frame:000000000000FC1E                 db    7
.eh_frame:000000000000FC1F                 db  44h ; D
.eh_frame:000000000000FC20                 db  0Eh
.eh_frame:000000000000FC21                 db  60h ; `
.eh_frame:000000000000FC22                 db    2
.eh_frame:000000000000FC23                 db 0E9h
.eh_frame:000000000000FC24                 db  0Ah
.eh_frame:000000000000FC25                 db  0Eh
.eh_frame:000000000000FC26                 db  38h ; 8
.eh_frame:000000000000FC27                 db  41h ; A
.eh_frame:000000000000FC28                 db  0Eh
.eh_frame:000000000000FC29                 db  30h ; 0
.eh_frame:000000000000FC2A                 db  41h ; A
.eh_frame:000000000000FC2B                 db  0Eh
.eh_frame:000000000000FC2C                 db  28h ; (
.eh_frame:000000000000FC2D                 db  42h ; B
.eh_frame:000000000000FC2E                 db  0Eh
.eh_frame:000000000000FC2F                 db  20h
.eh_frame:000000000000FC30                 db  42h ; B
.eh_frame:000000000000FC31                 db  0Eh
.eh_frame:000000000000FC32                 db  18h
.eh_frame:000000000000FC33                 db  42h ; B
.eh_frame:000000000000FC34                 db  0Eh
.eh_frame:000000000000FC35                 db  10h
.eh_frame:000000000000FC36                 db  42h ; B
.eh_frame:000000000000FC37                 db  0Eh
.eh_frame:000000000000FC38                 db    8
.eh_frame:000000000000FC39                 db  47h ; G
.eh_frame:000000000000FC3A                 db  0Bh
.eh_frame:000000000000FC3B                 db    0
.eh_frame:000000000000FC3C                 db    0
.eh_frame:000000000000FC3D                 db    0
.eh_frame:000000000000FC3E                 db    0
.eh_frame:000000000000FC3F                 db    0
.eh_frame:000000000000FC40                 db  34h ; 4
.eh_frame:000000000000FC41                 db    0
.eh_frame:000000000000FC42                 db    0
.eh_frame:000000000000FC43                 db    0
.eh_frame:000000000000FC44                 db 0C4h
.eh_frame:000000000000FC45                 db  11h
.eh_frame:000000000000FC46                 db    0
.eh_frame:000000000000FC47                 db    0
.eh_frame:000000000000FC48                 db 0F8h
.eh_frame:000000000000FC49                 db 0B6h
.eh_frame:000000000000FC4A                 db 0FFh
.eh_frame:000000000000FC4B                 db 0FFh
.eh_frame:000000000000FC4C                 db  7Bh ; {
.eh_frame:000000000000FC4D                 db    0
.eh_frame:000000000000FC4E                 db    0
.eh_frame:000000000000FC4F                 db    0
.eh_frame:000000000000FC50                 db    0
.eh_frame:000000000000FC51                 db  42h ; B
.eh_frame:000000000000FC52                 db  0Eh
.eh_frame:000000000000FC53                 db  10h
.eh_frame:000000000000FC54                 db  8Ch
.eh_frame:000000000000FC55                 db    2
.eh_frame:000000000000FC56                 db  41h ; A
.eh_frame:000000000000FC57                 db  0Eh
.eh_frame:000000000000FC58                 db  18h
.eh_frame:000000000000FC59                 db  86h
.eh_frame:000000000000FC5A                 db    3
.eh_frame:000000000000FC5B                 db  41h ; A
.eh_frame:000000000000FC5C                 db  0Eh
.eh_frame:000000000000FC5D                 db  20h
.eh_frame:000000000000FC5E                 db  83h
.eh_frame:000000000000FC5F                 db    4
.eh_frame:000000000000FC60                 db  7Dh ; }
.eh_frame:000000000000FC61                 db  0Ah
.eh_frame:000000000000FC62                 db  0Eh
.eh_frame:000000000000FC63                 db  18h
.eh_frame:000000000000FC64                 db  41h ; A
.eh_frame:000000000000FC65                 db  0Eh
.eh_frame:000000000000FC66                 db  10h
.eh_frame:000000000000FC67                 db  42h ; B
.eh_frame:000000000000FC68                 db  0Eh
.eh_frame:000000000000FC69                 db    8
.eh_frame:000000000000FC6A                 db  44h ; D
.eh_frame:000000000000FC6B                 db  0Bh
.eh_frame:000000000000FC6C                 db  60h ; `
.eh_frame:000000000000FC6D                 db  0Ah
.eh_frame:000000000000FC6E                 db  0Eh
.eh_frame:000000000000FC6F                 db  18h
.eh_frame:000000000000FC70                 db  41h ; A
.eh_frame:000000000000FC71                 db  0Eh
.eh_frame:000000000000FC72                 db  10h
.eh_frame:000000000000FC73                 db  42h ; B
.eh_frame:000000000000FC74                 db  0Eh
.eh_frame:000000000000FC75                 db    8
.eh_frame:000000000000FC76                 db  45h ; E
.eh_frame:000000000000FC77                 db  0Bh
.eh_frame:000000000000FC78                 db  34h ; 4
.eh_frame:000000000000FC79                 db    0
.eh_frame:000000000000FC7A                 db    0
.eh_frame:000000000000FC7B                 db    0
.eh_frame:000000000000FC7C                 db 0FCh
.eh_frame:000000000000FC7D                 db  11h
.eh_frame:000000000000FC7E                 db    0
.eh_frame:000000000000FC7F                 db    0
.eh_frame:000000000000FC80                 db  40h ; @
.eh_frame:000000000000FC81                 db 0B7h
.eh_frame:000000000000FC82                 db 0FFh
.eh_frame:000000000000FC83                 db 0FFh
.eh_frame:000000000000FC84                 db  7Eh ; ~
.eh_frame:000000000000FC85                 db    2
.eh_frame:000000000000FC86                 db    0
.eh_frame:000000000000FC87                 db    0
.eh_frame:000000000000FC88                 db    0
.eh_frame:000000000000FC89                 db  42h ; B
.eh_frame:000000000000FC8A                 db  0Eh
.eh_frame:000000000000FC8B                 db  10h
.eh_frame:000000000000FC8C                 db  8Ch
.eh_frame:000000000000FC8D                 db    2
.eh_frame:000000000000FC8E                 db  41h ; A
.eh_frame:000000000000FC8F                 db  0Eh
.eh_frame:000000000000FC90                 db  18h
.eh_frame:000000000000FC91                 db  86h
.eh_frame:000000000000FC92                 db    3
.eh_frame:000000000000FC93                 db  43h ; C
.eh_frame:000000000000FC94                 db  0Eh
.eh_frame:000000000000FC95                 db  20h
.eh_frame:000000000000FC96                 db  83h
.eh_frame:000000000000FC97                 db    4
.eh_frame:000000000000FC98                 db  44h ; D
.eh_frame:000000000000FC99                 db  0Eh
.eh_frame:000000000000FC9A                 db  70h ; p
.eh_frame:000000000000FC9B                 db    2
.eh_frame:000000000000FC9C                 db 0F0h
.eh_frame:000000000000FC9D                 db  0Ah
.eh_frame:000000000000FC9E                 db  0Eh
.eh_frame:000000000000FC9F                 db  20h
.eh_frame:000000000000FCA0                 db  41h ; A
.eh_frame:000000000000FCA1                 db  0Eh
.eh_frame:000000000000FCA2                 db  18h
.eh_frame:000000000000FCA3                 db  41h ; A
.eh_frame:000000000000FCA4                 db  0Eh
.eh_frame:000000000000FCA5                 db  10h
.eh_frame:000000000000FCA6                 db  42h ; B
.eh_frame:000000000000FCA7                 db  0Eh
.eh_frame:000000000000FCA8                 db    8
.eh_frame:000000000000FCA9                 db  42h ; B
.eh_frame:000000000000FCAA                 db  0Bh
.eh_frame:000000000000FCAB                 db    0
.eh_frame:000000000000FCAC                 db    0
.eh_frame:000000000000FCAD                 db    0
.eh_frame:000000000000FCAE                 db    0
.eh_frame:000000000000FCAF                 db    0
.eh_frame:000000000000FCB0                 db  1Ch
.eh_frame:000000000000FCB1                 db    0
.eh_frame:000000000000FCB2                 db    0
.eh_frame:000000000000FCB3                 db    0
.eh_frame:000000000000FCB4                 db  34h ; 4
.eh_frame:000000000000FCB5                 db  12h
.eh_frame:000000000000FCB6                 db    0
.eh_frame:000000000000FCB7                 db    0
.eh_frame:000000000000FCB8                 db  88h
.eh_frame:000000000000FCB9                 db 0B9h
.eh_frame:000000000000FCBA                 db 0FFh
.eh_frame:000000000000FCBB                 db 0FFh
.eh_frame:000000000000FCBC                 db  40h ; @
.eh_frame:000000000000FCBD                 db    0
.eh_frame:000000000000FCBE                 db    0
.eh_frame:000000000000FCBF                 db    0
.eh_frame:000000000000FCC0                 db    0
.eh_frame:000000000000FCC1                 db  44h ; D
.eh_frame:000000000000FCC2                 db  0Eh
.eh_frame:000000000000FCC3                 db  10h
.eh_frame:000000000000FCC4                 db  83h
.eh_frame:000000000000FCC5                 db    2
.eh_frame:000000000000FCC6                 db  5Ah ; Z
.eh_frame:000000000000FCC7                 db  0Ah
.eh_frame:000000000000FCC8                 db  0Eh
.eh_frame:000000000000FCC9                 db    8
.eh_frame:000000000000FCCA                 db  4Ah ; J
.eh_frame:000000000000FCCB                 db  0Bh
.eh_frame:000000000000FCCC                 db  53h ; S
.eh_frame:000000000000FCCD                 db  0Eh
.eh_frame:000000000000FCCE                 db    8
.eh_frame:000000000000FCCF                 db    0
.eh_frame:000000000000FCD0                 db  2Ch ; ,
.eh_frame:000000000000FCD1                 db    0
.eh_frame:000000000000FCD2                 db    0
.eh_frame:000000000000FCD3                 db    0
.eh_frame:000000000000FCD4                 db  54h ; T
.eh_frame:000000000000FCD5                 db  12h
.eh_frame:000000000000FCD6                 db    0
.eh_frame:000000000000FCD7                 db    0
.eh_frame:000000000000FCD8                 db 0A8h
.eh_frame:000000000000FCD9                 db 0B9h
.eh_frame:000000000000FCDA                 db 0FFh
.eh_frame:000000000000FCDB                 db 0FFh
.eh_frame:000000000000FCDC                 db  57h ; W
.eh_frame:000000000000FCDD                 db    0
.eh_frame:000000000000FCDE                 db    0
.eh_frame:000000000000FCDF                 db    0
.eh_frame:000000000000FCE0                 db    0
.eh_frame:000000000000FCE1                 db  63h ; c
.eh_frame:000000000000FCE2                 db  0Eh
.eh_frame:000000000000FCE3                 db  10h
.eh_frame:000000000000FCE4                 db  8Ch
.eh_frame:000000000000FCE5                 db    2
.eh_frame:000000000000FCE6                 db  41h ; A
.eh_frame:000000000000FCE7                 db  0Eh
.eh_frame:000000000000FCE8                 db  18h
.eh_frame:000000000000FCE9                 db  86h
.eh_frame:000000000000FCEA                 db    3
.eh_frame:000000000000FCEB                 db  44h ; D
.eh_frame:000000000000FCEC                 db  0Eh
.eh_frame:000000000000FCED                 db  20h
.eh_frame:000000000000FCEE                 db  83h
.eh_frame:000000000000FCEF                 db    4
.eh_frame:000000000000FCF0                 db  6Bh ; k
.eh_frame:000000000000FCF1                 db  0Eh
.eh_frame:000000000000FCF2                 db  18h
.eh_frame:000000000000FCF3                 db  41h ; A
.eh_frame:000000000000FCF4                 db  0Eh
.eh_frame:000000000000FCF5                 db  10h
.eh_frame:000000000000FCF6                 db  42h ; B
.eh_frame:000000000000FCF7                 db  0Eh
.eh_frame:000000000000FCF8                 db    8
.eh_frame:000000000000FCF9                 db    0
.eh_frame:000000000000FCFA                 db    0
.eh_frame:000000000000FCFB                 db    0
.eh_frame:000000000000FCFC                 db    0
.eh_frame:000000000000FCFD                 db    0
.eh_frame:000000000000FCFE                 db    0
.eh_frame:000000000000FCFF                 db    0
.eh_frame:000000000000FD00                 db  3Ch ; <
.eh_frame:000000000000FD01                 db    0
.eh_frame:000000000000FD02                 db    0
.eh_frame:000000000000FD03                 db    0
.eh_frame:000000000000FD04                 db  84h
.eh_frame:000000000000FD05                 db  12h
.eh_frame:000000000000FD06                 db    0
.eh_frame:000000000000FD07                 db    0
.eh_frame:000000000000FD08                 db 0D8h
.eh_frame:000000000000FD09                 db 0B9h
.eh_frame:000000000000FD0A                 db 0FFh
.eh_frame:000000000000FD0B                 db 0FFh
.eh_frame:000000000000FD0C                 db  83h
.eh_frame:000000000000FD0D                 db    0
.eh_frame:000000000000FD0E                 db    0
.eh_frame:000000000000FD0F                 db    0
.eh_frame:000000000000FD10                 db    0
.eh_frame:000000000000FD11                 db  42h ; B
.eh_frame:000000000000FD12                 db  0Eh
.eh_frame:000000000000FD13                 db  10h
.eh_frame:000000000000FD14                 db  8Dh
.eh_frame:000000000000FD15                 db    2
.eh_frame:000000000000FD16                 db  42h ; B
.eh_frame:000000000000FD17                 db  0Eh
.eh_frame:000000000000FD18                 db  18h
.eh_frame:000000000000FD19                 db  8Ch
.eh_frame:000000000000FD1A                 db    3
.eh_frame:000000000000FD1B                 db  44h ; D
.eh_frame:000000000000FD1C                 db  0Eh
.eh_frame:000000000000FD1D                 db  20h
.eh_frame:000000000000FD1E                 db  86h
.eh_frame:000000000000FD1F                 db    4
.eh_frame:000000000000FD20                 db  41h ; A
.eh_frame:000000000000FD21                 db  0Eh
.eh_frame:000000000000FD22                 db  28h ; (
.eh_frame:000000000000FD23                 db  83h
.eh_frame:000000000000FD24                 db    5
.eh_frame:000000000000FD25                 db  4Ah ; J
.eh_frame:000000000000FD26                 db  0Eh
.eh_frame:000000000000FD27                 db  40h ; @
.eh_frame:000000000000FD28                 db    2
.eh_frame:000000000000FD29                 db  64h ; d
.eh_frame:000000000000FD2A                 db  0Ah
.eh_frame:000000000000FD2B                 db  0Eh
.eh_frame:000000000000FD2C                 db  28h ; (
.eh_frame:000000000000FD2D                 db  41h ; A
.eh_frame:000000000000FD2E                 db  0Eh
.eh_frame:000000000000FD2F                 db  20h
.eh_frame:000000000000FD30                 db  41h ; A
.eh_frame:000000000000FD31                 db  0Eh
.eh_frame:000000000000FD32                 db  18h
.eh_frame:000000000000FD33                 db  42h ; B
.eh_frame:000000000000FD34                 db  0Eh
.eh_frame:000000000000FD35                 db  10h
.eh_frame:000000000000FD36                 db  42h ; B
.eh_frame:000000000000FD37                 db  0Eh
.eh_frame:000000000000FD38                 db    8
.eh_frame:000000000000FD39                 db  41h ; A
.eh_frame:000000000000FD3A                 db  0Bh
.eh_frame:000000000000FD3B                 db    0
.eh_frame:000000000000FD3C                 db    0
.eh_frame:000000000000FD3D                 db    0
.eh_frame:000000000000FD3E                 db    0
.eh_frame:000000000000FD3F                 db    0
.eh_frame:000000000000FD40                 db  10h
.eh_frame:000000000000FD41                 db    0
.eh_frame:000000000000FD42                 db    0
.eh_frame:000000000000FD43                 db    0
.eh_frame:000000000000FD44                 db 0C4h
.eh_frame:000000000000FD45                 db  12h
.eh_frame:000000000000FD46                 db    0
.eh_frame:000000000000FD47                 db    0
.eh_frame:000000000000FD48                 db  28h ; (
.eh_frame:000000000000FD49                 db 0BAh
.eh_frame:000000000000FD4A                 db 0FFh
.eh_frame:000000000000FD4B                 db 0FFh
.eh_frame:000000000000FD4C                 db  2Ch ; ,
.eh_frame:000000000000FD4D                 db    0
.eh_frame:000000000000FD4E                 db    0
.eh_frame:000000000000FD4F                 db    0
.eh_frame:000000000000FD50                 db    0
.eh_frame:000000000000FD51                 db    0
.eh_frame:000000000000FD52                 db    0
.eh_frame:000000000000FD53                 db    0
.eh_frame:000000000000FD54                 db  18h
.eh_frame:000000000000FD55                 db    0
.eh_frame:000000000000FD56                 db    0
.eh_frame:000000000000FD57                 db    0
.eh_frame:000000000000FD58                 db 0D8h
.eh_frame:000000000000FD59                 db  12h
.eh_frame:000000000000FD5A                 db    0
.eh_frame:000000000000FD5B                 db    0
.eh_frame:000000000000FD5C                 db  44h ; D
.eh_frame:000000000000FD5D                 db 0BAh
.eh_frame:000000000000FD5E                 db 0FFh
.eh_frame:000000000000FD5F                 db 0FFh
.eh_frame:000000000000FD60                 db  2Ah ; *
.eh_frame:000000000000FD61                 db    0
.eh_frame:000000000000FD62                 db    0
.eh_frame:000000000000FD63                 db    0
.eh_frame:000000000000FD64                 db    0
.eh_frame:000000000000FD65                 db  46h ; F
.eh_frame:000000000000FD66                 db  0Eh
.eh_frame:000000000000FD67                 db  10h
.eh_frame:000000000000FD68                 db  83h
.eh_frame:000000000000FD69                 db    2
.eh_frame:000000000000FD6A                 db  5Bh ; [
.eh_frame:000000000000FD6B                 db  0Eh
.eh_frame:000000000000FD6C                 db    8
.eh_frame:000000000000FD6D                 db  47h ; G
.eh_frame:000000000000FD6E                 db 0C3h
.eh_frame:000000000000FD6F                 db    0
.eh_frame:000000000000FD70                 db  38h ; 8
.eh_frame:000000000000FD71                 db    0
.eh_frame:000000000000FD72                 db    0
.eh_frame:000000000000FD73                 db    0
.eh_frame:000000000000FD74                 db 0F4h
.eh_frame:000000000000FD75                 db  12h
.eh_frame:000000000000FD76                 db    0
.eh_frame:000000000000FD77                 db    0
.eh_frame:000000000000FD78                 db  58h ; X
.eh_frame:000000000000FD79                 db 0BAh
.eh_frame:000000000000FD7A                 db 0FFh
.eh_frame:000000000000FD7B                 db 0FFh
.eh_frame:000000000000FD7C                 db  5Dh ; ]
.eh_frame:000000000000FD7D                 db    0
.eh_frame:000000000000FD7E                 db    0
.eh_frame:000000000000FD7F                 db    0
.eh_frame:000000000000FD80                 db    0
.eh_frame:000000000000FD81                 db  42h ; B
.eh_frame:000000000000FD82                 db  0Eh
.eh_frame:000000000000FD83                 db  10h
.eh_frame:000000000000FD84                 db  8Dh
.eh_frame:000000000000FD85                 db    2
.eh_frame:000000000000FD86                 db  42h ; B
.eh_frame:000000000000FD87                 db  0Eh
.eh_frame:000000000000FD88                 db  18h
.eh_frame:000000000000FD89                 db  8Ch
.eh_frame:000000000000FD8A                 db    3
.eh_frame:000000000000FD8B                 db  41h ; A
.eh_frame:000000000000FD8C                 db  0Eh
.eh_frame:000000000000FD8D                 db  20h
.eh_frame:000000000000FD8E                 db  86h
.eh_frame:000000000000FD8F                 db    4
.eh_frame:000000000000FD90                 db  41h ; A
.eh_frame:000000000000FD91                 db  0Eh
.eh_frame:000000000000FD92                 db  28h ; (
.eh_frame:000000000000FD93                 db  83h
.eh_frame:000000000000FD94                 db    5
.eh_frame:000000000000FD95                 db  47h ; G
.eh_frame:000000000000FD96                 db  0Eh
.eh_frame:000000000000FD97                 db  30h ; 0
.eh_frame:000000000000FD98                 db  75h ; u
.eh_frame:000000000000FD99                 db  0Ah
.eh_frame:000000000000FD9A                 db  0Eh
.eh_frame:000000000000FD9B                 db  28h ; (
.eh_frame:000000000000FD9C                 db  44h ; D
.eh_frame:000000000000FD9D                 db  0Eh
.eh_frame:000000000000FD9E                 db  20h
.eh_frame:000000000000FD9F                 db  41h ; A
.eh_frame:000000000000FDA0                 db  0Eh
.eh_frame:000000000000FDA1                 db  18h
.eh_frame:000000000000FDA2                 db  42h ; B
.eh_frame:000000000000FDA3                 db  0Eh
.eh_frame:000000000000FDA4                 db  10h
.eh_frame:000000000000FDA5                 db  42h ; B
.eh_frame:000000000000FDA6                 db  0Eh
.eh_frame:000000000000FDA7                 db    8
.eh_frame:000000000000FDA8                 db  45h ; E
.eh_frame:000000000000FDA9                 db  0Bh
.eh_frame:000000000000FDAA                 db    0
.eh_frame:000000000000FDAB                 db    0
.eh_frame:000000000000FDAC                 db  34h ; 4
.eh_frame:000000000000FDAD                 db    0
.eh_frame:000000000000FDAE                 db    0
.eh_frame:000000000000FDAF                 db    0
.eh_frame:000000000000FDB0                 db  30h ; 0
.eh_frame:000000000000FDB1                 db  13h
.eh_frame:000000000000FDB2                 db    0
.eh_frame:000000000000FDB3                 db    0
.eh_frame:000000000000FDB4                 db  7Ch ; |
.eh_frame:000000000000FDB5                 db 0BAh
.eh_frame:000000000000FDB6                 db 0FFh
.eh_frame:000000000000FDB7                 db 0FFh
.eh_frame:000000000000FDB8                 db  8Fh
.eh_frame:000000000000FDB9                 db    0
.eh_frame:000000000000FDBA                 db    0
.eh_frame:000000000000FDBB                 db    0
.eh_frame:000000000000FDBC                 db    0
.eh_frame:000000000000FDBD                 db  45h ; E
.eh_frame:000000000000FDBE                 db  0Eh
.eh_frame:000000000000FDBF                 db  10h
.eh_frame:000000000000FDC0                 db  8Ch
.eh_frame:000000000000FDC1                 db    2
.eh_frame:000000000000FDC2                 db  41h ; A
.eh_frame:000000000000FDC3                 db  0Eh
.eh_frame:000000000000FDC4                 db  18h
.eh_frame:000000000000FDC5                 db  86h
.eh_frame:000000000000FDC6                 db    3
.eh_frame:000000000000FDC7                 db  41h ; A
.eh_frame:000000000000FDC8                 db  0Eh
.eh_frame:000000000000FDC9                 db  20h
.eh_frame:000000000000FDCA                 db  83h
.eh_frame:000000000000FDCB                 db    4
.eh_frame:000000000000FDCC                 db    2
.eh_frame:000000000000FDCD                 db  58h ; X
.eh_frame:000000000000FDCE                 db  0Ah
.eh_frame:000000000000FDCF                 db  0Eh
.eh_frame:000000000000FDD0                 db  18h
.eh_frame:000000000000FDD1                 db  41h ; A
.eh_frame:000000000000FDD2                 db  0Eh
.eh_frame:000000000000FDD3                 db  10h
.eh_frame:000000000000FDD4                 db  42h ; B
.eh_frame:000000000000FDD5                 db  0Eh
.eh_frame:000000000000FDD6                 db    8
.eh_frame:000000000000FDD7                 db  46h ; F
.eh_frame:000000000000FDD8                 db  0Bh
.eh_frame:000000000000FDD9                 db  63h ; c
.eh_frame:000000000000FDDA                 db  0Eh
.eh_frame:000000000000FDDB                 db  18h
.eh_frame:000000000000FDDC                 db  41h ; A
.eh_frame:000000000000FDDD                 db  0Eh
.eh_frame:000000000000FDDE                 db  10h
.eh_frame:000000000000FDDF                 db  42h ; B
.eh_frame:000000000000FDE0                 db  0Eh
.eh_frame:000000000000FDE1                 db    8
.eh_frame:000000000000FDE2                 db    0
.eh_frame:000000000000FDE3                 db    0
.eh_frame:000000000000FDE4                 db  48h ; H
.eh_frame:000000000000FDE5                 db    0
.eh_frame:000000000000FDE6                 db    0
.eh_frame:000000000000FDE7                 db    0
.eh_frame:000000000000FDE8                 db  68h ; h
.eh_frame:000000000000FDE9                 db  13h
.eh_frame:000000000000FDEA                 db    0
.eh_frame:000000000000FDEB                 db    0
.eh_frame:000000000000FDEC                 db 0D4h
.eh_frame:000000000000FDED                 db 0BAh
.eh_frame:000000000000FDEE                 db 0FFh
.eh_frame:000000000000FDEF                 db 0FFh
.eh_frame:000000000000FDF0                 db  36h ; 6
.eh_frame:000000000000FDF1                 db    1
.eh_frame:000000000000FDF2                 db    0
.eh_frame:000000000000FDF3                 db    0
.eh_frame:000000000000FDF4                 db    0
.eh_frame:000000000000FDF5                 db  42h ; B
.eh_frame:000000000000FDF6                 db  0Eh
.eh_frame:000000000000FDF7                 db  10h
.eh_frame:000000000000FDF8                 db  8Fh
.eh_frame:000000000000FDF9                 db    2
.eh_frame:000000000000FDFA                 db  42h ; B
.eh_frame:000000000000FDFB                 db  0Eh
.eh_frame:000000000000FDFC                 db  18h
.eh_frame:000000000000FDFD                 db  8Eh
.eh_frame:000000000000FDFE                 db    3
.eh_frame:000000000000FDFF                 db  47h ; G
.eh_frame:000000000000FE00                 db  0Eh
.eh_frame:000000000000FE01                 db  20h
.eh_frame:000000000000FE02                 db  8Dh
.eh_frame:000000000000FE03                 db    4
.eh_frame:000000000000FE04                 db  42h ; B
.eh_frame:000000000000FE05                 db  0Eh
.eh_frame:000000000000FE06                 db  28h ; (
.eh_frame:000000000000FE07                 db  8Ch
.eh_frame:000000000000FE08                 db    5
.eh_frame:000000000000FE09                 db  41h ; A
.eh_frame:000000000000FE0A                 db  0Eh
.eh_frame:000000000000FE0B                 db  30h ; 0
.eh_frame:000000000000FE0C                 db  86h
.eh_frame:000000000000FE0D                 db    6
.eh_frame:000000000000FE0E                 db  41h ; A
.eh_frame:000000000000FE0F                 db  0Eh
.eh_frame:000000000000FE10                 db  38h ; 8
.eh_frame:000000000000FE11                 db  83h
.eh_frame:000000000000FE12                 db    7
.eh_frame:000000000000FE13                 db  44h ; D
.eh_frame:000000000000FE14                 db  0Eh
.eh_frame:000000000000FE15                 db  40h ; @
.eh_frame:000000000000FE16                 db    2
.eh_frame:000000000000FE17                 db 0A1h
.eh_frame:000000000000FE18                 db  0Ah
.eh_frame:000000000000FE19                 db  0Eh
.eh_frame:000000000000FE1A                 db  38h ; 8
.eh_frame:000000000000FE1B                 db  41h ; A
.eh_frame:000000000000FE1C                 db  0Eh
.eh_frame:000000000000FE1D                 db  30h ; 0
.eh_frame:000000000000FE1E                 db  41h ; A
.eh_frame:000000000000FE1F                 db  0Eh
.eh_frame:000000000000FE20                 db  28h ; (
.eh_frame:000000000000FE21                 db  42h ; B
.eh_frame:000000000000FE22                 db  0Eh
.eh_frame:000000000000FE23                 db  20h
.eh_frame:000000000000FE24                 db  42h ; B
.eh_frame:000000000000FE25                 db  0Eh
.eh_frame:000000000000FE26                 db  18h
.eh_frame:000000000000FE27                 db  42h ; B
.eh_frame:000000000000FE28                 db  0Eh
.eh_frame:000000000000FE29                 db  10h
.eh_frame:000000000000FE2A                 db  42h ; B
.eh_frame:000000000000FE2B                 db  0Eh
.eh_frame:000000000000FE2C                 db    8
.eh_frame:000000000000FE2D                 db  42h ; B
.eh_frame:000000000000FE2E                 db  0Bh
.eh_frame:000000000000FE2F                 db    0
.eh_frame:000000000000FE30                 db  50h ; P
.eh_frame:000000000000FE31                 db    0
.eh_frame:000000000000FE32                 db    0
.eh_frame:000000000000FE33                 db    0
.eh_frame:000000000000FE34                 db 0B4h
.eh_frame:000000000000FE35                 db  13h
.eh_frame:000000000000FE36                 db    0
.eh_frame:000000000000FE37                 db    0
.eh_frame:000000000000FE38                 db 0C8h
.eh_frame:000000000000FE39                 db 0BBh
.eh_frame:000000000000FE3A                 db 0FFh
.eh_frame:000000000000FE3B                 db 0FFh
.eh_frame:000000000000FE3C                 db 0DFh
.eh_frame:000000000000FE3D                 db    0
.eh_frame:000000000000FE3E                 db    0
.eh_frame:000000000000FE3F                 db    0
.eh_frame:000000000000FE40                 db    0
.eh_frame:000000000000FE41                 db  42h ; B
.eh_frame:000000000000FE42                 db  0Eh
.eh_frame:000000000000FE43                 db  10h
.eh_frame:000000000000FE44                 db  8Ch
.eh_frame:000000000000FE45                 db    2
.eh_frame:000000000000FE46                 db  41h ; A
.eh_frame:000000000000FE47                 db  0Eh
.eh_frame:000000000000FE48                 db  18h
.eh_frame:000000000000FE49                 db  86h
.eh_frame:000000000000FE4A                 db    3
.eh_frame:000000000000FE4B                 db  44h ; D
.eh_frame:000000000000FE4C                 db  0Eh
.eh_frame:000000000000FE4D                 db  20h
.eh_frame:000000000000FE4E                 db  83h
.eh_frame:000000000000FE4F                 db    4
.eh_frame:000000000000FE50                 db  4Bh ; K
.eh_frame:000000000000FE51                 db  0Eh
.eh_frame:000000000000FE52                 db  30h ; 0
.eh_frame:000000000000FE53                 db    2
.eh_frame:000000000000FE54                 db  6Fh ; o
.eh_frame:000000000000FE55                 db  0Ah
.eh_frame:000000000000FE56                 db  0Eh
.eh_frame:000000000000FE57                 db  20h
.eh_frame:000000000000FE58                 db  44h ; D
.eh_frame:000000000000FE59                 db  0Eh
.eh_frame:000000000000FE5A                 db  18h
.eh_frame:000000000000FE5B                 db  41h ; A
.eh_frame:000000000000FE5C                 db  0Eh
.eh_frame:000000000000FE5D                 db  10h
.eh_frame:000000000000FE5E                 db  42h ; B
.eh_frame:000000000000FE5F                 db  0Eh
.eh_frame:000000000000FE60                 db    8
.eh_frame:000000000000FE61                 db  48h ; H
.eh_frame:000000000000FE62                 db  0Bh
.eh_frame:000000000000FE63                 db  5Ah ; Z
.eh_frame:000000000000FE64                 db  0Ah
.eh_frame:000000000000FE65                 db  0Eh
.eh_frame:000000000000FE66                 db  20h
.eh_frame:000000000000FE67                 db  44h ; D
.eh_frame:000000000000FE68                 db  0Eh
.eh_frame:000000000000FE69                 db  18h
.eh_frame:000000000000FE6A                 db  41h ; A
.eh_frame:000000000000FE6B                 db  0Eh
.eh_frame:000000000000FE6C                 db  10h
.eh_frame:000000000000FE6D                 db  42h ; B
.eh_frame:000000000000FE6E                 db  0Eh
.eh_frame:000000000000FE6F                 db    8
.eh_frame:000000000000FE70                 db  47h ; G
.eh_frame:000000000000FE71                 db  0Bh
.eh_frame:000000000000FE72                 db  54h ; T
.eh_frame:000000000000FE73                 db  0Ah
.eh_frame:000000000000FE74                 db  0Eh
.eh_frame:000000000000FE75                 db  20h
.eh_frame:000000000000FE76                 db  44h ; D
.eh_frame:000000000000FE77                 db  0Eh
.eh_frame:000000000000FE78                 db  18h
.eh_frame:000000000000FE79                 db  41h ; A
.eh_frame:000000000000FE7A                 db  0Eh
.eh_frame:000000000000FE7B                 db  10h
.eh_frame:000000000000FE7C                 db  42h ; B
.eh_frame:000000000000FE7D                 db  0Eh
.eh_frame:000000000000FE7E                 db    8
.eh_frame:000000000000FE7F                 db  45h ; E
.eh_frame:000000000000FE80                 db  0Bh
.eh_frame:000000000000FE81                 db    0
.eh_frame:000000000000FE82                 db    0
.eh_frame:000000000000FE83                 db    0
.eh_frame:000000000000FE84                 db  10h
.eh_frame:000000000000FE85                 db    0
.eh_frame:000000000000FE86                 db    0
.eh_frame:000000000000FE87                 db    0
.eh_frame:000000000000FE88                 db    8
.eh_frame:000000000000FE89                 db  14h
.eh_frame:000000000000FE8A                 db    0
.eh_frame:000000000000FE8B                 db    0
.eh_frame:000000000000FE8C                 db  54h ; T
.eh_frame:000000000000FE8D                 db 0BCh
.eh_frame:000000000000FE8E                 db 0FFh
.eh_frame:000000000000FE8F                 db 0FFh
.eh_frame:000000000000FE90                 db  0Ch
.eh_frame:000000000000FE91                 db    0
.eh_frame:000000000000FE92                 db    0
.eh_frame:000000000000FE93                 db    0
.eh_frame:000000000000FE94                 db    0
.eh_frame:000000000000FE95                 db    0
.eh_frame:000000000000FE96                 db    0
.eh_frame:000000000000FE97                 db    0
.eh_frame:000000000000FE98                 db  5Ch ; \
.eh_frame:000000000000FE99                 db    0
.eh_frame:000000000000FE9A                 db    0
.eh_frame:000000000000FE9B                 db    0
.eh_frame:000000000000FE9C                 db  1Ch
.eh_frame:000000000000FE9D                 db  14h
.eh_frame:000000000000FE9E                 db    0
.eh_frame:000000000000FE9F                 db    0
.eh_frame:000000000000FEA0                 db  50h ; P
.eh_frame:000000000000FEA1                 db 0BCh
.eh_frame:000000000000FEA2                 db 0FFh
.eh_frame:000000000000FEA3                 db 0FFh
.eh_frame:000000000000FEA4                 db 0A3h
.eh_frame:000000000000FEA5                 db    0
.eh_frame:000000000000FEA6                 db    0
.eh_frame:000000000000FEA7                 db    0
.eh_frame:000000000000FEA8                 db    0
.eh_frame:000000000000FEA9                 db  42h ; B
.eh_frame:000000000000FEAA                 db  0Eh
.eh_frame:000000000000FEAB                 db  10h
.eh_frame:000000000000FEAC                 db  8Dh
.eh_frame:000000000000FEAD                 db    2
.eh_frame:000000000000FEAE                 db  42h ; B
.eh_frame:000000000000FEAF                 db  0Eh
.eh_frame:000000000000FEB0                 db  18h
.eh_frame:000000000000FEB1                 db  8Ch
.eh_frame:000000000000FEB2                 db    3
.eh_frame:000000000000FEB3                 db  41h ; A
.eh_frame:000000000000FEB4                 db  0Eh
.eh_frame:000000000000FEB5                 db  20h
.eh_frame:000000000000FEB6                 db  86h
.eh_frame:000000000000FEB7                 db    4
.eh_frame:000000000000FEB8                 db  41h ; A
.eh_frame:000000000000FEB9                 db  0Eh
.eh_frame:000000000000FEBA                 db  28h ; (
.eh_frame:000000000000FEBB                 db  83h
.eh_frame:000000000000FEBC                 db    5
.eh_frame:000000000000FEBD                 db  47h ; G
.eh_frame:000000000000FEBE                 db  0Eh
.eh_frame:000000000000FEBF                 db  30h ; 0
.eh_frame:000000000000FEC0                 db    2
.eh_frame:000000000000FEC1                 db  41h ; A
.eh_frame:000000000000FEC2                 db  0Ah
.eh_frame:000000000000FEC3                 db  0Eh
.eh_frame:000000000000FEC4                 db  28h ; (
.eh_frame:000000000000FEC5                 db  44h ; D
.eh_frame:000000000000FEC6                 db  0Eh
.eh_frame:000000000000FEC7                 db  20h
.eh_frame:000000000000FEC8                 db  41h ; A
.eh_frame:000000000000FEC9                 db  0Eh
.eh_frame:000000000000FECA                 db  18h
.eh_frame:000000000000FECB                 db  42h ; B
.eh_frame:000000000000FECC                 db  0Eh
.eh_frame:000000000000FECD                 db  10h
.eh_frame:000000000000FECE                 db  42h ; B
.eh_frame:000000000000FECF                 db  0Eh
.eh_frame:000000000000FED0                 db    8
.eh_frame:000000000000FED1                 db  49h ; I
.eh_frame:000000000000FED2                 db  0Bh
.eh_frame:000000000000FED3                 db  52h ; R
.eh_frame:000000000000FED4                 db  0Ah
.eh_frame:000000000000FED5                 db  0Eh
.eh_frame:000000000000FED6                 db  28h ; (
.eh_frame:000000000000FED7                 db  43h ; C
.eh_frame:000000000000FED8                 db  0Eh
.eh_frame:000000000000FED9                 db  20h
.eh_frame:000000000000FEDA                 db  41h ; A
.eh_frame:000000000000FEDB                 db  0Eh
.eh_frame:000000000000FEDC                 db  18h
.eh_frame:000000000000FEDD                 db  42h ; B
.eh_frame:000000000000FEDE                 db  0Eh
.eh_frame:000000000000FEDF                 db  10h
.eh_frame:000000000000FEE0                 db  42h ; B
.eh_frame:000000000000FEE1                 db  0Eh
.eh_frame:000000000000FEE2                 db    8
.eh_frame:000000000000FEE3                 db  46h ; F
.eh_frame:000000000000FEE4                 db  0Bh
.eh_frame:000000000000FEE5                 db  44h ; D
.eh_frame:000000000000FEE6                 db  0Ah
.eh_frame:000000000000FEE7                 db  0Eh
.eh_frame:000000000000FEE8                 db  28h ; (
.eh_frame:000000000000FEE9                 db  47h ; G
.eh_frame:000000000000FEEA                 db  0Eh
.eh_frame:000000000000FEEB                 db  20h
.eh_frame:000000000000FEEC                 db  41h ; A
.eh_frame:000000000000FEED                 db  0Eh
.eh_frame:000000000000FEEE                 db  18h
.eh_frame:000000000000FEEF                 db  42h ; B
.eh_frame:000000000000FEF0                 db  0Eh
.eh_frame:000000000000FEF1                 db  10h
.eh_frame:000000000000FEF2                 db  42h ; B
.eh_frame:000000000000FEF3                 db  0Eh
.eh_frame:000000000000FEF4                 db    8
.eh_frame:000000000000FEF5                 db  45h ; E
.eh_frame:000000000000FEF6                 db  0Bh
.eh_frame:000000000000FEF7                 db    0
.eh_frame:000000000000FEF8                 db  34h ; 4
.eh_frame:000000000000FEF9                 db    0
.eh_frame:000000000000FEFA                 db    0
.eh_frame:000000000000FEFB                 db    0
.eh_frame:000000000000FEFC                 db  7Ch ; |
.eh_frame:000000000000FEFD                 db  14h
.eh_frame:000000000000FEFE                 db    0
.eh_frame:000000000000FEFF                 db    0
.eh_frame:000000000000FF00                 db 0A0h
.eh_frame:000000000000FF01                 db 0BCh
.eh_frame:000000000000FF02                 db 0FFh
.eh_frame:000000000000FF03                 db 0FFh
.eh_frame:000000000000FF04                 db  41h ; A
.eh_frame:000000000000FF05                 db    1
.eh_frame:000000000000FF06                 db    0
.eh_frame:000000000000FF07                 db    0
.eh_frame:000000000000FF08                 db    0
.eh_frame:000000000000FF09                 db  42h ; B
.eh_frame:000000000000FF0A                 db  0Eh
.eh_frame:000000000000FF0B                 db  10h
.eh_frame:000000000000FF0C                 db  8Ch
.eh_frame:000000000000FF0D                 db    2
.eh_frame:000000000000FF0E                 db  41h ; A
.eh_frame:000000000000FF0F                 db  0Eh
.eh_frame:000000000000FF10                 db  18h
.eh_frame:000000000000FF11                 db  86h
.eh_frame:000000000000FF12                 db    3
.eh_frame:000000000000FF13                 db  41h ; A
.eh_frame:000000000000FF14                 db  0Eh
.eh_frame:000000000000FF15                 db  20h
.eh_frame:000000000000FF16                 db  83h
.eh_frame:000000000000FF17                 db    4
.eh_frame:000000000000FF18                 db  47h ; G
.eh_frame:000000000000FF19                 db  0Eh
.eh_frame:000000000000FF1A                 db  70h ; p
.eh_frame:000000000000FF1B                 db    2
.eh_frame:000000000000FF1C                 db  8Bh
.eh_frame:000000000000FF1D                 db  0Ah
.eh_frame:000000000000FF1E                 db  0Eh
.eh_frame:000000000000FF1F                 db  20h
.eh_frame:000000000000FF20                 db  41h ; A
.eh_frame:000000000000FF21                 db  0Eh
.eh_frame:000000000000FF22                 db  18h
.eh_frame:000000000000FF23                 db  41h ; A
.eh_frame:000000000000FF24                 db  0Eh
.eh_frame:000000000000FF25                 db  10h
.eh_frame:000000000000FF26                 db  42h ; B
.eh_frame:000000000000FF27                 db  0Eh
.eh_frame:000000000000FF28                 db    8
.eh_frame:000000000000FF29                 db  46h ; F
.eh_frame:000000000000FF2A                 db  0Bh
.eh_frame:000000000000FF2B                 db    0
.eh_frame:000000000000FF2C                 db    0
.eh_frame:000000000000FF2D                 db    0
.eh_frame:000000000000FF2E                 db    0
.eh_frame:000000000000FF2F                 db    0
.eh_frame:000000000000FF30                 db  4Ch ; L
.eh_frame:000000000000FF31                 db    0
.eh_frame:000000000000FF32                 db    0
.eh_frame:000000000000FF33                 db    0
.eh_frame:000000000000FF34                 db 0B4h
.eh_frame:000000000000FF35                 db  14h
.eh_frame:000000000000FF36                 db    0
.eh_frame:000000000000FF37                 db    0
.eh_frame:000000000000FF38                 db 0B8h
.eh_frame:000000000000FF39                 db 0BDh
.eh_frame:000000000000FF3A                 db 0FFh
.eh_frame:000000000000FF3B                 db 0FFh
.eh_frame:000000000000FF3C                 db  7Dh ; }
.eh_frame:000000000000FF3D                 db    0
.eh_frame:000000000000FF3E                 db    0
.eh_frame:000000000000FF3F                 db    0
.eh_frame:000000000000FF40                 db    0
.eh_frame:000000000000FF41                 db  42h ; B
.eh_frame:000000000000FF42                 db  0Eh
.eh_frame:000000000000FF43                 db  10h
.eh_frame:000000000000FF44                 db  8Ch
.eh_frame:000000000000FF45                 db    2
.eh_frame:000000000000FF46                 db  41h ; A
.eh_frame:000000000000FF47                 db  0Eh
.eh_frame:000000000000FF48                 db  18h
.eh_frame:000000000000FF49                 db  86h
.eh_frame:000000000000FF4A                 db    3
.eh_frame:000000000000FF4B                 db  44h ; D
.eh_frame:000000000000FF4C                 db  0Eh
.eh_frame:000000000000FF4D                 db  20h
.eh_frame:000000000000FF4E                 db  83h
.eh_frame:000000000000FF4F                 db    4
.eh_frame:000000000000FF50                 db  69h ; i
.eh_frame:000000000000FF51                 db  0Ah
.eh_frame:000000000000FF52                 db  0Eh
.eh_frame:000000000000FF53                 db  18h
.eh_frame:000000000000FF54                 db  41h ; A
.eh_frame:000000000000FF55                 db  0Eh
.eh_frame:000000000000FF56                 db  10h
.eh_frame:000000000000FF57                 db  42h ; B
.eh_frame:000000000000FF58                 db  0Eh
.eh_frame:000000000000FF59                 db    8
.eh_frame:000000000000FF5A                 db  45h ; E
.eh_frame:000000000000FF5B                 db  0Bh
.eh_frame:000000000000FF5C                 db  55h ; U
.eh_frame:000000000000FF5D                 db  0Ah
.eh_frame:000000000000FF5E                 db  0Eh
.eh_frame:000000000000FF5F                 db  18h
.eh_frame:000000000000FF60                 db  41h ; A
.eh_frame:000000000000FF61                 db  0Eh
.eh_frame:000000000000FF62                 db  10h
.eh_frame:000000000000FF63                 db  42h ; B
.eh_frame:000000000000FF64                 db  0Eh
.eh_frame:000000000000FF65                 db    8
.eh_frame:000000000000FF66                 db  48h ; H
.eh_frame:000000000000FF67                 db  0Bh
.eh_frame:000000000000FF68                 db  41h ; A
.eh_frame:000000000000FF69                 db  0Ah
.eh_frame:000000000000FF6A                 db  0Eh
.eh_frame:000000000000FF6B                 db  18h
.eh_frame:000000000000FF6C                 db  46h ; F
.eh_frame:000000000000FF6D                 db  0Eh
.eh_frame:000000000000FF6E                 db  10h
.eh_frame:000000000000FF6F                 db  42h ; B
.eh_frame:000000000000FF70                 db  0Eh
.eh_frame:000000000000FF71                 db    8
.eh_frame:000000000000FF72                 db  47h ; G
.eh_frame:000000000000FF73                 db  0Bh
.eh_frame:000000000000FF74                 db  49h ; I
.eh_frame:000000000000FF75                 db  0Eh
.eh_frame:000000000000FF76                 db  18h
.eh_frame:000000000000FF77                 db  41h ; A
.eh_frame:000000000000FF78                 db  0Eh
.eh_frame:000000000000FF79                 db  10h
.eh_frame:000000000000FF7A                 db  42h ; B
.eh_frame:000000000000FF7B                 db  0Eh
.eh_frame:000000000000FF7C                 db    8
.eh_frame:000000000000FF7D                 db    0
.eh_frame:000000000000FF7E                 db    0
.eh_frame:000000000000FF7F                 db    0
.eh_frame:000000000000FF80                 db  1Ch
.eh_frame:000000000000FF81                 db    0
.eh_frame:000000000000FF82                 db    0
.eh_frame:000000000000FF83                 db    0
.eh_frame:000000000000FF84                 db    4
.eh_frame:000000000000FF85                 db  15h
.eh_frame:000000000000FF86                 db    0
.eh_frame:000000000000FF87                 db    0
.eh_frame:000000000000FF88                 db 0E8h
.eh_frame:000000000000FF89                 db 0BDh
.eh_frame:000000000000FF8A                 db 0FFh
.eh_frame:000000000000FF8B                 db 0FFh
.eh_frame:000000000000FF8C                 db  3Ch ; <
.eh_frame:000000000000FF8D                 db    0
.eh_frame:000000000000FF8E                 db    0
.eh_frame:000000000000FF8F                 db    0
.eh_frame:000000000000FF90                 db    0
.eh_frame:000000000000FF91                 db  44h ; D
.eh_frame:000000000000FF92                 db  0Eh
.eh_frame:000000000000FF93                 db  10h
.eh_frame:000000000000FF94                 db  61h ; a
.eh_frame:000000000000FF95                 db  0Ah
.eh_frame:000000000000FF96                 db  0Eh
.eh_frame:000000000000FF97                 db    8
.eh_frame:000000000000FF98                 db  4Bh ; K
.eh_frame:000000000000FF99                 db  0Bh
.eh_frame:000000000000FF9A                 db  4Bh ; K
.eh_frame:000000000000FF9B                 db  0Eh
.eh_frame:000000000000FF9C                 db    8
.eh_frame:000000000000FF9D                 db    0
.eh_frame:000000000000FF9E                 db    0
.eh_frame:000000000000FF9F                 db    0
.eh_frame:000000000000FFA0                 db  44h ; D
.eh_frame:000000000000FFA1                 db    0
.eh_frame:000000000000FFA2                 db    0
.eh_frame:000000000000FFA3                 db    0
.eh_frame:000000000000FFA4                 db  24h ; $
.eh_frame:000000000000FFA5                 db  15h
.eh_frame:000000000000FFA6                 db    0
.eh_frame:000000000000FFA7                 db    0
.eh_frame:000000000000FFA8                 db    8
.eh_frame:000000000000FFA9                 db 0BEh
.eh_frame:000000000000FFAA                 db 0FFh
.eh_frame:000000000000FFAB                 db 0FFh
.eh_frame:000000000000FFAC                 db  65h ; e
.eh_frame:000000000000FFAD                 db    0
.eh_frame:000000000000FFAE                 db    0
.eh_frame:000000000000FFAF                 db    0
.eh_frame:000000000000FFB0                 db    0
.eh_frame:000000000000FFB1                 db  42h ; B
.eh_frame:000000000000FFB2                 db  0Eh
.eh_frame:000000000000FFB3                 db  10h
.eh_frame:000000000000FFB4                 db  8Fh
.eh_frame:000000000000FFB5                 db    2
.eh_frame:000000000000FFB6                 db  42h ; B
.eh_frame:000000000000FFB7                 db  0Eh
.eh_frame:000000000000FFB8                 db  18h
.eh_frame:000000000000FFB9                 db  8Eh
.eh_frame:000000000000FFBA                 db    3
.eh_frame:000000000000FFBB                 db  45h ; E
.eh_frame:000000000000FFBC                 db  0Eh
.eh_frame:000000000000FFBD                 db  20h
.eh_frame:000000000000FFBE                 db  8Dh
.eh_frame:000000000000FFBF                 db    4
.eh_frame:000000000000FFC0                 db  42h ; B
.eh_frame:000000000000FFC1                 db  0Eh
.eh_frame:000000000000FFC2                 db  28h ; (
.eh_frame:000000000000FFC3                 db  8Ch
.eh_frame:000000000000FFC4                 db    5
.eh_frame:000000000000FFC5                 db  48h ; H
.eh_frame:000000000000FFC6                 db  0Eh
.eh_frame:000000000000FFC7                 db  30h ; 0
.eh_frame:000000000000FFC8                 db  86h
.eh_frame:000000000000FFC9                 db    6
.eh_frame:000000000000FFCA                 db  48h ; H
.eh_frame:000000000000FFCB                 db  0Eh
.eh_frame:000000000000FFCC                 db  38h ; 8
.eh_frame:000000000000FFCD                 db  83h
.eh_frame:000000000000FFCE                 db    7
.eh_frame:000000000000FFCF                 db  4Dh ; M
.eh_frame:000000000000FFD0                 db  0Eh
.eh_frame:000000000000FFD1                 db  40h ; @
.eh_frame:000000000000FFD2                 db  72h ; r
.eh_frame:000000000000FFD3                 db  0Eh
.eh_frame:000000000000FFD4                 db  38h ; 8
.eh_frame:000000000000FFD5                 db  41h ; A
.eh_frame:000000000000FFD6                 db  0Eh
.eh_frame:000000000000FFD7                 db  30h ; 0
.eh_frame:000000000000FFD8                 db  41h ; A
.eh_frame:000000000000FFD9                 db  0Eh
.eh_frame:000000000000FFDA                 db  28h ; (
.eh_frame:000000000000FFDB                 db  42h ; B
.eh_frame:000000000000FFDC                 db  0Eh
.eh_frame:000000000000FFDD                 db  20h
.eh_frame:000000000000FFDE                 db  42h ; B
.eh_frame:000000000000FFDF                 db  0Eh
.eh_frame:000000000000FFE0                 db  18h
.eh_frame:000000000000FFE1                 db  42h ; B
.eh_frame:000000000000FFE2                 db  0Eh
.eh_frame:000000000000FFE3                 db  10h
.eh_frame:000000000000FFE4                 db  42h ; B
.eh_frame:000000000000FFE5                 db  0Eh
.eh_frame:000000000000FFE6                 db    8
.eh_frame:000000000000FFE7                 db    0
.eh_frame:000000000000FFE8                 db  14h
.eh_frame:000000000000FFE9                 db    0
.eh_frame:000000000000FFEA                 db    0
.eh_frame:000000000000FFEB                 db    0
.eh_frame:000000000000FFEC                 db  6Ch ; l
.eh_frame:000000000000FFED                 db  15h
.eh_frame:000000000000FFEE                 db    0
.eh_frame:000000000000FFEF                 db    0
.eh_frame:000000000000FFF0                 db  30h ; 0
.eh_frame:000000000000FFF1                 db 0BEh
.eh_frame:000000000000FFF2                 db 0FFh
.eh_frame:000000000000FFF3                 db 0FFh
.eh_frame:000000000000FFF4                 db    2
.eh_frame:000000000000FFF5                 db    0
.eh_frame:000000000000FFF6                 db    0
.eh_frame:000000000000FFF7                 db    0
.eh_frame:000000000000FFF8                 db    0
.eh_frame:000000000000FFF9                 db    0
.eh_frame:000000000000FFFA                 db    0
.eh_frame:000000000000FFFB                 db    0
.eh_frame:000000000000FFFC                 db    0
.eh_frame:000000000000FFFD                 db    0
.eh_frame:000000000000FFFE                 db    0
.eh_frame:000000000000FFFF                 db    0
.eh_frame:0000000000010000                 db  10h
.eh_frame:0000000000010001                 db    0
.eh_frame:0000000000010002                 db    0
.eh_frame:0000000000010003                 db    0
.eh_frame:0000000000010004                 db  84h
.eh_frame:0000000000010005                 db  15h
.eh_frame:0000000000010006                 db    0
.eh_frame:0000000000010007                 db    0
.eh_frame:0000000000010008                 db  28h ; (
.eh_frame:0000000000010009                 db 0BEh
.eh_frame:000000000001000A                 db 0FFh
.eh_frame:000000000001000B                 db 0FFh
.eh_frame:000000000001000C                 db  0Eh
.eh_frame:000000000001000D                 db    0
.eh_frame:000000000001000E                 db    0
.eh_frame:000000000001000F                 db    0
.eh_frame:0000000000010010                 db    0
.eh_frame:0000000000010011                 db    0
.eh_frame:0000000000010012                 db    0
.eh_frame:0000000000010013                 db    0
.eh_frame:0000000000010014 __FRAME_END__   db    0
.eh_frame:0000000000010015                 db    0
.eh_frame:0000000000010016                 db    0
.eh_frame:0000000000010017                 db    0
.eh_frame:0000000000010017 _eh_frame       ends
.eh_frame:0000000000010017
.init_array:00000000002107D0 ; ELF Initialization Function Table
.init_array:00000000002107D0 ; ===========================================================================
.init_array:00000000002107D0
.init_array:00000000002107D0 ; Segment type: Pure data
.init_array:00000000002107D0 ; Segment permissions: Read/Write
.init_array:00000000002107D0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002107D0                 assume cs:_init_array
.init_array:00000000002107D0                 ;org 2107D0h
.init_array:00000000002107D0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002107D0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002107D0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002107D0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002107D0
.fini_array:00000000002107D8 ; ELF Termination Function Table
.fini_array:00000000002107D8 ; ===========================================================================
.fini_array:00000000002107D8
.fini_array:00000000002107D8 ; Segment type: Pure data
.fini_array:00000000002107D8 ; Segment permissions: Read/Write
.fini_array:00000000002107D8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002107D8                 assume cs:_fini_array
.fini_array:00000000002107D8                 ;org 2107D8h
.fini_array:00000000002107D8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002107D8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002107D8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002107D8
.data.rel.ro:00000000002107E0 ; ===========================================================================
.data.rel.ro:00000000002107E0
.data.rel.ro:00000000002107E0 ; Segment type: Pure data
.data.rel.ro:00000000002107E0 ; Segment permissions: Read/Write
.data.rel.ro:00000000002107E0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:00000000002107E0                 assume cs:_data_rel_ro
.data.rel.ro:00000000002107E0                 ;org 2107E0h
.data.rel.ro:00000000002107E0 ; struct option long_options
.data.rel.ro:00000000002107E0 long_options    dq offset aPages        ; name
.data.rel.ro:00000000002107E0                                         ; DATA XREF: main+D7↑o
.data.rel.ro:00000000002107E0                                         ; first_last_page:loc_2C88↑o
.data.rel.ro:00000000002107E0                 dd 1                    ; has_arg ; "pages"
.data.rel.ro:00000000002107E0                 db 4 dup(0)
.data.rel.ro:00000000002107E0                 dq 0                    ; flag
.data.rel.ro:00000000002107E0                 dd 81h                  ; val
.data.rel.ro:00000000002107E0                 db 4 dup(0)
.data.rel.ro:0000000000210800                 dq offset aInvalidNumberO+12h ; "columns"
.data.rel.ro:0000000000210808                 db    1
.data.rel.ro:0000000000210809                 db    0
.data.rel.ro:000000000021080A                 db    0
.data.rel.ro:000000000021080B                 db    0
.data.rel.ro:000000000021080C                 db    0
.data.rel.ro:000000000021080D                 db    0
.data.rel.ro:000000000021080E                 db    0
.data.rel.ro:000000000021080F                 db    0
.data.rel.ro:0000000000210810                 db    0
.data.rel.ro:0000000000210811                 db    0
.data.rel.ro:0000000000210812                 db    0
.data.rel.ro:0000000000210813                 db    0
.data.rel.ro:0000000000210814                 db    0
.data.rel.ro:0000000000210815                 db    0
.data.rel.ro:0000000000210816                 db    0
.data.rel.ro:0000000000210817                 db    0
.data.rel.ro:0000000000210818                 db  80h
.data.rel.ro:0000000000210819                 db    0
.data.rel.ro:000000000021081A                 db    0
.data.rel.ro:000000000021081B                 db    0
.data.rel.ro:000000000021081C                 db    0
.data.rel.ro:000000000021081D                 db    0
.data.rel.ro:000000000021081E                 db    0
.data.rel.ro:000000000021081F                 db    0
.data.rel.ro:0000000000210820                 dq offset aAcross       ; "across"
.data.rel.ro:0000000000210828                 db    0
.data.rel.ro:0000000000210829                 db    0
.data.rel.ro:000000000021082A                 db    0
.data.rel.ro:000000000021082B                 db    0
.data.rel.ro:000000000021082C                 db    0
.data.rel.ro:000000000021082D                 db    0
.data.rel.ro:000000000021082E                 db    0
.data.rel.ro:000000000021082F                 db    0
.data.rel.ro:0000000000210830                 db    0
.data.rel.ro:0000000000210831                 db    0
.data.rel.ro:0000000000210832                 db    0
.data.rel.ro:0000000000210833                 db    0
.data.rel.ro:0000000000210834                 db    0
.data.rel.ro:0000000000210835                 db    0
.data.rel.ro:0000000000210836                 db    0
.data.rel.ro:0000000000210837                 db    0
.data.rel.ro:0000000000210838                 db  61h ; a
.data.rel.ro:0000000000210839                 db    0
.data.rel.ro:000000000021083A                 db    0
.data.rel.ro:000000000021083B                 db    0
.data.rel.ro:000000000021083C                 db    0
.data.rel.ro:000000000021083D                 db    0
.data.rel.ro:000000000021083E                 db    0
.data.rel.ro:000000000021083F                 db    0
.data.rel.ro:0000000000210840                 dq offset aShowControlCha ; "show-control-chars"
.data.rel.ro:0000000000210848                 db    0
.data.rel.ro:0000000000210849                 db    0
.data.rel.ro:000000000021084A                 db    0
.data.rel.ro:000000000021084B                 db    0
.data.rel.ro:000000000021084C                 db    0
.data.rel.ro:000000000021084D                 db    0
.data.rel.ro:000000000021084E                 db    0
.data.rel.ro:000000000021084F                 db    0
.data.rel.ro:0000000000210850                 db    0
.data.rel.ro:0000000000210851                 db    0
.data.rel.ro:0000000000210852                 db    0
.data.rel.ro:0000000000210853                 db    0
.data.rel.ro:0000000000210854                 db    0
.data.rel.ro:0000000000210855                 db    0
.data.rel.ro:0000000000210856                 db    0
.data.rel.ro:0000000000210857                 db    0
.data.rel.ro:0000000000210858                 db  63h ; c
.data.rel.ro:0000000000210859                 db    0
.data.rel.ro:000000000021085A                 db    0
.data.rel.ro:000000000021085B                 db    0
.data.rel.ro:000000000021085C                 db    0
.data.rel.ro:000000000021085D                 db    0
.data.rel.ro:000000000021085E                 db    0
.data.rel.ro:000000000021085F                 db    0
.data.rel.ro:0000000000210860                 dq offset aDoubleSpace  ; "double-space"
.data.rel.ro:0000000000210868                 db    0
.data.rel.ro:0000000000210869                 db    0
.data.rel.ro:000000000021086A                 db    0
.data.rel.ro:000000000021086B                 db    0
.data.rel.ro:000000000021086C                 db    0
.data.rel.ro:000000000021086D                 db    0
.data.rel.ro:000000000021086E                 db    0
.data.rel.ro:000000000021086F                 db    0
.data.rel.ro:0000000000210870                 db    0
.data.rel.ro:0000000000210871                 db    0
.data.rel.ro:0000000000210872                 db    0
.data.rel.ro:0000000000210873                 db    0
.data.rel.ro:0000000000210874                 db    0
.data.rel.ro:0000000000210875                 db    0
.data.rel.ro:0000000000210876                 db    0
.data.rel.ro:0000000000210877                 db    0
.data.rel.ro:0000000000210878                 db  64h ; d
.data.rel.ro:0000000000210879                 db    0
.data.rel.ro:000000000021087A                 db    0
.data.rel.ro:000000000021087B                 db    0
.data.rel.ro:000000000021087C                 db    0
.data.rel.ro:000000000021087D                 db    0
.data.rel.ro:000000000021087E                 db    0
.data.rel.ro:000000000021087F                 db    0
.data.rel.ro:0000000000210880                 dq offset aDateFormat   ; "date-format"
.data.rel.ro:0000000000210888                 db    1
.data.rel.ro:0000000000210889                 db    0
.data.rel.ro:000000000021088A                 db    0
.data.rel.ro:000000000021088B                 db    0
.data.rel.ro:000000000021088C                 db    0
.data.rel.ro:000000000021088D                 db    0
.data.rel.ro:000000000021088E                 db    0
.data.rel.ro:000000000021088F                 db    0
.data.rel.ro:0000000000210890                 db    0
.data.rel.ro:0000000000210891                 db    0
.data.rel.ro:0000000000210892                 db    0
.data.rel.ro:0000000000210893                 db    0
.data.rel.ro:0000000000210894                 db    0
.data.rel.ro:0000000000210895                 db    0
.data.rel.ro:0000000000210896                 db    0
.data.rel.ro:0000000000210897                 db    0
.data.rel.ro:0000000000210898                 db  44h ; D
.data.rel.ro:0000000000210899                 db    0
.data.rel.ro:000000000021089A                 db    0
.data.rel.ro:000000000021089B                 db    0
.data.rel.ro:000000000021089C                 db    0
.data.rel.ro:000000000021089D                 db    0
.data.rel.ro:000000000021089E                 db    0
.data.rel.ro:000000000021089F                 db    0
.data.rel.ro:00000000002108A0                 dq offset aExpandTabs   ; "expand-tabs"
.data.rel.ro:00000000002108A8                 db    2
.data.rel.ro:00000000002108A9                 db    0
.data.rel.ro:00000000002108AA                 db    0
.data.rel.ro:00000000002108AB                 db    0
.data.rel.ro:00000000002108AC                 db    0
.data.rel.ro:00000000002108AD                 db    0
.data.rel.ro:00000000002108AE                 db    0
.data.rel.ro:00000000002108AF                 db    0
.data.rel.ro:00000000002108B0                 db    0
.data.rel.ro:00000000002108B1                 db    0
.data.rel.ro:00000000002108B2                 db    0
.data.rel.ro:00000000002108B3                 db    0
.data.rel.ro:00000000002108B4                 db    0
.data.rel.ro:00000000002108B5                 db    0
.data.rel.ro:00000000002108B6                 db    0
.data.rel.ro:00000000002108B7                 db    0
.data.rel.ro:00000000002108B8                 db  65h ; e
.data.rel.ro:00000000002108B9                 db    0
.data.rel.ro:00000000002108BA                 db    0
.data.rel.ro:00000000002108BB                 db    0
.data.rel.ro:00000000002108BC                 db    0
.data.rel.ro:00000000002108BD                 db    0
.data.rel.ro:00000000002108BE                 db    0
.data.rel.ro:00000000002108BF                 db    0
.data.rel.ro:00000000002108C0                 dq offset aFormFeed     ; "form-feed"
.data.rel.ro:00000000002108C8                 db    0
.data.rel.ro:00000000002108C9                 db    0
.data.rel.ro:00000000002108CA                 db    0
.data.rel.ro:00000000002108CB                 db    0
.data.rel.ro:00000000002108CC                 db    0
.data.rel.ro:00000000002108CD                 db    0
.data.rel.ro:00000000002108CE                 db    0
.data.rel.ro:00000000002108CF                 db    0
.data.rel.ro:00000000002108D0                 db    0
.data.rel.ro:00000000002108D1                 db    0
.data.rel.ro:00000000002108D2                 db    0
.data.rel.ro:00000000002108D3                 db    0
.data.rel.ro:00000000002108D4                 db    0
.data.rel.ro:00000000002108D5                 db    0
.data.rel.ro:00000000002108D6                 db    0
.data.rel.ro:00000000002108D7                 db    0
.data.rel.ro:00000000002108D8                 db  66h ; f
.data.rel.ro:00000000002108D9                 db    0
.data.rel.ro:00000000002108DA                 db    0
.data.rel.ro:00000000002108DB                 db    0
.data.rel.ro:00000000002108DC                 db    0
.data.rel.ro:00000000002108DD                 db    0
.data.rel.ro:00000000002108DE                 db    0
.data.rel.ro:00000000002108DF                 db    0
.data.rel.ro:00000000002108E0                 dq offset aOmitHeader+5 ; "header"
.data.rel.ro:00000000002108E8                 db    1
.data.rel.ro:00000000002108E9                 db    0
.data.rel.ro:00000000002108EA                 db    0
.data.rel.ro:00000000002108EB                 db    0
.data.rel.ro:00000000002108EC                 db    0
.data.rel.ro:00000000002108ED                 db    0
.data.rel.ro:00000000002108EE                 db    0
.data.rel.ro:00000000002108EF                 db    0
.data.rel.ro:00000000002108F0                 db    0
.data.rel.ro:00000000002108F1                 db    0
.data.rel.ro:00000000002108F2                 db    0
.data.rel.ro:00000000002108F3                 db    0
.data.rel.ro:00000000002108F4                 db    0
.data.rel.ro:00000000002108F5                 db    0
.data.rel.ro:00000000002108F6                 db    0
.data.rel.ro:00000000002108F7                 db    0
.data.rel.ro:00000000002108F8                 db  68h ; h
.data.rel.ro:00000000002108F9                 db    0
.data.rel.ro:00000000002108FA                 db    0
.data.rel.ro:00000000002108FB                 db    0
.data.rel.ro:00000000002108FC                 db    0
.data.rel.ro:00000000002108FD                 db    0
.data.rel.ro:00000000002108FE                 db    0
.data.rel.ro:00000000002108FF                 db    0
.data.rel.ro:0000000000210900                 dq offset aOutputTabs   ; "output-tabs"
.data.rel.ro:0000000000210908                 db    2
.data.rel.ro:0000000000210909                 db    0
.data.rel.ro:000000000021090A                 db    0
.data.rel.ro:000000000021090B                 db    0
.data.rel.ro:000000000021090C                 db    0
.data.rel.ro:000000000021090D                 db    0
.data.rel.ro:000000000021090E                 db    0
.data.rel.ro:000000000021090F                 db    0
.data.rel.ro:0000000000210910                 db    0
.data.rel.ro:0000000000210911                 db    0
.data.rel.ro:0000000000210912                 db    0
.data.rel.ro:0000000000210913                 db    0
.data.rel.ro:0000000000210914                 db    0
.data.rel.ro:0000000000210915                 db    0
.data.rel.ro:0000000000210916                 db    0
.data.rel.ro:0000000000210917                 db    0
.data.rel.ro:0000000000210918                 db  69h ; i
.data.rel.ro:0000000000210919                 db    0
.data.rel.ro:000000000021091A                 db    0
.data.rel.ro:000000000021091B                 db    0
.data.rel.ro:000000000021091C                 db    0
.data.rel.ro:000000000021091D                 db    0
.data.rel.ro:000000000021091E                 db    0
.data.rel.ro:000000000021091F                 db    0
.data.rel.ro:0000000000210920                 dq offset aJoinLines    ; "join-lines"
.data.rel.ro:0000000000210928                 db    0
.data.rel.ro:0000000000210929                 db    0
.data.rel.ro:000000000021092A                 db    0
.data.rel.ro:000000000021092B                 db    0
.data.rel.ro:000000000021092C                 db    0
.data.rel.ro:000000000021092D                 db    0
.data.rel.ro:000000000021092E                 db    0
.data.rel.ro:000000000021092F                 db    0
.data.rel.ro:0000000000210930                 db    0
.data.rel.ro:0000000000210931                 db    0
.data.rel.ro:0000000000210932                 db    0
.data.rel.ro:0000000000210933                 db    0
.data.rel.ro:0000000000210934                 db    0
.data.rel.ro:0000000000210935                 db    0
.data.rel.ro:0000000000210936                 db    0
.data.rel.ro:0000000000210937                 db    0
.data.rel.ro:0000000000210938                 db  4Ah ; J
.data.rel.ro:0000000000210939                 db    0
.data.rel.ro:000000000021093A                 db    0
.data.rel.ro:000000000021093B                 db    0
.data.rel.ro:000000000021093C                 db    0
.data.rel.ro:000000000021093D                 db    0
.data.rel.ro:000000000021093E                 db    0
.data.rel.ro:000000000021093F                 db    0
.data.rel.ro:0000000000210940                 dq offset aLength       ; "length"
.data.rel.ro:0000000000210948                 db    1
.data.rel.ro:0000000000210949                 db    0
.data.rel.ro:000000000021094A                 db    0
.data.rel.ro:000000000021094B                 db    0
.data.rel.ro:000000000021094C                 db    0
.data.rel.ro:000000000021094D                 db    0
.data.rel.ro:000000000021094E                 db    0
.data.rel.ro:000000000021094F                 db    0
.data.rel.ro:0000000000210950                 db    0
.data.rel.ro:0000000000210951                 db    0
.data.rel.ro:0000000000210952                 db    0
.data.rel.ro:0000000000210953                 db    0
.data.rel.ro:0000000000210954                 db    0
.data.rel.ro:0000000000210955                 db    0
.data.rel.ro:0000000000210956                 db    0
.data.rel.ro:0000000000210957                 db    0
.data.rel.ro:0000000000210958                 db  6Ch ; l
.data.rel.ro:0000000000210959                 db    0
.data.rel.ro:000000000021095A                 db    0
.data.rel.ro:000000000021095B                 db    0
.data.rel.ro:000000000021095C                 db    0
.data.rel.ro:000000000021095D                 db    0
.data.rel.ro:000000000021095E                 db    0
.data.rel.ro:000000000021095F                 db    0
.data.rel.ro:0000000000210960                 dq offset aMerge        ; "merge"
.data.rel.ro:0000000000210968                 db    0
.data.rel.ro:0000000000210969                 db    0
.data.rel.ro:000000000021096A                 db    0
.data.rel.ro:000000000021096B                 db    0
.data.rel.ro:000000000021096C                 db    0
.data.rel.ro:000000000021096D                 db    0
.data.rel.ro:000000000021096E                 db    0
.data.rel.ro:000000000021096F                 db    0
.data.rel.ro:0000000000210970                 db    0
.data.rel.ro:0000000000210971                 db    0
.data.rel.ro:0000000000210972                 db    0
.data.rel.ro:0000000000210973                 db    0
.data.rel.ro:0000000000210974                 db    0
.data.rel.ro:0000000000210975                 db    0
.data.rel.ro:0000000000210976                 db    0
.data.rel.ro:0000000000210977                 db    0
.data.rel.ro:0000000000210978                 db  6Dh ; m
.data.rel.ro:0000000000210979                 db    0
.data.rel.ro:000000000021097A                 db    0
.data.rel.ro:000000000021097B                 db    0
.data.rel.ro:000000000021097C                 db    0
.data.rel.ro:000000000021097D                 db    0
.data.rel.ro:000000000021097E                 db    0
.data.rel.ro:000000000021097F                 db    0
.data.rel.ro:0000000000210980                 dq offset aNumberLines  ; "number-lines"
.data.rel.ro:0000000000210988                 db    2
.data.rel.ro:0000000000210989                 db    0
.data.rel.ro:000000000021098A                 db    0
.data.rel.ro:000000000021098B                 db    0
.data.rel.ro:000000000021098C                 db    0
.data.rel.ro:000000000021098D                 db    0
.data.rel.ro:000000000021098E                 db    0
.data.rel.ro:000000000021098F                 db    0
.data.rel.ro:0000000000210990                 db    0
.data.rel.ro:0000000000210991                 db    0
.data.rel.ro:0000000000210992                 db    0
.data.rel.ro:0000000000210993                 db    0
.data.rel.ro:0000000000210994                 db    0
.data.rel.ro:0000000000210995                 db    0
.data.rel.ro:0000000000210996                 db    0
.data.rel.ro:0000000000210997                 db    0
.data.rel.ro:0000000000210998                 db  6Eh ; n
.data.rel.ro:0000000000210999                 db    0
.data.rel.ro:000000000021099A                 db    0
.data.rel.ro:000000000021099B                 db    0
.data.rel.ro:000000000021099C                 db    0
.data.rel.ro:000000000021099D                 db    0
.data.rel.ro:000000000021099E                 db    0
.data.rel.ro:000000000021099F                 db    0
.data.rel.ro:00000000002109A0                 dq offset aFirstLineNumbe ; "first-line-number"
.data.rel.ro:00000000002109A8                 db    1
.data.rel.ro:00000000002109A9                 db    0
.data.rel.ro:00000000002109AA                 db    0
.data.rel.ro:00000000002109AB                 db    0
.data.rel.ro:00000000002109AC                 db    0
.data.rel.ro:00000000002109AD                 db    0
.data.rel.ro:00000000002109AE                 db    0
.data.rel.ro:00000000002109AF                 db    0
.data.rel.ro:00000000002109B0                 db    0
.data.rel.ro:00000000002109B1                 db    0
.data.rel.ro:00000000002109B2                 db    0
.data.rel.ro:00000000002109B3                 db    0
.data.rel.ro:00000000002109B4                 db    0
.data.rel.ro:00000000002109B5                 db    0
.data.rel.ro:00000000002109B6                 db    0
.data.rel.ro:00000000002109B7                 db    0
.data.rel.ro:00000000002109B8                 db  4Eh ; N
.data.rel.ro:00000000002109B9                 db    0
.data.rel.ro:00000000002109BA                 db    0
.data.rel.ro:00000000002109BB                 db    0
.data.rel.ro:00000000002109BC                 db    0
.data.rel.ro:00000000002109BD                 db    0
.data.rel.ro:00000000002109BE                 db    0
.data.rel.ro:00000000002109BF                 db    0
.data.rel.ro:00000000002109C0                 dq offset aIndent       ; "indent"
.data.rel.ro:00000000002109C8                 db    1
.data.rel.ro:00000000002109C9                 db    0
.data.rel.ro:00000000002109CA                 db    0
.data.rel.ro:00000000002109CB                 db    0
.data.rel.ro:00000000002109CC                 db    0
.data.rel.ro:00000000002109CD                 db    0
.data.rel.ro:00000000002109CE                 db    0
.data.rel.ro:00000000002109CF                 db    0
.data.rel.ro:00000000002109D0                 db    0
.data.rel.ro:00000000002109D1                 db    0
.data.rel.ro:00000000002109D2                 db    0
.data.rel.ro:00000000002109D3                 db    0
.data.rel.ro:00000000002109D4                 db    0
.data.rel.ro:00000000002109D5                 db    0
.data.rel.ro:00000000002109D6                 db    0
.data.rel.ro:00000000002109D7                 db    0
.data.rel.ro:00000000002109D8                 db  6Fh ; o
.data.rel.ro:00000000002109D9                 db    0
.data.rel.ro:00000000002109DA                 db    0
.data.rel.ro:00000000002109DB                 db    0
.data.rel.ro:00000000002109DC                 db    0
.data.rel.ro:00000000002109DD                 db    0
.data.rel.ro:00000000002109DE                 db    0
.data.rel.ro:00000000002109DF                 db    0
.data.rel.ro:00000000002109E0                 dq offset aNoFileWarnings ; "no-file-warnings"
.data.rel.ro:00000000002109E8                 db    0
.data.rel.ro:00000000002109E9                 db    0
.data.rel.ro:00000000002109EA                 db    0
.data.rel.ro:00000000002109EB                 db    0
.data.rel.ro:00000000002109EC                 db    0
.data.rel.ro:00000000002109ED                 db    0
.data.rel.ro:00000000002109EE                 db    0
.data.rel.ro:00000000002109EF                 db    0
.data.rel.ro:00000000002109F0                 db    0
.data.rel.ro:00000000002109F1                 db    0
.data.rel.ro:00000000002109F2                 db    0
.data.rel.ro:00000000002109F3                 db    0
.data.rel.ro:00000000002109F4                 db    0
.data.rel.ro:00000000002109F5                 db    0
.data.rel.ro:00000000002109F6                 db    0
.data.rel.ro:00000000002109F7                 db    0
.data.rel.ro:00000000002109F8                 db  72h ; r
.data.rel.ro:00000000002109F9                 db    0
.data.rel.ro:00000000002109FA                 db    0
.data.rel.ro:00000000002109FB                 db    0
.data.rel.ro:00000000002109FC                 db    0
.data.rel.ro:00000000002109FD                 db    0
.data.rel.ro:00000000002109FE                 db    0
.data.rel.ro:00000000002109FF                 db    0
.data.rel.ro:0000000000210A00                 dq offset aSeparator    ; "separator"
.data.rel.ro:0000000000210A08                 db    2
.data.rel.ro:0000000000210A09                 db    0
.data.rel.ro:0000000000210A0A                 db    0
.data.rel.ro:0000000000210A0B                 db    0
.data.rel.ro:0000000000210A0C                 db    0
.data.rel.ro:0000000000210A0D                 db    0
.data.rel.ro:0000000000210A0E                 db    0
.data.rel.ro:0000000000210A0F                 db    0
.data.rel.ro:0000000000210A10                 db    0
.data.rel.ro:0000000000210A11                 db    0
.data.rel.ro:0000000000210A12                 db    0
.data.rel.ro:0000000000210A13                 db    0
.data.rel.ro:0000000000210A14                 db    0
.data.rel.ro:0000000000210A15                 db    0
.data.rel.ro:0000000000210A16                 db    0
.data.rel.ro:0000000000210A17                 db    0
.data.rel.ro:0000000000210A18                 db  73h ; s
.data.rel.ro:0000000000210A19                 db    0
.data.rel.ro:0000000000210A1A                 db    0
.data.rel.ro:0000000000210A1B                 db    0
.data.rel.ro:0000000000210A1C                 db    0
.data.rel.ro:0000000000210A1D                 db    0
.data.rel.ro:0000000000210A1E                 db    0
.data.rel.ro:0000000000210A1F                 db    0
.data.rel.ro:0000000000210A20                 dq offset aSepString    ; "sep-string"
.data.rel.ro:0000000000210A28                 db    2
.data.rel.ro:0000000000210A29                 db    0
.data.rel.ro:0000000000210A2A                 db    0
.data.rel.ro:0000000000210A2B                 db    0
.data.rel.ro:0000000000210A2C                 db    0
.data.rel.ro:0000000000210A2D                 db    0
.data.rel.ro:0000000000210A2E                 db    0
.data.rel.ro:0000000000210A2F                 db    0
.data.rel.ro:0000000000210A30                 db    0
.data.rel.ro:0000000000210A31                 db    0
.data.rel.ro:0000000000210A32                 db    0
.data.rel.ro:0000000000210A33                 db    0
.data.rel.ro:0000000000210A34                 db    0
.data.rel.ro:0000000000210A35                 db    0
.data.rel.ro:0000000000210A36                 db    0
.data.rel.ro:0000000000210A37                 db    0
.data.rel.ro:0000000000210A38                 db  53h ; S
.data.rel.ro:0000000000210A39                 db    0
.data.rel.ro:0000000000210A3A                 db    0
.data.rel.ro:0000000000210A3B                 db    0
.data.rel.ro:0000000000210A3C                 db    0
.data.rel.ro:0000000000210A3D                 db    0
.data.rel.ro:0000000000210A3E                 db    0
.data.rel.ro:0000000000210A3F                 db    0
.data.rel.ro:0000000000210A40                 dq offset aOmitHeader   ; "omit-header"
.data.rel.ro:0000000000210A48                 db    0
.data.rel.ro:0000000000210A49                 db    0
.data.rel.ro:0000000000210A4A                 db    0
.data.rel.ro:0000000000210A4B                 db    0
.data.rel.ro:0000000000210A4C                 db    0
.data.rel.ro:0000000000210A4D                 db    0
.data.rel.ro:0000000000210A4E                 db    0
.data.rel.ro:0000000000210A4F                 db    0
.data.rel.ro:0000000000210A50                 db    0
.data.rel.ro:0000000000210A51                 db    0
.data.rel.ro:0000000000210A52                 db    0
.data.rel.ro:0000000000210A53                 db    0
.data.rel.ro:0000000000210A54                 db    0
.data.rel.ro:0000000000210A55                 db    0
.data.rel.ro:0000000000210A56                 db    0
.data.rel.ro:0000000000210A57                 db    0
.data.rel.ro:0000000000210A58                 db  74h ; t
.data.rel.ro:0000000000210A59                 db    0
.data.rel.ro:0000000000210A5A                 db    0
.data.rel.ro:0000000000210A5B                 db    0
.data.rel.ro:0000000000210A5C                 db    0
.data.rel.ro:0000000000210A5D                 db    0
.data.rel.ro:0000000000210A5E                 db    0
.data.rel.ro:0000000000210A5F                 db    0
.data.rel.ro:0000000000210A60                 dq offset aOmitPagination ; "omit-pagination"
.data.rel.ro:0000000000210A68                 db    0
.data.rel.ro:0000000000210A69                 db    0
.data.rel.ro:0000000000210A6A                 db    0
.data.rel.ro:0000000000210A6B                 db    0
.data.rel.ro:0000000000210A6C                 db    0
.data.rel.ro:0000000000210A6D                 db    0
.data.rel.ro:0000000000210A6E                 db    0
.data.rel.ro:0000000000210A6F                 db    0
.data.rel.ro:0000000000210A70                 db    0
.data.rel.ro:0000000000210A71                 db    0
.data.rel.ro:0000000000210A72                 db    0
.data.rel.ro:0000000000210A73                 db    0
.data.rel.ro:0000000000210A74                 db    0
.data.rel.ro:0000000000210A75                 db    0
.data.rel.ro:0000000000210A76                 db    0
.data.rel.ro:0000000000210A77                 db    0
.data.rel.ro:0000000000210A78                 db  54h ; T
.data.rel.ro:0000000000210A79                 db    0
.data.rel.ro:0000000000210A7A                 db    0
.data.rel.ro:0000000000210A7B                 db    0
.data.rel.ro:0000000000210A7C                 db    0
.data.rel.ro:0000000000210A7D                 db    0
.data.rel.ro:0000000000210A7E                 db    0
.data.rel.ro:0000000000210A7F                 db    0
.data.rel.ro:0000000000210A80                 dq offset aShowNonprintin ; "show-nonprinting"
.data.rel.ro:0000000000210A88                 db    0
.data.rel.ro:0000000000210A89                 db    0
.data.rel.ro:0000000000210A8A                 db    0
.data.rel.ro:0000000000210A8B                 db    0
.data.rel.ro:0000000000210A8C                 db    0
.data.rel.ro:0000000000210A8D                 db    0
.data.rel.ro:0000000000210A8E                 db    0
.data.rel.ro:0000000000210A8F                 db    0
.data.rel.ro:0000000000210A90                 db    0
.data.rel.ro:0000000000210A91                 db    0
.data.rel.ro:0000000000210A92                 db    0
.data.rel.ro:0000000000210A93                 db    0
.data.rel.ro:0000000000210A94                 db    0
.data.rel.ro:0000000000210A95                 db    0
.data.rel.ro:0000000000210A96                 db    0
.data.rel.ro:0000000000210A97                 db    0
.data.rel.ro:0000000000210A98                 db  76h ; v
.data.rel.ro:0000000000210A99                 db    0
.data.rel.ro:0000000000210A9A                 db    0
.data.rel.ro:0000000000210A9B                 db    0
.data.rel.ro:0000000000210A9C                 db    0
.data.rel.ro:0000000000210A9D                 db    0
.data.rel.ro:0000000000210A9E                 db    0
.data.rel.ro:0000000000210A9F                 db    0
.data.rel.ro:0000000000210AA0                 dq offset aPageWidth+5  ; "width"
.data.rel.ro:0000000000210AA8                 db    1
.data.rel.ro:0000000000210AA9                 db    0
.data.rel.ro:0000000000210AAA                 db    0
.data.rel.ro:0000000000210AAB                 db    0
.data.rel.ro:0000000000210AAC                 db    0
.data.rel.ro:0000000000210AAD                 db    0
.data.rel.ro:0000000000210AAE                 db    0
.data.rel.ro:0000000000210AAF                 db    0
.data.rel.ro:0000000000210AB0                 db    0
.data.rel.ro:0000000000210AB1                 db    0
.data.rel.ro:0000000000210AB2                 db    0
.data.rel.ro:0000000000210AB3                 db    0
.data.rel.ro:0000000000210AB4                 db    0
.data.rel.ro:0000000000210AB5                 db    0
.data.rel.ro:0000000000210AB6                 db    0
.data.rel.ro:0000000000210AB7                 db    0
.data.rel.ro:0000000000210AB8                 db  77h ; w
.data.rel.ro:0000000000210AB9                 db    0
.data.rel.ro:0000000000210ABA                 db    0
.data.rel.ro:0000000000210ABB                 db    0
.data.rel.ro:0000000000210ABC                 db    0
.data.rel.ro:0000000000210ABD                 db    0
.data.rel.ro:0000000000210ABE                 db    0
.data.rel.ro:0000000000210ABF                 db    0
.data.rel.ro:0000000000210AC0                 dq offset aPageWidth    ; "page-width"
.data.rel.ro:0000000000210AC8                 db    1
.data.rel.ro:0000000000210AC9                 db    0
.data.rel.ro:0000000000210ACA                 db    0
.data.rel.ro:0000000000210ACB                 db    0
.data.rel.ro:0000000000210ACC                 db    0
.data.rel.ro:0000000000210ACD                 db    0
.data.rel.ro:0000000000210ACE                 db    0
.data.rel.ro:0000000000210ACF                 db    0
.data.rel.ro:0000000000210AD0                 db    0
.data.rel.ro:0000000000210AD1                 db    0
.data.rel.ro:0000000000210AD2                 db    0
.data.rel.ro:0000000000210AD3                 db    0
.data.rel.ro:0000000000210AD4                 db    0
.data.rel.ro:0000000000210AD5                 db    0
.data.rel.ro:0000000000210AD6                 db    0
.data.rel.ro:0000000000210AD7                 db    0
.data.rel.ro:0000000000210AD8                 db  57h ; W
.data.rel.ro:0000000000210AD9                 db    0
.data.rel.ro:0000000000210ADA                 db    0
.data.rel.ro:0000000000210ADB                 db    0
.data.rel.ro:0000000000210ADC                 db    0
.data.rel.ro:0000000000210ADD                 db    0
.data.rel.ro:0000000000210ADE                 db    0
.data.rel.ro:0000000000210ADF                 db    0
.data.rel.ro:0000000000210AE0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000210AE8                 db    0
.data.rel.ro:0000000000210AE9                 db    0
.data.rel.ro:0000000000210AEA                 db    0
.data.rel.ro:0000000000210AEB                 db    0
.data.rel.ro:0000000000210AEC                 db    0
.data.rel.ro:0000000000210AED                 db    0
.data.rel.ro:0000000000210AEE                 db    0
.data.rel.ro:0000000000210AEF                 db    0
.data.rel.ro:0000000000210AF0                 db    0
.data.rel.ro:0000000000210AF1                 db    0
.data.rel.ro:0000000000210AF2                 db    0
.data.rel.ro:0000000000210AF3                 db    0
.data.rel.ro:0000000000210AF4                 db    0
.data.rel.ro:0000000000210AF5                 db    0
.data.rel.ro:0000000000210AF6                 db    0
.data.rel.ro:0000000000210AF7                 db    0
.data.rel.ro:0000000000210AF8                 db  7Eh ; ~
.data.rel.ro:0000000000210AF9                 db 0FFh
.data.rel.ro:0000000000210AFA                 db 0FFh
.data.rel.ro:0000000000210AFB                 db 0FFh
.data.rel.ro:0000000000210AFC                 db    0
.data.rel.ro:0000000000210AFD                 db    0
.data.rel.ro:0000000000210AFE                 db    0
.data.rel.ro:0000000000210AFF                 db    0
.data.rel.ro:0000000000210B00                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000210B08                 db    0
.data.rel.ro:0000000000210B09                 db    0
.data.rel.ro:0000000000210B0A                 db    0
.data.rel.ro:0000000000210B0B                 db    0
.data.rel.ro:0000000000210B0C                 db    0
.data.rel.ro:0000000000210B0D                 db    0
.data.rel.ro:0000000000210B0E                 db    0
.data.rel.ro:0000000000210B0F                 db    0
.data.rel.ro:0000000000210B10                 db    0
.data.rel.ro:0000000000210B11                 db    0
.data.rel.ro:0000000000210B12                 db    0
.data.rel.ro:0000000000210B13                 db    0
.data.rel.ro:0000000000210B14                 db    0
.data.rel.ro:0000000000210B15                 db    0
.data.rel.ro:0000000000210B16                 db    0
.data.rel.ro:0000000000210B17                 db    0
.data.rel.ro:0000000000210B18                 db  7Dh ; }
.data.rel.ro:0000000000210B19                 db 0FFh
.data.rel.ro:0000000000210B1A                 db 0FFh
.data.rel.ro:0000000000210B1B                 db 0FFh
.data.rel.ro:0000000000210B1C                 db    0
.data.rel.ro:0000000000210B1D                 db    0
.data.rel.ro:0000000000210B1E                 db    0
.data.rel.ro:0000000000210B1F                 db    0
.data.rel.ro:0000000000210B20                 db    0
.data.rel.ro:0000000000210B21                 db    0
.data.rel.ro:0000000000210B22                 db    0
.data.rel.ro:0000000000210B23                 db    0
.data.rel.ro:0000000000210B24                 db    0
.data.rel.ro:0000000000210B25                 db    0
.data.rel.ro:0000000000210B26                 db    0
.data.rel.ro:0000000000210B27                 db    0
.data.rel.ro:0000000000210B28                 db    0
.data.rel.ro:0000000000210B29                 db    0
.data.rel.ro:0000000000210B2A                 db    0
.data.rel.ro:0000000000210B2B                 db    0
.data.rel.ro:0000000000210B2C                 db    0
.data.rel.ro:0000000000210B2D                 db    0
.data.rel.ro:0000000000210B2E                 db    0
.data.rel.ro:0000000000210B2F                 db    0
.data.rel.ro:0000000000210B30                 db    0
.data.rel.ro:0000000000210B31                 db    0
.data.rel.ro:0000000000210B32                 db    0
.data.rel.ro:0000000000210B33                 db    0
.data.rel.ro:0000000000210B34                 db    0
.data.rel.ro:0000000000210B35                 db    0
.data.rel.ro:0000000000210B36                 db    0
.data.rel.ro:0000000000210B37                 db    0
.data.rel.ro:0000000000210B38                 db    0
.data.rel.ro:0000000000210B39                 db    0
.data.rel.ro:0000000000210B3A                 db    0
.data.rel.ro:0000000000210B3B                 db    0
.data.rel.ro:0000000000210B3C                 db    0
.data.rel.ro:0000000000210B3D                 db    0
.data.rel.ro:0000000000210B3E                 db    0
.data.rel.ro:0000000000210B3F                 db    0
.data.rel.ro:0000000000210B40                 public quoting_style_args
.data.rel.ro:0000000000210B40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000210B48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000210B50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000210B58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000210B60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000210B68                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000210B70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000210B78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000210B80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000210B88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000210B90                 db    0
.data.rel.ro:0000000000210B91                 db    0
.data.rel.ro:0000000000210B92                 db    0
.data.rel.ro:0000000000210B93                 db    0
.data.rel.ro:0000000000210B94                 db    0
.data.rel.ro:0000000000210B95                 db    0
.data.rel.ro:0000000000210B96                 db    0
.data.rel.ro:0000000000210B97                 db    0
.data.rel.ro:0000000000210B97 _data_rel_ro    ends
.data.rel.ro:0000000000210B97
LOAD:0000000000210B98 ; ELF Dynamic Information
LOAD:0000000000210B98 ; ===========================================================================
LOAD:0000000000210B98
LOAD:0000000000210B98 ; Segment type: Pure data
LOAD:0000000000210B98 ; Segment permissions: Read/Write
LOAD:0000000000210B98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000210B98                 assume cs:LOAD
LOAD:0000000000210B98                 ;org 210B98h
LOAD:0000000000210B98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000210B98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000210B98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000210BA8                 Elf64_Dyn <0Ch, 1B30h>  ; DT_INIT
LOAD:0000000000210BB8                 Elf64_Dyn <0Dh, 0BE40h> ; DT_FINI
LOAD:0000000000210BC8                 Elf64_Dyn <19h, 2107D0h> ; DT_INIT_ARRAY
LOAD:0000000000210BD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000210BE8                 Elf64_Dyn <1Ah, 2107D8h> ; DT_FINI_ARRAY
LOAD:0000000000210BF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000210C08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000210C18                 Elf64_Dyn <5, 0AC0h>    ; DT_STRTAB
LOAD:0000000000210C28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000210C38                 Elf64_Dyn <0Ah, 3B3h>   ; DT_STRSZ
LOAD:0000000000210C48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000210C58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000210C68                 Elf64_Dyn <3, 210D88h>  ; DT_PLTGOT
LOAD:0000000000210C78                 Elf64_Dyn <2, 678h>     ; DT_PLTRELSZ
LOAD:0000000000210C88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000210C98                 Elf64_Dyn <17h, 14B8h>  ; DT_JMPREL
LOAD:0000000000210CA8                 Elf64_Dyn <7, 0F90h>    ; DT_RELA
LOAD:0000000000210CB8                 Elf64_Dyn <8, 528h>     ; DT_RELASZ
LOAD:0000000000210CC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000210CD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000210CE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000210CF8                 Elf64_Dyn <6FFFFFFEh, 0F20h> ; DT_VERNEED
LOAD:0000000000210D08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000210D18                 Elf64_Dyn <6FFFFFF0h, 0E74h> ; DT_VERSYM
LOAD:0000000000210D28                 Elf64_Dyn <6FFFFFF9h, 2Bh> ; DT_RELACOUNT
LOAD:0000000000210D38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000210D48                 db    0
LOAD:0000000000210D49                 db    0
LOAD:0000000000210D4A                 db    0
LOAD:0000000000210D4B                 db    0
LOAD:0000000000210D4C                 db    0
LOAD:0000000000210D4D                 db    0
LOAD:0000000000210D4E                 db    0
LOAD:0000000000210D4F                 db    0
LOAD:0000000000210D50                 db    0
LOAD:0000000000210D51                 db    0
LOAD:0000000000210D52                 db    0
LOAD:0000000000210D53                 db    0
LOAD:0000000000210D54                 db    0
LOAD:0000000000210D55                 db    0
LOAD:0000000000210D56                 db    0
LOAD:0000000000210D57                 db    0
LOAD:0000000000210D58                 db    0
LOAD:0000000000210D59                 db    0
LOAD:0000000000210D5A                 db    0
LOAD:0000000000210D5B                 db    0
LOAD:0000000000210D5C                 db    0
LOAD:0000000000210D5D                 db    0
LOAD:0000000000210D5E                 db    0
LOAD:0000000000210D5F                 db    0
LOAD:0000000000210D60                 db    0
LOAD:0000000000210D61                 db    0
LOAD:0000000000210D62                 db    0
LOAD:0000000000210D63                 db    0
LOAD:0000000000210D64                 db    0
LOAD:0000000000210D65                 db    0
LOAD:0000000000210D66                 db    0
LOAD:0000000000210D67                 db    0
LOAD:0000000000210D68                 db    0
LOAD:0000000000210D69                 db    0
LOAD:0000000000210D6A                 db    0
LOAD:0000000000210D6B                 db    0
LOAD:0000000000210D6C                 db    0
LOAD:0000000000210D6D                 db    0
LOAD:0000000000210D6E                 db    0
LOAD:0000000000210D6F                 db    0
LOAD:0000000000210D70                 db    0
LOAD:0000000000210D71                 db    0
LOAD:0000000000210D72                 db    0
LOAD:0000000000210D73                 db    0
LOAD:0000000000210D74                 db    0
LOAD:0000000000210D75                 db    0
LOAD:0000000000210D76                 db    0
LOAD:0000000000210D77                 db    0
LOAD:0000000000210D78                 db    0
LOAD:0000000000210D79                 db    0
LOAD:0000000000210D7A                 db    0
LOAD:0000000000210D7B                 db    0
LOAD:0000000000210D7C                 db    0
LOAD:0000000000210D7D                 db    0
LOAD:0000000000210D7E                 db    0
LOAD:0000000000210D7F                 db    0
LOAD:0000000000210D80                 db    0
LOAD:0000000000210D81                 db    0
LOAD:0000000000210D82                 db    0
LOAD:0000000000210D83                 db    0
LOAD:0000000000210D84                 db    0
LOAD:0000000000210D85                 db    0
LOAD:0000000000210D86                 db    0
LOAD:0000000000210D87                 db    0
LOAD:0000000000210D87 LOAD            ends
LOAD:0000000000210D87
.got:0000000000210D88 ; ===========================================================================
.got:0000000000210D88
.got:0000000000210D88 ; Segment type: Pure data
.got:0000000000210D88 ; Segment permissions: Read/Write
.got:0000000000210D88 _got            segment qword public 'DATA' use64
.got:0000000000210D88                 assume cs:_got
.got:0000000000210D88                 ;org 210D88h
.got:0000000000210D88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000210D90 qword_210D90    dq 0                    ; DATA XREF: sub_1B50↑r
.got:0000000000210D98 qword_210D98    dq 0                    ; DATA XREF: sub_1B50+6↑r
.got:0000000000210DA0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000210DA0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000210DA8 __uflow_ptr     dq offset __uflow       ; DATA XREF: ___uflow↑r
.got:0000000000210DB0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000210DB8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000210DC0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000210DC8 __errno_location_ptr dq offset __errno_location
.got:0000000000210DC8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000210DD0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000210DD8 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000210DE0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000210DE8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000210DF0 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:0000000000210DF8 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:0000000000210E00 clock_gettime_ptr dq offset clock_gettime
.got:0000000000210E00                                         ; DATA XREF: _clock_gettime↑r
.got:0000000000210E08 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000210E10 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000210E18 __strtol_internal_ptr dq offset __strtol_internal
.got:0000000000210E18                                         ; DATA XREF: ___strtol_internal↑r
.got:0000000000210E20 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000210E28 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000210E28                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000210E30 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000210E38 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000210E38                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000210E40 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000210E48 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000210E48                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000210E50 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000210E58 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000210E60 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000210E68 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000210E70 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000210E78 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000210E80 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000210E88 __assert_fail_ptr dq offset __assert_fail
.got:0000000000210E88                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000210E90 __strtoul_internal_ptr dq offset __strtoul_internal
.got:0000000000210E90                                         ; DATA XREF: ___strtoul_internal↑r
.got:0000000000210E98 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000210EA0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000210EA8 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000210EA8                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000210EB0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000210EB8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000210EB8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000210EC0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000210EC8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000210ED0 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000210ED8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000210EE0 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000210EE8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000210EF0 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:0000000000210EF8 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000210F00 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000210F08 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000210F10 ungetc_ptr      dq offset ungetc        ; DATA XREF: _ungetc↑r
.got:0000000000210F18 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000210F20 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000210F28 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000210F30 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000210F38 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:0000000000210F40 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000210F48 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000210F50 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000210F58 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000210F60 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000210F68 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000210F70 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000210F78 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000210F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000210F88 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000210F90 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000210F98 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000210F98                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000210FA0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000210FA8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000210FB0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000210FB0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000210FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000210FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000210FC0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000210FC0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000210FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000210FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000210FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000210FD0                                         ; DATA XREF: start+24↑r
.got:0000000000210FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000210FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000210FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000210FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000210FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000210FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000210FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000210FE8 _got            ends
.got:0000000000210FE8
LOAD:0000000000210FF0 ; ===========================================================================
LOAD:0000000000210FF0
LOAD:0000000000210FF0 ; Segment type: Pure data
LOAD:0000000000210FF0 ; Segment permissions: Read/Write
LOAD:0000000000210FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000210FF0                 assume cs:LOAD
LOAD:0000000000210FF0                 ;org 210FF0h
LOAD:0000000000210FF0                 align 20h
LOAD:0000000000210FF0 LOAD            ends
LOAD:0000000000210FF0
.data:0000000000211000 ; ===========================================================================
.data:0000000000211000
.data:0000000000211000 ; Segment type: Pure data
.data:0000000000211000 ; Segment permissions: Read/Write
.data:0000000000211000 _data           segment align_32 public 'DATA' use64
.data:0000000000211000                 assume cs:_data
.data:0000000000211000                 ;org 211000h
.data:0000000000211000                 public __data_start ; weak
.data:0000000000211000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000211000                                         ; data_start
.data:0000000000211001                 db    0
.data:0000000000211002                 db    0
.data:0000000000211003                 db    0
.data:0000000000211004                 db    0
.data:0000000000211005                 db    0
.data:0000000000211006                 db    0
.data:0000000000211007                 db    0
.data:0000000000211008                 public __dso_handle
.data:0000000000211008 ; void *_dso_handle
.data:0000000000211008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000211008                                         ; atexit↑r ...
.data:0000000000211010 chars_per_number dd 5                   ; DATA XREF: main+496↑o
.data:0000000000211010                                         ; add_line_number_isra_2+11↑r ...
.data:0000000000211014 start_line_num  dd 1                    ; DATA XREF: main+6AA↑w
.data:0000000000211014                                         ; print_files+F5↑r
.data:0000000000211018 skip_count      db 1                    ; DATA XREF: main+677↑w
.data:0000000000211018                                         ; skip_read:loc_3AA6↑r
.data:0000000000211019                 align 4
.data:000000000021101C line_count      dd 1                    ; DATA XREF: skip_read+93↑w
.data:000000000021101C                                         ; print_files+FB↑w ...
.data:0000000000211020 number_separator db 9                   ; DATA XREF: main+49D↑o
.data:0000000000211020                                         ; add_line_number_isra_2+77↑r ...
.data:0000000000211021                 align 8
.data:0000000000211028 last_page_number dq 0FFFFFFFFFFFFFFFFh  ; DATA XREF: first_last_page+85↑w
.data:0000000000211028                                         ; print_files+803↑r
.data:0000000000211030 columns         dd 1                    ; DATA XREF: cols_ready_to_print↑r
.data:0000000000211030                                         ; reset_status↑r ...
.data:0000000000211034 chars_per_output_tab dd 8               ; DATA XREF: main+519↑o
.data:0000000000211034                                         ; print_white_space:loc_2FE0↑r ...
.data:0000000000211038 output_tab_char db 9                    ; DATA XREF: main+520↑o
.data:0000000000211038                                         ; print_white_space+3C↑r
.data:0000000000211039                 align 4
.data:000000000021103C chars_per_input_tab dd 8                ; DATA XREF: main+560↑o
.data:000000000021103C                                         ; char_to_clump+11↑r ...
.data:0000000000211040 input_tab_char  db 9                    ; DATA XREF: main+567↑o
.data:0000000000211040                                         ; char_to_clump+27↑r
.data:0000000000211041                 align 4
.data:0000000000211044 chars_per_line  dd 48h                  ; DATA XREF: main+3BA↑w
.data:0000000000211044                                         ; main+609↑w ...
.data:0000000000211048 lines_per_page  dd 42h                  ; DATA XREF: main+502↑w
.data:0000000000211048                                         ; print_files+14↑r
.data:000000000021104C storing_columns db 1                    ; DATA XREF: main+4BC↑w
.data:000000000021104C                                         ; main+5B7↑w ...
.data:000000000021104D extremities     db 1                    ; DATA XREF: main:loc_239F↑w
.data:000000000021104D                                         ; main:loc_25D4↑w ...
.data:000000000021104E                 align 10h
.data:0000000000211050 col_sep_string  dq offset asc_BEE4+1    ; DATA XREF: main+64D↑w
.data:0000000000211050                                         ; separator_string+11↑w ...
.data:0000000000211050                                         ; ""
.data:0000000000211058                 public Version
.data:0000000000211058 Version         dq offset a831          ; DATA XREF: main+726↑r
.data:0000000000211058                                         ; "8.31"
.data:0000000000211060                 public exit_failure
.data:0000000000211060 ; int exit_failure
.data:0000000000211060 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_59A2↑r
.data:0000000000211060                                         ; xalloc_die+17↑r ...
.data:0000000000211064                 align 20h
.data:0000000000211080                 public quote_quoting_options
.data:0000000000211080 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000211080                                         ; quote_mem↑o ...
.data:0000000000211081                 db    0
.data:0000000000211082                 db    0
.data:0000000000211083                 db    0
.data:0000000000211084                 db    0
.data:0000000000211085                 db    0
.data:0000000000211086                 db    0
.data:0000000000211087                 db    0
.data:0000000000211088                 db    0
.data:0000000000211089                 db    0
.data:000000000021108A                 db    0
.data:000000000021108B                 db    0
.data:000000000021108C                 db    0
.data:000000000021108D                 db    0
.data:000000000021108E                 db    0
.data:000000000021108F                 db    0
.data:0000000000211090                 db    0
.data:0000000000211091                 db    0
.data:0000000000211092                 db    0
.data:0000000000211093                 db    0
.data:0000000000211094                 db    0
.data:0000000000211095                 db    0
.data:0000000000211096                 db    0
.data:0000000000211097                 db    0
.data:0000000000211098                 db    0
.data:0000000000211099                 db    0
.data:000000000021109A                 db    0
.data:000000000021109B                 db    0
.data:000000000021109C                 db    0
.data:000000000021109D                 db    0
.data:000000000021109E                 db    0
.data:000000000021109F                 db    0
.data:00000000002110A0                 db    0
.data:00000000002110A1                 db    0
.data:00000000002110A2                 db    0
.data:00000000002110A3                 db    0
.data:00000000002110A4                 db    0
.data:00000000002110A5                 db    0
.data:00000000002110A6                 db    0
.data:00000000002110A7                 db    0
.data:00000000002110A8                 db    0
.data:00000000002110A9                 db    0
.data:00000000002110AA                 db    0
.data:00000000002110AB                 db    0
.data:00000000002110AC                 db    0
.data:00000000002110AD                 db    0
.data:00000000002110AE                 db    0
.data:00000000002110AF                 db    0
.data:00000000002110B0                 db    0
.data:00000000002110B1                 db    0
.data:00000000002110B2                 db    0
.data:00000000002110B3                 db    0
.data:00000000002110B4                 db    0
.data:00000000002110B5                 db    0
.data:00000000002110B6                 db    0
.data:00000000002110B7                 db    0
.data:00000000002110B8 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:00000000002110B8                                         ; quotearg_n_options:loc_8DFD↑r ...
.data:00000000002110BC                 align 20h
.data:00000000002110C0 ; void *slotvec
.data:00000000002110C0 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:00000000002110C0                                         ; quotearg_n_options+76↑w ...
.data:00000000002110C8                 align 10h
.data:00000000002110D0 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:00000000002110D0                                         ; quotearg_n_options+187↑r ...
.data:00000000002110D8 off_2110D8      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:00000000002110D8 _data           ends
.data:00000000002110D8
.bss:00000000002110E0 ; ===========================================================================
.bss:00000000002110E0
.bss:00000000002110E0 ; Segment type: Uninitialized
.bss:00000000002110E0 ; Segment permissions: Read/Write
.bss:00000000002110E0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002110E0                 assume cs:_bss
.bss:00000000002110E0                 ;org 2110E0h
.bss:00000000002110E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002110E0                 public __bss_start ; weak
.bss:00000000002110E0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A00↑o
.bss:00000000002110E0                                         ; LOAD:0000000000000A60↑o ...
.bss:00000000002110E0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002110E0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002110E0                                         ; _edata
.bss:00000000002110E0                                         ; Copy of shared data
.bss:00000000002110E8                 public stdout@@GLIBC_2_2_5
.bss:00000000002110E8 ; _IO_FILE *stdout
.bss:00000000002110E8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E8↑o
.bss:00000000002110E8                                         ; main+71F↑r ...
.bss:00000000002110E8                                         ; Alternative name is 'stdout'
.bss:00000000002110E8                                         ; Copy of shared data
.bss:00000000002110F0                 public stdin@@GLIBC_2_2_5
.bss:00000000002110F0 ; FILE *stdin
.bss:00000000002110F0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000A18↑o
.bss:00000000002110F0                                         ; main:loc_27EA↑r ...
.bss:00000000002110F0                                         ; Alternative name is 'stdin'
.bss:00000000002110F0                                         ; Copy of shared data
.bss:00000000002110F8                 public optind@@GLIBC_2_2_5
.bss:00000000002110F8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:00000000002110F8                                         ; main:loc_21D6↑r ...
.bss:00000000002110F8                                         ; Alternative name is 'optind'
.bss:00000000002110F8                                         ; Copy of shared data
.bss:00000000002110FC                 align 20h
.bss:0000000000211100                 public optarg@@GLIBC_2_2_5
.bss:0000000000211100 ; char *optarg
.bss:0000000000211100 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:0000000000211100                                         ; main:loc_22DD↑r ...
.bss:0000000000211100                                         ; Alternative name is 'optarg'
.bss:0000000000211100                                         ; Copy of shared data
.bss:0000000000211108                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000211108 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000211108                                         ; DATA XREF: LOAD:0000000000000A30↑o
.bss:0000000000211108                                         ; LOAD:0000000000000A48↑o ...
.bss:0000000000211108                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000211108                                         ; Copy of shared data
.bss:0000000000211110                 align 20h
.bss:0000000000211120                 public stderr@@GLIBC_2_2_5
.bss:0000000000211120 ; FILE *stderr
.bss:0000000000211120 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A78↑o
.bss:0000000000211120                                         ; usage+3D↑r ...
.bss:0000000000211120                                         ; Alternative name is 'stderr'
.bss:0000000000211120                                         ; Copy of shared data
.bss:0000000000211128 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:0000000000211128                                         ; __do_global_dtors_aux+28↑w
.bss:0000000000211129                 align 10h
.bss:0000000000211130 ; struct timespec timespec_7349
.bss:0000000000211130 timespec_7349   timespec <?>            ; DATA XREF: init_header:loc_2D81↑r
.bss:0000000000211130                                         ; init_header:loc_2D8F↑r ...
.bss:0000000000211140 last_line       db ?                    ; DATA XREF: skip_read:loc_3A6C↑r
.bss:0000000000211140                                         ; skip_read:loc_3B50↑r ...
.bss:0000000000211141                 align 8
.bss:0000000000211148 ; void *clump_buff
.bss:0000000000211148 clump_buff      dq ?                    ; DATA XREF: main+2AA↑r
.bss:0000000000211148                                         ; char_to_clump+A↑r ...
.bss:0000000000211150 header_width_available dd ?             ; DATA XREF: init_header+147↑w
.bss:0000000000211150                                         ; print_header+76↑r
.bss:0000000000211154                 align 8
.bss:0000000000211158 file_text       dq ?                    ; DATA XREF: init_header+118↑w
.bss:0000000000211158                                         ; init_header+124↑r ...
.bss:0000000000211160 ; void *date_text
.bss:0000000000211160 date_text       dq ?                    ; DATA XREF: init_header:loc_2E10↑r
.bss:0000000000211160                                         ; init_header+F3↑w ...
.bss:0000000000211168 localtz         dq ?                    ; DATA XREF: main+1A3↑w
.bss:0000000000211168                                         ; init_header+78↑r ...
.bss:0000000000211170 date_format     dq ?                    ; DATA XREF: main:loc_2139↑r
.bss:0000000000211170                                         ; main+6DA↑w ...
.bss:0000000000211178 custom_header   dq ?                    ; DATA XREF: main+548↑w
.bss:0000000000211178                                         ; init_header+EC↑r
.bss:0000000000211180 pad_vertically  db ?                    ; DATA XREF: print_stored+18↑w
.bss:0000000000211180                                         ; print_stored+12B↑w ...
.bss:0000000000211181                 align 4
.bss:0000000000211184 padding_not_printed dd ?                ; DATA XREF: print_stored+5B↑r
.bss:0000000000211184                                         ; print_stored+15F↑w ...
.bss:0000000000211188 separators_not_printed dd ?             ; DATA XREF: print_sep_string↑r
.bss:0000000000211188                                         ; print_sep_string:loc_313D↑r ...
.bss:000000000021118C col_sep_length  dd ?                    ; DATA XREF: main+637↑w
.bss:000000000021118C                                         ; main+79E↑r ...
.bss:0000000000211190 use_col_separator db ?                  ; DATA XREF: main:loc_21CF↑w
.bss:0000000000211190                                         ; main:loc_23B4↑r ...
.bss:0000000000211191 ignore_failed_opens db ?                ; DATA XREF: main:loc_23F1↑w
.bss:0000000000211191                                         ; open_file:loc_427E↑r
.bss:0000000000211192                 align 4
.bss:0000000000211194 total_files     dd ?                    ; DATA XREF: open_file+6D↑w
.bss:0000000000211194                                         ; print_files+1C1↑w ...
.bss:0000000000211198 double_space    db ?                    ; DATA XREF: main:loc_2546↑w
.bss:0000000000211198                                         ; print_files:loc_4318↑r ...
.bss:0000000000211199 use_cntrl_prefix db ?                   ; DATA XREF: main:loc_2554↑w
.bss:0000000000211199                                         ; char_to_clump+5B↑r
.bss:000000000021119A use_esc_sequence db ?                   ; DATA XREF: main:loc_2391↑w
.bss:000000000021119A                                         ; char_to_clump+4E↑r
.bss:000000000021119B                 align 20h
.bss:00000000002111A0 ; void *number_buff
.bss:00000000002111A0 number_buff     dq ?                    ; DATA XREF: main:loc_225E↑r
.bss:00000000002111A0                                         ; add_line_number_isra_2+1B↑r ...
.bss:00000000002111A8 number_width    dd ?                    ; DATA XREF: add_line_number_isra_2+B9↑r
.bss:00000000002111A8                                         ; add_line_number_isra_2:loc_388B↑r ...
.bss:00000000002111AC numbered_lines  db ?                    ; DATA XREF: main+486↑w
.bss:00000000002111AC                                         ; print_files:loc_43BE↑r ...
.bss:00000000002111AD                 align 10h
.bss:00000000002111B0 line_number     dd ?                    ; DATA XREF: add_line_number_isra_2+2↑r
.bss:00000000002111B0                                         ; add_line_number_isra_2+3C↑w ...
.bss:00000000002111B4                 align 8
.bss:00000000002111B8 page_number     dq ?                    ; DATA XREF: print_header+36↑r
.bss:00000000002111B8                                         ; print_files+3A4↑w ...
.bss:00000000002111C0 files_ready_to_read dd ?                ; DATA XREF: reset_status+14↑r
.bss:00000000002111C0                                         ; reset_status+63↑w ...
.bss:00000000002111C4                 align 8
.bss:00000000002111C8 first_page_number dq ?                  ; DATA XREF: main+19B↑r
.bss:00000000002111C8                                         ; main+1AC↑w ...
.bss:00000000002111D0 failed_opens    db ?                    ; DATA XREF: main+301↑r
.bss:00000000002111D0                                         ; open_file+A5↑w
.bss:00000000002111D1                 align 4
.bss:00000000002111D4 input_position  dd ?                    ; DATA XREF: char_to_clump+77↑r
.bss:00000000002111D4                                         ; char_to_clump:loc_3365↑r ...
.bss:00000000002111D8 output_position dd ?                    ; DATA XREF: pad_across_to+F↑r
.bss:00000000002111D8                                         ; pad_across_to:loc_2F91↑w ...
.bss:00000000002111DC chars_per_margin dd ?                   ; DATA XREF: main+474↑w
.bss:00000000002111DC                                         ; print_header+9↑r ...
.bss:00000000002111E0 spaces_not_printed dd ?                 ; DATA XREF: pad_across_to+52↑w
.bss:00000000002111E0                                         ; print_white_space+2↑r ...
.bss:00000000002111E4 tabify_output   db ?                    ; DATA XREF: main:loc_24F1↑w
.bss:00000000002111E4                                         ; pad_across_to+8↑r ...
.bss:00000000002111E5 untabify_input  db ?                    ; DATA XREF: main:loc_2538↑w
.bss:00000000002111E5                                         ; char_to_clump+A2↑r
.bss:00000000002111E6                 align 8
.bss:00000000002111E8 chars_per_column dd ?                   ; DATA XREF: read_line+10E↑r
.bss:00000000002111E8                                         ; read_line:loc_3E78↑r ...
.bss:00000000002111EC join_lines      db ?                    ; DATA XREF: main:loc_2675↑w
.bss:00000000002111EC                                         ; main+7A5↑w ...
.bss:00000000002111ED truncate_lines  db ?                    ; DATA XREF: main+206↑w
.bss:00000000002111ED                                         ; main+3A4↑r ...
.bss:00000000002111EE                 align 10h
.bss:00000000002111F0 lines_per_body  dd ?                    ; DATA XREF: print_files+1F↑w
.bss:00000000002111F0                                         ; print_files+41↑r ...
.bss:00000000002111F4 balance_columns db ?                    ; DATA XREF: main:loc_2562↑w
.bss:00000000002111F4                                         ; print_files+75↑w ...
.bss:00000000002111F5 print_across_flag db ?                  ; DATA XREF: main+1D0↑r
.bss:00000000002111F5                                         ; main:loc_2570↑w
.bss:00000000002111F6 have_read_stdin db ?                    ; DATA XREF: main+2E6↑r
.bss:00000000002111F6                                         ; open_file+44↑w ...
.bss:00000000002111F7 use_form_feed   db ?                    ; DATA XREF: main:loc_2683↑w
.bss:00000000002111F7                                         ; print_files:loc_4E24↑r
.bss:00000000002111F8 print_a_header  db ?                    ; DATA XREF: print_header+D9↑w
.bss:00000000002111F8                                         ; print_stored+3D↑r ...
.bss:00000000002111F9 print_a_FF      db ?                    ; DATA XREF: read_rest_of_line:loc_3CF3↑w
.bss:00000000002111F9                                         ; read_line+2EA↑w ...
.bss:00000000002111FA keep_FF         db ?                    ; DATA XREF: main+3E6↑w
.bss:00000000002111FA                                         ; main+61B↑w ...
.bss:00000000002111FB explicit_columns db ?                   ; DATA XREF: main+1C3↑r
.bss:00000000002111FB                                         ; main+1F4↑r ...
.bss:00000000002111FC FF_only         db ?                    ; DATA XREF: read_line+2CB↑w
.bss:00000000002111FC                                         ; read_line+33F↑w ...
.bss:00000000002111FD empty_line      db ?                    ; DATA XREF: read_line+19E↑w
.bss:00000000002111FD                                         ; print_files+621↑w ...
.bss:00000000002111FE align_empty_cols db ?                   ; DATA XREF: read_line+A6↑r
.bss:00000000002111FE                                         ; read_line:loc_3E6A↑w ...
.bss:00000000002111FF parallel_files  db ?                    ; DATA XREF: main:loc_2177↑r
.bss:00000000002111FF                                         ; main:loc_2475↑w ...
.bss:0000000000211200 ; void *end_vector
.bss:0000000000211200 end_vector      dq ?                    ; DATA XREF: main+2CE↑r
.bss:0000000000211200                                         ; print_stored+9C↑r ...
.bss:0000000000211208 ; void *line_vector
.bss:0000000000211208 line_vector     dq ?                    ; DATA XREF: main+2C2↑r
.bss:0000000000211208                                         ; print_stored+27↑r ...
.bss:0000000000211210 buff_allocated  dq ?                    ; DATA XREF: store_char+9↑r
.bss:0000000000211210                                         ; store_char+1C↑o ...
.bss:0000000000211218 buff_current    dd ?                    ; DATA XREF: store_char↑r
.bss:0000000000211218                                         ; store_char+2B↑r ...
.bss:000000000021121C                 align 20h
.bss:0000000000211220 ; void *buff
.bss:0000000000211220 buff            dq ?                    ; DATA XREF: main+2DA↑r
.bss:0000000000211220                                         ; store_char+10↑r ...
.bss:0000000000211228 ; void *column_vector
.bss:0000000000211228 column_vector   dq ?                    ; DATA XREF: main+2B6↑r
.bss:0000000000211228                                         ; cols_ready_to_print+6↑r ...
.bss:0000000000211230 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000211230                                         ; close_stdout+1B↑r
.bss:0000000000211231                 align 8
.bss:0000000000211238 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000211238                                         ; close_stdout+56↑r
.bss:0000000000211240                 public program_name
.bss:0000000000211240 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000211240                                         ; set_program_name:loc_7A1D↑w
.bss:0000000000211248                 align 20h
.bss:0000000000211260 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000211260                                         ; quotearg_free+46↑o ...
.bss:0000000000211261                 db    ? ;
.bss:0000000000211262                 db    ? ;
.bss:0000000000211263                 db    ? ;
.bss:0000000000211264                 db    ? ;
.bss:0000000000211265                 db    ? ;
.bss:0000000000211266                 db    ? ;
.bss:0000000000211267                 db    ? ;
.bss:0000000000211268                 db    ? ;
.bss:0000000000211269                 db    ? ;
.bss:000000000021126A                 db    ? ;
.bss:000000000021126B                 db    ? ;
.bss:000000000021126C                 db    ? ;
.bss:000000000021126D                 db    ? ;
.bss:000000000021126E                 db    ? ;
.bss:000000000021126F                 db    ? ;
.bss:0000000000211270                 db    ? ;
.bss:0000000000211271                 db    ? ;
.bss:0000000000211272                 db    ? ;
.bss:0000000000211273                 db    ? ;
.bss:0000000000211274                 db    ? ;
.bss:0000000000211275                 db    ? ;
.bss:0000000000211276                 db    ? ;
.bss:0000000000211277                 db    ? ;
.bss:0000000000211278                 db    ? ;
.bss:0000000000211279                 db    ? ;
.bss:000000000021127A                 db    ? ;
.bss:000000000021127B                 db    ? ;
.bss:000000000021127C                 db    ? ;
.bss:000000000021127D                 db    ? ;
.bss:000000000021127E                 db    ? ;
.bss:000000000021127F                 db    ? ;
.bss:0000000000211280                 db    ? ;
.bss:0000000000211281                 db    ? ;
.bss:0000000000211282                 db    ? ;
.bss:0000000000211283                 db    ? ;
.bss:0000000000211284                 db    ? ;
.bss:0000000000211285                 db    ? ;
.bss:0000000000211286                 db    ? ;
.bss:0000000000211287                 db    ? ;
.bss:0000000000211288                 db    ? ;
.bss:0000000000211289                 db    ? ;
.bss:000000000021128A                 db    ? ;
.bss:000000000021128B                 db    ? ;
.bss:000000000021128C                 db    ? ;
.bss:000000000021128D                 db    ? ;
.bss:000000000021128E                 db    ? ;
.bss:000000000021128F                 db    ? ;
.bss:0000000000211290                 db    ? ;
.bss:0000000000211291                 db    ? ;
.bss:0000000000211292                 db    ? ;
.bss:0000000000211293                 db    ? ;
.bss:0000000000211294                 db    ? ;
.bss:0000000000211295                 db    ? ;
.bss:0000000000211296                 db    ? ;
.bss:0000000000211297                 db    ? ;
.bss:0000000000211298                 db    ? ;
.bss:0000000000211299                 db    ? ;
.bss:000000000021129A                 db    ? ;
.bss:000000000021129B                 db    ? ;
.bss:000000000021129C                 db    ? ;
.bss:000000000021129D                 db    ? ;
.bss:000000000021129E                 db    ? ;
.bss:000000000021129F                 db    ? ;
.bss:00000000002112A0                 db    ? ;
.bss:00000000002112A1                 db    ? ;
.bss:00000000002112A2                 db    ? ;
.bss:00000000002112A3                 db    ? ;
.bss:00000000002112A4                 db    ? ;
.bss:00000000002112A5                 db    ? ;
.bss:00000000002112A6                 db    ? ;
.bss:00000000002112A7                 db    ? ;
.bss:00000000002112A8                 db    ? ;
.bss:00000000002112A9                 db    ? ;
.bss:00000000002112AA                 db    ? ;
.bss:00000000002112AB                 db    ? ;
.bss:00000000002112AC                 db    ? ;
.bss:00000000002112AD                 db    ? ;
.bss:00000000002112AE                 db    ? ;
.bss:00000000002112AF                 db    ? ;
.bss:00000000002112B0                 db    ? ;
.bss:00000000002112B1                 db    ? ;
.bss:00000000002112B2                 db    ? ;
.bss:00000000002112B3                 db    ? ;
.bss:00000000002112B4                 db    ? ;
.bss:00000000002112B5                 db    ? ;
.bss:00000000002112B6                 db    ? ;
.bss:00000000002112B7                 db    ? ;
.bss:00000000002112B8                 db    ? ;
.bss:00000000002112B9                 db    ? ;
.bss:00000000002112BA                 db    ? ;
.bss:00000000002112BB                 db    ? ;
.bss:00000000002112BC                 db    ? ;
.bss:00000000002112BD                 db    ? ;
.bss:00000000002112BE                 db    ? ;
.bss:00000000002112BF                 db    ? ;
.bss:00000000002112C0                 db    ? ;
.bss:00000000002112C1                 db    ? ;
.bss:00000000002112C2                 db    ? ;
.bss:00000000002112C3                 db    ? ;
.bss:00000000002112C4                 db    ? ;
.bss:00000000002112C5                 db    ? ;
.bss:00000000002112C6                 db    ? ;
.bss:00000000002112C7                 db    ? ;
.bss:00000000002112C8                 db    ? ;
.bss:00000000002112C9                 db    ? ;
.bss:00000000002112CA                 db    ? ;
.bss:00000000002112CB                 db    ? ;
.bss:00000000002112CC                 db    ? ;
.bss:00000000002112CD                 db    ? ;
.bss:00000000002112CE                 db    ? ;
.bss:00000000002112CF                 db    ? ;
.bss:00000000002112D0                 db    ? ;
.bss:00000000002112D1                 db    ? ;
.bss:00000000002112D2                 db    ? ;
.bss:00000000002112D3                 db    ? ;
.bss:00000000002112D4                 db    ? ;
.bss:00000000002112D5                 db    ? ;
.bss:00000000002112D6                 db    ? ;
.bss:00000000002112D7                 db    ? ;
.bss:00000000002112D8                 db    ? ;
.bss:00000000002112D9                 db    ? ;
.bss:00000000002112DA                 db    ? ;
.bss:00000000002112DB                 db    ? ;
.bss:00000000002112DC                 db    ? ;
.bss:00000000002112DD                 db    ? ;
.bss:00000000002112DE                 db    ? ;
.bss:00000000002112DF                 db    ? ;
.bss:00000000002112E0                 db    ? ;
.bss:00000000002112E1                 db    ? ;
.bss:00000000002112E2                 db    ? ;
.bss:00000000002112E3                 db    ? ;
.bss:00000000002112E4                 db    ? ;
.bss:00000000002112E5                 db    ? ;
.bss:00000000002112E6                 db    ? ;
.bss:00000000002112E7                 db    ? ;
.bss:00000000002112E8                 db    ? ;
.bss:00000000002112E9                 db    ? ;
.bss:00000000002112EA                 db    ? ;
.bss:00000000002112EB                 db    ? ;
.bss:00000000002112EC                 db    ? ;
.bss:00000000002112ED                 db    ? ;
.bss:00000000002112EE                 db    ? ;
.bss:00000000002112EF                 db    ? ;
.bss:00000000002112F0                 db    ? ;
.bss:00000000002112F1                 db    ? ;
.bss:00000000002112F2                 db    ? ;
.bss:00000000002112F3                 db    ? ;
.bss:00000000002112F4                 db    ? ;
.bss:00000000002112F5                 db    ? ;
.bss:00000000002112F6                 db    ? ;
.bss:00000000002112F7                 db    ? ;
.bss:00000000002112F8                 db    ? ;
.bss:00000000002112F9                 db    ? ;
.bss:00000000002112FA                 db    ? ;
.bss:00000000002112FB                 db    ? ;
.bss:00000000002112FC                 db    ? ;
.bss:00000000002112FD                 db    ? ;
.bss:00000000002112FE                 db    ? ;
.bss:00000000002112FF                 db    ? ;
.bss:0000000000211300                 db    ? ;
.bss:0000000000211301                 db    ? ;
.bss:0000000000211302                 db    ? ;
.bss:0000000000211303                 db    ? ;
.bss:0000000000211304                 db    ? ;
.bss:0000000000211305                 db    ? ;
.bss:0000000000211306                 db    ? ;
.bss:0000000000211307                 db    ? ;
.bss:0000000000211308                 db    ? ;
.bss:0000000000211309                 db    ? ;
.bss:000000000021130A                 db    ? ;
.bss:000000000021130B                 db    ? ;
.bss:000000000021130C                 db    ? ;
.bss:000000000021130D                 db    ? ;
.bss:000000000021130E                 db    ? ;
.bss:000000000021130F                 db    ? ;
.bss:0000000000211310                 db    ? ;
.bss:0000000000211311                 db    ? ;
.bss:0000000000211312                 db    ? ;
.bss:0000000000211313                 db    ? ;
.bss:0000000000211314                 db    ? ;
.bss:0000000000211315                 db    ? ;
.bss:0000000000211316                 db    ? ;
.bss:0000000000211317                 db    ? ;
.bss:0000000000211318                 db    ? ;
.bss:0000000000211319                 db    ? ;
.bss:000000000021131A                 db    ? ;
.bss:000000000021131B                 db    ? ;
.bss:000000000021131C                 db    ? ;
.bss:000000000021131D                 db    ? ;
.bss:000000000021131E                 db    ? ;
.bss:000000000021131F                 db    ? ;
.bss:0000000000211320                 db    ? ;
.bss:0000000000211321                 db    ? ;
.bss:0000000000211322                 db    ? ;
.bss:0000000000211323                 db    ? ;
.bss:0000000000211324                 db    ? ;
.bss:0000000000211325                 db    ? ;
.bss:0000000000211326                 db    ? ;
.bss:0000000000211327                 db    ? ;
.bss:0000000000211328                 db    ? ;
.bss:0000000000211329                 db    ? ;
.bss:000000000021132A                 db    ? ;
.bss:000000000021132B                 db    ? ;
.bss:000000000021132C                 db    ? ;
.bss:000000000021132D                 db    ? ;
.bss:000000000021132E                 db    ? ;
.bss:000000000021132F                 db    ? ;
.bss:0000000000211330                 db    ? ;
.bss:0000000000211331                 db    ? ;
.bss:0000000000211332                 db    ? ;
.bss:0000000000211333                 db    ? ;
.bss:0000000000211334                 db    ? ;
.bss:0000000000211335                 db    ? ;
.bss:0000000000211336                 db    ? ;
.bss:0000000000211337                 db    ? ;
.bss:0000000000211338                 db    ? ;
.bss:0000000000211339                 db    ? ;
.bss:000000000021133A                 db    ? ;
.bss:000000000021133B                 db    ? ;
.bss:000000000021133C                 db    ? ;
.bss:000000000021133D                 db    ? ;
.bss:000000000021133E                 db    ? ;
.bss:000000000021133F                 db    ? ;
.bss:0000000000211340                 db    ? ;
.bss:0000000000211341                 db    ? ;
.bss:0000000000211342                 db    ? ;
.bss:0000000000211343                 db    ? ;
.bss:0000000000211344                 db    ? ;
.bss:0000000000211345                 db    ? ;
.bss:0000000000211346                 db    ? ;
.bss:0000000000211347                 db    ? ;
.bss:0000000000211348                 db    ? ;
.bss:0000000000211349                 db    ? ;
.bss:000000000021134A                 db    ? ;
.bss:000000000021134B                 db    ? ;
.bss:000000000021134C                 db    ? ;
.bss:000000000021134D                 db    ? ;
.bss:000000000021134E                 db    ? ;
.bss:000000000021134F                 db    ? ;
.bss:0000000000211350                 db    ? ;
.bss:0000000000211351                 db    ? ;
.bss:0000000000211352                 db    ? ;
.bss:0000000000211353                 db    ? ;
.bss:0000000000211354                 db    ? ;
.bss:0000000000211355                 db    ? ;
.bss:0000000000211356                 db    ? ;
.bss:0000000000211357                 db    ? ;
.bss:0000000000211358                 db    ? ;
.bss:0000000000211359                 db    ? ;
.bss:000000000021135A                 db    ? ;
.bss:000000000021135B                 db    ? ;
.bss:000000000021135C                 db    ? ;
.bss:000000000021135D                 db    ? ;
.bss:000000000021135E                 db    ? ;
.bss:000000000021135F                 db    ? ;
.bss:0000000000211360 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000211360                                         ; get_quoting_style↑o ...
.bss:0000000000211370 xmmword_211370  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000211370                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000211380 xmmword_211380  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000211380                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000211390 qword_211390    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000211390                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000211398 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:0000000000211398                                         ; rpl_fcntl:loc_B44F↑w ...
.bss:000000000021139C                 align 20h
.bss:000000000021139C _bss            ends
.bss:000000000021139C
.prgend:00000000002113A0 ; ===========================================================================
.prgend:00000000002113A0
.prgend:00000000002113A0 ; Segment type: Zero-length
.prgend:00000000002113A0 _prgend         segment byte public '' use64
.prgend:00000000002113A0 _end            label byte
.prgend:00000000002113A0 _prgend         ends
.prgend:00000000002113A0
extern:00000000002113A8 ; ===========================================================================
extern:00000000002113A8
extern:00000000002113A8 ; Segment type: Externs
extern:00000000002113A8 ; extern
extern:00000000002113A8 ; const __int32_t **_ctype_toupper_loc(void)
extern:00000000002113A8                 extrn __ctype_toupper_loc:near
extern:00000000002113A8                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:00000000002113A8                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:00000000002113B0 ; int _uflow(_IO_FILE *)
extern:00000000002113B0                 extrn __uflow:near      ; CODE XREF: ___uflow↑j
extern:00000000002113B0                                         ; DATA XREF: .got:__uflow_ptr↑o
extern:00000000002113B8 ; char *getenv(const char *name)
extern:00000000002113B8                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:00000000002113B8                                         ; DATA XREF: .got:getenv_ptr↑o
extern:00000000002113C0 ; void free(void *ptr)
extern:00000000002113C0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002113C0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002113C8 ; void __noreturn abort(void)
extern:00000000002113C8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002113C8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002113D0 ; int *_errno_location(void)
extern:00000000002113D0                 extrn __errno_location:near
extern:00000000002113D0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002113D0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002113D8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002113D8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002113D8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002113E0 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:00000000002113E0                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:00000000002113E0                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:00000000002113E8 ; void __noreturn exit(int status)
extern:00000000002113E8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002113E8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002113F0 ; size_t _fpending(FILE *fp)
extern:00000000002113F0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002113F0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002113F8 ; int iswcntrl(wint_t wc)
extern:00000000002113F8                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:00000000002113F8                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:0000000000211400 ; int fcntl(int fd, int cmd, ...)
extern:0000000000211400                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:0000000000211400                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:0000000000211408 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:0000000000211408                 extrn clock_gettime:near
extern:0000000000211408                                         ; CODE XREF: _clock_gettime↑j
extern:0000000000211408                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:0000000000211410 ; int setenv(const char *name, const char *value, int replace)
extern:0000000000211410                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:0000000000211410                                         ; DATA XREF: .got:setenv_ptr↑o
extern:0000000000211418 ; char *textdomain(const char *domainname)
extern:0000000000211418                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000211418                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000211420 ; __int64 _strtol_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000211420                 extrn __strtol_internal:near
extern:0000000000211420                                         ; CODE XREF: ___strtol_internal↑j
extern:0000000000211420                                         ; DATA XREF: .got:__strtol_internal_ptr↑o
extern:0000000000211428 ; int fclose(FILE *stream)
extern:0000000000211428                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000211428                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000211430 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000211430                 extrn bindtextdomain:near
extern:0000000000211430                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000211430                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000211438 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000211438                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000211438                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000211440 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000211440                 extrn __ctype_get_mb_cur_max:near
extern:0000000000211440                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000211440                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000211448 ; size_t strlen(const char *s)
extern:0000000000211448                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000211448                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000211450                 extrn __stack_chk_fail:near
extern:0000000000211450                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000211450                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000211458 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000211458                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000211458                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000211460 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000211460                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000211460                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000211468 ; char *strchr(const char *s, int c)
extern:0000000000211468                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000211468                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000211470 ; int _overflow(_IO_FILE *, int)
extern:0000000000211470                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000211470                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000211478 ; char *strrchr(const char *s, int c)
extern:0000000000211478                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000211478                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000211480 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:0000000000211480                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:0000000000211480                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:0000000000211488 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000211488                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000211488                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000211490 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000211490                 extrn __assert_fail:near
extern:0000000000211490                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000211490                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000211498 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:0000000000211498                 extrn __strtoul_internal:near
extern:0000000000211498                                         ; CODE XREF: ___strtoul_internal↑j
extern:0000000000211498                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:00000000002114A0 ; void *memset(void *s, int c, size_t n)
extern:00000000002114A0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002114A0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002114A8 ; int close(int fd)
extern:00000000002114A8                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002114A8                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002114B0 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:00000000002114B0                 extrn posix_fadvise:near
extern:00000000002114B0                                         ; CODE XREF: _posix_fadvise↑j
extern:00000000002114B0                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:00000000002114B8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002114B8                 extrn __libc_start_main:near
extern:00000000002114B8                                         ; CODE XREF: start+24↑p
extern:00000000002114B8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002114C0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002114C0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002114C0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002114C8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002114C8                 extrn fputs_unlocked:near
extern:00000000002114C8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002114C8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002114D0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002114D0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002114D0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002114D8 ; int strcmp(const char *s1, const char *s2)
extern:00000000002114D8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002114D8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002114E0 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:00000000002114E0                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:00000000002114E0                                         ; DATA XREF: .got:strtol_ptr↑o
extern:00000000002114E8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002114E8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002114E8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002114F0 ; void tzset(void)
extern:00000000002114F0                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:00000000002114F0                                         ; DATA XREF: .got:tzset_ptr↑o
extern:00000000002114F8 ; int fileno(FILE *stream)
extern:00000000002114F8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002114F8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000211500 ; int wcwidth(wchar_t c)
extern:0000000000211500                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:0000000000211500                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:0000000000211508 ; void *malloc(size_t size)
extern:0000000000211508                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000211508                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000211510 ; int fflush(FILE *stream)
extern:0000000000211510                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000211510                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000211518 ; char *nl_langinfo(nl_item item)
extern:0000000000211518                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000211518                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000211520 ; int ungetc(int c, FILE *stream)
extern:0000000000211520                 extrn ungetc:near       ; CODE XREF: _ungetc↑j
extern:0000000000211520                                         ; DATA XREF: .got:ungetc_ptr↑o
extern:0000000000211528 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:0000000000211528                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:0000000000211528                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:0000000000211530 ; time_t mktime(struct tm *tp)
extern:0000000000211530                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:0000000000211530                                         ; DATA XREF: .got:mktime_ptr↑o
extern:0000000000211538 ; int _freading(FILE *fp)
extern:0000000000211538                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000211538                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000211540 ; void *realloc(void *ptr, size_t size)
extern:0000000000211540                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000211540                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000211548 ; FILE *fdopen(int fd, const char *modes)
extern:0000000000211548                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:0000000000211548                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:0000000000211550 ; char *setlocale(int category, const char *locale)
extern:0000000000211550                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000211550                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000211558                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000211558                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000211560 ; time_t timegm(struct tm *tp)
extern:0000000000211560                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:0000000000211560                                         ; DATA XREF: .got:timegm_ptr↑o
extern:0000000000211568 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000211568                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000211568                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000211570 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000211570                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000211570                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000211578 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000211578                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000211578                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000211580 ; FILE *fopen(const char *filename, const char *modes)
extern:0000000000211580                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:0000000000211580                                         ; DATA XREF: .got:fopen_ptr↑o
extern:0000000000211588 ; int unsetenv(const char *name)
extern:0000000000211588                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:0000000000211588                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:0000000000211590 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000211590                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000211590                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000211598 ; void __noreturn exit(int status)
extern:0000000000211598                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000211598                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002115A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002115A0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002115A0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002115A8                 extrn __fprintf_chk:near
extern:00000000002115A8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002115A8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002115B0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002115B0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002115B0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002115B8 ; int iswprint(wint_t wc)
extern:00000000002115B8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002115B8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002115C0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002115C0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002115C0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002115C0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002115C8 ; const __int32_t **_ctype_tolower_loc(void)
extern:00000000002115C8                 extrn __ctype_tolower_loc:near
extern:00000000002115C8                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:00000000002115C8                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:00000000002115D0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002115D0                 extrn __ctype_b_loc:near
extern:00000000002115D0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002115D0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002115D8                 extrn __sprintf_chk:near
extern:00000000002115D8                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002115D8                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002115E0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002115E0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002115E8                 extrn __gmon_start__:near ; weak
extern:00000000002115E8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002115E8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002115F0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002115F0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002115F0
extern:00000000002115F0
extern:00000000002115F0                 end start
