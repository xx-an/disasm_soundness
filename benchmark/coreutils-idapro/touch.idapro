LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : E4395323BDB24C72EE598CAAEF3F7E88C8C0D880843AEF638F248FAA72B686F3
LOAD:0000000000000000 ; Input MD5    : A4EDED208270DED0CD7D885C1A9B535B
LOAD:0000000000000000 ; Input CRC32  : 80BB1C57
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/touch
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'parse-datetime.c'
LOAD:0000000000000000 ; Source File : 'touch.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fd-reopen.c'
LOAD:0000000000000000 ; Source File : 'fdutimensat.c'
LOAD:0000000000000000 ; Source File : 'gettime.c'
LOAD:0000000000000000 ; Source File : 'posixtm.c'
LOAD:0000000000000000 ; Source File : 'posixver.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'time_rz.c'
LOAD:0000000000000000 ; Source File : 'vfprintf.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'nstrftime.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'fseterr.c'
LOAD:0000000000000000 ; Source File : 'vasnprintf.c'
LOAD:0000000000000000 ; Source File : 'printf-args.c'
LOAD:0000000000000000 ; Source File : 'printf-parse.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 59580h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 13A88h               ; Size in file image
LOAD:00000000000000D8                 dq 13A88h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 140F0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 2140F0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 0FB0h                ; Size in file image
LOAD:0000000000000110                 dq 11A8h                ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 14B98h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 214B98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 121ECh               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 121ECh               ; Physical address
LOAD:00000000000001B0                 dq 3B4h                 ; Size in file image
LOAD:00000000000001B8                 dq 3B4h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 140F0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 2140F0h              ; Physical address
LOAD:0000000000000220                 dq 0F10h                ; Size in file image
LOAD:0000000000000228                 dq 0F10h                ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 51h, 98h, 0A8h, 9Ah, 0F0h, 74h, 0C2h, 82h, 0F0h, 0BAh ; Desc
LOAD:0000000000000284                 db 0AFh, 0DFh, 0C4h, 7Ch, 91h, 29h, 3Eh, 94h, 2Ch, 1Fh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 4Dh, 4Eh, 53h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aCtypeToupperLo - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aGetenv - offset byte_AD8, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aSnprintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__snprintf_chk"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aFree - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aUtimensat - offset byte_AD8, 12h, 0, 0, \ ; "utimensat"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aLocaltime - offset byte_AD8, 12h, 0, 0, \ ; "localtime"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aAbort - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aErrnoLocation - offset byte_AD8, 12h, 0, 0, \ ; "__errno_location"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aStrncmp - offset byte_AD8, 12h, 0, 0, \ ; "strncmp"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aItmDeregistert - offset byte_AD8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aLocaltimeR - offset byte_AD8, 12h, 0, 0, \ ; "localtime_r"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aExit - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000400                            0>
LOAD:0000000000000418                 Elf64_Sym <offset aFpending - offset byte_AD8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aClockGettime - offset byte_AD8, 12h, 0, 0, \ ; "clock_gettime"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aUnsetenv+2 - offset byte_AD8, 12h, 0, 0, \ ; "setenv"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_AD8, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aFclose - offset byte_AD8, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aBindtextdomain - offset byte_AD8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aDcgettext - offset byte_AD8, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aStrlen - offset byte_AD8, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aLxstat - offset byte_AD8, 12h, 0, 0, \ ; "__lxstat"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aStackChkFail - offset byte_AD8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGetoptLong - offset byte_AD8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMbrtowc - offset byte_AD8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aDup2 - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "dup2"
LOAD:0000000000000550                            0>
LOAD:0000000000000568                 Elf64_Sym <offset aStrchr - offset byte_AD8, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aSnprintf - offset byte_AD8, 12h, 0, 0, \ ; "snprintf"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aOverflow - offset byte_AD8, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aStrrchr - offset byte_AD8, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmtimeR - offset byte_AD8, 12h, 0, 0, \ ; "gmtime_r"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aLseek - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000005E0                            0>
LOAD:00000000000005F8                 Elf64_Sym <offset aAssertFail - offset byte_AD8, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aFputs - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "fputs"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemset - offset byte_AD8, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFclose+1 - offset byte_AD8, 12h, 0, 0, \ ; "close"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aFputc - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "fputc"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aLibcStartMain - offset byte_AD8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aMemcmp - offset byte_AD8, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFputsUnlocked - offset byte_AD8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aCalloc - offset byte_AD8, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aStrcmp - offset byte_AD8, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aGmonStart - offset byte_AD8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aStrtol - offset byte_AD8, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aMemcpy - offset byte_AD8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aTzset - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "tzset"
LOAD:0000000000000730                            0>
LOAD:0000000000000748                 Elf64_Sym <offset aStrftime+4 - offset byte_AD8, 12h, 0, 0, \ ; "time"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFileno - offset byte_AD8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aStpcpyChk - offset byte_AD8, 12h, 0, 0, \ ; "__stpcpy_chk"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aXstat - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:0000000000000790                            0>
LOAD:00000000000007A8                 Elf64_Sym <offset aMalloc - offset byte_AD8, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFflush - offset byte_AD8, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aNlLanginfo - offset byte_AD8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aMktime - offset byte_AD8, 12h, 0, 0, \ ; "mktime"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aFreading - offset byte_AD8, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aRealloc - offset byte_AD8, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aSetlocale - offset byte_AD8, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aPrintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aTimegm - offset byte_AD8, 12h, 0, 0, \ ; "timegm"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aStrftime - offset byte_AD8, 12h, 0, 0, \ ; "strftime"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aError - offset byte_AD8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aOpen - offset byte_AD8, 12h, 0, 0, offset dword_0, \ ; "open"
LOAD:00000000000008B0                            0>
LOAD:00000000000008C8                 Elf64_Sym <offset aFseeko - offset byte_AD8, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aUnsetenv - offset byte_AD8, 12h, 0, 0, \ ; "unsetenv"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aFutimens - offset byte_AD8, 12h, 0, 0, \ ; "futimens"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aCxaAtexit - offset byte_AD8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aExit+1 - offset byte_AD8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aFwrite - offset byte_AD8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFprintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aItmRegistertmc - offset byte_AD8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aMbsinit - offset byte_AD8, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aIswprint - offset byte_AD8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aCxaFinalize - offset byte_AD8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aCtypeBLoc - offset byte_AD8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aSprintfChk - offset byte_AD8, 12h, 0, 0, \ ; "__sprintf_chk"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aStdout - offset byte_AD8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A18                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aProgname - offset byte_AD8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A30                            offset __bss_start, 8>
LOAD:0000000000000A48                 Elf64_Sym <offset aProgramInvocat - offset byte_AD8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A48                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A60                 Elf64_Sym <offset aPrognameFull - offset byte_AD8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000A60                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_AD8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000A78                            offset __bss_start, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aStderr - offset byte_AD8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000A90                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000AA8                 Elf64_Sym <offset aOptind - offset byte_AD8, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000AA8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000AC0                 Elf64_Sym <offset aOptarg - offset byte_AD8, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000AC0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD8 ; ELF String Table
LOAD:0000000000000AD8 byte_AD8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000AD8                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000AD9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000F38↓o
LOAD:0000000000000AE3 aStpcpyChk      db '__stpcpy_chk',0     ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000AF0 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000AF7 aGmtimeR        db 'gmtime_r',0         ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B00 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000B0D aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B17 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000B1F aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B27 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000B2E aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000B36 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000B40 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000B46 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000B57 aLxstat         db '__lxstat',0         ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000B60 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000B69 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000B71 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B77 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B77                                         ; LOAD:0000000000000928↑o
LOAD:0000000000000B7D aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000B7D                                         ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000B95 aStrftime       db 'strftime',0         ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B95                                         ; LOAD:0000000000000748↑o
LOAD:0000000000000B9E aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000BAC aLocaltimeR     db 'localtime_r',0      ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000BB8 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000BB8                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000BCF aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000BD6 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000BDD aFutimens       db 'futimens',0         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000BE6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000BED aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000BF4 aUtimensat      db 'utimensat',0        ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000BFE aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C0F aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000C16 aDup2           db 'dup2',0             ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000C1B aUnsetenv       db 'unsetenv',0         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C1B                                         ; LOAD:0000000000000448↑o
LOAD:0000000000000C24 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C32 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000C39 aFputc          db 'fputc',0            ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000C3F aFputs          db 'fputs',0            ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C45 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000C4B aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000C52 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000C52                                         ; LOAD:0000000000000640↑o
LOAD:0000000000000C59 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C60 aTimegm         db 'timegm',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000C67 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000C6F aTzset          db 'tzset',0            ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000C75 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000C81 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000C8F aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000C96 aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000C9D aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000CA8 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000CAF aSnprintfChk    db '__snprintf_chk',0   ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000CBE aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000CCA aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000CD1 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000CD8 aClockGettime   db 'clock_gettime',0    ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000CE6 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000CF1 aOpen           db 'open',0             ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000CF6 aLocaltime      db 'localtime',0        ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000D00 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000D07 aMktime         db 'mktime',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000D0E aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D0E                                         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000D2C aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000D2C                                         ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000D40 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000D40                                         ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000D54 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000D63 aSprintfChk     db '__sprintf_chk',0    ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000D71 aXstat          db '__xstat',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000D79 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000D79                                         ; LOAD:0000000000000460↑o
LOAD:0000000000000D88 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000D8F aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000D8F                                         ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000DA1 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000DA8 aSnprintf       db 'snprintf',0         ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000DB1 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000DBC aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000DCB aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000DD0 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000DDB aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000DEB aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000DF8 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000F48↓o
LOAD:0000000000000E03 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000F58↓o
LOAD:0000000000000E0D aGlibc217       db 'GLIBC_2.17',0       ; DATA XREF: LOAD:0000000000000F68↓o
LOAD:0000000000000E18 aGlibc26        db 'GLIBC_2.6',0        ; DATA XREF: LOAD:0000000000000F78↓o
LOAD:0000000000000E22 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000F88↓o
LOAD:0000000000000E2E aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000F98↓o
LOAD:0000000000000E3A aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000FA8↓o
LOAD:0000000000000E44 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000E44                                         ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000E60 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000E6F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000E6F                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000E89                 align 2
LOAD:0000000000000E8A ; ELF GNU Symbol Version Table
LOAD:0000000000000E8A                 dw 0
LOAD:0000000000000E8C                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000E8E                 dw 3                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000E90                 dw 4                    ; __snprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000E92                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000E94                 dw 5                    ; utimensat@@GLIBC_2.6
LOAD:0000000000000E96                 dw 3                    ; localtime@@GLIBC_2.2.5
LOAD:0000000000000E98                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000E9A                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000E9C                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000E9E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000EA0                 dw 3                    ; localtime_r@@GLIBC_2.2.5
LOAD:0000000000000EA2                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000EA4                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000EA6                 dw 6                    ; clock_gettime@@GLIBC_2.17
LOAD:0000000000000EA8                 dw 3                    ; setenv@@GLIBC_2.2.5
LOAD:0000000000000EAA                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000EAC                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000EAE                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000EB0                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000EB2                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000EB4                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000EB6                 dw 3                    ; __lxstat@@GLIBC_2.2.5
LOAD:0000000000000EB8                 dw 7                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000EBA                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000EBC                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000EBE                 dw 3                    ; dup2@@GLIBC_2.2.5
LOAD:0000000000000EC0                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000EC2                 dw 3                    ; snprintf@@GLIBC_2.2.5
LOAD:0000000000000EC4                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000EC6                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000EC8                 dw 3                    ; gmtime_r@@GLIBC_2.2.5
LOAD:0000000000000ECA                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000ECC                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000ECE                 dw 3                    ; fputs@@GLIBC_2.2.5
LOAD:0000000000000ED0                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000ED2                 dw 3                    ; close@@GLIBC_2.2.5
LOAD:0000000000000ED4                 dw 3                    ; fputc@@GLIBC_2.2.5
LOAD:0000000000000ED6                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000ED8                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000EDA                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000EDC                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000EDE                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000EE0                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000EE2                 dw 3                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000EE4                 dw 8                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000EE6                 dw 3                    ; tzset@@GLIBC_2.2.5
LOAD:0000000000000EE8                 dw 3                    ; time@@GLIBC_2.2.5
LOAD:0000000000000EEA                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000EEC                 dw 4                    ; __stpcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000EEE                 dw 3                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000EF0                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000EF2                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000EF4                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000EF6                 dw 3                    ; mktime@@GLIBC_2.2.5
LOAD:0000000000000EF8                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000EFA                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000EFC                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000EFE                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F00                 dw 3                    ; timegm@@GLIBC_2.2.5
LOAD:0000000000000F02                 dw 3                    ; strftime@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F06                 dw 3                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F08                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 3                    ; unsetenv@@GLIBC_2.2.5
LOAD:0000000000000F0C                 dw 5                    ; futimens@@GLIBC_2.6
LOAD:0000000000000F0E                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F10                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F16                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F18                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000F20                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F22                 dw 4                    ; __sprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F24                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000F2C                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 3                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 0
LOAD:0000000000000F36                 dw 0
LOAD:0000000000000F38 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000F38                 Elf64_Verneed <1, 7, offset aLibcSo6 - offset byte_AD8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000F48                 Elf64_Vernaux <6969194h, 0, 8, offset aGlibc214 - offset byte_AD8, \ ; "GLIBC_2.14"
LOAD:0000000000000F48                                10h>
LOAD:0000000000000F58                 Elf64_Vernaux <0D696914h, 0, 7, offset aGlibc24 - offset byte_AD8, \ ; "GLIBC_2.4"
LOAD:0000000000000F58                                10h>
LOAD:0000000000000F68                 Elf64_Vernaux <6969197h, 0, 6, offset aGlibc217 - offset byte_AD8, \ ; "GLIBC_2.17"
LOAD:0000000000000F68                                10h>
LOAD:0000000000000F78                 Elf64_Vernaux <0D696916h, 0, 5, offset aGlibc26 - offset byte_AD8, \ ; "GLIBC_2.6"
LOAD:0000000000000F78                                10h>
LOAD:0000000000000F88                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_AD8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000F88                                10h>
LOAD:0000000000000F98                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_AD8, \ ; "GLIBC_2.2.5"
LOAD:0000000000000F98                                10h>
LOAD:0000000000000FA8                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_AD8, 0> ; "GLIBC_2.3"
LOAD:0000000000000FB8 ; ELF RELA Relocation Table
LOAD:0000000000000FB8                 Elf64_Rela <2140F0h, 8, 3630h> ; R_X86_64_RELATIVE +3630h
LOAD:0000000000000FD0                 Elf64_Rela <2140F8h, 8, 35F0h> ; R_X86_64_RELATIVE +35F0h
LOAD:0000000000000FE8                 Elf64_Rela <214100h, 8, 0F8E4h> ; R_X86_64_RELATIVE +0F8E4h
LOAD:0000000000001000                 Elf64_Rela <214108h, 8, 0F8EAh> ; R_X86_64_RELATIVE +0F8EAh
LOAD:0000000000001018                 Elf64_Rela <214110h, 8, 0F8F1h> ; R_X86_64_RELATIVE +0F8F1h
LOAD:0000000000001030                 Elf64_Rela <214118h, 8, 0F8F5h> ; R_X86_64_RELATIVE +0F8F5h
LOAD:0000000000001048                 Elf64_Rela <214120h, 8, 0F8FBh> ; R_X86_64_RELATIVE +0F8FBh
LOAD:0000000000001060                 Elf64_Rela <214140h, 8, 0F7FEh> ; R_X86_64_RELATIVE +0F7FEh
LOAD:0000000000001078                 Elf64_Rela <214160h, 8, 0F902h> ; R_X86_64_RELATIVE +0F902h
LOAD:0000000000001090                 Elf64_Rela <214180h, 8, 0F90Ch> ; R_X86_64_RELATIVE +0F90Ch
LOAD:00000000000010A8                 Elf64_Rela <2141A0h, 8, 0F916h> ; R_X86_64_RELATIVE +0F916h
LOAD:00000000000010C0                 Elf64_Rela <2141C0h, 8, 0F911h> ; R_X86_64_RELATIVE +0F911h
LOAD:00000000000010D8                 Elf64_Rela <2141E0h, 8, 0F920h> ; R_X86_64_RELATIVE +0F920h
LOAD:00000000000010F0                 Elf64_Rela <214200h, 8, 0F925h> ; R_X86_64_RELATIVE +0F925h
LOAD:0000000000001108                 Elf64_Rela <214240h, 8, 101DFh> ; R_X86_64_RELATIVE +101DFh
LOAD:0000000000001120                 Elf64_Rela <214250h, 8, 104D7h> ; R_X86_64_RELATIVE +104D7h
LOAD:0000000000001138                 Elf64_Rela <214260h, 8, 10644h> ; R_X86_64_RELATIVE +10644h
LOAD:0000000000001150                 Elf64_Rela <214270h, 8, 10640h> ; R_X86_64_RELATIVE +10640h
LOAD:0000000000001168                 Elf64_Rela <214280h, 8, 10614h> ; R_X86_64_RELATIVE +10614h
LOAD:0000000000001180                 Elf64_Rela <214290h, 8, 104D9h> ; R_X86_64_RELATIVE +104D9h
LOAD:0000000000001198                 Elf64_Rela <2142A0h, 8, 104DBh> ; R_X86_64_RELATIVE +104DBh
LOAD:00000000000011B0                 Elf64_Rela <2142B0h, 8, 10653h> ; R_X86_64_RELATIVE +10653h
LOAD:00000000000011C8                 Elf64_Rela <2142C0h, 8, 11DAAh> ; R_X86_64_RELATIVE +11DAAh
LOAD:00000000000011E0                 Elf64_Rela <2142D0h, 8, 10629h> ; R_X86_64_RELATIVE +10629h
LOAD:00000000000011F8                 Elf64_Rela <2142E0h, 8, 10659h> ; R_X86_64_RELATIVE +10659h
LOAD:0000000000001210                 Elf64_Rela <2142F0h, 8, 11DB0h> ; R_X86_64_RELATIVE +11DB0h
LOAD:0000000000001228                 Elf64_Rela <214300h, 8, 10639h> ; R_X86_64_RELATIVE +10639h
LOAD:0000000000001240                 Elf64_Rela <214310h, 8, 1060Eh> ; R_X86_64_RELATIVE +1060Eh
LOAD:0000000000001258                 Elf64_Rela <214320h, 8, 104DDh> ; R_X86_64_RELATIVE +104DDh
LOAD:0000000000001270                 Elf64_Rela <214330h, 8, 104DFh> ; R_X86_64_RELATIVE +104DFh
LOAD:0000000000001288                 Elf64_Rela <214340h, 8, 101D4h> ; R_X86_64_RELATIVE +101D4h
LOAD:00000000000012A0                 Elf64_Rela <214350h, 8, 1014Ch> ; R_X86_64_RELATIVE +1014Ch
LOAD:00000000000012B8                 Elf64_Rela <214360h, 8, 1056Eh> ; R_X86_64_RELATIVE +1056Eh
LOAD:00000000000012D0                 Elf64_Rela <214370h, 8, 104E1h> ; R_X86_64_RELATIVE +104E1h
LOAD:00000000000012E8                 Elf64_Rela <214380h, 8, 104E3h> ; R_X86_64_RELATIVE +104E3h
LOAD:0000000000001300                 Elf64_Rela <214390h, 8, 105B0h> ; R_X86_64_RELATIVE +105B0h
LOAD:0000000000001318                 Elf64_Rela <2143A0h, 8, 11DA4h> ; R_X86_64_RELATIVE +11DA4h
LOAD:0000000000001330                 Elf64_Rela <2143B0h, 8, 106DEh> ; R_X86_64_RELATIVE +106DEh
LOAD:0000000000001348                 Elf64_Rela <2143C0h, 8, 10557h> ; R_X86_64_RELATIVE +10557h
LOAD:0000000000001360                 Elf64_Rela <2143E0h, 8, 100DBh> ; R_X86_64_RELATIVE +100DBh
LOAD:0000000000001378                 Elf64_Rela <2143F0h, 8, 104E5h> ; R_X86_64_RELATIVE +104E5h
LOAD:0000000000001390                 Elf64_Rela <214400h, 8, 104EAh> ; R_X86_64_RELATIVE +104EAh
LOAD:00000000000013A8                 Elf64_Rela <214410h, 8, 104EEh> ; R_X86_64_RELATIVE +104EEh
LOAD:00000000000013C0                 Elf64_Rela <214420h, 8, 104F2h> ; R_X86_64_RELATIVE +104F2h
LOAD:00000000000013D8                 Elf64_Rela <214430h, 8, 104F6h> ; R_X86_64_RELATIVE +104F6h
LOAD:00000000000013F0                 Elf64_Rela <214440h, 8, 104FBh> ; R_X86_64_RELATIVE +104FBh
LOAD:0000000000001408                 Elf64_Rela <214450h, 8, 104FFh> ; R_X86_64_RELATIVE +104FFh
LOAD:0000000000001420                 Elf64_Rela <214460h, 8, 10537h> ; R_X86_64_RELATIVE +10537h
LOAD:0000000000001438                 Elf64_Rela <214470h, 8, 1053Ch> ; R_X86_64_RELATIVE +1053Ch
LOAD:0000000000001450                 Elf64_Rela <214480h, 8, 10503h> ; R_X86_64_RELATIVE +10503h
LOAD:0000000000001468                 Elf64_Rela <214490h, 8, 10507h> ; R_X86_64_RELATIVE +10507h
LOAD:0000000000001480                 Elf64_Rela <2144A0h, 8, 1054Dh> ; R_X86_64_RELATIVE +1054Dh
LOAD:0000000000001498                 Elf64_Rela <2144B0h, 8, 1050Ch> ; R_X86_64_RELATIVE +1050Ch
LOAD:00000000000014B0                 Elf64_Rela <2144C0h, 8, 10510h> ; R_X86_64_RELATIVE +10510h
LOAD:00000000000014C8                 Elf64_Rela <2144D0h, 8, 10514h> ; R_X86_64_RELATIVE +10514h
LOAD:00000000000014E0                 Elf64_Rela <2144E0h, 8, 10518h> ; R_X86_64_RELATIVE +10518h
LOAD:00000000000014F8                 Elf64_Rela <2144F0h, 8, 1051Ch> ; R_X86_64_RELATIVE +1051Ch
LOAD:0000000000001510                 Elf64_Rela <214500h, 8, 10520h> ; R_X86_64_RELATIVE +10520h
LOAD:0000000000001528                 Elf64_Rela <214510h, 8, 10524h> ; R_X86_64_RELATIVE +10524h
LOAD:0000000000001540                 Elf64_Rela <214520h, 8, 10528h> ; R_X86_64_RELATIVE +10528h
LOAD:0000000000001558                 Elf64_Rela <214530h, 8, 1052Dh> ; R_X86_64_RELATIVE +1052Dh
LOAD:0000000000001570                 Elf64_Rela <214540h, 8, 10532h> ; R_X86_64_RELATIVE +10532h
LOAD:0000000000001588                 Elf64_Rela <214550h, 8, 10536h> ; R_X86_64_RELATIVE +10536h
LOAD:00000000000015A0                 Elf64_Rela <214560h, 8, 1053Bh> ; R_X86_64_RELATIVE +1053Bh
LOAD:00000000000015B8                 Elf64_Rela <214570h, 8, 10540h> ; R_X86_64_RELATIVE +10540h
LOAD:00000000000015D0                 Elf64_Rela <214580h, 8, 10544h> ; R_X86_64_RELATIVE +10544h
LOAD:00000000000015E8                 Elf64_Rela <214590h, 8, 10548h> ; R_X86_64_RELATIVE +10548h
LOAD:0000000000001600                 Elf64_Rela <2145A0h, 8, 1054Ch> ; R_X86_64_RELATIVE +1054Ch
LOAD:0000000000001618                 Elf64_Rela <2145B0h, 8, 10551h> ; R_X86_64_RELATIVE +10551h
LOAD:0000000000001630                 Elf64_Rela <2145C0h, 8, 10555h> ; R_X86_64_RELATIVE +10555h
LOAD:0000000000001648                 Elf64_Rela <2145D0h, 8, 10559h> ; R_X86_64_RELATIVE +10559h
LOAD:0000000000001660                 Elf64_Rela <2145E0h, 8, 1055Eh> ; R_X86_64_RELATIVE +1055Eh
LOAD:0000000000001678                 Elf64_Rela <2145F0h, 8, 10563h> ; R_X86_64_RELATIVE +10563h
LOAD:0000000000001690                 Elf64_Rela <214600h, 8, 10567h> ; R_X86_64_RELATIVE +10567h
LOAD:00000000000016A8                 Elf64_Rela <214610h, 8, 1056Ch> ; R_X86_64_RELATIVE +1056Ch
LOAD:00000000000016C0                 Elf64_Rela <214620h, 8, 10570h> ; R_X86_64_RELATIVE +10570h
LOAD:00000000000016D8                 Elf64_Rela <214630h, 8, 10575h> ; R_X86_64_RELATIVE +10575h
LOAD:00000000000016F0                 Elf64_Rela <214640h, 8, 10579h> ; R_X86_64_RELATIVE +10579h
LOAD:0000000000001708                 Elf64_Rela <214650h, 8, 1057Dh> ; R_X86_64_RELATIVE +1057Dh
LOAD:0000000000001720                 Elf64_Rela <214660h, 8, 10581h> ; R_X86_64_RELATIVE +10581h
LOAD:0000000000001738                 Elf64_Rela <214670h, 8, 10585h> ; R_X86_64_RELATIVE +10585h
LOAD:0000000000001750                 Elf64_Rela <214680h, 8, 10529h> ; R_X86_64_RELATIVE +10529h
LOAD:0000000000001768                 Elf64_Rela <214690h, 8, 10589h> ; R_X86_64_RELATIVE +10589h
LOAD:0000000000001780                 Elf64_Rela <2146A0h, 8, 1058Dh> ; R_X86_64_RELATIVE +1058Dh
LOAD:0000000000001798                 Elf64_Rela <2146B0h, 8, 10591h> ; R_X86_64_RELATIVE +10591h
LOAD:00000000000017B0                 Elf64_Rela <2146C0h, 8, 10596h> ; R_X86_64_RELATIVE +10596h
LOAD:00000000000017C8                 Elf64_Rela <2146E0h, 8, 100D7h> ; R_X86_64_RELATIVE +100D7h
LOAD:00000000000017E0                 Elf64_Rela <2146F0h, 8, 1059Bh> ; R_X86_64_RELATIVE +1059Bh
LOAD:00000000000017F8                 Elf64_Rela <214700h, 8, 10286h> ; R_X86_64_RELATIVE +10286h
LOAD:0000000000001810                 Elf64_Rela <214720h, 8, 101D6h> ; R_X86_64_RELATIVE +101D6h
LOAD:0000000000001828                 Elf64_Rela <214730h, 8, 1059Eh> ; R_X86_64_RELATIVE +1059Eh
LOAD:0000000000001840                 Elf64_Rela <214740h, 8, 105A8h> ; R_X86_64_RELATIVE +105A8h
LOAD:0000000000001858                 Elf64_Rela <214750h, 8, 105AEh> ; R_X86_64_RELATIVE +105AEh
LOAD:0000000000001870                 Elf64_Rela <214760h, 8, 105B2h> ; R_X86_64_RELATIVE +105B2h
LOAD:0000000000001888                 Elf64_Rela <214770h, 8, 105B7h> ; R_X86_64_RELATIVE +105B7h
LOAD:00000000000018A0                 Elf64_Rela <214780h, 8, 105BCh> ; R_X86_64_RELATIVE +105BCh
LOAD:00000000000018B8                 Elf64_Rela <214790h, 8, 105C1h> ; R_X86_64_RELATIVE +105C1h
LOAD:00000000000018D0                 Elf64_Rela <2147A0h, 8, 105C7h> ; R_X86_64_RELATIVE +105C7h
LOAD:00000000000018E8                 Elf64_Rela <2147B0h, 8, 105CDh> ; R_X86_64_RELATIVE +105CDh
LOAD:0000000000001900                 Elf64_Rela <2147C0h, 8, 105D4h> ; R_X86_64_RELATIVE +105D4h
LOAD:0000000000001918                 Elf64_Rela <2147D0h, 8, 105DAh> ; R_X86_64_RELATIVE +105DAh
LOAD:0000000000001930                 Elf64_Rela <2147E0h, 8, 105E0h> ; R_X86_64_RELATIVE +105E0h
LOAD:0000000000001948                 Elf64_Rela <2147F0h, 8, 105E8h> ; R_X86_64_RELATIVE +105E8h
LOAD:0000000000001960                 Elf64_Rela <214800h, 8, 105EFh> ; R_X86_64_RELATIVE +105EFh
LOAD:0000000000001978                 Elf64_Rela <214810h, 8, 105F5h> ; R_X86_64_RELATIVE +105F5h
LOAD:0000000000001990                 Elf64_Rela <214820h, 8, 105FBh> ; R_X86_64_RELATIVE +105FBh
LOAD:00000000000019A8                 Elf64_Rela <214830h, 8, 10604h> ; R_X86_64_RELATIVE +10604h
LOAD:00000000000019C0                 Elf64_Rela <214840h, 8, 1060Ch> ; R_X86_64_RELATIVE +1060Ch
LOAD:00000000000019D8                 Elf64_Rela <214850h, 8, 10610h> ; R_X86_64_RELATIVE +10610h
LOAD:00000000000019F0                 Elf64_Rela <214880h, 8, 101D1h> ; R_X86_64_RELATIVE +101D1h
LOAD:0000000000001A08                 Elf64_Rela <214890h, 8, 10616h> ; R_X86_64_RELATIVE +10616h
LOAD:0000000000001A20                 Elf64_Rela <2148A0h, 8, 1061Ch> ; R_X86_64_RELATIVE +1061Ch
LOAD:0000000000001A38                 Elf64_Rela <2148B0h, 8, 10626h> ; R_X86_64_RELATIVE +10626h
LOAD:0000000000001A50                 Elf64_Rela <2148C0h, 8, 106DCh> ; R_X86_64_RELATIVE +106DCh
LOAD:0000000000001A68                 Elf64_Rela <2148D0h, 8, 1062Bh> ; R_X86_64_RELATIVE +1062Bh
LOAD:0000000000001A80                 Elf64_Rela <2148E0h, 8, 10630h> ; R_X86_64_RELATIVE +10630h
LOAD:0000000000001A98                 Elf64_Rela <2148F0h, 8, 10637h> ; R_X86_64_RELATIVE +10637h
LOAD:0000000000001AB0                 Elf64_Rela <214900h, 8, 1063Bh> ; R_X86_64_RELATIVE +1063Bh
LOAD:0000000000001AC8                 Elf64_Rela <214910h, 8, 10642h> ; R_X86_64_RELATIVE +10642h
LOAD:0000000000001AE0                 Elf64_Rela <214940h, 8, 101C9h> ; R_X86_64_RELATIVE +101C9h
LOAD:0000000000001AF8                 Elf64_Rela <214950h, 8, 10646h> ; R_X86_64_RELATIVE +10646h
LOAD:0000000000001B10                 Elf64_Rela <214960h, 8, 1064Fh> ; R_X86_64_RELATIVE +1064Fh
LOAD:0000000000001B28                 Elf64_Rela <214970h, 8, 10655h> ; R_X86_64_RELATIVE +10655h
LOAD:0000000000001B40                 Elf64_Rela <214980h, 8, 1065Bh> ; R_X86_64_RELATIVE +1065Bh
LOAD:0000000000001B58                 Elf64_Rela <214990h, 8, 1065Fh> ; R_X86_64_RELATIVE +1065Fh
LOAD:0000000000001B70                 Elf64_Rela <2149A0h, 8, 10664h> ; R_X86_64_RELATIVE +10664h
LOAD:0000000000001B88                 Elf64_Rela <2149B0h, 8, 10669h> ; R_X86_64_RELATIVE +10669h
LOAD:0000000000001BA0                 Elf64_Rela <2149C0h, 8, 10670h> ; R_X86_64_RELATIVE +10670h
LOAD:0000000000001BB8                 Elf64_Rela <2149D0h, 8, 1067Ah> ; R_X86_64_RELATIVE +1067Ah
LOAD:0000000000001BD0                 Elf64_Rela <2149E0h, 8, 1067Fh> ; R_X86_64_RELATIVE +1067Fh
LOAD:0000000000001BE8                 Elf64_Rela <2149F0h, 8, 10687h> ; R_X86_64_RELATIVE +10687h
LOAD:0000000000001C00                 Elf64_Rela <214A00h, 8, 10690h> ; R_X86_64_RELATIVE +10690h
LOAD:0000000000001C18                 Elf64_Rela <214A10h, 8, 10699h> ; R_X86_64_RELATIVE +10699h
LOAD:0000000000001C30                 Elf64_Rela <214A20h, 8, 106A0h> ; R_X86_64_RELATIVE +106A0h
LOAD:0000000000001C48                 Elf64_Rela <214A30h, 8, 106A7h> ; R_X86_64_RELATIVE +106A7h
LOAD:0000000000001C60                 Elf64_Rela <214A40h, 8, 106AFh> ; R_X86_64_RELATIVE +106AFh
LOAD:0000000000001C78                 Elf64_Rela <214A50h, 8, 106B4h> ; R_X86_64_RELATIVE +106B4h
LOAD:0000000000001C90                 Elf64_Rela <214A60h, 8, 106BEh> ; R_X86_64_RELATIVE +106BEh
LOAD:0000000000001CA8                 Elf64_Rela <214A70h, 8, 106C5h> ; R_X86_64_RELATIVE +106C5h
LOAD:0000000000001CC0                 Elf64_Rela <214A80h, 8, 106CEh> ; R_X86_64_RELATIVE +106CEh
LOAD:0000000000001CD8                 Elf64_Rela <214A90h, 8, 106D3h> ; R_X86_64_RELATIVE +106D3h
LOAD:0000000000001CF0                 Elf64_Rela <214AA0h, 8, 106D9h> ; R_X86_64_RELATIVE +106D9h
LOAD:0000000000001D08                 Elf64_Rela <214AB0h, 8, 106E0h> ; R_X86_64_RELATIVE +106E0h
LOAD:0000000000001D20                 Elf64_Rela <214AD0h, 8, 10156h> ; R_X86_64_RELATIVE +10156h
LOAD:0000000000001D38                 Elf64_Rela <214AE0h, 8, 101C6h> ; R_X86_64_RELATIVE +101C6h
LOAD:0000000000001D50                 Elf64_Rela <214AF0h, 8, 106E9h> ; R_X86_64_RELATIVE +106E9h
LOAD:0000000000001D68                 Elf64_Rela <214B00h, 8, 106EEh> ; R_X86_64_RELATIVE +106EEh
LOAD:0000000000001D80                 Elf64_Rela <214B10h, 8, 106F1h> ; R_X86_64_RELATIVE +106F1h
LOAD:0000000000001D98                 Elf64_Rela <214B40h, 8, 1155Fh> ; R_X86_64_RELATIVE +1155Fh
LOAD:0000000000001DB0                 Elf64_Rela <214B48h, 8, 11567h> ; R_X86_64_RELATIVE +11567h
LOAD:0000000000001DC8                 Elf64_Rela <214B50h, 8, 1156Dh> ; R_X86_64_RELATIVE +1156Dh
LOAD:0000000000001DE0                 Elf64_Rela <214B58h, 8, 1157Ah> ; R_X86_64_RELATIVE +1157Ah
LOAD:0000000000001DF8                 Elf64_Rela <214B60h, 8, 11587h> ; R_X86_64_RELATIVE +11587h
LOAD:0000000000001E10                 Elf64_Rela <214B68h, 8, 0F892h> ; R_X86_64_RELATIVE +0F892h
LOAD:0000000000001E28                 Elf64_Rela <214B70h, 8, 1159Bh> ; R_X86_64_RELATIVE +1159Bh
LOAD:0000000000001E40                 Elf64_Rela <214B78h, 8, 11580h> ; R_X86_64_RELATIVE +11580h
LOAD:0000000000001E58                 Elf64_Rela <214B80h, 8, 0F7F5h> ; R_X86_64_RELATIVE +0F7F5h
LOAD:0000000000001E70                 Elf64_Rela <214B88h, 8, 115A3h> ; R_X86_64_RELATIVE +115A3h
LOAD:0000000000001E88                 Elf64_Rela <215008h, 8, 215008h> ; R_X86_64_RELATIVE +215008h
LOAD:0000000000001EA0                 Elf64_Rela <215010h, 8, 10044h> ; R_X86_64_RELATIVE +10044h
LOAD:0000000000001EB8                 Elf64_Rela <215018h, 8, 3A90h> ; R_X86_64_RELATIVE +3A90h
LOAD:0000000000001ED0                 Elf64_Rela <215080h, 8, 215090h> ; R_X86_64_RELATIVE +215090h
LOAD:0000000000001EE8                 Elf64_Rela <215098h, 8, 215160h> ; R_X86_64_RELATIVE +215160h
LOAD:0000000000001F00                 Elf64_Rela <214FD8h, 0A00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001F18                 Elf64_Rela <214FE0h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001F30                 Elf64_Rela <214FE8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001F48                 Elf64_Rela <214FF0h, 4600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001F60                 Elf64_Rela <214FF8h, 4900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001F78                 Elf64_Rela <2150A0h, 4E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001F90                 Elf64_Rela <2150A8h, 4D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001FA8                 Elf64_Rela <2150B0h, 5300000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001FC0                 Elf64_Rela <2150B8h, 5400000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001FD8                 Elf64_Rela <2150C0h, 5000000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001FF0                 Elf64_Rela <2150E0h, 5200000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000002008 ; ELF JMPREL Relocation Table
LOAD:0000000000002008                 Elf64_Rela <214DA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000002020                 Elf64_Rela <214DA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:0000000000002038                 Elf64_Rela <214DB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __snprintf_chk
LOAD:0000000000002050                 Elf64_Rela <214DB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000002068                 Elf64_Rela <214DC0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT utimensat
LOAD:0000000000002080                 Elf64_Rela <214DC8h, 600000007h, 0> ; R_X86_64_JUMP_SLOT localtime
LOAD:0000000000002098                 Elf64_Rela <214DD0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000020B0                 Elf64_Rela <214DD8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000020C8                 Elf64_Rela <214DE0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000020E0                 Elf64_Rela <214DE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT localtime_r
LOAD:00000000000020F8                 Elf64_Rela <214DF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000002110                 Elf64_Rela <214DF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000002128                 Elf64_Rela <214E00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT clock_gettime
LOAD:0000000000002140                 Elf64_Rela <214E08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT setenv
LOAD:0000000000002158                 Elf64_Rela <214E10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000002170                 Elf64_Rela <214E18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000002188                 Elf64_Rela <214E20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000021A0                 Elf64_Rela <214E28h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000021B8                 Elf64_Rela <214E30h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000021D0                 Elf64_Rela <214E38h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000021E8                 Elf64_Rela <214E40h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT __lxstat
LOAD:0000000000002200                 Elf64_Rela <214E48h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000002218                 Elf64_Rela <214E50h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000002230                 Elf64_Rela <214E58h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000002248                 Elf64_Rela <214E60h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT dup2
LOAD:0000000000002260                 Elf64_Rela <214E68h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000002278                 Elf64_Rela <214E70h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT snprintf
LOAD:0000000000002290                 Elf64_Rela <214E78h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000022A8                 Elf64_Rela <214E80h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000022C0                 Elf64_Rela <214E88h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT gmtime_r
LOAD:00000000000022D8                 Elf64_Rela <214E90h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000022F0                 Elf64_Rela <214E98h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000002308                 Elf64_Rela <214EA0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fputs
LOAD:0000000000002320                 Elf64_Rela <214EA8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000002338                 Elf64_Rela <214EB0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000002350                 Elf64_Rela <214EB8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fputc
LOAD:0000000000002368                 Elf64_Rela <214EC0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000002380                 Elf64_Rela <214EC8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000002398                 Elf64_Rela <214ED0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000023B0                 Elf64_Rela <214ED8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000023C8                 Elf64_Rela <214EE0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:00000000000023E0                 Elf64_Rela <214EE8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000023F8                 Elf64_Rela <214EF0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT tzset
LOAD:0000000000002410                 Elf64_Rela <214EF8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT time
LOAD:0000000000002428                 Elf64_Rela <214F00h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000002440                 Elf64_Rela <214F08h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __stpcpy_chk
LOAD:0000000000002458                 Elf64_Rela <214F10h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000002470                 Elf64_Rela <214F18h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000002488                 Elf64_Rela <214F20h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000024A0                 Elf64_Rela <214F28h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000024B8                 Elf64_Rela <214F30h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT mktime
LOAD:00000000000024D0                 Elf64_Rela <214F38h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000024E8                 Elf64_Rela <214F40h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000002500                 Elf64_Rela <214F48h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000002518                 Elf64_Rela <214F50h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000002530                 Elf64_Rela <214F58h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT timegm
LOAD:0000000000002548                 Elf64_Rela <214F60h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT strftime
LOAD:0000000000002560                 Elf64_Rela <214F68h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000002578                 Elf64_Rela <214F70h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000002590                 Elf64_Rela <214F78h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000025A8                 Elf64_Rela <214F80h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT unsetenv
LOAD:00000000000025C0                 Elf64_Rela <214F88h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT futimens
LOAD:00000000000025D8                 Elf64_Rela <214F90h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000025F0                 Elf64_Rela <214F98h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000002608                 Elf64_Rela <214FA0h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000002620                 Elf64_Rela <214FA8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000002638                 Elf64_Rela <214FB0h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000002650                 Elf64_Rela <214FB8h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000002668                 Elf64_Rela <214FC0h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000002680                 Elf64_Rela <214FC8h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000002698                 Elf64_Rela <214FD0h, 4C00000007h, 0> ; R_X86_64_JUMP_SLOT __sprintf_chk
LOAD:0000000000002698 LOAD            ends
LOAD:0000000000002698
.init:00000000000026B0 ; ===========================================================================
.init:00000000000026B0
.init:00000000000026B0 ; Segment type: Pure code
.init:00000000000026B0 ; Segment permissions: Read/Execute
.init:00000000000026B0 _init           segment dword public 'CODE' use64
.init:00000000000026B0                 assume cs:_init
.init:00000000000026B0                 ;org 26B0h
.init:00000000000026B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000026B0
.init:00000000000026B0 ; =============== S U B R O U T I N E =======================================
.init:00000000000026B0
.init:00000000000026B0
.init:00000000000026B0                 public _init_proc
.init:00000000000026B0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000026B0                 sub     rsp, 8          ; _init
.init:00000000000026B4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000026BB                 test    rax, rax
.init:00000000000026BE                 jz      short loc_26C2
.init:00000000000026C0                 call    rax ; __gmon_start__
.init:00000000000026C2
.init:00000000000026C2 loc_26C2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000026C2                 add     rsp, 8
.init:00000000000026C6                 retn
.init:00000000000026C6 _init_proc      endp
.init:00000000000026C6
.init:00000000000026C6 _init           ends
.init:00000000000026C6
LOAD:00000000000026C7 ; ===========================================================================
LOAD:00000000000026C7
LOAD:00000000000026C7 ; Segment type: Pure code
LOAD:00000000000026C7 ; Segment permissions: Read/Execute
LOAD:00000000000026C7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000026C7                 assume cs:LOAD
LOAD:00000000000026C7                 ;org 26C7h
LOAD:00000000000026C7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000026C7                 align 10h
LOAD:00000000000026C7 LOAD            ends
LOAD:00000000000026C7
.plt:00000000000026D0 ; ===========================================================================
.plt:00000000000026D0
.plt:00000000000026D0 ; Segment type: Pure code
.plt:00000000000026D0 ; Segment permissions: Read/Execute
.plt:00000000000026D0 _plt            segment para public 'CODE' use64
.plt:00000000000026D0                 assume cs:_plt
.plt:00000000000026D0                 ;org 26D0h
.plt:00000000000026D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000026D0
.plt:00000000000026D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026D0
.plt:00000000000026D0
.plt:00000000000026D0 sub_26D0        proc near               ; CODE XREF: .plt:00000000000026EB↓j
.plt:00000000000026D0                                         ; .plt:00000000000026FB↓j ...
.plt:00000000000026D0 ; __unwind {
.plt:00000000000026D0                 push    cs:qword_214D90
.plt:00000000000026D6                 jmp     cs:qword_214D98
.plt:00000000000026D6 sub_26D0        endp
.plt:00000000000026D6
.plt:00000000000026D6 ; ---------------------------------------------------------------------------
.plt:00000000000026DC                 align 20h
.plt:00000000000026E0
.plt:00000000000026E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026E0
.plt:00000000000026E0 ; Attributes: thunk
.plt:00000000000026E0
.plt:00000000000026E0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:00000000000026E0 ___ctype_toupper_loc proc near          ; CODE XREF: memcpy_lowcase_0+13↓p
.plt:00000000000026E0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:00000000000026E0 ___ctype_toupper_loc endp
.plt:00000000000026E0
.plt:00000000000026E6 ; ---------------------------------------------------------------------------
.plt:00000000000026E6                 push    0
.plt:00000000000026EB                 jmp     sub_26D0
.plt:00000000000026F0
.plt:00000000000026F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000026F0
.plt:00000000000026F0 ; Attributes: thunk
.plt:00000000000026F0
.plt:00000000000026F0 ; char *getenv(const char *name)
.plt:00000000000026F0 _getenv         proc near               ; CODE XREF: main+7CC↓p
.plt:00000000000026F0                                         ; parse_datetime+1C↓p ...
.plt:00000000000026F0                 jmp     cs:getenv_ptr
.plt:00000000000026F0 _getenv         endp
.plt:00000000000026F0
.plt:00000000000026F6 ; ---------------------------------------------------------------------------
.plt:00000000000026F6                 push    1
.plt:00000000000026FB                 jmp     sub_26D0
.plt:0000000000002700
.plt:0000000000002700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002700
.plt:0000000000002700 ; Attributes: thunk
.plt:0000000000002700
.plt:0000000000002700 ___snprintf_chk proc near               ; CODE XREF: debug_strfdatetime_constprop_12+A5↓p
.plt:0000000000002700                                         ; str_days_constprop_13+44↓p ...
.plt:0000000000002700                 jmp     cs:__snprintf_chk_ptr
.plt:0000000000002700 ___snprintf_chk endp
.plt:0000000000002700
.plt:0000000000002706 ; ---------------------------------------------------------------------------
.plt:0000000000002706                 push    2
.plt:000000000000270B                 jmp     sub_26D0
.plt:0000000000002710
.plt:0000000000002710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002710
.plt:0000000000002710 ; Attributes: thunk
.plt:0000000000002710
.plt:0000000000002710 ; void free(void *ptr)
.plt:0000000000002710 _free           proc near               ; CODE XREF: parse_datetime2+451↓p
.plt:0000000000002710                                         ; quotearg_n_options+115↓p ...
.plt:0000000000002710                 jmp     cs:free_ptr
.plt:0000000000002710 _free           endp
.plt:0000000000002710
.plt:0000000000002716 ; ---------------------------------------------------------------------------
.plt:0000000000002716                 push    3
.plt:000000000000271B                 jmp     sub_26D0
.plt:0000000000002720
.plt:0000000000002720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002720
.plt:0000000000002720 ; Attributes: thunk
.plt:0000000000002720
.plt:0000000000002720 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
.plt:0000000000002720 _utimensat      proc near               ; CODE XREF: fdutimensat+2B↓p
.plt:0000000000002720                 jmp     cs:utimensat_ptr
.plt:0000000000002720 _utimensat      endp
.plt:0000000000002720
.plt:0000000000002726 ; ---------------------------------------------------------------------------
.plt:0000000000002726                 push    4
.plt:000000000000272B                 jmp     sub_26D0
.plt:0000000000002730
.plt:0000000000002730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002730
.plt:0000000000002730 ; Attributes: thunk
.plt:0000000000002730
.plt:0000000000002730 ; struct tm *localtime(const time_t *timer)
.plt:0000000000002730 _localtime      proc near               ; CODE XREF: main+881↓p
.plt:0000000000002730                                         ; year_isra_0+46↓p
.plt:0000000000002730                 jmp     cs:localtime_ptr
.plt:0000000000002730 _localtime      endp
.plt:0000000000002730
.plt:0000000000002736 ; ---------------------------------------------------------------------------
.plt:0000000000002736                 push    5
.plt:000000000000273B                 jmp     sub_26D0
.plt:0000000000002740
.plt:0000000000002740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002740
.plt:0000000000002740 ; Attributes: noreturn thunk
.plt:0000000000002740
.plt:0000000000002740 ; void __noreturn abort(void)
.plt:0000000000002740 _abort          proc near               ; CODE XREF: year_isra_0:loc_87F1↓p
.plt:0000000000002740                                         ; set_program_name+9A↓p ...
.plt:0000000000002740                 jmp     cs:abort_ptr
.plt:0000000000002740 _abort          endp
.plt:0000000000002740
.plt:0000000000002746 ; ---------------------------------------------------------------------------
.plt:0000000000002746                 push    6
.plt:000000000000274B                 jmp     sub_26D0
.plt:0000000000002750
.plt:0000000000002750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002750
.plt:0000000000002750 ; Attributes: thunk
.plt:0000000000002750
.plt:0000000000002750 ; int *__errno_location(void)
.plt:0000000000002750 ___errno_location proc near             ; CODE XREF: main+31D↓p
.plt:0000000000002750                                         ; main+35A↓p ...
.plt:0000000000002750                 jmp     cs:__errno_location_ptr
.plt:0000000000002750 ___errno_location endp
.plt:0000000000002750
.plt:0000000000002756 ; ---------------------------------------------------------------------------
.plt:0000000000002756                 push    7
.plt:000000000000275B                 jmp     sub_26D0
.plt:0000000000002760
.plt:0000000000002760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002760
.plt:0000000000002760 ; Attributes: thunk
.plt:0000000000002760
.plt:0000000000002760 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000002760 _strncmp        proc near               ; CODE XREF: usage+2BC↓p
.plt:0000000000002760                                         ; usage+37D↓p ...
.plt:0000000000002760                 jmp     cs:strncmp_ptr
.plt:0000000000002760 _strncmp        endp
.plt:0000000000002760
.plt:0000000000002766 ; ---------------------------------------------------------------------------
.plt:0000000000002766                 push    8
.plt:000000000000276B                 jmp     sub_26D0
.plt:0000000000002770
.plt:0000000000002770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002770
.plt:0000000000002770 ; Attributes: thunk
.plt:0000000000002770
.plt:0000000000002770 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
.plt:0000000000002770 _localtime_r    proc near               ; CODE XREF: localtime_rz+2B↓p
.plt:0000000000002770                                         ; mktime_z+AA↓p
.plt:0000000000002770                 jmp     cs:localtime_r_ptr
.plt:0000000000002770 _localtime_r    endp
.plt:0000000000002770
.plt:0000000000002776 ; ---------------------------------------------------------------------------
.plt:0000000000002776                 push    9
.plt:000000000000277B                 jmp     sub_26D0
.plt:0000000000002780
.plt:0000000000002780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002780
.plt:0000000000002780 ; Attributes: noreturn thunk
.plt:0000000000002780
.plt:0000000000002780 ; void __noreturn _exit(int status)
.plt:0000000000002780 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000002780                 jmp     cs:_exit_ptr
.plt:0000000000002780 __exit          endp
.plt:0000000000002780
.plt:0000000000002786 ; ---------------------------------------------------------------------------
.plt:0000000000002786                 push    0Ah
.plt:000000000000278B                 jmp     sub_26D0
.plt:0000000000002790
.plt:0000000000002790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002790
.plt:0000000000002790 ; Attributes: thunk
.plt:0000000000002790
.plt:0000000000002790 ; size_t __fpending(FILE *fp)
.plt:0000000000002790 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000002790                 jmp     cs:__fpending_ptr
.plt:0000000000002790 ___fpending     endp
.plt:0000000000002790
.plt:0000000000002796 ; ---------------------------------------------------------------------------
.plt:0000000000002796                 push    0Bh
.plt:000000000000279B                 jmp     sub_26D0
.plt:00000000000027A0
.plt:00000000000027A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027A0
.plt:00000000000027A0 ; Attributes: thunk
.plt:00000000000027A0
.plt:00000000000027A0 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
.plt:00000000000027A0 _clock_gettime  proc near               ; CODE XREF: gettime+5↓j
.plt:00000000000027A0                                         ; current_timespec+19↓p
.plt:00000000000027A0                 jmp     cs:clock_gettime_ptr
.plt:00000000000027A0 _clock_gettime  endp
.plt:00000000000027A0
.plt:00000000000027A6 ; ---------------------------------------------------------------------------
.plt:00000000000027A6                 push    0Ch
.plt:00000000000027AB                 jmp     sub_26D0
.plt:00000000000027B0
.plt:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027B0
.plt:00000000000027B0 ; Attributes: thunk
.plt:00000000000027B0
.plt:00000000000027B0 ; int setenv(const char *name, const char *value, int replace)
.plt:00000000000027B0 _setenv         proc near               ; CODE XREF: setenv_TZ+14↓j
.plt:00000000000027B0                 jmp     cs:setenv_ptr
.plt:00000000000027B0 _setenv         endp
.plt:00000000000027B0
.plt:00000000000027B6 ; ---------------------------------------------------------------------------
.plt:00000000000027B6                 push    0Dh
.plt:00000000000027BB                 jmp     sub_26D0
.plt:00000000000027C0
.plt:00000000000027C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027C0
.plt:00000000000027C0 ; Attributes: thunk
.plt:00000000000027C0
.plt:00000000000027C0 ; char *textdomain(const char *domainname)
.plt:00000000000027C0 _textdomain     proc near               ; CODE XREF: main+6A↓p
.plt:00000000000027C0                 jmp     cs:textdomain_ptr
.plt:00000000000027C0 _textdomain     endp
.plt:00000000000027C0
.plt:00000000000027C6 ; ---------------------------------------------------------------------------
.plt:00000000000027C6                 push    0Eh
.plt:00000000000027CB                 jmp     sub_26D0
.plt:00000000000027D0
.plt:00000000000027D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027D0
.plt:00000000000027D0 ; Attributes: thunk
.plt:00000000000027D0
.plt:00000000000027D0 ; int fclose(FILE *stream)
.plt:00000000000027D0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000027D0                                         ; rpl_fclose+6B↓j
.plt:00000000000027D0                 jmp     cs:fclose_ptr
.plt:00000000000027D0 _fclose         endp
.plt:00000000000027D0
.plt:00000000000027D6 ; ---------------------------------------------------------------------------
.plt:00000000000027D6                 push    0Fh
.plt:00000000000027DB                 jmp     sub_26D0
.plt:00000000000027E0
.plt:00000000000027E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027E0
.plt:00000000000027E0 ; Attributes: thunk
.plt:00000000000027E0
.plt:00000000000027E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000027E0 _bindtextdomain proc near               ; CODE XREF: main+5E↓p
.plt:00000000000027E0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000027E0 _bindtextdomain endp
.plt:00000000000027E0
.plt:00000000000027E6 ; ---------------------------------------------------------------------------
.plt:00000000000027E6                 push    10h
.plt:00000000000027EB                 jmp     sub_26D0
.plt:00000000000027F0
.plt:00000000000027F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000027F0
.plt:00000000000027F0 ; Attributes: thunk
.plt:00000000000027F0
.plt:00000000000027F0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000027F0 _dcgettext      proc near               ; CODE XREF: main+352↓p
.plt:00000000000027F0                                         ; main+497↓p ...
.plt:00000000000027F0                 jmp     cs:dcgettext_ptr
.plt:00000000000027F0 _dcgettext      endp
.plt:00000000000027F0
.plt:00000000000027F6 ; ---------------------------------------------------------------------------
.plt:00000000000027F6                 push    11h
.plt:00000000000027FB                 jmp     sub_26D0
.plt:0000000000002800
.plt:0000000000002800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002800
.plt:0000000000002800 ; Attributes: thunk
.plt:0000000000002800
.plt:0000000000002800 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000002800 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000002800                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000002800 ___ctype_get_mb_cur_max endp
.plt:0000000000002800
.plt:0000000000002806 ; ---------------------------------------------------------------------------
.plt:0000000000002806                 push    12h
.plt:000000000000280B                 jmp     sub_26D0
.plt:0000000000002810
.plt:0000000000002810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002810
.plt:0000000000002810 ; Attributes: thunk
.plt:0000000000002810
.plt:0000000000002810 ; size_t strlen(const char *s)
.plt:0000000000002810 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:0000000000002810                                         ; argmatch+AE↓p ...
.plt:0000000000002810                 jmp     cs:strlen_ptr
.plt:0000000000002810 _strlen         endp
.plt:0000000000002810
.plt:0000000000002816 ; ---------------------------------------------------------------------------
.plt:0000000000002816                 push    13h
.plt:000000000000281B                 jmp     sub_26D0
.plt:0000000000002820
.plt:0000000000002820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002820
.plt:0000000000002820 ; Attributes: thunk
.plt:0000000000002820
.plt:0000000000002820 ; int __lxstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000002820 ___lxstat       proc near               ; CODE XREF: main+67C↓p
.plt:0000000000002820                 jmp     cs:__lxstat_ptr
.plt:0000000000002820 ___lxstat       endp
.plt:0000000000002820
.plt:0000000000002826 ; ---------------------------------------------------------------------------
.plt:0000000000002826                 push    14h
.plt:000000000000282B                 jmp     sub_26D0
.plt:0000000000002830
.plt:0000000000002830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002830
.plt:0000000000002830 ; Attributes: noreturn thunk
.plt:0000000000002830
.plt:0000000000002830 ___stack_chk_fail proc near             ; CODE XREF: main:loc_33E0↓p
.plt:0000000000002830                                         ; current_timespec:loc_402C↓p ...
.plt:0000000000002830                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000002830 ___stack_chk_fail endp
.plt:0000000000002830
.plt:0000000000002836 ; ---------------------------------------------------------------------------
.plt:0000000000002836                 push    15h
.plt:000000000000283B                 jmp     sub_26D0
.plt:0000000000002840
.plt:0000000000002840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002840
.plt:0000000000002840 ; Attributes: thunk
.plt:0000000000002840
.plt:0000000000002840 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000002840 _getopt_long    proc near               ; CODE XREF: main+AB↓p
.plt:0000000000002840                 jmp     cs:getopt_long_ptr
.plt:0000000000002840 _getopt_long    endp
.plt:0000000000002840
.plt:0000000000002846 ; ---------------------------------------------------------------------------
.plt:0000000000002846                 push    16h
.plt:000000000000284B                 jmp     sub_26D0
.plt:0000000000002850
.plt:0000000000002850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002850
.plt:0000000000002850 ; Attributes: thunk
.plt:0000000000002850
.plt:0000000000002850 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000002850 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000002850                 jmp     cs:mbrtowc_ptr
.plt:0000000000002850 _mbrtowc        endp
.plt:0000000000002850
.plt:0000000000002856 ; ---------------------------------------------------------------------------
.plt:0000000000002856                 push    17h
.plt:000000000000285B                 jmp     sub_26D0
.plt:0000000000002860
.plt:0000000000002860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002860
.plt:0000000000002860 ; Attributes: thunk
.plt:0000000000002860
.plt:0000000000002860 ; int dup2(int fd, int fd2)
.plt:0000000000002860 _dup2           proc near               ; CODE XREF: fd_reopen+28↓p
.plt:0000000000002860                 jmp     cs:dup2_ptr
.plt:0000000000002860 _dup2           endp
.plt:0000000000002860
.plt:0000000000002866 ; ---------------------------------------------------------------------------
.plt:0000000000002866                 push    18h
.plt:000000000000286B                 jmp     sub_26D0
.plt:0000000000002870
.plt:0000000000002870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002870
.plt:0000000000002870 ; Attributes: thunk
.plt:0000000000002870
.plt:0000000000002870 ; char *strchr(const char *s, int c)
.plt:0000000000002870 _strchr         proc near               ; CODE XREF: posixtime+49↓p
.plt:0000000000002870                 jmp     cs:strchr_ptr
.plt:0000000000002870 _strchr         endp
.plt:0000000000002870
.plt:0000000000002876 ; ---------------------------------------------------------------------------
.plt:0000000000002876                 push    19h
.plt:000000000000287B                 jmp     sub_26D0
.plt:0000000000002880
.plt:0000000000002880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002880
.plt:0000000000002880 ; Attributes: thunk
.plt:0000000000002880
.plt:0000000000002880 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
.plt:0000000000002880 _snprintf       proc near               ; CODE XREF: str_days_constprop_13+DB↓p
.plt:0000000000002880                 jmp     cs:snprintf_ptr
.plt:0000000000002880 _snprintf       endp
.plt:0000000000002880
.plt:0000000000002886 ; ---------------------------------------------------------------------------
.plt:0000000000002886                 push    1Ah
.plt:000000000000288B                 jmp     sub_26D0
.plt:0000000000002890
.plt:0000000000002890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002890
.plt:0000000000002890 ; Attributes: thunk
.plt:0000000000002890
.plt:0000000000002890 ; int __overflow(_IO_FILE *, int)
.plt:0000000000002890 ___overflow     proc near               ; CODE XREF: argmatch_valid+11B↓j
.plt:0000000000002890                 jmp     cs:__overflow_ptr
.plt:0000000000002890 ___overflow     endp
.plt:0000000000002890
.plt:0000000000002896 ; ---------------------------------------------------------------------------
.plt:0000000000002896                 push    1Bh
.plt:000000000000289B                 jmp     sub_26D0
.plt:00000000000028A0
.plt:00000000000028A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028A0
.plt:00000000000028A0 ; Attributes: thunk
.plt:00000000000028A0
.plt:00000000000028A0 ; char *strrchr(const char *s, int c)
.plt:00000000000028A0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000028A0                 jmp     cs:strrchr_ptr
.plt:00000000000028A0 _strrchr        endp
.plt:00000000000028A0
.plt:00000000000028A6 ; ---------------------------------------------------------------------------
.plt:00000000000028A6                 push    1Ch
.plt:00000000000028AB                 jmp     sub_26D0
.plt:00000000000028B0
.plt:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028B0
.plt:00000000000028B0 ; Attributes: thunk
.plt:00000000000028B0
.plt:00000000000028B0 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
.plt:00000000000028B0 _gmtime_r       proc near               ; CODE XREF: parse_datetime2+811↓p
.plt:00000000000028B0                                         ; localtime_rz+90↓j
.plt:00000000000028B0                 jmp     cs:gmtime_r_ptr
.plt:00000000000028B0 _gmtime_r       endp
.plt:00000000000028B0
.plt:00000000000028B6 ; ---------------------------------------------------------------------------
.plt:00000000000028B6                 push    1Dh
.plt:00000000000028BB                 jmp     sub_26D0
.plt:00000000000028C0
.plt:00000000000028C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028C0
.plt:00000000000028C0 ; Attributes: thunk
.plt:00000000000028C0
.plt:00000000000028C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000028C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000028C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000028C0                 jmp     cs:lseek_ptr
.plt:00000000000028C0 _lseek          endp
.plt:00000000000028C0
.plt:00000000000028C6 ; ---------------------------------------------------------------------------
.plt:00000000000028C6                 push    1Eh
.plt:00000000000028CB                 jmp     sub_26D0
.plt:00000000000028D0
.plt:00000000000028D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028D0
.plt:00000000000028D0 ; Attributes: noreturn thunk
.plt:00000000000028D0
.plt:00000000000028D0 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00000000000028D0 ___assert_fail  proc near               ; CODE XREF: main+83F↓p
.plt:00000000000028D0                 jmp     cs:__assert_fail_ptr
.plt:00000000000028D0 ___assert_fail  endp
.plt:00000000000028D0
.plt:00000000000028D6 ; ---------------------------------------------------------------------------
.plt:00000000000028D6                 push    1Fh
.plt:00000000000028DB                 jmp     sub_26D0
.plt:00000000000028E0
.plt:00000000000028E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028E0
.plt:00000000000028E0 ; Attributes: thunk
.plt:00000000000028E0
.plt:00000000000028E0 ; int fputs(const char *s, FILE *stream)
.plt:00000000000028E0 _fputs          proc near               ; CODE XREF: debug_print_relative_time_part_11+121↓j
.plt:00000000000028E0                 jmp     cs:fputs_ptr
.plt:00000000000028E0 _fputs          endp
.plt:00000000000028E0
.plt:00000000000028E6 ; ---------------------------------------------------------------------------
.plt:00000000000028E6                 push    20h ; ' '
.plt:00000000000028EB                 jmp     sub_26D0
.plt:00000000000028F0
.plt:00000000000028F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000028F0
.plt:00000000000028F0 ; Attributes: thunk
.plt:00000000000028F0
.plt:00000000000028F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000028F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000028F0                                         ; xzalloc+12↓j ...
.plt:00000000000028F0                 jmp     cs:memset_ptr
.plt:00000000000028F0 _memset         endp
.plt:00000000000028F0
.plt:00000000000028F6 ; ---------------------------------------------------------------------------
.plt:00000000000028F6                 push    21h ; '!'
.plt:00000000000028FB                 jmp     sub_26D0
.plt:0000000000002900
.plt:0000000000002900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002900
.plt:0000000000002900 ; Attributes: thunk
.plt:0000000000002900
.plt:0000000000002900 ; int close(int fd)
.plt:0000000000002900 _close          proc near               ; CODE XREF: main+2F5↓p
.plt:0000000000002900                                         ; fd_reopen+3D↓p
.plt:0000000000002900                 jmp     cs:close_ptr
.plt:0000000000002900 _close          endp
.plt:0000000000002900
.plt:0000000000002906 ; ---------------------------------------------------------------------------
.plt:0000000000002906                 push    22h ; '"'
.plt:000000000000290B                 jmp     sub_26D0
.plt:0000000000002910
.plt:0000000000002910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002910
.plt:0000000000002910 ; Attributes: thunk
.plt:0000000000002910
.plt:0000000000002910 ; int fputc(int c, FILE *stream)
.plt:0000000000002910 _fputc          proc near               ; CODE XREF: debug_print_relative_time_part_11+B2↓j
.plt:0000000000002910                                         ; debug_print_current_time_part_10+1B7↓p ...
.plt:0000000000002910                 jmp     cs:fputc_ptr
.plt:0000000000002910 _fputc          endp
.plt:0000000000002910
.plt:0000000000002916 ; ---------------------------------------------------------------------------
.plt:0000000000002916                 push    23h ; '#'
.plt:000000000000291B                 jmp     sub_26D0
.plt:0000000000002920
.plt:0000000000002920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002920
.plt:0000000000002920 ; Attributes: thunk
.plt:0000000000002920
.plt:0000000000002920 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000002920 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:0000000000002920                                         ; argmatch_valid+96↓p ...
.plt:0000000000002920                 jmp     cs:memcmp_ptr
.plt:0000000000002920 _memcmp         endp
.plt:0000000000002920
.plt:0000000000002926 ; ---------------------------------------------------------------------------
.plt:0000000000002926                 push    24h ; '$'
.plt:000000000000292B                 jmp     sub_26D0
.plt:0000000000002930
.plt:0000000000002930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002930
.plt:0000000000002930 ; Attributes: thunk
.plt:0000000000002930
.plt:0000000000002930 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000002930 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000002930                                         ; usage+C2↓p ...
.plt:0000000000002930                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000002930 _fputs_unlocked endp
.plt:0000000000002930
.plt:0000000000002936 ; ---------------------------------------------------------------------------
.plt:0000000000002936                 push    25h ; '%'
.plt:000000000000293B                 jmp     sub_26D0
.plt:0000000000002940
.plt:0000000000002940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002940
.plt:0000000000002940 ; Attributes: thunk
.plt:0000000000002940
.plt:0000000000002940 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000002940 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000002940                 jmp     cs:calloc_ptr
.plt:0000000000002940 _calloc         endp
.plt:0000000000002940
.plt:0000000000002946 ; ---------------------------------------------------------------------------
.plt:0000000000002946                 push    26h ; '&'
.plt:000000000000294B                 jmp     sub_26D0
.plt:0000000000002950
.plt:0000000000002950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002950
.plt:0000000000002950 ; Attributes: thunk
.plt:0000000000002950
.plt:0000000000002950 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000002950 _strcmp         proc near               ; CODE XREF: lookup_zone+2F↓p
.plt:0000000000002950                                         ; lookup_zone+7F↓p ...
.plt:0000000000002950                 jmp     cs:strcmp_ptr
.plt:0000000000002950 _strcmp         endp
.plt:0000000000002950
.plt:0000000000002956 ; ---------------------------------------------------------------------------
.plt:0000000000002956                 push    27h ; '''
.plt:000000000000295B                 jmp     sub_26D0
.plt:0000000000002960
.plt:0000000000002960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002960
.plt:0000000000002960 ; Attributes: thunk
.plt:0000000000002960
.plt:0000000000002960 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:0000000000002960 _strtol         proc near               ; CODE XREF: posix2_version+5B↓p
.plt:0000000000002960                 jmp     cs:strtol_ptr
.plt:0000000000002960 _strtol         endp
.plt:0000000000002960
.plt:0000000000002966 ; ---------------------------------------------------------------------------
.plt:0000000000002966                 push    28h ; '('
.plt:000000000000296B                 jmp     sub_26D0
.plt:0000000000002970
.plt:0000000000002970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002970
.plt:0000000000002970 ; Attributes: thunk
.plt:0000000000002970
.plt:0000000000002970 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000002970 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000002970                                         ; tzalloc+51↓p ...
.plt:0000000000002970                 jmp     cs:memcpy_ptr
.plt:0000000000002970 _memcpy         endp
.plt:0000000000002970
.plt:0000000000002976 ; ---------------------------------------------------------------------------
.plt:0000000000002976                 push    29h ; ')'
.plt:000000000000297B                 jmp     sub_26D0
.plt:0000000000002980
.plt:0000000000002980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002980
.plt:0000000000002980 ; Attributes: thunk
.plt:0000000000002980
.plt:0000000000002980 ; void tzset(void)
.plt:0000000000002980 _tzset          proc near               ; CODE XREF: revert_tz:loc_B2A0↓p
.plt:0000000000002980                                         ; set_tz:loc_B558↓p
.plt:0000000000002980                 jmp     cs:tzset_ptr
.plt:0000000000002980 _tzset          endp
.plt:0000000000002980
.plt:0000000000002986 ; ---------------------------------------------------------------------------
.plt:0000000000002986                 push    2Ah ; '*'
.plt:000000000000298B                 jmp     sub_26D0
.plt:0000000000002990
.plt:0000000000002990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002990
.plt:0000000000002990 ; Attributes: thunk
.plt:0000000000002990
.plt:0000000000002990 ; time_t time(time_t *timer)
.plt:0000000000002990 _time           proc near               ; CODE XREF: year_isra_0+3E↓p
.plt:0000000000002990                 jmp     cs:time_ptr
.plt:0000000000002990 _time           endp
.plt:0000000000002990
.plt:0000000000002996 ; ---------------------------------------------------------------------------
.plt:0000000000002996                 push    2Bh ; '+'
.plt:000000000000299B                 jmp     sub_26D0
.plt:00000000000029A0
.plt:00000000000029A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029A0
.plt:00000000000029A0 ; Attributes: thunk
.plt:00000000000029A0
.plt:00000000000029A0 ; int fileno(FILE *stream)
.plt:00000000000029A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000029A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000029A0                 jmp     cs:fileno_ptr
.plt:00000000000029A0 _fileno         endp
.plt:00000000000029A0
.plt:00000000000029A6 ; ---------------------------------------------------------------------------
.plt:00000000000029A6                 push    2Ch ; ','
.plt:00000000000029AB                 jmp     sub_26D0
.plt:00000000000029B0
.plt:00000000000029B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029B0
.plt:00000000000029B0 ; Attributes: thunk
.plt:00000000000029B0
.plt:00000000000029B0 ___stpcpy_chk   proc near               ; CODE XREF: posixtime+238↓p
.plt:00000000000029B0                 jmp     cs:__stpcpy_chk_ptr
.plt:00000000000029B0 ___stpcpy_chk   endp
.plt:00000000000029B0
.plt:00000000000029B6 ; ---------------------------------------------------------------------------
.plt:00000000000029B6                 push    2Dh ; '-'
.plt:00000000000029BB                 jmp     sub_26D0
.plt:00000000000029C0
.plt:00000000000029C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029C0
.plt:00000000000029C0 ; Attributes: thunk
.plt:00000000000029C0
.plt:00000000000029C0 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:00000000000029C0 ___xstat        proc near               ; CODE XREF: main:loc_331B↓p
.plt:00000000000029C0                 jmp     cs:__xstat_ptr
.plt:00000000000029C0 ___xstat        endp
.plt:00000000000029C0
.plt:00000000000029C6 ; ---------------------------------------------------------------------------
.plt:00000000000029C6                 push    2Eh ; '.'
.plt:00000000000029CB                 jmp     sub_26D0
.plt:00000000000029D0
.plt:00000000000029D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029D0
.plt:00000000000029D0 ; Attributes: thunk
.plt:00000000000029D0
.plt:00000000000029D0 ; void *malloc(size_t size)
.plt:00000000000029D0 _malloc         proc near               ; CODE XREF: parse_datetime2+4E3↓p
.plt:00000000000029D0                                         ; xmalloc+4↓p ...
.plt:00000000000029D0                 jmp     cs:malloc_ptr
.plt:00000000000029D0 _malloc         endp
.plt:00000000000029D0
.plt:00000000000029D6 ; ---------------------------------------------------------------------------
.plt:00000000000029D6                 push    2Fh ; '/'
.plt:00000000000029DB                 jmp     sub_26D0
.plt:00000000000029E0
.plt:00000000000029E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029E0
.plt:00000000000029E0 ; Attributes: thunk
.plt:00000000000029E0
.plt:00000000000029E0 ; int fflush(FILE *stream)
.plt:00000000000029E0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000029E0                                         ; rpl_fflush+3B↓j
.plt:00000000000029E0                 jmp     cs:fflush_ptr
.plt:00000000000029E0 _fflush         endp
.plt:00000000000029E0
.plt:00000000000029E6 ; ---------------------------------------------------------------------------
.plt:00000000000029E6                 push    30h ; '0'
.plt:00000000000029EB                 jmp     sub_26D0
.plt:00000000000029F0
.plt:00000000000029F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000029F0
.plt:00000000000029F0 ; Attributes: thunk
.plt:00000000000029F0
.plt:00000000000029F0 ; char *nl_langinfo(nl_item item)
.plt:00000000000029F0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000029F0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000029F0 _nl_langinfo    endp
.plt:00000000000029F0
.plt:00000000000029F6 ; ---------------------------------------------------------------------------
.plt:00000000000029F6                 push    31h ; '1'
.plt:00000000000029FB                 jmp     sub_26D0
.plt:0000000000002A00
.plt:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A00
.plt:0000000000002A00 ; Attributes: thunk
.plt:0000000000002A00
.plt:0000000000002A00 ; time_t mktime(struct tm *tp)
.plt:0000000000002A00 _mktime         proc near               ; CODE XREF: posixtime+1C8↓p
.plt:0000000000002A00                                         ; mktime_z+3B↓p
.plt:0000000000002A00                 jmp     cs:mktime_ptr
.plt:0000000000002A00 _mktime         endp
.plt:0000000000002A00
.plt:0000000000002A06 ; ---------------------------------------------------------------------------
.plt:0000000000002A06                 push    32h ; '2'
.plt:0000000000002A0B                 jmp     sub_26D0
.plt:0000000000002A10
.plt:0000000000002A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A10
.plt:0000000000002A10 ; Attributes: thunk
.plt:0000000000002A10
.plt:0000000000002A10 ; int __freading(FILE *fp)
.plt:0000000000002A10 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000002A10                                         ; rpl_fflush+9↓p
.plt:0000000000002A10                 jmp     cs:__freading_ptr
.plt:0000000000002A10 ___freading     endp
.plt:0000000000002A10
.plt:0000000000002A16 ; ---------------------------------------------------------------------------
.plt:0000000000002A16                 push    33h ; '3'
.plt:0000000000002A1B                 jmp     sub_26D0
.plt:0000000000002A20
.plt:0000000000002A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A20
.plt:0000000000002A20 ; Attributes: thunk
.plt:0000000000002A20
.plt:0000000000002A20 ; void *realloc(void *ptr, size_t size)
.plt:0000000000002A20 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000002A20                                         ; vasnprintf+285↓p ...
.plt:0000000000002A20                 jmp     cs:realloc_ptr
.plt:0000000000002A20 _realloc        endp
.plt:0000000000002A20
.plt:0000000000002A26 ; ---------------------------------------------------------------------------
.plt:0000000000002A26                 push    34h ; '4'
.plt:0000000000002A2B                 jmp     sub_26D0
.plt:0000000000002A30
.plt:0000000000002A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A30
.plt:0000000000002A30 ; Attributes: thunk
.plt:0000000000002A30
.plt:0000000000002A30 ; char *setlocale(int category, const char *locale)
.plt:0000000000002A30 _setlocale      proc near               ; CODE XREF: main+4B↓p
.plt:0000000000002A30                                         ; usage+2A3↓p ...
.plt:0000000000002A30                 jmp     cs:setlocale_ptr
.plt:0000000000002A30 _setlocale      endp
.plt:0000000000002A30
.plt:0000000000002A36 ; ---------------------------------------------------------------------------
.plt:0000000000002A36                 push    35h ; '5'
.plt:0000000000002A3B                 jmp     sub_26D0
.plt:0000000000002A40
.plt:0000000000002A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A40
.plt:0000000000002A40 ; Attributes: thunk
.plt:0000000000002A40
.plt:0000000000002A40 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000002A40                                         ; usage+297↓p ...
.plt:0000000000002A40                 jmp     cs:__printf_chk_ptr
.plt:0000000000002A40 ___printf_chk   endp
.plt:0000000000002A40
.plt:0000000000002A46 ; ---------------------------------------------------------------------------
.plt:0000000000002A46                 push    36h ; '6'
.plt:0000000000002A4B                 jmp     sub_26D0
.plt:0000000000002A50
.plt:0000000000002A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A50
.plt:0000000000002A50 ; Attributes: thunk
.plt:0000000000002A50
.plt:0000000000002A50 ; time_t timegm(struct tm *tp)
.plt:0000000000002A50 _timegm         proc near               ; CODE XREF: mktime_z+123↓p
.plt:0000000000002A50                 jmp     cs:timegm_ptr
.plt:0000000000002A50 _timegm         endp
.plt:0000000000002A50
.plt:0000000000002A56 ; ---------------------------------------------------------------------------
.plt:0000000000002A56                 push    37h ; '7'
.plt:0000000000002A5B                 jmp     sub_26D0
.plt:0000000000002A60
.plt:0000000000002A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A60
.plt:0000000000002A60 ; Attributes: thunk
.plt:0000000000002A60
.plt:0000000000002A60 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
.plt:0000000000002A60 _strftime       proc near               ; CODE XREF: __strftime_internal+418↓p
.plt:0000000000002A60                 jmp     cs:strftime_ptr
.plt:0000000000002A60 _strftime       endp
.plt:0000000000002A60
.plt:0000000000002A66 ; ---------------------------------------------------------------------------
.plt:0000000000002A66                 push    38h ; '8'
.plt:0000000000002A6B                 jmp     sub_26D0
.plt:0000000000002A70
.plt:0000000000002A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A70
.plt:0000000000002A70 ; Attributes: thunk
.plt:0000000000002A70
.plt:0000000000002A70 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000002A70 _error          proc near               ; CODE XREF: main+36B↓p
.plt:0000000000002A70                                         ; main+4A9↓p ...
.plt:0000000000002A70                 jmp     cs:error_ptr
.plt:0000000000002A70 _error          endp
.plt:0000000000002A70
.plt:0000000000002A76 ; ---------------------------------------------------------------------------
.plt:0000000000002A76                 push    39h ; '9'
.plt:0000000000002A7B                 jmp     sub_26D0
.plt:0000000000002A80
.plt:0000000000002A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A80
.plt:0000000000002A80 ; Attributes: thunk
.plt:0000000000002A80
.plt:0000000000002A80 ; int open(const char *file, int oflag, ...)
.plt:0000000000002A80 _open           proc near               ; CODE XREF: fd_reopen+15↓p
.plt:0000000000002A80                 jmp     cs:open_ptr
.plt:0000000000002A80 _open           endp
.plt:0000000000002A80
.plt:0000000000002A86 ; ---------------------------------------------------------------------------
.plt:0000000000002A86                 push    3Ah ; ':'
.plt:0000000000002A8B                 jmp     sub_26D0
.plt:0000000000002A90
.plt:0000000000002A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002A90
.plt:0000000000002A90 ; Attributes: thunk
.plt:0000000000002A90
.plt:0000000000002A90 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000002A90 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_D60A↓j
.plt:0000000000002A90                 jmp     cs:fseeko_ptr
.plt:0000000000002A90 _fseeko         endp
.plt:0000000000002A90
.plt:0000000000002A96 ; ---------------------------------------------------------------------------
.plt:0000000000002A96                 push    3Bh ; ';'
.plt:0000000000002A9B                 jmp     sub_26D0
.plt:0000000000002AA0
.plt:0000000000002AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AA0
.plt:0000000000002AA0 ; Attributes: thunk
.plt:0000000000002AA0
.plt:0000000000002AA0 ; int unsetenv(const char *name)
.plt:0000000000002AA0 _unsetenv       proc near               ; CODE XREF: setenv_TZ+27↓j
.plt:0000000000002AA0                 jmp     cs:unsetenv_ptr
.plt:0000000000002AA0 _unsetenv       endp
.plt:0000000000002AA0
.plt:0000000000002AA6 ; ---------------------------------------------------------------------------
.plt:0000000000002AA6                 push    3Ch ; '<'
.plt:0000000000002AAB                 jmp     sub_26D0
.plt:0000000000002AB0
.plt:0000000000002AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AB0
.plt:0000000000002AB0 ; Attributes: thunk
.plt:0000000000002AB0
.plt:0000000000002AB0 ; int futimens(int fd, const struct timespec times[2])
.plt:0000000000002AB0 _futimens       proc near               ; CODE XREF: fdutimensat+43↓p
.plt:0000000000002AB0                 jmp     cs:futimens_ptr
.plt:0000000000002AB0 _futimens       endp
.plt:0000000000002AB0
.plt:0000000000002AB6 ; ---------------------------------------------------------------------------
.plt:0000000000002AB6                 push    3Dh ; '='
.plt:0000000000002ABB                 jmp     sub_26D0
.plt:0000000000002AC0
.plt:0000000000002AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AC0
.plt:0000000000002AC0 ; Attributes: thunk
.plt:0000000000002AC0
.plt:0000000000002AC0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000002AC0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000002AC0                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000002AC0 ___cxa_atexit   endp
.plt:0000000000002AC0
.plt:0000000000002AC6 ; ---------------------------------------------------------------------------
.plt:0000000000002AC6                 push    3Eh ; '>'
.plt:0000000000002ACB                 jmp     sub_26D0
.plt:0000000000002AD0
.plt:0000000000002AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AD0
.plt:0000000000002AD0 ; Attributes: noreturn thunk
.plt:0000000000002AD0
.plt:0000000000002AD0 ; void __noreturn exit(int status)
.plt:0000000000002AD0 _exit           proc near               ; CODE XREF: main+1D5↓p
.plt:0000000000002AD0                                         ; usage+58↓p
.plt:0000000000002AD0                 jmp     cs:exit_ptr
.plt:0000000000002AD0 _exit           endp
.plt:0000000000002AD0
.plt:0000000000002AD6 ; ---------------------------------------------------------------------------
.plt:0000000000002AD6                 push    3Fh ; '?'
.plt:0000000000002ADB                 jmp     sub_26D0
.plt:0000000000002AE0
.plt:0000000000002AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AE0
.plt:0000000000002AE0 ; Attributes: thunk
.plt:0000000000002AE0
.plt:0000000000002AE0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000002AE0 _fwrite         proc near               ; CODE XREF: dbg_printf+87↓p
.plt:0000000000002AE0                                         ; debug_print_current_time_part_10+3C8↓p ...
.plt:0000000000002AE0                 jmp     cs:fwrite_ptr
.plt:0000000000002AE0 _fwrite         endp
.plt:0000000000002AE0
.plt:0000000000002AE6 ; ---------------------------------------------------------------------------
.plt:0000000000002AE6                 push    40h ; '@'
.plt:0000000000002AEB                 jmp     sub_26D0
.plt:0000000000002AF0
.plt:0000000000002AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002AF0
.plt:0000000000002AF0 ; Attributes: thunk
.plt:0000000000002AF0
.plt:0000000000002AF0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000002AF0                                         ; argmatch_valid+7A↓p ...
.plt:0000000000002AF0                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000002AF0 ___fprintf_chk  endp
.plt:0000000000002AF0
.plt:0000000000002AF6 ; ---------------------------------------------------------------------------
.plt:0000000000002AF6                 push    41h ; 'A'
.plt:0000000000002AFB                 jmp     sub_26D0
.plt:0000000000002B00
.plt:0000000000002B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B00
.plt:0000000000002B00 ; Attributes: thunk
.plt:0000000000002B00
.plt:0000000000002B00 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000002B00 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000002B00                 jmp     cs:mbsinit_ptr
.plt:0000000000002B00 _mbsinit        endp
.plt:0000000000002B00
.plt:0000000000002B06 ; ---------------------------------------------------------------------------
.plt:0000000000002B06                 push    42h ; 'B'
.plt:0000000000002B0B                 jmp     sub_26D0
.plt:0000000000002B10
.plt:0000000000002B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B10
.plt:0000000000002B10 ; Attributes: thunk
.plt:0000000000002B10
.plt:0000000000002B10 ; int iswprint(wint_t wc)
.plt:0000000000002B10 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000002B10                 jmp     cs:iswprint_ptr
.plt:0000000000002B10 _iswprint       endp
.plt:0000000000002B10
.plt:0000000000002B16 ; ---------------------------------------------------------------------------
.plt:0000000000002B16                 push    43h ; 'C'
.plt:0000000000002B1B                 jmp     sub_26D0
.plt:0000000000002B20
.plt:0000000000002B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B20
.plt:0000000000002B20 ; Attributes: thunk
.plt:0000000000002B20
.plt:0000000000002B20 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000002B20 ___ctype_tolower_loc proc near          ; CODE XREF: memcpy_lowcase+13↓p
.plt:0000000000002B20                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000002B20 ___ctype_tolower_loc endp
.plt:0000000000002B20
.plt:0000000000002B26 ; ---------------------------------------------------------------------------
.plt:0000000000002B26                 push    44h ; 'D'
.plt:0000000000002B2B                 jmp     sub_26D0
.plt:0000000000002B30
.plt:0000000000002B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B30
.plt:0000000000002B30 ; Attributes: thunk
.plt:0000000000002B30
.plt:0000000000002B30 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000002B30 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000002B30                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000002B30 ___ctype_b_loc  endp
.plt:0000000000002B30
.plt:0000000000002B36 ; ---------------------------------------------------------------------------
.plt:0000000000002B36                 push    45h ; 'E'
.plt:0000000000002B3B                 jmp     sub_26D0
.plt:0000000000002B40
.plt:0000000000002B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000002B40
.plt:0000000000002B40 ; Attributes: thunk
.plt:0000000000002B40
.plt:0000000000002B40 ___sprintf_chk  proc near               ; CODE XREF: tm_year_str+4D↓p
.plt:0000000000002B40                                         ; time_zone_str+57↓p
.plt:0000000000002B40                 jmp     cs:__sprintf_chk_ptr
.plt:0000000000002B40 ___sprintf_chk  endp
.plt:0000000000002B40
.plt:0000000000002B46 ; ---------------------------------------------------------------------------
.plt:0000000000002B46                 push    46h ; 'F'
.plt:0000000000002B4B                 jmp     sub_26D0
.plt:0000000000002B4B ; } // starts at 26D0
.plt:0000000000002B4B _plt            ends
.plt:0000000000002B4B
.plt.got:0000000000002B50 ; ===========================================================================
.plt.got:0000000000002B50
.plt.got:0000000000002B50 ; Segment type: Pure code
.plt.got:0000000000002B50 ; Segment permissions: Read/Execute
.plt.got:0000000000002B50 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000002B50                 assume cs:_plt_got
.plt.got:0000000000002B50                 ;org 2B50h
.plt.got:0000000000002B50                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000002B50
.plt.got:0000000000002B50 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000002B50
.plt.got:0000000000002B50 ; Attributes: thunk
.plt.got:0000000000002B50
.plt.got:0000000000002B50 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000002B50 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000002B50 ; __unwind {
.plt.got:0000000000002B50                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000002B50 __cxa_finalize  endp
.plt.got:0000000000002B50
.plt.got:0000000000002B50 ; ---------------------------------------------------------------------------
.plt.got:0000000000002B56                 align 8
.plt.got:0000000000002B56 ; } // starts at 2B50
.plt.got:0000000000002B56 _plt_got        ends
.plt.got:0000000000002B56
LOAD:0000000000002B58 ; ===========================================================================
LOAD:0000000000002B58
LOAD:0000000000002B58 ; Segment type: Pure code
LOAD:0000000000002B58 ; Segment permissions: Read/Execute
LOAD:0000000000002B58 LOAD            segment byte public 'CODE' use64
LOAD:0000000000002B58                 assume cs:LOAD
LOAD:0000000000002B58                 ;org 2B58h
LOAD:0000000000002B58                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000002B58                 align 20h
LOAD:0000000000002B58 LOAD            ends
LOAD:0000000000002B58
.text:0000000000002B60 ; ===========================================================================
.text:0000000000002B60
.text:0000000000002B60 ; Segment type: Pure code
.text:0000000000002B60 ; Segment permissions: Read/Execute
.text:0000000000002B60 _text           segment para public 'CODE' use64
.text:0000000000002B60                 assume cs:_text
.text:0000000000002B60                 ;org 2B60h
.text:0000000000002B60                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000002B60
.text:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B60
.text:0000000000002B60
.text:0000000000002B60 tm_year_str     proc near               ; CODE XREF: parse_datetime2+1778↓p
.text:0000000000002B60                                         ; parse_datetime2+17C5↓p ...
.text:0000000000002B60 ; __unwind {
.text:0000000000002B60                 mov     eax, edi
.text:0000000000002B62                 mov     ecx, 64h ; 'd'
.text:0000000000002B67                 push    rbx
.text:0000000000002B68                 cdq
.text:0000000000002B69                 mov     rbx, rsi
.text:0000000000002B6C                 idiv    ecx
.text:0000000000002B6E                 xor     ecx, ecx
.text:0000000000002B70                 lea     r8d, [rax+13h]
.text:0000000000002B74                 mov     esi, edx
.text:0000000000002B76                 sar     esi, 1Fh
.text:0000000000002B79                 mov     eax, r8d
.text:0000000000002B7C                 xor     edx, esi
.text:0000000000002B7E                 sar     eax, 1Fh
.text:0000000000002B81                 xor     r8d, eax
.text:0000000000002B84                 cmp     edi, 0FFFFF894h
.text:0000000000002B8A                 lea     rdi, a02d02d    ; "-%02d%02d"
.text:0000000000002B91                 setnl   cl
.text:0000000000002B94                 sub     edx, esi
.text:0000000000002B96                 sub     r8d, eax
.text:0000000000002B99                 add     rcx, rdi
.text:0000000000002B9C                 mov     r9d, edx
.text:0000000000002B9F                 mov     rdi, rbx
.text:0000000000002BA2                 or      rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BA6                 mov     esi, 1
.text:0000000000002BAB                 xor     eax, eax
.text:0000000000002BAD                 call    ___sprintf_chk
.text:0000000000002BB2                 mov     rax, rbx
.text:0000000000002BB5                 pop     rbx
.text:0000000000002BB6                 retn
.text:0000000000002BB6 ; } // starts at 2B60
.text:0000000000002BB6 tm_year_str     endp
.text:0000000000002BB6
.text:0000000000002BB6 ; ---------------------------------------------------------------------------
.text:0000000000002BB7                 align 20h
.text:0000000000002BC0
.text:0000000000002BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002BC0
.text:0000000000002BC0
.text:0000000000002BC0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000002BC0                 public main
.text:0000000000002BC0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000002BC0
.text:0000000000002BC0 var_11C         = dword ptr -11Ch
.text:0000000000002BC0 var_118         = qword ptr -118h
.text:0000000000002BC0 var_110         = dword ptr -110h
.text:0000000000002BC0 var_10C         = dword ptr -10Ch
.text:0000000000002BC0 tp              = timespec ptr -108h
.text:0000000000002BC0 var_F8          = qword ptr -0F8h
.text:0000000000002BC0 var_F0          = qword ptr -0F0h
.text:0000000000002BC0 var_E8          = qword ptr -0E8h
.text:0000000000002BC0 var_E0          = qword ptr -0E0h
.text:0000000000002BC0 stat_buf        = stat ptr -0D8h
.text:0000000000002BC0 var_40          = qword ptr -40h
.text:0000000000002BC0
.text:0000000000002BC0 ; __unwind {
.text:0000000000002BC0                 push    r15
.text:0000000000002BC2                 push    r14
.text:0000000000002BC4                 xor     r15d, r15d
.text:0000000000002BC7                 push    r13
.text:0000000000002BC9                 push    r12
.text:0000000000002BCB                 mov     r12d, edi
.text:0000000000002BCE                 push    rbp
.text:0000000000002BCF                 push    rbx
.text:0000000000002BD0                 mov     rbp, rsi
.text:0000000000002BD3                 lea     r13, longopts
.text:0000000000002BDA                 xor     r14d, r14d
.text:0000000000002BDD                 sub     rsp, 0F8h
.text:0000000000002BE4                 mov     rdi, [rsi]
.text:0000000000002BE7                 mov     rax, fs:28h
.text:0000000000002BF0                 mov     [rsp+128h+var_40], rax
.text:0000000000002BF8                 xor     eax, eax
.text:0000000000002BFA                 call    set_program_name
.text:0000000000002BFF                 lea     rsi, aUserProvidedTi+1Dh ; locale
.text:0000000000002C06                 mov     edi, 6          ; category
.text:0000000000002C0B                 call    _setlocale
.text:0000000000002C10                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000002C17                 lea     rdi, domainname ; "coreutils"
.text:0000000000002C1E                 call    _bindtextdomain
.text:0000000000002C23                 lea     rdi, domainname ; "coreutils"
.text:0000000000002C2A                 call    _textdomain
.text:0000000000002C2F                 lea     rdi, close_stdout
.text:0000000000002C36                 call    atexit
.text:0000000000002C3B                 mov     cs:change_times, 0
.text:0000000000002C45                 mov     cs:use_ref, 0
.text:0000000000002C4C                 mov     cs:no_create, 0
.text:0000000000002C53                 nop     dword ptr [rax+rax+00h]
.text:0000000000002C58
.text:0000000000002C58 loc_2C58:                               ; CODE XREF: main+BE↓j
.text:0000000000002C58                                         ; main+E6↓j ...
.text:0000000000002C58                 lea     rdx, shortopts  ; "acd:fhmr:t:"
.text:0000000000002C5F                 xor     r8d, r8d        ; longind
.text:0000000000002C62                 mov     rcx, r13        ; longopts
.text:0000000000002C65                 mov     rsi, rbp        ; argv
.text:0000000000002C68                 mov     edi, r12d       ; argc
.text:0000000000002C6B                 call    _getopt_long
.text:0000000000002C70                 cmp     eax, 0FFFFFFFFh
.text:0000000000002C73                 mov     ebx, eax
.text:0000000000002C75                 jz      loc_2E32
.text:0000000000002C7B                 cmp     ebx, 66h ; 'f'
.text:0000000000002C7E                 jz      short loc_2C58
.text:0000000000002C80                 jle     short loc_2CB0
.text:0000000000002C82                 cmp     ebx, 72h ; 'r'
.text:0000000000002C85                 jz      loc_2DB0
.text:0000000000002C8B                 jg      short loc_2CE0
.text:0000000000002C8D                 cmp     ebx, 68h ; 'h'
.text:0000000000002C90                 jz      loc_2DA0
.text:0000000000002C96                 cmp     ebx, 6Dh ; 'm'
.text:0000000000002C99                 jnz     loc_33D6
.text:0000000000002C9F                 or      cs:change_times, 2
.text:0000000000002CA6                 jmp     short loc_2C58
.text:0000000000002CA6 ; ---------------------------------------------------------------------------
.text:0000000000002CA8                 align 10h
.text:0000000000002CB0
.text:0000000000002CB0 loc_2CB0:                               ; CODE XREF: main+C0↑j
.text:0000000000002CB0                 cmp     ebx, 61h ; 'a'
.text:0000000000002CB3                 jz      loc_2DE0
.text:0000000000002CB9                 jle     short loc_2D38
.text:0000000000002CBB                 cmp     ebx, 63h ; 'c'
.text:0000000000002CBE                 jz      loc_2DD0
.text:0000000000002CC4                 cmp     ebx, 64h ; 'd'
.text:0000000000002CC7                 jnz     loc_33D6
.text:0000000000002CCD                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:0000000000002CD4                 jmp     short loc_2C58
.text:0000000000002CD4 ; ---------------------------------------------------------------------------
.text:0000000000002CD6                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: main+CB↑j
.text:0000000000002CE0                 cmp     ebx, 74h ; 't'
.text:0000000000002CE3                 jz      loc_2DF0
.text:0000000000002CE9                 add     ebx, 0FFFFFF80h
.text:0000000000002CEC                 jnz     loc_33D6
.text:0000000000002CF2                 mov     r9, cs:argmatch_die
.text:0000000000002CF9                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002D00                 lea     rdx, time_args
.text:0000000000002D07                 lea     rcx, time_masks
.text:0000000000002D0E                 lea     rdi, aTime      ; "--time"
.text:0000000000002D15                 mov     r8d, 4
.text:0000000000002D1B                 call    __xargmatch_internal
.text:0000000000002D20                 lea     rdx, time_masks
.text:0000000000002D27                 mov     eax, [rdx+rax*4]
.text:0000000000002D2A                 or      cs:change_times, eax
.text:0000000000002D30                 jmp     loc_2C58
.text:0000000000002D30 ; ---------------------------------------------------------------------------
.text:0000000000002D35                 align 8
.text:0000000000002D38
.text:0000000000002D38 loc_2D38:                               ; CODE XREF: main+F9↑j
.text:0000000000002D38                 cmp     ebx, 0FFFFFF7Dh
.text:0000000000002D3E                 jnz     loc_33A6
.text:0000000000002D44                 lea     rax, aRandySmith ; "Randy Smith"
.text:0000000000002D4B                 push    0
.text:0000000000002D4D                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002D54                 mov     rcx, cs:Version
.text:0000000000002D5B                 lea     r9, aArnoldRobbins ; "Arnold Robbins"
.text:0000000000002D62                 lea     r8, aPaulRubin  ; "Paul Rubin"
.text:0000000000002D69                 push    rax
.text:0000000000002D6A                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:0000000000002D71                 lea     rdx, unk_F7B7
.text:0000000000002D78                 lea     rsi, aTouch     ; "touch"
.text:0000000000002D7F                 push    rax
.text:0000000000002D80                 lea     rax, aJimKingdon ; "Jim Kingdon"
.text:0000000000002D87                 push    rax
.text:0000000000002D88                 xor     eax, eax
.text:0000000000002D8A                 call    version_etc
.text:0000000000002D8F                 add     rsp, 20h
.text:0000000000002D93                 xor     edi, edi        ; status
.text:0000000000002D95                 call    _exit
.text:0000000000002D95 ; ---------------------------------------------------------------------------
.text:0000000000002D9A                 align 20h
.text:0000000000002DA0
.text:0000000000002DA0 loc_2DA0:                               ; CODE XREF: main+D0↑j
.text:0000000000002DA0                 mov     cs:no_dereference, 1
.text:0000000000002DA7                 jmp     loc_2C58
.text:0000000000002DA7 ; ---------------------------------------------------------------------------
.text:0000000000002DAC                 align 10h
.text:0000000000002DB0
.text:0000000000002DB0 loc_2DB0:                               ; CODE XREF: main+C5↑j
.text:0000000000002DB0                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:0000000000002DB7                 mov     cs:use_ref, 1
.text:0000000000002DBE                 mov     cs:ref_file, rax
.text:0000000000002DC5                 jmp     loc_2C58
.text:0000000000002DC5 ; ---------------------------------------------------------------------------
.text:0000000000002DCA                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: main+FE↑j
.text:0000000000002DD0                 mov     cs:no_create, 1
.text:0000000000002DD7                 jmp     loc_2C58
.text:0000000000002DD7 ; ---------------------------------------------------------------------------
.text:0000000000002DDC                 align 20h
.text:0000000000002DE0
.text:0000000000002DE0 loc_2DE0:                               ; CODE XREF: main+F3↑j
.text:0000000000002DE0                 or      cs:change_times, 1
.text:0000000000002DE7                 jmp     loc_2C58
.text:0000000000002DE7 ; ---------------------------------------------------------------------------
.text:0000000000002DEC                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: main+123↑j
.text:0000000000002DF0                 mov     rsi, cs:optarg@@GLIBC_2_2_5
.text:0000000000002DF7                 lea     rdi, newtime
.text:0000000000002DFE                 mov     edx, 6
.text:0000000000002E03                 call    posixtime
.text:0000000000002E08                 test    al, al
.text:0000000000002E0A                 mov     r14d, eax
.text:0000000000002E0D                 jz      loc_3404
.text:0000000000002E13                 mov     qword ptr cs:newtime+8, 0
.text:0000000000002E1E                 movdqa  xmm0, cs:newtime
.text:0000000000002E26                 movaps  cs:xmmword_215130, xmm0
.text:0000000000002E2D                 jmp     loc_2C58
.text:0000000000002E32 ; ---------------------------------------------------------------------------
.text:0000000000002E32
.text:0000000000002E32 loc_2E32:                               ; CODE XREF: main+B5↑j
.text:0000000000002E32                 cmp     cs:change_times, 0
.text:0000000000002E39                 jnz     short loc_2E45
.text:0000000000002E3B                 mov     cs:change_times, 3
.text:0000000000002E45
.text:0000000000002E45 loc_2E45:                               ; CODE XREF: main+279↑j
.text:0000000000002E45                 test    r14b, r14b
.text:0000000000002E48                 movzx   eax, cs:use_ref
.text:0000000000002E4F                 jz      loc_3076
.text:0000000000002E55                 test    r15, r15
.text:0000000000002E58                 jnz     loc_3516
.text:0000000000002E5E                 test    al, al
.text:0000000000002E60                 jnz     loc_3516
.text:0000000000002E66
.text:0000000000002E66 loc_2E66:                               ; CODE XREF: main+4FC↓j
.text:0000000000002E66                                         ; main+50E↓j ...
.text:0000000000002E66                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002E6C                 cmp     eax, r12d
.text:0000000000002E6F                 jz      loc_33B5
.text:0000000000002E75                 mov     byte ptr [rsp+128h+var_11C], 1
.text:0000000000002E7A                 jl      loc_2F50
.text:0000000000002E80                 jmp     loc_317B
.text:0000000000002E85 ; ---------------------------------------------------------------------------
.text:0000000000002E85
.text:0000000000002E85 loc_2E85:                               ; CODE XREF: main+433↓j
.text:0000000000002E85                 xor     r8d, r8d
.text:0000000000002E88                 mov     rdx, r13
.text:0000000000002E8B                 mov     esi, 0FFFFFF9Ch
.text:0000000000002E90                 mov     edi, r15d
.text:0000000000002E93                 mov     byte ptr [rsp+128h+var_118], r10b
.text:0000000000002E98                 call    fdutimensat
.text:0000000000002E9D                 test    r15d, r15d
.text:0000000000002EA0                 mov     edx, eax
.text:0000000000002EA2                 movzx   r10d, byte ptr [rsp+128h+var_118]
.text:0000000000002EA8                 jnz     short loc_2ECC
.text:0000000000002EAA                 xor     edi, edi        ; fd
.text:0000000000002EAC                 mov     byte ptr [rsp+128h+var_110], r10b
.text:0000000000002EB1                 mov     dword ptr [rsp+128h+var_118], edx
.text:0000000000002EB5                 call    _close
.text:0000000000002EBA                 test    eax, eax
.text:0000000000002EBC                 mov     edx, dword ptr [rsp+128h+var_118]
.text:0000000000002EC0                 movzx   r10d, byte ptr [rsp+128h+var_110]
.text:0000000000002EC6                 jnz     loc_31CF
.text:0000000000002ECC
.text:0000000000002ECC loc_2ECC:                               ; CODE XREF: main+2E8↑j
.text:0000000000002ECC                                         ; main+60A↓j
.text:0000000000002ECC                 test    edx, edx
.text:0000000000002ECE                 jz      loc_3160
.text:0000000000002ED4
.text:0000000000002ED4 loc_2ED4:                               ; CODE XREF: main+45D↓j
.text:0000000000002ED4                 test    r14d, r14d
.text:0000000000002ED7                 jnz     loc_3039
.text:0000000000002EDD                 call    ___errno_location
.text:0000000000002EE2                 cmp     cs:no_create, 0
.text:0000000000002EE9                 jz      short loc_2EF4
.text:0000000000002EEB                 cmp     dword ptr [rax], 2
.text:0000000000002EEE                 jz      loc_3160
.text:0000000000002EF4
.text:0000000000002EF4 loc_2EF4:                               ; CODE XREF: main+329↑j
.text:0000000000002EF4                                         ; main+473↓j
.text:0000000000002EF4                 mov     rsi, r13
.text:0000000000002EF7                 mov     edi, 4
.text:0000000000002EFC                 call    quotearg_style
.text:0000000000002F01                 lea     rsi, msgid      ; "setting times of %s"
.text:0000000000002F08                 mov     edx, 5          ; category
.text:0000000000002F0D                 xor     edi, edi        ; domainname
.text:0000000000002F0F                 mov     r14, rax
.text:0000000000002F12                 call    _dcgettext
.text:0000000000002F17                 mov     r13, rax
.text:0000000000002F1A                 call    ___errno_location
.text:0000000000002F1F                 mov     esi, [rax]      ; errnum
.text:0000000000002F21                 mov     rcx, r14
.text:0000000000002F24                 mov     rdx, r13        ; format
.text:0000000000002F27                 xor     edi, edi        ; status
.text:0000000000002F29                 xor     eax, eax
.text:0000000000002F2B                 call    _error
.text:0000000000002F30                 xor     r10d, r10d
.text:0000000000002F33
.text:0000000000002F33 loc_2F33:                               ; CODE XREF: main+4B1↓j
.text:0000000000002F33                                         ; main+5A6↓j ...
.text:0000000000002F33                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000002F39                 and     byte ptr [rsp+128h+var_11C], r10b
.text:0000000000002F3E                 add     eax, 1
.text:0000000000002F41                 cmp     eax, r12d
.text:0000000000002F44                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000002F4A                 jge     loc_317B
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: main+2BA↑j
.text:0000000000002F50                 cdqe
.text:0000000000002F52                 lea     rdi, asc_1023F+3 ; "-"
.text:0000000000002F59                 mov     ecx, 2
.text:0000000000002F5E                 mov     r13, [rbp+rax*8+0]
.text:0000000000002F63                 mov     r15d, 1
.text:0000000000002F69                 mov     rsi, r13
.text:0000000000002F6C                 repe cmpsb
.text:0000000000002F6E                 setnbe  r9b
.text:0000000000002F72                 sbb     r9b, 0
.text:0000000000002F76                 movsx   r14d, r9b
.text:0000000000002F7A                 test    r14d, r14d
.text:0000000000002F7D                 jz      short loc_2F9B
.text:0000000000002F7F                 cmp     cs:no_create, 0
.text:0000000000002F86                 jnz     short loc_2F95
.text:0000000000002F88                 cmp     cs:no_dereference, 0
.text:0000000000002F8F                 jz      loc_32D4
.text:0000000000002F95
.text:0000000000002F95 loc_2F95:                               ; CODE XREF: main+3C6↑j
.text:0000000000002F95                                         ; main+746↓j ...
.text:0000000000002F95                 mov     r15d, ebx
.text:0000000000002F98                 xor     r14d, r14d
.text:0000000000002F9B
.text:0000000000002F9B loc_2F9B:                               ; CODE XREF: main+3BD↑j
.text:0000000000002F9B                                         ; main+731↓j ...
.text:0000000000002F9B                 mov     eax, cs:change_times
.text:0000000000002FA1                 cmp     eax, 3
.text:0000000000002FA4                 jz      short loc_2FC3
.text:0000000000002FA6                 cmp     eax, 2
.text:0000000000002FA9                 jz      loc_316B
.text:0000000000002FAF                 sub     eax, 1
.text:0000000000002FB2                 jnz     loc_33E5
.text:0000000000002FB8                 mov     qword ptr cs:xmmword_215130+8, 3FFFFFFEh
.text:0000000000002FC3
.text:0000000000002FC3 loc_2FC3:                               ; CODE XREF: main+3E4↑j
.text:0000000000002FC3                                         ; main+5B6↓j
.text:0000000000002FC3                 cmp     cs:amtime_now, 0
.text:0000000000002FCA                 lea     rax, newtime
.text:0000000000002FD1                 mov     ecx, 0
.text:0000000000002FD6                 cmovz   rcx, rax
.text:0000000000002FDA                 cmp     r15d, 0FFFFFFFFh
.text:0000000000002FDE                 setz    r10b
.text:0000000000002FE2                 and     r10b, cs:no_dereference
.text:0000000000002FE9                 jnz     loc_31B2
.text:0000000000002FEF                 cmp     r15d, 1
.text:0000000000002FF3                 jnz     loc_2E85
.text:0000000000002FF9                 xor     r8d, r8d
.text:0000000000002FFC                 xor     edx, edx
.text:0000000000002FFE                 mov     esi, 0FFFFFF9Ch
.text:0000000000003003                 mov     edi, 1
.text:0000000000003008                 call    fdutimensat
.text:000000000000300D                 test    eax, eax
.text:000000000000300F                 jz      loc_3160
.text:0000000000003015                 call    ___errno_location
.text:000000000000301A                 cmp     dword ptr [rax], 9
.text:000000000000301D                 jnz     loc_2ED4
.text:0000000000003023                 cmp     cs:no_create, 0
.text:000000000000302A                 jnz     loc_3160
.text:0000000000003030                 test    r14d, r14d
.text:0000000000003033                 jz      loc_2EF4
.text:0000000000003039
.text:0000000000003039 loc_3039:                               ; CODE XREF: main+317↑j
.text:0000000000003039                 mov     rsi, r13
.text:000000000000303C                 mov     edi, 4
.text:0000000000003041                 call    quotearg_style
.text:0000000000003046                 lea     rsi, aCannotTouchS ; "cannot touch %s"
.text:000000000000304D                 mov     r13, rax
.text:0000000000003050                 mov     edx, 5          ; category
.text:0000000000003055                 xor     edi, edi        ; domainname
.text:0000000000003057                 call    _dcgettext
.text:000000000000305C                 mov     rcx, r13
.text:000000000000305F                 mov     rdx, rax        ; format
.text:0000000000003062                 mov     esi, r14d       ; errnum
.text:0000000000003065                 xor     edi, edi        ; status
.text:0000000000003067                 xor     eax, eax
.text:0000000000003069                 call    _error
.text:000000000000306E                 xor     r10d, r10d
.text:0000000000003071                 jmp     loc_2F33
.text:0000000000003076 ; ---------------------------------------------------------------------------
.text:0000000000003076
.text:0000000000003076 loc_3076:                               ; CODE XREF: main+28F↑j
.text:0000000000003076                 test    al, al
.text:0000000000003078                 jnz     loc_321B
.text:000000000000307E                 test    r15, r15
.text:0000000000003081                 jz      loc_3126
.text:0000000000003087                 lea     r13, [rsp+128h+tp]
.text:000000000000308C                 mov     rdi, r13        ; tp
.text:000000000000308F                 call    gettime
.text:0000000000003094                 lea     rdi, newtime
.text:000000000000309B                 mov     rdx, r13
.text:000000000000309E                 mov     rsi, r15
.text:00000000000030A1                 call    get_reldate
.text:00000000000030A6                 cmp     cs:change_times, 3
.text:00000000000030AD                 movdqa  xmm0, cs:newtime
.text:00000000000030B5                 movaps  cs:xmmword_215130, xmm0
.text:00000000000030BC                 jnz     loc_2E66
.text:00000000000030C2                 mov     rax, qword ptr cs:newtime
.text:00000000000030C9                 cmp     rax, [rsp+128h+tp.tv_sec]
.text:00000000000030CE                 jnz     loc_2E66
.text:00000000000030D4                 mov     rdx, qword ptr cs:newtime+8
.text:00000000000030DB                 cmp     rdx, [rsp+128h+tp.tv_nsec]
.text:00000000000030E0                 jnz     loc_2E66
.text:00000000000030E6                 mov     [rsp+128h+var_F0], rdx
.text:00000000000030EB                 lea     rdi, [rsp+128h+var_E8]
.text:00000000000030F0                 lea     rdx, [rsp+128h+var_F8]
.text:00000000000030F5                 xor     rax, 1
.text:00000000000030F9                 mov     rsi, r15
.text:00000000000030FC                 mov     [rsp+128h+var_F8], rax
.text:0000000000003101                 call    get_reldate
.text:0000000000003106                 mov     rax, [rsp+128h+var_F8]
.text:000000000000310B                 cmp     [rsp+128h+var_E8], rax
.text:0000000000003110                 jnz     loc_2E66
.text:0000000000003116                 mov     rax, [rsp+128h+var_F0]
.text:000000000000311B                 cmp     [rsp+128h+var_E0], rax
.text:0000000000003120                 jnz     loc_2E66
.text:0000000000003126
.text:0000000000003126 loc_3126:                               ; CODE XREF: main+4C1↑j
.text:0000000000003126                 mov     eax, r12d
.text:0000000000003129                 sub     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000312F                 sub     eax, 1
.text:0000000000003132                 jg      loc_3336
.text:0000000000003138
.text:0000000000003138 loc_3138:                               ; CODE XREF: main+780↓j
.text:0000000000003138                                         ; main+7A5↓j
.text:0000000000003138                 cmp     cs:change_times, 3
.text:000000000000313F                 jz      loc_332A
.text:0000000000003145                 mov     qword ptr cs:newtime+8, 3FFFFFFFh
.text:0000000000003150                 mov     qword ptr cs:xmmword_215130+8, 3FFFFFFFh
.text:000000000000315B                 jmp     loc_2E66
.text:0000000000003160 ; ---------------------------------------------------------------------------
.text:0000000000003160
.text:0000000000003160 loc_3160:                               ; CODE XREF: main+30E↑j
.text:0000000000003160                                         ; main+32E↑j ...
.text:0000000000003160                 mov     r10d, 1
.text:0000000000003166                 jmp     loc_2F33
.text:000000000000316B ; ---------------------------------------------------------------------------
.text:000000000000316B
.text:000000000000316B loc_316B:                               ; CODE XREF: main+3E9↑j
.text:000000000000316B                 mov     qword ptr cs:newtime+8, 3FFFFFFEh
.text:0000000000003176                 jmp     loc_2FC3
.text:000000000000317B ; ---------------------------------------------------------------------------
.text:000000000000317B
.text:000000000000317B loc_317B:                               ; CODE XREF: main+2C0↑j
.text:000000000000317B                                         ; main+38A↑j
.text:000000000000317B                 movzx   r14d, byte ptr [rsp+128h+var_11C]
.text:0000000000003181                 xor     r14d, 1
.text:0000000000003185                 mov     rdx, [rsp+128h+var_40]
.text:000000000000318D                 xor     rdx, fs:28h
.text:0000000000003196                 movzx   eax, r14b
.text:000000000000319A                 jnz     loc_33E0
.text:00000000000031A0                 add     rsp, 0F8h
.text:00000000000031A7                 pop     rbx
.text:00000000000031A8                 pop     rbp
.text:00000000000031A9                 pop     r12
.text:00000000000031AB                 pop     r13
.text:00000000000031AD                 pop     r14
.text:00000000000031AF                 pop     r15
.text:00000000000031B1                 retn
.text:00000000000031B2 ; ---------------------------------------------------------------------------
.text:00000000000031B2
.text:00000000000031B2 loc_31B2:                               ; CODE XREF: main+429↑j
.text:00000000000031B2                 mov     rdx, r13
.text:00000000000031B5                 mov     r8d, 100h
.text:00000000000031BB                 mov     esi, 0FFFFFF9Ch
.text:00000000000031C0                 mov     edi, r15d
.text:00000000000031C3                 call    fdutimensat
.text:00000000000031C8                 mov     edx, eax
.text:00000000000031CA                 jmp     loc_2ECC
.text:00000000000031CF ; ---------------------------------------------------------------------------
.text:00000000000031CF
.text:00000000000031CF loc_31CF:                               ; CODE XREF: main+306↑j
.text:00000000000031CF                 mov     rsi, r13
.text:00000000000031D2                 mov     edi, 4
.text:00000000000031D7                 mov     byte ptr [rsp+128h+var_118], r10b
.text:00000000000031DC                 call    quotearg_style
.text:00000000000031E1                 lea     rsi, aFailedToCloseS ; "failed to close %s"
.text:00000000000031E8                 mov     edx, 5          ; category
.text:00000000000031ED                 xor     edi, edi        ; domainname
.text:00000000000031EF                 mov     r14, rax
.text:00000000000031F2                 call    _dcgettext
.text:00000000000031F7                 mov     r13, rax
.text:00000000000031FA                 call    ___errno_location
.text:00000000000031FF                 mov     esi, [rax]      ; errnum
.text:0000000000003201                 mov     rcx, r14
.text:0000000000003204                 mov     rdx, r13        ; format
.text:0000000000003207                 xor     edi, edi        ; status
.text:0000000000003209                 xor     eax, eax
.text:000000000000320B                 call    _error
.text:0000000000003210                 movzx   r10d, byte ptr [rsp+128h+var_118]
.text:0000000000003216                 jmp     loc_2F33
.text:000000000000321B ; ---------------------------------------------------------------------------
.text:000000000000321B
.text:000000000000321B loc_321B:                               ; CODE XREF: main+4B8↑j
.text:000000000000321B                 cmp     cs:no_dereference, 0
.text:0000000000003222                 mov     r13, cs:ref_file
.text:0000000000003229                 lea     rdx, [rsp+128h+stat_buf] ; stat_buf
.text:000000000000322E                 mov     edi, 1          ; ver
.text:0000000000003233                 mov     rsi, r13        ; filename
.text:0000000000003236                 jz      loc_331B
.text:000000000000323C                 call    ___lxstat
.text:0000000000003241                 test    eax, eax
.text:0000000000003243                 setnz   al
.text:0000000000003246
.text:0000000000003246 loc_3246:                               ; CODE XREF: main+765↓j
.text:0000000000003246                 test    al, al
.text:0000000000003248                 jnz     loc_34D7
.text:000000000000324E                 mov     rax, [rsp+128h+stat_buf.st_atim.tv_sec]
.text:0000000000003256                 test    r15, r15
.text:0000000000003259                 mov     qword ptr cs:newtime, rax
.text:0000000000003260                 mov     rax, [rsp+128h+stat_buf.st_atim.tv_nsec]
.text:0000000000003268                 mov     qword ptr cs:newtime+8, rax
.text:000000000000326F                 mov     rax, [rsp+128h+stat_buf.st_mtim.tv_sec]
.text:0000000000003277                 mov     qword ptr cs:xmmword_215130, rax
.text:000000000000327E                 mov     rax, [rsp+128h+stat_buf.st_mtim.tv_nsec]
.text:0000000000003286                 mov     qword ptr cs:xmmword_215130+8, rax
.text:000000000000328D                 jz      loc_2E66
.text:0000000000003293                 mov     eax, cs:change_times
.text:0000000000003299                 test    al, 1
.text:000000000000329B                 jz      short loc_32B5
.text:000000000000329D                 lea     rdx, newtime
.text:00000000000032A4                 mov     rsi, r15
.text:00000000000032A7                 mov     rdi, rdx
.text:00000000000032AA                 call    get_reldate
.text:00000000000032AF                 mov     eax, cs:change_times
.text:00000000000032B5
.text:00000000000032B5 loc_32B5:                               ; CODE XREF: main+6DB↑j
.text:00000000000032B5                 test    al, 2
.text:00000000000032B7                 jz      loc_2E66
.text:00000000000032BD                 lea     rdx, xmmword_215130
.text:00000000000032C4                 mov     rsi, r15
.text:00000000000032C7                 mov     rdi, rdx
.text:00000000000032CA                 call    get_reldate
.text:00000000000032CF                 jmp     loc_2E66
.text:00000000000032D4 ; ---------------------------------------------------------------------------
.text:00000000000032D4
.text:00000000000032D4 loc_32D4:                               ; CODE XREF: main+3CF↑j
.text:00000000000032D4                 xor     edi, edi        ; fd2
.text:00000000000032D6                 mov     ecx, 1B6h
.text:00000000000032DB                 mov     edx, 941h       ; oflag
.text:00000000000032E0                 mov     rsi, r13        ; file
.text:00000000000032E3                 xor     r14d, r14d
.text:00000000000032E6                 call    fd_reopen
.text:00000000000032EB                 cmp     eax, 0FFFFFFFFh
.text:00000000000032EE                 mov     r15d, eax
.text:00000000000032F1                 jnz     loc_2F9B
.text:00000000000032F7                 call    ___errno_location
.text:00000000000032FC                 mov     r14d, [rax]
.text:00000000000032FF                 lea     eax, [r14-15h]
.text:0000000000003303                 cmp     eax, 1
.text:0000000000003306                 jbe     loc_2F95
.text:000000000000330C                 cmp     r14d, 1
.text:0000000000003310                 jnz     loc_2F9B
.text:0000000000003316                 jmp     loc_2F95
.text:000000000000331B ; ---------------------------------------------------------------------------
.text:000000000000331B
.text:000000000000331B loc_331B:                               ; CODE XREF: main+676↑j
.text:000000000000331B                 call    ___xstat
.text:0000000000003320                 test    eax, eax
.text:0000000000003322                 setnz   al
.text:0000000000003325                 jmp     loc_3246
.text:000000000000332A ; ---------------------------------------------------------------------------
.text:000000000000332A
.text:000000000000332A loc_332A:                               ; CODE XREF: main+57F↑j
.text:000000000000332A                 mov     cs:amtime_now, 1
.text:0000000000003331                 jmp     loc_2E66
.text:0000000000003336 ; ---------------------------------------------------------------------------
.text:0000000000003336
.text:0000000000003336 loc_3336:                               ; CODE XREF: main+572↑j
.text:0000000000003336                 call    posix2_version
.text:000000000000333B                 cmp     eax, 30DAFh
.text:0000000000003340                 jg      loc_3138
.text:0000000000003346                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000334D                 lea     rdi, newtime
.text:0000000000003354                 mov     edx, 9
.text:0000000000003359                 mov     rsi, [rbp+rax*8+0]
.text:000000000000335E                 call    posixtime
.text:0000000000003363                 test    al, al
.text:0000000000003365                 jz      loc_3138
.text:000000000000336B                 mov     qword ptr cs:newtime+8, 0
.text:0000000000003376                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:000000000000337D                 movdqa  xmm0, cs:newtime
.text:0000000000003385                 movaps  cs:xmmword_215130, xmm0
.text:000000000000338C                 call    _getenv
.text:0000000000003391                 test    rax, rax
.text:0000000000003394                 jz      loc_343A
.text:000000000000339A
.text:000000000000339A loc_339A:                               ; CODE XREF: main+889↓j
.text:000000000000339A                                         ; main+912↓j
.text:000000000000339A                 add     cs:optind@@GLIBC_2_2_5, 1
.text:00000000000033A1                 jmp     loc_2E66
.text:00000000000033A6 ; ---------------------------------------------------------------------------
.text:00000000000033A6
.text:00000000000033A6 loc_33A6:                               ; CODE XREF: main+17E↑j
.text:00000000000033A6                 cmp     ebx, 0FFFFFF7Eh
.text:00000000000033AC                 jnz     short loc_33D6
.text:00000000000033AE                 xor     edi, edi        ; status
.text:00000000000033B0                 call    usage
.text:00000000000033B5 ; ---------------------------------------------------------------------------
.text:00000000000033B5
.text:00000000000033B5 loc_33B5:                               ; CODE XREF: main+2AF↑j
.text:00000000000033B5                 lea     rsi, aMissingFileOpe ; "missing file operand"
.text:00000000000033BC                 mov     edx, 5          ; category
.text:00000000000033C1
.text:00000000000033C1 loc_33C1:                               ; CODE XREF: main+962↓j
.text:00000000000033C1                 xor     edi, edi        ; domainname
.text:00000000000033C3                 call    _dcgettext
.text:00000000000033C8                 xor     esi, esi        ; errnum
.text:00000000000033CA                 mov     rdx, rax        ; format
.text:00000000000033CD                 xor     edi, edi        ; status
.text:00000000000033CF                 xor     eax, eax
.text:00000000000033D1                 call    _error
.text:00000000000033D6
.text:00000000000033D6 loc_33D6:                               ; CODE XREF: main+D9↑j
.text:00000000000033D6                                         ; main+107↑j ...
.text:00000000000033D6                 mov     edi, 1          ; status
.text:00000000000033DB                 call    usage
.text:00000000000033E0 ; ---------------------------------------------------------------------------
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: main+5DA↑j
.text:00000000000033E0                 call    ___stack_chk_fail
.text:00000000000033E5 ; ---------------------------------------------------------------------------
.text:00000000000033E5
.text:00000000000033E5 loc_33E5:                               ; CODE XREF: main+3F2↑j
.text:00000000000033E5                 lea     rcx, __PRETTY_FUNCTION___6981 ; "touch"
.text:00000000000033EC                 lea     rsi, file       ; "../coreutils-8.31/src/touch.c"
.text:00000000000033F3                 lea     rdi, assertion  ; "change_times == CH_ATIME"
.text:00000000000033FA                 mov     edx, 99h        ; line
.text:00000000000033FF                 call    ___assert_fail
.text:0000000000003404 ; ---------------------------------------------------------------------------
.text:0000000000003404
.text:0000000000003404 loc_3404:                               ; CODE XREF: main+24D↑j
.text:0000000000003404                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:000000000000340B                 call    quote
.text:0000000000003410                 lea     rsi, aInvalidDateFor ; "invalid date format %s"
.text:0000000000003417                 mov     rbx, rax
.text:000000000000341A                 mov     edx, 5          ; category
.text:000000000000341F                 xor     edi, edi        ; domainname
.text:0000000000003421                 call    _dcgettext
.text:0000000000003426                 mov     rcx, rbx
.text:0000000000003429                 mov     rdx, rax        ; format
.text:000000000000342C                 xor     esi, esi        ; errnum
.text:000000000000342E                 mov     edi, 1          ; status
.text:0000000000003433                 xor     eax, eax
.text:0000000000003435                 call    _error
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: main+7D4↑j
.text:000000000000343A                 lea     rdi, newtime    ; timer
.text:0000000000003441                 call    _localtime
.text:0000000000003446                 test    rax, rax
.text:0000000000003449                 jz      loc_339A
.text:000000000000344F                 mov     r10d, [rax]
.text:0000000000003452                 mov     r9d, [rax+4]
.text:0000000000003456                 lea     rsi, aWarningTouchSI ; "warning: 'touch %s' is obsolete; use 't"...
.text:000000000000345D                 mov     r15d, [rax+8]
.text:0000000000003461                 mov     r14d, [rax+0Ch]
.text:0000000000003465                 xor     edi, edi        ; domainname
.text:0000000000003467                 mov     edx, [rax+10h]
.text:000000000000346A                 movsxd  r13, dword ptr [rax+14h]
.text:000000000000346E                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000003475                 mov     [rsp+128h+var_10C], r10d
.text:000000000000347A                 mov     [rsp+128h+var_110], r9d
.text:000000000000347F                 add     edx, 1
.text:0000000000003482                 mov     [rsp+128h+var_11C], edx
.text:0000000000003486                 mov     edx, 5          ; category
.text:000000000000348B                 add     r13, 76Ch
.text:0000000000003492                 mov     rcx, [rbp+rax*8+0]
.text:0000000000003497                 mov     [rsp+128h+var_118], rcx
.text:000000000000349C                 call    _dcgettext
.text:00000000000034A1                 mov     r10d, [rsp+128h+var_10C]
.text:00000000000034A6                 mov     rdx, rax        ; format
.text:00000000000034A9                 mov     r8, r13
.text:00000000000034AC                 xor     esi, esi        ; errnum
.text:00000000000034AE                 xor     edi, edi        ; status
.text:00000000000034B0                 xor     eax, eax
.text:00000000000034B2                 push    r10
.text:00000000000034B4                 mov     r9d, [rsp+130h+var_110]
.text:00000000000034B9                 push    r9
.text:00000000000034BB                 push    r15
.text:00000000000034BD                 push    r14
.text:00000000000034BF                 mov     r9d, [rsp+148h+var_11C]
.text:00000000000034C4                 mov     rcx, [rsp+148h+var_118]
.text:00000000000034C9                 call    _error
.text:00000000000034CE                 add     rsp, 20h
.text:00000000000034D2                 jmp     loc_339A
.text:00000000000034D7 ; ---------------------------------------------------------------------------
.text:00000000000034D7
.text:00000000000034D7 loc_34D7:                               ; CODE XREF: main+688↑j
.text:00000000000034D7                 mov     rsi, r13
.text:00000000000034DA                 mov     edi, 4
.text:00000000000034DF                 call    quotearg_style
.text:00000000000034E4                 lea     rsi, aFailedToGetAtt ; "failed to get attributes of %s"
.text:00000000000034EB                 mov     edx, 5          ; category
.text:00000000000034F0                 xor     edi, edi        ; domainname
.text:00000000000034F2                 mov     rbp, rax
.text:00000000000034F5                 call    _dcgettext
.text:00000000000034FA                 mov     rbx, rax
.text:00000000000034FD                 call    ___errno_location
.text:0000000000003502                 mov     esi, [rax]      ; errnum
.text:0000000000003504                 mov     rcx, rbp
.text:0000000000003507                 mov     rdx, rbx        ; format
.text:000000000000350A                 mov     edi, 1          ; status
.text:000000000000350F                 xor     eax, eax
.text:0000000000003511                 call    _error
.text:0000000000003516
.text:0000000000003516 loc_3516:                               ; CODE XREF: main+298↑j
.text:0000000000003516                                         ; main+2A0↑j
.text:0000000000003516                 mov     edx, 5
.text:000000000000351B                 lea     rsi, aCannotSpecifyT ; "cannot specify times from more than one"...
.text:0000000000003522                 jmp     loc_33C1
.text:0000000000003522 ; } // starts at 2BC0
.text:0000000000003522 main            endp
.text:0000000000003522
.text:0000000000003522 ; ---------------------------------------------------------------------------
.text:0000000000003527                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003530
.text:0000000000003530 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003530                 public start
.text:0000000000003530 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 xor     ebp, ebp
.text:0000000000003532                 mov     r9, rdx         ; rtld_fini
.text:0000000000003535                 pop     rsi             ; argc
.text:0000000000003536                 mov     rdx, rsp        ; ubp_av
.text:0000000000003539                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000353D                 push    rax
.text:000000000000353E                 push    rsp             ; stack_end
.text:000000000000353F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003546                 lea     rcx, __libc_csu_init ; init
.text:000000000000354D                 lea     rdi, main       ; main
.text:0000000000003554                 call    cs:__libc_start_main_ptr
.text:000000000000355A                 hlt
.text:000000000000355A ; } // starts at 3530
.text:000000000000355A start           endp
.text:000000000000355A
.text:000000000000355A ; ---------------------------------------------------------------------------
.text:000000000000355B                 align 20h
.text:0000000000003560
.text:0000000000003560 ; =============== S U B R O U T I N E =======================================
.text:0000000000003560
.text:0000000000003560 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003560
.text:0000000000003560 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_3613↓p
.text:0000000000003560                 lea     rdi, __bss_start
.text:0000000000003567                 push    rbp
.text:0000000000003568                 lea     rax, __bss_start
.text:000000000000356F                 cmp     rax, rdi
.text:0000000000003572                 mov     rbp, rsp
.text:0000000000003575                 jz      short loc_3590
.text:0000000000003577                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000357E                 test    rax, rax
.text:0000000000003581                 jz      short loc_3590
.text:0000000000003583                 pop     rbp
.text:0000000000003584                 jmp     rax
.text:0000000000003584 ; ---------------------------------------------------------------------------
.text:0000000000003586                 align 10h
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003590                                         ; deregister_tm_clones+21↑j
.text:0000000000003590                 pop     rbp
.text:0000000000003591                 retn
.text:0000000000003591 deregister_tm_clones endp
.text:0000000000003591
.text:0000000000003591 ; ---------------------------------------------------------------------------
.text:0000000000003592                 align 20h
.text:00000000000035A0
.text:00000000000035A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035A0
.text:00000000000035A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000035A0
.text:00000000000035A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000035A0                 lea     rdi, __bss_start
.text:00000000000035A7                 lea     rsi, __bss_start
.text:00000000000035AE                 push    rbp
.text:00000000000035AF                 sub     rsi, rdi
.text:00000000000035B2                 mov     rbp, rsp
.text:00000000000035B5                 sar     rsi, 3
.text:00000000000035B9                 mov     rax, rsi
.text:00000000000035BC                 shr     rax, 3Fh
.text:00000000000035C0                 add     rsi, rax
.text:00000000000035C3                 sar     rsi, 1
.text:00000000000035C6                 jz      short loc_35E0
.text:00000000000035C8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000035CF                 test    rax, rax
.text:00000000000035D2                 jz      short loc_35E0
.text:00000000000035D4                 pop     rbp
.text:00000000000035D5                 jmp     rax
.text:00000000000035D5 ; ---------------------------------------------------------------------------
.text:00000000000035D7                 align 20h
.text:00000000000035E0
.text:00000000000035E0 loc_35E0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000035E0                                         ; register_tm_clones+32↑j
.text:00000000000035E0                 pop     rbp
.text:00000000000035E1                 retn
.text:00000000000035E1 register_tm_clones endp
.text:00000000000035E1
.text:00000000000035E1 ; ---------------------------------------------------------------------------
.text:00000000000035E2                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0 ; Attributes: info_from_lumina
.text:00000000000035F0
.text:00000000000035F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000035F0                 cmp     cs:completed_7697, 0
.text:00000000000035F7                 jnz     short locret_3628
.text:00000000000035F9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000003601                 push    rbp
.text:0000000000003602                 mov     rbp, rsp
.text:0000000000003605                 jz      short loc_3613
.text:0000000000003607                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000360E                 call    __cxa_finalize
.text:0000000000003613
.text:0000000000003613 loc_3613:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000003613                 call    deregister_tm_clones
.text:0000000000003618                 mov     cs:completed_7697, 1
.text:000000000000361F                 pop     rbp
.text:0000000000003620                 retn
.text:0000000000003620 ; ---------------------------------------------------------------------------
.text:0000000000003621                 align 8
.text:0000000000003628
.text:0000000000003628 locret_3628:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000003628                 rep retn
.text:0000000000003628 __do_global_dtors_aux endp
.text:0000000000003628
.text:0000000000003628 ; ---------------------------------------------------------------------------
.text:000000000000362A                 align 10h
.text:0000000000003630
.text:0000000000003630 ; =============== S U B R O U T I N E =======================================
.text:0000000000003630
.text:0000000000003630 ; Attributes: bp-based frame
.text:0000000000003630
.text:0000000000003630 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003630                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003630                 push    rbp
.text:0000000000003631                 mov     rbp, rsp
.text:0000000000003634                 pop     rbp
.text:0000000000003635                 jmp     register_tm_clones
.text:0000000000003635 frame_dummy     endp
.text:0000000000003635
.text:0000000000003635 ; ---------------------------------------------------------------------------
.text:000000000000363A                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640
.text:0000000000003640 get_reldate     proc near               ; CODE XREF: main+4E1↑p
.text:0000000000003640                                         ; main+541↑p ...
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 push    rbx
.text:0000000000003641                 mov     rbx, rsi
.text:0000000000003644                 call    parse_datetime
.text:0000000000003649                 test    al, al
.text:000000000000364B                 jz      short loc_364F
.text:000000000000364D                 pop     rbx
.text:000000000000364E                 retn
.text:000000000000364F ; ---------------------------------------------------------------------------
.text:000000000000364F
.text:000000000000364F loc_364F:                               ; CODE XREF: get_reldate+B↑j
.text:000000000000364F                 mov     rdi, rbx
.text:0000000000003652                 call    quote
.text:0000000000003657                 lea     rsi, aInvalidDateFor ; "invalid date format %s"
.text:000000000000365E                 mov     rbx, rax
.text:0000000000003661                 mov     edx, 5          ; category
.text:0000000000003666                 xor     edi, edi        ; domainname
.text:0000000000003668                 call    _dcgettext
.text:000000000000366D                 mov     rcx, rbx
.text:0000000000003670                 mov     rdx, rax        ; format
.text:0000000000003673                 xor     esi, esi        ; errnum
.text:0000000000003675                 mov     edi, 1          ; status
.text:000000000000367A                 xor     eax, eax
.text:000000000000367C                 call    _error
.text:000000000000367C ; } // starts at 3640
.text:0000000000003681                 nop     dword ptr [rax+rax+00h]
.text:0000000000003686                 db      2Eh
.text:0000000000003686                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003686 get_reldate     endp ; sp-analysis failed
.text:0000000000003686
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690 ; Attributes: noreturn
.text:0000000000003690
.text:0000000000003690 ; void __fastcall __noreturn usage(int status)
.text:0000000000003690                 public usage
.text:0000000000003690 usage           proc near               ; CODE XREF: main+7F0↑p
.text:0000000000003690                                         ; main+81B↑p ...
.text:0000000000003690
.text:0000000000003690 var_A8          = qword ptr -0A8h
.text:0000000000003690 var_A0          = qword ptr -0A0h
.text:0000000000003690 var_98          = qword ptr -98h
.text:0000000000003690 var_90          = qword ptr -90h
.text:0000000000003690 var_88          = qword ptr -88h
.text:0000000000003690 var_80          = qword ptr -80h
.text:0000000000003690 var_78          = qword ptr -78h
.text:0000000000003690 var_70          = qword ptr -70h
.text:0000000000003690 var_68          = qword ptr -68h
.text:0000000000003690 var_60          = qword ptr -60h
.text:0000000000003690 var_58          = qword ptr -58h
.text:0000000000003690 var_50          = qword ptr -50h
.text:0000000000003690 var_48          = qword ptr -48h
.text:0000000000003690 var_40          = qword ptr -40h
.text:0000000000003690 var_30          = qword ptr -30h
.text:0000000000003690
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 push    r13
.text:0000000000003692                 push    r12
.text:0000000000003694                 mov     edx, 5          ; category
.text:0000000000003699                 push    rbp
.text:000000000000369A                 push    rbx
.text:000000000000369B                 mov     ebp, edi
.text:000000000000369D                 sub     rsp, 88h
.text:00000000000036A4                 mov     rbx, cs:program_name
.text:00000000000036AB                 mov     rax, fs:28h
.text:00000000000036B4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000036B9                 xor     eax, eax
.text:00000000000036BB                 test    edi, edi
.text:00000000000036BD                 jz      short loc_36ED
.text:00000000000036BF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000036C6                 xor     edi, edi        ; domainname
.text:00000000000036C8                 call    _dcgettext
.text:00000000000036CD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000036D4                 mov     rdx, rax
.text:00000000000036D7                 mov     rcx, rbx
.text:00000000000036DA                 mov     esi, 1
.text:00000000000036DF                 xor     eax, eax
.text:00000000000036E1                 call    ___fprintf_chk
.text:00000000000036E6
.text:00000000000036E6 loc_36E6:                               ; CODE XREF: usage+336↓j
.text:00000000000036E6                 mov     edi, ebp        ; status
.text:00000000000036E8                 call    _exit
.text:00000000000036ED ; ---------------------------------------------------------------------------
.text:00000000000036ED
.text:00000000000036ED loc_36ED:                               ; CODE XREF: usage+2D↑j
.text:00000000000036ED                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... FILE...\n"
.text:00000000000036F4                 xor     edi, edi        ; domainname
.text:00000000000036F6                 call    _dcgettext
.text:00000000000036FB                 mov     rdx, rbx
.text:00000000000036FE                 mov     rsi, rax
.text:0000000000003701                 mov     edi, 1
.text:0000000000003706                 xor     eax, eax
.text:0000000000003708                 call    ___printf_chk
.text:000000000000370D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003714                 lea     rsi, aUpdateTheAcces ; "Update the access and modification time"...
.text:000000000000371B                 mov     edx, 5          ; category
.text:0000000000003720                 xor     edi, edi        ; domainname
.text:0000000000003722                 call    _dcgettext
.text:0000000000003727                 mov     rsi, rbx        ; stream
.text:000000000000372A                 mov     rdi, rax        ; s
.text:000000000000372D                 call    _fputs_unlocked
.text:0000000000003732                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003739                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000003740                 mov     edx, 5          ; category
.text:0000000000003745                 xor     edi, edi        ; domainname
.text:0000000000003747                 call    _dcgettext
.text:000000000000374C                 mov     rsi, rbx        ; stream
.text:000000000000374F                 mov     rdi, rax        ; s
.text:0000000000003752                 call    _fputs_unlocked
.text:0000000000003757                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000375E                 lea     rsi, aAChangeOnlyThe ; "  -a                     change only th"...
.text:0000000000003765                 mov     edx, 5          ; category
.text:000000000000376A                 xor     edi, edi        ; domainname
.text:000000000000376C                 call    _dcgettext
.text:0000000000003771                 mov     rsi, rbx        ; stream
.text:0000000000003774                 mov     rdi, rax        ; s
.text:0000000000003777                 call    _fputs_unlocked
.text:000000000000377C                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003783                 lea     rsi, aHNoDereference ; "  -h, --no-dereference   affect each sy"...
.text:000000000000378A                 mov     edx, 5          ; category
.text:000000000000378F                 xor     edi, edi        ; domainname
.text:0000000000003791                 call    _dcgettext
.text:0000000000003796                 mov     rsi, rbx        ; stream
.text:0000000000003799                 mov     rdi, rax        ; s
.text:000000000000379C                 call    _fputs_unlocked
.text:00000000000037A1                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037A8                 lea     rsi, aRReferenceFile ; "  -r, --reference=FILE   use this file'"...
.text:00000000000037AF                 mov     edx, 5          ; category
.text:00000000000037B4                 xor     edi, edi        ; domainname
.text:00000000000037B6                 call    _dcgettext
.text:00000000000037BB                 mov     rsi, rbx        ; stream
.text:00000000000037BE                 mov     rdi, rax        ; s
.text:00000000000037C1                 call    _fputs_unlocked
.text:00000000000037C6                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037CD                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000037D4                 mov     edx, 5          ; category
.text:00000000000037D9                 xor     edi, edi        ; domainname
.text:00000000000037DB                 call    _dcgettext
.text:00000000000037E0                 mov     rsi, rbx        ; stream
.text:00000000000037E3                 mov     rdi, rax        ; s
.text:00000000000037E6                 call    _fputs_unlocked
.text:00000000000037EB                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000037F2                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000037F9                 mov     edx, 5          ; category
.text:00000000000037FE                 xor     edi, edi        ; domainname
.text:0000000000003800                 call    _dcgettext
.text:0000000000003805                 mov     rsi, rbx        ; stream
.text:0000000000003808                 mov     rdi, rax        ; s
.text:000000000000380B                 call    _fputs_unlocked
.text:0000000000003810                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003817                 lea     rsi, aNoteThatTheDAn ; "\nNote that the -d and -t options accep"...
.text:000000000000381E                 mov     edx, 5          ; category
.text:0000000000003823                 xor     edi, edi        ; domainname
.text:0000000000003825                 call    _dcgettext
.text:000000000000382A                 mov     rsi, rbx        ; stream
.text:000000000000382D                 mov     rdi, rax        ; s
.text:0000000000003830                 lea     rbx, aTouch     ; "touch"
.text:0000000000003837                 call    _fputs_unlocked
.text:000000000000383C                 lea     rax, asc_F741   ; "["
.text:0000000000003843                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000384A                 mov     [rsp+0A8h+var_48], 0
.text:0000000000003853                 mov     [rsp+0A8h+var_40], 0
.text:000000000000385C                 mov     rdx, rsp
.text:000000000000385F                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000003863                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000386A                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000386F                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000003876                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000387B                 lea     rax, domainname ; "coreutils"
.text:0000000000003882                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003887                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000388E                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003893                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000389A                 mov     [rsp+0A8h+var_58], rcx
.text:000000000000389F                 mov     [rsp+0A8h+var_90], rax
.text:00000000000038A4                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000038AB                 mov     [rsp+0A8h+var_88], rax
.text:00000000000038B0                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000038B7                 mov     [rsp+0A8h+var_80], rax
.text:00000000000038BC                 mov     [rsp+0A8h+var_70], rax
.text:00000000000038C1                 mov     [rsp+0A8h+var_60], rax
.text:00000000000038C6                 mov     [rsp+0A8h+var_50], rax
.text:00000000000038CB                 nop     dword ptr [rax+rax+00h]
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: usage+25D↓j
.text:00000000000038D0                 add     rdx, 10h
.text:00000000000038D4                 mov     rdi, [rdx]
.text:00000000000038D7                 test    rdi, rdi
.text:00000000000038DA                 jz      short loc_38EF
.text:00000000000038DC                 mov     ecx, 6
.text:00000000000038E1                 mov     rsi, rbx
.text:00000000000038E4                 repe cmpsb
.text:00000000000038E6                 setnbe  al
.text:00000000000038E9                 sbb     al, 0
.text:00000000000038EB                 test    al, al
.text:00000000000038ED                 jnz     short loc_38D0
.text:00000000000038EF
.text:00000000000038EF loc_38EF:                               ; CODE XREF: usage+24A↑j
.text:00000000000038EF                 mov     r12, [rdx+8]
.text:00000000000038F3                 xor     edi, edi        ; domainname
.text:00000000000038F5                 mov     edx, 5          ; category
.text:00000000000038FA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003901                 test    r12, r12
.text:0000000000003904                 jz      loc_39CB
.text:000000000000390A                 call    _dcgettext
.text:000000000000390F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003916                 lea     rdx, unk_F7B7
.text:000000000000391D                 mov     rsi, rax
.text:0000000000003920                 mov     edi, 1
.text:0000000000003925                 xor     eax, eax
.text:0000000000003927                 call    ___printf_chk
.text:000000000000392C                 xor     esi, esi        ; locale
.text:000000000000392E                 mov     edi, 5          ; category
.text:0000000000003933                 call    _setlocale
.text:0000000000003938                 test    rax, rax
.text:000000000000393B                 jz      short loc_3959
.text:000000000000393D                 lea     rsi, s2         ; "en_"
.text:0000000000003944                 mov     edx, 3          ; n
.text:0000000000003949                 mov     rdi, rax        ; s1
.text:000000000000394C                 call    _strncmp
.text:0000000000003951                 test    eax, eax
.text:0000000000003953                 jnz     loc_3A60
.text:0000000000003959
.text:0000000000003959 loc_3959:                               ; CODE XREF: usage+2AB↑j
.text:0000000000003959                                         ; usage+3F5↓j
.text:0000000000003959                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003960                 xor     edi, edi        ; domainname
.text:0000000000003962                 mov     edx, 5          ; category
.text:0000000000003967                 call    _dcgettext
.text:000000000000396C                 lea     rcx, aTouch     ; "touch"
.text:0000000000003973                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000397A                 mov     rsi, rax
.text:000000000000397D                 mov     edi, 1
.text:0000000000003982                 xor     eax, eax
.text:0000000000003984                 call    ___printf_chk
.text:0000000000003989                 cmp     r12, rbx
.text:000000000000398C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003993                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:000000000000399A                 cmovz   rbx, rcx
.text:000000000000399E
.text:000000000000399E loc_399E:                               ; CODE XREF: usage+3C4↓j
.text:000000000000399E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000039A5                 xor     edi, edi        ; domainname
.text:00000000000039A7                 mov     edx, 5          ; category
.text:00000000000039AC                 call    _dcgettext
.text:00000000000039B1                 mov     rcx, rbx
.text:00000000000039B4                 mov     rsi, rax
.text:00000000000039B7                 mov     rdx, r12
.text:00000000000039BA                 mov     edi, 1
.text:00000000000039BF                 xor     eax, eax
.text:00000000000039C1                 call    ___printf_chk
.text:00000000000039C6                 jmp     loc_36E6
.text:00000000000039CB ; ---------------------------------------------------------------------------
.text:00000000000039CB
.text:00000000000039CB loc_39CB:                               ; CODE XREF: usage+274↑j
.text:00000000000039CB                 call    _dcgettext
.text:00000000000039D0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000039D7                 lea     rdx, unk_F7B7
.text:00000000000039DE                 mov     rsi, rax
.text:00000000000039E1                 mov     edi, 1
.text:00000000000039E6                 xor     eax, eax
.text:00000000000039E8                 call    ___printf_chk
.text:00000000000039ED                 xor     esi, esi        ; locale
.text:00000000000039EF                 mov     edi, 5          ; category
.text:00000000000039F4                 call    _setlocale
.text:00000000000039F9                 test    rax, rax
.text:00000000000039FC                 jz      short loc_3A16
.text:00000000000039FE                 lea     rsi, s2         ; "en_"
.text:0000000000003A05                 mov     edx, 3          ; n
.text:0000000000003A0A                 mov     rdi, rax        ; s1
.text:0000000000003A0D                 call    _strncmp
.text:0000000000003A12                 test    eax, eax
.text:0000000000003A14                 jnz     short loc_3A59
.text:0000000000003A16
.text:0000000000003A16 loc_3A16:                               ; CODE XREF: usage+36C↑j
.text:0000000000003A16                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003A1D                 mov     edx, 5          ; category
.text:0000000000003A22                 xor     edi, edi        ; domainname
.text:0000000000003A24                 lea     r12, aTouch     ; "touch"
.text:0000000000003A2B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003A32                 call    _dcgettext
.text:0000000000003A37                 lea     rcx, aTouch     ; "touch"
.text:0000000000003A3E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003A45                 mov     rsi, rax
.text:0000000000003A48                 mov     edi, 1
.text:0000000000003A4D                 xor     eax, eax
.text:0000000000003A4F                 call    ___printf_chk
.text:0000000000003A54                 jmp     loc_399E
.text:0000000000003A59 ; ---------------------------------------------------------------------------
.text:0000000000003A59
.text:0000000000003A59 loc_3A59:                               ; CODE XREF: usage+384↑j
.text:0000000000003A59                 lea     r12, aTouch     ; "touch"
.text:0000000000003A60
.text:0000000000003A60 loc_3A60:                               ; CODE XREF: usage+2C3↑j
.text:0000000000003A60                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000003A67                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000003A6E                 xor     edi, edi        ; domainname
.text:0000000000003A70                 mov     edx, 5          ; category
.text:0000000000003A75                 call    _dcgettext
.text:0000000000003A7A                 mov     rsi, r13        ; stream
.text:0000000000003A7D                 mov     rdi, rax        ; s
.text:0000000000003A80                 call    _fputs_unlocked
.text:0000000000003A85                 jmp     loc_3959
.text:0000000000003A85 ; } // starts at 3690
.text:0000000000003A85 usage           endp
.text:0000000000003A85
.text:0000000000003A85 ; ---------------------------------------------------------------------------
.text:0000000000003A8A                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90 ; Attributes: noreturn
.text:0000000000003A90
.text:0000000000003A90 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 mov     edi, 1          ; status
.text:0000000000003A95                 jmp     usage
.text:0000000000003A95 ; } // starts at 3A90
.text:0000000000003A95 __argmatch_die  endp
.text:0000000000003A95
.text:0000000000003A95 ; ---------------------------------------------------------------------------
.text:0000000000003A9A                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0 ; Attributes: info_from_lumina
.text:0000000000003AA0
.text:0000000000003AA0 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003AA0                 public argmatch
.text:0000000000003AA0 argmatch        proc near               ; CODE XREF: __xargmatch_internal+2C↓p
.text:0000000000003AA0
.text:0000000000003AA0 var_58          = qword ptr -58h
.text:0000000000003AA0 s2              = qword ptr -50h
.text:0000000000003AA0 var_41          = byte ptr -41h
.text:0000000000003AA0 var_40          = qword ptr -40h
.text:0000000000003AA0
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 push    r15
.text:0000000000003AA2                 push    r14
.text:0000000000003AA4                 mov     r15, rsi
.text:0000000000003AA7                 push    r13
.text:0000000000003AA9                 push    r12
.text:0000000000003AAB                 mov     r13, rcx
.text:0000000000003AAE                 push    rbp
.text:0000000000003AAF                 push    rbx
.text:0000000000003AB0                 mov     rbp, rdx
.text:0000000000003AB3                 sub     rsp, 28h
.text:0000000000003AB7                 mov     [rsp+58h+s2], rdi
.text:0000000000003ABC                 mov     [rsp+58h+var_40], rdx
.text:0000000000003AC1                 call    _strlen
.text:0000000000003AC6                 mov     r14, [r15]
.text:0000000000003AC9                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000003AD1                 test    r14, r14
.text:0000000000003AD4                 jz      loc_3B8D
.text:0000000000003ADA                 mov     r12, rax
.text:0000000000003ADD                 mov     [rsp+58h+var_41], 0
.text:0000000000003AE2                 xor     ebx, ebx
.text:0000000000003AE4                 jmp     short loc_3B37
.text:0000000000003AE4 ; ---------------------------------------------------------------------------
.text:0000000000003AE6                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: argmatch+BD↓j
.text:0000000000003AF0                 mov     rax, [rsp+58h+var_40]
.text:0000000000003AF5                 test    rax, rax
.text:0000000000003AF8                 jz      loc_3BA0
.text:0000000000003AFE                 mov     rdi, [rsp+58h+var_58]
.text:0000000000003B02                 mov     rdx, r13        ; n
.text:0000000000003B05                 mov     rsi, rbp        ; s2
.text:0000000000003B08                 imul    rdi, r13
.text:0000000000003B0C                 add     rdi, rax        ; s1
.text:0000000000003B0F                 call    _memcmp
.text:0000000000003B14                 test    eax, eax
.text:0000000000003B16                 movzx   eax, [rsp+58h+var_41]
.text:0000000000003B1B                 mov     ecx, 1
.text:0000000000003B20                 cmovnz  eax, ecx
.text:0000000000003B23                 mov     [rsp+58h+var_41], al
.text:0000000000003B27
.text:0000000000003B27 loc_3B27:                               ; CODE XREF: argmatch+A9↓j
.text:0000000000003B27                                         ; argmatch+105↓j
.text:0000000000003B27                 add     rbx, 1
.text:0000000000003B2B                 add     rbp, r13
.text:0000000000003B2E                 mov     r14, [r15+rbx*8]
.text:0000000000003B32                 test    r14, r14
.text:0000000000003B35                 jz      short loc_3B78
.text:0000000000003B37
.text:0000000000003B37 loc_3B37:                               ; CODE XREF: argmatch+44↑j
.text:0000000000003B37                                         ; argmatch+D1↓j
.text:0000000000003B37                 mov     rsi, [rsp+58h+s2] ; s2
.text:0000000000003B3C                 mov     rdx, r12        ; n
.text:0000000000003B3F                 mov     rdi, r14        ; s1
.text:0000000000003B42                 call    _strncmp
.text:0000000000003B47                 test    eax, eax
.text:0000000000003B49                 jnz     short loc_3B27
.text:0000000000003B4B                 mov     rdi, r14        ; s
.text:0000000000003B4E                 call    _strlen
.text:0000000000003B53                 cmp     rax, r12
.text:0000000000003B56                 jz      short loc_3BB0
.text:0000000000003B58                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000003B5D                 jnz     short loc_3AF0
.text:0000000000003B5F                 mov     [rsp+58h+var_58], rbx
.text:0000000000003B63                 add     rbx, 1
.text:0000000000003B67                 add     rbp, r13
.text:0000000000003B6A                 mov     r14, [r15+rbx*8]
.text:0000000000003B6E                 test    r14, r14
.text:0000000000003B71                 jnz     short loc_3B37
.text:0000000000003B73                 nop     dword ptr [rax+rax+00h]
.text:0000000000003B78
.text:0000000000003B78 loc_3B78:                               ; CODE XREF: argmatch+95↑j
.text:0000000000003B78                 cmp     [rsp+58h+var_41], 0
.text:0000000000003B7D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003B84                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000003B89                 mov     [rsp+58h+var_58], rax
.text:0000000000003B8D
.text:0000000000003B8D loc_3B8D:                               ; CODE XREF: argmatch+34↑j
.text:0000000000003B8D                                         ; argmatch+114↓j
.text:0000000000003B8D                 mov     rax, [rsp+58h+var_58]
.text:0000000000003B91                 add     rsp, 28h
.text:0000000000003B95                 pop     rbx
.text:0000000000003B96                 pop     rbp
.text:0000000000003B97                 pop     r12
.text:0000000000003B99                 pop     r13
.text:0000000000003B9B                 pop     r14
.text:0000000000003B9D                 pop     r15
.text:0000000000003B9F                 retn
.text:0000000000003BA0 ; ---------------------------------------------------------------------------
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: argmatch+58↑j
.text:0000000000003BA0                 mov     [rsp+58h+var_41], 1
.text:0000000000003BA5                 jmp     short loc_3B27
.text:0000000000003BA5 ; ---------------------------------------------------------------------------
.text:0000000000003BA7                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000003BB0                 mov     [rsp+58h+var_58], rbx
.text:0000000000003BB4                 jmp     short loc_3B8D
.text:0000000000003BB4 ; } // starts at 3AA0
.text:0000000000003BB4 argmatch        endp
.text:0000000000003BB4
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB6                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BC0
.text:0000000000003BC0 ; Attributes: info_from_lumina
.text:0000000000003BC0
.text:0000000000003BC0 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000003BC0                 public argmatch_invalid
.text:0000000000003BC0 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000003BC0 ; __unwind {
.text:0000000000003BC0                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BC4                 push    r12
.text:0000000000003BC6                 mov     edx, 5          ; category
.text:0000000000003BCB                 push    rbp
.text:0000000000003BCC                 mov     r12, rsi
.text:0000000000003BCF                 push    rbx
.text:0000000000003BD0                 mov     rbp, rdi
.text:0000000000003BD3                 jz      short loc_3C20
.text:0000000000003BD5                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:0000000000003BDC                 xor     edi, edi        ; domainname
.text:0000000000003BDE                 call    _dcgettext
.text:0000000000003BE3                 mov     rbx, rax
.text:0000000000003BE6
.text:0000000000003BE6 loc_3BE6:                               ; CODE XREF: argmatch_invalid+71↓j
.text:0000000000003BE6                 mov     rsi, rbp
.text:0000000000003BE9                 mov     edi, 1
.text:0000000000003BEE                 call    quote_n
.text:0000000000003BF3                 mov     rdx, r12
.text:0000000000003BF6                 mov     rbp, rax
.text:0000000000003BF9                 mov     esi, 8
.text:0000000000003BFE                 xor     edi, edi
.text:0000000000003C00                 call    quotearg_n_style
.text:0000000000003C05                 mov     r8, rbp
.text:0000000000003C08                 mov     rdx, rbx        ; format
.text:0000000000003C0B                 mov     rcx, rax
.text:0000000000003C0E                 pop     rbx
.text:0000000000003C0F                 pop     rbp
.text:0000000000003C10                 pop     r12
.text:0000000000003C12                 xor     esi, esi        ; errnum
.text:0000000000003C14                 xor     edi, edi        ; status
.text:0000000000003C16                 xor     eax, eax
.text:0000000000003C18                 jmp     _error
.text:0000000000003C18 ; ---------------------------------------------------------------------------
.text:0000000000003C1D                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: argmatch_invalid+13↑j
.text:0000000000003C20                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:0000000000003C27                 xor     edi, edi        ; domainname
.text:0000000000003C29                 call    _dcgettext
.text:0000000000003C2E                 mov     rbx, rax
.text:0000000000003C31                 jmp     short loc_3BE6
.text:0000000000003C31 ; } // starts at 3BC0
.text:0000000000003C31 argmatch_invalid endp
.text:0000000000003C31
.text:0000000000003C31 ; ---------------------------------------------------------------------------
.text:0000000000003C33                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003C40                 public argmatch_valid
.text:0000000000003C40 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 push    r15
.text:0000000000003C42                 push    r14
.text:0000000000003C44                 mov     r14, rdi
.text:0000000000003C47                 push    r13
.text:0000000000003C49                 push    r12
.text:0000000000003C4B                 xor     edi, edi        ; domainname
.text:0000000000003C4D                 push    rbp
.text:0000000000003C4E                 push    rbx
.text:0000000000003C4F                 mov     rbp, rsi
.text:0000000000003C52                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000003C59                 mov     r12, rdx
.text:0000000000003C5C                 mov     edx, 5          ; category
.text:0000000000003C61                 sub     rsp, 8
.text:0000000000003C65                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:0000000000003C6C                 call    _dcgettext
.text:0000000000003C71                 mov     rdi, rax        ; s
.text:0000000000003C74                 mov     rsi, rbx        ; stream
.text:0000000000003C77                 call    _fputs_unlocked
.text:0000000000003C7C                 mov     r15, [r14]
.text:0000000000003C7F                 test    r15, r15
.text:0000000000003C82                 jz      loc_3D18
.text:0000000000003C88                 xor     r13d, r13d
.text:0000000000003C8B                 xor     ebx, ebx
.text:0000000000003C8D                 jmp     short loc_3CC8
.text:0000000000003C8D ; ---------------------------------------------------------------------------
.text:0000000000003C8F                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000003C90                                         ; argmatch_valid+9D↓j
.text:0000000000003C90                 mov     rdi, r15
.text:0000000000003C93                 add     rbx, 1
.text:0000000000003C97                 mov     r13, rbp
.text:0000000000003C9A                 call    quote
.text:0000000000003C9F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003CA6                 lea     rdx, aS         ; "\n  - %s"
.text:0000000000003CAD                 mov     rcx, rax
.text:0000000000003CB0                 mov     esi, 1
.text:0000000000003CB5                 xor     eax, eax
.text:0000000000003CB7                 add     rbp, r12
.text:0000000000003CBA                 call    ___fprintf_chk
.text:0000000000003CBF                 mov     r15, [r14+rbx*8]
.text:0000000000003CC3                 test    r15, r15
.text:0000000000003CC6                 jz      short loc_3D18
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000003CC8                                         ; argmatch_valid+D2↓j
.text:0000000000003CC8                 test    rbx, rbx
.text:0000000000003CCB                 jz      short loc_3C90
.text:0000000000003CCD                 mov     rdx, r12        ; n
.text:0000000000003CD0                 mov     rsi, rbp        ; s2
.text:0000000000003CD3                 mov     rdi, r13        ; s1
.text:0000000000003CD6                 call    _memcmp
.text:0000000000003CDB                 test    eax, eax
.text:0000000000003CDD                 jnz     short loc_3C90
.text:0000000000003CDF                 mov     rdi, r15
.text:0000000000003CE2                 add     rbx, 1
.text:0000000000003CE6                 add     rbp, r12
.text:0000000000003CE9                 call    quote
.text:0000000000003CEE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003CF5                 lea     rdx, aS_0       ; ", %s"
.text:0000000000003CFC                 mov     rcx, rax
.text:0000000000003CFF                 mov     esi, 1
.text:0000000000003D04                 xor     eax, eax
.text:0000000000003D06                 call    ___fprintf_chk
.text:0000000000003D0B                 mov     r15, [r14+rbx*8]
.text:0000000000003D0F                 test    r15, r15
.text:0000000000003D12                 jnz     short loc_3CC8
.text:0000000000003D14                 nop     dword ptr [rax+00h]
.text:0000000000003D18
.text:0000000000003D18 loc_3D18:                               ; CODE XREF: argmatch_valid+42↑j
.text:0000000000003D18                                         ; argmatch_valid+86↑j
.text:0000000000003D18                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000003D1F                 mov     rax, [rdi+28h]
.text:0000000000003D23                 cmp     rax, [rdi+30h]
.text:0000000000003D27                 jnb     short loc_3D48
.text:0000000000003D29                 lea     rdx, [rax+1]
.text:0000000000003D2D                 mov     [rdi+28h], rdx
.text:0000000000003D31                 mov     byte ptr [rax], 0Ah
.text:0000000000003D34                 add     rsp, 8
.text:0000000000003D38                 pop     rbx
.text:0000000000003D39                 pop     rbp
.text:0000000000003D3A                 pop     r12
.text:0000000000003D3C                 pop     r13
.text:0000000000003D3E                 pop     r14
.text:0000000000003D40                 pop     r15
.text:0000000000003D42                 retn
.text:0000000000003D42 ; ---------------------------------------------------------------------------
.text:0000000000003D43                 align 8
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000003D48                 add     rsp, 8
.text:0000000000003D4C                 mov     esi, 0Ah        ; int
.text:0000000000003D51                 pop     rbx
.text:0000000000003D52                 pop     rbp
.text:0000000000003D53                 pop     r12
.text:0000000000003D55                 pop     r13
.text:0000000000003D57                 pop     r14
.text:0000000000003D59                 pop     r15
.text:0000000000003D5B                 jmp     ___overflow
.text:0000000000003D5B ; } // starts at 3C40
.text:0000000000003D5B argmatch_valid  endp
.text:0000000000003D5B
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60 ; Attributes: info_from_lumina
.text:0000000000003D60
.text:0000000000003D60 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000003D60                 public __xargmatch_internal
.text:0000000000003D60 __xargmatch_internal proc near          ; CODE XREF: main+15B↑p
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 push    r15
.text:0000000000003D62                 push    r14
.text:0000000000003D64                 mov     r14, rdi
.text:0000000000003D67                 push    r13
.text:0000000000003D69                 push    r12
.text:0000000000003D6B                 mov     r12, rsi
.text:0000000000003D6E                 push    rbp
.text:0000000000003D6F                 push    rbx
.text:0000000000003D70                 mov     rbp, rcx
.text:0000000000003D73                 mov     rbx, rdx
.text:0000000000003D76                 mov     rcx, r8
.text:0000000000003D79                 mov     rdx, rbp
.text:0000000000003D7C                 sub     rsp, 8
.text:0000000000003D80                 mov     rsi, rbx
.text:0000000000003D83                 mov     rdi, r12
.text:0000000000003D86                 mov     r15, r8
.text:0000000000003D89                 mov     r13, r9
.text:0000000000003D8C                 call    argmatch
.text:0000000000003D91                 test    rax, rax
.text:0000000000003D94                 js      short loc_3DA5
.text:0000000000003D96
.text:0000000000003D96 loc_3D96:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000003D96                 add     rsp, 8
.text:0000000000003D9A                 pop     rbx
.text:0000000000003D9B                 pop     rbp
.text:0000000000003D9C                 pop     r12
.text:0000000000003D9E                 pop     r13
.text:0000000000003DA0                 pop     r14
.text:0000000000003DA2                 pop     r15
.text:0000000000003DA4                 retn
.text:0000000000003DA5 ; ---------------------------------------------------------------------------
.text:0000000000003DA5
.text:0000000000003DA5 loc_3DA5:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000003DA5                 mov     rdx, rax
.text:0000000000003DA8                 mov     rsi, r12
.text:0000000000003DAB                 mov     rdi, r14
.text:0000000000003DAE                 call    argmatch_invalid
.text:0000000000003DB3                 mov     rdx, r15
.text:0000000000003DB6                 mov     rsi, rbp
.text:0000000000003DB9                 mov     rdi, rbx
.text:0000000000003DBC                 call    argmatch_valid
.text:0000000000003DC1                 call    r13
.text:0000000000003DC4                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003DCB                 jmp     short loc_3D96
.text:0000000000003DCB ; } // starts at 3D60
.text:0000000000003DCB __xargmatch_internal endp
.text:0000000000003DCB
.text:0000000000003DCB ; ---------------------------------------------------------------------------
.text:0000000000003DCD                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DD0
.text:0000000000003DD0 ; Attributes: info_from_lumina
.text:0000000000003DD0
.text:0000000000003DD0 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000003DD0                 public argmatch_to_argument
.text:0000000000003DD0 argmatch_to_argument proc near
.text:0000000000003DD0 ; __unwind {
.text:0000000000003DD0                 push    r14
.text:0000000000003DD2                 push    r13
.text:0000000000003DD4                 push    r12
.text:0000000000003DD6                 push    rbp
.text:0000000000003DD7                 push    rbx
.text:0000000000003DD8                 mov     r14, [rsi]
.text:0000000000003DDB                 test    r14, r14
.text:0000000000003DDE                 jz      short loc_3E11
.text:0000000000003DE0                 mov     r12, rcx
.text:0000000000003DE3                 mov     r13, rdi
.text:0000000000003DE6                 mov     rbp, rdx
.text:0000000000003DE9                 lea     rbx, [rsi+8]
.text:0000000000003DED                 jmp     short loc_3DFF
.text:0000000000003DED ; ---------------------------------------------------------------------------
.text:0000000000003DEF                 align 10h
.text:0000000000003DF0
.text:0000000000003DF0 loc_3DF0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000003DF0                 mov     r14, [rbx]
.text:0000000000003DF3                 add     rbp, r12
.text:0000000000003DF6                 add     rbx, 8
.text:0000000000003DFA                 test    r14, r14
.text:0000000000003DFD                 jz      short loc_3E11
.text:0000000000003DFF
.text:0000000000003DFF loc_3DFF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000003DFF                 mov     rdx, r12        ; n
.text:0000000000003E02                 mov     rsi, rbp        ; s2
.text:0000000000003E05                 mov     rdi, r13        ; s1
.text:0000000000003E08                 call    _memcmp
.text:0000000000003E0D                 test    eax, eax
.text:0000000000003E0F                 jnz     short loc_3DF0
.text:0000000000003E11
.text:0000000000003E11 loc_3E11:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000003E11                                         ; argmatch_to_argument+2D↑j
.text:0000000000003E11                 pop     rbx
.text:0000000000003E12                 mov     rax, r14
.text:0000000000003E15                 pop     rbp
.text:0000000000003E16                 pop     r12
.text:0000000000003E18                 pop     r13
.text:0000000000003E1A                 pop     r14
.text:0000000000003E1C                 retn
.text:0000000000003E1C ; } // starts at 3DD0
.text:0000000000003E1C argmatch_to_argument endp
.text:0000000000003E1C
.text:0000000000003E1C ; ---------------------------------------------------------------------------
.text:0000000000003E1D                 align 20h
.text:0000000000003E20
.text:0000000000003E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E20
.text:0000000000003E20
.text:0000000000003E20                 public close_stdout_set_file_name
.text:0000000000003E20 close_stdout_set_file_name proc near
.text:0000000000003E20 ; __unwind {
.text:0000000000003E20                 mov     cs:file_name, rdi
.text:0000000000003E27                 retn
.text:0000000000003E27 ; } // starts at 3E20
.text:0000000000003E27 close_stdout_set_file_name endp
.text:0000000000003E27
.text:0000000000003E27 ; ---------------------------------------------------------------------------
.text:0000000000003E28                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public close_stdout_set_ignore_EPIPE
.text:0000000000003E30 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 mov     cs:ignore_EPIPE, dil
.text:0000000000003E37                 retn
.text:0000000000003E37 ; } // starts at 3E30
.text:0000000000003E37 close_stdout_set_ignore_EPIPE endp
.text:0000000000003E37
.text:0000000000003E37 ; ---------------------------------------------------------------------------
.text:0000000000003E38                 align 20h
.text:0000000000003E40
.text:0000000000003E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E40
.text:0000000000003E40 ; Attributes: info_from_lumina
.text:0000000000003E40
.text:0000000000003E40 ; void __cdecl close_stdout()
.text:0000000000003E40                 public close_stdout
.text:0000000000003E40 close_stdout    proc near               ; DATA XREF: main+6F↑o
.text:0000000000003E40 ; __unwind {
.text:0000000000003E40                 push    rbp
.text:0000000000003E41                 push    rbx
.text:0000000000003E42                 sub     rsp, 8
.text:0000000000003E46                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003E4D                 call    close_stream
.text:0000000000003E52                 test    eax, eax
.text:0000000000003E54                 jz      short loc_3E6C
.text:0000000000003E56                 call    ___errno_location
.text:0000000000003E5B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003E62                 mov     rbx, rax
.text:0000000000003E65                 jz      short loc_3E83
.text:0000000000003E67                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003E6A                 jnz     short loc_3E83
.text:0000000000003E6C
.text:0000000000003E6C loc_3E6C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003E6C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003E73                 call    close_stream
.text:0000000000003E78                 test    eax, eax
.text:0000000000003E7A                 jnz     short loc_3EC2
.text:0000000000003E7C                 add     rsp, 8
.text:0000000000003E80                 pop     rbx
.text:0000000000003E81                 pop     rbp
.text:0000000000003E82                 retn
.text:0000000000003E83 ; ---------------------------------------------------------------------------
.text:0000000000003E83
.text:0000000000003E83 loc_3E83:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003E83                                         ; close_stdout+2A↑j
.text:0000000000003E83                 lea     rsi, aWriteError ; "write error"
.text:0000000000003E8A                 xor     edi, edi        ; domainname
.text:0000000000003E8C                 mov     edx, 5          ; category
.text:0000000000003E91                 call    _dcgettext
.text:0000000000003E96                 mov     rdi, cs:file_name
.text:0000000000003E9D                 mov     rbp, rax
.text:0000000000003EA0                 test    rdi, rdi
.text:0000000000003EA3                 jz      short loc_3ECD
.text:0000000000003EA5                 call    quotearg_colon
.text:0000000000003EAA                 mov     esi, [rbx]      ; errnum
.text:0000000000003EAC                 lea     rdx, format     ; "%s: %s"
.text:0000000000003EB3                 mov     rcx, rax
.text:0000000000003EB6                 mov     r8, rbp
.text:0000000000003EB9                 xor     edi, edi        ; status
.text:0000000000003EBB                 xor     eax, eax
.text:0000000000003EBD                 call    _error
.text:0000000000003EC2
.text:0000000000003EC2 loc_3EC2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003EC2                                         ; close_stdout+A2↓j
.text:0000000000003EC2                 mov     edi, cs:exit_failure ; status
.text:0000000000003EC8                 call    __exit
.text:0000000000003ECD ; ---------------------------------------------------------------------------
.text:0000000000003ECD
.text:0000000000003ECD loc_3ECD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003ECD                 mov     esi, [rbx]      ; errnum
.text:0000000000003ECF                 lea     rdx, aS_0+2     ; format
.text:0000000000003ED6                 mov     rcx, rax
.text:0000000000003ED9                 xor     edi, edi        ; status
.text:0000000000003EDB                 xor     eax, eax
.text:0000000000003EDD                 call    _error
.text:0000000000003EE2                 jmp     short loc_3EC2
.text:0000000000003EE2 ; } // starts at 3E40
.text:0000000000003EE2 close_stdout    endp
.text:0000000000003EE2
.text:0000000000003EE2 ; ---------------------------------------------------------------------------
.text:0000000000003EE4                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0
.text:0000000000003EF0 ; __int64 __fastcall fd_reopen(int fd2, char *file, int oflag)
.text:0000000000003EF0                 public fd_reopen
.text:0000000000003EF0 fd_reopen       proc near               ; CODE XREF: main+726↑p
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 push    r13
.text:0000000000003EF2                 push    r12
.text:0000000000003EF4                 xor     eax, eax
.text:0000000000003EF6                 push    rbp
.text:0000000000003EF7                 push    rbx
.text:0000000000003EF8                 mov     ebp, edi
.text:0000000000003EFA                 mov     rdi, rsi        ; file
.text:0000000000003EFD                 mov     esi, edx        ; oflag
.text:0000000000003EFF                 mov     edx, ecx
.text:0000000000003F01                 sub     rsp, 8
.text:0000000000003F05                 call    _open
.text:0000000000003F0A                 cmp     ebp, eax
.text:0000000000003F0C                 mov     ebx, eax
.text:0000000000003F0E                 jz      short loc_3F39
.text:0000000000003F10                 test    eax, eax
.text:0000000000003F12                 js      short loc_3F39
.text:0000000000003F14                 mov     esi, ebp        ; fd2
.text:0000000000003F16                 mov     edi, eax        ; fd
.text:0000000000003F18                 call    _dup2
.text:0000000000003F1D                 mov     r12d, eax
.text:0000000000003F20                 call    ___errno_location
.text:0000000000003F25                 mov     r13d, [rax]
.text:0000000000003F28                 mov     rbp, rax
.text:0000000000003F2B                 mov     edi, ebx        ; fd
.text:0000000000003F2D                 call    _close
.text:0000000000003F32                 mov     ebx, r12d
.text:0000000000003F35                 mov     [rbp+0], r13d
.text:0000000000003F39
.text:0000000000003F39 loc_3F39:                               ; CODE XREF: fd_reopen+1E↑j
.text:0000000000003F39                                         ; fd_reopen+22↑j
.text:0000000000003F39                 add     rsp, 8
.text:0000000000003F3D                 mov     eax, ebx
.text:0000000000003F3F                 pop     rbx
.text:0000000000003F40                 pop     rbp
.text:0000000000003F41                 pop     r12
.text:0000000000003F43                 pop     r13
.text:0000000000003F45                 retn
.text:0000000000003F45 ; } // starts at 3EF0
.text:0000000000003F45 fd_reopen       endp
.text:0000000000003F45
.text:0000000000003F45 ; ---------------------------------------------------------------------------
.text:0000000000003F46                 align 10h
.text:0000000000003F50
.text:0000000000003F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F50
.text:0000000000003F50
.text:0000000000003F50                 public fdutimensat
.text:0000000000003F50 fdutimensat     proc near               ; CODE XREF: main+2D8↑p
.text:0000000000003F50                                         ; main+448↑p ...
.text:0000000000003F50 ; __unwind {
.text:0000000000003F50                 push    r13
.text:0000000000003F52                 push    r12
.text:0000000000003F54                 mov     r13d, r8d
.text:0000000000003F57                 push    rbp
.text:0000000000003F58                 push    rbx
.text:0000000000003F59                 mov     r12d, esi
.text:0000000000003F5C                 mov     rbx, rdx
.text:0000000000003F5F                 mov     rbp, rcx
.text:0000000000003F62                 sub     rsp, 8
.text:0000000000003F66                 test    edi, edi
.text:0000000000003F68                 jns     short loc_3F90
.text:0000000000003F6A                 test    rdx, rdx
.text:0000000000003F6D                 jz      short loc_3FC0
.text:0000000000003F6F
.text:0000000000003F6F loc_3F6F:                               ; CODE XREF: fdutimensat+5A↓j
.text:0000000000003F6F                 mov     ecx, r13d       ; flags
.text:0000000000003F72                 mov     rdx, rbp        ; times
.text:0000000000003F75                 mov     rsi, rbx        ; path
.text:0000000000003F78                 mov     edi, r12d       ; fd
.text:0000000000003F7B                 call    _utimensat
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: fdutimensat+4B↓j
.text:0000000000003F80                                         ; fdutimensat+50↓j
.text:0000000000003F80                 cmp     eax, 1
.text:0000000000003F83                 jz      short loc_3FC0
.text:0000000000003F85                 add     rsp, 8
.text:0000000000003F89                 pop     rbx
.text:0000000000003F8A                 pop     rbp
.text:0000000000003F8B                 pop     r12
.text:0000000000003F8D                 pop     r13
.text:0000000000003F8F                 retn
.text:0000000000003F90 ; ---------------------------------------------------------------------------
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: fdutimensat+18↑j
.text:0000000000003F90                 mov     rsi, rcx        ; times
.text:0000000000003F93                 call    _futimens
.text:0000000000003F98                 test    rbx, rbx
.text:0000000000003F9B                 jz      short loc_3F80
.text:0000000000003F9D                 cmp     eax, 0FFFFFFFFh
.text:0000000000003FA0                 jnz     short loc_3F80
.text:0000000000003FA2                 call    ___errno_location
.text:0000000000003FA7                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000003FAA                 jz      short loc_3F6F
.text:0000000000003FAC                 add     rsp, 8
.text:0000000000003FB0                 mov     eax, 0FFFFFFFFh
.text:0000000000003FB5                 pop     rbx
.text:0000000000003FB6                 pop     rbp
.text:0000000000003FB7                 pop     r12
.text:0000000000003FB9                 pop     r13
.text:0000000000003FBB                 retn
.text:0000000000003FBB ; ---------------------------------------------------------------------------
.text:0000000000003FBC                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: fdutimensat+1D↑j
.text:0000000000003FC0                                         ; fdutimensat+33↑j
.text:0000000000003FC0                 call    ___errno_location
.text:0000000000003FC5                 mov     dword ptr [rax], 9
.text:0000000000003FCB                 add     rsp, 8
.text:0000000000003FCF                 mov     eax, 0FFFFFFFFh
.text:0000000000003FD4                 pop     rbx
.text:0000000000003FD5                 pop     rbp
.text:0000000000003FD6                 pop     r12
.text:0000000000003FD8                 pop     r13
.text:0000000000003FDA                 retn
.text:0000000000003FDA ; } // starts at 3F50
.text:0000000000003FDA fdutimensat     endp
.text:0000000000003FDA
.text:0000000000003FDA ; ---------------------------------------------------------------------------
.text:0000000000003FDB                 align 20h
.text:0000000000003FE0
.text:0000000000003FE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FE0
.text:0000000000003FE0
.text:0000000000003FE0 ; __int64 __fastcall gettime(struct timespec *tp)
.text:0000000000003FE0                 public gettime
.text:0000000000003FE0 gettime         proc near               ; CODE XREF: main+4CF↑p
.text:0000000000003FE0                                         ; parse_datetime2+618↓p
.text:0000000000003FE0 ; __unwind {
.text:0000000000003FE0                 mov     rsi, rdi        ; tp
.text:0000000000003FE3                 xor     edi, edi        ; clock_id
.text:0000000000003FE5                 jmp     _clock_gettime
.text:0000000000003FE5 ; } // starts at 3FE0
.text:0000000000003FE5 gettime         endp
.text:0000000000003FE5
.text:0000000000003FE5 ; ---------------------------------------------------------------------------
.text:0000000000003FEA                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FF0
.text:0000000000003FF0
.text:0000000000003FF0                 public current_timespec
.text:0000000000003FF0 current_timespec proc near
.text:0000000000003FF0
.text:0000000000003FF0 var_28          = qword ptr -28h
.text:0000000000003FF0 var_20          = qword ptr -20h
.text:0000000000003FF0 var_10          = qword ptr -10h
.text:0000000000003FF0
.text:0000000000003FF0 ; __unwind {
.text:0000000000003FF0                 sub     rsp, 28h
.text:0000000000003FF4                 xor     edi, edi        ; clock_id
.text:0000000000003FF6                 mov     rsi, rsp        ; tp
.text:0000000000003FF9                 mov     rax, fs:28h
.text:0000000000004002                 mov     [rsp+28h+var_10], rax
.text:0000000000004007                 xor     eax, eax
.text:0000000000004009                 call    _clock_gettime
.text:000000000000400E                 mov     rcx, [rsp+28h+var_10]
.text:0000000000004013                 xor     rcx, fs:28h
.text:000000000000401C                 mov     rax, [rsp+28h+var_28]
.text:0000000000004020                 mov     rdx, [rsp+28h+var_20]
.text:0000000000004025                 jnz     short loc_402C
.text:0000000000004027                 add     rsp, 28h
.text:000000000000402B                 retn
.text:000000000000402C ; ---------------------------------------------------------------------------
.text:000000000000402C
.text:000000000000402C loc_402C:                               ; CODE XREF: current_timespec+35↑j
.text:000000000000402C                 call    ___stack_chk_fail
.text:000000000000402C ; } // starts at 3FF0
.text:000000000000402C current_timespec endp
.text:000000000000402C
.text:000000000000402C ; ---------------------------------------------------------------------------
.text:0000000000004031                 align 20h
.text:0000000000004040
.text:0000000000004040 ; =============== S U B R O U T I N E =======================================
.text:0000000000004040
.text:0000000000004040
.text:0000000000004040 digits_to_date_time proc near           ; CODE XREF: yyparse+E33↓p
.text:0000000000004040                                         ; yyparse+F46↓p
.text:0000000000004040
.text:0000000000004040 arg_8           = qword ptr  10h
.text:0000000000004040 arg_10          = qword ptr  18h
.text:0000000000004040
.text:0000000000004040 ; __unwind {
.text:0000000000004040                 mov     rax, [rdi+0A8h]
.text:0000000000004047                 mov     r8, [rsp+arg_8]
.text:000000000000404C                 mov     r9, [rsp+arg_10]
.text:0000000000004051                 test    rax, rax
.text:0000000000004054                 jz      short loc_4098
.text:0000000000004056                 cmp     qword ptr [rdi+30h], 0
.text:000000000000405B                 jnz     short loc_4098
.text:000000000000405D                 cmp     byte ptr [rdi+0A1h], 0
.text:0000000000004064                 jnz     short loc_4098
.text:0000000000004066                 cmp     qword ptr [rdi+0C8h], 0
.text:000000000000406E                 jnz     short loc_407A
.text:0000000000004070                 cmp     r9, 2
.text:0000000000004074                 jle     loc_4198
.text:000000000000407A
.text:000000000000407A loc_407A:                               ; CODE XREF: digits_to_date_time+2E↑j
.text:000000000000407A                 mov     rax, [rsp+arg_10]
.text:000000000000407F                 mov     byte ptr [rdi+0D8h], 1
.text:0000000000004086                 movdqu  xmm0, xmmword ptr [rsp+8]
.text:000000000000408C                 mov     [rdi+30h], rax
.text:0000000000004090                 movups  xmmword ptr [rdi+20h], xmm0
.text:0000000000004094                 retn
.text:0000000000004094 ; ---------------------------------------------------------------------------
.text:0000000000004095                 align 8
.text:0000000000004098
.text:0000000000004098 loc_4098:                               ; CODE XREF: digits_to_date_time+14↑j
.text:0000000000004098                                         ; digits_to_date_time+1B↑j ...
.text:0000000000004098                 cmp     r9, 4
.text:000000000000409C                 jg      short loc_4100
.text:000000000000409E                 add     qword ptr [rdi+0C8h], 1
.text:00000000000040A6                 cmp     r9, 2
.text:00000000000040AA                 jle     loc_41A8
.text:00000000000040B0                 mov     rax, r8
.text:00000000000040B3                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:00000000000040BD                 imul    rdx
.text:00000000000040C0                 mov     rax, r8
.text:00000000000040C3                 sar     rax, 3Fh
.text:00000000000040C7                 add     rdx, r8
.text:00000000000040CA                 sar     rdx, 6
.text:00000000000040CE                 sub     rdx, rax
.text:00000000000040D1                 lea     rax, [rdx+rdx*4]
.text:00000000000040D5                 mov     [rdi+48h], rdx
.text:00000000000040D9                 lea     rax, [rax+rax*4]
.text:00000000000040DD                 shl     rax, 2
.text:00000000000040E1                 sub     r8, rax
.text:00000000000040E4                 mov     [rdi+50h], r8
.text:00000000000040E8
.text:00000000000040E8 loc_40E8:                               ; CODE XREF: digits_to_date_time+174↓j
.text:00000000000040E8                 mov     qword ptr [rdi+58h], 0
.text:00000000000040F0                 mov     qword ptr [rdi+60h], 0
.text:00000000000040F8                 mov     dword ptr [rdi+1Ch], 2
.text:00000000000040FF                 retn
.text:0000000000004100 ; ---------------------------------------------------------------------------
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: digits_to_date_time+5C↑j
.text:0000000000004100                 add     rax, 1
.text:0000000000004104                 mov     rsi, 0A3D70A3D70A3D70Bh
.text:000000000000410E                 mov     r10, r8
.text:0000000000004111                 mov     [rdi+0A8h], rax
.text:0000000000004118                 mov     rax, r8
.text:000000000000411B                 sar     r10, 3Fh
.text:000000000000411F                 imul    rsi
.text:0000000000004122                 sub     r9, 4
.text:0000000000004126                 mov     [rdi+30h], r9
.text:000000000000412A                 lea     rcx, [rdx+r8]
.text:000000000000412E                 mov     rdx, r8
.text:0000000000004131                 sar     rcx, 6
.text:0000000000004135                 sub     rcx, r10
.text:0000000000004138                 lea     rax, [rcx+rcx*4]
.text:000000000000413C                 lea     rax, [rax+rax*4]
.text:0000000000004140                 shl     rax, 2
.text:0000000000004144                 sub     rdx, rax
.text:0000000000004147                 mov     rax, rcx
.text:000000000000414A                 mov     [rdi+40h], rdx
.text:000000000000414E                 imul    rsi
.text:0000000000004151                 mov     rax, rcx
.text:0000000000004154                 sar     rax, 3Fh
.text:0000000000004158                 lea     rsi, [rdx+rcx]
.text:000000000000415C                 mov     rdx, 346DC5D63886594Bh
.text:0000000000004166                 sar     rsi, 6
.text:000000000000416A                 sub     rsi, rax
.text:000000000000416D                 lea     rax, [rsi+rsi*4]
.text:0000000000004171                 lea     rax, [rax+rax*4]
.text:0000000000004175                 shl     rax, 2
.text:0000000000004179                 sub     rcx, rax
.text:000000000000417C                 mov     rax, r8
.text:000000000000417F                 imul    rdx
.text:0000000000004182                 mov     [rdi+38h], rcx
.text:0000000000004186                 sar     rdx, 0Bh
.text:000000000000418A                 sub     rdx, r10
.text:000000000000418D                 mov     [rdi+28h], rdx
.text:0000000000004191                 retn
.text:0000000000004191 ; ---------------------------------------------------------------------------
.text:0000000000004192                 align 8
.text:0000000000004198
.text:0000000000004198 loc_4198:                               ; CODE XREF: digits_to_date_time+34↑j
.text:0000000000004198                 mov     qword ptr [rdi+0C8h], 1
.text:00000000000041A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000041A8
.text:00000000000041A8 loc_41A8:                               ; CODE XREF: digits_to_date_time+6A↑j
.text:00000000000041A8                 mov     [rdi+48h], r8
.text:00000000000041AC                 mov     qword ptr [rdi+50h], 0
.text:00000000000041B4                 jmp     loc_40E8
.text:00000000000041B4 ; } // starts at 4040
.text:00000000000041B4 digits_to_date_time endp
.text:00000000000041B4
.text:00000000000041B4 ; ---------------------------------------------------------------------------
.text:00000000000041B9                 align 20h
.text:00000000000041C0
.text:00000000000041C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041C0
.text:00000000000041C0
.text:00000000000041C0 time_zone_str   proc near               ; CODE XREF: debug_strfdatetime_constprop_12+78↓p
.text:00000000000041C0                                         ; debug_print_current_time_part_10+366↓p ...
.text:00000000000041C0 ; __unwind {
.text:00000000000041C0                 mov     eax, edi
.text:00000000000041C2                 mov     edx, 91A2B3C5h
.text:00000000000041C7                 push    r12
.text:00000000000041C9                 imul    edx
.text:00000000000041CB                 push    rbp
.text:00000000000041CC                 push    rbx
.text:00000000000041CD                 mov     eax, edi
.text:00000000000041CF                 mov     ecx, edi
.text:00000000000041D1                 mov     r12, rsi
.text:00000000000041D4                 sar     eax, 1Fh
.text:00000000000041D7                 sar     ecx, 1Fh
.text:00000000000041DA                 mov     ebp, edi
.text:00000000000041DC                 lea     ebx, [rdx+rdi]
.text:00000000000041DF                 and     ecx, 2
.text:00000000000041E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000041E9                 lea     r8d, [rcx+2Bh]
.text:00000000000041ED                 lea     rcx, aC02d      ; "%c%02d"
.text:00000000000041F4                 mov     esi, 1
.text:00000000000041F9                 sar     ebx, 0Bh
.text:00000000000041FC                 mov     rdi, r12
.text:00000000000041FF                 sub     ebx, eax
.text:0000000000004201                 mov     eax, ebx
.text:0000000000004203                 sar     eax, 1Fh
.text:0000000000004206                 mov     r9d, eax
.text:0000000000004209                 xor     r9d, ebx
.text:000000000000420C                 imul    ebx, 0E10h
.text:0000000000004212                 sub     r9d, eax
.text:0000000000004215                 xor     eax, eax
.text:0000000000004217                 call    ___sprintf_chk
.text:000000000000421C                 sub     ebp, ebx
.text:000000000000421E                 jz      short loc_4282
.text:0000000000004220                 cdqe
.text:0000000000004222                 mov     ecx, 88888889h
.text:0000000000004227                 mov     r8d, 0CCCCCCCDh
.text:000000000000422D                 lea     rsi, [r12+rax]
.text:0000000000004231                 mov     eax, ebp
.text:0000000000004233                 sar     eax, 1Fh
.text:0000000000004236                 xor     ebp, eax
.text:0000000000004238                 mov     byte ptr [rsi], 3Ah ; ':'
.text:000000000000423B                 sub     ebp, eax
.text:000000000000423D                 mov     eax, ebp
.text:000000000000423F                 mul     ecx
.text:0000000000004241                 mov     eax, ebp
.text:0000000000004243                 mov     ecx, edx
.text:0000000000004245                 mov     edi, edx
.text:0000000000004247                 mov     edx, 1B4E81B5h
.text:000000000000424C                 mul     edx
.text:000000000000424E                 shr     ecx, 5
.text:0000000000004251                 shr     edi, 5
.text:0000000000004254                 mov     eax, ecx
.text:0000000000004256                 shr     edx, 6
.text:0000000000004259                 add     edx, 30h ; '0'
.text:000000000000425C                 mov     [rsi+1], dl
.text:000000000000425F                 mul     r8d
.text:0000000000004262                 imul    edi, 3Ch ; '<'
.text:0000000000004265                 shr     edx, 3
.text:0000000000004268                 lea     eax, [rdx+rdx*4]
.text:000000000000426B                 add     eax, eax
.text:000000000000426D                 sub     ecx, eax
.text:000000000000426F                 lea     rax, [rsi+3]
.text:0000000000004273                 add     ecx, 30h ; '0'
.text:0000000000004276                 sub     ebp, edi
.text:0000000000004278                 mov     [rsi+2], cl
.text:000000000000427B                 mov     edi, ebp
.text:000000000000427D                 jnz     short loc_4290
.text:000000000000427F
.text:000000000000427F loc_427F:                               ; CODE XREF: time_zone_str+F4↓j
.text:000000000000427F                 mov     byte ptr [rax], 0
.text:0000000000004282
.text:0000000000004282 loc_4282:                               ; CODE XREF: time_zone_str+5E↑j
.text:0000000000004282                 mov     rax, r12
.text:0000000000004285                 pop     rbx
.text:0000000000004286                 pop     rbp
.text:0000000000004287                 pop     r12
.text:0000000000004289                 retn
.text:0000000000004289 ; ---------------------------------------------------------------------------
.text:000000000000428A                 align 10h
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: time_zone_str+BD↑j
.text:0000000000004290                 mov     eax, ebp
.text:0000000000004292                 mov     byte ptr [rsi+3], 3Ah ; ':'
.text:0000000000004296                 mul     r8d
.text:0000000000004299                 shr     edx, 3
.text:000000000000429C                 lea     eax, [rdx+30h]
.text:000000000000429F                 lea     edx, [rdx+rdx*4]
.text:00000000000042A2                 add     edx, edx
.text:00000000000042A4                 mov     [rsi+4], al
.text:00000000000042A7                 lea     rax, [rsi+6]
.text:00000000000042AB                 sub     edi, edx
.text:00000000000042AD                 add     edi, 30h ; '0'
.text:00000000000042B0                 mov     [rsi+5], dil
.text:00000000000042B4                 jmp     short loc_427F
.text:00000000000042B4 ; } // starts at 41C0
.text:00000000000042B4 time_zone_str   endp
.text:00000000000042B4
.text:00000000000042B4 ; ---------------------------------------------------------------------------
.text:00000000000042B6                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0
.text:00000000000042C0 dbg_printf      proc near               ; CODE XREF: debug_print_relative_time_part_11+27↓p
.text:00000000000042C0                                         ; debug_print_current_time_part_10+3B↓p ...
.text:00000000000042C0
.text:00000000000042C0 var_D8          = dword ptr -0D8h
.text:00000000000042C0 var_D4          = dword ptr -0D4h
.text:00000000000042C0 var_D0          = qword ptr -0D0h
.text:00000000000042C0 var_C8          = qword ptr -0C8h
.text:00000000000042C0 var_C0          = qword ptr -0C0h
.text:00000000000042C0 var_B8          = byte ptr -0B8h
.text:00000000000042C0 var_B0          = qword ptr -0B0h
.text:00000000000042C0 var_A8          = qword ptr -0A8h
.text:00000000000042C0 var_A0          = qword ptr -0A0h
.text:00000000000042C0 var_98          = qword ptr -98h
.text:00000000000042C0 var_90          = qword ptr -90h
.text:00000000000042C0 var_88          = xmmword ptr -88h
.text:00000000000042C0 var_78          = xmmword ptr -78h
.text:00000000000042C0 var_68          = xmmword ptr -68h
.text:00000000000042C0 var_58          = xmmword ptr -58h
.text:00000000000042C0 var_48          = xmmword ptr -48h
.text:00000000000042C0 var_38          = xmmword ptr -38h
.text:00000000000042C0 var_28          = xmmword ptr -28h
.text:00000000000042C0 var_18          = xmmword ptr -18h
.text:00000000000042C0 arg_0           = byte ptr  8
.text:00000000000042C0
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 push    rbx
.text:00000000000042C1                 mov     rbx, rdi
.text:00000000000042C4                 sub     rsp, 0D0h
.text:00000000000042CB                 test    al, al
.text:00000000000042CD                 mov     [rsp+0D8h+var_B0], rsi
.text:00000000000042D2                 mov     [rsp+0D8h+var_A8], rdx
.text:00000000000042D7                 mov     [rsp+0D8h+var_A0], rcx
.text:00000000000042DC                 mov     [rsp+0D8h+var_98], r8
.text:00000000000042E1                 mov     [rsp+0D8h+var_90], r9
.text:00000000000042E6                 jz      short loc_431F
.text:00000000000042E8                 movaps  [rsp+0D8h+var_88], xmm0
.text:00000000000042ED                 movaps  [rsp+0D8h+var_78], xmm1
.text:00000000000042F2                 movaps  [rsp+0D8h+var_68], xmm2
.text:00000000000042F7                 movaps  [rsp+0D8h+var_58], xmm3
.text:00000000000042FF                 movaps  [rsp+0D8h+var_48], xmm4
.text:0000000000004307                 movaps  [rsp+0D8h+var_38], xmm5
.text:000000000000430F                 movaps  [rsp+0D8h+var_28], xmm6
.text:0000000000004317                 movaps  [rsp+0D8h+var_18], xmm7
.text:000000000000431F
.text:000000000000431F loc_431F:                               ; CODE XREF: dbg_printf+26↑j
.text:000000000000431F                 lea     rdi, aDate      ; "date: "
.text:0000000000004326                 mov     edx, 6          ; n
.text:000000000000432B                 mov     esi, 1          ; size
.text:0000000000004330                 mov     rax, fs:28h
.text:0000000000004339                 mov     [rsp+0D8h+var_C0], rax
.text:000000000000433E                 xor     eax, eax
.text:0000000000004340                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004347                 call    _fwrite
.text:000000000000434C                 lea     rax, [rsp+0D8h+arg_0]
.text:0000000000004354                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; s
.text:000000000000435B                 mov     rdx, rsp
.text:000000000000435E                 mov     rsi, rbx
.text:0000000000004361                 mov     [rsp+0D8h+var_D8], 8
.text:0000000000004368                 mov     [rsp+0D8h+var_D4], 30h ; '0'
.text:0000000000004370                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000004375                 lea     rax, [rsp+0D8h+var_B8]
.text:000000000000437A                 mov     [rsp+0D8h+var_C8], rax
.text:000000000000437F                 call    rpl_vfprintf
.text:0000000000004384                 mov     rax, [rsp+0D8h+var_C0]
.text:0000000000004389                 xor     rax, fs:28h
.text:0000000000004392                 jnz     short loc_439D
.text:0000000000004394                 add     rsp, 0D0h
.text:000000000000439B                 pop     rbx
.text:000000000000439C                 retn
.text:000000000000439D ; ---------------------------------------------------------------------------
.text:000000000000439D
.text:000000000000439D loc_439D:                               ; CODE XREF: dbg_printf+D2↑j
.text:000000000000439D                 call    ___stack_chk_fail
.text:000000000000439D ; } // starts at 42C0
.text:000000000000439D dbg_printf      endp
.text:000000000000439D
.text:000000000000439D ; ---------------------------------------------------------------------------
.text:00000000000043A2                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0
.text:00000000000043B0 print_rel_part_part_2 proc near         ; CODE XREF: debug_print_relative_time_part_11+4B↓p
.text:00000000000043B0                                         ; debug_print_relative_time_part_11+137↓p ...
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 mov     r8, rdx
.text:00000000000043B3                 xor     edi, 1
.text:00000000000043B6                 lea     rdx, aLdS       ; " %+ld %s"
.text:00000000000043BD                 movzx   edi, dil
.text:00000000000043C1                 sub     rsp, 8
.text:00000000000043C5                 mov     rcx, rsi
.text:00000000000043C8                 add     rdx, rdi
.text:00000000000043CB                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000043D2                 mov     esi, 1
.text:00000000000043D7                 xor     eax, eax
.text:00000000000043D9                 call    ___fprintf_chk
.text:00000000000043DE                 mov     eax, 1
.text:00000000000043E3                 add     rsp, 8
.text:00000000000043E7                 retn
.text:00000000000043E7 ; } // starts at 43B0
.text:00000000000043E7 print_rel_part_part_2 endp
.text:00000000000043E7
.text:00000000000043E7 ; ---------------------------------------------------------------------------
.text:00000000000043E8                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0
.text:00000000000043F0 time_zone_hhmm_isra_4 proc near         ; CODE XREF: yyparse+1260↓p
.text:00000000000043F0                                         ; yyparse+1325↓p
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 cmp     rcx, 2
.text:00000000000043F4                 mov     r9, rdx
.text:00000000000043F7                 jg      short loc_4440
.text:00000000000043F9                 test    r8, r8
.text:00000000000043FC                 js      loc_4490
.text:0000000000004402
.text:0000000000004402 loc_4402:                               ; CODE XREF: time_zone_hhmm_isra_4+53↓j
.text:0000000000004402                 xor     ecx, ecx
.text:0000000000004404                 imul    r9, 3Ch ; '<'
.text:0000000000004408                 seto    cl
.text:000000000000440B                 test    sil, sil
.text:000000000000440E                 jnz     short loc_4480
.text:0000000000004410                 xor     edx, edx
.text:0000000000004412                 add     r9, r8
.text:0000000000004415                 seto    dl
.text:0000000000004418
.text:0000000000004418 loc_4418:                               ; CODE XREF: time_zone_hhmm_isra_4+98↓j
.text:0000000000004418                 xor     eax, eax
.text:000000000000441A                 or      ecx, edx
.text:000000000000441C                 jnz     short locret_443C
.text:000000000000441E
.text:000000000000441E loc_441E:                               ; CODE XREF: time_zone_hhmm_isra_4+DA↓j
.text:000000000000441E                 lea     rdx, [r9+5A0h]
.text:0000000000004425                 xor     eax, eax
.text:0000000000004427                 cmp     rdx, 0B40h
.text:000000000000442E                 ja      short locret_443C
.text:0000000000004430                 imul    r9d, 3Ch ; '<'
.text:0000000000004434                 mov     eax, 1
.text:0000000000004439                 mov     [rdi], r9d
.text:000000000000443C
.text:000000000000443C locret_443C:                            ; CODE XREF: time_zone_hhmm_isra_4+2C↑j
.text:000000000000443C                                         ; time_zone_hhmm_isra_4+3E↑j
.text:000000000000443C                 rep retn
.text:000000000000443C ; ---------------------------------------------------------------------------
.text:000000000000443E                 align 20h
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: time_zone_hhmm_isra_4+7↑j
.text:0000000000004440                 test    r8, r8
.text:0000000000004443                 jns     short loc_4402
.text:0000000000004445                 mov     rax, r9
.text:0000000000004448                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:0000000000004452                 imul    rdx
.text:0000000000004455                 mov     rax, r9
.text:0000000000004458                 sar     rax, 3Fh
.text:000000000000445C                 lea     rcx, [rdx+r9]
.text:0000000000004460                 sar     rcx, 6
.text:0000000000004464                 sub     rcx, rax
.text:0000000000004467                 lea     rax, [rcx+rcx*4]
.text:000000000000446B                 mov     rcx, r9
.text:000000000000446E                 lea     rax, [rax+rax*4]
.text:0000000000004472                 shl     rax, 2
.text:0000000000004476                 sub     rcx, rax
.text:0000000000004479                 jmp     short loc_449E
.text:0000000000004479 ; ---------------------------------------------------------------------------
.text:000000000000447B                 align 20h
.text:0000000000004480
.text:0000000000004480 loc_4480:                               ; CODE XREF: time_zone_hhmm_isra_4+1E↑j
.text:0000000000004480                 xor     edx, edx
.text:0000000000004482                 sub     r9, r8
.text:0000000000004485                 seto    dl
.text:0000000000004488                 jmp     short loc_4418
.text:0000000000004488 ; ---------------------------------------------------------------------------
.text:000000000000448A                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: time_zone_hhmm_isra_4+C↑j
.text:0000000000004490                 lea     rax, [rdx+rdx*4]
.text:0000000000004494                 xor     ecx, ecx
.text:0000000000004496                 lea     r9, [rax+rax*4]
.text:000000000000449A                 shl     r9, 2
.text:000000000000449E
.text:000000000000449E loc_449E:                               ; CODE XREF: time_zone_hhmm_isra_4+89↑j
.text:000000000000449E                 mov     rax, r9
.text:00000000000044A1                 mov     rdx, 0A3D70A3D70A3D70Bh
.text:00000000000044AB                 imul    rdx
.text:00000000000044AE                 add     rdx, r9
.text:00000000000044B1                 sar     r9, 3Fh
.text:00000000000044B5                 sar     rdx, 6
.text:00000000000044B9                 sub     rdx, r9
.text:00000000000044BC                 mov     rax, rdx
.text:00000000000044BF                 shl     rax, 4
.text:00000000000044C3                 sub     rax, rdx
.text:00000000000044C6                 lea     r9, [rcx+rax*4]
.text:00000000000044CA                 jmp     loc_441E
.text:00000000000044CA ; } // starts at 43F0
.text:00000000000044CA time_zone_hhmm_isra_4 endp
.text:00000000000044CA
.text:00000000000044CA ; ---------------------------------------------------------------------------
.text:00000000000044CF                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0
.text:00000000000044D0 mktime_ok_part_6 proc near              ; CODE XREF: parse_datetime2+CC8↓p
.text:00000000000044D0                                         ; parse_datetime2+10DB↓p
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 mov     eax, [rdi]
.text:00000000000044D2                 mov     edx, [rdi+4]
.text:00000000000044D5                 xor     eax, [rsi]
.text:00000000000044D7                 xor     edx, [rsi+4]
.text:00000000000044DA                 or      eax, edx
.text:00000000000044DC                 mov     edx, [rdi+8]
.text:00000000000044DF                 xor     edx, [rsi+8]
.text:00000000000044E2                 or      eax, edx
.text:00000000000044E4                 mov     edx, [rdi+0Ch]
.text:00000000000044E7                 xor     edx, [rsi+0Ch]
.text:00000000000044EA                 or      eax, edx
.text:00000000000044EC                 mov     edx, [rdi+10h]
.text:00000000000044EF                 xor     edx, [rsi+10h]
.text:00000000000044F2                 or      eax, edx
.text:00000000000044F4                 mov     edx, [rdi+14h]
.text:00000000000044F7                 xor     edx, [rsi+14h]
.text:00000000000044FA                 or      eax, edx
.text:00000000000044FC                 setz    al
.text:00000000000044FF                 retn
.text:00000000000044FF ; } // starts at 44D0
.text:00000000000044FF mktime_ok_part_6 endp
.text:00000000000044FF
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500
.text:0000000000004500 lookup_zone     proc near               ; CODE XREF: yyparse+1978↓p
.text:0000000000004500                                         ; yyparse+1B6F↓p
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 push    r12
.text:0000000000004502                 mov     r12, rdi
.text:0000000000004505                 push    rbp
.text:0000000000004506                 mov     rbp, rsi
.text:0000000000004509                 push    rbx
.text:000000000000450A                 lea     rsi, aGmt       ; "GMT"
.text:0000000000004511                 lea     rbx, universal_time_zone_table
.text:0000000000004518                 jmp     short loc_452C
.text:0000000000004518 ; ---------------------------------------------------------------------------
.text:000000000000451A                 align 20h
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: lookup_zone+36↓j
.text:0000000000004520                 add     rbx, 10h
.text:0000000000004524                 mov     rsi, [rbx]      ; s2
.text:0000000000004527                 test    rsi, rsi
.text:000000000000452A                 jz      short loc_4540
.text:000000000000452C
.text:000000000000452C loc_452C:                               ; CODE XREF: lookup_zone+18↑j
.text:000000000000452C                 mov     rdi, rbp        ; s1
.text:000000000000452F                 call    _strcmp
.text:0000000000004534                 test    eax, eax
.text:0000000000004536                 jnz     short loc_4520
.text:0000000000004538
.text:0000000000004538 loc_4538:                               ; CODE XREF: lookup_zone+88↓j
.text:0000000000004538                 mov     rax, rbx
.text:000000000000453B                 pop     rbx
.text:000000000000453C                 pop     rbp
.text:000000000000453D                 pop     r12
.text:000000000000453F                 retn
.text:0000000000004540 ; ---------------------------------------------------------------------------
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: lookup_zone+2A↑j
.text:0000000000004540                 mov     rsi, [r12+0E8h]
.text:0000000000004548                 lea     rbx, [r12+0E8h]
.text:0000000000004550                 test    rsi, rsi
.text:0000000000004553                 jnz     short loc_459C
.text:0000000000004555                 nop     dword ptr [rax]
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: lookup_zone+9A↓j
.text:0000000000004558                 lea     rbx, time_zone_table
.text:000000000000455F                 lea     rsi, aWet       ; "WET"
.text:0000000000004566                 jmp     short loc_457C
.text:0000000000004566 ; ---------------------------------------------------------------------------
.text:0000000000004568                 align 10h
.text:0000000000004570
.text:0000000000004570 loc_4570:                               ; CODE XREF: lookup_zone+86↓j
.text:0000000000004570                 add     rbx, 10h
.text:0000000000004574                 mov     rsi, [rbx]      ; s2
.text:0000000000004577                 test    rsi, rsi
.text:000000000000457A                 jz      short loc_45B0
.text:000000000000457C
.text:000000000000457C loc_457C:                               ; CODE XREF: lookup_zone+66↑j
.text:000000000000457C                 mov     rdi, rbp        ; s1
.text:000000000000457F                 call    _strcmp
.text:0000000000004584                 test    eax, eax
.text:0000000000004586                 jnz     short loc_4570
.text:0000000000004588                 jmp     short loc_4538
.text:0000000000004588 ; ---------------------------------------------------------------------------
.text:000000000000458A                 align 10h
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: lookup_zone+A6↓j
.text:0000000000004590                 add     rbx, 10h
.text:0000000000004594                 mov     rsi, [rbx]      ; s2
.text:0000000000004597                 test    rsi, rsi
.text:000000000000459A                 jz      short loc_4558
.text:000000000000459C
.text:000000000000459C loc_459C:                               ; CODE XREF: lookup_zone+53↑j
.text:000000000000459C                 mov     rdi, rbp        ; s1
.text:000000000000459F                 call    _strcmp
.text:00000000000045A4                 test    eax, eax
.text:00000000000045A6                 jnz     short loc_4590
.text:00000000000045A8                 mov     rax, rbx
.text:00000000000045AB                 pop     rbx
.text:00000000000045AC                 pop     rbp
.text:00000000000045AD                 pop     r12
.text:00000000000045AF                 retn
.text:00000000000045B0 ; ---------------------------------------------------------------------------
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: lookup_zone+7A↑j
.text:00000000000045B0                 xor     ebx, ebx
.text:00000000000045B2                 mov     rax, rbx
.text:00000000000045B5                 pop     rbx
.text:00000000000045B6                 pop     rbp
.text:00000000000045B7                 pop     r12
.text:00000000000045B9                 retn
.text:00000000000045B9 ; } // starts at 4500
.text:00000000000045B9 lookup_zone     endp
.text:00000000000045B9
.text:00000000000045B9 ; ---------------------------------------------------------------------------
.text:00000000000045BA                 align 20h
.text:00000000000045C0
.text:00000000000045C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045C0
.text:00000000000045C0
.text:00000000000045C0 debug_print_relative_time_part_11 proc near
.text:00000000000045C0                                         ; CODE XREF: yyparse+287↓p
.text:00000000000045C0 ; __unwind {
.text:00000000000045C0                 push    rbp
.text:00000000000045C1                 push    rbx
.text:00000000000045C2                 mov     rbx, rsi
.text:00000000000045C5                 lea     rsi, aParsedSPart ; "parsed %s part: "
.text:00000000000045CC                 mov     rbp, rdi
.text:00000000000045CF                 mov     edx, 5          ; category
.text:00000000000045D4                 sub     rsp, 8
.text:00000000000045D8                 xor     edi, edi        ; domainname
.text:00000000000045DA                 call    _dcgettext
.text:00000000000045DF                 mov     rsi, rbp
.text:00000000000045E2                 mov     rdi, rax
.text:00000000000045E5                 xor     eax, eax
.text:00000000000045E7                 call    dbg_printf
.text:00000000000045EC                 mov     rsi, [rbx+68h]
.text:00000000000045F0                 test    rsi, rsi
.text:00000000000045F3                 jnz     loc_4780
.text:00000000000045F9                 mov     rsi, [rbx+70h]
.text:00000000000045FD                 test    rsi, rsi
.text:0000000000004600                 jz      short loc_4680
.text:0000000000004602                 xor     edi, edi
.text:0000000000004604
.text:0000000000004604 loc_4604:                               ; CODE XREF: debug_print_relative_time_part_11+1D8↓j
.text:0000000000004604                 lea     rdx, aMonthS    ; "month(s)"
.text:000000000000460B                 call    print_rel_part_part_2
.text:0000000000004610                 mov     rsi, [rbx+78h]
.text:0000000000004614                 movzx   edi, al
.text:0000000000004617
.text:0000000000004617 loc_4617:                               ; CODE XREF: debug_print_relative_time_part_11+1E2↓j
.text:0000000000004617                 test    rsi, rsi
.text:000000000000461A                 jnz     loc_46F0
.text:0000000000004620
.text:0000000000004620 loc_4620:                               ; CODE XREF: debug_print_relative_time_part_11+D3↓j
.text:0000000000004620                                         ; debug_print_relative_time_part_11+DD↓j ...
.text:0000000000004620                 mov     rsi, [rbx+80h]
.text:0000000000004627                 test    rsi, rsi
.text:000000000000462A                 jnz     loc_470F
.text:0000000000004630
.text:0000000000004630 loc_4630:                               ; CODE XREF: debug_print_relative_time_part_11+149↓j
.text:0000000000004630                 mov     rsi, [rbx+88h]
.text:0000000000004637                 test    rsi, rsi
.text:000000000000463A                 jnz     loc_472E
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: debug_print_relative_time_part_11+168↓j
.text:0000000000004640                 mov     rsi, [rbx+90h]
.text:0000000000004647                 test    rsi, rsi
.text:000000000000464A                 jnz     loc_474D
.text:0000000000004650
.text:0000000000004650 loc_4650:                               ; CODE XREF: debug_print_relative_time_part_11+187↓j
.text:0000000000004650                 movsxd  rsi, dword ptr [rbx+98h]
.text:0000000000004657                 test    rsi, rsi
.text:000000000000465A                 jnz     loc_476C
.text:0000000000004660
.text:0000000000004660 loc_4660:                               ; CODE XREF: debug_print_relative_time_part_11+1A6↓j
.text:0000000000004660                                         ; debug_print_relative_time_part_11+1B8↓j
.text:0000000000004660                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004667                 add     rsp, 8
.text:000000000000466B                 mov     edi, 0Ah        ; c
.text:0000000000004670                 pop     rbx
.text:0000000000004671                 pop     rbp
.text:0000000000004672                 jmp     _fputc
.text:0000000000004672 ; ---------------------------------------------------------------------------
.text:0000000000004677                 align 20h
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: debug_print_relative_time_part_11+40↑j
.text:0000000000004680                 mov     rsi, [rbx+78h]
.text:0000000000004684                 xor     edi, edi
.text:0000000000004686                 test    rsi, rsi
.text:0000000000004689                 jnz     short loc_46F0
.text:000000000000468B                 cmp     qword ptr [rbx+80h], 0
.text:0000000000004693                 jnz     short loc_4620
.text:0000000000004695                 cmp     qword ptr [rbx+88h], 0
.text:000000000000469D                 jnz     short loc_4620
.text:000000000000469F                 cmp     qword ptr [rbx+90h], 0
.text:00000000000046A7                 jnz     loc_4620
.text:00000000000046AD                 mov     eax, [rbx+98h]
.text:00000000000046B3                 test    eax, eax
.text:00000000000046B5                 jnz     loc_4620
.text:00000000000046BB                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:00000000000046C2                 lea     rsi, aTodayThisNow ; "today/this/now\n"
.text:00000000000046C9                 xor     edi, edi        ; domainname
.text:00000000000046CB                 mov     edx, 5          ; category
.text:00000000000046D0                 call    _dcgettext
.text:00000000000046D5                 add     rsp, 8
.text:00000000000046D9                 mov     rsi, rbx        ; stream
.text:00000000000046DC                 mov     rdi, rax        ; s
.text:00000000000046DF                 pop     rbx
.text:00000000000046E0                 pop     rbp
.text:00000000000046E1                 jmp     _fputs
.text:00000000000046E1 ; ---------------------------------------------------------------------------
.text:00000000000046E6                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: debug_print_relative_time_part_11+5A↑j
.text:00000000000046F0                                         ; debug_print_relative_time_part_11+C9↑j
.text:00000000000046F0                 lea     rdx, aDayS      ; "day(s)"
.text:00000000000046F7                 call    print_rel_part_part_2
.text:00000000000046FC                 mov     rsi, [rbx+80h]
.text:0000000000004703                 movzx   edi, al
.text:0000000000004706                 test    rsi, rsi
.text:0000000000004709                 jz      loc_4630
.text:000000000000470F
.text:000000000000470F loc_470F:                               ; CODE XREF: debug_print_relative_time_part_11+6A↑j
.text:000000000000470F                 lea     rdx, aHourS     ; "hour(s)"
.text:0000000000004716                 call    print_rel_part_part_2
.text:000000000000471B                 mov     rsi, [rbx+88h]
.text:0000000000004722                 movzx   edi, al
.text:0000000000004725                 test    rsi, rsi
.text:0000000000004728                 jz      loc_4640
.text:000000000000472E
.text:000000000000472E loc_472E:                               ; CODE XREF: debug_print_relative_time_part_11+7A↑j
.text:000000000000472E                 lea     rdx, aMinutes   ; "minutes"
.text:0000000000004735                 call    print_rel_part_part_2
.text:000000000000473A                 mov     rsi, [rbx+90h]
.text:0000000000004741                 movzx   edi, al
.text:0000000000004744                 test    rsi, rsi
.text:0000000000004747                 jz      loc_4650
.text:000000000000474D
.text:000000000000474D loc_474D:                               ; CODE XREF: debug_print_relative_time_part_11+8A↑j
.text:000000000000474D                 lea     rdx, aSeconds   ; "seconds"
.text:0000000000004754                 call    print_rel_part_part_2
.text:0000000000004759                 movsxd  rsi, dword ptr [rbx+98h]
.text:0000000000004760                 movzx   edi, al
.text:0000000000004763                 test    rsi, rsi
.text:0000000000004766                 jz      loc_4660
.text:000000000000476C
.text:000000000000476C loc_476C:                               ; CODE XREF: debug_print_relative_time_part_11+9A↑j
.text:000000000000476C                 lea     rdx, aNanoseconds ; "nanoseconds"
.text:0000000000004773                 call    print_rel_part_part_2
.text:0000000000004778                 jmp     loc_4660
.text:0000000000004778 ; ---------------------------------------------------------------------------
.text:000000000000477D                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: debug_print_relative_time_part_11+33↑j
.text:0000000000004780                 lea     rdx, aYearS     ; "year(s)"
.text:0000000000004787                 xor     edi, edi
.text:0000000000004789                 call    print_rel_part_part_2
.text:000000000000478E                 mov     rsi, [rbx+70h]
.text:0000000000004792                 movzx   edi, al
.text:0000000000004795                 test    rsi, rsi
.text:0000000000004798                 jnz     loc_4604
.text:000000000000479E                 mov     rsi, [rbx+78h]
.text:00000000000047A2                 jmp     loc_4617
.text:00000000000047A2 ; } // starts at 45C0
.text:00000000000047A2 debug_print_relative_time_part_11 endp
.text:00000000000047A2
.text:00000000000047A2 ; ---------------------------------------------------------------------------
.text:00000000000047A7                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0
.text:00000000000047B0 debug_strfdatetime_constprop_12 proc near
.text:00000000000047B0                                         ; CODE XREF: parse_datetime2+828↓p
.text:00000000000047B0                                         ; parse_datetime2+895↓p ...
.text:00000000000047B0
.text:00000000000047B0 var_20          = qword ptr -20h
.text:00000000000047B0
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 push    r12
.text:00000000000047B2                 push    rbp
.text:00000000000047B3                 mov     rcx, rdi
.text:00000000000047B6                 push    rbx
.text:00000000000047B7                 mov     rbx, rdx
.text:00000000000047BA                 lea     rdx, aYMDYMDHMS ; "(Y-M-D) %Y-%m-%d %H:%M:%S"
.text:00000000000047C1                 mov     r12, rsi
.text:00000000000047C4                 xor     r9d, r9d
.text:00000000000047C7                 xor     r8d, r8d
.text:00000000000047CA                 sub     rsp, 30h
.text:00000000000047CE                 mov     esi, 64h ; 'd'
.text:00000000000047D3                 mov     rdi, rbx
.text:00000000000047D6                 mov     rax, fs:28h
.text:00000000000047DF                 mov     [rsp+48h+var_20], rax
.text:00000000000047E4                 xor     eax, eax
.text:00000000000047E6                 call    nstrftime
.text:00000000000047EB                 test    r12, r12
.text:00000000000047EE                 jz      short loc_4803
.text:00000000000047F0                 cmp     eax, 63h ; 'c'
.text:00000000000047F3                 mov     rbp, rax
.text:00000000000047F6                 jg      short loc_4803
.text:00000000000047F8                 cmp     qword ptr [r12+0D0h], 0
.text:0000000000004801                 jnz     short loc_4820
.text:0000000000004803
.text:0000000000004803 loc_4803:                               ; CODE XREF: debug_strfdatetime_constprop_12+3E↑j
.text:0000000000004803                                         ; debug_strfdatetime_constprop_12+46↑j ...
.text:0000000000004803                 mov     rdx, [rsp+48h+var_20]
.text:0000000000004808                 xor     rdx, fs:28h
.text:0000000000004811                 mov     rax, rbx
.text:0000000000004814                 jnz     short loc_485C
.text:0000000000004816                 add     rsp, 30h
.text:000000000000481A                 pop     rbx
.text:000000000000481B                 pop     rbp
.text:000000000000481C                 pop     r12
.text:000000000000481E                 retn
.text:000000000000481E ; ---------------------------------------------------------------------------
.text:000000000000481F                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: debug_strfdatetime_constprop_12+51↑j
.text:0000000000004820                 mov     edi, [r12+18h]
.text:0000000000004825                 mov     rsi, rsp
.text:0000000000004828                 call    time_zone_str
.text:000000000000482D                 mov     esi, 64h ; 'd'
.text:0000000000004832                 movsxd  rdi, ebp
.text:0000000000004835                 lea     r8, aTzS        ; " TZ=%s"
.text:000000000000483C                 sub     esi, ebp
.text:000000000000483E                 mov     r9, rax
.text:0000000000004841                 add     rdi, rbx
.text:0000000000004844                 movsxd  rsi, esi
.text:0000000000004847                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000484E                 mov     edx, 1
.text:0000000000004853                 xor     eax, eax
.text:0000000000004855                 call    ___snprintf_chk
.text:000000000000485A                 jmp     short loc_4803
.text:000000000000485C ; ---------------------------------------------------------------------------
.text:000000000000485C
.text:000000000000485C loc_485C:                               ; CODE XREF: debug_strfdatetime_constprop_12+64↑j
.text:000000000000485C                 call    ___stack_chk_fail
.text:000000000000485C ; } // starts at 47B0
.text:000000000000485C debug_strfdatetime_constprop_12 endp
.text:000000000000485C
.text:000000000000485C ; ---------------------------------------------------------------------------
.text:0000000000004861                 align 10h
.text:0000000000004870
.text:0000000000004870 ; =============== S U B R O U T I N E =======================================
.text:0000000000004870
.text:0000000000004870
.text:0000000000004870 str_days_constprop_13 proc near         ; CODE XREF: debug_print_current_time_part_10+EC↓p
.text:0000000000004870                                         ; parse_datetime2+11CB↓p ...
.text:0000000000004870 ; __unwind {
.text:0000000000004870                 push    rbp
.text:0000000000004871                 push    rbx
.text:0000000000004872                 mov     rbp, rsi
.text:0000000000004875                 mov     rbx, rdi
.text:0000000000004878                 sub     rsp, 8
.text:000000000000487C                 cmp     byte ptr [rdi+0E0h], 0
.text:0000000000004883                 jz      short loc_48D8
.text:0000000000004885                 mov     r9, [rdi+8]
.text:0000000000004889                 lea     rax, [r9+1]
.text:000000000000488D                 cmp     rax, 0Dh
.text:0000000000004891                 jbe     loc_4928
.text:0000000000004897                 lea     r8, aNumberOfSecond+13h ; "%ld"
.text:000000000000489E                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048A5                 mov     edx, 1
.text:00000000000048AA                 mov     esi, 64h ; 'd'
.text:00000000000048AF                 mov     rdi, rbp
.text:00000000000048B2                 xor     eax, eax
.text:00000000000048B4                 call    ___snprintf_chk
.text:00000000000048B9
.text:00000000000048B9 loc_48B9:                               ; CODE XREF: str_days_constprop_13+E0↓j
.text:00000000000048B9                 movsxd  rdx, dword ptr [rbx+10h]
.text:00000000000048BD                 cmp     edx, 6
.text:00000000000048C0                 ja      short loc_48CB
.text:00000000000048C2                 cmp     eax, 63h ; 'c'
.text:00000000000048C5                 jbe     loc_4955
.text:00000000000048CB
.text:00000000000048CB loc_48CB:                               ; CODE XREF: str_days_constprop_13+50↑j
.text:00000000000048CB                                         ; str_days_constprop_13+72↓j
.text:00000000000048CB                 add     rsp, 8
.text:00000000000048CF                 mov     rax, rbp
.text:00000000000048D2                 pop     rbx
.text:00000000000048D3                 pop     rbp
.text:00000000000048D4                 retn
.text:00000000000048D4 ; ---------------------------------------------------------------------------
.text:00000000000048D5                 align 8
.text:00000000000048D8
.text:00000000000048D8 loc_48D8:                               ; CODE XREF: str_days_constprop_13+13↑j
.text:00000000000048D8                 mov     byte ptr [rsi], 0
.text:00000000000048DB                 movsxd  rdx, dword ptr [rdi+10h]
.text:00000000000048DF                 cmp     edx, 6
.text:00000000000048E2                 ja      short loc_48CB
.text:00000000000048E4                 mov     rdi, rsi
.text:00000000000048E7                 mov     ecx, 1
.text:00000000000048EC                 mov     esi, 64h ; 'd'
.text:00000000000048F1
.text:00000000000048F1 loc_48F1:                               ; CODE XREF: str_days_constprop_13+FD↓j
.text:00000000000048F1                 lea     rax, days_values_5109
.text:00000000000048F8                 lea     r9, [rax+rdx*4]
.text:00000000000048FC                 lea     rax, aS_0+1     ; " %s"
.text:0000000000004903                 mov     edx, 1
.text:0000000000004908                 lea     r8, [rax+rcx]
.text:000000000000490C                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004913                 xor     eax, eax
.text:0000000000004915                 call    ___snprintf_chk
.text:000000000000491A                 add     rsp, 8
.text:000000000000491E                 mov     rax, rbp
.text:0000000000004921                 pop     rbx
.text:0000000000004922                 pop     rbp
.text:0000000000004923                 retn
.text:0000000000004923 ; ---------------------------------------------------------------------------
.text:0000000000004924                 align 8
.text:0000000000004928
.text:0000000000004928 loc_4928:                               ; CODE XREF: str_days_constprop_13+21↑j
.text:0000000000004928                 lea     rdx, [rax+rax*4]
.text:000000000000492C                 mov     esi, 64h ; 'd'  ; maxlen
.text:0000000000004931                 mov     rdi, rbp        ; s
.text:0000000000004934                 lea     rcx, [rax+rdx*2]
.text:0000000000004938                 lea     rax, ordinal_values_5108 ; "last"
.text:000000000000493F                 lea     rdx, aS_0+2     ; format
.text:0000000000004946                 add     rcx, rax
.text:0000000000004949                 xor     eax, eax
.text:000000000000494B                 call    _snprintf
.text:0000000000004950                 jmp     loc_48B9
.text:0000000000004955 ; ---------------------------------------------------------------------------
.text:0000000000004955
.text:0000000000004955 loc_4955:                               ; CODE XREF: str_days_constprop_13+55↑j
.text:0000000000004955                 xor     ecx, ecx
.text:0000000000004957                 mov     esi, 64h ; 'd'
.text:000000000000495C                 test    eax, eax
.text:000000000000495E                 setz    cl
.text:0000000000004961                 sub     esi, eax
.text:0000000000004963                 cdqe
.text:0000000000004965                 movsxd  rsi, esi
.text:0000000000004968                 lea     rdi, [rbp+rax+0]
.text:000000000000496D                 jmp     short loc_48F1
.text:000000000000496D ; } // starts at 4870
.text:000000000000496D str_days_constprop_13 endp
.text:000000000000496D
.text:000000000000496D ; ---------------------------------------------------------------------------
.text:000000000000496F                 align 10h
.text:0000000000004970
.text:0000000000004970 ; =============== S U B R O U T I N E =======================================
.text:0000000000004970
.text:0000000000004970
.text:0000000000004970 debug_print_current_time_part_10 proc near
.text:0000000000004970                                         ; CODE XREF: yyparse+DA3↓p
.text:0000000000004970
.text:0000000000004970 var_30          = qword ptr -30h
.text:0000000000004970
.text:0000000000004970 ; __unwind {
.text:0000000000004970                 push    r13
.text:0000000000004972                 push    r12
.text:0000000000004974                 mov     edx, 5          ; category
.text:0000000000004979                 push    rbp
.text:000000000000497A                 push    rbx
.text:000000000000497B                 mov     rbx, rsi
.text:000000000000497E                 lea     rsi, aParsedSPart ; "parsed %s part: "
.text:0000000000004985                 mov     rbp, rdi
.text:0000000000004988                 xor     edi, edi        ; domainname
.text:000000000000498A                 sub     rsp, 78h
.text:000000000000498E                 mov     rax, fs:28h
.text:0000000000004997                 mov     [rsp+98h+var_30], rax
.text:000000000000499C                 xor     eax, eax
.text:000000000000499E                 call    _dcgettext
.text:00000000000049A3                 mov     rsi, rbp
.text:00000000000049A6                 mov     rdi, rax
.text:00000000000049A9                 xor     eax, eax
.text:00000000000049AB                 call    dbg_printf
.text:00000000000049B0                 cmp     qword ptr [rbx+0A8h], 0
.text:00000000000049B8                 jz      short loc_49C7
.text:00000000000049BA                 cmp     byte ptr [rbx+0DAh], 0
.text:00000000000049C1                 jz      loc_4BC0
.text:00000000000049C7
.text:00000000000049C7 loc_49C7:                               ; CODE XREF: debug_print_current_time_part_10+48↑j
.text:00000000000049C7                 movzx   eax, byte ptr [rbx+0DFh]
.text:00000000000049CE                 cmp     [rbx+0D8h], al
.text:00000000000049D4                 jz      loc_4BB4
.text:00000000000049DA
.text:00000000000049DA loc_49DA:                               ; CODE XREF: debug_print_current_time_part_10+2A6↓j
.text:00000000000049DA                 lea     rsi, aYear04ld  ; "year: %04ld"
.text:00000000000049E1                 mov     rbp, [rbx+28h]
.text:00000000000049E5                 mov     edx, 5          ; category
.text:00000000000049EA                 xor     edi, edi        ; domainname
.text:00000000000049EC                 call    _dcgettext
.text:00000000000049F1                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000049F8                 mov     rdx, rax
.text:00000000000049FB                 mov     rcx, rbp
.text:00000000000049FE                 mov     esi, 1
.text:0000000000004A03                 xor     eax, eax
.text:0000000000004A05                 call    ___fprintf_chk
.text:0000000000004A0A                 movzx   eax, byte ptr [rbx+0D8h]
.text:0000000000004A11                 mov     edx, 1
.text:0000000000004A16                 mov     [rbx+0DFh], al
.text:0000000000004A1C
.text:0000000000004A1C loc_4A1C:                               ; CODE XREF: debug_print_current_time_part_10+246↓j
.text:0000000000004A1C                                         ; debug_print_current_time_part_10+28F↓j
.text:0000000000004A1C                 cmp     qword ptr [rbx+0C8h], 0
.text:0000000000004A24                 jz      short loc_4A33
.text:0000000000004A26                 cmp     byte ptr [rbx+0DDh], 0
.text:0000000000004A2D                 jz      loc_4C20
.text:0000000000004A33
.text:0000000000004A33 loc_4A33:                               ; CODE XREF: debug_print_current_time_part_10+B4↑j
.text:0000000000004A33                 cmp     qword ptr [rbx+0B0h], 0
.text:0000000000004A3B                 jz      short loc_4AA2
.text:0000000000004A3D                 cmp     byte ptr [rbx+0DBh], 0
.text:0000000000004A44                 jnz     short loc_4AA2
.text:0000000000004A46                 test    dl, dl
.text:0000000000004A48                 jnz     loc_4C8F
.text:0000000000004A4E
.text:0000000000004A4E loc_4A4E:                               ; CODE XREF: debug_print_current_time_part_10+330↓j
.text:0000000000004A4E                 mov     rsi, rsp
.text:0000000000004A51                 mov     rdi, rbx
.text:0000000000004A54                 mov     r13d, [rbx+10h]
.text:0000000000004A58                 mov     r12, [rbx+8]
.text:0000000000004A5C                 call    str_days_constprop_13
.text:0000000000004A61                 lea     rsi, aSDayOrdinalLdN ; "%s (day ordinal=%ld number=%d)"
.text:0000000000004A68                 mov     edx, 5          ; category
.text:0000000000004A6D                 xor     edi, edi        ; domainname
.text:0000000000004A6F                 mov     rbp, rax
.text:0000000000004A72                 call    _dcgettext
.text:0000000000004A77                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004A7E                 mov     rdx, rax
.text:0000000000004A81                 mov     r9d, r13d
.text:0000000000004A84                 mov     r8, r12
.text:0000000000004A87                 mov     rcx, rbp
.text:0000000000004A8A                 mov     esi, 1
.text:0000000000004A8F                 xor     eax, eax
.text:0000000000004A91                 call    ___fprintf_chk
.text:0000000000004A96                 mov     byte ptr [rbx+0DBh], 1
.text:0000000000004A9D                 mov     edx, 1
.text:0000000000004AA2
.text:0000000000004AA2 loc_4AA2:                               ; CODE XREF: debug_print_current_time_part_10+CB↑j
.text:0000000000004AA2                                         ; debug_print_current_time_part_10+D4↑j ...
.text:0000000000004AA2                 cmp     qword ptr [rbx+0B8h], 0
.text:0000000000004AAA                 jz      loc_4B30
.text:0000000000004AB0                 cmp     byte ptr [rbx+0DCh], 0
.text:0000000000004AB7                 jnz     short loc_4B30
.text:0000000000004AB9                 cmp     qword ptr [rbx+0C0h], 0
.text:0000000000004AC1                 lea     rax, aDst       ; " DST"
.text:0000000000004AC8                 lea     r8, aUserProvidedTi+1Dh ; ""
.text:0000000000004ACF                 mov     ecx, [rbx+14h]
.text:0000000000004AD2                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004AD9                 mov     esi, 1
.text:0000000000004ADE                 cmovnz  r8, rax
.text:0000000000004AE2                 xor     edx, 1
.text:0000000000004AE5                 lea     rax, aIsdstDS   ; " isdst=%d%s"
.text:0000000000004AEC                 movzx   edx, dl
.text:0000000000004AEF                 add     rdx, rax
.text:0000000000004AF2                 xor     eax, eax
.text:0000000000004AF4                 call    ___fprintf_chk
.text:0000000000004AF9                 cmp     qword ptr [rbx+0D0h], 0
.text:0000000000004B01                 mov     byte ptr [rbx+0DCh], 1
.text:0000000000004B08                 jnz     loc_4CA8
.text:0000000000004B0E
.text:0000000000004B0E loc_4B0E:                               ; CODE XREF: debug_print_current_time_part_10+33F↓j
.text:0000000000004B0E                                         ; debug_print_current_time_part_10+38B↓j
.text:0000000000004B0E                 cmp     byte ptr [rbx+0A0h], 0
.text:0000000000004B15                 jz      short loc_4B84
.text:0000000000004B17                 mov     rbx, [rbx+58h]
.text:0000000000004B1B
.text:0000000000004B1B loc_4B1B:                               ; CODE XREF: debug_print_current_time_part_10+1E6↓j
.text:0000000000004B1B                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004B22                 mov     edi, 20h ; ' '  ; c
.text:0000000000004B27                 call    _fputc
.text:0000000000004B2C                 jmp     short loc_4B58
.text:0000000000004B2C ; ---------------------------------------------------------------------------
.text:0000000000004B2E                 align 10h
.text:0000000000004B30
.text:0000000000004B30 loc_4B30:                               ; CODE XREF: debug_print_current_time_part_10+13A↑j
.text:0000000000004B30                                         ; debug_print_current_time_part_10+147↑j
.text:0000000000004B30                 cmp     qword ptr [rbx+0D0h], 0
.text:0000000000004B38                 jz      short loc_4B47
.text:0000000000004B3A                 cmp     byte ptr [rbx+0DEh], 0
.text:0000000000004B41                 jz      loc_4CC0
.text:0000000000004B47
.text:0000000000004B47 loc_4B47:                               ; CODE XREF: debug_print_current_time_part_10+1C8↑j
.text:0000000000004B47                 cmp     byte ptr [rbx+0A0h], 0
.text:0000000000004B4E                 jz      short loc_4B84
.text:0000000000004B50                 test    dl, dl
.text:0000000000004B52                 mov     rbx, [rbx+58h]
.text:0000000000004B56                 jnz     short loc_4B1B
.text:0000000000004B58
.text:0000000000004B58 loc_4B58:                               ; CODE XREF: debug_print_current_time_part_10+1BC↑j
.text:0000000000004B58                 lea     rsi, aNumberOfSecond ; "number of seconds: %ld"
.text:0000000000004B5F                 mov     edx, 5          ; category
.text:0000000000004B64                 xor     edi, edi        ; domainname
.text:0000000000004B66                 call    _dcgettext
.text:0000000000004B6B                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004B72                 mov     rdx, rax
.text:0000000000004B75                 mov     rcx, rbx
.text:0000000000004B78                 mov     esi, 1
.text:0000000000004B7D                 xor     eax, eax
.text:0000000000004B7F                 call    ___fprintf_chk
.text:0000000000004B84
.text:0000000000004B84 loc_4B84:                               ; CODE XREF: debug_print_current_time_part_10+1A5↑j
.text:0000000000004B84                                         ; debug_print_current_time_part_10+1DE↑j
.text:0000000000004B84                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004B8B                 mov     edi, 0Ah        ; c
.text:0000000000004B90                 call    _fputc
.text:0000000000004B95                 mov     rax, [rsp+98h+var_30]
.text:0000000000004B9A                 xor     rax, fs:28h
.text:0000000000004BA3                 jnz     loc_4D42
.text:0000000000004BA9                 add     rsp, 78h
.text:0000000000004BAD                 pop     rbx
.text:0000000000004BAE                 pop     rbp
.text:0000000000004BAF                 pop     r12
.text:0000000000004BB1                 pop     r13
.text:0000000000004BB3                 retn
.text:0000000000004BB4 ; ---------------------------------------------------------------------------
.text:0000000000004BB4
.text:0000000000004BB4 loc_4BB4:                               ; CODE XREF: debug_print_current_time_part_10+64↑j
.text:0000000000004BB4                 xor     edx, edx
.text:0000000000004BB6                 jmp     loc_4A1C
.text:0000000000004BB6 ; ---------------------------------------------------------------------------
.text:0000000000004BBB                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: debug_print_current_time_part_10+51↑j
.text:0000000000004BC0                 mov     rcx, [rbx+28h]
.text:0000000000004BC4                 mov     r9, [rbx+40h]
.text:0000000000004BC8                 lea     rdx, aYMD04ld02ld02l ; "(Y-M-D) %04ld-%02ld-%02ld"
.text:0000000000004BCF                 mov     r8, [rbx+38h]
.text:0000000000004BD3                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004BDA                 xor     eax, eax
.text:0000000000004BDC                 mov     esi, 1
.text:0000000000004BE1                 call    ___fprintf_chk
.text:0000000000004BE6                 movzx   eax, byte ptr [rbx+0DFh]
.text:0000000000004BED                 mov     byte ptr [rbx+0DAh], 1
.text:0000000000004BF4                 mov     edx, 1
.text:0000000000004BF9                 cmp     [rbx+0D8h], al
.text:0000000000004BFF                 jz      loc_4A1C
.text:0000000000004C05                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004C0C                 mov     edi, 20h ; ' '  ; c
.text:0000000000004C11                 call    _fputc
.text:0000000000004C16                 jmp     loc_49DA
.text:0000000000004C16 ; ---------------------------------------------------------------------------
.text:0000000000004C1B                 align 20h
.text:0000000000004C20
.text:0000000000004C20 loc_4C20:                               ; CODE XREF: debug_print_current_time_part_10+BD↑j
.text:0000000000004C20                 mov     rcx, [rbx+48h]
.text:0000000000004C24                 xor     edx, 1
.text:0000000000004C27                 lea     rax, a02ld02ld02ld ; " %02ld:%02ld:%02ld"
.text:0000000000004C2E                 mov     r9, [rbx+58h]
.text:0000000000004C32                 mov     r8, [rbx+50h]
.text:0000000000004C36                 movzx   edx, dl
.text:0000000000004C39                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004C40                 add     rdx, rax
.text:0000000000004C43                 mov     esi, 1
.text:0000000000004C48                 xor     eax, eax
.text:0000000000004C4A                 call    ___fprintf_chk
.text:0000000000004C4F                 mov     rcx, [rbx+60h]
.text:0000000000004C53                 test    rcx, rcx
.text:0000000000004C56                 jnz     loc_4D00
.text:0000000000004C5C
.text:0000000000004C5C loc_4C5C:                               ; CODE XREF: debug_print_current_time_part_10+3AA↓j
.text:0000000000004C5C                 cmp     dword ptr [rbx+1Ch], 1
.text:0000000000004C60                 jz      loc_4D20
.text:0000000000004C66
.text:0000000000004C66 loc_4C66:                               ; CODE XREF: debug_print_current_time_part_10+3CD↓j
.text:0000000000004C66                 cmp     qword ptr [rbx+0B0h], 0
.text:0000000000004C6E                 mov     byte ptr [rbx+0DDh], 1
.text:0000000000004C75                 mov     edx, 1
.text:0000000000004C7A                 jz      loc_4AA2
.text:0000000000004C80                 movzx   edx, byte ptr [rbx+0DBh]
.text:0000000000004C87                 test    dl, dl
.text:0000000000004C89                 jnz     loc_4AA2
.text:0000000000004C8F
.text:0000000000004C8F loc_4C8F:                               ; CODE XREF: debug_print_current_time_part_10+D8↑j
.text:0000000000004C8F                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000004C96                 mov     edi, 20h ; ' '  ; c
.text:0000000000004C9B                 call    _fputc
.text:0000000000004CA0                 jmp     loc_4A4E
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA5                 align 8
.text:0000000000004CA8
.text:0000000000004CA8 loc_4CA8:                               ; CODE XREF: debug_print_current_time_part_10+198↑j
.text:0000000000004CA8                 cmp     byte ptr [rbx+0DEh], 0
.text:0000000000004CAF                 jnz     loc_4B0E
.text:0000000000004CB5                 lea     rbp, aUtcS      ; " UTC%s"
.text:0000000000004CBC                 jmp     short loc_4CD0
.text:0000000000004CBC ; ---------------------------------------------------------------------------
.text:0000000000004CBE                 align 20h
.text:0000000000004CC0
.text:0000000000004CC0 loc_4CC0:                               ; CODE XREF: debug_print_current_time_part_10+1D1↑j
.text:0000000000004CC0                 xor     edx, 1
.text:0000000000004CC3                 movzx   ebp, dl
.text:0000000000004CC6                 lea     rdx, aUtcS      ; " UTC%s"
.text:0000000000004CCD                 add     rbp, rdx
.text:0000000000004CD0
.text:0000000000004CD0 loc_4CD0:                               ; CODE XREF: debug_print_current_time_part_10+34C↑j
.text:0000000000004CD0                 mov     edi, [rbx+18h]
.text:0000000000004CD3                 mov     rsi, rsp
.text:0000000000004CD6                 call    time_zone_str
.text:0000000000004CDB                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004CE2                 mov     rcx, rax
.text:0000000000004CE5                 mov     rdx, rbp
.text:0000000000004CE8                 mov     esi, 1
.text:0000000000004CED                 xor     eax, eax
.text:0000000000004CEF                 call    ___fprintf_chk
.text:0000000000004CF4                 mov     byte ptr [rbx+0DEh], 1
.text:0000000000004CFB                 jmp     loc_4B0E
.text:0000000000004D00 ; ---------------------------------------------------------------------------
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: debug_print_current_time_part_10+2E6↑j
.text:0000000000004D00                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000004D07                 lea     rdx, a09d       ; ".%09d"
.text:0000000000004D0E                 mov     esi, 1
.text:0000000000004D13                 xor     eax, eax
.text:0000000000004D15                 call    ___fprintf_chk
.text:0000000000004D1A                 jmp     loc_4C5C
.text:0000000000004D1A ; ---------------------------------------------------------------------------
.text:0000000000004D1F                 align 20h
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: debug_print_current_time_part_10+2F0↑j
.text:0000000000004D20                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004D27                 lea     rdi, aPm        ; "pm"
.text:0000000000004D2E                 mov     edx, 2          ; n
.text:0000000000004D33                 mov     esi, 1          ; size
.text:0000000000004D38                 call    _fwrite
.text:0000000000004D3D                 jmp     loc_4C66
.text:0000000000004D42 ; ---------------------------------------------------------------------------
.text:0000000000004D42
.text:0000000000004D42 loc_4D42:                               ; CODE XREF: debug_print_current_time_part_10+233↑j
.text:0000000000004D42                 call    ___stack_chk_fail
.text:0000000000004D42 ; } // starts at 4970
.text:0000000000004D42 debug_print_current_time_part_10 endp
.text:0000000000004D42
.text:0000000000004D42 ; ---------------------------------------------------------------------------
.text:0000000000004D47                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50 ; Attributes: info_from_lumina
.text:0000000000004D50
.text:0000000000004D50                 public yyparse
.text:0000000000004D50 yyparse         proc near               ; CODE XREF: parse_datetime2+3D1↓p
.text:0000000000004D50
.text:0000000000004D50 var_5F0         = qword ptr -5F0h
.text:0000000000004D50 var_5E8         = qword ptr -5E8h
.text:0000000000004D50 var_5E0         = qword ptr -5E0h
.text:0000000000004D50 var_5D8         = qword ptr -5D8h
.text:0000000000004D50 var_5D0         = qword ptr -5D0h
.text:0000000000004D50 var_5C4         = dword ptr -5C4h
.text:0000000000004D50 var_5C0         = qword ptr -5C0h
.text:0000000000004D50 var_5B8         = qword ptr -5B8h
.text:0000000000004D50 var_5B0         = qword ptr -5B0h
.text:0000000000004D50 var_5A8         = qword ptr -5A8h
.text:0000000000004D50 var_5A0         = qword ptr -5A0h
.text:0000000000004D50 var_598         = qword ptr -598h
.text:0000000000004D50 var_590         = qword ptr -590h
.text:0000000000004D50 var_588         = qword ptr -588h
.text:0000000000004D50 var_580         = qword ptr -580h
.text:0000000000004D50 var_578         = qword ptr -578h
.text:0000000000004D50 var_570         = qword ptr -570h
.text:0000000000004D50 var_568         = xmmword ptr -568h
.text:0000000000004D50 var_558         = xmmword ptr -558h
.text:0000000000004D50 var_548         = xmmword ptr -548h
.text:0000000000004D50 var_538         = qword ptr -538h
.text:0000000000004D50 var_528         = xmmword ptr -528h
.text:0000000000004D50 var_518         = xmmword ptr -518h
.text:0000000000004D50 var_508         = xmmword ptr -508h
.text:0000000000004D50 var_4F8         = qword ptr -4F8h
.text:0000000000004D50 var_4E8         = word ptr -4E8h
.text:0000000000004D50 var_4B8         = byte ptr -4B8h
.text:0000000000004D50 s1              = byte ptr -58h
.text:0000000000004D50 var_55          = byte ptr -55h
.text:0000000000004D50 var_40          = qword ptr -40h
.text:0000000000004D50
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 push    r15
.text:0000000000004D52                 push    r14
.text:0000000000004D54                 xor     edx, edx
.text:0000000000004D56                 push    r13
.text:0000000000004D58                 push    r12
.text:0000000000004D5A                 mov     r11, rdi
.text:0000000000004D5D                 push    rbp
.text:0000000000004D5E                 push    rbx
.text:0000000000004D5F                 mov     r14d, 26h ; '&'
.text:0000000000004D65                 xor     ebx, ebx
.text:0000000000004D67                 mov     r9d, 0FFFFFFFEh
.text:0000000000004D6D                 sub     rsp, 5C8h
.text:0000000000004D74                 lea     r15, [rsp+5F8h+var_4E8]
.text:0000000000004D7C                 lea     r13, [rsp+5F8h+var_4B8]
.text:0000000000004D84                 mov     [rsp+5F8h+var_4E8], dx
.text:0000000000004D8C                 mov     rax, fs:28h
.text:0000000000004D95                 mov     [rsp+5F8h+var_40], rax
.text:0000000000004D9D                 xor     eax, eax
.text:0000000000004D9F                 mov     r12, r15
.text:0000000000004DA2                 mov     [rsp+5F8h+var_5C4], 0
.text:0000000000004DAA
.text:0000000000004DAA loc_4DAA:                               ; CODE XREF: yyparse+3BC↓j
.text:0000000000004DAA                 movsx   r8d, r14b
.text:0000000000004DAE                 cmp     r8d, 0FFFFFFA3h
.text:0000000000004DB2                 jz      short loc_4DF0
.text:0000000000004DB4                 cmp     r9d, 0FFFFFFFEh
.text:0000000000004DB8                 jz      loc_5440
.text:0000000000004DBE
.text:0000000000004DBE loc_4DBE:                               ; CODE XREF: yyparse+939↓j
.text:0000000000004DBE                 test    r9d, r9d
.text:0000000000004DC1                 jle     loc_5370
.text:0000000000004DC7                 cmp     r9d, 115h
.text:0000000000004DCE                 jle     loc_5420
.text:0000000000004DD4                 add     r8d, 2
.text:0000000000004DD8                 mov     eax, 2
.text:0000000000004DDD                 cmp     r8d, 70h ; 'p'
.text:0000000000004DE1                 jbe     loc_537F
.text:0000000000004DE7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004DF0
.text:0000000000004DF0 loc_4DF0:                               ; CODE XREF: yyparse+62↑j
.text:0000000000004DF0                                         ; yyparse+629↓j ...
.text:0000000000004DF0                 lea     rax, yydefact
.text:0000000000004DF7                 movzx   ebp, byte ptr [rax+rbx]
.text:0000000000004DFB                 test    ebp, ebp
.text:0000000000004DFD                 jz      loc_5118
.text:0000000000004E03                 lea     rdx, yyr2
.text:0000000000004E0A                 movsxd  rax, ebp
.text:0000000000004E0D                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000004E11                 mov     edx, 1
.text:0000000000004E16                 sub     edx, eax
.text:0000000000004E18                 mov     rbx, rax
.text:0000000000004E1B                 movsxd  rdx, edx
.text:0000000000004E1E                 lea     rax, ds:0[rdx*8]
.text:0000000000004E26                 sub     rax, rdx
.text:0000000000004E29                 shl     rax, 3
.text:0000000000004E2D
.text:0000000000004E2D loc_4E2D:                               ; CODE XREF: yyparse+947↓j
.text:0000000000004E2D                 add     rax, r13
.text:0000000000004E30                 mov     rdi, [rax+10h]
.text:0000000000004E34                 mov     rdx, [rax+30h]
.text:0000000000004E38                 movdqu  xmm0, xmmword ptr [rax]
.text:0000000000004E3C                 mov     r14, [rax]
.text:0000000000004E3F                 mov     r10, [rax+8]
.text:0000000000004E43                 mov     [rsp+5F8h+var_5E8], rdi
.text:0000000000004E48                 mov     rdi, [rax+18h]
.text:0000000000004E4C                 movaps  [rsp+5F8h+var_528], xmm0
.text:0000000000004E54                 mov     [rsp+5F8h+var_4F8], rdx
.text:0000000000004E5C                 mov     [rsp+5F8h+var_5F0], rdi
.text:0000000000004E61                 mov     rdi, [rax+20h]
.text:0000000000004E65                 movdqu  xmm0, xmmword ptr [rax+10h]
.text:0000000000004E6A                 mov     [rsp+5F8h+var_5D0], rdi
.text:0000000000004E6F                 mov     rdi, [rax+28h]
.text:0000000000004E73                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000004E7B                 movdqu  xmm0, xmmword ptr [rax+20h]
.text:0000000000004E80                 mov     eax, [rax+30h]
.text:0000000000004E83                 mov     [rsp+5F8h+var_5D8], rdi
.text:0000000000004E88                 movaps  [rsp+5F8h+var_508], xmm0
.text:0000000000004E90                 mov     dword ptr [rsp+5F8h+var_5E0], eax
.text:0000000000004E94                 lea     eax, [rbp-4]    ; switch 88 cases
.text:0000000000004E97                 cmp     eax, 57h
.text:0000000000004E9A                 ja      def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000004EA0                 lea     rdx, jpt_4EAE
.text:0000000000004EA7                 movsxd  rax, ds:(jpt_4EAE - 10EC0h)[rdx+rax*4]
.text:0000000000004EAB                 add     rax, rdx
.text:0000000000004EAE                 jmp     rax             ; switch jump
.text:0000000000004EB0 ; ---------------------------------------------------------------------------
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000004EB0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000004EB0                 mov     dword ptr [r11+18h], 6270h ; jumptable 00000000000CF1BE case 33
.text:0000000000004EB8
.text:0000000000004EB8 loc_4EB8:                               ; CODE XREF: yyparse+12B8↓j
.text:0000000000004EB8                 mov     rax, [r13+0]
.text:0000000000004EBC                 xor     r8d, r8d
.text:0000000000004EBF                 mov     rdx, [r13+10h]
.text:0000000000004EC3                 mov     rcx, [r13+18h]
.text:0000000000004EC7                 mov     rsi, [r13+20h]
.text:0000000000004ECB                 mov     rdi, [r13+28h]
.text:0000000000004ECF                 mov     [rsp+5F8h+var_5B0], rax
.text:0000000000004ED4                 mov     rax, [r13+8]
.text:0000000000004ED8                 mov     [rsp+5F8h+var_5A8], rax
.text:0000000000004EDD                 mov     eax, [r13+30h]
.text:0000000000004EE1                 add     eax, [r11+98h]
.text:0000000000004EE8                 jo      loc_6825
.text:0000000000004EEE
.text:0000000000004EEE loc_4EEE:                               ; CODE XREF: yyparse+1ADB↓j
.text:0000000000004EEE                 mov     [r11+98h], eax
.text:0000000000004EF5                 xor     eax, eax
.text:0000000000004EF7                 add     rdi, [r11+90h]
.text:0000000000004EFE                 mov     [rsp+5F8h+var_5A0], r10
.text:0000000000004F03                 mov     dword ptr [rsp+5F8h+var_598], r9d
.text:0000000000004F08                 seto    al
.text:0000000000004F0B                 mov     [r11+90h], rdi
.text:0000000000004F12                 xor     edi, edi
.text:0000000000004F14                 add     rsi, [r11+88h]
.text:0000000000004F1B                 seto    dil
.text:0000000000004F1F                 mov     [r11+88h], rsi
.text:0000000000004F26                 xor     esi, esi
.text:0000000000004F28                 add     rcx, [r11+80h]
.text:0000000000004F2F                 seto    sil
.text:0000000000004F33                 xor     r10d, r10d
.text:0000000000004F36                 add     rdx, [r11+78h]
.text:0000000000004F3A                 mov     [r11+80h], rcx
.text:0000000000004F41                 seto    r10b
.text:0000000000004F45                 mov     [r11+78h], rdx
.text:0000000000004F49                 xor     r9d, r9d
.text:0000000000004F4C                 mov     rdx, [rsp+5F8h+var_5A8]
.text:0000000000004F51                 add     rdx, [r11+70h]
.text:0000000000004F55                 seto    r9b
.text:0000000000004F59                 mov     [r11+70h], rdx
.text:0000000000004F5D                 xor     ecx, ecx
.text:0000000000004F5F                 mov     rdx, [rsp+5F8h+var_5B0]
.text:0000000000004F64                 add     rdx, [r11+68h]
.text:0000000000004F68                 seto    cl
.text:0000000000004F6B                 or      eax, r8d
.text:0000000000004F6E                 mov     [r11+68h], rdx
.text:0000000000004F72                 or      eax, edi
.text:0000000000004F74                 mov     edi, r9d
.text:0000000000004F77                 or      eax, esi
.text:0000000000004F79                 or      eax, r10d
.text:0000000000004F7C                 or      dil, al
.text:0000000000004F7F                 jnz     loc_5328
.text:0000000000004F85                 test    rcx, rcx
.text:0000000000004F88                 jnz     loc_5328
.text:0000000000004F8E                 lea     rsi, aRelative  ; "relative"
.text:0000000000004F95                 mov     byte ptr [r11+0A1h], 1
.text:0000000000004F9D                 xor     edi, edi        ; domainname
.text:0000000000004F9F                 mov     edx, 5          ; category
.text:0000000000004FA4                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000004FA9                 call    _dcgettext
.text:0000000000004FAE                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000004FB3                 mov     r10, [rsp+5F8h+var_5A0]
.text:0000000000004FB8                 mov     r9d, dword ptr [rsp+5F8h+var_598]
.text:0000000000004FBD                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000004FC5                 jz      short def_4EAE  ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000004FC7                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000004FCC                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000004FD1                 mov     rsi, r11
.text:0000000000004FD4
.text:0000000000004FD4 loc_4FD4:                               ; CODE XREF: yyparse+14C1↓j
.text:0000000000004FD4                 mov     rdi, rax
.text:0000000000004FD7                 call    debug_print_relative_time_part_11
.text:0000000000004FDC                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000004FE1                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000004FE6                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000004FEB                 nop     dword ptr [rax+rax+00h]
.text:0000000000004FF0
.text:0000000000004FF0 def_4EAE:                               ; CODE XREF: yyparse+14A↑j
.text:0000000000004FF0                                         ; yyparse+15E↑j ...
.text:0000000000004FF0                 mov     rdi, [rsp+5F8h+var_5E8] ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000004FF5                 lea     rax, ds:0[rbx*8]
.text:0000000000004FFD                 mov     qword ptr [rsp+5F8h+var_528], r14
.text:0000000000005005                 mov     qword ptr [rsp+5F8h+var_528+8], r10
.text:000000000000500D                 mov     rcx, r12
.text:0000000000005010                 sub     rax, rbx
.text:0000000000005013                 movdqa  xmm0, [rsp+5F8h+var_528]
.text:000000000000501C                 mov     qword ptr [rsp+5F8h+var_518], rdi
.text:0000000000005024                 mov     rdi, [rsp+5F8h+var_5F0]
.text:0000000000005029                 shl     rax, 3
.text:000000000000502D                 sub     r13, rax
.text:0000000000005030                 add     rbx, rbx
.text:0000000000005033                 mov     rax, r13
.text:0000000000005036                 sub     rcx, rbx
.text:0000000000005039                 lea     r13, [r13+38h]
.text:000000000000503D                 mov     qword ptr [rsp+5F8h+var_518+8], rdi
.text:0000000000005045                 mov     rdi, [rsp+5F8h+var_5D0]
.text:000000000000504A                 movups  xmmword ptr [rax+38h], xmm0
.text:000000000000504E                 mov     qword ptr [rsp+5F8h+var_508], rdi
.text:0000000000005056                 mov     rdi, [rsp+5F8h+var_5D8]
.text:000000000000505B                 movdqa  xmm0, [rsp+5F8h+var_518]
.text:0000000000005064                 mov     qword ptr [rsp+5F8h+var_508+8], rdi
.text:000000000000506C                 mov     edi, dword ptr [rsp+5F8h+var_5E0]
.text:0000000000005070                 movups  xmmword ptr [rax+48h], xmm0
.text:0000000000005074                 mov     dword ptr [rsp+5F8h+var_4F8], edi
.text:000000000000507B                 mov     rdx, [rsp+5F8h+var_4F8]
.text:0000000000005083                 movdqa  xmm0, [rsp+5F8h+var_508]
.text:000000000000508C                 movsx   edi, word ptr [rcx]
.text:000000000000508F                 mov     [rax+68h], rdx
.text:0000000000005093                 lea     rdx, yypgoto
.text:000000000000509A                 movups  xmmword ptr [rax+58h], xmm0
.text:000000000000509E                 lea     rax, yyr1
.text:00000000000050A5                 mov     esi, edi
.text:00000000000050A7                 movzx   eax, byte ptr [rax+rbp]
.text:00000000000050AB                 sub     eax, 1Ch
.text:00000000000050AE                 cdqe
.text:00000000000050B0                 movsx   edx, byte ptr [rdx+rax]
.text:00000000000050B4                 add     edx, edi
.text:00000000000050B6                 cmp     edx, 70h ; 'p'
.text:00000000000050B9                 ja      short loc_50D3
.text:00000000000050BB                 lea     rdi, yycheck
.text:00000000000050C2                 movsxd  rdx, edx
.text:00000000000050C5                 movsx   di, byte ptr [rdi+rdx]
.text:00000000000050CA                 cmp     si, di
.text:00000000000050CD                 jz      loc_5580
.text:00000000000050D3
.text:00000000000050D3 loc_50D3:                               ; CODE XREF: yyparse+369↑j
.text:00000000000050D3                 lea     rdx, yydefgoto
.text:00000000000050DA                 movsx   rbx, byte ptr [rdx+rax]
.text:00000000000050DF
.text:00000000000050DF loc_50DF:                               ; CODE XREF: yyparse+496↓j
.text:00000000000050DF                                         ; yyparse+6C8↓j ...
.text:00000000000050DF                 lea     r12, [rcx+2]
.text:00000000000050E3                 lea     rax, [r15+26h]
.text:00000000000050E7                 mov     [rcx+2], bx
.text:00000000000050EB                 cmp     r12, rax
.text:00000000000050EE                 jnb     loc_64B9
.text:00000000000050F4                 cmp     ebx, 0Ch
.text:00000000000050F7                 jz      loc_64C3
.text:00000000000050FD                 lea     rdx, yypact
.text:0000000000005104                 movsxd  rax, ebx
.text:0000000000005107                 movzx   r14d, byte ptr [rdx+rax]
.text:000000000000510C                 jmp     loc_4DAA
.text:000000000000510C ; ---------------------------------------------------------------------------
.text:0000000000005111                 align 8
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: yyparse+AD↑j
.text:0000000000005118                 cmp     [rsp+5F8h+var_5C4], 3
.text:000000000000511D                 jnz     short loc_512F
.text:000000000000511F                 cmp     r9d, 0
.text:0000000000005123                 jle     loc_5590
.text:0000000000005129                 mov     r9d, 0FFFFFFFEh
.text:000000000000512F
.text:000000000000512F loc_512F:                               ; CODE XREF: yyparse+3CD↑j
.text:000000000000512F                                         ; yyparse:loc_5590↓j
.text:000000000000512F                 lea     rdx, yypact
.text:0000000000005136                 lea     rcx, yycheck
.text:000000000000513D                 lea     rsi, yytable
.text:0000000000005144                 jmp     short loc_5166
.text:0000000000005144 ; ---------------------------------------------------------------------------
.text:0000000000005146                 align 10h
.text:0000000000005150
.text:0000000000005150 loc_5150:                               ; CODE XREF: yyparse+41D↓j
.text:0000000000005150                                         ; yyparse+425↓j ...
.text:0000000000005150                 cmp     r12, r15
.text:0000000000005153                 jz      loc_5328
.text:0000000000005159                 sub     r12, 2
.text:000000000000515D                 movsx   rbx, word ptr [r12]
.text:0000000000005162                 sub     r13, 38h ; '8'
.text:0000000000005166
.text:0000000000005166 loc_5166:                               ; CODE XREF: yyparse+3F4↑j
.text:0000000000005166                 movsx   eax, byte ptr [rdx+rbx]
.text:000000000000516A                 cmp     eax, 0FFFFFFA3h
.text:000000000000516D                 jz      short loc_5150
.text:000000000000516F                 add     eax, 1
.text:0000000000005172                 cmp     eax, 70h ; 'p'
.text:0000000000005175                 ja      short loc_5150
.text:0000000000005177                 cdqe
.text:0000000000005179                 cmp     byte ptr [rcx+rax], 1
.text:000000000000517D                 jnz     short loc_5150
.text:000000000000517F                 movzx   ebx, byte ptr [rsi+rax]
.text:0000000000005183                 test    ebx, ebx
.text:0000000000005185                 jz      short loc_5150
.text:0000000000005187                 mov     rax, [rsp+5F8h+var_5C0]
.text:000000000000518C                 add     r13, 38h ; '8'
.text:0000000000005190                 mov     rcx, r12
.text:0000000000005193                 mov     [rsp+5F8h+var_5C4], 3
.text:000000000000519B                 mov     qword ptr [rsp+5F8h+var_568+8], rax
.text:00000000000051A3                 mov     rax, [rsp+5F8h+var_5B8]
.text:00000000000051A8                 movdqa  xmm0, [rsp+5F8h+var_568]
.text:00000000000051B1                 mov     qword ptr [rsp+5F8h+var_558], rax
.text:00000000000051B9                 mov     rax, [rsp+5F8h+var_538]
.text:00000000000051C1                 movups  xmmword ptr [r13+0], xmm0
.text:00000000000051C6                 movdqa  xmm0, [rsp+5F8h+var_558]
.text:00000000000051CF                 mov     [r13+30h], rax
.text:00000000000051D3                 movups  xmmword ptr [r13+10h], xmm0
.text:00000000000051D8                 movdqa  xmm0, [rsp+5F8h+var_548]
.text:00000000000051E1                 movups  xmmword ptr [r13+20h], xmm0
.text:00000000000051E6                 jmp     loc_50DF
.text:00000000000051EB ; ---------------------------------------------------------------------------
.text:00000000000051EB
.text:00000000000051EB loc_51EB:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000051EB                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000051EB                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 51
.text:00000000000051EF                 mov     rsi, [r13-18h]
.text:00000000000051F3                 mov     rdi, [r13-10h]
.text:00000000000051F7                 mov     r8d, [r13-8]
.text:00000000000051FB                 mov     ecx, [r11+98h]
.text:0000000000005202                 mov     rdx, [r11+90h]
.text:0000000000005209                 mov     [rsp+5F8h+var_5B0], rax
.text:000000000000520E                 mov     rax, [r13-30h]
.text:0000000000005212                 mov     [rsp+5F8h+var_5A8], rax
.text:0000000000005217                 mov     rax, [r13-28h]
.text:000000000000521B                 mov     [rsp+5F8h+var_5A0], rax
.text:0000000000005220                 mov     rax, [r13-20h]
.text:0000000000005224                 mov     [rsp+5F8h+var_598], rax
.text:0000000000005229                 mov     rax, [r11+88h]
.text:0000000000005230                 mov     [rsp+5F8h+var_588], rax
.text:0000000000005235                 mov     rax, [r11+80h]
.text:000000000000523C                 mov     [rsp+5F8h+var_578], rax
.text:0000000000005244                 mov     rax, [r11+78h]
.text:0000000000005248                 mov     [rsp+5F8h+var_570], rax
.text:0000000000005250                 mov     rax, [r11+70h]
.text:0000000000005254                 mov     [rsp+5F8h+var_590], rax
.text:0000000000005259                 mov     rax, [r11+68h]
.text:000000000000525D                 mov     [rsp+5F8h+var_580], rax
.text:0000000000005262                 mov     eax, [r13+0]
.text:0000000000005266                 test    eax, eax
.text:0000000000005268                 js      loc_6562
.text:000000000000526E                 mov     rax, [rsp+5F8h+var_588]
.text:0000000000005273                 add     ecx, r8d
.text:0000000000005276                 seto    r8b
.text:000000000000527A                 mov     [r11+98h], ecx
.text:0000000000005281                 xor     ecx, ecx
.text:0000000000005283                 add     rdx, rdi
.text:0000000000005286                 movzx   r8d, r8b
.text:000000000000528A                 seto    cl
.text:000000000000528D                 xor     edi, edi
.text:000000000000528F                 add     rax, rsi
.text:0000000000005292                 seto    dil
.text:0000000000005296                 mov     [r11+88h], rax
.text:000000000000529D                 xor     esi, esi
.text:000000000000529F                 mov     rax, [rsp+5F8h+var_578]
.text:00000000000052A7                 add     rax, [rsp+5F8h+var_598]
.text:00000000000052AC                 mov     [rsp+5F8h+var_588], rdi
.text:00000000000052B1                 mov     [r11+90h], rdx
.text:00000000000052B8                 seto    sil
.text:00000000000052BC                 mov     [r11+80h], rax
.text:00000000000052C3                 xor     edi, edi
.text:00000000000052C5                 mov     rax, [rsp+5F8h+var_570]
.text:00000000000052CD                 add     rax, [rsp+5F8h+var_5A0]
.text:00000000000052D2                 seto    dil
.text:00000000000052D6                 mov     [r11+78h], rax
.text:00000000000052DA                 xor     edx, edx
.text:00000000000052DC                 mov     rax, [rsp+5F8h+var_590]
.text:00000000000052E1                 add     rax, [rsp+5F8h+var_5A8]
.text:00000000000052E6                 seto    dl
.text:00000000000052E9                 mov     [r11+70h], rax
.text:00000000000052ED                 mov     rax, [rsp+5F8h+var_580]
.text:00000000000052F2                 add     rax, [rsp+5F8h+var_5B0]
.text:00000000000052F7                 mov     [rsp+5F8h+var_5A8], rdx
.text:00000000000052FC
.text:00000000000052FC loc_52FC:                               ; CODE XREF: yyparse+18A0↓j
.text:00000000000052FC                 mov     [r11+68h], rax
.text:0000000000005300                 mov     eax, ecx
.text:0000000000005302                 seto    dl
.text:0000000000005305                 or      eax, r8d
.text:0000000000005308                 or      al, byte ptr [rsp+5F8h+var_588]
.text:000000000000530C                 movzx   edx, dl
.text:000000000000530F                 or      eax, esi
.text:0000000000005311                 or      eax, edi
.text:0000000000005313                 or      al, byte ptr [rsp+5F8h+var_5A8]
.text:0000000000005317                 or      eax, edx
.text:0000000000005319                 test    al, al
.text:000000000000531B                 jz      loc_584E
.text:0000000000005321                 nop     dword ptr [rax+00000000h]
.text:0000000000005328
.text:0000000000005328 loc_5328:                               ; CODE XREF: yyparse+22F↑j
.text:0000000000005328                                         ; yyparse+238↑j ...
.text:0000000000005328                 mov     eax, 1
.text:000000000000532D
.text:000000000000532D loc_532D:                               ; CODE XREF: yyparse+176E↓j
.text:000000000000532D                                         ; yyparse+1775↓j
.text:000000000000532D                 mov     rdi, [rsp+5F8h+var_40]
.text:0000000000005335                 xor     rdi, fs:28h
.text:000000000000533E                 jnz     loc_6830
.text:0000000000005344                 add     rsp, 5C8h
.text:000000000000534B                 pop     rbx
.text:000000000000534C                 pop     rbp
.text:000000000000534D                 pop     r12
.text:000000000000534F                 pop     r13
.text:0000000000005351                 pop     r14
.text:0000000000005353                 pop     r15
.text:0000000000005355                 retn
.text:0000000000005356 ; ---------------------------------------------------------------------------
.text:0000000000005356
.text:0000000000005356 loc_5356:                               ; CODE XREF: yyparse+7E5↓j
.text:0000000000005356                 lea     rax, [rdi+1]
.text:000000000000535A                 mov     [r11], rax
.text:000000000000535D                 movzx   r9d, byte ptr [rdi]
.text:0000000000005361                 test    r9d, r9d
.text:0000000000005364                 jg      loc_5420
.text:000000000000536A                 nop     word ptr [rax+rax+00h]
.text:0000000000005370
.text:0000000000005370 loc_5370:                               ; CODE XREF: yyparse+71↑j
.text:0000000000005370                                         ; yyparse+81C↓j
.text:0000000000005370                 xor     eax, eax
.text:0000000000005372                 xor     r9d, r9d
.text:0000000000005375
.text:0000000000005375 loc_5375:                               ; CODE XREF: yyparse+6E1↓j
.text:0000000000005375                 cmp     r8d, 70h ; 'p'
.text:0000000000005379                 ja      loc_4DF0
.text:000000000000537F
.text:000000000000537F loc_537F:                               ; CODE XREF: yyparse+91↑j
.text:000000000000537F                 lea     rdx, yycheck
.text:0000000000005386                 movsxd  r8, r8d
.text:0000000000005389                 movsx   edx, byte ptr [rdx+r8]
.text:000000000000538E                 cmp     edx, eax
.text:0000000000005390                 jnz     loc_4DF0
.text:0000000000005396                 lea     rax, yytable
.text:000000000000539D                 movzx   ebp, byte ptr [rax+r8]
.text:00000000000053A2                 test    ebp, ebp
.text:00000000000053A4                 jz      loc_5690
.text:00000000000053AA                 mov     eax, [rsp+5F8h+var_5C4]
.text:00000000000053AE                 mov     rcx, r12
.text:00000000000053B1                 movsxd  rbx, ebp
.text:00000000000053B4                 mov     r9d, 0FFFFFFFEh
.text:00000000000053BA                 cmp     eax, 1
.text:00000000000053BD                 adc     eax, 0FFFFFFFFh
.text:00000000000053C0                 add     r13, 38h ; '8'
.text:00000000000053C4                 mov     [rsp+5F8h+var_5C4], eax
.text:00000000000053C8                 mov     rax, [rsp+5F8h+var_5C0]
.text:00000000000053CD                 mov     qword ptr [rsp+5F8h+var_568+8], rax
.text:00000000000053D5                 mov     rax, [rsp+5F8h+var_5B8]
.text:00000000000053DA                 movdqa  xmm0, [rsp+5F8h+var_568]
.text:00000000000053E3                 mov     qword ptr [rsp+5F8h+var_558], rax
.text:00000000000053EB                 mov     rax, [rsp+5F8h+var_538]
.text:00000000000053F3                 movups  xmmword ptr [r13+0], xmm0
.text:00000000000053F8                 movdqa  xmm0, [rsp+5F8h+var_558]
.text:0000000000005401                 mov     [r13+30h], rax
.text:0000000000005405                 movups  xmmword ptr [r13+10h], xmm0
.text:000000000000540A                 movdqa  xmm0, [rsp+5F8h+var_548]
.text:0000000000005413                 movups  xmmword ptr [r13+20h], xmm0
.text:0000000000005418                 jmp     loc_50DF
.text:0000000000005418 ; ---------------------------------------------------------------------------
.text:000000000000541D                 align 20h
.text:0000000000005420
.text:0000000000005420 loc_5420:                               ; CODE XREF: yyparse+7E↑j
.text:0000000000005420                                         ; yyparse+614↑j
.text:0000000000005420                 lea     rdx, yytranslate
.text:0000000000005427                 movsxd  rax, r9d
.text:000000000000542A                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000542E
.text:000000000000542E loc_542E:                               ; CODE XREF: yyparse+1642↓j
.text:000000000000542E                                         ; yyparse+1704↓j ...
.text:000000000000542E                 add     r8d, eax
.text:0000000000005431                 jmp     loc_5375
.text:0000000000005431 ; ---------------------------------------------------------------------------
.text:0000000000005436                 align 20h
.text:0000000000005440
.text:0000000000005440 loc_5440:                               ; CODE XREF: yyparse+68↑j
.text:0000000000005440                 mov     rdi, [r11]
.text:0000000000005443                 mov     edx, 1
.text:0000000000005448                 mov     r10, 3FFFFFF03FFFFFFh
.text:0000000000005452                 movzx   ecx, byte ptr [rdi]
.text:0000000000005455
.text:0000000000005455 loc_5455:                               ; CODE XREF: yyparse+7BC↓j
.text:0000000000005455                                         ; yyparse+95C↓j ...
.text:0000000000005455                 cmp     cl, 20h ; ' '
.text:0000000000005458                 mov     esi, ecx
.text:000000000000545A                 movzx   r9d, cl
.text:000000000000545E                 ja      short loc_54AF
.text:0000000000005460                 mov     rax, rdx
.text:0000000000005463                 shl     rax, cl
.text:0000000000005466                 mov     rcx, 100003E00h
.text:0000000000005470                 test    rax, rcx
.text:0000000000005473                 jz      loc_551A
.text:0000000000005479                 lea     rax, [rdi+1]
.text:000000000000547D                 jmp     short loc_5499
.text:000000000000547D ; ---------------------------------------------------------------------------
.text:000000000000547F                 align 20h
.text:0000000000005480
.text:0000000000005480 loc_5480:                               ; CODE XREF: yyparse+75D↓j
.text:0000000000005480                 mov     rsi, rdx
.text:0000000000005483                 mov     r14, 100003E00h
.text:000000000000548D                 add     rax, 1
.text:0000000000005491                 shl     rsi, cl
.text:0000000000005494                 test    rsi, r14
.text:0000000000005497                 jz      short loc_5518
.text:0000000000005499
.text:0000000000005499 loc_5499:                               ; CODE XREF: yyparse+72D↑j
.text:0000000000005499                 mov     [r11], rax
.text:000000000000549C                 movzx   r9d, byte ptr [rax]
.text:00000000000054A0                 mov     rdi, rax
.text:00000000000054A3                 cmp     r9b, 20h ; ' '
.text:00000000000054A7                 mov     ecx, r9d
.text:00000000000054AA                 mov     esi, r9d
.text:00000000000054AD                 jbe     short loc_5480
.text:00000000000054AF
.text:00000000000054AF loc_54AF:                               ; CODE XREF: yyparse+70E↑j
.text:00000000000054AF                 lea     eax, [rsi-2Bh]
.text:00000000000054B2                 sub     ecx, 30h ; '0'
.text:00000000000054B5                 and     eax, 0FFFFFFFDh
.text:00000000000054B8                 cmp     cl, 9
.text:00000000000054BB                 ja      short loc_5520
.text:00000000000054BD                 cmp     sil, 2Dh ; '-'
.text:00000000000054C1                 setz    cl
.text:00000000000054C4                 test    al, al
.text:00000000000054C6                 jnz     loc_64CA
.text:00000000000054CC
.text:00000000000054CC loc_54CC:                               ; CODE XREF: yyparse+953↓j
.text:00000000000054CC                 cmp     cl, 1
.text:00000000000054CF                 mov     rax, [r11]
.text:00000000000054D2                 sbb     r9d, r9d
.text:00000000000054D5                 and     r9d, 2
.text:00000000000054D9                 sub     r9d, 1
.text:00000000000054DD                 add     rax, 1
.text:00000000000054E1
.text:00000000000054E1 loc_54E1:                               ; CODE XREF: yyparse+7C2↓j
.text:00000000000054E1                 mov     [r11], rax
.text:00000000000054E4                 movzx   ecx, byte ptr [rax]
.text:00000000000054E7                 mov     rdi, rax
.text:00000000000054EA                 cmp     cl, 20h ; ' '
.text:00000000000054ED                 mov     esi, ecx
.text:00000000000054EF                 ja      loc_632C
.text:00000000000054F5                 mov     rsi, rdx
.text:00000000000054F8                 mov     r14, 100003E00h
.text:0000000000005502                 add     rax, 1
.text:0000000000005506                 shl     rsi, cl
.text:0000000000005509                 test    rsi, r14
.text:000000000000550C                 jz      loc_5455
.text:0000000000005512                 jmp     short loc_54E1
.text:0000000000005512 ; ---------------------------------------------------------------------------
.text:0000000000005514                 align 8
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: yyparse+747↑j
.text:0000000000005518                 mov     esi, ecx
.text:000000000000551A
.text:000000000000551A loc_551A:                               ; CODE XREF: yyparse+723↑j
.text:000000000000551A                 lea     eax, [rsi-2Bh]
.text:000000000000551D                 and     eax, 0FFFFFFFDh
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: yyparse+76B↑j
.text:0000000000005520                 test    al, al
.text:0000000000005522                 jz      loc_569C
.text:0000000000005528                 lea     ecx, [r9-41h]
.text:000000000000552C                 cmp     ecx, 39h ; '9'
.text:000000000000552F                 jbe     short loc_55A0
.text:0000000000005531
.text:0000000000005531 loc_5531:                               ; CODE XREF: yyparse+859↓j
.text:0000000000005531                 cmp     sil, 28h ; '('
.text:0000000000005535                 jnz     loc_5356
.text:000000000000553B                 mov     rsi, [r11]
.text:000000000000553E                 xor     ecx, ecx
.text:0000000000005540                 jmp     short loc_555F
.text:0000000000005540 ; ---------------------------------------------------------------------------
.text:0000000000005542                 align 8
.text:0000000000005548
.text:0000000000005548 loc_5548:                               ; CODE XREF: yyparse+824↓j
.text:0000000000005548                 cmp     al, 29h ; ')'
.text:000000000000554A                 setz    al
.text:000000000000554D                 movzx   eax, al
.text:0000000000005550                 sub     rcx, rax
.text:0000000000005553
.text:0000000000005553 loc_5553:                               ; CODE XREF: yyparse+82A↓j
.text:0000000000005553                 test    rcx, rcx
.text:0000000000005556                 jz      loc_56A8
.text:000000000000555C                 mov     rsi, rdi
.text:000000000000555F
.text:000000000000555F loc_555F:                               ; CODE XREF: yyparse+7F0↑j
.text:000000000000555F                 lea     rdi, [rsi+1]
.text:0000000000005563                 mov     [r11], rdi
.text:0000000000005566                 movzx   eax, byte ptr [rdi-1]
.text:000000000000556A                 test    al, al
.text:000000000000556C                 jz      loc_5370
.text:0000000000005572                 cmp     al, 28h ; '('
.text:0000000000005574                 jnz     short loc_5548
.text:0000000000005576                 add     rcx, 1
.text:000000000000557A                 jmp     short loc_5553
.text:000000000000557A ; ---------------------------------------------------------------------------
.text:000000000000557C                 align 20h
.text:0000000000005580
.text:0000000000005580 loc_5580:                               ; CODE XREF: yyparse+37D↑j
.text:0000000000005580                 lea     rax, yytable
.text:0000000000005587                 movzx   ebx, byte ptr [rax+rdx]
.text:000000000000558B                 jmp     loc_50DF
.text:0000000000005590 ; ---------------------------------------------------------------------------
.text:0000000000005590
.text:0000000000005590 loc_5590:                               ; CODE XREF: yyparse+3D3↑j
.text:0000000000005590                 jnz     loc_512F
.text:0000000000005596                 jmp     loc_5328
.text:0000000000005596 ; ---------------------------------------------------------------------------
.text:000000000000559B                 align 20h
.text:00000000000055A0
.text:00000000000055A0 loc_55A0:                               ; CODE XREF: yyparse+7DF↑j
.text:00000000000055A0                 mov     rax, rdx
.text:00000000000055A3                 shl     rax, cl
.text:00000000000055A6                 test    rax, r10
.text:00000000000055A9                 jz      short loc_5531
.text:00000000000055AB                 mov     rax, [r11]
.text:00000000000055AE                 lea     r14, [rsp+5F8h+s1]
.text:00000000000055B6                 mov     r10d, 1
.text:00000000000055BC                 mov     r9, 3FFFFFF03FFFFFFh
.text:00000000000055C6                 mov     rdx, r14
.text:00000000000055C9                 lea     rdi, [r14+13h]
.text:00000000000055CD                 add     rax, 1
.text:00000000000055D1                 jmp     short loc_55D7
.text:00000000000055D3 ; ---------------------------------------------------------------------------
.text:00000000000055D3
.text:00000000000055D3 loc_55D3:                               ; CODE XREF: yyparse+8AC↓j
.text:00000000000055D3                                         ; yyparse+8B2↓j
.text:00000000000055D3                 add     rax, 1
.text:00000000000055D7
.text:00000000000055D7 loc_55D7:                               ; CODE XREF: yyparse+881↑j
.text:00000000000055D7                 cmp     rdx, rdi
.text:00000000000055DA                 jnb     short loc_55E3
.text:00000000000055DC                 mov     [rdx], sil
.text:00000000000055DF                 add     rdx, 1
.text:00000000000055E3
.text:00000000000055E3 loc_55E3:                               ; CODE XREF: yyparse+88A↑j
.text:00000000000055E3                 mov     [r11], rax
.text:00000000000055E6                 movzx   ecx, byte ptr [rax]
.text:00000000000055E9                 mov     esi, ecx
.text:00000000000055EB                 sub     ecx, 41h ; 'A'
.text:00000000000055EE                 cmp     ecx, 39h ; '9'
.text:00000000000055F1                 ja      short loc_55FE
.text:00000000000055F3                 mov     rbp, r10
.text:00000000000055F6                 shl     rbp, cl
.text:00000000000055F9                 test    rbp, r9
.text:00000000000055FC                 jnz     short loc_55D3
.text:00000000000055FE
.text:00000000000055FE loc_55FE:                               ; CODE XREF: yyparse+8A1↑j
.text:00000000000055FE                 cmp     sil, 2Eh ; '.'
.text:0000000000005602                 jz      short loc_55D3
.text:0000000000005604                 mov     byte ptr [rdx], 0
.text:0000000000005607                 movzx   eax, [rsp+5F8h+s1]
.text:000000000000560F                 test    al, al
.text:0000000000005611                 jz      short loc_5632
.text:0000000000005613                 mov     rdx, r14
.text:0000000000005616
.text:0000000000005616 loc_5616:                               ; CODE XREF: yyparse+8E0↓j
.text:0000000000005616                 movzx   ecx, al
.text:0000000000005619                 sub     eax, 61h ; 'a'
.text:000000000000561C                 lea     esi, [rcx-20h]
.text:000000000000561F                 cmp     al, 1Ah
.text:0000000000005621                 cmovb   ecx, esi
.text:0000000000005624                 add     rdx, 1
.text:0000000000005628                 mov     [rdx-1], cl
.text:000000000000562B                 movzx   eax, byte ptr [rdx]
.text:000000000000562E                 test    al, al
.text:0000000000005630                 jnz     short loc_5616
.text:0000000000005632
.text:0000000000005632 loc_5632:                               ; CODE XREF: yyparse+8C1↑j
.text:0000000000005632                 lea     rcx, meridian_table
.text:0000000000005639                 lea     rsi, aAm        ; "AM"
.text:0000000000005640                 mov     rbp, rcx
.text:0000000000005643                 jmp     short loc_5656
.text:0000000000005645 ; ---------------------------------------------------------------------------
.text:0000000000005645
.text:0000000000005645 loc_5645:                               ; CODE XREF: yyparse+924↓j
.text:0000000000005645                 add     rbp, 10h
.text:0000000000005649                 mov     rsi, [rbp+0]    ; s2
.text:000000000000564D                 test    rsi, rsi
.text:0000000000005650                 jz      loc_65F5
.text:0000000000005656
.text:0000000000005656 loc_5656:                               ; CODE XREF: yyparse+8F3↑j
.text:0000000000005656                 mov     rdi, r14        ; s1
.text:0000000000005659                 mov     [rsp+5F8h+var_5E8], r11
.text:000000000000565E                 mov     dword ptr [rsp+5F8h+var_5F0], r8d
.text:0000000000005663                 call    _strcmp
.text:0000000000005668                 test    eax, eax
.text:000000000000566A                 mov     r8d, dword ptr [rsp+5F8h+var_5F0]
.text:000000000000566F                 mov     r11, [rsp+5F8h+var_5E8]
.text:0000000000005674                 jnz     short loc_5645
.text:0000000000005676                 mov     rcx, rbp
.text:0000000000005679
.text:0000000000005679 loc_5679:                               ; CODE XREF: yyparse+198D↓j
.text:0000000000005679                                         ; yyparse+19F4↓j ...
.text:0000000000005679                 movsxd  rax, dword ptr [rcx+0Ch]
.text:000000000000567D                 mov     r9d, [rcx+8]
.text:0000000000005681                 mov     qword ptr [rsp+5F8h+var_568], rax
.text:0000000000005689                 jmp     loc_4DBE
.text:0000000000005689 ; ---------------------------------------------------------------------------
.text:000000000000568E                 align 10h
.text:0000000000005690
.text:0000000000005690 loc_5690:                               ; CODE XREF: yyparse+654↑j
.text:0000000000005690                 mov     eax, 38h ; '8'
.text:0000000000005695                 xor     ebx, ebx
.text:0000000000005697                 jmp     loc_4E2D
.text:000000000000569C ; ---------------------------------------------------------------------------
.text:000000000000569C
.text:000000000000569C loc_569C:                               ; CODE XREF: yyparse+7D2↑j
.text:000000000000569C                 cmp     sil, 2Dh ; '-'
.text:00000000000056A0                 setz    cl
.text:00000000000056A3                 jmp     loc_54CC
.text:00000000000056A8 ; ---------------------------------------------------------------------------
.text:00000000000056A8
.text:00000000000056A8 loc_56A8:                               ; CODE XREF: yyparse+806↑j
.text:00000000000056A8                 movzx   ecx, byte ptr [rsi+1]
.text:00000000000056AC                 jmp     loc_5455
.text:00000000000056B1 ; ---------------------------------------------------------------------------
.text:00000000000056B1
.text:00000000000056B1 loc_56B1:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000056B1                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000056B1                 mov     r10, [r13-30h]  ; jumptable 00000000000CF1BE cases 58,76
.text:00000000000056B5                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000056C0
.text:00000000000056C0 loc_56C0:                               ; CODE XREF: yyparse+1000↓j
.text:00000000000056C0                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:00000000000056C8                 mov     [rsp+5F8h+var_5D8], 0
.text:00000000000056D1                 xor     r14d, r14d
.text:00000000000056D4                 mov     [rsp+5F8h+var_5D0], 0
.text:00000000000056DD                 mov     [rsp+5F8h+var_5F0], 0
.text:00000000000056E6                 mov     [rsp+5F8h+var_5E8], 0
.text:00000000000056EF                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000056F4 ; ---------------------------------------------------------------------------
.text:00000000000056F4
.text:00000000000056F4 loc_56F4:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000056F4                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000056F4                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 67,79
.text:00000000000056F8                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:0000000000005703
.text:0000000000005703 loc_5703:                               ; CODE XREF: yyparse+EBE↓j
.text:0000000000005703                 mov     [rsp+5F8h+var_5D0], rax
.text:0000000000005708                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005710                 xor     r10d, r10d
.text:0000000000005713                 mov     [rsp+5F8h+var_5D8], 0
.text:000000000000571C                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000005725                 xor     r14d, r14d
.text:0000000000005728                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005731                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005736 ; ---------------------------------------------------------------------------
.text:0000000000005736
.text:0000000000005736 loc_5736:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005736                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005736                 mov     r14, [r13-30h]  ; jumptable 00000000000CF1BE cases 55,75
.text:000000000000573A                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:0000000000005745
.text:0000000000005745 loc_5745:                               ; CODE XREF: yyparse+11AF↓j
.text:0000000000005745                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:000000000000574D                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005756                 xor     r10d, r10d
.text:0000000000005759                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000005762                 mov     [rsp+5F8h+var_5F0], 0
.text:000000000000576B                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005774                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005779 ; ---------------------------------------------------------------------------
.text:0000000000005779
.text:0000000000005779 loc_5779:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005779                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005779                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE cases 52,53
.text:000000000000577D                 xor     r8d, r8d
.text:0000000000005780                 mov     rdx, [r13+10h]
.text:0000000000005784                 mov     rcx, [r13+18h]
.text:0000000000005788                 mov     rsi, [r13+20h]
.text:000000000000578C                 mov     rdi, [r13+28h]
.text:0000000000005790                 mov     [rsp+5F8h+var_5B0], rax
.text:0000000000005795                 mov     rax, [r13+8]
.text:0000000000005799                 mov     [rsp+5F8h+var_5A8], rax
.text:000000000000579E                 mov     eax, [r13+30h]
.text:00000000000057A2                 add     eax, [r11+98h]
.text:00000000000057A9                 jo      loc_5CE4
.text:00000000000057AF
.text:00000000000057AF loc_57AF:                               ; CODE XREF: yyparse+F8E↓j
.text:00000000000057AF                                         ; yyparse+F9A↓j
.text:00000000000057AF                 mov     [r11+98h], eax
.text:00000000000057B6                 xor     eax, eax
.text:00000000000057B8                 add     rdi, [r11+90h]
.text:00000000000057BF                 seto    al
.text:00000000000057C2                 mov     [r11+90h], rdi
.text:00000000000057C9                 xor     edi, edi
.text:00000000000057CB                 add     rsi, [r11+88h]
.text:00000000000057D2                 seto    dil
.text:00000000000057D6                 mov     [r11+88h], rsi
.text:00000000000057DD                 xor     esi, esi
.text:00000000000057DF                 add     rcx, [r11+80h]
.text:00000000000057E6                 seto    sil
.text:00000000000057EA                 mov     [r11+80h], rcx
.text:00000000000057F1                 xor     ecx, ecx
.text:00000000000057F3                 add     rdx, [r11+78h]
.text:00000000000057F7                 seto    cl
.text:00000000000057FA                 mov     [r11+78h], rdx
.text:00000000000057FE                 mov     rdx, [rsp+5F8h+var_5A8]
.text:0000000000005803                 mov     [rsp+5F8h+var_5A0], rcx
.text:0000000000005808                 xor     ecx, ecx
.text:000000000000580A                 add     rdx, [r11+70h]
.text:000000000000580E                 seto    cl
.text:0000000000005811                 mov     [r11+70h], rdx
.text:0000000000005815                 mov     rdx, [rsp+5F8h+var_5B0]
.text:000000000000581A                 mov     [rsp+5F8h+var_5A8], rcx
.text:000000000000581F                 xor     ecx, ecx
.text:0000000000005821                 add     rdx, [r11+68h]
.text:0000000000005825                 seto    cl
.text:0000000000005828                 or      eax, r8d
.text:000000000000582B                 mov     [r11+68h], rdx
.text:000000000000582F                 or      eax, edi
.text:0000000000005831                 movzx   edi, byte ptr [rsp+5F8h+var_5A8]
.text:0000000000005836                 or      eax, esi
.text:0000000000005838                 or      al, byte ptr [rsp+5F8h+var_5A0]
.text:000000000000583C                 or      dil, al
.text:000000000000583F                 jnz     loc_5328
.text:0000000000005845                 test    rcx, rcx
.text:0000000000005848                 jnz     loc_5328
.text:000000000000584E
.text:000000000000584E loc_584E:                               ; CODE XREF: yyparse+5CB↑j
.text:000000000000584E                 mov     byte ptr [r11+0A1h], 1
.text:0000000000005856                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000585B ; ---------------------------------------------------------------------------
.text:000000000000585B
.text:000000000000585B loc_585B:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000585B                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000585B                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 64,78
.text:000000000000585F                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:000000000000586A
.text:000000000000586A loc_586A:                               ; CODE XREF: yyparse+F1F↓j
.text:000000000000586A                 mov     [rsp+5F8h+var_5F0], rax
.text:000000000000586F                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005877                 xor     r10d, r10d
.text:000000000000587A                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005883                 mov     [rsp+5F8h+var_5D0], 0
.text:000000000000588C                 xor     r14d, r14d
.text:000000000000588F                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005898                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000589D ; ---------------------------------------------------------------------------
.text:000000000000589D
.text:000000000000589D loc_589D:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000589D                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000589D                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE cases 71,72
.text:00000000000058A1                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000058AC                 mov     [rsp+5F8h+var_5D8], rax
.text:00000000000058B1                 mov     eax, [r13-30h]
.text:00000000000058B5                 mov     dword ptr [rsp+5F8h+var_5E0], eax
.text:00000000000058B9
.text:00000000000058B9 loc_58B9:                               ; CODE XREF: yyparse+BAB↓j
.text:00000000000058B9                                         ; yyparse+D04↓j
.text:00000000000058B9                 mov     [rsp+5F8h+var_5D0], 0
.text:00000000000058C2                 mov     [rsp+5F8h+var_5F0], 0
.text:00000000000058CB                 xor     r10d, r10d
.text:00000000000058CE                 mov     [rsp+5F8h+var_5E8], 0
.text:00000000000058D7                 xor     r14d, r14d
.text:00000000000058DA                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000058DF ; ---------------------------------------------------------------------------
.text:00000000000058DF
.text:00000000000058DF loc_58DF:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000058DF                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000058DF                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE cases 70,80
.text:00000000000058E3                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:00000000000058EE
.text:00000000000058EE loc_58EE:                               ; CODE XREF: yyparse+E68↓j
.text:00000000000058EE                 mov     [rsp+5F8h+var_5D8], rax
.text:00000000000058F3                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:00000000000058FB                 jmp     short loc_58B9
.text:00000000000058FD ; ---------------------------------------------------------------------------
.text:00000000000058FD
.text:00000000000058FD loc_58FD:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000058FD                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000058FD                 mov     r14, [r13+8]    ; jumptable 00000000000CF1BE cases 85,87
.text:0000000000005901                 xor     r10d, r10d
.text:0000000000005904                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005909 ; ---------------------------------------------------------------------------
.text:0000000000005909
.text:0000000000005909 loc_5909:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005909                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005909                 xor     edx, edx        ; jumptable 00000000000CF1BE cases 61,77
.text:000000000000590B                 mov     rax, [r13-30h]
.text:000000000000590F                 mov     [rsp+5F8h+var_4F8], 0
.text:000000000000591B                 imul    rax, [r13+0]
.text:0000000000005920                 pxor    xmm0, xmm0
.text:0000000000005924                 movaps  [rsp+5F8h+var_528], xmm0
.text:000000000000592C                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000005934                 movaps  [rsp+5F8h+var_508], xmm0
.text:000000000000593C                 jo      loc_5C4C
.text:0000000000005942
.text:0000000000005942 loc_5942:                               ; CODE XREF: yyparse+EF6↓j
.text:0000000000005942                                         ; yyparse+F01↓j
.text:0000000000005942                 test    rdx, rdx
.text:0000000000005945                 mov     [rsp+5F8h+var_5E8], rax
.text:000000000000594A                 jnz     loc_5328
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: yyparse+C42↓j
.text:0000000000005950                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005958                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005961                 xor     r10d, r10d
.text:0000000000005964                 mov     [rsp+5F8h+var_5D0], 0
.text:000000000000596D                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000005976                 xor     r14d, r14d
.text:0000000000005979                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000597E ; ---------------------------------------------------------------------------
.text:000000000000597E
.text:000000000000597E loc_597E:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000597E                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000597E                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE cases 62,81
.text:0000000000005982                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0
.text:000000000000598D                 mov     [rsp+5F8h+var_5E8], rax
.text:0000000000005992                 jmp     short loc_5950
.text:0000000000005994 ; ---------------------------------------------------------------------------
.text:0000000000005994
.text:0000000000005994 loc_5994:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005994                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005994                 mov     rcx, [r13-0D0h] ; jumptable 00000000000CF1BE case 42
.text:000000000000599B                 movzx   eax, byte ptr [r11+0D9h]
.text:00000000000059A3                 cmp     rcx, 3
.text:00000000000059A7                 jle     loc_6508
.text:00000000000059AD                 test    al, al
.text:00000000000059AF                 jz      short loc_5A0A
.text:00000000000059B1                 mov     rax, [r13-0D8h]
.text:00000000000059B8                 lea     rsi, aWarningValueLd ; "warning: value %ld has %ld digits. Assu"...
.text:00000000000059BF                 mov     edx, 5          ; category
.text:00000000000059C4                 xor     edi, edi        ; domainname
.text:00000000000059C6                 mov     [rsp+5F8h+var_590], r11
.text:00000000000059CB                 mov     dword ptr [rsp+5F8h+var_598], r9d
.text:00000000000059D0                 mov     [rsp+5F8h+var_5A0], r10
.text:00000000000059D5                 mov     [rsp+5F8h+var_5A8], rcx
.text:00000000000059DA                 mov     [rsp+5F8h+var_5B0], rax
.text:00000000000059DF                 call    _dcgettext
.text:00000000000059E4                 mov     rcx, [rsp+5F8h+var_5A8]
.text:00000000000059E9                 mov     rsi, [rsp+5F8h+var_5B0]
.text:00000000000059EE                 mov     rdi, rax
.text:00000000000059F1                 xor     eax, eax
.text:00000000000059F3                 mov     rdx, rcx
.text:00000000000059F6                 call    dbg_printf
.text:00000000000059FB                 mov     r11, [rsp+5F8h+var_590]
.text:0000000000005A00                 mov     r9d, dword ptr [rsp+5F8h+var_598]
.text:0000000000005A05                 mov     r10, [rsp+5F8h+var_5A0]
.text:0000000000005A0A
.text:0000000000005A0A loc_5A0A:                               ; CODE XREF: yyparse+C5F↑j
.text:0000000000005A0A                 movdqu  xmm0, xmmword ptr [r13-0E0h]
.text:0000000000005A13                 mov     rax, [r13-0D0h]
.text:0000000000005A1A                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000005A1F                 mov     [r11+30h], rax
.text:0000000000005A23
.text:0000000000005A23 loc_5A23:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005A23                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005A23                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 41
.text:0000000000005A27                 mov     [r11+38h], rax
.text:0000000000005A2B                 mov     rax, [r13+8]
.text:0000000000005A2F                 mov     [r11+40h], rax
.text:0000000000005A33                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005A38 ; ---------------------------------------------------------------------------
.text:0000000000005A38
.text:0000000000005A38 loc_5A38:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005A38                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005A38                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 73
.text:0000000000005A43                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005A4B                 mov     [rsp+5F8h+var_5D8], 1
.text:0000000000005A54                 jmp     loc_58B9
.text:0000000000005A59 ; ---------------------------------------------------------------------------
.text:0000000000005A59
.text:0000000000005A59 loc_5A59:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005A59                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005A59                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 65
.text:0000000000005A64                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005A6C                 xor     r10d, r10d
.text:0000000000005A6F                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005A78                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000005A81                 xor     r14d, r14d
.text:0000000000005A84                 mov     [rsp+5F8h+var_5F0], 1
.text:0000000000005A8D                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005A96                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005A9B ; ---------------------------------------------------------------------------
.text:0000000000005A9B
.text:0000000000005A9B loc_5A9B:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005A9B                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005A9B                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 00000000000CF1BE case 4
.text:0000000000005AA1                 lea     rsi, aNumberOf  ; "number of "
.text:0000000000005AA8                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000005AAD                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000005AB2                 mov     edx, 5          ; category
.text:0000000000005AB7                 movups  xmmword ptr [r11+58h], xmm0
.text:0000000000005ABC                 mov     byte ptr [r11+0A0h], 1
.text:0000000000005AC4                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000005AC9
.text:0000000000005AC9 loc_5AC9:                               ; CODE XREF: yyparse+DDF↓j
.text:0000000000005AC9                                         ; yyparse+E0C↓j ...
.text:0000000000005AC9                 xor     edi, edi        ; domainname
.text:0000000000005ACB                 call    _dcgettext
.text:0000000000005AD0                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000005AD5                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000005ADA                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000005ADF                 cmp     byte ptr [r11+0D9h], 0
.text:0000000000005AE7                 mov     rsi, r11
.text:0000000000005AEA                 jz      def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005AF0
.text:0000000000005AF0 loc_5AF0:                               ; CODE XREF: yyparse+1517↓j
.text:0000000000005AF0                 mov     rdi, rax
.text:0000000000005AF3                 call    debug_print_current_time_part_10
.text:0000000000005AF8                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000005AFD                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000005B02                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000005B07                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005B0C ; ---------------------------------------------------------------------------
.text:0000000000005B0C
.text:0000000000005B0C loc_5B0C:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005B0C                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005B0C                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 8
.text:0000000000005B11                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000005B16                 mov     edx, 5
.text:0000000000005B1B                 add     qword ptr [r11+0C8h], 1
.text:0000000000005B23                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000005B28                 lea     rsi, aTime+2    ; "time"
.text:0000000000005B2F                 jmp     short loc_5AC9
.text:0000000000005B31 ; ---------------------------------------------------------------------------
.text:0000000000005B31
.text:0000000000005B31 loc_5B31:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005B31                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005B31                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 7
.text:0000000000005B36                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000005B3B                 mov     edx, 5
.text:0000000000005B40                 add     qword ptr [r11+0C8h], 1
.text:0000000000005B48                 add     qword ptr [r11+0A8h], 1
.text:0000000000005B50                 lea     rsi, aDatetime  ; "datetime"
.text:0000000000005B57                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000005B5C                 jmp     loc_5AC9
.text:0000000000005B61 ; ---------------------------------------------------------------------------
.text:0000000000005B61
.text:0000000000005B61 loc_5B61:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005B61                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005B61                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 88
.text:0000000000005B66                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000005B6B                 sub     rsp, 8
.text:0000000000005B6F                 push    qword ptr [r13+10h]
.text:0000000000005B73                 push    qword ptr [r13+8]
.text:0000000000005B77                 mov     rdi, r11
.text:0000000000005B7A                 push    qword ptr [r13+0]
.text:0000000000005B7E                 mov     [rsp+618h+var_5B0], r11
.text:0000000000005B83                 call    digits_to_date_time
.text:0000000000005B88                 add     rsp, 20h
.text:0000000000005B8C                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000005B91                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000005B96                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000005B9B                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005BA0 ; ---------------------------------------------------------------------------
.text:0000000000005BA0
.text:0000000000005BA0 loc_5BA0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005BA0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005BA0                 mov     r14, [r13+8]    ; jumptable 00000000000CF1BE case 91
.text:0000000000005BA4                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005BA9 ; ---------------------------------------------------------------------------
.text:0000000000005BA9
.text:0000000000005BA9 loc_5BA9:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005BA9                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005BA9                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 69
.text:0000000000005BB4                 mov     rax, [r13-38h]
.text:0000000000005BB8                 jmp     loc_58EE
.text:0000000000005BBD ; ---------------------------------------------------------------------------
.text:0000000000005BBD
.text:0000000000005BBD loc_5BBD:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005BBD                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005BBD                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 68
.text:0000000000005BC8                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005BD0                 xor     r10d, r10d
.text:0000000000005BD3                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005BDC                 mov     [rsp+5F8h+var_5D0], 1
.text:0000000000005BE5                 xor     r14d, r14d
.text:0000000000005BE8                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000005BF1                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005BFA                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005BFF ; ---------------------------------------------------------------------------
.text:0000000000005BFF
.text:0000000000005BFF loc_5BFF:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005BFF                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005BFF                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 66
.text:0000000000005C0A                 mov     rax, [r13-38h]
.text:0000000000005C0E                 jmp     loc_5703
.text:0000000000005C13 ; ---------------------------------------------------------------------------
.text:0000000000005C13
.text:0000000000005C13 loc_5C13:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005C13                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005C13                 xor     edx, edx        ; jumptable 00000000000CF1BE case 60
.text:0000000000005C15                 mov     rax, [r13-38h]
.text:0000000000005C19                 mov     [rsp+5F8h+var_4F8], 0
.text:0000000000005C25                 imul    rax, [r13+0]
.text:0000000000005C2A                 pxor    xmm0, xmm0
.text:0000000000005C2E                 movaps  [rsp+5F8h+var_528], xmm0
.text:0000000000005C36                 movaps  [rsp+5F8h+var_518], xmm0
.text:0000000000005C3E                 movaps  [rsp+5F8h+var_508], xmm0
.text:0000000000005C46                 jno     loc_5942
.text:0000000000005C4C
.text:0000000000005C4C loc_5C4C:                               ; CODE XREF: yyparse+BEC↑j
.text:0000000000005C4C                 mov     edx, 1
.text:0000000000005C51                 jmp     loc_5942
.text:0000000000005C51 ; ---------------------------------------------------------------------------
.text:0000000000005C56                 align 20h
.text:0000000000005C60
.text:0000000000005C60 loc_5C60:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005C60                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005C60                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 63
.text:0000000000005C6B                 mov     rax, [r13-38h]
.text:0000000000005C6F                 jmp     loc_586A
.text:0000000000005C74 ; ---------------------------------------------------------------------------
.text:0000000000005C74
.text:0000000000005C74 loc_5C74:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005C74                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005C74                 mov     dword ptr [rsp+5F8h+var_590], r9d ; jumptable 00000000000CF1BE case 89
.text:0000000000005C79                 mov     [rsp+5F8h+var_598], r10
.text:0000000000005C7E                 sub     rsp, 8
.text:0000000000005C82                 push    qword ptr [r13-28h]
.text:0000000000005C86                 push    qword ptr [r13-30h]
.text:0000000000005C8A                 mov     rdi, r11
.text:0000000000005C8D                 push    qword ptr [r13-38h]
.text:0000000000005C91                 mov     [rsp+618h+var_5A0], r11
.text:0000000000005C96                 call    digits_to_date_time
.text:0000000000005C9B                 mov     rax, [r13+0]
.text:0000000000005C9F                 xor     r8d, r8d
.text:0000000000005CA2                 mov     rdx, [r13+10h]
.text:0000000000005CA6                 mov     rcx, [r13+18h]
.text:0000000000005CAA                 mov     rsi, [r13+20h]
.text:0000000000005CAE                 mov     rdi, [r13+28h]
.text:0000000000005CB2                 mov     [rsp+618h+var_5B0], rax
.text:0000000000005CB7                 mov     rax, [r13+8]
.text:0000000000005CBB                 mov     [rsp+618h+var_5A8], rax
.text:0000000000005CC0                 add     rsp, 20h
.text:0000000000005CC4                 mov     r11, [rsp+5F8h+var_5A0]
.text:0000000000005CC9                 mov     eax, [r13+30h]
.text:0000000000005CCD                 mov     r10, [rsp+5F8h+var_598]
.text:0000000000005CD2                 mov     r9d, dword ptr [rsp+5F8h+var_590]
.text:0000000000005CD7                 add     eax, [r11+98h]
.text:0000000000005CDE                 jno     loc_57AF
.text:0000000000005CE4
.text:0000000000005CE4 loc_5CE4:                               ; CODE XREF: yyparse+A59↑j
.text:0000000000005CE4                 mov     r8d, 1
.text:0000000000005CEA                 jmp     loc_57AF
.text:0000000000005CEA ; ---------------------------------------------------------------------------
.text:0000000000005CEF                 align 10h
.text:0000000000005CF0
.text:0000000000005CF0 loc_5CF0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005CF0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005CF0                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 59
.text:0000000000005CFB                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005D03                 mov     r10d, 1
.text:0000000000005D09                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005D12                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000005D1B                 xor     r14d, r14d
.text:0000000000005D1E                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000005D27                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005D30                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005D35 ; ---------------------------------------------------------------------------
.text:0000000000005D35
.text:0000000000005D35 loc_5D35:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005D35                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005D35                 mov     r14, 0FFFFFFFFFFFFFFFFh ; jumptable 00000000000CF1BE case 90
.text:0000000000005D3C                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005D41 ; ---------------------------------------------------------------------------
.text:0000000000005D41
.text:0000000000005D41 loc_5D41:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005D41                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005D41                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 57
.text:0000000000005D4C                 mov     r10, [r13-38h]
.text:0000000000005D50                 jmp     loc_56C0
.text:0000000000005D55 ; ---------------------------------------------------------------------------
.text:0000000000005D55
.text:0000000000005D55 loc_5D55:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005D55                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005D55                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 56
.text:0000000000005D60                 mov     dword ptr [rsp+5F8h+var_5E0], 0
.text:0000000000005D68                 xor     r10d, r10d
.text:0000000000005D6B                 mov     [rsp+5F8h+var_5D8], 0
.text:0000000000005D74                 mov     [rsp+5F8h+var_5D0], 0
.text:0000000000005D7D                 mov     r14d, 1
.text:0000000000005D83                 mov     [rsp+5F8h+var_5F0], 0
.text:0000000000005D8C                 mov     [rsp+5F8h+var_5E8], 0
.text:0000000000005D95                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005D9A ; ---------------------------------------------------------------------------
.text:0000000000005D9A
.text:0000000000005D9A loc_5D9A:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005D9A                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005D9A                 mov     rax, [r13-60h]  ; jumptable 00000000000CF1BE case 50
.text:0000000000005D9E                 mov     rdx, 8000000000000000h
.text:0000000000005DA8                 movdqu  xmm0, xmmword ptr [r13-70h]
.text:0000000000005DAE                 mov     [r11+30h], rax
.text:0000000000005DB2                 mov     rax, [r13-30h]
.text:0000000000005DB6                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000005DBB                 mov     rcx, rax
.text:0000000000005DBE                 neg     rcx
.text:0000000000005DC1                 cmp     rax, rdx
.text:0000000000005DC4                 mov     [r11+38h], rcx
.text:0000000000005DC8                 jz      loc_5328
.text:0000000000005DCE                 mov     rax, [r13+8]
.text:0000000000005DD2                 mov     rcx, rax
.text:0000000000005DD5                 neg     rcx
.text:0000000000005DD8                 cmp     rax, rdx
.text:0000000000005DDB                 mov     [r11+40h], rcx
.text:0000000000005DDF                 jnz     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005DE5                 jmp     loc_5328
.text:0000000000005DE5 ; ---------------------------------------------------------------------------
.text:0000000000005DEA                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 loc_5DF0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005DF0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005DF0                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 47
.text:0000000000005DF4                 mov     [r11+40h], rax
.text:0000000000005DF8                 mov     rax, [r13+0]
.text:0000000000005DFC                 mov     [r11+38h], rax
.text:0000000000005E00                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005E05 ; ---------------------------------------------------------------------------
.text:0000000000005E05
.text:0000000000005E05 loc_5E05:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005E05                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005E05                 mov     rax, [r13-0A8h] ; jumptable 00000000000CF1BE case 46
.text:0000000000005E0C
.text:0000000000005E0C loc_5E0C:                               ; CODE XREF: yyparse+180D↓j
.text:0000000000005E0C                 movdqu  xmm0, xmmword ptr [r13+0]
.text:0000000000005E12                 mov     [r11+38h], rax
.text:0000000000005E16                 mov     rax, [r13-68h]
.text:0000000000005E1A                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000005E1F                 mov     [r11+40h], rax
.text:0000000000005E23
.text:0000000000005E23 loc_5E23:                               ; CODE XREF: yyparse+1157↓j
.text:0000000000005E23                                         ; yyparse+1193↓j
.text:0000000000005E23                 mov     rax, [r13+10h]
.text:0000000000005E27                 mov     [r11+30h], rax
.text:0000000000005E2B                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005E30 ; ---------------------------------------------------------------------------
.text:0000000000005E30
.text:0000000000005E30 loc_5E30:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005E30                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005E30                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 48
.text:0000000000005E34                 movdqu  xmm0, xmmword ptr [r13+0]
.text:0000000000005E3A                 mov     [r11+40h], rax
.text:0000000000005E3E                 mov     rax, [r13-38h]
.text:0000000000005E42                 movups  xmmword ptr [r11+20h], xmm0
.text:0000000000005E47                 mov     [r11+38h], rax
.text:0000000000005E4B                 mov     rax, [r13+10h]
.text:0000000000005E4F                 mov     [r11+30h], rax
.text:0000000000005E53                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005E58 ; ---------------------------------------------------------------------------
.text:0000000000005E58
.text:0000000000005E58 loc_5E58:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005E58                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005E58                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 45
.text:0000000000005E5C                 mov     [r11+38h], rax
.text:0000000000005E60                 mov     rax, [r13+8]
.text:0000000000005E64                 mov     [r11+40h], rax
.text:0000000000005E68                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005E6D ; ---------------------------------------------------------------------------
.text:0000000000005E6D
.text:0000000000005E6D loc_5E6D:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005E6D                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005E6D                 mov     rax, [r13-70h]  ; jumptable 00000000000CF1BE case 44
.text:0000000000005E71                 mov     rdx, 8000000000000000h
.text:0000000000005E7B                 mov     [r11+38h], rax
.text:0000000000005E7F                 mov     rax, [r13-30h]
.text:0000000000005E83                 mov     rcx, rax
.text:0000000000005E86                 neg     rcx
.text:0000000000005E89                 cmp     rax, rdx
.text:0000000000005E8C                 mov     [r11+40h], rcx
.text:0000000000005E90                 jz      loc_5328
.text:0000000000005E96                 mov     rax, [r13+8]
.text:0000000000005E9A                 mov     rcx, rax
.text:0000000000005E9D                 neg     rcx
.text:0000000000005EA0                 cmp     rax, rdx
.text:0000000000005EA3                 mov     [r11+28h], rcx
.text:0000000000005EA7                 jnz     loc_5E23
.text:0000000000005EAD                 jmp     loc_5328
.text:0000000000005EAD ; ---------------------------------------------------------------------------
.text:0000000000005EB2                 align 8
.text:0000000000005EB8
.text:0000000000005EB8 loc_5EB8:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005EB8                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005EB8                 mov     rax, [r13-68h]  ; jumptable 00000000000CF1BE case 43
.text:0000000000005EBC                 mov     [r11+40h], rax
.text:0000000000005EC0                 mov     rax, [r13-38h]
.text:0000000000005EC4                 mov     [r11+38h], rax
.text:0000000000005EC8                 mov     rax, [r13+8]
.text:0000000000005ECC                 mov     rdx, rax
.text:0000000000005ECF                 neg     rdx
.text:0000000000005ED2                 mov     [r11+28h], rdx
.text:0000000000005ED6                 mov     rdx, 8000000000000000h
.text:0000000000005EE0                 cmp     rax, rdx
.text:0000000000005EE3                 jnz     loc_5E23
.text:0000000000005EE9                 jmp     loc_5328
.text:0000000000005EE9 ; ---------------------------------------------------------------------------
.text:0000000000005EEE                 align 10h
.text:0000000000005EF0
.text:0000000000005EF0 loc_5EF0:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005EF0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005EF0                 mov     dword ptr [rsp+5F8h+var_4F8+4], 0 ; jumptable 00000000000CF1BE case 54
.text:0000000000005EFB                 mov     r14, [r13-38h]
.text:0000000000005EFF                 jmp     loc_5745
.text:0000000000005F04 ; ---------------------------------------------------------------------------
.text:0000000000005F04
.text:0000000000005F04 loc_5F04:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F04                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F04                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 40
.text:0000000000005F08                 mov     byte ptr [r11+0E0h], 1
.text:0000000000005F10                 mov     [r11+8], rax
.text:0000000000005F14                 mov     rax, [r13+0]
.text:0000000000005F18                 mov     [r11+10h], eax
.text:0000000000005F1C                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F21 ; ---------------------------------------------------------------------------
.text:0000000000005F21
.text:0000000000005F21 loc_5F21:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F21                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F21                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 39
.text:0000000000005F25                 mov     byte ptr [r11+0E0h], 1
.text:0000000000005F2D                 mov     [r11+8], rax
.text:0000000000005F31                 mov     rax, [r13+0]
.text:0000000000005F35                 mov     [r11+10h], eax
.text:0000000000005F39                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F3E ; ---------------------------------------------------------------------------
.text:0000000000005F3E
.text:0000000000005F3E loc_5F3E:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F3E                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F3E                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 38
.text:0000000000005F42                 mov     qword ptr [r11+8], 0
.text:0000000000005F4A                 mov     [r11+10h], eax
.text:0000000000005F4E                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F53 ; ---------------------------------------------------------------------------
.text:0000000000005F53
.text:0000000000005F53 loc_5F53:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F53                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F53                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 37
.text:0000000000005F57                 mov     qword ptr [r11+8], 0
.text:0000000000005F5F                 mov     [r11+10h], eax
.text:0000000000005F63                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F68 ; ---------------------------------------------------------------------------
.text:0000000000005F68
.text:0000000000005F68 loc_5F68:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F68                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F68                 mov     eax, [r13-38h]  ; jumptable 00000000000CF1BE case 36
.text:0000000000005F6C                 add     eax, 0E10h
.text:0000000000005F71                 mov     [r11+18h], eax
.text:0000000000005F75                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F7A ; ---------------------------------------------------------------------------
.text:0000000000005F7A
.text:0000000000005F7A loc_5F7A:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F7A                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F7A                 mov     eax, [r13+0]    ; jumptable 00000000000CF1BE case 35
.text:0000000000005F7E                 add     eax, 0E10h
.text:0000000000005F83                 mov     [r11+18h], eax
.text:0000000000005F87                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005F8C ; ---------------------------------------------------------------------------
.text:0000000000005F8C
.text:0000000000005F8C loc_5F8C:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000005F8C                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000005F8C                 movzx   esi, byte ptr [r13-38h] ; jumptable 00000000000CF1BE case 34
.text:0000000000005F91                 mov     rcx, [r13-28h]
.text:0000000000005F95                 lea     rdi, [r11+18h]
.text:0000000000005F99                 mov     rdx, [r13-30h]
.text:0000000000005F9D                 mov     r8, [r13+0]
.text:0000000000005FA1                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000005FA6                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000005FAB                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000005FB0                 call    time_zone_hhmm_isra_4
.text:0000000000005FB5                 test    al, al
.text:0000000000005FB7                 jz      loc_5328
.text:0000000000005FBD                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000005FC2                 xor     edx, edx
.text:0000000000005FC4                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000005FC9                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000005FCE                 movsxd  rax, dword ptr [r11+18h]
.text:0000000000005FD2                 add     rax, [r13-70h]
.text:0000000000005FD6                 movsxd  rcx, eax
.text:0000000000005FD9                 seto    dl
.text:0000000000005FDC                 mov     [r11+18h], eax
.text:0000000000005FE0                 cmp     rax, rcx
.text:0000000000005FE3                 mov     ecx, 1
.text:0000000000005FE8                 cmovnz  edx, ecx
.text:0000000000005FEB                 test    edx, edx
.text:0000000000005FED                 jz      def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000005FF3                 jmp     loc_5328
.text:0000000000005FF3 ; ---------------------------------------------------------------------------
.text:0000000000005FF8                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006000                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006000                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 32
.text:0000000000006004                 mov     [r11+18h], eax
.text:0000000000006008                 jmp     loc_4EB8
.text:000000000000600D ; ---------------------------------------------------------------------------
.text:000000000000600D
.text:000000000000600D loc_600D:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000600D                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000600D                 mov     dword ptr [r11+18h], 6270h ; jumptable 00000000000CF1BE case 31
.text:0000000000006015                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000601A ; ---------------------------------------------------------------------------
.text:000000000000601A
.text:000000000000601A loc_601A:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000601A                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000601A                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 30
.text:000000000000601E                 mov     [r11+18h], eax
.text:0000000000006022                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006027 ; ---------------------------------------------------------------------------
.text:0000000000006027
.text:0000000000006027 loc_6027:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006027                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006027                 mov     dword ptr [r11+14h], 1 ; jumptable 00000000000CF1BE case 29
.text:000000000000602F                 add     qword ptr [r11+0C0h], 1
.text:0000000000006037                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:000000000000603C ; ---------------------------------------------------------------------------
.text:000000000000603C
.text:000000000000603C loc_603C:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000603C                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000603C                 mov     rax, [r13+0]    ; jumptable 00000000000CF1BE case 28
.text:0000000000006040                 mov     [r11+14h], eax
.text:0000000000006044                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006049 ; ---------------------------------------------------------------------------
.text:0000000000006049
.text:0000000000006049 loc_6049:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006049                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006049                 add     qword ptr [r11+0D0h], 1 ; jumptable 00000000000CF1BE case 27
.text:0000000000006051                 movzx   esi, byte ptr [r13-38h]
.text:0000000000006056                 lea     rdi, [r11+18h]
.text:000000000000605A                 mov     rcx, [r13-28h]
.text:000000000000605E                 mov     rdx, [r13-30h]
.text:0000000000006062                 mov     r8, [r13+0]
.text:0000000000006066                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:000000000000606B                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000006070                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000006075                 call    time_zone_hhmm_isra_4
.text:000000000000607A                 test    al, al
.text:000000000000607C                 mov     r11, [rsp+5F8h+var_5B0]
.text:0000000000006081                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000006086                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:000000000000608B                 jnz     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006091                 jmp     loc_5328
.text:0000000000006091 ; ---------------------------------------------------------------------------
.text:0000000000006096                 align 20h
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000060A0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000060A0                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 24
.text:00000000000060A4                 mov     rdx, [r13-0A0h]
.text:00000000000060AB                 mov     rcx, [r13-110h]
.text:00000000000060B2                 mov     dword ptr [r11+1Ch], 2
.text:00000000000060BA                 mov     [r11+58h], rax
.text:00000000000060BE                 movsxd  rax, dword ptr [r13-30h]
.text:00000000000060C2                 mov     [r11+48h], rcx
.text:00000000000060C6                 mov     [r11+50h], rdx
.text:00000000000060CA                 mov     [r11+60h], rax
.text:00000000000060CE                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000060D3 ; ---------------------------------------------------------------------------
.text:00000000000060D3
.text:00000000000060D3 loc_60D3:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000060D3                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000060D3                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 23
.text:00000000000060D7                 mov     rdx, [r13-0A0h]
.text:00000000000060DE                 mov     qword ptr [r11+58h], 0
.text:00000000000060E6                 mov     qword ptr [r11+60h], 0
.text:00000000000060EE                 mov     dword ptr [r11+1Ch], 2
.text:00000000000060F6                 mov     [r11+48h], rdx
.text:00000000000060FA                 mov     [r11+50h], rax
.text:00000000000060FE                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006103 ; ---------------------------------------------------------------------------
.text:0000000000006103
.text:0000000000006103 loc_6103:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006103                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006103                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 22
.text:0000000000006107                 mov     qword ptr [r11+50h], 0
.text:000000000000610F                 mov     qword ptr [r11+58h], 0
.text:0000000000006117                 mov     qword ptr [r11+60h], 0
.text:000000000000611F                 mov     dword ptr [r11+1Ch], 2
.text:0000000000006127                 mov     [r11+48h], rax
.text:000000000000612B                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006130 ; ---------------------------------------------------------------------------
.text:0000000000006130
.text:0000000000006130 loc_6130:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006130                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006130                 mov     rax, [r13-38h]  ; jumptable 00000000000CF1BE case 20
.text:0000000000006134                 mov     rdx, [r13-0A0h]
.text:000000000000613B                 mov     rcx, [r13-110h]
.text:0000000000006142                 mov     [r11+58h], rax
.text:0000000000006146                 movsxd  rax, dword ptr [r13-30h]
.text:000000000000614A                 mov     [r11+48h], rcx
.text:000000000000614E                 mov     [r11+50h], rdx
.text:0000000000006152                 mov     [r11+60h], rax
.text:0000000000006156                 mov     rax, [r13+0]
.text:000000000000615A                 mov     [r11+1Ch], eax
.text:000000000000615E                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006163 ; ---------------------------------------------------------------------------
.text:0000000000006163
.text:0000000000006163 loc_6163:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006163                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006163                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 19
.text:0000000000006167                 mov     rdx, [r13-0A0h]
.text:000000000000616E                 mov     qword ptr [r11+58h], 0
.text:0000000000006176                 mov     qword ptr [r11+60h], 0
.text:000000000000617E                 mov     [r11+50h], rax
.text:0000000000006182                 mov     rax, [r13+0]
.text:0000000000006186                 mov     [r11+48h], rdx
.text:000000000000618A                 mov     [r11+1Ch], eax
.text:000000000000618E                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006193 ; ---------------------------------------------------------------------------
.text:0000000000006193
.text:0000000000006193 loc_6193:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006193                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006193                 mov     rax, [r13-30h]  ; jumptable 00000000000CF1BE case 18
.text:0000000000006197                 mov     qword ptr [r11+50h], 0
.text:000000000000619F                 mov     qword ptr [r11+58h], 0
.text:00000000000061A7                 mov     qword ptr [r11+60h], 0
.text:00000000000061AF                 mov     [r11+48h], rax
.text:00000000000061B3                 mov     rax, [r13+0]
.text:00000000000061B7                 mov     [r11+1Ch], eax
.text:00000000000061BB                 jmp     def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000061C0 ; ---------------------------------------------------------------------------
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000061C0                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000061C0                 lea     rsi, aHybrid    ; jumptable 00000000000CF1BE case 15
.text:00000000000061C7                 mov     [rsp+5F8h+var_5A0], r11
.text:00000000000061CC                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:00000000000061D1                 mov     [rsp+5F8h+var_5B0], r10
.text:00000000000061D6                 mov     edx, 5          ; category
.text:00000000000061DB
.text:00000000000061DB loc_61DB:                               ; CODE XREF: yyparse+1537↓j
.text:00000000000061DB                 xor     edi, edi        ; domainname
.text:00000000000061DD                 call    _dcgettext
.text:00000000000061E2                 mov     r11, [rsp+5F8h+var_5A0]
.text:00000000000061E7                 mov     r10, [rsp+5F8h+var_5B0]
.text:00000000000061EC                 mov     r9d, dword ptr [rsp+5F8h+var_5A8]
.text:00000000000061F1                 cmp     byte ptr [r11+0D9h], 0
.text:00000000000061F9                 jz      def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:00000000000061FF                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000006204                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000006209                 mov     rsi, r11
.text:000000000000620C                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000006211                 jmp     loc_4FD4
.text:0000000000006216 ; ---------------------------------------------------------------------------
.text:0000000000006216
.text:0000000000006216 loc_6216:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006216                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006216                 lea     rsi, aNumber    ; jumptable 00000000000CF1BE case 14
.text:000000000000621D                 xor     edi, edi        ; domainname
.text:000000000000621F                 mov     edx, 5          ; category
.text:0000000000006224                 mov     [rsp+5F8h+var_5A0], r11
.text:0000000000006229                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:000000000000622E                 mov     [rsp+5F8h+var_5B0], r10
.text:0000000000006233                 call    _dcgettext
.text:0000000000006238                 mov     r11, [rsp+5F8h+var_5A0]
.text:000000000000623D                 mov     r10, [rsp+5F8h+var_5B0]
.text:0000000000006242                 mov     r9d, dword ptr [rsp+5F8h+var_5A8]
.text:0000000000006247                 cmp     byte ptr [r11+0D9h], 0
.text:000000000000624F                 jz      def_4EAE        ; jumptable 00000000000CF1BE default case, cases 5,6,16,17,21,25,26,49,74,82-84,86
.text:0000000000006255                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:000000000000625A                 mov     [rsp+5F8h+var_5A8], r10
.text:000000000000625F                 mov     rsi, r11
.text:0000000000006262                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000006267                 jmp     loc_5AF0
.text:000000000000626C ; ---------------------------------------------------------------------------
.text:000000000000626C
.text:000000000000626C loc_626C:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000626C                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000626C                 mov     [rsp+5F8h+var_5A0], r11 ; jumptable 00000000000CF1BE case 13
.text:0000000000006271                 mov     dword ptr [rsp+5F8h+var_5A8], r9d
.text:0000000000006276                 mov     edx, 5
.text:000000000000627B                 mov     [rsp+5F8h+var_5B0], r10
.text:0000000000006280                 lea     rsi, aRelative  ; "relative"
.text:0000000000006287                 jmp     loc_61DB
.text:000000000000628C ; ---------------------------------------------------------------------------
.text:000000000000628C
.text:000000000000628C loc_628C:                               ; CODE XREF: yyparse+15E↑j
.text:000000000000628C                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:000000000000628C                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 12
.text:0000000000006291                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000006296                 mov     edx, 5
.text:000000000000629B                 add     qword ptr [r11+0B0h], 1
.text:00000000000062A3                 mov     [rsp+5F8h+var_5B0], r11
.text:00000000000062A8                 lea     rsi, aDay       ; "day"
.text:00000000000062AF                 jmp     loc_5AC9
.text:00000000000062B4 ; ---------------------------------------------------------------------------
.text:00000000000062B4
.text:00000000000062B4 loc_62B4:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000062B4                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000062B4                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 11
.text:00000000000062B9                 mov     [rsp+5F8h+var_5A8], r10
.text:00000000000062BE                 mov     edx, 5
.text:00000000000062C3                 add     qword ptr [r11+0A8h], 1
.text:00000000000062CB                 mov     [rsp+5F8h+var_5B0], r11
.text:00000000000062D0                 lea     rsi, aDate_0    ; "date"
.text:00000000000062D7                 jmp     loc_5AC9
.text:00000000000062DC ; ---------------------------------------------------------------------------
.text:00000000000062DC
.text:00000000000062DC loc_62DC:                               ; CODE XREF: yyparse+15E↑j
.text:00000000000062DC                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:00000000000062DC                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 10
.text:00000000000062E1                 mov     [rsp+5F8h+var_5A8], r10
.text:00000000000062E6                 mov     edx, 5
.text:00000000000062EB                 add     qword ptr [r11+0D0h], 1
.text:00000000000062F3                 mov     [rsp+5F8h+var_5B0], r11
.text:00000000000062F8                 lea     rsi, aZone      ; "zone"
.text:00000000000062FF                 jmp     loc_5AC9
.text:0000000000006304 ; ---------------------------------------------------------------------------
.text:0000000000006304
.text:0000000000006304 loc_6304:                               ; CODE XREF: yyparse+15E↑j
.text:0000000000006304                                         ; DATA XREF: .rodata:jpt_4EAE↓o
.text:0000000000006304                 mov     dword ptr [rsp+5F8h+var_5A0], r9d ; jumptable 00000000000CF1BE case 9
.text:0000000000006309                 mov     [rsp+5F8h+var_5A8], r10
.text:000000000000630E                 mov     edx, 5
.text:0000000000006313                 add     qword ptr [r11+0B8h], 1
.text:000000000000631B                 mov     [rsp+5F8h+var_5B0], r11
.text:0000000000006320                 lea     rsi, unk_10216
.text:0000000000006327                 jmp     loc_5AC9
.text:000000000000632C ; ---------------------------------------------------------------------------
.text:000000000000632C
.text:000000000000632C loc_632C:                               ; CODE XREF: yyparse+79F↑j
.text:000000000000632C                 lea     eax, [rcx-30h]
.text:000000000000632F                 cmp     al, 9
.text:0000000000006331                 ja      loc_5455
.text:0000000000006337
.text:0000000000006337 loc_6337:                               ; CODE XREF: yyparse+1780↓j
.text:0000000000006337                 xor     eax, eax
.text:0000000000006339                 mov     rcx, rdi
.text:000000000000633C                 mov     r14d, 30h ; '0'
.text:0000000000006342                 mov     r10, rax
.text:0000000000006345                 jmp     short loc_6363
.text:0000000000006345 ; ---------------------------------------------------------------------------
.text:0000000000006347                 align 10h
.text:0000000000006350
.text:0000000000006350 loc_6350:                               ; CODE XREF: yyparse+1635↓j
.text:0000000000006350                 movzx   esi, byte ptr [rcx+1]
.text:0000000000006354                 lea     rbp, [rcx+1]
.text:0000000000006358                 lea     edx, [rsi-30h]
.text:000000000000635B                 cmp     dl, 9
.text:000000000000635E                 ja      short loc_6397
.text:0000000000006360                 mov     rcx, rbp
.text:0000000000006363
.text:0000000000006363 loc_6363:                               ; CODE XREF: yyparse+15F5↑j
.text:0000000000006363                 imul    r10, 0Ah
.text:0000000000006367                 jo      short loc_6387
.text:0000000000006369                 movzx   edx, sil
.text:000000000000636D                 mov     esi, r14d
.text:0000000000006370                 lea     eax, [rdx-30h]
.text:0000000000006373                 sub     esi, edx
.text:0000000000006375                 cmp     r9d, 0FFFFFFFFh
.text:0000000000006379                 cmovnz  esi, eax
.text:000000000000637C                 movsxd  rax, esi
.text:000000000000637F                 add     rax, r10
.text:0000000000006382                 mov     r10, rax
.text:0000000000006385                 jno     short loc_6350
.text:0000000000006387
.text:0000000000006387 loc_6387:                               ; CODE XREF: yyparse+1617↑j
.text:0000000000006387                                         ; yyparse+16D5↓j ...
.text:0000000000006387                 mov     eax, 2
.text:000000000000638C                 mov     r9d, 3Fh ; '?'
.text:0000000000006392                 jmp     loc_542E
.text:0000000000006397 ; ---------------------------------------------------------------------------
.text:0000000000006397
.text:0000000000006397 loc_6397:                               ; CODE XREF: yyparse+160E↑j
.text:0000000000006397                 and     esi, 0FFFFFFFDh
.text:000000000000639A                 mov     r10, rbp
.text:000000000000639D                 mov     rdx, rax
.text:00000000000063A0                 cmp     sil, 2Ch ; ','
.text:00000000000063A4                 jnz     loc_6478
.text:00000000000063AA                 movsx   eax, byte ptr [rbp+1]
.text:00000000000063AE                 lea     esi, [rax-30h]
.text:00000000000063B1                 cmp     sil, 9
.text:00000000000063B5                 ja      loc_6478
.text:00000000000063BB                 lea     rdi, [rcx+3]
.text:00000000000063BF                 movsx   ecx, byte ptr [rcx+3]
.text:00000000000063C3                 sub     eax, 30h ; '0'
.text:00000000000063C6                 mov     r10d, 8
.text:00000000000063CC
.text:00000000000063CC loc_63CC:                               ; CODE XREF: yyparse+1699↓j
.text:00000000000063CC                 lea     eax, [rax+rax*4]
.text:00000000000063CF                 lea     esi, [rcx-30h]
.text:00000000000063D2                 add     eax, eax
.text:00000000000063D4                 cmp     sil, 9
.text:00000000000063D8                 ja      short loc_63E5
.text:00000000000063DA                 lea     eax, [rax+rcx-30h]
.text:00000000000063DE                 add     rdi, 1
.text:00000000000063E2                 movsx   ecx, byte ptr [rdi]
.text:00000000000063E5
.text:00000000000063E5 loc_63E5:                               ; CODE XREF: yyparse+1688↑j
.text:00000000000063E5                 sub     r10d, 1
.text:00000000000063E9                 jnz     short loc_63CC
.text:00000000000063EB                 cmp     r9d, 0FFFFFFFFh
.text:00000000000063EF                 jnz     short loc_63FF
.text:00000000000063F1                 jmp     short loc_6460
.text:00000000000063F1 ; ---------------------------------------------------------------------------
.text:00000000000063F3                 align 8
.text:00000000000063F8
.text:00000000000063F8 loc_63F8:                               ; CODE XREF: yyparse+16B5↓j
.text:00000000000063F8                 add     rdi, 1
.text:00000000000063FC                 movzx   ecx, byte ptr [rdi]
.text:00000000000063FF
.text:00000000000063FF loc_63FF:                               ; CODE XREF: yyparse+169F↑j
.text:00000000000063FF                                         ; yyparse+1717↓j ...
.text:00000000000063FF                 sub     ecx, 30h ; '0'
.text:0000000000006402                 cmp     cl, 9
.text:0000000000006405                 jbe     short loc_63F8
.text:0000000000006407                 test    r9d, r9d
.text:000000000000640A                 jns     loc_64D5
.text:0000000000006410                 test    eax, eax
.text:0000000000006412                 jz      loc_64D5
.text:0000000000006418                 mov     rcx, 8000000000000000h
.text:0000000000006422                 cmp     rdx, rcx
.text:0000000000006425                 jz      loc_6387
.text:000000000000642B                 sub     rdx, 1
.text:000000000000642F                 mov     [r11], rdi
.text:0000000000006432                 mov     r9d, 114h
.text:0000000000006438                 mov     qword ptr [rsp+5F8h+var_568], rdx
.text:0000000000006440                 mov     edx, 3B9ACA00h
.text:0000000000006445                 sub     edx, eax
.text:0000000000006447                 movsxd  rax, edx
.text:000000000000644A                 mov     [rsp+5F8h+var_5C0], rax
.text:000000000000644F                 mov     eax, 15h
.text:0000000000006454                 jmp     loc_542E
.text:0000000000006459 ; ---------------------------------------------------------------------------
.text:0000000000006459
.text:0000000000006459 loc_6459:                               ; CODE XREF: yyparse+171C↓j
.text:0000000000006459                 add     rdi, 1
.text:000000000000645D                 movzx   ecx, byte ptr [rdi]
.text:0000000000006460
.text:0000000000006460 loc_6460:                               ; CODE XREF: yyparse+16A1↑j
.text:0000000000006460                 lea     esi, [rcx-30h]
.text:0000000000006463                 cmp     sil, 9
.text:0000000000006467                 ja      short loc_63FF
.text:0000000000006469                 cmp     cl, 30h ; '0'
.text:000000000000646C                 jz      short loc_6459
.text:000000000000646E                 add     eax, 1
.text:0000000000006471                 jmp     short loc_63FF
.text:0000000000006471 ; ---------------------------------------------------------------------------
.text:0000000000006473                 align 8
.text:0000000000006478
.text:0000000000006478 loc_6478:                               ; CODE XREF: yyparse+1654↑j
.text:0000000000006478                                         ; yyparse+1665↑j
.text:0000000000006478                 mov     eax, r9d
.text:000000000000647B                 mov     [r11], r10
.text:000000000000647E                 mov     [rsp+5F8h+var_5C0], rdx
.text:0000000000006483                 shr     eax, 1Fh
.text:0000000000006486                 mov     byte ptr [rsp+5F8h+var_568], al
.text:000000000000648D                 mov     rax, r10
.text:0000000000006490                 sub     rax, rdi
.text:0000000000006493                 cmp     r9d, 1
.text:0000000000006497                 mov     [rsp+5F8h+var_5B8], rax
.text:000000000000649C                 sbb     eax, eax
.text:000000000000649E                 not     eax
.text:00000000000064A0                 add     eax, 14h
.text:00000000000064A3                 cmp     r9d, 1
.text:00000000000064A7                 sbb     r9d, r9d
.text:00000000000064AA                 not     r9d
.text:00000000000064AD                 add     r9d, 113h
.text:00000000000064B4                 jmp     loc_542E
.text:00000000000064B9 ; ---------------------------------------------------------------------------
.text:00000000000064B9
.text:00000000000064B9 loc_64B9:                               ; CODE XREF: yyparse+39E↑j
.text:00000000000064B9                 mov     eax, 2
.text:00000000000064BE                 jmp     loc_532D
.text:00000000000064C3 ; ---------------------------------------------------------------------------
.text:00000000000064C3
.text:00000000000064C3 loc_64C3:                               ; CODE XREF: yyparse+3A7↑j
.text:00000000000064C3                 xor     eax, eax
.text:00000000000064C5                 jmp     loc_532D
.text:00000000000064CA ; ---------------------------------------------------------------------------
.text:00000000000064CA
.text:00000000000064CA loc_64CA:                               ; CODE XREF: yyparse+776↑j
.text:00000000000064CA                 mov     rdi, [r11]
.text:00000000000064CD                 xor     r9d, r9d
.text:00000000000064D0                 jmp     loc_6337
.text:00000000000064D5 ; ---------------------------------------------------------------------------
.text:00000000000064D5
.text:00000000000064D5 loc_64D5:                               ; CODE XREF: yyparse+16BA↑j
.text:00000000000064D5                                         ; yyparse+16C2↑j
.text:00000000000064D5                 cmp     r9d, 1
.text:00000000000064D9                 cdqe
.text:00000000000064DB                 mov     qword ptr [rsp+5F8h+var_568], rdx
.text:00000000000064E3                 mov     [rsp+5F8h+var_5C0], rax
.text:00000000000064E8                 sbb     eax, eax
.text:00000000000064EA                 mov     [r11], rdi
.text:00000000000064ED                 not     eax
.text:00000000000064EF                 add     eax, 16h
.text:00000000000064F2                 cmp     r9d, 1
.text:00000000000064F6                 sbb     r9d, r9d
.text:00000000000064F9                 not     r9d
.text:00000000000064FC                 add     r9d, 115h
.text:0000000000006503                 jmp     loc_542E
.text:0000000000006508 ; ---------------------------------------------------------------------------
.text:0000000000006508
.text:0000000000006508 loc_6508:                               ; CODE XREF: yyparse+C57↑j
.text:0000000000006508                 mov     rdi, [r13-0D8h]
.text:000000000000650F                 test    al, al
.text:0000000000006511                 mov     [rsp+5F8h+var_5B0], rdi
.text:0000000000006516                 jz      short loc_6558
.text:0000000000006518                 lea     rsi, aWarningValueLd_0 ; "warning: value %ld has less than 4 digi"...
.text:000000000000651F                 mov     edx, 5          ; category
.text:0000000000006524                 xor     edi, edi        ; domainname
.text:0000000000006526                 mov     [rsp+5F8h+var_598], r11
.text:000000000000652B                 mov     dword ptr [rsp+5F8h+var_5A0], r9d
.text:0000000000006530                 mov     [rsp+5F8h+var_5A8], r10
.text:0000000000006535                 call    _dcgettext
.text:000000000000653A                 mov     rsi, [rsp+5F8h+var_5B0]
.text:000000000000653F                 mov     rdi, rax
.text:0000000000006542                 xor     eax, eax
.text:0000000000006544                 call    dbg_printf
.text:0000000000006549                 mov     r11, [rsp+5F8h+var_598]
.text:000000000000654E                 mov     r9d, dword ptr [rsp+5F8h+var_5A0]
.text:0000000000006553                 mov     r10, [rsp+5F8h+var_5A8]
.text:0000000000006558
.text:0000000000006558 loc_6558:                               ; CODE XREF: yyparse+17C6↑j
.text:0000000000006558                 mov     rax, [rsp+5F8h+var_5B0]
.text:000000000000655D                 jmp     loc_5E0C
.text:0000000000006562 ; ---------------------------------------------------------------------------
.text:0000000000006562
.text:0000000000006562 loc_6562:                               ; CODE XREF: yyparse+518↑j
.text:0000000000006562                 mov     rax, [rsp+5F8h+var_588]
.text:0000000000006567                 sub     ecx, r8d
.text:000000000000656A                 seto    r8b
.text:000000000000656E                 mov     [r11+98h], ecx
.text:0000000000006575                 xor     ecx, ecx
.text:0000000000006577                 sub     rdx, rdi
.text:000000000000657A                 movzx   r8d, r8b
.text:000000000000657E                 seto    cl
.text:0000000000006581                 xor     edi, edi
.text:0000000000006583                 sub     rax, rsi
.text:0000000000006586                 seto    dil
.text:000000000000658A                 mov     [r11+88h], rax
.text:0000000000006591                 xor     esi, esi
.text:0000000000006593                 mov     rax, [rsp+5F8h+var_578]
.text:000000000000659B                 sub     rax, [rsp+5F8h+var_598]
.text:00000000000065A0                 mov     [rsp+5F8h+var_588], rdi
.text:00000000000065A5                 mov     [r11+90h], rdx
.text:00000000000065AC                 seto    sil
.text:00000000000065B0                 mov     [r11+80h], rax
.text:00000000000065B7                 xor     edi, edi
.text:00000000000065B9                 mov     rax, [rsp+5F8h+var_570]
.text:00000000000065C1                 sub     rax, [rsp+5F8h+var_5A0]
.text:00000000000065C6                 seto    dil
.text:00000000000065CA                 mov     [r11+78h], rax
.text:00000000000065CE                 xor     edx, edx
.text:00000000000065D0                 mov     rax, [rsp+5F8h+var_590]
.text:00000000000065D5                 sub     rax, [rsp+5F8h+var_5A8]
.text:00000000000065DA                 seto    dl
.text:00000000000065DD                 mov     [r11+70h], rax
.text:00000000000065E1                 mov     rax, [rsp+5F8h+var_580]
.text:00000000000065E6                 mov     [rsp+5F8h+var_5A8], rdx
.text:00000000000065EB                 sub     rax, [rsp+5F8h+var_5B0]
.text:00000000000065F0                 jmp     loc_52FC
.text:00000000000065F5 ; ---------------------------------------------------------------------------
.text:00000000000065F5
.text:00000000000065F5 loc_65F5:                               ; CODE XREF: yyparse+900↑j
.text:00000000000065F5                 mov     rbp, r14
.text:00000000000065F8
.text:00000000000065F8 loc_65F8:                               ; CODE XREF: yyparse+18BE↓j
.text:00000000000065F8                 mov     edx, [rbp+0]
.text:00000000000065FB                 add     rbp, 4
.text:00000000000065FF                 lea     eax, [rdx-1010101h]
.text:0000000000006605                 not     edx
.text:0000000000006607                 and     eax, edx
.text:0000000000006609                 and     eax, 80808080h
.text:000000000000660E                 jz      short loc_65F8
.text:0000000000006610                 mov     edx, eax
.text:0000000000006612                 mov     r9d, 1
.text:0000000000006618                 shr     edx, 10h
.text:000000000000661B                 test    eax, 8080h
.text:0000000000006620                 cmovz   eax, edx
.text:0000000000006623                 lea     rdx, [rbp+2]
.text:0000000000006627                 mov     edi, eax
.text:0000000000006629                 cmovz   rbp, rdx
.text:000000000000662D                 add     dil, al
.text:0000000000006630                 sbb     rbp, 3
.text:0000000000006634                 sub     rbp, r14
.text:0000000000006637                 cmp     rbp, 3
.text:000000000000663B                 jz      short loc_664A
.text:000000000000663D                 xor     r9d, r9d
.text:0000000000006640                 cmp     rbp, 4
.text:0000000000006644                 jz      loc_6811
.text:000000000000664A
.text:000000000000664A loc_664A:                               ; CODE XREF: yyparse+18EB↑j
.text:000000000000664A                                         ; yyparse+1AD0↓j
.text:000000000000664A                 lea     rcx, month_and_day_table
.text:0000000000006651                 lea     rsi, aJanuary   ; "JANUARY"
.text:0000000000006658                 mov     dword ptr [rsp+5F8h+var_5F0], ebx
.text:000000000000665C                 mov     [rsp+5F8h+var_5D8], rbp
.text:0000000000006661                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000006666                 mov     ebx, r9d
.text:0000000000006669                 mov     rbp, rcx
.text:000000000000666C                 mov     [rsp+5F8h+var_5E0], r11
.text:0000000000006671
.text:0000000000006671 loc_6671:                               ; CODE XREF: yyparse+194E↓j
.text:0000000000006671                 test    ebx, ebx
.text:0000000000006673                 jz      loc_67E8
.text:0000000000006679                 mov     edx, 3          ; n
.text:000000000000667E                 mov     rdi, r14        ; s1
.text:0000000000006681                 call    _strncmp
.text:0000000000006686                 test    eax, eax
.text:0000000000006688                 setz    al
.text:000000000000668B
.text:000000000000668B loc_668B:                               ; CODE XREF: yyparse+1AA5↓j
.text:000000000000668B                 test    al, al
.text:000000000000668D                 jnz     loc_67FA
.text:0000000000006693                 add     rbp, 10h
.text:0000000000006697                 mov     rsi, [rbp+0]
.text:000000000000669B                 test    rsi, rsi
.text:000000000000669E                 jnz     short loc_6671
.text:00000000000066A0                 mov     r11, [rsp+5F8h+var_5E0]
.text:00000000000066A5                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:00000000000066AA                 mov     rsi, r14
.text:00000000000066AD                 movsxd  rbx, dword ptr [rsp+5F8h+var_5F0]
.text:00000000000066B2                 mov     byte ptr [rsp+5F8h+var_5F0], al
.text:00000000000066B6                 mov     rbp, [rsp+5F8h+var_5D8]
.text:00000000000066BB                 mov     rdi, r11
.text:00000000000066BE                 mov     dword ptr [rsp+5F8h+var_5D0], r8d
.text:00000000000066C3                 mov     [rsp+5F8h+var_5E8], r11
.text:00000000000066C8                 call    lookup_zone
.text:00000000000066CD                 test    rax, rax
.text:00000000000066D0                 mov     rcx, rax
.text:00000000000066D3                 mov     r11, [rsp+5F8h+var_5E8]
.text:00000000000066D8                 mov     r8d, dword ptr [rsp+5F8h+var_5D0]
.text:00000000000066DD                 jnz     loc_5679
.text:00000000000066E3                 lea     rsi, aDst+1     ; s2
.text:00000000000066EA                 mov     rdi, r14        ; s1
.text:00000000000066ED                 mov     [rsp+5F8h+var_5E0], r11
.text:00000000000066F2                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:00000000000066F7                 call    _strcmp
.text:00000000000066FC                 test    eax, eax
.text:00000000000066FE                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000006703                 mov     r11, [rsp+5F8h+var_5E0]
.text:0000000000006708                 jz      loc_6835
.text:000000000000670E                 lea     rcx, time_units_table
.text:0000000000006715                 lea     rsi, aYear      ; "YEAR"
.text:000000000000671C
.text:000000000000671C loc_671C:                               ; CODE XREF: yyparse+1A04↓j
.text:000000000000671C                 mov     rdi, r14        ; s1
.text:000000000000671F                 mov     [rsp+5F8h+var_5D8], r11
.text:0000000000006724                 mov     [rsp+5F8h+var_5E0], rcx
.text:0000000000006729                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:000000000000672E                 call    _strcmp
.text:0000000000006733                 test    eax, eax
.text:0000000000006735                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:000000000000673A                 mov     rcx, [rsp+5F8h+var_5E0]
.text:000000000000673F                 mov     r11, [rsp+5F8h+var_5D8]
.text:0000000000006744                 jz      loc_5679
.text:000000000000674A                 add     rcx, 10h
.text:000000000000674E                 mov     rsi, [rcx]
.text:0000000000006751                 test    rsi, rsi
.text:0000000000006754                 jnz     short loc_671C
.text:0000000000006756                 lea     rdx, [r14+rbp-1]
.text:000000000000675B                 cmp     byte ptr [rdx], 53h ; 'S'
.text:000000000000675E                 jz      loc_6841
.text:0000000000006764
.text:0000000000006764 loc_6764:                               ; CODE XREF: yyparse+1B49↓j
.text:0000000000006764                 lea     rcx, relative_time_table
.text:000000000000676B                 lea     rsi, aTomorrow  ; "TOMORROW"
.text:0000000000006772
.text:0000000000006772 loc_6772:                               ; CODE XREF: yyparse+1A5A↓j
.text:0000000000006772                 mov     rdi, r14        ; s1
.text:0000000000006775                 mov     [rsp+5F8h+var_5D8], r11
.text:000000000000677A                 mov     [rsp+5F8h+var_5E0], rcx
.text:000000000000677F                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000006784                 call    _strcmp
.text:0000000000006789                 test    eax, eax
.text:000000000000678B                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000006790                 mov     rcx, [rsp+5F8h+var_5E0]
.text:0000000000006795                 mov     r11, [rsp+5F8h+var_5D8]
.text:000000000000679A                 jz      loc_5679
.text:00000000000067A0                 add     rcx, 10h
.text:00000000000067A4                 mov     rsi, [rcx]
.text:00000000000067A7                 test    rsi, rsi
.text:00000000000067AA                 jnz     short loc_6772
.text:00000000000067AC                 sub     rbp, 1
.text:00000000000067B0                 movzx   edx, [rsp+5F8h+s1]
.text:00000000000067B8                 jz      loc_692C
.text:00000000000067BE
.text:00000000000067BE loc_67BE:                               ; CODE XREF: yyparse+1BFE↓j
.text:00000000000067BE                 mov     rax, r14
.text:00000000000067C1                 mov     rdx, r14
.text:00000000000067C4
.text:00000000000067C4 loc_67C4:                               ; CODE XREF: yyparse+1A92↓j
.text:00000000000067C4                 movzx   ecx, byte ptr [rax]
.text:00000000000067C7                 test    cl, cl
.text:00000000000067C9                 mov     [rdx], cl
.text:00000000000067CB                 jz      loc_68A8
.text:00000000000067D1                 cmp     byte ptr [rax], 2Eh ; '.'
.text:00000000000067D4                 jz      loc_689E
.text:00000000000067DA                 add     rdx, 1
.text:00000000000067DE
.text:00000000000067DE loc_67DE:                               ; CODE XREF: yyparse+1B53↓j
.text:00000000000067DE                 add     rax, 1
.text:00000000000067E2                 jmp     short loc_67C4
.text:00000000000067E2 ; ---------------------------------------------------------------------------
.text:00000000000067E4                 align 8
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: yyparse+1923↑j
.text:00000000000067E8                 mov     rdi, r14        ; s1
.text:00000000000067EB                 call    _strcmp
.text:00000000000067F0                 test    eax, eax
.text:00000000000067F2                 setz    al
.text:00000000000067F5                 jmp     loc_668B
.text:00000000000067FA ; ---------------------------------------------------------------------------
.text:00000000000067FA
.text:00000000000067FA loc_67FA:                               ; CODE XREF: yyparse+193D↑j
.text:00000000000067FA                 movsxd  rbx, dword ptr [rsp+5F8h+var_5F0]
.text:00000000000067FF                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000006804                 mov     rcx, rbp
.text:0000000000006807                 mov     r11, [rsp+5F8h+var_5E0]
.text:000000000000680C                 jmp     loc_5679
.text:0000000000006811 ; ---------------------------------------------------------------------------
.text:0000000000006811
.text:0000000000006811 loc_6811:                               ; CODE XREF: yyparse+18F4↑j
.text:0000000000006811                 xor     r9d, r9d
.text:0000000000006814                 cmp     [rsp+5F8h+var_55], 2Eh ; '.'
.text:000000000000681C                 setz    r9b
.text:0000000000006820                 jmp     loc_664A
.text:0000000000006825 ; ---------------------------------------------------------------------------
.text:0000000000006825
.text:0000000000006825 loc_6825:                               ; CODE XREF: yyparse+198↑j
.text:0000000000006825                 mov     r8d, 1
.text:000000000000682B                 jmp     loc_4EEE
.text:0000000000006830 ; ---------------------------------------------------------------------------
.text:0000000000006830
.text:0000000000006830 loc_6830:                               ; CODE XREF: yyparse+5EE↑j
.text:0000000000006830                 call    ___stack_chk_fail
.text:0000000000006835 ; ---------------------------------------------------------------------------
.text:0000000000006835
.text:0000000000006835 loc_6835:                               ; CODE XREF: yyparse+19B8↑j
.text:0000000000006835                 lea     rcx, dst_table
.text:000000000000683C                 jmp     loc_5679
.text:0000000000006841 ; ---------------------------------------------------------------------------
.text:0000000000006841
.text:0000000000006841 loc_6841:                               ; CODE XREF: yyparse+1A0E↑j
.text:0000000000006841                 lea     rcx, time_units_table
.text:0000000000006848                 lea     rsi, aYear      ; "YEAR"
.text:000000000000684F                 mov     byte ptr [rdx], 0
.text:0000000000006852
.text:0000000000006852 loc_6852:                               ; CODE XREF: yyparse+1B44↓j
.text:0000000000006852                 mov     rdi, r14        ; s1
.text:0000000000006855                 mov     [rsp+5F8h+var_5D0], r11
.text:000000000000685A                 mov     [rsp+5F8h+var_5D8], rcx
.text:000000000000685F                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:0000000000006864                 mov     [rsp+5F8h+var_5E0], rdx
.text:0000000000006869                 call    _strcmp
.text:000000000000686E                 test    eax, eax
.text:0000000000006870                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:0000000000006875                 mov     rcx, [rsp+5F8h+var_5D8]
.text:000000000000687A                 mov     r11, [rsp+5F8h+var_5D0]
.text:000000000000687F                 jz      loc_5679
.text:0000000000006885                 add     rcx, 10h
.text:0000000000006889                 mov     rsi, [rcx]
.text:000000000000688C                 mov     rdx, [rsp+5F8h+var_5E0]
.text:0000000000006891                 test    rsi, rsi
.text:0000000000006894                 jnz     short loc_6852
.text:0000000000006896                 mov     byte ptr [rdx], 53h ; 'S'
.text:0000000000006899                 jmp     loc_6764
.text:000000000000689E ; ---------------------------------------------------------------------------
.text:000000000000689E
.text:000000000000689E loc_689E:                               ; CODE XREF: yyparse+1A84↑j
.text:000000000000689E                 mov     byte ptr [rsp+5F8h+var_5F0], 1
.text:00000000000068A3                 jmp     loc_67DE
.text:00000000000068A8 ; ---------------------------------------------------------------------------
.text:00000000000068A8
.text:00000000000068A8 loc_68A8:                               ; CODE XREF: yyparse+1A7B↑j
.text:00000000000068A8                 cmp     byte ptr [rsp+5F8h+var_5F0], 0
.text:00000000000068AD                 jz      short loc_68DA
.text:00000000000068AF                 mov     rdi, r11
.text:00000000000068B2                 mov     rsi, r14
.text:00000000000068B5                 mov     dword ptr [rsp+5F8h+var_5E8], r8d
.text:00000000000068BA                 mov     [rsp+5F8h+var_5F0], r11
.text:00000000000068BF                 call    lookup_zone
.text:00000000000068C4                 test    rax, rax
.text:00000000000068C7                 mov     rcx, rax
.text:00000000000068CA                 mov     r11, [rsp+5F8h+var_5F0]
.text:00000000000068CF                 mov     r8d, dword ptr [rsp+5F8h+var_5E8]
.text:00000000000068D4                 jnz     loc_5679
.text:00000000000068DA
.text:00000000000068DA loc_68DA:                               ; CODE XREF: yyparse+1B5D↑j
.text:00000000000068DA                 cmp     byte ptr [r11+0D9h], 0
.text:00000000000068E2                 jz      loc_6387
.text:00000000000068E8                 lea     rsi, aErrorUnknownWo ; "error: unknown word '%s'\n"
.text:00000000000068EF                 mov     edx, 5          ; category
.text:00000000000068F4                 xor     edi, edi        ; domainname
.text:00000000000068F6                 mov     [rsp+5F8h+var_5E8], r11
.text:00000000000068FB                 mov     dword ptr [rsp+5F8h+var_5F0], r8d
.text:0000000000006900                 call    _dcgettext
.text:0000000000006905                 mov     rsi, r14
.text:0000000000006908                 mov     rdi, rax
.text:000000000000690B                 xor     eax, eax
.text:000000000000690D                 call    dbg_printf
.text:0000000000006912                 mov     eax, 2
.text:0000000000006917                 mov     r9d, 3Fh ; '?'
.text:000000000000691D                 mov     r8d, dword ptr [rsp+5F8h+var_5F0]
.text:0000000000006922                 mov     r11, [rsp+5F8h+var_5E8]
.text:0000000000006927                 jmp     loc_542E
.text:000000000000692C ; ---------------------------------------------------------------------------
.text:000000000000692C
.text:000000000000692C loc_692C:                               ; CODE XREF: yyparse+1A68↑j
.text:000000000000692C                 lea     rcx, military_table
.text:0000000000006933                 lea     rax, aA         ; "A"
.text:000000000000693A
.text:000000000000693A loc_693A:                               ; CODE XREF: yyparse+1BFC↓j
.text:000000000000693A                 cmp     [rax], dl
.text:000000000000693C                 jz      loc_5679
.text:0000000000006942                 add     rcx, 10h
.text:0000000000006946                 mov     rax, [rcx]
.text:0000000000006949                 test    rax, rax
.text:000000000000694C                 jnz     short loc_693A
.text:000000000000694E                 jmp     loc_67BE
.text:000000000000694E ; } // starts at 4D50
.text:000000000000694E yyparse         endp
.text:000000000000694E
.text:000000000000694E ; ---------------------------------------------------------------------------
.text:0000000000006953                 align 20h
.text:0000000000006960
.text:0000000000006960 ; =============== S U B R O U T I N E =======================================
.text:0000000000006960
.text:0000000000006960
.text:0000000000006960                 public parse_datetime2
.text:0000000000006960 parse_datetime2 proc near               ; CODE XREF: parse_datetime+47↓p
.text:0000000000006960
.text:0000000000006960 var_488         = qword ptr -488h
.text:0000000000006960 ptr             = qword ptr -480h
.text:0000000000006960 src             = qword ptr -478h
.text:0000000000006960 var_470         = qword ptr -470h
.text:0000000000006960 var_468         = qword ptr -468h
.text:0000000000006960 timer           = qword ptr -460h
.text:0000000000006960 var_458         = qword ptr -458h
.text:0000000000006960 var_450         = qword ptr -450h
.text:0000000000006960 var_448         = dword ptr -448h
.text:0000000000006960 var_444         = dword ptr -444h
.text:0000000000006960 var_440         = qword ptr -440h
.text:0000000000006960 var_438         = dword ptr -438h
.text:0000000000006960 var_434         = dword ptr -434h
.text:0000000000006960 var_430         = dword ptr -430h
.text:0000000000006960 var_42C         = dword ptr -42Ch
.text:0000000000006960 var_428         = timespec ptr -428h
.text:0000000000006960 var_418         = qword ptr -418h
.text:0000000000006960 var_410         = dword ptr -410h
.text:0000000000006960 var_40C         = dword ptr -40Ch
.text:0000000000006960 var_408         = dword ptr -408h
.text:0000000000006960 var_404         = dword ptr -404h
.text:0000000000006960 var_400         = dword ptr -400h
.text:0000000000006960 var_3F8         = dword ptr -3F8h
.text:0000000000006960 var_3F0         = qword ptr -3F0h
.text:0000000000006960 var_3D8         = dword ptr -3D8h
.text:0000000000006960 var_3D4         = dword ptr -3D4h
.text:0000000000006960 var_3D0         = dword ptr -3D0h
.text:0000000000006960 var_3CC         = dword ptr -3CCh
.text:0000000000006960 var_3C8         = dword ptr -3C8h
.text:0000000000006960 var_3C4         = dword ptr -3C4h
.text:0000000000006960 var_3B8         = dword ptr -3B8h
.text:0000000000006960 var_398         = dword ptr -398h
.text:0000000000006960 var_394         = dword ptr -394h
.text:0000000000006960 var_390         = dword ptr -390h
.text:0000000000006960 var_38C         = dword ptr -38Ch
.text:0000000000006960 var_388         = dword ptr -388h
.text:0000000000006960 var_384         = dword ptr -384h
.text:0000000000006960 var_378         = dword ptr -378h
.text:0000000000006960 var_368         = qword ptr -368h
.text:0000000000006960 tp              = tm ptr -358h
.text:0000000000006960 var_318         = byte ptr -318h
.text:0000000000006960 var_2F8         = dword ptr -2F8h
.text:0000000000006960 var_2F0         = dword ptr -2F0h
.text:0000000000006960 var_2E8         = qword ptr -2E8h
.text:0000000000006960 var_2D8         = qword ptr -2D8h
.text:0000000000006960 var_2D0         = qword ptr -2D0h
.text:0000000000006960 var_2C8         = dword ptr -2C8h
.text:0000000000006960 var_2C4         = dword ptr -2C4h
.text:0000000000006960 var_2C0         = dword ptr -2C0h
.text:0000000000006960 var_2BC         = dword ptr -2BCh
.text:0000000000006960 var_2B0         = qword ptr -2B0h
.text:0000000000006960 var_2A8         = qword ptr -2A8h
.text:0000000000006960 var_2A0         = qword ptr -2A0h
.text:0000000000006960 var_298         = qword ptr -298h
.text:0000000000006960 var_290         = qword ptr -290h
.text:0000000000006960 var_288         = qword ptr -288h
.text:0000000000006960 var_280         = xmmword ptr -280h
.text:0000000000006960 var_270         = qword ptr -270h
.text:0000000000006960 var_268         = qword ptr -268h
.text:0000000000006960 var_260         = qword ptr -260h
.text:0000000000006960 var_258         = qword ptr -258h
.text:0000000000006960 var_250         = qword ptr -250h
.text:0000000000006960 var_248         = qword ptr -248h
.text:0000000000006960 var_240         = dword ptr -240h
.text:0000000000006960 var_238         = byte ptr -238h
.text:0000000000006960 var_237         = byte ptr -237h
.text:0000000000006960 var_230         = qword ptr -230h
.text:0000000000006960 var_228         = qword ptr -228h
.text:0000000000006960 var_220         = qword ptr -220h
.text:0000000000006960 var_218         = qword ptr -218h
.text:0000000000006960 var_210         = qword ptr -210h
.text:0000000000006960 var_208         = qword ptr -208h
.text:0000000000006960 var_200         = byte ptr -200h
.text:0000000000006960 var_1FF         = byte ptr -1FFh
.text:0000000000006960 var_1FE         = byte ptr -1FEh
.text:0000000000006960 var_1FD         = byte ptr -1FDh
.text:0000000000006960 var_1FC         = byte ptr -1FCh
.text:0000000000006960 var_1FB         = byte ptr -1FBh
.text:0000000000006960 var_1FA         = byte ptr -1FAh
.text:0000000000006960 var_1F9         = byte ptr -1F9h
.text:0000000000006960 var_1F8         = byte ptr -1F8h
.text:0000000000006960 s1              = qword ptr -1F0h
.text:0000000000006960 var_1E8         = dword ptr -1E8h
.text:0000000000006960 var_1E4         = dword ptr -1E4h
.text:0000000000006960 s2              = qword ptr -1E0h
.text:0000000000006960 var_1D8         = dword ptr -1D8h
.text:0000000000006960 var_1D4         = dword ptr -1D4h
.text:0000000000006960 var_1D0         = qword ptr -1D0h
.text:0000000000006960 var_1B5         = byte ptr -1B5h
.text:0000000000006960 var_1A8         = byte ptr -1A8h
.text:0000000000006960 var_188         = byte ptr -188h
.text:0000000000006960 var_118         = byte ptr -118h
.text:0000000000006960 var_A8          = word ptr -0A8h
.text:0000000000006960 var_A6          = byte ptr -0A6h
.text:0000000000006960 var_A5          = byte ptr -0A5h
.text:0000000000006960 var_40          = qword ptr -40h
.text:0000000000006960
.text:0000000000006960 ; __unwind {
.text:0000000000006960                 push    r15
.text:0000000000006962                 push    r14
.text:0000000000006964                 mov     r14, rdx
.text:0000000000006967                 push    r13
.text:0000000000006969                 push    r12
.text:000000000000696B                 push    rbp
.text:000000000000696C                 push    rbx
.text:000000000000696D                 mov     rbp, rsi
.text:0000000000006970                 sub     rsp, 458h
.text:0000000000006977                 mov     [rsp+488h+timer], rdi
.text:000000000000697C                 mov     rdi, rsi        ; s
.text:000000000000697F                 mov     dword ptr [rsp+488h+var_468], ecx
.text:0000000000006983                 mov     rax, fs:28h
.text:000000000000698C                 mov     [rsp+488h+var_40], rax
.text:0000000000006994                 xor     eax, eax
.text:0000000000006996                 mov     [rsp+488h+var_488], r8
.text:000000000000699A                 mov     [rsp+488h+src], r9
.text:000000000000699F                 call    _strlen
.text:00000000000069A4                 test    r14, r14
.text:00000000000069A7                 mov     [rsp+488h+var_458], rax
.text:00000000000069AC                 jz      loc_6F70
.text:00000000000069B2
.text:00000000000069B2 loc_69B2:                               ; CODE XREF: parse_datetime2+61D↓j
.text:00000000000069B2                 mov     rax, [r14+8]
.text:00000000000069B6                 mov     rbx, [r14]
.text:00000000000069B9                 mov     [rsp+488h+var_470], rax
.text:00000000000069BE                 movzx   eax, byte ptr [rbp+0]
.text:00000000000069C2                 cmp     al, 20h ; ' '
.text:00000000000069C4                 ja      loc_7240
.text:00000000000069CA                 mov     rcx, 100003E00h
.text:00000000000069D4                 mov     r13, rbp
.text:00000000000069D7                 mov     esi, 1
.text:00000000000069DC                 bt      rcx, rax
.text:00000000000069E0                 mov     rdx, rcx
.text:00000000000069E3                 jb      short loc_69FB
.text:00000000000069E5                 jmp     short loc_6A09
.text:00000000000069E5 ; ---------------------------------------------------------------------------
.text:00000000000069E7                 align 10h
.text:00000000000069F0
.text:00000000000069F0 loc_69F0:                               ; CODE XREF: parse_datetime2+A7↓j
.text:00000000000069F0                 mov     rax, rsi
.text:00000000000069F3                 shl     rax, cl
.text:00000000000069F6                 test    rax, rdx
.text:00000000000069F9                 jz      short loc_6A09
.text:00000000000069FB
.text:00000000000069FB loc_69FB:                               ; CODE XREF: parse_datetime2+83↑j
.text:00000000000069FB                 add     r13, 1
.text:00000000000069FF                 movzx   ecx, byte ptr [r13+0]
.text:0000000000006A04                 cmp     cl, 20h ; ' '
.text:0000000000006A07                 jbe     short loc_69F0
.text:0000000000006A09
.text:0000000000006A09 loc_6A09:                               ; CODE XREF: parse_datetime2+85↑j
.text:0000000000006A09                                         ; parse_datetime2+99↑j ...
.text:0000000000006A09                 lea     rdi, aTz        ; "TZ=\""
.text:0000000000006A10                 mov     ecx, 4
.text:0000000000006A15                 mov     rsi, r13
.text:0000000000006A18                 repe cmpsb
.text:0000000000006A1A                 setnbe  al
.text:0000000000006A1D                 sbb     al, 0
.text:0000000000006A1F                 test    al, al
.text:0000000000006A21                 jnz     short loc_6A78
.text:0000000000006A23                 movzx   r12d, byte ptr [r13+4]
.text:0000000000006A28                 lea     rcx, [r13+4]
.text:0000000000006A2C                 test    r12b, r12b
.text:0000000000006A2F                 jz      short loc_6A78
.text:0000000000006A31                 mov     rdx, rcx
.text:0000000000006A34                 mov     eax, r12d
.text:0000000000006A37                 mov     edi, 1
.text:0000000000006A3C                 jmp     short loc_6A5B
.text:0000000000006A3C ; ---------------------------------------------------------------------------
.text:0000000000006A3E                 align 20h
.text:0000000000006A40
.text:0000000000006A40 loc_6A40:                               ; CODE XREF: parse_datetime2+FD↓j
.text:0000000000006A40                 cmp     al, 22h ; '"'
.text:0000000000006A42                 jz      loc_6E38
.text:0000000000006A48                 mov     rax, rdx
.text:0000000000006A4B
.text:0000000000006A4B loc_6A4B:                               ; CODE XREF: parse_datetime2+10A↓j
.text:0000000000006A4B                                         ; parse_datetime2+10F↓j
.text:0000000000006A4B                 lea     rdx, [rax+1]
.text:0000000000006A4F                 movzx   eax, byte ptr [rax+1]
.text:0000000000006A53                 add     rdi, 1          ; size
.text:0000000000006A57                 test    al, al
.text:0000000000006A59                 jz      short loc_6A78
.text:0000000000006A5B
.text:0000000000006A5B loc_6A5B:                               ; CODE XREF: parse_datetime2+DC↑j
.text:0000000000006A5B                 cmp     al, 5Ch ; '\'
.text:0000000000006A5D                 jnz     short loc_6A40
.text:0000000000006A5F                 lea     rax, [rdx+1]
.text:0000000000006A63                 movzx   edx, byte ptr [rdx+1]
.text:0000000000006A67                 cmp     dl, 5Ch ; '\'
.text:0000000000006A6A                 jz      short loc_6A4B
.text:0000000000006A6C                 cmp     dl, 22h ; '"'
.text:0000000000006A6F                 jz      short loc_6A4B
.text:0000000000006A71                 nop     dword ptr [rax+00000000h]
.text:0000000000006A78
.text:0000000000006A78 loc_6A78:                               ; CODE XREF: parse_datetime2+C1↑j
.text:0000000000006A78                                         ; parse_datetime2+CF↑j ...
.text:0000000000006A78                 mov     r15, [rsp+488h+var_488]
.text:0000000000006A7C                 lea     rdx, [rsp+488h+var_398]
.text:0000000000006A84                 mov     rsi, r14
.text:0000000000006A87                 mov     rdi, r15
.text:0000000000006A8A                 call    localtime_rz
.text:0000000000006A8F                 test    rax, rax
.text:0000000000006A92                 jz      loc_6E60
.text:0000000000006A98                 mov     [rsp+488h+ptr], 0
.text:0000000000006AA1
.text:0000000000006AA1 loc_6AA1:                               ; CODE XREF: parse_datetime2+5EA↓j
.text:0000000000006AA1                 cmp     byte ptr [r13+0], 0
.text:0000000000006AA6                 lea     rax, aUtc0+3    ; "0"
.text:0000000000006AAD                 mov     [rsp+488h+var_2A8], 0
.text:0000000000006AB9                 mov     [rsp+488h+var_2BC], 2
.text:0000000000006AC4                 mov     [rsp+488h+var_270], 0
.text:0000000000006AD0                 lea     r12, [rsp+488h+tp]
.text:0000000000006AD8                 mov     [rsp+488h+var_268], 0
.text:0000000000006AE4                 mov     [rsp+488h+var_260], 0
.text:0000000000006AF0                 mov     r14d, 76A700h
.text:0000000000006AF6                 mov     [rsp+488h+var_258], 0
.text:0000000000006B02                 mov     [rsp+488h+var_250], 0
.text:0000000000006B0E                 cmovz   r13, rax
.text:0000000000006B12                 movzx   eax, byte ptr [rsp+488h+var_468]
.text:0000000000006B17                 mov     [rsp+488h+var_248], 0
.text:0000000000006B23                 mov     [rsp+488h+var_2D8], r13
.text:0000000000006B2B                 movsxd  r13, dword ptr [rsp+488h+var_470]
.text:0000000000006B30                 mov     [rsp+488h+var_240], 0
.text:0000000000006B3B                 mov     [rsp+488h+var_238], 0
.text:0000000000006B43                 mov     [rsp+488h+var_1FF], al
.text:0000000000006B4A                 movsxd  rax, [rsp+488h+var_384]
.text:0000000000006B52                 mov     qword ptr [rsp+488h+var_280+8], r13
.text:0000000000006B5A                 and     [rsp+488h+var_1FF], 1
.text:0000000000006B62                 lea     r13, [rsp+488h+var_318]
.text:0000000000006B6A                 add     rax, 76Ch
.text:0000000000006B70                 mov     [rsp+488h+var_2B0], rax
.text:0000000000006B78                 mov     eax, [rsp+488h+var_388]
.text:0000000000006B7F                 add     eax, 1
.text:0000000000006B82                 cdqe
.text:0000000000006B84                 mov     [rsp+488h+var_2A0], rax
.text:0000000000006B8C                 movsxd  rax, [rsp+488h+var_38C]
.text:0000000000006B94                 mov     [rsp+488h+var_298], rax
.text:0000000000006B9C                 movsxd  rax, [rsp+488h+var_390]
.text:0000000000006BA4                 mov     [rsp+488h+var_290], rax
.text:0000000000006BAC                 movsxd  rax, [rsp+488h+var_394]
.text:0000000000006BB4                 mov     [rsp+488h+var_288], rax
.text:0000000000006BBC                 movsxd  rax, [rsp+488h+var_398]
.text:0000000000006BC4                 mov     qword ptr [rsp+488h+var_280], rax
.text:0000000000006BCC                 mov     eax, [rsp+488h+var_378]
.text:0000000000006BD3                 mov     [rsp+488h+var_3F8], eax
.text:0000000000006BDA                 mov     [rsp+488h+var_237], 0
.text:0000000000006BE2                 mov     rdx, [rsp+488h+var_368]
.text:0000000000006BEA                 mov     [rsp+488h+var_230], 0
.text:0000000000006BF6                 mov     [rsp+488h+var_228], 0
.text:0000000000006C02                 mov     [rsp+488h+var_210], 0
.text:0000000000006C0E                 mov     [rsp+488h+var_220], 0
.text:0000000000006C1A                 mov     [rsp+488h+var_218], 0
.text:0000000000006C26                 mov     [rsp+488h+var_208], 0
.text:0000000000006C32                 mov     [rsp+488h+var_200], 0
.text:0000000000006C3A                 mov     [rsp+488h+var_1FE], 0
.text:0000000000006C42                 mov     [rsp+488h+var_1FD], 0
.text:0000000000006C4A                 mov     [rsp+488h+var_1FB], 0
.text:0000000000006C52                 mov     [rsp+488h+var_1FC], 0
.text:0000000000006C5A                 mov     [rsp+488h+var_1FA], 0
.text:0000000000006C62                 mov     [rsp+488h+var_1F9], 0
.text:0000000000006C6A                 mov     [rsp+488h+var_1F8], 0
.text:0000000000006C72                 mov     [rsp+488h+s1], rdx
.text:0000000000006C7A                 mov     [rsp+488h+var_1E8], 10Dh
.text:0000000000006C85                 mov     [rsp+488h+var_1E4], eax
.text:0000000000006C8C                 mov     [rsp+488h+s2], 0
.text:0000000000006C98
.text:0000000000006C98 loc_6C98:                               ; CODE XREF: parse_datetime2+38A↓j
.text:0000000000006C98                 movsxd  rax, r14d
.text:0000000000006C9B                 add     rax, rbx
.text:0000000000006C9E                 jo      short loc_6CEC
.text:0000000000006CA0                 mov     rdx, r13
.text:0000000000006CA3                 mov     rsi, r12
.text:0000000000006CA6                 mov     rdi, r15
.text:0000000000006CA9                 mov     qword ptr [rsp+488h+tp.tm_sec], rax
.text:0000000000006CB1                 call    localtime_rz
.text:0000000000006CB6                 test    rax, rax
.text:0000000000006CB9                 jz      short loc_6CDC
.text:0000000000006CBB                 mov     rax, [rsp+488h+var_2E8]
.text:0000000000006CC3                 test    rax, rax
.text:0000000000006CC6                 jz      short loc_6CDC
.text:0000000000006CC8                 mov     edx, [rsp+488h+var_2F8]
.text:0000000000006CCF                 cmp     edx, [rsp+488h+var_1E4]
.text:0000000000006CD6                 jnz     loc_739E
.text:0000000000006CDC
.text:0000000000006CDC loc_6CDC:                               ; CODE XREF: parse_datetime2+359↑j
.text:0000000000006CDC                                         ; parse_datetime2+366↑j
.text:0000000000006CDC                 add     r14d, 76A700h
.text:0000000000006CE3                 cmp     r14d, 1DA9C00h
.text:0000000000006CEA                 jnz     short loc_6C98
.text:0000000000006CEC
.text:0000000000006CEC loc_6CEC:                               ; CODE XREF: parse_datetime2+33E↑j
.text:0000000000006CEC                                         ; parse_datetime2+A64↓j
.text:0000000000006CEC                 mov     rdi, [rsp+488h+s1] ; s1
.text:0000000000006CF4                 test    rdi, rdi
.text:0000000000006CF7                 jz      short loc_6D26
.text:0000000000006CF9                 mov     rsi, [rsp+488h+s2] ; s2
.text:0000000000006D01                 test    rsi, rsi
.text:0000000000006D04                 jz      short loc_6D26
.text:0000000000006D06                 call    _strcmp
.text:0000000000006D0B                 test    eax, eax
.text:0000000000006D0D                 jnz     short loc_6D26
.text:0000000000006D0F                 mov     [rsp+488h+var_1E4], 0FFFFFFFFh
.text:0000000000006D1A                 mov     [rsp+488h+s2], 0
.text:0000000000006D26
.text:0000000000006D26 loc_6D26:                               ; CODE XREF: parse_datetime2+397↑j
.text:0000000000006D26                                         ; parse_datetime2+3A4↑j ...
.text:0000000000006D26                 lea     r13, [rsp+488h+var_2D8]
.text:0000000000006D2E                 mov     rdi, r13
.text:0000000000006D31                 call    yyparse
.text:0000000000006D36                 test    eax, eax
.text:0000000000006D38                 jnz     loc_6DE8
.text:0000000000006D3E                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000006D46                 jnz     loc_6F88
.text:0000000000006D4C                 movzx   r12d, [rsp+488h+var_238]
.text:0000000000006D55                 test    r12b, r12b
.text:0000000000006D58                 jnz     loc_6F58
.text:0000000000006D5E                 mov     rax, [rsp+488h+var_230]
.text:0000000000006D66                 or      rax, [rsp+488h+var_210]
.text:0000000000006D6E                 or      rax, [rsp+488h+var_228]
.text:0000000000006D76                 mov     rdx, [rsp+488h+var_220]
.text:0000000000006D7E                 or      rax, [rsp+488h+var_218]
.text:0000000000006D86                 add     rdx, [rsp+488h+var_208]
.text:0000000000006D8E                 or      rax, rdx
.text:0000000000006D91                 cmp     rax, 1
.text:0000000000006D95                 jle     loc_73C9
.text:0000000000006D9B
.text:0000000000006D9B loc_6D9B:                               ; CODE XREF: parse_datetime2+92E↓j
.text:0000000000006D9B                                         ; parse_datetime2+972↓j ...
.text:0000000000006D9B                 xor     r12d, r12d
.text:0000000000006D9E
.text:0000000000006D9E loc_6D9E:                               ; CODE XREF: parse_datetime2+494↓j
.text:0000000000006D9E                                         ; parse_datetime2+4CF↓j ...
.text:0000000000006D9E                 cmp     r15, [rsp+488h+var_488]
.text:0000000000006DA2                 jz      short loc_6DAC
.text:0000000000006DA4                 mov     rdi, r15
.text:0000000000006DA7                 call    tzfree
.text:0000000000006DAC
.text:0000000000006DAC loc_6DAC:                               ; CODE XREF: parse_datetime2+442↑j
.text:0000000000006DAC                                         ; parse_datetime2+50C↓j ...
.text:0000000000006DAC                 mov     rdi, [rsp+488h+ptr] ; ptr
.text:0000000000006DB1                 call    _free
.text:0000000000006DB6                 mov     rbx, [rsp+488h+var_40]
.text:0000000000006DBE                 xor     rbx, fs:28h
.text:0000000000006DC7                 mov     eax, r12d
.text:0000000000006DCA                 jnz     loc_7ED0
.text:0000000000006DD0                 add     rsp, 458h
.text:0000000000006DD7                 pop     rbx
.text:0000000000006DD8                 pop     rbp
.text:0000000000006DD9                 pop     r12
.text:0000000000006DDB                 pop     r13
.text:0000000000006DDD                 pop     r14
.text:0000000000006DDF                 pop     r15
.text:0000000000006DE1                 retn
.text:0000000000006DE1 ; ---------------------------------------------------------------------------
.text:0000000000006DE2                 align 8
.text:0000000000006DE8
.text:0000000000006DE8 loc_6DE8:                               ; CODE XREF: parse_datetime2+3D8↑j
.text:0000000000006DE8                 movzx   r12d, [rsp+488h+var_1FF]
.text:0000000000006DF1                 test    r12b, r12b
.text:0000000000006DF4                 jz      short loc_6D9E
.text:0000000000006DF6                 add     rbp, [rsp+488h+var_458]
.text:0000000000006DFB                 mov     rbx, [rsp+488h+var_2D8]
.text:0000000000006E03                 mov     edx, 5          ; category
.text:0000000000006E08                 cmp     rbx, rbp
.text:0000000000006E0B                 jb      loc_7228
.text:0000000000006E11                 lea     rsi, aErrorParsingFa ; "error: parsing failed\n"
.text:0000000000006E18                 xor     edi, edi        ; domainname
.text:0000000000006E1A                 call    _dcgettext
.text:0000000000006E1F                 mov     rdi, rax
.text:0000000000006E22
.text:0000000000006E22 loc_6E22:                               ; CODE XREF: parse_datetime2+8D9↓j
.text:0000000000006E22                 mov     rsi, rbx
.text:0000000000006E25                 xor     eax, eax
.text:0000000000006E27                 xor     r12d, r12d
.text:0000000000006E2A                 call    dbg_printf
.text:0000000000006E2F                 jmp     loc_6D9E
.text:0000000000006E2F ; ---------------------------------------------------------------------------
.text:0000000000006E34                 align 8
.text:0000000000006E38
.text:0000000000006E38 loc_6E38:                               ; CODE XREF: parse_datetime2+E2↑j
.text:0000000000006E38                 cmp     rdi, 64h ; 'd'
.text:0000000000006E3C                 jle     short loc_6E78
.text:0000000000006E3E                 mov     [rsp+488h+var_450], rcx
.text:0000000000006E43                 call    _malloc
.text:0000000000006E48                 test    rax, rax
.text:0000000000006E4B                 mov     [rsp+488h+src], rax
.text:0000000000006E50                 mov     [rsp+488h+ptr], rax
.text:0000000000006E55                 mov     rcx, [rsp+488h+var_450]
.text:0000000000006E5A                 jnz     short loc_6E8E
.text:0000000000006E5C                 nop     dword ptr [rax+00h]
.text:0000000000006E60
.text:0000000000006E60 loc_6E60:                               ; CODE XREF: parse_datetime2+132↑j
.text:0000000000006E60                 mov     [rsp+488h+ptr], 0
.text:0000000000006E69                 xor     r12d, r12d
.text:0000000000006E6C                 jmp     loc_6DAC
.text:0000000000006E6C ; ---------------------------------------------------------------------------
.text:0000000000006E71                 align 8
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: parse_datetime2+4DC↑j
.text:0000000000006E78                 lea     rax, [rsp+488h+var_118]
.text:0000000000006E80                 mov     [rsp+488h+ptr], 0
.text:0000000000006E89                 mov     [rsp+488h+src], rax
.text:0000000000006E8E
.text:0000000000006E8E loc_6E8E:                               ; CODE XREF: parse_datetime2+4FA↑j
.text:0000000000006E8E                 cmp     r12b, 22h ; '"'
.text:0000000000006E92                 mov     rdx, [rsp+488h+src]
.text:0000000000006E97                 jz      short loc_6EC5
.text:0000000000006E99                 nop     dword ptr [rax+00000000h]
.text:0000000000006EA0
.text:0000000000006EA0 loc_6EA0:                               ; CODE XREF: parse_datetime2+563↓j
.text:0000000000006EA0                 xor     eax, eax
.text:0000000000006EA2                 cmp     r12b, 5Ch ; '\'
.text:0000000000006EA6                 setz    al
.text:0000000000006EA9                 add     rdx, 1
.text:0000000000006EAD                 add     rax, rcx
.text:0000000000006EB0                 movzx   r12d, byte ptr [rax+1]
.text:0000000000006EB5                 movzx   ecx, byte ptr [rax]
.text:0000000000006EB8                 cmp     r12b, 22h ; '"'
.text:0000000000006EBC                 mov     [rdx-1], cl
.text:0000000000006EBF                 lea     rcx, [rax+1]
.text:0000000000006EC3                 jnz     short loc_6EA0
.text:0000000000006EC5
.text:0000000000006EC5 loc_6EC5:                               ; CODE XREF: parse_datetime2+537↑j
.text:0000000000006EC5                 mov     rdi, [rsp+488h+src] ; src
.text:0000000000006ECA                 mov     byte ptr [rdx], 0
.text:0000000000006ECD                 xor     r12d, r12d
.text:0000000000006ED0                 mov     [rsp+488h+var_450], rcx
.text:0000000000006ED5                 call    tzalloc
.text:0000000000006EDA                 test    rax, rax
.text:0000000000006EDD                 mov     r15, rax
.text:0000000000006EE0                 jz      loc_6DAC
.text:0000000000006EE6                 mov     rcx, [rsp+488h+var_450]
.text:0000000000006EEB                 movzx   eax, byte ptr [rcx+1]
.text:0000000000006EEF                 lea     r13, [rcx+1]
.text:0000000000006EF3                 cmp     al, 20h ; ' '
.text:0000000000006EF5                 ja      short loc_6F31
.text:0000000000006EF7                 mov     rcx, 100003E00h
.text:0000000000006F01                 mov     esi, 1
.text:0000000000006F06                 bt      rcx, rax
.text:0000000000006F0A                 mov     rdx, rcx
.text:0000000000006F0D                 jb      short loc_6F23
.text:0000000000006F0F                 jmp     short loc_6F31
.text:0000000000006F0F ; ---------------------------------------------------------------------------
.text:0000000000006F11                 align 8
.text:0000000000006F18
.text:0000000000006F18 loc_6F18:                               ; CODE XREF: parse_datetime2+5CF↓j
.text:0000000000006F18                 mov     rax, rsi
.text:0000000000006F1B                 shl     rax, cl
.text:0000000000006F1E                 test    rax, rdx
.text:0000000000006F21                 jz      short loc_6F31
.text:0000000000006F23
.text:0000000000006F23 loc_6F23:                               ; CODE XREF: parse_datetime2+5AD↑j
.text:0000000000006F23                 add     r13, 1
.text:0000000000006F27                 movzx   ecx, byte ptr [r13+0]
.text:0000000000006F2C                 cmp     cl, 20h ; ' '
.text:0000000000006F2F                 jbe     short loc_6F18
.text:0000000000006F31
.text:0000000000006F31 loc_6F31:                               ; CODE XREF: parse_datetime2+595↑j
.text:0000000000006F31                                         ; parse_datetime2+5AF↑j ...
.text:0000000000006F31                 lea     rdx, [rsp+488h+var_398]
.text:0000000000006F39                 mov     rsi, r14
.text:0000000000006F3C                 mov     rdi, r15
.text:0000000000006F3F                 xor     r12d, r12d
.text:0000000000006F42                 call    localtime_rz
.text:0000000000006F47                 test    rax, rax
.text:0000000000006F4A                 jnz     loc_6AA1
.text:0000000000006F50                 jmp     loc_6D9E
.text:0000000000006F50 ; ---------------------------------------------------------------------------
.text:0000000000006F55                 align 8
.text:0000000000006F58
.text:0000000000006F58 loc_6F58:                               ; CODE XREF: parse_datetime2+3F8↑j
.text:0000000000006F58                 mov     rax, [rsp+488h+timer]
.text:0000000000006F5D                 movdqu  xmm0, [rsp+488h+var_280]
.text:0000000000006F66                 movups  xmmword ptr [rax], xmm0
.text:0000000000006F69                 jmp     loc_6D9E
.text:0000000000006F69 ; ---------------------------------------------------------------------------
.text:0000000000006F6E                 align 10h
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: parse_datetime2+4C↑j
.text:0000000000006F70                 lea     r14, [rsp+488h+var_428]
.text:0000000000006F75                 mov     rdi, r14        ; tp
.text:0000000000006F78                 call    gettime
.text:0000000000006F7D                 jmp     loc_69B2
.text:0000000000006F7D ; ---------------------------------------------------------------------------
.text:0000000000006F82                 align 8
.text:0000000000006F88
.text:0000000000006F88 loc_6F88:                               ; CODE XREF: parse_datetime2+3E6↑j
.text:0000000000006F88                 lea     rsi, aInputTimezone ; "input timezone: "
.text:0000000000006F8F                 mov     edx, 5          ; category
.text:0000000000006F94                 xor     edi, edi        ; domainname
.text:0000000000006F96                 call    _dcgettext
.text:0000000000006F9B                 mov     rdi, rax
.text:0000000000006F9E                 xor     eax, eax
.text:0000000000006FA0                 call    dbg_printf
.text:0000000000006FA5                 cmp     [rsp+488h+var_238], 0
.text:0000000000006FAD                 mov     edx, 5
.text:0000000000006FB2                 lea     rsi, aTimespecAlways ; "'@timespec' - always UTC"
.text:0000000000006FB9                 jnz     short loc_7020
.text:0000000000006FBB                 cmp     [rsp+488h+var_208], 0
.text:0000000000006FC4                 mov     edx, 5
.text:0000000000006FC9                 lea     rsi, aParsedDateTime ; "parsed date/time string"
.text:0000000000006FD0                 jnz     short loc_7020
.text:0000000000006FD2                 mov     rbx, [rsp+488h+src]
.text:0000000000006FD7                 test    rbx, rbx
.text:0000000000006FDA                 jz      short loc_7014
.text:0000000000006FDC                 cmp     [rsp+488h+var_488], r15
.text:0000000000006FE0                 jz      loc_747F
.text:0000000000006FE6                 lea     rsi, aTzSInDateStrin ; "TZ=\"%s\" in date string"
.text:0000000000006FED                 mov     edx, 5          ; category
.text:0000000000006FF2                 xor     edi, edi        ; domainname
.text:0000000000006FF4                 call    _dcgettext
.text:0000000000006FF9                 mov     rcx, rbx
.text:0000000000006FFC
.text:0000000000006FFC loc_6FFC:                               ; CODE XREF: parse_datetime2+B5E↓j
.text:0000000000006FFC                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000007003                 mov     rdx, rax
.text:0000000000007006                 mov     esi, 1
.text:000000000000700B                 xor     eax, eax
.text:000000000000700D                 call    ___fprintf_chk
.text:0000000000007012                 jmp     short loc_703D
.text:0000000000007014 ; ---------------------------------------------------------------------------
.text:0000000000007014
.text:0000000000007014 loc_7014:                               ; CODE XREF: parse_datetime2+67A↑j
.text:0000000000007014                 lea     rsi, aSystemDefault ; "system default"
.text:000000000000701B                 mov     edx, 5          ; category
.text:0000000000007020
.text:0000000000007020 loc_7020:                               ; CODE XREF: parse_datetime2+659↑j
.text:0000000000007020                                         ; parse_datetime2+670↑j ...
.text:0000000000007020                 xor     edi, edi        ; domainname
.text:0000000000007022                 call    _dcgettext
.text:0000000000007027                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:000000000000702E                 mov     rdx, rax
.text:0000000000007031                 mov     esi, 1
.text:0000000000007036                 xor     eax, eax
.text:0000000000007038                 call    ___fprintf_chk
.text:000000000000703D
.text:000000000000703D loc_703D:                               ; CODE XREF: parse_datetime2+6B2↑j
.text:000000000000703D                 cmp     [rsp+488h+var_220], 0
.text:0000000000007046                 mov     rax, [rsp+488h+var_208]
.text:000000000000704E                 jz      short loc_7090
.text:0000000000007050                 test    rax, rax
.text:0000000000007053                 jnz     loc_7356
.text:0000000000007059                 mov     r8d, [rsp+488h+var_2C4]
.text:0000000000007061                 mov     rsi, cs:stderr@@GLIBC_2_2_5
.text:0000000000007068                 test    r8d, r8d
.text:000000000000706B                 jle     short loc_70A0
.text:000000000000706D                 lea     rdi, aDst_0     ; ", dst"
.text:0000000000007074                 mov     rcx, rsi        ; s
.text:0000000000007077                 mov     edx, 5          ; n
.text:000000000000707C                 mov     esi, 1          ; size
.text:0000000000007081                 call    _fwrite
.text:0000000000007086                 mov     rax, [rsp+488h+var_208]
.text:000000000000708E                 xchg    ax, ax
.text:0000000000007090
.text:0000000000007090 loc_7090:                               ; CODE XREF: parse_datetime2+6EE↑j
.text:0000000000007090                 test    rax, rax
.text:0000000000007093                 jnz     loc_7356
.text:0000000000007099                 mov     rsi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:00000000000070A0
.text:00000000000070A0 loc_70A0:                               ; CODE XREF: parse_datetime2+70B↑j
.text:00000000000070A0                                         ; parse_datetime2+A2E↓j
.text:00000000000070A0                 mov     edi, 0Ah        ; c
.text:00000000000070A5                 call    _fputc
.text:00000000000070AA                 cmp     [rsp+488h+var_238], 0
.text:00000000000070B2                 movzx   r12d, [rsp+488h+var_1FF]
.text:00000000000070BB                 jz      loc_7248
.text:00000000000070C1                 mov     rax, [rsp+488h+timer]
.text:00000000000070C6                 movdqu  xmm0, [rsp+488h+var_280]
.text:00000000000070CF                 movups  xmmword ptr [rax], xmm0
.text:00000000000070D2
.text:00000000000070D2 loc_70D2:                               ; CODE XREF: parse_datetime2+1A64↓j
.text:00000000000070D2                                         ; parse_datetime2+1A76↓j ...
.text:00000000000070D2                 test    r12b, r12b
.text:00000000000070D5                 jz      loc_7393
.text:00000000000070DB                 mov     edx, 5
.text:00000000000070E0                 lea     rsi, aTimezoneSystem ; "timezone: system default\n"
.text:00000000000070E7                 cmp     [rsp+488h+src], 0
.text:00000000000070ED                 jz      loc_72F2
.text:00000000000070F3                 mov     rsi, [rsp+488h+src]
.text:00000000000070F8                 lea     rdi, aUtc0      ; "UTC0"
.text:00000000000070FF                 mov     ecx, 5
.text:0000000000007104                 mov     edx, 5          ; category
.text:0000000000007109                 repe cmpsb
.text:000000000000710B                 setnbe  al
.text:000000000000710E                 sbb     al, 0
.text:0000000000007110                 test    al, al
.text:0000000000007112                 jz      loc_72EB
.text:0000000000007118                 lea     rsi, aTimezoneTzSEnv ; "timezone: TZ=\"%s\" environment value\n"
.text:000000000000711F                 xor     edi, edi        ; domainname
.text:0000000000007121                 call    _dcgettext
.text:0000000000007126                 mov     rsi, [rsp+488h+src]
.text:000000000000712B                 mov     rdi, rax
.text:000000000000712E                 xor     eax, eax
.text:0000000000007130                 call    dbg_printf
.text:0000000000007135
.text:0000000000007135 loc_7135:                               ; CODE XREF: parse_datetime2+9A3↓j
.text:0000000000007135                 mov     r14, [rsp+488h+timer]
.text:000000000000713A                 lea     rsi, aFinalLd09dEpoc ; "final: %ld.%09d (epoch-seconds)\n"
.text:0000000000007141                 xor     edi, edi        ; domainname
.text:0000000000007143                 mov     edx, 5          ; category
.text:0000000000007148                 mov     rbx, [r14]
.text:000000000000714B                 mov     rbp, [r14+8]
.text:000000000000714F                 call    _dcgettext
.text:0000000000007154                 mov     rdi, rax
.text:0000000000007157                 xor     eax, eax
.text:0000000000007159                 mov     rsi, rbx
.text:000000000000715C                 lea     rbx, [rsp+488h+tp]
.text:0000000000007164                 mov     edx, ebp
.text:0000000000007166                 call    dbg_printf
.text:000000000000716B                 mov     rsi, rbx        ; tp
.text:000000000000716E                 mov     rdi, r14        ; timer
.text:0000000000007171                 call    _gmtime_r
.text:0000000000007176                 test    rax, rax
.text:0000000000007179                 jz      short loc_71B0
.text:000000000000717B                 lea     rdx, [rsp+488h+var_188]
.text:0000000000007183                 mov     rdi, rbx
.text:0000000000007186                 xor     esi, esi
.text:0000000000007188                 call    debug_strfdatetime_constprop_12
.text:000000000000718D                 lea     rsi, aFinalSUtc ; "final: %s (UTC)\n"
.text:0000000000007194                 mov     rbx, rax
.text:0000000000007197                 xor     edi, edi        ; domainname
.text:0000000000007199                 mov     edx, 5          ; category
.text:000000000000719E                 call    _dcgettext
.text:00000000000071A3                 mov     rsi, rbx
.text:00000000000071A6                 mov     rdi, rax
.text:00000000000071A9                 xor     eax, eax
.text:00000000000071AB                 call    dbg_printf
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: parse_datetime2+819↑j
.text:00000000000071B0                 lea     rbx, [rsp+488h+var_318]
.text:00000000000071B8                 mov     rsi, [rsp+488h+timer]
.text:00000000000071BD                 mov     rdi, r15
.text:00000000000071C0                 mov     rdx, rbx
.text:00000000000071C3                 call    localtime_rz
.text:00000000000071C8                 test    rax, rax
.text:00000000000071CB                 jz      loc_6D9E
.text:00000000000071D1                 mov     edi, [rsp+488h+var_2F0]
.text:00000000000071D8                 lea     rsi, [rsp+488h+var_1A8]
.text:00000000000071E0                 call    time_zone_str
.text:00000000000071E5                 lea     rdx, [rsp+488h+var_188]
.text:00000000000071ED                 xor     esi, esi
.text:00000000000071EF                 mov     rdi, rbx
.text:00000000000071F2                 mov     rbp, rax
.text:00000000000071F5                 call    debug_strfdatetime_constprop_12
.text:00000000000071FA                 lea     rsi, aFinalSUtcS ; "final: %s (UTC%s)\n"
.text:0000000000007201                 mov     rbx, rax
.text:0000000000007204                 xor     edi, edi        ; domainname
.text:0000000000007206                 mov     edx, 5          ; category
.text:000000000000720B                 call    _dcgettext
.text:0000000000007210                 mov     rdx, rbp
.text:0000000000007213                 mov     rdi, rax
.text:0000000000007216                 mov     rsi, rbx
.text:0000000000007219                 xor     eax, eax
.text:000000000000721B                 call    dbg_printf
.text:0000000000007220                 jmp     loc_6D9E
.text:0000000000007220 ; ---------------------------------------------------------------------------
.text:0000000000007225                 align 8
.text:0000000000007228
.text:0000000000007228 loc_7228:                               ; CODE XREF: parse_datetime2+4AB↑j
.text:0000000000007228                 lea     rsi, aErrorParsingFa_0 ; "error: parsing failed, stopped at '%s'"...
.text:000000000000722F                 xor     edi, edi        ; domainname
.text:0000000000007231                 call    _dcgettext
.text:0000000000007236                 mov     rdi, rax
.text:0000000000007239                 jmp     loc_6E22
.text:0000000000007239 ; ---------------------------------------------------------------------------
.text:000000000000723E                 align 20h
.text:0000000000007240
.text:0000000000007240 loc_7240:                               ; CODE XREF: parse_datetime2+64↑j
.text:0000000000007240                 mov     r13, rbp
.text:0000000000007243                 jmp     loc_6A09
.text:0000000000007248 ; ---------------------------------------------------------------------------
.text:0000000000007248
.text:0000000000007248 loc_7248:                               ; CODE XREF: parse_datetime2+75B↑j
.text:0000000000007248                 mov     rsi, [rsp+488h+var_210]
.text:0000000000007250                 mov     rcx, [rsp+488h+var_230]
.text:0000000000007258                 mov     rdx, [rsp+488h+var_208]
.text:0000000000007260                 add     rdx, [rsp+488h+var_220]
.text:0000000000007268                 mov     rax, rsi
.text:000000000000726B                 or      rax, rcx
.text:000000000000726E                 or      rax, [rsp+488h+var_228]
.text:0000000000007276                 or      rax, [rsp+488h+var_218]
.text:000000000000727E                 or      rax, rdx
.text:0000000000007281                 cmp     rax, 1
.text:0000000000007285                 jle     loc_73C9
.text:000000000000728B                 test    r12b, r12b
.text:000000000000728E                 jz      loc_6D9B
.text:0000000000007294                 cmp     rsi, 1
.text:0000000000007298                 jg      loc_733B
.text:000000000000729E
.text:000000000000729E loc_729E:                               ; CODE XREF: parse_datetime2+9F1↓j
.text:000000000000729E                 cmp     rcx, 1
.text:00000000000072A2                 jg      loc_7328
.text:00000000000072A8
.text:00000000000072A8 loc_72A8:                               ; CODE XREF: parse_datetime2+9D6↓j
.text:00000000000072A8                 cmp     [rsp+488h+var_228], 1
.text:00000000000072B1                 jg      short loc_7318
.text:00000000000072B3
.text:00000000000072B3 loc_72B3:                               ; CODE XREF: parse_datetime2+9C6↓j
.text:00000000000072B3                 cmp     [rsp+488h+var_218], 1
.text:00000000000072BC                 jg      short loc_7308
.text:00000000000072BE
.text:00000000000072BE loc_72BE:                               ; CODE XREF: parse_datetime2+9B6↓j
.text:00000000000072BE                 mov     rax, [rsp+488h+var_208]
.text:00000000000072C6                 add     rax, [rsp+488h+var_220]
.text:00000000000072CE                 cmp     rax, 1
.text:00000000000072D2                 jle     loc_6D9B
.text:00000000000072D8                 lea     rdi, aErrorSeenMulti ; "error: seen multiple time-zone parts\n"
.text:00000000000072DF                 xor     eax, eax
.text:00000000000072E1                 call    dbg_printf
.text:00000000000072E6                 jmp     loc_6D9B
.text:00000000000072EB ; ---------------------------------------------------------------------------
.text:00000000000072EB
.text:00000000000072EB loc_72EB:                               ; CODE XREF: parse_datetime2+7B2↑j
.text:00000000000072EB                 lea     rsi, aTimezoneUniver ; "timezone: Universal Time\n"
.text:00000000000072F2
.text:00000000000072F2 loc_72F2:                               ; CODE XREF: parse_datetime2+78D↑j
.text:00000000000072F2                 xor     edi, edi        ; domainname
.text:00000000000072F4                 call    _dcgettext
.text:00000000000072F9                 mov     rdi, rax
.text:00000000000072FC                 xor     eax, eax
.text:00000000000072FE                 call    dbg_printf
.text:0000000000007303                 jmp     loc_7135
.text:0000000000007308 ; ---------------------------------------------------------------------------
.text:0000000000007308
.text:0000000000007308 loc_7308:                               ; CODE XREF: parse_datetime2+95C↑j
.text:0000000000007308                 lea     rdi, aErrorSeenMulti_0 ; "error: seen multiple daylight-saving pa"...
.text:000000000000730F                 xor     eax, eax
.text:0000000000007311                 call    dbg_printf
.text:0000000000007316                 jmp     short loc_72BE
.text:0000000000007318 ; ---------------------------------------------------------------------------
.text:0000000000007318
.text:0000000000007318 loc_7318:                               ; CODE XREF: parse_datetime2+951↑j
.text:0000000000007318                 lea     rdi, aErrorSeenMulti_1 ; "error: seen multiple days parts\n"
.text:000000000000731F                 xor     eax, eax
.text:0000000000007321                 call    dbg_printf
.text:0000000000007326                 jmp     short loc_72B3
.text:0000000000007328 ; ---------------------------------------------------------------------------
.text:0000000000007328
.text:0000000000007328 loc_7328:                               ; CODE XREF: parse_datetime2+942↑j
.text:0000000000007328                 lea     rdi, aErrorSeenMulti_2 ; "error: seen multiple date parts\n"
.text:000000000000732F                 xor     eax, eax
.text:0000000000007331                 call    dbg_printf
.text:0000000000007336                 jmp     loc_72A8
.text:000000000000733B ; ---------------------------------------------------------------------------
.text:000000000000733B
.text:000000000000733B loc_733B:                               ; CODE XREF: parse_datetime2+938↑j
.text:000000000000733B                 lea     rdi, aErrorSeenMulti_3 ; "error: seen multiple time parts\n"
.text:0000000000007342                 xor     eax, eax
.text:0000000000007344                 call    dbg_printf
.text:0000000000007349                 mov     rcx, [rsp+488h+var_230]
.text:0000000000007351                 jmp     loc_729E
.text:0000000000007356 ; ---------------------------------------------------------------------------
.text:0000000000007356
.text:0000000000007356 loc_7356:                               ; CODE XREF: parse_datetime2+6F3↑j
.text:0000000000007356                                         ; parse_datetime2+733↑j
.text:0000000000007356                 mov     edi, [rsp+488h+var_2C0]
.text:000000000000735D                 lea     rsi, [rsp+488h+var_1A8]
.text:0000000000007365                 call    time_zone_str
.text:000000000000736A                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000007371                 lea     rdx, aS_1       ; " (%s)"
.text:0000000000007378                 mov     rcx, rax
.text:000000000000737B                 mov     esi, 1
.text:0000000000007380                 xor     eax, eax
.text:0000000000007382                 call    ___fprintf_chk
.text:0000000000007387                 mov     rsi, cs:stderr@@GLIBC_2_2_5
.text:000000000000738E                 jmp     loc_70A0
.text:0000000000007393 ; ---------------------------------------------------------------------------
.text:0000000000007393
.text:0000000000007393 loc_7393:                               ; CODE XREF: parse_datetime2+775↑j
.text:0000000000007393                 mov     r12d, 1
.text:0000000000007399                 jmp     loc_6D9E
.text:000000000000739E ; ---------------------------------------------------------------------------
.text:000000000000739E
.text:000000000000739E loc_739E:                               ; CODE XREF: parse_datetime2+376↑j
.text:000000000000739E                 mov     [rsp+488h+s2], rax
.text:00000000000073A6                 mov     [rsp+488h+var_1D8], 10Dh
.text:00000000000073B1                 mov     [rsp+488h+var_1D4], edx
.text:00000000000073B8                 mov     [rsp+488h+var_1D0], 0
.text:00000000000073C4                 jmp     loc_6CEC
.text:00000000000073C9 ; ---------------------------------------------------------------------------
.text:00000000000073C9
.text:00000000000073C9 loc_73C9:                               ; CODE XREF: parse_datetime2+435↑j
.text:00000000000073C9                                         ; parse_datetime2+925↑j
.text:00000000000073C9                 mov     rbp, [rsp+488h+var_2B0]
.text:00000000000073D1                 test    rbp, rbp
.text:00000000000073D4                 js      loc_7908
.text:00000000000073DA                 cmp     [rsp+488h+var_2A8], 2
.text:00000000000073E3                 jz      loc_7938
.text:00000000000073E9
.text:00000000000073E9 loc_73E9:                               ; CODE XREF: parse_datetime2+FF9↓j
.text:00000000000073E9                                         ; parse_datetime2+122E↓j
.text:00000000000073E9                 xor     ebx, ebx
.text:00000000000073EB                 cmp     rbp, 76Ch
.text:00000000000073F2                 lea     rax, [rbp-76Ch]
.text:00000000000073F9                 jnb     loc_7928
.text:00000000000073FF                 test    rax, rax
.text:0000000000007402                 jns     loc_791A
.text:0000000000007408
.text:0000000000007408 loc_7408:                               ; CODE XREF: parse_datetime2+FB4↓j
.text:0000000000007408                                         ; parse_datetime2+FBF↓j ...
.text:0000000000007408                 movsxd  rdx, eax
.text:000000000000740B                 mov     [rsp+488h+var_404], eax
.text:0000000000007412                 cmp     rax, rdx
.text:0000000000007415                 mov     edx, 1
.text:000000000000741A                 cmovnz  ebx, edx
.text:000000000000741D                 and     ebx, 1
.text:0000000000007420                 test    bl, bl
.text:0000000000007422                 jz      loc_74C3
.text:0000000000007428                 test    r12b, r12b
.text:000000000000742B                 jz      short loc_744D
.text:000000000000742D                 lea     rsi, aErrorOutOfRang ; "error: out-of-range year %ld\n"
.text:0000000000007434                 xor     edi, edi        ; domainname
.text:0000000000007436                 mov     edx, 5          ; category
.text:000000000000743B                 call    _dcgettext
.text:0000000000007440                 mov     rsi, rbp
.text:0000000000007443                 mov     rdi, rax
.text:0000000000007446                 xor     eax, eax
.text:0000000000007448                 call    dbg_printf
.text:000000000000744D
.text:000000000000744D loc_744D:                               ; CODE XREF: parse_datetime2+ACB↑j
.text:000000000000744D                 movzx   eax, [rsp+488h+var_1FF]
.text:0000000000007455
.text:0000000000007455 loc_7455:                               ; CODE XREF: parse_datetime2+B96↓j
.text:0000000000007455                                         ; parse_datetime2+BB6↓j
.text:0000000000007455                 test    al, al
.text:0000000000007457                 mov     edx, 5          ; category
.text:000000000000745C                 lea     rsi, aErrorYearMonth ; "error: year, month, or day overflow\n"
.text:0000000000007463                 jz      loc_6D9B
.text:0000000000007469
.text:0000000000007469 loc_7469:                               ; CODE XREF: parse_datetime2+1B42↓j
.text:0000000000007469                 xor     edi, edi        ; domainname
.text:000000000000746B                 call    _dcgettext
.text:0000000000007470                 mov     rdi, rax
.text:0000000000007473                 xor     eax, eax
.text:0000000000007475                 call    dbg_printf
.text:000000000000747A                 jmp     loc_6D9B
.text:000000000000747F ; ---------------------------------------------------------------------------
.text:000000000000747F
.text:000000000000747F loc_747F:                               ; CODE XREF: parse_datetime2+680↑j
.text:000000000000747F                 mov     rsi, [rsp+488h+src]
.text:0000000000007484                 lea     rdi, aUtc0      ; "UTC0"
.text:000000000000748B                 mov     ecx, 5
.text:0000000000007490                 mov     edx, 5          ; category
.text:0000000000007495                 repe cmpsb
.text:0000000000007497                 lea     rsi, aTzUtc0Environm ; "TZ=\"UTC0\" environment value or -u"
.text:000000000000749E                 setnbe  al
.text:00000000000074A1                 sbb     al, 0
.text:00000000000074A3                 test    al, al
.text:00000000000074A5                 jz      loc_7020
.text:00000000000074AB                 lea     rsi, aTzSEnvironment ; "TZ=\"%s\" environment value"
.text:00000000000074B2                 xor     edi, edi        ; domainname
.text:00000000000074B4                 call    _dcgettext
.text:00000000000074B9                 mov     rcx, [rsp+488h+src]
.text:00000000000074BE                 jmp     loc_6FFC
.text:00000000000074C3 ; ---------------------------------------------------------------------------
.text:00000000000074C3
.text:00000000000074C3 loc_74C3:                               ; CODE XREF: parse_datetime2+AC2↑j
.text:00000000000074C3                 mov     rax, [rsp+488h+var_2A0]
.text:00000000000074CB                 xor     edx, edx
.text:00000000000074CD                 add     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000074D1                 jo      loc_852A
.text:00000000000074D7
.text:00000000000074D7 loc_74D7:                               ; CODE XREF: parse_datetime2+1BCF↓j
.text:00000000000074D7                 movsxd  rcx, eax
.text:00000000000074DA                 mov     [rsp+488h+var_408], eax
.text:00000000000074E1                 cmp     rax, rcx
.text:00000000000074E4                 mov     ecx, 1
.text:00000000000074E9                 movzx   eax, [rsp+488h+var_1FF]
.text:00000000000074F1                 cmovnz  edx, ecx
.text:00000000000074F4                 test    edx, edx
.text:00000000000074F6                 jnz     loc_7455
.text:00000000000074FC                 mov     rdx, [rsp+488h+var_298]
.text:0000000000007504                 movsxd  rcx, edx
.text:0000000000007507                 mov     [rsp+488h+var_40C], edx
.text:000000000000750B                 cmp     rdx, rcx
.text:000000000000750E                 setnz   r12b
.text:0000000000007512                 movzx   r12d, r12b
.text:0000000000007516                 jnz     loc_7455
.text:000000000000751C                 cmp     [rsp+488h+var_210], 0
.text:0000000000007525                 jnz     loc_7B93
.text:000000000000752B                 cmp     [rsp+488h+var_237], 0
.text:0000000000007533                 jz      loc_7C42
.text:0000000000007539                 cmp     [rsp+488h+var_230], 0
.text:0000000000007542                 jnz     loc_7C42
.text:0000000000007548                 cmp     [rsp+488h+var_228], 0
.text:0000000000007551                 jz      loc_7B93
.text:0000000000007557                 test    al, al
.text:0000000000007559                 mov     [rsp+488h+var_418], 0
.text:0000000000007562                 mov     [rsp+488h+var_410], 0
.text:000000000000756A                 mov     qword ptr [rsp+488h+var_280+8], 0
.text:0000000000007576                 jnz     loc_7C63
.text:000000000000757C
.text:000000000000757C loc_757C:                               ; CODE XREF: parse_datetime2+12B6↓j
.text:000000000000757C                 mov     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:0000000000007587
.text:0000000000007587 loc_7587:                               ; CODE XREF: parse_datetime2+12B0↓j
.text:0000000000007587                 cmp     [rsp+488h+var_220], 0
.text:0000000000007590                 jnz     loc_7C1B
.text:0000000000007596                 mov     eax, [rsp+488h+var_3F8]
.text:000000000000759D
.text:000000000000759D loc_759D:                               ; CODE XREF: parse_datetime2+12C9↓j
.text:000000000000759D                 mov     edx, dword ptr [rsp+488h+var_418]
.text:00000000000075A1                 mov     [rsp+488h+var_3B8], eax
.text:00000000000075A8                 lea     rax, [rsp+488h+var_418]
.text:00000000000075AD                 mov     rdi, r15
.text:00000000000075B0                 mov     [rsp+488h+var_400], 0FFFFFFFFh
.text:00000000000075BB                 mov     rsi, rax
.text:00000000000075BE                 mov     rbp, rax
.text:00000000000075C1                 mov     [rsp+488h+var_470], rax
.text:00000000000075C6                 mov     [rsp+488h+var_3D8], edx
.text:00000000000075CD                 mov     edx, dword ptr [rsp+488h+var_418+4]
.text:00000000000075D1                 mov     [rsp+488h+var_3D4], edx
.text:00000000000075D8                 mov     edx, [rsp+488h+var_410]
.text:00000000000075DC                 mov     [rsp+488h+var_3D0], edx
.text:00000000000075E3                 mov     edx, [rsp+488h+var_40C]
.text:00000000000075E7                 mov     [rsp+488h+var_3CC], edx
.text:00000000000075EE                 mov     edx, [rsp+488h+var_408]
.text:00000000000075F5                 mov     [rsp+488h+var_3C8], edx
.text:00000000000075FC                 mov     edx, [rsp+488h+var_404]
.text:0000000000007603                 mov     [rsp+488h+var_3C4], edx
.text:000000000000760A                 call    mktime_z
.text:000000000000760F                 mov     ecx, [rsp+488h+var_400]
.text:0000000000007616                 mov     r14, rax
.text:0000000000007619                 test    ecx, ecx
.text:000000000000761B                 js      short loc_7635
.text:000000000000761D                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000007625                 mov     rsi, rbp
.text:0000000000007628                 call    mktime_ok_part_6
.text:000000000000762D                 test    al, al
.text:000000000000762F                 jnz     loc_7A58
.text:0000000000007635
.text:0000000000007635 loc_7635:                               ; CODE XREF: parse_datetime2+CBB↑j
.text:0000000000007635                 mov     rax, [rsp+488h+var_208]
.text:000000000000763D                 test    rax, rax
.text:0000000000007640                 mov     [rsp+488h+var_458], rax
.text:0000000000007645                 jnz     loc_795E
.text:000000000000764B
.text:000000000000764B loc_764B:                               ; CODE XREF: parse_datetime2+10F2↓j
.text:000000000000764B                                         ; parse_datetime2+1C1C↓j
.text:000000000000764B                 mov     r10d, [rsp+488h+var_3D8]
.text:0000000000007653                 mov     r9d, dword ptr [rsp+488h+var_418]
.text:0000000000007658                 mov     eax, [rsp+488h+var_404]
.text:000000000000765F                 mov     ebx, [rsp+488h+var_3D0]
.text:0000000000007666                 mov     esi, [rsp+488h+var_410]
.text:000000000000766A                 mov     edi, [rsp+488h+var_3CC]
.text:0000000000007671                 mov     edx, [rsp+488h+var_40C]
.text:0000000000007675                 mov     r11d, [rsp+488h+var_3C4]
.text:000000000000767D                 cmp     r10d, r9d
.text:0000000000007680                 mov     dword ptr [rsp+488h+timer], eax
.text:0000000000007684                 mov     r8d, [rsp+488h+var_3D4]
.text:000000000000768C                 mov     ecx, dword ptr [rsp+488h+var_418+4]
.text:0000000000007690                 mov     dword ptr [rsp+488h+var_450], ebx
.text:0000000000007694                 mov     [rsp+488h+var_448], esi
.text:0000000000007698                 mov     dword ptr [rsp+488h+src], edi
.text:000000000000769C                 mov     dword ptr [rsp+488h+var_468], edx
.text:00000000000076A0                 mov     r14d, [rsp+488h+var_3C8]
.text:00000000000076A8                 mov     ebp, [rsp+488h+var_408]
.text:00000000000076AF                 mov     [rsp+488h+var_444], r11d
.text:00000000000076B4                 movzx   eax, [rsp+488h+var_1FF]
.text:00000000000076BC                 jnz     loc_822D
.text:00000000000076C2                 cmp     r8d, ecx
.text:00000000000076C5                 jnz     loc_822D
.text:00000000000076CB                 cmp     edi, edx
.text:00000000000076CD                 jnz     loc_822D
.text:00000000000076D3                 cmp     ebx, esi
.text:00000000000076D5                 jz      loc_822D
.text:00000000000076DB                 cmp     r14d, ebp
.text:00000000000076DE                 jnz     loc_822D
.text:00000000000076E4                 mov     ebx, dword ptr [rsp+488h+timer]
.text:00000000000076E8                 cmp     r11d, ebx
.text:00000000000076EB                 jnz     loc_822D
.text:00000000000076F1                 test    al, al
.text:00000000000076F3                 jz      loc_6D9B
.text:00000000000076F9                 lea     rsi, aErrorInvalidDa ; "error: invalid date/time value:\n"
.text:0000000000007700                 mov     edx, 5          ; category
.text:0000000000007705                 xor     edi, edi        ; domainname
.text:0000000000007707                 lea     rbx, [rsp+488h+var_A8]
.text:000000000000770F                 call    _dcgettext
.text:0000000000007714                 mov     rdi, rax
.text:0000000000007717                 xor     eax, eax
.text:0000000000007719                 call    dbg_printf
.text:000000000000771E                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000007726                 mov     rdx, rbx
.text:0000000000007729                 mov     rsi, r13
.text:000000000000772C                 call    debug_strfdatetime_constprop_12
.text:0000000000007731                 lea     rsi, aUserProvidedTi ; "    user provided time: '%s'\n"
.text:0000000000007738                 mov     r12, rax
.text:000000000000773B                 mov     edx, 5          ; category
.text:0000000000007740                 xor     edi, edi        ; domainname
.text:0000000000007742                 call    _dcgettext
.text:0000000000007747                 mov     rsi, r12
.text:000000000000774A                 mov     rdi, rax
.text:000000000000774D                 xor     eax, eax
.text:000000000000774F                 call    dbg_printf
.text:0000000000007754                 mov     rdi, [rsp+488h+var_470]
.text:0000000000007759                 mov     rdx, rbx
.text:000000000000775C                 mov     rsi, r13
.text:000000000000775F                 call    debug_strfdatetime_constprop_12
.text:0000000000007764                 lea     rsi, aNormalizedTime ; "       normalized time: '%s'\n"
.text:000000000000776B                 mov     r12, rax
.text:000000000000776E                 mov     edx, 5          ; category
.text:0000000000007773                 xor     edi, edi        ; domainname
.text:0000000000007775                 call    _dcgettext
.text:000000000000777A                 mov     rsi, r12
.text:000000000000777D                 mov     rdi, rax
.text:0000000000007780                 xor     eax, eax
.text:0000000000007782                 call    dbg_printf
.text:0000000000007787                 lea     rsi, aUserProvidedTi+1Dh ; ""
.text:000000000000778E                 mov     r12d, 1
.text:0000000000007794                 mov     rax, rsi
.text:0000000000007797
.text:0000000000007797 loc_7797:                               ; CODE XREF: parse_datetime2+19AC↓j
.text:0000000000007797                 mov     r11d, [rsp+488h+var_448]
.text:000000000000779C                 cmp     dword ptr [rsp+488h+var_450], r11d
.text:00000000000077A1                 lea     rcx, aUserProvidedTi+1Dh ; ""
.text:00000000000077A8                 lea     rdx, asc_1023F+2 ; "--"
.text:00000000000077AF                 mov     r11d, dword ptr [rsp+488h+var_468]
.text:00000000000077B4                 lea     r9, asc_1023F   ; "----"
.text:00000000000077BB                 mov     r8, rcx
.text:00000000000077BE                 mov     rdi, rcx
.text:00000000000077C1                 cmovnz  r8, rdx
.text:00000000000077C5                 cmp     dword ptr [rsp+488h+src], r11d
.text:00000000000077CA                 mov     r11d, dword ptr [rsp+488h+timer]
.text:00000000000077CF                 cmovnz  rdi, rdx
.text:00000000000077D3                 cmp     r14d, ebp
.text:00000000000077D6                 cmovz   rdx, rcx
.text:00000000000077DA                 cmp     [rsp+488h+var_444], r11d
.text:00000000000077DF                 cmovz   r9, rcx
.text:00000000000077E3                 sub     rsp, 8
.text:00000000000077E7                 mov     ecx, 64h ; 'd'
.text:00000000000077EC                 push    rsi
.text:00000000000077ED                 push    rax
.text:00000000000077EE                 mov     esi, 64h ; 'd'
.text:00000000000077F3                 push    r8
.text:00000000000077F5                 lea     r8, a4s2s2s2s2s2s ; "                                 %4s %2"...
.text:00000000000077FC                 push    rdi
.text:00000000000077FD                 push    rdx
.text:00000000000077FE                 mov     rdi, rbx
.text:0000000000007801                 mov     edx, 1
.text:0000000000007806                 xor     eax, eax
.text:0000000000007808                 call    ___snprintf_chk
.text:000000000000780D                 add     rsp, 30h
.text:0000000000007811                 mov     eax, 34h ; '4'
.text:0000000000007816                 jmp     short loc_7822
.text:0000000000007818 ; ---------------------------------------------------------------------------
.text:0000000000007818
.text:0000000000007818 loc_7818:                               ; CODE XREF: parse_datetime2+EC6↓j
.text:0000000000007818                 sub     rax, 1
.text:000000000000781C                 cmp     byte ptr [rbx+rax], 20h ; ' '
.text:0000000000007820                 jnz     short loc_7828
.text:0000000000007822
.text:0000000000007822 loc_7822:                               ; CODE XREF: parse_datetime2+EB6↑j
.text:0000000000007822                 test    eax, eax
.text:0000000000007824                 mov     edx, eax
.text:0000000000007826                 jnz     short loc_7818
.text:0000000000007828
.text:0000000000007828 loc_7828:                               ; CODE XREF: parse_datetime2+EC0↑j
.text:0000000000007828                 movsxd  rax, edx
.text:000000000000782B                 lea     rdi, aS_2+7     ; "%s\n"
.text:0000000000007832                 mov     rsi, rbx
.text:0000000000007835                 mov     byte ptr [rsp+rax+488h+var_A8], 0
.text:000000000000783D                 xor     eax, eax
.text:000000000000783F                 call    dbg_printf
.text:0000000000007844                 lea     rsi, aPossibleReason ; "     possible reasons:\n"
.text:000000000000784B                 xor     edi, edi        ; domainname
.text:000000000000784D                 mov     edx, 5          ; category
.text:0000000000007852                 call    _dcgettext
.text:0000000000007857                 mov     rdi, rax
.text:000000000000785A                 xor     eax, eax
.text:000000000000785C                 call    dbg_printf
.text:0000000000007861                 test    r12d, r12d
.text:0000000000007864                 jz      short loc_7883
.text:0000000000007866                 lea     rsi, aNonExistingDue ; "       non-existing due to daylight-sav"...
.text:000000000000786D                 xor     edi, edi        ; domainname
.text:000000000000786F                 mov     edx, 5          ; category
.text:0000000000007874                 call    _dcgettext
.text:0000000000007879                 mov     rdi, rax
.text:000000000000787C                 xor     eax, eax
.text:000000000000787E                 call    dbg_printf
.text:0000000000007883
.text:0000000000007883 loc_7883:                               ; CODE XREF: parse_datetime2+F04↑j
.text:0000000000007883                 mov     ebx, dword ptr [rsp+488h+var_468]
.text:0000000000007887                 cmp     dword ptr [rsp+488h+src], ebx
.text:000000000000788B                 jz      short loc_78AF
.text:000000000000788D                 cmp     r14d, ebp
.text:0000000000007890                 jz      short loc_78AF
.text:0000000000007892                 lea     rsi, aInvalidDayMont ; "       invalid day/month combination;\n"
.text:0000000000007899                 xor     edi, edi        ; domainname
.text:000000000000789B                 mov     edx, 5          ; category
.text:00000000000078A0                 call    _dcgettext
.text:00000000000078A5                 mov     rdi, rax
.text:00000000000078A8                 xor     eax, eax
.text:00000000000078AA                 call    dbg_printf
.text:00000000000078AF
.text:00000000000078AF loc_78AF:                               ; CODE XREF: parse_datetime2+F2B↑j
.text:00000000000078AF                                         ; parse_datetime2+F30↑j
.text:00000000000078AF                 lea     rsi, aNumericValuesO ; "       numeric values overflow;\n"
.text:00000000000078B6                 mov     edx, 5          ; category
.text:00000000000078BB                 xor     edi, edi        ; domainname
.text:00000000000078BD                 call    _dcgettext
.text:00000000000078C2                 mov     rdi, rax
.text:00000000000078C5                 xor     eax, eax
.text:00000000000078C7                 call    dbg_printf
.text:00000000000078CC                 cmp     [rsp+488h+var_458], 0
.text:00000000000078D2                 mov     edx, 5          ; category
.text:00000000000078D7                 jz      loc_86B6
.text:00000000000078DD                 lea     rsi, aIncorrectTimez ; "incorrect timezone"
.text:00000000000078E4                 xor     edi, edi        ; domainname
.text:00000000000078E6                 call    _dcgettext
.text:00000000000078EB
.text:00000000000078EB loc_78EB:                               ; CODE XREF: parse_datetime2+1D64↓j
.text:00000000000078EB                 lea     rdi, aS_2       ; "       %s\n"
.text:00000000000078F2                 mov     rsi, rax
.text:00000000000078F5                 xor     eax, eax
.text:00000000000078F7                 call    dbg_printf
.text:00000000000078FC                 jmp     loc_6D9B
.text:00000000000078FC ; ---------------------------------------------------------------------------
.text:0000000000007901                 align 8
.text:0000000000007908
.text:0000000000007908 loc_7908:                               ; CODE XREF: parse_datetime2+A74↑j
.text:0000000000007908                 mov     rax, 0FFFFFFFFFFFFF894h
.text:000000000000790F                 xor     ebx, ebx
.text:0000000000007911                 sub     rax, rbp
.text:0000000000007914                 jno     loc_7408
.text:000000000000791A
.text:000000000000791A loc_791A:                               ; CODE XREF: parse_datetime2+AA2↑j
.text:000000000000791A                                         ; parse_datetime2+FD1↓j
.text:000000000000791A                 mov     ebx, 1
.text:000000000000791F                 jmp     loc_7408
.text:000000000000791F ; ---------------------------------------------------------------------------
.text:0000000000007924                 align 8
.text:0000000000007928
.text:0000000000007928 loc_7928:                               ; CODE XREF: parse_datetime2+A99↑j
.text:0000000000007928                 test    rax, rax
.text:000000000000792B                 jns     loc_7408
.text:0000000000007931                 jmp     short loc_791A
.text:0000000000007931 ; ---------------------------------------------------------------------------
.text:0000000000007933                 align 8
.text:0000000000007938
.text:0000000000007938 loc_7938:                               ; CODE XREF: parse_datetime2+A83↑j
.text:0000000000007938                 cmp     rbp, 44h ; 'D'
.text:000000000000793C                 mov     ebx, 76Ch
.text:0000000000007941                 mov     eax, 7D0h
.text:0000000000007946                 cmovle  rbx, rax
.text:000000000000794A                 add     rbx, rbp
.text:000000000000794D                 test    r12b, r12b
.text:0000000000007950                 jnz     loc_7B68
.text:0000000000007956                 mov     rbp, rbx
.text:0000000000007959                 jmp     loc_73E9
.text:000000000000795E ; ---------------------------------------------------------------------------
.text:000000000000795E
.text:000000000000795E loc_795E:                               ; CODE XREF: parse_datetime2+CE5↑j
.text:000000000000795E                 mov     edi, [rsp+488h+var_2C0]
.text:0000000000007965                 lea     rsi, [rsp+488h+var_A5]
.text:000000000000796D                 lea     rbp, [rsp+488h+var_A8]
.text:0000000000007975                 mov     [rsp+488h+var_A8], 5858h
.text:000000000000797F                 mov     [rsp+488h+var_A6], 58h ; 'X'
.text:0000000000007987                 call    time_zone_str
.text:000000000000798C                 mov     rdi, rbp        ; src
.text:000000000000798F                 call    tzalloc
.text:0000000000007994                 test    rax, rax
.text:0000000000007997                 mov     rdx, rax
.text:000000000000799A                 jz      loc_84A7
.text:00000000000079A0                 mov     eax, [rsp+488h+var_3D8]
.text:00000000000079A7                 mov     rsi, [rsp+488h+var_470]
.text:00000000000079AC                 mov     rdi, rdx
.text:00000000000079AF                 mov     [rsp+488h+var_468], rdx
.text:00000000000079B4                 mov     [rsp+488h+var_400], 0FFFFFFFFh
.text:00000000000079BF                 mov     dword ptr [rsp+488h+var_418], eax
.text:00000000000079C3                 mov     eax, [rsp+488h+var_3D4]
.text:00000000000079CA                 mov     dword ptr [rsp+488h+var_418+4], eax
.text:00000000000079CE                 mov     eax, [rsp+488h+var_3D0]
.text:00000000000079D5                 mov     [rsp+488h+var_410], eax
.text:00000000000079D9                 mov     eax, [rsp+488h+var_3CC]
.text:00000000000079E0                 mov     [rsp+488h+var_40C], eax
.text:00000000000079E4                 mov     eax, [rsp+488h+var_3C8]
.text:00000000000079EB                 mov     [rsp+488h+var_408], eax
.text:00000000000079F2                 mov     eax, [rsp+488h+var_3C4]
.text:00000000000079F9                 mov     [rsp+488h+var_404], eax
.text:0000000000007A00                 mov     eax, [rsp+488h+var_3B8]
.text:0000000000007A07                 mov     [rsp+488h+var_3F8], eax
.text:0000000000007A0E                 call    mktime_z
.text:0000000000007A13                 cmp     [rsp+488h+var_400], 0
.text:0000000000007A1B                 mov     r14, rax
.text:0000000000007A1E                 mov     rdx, [rsp+488h+var_468]
.text:0000000000007A23                 js      loc_8574
.text:0000000000007A29                 mov     rsi, [rsp+488h+var_470]
.text:0000000000007A2E                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000007A36                 mov     [rsp+488h+var_468], rdx
.text:0000000000007A3B                 call    mktime_ok_part_6
.text:0000000000007A40                 mov     rdx, [rsp+488h+var_468]
.text:0000000000007A45                 mov     ebp, eax
.text:0000000000007A47                 mov     rdi, rdx
.text:0000000000007A4A                 call    tzfree
.text:0000000000007A4F                 test    bpl, bpl
.text:0000000000007A52                 jz      loc_764B
.text:0000000000007A58
.text:0000000000007A58 loc_7A58:                               ; CODE XREF: parse_datetime2+CCF↑j
.text:0000000000007A58                 cmp     [rsp+488h+var_228], 0
.text:0000000000007A61                 jz      loc_7CF7
.text:0000000000007A67                 cmp     [rsp+488h+var_230], 0
.text:0000000000007A70                 jnz     loc_7E3E
.text:0000000000007A76                 mov     rax, [rsp+488h+var_2D0]
.text:0000000000007A7E                 test    rax, rax
.text:0000000000007A81                 jle     short loc_7A98
.text:0000000000007A83                 xor     r12d, r12d
.text:0000000000007A86                 mov     esi, [rsp+488h+var_2C8]
.text:0000000000007A8D                 cmp     [rsp+488h+var_400], esi
.text:0000000000007A94                 setnz   r12b
.text:0000000000007A98
.text:0000000000007A98 loc_7A98:                               ; CODE XREF: parse_datetime2+1121↑j
.text:0000000000007A98                 sub     rax, r12
.text:0000000000007A9B                 imul    rcx, rax, 7
.text:0000000000007A9F                 jo      short loc_7AEA
.text:0000000000007AA1                 mov     eax, [rsp+488h+var_2C8]
.text:0000000000007AA8                 sub     eax, [rsp+488h+var_400]
.text:0000000000007AAF                 mov     esi, 7
.text:0000000000007AB4                 add     eax, 7
.text:0000000000007AB7                 cdq
.text:0000000000007AB8                 idiv    esi
.text:0000000000007ABA                 movsxd  rax, edx
.text:0000000000007ABD                 add     rax, rcx
.text:0000000000007AC0                 jo      short loc_7AEA
.text:0000000000007AC2                 movsxd  rdx, [rsp+488h+var_40C]
.text:0000000000007AC7                 add     rax, rdx
.text:0000000000007ACA                 seto    dl
.text:0000000000007ACD                 movsxd  rcx, eax
.text:0000000000007AD0                 mov     [rsp+488h+var_40C], eax
.text:0000000000007AD4                 cmp     rax, rcx
.text:0000000000007AD7                 movzx   edx, dl
.text:0000000000007ADA                 mov     ecx, 1
.text:0000000000007ADF                 cmovnz  edx, ecx
.text:0000000000007AE2                 test    edx, edx
.text:0000000000007AE4                 jz      loc_7C73
.text:0000000000007AEA
.text:0000000000007AEA loc_7AEA:                               ; CODE XREF: parse_datetime2+113F↑j
.text:0000000000007AEA                                         ; parse_datetime2+1160↑j ...
.text:0000000000007AEA                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000007AF2                 jz      loc_6D9B
.text:0000000000007AF8                 mov     rdi, [rsp+488h+var_470]
.text:0000000000007AFD                 lea     rdx, [rsp+488h+var_188]
.text:0000000000007B05                 mov     rsi, r13
.text:0000000000007B08                 call    debug_strfdatetime_constprop_12
.text:0000000000007B0D                 lea     rsi, [rsp+488h+var_A8]
.text:0000000000007B15                 mov     r14d, [rsp+488h+var_2C8]
.text:0000000000007B1D                 mov     rbp, [rsp+488h+var_2D0]
.text:0000000000007B25                 mov     rdi, r13
.text:0000000000007B28                 mov     r12, rax
.text:0000000000007B2B                 call    str_days_constprop_13
.text:0000000000007B30                 lea     rsi, aErrorDaySDayOr ; "error: day '%s' (day ordinal=%ld number"...
.text:0000000000007B37                 mov     rbx, rax
.text:0000000000007B3A                 xor     edi, edi        ; domainname
.text:0000000000007B3C                 mov     edx, 5          ; category
.text:0000000000007B41                 call    _dcgettext
.text:0000000000007B46                 mov     r8, r12
.text:0000000000007B49                 mov     rdi, rax
.text:0000000000007B4C                 mov     ecx, r14d
.text:0000000000007B4F                 mov     rdx, rbp
.text:0000000000007B52                 mov     rsi, rbx
.text:0000000000007B55                 xor     eax, eax
.text:0000000000007B57                 call    dbg_printf
.text:0000000000007B5C                 jmp     loc_6D9B
.text:0000000000007B5C ; ---------------------------------------------------------------------------
.text:0000000000007B61                 align 8
.text:0000000000007B68
.text:0000000000007B68 loc_7B68:                               ; CODE XREF: parse_datetime2+FF0↑j
.text:0000000000007B68                 lea     rsi, aWarningAdjusti ; "warning: adjusting year value %ld to %l"...
.text:0000000000007B6F                 mov     edx, 5          ; category
.text:0000000000007B74                 xor     edi, edi        ; domainname
.text:0000000000007B76                 call    _dcgettext
.text:0000000000007B7B                 mov     rsi, rbp
.text:0000000000007B7E                 mov     rdi, rax
.text:0000000000007B81                 mov     rdx, rbx
.text:0000000000007B84                 xor     eax, eax
.text:0000000000007B86                 mov     rbp, rbx
.text:0000000000007B89                 call    dbg_printf
.text:0000000000007B8E                 jmp     loc_73E9
.text:0000000000007B93 ; ---------------------------------------------------------------------------
.text:0000000000007B93
.text:0000000000007B93 loc_7B93:                               ; CODE XREF: parse_datetime2+BC5↑j
.text:0000000000007B93                                         ; parse_datetime2+BF1↑j
.text:0000000000007B93                 mov     r9d, [rsp+488h+var_2BC]
.text:0000000000007B9B                 mov     rbp, [rsp+488h+var_290]
.text:0000000000007BA3                 test    r9d, r9d
.text:0000000000007BA6                 jz      loc_8208
.text:0000000000007BAC                 cmp     r9d, 1
.text:0000000000007BB0                 jnz     short loc_7C2E
.text:0000000000007BB2                 lea     rdx, [rbp-1]
.text:0000000000007BB6                 lea     r9d, [rbp+0Ch]
.text:0000000000007BBA                 cmp     rdx, 0Ah
.text:0000000000007BBE                 jbe     short loc_7C3B
.text:0000000000007BC0                 cmp     rbp, 0Ch
.text:0000000000007BC4                 jnz     loc_8662
.text:0000000000007BCA                 mov     [rsp+488h+var_410], 0Ch
.text:0000000000007BD2                 mov     r9d, 0Ch
.text:0000000000007BD8
.text:0000000000007BD8 loc_7BD8:                               ; CODE XREF: parse_datetime2+12E0↓j
.text:0000000000007BD8                                         ; parse_datetime2+18C8↓j
.text:0000000000007BD8                 mov     rdx, [rsp+488h+var_288]
.text:0000000000007BE0                 mov     rcx, qword ptr [rsp+488h+var_280]
.text:0000000000007BE8                 test    al, al
.text:0000000000007BEA                 mov     dword ptr [rsp+488h+var_418+4], edx
.text:0000000000007BEE                 mov     dword ptr [rsp+488h+var_418], ecx
.text:0000000000007BF2                 jnz     loc_81A8
.text:0000000000007BF8
.text:0000000000007BF8 loc_7BF8:                               ; CODE XREF: parse_datetime2+1301↓j
.text:0000000000007BF8                                         ; parse_datetime2+1311↓j ...
.text:0000000000007BF8                 mov     rax, [rsp+488h+var_230]
.text:0000000000007C00                 or      rax, [rsp+488h+var_228]
.text:0000000000007C08                 or      rax, [rsp+488h+var_210]
.text:0000000000007C10                 jz      loc_7587
.text:0000000000007C16                 jmp     loc_757C
.text:0000000000007C1B ; ---------------------------------------------------------------------------
.text:0000000000007C1B
.text:0000000000007C1B loc_7C1B:                               ; CODE XREF: parse_datetime2+C30↑j
.text:0000000000007C1B                 mov     eax, [rsp+488h+var_2C4]
.text:0000000000007C22                 mov     [rsp+488h+var_3F8], eax
.text:0000000000007C29                 jmp     loc_759D
.text:0000000000007C2E ; ---------------------------------------------------------------------------
.text:0000000000007C2E
.text:0000000000007C2E loc_7C2E:                               ; CODE XREF: parse_datetime2+1250↑j
.text:0000000000007C2E                 cmp     rbp, 17h
.text:0000000000007C32                 ja      loc_84DA
.text:0000000000007C38
.text:0000000000007C38 loc_7C38:                               ; CODE XREF: parse_datetime2+18B0↓j
.text:0000000000007C38                 mov     r9d, ebp
.text:0000000000007C3B
.text:0000000000007C3B loc_7C3B:                               ; CODE XREF: parse_datetime2+125E↑j
.text:0000000000007C3B                 mov     [rsp+488h+var_410], r9d
.text:0000000000007C40                 jmp     short loc_7BD8
.text:0000000000007C42 ; ---------------------------------------------------------------------------
.text:0000000000007C42
.text:0000000000007C42 loc_7C42:                               ; CODE XREF: parse_datetime2+BD3↑j
.text:0000000000007C42                                         ; parse_datetime2+BE2↑j
.text:0000000000007C42                 test    al, al
.text:0000000000007C44                 mov     [rsp+488h+var_418], 0
.text:0000000000007C4D                 mov     [rsp+488h+var_410], 0
.text:0000000000007C55                 mov     qword ptr [rsp+488h+var_280+8], 0
.text:0000000000007C61                 jz      short loc_7BF8
.text:0000000000007C63
.text:0000000000007C63 loc_7C63:                               ; CODE XREF: parse_datetime2+C16↑j
.text:0000000000007C63                 lea     rdi, aWarningUsingMi ; "warning: using midnight as starting tim"...
.text:0000000000007C6A                 xor     eax, eax
.text:0000000000007C6C                 call    dbg_printf
.text:0000000000007C71                 jmp     short loc_7BF8
.text:0000000000007C73 ; ---------------------------------------------------------------------------
.text:0000000000007C73
.text:0000000000007C73 loc_7C73:                               ; CODE XREF: parse_datetime2+1184↑j
.text:0000000000007C73                 mov     rsi, [rsp+488h+var_470]
.text:0000000000007C78                 mov     rdi, r15
.text:0000000000007C7B                 mov     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:0000000000007C86                 call    mktime_z
.text:0000000000007C8B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007C8F                 mov     r14, rax
.text:0000000000007C92                 jz      loc_7AEA
.text:0000000000007C98                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000007CA0                 jz      loc_7E4E
.text:0000000000007CA6                 lea     rbp, [rsp+488h+var_188]
.text:0000000000007CAE                 mov     rdi, [rsp+488h+var_470]
.text:0000000000007CB3                 mov     rsi, r13
.text:0000000000007CB6                 mov     rdx, rbp
.text:0000000000007CB9                 call    debug_strfdatetime_constprop_12
.text:0000000000007CBE                 lea     rsi, [rsp+488h+var_A8]
.text:0000000000007CC6                 mov     rdi, r13
.text:0000000000007CC9                 mov     rbp, rax
.text:0000000000007CCC                 call    str_days_constprop_13
.text:0000000000007CD1                 lea     rsi, aNewStartDateSI ; "new start date: '%s' is '%s'\n"
.text:0000000000007CD8                 mov     r12, rax
.text:0000000000007CDB                 mov     edx, 5          ; category
.text:0000000000007CE0                 xor     edi, edi        ; domainname
.text:0000000000007CE2                 call    _dcgettext
.text:0000000000007CE7                 mov     rdx, rbp
.text:0000000000007CEA                 mov     rdi, rax
.text:0000000000007CED                 mov     rsi, r12
.text:0000000000007CF0                 xor     eax, eax
.text:0000000000007CF2                 call    dbg_printf
.text:0000000000007CF7
.text:0000000000007CF7 loc_7CF7:                               ; CODE XREF: parse_datetime2+1101↑j
.text:0000000000007CF7                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000007CFF                 jz      loc_7E4E
.text:0000000000007D05                 cmp     [rsp+488h+var_230], 0
.text:0000000000007D0E                 mov     rax, [rsp+488h+var_228]
.text:0000000000007D16                 jnz     loc_815F
.text:0000000000007D1C                 test    rax, rax
.text:0000000000007D1F                 jz      loc_8581
.text:0000000000007D25
.text:0000000000007D25 loc_7D25:                               ; CODE XREF: parse_datetime2+1802↓j
.text:0000000000007D25                 lea     rbp, [rsp+488h+var_188]
.text:0000000000007D2D
.text:0000000000007D2D loc_7D2D:                               ; CODE XREF: parse_datetime2+1843↓j
.text:0000000000007D2D                                         ; parse_datetime2+1C9D↓j ...
.text:0000000000007D2D                 mov     rdi, [rsp+488h+var_470]
.text:0000000000007D32                 mov     rdx, rbp
.text:0000000000007D35                 mov     rsi, r13
.text:0000000000007D38                 call    debug_strfdatetime_constprop_12
.text:0000000000007D3D                 lea     rsi, aStartingDateTi ; "starting date/time: '%s'\n"
.text:0000000000007D44                 mov     rbx, rax
.text:0000000000007D47                 mov     edx, 5          ; category
.text:0000000000007D4C                 xor     edi, edi        ; domainname
.text:0000000000007D4E                 call    _dcgettext
.text:0000000000007D53                 mov     rsi, rbx
.text:0000000000007D56                 mov     rdi, rax
.text:0000000000007D59                 xor     eax, eax
.text:0000000000007D5B                 call    dbg_printf
.text:0000000000007D60                 mov     rax, [rsp+488h+var_270]
.text:0000000000007D68                 mov     rdx, [rsp+488h+var_268]
.text:0000000000007D70                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000007D78                 or      rdx, rax
.text:0000000000007D7B                 mov     rsi, rdx
.text:0000000000007D7E                 or      rsi, [rsp+488h+var_260]
.text:0000000000007D86                 jz      loc_7E6B
.text:0000000000007D8C                 test    bl, bl
.text:0000000000007D8E                 jz      loc_7ED5
.text:0000000000007D94                 test    rdx, rdx
.text:0000000000007D97                 jz      loc_8689
.text:0000000000007D9D                 cmp     [rsp+488h+var_40C], 0Fh
.text:0000000000007DA2                 jz      short loc_7DC1
.text:0000000000007DA4                 lea     rsi, aWarningWhenAdd ; "warning: when adding relative months/ye"...
.text:0000000000007DAB                 xor     edi, edi        ; domainname
.text:0000000000007DAD                 mov     edx, 5          ; category
.text:0000000000007DB2                 call    _dcgettext
.text:0000000000007DB7                 mov     rdi, rax
.text:0000000000007DBA                 xor     eax, eax
.text:0000000000007DBC                 call    dbg_printf
.text:0000000000007DC1
.text:0000000000007DC1 loc_7DC1:                               ; CODE XREF: parse_datetime2+1442↑j
.text:0000000000007DC1                 cmp     [rsp+488h+var_260], 0
.text:0000000000007DCA                 jnz     loc_8689
.text:0000000000007DD0
.text:0000000000007DD0 loc_7DD0:                               ; CODE XREF: parse_datetime2+1D2E↓j
.text:0000000000007DD0                                         ; parse_datetime2+1D51↓j
.text:0000000000007DD0                 movsxd  rdx, [rsp+488h+var_404]
.text:0000000000007DD8                 xor     eax, eax
.text:0000000000007DDA                 mov     rcx, rdx
.text:0000000000007DDD                 add     rcx, [rsp+488h+var_270]
.text:0000000000007DE5                 movsxd  rdx, ecx
.text:0000000000007DE8                 seto    al
.text:0000000000007DEB                 mov     dword ptr [rsp+488h+var_468], ecx
.text:0000000000007DEF                 cmp     rcx, rdx
.text:0000000000007DF2                 mov     edx, 1
.text:0000000000007DF7                 cmovnz  eax, edx
.text:0000000000007DFA                 test    eax, eax
.text:0000000000007DFC                 jz      loc_7F00
.text:0000000000007E02
.text:0000000000007E02 loc_7E02:                               ; CODE XREF: parse_datetime2+15BB↓j
.text:0000000000007E02                                         ; parse_datetime2+15C3↓j ...
.text:0000000000007E02                 cmp     [rsp+488h+var_1FF], 0
.text:0000000000007E0A                 jz      loc_6D9B
.text:0000000000007E10                 lea     rsi, aErrorSD   ; "error: %s:%d\n"
.text:0000000000007E17                 xor     edi, edi        ; domainname
.text:0000000000007E19                 mov     edx, 5          ; category
.text:0000000000007E1E                 call    _dcgettext
.text:0000000000007E23                 lea     rsi, aParseDatetimeY ; "parse-datetime.y"
.text:0000000000007E2A                 mov     rdi, rax
.text:0000000000007E2D                 mov     edx, 877h
.text:0000000000007E32                 xor     eax, eax
.text:0000000000007E34                 call    dbg_printf
.text:0000000000007E39                 jmp     loc_6D9B
.text:0000000000007E3E ; ---------------------------------------------------------------------------
.text:0000000000007E3E
.text:0000000000007E3E loc_7E3E:                               ; CODE XREF: parse_datetime2+1110↑j
.text:0000000000007E3E                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000007E46                 test    bl, bl
.text:0000000000007E48                 jnz     loc_8168
.text:0000000000007E4E
.text:0000000000007E4E loc_7E4E:                               ; CODE XREF: parse_datetime2+1340↑j
.text:0000000000007E4E                                         ; parse_datetime2+139F↑j
.text:0000000000007E4E                 mov     rax, [rsp+488h+var_270]
.text:0000000000007E56                 mov     rdx, [rsp+488h+var_268]
.text:0000000000007E5E                 or      rdx, rax
.text:0000000000007E61                 or      rdx, [rsp+488h+var_260]
.text:0000000000007E69                 jnz     short loc_7ED5
.text:0000000000007E6B
.text:0000000000007E6B loc_7E6B:                               ; CODE XREF: parse_datetime2+1426↑j
.text:0000000000007E6B                                         ; parse_datetime2+1659↓j ...
.text:0000000000007E6B                 cmp     [rsp+488h+var_208], 0
.text:0000000000007E74                 jz      loc_8311
.text:0000000000007E7A                 movsxd  rax, [rsp+488h+var_2C0]
.text:0000000000007E82                 xor     edx, edx
.text:0000000000007E84                 mov     rbp, rax
.text:0000000000007E87                 sub     rax, [rsp+488h+var_3F0]
.text:0000000000007E8F                 seto    dl
.text:0000000000007E92                 sub     r14, rax
.text:0000000000007E95                 seto    al
.text:0000000000007E98                 movzx   eax, al
.text:0000000000007E9B                 or      rdx, rax
.text:0000000000007E9E                 jz      loc_8311
.text:0000000000007EA4                 test    bl, bl
.text:0000000000007EA6                 jz      loc_6D9B
.text:0000000000007EAC                 lea     rsi, aErrorTimezoneD ; "error: timezone %d caused time_t overfl"...
.text:0000000000007EB3                 xor     edi, edi        ; domainname
.text:0000000000007EB5                 mov     edx, 5          ; category
.text:0000000000007EBA                 call    _dcgettext
.text:0000000000007EBF                 mov     esi, ebp
.text:0000000000007EC1                 mov     rdi, rax
.text:0000000000007EC4                 xor     eax, eax
.text:0000000000007EC6                 call    dbg_printf
.text:0000000000007ECB                 jmp     loc_6D9B
.text:0000000000007ED0 ; ---------------------------------------------------------------------------
.text:0000000000007ED0
.text:0000000000007ED0 loc_7ED0:                               ; CODE XREF: parse_datetime2+46A↑j
.text:0000000000007ED0                 call    ___stack_chk_fail
.text:0000000000007ED5 ; ---------------------------------------------------------------------------
.text:0000000000007ED5
.text:0000000000007ED5 loc_7ED5:                               ; CODE XREF: parse_datetime2+142E↑j
.text:0000000000007ED5                                         ; parse_datetime2+1509↑j
.text:0000000000007ED5                 movsxd  rdx, [rsp+488h+var_404]
.text:0000000000007EDD                 add     rax, rdx
.text:0000000000007EE0                 seto    dl
.text:0000000000007EE3                 movsxd  rcx, eax
.text:0000000000007EE6                 mov     dword ptr [rsp+488h+var_468], eax
.text:0000000000007EEA                 cmp     rax, rcx
.text:0000000000007EED                 movzx   edx, dl
.text:0000000000007EF0                 mov     ecx, 1
.text:0000000000007EF5                 cmovnz  edx, ecx
.text:0000000000007EF8                 test    edx, edx
.text:0000000000007EFA                 jnz     loc_6D9B
.text:0000000000007F00
.text:0000000000007F00 loc_7F00:                               ; CODE XREF: parse_datetime2+149C↑j
.text:0000000000007F00                 movsxd  r12, [rsp+488h+var_408]
.text:0000000000007F08                 xor     eax, eax
.text:0000000000007F0A                 add     r12, [rsp+488h+var_268]
.text:0000000000007F12                 movsxd  rdx, r12d
.text:0000000000007F15                 seto    al
.text:0000000000007F18                 cmp     r12, rdx
.text:0000000000007F1B                 jnz     loc_7E02
.text:0000000000007F21                 test    eax, eax
.text:0000000000007F23                 jnz     loc_7E02
.text:0000000000007F29                 movsxd  rbp, [rsp+488h+var_40C]
.text:0000000000007F2E                 xor     eax, eax
.text:0000000000007F30                 add     rbp, [rsp+488h+var_260]
.text:0000000000007F38                 movsxd  rdx, ebp
.text:0000000000007F3B                 seto    al
.text:0000000000007F3E                 cmp     rbp, rdx
.text:0000000000007F41                 jnz     loc_7E02
.text:0000000000007F47                 test    eax, eax
.text:0000000000007F49                 jnz     loc_7E02
.text:0000000000007F4F                 mov     eax, dword ptr [rsp+488h+var_468]
.text:0000000000007F53                 mov     rsi, [rsp+488h+var_470]
.text:0000000000007F58                 mov     rdi, r15
.text:0000000000007F5B                 mov     [rsp+488h+var_408], r12d
.text:0000000000007F63                 mov     [rsp+488h+var_40C], ebp
.text:0000000000007F67                 mov     [rsp+488h+var_404], eax
.text:0000000000007F6E                 mov     eax, [rsp+488h+var_3D0]
.text:0000000000007F75                 mov     [rsp+488h+var_410], eax
.text:0000000000007F79                 mov     eax, [rsp+488h+var_3D4]
.text:0000000000007F80                 mov     dword ptr [rsp+488h+var_418+4], eax
.text:0000000000007F84                 mov     eax, [rsp+488h+var_3D8]
.text:0000000000007F8B                 mov     dword ptr [rsp+488h+var_418], eax
.text:0000000000007F8F                 mov     eax, [rsp+488h+var_3B8]
.text:0000000000007F96                 mov     [rsp+488h+var_3F8], eax
.text:0000000000007F9D                 call    mktime_z
.text:0000000000007FA2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FA6                 mov     r14, rax
.text:0000000000007FA9                 jz      loc_8617
.text:0000000000007FAF                 movzx   ebx, [rsp+488h+var_1FF]
.text:0000000000007FB7                 test    bl, bl
.text:0000000000007FB9                 jz      loc_7E6B
.text:0000000000007FBF                 mov     rcx, [rsp+488h+var_260]
.text:0000000000007FC7                 mov     rax, [rsp+488h+var_270]
.text:0000000000007FCF                 lea     rsi, aAfterDateAdjus ; "after date adjustment (%+ld years, %+ld"...
.text:0000000000007FD6                 mov     rbx, [rsp+488h+var_268]
.text:0000000000007FDE                 xor     edi, edi        ; domainname
.text:0000000000007FE0                 mov     edx, 5          ; category
.text:0000000000007FE5                 mov     [rsp+488h+var_450], rcx
.text:0000000000007FEA                 mov     [rsp+488h+var_458], rax
.text:0000000000007FEF                 call    _dcgettext
.text:0000000000007FF4                 mov     rcx, [rsp+488h+var_450]
.text:0000000000007FF9                 mov     rsi, [rsp+488h+var_458]
.text:0000000000007FFE                 mov     rdx, rbx
.text:0000000000008001                 mov     rdi, rax
.text:0000000000008004                 xor     eax, eax
.text:0000000000008006                 call    dbg_printf
.text:000000000000800B                 mov     rdi, [rsp+488h+var_470]
.text:0000000000008010                 lea     rdx, [rsp+488h+var_188]
.text:0000000000008018                 mov     rsi, r13
.text:000000000000801B                 call    debug_strfdatetime_constprop_12
.text:0000000000008020                 lea     rsi, aNewDateTimeS ; "    new date/time = '%s'\n"
.text:0000000000008027                 xor     edi, edi        ; domainname
.text:0000000000008029                 mov     rbx, rax
.text:000000000000802C                 mov     edx, 5          ; category
.text:0000000000008031                 call    _dcgettext
.text:0000000000008036                 mov     rsi, rbx
.text:0000000000008039                 mov     rdi, rax
.text:000000000000803C                 xor     eax, eax
.text:000000000000803E                 call    dbg_printf
.text:0000000000008043                 mov     eax, [rsp+488h+var_3B8]
.text:000000000000804A                 cmp     eax, 0FFFFFFFFh
.text:000000000000804D                 jz      short loc_8075
.text:000000000000804F                 cmp     eax, [rsp+488h+var_3F8]
.text:0000000000008056                 jz      short loc_8075
.text:0000000000008058                 lea     rsi, aWarningDayligh ; "warning: daylight saving time changed a"...
.text:000000000000805F                 xor     edi, edi        ; domainname
.text:0000000000008061                 mov     edx, 5          ; category
.text:0000000000008066                 call    _dcgettext
.text:000000000000806B                 mov     rdi, rax
.text:000000000000806E                 xor     eax, eax
.text:0000000000008070                 call    dbg_printf
.text:0000000000008075
.text:0000000000008075 loc_8075:                               ; CODE XREF: parse_datetime2+16ED↑j
.text:0000000000008075                                         ; parse_datetime2+16F6↑j
.text:0000000000008075                 cmp     [rsp+488h+var_260], 0
.text:000000000000807E                 jnz     loc_8152
.text:0000000000008084                 cmp     ebp, [rsp+488h+var_40C]
.text:0000000000008088                 jnz     short loc_80A7
.text:000000000000808A                 cmp     [rsp+488h+var_268], 0
.text:0000000000008093                 jnz     loc_8152
.text:0000000000008099                 cmp     r12d, [rsp+488h+var_408]
.text:00000000000080A1                 jz      loc_8152
.text:00000000000080A7
.text:00000000000080A7 loc_80A7:                               ; CODE XREF: parse_datetime2+1728↑j
.text:00000000000080A7                 lea     rsi, aWarningMonthYe ; "warning: month/year adjustment resulted"...
.text:00000000000080AE                 mov     edx, 5          ; category
.text:00000000000080B3                 xor     edi, edi        ; domainname
.text:00000000000080B5                 call    _dcgettext
.text:00000000000080BA                 mov     rdi, rax
.text:00000000000080BD                 xor     eax, eax
.text:00000000000080BF                 call    dbg_printf
.text:00000000000080C4                 lea     r8, [rsp+488h+var_1B5]
.text:00000000000080CC                 mov     edi, dword ptr [rsp+488h+var_468]
.text:00000000000080D0                 mov     rsi, r8
.text:00000000000080D3                 mov     [rsp+488h+var_458], r8
.text:00000000000080D8                 call    tm_year_str
.text:00000000000080DD                 lea     rsi, aAdjustedYMDS02 ; "     adjusted Y M D: %s %02d %02d\n"
.text:00000000000080E4                 mov     edx, 5          ; category
.text:00000000000080E9                 xor     edi, edi        ; domainname
.text:00000000000080EB                 mov     rbx, rax
.text:00000000000080EE                 call    _dcgettext
.text:00000000000080F3                 lea     edx, [r12+1]
.text:00000000000080F8                 mov     ecx, ebp
.text:00000000000080FA                 mov     rsi, rbx
.text:00000000000080FD                 mov     rdi, rax
.text:0000000000008100                 xor     eax, eax
.text:0000000000008102                 call    dbg_printf
.text:0000000000008107                 mov     r8, [rsp+488h+var_458]
.text:000000000000810C                 mov     eax, [rsp+488h+var_408]
.text:0000000000008113                 mov     edi, [rsp+488h+var_404]
.text:000000000000811A                 mov     r12d, [rsp+488h+var_40C]
.text:000000000000811F                 mov     rsi, r8
.text:0000000000008122                 lea     ebx, [rax+1]
.text:0000000000008125                 call    tm_year_str
.text:000000000000812A                 lea     rsi, aNormalizedYMDS ; "   normalized Y M D: %s %02d %02d\n"
.text:0000000000008131                 mov     rbp, rax
.text:0000000000008134                 mov     edx, 5          ; category
.text:0000000000008139                 xor     edi, edi        ; domainname
.text:000000000000813B                 call    _dcgettext
.text:0000000000008140                 mov     ecx, r12d
.text:0000000000008143                 mov     rdi, rax
.text:0000000000008146                 mov     edx, ebx
.text:0000000000008148                 mov     rsi, rbp
.text:000000000000814B                 xor     eax, eax
.text:000000000000814D                 call    dbg_printf
.text:0000000000008152
.text:0000000000008152 loc_8152:                               ; CODE XREF: parse_datetime2+171E↑j
.text:0000000000008152                                         ; parse_datetime2+1733↑j ...
.text:0000000000008152                 movzx   ebx, [rsp+488h+var_1FF]
.text:000000000000815A                 jmp     loc_7E6B
.text:000000000000815F ; ---------------------------------------------------------------------------
.text:000000000000815F
.text:000000000000815F loc_815F:                               ; CODE XREF: parse_datetime2+13B6↑j
.text:000000000000815F                 test    rax, rax
.text:0000000000008162                 jz      loc_7D25
.text:0000000000008168
.text:0000000000008168 loc_8168:                               ; CODE XREF: parse_datetime2+14E8↑j
.text:0000000000008168                 lea     rbp, [rsp+488h+var_188]
.text:0000000000008170
.text:0000000000008170 loc_8170:                               ; CODE XREF: parse_datetime2+1CAC↓j
.text:0000000000008170                 lea     rsi, [rsp+488h+var_A8]
.text:0000000000008178                 mov     rdi, r13
.text:000000000000817B                 call    str_days_constprop_13
.text:0000000000008180                 lea     rsi, aWarningDaySIgn ; "warning: day (%s) ignored when explicit"...
.text:0000000000008187                 mov     rbx, rax
.text:000000000000818A                 xor     edi, edi        ; domainname
.text:000000000000818C                 mov     edx, 5          ; category
.text:0000000000008191                 call    _dcgettext
.text:0000000000008196                 mov     rsi, rbx
.text:0000000000008199                 mov     rdi, rax
.text:000000000000819C                 xor     eax, eax
.text:000000000000819E                 call    dbg_printf
.text:00000000000081A3                 jmp     loc_7D2D
.text:00000000000081A8 ; ---------------------------------------------------------------------------
.text:00000000000081A8
.text:00000000000081A8 loc_81A8:                               ; CODE XREF: parse_datetime2+1292↑j
.text:00000000000081A8                 lea     rbp, [rsp+488h+var_188]
.text:00000000000081B0                 lea     r8, a02d02d02d  ; "%02d:%02d:%02d"
.text:00000000000081B7                 push    rcx
.text:00000000000081B8                 push    rdx
.text:00000000000081B9                 mov     esi, 64h ; 'd'
.text:00000000000081BE                 mov     edx, 1
.text:00000000000081C3                 mov     rdi, rbp
.text:00000000000081C6                 xor     eax, eax
.text:00000000000081C8                 mov     ecx, 64h ; 'd'
.text:00000000000081CD                 call    ___snprintf_chk
.text:00000000000081D2                 pop     rsi
.text:00000000000081D3                 pop     rdi
.text:00000000000081D4                 cmp     [rsp+488h+var_210], 0
.text:00000000000081DD                 mov     edx, 5          ; category
.text:00000000000081E2                 jz      loc_8676
.text:00000000000081E8                 lea     rsi, aUsingSpecified ; "using specified time as starting value:"...
.text:00000000000081EF                 xor     edi, edi        ; domainname
.text:00000000000081F1                 call    _dcgettext
.text:00000000000081F6
.text:00000000000081F6 loc_81F6:                               ; CODE XREF: parse_datetime2+1D24↓j
.text:00000000000081F6                 mov     rdi, rax
.text:00000000000081F9                 mov     rsi, rbp
.text:00000000000081FC                 xor     eax, eax
.text:00000000000081FE                 call    dbg_printf
.text:0000000000008203                 jmp     loc_7BF8
.text:0000000000008208 ; ---------------------------------------------------------------------------
.text:0000000000008208
.text:0000000000008208 loc_8208:                               ; CODE XREF: parse_datetime2+1246↑j
.text:0000000000008208                 lea     rdx, [rbp-1]
.text:000000000000820C                 cmp     rdx, 0Ah
.text:0000000000008210                 jbe     loc_7C38
.text:0000000000008216                 cmp     rbp, 0Ch
.text:000000000000821A                 jnz     loc_8519
.text:0000000000008220                 mov     [rsp+488h+var_410], 0
.text:0000000000008228                 jmp     loc_7BD8
.text:000000000000822D ; ---------------------------------------------------------------------------
.text:000000000000822D
.text:000000000000822D loc_822D:                               ; CODE XREF: parse_datetime2+D5C↑j
.text:000000000000822D                                         ; parse_datetime2+D65↑j ...
.text:000000000000822D                 test    al, al
.text:000000000000822F                 jz      loc_6D9B
.text:0000000000008235                 lea     rsi, aErrorInvalidDa ; "error: invalid date/time value:\n"
.text:000000000000823C                 mov     edx, 5          ; category
.text:0000000000008241                 xor     edi, edi        ; domainname
.text:0000000000008243                 mov     [rsp+488h+var_42C], ecx
.text:0000000000008247                 mov     [rsp+488h+var_430], r8d
.text:000000000000824C                 lea     rbx, [rsp+488h+var_A8]
.text:0000000000008254                 mov     [rsp+488h+var_434], r9d
.text:0000000000008259                 mov     [rsp+488h+var_438], r10d
.text:000000000000825E                 call    _dcgettext
.text:0000000000008263                 mov     rdi, rax
.text:0000000000008266                 xor     eax, eax
.text:0000000000008268                 call    dbg_printf
.text:000000000000826D                 lea     rdi, [rsp+488h+var_3D8]
.text:0000000000008275                 mov     rsi, r13
.text:0000000000008278                 mov     rdx, rbx
.text:000000000000827B                 call    debug_strfdatetime_constprop_12
.text:0000000000008280                 lea     rsi, aUserProvidedTi ; "    user provided time: '%s'\n"
.text:0000000000008287                 mov     edx, 5          ; category
.text:000000000000828C                 xor     edi, edi        ; domainname
.text:000000000000828E                 mov     [rsp+488h+var_440], rax
.text:0000000000008293                 call    _dcgettext
.text:0000000000008298                 mov     rsi, [rsp+488h+var_440]
.text:000000000000829D                 mov     rdi, rax
.text:00000000000082A0                 xor     eax, eax
.text:00000000000082A2                 call    dbg_printf
.text:00000000000082A7                 mov     rdi, [rsp+488h+var_470]
.text:00000000000082AC                 mov     rsi, r13
.text:00000000000082AF                 mov     rdx, rbx
.text:00000000000082B2                 call    debug_strfdatetime_constprop_12
.text:00000000000082B7                 lea     rsi, aNormalizedTime ; "       normalized time: '%s'\n"
.text:00000000000082BE                 mov     edx, 5          ; category
.text:00000000000082C3                 xor     edi, edi        ; domainname
.text:00000000000082C5                 mov     r13, rax
.text:00000000000082C8                 call    _dcgettext
.text:00000000000082CD                 mov     rsi, r13
.text:00000000000082D0                 mov     rdi, rax
.text:00000000000082D3                 xor     eax, eax
.text:00000000000082D5                 call    dbg_printf
.text:00000000000082DA                 mov     r10d, [rsp+488h+var_438]
.text:00000000000082DF                 mov     r9d, [rsp+488h+var_434]
.text:00000000000082E4                 lea     rdx, aUserProvidedTi+1Dh ; ""
.text:00000000000082EB                 mov     r8d, [rsp+488h+var_430]
.text:00000000000082F0                 mov     ecx, [rsp+488h+var_42C]
.text:00000000000082F4                 lea     rax, asc_1023F+2 ; "--"
.text:00000000000082FB                 mov     rsi, rdx
.text:00000000000082FE                 cmp     r10d, r9d
.text:0000000000008301                 cmovnz  rsi, rax
.text:0000000000008305                 cmp     r8d, ecx
.text:0000000000008308                 cmovz   rax, rdx
.text:000000000000830C                 jmp     loc_7797
.text:0000000000008311 ; ---------------------------------------------------------------------------
.text:0000000000008311
.text:0000000000008311 loc_8311:                               ; CODE XREF: parse_datetime2+1514↑j
.text:0000000000008311                                         ; parse_datetime2+153E↑j
.text:0000000000008311                 test    bl, bl
.text:0000000000008313                 jnz     loc_8534
.text:0000000000008319
.text:0000000000008319 loc_8319:                               ; CODE XREF: parse_datetime2+1C0F↓j
.text:0000000000008319                 mov     rbp, [rsp+488h+var_258]
.text:0000000000008321                 movzx   r12d, [rsp+488h+var_1FF]
.text:000000000000832A                 imul    r9, rbp, 0E10h
.text:0000000000008331                 jo      loc_848D
.text:0000000000008337                 add     r9, r14
.text:000000000000833A                 jo      loc_848D
.text:0000000000008340                 mov     r13, [rsp+488h+var_250]
.text:0000000000008348                 imul    rax, r13, 3Ch ; '<'
.text:000000000000834C                 jo      loc_848D
.text:0000000000008352                 add     r9, rax
.text:0000000000008355                 jo      loc_848D
.text:000000000000835B                 mov     r14, [rsp+488h+var_248]
.text:0000000000008363                 add     r9, r14
.text:0000000000008366                 jo      loc_848D
.text:000000000000836C                 movsxd  rsi, [rsp+488h+var_240]
.text:0000000000008374                 mov     rcx, qword ptr [rsp+488h+var_280+8]
.text:000000000000837C                 mov     r8d, 3B9ACA00h
.text:0000000000008382                 mov     rbx, r9
.text:0000000000008385                 add     rcx, rsi
.text:0000000000008388                 mov     rax, rcx
.text:000000000000838B                 cqo
.text:000000000000838D                 idiv    r8
.text:0000000000008390                 lea     rax, [rdx+3B9ACA00h]
.text:0000000000008397                 cqo
.text:0000000000008399                 idiv    r8
.text:000000000000839C                 mov     rax, rcx
.text:000000000000839F                 sub     rax, rdx
.text:00000000000083A2                 mov     rdi, rdx
.text:00000000000083A5                 cqo
.text:00000000000083A7                 idiv    r8
.text:00000000000083AA                 cdqe
.text:00000000000083AC                 add     rbx, rax
.text:00000000000083AF                 jo      loc_848D
.text:00000000000083B5                 mov     rax, [rsp+488h+timer]
.text:00000000000083BA                 test    r12b, r12b
.text:00000000000083BD                 mov     [rax], rbx
.text:00000000000083C0                 mov     [rax+8], rdi
.text:00000000000083C4                 jz      loc_70D2
.text:00000000000083CA                 mov     rax, rbp
.text:00000000000083CD                 or      rax, r13
.text:00000000000083D0                 or      rax, r14
.text:00000000000083D3                 or      rax, rsi
.text:00000000000083D6                 jz      loc_70D2
.text:00000000000083DC                 mov     dword ptr [rsp+488h+var_470], esi
.text:00000000000083E0                 lea     rsi, aAfterTimeAdjus ; "after time adjustment (%+ld hours, %+ld"...
.text:00000000000083E7                 xor     edi, edi        ; domainname
.text:00000000000083E9                 mov     edx, 5          ; category
.text:00000000000083EE                 call    _dcgettext
.text:00000000000083F3                 mov     r10d, dword ptr [rsp+488h+var_470]
.text:00000000000083F8                 mov     rcx, r14
.text:00000000000083FB                 mov     rdi, rax
.text:00000000000083FE                 mov     rdx, r13
.text:0000000000008401                 xor     eax, eax
.text:0000000000008403                 mov     rsi, rbp
.text:0000000000008406                 mov     r8d, r10d
.text:0000000000008409                 call    dbg_printf
.text:000000000000840E                 lea     rsi, aNewTimeLdEpoch ; "    new time = %ld epoch-seconds\n"
.text:0000000000008415                 xor     edi, edi        ; domainname
.text:0000000000008417                 mov     edx, 5          ; category
.text:000000000000841C                 call    _dcgettext
.text:0000000000008421                 mov     rsi, rbx
.text:0000000000008424                 mov     rdi, rax
.text:0000000000008427                 xor     eax, eax
.text:0000000000008429                 call    dbg_printf
.text:000000000000842E                 cmp     [rsp+488h+var_3F8], 0FFFFFFFFh
.text:0000000000008436                 jz      short loc_847F
.text:0000000000008438                 mov     rsi, [rsp+488h+timer]
.text:000000000000843D                 lea     rdx, [rsp+488h+var_318]
.text:0000000000008445                 mov     rdi, r15
.text:0000000000008448                 call    localtime_rz
.text:000000000000844D                 test    rax, rax
.text:0000000000008450                 jz      short loc_847F
.text:0000000000008452                 mov     eax, [rsp+488h+var_2F8]
.text:0000000000008459                 cmp     [rsp+488h+var_3F8], eax
.text:0000000000008460                 jz      short loc_847F
.text:0000000000008462                 lea     rsi, aWarningDayligh_0 ; "warning: daylight saving time changed a"...
.text:0000000000008469                 xor     edi, edi        ; domainname
.text:000000000000846B                 mov     edx, 5          ; category
.text:0000000000008470                 call    _dcgettext
.text:0000000000008475                 mov     rdi, rax
.text:0000000000008478                 xor     eax, eax
.text:000000000000847A                 call    dbg_printf
.text:000000000000847F
.text:000000000000847F loc_847F:                               ; CODE XREF: parse_datetime2+1AD6↑j
.text:000000000000847F                                         ; parse_datetime2+1AF0↑j ...
.text:000000000000847F                 movzx   r12d, [rsp+488h+var_1FF]
.text:0000000000008488                 jmp     loc_70D2
.text:000000000000848D ; ---------------------------------------------------------------------------
.text:000000000000848D
.text:000000000000848D loc_848D:                               ; CODE XREF: parse_datetime2+19D1↑j
.text:000000000000848D                                         ; parse_datetime2+19DA↑j ...
.text:000000000000848D                 test    r12b, r12b
.text:0000000000008490                 jz      loc_6D9B
.text:0000000000008496                 mov     edx, 5
.text:000000000000849B                 lea     rsi, aErrorAddingRel ; "error: adding relative time caused an o"...
.text:00000000000084A2                 jmp     loc_7469
.text:00000000000084A7 ; ---------------------------------------------------------------------------
.text:00000000000084A7
.text:00000000000084A7 loc_84A7:                               ; CODE XREF: parse_datetime2+103A↑j
.text:00000000000084A7                 cmp     [rsp+488h+var_1FF], 0
.text:00000000000084AF                 jz      loc_6D9B
.text:00000000000084B5                 lea     rsi, aErrorTzallocSF ; "error: tzalloc (\"%s\") failed\n"
.text:00000000000084BC                 xor     edi, edi        ; domainname
.text:00000000000084BE                 mov     edx, 5          ; category
.text:00000000000084C3                 call    _dcgettext
.text:00000000000084C8                 mov     rsi, rbp
.text:00000000000084CB                 mov     rdi, rax
.text:00000000000084CE                 xor     eax, eax
.text:00000000000084D0                 call    dbg_printf
.text:00000000000084D5                 jmp     loc_6D9B
.text:00000000000084DA ; ---------------------------------------------------------------------------
.text:00000000000084DA
.text:00000000000084DA loc_84DA:                               ; CODE XREF: parse_datetime2+12D2↑j
.text:00000000000084DA                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:00000000000084E1                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:00000000000084E9
.text:00000000000084E9 loc_84E9:                               ; CODE XREF: parse_datetime2+1BC8↓j
.text:00000000000084E9                                         ; parse_datetime2+1D11↓j
.text:00000000000084E9                 test    al, al
.text:00000000000084EB                 jz      loc_6D9B
.text:00000000000084F1                 lea     rsi, aErrorInvalidHo ; "error: invalid hour %ld%s\n"
.text:00000000000084F8                 xor     edi, edi        ; domainname
.text:00000000000084FA                 mov     edx, 5          ; category
.text:00000000000084FF                 call    _dcgettext
.text:0000000000008504                 mov     rdx, rbx
.text:0000000000008507                 mov     rdi, rax
.text:000000000000850A                 mov     rsi, rbp
.text:000000000000850D                 xor     eax, eax
.text:000000000000850F                 call    dbg_printf
.text:0000000000008514                 jmp     loc_6D9B
.text:0000000000008519 ; ---------------------------------------------------------------------------
.text:0000000000008519
.text:0000000000008519 loc_8519:                               ; CODE XREF: parse_datetime2+18BA↑j
.text:0000000000008519                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:0000000000008521                 lea     rbx, aAm_0      ; "am"
.text:0000000000008528                 jmp     short loc_84E9
.text:000000000000852A ; ---------------------------------------------------------------------------
.text:000000000000852A
.text:000000000000852A loc_852A:                               ; CODE XREF: parse_datetime2+B71↑j
.text:000000000000852A                 mov     edx, 1
.text:000000000000852F                 jmp     loc_74D7
.text:0000000000008534 ; ---------------------------------------------------------------------------
.text:0000000000008534
.text:0000000000008534 loc_8534:                               ; CODE XREF: parse_datetime2+19B3↑j
.text:0000000000008534                 mov     rdi, [rsp+488h+var_470]
.text:0000000000008539                 lea     rdx, [rsp+488h+var_188]
.text:0000000000008541                 mov     rsi, r13
.text:0000000000008544                 call    debug_strfdatetime_constprop_12
.text:0000000000008549                 lea     rsi, aSLdEpochSecond ; "'%s' = %ld epoch-seconds\n"
.text:0000000000008550                 mov     rbx, rax
.text:0000000000008553                 xor     edi, edi        ; domainname
.text:0000000000008555                 mov     edx, 5          ; category
.text:000000000000855A                 call    _dcgettext
.text:000000000000855F                 mov     rdx, r14
.text:0000000000008562                 mov     rdi, rax
.text:0000000000008565                 mov     rsi, rbx
.text:0000000000008568                 xor     eax, eax
.text:000000000000856A                 call    dbg_printf
.text:000000000000856F                 jmp     loc_8319
.text:0000000000008574 ; ---------------------------------------------------------------------------
.text:0000000000008574
.text:0000000000008574 loc_8574:                               ; CODE XREF: parse_datetime2+10C3↑j
.text:0000000000008574                 mov     rdi, rdx
.text:0000000000008577                 call    tzfree
.text:000000000000857C                 jmp     loc_764B
.text:0000000000008581 ; ---------------------------------------------------------------------------
.text:0000000000008581
.text:0000000000008581 loc_8581:                               ; CODE XREF: parse_datetime2+13BF↑j
.text:0000000000008581                 mov     eax, [rsp+488h+var_408]
.text:0000000000008588                 mov     edi, [rsp+488h+var_404]
.text:000000000000858F                 lea     rsi, [rsp+488h+var_1B5]
.text:0000000000008597                 mov     r12d, [rsp+488h+var_40C]
.text:000000000000859C                 lea     rbp, [rsp+488h+var_188]
.text:00000000000085A4                 lea     ebx, [rax+1]
.text:00000000000085A7                 call    tm_year_str
.text:00000000000085AC                 push    r12
.text:00000000000085AE                 lea     r8, aYMDS02d02d ; "(Y-M-D) %s-%02d-%02d"
.text:00000000000085B5                 push    rbx
.text:00000000000085B6                 mov     r9, rax
.text:00000000000085B9                 mov     ecx, 64h ; 'd'
.text:00000000000085BE                 mov     edx, 1
.text:00000000000085C3                 mov     esi, 64h ; 'd'
.text:00000000000085C8                 mov     rdi, rbp
.text:00000000000085CB                 xor     eax, eax
.text:00000000000085CD                 call    ___snprintf_chk
.text:00000000000085D2                 lea     rsi, aUsingCurrentDa ; "using current date as starting value: '"...
.text:00000000000085D9                 mov     edx, 5          ; category
.text:00000000000085DE                 xor     edi, edi        ; domainname
.text:00000000000085E0                 call    _dcgettext
.text:00000000000085E5                 mov     rsi, rbp
.text:00000000000085E8                 mov     rdi, rax
.text:00000000000085EB                 xor     eax, eax
.text:00000000000085ED                 call    dbg_printf
.text:00000000000085F2                 pop     rax
.text:00000000000085F3                 pop     rdx
.text:00000000000085F4                 cmp     [rsp+488h+var_228], 0
.text:00000000000085FD                 jz      loc_7D2D
.text:0000000000008603                 cmp     [rsp+488h+var_230], 0
.text:000000000000860C                 jnz     loc_8170
.text:0000000000008612                 jmp     loc_7D2D
.text:0000000000008617 ; ---------------------------------------------------------------------------
.text:0000000000008617
.text:0000000000008617 loc_8617:                               ; CODE XREF: parse_datetime2+1649↑j
.text:0000000000008617                 cmp     [rsp+488h+var_1FF], 0
.text:000000000000861F                 jz      loc_6D9B
.text:0000000000008625                 mov     rdi, [rsp+488h+var_470]
.text:000000000000862A                 lea     rdx, [rsp+488h+var_188]
.text:0000000000008632                 mov     rsi, r13
.text:0000000000008635                 call    debug_strfdatetime_constprop_12
.text:000000000000863A                 lea     rsi, aErrorAddingRel_0 ; "error: adding relative date resulted in"...
.text:0000000000008641                 mov     rbx, rax
.text:0000000000008644                 xor     edi, edi        ; domainname
.text:0000000000008646                 mov     edx, 5          ; category
.text:000000000000864B                 call    _dcgettext
.text:0000000000008650                 mov     rsi, rbx
.text:0000000000008653                 mov     rdi, rax
.text:0000000000008656                 xor     eax, eax
.text:0000000000008658                 call    dbg_printf
.text:000000000000865D                 jmp     loc_6D9B
.text:0000000000008662 ; ---------------------------------------------------------------------------
.text:0000000000008662
.text:0000000000008662 loc_8662:                               ; CODE XREF: parse_datetime2+1264↑j
.text:0000000000008662                 mov     [rsp+488h+var_410], 0FFFFFFFFh
.text:000000000000866A                 lea     rbx, aPm        ; "pm"
.text:0000000000008671                 jmp     loc_84E9
.text:0000000000008676 ; ---------------------------------------------------------------------------
.text:0000000000008676
.text:0000000000008676 loc_8676:                               ; CODE XREF: parse_datetime2+1882↑j
.text:0000000000008676                 lea     rsi, aUsingCurrentTi ; "using current time as starting value: '"...
.text:000000000000867D                 xor     edi, edi        ; domainname
.text:000000000000867F                 call    _dcgettext
.text:0000000000008684                 jmp     loc_81F6
.text:0000000000008689 ; ---------------------------------------------------------------------------
.text:0000000000008689
.text:0000000000008689 loc_8689:                               ; CODE XREF: parse_datetime2+1437↑j
.text:0000000000008689                                         ; parse_datetime2+146A↑j
.text:0000000000008689                 cmp     [rsp+488h+var_410], 0Ch
.text:000000000000868E                 jz      loc_7DD0
.text:0000000000008694                 lea     rsi, aWarningWhenAdd_0 ; "warning: when adding relative days, it "...
.text:000000000000869B                 xor     edi, edi        ; domainname
.text:000000000000869D                 mov     edx, 5          ; category
.text:00000000000086A2                 call    _dcgettext
.text:00000000000086A7                 mov     rdi, rax
.text:00000000000086AA                 xor     eax, eax
.text:00000000000086AC                 call    dbg_printf
.text:00000000000086B1                 jmp     loc_7DD0
.text:00000000000086B6 ; ---------------------------------------------------------------------------
.text:00000000000086B6
.text:00000000000086B6 loc_86B6:                               ; CODE XREF: parse_datetime2+F77↑j
.text:00000000000086B6                 lea     rsi, aMissingTimezon ; "missing timezone"
.text:00000000000086BD                 xor     edi, edi        ; domainname
.text:00000000000086BF                 call    _dcgettext
.text:00000000000086C4                 jmp     loc_78EB
.text:00000000000086C4 ; } // starts at 6960
.text:00000000000086C4 parse_datetime2 endp
.text:00000000000086C4
.text:00000000000086C4 ; ---------------------------------------------------------------------------
.text:00000000000086C9                 align 10h
.text:00000000000086D0
.text:00000000000086D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000086D0
.text:00000000000086D0
.text:00000000000086D0                 public parse_datetime
.text:00000000000086D0 parse_datetime  proc near               ; CODE XREF: get_reldate+4↑p
.text:00000000000086D0
.text:00000000000086D0 var_29          = byte ptr -29h
.text:00000000000086D0
.text:00000000000086D0 ; __unwind {
.text:00000000000086D0                 push    r14
.text:00000000000086D2                 push    r13
.text:00000000000086D4                 mov     r14, rdx
.text:00000000000086D7                 push    r12
.text:00000000000086D9                 push    rbp
.text:00000000000086DA                 mov     r12, rdi
.text:00000000000086DD                 push    rbx
.text:00000000000086DE                 lea     rdi, aTz_0      ; "TZ"
.text:00000000000086E5                 mov     r13, rsi
.text:00000000000086E8                 sub     rsp, 10h
.text:00000000000086EC                 call    _getenv
.text:00000000000086F1                 mov     rdi, rax        ; src
.text:00000000000086F4                 mov     rbp, rax
.text:00000000000086F7                 call    tzalloc
.text:00000000000086FC                 mov     rbx, rax
.text:00000000000086FF                 xor     eax, eax
.text:0000000000008701                 test    rbx, rbx
.text:0000000000008704                 jz      short loc_872D
.text:0000000000008706                 mov     r9, rbp
.text:0000000000008709                 mov     r8, rbx
.text:000000000000870C                 xor     ecx, ecx
.text:000000000000870E                 mov     rdx, r14
.text:0000000000008711                 mov     rsi, r13
.text:0000000000008714                 mov     rdi, r12
.text:0000000000008717                 call    parse_datetime2
.text:000000000000871C                 mov     rdi, rbx
.text:000000000000871F                 mov     [rsp+38h+var_29], al
.text:0000000000008723                 call    tzfree
.text:0000000000008728                 movzx   eax, [rsp+38h+var_29]
.text:000000000000872D
.text:000000000000872D loc_872D:                               ; CODE XREF: parse_datetime+34↑j
.text:000000000000872D                 add     rsp, 10h
.text:0000000000008731                 pop     rbx
.text:0000000000008732                 pop     rbp
.text:0000000000008733                 pop     r12
.text:0000000000008735                 pop     r13
.text:0000000000008737                 pop     r14
.text:0000000000008739                 retn
.text:0000000000008739 ; } // starts at 86D0
.text:0000000000008739 parse_datetime  endp
.text:0000000000008739
.text:0000000000008739 ; ---------------------------------------------------------------------------
.text:000000000000873A                 align 20h
.text:0000000000008740
.text:0000000000008740 ; =============== S U B R O U T I N E =======================================
.text:0000000000008740
.text:0000000000008740
.text:0000000000008740 year_isra_0     proc near               ; CODE XREF: posixtime+144↓p
.text:0000000000008740                                         ; posixtime+29A↓p
.text:0000000000008740
.text:0000000000008740 var_20          = qword ptr -20h
.text:0000000000008740
.text:0000000000008740 ; __unwind {
.text:0000000000008740                 push    rbp
.text:0000000000008741                 push    rbx
.text:0000000000008742                 mov     rbx, rdi
.text:0000000000008745                 sub     rsp, 18h
.text:0000000000008749                 mov     rax, fs:28h
.text:0000000000008752                 mov     [rsp+28h+var_20], rax
.text:0000000000008757                 xor     eax, eax
.text:0000000000008759                 cmp     rdx, 1
.text:000000000000875D                 jz      short loc_87B8
.text:000000000000875F                 jb      short loc_8778
.text:0000000000008761                 cmp     rdx, 2
.text:0000000000008765                 jnz     loc_87F1
.text:000000000000876B                 and     ecx, 2
.text:000000000000876E                 jnz     short loc_87D8
.text:0000000000008770
.text:0000000000008770 loc_8770:                               ; CODE XREF: year_isra_0+89↓j
.text:0000000000008770                 xor     eax, eax
.text:0000000000008772                 jmp     short loc_879A
.text:0000000000008772 ; ---------------------------------------------------------------------------
.text:0000000000008774                 align 8
.text:0000000000008778
.text:0000000000008778 loc_8778:                               ; CODE XREF: year_isra_0+1F↑j
.text:0000000000008778                 mov     rbp, rsp
.text:000000000000877B                 mov     rdi, rbp        ; timer
.text:000000000000877E                 call    _time
.text:0000000000008783                 mov     rdi, rbp        ; timer
.text:0000000000008786                 call    _localtime
.text:000000000000878B                 test    rax, rax
.text:000000000000878E                 jz      short loc_879A
.text:0000000000008790                 mov     eax, [rax+14h]
.text:0000000000008793                 mov     [rbx], eax
.text:0000000000008795                 mov     eax, 1
.text:000000000000879A
.text:000000000000879A loc_879A:                               ; CODE XREF: year_isra_0+32↑j
.text:000000000000879A                                         ; year_isra_0+4E↑j ...
.text:000000000000879A                 mov     rdi, [rsp+28h+var_20]
.text:000000000000879F                 xor     rdi, fs:28h
.text:00000000000087A8                 jnz     short loc_87EC
.text:00000000000087AA                 add     rsp, 18h
.text:00000000000087AE                 pop     rbx
.text:00000000000087AF                 pop     rbp
.text:00000000000087B0                 retn
.text:00000000000087B0 ; ---------------------------------------------------------------------------
.text:00000000000087B1                 align 8
.text:00000000000087B8
.text:00000000000087B8 loc_87B8:                               ; CODE XREF: year_isra_0+1D↑j
.text:00000000000087B8                 mov     edx, [rsi]
.text:00000000000087BA                 mov     eax, 1
.text:00000000000087BF                 mov     [rdi], edx
.text:00000000000087C1                 cmp     dword ptr [rsi], 44h ; 'D'
.text:00000000000087C4                 jg      short loc_879A
.text:00000000000087C6                 and     ecx, 8
.text:00000000000087C9                 jnz     short loc_8770
.text:00000000000087CB                 add     edx, 64h ; 'd'
.text:00000000000087CE                 mov     [rdi], edx
.text:00000000000087D0                 jmp     short loc_879A
.text:00000000000087D0 ; ---------------------------------------------------------------------------
.text:00000000000087D2                 align 8
.text:00000000000087D8
.text:00000000000087D8 loc_87D8:                               ; CODE XREF: year_isra_0+2E↑j
.text:00000000000087D8                 imul    eax, [rsi], 64h ; 'd'
.text:00000000000087DB                 add     eax, [rsi+4]
.text:00000000000087DE                 sub     eax, 76Ch
.text:00000000000087E3                 mov     [rdi], eax
.text:00000000000087E5                 mov     eax, 1
.text:00000000000087EA                 jmp     short loc_879A
.text:00000000000087EC ; ---------------------------------------------------------------------------
.text:00000000000087EC
.text:00000000000087EC loc_87EC:                               ; CODE XREF: year_isra_0+68↑j
.text:00000000000087EC                 call    ___stack_chk_fail
.text:00000000000087F1 ; ---------------------------------------------------------------------------
.text:00000000000087F1
.text:00000000000087F1 loc_87F1:                               ; CODE XREF: year_isra_0+25↑j
.text:00000000000087F1                 call    _abort
.text:00000000000087F1 ; } // starts at 8740
.text:00000000000087F1 year_isra_0     endp
.text:00000000000087F1
.text:00000000000087F1 ; ---------------------------------------------------------------------------
.text:00000000000087F6                 align 20h
.text:0000000000008800
.text:0000000000008800 ; =============== S U B R O U T I N E =======================================
.text:0000000000008800
.text:0000000000008800
.text:0000000000008800                 public posixtime
.text:0000000000008800 posixtime       proc near               ; CODE XREF: main+243↑p
.text:0000000000008800                                         ; main+79E↑p ...
.text:0000000000008800
.text:0000000000008800 var_100         = byte ptr -100h
.text:0000000000008800 var_F8          = dword ptr -0F8h
.text:0000000000008800 var_F4          = dword ptr -0F4h
.text:0000000000008800 var_F0          = dword ptr -0F0h
.text:0000000000008800 var_EC          = dword ptr -0ECh
.text:0000000000008800 var_E8          = dword ptr -0E8h
.text:0000000000008800 var_E4          = dword ptr -0E4h
.text:0000000000008800 tp              = tm ptr -0B8h
.text:0000000000008800 var_78          = dword ptr -78h
.text:0000000000008800 var_74          = dword ptr -74h
.text:0000000000008800 var_70          = dword ptr -70h
.text:0000000000008800 var_6C          = dword ptr -6Ch
.text:0000000000008800 s               = byte ptr -58h
.text:0000000000008800 var_40          = qword ptr -40h
.text:0000000000008800
.text:0000000000008800 ; __unwind {
.text:0000000000008800                 push    r15
.text:0000000000008802                 push    r14
.text:0000000000008804                 push    r13
.text:0000000000008806                 push    r12
.text:0000000000008808                 mov     r12, rdi
.text:000000000000880B                 push    rbp
.text:000000000000880C                 push    rbx
.text:000000000000880D                 mov     ebp, edx
.text:000000000000880F                 mov     rdi, rsi        ; s
.text:0000000000008812                 mov     rbx, rsi
.text:0000000000008815                 sub     rsp, 0D8h
.text:000000000000881C                 mov     rax, fs:28h
.text:0000000000008825                 mov     [rsp+108h+var_40], rax
.text:000000000000882D                 xor     eax, eax
.text:000000000000882F                 call    _strlen
.text:0000000000008834                 test    bpl, 4
.text:0000000000008838                 mov     r13, rax
.text:000000000000883B                 jz      loc_8A70
.text:0000000000008841                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000008846                 mov     rdi, rbx        ; s
.text:0000000000008849                 call    _strchr
.text:000000000000884E                 test    rax, rax
.text:0000000000008851                 mov     r14, rax
.text:0000000000008854                 jz      short loc_8893
.text:0000000000008856                 sub     rax, rbx
.text:0000000000008859                 sub     r13, rax
.text:000000000000885C                 cmp     r13, 3
.text:0000000000008860                 jz      short loc_8890
.text:0000000000008862
.text:0000000000008862 loc_8862:                               ; CODE XREF: posixtime+9B↓j
.text:0000000000008862                                         ; posixtime+A1↓j ...
.text:0000000000008862                 xor     eax, eax
.text:0000000000008864
.text:0000000000008864 loc_8864:                               ; CODE XREF: posixtime+1D8↓j
.text:0000000000008864                                         ; posixtime+21F↓j ...
.text:0000000000008864                 mov     rsi, [rsp+108h+var_40]
.text:000000000000886C                 xor     rsi, fs:28h
.text:0000000000008875                 jnz     loc_8ADF
.text:000000000000887B                 add     rsp, 0D8h
.text:0000000000008882                 pop     rbx
.text:0000000000008883                 pop     rbp
.text:0000000000008884                 pop     r12
.text:0000000000008886                 pop     r13
.text:0000000000008888                 pop     r14
.text:000000000000888A                 pop     r15
.text:000000000000888C                 retn
.text:000000000000888C ; ---------------------------------------------------------------------------
.text:000000000000888D                 align 10h
.text:0000000000008890
.text:0000000000008890 loc_8890:                               ; CODE XREF: posixtime+60↑j
.text:0000000000008890                 mov     r13, rax
.text:0000000000008893
.text:0000000000008893 loc_8893:                               ; CODE XREF: posixtime+54↑j
.text:0000000000008893                 lea     rax, [r13-8]
.text:0000000000008897                 cmp     rax, 4
.text:000000000000889B                 ja      short loc_8862
.text:000000000000889D
.text:000000000000889D loc_889D:                               ; CODE XREF: posixtime+27B↓j
.text:000000000000889D                 test    r13b, 1
.text:00000000000088A1                 jnz     short loc_8862
.text:00000000000088A3                 lea     rcx, [r13+rbx+0]
.text:00000000000088A8                 mov     rdx, rbx
.text:00000000000088AB                 nop     dword ptr [rax+rax+00h]
.text:00000000000088B0
.text:00000000000088B0 loc_88B0:                               ; CODE XREF: posixtime+C2↓j
.text:00000000000088B0                 movsx   eax, byte ptr [rdx]
.text:00000000000088B3                 sub     eax, 30h ; '0'
.text:00000000000088B6                 cmp     eax, 9
.text:00000000000088B9                 ja      short loc_8862
.text:00000000000088BB                 add     rdx, 1
.text:00000000000088BF                 cmp     rcx, rdx
.text:00000000000088C2                 jnz     short loc_88B0
.text:00000000000088C4                 shr     r13, 1
.text:00000000000088C7                 xor     edx, edx
.text:00000000000088C9                 lea     r15, [rsp+108h+var_78]
.text:00000000000088D1                 jmp     short loc_88DB
.text:00000000000088D1 ; ---------------------------------------------------------------------------
.text:00000000000088D3                 align 8
.text:00000000000088D8
.text:00000000000088D8 loc_88D8:                               ; CODE XREF: posixtime+FA↓j
.text:00000000000088D8                 mov     rdx, rax
.text:00000000000088DB
.text:00000000000088DB loc_88DB:                               ; CODE XREF: posixtime+D1↑j
.text:00000000000088DB                 movsx   eax, byte ptr [rbx+rdx*2]
.text:00000000000088DF                 lea     ecx, [rax+rax*4-0F0h]
.text:00000000000088E6                 movsx   eax, byte ptr [rbx+rdx*2+1]
.text:00000000000088EB                 lea     eax, [rax+rcx*2-30h]
.text:00000000000088EF                 mov     [r15+rdx*4], eax
.text:00000000000088F3                 lea     rax, [rdx+1]
.text:00000000000088F7                 cmp     r13, rax
.text:00000000000088FA                 jnz     short loc_88D8
.text:00000000000088FC                 sub     rdx, 3
.text:0000000000008900                 test    bpl, 1
.text:0000000000008904                 jz      loc_8A90
.text:000000000000890A                 mov     eax, [rsp+108h+var_78]
.text:0000000000008911                 lea     rsi, [r15+10h]
.text:0000000000008915                 lea     rdi, [rsp+108h+var_E4]
.text:000000000000891A                 mov     ecx, ebp
.text:000000000000891C                 sub     eax, 1
.text:000000000000891F                 mov     [rsp+108h+var_E8], eax
.text:0000000000008923                 mov     eax, [rsp+108h+var_74]
.text:000000000000892A                 mov     [rsp+108h+var_EC], eax
.text:000000000000892E                 mov     eax, [rsp+108h+var_70]
.text:0000000000008935                 mov     [rsp+108h+var_F0], eax
.text:0000000000008939                 mov     eax, [rsp+108h+var_6C]
.text:0000000000008940                 mov     [rsp+108h+var_F4], eax
.text:0000000000008944                 call    year_isra_0
.text:0000000000008949                 test    al, al
.text:000000000000894B                 jz      loc_8862
.text:0000000000008951
.text:0000000000008951 loc_8951:                               ; CODE XREF: posixtime+2CA↓j
.text:0000000000008951                 test    r14, r14
.text:0000000000008954                 jz      loc_8AD0
.text:000000000000895A                 movsx   eax, byte ptr [r14+1]
.text:000000000000895F                 sub     eax, 30h ; '0'
.text:0000000000008962                 cmp     eax, 9
.text:0000000000008965                 ja      loc_8862
.text:000000000000896B                 movsx   edx, byte ptr [r14+2]
.text:0000000000008970                 lea     ecx, [rdx-30h]
.text:0000000000008973                 cmp     ecx, 9
.text:0000000000008976                 ja      loc_8862
.text:000000000000897C                 lea     eax, [rax+rax*4]
.text:000000000000897F                 lea     eax, [rdx+rax*2-30h]
.text:0000000000008983                 mov     [rsp+108h+var_F8], eax
.text:0000000000008987
.text:0000000000008987 loc_8987:                               ; CODE XREF: posixtime+2DA↓j
.text:0000000000008987                 mov     [rsp+108h+tp.tm_sec], eax
.text:000000000000898B                 mov     eax, [rsp+108h+var_F4]
.text:000000000000898F                 lea     rdi, [rsp+108h+tp] ; tp
.text:0000000000008994                 mov     [rsp+108h+tp.tm_wday], 0FFFFFFFFh
.text:000000000000899C                 mov     [rsp+108h+tp.tm_isdst], 0FFFFFFFFh
.text:00000000000089A4                 mov     [rsp+108h+tp.tm_min], eax
.text:00000000000089A8                 mov     eax, [rsp+108h+var_F0]
.text:00000000000089AC                 mov     [rsp+108h+tp.tm_hour], eax
.text:00000000000089B0                 mov     eax, [rsp+108h+var_EC]
.text:00000000000089B4                 mov     [rsp+108h+tp.tm_mday], eax
.text:00000000000089B8                 mov     eax, [rsp+108h+var_E8]
.text:00000000000089BC                 mov     [rsp+108h+tp.tm_mon], eax
.text:00000000000089C0                 mov     eax, [rsp+108h+var_E4]
.text:00000000000089C4                 mov     [rsp+108h+tp.tm_year], eax
.text:00000000000089C8                 call    _mktime
.text:00000000000089CD                 mov     ecx, [rsp+108h+tp.tm_wday]
.text:00000000000089D1                 mov     r13, rax
.text:00000000000089D4                 xor     eax, eax
.text:00000000000089D6                 test    ecx, ecx
.text:00000000000089D8                 js      loc_8864
.text:00000000000089DE                 mov     edx, [rsp+108h+var_E4]
.text:00000000000089E2                 mov     ecx, [rsp+108h+var_E8]
.text:00000000000089E6                 xor     edx, [rsp+108h+tp.tm_year]
.text:00000000000089EA                 xor     ecx, [rsp+108h+tp.tm_mon]
.text:00000000000089EE                 mov     esi, [rsp+108h+var_F8]
.text:00000000000089F2                 or      edx, ecx
.text:00000000000089F4                 mov     ecx, [rsp+108h+var_EC]
.text:00000000000089F8                 xor     ecx, [rsp+108h+tp.tm_mday]
.text:00000000000089FC                 or      edx, ecx
.text:00000000000089FE                 mov     ecx, [rsp+108h+var_F0]
.text:0000000000008A02                 xor     ecx, [rsp+108h+tp.tm_hour]
.text:0000000000008A06                 or      edx, ecx
.text:0000000000008A08                 mov     ecx, [rsp+108h+var_F4]
.text:0000000000008A0C                 xor     ecx, [rsp+108h+tp.tm_min]
.text:0000000000008A10                 or      edx, ecx
.text:0000000000008A12                 mov     ecx, [rsp+108h+tp.tm_sec]
.text:0000000000008A16                 xor     ecx, esi
.text:0000000000008A18                 or      edx, ecx
.text:0000000000008A1A                 jz      short loc_8A60
.text:0000000000008A1C                 cmp     esi, 3Ch ; '<'
.text:0000000000008A1F                 jnz     loc_8864
.text:0000000000008A25                 lea     r14, [rsp+108h+s]
.text:0000000000008A2D                 mov     edx, 10h
.text:0000000000008A32                 mov     rsi, rbx
.text:0000000000008A35                 mov     rdi, r14
.text:0000000000008A38                 call    ___stpcpy_chk
.text:0000000000008A3D                 mov     edx, 3935h
.text:0000000000008A42                 lea     rdi, [rsp+108h+var_100]
.text:0000000000008A47                 mov     byte ptr [rax], 0
.text:0000000000008A4A                 mov     [rax-2], dx
.text:0000000000008A4E                 mov     rsi, r14
.text:0000000000008A51                 mov     edx, ebp
.text:0000000000008A53                 call    posixtime
.text:0000000000008A58                 test    al, al
.text:0000000000008A5A                 jz      loc_8864
.text:0000000000008A60
.text:0000000000008A60 loc_8A60:                               ; CODE XREF: posixtime+21A↑j
.text:0000000000008A60                 mov     [r12], r13
.text:0000000000008A64                 mov     eax, 1
.text:0000000000008A69                 jmp     loc_8864
.text:0000000000008A69 ; ---------------------------------------------------------------------------
.text:0000000000008A6E                 align 10h
.text:0000000000008A70
.text:0000000000008A70 loc_8A70:                               ; CODE XREF: posixtime+3B↑j
.text:0000000000008A70                 lea     rax, [r13-8]
.text:0000000000008A74                 xor     r14d, r14d
.text:0000000000008A77                 cmp     rax, 4
.text:0000000000008A7B                 jbe     loc_889D
.text:0000000000008A81                 jmp     loc_8862
.text:0000000000008A81 ; ---------------------------------------------------------------------------
.text:0000000000008A86                 align 10h
.text:0000000000008A90
.text:0000000000008A90 loc_8A90:                               ; CODE XREF: posixtime+104↑j
.text:0000000000008A90                 lea     rdi, [rsp+108h+var_E4]
.text:0000000000008A95                 mov     ecx, ebp
.text:0000000000008A97                 mov     rsi, r15
.text:0000000000008A9A                 call    year_isra_0
.text:0000000000008A9F                 test    al, al
.text:0000000000008AA1                 jz      loc_8862
.text:0000000000008AA7                 lea     rax, [r15+r13*4-10h]
.text:0000000000008AAC                 mov     esi, [rax]
.text:0000000000008AAE                 lea     edx, [rsi-1]
.text:0000000000008AB1                 mov     [rsp+108h+var_E8], edx
.text:0000000000008AB5                 mov     edx, [rax+4]
.text:0000000000008AB8                 mov     [rsp+108h+var_EC], edx
.text:0000000000008ABC                 mov     edx, [rax+8]
.text:0000000000008ABF                 mov     eax, [rax+0Ch]
.text:0000000000008AC2                 mov     [rsp+108h+var_F0], edx
.text:0000000000008AC6                 mov     [rsp+108h+var_F4], eax
.text:0000000000008ACA                 jmp     loc_8951
.text:0000000000008ACA ; ---------------------------------------------------------------------------
.text:0000000000008ACF                 align 10h
.text:0000000000008AD0
.text:0000000000008AD0 loc_8AD0:                               ; CODE XREF: posixtime+154↑j
.text:0000000000008AD0                 mov     [rsp+108h+var_F8], 0
.text:0000000000008AD8                 xor     eax, eax
.text:0000000000008ADA                 jmp     loc_8987
.text:0000000000008ADF ; ---------------------------------------------------------------------------
.text:0000000000008ADF
.text:0000000000008ADF loc_8ADF:                               ; CODE XREF: posixtime+75↑j
.text:0000000000008ADF                 call    ___stack_chk_fail
.text:0000000000008ADF ; } // starts at 8800
.text:0000000000008ADF posixtime       endp
.text:0000000000008ADF
.text:0000000000008ADF ; ---------------------------------------------------------------------------
.text:0000000000008AE4                 align 10h
.text:0000000000008AF0
.text:0000000000008AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008AF0
.text:0000000000008AF0
.text:0000000000008AF0                 public posix2_version
.text:0000000000008AF0 posix2_version  proc near               ; CODE XREF: main:loc_3336↑p
.text:0000000000008AF0
.text:0000000000008AF0 var_18          = qword ptr -18h
.text:0000000000008AF0 var_10          = qword ptr -10h
.text:0000000000008AF0
.text:0000000000008AF0 ; __unwind {
.text:0000000000008AF0                 push    rbx
.text:0000000000008AF1                 lea     rdi, aPosix2Version ; "_POSIX2_VERSION"
.text:0000000000008AF8                 mov     ebx, 31069h
.text:0000000000008AFD                 sub     rsp, 10h
.text:0000000000008B01                 mov     rax, fs:28h
.text:0000000000008B0A                 mov     [rsp+18h+var_10], rax
.text:0000000000008B0F                 xor     eax, eax
.text:0000000000008B11                 call    _getenv
.text:0000000000008B16                 test    rax, rax
.text:0000000000008B19                 jz      short loc_8B20
.text:0000000000008B1B                 cmp     byte ptr [rax], 0
.text:0000000000008B1E                 jnz     short loc_8B40
.text:0000000000008B20
.text:0000000000008B20 loc_8B20:                               ; CODE XREF: posix2_version+29↑j
.text:0000000000008B20                                         ; posix2_version+67↓j ...
.text:0000000000008B20                 mov     rcx, [rsp+18h+var_10]
.text:0000000000008B25                 xor     rcx, fs:28h
.text:0000000000008B2E                 mov     eax, ebx
.text:0000000000008B30                 jnz     short loc_8B79
.text:0000000000008B32                 add     rsp, 10h
.text:0000000000008B36                 pop     rbx
.text:0000000000008B37                 retn
.text:0000000000008B37 ; ---------------------------------------------------------------------------
.text:0000000000008B38                 align 20h
.text:0000000000008B40
.text:0000000000008B40 loc_8B40:                               ; CODE XREF: posix2_version+2E↑j
.text:0000000000008B40                 mov     edx, 0Ah        ; base
.text:0000000000008B45                 mov     rsi, rsp        ; endptr
.text:0000000000008B48                 mov     rdi, rax        ; nptr
.text:0000000000008B4B                 call    _strtol
.text:0000000000008B50                 mov     rdx, [rsp+18h+var_18]
.text:0000000000008B54                 cmp     byte ptr [rdx], 0
.text:0000000000008B57                 jnz     short loc_8B20
.text:0000000000008B59                 cmp     rax, 0FFFFFFFF80000000h
.text:0000000000008B5F                 jl      short loc_8B72
.text:0000000000008B61                 cmp     rax, 7FFFFFFFh
.text:0000000000008B67                 mov     ebx, 7FFFFFFFh
.text:0000000000008B6C                 cmovle  rbx, rax
.text:0000000000008B70                 jmp     short loc_8B20
.text:0000000000008B72 ; ---------------------------------------------------------------------------
.text:0000000000008B72
.text:0000000000008B72 loc_8B72:                               ; CODE XREF: posix2_version+6F↑j
.text:0000000000008B72                 mov     ebx, 80000000h
.text:0000000000008B77                 jmp     short loc_8B20
.text:0000000000008B79 ; ---------------------------------------------------------------------------
.text:0000000000008B79
.text:0000000000008B79 loc_8B79:                               ; CODE XREF: posix2_version+40↑j
.text:0000000000008B79                 call    ___stack_chk_fail
.text:0000000000008B79 ; } // starts at 8AF0
.text:0000000000008B79 posix2_version  endp
.text:0000000000008B79
.text:0000000000008B79 ; ---------------------------------------------------------------------------
.text:0000000000008B7E                 align 20h
.text:0000000000008B80
.text:0000000000008B80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B80
.text:0000000000008B80
.text:0000000000008B80                 public set_program_name
.text:0000000000008B80 set_program_name proc near              ; CODE XREF: main+3A↑p
.text:0000000000008B80 ; __unwind {
.text:0000000000008B80                 test    rdi, rdi
.text:0000000000008B83                 push    rbx
.text:0000000000008B84                 jz      short loc_8BFD
.text:0000000000008B86                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000008B8B                 mov     rbx, rdi
.text:0000000000008B8E                 call    _strrchr
.text:0000000000008B93                 test    rax, rax
.text:0000000000008B96                 jz      short loc_8BED
.text:0000000000008B98                 lea     r8, [rax+1]
.text:0000000000008B9C                 mov     rdx, r8
.text:0000000000008B9F                 sub     rdx, rbx
.text:0000000000008BA2                 cmp     rdx, 6
.text:0000000000008BA6                 jle     short loc_8BED
.text:0000000000008BA8                 lea     rsi, [rax-6]
.text:0000000000008BAC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000008BB3                 mov     ecx, 7
.text:0000000000008BB8                 repe cmpsb
.text:0000000000008BBA                 setnbe  dl
.text:0000000000008BBD                 sbb     dl, 0
.text:0000000000008BC0                 test    dl, dl
.text:0000000000008BC2                 jnz     short loc_8BED
.text:0000000000008BC4                 lea     rdi, aLt        ; "lt-"
.text:0000000000008BCB                 mov     ecx, 3
.text:0000000000008BD0                 mov     rsi, r8
.text:0000000000008BD3                 mov     rbx, r8
.text:0000000000008BD6                 repe cmpsb
.text:0000000000008BD8                 setnbe  dl
.text:0000000000008BDB                 sbb     dl, 0
.text:0000000000008BDE                 test    dl, dl
.text:0000000000008BE0                 jnz     short loc_8BED
.text:0000000000008BE2                 lea     rbx, [rax+4]
.text:0000000000008BE6                 mov     cs:__bss_start, rbx
.text:0000000000008BED
.text:0000000000008BED loc_8BED:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000008BED                                         ; set_program_name+26↑j ...
.text:0000000000008BED                 mov     cs:program_name, rbx
.text:0000000000008BF4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000008BFB                 pop     rbx
.text:0000000000008BFC                 retn
.text:0000000000008BFD ; ---------------------------------------------------------------------------
.text:0000000000008BFD
.text:0000000000008BFD loc_8BFD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000008BFD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000008C04                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000008C0B                 mov     edx, 37h ; '7'  ; n
.text:0000000000008C10                 mov     esi, 1          ; size
.text:0000000000008C15                 call    _fwrite
.text:0000000000008C1A                 call    _abort
.text:0000000000008C1A ; } // starts at 8B80
.text:0000000000008C1A set_program_name endp
.text:0000000000008C1A
.text:0000000000008C1A ; ---------------------------------------------------------------------------
.text:0000000000008C1F                 align 20h
.text:0000000000008C20
.text:0000000000008C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C20
.text:0000000000008C20 ; Attributes: info_from_lumina
.text:0000000000008C20
.text:0000000000008C20 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000008C20 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000008C20                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000008C20 ; __unwind {
.text:0000000000008C20                 push    rbp
.text:0000000000008C21                 push    rbx
.text:0000000000008C22                 mov     rbp, rdi
.text:0000000000008C25                 mov     ebx, esi
.text:0000000000008C27                 sub     rsp, 8
.text:0000000000008C2B                 call    locale_charset
.text:0000000000008C30                 movzx   edx, byte ptr [rax]
.text:0000000000008C33                 and     edx, 0FFFFFFDFh
.text:0000000000008C36                 cmp     dl, 55h ; 'U'
.text:0000000000008C39                 jz      short loc_8CB0
.text:0000000000008C3B                 cmp     dl, 47h ; 'G'
.text:0000000000008C3E                 jz      short loc_8C60
.text:0000000000008C40
.text:0000000000008C40 loc_8C40:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000008C40                                         ; gettext_quote+50↓j ...
.text:0000000000008C40                 lea     rax, aTz+3      ; "\""
.text:0000000000008C47                 lea     rdx, asc_1155B  ; "'"
.text:0000000000008C4E                 cmp     ebx, 9
.text:0000000000008C51                 cmovnz  rax, rdx
.text:0000000000008C55                 add     rsp, 8
.text:0000000000008C59                 pop     rbx
.text:0000000000008C5A                 pop     rbp
.text:0000000000008C5B                 retn
.text:0000000000008C5B ; ---------------------------------------------------------------------------
.text:0000000000008C5C                 align 20h
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000008C60                 movzx   edx, byte ptr [rax+1]
.text:0000000000008C64                 and     edx, 0FFFFFFDFh
.text:0000000000008C67                 cmp     dl, 42h ; 'B'
.text:0000000000008C6A                 jnz     short loc_8C40
.text:0000000000008C6C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000008C70                 jnz     short loc_8C40
.text:0000000000008C72                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000008C76                 jnz     short loc_8C40
.text:0000000000008C78                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000008C7C                 jnz     short loc_8C40
.text:0000000000008C7E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000008C82                 jnz     short loc_8C40
.text:0000000000008C84                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000008C88                 jnz     short loc_8C40
.text:0000000000008C8A                 cmp     byte ptr [rax+7], 0
.text:0000000000008C8E                 jnz     short loc_8C40
.text:0000000000008C90                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000008C94                 lea     rax, unk_11554
.text:0000000000008C9B                 lea     rdx, unk_11558
.text:0000000000008CA2                 cmovnz  rax, rdx
.text:0000000000008CA6                 add     rsp, 8
.text:0000000000008CAA                 pop     rbx
.text:0000000000008CAB                 pop     rbp
.text:0000000000008CAC                 retn
.text:0000000000008CAC ; ---------------------------------------------------------------------------
.text:0000000000008CAD                 align 10h
.text:0000000000008CB0
.text:0000000000008CB0 loc_8CB0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000008CB0                 movzx   edx, byte ptr [rax+1]
.text:0000000000008CB4                 and     edx, 0FFFFFFDFh
.text:0000000000008CB7                 cmp     dl, 54h ; 'T'
.text:0000000000008CBA                 jnz     short loc_8C40
.text:0000000000008CBC                 movzx   edx, byte ptr [rax+2]
.text:0000000000008CC0                 and     edx, 0FFFFFFDFh
.text:0000000000008CC3                 cmp     dl, 46h ; 'F'
.text:0000000000008CC6                 jnz     loc_8C40
.text:0000000000008CCC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000008CD0                 jnz     loc_8C40
.text:0000000000008CD6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000008CDA                 jnz     loc_8C40
.text:0000000000008CE0                 cmp     byte ptr [rax+5], 0
.text:0000000000008CE4                 jnz     loc_8C40
.text:0000000000008CEA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000008CEE                 lea     rax, unk_1154C
.text:0000000000008CF5                 lea     rdx, unk_11550
.text:0000000000008CFC                 cmovnz  rax, rdx
.text:0000000000008D00                 add     rsp, 8
.text:0000000000008D04                 pop     rbx
.text:0000000000008D05                 pop     rbp
.text:0000000000008D06                 retn
.text:0000000000008D06 ; } // starts at 8C20
.text:0000000000008D06 gettext_quote   endp
.text:0000000000008D06
.text:0000000000008D06 ; ---------------------------------------------------------------------------
.text:0000000000008D07                 align 10h
.text:0000000000008D10
.text:0000000000008D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D10
.text:0000000000008D10 ; Attributes: info_from_lumina
.text:0000000000008D10
.text:0000000000008D10 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000008D10 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000008D10                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000008D10
.text:0000000000008D10 var_E0          = dword ptr -0E0h
.text:0000000000008D10 var_DB          = byte ptr -0DBh
.text:0000000000008D10 var_DA          = byte ptr -0DAh
.text:0000000000008D10 var_D9          = byte ptr -0D9h
.text:0000000000008D10 s               = qword ptr -0D8h
.text:0000000000008D10 n               = qword ptr -0D0h
.text:0000000000008D10 var_C8          = qword ptr -0C8h
.text:0000000000008D10 ps              = qword ptr -0C0h
.text:0000000000008D10 var_B8          = qword ptr -0B8h
.text:0000000000008D10 var_B0          = qword ptr -0B0h
.text:0000000000008D10 var_A8          = qword ptr -0A8h
.text:0000000000008D10 s2              = qword ptr -0A0h
.text:0000000000008D10 var_98          = qword ptr -98h
.text:0000000000008D10 var_90          = qword ptr -90h
.text:0000000000008D10 var_88          = qword ptr -88h
.text:0000000000008D10 var_80          = qword ptr -80h
.text:0000000000008D10 var_78          = qword ptr -78h
.text:0000000000008D10 var_70          = dword ptr -70h
.text:0000000000008D10 var_6C          = byte ptr -6Ch
.text:0000000000008D10 var_6B          = byte ptr -6Bh
.text:0000000000008D10 var_6A          = byte ptr -6Ah
.text:0000000000008D10 var_69          = byte ptr -69h
.text:0000000000008D10 var_68          = qword ptr -68h
.text:0000000000008D10 var_60          = qword ptr -60h
.text:0000000000008D10 wc              = dword ptr -4Ch
.text:0000000000008D10 var_48          = qword ptr -48h
.text:0000000000008D10 var_40          = qword ptr -40h
.text:0000000000008D10 arg_0           = qword ptr  8
.text:0000000000008D10 arg_8           = qword ptr  10h
.text:0000000000008D10 arg_10          = qword ptr  18h
.text:0000000000008D10
.text:0000000000008D10 ; __unwind {
.text:0000000000008D10                 push    r15
.text:0000000000008D12                 push    r14
.text:0000000000008D14                 mov     r15d, r8d
.text:0000000000008D17                 push    r13
.text:0000000000008D19                 push    r12
.text:0000000000008D1B                 mov     r14, rdi
.text:0000000000008D1E                 push    rbp
.text:0000000000008D1F                 push    rbx
.text:0000000000008D20                 mov     ebx, r9d
.text:0000000000008D23                 mov     r13, rsi
.text:0000000000008D26                 mov     rbp, rcx
.text:0000000000008D29                 and     ebx, 2
.text:0000000000008D2C                 sub     rsp, 0B8h
.text:0000000000008D33                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000008D3B                 mov     [rsp+0E8h+s], rdx
.text:0000000000008D40                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000008D45                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000008D4A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000008D4F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000008D57                 mov     [rsp+0E8h+var_80], rax
.text:0000000000008D5C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000008D64                 mov     [rsp+0E8h+var_88], rax
.text:0000000000008D69                 mov     rax, fs:28h
.text:0000000000008D72                 mov     [rsp+0E8h+var_40], rax
.text:0000000000008D7A                 xor     eax, eax
.text:0000000000008D7C                 call    ___ctype_get_mb_cur_max
.text:0000000000008D81                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000008D85                 mov     [rsp+0E8h+var_90], rax
.text:0000000000008D8A                 ja      def_8DA1        ; jumptable 00000000000121F1 default case
.text:0000000000008D90                 lea     rcx, jpt_8DA1
.text:0000000000008D97                 mov     edx, r15d
.text:0000000000008D9A                 movsxd  rax, ds:(jpt_8DA1 - 115C0h)[rcx+rdx*4]
.text:0000000000008D9E                 add     rax, rcx
.text:0000000000008DA1                 jmp     rax             ; switch jump
.text:0000000000008DA3 ; ---------------------------------------------------------------------------
.text:0000000000008DA3
.text:0000000000008DA3 loc_8DA3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000008DA3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000008DA3                                         ; DATA XREF: ...
.text:0000000000008DA3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000008DA8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000008DAD                 xor     r12d, r12d
.text:0000000000008DB0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000008DB9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000008DBE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000008DC3
.text:0000000000008DC3 loc_8DC3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000008DC3                 lea     rax, asc_1155B  ; "'"
.text:0000000000008DCA                 mov     [rsp+0E8h+n], 1
.text:0000000000008DD3                 xor     r15d, r15d
.text:0000000000008DD6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000008DDE                 mov     [rsp+0E8h+s2], rax
.text:0000000000008DE3
.text:0000000000008DE3 loc_8DE3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000008DE3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000008DE3                 xor     r11d, r11d
.text:0000000000008DE6                 mov     rax, rbp
.text:0000000000008DE9                 mov     r8d, r12d
.text:0000000000008DEC                 mov     rbp, r11
.text:0000000000008DEF                 mov     r11, rax
.text:0000000000008DF2                 nop     word ptr [rax+rax+00h]
.text:0000000000008DF8
.text:0000000000008DF8 loc_8DF8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000008DF8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000008DF8                 cmp     r11, rbp
.text:0000000000008DFB                 setnz   r12b
.text:0000000000008DFF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E03                 jnz     short loc_8E12
.text:0000000000008E05                 mov     rax, [rsp+0E8h+s]
.text:0000000000008E0A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000008E0E                 setnz   r12b
.text:0000000000008E12
.text:0000000000008E12 loc_8E12:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000008E12                 test    r12b, r12b
.text:0000000000008E15                 jz      loc_9470
.text:0000000000008E1B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008E20                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000008E25                 lea     r9, [rdi+rbp]
.text:0000000000008E29                 setnz   al
.text:0000000000008E2C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000008E30                 mov     r10d, eax
.text:0000000000008E33                 jz      loc_8EE0
.text:0000000000008E39                 mov     rax, [rsp+0E8h+n]
.text:0000000000008E3E                 test    rax, rax
.text:0000000000008E41                 jz      loc_9270
.text:0000000000008E47                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008E4B                 lea     rbx, [rbp+rax+0]
.text:0000000000008E50                 jnz     short loc_8E80
.text:0000000000008E52                 cmp     rax, 1
.text:0000000000008E56                 jbe     short loc_8E80
.text:0000000000008E58                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000008E5D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000008E62                 mov     [rsp+0E8h+ps], r9
.text:0000000000008E67                 call    _strlen
.text:0000000000008E6C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000008E72                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000008E78                 mov     r11, rax
.text:0000000000008E7B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000008E80
.text:0000000000008E80 loc_8E80:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000008E80                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000008E80                 cmp     rbx, r11
.text:0000000000008E83                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000008E88                 ja      loc_9440
.text:0000000000008E8E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000008E93                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000008E98                 mov     rdi, r9         ; s1
.text:0000000000008E9B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000008EA0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000008EA5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000008EAA                 call    _memcmp
.text:0000000000008EAF                 test    eax, eax
.text:0000000000008EB1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000008EB6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000008EBC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000008EC1                 jnz     loc_9440
.text:0000000000008EC7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000008ECC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000008ED2                 jnz     loc_9E55
.text:0000000000008ED8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000008EE0
.text:0000000000008EE0 loc_8EE0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000008EE0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000008EE0                 movzx   ebx, byte ptr [r9]
.text:0000000000008EE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000008EE7                 ja      def_8EFE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000008EED                 lea     rcx, jpt_8EFE
.text:0000000000008EF4                 movzx   edx, bl
.text:0000000000008EF7                 movsxd  rax, ds:(jpt_8EFE - 115ECh)[rcx+rdx*4]
.text:0000000000008EFB                 add     rax, rcx
.text:0000000000008EFE                 jmp     rax             ; switch jump
.text:0000000000008F00 ; ---------------------------------------------------------------------------
.text:0000000000008F00
.text:0000000000008F00 loc_8F00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008F00                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000008F00                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000008F03
.text:0000000000008F03 loc_8F03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008F03                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000008F03                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000008F07                 setnz   al
.text:0000000000008F0A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000008F0E                 jnz     short loc_8F1C
.text:0000000000008F10                 mov     rax, [rsp+0E8h+s]
.text:0000000000008F15                 cmp     byte ptr [rax+1], 0
.text:0000000000008F19                 setnz   al
.text:0000000000008F1C
.text:0000000000008F1C loc_8F1C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000008F1C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000008F21                 setz    dl
.text:0000000000008F24                 test    al, al
.text:0000000000008F26                 jz      loc_9178
.text:0000000000008F2C
.text:0000000000008F2C loc_8F2C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000008F2C                 xor     r12d, r12d
.text:0000000000008F2F                 xor     eax, eax
.text:0000000000008F31                 nop     dword ptr [rax+00000000h]
.text:0000000000008F38
.text:0000000000008F38 loc_8F38:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000008F38                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000008F38                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000008F3D                 jnz     loc_9052
.text:0000000000008F43                 test    dl, dl
.text:0000000000008F45                 jnz     loc_9052
.text:0000000000008F4B
.text:0000000000008F4B loc_8F4B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000008F4B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000008F50                 test    rsi, rsi
.text:0000000000008F53                 jz      short loc_8F69
.text:0000000000008F55                 mov     edx, ebx
.text:0000000000008F57                 shr     dl, 5
.text:0000000000008F5A                 movzx   edx, dl
.text:0000000000008F5D                 mov     edx, [rsi+rdx*4]
.text:0000000000008F60                 bt      edx, ebx
.text:0000000000008F63                 jb      loc_90B3
.text:0000000000008F69
.text:0000000000008F69 loc_8F69:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000008F69                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000008F69                 test    r10b, r10b
.text:0000000000008F6C                 jnz     loc_90B3
.text:0000000000008F72                 xor     eax, 1
.text:0000000000008F75                 add     rbp, 1
.text:0000000000008F79                 and     eax, r8d
.text:0000000000008F7C
.text:0000000000008F7C loc_8F7C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000008F7C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000008F7C                 test    al, al
.text:0000000000008F7E                 jz      short loc_8FA0
.text:0000000000008F80                 cmp     r13, r15
.text:0000000000008F83                 jbe     short loc_8F8A
.text:0000000000008F85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000008F8A
.text:0000000000008F8A loc_8F8A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000008F8A                 lea     rax, [r15+1]
.text:0000000000008F8E                 cmp     r13, rax
.text:0000000000008F91                 jbe     short loc_8F99
.text:0000000000008F93                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000008F99
.text:0000000000008F99 loc_8F99:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000008F99                 add     r15, 2
.text:0000000000008F9D                 xor     r8d, r8d
.text:0000000000008FA0
.text:0000000000008FA0 loc_8FA0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000008FA0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000008FA0                 cmp     r15, r13
.text:0000000000008FA3                 jnb     short loc_8FA9
.text:0000000000008FA5                 mov     [r14+r15], bl
.text:0000000000008FA9
.text:0000000000008FA9 loc_8FA9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000008FA9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000008FAE                 add     r15, 1
.text:0000000000008FB2                 mov     eax, 0
.text:0000000000008FB7                 test    r12b, r12b
.text:0000000000008FBA                 cmovz   edi, eax
.text:0000000000008FBD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000008FC2                 jmp     loc_8DF8
.text:0000000000008FC2 ; ---------------------------------------------------------------------------
.text:0000000000008FC7                 align 10h
.text:0000000000008FD0
.text:0000000000008FD0 loc_8FD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000008FD0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000008FD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000008FD3
.text:0000000000008FD3 loc_8FD3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000008FD3                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000008FD3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000008FD7                 cmp     eax, 2
.text:0000000000008FDA                 jz      loc_9598
.text:0000000000008FE0                 cmp     eax, 5
.text:0000000000008FE3                 jz      loc_9558
.text:0000000000008FE9                 cmp     eax, 2
.text:0000000000008FEC                 mov     ebx, 3Fh ; '?'
.text:0000000000008FF1                 setz    dl
.text:0000000000008FF4                 xor     r12d, r12d
.text:0000000000008FF7                 xor     eax, eax
.text:0000000000008FF9                 jmp     loc_8F38
.text:0000000000008FF9 ; ---------------------------------------------------------------------------
.text:0000000000008FFE                 align 20h
.text:0000000000009000
.text:0000000000009000 loc_9000:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000009000                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009000                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000009003
.text:0000000000009003 loc_9003:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009003                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009003                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000009008                 jz      loc_9510
.text:000000000000900E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000009013                 xor     edx, edx
.text:0000000000009015                 xor     eax, eax
.text:0000000000009017                 mov     ebx, 27h ; '''
.text:000000000000901C                 jmp     loc_8F38
.text:000000000000901C ; ---------------------------------------------------------------------------
.text:0000000000009021                 align 8
.text:0000000000009028
.text:0000000000009028 loc_9028:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009028                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009028                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000902D                 mov     ebx, 74h ; 't'
.text:0000000000009032
.text:0000000000009032 loc_9032:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000009032                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000009032                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009037                 setz    al
.text:000000000000903A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000903E                 jnz     loc_918E
.text:0000000000009044
.text:0000000000009044 loc_9044:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000009044                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000009044                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000009049                 jnz     short loc_90B0
.text:000000000000904B
.text:000000000000904B loc_904B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000904B                 mov     ebx, edx
.text:000000000000904D                 xor     r12d, r12d
.text:0000000000009050                 xor     eax, eax
.text:0000000000009052
.text:0000000000009052 loc_9052:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000009052                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000009052                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009057                 jnz     loc_8F4B
.text:000000000000905D                 jmp     loc_8F69
.text:000000000000905D ; ---------------------------------------------------------------------------
.text:0000000000009062                 align 8
.text:0000000000009068
.text:0000000000009068 loc_9068:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009068                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009068                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000906D                 mov     ebx, 62h ; 'b'
.text:0000000000009072                 jmp     short loc_9044
.text:0000000000009072 ; ---------------------------------------------------------------------------
.text:0000000000009074                 align 8
.text:0000000000009078
.text:0000000000009078 loc_9078:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009078                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009078                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000907D                 jz      loc_9450
.text:0000000000009083                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000009088                 jz      loc_92A0
.text:000000000000908E
.text:000000000000908E loc_908E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000908E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009093                 jz      loc_92A0
.text:0000000000009099                 cmp     [rsp+0E8h+n], 0
.text:000000000000909F                 jnz     loc_945B
.text:00000000000090A5                 mov     ebx, 5Ch ; '\'
.text:00000000000090AA                 nop     word ptr [rax+rax+00h]
.text:00000000000090B0
.text:00000000000090B0 loc_90B0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000090B0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000090B0                 xor     r12d, r12d
.text:00000000000090B3
.text:00000000000090B3 loc_90B3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000090B3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000090B3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000090B8                 setz    dl
.text:00000000000090BB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000090C0                 mov     eax, edx
.text:00000000000090C2                 jnz     loc_9918
.text:00000000000090C8                 mov     eax, r8d
.text:00000000000090CB                 xor     eax, 1
.text:00000000000090CE                 and     al, dl
.text:00000000000090D0                 jz      short loc_9101
.text:00000000000090D2                 cmp     r13, r15
.text:00000000000090D5                 jbe     short loc_90DC
.text:00000000000090D7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000090DC
.text:00000000000090DC loc_90DC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000090DC                 lea     rdx, [r15+1]
.text:00000000000090E0                 cmp     r13, rdx
.text:00000000000090E3                 jbe     short loc_90EB
.text:00000000000090E5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000090EB
.text:00000000000090EB loc_90EB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000090EB                 lea     rdx, [r15+2]
.text:00000000000090EF                 cmp     r13, rdx
.text:00000000000090F2                 jbe     short loc_90FA
.text:00000000000090F4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000090FA
.text:00000000000090FA loc_90FA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000090FA                 add     r15, 3
.text:00000000000090FE                 mov     r8d, eax
.text:0000000000009101
.text:0000000000009101 loc_9101:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000009101                 cmp     r13, r15
.text:0000000000009104                 jbe     short loc_910B
.text:0000000000009106                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000910B
.text:000000000000910B loc_910B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000910B                 add     r15, 1
.text:000000000000910F                 add     rbp, 1
.text:0000000000009113                 jmp     loc_8FA0
.text:0000000000009113 ; ---------------------------------------------------------------------------
.text:0000000000009118                 align 20h
.text:0000000000009120
.text:0000000000009120 loc_9120:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009120                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009120                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000009125                 jnz     loc_92F3
.text:000000000000912B                 xor     edx, edx
.text:000000000000912D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000009132                 jz      loc_904B
.text:0000000000009138                 add     rbp, 1
.text:000000000000913C                 jmp     loc_8DF8
.text:000000000000913C ; ---------------------------------------------------------------------------
.text:0000000000009141                 align 8
.text:0000000000009148
.text:0000000000009148 loc_9148:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009148                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009148                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000914D                 setz    dl
.text:0000000000009150                 xor     eax, eax
.text:0000000000009152                 jmp     loc_8F38
.text:0000000000009152 ; ---------------------------------------------------------------------------
.text:0000000000009157                 align 20h
.text:0000000000009160
.text:0000000000009160 loc_9160:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009160                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009160                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000009165                 mov     ebx, 61h ; 'a'
.text:000000000000916A                 jmp     loc_9044
.text:000000000000916A ; ---------------------------------------------------------------------------
.text:000000000000916F                 align 10h
.text:0000000000009170
.text:0000000000009170 loc_9170:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000009170                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:0000000000009170                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000009175                 setz    dl
.text:0000000000009178
.text:0000000000009178 loc_9178:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000009178                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000009178                 test    rbp, rbp
.text:000000000000917B                 jnz     loc_8F2C
.text:0000000000009181
.text:0000000000009181 loc_9181:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000009181                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000009181                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000009186                 and     al, dl
.text:0000000000009188                 jz      loc_8F38
.text:000000000000918E
.text:000000000000918E loc_918E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000918E                 mov     rbp, r11
.text:0000000000009191                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009199                 jmp     loc_9899
.text:0000000000009199 ; ---------------------------------------------------------------------------
.text:000000000000919E                 align 20h
.text:00000000000091A0
.text:00000000000091A0 loc_91A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091A0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000091A5                 setz    dl
.text:00000000000091A8                 xor     r12d, r12d
.text:00000000000091AB                 jmp     short loc_9181
.text:00000000000091AB ; ---------------------------------------------------------------------------
.text:00000000000091AD                 align 10h
.text:00000000000091B0
.text:00000000000091B0 loc_91B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091B0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000091B5                 mov     ebx, 20h ; ' '
.text:00000000000091BA                 setz    dl
.text:00000000000091BD                 jmp     short loc_9181
.text:00000000000091BD ; ---------------------------------------------------------------------------
.text:00000000000091BF                 align 20h
.text:00000000000091C0
.text:00000000000091C0 loc_91C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091C0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091C0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000091C5                 mov     ebx, 72h ; 'r'
.text:00000000000091CA                 jmp     loc_9032
.text:00000000000091CA ; ---------------------------------------------------------------------------
.text:00000000000091CF                 align 10h
.text:00000000000091D0
.text:00000000000091D0 loc_91D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091D0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091D0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000091D5                 mov     ebx, 66h ; 'f'
.text:00000000000091DA                 jmp     loc_9044
.text:00000000000091DA ; ---------------------------------------------------------------------------
.text:00000000000091DF                 align 20h
.text:00000000000091E0
.text:00000000000091E0 loc_91E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091E0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091E0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000091E5                 mov     ebx, 76h ; 'v'
.text:00000000000091EA                 jmp     loc_9044
.text:00000000000091EA ; ---------------------------------------------------------------------------
.text:00000000000091EF                 align 10h
.text:00000000000091F0
.text:00000000000091F0 loc_91F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000091F0                                         ; DATA XREF: .rodata:jpt_8EFE↓o
.text:00000000000091F0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000091F5                 mov     ebx, 6Eh ; 'n'
.text:00000000000091FA                 jmp     loc_9032
.text:00000000000091FA ; ---------------------------------------------------------------------------
.text:00000000000091FF                 align 20h
.text:0000000000009200
.text:0000000000009200 def_928A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000009200                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000009200                                         ; DATA XREF: ...
.text:0000000000009200                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000009203                 nop     dword ptr [rax+rax+00h]
.text:0000000000009208
.text:0000000000009208 def_8EFE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000009208                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000009208                                         ; DATA XREF: ...
.text:0000000000009208                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000920E                 jnz     loc_95B8
.text:0000000000009214                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000009219                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000921E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000009223                 call    ___ctype_b_loc
.text:0000000000009228                 mov     rcx, [rax]
.text:000000000000922B                 movzx   edx, bl
.text:000000000000922E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000009234                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000923A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000923F                 mov     edi, 1
.text:0000000000009244                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000009248                 and     ax, 4000h
.text:000000000000924C                 setnz   r12b
.text:0000000000009250                 setz    al
.text:0000000000009253                 and     al, [rsp+0E8h+var_DB]
.text:0000000000009257
.text:0000000000009257 loc_9257:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000009257                 test    al, al
.text:0000000000009259                 jnz     loc_9BF1
.text:000000000000925F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009264                 setz    dl
.text:0000000000009267                 jmp     loc_8F38
.text:0000000000009267 ; ---------------------------------------------------------------------------
.text:000000000000926C                 align 10h
.text:0000000000009270
.text:0000000000009270 loc_9270:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000009270                 movzx   ebx, byte ptr [r9]
.text:0000000000009274                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000009277                 ja      short def_928A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000009279                 lea     rcx, jpt_928A
.text:0000000000009280                 movzx   edx, bl
.text:0000000000009283                 movsxd  rax, ds:(jpt_928A - 117E8h)[rcx+rdx*4]
.text:0000000000009287                 add     rax, rcx
.text:000000000000928A                 jmp     rax             ; switch jump
.text:000000000000928A ; ---------------------------------------------------------------------------
.text:000000000000928C                 align 10h
.text:0000000000009290
.text:0000000000009290 loc_9290:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009290                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009290                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000009293                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000009298                 jnz     loc_908E
.text:000000000000929E                 xchg    ax, ax
.text:00000000000092A0
.text:00000000000092A0 loc_92A0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000092A0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000092A0                 mov     edx, 5Ch ; '\'
.text:00000000000092A5                 mov     ebx, 5Ch ; '\'
.text:00000000000092AA                 jmp     loc_9044
.text:00000000000092AA ; ---------------------------------------------------------------------------
.text:00000000000092AF                 align 10h
.text:00000000000092B0
.text:00000000000092B0 loc_92B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000092B0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000092B0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000092B5                 xor     r10d, r10d
.text:00000000000092B8                 mov     ebx, 66h ; 'f'
.text:00000000000092BD                 jmp     loc_9044
.text:00000000000092BD ; ---------------------------------------------------------------------------
.text:00000000000092C2                 align 8
.text:00000000000092C8
.text:00000000000092C8 loc_92C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000092C8                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000092C8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000092CD                 xor     r10d, r10d
.text:00000000000092D0                 mov     ebx, 6Eh ; 'n'
.text:00000000000092D5                 jmp     loc_9032
.text:00000000000092D5 ; ---------------------------------------------------------------------------
.text:00000000000092DA                 align 20h
.text:00000000000092E0
.text:00000000000092E0 loc_92E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000092E0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000092E0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000092E5                 jmp     loc_90B0
.text:00000000000092E5 ; ---------------------------------------------------------------------------
.text:00000000000092EA                 align 10h
.text:00000000000092F0
.text:00000000000092F0 loc_92F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000092F0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000092F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000092F3
.text:00000000000092F3 loc_92F3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000092F3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000092F8                 setz    dl
.text:00000000000092FB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009300                 jnz     loc_9E9A
.text:0000000000009306                 mov     eax, r8d
.text:0000000000009309                 mov     rcx, r15
.text:000000000000930C                 xor     eax, 1
.text:000000000000930F                 and     al, dl
.text:0000000000009311                 jz      short loc_9340
.text:0000000000009313                 cmp     r13, r15
.text:0000000000009316                 jbe     short loc_931D
.text:0000000000009318                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000931D
.text:000000000000931D loc_931D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000931D                 lea     rcx, [r15+1]
.text:0000000000009321                 cmp     r13, rcx
.text:0000000000009324                 jbe     short loc_932C
.text:0000000000009326                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000932C
.text:000000000000932C loc_932C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000932C                 lea     rcx, [r15+2]
.text:0000000000009330                 cmp     r13, rcx
.text:0000000000009333                 ja      loc_9969
.text:0000000000009339
.text:0000000000009339 loc_9339:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000009339                 lea     rcx, [r15+3]
.text:000000000000933D                 mov     r8d, eax
.text:0000000000009340
.text:0000000000009340 loc_9340:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000009340                 cmp     r13, rcx
.text:0000000000009343                 jbe     short loc_934A
.text:0000000000009345                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000934A
.text:000000000000934A loc_934A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000934A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000934F                 lea     r15, [rcx+1]
.text:0000000000009353                 jz      loc_9959
.text:0000000000009359                 lea     rax, [rbp+1]
.text:000000000000935D                 cmp     rax, r11
.text:0000000000009360                 jnb     short loc_937B
.text:0000000000009362                 mov     rax, [rsp+0E8h+s]
.text:0000000000009367                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000936C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000009370                 sub     eax, 30h ; '0'
.text:0000000000009373                 cmp     al, 9
.text:0000000000009375                 jbe     loc_9BA9
.text:000000000000937B
.text:000000000000937B loc_937B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000937B                 mov     eax, r12d
.text:000000000000937E                 mov     ebx, 30h ; '0'
.text:0000000000009383                 xor     r12d, r12d
.text:0000000000009386                 jmp     loc_8F38
.text:0000000000009386 ; ---------------------------------------------------------------------------
.text:000000000000938B                 align 10h
.text:0000000000009390
.text:0000000000009390 loc_9390:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009390                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009390                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000009395                 mov     r12d, r10d
.text:0000000000009398                 setz    dl
.text:000000000000939B                 xor     r10d, r10d
.text:000000000000939E                 xor     eax, eax
.text:00000000000093A0                 jmp     loc_8F38
.text:00000000000093A0 ; ---------------------------------------------------------------------------
.text:00000000000093A5                 align 8
.text:00000000000093A8
.text:00000000000093A8 loc_93A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000093A8                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000093A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000093AD                 setz    dl
.text:00000000000093B0                 xor     r10d, r10d
.text:00000000000093B3                 jmp     loc_9178
.text:00000000000093B3 ; ---------------------------------------------------------------------------
.text:00000000000093B8                 align 20h
.text:00000000000093C0
.text:00000000000093C0 loc_93C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000093C0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000093C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000093C5                 setz    dl
.text:00000000000093C8                 xor     r10d, r10d
.text:00000000000093CB                 xor     r12d, r12d
.text:00000000000093CE                 jmp     loc_9181
.text:00000000000093CE ; ---------------------------------------------------------------------------
.text:00000000000093D3                 align 8
.text:00000000000093D8
.text:00000000000093D8 loc_93D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000093D8                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000093D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000093DD                 mov     r12d, r10d
.text:00000000000093E0                 mov     ebx, 20h ; ' '
.text:00000000000093E5                 setz    dl
.text:00000000000093E8                 xor     r10d, r10d
.text:00000000000093EB                 jmp     loc_9181
.text:00000000000093F0 ; ---------------------------------------------------------------------------
.text:00000000000093F0
.text:00000000000093F0 loc_93F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000093F0                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:00000000000093F0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000093F5                 xor     r10d, r10d
.text:00000000000093F8                 mov     ebx, 72h ; 'r'
.text:00000000000093FD                 jmp     loc_9032
.text:00000000000093FD ; ---------------------------------------------------------------------------
.text:0000000000009402                 align 8
.text:0000000000009408
.text:0000000000009408 loc_9408:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009408                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009408                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000940D                 jmp     loc_90B0
.text:000000000000940D ; ---------------------------------------------------------------------------
.text:0000000000009412                 align 8
.text:0000000000009418
.text:0000000000009418 loc_9418:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009418                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009418                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000941D                 xor     r10d, r10d
.text:0000000000009420                 mov     ebx, 74h ; 't'
.text:0000000000009425                 jmp     loc_9032
.text:0000000000009425 ; ---------------------------------------------------------------------------
.text:000000000000942A                 align 10h
.text:0000000000009430
.text:0000000000009430 loc_9430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000009430                                         ; DATA XREF: .rodata:jpt_928A↓o
.text:0000000000009430                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000009435                 jmp     loc_90B0
.text:0000000000009435 ; ---------------------------------------------------------------------------
.text:000000000000943A                 align 20h
.text:0000000000009440
.text:0000000000009440 loc_9440:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000009440                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000009440                 xor     r10d, r10d
.text:0000000000009443                 jmp     loc_8EE0
.text:0000000000009443 ; ---------------------------------------------------------------------------
.text:0000000000009448                 align 10h
.text:0000000000009450
.text:0000000000009450 loc_9450:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000009450                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009455                 jnz     loc_9DC0
.text:000000000000945B
.text:000000000000945B loc_945B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000945B                 add     rbp, 1
.text:000000000000945F                 mov     eax, r8d
.text:0000000000009462                 xor     r12d, r12d
.text:0000000000009465                 mov     ebx, 5Ch ; '\'
.text:000000000000946A                 jmp     loc_8F7C
.text:000000000000946A ; ---------------------------------------------------------------------------
.text:000000000000946F                 align 10h
.text:0000000000009470
.text:0000000000009470 loc_9470:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000009470                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009475                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000947A                 mov     r12d, r8d
.text:000000000000947D                 mov     rbp, r11
.text:0000000000009480                 setz    dl
.text:0000000000009483                 mov     eax, ebx
.text:0000000000009485                 test    r15, r15
.text:0000000000009488                 setz    cl
.text:000000000000948B                 and     eax, edx
.text:000000000000948D                 and     al, cl
.text:000000000000948F                 jnz     loc_9EF6
.text:0000000000009495                 mov     eax, ebx
.text:0000000000009497                 xor     eax, 1
.text:000000000000949A                 and     dl, al
.text:000000000000949C                 jz      loc_9E0C
.text:00000000000094A2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000094A7                 jz      loc_9E0A
.text:00000000000094AD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000094B2                 jnz     loc_9EAD
.text:00000000000094B8                 test    r13, r13
.text:00000000000094BB                 setz    al
.text:00000000000094BE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000094C4                 setnz   dl
.text:00000000000094C7                 and     al, dl
.text:00000000000094C9                 jz      loc_9EEC
.text:00000000000094CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000094D4
.text:00000000000094D4 loc_94D4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000094D4                 lea     rbx, asc_1155B  ; "'"
.text:00000000000094DB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000094DF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000094E7                 mov     r15d, 1
.text:00000000000094ED                 mov     [rsp+0E8h+n], 1
.text:00000000000094F6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000094FB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000009500                 mov     [rsp+0E8h+var_6C], al
.text:0000000000009504                 jmp     loc_8DE3
.text:0000000000009504 ; ---------------------------------------------------------------------------
.text:0000000000009509                 align 10h
.text:0000000000009510
.text:0000000000009510 loc_9510:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000009510                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009515                 jnz     loc_9DC0
.text:000000000000951B                 test    r13, r13
.text:000000000000951E                 jz      loc_9920
.text:0000000000009524                 xor     edx, edx
.text:0000000000009526                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000952C                 jnz     loc_9920
.text:0000000000009532
.text:0000000000009532 loc_9532:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000009532                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000009532                 mov     [rsp+0E8h+var_98], r13
.text:0000000000009537                 add     r15, 3
.text:000000000000953B                 xor     eax, eax
.text:000000000000953D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000009542                 xor     r8d, r8d
.text:0000000000009545                 mov     r13, rdx
.text:0000000000009548                 mov     ebx, 27h ; '''
.text:000000000000954D                 jmp     loc_8F69
.text:000000000000954D ; ---------------------------------------------------------------------------
.text:0000000000009552                 align 8
.text:0000000000009558
.text:0000000000009558 loc_9558:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000009558                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000955D                 jz      short loc_9580
.text:000000000000955F                 lea     rcx, [rbp+2]
.text:0000000000009563                 cmp     rcx, r11
.text:0000000000009566                 jnb     short loc_9580
.text:0000000000009568                 mov     rax, [rsp+0E8h+s]
.text:000000000000956D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000009572                 jz      loc_9D02
.text:0000000000009578                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009580
.text:0000000000009580 loc_9580:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000009580                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000009580                 xor     edx, edx
.text:0000000000009582                 xor     r12d, r12d
.text:0000000000009585                 xor     eax, eax
.text:0000000000009587                 mov     ebx, 3Fh ; '?'
.text:000000000000958C                 jmp     loc_8F38
.text:000000000000958C ; ---------------------------------------------------------------------------
.text:0000000000009591                 align 8
.text:0000000000009598
.text:0000000000009598 loc_9598:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000009598                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000959D                 jnz     loc_9DC0
.text:00000000000095A3                 xor     r12d, r12d
.text:00000000000095A6                 xor     eax, eax
.text:00000000000095A8                 mov     ebx, 3Fh ; '?'
.text:00000000000095AD                 jmp     loc_8F69
.text:00000000000095AD ; ---------------------------------------------------------------------------
.text:00000000000095B2                 align 8
.text:00000000000095B8
.text:00000000000095B8 loc_95B8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000095B8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000095C0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000095C4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000095D0                 mov     [rsp+0E8h+ps], rax
.text:00000000000095D5                 jnz     short loc_9604
.text:00000000000095D7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000095DC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000095E1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000095E6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000095EB                 call    _strlen
.text:00000000000095F0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000095F6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000095FC                 mov     r11, rax
.text:00000000000095FF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000009604
.text:0000000000009604 loc_9604:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000009604                 lea     rax, [rsp+0E8h+wc]
.text:000000000000960C                 xor     ecx, ecx
.text:000000000000960E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000009612                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000009617                 mov     rbx, rcx
.text:000000000000961A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000009622                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000009627                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000962C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000009634                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000009639                 mov     [rsp+0E8h+var_78], r13
.text:000000000000963E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000009643
.text:0000000000009643 loc_9643:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000009643                 mov     rax, [rsp+0E8h+s]
.text:0000000000009648                 lea     r14, [rbp+rbx+0]
.text:000000000000964D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000009652                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000009657                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000965C                 lea     r13, [rax+r14]
.text:0000000000009660                 sub     rdx, r14
.text:0000000000009663                 mov     rsi, r13
.text:0000000000009666                 call    rpl_mbrtowc
.text:000000000000966B                 test    rax, rax
.text:000000000000966E                 mov     r15, rax
.text:0000000000009671                 jz      short loc_96C1
.text:0000000000009673                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000009677                 jz      loc_9C95
.text:000000000000967D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000009681                 jz      loc_9C21
.text:0000000000009687                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000968C                 setz    al
.text:000000000000968F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000009693                 jnz     loc_9830
.text:0000000000009699
.text:0000000000009699 loc_9699:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000009699                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000009699                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000096A0                 call    _iswprint
.text:00000000000096A5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000096AA                 test    eax, eax
.text:00000000000096AC                 mov     eax, 0
.text:00000000000096B1                 cmovz   r12d, eax
.text:00000000000096B5                 add     rbx, r15
.text:00000000000096B8                 call    _mbsinit
.text:00000000000096BD                 test    eax, eax
.text:00000000000096BF                 jz      short loc_9643
.text:00000000000096C1
.text:00000000000096C1 loc_96C1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000096C1                 mov     edx, r12d
.text:00000000000096C4                 mov     rdi, rbx
.text:00000000000096C7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000096CD                 xor     edx, 1
.text:00000000000096D0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000096D5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000096DB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000096DF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000096E7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000096EC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000096F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000096F6
.text:00000000000096F6 loc_96F6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000096F6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000096F6                 cmp     rdi, 1
.text:00000000000096FA                 jbe     loc_9CFB
.text:0000000000009700
.text:0000000000009700 loc_9700:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000009700                 mov     rcx, rdi
.text:0000000000009703                 xor     esi, esi
.text:0000000000009705                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000970B                 add     rcx, rbp
.text:000000000000970E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000009713                 jmp     loc_97CE
.text:0000000000009713 ; ---------------------------------------------------------------------------
.text:0000000000009718                 align 20h
.text:0000000000009720
.text:0000000000009720 loc_9720:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000009720                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009725                 setz    al
.text:0000000000009728                 test    r9b, r9b
.text:000000000000972B                 jnz     loc_9BE0
.text:0000000000009731                 mov     esi, r8d
.text:0000000000009734                 xor     esi, 1
.text:0000000000009737                 and     al, sil
.text:000000000000973A                 jz      short loc_976B
.text:000000000000973C                 cmp     r13, r15
.text:000000000000973F                 jbe     short loc_9746
.text:0000000000009741                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000009746
.text:0000000000009746 loc_9746:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000009746                 lea     rsi, [r15+1]
.text:000000000000974A                 cmp     r13, rsi
.text:000000000000974D                 jbe     short loc_9755
.text:000000000000974F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000009755
.text:0000000000009755 loc_9755:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000009755                 lea     rsi, [r15+2]
.text:0000000000009759                 cmp     r13, rsi
.text:000000000000975C                 jbe     short loc_9764
.text:000000000000975E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000009764
.text:0000000000009764 loc_9764:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000009764                 add     r15, 3
.text:0000000000009768                 mov     r8d, eax
.text:000000000000976B
.text:000000000000976B loc_976B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000976B                 cmp     r13, r15
.text:000000000000976E                 jbe     short loc_9775
.text:0000000000009770                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000009775
.text:0000000000009775 loc_9775:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000009775                 lea     rax, [r15+1]
.text:0000000000009779                 cmp     r13, rax
.text:000000000000977C                 jbe     short loc_978B
.text:000000000000977E                 mov     eax, ebx
.text:0000000000009780                 shr     al, 6
.text:0000000000009783                 add     eax, 30h ; '0'
.text:0000000000009786                 mov     [r14+r15+1], al
.text:000000000000978B
.text:000000000000978B loc_978B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000978B                 lea     rax, [r15+2]
.text:000000000000978F                 cmp     r13, rax
.text:0000000000009792                 jbe     short loc_97A4
.text:0000000000009794                 mov     eax, ebx
.text:0000000000009796                 shr     al, 3
.text:0000000000009799                 and     eax, 7
.text:000000000000979C                 add     eax, 30h ; '0'
.text:000000000000979F                 mov     [r14+r15+2], al
.text:00000000000097A4
.text:00000000000097A4 loc_97A4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000097A4                 and     ebx, 7
.text:00000000000097A7                 add     rbp, 1
.text:00000000000097AB                 add     r15, 3
.text:00000000000097AF                 add     ebx, 30h ; '0'
.text:00000000000097B2                 cmp     rbp, rcx
.text:00000000000097B5                 jnb     loc_8FA0
.text:00000000000097BB                 mov     esi, edx
.text:00000000000097BD
.text:00000000000097BD loc_97BD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000097BD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000097BD                 cmp     r13, r15
.text:00000000000097C0                 jbe     short loc_97C6
.text:00000000000097C2                 mov     [r14+r15], bl
.text:00000000000097C6
.text:00000000000097C6 loc_97C6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000097C6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000097CA                 add     r15, 1
.text:00000000000097CE
.text:00000000000097CE loc_97CE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000097CE                 test    dl, dl
.text:00000000000097D0                 jnz     loc_9720
.text:00000000000097D6                 mov     eax, esi
.text:00000000000097D8                 xor     eax, 1
.text:00000000000097DB                 and     eax, r8d
.text:00000000000097DE                 test    r10b, r10b
.text:00000000000097E1                 jz      short loc_97F1
.text:00000000000097E3                 cmp     r13, r15
.text:00000000000097E6                 jbe     short loc_97ED
.text:00000000000097E8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000097ED
.text:00000000000097ED loc_97ED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000097ED                 add     r15, 1
.text:00000000000097F1
.text:00000000000097F1 loc_97F1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000097F1                 add     rbp, 1
.text:00000000000097F5                 cmp     rbp, rcx
.text:00000000000097F8                 jnb     loc_8F7C
.text:00000000000097FE                 test    al, al
.text:0000000000009800                 jz      loc_9BFE
.text:0000000000009806                 cmp     r13, r15
.text:0000000000009809                 jbe     short loc_9810
.text:000000000000980B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000009810
.text:0000000000009810 loc_9810:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000009810                 lea     rax, [r15+1]
.text:0000000000009814                 cmp     r13, rax
.text:0000000000009817                 jbe     short loc_981F
.text:0000000000009819                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000981F
.text:000000000000981F loc_981F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000981F                 add     r15, 2
.text:0000000000009823                 xor     r10d, r10d
.text:0000000000009826                 xor     r8d, r8d
.text:0000000000009829                 jmp     short loc_97BD
.text:0000000000009829 ; ---------------------------------------------------------------------------
.text:000000000000982B                 align 10h
.text:0000000000009830
.text:0000000000009830 loc_9830:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000009830                 cmp     r15, 1
.text:0000000000009834                 jz      loc_9699
.text:000000000000983A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000983F                 lea     rcx, [rdi+r15]
.text:0000000000009843                 lea     rdx, [rdi+r14+1]
.text:0000000000009848                 lea     r8, [rcx+r14]
.text:000000000000984C                 jmp     short loc_985D
.text:000000000000984C ; ---------------------------------------------------------------------------
.text:000000000000984E                 align 10h
.text:0000000000009850
.text:0000000000009850 loc_9850:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000009850                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000009850                 add     rdx, 1
.text:0000000000009854                 cmp     r8, rdx
.text:0000000000009857                 jz      loc_9699
.text:000000000000985D
.text:000000000000985D loc_985D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000985D                 movzx   ecx, byte ptr [rdx]
.text:0000000000009860                 sub     ecx, 5Bh ; '['
.text:0000000000009863                 cmp     cl, 21h ; '!'
.text:0000000000009866                 ja      short loc_9850
.text:0000000000009868                 mov     esi, 1
.text:000000000000986D                 shl     rsi, cl
.text:0000000000009870                 mov     rcx, rsi
.text:0000000000009873                 mov     rsi, 20000002Bh
.text:000000000000987D                 test    rcx, rsi
.text:0000000000009880                 jz      short loc_9850
.text:0000000000009882                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009887                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000988C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000009891                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009899
.text:0000000000009899 loc_9899:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000009899                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000009899                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000989E                 jz      short loc_98B0
.text:00000000000098A0                 test    al, al
.text:00000000000098A2                 mov     eax, 4
.text:00000000000098A7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000098AC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000098B0
.text:00000000000098B0 loc_98B0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000098B0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000098B0                 sub     rsp, 8
.text:00000000000098B4                 mov     rcx, rbp
.text:00000000000098B7                 mov     rsi, r13
.text:00000000000098BA                 push    [rsp+0F0h+var_88]
.text:00000000000098BE                 push    [rsp+0F8h+var_80]
.text:00000000000098C2                 mov     rdi, r14
.text:00000000000098C5                 push    0
.text:00000000000098C7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000098CF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000098D4                 mov     rdx, [rsp+108h+s]
.text:00000000000098D9                 and     r9d, 0FFFFFFFDh
.text:00000000000098DD                 call    quotearg_buffer_restyled
.text:00000000000098E2                 add     rsp, 20h
.text:00000000000098E6                 mov     r15, rax
.text:00000000000098E9
.text:00000000000098E9 loc_98E9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000098E9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000098E9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000098F1                 xor     rbx, fs:28h
.text:00000000000098FA                 mov     rax, r15
.text:00000000000098FD                 jnz     loc_9F03
.text:0000000000009903                 add     rsp, 0B8h
.text:000000000000990A                 pop     rbx
.text:000000000000990B                 pop     rbp
.text:000000000000990C                 pop     r12
.text:000000000000990E                 pop     r13
.text:0000000000009910                 pop     r14
.text:0000000000009912                 pop     r15
.text:0000000000009914                 retn
.text:0000000000009914 ; ---------------------------------------------------------------------------
.text:0000000000009915                 align 8
.text:0000000000009918
.text:0000000000009918 loc_9918:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000009918                 mov     rbp, r11
.text:000000000000991B                 jmp     loc_9899
.text:0000000000009920 ; ---------------------------------------------------------------------------
.text:0000000000009920
.text:0000000000009920 loc_9920:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000009920                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000009920                 cmp     r13, r15
.text:0000000000009923                 jbe     short loc_992A
.text:0000000000009925                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000992A
.text:000000000000992A loc_992A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000992A                 lea     rax, [r15+1]
.text:000000000000992E                 cmp     r13, rax
.text:0000000000009931                 jbe     short loc_9939
.text:0000000000009933                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000009939
.text:0000000000009939 loc_9939:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000009939                 lea     rax, [r15+2]
.text:000000000000993D                 cmp     r13, rax
.text:0000000000009940                 jbe     loc_9F32
.text:0000000000009946                 mov     rdx, r13
.text:0000000000009949                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000994F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000009954                 jmp     loc_9532
.text:0000000000009959 ; ---------------------------------------------------------------------------
.text:0000000000009959
.text:0000000000009959 loc_9959:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000009959                 mov     eax, r12d
.text:000000000000995C                 mov     ebx, 30h ; '0'
.text:0000000000009961                 xor     r12d, r12d
.text:0000000000009964                 jmp     loc_8F69
.text:0000000000009969 ; ---------------------------------------------------------------------------
.text:0000000000009969
.text:0000000000009969 loc_9969:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000009969                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000996F                 jmp     loc_9339
.text:0000000000009974 ; ---------------------------------------------------------------------------
.text:0000000000009974
.text:0000000000009974 loc_9974:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009974                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009974                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000009976                 jnz     loc_8DA3        ; jumptable 00000000000121F1 case 1
.text:000000000000997C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009981
.text:0000000000009981 loc_9981:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000009981                 test    r13, r13
.text:0000000000009984                 jnz     loc_9F1A
.text:000000000000998A                 lea     rax, asc_1155B  ; "'"
.text:0000000000009991                 mov     [rsp+0E8h+var_98], 0
.text:000000000000999A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000999F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000099A4                 xor     r12d, r12d
.text:00000000000099A7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000099AC                 mov     [rsp+0E8h+n], 1
.text:00000000000099B5                 mov     [rsp+0E8h+s2], rax
.text:00000000000099BA                 mov     r15d, 1
.text:00000000000099C0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000099C8                 jmp     loc_8DE3
.text:00000000000099C8 ; ---------------------------------------------------------------------------
.text:00000000000099CD                 align 10h
.text:00000000000099D0
.text:00000000000099D0 loc_99D0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000099D0                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:00000000000099D0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000099D2                 jnz     loc_9DCD
.text:00000000000099D8                 test    r13, r13
.text:00000000000099DB                 jz      loc_9C06
.text:00000000000099E1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000099E5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000099EA                 xor     r12d, r12d
.text:00000000000099ED                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000099F2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000099FB
.text:00000000000099FB loc_99FB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000099FB                 lea     rax, aTz+3      ; "\""
.text:0000000000009A02                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000009A07                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009A0C                 mov     [rsp+0E8h+n], 1
.text:0000000000009A15                 mov     r15d, 1
.text:0000000000009A1B                 mov     [rsp+0E8h+s2], rax
.text:0000000000009A20                 jmp     loc_8DE3
.text:0000000000009A25 ; ---------------------------------------------------------------------------
.text:0000000000009A25
.text:0000000000009A25 loc_9A25:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009A25                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009A25                 lea     rax, aTz+3      ; jumptable 00000000000121F1 case 6
.text:0000000000009A2C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009A31                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009A36                 xor     r12d, r12d
.text:0000000000009A39                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009A42                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009A47                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009A4C                 mov     [rsp+0E8h+n], 1
.text:0000000000009A55                 xor     r15d, r15d
.text:0000000000009A58                 mov     [rsp+0E8h+s2], rax
.text:0000000000009A5D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000009A65                 jmp     loc_8DE3
.text:0000000000009A6A ; ---------------------------------------------------------------------------
.text:0000000000009A6A
.text:0000000000009A6A loc_9A6A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009A6A                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009A6A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000009A6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009A74                 xor     r12d, r12d
.text:0000000000009A77                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009A80                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000009A85                 xor     r15d, r15d
.text:0000000000009A88                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009A8D                 mov     [rsp+0E8h+n], 0
.text:0000000000009A96                 mov     [rsp+0E8h+s2], 0
.text:0000000000009A9F                 jmp     loc_8DE3
.text:0000000000009AA4 ; ---------------------------------------------------------------------------
.text:0000000000009AA4
.text:0000000000009AA4 loc_9AA4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009AA4                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009AA4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000009AA9                 jz      short loc_9B01
.text:0000000000009AAB                 lea     rsi, asc_1155D  ; "`"
.text:0000000000009AB2                 xor     edi, edi        ; domainname
.text:0000000000009AB4                 mov     edx, 5          ; category
.text:0000000000009AB9                 call    _dcgettext
.text:0000000000009ABE                 mov     rcx, rax
.text:0000000000009AC1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000009AC6                 lea     rax, asc_1155D  ; "`"
.text:0000000000009ACD                 cmp     rcx, rax
.text:0000000000009AD0                 jz      loc_9E6E
.text:0000000000009AD6
.text:0000000000009AD6 loc_9AD6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000009AD6                 lea     rsi, asc_1155B  ; "'"
.text:0000000000009ADD                 xor     edi, edi        ; domainname
.text:0000000000009ADF                 mov     edx, 5          ; category
.text:0000000000009AE4                 call    _dcgettext
.text:0000000000009AE9                 mov     rcx, rax
.text:0000000000009AEC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000009AF1                 lea     rax, asc_1155B  ; "'"
.text:0000000000009AF8                 cmp     rcx, rax
.text:0000000000009AFB                 jz      loc_9E84
.text:0000000000009B01
.text:0000000000009B01 loc_9B01:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000009B01                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000009B01                 xor     r15d, r15d
.text:0000000000009B04                 test    ebx, ebx
.text:0000000000009B06                 jz      loc_9CCD
.text:0000000000009B0C
.text:0000000000009B0C loc_9B0C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000009B0C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000009B0C                 test    ebx, ebx
.text:0000000000009B0E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000009B13                 setnz   [rsp+0E8h+var_D9]
.text:0000000000009B18                 xor     r12d, r12d
.text:0000000000009B1B                 mov     rdi, rbx        ; s
.text:0000000000009B1E                 call    _strlen
.text:0000000000009B23                 mov     [rsp+0E8h+s2], rbx
.text:0000000000009B28                 mov     [rsp+0E8h+n], rax
.text:0000000000009B2D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009B32                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009B37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009B40                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009B45                 jmp     loc_8DE3
.text:0000000000009B4A ; ---------------------------------------------------------------------------
.text:0000000000009B4A
.text:0000000000009B4A loc_9B4A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009B4A                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009B4A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000009B4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009B54                 xor     r12d, r12d
.text:0000000000009B57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009B60                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000009B65                 xor     r15d, r15d
.text:0000000000009B68                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009B6D                 mov     [rsp+0E8h+n], 0
.text:0000000000009B76                 mov     [rsp+0E8h+s2], 0
.text:0000000000009B7F                 jmp     loc_8DE3
.text:0000000000009B84 ; ---------------------------------------------------------------------------
.text:0000000000009B84
.text:0000000000009B84 loc_9B84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009B84                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009B84                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000009B89                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009B8E                 xor     r12d, r12d
.text:0000000000009B91                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009B9A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009B9F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009BA4                 jmp     loc_8DC3
.text:0000000000009BA9 ; ---------------------------------------------------------------------------
.text:0000000000009BA9
.text:0000000000009BA9 loc_9BA9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000009BA9                 cmp     r13, r15
.text:0000000000009BAC                 jbe     short loc_9BB3
.text:0000000000009BAE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000009BB3
.text:0000000000009BB3 loc_9BB3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000009BB3                 lea     rax, [rcx+2]
.text:0000000000009BB7                 cmp     r13, rax
.text:0000000000009BBA                 jbe     short loc_9BC2
.text:0000000000009BBC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000009BC2
.text:0000000000009BC2 loc_9BC2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000009BC2                 mov     eax, r12d
.text:0000000000009BC5                 lea     r15, [rcx+3]
.text:0000000000009BC9                 xor     r12d, r12d
.text:0000000000009BCC                 mov     ebx, 30h ; '0'
.text:0000000000009BD1                 jmp     loc_8F38
.text:0000000000009BD1 ; ---------------------------------------------------------------------------
.text:0000000000009BD6                 align 20h
.text:0000000000009BE0
.text:0000000000009BE0 loc_9BE0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000009BE0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009BE5                 mov     rbp, r11
.text:0000000000009BE8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009BEC                 jmp     loc_9899
.text:0000000000009BF1 ; ---------------------------------------------------------------------------
.text:0000000000009BF1
.text:0000000000009BF1 loc_9BF1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000009BF1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009BF6                 xor     r12d, r12d
.text:0000000000009BF9                 jmp     loc_9700
.text:0000000000009BFE ; ---------------------------------------------------------------------------
.text:0000000000009BFE
.text:0000000000009BFE loc_9BFE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000009BFE                 xor     r10d, r10d
.text:0000000000009C01                 jmp     loc_97BD
.text:0000000000009C06 ; ---------------------------------------------------------------------------
.text:0000000000009C06
.text:0000000000009C06 loc_9C06:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000009C06                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009C0F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009C14                 xor     r12d, r12d
.text:0000000000009C17                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009C1C                 jmp     loc_99FB
.text:0000000000009C21 ; ---------------------------------------------------------------------------
.text:0000000000009C21
.text:0000000000009C21 loc_9C21:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000009C21                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009C26                 mov     rsi, r14
.text:0000000000009C29                 mov     rcx, r13
.text:0000000000009C2C                 mov     rax, rbx
.text:0000000000009C2F                 mov     rdi, rbx
.text:0000000000009C32                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000009C38                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000009C3D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000009C45                 cmp     rsi, r11
.text:0000000000009C48                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000009C4E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000009C56                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009C5B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000009C60                 jnb     short loc_9C88
.text:0000000000009C62                 cmp     byte ptr [rcx], 0
.text:0000000000009C65                 jnz     short loc_9C77
.text:0000000000009C67                 jmp     short loc_9C88
.text:0000000000009C67 ; ---------------------------------------------------------------------------
.text:0000000000009C69                 align 10h
.text:0000000000009C70
.text:0000000000009C70 loc_9C70:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000009C70                 cmp     byte ptr [r9+rax], 0
.text:0000000000009C75                 jz      short loc_9C85
.text:0000000000009C77
.text:0000000000009C77 loc_9C77:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000009C77                 add     rax, 1
.text:0000000000009C7B                 lea     rdx, [rbp+rax+0]
.text:0000000000009C80                 cmp     r11, rdx
.text:0000000000009C83                 ja      short loc_9C70
.text:0000000000009C85
.text:0000000000009C85 loc_9C85:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000009C85                 mov     rdi, rax
.text:0000000000009C88
.text:0000000000009C88 loc_9C88:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000009C88                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000009C88                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009C8D                 xor     r12d, r12d
.text:0000000000009C90                 jmp     loc_96F6
.text:0000000000009C95 ; ---------------------------------------------------------------------------
.text:0000000000009C95
.text:0000000000009C95 loc_9C95:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000009C95                 mov     rdi, rbx
.text:0000000000009C98                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000009C9E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000009CA3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000009CA9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000009CB1                 xor     r12d, r12d
.text:0000000000009CB4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000009CB9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000009CBE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000009CC3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000009CC8                 jmp     loc_96F6
.text:0000000000009CCD ; ---------------------------------------------------------------------------
.text:0000000000009CCD
.text:0000000000009CCD loc_9CCD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000009CCD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000009CD2                 movzx   eax, byte ptr [rdx]
.text:0000000000009CD5                 test    al, al
.text:0000000000009CD7                 jz      loc_9B0C
.text:0000000000009CDD                 nop     dword ptr [rax]
.text:0000000000009CE0
.text:0000000000009CE0 loc_9CE0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000009CE0                 cmp     r13, r15
.text:0000000000009CE3                 jbe     short loc_9CE9
.text:0000000000009CE5                 mov     [r14+r15], al
.text:0000000000009CE9
.text:0000000000009CE9 loc_9CE9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000009CE9                 add     r15, 1
.text:0000000000009CED                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000009CF2                 test    al, al
.text:0000000000009CF4                 jnz     short loc_9CE0
.text:0000000000009CF6                 jmp     loc_9B0C
.text:0000000000009CFB ; ---------------------------------------------------------------------------
.text:0000000000009CFB
.text:0000000000009CFB loc_9CFB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000009CFB                 mov     eax, edx
.text:0000000000009CFD                 jmp     loc_9257
.text:0000000000009D02 ; ---------------------------------------------------------------------------
.text:0000000000009D02
.text:0000000000009D02 loc_9D02:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000009D02                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000009D06                 cmp     bl, 3Eh ; '>'
.text:0000000000009D09                 ja      loc_9580
.text:0000000000009D0F                 mov     rax, 7000A38200000000h
.text:0000000000009D19                 bt      rax, rbx
.text:0000000000009D1D                 jnb     loc_9580
.text:0000000000009D23                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000009D28                 jnz     loc_9F12
.text:0000000000009D2E                 cmp     r13, r15
.text:0000000000009D31                 jbe     short loc_9D38
.text:0000000000009D33                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000009D38
.text:0000000000009D38 loc_9D38:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000009D38                 lea     rax, [r15+1]
.text:0000000000009D3C                 cmp     r13, rax
.text:0000000000009D3F                 jbe     short loc_9D47
.text:0000000000009D41                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000009D47
.text:0000000000009D47 loc_9D47:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000009D47                 lea     rax, [r15+2]
.text:0000000000009D4B                 cmp     r13, rax
.text:0000000000009D4E                 jbe     short loc_9D56
.text:0000000000009D50                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000009D56
.text:0000000000009D56 loc_9D56:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000009D56                 lea     rax, [r15+3]
.text:0000000000009D5A                 cmp     r13, rax
.text:0000000000009D5D                 jbe     short loc_9D65
.text:0000000000009D5F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000009D65
.text:0000000000009D65 loc_9D65:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000009D65                 add     r15, 4
.text:0000000000009D69                 xor     edx, edx
.text:0000000000009D6B                 xor     r12d, r12d
.text:0000000000009D6E                 xor     eax, eax
.text:0000000000009D70                 mov     rbp, rcx
.text:0000000000009D73                 jmp     loc_8F38
.text:0000000000009D78 ; ---------------------------------------------------------------------------
.text:0000000000009D78
.text:0000000000009D78 loc_9D78:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000009D78                                         ; DATA XREF: .rodata:jpt_8DA1↓o
.text:0000000000009D78                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000009D7A                 jz      loc_9F08
.text:0000000000009D80                 lea     rax, asc_1155B  ; "'"
.text:0000000000009D87                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009D8C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009D91                 xor     r12d, r12d
.text:0000000000009D94                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009D9D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009DA2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009DA7                 mov     [rsp+0E8h+n], 1
.text:0000000000009DB0                 xor     r15d, r15d
.text:0000000000009DB3                 mov     [rsp+0E8h+s2], rax
.text:0000000000009DB8                 jmp     loc_8DE3
.text:0000000000009DB8 ; ---------------------------------------------------------------------------
.text:0000000000009DBD                 align 20h
.text:0000000000009DC0
.text:0000000000009DC0 loc_9DC0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000009DC0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000009DC0                 mov     rbp, r11
.text:0000000000009DC3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000009DC8                 jmp     loc_9899
.text:0000000000009DCD ; ---------------------------------------------------------------------------
.text:0000000000009DCD
.text:0000000000009DCD loc_9DCD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000009DCD                 lea     rax, aTz+3      ; "\""
.text:0000000000009DD4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009DD9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000009DDE                 xor     r12d, r12d
.text:0000000000009DE1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009DEA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000009DEF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000009DF4                 mov     [rsp+0E8h+n], 1
.text:0000000000009DFD                 xor     r15d, r15d
.text:0000000000009E00                 mov     [rsp+0E8h+s2], rax
.text:0000000000009E05                 jmp     loc_8DE3
.text:0000000000009E0A ; ---------------------------------------------------------------------------
.text:0000000000009E0A
.text:0000000000009E0A loc_9E0A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000009E0A                 mov     eax, edx
.text:0000000000009E0C
.text:0000000000009E0C loc_9E0C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000009E0C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000009E0C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000009E11                 test    rbx, rbx
.text:0000000000009E14                 jz      short loc_9E42
.text:0000000000009E16                 test    al, al
.text:0000000000009E18                 jz      short loc_9E42
.text:0000000000009E1A                 movzx   ecx, byte ptr [rbx]
.text:0000000000009E1D                 mov     rax, rbx
.text:0000000000009E20                 test    cl, cl
.text:0000000000009E22                 jz      short loc_9E42
.text:0000000000009E24                 mov     rdx, r15
.text:0000000000009E27                 sub     rax, r15
.text:0000000000009E2A
.text:0000000000009E2A loc_9E2A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000009E2A                 cmp     r13, rdx
.text:0000000000009E2D                 jbe     short loc_9E33
.text:0000000000009E2F                 mov     [r14+rdx], cl
.text:0000000000009E33
.text:0000000000009E33 loc_9E33:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000009E33                 add     rdx, 1
.text:0000000000009E37                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000009E3B                 test    cl, cl
.text:0000000000009E3D                 jnz     short loc_9E2A
.text:0000000000009E3F                 mov     r15, rdx
.text:0000000000009E42
.text:0000000000009E42 loc_9E42:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000009E42                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000009E42                 cmp     r13, r15
.text:0000000000009E45                 jbe     loc_98E9
.text:0000000000009E4B                 mov     byte ptr [r14+r15], 0
.text:0000000000009E50                 jmp     loc_98E9
.text:0000000000009E55 ; ---------------------------------------------------------------------------
.text:0000000000009E55
.text:0000000000009E55 loc_9E55:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000009E55                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000009E5A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009E5F                 mov     rbp, r11
.text:0000000000009E62                 setz    al
.text:0000000000009E65                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009E69                 jmp     loc_9899
.text:0000000000009E6E ; ---------------------------------------------------------------------------
.text:0000000000009E6E
.text:0000000000009E6E loc_9E6E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000009E6E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000009E72                 mov     rdi, rcx
.text:0000000000009E75                 call    gettext_quote
.text:0000000000009E7A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000009E7F                 jmp     loc_9AD6
.text:0000000000009E84 ; ---------------------------------------------------------------------------
.text:0000000000009E84
.text:0000000000009E84 loc_9E84:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000009E84                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000009E88                 mov     rdi, rcx
.text:0000000000009E8B                 call    gettext_quote
.text:0000000000009E90                 mov     [rsp+0E8h+var_88], rax
.text:0000000000009E95                 jmp     loc_9B01
.text:0000000000009E9A ; ---------------------------------------------------------------------------
.text:0000000000009E9A
.text:0000000000009E9A loc_9E9A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000009E9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000009E9F                 mov     rbp, r11
.text:0000000000009EA2                 mov     eax, edx
.text:0000000000009EA4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000009EA8                 jmp     loc_9899
.text:0000000000009EAD ; ---------------------------------------------------------------------------
.text:0000000000009EAD
.text:0000000000009EAD loc_9EAD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000009EAD                 sub     rsp, 8
.text:0000000000009EB1                 mov     r8d, 5
.text:0000000000009EB7                 mov     rcx, r11
.text:0000000000009EBA                 push    [rsp+0F0h+var_88]
.text:0000000000009EBE                 push    [rsp+0F8h+var_80]
.text:0000000000009EC2                 mov     rdi, r14
.text:0000000000009EC5                 push    [rsp+100h+var_C8]
.text:0000000000009EC9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000009ED1                 mov     rdx, [rsp+108h+s]
.text:0000000000009ED6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000009EDB                 call    quotearg_buffer_restyled
.text:0000000000009EE0                 add     rsp, 20h
.text:0000000000009EE4                 mov     r15, rax
.text:0000000000009EE7                 jmp     loc_98E9
.text:0000000000009EEC ; ---------------------------------------------------------------------------
.text:0000000000009EEC
.text:0000000000009EEC loc_9EEC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000009EEC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000009EF1                 jmp     loc_9E0C
.text:0000000000009EF6 ; ---------------------------------------------------------------------------
.text:0000000000009EF6
.text:0000000000009EF6 loc_9EF6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000009EF6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000009EFE                 jmp     loc_9899
.text:0000000000009F03 ; ---------------------------------------------------------------------------
.text:0000000000009F03
.text:0000000000009F03 loc_9F03:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000009F03                 call    ___stack_chk_fail
.text:0000000000009F08 ; ---------------------------------------------------------------------------
.text:0000000000009F08
.text:0000000000009F08 loc_9F08:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000009F08                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000009F0D                 jmp     loc_9981
.text:0000000000009F12 ; ---------------------------------------------------------------------------
.text:0000000000009F12
.text:0000000000009F12 loc_9F12:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000009F12                 mov     rbp, r11
.text:0000000000009F15                 jmp     loc_98B0
.text:0000000000009F1A ; ---------------------------------------------------------------------------
.text:0000000000009F1A
.text:0000000000009F1A loc_9F1A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000009F1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000009F1F                 xor     eax, eax
.text:0000000000009F21                 xor     r12d, r12d
.text:0000000000009F24                 mov     [rsp+0E8h+var_98], 0
.text:0000000000009F2D                 jmp     loc_94D4
.text:0000000000009F32 ; ---------------------------------------------------------------------------
.text:0000000000009F32
.text:0000000000009F32 loc_9F32:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000009F32                 mov     rdx, r13
.text:0000000000009F35                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000009F3A                 jmp     loc_9532
.text:0000000000009F3F ; ---------------------------------------------------------------------------
.text:0000000000009F3F
.text:0000000000009F3F def_8DA1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000009F3F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000009F3F ; } // starts at 8D10
.text:0000000000009F3F quotearg_buffer_restyled endp
.text:0000000000009F3F
.text:0000000000009F3F ; ---------------------------------------------------------------------------
.text:0000000000009F44                 align 10h
.text:0000000000009F50
.text:0000000000009F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F50
.text:0000000000009F50
.text:0000000000009F50 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000009F50                                         ; quotearg_n_mem+7↓j ...
.text:0000000000009F50
.text:0000000000009F50 var_50          = qword ptr -50h
.text:0000000000009F50 var_48          = qword ptr -48h
.text:0000000000009F50 var_40          = dword ptr -40h
.text:0000000000009F50 var_3C          = dword ptr -3Ch
.text:0000000000009F50
.text:0000000000009F50 ; __unwind {
.text:0000000000009F50                 push    r15
.text:0000000000009F52                 push    r14
.text:0000000000009F54                 movsxd  r15, edi
.text:0000000000009F57                 push    r13
.text:0000000000009F59                 push    r12
.text:0000000000009F5B                 mov     r14, rdx
.text:0000000000009F5E                 push    rbp
.text:0000000000009F5F                 push    rbx
.text:0000000000009F60                 mov     rbp, rcx
.text:0000000000009F63                 sub     rsp, 28h
.text:0000000000009F67                 mov     [rsp+58h+var_50], rsi
.text:0000000000009F6C                 call    ___errno_location
.text:0000000000009F71                 mov     r13, rax
.text:0000000000009F74                 mov     eax, [rax]
.text:0000000000009F76                 test    r15d, r15d
.text:0000000000009F79                 mov     rbx, cs:slotvec
.text:0000000000009F80                 mov     [rsp+58h+var_40], eax
.text:0000000000009F84                 js      loc_A0F1
.text:0000000000009F8A                 cmp     cs:nslots, r15d
.text:0000000000009F91                 jg      short loc_9FF5
.text:0000000000009F93                 cmp     r15d, 7FFFFFFFh
.text:0000000000009F9A                 jz      loc_A0F6
.text:0000000000009FA0                 lea     r12d, [r15+1]
.text:0000000000009FA4                 lea     rax, slotvec0
.text:0000000000009FAB                 movsxd  rsi, r12d
.text:0000000000009FAE                 shl     rsi, 4
.text:0000000000009FB2                 cmp     rbx, rax
.text:0000000000009FB5                 jz      loc_A0D0
.text:0000000000009FBB                 mov     rdi, rbx
.text:0000000000009FBE                 call    xrealloc
.text:0000000000009FC3                 mov     rbx, rax
.text:0000000000009FC6                 mov     cs:slotvec, rax
.text:0000000000009FCD
.text:0000000000009FCD loc_9FCD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000009FCD                 movsxd  rdi, cs:nslots
.text:0000000000009FD4                 mov     edx, r12d
.text:0000000000009FD7                 xor     esi, esi        ; c
.text:0000000000009FD9                 sub     edx, edi
.text:0000000000009FDB                 shl     rdi, 4
.text:0000000000009FDF                 movsxd  rdx, edx
.text:0000000000009FE2                 add     rdi, rbx        ; s
.text:0000000000009FE5                 shl     rdx, 4          ; n
.text:0000000000009FE9                 call    _memset
.text:0000000000009FEE                 mov     cs:nslots, r12d
.text:0000000000009FF5
.text:0000000000009FF5 loc_9FF5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000009FF5                 mov     eax, [rbp+4]
.text:0000000000009FF8                 shl     r15, 4
.text:0000000000009FFC                 sub     rsp, 8
.text:000000000000A000                 add     rbx, r15
.text:000000000000A003                 lea     r15, [rbp+8]
.text:000000000000A007                 mov     r8d, [rbp+0]
.text:000000000000A00B                 mov     r11, [rbx]
.text:000000000000A00E                 mov     r12, [rbx+8]
.text:000000000000A012                 mov     rcx, r14
.text:000000000000A015                 or      eax, 1
.text:000000000000A018                 mov     [rsp+60h+var_3C], eax
.text:000000000000A01C                 push    qword ptr [rbp+30h]
.text:000000000000A01F                 mov     r9d, eax
.text:000000000000A022                 push    qword ptr [rbp+28h]
.text:000000000000A025                 push    r15
.text:000000000000A027                 mov     rsi, r11
.text:000000000000A02A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000A02F                 mov     rdi, r12
.text:000000000000A032                 mov     [rsp+78h+var_48], r11
.text:000000000000A037                 call    quotearg_buffer_restyled
.text:000000000000A03C                 add     rsp, 20h
.text:000000000000A040                 mov     r11, [rsp+58h+var_48]
.text:000000000000A045                 cmp     r11, rax
.text:000000000000A048                 ja      short loc_A0B1
.text:000000000000A04A                 lea     rsi, [rax+1]
.text:000000000000A04E                 lea     rax, slot0
.text:000000000000A055                 cmp     r12, rax
.text:000000000000A058                 mov     [rbx], rsi
.text:000000000000A05B                 jz      short loc_A06F
.text:000000000000A05D                 mov     rdi, r12        ; ptr
.text:000000000000A060                 mov     [rsp+58h+var_48], rsi
.text:000000000000A065                 call    _free
.text:000000000000A06A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000A06F
.text:000000000000A06F loc_A06F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000A06F                 mov     rdi, rsi
.text:000000000000A072                 mov     [rsp+58h+var_48], rsi
.text:000000000000A077                 call    xmalloc
.text:000000000000A07C                 sub     rsp, 8
.text:000000000000A080                 mov     [rbx+8], rax
.text:000000000000A084                 mov     r8d, [rbp+0]
.text:000000000000A088                 push    qword ptr [rbp+30h]
.text:000000000000A08B                 push    qword ptr [rbp+28h]
.text:000000000000A08E                 mov     rcx, r14
.text:000000000000A091                 push    r15
.text:000000000000A093                 mov     r9d, [rsp+78h+var_3C]
.text:000000000000A098                 mov     rdi, rax
.text:000000000000A09B                 mov     rdx, [rsp+78h+var_50]
.text:000000000000A0A0                 mov     rsi, [rsp+78h+var_48]
.text:000000000000A0A5                 mov     r12, rax
.text:000000000000A0A8                 call    quotearg_buffer_restyled
.text:000000000000A0AD                 add     rsp, 20h
.text:000000000000A0B1
.text:000000000000A0B1 loc_A0B1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:000000000000A0B1                 mov     eax, [rsp+58h+var_40]
.text:000000000000A0B5                 mov     [r13+0], eax
.text:000000000000A0B9                 add     rsp, 28h
.text:000000000000A0BD                 mov     rax, r12
.text:000000000000A0C0                 pop     rbx
.text:000000000000A0C1                 pop     rbp
.text:000000000000A0C2                 pop     r12
.text:000000000000A0C4                 pop     r13
.text:000000000000A0C6                 pop     r14
.text:000000000000A0C8                 pop     r15
.text:000000000000A0CA                 retn
.text:000000000000A0CA ; ---------------------------------------------------------------------------
.text:000000000000A0CB                 align 10h
.text:000000000000A0D0
.text:000000000000A0D0 loc_A0D0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:000000000000A0D0                 xor     edi, edi
.text:000000000000A0D2                 call    xrealloc
.text:000000000000A0D7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000A0DF                 mov     rbx, rax
.text:000000000000A0E2                 mov     cs:slotvec, rax
.text:000000000000A0E9                 movups  xmmword ptr [rax], xmm0
.text:000000000000A0EC                 jmp     loc_9FCD
.text:000000000000A0F1 ; ---------------------------------------------------------------------------
.text:000000000000A0F1
.text:000000000000A0F1 loc_A0F1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:000000000000A0F1                 call    _abort
.text:000000000000A0F6 ; ---------------------------------------------------------------------------
.text:000000000000A0F6
.text:000000000000A0F6 loc_A0F6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:000000000000A0F6                 call    xalloc_die
.text:000000000000A0F6 ; } // starts at 9F50
.text:000000000000A0F6 quotearg_n_options endp
.text:000000000000A0F6
.text:000000000000A0F6 ; ---------------------------------------------------------------------------
.text:000000000000A0FB                 align 20h
.text:000000000000A100
.text:000000000000A100 ; =============== S U B R O U T I N E =======================================
.text:000000000000A100
.text:000000000000A100 ; Attributes: info_from_lumina
.text:000000000000A100
.text:000000000000A100 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:000000000000A100                 public clone_quoting_options
.text:000000000000A100 clone_quoting_options proc near
.text:000000000000A100 ; __unwind {
.text:000000000000A100                 push    r12
.text:000000000000A102                 push    rbp
.text:000000000000A103                 push    rbx
.text:000000000000A104                 mov     rbx, rdi
.text:000000000000A107                 call    ___errno_location
.text:000000000000A10C                 mov     r12d, [rax]
.text:000000000000A10F                 mov     rbp, rax
.text:000000000000A112                 lea     rax, default_quoting_options
.text:000000000000A119                 test    rbx, rbx
.text:000000000000A11C                 mov     esi, 38h ; '8'  ; n
.text:000000000000A121                 cmovz   rbx, rax
.text:000000000000A125                 mov     rdi, rbx        ; src
.text:000000000000A128                 call    xmemdup
.text:000000000000A12D                 mov     [rbp+0], r12d
.text:000000000000A131                 pop     rbx
.text:000000000000A132                 pop     rbp
.text:000000000000A133                 pop     r12
.text:000000000000A135                 retn
.text:000000000000A135 ; } // starts at A100
.text:000000000000A135 clone_quoting_options endp
.text:000000000000A135
.text:000000000000A135 ; ---------------------------------------------------------------------------
.text:000000000000A136                 align 20h
.text:000000000000A140
.text:000000000000A140 ; =============== S U B R O U T I N E =======================================
.text:000000000000A140
.text:000000000000A140
.text:000000000000A140                 public get_quoting_style
.text:000000000000A140 get_quoting_style proc near
.text:000000000000A140 ; __unwind {
.text:000000000000A140                 lea     rax, default_quoting_options
.text:000000000000A147                 test    rdi, rdi
.text:000000000000A14A                 cmovz   rdi, rax
.text:000000000000A14E                 mov     eax, [rdi]
.text:000000000000A150                 retn
.text:000000000000A150 ; } // starts at A140
.text:000000000000A150 get_quoting_style endp
.text:000000000000A150
.text:000000000000A150 ; ---------------------------------------------------------------------------
.text:000000000000A151                 align 20h
.text:000000000000A160
.text:000000000000A160 ; =============== S U B R O U T I N E =======================================
.text:000000000000A160
.text:000000000000A160
.text:000000000000A160                 public set_quoting_style
.text:000000000000A160 set_quoting_style proc near
.text:000000000000A160 ; __unwind {
.text:000000000000A160                 lea     rax, default_quoting_options
.text:000000000000A167                 test    rdi, rdi
.text:000000000000A16A                 cmovz   rdi, rax
.text:000000000000A16E                 mov     [rdi], esi
.text:000000000000A170                 retn
.text:000000000000A170 ; } // starts at A160
.text:000000000000A170 set_quoting_style endp
.text:000000000000A170
.text:000000000000A170 ; ---------------------------------------------------------------------------
.text:000000000000A171                 align 20h
.text:000000000000A180
.text:000000000000A180 ; =============== S U B R O U T I N E =======================================
.text:000000000000A180
.text:000000000000A180 ; Attributes: info_from_lumina
.text:000000000000A180
.text:000000000000A180 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:000000000000A180                 public set_char_quoting
.text:000000000000A180 set_char_quoting proc near
.text:000000000000A180 ; __unwind {
.text:000000000000A180                 lea     rax, default_quoting_options
.text:000000000000A187                 test    rdi, rdi
.text:000000000000A18A                 mov     ecx, esi
.text:000000000000A18C                 cmovz   rdi, rax
.text:000000000000A190                 mov     eax, esi
.text:000000000000A192                 and     ecx, 1Fh
.text:000000000000A195                 shr     al, 5
.text:000000000000A198                 movzx   eax, al
.text:000000000000A19B                 lea     rdi, [rdi+rax*4+8]
.text:000000000000A1A0                 mov     esi, [rdi]
.text:000000000000A1A2                 mov     eax, esi
.text:000000000000A1A4                 shr     eax, cl
.text:000000000000A1A6                 xor     edx, eax
.text:000000000000A1A8                 and     eax, 1
.text:000000000000A1AB                 and     edx, 1
.text:000000000000A1AE                 shl     edx, cl
.text:000000000000A1B0                 xor     edx, esi
.text:000000000000A1B2                 mov     [rdi], edx
.text:000000000000A1B4                 retn
.text:000000000000A1B4 ; } // starts at A180
.text:000000000000A1B4 set_char_quoting endp
.text:000000000000A1B4
.text:000000000000A1B4 ; ---------------------------------------------------------------------------
.text:000000000000A1B5                 align 20h
.text:000000000000A1C0
.text:000000000000A1C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A1C0
.text:000000000000A1C0
.text:000000000000A1C0                 public set_quoting_flags
.text:000000000000A1C0 set_quoting_flags proc near
.text:000000000000A1C0 ; __unwind {
.text:000000000000A1C0                 lea     rax, default_quoting_options
.text:000000000000A1C7                 test    rdi, rdi
.text:000000000000A1CA                 cmovz   rdi, rax
.text:000000000000A1CE                 mov     eax, [rdi+4]
.text:000000000000A1D1                 mov     [rdi+4], esi
.text:000000000000A1D4                 retn
.text:000000000000A1D4 ; } // starts at A1C0
.text:000000000000A1D4 set_quoting_flags endp
.text:000000000000A1D4
.text:000000000000A1D4 ; ---------------------------------------------------------------------------
.text:000000000000A1D5                 align 20h
.text:000000000000A1E0
.text:000000000000A1E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A1E0
.text:000000000000A1E0 ; Attributes: info_from_lumina
.text:000000000000A1E0
.text:000000000000A1E0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:000000000000A1E0                 public set_custom_quoting
.text:000000000000A1E0 set_custom_quoting proc near
.text:000000000000A1E0 ; __unwind {
.text:000000000000A1E0                 lea     rax, default_quoting_options
.text:000000000000A1E7                 test    rdi, rdi
.text:000000000000A1EA                 cmovz   rdi, rax
.text:000000000000A1EE                 test    rsi, rsi
.text:000000000000A1F1                 mov     dword ptr [rdi], 0Ah
.text:000000000000A1F7                 jz      short loc_A207
.text:000000000000A1F9                 test    rdx, rdx
.text:000000000000A1FC                 jz      short loc_A207
.text:000000000000A1FE                 mov     [rdi+28h], rsi
.text:000000000000A202                 mov     [rdi+30h], rdx
.text:000000000000A206                 retn
.text:000000000000A207 ; ---------------------------------------------------------------------------
.text:000000000000A207
.text:000000000000A207 loc_A207:                               ; CODE XREF: set_custom_quoting+17↑j
.text:000000000000A207                                         ; set_custom_quoting+1C↑j
.text:000000000000A207                 sub     rsp, 8
.text:000000000000A20B                 call    _abort
.text:000000000000A20B ; } // starts at A1E0
.text:000000000000A20B set_custom_quoting endp
.text:000000000000A20B
.text:000000000000A210
.text:000000000000A210 ; =============== S U B R O U T I N E =======================================
.text:000000000000A210
.text:000000000000A210 ; Attributes: info_from_lumina
.text:000000000000A210
.text:000000000000A210 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:000000000000A210                 public quotearg_buffer
.text:000000000000A210 quotearg_buffer proc near
.text:000000000000A210
.text:000000000000A210 var_40          = qword ptr -40h
.text:000000000000A210
.text:000000000000A210 ; __unwind {
.text:000000000000A210                 push    r15
.text:000000000000A212                 push    r14
.text:000000000000A214                 lea     rax, default_quoting_options
.text:000000000000A21B                 push    r13
.text:000000000000A21D                 push    r12
.text:000000000000A21F                 mov     r13, rdi
.text:000000000000A222                 push    rbp
.text:000000000000A223                 push    rbx
.text:000000000000A224                 mov     rbx, r8
.text:000000000000A227                 mov     r14, rsi
.text:000000000000A22A                 mov     r15, rdx
.text:000000000000A22D                 sub     rsp, 18h
.text:000000000000A231                 test    r8, r8
.text:000000000000A234                 cmovz   rbx, rax
.text:000000000000A238                 mov     [rsp+48h+var_40], rcx
.text:000000000000A23D                 call    ___errno_location
.text:000000000000A242                 mov     r12d, [rax]
.text:000000000000A245                 mov     rbp, rax
.text:000000000000A248                 lea     rax, [rbx+8]
.text:000000000000A24C                 sub     rsp, 8
.text:000000000000A250                 mov     r9d, [rbx+4]
.text:000000000000A254                 push    qword ptr [rbx+30h]
.text:000000000000A257                 mov     r8d, [rbx]
.text:000000000000A25A                 push    qword ptr [rbx+28h]
.text:000000000000A25D                 mov     rdx, r15
.text:000000000000A260                 push    rax
.text:000000000000A261                 mov     rcx, [rsp+68h+var_40]
.text:000000000000A266                 mov     rsi, r14
.text:000000000000A269                 mov     rdi, r13
.text:000000000000A26C                 call    quotearg_buffer_restyled
.text:000000000000A271                 mov     [rbp+0], r12d
.text:000000000000A275                 add     rsp, 38h
.text:000000000000A279                 pop     rbx
.text:000000000000A27A                 pop     rbp
.text:000000000000A27B                 pop     r12
.text:000000000000A27D                 pop     r13
.text:000000000000A27F                 pop     r14
.text:000000000000A281                 pop     r15
.text:000000000000A283                 retn
.text:000000000000A283 ; } // starts at A210
.text:000000000000A283 quotearg_buffer endp
.text:000000000000A283
.text:000000000000A283 ; ---------------------------------------------------------------------------
.text:000000000000A284                 align 10h
.text:000000000000A290
.text:000000000000A290 ; =============== S U B R O U T I N E =======================================
.text:000000000000A290
.text:000000000000A290 ; Attributes: info_from_lumina
.text:000000000000A290
.text:000000000000A290 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:000000000000A290                 public quotearg_alloc_mem
.text:000000000000A290 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:000000000000A290
.text:000000000000A290 var_5C          = dword ptr -5Ch
.text:000000000000A290 var_58          = qword ptr -58h
.text:000000000000A290 var_50          = qword ptr -50h
.text:000000000000A290 var_48          = qword ptr -48h
.text:000000000000A290 var_40          = qword ptr -40h
.text:000000000000A290
.text:000000000000A290 ; __unwind {
.text:000000000000A290                 push    r15
.text:000000000000A292                 push    r14
.text:000000000000A294                 lea     rax, default_quoting_options
.text:000000000000A29B                 push    r13
.text:000000000000A29D                 push    r12
.text:000000000000A29F                 mov     r12, rdx
.text:000000000000A2A2                 push    rbp
.text:000000000000A2A3                 push    rbx
.text:000000000000A2A4                 mov     rbx, rcx
.text:000000000000A2A7                 mov     r14, rdi
.text:000000000000A2AA                 mov     r15, rsi
.text:000000000000A2AD                 sub     rsp, 38h
.text:000000000000A2B1                 test    rcx, rcx
.text:000000000000A2B4                 cmovz   rbx, rax
.text:000000000000A2B8                 xor     ebp, ebp
.text:000000000000A2BA                 call    ___errno_location
.text:000000000000A2BF                 test    r12, r12
.text:000000000000A2C2                 mov     r13, rax
.text:000000000000A2C5                 mov     eax, [rax]
.text:000000000000A2C7                 setz    bpl
.text:000000000000A2CB                 or      ebp, [rbx+4]
.text:000000000000A2CE                 lea     r10, [rbx+8]
.text:000000000000A2D2                 sub     rsp, 8
.text:000000000000A2D6                 mov     r8d, [rbx]
.text:000000000000A2D9                 mov     rcx, r15
.text:000000000000A2DC                 mov     [rsp+70h+var_5C], eax
.text:000000000000A2E0                 push    qword ptr [rbx+30h]
.text:000000000000A2E3                 mov     rdx, r14
.text:000000000000A2E6                 push    qword ptr [rbx+28h]
.text:000000000000A2E9                 push    r10
.text:000000000000A2EB                 xor     esi, esi
.text:000000000000A2ED                 mov     r9d, ebp
.text:000000000000A2F0                 xor     edi, edi
.text:000000000000A2F2                 mov     [rsp+88h+var_48], r10
.text:000000000000A2F7                 call    quotearg_buffer_restyled
.text:000000000000A2FC                 lea     rsi, [rax+1]
.text:000000000000A300                 mov     [rsp+88h+var_40], rax
.text:000000000000A305                 add     rsp, 20h
.text:000000000000A309                 mov     rdi, rsi
.text:000000000000A30C                 mov     [rsp+68h+var_50], rsi
.text:000000000000A311                 call    xmalloc
.text:000000000000A316                 mov     [rsp+68h+var_58], rax
.text:000000000000A31B                 sub     rsp, 8
.text:000000000000A31F                 push    qword ptr [rbx+30h]
.text:000000000000A322                 push    qword ptr [rbx+28h]
.text:000000000000A325                 mov     r10, [rsp+80h+var_48]
.text:000000000000A32A                 mov     r9d, ebp
.text:000000000000A32D                 mov     r8d, [rbx]
.text:000000000000A330                 mov     rcx, r15
.text:000000000000A333                 mov     rdx, r14
.text:000000000000A336                 mov     rdi, rax
.text:000000000000A339                 push    r10
.text:000000000000A33B                 mov     rsi, [rsp+88h+var_50]
.text:000000000000A340                 call    quotearg_buffer_restyled
.text:000000000000A345                 mov     eax, [rsp+88h+var_5C]
.text:000000000000A349                 add     rsp, 20h
.text:000000000000A34D                 test    r12, r12
.text:000000000000A350                 mov     [r13+0], eax
.text:000000000000A354                 jz      short loc_A35F
.text:000000000000A356                 mov     r11, [rsp+68h+var_40]
.text:000000000000A35B                 mov     [r12], r11
.text:000000000000A35F
.text:000000000000A35F loc_A35F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000A35F                 mov     rax, [rsp+68h+var_58]
.text:000000000000A364                 add     rsp, 38h
.text:000000000000A368                 pop     rbx
.text:000000000000A369                 pop     rbp
.text:000000000000A36A                 pop     r12
.text:000000000000A36C                 pop     r13
.text:000000000000A36E                 pop     r14
.text:000000000000A370                 pop     r15
.text:000000000000A372                 retn
.text:000000000000A372 ; } // starts at A290
.text:000000000000A372 quotearg_alloc_mem endp
.text:000000000000A372
.text:000000000000A372 ; ---------------------------------------------------------------------------
.text:000000000000A373                 align 20h
.text:000000000000A380
.text:000000000000A380 ; =============== S U B R O U T I N E =======================================
.text:000000000000A380
.text:000000000000A380
.text:000000000000A380                 public quotearg_alloc
.text:000000000000A380 quotearg_alloc  proc near
.text:000000000000A380 ; __unwind {
.text:000000000000A380                 mov     rcx, rdx
.text:000000000000A383                 xor     edx, edx
.text:000000000000A385                 jmp     quotearg_alloc_mem
.text:000000000000A385 ; } // starts at A380
.text:000000000000A385 quotearg_alloc  endp
.text:000000000000A385
.text:000000000000A385 ; ---------------------------------------------------------------------------
.text:000000000000A38A                 align 10h
.text:000000000000A390
.text:000000000000A390 ; =============== S U B R O U T I N E =======================================
.text:000000000000A390
.text:000000000000A390 ; Attributes: info_from_lumina
.text:000000000000A390
.text:000000000000A390 ; void __cdecl quotearg_free()
.text:000000000000A390                 public quotearg_free
.text:000000000000A390 quotearg_free   proc near
.text:000000000000A390 ; __unwind {
.text:000000000000A390                 mov     eax, cs:nslots
.text:000000000000A396                 push    r12
.text:000000000000A398                 mov     r12, cs:slotvec
.text:000000000000A39F                 push    rbp
.text:000000000000A3A0                 push    rbx
.text:000000000000A3A1                 cmp     eax, 1
.text:000000000000A3A4                 jle     short loc_A3D1
.text:000000000000A3A6                 sub     eax, 2
.text:000000000000A3A9                 lea     rbx, [r12+18h]
.text:000000000000A3AE                 shl     rax, 4
.text:000000000000A3B2                 lea     rbp, [r12+rax+28h]
.text:000000000000A3B7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A3C0
.text:000000000000A3C0 loc_A3C0:                               ; CODE XREF: quotearg_free+3F↓j
.text:000000000000A3C0                 mov     rdi, [rbx]      ; ptr
.text:000000000000A3C3                 add     rbx, 10h
.text:000000000000A3C7                 call    _free
.text:000000000000A3CC                 cmp     rbx, rbp
.text:000000000000A3CF                 jnz     short loc_A3C0
.text:000000000000A3D1
.text:000000000000A3D1 loc_A3D1:                               ; CODE XREF: quotearg_free+14↑j
.text:000000000000A3D1                 mov     rdi, [r12+8]    ; ptr
.text:000000000000A3D6                 lea     rbx, slot0
.text:000000000000A3DD                 cmp     rdi, rbx
.text:000000000000A3E0                 jz      short loc_A3F9
.text:000000000000A3E2                 call    _free
.text:000000000000A3E7                 mov     cs:slotvec0, 100h
.text:000000000000A3F2                 mov     cs:off_215098, rbx
.text:000000000000A3F9
.text:000000000000A3F9 loc_A3F9:                               ; CODE XREF: quotearg_free+50↑j
.text:000000000000A3F9                 lea     rbx, slotvec0
.text:000000000000A400                 cmp     r12, rbx
.text:000000000000A403                 jz      short loc_A414
.text:000000000000A405                 mov     rdi, r12        ; ptr
.text:000000000000A408                 call    _free
.text:000000000000A40D                 mov     cs:slotvec, rbx
.text:000000000000A414
.text:000000000000A414 loc_A414:                               ; CODE XREF: quotearg_free+73↑j
.text:000000000000A414                 pop     rbx
.text:000000000000A415                 mov     cs:nslots, 1
.text:000000000000A41F                 pop     rbp
.text:000000000000A420                 pop     r12
.text:000000000000A422                 retn
.text:000000000000A422 ; } // starts at A390
.text:000000000000A422 quotearg_free   endp
.text:000000000000A422
.text:000000000000A422 ; ---------------------------------------------------------------------------
.text:000000000000A423                 align 10h
.text:000000000000A430
.text:000000000000A430 ; =============== S U B R O U T I N E =======================================
.text:000000000000A430
.text:000000000000A430
.text:000000000000A430                 public quotearg_n
.text:000000000000A430 quotearg_n      proc near
.text:000000000000A430 ; __unwind {
.text:000000000000A430                 lea     rcx, default_quoting_options
.text:000000000000A437                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A43E                 jmp     quotearg_n_options
.text:000000000000A43E ; } // starts at A430
.text:000000000000A43E quotearg_n      endp
.text:000000000000A43E
.text:000000000000A43E ; ---------------------------------------------------------------------------
.text:000000000000A443                 align 10h
.text:000000000000A450
.text:000000000000A450 ; =============== S U B R O U T I N E =======================================
.text:000000000000A450
.text:000000000000A450
.text:000000000000A450                 public quotearg_n_mem
.text:000000000000A450 quotearg_n_mem  proc near
.text:000000000000A450 ; __unwind {
.text:000000000000A450                 lea     rcx, default_quoting_options
.text:000000000000A457                 jmp     quotearg_n_options
.text:000000000000A457 ; } // starts at A450
.text:000000000000A457 quotearg_n_mem  endp
.text:000000000000A457
.text:000000000000A457 ; ---------------------------------------------------------------------------
.text:000000000000A45C                 align 20h
.text:000000000000A460
.text:000000000000A460 ; =============== S U B R O U T I N E =======================================
.text:000000000000A460
.text:000000000000A460
.text:000000000000A460                 public quotearg
.text:000000000000A460 quotearg        proc near
.text:000000000000A460 ; __unwind {
.text:000000000000A460                 lea     rcx, default_quoting_options
.text:000000000000A467                 mov     rsi, rdi
.text:000000000000A46A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A471                 xor     edi, edi
.text:000000000000A473                 jmp     quotearg_n_options
.text:000000000000A473 ; } // starts at A460
.text:000000000000A473 quotearg        endp
.text:000000000000A473
.text:000000000000A473 ; ---------------------------------------------------------------------------
.text:000000000000A478                 align 20h
.text:000000000000A480
.text:000000000000A480 ; =============== S U B R O U T I N E =======================================
.text:000000000000A480
.text:000000000000A480
.text:000000000000A480                 public quotearg_mem
.text:000000000000A480 quotearg_mem    proc near
.text:000000000000A480 ; __unwind {
.text:000000000000A480                 lea     rcx, default_quoting_options
.text:000000000000A487                 mov     rdx, rsi
.text:000000000000A48A                 mov     rsi, rdi
.text:000000000000A48D                 xor     edi, edi
.text:000000000000A48F                 jmp     quotearg_n_options
.text:000000000000A48F ; } // starts at A480
.text:000000000000A48F quotearg_mem    endp
.text:000000000000A48F
.text:000000000000A48F ; ---------------------------------------------------------------------------
.text:000000000000A494                 align 20h
.text:000000000000A4A0
.text:000000000000A4A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4A0
.text:000000000000A4A0 ; Attributes: info_from_lumina
.text:000000000000A4A0
.text:000000000000A4A0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:000000000000A4A0                 public quotearg_n_style
.text:000000000000A4A0 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:000000000000A4A0                                         ; quotearg_style+7↓j
.text:000000000000A4A0
.text:000000000000A4A0 var_48          = dword ptr -48h
.text:000000000000A4A0 var_44          = qword ptr -44h
.text:000000000000A4A0 var_3C          = qword ptr -3Ch
.text:000000000000A4A0 var_34          = qword ptr -34h
.text:000000000000A4A0 var_2C          = qword ptr -2Ch
.text:000000000000A4A0 var_24          = qword ptr -24h
.text:000000000000A4A0 var_1C          = qword ptr -1Ch
.text:000000000000A4A0 var_14          = dword ptr -14h
.text:000000000000A4A0 var_10          = qword ptr -10h
.text:000000000000A4A0
.text:000000000000A4A0 ; __unwind {
.text:000000000000A4A0                 sub     rsp, 48h
.text:000000000000A4A4                 mov     rax, rdx
.text:000000000000A4A7                 mov     rdx, fs:28h
.text:000000000000A4B0                 mov     [rsp+48h+var_10], rdx
.text:000000000000A4B5                 xor     edx, edx
.text:000000000000A4B7                 cmp     esi, 0Ah
.text:000000000000A4BA                 jz      short loc_A524
.text:000000000000A4BC                 mov     [rsp+48h+var_48], esi
.text:000000000000A4BF                 mov     rcx, rsp
.text:000000000000A4C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A4C9                 mov     rsi, rax
.text:000000000000A4CC                 mov     [rsp+48h+var_44], 0
.text:000000000000A4D5                 mov     [rsp+48h+var_3C], 0
.text:000000000000A4DE                 mov     [rsp+48h+var_34], 0
.text:000000000000A4E7                 mov     [rsp+48h+var_2C], 0
.text:000000000000A4F0                 mov     [rsp+48h+var_24], 0
.text:000000000000A4F9                 mov     [rsp+48h+var_1C], 0
.text:000000000000A502                 mov     [rsp+48h+var_14], 0
.text:000000000000A50A                 call    quotearg_n_options
.text:000000000000A50F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000A514                 xor     rcx, fs:28h
.text:000000000000A51D                 jnz     short loc_A529
.text:000000000000A51F                 add     rsp, 48h
.text:000000000000A523                 retn
.text:000000000000A524 ; ---------------------------------------------------------------------------
.text:000000000000A524
.text:000000000000A524 loc_A524:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:000000000000A524                 call    _abort
.text:000000000000A529 ; ---------------------------------------------------------------------------
.text:000000000000A529
.text:000000000000A529 loc_A529:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:000000000000A529                 call    ___stack_chk_fail
.text:000000000000A529 ; } // starts at A4A0
.text:000000000000A529 quotearg_n_style endp
.text:000000000000A529
.text:000000000000A529 ; ---------------------------------------------------------------------------
.text:000000000000A52E                 align 10h
.text:000000000000A530
.text:000000000000A530 ; =============== S U B R O U T I N E =======================================
.text:000000000000A530
.text:000000000000A530 ; Attributes: info_from_lumina
.text:000000000000A530
.text:000000000000A530 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:000000000000A530                 public quotearg_n_style_mem
.text:000000000000A530 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:000000000000A530
.text:000000000000A530 var_48          = dword ptr -48h
.text:000000000000A530 var_44          = qword ptr -44h
.text:000000000000A530 var_3C          = qword ptr -3Ch
.text:000000000000A530 var_34          = qword ptr -34h
.text:000000000000A530 var_2C          = qword ptr -2Ch
.text:000000000000A530 var_24          = qword ptr -24h
.text:000000000000A530 var_1C          = qword ptr -1Ch
.text:000000000000A530 var_14          = dword ptr -14h
.text:000000000000A530 var_10          = qword ptr -10h
.text:000000000000A530
.text:000000000000A530 ; __unwind {
.text:000000000000A530                 sub     rsp, 48h
.text:000000000000A534                 mov     rax, rdx
.text:000000000000A537                 mov     rdx, rcx
.text:000000000000A53A                 mov     rcx, fs:28h
.text:000000000000A543                 mov     [rsp+48h+var_10], rcx
.text:000000000000A548                 xor     ecx, ecx
.text:000000000000A54A                 cmp     esi, 0Ah
.text:000000000000A54D                 jz      short loc_A5B0
.text:000000000000A54F                 mov     [rsp+48h+var_48], esi
.text:000000000000A552                 mov     rcx, rsp
.text:000000000000A555                 mov     rsi, rax
.text:000000000000A558                 mov     [rsp+48h+var_44], 0
.text:000000000000A561                 mov     [rsp+48h+var_3C], 0
.text:000000000000A56A                 mov     [rsp+48h+var_34], 0
.text:000000000000A573                 mov     [rsp+48h+var_2C], 0
.text:000000000000A57C                 mov     [rsp+48h+var_24], 0
.text:000000000000A585                 mov     [rsp+48h+var_1C], 0
.text:000000000000A58E                 mov     [rsp+48h+var_14], 0
.text:000000000000A596                 call    quotearg_n_options
.text:000000000000A59B                 mov     rdx, [rsp+48h+var_10]
.text:000000000000A5A0                 xor     rdx, fs:28h
.text:000000000000A5A9                 jnz     short loc_A5B5
.text:000000000000A5AB                 add     rsp, 48h
.text:000000000000A5AF                 retn
.text:000000000000A5B0 ; ---------------------------------------------------------------------------
.text:000000000000A5B0
.text:000000000000A5B0 loc_A5B0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:000000000000A5B0                 call    _abort
.text:000000000000A5B5 ; ---------------------------------------------------------------------------
.text:000000000000A5B5
.text:000000000000A5B5 loc_A5B5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:000000000000A5B5                 call    ___stack_chk_fail
.text:000000000000A5B5 ; } // starts at A530
.text:000000000000A5B5 quotearg_n_style_mem endp
.text:000000000000A5B5
.text:000000000000A5B5 ; ---------------------------------------------------------------------------
.text:000000000000A5BA                 align 20h
.text:000000000000A5C0
.text:000000000000A5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5C0
.text:000000000000A5C0
.text:000000000000A5C0                 public quotearg_style
.text:000000000000A5C0 quotearg_style  proc near               ; CODE XREF: main+33C↑p
.text:000000000000A5C0                                         ; main+481↑p ...
.text:000000000000A5C0 ; __unwind {
.text:000000000000A5C0                 mov     rdx, rsi
.text:000000000000A5C3                 mov     esi, edi
.text:000000000000A5C5                 xor     edi, edi
.text:000000000000A5C7                 jmp     quotearg_n_style
.text:000000000000A5C7 ; } // starts at A5C0
.text:000000000000A5C7 quotearg_style  endp
.text:000000000000A5C7
.text:000000000000A5C7 ; ---------------------------------------------------------------------------
.text:000000000000A5CC                 align 10h
.text:000000000000A5D0
.text:000000000000A5D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5D0
.text:000000000000A5D0
.text:000000000000A5D0                 public quotearg_style_mem
.text:000000000000A5D0 quotearg_style_mem proc near
.text:000000000000A5D0 ; __unwind {
.text:000000000000A5D0                 mov     rcx, rdx
.text:000000000000A5D3                 mov     rdx, rsi
.text:000000000000A5D6                 mov     esi, edi
.text:000000000000A5D8                 xor     edi, edi
.text:000000000000A5DA                 jmp     quotearg_n_style_mem
.text:000000000000A5DA ; } // starts at A5D0
.text:000000000000A5DA quotearg_style_mem endp
.text:000000000000A5DA
.text:000000000000A5DA ; ---------------------------------------------------------------------------
.text:000000000000A5DF                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A5E0
.text:000000000000A5E0 ; Attributes: info_from_lumina
.text:000000000000A5E0
.text:000000000000A5E0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:000000000000A5E0                 public quotearg_char_mem
.text:000000000000A5E0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:000000000000A5E0                                         ; quotearg_colon+C↓j ...
.text:000000000000A5E0
.text:000000000000A5E0 var_48          = xmmword ptr -48h
.text:000000000000A5E0 var_38          = xmmword ptr -38h
.text:000000000000A5E0 var_28          = xmmword ptr -28h
.text:000000000000A5E0 var_18          = qword ptr -18h
.text:000000000000A5E0 var_10          = qword ptr -10h
.text:000000000000A5E0
.text:000000000000A5E0 ; __unwind {
.text:000000000000A5E0                 sub     rsp, 48h
.text:000000000000A5E4                 mov     ecx, edx
.text:000000000000A5E6                 mov     rax, fs:28h
.text:000000000000A5EF                 mov     [rsp+48h+var_10], rax
.text:000000000000A5F4                 xor     eax, eax
.text:000000000000A5F6                 mov     rax, cs:qword_215290
.text:000000000000A5FD                 mov     r8, rsp
.text:000000000000A600                 and     ecx, 1Fh
.text:000000000000A603                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000A60B                 mov     [rsp+48h+var_18], rax
.text:000000000000A610                 mov     eax, edx
.text:000000000000A612                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000A616                 shr     al, 5
.text:000000000000A619                 movzx   eax, al
.text:000000000000A61C                 lea     r9, [r8+rax*4+8]
.text:000000000000A621                 movdqa  xmm0, cs:xmmword_215270
.text:000000000000A629                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000A62E                 movdqa  xmm0, cs:xmmword_215280
.text:000000000000A636                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000A63B                 mov     edx, [r9]
.text:000000000000A63E                 mov     eax, edx
.text:000000000000A640                 shr     eax, cl
.text:000000000000A642                 not     eax
.text:000000000000A644                 and     eax, 1
.text:000000000000A647                 shl     eax, cl
.text:000000000000A649                 mov     rcx, r8
.text:000000000000A64C                 xor     eax, edx
.text:000000000000A64E                 mov     rdx, rsi
.text:000000000000A651                 mov     rsi, rdi
.text:000000000000A654                 mov     [r9], eax
.text:000000000000A657                 xor     edi, edi
.text:000000000000A659                 call    quotearg_n_options
.text:000000000000A65E                 mov     rsi, [rsp+48h+var_10]
.text:000000000000A663                 xor     rsi, fs:28h
.text:000000000000A66C                 jnz     short loc_A673
.text:000000000000A66E                 add     rsp, 48h
.text:000000000000A672                 retn
.text:000000000000A673 ; ---------------------------------------------------------------------------
.text:000000000000A673
.text:000000000000A673 loc_A673:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:000000000000A673                 call    ___stack_chk_fail
.text:000000000000A673 ; } // starts at A5E0
.text:000000000000A673 quotearg_char_mem endp
.text:000000000000A673
.text:000000000000A673 ; ---------------------------------------------------------------------------
.text:000000000000A678                 align 20h
.text:000000000000A680
.text:000000000000A680 ; =============== S U B R O U T I N E =======================================
.text:000000000000A680
.text:000000000000A680
.text:000000000000A680                 public quotearg_char
.text:000000000000A680 quotearg_char   proc near
.text:000000000000A680 ; __unwind {
.text:000000000000A680                 movsx   edx, sil
.text:000000000000A684                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A68B                 jmp     quotearg_char_mem
.text:000000000000A68B ; } // starts at A680
.text:000000000000A68B quotearg_char   endp
.text:000000000000A68B
.text:000000000000A690
.text:000000000000A690 ; =============== S U B R O U T I N E =======================================
.text:000000000000A690
.text:000000000000A690
.text:000000000000A690                 public quotearg_colon
.text:000000000000A690 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:000000000000A690 ; __unwind {
.text:000000000000A690                 mov     edx, 3Ah ; ':'
.text:000000000000A695                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A69C                 jmp     quotearg_char_mem
.text:000000000000A69C ; } // starts at A690
.text:000000000000A69C quotearg_colon  endp
.text:000000000000A69C
.text:000000000000A69C ; ---------------------------------------------------------------------------
.text:000000000000A6A1                 align 10h
.text:000000000000A6B0
.text:000000000000A6B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6B0
.text:000000000000A6B0
.text:000000000000A6B0                 public quotearg_colon_mem
.text:000000000000A6B0 quotearg_colon_mem proc near
.text:000000000000A6B0 ; __unwind {
.text:000000000000A6B0                 mov     edx, 3Ah ; ':'
.text:000000000000A6B5                 jmp     quotearg_char_mem
.text:000000000000A6B5 ; } // starts at A6B0
.text:000000000000A6B5 quotearg_colon_mem endp
.text:000000000000A6B5
.text:000000000000A6B5 ; ---------------------------------------------------------------------------
.text:000000000000A6BA                 align 20h
.text:000000000000A6C0
.text:000000000000A6C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A6C0
.text:000000000000A6C0 ; Attributes: info_from_lumina
.text:000000000000A6C0
.text:000000000000A6C0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:000000000000A6C0                 public quotearg_n_style_colon
.text:000000000000A6C0 quotearg_n_style_colon proc near
.text:000000000000A6C0
.text:000000000000A6C0 var_48          = dword ptr -48h
.text:000000000000A6C0 var_44          = qword ptr -44h
.text:000000000000A6C0 var_3C          = qword ptr -3Ch
.text:000000000000A6C0 var_34          = qword ptr -34h
.text:000000000000A6C0 var_2C          = qword ptr -2Ch
.text:000000000000A6C0 var_24          = qword ptr -24h
.text:000000000000A6C0 var_1C          = qword ptr -1Ch
.text:000000000000A6C0 var_14          = dword ptr -14h
.text:000000000000A6C0 var_10          = qword ptr -10h
.text:000000000000A6C0
.text:000000000000A6C0 ; __unwind {
.text:000000000000A6C0                 sub     rsp, 48h
.text:000000000000A6C4                 mov     rax, rdx
.text:000000000000A6C7                 mov     rdx, fs:28h
.text:000000000000A6D0                 mov     [rsp+48h+var_10], rdx
.text:000000000000A6D5                 xor     edx, edx
.text:000000000000A6D7                 cmp     esi, 0Ah
.text:000000000000A6DA                 jz      short loc_A744
.text:000000000000A6DC                 mov     [rsp+48h+var_48], esi
.text:000000000000A6DF                 mov     rcx, rsp
.text:000000000000A6E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A6E9                 mov     rsi, rax
.text:000000000000A6EC                 mov     [rsp+48h+var_44], 0
.text:000000000000A6F5                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000A6FE                 mov     [rsp+48h+var_34], 0
.text:000000000000A707                 mov     [rsp+48h+var_2C], 0
.text:000000000000A710                 mov     [rsp+48h+var_24], 0
.text:000000000000A719                 mov     [rsp+48h+var_1C], 0
.text:000000000000A722                 mov     [rsp+48h+var_14], 0
.text:000000000000A72A                 call    quotearg_n_options
.text:000000000000A72F                 mov     rcx, [rsp+48h+var_10]
.text:000000000000A734                 xor     rcx, fs:28h
.text:000000000000A73D                 jnz     short loc_A749
.text:000000000000A73F                 add     rsp, 48h
.text:000000000000A743                 retn
.text:000000000000A744 ; ---------------------------------------------------------------------------
.text:000000000000A744
.text:000000000000A744 loc_A744:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:000000000000A744                 call    _abort
.text:000000000000A749 ; ---------------------------------------------------------------------------
.text:000000000000A749
.text:000000000000A749 loc_A749:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:000000000000A749                 call    ___stack_chk_fail
.text:000000000000A749 ; } // starts at A6C0
.text:000000000000A749 quotearg_n_style_colon endp
.text:000000000000A749
.text:000000000000A749 ; ---------------------------------------------------------------------------
.text:000000000000A74E                 align 10h
.text:000000000000A750
.text:000000000000A750 ; =============== S U B R O U T I N E =======================================
.text:000000000000A750
.text:000000000000A750 ; Attributes: info_from_lumina
.text:000000000000A750
.text:000000000000A750 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:000000000000A750                 public quotearg_n_custom_mem
.text:000000000000A750 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:000000000000A750                                         ; quotearg_custom+12↓j ...
.text:000000000000A750
.text:000000000000A750 var_48          = xmmword ptr -48h
.text:000000000000A750 var_38          = xmmword ptr -38h
.text:000000000000A750 var_28          = xmmword ptr -28h
.text:000000000000A750 var_18          = qword ptr -18h
.text:000000000000A750 var_10          = qword ptr -10h
.text:000000000000A750
.text:000000000000A750 ; __unwind {
.text:000000000000A750                 sub     rsp, 48h
.text:000000000000A754                 mov     r9, rcx
.text:000000000000A757                 mov     rcx, cs:qword_215290
.text:000000000000A75E                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000A766                 mov     rax, fs:28h
.text:000000000000A76F                 mov     [rsp+48h+var_10], rax
.text:000000000000A774                 xor     eax, eax
.text:000000000000A776                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000A77A                 test    rsi, rsi
.text:000000000000A77D                 mov     [rsp+48h+var_18], rcx
.text:000000000000A782                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:000000000000A789                 movdqa  xmm0, cs:xmmword_215270
.text:000000000000A791                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000A796                 movdqa  xmm0, cs:xmmword_215280
.text:000000000000A79E                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000A7A3                 jz      short loc_A7D7
.text:000000000000A7A5                 test    rdx, rdx
.text:000000000000A7A8                 jz      short loc_A7D7
.text:000000000000A7AA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000A7AF                 mov     [rsp+48h+var_18], rdx
.text:000000000000A7B4                 mov     rcx, rsp
.text:000000000000A7B7                 mov     rdx, r8
.text:000000000000A7BA                 mov     rsi, r9
.text:000000000000A7BD                 call    quotearg_n_options
.text:000000000000A7C2                 mov     rdi, [rsp+48h+var_10]
.text:000000000000A7C7                 xor     rdi, fs:28h
.text:000000000000A7D0                 jnz     short loc_A7DC
.text:000000000000A7D2                 add     rsp, 48h
.text:000000000000A7D6                 retn
.text:000000000000A7D7 ; ---------------------------------------------------------------------------
.text:000000000000A7D7
.text:000000000000A7D7 loc_A7D7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:000000000000A7D7                                         ; quotearg_n_custom_mem+58↑j
.text:000000000000A7D7                 call    _abort
.text:000000000000A7DC ; ---------------------------------------------------------------------------
.text:000000000000A7DC
.text:000000000000A7DC loc_A7DC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000A7DC                 call    ___stack_chk_fail
.text:000000000000A7DC ; } // starts at A750
.text:000000000000A7DC quotearg_n_custom_mem endp
.text:000000000000A7DC
.text:000000000000A7DC ; ---------------------------------------------------------------------------
.text:000000000000A7E1                 align 10h
.text:000000000000A7F0
.text:000000000000A7F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A7F0
.text:000000000000A7F0
.text:000000000000A7F0                 public quotearg_n_custom
.text:000000000000A7F0 quotearg_n_custom proc near
.text:000000000000A7F0 ; __unwind {
.text:000000000000A7F0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000A7F7                 jmp     quotearg_n_custom_mem
.text:000000000000A7F7 ; } // starts at A7F0
.text:000000000000A7F7 quotearg_n_custom endp
.text:000000000000A7F7
.text:000000000000A7F7 ; ---------------------------------------------------------------------------
.text:000000000000A7FC                 align 20h
.text:000000000000A800
.text:000000000000A800 ; =============== S U B R O U T I N E =======================================
.text:000000000000A800
.text:000000000000A800
.text:000000000000A800                 public quotearg_custom
.text:000000000000A800 quotearg_custom proc near
.text:000000000000A800 ; __unwind {
.text:000000000000A800                 mov     rcx, rdx
.text:000000000000A803                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000A80A                 mov     rdx, rsi
.text:000000000000A80D                 mov     rsi, rdi
.text:000000000000A810                 xor     edi, edi
.text:000000000000A812                 jmp     quotearg_n_custom_mem
.text:000000000000A812 ; } // starts at A800
.text:000000000000A812 quotearg_custom endp
.text:000000000000A812
.text:000000000000A812 ; ---------------------------------------------------------------------------
.text:000000000000A817                 align 20h
.text:000000000000A820
.text:000000000000A820 ; =============== S U B R O U T I N E =======================================
.text:000000000000A820
.text:000000000000A820
.text:000000000000A820                 public quotearg_custom_mem
.text:000000000000A820 quotearg_custom_mem proc near
.text:000000000000A820 ; __unwind {
.text:000000000000A820                 mov     r8, rcx
.text:000000000000A823                 mov     rcx, rdx
.text:000000000000A826                 mov     rdx, rsi
.text:000000000000A829                 mov     rsi, rdi
.text:000000000000A82C                 xor     edi, edi
.text:000000000000A82E                 jmp     quotearg_n_custom_mem
.text:000000000000A82E ; } // starts at A820
.text:000000000000A82E quotearg_custom_mem endp
.text:000000000000A82E
.text:000000000000A82E ; ---------------------------------------------------------------------------
.text:000000000000A833                 align 20h
.text:000000000000A840
.text:000000000000A840 ; =============== S U B R O U T I N E =======================================
.text:000000000000A840
.text:000000000000A840
.text:000000000000A840                 public quote_n_mem
.text:000000000000A840 quote_n_mem     proc near
.text:000000000000A840 ; __unwind {
.text:000000000000A840                 lea     rcx, quote_quoting_options
.text:000000000000A847                 jmp     quotearg_n_options
.text:000000000000A847 ; } // starts at A840
.text:000000000000A847 quote_n_mem     endp
.text:000000000000A847
.text:000000000000A847 ; ---------------------------------------------------------------------------
.text:000000000000A84C                 align 10h
.text:000000000000A850
.text:000000000000A850 ; =============== S U B R O U T I N E =======================================
.text:000000000000A850
.text:000000000000A850
.text:000000000000A850                 public quote_mem
.text:000000000000A850 quote_mem       proc near
.text:000000000000A850 ; __unwind {
.text:000000000000A850                 lea     rcx, quote_quoting_options
.text:000000000000A857                 mov     rdx, rsi
.text:000000000000A85A                 mov     rsi, rdi
.text:000000000000A85D                 xor     edi, edi
.text:000000000000A85F                 jmp     quotearg_n_options
.text:000000000000A85F ; } // starts at A850
.text:000000000000A85F quote_mem       endp
.text:000000000000A85F
.text:000000000000A85F ; ---------------------------------------------------------------------------
.text:000000000000A864                 align 10h
.text:000000000000A870
.text:000000000000A870 ; =============== S U B R O U T I N E =======================================
.text:000000000000A870
.text:000000000000A870
.text:000000000000A870                 public quote_n
.text:000000000000A870 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:000000000000A870 ; __unwind {
.text:000000000000A870                 lea     rcx, quote_quoting_options
.text:000000000000A877                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A87E                 jmp     quotearg_n_options
.text:000000000000A87E ; } // starts at A870
.text:000000000000A87E quote_n         endp
.text:000000000000A87E
.text:000000000000A87E ; ---------------------------------------------------------------------------
.text:000000000000A883                 align 10h
.text:000000000000A890
.text:000000000000A890 ; =============== S U B R O U T I N E =======================================
.text:000000000000A890
.text:000000000000A890
.text:000000000000A890                 public quote
.text:000000000000A890 quote           proc near               ; CODE XREF: main+84B↑p
.text:000000000000A890                                         ; get_reldate+12↑p ...
.text:000000000000A890 ; __unwind {
.text:000000000000A890                 lea     rcx, quote_quoting_options
.text:000000000000A897                 mov     rsi, rdi
.text:000000000000A89A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000A8A1                 xor     edi, edi
.text:000000000000A8A3                 jmp     quotearg_n_options
.text:000000000000A8A3 ; } // starts at A890
.text:000000000000A8A3 quote           endp
.text:000000000000A8A3
.text:000000000000A8A3 ; ---------------------------------------------------------------------------
.text:000000000000A8A8                 align 10h
.text:000000000000A8B0
.text:000000000000A8B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A8B0
.text:000000000000A8B0
.text:000000000000A8B0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:000000000000A8B0                 public version_etc_arn
.text:000000000000A8B0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_ACEB↓j
.text:000000000000A8B0                                         ; version_etc_va:loc_AD3B↓p ...
.text:000000000000A8B0
.text:000000000000A8B0 var_58          = qword ptr -58h
.text:000000000000A8B0 var_50          = qword ptr -50h
.text:000000000000A8B0 var_48          = qword ptr -48h
.text:000000000000A8B0 var_40          = qword ptr -40h
.text:000000000000A8B0
.text:000000000000A8B0 ; __unwind {
.text:000000000000A8B0                 push    r15
.text:000000000000A8B2                 push    r14
.text:000000000000A8B4                 push    r13
.text:000000000000A8B6                 push    r12
.text:000000000000A8B8                 mov     r12, r9
.text:000000000000A8BB                 push    rbp
.text:000000000000A8BC                 push    rbx
.text:000000000000A8BD                 mov     rbp, rdi
.text:000000000000A8C0                 mov     rbx, r8
.text:000000000000A8C3                 sub     rsp, 28h
.text:000000000000A8C7                 test    rsi, rsi
.text:000000000000A8CA                 jz      loc_A9E8
.text:000000000000A8D0                 mov     r8, rdx
.text:000000000000A8D3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:000000000000A8DA                 mov     r9, rcx
.text:000000000000A8DD                 xor     eax, eax
.text:000000000000A8DF                 mov     rcx, rsi
.text:000000000000A8E2                 mov     esi, 1
.text:000000000000A8E7                 call    ___fprintf_chk
.text:000000000000A8EC
.text:000000000000A8EC loc_A8EC:                               ; CODE XREF: version_etc_arn+151↓j
.text:000000000000A8EC                 lea     rsi, aC         ; "(C)"
.text:000000000000A8F3                 xor     edi, edi        ; domainname
.text:000000000000A8F5                 mov     edx, 5          ; category
.text:000000000000A8FA                 call    _dcgettext
.text:000000000000A8FF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:000000000000A906                 mov     rcx, rax
.text:000000000000A909                 mov     r8d, 7E3h
.text:000000000000A90F                 mov     esi, 1
.text:000000000000A914                 mov     rdi, rbp
.text:000000000000A917                 xor     eax, eax
.text:000000000000A919                 call    ___fprintf_chk
.text:000000000000A91E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:000000000000A925                 xor     edi, edi        ; domainname
.text:000000000000A927                 mov     edx, 5          ; category
.text:000000000000A92C                 call    _dcgettext
.text:000000000000A931                 mov     rsi, rbp        ; stream
.text:000000000000A934                 mov     rdi, rax        ; s
.text:000000000000A937                 call    _fputs_unlocked
.text:000000000000A93C                 cmp     r12, 9          ; switch 10 cases
.text:000000000000A940                 ja      def_A954        ; jumptable 000000000000A954 default case
.text:000000000000A946                 lea     rdx, jpt_A954
.text:000000000000A94D                 movsxd  rax, ds:(jpt_A954 - 11D28h)[rdx+r12*4]
.text:000000000000A951                 add     rax, rdx
.text:000000000000A954                 jmp     rax             ; switch jump
.text:000000000000A954 ; ---------------------------------------------------------------------------
.text:000000000000A956                 align 20h
.text:000000000000A960
.text:000000000000A960 loc_A960:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A960                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000A960                 mov     r9, [rbx+38h]   ; jumptable 000000000000A954 case 8
.text:000000000000A964                 mov     rax, [rbx+10h]
.text:000000000000A968                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000A96F                 mov     r8, [rbx+8]
.text:000000000000A973                 mov     edx, 5          ; category
.text:000000000000A978                 xor     edi, edi        ; domainname
.text:000000000000A97A                 mov     r13, [rbx+30h]
.text:000000000000A97E                 mov     r12, [rbx+28h]
.text:000000000000A982                 mov     [rsp+58h+var_48], r9
.text:000000000000A987                 mov     r15, [rbx+20h]
.text:000000000000A98B                 mov     r14, [rbx+18h]
.text:000000000000A98F                 mov     [rsp+58h+var_58], rax
.text:000000000000A993                 mov     [rsp+58h+var_50], r8
.text:000000000000A998                 mov     rbx, [rbx]
.text:000000000000A99B                 call    _dcgettext
.text:000000000000A9A0                 sub     rsp, 8
.text:000000000000A9A4
.text:000000000000A9A4 loc_A9A4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:000000000000A9A4                 mov     r9, [rsp+60h+var_48]
.text:000000000000A9A9                 mov     rdx, rax
.text:000000000000A9AC                 mov     rcx, rbx
.text:000000000000A9AF                 mov     esi, 1
.text:000000000000A9B4                 mov     rdi, rbp
.text:000000000000A9B7                 xor     eax, eax
.text:000000000000A9B9                 push    r9
.text:000000000000A9BB                 push    r13
.text:000000000000A9BD                 push    r12
.text:000000000000A9BF                 push    r15
.text:000000000000A9C1                 push    r14
.text:000000000000A9C3                 mov     r9, [rsp+88h+var_58]
.text:000000000000A9C8                 mov     r8, [rsp+88h+var_50]
.text:000000000000A9CD                 call    ___fprintf_chk
.text:000000000000A9D2                 add     rsp, 30h
.text:000000000000A9D6
.text:000000000000A9D6 loc_A9D6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000A9D6                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000A9D6                 add     rsp, 28h        ; jumptable 000000000000A954 case 0
.text:000000000000A9DA                 pop     rbx
.text:000000000000A9DB                 pop     rbp
.text:000000000000A9DC                 pop     r12
.text:000000000000A9DE                 pop     r13
.text:000000000000A9E0                 pop     r14
.text:000000000000A9E2                 pop     r15
.text:000000000000A9E4                 retn
.text:000000000000A9E4 ; ---------------------------------------------------------------------------
.text:000000000000A9E5                 align 8
.text:000000000000A9E8
.text:000000000000A9E8 loc_A9E8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:000000000000A9E8                 mov     r8, rcx
.text:000000000000A9EB                 mov     rcx, rdx
.text:000000000000A9EE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:000000000000A9F5                 mov     esi, 1
.text:000000000000A9FA                 xor     eax, eax
.text:000000000000A9FC                 call    ___fprintf_chk
.text:000000000000AA01                 jmp     loc_A8EC
.text:000000000000AA01 ; ---------------------------------------------------------------------------
.text:000000000000AA06                 align 10h
.text:000000000000AA10
.text:000000000000AA10 loc_AA10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AA10                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AA10                 mov     r10, [rbx+40h]  ; jumptable 000000000000A954 case 9
.text:000000000000AA14                 mov     r9, [rbx+38h]
.text:000000000000AA18                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000AA1F                 mov     rax, [rbx+10h]
.text:000000000000AA23                 mov     r8, [rbx+8]
.text:000000000000AA27                 mov     edx, 5          ; category
.text:000000000000AA2C                 mov     r13, [rbx+30h]
.text:000000000000AA30                 mov     r12, [rbx+28h]
.text:000000000000AA34                 mov     r15, [rbx+20h]
.text:000000000000AA38                 mov     r14, [rbx+18h]
.text:000000000000AA3C                 mov     rbx, [rbx]
.text:000000000000AA3F                 mov     [rsp+58h+var_40], r10
.text:000000000000AA44                 mov     [rsp+58h+var_48], r9
.text:000000000000AA49                 mov     [rsp+58h+var_58], rax
.text:000000000000AA4D                 mov     [rsp+58h+var_50], r8
.text:000000000000AA52
.text:000000000000AA52 loc_AA52:                               ; CODE XREF: version_etc_arn+412↓j
.text:000000000000AA52                 xor     edi, edi        ; domainname
.text:000000000000AA54                 call    _dcgettext
.text:000000000000AA59                 mov     r10, [rsp+58h+var_40]
.text:000000000000AA5E                 push    r10
.text:000000000000AA60                 jmp     loc_A9A4
.text:000000000000AA60 ; ---------------------------------------------------------------------------
.text:000000000000AA65                 align 8
.text:000000000000AA68
.text:000000000000AA68 loc_AA68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AA68                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AA68                 mov     rbx, [rbx]      ; jumptable 000000000000A954 case 1
.text:000000000000AA6B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:000000000000AA72                 mov     edx, 5          ; category
.text:000000000000AA77                 xor     edi, edi        ; domainname
.text:000000000000AA79                 call    _dcgettext
.text:000000000000AA7E                 add     rsp, 28h
.text:000000000000AA82                 mov     rcx, rbx
.text:000000000000AA85                 mov     rdi, rbp
.text:000000000000AA88                 pop     rbx
.text:000000000000AA89                 pop     rbp
.text:000000000000AA8A                 pop     r12
.text:000000000000AA8C                 pop     r13
.text:000000000000AA8E                 pop     r14
.text:000000000000AA90                 pop     r15
.text:000000000000AA92                 mov     rdx, rax
.text:000000000000AA95                 mov     esi, 1
.text:000000000000AA9A                 xor     eax, eax
.text:000000000000AA9C                 jmp     ___fprintf_chk
.text:000000000000AA9C ; ---------------------------------------------------------------------------
.text:000000000000AAA1                 align 8
.text:000000000000AAA8
.text:000000000000AAA8 loc_AAA8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AAA8                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AAA8                 mov     r12, [rbx+8]    ; jumptable 000000000000A954 case 2
.text:000000000000AAAC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:000000000000AAB3                 mov     rbx, [rbx]
.text:000000000000AAB6                 mov     edx, 5          ; category
.text:000000000000AABB                 xor     edi, edi        ; domainname
.text:000000000000AABD                 call    _dcgettext
.text:000000000000AAC2                 add     rsp, 28h
.text:000000000000AAC6                 mov     r8, r12
.text:000000000000AAC9                 mov     rcx, rbx
.text:000000000000AACC                 mov     rdi, rbp
.text:000000000000AACF                 mov     rdx, rax
.text:000000000000AAD2                 mov     esi, 1
.text:000000000000AAD7                 pop     rbx
.text:000000000000AAD8                 pop     rbp
.text:000000000000AAD9                 pop     r12
.text:000000000000AADB                 pop     r13
.text:000000000000AADD                 pop     r14
.text:000000000000AADF                 pop     r15
.text:000000000000AAE1                 xor     eax, eax
.text:000000000000AAE3                 jmp     ___fprintf_chk
.text:000000000000AAE3 ; ---------------------------------------------------------------------------
.text:000000000000AAE8                 align 10h
.text:000000000000AAF0
.text:000000000000AAF0 loc_AAF0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AAF0                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AAF0                 mov     r13, [rbx+10h]  ; jumptable 000000000000A954 case 3
.text:000000000000AAF4                 mov     r12, [rbx+8]
.text:000000000000AAF8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000AAFF                 mov     rbx, [rbx]
.text:000000000000AB02                 mov     edx, 5          ; category
.text:000000000000AB07                 xor     edi, edi        ; domainname
.text:000000000000AB09                 call    _dcgettext
.text:000000000000AB0E                 add     rsp, 28h
.text:000000000000AB12                 mov     r9, r13
.text:000000000000AB15                 mov     r8, r12
.text:000000000000AB18                 mov     rcx, rbx
.text:000000000000AB1B                 mov     rdi, rbp
.text:000000000000AB1E                 mov     rdx, rax
.text:000000000000AB21                 pop     rbx
.text:000000000000AB22                 pop     rbp
.text:000000000000AB23                 pop     r12
.text:000000000000AB25                 pop     r13
.text:000000000000AB27                 pop     r14
.text:000000000000AB29                 pop     r15
.text:000000000000AB2B                 mov     esi, 1
.text:000000000000AB30                 xor     eax, eax
.text:000000000000AB32                 jmp     ___fprintf_chk
.text:000000000000AB32 ; ---------------------------------------------------------------------------
.text:000000000000AB37                 align 20h
.text:000000000000AB40
.text:000000000000AB40 loc_AB40:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AB40                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AB40                 lea     rsi, aWrittenBySSSAn ; jumptable 000000000000A954 case 4
.text:000000000000AB47                 mov     edx, 5          ; category
.text:000000000000AB4C                 xor     edi, edi        ; domainname
.text:000000000000AB4E                 mov     r14, [rbx+18h]
.text:000000000000AB52                 mov     r13, [rbx+10h]
.text:000000000000AB56                 mov     r12, [rbx+8]
.text:000000000000AB5A                 mov     rbx, [rbx]
.text:000000000000AB5D                 call    _dcgettext
.text:000000000000AB62                 sub     rsp, 8
.text:000000000000AB66
.text:000000000000AB66 loc_AB66:                               ; CODE XREF: version_etc_arn+310↓j
.text:000000000000AB66                 push    r14
.text:000000000000AB68                 mov     rdx, rax
.text:000000000000AB6B                 mov     r9, r13
.text:000000000000AB6E                 mov     r8, r12
.text:000000000000AB71                 mov     rcx, rbx
.text:000000000000AB74                 mov     rdi, rbp
.text:000000000000AB77                 mov     esi, 1
.text:000000000000AB7C                 xor     eax, eax
.text:000000000000AB7E                 call    ___fprintf_chk
.text:000000000000AB83                 pop     rax
.text:000000000000AB84                 pop     rdx
.text:000000000000AB85                 add     rsp, 28h
.text:000000000000AB89                 pop     rbx
.text:000000000000AB8A                 pop     rbp
.text:000000000000AB8B                 pop     r12
.text:000000000000AB8D                 pop     r13
.text:000000000000AB8F                 pop     r14
.text:000000000000AB91                 pop     r15
.text:000000000000AB93                 retn
.text:000000000000AB93 ; ---------------------------------------------------------------------------
.text:000000000000AB94                 align 8
.text:000000000000AB98
.text:000000000000AB98 loc_AB98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AB98                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AB98                 mov     r15, [rbx+20h]  ; jumptable 000000000000A954 case 5
.text:000000000000AB9C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:000000000000ABA3                 mov     edx, 5          ; category
.text:000000000000ABA8                 xor     edi, edi        ; domainname
.text:000000000000ABAA                 mov     r14, [rbx+18h]
.text:000000000000ABAE                 mov     r13, [rbx+10h]
.text:000000000000ABB2                 mov     r12, [rbx+8]
.text:000000000000ABB6                 mov     rbx, [rbx]
.text:000000000000ABB9                 call    _dcgettext
.text:000000000000ABBE                 push    r15
.text:000000000000ABC0                 jmp     short loc_AB66
.text:000000000000ABC0 ; ---------------------------------------------------------------------------
.text:000000000000ABC2                 align 8
.text:000000000000ABC8
.text:000000000000ABC8 loc_ABC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000ABC8                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000ABC8                 mov     r8, [rbx+8]     ; jumptable 000000000000A954 case 6
.text:000000000000ABCC                 mov     r12, [rbx+28h]
.text:000000000000ABD0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:000000000000ABD7                 mov     r15, [rbx+20h]
.text:000000000000ABDB                 mov     r14, [rbx+18h]
.text:000000000000ABDF                 mov     edx, 5          ; category
.text:000000000000ABE4                 mov     r13, [rbx+10h]
.text:000000000000ABE8                 xor     edi, edi        ; domainname
.text:000000000000ABEA                 mov     rbx, [rbx]
.text:000000000000ABED                 mov     [rsp+58h+var_58], r8
.text:000000000000ABF1                 call    _dcgettext
.text:000000000000ABF6                 sub     rsp, 8
.text:000000000000ABFA                 mov     r9, r13
.text:000000000000ABFD                 push    r12
.text:000000000000ABFF                 push    r15
.text:000000000000AC01                 push    r14
.text:000000000000AC03
.text:000000000000AC03 loc_AC03:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:000000000000AC03                 mov     r8, [rsp+78h+var_58]
.text:000000000000AC08                 mov     rcx, rbx
.text:000000000000AC0B                 mov     rdx, rax
.text:000000000000AC0E                 mov     rdi, rbp
.text:000000000000AC11                 mov     esi, 1
.text:000000000000AC16                 xor     eax, eax
.text:000000000000AC18                 call    ___fprintf_chk
.text:000000000000AC1D                 add     rsp, 20h
.text:000000000000AC21                 add     rsp, 28h
.text:000000000000AC25                 pop     rbx
.text:000000000000AC26                 pop     rbp
.text:000000000000AC27                 pop     r12
.text:000000000000AC29                 pop     r13
.text:000000000000AC2B                 pop     r14
.text:000000000000AC2D                 pop     r15
.text:000000000000AC2F                 retn
.text:000000000000AC30 ; ---------------------------------------------------------------------------
.text:000000000000AC30
.text:000000000000AC30 loc_AC30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:000000000000AC30                                         ; DATA XREF: .rodata:jpt_A954↓o
.text:000000000000AC30                 mov     r9, [rbx+10h]   ; jumptable 000000000000A954 case 7
.text:000000000000AC34                 mov     r13, [rbx+30h]
.text:000000000000AC38                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000AC3F                 mov     r12, [rbx+28h]
.text:000000000000AC43                 mov     r15, [rbx+20h]
.text:000000000000AC47                 mov     edx, 5          ; category
.text:000000000000AC4C                 mov     r14, [rbx+18h]
.text:000000000000AC50                 mov     r8, [rbx+8]
.text:000000000000AC54                 xor     edi, edi        ; domainname
.text:000000000000AC56                 mov     [rsp+58h+var_50], r9
.text:000000000000AC5B                 mov     rbx, [rbx]
.text:000000000000AC5E                 mov     [rsp+58h+var_58], r8
.text:000000000000AC62                 call    _dcgettext
.text:000000000000AC67                 push    r13
.text:000000000000AC69                 push    r12
.text:000000000000AC6B                 push    r15
.text:000000000000AC6D                 push    r14
.text:000000000000AC6F                 mov     r9, [rsp+78h+var_50]
.text:000000000000AC74                 jmp     short loc_AC03
.text:000000000000AC74 ; ---------------------------------------------------------------------------
.text:000000000000AC76                 align 20h
.text:000000000000AC80
.text:000000000000AC80 def_A954:                               ; CODE XREF: version_etc_arn+90↑j
.text:000000000000AC80                 mov     r10, [rbx+40h]  ; jumptable 000000000000A954 default case
.text:000000000000AC84                 mov     r9, [rbx+38h]
.text:000000000000AC88                 mov     edx, 5
.text:000000000000AC8D                 mov     rax, [rbx+10h]
.text:000000000000AC91                 mov     r8, [rbx+8]
.text:000000000000AC95                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000AC9C                 mov     r13, [rbx+30h]
.text:000000000000ACA0                 mov     r12, [rbx+28h]
.text:000000000000ACA4                 mov     r15, [rbx+20h]
.text:000000000000ACA8                 mov     r14, [rbx+18h]
.text:000000000000ACAC                 mov     [rsp+58h+var_40], r10
.text:000000000000ACB1                 mov     [rsp+58h+var_48], r9
.text:000000000000ACB6                 mov     [rsp+58h+var_58], rax
.text:000000000000ACBA                 mov     [rsp+58h+var_50], r8
.text:000000000000ACBF                 mov     rbx, [rbx]
.text:000000000000ACC2                 jmp     loc_AA52
.text:000000000000ACC2 ; } // starts at A8B0
.text:000000000000ACC2 version_etc_arn endp
.text:000000000000ACC2
.text:000000000000ACC2 ; ---------------------------------------------------------------------------
.text:000000000000ACC7                 align 10h
.text:000000000000ACD0
.text:000000000000ACD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACD0
.text:000000000000ACD0 ; Attributes: info_from_lumina
.text:000000000000ACD0
.text:000000000000ACD0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:000000000000ACD0                 public version_etc_ar
.text:000000000000ACD0 version_etc_ar  proc near
.text:000000000000ACD0 ; __unwind {
.text:000000000000ACD0                 xor     r9d, r9d
.text:000000000000ACD3                 cmp     qword ptr [r8], 0
.text:000000000000ACD7                 jz      short loc_ACEB
.text:000000000000ACD9                 nop     dword ptr [rax+00000000h]
.text:000000000000ACE0
.text:000000000000ACE0 loc_ACE0:                               ; CODE XREF: version_etc_ar+19↓j
.text:000000000000ACE0                 add     r9, 1
.text:000000000000ACE4                 cmp     qword ptr [r8+r9*8], 0
.text:000000000000ACE9                 jnz     short loc_ACE0
.text:000000000000ACEB
.text:000000000000ACEB loc_ACEB:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000ACEB                 jmp     version_etc_arn
.text:000000000000ACEB ; } // starts at ACD0
.text:000000000000ACEB version_etc_ar  endp
.text:000000000000ACEB
.text:000000000000ACF0
.text:000000000000ACF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACF0
.text:000000000000ACF0 ; Attributes: info_from_lumina
.text:000000000000ACF0
.text:000000000000ACF0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:000000000000ACF0                 public version_etc_va
.text:000000000000ACF0 version_etc_va  proc near
.text:000000000000ACF0
.text:000000000000ACF0 authtab         = qword ptr -68h
.text:000000000000ACF0 var_10          = qword ptr -10h
.text:000000000000ACF0
.text:000000000000ACF0 ; __unwind {
.text:000000000000ACF0                 sub     rsp, 68h
.text:000000000000ACF4                 mov     r10, r8
.text:000000000000ACF7                 xor     r9d, r9d
.text:000000000000ACFA                 mov     rax, fs:28h
.text:000000000000AD03                 mov     [rsp+68h+var_10], rax
.text:000000000000AD08                 xor     eax, eax
.text:000000000000AD0A                 mov     r8, rsp
.text:000000000000AD0D                 nop     dword ptr [rax]
.text:000000000000AD10
.text:000000000000AD10 loc_AD10:                               ; CODE XREF: version_etc_va+49↓j
.text:000000000000AD10                 mov     eax, [r10]
.text:000000000000AD13                 cmp     eax, 2Fh ; '/'
.text:000000000000AD16                 ja      short loc_AD5A
.text:000000000000AD18                 mov     r11d, eax
.text:000000000000AD1B                 add     r11, [r10+10h]
.text:000000000000AD1F                 add     eax, 8
.text:000000000000AD22                 mov     [r10], eax
.text:000000000000AD25
.text:000000000000AD25 loc_AD25:                               ; CODE XREF: version_etc_va+76↓j
.text:000000000000AD25                 mov     rax, [r11]
.text:000000000000AD28                 test    rax, rax
.text:000000000000AD2B                 mov     [r8+r9*8], rax
.text:000000000000AD2F                 jz      short loc_AD3B
.text:000000000000AD31                 add     r9, 1
.text:000000000000AD35                 cmp     r9, 0Ah
.text:000000000000AD39                 jnz     short loc_AD10
.text:000000000000AD3B
.text:000000000000AD3B loc_AD3B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000AD3B                 call    version_etc_arn
.text:000000000000AD40                 mov     rax, [rsp+68h+var_10]
.text:000000000000AD45                 xor     rax, fs:28h
.text:000000000000AD4E                 jnz     short loc_AD55
.text:000000000000AD50                 add     rsp, 68h
.text:000000000000AD54                 retn
.text:000000000000AD55 ; ---------------------------------------------------------------------------
.text:000000000000AD55
.text:000000000000AD55 loc_AD55:                               ; CODE XREF: version_etc_va+5E↑j
.text:000000000000AD55                 call    ___stack_chk_fail
.text:000000000000AD5A ; ---------------------------------------------------------------------------
.text:000000000000AD5A
.text:000000000000AD5A loc_AD5A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000AD5A                 mov     r11, [r10+8]
.text:000000000000AD5E                 lea     rax, [r11+8]
.text:000000000000AD62                 mov     [r10+8], rax
.text:000000000000AD66                 jmp     short loc_AD25
.text:000000000000AD66 ; } // starts at ACF0
.text:000000000000AD66 version_etc_va  endp
.text:000000000000AD66
.text:000000000000AD66 ; ---------------------------------------------------------------------------
.text:000000000000AD68                 align 10h
.text:000000000000AD70
.text:000000000000AD70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AD70
.text:000000000000AD70 ; Attributes: info_from_lumina
.text:000000000000AD70
.text:000000000000AD70 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:000000000000AD70                 public version_etc
.text:000000000000AD70 version_etc     proc near               ; CODE XREF: main+1CA↑p
.text:000000000000AD70
.text:000000000000AD70 var_C0          = dword ptr -0C0h
.text:000000000000AD70 var_B8          = qword ptr -0B8h
.text:000000000000AD70 var_B0          = qword ptr -0B0h
.text:000000000000AD70 var_A8          = byte ptr -0A8h
.text:000000000000AD70 var_50          = qword ptr -50h
.text:000000000000AD70 var_48          = byte ptr -48h
.text:000000000000AD70 var_28          = qword ptr -28h
.text:000000000000AD70 var_20          = qword ptr -20h
.text:000000000000AD70 arg_0           = byte ptr  8
.text:000000000000AD70
.text:000000000000AD70 ; __unwind {
.text:000000000000AD70                 push    rbp
.text:000000000000AD71                 push    rbx
.text:000000000000AD72                 mov     r10d, 20h ; ' '
.text:000000000000AD78                 xor     r11d, r11d
.text:000000000000AD7B                 sub     rsp, 0B8h
.text:000000000000AD82                 mov     rax, fs:28h
.text:000000000000AD8B                 mov     [rsp+0C8h+var_50], rax
.text:000000000000AD90                 xor     eax, eax
.text:000000000000AD92                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000AD9A                 mov     [rsp+0C8h+var_28], r8
.text:000000000000ADA2                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000ADAA                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000ADAF                 mov     [rsp+0C8h+var_20], r9
.text:000000000000ADB7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000ADBF                 mov     [rsp+0C8h+var_B8], rax
.text:000000000000ADC4                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000ADCC                 xor     r9d, r9d
.text:000000000000ADCF                 mov     [rsp+0C8h+var_B0], rax
.text:000000000000ADD4                 mov     rbp, rax
.text:000000000000ADD7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000ADE0
.text:000000000000ADE0 loc_ADE0:                               ; CODE XREF: version_etc+9A↓j
.text:000000000000ADE0                 cmp     r10d, 2Fh ; '/'
.text:000000000000ADE4                 ja      short loc_AE3C
.text:000000000000ADE6                 mov     eax, r10d
.text:000000000000ADE9                 mov     r11d, 1
.text:000000000000ADEF                 add     r10d, 8
.text:000000000000ADF3                 add     rax, rbp
.text:000000000000ADF6
.text:000000000000ADF6 loc_ADF6:                               ; CODE XREF: version_etc+D3↓j
.text:000000000000ADF6                 mov     rax, [rax]
.text:000000000000ADF9                 test    rax, rax
.text:000000000000ADFC                 mov     [r8+r9*8], rax
.text:000000000000AE00                 jz      short loc_AE0C
.text:000000000000AE02                 add     r9, 1
.text:000000000000AE06                 cmp     r9, 0Ah
.text:000000000000AE0A                 jnz     short loc_ADE0
.text:000000000000AE0C
.text:000000000000AE0C loc_AE0C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000AE0C                 test    r11b, r11b
.text:000000000000AE0F                 jnz     short loc_AE35
.text:000000000000AE11
.text:000000000000AE11 loc_AE11:                               ; CODE XREF: version_etc+CA↓j
.text:000000000000AE11                 call    version_etc_arn
.text:000000000000AE16                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000AE1B                 xor     rax, fs:28h
.text:000000000000AE24                 jnz     short loc_AE30
.text:000000000000AE26                 add     rsp, 0B8h
.text:000000000000AE2D                 pop     rbx
.text:000000000000AE2E                 pop     rbp
.text:000000000000AE2F                 retn
.text:000000000000AE30 ; ---------------------------------------------------------------------------
.text:000000000000AE30
.text:000000000000AE30 loc_AE30:                               ; CODE XREF: version_etc+B4↑j
.text:000000000000AE30                 call    ___stack_chk_fail
.text:000000000000AE35 ; ---------------------------------------------------------------------------
.text:000000000000AE35
.text:000000000000AE35 loc_AE35:                               ; CODE XREF: version_etc+9F↑j
.text:000000000000AE35                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000AE3A                 jmp     short loc_AE11
.text:000000000000AE3C ; ---------------------------------------------------------------------------
.text:000000000000AE3C
.text:000000000000AE3C loc_AE3C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000AE3C                 mov     rax, rbx
.text:000000000000AE3F                 add     rbx, 8
.text:000000000000AE43                 jmp     short loc_ADF6
.text:000000000000AE43 ; } // starts at AD70
.text:000000000000AE43 version_etc     endp
.text:000000000000AE43
.text:000000000000AE43 ; ---------------------------------------------------------------------------
.text:000000000000AE45                 align 10h
.text:000000000000AE50
.text:000000000000AE50 ; =============== S U B R O U T I N E =======================================
.text:000000000000AE50
.text:000000000000AE50 ; Attributes: info_from_lumina
.text:000000000000AE50
.text:000000000000AE50 ; void __cdecl emit_bug_reporting_address()
.text:000000000000AE50                 public emit_bug_reporting_address
.text:000000000000AE50 emit_bug_reporting_address proc near
.text:000000000000AE50 ; __unwind {
.text:000000000000AE50                 push    rbx
.text:000000000000AE51                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:000000000000AE58                 mov     edx, 5          ; category
.text:000000000000AE5D                 xor     edi, edi        ; domainname
.text:000000000000AE5F                 call    _dcgettext
.text:000000000000AE64                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000AE6B                 mov     rsi, rax
.text:000000000000AE6E                 mov     edi, 1
.text:000000000000AE73                 xor     eax, eax
.text:000000000000AE75                 call    ___printf_chk
.text:000000000000AE7A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:000000000000AE81                 mov     edx, 5          ; category
.text:000000000000AE86                 xor     edi, edi        ; domainname
.text:000000000000AE88                 call    _dcgettext
.text:000000000000AE8D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000AE94                 lea     rdx, unk_F7B7
.text:000000000000AE9B                 mov     rsi, rax
.text:000000000000AE9E                 mov     edi, 1
.text:000000000000AEA3                 xor     eax, eax
.text:000000000000AEA5                 call    ___printf_chk
.text:000000000000AEAA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000AEB1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:000000000000AEB8                 xor     edi, edi        ; domainname
.text:000000000000AEBA                 mov     edx, 5          ; category
.text:000000000000AEBF                 call    _dcgettext
.text:000000000000AEC4                 mov     rsi, rbx        ; stream
.text:000000000000AEC7                 mov     rdi, rax        ; s
.text:000000000000AECA                 pop     rbx
.text:000000000000AECB                 jmp     _fputs_unlocked
.text:000000000000AECB ; } // starts at AE50
.text:000000000000AECB emit_bug_reporting_address endp
.text:000000000000AECB
.text:000000000000AED0
.text:000000000000AED0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AED0
.text:000000000000AED0
.text:000000000000AED0                 public xmalloc
.text:000000000000AED0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:000000000000AED0                                         ; quotearg_alloc_mem+81↑p ...
.text:000000000000AED0 ; __unwind {
.text:000000000000AED0                 push    rbx
.text:000000000000AED1                 mov     rbx, rdi
.text:000000000000AED4                 call    _malloc
.text:000000000000AED9                 test    rax, rax
.text:000000000000AEDC                 jnz     short loc_AEE3
.text:000000000000AEDE                 test    rbx, rbx
.text:000000000000AEE1                 jnz     short loc_AEE5
.text:000000000000AEE3
.text:000000000000AEE3 loc_AEE3:                               ; CODE XREF: xmalloc+C↑j
.text:000000000000AEE3                 pop     rbx
.text:000000000000AEE4                 retn
.text:000000000000AEE5 ; ---------------------------------------------------------------------------
.text:000000000000AEE5
.text:000000000000AEE5 loc_AEE5:                               ; CODE XREF: xmalloc+11↑j
.text:000000000000AEE5                 call    xalloc_die
.text:000000000000AEE5 ; } // starts at AED0
.text:000000000000AEE5 xmalloc         endp
.text:000000000000AEE5
.text:000000000000AEE5 ; ---------------------------------------------------------------------------
.text:000000000000AEEA                 align 10h
.text:000000000000AEF0
.text:000000000000AEF0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AEF0
.text:000000000000AEF0 ; Attributes: info_from_lumina
.text:000000000000AEF0
.text:000000000000AEF0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:000000000000AEF0                 public xnmalloc
.text:000000000000AEF0 xnmalloc        proc near
.text:000000000000AEF0 ; __unwind {
.text:000000000000AEF0                 mov     rax, rdi
.text:000000000000AEF3                 mul     rsi
.text:000000000000AEF6                 mov     rdi, rax
.text:000000000000AEF9                 seto    al
.text:000000000000AEFC                 test    rdi, rdi
.text:000000000000AEFF                 js      short loc_AF0B
.text:000000000000AF01                 movzx   eax, al
.text:000000000000AF04                 test    rax, rax
.text:000000000000AF07                 jnz     short loc_AF0B
.text:000000000000AF09                 jmp     short xmalloc
.text:000000000000AF0B ; ---------------------------------------------------------------------------
.text:000000000000AF0B
.text:000000000000AF0B loc_AF0B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000AF0B                                         ; xnmalloc+17↑j
.text:000000000000AF0B                 sub     rsp, 8
.text:000000000000AF0F                 call    xalloc_die
.text:000000000000AF0F ; } // starts at AEF0
.text:000000000000AF0F xnmalloc        endp
.text:000000000000AF0F
.text:000000000000AF0F ; ---------------------------------------------------------------------------
.text:000000000000AF14                 align 20h
.text:000000000000AF20
.text:000000000000AF20 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF20
.text:000000000000AF20
.text:000000000000AF20                 public xcharalloc
.text:000000000000AF20 xcharalloc      proc near
.text:000000000000AF20 ; __unwind {
.text:000000000000AF20                 jmp     short xmalloc
.text:000000000000AF20 ; } // starts at AF20
.text:000000000000AF20 xcharalloc      endp
.text:000000000000AF20
.text:000000000000AF20 ; ---------------------------------------------------------------------------
.text:000000000000AF22                 align 10h
.text:000000000000AF30
.text:000000000000AF30 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF30
.text:000000000000AF30 ; Attributes: info_from_lumina
.text:000000000000AF30
.text:000000000000AF30 ; void *__fastcall xrealloc(void *p, size_t n)
.text:000000000000AF30                 public xrealloc
.text:000000000000AF30 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:000000000000AF30                                         ; quotearg_n_options+182↑p ...
.text:000000000000AF30 ; __unwind {
.text:000000000000AF30                 test    rsi, rsi
.text:000000000000AF33                 push    rbx
.text:000000000000AF34                 mov     rbx, rsi
.text:000000000000AF37                 jnz     short loc_AF3E
.text:000000000000AF39                 test    rdi, rdi
.text:000000000000AF3C                 jnz     short loc_AF58
.text:000000000000AF3E
.text:000000000000AF3E loc_AF3E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000AF3E                 mov     rsi, rbx        ; size
.text:000000000000AF41                 call    _realloc
.text:000000000000AF46                 test    rax, rax
.text:000000000000AF49                 jnz     short loc_AF50
.text:000000000000AF4B                 test    rbx, rbx
.text:000000000000AF4E                 jnz     short loc_AF61
.text:000000000000AF50
.text:000000000000AF50 loc_AF50:                               ; CODE XREF: xrealloc+19↑j
.text:000000000000AF50                 pop     rbx
.text:000000000000AF51                 retn
.text:000000000000AF51 ; ---------------------------------------------------------------------------
.text:000000000000AF52                 align 8
.text:000000000000AF58
.text:000000000000AF58 loc_AF58:                               ; CODE XREF: xrealloc+C↑j
.text:000000000000AF58                 call    _free
.text:000000000000AF5D                 xor     eax, eax
.text:000000000000AF5F                 pop     rbx
.text:000000000000AF60                 retn
.text:000000000000AF61 ; ---------------------------------------------------------------------------
.text:000000000000AF61
.text:000000000000AF61 loc_AF61:                               ; CODE XREF: xrealloc+1E↑j
.text:000000000000AF61                 call    xalloc_die
.text:000000000000AF61 ; } // starts at AF30
.text:000000000000AF61 xrealloc        endp
.text:000000000000AF61
.text:000000000000AF61 ; ---------------------------------------------------------------------------
.text:000000000000AF66                 align 10h
.text:000000000000AF70
.text:000000000000AF70 ; =============== S U B R O U T I N E =======================================
.text:000000000000AF70
.text:000000000000AF70 ; Attributes: info_from_lumina
.text:000000000000AF70
.text:000000000000AF70 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:000000000000AF70                 public xnrealloc
.text:000000000000AF70 xnrealloc       proc near
.text:000000000000AF70 ; __unwind {
.text:000000000000AF70                 mov     rax, rsi
.text:000000000000AF73                 mul     rdx
.text:000000000000AF76                 mov     rsi, rax
.text:000000000000AF79                 seto    al
.text:000000000000AF7C                 test    rsi, rsi
.text:000000000000AF7F                 js      short loc_AF8B
.text:000000000000AF81                 movzx   eax, al
.text:000000000000AF84                 test    rax, rax
.text:000000000000AF87                 jnz     short loc_AF8B
.text:000000000000AF89                 jmp     short xrealloc
.text:000000000000AF8B ; ---------------------------------------------------------------------------
.text:000000000000AF8B
.text:000000000000AF8B loc_AF8B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000AF8B                                         ; xnrealloc+17↑j
.text:000000000000AF8B                 sub     rsp, 8
.text:000000000000AF8F                 call    xalloc_die
.text:000000000000AF8F ; } // starts at AF70
.text:000000000000AF8F xnrealloc       endp
.text:000000000000AF8F
.text:000000000000AF8F ; ---------------------------------------------------------------------------
.text:000000000000AF94                 align 20h
.text:000000000000AFA0
.text:000000000000AFA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AFA0
.text:000000000000AFA0 ; Attributes: info_from_lumina
.text:000000000000AFA0
.text:000000000000AFA0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:000000000000AFA0                 public x2nrealloc
.text:000000000000AFA0 x2nrealloc      proc near
.text:000000000000AFA0 ; __unwind {
.text:000000000000AFA0                 test    rdi, rdi
.text:000000000000AFA3                 mov     r9, rdx
.text:000000000000AFA6                 mov     rcx, [rsi]
.text:000000000000AFA9                 jz      short loc_AFE0
.text:000000000000AFAB                 xor     edx, edx
.text:000000000000AFAD                 mov     rax, 5555555555555554h
.text:000000000000AFB7                 div     r9
.text:000000000000AFBA                 cmp     rax, rcx
.text:000000000000AFBD                 jbe     short loc_AFFB
.text:000000000000AFBF                 mov     rax, rcx
.text:000000000000AFC2                 shr     rax, 1
.text:000000000000AFC5                 lea     rcx, [rax+rcx+1]
.text:000000000000AFCA
.text:000000000000AFCA loc_AFCA:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000AFCA                 mov     [rsi], rcx
.text:000000000000AFCD                 imul    rcx, r9
.text:000000000000AFD1                 mov     rsi, rcx
.text:000000000000AFD4                 jmp     xrealloc
.text:000000000000AFD4 ; ---------------------------------------------------------------------------
.text:000000000000AFD9                 align 20h
.text:000000000000AFE0
.text:000000000000AFE0 loc_AFE0:                               ; CODE XREF: x2nrealloc+9↑j
.text:000000000000AFE0                 test    rcx, rcx
.text:000000000000AFE3                 jz      short loc_B008
.text:000000000000AFE5
.text:000000000000AFE5 loc_AFE5:                               ; CODE XREF: x2nrealloc+80↓j
.text:000000000000AFE5                 mov     rax, rcx
.text:000000000000AFE8                 mul     r9
.text:000000000000AFEB                 seto    dl
.text:000000000000AFEE                 test    rax, rax
.text:000000000000AFF1                 movzx   edx, dl
.text:000000000000AFF4                 js      short loc_AFFB
.text:000000000000AFF6                 test    rdx, rdx
.text:000000000000AFF9                 jz      short loc_AFCA
.text:000000000000AFFB
.text:000000000000AFFB loc_AFFB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000AFFB                                         ; x2nrealloc+54↑j
.text:000000000000AFFB                 sub     rsp, 8
.text:000000000000AFFF                 call    xalloc_die
.text:000000000000AFFF ; ---------------------------------------------------------------------------
.text:000000000000B004                 align 8
.text:000000000000B008
.text:000000000000B008 loc_B008:                               ; CODE XREF: x2nrealloc+43↑j
.text:000000000000B008                 xor     edx, edx
.text:000000000000B00A                 mov     eax, 80h
.text:000000000000B00F                 xor     r8d, r8d
.text:000000000000B012                 div     r9
.text:000000000000B015                 test    rax, rax
.text:000000000000B018                 setz    r8b
.text:000000000000B01C                 lea     rcx, [r8+rax]
.text:000000000000B020                 jmp     short loc_AFE5
.text:000000000000B020 ; } // starts at AFA0
.text:000000000000B020 x2nrealloc      endp
.text:000000000000B020
.text:000000000000B020 ; ---------------------------------------------------------------------------
.text:000000000000B022                 align 10h
.text:000000000000B030
.text:000000000000B030 ; =============== S U B R O U T I N E =======================================
.text:000000000000B030
.text:000000000000B030 ; Attributes: info_from_lumina
.text:000000000000B030
.text:000000000000B030 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:000000000000B030                 public x2realloc
.text:000000000000B030 x2realloc       proc near
.text:000000000000B030 ; __unwind {
.text:000000000000B030                 test    rdi, rdi
.text:000000000000B033                 mov     rax, [rsi]
.text:000000000000B036                 jz      short loc_B060
.text:000000000000B038                 mov     rdx, 5555555555555553h
.text:000000000000B042                 cmp     rax, rdx
.text:000000000000B045                 ja      short loc_B071
.text:000000000000B047                 mov     rdx, rax
.text:000000000000B04A                 shr     rdx, 1
.text:000000000000B04D                 lea     rax, [rdx+rax+1]
.text:000000000000B052
.text:000000000000B052 loc_B052:                               ; CODE XREF: x2realloc+3F↓j
.text:000000000000B052                 mov     [rsi], rax
.text:000000000000B055                 mov     rsi, rax
.text:000000000000B058                 jmp     xrealloc
.text:000000000000B058 ; ---------------------------------------------------------------------------
.text:000000000000B05D                 align 20h
.text:000000000000B060
.text:000000000000B060 loc_B060:                               ; CODE XREF: x2realloc+6↑j
.text:000000000000B060                 test    rax, rax
.text:000000000000B063                 mov     edx, 80h
.text:000000000000B068                 cmovz   rax, rdx
.text:000000000000B06C                 test    rax, rax
.text:000000000000B06F                 jns     short loc_B052
.text:000000000000B071
.text:000000000000B071 loc_B071:                               ; CODE XREF: x2realloc+15↑j
.text:000000000000B071                 sub     rsp, 8
.text:000000000000B075                 call    xalloc_die
.text:000000000000B075 ; } // starts at B030
.text:000000000000B075 x2realloc       endp
.text:000000000000B075
.text:000000000000B075 ; ---------------------------------------------------------------------------
.text:000000000000B07A                 align 20h
.text:000000000000B080
.text:000000000000B080 ; =============== S U B R O U T I N E =======================================
.text:000000000000B080
.text:000000000000B080
.text:000000000000B080 ; __int64 __fastcall xzalloc(size_t n)
.text:000000000000B080                 public xzalloc
.text:000000000000B080 xzalloc         proc near
.text:000000000000B080 ; __unwind {
.text:000000000000B080                 push    rbx
.text:000000000000B081                 mov     rbx, rdi
.text:000000000000B084                 call    xmalloc
.text:000000000000B089                 mov     rdx, rbx        ; n
.text:000000000000B08C                 xor     esi, esi        ; c
.text:000000000000B08E                 mov     rdi, rax        ; s
.text:000000000000B091                 pop     rbx
.text:000000000000B092                 jmp     _memset
.text:000000000000B092 ; } // starts at B080
.text:000000000000B092 xzalloc         endp
.text:000000000000B092
.text:000000000000B092 ; ---------------------------------------------------------------------------
.text:000000000000B097                 align 20h
.text:000000000000B0A0
.text:000000000000B0A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0A0
.text:000000000000B0A0 ; Attributes: info_from_lumina
.text:000000000000B0A0
.text:000000000000B0A0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:000000000000B0A0                 public xcalloc
.text:000000000000B0A0 xcalloc         proc near
.text:000000000000B0A0 ; __unwind {
.text:000000000000B0A0                 mov     rax, rdi
.text:000000000000B0A3                 sub     rsp, 8
.text:000000000000B0A7                 mul     rsi
.text:000000000000B0AA                 seto    dl
.text:000000000000B0AD                 test    rax, rax
.text:000000000000B0B0                 js      short loc_B0C9
.text:000000000000B0B2                 movzx   edx, dl
.text:000000000000B0B5                 test    rdx, rdx
.text:000000000000B0B8                 jnz     short loc_B0C9
.text:000000000000B0BA                 call    _calloc
.text:000000000000B0BF                 test    rax, rax
.text:000000000000B0C2                 jz      short loc_B0C9
.text:000000000000B0C4                 add     rsp, 8
.text:000000000000B0C8                 retn
.text:000000000000B0C9 ; ---------------------------------------------------------------------------
.text:000000000000B0C9
.text:000000000000B0C9 loc_B0C9:                               ; CODE XREF: xcalloc+10↑j
.text:000000000000B0C9                                         ; xcalloc+18↑j ...
.text:000000000000B0C9                 call    xalloc_die
.text:000000000000B0C9 ; } // starts at B0A0
.text:000000000000B0C9 xcalloc         endp
.text:000000000000B0C9
.text:000000000000B0C9 ; ---------------------------------------------------------------------------
.text:000000000000B0CE                 align 10h
.text:000000000000B0D0
.text:000000000000B0D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B0D0
.text:000000000000B0D0 ; Attributes: info_from_lumina
.text:000000000000B0D0
.text:000000000000B0D0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:000000000000B0D0                 public xmemdup
.text:000000000000B0D0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:000000000000B0D0                                         ; xstrdup+11↓j
.text:000000000000B0D0 ; __unwind {
.text:000000000000B0D0                 push    rbp
.text:000000000000B0D1                 push    rbx
.text:000000000000B0D2                 mov     rbp, rdi
.text:000000000000B0D5                 mov     rdi, rsi
.text:000000000000B0D8                 mov     rbx, rsi
.text:000000000000B0DB                 sub     rsp, 8
.text:000000000000B0DF                 call    xmalloc
.text:000000000000B0E4                 add     rsp, 8
.text:000000000000B0E8                 mov     rdx, rbx        ; n
.text:000000000000B0EB                 mov     rsi, rbp        ; src
.text:000000000000B0EE                 pop     rbx
.text:000000000000B0EF                 pop     rbp
.text:000000000000B0F0                 mov     rdi, rax        ; dest
.text:000000000000B0F3                 jmp     _memcpy
.text:000000000000B0F3 ; } // starts at B0D0
.text:000000000000B0F3 xmemdup         endp
.text:000000000000B0F3
.text:000000000000B0F3 ; ---------------------------------------------------------------------------
.text:000000000000B0F8                 align 20h
.text:000000000000B100
.text:000000000000B100 ; =============== S U B R O U T I N E =======================================
.text:000000000000B100
.text:000000000000B100
.text:000000000000B100 ; __int64 __fastcall xstrdup(void *src)
.text:000000000000B100                 public xstrdup
.text:000000000000B100 xstrdup         proc near
.text:000000000000B100 ; __unwind {
.text:000000000000B100                 push    rbx
.text:000000000000B101                 mov     rbx, rdi
.text:000000000000B104                 call    _strlen
.text:000000000000B109                 mov     rdi, rbx        ; src
.text:000000000000B10C                 lea     rsi, [rax+1]    ; n
.text:000000000000B110                 pop     rbx
.text:000000000000B111                 jmp     short xmemdup
.text:000000000000B111 ; } // starts at B100
.text:000000000000B111 xstrdup         endp
.text:000000000000B111
.text:000000000000B111 ; ---------------------------------------------------------------------------
.text:000000000000B113                 align 20h
.text:000000000000B120
.text:000000000000B120 ; =============== S U B R O U T I N E =======================================
.text:000000000000B120
.text:000000000000B120 ; Attributes: noreturn info_from_lumina
.text:000000000000B120
.text:000000000000B120 ; void __cdecl xalloc_die()
.text:000000000000B120                 public xalloc_die
.text:000000000000B120 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_A0F6↑p
.text:000000000000B120                                         ; xmalloc:loc_AEE5↑p ...
.text:000000000000B120 ; __unwind {
.text:000000000000B120                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:000000000000B127                 sub     rsp, 8
.text:000000000000B12B                 mov     edx, 5          ; category
.text:000000000000B130                 xor     edi, edi        ; domainname
.text:000000000000B132                 call    _dcgettext
.text:000000000000B137                 mov     edi, cs:exit_failure ; status
.text:000000000000B13D                 lea     rdx, aS_0+2     ; format
.text:000000000000B144                 mov     rcx, rax
.text:000000000000B147                 xor     esi, esi        ; errnum
.text:000000000000B149                 xor     eax, eax
.text:000000000000B14B                 call    _error
.text:000000000000B150                 call    _abort
.text:000000000000B150 ; } // starts at B120
.text:000000000000B150 xalloc_die      endp
.text:000000000000B150
.text:000000000000B150 ; ---------------------------------------------------------------------------
.text:000000000000B155                 align 20h
.text:000000000000B160
.text:000000000000B160 ; =============== S U B R O U T I N E =======================================
.text:000000000000B160
.text:000000000000B160 ; Attributes: info_from_lumina
.text:000000000000B160
.text:000000000000B160 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:000000000000B160                 public rpl_mbrtowc
.text:000000000000B160 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:000000000000B160
.text:000000000000B160 pwc             = dword ptr -34h
.text:000000000000B160 var_30          = qword ptr -30h
.text:000000000000B160
.text:000000000000B160 ; __unwind {
.text:000000000000B160                 push    r13
.text:000000000000B162                 push    r12
.text:000000000000B164                 mov     r13, rsi
.text:000000000000B167                 push    rbp
.text:000000000000B168                 push    rbx
.text:000000000000B169                 mov     rbx, rdi
.text:000000000000B16C                 mov     r12, rdx
.text:000000000000B16F                 sub     rsp, 18h
.text:000000000000B173                 mov     rax, fs:28h
.text:000000000000B17C                 mov     [rsp+38h+var_30], rax
.text:000000000000B181                 xor     eax, eax
.text:000000000000B183                 lea     rax, [rsp+38h+pwc]
.text:000000000000B188                 test    rdi, rdi
.text:000000000000B18B                 cmovz   rbx, rax
.text:000000000000B18F                 mov     rdi, rbx        ; pwc
.text:000000000000B192                 call    _mbrtowc
.text:000000000000B197                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000B19B                 mov     rbp, rax
.text:000000000000B19E                 jbe     short loc_B1C0
.text:000000000000B1A0                 test    r12, r12
.text:000000000000B1A3                 jz      short loc_B1C0
.text:000000000000B1A5                 xor     edi, edi
.text:000000000000B1A7                 call    hard_locale
.text:000000000000B1AC                 test    al, al
.text:000000000000B1AE                 jnz     short loc_B1C0
.text:000000000000B1B0                 movzx   eax, byte ptr [r13+0]
.text:000000000000B1B5                 mov     ebp, 1
.text:000000000000B1BA                 mov     [rbx], eax
.text:000000000000B1BC                 nop     dword ptr [rax+00h]
.text:000000000000B1C0
.text:000000000000B1C0 loc_B1C0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:000000000000B1C0                                         ; rpl_mbrtowc+43↑j ...
.text:000000000000B1C0                 mov     rdx, [rsp+38h+var_30]
.text:000000000000B1C5                 xor     rdx, fs:28h
.text:000000000000B1CE                 mov     rax, rbp
.text:000000000000B1D1                 jnz     short loc_B1DE
.text:000000000000B1D3                 add     rsp, 18h
.text:000000000000B1D7                 pop     rbx
.text:000000000000B1D8                 pop     rbp
.text:000000000000B1D9                 pop     r12
.text:000000000000B1DB                 pop     r13
.text:000000000000B1DD                 retn
.text:000000000000B1DE ; ---------------------------------------------------------------------------
.text:000000000000B1DE
.text:000000000000B1DE loc_B1DE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000B1DE                 call    ___stack_chk_fail
.text:000000000000B1DE ; } // starts at B160
.text:000000000000B1DE rpl_mbrtowc     endp
.text:000000000000B1DE
.text:000000000000B1DE ; ---------------------------------------------------------------------------
.text:000000000000B1E3                 align 10h
.text:000000000000B1F0
.text:000000000000B1F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B1F0
.text:000000000000B1F0 ; Attributes: info_from_lumina
.text:000000000000B1F0
.text:000000000000B1F0 ; int __fastcall setenv_TZ(const char *tz)
.text:000000000000B1F0 setenv_TZ       proc near               ; CODE XREF: revert_tz:loc_B274↓p
.text:000000000000B1F0                                         ; set_tz:loc_B4C5↓p
.text:000000000000B1F0 ; __unwind {
.text:000000000000B1F0                 test    rdi, rdi
.text:000000000000B1F3                 jz      short loc_B210
.text:000000000000B1F5                 mov     rsi, rdi        ; value
.text:000000000000B1F8                 lea     rdi, aTz_0      ; "TZ"
.text:000000000000B1FF                 mov     edx, 1          ; replace
.text:000000000000B204                 jmp     _setenv
.text:000000000000B204 ; ---------------------------------------------------------------------------
.text:000000000000B209                 align 10h
.text:000000000000B210
.text:000000000000B210 loc_B210:                               ; CODE XREF: setenv_TZ+3↑j
.text:000000000000B210                 lea     rdi, aTz_0      ; "TZ"
.text:000000000000B217                 jmp     _unsetenv
.text:000000000000B217 ; } // starts at B1F0
.text:000000000000B217 setenv_TZ       endp
.text:000000000000B217
.text:000000000000B217 ; ---------------------------------------------------------------------------
.text:000000000000B21C                 align 20h
.text:000000000000B220
.text:000000000000B220 ; =============== S U B R O U T I N E =======================================
.text:000000000000B220
.text:000000000000B220 ; Attributes: info_from_lumina
.text:000000000000B220
.text:000000000000B220 ; void __fastcall tzfree_0(timezone_t tz)
.text:000000000000B220 tzfree_0        proc near               ; CODE XREF: revert_tz+36↓p
.text:000000000000B220                                         ; set_tz+67↓p ...
.text:000000000000B220 ; __unwind {
.text:000000000000B220                 test    rdi, rdi
.text:000000000000B223                 jz      short locret_B248
.text:000000000000B225                 push    rbx
.text:000000000000B226                 db      2Eh
.text:000000000000B226                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B230
.text:000000000000B230 loc_B230:                               ; CODE XREF: tzfree_0+1E↓j
.text:000000000000B230                 mov     rbx, [rdi]
.text:000000000000B233                 call    _free
.text:000000000000B238                 test    rbx, rbx
.text:000000000000B23B                 mov     rdi, rbx
.text:000000000000B23E                 jnz     short loc_B230
.text:000000000000B240                 pop     rbx
.text:000000000000B241                 retn
.text:000000000000B241 ; ---------------------------------------------------------------------------
.text:000000000000B242                 align 8
.text:000000000000B248
.text:000000000000B248 locret_B248:                            ; CODE XREF: tzfree_0+3↑j
.text:000000000000B248                 rep retn
.text:000000000000B248 ; } // starts at B220
.text:000000000000B248 tzfree_0        endp
.text:000000000000B248
.text:000000000000B248 ; ---------------------------------------------------------------------------
.text:000000000000B24A                 align 10h
.text:000000000000B250
.text:000000000000B250 ; =============== S U B R O U T I N E =======================================
.text:000000000000B250
.text:000000000000B250 ; Attributes: info_from_lumina
.text:000000000000B250
.text:000000000000B250 ; _Bool __fastcall revert_tz(timezone_t tz)
.text:000000000000B250 revert_tz       proc near               ; CODE XREF: localtime_rz+69↓p
.text:000000000000B250                                         ; localtime_rz+98↓p ...
.text:000000000000B250 ; __unwind {
.text:000000000000B250                 push    r13
.text:000000000000B252                 push    r12
.text:000000000000B254                 push    rbp
.text:000000000000B255                 push    rbx
.text:000000000000B256                 mov     rbp, rdi
.text:000000000000B259                 sub     rsp, 8
.text:000000000000B25D                 call    ___errno_location
.text:000000000000B262                 cmp     byte ptr [rbp+8], 0
.text:000000000000B266                 mov     rbx, rax
.text:000000000000B269                 mov     r12d, [rax]
.text:000000000000B26C                 lea     rdi, [rbp+9]
.text:000000000000B270                 jnz     short loc_B274
.text:000000000000B272                 xor     edi, edi        ; value
.text:000000000000B274
.text:000000000000B274 loc_B274:                               ; CODE XREF: revert_tz+20↑j
.text:000000000000B274                 call    setenv_TZ
.text:000000000000B279                 test    eax, eax
.text:000000000000B27B                 jz      short loc_B2A0
.text:000000000000B27D                 mov     r12d, [rbx]
.text:000000000000B280                 xor     r13d, r13d
.text:000000000000B283
.text:000000000000B283 loc_B283:                               ; CODE XREF: revert_tz+5B↓j
.text:000000000000B283                 mov     rdi, rbp
.text:000000000000B286                 call    tzfree_0
.text:000000000000B28B                 mov     [rbx], r12d
.text:000000000000B28E                 add     rsp, 8
.text:000000000000B292                 mov     eax, r13d
.text:000000000000B295                 pop     rbx
.text:000000000000B296                 pop     rbp
.text:000000000000B297                 pop     r12
.text:000000000000B299                 pop     r13
.text:000000000000B29B                 retn
.text:000000000000B29B ; ---------------------------------------------------------------------------
.text:000000000000B29C                 align 20h
.text:000000000000B2A0
.text:000000000000B2A0 loc_B2A0:                               ; CODE XREF: revert_tz+2B↑j
.text:000000000000B2A0                 call    _tzset
.text:000000000000B2A5                 mov     r13d, 1
.text:000000000000B2AB                 jmp     short loc_B283
.text:000000000000B2AB ; } // starts at B250
.text:000000000000B2AB revert_tz       endp
.text:000000000000B2AB
.text:000000000000B2AB ; ---------------------------------------------------------------------------
.text:000000000000B2AD                 align 10h
.text:000000000000B2B0
.text:000000000000B2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B2B0
.text:000000000000B2B0 ; Attributes: info_from_lumina
.text:000000000000B2B0
.text:000000000000B2B0 ; timezone_t __fastcall tzalloc(const char *name)
.text:000000000000B2B0                 public tzalloc
.text:000000000000B2B0 tzalloc         proc near               ; CODE XREF: parse_datetime2+575↑p
.text:000000000000B2B0                                         ; parse_datetime2+102F↑p ...
.text:000000000000B2B0 ; __unwind {
.text:000000000000B2B0                 test    rdi, rdi
.text:000000000000B2B3                 push    r12
.text:000000000000B2B5                 push    rbp
.text:000000000000B2B6                 push    rbx
.text:000000000000B2B7                 jz      short loc_B318
.text:000000000000B2B9                 mov     r12, rdi
.text:000000000000B2BC                 call    _strlen
.text:000000000000B2C1                 lea     rbp, [rax+1]
.text:000000000000B2C5                 mov     edi, 76h ; 'v'
.text:000000000000B2CA                 cmp     rbp, 76h ; 'v'
.text:000000000000B2CE                 cmovnb  rdi, rbp
.text:000000000000B2D2                 add     rdi, 11h
.text:000000000000B2D6                 and     rdi, 0FFFFFFFFFFFFFFF8h ; size
.text:000000000000B2DA                 call    _malloc
.text:000000000000B2DF                 test    rax, rax
.text:000000000000B2E2                 mov     rbx, rax
.text:000000000000B2E5                 jz      short loc_B30B
.text:000000000000B2E7                 mov     qword ptr [rax], 0
.text:000000000000B2EE                 lea     rdi, [rbx+9]    ; dest
.text:000000000000B2F2                 mov     eax, 1
.text:000000000000B2F7                 mov     [rbx+8], ax
.text:000000000000B2FB                 mov     rdx, rbp        ; n
.text:000000000000B2FE                 mov     rsi, r12        ; src
.text:000000000000B301                 call    _memcpy
.text:000000000000B306                 mov     byte ptr [rbx+rbp+9], 0
.text:000000000000B30B
.text:000000000000B30B loc_B30B:                               ; CODE XREF: tzalloc+35↑j
.text:000000000000B30B                                         ; tzalloc+78↓j
.text:000000000000B30B                 mov     rax, rbx
.text:000000000000B30E                 pop     rbx
.text:000000000000B30F                 pop     rbp
.text:000000000000B310                 pop     r12
.text:000000000000B312                 retn
.text:000000000000B312 ; ---------------------------------------------------------------------------
.text:000000000000B313                 align 8
.text:000000000000B318
.text:000000000000B318 loc_B318:                               ; CODE XREF: tzalloc+7↑j
.text:000000000000B318                 mov     edi, 80h        ; size
.text:000000000000B31D                 call    _malloc
.text:000000000000B322                 test    rax, rax
.text:000000000000B325                 mov     rbx, rax
.text:000000000000B328                 jz      short loc_B30B
.text:000000000000B32A                 xor     edx, edx
.text:000000000000B32C                 mov     qword ptr [rbx], 0
.text:000000000000B333                 mov     rax, rbx
.text:000000000000B336                 mov     [rbx+8], dx
.text:000000000000B33A                 pop     rbx
.text:000000000000B33B                 pop     rbp
.text:000000000000B33C                 pop     r12
.text:000000000000B33E                 retn
.text:000000000000B33E ; } // starts at B2B0
.text:000000000000B33E tzalloc         endp
.text:000000000000B33E
.text:000000000000B33E ; ---------------------------------------------------------------------------
.text:000000000000B33F                 align 20h
.text:000000000000B340
.text:000000000000B340 ; =============== S U B R O U T I N E =======================================
.text:000000000000B340
.text:000000000000B340 ; Attributes: info_from_lumina
.text:000000000000B340
.text:000000000000B340 ; _Bool __fastcall save_abbr(timezone_t tz, tm *tm)
.text:000000000000B340 save_abbr       proc near               ; CODE XREF: localtime_rz+3B↓p
.text:000000000000B340                                         ; mktime_z+51↓p
.text:000000000000B340 ; __unwind {
.text:000000000000B340                 push    r15
.text:000000000000B342                 push    r14
.text:000000000000B344                 mov     eax, 1
.text:000000000000B349                 push    r13
.text:000000000000B34B                 push    r12
.text:000000000000B34D                 push    rbp
.text:000000000000B34E                 push    rbx
.text:000000000000B34F                 sub     rsp, 8
.text:000000000000B353                 mov     rbp, [rsi+30h]
.text:000000000000B357                 test    rbp, rbp
.text:000000000000B35A                 jz      loc_B3F0
.text:000000000000B360                 cmp     rsi, rbp
.text:000000000000B363                 mov     r12, rdi
.text:000000000000B366                 mov     r13, rsi
.text:000000000000B369                 ja      short loc_B374
.text:000000000000B36B                 lea     rdx, [rsi+38h]
.text:000000000000B36F                 cmp     rbp, rdx
.text:000000000000B372                 jb      short loc_B3F0
.text:000000000000B374
.text:000000000000B374 loc_B374:                               ; CODE XREF: save_abbr+29↑j
.text:000000000000B374                 cmp     byte ptr [rbp+0], 0
.text:000000000000B378                 lea     rbx, [r12+9]
.text:000000000000B37D                 jz      short loc_B3E0
.text:000000000000B37F                 nop
.text:000000000000B380
.text:000000000000B380 loc_B380:                               ; CODE XREF: save_abbr+76↓j
.text:000000000000B380                                         ; save_abbr+7F↓j
.text:000000000000B380                 mov     rsi, rbp        ; s2
.text:000000000000B383                 mov     rdi, rbx        ; s1
.text:000000000000B386                 call    _strcmp
.text:000000000000B38B                 test    eax, eax
.text:000000000000B38D                 jz      short loc_B3E7
.text:000000000000B38F
.text:000000000000B38F loc_B38F:                               ; CODE XREF: save_abbr+95↓j
.text:000000000000B38F                 cmp     byte ptr [rbx], 0
.text:000000000000B392                 jnz     short loc_B3A6
.text:000000000000B394                 lea     r14, [r12+9]
.text:000000000000B399                 cmp     r14, rbx
.text:000000000000B39C                 jnz     short loc_B400
.text:000000000000B39E                 cmp     byte ptr [r12+8], 0
.text:000000000000B3A4                 jz      short loc_B400
.text:000000000000B3A6
.text:000000000000B3A6 loc_B3A6:                               ; CODE XREF: save_abbr+52↑j
.text:000000000000B3A6                 mov     rdi, rbx        ; s
.text:000000000000B3A9                 call    _strlen
.text:000000000000B3AE                 lea     rbx, [rbx+rax+1]
.text:000000000000B3B3                 cmp     byte ptr [rbx], 0
.text:000000000000B3B6                 jnz     short loc_B380
.text:000000000000B3B8                 mov     rax, [r12]
.text:000000000000B3BC                 test    rax, rax
.text:000000000000B3BF                 jz      short loc_B380
.text:000000000000B3C1                 lea     rbx, [rax+9]
.text:000000000000B3C5                 mov     rsi, rbp        ; s2
.text:000000000000B3C8                 mov     r12, rax
.text:000000000000B3CB                 mov     rdi, rbx        ; s1
.text:000000000000B3CE                 call    _strcmp
.text:000000000000B3D3                 test    eax, eax
.text:000000000000B3D5                 jnz     short loc_B38F
.text:000000000000B3D7                 jmp     short loc_B3E7
.text:000000000000B3D7 ; ---------------------------------------------------------------------------
.text:000000000000B3D9                 align 20h
.text:000000000000B3E0
.text:000000000000B3E0 loc_B3E0:                               ; CODE XREF: save_abbr+3D↑j
.text:000000000000B3E0                 lea     rbx, aUserProvidedTi+1Dh ; ""
.text:000000000000B3E7
.text:000000000000B3E7 loc_B3E7:                               ; CODE XREF: save_abbr+4D↑j
.text:000000000000B3E7                                         ; save_abbr+97↑j ...
.text:000000000000B3E7                 mov     [r13+30h], rbx
.text:000000000000B3EB                 mov     eax, 1
.text:000000000000B3F0
.text:000000000000B3F0 loc_B3F0:                               ; CODE XREF: save_abbr+1A↑j
.text:000000000000B3F0                                         ; save_abbr+32↑j ...
.text:000000000000B3F0                 add     rsp, 8
.text:000000000000B3F4                 pop     rbx
.text:000000000000B3F5                 pop     rbp
.text:000000000000B3F6                 pop     r12
.text:000000000000B3F8                 pop     r13
.text:000000000000B3FA                 pop     r14
.text:000000000000B3FC                 pop     r15
.text:000000000000B3FE                 retn
.text:000000000000B3FE ; ---------------------------------------------------------------------------
.text:000000000000B3FF                 align 20h
.text:000000000000B400
.text:000000000000B400 loc_B400:                               ; CODE XREF: save_abbr+5C↑j
.text:000000000000B400                                         ; save_abbr+64↑j
.text:000000000000B400                 mov     rdi, rbp        ; s
.text:000000000000B403                 call    _strlen
.text:000000000000B408                 lea     rdx, [rax+1]    ; n
.text:000000000000B40C                 mov     r15, rax
.text:000000000000B40F                 mov     rax, rbx
.text:000000000000B412                 sub     rax, r14
.text:000000000000B415                 mov     rcx, rax
.text:000000000000B418                 not     rcx
.text:000000000000B41B                 cmp     rcx, rdx
.text:000000000000B41E                 jb      short loc_B450
.text:000000000000B420                 add     rax, rdx
.text:000000000000B423                 cmp     rax, 76h ; 'v'
.text:000000000000B427                 jbe     short loc_B460
.text:000000000000B429                 mov     rdi, rbp        ; src
.text:000000000000B42C                 call    tzalloc
.text:000000000000B431                 mov     rbx, rax
.text:000000000000B434                 mov     [r12], rax
.text:000000000000B438                 xor     eax, eax
.text:000000000000B43A                 test    rbx, rbx
.text:000000000000B43D                 jz      short loc_B3F0
.text:000000000000B43F                 mov     byte ptr [rbx+8], 0
.text:000000000000B443                 add     rbx, 9
.text:000000000000B447                 jmp     short loc_B3E7
.text:000000000000B447 ; ---------------------------------------------------------------------------
.text:000000000000B449                 align 10h
.text:000000000000B450
.text:000000000000B450 loc_B450:                               ; CODE XREF: save_abbr+DE↑j
.text:000000000000B450                 call    ___errno_location
.text:000000000000B455                 mov     dword ptr [rax], 0Ch
.text:000000000000B45B                 xor     eax, eax
.text:000000000000B45D                 jmp     short loc_B3F0
.text:000000000000B45D ; ---------------------------------------------------------------------------
.text:000000000000B45F                 align 20h
.text:000000000000B460
.text:000000000000B460 loc_B460:                               ; CODE XREF: save_abbr+E7↑j
.text:000000000000B460                 mov     rsi, rbp        ; src
.text:000000000000B463                 mov     rdi, rbx        ; dest
.text:000000000000B466                 call    _memcpy
.text:000000000000B46B                 mov     byte ptr [rbx+r15+1], 0
.text:000000000000B471                 jmp     loc_B3E7
.text:000000000000B471 ; } // starts at B340
.text:000000000000B471 save_abbr       endp
.text:000000000000B471
.text:000000000000B471 ; ---------------------------------------------------------------------------
.text:000000000000B476                 align 20h
.text:000000000000B480
.text:000000000000B480 ; =============== S U B R O U T I N E =======================================
.text:000000000000B480
.text:000000000000B480 ; Attributes: info_from_lumina
.text:000000000000B480
.text:000000000000B480 ; timezone_t __fastcall set_tz(timezone_t tz)
.text:000000000000B480 set_tz          proc near               ; CODE XREF: localtime_rz+18↓p
.text:000000000000B480                                         ; mktime_z+27↓p
.text:000000000000B480
.text:000000000000B480 var_20          = qword ptr -20h
.text:000000000000B480
.text:000000000000B480 ; __unwind {
.text:000000000000B480                 push    r12
.text:000000000000B482                 push    rbp
.text:000000000000B483                 mov     rbp, rdi
.text:000000000000B486                 push    rbx
.text:000000000000B487                 lea     rdi, aTz_0      ; "TZ"
.text:000000000000B48E                 sub     rsp, 10h
.text:000000000000B492                 call    _getenv
.text:000000000000B497                 test    rax, rax
.text:000000000000B49A                 mov     rbx, rax
.text:000000000000B49D                 jz      loc_B538
.text:000000000000B4A3                 cmp     byte ptr [rbp+8], 0
.text:000000000000B4A7                 jnz     short loc_B510
.text:000000000000B4A9
.text:000000000000B4A9 loc_B4A9:                               ; CODE XREF: set_tz+A4↓j
.text:000000000000B4A9                                         ; set_tz+C2↓j
.text:000000000000B4A9                 mov     rdi, rbx        ; src
.text:000000000000B4AC                 call    tzalloc
.text:000000000000B4B1                 test    rax, rax
.text:000000000000B4B4                 mov     r12, rax
.text:000000000000B4B7                 jz      short loc_B4FD
.text:000000000000B4B9                 xor     edi, edi
.text:000000000000B4BB                 cmp     byte ptr [rbp+8], 0
.text:000000000000B4BF                 jz      short loc_B4C5
.text:000000000000B4C1                 lea     rdi, [rbp+9]    ; value
.text:000000000000B4C5
.text:000000000000B4C5 loc_B4C5:                               ; CODE XREF: set_tz+3F↑j
.text:000000000000B4C5                 call    setenv_TZ
.text:000000000000B4CA                 test    eax, eax
.text:000000000000B4CC                 jz      loc_B558
.text:000000000000B4D2                 call    ___errno_location
.text:000000000000B4D7                 cmp     r12, 1
.text:000000000000B4DB                 mov     ebx, [rax]
.text:000000000000B4DD                 jz      short loc_B4F8
.text:000000000000B4DF                 mov     rdi, r12
.text:000000000000B4E2                 mov     [rsp+28h+var_20], rax
.text:000000000000B4E7                 call    tzfree_0
.text:000000000000B4EC                 mov     rax, [rsp+28h+var_20]
.text:000000000000B4F1                 nop     dword ptr [rax+00000000h]
.text:000000000000B4F8
.text:000000000000B4F8 loc_B4F8:                               ; CODE XREF: set_tz+5D↑j
.text:000000000000B4F8                 mov     [rax], ebx
.text:000000000000B4FA                 xor     r12d, r12d
.text:000000000000B4FD
.text:000000000000B4FD loc_B4FD:                               ; CODE XREF: set_tz+37↑j
.text:000000000000B4FD                                         ; set_tz+DD↓j
.text:000000000000B4FD                 add     rsp, 10h
.text:000000000000B501                 mov     rax, r12
.text:000000000000B504                 pop     rbx
.text:000000000000B505                 pop     rbp
.text:000000000000B506                 pop     r12
.text:000000000000B508                 retn
.text:000000000000B508 ; ---------------------------------------------------------------------------
.text:000000000000B509                 align 10h
.text:000000000000B510
.text:000000000000B510 loc_B510:                               ; CODE XREF: set_tz+27↑j
.text:000000000000B510                 lea     rdi, [rbp+9]    ; s1
.text:000000000000B514                 mov     rsi, rax        ; s2
.text:000000000000B517                 mov     r12d, 1
.text:000000000000B51D                 call    _strcmp
.text:000000000000B522                 test    eax, eax
.text:000000000000B524                 jnz     short loc_B4A9
.text:000000000000B526                 add     rsp, 10h
.text:000000000000B52A                 mov     rax, r12
.text:000000000000B52D                 pop     rbx
.text:000000000000B52E                 pop     rbp
.text:000000000000B52F                 pop     r12
.text:000000000000B531                 retn
.text:000000000000B531 ; ---------------------------------------------------------------------------
.text:000000000000B532                 align 8
.text:000000000000B538
.text:000000000000B538 loc_B538:                               ; CODE XREF: set_tz+1D↑j
.text:000000000000B538                 cmp     byte ptr [rbp+8], 0
.text:000000000000B53C                 mov     r12d, 1
.text:000000000000B542                 jnz     loc_B4A9
.text:000000000000B548                 add     rsp, 10h
.text:000000000000B54C                 mov     rax, r12
.text:000000000000B54F                 pop     rbx
.text:000000000000B550                 pop     rbp
.text:000000000000B551                 pop     r12
.text:000000000000B553                 retn
.text:000000000000B553 ; ---------------------------------------------------------------------------
.text:000000000000B554                 align 8
.text:000000000000B558
.text:000000000000B558 loc_B558:                               ; CODE XREF: set_tz+4C↑j
.text:000000000000B558                 call    _tzset
.text:000000000000B55D                 jmp     short loc_B4FD
.text:000000000000B55D ; } // starts at B480
.text:000000000000B55D set_tz          endp
.text:000000000000B55D
.text:000000000000B55D ; ---------------------------------------------------------------------------
.text:000000000000B55F                 align 20h
.text:000000000000B560
.text:000000000000B560 ; =============== S U B R O U T I N E =======================================
.text:000000000000B560
.text:000000000000B560
.text:000000000000B560                 public tzfree
.text:000000000000B560 tzfree          proc near               ; CODE XREF: parse_datetime2+447↑p
.text:000000000000B560                                         ; parse_datetime2+10EA↑p ...
.text:000000000000B560 ; __unwind {
.text:000000000000B560                 cmp     rdi, 1
.text:000000000000B564                 jz      short locret_B56B
.text:000000000000B566                 jmp     tzfree_0
.text:000000000000B56B ; ---------------------------------------------------------------------------
.text:000000000000B56B
.text:000000000000B56B locret_B56B:                            ; CODE XREF: tzfree+4↑j
.text:000000000000B56B                 retn
.text:000000000000B56B ; } // starts at B560
.text:000000000000B56B tzfree          endp
.text:000000000000B56B
.text:000000000000B56B ; ---------------------------------------------------------------------------
.text:000000000000B56C                 align 10h
.text:000000000000B570
.text:000000000000B570 ; =============== S U B R O U T I N E =======================================
.text:000000000000B570
.text:000000000000B570 ; Attributes: info_from_lumina
.text:000000000000B570
.text:000000000000B570 ; tm *__fastcall localtime_rz(timezone_t tz, const time_t *t, tm *tm)
.text:000000000000B570                 public localtime_rz
.text:000000000000B570 localtime_rz    proc near               ; CODE XREF: parse_datetime2+12A↑p
.text:000000000000B570                                         ; parse_datetime2+351↑p ...
.text:000000000000B570 ; __unwind {
.text:000000000000B570                 push    r13
.text:000000000000B572                 push    r12
.text:000000000000B574                 push    rbp
.text:000000000000B575                 push    rbx
.text:000000000000B576                 mov     rbp, rsi
.text:000000000000B579                 sub     rsp, 8
.text:000000000000B57D                 test    rdi, rdi
.text:000000000000B580                 jz      short loc_B5F0
.text:000000000000B582                 mov     r13, rdx
.text:000000000000B585                 mov     rbx, rdi
.text:000000000000B588                 call    set_tz
.text:000000000000B58D                 test    rax, rax
.text:000000000000B590                 mov     r12, rax
.text:000000000000B593                 jz      short loc_B5DE
.text:000000000000B595                 mov     rsi, r13        ; tp
.text:000000000000B598                 mov     rdi, rbp        ; timer
.text:000000000000B59B                 call    _localtime_r
.text:000000000000B5A0                 test    rax, rax
.text:000000000000B5A3                 jz      short loc_B5D0
.text:000000000000B5A5                 mov     rsi, r13
.text:000000000000B5A8                 mov     rdi, rbx
.text:000000000000B5AB                 call    save_abbr
.text:000000000000B5B0                 test    al, al
.text:000000000000B5B2                 jz      short loc_B5D0
.text:000000000000B5B4                 cmp     r12, 1
.text:000000000000B5B8                 jnz     short loc_B605
.text:000000000000B5BA
.text:000000000000B5BA loc_B5BA:                               ; CODE XREF: localtime_rz+9F↓j
.text:000000000000B5BA                 add     rsp, 8
.text:000000000000B5BE                 mov     rax, r13
.text:000000000000B5C1                 pop     rbx
.text:000000000000B5C2                 pop     rbp
.text:000000000000B5C3                 pop     r12
.text:000000000000B5C5                 pop     r13
.text:000000000000B5C7                 retn
.text:000000000000B5C7 ; ---------------------------------------------------------------------------
.text:000000000000B5C8                 align 10h
.text:000000000000B5D0
.text:000000000000B5D0 loc_B5D0:                               ; CODE XREF: localtime_rz+33↑j
.text:000000000000B5D0                                         ; localtime_rz+42↑j
.text:000000000000B5D0                 cmp     r12, 1
.text:000000000000B5D4                 jz      short loc_B5DE
.text:000000000000B5D6                 mov     rdi, r12
.text:000000000000B5D9                 call    revert_tz
.text:000000000000B5DE
.text:000000000000B5DE loc_B5DE:                               ; CODE XREF: localtime_rz+23↑j
.text:000000000000B5DE                                         ; localtime_rz+64↑j ...
.text:000000000000B5DE                 add     rsp, 8
.text:000000000000B5E2                 xor     eax, eax
.text:000000000000B5E4                 pop     rbx
.text:000000000000B5E5                 pop     rbp
.text:000000000000B5E6                 pop     r12
.text:000000000000B5E8                 pop     r13
.text:000000000000B5EA                 retn
.text:000000000000B5EA ; ---------------------------------------------------------------------------
.text:000000000000B5EB                 align 10h
.text:000000000000B5F0
.text:000000000000B5F0 loc_B5F0:                               ; CODE XREF: localtime_rz+10↑j
.text:000000000000B5F0                 add     rsp, 8
.text:000000000000B5F4                 mov     rdi, rbp        ; timer
.text:000000000000B5F7                 mov     rsi, rdx        ; tp
.text:000000000000B5FA                 pop     rbx
.text:000000000000B5FB                 pop     rbp
.text:000000000000B5FC                 pop     r12
.text:000000000000B5FE                 pop     r13
.text:000000000000B600                 jmp     _gmtime_r
.text:000000000000B605 ; ---------------------------------------------------------------------------
.text:000000000000B605
.text:000000000000B605 loc_B605:                               ; CODE XREF: localtime_rz+48↑j
.text:000000000000B605                 mov     rdi, r12
.text:000000000000B608                 call    revert_tz
.text:000000000000B60D                 test    al, al
.text:000000000000B60F                 jnz     short loc_B5BA
.text:000000000000B611                 jmp     short loc_B5DE
.text:000000000000B611 ; } // starts at B570
.text:000000000000B611 localtime_rz    endp
.text:000000000000B611
.text:000000000000B611 ; ---------------------------------------------------------------------------
.text:000000000000B613                 align 20h
.text:000000000000B620
.text:000000000000B620 ; =============== S U B R O U T I N E =======================================
.text:000000000000B620
.text:000000000000B620 ; Attributes: info_from_lumina
.text:000000000000B620
.text:000000000000B620 ; time_t __fastcall mktime_z(timezone_t tz, tm *tm)
.text:000000000000B620                 public mktime_z
.text:000000000000B620 mktime_z        proc near               ; CODE XREF: parse_datetime2+CAA↑p
.text:000000000000B620                                         ; parse_datetime2+10AE↑p ...
.text:000000000000B620
.text:000000000000B620 timer           = qword ptr -60h
.text:000000000000B620 tp              = tm ptr -58h
.text:000000000000B620 var_20          = qword ptr -20h
.text:000000000000B620
.text:000000000000B620 ; __unwind {
.text:000000000000B620                 push    r12
.text:000000000000B622                 push    rbp
.text:000000000000B623                 push    rbx
.text:000000000000B624                 mov     rbx, rsi
.text:000000000000B627                 sub     rsp, 50h
.text:000000000000B62B                 mov     rax, fs:28h
.text:000000000000B634                 mov     [rsp+68h+var_20], rax
.text:000000000000B639                 xor     eax, eax
.text:000000000000B63B                 test    rdi, rdi
.text:000000000000B63E                 jz      loc_B740
.text:000000000000B644                 mov     rbp, rdi
.text:000000000000B647                 call    set_tz
.text:000000000000B64C                 test    rax, rax
.text:000000000000B64F                 mov     r12, rax
.text:000000000000B652                 jz      loc_B750
.text:000000000000B658                 mov     rdi, rbx        ; tp
.text:000000000000B65B                 call    _mktime
.text:000000000000B660                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B664                 mov     [rsp+68h+timer], rax
.text:000000000000B669                 jz      short loc_B6C0
.text:000000000000B66B
.text:000000000000B66B loc_B66B:                               ; CODE XREF: mktime_z+10D↓j
.text:000000000000B66B                 mov     rsi, rbx
.text:000000000000B66E                 mov     rdi, rbp
.text:000000000000B671                 call    save_abbr
.text:000000000000B676                 test    al, al
.text:000000000000B678                 jnz     short loc_B683
.text:000000000000B67A                 mov     [rsp+68h+timer], 0FFFFFFFFFFFFFFFFh
.text:000000000000B683
.text:000000000000B683 loc_B683:                               ; CODE XREF: mktime_z+58↑j
.text:000000000000B683                                         ; mktime_z+B2↓j ...
.text:000000000000B683                 cmp     r12, 1
.text:000000000000B687                 jz      short loc_B699
.text:000000000000B689                 mov     rdi, r12
.text:000000000000B68C                 call    revert_tz
.text:000000000000B691                 test    al, al
.text:000000000000B693                 jz      loc_B750
.text:000000000000B699
.text:000000000000B699 loc_B699:                               ; CODE XREF: mktime_z+67↑j
.text:000000000000B699                 mov     rax, [rsp+68h+timer]
.text:000000000000B69E
.text:000000000000B69E loc_B69E:                               ; CODE XREF: mktime_z+128↓j
.text:000000000000B69E                                         ; mktime_z+137↓j
.text:000000000000B69E                 mov     rcx, [rsp+68h+var_20]
.text:000000000000B6A3                 xor     rcx, fs:28h
.text:000000000000B6AC                 jnz     loc_B75C
.text:000000000000B6B2                 add     rsp, 50h
.text:000000000000B6B6                 pop     rbx
.text:000000000000B6B7                 pop     rbp
.text:000000000000B6B8                 pop     r12
.text:000000000000B6BA                 retn
.text:000000000000B6BA ; ---------------------------------------------------------------------------
.text:000000000000B6BB                 align 20h
.text:000000000000B6C0
.text:000000000000B6C0 loc_B6C0:                               ; CODE XREF: mktime_z+49↑j
.text:000000000000B6C0                 lea     rsi, [rsp+68h+tp] ; tp
.text:000000000000B6C5                 lea     rdi, [rsp+68h+timer] ; timer
.text:000000000000B6CA                 call    _localtime_r
.text:000000000000B6CF                 test    rax, rax
.text:000000000000B6D2                 jz      short loc_B683
.text:000000000000B6D4                 mov     eax, [rbx]
.text:000000000000B6D6                 mov     edx, [rbx+4]
.text:000000000000B6D9                 xor     eax, [rsp+68h+tp.tm_sec]
.text:000000000000B6DD                 xor     edx, [rsp+68h+tp.tm_min]
.text:000000000000B6E1                 mov     ecx, [rsp+68h+tp.tm_isdst]
.text:000000000000B6E5                 or      eax, edx
.text:000000000000B6E7                 mov     edx, [rbx+8]
.text:000000000000B6EA                 xor     edx, [rsp+68h+tp.tm_hour]
.text:000000000000B6EE                 or      eax, edx
.text:000000000000B6F0                 mov     edx, [rbx+0Ch]
.text:000000000000B6F3                 xor     edx, [rsp+68h+tp.tm_mday]
.text:000000000000B6F7                 or      eax, edx
.text:000000000000B6F9                 mov     edx, [rbx+10h]
.text:000000000000B6FC                 xor     edx, [rsp+68h+tp.tm_mon]
.text:000000000000B700                 or      eax, edx
.text:000000000000B702                 mov     edx, [rbx+14h]
.text:000000000000B705                 xor     edx, [rsp+68h+tp.tm_year]
.text:000000000000B709                 or      eax, edx
.text:000000000000B70B                 mov     edx, [rbx+20h]
.text:000000000000B70E                 test    edx, edx
.text:000000000000B710                 setz    dil
.text:000000000000B714                 test    ecx, ecx
.text:000000000000B716                 setz    sil
.text:000000000000B71A                 cmp     dil, sil
.text:000000000000B71D                 jz      short loc_B72B
.text:000000000000B71F                 test    edx, edx
.text:000000000000B721                 js      short loc_B72B
.text:000000000000B723                 test    ecx, ecx
.text:000000000000B725                 jns     loc_B683
.text:000000000000B72B
.text:000000000000B72B loc_B72B:                               ; CODE XREF: mktime_z+FD↑j
.text:000000000000B72B                                         ; mktime_z+101↑j
.text:000000000000B72B                 test    eax, eax
.text:000000000000B72D                 jz      loc_B66B
.text:000000000000B733                 jmp     loc_B683
.text:000000000000B733 ; ---------------------------------------------------------------------------
.text:000000000000B738                 align 20h
.text:000000000000B740
.text:000000000000B740 loc_B740:                               ; CODE XREF: mktime_z+1E↑j
.text:000000000000B740                 mov     rdi, rsi        ; tp
.text:000000000000B743                 call    _timegm
.text:000000000000B748                 jmp     loc_B69E
.text:000000000000B748 ; ---------------------------------------------------------------------------
.text:000000000000B74D                 align 10h
.text:000000000000B750
.text:000000000000B750 loc_B750:                               ; CODE XREF: mktime_z+32↑j
.text:000000000000B750                                         ; mktime_z+73↑j
.text:000000000000B750                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B757                 jmp     loc_B69E
.text:000000000000B75C ; ---------------------------------------------------------------------------
.text:000000000000B75C
.text:000000000000B75C loc_B75C:                               ; CODE XREF: mktime_z+8C↑j
.text:000000000000B75C                 call    ___stack_chk_fail
.text:000000000000B75C ; } // starts at B620
.text:000000000000B75C mktime_z        endp
.text:000000000000B75C
.text:000000000000B75C ; ---------------------------------------------------------------------------
.text:000000000000B761                 align 10h
.text:000000000000B770
.text:000000000000B770 ; =============== S U B R O U T I N E =======================================
.text:000000000000B770
.text:000000000000B770
.text:000000000000B770 ; __int64 __fastcall rpl_vfprintf(FILE *s)
.text:000000000000B770                 public rpl_vfprintf
.text:000000000000B770 rpl_vfprintf    proc near               ; CODE XREF: dbg_printf+BF↑p
.text:000000000000B770
.text:000000000000B770 n               = qword ptr -810h
.text:000000000000B770 var_808         = byte ptr -808h
.text:000000000000B770 var_30          = qword ptr -30h
.text:000000000000B770
.text:000000000000B770 ; __unwind {
.text:000000000000B770                 push    r13
.text:000000000000B772                 push    r12
.text:000000000000B774                 mov     rax, rsi
.text:000000000000B777                 push    rbp
.text:000000000000B778                 push    rbx
.text:000000000000B779                 mov     r13, rdi
.text:000000000000B77C                 sub     rsp, 7F8h
.text:000000000000B783                 lea     r12, [rsp+818h+var_808]
.text:000000000000B788                 lea     rsi, [rsp+818h+n]
.text:000000000000B78D                 mov     [rsp+818h+n], 7D0h
.text:000000000000B796                 mov     rcx, fs:28h
.text:000000000000B79F                 mov     [rsp+818h+var_30], rcx
.text:000000000000B7A7                 xor     ecx, ecx
.text:000000000000B7A9                 mov     rdi, r12
.text:000000000000B7AC                 mov     rcx, rdx
.text:000000000000B7AF                 mov     rdx, rax
.text:000000000000B7B2                 call    vasnprintf
.text:000000000000B7B7                 test    rax, rax
.text:000000000000B7BA                 mov     rbx, [rsp+818h+n]
.text:000000000000B7BF                 jz      loc_B84E
.text:000000000000B7C5                 mov     rcx, r13        ; s
.text:000000000000B7C8                 mov     rdx, rbx        ; n
.text:000000000000B7CB                 mov     esi, 1          ; size
.text:000000000000B7D0                 mov     rdi, rax        ; ptr
.text:000000000000B7D3                 mov     rbp, rax
.text:000000000000B7D6                 call    _fwrite
.text:000000000000B7DB                 cmp     rax, rbx
.text:000000000000B7DE                 jb      short loc_B820
.text:000000000000B7E0                 cmp     rbp, r12
.text:000000000000B7E3                 jz      short loc_B7ED
.text:000000000000B7E5                 mov     rdi, rbp        ; ptr
.text:000000000000B7E8                 call    _free
.text:000000000000B7ED
.text:000000000000B7ED loc_B7ED:                               ; CODE XREF: rpl_vfprintf+73↑j
.text:000000000000B7ED                 cmp     rbx, 7FFFFFFFh
.text:000000000000B7F4                 ja      short loc_B843
.text:000000000000B7F6
.text:000000000000B7F6 loc_B7F6:                               ; CODE XREF: rpl_vfprintf+B8↓j
.text:000000000000B7F6                                         ; rpl_vfprintf+D1↓j ...
.text:000000000000B7F6                 mov     rcx, [rsp+818h+var_30]
.text:000000000000B7FE                 xor     rcx, fs:28h
.text:000000000000B807                 mov     eax, ebx
.text:000000000000B809                 jnz     short loc_B85D
.text:000000000000B80B                 add     rsp, 7F8h
.text:000000000000B812                 pop     rbx
.text:000000000000B813                 pop     rbp
.text:000000000000B814                 pop     r12
.text:000000000000B816                 pop     r13
.text:000000000000B818                 retn
.text:000000000000B818 ; ---------------------------------------------------------------------------
.text:000000000000B819                 align 20h
.text:000000000000B820
.text:000000000000B820 loc_B820:                               ; CODE XREF: rpl_vfprintf+6E↑j
.text:000000000000B820                 cmp     rbp, r12
.text:000000000000B823                 mov     ebx, 0FFFFFFFFh
.text:000000000000B828                 jz      short loc_B7F6
.text:000000000000B82A                 call    ___errno_location
.text:000000000000B82F                 mov     r13d, [rax]
.text:000000000000B832                 mov     r12, rax
.text:000000000000B835                 mov     rdi, rbp        ; ptr
.text:000000000000B838                 call    _free
.text:000000000000B83D                 mov     [r12], r13d
.text:000000000000B841                 jmp     short loc_B7F6
.text:000000000000B843 ; ---------------------------------------------------------------------------
.text:000000000000B843
.text:000000000000B843 loc_B843:                               ; CODE XREF: rpl_vfprintf+84↑j
.text:000000000000B843                 call    ___errno_location
.text:000000000000B848                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000B84E
.text:000000000000B84E loc_B84E:                               ; CODE XREF: rpl_vfprintf+4F↑j
.text:000000000000B84E                 mov     rdi, r13
.text:000000000000B851                 mov     ebx, 0FFFFFFFFh
.text:000000000000B856                 call    fseterr
.text:000000000000B85B                 jmp     short loc_B7F6
.text:000000000000B85D ; ---------------------------------------------------------------------------
.text:000000000000B85D
.text:000000000000B85D loc_B85D:                               ; CODE XREF: rpl_vfprintf+99↑j
.text:000000000000B85D                 call    ___stack_chk_fail
.text:000000000000B85D ; } // starts at B770
.text:000000000000B85D rpl_vfprintf    endp
.text:000000000000B85D
.text:000000000000B85D ; ---------------------------------------------------------------------------
.text:000000000000B862                 align 10h
.text:000000000000B870
.text:000000000000B870 ; =============== S U B R O U T I N E =======================================
.text:000000000000B870
.text:000000000000B870 ; Attributes: info_from_lumina
.text:000000000000B870
.text:000000000000B870 ; int __fastcall close_stream(FILE *stream)
.text:000000000000B870                 public close_stream
.text:000000000000B870 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:000000000000B870                                         ; close_stdout+33↑p
.text:000000000000B870 ; __unwind {
.text:000000000000B870                 push    r12
.text:000000000000B872                 push    rbp
.text:000000000000B873                 mov     rbp, rdi
.text:000000000000B876                 push    rbx
.text:000000000000B877                 call    ___fpending
.text:000000000000B87C                 mov     ebx, [rbp+0]
.text:000000000000B87F                 mov     rdi, rbp        ; stream
.text:000000000000B882                 mov     r12, rax
.text:000000000000B885                 call    rpl_fclose
.text:000000000000B88A                 and     ebx, 20h
.text:000000000000B88D                 test    ebx, ebx
.text:000000000000B88F                 jnz     short loc_B8A8
.text:000000000000B891                 test    eax, eax
.text:000000000000B893                 jz      short loc_B89F
.text:000000000000B895                 test    r12, r12
.text:000000000000B898                 mov     eax, 0FFFFFFFFh
.text:000000000000B89D                 jz      short loc_B8D8
.text:000000000000B89F
.text:000000000000B89F loc_B89F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000B89F                 pop     rbx
.text:000000000000B8A0                 pop     rbp
.text:000000000000B8A1                 pop     r12
.text:000000000000B8A3                 retn
.text:000000000000B8A3 ; ---------------------------------------------------------------------------
.text:000000000000B8A4                 align 8
.text:000000000000B8A8
.text:000000000000B8A8 loc_B8A8:                               ; CODE XREF: close_stream+1F↑j
.text:000000000000B8A8                 test    eax, eax
.text:000000000000B8AA                 jnz     short loc_B8C8
.text:000000000000B8AC                 call    ___errno_location
.text:000000000000B8B1                 mov     dword ptr [rax], 0
.text:000000000000B8B7                 mov     eax, 0FFFFFFFFh
.text:000000000000B8BC                 pop     rbx
.text:000000000000B8BD                 pop     rbp
.text:000000000000B8BE                 pop     r12
.text:000000000000B8C0                 retn
.text:000000000000B8C0 ; ---------------------------------------------------------------------------
.text:000000000000B8C1                 align 8
.text:000000000000B8C8
.text:000000000000B8C8 loc_B8C8:                               ; CODE XREF: close_stream+3A↑j
.text:000000000000B8C8                 pop     rbx
.text:000000000000B8C9                 mov     eax, 0FFFFFFFFh
.text:000000000000B8CE                 pop     rbp
.text:000000000000B8CF                 pop     r12
.text:000000000000B8D1                 retn
.text:000000000000B8D1 ; ---------------------------------------------------------------------------
.text:000000000000B8D2                 align 8
.text:000000000000B8D8
.text:000000000000B8D8 loc_B8D8:                               ; CODE XREF: close_stream+2D↑j
.text:000000000000B8D8                 call    ___errno_location
.text:000000000000B8DD                 cmp     dword ptr [rax], 9
.text:000000000000B8E0                 pop     rbx
.text:000000000000B8E1                 pop     rbp
.text:000000000000B8E2                 pop     r12
.text:000000000000B8E4                 setnz   al
.text:000000000000B8E7                 movzx   eax, al
.text:000000000000B8EA                 neg     eax
.text:000000000000B8EC                 retn
.text:000000000000B8EC ; } // starts at B870
.text:000000000000B8EC close_stream    endp
.text:000000000000B8EC
.text:000000000000B8EC ; ---------------------------------------------------------------------------
.text:000000000000B8ED                 align 10h
.text:000000000000B8F0
.text:000000000000B8F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B8F0
.text:000000000000B8F0
.text:000000000000B8F0                 public hard_locale
.text:000000000000B8F0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:000000000000B8F0 ; __unwind {
.text:000000000000B8F0                 sub     rsp, 8
.text:000000000000B8F4                 xor     esi, esi        ; locale
.text:000000000000B8F6                 call    _setlocale
.text:000000000000B8FB                 mov     rdx, rax
.text:000000000000B8FE                 mov     eax, 1
.text:000000000000B903                 test    rdx, rdx
.text:000000000000B906                 jz      short loc_B925
.text:000000000000B908                 lea     rdi, aSec+2     ; "C"
.text:000000000000B90F                 mov     ecx, 2
.text:000000000000B914                 mov     rsi, rdx
.text:000000000000B917                 repe cmpsb
.text:000000000000B919                 setnbe  cl
.text:000000000000B91C                 sbb     cl, 0
.text:000000000000B91F                 xor     eax, eax
.text:000000000000B921                 test    cl, cl
.text:000000000000B923                 jnz     short loc_B930
.text:000000000000B925
.text:000000000000B925 loc_B925:                               ; CODE XREF: hard_locale+16↑j
.text:000000000000B925                 add     rsp, 8
.text:000000000000B929                 retn
.text:000000000000B929 ; ---------------------------------------------------------------------------
.text:000000000000B92A                 align 10h
.text:000000000000B930
.text:000000000000B930 loc_B930:                               ; CODE XREF: hard_locale+33↑j
.text:000000000000B930                 lea     rdi, aPosix     ; "POSIX"
.text:000000000000B937                 mov     ecx, 6
.text:000000000000B93C                 mov     rsi, rdx
.text:000000000000B93F                 repe cmpsb
.text:000000000000B941                 setnbe  al
.text:000000000000B944                 sbb     al, 0
.text:000000000000B946                 test    al, al
.text:000000000000B948                 setnz   al
.text:000000000000B94B                 add     rsp, 8
.text:000000000000B94F                 retn
.text:000000000000B94F ; } // starts at B8F0
.text:000000000000B94F hard_locale     endp
.text:000000000000B94F
.text:000000000000B950
.text:000000000000B950 ; =============== S U B R O U T I N E =======================================
.text:000000000000B950
.text:000000000000B950
.text:000000000000B950                 public locale_charset
.text:000000000000B950 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:000000000000B950 ; __unwind {
.text:000000000000B950                 sub     rsp, 8
.text:000000000000B954                 mov     edi, 0Eh        ; item
.text:000000000000B959                 call    _nl_langinfo
.text:000000000000B95E                 test    rax, rax
.text:000000000000B961                 jz      short loc_B980
.text:000000000000B963                 cmp     byte ptr [rax], 0
.text:000000000000B966                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000B96D                 cmovz   rax, rdx
.text:000000000000B971                 add     rsp, 8
.text:000000000000B975                 retn
.text:000000000000B975 ; ---------------------------------------------------------------------------
.text:000000000000B976                 align 20h
.text:000000000000B980
.text:000000000000B980 loc_B980:                               ; CODE XREF: locale_charset+11↑j
.text:000000000000B980                 lea     rax, aAscii     ; "ASCII"
.text:000000000000B987                 add     rsp, 8
.text:000000000000B98B                 retn
.text:000000000000B98B ; } // starts at B950
.text:000000000000B98B locale_charset  endp
.text:000000000000B98B
.text:000000000000B98B ; ---------------------------------------------------------------------------
.text:000000000000B98C                 align 10h
.text:000000000000B990
.text:000000000000B990 ; =============== S U B R O U T I N E =======================================
.text:000000000000B990
.text:000000000000B990 ; Attributes: info_from_lumina
.text:000000000000B990
.text:000000000000B990 ; char *__fastcall memcpy_lowcase(char *dest, const char *src, size_t len)
.text:000000000000B990 memcpy_lowcase  proc near               ; CODE XREF: __strftime_internal+1500↓p
.text:000000000000B990                                         ; __strftime_internal+1977↓p
.text:000000000000B990 ; __unwind {
.text:000000000000B990                 test    rdx, rdx
.text:000000000000B993                 push    r12
.text:000000000000B995                 push    rbp
.text:000000000000B996                 mov     rbp, rdi
.text:000000000000B999                 push    rbx
.text:000000000000B99A                 jz      short loc_B9C9
.text:000000000000B99C                 mov     r12, rsi
.text:000000000000B99F                 lea     rbx, [rdx-1]
.text:000000000000B9A3                 call    ___ctype_tolower_loc
.text:000000000000B9A8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000B9B0
.text:000000000000B9B0 loc_B9B0:                               ; CODE XREF: memcpy_lowcase+37↓j
.text:000000000000B9B0                 movzx   ecx, byte ptr [r12+rbx]
.text:000000000000B9B5                 mov     rdx, [rax]
.text:000000000000B9B8                 mov     edx, [rdx+rcx*4]
.text:000000000000B9BB                 mov     [rbp+rbx+0], dl
.text:000000000000B9BF                 sub     rbx, 1
.text:000000000000B9C3                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000B9C7                 jnz     short loc_B9B0
.text:000000000000B9C9
.text:000000000000B9C9 loc_B9C9:                               ; CODE XREF: memcpy_lowcase+A↑j
.text:000000000000B9C9                 mov     rax, rbp
.text:000000000000B9CC                 pop     rbx
.text:000000000000B9CD                 pop     rbp
.text:000000000000B9CE                 pop     r12
.text:000000000000B9D0                 retn
.text:000000000000B9D0 ; } // starts at B990
.text:000000000000B9D0 memcpy_lowcase  endp
.text:000000000000B9D0
.text:000000000000B9D0 ; ---------------------------------------------------------------------------
.text:000000000000B9D1                 align 20h
.text:000000000000B9E0
.text:000000000000B9E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000B9E0
.text:000000000000B9E0 ; Attributes: info_from_lumina
.text:000000000000B9E0
.text:000000000000B9E0 ; char *__fastcall memcpy_lowcase_0(char *dest, const char *src, size_t len)
.text:000000000000B9E0 memcpy_lowcase_0 proc near              ; CODE XREF: __strftime_internal+313↓p
.text:000000000000B9E0                                         ; __strftime_internal:loc_BF21↓p ...
.text:000000000000B9E0 ; __unwind {
.text:000000000000B9E0                 test    rdx, rdx
.text:000000000000B9E3                 push    r12
.text:000000000000B9E5                 push    rbp
.text:000000000000B9E6                 mov     rbp, rdi
.text:000000000000B9E9                 push    rbx
.text:000000000000B9EA                 jz      short loc_BA19
.text:000000000000B9EC                 mov     r12, rsi
.text:000000000000B9EF                 lea     rbx, [rdx-1]
.text:000000000000B9F3                 call    ___ctype_toupper_loc
.text:000000000000B9F8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000BA00
.text:000000000000BA00 loc_BA00:                               ; CODE XREF: memcpy_lowcase_0+37↓j
.text:000000000000BA00                 movzx   ecx, byte ptr [r12+rbx]
.text:000000000000BA05                 mov     rdx, [rax]
.text:000000000000BA08                 mov     edx, [rdx+rcx*4]
.text:000000000000BA0B                 mov     [rbp+rbx+0], dl
.text:000000000000BA0F                 sub     rbx, 1
.text:000000000000BA13                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000BA17                 jnz     short loc_BA00
.text:000000000000BA19
.text:000000000000BA19 loc_BA19:                               ; CODE XREF: memcpy_lowcase_0+A↑j
.text:000000000000BA19                 mov     rax, rbp
.text:000000000000BA1C                 pop     rbx
.text:000000000000BA1D                 pop     rbp
.text:000000000000BA1E                 pop     r12
.text:000000000000BA20                 retn
.text:000000000000BA20 ; } // starts at B9E0
.text:000000000000BA20 memcpy_lowcase_0 endp
.text:000000000000BA20
.text:000000000000BA20 ; ---------------------------------------------------------------------------
.text:000000000000BA21                 align 10h
.text:000000000000BA30
.text:000000000000BA30 ; =============== S U B R O U T I N E =======================================
.text:000000000000BA30
.text:000000000000BA30
.text:000000000000BA30 ; __int64 __usercall _strftime_internal@<rax>(void *s@<rdi>, int, __int64, __int64, int)
.text:000000000000BA30 __strftime_internal proc near           ; CODE XREF: __strftime_internal+6AB↓p
.text:000000000000BA30                                         ; __strftime_internal+768↓p ...
.text:000000000000BA30
.text:000000000000BA30 var_4F0         = qword ptr -4F0h
.text:000000000000BA30 var_4E8         = qword ptr -4E8h
.text:000000000000BA30 var_4E0         = qword ptr -4E0h
.text:000000000000BA30 var_4D8         = qword ptr -4D8h
.text:000000000000BA30 var_4CD         = byte ptr -4CDh
.text:000000000000BA30 var_4CC         = dword ptr -4CCh
.text:000000000000BA30 var_4C8         = qword ptr -4C8h
.text:000000000000BA30 var_4C0         = dword ptr -4C0h
.text:000000000000BA30 var_4B8         = qword ptr -4B8h
.text:000000000000BA30 var_4B0         = qword ptr -4B0h
.text:000000000000BA30 var_4A8         = qword ptr -4A8h
.text:000000000000BA30 var_4A0         = qword ptr -4A0h
.text:000000000000BA30 var_498         = qword ptr -498h
.text:000000000000BA30 var_490         = dword ptr -490h
.text:000000000000BA30 var_48C         = dword ptr -48Ch
.text:000000000000BA30 var_488         = xmmword ptr -488h
.text:000000000000BA30 var_478         = xmmword ptr -478h
.text:000000000000BA30 var_468         = xmmword ptr -468h
.text:000000000000BA30 var_458         = qword ptr -458h
.text:000000000000BA30 format          = byte ptr -44Dh
.text:000000000000BA30 var_44B         = byte ptr -44Bh
.text:000000000000BA30 s               = byte ptr -448h
.text:000000000000BA30 var_40          = qword ptr -40h
.text:000000000000BA30 arg_0           = dword ptr  8
.text:000000000000BA30 arg_8           = qword ptr  10h
.text:000000000000BA30 arg_10          = qword ptr  18h
.text:000000000000BA30 arg_18          = dword ptr  20h
.text:000000000000BA30
.text:000000000000BA30 ; __unwind {
.text:000000000000BA30                 push    r15
.text:000000000000BA32                 push    r14
.text:000000000000BA34                 mov     r11, rdx
.text:000000000000BA37                 push    r13
.text:000000000000BA39                 push    r12
.text:000000000000BA3B                 mov     r13, rcx
.text:000000000000BA3E                 push    rbp
.text:000000000000BA3F                 push    rbx
.text:000000000000BA40                 mov     rbp, rdi
.text:000000000000BA43                 sub     rsp, 4C8h
.text:000000000000BA4A                 mov     rdi, [rcx+30h]
.text:000000000000BA4E                 mov     r15d, [rcx+8]
.text:000000000000BA52                 mov     rax, [rsp+4F8h+arg_8]
.text:000000000000BA5A                 mov     [rsp+4F8h+var_4F0], rsi
.text:000000000000BA5F                 mov     [rsp+4F8h+var_4CC], r9d
.text:000000000000BA64                 movsxd  r10, [rsp+4F8h+arg_0]
.text:000000000000BA6C                 mov     [rsp+4F8h+var_4CD], r8b
.text:000000000000BA71                 mov     [rsp+4F8h+var_4E0], rax
.text:000000000000BA76                 mov     rax, [rsp+4F8h+arg_10]
.text:000000000000BA7E                 mov     [rsp+4F8h+var_4E8], rax
.text:000000000000BA83                 mov     rax, fs:28h
.text:000000000000BA8C                 mov     [rsp+4F8h+var_40], rax
.text:000000000000BA94                 xor     eax, eax
.text:000000000000BA96                 lea     rax, aUserProvidedTi+1Dh ; ""
.text:000000000000BA9D                 test    rdi, rdi
.text:000000000000BAA0                 cmovnz  rax, rdi
.text:000000000000BAA4                 cmp     r15d, 0Ch
.text:000000000000BAA8                 mov     [rsp+4F8h+var_4D8], rax
.text:000000000000BAAD                 jle     loc_BBA0
.text:000000000000BAB3                 sub     r15d, 0Ch
.text:000000000000BAB7
.text:000000000000BAB7 loc_BAB7:                               ; CODE XREF: __strftime_internal+17C↓j
.text:000000000000BAB7                 movzx   eax, byte ptr [r11]
.text:000000000000BABB                 xor     r14d, r14d
.text:000000000000BABE                 test    al, al
.text:000000000000BAC0                 jz      loc_BB7C
.text:000000000000BAC6                 mov     [rsp+4F8h+var_490], r15d
.text:000000000000BACB                 mov     rbx, r11
.text:000000000000BACE
.text:000000000000BACE loc_BACE:                               ; CODE XREF: __strftime_internal+146↓j
.text:000000000000BACE                 cmp     al, 25h ; '%'
.text:000000000000BAD0                 jz      loc_BBB8
.text:000000000000BAD6                 test    r10d, r10d
.text:000000000000BAD9                 mov     r12d, 0
.text:000000000000BADF                 mov     eax, 1
.text:000000000000BAE4                 cmovns  r12, r10
.text:000000000000BAE8                 test    r12, r12
.text:000000000000BAEB                 cmovz   r12, rax
.text:000000000000BAEF                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000BAF4                 sub     rax, r14
.text:000000000000BAF7                 cmp     rax, r12
.text:000000000000BAFA                 ja      short loc_BB30
.text:000000000000BAFC
.text:000000000000BAFC loc_BAFC:                               ; CODE XREF: __strftime_internal+294↓j
.text:000000000000BAFC                                         ; __strftime_internal+450↓j ...
.text:000000000000BAFC                 xor     r14d, r14d
.text:000000000000BAFF
.text:000000000000BAFF loc_BAFF:                               ; CODE XREF: __strftime_internal+14F↓j
.text:000000000000BAFF                                         ; __strftime_internal+15B↓j ...
.text:000000000000BAFF                 mov     rbx, [rsp+4F8h+var_40]
.text:000000000000BB07                 xor     rbx, fs:28h
.text:000000000000BB10                 mov     rax, r14
.text:000000000000BB13                 jnz     loc_D4C5
.text:000000000000BB19                 add     rsp, 4C8h
.text:000000000000BB20                 pop     rbx
.text:000000000000BB21                 pop     rbp
.text:000000000000BB22                 pop     r12
.text:000000000000BB24                 pop     r13
.text:000000000000BB26                 pop     r14
.text:000000000000BB28                 pop     r15
.text:000000000000BB2A                 retn
.text:000000000000BB2A ; ---------------------------------------------------------------------------
.text:000000000000BB2B                 align 10h
.text:000000000000BB30
.text:000000000000BB30 loc_BB30:                               ; CODE XREF: __strftime_internal+CA↑j
.text:000000000000BB30                 test    rbp, rbp
.text:000000000000BB33                 jz      short loc_BB5C
.text:000000000000BB35                 cmp     r10d, 1
.text:000000000000BB39                 jle     short loc_BB52
.text:000000000000BB3B                 lea     r15, [r10-1]
.text:000000000000BB3F                 mov     rdi, rbp        ; s
.text:000000000000BB42                 mov     esi, 20h ; ' '  ; c
.text:000000000000BB47                 mov     rdx, r15        ; n
.text:000000000000BB4A                 add     rbp, r15
.text:000000000000BB4D                 call    _memset
.text:000000000000BB52
.text:000000000000BB52 loc_BB52:                               ; CODE XREF: __strftime_internal+109↑j
.text:000000000000BB52                 movzx   eax, byte ptr [rbx]
.text:000000000000BB55                 add     rbp, 1
.text:000000000000BB59                 mov     [rbp-1], al
.text:000000000000BB5C
.text:000000000000BB5C loc_BB5C:                               ; CODE XREF: __strftime_internal+103↑j
.text:000000000000BB5C                                         ; __strftime_internal+6EB↓j ...
.text:000000000000BB5C                 add     r14, r12
.text:000000000000BB5F                 mov     r12, rbx
.text:000000000000BB62
.text:000000000000BB62 loc_BB62:                               ; CODE XREF: __strftime_internal+328↓j
.text:000000000000BB62                                         ; __strftime_internal+420↓j ...
.text:000000000000BB62                 movzx   eax, byte ptr [r12+1]
.text:000000000000BB68                 lea     rbx, [r12+1]
.text:000000000000BB6D                 mov     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000BB74                 test    al, al
.text:000000000000BB76                 jnz     loc_BACE
.text:000000000000BB7C
.text:000000000000BB7C loc_BB7C:                               ; CODE XREF: __strftime_internal+90↑j
.text:000000000000BB7C                 test    rbp, rbp
.text:000000000000BB7F                 jz      loc_BAFF
.text:000000000000BB85                 cmp     [rsp+4F8h+var_4F0], 0
.text:000000000000BB8B                 jz      loc_BAFF
.text:000000000000BB91                 mov     byte ptr [rbp+0], 0
.text:000000000000BB95                 jmp     loc_BAFF
.text:000000000000BB95 ; ---------------------------------------------------------------------------
.text:000000000000BB9A                 align 20h
.text:000000000000BBA0
.text:000000000000BBA0 loc_BBA0:                               ; CODE XREF: __strftime_internal+7D↑j
.text:000000000000BBA0                 test    r15d, r15d
.text:000000000000BBA3                 mov     eax, 0Ch
.text:000000000000BBA8                 cmovz   r15d, eax
.text:000000000000BBAC                 jmp     loc_BAB7
.text:000000000000BBAC ; ---------------------------------------------------------------------------
.text:000000000000BBB1                 align 8
.text:000000000000BBB8
.text:000000000000BBB8 loc_BBB8:                               ; CODE XREF: __strftime_internal+A0↑j
.text:000000000000BBB8                 movzx   eax, [rsp+4F8h+var_4CD]
.text:000000000000BBBD                 xor     r8d, r8d
.text:000000000000BBC0                 xor     r15d, r15d
.text:000000000000BBC3                 mov     edx, 1
.text:000000000000BBC8                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000BBCC
.text:000000000000BBCC loc_BBCC:                               ; CODE XREF: __strftime_internal+233↓j
.text:000000000000BBCC                                         ; __strftime_internal+246↓j ...
.text:000000000000BBCC                 add     rbx, 1
.text:000000000000BBD0                 movsx   eax, byte ptr [rbx]
.text:000000000000BBD3                 lea     ecx, [rax-23h]
.text:000000000000BBD6                 mov     esi, eax
.text:000000000000BBD8                 mov     r9d, eax
.text:000000000000BBDB                 cmp     cl, 3Ch ; '<'
.text:000000000000BBDE                 ja      short loc_BC0C
.text:000000000000BBE0                 mov     rdi, rdx
.text:000000000000BBE3                 mov     r11, 1000000000002500h
.text:000000000000BBED                 shl     rdi, cl
.text:000000000000BBF0                 test    rdi, r11
.text:000000000000BBF3                 jnz     short loc_BC60
.text:000000000000BBF5                 test    cl, cl
.text:000000000000BBF7                 jz      short loc_BC70
.text:000000000000BBF9                 mov     rcx, 800000000000000h
.text:000000000000BC03                 test    rdi, rcx
.text:000000000000BC06                 jnz     loc_BD60
.text:000000000000BC0C
.text:000000000000BC0C loc_BC0C:                               ; CODE XREF: __strftime_internal+1AE↑j
.text:000000000000BC0C                 lea     edx, [rax-30h]
.text:000000000000BC0F                 cmp     edx, 9
.text:000000000000BC12                 jbe     loc_BD70
.text:000000000000BC18
.text:000000000000BC18 loc_BC18:                               ; CODE XREF: __strftime_internal+372↓j
.text:000000000000BC18                                         ; __strftime_internal+3AC↓j
.text:000000000000BC18                 cmp     sil, 45h ; 'E'
.text:000000000000BC1C                 jz      short loc_BC48
.text:000000000000BC1E                 xor     r11d, r11d
.text:000000000000BC21                 cmp     sil, 4Fh ; 'O'
.text:000000000000BC25                 jz      short loc_BC48
.text:000000000000BC27
.text:000000000000BC27 loc_BC27:                               ; CODE XREF: __strftime_internal+227↓j
.text:000000000000BC27                 cmp     sil, 7Ah        ; switch 123 cases
.text:000000000000BC2B                 ja      short def_BC3F  ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000BC2D                 lea     rdx, jpt_BC3F
.text:000000000000BC34                 movzx   eax, sil
.text:000000000000BC38                 movsxd  rax, ds:(jpt_BC3F - 11DC4h)[rdx+rax*4]
.text:000000000000BC3C                 add     rax, rdx
.text:000000000000BC3F                 jmp     rax             ; switch jump
.text:000000000000BC3F ; ---------------------------------------------------------------------------
.text:000000000000BC41                 align 8
.text:000000000000BC48
.text:000000000000BC48 loc_BC48:                               ; CODE XREF: __strftime_internal+1EC↑j
.text:000000000000BC48                                         ; __strftime_internal+1F5↑j
.text:000000000000BC48                 movsx   r9d, byte ptr [rbx+1]
.text:000000000000BC4D                 mov     r11d, eax
.text:000000000000BC50                 add     rbx, 1
.text:000000000000BC54                 mov     esi, r9d
.text:000000000000BC57                 jmp     short loc_BC27
.text:000000000000BC57 ; ---------------------------------------------------------------------------
.text:000000000000BC59                 align 20h
.text:000000000000BC60
.text:000000000000BC60 loc_BC60:                               ; CODE XREF: __strftime_internal+1C3↑j
.text:000000000000BC60                 mov     r15d, eax
.text:000000000000BC63                 jmp     loc_BBCC
.text:000000000000BC63 ; ---------------------------------------------------------------------------
.text:000000000000BC68                 align 10h
.text:000000000000BC70
.text:000000000000BC70 loc_BC70:                               ; CODE XREF: __strftime_internal+1C7↑j
.text:000000000000BC70                 mov     r8d, 1
.text:000000000000BC76                 jmp     loc_BBCC
.text:000000000000BC7B ; ---------------------------------------------------------------------------
.text:000000000000BC7B
.text:000000000000BC7B loc_BC7B:                               ; CODE XREF: __strftime_internal+1212↓j
.text:000000000000BC7B                 mov     rbx, r9
.text:000000000000BC7E                 xchg    ax, ax
.text:000000000000BC80
.text:000000000000BC80 def_BC3F:                               ; CODE XREF: __strftime_internal+1FB↑j
.text:000000000000BC80                                         ; __strftime_internal+20F↑j ...
.text:000000000000BC80                 lea     rax, [rbx-1]    ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000BC84                 mov     r8d, 1
.text:000000000000BC8A
.text:000000000000BC8A loc_BC8A:                               ; CODE XREF: __strftime_internal+269↓j
.text:000000000000BC8A                 mov     r9, rax
.text:000000000000BC8D                 lea     rax, [rax-1]
.text:000000000000BC91                 add     r8d, 1
.text:000000000000BC95                 cmp     byte ptr [rax+1], 25h ; '%'
.text:000000000000BC99                 jnz     short loc_BC8A
.text:000000000000BC9B                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000BCA0                 mov     eax, 0
.text:000000000000BCA5                 movsxd  r8, r8d
.text:000000000000BCA8                 mov     rcx, r8
.text:000000000000BCAB                 mov     r12, rbx
.text:000000000000BCAE                 sub     rdx, r14
.text:000000000000BCB1                 test    r10d, r10d
.text:000000000000BCB4                 cmovns  eax, r10d
.text:000000000000BCB8                 cdqe
.text:000000000000BCBA                 cmp     rax, r8
.text:000000000000BCBD                 cmovnb  rcx, rax
.text:000000000000BCC1
.text:000000000000BCC1 loc_BCC1:                               ; CODE XREF: __strftime_internal+122D↓j
.text:000000000000BCC1                                         ; __strftime_internal+17E4↓j
.text:000000000000BCC1                 cmp     rcx, rdx
.text:000000000000BCC4                 jnb     loc_BAFC
.text:000000000000BCCA                 test    rbp, rbp
.text:000000000000BCCD                 jz      loc_BD55
.text:000000000000BCD3                 cmp     rax, r8
.text:000000000000BCD6                 jbe     short loc_BD25
.text:000000000000BCD8                 movsxd  rdx, r10d
.text:000000000000BCDB                 mov     [rsp+4F8h+var_4B0], r8
.text:000000000000BCE0                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000BCE5                 sub     rdx, r8         ; n
.text:000000000000BCE8                 cmp     r15d, 30h ; '0'
.text:000000000000BCEC                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:000000000000BCF1                 lea     rbx, [rbp+rdx+0]
.text:000000000000BCF6                 jz      loc_CF66
.text:000000000000BCFC                 cmp     r15d, 2Bh ; '+'
.text:000000000000BD00                 jz      loc_CF66
.text:000000000000BD06                 mov     rdi, rbp        ; s
.text:000000000000BD09                 mov     esi, 20h ; ' '  ; c
.text:000000000000BD0E                 mov     rbp, rbx
.text:000000000000BD11                 call    _memset
.text:000000000000BD16                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000BD1B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000BD20                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000BD25
.text:000000000000BD25 loc_BD25:                               ; CODE XREF: __strftime_internal+2A6↑j
.text:000000000000BD25                                         ; __strftime_internal+1555↓j
.text:000000000000BD25                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000BD2A                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000000BD2F                 mov     rdx, r8         ; n
.text:000000000000BD32                 mov     [rsp+4F8h+var_4C8], r8
.text:000000000000BD37                 mov     rsi, r9         ; src
.text:000000000000BD3A                 mov     rdi, rbp        ; dest
.text:000000000000BD3D                 jz      loc_CF10
.text:000000000000BD43                 call    memcpy_lowcase_0
.text:000000000000BD48                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000BD4D                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000BD52
.text:000000000000BD52 loc_BD52:                               ; CODE XREF: __strftime_internal+14EF↓j
.text:000000000000BD52                 add     rbp, r8
.text:000000000000BD55
.text:000000000000BD55 loc_BD55:                               ; CODE XREF: __strftime_internal+29D↑j
.text:000000000000BD55                 add     r14, rcx
.text:000000000000BD58                 jmp     loc_BB62
.text:000000000000BD58 ; ---------------------------------------------------------------------------
.text:000000000000BD5D                 align 20h
.text:000000000000BD60
.text:000000000000BD60 loc_BD60:                               ; CODE XREF: __strftime_internal+1D6↑j
.text:000000000000BD60                 mov     byte ptr [rsp+4F8h+var_4C8], 1
.text:000000000000BD65                 jmp     loc_BBCC
.text:000000000000BD65 ; ---------------------------------------------------------------------------
.text:000000000000BD6A                 align 10h
.text:000000000000BD70
.text:000000000000BD70 loc_BD70:                               ; CODE XREF: __strftime_internal+1E2↑j
.text:000000000000BD70                 xor     r10d, r10d
.text:000000000000BD73
.text:000000000000BD73 loc_BD73:                               ; CODE XREF: __strftime_internal+36D↓j
.text:000000000000BD73                 movsx   eax, byte ptr [rbx+1]
.text:000000000000BD77                 cmp     r10d, 0CCCCCCCh
.text:000000000000BD7E                 lea     rcx, [rbx+1]
.text:000000000000BD82                 mov     esi, eax
.text:000000000000BD84                 lea     edx, [rax-30h]
.text:000000000000BD87                 jg      short loc_BDB6
.text:000000000000BD89                 movsx   edi, byte ptr [rbx]
.text:000000000000BD8C                 jz      short loc_BDB0
.text:000000000000BD8E
.text:000000000000BD8E loc_BD8E:                               ; CODE XREF: __strftime_internal+384↓j
.text:000000000000BD8E                 lea     r9d, [r10+r10*4]
.text:000000000000BD92                 mov     rbx, rcx
.text:000000000000BD95                 lea     r10d, [rdi+r9*2-30h]
.text:000000000000BD9A
.text:000000000000BD9A loc_BD9A:                               ; CODE XREF: __strftime_internal+39E↓j
.text:000000000000BD9A                 cmp     edx, 9
.text:000000000000BD9D                 jbe     short loc_BD73
.text:000000000000BD9F                 mov     r9d, eax
.text:000000000000BDA2                 jmp     loc_BC18
.text:000000000000BDA2 ; ---------------------------------------------------------------------------
.text:000000000000BDA7                 align 10h
.text:000000000000BDB0
.text:000000000000BDB0 loc_BDB0:                               ; CODE XREF: __strftime_internal+35C↑j
.text:000000000000BDB0                 cmp     dil, 37h ; '7'
.text:000000000000BDB4                 jle     short loc_BD8E
.text:000000000000BDB6
.text:000000000000BDB6 loc_BDB6:                               ; CODE XREF: __strftime_internal+357↑j
.text:000000000000BDB6                 cmp     edx, 9
.text:000000000000BDB9                 ja      short loc_BDD0
.text:000000000000BDBB                 movsx   eax, byte ptr [rbx+2]
.text:000000000000BDBF                 mov     r10d, 7FFFFFFFh
.text:000000000000BDC5                 add     rbx, 2
.text:000000000000BDC9                 mov     esi, eax
.text:000000000000BDCB                 lea     edx, [rax-30h]
.text:000000000000BDCE                 jmp     short loc_BD9A
.text:000000000000BDD0 ; ---------------------------------------------------------------------------
.text:000000000000BDD0
.text:000000000000BDD0 loc_BDD0:                               ; CODE XREF: __strftime_internal+389↑j
.text:000000000000BDD0                 mov     r9d, eax
.text:000000000000BDD3                 mov     rbx, rcx
.text:000000000000BDD6                 mov     r10d, 7FFFFFFFh
.text:000000000000BDDC                 jmp     loc_BC18
.text:000000000000BDDC ; ---------------------------------------------------------------------------
.text:000000000000BDE1                 align 8
.text:000000000000BDE8
.text:000000000000BDE8 loc_BDE8:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000BDE8                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000BDE8                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000000BC3F cases 88,99,120
.text:000000000000BDEC                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000BDF2
.text:000000000000BDF2 loc_BDF2:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000BDF2                                         ; __strftime_internal+10F6↓j
.text:000000000000BDF2                                         ; DATA XREF: ...
.text:000000000000BDF2                 xor     r8d, r8d        ; jumptable 000000000000BC3F case 114
.text:000000000000BDF5
.text:000000000000BDF5 loc_BDF5:                               ; CODE XREF: __strftime_internal+659↓j
.text:000000000000BDF5                                         ; __strftime_internal+A27↓j ...
.text:000000000000BDF5                 mov     eax, 2520h
.text:000000000000BDFA                 test    r11d, r11d
.text:000000000000BDFD                 mov     word ptr [rsp+4F8h+format], ax
.text:000000000000BE05                 jnz     loc_D4DB
.text:000000000000BE0B                 lea     rdx, [rsp+4F8h+format] ; format
.text:000000000000BE13                 mov     r12, rbx
.text:000000000000BE16                 lea     rax, [rdx+2]
.text:000000000000BE1A
.text:000000000000BE1A loc_BE1A:                               ; CODE XREF: __strftime_internal+541↓j
.text:000000000000BE1A                                         ; __strftime_internal+5B6↓j
.text:000000000000BE1A                 lea     r9, [rsp+4F8h+s]
.text:000000000000BE22                 mov     [rax], sil
.text:000000000000BE25                 mov     byte ptr [rax+1], 0
.text:000000000000BE29                 mov     rcx, r13        ; tp
.text:000000000000BE2C                 mov     esi, 400h       ; maxsize
.text:000000000000BE31                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000BE36                 mov     rdi, r9         ; s
.text:000000000000BE39                 mov     byte ptr [rsp+4F8h+var_4A8], r8b
.text:000000000000BE3E                 mov     dword ptr [rsp+4F8h+var_4B0], r11d
.text:000000000000BE43                 mov     [rsp+4F8h+var_4B8], r9
.text:000000000000BE48                 call    _strftime
.text:000000000000BE4D                 test    rax, rax
.text:000000000000BE50                 jz      loc_BB62
.text:000000000000BE56                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000BE5B                 lea     rcx, [rax-1]
.text:000000000000BE5F                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000BE64                 mov     eax, 0
.text:000000000000BE69                 test    r10d, r10d
.text:000000000000BE6C                 cmovns  rax, r10
.text:000000000000BE70                 cmp     rcx, rax
.text:000000000000BE73                 mov     rbx, rax
.text:000000000000BE76                 cmovnb  rbx, rcx
.text:000000000000BE7A                 sub     rdx, r14
.text:000000000000BE7D                 cmp     rdx, rbx
.text:000000000000BE80                 jbe     loc_BAFC
.text:000000000000BE86                 test    rbp, rbp
.text:000000000000BE89                 jz      loc_BF2E
.text:000000000000BE8F                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000BE94                 mov     r9, [rsp+4F8h+var_4B8]
.text:000000000000BE99                 movzx   r8d, byte ptr [rsp+4F8h+var_4A8]
.text:000000000000BE9F                 test    r11d, r11d
.text:000000000000BEA2                 jnz     short loc_BEFE
.text:000000000000BEA4                 cmp     rcx, rax
.text:000000000000BEA7                 jnb     short loc_BEFE
.text:000000000000BEA9                 movsxd  rdx, r10d
.text:000000000000BEAC                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000BEB1                 mov     [rsp+4F8h+var_4B0], rcx
.text:000000000000BEB6                 sub     rdx, rcx        ; n
.text:000000000000BEB9                 cmp     r15d, 30h ; '0'
.text:000000000000BEBD                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000BEC2                 lea     rax, [rbp+rdx+0]
.text:000000000000BEC7                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000BECC                 jz      loc_CF3F
.text:000000000000BED2                 cmp     r15d, 2Bh ; '+'
.text:000000000000BED6                 jz      loc_CF3F
.text:000000000000BEDC                 mov     rdi, rbp        ; s
.text:000000000000BEDF                 mov     esi, 20h ; ' '  ; c
.text:000000000000BEE4                 call    _memset
.text:000000000000BEE9                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000BEEF                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000BEF4                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000BEF9                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000BEFE
.text:000000000000BEFE loc_BEFE:                               ; CODE XREF: __strftime_internal+472↑j
.text:000000000000BEFE                                         ; __strftime_internal+477↑j ...
.text:000000000000BEFE                 test    r8b, r8b
.text:000000000000BF01                 lea     rsi, [r9+1]
.text:000000000000BF05                 mov     rdx, rcx
.text:000000000000BF08                 jnz     loc_CF28
.text:000000000000BF0E                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000BF13                 mov     rdi, rbp
.text:000000000000BF16                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000BF1B                 jz      loc_C791
.text:000000000000BF21
.text:000000000000BF21 loc_BF21:                               ; CODE XREF: __strftime_internal+D5B↓j
.text:000000000000BF21                 call    memcpy_lowcase_0
.text:000000000000BF26                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000BF2B
.text:000000000000BF2B loc_BF2B:                               ; CODE XREF: __strftime_internal+D6B↓j
.text:000000000000BF2B                                         ; __strftime_internal+150A↓j
.text:000000000000BF2B                 add     rbp, rcx
.text:000000000000BF2E
.text:000000000000BF2E loc_BF2E:                               ; CODE XREF: __strftime_internal+459↑j
.text:000000000000BF2E                                         ; __strftime_internal+CEB↓j
.text:000000000000BF2E                 add     r14, rbx
.text:000000000000BF31                 jmp     loc_BB62
.text:000000000000BF36 ; ---------------------------------------------------------------------------
.text:000000000000BF36
.text:000000000000BF36 loc_BF36:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000BF36                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000BF36                 test    r11d, r11d      ; jumptable 000000000000BC3F cases 65,97
.text:000000000000BF39                 jnz     def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000BF3F                 movzx   eax, byte ptr [rsp+4F8h+var_4C8]
.text:000000000000BF44                 test    r8b, r8b
.text:000000000000BF47                 lea     rdx, [rsp+4F8h+format]
.text:000000000000BF4F                 mov     r12, rbx
.text:000000000000BF52                 cmovnz  eax, r8d
.text:000000000000BF56                 xor     r8d, r8d
.text:000000000000BF59                 xor     r11d, r11d
.text:000000000000BF5C                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000BF60                 mov     eax, 2520h
.text:000000000000BF65                 mov     word ptr [rsp+4F8h+format], ax
.text:000000000000BF6D                 lea     rax, [rdx+2]
.text:000000000000BF71                 jmp     loc_BE1A
.text:000000000000BF76 ; ---------------------------------------------------------------------------
.text:000000000000BF76
.text:000000000000BF76 loc_BF76:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000BF76                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000BF76                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 83
.text:000000000000BF7A                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000BF80                 mov     ecx, [r13+0]
.text:000000000000BF84                 mov     edi, 2
.text:000000000000BF89                 nop     dword ptr [rax+00000000h]
.text:000000000000BF90
.text:000000000000BF90 loc_BF90:                               ; CODE XREF: __strftime_internal+852↓j
.text:000000000000BF90                                         ; __strftime_internal+1047↓j ...
.text:000000000000BF90                 mov     eax, ecx
.text:000000000000BF92                 xor     esi, esi
.text:000000000000BF94                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000BF99                 shr     eax, 1Fh
.text:000000000000BF9C                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000BFA0                 mov     eax, ecx
.text:000000000000BFA2                 not     eax
.text:000000000000BFA4                 shr     eax, 1Fh
.text:000000000000BFA7
.text:000000000000BFA7 loc_BFA7:                               ; CODE XREF: __strftime_internal+8AB↓j
.text:000000000000BFA7                                         ; __strftime_internal+A02↓j ...
.text:000000000000BFA7                 cmp     r11d, 4Fh ; 'O'
.text:000000000000BFAB                 jnz     loc_CE30
.text:000000000000BFB1                 test    al, al
.text:000000000000BFB3                 jz      loc_CE30
.text:000000000000BFB9                 mov     esi, r9d
.text:000000000000BFBC
.text:000000000000BFBC loc_BFBC:                               ; CODE XREF: __strftime_internal+B0D↓j
.text:000000000000BFBC                                         ; __strftime_internal+158C↓j
.text:000000000000BFBC                 mov     edx, 2520h
.text:000000000000BFC1                 xor     r8d, r8d
.text:000000000000BFC4                 mov     word ptr [rsp+4F8h+format], dx
.text:000000000000BFCC
.text:000000000000BFCC loc_BFCC:                               ; CODE XREF: __strftime_internal+1AAD↓j
.text:000000000000BFCC                 lea     rdx, [rsp+4F8h+format]
.text:000000000000BFD4                 mov     [rsp+4F8h+var_44B], r11b
.text:000000000000BFDC                 mov     r12, rbx
.text:000000000000BFDF                 mov     r11d, edi
.text:000000000000BFE2                 lea     rax, [rdx+3]
.text:000000000000BFE6                 jmp     loc_BE1A
.text:000000000000BFEB ; ---------------------------------------------------------------------------
.text:000000000000BFEB
.text:000000000000BFEB loc_BFEB:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000BFEB                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000BFEB                 test    r10d, r10d      ; jumptable 000000000000BC3F case 116
.text:000000000000BFEE                 mov     ecx, 0
.text:000000000000BFF3                 mov     eax, 1
.text:000000000000BFF8                 cmovns  ecx, r10d
.text:000000000000BFFC                 movsxd  rcx, ecx
.text:000000000000BFFF                 test    rcx, rcx
.text:000000000000C002                 cmovz   rcx, rax
.text:000000000000C006                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000C00B                 sub     rax, r14
.text:000000000000C00E                 cmp     rax, rcx
.text:000000000000C011                 jbe     loc_BAFC
.text:000000000000C017                 test    rbp, rbp
.text:000000000000C01A                 jz      short loc_C068
.text:000000000000C01C                 cmp     r10d, 1
.text:000000000000C020                 jle     short loc_C05C
.text:000000000000C022                 movsxd  rdx, r10d
.text:000000000000C025                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000C02A                 sub     rdx, 1          ; n
.text:000000000000C02E                 cmp     r15d, 30h ; '0'
.text:000000000000C032                 lea     r12, [rbp+rdx+0]
.text:000000000000C037                 jz      loc_D354
.text:000000000000C03D                 cmp     r15d, 2Bh ; '+'
.text:000000000000C041                 jz      loc_D354
.text:000000000000C047                 mov     rdi, rbp        ; s
.text:000000000000C04A                 mov     esi, 20h ; ' '  ; c
.text:000000000000C04F                 mov     rbp, r12
.text:000000000000C052                 call    _memset
.text:000000000000C057                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000C05C
.text:000000000000C05C loc_C05C:                               ; CODE XREF: __strftime_internal+5F0↑j
.text:000000000000C05C                                         ; __strftime_internal+1939↓j
.text:000000000000C05C                 mov     byte ptr [rbp+0], 9
.text:000000000000C060                 add     rbp, 1
.text:000000000000C064                 nop     dword ptr [rax+00h]
.text:000000000000C068
.text:000000000000C068 loc_C068:                               ; CODE XREF: __strftime_internal+5EA↑j
.text:000000000000C068                                         ; __strftime_internal+7B5↓j ...
.text:000000000000C068                 add     r14, rcx
.text:000000000000C06B                 mov     r12, rbx
.text:000000000000C06E                 jmp     loc_BB62
.text:000000000000C073 ; ---------------------------------------------------------------------------
.text:000000000000C073
.text:000000000000C073 loc_C073:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C073                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C073                 mov     eax, 1          ; jumptable 000000000000BC3F case 80
.text:000000000000C078
.text:000000000000C078 loc_C078:                               ; CODE XREF: __strftime_internal+13A1↓j
.text:000000000000C078                 test    r8b, r8b
.text:000000000000C07B                 jnz     loc_CFAB
.text:000000000000C081                 mov     r8d, eax
.text:000000000000C084                 mov     esi, 70h ; 'p'
.text:000000000000C089                 jmp     loc_BDF5
.text:000000000000C08E ; ---------------------------------------------------------------------------
.text:000000000000C08E
.text:000000000000C08E loc_C08E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C08E                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C08E                 lea     rax, aHM        ; jumptable 000000000000BC3F case 82
.text:000000000000C095                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000C09D                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000C0A2
.text:000000000000C0A2 loc_C0A2:                               ; CODE XREF: __strftime_internal+81F↓j
.text:000000000000C0A2                                         ; __strftime_internal+11B2↓j ...
.text:000000000000C0A2                 movzx   r8d, byte ptr [rsp+4F8h+var_4C8]
.text:000000000000C0A8                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000C0AF                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000C0B6                 mov     dword ptr [rsp+4F8h+var_4B0], r10d
.text:000000000000C0BB                 xor     edi, edi        ; s
.text:000000000000C0BD                 mov     r9d, r15d
.text:000000000000C0C0                 mov     rcx, r13
.text:000000000000C0C3                 mov     dword ptr [rsp+4F8h+var_4C8], r8d
.text:000000000000C0C8                 push    rax             ; int
.text:000000000000C0C9                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000C0CD                 push    [rsp+508h+var_4E0] ; __int64
.text:000000000000C0D1                 mov     eax, [rsp+510h+var_4C0]
.text:000000000000C0D5                 push    rax             ; int
.text:000000000000C0D6                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000C0DB                 call    __strftime_internal
.text:000000000000C0E0                 add     rsp, 20h
.text:000000000000C0E4                 movsxd  r10, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C0E9                 mov     r11, rax
.text:000000000000C0EC                 mov     rsi, [rsp+4F8h+var_4F0]
.text:000000000000C0F1                 mov     eax, 0
.text:000000000000C0F6                 test    r10d, r10d
.text:000000000000C0F9                 cmovns  rax, r10
.text:000000000000C0FD                 cmp     r11, rax
.text:000000000000C100                 mov     r12, rax
.text:000000000000C103                 cmovnb  r12, r11
.text:000000000000C107                 sub     rsi, r14
.text:000000000000C10A                 cmp     rsi, r12
.text:000000000000C10D                 mov     [rsp+4F8h+var_4B0], rsi
.text:000000000000C112                 jbe     loc_BAFC
.text:000000000000C118                 test    rbp, rbp
.text:000000000000C11B                 jz      loc_BB5C
.text:000000000000C121                 cmp     r11, rax
.text:000000000000C124                 jnb     short loc_C166
.text:000000000000C126                 movsxd  rdx, r10d
.text:000000000000C129                 mov     [rsp+4F8h+var_4A0], r11
.text:000000000000C12E                 sub     rdx, r11        ; n
.text:000000000000C131                 cmp     r15d, 30h ; '0'
.text:000000000000C135                 lea     rax, [rbp+rdx+0]
.text:000000000000C13A                 mov     [rsp+4F8h+var_4A8], rax
.text:000000000000C13F                 jz      loc_D23C
.text:000000000000C145                 cmp     r15d, 2Bh ; '+'
.text:000000000000C149                 jz      loc_D23C
.text:000000000000C14F                 mov     rdi, rbp        ; s
.text:000000000000C152                 mov     esi, 20h ; ' '  ; c
.text:000000000000C157                 call    _memset
.text:000000000000C15C                 mov     rbp, [rsp+4F8h+var_4A8]
.text:000000000000C161                 mov     r11, [rsp+4F8h+var_4A0]
.text:000000000000C166
.text:000000000000C166 loc_C166:                               ; CODE XREF: __strftime_internal+6F4↑j
.text:000000000000C166                                         ; __strftime_internal+1823↓j
.text:000000000000C166                 mov     eax, [rsp+4F8h+arg_18]
.text:000000000000C16D                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000C172                 mov     rdi, rbp        ; s
.text:000000000000C175                 mov     r9d, r15d
.text:000000000000C178                 mov     rcx, r13
.text:000000000000C17B                 push    rax             ; int
.text:000000000000C17C                 push    [rsp+500h+var_4E8] ; __int64
.text:000000000000C180                 push    [rsp+508h+var_4E0] ; __int64
.text:000000000000C184                 mov     eax, [rsp+510h+var_4C0]
.text:000000000000C188                 push    rax             ; int
.text:000000000000C189                 mov     r8d, dword ptr [rsp+518h+var_4C8]
.text:000000000000C18E                 mov     rdx, [rsp+518h+var_4B8]
.text:000000000000C193                 mov     rsi, [rsp+518h+var_4B0]
.text:000000000000C198                 call    __strftime_internal
.text:000000000000C19D                 mov     r11, [rsp+518h+var_4A8]
.text:000000000000C1A2                 add     rsp, 20h
.text:000000000000C1A6                 add     rbp, r11
.text:000000000000C1A9                 jmp     loc_BB5C
.text:000000000000C1AE ; ---------------------------------------------------------------------------
.text:000000000000C1AE
.text:000000000000C1AE loc_C1AE:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C1AE                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C1AE                 mov     rdx, [rsp+4F8h+var_4F0] ; jumptable 000000000000BC3F case 37
.text:000000000000C1B3                 mov     eax, 0
.text:000000000000C1B8                 mov     ecx, 1
.text:000000000000C1BD                 sub     rdx, r14
.text:000000000000C1C0                 test    r10d, r10d
.text:000000000000C1C3                 cmovns  eax, r10d
.text:000000000000C1C7                 cdqe
.text:000000000000C1C9                 test    rax, rax
.text:000000000000C1CC                 cmovnz  rcx, rax
.text:000000000000C1D0                 test    r11d, r11d
.text:000000000000C1D3                 jnz     loc_D208
.text:000000000000C1D9                 cmp     rcx, rdx
.text:000000000000C1DC                 jnb     loc_BAFC
.text:000000000000C1E2                 test    rbp, rbp
.text:000000000000C1E5                 jz      loc_C068
.text:000000000000C1EB                 cmp     r10d, 1
.text:000000000000C1EF                 jle     short loc_C22E
.text:000000000000C1F1                 movsxd  rdx, r10d
.text:000000000000C1F4                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000C1F9                 sub     rdx, 1          ; n
.text:000000000000C1FD                 cmp     r15d, 30h ; '0'
.text:000000000000C201                 lea     r12, [rbp+rdx+0]
.text:000000000000C206                 jz      loc_D475
.text:000000000000C20C                 cmp     r15d, 2Bh ; '+'
.text:000000000000C210                 mov     esi, 20h ; ' '  ; c
.text:000000000000C215                 jz      loc_D475
.text:000000000000C21B
.text:000000000000C21B loc_C21B:                               ; CODE XREF: __strftime_internal+1A4A↓j
.text:000000000000C21B                 mov     rdi, rbp        ; s
.text:000000000000C21E                 mov     rbp, r12
.text:000000000000C221                 call    _memset
.text:000000000000C226                 movzx   esi, byte ptr [rbx]
.text:000000000000C229                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000C22E
.text:000000000000C22E loc_C22E:                               ; CODE XREF: __strftime_internal+7BF↑j
.text:000000000000C22E                 mov     [rbp+0], sil
.text:000000000000C232                 add     rbp, 1
.text:000000000000C236                 jmp     loc_C068
.text:000000000000C23B ; ---------------------------------------------------------------------------
.text:000000000000C23B
.text:000000000000C23B loc_C23B:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C23B                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C23B                 lea     rax, aYMDYMDHMS+11h ; jumptable 000000000000BC3F case 84
.text:000000000000C242                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000C24A                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000C24F                 jmp     loc_C0A2
.text:000000000000C254 ; ---------------------------------------------------------------------------
.text:000000000000C254
.text:000000000000C254 loc_C254:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C254                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C254                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 85
.text:000000000000C258                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000C25E                 mov     esi, [r13+1Ch]
.text:000000000000C262                 sub     esi, [r13+18h]
.text:000000000000C266                 mov     edx, 92492493h
.text:000000000000C26B                 add     esi, 7
.text:000000000000C26E                 mov     eax, esi
.text:000000000000C270                 imul    edx
.text:000000000000C272
.text:000000000000C272 loc_C272:                               ; CODE XREF: __strftime_internal+10D9↓j
.text:000000000000C272                 lea     ecx, [rdx+rsi]
.text:000000000000C275                 sar     esi, 1Fh
.text:000000000000C278                 mov     edi, 2
.text:000000000000C27D                 sar     ecx, 2
.text:000000000000C280                 sub     ecx, esi
.text:000000000000C282                 jmp     loc_BF90
.text:000000000000C287 ; ---------------------------------------------------------------------------
.text:000000000000C287
.text:000000000000C287 loc_C287:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C287                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C287                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 89
.text:000000000000C28B                 jz      loc_CFBA
.text:000000000000C291                 cmp     r11d, 4Fh ; 'O'
.text:000000000000C295                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000C29B                 mov     eax, [r13+14h]
.text:000000000000C29F                 cmp     eax, 0FFFFF894h
.text:000000000000C2A4                 lea     ecx, [rax+76Ch]
.text:000000000000C2AA                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000C2AF                 cmp     eax, 0FFFFF894h
.text:000000000000C2B4                 setnl   al
.text:000000000000C2B7                 test    r15d, r15d
.text:000000000000C2BA                 jnz     loc_D139
.text:000000000000C2C0
.text:000000000000C2C0 loc_C2C0:                               ; CODE XREF: __strftime_internal+1703↓j
.text:000000000000C2C0                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000C2C5                 cmp     r15d, 2Bh ; '+'
.text:000000000000C2C9                 jz      loc_D143
.text:000000000000C2CF
.text:000000000000C2CF loc_C2CF:                               ; CODE XREF: __strftime_internal+170D↓j
.text:000000000000C2CF                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000C2D4                 mov     edi, 4
.text:000000000000C2D9
.text:000000000000C2D9 loc_C2D9:                               ; CODE XREF: __strftime_internal+117A↓j
.text:000000000000C2D9                 xor     esi, esi
.text:000000000000C2DB                 jmp     loc_BFA7
.text:000000000000C2E0 ; ---------------------------------------------------------------------------
.text:000000000000C2E0
.text:000000000000C2E0 loc_C2E0:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C2E0                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C2E0                 movzx   esi, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000000BC3F case 90
.text:000000000000C2E5                 mov     rdi, [rsp+4F8h+var_4D8] ; s
.text:000000000000C2EA                 test    r8b, r8b
.text:000000000000C2ED                 mov     eax, 0
.text:000000000000C2F2                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000C2F7                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000C2FC                 cmovnz  esi, eax
.text:000000000000C2FF                 mov     byte ptr [rsp+4F8h+var_4C8], sil
.text:000000000000C304                 call    _strlen
.text:000000000000C309                 movsxd  r10, [rsp+4F8h+var_4C0]
.text:000000000000C30E                 mov     r12, rax
.text:000000000000C311                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000C316                 mov     eax, 0
.text:000000000000C31B                 test    r10d, r10d
.text:000000000000C31E                 cmovns  rax, r10
.text:000000000000C322                 cmp     r12, rax
.text:000000000000C325                 mov     rcx, rax
.text:000000000000C328                 cmovnb  rcx, r12
.text:000000000000C32C                 sub     rdx, r14
.text:000000000000C32F                 cmp     rdx, rcx
.text:000000000000C332                 jbe     loc_BAFC
.text:000000000000C338                 test    rbp, rbp
.text:000000000000C33B                 jz      loc_C068
.text:000000000000C341                 cmp     r12, rax
.text:000000000000C344                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000C34A                 jnb     short loc_C397
.text:000000000000C34C                 movsxd  rdx, r10d
.text:000000000000C34F                 mov     [rsp+4F8h+var_4B0], rcx
.text:000000000000C354                 mov     byte ptr [rsp+4F8h+var_4B8], r8b
.text:000000000000C359                 sub     rdx, r12        ; n
.text:000000000000C35C                 cmp     r15d, 30h ; '0'
.text:000000000000C360                 lea     rax, [rbp+rdx+0]
.text:000000000000C365                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000C36A                 jz      loc_D42F
.text:000000000000C370                 cmp     r15d, 2Bh ; '+'
.text:000000000000C374                 jz      loc_D42F
.text:000000000000C37A                 mov     rdi, rbp        ; s
.text:000000000000C37D                 mov     esi, 20h ; ' '  ; c
.text:000000000000C382                 call    _memset
.text:000000000000C387                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000C38D                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000C392                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000C397
.text:000000000000C397 loc_C397:                               ; CODE XREF: __strftime_internal+91A↑j
.text:000000000000C397                                         ; __strftime_internal+1A1C↓j
.text:000000000000C397                 test    r8b, r8b
.text:000000000000C39A                 jnz     loc_D397
.text:000000000000C3A0                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000C3A5                 mov     rdx, r12        ; n
.text:000000000000C3A8                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000C3AD                 mov     rsi, [rsp+4F8h+var_4D8] ; src
.text:000000000000C3B2                 mov     rdi, rbp        ; dest
.text:000000000000C3B5                 jz      loc_D388
.text:000000000000C3BB                 call    memcpy_lowcase_0
.text:000000000000C3C0                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000C3C5
.text:000000000000C3C5 loc_C3C5:                               ; CODE XREF: __strftime_internal+1962↓j
.text:000000000000C3C5                                         ; __strftime_internal+1981↓j
.text:000000000000C3C5                 add     rbp, r12
.text:000000000000C3C8                 jmp     loc_C068
.text:000000000000C3CD ; ---------------------------------------------------------------------------
.text:000000000000C3CD
.text:000000000000C3CD loc_C3CD:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C3CD                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C3CD                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 121
.text:000000000000C3D1                 jz      loc_CFBA
.text:000000000000C3D7                 mov     esi, [r13+14h]
.text:000000000000C3DB                 mov     edx, 51EB851Fh
.text:000000000000C3E0                 mov     eax, esi
.text:000000000000C3E2                 imul    edx
.text:000000000000C3E4                 mov     eax, esi
.text:000000000000C3E6                 sar     eax, 1Fh
.text:000000000000C3E9                 mov     ecx, edx
.text:000000000000C3EB                 sar     ecx, 5
.text:000000000000C3EE                 sub     ecx, eax
.text:000000000000C3F0                 mov     eax, esi
.text:000000000000C3F2                 imul    ecx, 64h ; 'd'
.text:000000000000C3F5                 sub     eax, ecx
.text:000000000000C3F7                 mov     ecx, eax
.text:000000000000C3F9                 jns     short loc_C409
.text:000000000000C3FB                 neg     eax
.text:000000000000C3FD                 add     ecx, 64h ; 'd'
.text:000000000000C400                 cmp     esi, 0FFFFF893h
.text:000000000000C406                 cmovle  ecx, eax
.text:000000000000C409
.text:000000000000C409 loc_C409:                               ; CODE XREF: __strftime_internal+9C9↑j
.text:000000000000C409                                         ; __strftime_internal+FE9↓j
.text:000000000000C409                 test    r15d, r15d
.text:000000000000C40C                 jz      loc_CA3A
.text:000000000000C412
.text:000000000000C412 loc_C412:                               ; CODE XREF: __strftime_internal+1004↓j
.text:000000000000C412                                         ; __strftime_internal+1AA6↓j
.text:000000000000C412                 mov     eax, 1
.text:000000000000C417                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000C41C
.text:000000000000C41C loc_C41C:                               ; CODE XREF: __strftime_internal+114D↓j
.text:000000000000C41C                 cmp     r15d, 2Bh ; '+'
.text:000000000000C420                 jz      loc_CB93
.text:000000000000C426
.text:000000000000C426 loc_C426:                               ; CODE XREF: __strftime_internal+115D↓j
.text:000000000000C426                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000C42B                 mov     edi, 2
.text:000000000000C430                 xor     esi, esi
.text:000000000000C432                 jmp     loc_BFA7
.text:000000000000C437 ; ---------------------------------------------------------------------------
.text:000000000000C437
.text:000000000000C437 loc_C437:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C437                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C437                 movzx   eax, byte ptr [rsp+4F8h+var_4C8] ; jumptable 000000000000BC3F cases 98,104
.text:000000000000C43C                 test    r8b, r8b
.text:000000000000C43F                 cmovnz  eax, r8d
.text:000000000000C443                 cmp     r11d, 45h ; 'E'
.text:000000000000C447                 jz      loc_D3B6
.text:000000000000C44D                 mov     esi, r9d
.text:000000000000C450                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000C454                 xor     r8d, r8d
.text:000000000000C457                 jmp     loc_BDF5
.text:000000000000C45C ; ---------------------------------------------------------------------------
.text:000000000000C45C
.text:000000000000C45C loc_C45C:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C45C                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C45C                 xor     r8d, r8d        ; jumptable 000000000000BC3F case 122
.text:000000000000C45F
.text:000000000000C45F loc_C45F:                               ; CODE XREF: __strftime_internal+E98↓j
.text:000000000000C45F                 mov     ecx, [r13+20h]
.text:000000000000C463                 test    ecx, ecx
.text:000000000000C465                 js      loc_D10E
.text:000000000000C46B                 mov     rcx, [r13+28h]
.text:000000000000C46F                 mov     byte ptr [rsp+4F8h+var_4C0], 1
.text:000000000000C474                 test    ecx, ecx
.text:000000000000C476                 js      short loc_C48C
.text:000000000000C478                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000C47D                 jnz     short loc_C48C
.text:000000000000C47F                 mov     rax, [rsp+4F8h+var_4D8]
.text:000000000000C484                 cmp     byte ptr [rax], 2Dh ; '-'
.text:000000000000C487                 setz    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000C48C
.text:000000000000C48C loc_C48C:                               ; CODE XREF: __strftime_internal+A46↑j
.text:000000000000C48C                                         ; __strftime_internal+A4D↑j
.text:000000000000C48C                 mov     eax, ecx
.text:000000000000C48E                 mov     edx, 91A2B3C5h
.text:000000000000C493                 mov     esi, 88888889h
.text:000000000000C498                 imul    edx
.text:000000000000C49A                 mov     eax, ecx
.text:000000000000C49C                 sar     eax, 1Fh
.text:000000000000C49F                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:000000000000C4A3                 lea     r12d, [rdx+rcx]
.text:000000000000C4A7                 sar     r12d, 0Bh
.text:000000000000C4AB                 sub     r12d, eax
.text:000000000000C4AE                 mov     eax, ecx
.text:000000000000C4B0                 imul    esi
.text:000000000000C4B2                 lea     edi, [rdx+rcx]
.text:000000000000C4B5                 sar     edi, 5
.text:000000000000C4B8                 sub     edi, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000C4BC                 mov     eax, edi
.text:000000000000C4BE                 imul    esi
.text:000000000000C4C0                 mov     eax, edi
.text:000000000000C4C2                 sar     eax, 1Fh
.text:000000000000C4C5                 lea     esi, [rdx+rdi]
.text:000000000000C4C8                 sar     esi, 5
.text:000000000000C4CB                 sub     esi, eax
.text:000000000000C4CD                 mov     eax, edi
.text:000000000000C4CF                 imul    esi, 3Ch ; '<'
.text:000000000000C4D2                 imul    edi, 3Ch ; '<'
.text:000000000000C4D5                 sub     eax, esi
.text:000000000000C4D7                 sub     ecx, edi
.text:000000000000C4D9                 cmp     r8, 1
.text:000000000000C4DD                 mov     esi, eax
.text:000000000000C4DF                 jz      loc_D332
.text:000000000000C4E5                 jb      loc_D410
.text:000000000000C4EB                 cmp     r8, 2
.text:000000000000C4EF                 jz      loc_D2E5
.text:000000000000C4F5                 cmp     r8, 3
.text:000000000000C4F9                 jnz     loc_D3BF
.text:000000000000C4FF                 test    ecx, ecx
.text:000000000000C501                 jnz     loc_D2E5
.text:000000000000C507                 test    eax, eax
.text:000000000000C509                 jnz     loc_D332
.text:000000000000C50F                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000C514                 mov     ecx, r12d
.text:000000000000C517                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000C51C                 mov     edi, 3
.text:000000000000C521                 xor     eax, 1
.text:000000000000C524                 jmp     loc_BFA7
.text:000000000000C524 ; ---------------------------------------------------------------------------
.text:000000000000C529                 align 10h
.text:000000000000C530
.text:000000000000C530 loc_C530:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C530                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C530                 cmp     r11d, 4Fh ; 'O' ; jumptable 000000000000BC3F case 113
.text:000000000000C534                 mov     eax, [r13+10h]
.text:000000000000C538                 mov     edi, 1
.text:000000000000C53D                 jz      loc_BFBC
.text:000000000000C543                 lea     edx, [rax+rax*4]
.text:000000000000C546                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000C54B                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000C550                 xor     esi, esi
.text:000000000000C552                 lea     ecx, [rax+rdx*2]
.text:000000000000C555                 sar     ecx, 5
.text:000000000000C558                 add     ecx, 1
.text:000000000000C55B                 nop     dword ptr [rax+rax+00h]
.text:000000000000C560
.text:000000000000C560 loc_C560:                               ; CODE XREF: __strftime_internal+140C↓j
.text:000000000000C560                 lea     r9, [rsp+4F8h+s]
.text:000000000000C568                 mov     r12d, 0CCCCCCCDh
.text:000000000000C56E                 lea     r11, [r9+17h]
.text:000000000000C572                 nop     word ptr [rax+rax+00h]
.text:000000000000C578
.text:000000000000C578 loc_C578:                               ; CODE XREF: __strftime_internal+B82↓j
.text:000000000000C578                 test    sil, 1
.text:000000000000C57C                 lea     r8, [r11-1]
.text:000000000000C580                 jz      short loc_C591
.text:000000000000C582                 lea     rax, [r11-2]
.text:000000000000C586                 mov     byte ptr [r11-1], 3Ah ; ':'
.text:000000000000C58B                 mov     r11, r8
.text:000000000000C58E                 mov     r8, rax
.text:000000000000C591
.text:000000000000C591 loc_C591:                               ; CODE XREF: __strftime_internal+B50↑j
.text:000000000000C591                 mov     eax, ecx
.text:000000000000C593                 sar     esi, 1
.text:000000000000C595                 mul     r12d
.text:000000000000C598                 shr     edx, 3
.text:000000000000C59B                 lea     eax, [rdx+rdx*4]
.text:000000000000C59E                 add     eax, eax
.text:000000000000C5A0                 sub     ecx, eax
.text:000000000000C5A2                 mov     eax, esi
.text:000000000000C5A4                 add     ecx, 30h ; '0'
.text:000000000000C5A7                 or      eax, edx
.text:000000000000C5A9                 mov     [r11-1], cl
.text:000000000000C5AD                 mov     ecx, edx
.text:000000000000C5AF                 mov     r11, r8
.text:000000000000C5B2                 jnz     short loc_C578
.text:000000000000C5B4                 cmp     r10d, edi
.text:000000000000C5B7                 cmovge  edi, r10d
.text:000000000000C5BB                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000C5C0                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:000000000000C5C4                 jnz     loc_CE48
.text:000000000000C5CA                 cmp     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000C5CF                 jz      loc_C869
.text:000000000000C5D5                 cmp     r15d, 2Dh ; '-'
.text:000000000000C5D9                 jz      loc_D103
.text:000000000000C5DF                 mov     byte ptr [rsp+4F8h+var_4C0], 2Bh ; '+'
.text:000000000000C5E4
.text:000000000000C5E4 loc_C5E4:                               ; CODE XREF: __strftime_internal+1421↓j
.text:000000000000C5E4                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C5E8                 lea     rcx, [r9+17h]
.text:000000000000C5EC                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000C5F1                 sub     rcx, r8
.text:000000000000C5F4                 lea     r12d, [rax-1]
.text:000000000000C5F8                 sub     rdx, r14
.text:000000000000C5FB                 sub     r12d, ecx
.text:000000000000C5FE                 test    r12d, r12d
.text:000000000000C601                 jle     loc_D04C
.text:000000000000C607                 cmp     r15d, 5Fh ; '_'
.text:000000000000C60B                 jz      loc_CFC6
.text:000000000000C611                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C616                 cmp     rax, rdx
.text:000000000000C619                 mov     rdi, rax
.text:000000000000C61C                 jnb     loc_BAFC
.text:000000000000C622                 test    r10d, r10d
.text:000000000000C625                 mov     eax, 0
.text:000000000000C62A                 mov     esi, 1
.text:000000000000C62F                 cmovns  eax, r10d
.text:000000000000C633                 cdqe
.text:000000000000C635                 test    rax, rax
.text:000000000000C638                 cmovnz  rsi, rax
.text:000000000000C63C                 cmp     rsi, rdx
.text:000000000000C63F                 jnb     loc_BAFC
.text:000000000000C645                 add     r14, rsi
.text:000000000000C648                 test    rbp, rbp
.text:000000000000C64B                 movsxd  r9, r12d
.text:000000000000C64E                 mov     r12, rbx
.text:000000000000C651                 jz      loc_C6F4
.text:000000000000C657                 test    edi, edi
.text:000000000000C659                 jnz     short loc_C6AF
.text:000000000000C65B                 cmp     rax, 1
.text:000000000000C65F                 jbe     short loc_C6AF
.text:000000000000C661                 movsxd  rdx, r10d
.text:000000000000C664                 mov     [rsp+4F8h+var_4A0], r8
.text:000000000000C669                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000C66E                 sub     rdx, 1          ; n
.text:000000000000C672                 cmp     r15d, 30h ; '0'
.text:000000000000C676                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000C67B                 lea     r12, [rbp+rdx+0]
.text:000000000000C680                 jz      loc_D451
.text:000000000000C686                 cmp     r15d, 2Bh ; '+'
.text:000000000000C68A                 jz      loc_D451
.text:000000000000C690                 mov     rdi, rbp        ; s
.text:000000000000C693                 mov     esi, 20h ; ' '  ; c
.text:000000000000C698                 mov     rbp, r12
.text:000000000000C69B                 call    _memset
.text:000000000000C6A0                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000C6A5                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000C6AA                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000C6AF
.text:000000000000C6AF loc_C6AF:                               ; CODE XREF: __strftime_internal+C29↑j
.text:000000000000C6AF                                         ; __strftime_internal+C2F↑j ...
.text:000000000000C6AF                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000C6B4                 add     rbp, 1
.text:000000000000C6B8                 mov     r12, rbx
.text:000000000000C6BB                 mov     [rbp-1], al
.text:000000000000C6BE
.text:000000000000C6BE loc_C6BE:                               ; CODE XREF: __strftime_internal+1807↓j
.text:000000000000C6BE                 test    rbp, rbp
.text:000000000000C6C1                 jz      short loc_C6F4
.text:000000000000C6C3                 mov     rdx, r9         ; n
.text:000000000000C6C6                 mov     rdi, rbp        ; s
.text:000000000000C6C9                 mov     esi, 30h ; '0'  ; c
.text:000000000000C6CE                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000C6D3                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000C6D8                 mov     qword ptr [rsp+4F8h+var_4C0], r9
.text:000000000000C6DD                 call    _memset
.text:000000000000C6E2                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000C6E7                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000C6EC                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000C6F1                 add     rbp, r9
.text:000000000000C6F4
.text:000000000000C6F4 loc_C6F4:                               ; CODE XREF: __strftime_internal+C21↑j
.text:000000000000C6F4                                         ; __strftime_internal+C91↑j
.text:000000000000C6F4                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000C6F9                 add     r14, r9
.text:000000000000C6FC                 xor     r11d, r11d
.text:000000000000C6FF                 xor     r10d, r10d
.text:000000000000C702                 sub     rdx, r14
.text:000000000000C705
.text:000000000000C705 loc_C705:                               ; CODE XREF: __strftime_internal+E72↓j
.text:000000000000C705                                         ; __strftime_internal+14D7↓j ...
.text:000000000000C705                 cmp     rcx, r11
.text:000000000000C708                 mov     rbx, r11
.text:000000000000C70B                 cmovnb  rbx, rcx
.text:000000000000C70F                 cmp     rbx, rdx
.text:000000000000C712                 jnb     loc_BAFC
.text:000000000000C718                 test    rbp, rbp
.text:000000000000C71B                 jz      loc_BF2E
.text:000000000000C721                 mov     esi, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C725                 test    esi, esi
.text:000000000000C727                 jnz     short loc_C778
.text:000000000000C729                 cmp     rcx, r11
.text:000000000000C72C                 jnb     short loc_C778
.text:000000000000C72E                 movsxd  rdx, r10d
.text:000000000000C731                 mov     [rsp+4F8h+var_4B0], r8
.text:000000000000C736                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000C73B                 sub     rdx, rcx        ; n
.text:000000000000C73E                 cmp     r15d, 30h ; '0'
.text:000000000000C742                 lea     rax, [rbp+rdx+0]
.text:000000000000C747                 mov     qword ptr [rsp+4F8h+var_4C0], rax
.text:000000000000C74C                 jz      loc_CF8A
.text:000000000000C752                 cmp     r15d, 2Bh ; '+'
.text:000000000000C756                 jz      loc_CF8A
.text:000000000000C75C                 mov     rdi, rbp        ; s
.text:000000000000C75F                 mov     esi, 20h ; ' '  ; c
.text:000000000000C764                 call    _memset
.text:000000000000C769                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000C76E                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000C773                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000C778
.text:000000000000C778 loc_C778:                               ; CODE XREF: __strftime_internal+CF7↑j
.text:000000000000C778                                         ; __strftime_internal+CFC↑j ...
.text:000000000000C778                 cmp     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000C77D                 mov     rdx, rcx        ; n
.text:000000000000C780                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000C785                 mov     rsi, r8         ; src
.text:000000000000C788                 mov     rdi, rbp        ; dest
.text:000000000000C78B                 jnz     loc_BF21
.text:000000000000C791
.text:000000000000C791 loc_C791:                               ; CODE XREF: __strftime_internal+4EB↑j
.text:000000000000C791                 call    _memcpy
.text:000000000000C796                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000C79B                 jmp     loc_BF2B
.text:000000000000C7A0 ; ---------------------------------------------------------------------------
.text:000000000000C7A0
.text:000000000000C7A0 loc_C7A0:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C7A0                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C7A0                 movdqu  xmm0, xmmword ptr [r13+0] ; jumptable 000000000000BC3F case 115
.text:000000000000C7A6                 lea     rsi, [rsp+4F8h+var_488]
.text:000000000000C7AB                 mov     rax, [r13+30h]
.text:000000000000C7AF                 mov     rdi, [rsp+4F8h+var_4E8]
.text:000000000000C7B4                 movaps  [rsp+4F8h+var_488], xmm0
.text:000000000000C7B9                 mov     [rsp+4F8h+var_4C0], r10d
.text:000000000000C7BE                 movdqu  xmm0, xmmword ptr [r13+10h]
.text:000000000000C7C4                 mov     [rsp+4F8h+var_458], rax
.text:000000000000C7CC                 movaps  [rsp+4F8h+var_478], xmm0
.text:000000000000C7D4                 movdqu  xmm0, xmmword ptr [r13+20h]
.text:000000000000C7DA                 movaps  [rsp+4F8h+var_468], xmm0
.text:000000000000C7E2                 call    mktime_z
.text:000000000000C7E7                 lea     r9, [rsp+4F8h+s]
.text:000000000000C7EF                 mov     rsi, rax
.text:000000000000C7F2                 mov     rcx, rax
.text:000000000000C7F5                 mov     r11, 6666666666666667h
.text:000000000000C7FF                 mov     edi, 30h ; '0'
.text:000000000000C804                 mov     r10d, [rsp+4F8h+var_4C0]
.text:000000000000C809                 lea     r8, [r9+17h]
.text:000000000000C80D                 nop     dword ptr [rax]
.text:000000000000C810
.text:000000000000C810 loc_C810:                               ; CODE XREF: __strftime_internal+E1E↓j
.text:000000000000C810                 mov     rax, rcx
.text:000000000000C813                 imul    r11
.text:000000000000C816                 mov     rax, rcx
.text:000000000000C819                 sar     rax, 3Fh
.text:000000000000C81D                 sar     rdx, 2
.text:000000000000C821                 sub     rdx, rax
.text:000000000000C824                 mov     rax, rdx
.text:000000000000C827                 lea     rdx, [rdx+rdx*4]
.text:000000000000C82B                 add     rdx, rdx
.text:000000000000C82E                 sub     rcx, rdx
.text:000000000000C831                 mov     rdx, rcx
.text:000000000000C834                 mov     rcx, rax
.text:000000000000C837                 mov     eax, edi
.text:000000000000C839                 sub     eax, edx
.text:000000000000C83B                 add     edx, 30h ; '0'
.text:000000000000C83E                 test    rsi, rsi
.text:000000000000C841                 cmovs   edx, eax
.text:000000000000C844                 sub     r8, 1
.text:000000000000C848                 test    rcx, rcx
.text:000000000000C84B                 mov     [r8], dl
.text:000000000000C84E                 jnz     short loc_C810
.text:000000000000C850                 test    r10d, r10d
.text:000000000000C853                 mov     edi, 1
.text:000000000000C858                 cmovg   edi, r10d
.text:000000000000C85C                 test    rsi, rsi
.text:000000000000C85F                 mov     dword ptr [rsp+4F8h+var_4B0], edi
.text:000000000000C863                 js      loc_CE48
.text:000000000000C869
.text:000000000000C869 loc_C869:                               ; CODE XREF: __strftime_internal+B9F↑j
.text:000000000000C869                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000C86E                 lea     rcx, [r9+17h]
.text:000000000000C872                 sub     rcx, r8
.text:000000000000C875                 sub     rdx, r14
.text:000000000000C878                 cmp     r15d, 2Dh ; '-'
.text:000000000000C87C                 jz      short loc_C88F
.text:000000000000C87E                 mov     r12d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C883                 sub     r12d, ecx
.text:000000000000C886                 test    r12d, r12d
.text:000000000000C889                 jg      loc_D219
.text:000000000000C88F
.text:000000000000C88F loc_C88F:                               ; CODE XREF: __strftime_internal+E4C↑j
.text:000000000000C88F                 test    r10d, r10d
.text:000000000000C892                 mov     r11d, 0
.text:000000000000C898                 mov     r12, rbx
.text:000000000000C89B                 cmovns  r11d, r10d
.text:000000000000C89F                 movsxd  r11, r11d
.text:000000000000C8A2                 jmp     loc_C705
.text:000000000000C8A7 ; ---------------------------------------------------------------------------
.text:000000000000C8A7
.text:000000000000C8A7 loc_C8A7:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C8A7                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C8A7                 movzx   eax, byte ptr [rbx+1] ; jumptable 000000000000BC3F case 58
.text:000000000000C8AB                 lea     rdx, [rbx+1]
.text:000000000000C8AF                 cmp     al, 3Ah ; ':'
.text:000000000000C8B1                 jz      loc_D3CA
.text:000000000000C8B7                 mov     r8d, 1
.text:000000000000C8BD
.text:000000000000C8BD loc_C8BD:                               ; CODE XREF: __strftime_internal+19B5↓j
.text:000000000000C8BD                 cmp     al, 7Ah ; 'z'
.text:000000000000C8BF                 jnz     def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000C8C5                 mov     rbx, rdx
.text:000000000000C8C8                 jmp     loc_C45F
.text:000000000000C8CD ; ---------------------------------------------------------------------------
.text:000000000000C8CD
.text:000000000000C8CD loc_C8CD:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000C8CD                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000C8CD                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F cases 71,86,103
.text:000000000000C8D1                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000C8D7                 mov     edi, [r13+14h]
.text:000000000000C8DB                 mov     r8d, [r13+1Ch]
.text:000000000000C8DF                 mov     edx, 92492493h
.text:000000000000C8E4                 mov     eax, edi
.text:000000000000C8E6                 mov     ecx, r8d
.text:000000000000C8E9                 sar     eax, 1Fh
.text:000000000000C8EC                 and     eax, 190h
.text:000000000000C8F1                 lea     r12d, [rdi+rax-64h]
.text:000000000000C8F6                 mov     eax, [r13+18h]
.text:000000000000C8FA                 sub     ecx, eax
.text:000000000000C8FC                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000C900                 add     ecx, 17Eh
.text:000000000000C906                 mov     eax, ecx
.text:000000000000C908                 imul    edx
.text:000000000000C90A                 lea     eax, [rdx+rcx]
.text:000000000000C90D                 mov     edx, ecx
.text:000000000000C90F                 sar     edx, 1Fh
.text:000000000000C912                 sar     eax, 2
.text:000000000000C915                 sub     eax, edx
.text:000000000000C917                 lea     edx, ds:0[rax*8]
.text:000000000000C91E                 sub     edx, eax
.text:000000000000C920                 mov     eax, edx
.text:000000000000C922                 mov     edx, r8d
.text:000000000000C925                 sub     edx, ecx
.text:000000000000C927                 lea     eax, [rdx+rax+3]
.text:000000000000C92B                 test    eax, eax
.text:000000000000C92D                 mov     dword ptr [rsp+4F8h+var_4B8], eax
.text:000000000000C931                 js      loc_D258
.text:000000000000C937                 test    r12b, 3
.text:000000000000C93B                 mov     eax, 16Dh
.text:000000000000C940                 jnz     short loc_C987
.text:000000000000C942                 mov     ecx, 51EB851Fh
.text:000000000000C947                 mov     eax, r12d
.text:000000000000C94A                 imul    ecx
.text:000000000000C94C                 mov     eax, r12d
.text:000000000000C94F                 sar     eax, 1Fh
.text:000000000000C952                 mov     dword ptr [rsp+4F8h+var_4B0], eax
.text:000000000000C956                 mov     ecx, edx
.text:000000000000C958                 sar     edx, 5
.text:000000000000C95B                 sub     edx, eax
.text:000000000000C95D                 mov     eax, 16Eh
.text:000000000000C962                 imul    edx, 64h ; 'd'
.text:000000000000C965                 cmp     r12d, edx
.text:000000000000C968                 jnz     short loc_C987
.text:000000000000C96A                 sar     ecx, 7
.text:000000000000C96D                 mov     eax, ecx
.text:000000000000C96F                 sub     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000C973                 imul    eax, 190h
.text:000000000000C979                 cmp     r12d, eax
.text:000000000000C97C                 setz    al
.text:000000000000C97F                 movzx   eax, al
.text:000000000000C982                 add     eax, 16Dh
.text:000000000000C987
.text:000000000000C987 loc_C987:                               ; CODE XREF: __strftime_internal+F10↑j
.text:000000000000C987                                         ; __strftime_internal+F38↑j
.text:000000000000C987                 sub     r8d, eax
.text:000000000000C98A                 mov     edx, 92492493h
.text:000000000000C98F                 mov     ecx, r8d
.text:000000000000C992                 sub     ecx, [rsp+4F8h+var_4C0]
.text:000000000000C996                 add     ecx, 17Eh
.text:000000000000C99C                 mov     eax, ecx
.text:000000000000C99E                 sub     r8d, ecx
.text:000000000000C9A1                 imul    edx
.text:000000000000C9A3                 lea     eax, [rdx+rcx]
.text:000000000000C9A6                 mov     edx, ecx
.text:000000000000C9A8                 sar     edx, 1Fh
.text:000000000000C9AB                 sar     eax, 2
.text:000000000000C9AE                 sub     eax, edx
.text:000000000000C9B0                 lea     edx, ds:0[rax*8]
.text:000000000000C9B7                 sub     edx, eax
.text:000000000000C9B9                 lea     ecx, [r8+rdx+3]
.text:000000000000C9BE                 mov     r8d, 1
.text:000000000000C9C4                 test    ecx, ecx
.text:000000000000C9C6                 jns     short loc_C9CF
.text:000000000000C9C8                 mov     ecx, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000C9CC                 xor     r8d, r8d
.text:000000000000C9CF
.text:000000000000C9CF loc_C9CF:                               ; CODE XREF: __strftime_internal+F96↑j
.text:000000000000C9CF                                         ; __strftime_internal+18B0↓j
.text:000000000000C9CF                 cmp     sil, 47h ; 'G'
.text:000000000000C9D3                 jz      loc_D116
.text:000000000000C9D9                 cmp     sil, 67h ; 'g'
.text:000000000000C9DD                 jnz     loc_D30F
.text:000000000000C9E3                 mov     ecx, 51EB851Fh
.text:000000000000C9E8                 mov     eax, edi
.text:000000000000C9EA                 mov     esi, edi
.text:000000000000C9EC                 imul    ecx
.text:000000000000C9EE                 mov     eax, edx
.text:000000000000C9F0                 mov     edx, edi
.text:000000000000C9F2                 sar     edx, 1Fh
.text:000000000000C9F5                 sar     eax, 5
.text:000000000000C9F8                 sub     eax, edx
.text:000000000000C9FA                 imul    eax, 64h ; 'd'
.text:000000000000C9FD                 sub     esi, eax
.text:000000000000C9FF                 add     esi, r8d
.text:000000000000CA02                 mov     eax, esi
.text:000000000000CA04                 imul    ecx
.text:000000000000CA06                 mov     eax, esi
.text:000000000000CA08                 sar     eax, 1Fh
.text:000000000000CA0B                 mov     ecx, edx
.text:000000000000CA0D                 sar     ecx, 5
.text:000000000000CA10                 sub     ecx, eax
.text:000000000000CA12                 imul    ecx, 64h ; 'd'
.text:000000000000CA15                 sub     esi, ecx
.text:000000000000CA17                 mov     ecx, esi
.text:000000000000CA19                 jns     loc_C409
.text:000000000000CA1F                 mov     eax, 0FFFFF894h
.text:000000000000CA24                 sub     eax, r8d
.text:000000000000CA27                 cmp     edi, eax
.text:000000000000CA29                 jge     loc_D4CA
.text:000000000000CA2F                 neg     ecx
.text:000000000000CA31                 test    r15d, r15d
.text:000000000000CA34                 jnz     loc_C412
.text:000000000000CA3A
.text:000000000000CA3A loc_CA3A:                               ; CODE XREF: __strftime_internal+9DC↑j
.text:000000000000CA3A                                         ; __strftime_internal+1AA0↓j
.text:000000000000CA3A                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000CA3F                 mov     eax, 1
.text:000000000000CA44                 cmp     r15d, 2Bh ; '+'
.text:000000000000CA48                 jz      loc_D4AA
.text:000000000000CA4E                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000CA53                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000CA58                 mov     edi, 2
.text:000000000000CA5D                 xor     esi, esi
.text:000000000000CA5F                 jmp     loc_BFA7
.text:000000000000CA64 ; ---------------------------------------------------------------------------
.text:000000000000CA64
.text:000000000000CA64 loc_CA64:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CA64                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CA64                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 100
.text:000000000000CA68                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CA6E                 mov     ecx, [r13+0Ch]
.text:000000000000CA72                 mov     edi, 2
.text:000000000000CA77                 jmp     loc_BF90
.text:000000000000CA7C ; ---------------------------------------------------------------------------
.text:000000000000CA7C
.text:000000000000CA7C loc_CA7C:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CA7C                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CA7C                 mov     eax, [r13+18h]  ; jumptable 000000000000BC3F case 117
.text:000000000000CA80                 mov     edx, 92492493h
.text:000000000000CA85                 mov     edi, 1
.text:000000000000CA8A                 lea     ecx, [rax+6]
.text:000000000000CA8D                 mov     eax, ecx
.text:000000000000CA8F                 imul    edx
.text:000000000000CA91                 lea     eax, [rdx+rcx]
.text:000000000000CA94                 mov     edx, ecx
.text:000000000000CA96                 sar     edx, 1Fh
.text:000000000000CA99                 sar     eax, 2
.text:000000000000CA9C                 sub     eax, edx
.text:000000000000CA9E                 lea     edx, ds:0[rax*8]
.text:000000000000CAA5                 sub     edx, eax
.text:000000000000CAA7                 sub     ecx, edx
.text:000000000000CAA9                 add     ecx, 1
.text:000000000000CAAC                 jmp     loc_BF90
.text:000000000000CAB1 ; ---------------------------------------------------------------------------
.text:000000000000CAB1
.text:000000000000CAB1 loc_CAB1:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CAB1                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CAB1                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 119
.text:000000000000CAB5                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CABB                 mov     ecx, [r13+18h]
.text:000000000000CABF                 mov     edi, 1
.text:000000000000CAC4                 jmp     loc_BF90
.text:000000000000CAC9 ; ---------------------------------------------------------------------------
.text:000000000000CAC9
.text:000000000000CAC9 loc_CAC9:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CAC9                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CAC9                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 87
.text:000000000000CACD                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CAD3                 mov     eax, [r13+18h]
.text:000000000000CAD7                 mov     ecx, 92492493h
.text:000000000000CADC                 lea     esi, [rax+6]
.text:000000000000CADF                 mov     eax, esi
.text:000000000000CAE1                 imul    ecx
.text:000000000000CAE3                 lea     eax, [rdx+rsi]
.text:000000000000CAE6                 mov     edx, esi
.text:000000000000CAE8                 sar     edx, 1Fh
.text:000000000000CAEB                 sar     eax, 2
.text:000000000000CAEE                 sub     eax, edx
.text:000000000000CAF0                 lea     edx, ds:0[rax*8]
.text:000000000000CAF7                 sub     edx, eax
.text:000000000000CAF9                 mov     eax, edx
.text:000000000000CAFB                 mov     edx, [r13+1Ch]
.text:000000000000CAFF                 sub     eax, esi
.text:000000000000CB01                 lea     esi, [rax+rdx+7]
.text:000000000000CB05                 mov     eax, esi
.text:000000000000CB07                 imul    ecx
.text:000000000000CB09                 jmp     loc_C272
.text:000000000000CB0E ; ---------------------------------------------------------------------------
.text:000000000000CB0E
.text:000000000000CB0E loc_CB0E:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CB0E                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CB0E                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 66
.text:000000000000CB12                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CB18                 test    r8b, r8b
.text:000000000000CB1B                 jz      loc_BDF5
.text:000000000000CB21                 mov     byte ptr [rsp+4F8h+var_4C8], r8b
.text:000000000000CB26                 jmp     loc_BDF2        ; jumptable 000000000000BC3F case 114
.text:000000000000CB2B ; ---------------------------------------------------------------------------
.text:000000000000CB2B
.text:000000000000CB2B loc_CB2B:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CB2B                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CB2B                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 67
.text:000000000000CB2F                 jz      loc_CFBA
.text:000000000000CB35                 mov     esi, [r13+14h]
.text:000000000000CB39                 mov     edx, 51EB851Fh
.text:000000000000CB3E                 mov     eax, esi
.text:000000000000CB40                 imul    edx
.text:000000000000CB42                 mov     eax, edx
.text:000000000000CB44                 mov     edx, esi
.text:000000000000CB46                 sar     edx, 1Fh
.text:000000000000CB49                 sar     eax, 5
.text:000000000000CB4C                 sub     eax, edx
.text:000000000000CB4E                 mov     edx, esi
.text:000000000000CB50                 lea     ecx, [rax+13h]
.text:000000000000CB53                 imul    eax, 64h ; 'd'
.text:000000000000CB56                 sub     edx, eax
.text:000000000000CB58                 mov     eax, edx
.text:000000000000CB5A                 shr     eax, 1Fh
.text:000000000000CB5D                 test    ecx, ecx
.text:000000000000CB5F                 setnle  dl
.text:000000000000CB62                 and     eax, edx
.text:000000000000CB64                 cmp     esi, 0FFFFF894h
.text:000000000000CB6A                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000CB6F                 sub     ecx, eax
.text:000000000000CB71                 cmp     esi, 0FFFFF894h
.text:000000000000CB77                 setnl   al
.text:000000000000CB7A                 test    r15d, r15d
.text:000000000000CB7D                 jnz     loc_C41C
.text:000000000000CB83                 cmp     [rsp+4F8h+var_4CC], 2Bh ; '+'
.text:000000000000CB88                 mov     r15d, [rsp+4F8h+var_4CC]
.text:000000000000CB8D                 jnz     loc_C426
.text:000000000000CB93
.text:000000000000CB93 loc_CB93:                               ; CODE XREF: __strftime_internal+9F0↑j
.text:000000000000CB93                 mov     edi, 2
.text:000000000000CB98                 mov     edx, 63h ; 'c'
.text:000000000000CB9D
.text:000000000000CB9D loc_CB9D:                               ; CODE XREF: __strftime_internal+171D↓j
.text:000000000000CB9D                 cmp     edx, ecx
.text:000000000000CB9F                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000CBA4                 mov     r15d, 2Bh ; '+'
.text:000000000000CBAA                 jb      loc_C2D9
.text:000000000000CBB0
.text:000000000000CBB0 loc_CBB0:                               ; CODE XREF: __strftime_internal+1A84↓j
.text:000000000000CBB0                 cmp     r10d, edi
.text:000000000000CBB3                 mov     r15d, 2Bh ; '+'
.text:000000000000CBB9                 setnle  byte ptr [rsp+4F8h+var_4B8]
.text:000000000000CBBE                 xor     esi, esi
.text:000000000000CBC0                 jmp     loc_BFA7
.text:000000000000CBC5 ; ---------------------------------------------------------------------------
.text:000000000000CBC5
.text:000000000000CBC5 loc_CBC5:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CBC5                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CBC5                 test    r11d, r11d      ; jumptable 000000000000BC3F case 68
.text:000000000000CBC8                 jnz     def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CBCE                 lea     rax, aMDY       ; "%m/%d/%y"
.text:000000000000CBD5                 mov     [rsp+4F8h+var_4C0], 0FFFFFFFFh
.text:000000000000CBDD                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000CBE2                 jmp     loc_C0A2
.text:000000000000CBE7 ; ---------------------------------------------------------------------------
.text:000000000000CBE7
.text:000000000000CBE7 loc_CBE7:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CBE7                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CBE7                 test    r11d, r11d      ; jumptable 000000000000BC3F case 70
.text:000000000000CBEA                 jnz     def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CBF0                 test    r15d, r15d
.text:000000000000CBF3                 jnz     loc_D3ED
.text:000000000000CBF9                 test    r10d, r10d
.text:000000000000CBFC                 jns     loc_D3ED
.text:000000000000CC02                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:000000000000CC09                 mov     [rsp+4F8h+var_4C0], 4
.text:000000000000CC11                 mov     r15d, 2Bh ; '+'
.text:000000000000CC17                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000CC1C                 jmp     loc_C0A2
.text:000000000000CC21 ; ---------------------------------------------------------------------------
.text:000000000000CC21
.text:000000000000CC21 loc_CC21:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CC21                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CC21                 movzx   ecx, byte ptr [rbx-1] ; jumptable 000000000000BC3F case 0
.text:000000000000CC25                 lea     r9, [rbx-1]
.text:000000000000CC29
.text:000000000000CC29 loc_CC29:                               ; CODE XREF: __strftime_internal+1995↓j
.text:000000000000CC29                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000CC2E                 mov     eax, 0
.text:000000000000CC33                 sub     rdx, r14
.text:000000000000CC36                 test    r10d, r10d
.text:000000000000CC39                 cmovns  eax, r10d
.text:000000000000CC3D                 cmp     cl, 25h ; '%'
.text:000000000000CC40                 cdqe
.text:000000000000CC42                 jnz     loc_BC7B
.text:000000000000CC48                 test    rax, rax
.text:000000000000CC4B                 mov     ecx, 1
.text:000000000000CC50                 mov     r12, r9
.text:000000000000CC53                 cmovnz  rcx, rax
.text:000000000000CC57                 mov     r8d, 1
.text:000000000000CC5D                 jmp     loc_BCC1
.text:000000000000CC62 ; ---------------------------------------------------------------------------
.text:000000000000CC62
.text:000000000000CC62 loc_CC62:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CC62                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CC62                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 72
.text:000000000000CC66                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CC6C                 mov     ecx, [r13+8]
.text:000000000000CC70                 mov     edi, 2
.text:000000000000CC75                 jmp     loc_BF90
.text:000000000000CC7A ; ---------------------------------------------------------------------------
.text:000000000000CC7A
.text:000000000000CC7A loc_CC7A:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CC7A                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CC7A                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 77
.text:000000000000CC7E                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CC84                 mov     ecx, [r13+4]
.text:000000000000CC88                 mov     edi, 2
.text:000000000000CC8D                 jmp     loc_BF90
.text:000000000000CC92 ; ---------------------------------------------------------------------------
.text:000000000000CC92
.text:000000000000CC92 loc_CC92:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CC92                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CC92                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 78
.text:000000000000CC96                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CC9C                 cmp     r10d, 0FFFFFFFFh
.text:000000000000CCA0                 jz      loc_D1F1
.text:000000000000CCA6                 cmp     r10d, 8
.text:000000000000CCAA                 jg      loc_D4B9
.text:000000000000CCB0                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000CCB7                 mov     esi, r10d
.text:000000000000CCBA                 mov     edi, 66666667h
.text:000000000000CCBF                 nop
.text:000000000000CCC0
.text:000000000000CCC0 loc_CCC0:                               ; CODE XREF: __strftime_internal+12A4↓j
.text:000000000000CCC0                 mov     eax, ecx
.text:000000000000CCC2                 add     esi, 1
.text:000000000000CCC5                 sar     ecx, 1Fh
.text:000000000000CCC8                 imul    edi
.text:000000000000CCCA                 sar     edx, 2
.text:000000000000CCCD                 sub     edx, ecx
.text:000000000000CCCF                 cmp     esi, 9
.text:000000000000CCD2                 mov     ecx, edx
.text:000000000000CCD4                 jnz     short loc_CCC0
.text:000000000000CCD6
.text:000000000000CCD6 loc_CCD6:                               ; CODE XREF: __strftime_internal+1A90↓j
.text:000000000000CCD6                 mov     edi, r10d
.text:000000000000CCD9                 jmp     loc_BF90
.text:000000000000CCDE ; ---------------------------------------------------------------------------
.text:000000000000CCDE
.text:000000000000CCDE loc_CCDE:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CCDE                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CCDE                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 73
.text:000000000000CCE2                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CCE8                 mov     ecx, [rsp+4F8h+var_490]
.text:000000000000CCEC                 mov     edi, 2
.text:000000000000CCF1                 jmp     loc_BF90
.text:000000000000CCF6 ; ---------------------------------------------------------------------------
.text:000000000000CCF6
.text:000000000000CCF6 loc_CCF6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CCF6                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CCF6                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 108
.text:000000000000CCFA                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CD00                 mov     ecx, [rsp+4F8h+var_490]
.text:000000000000CD04
.text:000000000000CD04 loc_CD04:                               ; CODE XREF: __strftime_internal+13E4↓j
.text:000000000000CD04                                         ; __strftime_internal+13F7↓j
.text:000000000000CD04                 test    r15d, r15d
.text:000000000000CD07                 mov     edi, 2
.text:000000000000CD0C                 jnz     loc_BF90
.text:000000000000CD12                 mov     r15d, 5Fh ; '_'
.text:000000000000CD18                 jmp     loc_BF90
.text:000000000000CD1D ; ---------------------------------------------------------------------------
.text:000000000000CD1D
.text:000000000000CD1D loc_CD1D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CD1D                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CD1D                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 109
.text:000000000000CD21                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CD27                 mov     eax, [r13+10h]
.text:000000000000CD2B                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000CD30                 mov     edi, 2
.text:000000000000CD35                 cmp     eax, 0FFFFFFFFh
.text:000000000000CD38                 lea     ecx, [rax+1]
.text:000000000000CD3B                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000CD40                 cmp     eax, 0FFFFFFFFh
.text:000000000000CD43                 setnl   al
.text:000000000000CD46                 xor     esi, esi
.text:000000000000CD48                 jmp     loc_BFA7
.text:000000000000CD4D ; ---------------------------------------------------------------------------
.text:000000000000CD4D
.text:000000000000CD4D loc_CD4D:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CD4D                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CD4D                 test    r10d, r10d      ; jumptable 000000000000BC3F case 110
.text:000000000000CD50                 mov     ecx, 0
.text:000000000000CD55                 mov     eax, 1
.text:000000000000CD5A                 cmovns  ecx, r10d
.text:000000000000CD5E                 movsxd  rcx, ecx
.text:000000000000CD61                 test    rcx, rcx
.text:000000000000CD64                 cmovz   rcx, rax
.text:000000000000CD68                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000CD6D                 sub     rax, r14
.text:000000000000CD70                 cmp     rax, rcx
.text:000000000000CD73                 jbe     loc_BAFC
.text:000000000000CD79                 test    rbp, rbp
.text:000000000000CD7C                 jz      loc_C068
.text:000000000000CD82                 cmp     r10d, 1
.text:000000000000CD86                 jle     short loc_CDC2
.text:000000000000CD88                 movsxd  rdx, r10d
.text:000000000000CD8B                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000CD90                 sub     rdx, 1          ; n
.text:000000000000CD94                 cmp     r15d, 30h ; '0'
.text:000000000000CD98                 lea     r12, [rbp+rdx+0]
.text:000000000000CD9D                 jz      loc_D36E
.text:000000000000CDA3                 cmp     r15d, 2Bh ; '+'
.text:000000000000CDA7                 jz      loc_D36E
.text:000000000000CDAD                 mov     rdi, rbp        ; s
.text:000000000000CDB0                 mov     esi, 20h ; ' '  ; c
.text:000000000000CDB5                 mov     rbp, r12
.text:000000000000CDB8                 call    _memset
.text:000000000000CDBD                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000CDC2
.text:000000000000CDC2 loc_CDC2:                               ; CODE XREF: __strftime_internal+1356↑j
.text:000000000000CDC2                                         ; __strftime_internal+1953↓j
.text:000000000000CDC2                 mov     byte ptr [rbp+0], 0Ah
.text:000000000000CDC6                 add     rbp, 1
.text:000000000000CDCA                 jmp     loc_C068
.text:000000000000CDCF ; ---------------------------------------------------------------------------
.text:000000000000CDCF
.text:000000000000CDCF loc_CDCF:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CDCF                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CDCF                 xor     eax, eax        ; jumptable 000000000000BC3F case 112
.text:000000000000CDD1                 jmp     loc_C078
.text:000000000000CDD6 ; ---------------------------------------------------------------------------
.text:000000000000CDD6
.text:000000000000CDD6 loc_CDD6:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CDD6                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CDD6                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 106
.text:000000000000CDDA                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CDE0                 mov     eax, [r13+1Ch]
.text:000000000000CDE4                 mov     byte ptr [rsp+4F8h+var_4B8], 0
.text:000000000000CDE9                 mov     edi, 3
.text:000000000000CDEE                 cmp     eax, 0FFFFFFFFh
.text:000000000000CDF1                 lea     ecx, [rax+1]
.text:000000000000CDF4                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000CDF9                 cmp     eax, 0FFFFFFFFh
.text:000000000000CDFC                 setnl   al
.text:000000000000CDFF                 xor     esi, esi
.text:000000000000CE01                 jmp     loc_BFA7
.text:000000000000CE06 ; ---------------------------------------------------------------------------
.text:000000000000CE06
.text:000000000000CE06 loc_CE06:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CE06                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CE06                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 107
.text:000000000000CE0A                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CE10                 mov     ecx, [r13+8]
.text:000000000000CE14                 jmp     loc_CD04
.text:000000000000CE19 ; ---------------------------------------------------------------------------
.text:000000000000CE19
.text:000000000000CE19 loc_CE19:                               ; CODE XREF: __strftime_internal+20F↑j
.text:000000000000CE19                                         ; DATA XREF: .rodata:jpt_BC3F↓o
.text:000000000000CE19                 cmp     r11d, 45h ; 'E' ; jumptable 000000000000BC3F case 101
.text:000000000000CE1D                 jz      def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000CE23                 mov     ecx, [r13+0Ch]
.text:000000000000CE27                 jmp     loc_CD04
.text:000000000000CE27 ; ---------------------------------------------------------------------------
.text:000000000000CE2C                 align 10h
.text:000000000000CE30
.text:000000000000CE30 loc_CE30:                               ; CODE XREF: __strftime_internal+57B↑j
.text:000000000000CE30                                         ; __strftime_internal+583↑j
.text:000000000000CE30                 mov     eax, ecx
.text:000000000000CE32                 neg     eax
.text:000000000000CE34                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000CE39                 cmovnz  ecx, eax
.text:000000000000CE3C                 jmp     loc_C560
.text:000000000000CE3C ; ---------------------------------------------------------------------------
.text:000000000000CE41                 align 8
.text:000000000000CE48
.text:000000000000CE48 loc_CE48:                               ; CODE XREF: __strftime_internal+B94↑j
.text:000000000000CE48                                         ; __strftime_internal+E33↑j
.text:000000000000CE48                 cmp     r15d, 2Dh ; '-'
.text:000000000000CE4C                 mov     byte ptr [rsp+4F8h+var_4C0], 2Dh ; '-'
.text:000000000000CE51                 jnz     loc_C5E4
.text:000000000000CE57
.text:000000000000CE57 loc_CE57:                               ; CODE XREF: __strftime_internal+16D9↓j
.text:000000000000CE57                 test    r10d, r10d
.text:000000000000CE5A                 mov     r11d, 0
.text:000000000000CE60                 mov     rax, [rsp+4F8h+var_4F0]
.text:000000000000CE65                 cmovns  r11d, r10d
.text:000000000000CE69                 mov     r12d, 1
.text:000000000000CE6F                 movsxd  r11, r11d
.text:000000000000CE72                 test    r11, r11
.text:000000000000CE75                 cmovnz  r12, r11
.text:000000000000CE79                 sub     rax, r14
.text:000000000000CE7C                 cmp     rax, r12
.text:000000000000CE7F                 jbe     loc_BAFC
.text:000000000000CE85                 test    rbp, rbp
.text:000000000000CE88                 jz      short loc_CEEC
.text:000000000000CE8A                 mov     eax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000CE8E                 test    eax, eax
.text:000000000000CE90                 jnz     short loc_CEE4
.text:000000000000CE92                 cmp     r11, 1
.text:000000000000CE96                 jbe     short loc_CEE4
.text:000000000000CE98                 movsxd  rax, r10d
.text:000000000000CE9B                 mov     rdi, rbp        ; s
.text:000000000000CE9E                 mov     esi, 20h ; ' '  ; c
.text:000000000000CEA3                 lea     rcx, [rax-1]
.text:000000000000CEA7                 mov     [rsp+4F8h+var_498], r9
.text:000000000000CEAC                 mov     [rsp+4F8h+var_4A0], r8
.text:000000000000CEB1                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000CEB6                 mov     dword ptr [rsp+4F8h+var_4B8], r10d
.text:000000000000CEBB                 mov     rdx, rcx        ; n
.text:000000000000CEBE                 mov     qword ptr [rsp+4F8h+var_4C0], rcx
.text:000000000000CEC3                 call    _memset
.text:000000000000CEC8                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000CECD                 mov     r9, [rsp+4F8h+var_498]
.text:000000000000CED2                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000CED7                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000CEDC                 mov     r10d, dword ptr [rsp+4F8h+var_4B8]
.text:000000000000CEE1                 add     rbp, rcx
.text:000000000000CEE4
.text:000000000000CEE4 loc_CEE4:                               ; CODE XREF: __strftime_internal+1460↑j
.text:000000000000CEE4                                         ; __strftime_internal+1466↑j
.text:000000000000CEE4                 mov     [rbp+0], r15b
.text:000000000000CEE8                 add     rbp, 1
.text:000000000000CEEC
.text:000000000000CEEC loc_CEEC:                               ; CODE XREF: __strftime_internal+1458↑j
.text:000000000000CEEC                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000CEF1                 lea     rcx, [r9+17h]
.text:000000000000CEF5                 add     r14, r12
.text:000000000000CEF8                 mov     r15d, 2Dh ; '-'
.text:000000000000CEFE                 mov     r12, rbx
.text:000000000000CF01                 sub     rcx, r8
.text:000000000000CF04                 sub     rdx, r14
.text:000000000000CF07                 jmp     loc_C705
.text:000000000000CF07 ; ---------------------------------------------------------------------------
.text:000000000000CF0C                 align 10h
.text:000000000000CF10
.text:000000000000CF10 loc_CF10:                               ; CODE XREF: __strftime_internal+30D↑j
.text:000000000000CF10                 call    _memcpy
.text:000000000000CF15                 mov     rcx, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000CF1A                 mov     r8, [rsp+4F8h+var_4C8]
.text:000000000000CF1F                 jmp     loc_BD52
.text:000000000000CF1F ; ---------------------------------------------------------------------------
.text:000000000000CF24                 align 8
.text:000000000000CF28
.text:000000000000CF28 loc_CF28:                               ; CODE XREF: __strftime_internal+4D8↑j
.text:000000000000CF28                 mov     rdi, rbp
.text:000000000000CF2B                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000CF30                 call    memcpy_lowcase
.text:000000000000CF35                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000CF3A                 jmp     loc_BF2B
.text:000000000000CF3F ; ---------------------------------------------------------------------------
.text:000000000000CF3F
.text:000000000000CF3F loc_CF3F:                               ; CODE XREF: __strftime_internal+49C↑j
.text:000000000000CF3F                                         ; __strftime_internal+4A6↑j
.text:000000000000CF3F                 mov     rdi, rbp        ; s
.text:000000000000CF42                 mov     esi, 30h ; '0'  ; c
.text:000000000000CF47                 call    _memset
.text:000000000000CF4C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000CF51                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000CF57                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000CF5C                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000CF61                 jmp     loc_BEFE
.text:000000000000CF66 ; ---------------------------------------------------------------------------
.text:000000000000CF66
.text:000000000000CF66 loc_CF66:                               ; CODE XREF: __strftime_internal+2C6↑j
.text:000000000000CF66                                         ; __strftime_internal+2D0↑j
.text:000000000000CF66                 mov     rdi, rbp        ; s
.text:000000000000CF69                 mov     esi, 30h ; '0'  ; c
.text:000000000000CF6E                 mov     rbp, rbx
.text:000000000000CF71                 call    _memset
.text:000000000000CF76                 mov     r9, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000CF7B                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000CF80                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000CF85                 jmp     loc_BD25
.text:000000000000CF8A ; ---------------------------------------------------------------------------
.text:000000000000CF8A
.text:000000000000CF8A loc_CF8A:                               ; CODE XREF: __strftime_internal+D1C↑j
.text:000000000000CF8A                                         ; __strftime_internal+D26↑j
.text:000000000000CF8A                 mov     rdi, rbp        ; s
.text:000000000000CF8D                 mov     esi, 30h ; '0'  ; c
.text:000000000000CF92                 call    _memset
.text:000000000000CF97                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000CF9C                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000CFA1                 mov     r8, [rsp+4F8h+var_4B0]
.text:000000000000CFA6                 jmp     loc_C778
.text:000000000000CFAB ; ---------------------------------------------------------------------------
.text:000000000000CFAB
.text:000000000000CFAB loc_CFAB:                               ; CODE XREF: __strftime_internal+64B↑j
.text:000000000000CFAB                 mov     esi, 70h ; 'p'
.text:000000000000CFB0                 mov     byte ptr [rsp+4F8h+var_4C8], 0
.text:000000000000CFB5                 jmp     loc_BDF5
.text:000000000000CFBA ; ---------------------------------------------------------------------------
.text:000000000000CFBA
.text:000000000000CFBA loc_CFBA:                               ; CODE XREF: __strftime_internal+85B↑j
.text:000000000000CFBA                                         ; __strftime_internal+9A1↑j ...
.text:000000000000CFBA                 xor     edi, edi
.text:000000000000CFBC                 jmp     loc_BFBC
.text:000000000000CFC1 ; ---------------------------------------------------------------------------
.text:000000000000CFC1
.text:000000000000CFC1 loc_CFC1:                               ; CODE XREF: __strftime_internal+17ED↓j
.text:000000000000CFC1                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000CFC6
.text:000000000000CFC6 loc_CFC6:                               ; CODE XREF: __strftime_internal+BDB↑j
.text:000000000000CFC6                 movsxd  r15, r12d
.text:000000000000CFC9                 cmp     r15, rdx
.text:000000000000CFCC                 jnb     loc_BAFC
.text:000000000000CFD2                 test    rbp, rbp
.text:000000000000CFD5                 jz      short loc_D008
.text:000000000000CFD7                 mov     rdi, rbp        ; s
.text:000000000000CFDA                 mov     rdx, r15        ; n
.text:000000000000CFDD                 mov     esi, 20h ; ' '  ; c
.text:000000000000CFE2                 mov     dword ptr [rsp+4F8h+var_4A0], r10d
.text:000000000000CFE7                 mov     [rsp+4F8h+var_4A8], r9
.text:000000000000CFEC                 add     rbp, r15
.text:000000000000CFEF                 mov     [rsp+4F8h+var_4B8], r8
.text:000000000000CFF4                 call    _memset
.text:000000000000CFF9                 mov     r10d, dword ptr [rsp+4F8h+var_4A0]
.text:000000000000CFFE                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000D003                 mov     r8, [rsp+4F8h+var_4B8]
.text:000000000000D008
.text:000000000000D008 loc_D008:                               ; CODE XREF: __strftime_internal+15A5↑j
.text:000000000000D008                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000D00D                 mov     eax, r10d
.text:000000000000D010                 add     r14, r15
.text:000000000000D013                 sub     eax, r12d
.text:000000000000D016                 cmp     r10d, r12d
.text:000000000000D019                 mov     r10d, 0
.text:000000000000D01F                 cmovg   r10d, eax
.text:000000000000D023                 sub     rdx, r14
.text:000000000000D026                 cmp     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000D02B                 jnz     loc_D152
.text:000000000000D031                 add     r9, 17h
.text:000000000000D035                 movsxd  r11, r10d
.text:000000000000D038                 mov     r12, rbx
.text:000000000000D03B                 mov     rcx, r9
.text:000000000000D03E                 mov     r15d, 5Fh ; '_'
.text:000000000000D044                 sub     rcx, r8
.text:000000000000D047                 jmp     loc_C705
.text:000000000000D04C ; ---------------------------------------------------------------------------
.text:000000000000D04C
.text:000000000000D04C loc_D04C:                               ; CODE XREF: __strftime_internal+BD1↑j
.text:000000000000D04C                 test    r10d, r10d
.text:000000000000D04F                 mov     r11d, 0
.text:000000000000D055                 mov     r12d, 1
.text:000000000000D05B                 cmovns  r11d, r10d
.text:000000000000D05F                 movsxd  r11, r11d
.text:000000000000D062                 test    r11, r11
.text:000000000000D065                 cmovnz  r12, r11
.text:000000000000D069                 cmp     r12, rdx
.text:000000000000D06C                 jnb     loc_BAFC
.text:000000000000D072                 test    rbp, rbp
.text:000000000000D075                 jz      short loc_D0F0
.text:000000000000D077                 mov     edi, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000D07B                 test    edi, edi
.text:000000000000D07D                 jnz     short loc_D0E4
.text:000000000000D07F                 cmp     r11, 1
.text:000000000000D083                 jbe     short loc_D0E4
.text:000000000000D085                 movsxd  rdx, r10d
.text:000000000000D088                 mov     [rsp+4F8h+var_48C], r10d
.text:000000000000D08D                 mov     [rsp+4F8h+var_498], r8
.text:000000000000D092                 sub     rdx, 1          ; n
.text:000000000000D096                 cmp     r15d, 30h ; '0'
.text:000000000000D09A                 mov     [rsp+4F8h+var_4A0], rcx
.text:000000000000D09F                 lea     rax, [rbp+rdx+0]
.text:000000000000D0A4                 mov     [rsp+4F8h+var_4A8], r11
.text:000000000000D0A9                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000D0AE                 jz      loc_D47F
.text:000000000000D0B4                 cmp     r15d, 2Bh ; '+'
.text:000000000000D0B8                 jz      loc_D47F
.text:000000000000D0BE                 mov     rdi, rbp        ; s
.text:000000000000D0C1                 mov     esi, 20h ; ' '  ; c
.text:000000000000D0C6                 call    _memset
.text:000000000000D0CB                 mov     rbp, [rsp+4F8h+var_4B8]
.text:000000000000D0D0                 mov     r10d, [rsp+4F8h+var_48C]
.text:000000000000D0D5                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000D0DA                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000D0DF                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000D0E4
.text:000000000000D0E4 loc_D0E4:                               ; CODE XREF: __strftime_internal+164D↑j
.text:000000000000D0E4                                         ; __strftime_internal+1653↑j ...
.text:000000000000D0E4                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D0E9                 add     rbp, 1
.text:000000000000D0ED                 mov     [rbp-1], al
.text:000000000000D0F0
.text:000000000000D0F0 loc_D0F0:                               ; CODE XREF: __strftime_internal+1645↑j
.text:000000000000D0F0                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000D0F5                 add     r14, r12
.text:000000000000D0F8                 mov     r12, rbx
.text:000000000000D0FB                 sub     rdx, r14
.text:000000000000D0FE                 jmp     loc_C705
.text:000000000000D103 ; ---------------------------------------------------------------------------
.text:000000000000D103
.text:000000000000D103 loc_D103:                               ; CODE XREF: __strftime_internal+BA9↑j
.text:000000000000D103                 mov     r15d, 2Bh ; '+'
.text:000000000000D109                 jmp     loc_CE57
.text:000000000000D10E ; ---------------------------------------------------------------------------
.text:000000000000D10E
.text:000000000000D10E loc_D10E:                               ; CODE XREF: __strftime_internal+A35↑j
.text:000000000000D10E                 mov     r12, rbx
.text:000000000000D111                 jmp     loc_BB62
.text:000000000000D116 ; ---------------------------------------------------------------------------
.text:000000000000D116
.text:000000000000D116 loc_D116:                               ; CODE XREF: __strftime_internal+FA3↑j
.text:000000000000D116                 mov     eax, 0FFFFF894h
.text:000000000000D11B                 lea     ecx, [rdi+r8+76Ch]
.text:000000000000D123                 sub     eax, r8d
.text:000000000000D126                 cmp     edi, eax
.text:000000000000D128                 setl    byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D12D                 setnl   al
.text:000000000000D130                 test    r15d, r15d
.text:000000000000D133                 jz      loc_C2C0
.text:000000000000D139
.text:000000000000D139 loc_D139:                               ; CODE XREF: __strftime_internal+88A↑j
.text:000000000000D139                 cmp     r15d, 2Bh ; '+'
.text:000000000000D13D                 jnz     loc_C2CF
.text:000000000000D143
.text:000000000000D143 loc_D143:                               ; CODE XREF: __strftime_internal+899↑j
.text:000000000000D143                 mov     edi, 4
.text:000000000000D148                 mov     edx, 270Fh
.text:000000000000D14D                 jmp     loc_CB9D
.text:000000000000D152 ; ---------------------------------------------------------------------------
.text:000000000000D152
.text:000000000000D152 loc_D152:                               ; CODE XREF: __strftime_internal+15FB↑j
.text:000000000000D152                 movsxd  r15, r10d
.text:000000000000D155                 mov     r12d, 1
.text:000000000000D15B                 test    r15, r15
.text:000000000000D15E                 cmovnz  r12, r15
.text:000000000000D162                 cmp     r12, rdx
.text:000000000000D165                 jnb     loc_BAFC
.text:000000000000D16B                 test    rbp, rbp
.text:000000000000D16E                 jz      short loc_D1CB
.text:000000000000D170                 mov     r11d, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000D175                 test    r11d, r11d
.text:000000000000D178                 jnz     short loc_D1BF
.text:000000000000D17A                 cmp     r15, 1
.text:000000000000D17E                 jbe     short loc_D1BF
.text:000000000000D180                 lea     rcx, [r15-1]
.text:000000000000D184                 mov     rdi, rbp        ; s
.text:000000000000D187                 mov     esi, 20h ; ' '  ; c
.text:000000000000D18C                 mov     dword ptr [rsp+4F8h+var_498], r10d
.text:000000000000D191                 mov     [rsp+4F8h+var_4A0], r9
.text:000000000000D196                 mov     rdx, rcx        ; n
.text:000000000000D199                 mov     [rsp+4F8h+var_4A8], r8
.text:000000000000D19E                 mov     [rsp+4F8h+var_4B8], rcx
.text:000000000000D1A3                 call    _memset
.text:000000000000D1A8                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000D1AD                 mov     r10d, dword ptr [rsp+4F8h+var_498]
.text:000000000000D1B2                 mov     r9, [rsp+4F8h+var_4A0]
.text:000000000000D1B7                 mov     r8, [rsp+4F8h+var_4A8]
.text:000000000000D1BC                 add     rbp, rcx
.text:000000000000D1BF
.text:000000000000D1BF loc_D1BF:                               ; CODE XREF: __strftime_internal+1748↑j
.text:000000000000D1BF                                         ; __strftime_internal+174E↑j
.text:000000000000D1BF                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D1C4                 add     rbp, 1
.text:000000000000D1C8                 mov     [rbp-1], al
.text:000000000000D1CB
.text:000000000000D1CB loc_D1CB:                               ; CODE XREF: __strftime_internal+173E↑j
.text:000000000000D1CB                 mov     rdx, [rsp+4F8h+var_4F0]
.text:000000000000D1D0                 add     r9, 17h
.text:000000000000D1D4                 add     r14, r12
.text:000000000000D1D7                 mov     rcx, r9
.text:000000000000D1DA                 mov     r11, r15
.text:000000000000D1DD                 mov     r12, rbx
.text:000000000000D1E0                 sub     rcx, r8
.text:000000000000D1E3                 mov     r15d, 5Fh ; '_'
.text:000000000000D1E9                 sub     rdx, r14
.text:000000000000D1EC                 jmp     loc_C705
.text:000000000000D1F1 ; ---------------------------------------------------------------------------
.text:000000000000D1F1
.text:000000000000D1F1 loc_D1F1:                               ; CODE XREF: __strftime_internal+1270↑j
.text:000000000000D1F1                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000D1F8                 mov     edi, 9
.text:000000000000D1FD                 mov     r10d, 9
.text:000000000000D203                 jmp     loc_BF90
.text:000000000000D208 ; ---------------------------------------------------------------------------
.text:000000000000D208
.text:000000000000D208 loc_D208:                               ; CODE XREF: __strftime_internal+7A3↑j
.text:000000000000D208                 mov     r12, rbx
.text:000000000000D20B                 mov     r9, rbx
.text:000000000000D20E                 mov     r8d, 1
.text:000000000000D214                 jmp     loc_BCC1
.text:000000000000D219 ; ---------------------------------------------------------------------------
.text:000000000000D219
.text:000000000000D219 loc_D219:                               ; CODE XREF: __strftime_internal+E59↑j
.text:000000000000D219                 cmp     r15d, 5Fh ; '_'
.text:000000000000D21D                 jz      loc_CFC1
.text:000000000000D223                 movsxd  rax, dword ptr [rsp+4F8h+var_4B0]
.text:000000000000D228                 cmp     rax, rdx
.text:000000000000D22B                 jnb     loc_BAFC
.text:000000000000D231                 movsxd  r9, r12d
.text:000000000000D234                 mov     r12, rbx
.text:000000000000D237                 jmp     loc_C6BE
.text:000000000000D23C ; ---------------------------------------------------------------------------
.text:000000000000D23C
.text:000000000000D23C loc_D23C:                               ; CODE XREF: __strftime_internal+70F↑j
.text:000000000000D23C                                         ; __strftime_internal+719↑j
.text:000000000000D23C                 mov     rdi, rbp        ; s
.text:000000000000D23F                 mov     esi, 30h ; '0'  ; c
.text:000000000000D244                 call    _memset
.text:000000000000D249                 mov     rbp, [rsp+4F8h+var_4A8]
.text:000000000000D24E                 mov     r11, [rsp+4F8h+var_4A0]
.text:000000000000D253                 jmp     loc_C166
.text:000000000000D258 ; ---------------------------------------------------------------------------
.text:000000000000D258
.text:000000000000D258 loc_D258:                               ; CODE XREF: __strftime_internal+F01↑j
.text:000000000000D258                 sub     r12d, 1
.text:000000000000D25C                 mov     edx, 16Dh
.text:000000000000D261                 test    r12b, 3
.text:000000000000D265                 jnz     short loc_D2A3
.text:000000000000D267                 mov     eax, r12d
.text:000000000000D26A                 mov     edx, 51EB851Fh
.text:000000000000D26F                 imul    edx
.text:000000000000D271                 mov     eax, edx
.text:000000000000D273                 mov     edx, r12d
.text:000000000000D276                 sar     edx, 1Fh
.text:000000000000D279                 sar     eax, 5
.text:000000000000D27C                 sub     eax, edx
.text:000000000000D27E                 mov     edx, 16Eh
.text:000000000000D283                 imul    eax, 64h ; 'd'
.text:000000000000D286                 cmp     r12d, eax
.text:000000000000D289                 jnz     short loc_D2A3
.text:000000000000D28B                 mov     eax, r12d
.text:000000000000D28E                 mov     ecx, 190h
.text:000000000000D293                 cdq
.text:000000000000D294                 idiv    ecx
.text:000000000000D296                 cmp     edx, 1
.text:000000000000D299                 sbb     edx, edx
.text:000000000000D29B                 not     edx
.text:000000000000D29D                 add     edx, 16Eh
.text:000000000000D2A3
.text:000000000000D2A3 loc_D2A3:                               ; CODE XREF: __strftime_internal+1835↑j
.text:000000000000D2A3                                         ; __strftime_internal+1859↑j
.text:000000000000D2A3                 add     r8d, edx
.text:000000000000D2A6                 mov     edx, 92492493h
.text:000000000000D2AB                 mov     ecx, r8d
.text:000000000000D2AE                 sub     ecx, [rsp+4F8h+var_4C0]
.text:000000000000D2B2                 add     ecx, 17Eh
.text:000000000000D2B8                 mov     eax, ecx
.text:000000000000D2BA                 sub     r8d, ecx
.text:000000000000D2BD                 imul    edx
.text:000000000000D2BF                 lea     eax, [rdx+rcx]
.text:000000000000D2C2                 mov     edx, ecx
.text:000000000000D2C4                 sar     edx, 1Fh
.text:000000000000D2C7                 sar     eax, 2
.text:000000000000D2CA                 sub     eax, edx
.text:000000000000D2CC                 lea     edx, ds:0[rax*8]
.text:000000000000D2D3                 sub     edx, eax
.text:000000000000D2D5                 lea     ecx, [r8+rdx+3]
.text:000000000000D2DA                 mov     r8d, 0FFFFFFFFh
.text:000000000000D2E0                 jmp     loc_C9CF
.text:000000000000D2E5 ; ---------------------------------------------------------------------------
.text:000000000000D2E5
.text:000000000000D2E5 loc_D2E5:                               ; CODE XREF: __strftime_internal+ABF↑j
.text:000000000000D2E5                                         ; __strftime_internal+AD1↑j
.text:000000000000D2E5                 imul    esi, 64h ; 'd'
.text:000000000000D2E8                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000D2ED                 mov     edi, 9
.text:000000000000D2F2                 imul    eax, r12d, 2710h
.text:000000000000D2F9                 add     eax, esi
.text:000000000000D2FB                 mov     esi, 14h
.text:000000000000D300                 add     ecx, eax
.text:000000000000D302                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D307                 xor     eax, 1
.text:000000000000D30A                 jmp     loc_BFA7
.text:000000000000D30F ; ---------------------------------------------------------------------------
.text:000000000000D30F
.text:000000000000D30F loc_D30F:                               ; CODE XREF: __strftime_internal+FAD↑j
.text:000000000000D30F                 mov     eax, ecx
.text:000000000000D311                 mov     edx, 92492493h
.text:000000000000D316                 mov     edi, 2
.text:000000000000D31B                 imul    edx
.text:000000000000D31D                 lea     eax, [rdx+rcx]
.text:000000000000D320                 sar     ecx, 1Fh
.text:000000000000D323                 sar     eax, 2
.text:000000000000D326                 sub     eax, ecx
.text:000000000000D328                 mov     ecx, eax
.text:000000000000D32A                 add     ecx, 1
.text:000000000000D32D                 jmp     loc_BF90
.text:000000000000D332 ; ---------------------------------------------------------------------------
.text:000000000000D332
.text:000000000000D332 loc_D332:                               ; CODE XREF: __strftime_internal+AAF↑j
.text:000000000000D332                                         ; __strftime_internal+AD9↑j
.text:000000000000D332                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D337                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000D33C                 mov     edi, 6
.text:000000000000D341                 imul    ecx, r12d, 64h ; 'd'
.text:000000000000D345                 xor     eax, 1
.text:000000000000D348                 add     ecx, esi
.text:000000000000D34A                 mov     esi, 4
.text:000000000000D34F                 jmp     loc_BFA7
.text:000000000000D354 ; ---------------------------------------------------------------------------
.text:000000000000D354
.text:000000000000D354 loc_D354:                               ; CODE XREF: __strftime_internal+607↑j
.text:000000000000D354                                         ; __strftime_internal+611↑j
.text:000000000000D354                 mov     rdi, rbp        ; s
.text:000000000000D357                 mov     esi, 30h ; '0'  ; c
.text:000000000000D35C                 mov     rbp, r12
.text:000000000000D35F                 call    _memset
.text:000000000000D364                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000D369                 jmp     loc_C05C
.text:000000000000D36E ; ---------------------------------------------------------------------------
.text:000000000000D36E
.text:000000000000D36E loc_D36E:                               ; CODE XREF: __strftime_internal+136D↑j
.text:000000000000D36E                                         ; __strftime_internal+1377↑j
.text:000000000000D36E                 mov     rdi, rbp        ; s
.text:000000000000D371                 mov     esi, 30h ; '0'  ; c
.text:000000000000D376                 mov     rbp, r12
.text:000000000000D379                 call    _memset
.text:000000000000D37E                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000D383                 jmp     loc_CDC2
.text:000000000000D388 ; ---------------------------------------------------------------------------
.text:000000000000D388
.text:000000000000D388 loc_D388:                               ; CODE XREF: __strftime_internal+985↑j
.text:000000000000D388                 call    _memcpy
.text:000000000000D38D                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000D392                 jmp     loc_C3C5
.text:000000000000D397 ; ---------------------------------------------------------------------------
.text:000000000000D397
.text:000000000000D397 loc_D397:                               ; CODE XREF: __strftime_internal+96A↑j
.text:000000000000D397                 mov     rsi, [rsp+4F8h+var_4D8]
.text:000000000000D39C                 mov     rdx, r12
.text:000000000000D39F                 mov     rdi, rbp
.text:000000000000D3A2                 mov     [rsp+4F8h+var_4C8], rcx
.text:000000000000D3A7                 call    memcpy_lowcase
.text:000000000000D3AC                 mov     rcx, [rsp+4F8h+var_4C8]
.text:000000000000D3B1                 jmp     loc_C3C5
.text:000000000000D3B6 ; ---------------------------------------------------------------------------
.text:000000000000D3B6
.text:000000000000D3B6 loc_D3B6:                               ; CODE XREF: __strftime_internal+A17↑j
.text:000000000000D3B6                 mov     byte ptr [rsp+4F8h+var_4C8], al
.text:000000000000D3BA                 jmp     def_BC3F        ; jumptable 000000000000BC3F default case, cases 1-36,38-57,59-64,69,74-76,79,81,91-96,102,105,111,118
.text:000000000000D3BF ; ---------------------------------------------------------------------------
.text:000000000000D3BF
.text:000000000000D3BF loc_D3BF:                               ; CODE XREF: __strftime_internal+AC9↑j
.text:000000000000D3BF                 movzx   ecx, byte ptr [rbx]
.text:000000000000D3C2                 mov     r9, rbx
.text:000000000000D3C5                 jmp     loc_CC29
.text:000000000000D3CA ; ---------------------------------------------------------------------------
.text:000000000000D3CA
.text:000000000000D3CA loc_D3CA:                               ; CODE XREF: __strftime_internal+E81↑j
.text:000000000000D3CA                 lea     rcx, [rbx+2]
.text:000000000000D3CE                 mov     r8d, 1
.text:000000000000D3D4
.text:000000000000D3D4 loc_D3D4:                               ; CODE XREF: __strftime_internal+19BB↓j
.text:000000000000D3D4                 mov     rdx, rcx
.text:000000000000D3D7                 add     rcx, 1
.text:000000000000D3DB                 movzx   eax, byte ptr [rcx-1]
.text:000000000000D3DF                 add     r8, 1
.text:000000000000D3E3                 cmp     al, 3Ah ; ':'
.text:000000000000D3E5                 jnz     loc_C8BD
.text:000000000000D3EB                 jmp     short loc_D3D4
.text:000000000000D3ED ; ---------------------------------------------------------------------------
.text:000000000000D3ED
.text:000000000000D3ED loc_D3ED:                               ; CODE XREF: __strftime_internal+11C3↑j
.text:000000000000D3ED                                         ; __strftime_internal+11CC↑j
.text:000000000000D3ED                 mov     esi, r10d
.text:000000000000D3F0                 mov     eax, 0
.text:000000000000D3F5                 sub     esi, 6
.text:000000000000D3F8                 cmovns  eax, esi
.text:000000000000D3FB                 mov     [rsp+4F8h+var_4C0], eax
.text:000000000000D3FF                 lea     rax, aYMD       ; "%Y-%m-%d"
.text:000000000000D406                 mov     [rsp+4F8h+var_4B8], rax
.text:000000000000D40B                 jmp     loc_C0A2
.text:000000000000D410 ; ---------------------------------------------------------------------------
.text:000000000000D410
.text:000000000000D410 loc_D410:                               ; CODE XREF: __strftime_internal+AB5↑j
.text:000000000000D410                 imul    ecx, r12d, 64h ; 'd'
.text:000000000000D414                 xor     esi, esi
.text:000000000000D416                 mov     byte ptr [rsp+4F8h+var_4B8], 1
.text:000000000000D41B                 mov     edi, 5
.text:000000000000D420                 add     ecx, eax
.text:000000000000D422                 movzx   eax, byte ptr [rsp+4F8h+var_4C0]
.text:000000000000D427                 xor     eax, 1
.text:000000000000D42A                 jmp     loc_BFA7
.text:000000000000D42F ; ---------------------------------------------------------------------------
.text:000000000000D42F
.text:000000000000D42F loc_D42F:                               ; CODE XREF: __strftime_internal+93A↑j
.text:000000000000D42F                                         ; __strftime_internal+944↑j
.text:000000000000D42F                 mov     rdi, rbp        ; s
.text:000000000000D432                 mov     esi, 30h ; '0'  ; c
.text:000000000000D437                 call    _memset
.text:000000000000D43C                 mov     rbp, qword ptr [rsp+4F8h+var_4C0]
.text:000000000000D441                 movzx   r8d, byte ptr [rsp+4F8h+var_4B8]
.text:000000000000D447                 mov     rcx, [rsp+4F8h+var_4B0]
.text:000000000000D44C                 jmp     loc_C397
.text:000000000000D451 ; ---------------------------------------------------------------------------
.text:000000000000D451
.text:000000000000D451 loc_D451:                               ; CODE XREF: __strftime_internal+C50↑j
.text:000000000000D451                                         ; __strftime_internal+C5A↑j
.text:000000000000D451                 mov     rdi, rbp        ; s
.text:000000000000D454                 mov     esi, 30h ; '0'  ; c
.text:000000000000D459                 mov     rbp, r12
.text:000000000000D45C                 call    _memset
.text:000000000000D461                 mov     rcx, [rsp+4F8h+var_4B8]
.text:000000000000D466                 mov     r9, [rsp+4F8h+var_4A8]
.text:000000000000D46B                 mov     r8, [rsp+4F8h+var_4A0]
.text:000000000000D470                 jmp     loc_C6AF
.text:000000000000D475 ; ---------------------------------------------------------------------------
.text:000000000000D475
.text:000000000000D475 loc_D475:                               ; CODE XREF: __strftime_internal+7D6↑j
.text:000000000000D475                                         ; __strftime_internal+7E5↑j
.text:000000000000D475                 mov     esi, 30h ; '0'
.text:000000000000D47A                 jmp     loc_C21B
.text:000000000000D47F ; ---------------------------------------------------------------------------
.text:000000000000D47F
.text:000000000000D47F loc_D47F:                               ; CODE XREF: __strftime_internal+167E↑j
.text:000000000000D47F                                         ; __strftime_internal+1688↑j
.text:000000000000D47F                 mov     rdi, rbp        ; s
.text:000000000000D482                 mov     esi, 30h ; '0'  ; c
.text:000000000000D487                 call    _memset
.text:000000000000D48C                 mov     rbp, [rsp+4F8h+var_4B8]
.text:000000000000D491                 mov     r11, [rsp+4F8h+var_4A8]
.text:000000000000D496                 mov     rcx, [rsp+4F8h+var_4A0]
.text:000000000000D49B                 mov     r8, [rsp+4F8h+var_498]
.text:000000000000D4A0                 mov     r10d, [rsp+4F8h+var_48C]
.text:000000000000D4A5                 jmp     loc_D0E4
.text:000000000000D4AA ; ---------------------------------------------------------------------------
.text:000000000000D4AA
.text:000000000000D4AA loc_D4AA:                               ; CODE XREF: __strftime_internal+1018↑j
.text:000000000000D4AA                 mov     byte ptr [rsp+4F8h+var_4C0], 0
.text:000000000000D4AF                 mov     edi, 2
.text:000000000000D4B4                 jmp     loc_CBB0
.text:000000000000D4B9 ; ---------------------------------------------------------------------------
.text:000000000000D4B9
.text:000000000000D4B9 loc_D4B9:                               ; CODE XREF: __strftime_internal+127A↑j
.text:000000000000D4B9                 mov     ecx, [rsp+4F8h+arg_18]
.text:000000000000D4C0                 jmp     loc_CCD6
.text:000000000000D4C5 ; ---------------------------------------------------------------------------
.text:000000000000D4C5
.text:000000000000D4C5 loc_D4C5:                               ; CODE XREF: __strftime_internal+E3↑j
.text:000000000000D4C5                 call    ___stack_chk_fail
.text:000000000000D4CA ; ---------------------------------------------------------------------------
.text:000000000000D4CA
.text:000000000000D4CA loc_D4CA:                               ; CODE XREF: __strftime_internal+FF9↑j
.text:000000000000D4CA                 add     ecx, 64h ; 'd'
.text:000000000000D4CD                 test    r15d, r15d
.text:000000000000D4D0                 jz      loc_CA3A
.text:000000000000D4D6                 jmp     loc_C412
.text:000000000000D4DB ; ---------------------------------------------------------------------------
.text:000000000000D4DB
.text:000000000000D4DB loc_D4DB:                               ; CODE XREF: __strftime_internal+3D5↑j
.text:000000000000D4DB                 xor     edi, edi
.text:000000000000D4DD                 jmp     loc_BFCC
.text:000000000000D4DD ; } // starts at BA30
.text:000000000000D4DD __strftime_internal endp
.text:000000000000D4DD
.text:000000000000D4DD ; ---------------------------------------------------------------------------
.text:000000000000D4E2                 align 10h
.text:000000000000D4F0
.text:000000000000D4F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D4F0
.text:000000000000D4F0
.text:000000000000D4F0                 public nstrftime
.text:000000000000D4F0 nstrftime       proc near               ; CODE XREF: debug_strfdatetime_constprop_12+36↑p
.text:000000000000D4F0
.text:000000000000D4F0 var_11          = qword ptr -11h
.text:000000000000D4F0
.text:000000000000D4F0 ; __unwind {
.text:000000000000D4F0                 sub     rsp, 18h
.text:000000000000D4F4                 mov     rax, fs:28h
.text:000000000000D4FD                 mov     [rsp+18h+var_11+1], rax
.text:000000000000D502                 xor     eax, eax
.text:000000000000D504                 mov     byte ptr [rsp+18h+var_11], 0
.text:000000000000D509                 push    r9              ; int
.text:000000000000D50B                 xor     r9d, r9d
.text:000000000000D50E                 push    r8              ; __int64
.text:000000000000D510                 xor     r8d, r8d
.text:000000000000D513                 lea     rax, [rsp+28h+var_11]
.text:000000000000D518                 push    rax             ; __int64
.text:000000000000D519                 push    0FFFFFFFFFFFFFFFFh ; int
.text:000000000000D51B                 call    __strftime_internal
.text:000000000000D520                 add     rsp, 20h
.text:000000000000D524                 mov     rdx, [rsp+18h+var_11+1]
.text:000000000000D529                 xor     rdx, fs:28h
.text:000000000000D532                 jnz     short loc_D539
.text:000000000000D534                 add     rsp, 18h
.text:000000000000D538                 retn
.text:000000000000D539 ; ---------------------------------------------------------------------------
.text:000000000000D539
.text:000000000000D539 loc_D539:                               ; CODE XREF: nstrftime+42↑j
.text:000000000000D539                 call    ___stack_chk_fail
.text:000000000000D539 ; } // starts at D4F0
.text:000000000000D539 nstrftime       endp
.text:000000000000D539
.text:000000000000D539 ; ---------------------------------------------------------------------------
.text:000000000000D53E                 align 20h
.text:000000000000D540
.text:000000000000D540 ; =============== S U B R O U T I N E =======================================
.text:000000000000D540
.text:000000000000D540 ; Attributes: info_from_lumina
.text:000000000000D540
.text:000000000000D540 ; int __fastcall rpl_fclose(FILE *fp)
.text:000000000000D540                 public rpl_fclose
.text:000000000000D540 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:000000000000D540 ; __unwind {
.text:000000000000D540                 push    r12
.text:000000000000D542                 push    rbp
.text:000000000000D543                 push    rbx
.text:000000000000D544                 mov     rbx, rdi
.text:000000000000D547                 call    _fileno
.text:000000000000D54C                 test    eax, eax
.text:000000000000D54E                 mov     rdi, rbx        ; fp
.text:000000000000D551                 js      short loc_D5A7
.text:000000000000D553                 call    ___freading
.text:000000000000D558                 test    eax, eax
.text:000000000000D55A                 jnz     short loc_D588
.text:000000000000D55C
.text:000000000000D55C loc_D55C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000D55C                 mov     rdi, rbx        ; stream
.text:000000000000D55F                 call    rpl_fflush
.text:000000000000D564                 test    eax, eax
.text:000000000000D566                 jz      short loc_D5A4
.text:000000000000D568                 call    ___errno_location
.text:000000000000D56D                 mov     r12d, [rax]
.text:000000000000D570                 mov     rdi, rbx        ; stream
.text:000000000000D573                 mov     rbp, rax
.text:000000000000D576                 call    _fclose
.text:000000000000D57B                 test    r12d, r12d
.text:000000000000D57E                 jnz     short loc_D5B0
.text:000000000000D580
.text:000000000000D580 loc_D580:                               ; CODE XREF: rpl_fclose+79↓j
.text:000000000000D580                 pop     rbx
.text:000000000000D581                 pop     rbp
.text:000000000000D582                 pop     r12
.text:000000000000D584                 retn
.text:000000000000D584 ; ---------------------------------------------------------------------------
.text:000000000000D585                 align 8
.text:000000000000D588
.text:000000000000D588 loc_D588:                               ; CODE XREF: rpl_fclose+1A↑j
.text:000000000000D588                 mov     rdi, rbx        ; stream
.text:000000000000D58B                 call    _fileno
.text:000000000000D590                 xor     esi, esi        ; offset
.text:000000000000D592                 mov     edx, 1          ; whence
.text:000000000000D597                 mov     edi, eax        ; fd
.text:000000000000D599                 call    _lseek
.text:000000000000D59E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D5A2                 jnz     short loc_D55C
.text:000000000000D5A4
.text:000000000000D5A4 loc_D5A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:000000000000D5A4                 mov     rdi, rbx        ; stream
.text:000000000000D5A7
.text:000000000000D5A7 loc_D5A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:000000000000D5A7                 pop     rbx
.text:000000000000D5A8                 pop     rbp
.text:000000000000D5A9                 pop     r12
.text:000000000000D5AB                 jmp     _fclose
.text:000000000000D5B0 ; ---------------------------------------------------------------------------
.text:000000000000D5B0
.text:000000000000D5B0 loc_D5B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:000000000000D5B0                 mov     [rbp+0], r12d
.text:000000000000D5B4                 mov     eax, 0FFFFFFFFh
.text:000000000000D5B9                 jmp     short loc_D580
.text:000000000000D5B9 ; } // starts at D540
.text:000000000000D5B9 rpl_fclose      endp
.text:000000000000D5B9
.text:000000000000D5B9 ; ---------------------------------------------------------------------------
.text:000000000000D5BB                 align 20h
.text:000000000000D5C0
.text:000000000000D5C0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D5C0
.text:000000000000D5C0 ; Attributes: info_from_lumina
.text:000000000000D5C0
.text:000000000000D5C0 ; int __fastcall rpl_fflush(FILE *stream)
.text:000000000000D5C0                 public rpl_fflush
.text:000000000000D5C0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:000000000000D5C0 ; __unwind {
.text:000000000000D5C0                 test    rdi, rdi
.text:000000000000D5C3                 push    rbx
.text:000000000000D5C4                 mov     rbx, rdi
.text:000000000000D5C7                 jz      short loc_D5DA
.text:000000000000D5C9                 call    ___freading
.text:000000000000D5CE                 test    eax, eax
.text:000000000000D5D0                 jz      short loc_D5DA
.text:000000000000D5D2                 test    dword ptr [rbx], 100h
.text:000000000000D5D8                 jnz     short loc_D5E8
.text:000000000000D5DA
.text:000000000000D5DA loc_D5DA:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000D5DA                                         ; rpl_fflush+10↑j
.text:000000000000D5DA                 mov     rdi, rbx        ; stream
.text:000000000000D5DD                 pop     rbx
.text:000000000000D5DE                 jmp     _fflush
.text:000000000000D5DE ; ---------------------------------------------------------------------------
.text:000000000000D5E3                 align 8
.text:000000000000D5E8
.text:000000000000D5E8 loc_D5E8:                               ; CODE XREF: rpl_fflush+18↑j
.text:000000000000D5E8                 mov     rdi, rbx
.text:000000000000D5EB                 mov     edx, 1
.text:000000000000D5F0                 xor     esi, esi
.text:000000000000D5F2                 call    rpl_fseeko
.text:000000000000D5F7                 mov     rdi, rbx        ; stream
.text:000000000000D5FA                 pop     rbx
.text:000000000000D5FB                 jmp     _fflush
.text:000000000000D5FB ; } // starts at D5C0
.text:000000000000D5FB rpl_fflush      endp
.text:000000000000D5FB
.text:000000000000D600
.text:000000000000D600 ; =============== S U B R O U T I N E =======================================
.text:000000000000D600
.text:000000000000D600 ; Attributes: info_from_lumina
.text:000000000000D600
.text:000000000000D600 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:000000000000D600                 public rpl_fseeko
.text:000000000000D600 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:000000000000D600 ; __unwind {
.text:000000000000D600                 mov     rax, [rdi+8]
.text:000000000000D604                 cmp     [rdi+10h], rax
.text:000000000000D608                 jz      short loc_D610
.text:000000000000D60A
.text:000000000000D60A loc_D60A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000D60A                                         ; rpl_fseeko+1F↓j
.text:000000000000D60A                 jmp     _fseeko
.text:000000000000D60A ; ---------------------------------------------------------------------------
.text:000000000000D60F                 align 10h
.text:000000000000D610
.text:000000000000D610 loc_D610:                               ; CODE XREF: rpl_fseeko+8↑j
.text:000000000000D610                 mov     rax, [rdi+20h]
.text:000000000000D614                 cmp     [rdi+28h], rax
.text:000000000000D618                 jnz     short loc_D60A
.text:000000000000D61A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000D61F                 jnz     short loc_D60A
.text:000000000000D621                 push    r12
.text:000000000000D623                 push    rbp
.text:000000000000D624                 mov     r12d, edx
.text:000000000000D627                 push    rbx
.text:000000000000D628                 mov     rbp, rsi
.text:000000000000D62B                 mov     rbx, rdi
.text:000000000000D62E                 call    _fileno
.text:000000000000D633                 mov     edx, r12d       ; whence
.text:000000000000D636                 mov     rsi, rbp        ; offset
.text:000000000000D639                 mov     edi, eax        ; fd
.text:000000000000D63B                 call    _lseek
.text:000000000000D640                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D644                 jz      short loc_D652
.text:000000000000D646                 and     dword ptr [rbx], 0FFFFFFEFh
.text:000000000000D649                 mov     [rbx+90h], rax
.text:000000000000D650                 xor     eax, eax
.text:000000000000D652
.text:000000000000D652 loc_D652:                               ; CODE XREF: rpl_fseeko+44↑j
.text:000000000000D652                 pop     rbx
.text:000000000000D653                 pop     rbp
.text:000000000000D654                 pop     r12
.text:000000000000D656                 retn
.text:000000000000D656 ; } // starts at D600
.text:000000000000D656 rpl_fseeko      endp
.text:000000000000D656
.text:000000000000D656 ; ---------------------------------------------------------------------------
.text:000000000000D657                 align 20h
.text:000000000000D660
.text:000000000000D660 ; =============== S U B R O U T I N E =======================================
.text:000000000000D660
.text:000000000000D660
.text:000000000000D660                 public fseterr
.text:000000000000D660 fseterr         proc near               ; CODE XREF: rpl_vfprintf+E6↑p
.text:000000000000D660 ; __unwind {
.text:000000000000D660                 or      dword ptr [rdi], 20h
.text:000000000000D663                 retn
.text:000000000000D663 ; } // starts at D660
.text:000000000000D663 fseterr         endp
.text:000000000000D663
.text:000000000000D663 ; ---------------------------------------------------------------------------
.text:000000000000D664                 align 10h
.text:000000000000D670
.text:000000000000D670 ; =============== S U B R O U T I N E =======================================
.text:000000000000D670
.text:000000000000D670 ; Attributes: bp-based frame
.text:000000000000D670
.text:000000000000D670                 public vasnprintf
.text:000000000000D670 vasnprintf      proc near               ; CODE XREF: rpl_vfprintf+42↑p
.text:000000000000D670
.text:000000000000D670 var_450         = tbyte ptr -450h
.text:000000000000D670 var_440         = tbyte ptr -440h
.text:000000000000D670 var_430         = qword ptr -430h
.text:000000000000D670 var_421         = byte ptr -421h
.text:000000000000D670 ptr             = qword ptr -420h
.text:000000000000D670 var_418         = qword ptr -418h
.text:000000000000D670 var_410         = qword ptr -410h
.text:000000000000D670 var_408         = qword ptr -408h
.text:000000000000D670 var_400         = qword ptr -400h
.text:000000000000D670 var_3F8         = qword ptr -3F8h
.text:000000000000D670 var_3F0         = qword ptr -3F0h
.text:000000000000D670 src             = qword ptr -3E8h
.text:000000000000D670 var_3E0         = qword ptr -3E0h
.text:000000000000D670 var_3D8         = qword ptr -3D8h
.text:000000000000D670 var_3D0         = qword ptr -3D0h
.text:000000000000D670 n               = qword ptr -3C8h
.text:000000000000D670 var_3BC         = dword ptr -3BCh
.text:000000000000D670 var_3B8         = dword ptr -3B8h
.text:000000000000D670 var_3B4         = dword ptr -3B4h
.text:000000000000D670 var_3B0         = byte ptr -3B0h
.text:000000000000D670 var_3A8         = qword ptr -3A8h
.text:000000000000D670 var_2C0         = qword ptr -2C0h
.text:000000000000D670 var_2B8         = qword ptr -2B8h
.text:000000000000D670 var_2B0         = qword ptr -2B0h
.text:000000000000D670 var_2A8         = qword ptr -2A8h
.text:000000000000D670 var_38          = qword ptr -38h
.text:000000000000D670
.text:000000000000D670 ; __unwind {
.text:000000000000D670                 push    rbp
.text:000000000000D671                 mov     rbp, rsp
.text:000000000000D674                 push    r15
.text:000000000000D676                 push    r14
.text:000000000000D678                 push    r13
.text:000000000000D67A                 push    r12
.text:000000000000D67C                 lea     r14, [rbp+var_3B0]
.text:000000000000D683                 push    rbx
.text:000000000000D684                 mov     rbx, rdx
.text:000000000000D687                 mov     r12, rcx
.text:000000000000D68A                 mov     rdx, r14
.text:000000000000D68D                 sub     rsp, 408h
.text:000000000000D694                 mov     [rbp+var_418], rsi
.text:000000000000D69B                 lea     rsi, [rbp+var_2C0]
.text:000000000000D6A2                 mov     [rbp+src], rdi
.text:000000000000D6A9                 mov     rdi, rbx
.text:000000000000D6AC                 mov     [rbp+var_410], r14
.text:000000000000D6B3                 mov     rax, fs:28h
.text:000000000000D6BC                 mov     [rbp+var_38], rax
.text:000000000000D6C0                 xor     eax, eax
.text:000000000000D6C2                 mov     [rbp+var_408], rsi
.text:000000000000D6C9                 call    printf_parse
.text:000000000000D6CE                 test    eax, eax
.text:000000000000D6D0                 js      loc_E538
.text:000000000000D6D6                 mov     rsi, r14
.text:000000000000D6D9                 mov     rdi, r12
.text:000000000000D6DC                 call    printf_fetchargs
.text:000000000000D6E1                 test    eax, eax
.text:000000000000D6E3                 js      loc_E5A0
.text:000000000000D6E9                 mov     rax, [rbp+var_2B0]
.text:000000000000D6F0                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000D6F7                 add     rax, 7
.text:000000000000D6FB                 cmp     rax, 6
.text:000000000000D6FF                 cmovbe  rax, rdx
.text:000000000000D703                 add     rax, [rbp+var_2A8]
.text:000000000000D70A                 jb      loc_E138
.text:000000000000D710                 mov     rdi, rax
.text:000000000000D713                 xor     r8d, r8d
.text:000000000000D716                 add     rdi, 6          ; size
.text:000000000000D71A                 setb    r8b
.text:000000000000D71E                 jb      loc_E138
.text:000000000000D724                 cmp     rdi, 0F9Fh
.text:000000000000D72B                 jbe     loc_D878
.text:000000000000D731                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000D735                 mov     [rbp+n], r8
.text:000000000000D73C                 jz      loc_E138
.text:000000000000D742                 call    _malloc
.text:000000000000D747                 test    rax, rax
.text:000000000000D74A                 mov     [rbp+var_3D8], rax
.text:000000000000D751                 jz      loc_E138
.text:000000000000D757                 mov     r8, [rbp+n]
.text:000000000000D75E                 mov     [rbp+ptr], rax
.text:000000000000D765
.text:000000000000D765 loc_D765:                               ; CODE XREF: vasnprintf+22E↓j
.text:000000000000D765                 xor     r12d, r12d
.text:000000000000D768                 cmp     [rbp+src], 0
.text:000000000000D770                 jz      short loc_D77C
.text:000000000000D772                 mov     rax, [rbp+var_418]
.text:000000000000D779                 mov     r12, [rax]
.text:000000000000D77C
.text:000000000000D77C loc_D77C:                               ; CODE XREF: vasnprintf+100↑j
.text:000000000000D77C                 mov     r13, [rbp+var_2B8]
.text:000000000000D783                 lea     rax, [rbp+var_3BC]
.text:000000000000D78A                 mov     r15, [rbp+src]
.text:000000000000D791                 mov     [rbp+var_400], 0
.text:000000000000D79C                 mov     [rbp+var_3F0], rax
.text:000000000000D7A3                 mov     rax, rbx
.text:000000000000D7A6                 mov     rbx, r8
.text:000000000000D7A9                 mov     rcx, [r13+0]
.text:000000000000D7AD                 mov     r8, rax
.text:000000000000D7B0                 cmp     rcx, r8
.text:000000000000D7B3                 jz      loc_E121
.text:000000000000D7B9
.text:000000000000D7B9 loc_D7B9:                               ; CODE XREF: vasnprintf+AAB↓j
.text:000000000000D7B9                 sub     rcx, r8
.text:000000000000D7BC                 mov     rax, rbx
.text:000000000000D7BF                 add     rax, rcx
.text:000000000000D7C2                 mov     r14, rax
.text:000000000000D7C5                 jnb     loc_D8A8
.text:000000000000D7CB                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000D7CF                 jz      loc_E2A0
.text:000000000000D7D5
.text:000000000000D7D5 loc_D7D5:                               ; CODE XREF: vasnprintf+4E2↓j
.text:000000000000D7D5                                         ; vasnprintf+A86↓j ...
.text:000000000000D7D5                 call    ___errno_location
.text:000000000000D7DA                 mov     [rbp+n], rax
.text:000000000000D7E1
.text:000000000000D7E1 loc_D7E1:                               ; CODE XREF: vasnprintf+640↓j
.text:000000000000D7E1                                         ; vasnprintf+652↓j ...
.text:000000000000D7E1                 cmp     r15, [rbp+src]
.text:000000000000D7E8                 jz      short loc_D7F3
.text:000000000000D7EA                 test    r15, r15
.text:000000000000D7ED                 jnz     loc_E2D0
.text:000000000000D7F3
.text:000000000000D7F3 loc_D7F3:                               ; CODE XREF: vasnprintf+178↑j
.text:000000000000D7F3                                         ; vasnprintf+C68↓j
.text:000000000000D7F3                 mov     rax, [rbp+ptr]
.text:000000000000D7FA                 test    rax, rax
.text:000000000000D7FD                 jz      short loc_D807
.text:000000000000D7FF                 mov     rdi, rax        ; ptr
.text:000000000000D802                 call    _free
.text:000000000000D807
.text:000000000000D807 loc_D807:                               ; CODE XREF: vasnprintf+18D↑j
.text:000000000000D807                                         ; vasnprintf+AD4↓j
.text:000000000000D807                 mov     rax, [rbp+var_408]
.text:000000000000D80E                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000D815                 add     rax, 20h ; ' '
.text:000000000000D819                 cmp     rdi, rax
.text:000000000000D81C                 jz      short loc_D823
.text:000000000000D81E                 call    _free
.text:000000000000D823
.text:000000000000D823 loc_D823:                               ; CODE XREF: vasnprintf+1AC↑j
.text:000000000000D823                 mov     rax, [rbp+var_410]
.text:000000000000D82A                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000D831                 add     rax, 10h
.text:000000000000D835                 cmp     rdi, rax
.text:000000000000D838                 jz      short loc_D83F
.text:000000000000D83A                 call    _free
.text:000000000000D83F
.text:000000000000D83F loc_D83F:                               ; CODE XREF: vasnprintf+1C8↑j
.text:000000000000D83F                 mov     rax, [rbp+n]
.text:000000000000D846                 xor     r15d, r15d
.text:000000000000D849                 mov     dword ptr [rax], 0Ch
.text:000000000000D84F
.text:000000000000D84F loc_D84F:                               ; CODE XREF: vasnprintf+7BA↓j
.text:000000000000D84F                                         ; vasnprintf+EBE↓j ...
.text:000000000000D84F                 mov     rdi, [rbp+var_38]
.text:000000000000D853                 xor     rdi, fs:28h
.text:000000000000D85C                 mov     rax, r15
.text:000000000000D85F                 jnz     loc_E767
.text:000000000000D865                 lea     rsp, [rbp-28h]
.text:000000000000D869                 pop     rbx
.text:000000000000D86A                 pop     r12
.text:000000000000D86C                 pop     r13
.text:000000000000D86E                 pop     r14
.text:000000000000D870                 pop     r15
.text:000000000000D872                 pop     rbp
.text:000000000000D873                 retn
.text:000000000000D873 ; ---------------------------------------------------------------------------
.text:000000000000D874                 align 8
.text:000000000000D878
.text:000000000000D878 loc_D878:                               ; CODE XREF: vasnprintf+BB↑j
.text:000000000000D878                 add     rax, 24h ; '$'
.text:000000000000D87C                 mov     [rbp+ptr], 0
.text:000000000000D887                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000D88B                 sub     rsp, rax
.text:000000000000D88E                 lea     rax, [rsp+430h+var_421]
.text:000000000000D893                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000D897                 mov     [rbp+var_3D8], rax
.text:000000000000D89E                 jmp     loc_D765
.text:000000000000D89E ; ---------------------------------------------------------------------------
.text:000000000000D8A3                 align 8
.text:000000000000D8A8
.text:000000000000D8A8 loc_D8A8:                               ; CODE XREF: vasnprintf+155↑j
.text:000000000000D8A8                 cmp     r12, rax
.text:000000000000D8AB                 jnb     short loc_D914
.text:000000000000D8AD                 test    r12, r12
.text:000000000000D8B0                 jnz     loc_E1E0
.text:000000000000D8B6                 cmp     rax, 0Ch
.text:000000000000D8BA                 ja      loc_E1F2
.text:000000000000D8C0                 mov     r12d, 0Ch
.text:000000000000D8C6
.text:000000000000D8C6 loc_D8C6:                               ; CODE XREF: vasnprintf+B7C↓j
.text:000000000000D8C6                 cmp     r15, [rbp+src]
.text:000000000000D8CD                 setz    dl
.text:000000000000D8D0                 test    r15, r15
.text:000000000000D8D3                 jz      loc_E218
.text:000000000000D8D9
.text:000000000000D8D9 loc_D8D9:                               ; CODE XREF: vasnprintf+B9C↓j
.text:000000000000D8D9                 test    dl, dl
.text:000000000000D8DB                 jnz     loc_E218
.text:000000000000D8E1                 mov     rsi, r12        ; size
.text:000000000000D8E4                 mov     rdi, r15        ; ptr
.text:000000000000D8E7                 mov     [rbp+var_3D0], r8
.text:000000000000D8EE                 mov     [rbp+n], rcx
.text:000000000000D8F5                 call    _realloc
.text:000000000000D8FA                 test    rax, rax
.text:000000000000D8FD                 mov     rcx, [rbp+n]
.text:000000000000D904                 mov     r8, [rbp+var_3D0]
.text:000000000000D90B                 jz      loc_E2BB
.text:000000000000D911                 mov     r15, rax
.text:000000000000D914
.text:000000000000D914 loc_D914:                               ; CODE XREF: vasnprintf+23B↑j
.text:000000000000D914                                         ; vasnprintf+C23↓j ...
.text:000000000000D914                 lea     rdi, [r15+rbx]  ; dest
.text:000000000000D918                 mov     rdx, rcx        ; n
.text:000000000000D91B                 mov     rsi, r8         ; src
.text:000000000000D91E                 call    _memcpy
.text:000000000000D923
.text:000000000000D923 loc_D923:                               ; CODE XREF: vasnprintf+AB4↓j
.text:000000000000D923                 mov     rax, [rbp+var_400]
.text:000000000000D92A                 cmp     [rbp+var_2C0], rax
.text:000000000000D931                 jz      loc_E5EB
.text:000000000000D937                 movzx   edx, byte ptr [r13+48h]
.text:000000000000D93C                 mov     rax, [r13+50h]
.text:000000000000D940                 cmp     dl, 25h ; '%'
.text:000000000000D943                 jz      loc_E0D8
.text:000000000000D949                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D94D                 jz      def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000D94D                                         ; jumptable 000000000000E170 default case
.text:000000000000D953                 mov     r8, [rbp+var_3A8]
.text:000000000000D95A                 shl     rax, 5
.text:000000000000D95E                 add     rax, r8
.text:000000000000D961                 cmp     dl, 6Eh ; 'n'
.text:000000000000D964                 mov     edi, [rax]
.text:000000000000D966                 mov     dword ptr [rbp+var_3D0], edi
.text:000000000000D96C                 jz      loc_E150
.text:000000000000D972                 mov     eax, [r13+10h]
.text:000000000000D976                 mov     rdi, [rbp+var_3D8]
.text:000000000000D97D                 test    al, 1
.text:000000000000D97F                 mov     byte ptr [rdi], 25h ; '%'
.text:000000000000D982                 lea     rbx, [rdi+1]
.text:000000000000D986                 jz      short loc_D997
.text:000000000000D988                 mov     rdi, [rbp+var_3D8]
.text:000000000000D98F                 lea     rbx, [rdi+2]
.text:000000000000D993                 mov     byte ptr [rdi+1], 27h ; '''
.text:000000000000D997
.text:000000000000D997 loc_D997:                               ; CODE XREF: vasnprintf+316↑j
.text:000000000000D997                 test    al, 2
.text:000000000000D999                 jz      short loc_D9A2
.text:000000000000D99B                 mov     byte ptr [rbx], 2Dh ; '-'
.text:000000000000D99E                 add     rbx, 1
.text:000000000000D9A2
.text:000000000000D9A2 loc_D9A2:                               ; CODE XREF: vasnprintf+329↑j
.text:000000000000D9A2                 test    al, 4
.text:000000000000D9A4                 jz      short loc_D9AD
.text:000000000000D9A6                 mov     byte ptr [rbx], 2Bh ; '+'
.text:000000000000D9A9                 add     rbx, 1
.text:000000000000D9AD
.text:000000000000D9AD loc_D9AD:                               ; CODE XREF: vasnprintf+334↑j
.text:000000000000D9AD                 test    al, 8
.text:000000000000D9AF                 jz      short loc_D9B8
.text:000000000000D9B1                 mov     byte ptr [rbx], 20h ; ' '
.text:000000000000D9B4                 add     rbx, 1
.text:000000000000D9B8
.text:000000000000D9B8 loc_D9B8:                               ; CODE XREF: vasnprintf+33F↑j
.text:000000000000D9B8                 test    al, 10h
.text:000000000000D9BA                 jz      short loc_D9C3
.text:000000000000D9BC                 mov     byte ptr [rbx], 23h ; '#'
.text:000000000000D9BF                 add     rbx, 1
.text:000000000000D9C3
.text:000000000000D9C3 loc_D9C3:                               ; CODE XREF: vasnprintf+34A↑j
.text:000000000000D9C3                 test    al, 40h
.text:000000000000D9C5                 jz      short loc_D9CE
.text:000000000000D9C7                 mov     byte ptr [rbx], 49h ; 'I'
.text:000000000000D9CA                 add     rbx, 1
.text:000000000000D9CE
.text:000000000000D9CE loc_D9CE:                               ; CODE XREF: vasnprintf+355↑j
.text:000000000000D9CE                 test    al, 20h
.text:000000000000D9D0                 jz      short loc_D9D9
.text:000000000000D9D2                 mov     byte ptr [rbx], 30h ; '0'
.text:000000000000D9D5                 add     rbx, 1
.text:000000000000D9D9
.text:000000000000D9D9 loc_D9D9:                               ; CODE XREF: vasnprintf+360↑j
.text:000000000000D9D9                 mov     rsi, [r13+18h]  ; src
.text:000000000000D9DD                 mov     rdx, [r13+20h]
.text:000000000000D9E1                 cmp     rsi, rdx
.text:000000000000D9E4                 jz      short loc_DA16
.text:000000000000D9E6                 mov     rcx, rdx
.text:000000000000D9E9                 mov     rdi, rbx        ; dest
.text:000000000000D9EC                 mov     [rbp+var_3E0], r8
.text:000000000000D9F3                 sub     rcx, rsi
.text:000000000000D9F6                 mov     rdx, rcx        ; n
.text:000000000000D9F9                 mov     [rbp+n], rcx
.text:000000000000DA00                 call    _memcpy
.text:000000000000DA05                 mov     rcx, [rbp+n]
.text:000000000000DA0C                 mov     r8, [rbp+var_3E0]
.text:000000000000DA13                 add     rbx, rcx
.text:000000000000DA16
.text:000000000000DA16 loc_DA16:                               ; CODE XREF: vasnprintf+374↑j
.text:000000000000DA16                 mov     rsi, [r13+30h]  ; src
.text:000000000000DA1A                 mov     rdx, [r13+38h]
.text:000000000000DA1E                 cmp     rsi, rdx
.text:000000000000DA21                 jz      short loc_DA53
.text:000000000000DA23                 mov     rcx, rdx
.text:000000000000DA26                 mov     rdi, rbx        ; dest
.text:000000000000DA29                 mov     [rbp+var_3E0], r8
.text:000000000000DA30                 sub     rcx, rsi
.text:000000000000DA33                 mov     rdx, rcx        ; n
.text:000000000000DA36                 mov     [rbp+n], rcx
.text:000000000000DA3D                 call    _memcpy
.text:000000000000DA42                 mov     rcx, [rbp+n]
.text:000000000000DA49                 mov     r8, [rbp+var_3E0]
.text:000000000000DA50                 add     rbx, rcx
.text:000000000000DA53
.text:000000000000DA53 loc_DA53:                               ; CODE XREF: vasnprintf+3B1↑j
.text:000000000000DA53                 mov     edi, dword ptr [rbp+var_3D0]
.text:000000000000DA59                 cmp     edi, 10h
.text:000000000000DA5C                 ja      short loc_DA8B
.text:000000000000DA5E                 mov     eax, 1
.text:000000000000DA63                 mov     ecx, edi
.text:000000000000DA65                 shl     rax, cl
.text:000000000000DA68                 test    eax, 14180h
.text:000000000000DA6D                 jnz     short loc_DA84
.text:000000000000DA6F                 test    ah, 10h
.text:000000000000DA72                 jnz     loc_E3D0
.text:000000000000DA78                 test    ah, 6
.text:000000000000DA7B                 jz      short loc_DA8B
.text:000000000000DA7D                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000DA80                 add     rbx, 1
.text:000000000000DA84
.text:000000000000DA84 loc_DA84:                               ; CODE XREF: vasnprintf+3FD↑j
.text:000000000000DA84                 mov     byte ptr [rbx], 6Ch ; 'l'
.text:000000000000DA87                 add     rbx, 1
.text:000000000000DA8B
.text:000000000000DA8B loc_DA8B:                               ; CODE XREF: vasnprintf+3EC↑j
.text:000000000000DA8B                                         ; vasnprintf+40B↑j ...
.text:000000000000DA8B                 movzx   eax, byte ptr [r13+48h]
.text:000000000000DA90                 mov     byte ptr [rbx+1], 0
.text:000000000000DA94                 mov     [rbx], al
.text:000000000000DA96                 mov     rax, [r13+28h]
.text:000000000000DA9A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DA9E                 jz      loc_E1D0
.text:000000000000DAA4                 shl     rax, 5
.text:000000000000DAA8                 add     rax, r8
.text:000000000000DAAB                 cmp     dword ptr [rax], 5
.text:000000000000DAAE                 jnz     def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000DAAE                                         ; jumptable 000000000000E170 default case
.text:000000000000DAB4                 mov     eax, [rax+10h]
.text:000000000000DAB7                 mov     dword ptr [rbp+var_3E0], 1
.text:000000000000DAC1                 mov     [rbp+var_3B8], eax
.text:000000000000DAC7
.text:000000000000DAC7 loc_DAC7:                               ; CODE XREF: vasnprintf+B6A↓j
.text:000000000000DAC7                 mov     rax, [r13+40h]
.text:000000000000DACB                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DACF                 jz      short loc_DAFC
.text:000000000000DAD1                 shl     rax, 5
.text:000000000000DAD5                 add     r8, rax
.text:000000000000DAD8                 cmp     dword ptr [r8], 5
.text:000000000000DADC                 jnz     def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000DADC                                         ; jumptable 000000000000E170 default case
.text:000000000000DAE2                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DAE8                 mov     edx, [r8+10h]
.text:000000000000DAEC                 mov     [rbp+rax*4+var_3B8], edx
.text:000000000000DAF3                 lea     eax, [rax+1]
.text:000000000000DAF6                 mov     dword ptr [rbp+var_3E0], eax
.text:000000000000DAFC
.text:000000000000DAFC loc_DAFC:                               ; CODE XREF: vasnprintf+45F↑j
.text:000000000000DAFC                 mov     rax, r14
.text:000000000000DAFF                 xor     edx, edx
.text:000000000000DB01                 add     rax, 2
.text:000000000000DB05                 jb      loc_E76C
.text:000000000000DB0B                 cmp     r12, rax
.text:000000000000DB0E                 jnb     short loc_DB5B
.text:000000000000DB10                 test    r12, r12
.text:000000000000DB13                 jnz     loc_E338
.text:000000000000DB19                 cmp     rax, 0Ch
.text:000000000000DB1D                 ja      loc_E350
.text:000000000000DB23                 mov     r12d, 0Ch
.text:000000000000DB29
.text:000000000000DB29 loc_DB29:                               ; CODE XREF: vasnprintf+CD4↓j
.text:000000000000DB29                 cmp     r15, [rbp+src]
.text:000000000000DB30                 setz    dl
.text:000000000000DB33                 test    r15, r15
.text:000000000000DB36                 jz      loc_E380
.text:000000000000DB3C
.text:000000000000DB3C loc_DB3C:                               ; CODE XREF: vasnprintf+D03↓j
.text:000000000000DB3C                 test    dl, dl
.text:000000000000DB3E                 jnz     loc_E380
.text:000000000000DB44                 mov     rsi, r12        ; size
.text:000000000000DB47                 mov     rdi, r15        ; ptr
.text:000000000000DB4A                 call    _realloc
.text:000000000000DB4F                 test    rax, rax
.text:000000000000DB52                 jz      loc_D7D5
.text:000000000000DB58                 mov     r15, rax
.text:000000000000DB5B
.text:000000000000DB5B loc_DB5B:                               ; CODE XREF: vasnprintf+49E↑j
.text:000000000000DB5B                                         ; vasnprintf+D53↓j ...
.text:000000000000DB5B                 mov     byte ptr [r15+r14], 0
.text:000000000000DB60                 call    ___errno_location
.text:000000000000DB65                 mov     [rbp+n], rax
.text:000000000000DB6C                 mov     eax, [rax]
.text:000000000000DB6E                 mov     [rbp+var_3F8], rbx
.text:000000000000DB75                 mov     [rbp-424h], eax
.text:000000000000DB7B                 nop     dword ptr [rax+rax+00h]
.text:000000000000DB80
.text:000000000000DB80 loc_DB80:                               ; CODE XREF: vasnprintf+637↓j
.text:000000000000DB80                                         ; vasnprintf+68D↓j ...
.text:000000000000DB80                 mov     rax, [rbp+n]
.text:000000000000DB87                 mov     rbx, r12
.text:000000000000DB8A                 mov     r10d, 7FFFFFFFh
.text:000000000000DB90                 sub     rbx, r14
.text:000000000000DB93                 mov     [rbp+var_3BC], 0FFFFFFFFh
.text:000000000000DB9D                 cmp     rbx, 7FFFFFFFh
.text:000000000000DBA4                 mov     dword ptr [rax], 0
.text:000000000000DBAA                 mov     eax, dword ptr [rbp+var_3D0]
.text:000000000000DBB0                 cmovbe  r10, rbx
.text:000000000000DBB4                 cmp     eax, 11h        ; switch 18 cases
.text:000000000000DBB7                 ja      def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000DBB7                                         ; jumptable 000000000000E170 default case
.text:000000000000DBBD                 lea     rsi, jpt_DBCB
.text:000000000000DBC4                 movsxd  rax, ds:(jpt_DBCB - 11FB0h)[rsi+rax*4]
.text:000000000000DBC8                 add     rax, rsi
.text:000000000000DBCB                 jmp     rax             ; switch jump
.text:000000000000DBCB ; ---------------------------------------------------------------------------
.text:000000000000DBCD                 align 10h
.text:000000000000DBD0
.text:000000000000DBD0 loc_DBD0:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DBD0                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DBD0                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB cases 7-10,15-17
.text:000000000000DBD4                 lea     rdi, [r15+r14]
.text:000000000000DBD8                 shl     rax, 5
.text:000000000000DBDC                 add     rax, [rbp+var_3A8]
.text:000000000000DBE3                 mov     r9, [rax+10h]
.text:000000000000DBE7                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DBED                 cmp     eax, 1
.text:000000000000DBF0                 jz      loc_E0B8
.text:000000000000DBF6                 cmp     eax, 2
.text:000000000000DBF9                 jz      loc_E0A0
.text:000000000000DBFF                 sub     rsp, 8
.text:000000000000DC03                 push    [rbp+var_3F0]
.text:000000000000DC09
.text:000000000000DC09 loc_DC09:                               ; CODE XREF: vasnprintf+CBE↓j
.text:000000000000DC09                 mov     r8, [rbp+var_3D8]
.text:000000000000DC10                 mov     rsi, r10
.text:000000000000DC13                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC1A                 mov     edx, 1
.text:000000000000DC1F                 xor     eax, eax
.text:000000000000DC21                 mov     [rbp+var_430], r10
.text:000000000000DC28                 call    ___snprintf_chk
.text:000000000000DC2D                 pop     rsi
.text:000000000000DC2E                 pop     rdi
.text:000000000000DC2F                 mov     r10, [rbp+var_430]
.text:000000000000DC36
.text:000000000000DC36 loc_DC36:                               ; CODE XREF: vasnprintf+83D↓j
.text:000000000000DC36                                         ; vasnprintf+8BE↓j ...
.text:000000000000DC36                 mov     ecx, [rbp+var_3BC]
.text:000000000000DC3C                 test    ecx, ecx
.text:000000000000DC3E                 js      loc_DD7C
.text:000000000000DC44
.text:000000000000DC44 loc_DC44:                               ; CODE XREF: vasnprintf+706↓j
.text:000000000000DC44                 movsxd  rdx, ecx
.text:000000000000DC47                 cmp     rdx, r10
.text:000000000000DC4A                 jnb     short loc_DC5A
.text:000000000000DC4C                 add     rdx, r15
.text:000000000000DC4F                 cmp     byte ptr [rdx+r14], 0
.text:000000000000DC54                 jnz     def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000DC54                                         ; jumptable 000000000000E170 default case
.text:000000000000DC5A
.text:000000000000DC5A loc_DC5A:                               ; CODE XREF: vasnprintf+5DA↑j
.text:000000000000DC5A                 cmp     ecx, eax
.text:000000000000DC5C                 jge     short loc_DC66
.text:000000000000DC5E
.text:000000000000DC5E loc_DC5E:                               ; CODE XREF: vasnprintf+71F↓j
.text:000000000000DC5E                 mov     [rbp+var_3BC], eax
.text:000000000000DC64                 mov     ecx, eax
.text:000000000000DC66
.text:000000000000DC66 loc_DC66:                               ; CODE XREF: vasnprintf+5EC↑j
.text:000000000000DC66                 lea     eax, [rcx+1]
.text:000000000000DC69                 cmp     rax, r10
.text:000000000000DC6C                 jb      loc_E4A0
.text:000000000000DC72                 cmp     rbx, 7FFFFFFEh
.text:000000000000DC79                 ja      loc_E4C0
.text:000000000000DC7F                 lea     rsi, [r12+r12]
.text:000000000000DC83                 lea     edx, [rcx+2]
.text:000000000000DC86                 test    r12, r12
.text:000000000000DC89                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DC90                 cmovns  rax, rsi
.text:000000000000DC94                 add     rdx, r14
.text:000000000000DC97                 jb      loc_E758
.text:000000000000DC9D                 cmp     rax, rdx
.text:000000000000DCA0                 cmovb   rax, rdx
.text:000000000000DCA4                 cmp     r12, rax
.text:000000000000DCA7                 jnb     loc_DB80
.text:000000000000DCAD                 test    r12, r12
.text:000000000000DCB0                 js      loc_D7E1
.text:000000000000DCB6                 cmp     rsi, rax
.text:000000000000DCB9                 mov     r12, rsi
.text:000000000000DCBC                 jnb     short loc_DCCB
.text:000000000000DCBE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000DCC2                 jz      loc_D7E1
.text:000000000000DCC8                 mov     r12, rax
.text:000000000000DCCB
.text:000000000000DCCB loc_DCCB:                               ; CODE XREF: vasnprintf+64C↑j
.text:000000000000DCCB                 cmp     r15, [rbp+src]
.text:000000000000DCD2                 setz    bl
.text:000000000000DCD5                 test    r15, r15
.text:000000000000DCD8                 jz      loc_E060
.text:000000000000DCDE                 test    bl, bl
.text:000000000000DCE0                 jnz     loc_E060
.text:000000000000DCE6                 mov     rsi, r12        ; size
.text:000000000000DCE9                 mov     rdi, r15        ; ptr
.text:000000000000DCEC                 call    _realloc
.text:000000000000DCF1                 test    rax, rax
.text:000000000000DCF4                 jz      loc_D7E1
.text:000000000000DCFA                 mov     r15, rax
.text:000000000000DCFD                 jmp     loc_DB80
.text:000000000000DCFD ; ---------------------------------------------------------------------------
.text:000000000000DD02                 align 8
.text:000000000000DD08
.text:000000000000DD08 loc_DD08:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DD08                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DD08                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB cases 5,6,13,14
.text:000000000000DD0C                 lea     rdi, [r15+r14]
.text:000000000000DD10                 shl     rax, 5
.text:000000000000DD14                 add     rax, [rbp+var_3A8]
.text:000000000000DD1B                 mov     r9d, [rax+10h]
.text:000000000000DD1F                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DD25                 cmp     eax, 1
.text:000000000000DD28                 jz      loc_DF60
.text:000000000000DD2E
.text:000000000000DD2E loc_DD2E:                               ; CODE XREF: vasnprintf+8E9↓j
.text:000000000000DD2E                                         ; vasnprintf+9B1↓j ...
.text:000000000000DD2E                 cmp     eax, 2
.text:000000000000DD31                 jz      loc_DFA8
.text:000000000000DD37
.text:000000000000DD37 loc_DD37:                               ; CODE XREF: vasnprintf+92E↓j
.text:000000000000DD37                 sub     rsp, 8
.text:000000000000DD3B                 push    [rbp+var_3F0]
.text:000000000000DD41
.text:000000000000DD41 loc_DD41:                               ; CODE XREF: vasnprintf+8FF↓j
.text:000000000000DD41                 mov     r8, [rbp+var_3D8]
.text:000000000000DD48                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DD4F                 mov     edx, 1
.text:000000000000DD54                 mov     rsi, r10
.text:000000000000DD57                 xor     eax, eax
.text:000000000000DD59                 mov     [rbp+var_430], r10
.text:000000000000DD60                 call    ___snprintf_chk
.text:000000000000DD65                 pop     rdx
.text:000000000000DD66                 pop     rcx
.text:000000000000DD67                 mov     ecx, [rbp+var_3BC]
.text:000000000000DD6D                 mov     r10, [rbp+var_430]
.text:000000000000DD74                 test    ecx, ecx
.text:000000000000DD76                 jns     loc_DC44
.text:000000000000DD7C
.text:000000000000DD7C loc_DD7C:                               ; CODE XREF: vasnprintf+5CE↑j
.text:000000000000DD7C                 mov     rdi, [rbp+var_3F8]
.text:000000000000DD83                 cmp     byte ptr [rdi+1], 0
.text:000000000000DD87                 jnz     loc_E0C8
.text:000000000000DD8D                 test    eax, eax
.text:000000000000DD8F                 jns     loc_DC5E
.text:000000000000DD95                 mov     rax, [rbp+n]
.text:000000000000DD9C                 mov     ebx, [rax]
.text:000000000000DD9E                 test    ebx, ebx
.text:000000000000DDA0                 jnz     short loc_DDC0
.text:000000000000DDA2                 movzx   eax, byte ptr [r13+48h]
.text:000000000000DDA7                 mov     ebx, 16h
.text:000000000000DDAC                 and     eax, 0FFFFFFEFh
.text:000000000000DDAF                 cmp     al, 63h ; 'c'
.text:000000000000DDB1                 mov     eax, 54h ; 'T'
.text:000000000000DDB6                 cmovz   ebx, eax
.text:000000000000DDB9                 nop     dword ptr [rax+00000000h]
.text:000000000000DDC0
.text:000000000000DDC0 loc_DDC0:                               ; CODE XREF: vasnprintf+730↑j
.text:000000000000DDC0                 cmp     r15, [rbp+src]
.text:000000000000DDC7                 jz      short loc_DDD2
.text:000000000000DDC9                 test    r15, r15
.text:000000000000DDCC                 jnz     loc_E57C
.text:000000000000DDD2
.text:000000000000DDD2 loc_DDD2:                               ; CODE XREF: vasnprintf+757↑j
.text:000000000000DDD2                                         ; vasnprintf+F14↓j
.text:000000000000DDD2                 mov     rax, [rbp+ptr]
.text:000000000000DDD9                 test    rax, rax
.text:000000000000DDDC                 jz      short loc_DDE6
.text:000000000000DDDE                 mov     rdi, rax        ; ptr
.text:000000000000DDE1                 call    _free
.text:000000000000DDE6
.text:000000000000DDE6 loc_DDE6:                               ; CODE XREF: vasnprintf+76C↑j
.text:000000000000DDE6                 mov     rax, [rbp+var_408]
.text:000000000000DDED                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000DDF4                 add     rax, 20h ; ' '
.text:000000000000DDF8                 cmp     rdi, rax
.text:000000000000DDFB                 jz      short loc_DE02
.text:000000000000DDFD                 call    _free
.text:000000000000DE02
.text:000000000000DE02 loc_DE02:                               ; CODE XREF: vasnprintf+78B↑j
.text:000000000000DE02                 mov     rax, [rbp+var_410]
.text:000000000000DE09                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000DE10                 add     rax, 10h
.text:000000000000DE14                 cmp     rdi, rax
.text:000000000000DE17                 jz      short loc_DE1E
.text:000000000000DE19                 call    _free
.text:000000000000DE1E
.text:000000000000DE1E loc_DE1E:                               ; CODE XREF: vasnprintf+7A7↑j
.text:000000000000DE1E                 mov     rax, [rbp+n]
.text:000000000000DE25                 xor     r15d, r15d
.text:000000000000DE28                 mov     [rax], ebx
.text:000000000000DE2A                 jmp     loc_D84F
.text:000000000000DE2A ; ---------------------------------------------------------------------------
.text:000000000000DE2F                 align 10h
.text:000000000000DE30
.text:000000000000DE30 loc_DE30:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DE30                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DE30                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 12
.text:000000000000DE34                 lea     rdi, [r15+r14]
.text:000000000000DE38                 shl     rax, 5
.text:000000000000DE3C                 add     rax, [rbp+var_3A8]
.text:000000000000DE43                 fld     tbyte ptr [rax+10h]
.text:000000000000DE46                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DE4C                 cmp     eax, 1
.text:000000000000DE4F                 jz      loc_E480
.text:000000000000DE55                 cmp     eax, 2
.text:000000000000DE58                 jnz     loc_E320
.text:000000000000DE5E                 mov     eax, [rbp+var_3B4]
.text:000000000000DE64                 sub     rsp, 8
.text:000000000000DE68                 push    [rbp+var_3F0]
.text:000000000000DE6E                 mov     r9d, [rbp+var_3B8]
.text:000000000000DE75                 mov     r8, [rbp+var_3D8]
.text:000000000000DE7C                 mov     rsi, r10
.text:000000000000DE7F                 sub     rsp, 18h
.text:000000000000DE83                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DE8A                 mov     edx, 1
.text:000000000000DE8F                 fstp    [rsp+458h+var_450]
.text:000000000000DE93                 push    rax
.text:000000000000DE94                 xor     eax, eax
.text:000000000000DE96                 mov     [rbp+var_430], r10
.text:000000000000DE9D                 call    ___snprintf_chk
.text:000000000000DEA2                 add     rsp, 30h
.text:000000000000DEA6                 mov     r10, [rbp+var_430]
.text:000000000000DEAD                 jmp     loc_DC36
.text:000000000000DEAD ; ---------------------------------------------------------------------------
.text:000000000000DEB2                 align 8
.text:000000000000DEB8
.text:000000000000DEB8 loc_DEB8:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DEB8                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DEB8                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 11
.text:000000000000DEBC                 lea     rdi, [r15+r14]
.text:000000000000DEC0                 shl     rax, 5
.text:000000000000DEC4                 add     rax, [rbp+var_3A8]
.text:000000000000DECB                 movsd   xmm0, qword ptr [rax+10h]
.text:000000000000DED0                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DED6                 cmp     eax, 1
.text:000000000000DED9                 jz      loc_E470
.text:000000000000DEDF                 cmp     eax, 2
.text:000000000000DEE2                 jnz     loc_E2E0
.text:000000000000DEE8                 mov     eax, [rbp+var_3B4]
.text:000000000000DEEE                 push    [rbp+var_3F0]
.text:000000000000DEF4                 push    rax
.text:000000000000DEF5
.text:000000000000DEF5 loc_DEF5:                               ; CODE XREF: vasnprintf+E0A↓j
.text:000000000000DEF5                 mov     r9d, [rbp+var_3B8]
.text:000000000000DEFC                 mov     r8, [rbp+var_3D8]
.text:000000000000DF03                 mov     rsi, r10
.text:000000000000DF06                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DF0D                 mov     edx, 1
.text:000000000000DF12                 mov     eax, 1
.text:000000000000DF17                 mov     [rbp+var_430], r10
.text:000000000000DF1E                 call    ___snprintf_chk
.text:000000000000DF23                 pop     r8
.text:000000000000DF25                 mov     r10, [rbp+var_430]
.text:000000000000DF2C                 pop     r9
.text:000000000000DF2E                 jmp     loc_DC36
.text:000000000000DF2E ; ---------------------------------------------------------------------------
.text:000000000000DF33                 align 8
.text:000000000000DF38
.text:000000000000DF38 loc_DF38:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DF38                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DF38                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 4
.text:000000000000DF3C                 lea     rdi, [r15+r14]
.text:000000000000DF40                 shl     rax, 5
.text:000000000000DF44                 add     rax, [rbp+var_3A8]
.text:000000000000DF4B                 movzx   r9d, word ptr [rax+10h]
.text:000000000000DF50                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DF56                 cmp     eax, 1
.text:000000000000DF59                 jnz     loc_DD2E
.text:000000000000DF5F                 nop
.text:000000000000DF60
.text:000000000000DF60 loc_DF60:                               ; CODE XREF: vasnprintf+6B8↑j
.text:000000000000DF60                                         ; vasnprintf+929↓j ...
.text:000000000000DF60                 push    [rbp+var_3F0]
.text:000000000000DF66                 push    r9
.text:000000000000DF68
.text:000000000000DF68 loc_DF68:                               ; CODE XREF: vasnprintf+A50↓j
.text:000000000000DF68                 mov     r9d, [rbp+var_3B8]
.text:000000000000DF6F                 jmp     loc_DD41
.text:000000000000DF6F ; ---------------------------------------------------------------------------
.text:000000000000DF74                 align 8
.text:000000000000DF78
.text:000000000000DF78 loc_DF78:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000DF78                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000DF78                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 3
.text:000000000000DF7C                 lea     rdi, [r15+r14]
.text:000000000000DF80                 shl     rax, 5
.text:000000000000DF84                 add     rax, [rbp+var_3A8]
.text:000000000000DF8B                 movsx   r9d, word ptr [rax+10h]
.text:000000000000DF90                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000DF96                 cmp     eax, 1
.text:000000000000DF99                 jz      short loc_DF60
.text:000000000000DF9B                 cmp     eax, 2
.text:000000000000DF9E                 jnz     loc_DD37
.text:000000000000DFA4                 nop     dword ptr [rax+00h]
.text:000000000000DFA8
.text:000000000000DFA8 loc_DFA8:                               ; CODE XREF: vasnprintf+6C1↑j
.text:000000000000DFA8                 sub     rsp, 8
.text:000000000000DFAC                 push    [rbp+var_3F0]
.text:000000000000DFB2                 push    r9
.text:000000000000DFB4
.text:000000000000DFB4 loc_DFB4:                               ; CODE XREF: vasnprintf+A3C↓j
.text:000000000000DFB4                 mov     eax, [rbp+var_3B4]
.text:000000000000DFBA                 push    rax
.text:000000000000DFBB
.text:000000000000DFBB loc_DFBB:                               ; CODE XREF: vasnprintf+E21↓j
.text:000000000000DFBB                 mov     r9d, [rbp+var_3B8]
.text:000000000000DFC2                 mov     r8, [rbp+var_3D8]
.text:000000000000DFC9                 mov     rsi, r10
.text:000000000000DFCC                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000DFD3                 mov     edx, 1
.text:000000000000DFD8                 xor     eax, eax
.text:000000000000DFDA                 mov     [rbp+var_430], r10
.text:000000000000DFE1                 call    ___snprintf_chk
.text:000000000000DFE6                 add     rsp, 20h
.text:000000000000DFEA                 mov     r10, [rbp+var_430]
.text:000000000000DFF1                 jmp     loc_DC36
.text:000000000000DFF1 ; ---------------------------------------------------------------------------
.text:000000000000DFF6                 align 20h
.text:000000000000E000
.text:000000000000E000 loc_E000:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000E000                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000E000                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 2
.text:000000000000E004                 lea     rdi, [r15+r14]
.text:000000000000E008                 shl     rax, 5
.text:000000000000E00C                 add     rax, [rbp+var_3A8]
.text:000000000000E013                 movzx   r9d, byte ptr [rax+10h]
.text:000000000000E018                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000E01E                 cmp     eax, 1
.text:000000000000E021                 jnz     loc_DD2E
.text:000000000000E027                 jmp     loc_DF60
.text:000000000000E027 ; ---------------------------------------------------------------------------
.text:000000000000E02C                 align 10h
.text:000000000000E030
.text:000000000000E030 loc_E030:                               ; CODE XREF: vasnprintf+55B↑j
.text:000000000000E030                                         ; DATA XREF: .rodata:jpt_DBCB↓o
.text:000000000000E030                 mov     rax, [r13+50h]  ; jumptable 000000000000DBCB case 1
.text:000000000000E034                 lea     rdi, [r15+r14]
.text:000000000000E038                 shl     rax, 5
.text:000000000000E03C                 add     rax, [rbp+var_3A8]
.text:000000000000E043                 movsx   r9d, byte ptr [rax+10h]
.text:000000000000E048                 mov     eax, dword ptr [rbp+var_3E0]
.text:000000000000E04E                 cmp     eax, 1
.text:000000000000E051                 jnz     loc_DD2E
.text:000000000000E057                 jmp     loc_DF60
.text:000000000000E057 ; ---------------------------------------------------------------------------
.text:000000000000E05C                 align 20h
.text:000000000000E060
.text:000000000000E060 loc_E060:                               ; CODE XREF: vasnprintf+668↑j
.text:000000000000E060                                         ; vasnprintf+670↑j
.text:000000000000E060                 mov     rdi, r12        ; size
.text:000000000000E063                 call    _malloc
.text:000000000000E068                 test    rax, rax
.text:000000000000E06B                 mov     rcx, rax
.text:000000000000E06E                 jz      loc_D7E1
.text:000000000000E074                 test    r14, r14
.text:000000000000E077                 jz      loc_E130
.text:000000000000E07D                 test    bl, bl
.text:000000000000E07F                 jz      loc_E130
.text:000000000000E085                 mov     rsi, r15        ; src
.text:000000000000E088                 mov     rdx, r14        ; n
.text:000000000000E08B                 mov     rdi, rax        ; dest
.text:000000000000E08E                 call    _memcpy
.text:000000000000E093                 mov     r15, rax
.text:000000000000E096                 jmp     loc_DB80
.text:000000000000E096 ; ---------------------------------------------------------------------------
.text:000000000000E09B                 align 20h
.text:000000000000E0A0
.text:000000000000E0A0 loc_E0A0:                               ; CODE XREF: vasnprintf+589↑j
.text:000000000000E0A0                 sub     rsp, 8
.text:000000000000E0A4                 push    [rbp+var_3F0]
.text:000000000000E0AA                 push    r9
.text:000000000000E0AC                 jmp     loc_DFB4
.text:000000000000E0AC ; ---------------------------------------------------------------------------
.text:000000000000E0B1                 align 8
.text:000000000000E0B8
.text:000000000000E0B8 loc_E0B8:                               ; CODE XREF: vasnprintf+580↑j
.text:000000000000E0B8                 push    [rbp+var_3F0]
.text:000000000000E0BE                 push    r9
.text:000000000000E0C0                 jmp     loc_DF68
.text:000000000000E0C0 ; ---------------------------------------------------------------------------
.text:000000000000E0C5                 align 8
.text:000000000000E0C8
.text:000000000000E0C8 loc_E0C8:                               ; CODE XREF: vasnprintf+717↑j
.text:000000000000E0C8                 mov     byte ptr [rdi+1], 0
.text:000000000000E0CC                 jmp     loc_DB80
.text:000000000000E0CC ; ---------------------------------------------------------------------------
.text:000000000000E0D1                 align 8
.text:000000000000E0D8
.text:000000000000E0D8 loc_E0D8:                               ; CODE XREF: vasnprintf+2D3↑j
.text:000000000000E0D8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E0DC                 jnz     def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000E0DC                                         ; jumptable 000000000000E170 default case
.text:000000000000E0E2                 mov     rax, r14
.text:000000000000E0E5                 add     rax, 1
.text:000000000000E0E9                 mov     rbx, rax
.text:000000000000E0EC                 jnb     loc_E178
.text:000000000000E0F2                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000E0F6                 jnz     loc_D7D5
.text:000000000000E0FC                 mov     rbx, r12
.text:000000000000E0FF
.text:000000000000E0FF loc_E0FF:                               ; CODE XREF: vasnprintf+B0B↓j
.text:000000000000E0FF                                         ; vasnprintf+B58↓j ...
.text:000000000000E0FF                 mov     byte ptr [r15+r14], 25h ; '%'
.text:000000000000E104
.text:000000000000E104 loc_E104:                               ; CODE XREF: vasnprintf+C46↓j
.text:000000000000E104                                         ; vasnprintf+D76↓j ...
.text:000000000000E104                 mov     r8, [r13+8]
.text:000000000000E108                 add     r13, 58h ; 'X'
.text:000000000000E10C                 mov     rcx, [r13+0]
.text:000000000000E110                 add     [rbp+var_400], 1
.text:000000000000E118                 cmp     rcx, r8
.text:000000000000E11B                 jnz     loc_D7B9
.text:000000000000E121
.text:000000000000E121 loc_E121:                               ; CODE XREF: vasnprintf+143↑j
.text:000000000000E121                 mov     r14, rbx
.text:000000000000E124                 jmp     loc_D923
.text:000000000000E124 ; ---------------------------------------------------------------------------
.text:000000000000E129                 align 10h
.text:000000000000E130
.text:000000000000E130 loc_E130:                               ; CODE XREF: vasnprintf+A07↑j
.text:000000000000E130                                         ; vasnprintf+A0F↑j
.text:000000000000E130                 mov     r15, rcx
.text:000000000000E133                 jmp     loc_DB80
.text:000000000000E138 ; ---------------------------------------------------------------------------
.text:000000000000E138
.text:000000000000E138 loc_E138:                               ; CODE XREF: vasnprintf+9A↑j
.text:000000000000E138                                         ; vasnprintf+AE↑j ...
.text:000000000000E138                 call    ___errno_location
.text:000000000000E13D                 mov     [rbp+n], rax
.text:000000000000E144                 jmp     loc_D807
.text:000000000000E144 ; ---------------------------------------------------------------------------
.text:000000000000E149                 align 10h
.text:000000000000E150
.text:000000000000E150 loc_E150:                               ; CODE XREF: vasnprintf+2FC↑j
.text:000000000000E150                 mov     edx, edi
.text:000000000000E152                 sub     edx, 12h        ; switch 5 cases
.text:000000000000E155                 cmp     edx, 4
.text:000000000000E158                 ja      def_DBCB        ; jumptable 000000000000DBCB default case, case 0
.text:000000000000E158                                         ; jumptable 000000000000E170 default case
.text:000000000000E15E                 lea     rdi, jpt_E170
.text:000000000000E165                 mov     rax, [rax+10h]
.text:000000000000E169                 movsxd  rdx, ds:(jpt_E170 - 11FF8h)[rdi+rdx*4]
.text:000000000000E16D                 add     rdx, rdi
.text:000000000000E170                 jmp     rdx             ; switch jump
.text:000000000000E170 ; ---------------------------------------------------------------------------
.text:000000000000E172                 align 8
.text:000000000000E178
.text:000000000000E178 loc_E178:                               ; CODE XREF: vasnprintf+A7C↑j
.text:000000000000E178                 cmp     r12, rax
.text:000000000000E17B                 jnb     short loc_E0FF
.text:000000000000E17D                 test    r12, r12
.text:000000000000E180                 jnz     loc_E550
.text:000000000000E186                 cmp     rax, 0Ch
.text:000000000000E18A                 ja      loc_E562
.text:000000000000E190                 mov     r12d, 0Ch
.text:000000000000E196
.text:000000000000E196 loc_E196:                               ; CODE XREF: vasnprintf+EEC↓j
.text:000000000000E196                                         ; vasnprintf+EFF↓j
.text:000000000000E196                 cmp     r15, [rbp+src]
.text:000000000000E19D                 setz    dl
.text:000000000000E1A0                 test    r15, r15
.text:000000000000E1A3                 jz      loc_E410
.text:000000000000E1A9                 test    dl, dl
.text:000000000000E1AB                 jnz     loc_E410
.text:000000000000E1B1                 mov     rsi, r12        ; size
.text:000000000000E1B4                 mov     rdi, r15        ; ptr
.text:000000000000E1B7                 call    _realloc
.text:000000000000E1BC                 test    rax, rax
.text:000000000000E1BF                 jz      loc_E2BB
.text:000000000000E1C5                 mov     r15, rax
.text:000000000000E1C8                 jmp     loc_E0FF
.text:000000000000E1C8 ; ---------------------------------------------------------------------------
.text:000000000000E1CD                 align 10h
.text:000000000000E1D0
.text:000000000000E1D0 loc_E1D0:                               ; CODE XREF: vasnprintf+42E↑j
.text:000000000000E1D0                 mov     dword ptr [rbp+var_3E0], 0
.text:000000000000E1DA                 jmp     loc_DAC7
.text:000000000000E1DA ; ---------------------------------------------------------------------------
.text:000000000000E1DF                 align 20h
.text:000000000000E1E0
.text:000000000000E1E0 loc_E1E0:                               ; CODE XREF: vasnprintf+240↑j
.text:000000000000E1E0                 js      loc_D7D5
.text:000000000000E1E6                 add     r12, r12
.text:000000000000E1E9                 cmp     r12, rax
.text:000000000000E1EC                 jnb     loc_D8C6
.text:000000000000E1F2
.text:000000000000E1F2 loc_E1F2:                               ; CODE XREF: vasnprintf+24A↑j
.text:000000000000E1F2                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E1F6                 jz      loc_D7D5
.text:000000000000E1FC                 cmp     r15, [rbp+src]
.text:000000000000E203                 mov     r12, rax
.text:000000000000E206                 setz    dl
.text:000000000000E209                 test    r15, r15
.text:000000000000E20C                 jnz     loc_D8D9
.text:000000000000E212                 nop     word ptr [rax+rax+00h]
.text:000000000000E218
.text:000000000000E218 loc_E218:                               ; CODE XREF: vasnprintf+263↑j
.text:000000000000E218                                         ; vasnprintf+26B↑j
.text:000000000000E218                 mov     rdi, r12        ; size
.text:000000000000E21B                 mov     [rbp+var_3E0], r8
.text:000000000000E222                 mov     byte ptr [rbp+var_3D0], dl
.text:000000000000E228                 mov     [rbp+n], rcx
.text:000000000000E22F                 call    _malloc
.text:000000000000E234                 test    rax, rax
.text:000000000000E237                 mov     r9, rax
.text:000000000000E23A                 mov     rcx, [rbp+n]
.text:000000000000E241                 movzx   edx, byte ptr [rbp+var_3D0]
.text:000000000000E248                 mov     r8, [rbp+var_3E0]
.text:000000000000E24F                 jz      loc_D7D5
.text:000000000000E255                 test    rbx, rbx
.text:000000000000E258                 jz      loc_E460
.text:000000000000E25E                 test    dl, dl
.text:000000000000E260                 jz      loc_E460
.text:000000000000E266                 mov     rsi, r15        ; src
.text:000000000000E269                 mov     rdx, rbx        ; n
.text:000000000000E26C                 mov     rdi, rax        ; dest
.text:000000000000E26F                 mov     [rbp+var_3D0], r8
.text:000000000000E276                 mov     [rbp+n], rcx
.text:000000000000E27D                 call    _memcpy
.text:000000000000E282                 mov     rcx, [rbp+n]
.text:000000000000E289                 mov     r15, rax
.text:000000000000E28C                 mov     r8, [rbp+var_3D0]
.text:000000000000E293                 jmp     loc_D914
.text:000000000000E293 ; ---------------------------------------------------------------------------
.text:000000000000E298                 align 20h
.text:000000000000E2A0
.text:000000000000E2A0 loc_E2A0:                               ; CODE XREF: vasnprintf+15F↑j
.text:000000000000E2A0                 mov     r14, r12
.text:000000000000E2A3                 jmp     loc_D914
.text:000000000000E2A3 ; ---------------------------------------------------------------------------
.text:000000000000E2A8                 align 10h
.text:000000000000E2B0
.text:000000000000E2B0 loc_E2B0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000E2B0                                         ; DATA XREF: .rodata:jpt_E170↓o
.text:000000000000E2B0                 mov     [rax], r14      ; jumptable 000000000000E170 cases 21,22
.text:000000000000E2B3                 mov     rbx, r14
.text:000000000000E2B6                 jmp     loc_E104
.text:000000000000E2BB ; ---------------------------------------------------------------------------
.text:000000000000E2BB
.text:000000000000E2BB loc_E2BB:                               ; CODE XREF: vasnprintf+29B↑j
.text:000000000000E2BB                                         ; vasnprintf+B4F↑j ...
.text:000000000000E2BB                 call    ___errno_location
.text:000000000000E2C0                 mov     [rbp+n], rax
.text:000000000000E2C7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000E2D0
.text:000000000000E2D0 loc_E2D0:                               ; CODE XREF: vasnprintf+17D↑j
.text:000000000000E2D0                 mov     rdi, r15        ; ptr
.text:000000000000E2D3                 call    _free
.text:000000000000E2D8                 jmp     loc_D7F3
.text:000000000000E2D8 ; ---------------------------------------------------------------------------
.text:000000000000E2DD                 align 20h
.text:000000000000E2E0
.text:000000000000E2E0 loc_E2E0:                               ; CODE XREF: vasnprintf+872↑j
.text:000000000000E2E0                 mov     r9, [rbp+var_3F0]
.text:000000000000E2E7                 mov     r8, [rbp+var_3D8]
.text:000000000000E2EE                 mov     rsi, r10
.text:000000000000E2F1                 mov     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E2F8                 mov     edx, 1
.text:000000000000E2FD                 mov     eax, 1
.text:000000000000E302                 mov     [rbp+var_430], r10
.text:000000000000E309                 call    ___snprintf_chk
.text:000000000000E30E                 mov     r10, [rbp+var_430]
.text:000000000000E315                 jmp     loc_DC36
.text:000000000000E315 ; ---------------------------------------------------------------------------
.text:000000000000E31A                 align 20h
.text:000000000000E320
.text:000000000000E320 loc_E320:                               ; CODE XREF: vasnprintf+7E8↑j
.text:000000000000E320                 sub     rsp, 10h
.text:000000000000E324                 mov     r9, [rbp+var_3F0]
.text:000000000000E32B                 fstp    [rsp+440h+var_440]
.text:000000000000E32E                 jmp     loc_DC09
.text:000000000000E32E ; ---------------------------------------------------------------------------
.text:000000000000E333                 align 8
.text:000000000000E338
.text:000000000000E338 loc_E338:                               ; CODE XREF: vasnprintf+4A3↑j
.text:000000000000E338                 js      loc_D7D5
.text:000000000000E33E                 add     r12, r12
.text:000000000000E341                 cmp     r12, rax
.text:000000000000E344                 jnb     loc_DB29
.text:000000000000E34A                 nop     word ptr [rax+rax+00h]
.text:000000000000E350
.text:000000000000E350 loc_E350:                               ; CODE XREF: vasnprintf+4AD↑j
.text:000000000000E350                                         ; vasnprintf+1114↓j
.text:000000000000E350                 test    rdx, rdx
.text:000000000000E353                 jnz     loc_D7D5
.text:000000000000E359                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E35D                 jz      loc_D7D5
.text:000000000000E363                 cmp     r15, [rbp+src]
.text:000000000000E36A                 mov     r12, rax
.text:000000000000E36D                 setz    dl
.text:000000000000E370                 test    r15, r15
.text:000000000000E373                 jnz     loc_DB3C
.text:000000000000E379                 nop     dword ptr [rax+00000000h]
.text:000000000000E380
.text:000000000000E380 loc_E380:                               ; CODE XREF: vasnprintf+4C6↑j
.text:000000000000E380                                         ; vasnprintf+4CE↑j
.text:000000000000E380                 mov     rdi, r12        ; size
.text:000000000000E383                 mov     byte ptr [rbp+n], dl
.text:000000000000E389                 call    _malloc
.text:000000000000E38E                 test    rax, rax
.text:000000000000E391                 mov     rcx, rax
.text:000000000000E394                 movzx   edx, byte ptr [rbp+n]
.text:000000000000E39B                 jz      loc_D7D5
.text:000000000000E3A1                 test    r14, r14
.text:000000000000E3A4                 jz      loc_E540
.text:000000000000E3AA                 test    dl, dl
.text:000000000000E3AC                 jz      loc_E540
.text:000000000000E3B2                 mov     rsi, r15        ; src
.text:000000000000E3B5                 mov     rdx, r14        ; n
.text:000000000000E3B8                 mov     rdi, rax        ; dest
.text:000000000000E3BB                 call    _memcpy
.text:000000000000E3C0                 mov     r15, rax
.text:000000000000E3C3                 jmp     loc_DB5B
.text:000000000000E3C3 ; ---------------------------------------------------------------------------
.text:000000000000E3C8                 align 10h
.text:000000000000E3D0
.text:000000000000E3D0 loc_E3D0:                               ; CODE XREF: vasnprintf+402↑j
.text:000000000000E3D0                 mov     byte ptr [rbx], 4Ch ; 'L'
.text:000000000000E3D3                 add     rbx, 1
.text:000000000000E3D7                 jmp     loc_DA8B
.text:000000000000E3D7 ; ---------------------------------------------------------------------------
.text:000000000000E3DC                 align 20h
.text:000000000000E3E0
.text:000000000000E3E0 loc_E3E0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000E3E0                                         ; DATA XREF: .rodata:jpt_E170↓o
.text:000000000000E3E0                 mov     [rax], r14b     ; jumptable 000000000000E170 case 18
.text:000000000000E3E3                 mov     rbx, r14
.text:000000000000E3E6                 jmp     loc_E104
.text:000000000000E3E6 ; ---------------------------------------------------------------------------
.text:000000000000E3EB                 align 10h
.text:000000000000E3F0
.text:000000000000E3F0 loc_E3F0:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000E3F0                                         ; DATA XREF: .rodata:jpt_E170↓o
.text:000000000000E3F0                 mov     [rax], r14d     ; jumptable 000000000000E170 case 20
.text:000000000000E3F3                 mov     rbx, r14
.text:000000000000E3F6                 jmp     loc_E104
.text:000000000000E3F6 ; ---------------------------------------------------------------------------
.text:000000000000E3FB                 align 20h
.text:000000000000E400
.text:000000000000E400 loc_E400:                               ; CODE XREF: vasnprintf+B00↑j
.text:000000000000E400                                         ; DATA XREF: .rodata:jpt_E170↓o
.text:000000000000E400                 mov     [rax], r14w     ; jumptable 000000000000E170 case 19
.text:000000000000E404                 mov     rbx, r14
.text:000000000000E407                 jmp     loc_E104
.text:000000000000E407 ; ---------------------------------------------------------------------------
.text:000000000000E40C                 align 10h
.text:000000000000E410
.text:000000000000E410 loc_E410:                               ; CODE XREF: vasnprintf+B33↑j
.text:000000000000E410                                         ; vasnprintf+B3B↑j
.text:000000000000E410                 mov     rdi, r12        ; size
.text:000000000000E413                 mov     byte ptr [rbp+n], dl
.text:000000000000E419                 call    _malloc
.text:000000000000E41E                 test    rax, rax
.text:000000000000E421                 mov     rcx, rax
.text:000000000000E424                 movzx   edx, byte ptr [rbp+n]
.text:000000000000E42B                 jz      loc_D7D5
.text:000000000000E431                 test    r14, r14
.text:000000000000E434                 jz      loc_E574
.text:000000000000E43A                 test    dl, dl
.text:000000000000E43C                 jz      loc_E574
.text:000000000000E442                 mov     rsi, r15        ; src
.text:000000000000E445                 mov     rdx, r14        ; n
.text:000000000000E448                 mov     rdi, rax        ; dest
.text:000000000000E44B                 call    _memcpy
.text:000000000000E450                 mov     r15, rax
.text:000000000000E453                 jmp     loc_E0FF
.text:000000000000E453 ; ---------------------------------------------------------------------------
.text:000000000000E458                 align 20h
.text:000000000000E460
.text:000000000000E460 loc_E460:                               ; CODE XREF: vasnprintf+BE8↑j
.text:000000000000E460                                         ; vasnprintf+BF0↑j
.text:000000000000E460                 mov     r15, r9
.text:000000000000E463                 jmp     loc_D914
.text:000000000000E463 ; ---------------------------------------------------------------------------
.text:000000000000E468                 align 10h
.text:000000000000E470
.text:000000000000E470 loc_E470:                               ; CODE XREF: vasnprintf+869↑j
.text:000000000000E470                 sub     rsp, 8
.text:000000000000E474                 push    [rbp+var_3F0]
.text:000000000000E47A                 jmp     loc_DEF5
.text:000000000000E47A ; ---------------------------------------------------------------------------
.text:000000000000E47F                 align 20h
.text:000000000000E480
.text:000000000000E480 loc_E480:                               ; CODE XREF: vasnprintf+7DF↑j
.text:000000000000E480                 sub     rsp, 8
.text:000000000000E484                 push    [rbp+var_3F0]
.text:000000000000E48A                 sub     rsp, 10h
.text:000000000000E48E                 fstp    [rsp+450h+var_450]
.text:000000000000E491                 jmp     loc_DFBB
.text:000000000000E491 ; ---------------------------------------------------------------------------
.text:000000000000E496                 align 20h
.text:000000000000E4A0
.text:000000000000E4A0 loc_E4A0:                               ; CODE XREF: vasnprintf+5FC↑j
.text:000000000000E4A0                 mov     rax, [rbp+n]
.text:000000000000E4A7                 mov     edi, [rbp-424h]
.text:000000000000E4AD                 movsxd  rbx, ecx
.text:000000000000E4B0                 add     rbx, r14
.text:000000000000E4B3                 mov     [rax], edi
.text:000000000000E4B5                 jmp     loc_E104
.text:000000000000E4B5 ; ---------------------------------------------------------------------------
.text:000000000000E4BA                 align 20h
.text:000000000000E4C0
.text:000000000000E4C0 loc_E4C0:                               ; CODE XREF: vasnprintf+609↑j
.text:000000000000E4C0                 cmp     r15, [rbp+src]
.text:000000000000E4C7                 jz      short loc_E4D2
.text:000000000000E4C9                 test    r15, r15
.text:000000000000E4CC                 jnz     loc_E589
.text:000000000000E4D2
.text:000000000000E4D2 loc_E4D2:                               ; CODE XREF: vasnprintf+E57↑j
.text:000000000000E4D2                                         ; vasnprintf+F21↓j
.text:000000000000E4D2                 mov     rax, [rbp+ptr]
.text:000000000000E4D9                 test    rax, rax
.text:000000000000E4DC                 jz      short loc_E4E6
.text:000000000000E4DE                 mov     rdi, rax        ; ptr
.text:000000000000E4E1                 call    _free
.text:000000000000E4E6
.text:000000000000E4E6 loc_E4E6:                               ; CODE XREF: vasnprintf+E6C↑j
.text:000000000000E4E6                 mov     rax, [rbp+var_408]
.text:000000000000E4ED                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000E4F4                 add     rax, 20h ; ' '
.text:000000000000E4F8                 cmp     rdi, rax
.text:000000000000E4FB                 jz      short loc_E502
.text:000000000000E4FD                 call    _free
.text:000000000000E502
.text:000000000000E502 loc_E502:                               ; CODE XREF: vasnprintf+E8B↑j
.text:000000000000E502                 mov     rax, [rbp+var_410]
.text:000000000000E509                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000E510                 add     rax, 10h
.text:000000000000E514                 cmp     rdi, rax
.text:000000000000E517                 jz      short loc_E51E
.text:000000000000E519                 call    _free
.text:000000000000E51E
.text:000000000000E51E loc_E51E:                               ; CODE XREF: vasnprintf+EA7↑j
.text:000000000000E51E                 mov     rax, [rbp+n]
.text:000000000000E525                 xor     r15d, r15d
.text:000000000000E528                 mov     dword ptr [rax], 4Bh ; 'K'
.text:000000000000E52E                 jmp     loc_D84F
.text:000000000000E52E ; ---------------------------------------------------------------------------
.text:000000000000E533                 align 8
.text:000000000000E538
.text:000000000000E538 loc_E538:                               ; CODE XREF: vasnprintf+60↑j
.text:000000000000E538                 xor     r15d, r15d
.text:000000000000E53B                 jmp     loc_D84F
.text:000000000000E540 ; ---------------------------------------------------------------------------
.text:000000000000E540
.text:000000000000E540 loc_E540:                               ; CODE XREF: vasnprintf+D34↑j
.text:000000000000E540                                         ; vasnprintf+D3C↑j
.text:000000000000E540                 mov     r15, rcx
.text:000000000000E543                 jmp     loc_DB5B
.text:000000000000E543 ; ---------------------------------------------------------------------------
.text:000000000000E548                 align 10h
.text:000000000000E550
.text:000000000000E550 loc_E550:                               ; CODE XREF: vasnprintf+B10↑j
.text:000000000000E550                 js      loc_D7D5
.text:000000000000E556                 add     r12, r12
.text:000000000000E559                 cmp     r12, rax
.text:000000000000E55C                 jnb     loc_E196
.text:000000000000E562
.text:000000000000E562 loc_E562:                               ; CODE XREF: vasnprintf+B1A↑j
.text:000000000000E562                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000E566                 jz      loc_D7D5
.text:000000000000E56C                 mov     r12, rax
.text:000000000000E56F                 jmp     loc_E196
.text:000000000000E574 ; ---------------------------------------------------------------------------
.text:000000000000E574
.text:000000000000E574 loc_E574:                               ; CODE XREF: vasnprintf+DC4↑j
.text:000000000000E574                                         ; vasnprintf+DCC↑j
.text:000000000000E574                 mov     r15, rcx
.text:000000000000E577                 jmp     loc_E0FF
.text:000000000000E57C ; ---------------------------------------------------------------------------
.text:000000000000E57C
.text:000000000000E57C loc_E57C:                               ; CODE XREF: vasnprintf+75C↑j
.text:000000000000E57C                 mov     rdi, r15        ; ptr
.text:000000000000E57F                 call    _free
.text:000000000000E584                 jmp     loc_DDD2
.text:000000000000E589 ; ---------------------------------------------------------------------------
.text:000000000000E589
.text:000000000000E589 loc_E589:                               ; CODE XREF: vasnprintf+E5C↑j
.text:000000000000E589                 mov     rdi, r15        ; ptr
.text:000000000000E58C                 call    _free
.text:000000000000E591                 jmp     loc_E4D2
.text:000000000000E596 ; ---------------------------------------------------------------------------
.text:000000000000E596
.text:000000000000E596 def_DBCB:                               ; CODE XREF: vasnprintf+2DD↑j
.text:000000000000E596                                         ; vasnprintf+43E↑j ...
.text:000000000000E596                 call    _abort          ; jumptable 000000000000DBCB default case, case 0
.text:000000000000E596                                         ; jumptable 000000000000E170 default case
.text:000000000000E596 ; ---------------------------------------------------------------------------
.text:000000000000E59B                 align 20h
.text:000000000000E5A0
.text:000000000000E5A0 loc_E5A0:                               ; CODE XREF: vasnprintf+73↑j
.text:000000000000E5A0                 mov     rax, [rbp+var_408]
.text:000000000000E5A7                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000E5AE                 add     rax, 20h ; ' '
.text:000000000000E5B2                 cmp     rdi, rax
.text:000000000000E5B5                 jz      short loc_E5BC
.text:000000000000E5B7                 call    _free
.text:000000000000E5BC
.text:000000000000E5BC loc_E5BC:                               ; CODE XREF: vasnprintf+F45↑j
.text:000000000000E5BC                 mov     rax, [rbp+var_410]
.text:000000000000E5C3                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000E5CA                 add     rax, 10h
.text:000000000000E5CE                 cmp     rdi, rax
.text:000000000000E5D1                 jz      short loc_E5D8
.text:000000000000E5D3                 call    _free
.text:000000000000E5D8
.text:000000000000E5D8 loc_E5D8:                               ; CODE XREF: vasnprintf+F61↑j
.text:000000000000E5D8                 call    ___errno_location
.text:000000000000E5DD                 xor     r15d, r15d
.text:000000000000E5E0                 mov     dword ptr [rax], 16h
.text:000000000000E5E6                 jmp     loc_D84F
.text:000000000000E5EB ; ---------------------------------------------------------------------------
.text:000000000000E5EB
.text:000000000000E5EB loc_E5EB:                               ; CODE XREF: vasnprintf+2C1↑j
.text:000000000000E5EB                 mov     rbx, r14
.text:000000000000E5EE                 xor     eax, eax
.text:000000000000E5F0                 add     rbx, 1
.text:000000000000E5F4                 jb      loc_E700
.text:000000000000E5FA                 cmp     r12, rbx
.text:000000000000E5FD                 jnb     short loc_E64C
.text:000000000000E5FF                 test    r12, r12
.text:000000000000E602                 jnz     loc_E739
.text:000000000000E608                 cmp     rbx, 0Ch
.text:000000000000E60C                 ja      loc_E71E
.text:000000000000E612                 mov     r12d, 0Ch
.text:000000000000E618
.text:000000000000E618 loc_E618:                               ; CODE XREF: vasnprintf+10C4↓j
.text:000000000000E618                                         ; vasnprintf+10D5↓j
.text:000000000000E618                 cmp     r15, [rbp+src]
.text:000000000000E61F                 setz    r13b
.text:000000000000E623                 test    r15, r15
.text:000000000000E626                 jz      loc_E6CC
.text:000000000000E62C                 test    r13b, r13b
.text:000000000000E62F                 jnz     loc_E6CC
.text:000000000000E635                 mov     rsi, r12        ; size
.text:000000000000E638                 mov     rdi, r15        ; ptr
.text:000000000000E63B                 call    _realloc
.text:000000000000E640                 test    rax, rax
.text:000000000000E643                 jz      loc_E2BB
.text:000000000000E649                 mov     r15, rax
.text:000000000000E64C
.text:000000000000E64C loc_E64C:                               ; CODE XREF: vasnprintf+F8D↑j
.text:000000000000E64C                                         ; vasnprintf+108B↓j ...
.text:000000000000E64C                 cmp     r15, [rbp+src]
.text:000000000000E653                 mov     byte ptr [r15+r14], 0
.text:000000000000E658                 jz      short loc_E671
.text:000000000000E65A                 cmp     r12, rbx
.text:000000000000E65D                 jbe     short loc_E671
.text:000000000000E65F                 mov     rdi, r15        ; ptr
.text:000000000000E662                 mov     rsi, rbx        ; size
.text:000000000000E665                 call    _realloc
.text:000000000000E66A                 test    rax, rax
.text:000000000000E66D                 cmovnz  r15, rax
.text:000000000000E671
.text:000000000000E671 loc_E671:                               ; CODE XREF: vasnprintf+FE8↑j
.text:000000000000E671                                         ; vasnprintf+FED↑j
.text:000000000000E671                 mov     rax, [rbp+ptr]
.text:000000000000E678                 test    rax, rax
.text:000000000000E67B                 jz      short loc_E685
.text:000000000000E67D                 mov     rdi, rax        ; ptr
.text:000000000000E680                 call    _free
.text:000000000000E685
.text:000000000000E685 loc_E685:                               ; CODE XREF: vasnprintf+100B↑j
.text:000000000000E685                 mov     rax, [rbp+var_408]
.text:000000000000E68C                 mov     rdi, [rbp+var_2B8] ; ptr
.text:000000000000E693                 add     rax, 20h ; ' '
.text:000000000000E697                 cmp     rdi, rax
.text:000000000000E69A                 jz      short loc_E6A1
.text:000000000000E69C                 call    _free
.text:000000000000E6A1
.text:000000000000E6A1 loc_E6A1:                               ; CODE XREF: vasnprintf+102A↑j
.text:000000000000E6A1                 mov     rax, [rbp+var_410]
.text:000000000000E6A8                 mov     rdi, [rbp+var_3A8] ; ptr
.text:000000000000E6AF                 add     rax, 10h
.text:000000000000E6B3                 cmp     rdi, rax
.text:000000000000E6B6                 jz      short loc_E6BD
.text:000000000000E6B8                 call    _free
.text:000000000000E6BD
.text:000000000000E6BD loc_E6BD:                               ; CODE XREF: vasnprintf+1046↑j
.text:000000000000E6BD                 mov     rax, [rbp+var_418]
.text:000000000000E6C4                 mov     [rax], r14
.text:000000000000E6C7                 jmp     loc_D84F
.text:000000000000E6CC ; ---------------------------------------------------------------------------
.text:000000000000E6CC
.text:000000000000E6CC loc_E6CC:                               ; CODE XREF: vasnprintf+FB6↑j
.text:000000000000E6CC                                         ; vasnprintf+FBF↑j
.text:000000000000E6CC                 mov     rdi, r12        ; size
.text:000000000000E6CF                 call    _malloc
.text:000000000000E6D4                 test    rax, rax
.text:000000000000E6D7                 mov     rcx, rax
.text:000000000000E6DA                 jz      loc_D7D5
.text:000000000000E6E0                 test    r14, r14
.text:000000000000E6E3                 jz      short loc_E750
.text:000000000000E6E5                 test    r13b, r13b
.text:000000000000E6E8                 jz      short loc_E750
.text:000000000000E6EA                 mov     rsi, r15        ; src
.text:000000000000E6ED                 mov     rdx, r14        ; n
.text:000000000000E6F0                 mov     rdi, rax        ; dest
.text:000000000000E6F3                 call    _memcpy
.text:000000000000E6F8                 mov     r15, rax
.text:000000000000E6FB                 jmp     loc_E64C
.text:000000000000E700 ; ---------------------------------------------------------------------------
.text:000000000000E700
.text:000000000000E700 loc_E700:                               ; CODE XREF: vasnprintf+F84↑j
.text:000000000000E700                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000E704                 mov     eax, 1
.text:000000000000E709                 jz      loc_E64C
.text:000000000000E70F                 test    r12, r12
.text:000000000000E712                 jz      loc_D7D5
.text:000000000000E718                 js      loc_D7D5
.text:000000000000E71E
.text:000000000000E71E loc_E71E:                               ; CODE XREF: vasnprintf+F9C↑j
.text:000000000000E71E                                         ; vasnprintf+10DB↓j
.text:000000000000E71E                 test    rax, rax
.text:000000000000E721                 jnz     loc_D7D5
.text:000000000000E727                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E72B                 jz      loc_D7D5
.text:000000000000E731                 mov     r12, rbx
.text:000000000000E734                 jmp     loc_E618
.text:000000000000E739 ; ---------------------------------------------------------------------------
.text:000000000000E739
.text:000000000000E739 loc_E739:                               ; CODE XREF: vasnprintf+F92↑j
.text:000000000000E739                 js      loc_D7D5
.text:000000000000E73F                 add     r12, r12
.text:000000000000E742                 cmp     r12, rbx
.text:000000000000E745                 jnb     loc_E618
.text:000000000000E74B                 jmp     short loc_E71E
.text:000000000000E74B ; ---------------------------------------------------------------------------
.text:000000000000E74D                 align 10h
.text:000000000000E750
.text:000000000000E750 loc_E750:                               ; CODE XREF: vasnprintf+1073↑j
.text:000000000000E750                                         ; vasnprintf+1078↑j
.text:000000000000E750                 mov     r15, rcx
.text:000000000000E753                 jmp     loc_E64C
.text:000000000000E758 ; ---------------------------------------------------------------------------
.text:000000000000E758
.text:000000000000E758 loc_E758:                               ; CODE XREF: vasnprintf+627↑j
.text:000000000000E758                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000E75C                 jz      loc_DB80
.text:000000000000E762                 jmp     loc_D7E1
.text:000000000000E767 ; ---------------------------------------------------------------------------
.text:000000000000E767
.text:000000000000E767 loc_E767:                               ; CODE XREF: vasnprintf+1EF↑j
.text:000000000000E767                 call    ___stack_chk_fail
.text:000000000000E76C ; ---------------------------------------------------------------------------
.text:000000000000E76C
.text:000000000000E76C loc_E76C:                               ; CODE XREF: vasnprintf+495↑j
.text:000000000000E76C                 cmp     r12, 0FFFFFFFFFFFFFFFFh
.text:000000000000E770                 mov     edx, 1
.text:000000000000E775                 jz      loc_DB5B
.text:000000000000E77B                 test    r12, r12
.text:000000000000E77E                 jz      loc_D7D5
.text:000000000000E784                 jns     loc_E350
.text:000000000000E78A                 jmp     loc_D7D5
.text:000000000000E78A ; } // starts at D670
.text:000000000000E78A vasnprintf      endp
.text:000000000000E78A
.text:000000000000E78A ; ---------------------------------------------------------------------------
.text:000000000000E78F                 align 10h
.text:000000000000E790
.text:000000000000E790 ; =============== S U B R O U T I N E =======================================
.text:000000000000E790
.text:000000000000E790
.text:000000000000E790                 public printf_fetchargs
.text:000000000000E790 printf_fetchargs proc near              ; CODE XREF: vasnprintf+6C↑p
.text:000000000000E790 ; __unwind {
.text:000000000000E790                 cmp     qword ptr [rsi], 0
.text:000000000000E794                 mov     rax, [rsi+8]
.text:000000000000E798                 jz      short loc_E7FD
.text:000000000000E79A                 lea     r8, jpt_E7C6
.text:000000000000E7A1                 lea     r10, wide_null_string_2696
.text:000000000000E7A8                 lea     r9, aNull       ; "(NULL)"
.text:000000000000E7AF                 xor     ecx, ecx
.text:000000000000E7B1                 nop     dword ptr [rax+00000000h]
.text:000000000000E7B8
.text:000000000000E7B8 loc_E7B8:                               ; CODE XREF: printf_fetchargs+6B↓j
.text:000000000000E7B8                 cmp     dword ptr [rax], 16h ; switch 23 cases
.text:000000000000E7BB                 ja      short def_E7C6  ; jumptable 000000000000E7C6 default case, case 0
.text:000000000000E7BD                 mov     edx, [rax]
.text:000000000000E7BF                 movsxd  rdx, ds:(jpt_E7C6 - 12020h)[r8+rdx*4]
.text:000000000000E7C3                 add     rdx, r8
.text:000000000000E7C6                 jmp     rdx             ; switch jump
.text:000000000000E7C6 ; ---------------------------------------------------------------------------
.text:000000000000E7C8                 align 10h
.text:000000000000E7D0
.text:000000000000E7D0 loc_E7D0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E7D0                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E7D0                 mov     rdx, [rdi+8]    ; jumptable 000000000000E7C6 case 12
.text:000000000000E7D4                 add     rdx, 0Fh
.text:000000000000E7D8                 and     rdx, 0FFFFFFFFFFFFFFF0h
.text:000000000000E7DC                 lea     r11, [rdx+10h]
.text:000000000000E7E0                 mov     [rdi+8], r11
.text:000000000000E7E4                 fld     tbyte ptr [rdx]
.text:000000000000E7E6                 fstp    tbyte ptr [rax+10h]
.text:000000000000E7E9                 nop     dword ptr [rax+00000000h]
.text:000000000000E7F0
.text:000000000000E7F0 loc_E7F0:                               ; CODE XREF: printf_fetchargs+98↓j
.text:000000000000E7F0                                         ; printf_fetchargs+BA↓j ...
.text:000000000000E7F0                 add     rcx, 1
.text:000000000000E7F4                 add     rax, 20h ; ' '
.text:000000000000E7F8                 cmp     [rsi], rcx
.text:000000000000E7FB                 ja      short loc_E7B8
.text:000000000000E7FD
.text:000000000000E7FD loc_E7FD:                               ; CODE XREF: printf_fetchargs+8↑j
.text:000000000000E7FD                 xor     eax, eax
.text:000000000000E7FF                 retn
.text:000000000000E800 ; ---------------------------------------------------------------------------
.text:000000000000E800
.text:000000000000E800 def_E7C6:                               ; CODE XREF: printf_fetchargs+2B↑j
.text:000000000000E800                                         ; printf_fetchargs+36↑j
.text:000000000000E800                                         ; DATA XREF: ...
.text:000000000000E800                 mov     eax, 0FFFFFFFFh ; jumptable 000000000000E7C6 default case, case 0
.text:000000000000E805                 retn
.text:000000000000E806 ; ---------------------------------------------------------------------------
.text:000000000000E806
.text:000000000000E806 loc_E806:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E806                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E806                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 cases 7-10,17-22
.text:000000000000E809                 cmp     r11d, 2Fh ; '/'
.text:000000000000E80D                 ja      loc_E94A
.text:000000000000E813                 mov     edx, r11d
.text:000000000000E816                 add     rdx, [rdi+10h]
.text:000000000000E81A                 add     r11d, 8
.text:000000000000E81E                 mov     [rdi], r11d
.text:000000000000E821
.text:000000000000E821 loc_E821:                               ; CODE XREF: printf_fetchargs+1C6↓j
.text:000000000000E821                 mov     rdx, [rdx]
.text:000000000000E824                 mov     [rax+10h], rdx
.text:000000000000E828                 jmp     short loc_E7F0
.text:000000000000E82A ; ---------------------------------------------------------------------------
.text:000000000000E82A
.text:000000000000E82A loc_E82A:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E82A                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E82A                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 cases 5,6,13,14
.text:000000000000E82D                 cmp     r11d, 2Fh ; '/'
.text:000000000000E831                 ja      loc_E96C
.text:000000000000E837                 mov     edx, r11d
.text:000000000000E83A                 add     rdx, [rdi+10h]
.text:000000000000E83E                 add     r11d, 8
.text:000000000000E842                 mov     [rdi], r11d
.text:000000000000E845
.text:000000000000E845 loc_E845:                               ; CODE XREF: printf_fetchargs+1E8↓j
.text:000000000000E845                 mov     edx, [rdx]
.text:000000000000E847                 mov     [rax+10h], edx
.text:000000000000E84A                 jmp     short loc_E7F0
.text:000000000000E84C ; ---------------------------------------------------------------------------
.text:000000000000E84C
.text:000000000000E84C loc_E84C:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E84C                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E84C                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 cases 1,2
.text:000000000000E84F                 cmp     r11d, 2Fh ; '/'
.text:000000000000E853                 ja      loc_E95B
.text:000000000000E859                 mov     edx, r11d
.text:000000000000E85C                 add     rdx, [rdi+10h]
.text:000000000000E860                 add     r11d, 8
.text:000000000000E864                 mov     [rdi], r11d
.text:000000000000E867
.text:000000000000E867 loc_E867:                               ; CODE XREF: printf_fetchargs+1D7↓j
.text:000000000000E867                 mov     edx, [rdx]
.text:000000000000E869                 mov     [rax+10h], dl
.text:000000000000E86C                 jmp     short loc_E7F0
.text:000000000000E86E ; ---------------------------------------------------------------------------
.text:000000000000E86E
.text:000000000000E86E loc_E86E:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E86E                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E86E                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 cases 3,4
.text:000000000000E871                 cmp     r11d, 2Fh ; '/'
.text:000000000000E875                 ja      loc_E91A
.text:000000000000E87B                 mov     edx, r11d
.text:000000000000E87E                 add     rdx, [rdi+10h]
.text:000000000000E882                 add     r11d, 8
.text:000000000000E886                 mov     [rdi], r11d
.text:000000000000E889
.text:000000000000E889 loc_E889:                               ; CODE XREF: printf_fetchargs+196↓j
.text:000000000000E889                 mov     edx, [rdx]
.text:000000000000E88B                 mov     [rax+10h], dx
.text:000000000000E88F                 jmp     loc_E7F0
.text:000000000000E894 ; ---------------------------------------------------------------------------
.text:000000000000E894
.text:000000000000E894 loc_E894:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E894                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E894                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 case 15
.text:000000000000E897                 cmp     r11d, 2Fh ; '/'
.text:000000000000E89B                 ja      loc_E92B
.text:000000000000E8A1                 mov     edx, r11d
.text:000000000000E8A4                 add     rdx, [rdi+10h]
.text:000000000000E8A8                 add     r11d, 8
.text:000000000000E8AC                 mov     [rdi], r11d
.text:000000000000E8AF
.text:000000000000E8AF loc_E8AF:                               ; CODE XREF: printf_fetchargs+1A7↓j
.text:000000000000E8AF                 mov     rdx, [rdx]
.text:000000000000E8B2                 test    rdx, rdx
.text:000000000000E8B5                 cmovz   rdx, r9
.text:000000000000E8B9                 mov     [rax+10h], rdx
.text:000000000000E8BD                 jmp     loc_E7F0
.text:000000000000E8C2 ; ---------------------------------------------------------------------------
.text:000000000000E8C2
.text:000000000000E8C2 loc_E8C2:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E8C2                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E8C2                 mov     r11d, [rdi+4]   ; jumptable 000000000000E7C6 case 11
.text:000000000000E8C6                 cmp     r11d, 0AFh
.text:000000000000E8CD                 ja      loc_E97D
.text:000000000000E8D3                 mov     edx, r11d
.text:000000000000E8D6                 add     rdx, [rdi+10h]
.text:000000000000E8DA                 add     r11d, 10h
.text:000000000000E8DE                 mov     [rdi+4], r11d
.text:000000000000E8E2
.text:000000000000E8E2 loc_E8E2:                               ; CODE XREF: printf_fetchargs+1F9↓j
.text:000000000000E8E2                 movsd   xmm0, qword ptr [rdx]
.text:000000000000E8E6                 movsd   qword ptr [rax+10h], xmm0
.text:000000000000E8EB                 jmp     loc_E7F0
.text:000000000000E8F0 ; ---------------------------------------------------------------------------
.text:000000000000E8F0
.text:000000000000E8F0 loc_E8F0:                               ; CODE XREF: printf_fetchargs+36↑j
.text:000000000000E8F0                                         ; DATA XREF: .rodata:jpt_E7C6↓o
.text:000000000000E8F0                 mov     r11d, [rdi]     ; jumptable 000000000000E7C6 case 16
.text:000000000000E8F3                 cmp     r11d, 2Fh ; '/'
.text:000000000000E8F7                 ja      short loc_E93C
.text:000000000000E8F9                 mov     edx, r11d
.text:000000000000E8FC                 add     rdx, [rdi+10h]
.text:000000000000E900                 add     r11d, 8
.text:000000000000E904                 mov     [rdi], r11d
.text:000000000000E907
.text:000000000000E907 loc_E907:                               ; CODE XREF: printf_fetchargs+1B8↓j
.text:000000000000E907                 mov     rdx, [rdx]
.text:000000000000E90A                 test    rdx, rdx
.text:000000000000E90D                 cmovz   rdx, r10
.text:000000000000E911                 mov     [rax+10h], rdx
.text:000000000000E915                 jmp     loc_E7F0
.text:000000000000E91A ; ---------------------------------------------------------------------------
.text:000000000000E91A
.text:000000000000E91A loc_E91A:                               ; CODE XREF: printf_fetchargs+E5↑j
.text:000000000000E91A                 mov     rdx, [rdi+8]
.text:000000000000E91E                 lea     r11, [rdx+8]
.text:000000000000E922                 mov     [rdi+8], r11
.text:000000000000E926                 jmp     loc_E889
.text:000000000000E92B ; ---------------------------------------------------------------------------
.text:000000000000E92B
.text:000000000000E92B loc_E92B:                               ; CODE XREF: printf_fetchargs+10B↑j
.text:000000000000E92B                 mov     rdx, [rdi+8]
.text:000000000000E92F                 lea     r11, [rdx+8]
.text:000000000000E933                 mov     [rdi+8], r11
.text:000000000000E937                 jmp     loc_E8AF
.text:000000000000E93C ; ---------------------------------------------------------------------------
.text:000000000000E93C
.text:000000000000E93C loc_E93C:                               ; CODE XREF: printf_fetchargs+167↑j
.text:000000000000E93C                 mov     rdx, [rdi+8]
.text:000000000000E940                 lea     r11, [rdx+8]
.text:000000000000E944                 mov     [rdi+8], r11
.text:000000000000E948                 jmp     short loc_E907
.text:000000000000E94A ; ---------------------------------------------------------------------------
.text:000000000000E94A
.text:000000000000E94A loc_E94A:                               ; CODE XREF: printf_fetchargs+7D↑j
.text:000000000000E94A                 mov     rdx, [rdi+8]
.text:000000000000E94E                 lea     r11, [rdx+8]
.text:000000000000E952                 mov     [rdi+8], r11
.text:000000000000E956                 jmp     loc_E821
.text:000000000000E95B ; ---------------------------------------------------------------------------
.text:000000000000E95B
.text:000000000000E95B loc_E95B:                               ; CODE XREF: printf_fetchargs+C3↑j
.text:000000000000E95B                 mov     rdx, [rdi+8]
.text:000000000000E95F                 lea     r11, [rdx+8]
.text:000000000000E963                 mov     [rdi+8], r11
.text:000000000000E967                 jmp     loc_E867
.text:000000000000E96C ; ---------------------------------------------------------------------------
.text:000000000000E96C
.text:000000000000E96C loc_E96C:                               ; CODE XREF: printf_fetchargs+A1↑j
.text:000000000000E96C                 mov     rdx, [rdi+8]
.text:000000000000E970                 lea     r11, [rdx+8]
.text:000000000000E974                 mov     [rdi+8], r11
.text:000000000000E978                 jmp     loc_E845
.text:000000000000E97D ; ---------------------------------------------------------------------------
.text:000000000000E97D
.text:000000000000E97D loc_E97D:                               ; CODE XREF: printf_fetchargs+13D↑j
.text:000000000000E97D                 mov     rdx, [rdi+8]
.text:000000000000E981                 lea     r11, [rdx+8]
.text:000000000000E985                 mov     [rdi+8], r11
.text:000000000000E989                 jmp     loc_E8E2
.text:000000000000E989 ; } // starts at E790
.text:000000000000E989 printf_fetchargs endp
.text:000000000000E989
.text:000000000000E989 ; ---------------------------------------------------------------------------
.text:000000000000E98E                 align 10h
.text:000000000000E990 ; File Name   : /home/ig/disk_vd/vdtests/input/x64_upacks_151/9b7ebdf6382e17b3d79a9c42c370bb6b
.text:000000000000E990 ; Format      : ELF64 for x86-64 (Relocatable)
.text:000000000000E990 ;
.text:000000000000E990 ; Source File : 'printf-parse.c'
.text:000000000000E990
.text:000000000000E990 ; =============== S U B R O U T I N E =======================================
.text:000000000000E990
.text:000000000000E990 ; Attributes: info_from_lumina
.text:000000000000E990
.text:000000000000E990 ; int __fastcall printf_parse(const char *format, char_directives *d, arguments *a)
.text:000000000000E990                 public printf_parse
.text:000000000000E990 printf_parse    proc near               ; CODE XREF: vasnprintf+59↑p
.text:000000000000E990
.text:000000000000E990 src             = qword ptr -80h
.text:000000000000E990 var_78          = qword ptr -78h
.text:000000000000E990 var_70          = qword ptr -70h
.text:000000000000E990 var_68          = qword ptr -68h
.text:000000000000E990 var_60          = qword ptr -60h
.text:000000000000E990 var_58          = qword ptr -58h
.text:000000000000E990 var_50          = qword ptr -50h
.text:000000000000E990 var_48          = qword ptr -48h
.text:000000000000E990 var_40          = qword ptr -40h
.text:000000000000E990
.text:000000000000E990 ; __unwind {
.text:000000000000E990                 push    r15
.text:000000000000E992                 push    r14
.text:000000000000E994                 lea     rcx, [rsi+20h]
.text:000000000000E998                 push    r13
.text:000000000000E99A                 push    r12
.text:000000000000E99C                 lea     rax, [rdx+10h]
.text:000000000000E9A0                 push    rbp
.text:000000000000E9A1                 push    rbx
.text:000000000000E9A2                 mov     r14, rsi
.text:000000000000E9A5                 mov     r15, rdx
.text:000000000000E9A8                 xor     ebx, ebx
.text:000000000000E9AA                 mov     r9d, 7
.text:000000000000E9B0                 sub     rsp, 58h
.text:000000000000E9B4                 mov     r10d, 7
.text:000000000000E9BA                 mov     qword ptr [rsi], 0
.text:000000000000E9C1                 mov     [rsi+8], rcx
.text:000000000000E9C5                 mov     [rsp+88h+var_60], rcx
.text:000000000000E9CA                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000E9D1                 mov     qword ptr [rdx], 0
.text:000000000000E9D8                 mov     [rsp+88h+src], rax
.text:000000000000E9DD                 mov     [rdx+8], rax
.text:000000000000E9E1                 mov     [rsp+88h+var_70], 0
.text:000000000000E9EA                 mov     [rsp+88h+var_78], 0
.text:000000000000E9F3                 mov     [rsp+88h+var_68], 0
.text:000000000000E9FC                 jmp     short loc_EA0B
.text:000000000000E9FC ; ---------------------------------------------------------------------------
.text:000000000000E9FE                 align 20h
.text:000000000000EA00
.text:000000000000EA00 loc_EA00:                               ; CODE XREF: printf_parse+80↓j
.text:000000000000EA00                 cmp     al, 25h ; '%'
.text:000000000000EA02                 lea     rbp, [rdi+1]
.text:000000000000EA06                 jz      short loc_EA48
.text:000000000000EA08
.text:000000000000EA08 loc_EA08:                               ; CODE XREF: printf_parse+35B↓j
.text:000000000000EA08                                         ; printf_parse+364↓j
.text:000000000000EA08                 mov     rdi, rbp
.text:000000000000EA0B
.text:000000000000EA0B loc_EA0B:                               ; CODE XREF: printf_parse+6C↑j
.text:000000000000EA0B                 movzx   eax, byte ptr [rdi]
.text:000000000000EA0E                 test    al, al
.text:000000000000EA10                 jnz     short loc_EA00
.text:000000000000EA12                 lea     rax, [rbx+rbx*4]
.text:000000000000EA16                 lea     rax, [rbx+rax*2]
.text:000000000000EA1A                 mov     [rcx+rax*8], rdi
.text:000000000000EA1E                 mov     rax, [rsp+88h+var_78]
.text:000000000000EA23                 mov     [r14+10h], rax
.text:000000000000EA27                 mov     rax, [rsp+88h+var_70]
.text:000000000000EA2C                 mov     [r14+18h], rax
.text:000000000000EA30                 xor     eax, eax
.text:000000000000EA32
.text:000000000000EA32 loc_EA32:                               ; CODE XREF: printf_parse+87E↓j
.text:000000000000EA32                                         ; printf_parse+B1C↓j
.text:000000000000EA32                 add     rsp, 58h
.text:000000000000EA36                 pop     rbx
.text:000000000000EA37                 pop     rbp
.text:000000000000EA38                 pop     r12
.text:000000000000EA3A                 pop     r13
.text:000000000000EA3C                 pop     r14
.text:000000000000EA3E                 pop     r15
.text:000000000000EA40                 retn
.text:000000000000EA40 ; ---------------------------------------------------------------------------
.text:000000000000EA41                 align 8
.text:000000000000EA48
.text:000000000000EA48 loc_EA48:                               ; CODE XREF: printf_parse+76↑j
.text:000000000000EA48                 lea     rax, [rbx+rbx*4]
.text:000000000000EA4C                 mov     r13, r8
.text:000000000000EA4F                 lea     rax, [rbx+rax*2]
.text:000000000000EA53                 lea     r12, [rcx+rax*8]
.text:000000000000EA57                 mov     [r12], rdi
.text:000000000000EA5B                 mov     dword ptr [r12+10h], 0
.text:000000000000EA64                 mov     qword ptr [r12+18h], 0
.text:000000000000EA6D                 mov     qword ptr [r12+20h], 0
.text:000000000000EA76                 mov     [r12+28h], r8
.text:000000000000EA7B                 mov     qword ptr [r12+30h], 0
.text:000000000000EA84                 mov     qword ptr [r12+38h], 0
.text:000000000000EA8D                 mov     [r12+40h], r8
.text:000000000000EA92                 mov     [r12+50h], r8
.text:000000000000EA97                 movzx   ebx, byte ptr [rdi+1]
.text:000000000000EA9B                 lea     eax, [rbx-30h]
.text:000000000000EA9E                 cmp     al, 9
.text:000000000000EAA0                 ja      short loc_EADE
.text:000000000000EAA2                 jmp     loc_EEDA
.text:000000000000EAA2 ; ---------------------------------------------------------------------------
.text:000000000000EAA7                 align 10h
.text:000000000000EAB0
.text:000000000000EAB0 loc_EAB0:                               ; CODE XREF: printf_parse+158↓j
.text:000000000000EAB0                 cmp     bl, 2Dh ; '-'
.text:000000000000EAB3                 jz      short loc_EAF8
.text:000000000000EAB5                 cmp     bl, 2Bh ; '+'
.text:000000000000EAB8                 jz      short loc_EB00
.text:000000000000EABA                 cmp     bl, 20h ; ' '
.text:000000000000EABD                 jz      short loc_EB10
.text:000000000000EABF                 cmp     bl, 23h ; '#'
.text:000000000000EAC2                 jz      short loc_EB20
.text:000000000000EAC4                 cmp     bl, 30h ; '0'
.text:000000000000EAC7                 jz      short loc_EB30
.text:000000000000EAC9                 cmp     bl, 49h ; 'I'
.text:000000000000EACC                 jnz     short loc_EB40
.text:000000000000EACE                 or      dword ptr [r12+10h], 40h
.text:000000000000EAD4                 nop     dword ptr [rax+00h]
.text:000000000000EAD8
.text:000000000000EAD8 loc_EAD8:                               ; CODE XREF: printf_parse+160↓j
.text:000000000000EAD8                                         ; printf_parse+16E↓j ...
.text:000000000000EAD8                 movzx   ebx, byte ptr [rax]
.text:000000000000EADB                 mov     rbp, rax
.text:000000000000EADE
.text:000000000000EADE loc_EADE:                               ; CODE XREF: printf_parse+110↑j
.text:000000000000EADE                                         ; printf_parse+565↓j ...
.text:000000000000EADE                 lea     rax, [rbp+1]
.text:000000000000EAE2                 cmp     bl, 27h ; '''
.text:000000000000EAE5                 mov     rdx, rax
.text:000000000000EAE8                 jnz     short loc_EAB0
.text:000000000000EAEA                 or      dword ptr [r12+10h], 1
.text:000000000000EAF0                 jmp     short loc_EAD8
.text:000000000000EAF0 ; ---------------------------------------------------------------------------
.text:000000000000EAF2                 align 8
.text:000000000000EAF8
.text:000000000000EAF8 loc_EAF8:                               ; CODE XREF: printf_parse+123↑j
.text:000000000000EAF8                 or      dword ptr [r12+10h], 2
.text:000000000000EAFE                 jmp     short loc_EAD8
.text:000000000000EB00 ; ---------------------------------------------------------------------------
.text:000000000000EB00
.text:000000000000EB00 loc_EB00:                               ; CODE XREF: printf_parse+128↑j
.text:000000000000EB00                 or      dword ptr [r12+10h], 4
.text:000000000000EB06                 jmp     short loc_EAD8
.text:000000000000EB06 ; ---------------------------------------------------------------------------
.text:000000000000EB08                 align 10h
.text:000000000000EB10
.text:000000000000EB10 loc_EB10:                               ; CODE XREF: printf_parse+12D↑j
.text:000000000000EB10                 or      dword ptr [r12+10h], 8
.text:000000000000EB16                 jmp     short loc_EAD8
.text:000000000000EB16 ; ---------------------------------------------------------------------------
.text:000000000000EB18                 align 20h
.text:000000000000EB20
.text:000000000000EB20 loc_EB20:                               ; CODE XREF: printf_parse+132↑j
.text:000000000000EB20                 or      dword ptr [r12+10h], 10h
.text:000000000000EB26                 jmp     short loc_EAD8
.text:000000000000EB26 ; ---------------------------------------------------------------------------
.text:000000000000EB28                 align 10h
.text:000000000000EB30
.text:000000000000EB30 loc_EB30:                               ; CODE XREF: printf_parse+137↑j
.text:000000000000EB30                 or      dword ptr [r12+10h], 20h
.text:000000000000EB36                 jmp     short loc_EAD8
.text:000000000000EB36 ; ---------------------------------------------------------------------------
.text:000000000000EB38                 align 20h
.text:000000000000EB40
.text:000000000000EB40 loc_EB40:                               ; CODE XREF: printf_parse+13C↑j
.text:000000000000EB40                 cmp     bl, 2Ah ; '*'
.text:000000000000EB43                 jz      loc_ECF9
.text:000000000000EB49                 lea     ecx, [rbx-30h]
.text:000000000000EB4C                 cmp     cl, 9
.text:000000000000EB4F                 jbe     loc_EF67
.text:000000000000EB55
.text:000000000000EB55 loc_EB55:                               ; CODE XREF: printf_parse+629↓j
.text:000000000000EB55                                         ; printf_parse+96C↓j
.text:000000000000EB55                 cmp     bl, 2Eh ; '.'
.text:000000000000EB58                 jz      loc_EE2F
.text:000000000000EB5E
.text:000000000000EB5E loc_EB5E:                               ; CODE XREF: printf_parse+499↓j
.text:000000000000EB5E                                         ; printf_parse+545↓j ...
.text:000000000000EB5E                 xor     eax, eax
.text:000000000000EB60                 mov     esi, 1
.text:000000000000EB65                 jmp     short loc_EB97
.text:000000000000EB65 ; ---------------------------------------------------------------------------
.text:000000000000EB67                 align 10h
.text:000000000000EB70
.text:000000000000EB70 loc_EB70:                               ; CODE XREF: printf_parse+20E↓j
.text:000000000000EB70                 cmp     bl, 4Ch ; 'L'
.text:000000000000EB73                 jz      short loc_EBB0
.text:000000000000EB75                 cmp     bl, 6Ch ; 'l'
.text:000000000000EB78                 jz      short loc_EB90
.text:000000000000EB7A                 cmp     bl, 6Ah ; 'j'
.text:000000000000EB7D                 jz      short loc_EB90
.text:000000000000EB7F                 mov     edx, ebx
.text:000000000000EB81                 and     edx, 0FFFFFFDFh
.text:000000000000EB84                 cmp     dl, 5Ah ; 'Z'
.text:000000000000EB87                 jz      short loc_EB90
.text:000000000000EB89                 cmp     bl, 74h ; 't'
.text:000000000000EB8C                 jnz     short loc_EBB8
.text:000000000000EB8E                 xchg    ax, ax
.text:000000000000EB90
.text:000000000000EB90 loc_EB90:                               ; CODE XREF: printf_parse+1E8↑j
.text:000000000000EB90                                         ; printf_parse+1ED↑j ...
.text:000000000000EB90                 add     eax, 8
.text:000000000000EB93
.text:000000000000EB93 loc_EB93:                               ; CODE XREF: printf_parse+21B↓j
.text:000000000000EB93                                         ; printf_parse+223↓j
.text:000000000000EB93                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000EB97
.text:000000000000EB97 loc_EB97:                               ; CODE XREF: printf_parse+1D5↑j
.text:000000000000EB97                 add     rbp, 1
.text:000000000000EB9B                 cmp     bl, 68h ; 'h'
.text:000000000000EB9E                 jnz     short loc_EB70
.text:000000000000EBA0                 mov     ecx, eax
.text:000000000000EBA2                 mov     edx, esi
.text:000000000000EBA4                 and     ecx, 1
.text:000000000000EBA7                 shl     edx, cl
.text:000000000000EBA9                 or      eax, edx
.text:000000000000EBAB                 jmp     short loc_EB93
.text:000000000000EBAB ; ---------------------------------------------------------------------------
.text:000000000000EBAD                 align 10h
.text:000000000000EBB0
.text:000000000000EBB0 loc_EBB0:                               ; CODE XREF: printf_parse+1E3↑j
.text:000000000000EBB0                 or      eax, 4
.text:000000000000EBB3                 jmp     short loc_EB93
.text:000000000000EBB3 ; ---------------------------------------------------------------------------
.text:000000000000EBB5                 align 8
.text:000000000000EBB8
.text:000000000000EBB8 loc_EBB8:                               ; CODE XREF: printf_parse+1FC↑j
.text:000000000000EBB8                 lea     edx, [rbx-25h]  ; switch 84 cases
.text:000000000000EBBB                 cmp     dl, 53h
.text:000000000000EBBE                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EBC4                 lea     rcx, jpt_EBD5
.text:000000000000EBCB                 movzx   edx, dl
.text:000000000000EBCE                 movsxd  rdx, ds:(jpt_EBD5 - 1209Ch)[rcx+rdx*4]
.text:000000000000EBD2                 add     rdx, rcx
.text:000000000000EBD5                 jmp     rdx             ; switch jump
.text:000000000000EBD7 ; ---------------------------------------------------------------------------
.text:000000000000EBD7
.text:000000000000EBD7 loc_EBD7:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EBD7                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000EBD7                 mov     r11d, 10h       ; jumptable 0000000000000245 case 83
.text:000000000000EBDD                 mov     ebx, 73h ; 's'
.text:000000000000EBE2                 nop     word ptr [rax+rax+00h]
.text:000000000000EBE8
.text:000000000000EBE8 loc_EBE8:                               ; CODE XREF: printf_parse+705↓j
.text:000000000000EBE8                                         ; printf_parse+70D↓j ...
.text:000000000000EBE8                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:000000000000EBEC                 jz      loc_F2A7
.text:000000000000EBF2                 mov     [r12+50h], r13
.text:000000000000EBF7
.text:000000000000EBF7 loc_EBF7:                               ; CODE XREF: printf_parse+939↓j
.text:000000000000EBF7                 cmp     r9, r13
.text:000000000000EBFA                 mov     rcx, [r15+8]
.text:000000000000EBFE                 jbe     loc_F220
.text:000000000000EC04
.text:000000000000EC04 loc_EC04:                               ; CODE XREF: printf_parse+912↓j
.text:000000000000EC04                 mov     rax, [r15]
.text:000000000000EC07                 mov     rdx, rax
.text:000000000000EC0A                 shl     rdx, 5
.text:000000000000EC0E                 add     rdx, rcx
.text:000000000000EC11                 cmp     rax, r13
.text:000000000000EC14                 ja      short loc_EC36
.text:000000000000EC16                 db      2Eh
.text:000000000000EC16                 nop     word ptr [rax+rax+00000000h]
.text:000000000000EC20
.text:000000000000EC20 loc_EC20:                               ; CODE XREF: printf_parse+2A1↓j
.text:000000000000EC20                 add     rax, 1
.text:000000000000EC24                 mov     dword ptr [rdx], 0
.text:000000000000EC2A                 add     rdx, 20h ; ' '
.text:000000000000EC2E                 cmp     rax, r13
.text:000000000000EC31                 jbe     short loc_EC20
.text:000000000000EC33                 mov     [r15], rax
.text:000000000000EC36
.text:000000000000EC36 loc_EC36:                               ; CODE XREF: printf_parse+284↑j
.text:000000000000EC36                 shl     r13, 5
.text:000000000000EC3A                 lea     rax, [rcx+r13]
.text:000000000000EC3E                 mov     edx, [rax]
.text:000000000000EC40                 test    edx, edx
.text:000000000000EC42                 jnz     loc_F213
.text:000000000000EC48                 mov     [rax], r11d
.text:000000000000EC4B
.text:000000000000EC4B loc_EC4B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000EC4B                                         ; printf_parse+886↓j
.text:000000000000EC4B                                         ; DATA XREF: ...
.text:000000000000EC4B                 mov     [r12+48h], bl   ; jumptable 0000000000000245 case 37
.text:000000000000EC50                 mov     rax, [r14]
.text:000000000000EC53                 mov     [r12+8], rbp
.text:000000000000EC58                 lea     rbx, [rax+1]
.text:000000000000EC5C                 cmp     r10, rbx
.text:000000000000EC5F                 mov     [r14], rbx
.text:000000000000EC62                 ja      loc_ECF0
.text:000000000000EC68                 test    r10, r10
.text:000000000000EC6B                 js      loc_F617
.text:000000000000EC71                 add     r10, r10
.text:000000000000EC74                 mov     rax, 2E8BA2E8BA2E8BAh
.text:000000000000EC7E                 cmp     r10, rax
.text:000000000000EC81                 ja      loc_F617
.text:000000000000EC87                 lea     rax, [r10+r10*4]
.text:000000000000EC8B                 mov     rdi, [r14+8]    ; ptr
.text:000000000000EC8F                 cmp     [rsp+88h+var_60], rdi
.text:000000000000EC94                 mov     [rsp+88h+var_48], r9
.text:000000000000EC99                 mov     [rsp+88h+var_50], r10
.text:000000000000EC9E                 lea     rax, [r10+rax*2]
.text:000000000000ECA2                 mov     [rsp+88h+var_58], r8
.text:000000000000ECA7                 lea     rsi, ds:0[rax*8] ; size
.text:000000000000ECAF                 jz      loc_F36D
.text:000000000000ECB5                 call    _realloc        ; PIC mode
.text:000000000000ECBA                 test    rax, rax
.text:000000000000ECBD                 mov     rcx, rax
.text:000000000000ECC0                 mov     r8, [rsp+88h+var_58]
.text:000000000000ECC5                 mov     r10, [rsp+88h+var_50]
.text:000000000000ECCA                 mov     r9, [rsp+88h+var_48]
.text:000000000000ECCF                 jz      loc_F617
.text:000000000000ECD5                 mov     rax, [rsp+88h+var_60]
.text:000000000000ECDA                 cmp     rax, [r14+8]
.text:000000000000ECDE                 mov     rbx, [r14]
.text:000000000000ECE1                 jz      loc_F390
.text:000000000000ECE7
.text:000000000000ECE7 loc_ECE7:                               ; CODE XREF: printf_parse+A3D↓j
.text:000000000000ECE7                 mov     [r14+8], rcx
.text:000000000000ECEB                 jmp     loc_EA08
.text:000000000000ECF0 ; ---------------------------------------------------------------------------
.text:000000000000ECF0
.text:000000000000ECF0 loc_ECF0:                               ; CODE XREF: printf_parse+2D2↑j
.text:000000000000ECF0                 mov     rcx, [r14+8]
.text:000000000000ECF4                 jmp     loc_EA08
.text:000000000000ECF9 ; ---------------------------------------------------------------------------
.text:000000000000ECF9
.text:000000000000ECF9 loc_ECF9:                               ; CODE XREF: printf_parse+1B3↑j
.text:000000000000ECF9                 mov     rsi, [rsp+88h+var_78]
.text:000000000000ECFE                 mov     ecx, 1
.text:000000000000ED03                 mov     [r12+18h], rbp
.text:000000000000ED08                 mov     [r12+20h], rax
.text:000000000000ED0D                 test    rsi, rsi
.text:000000000000ED10                 cmovnz  rcx, rsi
.text:000000000000ED14                 mov     [rsp+88h+var_78], rcx
.text:000000000000ED19                 movzx   ecx, byte ptr [rbp+1]
.text:000000000000ED1D                 lea     esi, [rcx-30h]
.text:000000000000ED20                 cmp     sil, 9
.text:000000000000ED24                 jbe     loc_F005
.text:000000000000ED2A
.text:000000000000ED2A loc_ED2A:                               ; CODE XREF: printf_parse+68D↓j
.text:000000000000ED2A                 mov     rsi, [rsp+88h+var_68]
.text:000000000000ED2F                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000ED33                 lea     rdx, [rsi+1]
.text:000000000000ED37                 mov     [r12+28h], rsi
.text:000000000000ED3C                 jz      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000ED42                 mov     rbx, [rsp+88h+var_68]
.text:000000000000ED47                 mov     rbp, rax
.text:000000000000ED4A                 mov     [rsp+88h+var_68], rdx
.text:000000000000ED4F
.text:000000000000ED4F loc_ED4F:                               ; CODE XREF: printf_parse+6F7↓j
.text:000000000000ED4F                 cmp     r9, rbx
.text:000000000000ED52                 mov     rcx, [r15+8]
.text:000000000000ED56                 ja      loc_F3D2
.text:000000000000ED5C                 add     r9, r9
.text:000000000000ED5F                 lea     rax, [rbx+1]
.text:000000000000ED63                 cmp     r9, rbx
.text:000000000000ED66                 cmovbe  r9, rax
.text:000000000000ED6A                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000ED74                 cmp     r9, rax
.text:000000000000ED77                 ja      loc_F61B
.text:000000000000ED7D                 mov     rsi, r9
.text:000000000000ED80                 mov     [rsp+88h+var_48], r9
.text:000000000000ED85                 mov     [rsp+88h+var_50], r10
.text:000000000000ED8A                 shl     rsi, 5          ; size
.text:000000000000ED8E                 cmp     [rsp+88h+src], rcx
.text:000000000000ED93                 mov     [rsp+88h+var_58], r8
.text:000000000000ED98                 jz      loc_F4B1
.text:000000000000ED9E                 mov     rdi, rcx        ; ptr
.text:000000000000EDA1                 call    _realloc        ; PIC mode
.text:000000000000EDA6                 mov     rdx, [r15+8]
.text:000000000000EDAA                 mov     r8, [rsp+88h+var_58]
.text:000000000000EDAF                 mov     rcx, rax
.text:000000000000EDB2                 mov     r10, [rsp+88h+var_50]
.text:000000000000EDB7                 mov     r9, [rsp+88h+var_48]
.text:000000000000EDBC
.text:000000000000EDBC loc_EDBC:                               ; CODE XREF: printf_parse+B40↓j
.text:000000000000EDBC                 test    rcx, rcx
.text:000000000000EDBF                 jz      loc_F677
.text:000000000000EDC5                 cmp     [rsp+88h+src], rdx
.text:000000000000EDCA                 mov     rax, [r15]
.text:000000000000EDCD                 jz      loc_F58B
.text:000000000000EDD3
.text:000000000000EDD3 loc_EDD3:                               ; CODE XREF: printf_parse+C33↓j
.text:000000000000EDD3                 mov     [r15+8], rcx
.text:000000000000EDD7
.text:000000000000EDD7 loc_EDD7:                               ; CODE XREF: printf_parse+A45↓j
.text:000000000000EDD7                 mov     rdx, rax
.text:000000000000EDDA                 shl     rdx, 5
.text:000000000000EDDE                 add     rdx, rcx
.text:000000000000EDE1                 cmp     rax, rbx
.text:000000000000EDE4                 ja      short loc_EE06
.text:000000000000EDE6                 db      2Eh
.text:000000000000EDE6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000EDF0
.text:000000000000EDF0 loc_EDF0:                               ; CODE XREF: printf_parse+471↓j
.text:000000000000EDF0                 add     rax, 1
.text:000000000000EDF4                 mov     dword ptr [rdx], 0
.text:000000000000EDFA                 add     rdx, 20h ; ' '
.text:000000000000EDFE                 cmp     rax, rbx
.text:000000000000EE01                 jbe     short loc_EDF0
.text:000000000000EE03                 mov     [r15], rax
.text:000000000000EE06
.text:000000000000EE06 loc_EE06:                               ; CODE XREF: printf_parse+454↑j
.text:000000000000EE06                 shl     rbx, 5
.text:000000000000EE0A                 lea     rax, [rcx+rbx]
.text:000000000000EE0E                 mov     edx, [rax]
.text:000000000000EE10                 test    edx, edx
.text:000000000000EE12                 jnz     loc_F2EB
.text:000000000000EE18                 mov     dword ptr [rax], 5
.text:000000000000EE1E                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000EE22                 lea     rdx, [rbp+1]
.text:000000000000EE26                 cmp     bl, 2Eh ; '.'
.text:000000000000EE29                 jnz     loc_EB5E
.text:000000000000EE2F
.text:000000000000EE2F loc_EE2F:                               ; CODE XREF: printf_parse+1C8↑j
.text:000000000000EE2F                 cmp     byte ptr [rbp+1], 2Ah ; '*'
.text:000000000000EE33                 mov     [r12+30h], rbp
.text:000000000000EE38                 jnz     loc_EFBE
.text:000000000000EE3E                 mov     rsi, [rsp+88h+var_70]
.text:000000000000EE43                 lea     r11, [rbp+2]
.text:000000000000EE47                 mov     eax, 2
.text:000000000000EE4C                 mov     [r12+38h], r11
.text:000000000000EE51                 cmp     rsi, 2
.text:000000000000EE55                 cmovnb  rax, rsi
.text:000000000000EE59                 mov     [rsp+88h+var_70], rax
.text:000000000000EE5E                 movsx   eax, byte ptr [rbp+2]
.text:000000000000EE62                 lea     edx, [rax-30h]
.text:000000000000EE65                 cmp     dl, 9
.text:000000000000EE68                 jbe     loc_F4FC
.text:000000000000EE6E
.text:000000000000EE6E loc_EE6E:                               ; CODE XREF: printf_parse+B82↓j
.text:000000000000EE6E                 mov     rbx, [r12+40h]
.text:000000000000EE73                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000EE77                 jz      loc_F4D5
.text:000000000000EE7D
.text:000000000000EE7D loc_EE7D:                               ; CODE XREF: printf_parse+B67↓j
.text:000000000000EE7D                                         ; printf_parse+C59↓j
.text:000000000000EE7D                 cmp     r9, rbx
.text:000000000000EE80                 mov     rcx, [r15+8]
.text:000000000000EE84                 jbe     loc_F3EF
.text:000000000000EE8A                 mov     rax, [r15]
.text:000000000000EE8D
.text:000000000000EE8D loc_EE8D:                               ; CODE XREF: printf_parse+AE4↓j
.text:000000000000EE8D                 mov     rdx, rax
.text:000000000000EE90                 shl     rdx, 5
.text:000000000000EE94                 add     rdx, rcx
.text:000000000000EE97                 cmp     rax, rbx
.text:000000000000EE9A                 ja      short loc_EEB6
.text:000000000000EE9C                 nop     dword ptr [rax+00h]
.text:000000000000EEA0
.text:000000000000EEA0 loc_EEA0:                               ; CODE XREF: printf_parse+521↓j
.text:000000000000EEA0                 add     rax, 1
.text:000000000000EEA4                 mov     dword ptr [rdx], 0
.text:000000000000EEAA                 add     rdx, 20h ; ' '
.text:000000000000EEAE                 cmp     rax, rbx
.text:000000000000EEB1                 jbe     short loc_EEA0
.text:000000000000EEB3                 mov     [r15], rax
.text:000000000000EEB6
.text:000000000000EEB6 loc_EEB6:                               ; CODE XREF: printf_parse+50A↑j
.text:000000000000EEB6                 shl     rbx, 5
.text:000000000000EEBA                 lea     rax, [rcx+rbx]
.text:000000000000EEBE                 mov     edx, [rax]
.text:000000000000EEC0                 test    edx, edx
.text:000000000000EEC2                 jnz     loc_F3DA
.text:000000000000EEC8                 mov     dword ptr [rax], 5
.text:000000000000EECE                 mov     rbp, r11
.text:000000000000EED1                 movzx   ebx, byte ptr [r11]
.text:000000000000EED5                 jmp     loc_EB5E
.text:000000000000EEDA ; ---------------------------------------------------------------------------
.text:000000000000EEDA
.text:000000000000EEDA loc_EEDA:                               ; CODE XREF: printf_parse+112↑j
.text:000000000000EEDA                 mov     rax, rbp
.text:000000000000EEDD                 nop     dword ptr [rax]
.text:000000000000EEE0
.text:000000000000EEE0 loc_EEE0:                               ; CODE XREF: printf_parse+55D↓j
.text:000000000000EEE0                 add     rax, 1
.text:000000000000EEE4                 movzx   edx, byte ptr [rax]
.text:000000000000EEE7                 lea     ecx, [rdx-30h]
.text:000000000000EEEA                 cmp     cl, 9
.text:000000000000EEED                 jbe     short loc_EEE0
.text:000000000000EEEF                 cmp     dl, 24h ; '$'
.text:000000000000EEF2                 mov     r13, r8
.text:000000000000EEF5                 jnz     loc_EADE
.text:000000000000EEFB                 xor     edx, edx
.text:000000000000EEFD
.text:000000000000EEFD loc_EEFD:                               ; CODE XREF: printf_parse+5B7↓j
.text:000000000000EEFD                 movsx   eax, bl
.text:000000000000EF00                 mov     rdi, 1999999999999999h
.text:000000000000EF0A                 mov     rsi, r8
.text:000000000000EF0D                 sub     eax, 30h ; '0'
.text:000000000000EF10                 cmp     rdx, rdi
.text:000000000000EF13                 cdqe
.text:000000000000EF15                 ja      short loc_EF1E
.text:000000000000EF17                 lea     rsi, [rdx+rdx*4]
.text:000000000000EF1B                 add     rsi, rsi
.text:000000000000EF1E
.text:000000000000EF1E loc_EF1E:                               ; CODE XREF: printf_parse+585↑j
.text:000000000000EF1E                 mov     rcx, rbp
.text:000000000000EF21
.text:000000000000EF21 loc_EF21:                               ; CODE XREF: printf_parse+956↓j
.text:000000000000EF21                 add     rax, rsi
.text:000000000000EF24                 movzx   ebx, byte ptr [rbp+1]
.text:000000000000EF28                 setb    sil
.text:000000000000EF2C                 add     rbp, 1
.text:000000000000EF30                 mov     rdx, rax
.text:000000000000EF33                 movzx   esi, sil
.text:000000000000EF37                 test    rsi, rsi
.text:000000000000EF3A                 lea     edi, [rbx-30h]
.text:000000000000EF3D                 jnz     loc_F2CE
.text:000000000000EF43                 cmp     dil, 9
.text:000000000000EF47                 jbe     short loc_EEFD
.text:000000000000EF49                 mov     r13, rax
.text:000000000000EF4C                 sub     r13, 1
.text:000000000000EF50                 cmp     r13, 0FFFFFFFFFFFFFFFDh
.text:000000000000EF54                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000EF5A                 lea     rbp, [rcx+2]
.text:000000000000EF5E                 movzx   ebx, byte ptr [rcx+2]
.text:000000000000EF62                 jmp     loc_EADE
.text:000000000000EF67 ; ---------------------------------------------------------------------------
.text:000000000000EF67
.text:000000000000EF67 loc_EF67:                               ; CODE XREF: printf_parse+1BF↑j
.text:000000000000EF67                 mov     [r12+18h], rbp
.text:000000000000EF6C                 movzx   edi, byte ptr [rbp+0]
.text:000000000000EF70                 mov     rsi, rbp
.text:000000000000EF73                 lea     ecx, [rdi-30h]
.text:000000000000EF76                 cmp     cl, 9
.text:000000000000EF79                 jbe     short loc_EF87
.text:000000000000EF7B                 jmp     short loc_EFB0
.text:000000000000EF7B ; ---------------------------------------------------------------------------
.text:000000000000EF7D                 align 20h
.text:000000000000EF80
.text:000000000000EF80 loc_EF80:                               ; CODE XREF: printf_parse+600↓j
.text:000000000000EF80                 mov     rbp, rax
.text:000000000000EF83                 add     rax, 1
.text:000000000000EF87
.text:000000000000EF87 loc_EF87:                               ; CODE XREF: printf_parse+5E9↑j
.text:000000000000EF87                 movzx   edi, byte ptr [rax]
.text:000000000000EF8A                 lea     edx, [rdi-30h]
.text:000000000000EF8D                 cmp     dl, 9
.text:000000000000EF90                 jbe     short loc_EF80
.text:000000000000EF92                 mov     rcx, rax
.text:000000000000EF95                 lea     rdx, [rbp+2]
.text:000000000000EF99                 mov     rbp, rax
.text:000000000000EF9C                 sub     rcx, rsi
.text:000000000000EF9F                 mov     rsi, [rsp+88h+var_78]
.text:000000000000EFA4                 cmp     rsi, rcx
.text:000000000000EFA7                 cmovnb  rcx, rsi
.text:000000000000EFAB                 mov     [rsp+88h+var_78], rcx
.text:000000000000EFB0
.text:000000000000EFB0 loc_EFB0:                               ; CODE XREF: printf_parse+5EB↑j
.text:000000000000EFB0                 mov     [r12+20h], rbp
.text:000000000000EFB5                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000EFB9                 jmp     loc_EB55
.text:000000000000EFBE ; ---------------------------------------------------------------------------
.text:000000000000EFBE
.text:000000000000EFBE loc_EFBE:                               ; CODE XREF: printf_parse+4A8↑j
.text:000000000000EFBE                 movzx   eax, byte ptr [rbp+1]
.text:000000000000EFC2                 sub     eax, 30h ; '0'
.text:000000000000EFC5                 cmp     al, 9
.text:000000000000EFC7                 ja      short loc_EFDE
.text:000000000000EFC9                 nop     dword ptr [rax+00000000h]
.text:000000000000EFD0
.text:000000000000EFD0 loc_EFD0:                               ; CODE XREF: printf_parse+64C↓j
.text:000000000000EFD0                 add     rdx, 1
.text:000000000000EFD4                 movzx   eax, byte ptr [rdx]
.text:000000000000EFD7                 sub     eax, 30h ; '0'
.text:000000000000EFDA                 cmp     al, 9
.text:000000000000EFDC                 jbe     short loc_EFD0
.text:000000000000EFDE
.text:000000000000EFDE loc_EFDE:                               ; CODE XREF: printf_parse+637↑j
.text:000000000000EFDE                 mov     rsi, [rsp+88h+var_70]
.text:000000000000EFE3                 mov     rax, rdx
.text:000000000000EFE6                 mov     [r12+38h], rdx
.text:000000000000EFEB                 sub     rax, rbp
.text:000000000000EFEE                 movzx   ebx, byte ptr [rdx]
.text:000000000000EFF1                 mov     rbp, rdx
.text:000000000000EFF4                 cmp     rsi, rax
.text:000000000000EFF7                 cmovnb  rax, rsi
.text:000000000000EFFB                 mov     [rsp+88h+var_70], rax
.text:000000000000F000                 jmp     loc_EB5E
.text:000000000000F005 ; ---------------------------------------------------------------------------
.text:000000000000F005
.text:000000000000F005 loc_F005:                               ; CODE XREF: printf_parse+394↑j
.text:000000000000F005                 mov     rsi, rax
.text:000000000000F008
.text:000000000000F008 loc_F008:                               ; CODE XREF: printf_parse+687↓j
.text:000000000000F008                 add     rsi, 1
.text:000000000000F00C                 movzx   edi, byte ptr [rsi]
.text:000000000000F00F                 lea     r11d, [rdi-30h]
.text:000000000000F013                 cmp     r11b, 9
.text:000000000000F017                 jbe     short loc_F008
.text:000000000000F019                 cmp     dil, 24h ; '$'
.text:000000000000F01D                 jnz     loc_ED2A
.text:000000000000F023                 xor     esi, esi
.text:000000000000F025
.text:000000000000F025 loc_F025:                               ; CODE XREF: printf_parse+6DE↓j
.text:000000000000F025                 movsx   eax, cl
.text:000000000000F028                 mov     rdi, 1999999999999999h
.text:000000000000F032                 mov     rcx, r8
.text:000000000000F035                 sub     eax, 30h ; '0'
.text:000000000000F038                 cmp     rsi, rdi
.text:000000000000F03B                 cdqe
.text:000000000000F03D                 ja      short loc_F046
.text:000000000000F03F                 lea     rcx, [rsi+rsi*4]
.text:000000000000F043                 add     rcx, rcx
.text:000000000000F046
.text:000000000000F046 loc_F046:                               ; CODE XREF: printf_parse+6AD↑j
.text:000000000000F046                 mov     rbp, rdx
.text:000000000000F049
.text:000000000000F049 loc_F049:                               ; CODE XREF: printf_parse+BF6↓j
.text:000000000000F049                 xor     r11d, r11d
.text:000000000000F04C                 add     rax, rcx
.text:000000000000F04F                 movzx   ecx, byte ptr [rdx+1]
.text:000000000000F053                 setb    r11b
.text:000000000000F057                 add     rdx, 1
.text:000000000000F05B                 mov     rsi, rax
.text:000000000000F05E                 test    r11, r11
.text:000000000000F061                 lea     edi, [rcx-30h]
.text:000000000000F064                 jnz     loc_F56E
.text:000000000000F06A                 cmp     dil, 9
.text:000000000000F06E                 jbe     short loc_F025
.text:000000000000F070                 lea     rbx, [rax-1]
.text:000000000000F074                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000F078                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F07E                 mov     [r12+28h], rbx
.text:000000000000F083                 add     rbp, 2
.text:000000000000F087                 jmp     loc_ED4F
.text:000000000000F08C ; ---------------------------------------------------------------------------
.text:000000000000F08C
.text:000000000000F08C loc_F08C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F08C                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F08C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 case 110
.text:000000000000F08F                 mov     r11d, 16h
.text:000000000000F095                 jg      loc_EBE8
.text:000000000000F09B                 test    al, 4
.text:000000000000F09D                 jnz     loc_EBE8
.text:000000000000F0A3                 cmp     eax, 7
.text:000000000000F0A6                 mov     r11d, 15h
.text:000000000000F0AC                 jg      loc_EBE8
.text:000000000000F0B2                 test    al, 2
.text:000000000000F0B4                 mov     r11d, 12h
.text:000000000000F0BA                 jnz     loc_EBE8
.text:000000000000F0C0                 xor     r11d, r11d
.text:000000000000F0C3                 test    al, 1
.text:000000000000F0C5                 setz    r11b
.text:000000000000F0C9                 add     r11d, 13h
.text:000000000000F0CD                 jmp     loc_EBE8
.text:000000000000F0CD ; ---------------------------------------------------------------------------
.text:000000000000F0D2                 align 8
.text:000000000000F0D8
.text:000000000000F0D8 loc_F0D8:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F0D8                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F0D8                 xor     r11d, r11d      ; jumptable 0000000000000245 case 99
.text:000000000000F0DB                 cmp     eax, 7
.text:000000000000F0DE                 setnle  r11b
.text:000000000000F0E2                 add     r11d, 0Dh
.text:000000000000F0E6                 jmp     loc_EBE8
.text:000000000000F0EB ; ---------------------------------------------------------------------------
.text:000000000000F0EB
.text:000000000000F0EB loc_F0EB:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F0EB                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F0EB                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 100,105
.text:000000000000F0EE                 mov     r11d, 9
.text:000000000000F0F4                 jg      loc_EBE8
.text:000000000000F0FA                 test    al, 4
.text:000000000000F0FC                 jnz     loc_EBE8
.text:000000000000F102                 cmp     eax, 7
.text:000000000000F105                 mov     r11d, 7
.text:000000000000F10B                 jg      loc_EBE8
.text:000000000000F111                 test    al, 2
.text:000000000000F113                 mov     r11d, 1
.text:000000000000F119                 jnz     loc_EBE8
.text:000000000000F11F                 and     eax, 1
.text:000000000000F122                 cmp     eax, 1
.text:000000000000F125                 sbb     r11d, r11d
.text:000000000000F128                 and     r11d, 2
.text:000000000000F12C                 add     r11d, 3
.text:000000000000F130                 jmp     loc_EBE8
.text:000000000000F130 ; ---------------------------------------------------------------------------
.text:000000000000F135                 align 8
.text:000000000000F138
.text:000000000000F138 loc_F138:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F138                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F138                 xor     r11d, r11d      ; jumptable 0000000000000245 case 115
.text:000000000000F13B                 cmp     eax, 7
.text:000000000000F13E                 setnle  r11b
.text:000000000000F142                 add     r11d, 0Fh
.text:000000000000F146                 jmp     loc_EBE8
.text:000000000000F14B ; ---------------------------------------------------------------------------
.text:000000000000F14B
.text:000000000000F14B loc_F14B:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F14B                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F14B                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 65,69-71,97,101-103
.text:000000000000F14E                 mov     r11d, 0Ch
.text:000000000000F154                 jg      loc_EBE8
.text:000000000000F15A                 xor     r11d, r11d
.text:000000000000F15D                 test    al, 4
.text:000000000000F15F                 setnz   r11b
.text:000000000000F163                 add     r11d, 0Bh
.text:000000000000F167                 jmp     loc_EBE8
.text:000000000000F16C ; ---------------------------------------------------------------------------
.text:000000000000F16C
.text:000000000000F16C loc_F16C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F16C                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F16C                 mov     r11d, 0Eh       ; jumptable 0000000000000245 case 67
.text:000000000000F172                 mov     ebx, 63h ; 'c'
.text:000000000000F177                 jmp     loc_EBE8
.text:000000000000F17C ; ---------------------------------------------------------------------------
.text:000000000000F17C
.text:000000000000F17C loc_F17C:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F17C                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F17C                 cmp     eax, 0Fh        ; jumptable 0000000000000245 cases 88,111,117,120
.text:000000000000F17F                 mov     r11d, 0Ah
.text:000000000000F185                 jg      loc_EBE8
.text:000000000000F18B                 test    al, 4
.text:000000000000F18D                 jnz     loc_EBE8
.text:000000000000F193                 cmp     eax, 7
.text:000000000000F196                 mov     r11d, 8
.text:000000000000F19C                 jg      loc_EBE8
.text:000000000000F1A2                 test    al, 2
.text:000000000000F1A4                 mov     r11d, 2
.text:000000000000F1AA                 jnz     loc_EBE8
.text:000000000000F1B0                 and     eax, 1
.text:000000000000F1B3                 cmp     eax, 1
.text:000000000000F1B6                 sbb     r11d, r11d
.text:000000000000F1B9                 and     r11d, 2
.text:000000000000F1BD                 add     r11d, 4
.text:000000000000F1C1                 jmp     loc_EBE8
.text:000000000000F1C1 ; ---------------------------------------------------------------------------
.text:000000000000F1C6                 align 10h
.text:000000000000F1D0
.text:000000000000F1D0 loc_F1D0:                               ; CODE XREF: printf_parse+245↑j
.text:000000000000F1D0                                         ; DATA XREF: .rodata:jpt_EBD5↓o
.text:000000000000F1D0                 mov     r11d, 11h       ; jumptable 0000000000000245 case 112
.text:000000000000F1D6                 jmp     loc_EBE8
.text:000000000000F1DB ; ---------------------------------------------------------------------------
.text:000000000000F1DB
.text:000000000000F1DB def_EBD5:                               ; CODE XREF: printf_parse+22E↑j
.text:000000000000F1DB                                         ; printf_parse+245↑j ...
.text:000000000000F1DB                 mov     rcx, [r15+8]    ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F1DF
.text:000000000000F1DF loc_F1DF:                               ; CODE XREF: printf_parse+88C↓j
.text:000000000000F1DF                                         ; printf_parse+95E↓j ...
.text:000000000000F1DF                 cmp     [rsp+88h+src], rcx
.text:000000000000F1E4                 jz      short loc_F1EE
.text:000000000000F1E6                 mov     rdi, rcx        ; ptr
.text:000000000000F1E9                 call    _free           ; PIC mode
.text:000000000000F1EE
.text:000000000000F1EE loc_F1EE:                               ; CODE XREF: printf_parse+854↑j
.text:000000000000F1EE                 mov     rdi, [r14+8]    ; ptr
.text:000000000000F1F2                 cmp     [rsp+88h+var_60], rdi
.text:000000000000F1F7                 jz      short loc_F1FE
.text:000000000000F1F9                 call    _free           ; PIC mode
.text:000000000000F1FE
.text:000000000000F1FE loc_F1FE:                               ; CODE XREF: printf_parse+867↑j
.text:000000000000F1FE                 call    ___errno_location ; PIC mode
.text:000000000000F203                 mov     dword ptr [rax], 16h
.text:000000000000F209                 mov     eax, 0FFFFFFFFh
.text:000000000000F20E                 jmp     loc_EA32
.text:000000000000F213 ; ---------------------------------------------------------------------------
.text:000000000000F213
.text:000000000000F213 loc_F213:                               ; CODE XREF: printf_parse+2B2↑j
.text:000000000000F213                 cmp     edx, r11d
.text:000000000000F216                 jz      loc_EC4B        ; jumptable 0000000000000245 case 37
.text:000000000000F21C                 jmp     short loc_F1DF
.text:000000000000F21C ; ---------------------------------------------------------------------------
.text:000000000000F21E                 align 20h
.text:000000000000F220
.text:000000000000F220 loc_F220:                               ; CODE XREF: printf_parse+26E↑j
.text:000000000000F220                 add     r9, r9
.text:000000000000F223                 lea     rax, [r13+1]
.text:000000000000F227                 cmp     r9, r13
.text:000000000000F22A                 cmovbe  r9, rax
.text:000000000000F22E                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000F238                 cmp     r9, rax
.text:000000000000F23B                 ja      loc_F61B
.text:000000000000F241                 mov     rsi, r9
.text:000000000000F244                 mov     [rsp+88h+var_40], r9
.text:000000000000F249                 mov     [rsp+88h+var_48], r10
.text:000000000000F24E                 shl     rsi, 5          ; size
.text:000000000000F252                 cmp     [rsp+88h+src], rcx
.text:000000000000F257                 mov     [rsp+88h+var_50], r8
.text:000000000000F25C                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000F261                 jz      loc_F301
.text:000000000000F267                 mov     rdi, rcx        ; ptr
.text:000000000000F26A                 call    _realloc        ; PIC mode
.text:000000000000F26F                 test    rax, rax
.text:000000000000F272                 mov     rcx, rax
.text:000000000000F275                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000F27A                 mov     r8, [rsp+88h+var_50]
.text:000000000000F27F                 mov     r10, [rsp+88h+var_48]
.text:000000000000F284                 mov     r9, [rsp+88h+var_40]
.text:000000000000F289                 jz      loc_F617
.text:000000000000F28F                 mov     rax, [rsp+88h+src]
.text:000000000000F294                 cmp     rax, [r15+8]
.text:000000000000F298                 jz      loc_F329
.text:000000000000F29E
.text:000000000000F29E loc_F29E:                               ; CODE XREF: printf_parse+9D8↓j
.text:000000000000F29E                 mov     [r15+8], rcx
.text:000000000000F2A2                 jmp     loc_EC04
.text:000000000000F2A7 ; ---------------------------------------------------------------------------
.text:000000000000F2A7
.text:000000000000F2A7 loc_F2A7:                               ; CODE XREF: printf_parse+25C↑j
.text:000000000000F2A7                 mov     rsi, [rsp+88h+var_68]
.text:000000000000F2AC                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000F2B0                 lea     rax, [rsi+1]
.text:000000000000F2B4                 mov     [r12+50h], rsi
.text:000000000000F2B9                 jz      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F2BF                 mov     r13, [rsp+88h+var_68]
.text:000000000000F2C4                 mov     [rsp+88h+var_68], rax
.text:000000000000F2C9                 jmp     loc_EBF7
.text:000000000000F2CE ; ---------------------------------------------------------------------------
.text:000000000000F2CE
.text:000000000000F2CE loc_F2CE:                               ; CODE XREF: printf_parse+5AD↑j
.text:000000000000F2CE                 cmp     dil, 9
.text:000000000000F2D2                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F2D8                 movsx   eax, bl
.text:000000000000F2DB                 mov     rsi, r8
.text:000000000000F2DE                 mov     rcx, rbp
.text:000000000000F2E1                 sub     eax, 30h ; '0'
.text:000000000000F2E4                 cdqe
.text:000000000000F2E6                 jmp     loc_EF21
.text:000000000000F2EB ; ---------------------------------------------------------------------------
.text:000000000000F2EB
.text:000000000000F2EB loc_F2EB:                               ; CODE XREF: printf_parse+482↑j
.text:000000000000F2EB                 cmp     edx, 5
.text:000000000000F2EE                 jnz     loc_F1DF
.text:000000000000F2F4                 movzx   ebx, byte ptr [rbp+0]
.text:000000000000F2F8                 lea     rdx, [rbp+1]
.text:000000000000F2FC                 jmp     loc_EB55
.text:000000000000F301 ; ---------------------------------------------------------------------------
.text:000000000000F301
.text:000000000000F301 loc_F301:                               ; CODE XREF: printf_parse+8D1↑j
.text:000000000000F301                 mov     rdi, rsi        ; size
.text:000000000000F304                 call    _malloc         ; PIC mode
.text:000000000000F309                 test    rax, rax
.text:000000000000F30C                 mov     rcx, rax
.text:000000000000F30F                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000F314                 mov     r8, [rsp+88h+var_50]
.text:000000000000F319                 mov     r10, [rsp+88h+var_48]
.text:000000000000F31E                 mov     r9, [rsp+88h+var_40]
.text:000000000000F323                 jz      loc_F48C
.text:000000000000F329
.text:000000000000F329 loc_F329:                               ; CODE XREF: printf_parse+908↑j
.text:000000000000F329                 mov     rdx, [r15]
.text:000000000000F32C                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000F331                 mov     rdi, rcx        ; dest
.text:000000000000F334                 mov     [rsp+88h+var_40], r9
.text:000000000000F339                 mov     [rsp+88h+var_48], r10
.text:000000000000F33E                 mov     [rsp+88h+var_50], r8
.text:000000000000F343                 mov     dword ptr [rsp+88h+var_58], r11d
.text:000000000000F348                 shl     rdx, 5          ; n
.text:000000000000F34C                 call    _memcpy         ; PIC mode
.text:000000000000F351                 mov     r9, [rsp+88h+var_40]
.text:000000000000F356                 mov     r10, [rsp+88h+var_48]
.text:000000000000F35B                 mov     rcx, rax
.text:000000000000F35E                 mov     r8, [rsp+88h+var_50]
.text:000000000000F363                 mov     r11d, dword ptr [rsp+88h+var_58]
.text:000000000000F368                 jmp     loc_F29E
.text:000000000000F36D ; ---------------------------------------------------------------------------
.text:000000000000F36D
.text:000000000000F36D loc_F36D:                               ; CODE XREF: printf_parse+31F↑j
.text:000000000000F36D                 mov     rdi, rsi        ; size
.text:000000000000F370                 call    _malloc         ; PIC mode
.text:000000000000F375                 test    rax, rax
.text:000000000000F378                 mov     rcx, rax
.text:000000000000F37B                 mov     r8, [rsp+88h+var_58]
.text:000000000000F380                 mov     r10, [rsp+88h+var_50]
.text:000000000000F385                 mov     r9, [rsp+88h+var_48]
.text:000000000000F38A                 jz      loc_F479
.text:000000000000F390
.text:000000000000F390 loc_F390:                               ; CODE XREF: printf_parse+351↑j
.text:000000000000F390                 lea     rax, [rbx+rbx*4]
.text:000000000000F394                 mov     rsi, [rsp+88h+var_60] ; src
.text:000000000000F399                 mov     rdi, rcx        ; dest
.text:000000000000F39C                 mov     [rsp+88h+var_48], r9
.text:000000000000F3A1                 mov     [rsp+88h+var_50], r10
.text:000000000000F3A6                 lea     rdx, [rbx+rax*2]
.text:000000000000F3AA                 mov     [rsp+88h+var_58], r8
.text:000000000000F3AF                 shl     rdx, 3          ; n
.text:000000000000F3B3                 call    _memcpy         ; PIC mode
.text:000000000000F3B8                 mov     rbx, [r14]
.text:000000000000F3BB                 mov     rcx, rax
.text:000000000000F3BE                 mov     r9, [rsp+88h+var_48]
.text:000000000000F3C3                 mov     r10, [rsp+88h+var_50]
.text:000000000000F3C8                 mov     r8, [rsp+88h+var_58]
.text:000000000000F3CD                 jmp     loc_ECE7
.text:000000000000F3D2 ; ---------------------------------------------------------------------------
.text:000000000000F3D2
.text:000000000000F3D2 loc_F3D2:                               ; CODE XREF: printf_parse+3C6↑j
.text:000000000000F3D2                 mov     rax, [r15]
.text:000000000000F3D5                 jmp     loc_EDD7
.text:000000000000F3DA ; ---------------------------------------------------------------------------
.text:000000000000F3DA
.text:000000000000F3DA loc_F3DA:                               ; CODE XREF: printf_parse+532↑j
.text:000000000000F3DA                 cmp     edx, 5
.text:000000000000F3DD                 jnz     loc_F1DF
.text:000000000000F3E3                 movzx   ebx, byte ptr [r11]
.text:000000000000F3E7                 mov     rbp, r11
.text:000000000000F3EA                 jmp     loc_EB5E
.text:000000000000F3EF ; ---------------------------------------------------------------------------
.text:000000000000F3EF
.text:000000000000F3EF loc_F3EF:                               ; CODE XREF: printf_parse+4F4↑j
.text:000000000000F3EF                 add     r9, r9
.text:000000000000F3F2                 lea     rax, [rbx+1]
.text:000000000000F3F6                 cmp     r9, rbx
.text:000000000000F3F9                 cmovbe  r9, rax
.text:000000000000F3FD                 mov     rax, 7FFFFFFFFFFFFFFh
.text:000000000000F407                 cmp     r9, rax
.text:000000000000F40A                 ja      loc_F61B
.text:000000000000F410                 mov     rsi, r9
.text:000000000000F413                 mov     [rsp+88h+var_40], r9
.text:000000000000F418                 mov     [rsp+88h+var_48], r10
.text:000000000000F41D                 shl     rsi, 5          ; size
.text:000000000000F421                 cmp     [rsp+88h+src], rcx
.text:000000000000F426                 mov     [rsp+88h+var_50], r8
.text:000000000000F42B                 mov     [rsp+88h+var_58], r11
.text:000000000000F430                 jz      loc_F5EE
.text:000000000000F436                 mov     rdi, rcx        ; ptr
.text:000000000000F439                 call    _realloc        ; PIC mode
.text:000000000000F43E                 mov     rdx, [r15+8]
.text:000000000000F442                 mov     r11, [rsp+88h+var_58]
.text:000000000000F447                 mov     rcx, rax
.text:000000000000F44A                 mov     r8, [rsp+88h+var_50]
.text:000000000000F44F                 mov     r10, [rsp+88h+var_48]
.text:000000000000F454                 mov     r9, [rsp+88h+var_40]
.text:000000000000F459
.text:000000000000F459 loc_F459:                               ; CODE XREF: printf_parse+C82↓j
.text:000000000000F459                 test    rcx, rcx
.text:000000000000F45C                 jz      loc_F677
.text:000000000000F462                 cmp     [rsp+88h+src], rdx
.text:000000000000F467                 mov     rax, [r15]
.text:000000000000F46A                 jz      loc_F630
.text:000000000000F470
.text:000000000000F470 loc_F470:                               ; CODE XREF: printf_parse+CE2↓j
.text:000000000000F470                 mov     [r15+8], rcx
.text:000000000000F474                 jmp     loc_EE8D
.text:000000000000F479 ; ---------------------------------------------------------------------------
.text:000000000000F479
.text:000000000000F479 loc_F479:                               ; CODE XREF: printf_parse+9FA↑j
.text:000000000000F479                 mov     rcx, [r15+8]
.text:000000000000F47D                 cmp     [rsp+88h+src], rcx
.text:000000000000F482                 jz      short loc_F49C
.text:000000000000F484
.text:000000000000F484 loc_F484:                               ; CODE XREF: printf_parse+C90↓j
.text:000000000000F484                 mov     rdi, rcx        ; ptr
.text:000000000000F487                 call    _free           ; PIC mode
.text:000000000000F48C
.text:000000000000F48C loc_F48C:                               ; CODE XREF: printf_parse+993↑j
.text:000000000000F48C                                         ; printf_parse+C96↓j
.text:000000000000F48C                 mov     rdi, [r14+8]    ; ptr
.text:000000000000F490                 cmp     [rsp+88h+var_60], rdi
.text:000000000000F495                 jz      short loc_F49C
.text:000000000000F497                 call    _free           ; PIC mode
.text:000000000000F49C
.text:000000000000F49C loc_F49C:                               ; CODE XREF: printf_parse+AF2↑j
.text:000000000000F49C                                         ; printf_parse+B05↑j
.text:000000000000F49C                 call    ___errno_location ; PIC mode
.text:000000000000F4A1                 mov     dword ptr [rax], 0Ch
.text:000000000000F4A7                 mov     eax, 0FFFFFFFFh
.text:000000000000F4AC                 jmp     loc_EA32
.text:000000000000F4B1 ; ---------------------------------------------------------------------------
.text:000000000000F4B1
.text:000000000000F4B1 loc_F4B1:                               ; CODE XREF: printf_parse+408↑j
.text:000000000000F4B1                 mov     rdi, rsi        ; size
.text:000000000000F4B4                 call    _malloc         ; PIC mode
.text:000000000000F4B9                 mov     rdx, [rsp+88h+src]
.text:000000000000F4BE                 mov     rcx, rax
.text:000000000000F4C1                 mov     r9, [rsp+88h+var_48]
.text:000000000000F4C6                 mov     r10, [rsp+88h+var_50]
.text:000000000000F4CB                 mov     r8, [rsp+88h+var_58]
.text:000000000000F4D0                 jmp     loc_EDBC
.text:000000000000F4D5 ; ---------------------------------------------------------------------------
.text:000000000000F4D5
.text:000000000000F4D5 loc_F4D5:                               ; CODE XREF: printf_parse+4E7↑j
.text:000000000000F4D5                 mov     rsi, [rsp+88h+var_68]
.text:000000000000F4DA                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000F4DE                 lea     rax, [rsi+1]
.text:000000000000F4E2                 mov     [r12+40h], rsi
.text:000000000000F4E7                 jz      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F4ED                 mov     rbx, [rsp+88h+var_68]
.text:000000000000F4F2                 mov     [rsp+88h+var_68], rax
.text:000000000000F4F7                 jmp     loc_EE7D
.text:000000000000F4FC ; ---------------------------------------------------------------------------
.text:000000000000F4FC
.text:000000000000F4FC loc_F4FC:                               ; CODE XREF: printf_parse+4D8↑j
.text:000000000000F4FC                 mov     rdx, r11
.text:000000000000F4FF
.text:000000000000F4FF loc_F4FF:                               ; CODE XREF: printf_parse+B7D↓j
.text:000000000000F4FF                 add     rdx, 1
.text:000000000000F503                 movzx   ecx, byte ptr [rdx]
.text:000000000000F506                 lea     esi, [rcx-30h]
.text:000000000000F509                 cmp     sil, 9
.text:000000000000F50D                 jbe     short loc_F4FF
.text:000000000000F50F                 cmp     cl, 24h ; '$'
.text:000000000000F512                 jnz     loc_EE6E
.text:000000000000F518                 xor     ecx, ecx
.text:000000000000F51A
.text:000000000000F51A loc_F51A:                               ; CODE XREF: printf_parse+C3C↓j
.text:000000000000F51A                 mov     rsi, 1999999999999999h
.text:000000000000F524                 sub     eax, 30h ; '0'
.text:000000000000F527                 mov     rdx, r8
.text:000000000000F52A                 cmp     rcx, rsi
.text:000000000000F52D                 cdqe
.text:000000000000F52F                 ja      short loc_F538
.text:000000000000F531                 lea     rdx, [rcx+rcx*4]
.text:000000000000F535                 add     rdx, rdx
.text:000000000000F538
.text:000000000000F538 loc_F538:                               ; CODE XREF: printf_parse+B9F↑j
.text:000000000000F538                 mov     rsi, r11
.text:000000000000F53B
.text:000000000000F53B loc_F53B:                               ; CODE XREF: printf_parse+BDC↓j
.text:000000000000F53B                 xor     ebx, ebx
.text:000000000000F53D                 add     rdx, rax
.text:000000000000F540                 movsx   eax, byte ptr [r11+1]
.text:000000000000F545                 setb    bl
.text:000000000000F548                 add     r11, 1
.text:000000000000F54C                 mov     rcx, rdx
.text:000000000000F54F                 test    rbx, rbx
.text:000000000000F552                 lea     edi, [rax-30h]
.text:000000000000F555                 jz      short loc_F5C8
.text:000000000000F557                 cmp     dil, 9
.text:000000000000F55B                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F561                 sub     eax, 30h ; '0'
.text:000000000000F564                 mov     rdx, r8
.text:000000000000F567                 mov     rsi, r11
.text:000000000000F56A                 cdqe
.text:000000000000F56C                 jmp     short loc_F53B
.text:000000000000F56E ; ---------------------------------------------------------------------------
.text:000000000000F56E
.text:000000000000F56E loc_F56E:                               ; CODE XREF: printf_parse+6D4↑j
.text:000000000000F56E                 cmp     dil, 9
.text:000000000000F572                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F578                 movsx   eax, cl
.text:000000000000F57B                 mov     rbp, rdx
.text:000000000000F57E                 mov     rcx, r8
.text:000000000000F581                 sub     eax, 30h ; '0'
.text:000000000000F584                 cdqe
.text:000000000000F586                 jmp     loc_F049
.text:000000000000F58B ; ---------------------------------------------------------------------------
.text:000000000000F58B
.text:000000000000F58B loc_F58B:                               ; CODE XREF: printf_parse+43D↑j
.text:000000000000F58B                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000F590                 shl     rax, 5
.text:000000000000F594                 mov     rdi, rcx        ; dest
.text:000000000000F597                 mov     rdx, rax        ; n
.text:000000000000F59A                 mov     [rsp+88h+var_48], r9
.text:000000000000F59F                 mov     [rsp+88h+var_50], r10
.text:000000000000F5A4                 mov     [rsp+88h+var_58], r8
.text:000000000000F5A9                 call    _memcpy         ; PIC mode
.text:000000000000F5AE                 mov     r9, [rsp+88h+var_48]
.text:000000000000F5B3                 mov     rcx, rax
.text:000000000000F5B6                 mov     r10, [rsp+88h+var_50]
.text:000000000000F5BB                 mov     rax, [r15]
.text:000000000000F5BE                 mov     r8, [rsp+88h+var_58]
.text:000000000000F5C3                 jmp     loc_EDD3
.text:000000000000F5C8 ; ---------------------------------------------------------------------------
.text:000000000000F5C8
.text:000000000000F5C8 loc_F5C8:                               ; CODE XREF: printf_parse+BC5↑j
.text:000000000000F5C8                 cmp     dil, 9
.text:000000000000F5CC                 jbe     loc_F51A
.text:000000000000F5D2                 lea     rbx, [rdx-1]
.text:000000000000F5D6                 cmp     rbx, 0FFFFFFFFFFFFFFFDh
.text:000000000000F5DA                 ja      def_EBD5        ; jumptable 0000000000000245 default case, cases 38-64,66,68,72-82,84-87,89-96,98,104,106-109,113,114,116,118,119
.text:000000000000F5E0                 mov     [r12+40h], rbx
.text:000000000000F5E5                 lea     r11, [rsi+2]
.text:000000000000F5E9                 jmp     loc_EE7D
.text:000000000000F5EE ; ---------------------------------------------------------------------------
.text:000000000000F5EE
.text:000000000000F5EE loc_F5EE:                               ; CODE XREF: printf_parse+AA0↑j
.text:000000000000F5EE                 mov     rdi, rsi        ; size
.text:000000000000F5F1                 call    _malloc         ; PIC mode
.text:000000000000F5F6                 mov     rdx, [rsp+88h+src]
.text:000000000000F5FB                 mov     rcx, rax
.text:000000000000F5FE                 mov     r9, [rsp+88h+var_40]
.text:000000000000F603                 mov     r10, [rsp+88h+var_48]
.text:000000000000F608                 mov     r8, [rsp+88h+var_50]
.text:000000000000F60D                 mov     r11, [rsp+88h+var_58]
.text:000000000000F612                 jmp     loc_F459
.text:000000000000F617 ; ---------------------------------------------------------------------------
.text:000000000000F617
.text:000000000000F617 loc_F617:                               ; CODE XREF: printf_parse+2DB↑j
.text:000000000000F617                                         ; printf_parse+2F1↑j ...
.text:000000000000F617                 mov     rcx, [r15+8]
.text:000000000000F61B
.text:000000000000F61B loc_F61B:                               ; CODE XREF: printf_parse+3E7↑j
.text:000000000000F61B                                         ; printf_parse+8AB↑j ...
.text:000000000000F61B                 cmp     [rsp+88h+src], rcx
.text:000000000000F620                 jnz     loc_F484
.text:000000000000F626                 jmp     loc_F48C
.text:000000000000F626 ; ---------------------------------------------------------------------------
.text:000000000000F62B                 align 10h
.text:000000000000F630
.text:000000000000F630 loc_F630:                               ; CODE XREF: printf_parse+ADA↑j
.text:000000000000F630                 mov     rsi, [rsp+88h+src] ; src
.text:000000000000F635                 shl     rax, 5
.text:000000000000F639                 mov     rdi, rcx        ; dest
.text:000000000000F63C                 mov     rdx, rax        ; n
.text:000000000000F63F                 mov     [rsp+88h+var_40], r9
.text:000000000000F644                 mov     [rsp+88h+var_48], r10
.text:000000000000F649                 mov     [rsp+88h+var_50], r8
.text:000000000000F64E                 mov     [rsp+88h+var_58], r11
.text:000000000000F653                 call    _memcpy         ; PIC mode
.text:000000000000F658                 mov     r9, [rsp+88h+var_40]
.text:000000000000F65D                 mov     rcx, rax
.text:000000000000F660                 mov     r10, [rsp+88h+var_48]
.text:000000000000F665                 mov     rax, [r15]
.text:000000000000F668                 mov     r8, [rsp+88h+var_50]
.text:000000000000F66D                 mov     r11, [rsp+88h+var_58]
.text:000000000000F672                 jmp     loc_F470
.text:000000000000F677 ; ---------------------------------------------------------------------------
.text:000000000000F677
.text:000000000000F677 loc_F677:                               ; CODE XREF: printf_parse+42F↑j
.text:000000000000F677                                         ; printf_parse+ACC↑j
.text:000000000000F677                 mov     rcx, rdx
.text:000000000000F67A                 jmp     short loc_F61B
.text:000000000000F67A ; } // starts at E990
.text:000000000000F67A printf_parse    endp
.text:000000000000F67A
.text:000000000000F67A ; ---------------------------------------------------------------------------
.text:000000000000F67C                 align 20h
.text:000000000000F680
.text:000000000000F680 ; =============== S U B R O U T I N E =======================================
.text:000000000000F680
.text:000000000000F680 ; Attributes: info_from_lumina
.text:000000000000F680
.text:000000000000F680 ; void _libc_csu_init(void)
.text:000000000000F680                 public __libc_csu_init
.text:000000000000F680 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:000000000000F680 ; __unwind {
.text:000000000000F680                 push    r15
.text:000000000000F682                 push    r14
.text:000000000000F684                 mov     r15, rdx
.text:000000000000F687                 push    r13
.text:000000000000F689                 push    r12
.text:000000000000F68B                 lea     r12, __frame_dummy_init_array_entry
.text:000000000000F692                 push    rbp
.text:000000000000F693                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000F69A                 push    rbx
.text:000000000000F69B                 mov     r13d, edi
.text:000000000000F69E                 mov     r14, rsi
.text:000000000000F6A1                 sub     rbp, r12
.text:000000000000F6A4                 sub     rsp, 8
.text:000000000000F6A8                 sar     rbp, 3
.text:000000000000F6AC                 call    _init_proc
.text:000000000000F6B1                 test    rbp, rbp
.text:000000000000F6B4                 jz      short loc_F6D6
.text:000000000000F6B6                 xor     ebx, ebx
.text:000000000000F6B8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000F6C0
.text:000000000000F6C0 loc_F6C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:000000000000F6C0                 mov     rdx, r15
.text:000000000000F6C3                 mov     rsi, r14
.text:000000000000F6C6                 mov     edi, r13d
.text:000000000000F6C9                 call    ds:(__frame_dummy_init_array_entry - 2140F0h)[r12+rbx*8]
.text:000000000000F6CD                 add     rbx, 1
.text:000000000000F6D1                 cmp     rbp, rbx
.text:000000000000F6D4                 jnz     short loc_F6C0
.text:000000000000F6D6
.text:000000000000F6D6 loc_F6D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:000000000000F6D6                 add     rsp, 8
.text:000000000000F6DA                 pop     rbx
.text:000000000000F6DB                 pop     rbp
.text:000000000000F6DC                 pop     r12
.text:000000000000F6DE                 pop     r13
.text:000000000000F6E0                 pop     r14
.text:000000000000F6E2                 pop     r15
.text:000000000000F6E4                 retn
.text:000000000000F6E4 ; } // starts at F680
.text:000000000000F6E4 __libc_csu_init endp
.text:000000000000F6E4
.text:000000000000F6E4 ; ---------------------------------------------------------------------------
.text:000000000000F6E5                 align 10h
.text:000000000000F6F0
.text:000000000000F6F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F6F0
.text:000000000000F6F0
.text:000000000000F6F0 ; void _libc_csu_fini(void)
.text:000000000000F6F0                 public __libc_csu_fini
.text:000000000000F6F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:000000000000F6F0 ; __unwind {
.text:000000000000F6F0                 rep retn
.text:000000000000F6F0 ; } // starts at F6F0
.text:000000000000F6F0 __libc_csu_fini endp
.text:000000000000F6F0
.text:000000000000F6F0 ; ---------------------------------------------------------------------------
.text:000000000000F6F2                 align 20h
.text:000000000000F700
.text:000000000000F700 ; =============== S U B R O U T I N E =======================================
.text:000000000000F700
.text:000000000000F700
.text:000000000000F700 atexit          proc near               ; CODE XREF: main+76↑p
.text:000000000000F700 ; __unwind {
.text:000000000000F700                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:000000000000F707                 xor     esi, esi        ; obj
.text:000000000000F709                 jmp     ___cxa_atexit
.text:000000000000F709 ; } // starts at F700
.text:000000000000F709 atexit          endp
.text:000000000000F709
.text:000000000000F709 _text           ends
.text:000000000000F709
LOAD:000000000000F70E ; ===========================================================================
LOAD:000000000000F70E
LOAD:000000000000F70E ; Segment type: Pure code
LOAD:000000000000F70E ; Segment permissions: Read/Execute
LOAD:000000000000F70E LOAD            segment byte public 'CODE' use64
LOAD:000000000000F70E                 assume cs:LOAD
LOAD:000000000000F70E                 ;org 0F70Eh
LOAD:000000000000F70E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000F70E                 align 10h
LOAD:000000000000F70E LOAD            ends
LOAD:000000000000F70E
.fini:000000000000F710 ; ===========================================================================
.fini:000000000000F710
.fini:000000000000F710 ; Segment type: Pure code
.fini:000000000000F710 ; Segment permissions: Read/Execute
.fini:000000000000F710 _fini           segment dword public 'CODE' use64
.fini:000000000000F710                 assume cs:_fini
.fini:000000000000F710                 ;org 0F710h
.fini:000000000000F710                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000000000000F710
.fini:000000000000F710 ; =============== S U B R O U T I N E =======================================
.fini:000000000000F710
.fini:000000000000F710
.fini:000000000000F710                 public _term_proc
.fini:000000000000F710 _term_proc      proc near
.fini:000000000000F710                 sub     rsp, 8          ; _fini
.fini:000000000000F714                 add     rsp, 8
.fini:000000000000F718                 retn
.fini:000000000000F718 _term_proc      endp
.fini:000000000000F718
.fini:000000000000F718 _fini           ends
.fini:000000000000F718
LOAD:000000000000F719 ; ===========================================================================
LOAD:000000000000F719
LOAD:000000000000F719 ; Segment type: Pure code
LOAD:000000000000F719 ; Segment permissions: Read/Execute
LOAD:000000000000F719 LOAD            segment byte public 'CODE' use64
LOAD:000000000000F719                 assume cs:LOAD
LOAD:000000000000F719                 ;org 0F719h
LOAD:000000000000F719                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000F719                 align 20h
LOAD:000000000000F719 LOAD            ends
LOAD:000000000000F719
.rodata:000000000000F720 ; ===========================================================================
.rodata:000000000000F720
.rodata:000000000000F720 ; Segment type: Pure data
.rodata:000000000000F720 ; Segment permissions: Read
.rodata:000000000000F720 _rodata         segment align_32 public 'CONST' use64
.rodata:000000000000F720                 assume cs:_rodata
.rodata:000000000000F720                 ;org 0F720h
.rodata:000000000000F720                 public _IO_stdin_used
.rodata:000000000000F720 _IO_stdin_used  db    1
.rodata:000000000000F721                 db    0
.rodata:000000000000F722                 db    2
.rodata:000000000000F723                 db    0
.rodata:000000000000F724 ; const char aInvalidDateFor[]
.rodata:000000000000F724 aInvalidDateFor db 'invalid date format %s',0
.rodata:000000000000F724                                         ; DATA XREF: main+850↑o
.rodata:000000000000F724                                         ; get_reldate+17↑o
.rodata:000000000000F73B aTouch          db 'touch',0            ; DATA XREF: main+1B8↑o
.rodata:000000000000F73B                                         ; usage+1A0↑o ...
.rodata:000000000000F741 asc_F741        db '[',0                ; DATA XREF: usage+1AC↑o
.rodata:000000000000F743 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+1D3↑o
.rodata:000000000000F753 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000F753                                         ; DATA XREF: usage+203↑o
.rodata:000000000000F753                                         ; usage+2FC↑o ...
.rodata:000000000000F769 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+214↑o
.rodata:000000000000F773 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+220↑o
.rodata:000000000000F782 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+1B3↑o
.rodata:000000000000F78C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1DF↑o
.rodata:000000000000F796 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1F7↑o
.rodata:000000000000F7A0 ; const char aSOnlineHelpS[]
.rodata:000000000000F7A0 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+26A↑o
.rodata:000000000000F7A0                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000F7B7 unk_F7B7        db  47h ; G             ; DATA XREF: main+1B1↑o
.rodata:000000000000F7B7                                         ; usage+286↑o ...
.rodata:000000000000F7B8                 db  4Eh ; N
.rodata:000000000000F7B9                 db  55h ; U
.rodata:000000000000F7BA                 db  20h
.rodata:000000000000F7BB ; const char domainname[]
.rodata:000000000000F7BB domainname      db 'coreutils',0        ; DATA XREF: main+57↑o
.rodata:000000000000F7BB                                         ; main+63↑o ...
.rodata:000000000000F7C5 ; const char s2[]
.rodata:000000000000F7C5 s2              db 'en_',0              ; DATA XREF: usage+2AD↑o
.rodata:000000000000F7C5                                         ; usage+36E↑o
.rodata:000000000000F7C9 ; const char aFullDocumentat[]
.rodata:000000000000F7C9 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000F7C9                                         ; DATA XREF: usage:loc_3959↑o
.rodata:000000000000F7C9                                         ; usage:loc_3A16↑o
.rodata:000000000000F7E4 ; const char dirname[]
.rodata:000000000000F7E4 dirname         db '/usr/local/share/locale',0
.rodata:000000000000F7E4                                         ; DATA XREF: main+50↑o
.rodata:000000000000F7FC aTime           db '--time',0           ; DATA XREF: main+14E↑o
.rodata:000000000000F7FC                                         ; yyparse+DD8↑o ...
.rodata:000000000000F803 aArnoldRobbins  db 'Arnold Robbins',0   ; DATA XREF: main+19B↑o
.rodata:000000000000F812 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: main+1A2↑o
.rodata:000000000000F81D aRandySmith     db 'Randy Smith',0      ; DATA XREF: main+184↑o
.rodata:000000000000F829 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1AA↑o
.rodata:000000000000F839 aJimKingdon     db 'Jim Kingdon',0      ; DATA XREF: main+1C0↑o
.rodata:000000000000F845 ; const char shortopts[]
.rodata:000000000000F845 shortopts       db 'acd:fhmr:t:',0      ; DATA XREF: main:loc_2C58↑o
.rodata:000000000000F851 ; const char name[]
.rodata:000000000000F851 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+7B6↑o
.rodata:000000000000F861 ; const char aMissingFileOpe[]
.rodata:000000000000F861 aMissingFileOpe db 'missing file operand',0
.rodata:000000000000F861                                         ; DATA XREF: main:loc_33B5↑o
.rodata:000000000000F876 ; const char file[]
.rodata:000000000000F876 file            db '../coreutils-8.31/src/touch.c',0
.rodata:000000000000F876                                         ; DATA XREF: main+82C↑o
.rodata:000000000000F894 ; const char assertion[]
.rodata:000000000000F894 assertion       db 'change_times == CH_ATIME',0
.rodata:000000000000F894                                         ; DATA XREF: main+833↑o
.rodata:000000000000F8AD ; const char aFailedToCloseS[]
.rodata:000000000000F8AD aFailedToCloseS db 'failed to close %s',0
.rodata:000000000000F8AD                                         ; DATA XREF: main+621↑o
.rodata:000000000000F8C0 ; const char aCannotTouchS[]
.rodata:000000000000F8C0 aCannotTouchS   db 'cannot touch %s',0  ; DATA XREF: main+486↑o
.rodata:000000000000F8D0 ; const char msgid[]
.rodata:000000000000F8D0 msgid           db 'setting times of %s',0
.rodata:000000000000F8D0                                         ; DATA XREF: main+341↑o
.rodata:000000000000F8E4 aAtime          db 'atime',0            ; DATA XREF: .data.rel.ro:time_args↓o
.rodata:000000000000F8EA aAccess         db 'access',0           ; DATA XREF: .data.rel.ro:0000000000214108↓o
.rodata:000000000000F8F1 aUse            db 'use',0              ; DATA XREF: .data.rel.ro:0000000000214110↓o
.rodata:000000000000F8F5 aMtime          db 'mtime',0            ; DATA XREF: .data.rel.ro:0000000000214118↓o
.rodata:000000000000F8FB aModify         db 'modify',0           ; DATA XREF: .data.rel.ro:0000000000214120↓o
.rodata:000000000000F902 aNoCreate       db 'no-create',0        ; DATA XREF: .data.rel.ro:0000000000214160↓o
.rodata:000000000000F90C aDate_0         db 'date',0             ; DATA XREF: yyparse+1580↑o
.rodata:000000000000F90C                                         ; .data.rel.ro:0000000000214180↓o
.rodata:000000000000F911 aNoDereference  db 'no-dereference',0   ; DATA XREF: .data.rel.ro:00000000002141C0↓o
.rodata:000000000000F911                                         ; .data.rel.ro:00000000002141A0↓o
.rodata:000000000000F920 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:00000000002141E0↓o
.rodata:000000000000F925 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000214200↓o
.rodata:000000000000F92D                 align 10h
.rodata:000000000000F930 ; const char aTrySHelpForMor[]
.rodata:000000000000F930 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:000000000000F930                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000F957                 align 8
.rodata:000000000000F958 ; const char aUsageSOptionFi[]
.rodata:000000000000F958 aUsageSOptionFi db 'Usage: %s [OPTION]... FILE...',0Ah,0
.rodata:000000000000F958                                         ; DATA XREF: usage:loc_36ED↑o
.rodata:000000000000F977                 align 8
.rodata:000000000000F978 ; const char aUpdateTheAcces[]
.rodata:000000000000F978 aUpdateTheAcces db 'Update the access and modification times of each FILE to the curr'
.rodata:000000000000F978                                         ; DATA XREF: usage+84↑o
.rodata:000000000000F978                 db 'ent time.',0Ah
.rodata:000000000000F978                 db 0Ah
.rodata:000000000000F978                 db 'A FILE argument that does not exist is created empty, unless -c o'
.rodata:000000000000F978                 db 'r -h',0Ah
.rodata:000000000000F978                 db 'is supplied.',0Ah
.rodata:000000000000F978                 db 0Ah
.rodata:000000000000F978                 db 'A FILE argument string of - is handled specially and causes touch'
.rodata:000000000000F978                 db ' to',0Ah
.rodata:000000000000F978                 db 'change the times of the file associated with standard output.',0Ah
.rodata:000000000000F978                 db 0
.rodata:000000000000FA9C                 align 20h
.rodata:000000000000FAA0 ; const char aMandatoryArgum[]
.rodata:000000000000FAA0 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+A9↑o
.rodata:000000000000FAA0                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:000000000000FAA0                 db 'ns too.',0Ah,0
.rodata:000000000000FAEB                 align 10h
.rodata:000000000000FAF0 ; const char aAChangeOnlyThe[]
.rodata:000000000000FAF0 aAChangeOnlyThe db '  -a                     change only the access time',0Ah
.rodata:000000000000FAF0                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000FAF0                 db '  -c, --no-create        do not create any files',0Ah
.rodata:000000000000FAF0                 db '  -d, --date=STRING      parse STRING and use it instead of curre'
.rodata:000000000000FAF0                 db 'nt time',0Ah
.rodata:000000000000FAF0                 db '  -f                     (ignored)',0Ah,0
.rodata:000000000000FBC3                 align 8
.rodata:000000000000FBC8 ; const char aHNoDereference[]
.rodata:000000000000FBC8 aHNoDereference db '  -h, --no-dereference   affect each symbolic link instead of any'
.rodata:000000000000FBC8                                         ; DATA XREF: usage+F3↑o
.rodata:000000000000FBC8                 db ' referenced',0Ah
.rodata:000000000000FBC8                 db '                         file (useful only on systems that can ch'
.rodata:000000000000FBC8                 db 'ange the',0Ah
.rodata:000000000000FBC8                 db '                         timestamps of a symlink)',0Ah
.rodata:000000000000FBC8                 db '  -m                     change only the modification time',0Ah,0
.rodata:000000000000FCCD                 align 10h
.rodata:000000000000FCD0 ; const char aRReferenceFile[]
.rodata:000000000000FCD0 aRReferenceFile db '  -r, --reference=FILE   use this file',27h,'s times instead of c'
.rodata:000000000000FCD0                                         ; DATA XREF: usage+118↑o
.rodata:000000000000FCD0                 db 'urrent time',0Ah
.rodata:000000000000FCD0                 db '  -t STAMP               use [[CC]YY]MMDDhhmm[.ss] instead of cur'
.rodata:000000000000FCD0                 db 'rent time',0Ah
.rodata:000000000000FCD0                 db '      --time=WORD        change the specified time:',0Ah
.rodata:000000000000FCD0                 db '                           WORD is access, atime, or use: equival'
.rodata:000000000000FCD0                 db 'ent to -a',0Ah
.rodata:000000000000FCD0                 db '                           WORD is modify or mtime: equivalent to'
.rodata:000000000000FCD0                 db ' -m',0Ah,0
.rodata:000000000000FE27                 align 8
.rodata:000000000000FE28 ; const char aHelpDisplayThi[]
.rodata:000000000000FE28 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:000000000000FE28                                         ; DATA XREF: usage+13D↑o
.rodata:000000000000FE55                 align 8
.rodata:000000000000FE58 ; const char aVersionOutputV[]
.rodata:000000000000FE58 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:000000000000FE58                                         ; DATA XREF: usage+162↑o
.rodata:000000000000FE8E                 align 10h
.rodata:000000000000FE90 ; const char aNoteThatTheDAn[]
.rodata:000000000000FE90 aNoteThatTheDAn db 0Ah                  ; DATA XREF: usage+187↑o
.rodata:000000000000FE90                 db 'Note that the -d and -t options accept different time-date format'
.rodata:000000000000FE90                 db 's.',0Ah,0
.rodata:000000000000FED6                 align 8
.rodata:000000000000FED8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:000000000000FED8                                         ; DATA XREF: usage+27F↑o
.rodata:000000000000FED8                                         ; usage+2E3↑o ...
.rodata:000000000000FF00 ; const char aReportAnyTrans[]
.rodata:000000000000FF00 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:000000000000FF00                                         ; DATA XREF: usage+3D7↑o
.rodata:000000000000FF00                 db 'am/>',0Ah,0
.rodata:000000000000FF47                 align 8
.rodata:000000000000FF48 ; const char aOrAvailableLoc[]
.rodata:000000000000FF48 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:000000000000FF48                                         ; DATA XREF: usage:loc_399E↑o
.rodata:000000000000FF7B                 align 20h
.rodata:000000000000FF80 aCannotSpecifyT db 'cannot specify times from more than one source',0
.rodata:000000000000FF80                                         ; DATA XREF: main+95B↑o
.rodata:000000000000FFAF                 align 10h
.rodata:000000000000FFB0 ; const char aFailedToGetAtt[]
.rodata:000000000000FFB0 aFailedToGetAtt db 'failed to get attributes of %s',0
.rodata:000000000000FFB0                                         ; DATA XREF: main+924↑o
.rodata:000000000000FFCF                 align 10h
.rodata:000000000000FFD0 ; const char aWarningTouchSI[]
.rodata:000000000000FFD0 aWarningTouchSI db 'warning: ',27h,'touch %s',27h,' is obsolete; use ',27h,'touch -t '
.rodata:000000000000FFD0                                         ; DATA XREF: main+896↑o
.rodata:000000000000FFD0                 db '%04ld%02d%02d%02d%02d.%02d',27h,0
.rodata:000000000001001B                 align 20h
.rodata:0000000000010020 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000010020 __PRETTY_FUNCTION___6981 db 'touch',0   ; DATA XREF: main:loc_33E5↑o
.rodata:0000000000010026                 align 10h
.rodata:0000000000010030 time_masks      db    1                 ; DATA XREF: main+147↑o
.rodata:0000000000010030                                         ; main+160↑o
.rodata:0000000000010031                 db    0
.rodata:0000000000010032                 db    0
.rodata:0000000000010033                 db    0
.rodata:0000000000010034                 db    1
.rodata:0000000000010035                 db    0
.rodata:0000000000010036                 db    0
.rodata:0000000000010037                 db    0
.rodata:0000000000010038                 db    1
.rodata:0000000000010039                 db    0
.rodata:000000000001003A                 db    0
.rodata:000000000001003B                 db    0
.rodata:000000000001003C                 db    2
.rodata:000000000001003D                 db    0
.rodata:000000000001003E                 db    0
.rodata:000000000001003F                 db    0
.rodata:0000000000010040                 db    2
.rodata:0000000000010041                 db    0
.rodata:0000000000010042                 db    0
.rodata:0000000000010043                 db    0
.rodata:0000000000010044 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000010049 ; const char aInvalidArgumen[]
.rodata:0000000000010049 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000010049                                         ; DATA XREF: argmatch_invalid:loc_3C20↑o
.rodata:0000000000010064 ; const char aAmbiguousArgum[]
.rodata:0000000000010064 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000010064                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000010081 ; const char aValidArguments[]
.rodata:0000000000010081 aValidArguments db 'Valid arguments are:',0
.rodata:0000000000010081                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000010096 aS              db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000010096                 db '  - %s',0
.rodata:000000000001009E aS_0            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:000000000001009E                                         ; str_days_constprop_13+8C↑o ...
.rodata:00000000000100A3 ; const char aWriteError[]
.rodata:00000000000100A3 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3E83↑o
.rodata:00000000000100AF ; const char format[]
.rodata:00000000000100AF format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000100B6 aC02d           db '%c%02d',0           ; DATA XREF: time_zone_str+2D↑o
.rodata:00000000000100BD a02d02d         db '-%02d%02d',0        ; DATA XREF: tm_year_str+2A↑o
.rodata:00000000000100C7 aDate           db 'date: ',0           ; DATA XREF: dbg_printf:loc_431F↑o
.rodata:00000000000100CE aLdS            db ' %+ld %s',0         ; DATA XREF: print_rel_part_part_2+6↑o
.rodata:00000000000100D7 aGmt            db 'GMT',0              ; DATA XREF: lookup_zone+A↑o
.rodata:00000000000100D7                                         ; .data.rel.ro:universal_time_zone_table↓o
.rodata:00000000000100DB aWet            db 'WET',0              ; DATA XREF: lookup_zone+5F↑o
.rodata:00000000000100DB                                         ; .data.rel.ro:time_zone_table↓o
.rodata:00000000000100DF ; const char aParsedSPart[]
.rodata:00000000000100DF aParsedSPart    db 'parsed %s part: ',0 ; DATA XREF: debug_print_relative_time_part_11+5↑o
.rodata:00000000000100DF                                         ; debug_print_current_time_part_10+E↑o
.rodata:00000000000100F0 ; const char aTodayThisNow[]
.rodata:00000000000100F0 aTodayThisNow   db 'today/this/now',0Ah,0
.rodata:00000000000100F0                                         ; DATA XREF: debug_print_relative_time_part_11+102↑o
.rodata:0000000000010100 aYearS          db 'year(s)',0          ; DATA XREF: debug_print_relative_time_part_11:loc_4780↑o
.rodata:0000000000010108 aMonthS         db 'month(s)',0         ; DATA XREF: debug_print_relative_time_part_11:loc_4604↑o
.rodata:0000000000010111 aDayS           db 'day(s)',0           ; DATA XREF: debug_print_relative_time_part_11:loc_46F0↑o
.rodata:0000000000010118 aHourS          db 'hour(s)',0          ; DATA XREF: debug_print_relative_time_part_11:loc_470F↑o
.rodata:0000000000010120 aMinutes        db 'minutes',0          ; DATA XREF: debug_print_relative_time_part_11:loc_472E↑o
.rodata:0000000000010128 aNanoseconds    db 'nanoseconds',0      ; DATA XREF: debug_print_relative_time_part_11:loc_476C↑o
.rodata:0000000000010134 aYMDYMDHMS      db '(Y-M-D) %Y-%m-%d %H:%M:%S',0
.rodata:0000000000010134                                         ; DATA XREF: debug_strfdatetime_constprop_12+A↑o
.rodata:000000000001014E aTzS            db ' TZ=%s',0           ; DATA XREF: debug_strfdatetime_constprop_12+85↑o
.rodata:0000000000010155 aDst            db ' DST',0             ; DATA XREF: debug_print_current_time_part_10+151↑o
.rodata:0000000000010155                                         ; yyparse+1993↑o ...
.rodata:000000000001015A aUtcS           db ' UTC%s',0           ; DATA XREF: debug_print_current_time_part_10+345↑o
.rodata:000000000001015A                                         ; debug_print_current_time_part_10+356↑o
.rodata:0000000000010161 aYMD04ld02ld02l db '(Y-M-D) %04ld-%02ld-%02ld',0
.rodata:0000000000010161                                         ; DATA XREF: debug_print_current_time_part_10+258↑o
.rodata:000000000001017B ; const char aYear04ld[]
.rodata:000000000001017B aYear04ld       db 'year: %04ld',0      ; DATA XREF: debug_print_current_time_part_10:loc_49DA↑o
.rodata:0000000000010187 a02ld02ld02ld   db ' %02ld:%02ld:%02ld',0
.rodata:0000000000010187                                         ; DATA XREF: debug_print_current_time_part_10+2B7↑o
.rodata:000000000001019A a09d            db '.%09d',0            ; DATA XREF: debug_print_current_time_part_10+397↑o
.rodata:00000000000101A0 aPm             db 'pm',0               ; DATA XREF: debug_print_current_time_part_10+3B7↑o
.rodata:00000000000101A0                                         ; parse_datetime2+1D0A↑o
.rodata:00000000000101A3 aIsdstDS        db ' isdst=%d%s',0      ; DATA XREF: debug_print_current_time_part_10+175↑o
.rodata:00000000000101AF ; const char aNumberOfSecond[]
.rodata:00000000000101AF aNumberOfSecond db 'number of seconds: %ld',0
.rodata:00000000000101AF                                         ; DATA XREF: debug_print_current_time_part_10:loc_4B58↑o
.rodata:00000000000101C6 aAm             db 'AM',0               ; DATA XREF: yyparse+8E9↑o
.rodata:00000000000101C6                                         ; .data.rel.ro:meridian_table↓o
.rodata:00000000000101C9 ; const char aJanuary[]
.rodata:00000000000101C9 aJanuary        db 'JANUARY',0          ; DATA XREF: yyparse+1901↑o
.rodata:00000000000101C9                                         ; .data.rel.ro:month_and_day_table↓o
.rodata:00000000000101D1 ; const char aYear[]
.rodata:00000000000101D1 aYear           db 'YEAR',0             ; DATA XREF: yyparse+19C5↑o
.rodata:00000000000101D1                                         ; yyparse+1AF8↑o ...
.rodata:00000000000101D6 ; const char aTomorrow[]
.rodata:00000000000101D6 aTomorrow       db 'TOMORROW',0         ; DATA XREF: yyparse+1A1B↑o
.rodata:00000000000101D6                                         ; .data.rel.ro:relative_time_table↓o
.rodata:00000000000101DF aA              db 'A',0                ; DATA XREF: yyparse+1BE3↑o
.rodata:00000000000101DF                                         ; .data.rel.ro:military_table↓o
.rodata:00000000000101E1 ; const char aErrorUnknownWo[]
.rodata:00000000000101E1 aErrorUnknownWo db 'error: unknown word ',27h,'%s',27h,0Ah,0
.rodata:00000000000101E1                                         ; DATA XREF: yyparse+1B98↑o
.rodata:00000000000101FB ; const char aNumberOf[10]
.rodata:00000000000101FB aNumberOf       db 'number of '         ; DATA XREF: yyparse+D51↑o
.rodata:0000000000010205 aSeconds        db 'seconds',0          ; DATA XREF: debug_print_relative_time_part_11:loc_474D↑o
.rodata:000000000001020D aDatetime       db 'datetime',0         ; DATA XREF: yyparse+E00↑o
.rodata:0000000000010216 unk_10216       db  6Ch ; l             ; DATA XREF: yyparse+15D0↑o
.rodata:0000000000010217                 db  6Fh ; o
.rodata:0000000000010218                 db  63h ; c
.rodata:0000000000010219                 db  61h ; a
.rodata:000000000001021A                 db  6Ch ; l
.rodata:000000000001021B                 db  5Fh ; _
.rodata:000000000001021C aZone           db 'zone',0             ; DATA XREF: yyparse+15A8↑o
.rodata:0000000000010221 aDay            db 'day',0              ; DATA XREF: yyparse+1558↑o
.rodata:0000000000010225 ; const char aRelative[]
.rodata:0000000000010225 aRelative       db 'relative',0         ; DATA XREF: yyparse+23E↑o
.rodata:0000000000010225                                         ; yyparse+1530↑o
.rodata:000000000001022E ; const char aNumber[]
.rodata:000000000001022E aNumber         db 'number',0           ; DATA XREF: yyparse:loc_6216↑o
.rodata:0000000000010235 ; const char aHybrid[]
.rodata:0000000000010235 aHybrid         db 'hybrid',0           ; DATA XREF: yyparse:loc_61C0↑o
.rodata:000000000001023C aAm_0           db 'am',0               ; DATA XREF: parse_datetime2+1BC1↑o
.rodata:000000000001023F asc_1023F       db '----',0             ; DATA XREF: parse_datetime2+E54↑o
.rodata:000000000001023F                                         ; parse_datetime2+E48↑o ...
.rodata:0000000000010244 aTz             db 'TZ="',0             ; DATA XREF: parse_datetime2:loc_6A09↑o
.rodata:0000000000010244                                         ; gettext_quote:loc_8C40↑o ...
.rodata:0000000000010249 ; const char aErrorParsingFa[]
.rodata:0000000000010249 aErrorParsingFa db 'error: parsing failed',0Ah,0
.rodata:0000000000010249                                         ; DATA XREF: parse_datetime2+4B1↑o
.rodata:0000000000010260 ; const char aInputTimezone[]
.rodata:0000000000010260 aInputTimezone  db 'input timezone: ',0 ; DATA XREF: parse_datetime2:loc_6F88↑o
.rodata:0000000000010271 aTimespecAlways db 27h,'@timespec',27h,' - always UTC',0
.rodata:0000000000010271                                         ; DATA XREF: parse_datetime2+652↑o
.rodata:000000000001028A aParsedDateTime db 'parsed date/time string',0
.rodata:000000000001028A                                         ; DATA XREF: parse_datetime2+669↑o
.rodata:00000000000102A2 ; const char aTzSInDateStrin[]
.rodata:00000000000102A2 aTzSInDateStrin db 'TZ="%s" in date string',0
.rodata:00000000000102A2                                         ; DATA XREF: parse_datetime2+686↑o
.rodata:00000000000102B9 aUtc0           db 'UTC0',0             ; DATA XREF: parse_datetime2+798↑o
.rodata:00000000000102B9                                         ; parse_datetime2+B24↑o ...
.rodata:00000000000102BE ; const char aTzSEnvironment[]
.rodata:00000000000102BE aTzSEnvironment db 'TZ="%s" environment value',0
.rodata:00000000000102BE                                         ; DATA XREF: parse_datetime2+B4B↑o
.rodata:00000000000102D8 ; const char aSystemDefault[]
.rodata:00000000000102D8 aSystemDefault  db 'system default',0   ; DATA XREF: parse_datetime2:loc_7014↑o
.rodata:00000000000102E7 aS_1            db ' (%s)',0            ; DATA XREF: parse_datetime2+A11↑o
.rodata:00000000000102ED aDst_0          db ', dst',0            ; DATA XREF: parse_datetime2+70D↑o
.rodata:00000000000102F3 ; const char aErrorOutOfRang[]
.rodata:00000000000102F3 aErrorOutOfRang db 'error: out-of-range year %ld',0Ah,0
.rodata:00000000000102F3                                         ; DATA XREF: parse_datetime2+ACD↑o
.rodata:0000000000010311 ; const char aErrorInvalidHo[]
.rodata:0000000000010311 aErrorInvalidHo db 'error: invalid hour %ld%s',0Ah,0
.rodata:0000000000010311                                         ; DATA XREF: parse_datetime2+1B91↑o
.rodata:000000000001032C a02d02d02d      db '%02d:%02d:%02d',0   ; DATA XREF: parse_datetime2+1850↑o
.rodata:000000000001033B ; const char aErrorTzallocSF[]
.rodata:000000000001033B aErrorTzallocSF db 'error: tzalloc ("%s") failed',0Ah,0
.rodata:000000000001033B                                         ; DATA XREF: parse_datetime2+1B55↑o
.rodata:0000000000010359 ; const char aUserProvidedTi[]
.rodata:0000000000010359 aUserProvidedTi db '    user provided time: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010359                                         ; DATA XREF: parse_datetime2+DD1↑o
.rodata:0000000000010359                                         ; parse_datetime2+1920↑o
.rodata:0000000000010377 ; const char aNormalizedTime[]
.rodata:0000000000010377 aNormalizedTime db '       normalized time: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010377                                         ; DATA XREF: parse_datetime2+E04↑o
.rodata:0000000000010377                                         ; parse_datetime2+1957↑o
.rodata:0000000000010395 ; const char aPossibleReason[]
.rodata:0000000000010395 aPossibleReason db '     possible reasons:',0Ah,0
.rodata:0000000000010395                                         ; DATA XREF: parse_datetime2+EE4↑o
.rodata:00000000000103AD ; const char aIncorrectTimez[]
.rodata:00000000000103AD aIncorrectTimez db 'incorrect timezone',0
.rodata:00000000000103AD                                         ; DATA XREF: parse_datetime2+F7D↑o
.rodata:00000000000103C0 ; const char aMissingTimezon[]
.rodata:00000000000103C0 aMissingTimezon db 'missing timezone',0 ; DATA XREF: parse_datetime2:loc_86B6↑o
.rodata:00000000000103D1 aS_2            db '       %s',0Ah,0    ; DATA XREF: parse_datetime2:loc_78EB↑o
.rodata:00000000000103D1                                         ; parse_datetime2+ECB↑o
.rodata:00000000000103DC ; const char aNewStartDateSI[]
.rodata:00000000000103DC aNewStartDateSI db 'new start date: ',27h,'%s',27h,' is ',27h,'%s',27h,0Ah,0
.rodata:00000000000103DC                                         ; DATA XREF: parse_datetime2+1371↑o
.rodata:00000000000103FA aYMDS02d02d     db '(Y-M-D) %s-%02d-%02d',0
.rodata:00000000000103FA                                         ; DATA XREF: parse_datetime2+1C4E↑o
.rodata:000000000001040F ; const char aStartingDateTi[]
.rodata:000000000001040F aStartingDateTi db 'starting date/time: ',27h,'%s',27h,0Ah,0
.rodata:000000000001040F                                         ; DATA XREF: parse_datetime2+13DD↑o
.rodata:0000000000010429 ; const char aErrorSD[]
.rodata:0000000000010429 aErrorSD        db 'error: %s:%d',0Ah,0 ; DATA XREF: parse_datetime2+14B0↑o
.rodata:0000000000010437 aParseDatetimeY db 'parse-datetime.y',0 ; DATA XREF: parse_datetime2+14C3↑o
.rodata:0000000000010448 ; const char aNewDateTimeS[]
.rodata:0000000000010448 aNewDateTimeS   db '    new date/time = ',27h,'%s',27h,0Ah,0
.rodata:0000000000010448                                         ; DATA XREF: parse_datetime2+16C0↑o
.rodata:0000000000010462 ; const char aSLdEpochSecond[]
.rodata:0000000000010462 aSLdEpochSecond db 27h,'%s',27h,' = %ld epoch-seconds',0Ah,0
.rodata:0000000000010462                                         ; DATA XREF: parse_datetime2+1BE9↑o
.rodata:000000000001047C aTimezoneSystem db 'timezone: system default',0Ah,0
.rodata:000000000001047C                                         ; DATA XREF: parse_datetime2+780↑o
.rodata:0000000000010496 ; const char aTimezoneUniver[]
.rodata:0000000000010496 aTimezoneUniver db 'timezone: Universal Time',0Ah,0
.rodata:0000000000010496                                         ; DATA XREF: parse_datetime2:loc_72EB↑o
.rodata:00000000000104B0 ; const char aFinalSUtc[]
.rodata:00000000000104B0 aFinalSUtc      db 'final: %s (UTC)',0Ah,0
.rodata:00000000000104B0                                         ; DATA XREF: parse_datetime2+82D↑o
.rodata:00000000000104C1 ; const char aFinalSUtcS[]
.rodata:00000000000104C1 aFinalSUtcS     db 'final: %s (UTC%s)',0Ah,0
.rodata:00000000000104C1                                         ; DATA XREF: parse_datetime2+89A↑o
.rodata:00000000000104D4 ; const char aTz_0[]
.rodata:00000000000104D4 aTz_0           db 'TZ',0               ; DATA XREF: parse_datetime+E↑o
.rodata:00000000000104D4                                         ; setenv_TZ+8↑o ...
.rodata:00000000000104D7 aB              db 'B',0                ; DATA XREF: .data.rel.ro:0000000000214250↓o
.rodata:00000000000104D9 asc_104D9       db 'F',0                ; DATA XREF: .data.rel.ro:0000000000214290↓o
.rodata:00000000000104DB aG              db 'G',0                ; DATA XREF: .data.rel.ro:00000000002142A0↓o
.rodata:00000000000104DD aP              db 'P',0                ; DATA XREF: .data.rel.ro:0000000000214320↓o
.rodata:00000000000104DF aQ              db 'Q',0                ; DATA XREF: .data.rel.ro:0000000000214330↓o
.rodata:00000000000104E1 aU              db 'U',0                ; DATA XREF: .data.rel.ro:0000000000214370↓o
.rodata:00000000000104E3 aV              db 'V',0                ; DATA XREF: .data.rel.ro:0000000000214380↓o
.rodata:00000000000104E5 aWest           db 'WEST',0             ; DATA XREF: .data.rel.ro:00000000002143F0↓o
.rodata:00000000000104EA aBst            db 'BST',0              ; DATA XREF: .data.rel.ro:0000000000214400↓o
.rodata:00000000000104EE aArt            db 'ART',0              ; DATA XREF: .data.rel.ro:0000000000214410↓o
.rodata:00000000000104F2 aBrt            db 'BRT',0              ; DATA XREF: .data.rel.ro:0000000000214420↓o
.rodata:00000000000104F6 aBrst           db 'BRST',0             ; DATA XREF: .data.rel.ro:0000000000214430↓o
.rodata:00000000000104FB aNst            db 'NST',0              ; DATA XREF: .data.rel.ro:0000000000214440↓o
.rodata:00000000000104FF aNdt            db 'NDT',0              ; DATA XREF: .data.rel.ro:0000000000214450↓o
.rodata:0000000000010503 aClt            db 'CLT',0              ; DATA XREF: .data.rel.ro:0000000000214480↓o
.rodata:0000000000010507 aClst           db 'CLST',0             ; DATA XREF: .data.rel.ro:0000000000214490↓o
.rodata:000000000001050C aEdt            db 'EDT',0              ; DATA XREF: .data.rel.ro:00000000002144B0↓o
.rodata:0000000000010510 aCst            db 'CST',0              ; DATA XREF: .data.rel.ro:00000000002144C0↓o
.rodata:0000000000010514 aCdt            db 'CDT',0              ; DATA XREF: .data.rel.ro:00000000002144D0↓o
.rodata:0000000000010518 aMst            db 'MST',0              ; DATA XREF: .data.rel.ro:00000000002144E0↓o
.rodata:000000000001051C aMdt            db 'MDT',0              ; DATA XREF: .data.rel.ro:00000000002144F0↓o
.rodata:0000000000010520 aPst            db 'PST',0              ; DATA XREF: .data.rel.ro:0000000000214500↓o
.rodata:0000000000010524 aPdt            db 'PDT',0              ; DATA XREF: .data.rel.ro:0000000000214510↓o
.rodata:0000000000010528 aAkst           db 'AKST',0             ; DATA XREF: .data.rel.ro:0000000000214520↓o
.rodata:0000000000010528                                         ; .data.rel.ro:0000000000214680↓o
.rodata:000000000001052D aAkdt           db 'AKDT',0             ; DATA XREF: .data.rel.ro:0000000000214530↓o
.rodata:0000000000010532 aHst            db 'HST',0              ; DATA XREF: .data.rel.ro:0000000000214540↓o
.rodata:0000000000010536 aHast           db 'HAST',0             ; DATA XREF: .data.rel.ro:0000000000214550↓o
.rodata:0000000000010536                                         ; .data.rel.ro:0000000000214460↓o
.rodata:000000000001053B aHadt           db 'HADT',0             ; DATA XREF: .data.rel.ro:0000000000214560↓o
.rodata:000000000001053B                                         ; .data.rel.ro:0000000000214470↓o
.rodata:0000000000010540 aSst            db 'SST',0              ; DATA XREF: .data.rel.ro:0000000000214570↓o
.rodata:0000000000010544 aWat            db 'WAT',0              ; DATA XREF: .data.rel.ro:0000000000214580↓o
.rodata:0000000000010548 aCet            db 'CET',0              ; DATA XREF: .data.rel.ro:0000000000214590↓o
.rodata:000000000001054C aCest           db 'CEST',0             ; DATA XREF: .data.rel.ro:00000000002145A0↓o
.rodata:000000000001054C                                         ; .data.rel.ro:00000000002144A0↓o
.rodata:0000000000010551 aMet            db 'MET',0              ; DATA XREF: .data.rel.ro:00000000002145B0↓o
.rodata:0000000000010555 aMez            db 'MEZ',0              ; DATA XREF: .data.rel.ro:00000000002145C0↓o
.rodata:0000000000010555                                         ; .data.rel.ro:00000000002143C0↓o
.rodata:0000000000010559 aMest           db 'MEST',0             ; DATA XREF: .data.rel.ro:00000000002145D0↓o
.rodata:000000000001055E aMesz           db 'MESZ',0             ; DATA XREF: .data.rel.ro:00000000002145E0↓o
.rodata:0000000000010563 aEet            db 'EET',0              ; DATA XREF: .data.rel.ro:00000000002145F0↓o
.rodata:0000000000010567 aEest           db 'EEST',0             ; DATA XREF: .data.rel.ro:0000000000214600↓o
.rodata:000000000001056C aCat            db 'CAT',0              ; DATA XREF: .data.rel.ro:0000000000214610↓o
.rodata:000000000001056C                                         ; .data.rel.ro:0000000000214360↓o
.rodata:0000000000010570 aSast           db 'SAST',0             ; DATA XREF: .data.rel.ro:0000000000214620↓o
.rodata:0000000000010575 aEat            db 'EAT',0              ; DATA XREF: .data.rel.ro:0000000000214630↓o
.rodata:0000000000010579 aMsk            db 'MSK',0              ; DATA XREF: .data.rel.ro:0000000000214640↓o
.rodata:000000000001057D aMsd            db 'MSD',0              ; DATA XREF: .data.rel.ro:0000000000214650↓o
.rodata:0000000000010581 aIst            db 'IST',0              ; DATA XREF: .data.rel.ro:0000000000214660↓o
.rodata:0000000000010585 aSgt            db 'SGT',0              ; DATA XREF: .data.rel.ro:0000000000214670↓o
.rodata:0000000000010589 aJst            db 'JST',0              ; DATA XREF: .data.rel.ro:0000000000214690↓o
.rodata:000000000001058D aGst            db 'GST',0              ; DATA XREF: .data.rel.ro:00000000002146A0↓o
.rodata:0000000000010591 aNzst           db 'NZST',0             ; DATA XREF: .data.rel.ro:00000000002146B0↓o
.rodata:0000000000010596 aNzdt           db 'NZDT',0             ; DATA XREF: .data.rel.ro:00000000002146C0↓o
.rodata:000000000001059B aUt             db 'UT',0               ; DATA XREF: .data.rel.ro:00000000002146F0↓o
.rodata:000000000001059E aYesterday      db 'YESTERDAY',0        ; DATA XREF: .data.rel.ro:0000000000214730↓o
.rodata:00000000000105A8 aToday          db 'TODAY',0            ; DATA XREF: .data.rel.ro:0000000000214740↓o
.rodata:00000000000105AE aNow            db 'NOW',0              ; DATA XREF: .data.rel.ro:0000000000214750↓o
.rodata:00000000000105AE                                         ; .data.rel.ro:0000000000214390↓o
.rodata:00000000000105B2 aLast           db 'LAST',0             ; DATA XREF: .data.rel.ro:0000000000214760↓o
.rodata:00000000000105B7 aThis           db 'THIS',0             ; DATA XREF: .data.rel.ro:0000000000214770↓o
.rodata:00000000000105BC aNext           db 'NEXT',0             ; DATA XREF: .data.rel.ro:0000000000214780↓o
.rodata:00000000000105C1 aFirst          db 'FIRST',0            ; DATA XREF: .data.rel.ro:0000000000214790↓o
.rodata:00000000000105C7 aThird          db 'THIRD',0            ; DATA XREF: .data.rel.ro:00000000002147A0↓o
.rodata:00000000000105CD aFourth         db 'FOURTH',0           ; DATA XREF: .data.rel.ro:00000000002147B0↓o
.rodata:00000000000105D4 aFifth          db 'FIFTH',0            ; DATA XREF: .data.rel.ro:00000000002147C0↓o
.rodata:00000000000105DA aSixth          db 'SIXTH',0            ; DATA XREF: .data.rel.ro:00000000002147D0↓o
.rodata:00000000000105E0 aSeventh        db 'SEVENTH',0          ; DATA XREF: .data.rel.ro:00000000002147E0↓o
.rodata:00000000000105E8 aEighth         db 'EIGHTH',0           ; DATA XREF: .data.rel.ro:00000000002147F0↓o
.rodata:00000000000105EF aNinth          db 'NINTH',0            ; DATA XREF: .data.rel.ro:0000000000214800↓o
.rodata:00000000000105F5 aTenth          db 'TENTH',0            ; DATA XREF: .data.rel.ro:0000000000214810↓o
.rodata:00000000000105FB aEleventh       db 'ELEVENTH',0         ; DATA XREF: .data.rel.ro:0000000000214820↓o
.rodata:0000000000010604 aTwelfth        db 'TWELFTH',0          ; DATA XREF: .data.rel.ro:0000000000214830↓o
.rodata:000000000001060C aAgo            db 'AGO',0              ; DATA XREF: .data.rel.ro:0000000000214840↓o
.rodata:000000000001060C                                         ; .data.rel.ro:0000000000214310↓o
.rodata:0000000000010610 aHence          db 'HENCE',0            ; DATA XREF: .data.rel.ro:0000000000214850↓o
.rodata:0000000000010610                                         ; .data.rel.ro:0000000000214280↓o
.rodata:0000000000010616 aMonth          db 'MONTH',0            ; DATA XREF: .data.rel.ro:0000000000214890↓o
.rodata:000000000001061C aFortnight      db 'FORTNIGHT',0        ; DATA XREF: .data.rel.ro:00000000002148A0↓o
.rodata:0000000000010626 aWeek           db 'WEEK',0             ; DATA XREF: .data.rel.ro:00000000002148B0↓o
.rodata:0000000000010626                                         ; .data.rel.ro:00000000002142D0↓o
.rodata:000000000001062B aHour           db 'HOUR',0             ; DATA XREF: .data.rel.ro:00000000002148D0↓o
.rodata:0000000000010630 aMinute         db 'MINUTE',0           ; DATA XREF: .data.rel.ro:00000000002148E0↓o
.rodata:0000000000010637 aMin            db 'MIN',0              ; DATA XREF: .data.rel.ro:00000000002148F0↓o
.rodata:0000000000010637                                         ; .data.rel.ro:0000000000214300↓o
.rodata:000000000001063B aSecond         db 'SECOND',0           ; DATA XREF: .data.rel.ro:0000000000214900↓o
.rodata:000000000001063B                                         ; .data.rel.ro:0000000000214270↓o
.rodata:0000000000010642 aSec            db 'SEC',0              ; DATA XREF: .data.rel.ro:0000000000214910↓o
.rodata:0000000000010642                                         ; hard_locale+18↑o ...
.rodata:0000000000010646 aFebruary       db 'FEBRUARY',0         ; DATA XREF: .data.rel.ro:0000000000214950↓o
.rodata:000000000001064F aMarch          db 'MARCH',0            ; DATA XREF: .data.rel.ro:0000000000214960↓o
.rodata:000000000001064F                                         ; .data.rel.ro:00000000002142B0↓o
.rodata:0000000000010655 aApril          db 'APRIL',0            ; DATA XREF: .data.rel.ro:0000000000214970↓o
.rodata:0000000000010655                                         ; .data.rel.ro:00000000002142E0↓o
.rodata:000000000001065B aMay            db 'MAY',0              ; DATA XREF: .data.rel.ro:0000000000214980↓o
.rodata:000000000001065F aJune           db 'JUNE',0             ; DATA XREF: .data.rel.ro:0000000000214990↓o
.rodata:0000000000010664 aJuly           db 'JULY',0             ; DATA XREF: .data.rel.ro:00000000002149A0↓o
.rodata:0000000000010669 aAugust         db 'AUGUST',0           ; DATA XREF: .data.rel.ro:00000000002149B0↓o
.rodata:0000000000010670 aSeptember      db 'SEPTEMBER',0        ; DATA XREF: .data.rel.ro:00000000002149C0↓o
.rodata:000000000001067A aSept           db 'SEPT',0             ; DATA XREF: .data.rel.ro:00000000002149D0↓o
.rodata:000000000001067F aOctober        db 'OCTOBER',0          ; DATA XREF: .data.rel.ro:00000000002149E0↓o
.rodata:0000000000010687 aNovember       db 'NOVEMBER',0         ; DATA XREF: .data.rel.ro:00000000002149F0↓o
.rodata:0000000000010690 aDecember       db 'DECEMBER',0         ; DATA XREF: .data.rel.ro:0000000000214A00↓o
.rodata:0000000000010699 aSunday         db 'SUNDAY',0           ; DATA XREF: .data.rel.ro:0000000000214A10↓o
.rodata:00000000000106A0 aMonday         db 'MONDAY',0           ; DATA XREF: .data.rel.ro:0000000000214A20↓o
.rodata:00000000000106A7 aTuesday        db 'TUESDAY',0          ; DATA XREF: .data.rel.ro:0000000000214A30↓o
.rodata:00000000000106AF aTues           db 'TUES',0             ; DATA XREF: .data.rel.ro:0000000000214A40↓o
.rodata:00000000000106B4 aWednesday      db 'WEDNESDAY',0        ; DATA XREF: .data.rel.ro:0000000000214A50↓o
.rodata:00000000000106BE aWednes         db 'WEDNES',0           ; DATA XREF: .data.rel.ro:0000000000214A60↓o
.rodata:00000000000106C5 aThursday       db 'THURSDAY',0         ; DATA XREF: .data.rel.ro:0000000000214A70↓o
.rodata:00000000000106CE aThur           db 'THUR',0             ; DATA XREF: .data.rel.ro:0000000000214A80↓o
.rodata:00000000000106D3 aThurs          db 'THURS',0            ; DATA XREF: .data.rel.ro:0000000000214A90↓o
.rodata:00000000000106D9 aFriday         db 'FRIDAY',0           ; DATA XREF: .data.rel.ro:0000000000214AA0↓o
.rodata:00000000000106D9                                         ; .data.rel.ro:00000000002148C0↓o ...
.rodata:00000000000106E0 aSaturday       db 'SATURDAY',0         ; DATA XREF: .data.rel.ro:0000000000214AB0↓o
.rodata:00000000000106E9 aAM             db 'A.M.',0             ; DATA XREF: .data.rel.ro:0000000000214AF0↓o
.rodata:00000000000106EE aPm_0           db 'PM',0               ; DATA XREF: .data.rel.ro:0000000000214B00↓o
.rodata:00000000000106F1 aPM             db 'P.M.',0             ; DATA XREF: .data.rel.ro:0000000000214B10↓o
.rodata:00000000000106F6                 align 8
.rodata:00000000000106F8 ; const char aSDayOrdinalLdN[]
.rodata:00000000000106F8 aSDayOrdinalLdN db '%s (day ordinal=%ld number=%d)',0
.rodata:00000000000106F8                                         ; DATA XREF: debug_print_current_time_part_10+F1↑o
.rodata:0000000000010717                 align 8
.rodata:0000000000010718 ; const char aWarningValueLd[]
.rodata:0000000000010718 aWarningValueLd db 'warning: value %ld has %ld digits. Assuming YYYY/MM/DD',0Ah,0
.rodata:0000000000010718                                         ; DATA XREF: yyparse+C68↑o
.rodata:0000000000010750 ; const char aWarningValueLd_0[]
.rodata:0000000000010750 aWarningValueLd_0 db 'warning: value %ld has less than 4 digits. Assuming MM/DD/YY[YY]',0Ah
.rodata:0000000000010750                                         ; DATA XREF: yyparse+17C8↑o
.rodata:0000000000010750                 db 0
.rodata:0000000000010792                 align 8
.rodata:0000000000010798 ; const char aErrorParsingFa_0[]
.rodata:0000000000010798 aErrorParsingFa_0 db 'error: parsing failed, stopped at ',27h,'%s',27h,0Ah,0
.rodata:0000000000010798                                         ; DATA XREF: parse_datetime2:loc_7228↑o
.rodata:00000000000107C0 aTzUtc0Environm db 'TZ="UTC0" environment value or -u',0
.rodata:00000000000107C0                                         ; DATA XREF: parse_datetime2+B37↑o
.rodata:00000000000107E2                 align 8
.rodata:00000000000107E8 aErrorSeenMulti_3 db 'error: seen multiple time parts',0Ah,0
.rodata:00000000000107E8                                         ; DATA XREF: parse_datetime2:loc_733B↑o
.rodata:0000000000010809                 align 10h
.rodata:0000000000010810 aErrorSeenMulti_2 db 'error: seen multiple date parts',0Ah,0
.rodata:0000000000010810                                         ; DATA XREF: parse_datetime2:loc_7328↑o
.rodata:0000000000010831                 align 8
.rodata:0000000000010838 aErrorSeenMulti_1 db 'error: seen multiple days parts',0Ah,0
.rodata:0000000000010838                                         ; DATA XREF: parse_datetime2:loc_7318↑o
.rodata:0000000000010859                 align 20h
.rodata:0000000000010860 aErrorSeenMulti_0 db 'error: seen multiple daylight-saving parts',0Ah,0
.rodata:0000000000010860                                         ; DATA XREF: parse_datetime2:loc_7308↑o
.rodata:000000000001088C                 align 10h
.rodata:0000000000010890 aErrorSeenMulti db 'error: seen multiple time-zone parts',0Ah,0
.rodata:0000000000010890                                         ; DATA XREF: parse_datetime2+978↑o
.rodata:00000000000108B6                 align 8
.rodata:00000000000108B8 ; const char aWarningAdjusti[]
.rodata:00000000000108B8 aWarningAdjusti db 'warning: adjusting year value %ld to %ld',0Ah,0
.rodata:00000000000108B8                                         ; DATA XREF: parse_datetime2:loc_7B68↑o
.rodata:00000000000108E2                 align 8
.rodata:00000000000108E8 ; const char aErrorYearMonth[]
.rodata:00000000000108E8 aErrorYearMonth db 'error: year, month, or day overflow',0Ah,0
.rodata:00000000000108E8                                         ; DATA XREF: parse_datetime2+AFC↑o
.rodata:000000000001090D                 align 10h
.rodata:0000000000010910 ; const char aUsingSpecified[]
.rodata:0000000000010910 aUsingSpecified db 'using specified time as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010910                                         ; DATA XREF: parse_datetime2+1888↑o
.rodata:000000000001093E                 align 20h
.rodata:0000000000010940 ; const char aUsingCurrentTi[]
.rodata:0000000000010940 aUsingCurrentTi db 'using current time as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010940                                         ; DATA XREF: parse_datetime2:loc_8676↑o
.rodata:000000000001096C                 align 10h
.rodata:0000000000010970 aWarningUsingMi db 'warning: using midnight as starting time: 00:00:00',0Ah,0
.rodata:0000000000010970                                         ; DATA XREF: parse_datetime2:loc_7C63↑o
.rodata:00000000000109A4                 align 8
.rodata:00000000000109A8 ; const char aErrorInvalidDa[]
.rodata:00000000000109A8 aErrorInvalidDa db 'error: invalid date/time value:',0Ah,0
.rodata:00000000000109A8                                         ; DATA XREF: parse_datetime2+D99↑o
.rodata:00000000000109A8                                         ; parse_datetime2+18D5↑o
.rodata:00000000000109C9                 align 10h
.rodata:00000000000109D0 a4s2s2s2s2s2s   db '                                 %4s %2s %2s %2s %2s %2s',0
.rodata:00000000000109D0                                         ; DATA XREF: parse_datetime2+E95↑o
.rodata:0000000000010A09                 align 10h
.rodata:0000000000010A10 ; const char aNonExistingDue[]
.rodata:0000000000010A10 aNonExistingDue db '       non-existing due to daylight-saving time;',0Ah,0
.rodata:0000000000010A10                                         ; DATA XREF: parse_datetime2+F06↑o
.rodata:0000000000010A42                 align 8
.rodata:0000000000010A48 ; const char aInvalidDayMont[]
.rodata:0000000000010A48 aInvalidDayMont db '       invalid day/month combination;',0Ah,0
.rodata:0000000000010A48                                         ; DATA XREF: parse_datetime2+F32↑o
.rodata:0000000000010A6F                 align 10h
.rodata:0000000000010A70 ; const char aNumericValuesO[]
.rodata:0000000000010A70 aNumericValuesO db '       numeric values overflow;',0Ah,0
.rodata:0000000000010A70                                         ; DATA XREF: parse_datetime2:loc_78AF↑o
.rodata:0000000000010A91                 align 8
.rodata:0000000000010A98 ; const char aErrorDaySDayOr[]
.rodata:0000000000010A98 aErrorDaySDayOr db 'error: day ',27h,'%s',27h,' (day ordinal=%ld number=%d) resulted '
.rodata:0000000000010A98                                         ; DATA XREF: parse_datetime2+11D0↑o
.rodata:0000000000010A98                 db 'in an invalid date: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010AE7                 align 8
.rodata:0000000000010AE8 ; const char aUsingCurrentDa[]
.rodata:0000000000010AE8 aUsingCurrentDa db 'using current date as starting value: ',27h,'%s',27h,0Ah,0
.rodata:0000000000010AE8                                         ; DATA XREF: parse_datetime2+1C72↑o
.rodata:0000000000010B14                 align 8
.rodata:0000000000010B18 ; const char aWarningDaySIgn[]
.rodata:0000000000010B18 aWarningDaySIgn db 'warning: day (%s) ignored when explicit dates are given',0Ah,0
.rodata:0000000000010B18                                         ; DATA XREF: parse_datetime2+1820↑o
.rodata:0000000000010B51                 align 8
.rodata:0000000000010B58 ; const char aWarningWhenAdd[]
.rodata:0000000000010B58 aWarningWhenAdd db 'warning: when adding relative months/years, it is recommended to '
.rodata:0000000000010B58                                         ; DATA XREF: parse_datetime2+1444↑o
.rodata:0000000000010B58                 db 'specify the 15th of the months',0Ah,0
.rodata:0000000000010BB9                 align 20h
.rodata:0000000000010BC0 ; const char aWarningWhenAdd_0[]
.rodata:0000000000010BC0 aWarningWhenAdd_0 db 'warning: when adding relative days, it is recommended to specify '
.rodata:0000000000010BC0                                         ; DATA XREF: parse_datetime2+1D34↑o
.rodata:0000000000010BC0                 db 'noon',0Ah,0
.rodata:0000000000010C07                 align 8
.rodata:0000000000010C08 ; const char aErrorAddingRel_0[]
.rodata:0000000000010C08 aErrorAddingRel_0 db 'error: adding relative date resulted in an invalid date: ',27h,'%'
.rodata:0000000000010C08                                         ; DATA XREF: parse_datetime2+1CDA↑o
.rodata:0000000000010C08                 db 's',27h,0Ah,0
.rodata:0000000000010C47                 align 8
.rodata:0000000000010C48 ; const char aAfterDateAdjus[]
.rodata:0000000000010C48 aAfterDateAdjus db 'after date adjustment (%+ld years, %+ld months, %+ld days),',0Ah,0
.rodata:0000000000010C48                                         ; DATA XREF: parse_datetime2+166F↑o
.rodata:0000000000010C85                 align 8
.rodata:0000000000010C88 ; const char aWarningDayligh[]
.rodata:0000000000010C88 aWarningDayligh db 'warning: daylight saving time changed after date adjustment',0Ah,0
.rodata:0000000000010C88                                         ; DATA XREF: parse_datetime2+16F8↑o
.rodata:0000000000010CC5                 align 8
.rodata:0000000000010CC8 ; const char aWarningMonthYe[]
.rodata:0000000000010CC8 aWarningMonthYe db 'warning: month/year adjustment resulted in shifted dates:',0Ah,0
.rodata:0000000000010CC8                                         ; DATA XREF: parse_datetime2:loc_80A7↑o
.rodata:0000000000010D03                 align 8
.rodata:0000000000010D08 ; const char aAdjustedYMDS02[]
.rodata:0000000000010D08 aAdjustedYMDS02 db '     adjusted Y M D: %s %02d %02d',0Ah,0
.rodata:0000000000010D08                                         ; DATA XREF: parse_datetime2+177D↑o
.rodata:0000000000010D2B                 align 10h
.rodata:0000000000010D30 ; const char aNormalizedYMDS[]
.rodata:0000000000010D30 aNormalizedYMDS db '   normalized Y M D: %s %02d %02d',0Ah,0
.rodata:0000000000010D30                                         ; DATA XREF: parse_datetime2+17CA↑o
.rodata:0000000000010D53                 align 8
.rodata:0000000000010D58 ; const char aErrorTimezoneD[]
.rodata:0000000000010D58 aErrorTimezoneD db 'error: timezone %d caused time_t overflow',0Ah,0
.rodata:0000000000010D58                                         ; DATA XREF: parse_datetime2+154C↑o
.rodata:0000000000010D83                 align 8
.rodata:0000000000010D88 aErrorAddingRel db 'error: adding relative time caused an overflow',0Ah,0
.rodata:0000000000010D88                                         ; DATA XREF: parse_datetime2+1B3B↑o
.rodata:0000000000010DB8 ; const char aAfterTimeAdjus[]
.rodata:0000000000010DB8 aAfterTimeAdjus db 'after time adjustment (%+ld hours, %+ld minutes, %+ld seconds, %+'
.rodata:0000000000010DB8                                         ; DATA XREF: parse_datetime2+1A80↑o
.rodata:0000000000010DB8                 db 'd ns),',0Ah,0
.rodata:0000000000010E01                 align 8
.rodata:0000000000010E08 ; const char aNewTimeLdEpoch[]
.rodata:0000000000010E08 aNewTimeLdEpoch db '    new time = %ld epoch-seconds',0Ah,0
.rodata:0000000000010E08                                         ; DATA XREF: parse_datetime2+1AAE↑o
.rodata:0000000000010E2A                 align 10h
.rodata:0000000000010E30 ; const char aWarningDayligh_0[]
.rodata:0000000000010E30 aWarningDayligh_0 db 'warning: daylight saving time changed after time adjustment',0Ah,0
.rodata:0000000000010E30                                         ; DATA XREF: parse_datetime2+1B02↑o
.rodata:0000000000010E6D                 align 10h
.rodata:0000000000010E70 ; const char aTimezoneTzSEnv[]
.rodata:0000000000010E70 aTimezoneTzSEnv db 'timezone: TZ="%s" environment value',0Ah,0
.rodata:0000000000010E70                                         ; DATA XREF: parse_datetime2+7B8↑o
.rodata:0000000000010E95                 align 8
.rodata:0000000000010E98 ; const char aFinalLd09dEpoc[]
.rodata:0000000000010E98 aFinalLd09dEpoc db 'final: %ld.%09d (epoch-seconds)',0Ah,0
.rodata:0000000000010E98                                         ; DATA XREF: parse_datetime2+7DA↑o
.rodata:0000000000010EB9                 align 20h
.rodata:0000000000010EC0 jpt_4EAE        dd offset loc_5A9B - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                                         ; DATA XREF: yyparse+150↑o
.rodata:0000000000010EC0                                         ; yyparse+157↑r
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset loc_5B31 - 10EC0h ; jump table for switch statement
.rodata:0000000000010EC0                 dd offset loc_5B0C - 10EC0h, offset loc_6304 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_62DC - 10EC0h, offset loc_62B4 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_628C - 10EC0h, offset loc_626C - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_6216 - 10EC0h, offset loc_61C0 - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_6193 - 10EC0h, offset loc_6163 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_6130 - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_6103 - 10EC0h, offset loc_60D3 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_60A0 - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset loc_6049 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_603C - 10EC0h, offset loc_6027 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_601A - 10EC0h, offset loc_600D - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_6000 - 10EC0h, offset loc_4EB0 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5F8C - 10EC0h, offset loc_5F7A - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5F68 - 10EC0h, offset loc_5F53 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5F3E - 10EC0h, offset loc_5F21 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5F04 - 10EC0h, offset loc_5A23 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5994 - 10EC0h, offset loc_5EB8 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5E6D - 10EC0h, offset loc_5E58 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5E05 - 10EC0h, offset loc_5DF0 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5E30 - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5D9A - 10EC0h, offset loc_51EB - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5779 - 10EC0h, offset loc_5779 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5EF0 - 10EC0h, offset loc_5736 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5D55 - 10EC0h, offset loc_5D41 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_56B1 - 10EC0h, offset loc_5CF0 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5C13 - 10EC0h, offset loc_5909 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_597E - 10EC0h, offset loc_5C60 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_585B - 10EC0h, offset loc_5A59 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5BFF - 10EC0h, offset loc_56F4 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5BBD - 10EC0h, offset loc_5BA9 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_58DF - 10EC0h, offset loc_589D - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_589D - 10EC0h, offset loc_5A38 - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset loc_5736 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_56B1 - 10EC0h, offset loc_5909 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_585B - 10EC0h, offset loc_56F4 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_58DF - 10EC0h, offset loc_597E - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset def_4EAE - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset loc_58FD - 10EC0h
.rodata:0000000000010EC0                 dd offset def_4EAE - 10EC0h, offset loc_58FD - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5B61 - 10EC0h, offset loc_5C74 - 10EC0h
.rodata:0000000000010EC0                 dd offset loc_5D35 - 10EC0h, offset loc_5BA0 - 10EC0h
.rodata:0000000000011020 days_values_5109 db  53h ; S            ; DATA XREF: str_days_constprop_13:loc_48F1↑o
.rodata:0000000000011021                 db  75h ; u
.rodata:0000000000011022                 db  6Eh ; n
.rodata:0000000000011023                 db    0
.rodata:0000000000011024                 db  4Dh ; M
.rodata:0000000000011025                 db  6Fh ; o
.rodata:0000000000011026                 db  6Eh ; n
.rodata:0000000000011027                 db    0
.rodata:0000000000011028                 db  54h ; T
.rodata:0000000000011029                 db  75h ; u
.rodata:000000000001102A                 db  65h ; e
.rodata:000000000001102B                 db    0
.rodata:000000000001102C                 db  57h ; W
.rodata:000000000001102D                 db  65h ; e
.rodata:000000000001102E                 db  64h ; d
.rodata:000000000001102F                 db    0
.rodata:0000000000011030                 db  54h ; T
.rodata:0000000000011031                 db  68h ; h
.rodata:0000000000011032                 db  75h ; u
.rodata:0000000000011033                 db    0
.rodata:0000000000011034                 db  46h ; F
.rodata:0000000000011035                 db  72h ; r
.rodata:0000000000011036                 db  69h ; i
.rodata:0000000000011037                 db    0
.rodata:0000000000011038                 db  53h ; S
.rodata:0000000000011039                 db  61h ; a
.rodata:000000000001103A                 db  74h ; t
.rodata:000000000001103B                 db    0
.rodata:000000000001103C                 db    0
.rodata:000000000001103D                 db    0
.rodata:000000000001103E                 db    0
.rodata:000000000001103F                 db    0
.rodata:0000000000011040 ordinal_values_5108 db 'last',0         ; DATA XREF: str_days_constprop_13+C8↑o
.rodata:0000000000011045                 db    0
.rodata:0000000000011046                 db    0
.rodata:0000000000011047                 db    0
.rodata:0000000000011048                 db    0
.rodata:0000000000011049                 db    0
.rodata:000000000001104A                 db    0
.rodata:000000000001104B                 db  74h ; t
.rodata:000000000001104C                 db  68h ; h
.rodata:000000000001104D                 db  69h ; i
.rodata:000000000001104E                 db  73h ; s
.rodata:000000000001104F                 db    0
.rodata:0000000000011050                 db    0
.rodata:0000000000011051                 db    0
.rodata:0000000000011052                 db    0
.rodata:0000000000011053                 db    0
.rodata:0000000000011054                 db    0
.rodata:0000000000011055                 db    0
.rodata:0000000000011056                 db  6Eh ; n
.rodata:0000000000011057                 db  65h ; e
.rodata:0000000000011058                 db  78h ; x
.rodata:0000000000011059                 db  74h ; t
.rodata:000000000001105A                 db  2Fh ; /
.rodata:000000000001105B                 db  66h ; f
.rodata:000000000001105C                 db  69h ; i
.rodata:000000000001105D                 db  72h ; r
.rodata:000000000001105E                 db  73h ; s
.rodata:000000000001105F                 db  74h ; t
.rodata:0000000000011060                 db    0
.rodata:0000000000011061                 db  28h ; (
.rodata:0000000000011062                 db  53h ; S
.rodata:0000000000011063                 db  45h ; E
.rodata:0000000000011064                 db  43h ; C
.rodata:0000000000011065                 db  4Fh ; O
.rodata:0000000000011066                 db  4Eh ; N
.rodata:0000000000011067                 db  44h ; D
.rodata:0000000000011068                 db  29h ; )
.rodata:0000000000011069                 db    0
.rodata:000000000001106A                 db    0
.rodata:000000000001106B                 db    0
.rodata:000000000001106C                 db  74h ; t
.rodata:000000000001106D                 db  68h ; h
.rodata:000000000001106E                 db  69h ; i
.rodata:000000000001106F                 db  72h ; r
.rodata:0000000000011070                 db  64h ; d
.rodata:0000000000011071                 db    0
.rodata:0000000000011072                 db    0
.rodata:0000000000011073                 db    0
.rodata:0000000000011074                 db    0
.rodata:0000000000011075                 db    0
.rodata:0000000000011076                 db    0
.rodata:0000000000011077                 db  66h ; f
.rodata:0000000000011078                 db  6Fh ; o
.rodata:0000000000011079                 db  75h ; u
.rodata:000000000001107A                 db  72h ; r
.rodata:000000000001107B                 db  74h ; t
.rodata:000000000001107C                 db  68h ; h
.rodata:000000000001107D                 db    0
.rodata:000000000001107E                 db    0
.rodata:000000000001107F                 db    0
.rodata:0000000000011080                 db    0
.rodata:0000000000011081                 db    0
.rodata:0000000000011082                 db  66h ; f
.rodata:0000000000011083                 db  69h ; i
.rodata:0000000000011084                 db  66h ; f
.rodata:0000000000011085                 db  74h ; t
.rodata:0000000000011086                 db  68h ; h
.rodata:0000000000011087                 db    0
.rodata:0000000000011088                 db    0
.rodata:0000000000011089                 db    0
.rodata:000000000001108A                 db    0
.rodata:000000000001108B                 db    0
.rodata:000000000001108C                 db    0
.rodata:000000000001108D                 db  73h ; s
.rodata:000000000001108E                 db  69h ; i
.rodata:000000000001108F                 db  78h ; x
.rodata:0000000000011090                 db  74h ; t
.rodata:0000000000011091                 db  68h ; h
.rodata:0000000000011092                 db    0
.rodata:0000000000011093                 db    0
.rodata:0000000000011094                 db    0
.rodata:0000000000011095                 db    0
.rodata:0000000000011096                 db    0
.rodata:0000000000011097                 db    0
.rodata:0000000000011098                 db  73h ; s
.rodata:0000000000011099                 db  65h ; e
.rodata:000000000001109A                 db  76h ; v
.rodata:000000000001109B                 db  65h ; e
.rodata:000000000001109C                 db  6Eh ; n
.rodata:000000000001109D                 db  74h ; t
.rodata:000000000001109E                 db  68h ; h
.rodata:000000000001109F                 db    0
.rodata:00000000000110A0                 db    0
.rodata:00000000000110A1                 db    0
.rodata:00000000000110A2                 db    0
.rodata:00000000000110A3                 db  65h ; e
.rodata:00000000000110A4                 db  69h ; i
.rodata:00000000000110A5                 db  67h ; g
.rodata:00000000000110A6                 db  68h ; h
.rodata:00000000000110A7                 db  74h ; t
.rodata:00000000000110A8                 db    0
.rodata:00000000000110A9                 db    0
.rodata:00000000000110AA                 db    0
.rodata:00000000000110AB                 db    0
.rodata:00000000000110AC                 db    0
.rodata:00000000000110AD                 db    0
.rodata:00000000000110AE                 db  6Eh ; n
.rodata:00000000000110AF                 db  69h ; i
.rodata:00000000000110B0                 db  6Eh ; n
.rodata:00000000000110B1                 db  74h ; t
.rodata:00000000000110B2                 db  68h ; h
.rodata:00000000000110B3                 db    0
.rodata:00000000000110B4                 db    0
.rodata:00000000000110B5                 db    0
.rodata:00000000000110B6                 db    0
.rodata:00000000000110B7                 db    0
.rodata:00000000000110B8                 db    0
.rodata:00000000000110B9                 db  74h ; t
.rodata:00000000000110BA                 db  65h ; e
.rodata:00000000000110BB                 db  6Eh ; n
.rodata:00000000000110BC                 db  74h ; t
.rodata:00000000000110BD                 db  68h ; h
.rodata:00000000000110BE                 db    0
.rodata:00000000000110BF                 db    0
.rodata:00000000000110C0                 db    0
.rodata:00000000000110C1                 db    0
.rodata:00000000000110C2                 db    0
.rodata:00000000000110C3                 db    0
.rodata:00000000000110C4                 db  65h ; e
.rodata:00000000000110C5                 db  6Ch ; l
.rodata:00000000000110C6                 db  65h ; e
.rodata:00000000000110C7                 db  76h ; v
.rodata:00000000000110C8                 db  65h ; e
.rodata:00000000000110C9                 db  6Eh ; n
.rodata:00000000000110CA                 db  74h ; t
.rodata:00000000000110CB                 db  68h ; h
.rodata:00000000000110CC                 db    0
.rodata:00000000000110CD                 db    0
.rodata:00000000000110CE                 db    0
.rodata:00000000000110CF                 db  74h ; t
.rodata:00000000000110D0                 db  77h ; w
.rodata:00000000000110D1                 db  65h ; e
.rodata:00000000000110D2                 db  6Ch ; l
.rodata:00000000000110D3                 db  66h ; f
.rodata:00000000000110D4                 db  74h ; t
.rodata:00000000000110D5                 db  68h ; h
.rodata:00000000000110D6                 db    0
.rodata:00000000000110D7                 db    0
.rodata:00000000000110D8                 db    0
.rodata:00000000000110D9                 db    0
.rodata:00000000000110DA                 db    0
.rodata:00000000000110DB                 db    0
.rodata:00000000000110DC                 db    0
.rodata:00000000000110DD                 db    0
.rodata:00000000000110DE                 db    0
.rodata:00000000000110DF                 db    0
.rodata:00000000000110E0 yyr2            db    0                 ; DATA XREF: yyparse+B3↑o
.rodata:00000000000110E1                 db    2
.rodata:00000000000110E2                 db    1
.rodata:00000000000110E3                 db    1
.rodata:00000000000110E4                 db    2
.rodata:00000000000110E5                 db    0
.rodata:00000000000110E6                 db    2
.rodata:00000000000110E7                 db    1
.rodata:00000000000110E8                 db    1
.rodata:00000000000110E9                 db    1
.rodata:00000000000110EA                 db    1
.rodata:00000000000110EB                 db    1
.rodata:00000000000110EC                 db    1
.rodata:00000000000110ED                 db    1
.rodata:00000000000110EE                 db    1
.rodata:00000000000110EF                 db    1
.rodata:00000000000110F0                 db    1
.rodata:00000000000110F1                 db    3
.rodata:00000000000110F2                 db    2
.rodata:00000000000110F3                 db    4
.rodata:00000000000110F4                 db    6
.rodata:00000000000110F5                 db    1
.rodata:00000000000110F6                 db    2
.rodata:00000000000110F7                 db    4
.rodata:00000000000110F8                 db    6
.rodata:00000000000110F9                 db    0
.rodata:00000000000110FA                 db    1
.rodata:00000000000110FB                 db    2
.rodata:00000000000110FC                 db    1
.rodata:00000000000110FD                 db    2
.rodata:00000000000110FE                 db    1
.rodata:00000000000110FF                 db    1
.rodata:0000000000011100                 db    2
.rodata:0000000000011101                 db    2
.rodata:0000000000011102                 db    3
.rodata:0000000000011103                 db    1
.rodata:0000000000011104                 db    2
.rodata:0000000000011105                 db    1
.rodata:0000000000011106                 db    2
.rodata:0000000000011107                 db    2
.rodata:0000000000011108                 db    2
.rodata:0000000000011109                 db    3
.rodata:000000000001110A                 db    5
.rodata:000000000001110B                 db    3
.rodata:000000000001110C                 db    3
.rodata:000000000001110D                 db    2
.rodata:000000000001110E                 db    4
.rodata:000000000001110F                 db    2
.rodata:0000000000011110                 db    3
.rodata:0000000000011111                 db    1
.rodata:0000000000011112                 db    3
.rodata:0000000000011113                 db    2
.rodata:0000000000011114                 db    1
.rodata:0000000000011115                 db    1
.rodata:0000000000011116                 db    2
.rodata:0000000000011117                 db    2
.rodata:0000000000011118                 db    1
.rodata:0000000000011119                 db    2
.rodata:000000000001111A                 db    2
.rodata:000000000001111B                 db    1
.rodata:000000000001111C                 db    2
.rodata:000000000001111D                 db    2
.rodata:000000000001111E                 db    1
.rodata:000000000001111F                 db    2
.rodata:0000000000011120                 db    2
.rodata:0000000000011121                 db    1
.rodata:0000000000011122                 db    2
.rodata:0000000000011123                 db    2
.rodata:0000000000011124                 db    1
.rodata:0000000000011125                 db    2
.rodata:0000000000011126                 db    2
.rodata:0000000000011127                 db    2
.rodata:0000000000011128                 db    2
.rodata:0000000000011129                 db    1
.rodata:000000000001112A                 db    1
.rodata:000000000001112B                 db    2
.rodata:000000000001112C                 db    2
.rodata:000000000001112D                 db    2
.rodata:000000000001112E                 db    2
.rodata:000000000001112F                 db    2
.rodata:0000000000011130                 db    2
.rodata:0000000000011131                 db    1
.rodata:0000000000011132                 db    1
.rodata:0000000000011133                 db    1
.rodata:0000000000011134                 db    1
.rodata:0000000000011135                 db    1
.rodata:0000000000011136                 db    1
.rodata:0000000000011137                 db    1
.rodata:0000000000011138                 db    1
.rodata:0000000000011139                 db    2
.rodata:000000000001113A                 db    0
.rodata:000000000001113B                 db    2
.rodata:000000000001113C                 db    0
.rodata:000000000001113D                 db    0
.rodata:000000000001113E                 db    0
.rodata:000000000001113F                 db    0
.rodata:0000000000011140 yyr1            db    0                 ; DATA XREF: yyparse+34E↑o
.rodata:0000000000011141                 db  1Ch
.rodata:0000000000011142                 db  1Dh
.rodata:0000000000011143                 db  1Dh
.rodata:0000000000011144                 db  1Eh
.rodata:0000000000011145                 db  1Fh
.rodata:0000000000011146                 db  1Fh
.rodata:0000000000011147                 db  20h
.rodata:0000000000011148                 db  20h
.rodata:0000000000011149                 db  20h
.rodata:000000000001114A                 db  20h
.rodata:000000000001114B                 db  20h
.rodata:000000000001114C                 db  20h
.rodata:000000000001114D                 db  20h
.rodata:000000000001114E                 db  20h
.rodata:000000000001114F                 db  20h
.rodata:0000000000011150                 db  21h ; !
.rodata:0000000000011151                 db  22h ; "
.rodata:0000000000011152                 db  23h ; #
.rodata:0000000000011153                 db  23h ; #
.rodata:0000000000011154                 db  23h ; #
.rodata:0000000000011155                 db  23h ; #
.rodata:0000000000011156                 db  24h ; $
.rodata:0000000000011157                 db  24h ; $
.rodata:0000000000011158                 db  24h ; $
.rodata:0000000000011159                 db  25h ; %
.rodata:000000000001115A                 db  25h ; %
.rodata:000000000001115B                 db  26h ; &
.rodata:000000000001115C                 db  27h ; '
.rodata:000000000001115D                 db  27h ; '
.rodata:000000000001115E                 db  28h ; (
.rodata:000000000001115F                 db  28h ; (
.rodata:0000000000011160                 db  28h ; (
.rodata:0000000000011161                 db  28h ; (
.rodata:0000000000011162                 db  28h ; (
.rodata:0000000000011163                 db  28h ; (
.rodata:0000000000011164                 db  28h ; (
.rodata:0000000000011165                 db  29h ; )
.rodata:0000000000011166                 db  29h ; )
.rodata:0000000000011167                 db  29h ; )
.rodata:0000000000011168                 db  29h ; )
.rodata:0000000000011169                 db  2Ah ; *
.rodata:000000000001116A                 db  2Ah ; *
.rodata:000000000001116B                 db  2Ah ; *
.rodata:000000000001116C                 db  2Ah ; *
.rodata:000000000001116D                 db  2Ah ; *
.rodata:000000000001116E                 db  2Ah ; *
.rodata:000000000001116F                 db  2Ah ; *
.rodata:0000000000011170                 db  2Ah ; *
.rodata:0000000000011171                 db  2Ah ; *
.rodata:0000000000011172                 db  2Bh ; +
.rodata:0000000000011173                 db  2Ch ; ,
.rodata:0000000000011174                 db  2Ch ; ,
.rodata:0000000000011175                 db  2Ch ; ,
.rodata:0000000000011176                 db  2Dh ; -
.rodata:0000000000011177                 db  2Dh ; -
.rodata:0000000000011178                 db  2Dh ; -
.rodata:0000000000011179                 db  2Dh ; -
.rodata:000000000001117A                 db  2Dh ; -
.rodata:000000000001117B                 db  2Dh ; -
.rodata:000000000001117C                 db  2Dh ; -
.rodata:000000000001117D                 db  2Dh ; -
.rodata:000000000001117E                 db  2Dh ; -
.rodata:000000000001117F                 db  2Dh ; -
.rodata:0000000000011180                 db  2Dh ; -
.rodata:0000000000011181                 db  2Dh ; -
.rodata:0000000000011182                 db  2Dh ; -
.rodata:0000000000011183                 db  2Dh ; -
.rodata:0000000000011184                 db  2Dh ; -
.rodata:0000000000011185                 db  2Dh ; -
.rodata:0000000000011186                 db  2Dh ; -
.rodata:0000000000011187                 db  2Dh ; -
.rodata:0000000000011188                 db  2Dh ; -
.rodata:0000000000011189                 db  2Dh ; -
.rodata:000000000001118A                 db  2Dh ; -
.rodata:000000000001118B                 db  2Eh ; .
.rodata:000000000001118C                 db  2Eh ; .
.rodata:000000000001118D                 db  2Eh ; .
.rodata:000000000001118E                 db  2Eh ; .
.rodata:000000000001118F                 db  2Eh ; .
.rodata:0000000000011190                 db  2Eh ; .
.rodata:0000000000011191                 db  2Fh ; /
.rodata:0000000000011192                 db  30h ; 0
.rodata:0000000000011193                 db  30h ; 0
.rodata:0000000000011194                 db  31h ; 1
.rodata:0000000000011195                 db  31h ; 1
.rodata:0000000000011196                 db  32h ; 2
.rodata:0000000000011197                 db  32h ; 2
.rodata:0000000000011198                 db  33h ; 3
.rodata:0000000000011199                 db  34h ; 4
.rodata:000000000001119A                 db  35h ; 5
.rodata:000000000001119B                 db  35h ; 5
.rodata:000000000001119C                 db    0
.rodata:000000000001119D                 db    0
.rodata:000000000001119E                 db    0
.rodata:000000000001119F                 db    0
.rodata:00000000000111A0 yycheck         db  1Bh                 ; DATA XREF: yyparse+36B↑o
.rodata:00000000000111A0                                         ; yyparse+3E6↑o ...
.rodata:00000000000111A1                 db    5
.rodata:00000000000111A2                 db    6
.rodata:00000000000111A3                 db    7
.rodata:00000000000111A4                 db    8
.rodata:00000000000111A5                 db    9
.rodata:00000000000111A6                 db  0Ah
.rodata:00000000000111A7                 db    4
.rodata:00000000000111A8                 db  0Ch
.rodata:00000000000111A9                 db  0Fh
.rodata:00000000000111AA                 db  66h ; f
.rodata:00000000000111AB                 db  0Fh
.rodata:00000000000111AC                 db  10h
.rodata:00000000000111AD                 db  13h
.rodata:00000000000111AE                 db  0Fh
.rodata:00000000000111AF                 db  13h
.rodata:00000000000111B0                 db  13h
.rodata:00000000000111B1                 db  14h
.rodata:00000000000111B2                 db  13h
.rodata:00000000000111B3                 db  19h
.rodata:00000000000111B4                 db  70h ; p
.rodata:00000000000111B5                 db  19h
.rodata:00000000000111B6                 db  13h
.rodata:00000000000111B7                 db  1Bh
.rodata:00000000000111B8                 db    5
.rodata:00000000000111B9                 db    6
.rodata:00000000000111BA                 db    7
.rodata:00000000000111BB                 db    8
.rodata:00000000000111BC                 db    9
.rodata:00000000000111BD                 db  0Ah
.rodata:00000000000111BE                 db    5
.rodata:00000000000111BF                 db    6
.rodata:00000000000111C0                 db    7
.rodata:00000000000111C1                 db    8
.rodata:00000000000111C2                 db    9
.rodata:00000000000111C3                 db  0Ah
.rodata:00000000000111C4                 db  13h
.rodata:00000000000111C5                 db  13h
.rodata:00000000000111C6                 db  13h
.rodata:00000000000111C7                 db  6Bh ; k
.rodata:00000000000111C8                 db  13h
.rodata:00000000000111C9                 db  14h
.rodata:00000000000111CA                 db  19h
.rodata:00000000000111CB                 db  19h
.rodata:00000000000111CC                 db  19h
.rodata:00000000000111CD                 db  71h ; q
.rodata:00000000000111CE                 db  13h
.rodata:00000000000111CF                 db  14h
.rodata:00000000000111D0                 db  15h
.rodata:00000000000111D1                 db  16h
.rodata:00000000000111D2                 db  19h
.rodata:00000000000111D3                 db    5
.rodata:00000000000111D4                 db    6
.rodata:00000000000111D5                 db    7
.rodata:00000000000111D6                 db    8
.rodata:00000000000111D7                 db    9
.rodata:00000000000111D8                 db  0Ah
.rodata:00000000000111D9                 db  0Bh
.rodata:00000000000111DA                 db  0Ch
.rodata:00000000000111DB                 db  0Dh
.rodata:00000000000111DC                 db  0Eh
.rodata:00000000000111DD                 db  17h
.rodata:00000000000111DE                 db  10h
.rodata:00000000000111DF                 db  11h
.rodata:00000000000111E0                 db  12h
.rodata:00000000000111E1                 db  13h
.rodata:00000000000111E2                 db  14h
.rodata:00000000000111E3                 db  15h
.rodata:00000000000111E4                 db  16h
.rodata:00000000000111E5                 db  60h ; `
.rodata:00000000000111E6                 db  18h
.rodata:00000000000111E7                 db    5
.rodata:00000000000111E8                 db    6
.rodata:00000000000111E9                 db    7
.rodata:00000000000111EA                 db    8
.rodata:00000000000111EB                 db    9
.rodata:00000000000111EC                 db  0Ah
.rodata:00000000000111ED                 db    0
.rodata:00000000000111EE                 db  0Ch
.rodata:00000000000111EF                 db    5
.rodata:00000000000111F0                 db    6
.rodata:00000000000111F1                 db    7
.rodata:00000000000111F2                 db    8
.rodata:00000000000111F3                 db    9
.rodata:00000000000111F4                 db  0Ah
.rodata:00000000000111F5                 db  19h
.rodata:00000000000111F6                 db    4
.rodata:00000000000111F7                 db  1Bh
.rodata:00000000000111F8                 db  1Ah
.rodata:00000000000111F9                 db  14h
.rodata:00000000000111FA                 db  1Eh
.rodata:00000000000111FB                 db  16h
.rodata:00000000000111FC                 db    9
.rodata:00000000000111FD                 db    9
.rodata:00000000000111FE                 db  13h
.rodata:00000000000111FF                 db  18h
.rodata:0000000000011200                 db    3
.rodata:0000000000011201                 db  13h
.rodata:0000000000011202                 db  1Ah
.rodata:0000000000011203                 db  14h
.rodata:0000000000011204                 db  14h
.rodata:0000000000011205                 db  14h
.rodata:0000000000011206                 db  3Bh ; ;
.rodata:0000000000011207                 db  1Bh
.rodata:0000000000011208                 db  54h ; T
.rodata:0000000000011209                 db  14h
.rodata:000000000001120A                 db  14h
.rodata:000000000001120B                 db 0FFh
.rodata:000000000001120C                 db  14h
.rodata:000000000001120D                 db  14h
.rodata:000000000001120E                 db  13h
.rodata:000000000001120F                 db 0FFh
.rodata:0000000000011210                 db  19h
.rodata:0000000000011211                 db    0
.rodata:0000000000011212                 db    0
.rodata:0000000000011213                 db    0
.rodata:0000000000011214                 db    0
.rodata:0000000000011215                 db    0
.rodata:0000000000011216                 db    0
.rodata:0000000000011217                 db    0
.rodata:0000000000011218                 db    0
.rodata:0000000000011219                 db    0
.rodata:000000000001121A                 db    0
.rodata:000000000001121B                 db    0
.rodata:000000000001121C                 db    0
.rodata:000000000001121D                 db    0
.rodata:000000000001121E                 db    0
.rodata:000000000001121F                 db    0
.rodata:0000000000011220 yytable         db  4Fh ; O             ; DATA XREF: yyparse+3ED↑o
.rodata:0000000000011220                                         ; yyparse+646↑o ...
.rodata:0000000000011221                 db  43h ; C
.rodata:0000000000011222                 db  44h ; D
.rodata:0000000000011223                 db  45h ; E
.rodata:0000000000011224                 db  46h ; F
.rodata:0000000000011225                 db  47h ; G
.rodata:0000000000011226                 db  48h ; H
.rodata:0000000000011227                 db  3Ah ; :
.rodata:0000000000011228                 db  49h ; I
.rodata:0000000000011229                 db  64h ; d
.rodata:000000000001122A                 db  6Bh ; k
.rodata:000000000001122B                 db  4Ah ; J
.rodata:000000000001122C                 db  4Bh ; K
.rodata:000000000001122D                 db  65h ; e
.rodata:000000000001122E                 db  6Eh ; n
.rodata:000000000001122F                 db  4Ch ; L
.rodata:0000000000011230                 db  31h ; 1
.rodata:0000000000011231                 db  32h ; 2
.rodata:0000000000011232                 db  65h ; e
.rodata:0000000000011233                 db  66h ; f
.rodata:0000000000011234                 db  71h ; q
.rodata:0000000000011235                 db  4Dh ; M
.rodata:0000000000011236                 db  3Bh ; ;
.rodata:0000000000011237                 db  4Eh ; N
.rodata:0000000000011238                 db  3Dh ; =
.rodata:0000000000011239                 db  3Eh ; >
.rodata:000000000001123A                 db  3Fh ; ?
.rodata:000000000001123B                 db  40h ; @
.rodata:000000000001123C                 db  41h ; A
.rodata:000000000001123D                 db  42h ; B
.rodata:000000000001123E                 db  3Dh ; =
.rodata:000000000001123F                 db  3Eh ; >
.rodata:0000000000011240                 db  3Fh ; ?
.rodata:0000000000011241                 db  40h ; @
.rodata:0000000000011242                 db  41h ; A
.rodata:0000000000011243                 db  42h ; B
.rodata:0000000000011244                 db  65h ; e
.rodata:0000000000011245                 db  65h ; e
.rodata:0000000000011246                 db  5Ch ; \
.rodata:0000000000011247                 db  6Fh ; o
.rodata:0000000000011248                 db  5Ah ; Z
.rodata:0000000000011249                 db  5Bh ; [
.rodata:000000000001124A                 db  6Ah ; j
.rodata:000000000001124B                 db  70h ; p
.rodata:000000000001124C                 db  58h ; X
.rodata:000000000001124D                 db  6Fh ; o
.rodata:000000000001124E                 db    5
.rodata:000000000001124F                 db    6
.rodata:0000000000011250                 db    7
.rodata:0000000000011251                 db    8
.rodata:0000000000011252                 db  58h ; X
.rodata:0000000000011253                 db  0Dh
.rodata:0000000000011254                 db  0Eh
.rodata:0000000000011255                 db  0Fh
.rodata:0000000000011256                 db  10h
.rodata:0000000000011257                 db  11h
.rodata:0000000000011258                 db  12h
.rodata:0000000000011259                 db  13h
.rodata:000000000001125A                 db  14h
.rodata:000000000001125B                 db  15h
.rodata:000000000001125C                 db  16h
.rodata:000000000001125D                 db    1
.rodata:000000000001125E                 db  17h
.rodata:000000000001125F                 db  18h
.rodata:0000000000011260                 db  19h
.rodata:0000000000011261                 db  1Ah
.rodata:0000000000011262                 db  1Bh
.rodata:0000000000011263                 db  1Ch
.rodata:0000000000011264                 db  1Dh
.rodata:0000000000011265                 db  4Fh ; O
.rodata:0000000000011266                 db  1Eh
.rodata:0000000000011267                 db  33h ; 3
.rodata:0000000000011268                 db  34h ; 4
.rodata:0000000000011269                 db  35h ; 5
.rodata:000000000001126A                 db  36h ; 6
.rodata:000000000001126B                 db  37h ; 7
.rodata:000000000001126C                 db  38h ; 8
.rodata:000000000001126D                 db  0Ch
.rodata:000000000001126E                 db  39h ; 9
.rodata:000000000001126F                 db  3Dh ; =
.rodata:0000000000011270                 db  3Eh ; >
.rodata:0000000000011271                 db  3Fh ; ?
.rodata:0000000000011272                 db  40h ; @
.rodata:0000000000011273                 db  41h ; A
.rodata:0000000000011274                 db  42h ; B
.rodata:0000000000011275                 db  3Ch ; <
.rodata:0000000000011276                 db  30h ; 0
.rodata:0000000000011277                 db  50h ; P
.rodata:0000000000011278                 db  2Fh ; /
.rodata:0000000000011279                 db    6
.rodata:000000000001127A                 db  53h ; S
.rodata:000000000001127B                 db    8
.rodata:000000000001127C                 db  51h ; Q
.rodata:000000000001127D                 db  52h ; R
.rodata:000000000001127E                 db  1Ah
.rodata:000000000001127F                 db  54h ; T
.rodata:0000000000011280                 db  55h ; U
.rodata:0000000000011281                 db  56h ; V
.rodata:0000000000011282                 db  57h ; W
.rodata:0000000000011283                 db  5Eh ; ^
.rodata:0000000000011284                 db  5Fh ; _
.rodata:0000000000011285                 db  60h ; `
.rodata:0000000000011286                 db  59h ; Y
.rodata:0000000000011287                 db  69h ; i
.rodata:0000000000011288                 db  61h ; a
.rodata:0000000000011289                 db  62h ; b
.rodata:000000000001128A                 db  63h ; c
.rodata:000000000001128B                 db    0
.rodata:000000000001128C                 db  6Ch ; l
.rodata:000000000001128D                 db  6Dh ; m
.rodata:000000000001128E                 db  65h ; e
.rodata:000000000001128F                 db    0
.rodata:0000000000011290                 db  58h ; X
.rodata:0000000000011291                 db    0
.rodata:0000000000011292                 db    0
.rodata:0000000000011293                 db    0
.rodata:0000000000011294                 db    0
.rodata:0000000000011295                 db    0
.rodata:0000000000011296                 db    0
.rodata:0000000000011297                 db    0
.rodata:0000000000011298                 db    0
.rodata:0000000000011299                 db    0
.rodata:000000000001129A                 db    0
.rodata:000000000001129B                 db    0
.rodata:000000000001129C                 db    0
.rodata:000000000001129D                 db    0
.rodata:000000000001129E                 db    0
.rodata:000000000001129F                 db    0
.rodata:00000000000112A0 yydefgoto       db 0FFh                 ; DATA XREF: yyparse:loc_50D3↑o
.rodata:00000000000112A1                 db    2
.rodata:00000000000112A2                 db    3
.rodata:00000000000112A3                 db    4
.rodata:00000000000112A4                 db  1Fh
.rodata:00000000000112A5                 db  20h
.rodata:00000000000112A6                 db  21h ; !
.rodata:00000000000112A7                 db  22h ; "
.rodata:00000000000112A8                 db  23h ; #
.rodata:00000000000112A9                 db  67h ; g
.rodata:00000000000112AA                 db  68h ; h
.rodata:00000000000112AB                 db  24h ; $
.rodata:00000000000112AC                 db  25h ; %
.rodata:00000000000112AD                 db  26h ; &
.rodata:00000000000112AE                 db  27h ; '
.rodata:00000000000112AF                 db  28h ; (
.rodata:00000000000112B0                 db  29h ; )
.rodata:00000000000112B1                 db  2Ah ; *
.rodata:00000000000112B2                 db  2Bh ; +
.rodata:00000000000112B3                 db  2Ch ; ,
.rodata:00000000000112B4                 db    9
.rodata:00000000000112B5                 db  0Ah
.rodata:00000000000112B6                 db  0Bh
.rodata:00000000000112B7                 db  2Dh ; -
.rodata:00000000000112B8                 db  2Eh ; .
.rodata:00000000000112B9                 db  5Dh ; ]
.rodata:00000000000112BA                 db    0
.rodata:00000000000112BB                 db    0
.rodata:00000000000112BC                 db    0
.rodata:00000000000112BD                 db    0
.rodata:00000000000112BE                 db    0
.rodata:00000000000112BF                 db    0
.rodata:00000000000112C0 yypgoto         db 0A3h                 ; DATA XREF: yyparse+343↑o
.rodata:00000000000112C1                 db 0A3h
.rodata:00000000000112C2                 db 0A3h
.rodata:00000000000112C3                 db 0A3h
.rodata:00000000000112C4                 db 0A3h
.rodata:00000000000112C5                 db 0A3h
.rodata:00000000000112C6                 db 0A3h
.rodata:00000000000112C7                 db 0A3h
.rodata:00000000000112C8                 db  14h
.rodata:00000000000112C9                 db 0BCh
.rodata:00000000000112CA                 db 0E5h
.rodata:00000000000112CB                 db 0A3h
.rodata:00000000000112CC                 db 0A3h
.rodata:00000000000112CD                 db 0A3h
.rodata:00000000000112CE                 db 0A3h
.rodata:00000000000112CF                 db 0A3h
.rodata:00000000000112D0                 db 0A3h
.rodata:00000000000112D1                 db 0A3h
.rodata:00000000000112D2                 db  3Ch ; <
.rodata:00000000000112D3                 db 0A3h
.rodata:00000000000112D4                 db 0A3h
.rodata:00000000000112D5                 db 0A3h
.rodata:00000000000112D6                 db 0A4h
.rodata:00000000000112D7                 db 0A3h
.rodata:00000000000112D8                 db 0A3h
.rodata:00000000000112D9                 db  2Bh ; +
.rodata:00000000000112DA                 db    0
.rodata:00000000000112DB                 db    0
.rodata:00000000000112DC                 db    0
.rodata:00000000000112DD                 db    0
.rodata:00000000000112DE                 db    0
.rodata:00000000000112DF                 db    0
.rodata:00000000000112E0 yydefact        db    5                 ; DATA XREF: yyparse:loc_4DF0↑o
.rodata:00000000000112E1                 db    0
.rodata:00000000000112E2                 db    0
.rodata:00000000000112E3                 db    2
.rodata:00000000000112E4                 db    3
.rodata:00000000000112E5                 db  55h ; U
.rodata:00000000000112E6                 db  57h ; W
.rodata:00000000000112E7                 db  54h ; T
.rodata:00000000000112E8                 db  56h ; V
.rodata:00000000000112E9                 db    4
.rodata:00000000000112EA                 db  52h ; R
.rodata:00000000000112EB                 db  53h ; S
.rodata:00000000000112EC                 db    1
.rodata:00000000000112ED                 db  38h ; 8
.rodata:00000000000112EE                 db  3Bh ; ;
.rodata:00000000000112EF                 db  41h ; A
.rodata:00000000000112F0                 db  44h ; D
.rodata:00000000000112F1                 db  49h ; I
.rodata:00000000000112F2                 db  3Eh ; >
.rodata:00000000000112F3                 db  51h ; Q
.rodata:00000000000112F4                 db  25h ; %
.rodata:00000000000112F5                 db  23h ; #
.rodata:00000000000112F6                 db  1Ch
.rodata:00000000000112F7                 db    0
.rodata:00000000000112F8                 db    0
.rodata:00000000000112F9                 db  1Eh
.rodata:00000000000112FA                 db    0
.rodata:00000000000112FB                 db  58h ; X
.rodata:00000000000112FC                 db    0
.rodata:00000000000112FD                 db    0
.rodata:00000000000112FE                 db  1Fh
.rodata:00000000000112FF                 db    6
.rodata:0000000000011300                 db    7
.rodata:0000000000011301                 db  10h
.rodata:0000000000011302                 db    8
.rodata:0000000000011303                 db  15h
.rodata:0000000000011304                 db    9
.rodata:0000000000011305                 db  0Ah
.rodata:0000000000011306                 db  0Ch
.rodata:0000000000011307                 db  0Bh
.rodata:0000000000011308                 db  31h ; 1
.rodata:0000000000011309                 db  0Dh
.rodata:000000000001130A                 db  34h ; 4
.rodata:000000000001130B                 db  4Ah ; J
.rodata:000000000001130C                 db  35h ; 5
.rodata:000000000001130D                 db  0Eh
.rodata:000000000001130E                 db  0Fh
.rodata:000000000001130F                 db  26h ; &
.rodata:0000000000011310                 db  1Dh
.rodata:0000000000011311                 db    0
.rodata:0000000000011312                 db  2Dh ; -
.rodata:0000000000011313                 db  36h ; 6
.rodata:0000000000011314                 db  39h ; 9
.rodata:0000000000011315                 db  3Fh ; ?
.rodata:0000000000011316                 db  42h ; B
.rodata:0000000000011317                 db  45h ; E
.rodata:0000000000011318                 db  3Ch ; <
.rodata:0000000000011319                 db  27h ; '
.rodata:000000000001131A                 db  24h ; $
.rodata:000000000001131B                 db  5Ah ; Z
.rodata:000000000001131C                 db  20h
.rodata:000000000001131D                 db  4Bh ; K
.rodata:000000000001131E                 db  4Ch ; L
.rodata:000000000001131F                 db  4Eh ; N
.rodata:0000000000011320                 db  4Fh ; O
.rodata:0000000000011321                 db  50h ; P
.rodata:0000000000011322                 db  4Dh ; M
.rodata:0000000000011323                 db  37h ; 7
.rodata:0000000000011324                 db  3Ah ; :
.rodata:0000000000011325                 db  40h ; @
.rodata:0000000000011326                 db  43h ; C
.rodata:0000000000011327                 db  46h ; F
.rodata:0000000000011328                 db  3Dh ; =
.rodata:0000000000011329                 db  28h ; (
.rodata:000000000001132A                 db  12h
.rodata:000000000001132B                 db  2Fh ; /
.rodata:000000000001132C                 db  5Ah ; Z
.rodata:000000000001132D                 db    0
.rodata:000000000001132E                 db    0
.rodata:000000000001132F                 db  16h
.rodata:0000000000011330                 db  59h ; Y
.rodata:0000000000011331                 db  47h ; G
.rodata:0000000000011332                 db  48h ; H
.rodata:0000000000011333                 db  21h ; !
.rodata:0000000000011334                 db    0
.rodata:0000000000011335                 db  33h ; 3
.rodata:0000000000011336                 db  2Ch ; ,
.rodata:0000000000011337                 db    0
.rodata:0000000000011338                 db    0
.rodata:0000000000011339                 db  22h ; "
.rodata:000000000001133A                 db  2Bh ; +
.rodata:000000000001133B                 db  30h ; 0
.rodata:000000000001133C                 db  32h ; 2
.rodata:000000000001133D                 db  1Bh
.rodata:000000000001133E                 db  19h
.rodata:000000000001133F                 db  29h ; )
.rodata:0000000000011340                 db    0
.rodata:0000000000011341                 db  11h
.rodata:0000000000011342                 db  2Eh ; .
.rodata:0000000000011343                 db  5Bh ; [
.rodata:0000000000011344                 db  13h
.rodata:0000000000011345                 db  5Ah ; Z
.rodata:0000000000011346                 db    0
.rodata:0000000000011347                 db  17h
.rodata:0000000000011348                 db  1Ah
.rodata:0000000000011349                 db    0
.rodata:000000000001134A                 db    0
.rodata:000000000001134B                 db  19h
.rodata:000000000001134C                 db  2Ah ; *
.rodata:000000000001134D                 db  19h
.rodata:000000000001134E                 db  14h
.rodata:000000000001134F                 db  18h
.rodata:0000000000011350                 db    0
.rodata:0000000000011351                 db  19h
.rodata:0000000000011352                 db    0
.rodata:0000000000011353                 db    0
.rodata:0000000000011354                 db    0
.rodata:0000000000011355                 db    0
.rodata:0000000000011356                 db    0
.rodata:0000000000011357                 db    0
.rodata:0000000000011358                 db    0
.rodata:0000000000011359                 db    0
.rodata:000000000001135A                 db    0
.rodata:000000000001135B                 db    0
.rodata:000000000001135C                 db    0
.rodata:000000000001135D                 db    0
.rodata:000000000001135E                 db    0
.rodata:000000000001135F                 db    0
.rodata:0000000000011360 yypact          db  26h ; &             ; DATA XREF: yyparse+3AD↑o
.rodata:0000000000011360                                         ; yyparse:loc_512F↑o
.rodata:0000000000011361                 db  1Bh
.rodata:0000000000011362                 db  4Dh ; M
.rodata:0000000000011363                 db 0A3h
.rodata:0000000000011364                 db  2Eh ; .
.rodata:0000000000011365                 db 0A3h
.rodata:0000000000011366                 db 0A3h
.rodata:0000000000011367                 db 0A3h
.rodata:0000000000011368                 db 0A3h
.rodata:0000000000011369                 db 0A3h
.rodata:000000000001136A                 db 0A3h
.rodata:000000000001136B                 db 0A3h
.rodata:000000000001136C                 db 0A3h
.rodata:000000000001136D                 db 0A3h
.rodata:000000000001136E                 db 0A3h
.rodata:000000000001136F                 db 0A3h
.rodata:0000000000011370                 db 0A3h
.rodata:0000000000011371                 db 0A3h
.rodata:0000000000011372                 db 0A3h
.rodata:0000000000011373                 db 0A3h
.rodata:0000000000011374                 db  3Eh ; >
.rodata:0000000000011375                 db 0A3h
.rodata:0000000000011376                 db  52h ; R
.rodata:0000000000011377                 db 0FDh
.rodata:0000000000011378                 db  42h ; B
.rodata:0000000000011379                 db    3
.rodata:000000000001137A                 db  4Ah ; J
.rodata:000000000001137B                 db 0FCh
.rodata:000000000001137C                 db  53h ; S
.rodata:000000000001137D                 db  54h ; T
.rodata:000000000001137E                 db  4Bh ; K
.rodata:000000000001137F                 db 0A3h
.rodata:0000000000011380                 db 0A3h
.rodata:0000000000011381                 db 0A3h
.rodata:0000000000011382                 db 0A3h
.rodata:0000000000011383                 db 0A3h
.rodata:0000000000011384                 db 0A3h
.rodata:0000000000011385                 db 0A3h
.rodata:0000000000011386                 db 0A3h
.rodata:0000000000011387                 db 0A3h
.rodata:0000000000011388                 db  47h ; G
.rodata:0000000000011389                 db 0A3h
.rodata:000000000001138A                 db  5Dh ; ]
.rodata:000000000001138B                 db 0A3h
.rodata:000000000001138C                 db 0A3h
.rodata:000000000001138D                 db 0A3h
.rodata:000000000001138E                 db 0A3h
.rodata:000000000001138F                 db 0A3h
.rodata:0000000000011390                 db 0A3h
.rodata:0000000000011391                 db  4Eh ; N
.rodata:0000000000011392                 db  48h ; H
.rodata:0000000000011393                 db 0A3h
.rodata:0000000000011394                 db 0A3h
.rodata:0000000000011395                 db 0A3h
.rodata:0000000000011396                 db 0A3h
.rodata:0000000000011397                 db 0A3h
.rodata:0000000000011398                 db 0A3h
.rodata:0000000000011399                 db 0A3h
.rodata:000000000001139A                 db 0A3h
.rodata:000000000001139B                 db  19h
.rodata:000000000001139C                 db 0A3h
.rodata:000000000001139D                 db 0A3h
.rodata:000000000001139E                 db 0A3h
.rodata:000000000001139F                 db 0A3h
.rodata:00000000000113A0                 db 0A3h
.rodata:00000000000113A1                 db 0A3h
.rodata:00000000000113A2                 db 0A3h
.rodata:00000000000113A3                 db 0A3h
.rodata:00000000000113A4                 db 0A3h
.rodata:00000000000113A5                 db 0A3h
.rodata:00000000000113A6                 db 0A3h
.rodata:00000000000113A7                 db 0A3h
.rodata:00000000000113A8                 db 0A3h
.rodata:00000000000113A9                 db 0A3h
.rodata:00000000000113AA                 db 0A3h
.rodata:00000000000113AB                 db  15h
.rodata:00000000000113AC                 db  13h
.rodata:00000000000113AD                 db  4Fh ; O
.rodata:00000000000113AE                 db  50h ; P
.rodata:00000000000113AF                 db 0A3h
.rodata:00000000000113B0                 db 0A3h
.rodata:00000000000113B1                 db 0A3h
.rodata:00000000000113B2                 db 0A3h
.rodata:00000000000113B3                 db 0A3h
.rodata:00000000000113B4                 db  51h ; Q
.rodata:00000000000113B5                 db 0A3h
.rodata:00000000000113B6                 db 0A3h
.rodata:00000000000113B7                 db  55h ; U
.rodata:00000000000113B8                 db  56h ; V
.rodata:00000000000113B9                 db 0A3h
.rodata:00000000000113BA                 db 0A3h
.rodata:00000000000113BB                 db 0A3h
.rodata:00000000000113BC                 db 0A3h
.rodata:00000000000113BD                 db 0A3h
.rodata:00000000000113BE                 db 0FAh
.rodata:00000000000113BF                 db  4Ch ; L
.rodata:00000000000113C0                 db  11h
.rodata:00000000000113C1                 db 0A3h
.rodata:00000000000113C2                 db 0A3h
.rodata:00000000000113C3                 db 0A3h
.rodata:00000000000113C4                 db 0A3h
.rodata:00000000000113C5                 db  57h ; W
.rodata:00000000000113C6                 db  45h ; E
.rodata:00000000000113C7                 db 0A3h
.rodata:00000000000113C8                 db 0A3h
.rodata:00000000000113C9                 db  58h ; X
.rodata:00000000000113CA                 db  59h ; Y
.rodata:00000000000113CB                 db 0FFh
.rodata:00000000000113CC                 db 0A3h
.rodata:00000000000113CD                 db  12h
.rodata:00000000000113CE                 db 0A3h
.rodata:00000000000113CF                 db 0A3h
.rodata:00000000000113D0                 db  45h ; E
.rodata:00000000000113D1                 db  5Bh ; [
.rodata:00000000000113D2                 db    0
.rodata:00000000000113D3                 db    0
.rodata:00000000000113D4                 db    0
.rodata:00000000000113D5                 db    0
.rodata:00000000000113D6                 db    0
.rodata:00000000000113D7                 db    0
.rodata:00000000000113D8                 db    0
.rodata:00000000000113D9                 db    0
.rodata:00000000000113DA                 db    0
.rodata:00000000000113DB                 db    0
.rodata:00000000000113DC                 db    0
.rodata:00000000000113DD                 db    0
.rodata:00000000000113DE                 db    0
.rodata:00000000000113DF                 db    0
.rodata:00000000000113E0 yytranslate     db    0                 ; DATA XREF: yyparse:loc_5420↑o
.rodata:00000000000113E1                 db    2
.rodata:00000000000113E2                 db    2
.rodata:00000000000113E3                 db    2
.rodata:00000000000113E4                 db    2
.rodata:00000000000113E5                 db    2
.rodata:00000000000113E6                 db    2
.rodata:00000000000113E7                 db    2
.rodata:00000000000113E8                 db    2
.rodata:00000000000113E9                 db    2
.rodata:00000000000113EA                 db    2
.rodata:00000000000113EB                 db    2
.rodata:00000000000113EC                 db    2
.rodata:00000000000113ED                 db    2
.rodata:00000000000113EE                 db    2
.rodata:00000000000113EF                 db    2
.rodata:00000000000113F0                 db    2
.rodata:00000000000113F1                 db    2
.rodata:00000000000113F2                 db    2
.rodata:00000000000113F3                 db    2
.rodata:00000000000113F4                 db    2
.rodata:00000000000113F5                 db    2
.rodata:00000000000113F6                 db    2
.rodata:00000000000113F7                 db    2
.rodata:00000000000113F8                 db    2
.rodata:00000000000113F9                 db    2
.rodata:00000000000113FA                 db    2
.rodata:00000000000113FB                 db    2
.rodata:00000000000113FC                 db    2
.rodata:00000000000113FD                 db    2
.rodata:00000000000113FE                 db    2
.rodata:00000000000113FF                 db    2
.rodata:0000000000011400                 db    2
.rodata:0000000000011401                 db    2
.rodata:0000000000011402                 db    2
.rodata:0000000000011403                 db    2
.rodata:0000000000011404                 db    2
.rodata:0000000000011405                 db    2
.rodata:0000000000011406                 db    2
.rodata:0000000000011407                 db    2
.rodata:0000000000011408                 db    2
.rodata:0000000000011409                 db    2
.rodata:000000000001140A                 db    2
.rodata:000000000001140B                 db    2
.rodata:000000000001140C                 db  1Ah
.rodata:000000000001140D                 db    2
.rodata:000000000001140E                 db    2
.rodata:000000000001140F                 db  1Bh
.rodata:0000000000011410                 db    2
.rodata:0000000000011411                 db    2
.rodata:0000000000011412                 db    2
.rodata:0000000000011413                 db    2
.rodata:0000000000011414                 db    2
.rodata:0000000000011415                 db    2
.rodata:0000000000011416                 db    2
.rodata:0000000000011417                 db    2
.rodata:0000000000011418                 db    2
.rodata:0000000000011419                 db    2
.rodata:000000000001141A                 db  19h
.rodata:000000000001141B                 db    2
.rodata:000000000001141C                 db    2
.rodata:000000000001141D                 db    2
.rodata:000000000001141E                 db    2
.rodata:000000000001141F                 db    2
.rodata:0000000000011420                 db  17h
.rodata:0000000000011421                 db    2
.rodata:0000000000011422                 db    2
.rodata:0000000000011423                 db    2
.rodata:0000000000011424                 db    2
.rodata:0000000000011425                 db    2
.rodata:0000000000011426                 db    2
.rodata:0000000000011427                 db    2
.rodata:0000000000011428                 db    2
.rodata:0000000000011429                 db    2
.rodata:000000000001142A                 db    2
.rodata:000000000001142B                 db    2
.rodata:000000000001142C                 db    2
.rodata:000000000001142D                 db    2
.rodata:000000000001142E                 db    2
.rodata:000000000001142F                 db    2
.rodata:0000000000011430                 db    2
.rodata:0000000000011431                 db    2
.rodata:0000000000011432                 db    2
.rodata:0000000000011433                 db    2
.rodata:0000000000011434                 db  18h
.rodata:0000000000011435                 db    2
.rodata:0000000000011436                 db    2
.rodata:0000000000011437                 db    2
.rodata:0000000000011438                 db    2
.rodata:0000000000011439                 db    2
.rodata:000000000001143A                 db    2
.rodata:000000000001143B                 db    2
.rodata:000000000001143C                 db    2
.rodata:000000000001143D                 db    2
.rodata:000000000001143E                 db    2
.rodata:000000000001143F                 db    2
.rodata:0000000000011440                 db    2
.rodata:0000000000011441                 db    2
.rodata:0000000000011442                 db    2
.rodata:0000000000011443                 db    2
.rodata:0000000000011444                 db    2
.rodata:0000000000011445                 db    2
.rodata:0000000000011446                 db    2
.rodata:0000000000011447                 db    2
.rodata:0000000000011448                 db    2
.rodata:0000000000011449                 db    2
.rodata:000000000001144A                 db    2
.rodata:000000000001144B                 db    2
.rodata:000000000001144C                 db    2
.rodata:000000000001144D                 db    2
.rodata:000000000001144E                 db    2
.rodata:000000000001144F                 db    2
.rodata:0000000000011450                 db    2
.rodata:0000000000011451                 db    2
.rodata:0000000000011452                 db    2
.rodata:0000000000011453                 db    2
.rodata:0000000000011454                 db    2
.rodata:0000000000011455                 db    2
.rodata:0000000000011456                 db    2
.rodata:0000000000011457                 db    2
.rodata:0000000000011458                 db    2
.rodata:0000000000011459                 db    2
.rodata:000000000001145A                 db    2
.rodata:000000000001145B                 db    2
.rodata:000000000001145C                 db    2
.rodata:000000000001145D                 db    2
.rodata:000000000001145E                 db    2
.rodata:000000000001145F                 db    2
.rodata:0000000000011460                 db    2
.rodata:0000000000011461                 db    2
.rodata:0000000000011462                 db    2
.rodata:0000000000011463                 db    2
.rodata:0000000000011464                 db    2
.rodata:0000000000011465                 db    2
.rodata:0000000000011466                 db    2
.rodata:0000000000011467                 db    2
.rodata:0000000000011468                 db    2
.rodata:0000000000011469                 db    2
.rodata:000000000001146A                 db    2
.rodata:000000000001146B                 db    2
.rodata:000000000001146C                 db    2
.rodata:000000000001146D                 db    2
.rodata:000000000001146E                 db    2
.rodata:000000000001146F                 db    2
.rodata:0000000000011470                 db    2
.rodata:0000000000011471                 db    2
.rodata:0000000000011472                 db    2
.rodata:0000000000011473                 db    2
.rodata:0000000000011474                 db    2
.rodata:0000000000011475                 db    2
.rodata:0000000000011476                 db    2
.rodata:0000000000011477                 db    2
.rodata:0000000000011478                 db    2
.rodata:0000000000011479                 db    2
.rodata:000000000001147A                 db    2
.rodata:000000000001147B                 db    2
.rodata:000000000001147C                 db    2
.rodata:000000000001147D                 db    2
.rodata:000000000001147E                 db    2
.rodata:000000000001147F                 db    2
.rodata:0000000000011480                 db    2
.rodata:0000000000011481                 db    2
.rodata:0000000000011482                 db    2
.rodata:0000000000011483                 db    2
.rodata:0000000000011484                 db    2
.rodata:0000000000011485                 db    2
.rodata:0000000000011486                 db    2
.rodata:0000000000011487                 db    2
.rodata:0000000000011488                 db    2
.rodata:0000000000011489                 db    2
.rodata:000000000001148A                 db    2
.rodata:000000000001148B                 db    2
.rodata:000000000001148C                 db    2
.rodata:000000000001148D                 db    2
.rodata:000000000001148E                 db    2
.rodata:000000000001148F                 db    2
.rodata:0000000000011490                 db    2
.rodata:0000000000011491                 db    2
.rodata:0000000000011492                 db    2
.rodata:0000000000011493                 db    2
.rodata:0000000000011494                 db    2
.rodata:0000000000011495                 db    2
.rodata:0000000000011496                 db    2
.rodata:0000000000011497                 db    2
.rodata:0000000000011498                 db    2
.rodata:0000000000011499                 db    2
.rodata:000000000001149A                 db    2
.rodata:000000000001149B                 db    2
.rodata:000000000001149C                 db    2
.rodata:000000000001149D                 db    2
.rodata:000000000001149E                 db    2
.rodata:000000000001149F                 db    2
.rodata:00000000000114A0                 db    2
.rodata:00000000000114A1                 db    2
.rodata:00000000000114A2                 db    2
.rodata:00000000000114A3                 db    2
.rodata:00000000000114A4                 db    2
.rodata:00000000000114A5                 db    2
.rodata:00000000000114A6                 db    2
.rodata:00000000000114A7                 db    2
.rodata:00000000000114A8                 db    2
.rodata:00000000000114A9                 db    2
.rodata:00000000000114AA                 db    2
.rodata:00000000000114AB                 db    2
.rodata:00000000000114AC                 db    2
.rodata:00000000000114AD                 db    2
.rodata:00000000000114AE                 db    2
.rodata:00000000000114AF                 db    2
.rodata:00000000000114B0                 db    2
.rodata:00000000000114B1                 db    2
.rodata:00000000000114B2                 db    2
.rodata:00000000000114B3                 db    2
.rodata:00000000000114B4                 db    2
.rodata:00000000000114B5                 db    2
.rodata:00000000000114B6                 db    2
.rodata:00000000000114B7                 db    2
.rodata:00000000000114B8                 db    2
.rodata:00000000000114B9                 db    2
.rodata:00000000000114BA                 db    2
.rodata:00000000000114BB                 db    2
.rodata:00000000000114BC                 db    2
.rodata:00000000000114BD                 db    2
.rodata:00000000000114BE                 db    2
.rodata:00000000000114BF                 db    2
.rodata:00000000000114C0                 db    2
.rodata:00000000000114C1                 db    2
.rodata:00000000000114C2                 db    2
.rodata:00000000000114C3                 db    2
.rodata:00000000000114C4                 db    2
.rodata:00000000000114C5                 db    2
.rodata:00000000000114C6                 db    2
.rodata:00000000000114C7                 db    2
.rodata:00000000000114C8                 db    2
.rodata:00000000000114C9                 db    2
.rodata:00000000000114CA                 db    2
.rodata:00000000000114CB                 db    2
.rodata:00000000000114CC                 db    2
.rodata:00000000000114CD                 db    2
.rodata:00000000000114CE                 db    2
.rodata:00000000000114CF                 db    2
.rodata:00000000000114D0                 db    2
.rodata:00000000000114D1                 db    2
.rodata:00000000000114D2                 db    2
.rodata:00000000000114D3                 db    2
.rodata:00000000000114D4                 db    2
.rodata:00000000000114D5                 db    2
.rodata:00000000000114D6                 db    2
.rodata:00000000000114D7                 db    2
.rodata:00000000000114D8                 db    2
.rodata:00000000000114D9                 db    2
.rodata:00000000000114DA                 db    2
.rodata:00000000000114DB                 db    2
.rodata:00000000000114DC                 db    2
.rodata:00000000000114DD                 db    2
.rodata:00000000000114DE                 db    2
.rodata:00000000000114DF                 db    2
.rodata:00000000000114E0                 db    1
.rodata:00000000000114E1                 db    2
.rodata:00000000000114E2                 db    3
.rodata:00000000000114E3                 db    4
.rodata:00000000000114E4                 db    5
.rodata:00000000000114E5                 db    6
.rodata:00000000000114E6                 db    7
.rodata:00000000000114E7                 db    8
.rodata:00000000000114E8                 db    9
.rodata:00000000000114E9                 db  0Ah
.rodata:00000000000114EA                 db  0Bh
.rodata:00000000000114EB                 db  0Ch
.rodata:00000000000114EC                 db  0Dh
.rodata:00000000000114ED                 db  0Eh
.rodata:00000000000114EE                 db  0Fh
.rodata:00000000000114EF                 db  10h
.rodata:00000000000114F0                 db  11h
.rodata:00000000000114F1                 db  12h
.rodata:00000000000114F2                 db  13h
.rodata:00000000000114F3                 db  14h
.rodata:00000000000114F4                 db  15h
.rodata:00000000000114F5                 db  16h
.rodata:00000000000114F6 ; const char aPosix2Version[]
.rodata:00000000000114F6 aPosix2Version  db '_POSIX2_VERSION',0  ; DATA XREF: posix2_version+1↑o
.rodata:0000000000011506                 align 8
.rodata:0000000000011508 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000011508                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000011540 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000011548 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000001154C unk_1154C       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000001154D                 db  80h
.rodata:000000000001154E                 db  98h
.rodata:000000000001154F                 db    0
.rodata:0000000000011550 unk_11550       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000011551                 db  80h
.rodata:0000000000011552                 db  99h
.rodata:0000000000011553                 db    0
.rodata:0000000000011554 unk_11554       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000011555                 db    7
.rodata:0000000000011556                 db  65h ; e
.rodata:0000000000011557                 db    0
.rodata:0000000000011558 unk_11558       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000011559                 db 0AFh
.rodata:000000000001155A                 db    0
.rodata:000000000001155B ; const char asc_1155B[2]
.rodata:000000000001155B asc_1155B       db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000001155B                                         ; quotearg_buffer_restyled:loc_8DC3↑o ...
.rodata:000000000001155D ; const char asc_1155D[2]
.rodata:000000000001155D asc_1155D       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000001155D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000001155F aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000011567 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000214B48↓o
.rodata:000000000001156D aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000214B50↓o
.rodata:000000000001157A aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000214B58↓o
.rodata:000000000001157A                                         ; .data.rel.ro:0000000000214B78↓o
.rodata:0000000000011587 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000011587                                         ; DATA XREF: .data.rel.ro:0000000000214B60↓o
.rodata:000000000001159B aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000214B70↓o
.rodata:00000000000115A3 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000214B88↓o
.rodata:00000000000115AB                 align 20h
.rodata:00000000000115C0 jpt_8DA1        dd offset loc_9B4A - 115C0h
.rodata:00000000000115C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000115C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000115C0                 dd offset loc_8DA3 - 115C0h ; jump table for switch statement
.rodata:00000000000115C0                 dd offset loc_9D78 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9B84 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9974 - 115C0h
.rodata:00000000000115C0                 dd offset loc_99D0 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9A25 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9A6A - 115C0h
.rodata:00000000000115C0                 dd offset loc_9AA4 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9AA4 - 115C0h
.rodata:00000000000115C0                 dd offset loc_9AA4 - 115C0h
.rodata:00000000000115EC jpt_8EFE        dd offset loc_9120 - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000115EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh ; jump table for switch statement
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset loc_9160 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9068 - 115ECh, offset loc_9028 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91F0 - 115ECh, offset loc_91E0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91D0 - 115ECh, offset loc_91C0 - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset def_8EFE - 115ECh
.rodata:00000000000115EC                 dd offset loc_91B0 - 115ECh, offset loc_91A0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9170 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9003 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_91A0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_91A0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_91A0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_8FD3 - 115ECh
.rodata:00000000000115EC                 dd offset def_8EFE - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_91A0 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9078 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_9148 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9148 - 115ECh, offset loc_8F03 - 115ECh
.rodata:00000000000115EC                 dd offset loc_91A0 - 115ECh, offset loc_8F03 - 115ECh
.rodata:00000000000115EC                 dd offset loc_9170 - 115ECh
.rodata:00000000000117E8 jpt_928A        dd offset loc_92F0 - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000117E8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h ; jump table for switch statement
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset loc_92E0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9430 - 117E8h, offset loc_9418 - 117E8h
.rodata:00000000000117E8                 dd offset loc_92C8 - 117E8h, offset loc_9408 - 117E8h
.rodata:00000000000117E8                 dd offset loc_92B0 - 117E8h, offset loc_93F0 - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset def_928A - 117E8h
.rodata:00000000000117E8                 dd offset loc_93D8 - 117E8h, offset loc_93C0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_93A8 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_9000 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_93C0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_93C0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_93C0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_8FD0 - 117E8h
.rodata:00000000000117E8                 dd offset def_928A - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_93C0 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9290 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_9390 - 117E8h
.rodata:00000000000117E8                 dd offset loc_9390 - 117E8h, offset loc_8F00 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93C0 - 117E8h, offset loc_8F00 - 117E8h
.rodata:00000000000117E8                 dd offset loc_93A8 - 117E8h
.rodata:00000000000119E4                 align 20h
.rodata:0000000000011A00                 public quoting_style_vals
.rodata:0000000000011A00 quoting_style_vals db    0
.rodata:0000000000011A01                 db    0
.rodata:0000000000011A02                 db    0
.rodata:0000000000011A03                 db    0
.rodata:0000000000011A04                 db    1
.rodata:0000000000011A05                 db    0
.rodata:0000000000011A06                 db    0
.rodata:0000000000011A07                 db    0
.rodata:0000000000011A08                 db    2
.rodata:0000000000011A09                 db    0
.rodata:0000000000011A0A                 db    0
.rodata:0000000000011A0B                 db    0
.rodata:0000000000011A0C                 db    3
.rodata:0000000000011A0D                 db    0
.rodata:0000000000011A0E                 db    0
.rodata:0000000000011A0F                 db    0
.rodata:0000000000011A10                 db    4
.rodata:0000000000011A11                 db    0
.rodata:0000000000011A12                 db    0
.rodata:0000000000011A13                 db    0
.rodata:0000000000011A14                 db    5
.rodata:0000000000011A15                 db    0
.rodata:0000000000011A16                 db    0
.rodata:0000000000011A17                 db    0
.rodata:0000000000011A18                 db    6
.rodata:0000000000011A19                 db    0
.rodata:0000000000011A1A                 db    0
.rodata:0000000000011A1B                 db    0
.rodata:0000000000011A1C                 db    7
.rodata:0000000000011A1D                 db    0
.rodata:0000000000011A1E                 db    0
.rodata:0000000000011A1F                 db    0
.rodata:0000000000011A20                 db    8
.rodata:0000000000011A21                 db    0
.rodata:0000000000011A22                 db    0
.rodata:0000000000011A23                 db    0
.rodata:0000000000011A24                 db    9
.rodata:0000000000011A25                 db    0
.rodata:0000000000011A26                 db    0
.rodata:0000000000011A27                 db    0
.rodata:0000000000011A28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000011A34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000011A3B ; const char aC[]
.rodata:0000000000011A3B aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_A8EC↑o
.rodata:0000000000011A3F ; const char aWrittenByS[]
.rodata:0000000000011A3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000011A3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000011A4F ; const char aWrittenBySAndS[]
.rodata:0000000000011A4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000011A4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000011A66 ; const char aWrittenBySSAnd[]
.rodata:0000000000011A66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000011A66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000011A82 ; const char aReportBugsToS[]
.rodata:0000000000011A82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000011A82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000011A97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000011A97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000011AAD ; const char aSHomePageS[]
.rodata:0000000000011AAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000011AAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000011AC1                 align 8
.rodata:0000000000011AC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000011AC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000011AC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000011AC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000011AC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000011AC8                 db '.',0Ah
.rodata:0000000000011AC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000011AC8                 db 0Ah,0
.rodata:0000000000011B94                 align 8
.rodata:0000000000011B98 ; const char aWrittenBySSSAn[]
.rodata:0000000000011B98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011B98                                         ; DATA XREF: version_etc_arn:loc_AB40↑o
.rodata:0000000000011B98                 db 'and %s.',0Ah,0
.rodata:0000000000011BB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000011BB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011BB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000011BB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000011BDC                 align 20h
.rodata:0000000000011BE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000011BE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011BE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000011BE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000011C08 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000011C08 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011C08                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000011C08                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000011C34                 align 8
.rodata:0000000000011C38 ; const char aWrittenBySSSSS[]
.rodata:0000000000011C38 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011C38                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000011C38                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000011C38                 db 'and %s.',0Ah,0
.rodata:0000000000011C68 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000011C68 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011C68                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000011C68                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000011C68                 db '%s, and %s.',0Ah,0
.rodata:0000000000011C9C                 align 20h
.rodata:0000000000011CA0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000011CA0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000011CA0                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000011CA0                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000011CDC                 align 20h
.rodata:0000000000011CE0 ; const char aGeneralHelpUsi[]
.rodata:0000000000011CE0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000011CE0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000011CE0                 db 0
.rodata:0000000000011D21                 align 8
.rodata:0000000000011D28 jpt_A954        dd offset loc_A9D6 - 11D28h
.rodata:0000000000011D28                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000011D28                                         ; version_etc_arn+9D↑r
.rodata:0000000000011D28                 dd offset loc_AA68 - 11D28h ; jump table for switch statement
.rodata:0000000000011D28                 dd offset loc_AAA8 - 11D28h
.rodata:0000000000011D28                 dd offset loc_AAF0 - 11D28h
.rodata:0000000000011D28                 dd offset loc_AB40 - 11D28h
.rodata:0000000000011D28                 dd offset loc_AB98 - 11D28h
.rodata:0000000000011D28                 dd offset loc_ABC8 - 11D28h
.rodata:0000000000011D28                 dd offset loc_AC30 - 11D28h
.rodata:0000000000011D28                 dd offset loc_A960 - 11D28h
.rodata:0000000000011D28                 dd offset loc_AA10 - 11D28h
.rodata:0000000000011D50                 align 20h
.rodata:0000000000011D60                 public version_etc_copyright
.rodata:0000000000011D60 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000011D60                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000011D8F ; const char aMemoryExhauste[]
.rodata:0000000000011D8F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000011DA0 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_B930↑o
.rodata:0000000000011DA0                                         ; .data.rel.ro:00000000002143A0↓o
.rodata:0000000000011DA6 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000011DA6                                         ; locale_charset:loc_B980↑o ...
.rodata:0000000000011DAC aHM             db '%H:%M',0            ; DATA XREF: __strftime_internal:loc_C08E↑o
.rodata:0000000000011DAC                                         ; .data.rel.ro:00000000002142F0↓o
.rodata:0000000000011DB2 aYMD            db '%Y-%m-%d',0         ; DATA XREF: __strftime_internal+11D2↑o
.rodata:0000000000011DB2                                         ; __strftime_internal+19CF↑o
.rodata:0000000000011DBB aMDY            db '%m/%d/%y',0         ; DATA XREF: __strftime_internal+119E↑o
.rodata:0000000000011DC4 jpt_BC3F        dd offset loc_CC21 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                                         ; DATA XREF: __strftime_internal+1FD↑o
.rodata:0000000000011DC4                                         ; __strftime_internal+208↑r
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h ; jump table for switch statement
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_C1AE - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C8A7 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_BF36 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CB0E - 11DC4h, offset loc_CB2B - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CBC5 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CBE7 - 11DC4h, offset loc_C8CD - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CC62 - 11DC4h, offset loc_CCDE - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_CC7A - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CC92 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C073 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C08E - 11DC4h, offset loc_BF76 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C23B - 11DC4h, offset loc_C254 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C8CD - 11DC4h, offset loc_CAC9 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_BDE8 - 11DC4h, offset loc_C287 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C2E0 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_BF36 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C437 - 11DC4h, offset loc_BDE8 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CA64 - 11DC4h, offset loc_CE19 - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_C8CD - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C437 - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CDD6 - 11DC4h, offset loc_CE06 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CCF6 - 11DC4h, offset loc_CD1D - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CD4D - 11DC4h, offset def_BC3F - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_CDCF - 11DC4h, offset loc_C530 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_BDF2 - 11DC4h, offset loc_C7A0 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_BFEB - 11DC4h, offset loc_CA7C - 11DC4h
.rodata:0000000000011DC4                 dd offset def_BC3F - 11DC4h, offset loc_CAB1 - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_BDE8 - 11DC4h, offset loc_C3CD - 11DC4h
.rodata:0000000000011DC4                 dd offset loc_C45C - 11DC4h
.rodata:0000000000011FB0 jpt_DBCB        dd offset def_DBCB - 11FB0h
.rodata:0000000000011FB0                                         ; DATA XREF: vasnprintf+54D↑o
.rodata:0000000000011FB0                                         ; vasnprintf+554↑r
.rodata:0000000000011FB0                 dd offset loc_E030 - 11FB0h ; jump table for switch statement
.rodata:0000000000011FB0                 dd offset loc_E000 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DF78 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DF38 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DD08 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DD08 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DEB8 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DE30 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DD08 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DD08 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FB0                 dd offset loc_DBD0 - 11FB0h
.rodata:0000000000011FF8 jpt_E170        dd offset loc_E3E0 - 11FF8h
.rodata:0000000000011FF8                                         ; DATA XREF: vasnprintf+AEE↑o
.rodata:0000000000011FF8                                         ; vasnprintf+AF9↑r
.rodata:0000000000011FF8                 dd offset loc_E400 - 11FF8h ; jump table for switch statement
.rodata:0000000000011FF8                 dd offset loc_E3F0 - 11FF8h
.rodata:0000000000011FF8                 dd offset loc_E2B0 - 11FF8h
.rodata:0000000000011FF8                 dd offset loc_E2B0 - 11FF8h
.rodata:000000000001200C aNull           db '(NULL)',0           ; DATA XREF: printf_fetchargs+18↑o
.rodata:0000000000012013                 align 20h
.rodata:0000000000012020 jpt_E7C6        dd offset def_E7C6 - 12020h
.rodata:0000000000012020                                         ; DATA XREF: printf_fetchargs+A↑o
.rodata:0000000000012020                                         ; printf_fetchargs+2F↑r
.rodata:0000000000012020                 dd offset loc_E84C - 12020h ; jump table for switch statement
.rodata:0000000000012020                 dd offset loc_E84C - 12020h
.rodata:0000000000012020                 dd offset loc_E86E - 12020h
.rodata:0000000000012020                 dd offset loc_E86E - 12020h
.rodata:0000000000012020                 dd offset loc_E82A - 12020h
.rodata:0000000000012020                 dd offset loc_E82A - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E8C2 - 12020h
.rodata:0000000000012020                 dd offset loc_E7D0 - 12020h
.rodata:0000000000012020                 dd offset loc_E82A - 12020h
.rodata:0000000000012020                 dd offset loc_E82A - 12020h
.rodata:0000000000012020                 dd offset loc_E894 - 12020h
.rodata:0000000000012020                 dd offset loc_E8F0 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:0000000000012020                 dd offset loc_E806 - 12020h
.rodata:000000000001207C                 align 20h
.rodata:0000000000012080 wide_null_string_2696 db  28h ; (       ; DATA XREF: printf_fetchargs+11↑o
.rodata:0000000000012081                 db    0
.rodata:0000000000012082                 db    0
.rodata:0000000000012083                 db    0
.rodata:0000000000012084                 db  4Eh ; N
.rodata:0000000000012085                 db    0
.rodata:0000000000012086                 db    0
.rodata:0000000000012087                 db    0
.rodata:0000000000012088                 db  55h ; U
.rodata:0000000000012089                 db    0
.rodata:000000000001208A                 db    0
.rodata:000000000001208B                 db    0
.rodata:000000000001208C                 db  4Ch ; L
.rodata:000000000001208D                 db    0
.rodata:000000000001208E                 db    0
.rodata:000000000001208F                 db    0
.rodata:0000000000012090                 db  4Ch ; L
.rodata:0000000000012091                 db    0
.rodata:0000000000012092                 db    0
.rodata:0000000000012093                 db    0
.rodata:0000000000012094                 db  29h ; )
.rodata:0000000000012095                 db    0
.rodata:0000000000012096                 db    0
.rodata:0000000000012097                 db    0
.rodata:0000000000012098                 db    0
.rodata:0000000000012099                 db    0
.rodata:000000000001209A                 db    0
.rodata:000000000001209B                 db    0
.rodata:000000000001209C jpt_EBD5        dd offset loc_EC4B - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                                         ; DATA XREF: printf_parse+234↑o
.rodata:000000000001209C                                         ; printf_parse+23E↑r
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch ; jump table for switch statement
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F16C - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset loc_F14B - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_EBD7 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset loc_F17C - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F0D8 - 1209Ch, offset loc_F0EB - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset loc_F14B - 1209Ch
.rodata:000000000001209C                 dd offset loc_F14B - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F0EB - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset loc_F08C - 1209Ch
.rodata:000000000001209C                 dd offset loc_F17C - 1209Ch, offset loc_F1D0 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F138 - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset loc_F17C - 1209Ch, offset def_EBD5 - 1209Ch
.rodata:000000000001209C                 dd offset def_EBD5 - 1209Ch, offset loc_F17C - 1209Ch
.rodata:000000000001209C _rodata         ends
.rodata:000000000001209C
.eh_frame_hdr:00000000000121EC ; ===========================================================================
.eh_frame_hdr:00000000000121EC
.eh_frame_hdr:00000000000121EC ; Segment type: Pure data
.eh_frame_hdr:00000000000121EC ; Segment permissions: Read
.eh_frame_hdr:00000000000121EC _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000121EC                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000121EC                 ;org 121ECh
.eh_frame_hdr:00000000000121EC __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000121ED                 db  1Bh
.eh_frame_hdr:00000000000121EE                 db    3
.eh_frame_hdr:00000000000121EF                 db  3Bh ; ;
.eh_frame_hdr:00000000000121F0                 db 0B0h
.eh_frame_hdr:00000000000121F1                 db    3
.eh_frame_hdr:00000000000121F2                 db    0
.eh_frame_hdr:00000000000121F3                 db    0
.eh_frame_hdr:00000000000121F4                 db  75h ; u
.eh_frame_hdr:00000000000121F5                 db    0
.eh_frame_hdr:00000000000121F6                 db    0
.eh_frame_hdr:00000000000121F7                 db    0
.eh_frame_hdr:00000000000121F8                 db 0E4h
.eh_frame_hdr:00000000000121F9                 db    4
.eh_frame_hdr:00000000000121FA                 db 0FFh
.eh_frame_hdr:00000000000121FB                 db 0FFh
.eh_frame_hdr:00000000000121FC                 db 0FCh
.eh_frame_hdr:00000000000121FD                 db    3
.eh_frame_hdr:00000000000121FE                 db    0
.eh_frame_hdr:00000000000121FF                 db    0
.eh_frame_hdr:0000000000012200                 db  64h ; d
.eh_frame_hdr:0000000000012201                 db    9
.eh_frame_hdr:0000000000012202                 db 0FFh
.eh_frame_hdr:0000000000012203                 db 0FFh
.eh_frame_hdr:0000000000012204                 db  24h ; $
.eh_frame_hdr:0000000000012205                 db    4
.eh_frame_hdr:0000000000012206                 db    0
.eh_frame_hdr:0000000000012207                 db    0
.eh_frame_hdr:0000000000012208                 db  74h ; t
.eh_frame_hdr:0000000000012209                 db    9
.eh_frame_hdr:000000000001220A                 db 0FFh
.eh_frame_hdr:000000000001220B                 db 0FFh
.eh_frame_hdr:000000000001220C                 db 0E0h
.eh_frame_hdr:000000000001220D                 db    7
.eh_frame_hdr:000000000001220E                 db    0
.eh_frame_hdr:000000000001220F                 db    0
.eh_frame_hdr:0000000000012210                 db 0D4h
.eh_frame_hdr:0000000000012211                 db    9
.eh_frame_hdr:0000000000012212                 db 0FFh
.eh_frame_hdr:0000000000012213                 db 0FFh
.eh_frame_hdr:0000000000012214                 db  84h
.eh_frame_hdr:0000000000012215                 db    4
.eh_frame_hdr:0000000000012216                 db    0
.eh_frame_hdr:0000000000012217                 db    0
.eh_frame_hdr:0000000000012218                 db  44h ; D
.eh_frame_hdr:0000000000012219                 db  13h
.eh_frame_hdr:000000000001221A                 db 0FFh
.eh_frame_hdr:000000000001221B                 db 0FFh
.eh_frame_hdr:000000000001221C                 db 0CCh
.eh_frame_hdr:000000000001221D                 db    3
.eh_frame_hdr:000000000001221E                 db    0
.eh_frame_hdr:000000000001221F                 db    0
.eh_frame_hdr:0000000000012220                 db  54h ; T
.eh_frame_hdr:0000000000012221                 db  14h
.eh_frame_hdr:0000000000012222                 db 0FFh
.eh_frame_hdr:0000000000012223                 db 0FFh
.eh_frame_hdr:0000000000012224                 db  3Ch ; <
.eh_frame_hdr:0000000000012225                 db    4
.eh_frame_hdr:0000000000012226                 db    0
.eh_frame_hdr:0000000000012227                 db    0
.eh_frame_hdr:0000000000012228                 db 0A4h
.eh_frame_hdr:0000000000012229                 db  14h
.eh_frame_hdr:000000000001222A                 db 0FFh
.eh_frame_hdr:000000000001222B                 db 0FFh
.eh_frame_hdr:000000000001222C                 db  58h ; X
.eh_frame_hdr:000000000001222D                 db    4
.eh_frame_hdr:000000000001222E                 db    0
.eh_frame_hdr:000000000001222F                 db    0
.eh_frame_hdr:0000000000012230                 db 0A4h
.eh_frame_hdr:0000000000012231                 db  18h
.eh_frame_hdr:0000000000012232                 db 0FFh
.eh_frame_hdr:0000000000012233                 db 0FFh
.eh_frame_hdr:0000000000012234                 db    4
.eh_frame_hdr:0000000000012235                 db    5
.eh_frame_hdr:0000000000012236                 db    0
.eh_frame_hdr:0000000000012237                 db    0
.eh_frame_hdr:0000000000012238                 db 0B4h
.eh_frame_hdr:0000000000012239                 db  18h
.eh_frame_hdr:000000000001223A                 db 0FFh
.eh_frame_hdr:000000000001223B                 db 0FFh
.eh_frame_hdr:000000000001223C                 db  18h
.eh_frame_hdr:000000000001223D                 db    5
.eh_frame_hdr:000000000001223E                 db    0
.eh_frame_hdr:000000000001223F                 db    0
.eh_frame_hdr:0000000000012240                 db 0D4h
.eh_frame_hdr:0000000000012241                 db  19h
.eh_frame_hdr:0000000000012242                 db 0FFh
.eh_frame_hdr:0000000000012243                 db 0FFh
.eh_frame_hdr:0000000000012244                 db  64h ; d
.eh_frame_hdr:0000000000012245                 db    5
.eh_frame_hdr:0000000000012246                 db    0
.eh_frame_hdr:0000000000012247                 db    0
.eh_frame_hdr:0000000000012248                 db  54h ; T
.eh_frame_hdr:0000000000012249                 db  1Ah
.eh_frame_hdr:000000000001224A                 db 0FFh
.eh_frame_hdr:000000000001224B                 db 0FFh
.eh_frame_hdr:000000000001224C                 db  90h
.eh_frame_hdr:000000000001224D                 db    5
.eh_frame_hdr:000000000001224E                 db    0
.eh_frame_hdr:000000000001224F                 db    0
.eh_frame_hdr:0000000000012250                 db  74h ; t
.eh_frame_hdr:0000000000012251                 db  1Bh
.eh_frame_hdr:0000000000012252                 db 0FFh
.eh_frame_hdr:0000000000012253                 db 0FFh
.eh_frame_hdr:0000000000012254                 db 0F0h
.eh_frame_hdr:0000000000012255                 db    5
.eh_frame_hdr:0000000000012256                 db    0
.eh_frame_hdr:0000000000012257                 db    0
.eh_frame_hdr:0000000000012258                 db 0E4h
.eh_frame_hdr:0000000000012259                 db  1Bh
.eh_frame_hdr:000000000001225A                 db 0FFh
.eh_frame_hdr:000000000001225B                 db 0FFh
.eh_frame_hdr:000000000001225C                 db  3Ch ; <
.eh_frame_hdr:000000000001225D                 db    6
.eh_frame_hdr:000000000001225E                 db    0
.eh_frame_hdr:000000000001225F                 db    0
.eh_frame_hdr:0000000000012260                 db  34h ; 4
.eh_frame_hdr:0000000000012261                 db  1Ch
.eh_frame_hdr:0000000000012262                 db 0FFh
.eh_frame_hdr:0000000000012263                 db 0FFh
.eh_frame_hdr:0000000000012264                 db  7Ch ; |
.eh_frame_hdr:0000000000012265                 db    6
.eh_frame_hdr:0000000000012266                 db    0
.eh_frame_hdr:0000000000012267                 db    0
.eh_frame_hdr:0000000000012268                 db  44h ; D
.eh_frame_hdr:0000000000012269                 db  1Ch
.eh_frame_hdr:000000000001226A                 db 0FFh
.eh_frame_hdr:000000000001226B                 db 0FFh
.eh_frame_hdr:000000000001226C                 db  90h
.eh_frame_hdr:000000000001226D                 db    6
.eh_frame_hdr:000000000001226E                 db    0
.eh_frame_hdr:000000000001226F                 db    0
.eh_frame_hdr:0000000000012270                 db  54h ; T
.eh_frame_hdr:0000000000012271                 db  1Ch
.eh_frame_hdr:0000000000012272                 db 0FFh
.eh_frame_hdr:0000000000012273                 db 0FFh
.eh_frame_hdr:0000000000012274                 db 0A4h
.eh_frame_hdr:0000000000012275                 db    6
.eh_frame_hdr:0000000000012276                 db    0
.eh_frame_hdr:0000000000012277                 db    0
.eh_frame_hdr:0000000000012278                 db    4
.eh_frame_hdr:0000000000012279                 db  1Dh
.eh_frame_hdr:000000000001227A                 db 0FFh
.eh_frame_hdr:000000000001227B                 db 0FFh
.eh_frame_hdr:000000000001227C                 db 0D4h
.eh_frame_hdr:000000000001227D                 db    6
.eh_frame_hdr:000000000001227E                 db    0
.eh_frame_hdr:000000000001227F                 db    0
.eh_frame_hdr:0000000000012280                 db  64h ; d
.eh_frame_hdr:0000000000012281                 db  1Dh
.eh_frame_hdr:0000000000012282                 db 0FFh
.eh_frame_hdr:0000000000012283                 db 0FFh
.eh_frame_hdr:0000000000012284                 db  0Ch
.eh_frame_hdr:0000000000012285                 db    7
.eh_frame_hdr:0000000000012286                 db    0
.eh_frame_hdr:0000000000012287                 db    0
.eh_frame_hdr:0000000000012288                 db 0F4h
.eh_frame_hdr:0000000000012289                 db  1Dh
.eh_frame_hdr:000000000001228A                 db 0FFh
.eh_frame_hdr:000000000001228B                 db 0FFh
.eh_frame_hdr:000000000001228C                 db  6Ch ; l
.eh_frame_hdr:000000000001228D                 db    7
.eh_frame_hdr:000000000001228E                 db    0
.eh_frame_hdr:000000000001228F                 db    0
.eh_frame_hdr:0000000000012290                 db    4
.eh_frame_hdr:0000000000012291                 db  1Eh
.eh_frame_hdr:0000000000012292                 db 0FFh
.eh_frame_hdr:0000000000012293                 db 0FFh
.eh_frame_hdr:0000000000012294                 db  80h
.eh_frame_hdr:0000000000012295                 db    7
.eh_frame_hdr:0000000000012296                 db    0
.eh_frame_hdr:0000000000012297                 db    0
.eh_frame_hdr:0000000000012298                 db  54h ; T
.eh_frame_hdr:0000000000012299                 db  1Eh
.eh_frame_hdr:000000000001229A                 db 0FFh
.eh_frame_hdr:000000000001229B                 db 0FFh
.eh_frame_hdr:000000000001229C                 db  9Ch
.eh_frame_hdr:000000000001229D                 db    7
.eh_frame_hdr:000000000001229E                 db    0
.eh_frame_hdr:000000000001229F                 db    0
.eh_frame_hdr:00000000000122A0                 db 0D4h
.eh_frame_hdr:00000000000122A1                 db  1Fh
.eh_frame_hdr:00000000000122A2                 db 0FFh
.eh_frame_hdr:00000000000122A3                 db 0FFh
.eh_frame_hdr:00000000000122A4                 db 0B0h
.eh_frame_hdr:00000000000122A5                 db    7
.eh_frame_hdr:00000000000122A6                 db    0
.eh_frame_hdr:00000000000122A7                 db    0
.eh_frame_hdr:00000000000122A8                 db 0D4h
.eh_frame_hdr:00000000000122A9                 db  20h
.eh_frame_hdr:00000000000122AA                 db 0FFh
.eh_frame_hdr:00000000000122AB                 db 0FFh
.eh_frame_hdr:00000000000122AC                 db 0FCh
.eh_frame_hdr:00000000000122AD                 db    7
.eh_frame_hdr:00000000000122AE                 db    0
.eh_frame_hdr:00000000000122AF                 db    0
.eh_frame_hdr:00000000000122B0                 db 0C4h
.eh_frame_hdr:00000000000122B1                 db  21h ; !
.eh_frame_hdr:00000000000122B2                 db 0FFh
.eh_frame_hdr:00000000000122B3                 db 0FFh
.eh_frame_hdr:00000000000122B4                 db  20h
.eh_frame_hdr:00000000000122B5                 db    8
.eh_frame_hdr:00000000000122B6                 db    0
.eh_frame_hdr:00000000000122B7                 db    0
.eh_frame_hdr:00000000000122B8                 db    4
.eh_frame_hdr:00000000000122B9                 db  22h ; "
.eh_frame_hdr:00000000000122BA                 db 0FFh
.eh_frame_hdr:00000000000122BB                 db 0FFh
.eh_frame_hdr:00000000000122BC                 db  38h ; 8
.eh_frame_hdr:00000000000122BD                 db    8
.eh_frame_hdr:00000000000122BE                 db    0
.eh_frame_hdr:00000000000122BF                 db    0
.eh_frame_hdr:00000000000122C0                 db 0E4h
.eh_frame_hdr:00000000000122C1                 db  22h ; "
.eh_frame_hdr:00000000000122C2                 db 0FFh
.eh_frame_hdr:00000000000122C3                 db 0FFh
.eh_frame_hdr:00000000000122C4                 db  4Ch ; L
.eh_frame_hdr:00000000000122C5                 db    8
.eh_frame_hdr:00000000000122C6                 db    0
.eh_frame_hdr:00000000000122C7                 db    0
.eh_frame_hdr:00000000000122C8                 db  14h
.eh_frame_hdr:00000000000122C9                 db  23h ; #
.eh_frame_hdr:00000000000122CA                 db 0FFh
.eh_frame_hdr:00000000000122CB                 db 0FFh
.eh_frame_hdr:00000000000122CC                 db  60h ; `
.eh_frame_hdr:00000000000122CD                 db    8
.eh_frame_hdr:00000000000122CE                 db    0
.eh_frame_hdr:00000000000122CF                 db    0
.eh_frame_hdr:00000000000122D0                 db 0D4h
.eh_frame_hdr:00000000000122D1                 db  23h ; #
.eh_frame_hdr:00000000000122D2                 db 0FFh
.eh_frame_hdr:00000000000122D3                 db 0FFh
.eh_frame_hdr:00000000000122D4                 db 0A4h
.eh_frame_hdr:00000000000122D5                 db    8
.eh_frame_hdr:00000000000122D6                 db    0
.eh_frame_hdr:00000000000122D7                 db    0
.eh_frame_hdr:00000000000122D8                 db 0C4h
.eh_frame_hdr:00000000000122D9                 db  25h ; %
.eh_frame_hdr:00000000000122DA                 db 0FFh
.eh_frame_hdr:00000000000122DB                 db 0FFh
.eh_frame_hdr:00000000000122DC                 db 0DCh
.eh_frame_hdr:00000000000122DD                 db    8
.eh_frame_hdr:00000000000122DE                 db    0
.eh_frame_hdr:00000000000122DF                 db    0
.eh_frame_hdr:00000000000122E0                 db  84h
.eh_frame_hdr:00000000000122E1                 db  26h ; &
.eh_frame_hdr:00000000000122E2                 db 0FFh
.eh_frame_hdr:00000000000122E3                 db 0FFh
.eh_frame_hdr:00000000000122E4                 db  10h
.eh_frame_hdr:00000000000122E5                 db    9
.eh_frame_hdr:00000000000122E6                 db    0
.eh_frame_hdr:00000000000122E7                 db    0
.eh_frame_hdr:00000000000122E8                 db  84h
.eh_frame_hdr:00000000000122E9                 db  27h ; '
.eh_frame_hdr:00000000000122EA                 db 0FFh
.eh_frame_hdr:00000000000122EB                 db 0FFh
.eh_frame_hdr:00000000000122EC                 db  48h ; H
.eh_frame_hdr:00000000000122ED                 db    9
.eh_frame_hdr:00000000000122EE                 db    0
.eh_frame_hdr:00000000000122EF                 db    0
.eh_frame_hdr:00000000000122F0                 db  64h ; d
.eh_frame_hdr:00000000000122F1                 db  2Bh ; +
.eh_frame_hdr:00000000000122F2                 db 0FFh
.eh_frame_hdr:00000000000122F3                 db 0FFh
.eh_frame_hdr:00000000000122F4                 db  88h
.eh_frame_hdr:00000000000122F5                 db    9
.eh_frame_hdr:00000000000122F6                 db    0
.eh_frame_hdr:00000000000122F7                 db    0
.eh_frame_hdr:00000000000122F8                 db  74h ; t
.eh_frame_hdr:00000000000122F9                 db  47h ; G
.eh_frame_hdr:00000000000122FA                 db 0FFh
.eh_frame_hdr:00000000000122FB                 db 0FFh
.eh_frame_hdr:00000000000122FC                 db    0
.eh_frame_hdr:00000000000122FD                 db  0Ah
.eh_frame_hdr:00000000000122FE                 db    0
.eh_frame_hdr:00000000000122FF                 db    0
.eh_frame_hdr:0000000000012300                 db 0E4h
.eh_frame_hdr:0000000000012301                 db  64h ; d
.eh_frame_hdr:0000000000012302                 db 0FFh
.eh_frame_hdr:0000000000012303                 db 0FFh
.eh_frame_hdr:0000000000012304                 db  90h
.eh_frame_hdr:0000000000012305                 db  0Ah
.eh_frame_hdr:0000000000012306                 db    0
.eh_frame_hdr:0000000000012307                 db    0
.eh_frame_hdr:0000000000012308                 db  54h ; T
.eh_frame_hdr:0000000000012309                 db  65h ; e
.eh_frame_hdr:000000000001230A                 db 0FFh
.eh_frame_hdr:000000000001230B                 db 0FFh
.eh_frame_hdr:000000000001230C                 db 0D4h
.eh_frame_hdr:000000000001230D                 db  0Ah
.eh_frame_hdr:000000000001230E                 db    0
.eh_frame_hdr:000000000001230F                 db    0
.eh_frame_hdr:0000000000012310                 db  14h
.eh_frame_hdr:0000000000012311                 db  66h ; f
.eh_frame_hdr:0000000000012312                 db 0FFh
.eh_frame_hdr:0000000000012313                 db 0FFh
.eh_frame_hdr:0000000000012314                 db    0
.eh_frame_hdr:0000000000012315                 db  0Bh
.eh_frame_hdr:0000000000012316                 db    0
.eh_frame_hdr:0000000000012317                 db    0
.eh_frame_hdr:0000000000012318                 db    4
.eh_frame_hdr:0000000000012319                 db  69h ; i
.eh_frame_hdr:000000000001231A                 db 0FFh
.eh_frame_hdr:000000000001231B                 db 0FFh
.eh_frame_hdr:000000000001231C                 db  4Ch ; L
.eh_frame_hdr:000000000001231D                 db  0Bh
.eh_frame_hdr:000000000001231E                 db    0
.eh_frame_hdr:000000000001231F                 db    0
.eh_frame_hdr:0000000000012320                 db  94h
.eh_frame_hdr:0000000000012321                 db  69h ; i
.eh_frame_hdr:0000000000012322                 db 0FFh
.eh_frame_hdr:0000000000012323                 db 0FFh
.eh_frame_hdr:0000000000012324                 db  74h ; t
.eh_frame_hdr:0000000000012325                 db  0Bh
.eh_frame_hdr:0000000000012326                 db    0
.eh_frame_hdr:0000000000012327                 db    0
.eh_frame_hdr:0000000000012328                 db  34h ; 4
.eh_frame_hdr:0000000000012329                 db  6Ah ; j
.eh_frame_hdr:000000000001232A                 db 0FFh
.eh_frame_hdr:000000000001232B                 db 0FFh
.eh_frame_hdr:000000000001232C                 db  94h
.eh_frame_hdr:000000000001232D                 db  0Bh
.eh_frame_hdr:000000000001232E                 db    0
.eh_frame_hdr:000000000001232F                 db    0
.eh_frame_hdr:0000000000012330                 db  24h ; $
.eh_frame_hdr:0000000000012331                 db  6Bh ; k
.eh_frame_hdr:0000000000012332                 db 0FFh
.eh_frame_hdr:0000000000012333                 db 0FFh
.eh_frame_hdr:0000000000012334                 db 0D8h
.eh_frame_hdr:0000000000012335                 db  0Bh
.eh_frame_hdr:0000000000012336                 db    0
.eh_frame_hdr:0000000000012337                 db    0
.eh_frame_hdr:0000000000012338                 db  64h ; d
.eh_frame_hdr:0000000000012339                 db  7Dh ; }
.eh_frame_hdr:000000000001233A                 db 0FFh
.eh_frame_hdr:000000000001233B                 db 0FFh
.eh_frame_hdr:000000000001233C                 db  50h ; P
.eh_frame_hdr:000000000001233D                 db  0Ch
.eh_frame_hdr:000000000001233E                 db    0
.eh_frame_hdr:000000000001233F                 db    0
.eh_frame_hdr:0000000000012340                 db  14h
.eh_frame_hdr:0000000000012341                 db  7Fh ; 
.eh_frame_hdr:0000000000012342                 db 0FFh
.eh_frame_hdr:0000000000012343                 db 0FFh
.eh_frame_hdr:0000000000012344                 db 0BCh
.eh_frame_hdr:0000000000012345                 db  0Ch
.eh_frame_hdr:0000000000012346                 db    0
.eh_frame_hdr:0000000000012347                 db    0
.eh_frame_hdr:0000000000012348                 db  54h ; T
.eh_frame_hdr:0000000000012349                 db  7Fh ; 
.eh_frame_hdr:000000000001234A                 db 0FFh
.eh_frame_hdr:000000000001234B                 db 0FFh
.eh_frame_hdr:000000000001234C                 db 0E8h
.eh_frame_hdr:000000000001234D                 db  0Ch
.eh_frame_hdr:000000000001234E                 db    0
.eh_frame_hdr:000000000001234F                 db    0
.eh_frame_hdr:0000000000012350                 db  74h ; t
.eh_frame_hdr:0000000000012351                 db  7Fh ; 
.eh_frame_hdr:0000000000012352                 db 0FFh
.eh_frame_hdr:0000000000012353                 db 0FFh
.eh_frame_hdr:0000000000012354                 db 0FCh
.eh_frame_hdr:0000000000012355                 db  0Ch
.eh_frame_hdr:0000000000012356                 db    0
.eh_frame_hdr:0000000000012357                 db    0
.eh_frame_hdr:0000000000012358                 db  94h
.eh_frame_hdr:0000000000012359                 db  7Fh ; 
.eh_frame_hdr:000000000001235A                 db 0FFh
.eh_frame_hdr:000000000001235B                 db 0FFh
.eh_frame_hdr:000000000001235C                 db  10h
.eh_frame_hdr:000000000001235D                 db  0Dh
.eh_frame_hdr:000000000001235E                 db    0
.eh_frame_hdr:000000000001235F                 db    0
.eh_frame_hdr:0000000000012360                 db 0D4h
.eh_frame_hdr:0000000000012361                 db  7Fh ; 
.eh_frame_hdr:0000000000012362                 db 0FFh
.eh_frame_hdr:0000000000012363                 db 0FFh
.eh_frame_hdr:0000000000012364                 db  24h ; $
.eh_frame_hdr:0000000000012365                 db  0Dh
.eh_frame_hdr:0000000000012366                 db    0
.eh_frame_hdr:0000000000012367                 db    0
.eh_frame_hdr:0000000000012368                 db 0F4h
.eh_frame_hdr:0000000000012369                 db  7Fh ; 
.eh_frame_hdr:000000000001236A                 db 0FFh
.eh_frame_hdr:000000000001236B                 db 0FFh
.eh_frame_hdr:000000000001236C                 db  38h ; 8
.eh_frame_hdr:000000000001236D                 db  0Dh
.eh_frame_hdr:000000000001236E                 db    0
.eh_frame_hdr:000000000001236F                 db    0
.eh_frame_hdr:0000000000012370                 db  24h ; $
.eh_frame_hdr:0000000000012371                 db  80h
.eh_frame_hdr:0000000000012372                 db 0FFh
.eh_frame_hdr:0000000000012373                 db 0FFh
.eh_frame_hdr:0000000000012374                 db  4Ch ; L
.eh_frame_hdr:0000000000012375                 db  0Dh
.eh_frame_hdr:0000000000012376                 db    0
.eh_frame_hdr:0000000000012377                 db    0
.eh_frame_hdr:0000000000012378                 db 0A4h
.eh_frame_hdr:0000000000012379                 db  80h
.eh_frame_hdr:000000000001237A                 db 0FFh
.eh_frame_hdr:000000000001237B                 db 0FFh
.eh_frame_hdr:000000000001237C                 db 0A0h
.eh_frame_hdr:000000000001237D                 db  0Dh
.eh_frame_hdr:000000000001237E                 db    0
.eh_frame_hdr:000000000001237F                 db    0
.eh_frame_hdr:0000000000012380                 db  94h
.eh_frame_hdr:0000000000012381                 db  81h
.eh_frame_hdr:0000000000012382                 db 0FFh
.eh_frame_hdr:0000000000012383                 db 0FFh
.eh_frame_hdr:0000000000012384                 db  0Ch
.eh_frame_hdr:0000000000012385                 db  0Eh
.eh_frame_hdr:0000000000012386                 db    0
.eh_frame_hdr:0000000000012387                 db    0
.eh_frame_hdr:0000000000012388                 db 0A4h
.eh_frame_hdr:0000000000012389                 db  81h
.eh_frame_hdr:000000000001238A                 db 0FFh
.eh_frame_hdr:000000000001238B                 db 0FFh
.eh_frame_hdr:000000000001238C                 db  20h
.eh_frame_hdr:000000000001238D                 db  0Eh
.eh_frame_hdr:000000000001238E                 db    0
.eh_frame_hdr:000000000001238F                 db    0
.eh_frame_hdr:0000000000012390                 db  44h ; D
.eh_frame_hdr:0000000000012391                 db  82h
.eh_frame_hdr:0000000000012392                 db 0FFh
.eh_frame_hdr:0000000000012393                 db 0FFh
.eh_frame_hdr:0000000000012394                 db  4Ch ; L
.eh_frame_hdr:0000000000012395                 db  0Eh
.eh_frame_hdr:0000000000012396                 db    0
.eh_frame_hdr:0000000000012397                 db    0
.eh_frame_hdr:0000000000012398                 db  64h ; d
.eh_frame_hdr:0000000000012399                 db  82h
.eh_frame_hdr:000000000001239A                 db 0FFh
.eh_frame_hdr:000000000001239B                 db 0FFh
.eh_frame_hdr:000000000001239C                 db  60h ; `
.eh_frame_hdr:000000000001239D                 db  0Eh
.eh_frame_hdr:000000000001239E                 db    0
.eh_frame_hdr:000000000001239F                 db    0
.eh_frame_hdr:00000000000123A0                 db  74h ; t
.eh_frame_hdr:00000000000123A1                 db  82h
.eh_frame_hdr:00000000000123A2                 db 0FFh
.eh_frame_hdr:00000000000123A3                 db 0FFh
.eh_frame_hdr:00000000000123A4                 db  74h ; t
.eh_frame_hdr:00000000000123A5                 db  0Eh
.eh_frame_hdr:00000000000123A6                 db    0
.eh_frame_hdr:00000000000123A7                 db    0
.eh_frame_hdr:00000000000123A8                 db  94h
.eh_frame_hdr:00000000000123A9                 db  82h
.eh_frame_hdr:00000000000123AA                 db 0FFh
.eh_frame_hdr:00000000000123AB                 db 0FFh
.eh_frame_hdr:00000000000123AC                 db  88h
.eh_frame_hdr:00000000000123AD                 db  0Eh
.eh_frame_hdr:00000000000123AE                 db    0
.eh_frame_hdr:00000000000123AF                 db    0
.eh_frame_hdr:00000000000123B0                 db 0B4h
.eh_frame_hdr:00000000000123B1                 db  82h
.eh_frame_hdr:00000000000123B2                 db 0FFh
.eh_frame_hdr:00000000000123B3                 db 0FFh
.eh_frame_hdr:00000000000123B4                 db  9Ch
.eh_frame_hdr:00000000000123B5                 db  0Eh
.eh_frame_hdr:00000000000123B6                 db    0
.eh_frame_hdr:00000000000123B7                 db    0
.eh_frame_hdr:00000000000123B8                 db  44h ; D
.eh_frame_hdr:00000000000123B9                 db  83h
.eh_frame_hdr:00000000000123BA                 db 0FFh
.eh_frame_hdr:00000000000123BB                 db 0FFh
.eh_frame_hdr:00000000000123BC                 db 0B8h
.eh_frame_hdr:00000000000123BD                 db  0Eh
.eh_frame_hdr:00000000000123BE                 db    0
.eh_frame_hdr:00000000000123BF                 db    0
.eh_frame_hdr:00000000000123C0                 db 0D4h
.eh_frame_hdr:00000000000123C1                 db  83h
.eh_frame_hdr:00000000000123C2                 db 0FFh
.eh_frame_hdr:00000000000123C3                 db 0FFh
.eh_frame_hdr:00000000000123C4                 db 0D4h
.eh_frame_hdr:00000000000123C5                 db  0Eh
.eh_frame_hdr:00000000000123C6                 db    0
.eh_frame_hdr:00000000000123C7                 db    0
.eh_frame_hdr:00000000000123C8                 db 0E4h
.eh_frame_hdr:00000000000123C9                 db  83h
.eh_frame_hdr:00000000000123CA                 db 0FFh
.eh_frame_hdr:00000000000123CB                 db 0FFh
.eh_frame_hdr:00000000000123CC                 db 0E8h
.eh_frame_hdr:00000000000123CD                 db  0Eh
.eh_frame_hdr:00000000000123CE                 db    0
.eh_frame_hdr:00000000000123CF                 db    0
.eh_frame_hdr:00000000000123D0                 db 0F4h
.eh_frame_hdr:00000000000123D1                 db  83h
.eh_frame_hdr:00000000000123D2                 db 0FFh
.eh_frame_hdr:00000000000123D3                 db 0FFh
.eh_frame_hdr:00000000000123D4                 db 0FCh
.eh_frame_hdr:00000000000123D5                 db  0Eh
.eh_frame_hdr:00000000000123D6                 db    0
.eh_frame_hdr:00000000000123D7                 db    0
.eh_frame_hdr:00000000000123D8                 db  94h
.eh_frame_hdr:00000000000123D9                 db  84h
.eh_frame_hdr:00000000000123DA                 db 0FFh
.eh_frame_hdr:00000000000123DB                 db 0FFh
.eh_frame_hdr:00000000000123DC                 db  18h
.eh_frame_hdr:00000000000123DD                 db  0Fh
.eh_frame_hdr:00000000000123DE                 db    0
.eh_frame_hdr:00000000000123DF                 db    0
.eh_frame_hdr:00000000000123E0                 db 0A4h
.eh_frame_hdr:00000000000123E1                 db  84h
.eh_frame_hdr:00000000000123E2                 db 0FFh
.eh_frame_hdr:00000000000123E3                 db 0FFh
.eh_frame_hdr:00000000000123E4                 db  2Ch ; ,
.eh_frame_hdr:00000000000123E5                 db  0Fh
.eh_frame_hdr:00000000000123E6                 db    0
.eh_frame_hdr:00000000000123E7                 db    0
.eh_frame_hdr:00000000000123E8                 db 0C4h
.eh_frame_hdr:00000000000123E9                 db  84h
.eh_frame_hdr:00000000000123EA                 db 0FFh
.eh_frame_hdr:00000000000123EB                 db 0FFh
.eh_frame_hdr:00000000000123EC                 db  40h ; @
.eh_frame_hdr:00000000000123ED                 db  0Fh
.eh_frame_hdr:00000000000123EE                 db    0
.eh_frame_hdr:00000000000123EF                 db    0
.eh_frame_hdr:00000000000123F0                 db 0D4h
.eh_frame_hdr:00000000000123F1                 db  84h
.eh_frame_hdr:00000000000123F2                 db 0FFh
.eh_frame_hdr:00000000000123F3                 db 0FFh
.eh_frame_hdr:00000000000123F4                 db  54h ; T
.eh_frame_hdr:00000000000123F5                 db  0Fh
.eh_frame_hdr:00000000000123F6                 db    0
.eh_frame_hdr:00000000000123F7                 db    0
.eh_frame_hdr:00000000000123F8                 db  64h ; d
.eh_frame_hdr:00000000000123F9                 db  85h
.eh_frame_hdr:00000000000123FA                 db 0FFh
.eh_frame_hdr:00000000000123FB                 db 0FFh
.eh_frame_hdr:00000000000123FC                 db  70h ; p
.eh_frame_hdr:00000000000123FD                 db  0Fh
.eh_frame_hdr:00000000000123FE                 db    0
.eh_frame_hdr:00000000000123FF                 db    0
.eh_frame_hdr:0000000000012400                 db    4
.eh_frame_hdr:0000000000012401                 db  86h
.eh_frame_hdr:0000000000012402                 db 0FFh
.eh_frame_hdr:0000000000012403                 db 0FFh
.eh_frame_hdr:0000000000012404                 db  8Ch
.eh_frame_hdr:0000000000012405                 db  0Fh
.eh_frame_hdr:0000000000012406                 db    0
.eh_frame_hdr:0000000000012407                 db    0
.eh_frame_hdr:0000000000012408                 db  14h
.eh_frame_hdr:0000000000012409                 db  86h
.eh_frame_hdr:000000000001240A                 db 0FFh
.eh_frame_hdr:000000000001240B                 db 0FFh
.eh_frame_hdr:000000000001240C                 db 0A0h
.eh_frame_hdr:000000000001240D                 db  0Fh
.eh_frame_hdr:000000000001240E                 db    0
.eh_frame_hdr:000000000001240F                 db    0
.eh_frame_hdr:0000000000012410                 db  34h ; 4
.eh_frame_hdr:0000000000012411                 db  86h
.eh_frame_hdr:0000000000012412                 db 0FFh
.eh_frame_hdr:0000000000012413                 db 0FFh
.eh_frame_hdr:0000000000012414                 db 0B4h
.eh_frame_hdr:0000000000012415                 db  0Fh
.eh_frame_hdr:0000000000012416                 db    0
.eh_frame_hdr:0000000000012417                 db    0
.eh_frame_hdr:0000000000012418                 db  54h ; T
.eh_frame_hdr:0000000000012419                 db  86h
.eh_frame_hdr:000000000001241A                 db 0FFh
.eh_frame_hdr:000000000001241B                 db 0FFh
.eh_frame_hdr:000000000001241C                 db 0C8h
.eh_frame_hdr:000000000001241D                 db  0Fh
.eh_frame_hdr:000000000001241E                 db    0
.eh_frame_hdr:000000000001241F                 db    0
.eh_frame_hdr:0000000000012420                 db  64h ; d
.eh_frame_hdr:0000000000012421                 db  86h
.eh_frame_hdr:0000000000012422                 db 0FFh
.eh_frame_hdr:0000000000012423                 db 0FFh
.eh_frame_hdr:0000000000012424                 db 0DCh
.eh_frame_hdr:0000000000012425                 db  0Fh
.eh_frame_hdr:0000000000012426                 db    0
.eh_frame_hdr:0000000000012427                 db    0
.eh_frame_hdr:0000000000012428                 db  84h
.eh_frame_hdr:0000000000012429                 db  86h
.eh_frame_hdr:000000000001242A                 db 0FFh
.eh_frame_hdr:000000000001242B                 db 0FFh
.eh_frame_hdr:000000000001242C                 db 0F0h
.eh_frame_hdr:000000000001242D                 db  0Fh
.eh_frame_hdr:000000000001242E                 db    0
.eh_frame_hdr:000000000001242F                 db    0
.eh_frame_hdr:0000000000012430                 db 0A4h
.eh_frame_hdr:0000000000012431                 db  86h
.eh_frame_hdr:0000000000012432                 db 0FFh
.eh_frame_hdr:0000000000012433                 db 0FFh
.eh_frame_hdr:0000000000012434                 db    4
.eh_frame_hdr:0000000000012435                 db  10h
.eh_frame_hdr:0000000000012436                 db    0
.eh_frame_hdr:0000000000012437                 db    0
.eh_frame_hdr:0000000000012438                 db 0C4h
.eh_frame_hdr:0000000000012439                 db  86h
.eh_frame_hdr:000000000001243A                 db 0FFh
.eh_frame_hdr:000000000001243B                 db 0FFh
.eh_frame_hdr:000000000001243C                 db  1Ch
.eh_frame_hdr:000000000001243D                 db  10h
.eh_frame_hdr:000000000001243E                 db    0
.eh_frame_hdr:000000000001243F                 db    0
.eh_frame_hdr:0000000000012440                 db 0E4h
.eh_frame_hdr:0000000000012441                 db  8Ah
.eh_frame_hdr:0000000000012442                 db 0FFh
.eh_frame_hdr:0000000000012443                 db 0FFh
.eh_frame_hdr:0000000000012444                 db  30h ; 0
.eh_frame_hdr:0000000000012445                 db  11h
.eh_frame_hdr:0000000000012446                 db    0
.eh_frame_hdr:0000000000012447                 db    0
.eh_frame_hdr:0000000000012448                 db    4
.eh_frame_hdr:0000000000012449                 db  8Bh
.eh_frame_hdr:000000000001244A                 db 0FFh
.eh_frame_hdr:000000000001244B                 db 0FFh
.eh_frame_hdr:000000000001244C                 db  44h ; D
.eh_frame_hdr:000000000001244D                 db  11h
.eh_frame_hdr:000000000001244E                 db    0
.eh_frame_hdr:000000000001244F                 db    0
.eh_frame_hdr:0000000000012450                 db  84h
.eh_frame_hdr:0000000000012451                 db  8Bh
.eh_frame_hdr:0000000000012452                 db 0FFh
.eh_frame_hdr:0000000000012453                 db 0FFh
.eh_frame_hdr:0000000000012454                 db  60h ; `
.eh_frame_hdr:0000000000012455                 db  11h
.eh_frame_hdr:0000000000012456                 db    0
.eh_frame_hdr:0000000000012457                 db    0
.eh_frame_hdr:0000000000012458                 db  64h ; d
.eh_frame_hdr:0000000000012459                 db  8Ch
.eh_frame_hdr:000000000001245A                 db 0FFh
.eh_frame_hdr:000000000001245B                 db 0FFh
.eh_frame_hdr:000000000001245C                 db  8Ch
.eh_frame_hdr:000000000001245D                 db  11h
.eh_frame_hdr:000000000001245E                 db    0
.eh_frame_hdr:000000000001245F                 db    0
.eh_frame_hdr:0000000000012460                 db 0E4h
.eh_frame_hdr:0000000000012461                 db  8Ch
.eh_frame_hdr:0000000000012462                 db 0FFh
.eh_frame_hdr:0000000000012463                 db 0FFh
.eh_frame_hdr:0000000000012464                 db 0ACh
.eh_frame_hdr:0000000000012465                 db  11h
.eh_frame_hdr:0000000000012466                 db    0
.eh_frame_hdr:0000000000012467                 db    0
.eh_frame_hdr:0000000000012468                 db    4
.eh_frame_hdr:0000000000012469                 db  8Dh
.eh_frame_hdr:000000000001246A                 db 0FFh
.eh_frame_hdr:000000000001246B                 db 0FFh
.eh_frame_hdr:000000000001246C                 db 0C8h
.eh_frame_hdr:000000000001246D                 db  11h
.eh_frame_hdr:000000000001246E                 db    0
.eh_frame_hdr:000000000001246F                 db    0
.eh_frame_hdr:0000000000012470                 db  34h ; 4
.eh_frame_hdr:0000000000012471                 db  8Dh
.eh_frame_hdr:0000000000012472                 db 0FFh
.eh_frame_hdr:0000000000012473                 db 0FFh
.eh_frame_hdr:0000000000012474                 db 0DCh
.eh_frame_hdr:0000000000012475                 db  11h
.eh_frame_hdr:0000000000012476                 db    0
.eh_frame_hdr:0000000000012477                 db    0
.eh_frame_hdr:0000000000012478                 db  44h ; D
.eh_frame_hdr:0000000000012479                 db  8Dh
.eh_frame_hdr:000000000001247A                 db 0FFh
.eh_frame_hdr:000000000001247B                 db 0FFh
.eh_frame_hdr:000000000001247C                 db 0F0h
.eh_frame_hdr:000000000001247D                 db  11h
.eh_frame_hdr:000000000001247E                 db    0
.eh_frame_hdr:000000000001247F                 db    0
.eh_frame_hdr:0000000000012480                 db  84h
.eh_frame_hdr:0000000000012481                 db  8Dh
.eh_frame_hdr:0000000000012482                 db 0FFh
.eh_frame_hdr:0000000000012483                 db 0FFh
.eh_frame_hdr:0000000000012484                 db  14h
.eh_frame_hdr:0000000000012485                 db  12h
.eh_frame_hdr:0000000000012486                 db    0
.eh_frame_hdr:0000000000012487                 db    0
.eh_frame_hdr:0000000000012488                 db 0B4h
.eh_frame_hdr:0000000000012489                 db  8Dh
.eh_frame_hdr:000000000001248A                 db 0FFh
.eh_frame_hdr:000000000001248B                 db 0FFh
.eh_frame_hdr:000000000001248C                 db  28h ; (
.eh_frame_hdr:000000000001248D                 db  12h
.eh_frame_hdr:000000000001248E                 db    0
.eh_frame_hdr:000000000001248F                 db    0
.eh_frame_hdr:0000000000012490                 db  44h ; D
.eh_frame_hdr:0000000000012491                 db  8Eh
.eh_frame_hdr:0000000000012492                 db 0FFh
.eh_frame_hdr:0000000000012493                 db 0FFh
.eh_frame_hdr:0000000000012494                 db  40h ; @
.eh_frame_hdr:0000000000012495                 db  12h
.eh_frame_hdr:0000000000012496                 db    0
.eh_frame_hdr:0000000000012497                 db    0
.eh_frame_hdr:0000000000012498                 db  94h
.eh_frame_hdr:0000000000012499                 db  8Eh
.eh_frame_hdr:000000000001249A                 db 0FFh
.eh_frame_hdr:000000000001249B                 db 0FFh
.eh_frame_hdr:000000000001249C                 db  58h ; X
.eh_frame_hdr:000000000001249D                 db  12h
.eh_frame_hdr:000000000001249E                 db    0
.eh_frame_hdr:000000000001249F                 db    0
.eh_frame_hdr:00000000000124A0                 db 0B4h
.eh_frame_hdr:00000000000124A1                 db  8Eh
.eh_frame_hdr:00000000000124A2                 db 0FFh
.eh_frame_hdr:00000000000124A3                 db 0FFh
.eh_frame_hdr:00000000000124A4                 db  74h ; t
.eh_frame_hdr:00000000000124A5                 db  12h
.eh_frame_hdr:00000000000124A6                 db    0
.eh_frame_hdr:00000000000124A7                 db    0
.eh_frame_hdr:00000000000124A8                 db 0E4h
.eh_frame_hdr:00000000000124A9                 db  8Eh
.eh_frame_hdr:00000000000124AA                 db 0FFh
.eh_frame_hdr:00000000000124AB                 db 0FFh
.eh_frame_hdr:00000000000124AC                 db  90h
.eh_frame_hdr:00000000000124AD                 db  12h
.eh_frame_hdr:00000000000124AE                 db    0
.eh_frame_hdr:00000000000124AF                 db    0
.eh_frame_hdr:00000000000124B0                 db  14h
.eh_frame_hdr:00000000000124B1                 db  8Fh
.eh_frame_hdr:00000000000124B2                 db 0FFh
.eh_frame_hdr:00000000000124B3                 db 0FFh
.eh_frame_hdr:00000000000124B4                 db 0B8h
.eh_frame_hdr:00000000000124B5                 db  12h
.eh_frame_hdr:00000000000124B6                 db    0
.eh_frame_hdr:00000000000124B7                 db    0
.eh_frame_hdr:00000000000124B8                 db  34h ; 4
.eh_frame_hdr:00000000000124B9                 db  8Fh
.eh_frame_hdr:00000000000124BA                 db 0FFh
.eh_frame_hdr:00000000000124BB                 db 0FFh
.eh_frame_hdr:00000000000124BC                 db 0D4h
.eh_frame_hdr:00000000000124BD                 db  12h
.eh_frame_hdr:00000000000124BE                 db    0
.eh_frame_hdr:00000000000124BF                 db    0
.eh_frame_hdr:00000000000124C0                 db  74h ; t
.eh_frame_hdr:00000000000124C1                 db  8Fh
.eh_frame_hdr:00000000000124C2                 db 0FFh
.eh_frame_hdr:00000000000124C3                 db 0FFh
.eh_frame_hdr:00000000000124C4                 db 0ECh
.eh_frame_hdr:00000000000124C5                 db  12h
.eh_frame_hdr:00000000000124C6                 db    0
.eh_frame_hdr:00000000000124C7                 db    0
.eh_frame_hdr:00000000000124C8                 db    4
.eh_frame_hdr:00000000000124C9                 db  90h
.eh_frame_hdr:00000000000124CA                 db 0FFh
.eh_frame_hdr:00000000000124CB                 db 0FFh
.eh_frame_hdr:00000000000124CC                 db  2Ch ; ,
.eh_frame_hdr:00000000000124CD                 db  13h
.eh_frame_hdr:00000000000124CE                 db    0
.eh_frame_hdr:00000000000124CF                 db    0
.eh_frame_hdr:00000000000124D0                 db  34h ; 4
.eh_frame_hdr:00000000000124D1                 db  90h
.eh_frame_hdr:00000000000124D2                 db 0FFh
.eh_frame_hdr:00000000000124D3                 db 0FFh
.eh_frame_hdr:00000000000124D4                 db  40h ; @
.eh_frame_hdr:00000000000124D5                 db  13h
.eh_frame_hdr:00000000000124D6                 db    0
.eh_frame_hdr:00000000000124D7                 db    0
.eh_frame_hdr:00000000000124D8                 db  64h ; d
.eh_frame_hdr:00000000000124D9                 db  90h
.eh_frame_hdr:00000000000124DA                 db 0FFh
.eh_frame_hdr:00000000000124DB                 db 0FFh
.eh_frame_hdr:00000000000124DC                 db  5Ch ; \
.eh_frame_hdr:00000000000124DD                 db  13h
.eh_frame_hdr:00000000000124DE                 db    0
.eh_frame_hdr:00000000000124DF                 db    0
.eh_frame_hdr:00000000000124E0                 db 0C4h
.eh_frame_hdr:00000000000124E1                 db  90h
.eh_frame_hdr:00000000000124E2                 db 0FFh
.eh_frame_hdr:00000000000124E3                 db 0FFh
.eh_frame_hdr:00000000000124E4                 db  98h
.eh_frame_hdr:00000000000124E5                 db  13h
.eh_frame_hdr:00000000000124E6                 db    0
.eh_frame_hdr:00000000000124E7                 db    0
.eh_frame_hdr:00000000000124E8                 db  54h ; T
.eh_frame_hdr:00000000000124E9                 db  91h
.eh_frame_hdr:00000000000124EA                 db 0FFh
.eh_frame_hdr:00000000000124EB                 db 0FFh
.eh_frame_hdr:00000000000124EC                 db 0D0h
.eh_frame_hdr:00000000000124ED                 db  13h
.eh_frame_hdr:00000000000124EE                 db    0
.eh_frame_hdr:00000000000124EF                 db    0
.eh_frame_hdr:00000000000124F0                 db  94h
.eh_frame_hdr:00000000000124F1                 db  92h
.eh_frame_hdr:00000000000124F2                 db 0FFh
.eh_frame_hdr:00000000000124F3                 db 0FFh
.eh_frame_hdr:00000000000124F4                 db  1Ch
.eh_frame_hdr:00000000000124F5                 db  14h
.eh_frame_hdr:00000000000124F6                 db    0
.eh_frame_hdr:00000000000124F7                 db    0
.eh_frame_hdr:00000000000124F8                 db  74h ; t
.eh_frame_hdr:00000000000124F9                 db  93h
.eh_frame_hdr:00000000000124FA                 db 0FFh
.eh_frame_hdr:00000000000124FB                 db 0FFh
.eh_frame_hdr:00000000000124FC                 db  70h ; p
.eh_frame_hdr:00000000000124FD                 db  14h
.eh_frame_hdr:00000000000124FE                 db    0
.eh_frame_hdr:00000000000124FF                 db    0
.eh_frame_hdr:0000000000012500                 db  84h
.eh_frame_hdr:0000000000012501                 db  93h
.eh_frame_hdr:0000000000012502                 db 0FFh
.eh_frame_hdr:0000000000012503                 db 0FFh
.eh_frame_hdr:0000000000012504                 db  84h
.eh_frame_hdr:0000000000012505                 db  14h
.eh_frame_hdr:0000000000012506                 db    0
.eh_frame_hdr:0000000000012507                 db    0
.eh_frame_hdr:0000000000012508                 db  34h ; 4
.eh_frame_hdr:0000000000012509                 db  94h
.eh_frame_hdr:000000000001250A                 db 0FFh
.eh_frame_hdr:000000000001250B                 db 0FFh
.eh_frame_hdr:000000000001250C                 db 0E4h
.eh_frame_hdr:000000000001250D                 db  14h
.eh_frame_hdr:000000000001250E                 db    0
.eh_frame_hdr:000000000001250F                 db    0
.eh_frame_hdr:0000000000012510                 db  84h
.eh_frame_hdr:0000000000012511                 db  95h
.eh_frame_hdr:0000000000012512                 db 0FFh
.eh_frame_hdr:0000000000012513                 db 0FFh
.eh_frame_hdr:0000000000012514                 db  1Ch
.eh_frame_hdr:0000000000012515                 db  15h
.eh_frame_hdr:0000000000012516                 db    0
.eh_frame_hdr:0000000000012517                 db    0
.eh_frame_hdr:0000000000012518                 db  84h
.eh_frame_hdr:0000000000012519                 db  96h
.eh_frame_hdr:000000000001251A                 db 0FFh
.eh_frame_hdr:000000000001251B                 db 0FFh
.eh_frame_hdr:000000000001251C                 db  5Ch ; \
.eh_frame_hdr:000000000001251D                 db  15h
.eh_frame_hdr:000000000001251E                 db    0
.eh_frame_hdr:000000000001251F                 db    0
.eh_frame_hdr:0000000000012520                 db    4
.eh_frame_hdr:0000000000012521                 db  97h
.eh_frame_hdr:0000000000012522                 db 0FFh
.eh_frame_hdr:0000000000012523                 db 0FFh
.eh_frame_hdr:0000000000012524                 db 0ACh
.eh_frame_hdr:0000000000012525                 db  15h
.eh_frame_hdr:0000000000012526                 db    0
.eh_frame_hdr:0000000000012527                 db    0
.eh_frame_hdr:0000000000012528                 db  64h ; d
.eh_frame_hdr:0000000000012529                 db  97h
.eh_frame_hdr:000000000001252A                 db 0FFh
.eh_frame_hdr:000000000001252B                 db 0FFh
.eh_frame_hdr:000000000001252C                 db 0CCh
.eh_frame_hdr:000000000001252D                 db  15h
.eh_frame_hdr:000000000001252E                 db    0
.eh_frame_hdr:000000000001252F                 db    0
.eh_frame_hdr:0000000000012530                 db 0A4h
.eh_frame_hdr:0000000000012531                 db  97h
.eh_frame_hdr:0000000000012532                 db 0FFh
.eh_frame_hdr:0000000000012533                 db 0FFh
.eh_frame_hdr:0000000000012534                 db 0ECh
.eh_frame_hdr:0000000000012535                 db  15h
.eh_frame_hdr:0000000000012536                 db    0
.eh_frame_hdr:0000000000012537                 db    0
.eh_frame_hdr:0000000000012538                 db 0F4h
.eh_frame_hdr:0000000000012539                 db  97h
.eh_frame_hdr:000000000001253A                 db 0FFh
.eh_frame_hdr:000000000001253B                 db 0FFh
.eh_frame_hdr:000000000001253C                 db  18h
.eh_frame_hdr:000000000001253D                 db  16h
.eh_frame_hdr:000000000001253E                 db    0
.eh_frame_hdr:000000000001253F                 db    0
.eh_frame_hdr:0000000000012540                 db  44h ; D
.eh_frame_hdr:0000000000012541                 db  98h
.eh_frame_hdr:0000000000012542                 db 0FFh
.eh_frame_hdr:0000000000012543                 db 0FFh
.eh_frame_hdr:0000000000012544                 db  44h ; D
.eh_frame_hdr:0000000000012545                 db  16h
.eh_frame_hdr:0000000000012546                 db    0
.eh_frame_hdr:0000000000012547                 db    0
.eh_frame_hdr:0000000000012548                 db    4
.eh_frame_hdr:0000000000012549                 db 0B3h
.eh_frame_hdr:000000000001254A                 db 0FFh
.eh_frame_hdr:000000000001254B                 db 0FFh
.eh_frame_hdr:000000000001254C                 db 0BCh
.eh_frame_hdr:000000000001254D                 db  16h
.eh_frame_hdr:000000000001254E                 db    0
.eh_frame_hdr:000000000001254F                 db    0
.eh_frame_hdr:0000000000012550                 db  54h ; T
.eh_frame_hdr:0000000000012551                 db 0B3h
.eh_frame_hdr:0000000000012552                 db 0FFh
.eh_frame_hdr:0000000000012553                 db 0FFh
.eh_frame_hdr:0000000000012554                 db 0ECh
.eh_frame_hdr:0000000000012555                 db  16h
.eh_frame_hdr:0000000000012556                 db    0
.eh_frame_hdr:0000000000012557                 db    0
.eh_frame_hdr:0000000000012558                 db 0D4h
.eh_frame_hdr:0000000000012559                 db 0B3h
.eh_frame_hdr:000000000001255A                 db 0FFh
.eh_frame_hdr:000000000001255B                 db 0FFh
.eh_frame_hdr:000000000001255C                 db  24h ; $
.eh_frame_hdr:000000000001255D                 db  17h
.eh_frame_hdr:000000000001255E                 db    0
.eh_frame_hdr:000000000001255F                 db    0
.eh_frame_hdr:0000000000012560                 db  14h
.eh_frame_hdr:0000000000012561                 db 0B4h
.eh_frame_hdr:0000000000012562                 db 0FFh
.eh_frame_hdr:0000000000012563                 db 0FFh
.eh_frame_hdr:0000000000012564                 db  44h ; D
.eh_frame_hdr:0000000000012565                 db  17h
.eh_frame_hdr:0000000000012566                 db    0
.eh_frame_hdr:0000000000012567                 db    0
.eh_frame_hdr:0000000000012568                 db  74h ; t
.eh_frame_hdr:0000000000012569                 db 0B4h
.eh_frame_hdr:000000000001256A                 db 0FFh
.eh_frame_hdr:000000000001256B                 db 0FFh
.eh_frame_hdr:000000000001256C                 db  74h ; t
.eh_frame_hdr:000000000001256D                 db  17h
.eh_frame_hdr:000000000001256E                 db    0
.eh_frame_hdr:000000000001256F                 db    0
.eh_frame_hdr:0000000000012570                 db  84h
.eh_frame_hdr:0000000000012571                 db 0B4h
.eh_frame_hdr:0000000000012572                 db 0FFh
.eh_frame_hdr:0000000000012573                 db 0FFh
.eh_frame_hdr:0000000000012574                 db  8Ch
.eh_frame_hdr:0000000000012575                 db  17h
.eh_frame_hdr:0000000000012576                 db    0
.eh_frame_hdr:0000000000012577                 db    0
.eh_frame_hdr:0000000000012578                 db 0A4h
.eh_frame_hdr:0000000000012579                 db 0C5h
.eh_frame_hdr:000000000001257A                 db 0FFh
.eh_frame_hdr:000000000001257B                 db 0FFh
.eh_frame_hdr:000000000001257C                 db 0BCh
.eh_frame_hdr:000000000001257D                 db  17h
.eh_frame_hdr:000000000001257E                 db    0
.eh_frame_hdr:000000000001257F                 db    0
.eh_frame_hdr:0000000000012580                 db 0A4h
.eh_frame_hdr:0000000000012581                 db 0C7h
.eh_frame_hdr:0000000000012582                 db 0FFh
.eh_frame_hdr:0000000000012583                 db 0FFh
.eh_frame_hdr:0000000000012584                 db 0D4h
.eh_frame_hdr:0000000000012585                 db  17h
.eh_frame_hdr:0000000000012586                 db    0
.eh_frame_hdr:0000000000012587                 db    0
.eh_frame_hdr:0000000000012588                 db  94h
.eh_frame_hdr:0000000000012589                 db 0D4h
.eh_frame_hdr:000000000001258A                 db 0FFh
.eh_frame_hdr:000000000001258B                 db 0FFh
.eh_frame_hdr:000000000001258C                 db  24h ; $
.eh_frame_hdr:000000000001258D                 db  18h
.eh_frame_hdr:000000000001258E                 db    0
.eh_frame_hdr:000000000001258F                 db    0
.eh_frame_hdr:0000000000012590                 db    4
.eh_frame_hdr:0000000000012591                 db 0D5h
.eh_frame_hdr:0000000000012592                 db 0FFh
.eh_frame_hdr:0000000000012593                 db 0FFh
.eh_frame_hdr:0000000000012594                 db  6Ch ; l
.eh_frame_hdr:0000000000012595                 db  18h
.eh_frame_hdr:0000000000012596                 db    0
.eh_frame_hdr:0000000000012597                 db    0
.eh_frame_hdr:0000000000012598                 db  14h
.eh_frame_hdr:0000000000012599                 db 0D5h
.eh_frame_hdr:000000000001259A                 db 0FFh
.eh_frame_hdr:000000000001259B                 db 0FFh
.eh_frame_hdr:000000000001259C                 db  84h
.eh_frame_hdr:000000000001259D                 db  18h
.eh_frame_hdr:000000000001259E                 db    0
.eh_frame_hdr:000000000001259F                 db    0
.eh_frame_hdr:000000000001259F _eh_frame_hdr   ends
.eh_frame_hdr:000000000001259F
.eh_frame:00000000000125A0 ; ===========================================================================
.eh_frame:00000000000125A0
.eh_frame:00000000000125A0 ; Segment type: Pure data
.eh_frame:00000000000125A0 ; Segment permissions: Read
.eh_frame:00000000000125A0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000125A0                 assume cs:_eh_frame
.eh_frame:00000000000125A0                 ;org 125A0h
.eh_frame:00000000000125A0                 db  14h
.eh_frame:00000000000125A1                 db    0
.eh_frame:00000000000125A2                 db    0
.eh_frame:00000000000125A3                 db    0
.eh_frame:00000000000125A4                 db    0
.eh_frame:00000000000125A5                 db    0
.eh_frame:00000000000125A6                 db    0
.eh_frame:00000000000125A7                 db    0
.eh_frame:00000000000125A8                 db    1
.eh_frame:00000000000125A9                 db  7Ah ; z
.eh_frame:00000000000125AA                 db  52h ; R
.eh_frame:00000000000125AB                 db    0
.eh_frame:00000000000125AC                 db    1
.eh_frame:00000000000125AD                 db  78h ; x
.eh_frame:00000000000125AE                 db  10h
.eh_frame:00000000000125AF                 db    1
.eh_frame:00000000000125B0                 db  1Bh
.eh_frame:00000000000125B1                 db  0Ch
.eh_frame:00000000000125B2                 db    7
.eh_frame:00000000000125B3                 db    8
.eh_frame:00000000000125B4                 db  90h
.eh_frame:00000000000125B5                 db    1
.eh_frame:00000000000125B6                 db    7
.eh_frame:00000000000125B7                 db  10h
.eh_frame:00000000000125B8                 db  14h
.eh_frame:00000000000125B9                 db    0
.eh_frame:00000000000125BA                 db    0
.eh_frame:00000000000125BB                 db    0
.eh_frame:00000000000125BC                 db  1Ch
.eh_frame:00000000000125BD                 db    0
.eh_frame:00000000000125BE                 db    0
.eh_frame:00000000000125BF                 db    0
.eh_frame:00000000000125C0                 db  70h ; p
.eh_frame:00000000000125C1                 db  0Fh
.eh_frame:00000000000125C2                 db 0FFh
.eh_frame:00000000000125C3                 db 0FFh
.eh_frame:00000000000125C4                 db  2Bh ; +
.eh_frame:00000000000125C5                 db    0
.eh_frame:00000000000125C6                 db    0
.eh_frame:00000000000125C7                 db    0
.eh_frame:00000000000125C8                 db    0
.eh_frame:00000000000125C9                 db    0
.eh_frame:00000000000125CA                 db    0
.eh_frame:00000000000125CB                 db    0
.eh_frame:00000000000125CC                 db    0
.eh_frame:00000000000125CD                 db    0
.eh_frame:00000000000125CE                 db    0
.eh_frame:00000000000125CF                 db    0
.eh_frame:00000000000125D0                 db  14h
.eh_frame:00000000000125D1                 db    0
.eh_frame:00000000000125D2                 db    0
.eh_frame:00000000000125D3                 db    0
.eh_frame:00000000000125D4                 db    0
.eh_frame:00000000000125D5                 db    0
.eh_frame:00000000000125D6                 db    0
.eh_frame:00000000000125D7                 db    0
.eh_frame:00000000000125D8                 db    1
.eh_frame:00000000000125D9                 db  7Ah ; z
.eh_frame:00000000000125DA                 db  52h ; R
.eh_frame:00000000000125DB                 db    0
.eh_frame:00000000000125DC                 db    1
.eh_frame:00000000000125DD                 db  78h ; x
.eh_frame:00000000000125DE                 db  10h
.eh_frame:00000000000125DF                 db    1
.eh_frame:00000000000125E0                 db  1Bh
.eh_frame:00000000000125E1                 db  0Ch
.eh_frame:00000000000125E2                 db    7
.eh_frame:00000000000125E3                 db    8
.eh_frame:00000000000125E4                 db  90h
.eh_frame:00000000000125E5                 db    1
.eh_frame:00000000000125E6                 db    0
.eh_frame:00000000000125E7                 db    0
.eh_frame:00000000000125E8                 db  24h ; $
.eh_frame:00000000000125E9                 db    0
.eh_frame:00000000000125EA                 db    0
.eh_frame:00000000000125EB                 db    0
.eh_frame:00000000000125EC                 db  1Ch
.eh_frame:00000000000125ED                 db    0
.eh_frame:00000000000125EE                 db    0
.eh_frame:00000000000125EF                 db    0
.eh_frame:00000000000125F0                 db 0E0h
.eh_frame:00000000000125F1                 db    0
.eh_frame:00000000000125F2                 db 0FFh
.eh_frame:00000000000125F3                 db 0FFh
.eh_frame:00000000000125F4                 db  80h
.eh_frame:00000000000125F5                 db    4
.eh_frame:00000000000125F6                 db    0
.eh_frame:00000000000125F7                 db    0
.eh_frame:00000000000125F8                 db    0
.eh_frame:00000000000125F9                 db  0Eh
.eh_frame:00000000000125FA                 db  10h
.eh_frame:00000000000125FB                 db  46h ; F
.eh_frame:00000000000125FC                 db  0Eh
.eh_frame:00000000000125FD                 db  18h
.eh_frame:00000000000125FE                 db  4Ah ; J
.eh_frame:00000000000125FF                 db  0Fh
.eh_frame:0000000000012600                 db  0Bh
.eh_frame:0000000000012601                 db  77h ; w
.eh_frame:0000000000012602                 db    8
.eh_frame:0000000000012603                 db  80h
.eh_frame:0000000000012604                 db    0
.eh_frame:0000000000012605                 db  3Fh ; ?
.eh_frame:0000000000012606                 db  1Ah
.eh_frame:0000000000012607                 db  3Bh ; ;
.eh_frame:0000000000012608                 db  2Ah ; *
.eh_frame:0000000000012609                 db  33h ; 3
.eh_frame:000000000001260A                 db  24h ; $
.eh_frame:000000000001260B                 db  22h ; "
.eh_frame:000000000001260C                 db    0
.eh_frame:000000000001260D                 db    0
.eh_frame:000000000001260E                 db    0
.eh_frame:000000000001260F                 db    0
.eh_frame:0000000000012610                 db  14h
.eh_frame:0000000000012611                 db    0
.eh_frame:0000000000012612                 db    0
.eh_frame:0000000000012613                 db    0
.eh_frame:0000000000012614                 db  44h ; D
.eh_frame:0000000000012615                 db    0
.eh_frame:0000000000012616                 db    0
.eh_frame:0000000000012617                 db    0
.eh_frame:0000000000012618                 db  38h ; 8
.eh_frame:0000000000012619                 db    5
.eh_frame:000000000001261A                 db 0FFh
.eh_frame:000000000001261B                 db 0FFh
.eh_frame:000000000001261C                 db    8
.eh_frame:000000000001261D                 db    0
.eh_frame:000000000001261E                 db    0
.eh_frame:000000000001261F                 db    0
.eh_frame:0000000000012620                 db    0
.eh_frame:0000000000012621                 db    0
.eh_frame:0000000000012622                 db    0
.eh_frame:0000000000012623                 db    0
.eh_frame:0000000000012624                 db    0
.eh_frame:0000000000012625                 db    0
.eh_frame:0000000000012626                 db    0
.eh_frame:0000000000012627                 db    0
.eh_frame:0000000000012628                 db  18h
.eh_frame:0000000000012629                 db    0
.eh_frame:000000000001262A                 db    0
.eh_frame:000000000001262B                 db    0
.eh_frame:000000000001262C                 db  5Ch ; \
.eh_frame:000000000001262D                 db    0
.eh_frame:000000000001262E                 db    0
.eh_frame:000000000001262F                 db    0
.eh_frame:0000000000012630                 db  10h
.eh_frame:0000000000012631                 db  10h
.eh_frame:0000000000012632                 db 0FFh
.eh_frame:0000000000012633                 db 0FFh
.eh_frame:0000000000012634                 db  41h ; A
.eh_frame:0000000000012635                 db    0
.eh_frame:0000000000012636                 db    0
.eh_frame:0000000000012637                 db    0
.eh_frame:0000000000012638                 db    0
.eh_frame:0000000000012639                 db  41h ; A
.eh_frame:000000000001263A                 db  0Eh
.eh_frame:000000000001263B                 db  10h
.eh_frame:000000000001263C                 db  83h
.eh_frame:000000000001263D                 db    2
.eh_frame:000000000001263E                 db  4Dh ; M
.eh_frame:000000000001263F                 db  0Ah
.eh_frame:0000000000012640                 db  0Eh
.eh_frame:0000000000012641                 db    8
.eh_frame:0000000000012642                 db  41h ; A
.eh_frame:0000000000012643                 db  0Bh
.eh_frame:0000000000012644                 db  28h ; (
.eh_frame:0000000000012645                 db    0
.eh_frame:0000000000012646                 db    0
.eh_frame:0000000000012647                 db    0
.eh_frame:0000000000012648                 db  78h ; x
.eh_frame:0000000000012649                 db    0
.eh_frame:000000000001264A                 db    0
.eh_frame:000000000001264B                 db    0
.eh_frame:000000000001264C                 db  44h ; D
.eh_frame:000000000001264D                 db  10h
.eh_frame:000000000001264E                 db 0FFh
.eh_frame:000000000001264F                 db 0FFh
.eh_frame:0000000000012650                 db 0FAh
.eh_frame:0000000000012651                 db    3
.eh_frame:0000000000012652                 db    0
.eh_frame:0000000000012653                 db    0
.eh_frame:0000000000012654                 db    0
.eh_frame:0000000000012655                 db  42h ; B
.eh_frame:0000000000012656                 db  0Eh
.eh_frame:0000000000012657                 db  10h
.eh_frame:0000000000012658                 db  8Dh
.eh_frame:0000000000012659                 db    2
.eh_frame:000000000001265A                 db  42h ; B
.eh_frame:000000000001265B                 db  0Eh
.eh_frame:000000000001265C                 db  18h
.eh_frame:000000000001265D                 db  8Ch
.eh_frame:000000000001265E                 db    3
.eh_frame:000000000001265F                 db  46h ; F
.eh_frame:0000000000012660                 db  0Eh
.eh_frame:0000000000012661                 db  20h
.eh_frame:0000000000012662                 db  86h
.eh_frame:0000000000012663                 db    4
.eh_frame:0000000000012664                 db  41h ; A
.eh_frame:0000000000012665                 db  0Eh
.eh_frame:0000000000012666                 db  28h ; (
.eh_frame:0000000000012667                 db  83h
.eh_frame:0000000000012668                 db    5
.eh_frame:0000000000012669                 db  49h ; I
.eh_frame:000000000001266A                 db  0Eh
.eh_frame:000000000001266B                 db 0B0h
.eh_frame:000000000001266C                 db    1
.eh_frame:000000000001266D                 db    0
.eh_frame:000000000001266E                 db    0
.eh_frame:000000000001266F                 db    0
.eh_frame:0000000000012670                 db  7Ch ; |
.eh_frame:0000000000012671                 db    0
.eh_frame:0000000000012672                 db    0
.eh_frame:0000000000012673                 db    0
.eh_frame:0000000000012674                 db 0A4h
.eh_frame:0000000000012675                 db    0
.eh_frame:0000000000012676                 db    0
.eh_frame:0000000000012677                 db    0
.eh_frame:0000000000012678                 db  48h ; H
.eh_frame:0000000000012679                 db    5
.eh_frame:000000000001267A                 db 0FFh
.eh_frame:000000000001267B                 db 0FFh
.eh_frame:000000000001267C                 db  67h ; g
.eh_frame:000000000001267D                 db    9
.eh_frame:000000000001267E                 db    0
.eh_frame:000000000001267F                 db    0
.eh_frame:0000000000012680                 db    0
.eh_frame:0000000000012681                 db  42h ; B
.eh_frame:0000000000012682                 db  0Eh
.eh_frame:0000000000012683                 db  10h
.eh_frame:0000000000012684                 db  8Fh
.eh_frame:0000000000012685                 db    2
.eh_frame:0000000000012686                 db  42h ; B
.eh_frame:0000000000012687                 db  0Eh
.eh_frame:0000000000012688                 db  18h
.eh_frame:0000000000012689                 db  8Eh
.eh_frame:000000000001268A                 db    3
.eh_frame:000000000001268B                 db  45h ; E
.eh_frame:000000000001268C                 db  0Eh
.eh_frame:000000000001268D                 db  20h
.eh_frame:000000000001268E                 db  8Dh
.eh_frame:000000000001268F                 db    4
.eh_frame:0000000000012690                 db  42h ; B
.eh_frame:0000000000012691                 db  0Eh
.eh_frame:0000000000012692                 db  28h ; (
.eh_frame:0000000000012693                 db  8Ch
.eh_frame:0000000000012694                 db    5
.eh_frame:0000000000012695                 db  44h ; D
.eh_frame:0000000000012696                 db  0Eh
.eh_frame:0000000000012697                 db  30h ; 0
.eh_frame:0000000000012698                 db  86h
.eh_frame:0000000000012699                 db    6
.eh_frame:000000000001269A                 db  41h ; A
.eh_frame:000000000001269B                 db  0Eh
.eh_frame:000000000001269C                 db  38h ; 8
.eh_frame:000000000001269D                 db  83h
.eh_frame:000000000001269E                 db    7
.eh_frame:000000000001269F                 db  54h ; T
.eh_frame:00000000000126A0                 db  0Eh
.eh_frame:00000000000126A1                 db 0B0h
.eh_frame:00000000000126A2                 db    2
.eh_frame:00000000000126A3                 db    3
.eh_frame:00000000000126A4                 db  69h ; i
.eh_frame:00000000000126A5                 db    1
.eh_frame:00000000000126A6                 db  0Eh
.eh_frame:00000000000126A7                 db 0B8h
.eh_frame:00000000000126A8                 db    2
.eh_frame:00000000000126A9                 db  5Dh ; ]
.eh_frame:00000000000126AA                 db  0Eh
.eh_frame:00000000000126AB                 db 0C0h
.eh_frame:00000000000126AC                 db    2
.eh_frame:00000000000126AD                 db  56h ; V
.eh_frame:00000000000126AE                 db  0Eh
.eh_frame:00000000000126AF                 db 0C8h
.eh_frame:00000000000126B0                 db    2
.eh_frame:00000000000126B1                 db  48h ; H
.eh_frame:00000000000126B2                 db  0Eh
.eh_frame:00000000000126B3                 db 0D0h
.eh_frame:00000000000126B4                 db    2
.eh_frame:00000000000126B5                 db  4Bh ; K
.eh_frame:00000000000126B6                 db  0Eh
.eh_frame:00000000000126B7                 db 0B0h
.eh_frame:00000000000126B8                 db    2
.eh_frame:00000000000126B9                 db    3
.eh_frame:00000000000126BA                 db  14h
.eh_frame:00000000000126BB                 db    4
.eh_frame:00000000000126BC                 db  0Ah
.eh_frame:00000000000126BD                 db  0Eh
.eh_frame:00000000000126BE                 db  38h ; 8
.eh_frame:00000000000126BF                 db  41h ; A
.eh_frame:00000000000126C0                 db  0Eh
.eh_frame:00000000000126C1                 db  30h ; 0
.eh_frame:00000000000126C2                 db  41h ; A
.eh_frame:00000000000126C3                 db  0Eh
.eh_frame:00000000000126C4                 db  28h ; (
.eh_frame:00000000000126C5                 db  42h ; B
.eh_frame:00000000000126C6                 db  0Eh
.eh_frame:00000000000126C7                 db  20h
.eh_frame:00000000000126C8                 db  42h ; B
.eh_frame:00000000000126C9                 db  0Eh
.eh_frame:00000000000126CA                 db  18h
.eh_frame:00000000000126CB                 db  42h ; B
.eh_frame:00000000000126CC                 db  0Eh
.eh_frame:00000000000126CD                 db  10h
.eh_frame:00000000000126CE                 db  42h ; B
.eh_frame:00000000000126CF                 db  0Eh
.eh_frame:00000000000126D0                 db    8
.eh_frame:00000000000126D1                 db  41h ; A
.eh_frame:00000000000126D2                 db  0Bh
.eh_frame:00000000000126D3                 db    3
.eh_frame:00000000000126D4                 db    2
.eh_frame:00000000000126D5                 db    3
.eh_frame:00000000000126D6                 db  0Eh
.eh_frame:00000000000126D7                 db 0B8h
.eh_frame:00000000000126D8                 db    2
.eh_frame:00000000000126D9                 db  47h ; G
.eh_frame:00000000000126DA                 db  0Eh
.eh_frame:00000000000126DB                 db 0C0h
.eh_frame:00000000000126DC                 db    2
.eh_frame:00000000000126DD                 db  42h ; B
.eh_frame:00000000000126DE                 db  0Eh
.eh_frame:00000000000126DF                 db 0C8h
.eh_frame:00000000000126E0                 db    2
.eh_frame:00000000000126E1                 db  42h ; B
.eh_frame:00000000000126E2                 db  0Eh
.eh_frame:00000000000126E3                 db 0D0h
.eh_frame:00000000000126E4                 db    2
.eh_frame:00000000000126E5                 db  53h ; S
.eh_frame:00000000000126E6                 db  0Eh
.eh_frame:00000000000126E7                 db 0B0h
.eh_frame:00000000000126E8                 db    2
.eh_frame:00000000000126E9                 db    0
.eh_frame:00000000000126EA                 db    0
.eh_frame:00000000000126EB                 db    0
.eh_frame:00000000000126EC                 db    0
.eh_frame:00000000000126ED                 db    0
.eh_frame:00000000000126EE                 db    0
.eh_frame:00000000000126EF                 db    0
.eh_frame:00000000000126F0                 db  10h
.eh_frame:00000000000126F1                 db    0
.eh_frame:00000000000126F2                 db    0
.eh_frame:00000000000126F3                 db    0
.eh_frame:00000000000126F4                 db  24h ; $
.eh_frame:00000000000126F5                 db    1
.eh_frame:00000000000126F6                 db    0
.eh_frame:00000000000126F7                 db    0
.eh_frame:00000000000126F8                 db  98h
.eh_frame:00000000000126F9                 db  13h
.eh_frame:00000000000126FA                 db 0FFh
.eh_frame:00000000000126FB                 db 0FFh
.eh_frame:00000000000126FC                 db  0Ah
.eh_frame:00000000000126FD                 db    0
.eh_frame:00000000000126FE                 db    0
.eh_frame:00000000000126FF                 db    0
.eh_frame:0000000000012700                 db    0
.eh_frame:0000000000012701                 db    0
.eh_frame:0000000000012702                 db    0
.eh_frame:0000000000012703                 db    0
.eh_frame:0000000000012704                 db  48h ; H
.eh_frame:0000000000012705                 db    0
.eh_frame:0000000000012706                 db    0
.eh_frame:0000000000012707                 db    0
.eh_frame:0000000000012708                 db  38h ; 8
.eh_frame:0000000000012709                 db    1
.eh_frame:000000000001270A                 db    0
.eh_frame:000000000001270B                 db    0
.eh_frame:000000000001270C                 db  94h
.eh_frame:000000000001270D                 db  13h
.eh_frame:000000000001270E                 db 0FFh
.eh_frame:000000000001270F                 db 0FFh
.eh_frame:0000000000012710                 db  16h
.eh_frame:0000000000012711                 db    1
.eh_frame:0000000000012712                 db    0
.eh_frame:0000000000012713                 db    0
.eh_frame:0000000000012714                 db    0
.eh_frame:0000000000012715                 db  42h ; B
.eh_frame:0000000000012716                 db  0Eh
.eh_frame:0000000000012717                 db  10h
.eh_frame:0000000000012718                 db  8Fh
.eh_frame:0000000000012719                 db    2
.eh_frame:000000000001271A                 db  42h ; B
.eh_frame:000000000001271B                 db  0Eh
.eh_frame:000000000001271C                 db  18h
.eh_frame:000000000001271D                 db  8Eh
.eh_frame:000000000001271E                 db    3
.eh_frame:000000000001271F                 db  45h ; E
.eh_frame:0000000000012720                 db  0Eh
.eh_frame:0000000000012721                 db  20h
.eh_frame:0000000000012722                 db  8Dh
.eh_frame:0000000000012723                 db    4
.eh_frame:0000000000012724                 db  42h ; B
.eh_frame:0000000000012725                 db  0Eh
.eh_frame:0000000000012726                 db  28h ; (
.eh_frame:0000000000012727                 db  8Ch
.eh_frame:0000000000012728                 db    5
.eh_frame:0000000000012729                 db  44h ; D
.eh_frame:000000000001272A                 db  0Eh
.eh_frame:000000000001272B                 db  30h ; 0
.eh_frame:000000000001272C                 db  86h
.eh_frame:000000000001272D                 db    6
.eh_frame:000000000001272E                 db  41h ; A
.eh_frame:000000000001272F                 db  0Eh
.eh_frame:0000000000012730                 db  38h ; 8
.eh_frame:0000000000012731                 db  83h
.eh_frame:0000000000012732                 db    7
.eh_frame:0000000000012733                 db  47h ; G
.eh_frame:0000000000012734                 db  0Eh
.eh_frame:0000000000012735                 db  60h ; `
.eh_frame:0000000000012736                 db    2
.eh_frame:0000000000012737                 db 0DEh
.eh_frame:0000000000012738                 db  0Ah
.eh_frame:0000000000012739                 db  0Eh
.eh_frame:000000000001273A                 db  38h ; 8
.eh_frame:000000000001273B                 db  41h ; A
.eh_frame:000000000001273C                 db  0Eh
.eh_frame:000000000001273D                 db  30h ; 0
.eh_frame:000000000001273E                 db  41h ; A
.eh_frame:000000000001273F                 db  0Eh
.eh_frame:0000000000012740                 db  28h ; (
.eh_frame:0000000000012741                 db  42h ; B
.eh_frame:0000000000012742                 db  0Eh
.eh_frame:0000000000012743                 db  20h
.eh_frame:0000000000012744                 db  42h ; B
.eh_frame:0000000000012745                 db  0Eh
.eh_frame:0000000000012746                 db  18h
.eh_frame:0000000000012747                 db  42h ; B
.eh_frame:0000000000012748                 db  0Eh
.eh_frame:0000000000012749                 db  10h
.eh_frame:000000000001274A                 db  42h ; B
.eh_frame:000000000001274B                 db  0Eh
.eh_frame:000000000001274C                 db    8
.eh_frame:000000000001274D                 db  41h ; A
.eh_frame:000000000001274E                 db  0Bh
.eh_frame:000000000001274F                 db    0
.eh_frame:0000000000012750                 db  28h ; (
.eh_frame:0000000000012751                 db    0
.eh_frame:0000000000012752                 db    0
.eh_frame:0000000000012753                 db    0
.eh_frame:0000000000012754                 db  84h
.eh_frame:0000000000012755                 db    1
.eh_frame:0000000000012756                 db    0
.eh_frame:0000000000012757                 db    0
.eh_frame:0000000000012758                 db  68h ; h
.eh_frame:0000000000012759                 db  14h
.eh_frame:000000000001275A                 db 0FFh
.eh_frame:000000000001275B                 db 0FFh
.eh_frame:000000000001275C                 db  73h ; s
.eh_frame:000000000001275D                 db    0
.eh_frame:000000000001275E                 db    0
.eh_frame:000000000001275F                 db    0
.eh_frame:0000000000012760                 db    0
.eh_frame:0000000000012761                 db  46h ; F
.eh_frame:0000000000012762                 db  0Eh
.eh_frame:0000000000012763                 db  10h
.eh_frame:0000000000012764                 db  8Ch
.eh_frame:0000000000012765                 db    2
.eh_frame:0000000000012766                 db  46h ; F
.eh_frame:0000000000012767                 db  0Eh
.eh_frame:0000000000012768                 db  18h
.eh_frame:0000000000012769                 db  86h
.eh_frame:000000000001276A                 db    3
.eh_frame:000000000001276B                 db  44h ; D
.eh_frame:000000000001276C                 db  0Eh
.eh_frame:000000000001276D                 db  20h
.eh_frame:000000000001276E                 db  83h
.eh_frame:000000000001276F                 db    4
.eh_frame:0000000000012770                 db  7Fh ; 
.eh_frame:0000000000012771                 db  0Ah
.eh_frame:0000000000012772                 db  0Eh
.eh_frame:0000000000012773                 db  18h
.eh_frame:0000000000012774                 db  41h ; A
.eh_frame:0000000000012775                 db  0Eh
.eh_frame:0000000000012776                 db  10h
.eh_frame:0000000000012777                 db  42h ; B
.eh_frame:0000000000012778                 db  0Eh
.eh_frame:0000000000012779                 db    8
.eh_frame:000000000001277A                 db  4Eh ; N
.eh_frame:000000000001277B                 db  0Bh
.eh_frame:000000000001277C                 db  5Ch ; \
.eh_frame:000000000001277D                 db    0
.eh_frame:000000000001277E                 db    0
.eh_frame:000000000001277F                 db    0
.eh_frame:0000000000012780                 db 0B0h
.eh_frame:0000000000012781                 db    1
.eh_frame:0000000000012782                 db    0
.eh_frame:0000000000012783                 db    0
.eh_frame:0000000000012784                 db 0BCh
.eh_frame:0000000000012785                 db  14h
.eh_frame:0000000000012786                 db 0FFh
.eh_frame:0000000000012787                 db 0FFh
.eh_frame:0000000000012788                 db  20h
.eh_frame:0000000000012789                 db    1
.eh_frame:000000000001278A                 db    0
.eh_frame:000000000001278B                 db    0
.eh_frame:000000000001278C                 db    0
.eh_frame:000000000001278D                 db  42h ; B
.eh_frame:000000000001278E                 db  0Eh
.eh_frame:000000000001278F                 db  10h
.eh_frame:0000000000012790                 db  8Fh
.eh_frame:0000000000012791                 db    2
.eh_frame:0000000000012792                 db  42h ; B
.eh_frame:0000000000012793                 db  0Eh
.eh_frame:0000000000012794                 db  18h
.eh_frame:0000000000012795                 db  8Eh
.eh_frame:0000000000012796                 db    3
.eh_frame:0000000000012797                 db  45h ; E
.eh_frame:0000000000012798                 db  0Eh
.eh_frame:0000000000012799                 db  20h
.eh_frame:000000000001279A                 db  8Dh
.eh_frame:000000000001279B                 db    4
.eh_frame:000000000001279C                 db  42h ; B
.eh_frame:000000000001279D                 db  0Eh
.eh_frame:000000000001279E                 db  28h ; (
.eh_frame:000000000001279F                 db  8Ch
.eh_frame:00000000000127A0                 db    5
.eh_frame:00000000000127A1                 db  43h ; C
.eh_frame:00000000000127A2                 db  0Eh
.eh_frame:00000000000127A3                 db  30h ; 0
.eh_frame:00000000000127A4                 db  86h
.eh_frame:00000000000127A5                 db    6
.eh_frame:00000000000127A6                 db  41h ; A
.eh_frame:00000000000127A7                 db  0Eh
.eh_frame:00000000000127A8                 db  38h ; 8
.eh_frame:00000000000127A9                 db  83h
.eh_frame:00000000000127AA                 db    7
.eh_frame:00000000000127AB                 db  56h ; V
.eh_frame:00000000000127AC                 db  0Eh
.eh_frame:00000000000127AD                 db  40h ; @
.eh_frame:00000000000127AE                 db    2
.eh_frame:00000000000127AF                 db 0D3h
.eh_frame:00000000000127B0                 db  0Ah
.eh_frame:00000000000127B1                 db  0Eh
.eh_frame:00000000000127B2                 db  38h ; 8
.eh_frame:00000000000127B3                 db  41h ; A
.eh_frame:00000000000127B4                 db  0Eh
.eh_frame:00000000000127B5                 db  30h ; 0
.eh_frame:00000000000127B6                 db  41h ; A
.eh_frame:00000000000127B7                 db  0Eh
.eh_frame:00000000000127B8                 db  28h ; (
.eh_frame:00000000000127B9                 db  42h ; B
.eh_frame:00000000000127BA                 db  0Eh
.eh_frame:00000000000127BB                 db  20h
.eh_frame:00000000000127BC                 db  42h ; B
.eh_frame:00000000000127BD                 db  0Eh
.eh_frame:00000000000127BE                 db  18h
.eh_frame:00000000000127BF                 db  42h ; B
.eh_frame:00000000000127C0                 db  0Eh
.eh_frame:00000000000127C1                 db  10h
.eh_frame:00000000000127C2                 db  42h ; B
.eh_frame:00000000000127C3                 db  0Eh
.eh_frame:00000000000127C4                 db    8
.eh_frame:00000000000127C5                 db  46h ; F
.eh_frame:00000000000127C6                 db  0Bh
.eh_frame:00000000000127C7                 db  44h ; D
.eh_frame:00000000000127C8                 db  0Eh
.eh_frame:00000000000127C9                 db  38h ; 8
.eh_frame:00000000000127CA                 db  46h ; F
.eh_frame:00000000000127CB                 db  0Eh
.eh_frame:00000000000127CC                 db  30h ; 0
.eh_frame:00000000000127CD                 db  41h ; A
.eh_frame:00000000000127CE                 db  0Eh
.eh_frame:00000000000127CF                 db  28h ; (
.eh_frame:00000000000127D0                 db  42h ; B
.eh_frame:00000000000127D1                 db  0Eh
.eh_frame:00000000000127D2                 db  20h
.eh_frame:00000000000127D3                 db  42h ; B
.eh_frame:00000000000127D4                 db  0Eh
.eh_frame:00000000000127D5                 db  18h
.eh_frame:00000000000127D6                 db  42h ; B
.eh_frame:00000000000127D7                 db  0Eh
.eh_frame:00000000000127D8                 db  10h
.eh_frame:00000000000127D9                 db  42h ; B
.eh_frame:00000000000127DA                 db  0Eh
.eh_frame:00000000000127DB                 db    8
.eh_frame:00000000000127DC                 db  48h ; H
.eh_frame:00000000000127DD                 db    0
.eh_frame:00000000000127DE                 db    0
.eh_frame:00000000000127DF                 db    0
.eh_frame:00000000000127E0                 db  10h
.eh_frame:00000000000127E1                 db    2
.eh_frame:00000000000127E2                 db    0
.eh_frame:00000000000127E3                 db    0
.eh_frame:00000000000127E4                 db  7Ch ; |
.eh_frame:00000000000127E5                 db  15h
.eh_frame:00000000000127E6                 db 0FFh
.eh_frame:00000000000127E7                 db 0FFh
.eh_frame:00000000000127E8                 db  6Dh ; m
.eh_frame:00000000000127E9                 db    0
.eh_frame:00000000000127EA                 db    0
.eh_frame:00000000000127EB                 db    0
.eh_frame:00000000000127EC                 db    0
.eh_frame:00000000000127ED                 db  42h ; B
.eh_frame:00000000000127EE                 db  0Eh
.eh_frame:00000000000127EF                 db  10h
.eh_frame:00000000000127F0                 db  8Fh
.eh_frame:00000000000127F1                 db    2
.eh_frame:00000000000127F2                 db  42h ; B
.eh_frame:00000000000127F3                 db  0Eh
.eh_frame:00000000000127F4                 db  18h
.eh_frame:00000000000127F5                 db  8Eh
.eh_frame:00000000000127F6                 db    3
.eh_frame:00000000000127F7                 db  45h ; E
.eh_frame:00000000000127F8                 db  0Eh
.eh_frame:00000000000127F9                 db  20h
.eh_frame:00000000000127FA                 db  8Dh
.eh_frame:00000000000127FB                 db    4
.eh_frame:00000000000127FC                 db  42h ; B
.eh_frame:00000000000127FD                 db  0Eh
.eh_frame:00000000000127FE                 db  28h ; (
.eh_frame:00000000000127FF                 db  8Ch
.eh_frame:0000000000012800                 db    5
.eh_frame:0000000000012801                 db  44h ; D
.eh_frame:0000000000012802                 db  0Eh
.eh_frame:0000000000012803                 db  30h ; 0
.eh_frame:0000000000012804                 db  86h
.eh_frame:0000000000012805                 db    6
.eh_frame:0000000000012806                 db  41h ; A
.eh_frame:0000000000012807                 db  0Eh
.eh_frame:0000000000012808                 db  38h ; 8
.eh_frame:0000000000012809                 db  83h
.eh_frame:000000000001280A                 db    7
.eh_frame:000000000001280B                 db  50h ; P
.eh_frame:000000000001280C                 db  0Eh
.eh_frame:000000000001280D                 db  40h ; @
.eh_frame:000000000001280E                 db  5Ah ; Z
.eh_frame:000000000001280F                 db  0Ah
.eh_frame:0000000000012810                 db  0Eh
.eh_frame:0000000000012811                 db  38h ; 8
.eh_frame:0000000000012812                 db  41h ; A
.eh_frame:0000000000012813                 db  0Eh
.eh_frame:0000000000012814                 db  30h ; 0
.eh_frame:0000000000012815                 db  41h ; A
.eh_frame:0000000000012816                 db  0Eh
.eh_frame:0000000000012817                 db  28h ; (
.eh_frame:0000000000012818                 db  42h ; B
.eh_frame:0000000000012819                 db  0Eh
.eh_frame:000000000001281A                 db  20h
.eh_frame:000000000001281B                 db  42h ; B
.eh_frame:000000000001281C                 db  0Eh
.eh_frame:000000000001281D                 db  18h
.eh_frame:000000000001281E                 db  42h ; B
.eh_frame:000000000001281F                 db  0Eh
.eh_frame:0000000000012820                 db  10h
.eh_frame:0000000000012821                 db  42h ; B
.eh_frame:0000000000012822                 db  0Eh
.eh_frame:0000000000012823                 db    8
.eh_frame:0000000000012824                 db  41h ; A
.eh_frame:0000000000012825                 db  0Bh
.eh_frame:0000000000012826                 db    0
.eh_frame:0000000000012827                 db    0
.eh_frame:0000000000012828                 db  3Ch ; <
.eh_frame:0000000000012829                 db    0
.eh_frame:000000000001282A                 db    0
.eh_frame:000000000001282B                 db    0
.eh_frame:000000000001282C                 db  5Ch ; \
.eh_frame:000000000001282D                 db    2
.eh_frame:000000000001282E                 db    0
.eh_frame:000000000001282F                 db    0
.eh_frame:0000000000012830                 db 0A0h
.eh_frame:0000000000012831                 db  15h
.eh_frame:0000000000012832                 db 0FFh
.eh_frame:0000000000012833                 db 0FFh
.eh_frame:0000000000012834                 db  4Dh ; M
.eh_frame:0000000000012835                 db    0
.eh_frame:0000000000012836                 db    0
.eh_frame:0000000000012837                 db    0
.eh_frame:0000000000012838                 db    0
.eh_frame:0000000000012839                 db  42h ; B
.eh_frame:000000000001283A                 db  0Eh
.eh_frame:000000000001283B                 db  10h
.eh_frame:000000000001283C                 db  8Eh
.eh_frame:000000000001283D                 db    2
.eh_frame:000000000001283E                 db  42h ; B
.eh_frame:000000000001283F                 db  0Eh
.eh_frame:0000000000012840                 db  18h
.eh_frame:0000000000012841                 db  8Dh
.eh_frame:0000000000012842                 db    3
.eh_frame:0000000000012843                 db  42h ; B
.eh_frame:0000000000012844                 db  0Eh
.eh_frame:0000000000012845                 db  20h
.eh_frame:0000000000012846                 db  8Ch
.eh_frame:0000000000012847                 db    4
.eh_frame:0000000000012848                 db  41h ; A
.eh_frame:0000000000012849                 db  0Eh
.eh_frame:000000000001284A                 db  28h ; (
.eh_frame:000000000001284B                 db  86h
.eh_frame:000000000001284C                 db    5
.eh_frame:000000000001284D                 db  41h ; A
.eh_frame:000000000001284E                 db  0Eh
.eh_frame:000000000001284F                 db  30h ; 0
.eh_frame:0000000000012850                 db  83h
.eh_frame:0000000000012851                 db    6
.eh_frame:0000000000012852                 db  7Ah ; z
.eh_frame:0000000000012853                 db  0Eh
.eh_frame:0000000000012854                 db  28h ; (
.eh_frame:0000000000012855                 db  44h ; D
.eh_frame:0000000000012856                 db  0Eh
.eh_frame:0000000000012857                 db  20h
.eh_frame:0000000000012858                 db  42h ; B
.eh_frame:0000000000012859                 db  0Eh
.eh_frame:000000000001285A                 db  18h
.eh_frame:000000000001285B                 db  42h ; B
.eh_frame:000000000001285C                 db  0Eh
.eh_frame:000000000001285D                 db  10h
.eh_frame:000000000001285E                 db  42h ; B
.eh_frame:000000000001285F                 db  0Eh
.eh_frame:0000000000012860                 db    8
.eh_frame:0000000000012861                 db    0
.eh_frame:0000000000012862                 db    0
.eh_frame:0000000000012863                 db    0
.eh_frame:0000000000012864                 db    0
.eh_frame:0000000000012865                 db    0
.eh_frame:0000000000012866                 db    0
.eh_frame:0000000000012867                 db    0
.eh_frame:0000000000012868                 db  10h
.eh_frame:0000000000012869                 db    0
.eh_frame:000000000001286A                 db    0
.eh_frame:000000000001286B                 db    0
.eh_frame:000000000001286C                 db  9Ch
.eh_frame:000000000001286D                 db    2
.eh_frame:000000000001286E                 db    0
.eh_frame:000000000001286F                 db    0
.eh_frame:0000000000012870                 db 0B0h
.eh_frame:0000000000012871                 db  15h
.eh_frame:0000000000012872                 db 0FFh
.eh_frame:0000000000012873                 db 0FFh
.eh_frame:0000000000012874                 db    8
.eh_frame:0000000000012875                 db    0
.eh_frame:0000000000012876                 db    0
.eh_frame:0000000000012877                 db    0
.eh_frame:0000000000012878                 db    0
.eh_frame:0000000000012879                 db    0
.eh_frame:000000000001287A                 db    0
.eh_frame:000000000001287B                 db    0
.eh_frame:000000000001287C                 db  10h
.eh_frame:000000000001287D                 db    0
.eh_frame:000000000001287E                 db    0
.eh_frame:000000000001287F                 db    0
.eh_frame:0000000000012880                 db 0B0h
.eh_frame:0000000000012881                 db    2
.eh_frame:0000000000012882                 db    0
.eh_frame:0000000000012883                 db    0
.eh_frame:0000000000012884                 db 0ACh
.eh_frame:0000000000012885                 db  15h
.eh_frame:0000000000012886                 db 0FFh
.eh_frame:0000000000012887                 db 0FFh
.eh_frame:0000000000012888                 db    8
.eh_frame:0000000000012889                 db    0
.eh_frame:000000000001288A                 db    0
.eh_frame:000000000001288B                 db    0
.eh_frame:000000000001288C                 db    0
.eh_frame:000000000001288D                 db    0
.eh_frame:000000000001288E                 db    0
.eh_frame:000000000001288F                 db    0
.eh_frame:0000000000012890                 db  2Ch ; ,
.eh_frame:0000000000012891                 db    0
.eh_frame:0000000000012892                 db    0
.eh_frame:0000000000012893                 db    0
.eh_frame:0000000000012894                 db 0C4h
.eh_frame:0000000000012895                 db    2
.eh_frame:0000000000012896                 db    0
.eh_frame:0000000000012897                 db    0
.eh_frame:0000000000012898                 db 0A8h
.eh_frame:0000000000012899                 db  15h
.eh_frame:000000000001289A                 db 0FFh
.eh_frame:000000000001289B                 db 0FFh
.eh_frame:000000000001289C                 db 0A4h
.eh_frame:000000000001289D                 db    0
.eh_frame:000000000001289E                 db    0
.eh_frame:000000000001289F                 db    0
.eh_frame:00000000000128A0                 db    0
.eh_frame:00000000000128A1                 db  41h ; A
.eh_frame:00000000000128A2                 db  0Eh
.eh_frame:00000000000128A3                 db  10h
.eh_frame:00000000000128A4                 db  86h
.eh_frame:00000000000128A5                 db    2
.eh_frame:00000000000128A6                 db  41h ; A
.eh_frame:00000000000128A7                 db  0Eh
.eh_frame:00000000000128A8                 db  18h
.eh_frame:00000000000128A9                 db  83h
.eh_frame:00000000000128AA                 db    3
.eh_frame:00000000000128AB                 db  44h ; D
.eh_frame:00000000000128AC                 db  0Eh
.eh_frame:00000000000128AD                 db  20h
.eh_frame:00000000000128AE                 db  7Ah ; z
.eh_frame:00000000000128AF                 db  0Ah
.eh_frame:00000000000128B0                 db  0Eh
.eh_frame:00000000000128B1                 db  18h
.eh_frame:00000000000128B2                 db  41h ; A
.eh_frame:00000000000128B3                 db  0Eh
.eh_frame:00000000000128B4                 db  10h
.eh_frame:00000000000128B5                 db  41h ; A
.eh_frame:00000000000128B6                 db  0Eh
.eh_frame:00000000000128B7                 db    8
.eh_frame:00000000000128B8                 db  41h ; A
.eh_frame:00000000000128B9                 db  0Bh
.eh_frame:00000000000128BA                 db    0
.eh_frame:00000000000128BB                 db    0
.eh_frame:00000000000128BC                 db    0
.eh_frame:00000000000128BD                 db    0
.eh_frame:00000000000128BE                 db    0
.eh_frame:00000000000128BF                 db    0
.eh_frame:00000000000128C0                 db  34h ; 4
.eh_frame:00000000000128C1                 db    0
.eh_frame:00000000000128C2                 db    0
.eh_frame:00000000000128C3                 db    0
.eh_frame:00000000000128C4                 db 0F4h
.eh_frame:00000000000128C5                 db    2
.eh_frame:00000000000128C6                 db    0
.eh_frame:00000000000128C7                 db    0
.eh_frame:00000000000128C8                 db  28h ; (
.eh_frame:00000000000128C9                 db  16h
.eh_frame:00000000000128CA                 db 0FFh
.eh_frame:00000000000128CB                 db 0FFh
.eh_frame:00000000000128CC                 db  56h ; V
.eh_frame:00000000000128CD                 db    0
.eh_frame:00000000000128CE                 db    0
.eh_frame:00000000000128CF                 db    0
.eh_frame:00000000000128D0                 db    0
.eh_frame:00000000000128D1                 db  42h ; B
.eh_frame:00000000000128D2                 db  0Eh
.eh_frame:00000000000128D3                 db  10h
.eh_frame:00000000000128D4                 db  8Dh
.eh_frame:00000000000128D5                 db    2
.eh_frame:00000000000128D6                 db  42h ; B
.eh_frame:00000000000128D7                 db  0Eh
.eh_frame:00000000000128D8                 db  18h
.eh_frame:00000000000128D9                 db  8Ch
.eh_frame:00000000000128DA                 db    3
.eh_frame:00000000000128DB                 db  43h ; C
.eh_frame:00000000000128DC                 db  0Eh
.eh_frame:00000000000128DD                 db  20h
.eh_frame:00000000000128DE                 db  86h
.eh_frame:00000000000128DF                 db    4
.eh_frame:00000000000128E0                 db  41h ; A
.eh_frame:00000000000128E1                 db  0Eh
.eh_frame:00000000000128E2                 db  28h ; (
.eh_frame:00000000000128E3                 db  83h
.eh_frame:00000000000128E4                 db    5
.eh_frame:00000000000128E5                 db  4Dh ; M
.eh_frame:00000000000128E6                 db  0Eh
.eh_frame:00000000000128E7                 db  30h ; 0
.eh_frame:00000000000128E8                 db  78h ; x
.eh_frame:00000000000128E9                 db  0Eh
.eh_frame:00000000000128EA                 db  28h ; (
.eh_frame:00000000000128EB                 db  43h ; C
.eh_frame:00000000000128EC                 db  0Eh
.eh_frame:00000000000128ED                 db  20h
.eh_frame:00000000000128EE                 db  41h ; A
.eh_frame:00000000000128EF                 db  0Eh
.eh_frame:00000000000128F0                 db  18h
.eh_frame:00000000000128F1                 db  42h ; B
.eh_frame:00000000000128F2                 db  0Eh
.eh_frame:00000000000128F3                 db  10h
.eh_frame:00000000000128F4                 db  42h ; B
.eh_frame:00000000000128F5                 db  0Eh
.eh_frame:00000000000128F6                 db    8
.eh_frame:00000000000128F7                 db    0
.eh_frame:00000000000128F8                 db  5Ch ; \
.eh_frame:00000000000128F9                 db    0
.eh_frame:00000000000128FA                 db    0
.eh_frame:00000000000128FB                 db    0
.eh_frame:00000000000128FC                 db  2Ch ; ,
.eh_frame:00000000000128FD                 db    3
.eh_frame:00000000000128FE                 db    0
.eh_frame:00000000000128FF                 db    0
.eh_frame:0000000000012900                 db  50h ; P
.eh_frame:0000000000012901                 db  16h
.eh_frame:0000000000012902                 db 0FFh
.eh_frame:0000000000012903                 db 0FFh
.eh_frame:0000000000012904                 db  8Bh
.eh_frame:0000000000012905                 db    0
.eh_frame:0000000000012906                 db    0
.eh_frame:0000000000012907                 db    0
.eh_frame:0000000000012908                 db    0
.eh_frame:0000000000012909                 db  42h ; B
.eh_frame:000000000001290A                 db  0Eh
.eh_frame:000000000001290B                 db  10h
.eh_frame:000000000001290C                 db  8Dh
.eh_frame:000000000001290D                 db    2
.eh_frame:000000000001290E                 db  42h ; B
.eh_frame:000000000001290F                 db  0Eh
.eh_frame:0000000000012910                 db  18h
.eh_frame:0000000000012911                 db  8Ch
.eh_frame:0000000000012912                 db    3
.eh_frame:0000000000012913                 db  44h ; D
.eh_frame:0000000000012914                 db  0Eh
.eh_frame:0000000000012915                 db  20h
.eh_frame:0000000000012916                 db  86h
.eh_frame:0000000000012917                 db    4
.eh_frame:0000000000012918                 db  41h ; A
.eh_frame:0000000000012919                 db  0Eh
.eh_frame:000000000001291A                 db  28h ; (
.eh_frame:000000000001291B                 db  83h
.eh_frame:000000000001291C                 db    5
.eh_frame:000000000001291D                 db  4Dh ; M
.eh_frame:000000000001291E                 db  0Eh
.eh_frame:000000000001291F                 db  30h ; 0
.eh_frame:0000000000012920                 db  63h ; c
.eh_frame:0000000000012921                 db  0Ah
.eh_frame:0000000000012922                 db  0Eh
.eh_frame:0000000000012923                 db  28h ; (
.eh_frame:0000000000012924                 db  41h ; A
.eh_frame:0000000000012925                 db  0Eh
.eh_frame:0000000000012926                 db  20h
.eh_frame:0000000000012927                 db  41h ; A
.eh_frame:0000000000012928                 db  0Eh
.eh_frame:0000000000012929                 db  18h
.eh_frame:000000000001292A                 db  42h ; B
.eh_frame:000000000001292B                 db  0Eh
.eh_frame:000000000001292C                 db  10h
.eh_frame:000000000001292D                 db  42h ; B
.eh_frame:000000000001292E                 db  0Eh
.eh_frame:000000000001292F                 db    8
.eh_frame:0000000000012930                 db  41h ; A
.eh_frame:0000000000012931                 db  0Bh
.eh_frame:0000000000012932                 db  60h ; `
.eh_frame:0000000000012933                 db  0Ah
.eh_frame:0000000000012934                 db  0Eh
.eh_frame:0000000000012935                 db  28h ; (
.eh_frame:0000000000012936                 db  46h ; F
.eh_frame:0000000000012937                 db  0Eh
.eh_frame:0000000000012938                 db  20h
.eh_frame:0000000000012939                 db  41h ; A
.eh_frame:000000000001293A                 db  0Eh
.eh_frame:000000000001293B                 db  18h
.eh_frame:000000000001293C                 db  42h ; B
.eh_frame:000000000001293D                 db  0Eh
.eh_frame:000000000001293E                 db  10h
.eh_frame:000000000001293F                 db  42h ; B
.eh_frame:0000000000012940                 db  0Eh
.eh_frame:0000000000012941                 db    8
.eh_frame:0000000000012942                 db  45h ; E
.eh_frame:0000000000012943                 db  0Bh
.eh_frame:0000000000012944                 db  4Fh ; O
.eh_frame:0000000000012945                 db  0Eh
.eh_frame:0000000000012946                 db  28h ; (
.eh_frame:0000000000012947                 db  46h ; F
.eh_frame:0000000000012948                 db  0Eh
.eh_frame:0000000000012949                 db  20h
.eh_frame:000000000001294A                 db  41h ; A
.eh_frame:000000000001294B                 db  0Eh
.eh_frame:000000000001294C                 db  18h
.eh_frame:000000000001294D                 db  42h ; B
.eh_frame:000000000001294E                 db  0Eh
.eh_frame:000000000001294F                 db  10h
.eh_frame:0000000000012950                 db  42h ; B
.eh_frame:0000000000012951                 db  0Eh
.eh_frame:0000000000012952                 db    8
.eh_frame:0000000000012953                 db    0
.eh_frame:0000000000012954                 db    0
.eh_frame:0000000000012955                 db    0
.eh_frame:0000000000012956                 db    0
.eh_frame:0000000000012957                 db    0
.eh_frame:0000000000012958                 db  10h
.eh_frame:0000000000012959                 db    0
.eh_frame:000000000001295A                 db    0
.eh_frame:000000000001295B                 db    0
.eh_frame:000000000001295C                 db  8Ch
.eh_frame:000000000001295D                 db    3
.eh_frame:000000000001295E                 db    0
.eh_frame:000000000001295F                 db    0
.eh_frame:0000000000012960                 db  80h
.eh_frame:0000000000012961                 db  16h
.eh_frame:0000000000012962                 db 0FFh
.eh_frame:0000000000012963                 db 0FFh
.eh_frame:0000000000012964                 db  0Ah
.eh_frame:0000000000012965                 db    0
.eh_frame:0000000000012966                 db    0
.eh_frame:0000000000012967                 db    0
.eh_frame:0000000000012968                 db    0
.eh_frame:0000000000012969                 db    0
.eh_frame:000000000001296A                 db    0
.eh_frame:000000000001296B                 db    0
.eh_frame:000000000001296C                 db  18h
.eh_frame:000000000001296D                 db    0
.eh_frame:000000000001296E                 db    0
.eh_frame:000000000001296F                 db    0
.eh_frame:0000000000012970                 db 0A0h
.eh_frame:0000000000012971                 db    3
.eh_frame:0000000000012972                 db    0
.eh_frame:0000000000012973                 db    0
.eh_frame:0000000000012974                 db  7Ch ; |
.eh_frame:0000000000012975                 db  16h
.eh_frame:0000000000012976                 db 0FFh
.eh_frame:0000000000012977                 db 0FFh
.eh_frame:0000000000012978                 db  41h ; A
.eh_frame:0000000000012979                 db    0
.eh_frame:000000000001297A                 db    0
.eh_frame:000000000001297B                 db    0
.eh_frame:000000000001297C                 db    0
.eh_frame:000000000001297D                 db  44h ; D
.eh_frame:000000000001297E                 db  0Eh
.eh_frame:000000000001297F                 db  30h ; 0
.eh_frame:0000000000012980                 db  77h ; w
.eh_frame:0000000000012981                 db  0Ah
.eh_frame:0000000000012982                 db  0Eh
.eh_frame:0000000000012983                 db    8
.eh_frame:0000000000012984                 db  41h ; A
.eh_frame:0000000000012985                 db  0Bh
.eh_frame:0000000000012986                 db    0
.eh_frame:0000000000012987                 db    0
.eh_frame:0000000000012988                 db  10h
.eh_frame:0000000000012989                 db    0
.eh_frame:000000000001298A                 db    0
.eh_frame:000000000001298B                 db    0
.eh_frame:000000000001298C                 db 0BCh
.eh_frame:000000000001298D                 db    3
.eh_frame:000000000001298E                 db    0
.eh_frame:000000000001298F                 db    0
.eh_frame:0000000000012990                 db 0B0h
.eh_frame:0000000000012991                 db  16h
.eh_frame:0000000000012992                 db 0FFh
.eh_frame:0000000000012993                 db 0FFh
.eh_frame:0000000000012994                 db  79h ; y
.eh_frame:0000000000012995                 db    1
.eh_frame:0000000000012996                 db    0
.eh_frame:0000000000012997                 db    0
.eh_frame:0000000000012998                 db    0
.eh_frame:0000000000012999                 db    0
.eh_frame:000000000001299A                 db    0
.eh_frame:000000000001299B                 db    0
.eh_frame:000000000001299C                 db  2Ch ; ,
.eh_frame:000000000001299D                 db    0
.eh_frame:000000000001299E                 db    0
.eh_frame:000000000001299F                 db    0
.eh_frame:00000000000129A0                 db 0D0h
.eh_frame:00000000000129A1                 db    3
.eh_frame:00000000000129A2                 db    0
.eh_frame:00000000000129A3                 db    0
.eh_frame:00000000000129A4                 db  1Ch
.eh_frame:00000000000129A5                 db  18h
.eh_frame:00000000000129A6                 db 0FFh
.eh_frame:00000000000129A7                 db 0FFh
.eh_frame:00000000000129A8                 db 0F6h
.eh_frame:00000000000129A9                 db    0
.eh_frame:00000000000129AA                 db    0
.eh_frame:00000000000129AB                 db    0
.eh_frame:00000000000129AC                 db    0
.eh_frame:00000000000129AD                 db  49h ; I
.eh_frame:00000000000129AE                 db  0Eh
.eh_frame:00000000000129AF                 db  10h
.eh_frame:00000000000129B0                 db  8Ch
.eh_frame:00000000000129B1                 db    2
.eh_frame:00000000000129B2                 db  43h ; C
.eh_frame:00000000000129B3                 db  0Eh
.eh_frame:00000000000129B4                 db  18h
.eh_frame:00000000000129B5                 db  86h
.eh_frame:00000000000129B6                 db    3
.eh_frame:00000000000129B7                 db  41h ; A
.eh_frame:00000000000129B8                 db  0Eh
.eh_frame:00000000000129B9                 db  20h
.eh_frame:00000000000129BA                 db  83h
.eh_frame:00000000000129BB                 db    4
.eh_frame:00000000000129BC                 db    2
.eh_frame:00000000000129BD                 db 0B9h
.eh_frame:00000000000129BE                 db  0Ah
.eh_frame:00000000000129BF                 db  0Eh
.eh_frame:00000000000129C0                 db  18h
.eh_frame:00000000000129C1                 db  41h ; A
.eh_frame:00000000000129C2                 db  0Eh
.eh_frame:00000000000129C3                 db  10h
.eh_frame:00000000000129C4                 db  42h ; B
.eh_frame:00000000000129C5                 db  0Eh
.eh_frame:00000000000129C6                 db    8
.eh_frame:00000000000129C7                 db  47h ; G
.eh_frame:00000000000129C8                 db  0Bh
.eh_frame:00000000000129C9                 db    0
.eh_frame:00000000000129CA                 db    0
.eh_frame:00000000000129CB                 db    0
.eh_frame:00000000000129CC                 db  18h
.eh_frame:00000000000129CD                 db    0
.eh_frame:00000000000129CE                 db    0
.eh_frame:00000000000129CF                 db    0
.eh_frame:00000000000129D0                 db    0
.eh_frame:00000000000129D1                 db    4
.eh_frame:00000000000129D2                 db    0
.eh_frame:00000000000129D3                 db    0
.eh_frame:00000000000129D4                 db  8Ch
.eh_frame:00000000000129D5                 db    1
.eh_frame:00000000000129D6                 db 0FFh
.eh_frame:00000000000129D7                 db 0FFh
.eh_frame:00000000000129D8                 db  57h ; W
.eh_frame:00000000000129D9                 db    0
.eh_frame:00000000000129DA                 db    0
.eh_frame:00000000000129DB                 db    0
.eh_frame:00000000000129DC                 db    0
.eh_frame:00000000000129DD                 db  48h ; H
.eh_frame:00000000000129DE                 db  0Eh
.eh_frame:00000000000129DF                 db  10h
.eh_frame:00000000000129E0                 db  83h
.eh_frame:00000000000129E1                 db    2
.eh_frame:00000000000129E2                 db    2
.eh_frame:00000000000129E3                 db  4Eh ; N
.eh_frame:00000000000129E4                 db  0Eh
.eh_frame:00000000000129E5                 db    8
.eh_frame:00000000000129E6                 db    0
.eh_frame:00000000000129E7                 db    0
.eh_frame:00000000000129E8                 db  20h
.eh_frame:00000000000129E9                 db    0
.eh_frame:00000000000129EA                 db    0
.eh_frame:00000000000129EB                 db    0
.eh_frame:00000000000129EC                 db  1Ch
.eh_frame:00000000000129ED                 db    4
.eh_frame:00000000000129EE                 db    0
.eh_frame:00000000000129EF                 db    0
.eh_frame:00000000000129F0                 db 0D0h
.eh_frame:00000000000129F1                 db  18h
.eh_frame:00000000000129F2                 db 0FFh
.eh_frame:00000000000129F3                 db 0FFh
.eh_frame:00000000000129F4                 db 0E2h
.eh_frame:00000000000129F5                 db    0
.eh_frame:00000000000129F6                 db    0
.eh_frame:00000000000129F7                 db    0
.eh_frame:00000000000129F8                 db    0
.eh_frame:00000000000129F9                 db  41h ; A
.eh_frame:00000000000129FA                 db  0Eh
.eh_frame:00000000000129FB                 db  10h
.eh_frame:00000000000129FC                 db  83h
.eh_frame:00000000000129FD                 db    2
.eh_frame:00000000000129FE                 db  4Ah ; J
.eh_frame:00000000000129FF                 db  0Eh
.eh_frame:0000000000012A00                 db 0E0h
.eh_frame:0000000000012A01                 db    1
.eh_frame:0000000000012A02                 db    2
.eh_frame:0000000000012A03                 db 0D0h
.eh_frame:0000000000012A04                 db  0Ah
.eh_frame:0000000000012A05                 db  0Eh
.eh_frame:0000000000012A06                 db  10h
.eh_frame:0000000000012A07                 db  41h ; A
.eh_frame:0000000000012A08                 db  0Eh
.eh_frame:0000000000012A09                 db    8
.eh_frame:0000000000012A0A                 db  41h ; A
.eh_frame:0000000000012A0B                 db  0Bh
.eh_frame:0000000000012A0C                 db  14h
.eh_frame:0000000000012A0D                 db    0
.eh_frame:0000000000012A0E                 db    0
.eh_frame:0000000000012A0F                 db    0
.eh_frame:0000000000012A10                 db  40h ; @
.eh_frame:0000000000012A11                 db    4
.eh_frame:0000000000012A12                 db    0
.eh_frame:0000000000012A13                 db    0
.eh_frame:0000000000012A14                 db  9Ch
.eh_frame:0000000000012A15                 db  19h
.eh_frame:0000000000012A16                 db 0FFh
.eh_frame:0000000000012A17                 db 0FFh
.eh_frame:0000000000012A18                 db  38h ; 8
.eh_frame:0000000000012A19                 db    0
.eh_frame:0000000000012A1A                 db    0
.eh_frame:0000000000012A1B                 db    0
.eh_frame:0000000000012A1C                 db    0
.eh_frame:0000000000012A1D                 db  55h ; U
.eh_frame:0000000000012A1E                 db  0Eh
.eh_frame:0000000000012A1F                 db  10h
.eh_frame:0000000000012A20                 db  62h ; b
.eh_frame:0000000000012A21                 db  0Eh
.eh_frame:0000000000012A22                 db    8
.eh_frame:0000000000012A23                 db    0
.eh_frame:0000000000012A24                 db  10h
.eh_frame:0000000000012A25                 db    0
.eh_frame:0000000000012A26                 db    0
.eh_frame:0000000000012A27                 db    0
.eh_frame:0000000000012A28                 db  58h ; X
.eh_frame:0000000000012A29                 db    4
.eh_frame:0000000000012A2A                 db    0
.eh_frame:0000000000012A2B                 db    0
.eh_frame:0000000000012A2C                 db 0C4h
.eh_frame:0000000000012A2D                 db  19h
.eh_frame:0000000000012A2E                 db 0FFh
.eh_frame:0000000000012A2F                 db 0FFh
.eh_frame:0000000000012A30                 db 0DFh
.eh_frame:0000000000012A31                 db    0
.eh_frame:0000000000012A32                 db    0
.eh_frame:0000000000012A33                 db    0
.eh_frame:0000000000012A34                 db    0
.eh_frame:0000000000012A35                 db    0
.eh_frame:0000000000012A36                 db    0
.eh_frame:0000000000012A37                 db    0
.eh_frame:0000000000012A38                 db  10h
.eh_frame:0000000000012A39                 db    0
.eh_frame:0000000000012A3A                 db    0
.eh_frame:0000000000012A3B                 db    0
.eh_frame:0000000000012A3C                 db  6Ch ; l
.eh_frame:0000000000012A3D                 db    4
.eh_frame:0000000000012A3E                 db    0
.eh_frame:0000000000012A3F                 db    0
.eh_frame:0000000000012A40                 db  90h
.eh_frame:0000000000012A41                 db  1Ah
.eh_frame:0000000000012A42                 db 0FFh
.eh_frame:0000000000012A43                 db 0FFh
.eh_frame:0000000000012A44                 db  30h ; 0
.eh_frame:0000000000012A45                 db    0
.eh_frame:0000000000012A46                 db    0
.eh_frame:0000000000012A47                 db    0
.eh_frame:0000000000012A48                 db    0
.eh_frame:0000000000012A49                 db    0
.eh_frame:0000000000012A4A                 db    0
.eh_frame:0000000000012A4B                 db    0
.eh_frame:0000000000012A4C                 db  40h ; @
.eh_frame:0000000000012A4D                 db    0
.eh_frame:0000000000012A4E                 db    0
.eh_frame:0000000000012A4F                 db    0
.eh_frame:0000000000012A50                 db  80h
.eh_frame:0000000000012A51                 db    4
.eh_frame:0000000000012A52                 db    0
.eh_frame:0000000000012A53                 db    0
.eh_frame:0000000000012A54                 db 0ACh
.eh_frame:0000000000012A55                 db  1Ah
.eh_frame:0000000000012A56                 db 0FFh
.eh_frame:0000000000012A57                 db 0FFh
.eh_frame:0000000000012A58                 db 0BAh
.eh_frame:0000000000012A59                 db    0
.eh_frame:0000000000012A5A                 db    0
.eh_frame:0000000000012A5B                 db    0
.eh_frame:0000000000012A5C                 db    0
.eh_frame:0000000000012A5D                 db  42h ; B
.eh_frame:0000000000012A5E                 db  0Eh
.eh_frame:0000000000012A5F                 db  10h
.eh_frame:0000000000012A60                 db  8Ch
.eh_frame:0000000000012A61                 db    2
.eh_frame:0000000000012A62                 db  44h ; D
.eh_frame:0000000000012A63                 db  0Eh
.eh_frame:0000000000012A64                 db  18h
.eh_frame:0000000000012A65                 db  86h
.eh_frame:0000000000012A66                 db    3
.eh_frame:0000000000012A67                 db  44h ; D
.eh_frame:0000000000012A68                 db  0Eh
.eh_frame:0000000000012A69                 db  20h
.eh_frame:0000000000012A6A                 db  83h
.eh_frame:0000000000012A6B                 db    4
.eh_frame:0000000000012A6C                 db  72h ; r
.eh_frame:0000000000012A6D                 db  0Ah
.eh_frame:0000000000012A6E                 db  0Eh
.eh_frame:0000000000012A6F                 db  18h
.eh_frame:0000000000012A70                 db  41h ; A
.eh_frame:0000000000012A71                 db  0Eh
.eh_frame:0000000000012A72                 db  10h
.eh_frame:0000000000012A73                 db  42h ; B
.eh_frame:0000000000012A74                 db  0Eh
.eh_frame:0000000000012A75                 db    8
.eh_frame:0000000000012A76                 db  41h ; A
.eh_frame:0000000000012A77                 db  0Bh
.eh_frame:0000000000012A78                 db    2
.eh_frame:0000000000012A79                 db  6Ch ; l
.eh_frame:0000000000012A7A                 db  0Ah
.eh_frame:0000000000012A7B                 db  0Eh
.eh_frame:0000000000012A7C                 db  18h
.eh_frame:0000000000012A7D                 db  41h ; A
.eh_frame:0000000000012A7E                 db  0Eh
.eh_frame:0000000000012A7F                 db  10h
.eh_frame:0000000000012A80                 db  42h ; B
.eh_frame:0000000000012A81                 db  0Eh
.eh_frame:0000000000012A82                 db    8
.eh_frame:0000000000012A83                 db  41h ; A
.eh_frame:0000000000012A84                 db  0Bh
.eh_frame:0000000000012A85                 db  46h ; F
.eh_frame:0000000000012A86                 db  0Eh
.eh_frame:0000000000012A87                 db  18h
.eh_frame:0000000000012A88                 db  41h ; A
.eh_frame:0000000000012A89                 db  0Eh
.eh_frame:0000000000012A8A                 db  10h
.eh_frame:0000000000012A8B                 db  42h ; B
.eh_frame:0000000000012A8C                 db  0Eh
.eh_frame:0000000000012A8D                 db    8
.eh_frame:0000000000012A8E                 db    0
.eh_frame:0000000000012A8F                 db    0
.eh_frame:0000000000012A90                 db  34h ; 4
.eh_frame:0000000000012A91                 db    0
.eh_frame:0000000000012A92                 db    0
.eh_frame:0000000000012A93                 db    0
.eh_frame:0000000000012A94                 db 0C4h
.eh_frame:0000000000012A95                 db    4
.eh_frame:0000000000012A96                 db    0
.eh_frame:0000000000012A97                 db    0
.eh_frame:0000000000012A98                 db  28h ; (
.eh_frame:0000000000012A99                 db  1Bh
.eh_frame:0000000000012A9A                 db 0FFh
.eh_frame:0000000000012A9B                 db 0FFh
.eh_frame:0000000000012A9C                 db 0E7h
.eh_frame:0000000000012A9D                 db    1
.eh_frame:0000000000012A9E                 db    0
.eh_frame:0000000000012A9F                 db    0
.eh_frame:0000000000012AA0                 db    0
.eh_frame:0000000000012AA1                 db  41h ; A
.eh_frame:0000000000012AA2                 db  0Eh
.eh_frame:0000000000012AA3                 db  10h
.eh_frame:0000000000012AA4                 db  86h
.eh_frame:0000000000012AA5                 db    2
.eh_frame:0000000000012AA6                 db  41h ; A
.eh_frame:0000000000012AA7                 db  0Eh
.eh_frame:0000000000012AA8                 db  18h
.eh_frame:0000000000012AA9                 db  83h
.eh_frame:0000000000012AAA                 db    3
.eh_frame:0000000000012AAB                 db  56h ; V
.eh_frame:0000000000012AAC                 db  0Eh
.eh_frame:0000000000012AAD                 db  20h
.eh_frame:0000000000012AAE                 db    2
.eh_frame:0000000000012AAF                 db  93h
.eh_frame:0000000000012AB0                 db  0Ah
.eh_frame:0000000000012AB1                 db  0Eh
.eh_frame:0000000000012AB2                 db  18h
.eh_frame:0000000000012AB3                 db  46h ; F
.eh_frame:0000000000012AB4                 db  0Eh
.eh_frame:0000000000012AB5                 db  10h
.eh_frame:0000000000012AB6                 db  41h ; A
.eh_frame:0000000000012AB7                 db  0Eh
.eh_frame:0000000000012AB8                 db    8
.eh_frame:0000000000012AB9                 db  4Eh ; N
.eh_frame:0000000000012ABA                 db  0Bh
.eh_frame:0000000000012ABB                 db    2
.eh_frame:0000000000012ABC                 db  59h ; Y
.eh_frame:0000000000012ABD                 db  0Ah
.eh_frame:0000000000012ABE                 db  0Eh
.eh_frame:0000000000012ABF                 db  18h
.eh_frame:0000000000012AC0                 db  47h ; G
.eh_frame:0000000000012AC1                 db  0Eh
.eh_frame:0000000000012AC2                 db  10h
.eh_frame:0000000000012AC3                 db  41h ; A
.eh_frame:0000000000012AC4                 db  0Eh
.eh_frame:0000000000012AC5                 db    8
.eh_frame:0000000000012AC6                 db  4Fh ; O
.eh_frame:0000000000012AC7                 db  0Bh
.eh_frame:0000000000012AC8                 db  30h ; 0
.eh_frame:0000000000012AC9                 db    0
.eh_frame:0000000000012ACA                 db    0
.eh_frame:0000000000012ACB                 db    0
.eh_frame:0000000000012ACC                 db 0FCh
.eh_frame:0000000000012ACD                 db    4
.eh_frame:0000000000012ACE                 db    0
.eh_frame:0000000000012ACF                 db    0
.eh_frame:0000000000012AD0                 db 0E0h
.eh_frame:0000000000012AD1                 db  1Ch
.eh_frame:0000000000012AD2                 db 0FFh
.eh_frame:0000000000012AD3                 db 0FFh
.eh_frame:0000000000012AD4                 db 0B1h
.eh_frame:0000000000012AD5                 db    0
.eh_frame:0000000000012AD6                 db    0
.eh_frame:0000000000012AD7                 db    0
.eh_frame:0000000000012AD8                 db    0
.eh_frame:0000000000012AD9                 db  42h ; B
.eh_frame:0000000000012ADA                 db  0Eh
.eh_frame:0000000000012ADB                 db  10h
.eh_frame:0000000000012ADC                 db  8Ch
.eh_frame:0000000000012ADD                 db    2
.eh_frame:0000000000012ADE                 db  41h ; A
.eh_frame:0000000000012ADF                 db  0Eh
.eh_frame:0000000000012AE0                 db  18h
.eh_frame:0000000000012AE1                 db  86h
.eh_frame:0000000000012AE2                 db    3
.eh_frame:0000000000012AE3                 db  44h ; D
.eh_frame:0000000000012AE4                 db  0Eh
.eh_frame:0000000000012AE5                 db  20h
.eh_frame:0000000000012AE6                 db  83h
.eh_frame:0000000000012AE7                 db    4
.eh_frame:0000000000012AE8                 db  57h ; W
.eh_frame:0000000000012AE9                 db  0Eh
.eh_frame:0000000000012AEA                 db  50h ; P
.eh_frame:0000000000012AEB                 db    2
.eh_frame:0000000000012AEC                 db  4Ch ; L
.eh_frame:0000000000012AED                 db  0Ah
.eh_frame:0000000000012AEE                 db  0Eh
.eh_frame:0000000000012AEF                 db  20h
.eh_frame:0000000000012AF0                 db  41h ; A
.eh_frame:0000000000012AF1                 db  0Eh
.eh_frame:0000000000012AF2                 db  18h
.eh_frame:0000000000012AF3                 db  41h ; A
.eh_frame:0000000000012AF4                 db  0Eh
.eh_frame:0000000000012AF5                 db  10h
.eh_frame:0000000000012AF6                 db  42h ; B
.eh_frame:0000000000012AF7                 db  0Eh
.eh_frame:0000000000012AF8                 db    8
.eh_frame:0000000000012AF9                 db  42h ; B
.eh_frame:0000000000012AFA                 db  0Bh
.eh_frame:0000000000012AFB                 db    0
.eh_frame:0000000000012AFC                 db  34h ; 4
.eh_frame:0000000000012AFD                 db    0
.eh_frame:0000000000012AFE                 db    0
.eh_frame:0000000000012AFF                 db    0
.eh_frame:0000000000012B00                 db  30h ; 0
.eh_frame:0000000000012B01                 db    5
.eh_frame:0000000000012B02                 db    0
.eh_frame:0000000000012B03                 db    0
.eh_frame:0000000000012B04                 db  6Ch ; l
.eh_frame:0000000000012B05                 db  1Dh
.eh_frame:0000000000012B06                 db 0FFh
.eh_frame:0000000000012B07                 db 0FFh
.eh_frame:0000000000012B08                 db 0FFh
.eh_frame:0000000000012B09                 db    0
.eh_frame:0000000000012B0A                 db    0
.eh_frame:0000000000012B0B                 db    0
.eh_frame:0000000000012B0C                 db    0
.eh_frame:0000000000012B0D                 db  41h ; A
.eh_frame:0000000000012B0E                 db  0Eh
.eh_frame:0000000000012B0F                 db  10h
.eh_frame:0000000000012B10                 db  86h
.eh_frame:0000000000012B11                 db    2
.eh_frame:0000000000012B12                 db  41h ; A
.eh_frame:0000000000012B13                 db  0Eh
.eh_frame:0000000000012B14                 db  18h
.eh_frame:0000000000012B15                 db  83h
.eh_frame:0000000000012B16                 db    3
.eh_frame:0000000000012B17                 db  4Ah ; J
.eh_frame:0000000000012B18                 db  0Eh
.eh_frame:0000000000012B19                 db  20h
.eh_frame:0000000000012B1A                 db    2
.eh_frame:0000000000012B1B                 db  53h ; S
.eh_frame:0000000000012B1C                 db  0Ah
.eh_frame:0000000000012B1D                 db  0Eh
.eh_frame:0000000000012B1E                 db  18h
.eh_frame:0000000000012B1F                 db  44h ; D
.eh_frame:0000000000012B20                 db  0Eh
.eh_frame:0000000000012B21                 db  10h
.eh_frame:0000000000012B22                 db  41h ; A
.eh_frame:0000000000012B23                 db  0Eh
.eh_frame:0000000000012B24                 db    8
.eh_frame:0000000000012B25                 db  44h ; D
.eh_frame:0000000000012B26                 db  0Bh
.eh_frame:0000000000012B27                 db    2
.eh_frame:0000000000012B28                 db  46h ; F
.eh_frame:0000000000012B29                 db  0Ah
.eh_frame:0000000000012B2A                 db  0Eh
.eh_frame:0000000000012B2B                 db  18h
.eh_frame:0000000000012B2C                 db  44h ; D
.eh_frame:0000000000012B2D                 db  0Eh
.eh_frame:0000000000012B2E                 db  10h
.eh_frame:0000000000012B2F                 db  41h ; A
.eh_frame:0000000000012B30                 db  0Eh
.eh_frame:0000000000012B31                 db    8
.eh_frame:0000000000012B32                 db  45h ; E
.eh_frame:0000000000012B33                 db  0Bh
.eh_frame:0000000000012B34                 db  3Ch ; <
.eh_frame:0000000000012B35                 db    0
.eh_frame:0000000000012B36                 db    0
.eh_frame:0000000000012B37                 db    0
.eh_frame:0000000000012B38                 db  68h ; h
.eh_frame:0000000000012B39                 db    5
.eh_frame:0000000000012B3A                 db    0
.eh_frame:0000000000012B3B                 db    0
.eh_frame:0000000000012B3C                 db  34h ; 4
.eh_frame:0000000000012B3D                 db  1Eh
.eh_frame:0000000000012B3E                 db 0FFh
.eh_frame:0000000000012B3F                 db 0FFh
.eh_frame:0000000000012B40                 db 0D7h
.eh_frame:0000000000012B41                 db    3
.eh_frame:0000000000012B42                 db    0
.eh_frame:0000000000012B43                 db    0
.eh_frame:0000000000012B44                 db    0
.eh_frame:0000000000012B45                 db  42h ; B
.eh_frame:0000000000012B46                 db  0Eh
.eh_frame:0000000000012B47                 db  10h
.eh_frame:0000000000012B48                 db  8Dh
.eh_frame:0000000000012B49                 db    2
.eh_frame:0000000000012B4A                 db  42h ; B
.eh_frame:0000000000012B4B                 db  0Eh
.eh_frame:0000000000012B4C                 db  18h
.eh_frame:0000000000012B4D                 db  8Ch
.eh_frame:0000000000012B4E                 db    3
.eh_frame:0000000000012B4F                 db  46h ; F
.eh_frame:0000000000012B50                 db  0Eh
.eh_frame:0000000000012B51                 db  20h
.eh_frame:0000000000012B52                 db  86h
.eh_frame:0000000000012B53                 db    4
.eh_frame:0000000000012B54                 db  41h ; A
.eh_frame:0000000000012B55                 db  0Eh
.eh_frame:0000000000012B56                 db  28h ; (
.eh_frame:0000000000012B57                 db  83h
.eh_frame:0000000000012B58                 db    5
.eh_frame:0000000000012B59                 db  53h ; S
.eh_frame:0000000000012B5A                 db  0Eh
.eh_frame:0000000000012B5B                 db 0A0h
.eh_frame:0000000000012B5C                 db    1
.eh_frame:0000000000012B5D                 db    3
.eh_frame:0000000000012B5E                 db  1Fh
.eh_frame:0000000000012B5F                 db    2
.eh_frame:0000000000012B60                 db  0Ah
.eh_frame:0000000000012B61                 db  0Eh
.eh_frame:0000000000012B62                 db  28h ; (
.eh_frame:0000000000012B63                 db  41h ; A
.eh_frame:0000000000012B64                 db  0Eh
.eh_frame:0000000000012B65                 db  20h
.eh_frame:0000000000012B66                 db  41h ; A
.eh_frame:0000000000012B67                 db  0Eh
.eh_frame:0000000000012B68                 db  18h
.eh_frame:0000000000012B69                 db  42h ; B
.eh_frame:0000000000012B6A                 db  0Eh
.eh_frame:0000000000012B6B                 db  10h
.eh_frame:0000000000012B6C                 db  42h ; B
.eh_frame:0000000000012B6D                 db  0Eh
.eh_frame:0000000000012B6E                 db    8
.eh_frame:0000000000012B6F                 db  41h ; A
.eh_frame:0000000000012B70                 db  0Bh
.eh_frame:0000000000012B71                 db    0
.eh_frame:0000000000012B72                 db    0
.eh_frame:0000000000012B73                 db    0
.eh_frame:0000000000012B74                 db  74h ; t
.eh_frame:0000000000012B75                 db    0
.eh_frame:0000000000012B76                 db    0
.eh_frame:0000000000012B77                 db    0
.eh_frame:0000000000012B78                 db 0A8h
.eh_frame:0000000000012B79                 db    5
.eh_frame:0000000000012B7A                 db    0
.eh_frame:0000000000012B7B                 db    0
.eh_frame:0000000000012B7C                 db 0D4h
.eh_frame:0000000000012B7D                 db  21h ; !
.eh_frame:0000000000012B7E                 db 0FFh
.eh_frame:0000000000012B7F                 db 0FFh
.eh_frame:0000000000012B80                 db    3
.eh_frame:0000000000012B81                 db  1Ch
.eh_frame:0000000000012B82                 db    0
.eh_frame:0000000000012B83                 db    0
.eh_frame:0000000000012B84                 db    0
.eh_frame:0000000000012B85                 db  42h ; B
.eh_frame:0000000000012B86                 db  0Eh
.eh_frame:0000000000012B87                 db  10h
.eh_frame:0000000000012B88                 db  8Fh
.eh_frame:0000000000012B89                 db    2
.eh_frame:0000000000012B8A                 db  42h ; B
.eh_frame:0000000000012B8B                 db  0Eh
.eh_frame:0000000000012B8C                 db  18h
.eh_frame:0000000000012B8D                 db  8Eh
.eh_frame:0000000000012B8E                 db    3
.eh_frame:0000000000012B8F                 db  44h ; D
.eh_frame:0000000000012B90                 db  0Eh
.eh_frame:0000000000012B91                 db  20h
.eh_frame:0000000000012B92                 db  8Dh
.eh_frame:0000000000012B93                 db    4
.eh_frame:0000000000012B94                 db  42h ; B
.eh_frame:0000000000012B95                 db  0Eh
.eh_frame:0000000000012B96                 db  28h ; (
.eh_frame:0000000000012B97                 db  8Ch
.eh_frame:0000000000012B98                 db    5
.eh_frame:0000000000012B99                 db  44h ; D
.eh_frame:0000000000012B9A                 db  0Eh
.eh_frame:0000000000012B9B                 db  30h ; 0
.eh_frame:0000000000012B9C                 db  86h
.eh_frame:0000000000012B9D                 db    6
.eh_frame:0000000000012B9E                 db  41h ; A
.eh_frame:0000000000012B9F                 db  0Eh
.eh_frame:0000000000012BA0                 db  38h ; 8
.eh_frame:0000000000012BA1                 db  83h
.eh_frame:0000000000012BA2                 db    7
.eh_frame:0000000000012BA3                 db  55h ; U
.eh_frame:0000000000012BA4                 db  0Eh
.eh_frame:0000000000012BA5                 db  80h
.eh_frame:0000000000012BA6                 db  0Ch
.eh_frame:0000000000012BA7                 db    3
.eh_frame:0000000000012BA8                 db 0D7h
.eh_frame:0000000000012BA9                 db    5
.eh_frame:0000000000012BAA                 db  0Ah
.eh_frame:0000000000012BAB                 db  0Eh
.eh_frame:0000000000012BAC                 db  38h ; 8
.eh_frame:0000000000012BAD                 db  41h ; A
.eh_frame:0000000000012BAE                 db  0Eh
.eh_frame:0000000000012BAF                 db  30h ; 0
.eh_frame:0000000000012BB0                 db  41h ; A
.eh_frame:0000000000012BB1                 db  0Eh
.eh_frame:0000000000012BB2                 db  28h ; (
.eh_frame:0000000000012BB3                 db  42h ; B
.eh_frame:0000000000012BB4                 db  0Eh
.eh_frame:0000000000012BB5                 db  20h
.eh_frame:0000000000012BB6                 db  42h ; B
.eh_frame:0000000000012BB7                 db  0Eh
.eh_frame:0000000000012BB8                 db  18h
.eh_frame:0000000000012BB9                 db  42h ; B
.eh_frame:0000000000012BBA                 db  0Eh
.eh_frame:0000000000012BBB                 db  10h
.eh_frame:0000000000012BBC                 db  42h ; B
.eh_frame:0000000000012BBD                 db  0Eh
.eh_frame:0000000000012BBE                 db    8
.eh_frame:0000000000012BBF                 db  41h ; A
.eh_frame:0000000000012BC0                 db  0Bh
.eh_frame:0000000000012BC1                 db    3
.eh_frame:0000000000012BC2                 db  19h
.eh_frame:0000000000012BC3                 db    8
.eh_frame:0000000000012BC4                 db  0Eh
.eh_frame:0000000000012BC5                 db  88h
.eh_frame:0000000000012BC6                 db  0Ch
.eh_frame:0000000000012BC7                 db  44h ; D
.eh_frame:0000000000012BC8                 db  0Eh
.eh_frame:0000000000012BC9                 db  90h
.eh_frame:0000000000012BCA                 db  0Ch
.eh_frame:0000000000012BCB                 db  44h ; D
.eh_frame:0000000000012BCC                 db  0Eh
.eh_frame:0000000000012BCD                 db  98h
.eh_frame:0000000000012BCE                 db  0Ch
.eh_frame:0000000000012BCF                 db  47h ; G
.eh_frame:0000000000012BD0                 db  0Eh
.eh_frame:0000000000012BD1                 db 0A0h
.eh_frame:0000000000012BD2                 db  0Ch
.eh_frame:0000000000012BD3                 db  4Eh ; N
.eh_frame:0000000000012BD4                 db  0Eh
.eh_frame:0000000000012BD5                 db  80h
.eh_frame:0000000000012BD6                 db  0Ch
.eh_frame:0000000000012BD7                 db    2
.eh_frame:0000000000012BD8                 db 0F6h
.eh_frame:0000000000012BD9                 db  0Eh
.eh_frame:0000000000012BDA                 db  88h
.eh_frame:0000000000012BDB                 db  0Ch
.eh_frame:0000000000012BDC                 db  44h ; D
.eh_frame:0000000000012BDD                 db  0Eh
.eh_frame:0000000000012BDE                 db  90h
.eh_frame:0000000000012BDF                 db  0Ch
.eh_frame:0000000000012BE0                 db  44h ; D
.eh_frame:0000000000012BE1                 db  0Eh
.eh_frame:0000000000012BE2                 db  98h
.eh_frame:0000000000012BE3                 db  0Ch
.eh_frame:0000000000012BE4                 db  47h ; G
.eh_frame:0000000000012BE5                 db  0Eh
.eh_frame:0000000000012BE6                 db 0A0h
.eh_frame:0000000000012BE7                 db  0Ch
.eh_frame:0000000000012BE8                 db  73h ; s
.eh_frame:0000000000012BE9                 db  0Eh
.eh_frame:0000000000012BEA                 db  80h
.eh_frame:0000000000012BEB                 db  0Ch
.eh_frame:0000000000012BEC                 db  8Ch
.eh_frame:0000000000012BED                 db    0
.eh_frame:0000000000012BEE                 db    0
.eh_frame:0000000000012BEF                 db    0
.eh_frame:0000000000012BF0                 db  20h
.eh_frame:0000000000012BF1                 db    6
.eh_frame:0000000000012BF2                 db    0
.eh_frame:0000000000012BF3                 db    0
.eh_frame:0000000000012BF4                 db  6Ch ; l
.eh_frame:0000000000012BF5                 db  3Dh ; =
.eh_frame:0000000000012BF6                 db 0FFh
.eh_frame:0000000000012BF7                 db 0FFh
.eh_frame:0000000000012BF8                 db  69h ; i
.eh_frame:0000000000012BF9                 db  1Dh
.eh_frame:0000000000012BFA                 db    0
.eh_frame:0000000000012BFB                 db    0
.eh_frame:0000000000012BFC                 db    0
.eh_frame:0000000000012BFD                 db  42h ; B
.eh_frame:0000000000012BFE                 db  0Eh
.eh_frame:0000000000012BFF                 db  10h
.eh_frame:0000000000012C00                 db  8Fh
.eh_frame:0000000000012C01                 db    2
.eh_frame:0000000000012C02                 db  42h ; B
.eh_frame:0000000000012C03                 db  0Eh
.eh_frame:0000000000012C04                 db  18h
.eh_frame:0000000000012C05                 db  8Eh
.eh_frame:0000000000012C06                 db    3
.eh_frame:0000000000012C07                 db  45h ; E
.eh_frame:0000000000012C08                 db  0Eh
.eh_frame:0000000000012C09                 db  20h
.eh_frame:0000000000012C0A                 db  8Dh
.eh_frame:0000000000012C0B                 db    4
.eh_frame:0000000000012C0C                 db  42h ; B
.eh_frame:0000000000012C0D                 db  0Eh
.eh_frame:0000000000012C0E                 db  28h ; (
.eh_frame:0000000000012C0F                 db  8Ch
.eh_frame:0000000000012C10                 db    5
.eh_frame:0000000000012C11                 db  41h ; A
.eh_frame:0000000000012C12                 db  0Eh
.eh_frame:0000000000012C13                 db  30h ; 0
.eh_frame:0000000000012C14                 db  86h
.eh_frame:0000000000012C15                 db    6
.eh_frame:0000000000012C16                 db  41h ; A
.eh_frame:0000000000012C17                 db  0Eh
.eh_frame:0000000000012C18                 db  38h ; 8
.eh_frame:0000000000012C19                 db  83h
.eh_frame:0000000000012C1A                 db    7
.eh_frame:0000000000012C1B                 db  4Ah ; J
.eh_frame:0000000000012C1C                 db  0Eh
.eh_frame:0000000000012C1D                 db  90h
.eh_frame:0000000000012C1E                 db    9
.eh_frame:0000000000012C1F                 db    3
.eh_frame:0000000000012C20                 db  60h ; `
.eh_frame:0000000000012C21                 db    4
.eh_frame:0000000000012C22                 db  0Ah
.eh_frame:0000000000012C23                 db  0Eh
.eh_frame:0000000000012C24                 db  38h ; 8
.eh_frame:0000000000012C25                 db  41h ; A
.eh_frame:0000000000012C26                 db  0Eh
.eh_frame:0000000000012C27                 db  30h ; 0
.eh_frame:0000000000012C28                 db  41h ; A
.eh_frame:0000000000012C29                 db  0Eh
.eh_frame:0000000000012C2A                 db  28h ; (
.eh_frame:0000000000012C2B                 db  42h ; B
.eh_frame:0000000000012C2C                 db  0Eh
.eh_frame:0000000000012C2D                 db  20h
.eh_frame:0000000000012C2E                 db  42h ; B
.eh_frame:0000000000012C2F                 db  0Eh
.eh_frame:0000000000012C30                 db  18h
.eh_frame:0000000000012C31                 db  42h ; B
.eh_frame:0000000000012C32                 db  0Eh
.eh_frame:0000000000012C33                 db  10h
.eh_frame:0000000000012C34                 db  42h ; B
.eh_frame:0000000000012C35                 db  0Eh
.eh_frame:0000000000012C36                 db    8
.eh_frame:0000000000012C37                 db  47h ; G
.eh_frame:0000000000012C38                 db  0Bh
.eh_frame:0000000000012C39                 db    3
.eh_frame:0000000000012C3A                 db 0FFh
.eh_frame:0000000000012C3B                 db    9
.eh_frame:0000000000012C3C                 db  0Eh
.eh_frame:0000000000012C3D                 db  98h
.eh_frame:0000000000012C3E                 db    9
.eh_frame:0000000000012C3F                 db  46h ; F
.eh_frame:0000000000012C40                 db  0Eh
.eh_frame:0000000000012C41                 db 0A0h
.eh_frame:0000000000012C42                 db    9
.eh_frame:0000000000012C43                 db  41h ; A
.eh_frame:0000000000012C44                 db  0Eh
.eh_frame:0000000000012C45                 db 0A8h
.eh_frame:0000000000012C46                 db    9
.eh_frame:0000000000012C47                 db  47h ; G
.eh_frame:0000000000012C48                 db  0Eh
.eh_frame:0000000000012C49                 db 0B0h
.eh_frame:0000000000012C4A                 db    9
.eh_frame:0000000000012C4B                 db  48h ; H
.eh_frame:0000000000012C4C                 db  0Eh
.eh_frame:0000000000012C4D                 db 0B8h
.eh_frame:0000000000012C4E                 db    9
.eh_frame:0000000000012C4F                 db  41h ; A
.eh_frame:0000000000012C50                 db  0Eh
.eh_frame:0000000000012C51                 db 0C0h
.eh_frame:0000000000012C52                 db    9
.eh_frame:0000000000012C53                 db  53h ; S
.eh_frame:0000000000012C54                 db  0Eh
.eh_frame:0000000000012C55                 db  90h
.eh_frame:0000000000012C56                 db    9
.eh_frame:0000000000012C57                 db    3
.eh_frame:0000000000012C58                 db 0A7h
.eh_frame:0000000000012C59                 db    9
.eh_frame:0000000000012C5A                 db  0Eh
.eh_frame:0000000000012C5B                 db  98h
.eh_frame:0000000000012C5C                 db    9
.eh_frame:0000000000012C5D                 db  41h ; A
.eh_frame:0000000000012C5E                 db  0Eh
.eh_frame:0000000000012C5F                 db 0A0h
.eh_frame:0000000000012C60                 db    9
.eh_frame:0000000000012C61                 db  5Ah ; Z
.eh_frame:0000000000012C62                 db  0Eh
.eh_frame:0000000000012C63                 db  98h
.eh_frame:0000000000012C64                 db    9
.eh_frame:0000000000012C65                 db  41h ; A
.eh_frame:0000000000012C66                 db  0Eh
.eh_frame:0000000000012C67                 db  90h
.eh_frame:0000000000012C68                 db    9
.eh_frame:0000000000012C69                 db    3
.eh_frame:0000000000012C6A                 db 0DAh
.eh_frame:0000000000012C6B                 db    3
.eh_frame:0000000000012C6C                 db  0Eh
.eh_frame:0000000000012C6D                 db  98h
.eh_frame:0000000000012C6E                 db    9
.eh_frame:0000000000012C6F                 db  48h ; H
.eh_frame:0000000000012C70                 db  0Eh
.eh_frame:0000000000012C71                 db 0A0h
.eh_frame:0000000000012C72                 db    9
.eh_frame:0000000000012C73                 db  7Dh ; }
.eh_frame:0000000000012C74                 db  0Eh
.eh_frame:0000000000012C75                 db  98h
.eh_frame:0000000000012C76                 db    9
.eh_frame:0000000000012C77                 db  41h ; A
.eh_frame:0000000000012C78                 db  0Eh
.eh_frame:0000000000012C79                 db  90h
.eh_frame:0000000000012C7A                 db    9
.eh_frame:0000000000012C7B                 db    0
.eh_frame:0000000000012C7C                 db  40h ; @
.eh_frame:0000000000012C7D                 db    0
.eh_frame:0000000000012C7E                 db    0
.eh_frame:0000000000012C7F                 db    0
.eh_frame:0000000000012C80                 db 0B0h
.eh_frame:0000000000012C81                 db    6
.eh_frame:0000000000012C82                 db    0
.eh_frame:0000000000012C83                 db    0
.eh_frame:0000000000012C84                 db  4Ch ; L
.eh_frame:0000000000012C85                 db  5Ah ; Z
.eh_frame:0000000000012C86                 db 0FFh
.eh_frame:0000000000012C87                 db 0FFh
.eh_frame:0000000000012C88                 db  6Ah ; j
.eh_frame:0000000000012C89                 db    0
.eh_frame:0000000000012C8A                 db    0
.eh_frame:0000000000012C8B                 db    0
.eh_frame:0000000000012C8C                 db    0
.eh_frame:0000000000012C8D                 db  42h ; B
.eh_frame:0000000000012C8E                 db  0Eh
.eh_frame:0000000000012C8F                 db  10h
.eh_frame:0000000000012C90                 db  8Eh
.eh_frame:0000000000012C91                 db    2
.eh_frame:0000000000012C92                 db  42h ; B
.eh_frame:0000000000012C93                 db  0Eh
.eh_frame:0000000000012C94                 db  18h
.eh_frame:0000000000012C95                 db  8Dh
.eh_frame:0000000000012C96                 db    3
.eh_frame:0000000000012C97                 db  45h ; E
.eh_frame:0000000000012C98                 db  0Eh
.eh_frame:0000000000012C99                 db  20h
.eh_frame:0000000000012C9A                 db  8Ch
.eh_frame:0000000000012C9B                 db    4
.eh_frame:0000000000012C9C                 db  41h ; A
.eh_frame:0000000000012C9D                 db  0Eh
.eh_frame:0000000000012C9E                 db  28h ; (
.eh_frame:0000000000012C9F                 db  86h
.eh_frame:0000000000012CA0                 db    5
.eh_frame:0000000000012CA1                 db  44h ; D
.eh_frame:0000000000012CA2                 db  0Eh
.eh_frame:0000000000012CA3                 db  30h ; 0
.eh_frame:0000000000012CA4                 db  83h
.eh_frame:0000000000012CA5                 db    6
.eh_frame:0000000000012CA6                 db  4Eh ; N
.eh_frame:0000000000012CA7                 db  0Eh
.eh_frame:0000000000012CA8                 db  40h ; @
.eh_frame:0000000000012CA9                 db    2
.eh_frame:0000000000012CAA                 db  45h ; E
.eh_frame:0000000000012CAB                 db  0Eh
.eh_frame:0000000000012CAC                 db  30h ; 0
.eh_frame:0000000000012CAD                 db  41h ; A
.eh_frame:0000000000012CAE                 db  0Eh
.eh_frame:0000000000012CAF                 db  28h ; (
.eh_frame:0000000000012CB0                 db  41h ; A
.eh_frame:0000000000012CB1                 db  0Eh
.eh_frame:0000000000012CB2                 db  20h
.eh_frame:0000000000012CB3                 db  42h ; B
.eh_frame:0000000000012CB4                 db  0Eh
.eh_frame:0000000000012CB5                 db  18h
.eh_frame:0000000000012CB6                 db  42h ; B
.eh_frame:0000000000012CB7                 db  0Eh
.eh_frame:0000000000012CB8                 db  10h
.eh_frame:0000000000012CB9                 db  42h ; B
.eh_frame:0000000000012CBA                 db  0Eh
.eh_frame:0000000000012CBB                 db    8
.eh_frame:0000000000012CBC                 db    0
.eh_frame:0000000000012CBD                 db    0
.eh_frame:0000000000012CBE                 db    0
.eh_frame:0000000000012CBF                 db    0
.eh_frame:0000000000012CC0                 db  28h ; (
.eh_frame:0000000000012CC1                 db    0
.eh_frame:0000000000012CC2                 db    0
.eh_frame:0000000000012CC3                 db    0
.eh_frame:0000000000012CC4                 db 0F4h
.eh_frame:0000000000012CC5                 db    6
.eh_frame:0000000000012CC6                 db    0
.eh_frame:0000000000012CC7                 db    0
.eh_frame:0000000000012CC8                 db  78h ; x
.eh_frame:0000000000012CC9                 db  5Ah ; Z
.eh_frame:0000000000012CCA                 db 0FFh
.eh_frame:0000000000012CCB                 db 0FFh
.eh_frame:0000000000012CCC                 db 0B6h
.eh_frame:0000000000012CCD                 db    0
.eh_frame:0000000000012CCE                 db    0
.eh_frame:0000000000012CCF                 db    0
.eh_frame:0000000000012CD0                 db    0
.eh_frame:0000000000012CD1                 db  41h ; A
.eh_frame:0000000000012CD2                 db  0Eh
.eh_frame:0000000000012CD3                 db  10h
.eh_frame:0000000000012CD4                 db  86h
.eh_frame:0000000000012CD5                 db    2
.eh_frame:0000000000012CD6                 db  41h ; A
.eh_frame:0000000000012CD7                 db  0Eh
.eh_frame:0000000000012CD8                 db  18h
.eh_frame:0000000000012CD9                 db  83h
.eh_frame:0000000000012CDA                 db    3
.eh_frame:0000000000012CDB                 db  47h ; G
.eh_frame:0000000000012CDC                 db  0Eh
.eh_frame:0000000000012CDD                 db  30h ; 0
.eh_frame:0000000000012CDE                 db    2
.eh_frame:0000000000012CDF                 db  65h ; e
.eh_frame:0000000000012CE0                 db  0Ah
.eh_frame:0000000000012CE1                 db  0Eh
.eh_frame:0000000000012CE2                 db  18h
.eh_frame:0000000000012CE3                 db  41h ; A
.eh_frame:0000000000012CE4                 db  0Eh
.eh_frame:0000000000012CE5                 db  10h
.eh_frame:0000000000012CE6                 db  41h ; A
.eh_frame:0000000000012CE7                 db  0Eh
.eh_frame:0000000000012CE8                 db    8
.eh_frame:0000000000012CE9                 db  48h ; H
.eh_frame:0000000000012CEA                 db  0Bh
.eh_frame:0000000000012CEB                 db    0
.eh_frame:0000000000012CEC                 db  48h ; H
.eh_frame:0000000000012CED                 db    0
.eh_frame:0000000000012CEE                 db    0
.eh_frame:0000000000012CEF                 db    0
.eh_frame:0000000000012CF0                 db  20h
.eh_frame:0000000000012CF1                 db    7
.eh_frame:0000000000012CF2                 db    0
.eh_frame:0000000000012CF3                 db    0
.eh_frame:0000000000012CF4                 db  0Ch
.eh_frame:0000000000012CF5                 db  5Bh ; [
.eh_frame:0000000000012CF6                 db 0FFh
.eh_frame:0000000000012CF7                 db 0FFh
.eh_frame:0000000000012CF8                 db 0E4h
.eh_frame:0000000000012CF9                 db    2
.eh_frame:0000000000012CFA                 db    0
.eh_frame:0000000000012CFB                 db    0
.eh_frame:0000000000012CFC                 db    0
.eh_frame:0000000000012CFD                 db  42h ; B
.eh_frame:0000000000012CFE                 db  0Eh
.eh_frame:0000000000012CFF                 db  10h
.eh_frame:0000000000012D00                 db  8Fh
.eh_frame:0000000000012D01                 db    2
.eh_frame:0000000000012D02                 db  42h ; B
.eh_frame:0000000000012D03                 db  0Eh
.eh_frame:0000000000012D04                 db  18h
.eh_frame:0000000000012D05                 db  8Eh
.eh_frame:0000000000012D06                 db    3
.eh_frame:0000000000012D07                 db  42h ; B
.eh_frame:0000000000012D08                 db  0Eh
.eh_frame:0000000000012D09                 db  20h
.eh_frame:0000000000012D0A                 db  8Dh
.eh_frame:0000000000012D0B                 db    4
.eh_frame:0000000000012D0C                 db  42h ; B
.eh_frame:0000000000012D0D                 db  0Eh
.eh_frame:0000000000012D0E                 db  28h ; (
.eh_frame:0000000000012D0F                 db  8Ch
.eh_frame:0000000000012D10                 db    5
.eh_frame:0000000000012D11                 db  44h ; D
.eh_frame:0000000000012D12                 db  0Eh
.eh_frame:0000000000012D13                 db  30h ; 0
.eh_frame:0000000000012D14                 db  86h
.eh_frame:0000000000012D15                 db    6
.eh_frame:0000000000012D16                 db  41h ; A
.eh_frame:0000000000012D17                 db  0Eh
.eh_frame:0000000000012D18                 db  38h ; 8
.eh_frame:0000000000012D19                 db  83h
.eh_frame:0000000000012D1A                 db    7
.eh_frame:0000000000012D1B                 db  4Fh ; O
.eh_frame:0000000000012D1C                 db  0Eh
.eh_frame:0000000000012D1D                 db  90h
.eh_frame:0000000000012D1E                 db    2
.eh_frame:0000000000012D1F                 db    2
.eh_frame:0000000000012D20                 db  66h ; f
.eh_frame:0000000000012D21                 db  0Ah
.eh_frame:0000000000012D22                 db  0Eh
.eh_frame:0000000000012D23                 db  38h ; 8
.eh_frame:0000000000012D24                 db  41h ; A
.eh_frame:0000000000012D25                 db  0Eh
.eh_frame:0000000000012D26                 db  30h ; 0
.eh_frame:0000000000012D27                 db  41h ; A
.eh_frame:0000000000012D28                 db  0Eh
.eh_frame:0000000000012D29                 db  28h ; (
.eh_frame:0000000000012D2A                 db  42h ; B
.eh_frame:0000000000012D2B                 db  0Eh
.eh_frame:0000000000012D2C                 db  20h
.eh_frame:0000000000012D2D                 db  42h ; B
.eh_frame:0000000000012D2E                 db  0Eh
.eh_frame:0000000000012D2F                 db  18h
.eh_frame:0000000000012D30                 db  42h ; B
.eh_frame:0000000000012D31                 db  0Eh
.eh_frame:0000000000012D32                 db  10h
.eh_frame:0000000000012D33                 db  42h ; B
.eh_frame:0000000000012D34                 db  0Eh
.eh_frame:0000000000012D35                 db    8
.eh_frame:0000000000012D36                 db  44h ; D
.eh_frame:0000000000012D37                 db  0Bh
.eh_frame:0000000000012D38                 db  24h ; $
.eh_frame:0000000000012D39                 db    0
.eh_frame:0000000000012D3A                 db    0
.eh_frame:0000000000012D3B                 db    0
.eh_frame:0000000000012D3C                 db  6Ch ; l
.eh_frame:0000000000012D3D                 db    7
.eh_frame:0000000000012D3E                 db    0
.eh_frame:0000000000012D3F                 db    0
.eh_frame:0000000000012D40                 db 0B0h
.eh_frame:0000000000012D41                 db  5Dh ; ]
.eh_frame:0000000000012D42                 db 0FFh
.eh_frame:0000000000012D43                 db 0FFh
.eh_frame:0000000000012D44                 db  8Eh
.eh_frame:0000000000012D45                 db    0
.eh_frame:0000000000012D46                 db    0
.eh_frame:0000000000012D47                 db    0
.eh_frame:0000000000012D48                 db    0
.eh_frame:0000000000012D49                 db  41h ; A
.eh_frame:0000000000012D4A                 db  0Eh
.eh_frame:0000000000012D4B                 db  10h
.eh_frame:0000000000012D4C                 db  83h
.eh_frame:0000000000012D4D                 db    2
.eh_frame:0000000000012D4E                 db  50h ; P
.eh_frame:0000000000012D4F                 db  0Eh
.eh_frame:0000000000012D50                 db  20h
.eh_frame:0000000000012D51                 db  75h ; u
.eh_frame:0000000000012D52                 db  0Ah
.eh_frame:0000000000012D53                 db  0Eh
.eh_frame:0000000000012D54                 db  10h
.eh_frame:0000000000012D55                 db  41h ; A
.eh_frame:0000000000012D56                 db  0Eh
.eh_frame:0000000000012D57                 db    8
.eh_frame:0000000000012D58                 db  49h ; I
.eh_frame:0000000000012D59                 db  0Bh
.eh_frame:0000000000012D5A                 db    0
.eh_frame:0000000000012D5B                 db    0
.eh_frame:0000000000012D5C                 db    0
.eh_frame:0000000000012D5D                 db    0
.eh_frame:0000000000012D5E                 db    0
.eh_frame:0000000000012D5F                 db    0
.eh_frame:0000000000012D60                 db  1Ch
.eh_frame:0000000000012D61                 db    0
.eh_frame:0000000000012D62                 db    0
.eh_frame:0000000000012D63                 db    0
.eh_frame:0000000000012D64                 db  94h
.eh_frame:0000000000012D65                 db    7
.eh_frame:0000000000012D66                 db    0
.eh_frame:0000000000012D67                 db    0
.eh_frame:0000000000012D68                 db  18h
.eh_frame:0000000000012D69                 db  5Eh ; ^
.eh_frame:0000000000012D6A                 db 0FFh
.eh_frame:0000000000012D6B                 db 0FFh
.eh_frame:0000000000012D6C                 db  9Fh
.eh_frame:0000000000012D6D                 db    0
.eh_frame:0000000000012D6E                 db    0
.eh_frame:0000000000012D6F                 db    0
.eh_frame:0000000000012D70                 db    0
.eh_frame:0000000000012D71                 db  44h ; D
.eh_frame:0000000000012D72                 db  0Eh
.eh_frame:0000000000012D73                 db  10h
.eh_frame:0000000000012D74                 db  83h
.eh_frame:0000000000012D75                 db    2
.eh_frame:0000000000012D76                 db    2
.eh_frame:0000000000012D77                 db  78h ; x
.eh_frame:0000000000012D78                 db  0Ah
.eh_frame:0000000000012D79                 db  0Eh
.eh_frame:0000000000012D7A                 db    8
.eh_frame:0000000000012D7B                 db  41h ; A
.eh_frame:0000000000012D7C                 db  0Bh
.eh_frame:0000000000012D7D                 db    0
.eh_frame:0000000000012D7E                 db    0
.eh_frame:0000000000012D7F                 db    0
.eh_frame:0000000000012D80                 db  40h ; @
.eh_frame:0000000000012D81                 db    0
.eh_frame:0000000000012D82                 db    0
.eh_frame:0000000000012D83                 db    0
.eh_frame:0000000000012D84                 db 0B4h
.eh_frame:0000000000012D85                 db    7
.eh_frame:0000000000012D86                 db    0
.eh_frame:0000000000012D87                 db    0
.eh_frame:0000000000012D88                 db  98h
.eh_frame:0000000000012D89                 db  5Eh ; ^
.eh_frame:0000000000012D8A                 db 0FFh
.eh_frame:0000000000012D8B                 db 0FFh
.eh_frame:0000000000012D8C                 db 0E7h
.eh_frame:0000000000012D8D                 db    0
.eh_frame:0000000000012D8E                 db    0
.eh_frame:0000000000012D8F                 db    0
.eh_frame:0000000000012D90                 db    0
.eh_frame:0000000000012D91                 db  41h ; A
.eh_frame:0000000000012D92                 db  0Eh
.eh_frame:0000000000012D93                 db  10h
.eh_frame:0000000000012D94                 db  86h
.eh_frame:0000000000012D95                 db    2
.eh_frame:0000000000012D96                 db  41h ; A
.eh_frame:0000000000012D97                 db  0Eh
.eh_frame:0000000000012D98                 db  18h
.eh_frame:0000000000012D99                 db  83h
.eh_frame:0000000000012D9A                 db    3
.eh_frame:0000000000012D9B                 db  49h ; I
.eh_frame:0000000000012D9C                 db  0Eh
.eh_frame:0000000000012D9D                 db  20h
.eh_frame:0000000000012D9E                 db  6Eh ; n
.eh_frame:0000000000012D9F                 db  0Ah
.eh_frame:0000000000012DA0                 db  0Eh
.eh_frame:0000000000012DA1                 db  18h
.eh_frame:0000000000012DA2                 db  41h ; A
.eh_frame:0000000000012DA3                 db  0Eh
.eh_frame:0000000000012DA4                 db  10h
.eh_frame:0000000000012DA5                 db  41h ; A
.eh_frame:0000000000012DA6                 db  0Eh
.eh_frame:0000000000012DA7                 db    8
.eh_frame:0000000000012DA8                 db  45h ; E
.eh_frame:0000000000012DA9                 db  0Bh
.eh_frame:0000000000012DAA                 db    2
.eh_frame:0000000000012DAB                 db  4Ah ; J
.eh_frame:0000000000012DAC                 db  0Ah
.eh_frame:0000000000012DAD                 db  0Eh
.eh_frame:0000000000012DAE                 db  18h
.eh_frame:0000000000012DAF                 db  41h ; A
.eh_frame:0000000000012DB0                 db  0Eh
.eh_frame:0000000000012DB1                 db  10h
.eh_frame:0000000000012DB2                 db  41h ; A
.eh_frame:0000000000012DB3                 db  0Eh
.eh_frame:0000000000012DB4                 db    8
.eh_frame:0000000000012DB5                 db  44h ; D
.eh_frame:0000000000012DB6                 db  0Bh
.eh_frame:0000000000012DB7                 db    2
.eh_frame:0000000000012DB8                 db  54h ; T
.eh_frame:0000000000012DB9                 db  0Eh
.eh_frame:0000000000012DBA                 db  18h
.eh_frame:0000000000012DBB                 db  41h ; A
.eh_frame:0000000000012DBC                 db  0Eh
.eh_frame:0000000000012DBD                 db  10h
.eh_frame:0000000000012DBE                 db  41h ; A
.eh_frame:0000000000012DBF                 db  0Eh
.eh_frame:0000000000012DC0                 db    8
.eh_frame:0000000000012DC1                 db    0
.eh_frame:0000000000012DC2                 db    0
.eh_frame:0000000000012DC3                 db    0
.eh_frame:0000000000012DC4                 db  74h ; t
.eh_frame:0000000000012DC5                 db    0
.eh_frame:0000000000012DC6                 db    0
.eh_frame:0000000000012DC7                 db    0
.eh_frame:0000000000012DC8                 db 0F8h
.eh_frame:0000000000012DC9                 db    7
.eh_frame:0000000000012DCA                 db    0
.eh_frame:0000000000012DCB                 db    0
.eh_frame:0000000000012DCC                 db  44h ; D
.eh_frame:0000000000012DCD                 db  5Fh ; _
.eh_frame:0000000000012DCE                 db 0FFh
.eh_frame:0000000000012DCF                 db 0FFh
.eh_frame:0000000000012DD0                 db  34h ; 4
.eh_frame:0000000000012DD1                 db  12h
.eh_frame:0000000000012DD2                 db    0
.eh_frame:0000000000012DD3                 db    0
.eh_frame:0000000000012DD4                 db    0
.eh_frame:0000000000012DD5                 db  42h ; B
.eh_frame:0000000000012DD6                 db  0Eh
.eh_frame:0000000000012DD7                 db  10h
.eh_frame:0000000000012DD8                 db  8Fh
.eh_frame:0000000000012DD9                 db    2
.eh_frame:0000000000012DDA                 db  42h ; B
.eh_frame:0000000000012DDB                 db  0Eh
.eh_frame:0000000000012DDC                 db  18h
.eh_frame:0000000000012DDD                 db  8Eh
.eh_frame:0000000000012DDE                 db    3
.eh_frame:0000000000012DDF                 db  45h ; E
.eh_frame:0000000000012DE0                 db  0Eh
.eh_frame:0000000000012DE1                 db  20h
.eh_frame:0000000000012DE2                 db  8Dh
.eh_frame:0000000000012DE3                 db    4
.eh_frame:0000000000012DE4                 db  42h ; B
.eh_frame:0000000000012DE5                 db  0Eh
.eh_frame:0000000000012DE6                 db  28h ; (
.eh_frame:0000000000012DE7                 db  8Ch
.eh_frame:0000000000012DE8                 db    5
.eh_frame:0000000000012DE9                 db  44h ; D
.eh_frame:0000000000012DEA                 db  0Eh
.eh_frame:0000000000012DEB                 db  30h ; 0
.eh_frame:0000000000012DEC                 db  86h
.eh_frame:0000000000012DED                 db    6
.eh_frame:0000000000012DEE                 db  41h ; A
.eh_frame:0000000000012DEF                 db  0Eh
.eh_frame:0000000000012DF0                 db  38h ; 8
.eh_frame:0000000000012DF1                 db  83h
.eh_frame:0000000000012DF2                 db    7
.eh_frame:0000000000012DF3                 db  53h ; S
.eh_frame:0000000000012DF4                 db  0Eh
.eh_frame:0000000000012DF5                 db 0F0h
.eh_frame:0000000000012DF6                 db    1
.eh_frame:0000000000012DF7                 db    3
.eh_frame:0000000000012DF8                 db  81h
.eh_frame:0000000000012DF9                 db  0Bh
.eh_frame:0000000000012DFA                 db  0Eh
.eh_frame:0000000000012DFB                 db 0F8h
.eh_frame:0000000000012DFC                 db    1
.eh_frame:0000000000012DFD                 db  4Ah ; J
.eh_frame:0000000000012DFE                 db  0Eh
.eh_frame:0000000000012DFF                 db  80h
.eh_frame:0000000000012E00                 db    2
.eh_frame:0000000000012E01                 db  44h ; D
.eh_frame:0000000000012E02                 db  0Eh
.eh_frame:0000000000012E03                 db  88h
.eh_frame:0000000000012E04                 db    2
.eh_frame:0000000000012E05                 db  45h ; E
.eh_frame:0000000000012E06                 db  0Eh
.eh_frame:0000000000012E07                 db  90h
.eh_frame:0000000000012E08                 db    2
.eh_frame:0000000000012E09                 db  5Fh ; _
.eh_frame:0000000000012E0A                 db  0Eh
.eh_frame:0000000000012E0B                 db 0F0h
.eh_frame:0000000000012E0C                 db    1
.eh_frame:0000000000012E0D                 db  64h ; d
.eh_frame:0000000000012E0E                 db  0Ah
.eh_frame:0000000000012E0F                 db  0Eh
.eh_frame:0000000000012E10                 db  38h ; 8
.eh_frame:0000000000012E11                 db  41h ; A
.eh_frame:0000000000012E12                 db  0Eh
.eh_frame:0000000000012E13                 db  30h ; 0
.eh_frame:0000000000012E14                 db  41h ; A
.eh_frame:0000000000012E15                 db  0Eh
.eh_frame:0000000000012E16                 db  28h ; (
.eh_frame:0000000000012E17                 db  42h ; B
.eh_frame:0000000000012E18                 db  0Eh
.eh_frame:0000000000012E19                 db  20h
.eh_frame:0000000000012E1A                 db  42h ; B
.eh_frame:0000000000012E1B                 db  0Eh
.eh_frame:0000000000012E1C                 db  18h
.eh_frame:0000000000012E1D                 db  42h ; B
.eh_frame:0000000000012E1E                 db  0Eh
.eh_frame:0000000000012E1F                 db  10h
.eh_frame:0000000000012E20                 db  42h ; B
.eh_frame:0000000000012E21                 db  0Eh
.eh_frame:0000000000012E22                 db    8
.eh_frame:0000000000012E23                 db  44h ; D
.eh_frame:0000000000012E24                 db  0Bh
.eh_frame:0000000000012E25                 db    3
.eh_frame:0000000000012E26                 db  99h
.eh_frame:0000000000012E27                 db    5
.eh_frame:0000000000012E28                 db  0Eh
.eh_frame:0000000000012E29                 db 0F8h
.eh_frame:0000000000012E2A                 db    1
.eh_frame:0000000000012E2B                 db  4Dh ; M
.eh_frame:0000000000012E2C                 db  0Eh
.eh_frame:0000000000012E2D                 db  80h
.eh_frame:0000000000012E2E                 db    2
.eh_frame:0000000000012E2F                 db  44h ; D
.eh_frame:0000000000012E30                 db  0Eh
.eh_frame:0000000000012E31                 db  88h
.eh_frame:0000000000012E32                 db    2
.eh_frame:0000000000012E33                 db  47h ; G
.eh_frame:0000000000012E34                 db  0Eh
.eh_frame:0000000000012E35                 db  90h
.eh_frame:0000000000012E36                 db    2
.eh_frame:0000000000012E37                 db  5Bh ; [
.eh_frame:0000000000012E38                 db  0Eh
.eh_frame:0000000000012E39                 db 0F0h
.eh_frame:0000000000012E3A                 db    1
.eh_frame:0000000000012E3B                 db    0
.eh_frame:0000000000012E3C                 db  68h ; h
.eh_frame:0000000000012E3D                 db    0
.eh_frame:0000000000012E3E                 db    0
.eh_frame:0000000000012E3F                 db    0
.eh_frame:0000000000012E40                 db  70h ; p
.eh_frame:0000000000012E41                 db    8
.eh_frame:0000000000012E42                 db    0
.eh_frame:0000000000012E43                 db    0
.eh_frame:0000000000012E44                 db  0Ch
.eh_frame:0000000000012E45                 db  71h ; q
.eh_frame:0000000000012E46                 db 0FFh
.eh_frame:0000000000012E47                 db 0FFh
.eh_frame:0000000000012E48                 db 0ABh
.eh_frame:0000000000012E49                 db    1
.eh_frame:0000000000012E4A                 db    0
.eh_frame:0000000000012E4B                 db    0
.eh_frame:0000000000012E4C                 db    0
.eh_frame:0000000000012E4D                 db  42h ; B
.eh_frame:0000000000012E4E                 db  0Eh
.eh_frame:0000000000012E4F                 db  10h
.eh_frame:0000000000012E50                 db  8Fh
.eh_frame:0000000000012E51                 db    2
.eh_frame:0000000000012E52                 db  42h ; B
.eh_frame:0000000000012E53                 db  0Eh
.eh_frame:0000000000012E54                 db  18h
.eh_frame:0000000000012E55                 db  8Eh
.eh_frame:0000000000012E56                 db    3
.eh_frame:0000000000012E57                 db  45h ; E
.eh_frame:0000000000012E58                 db  0Eh
.eh_frame:0000000000012E59                 db  20h
.eh_frame:0000000000012E5A                 db  8Dh
.eh_frame:0000000000012E5B                 db    4
.eh_frame:0000000000012E5C                 db  42h ; B
.eh_frame:0000000000012E5D                 db  0Eh
.eh_frame:0000000000012E5E                 db  28h ; (
.eh_frame:0000000000012E5F                 db  8Ch
.eh_frame:0000000000012E60                 db    5
.eh_frame:0000000000012E61                 db  44h ; D
.eh_frame:0000000000012E62                 db  0Eh
.eh_frame:0000000000012E63                 db  30h ; 0
.eh_frame:0000000000012E64                 db  86h
.eh_frame:0000000000012E65                 db    6
.eh_frame:0000000000012E66                 db  41h ; A
.eh_frame:0000000000012E67                 db  0Eh
.eh_frame:0000000000012E68                 db  38h ; 8
.eh_frame:0000000000012E69                 db  83h
.eh_frame:0000000000012E6A                 db    7
.eh_frame:0000000000012E6B                 db  47h ; G
.eh_frame:0000000000012E6C                 db  0Eh
.eh_frame:0000000000012E6D                 db  60h ; `
.eh_frame:0000000000012E6E                 db    2
.eh_frame:0000000000012E6F                 db  99h
.eh_frame:0000000000012E70                 db  0Eh
.eh_frame:0000000000012E71                 db  68h ; h
.eh_frame:0000000000012E72                 db  5Fh ; _
.eh_frame:0000000000012E73                 db  0Eh
.eh_frame:0000000000012E74                 db  70h ; p
.eh_frame:0000000000012E75                 db  46h ; F
.eh_frame:0000000000012E76                 db  0Eh
.eh_frame:0000000000012E77                 db  78h ; x
.eh_frame:0000000000012E78                 db  42h ; B
.eh_frame:0000000000012E79                 db  0Eh
.eh_frame:0000000000012E7A                 db  80h
.eh_frame:0000000000012E7B                 db    1
.eh_frame:0000000000012E7C                 db  59h ; Y
.eh_frame:0000000000012E7D                 db  0Eh
.eh_frame:0000000000012E7E                 db  60h ; `
.eh_frame:0000000000012E7F                 db    2
.eh_frame:0000000000012E80                 db  40h ; @
.eh_frame:0000000000012E81                 db  0Eh
.eh_frame:0000000000012E82                 db  68h ; h
.eh_frame:0000000000012E83                 db  4Bh ; K
.eh_frame:0000000000012E84                 db  0Eh
.eh_frame:0000000000012E85                 db  70h ; p
.eh_frame:0000000000012E86                 db  43h ; C
.eh_frame:0000000000012E87                 db  0Eh
.eh_frame:0000000000012E88                 db  78h ; x
.eh_frame:0000000000012E89                 db  45h ; E
.eh_frame:0000000000012E8A                 db  0Eh
.eh_frame:0000000000012E8B                 db  80h
.eh_frame:0000000000012E8C                 db    1
.eh_frame:0000000000012E8D                 db  5Eh ; ^
.eh_frame:0000000000012E8E                 db  0Eh
.eh_frame:0000000000012E8F                 db  60h ; `
.eh_frame:0000000000012E90                 db  4Ch ; L
.eh_frame:0000000000012E91                 db  0Ah
.eh_frame:0000000000012E92                 db  0Eh
.eh_frame:0000000000012E93                 db  38h ; 8
.eh_frame:0000000000012E94                 db  44h ; D
.eh_frame:0000000000012E95                 db  0Eh
.eh_frame:0000000000012E96                 db  30h ; 0
.eh_frame:0000000000012E97                 db  41h ; A
.eh_frame:0000000000012E98                 db  0Eh
.eh_frame:0000000000012E99                 db  28h ; (
.eh_frame:0000000000012E9A                 db  42h ; B
.eh_frame:0000000000012E9B                 db  0Eh
.eh_frame:0000000000012E9C                 db  20h
.eh_frame:0000000000012E9D                 db  42h ; B
.eh_frame:0000000000012E9E                 db  0Eh
.eh_frame:0000000000012E9F                 db  18h
.eh_frame:0000000000012EA0                 db  42h ; B
.eh_frame:0000000000012EA1                 db  0Eh
.eh_frame:0000000000012EA2                 db  10h
.eh_frame:0000000000012EA3                 db  42h ; B
.eh_frame:0000000000012EA4                 db  0Eh
.eh_frame:0000000000012EA5                 db    8
.eh_frame:0000000000012EA6                 db  46h ; F
.eh_frame:0000000000012EA7                 db  0Bh
.eh_frame:0000000000012EA8                 db  28h ; (
.eh_frame:0000000000012EA9                 db    0
.eh_frame:0000000000012EAA                 db    0
.eh_frame:0000000000012EAB                 db    0
.eh_frame:0000000000012EAC                 db 0DCh
.eh_frame:0000000000012EAD                 db    8
.eh_frame:0000000000012EAE                 db    0
.eh_frame:0000000000012EAF                 db    0
.eh_frame:0000000000012EB0                 db  50h ; P
.eh_frame:0000000000012EB1                 db  72h ; r
.eh_frame:0000000000012EB2                 db 0FFh
.eh_frame:0000000000012EB3                 db 0FFh
.eh_frame:0000000000012EB4                 db  36h ; 6
.eh_frame:0000000000012EB5                 db    0
.eh_frame:0000000000012EB6                 db    0
.eh_frame:0000000000012EB7                 db    0
.eh_frame:0000000000012EB8                 db    0
.eh_frame:0000000000012EB9                 db  42h ; B
.eh_frame:0000000000012EBA                 db  0Eh
.eh_frame:0000000000012EBB                 db  10h
.eh_frame:0000000000012EBC                 db  8Ch
.eh_frame:0000000000012EBD                 db    2
.eh_frame:0000000000012EBE                 db  41h ; A
.eh_frame:0000000000012EBF                 db  0Eh
.eh_frame:0000000000012EC0                 db  18h
.eh_frame:0000000000012EC1                 db  86h
.eh_frame:0000000000012EC2                 db    3
.eh_frame:0000000000012EC3                 db  41h ; A
.eh_frame:0000000000012EC4                 db  0Eh
.eh_frame:0000000000012EC5                 db  20h
.eh_frame:0000000000012EC6                 db  83h
.eh_frame:0000000000012EC7                 db    4
.eh_frame:0000000000012EC8                 db  6Eh ; n
.eh_frame:0000000000012EC9                 db  0Eh
.eh_frame:0000000000012ECA                 db  18h
.eh_frame:0000000000012ECB                 db  41h ; A
.eh_frame:0000000000012ECC                 db  0Eh
.eh_frame:0000000000012ECD                 db  10h
.eh_frame:0000000000012ECE                 db  42h ; B
.eh_frame:0000000000012ECF                 db  0Eh
.eh_frame:0000000000012ED0                 db    8
.eh_frame:0000000000012ED1                 db    0
.eh_frame:0000000000012ED2                 db    0
.eh_frame:0000000000012ED3                 db    0
.eh_frame:0000000000012ED4                 db  10h
.eh_frame:0000000000012ED5                 db    0
.eh_frame:0000000000012ED6                 db    0
.eh_frame:0000000000012ED7                 db    0
.eh_frame:0000000000012ED8                 db    8
.eh_frame:0000000000012ED9                 db    9
.eh_frame:0000000000012EDA                 db    0
.eh_frame:0000000000012EDB                 db    0
.eh_frame:0000000000012EDC                 db  64h ; d
.eh_frame:0000000000012EDD                 db  72h ; r
.eh_frame:0000000000012EDE                 db 0FFh
.eh_frame:0000000000012EDF                 db 0FFh
.eh_frame:0000000000012EE0                 db  11h
.eh_frame:0000000000012EE1                 db    0
.eh_frame:0000000000012EE2                 db    0
.eh_frame:0000000000012EE3                 db    0
.eh_frame:0000000000012EE4                 db    0
.eh_frame:0000000000012EE5                 db    0
.eh_frame:0000000000012EE6                 db    0
.eh_frame:0000000000012EE7                 db    0
.eh_frame:0000000000012EE8                 db  10h
.eh_frame:0000000000012EE9                 db    0
.eh_frame:0000000000012EEA                 db    0
.eh_frame:0000000000012EEB                 db    0
.eh_frame:0000000000012EEC                 db  1Ch
.eh_frame:0000000000012EED                 db    9
.eh_frame:0000000000012EEE                 db    0
.eh_frame:0000000000012EEF                 db    0
.eh_frame:0000000000012EF0                 db  70h ; p
.eh_frame:0000000000012EF1                 db  72h ; r
.eh_frame:0000000000012EF2                 db 0FFh
.eh_frame:0000000000012EF3                 db 0FFh
.eh_frame:0000000000012EF4                 db  11h
.eh_frame:0000000000012EF5                 db    0
.eh_frame:0000000000012EF6                 db    0
.eh_frame:0000000000012EF7                 db    0
.eh_frame:0000000000012EF8                 db    0
.eh_frame:0000000000012EF9                 db    0
.eh_frame:0000000000012EFA                 db    0
.eh_frame:0000000000012EFB                 db    0
.eh_frame:0000000000012EFC                 db  10h
.eh_frame:0000000000012EFD                 db    0
.eh_frame:0000000000012EFE                 db    0
.eh_frame:0000000000012EFF                 db    0
.eh_frame:0000000000012F00                 db  30h ; 0
.eh_frame:0000000000012F01                 db    9
.eh_frame:0000000000012F02                 db    0
.eh_frame:0000000000012F03                 db    0
.eh_frame:0000000000012F04                 db  7Ch ; |
.eh_frame:0000000000012F05                 db  72h ; r
.eh_frame:0000000000012F06                 db 0FFh
.eh_frame:0000000000012F07                 db 0FFh
.eh_frame:0000000000012F08                 db  35h ; 5
.eh_frame:0000000000012F09                 db    0
.eh_frame:0000000000012F0A                 db    0
.eh_frame:0000000000012F0B                 db    0
.eh_frame:0000000000012F0C                 db    0
.eh_frame:0000000000012F0D                 db    0
.eh_frame:0000000000012F0E                 db    0
.eh_frame:0000000000012F0F                 db    0
.eh_frame:0000000000012F10                 db  10h
.eh_frame:0000000000012F11                 db    0
.eh_frame:0000000000012F12                 db    0
.eh_frame:0000000000012F13                 db    0
.eh_frame:0000000000012F14                 db  44h ; D
.eh_frame:0000000000012F15                 db    9
.eh_frame:0000000000012F16                 db    0
.eh_frame:0000000000012F17                 db    0
.eh_frame:0000000000012F18                 db 0A8h
.eh_frame:0000000000012F19                 db  72h ; r
.eh_frame:0000000000012F1A                 db 0FFh
.eh_frame:0000000000012F1B                 db 0FFh
.eh_frame:0000000000012F1C                 db  15h
.eh_frame:0000000000012F1D                 db    0
.eh_frame:0000000000012F1E                 db    0
.eh_frame:0000000000012F1F                 db    0
.eh_frame:0000000000012F20                 db    0
.eh_frame:0000000000012F21                 db    0
.eh_frame:0000000000012F22                 db    0
.eh_frame:0000000000012F23                 db    0
.eh_frame:0000000000012F24                 db  10h
.eh_frame:0000000000012F25                 db    0
.eh_frame:0000000000012F26                 db    0
.eh_frame:0000000000012F27                 db    0
.eh_frame:0000000000012F28                 db  58h ; X
.eh_frame:0000000000012F29                 db    9
.eh_frame:0000000000012F2A                 db    0
.eh_frame:0000000000012F2B                 db    0
.eh_frame:0000000000012F2C                 db 0B4h
.eh_frame:0000000000012F2D                 db  72h ; r
.eh_frame:0000000000012F2E                 db 0FFh
.eh_frame:0000000000012F2F                 db 0FFh
.eh_frame:0000000000012F30                 db  30h ; 0
.eh_frame:0000000000012F31                 db    0
.eh_frame:0000000000012F32                 db    0
.eh_frame:0000000000012F33                 db    0
.eh_frame:0000000000012F34                 db    0
.eh_frame:0000000000012F35                 db  6Bh ; k
.eh_frame:0000000000012F36                 db  0Eh
.eh_frame:0000000000012F37                 db  10h
.eh_frame:0000000000012F38                 db  50h ; P
.eh_frame:0000000000012F39                 db    0
.eh_frame:0000000000012F3A                 db    0
.eh_frame:0000000000012F3B                 db    0
.eh_frame:0000000000012F3C                 db  6Ch ; l
.eh_frame:0000000000012F3D                 db    9
.eh_frame:0000000000012F3E                 db    0
.eh_frame:0000000000012F3F                 db    0
.eh_frame:0000000000012F40                 db 0D0h
.eh_frame:0000000000012F41                 db  72h ; r
.eh_frame:0000000000012F42                 db 0FFh
.eh_frame:0000000000012F43                 db 0FFh
.eh_frame:0000000000012F44                 db  74h ; t
.eh_frame:0000000000012F45                 db    0
.eh_frame:0000000000012F46                 db    0
.eh_frame:0000000000012F47                 db    0
.eh_frame:0000000000012F48                 db    0
.eh_frame:0000000000012F49                 db  42h ; B
.eh_frame:0000000000012F4A                 db  0Eh
.eh_frame:0000000000012F4B                 db  10h
.eh_frame:0000000000012F4C                 db  8Fh
.eh_frame:0000000000012F4D                 db    2
.eh_frame:0000000000012F4E                 db  42h ; B
.eh_frame:0000000000012F4F                 db  0Eh
.eh_frame:0000000000012F50                 db  18h
.eh_frame:0000000000012F51                 db  8Eh
.eh_frame:0000000000012F52                 db    3
.eh_frame:0000000000012F53                 db  49h ; I
.eh_frame:0000000000012F54                 db  0Eh
.eh_frame:0000000000012F55                 db  20h
.eh_frame:0000000000012F56                 db  8Dh
.eh_frame:0000000000012F57                 db    4
.eh_frame:0000000000012F58                 db  42h ; B
.eh_frame:0000000000012F59                 db  0Eh
.eh_frame:0000000000012F5A                 db  28h ; (
.eh_frame:0000000000012F5B                 db  8Ch
.eh_frame:0000000000012F5C                 db    5
.eh_frame:0000000000012F5D                 db  44h ; D
.eh_frame:0000000000012F5E                 db  0Eh
.eh_frame:0000000000012F5F                 db  30h ; 0
.eh_frame:0000000000012F60                 db  86h
.eh_frame:0000000000012F61                 db    6
.eh_frame:0000000000012F62                 db  41h ; A
.eh_frame:0000000000012F63                 db  0Eh
.eh_frame:0000000000012F64                 db  38h ; 8
.eh_frame:0000000000012F65                 db  83h
.eh_frame:0000000000012F66                 db    7
.eh_frame:0000000000012F67                 db  4Dh ; M
.eh_frame:0000000000012F68                 db  0Eh
.eh_frame:0000000000012F69                 db  50h ; P
.eh_frame:0000000000012F6A                 db  5Fh ; _
.eh_frame:0000000000012F6B                 db  0Eh
.eh_frame:0000000000012F6C                 db  58h ; X
.eh_frame:0000000000012F6D                 db  47h ; G
.eh_frame:0000000000012F6E                 db  0Eh
.eh_frame:0000000000012F6F                 db  60h ; `
.eh_frame:0000000000012F70                 db  46h ; F
.eh_frame:0000000000012F71                 db  0Eh
.eh_frame:0000000000012F72                 db  68h ; h
.eh_frame:0000000000012F73                 db  44h ; D
.eh_frame:0000000000012F74                 db  0Eh
.eh_frame:0000000000012F75                 db  70h ; p
.eh_frame:0000000000012F76                 db  58h ; X
.eh_frame:0000000000012F77                 db  0Eh
.eh_frame:0000000000012F78                 db  38h ; 8
.eh_frame:0000000000012F79                 db  41h ; A
.eh_frame:0000000000012F7A                 db  0Eh
.eh_frame:0000000000012F7B                 db  30h ; 0
.eh_frame:0000000000012F7C                 db  41h ; A
.eh_frame:0000000000012F7D                 db  0Eh
.eh_frame:0000000000012F7E                 db  28h ; (
.eh_frame:0000000000012F7F                 db  42h ; B
.eh_frame:0000000000012F80                 db  0Eh
.eh_frame:0000000000012F81                 db  20h
.eh_frame:0000000000012F82                 db  42h ; B
.eh_frame:0000000000012F83                 db  0Eh
.eh_frame:0000000000012F84                 db  18h
.eh_frame:0000000000012F85                 db  42h ; B
.eh_frame:0000000000012F86                 db  0Eh
.eh_frame:0000000000012F87                 db  10h
.eh_frame:0000000000012F88                 db  42h ; B
.eh_frame:0000000000012F89                 db  0Eh
.eh_frame:0000000000012F8A                 db    8
.eh_frame:0000000000012F8B                 db    0
.eh_frame:0000000000012F8C                 db  68h ; h
.eh_frame:0000000000012F8D                 db    0
.eh_frame:0000000000012F8E                 db    0
.eh_frame:0000000000012F8F                 db    0
.eh_frame:0000000000012F90                 db 0C0h
.eh_frame:0000000000012F91                 db    9
.eh_frame:0000000000012F92                 db    0
.eh_frame:0000000000012F93                 db    0
.eh_frame:0000000000012F94                 db 0FCh
.eh_frame:0000000000012F95                 db  72h ; r
.eh_frame:0000000000012F96                 db 0FFh
.eh_frame:0000000000012F97                 db 0FFh
.eh_frame:0000000000012F98                 db 0E3h
.eh_frame:0000000000012F99                 db    0
.eh_frame:0000000000012F9A                 db    0
.eh_frame:0000000000012F9B                 db    0
.eh_frame:0000000000012F9C                 db    0
.eh_frame:0000000000012F9D                 db  42h ; B
.eh_frame:0000000000012F9E                 db  0Eh
.eh_frame:0000000000012F9F                 db  10h
.eh_frame:0000000000012FA0                 db  8Fh
.eh_frame:0000000000012FA1                 db    2
.eh_frame:0000000000012FA2                 db  42h ; B
.eh_frame:0000000000012FA3                 db  0Eh
.eh_frame:0000000000012FA4                 db  18h
.eh_frame:0000000000012FA5                 db  8Eh
.eh_frame:0000000000012FA6                 db    3
.eh_frame:0000000000012FA7                 db  49h ; I
.eh_frame:0000000000012FA8                 db  0Eh
.eh_frame:0000000000012FA9                 db  20h
.eh_frame:0000000000012FAA                 db  8Dh
.eh_frame:0000000000012FAB                 db    4
.eh_frame:0000000000012FAC                 db  42h ; B
.eh_frame:0000000000012FAD                 db  0Eh
.eh_frame:0000000000012FAE                 db  28h ; (
.eh_frame:0000000000012FAF                 db  8Ch
.eh_frame:0000000000012FB0                 db    5
.eh_frame:0000000000012FB1                 db  44h ; D
.eh_frame:0000000000012FB2                 db  0Eh
.eh_frame:0000000000012FB3                 db  30h ; 0
.eh_frame:0000000000012FB4                 db  86h
.eh_frame:0000000000012FB5                 db    6
.eh_frame:0000000000012FB6                 db  41h ; A
.eh_frame:0000000000012FB7                 db  0Eh
.eh_frame:0000000000012FB8                 db  38h ; 8
.eh_frame:0000000000012FB9                 db  83h
.eh_frame:0000000000012FBA                 db    7
.eh_frame:0000000000012FBB                 db  4Dh ; M
.eh_frame:0000000000012FBC                 db  0Eh
.eh_frame:0000000000012FBD                 db  70h ; p
.eh_frame:0000000000012FBE                 db  65h ; e
.eh_frame:0000000000012FBF                 db  0Eh
.eh_frame:0000000000012FC0                 db  78h ; x
.eh_frame:0000000000012FC1                 db  4Dh ; M
.eh_frame:0000000000012FC2                 db  0Eh
.eh_frame:0000000000012FC3                 db  80h
.eh_frame:0000000000012FC4                 db    1
.eh_frame:0000000000012FC5                 db  46h ; F
.eh_frame:0000000000012FC6                 db  0Eh
.eh_frame:0000000000012FC7                 db  88h
.eh_frame:0000000000012FC8                 db    1
.eh_frame:0000000000012FC9                 db  42h ; B
.eh_frame:0000000000012FCA                 db  0Eh
.eh_frame:0000000000012FCB                 db  90h
.eh_frame:0000000000012FCC                 db    1
.eh_frame:0000000000012FCD                 db  5Eh ; ^
.eh_frame:0000000000012FCE                 db  0Eh
.eh_frame:0000000000012FCF                 db  70h ; p
.eh_frame:0000000000012FD0                 db  56h ; V
.eh_frame:0000000000012FD1                 db  0Eh
.eh_frame:0000000000012FD2                 db  78h ; x
.eh_frame:0000000000012FD3                 db  43h ; C
.eh_frame:0000000000012FD4                 db  0Eh
.eh_frame:0000000000012FD5                 db  80h
.eh_frame:0000000000012FD6                 db    1
.eh_frame:0000000000012FD7                 db  43h ; C
.eh_frame:0000000000012FD8                 db  0Eh
.eh_frame:0000000000012FD9                 db  88h
.eh_frame:0000000000012FDA                 db    1
.eh_frame:0000000000012FDB                 db  56h ; V
.eh_frame:0000000000012FDC                 db  0Eh
.eh_frame:0000000000012FDD                 db  90h
.eh_frame:0000000000012FDE                 db    1
.eh_frame:0000000000012FDF                 db  52h ; R
.eh_frame:0000000000012FE0                 db  0Eh
.eh_frame:0000000000012FE1                 db  70h ; p
.eh_frame:0000000000012FE2                 db  5Bh ; [
.eh_frame:0000000000012FE3                 db  0Eh
.eh_frame:0000000000012FE4                 db  38h ; 8
.eh_frame:0000000000012FE5                 db  41h ; A
.eh_frame:0000000000012FE6                 db  0Eh
.eh_frame:0000000000012FE7                 db  30h ; 0
.eh_frame:0000000000012FE8                 db  41h ; A
.eh_frame:0000000000012FE9                 db  0Eh
.eh_frame:0000000000012FEA                 db  28h ; (
.eh_frame:0000000000012FEB                 db  42h ; B
.eh_frame:0000000000012FEC                 db  0Eh
.eh_frame:0000000000012FED                 db  20h
.eh_frame:0000000000012FEE                 db  42h ; B
.eh_frame:0000000000012FEF                 db  0Eh
.eh_frame:0000000000012FF0                 db  18h
.eh_frame:0000000000012FF1                 db  42h ; B
.eh_frame:0000000000012FF2                 db  0Eh
.eh_frame:0000000000012FF3                 db  10h
.eh_frame:0000000000012FF4                 db  42h ; B
.eh_frame:0000000000012FF5                 db  0Eh
.eh_frame:0000000000012FF6                 db    8
.eh_frame:0000000000012FF7                 db    0
.eh_frame:0000000000012FF8                 db  10h
.eh_frame:0000000000012FF9                 db    0
.eh_frame:0000000000012FFA                 db    0
.eh_frame:0000000000012FFB                 db    0
.eh_frame:0000000000012FFC                 db  2Ch ; ,
.eh_frame:0000000000012FFD                 db  0Ah
.eh_frame:0000000000012FFE                 db    0
.eh_frame:0000000000012FFF                 db    0
.eh_frame:0000000000013000                 db  80h
.eh_frame:0000000000013001                 db  73h ; s
.eh_frame:0000000000013002                 db 0FFh
.eh_frame:0000000000013003                 db 0FFh
.eh_frame:0000000000013004                 db  0Ah
.eh_frame:0000000000013005                 db    0
.eh_frame:0000000000013006                 db    0
.eh_frame:0000000000013007                 db    0
.eh_frame:0000000000013008                 db    0
.eh_frame:0000000000013009                 db    0
.eh_frame:000000000001300A                 db    0
.eh_frame:000000000001300B                 db    0
.eh_frame:000000000001300C                 db  28h ; (
.eh_frame:000000000001300D                 db    0
.eh_frame:000000000001300E                 db    0
.eh_frame:000000000001300F                 db    0
.eh_frame:0000000000013010                 db  40h ; @
.eh_frame:0000000000013011                 db  0Ah
.eh_frame:0000000000013012                 db    0
.eh_frame:0000000000013013                 db    0
.eh_frame:0000000000013014                 db  7Ch ; |
.eh_frame:0000000000013015                 db  73h ; s
.eh_frame:0000000000013016                 db 0FFh
.eh_frame:0000000000013017                 db 0FFh
.eh_frame:0000000000013018                 db  93h
.eh_frame:0000000000013019                 db    0
.eh_frame:000000000001301A                 db    0
.eh_frame:000000000001301B                 db    0
.eh_frame:000000000001301C                 db    0
.eh_frame:000000000001301D                 db  48h ; H
.eh_frame:000000000001301E                 db  0Eh
.eh_frame:000000000001301F                 db  10h
.eh_frame:0000000000013020                 db  8Ch
.eh_frame:0000000000013021                 db    2
.eh_frame:0000000000013022                 db  48h ; H
.eh_frame:0000000000013023                 db  0Eh
.eh_frame:0000000000013024                 db  18h
.eh_frame:0000000000013025                 db  86h
.eh_frame:0000000000013026                 db    3
.eh_frame:0000000000013027                 db  41h ; A
.eh_frame:0000000000013028                 db  0Eh
.eh_frame:0000000000013029                 db  20h
.eh_frame:000000000001302A                 db  83h
.eh_frame:000000000001302B                 db    4
.eh_frame:000000000001302C                 db    2
.eh_frame:000000000001302D                 db  74h ; t
.eh_frame:000000000001302E                 db  0Eh
.eh_frame:000000000001302F                 db  18h
.eh_frame:0000000000013030                 db  4Bh ; K
.eh_frame:0000000000013031                 db  0Eh
.eh_frame:0000000000013032                 db  10h
.eh_frame:0000000000013033                 db  42h ; B
.eh_frame:0000000000013034                 db  0Eh
.eh_frame:0000000000013035                 db    8
.eh_frame:0000000000013036                 db    0
.eh_frame:0000000000013037                 db    0
.eh_frame:0000000000013038                 db  10h
.eh_frame:0000000000013039                 db    0
.eh_frame:000000000001303A                 db    0
.eh_frame:000000000001303B                 db    0
.eh_frame:000000000001303C                 db  6Ch ; l
.eh_frame:000000000001303D                 db  0Ah
.eh_frame:000000000001303E                 db    0
.eh_frame:000000000001303F                 db    0
.eh_frame:0000000000013040                 db 0F0h
.eh_frame:0000000000013041                 db  73h ; s
.eh_frame:0000000000013042                 db 0FFh
.eh_frame:0000000000013043                 db 0FFh
.eh_frame:0000000000013044                 db  13h
.eh_frame:0000000000013045                 db    0
.eh_frame:0000000000013046                 db    0
.eh_frame:0000000000013047                 db    0
.eh_frame:0000000000013048                 db    0
.eh_frame:0000000000013049                 db    0
.eh_frame:000000000001304A                 db    0
.eh_frame:000000000001304B                 db    0
.eh_frame:000000000001304C                 db  10h
.eh_frame:000000000001304D                 db    0
.eh_frame:000000000001304E                 db    0
.eh_frame:000000000001304F                 db    0
.eh_frame:0000000000013050                 db  80h
.eh_frame:0000000000013051                 db  0Ah
.eh_frame:0000000000013052                 db    0
.eh_frame:0000000000013053                 db    0
.eh_frame:0000000000013054                 db 0FCh
.eh_frame:0000000000013055                 db  73h ; s
.eh_frame:0000000000013056                 db 0FFh
.eh_frame:0000000000013057                 db 0FFh
.eh_frame:0000000000013058                 db  0Ch
.eh_frame:0000000000013059                 db    0
.eh_frame:000000000001305A                 db    0
.eh_frame:000000000001305B                 db    0
.eh_frame:000000000001305C                 db    0
.eh_frame:000000000001305D                 db    0
.eh_frame:000000000001305E                 db    0
.eh_frame:000000000001305F                 db    0
.eh_frame:0000000000013060                 db  10h
.eh_frame:0000000000013061                 db    0
.eh_frame:0000000000013062                 db    0
.eh_frame:0000000000013063                 db    0
.eh_frame:0000000000013064                 db  94h
.eh_frame:0000000000013065                 db  0Ah
.eh_frame:0000000000013066                 db    0
.eh_frame:0000000000013067                 db    0
.eh_frame:0000000000013068                 db 0F8h
.eh_frame:0000000000013069                 db  73h ; s
.eh_frame:000000000001306A                 db 0FFh
.eh_frame:000000000001306B                 db 0FFh
.eh_frame:000000000001306C                 db  18h
.eh_frame:000000000001306D                 db    0
.eh_frame:000000000001306E                 db    0
.eh_frame:000000000001306F                 db    0
.eh_frame:0000000000013070                 db    0
.eh_frame:0000000000013071                 db    0
.eh_frame:0000000000013072                 db    0
.eh_frame:0000000000013073                 db    0
.eh_frame:0000000000013074                 db  10h
.eh_frame:0000000000013075                 db    0
.eh_frame:0000000000013076                 db    0
.eh_frame:0000000000013077                 db    0
.eh_frame:0000000000013078                 db 0A8h
.eh_frame:0000000000013079                 db  0Ah
.eh_frame:000000000001307A                 db    0
.eh_frame:000000000001307B                 db    0
.eh_frame:000000000001307C                 db    4
.eh_frame:000000000001307D                 db  74h ; t
.eh_frame:000000000001307E                 db 0FFh
.eh_frame:000000000001307F                 db 0FFh
.eh_frame:0000000000013080                 db  14h
.eh_frame:0000000000013081                 db    0
.eh_frame:0000000000013082                 db    0
.eh_frame:0000000000013083                 db    0
.eh_frame:0000000000013084                 db    0
.eh_frame:0000000000013085                 db    0
.eh_frame:0000000000013086                 db    0
.eh_frame:0000000000013087                 db    0
.eh_frame:0000000000013088                 db  18h
.eh_frame:0000000000013089                 db    0
.eh_frame:000000000001308A                 db    0
.eh_frame:000000000001308B                 db    0
.eh_frame:000000000001308C                 db 0BCh
.eh_frame:000000000001308D                 db  0Ah
.eh_frame:000000000001308E                 db    0
.eh_frame:000000000001308F                 db    0
.eh_frame:0000000000013090                 db  10h
.eh_frame:0000000000013091                 db  74h ; t
.eh_frame:0000000000013092                 db 0FFh
.eh_frame:0000000000013093                 db 0FFh
.eh_frame:0000000000013094                 db  8Eh
.eh_frame:0000000000013095                 db    0
.eh_frame:0000000000013096                 db    0
.eh_frame:0000000000013097                 db    0
.eh_frame:0000000000013098                 db    0
.eh_frame:0000000000013099                 db  44h ; D
.eh_frame:000000000001309A                 db  0Eh
.eh_frame:000000000001309B                 db  50h ; P
.eh_frame:000000000001309C                 db    2
.eh_frame:000000000001309D                 db  7Fh ; 
.eh_frame:000000000001309E                 db  0Ah
.eh_frame:000000000001309F                 db  0Eh
.eh_frame:00000000000130A0                 db    8
.eh_frame:00000000000130A1                 db  41h ; A
.eh_frame:00000000000130A2                 db  0Bh
.eh_frame:00000000000130A3                 db    0
.eh_frame:00000000000130A4                 db  18h
.eh_frame:00000000000130A5                 db    0
.eh_frame:00000000000130A6                 db    0
.eh_frame:00000000000130A7                 db    0
.eh_frame:00000000000130A8                 db 0D8h
.eh_frame:00000000000130A9                 db  0Ah
.eh_frame:00000000000130AA                 db    0
.eh_frame:00000000000130AB                 db    0
.eh_frame:00000000000130AC                 db  84h
.eh_frame:00000000000130AD                 db  74h ; t
.eh_frame:00000000000130AE                 db 0FFh
.eh_frame:00000000000130AF                 db 0FFh
.eh_frame:00000000000130B0                 db  8Ah
.eh_frame:00000000000130B1                 db    0
.eh_frame:00000000000130B2                 db    0
.eh_frame:00000000000130B3                 db    0
.eh_frame:00000000000130B4                 db    0
.eh_frame:00000000000130B5                 db  44h ; D
.eh_frame:00000000000130B6                 db  0Eh
.eh_frame:00000000000130B7                 db  50h ; P
.eh_frame:00000000000130B8                 db    2
.eh_frame:00000000000130B9                 db  7Bh ; {
.eh_frame:00000000000130BA                 db  0Ah
.eh_frame:00000000000130BB                 db  0Eh
.eh_frame:00000000000130BC                 db    8
.eh_frame:00000000000130BD                 db  41h ; A
.eh_frame:00000000000130BE                 db  0Bh
.eh_frame:00000000000130BF                 db    0
.eh_frame:00000000000130C0                 db  10h
.eh_frame:00000000000130C1                 db    0
.eh_frame:00000000000130C2                 db    0
.eh_frame:00000000000130C3                 db    0
.eh_frame:00000000000130C4                 db 0F4h
.eh_frame:00000000000130C5                 db  0Ah
.eh_frame:00000000000130C6                 db    0
.eh_frame:00000000000130C7                 db    0
.eh_frame:00000000000130C8                 db 0F8h
.eh_frame:00000000000130C9                 db  74h ; t
.eh_frame:00000000000130CA                 db 0FFh
.eh_frame:00000000000130CB                 db 0FFh
.eh_frame:00000000000130CC                 db  0Ch
.eh_frame:00000000000130CD                 db    0
.eh_frame:00000000000130CE                 db    0
.eh_frame:00000000000130CF                 db    0
.eh_frame:00000000000130D0                 db    0
.eh_frame:00000000000130D1                 db    0
.eh_frame:00000000000130D2                 db    0
.eh_frame:00000000000130D3                 db    0
.eh_frame:00000000000130D4                 db  10h
.eh_frame:00000000000130D5                 db    0
.eh_frame:00000000000130D6                 db    0
.eh_frame:00000000000130D7                 db    0
.eh_frame:00000000000130D8                 db    8
.eh_frame:00000000000130D9                 db  0Bh
.eh_frame:00000000000130DA                 db    0
.eh_frame:00000000000130DB                 db    0
.eh_frame:00000000000130DC                 db 0F4h
.eh_frame:00000000000130DD                 db  74h ; t
.eh_frame:00000000000130DE                 db 0FFh
.eh_frame:00000000000130DF                 db 0FFh
.eh_frame:00000000000130E0                 db  0Fh
.eh_frame:00000000000130E1                 db    0
.eh_frame:00000000000130E2                 db    0
.eh_frame:00000000000130E3                 db    0
.eh_frame:00000000000130E4                 db    0
.eh_frame:00000000000130E5                 db    0
.eh_frame:00000000000130E6                 db    0
.eh_frame:00000000000130E7                 db    0
.eh_frame:00000000000130E8                 db  18h
.eh_frame:00000000000130E9                 db    0
.eh_frame:00000000000130EA                 db    0
.eh_frame:00000000000130EB                 db    0
.eh_frame:00000000000130EC                 db  1Ch
.eh_frame:00000000000130ED                 db  0Bh
.eh_frame:00000000000130EE                 db    0
.eh_frame:00000000000130EF                 db    0
.eh_frame:00000000000130F0                 db 0F0h
.eh_frame:00000000000130F1                 db  74h ; t
.eh_frame:00000000000130F2                 db 0FFh
.eh_frame:00000000000130F3                 db 0FFh
.eh_frame:00000000000130F4                 db  98h
.eh_frame:00000000000130F5                 db    0
.eh_frame:00000000000130F6                 db    0
.eh_frame:00000000000130F7                 db    0
.eh_frame:00000000000130F8                 db    0
.eh_frame:00000000000130F9                 db  44h ; D
.eh_frame:00000000000130FA                 db  0Eh
.eh_frame:00000000000130FB                 db  50h ; P
.eh_frame:00000000000130FC                 db    2
.eh_frame:00000000000130FD                 db  8Eh
.eh_frame:00000000000130FE                 db  0Ah
.eh_frame:00000000000130FF                 db  0Eh
.eh_frame:0000000000013100                 db    8
.eh_frame:0000000000013101                 db  41h ; A
.eh_frame:0000000000013102                 db  0Bh
.eh_frame:0000000000013103                 db    0
.eh_frame:0000000000013104                 db  10h
.eh_frame:0000000000013105                 db    0
.eh_frame:0000000000013106                 db    0
.eh_frame:0000000000013107                 db    0
.eh_frame:0000000000013108                 db  38h ; 8
.eh_frame:0000000000013109                 db  0Bh
.eh_frame:000000000001310A                 db    0
.eh_frame:000000000001310B                 db    0
.eh_frame:000000000001310C                 db  74h ; t
.eh_frame:000000000001310D                 db  75h ; u
.eh_frame:000000000001310E                 db 0FFh
.eh_frame:000000000001310F                 db 0FFh
.eh_frame:0000000000013110                 db  10h
.eh_frame:0000000000013111                 db    0
.eh_frame:0000000000013112                 db    0
.eh_frame:0000000000013113                 db    0
.eh_frame:0000000000013114                 db    0
.eh_frame:0000000000013115                 db    0
.eh_frame:0000000000013116                 db    0
.eh_frame:0000000000013117                 db    0
.eh_frame:0000000000013118                 db  10h
.eh_frame:0000000000013119                 db    0
.eh_frame:000000000001311A                 db    0
.eh_frame:000000000001311B                 db    0
.eh_frame:000000000001311C                 db  4Ch ; L
.eh_frame:000000000001311D                 db  0Bh
.eh_frame:000000000001311E                 db    0
.eh_frame:000000000001311F                 db    0
.eh_frame:0000000000013120                 db  70h ; p
.eh_frame:0000000000013121                 db  75h ; u
.eh_frame:0000000000013122                 db 0FFh
.eh_frame:0000000000013123                 db 0FFh
.eh_frame:0000000000013124                 db  11h
.eh_frame:0000000000013125                 db    0
.eh_frame:0000000000013126                 db    0
.eh_frame:0000000000013127                 db    0
.eh_frame:0000000000013128                 db    0
.eh_frame:0000000000013129                 db    0
.eh_frame:000000000001312A                 db    0
.eh_frame:000000000001312B                 db    0
.eh_frame:000000000001312C                 db  10h
.eh_frame:000000000001312D                 db    0
.eh_frame:000000000001312E                 db    0
.eh_frame:000000000001312F                 db    0
.eh_frame:0000000000013130                 db  60h ; `
.eh_frame:0000000000013131                 db  0Bh
.eh_frame:0000000000013132                 db    0
.eh_frame:0000000000013133                 db    0
.eh_frame:0000000000013134                 db  7Ch ; |
.eh_frame:0000000000013135                 db  75h ; u
.eh_frame:0000000000013136                 db 0FFh
.eh_frame:0000000000013137                 db 0FFh
.eh_frame:0000000000013138                 db  0Ah
.eh_frame:0000000000013139                 db    0
.eh_frame:000000000001313A                 db    0
.eh_frame:000000000001313B                 db    0
.eh_frame:000000000001313C                 db    0
.eh_frame:000000000001313D                 db    0
.eh_frame:000000000001313E                 db    0
.eh_frame:000000000001313F                 db    0
.eh_frame:0000000000013140                 db  18h
.eh_frame:0000000000013141                 db    0
.eh_frame:0000000000013142                 db    0
.eh_frame:0000000000013143                 db    0
.eh_frame:0000000000013144                 db  74h ; t
.eh_frame:0000000000013145                 db  0Bh
.eh_frame:0000000000013146                 db    0
.eh_frame:0000000000013147                 db    0
.eh_frame:0000000000013148                 db  78h ; x
.eh_frame:0000000000013149                 db  75h ; u
.eh_frame:000000000001314A                 db 0FFh
.eh_frame:000000000001314B                 db 0FFh
.eh_frame:000000000001314C                 db  8Eh
.eh_frame:000000000001314D                 db    0
.eh_frame:000000000001314E                 db    0
.eh_frame:000000000001314F                 db    0
.eh_frame:0000000000013150                 db    0
.eh_frame:0000000000013151                 db  44h ; D
.eh_frame:0000000000013152                 db  0Eh
.eh_frame:0000000000013153                 db  50h ; P
.eh_frame:0000000000013154                 db    2
.eh_frame:0000000000013155                 db  7Fh ; 
.eh_frame:0000000000013156                 db  0Ah
.eh_frame:0000000000013157                 db  0Eh
.eh_frame:0000000000013158                 db    8
.eh_frame:0000000000013159                 db  41h ; A
.eh_frame:000000000001315A                 db  0Bh
.eh_frame:000000000001315B                 db    0
.eh_frame:000000000001315C                 db  18h
.eh_frame:000000000001315D                 db    0
.eh_frame:000000000001315E                 db    0
.eh_frame:000000000001315F                 db    0
.eh_frame:0000000000013160                 db  90h
.eh_frame:0000000000013161                 db  0Bh
.eh_frame:0000000000013162                 db    0
.eh_frame:0000000000013163                 db    0
.eh_frame:0000000000013164                 db 0ECh
.eh_frame:0000000000013165                 db  75h ; u
.eh_frame:0000000000013166                 db 0FFh
.eh_frame:0000000000013167                 db 0FFh
.eh_frame:0000000000013168                 db  91h
.eh_frame:0000000000013169                 db    0
.eh_frame:000000000001316A                 db    0
.eh_frame:000000000001316B                 db    0
.eh_frame:000000000001316C                 db    0
.eh_frame:000000000001316D                 db  44h ; D
.eh_frame:000000000001316E                 db  0Eh
.eh_frame:000000000001316F                 db  50h ; P
.eh_frame:0000000000013170                 db    2
.eh_frame:0000000000013171                 db  82h
.eh_frame:0000000000013172                 db  0Ah
.eh_frame:0000000000013173                 db  0Eh
.eh_frame:0000000000013174                 db    8
.eh_frame:0000000000013175                 db  41h ; A
.eh_frame:0000000000013176                 db  0Bh
.eh_frame:0000000000013177                 db    0
.eh_frame:0000000000013178                 db  10h
.eh_frame:0000000000013179                 db    0
.eh_frame:000000000001317A                 db    0
.eh_frame:000000000001317B                 db    0
.eh_frame:000000000001317C                 db 0ACh
.eh_frame:000000000001317D                 db  0Bh
.eh_frame:000000000001317E                 db    0
.eh_frame:000000000001317F                 db    0
.eh_frame:0000000000013180                 db  70h ; p
.eh_frame:0000000000013181                 db  76h ; v
.eh_frame:0000000000013182                 db 0FFh
.eh_frame:0000000000013183                 db 0FFh
.eh_frame:0000000000013184                 db  0Ch
.eh_frame:0000000000013185                 db    0
.eh_frame:0000000000013186                 db    0
.eh_frame:0000000000013187                 db    0
.eh_frame:0000000000013188                 db    0
.eh_frame:0000000000013189                 db    0
.eh_frame:000000000001318A                 db    0
.eh_frame:000000000001318B                 db    0
.eh_frame:000000000001318C                 db  10h
.eh_frame:000000000001318D                 db    0
.eh_frame:000000000001318E                 db    0
.eh_frame:000000000001318F                 db    0
.eh_frame:0000000000013190                 db 0C0h
.eh_frame:0000000000013191                 db  0Bh
.eh_frame:0000000000013192                 db    0
.eh_frame:0000000000013193                 db    0
.eh_frame:0000000000013194                 db  6Ch ; l
.eh_frame:0000000000013195                 db  76h ; v
.eh_frame:0000000000013196                 db 0FFh
.eh_frame:0000000000013197                 db 0FFh
.eh_frame:0000000000013198                 db  17h
.eh_frame:0000000000013199                 db    0
.eh_frame:000000000001319A                 db    0
.eh_frame:000000000001319B                 db    0
.eh_frame:000000000001319C                 db    0
.eh_frame:000000000001319D                 db    0
.eh_frame:000000000001319E                 db    0
.eh_frame:000000000001319F                 db    0
.eh_frame:00000000000131A0                 db  10h
.eh_frame:00000000000131A1                 db    0
.eh_frame:00000000000131A2                 db    0
.eh_frame:00000000000131A3                 db    0
.eh_frame:00000000000131A4                 db 0D4h
.eh_frame:00000000000131A5                 db  0Bh
.eh_frame:00000000000131A6                 db    0
.eh_frame:00000000000131A7                 db    0
.eh_frame:00000000000131A8                 db  78h ; x
.eh_frame:00000000000131A9                 db  76h ; v
.eh_frame:00000000000131AA                 db 0FFh
.eh_frame:00000000000131AB                 db 0FFh
.eh_frame:00000000000131AC                 db  13h
.eh_frame:00000000000131AD                 db    0
.eh_frame:00000000000131AE                 db    0
.eh_frame:00000000000131AF                 db    0
.eh_frame:00000000000131B0                 db    0
.eh_frame:00000000000131B1                 db    0
.eh_frame:00000000000131B2                 db    0
.eh_frame:00000000000131B3                 db    0
.eh_frame:00000000000131B4                 db  10h
.eh_frame:00000000000131B5                 db    0
.eh_frame:00000000000131B6                 db    0
.eh_frame:00000000000131B7                 db    0
.eh_frame:00000000000131B8                 db 0E8h
.eh_frame:00000000000131B9                 db  0Bh
.eh_frame:00000000000131BA                 db    0
.eh_frame:00000000000131BB                 db    0
.eh_frame:00000000000131BC                 db  84h
.eh_frame:00000000000131BD                 db  76h ; v
.eh_frame:00000000000131BE                 db 0FFh
.eh_frame:00000000000131BF                 db 0FFh
.eh_frame:00000000000131C0                 db  0Ch
.eh_frame:00000000000131C1                 db    0
.eh_frame:00000000000131C2                 db    0
.eh_frame:00000000000131C3                 db    0
.eh_frame:00000000000131C4                 db    0
.eh_frame:00000000000131C5                 db    0
.eh_frame:00000000000131C6                 db    0
.eh_frame:00000000000131C7                 db    0
.eh_frame:00000000000131C8                 db  10h
.eh_frame:00000000000131C9                 db    0
.eh_frame:00000000000131CA                 db    0
.eh_frame:00000000000131CB                 db    0
.eh_frame:00000000000131CC                 db 0FCh
.eh_frame:00000000000131CD                 db  0Bh
.eh_frame:00000000000131CE                 db    0
.eh_frame:00000000000131CF                 db    0
.eh_frame:00000000000131D0                 db  80h
.eh_frame:00000000000131D1                 db  76h ; v
.eh_frame:00000000000131D2                 db 0FFh
.eh_frame:00000000000131D3                 db 0FFh
.eh_frame:00000000000131D4                 db  14h
.eh_frame:00000000000131D5                 db    0
.eh_frame:00000000000131D6                 db    0
.eh_frame:00000000000131D7                 db    0
.eh_frame:00000000000131D8                 db    0
.eh_frame:00000000000131D9                 db    0
.eh_frame:00000000000131DA                 db    0
.eh_frame:00000000000131DB                 db    0
.eh_frame:00000000000131DC                 db  10h
.eh_frame:00000000000131DD                 db    0
.eh_frame:00000000000131DE                 db    0
.eh_frame:00000000000131DF                 db    0
.eh_frame:00000000000131E0                 db  10h
.eh_frame:00000000000131E1                 db  0Ch
.eh_frame:00000000000131E2                 db    0
.eh_frame:00000000000131E3                 db    0
.eh_frame:00000000000131E4                 db  8Ch
.eh_frame:00000000000131E5                 db  76h ; v
.eh_frame:00000000000131E6                 db 0FFh
.eh_frame:00000000000131E7                 db 0FFh
.eh_frame:00000000000131E8                 db  13h
.eh_frame:00000000000131E9                 db    0
.eh_frame:00000000000131EA                 db    0
.eh_frame:00000000000131EB                 db    0
.eh_frame:00000000000131EC                 db    0
.eh_frame:00000000000131ED                 db    0
.eh_frame:00000000000131EE                 db    0
.eh_frame:00000000000131EF                 db    0
.eh_frame:00000000000131F0                 db  14h
.eh_frame:00000000000131F1                 db    0
.eh_frame:00000000000131F2                 db    0
.eh_frame:00000000000131F3                 db    0
.eh_frame:00000000000131F4                 db  24h ; $
.eh_frame:00000000000131F5                 db  0Ch
.eh_frame:00000000000131F6                 db    0
.eh_frame:00000000000131F7                 db    0
.eh_frame:00000000000131F8                 db  98h
.eh_frame:00000000000131F9                 db  76h ; v
.eh_frame:00000000000131FA                 db 0FFh
.eh_frame:00000000000131FB                 db 0FFh
.eh_frame:00000000000131FC                 db  18h
.eh_frame:00000000000131FD                 db    0
.eh_frame:00000000000131FE                 db    0
.eh_frame:00000000000131FF                 db    0
.eh_frame:0000000000013200                 db    0
.eh_frame:0000000000013201                 db    0
.eh_frame:0000000000013202                 db    0
.eh_frame:0000000000013203                 db    0
.eh_frame:0000000000013204                 db    0
.eh_frame:0000000000013205                 db    0
.eh_frame:0000000000013206                 db    0
.eh_frame:0000000000013207                 db    0
.eh_frame:0000000000013208                 db  10h
.eh_frame:0000000000013209                 db    1
.eh_frame:000000000001320A                 db    0
.eh_frame:000000000001320B                 db    0
.eh_frame:000000000001320C                 db  3Ch ; <
.eh_frame:000000000001320D                 db  0Ch
.eh_frame:000000000001320E                 db    0
.eh_frame:000000000001320F                 db    0
.eh_frame:0000000000013210                 db 0A0h
.eh_frame:0000000000013211                 db  76h ; v
.eh_frame:0000000000013212                 db 0FFh
.eh_frame:0000000000013213                 db 0FFh
.eh_frame:0000000000013214                 db  17h
.eh_frame:0000000000013215                 db    4
.eh_frame:0000000000013216                 db    0
.eh_frame:0000000000013217                 db    0
.eh_frame:0000000000013218                 db    0
.eh_frame:0000000000013219                 db  42h ; B
.eh_frame:000000000001321A                 db  0Eh
.eh_frame:000000000001321B                 db  10h
.eh_frame:000000000001321C                 db  8Fh
.eh_frame:000000000001321D                 db    2
.eh_frame:000000000001321E                 db  42h ; B
.eh_frame:000000000001321F                 db  0Eh
.eh_frame:0000000000013220                 db  18h
.eh_frame:0000000000013221                 db  8Eh
.eh_frame:0000000000013222                 db    3
.eh_frame:0000000000013223                 db  42h ; B
.eh_frame:0000000000013224                 db  0Eh
.eh_frame:0000000000013225                 db  20h
.eh_frame:0000000000013226                 db  8Dh
.eh_frame:0000000000013227                 db    4
.eh_frame:0000000000013228                 db  42h ; B
.eh_frame:0000000000013229                 db  0Eh
.eh_frame:000000000001322A                 db  28h ; (
.eh_frame:000000000001322B                 db  8Ch
.eh_frame:000000000001322C                 db    5
.eh_frame:000000000001322D                 db  44h ; D
.eh_frame:000000000001322E                 db  0Eh
.eh_frame:000000000001322F                 db  30h ; 0
.eh_frame:0000000000013230                 db  86h
.eh_frame:0000000000013231                 db    6
.eh_frame:0000000000013232                 db  41h ; A
.eh_frame:0000000000013233                 db  0Eh
.eh_frame:0000000000013234                 db  38h ; 8
.eh_frame:0000000000013235                 db  83h
.eh_frame:0000000000013236                 db    7
.eh_frame:0000000000013237                 db  4Ah ; J
.eh_frame:0000000000013238                 db  0Eh
.eh_frame:0000000000013239                 db  60h ; `
.eh_frame:000000000001323A                 db    2
.eh_frame:000000000001323B                 db 0DDh
.eh_frame:000000000001323C                 db  0Eh
.eh_frame:000000000001323D                 db  68h ; h
.eh_frame:000000000001323E                 db  57h ; W
.eh_frame:000000000001323F                 db  0Eh
.eh_frame:0000000000013240                 db  70h ; p
.eh_frame:0000000000013241                 db  42h ; B
.eh_frame:0000000000013242                 db  0Eh
.eh_frame:0000000000013243                 db  78h ; x
.eh_frame:0000000000013244                 db  42h ; B
.eh_frame:0000000000013245                 db  0Eh
.eh_frame:0000000000013246                 db  80h
.eh_frame:0000000000013247                 db    1
.eh_frame:0000000000013248                 db  42h ; B
.eh_frame:0000000000013249                 db  0Eh
.eh_frame:000000000001324A                 db  88h
.eh_frame:000000000001324B                 db    1
.eh_frame:000000000001324C                 db  42h ; B
.eh_frame:000000000001324D                 db  0Eh
.eh_frame:000000000001324E                 db  90h
.eh_frame:000000000001324F                 db    1
.eh_frame:0000000000013250                 db  53h ; S
.eh_frame:0000000000013251                 db  0Eh
.eh_frame:0000000000013252                 db  60h ; `
.eh_frame:0000000000013253                 db  44h ; D
.eh_frame:0000000000013254                 db  0Ah
.eh_frame:0000000000013255                 db  0Eh
.eh_frame:0000000000013256                 db  38h ; 8
.eh_frame:0000000000013257                 db  41h ; A
.eh_frame:0000000000013258                 db  0Eh
.eh_frame:0000000000013259                 db  30h ; 0
.eh_frame:000000000001325A                 db  41h ; A
.eh_frame:000000000001325B                 db  0Eh
.eh_frame:000000000001325C                 db  28h ; (
.eh_frame:000000000001325D                 db  42h ; B
.eh_frame:000000000001325E                 db  0Eh
.eh_frame:000000000001325F                 db  20h
.eh_frame:0000000000013260                 db  42h ; B
.eh_frame:0000000000013261                 db  0Eh
.eh_frame:0000000000013262                 db  18h
.eh_frame:0000000000013263                 db  42h ; B
.eh_frame:0000000000013264                 db  0Eh
.eh_frame:0000000000013265                 db  10h
.eh_frame:0000000000013266                 db  42h ; B
.eh_frame:0000000000013267                 db  0Eh
.eh_frame:0000000000013268                 db    8
.eh_frame:0000000000013269                 db  44h ; D
.eh_frame:000000000001326A                 db  0Bh
.eh_frame:000000000001326B                 db    2
.eh_frame:000000000001326C                 db  78h ; x
.eh_frame:000000000001326D                 db  0Ah
.eh_frame:000000000001326E                 db  0Eh
.eh_frame:000000000001326F                 db  68h ; h
.eh_frame:0000000000013270                 db  48h ; H
.eh_frame:0000000000013271                 db  0Bh
.eh_frame:0000000000013272                 db  5Ah ; Z
.eh_frame:0000000000013273                 db  0Ah
.eh_frame:0000000000013274                 db  0Eh
.eh_frame:0000000000013275                 db  38h ; 8
.eh_frame:0000000000013276                 db  47h ; G
.eh_frame:0000000000013277                 db  0Eh
.eh_frame:0000000000013278                 db  30h ; 0
.eh_frame:0000000000013279                 db  41h ; A
.eh_frame:000000000001327A                 db  0Eh
.eh_frame:000000000001327B                 db  28h ; (
.eh_frame:000000000001327C                 db  42h ; B
.eh_frame:000000000001327D                 db  0Eh
.eh_frame:000000000001327E                 db  20h
.eh_frame:000000000001327F                 db  42h ; B
.eh_frame:0000000000013280                 db  0Eh
.eh_frame:0000000000013281                 db  18h
.eh_frame:0000000000013282                 db  42h ; B
.eh_frame:0000000000013283                 db  0Eh
.eh_frame:0000000000013284                 db  10h
.eh_frame:0000000000013285                 db  42h ; B
.eh_frame:0000000000013286                 db  0Eh
.eh_frame:0000000000013287                 db    8
.eh_frame:0000000000013288                 db  56h ; V
.eh_frame:0000000000013289                 db  0Bh
.eh_frame:000000000001328A                 db  5Eh ; ^
.eh_frame:000000000001328B                 db  0Ah
.eh_frame:000000000001328C                 db  0Eh
.eh_frame:000000000001328D                 db  38h ; 8
.eh_frame:000000000001328E                 db  52h ; R
.eh_frame:000000000001328F                 db  0Eh
.eh_frame:0000000000013290                 db  30h ; 0
.eh_frame:0000000000013291                 db  41h ; A
.eh_frame:0000000000013292                 db  0Eh
.eh_frame:0000000000013293                 db  28h ; (
.eh_frame:0000000000013294                 db  42h ; B
.eh_frame:0000000000013295                 db  0Eh
.eh_frame:0000000000013296                 db  20h
.eh_frame:0000000000013297                 db  42h ; B
.eh_frame:0000000000013298                 db  0Eh
.eh_frame:0000000000013299                 db  18h
.eh_frame:000000000001329A                 db  42h ; B
.eh_frame:000000000001329B                 db  0Eh
.eh_frame:000000000001329C                 db  10h
.eh_frame:000000000001329D                 db  42h ; B
.eh_frame:000000000001329E                 db  0Eh
.eh_frame:000000000001329F                 db    8
.eh_frame:00000000000132A0                 db  4Fh ; O
.eh_frame:00000000000132A1                 db  0Bh
.eh_frame:00000000000132A2                 db  62h ; b
.eh_frame:00000000000132A3                 db  0Ah
.eh_frame:00000000000132A4                 db  0Eh
.eh_frame:00000000000132A5                 db  38h ; 8
.eh_frame:00000000000132A6                 db  50h ; P
.eh_frame:00000000000132A7                 db  0Eh
.eh_frame:00000000000132A8                 db  30h ; 0
.eh_frame:00000000000132A9                 db  41h ; A
.eh_frame:00000000000132AA                 db  0Eh
.eh_frame:00000000000132AB                 db  28h ; (
.eh_frame:00000000000132AC                 db  42h ; B
.eh_frame:00000000000132AD                 db  0Eh
.eh_frame:00000000000132AE                 db  20h
.eh_frame:00000000000132AF                 db  42h ; B
.eh_frame:00000000000132B0                 db  0Eh
.eh_frame:00000000000132B1                 db  18h
.eh_frame:00000000000132B2                 db  42h ; B
.eh_frame:00000000000132B3                 db  0Eh
.eh_frame:00000000000132B4                 db  10h
.eh_frame:00000000000132B5                 db  42h ; B
.eh_frame:00000000000132B6                 db  0Eh
.eh_frame:00000000000132B7                 db    8
.eh_frame:00000000000132B8                 db  55h ; U
.eh_frame:00000000000132B9                 db  0Bh
.eh_frame:00000000000132BA                 db  66h ; f
.eh_frame:00000000000132BB                 db  0Eh
.eh_frame:00000000000132BC                 db  68h ; h
.eh_frame:00000000000132BD                 db  42h ; B
.eh_frame:00000000000132BE                 db  0Eh
.eh_frame:00000000000132BF                 db  70h ; p
.eh_frame:00000000000132C0                 db  5Ch ; \
.eh_frame:00000000000132C1                 db  0Eh
.eh_frame:00000000000132C2                 db  68h ; h
.eh_frame:00000000000132C3                 db  41h ; A
.eh_frame:00000000000132C4                 db  0Eh
.eh_frame:00000000000132C5                 db  60h ; `
.eh_frame:00000000000132C6                 db  44h ; D
.eh_frame:00000000000132C7                 db  0Ah
.eh_frame:00000000000132C8                 db  0Eh
.eh_frame:00000000000132C9                 db  38h ; 8
.eh_frame:00000000000132CA                 db  41h ; A
.eh_frame:00000000000132CB                 db  0Eh
.eh_frame:00000000000132CC                 db  30h ; 0
.eh_frame:00000000000132CD                 db  41h ; A
.eh_frame:00000000000132CE                 db  0Eh
.eh_frame:00000000000132CF                 db  28h ; (
.eh_frame:00000000000132D0                 db  42h ; B
.eh_frame:00000000000132D1                 db  0Eh
.eh_frame:00000000000132D2                 db  20h
.eh_frame:00000000000132D3                 db  42h ; B
.eh_frame:00000000000132D4                 db  0Eh
.eh_frame:00000000000132D5                 db  18h
.eh_frame:00000000000132D6                 db  42h ; B
.eh_frame:00000000000132D7                 db  0Eh
.eh_frame:00000000000132D8                 db  10h
.eh_frame:00000000000132D9                 db  42h ; B
.eh_frame:00000000000132DA                 db  0Eh
.eh_frame:00000000000132DB                 db    8
.eh_frame:00000000000132DC                 db  45h ; E
.eh_frame:00000000000132DD                 db  0Bh
.eh_frame:00000000000132DE                 db  68h ; h
.eh_frame:00000000000132DF                 db  0Ah
.eh_frame:00000000000132E0                 db  0Eh
.eh_frame:00000000000132E1                 db  68h ; h
.eh_frame:00000000000132E2                 db  48h ; H
.eh_frame:00000000000132E3                 db  0Bh
.eh_frame:00000000000132E4                 db  72h ; r
.eh_frame:00000000000132E5                 db  0Eh
.eh_frame:00000000000132E6                 db  68h ; h
.eh_frame:00000000000132E7                 db  45h ; E
.eh_frame:00000000000132E8                 db  0Eh
.eh_frame:00000000000132E9                 db  70h ; p
.eh_frame:00000000000132EA                 db  42h ; B
.eh_frame:00000000000132EB                 db  0Eh
.eh_frame:00000000000132EC                 db  78h ; x
.eh_frame:00000000000132ED                 db  42h ; B
.eh_frame:00000000000132EE                 db  0Eh
.eh_frame:00000000000132EF                 db  80h
.eh_frame:00000000000132F0                 db    1
.eh_frame:00000000000132F1                 db  5Eh ; ^
.eh_frame:00000000000132F2                 db  0Eh
.eh_frame:00000000000132F3                 db  60h ; `
.eh_frame:00000000000132F4                 db  44h ; D
.eh_frame:00000000000132F5                 db  0Ah
.eh_frame:00000000000132F6                 db  0Eh
.eh_frame:00000000000132F7                 db  38h ; 8
.eh_frame:00000000000132F8                 db  41h ; A
.eh_frame:00000000000132F9                 db  0Eh
.eh_frame:00000000000132FA                 db  30h ; 0
.eh_frame:00000000000132FB                 db  41h ; A
.eh_frame:00000000000132FC                 db  0Eh
.eh_frame:00000000000132FD                 db  28h ; (
.eh_frame:00000000000132FE                 db  42h ; B
.eh_frame:00000000000132FF                 db  0Eh
.eh_frame:0000000000013300                 db  20h
.eh_frame:0000000000013301                 db  42h ; B
.eh_frame:0000000000013302                 db  0Eh
.eh_frame:0000000000013303                 db  18h
.eh_frame:0000000000013304                 db  42h ; B
.eh_frame:0000000000013305                 db  0Eh
.eh_frame:0000000000013306                 db  10h
.eh_frame:0000000000013307                 db  42h ; B
.eh_frame:0000000000013308                 db  0Eh
.eh_frame:0000000000013309                 db    8
.eh_frame:000000000001330A                 db  41h ; A
.eh_frame:000000000001330B                 db  0Bh
.eh_frame:000000000001330C                 db  79h ; y
.eh_frame:000000000001330D                 db  0Ah
.eh_frame:000000000001330E                 db  0Eh
.eh_frame:000000000001330F                 db  68h ; h
.eh_frame:0000000000013310                 db  42h ; B
.eh_frame:0000000000013311                 db  0Eh
.eh_frame:0000000000013312                 db  70h ; p
.eh_frame:0000000000013313                 db  42h ; B
.eh_frame:0000000000013314                 db  0Eh
.eh_frame:0000000000013315                 db  78h ; x
.eh_frame:0000000000013316                 db  42h ; B
.eh_frame:0000000000013317                 db  0Eh
.eh_frame:0000000000013318                 db  80h
.eh_frame:0000000000013319                 db    1
.eh_frame:000000000001331A                 db  51h ; Q
.eh_frame:000000000001331B                 db  0Bh
.eh_frame:000000000001331C                 db  10h
.eh_frame:000000000001331D                 db    0
.eh_frame:000000000001331E                 db    0
.eh_frame:000000000001331F                 db    0
.eh_frame:0000000000013320                 db  50h ; P
.eh_frame:0000000000013321                 db  0Dh
.eh_frame:0000000000013322                 db    0
.eh_frame:0000000000013323                 db    0
.eh_frame:0000000000013324                 db 0ACh
.eh_frame:0000000000013325                 db  79h ; y
.eh_frame:0000000000013326                 db 0FFh
.eh_frame:0000000000013327                 db 0FFh
.eh_frame:0000000000013328                 db  20h
.eh_frame:0000000000013329                 db    0
.eh_frame:000000000001332A                 db    0
.eh_frame:000000000001332B                 db    0
.eh_frame:000000000001332C                 db    0
.eh_frame:000000000001332D                 db    0
.eh_frame:000000000001332E                 db    0
.eh_frame:000000000001332F                 db    0
.eh_frame:0000000000013330                 db  18h
.eh_frame:0000000000013331                 db    0
.eh_frame:0000000000013332                 db    0
.eh_frame:0000000000013333                 db    0
.eh_frame:0000000000013334                 db  64h ; d
.eh_frame:0000000000013335                 db  0Dh
.eh_frame:0000000000013336                 db    0
.eh_frame:0000000000013337                 db    0
.eh_frame:0000000000013338                 db 0B8h
.eh_frame:0000000000013339                 db  79h ; y
.eh_frame:000000000001333A                 db 0FFh
.eh_frame:000000000001333B                 db 0FFh
.eh_frame:000000000001333C                 db  78h ; x
.eh_frame:000000000001333D                 db    0
.eh_frame:000000000001333E                 db    0
.eh_frame:000000000001333F                 db    0
.eh_frame:0000000000013340                 db    0
.eh_frame:0000000000013341                 db  44h ; D
.eh_frame:0000000000013342                 db  0Eh
.eh_frame:0000000000013343                 db  70h ; p
.eh_frame:0000000000013344                 db    2
.eh_frame:0000000000013345                 db  60h ; `
.eh_frame:0000000000013346                 db  0Ah
.eh_frame:0000000000013347                 db  0Eh
.eh_frame:0000000000013348                 db    8
.eh_frame:0000000000013349                 db  41h ; A
.eh_frame:000000000001334A                 db  0Bh
.eh_frame:000000000001334B                 db    0
.eh_frame:000000000001334C                 db  28h ; (
.eh_frame:000000000001334D                 db    0
.eh_frame:000000000001334E                 db    0
.eh_frame:000000000001334F                 db    0
.eh_frame:0000000000013350                 db  80h
.eh_frame:0000000000013351                 db  0Dh
.eh_frame:0000000000013352                 db    0
.eh_frame:0000000000013353                 db    0
.eh_frame:0000000000013354                 db  1Ch
.eh_frame:0000000000013355                 db  7Ah ; z
.eh_frame:0000000000013356                 db 0FFh
.eh_frame:0000000000013357                 db 0FFh
.eh_frame:0000000000013358                 db 0D5h
.eh_frame:0000000000013359                 db    0
.eh_frame:000000000001335A                 db    0
.eh_frame:000000000001335B                 db    0
.eh_frame:000000000001335C                 db    0
.eh_frame:000000000001335D                 db  41h ; A
.eh_frame:000000000001335E                 db  0Eh
.eh_frame:000000000001335F                 db  10h
.eh_frame:0000000000013360                 db  86h
.eh_frame:0000000000013361                 db    2
.eh_frame:0000000000013362                 db  41h ; A
.eh_frame:0000000000013363                 db  0Eh
.eh_frame:0000000000013364                 db  18h
.eh_frame:0000000000013365                 db  83h
.eh_frame:0000000000013366                 db    3
.eh_frame:0000000000013367                 db  50h ; P
.eh_frame:0000000000013368                 db  0Eh
.eh_frame:0000000000013369                 db 0D0h
.eh_frame:000000000001336A                 db    1
.eh_frame:000000000001336B                 db    2
.eh_frame:000000000001336C                 db 0ABh
.eh_frame:000000000001336D                 db  0Ah
.eh_frame:000000000001336E                 db  0Eh
.eh_frame:000000000001336F                 db  18h
.eh_frame:0000000000013370                 db  41h ; A
.eh_frame:0000000000013371                 db  0Eh
.eh_frame:0000000000013372                 db  10h
.eh_frame:0000000000013373                 db  41h ; A
.eh_frame:0000000000013374                 db  0Eh
.eh_frame:0000000000013375                 db    8
.eh_frame:0000000000013376                 db  41h ; A
.eh_frame:0000000000013377                 db  0Bh
.eh_frame:0000000000013378                 db  1Ch
.eh_frame:0000000000013379                 db    0
.eh_frame:000000000001337A                 db    0
.eh_frame:000000000001337B                 db    0
.eh_frame:000000000001337C                 db 0ACh
.eh_frame:000000000001337D                 db  0Dh
.eh_frame:000000000001337E                 db    0
.eh_frame:000000000001337F                 db    0
.eh_frame:0000000000013380                 db 0D0h
.eh_frame:0000000000013381                 db  7Ah ; z
.eh_frame:0000000000013382                 db 0FFh
.eh_frame:0000000000013383                 db 0FFh
.eh_frame:0000000000013384                 db  80h
.eh_frame:0000000000013385                 db    0
.eh_frame:0000000000013386                 db    0
.eh_frame:0000000000013387                 db    0
.eh_frame:0000000000013388                 db    0
.eh_frame:0000000000013389                 db  41h ; A
.eh_frame:000000000001338A                 db  0Eh
.eh_frame:000000000001338B                 db  10h
.eh_frame:000000000001338C                 db  83h
.eh_frame:000000000001338D                 db    2
.eh_frame:000000000001338E                 db    2
.eh_frame:000000000001338F                 db  7Ah ; z
.eh_frame:0000000000013390                 db  0Eh
.eh_frame:0000000000013391                 db    8
.eh_frame:0000000000013392                 db    0
.eh_frame:0000000000013393                 db    0
.eh_frame:0000000000013394                 db    0
.eh_frame:0000000000013395                 db    0
.eh_frame:0000000000013396                 db    0
.eh_frame:0000000000013397                 db    0
.eh_frame:0000000000013398                 db  18h
.eh_frame:0000000000013399                 db    0
.eh_frame:000000000001339A                 db    0
.eh_frame:000000000001339B                 db    0
.eh_frame:000000000001339C                 db 0CCh
.eh_frame:000000000001339D                 db  0Dh
.eh_frame:000000000001339E                 db    0
.eh_frame:000000000001339F                 db    0
.eh_frame:00000000000133A0                 db  30h ; 0
.eh_frame:00000000000133A1                 db  7Bh ; {
.eh_frame:00000000000133A2                 db 0FFh
.eh_frame:00000000000133A3                 db 0FFh
.eh_frame:00000000000133A4                 db  1Ah
.eh_frame:00000000000133A5                 db    0
.eh_frame:00000000000133A6                 db    0
.eh_frame:00000000000133A7                 db    0
.eh_frame:00000000000133A8                 db    0
.eh_frame:00000000000133A9                 db  41h ; A
.eh_frame:00000000000133AA                 db  0Eh
.eh_frame:00000000000133AB                 db  10h
.eh_frame:00000000000133AC                 db  83h
.eh_frame:00000000000133AD                 db    2
.eh_frame:00000000000133AE                 db  53h ; S
.eh_frame:00000000000133AF                 db  0Ah
.eh_frame:00000000000133B0                 db  0Eh
.eh_frame:00000000000133B1                 db    8
.eh_frame:00000000000133B2                 db  41h ; A
.eh_frame:00000000000133B3                 db  0Bh
.eh_frame:00000000000133B4                 db  10h
.eh_frame:00000000000133B5                 db    0
.eh_frame:00000000000133B6                 db    0
.eh_frame:00000000000133B7                 db    0
.eh_frame:00000000000133B8                 db 0E8h
.eh_frame:00000000000133B9                 db  0Dh
.eh_frame:00000000000133BA                 db    0
.eh_frame:00000000000133BB                 db    0
.eh_frame:00000000000133BC                 db  34h ; 4
.eh_frame:00000000000133BD                 db  7Bh ; {
.eh_frame:00000000000133BE                 db 0FFh
.eh_frame:00000000000133BF                 db 0FFh
.eh_frame:00000000000133C0                 db  24h ; $
.eh_frame:00000000000133C1                 db    0
.eh_frame:00000000000133C2                 db    0
.eh_frame:00000000000133C3                 db    0
.eh_frame:00000000000133C4                 db    0
.eh_frame:00000000000133C5                 db  5Fh ; _
.eh_frame:00000000000133C6                 db  0Eh
.eh_frame:00000000000133C7                 db  10h
.eh_frame:00000000000133C8                 db  10h
.eh_frame:00000000000133C9                 db    0
.eh_frame:00000000000133CA                 db    0
.eh_frame:00000000000133CB                 db    0
.eh_frame:00000000000133CC                 db 0FCh
.eh_frame:00000000000133CD                 db  0Dh
.eh_frame:00000000000133CE                 db    0
.eh_frame:00000000000133CF                 db    0
.eh_frame:00000000000133D0                 db  50h ; P
.eh_frame:00000000000133D1                 db  7Bh ; {
.eh_frame:00000000000133D2                 db 0FFh
.eh_frame:00000000000133D3                 db 0FFh
.eh_frame:00000000000133D4                 db    2
.eh_frame:00000000000133D5                 db    0
.eh_frame:00000000000133D6                 db    0
.eh_frame:00000000000133D7                 db    0
.eh_frame:00000000000133D8                 db    0
.eh_frame:00000000000133D9                 db    0
.eh_frame:00000000000133DA                 db    0
.eh_frame:00000000000133DB                 db    0
.eh_frame:00000000000133DC                 db  20h
.eh_frame:00000000000133DD                 db    0
.eh_frame:00000000000133DE                 db    0
.eh_frame:00000000000133DF                 db    0
.eh_frame:00000000000133E0                 db  10h
.eh_frame:00000000000133E1                 db  0Eh
.eh_frame:00000000000133E2                 db    0
.eh_frame:00000000000133E3                 db    0
.eh_frame:00000000000133E4                 db  4Ch ; L
.eh_frame:00000000000133E5                 db  7Bh ; {
.eh_frame:00000000000133E6                 db 0FFh
.eh_frame:00000000000133E7                 db 0FFh
.eh_frame:00000000000133E8                 db  36h ; 6
.eh_frame:00000000000133E9                 db    0
.eh_frame:00000000000133EA                 db    0
.eh_frame:00000000000133EB                 db    0
.eh_frame:00000000000133EC                 db    0
.eh_frame:00000000000133ED                 db  44h ; D
.eh_frame:00000000000133EE                 db  0Eh
.eh_frame:00000000000133EF                 db  10h
.eh_frame:00000000000133F0                 db  83h
.eh_frame:00000000000133F1                 db    2
.eh_frame:00000000000133F2                 db  5Dh ; ]
.eh_frame:00000000000133F3                 db  0Ah
.eh_frame:00000000000133F4                 db  0Eh
.eh_frame:00000000000133F5                 db    8
.eh_frame:00000000000133F6                 db  47h ; G
.eh_frame:00000000000133F7                 db  0Bh
.eh_frame:00000000000133F8                 db  48h ; H
.eh_frame:00000000000133F9                 db  0Ah
.eh_frame:00000000000133FA                 db  0Eh
.eh_frame:00000000000133FB                 db    8
.eh_frame:00000000000133FC                 db  41h ; A
.eh_frame:00000000000133FD                 db  0Bh
.eh_frame:00000000000133FE                 db    0
.eh_frame:00000000000133FF                 db    0
.eh_frame:0000000000013400                 db  10h
.eh_frame:0000000000013401                 db    0
.eh_frame:0000000000013402                 db    0
.eh_frame:0000000000013403                 db    0
.eh_frame:0000000000013404                 db  34h ; 4
.eh_frame:0000000000013405                 db  0Eh
.eh_frame:0000000000013406                 db    0
.eh_frame:0000000000013407                 db    0
.eh_frame:0000000000013408                 db  68h ; h
.eh_frame:0000000000013409                 db  7Bh ; {
.eh_frame:000000000001340A                 db 0FFh
.eh_frame:000000000001340B                 db 0FFh
.eh_frame:000000000001340C                 db  24h ; $
.eh_frame:000000000001340D                 db    0
.eh_frame:000000000001340E                 db    0
.eh_frame:000000000001340F                 db    0
.eh_frame:0000000000013410                 db    0
.eh_frame:0000000000013411                 db  5Fh ; _
.eh_frame:0000000000013412                 db  0Eh
.eh_frame:0000000000013413                 db  10h
.eh_frame:0000000000013414                 db  14h
.eh_frame:0000000000013415                 db    0
.eh_frame:0000000000013416                 db    0
.eh_frame:0000000000013417                 db    0
.eh_frame:0000000000013418                 db  48h ; H
.eh_frame:0000000000013419                 db  0Eh
.eh_frame:000000000001341A                 db    0
.eh_frame:000000000001341B                 db    0
.eh_frame:000000000001341C                 db  84h
.eh_frame:000000000001341D                 db  7Bh ; {
.eh_frame:000000000001341E                 db 0FFh
.eh_frame:000000000001341F                 db 0FFh
.eh_frame:0000000000013420                 db  82h
.eh_frame:0000000000013421                 db    0
.eh_frame:0000000000013422                 db    0
.eh_frame:0000000000013423                 db    0
.eh_frame:0000000000013424                 db    0
.eh_frame:0000000000013425                 db    2
.eh_frame:0000000000013426                 db  5Fh ; _
.eh_frame:0000000000013427                 db  0Eh
.eh_frame:0000000000013428                 db  10h
.eh_frame:0000000000013429                 db  49h ; I
.eh_frame:000000000001342A                 db  0Eh
.eh_frame:000000000001342B                 db    8
.eh_frame:000000000001342C                 db  14h
.eh_frame:000000000001342D                 db    0
.eh_frame:000000000001342E                 db    0
.eh_frame:000000000001342F                 db    0
.eh_frame:0000000000013430                 db  60h ; `
.eh_frame:0000000000013431                 db  0Eh
.eh_frame:0000000000013432                 db    0
.eh_frame:0000000000013433                 db    0
.eh_frame:0000000000013434                 db 0FCh
.eh_frame:0000000000013435                 db  7Bh ; {
.eh_frame:0000000000013436                 db 0FFh
.eh_frame:0000000000013437                 db 0FFh
.eh_frame:0000000000013438                 db  4Ah ; J
.eh_frame:0000000000013439                 db    0
.eh_frame:000000000001343A                 db    0
.eh_frame:000000000001343B                 db    0
.eh_frame:000000000001343C                 db    0
.eh_frame:000000000001343D                 db    2
.eh_frame:000000000001343E                 db  45h ; E
.eh_frame:000000000001343F                 db  0Eh
.eh_frame:0000000000013440                 db  10h
.eh_frame:0000000000013441                 db    0
.eh_frame:0000000000013442                 db    0
.eh_frame:0000000000013443                 db    0
.eh_frame:0000000000013444                 db  18h
.eh_frame:0000000000013445                 db    0
.eh_frame:0000000000013446                 db    0
.eh_frame:0000000000013447                 db    0
.eh_frame:0000000000013448                 db  78h ; x
.eh_frame:0000000000013449                 db  0Eh
.eh_frame:000000000001344A                 db    0
.eh_frame:000000000001344B                 db    0
.eh_frame:000000000001344C                 db  34h ; 4
.eh_frame:000000000001344D                 db  7Ch ; |
.eh_frame:000000000001344E                 db 0FFh
.eh_frame:000000000001344F                 db 0FFh
.eh_frame:0000000000013450                 db  17h
.eh_frame:0000000000013451                 db    0
.eh_frame:0000000000013452                 db    0
.eh_frame:0000000000013453                 db    0
.eh_frame:0000000000013454                 db    0
.eh_frame:0000000000013455                 db  41h ; A
.eh_frame:0000000000013456                 db  0Eh
.eh_frame:0000000000013457                 db  10h
.eh_frame:0000000000013458                 db  83h
.eh_frame:0000000000013459                 db    2
.eh_frame:000000000001345A                 db  51h ; Q
.eh_frame:000000000001345B                 db  0Eh
.eh_frame:000000000001345C                 db    8
.eh_frame:000000000001345D                 db    0
.eh_frame:000000000001345E                 db    0
.eh_frame:000000000001345F                 db    0
.eh_frame:0000000000013460                 db  18h
.eh_frame:0000000000013461                 db    0
.eh_frame:0000000000013462                 db    0
.eh_frame:0000000000013463                 db    0
.eh_frame:0000000000013464                 db  94h
.eh_frame:0000000000013465                 db  0Eh
.eh_frame:0000000000013466                 db    0
.eh_frame:0000000000013467                 db    0
.eh_frame:0000000000013468                 db  38h ; 8
.eh_frame:0000000000013469                 db  7Ch ; |
.eh_frame:000000000001346A                 db 0FFh
.eh_frame:000000000001346B                 db 0FFh
.eh_frame:000000000001346C                 db  2Eh ; .
.eh_frame:000000000001346D                 db    0
.eh_frame:000000000001346E                 db    0
.eh_frame:000000000001346F                 db    0
.eh_frame:0000000000013470                 db    0
.eh_frame:0000000000013471                 db  47h ; G
.eh_frame:0000000000013472                 db  0Eh
.eh_frame:0000000000013473                 db  10h
.eh_frame:0000000000013474                 db  61h ; a
.eh_frame:0000000000013475                 db  0Ah
.eh_frame:0000000000013476                 db  0Eh
.eh_frame:0000000000013477                 db    8
.eh_frame:0000000000013478                 db  41h ; A
.eh_frame:0000000000013479                 db  0Bh
.eh_frame:000000000001347A                 db    0
.eh_frame:000000000001347B                 db    0
.eh_frame:000000000001347C                 db  24h ; $
.eh_frame:000000000001347D                 db    0
.eh_frame:000000000001347E                 db    0
.eh_frame:000000000001347F                 db    0
.eh_frame:0000000000013480                 db 0B0h
.eh_frame:0000000000013481                 db  0Eh
.eh_frame:0000000000013482                 db    0
.eh_frame:0000000000013483                 db    0
.eh_frame:0000000000013484                 db  4Ch ; L
.eh_frame:0000000000013485                 db  7Ch ; |
.eh_frame:0000000000013486                 db 0FFh
.eh_frame:0000000000013487                 db 0FFh
.eh_frame:0000000000013488                 db  28h ; (
.eh_frame:0000000000013489                 db    0
.eh_frame:000000000001348A                 db    0
.eh_frame:000000000001348B                 db    0
.eh_frame:000000000001348C                 db    0
.eh_frame:000000000001348D                 db  41h ; A
.eh_frame:000000000001348E                 db  0Eh
.eh_frame:000000000001348F                 db  10h
.eh_frame:0000000000013490                 db  86h
.eh_frame:0000000000013491                 db    2
.eh_frame:0000000000013492                 db  41h ; A
.eh_frame:0000000000013493                 db  0Eh
.eh_frame:0000000000013494                 db  18h
.eh_frame:0000000000013495                 db  83h
.eh_frame:0000000000013496                 db    3
.eh_frame:0000000000013497                 db  4Dh ; M
.eh_frame:0000000000013498                 db  0Eh
.eh_frame:0000000000013499                 db  20h
.eh_frame:000000000001349A                 db  49h ; I
.eh_frame:000000000001349B                 db  0Eh
.eh_frame:000000000001349C                 db  18h
.eh_frame:000000000001349D                 db  47h ; G
.eh_frame:000000000001349E                 db  0Eh
.eh_frame:000000000001349F                 db  10h
.eh_frame:00000000000134A0                 db  41h ; A
.eh_frame:00000000000134A1                 db  0Eh
.eh_frame:00000000000134A2                 db    8
.eh_frame:00000000000134A3                 db    0
.eh_frame:00000000000134A4                 db  18h
.eh_frame:00000000000134A5                 db    0
.eh_frame:00000000000134A6                 db    0
.eh_frame:00000000000134A7                 db    0
.eh_frame:00000000000134A8                 db 0D8h
.eh_frame:00000000000134A9                 db  0Eh
.eh_frame:00000000000134AA                 db    0
.eh_frame:00000000000134AB                 db    0
.eh_frame:00000000000134AC                 db  54h ; T
.eh_frame:00000000000134AD                 db  7Ch ; |
.eh_frame:00000000000134AE                 db 0FFh
.eh_frame:00000000000134AF                 db 0FFh
.eh_frame:00000000000134B0                 db  13h
.eh_frame:00000000000134B1                 db    0
.eh_frame:00000000000134B2                 db    0
.eh_frame:00000000000134B3                 db    0
.eh_frame:00000000000134B4                 db    0
.eh_frame:00000000000134B5                 db  41h ; A
.eh_frame:00000000000134B6                 db  0Eh
.eh_frame:00000000000134B7                 db  10h
.eh_frame:00000000000134B8                 db  83h
.eh_frame:00000000000134B9                 db    2
.eh_frame:00000000000134BA                 db  50h ; P
.eh_frame:00000000000134BB                 db  0Eh
.eh_frame:00000000000134BC                 db    8
.eh_frame:00000000000134BD                 db    0
.eh_frame:00000000000134BE                 db    0
.eh_frame:00000000000134BF                 db    0
.eh_frame:00000000000134C0                 db  14h
.eh_frame:00000000000134C1                 db    0
.eh_frame:00000000000134C2                 db    0
.eh_frame:00000000000134C3                 db    0
.eh_frame:00000000000134C4                 db 0F4h
.eh_frame:00000000000134C5                 db  0Eh
.eh_frame:00000000000134C6                 db    0
.eh_frame:00000000000134C7                 db    0
.eh_frame:00000000000134C8                 db  58h ; X
.eh_frame:00000000000134C9                 db  7Ch ; |
.eh_frame:00000000000134CA                 db 0FFh
.eh_frame:00000000000134CB                 db 0FFh
.eh_frame:00000000000134CC                 db  35h ; 5
.eh_frame:00000000000134CD                 db    0
.eh_frame:00000000000134CE                 db    0
.eh_frame:00000000000134CF                 db    0
.eh_frame:00000000000134D0                 db    0
.eh_frame:00000000000134D1                 db  4Bh ; K
.eh_frame:00000000000134D2                 db  0Eh
.eh_frame:00000000000134D3                 db  10h
.eh_frame:00000000000134D4                 db    0
.eh_frame:00000000000134D5                 db    0
.eh_frame:00000000000134D6                 db    0
.eh_frame:00000000000134D7                 db    0
.eh_frame:00000000000134D8                 db  3Ch ; <
.eh_frame:00000000000134D9                 db    0
.eh_frame:00000000000134DA                 db    0
.eh_frame:00000000000134DB                 db    0
.eh_frame:00000000000134DC                 db  0Ch
.eh_frame:00000000000134DD                 db  0Fh
.eh_frame:00000000000134DE                 db    0
.eh_frame:00000000000134DF                 db    0
.eh_frame:00000000000134E0                 db  80h
.eh_frame:00000000000134E1                 db  7Ch ; |
.eh_frame:00000000000134E2                 db 0FFh
.eh_frame:00000000000134E3                 db 0FFh
.eh_frame:00000000000134E4                 db  83h
.eh_frame:00000000000134E5                 db    0
.eh_frame:00000000000134E6                 db    0
.eh_frame:00000000000134E7                 db    0
.eh_frame:00000000000134E8                 db    0
.eh_frame:00000000000134E9                 db  42h ; B
.eh_frame:00000000000134EA                 db  0Eh
.eh_frame:00000000000134EB                 db  10h
.eh_frame:00000000000134EC                 db  8Dh
.eh_frame:00000000000134ED                 db    2
.eh_frame:00000000000134EE                 db  42h ; B
.eh_frame:00000000000134EF                 db  0Eh
.eh_frame:00000000000134F0                 db  18h
.eh_frame:00000000000134F1                 db  8Ch
.eh_frame:00000000000134F2                 db    3
.eh_frame:00000000000134F3                 db  44h ; D
.eh_frame:00000000000134F4                 db  0Eh
.eh_frame:00000000000134F5                 db  20h
.eh_frame:00000000000134F6                 db  86h
.eh_frame:00000000000134F7                 db    4
.eh_frame:00000000000134F8                 db  41h ; A
.eh_frame:00000000000134F9                 db  0Eh
.eh_frame:00000000000134FA                 db  28h ; (
.eh_frame:00000000000134FB                 db  83h
.eh_frame:00000000000134FC                 db    5
.eh_frame:00000000000134FD                 db  4Ah ; J
.eh_frame:00000000000134FE                 db  0Eh
.eh_frame:00000000000134FF                 db  40h ; @
.eh_frame:0000000000013500                 db    2
.eh_frame:0000000000013501                 db  64h ; d
.eh_frame:0000000000013502                 db  0Ah
.eh_frame:0000000000013503                 db  0Eh
.eh_frame:0000000000013504                 db  28h ; (
.eh_frame:0000000000013505                 db  41h ; A
.eh_frame:0000000000013506                 db  0Eh
.eh_frame:0000000000013507                 db  20h
.eh_frame:0000000000013508                 db  41h ; A
.eh_frame:0000000000013509                 db  0Eh
.eh_frame:000000000001350A                 db  18h
.eh_frame:000000000001350B                 db  42h ; B
.eh_frame:000000000001350C                 db  0Eh
.eh_frame:000000000001350D                 db  10h
.eh_frame:000000000001350E                 db  42h ; B
.eh_frame:000000000001350F                 db  0Eh
.eh_frame:0000000000013510                 db    8
.eh_frame:0000000000013511                 db  41h ; A
.eh_frame:0000000000013512                 db  0Bh
.eh_frame:0000000000013513                 db    0
.eh_frame:0000000000013514                 db    0
.eh_frame:0000000000013515                 db    0
.eh_frame:0000000000013516                 db    0
.eh_frame:0000000000013517                 db    0
.eh_frame:0000000000013518                 db  10h
.eh_frame:0000000000013519                 db    0
.eh_frame:000000000001351A                 db    0
.eh_frame:000000000001351B                 db    0
.eh_frame:000000000001351C                 db  4Ch ; L
.eh_frame:000000000001351D                 db  0Fh
.eh_frame:000000000001351E                 db    0
.eh_frame:000000000001351F                 db    0
.eh_frame:0000000000013520                 db 0D0h
.eh_frame:0000000000013521                 db  7Ch ; |
.eh_frame:0000000000013522                 db 0FFh
.eh_frame:0000000000013523                 db 0FFh
.eh_frame:0000000000013524                 db  2Ch ; ,
.eh_frame:0000000000013525                 db    0
.eh_frame:0000000000013526                 db    0
.eh_frame:0000000000013527                 db    0
.eh_frame:0000000000013528                 db    0
.eh_frame:0000000000013529                 db    0
.eh_frame:000000000001352A                 db    0
.eh_frame:000000000001352B                 db    0
.eh_frame:000000000001352C                 db  18h
.eh_frame:000000000001352D                 db    0
.eh_frame:000000000001352E                 db    0
.eh_frame:000000000001352F                 db    0
.eh_frame:0000000000013530                 db  60h ; `
.eh_frame:0000000000013531                 db  0Fh
.eh_frame:0000000000013532                 db    0
.eh_frame:0000000000013533                 db    0
.eh_frame:0000000000013534                 db 0ECh
.eh_frame:0000000000013535                 db  7Ch ; |
.eh_frame:0000000000013536                 db 0FFh
.eh_frame:0000000000013537                 db 0FFh
.eh_frame:0000000000013538                 db  2Ah ; *
.eh_frame:0000000000013539                 db    0
.eh_frame:000000000001353A                 db    0
.eh_frame:000000000001353B                 db    0
.eh_frame:000000000001353C                 db    0
.eh_frame:000000000001353D                 db  46h ; F
.eh_frame:000000000001353E                 db  0Eh
.eh_frame:000000000001353F                 db  10h
.eh_frame:0000000000013540                 db  83h
.eh_frame:0000000000013541                 db    2
.eh_frame:0000000000013542                 db  5Bh ; [
.eh_frame:0000000000013543                 db  0Eh
.eh_frame:0000000000013544                 db    8
.eh_frame:0000000000013545                 db  47h ; G
.eh_frame:0000000000013546                 db 0C3h
.eh_frame:0000000000013547                 db    0
.eh_frame:0000000000013548                 db  38h ; 8
.eh_frame:0000000000013549                 db    0
.eh_frame:000000000001354A                 db    0
.eh_frame:000000000001354B                 db    0
.eh_frame:000000000001354C                 db  7Ch ; |
.eh_frame:000000000001354D                 db  0Fh
.eh_frame:000000000001354E                 db    0
.eh_frame:000000000001354F                 db    0
.eh_frame:0000000000013550                 db    0
.eh_frame:0000000000013551                 db  7Dh ; }
.eh_frame:0000000000013552                 db 0FFh
.eh_frame:0000000000013553                 db 0FFh
.eh_frame:0000000000013554                 db  5Dh ; ]
.eh_frame:0000000000013555                 db    0
.eh_frame:0000000000013556                 db    0
.eh_frame:0000000000013557                 db    0
.eh_frame:0000000000013558                 db    0
.eh_frame:0000000000013559                 db  42h ; B
.eh_frame:000000000001355A                 db  0Eh
.eh_frame:000000000001355B                 db  10h
.eh_frame:000000000001355C                 db  8Dh
.eh_frame:000000000001355D                 db    2
.eh_frame:000000000001355E                 db  42h ; B
.eh_frame:000000000001355F                 db  0Eh
.eh_frame:0000000000013560                 db  18h
.eh_frame:0000000000013561                 db  8Ch
.eh_frame:0000000000013562                 db    3
.eh_frame:0000000000013563                 db  41h ; A
.eh_frame:0000000000013564                 db  0Eh
.eh_frame:0000000000013565                 db  20h
.eh_frame:0000000000013566                 db  86h
.eh_frame:0000000000013567                 db    4
.eh_frame:0000000000013568                 db  41h ; A
.eh_frame:0000000000013569                 db  0Eh
.eh_frame:000000000001356A                 db  28h ; (
.eh_frame:000000000001356B                 db  83h
.eh_frame:000000000001356C                 db    5
.eh_frame:000000000001356D                 db  47h ; G
.eh_frame:000000000001356E                 db  0Eh
.eh_frame:000000000001356F                 db  30h ; 0
.eh_frame:0000000000013570                 db  75h ; u
.eh_frame:0000000000013571                 db  0Ah
.eh_frame:0000000000013572                 db  0Eh
.eh_frame:0000000000013573                 db  28h ; (
.eh_frame:0000000000013574                 db  44h ; D
.eh_frame:0000000000013575                 db  0Eh
.eh_frame:0000000000013576                 db  20h
.eh_frame:0000000000013577                 db  41h ; A
.eh_frame:0000000000013578                 db  0Eh
.eh_frame:0000000000013579                 db  18h
.eh_frame:000000000001357A                 db  42h ; B
.eh_frame:000000000001357B                 db  0Eh
.eh_frame:000000000001357C                 db  10h
.eh_frame:000000000001357D                 db  42h ; B
.eh_frame:000000000001357E                 db  0Eh
.eh_frame:000000000001357F                 db    8
.eh_frame:0000000000013580                 db  45h ; E
.eh_frame:0000000000013581                 db  0Bh
.eh_frame:0000000000013582                 db    0
.eh_frame:0000000000013583                 db    0
.eh_frame:0000000000013584                 db  34h ; 4
.eh_frame:0000000000013585                 db    0
.eh_frame:0000000000013586                 db    0
.eh_frame:0000000000013587                 db    0
.eh_frame:0000000000013588                 db 0B8h
.eh_frame:0000000000013589                 db  0Fh
.eh_frame:000000000001358A                 db    0
.eh_frame:000000000001358B                 db    0
.eh_frame:000000000001358C                 db  24h ; $
.eh_frame:000000000001358D                 db  7Dh ; }
.eh_frame:000000000001358E                 db 0FFh
.eh_frame:000000000001358F                 db 0FFh
.eh_frame:0000000000013590                 db  8Fh
.eh_frame:0000000000013591                 db    0
.eh_frame:0000000000013592                 db    0
.eh_frame:0000000000013593                 db    0
.eh_frame:0000000000013594                 db    0
.eh_frame:0000000000013595                 db  45h ; E
.eh_frame:0000000000013596                 db  0Eh
.eh_frame:0000000000013597                 db  10h
.eh_frame:0000000000013598                 db  8Ch
.eh_frame:0000000000013599                 db    2
.eh_frame:000000000001359A                 db  41h ; A
.eh_frame:000000000001359B                 db  0Eh
.eh_frame:000000000001359C                 db  18h
.eh_frame:000000000001359D                 db  86h
.eh_frame:000000000001359E                 db    3
.eh_frame:000000000001359F                 db  41h ; A
.eh_frame:00000000000135A0                 db  0Eh
.eh_frame:00000000000135A1                 db  20h
.eh_frame:00000000000135A2                 db  83h
.eh_frame:00000000000135A3                 db    4
.eh_frame:00000000000135A4                 db    2
.eh_frame:00000000000135A5                 db  58h ; X
.eh_frame:00000000000135A6                 db  0Ah
.eh_frame:00000000000135A7                 db  0Eh
.eh_frame:00000000000135A8                 db  18h
.eh_frame:00000000000135A9                 db  41h ; A
.eh_frame:00000000000135AA                 db  0Eh
.eh_frame:00000000000135AB                 db  10h
.eh_frame:00000000000135AC                 db  42h ; B
.eh_frame:00000000000135AD                 db  0Eh
.eh_frame:00000000000135AE                 db    8
.eh_frame:00000000000135AF                 db  46h ; F
.eh_frame:00000000000135B0                 db  0Bh
.eh_frame:00000000000135B1                 db  63h ; c
.eh_frame:00000000000135B2                 db  0Eh
.eh_frame:00000000000135B3                 db  18h
.eh_frame:00000000000135B4                 db  41h ; A
.eh_frame:00000000000135B5                 db  0Eh
.eh_frame:00000000000135B6                 db  10h
.eh_frame:00000000000135B7                 db  42h ; B
.eh_frame:00000000000135B8                 db  0Eh
.eh_frame:00000000000135B9                 db    8
.eh_frame:00000000000135BA                 db    0
.eh_frame:00000000000135BB                 db    0
.eh_frame:00000000000135BC                 db  48h ; H
.eh_frame:00000000000135BD                 db    0
.eh_frame:00000000000135BE                 db    0
.eh_frame:00000000000135BF                 db    0
.eh_frame:00000000000135C0                 db 0F0h
.eh_frame:00000000000135C1                 db  0Fh
.eh_frame:00000000000135C2                 db    0
.eh_frame:00000000000135C3                 db    0
.eh_frame:00000000000135C4                 db  7Ch ; |
.eh_frame:00000000000135C5                 db  7Dh ; }
.eh_frame:00000000000135C6                 db 0FFh
.eh_frame:00000000000135C7                 db 0FFh
.eh_frame:00000000000135C8                 db  36h ; 6
.eh_frame:00000000000135C9                 db    1
.eh_frame:00000000000135CA                 db    0
.eh_frame:00000000000135CB                 db    0
.eh_frame:00000000000135CC                 db    0
.eh_frame:00000000000135CD                 db  42h ; B
.eh_frame:00000000000135CE                 db  0Eh
.eh_frame:00000000000135CF                 db  10h
.eh_frame:00000000000135D0                 db  8Fh
.eh_frame:00000000000135D1                 db    2
.eh_frame:00000000000135D2                 db  42h ; B
.eh_frame:00000000000135D3                 db  0Eh
.eh_frame:00000000000135D4                 db  18h
.eh_frame:00000000000135D5                 db  8Eh
.eh_frame:00000000000135D6                 db    3
.eh_frame:00000000000135D7                 db  47h ; G
.eh_frame:00000000000135D8                 db  0Eh
.eh_frame:00000000000135D9                 db  20h
.eh_frame:00000000000135DA                 db  8Dh
.eh_frame:00000000000135DB                 db    4
.eh_frame:00000000000135DC                 db  42h ; B
.eh_frame:00000000000135DD                 db  0Eh
.eh_frame:00000000000135DE                 db  28h ; (
.eh_frame:00000000000135DF                 db  8Ch
.eh_frame:00000000000135E0                 db    5
.eh_frame:00000000000135E1                 db  41h ; A
.eh_frame:00000000000135E2                 db  0Eh
.eh_frame:00000000000135E3                 db  30h ; 0
.eh_frame:00000000000135E4                 db  86h
.eh_frame:00000000000135E5                 db    6
.eh_frame:00000000000135E6                 db  41h ; A
.eh_frame:00000000000135E7                 db  0Eh
.eh_frame:00000000000135E8                 db  38h ; 8
.eh_frame:00000000000135E9                 db  83h
.eh_frame:00000000000135EA                 db    7
.eh_frame:00000000000135EB                 db  44h ; D
.eh_frame:00000000000135EC                 db  0Eh
.eh_frame:00000000000135ED                 db  40h ; @
.eh_frame:00000000000135EE                 db    2
.eh_frame:00000000000135EF                 db 0A1h
.eh_frame:00000000000135F0                 db  0Ah
.eh_frame:00000000000135F1                 db  0Eh
.eh_frame:00000000000135F2                 db  38h ; 8
.eh_frame:00000000000135F3                 db  41h ; A
.eh_frame:00000000000135F4                 db  0Eh
.eh_frame:00000000000135F5                 db  30h ; 0
.eh_frame:00000000000135F6                 db  41h ; A
.eh_frame:00000000000135F7                 db  0Eh
.eh_frame:00000000000135F8                 db  28h ; (
.eh_frame:00000000000135F9                 db  42h ; B
.eh_frame:00000000000135FA                 db  0Eh
.eh_frame:00000000000135FB                 db  20h
.eh_frame:00000000000135FC                 db  42h ; B
.eh_frame:00000000000135FD                 db  0Eh
.eh_frame:00000000000135FE                 db  18h
.eh_frame:00000000000135FF                 db  42h ; B
.eh_frame:0000000000013600                 db  0Eh
.eh_frame:0000000000013601                 db  10h
.eh_frame:0000000000013602                 db  42h ; B
.eh_frame:0000000000013603                 db  0Eh
.eh_frame:0000000000013604                 db    8
.eh_frame:0000000000013605                 db  42h ; B
.eh_frame:0000000000013606                 db  0Bh
.eh_frame:0000000000013607                 db    0
.eh_frame:0000000000013608                 db  50h ; P
.eh_frame:0000000000013609                 db    0
.eh_frame:000000000001360A                 db    0
.eh_frame:000000000001360B                 db    0
.eh_frame:000000000001360C                 db  3Ch ; <
.eh_frame:000000000001360D                 db  10h
.eh_frame:000000000001360E                 db    0
.eh_frame:000000000001360F                 db    0
.eh_frame:0000000000013610                 db  70h ; p
.eh_frame:0000000000013611                 db  7Eh ; ~
.eh_frame:0000000000013612                 db 0FFh
.eh_frame:0000000000013613                 db 0FFh
.eh_frame:0000000000013614                 db 0DFh
.eh_frame:0000000000013615                 db    0
.eh_frame:0000000000013616                 db    0
.eh_frame:0000000000013617                 db    0
.eh_frame:0000000000013618                 db    0
.eh_frame:0000000000013619                 db  42h ; B
.eh_frame:000000000001361A                 db  0Eh
.eh_frame:000000000001361B                 db  10h
.eh_frame:000000000001361C                 db  8Ch
.eh_frame:000000000001361D                 db    2
.eh_frame:000000000001361E                 db  41h ; A
.eh_frame:000000000001361F                 db  0Eh
.eh_frame:0000000000013620                 db  18h
.eh_frame:0000000000013621                 db  86h
.eh_frame:0000000000013622                 db    3
.eh_frame:0000000000013623                 db  44h ; D
.eh_frame:0000000000013624                 db  0Eh
.eh_frame:0000000000013625                 db  20h
.eh_frame:0000000000013626                 db  83h
.eh_frame:0000000000013627                 db    4
.eh_frame:0000000000013628                 db  4Bh ; K
.eh_frame:0000000000013629                 db  0Eh
.eh_frame:000000000001362A                 db  30h ; 0
.eh_frame:000000000001362B                 db    2
.eh_frame:000000000001362C                 db  6Fh ; o
.eh_frame:000000000001362D                 db  0Ah
.eh_frame:000000000001362E                 db  0Eh
.eh_frame:000000000001362F                 db  20h
.eh_frame:0000000000013630                 db  44h ; D
.eh_frame:0000000000013631                 db  0Eh
.eh_frame:0000000000013632                 db  18h
.eh_frame:0000000000013633                 db  41h ; A
.eh_frame:0000000000013634                 db  0Eh
.eh_frame:0000000000013635                 db  10h
.eh_frame:0000000000013636                 db  42h ; B
.eh_frame:0000000000013637                 db  0Eh
.eh_frame:0000000000013638                 db    8
.eh_frame:0000000000013639                 db  48h ; H
.eh_frame:000000000001363A                 db  0Bh
.eh_frame:000000000001363B                 db  5Ah ; Z
.eh_frame:000000000001363C                 db  0Ah
.eh_frame:000000000001363D                 db  0Eh
.eh_frame:000000000001363E                 db  20h
.eh_frame:000000000001363F                 db  44h ; D
.eh_frame:0000000000013640                 db  0Eh
.eh_frame:0000000000013641                 db  18h
.eh_frame:0000000000013642                 db  41h ; A
.eh_frame:0000000000013643                 db  0Eh
.eh_frame:0000000000013644                 db  10h
.eh_frame:0000000000013645                 db  42h ; B
.eh_frame:0000000000013646                 db  0Eh
.eh_frame:0000000000013647                 db    8
.eh_frame:0000000000013648                 db  47h ; G
.eh_frame:0000000000013649                 db  0Bh
.eh_frame:000000000001364A                 db  54h ; T
.eh_frame:000000000001364B                 db  0Ah
.eh_frame:000000000001364C                 db  0Eh
.eh_frame:000000000001364D                 db  20h
.eh_frame:000000000001364E                 db  44h ; D
.eh_frame:000000000001364F                 db  0Eh
.eh_frame:0000000000013650                 db  18h
.eh_frame:0000000000013651                 db  41h ; A
.eh_frame:0000000000013652                 db  0Eh
.eh_frame:0000000000013653                 db  10h
.eh_frame:0000000000013654                 db  42h ; B
.eh_frame:0000000000013655                 db  0Eh
.eh_frame:0000000000013656                 db    8
.eh_frame:0000000000013657                 db  45h ; E
.eh_frame:0000000000013658                 db  0Bh
.eh_frame:0000000000013659                 db    0
.eh_frame:000000000001365A                 db    0
.eh_frame:000000000001365B                 db    0
.eh_frame:000000000001365C                 db  10h
.eh_frame:000000000001365D                 db    0
.eh_frame:000000000001365E                 db    0
.eh_frame:000000000001365F                 db    0
.eh_frame:0000000000013660                 db  90h
.eh_frame:0000000000013661                 db  10h
.eh_frame:0000000000013662                 db    0
.eh_frame:0000000000013663                 db    0
.eh_frame:0000000000013664                 db 0FCh
.eh_frame:0000000000013665                 db  7Eh ; ~
.eh_frame:0000000000013666                 db 0FFh
.eh_frame:0000000000013667                 db 0FFh
.eh_frame:0000000000013668                 db  0Ch
.eh_frame:0000000000013669                 db    0
.eh_frame:000000000001366A                 db    0
.eh_frame:000000000001366B                 db    0
.eh_frame:000000000001366C                 db    0
.eh_frame:000000000001366D                 db    0
.eh_frame:000000000001366E                 db    0
.eh_frame:000000000001366F                 db    0
.eh_frame:0000000000013670                 db  5Ch ; \
.eh_frame:0000000000013671                 db    0
.eh_frame:0000000000013672                 db    0
.eh_frame:0000000000013673                 db    0
.eh_frame:0000000000013674                 db 0A4h
.eh_frame:0000000000013675                 db  10h
.eh_frame:0000000000013676                 db    0
.eh_frame:0000000000013677                 db    0
.eh_frame:0000000000013678                 db 0F8h
.eh_frame:0000000000013679                 db  7Eh ; ~
.eh_frame:000000000001367A                 db 0FFh
.eh_frame:000000000001367B                 db 0FFh
.eh_frame:000000000001367C                 db 0A3h
.eh_frame:000000000001367D                 db    0
.eh_frame:000000000001367E                 db    0
.eh_frame:000000000001367F                 db    0
.eh_frame:0000000000013680                 db    0
.eh_frame:0000000000013681                 db  42h ; B
.eh_frame:0000000000013682                 db  0Eh
.eh_frame:0000000000013683                 db  10h
.eh_frame:0000000000013684                 db  8Dh
.eh_frame:0000000000013685                 db    2
.eh_frame:0000000000013686                 db  42h ; B
.eh_frame:0000000000013687                 db  0Eh
.eh_frame:0000000000013688                 db  18h
.eh_frame:0000000000013689                 db  8Ch
.eh_frame:000000000001368A                 db    3
.eh_frame:000000000001368B                 db  41h ; A
.eh_frame:000000000001368C                 db  0Eh
.eh_frame:000000000001368D                 db  20h
.eh_frame:000000000001368E                 db  86h
.eh_frame:000000000001368F                 db    4
.eh_frame:0000000000013690                 db  41h ; A
.eh_frame:0000000000013691                 db  0Eh
.eh_frame:0000000000013692                 db  28h ; (
.eh_frame:0000000000013693                 db  83h
.eh_frame:0000000000013694                 db    5
.eh_frame:0000000000013695                 db  47h ; G
.eh_frame:0000000000013696                 db  0Eh
.eh_frame:0000000000013697                 db  30h ; 0
.eh_frame:0000000000013698                 db    2
.eh_frame:0000000000013699                 db  41h ; A
.eh_frame:000000000001369A                 db  0Ah
.eh_frame:000000000001369B                 db  0Eh
.eh_frame:000000000001369C                 db  28h ; (
.eh_frame:000000000001369D                 db  44h ; D
.eh_frame:000000000001369E                 db  0Eh
.eh_frame:000000000001369F                 db  20h
.eh_frame:00000000000136A0                 db  41h ; A
.eh_frame:00000000000136A1                 db  0Eh
.eh_frame:00000000000136A2                 db  18h
.eh_frame:00000000000136A3                 db  42h ; B
.eh_frame:00000000000136A4                 db  0Eh
.eh_frame:00000000000136A5                 db  10h
.eh_frame:00000000000136A6                 db  42h ; B
.eh_frame:00000000000136A7                 db  0Eh
.eh_frame:00000000000136A8                 db    8
.eh_frame:00000000000136A9                 db  49h ; I
.eh_frame:00000000000136AA                 db  0Bh
.eh_frame:00000000000136AB                 db  52h ; R
.eh_frame:00000000000136AC                 db  0Ah
.eh_frame:00000000000136AD                 db  0Eh
.eh_frame:00000000000136AE                 db  28h ; (
.eh_frame:00000000000136AF                 db  43h ; C
.eh_frame:00000000000136B0                 db  0Eh
.eh_frame:00000000000136B1                 db  20h
.eh_frame:00000000000136B2                 db  41h ; A
.eh_frame:00000000000136B3                 db  0Eh
.eh_frame:00000000000136B4                 db  18h
.eh_frame:00000000000136B5                 db  42h ; B
.eh_frame:00000000000136B6                 db  0Eh
.eh_frame:00000000000136B7                 db  10h
.eh_frame:00000000000136B8                 db  42h ; B
.eh_frame:00000000000136B9                 db  0Eh
.eh_frame:00000000000136BA                 db    8
.eh_frame:00000000000136BB                 db  46h ; F
.eh_frame:00000000000136BC                 db  0Bh
.eh_frame:00000000000136BD                 db  44h ; D
.eh_frame:00000000000136BE                 db  0Ah
.eh_frame:00000000000136BF                 db  0Eh
.eh_frame:00000000000136C0                 db  28h ; (
.eh_frame:00000000000136C1                 db  47h ; G
.eh_frame:00000000000136C2                 db  0Eh
.eh_frame:00000000000136C3                 db  20h
.eh_frame:00000000000136C4                 db  41h ; A
.eh_frame:00000000000136C5                 db  0Eh
.eh_frame:00000000000136C6                 db  18h
.eh_frame:00000000000136C7                 db  42h ; B
.eh_frame:00000000000136C8                 db  0Eh
.eh_frame:00000000000136C9                 db  10h
.eh_frame:00000000000136CA                 db  42h ; B
.eh_frame:00000000000136CB                 db  0Eh
.eh_frame:00000000000136CC                 db    8
.eh_frame:00000000000136CD                 db  45h ; E
.eh_frame:00000000000136CE                 db  0Bh
.eh_frame:00000000000136CF                 db    0
.eh_frame:00000000000136D0                 db  34h ; 4
.eh_frame:00000000000136D1                 db    0
.eh_frame:00000000000136D2                 db    0
.eh_frame:00000000000136D3                 db    0
.eh_frame:00000000000136D4                 db    4
.eh_frame:00000000000136D5                 db  11h
.eh_frame:00000000000136D6                 db    0
.eh_frame:00000000000136D7                 db    0
.eh_frame:00000000000136D8                 db  48h ; H
.eh_frame:00000000000136D9                 db  7Fh ; 
.eh_frame:00000000000136DA                 db 0FFh
.eh_frame:00000000000136DB                 db 0FFh
.eh_frame:00000000000136DC                 db  41h ; A
.eh_frame:00000000000136DD                 db    1
.eh_frame:00000000000136DE                 db    0
.eh_frame:00000000000136DF                 db    0
.eh_frame:00000000000136E0                 db    0
.eh_frame:00000000000136E1                 db  42h ; B
.eh_frame:00000000000136E2                 db  0Eh
.eh_frame:00000000000136E3                 db  10h
.eh_frame:00000000000136E4                 db  8Ch
.eh_frame:00000000000136E5                 db    2
.eh_frame:00000000000136E6                 db  41h ; A
.eh_frame:00000000000136E7                 db  0Eh
.eh_frame:00000000000136E8                 db  18h
.eh_frame:00000000000136E9                 db  86h
.eh_frame:00000000000136EA                 db    3
.eh_frame:00000000000136EB                 db  41h ; A
.eh_frame:00000000000136EC                 db  0Eh
.eh_frame:00000000000136ED                 db  20h
.eh_frame:00000000000136EE                 db  83h
.eh_frame:00000000000136EF                 db    4
.eh_frame:00000000000136F0                 db  47h ; G
.eh_frame:00000000000136F1                 db  0Eh
.eh_frame:00000000000136F2                 db  70h ; p
.eh_frame:00000000000136F3                 db    2
.eh_frame:00000000000136F4                 db  8Bh
.eh_frame:00000000000136F5                 db  0Ah
.eh_frame:00000000000136F6                 db  0Eh
.eh_frame:00000000000136F7                 db  20h
.eh_frame:00000000000136F8                 db  41h ; A
.eh_frame:00000000000136F9                 db  0Eh
.eh_frame:00000000000136FA                 db  18h
.eh_frame:00000000000136FB                 db  41h ; A
.eh_frame:00000000000136FC                 db  0Eh
.eh_frame:00000000000136FD                 db  10h
.eh_frame:00000000000136FE                 db  42h ; B
.eh_frame:00000000000136FF                 db  0Eh
.eh_frame:0000000000013700                 db    8
.eh_frame:0000000000013701                 db  46h ; F
.eh_frame:0000000000013702                 db  0Bh
.eh_frame:0000000000013703                 db    0
.eh_frame:0000000000013704                 db    0
.eh_frame:0000000000013705                 db    0
.eh_frame:0000000000013706                 db    0
.eh_frame:0000000000013707                 db    0
.eh_frame:0000000000013708                 db  3Ch ; <
.eh_frame:0000000000013709                 db    0
.eh_frame:000000000001370A                 db    0
.eh_frame:000000000001370B                 db    0
.eh_frame:000000000001370C                 db  3Ch ; <
.eh_frame:000000000001370D                 db  11h
.eh_frame:000000000001370E                 db    0
.eh_frame:000000000001370F                 db    0
.eh_frame:0000000000013710                 db  60h ; `
.eh_frame:0000000000013711                 db  80h
.eh_frame:0000000000013712                 db 0FFh
.eh_frame:0000000000013713                 db 0FFh
.eh_frame:0000000000013714                 db 0F2h
.eh_frame:0000000000013715                 db    0
.eh_frame:0000000000013716                 db    0
.eh_frame:0000000000013717                 db    0
.eh_frame:0000000000013718                 db    0
.eh_frame:0000000000013719                 db  42h ; B
.eh_frame:000000000001371A                 db  0Eh
.eh_frame:000000000001371B                 db  10h
.eh_frame:000000000001371C                 db  8Dh
.eh_frame:000000000001371D                 db    2
.eh_frame:000000000001371E                 db  42h ; B
.eh_frame:000000000001371F                 db  0Eh
.eh_frame:0000000000013720                 db  18h
.eh_frame:0000000000013721                 db  8Ch
.eh_frame:0000000000013722                 db    3
.eh_frame:0000000000013723                 db  44h ; D
.eh_frame:0000000000013724                 db  0Eh
.eh_frame:0000000000013725                 db  20h
.eh_frame:0000000000013726                 db  86h
.eh_frame:0000000000013727                 db    4
.eh_frame:0000000000013728                 db  41h ; A
.eh_frame:0000000000013729                 db  0Eh
.eh_frame:000000000001372A                 db  28h ; (
.eh_frame:000000000001372B                 db  83h
.eh_frame:000000000001372C                 db    5
.eh_frame:000000000001372D                 db  4Ah ; J
.eh_frame:000000000001372E                 db  0Eh
.eh_frame:000000000001372F                 db 0A0h
.eh_frame:0000000000013730                 db  10h
.eh_frame:0000000000013731                 db    2
.eh_frame:0000000000013732                 db  8Fh
.eh_frame:0000000000013733                 db  0Ah
.eh_frame:0000000000013734                 db  0Eh
.eh_frame:0000000000013735                 db  28h ; (
.eh_frame:0000000000013736                 db  41h ; A
.eh_frame:0000000000013737                 db  0Eh
.eh_frame:0000000000013738                 db  20h
.eh_frame:0000000000013739                 db  41h ; A
.eh_frame:000000000001373A                 db  0Eh
.eh_frame:000000000001373B                 db  18h
.eh_frame:000000000001373C                 db  42h ; B
.eh_frame:000000000001373D                 db  0Eh
.eh_frame:000000000001373E                 db  10h
.eh_frame:000000000001373F                 db  42h ; B
.eh_frame:0000000000013740                 db  0Eh
.eh_frame:0000000000013741                 db    8
.eh_frame:0000000000013742                 db  48h ; H
.eh_frame:0000000000013743                 db  0Bh
.eh_frame:0000000000013744                 db    0
.eh_frame:0000000000013745                 db    0
.eh_frame:0000000000013746                 db    0
.eh_frame:0000000000013747                 db    0
.eh_frame:0000000000013748                 db  4Ch ; L
.eh_frame:0000000000013749                 db    0
.eh_frame:000000000001374A                 db    0
.eh_frame:000000000001374B                 db    0
.eh_frame:000000000001374C                 db  7Ch ; |
.eh_frame:000000000001374D                 db  11h
.eh_frame:000000000001374E                 db    0
.eh_frame:000000000001374F                 db    0
.eh_frame:0000000000013750                 db  20h
.eh_frame:0000000000013751                 db  81h
.eh_frame:0000000000013752                 db 0FFh
.eh_frame:0000000000013753                 db 0FFh
.eh_frame:0000000000013754                 db  7Dh ; }
.eh_frame:0000000000013755                 db    0
.eh_frame:0000000000013756                 db    0
.eh_frame:0000000000013757                 db    0
.eh_frame:0000000000013758                 db    0
.eh_frame:0000000000013759                 db  42h ; B
.eh_frame:000000000001375A                 db  0Eh
.eh_frame:000000000001375B                 db  10h
.eh_frame:000000000001375C                 db  8Ch
.eh_frame:000000000001375D                 db    2
.eh_frame:000000000001375E                 db  41h ; A
.eh_frame:000000000001375F                 db  0Eh
.eh_frame:0000000000013760                 db  18h
.eh_frame:0000000000013761                 db  86h
.eh_frame:0000000000013762                 db    3
.eh_frame:0000000000013763                 db  44h ; D
.eh_frame:0000000000013764                 db  0Eh
.eh_frame:0000000000013765                 db  20h
.eh_frame:0000000000013766                 db  83h
.eh_frame:0000000000013767                 db    4
.eh_frame:0000000000013768                 db  69h ; i
.eh_frame:0000000000013769                 db  0Ah
.eh_frame:000000000001376A                 db  0Eh
.eh_frame:000000000001376B                 db  18h
.eh_frame:000000000001376C                 db  41h ; A
.eh_frame:000000000001376D                 db  0Eh
.eh_frame:000000000001376E                 db  10h
.eh_frame:000000000001376F                 db  42h ; B
.eh_frame:0000000000013770                 db  0Eh
.eh_frame:0000000000013771                 db    8
.eh_frame:0000000000013772                 db  45h ; E
.eh_frame:0000000000013773                 db  0Bh
.eh_frame:0000000000013774                 db  55h ; U
.eh_frame:0000000000013775                 db  0Ah
.eh_frame:0000000000013776                 db  0Eh
.eh_frame:0000000000013777                 db  18h
.eh_frame:0000000000013778                 db  41h ; A
.eh_frame:0000000000013779                 db  0Eh
.eh_frame:000000000001377A                 db  10h
.eh_frame:000000000001377B                 db  42h ; B
.eh_frame:000000000001377C                 db  0Eh
.eh_frame:000000000001377D                 db    8
.eh_frame:000000000001377E                 db  48h ; H
.eh_frame:000000000001377F                 db  0Bh
.eh_frame:0000000000013780                 db  41h ; A
.eh_frame:0000000000013781                 db  0Ah
.eh_frame:0000000000013782                 db  0Eh
.eh_frame:0000000000013783                 db  18h
.eh_frame:0000000000013784                 db  46h ; F
.eh_frame:0000000000013785                 db  0Eh
.eh_frame:0000000000013786                 db  10h
.eh_frame:0000000000013787                 db  42h ; B
.eh_frame:0000000000013788                 db  0Eh
.eh_frame:0000000000013789                 db    8
.eh_frame:000000000001378A                 db  47h ; G
.eh_frame:000000000001378B                 db  0Bh
.eh_frame:000000000001378C                 db  49h ; I
.eh_frame:000000000001378D                 db  0Eh
.eh_frame:000000000001378E                 db  18h
.eh_frame:000000000001378F                 db  41h ; A
.eh_frame:0000000000013790                 db  0Eh
.eh_frame:0000000000013791                 db  10h
.eh_frame:0000000000013792                 db  42h ; B
.eh_frame:0000000000013793                 db  0Eh
.eh_frame:0000000000013794                 db    8
.eh_frame:0000000000013795                 db    0
.eh_frame:0000000000013796                 db    0
.eh_frame:0000000000013797                 db    0
.eh_frame:0000000000013798                 db  1Ch
.eh_frame:0000000000013799                 db    0
.eh_frame:000000000001379A                 db    0
.eh_frame:000000000001379B                 db    0
.eh_frame:000000000001379C                 db 0CCh
.eh_frame:000000000001379D                 db  11h
.eh_frame:000000000001379E                 db    0
.eh_frame:000000000001379F                 db    0
.eh_frame:00000000000137A0                 db  50h ; P
.eh_frame:00000000000137A1                 db  81h
.eh_frame:00000000000137A2                 db 0FFh
.eh_frame:00000000000137A3                 db 0FFh
.eh_frame:00000000000137A4                 db  60h ; `
.eh_frame:00000000000137A5                 db    0
.eh_frame:00000000000137A6                 db    0
.eh_frame:00000000000137A7                 db    0
.eh_frame:00000000000137A8                 db    0
.eh_frame:00000000000137A9                 db  44h ; D
.eh_frame:00000000000137AA                 db  0Eh
.eh_frame:00000000000137AB                 db  10h
.eh_frame:00000000000137AC                 db  75h ; u
.eh_frame:00000000000137AD                 db  0Ah
.eh_frame:00000000000137AE                 db  0Eh
.eh_frame:00000000000137AF                 db    8
.eh_frame:00000000000137B0                 db  47h ; G
.eh_frame:00000000000137B1                 db  0Bh
.eh_frame:00000000000137B2                 db  5Fh ; _
.eh_frame:00000000000137B3                 db  0Eh
.eh_frame:00000000000137B4                 db    8
.eh_frame:00000000000137B5                 db    0
.eh_frame:00000000000137B6                 db    0
.eh_frame:00000000000137B7                 db    0
.eh_frame:00000000000137B8                 db  1Ch
.eh_frame:00000000000137B9                 db    0
.eh_frame:00000000000137BA                 db    0
.eh_frame:00000000000137BB                 db    0
.eh_frame:00000000000137BC                 db 0ECh
.eh_frame:00000000000137BD                 db  11h
.eh_frame:00000000000137BE                 db    0
.eh_frame:00000000000137BF                 db    0
.eh_frame:00000000000137C0                 db  90h
.eh_frame:00000000000137C1                 db  81h
.eh_frame:00000000000137C2                 db 0FFh
.eh_frame:00000000000137C3                 db 0FFh
.eh_frame:00000000000137C4                 db  3Ch ; <
.eh_frame:00000000000137C5                 db    0
.eh_frame:00000000000137C6                 db    0
.eh_frame:00000000000137C7                 db    0
.eh_frame:00000000000137C8                 db    0
.eh_frame:00000000000137C9                 db  44h ; D
.eh_frame:00000000000137CA                 db  0Eh
.eh_frame:00000000000137CB                 db  10h
.eh_frame:00000000000137CC                 db  61h ; a
.eh_frame:00000000000137CD                 db  0Ah
.eh_frame:00000000000137CE                 db  0Eh
.eh_frame:00000000000137CF                 db    8
.eh_frame:00000000000137D0                 db  4Bh ; K
.eh_frame:00000000000137D1                 db  0Bh
.eh_frame:00000000000137D2                 db  4Bh ; K
.eh_frame:00000000000137D3                 db  0Eh
.eh_frame:00000000000137D4                 db    8
.eh_frame:00000000000137D5                 db    0
.eh_frame:00000000000137D6                 db    0
.eh_frame:00000000000137D7                 db    0
.eh_frame:00000000000137D8                 db  28h ; (
.eh_frame:00000000000137D9                 db    0
.eh_frame:00000000000137DA                 db    0
.eh_frame:00000000000137DB                 db    0
.eh_frame:00000000000137DC                 db  0Ch
.eh_frame:00000000000137DD                 db  12h
.eh_frame:00000000000137DE                 db    0
.eh_frame:00000000000137DF                 db    0
.eh_frame:00000000000137E0                 db 0B0h
.eh_frame:00000000000137E1                 db  81h
.eh_frame:00000000000137E2                 db 0FFh
.eh_frame:00000000000137E3                 db 0FFh
.eh_frame:00000000000137E4                 db  41h ; A
.eh_frame:00000000000137E5                 db    0
.eh_frame:00000000000137E6                 db    0
.eh_frame:00000000000137E7                 db    0
.eh_frame:00000000000137E8                 db    0
.eh_frame:00000000000137E9                 db  45h ; E
.eh_frame:00000000000137EA                 db  0Eh
.eh_frame:00000000000137EB                 db  10h
.eh_frame:00000000000137EC                 db  8Ch
.eh_frame:00000000000137ED                 db    2
.eh_frame:00000000000137EE                 db  41h ; A
.eh_frame:00000000000137EF                 db  0Eh
.eh_frame:00000000000137F0                 db  18h
.eh_frame:00000000000137F1                 db  86h
.eh_frame:00000000000137F2                 db    3
.eh_frame:00000000000137F3                 db  44h ; D
.eh_frame:00000000000137F4                 db  0Eh
.eh_frame:00000000000137F5                 db  20h
.eh_frame:00000000000137F6                 db  83h
.eh_frame:00000000000137F7                 db    4
.eh_frame:00000000000137F8                 db  73h ; s
.eh_frame:00000000000137F9                 db  0Eh
.eh_frame:00000000000137FA                 db  18h
.eh_frame:00000000000137FB                 db  41h ; A
.eh_frame:00000000000137FC                 db  0Eh
.eh_frame:00000000000137FD                 db  10h
.eh_frame:00000000000137FE                 db  42h ; B
.eh_frame:00000000000137FF                 db  0Eh
.eh_frame:0000000000013800                 db    8
.eh_frame:0000000000013801                 db    0
.eh_frame:0000000000013802                 db    0
.eh_frame:0000000000013803                 db    0
.eh_frame:0000000000013804                 db  28h ; (
.eh_frame:0000000000013805                 db    0
.eh_frame:0000000000013806                 db    0
.eh_frame:0000000000013807                 db    0
.eh_frame:0000000000013808                 db  38h ; 8
.eh_frame:0000000000013809                 db  12h
.eh_frame:000000000001380A                 db    0
.eh_frame:000000000001380B                 db    0
.eh_frame:000000000001380C                 db 0D4h
.eh_frame:000000000001380D                 db  81h
.eh_frame:000000000001380E                 db 0FFh
.eh_frame:000000000001380F                 db 0FFh
.eh_frame:0000000000013810                 db  41h ; A
.eh_frame:0000000000013811                 db    0
.eh_frame:0000000000013812                 db    0
.eh_frame:0000000000013813                 db    0
.eh_frame:0000000000013814                 db    0
.eh_frame:0000000000013815                 db  45h ; E
.eh_frame:0000000000013816                 db  0Eh
.eh_frame:0000000000013817                 db  10h
.eh_frame:0000000000013818                 db  8Ch
.eh_frame:0000000000013819                 db    2
.eh_frame:000000000001381A                 db  41h ; A
.eh_frame:000000000001381B                 db  0Eh
.eh_frame:000000000001381C                 db  18h
.eh_frame:000000000001381D                 db  86h
.eh_frame:000000000001381E                 db    3
.eh_frame:000000000001381F                 db  44h ; D
.eh_frame:0000000000013820                 db  0Eh
.eh_frame:0000000000013821                 db  20h
.eh_frame:0000000000013822                 db  83h
.eh_frame:0000000000013823                 db    4
.eh_frame:0000000000013824                 db  73h ; s
.eh_frame:0000000000013825                 db  0Eh
.eh_frame:0000000000013826                 db  18h
.eh_frame:0000000000013827                 db  41h ; A
.eh_frame:0000000000013828                 db  0Eh
.eh_frame:0000000000013829                 db  10h
.eh_frame:000000000001382A                 db  42h ; B
.eh_frame:000000000001382B                 db  0Eh
.eh_frame:000000000001382C                 db    8
.eh_frame:000000000001382D                 db    0
.eh_frame:000000000001382E                 db    0
.eh_frame:000000000001382F                 db    0
.eh_frame:0000000000013830                 db  74h ; t
.eh_frame:0000000000013831                 db    0
.eh_frame:0000000000013832                 db    0
.eh_frame:0000000000013833                 db    0
.eh_frame:0000000000013834                 db  64h ; d
.eh_frame:0000000000013835                 db  12h
.eh_frame:0000000000013836                 db    0
.eh_frame:0000000000013837                 db    0
.eh_frame:0000000000013838                 db 0F8h
.eh_frame:0000000000013839                 db  81h
.eh_frame:000000000001383A                 db 0FFh
.eh_frame:000000000001383B                 db 0FFh
.eh_frame:000000000001383C                 db 0B2h
.eh_frame:000000000001383D                 db  1Ah
.eh_frame:000000000001383E                 db    0
.eh_frame:000000000001383F                 db    0
.eh_frame:0000000000013840                 db    0
.eh_frame:0000000000013841                 db  42h ; B
.eh_frame:0000000000013842                 db  0Eh
.eh_frame:0000000000013843                 db  10h
.eh_frame:0000000000013844                 db  8Fh
.eh_frame:0000000000013845                 db    2
.eh_frame:0000000000013846                 db  42h ; B
.eh_frame:0000000000013847                 db  0Eh
.eh_frame:0000000000013848                 db  18h
.eh_frame:0000000000013849                 db  8Eh
.eh_frame:000000000001384A                 db    3
.eh_frame:000000000001384B                 db  45h ; E
.eh_frame:000000000001384C                 db  0Eh
.eh_frame:000000000001384D                 db  20h
.eh_frame:000000000001384E                 db  8Dh
.eh_frame:000000000001384F                 db    4
.eh_frame:0000000000013850                 db  42h ; B
.eh_frame:0000000000013851                 db  0Eh
.eh_frame:0000000000013852                 db  28h ; (
.eh_frame:0000000000013853                 db  8Ch
.eh_frame:0000000000013854                 db    5
.eh_frame:0000000000013855                 db  44h ; D
.eh_frame:0000000000013856                 db  0Eh
.eh_frame:0000000000013857                 db  30h ; 0
.eh_frame:0000000000013858                 db  86h
.eh_frame:0000000000013859                 db    6
.eh_frame:000000000001385A                 db  41h ; A
.eh_frame:000000000001385B                 db  0Eh
.eh_frame:000000000001385C                 db  38h ; 8
.eh_frame:000000000001385D                 db  83h
.eh_frame:000000000001385E                 db    7
.eh_frame:000000000001385F                 db  4Ah ; J
.eh_frame:0000000000013860                 db  0Eh
.eh_frame:0000000000013861                 db  80h
.eh_frame:0000000000013862                 db  0Ah
.eh_frame:0000000000013863                 db    2
.eh_frame:0000000000013864                 db 0D6h
.eh_frame:0000000000013865                 db  0Ah
.eh_frame:0000000000013866                 db  0Eh
.eh_frame:0000000000013867                 db  38h ; 8
.eh_frame:0000000000013868                 db  41h ; A
.eh_frame:0000000000013869                 db  0Eh
.eh_frame:000000000001386A                 db  30h ; 0
.eh_frame:000000000001386B                 db  41h ; A
.eh_frame:000000000001386C                 db  0Eh
.eh_frame:000000000001386D                 db  28h ; (
.eh_frame:000000000001386E                 db  42h ; B
.eh_frame:000000000001386F                 db  0Eh
.eh_frame:0000000000013870                 db  20h
.eh_frame:0000000000013871                 db  42h ; B
.eh_frame:0000000000013872                 db  0Eh
.eh_frame:0000000000013873                 db  18h
.eh_frame:0000000000013874                 db  42h ; B
.eh_frame:0000000000013875                 db  0Eh
.eh_frame:0000000000013876                 db  10h
.eh_frame:0000000000013877                 db  42h ; B
.eh_frame:0000000000013878                 db  0Eh
.eh_frame:0000000000013879                 db    8
.eh_frame:000000000001387A                 db  46h ; F
.eh_frame:000000000001387B                 db  0Bh
.eh_frame:000000000001387C                 db    3
.eh_frame:000000000001387D                 db  99h
.eh_frame:000000000001387E                 db    5
.eh_frame:000000000001387F                 db  0Eh
.eh_frame:0000000000013880                 db  88h
.eh_frame:0000000000013881                 db  0Ah
.eh_frame:0000000000013882                 db  44h ; D
.eh_frame:0000000000013883                 db  0Eh
.eh_frame:0000000000013884                 db  90h
.eh_frame:0000000000013885                 db  0Ah
.eh_frame:0000000000013886                 db  44h ; D
.eh_frame:0000000000013887                 db  0Eh
.eh_frame:0000000000013888                 db  98h
.eh_frame:0000000000013889                 db  0Ah
.eh_frame:000000000001388A                 db  45h ; E
.eh_frame:000000000001388B                 db  0Eh
.eh_frame:000000000001388C                 db 0A0h
.eh_frame:000000000001388D                 db  0Ah
.eh_frame:000000000001388E                 db  4Eh ; N
.eh_frame:000000000001388F                 db  0Eh
.eh_frame:0000000000013890                 db  80h
.eh_frame:0000000000013891                 db  0Ah
.eh_frame:0000000000013892                 db    2
.eh_frame:0000000000013893                 db  98h
.eh_frame:0000000000013894                 db  0Eh
.eh_frame:0000000000013895                 db  88h
.eh_frame:0000000000013896                 db  0Ah
.eh_frame:0000000000013897                 db  44h ; D
.eh_frame:0000000000013898                 db  0Eh
.eh_frame:0000000000013899                 db  90h
.eh_frame:000000000001389A                 db  0Ah
.eh_frame:000000000001389B                 db  44h ; D
.eh_frame:000000000001389C                 db  0Eh
.eh_frame:000000000001389D                 db  98h
.eh_frame:000000000001389E                 db  0Ah
.eh_frame:000000000001389F                 db  45h ; E
.eh_frame:00000000000138A0                 db  0Eh
.eh_frame:00000000000138A1                 db 0A0h
.eh_frame:00000000000138A2                 db  0Ah
.eh_frame:00000000000138A3                 db  5Dh ; ]
.eh_frame:00000000000138A4                 db  0Eh
.eh_frame:00000000000138A5                 db  80h
.eh_frame:00000000000138A6                 db  0Ah
.eh_frame:00000000000138A7                 db    0
.eh_frame:00000000000138A8                 db  2Ch ; ,
.eh_frame:00000000000138A9                 db    0
.eh_frame:00000000000138AA                 db    0
.eh_frame:00000000000138AB                 db    0
.eh_frame:00000000000138AC                 db 0DCh
.eh_frame:00000000000138AD                 db  12h
.eh_frame:00000000000138AE                 db    0
.eh_frame:00000000000138AF                 db    0
.eh_frame:00000000000138B0                 db  40h ; @
.eh_frame:00000000000138B1                 db  9Ch
.eh_frame:00000000000138B2                 db 0FFh
.eh_frame:00000000000138B3                 db 0FFh
.eh_frame:00000000000138B4                 db  4Eh ; N
.eh_frame:00000000000138B5                 db    0
.eh_frame:00000000000138B6                 db    0
.eh_frame:00000000000138B7                 db    0
.eh_frame:00000000000138B8                 db    0
.eh_frame:00000000000138B9                 db  44h ; D
.eh_frame:00000000000138BA                 db  0Eh
.eh_frame:00000000000138BB                 db  20h
.eh_frame:00000000000138BC                 db  57h ; W
.eh_frame:00000000000138BD                 db  0Eh
.eh_frame:00000000000138BE                 db  28h ; (
.eh_frame:00000000000138BF                 db  45h ; E
.eh_frame:00000000000138C0                 db  0Eh
.eh_frame:00000000000138C1                 db  30h ; 0
.eh_frame:00000000000138C2                 db  49h ; I
.eh_frame:00000000000138C3                 db  0Eh
.eh_frame:00000000000138C4                 db  38h ; 8
.eh_frame:00000000000138C5                 db  42h ; B
.eh_frame:00000000000138C6                 db  0Eh
.eh_frame:00000000000138C7                 db  40h ; @
.eh_frame:00000000000138C8                 db  49h ; I
.eh_frame:00000000000138C9                 db  0Eh
.eh_frame:00000000000138CA                 db  20h
.eh_frame:00000000000138CB                 db  54h ; T
.eh_frame:00000000000138CC                 db  0Ah
.eh_frame:00000000000138CD                 db  0Eh
.eh_frame:00000000000138CE                 db    8
.eh_frame:00000000000138CF                 db  41h ; A
.eh_frame:00000000000138D0                 db  0Bh
.eh_frame:00000000000138D1                 db    0
.eh_frame:00000000000138D2                 db    0
.eh_frame:00000000000138D3                 db    0
.eh_frame:00000000000138D4                 db    0
.eh_frame:00000000000138D5                 db    0
.eh_frame:00000000000138D6                 db    0
.eh_frame:00000000000138D7                 db    0
.eh_frame:00000000000138D8                 db  34h ; 4
.eh_frame:00000000000138D9                 db    0
.eh_frame:00000000000138DA                 db    0
.eh_frame:00000000000138DB                 db    0
.eh_frame:00000000000138DC                 db  0Ch
.eh_frame:00000000000138DD                 db  13h
.eh_frame:00000000000138DE                 db    0
.eh_frame:00000000000138DF                 db    0
.eh_frame:00000000000138E0                 db  60h ; `
.eh_frame:00000000000138E1                 db  9Ch
.eh_frame:00000000000138E2                 db 0FFh
.eh_frame:00000000000138E3                 db 0FFh
.eh_frame:00000000000138E4                 db  7Bh ; {
.eh_frame:00000000000138E5                 db    0
.eh_frame:00000000000138E6                 db    0
.eh_frame:00000000000138E7                 db    0
.eh_frame:00000000000138E8                 db    0
.eh_frame:00000000000138E9                 db  42h ; B
.eh_frame:00000000000138EA                 db  0Eh
.eh_frame:00000000000138EB                 db  10h
.eh_frame:00000000000138EC                 db  8Ch
.eh_frame:00000000000138ED                 db    2
.eh_frame:00000000000138EE                 db  41h ; A
.eh_frame:00000000000138EF                 db  0Eh
.eh_frame:00000000000138F0                 db  18h
.eh_frame:00000000000138F1                 db  86h
.eh_frame:00000000000138F2                 db    3
.eh_frame:00000000000138F3                 db  41h ; A
.eh_frame:00000000000138F4                 db  0Eh
.eh_frame:00000000000138F5                 db  20h
.eh_frame:00000000000138F6                 db  83h
.eh_frame:00000000000138F7                 db    4
.eh_frame:00000000000138F8                 db  7Dh ; }
.eh_frame:00000000000138F9                 db  0Ah
.eh_frame:00000000000138FA                 db  0Eh
.eh_frame:00000000000138FB                 db  18h
.eh_frame:00000000000138FC                 db  41h ; A
.eh_frame:00000000000138FD                 db  0Eh
.eh_frame:00000000000138FE                 db  10h
.eh_frame:00000000000138FF                 db  42h ; B
.eh_frame:0000000000013900                 db  0Eh
.eh_frame:0000000000013901                 db    8
.eh_frame:0000000000013902                 db  44h ; D
.eh_frame:0000000000013903                 db  0Bh
.eh_frame:0000000000013904                 db  60h ; `
.eh_frame:0000000000013905                 db  0Ah
.eh_frame:0000000000013906                 db  0Eh
.eh_frame:0000000000013907                 db  18h
.eh_frame:0000000000013908                 db  41h ; A
.eh_frame:0000000000013909                 db  0Eh
.eh_frame:000000000001390A                 db  10h
.eh_frame:000000000001390B                 db  42h ; B
.eh_frame:000000000001390C                 db  0Eh
.eh_frame:000000000001390D                 db    8
.eh_frame:000000000001390E                 db  45h ; E
.eh_frame:000000000001390F                 db  0Bh
.eh_frame:0000000000013910                 db  1Ch
.eh_frame:0000000000013911                 db    0
.eh_frame:0000000000013912                 db    0
.eh_frame:0000000000013913                 db    0
.eh_frame:0000000000013914                 db  44h ; D
.eh_frame:0000000000013915                 db  13h
.eh_frame:0000000000013916                 db    0
.eh_frame:0000000000013917                 db    0
.eh_frame:0000000000013918                 db 0A8h
.eh_frame:0000000000013919                 db  9Ch
.eh_frame:000000000001391A                 db 0FFh
.eh_frame:000000000001391B                 db 0FFh
.eh_frame:000000000001391C                 db  40h ; @
.eh_frame:000000000001391D                 db    0
.eh_frame:000000000001391E                 db    0
.eh_frame:000000000001391F                 db    0
.eh_frame:0000000000013920                 db    0
.eh_frame:0000000000013921                 db  44h ; D
.eh_frame:0000000000013922                 db  0Eh
.eh_frame:0000000000013923                 db  10h
.eh_frame:0000000000013924                 db  83h
.eh_frame:0000000000013925                 db    2
.eh_frame:0000000000013926                 db  5Ah ; Z
.eh_frame:0000000000013927                 db  0Ah
.eh_frame:0000000000013928                 db  0Eh
.eh_frame:0000000000013929                 db    8
.eh_frame:000000000001392A                 db  4Ah ; J
.eh_frame:000000000001392B                 db  0Bh
.eh_frame:000000000001392C                 db  53h ; S
.eh_frame:000000000001392D                 db  0Eh
.eh_frame:000000000001392E                 db    8
.eh_frame:000000000001392F                 db    0
.eh_frame:0000000000013930                 db  2Ch ; ,
.eh_frame:0000000000013931                 db    0
.eh_frame:0000000000013932                 db    0
.eh_frame:0000000000013933                 db    0
.eh_frame:0000000000013934                 db  64h ; d
.eh_frame:0000000000013935                 db  13h
.eh_frame:0000000000013936                 db    0
.eh_frame:0000000000013937                 db    0
.eh_frame:0000000000013938                 db 0C8h
.eh_frame:0000000000013939                 db  9Ch
.eh_frame:000000000001393A                 db 0FFh
.eh_frame:000000000001393B                 db 0FFh
.eh_frame:000000000001393C                 db  57h ; W
.eh_frame:000000000001393D                 db    0
.eh_frame:000000000001393E                 db    0
.eh_frame:000000000001393F                 db    0
.eh_frame:0000000000013940                 db    0
.eh_frame:0000000000013941                 db  63h ; c
.eh_frame:0000000000013942                 db  0Eh
.eh_frame:0000000000013943                 db  10h
.eh_frame:0000000000013944                 db  8Ch
.eh_frame:0000000000013945                 db    2
.eh_frame:0000000000013946                 db  41h ; A
.eh_frame:0000000000013947                 db  0Eh
.eh_frame:0000000000013948                 db  18h
.eh_frame:0000000000013949                 db  86h
.eh_frame:000000000001394A                 db    3
.eh_frame:000000000001394B                 db  44h ; D
.eh_frame:000000000001394C                 db  0Eh
.eh_frame:000000000001394D                 db  20h
.eh_frame:000000000001394E                 db  83h
.eh_frame:000000000001394F                 db    4
.eh_frame:0000000000013950                 db  6Bh ; k
.eh_frame:0000000000013951                 db  0Eh
.eh_frame:0000000000013952                 db  18h
.eh_frame:0000000000013953                 db  41h ; A
.eh_frame:0000000000013954                 db  0Eh
.eh_frame:0000000000013955                 db  10h
.eh_frame:0000000000013956                 db  42h ; B
.eh_frame:0000000000013957                 db  0Eh
.eh_frame:0000000000013958                 db    8
.eh_frame:0000000000013959                 db    0
.eh_frame:000000000001395A                 db    0
.eh_frame:000000000001395B                 db    0
.eh_frame:000000000001395C                 db    0
.eh_frame:000000000001395D                 db    0
.eh_frame:000000000001395E                 db    0
.eh_frame:000000000001395F                 db    0
.eh_frame:0000000000013960                 db  14h
.eh_frame:0000000000013961                 db    0
.eh_frame:0000000000013962                 db    0
.eh_frame:0000000000013963                 db    0
.eh_frame:0000000000013964                 db  94h
.eh_frame:0000000000013965                 db  13h
.eh_frame:0000000000013966                 db    0
.eh_frame:0000000000013967                 db    0
.eh_frame:0000000000013968                 db 0F8h
.eh_frame:0000000000013969                 db  9Ch
.eh_frame:000000000001396A                 db 0FFh
.eh_frame:000000000001396B                 db 0FFh
.eh_frame:000000000001396C                 db    4
.eh_frame:000000000001396D                 db    0
.eh_frame:000000000001396E                 db    0
.eh_frame:000000000001396F                 db    0
.eh_frame:0000000000013970                 db    0
.eh_frame:0000000000013971                 db    0
.eh_frame:0000000000013972                 db    0
.eh_frame:0000000000013973                 db    0
.eh_frame:0000000000013974                 db    0
.eh_frame:0000000000013975                 db    0
.eh_frame:0000000000013976                 db    0
.eh_frame:0000000000013977                 db    0
.eh_frame:0000000000013978                 db  2Ch ; ,
.eh_frame:0000000000013979                 db    0
.eh_frame:000000000001397A                 db    0
.eh_frame:000000000001397B                 db    0
.eh_frame:000000000001397C                 db 0ACh
.eh_frame:000000000001397D                 db  13h
.eh_frame:000000000001397E                 db    0
.eh_frame:000000000001397F                 db    0
.eh_frame:0000000000013980                 db 0F0h
.eh_frame:0000000000013981                 db  9Ch
.eh_frame:0000000000013982                 db 0FFh
.eh_frame:0000000000013983                 db 0FFh
.eh_frame:0000000000013984                 db  1Fh
.eh_frame:0000000000013985                 db  11h
.eh_frame:0000000000013986                 db    0
.eh_frame:0000000000013987                 db    0
.eh_frame:0000000000013988                 db    0
.eh_frame:0000000000013989                 db  41h ; A
.eh_frame:000000000001398A                 db  0Eh
.eh_frame:000000000001398B                 db  10h
.eh_frame:000000000001398C                 db  86h
.eh_frame:000000000001398D                 db    2
.eh_frame:000000000001398E                 db  43h ; C
.eh_frame:000000000001398F                 db  0Dh
.eh_frame:0000000000013990                 db    6
.eh_frame:0000000000013991                 db  48h ; H
.eh_frame:0000000000013992                 db  8Fh
.eh_frame:0000000000013993                 db    3
.eh_frame:0000000000013994                 db  8Eh
.eh_frame:0000000000013995                 db    4
.eh_frame:0000000000013996                 db  8Dh
.eh_frame:0000000000013997                 db    5
.eh_frame:0000000000013998                 db  8Ch
.eh_frame:0000000000013999                 db    6
.eh_frame:000000000001399A                 db  48h ; H
.eh_frame:000000000001399B                 db  83h
.eh_frame:000000000001399C                 db    7
.eh_frame:000000000001399D                 db    3
.eh_frame:000000000001399E                 db 0EFh
.eh_frame:000000000001399F                 db    1
.eh_frame:00000000000139A0                 db  0Ah
.eh_frame:00000000000139A1                 db  0Ch
.eh_frame:00000000000139A2                 db    7
.eh_frame:00000000000139A3                 db    8
.eh_frame:00000000000139A4                 db  45h ; E
.eh_frame:00000000000139A5                 db  0Bh
.eh_frame:00000000000139A6                 db    0
.eh_frame:00000000000139A7                 db    0
.eh_frame:00000000000139A8                 db  14h
.eh_frame:00000000000139A9                 db    0
.eh_frame:00000000000139AA                 db    0
.eh_frame:00000000000139AB                 db    0
.eh_frame:00000000000139AC                 db 0DCh
.eh_frame:00000000000139AD                 db  13h
.eh_frame:00000000000139AE                 db    0
.eh_frame:00000000000139AF                 db    0
.eh_frame:00000000000139B0                 db 0E0h
.eh_frame:00000000000139B1                 db 0ADh
.eh_frame:00000000000139B2                 db 0FFh
.eh_frame:00000000000139B3                 db 0FFh
.eh_frame:00000000000139B4                 db 0FEh
.eh_frame:00000000000139B5                 db    1
.eh_frame:00000000000139B6                 db    0
.eh_frame:00000000000139B7                 db    0
.eh_frame:00000000000139B8                 db    0
.eh_frame:00000000000139B9                 db    0
.eh_frame:00000000000139BA                 db    0
.eh_frame:00000000000139BB                 db    0
.eh_frame:00000000000139BC                 db    0
.eh_frame:00000000000139BD                 db    0
.eh_frame:00000000000139BE                 db    0
.eh_frame:00000000000139BF                 db    0
.eh_frame:00000000000139C0                 db  4Ch ; L
.eh_frame:00000000000139C1                 db    0
.eh_frame:00000000000139C2                 db    0
.eh_frame:00000000000139C3                 db    0
.eh_frame:00000000000139C4                 db 0F4h
.eh_frame:00000000000139C5                 db  13h
.eh_frame:00000000000139C6                 db    0
.eh_frame:00000000000139C7                 db    0
.eh_frame:00000000000139C8                 db 0C8h
.eh_frame:00000000000139C9                 db 0AFh
.eh_frame:00000000000139CA                 db 0FFh
.eh_frame:00000000000139CB                 db 0FFh
.eh_frame:00000000000139CC                 db 0ECh
.eh_frame:00000000000139CD                 db  0Ch
.eh_frame:00000000000139CE                 db    0
.eh_frame:00000000000139CF                 db    0
.eh_frame:00000000000139D0                 db    0
.eh_frame:00000000000139D1                 db  42h ; B
.eh_frame:00000000000139D2                 db  0Eh
.eh_frame:00000000000139D3                 db  10h
.eh_frame:00000000000139D4                 db  8Fh
.eh_frame:00000000000139D5                 db    2
.eh_frame:00000000000139D6                 db  42h ; B
.eh_frame:00000000000139D7                 db  0Eh
.eh_frame:00000000000139D8                 db  18h
.eh_frame:00000000000139D9                 db  8Eh
.eh_frame:00000000000139DA                 db    3
.eh_frame:00000000000139DB                 db  46h ; F
.eh_frame:00000000000139DC                 db  0Eh
.eh_frame:00000000000139DD                 db  20h
.eh_frame:00000000000139DE                 db  8Dh
.eh_frame:00000000000139DF                 db    4
.eh_frame:00000000000139E0                 db  42h ; B
.eh_frame:00000000000139E1                 db  0Eh
.eh_frame:00000000000139E2                 db  28h ; (
.eh_frame:00000000000139E3                 db  8Ch
.eh_frame:00000000000139E4                 db    5
.eh_frame:00000000000139E5                 db  45h ; E
.eh_frame:00000000000139E6                 db  0Eh
.eh_frame:00000000000139E7                 db  30h ; 0
.eh_frame:00000000000139E8                 db  86h
.eh_frame:00000000000139E9                 db    6
.eh_frame:00000000000139EA                 db  41h ; A
.eh_frame:00000000000139EB                 db  0Eh
.eh_frame:00000000000139EC                 db  38h ; 8
.eh_frame:00000000000139ED                 db  83h
.eh_frame:00000000000139EE                 db    7
.eh_frame:00000000000139EF                 db  52h ; R
.eh_frame:00000000000139F0                 db  0Eh
.eh_frame:00000000000139F1                 db  90h
.eh_frame:00000000000139F2                 db    1
.eh_frame:00000000000139F3                 db    2
.eh_frame:00000000000139F4                 db  82h
.eh_frame:00000000000139F5                 db  0Ah
.eh_frame:00000000000139F6                 db  0Eh
.eh_frame:00000000000139F7                 db  38h ; 8
.eh_frame:00000000000139F8                 db  41h ; A
.eh_frame:00000000000139F9                 db  0Eh
.eh_frame:00000000000139FA                 db  30h ; 0
.eh_frame:00000000000139FB                 db  41h ; A
.eh_frame:00000000000139FC                 db  0Eh
.eh_frame:00000000000139FD                 db  28h ; (
.eh_frame:00000000000139FE                 db  42h ; B
.eh_frame:00000000000139FF                 db  0Eh
.eh_frame:0000000000013A00                 db  20h
.eh_frame:0000000000013A01                 db  42h ; B
.eh_frame:0000000000013A02                 db  0Eh
.eh_frame:0000000000013A03                 db  18h
.eh_frame:0000000000013A04                 db  42h ; B
.eh_frame:0000000000013A05                 db  0Eh
.eh_frame:0000000000013A06                 db  10h
.eh_frame:0000000000013A07                 db  42h ; B
.eh_frame:0000000000013A08                 db  0Eh
.eh_frame:0000000000013A09                 db    8
.eh_frame:0000000000013A0A                 db  48h ; H
.eh_frame:0000000000013A0B                 db  0Bh
.eh_frame:0000000000013A0C                 db    0
.eh_frame:0000000000013A0D                 db    0
.eh_frame:0000000000013A0E                 db    0
.eh_frame:0000000000013A0F                 db    0
.eh_frame:0000000000013A10                 db  44h ; D
.eh_frame:0000000000013A11                 db    0
.eh_frame:0000000000013A12                 db    0
.eh_frame:0000000000013A13                 db    0
.eh_frame:0000000000013A14                 db  44h ; D
.eh_frame:0000000000013A15                 db  14h
.eh_frame:0000000000013A16                 db    0
.eh_frame:0000000000013A17                 db    0
.eh_frame:0000000000013A18                 db  68h ; h
.eh_frame:0000000000013A19                 db 0BCh
.eh_frame:0000000000013A1A                 db 0FFh
.eh_frame:0000000000013A1B                 db 0FFh
.eh_frame:0000000000013A1C                 db  65h ; e
.eh_frame:0000000000013A1D                 db    0
.eh_frame:0000000000013A1E                 db    0
.eh_frame:0000000000013A1F                 db    0
.eh_frame:0000000000013A20                 db    0
.eh_frame:0000000000013A21                 db  42h ; B
.eh_frame:0000000000013A22                 db  0Eh
.eh_frame:0000000000013A23                 db  10h
.eh_frame:0000000000013A24                 db  8Fh
.eh_frame:0000000000013A25                 db    2
.eh_frame:0000000000013A26                 db  42h ; B
.eh_frame:0000000000013A27                 db  0Eh
.eh_frame:0000000000013A28                 db  18h
.eh_frame:0000000000013A29                 db  8Eh
.eh_frame:0000000000013A2A                 db    3
.eh_frame:0000000000013A2B                 db  45h ; E
.eh_frame:0000000000013A2C                 db  0Eh
.eh_frame:0000000000013A2D                 db  20h
.eh_frame:0000000000013A2E                 db  8Dh
.eh_frame:0000000000013A2F                 db    4
.eh_frame:0000000000013A30                 db  42h ; B
.eh_frame:0000000000013A31                 db  0Eh
.eh_frame:0000000000013A32                 db  28h ; (
.eh_frame:0000000000013A33                 db  8Ch
.eh_frame:0000000000013A34                 db    5
.eh_frame:0000000000013A35                 db  48h ; H
.eh_frame:0000000000013A36                 db  0Eh
.eh_frame:0000000000013A37                 db  30h ; 0
.eh_frame:0000000000013A38                 db  86h
.eh_frame:0000000000013A39                 db    6
.eh_frame:0000000000013A3A                 db  48h ; H
.eh_frame:0000000000013A3B                 db  0Eh
.eh_frame:0000000000013A3C                 db  38h ; 8
.eh_frame:0000000000013A3D                 db  83h
.eh_frame:0000000000013A3E                 db    7
.eh_frame:0000000000013A3F                 db  4Dh ; M
.eh_frame:0000000000013A40                 db  0Eh
.eh_frame:0000000000013A41                 db  40h ; @
.eh_frame:0000000000013A42                 db  72h ; r
.eh_frame:0000000000013A43                 db  0Eh
.eh_frame:0000000000013A44                 db  38h ; 8
.eh_frame:0000000000013A45                 db  41h ; A
.eh_frame:0000000000013A46                 db  0Eh
.eh_frame:0000000000013A47                 db  30h ; 0
.eh_frame:0000000000013A48                 db  41h ; A
.eh_frame:0000000000013A49                 db  0Eh
.eh_frame:0000000000013A4A                 db  28h ; (
.eh_frame:0000000000013A4B                 db  42h ; B
.eh_frame:0000000000013A4C                 db  0Eh
.eh_frame:0000000000013A4D                 db  20h
.eh_frame:0000000000013A4E                 db  42h ; B
.eh_frame:0000000000013A4F                 db  0Eh
.eh_frame:0000000000013A50                 db  18h
.eh_frame:0000000000013A51                 db  42h ; B
.eh_frame:0000000000013A52                 db  0Eh
.eh_frame:0000000000013A53                 db  10h
.eh_frame:0000000000013A54                 db  42h ; B
.eh_frame:0000000000013A55                 db  0Eh
.eh_frame:0000000000013A56                 db    8
.eh_frame:0000000000013A57                 db    0
.eh_frame:0000000000013A58                 db  14h
.eh_frame:0000000000013A59                 db    0
.eh_frame:0000000000013A5A                 db    0
.eh_frame:0000000000013A5B                 db    0
.eh_frame:0000000000013A5C                 db  8Ch
.eh_frame:0000000000013A5D                 db  14h
.eh_frame:0000000000013A5E                 db    0
.eh_frame:0000000000013A5F                 db    0
.eh_frame:0000000000013A60                 db  90h
.eh_frame:0000000000013A61                 db 0BCh
.eh_frame:0000000000013A62                 db 0FFh
.eh_frame:0000000000013A63                 db 0FFh
.eh_frame:0000000000013A64                 db    2
.eh_frame:0000000000013A65                 db    0
.eh_frame:0000000000013A66                 db    0
.eh_frame:0000000000013A67                 db    0
.eh_frame:0000000000013A68                 db    0
.eh_frame:0000000000013A69                 db    0
.eh_frame:0000000000013A6A                 db    0
.eh_frame:0000000000013A6B                 db    0
.eh_frame:0000000000013A6C                 db    0
.eh_frame:0000000000013A6D                 db    0
.eh_frame:0000000000013A6E                 db    0
.eh_frame:0000000000013A6F                 db    0
.eh_frame:0000000000013A70                 db  10h
.eh_frame:0000000000013A71                 db    0
.eh_frame:0000000000013A72                 db    0
.eh_frame:0000000000013A73                 db    0
.eh_frame:0000000000013A74                 db 0A4h
.eh_frame:0000000000013A75                 db  14h
.eh_frame:0000000000013A76                 db    0
.eh_frame:0000000000013A77                 db    0
.eh_frame:0000000000013A78                 db  88h
.eh_frame:0000000000013A79                 db 0BCh
.eh_frame:0000000000013A7A                 db 0FFh
.eh_frame:0000000000013A7B                 db 0FFh
.eh_frame:0000000000013A7C                 db  0Eh
.eh_frame:0000000000013A7D                 db    0
.eh_frame:0000000000013A7E                 db    0
.eh_frame:0000000000013A7F                 db    0
.eh_frame:0000000000013A80                 db    0
.eh_frame:0000000000013A81                 db    0
.eh_frame:0000000000013A82                 db    0
.eh_frame:0000000000013A83                 db    0
.eh_frame:0000000000013A84 __FRAME_END__   db    0
.eh_frame:0000000000013A85                 db    0
.eh_frame:0000000000013A86                 db    0
.eh_frame:0000000000013A87                 db    0
.eh_frame:0000000000013A87 _eh_frame       ends
.eh_frame:0000000000013A87
.init_array:00000000002140F0 ; ELF Initialization Function Table
.init_array:00000000002140F0 ; ===========================================================================
.init_array:00000000002140F0
.init_array:00000000002140F0 ; Segment type: Pure data
.init_array:00000000002140F0 ; Segment permissions: Read/Write
.init_array:00000000002140F0 _init_array     segment qword public 'DATA' use64
.init_array:00000000002140F0                 assume cs:_init_array
.init_array:00000000002140F0                 ;org 2140F0h
.init_array:00000000002140F0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:00000000002140F0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:00000000002140F0                                         ; LOAD:0000000000000210↑o ...
.init_array:00000000002140F0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:00000000002140F0
.fini_array:00000000002140F8 ; ELF Termination Function Table
.fini_array:00000000002140F8 ; ===========================================================================
.fini_array:00000000002140F8
.fini_array:00000000002140F8 ; Segment type: Pure data
.fini_array:00000000002140F8 ; Segment permissions: Read/Write
.fini_array:00000000002140F8 _fini_array     segment qword public 'DATA' use64
.fini_array:00000000002140F8                 assume cs:_fini_array
.fini_array:00000000002140F8                 ;org 2140F8h
.fini_array:00000000002140F8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:00000000002140F8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:00000000002140F8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:00000000002140F8
.data.rel.ro:0000000000214100 ; ===========================================================================
.data.rel.ro:0000000000214100
.data.rel.ro:0000000000214100 ; Segment type: Pure data
.data.rel.ro:0000000000214100 ; Segment permissions: Read/Write
.data.rel.ro:0000000000214100 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000214100                 assume cs:_data_rel_ro
.data.rel.ro:0000000000214100                 ;org 214100h
.data.rel.ro:0000000000214100 time_args       dq offset aAtime        ; DATA XREF: main+140↑o
.data.rel.ro:0000000000214100                                         ; "atime"
.data.rel.ro:0000000000214108                 dq offset aAccess       ; "access"
.data.rel.ro:0000000000214110                 dq offset aUse          ; "use"
.data.rel.ro:0000000000214118                 dq offset aMtime        ; "mtime"
.data.rel.ro:0000000000214120                 dq offset aModify       ; "modify"
.data.rel.ro:0000000000214128                 align 20h
.data.rel.ro:0000000000214140 ; struct option longopts
.data.rel.ro:0000000000214140 longopts        dq offset aTime+2       ; name
.data.rel.ro:0000000000214140                                         ; DATA XREF: main+13↑o
.data.rel.ro:0000000000214140                 dd 1                    ; has_arg ; "time"
.data.rel.ro:0000000000214140                 db 4 dup(0)
.data.rel.ro:0000000000214140                 dq 0                    ; flag
.data.rel.ro:0000000000214140                 dd 80h                  ; val
.data.rel.ro:0000000000214140                 db 4 dup(0)
.data.rel.ro:0000000000214160                 dq offset aNoCreate     ; "no-create"
.data.rel.ro:0000000000214168                 db    0
.data.rel.ro:0000000000214169                 db    0
.data.rel.ro:000000000021416A                 db    0
.data.rel.ro:000000000021416B                 db    0
.data.rel.ro:000000000021416C                 db    0
.data.rel.ro:000000000021416D                 db    0
.data.rel.ro:000000000021416E                 db    0
.data.rel.ro:000000000021416F                 db    0
.data.rel.ro:0000000000214170                 db    0
.data.rel.ro:0000000000214171                 db    0
.data.rel.ro:0000000000214172                 db    0
.data.rel.ro:0000000000214173                 db    0
.data.rel.ro:0000000000214174                 db    0
.data.rel.ro:0000000000214175                 db    0
.data.rel.ro:0000000000214176                 db    0
.data.rel.ro:0000000000214177                 db    0
.data.rel.ro:0000000000214178                 db  63h ; c
.data.rel.ro:0000000000214179                 db    0
.data.rel.ro:000000000021417A                 db    0
.data.rel.ro:000000000021417B                 db    0
.data.rel.ro:000000000021417C                 db    0
.data.rel.ro:000000000021417D                 db    0
.data.rel.ro:000000000021417E                 db    0
.data.rel.ro:000000000021417F                 db    0
.data.rel.ro:0000000000214180                 dq offset aDate_0       ; "date"
.data.rel.ro:0000000000214188                 db    1
.data.rel.ro:0000000000214189                 db    0
.data.rel.ro:000000000021418A                 db    0
.data.rel.ro:000000000021418B                 db    0
.data.rel.ro:000000000021418C                 db    0
.data.rel.ro:000000000021418D                 db    0
.data.rel.ro:000000000021418E                 db    0
.data.rel.ro:000000000021418F                 db    0
.data.rel.ro:0000000000214190                 db    0
.data.rel.ro:0000000000214191                 db    0
.data.rel.ro:0000000000214192                 db    0
.data.rel.ro:0000000000214193                 db    0
.data.rel.ro:0000000000214194                 db    0
.data.rel.ro:0000000000214195                 db    0
.data.rel.ro:0000000000214196                 db    0
.data.rel.ro:0000000000214197                 db    0
.data.rel.ro:0000000000214198                 db  64h ; d
.data.rel.ro:0000000000214199                 db    0
.data.rel.ro:000000000021419A                 db    0
.data.rel.ro:000000000021419B                 db    0
.data.rel.ro:000000000021419C                 db    0
.data.rel.ro:000000000021419D                 db    0
.data.rel.ro:000000000021419E                 db    0
.data.rel.ro:000000000021419F                 db    0
.data.rel.ro:00000000002141A0                 dq offset aNoDereference+5 ; "reference"
.data.rel.ro:00000000002141A8                 db    1
.data.rel.ro:00000000002141A9                 db    0
.data.rel.ro:00000000002141AA                 db    0
.data.rel.ro:00000000002141AB                 db    0
.data.rel.ro:00000000002141AC                 db    0
.data.rel.ro:00000000002141AD                 db    0
.data.rel.ro:00000000002141AE                 db    0
.data.rel.ro:00000000002141AF                 db    0
.data.rel.ro:00000000002141B0                 db    0
.data.rel.ro:00000000002141B1                 db    0
.data.rel.ro:00000000002141B2                 db    0
.data.rel.ro:00000000002141B3                 db    0
.data.rel.ro:00000000002141B4                 db    0
.data.rel.ro:00000000002141B5                 db    0
.data.rel.ro:00000000002141B6                 db    0
.data.rel.ro:00000000002141B7                 db    0
.data.rel.ro:00000000002141B8                 db  72h ; r
.data.rel.ro:00000000002141B9                 db    0
.data.rel.ro:00000000002141BA                 db    0
.data.rel.ro:00000000002141BB                 db    0
.data.rel.ro:00000000002141BC                 db    0
.data.rel.ro:00000000002141BD                 db    0
.data.rel.ro:00000000002141BE                 db    0
.data.rel.ro:00000000002141BF                 db    0
.data.rel.ro:00000000002141C0                 dq offset aNoDereference ; "no-dereference"
.data.rel.ro:00000000002141C8                 db    0
.data.rel.ro:00000000002141C9                 db    0
.data.rel.ro:00000000002141CA                 db    0
.data.rel.ro:00000000002141CB                 db    0
.data.rel.ro:00000000002141CC                 db    0
.data.rel.ro:00000000002141CD                 db    0
.data.rel.ro:00000000002141CE                 db    0
.data.rel.ro:00000000002141CF                 db    0
.data.rel.ro:00000000002141D0                 db    0
.data.rel.ro:00000000002141D1                 db    0
.data.rel.ro:00000000002141D2                 db    0
.data.rel.ro:00000000002141D3                 db    0
.data.rel.ro:00000000002141D4                 db    0
.data.rel.ro:00000000002141D5                 db    0
.data.rel.ro:00000000002141D6                 db    0
.data.rel.ro:00000000002141D7                 db    0
.data.rel.ro:00000000002141D8                 db  68h ; h
.data.rel.ro:00000000002141D9                 db    0
.data.rel.ro:00000000002141DA                 db    0
.data.rel.ro:00000000002141DB                 db    0
.data.rel.ro:00000000002141DC                 db    0
.data.rel.ro:00000000002141DD                 db    0
.data.rel.ro:00000000002141DE                 db    0
.data.rel.ro:00000000002141DF                 db    0
.data.rel.ro:00000000002141E0                 dq offset aHelp         ; "help"
.data.rel.ro:00000000002141E8                 db    0
.data.rel.ro:00000000002141E9                 db    0
.data.rel.ro:00000000002141EA                 db    0
.data.rel.ro:00000000002141EB                 db    0
.data.rel.ro:00000000002141EC                 db    0
.data.rel.ro:00000000002141ED                 db    0
.data.rel.ro:00000000002141EE                 db    0
.data.rel.ro:00000000002141EF                 db    0
.data.rel.ro:00000000002141F0                 db    0
.data.rel.ro:00000000002141F1                 db    0
.data.rel.ro:00000000002141F2                 db    0
.data.rel.ro:00000000002141F3                 db    0
.data.rel.ro:00000000002141F4                 db    0
.data.rel.ro:00000000002141F5                 db    0
.data.rel.ro:00000000002141F6                 db    0
.data.rel.ro:00000000002141F7                 db    0
.data.rel.ro:00000000002141F8                 db  7Eh ; ~
.data.rel.ro:00000000002141F9                 db 0FFh
.data.rel.ro:00000000002141FA                 db 0FFh
.data.rel.ro:00000000002141FB                 db 0FFh
.data.rel.ro:00000000002141FC                 db    0
.data.rel.ro:00000000002141FD                 db    0
.data.rel.ro:00000000002141FE                 db    0
.data.rel.ro:00000000002141FF                 db    0
.data.rel.ro:0000000000214200                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000214208                 db    0
.data.rel.ro:0000000000214209                 db    0
.data.rel.ro:000000000021420A                 db    0
.data.rel.ro:000000000021420B                 db    0
.data.rel.ro:000000000021420C                 db    0
.data.rel.ro:000000000021420D                 db    0
.data.rel.ro:000000000021420E                 db    0
.data.rel.ro:000000000021420F                 db    0
.data.rel.ro:0000000000214210                 db    0
.data.rel.ro:0000000000214211                 db    0
.data.rel.ro:0000000000214212                 db    0
.data.rel.ro:0000000000214213                 db    0
.data.rel.ro:0000000000214214                 db    0
.data.rel.ro:0000000000214215                 db    0
.data.rel.ro:0000000000214216                 db    0
.data.rel.ro:0000000000214217                 db    0
.data.rel.ro:0000000000214218                 db  7Dh ; }
.data.rel.ro:0000000000214219                 db 0FFh
.data.rel.ro:000000000021421A                 db 0FFh
.data.rel.ro:000000000021421B                 db 0FFh
.data.rel.ro:000000000021421C                 db    0
.data.rel.ro:000000000021421D                 db    0
.data.rel.ro:000000000021421E                 db    0
.data.rel.ro:000000000021421F                 db    0
.data.rel.ro:0000000000214220                 db    0
.data.rel.ro:0000000000214221                 db    0
.data.rel.ro:0000000000214222                 db    0
.data.rel.ro:0000000000214223                 db    0
.data.rel.ro:0000000000214224                 db    0
.data.rel.ro:0000000000214225                 db    0
.data.rel.ro:0000000000214226                 db    0
.data.rel.ro:0000000000214227                 db    0
.data.rel.ro:0000000000214228                 db    0
.data.rel.ro:0000000000214229                 db    0
.data.rel.ro:000000000021422A                 db    0
.data.rel.ro:000000000021422B                 db    0
.data.rel.ro:000000000021422C                 db    0
.data.rel.ro:000000000021422D                 db    0
.data.rel.ro:000000000021422E                 db    0
.data.rel.ro:000000000021422F                 db    0
.data.rel.ro:0000000000214230                 db    0
.data.rel.ro:0000000000214231                 db    0
.data.rel.ro:0000000000214232                 db    0
.data.rel.ro:0000000000214233                 db    0
.data.rel.ro:0000000000214234                 db    0
.data.rel.ro:0000000000214235                 db    0
.data.rel.ro:0000000000214236                 db    0
.data.rel.ro:0000000000214237                 db    0
.data.rel.ro:0000000000214238                 db    0
.data.rel.ro:0000000000214239                 db    0
.data.rel.ro:000000000021423A                 db    0
.data.rel.ro:000000000021423B                 db    0
.data.rel.ro:000000000021423C                 db    0
.data.rel.ro:000000000021423D                 db    0
.data.rel.ro:000000000021423E                 db    0
.data.rel.ro:000000000021423F                 db    0
.data.rel.ro:0000000000214240 military_table  dq offset aA            ; DATA XREF: yyparse:loc_692C↑o
.data.rel.ro:0000000000214240                                         ; "A"
.data.rel.ro:0000000000214248                 db  11h
.data.rel.ro:0000000000214249                 db    1
.data.rel.ro:000000000021424A                 db    0
.data.rel.ro:000000000021424B                 db    0
.data.rel.ro:000000000021424C                 db 0F0h
.data.rel.ro:000000000021424D                 db 0F1h
.data.rel.ro:000000000021424E                 db 0FFh
.data.rel.ro:000000000021424F                 db 0FFh
.data.rel.ro:0000000000214250                 dq offset aB            ; "B"
.data.rel.ro:0000000000214258                 db  11h
.data.rel.ro:0000000000214259                 db    1
.data.rel.ro:000000000021425A                 db    0
.data.rel.ro:000000000021425B                 db    0
.data.rel.ro:000000000021425C                 db 0E0h
.data.rel.ro:000000000021425D                 db 0E3h
.data.rel.ro:000000000021425E                 db 0FFh
.data.rel.ro:000000000021425F                 db 0FFh
.data.rel.ro:0000000000214260                 dq offset aSec+2        ; "C"
.data.rel.ro:0000000000214268                 db  11h
.data.rel.ro:0000000000214269                 db    1
.data.rel.ro:000000000021426A                 db    0
.data.rel.ro:000000000021426B                 db    0
.data.rel.ro:000000000021426C                 db 0D0h
.data.rel.ro:000000000021426D                 db 0D5h
.data.rel.ro:000000000021426E                 db 0FFh
.data.rel.ro:000000000021426F                 db 0FFh
.data.rel.ro:0000000000214270                 dq offset aSecond+5     ; "D"
.data.rel.ro:0000000000214278                 db  11h
.data.rel.ro:0000000000214279                 db    1
.data.rel.ro:000000000021427A                 db    0
.data.rel.ro:000000000021427B                 db    0
.data.rel.ro:000000000021427C                 db 0C0h
.data.rel.ro:000000000021427D                 db 0C7h
.data.rel.ro:000000000021427E                 db 0FFh
.data.rel.ro:000000000021427F                 db 0FFh
.data.rel.ro:0000000000214280                 dq offset aHence+4      ; "E"
.data.rel.ro:0000000000214288                 db  11h
.data.rel.ro:0000000000214289                 db    1
.data.rel.ro:000000000021428A                 db    0
.data.rel.ro:000000000021428B                 db    0
.data.rel.ro:000000000021428C                 db 0B0h
.data.rel.ro:000000000021428D                 db 0B9h
.data.rel.ro:000000000021428E                 db 0FFh
.data.rel.ro:000000000021428F                 db 0FFh
.data.rel.ro:0000000000214290                 dq offset asc_104D9     ; "F"
.data.rel.ro:0000000000214298                 db  11h
.data.rel.ro:0000000000214299                 db    1
.data.rel.ro:000000000021429A                 db    0
.data.rel.ro:000000000021429B                 db    0
.data.rel.ro:000000000021429C                 db 0A0h
.data.rel.ro:000000000021429D                 db 0ABh
.data.rel.ro:000000000021429E                 db 0FFh
.data.rel.ro:000000000021429F                 db 0FFh
.data.rel.ro:00000000002142A0                 dq offset aG            ; "G"
.data.rel.ro:00000000002142A8                 db  11h
.data.rel.ro:00000000002142A9                 db    1
.data.rel.ro:00000000002142AA                 db    0
.data.rel.ro:00000000002142AB                 db    0
.data.rel.ro:00000000002142AC                 db  90h
.data.rel.ro:00000000002142AD                 db  9Dh
.data.rel.ro:00000000002142AE                 db 0FFh
.data.rel.ro:00000000002142AF                 db 0FFh
.data.rel.ro:00000000002142B0                 dq offset aMarch+4      ; "H"
.data.rel.ro:00000000002142B8                 db  11h
.data.rel.ro:00000000002142B9                 db    1
.data.rel.ro:00000000002142BA                 db    0
.data.rel.ro:00000000002142BB                 db    0
.data.rel.ro:00000000002142BC                 db  80h
.data.rel.ro:00000000002142BD                 db  8Fh
.data.rel.ro:00000000002142BE                 db 0FFh
.data.rel.ro:00000000002142BF                 db 0FFh
.data.rel.ro:00000000002142C0                 dq offset aAscii+4      ; "I"
.data.rel.ro:00000000002142C8                 db  11h
.data.rel.ro:00000000002142C9                 db    1
.data.rel.ro:00000000002142CA                 db    0
.data.rel.ro:00000000002142CB                 db    0
.data.rel.ro:00000000002142CC                 db  70h ; p
.data.rel.ro:00000000002142CD                 db  81h
.data.rel.ro:00000000002142CE                 db 0FFh
.data.rel.ro:00000000002142CF                 db 0FFh
.data.rel.ro:00000000002142D0                 dq offset aWeek+3       ; "K"
.data.rel.ro:00000000002142D8                 db  11h
.data.rel.ro:00000000002142D9                 db    1
.data.rel.ro:00000000002142DA                 db    0
.data.rel.ro:00000000002142DB                 db    0
.data.rel.ro:00000000002142DC                 db  60h ; `
.data.rel.ro:00000000002142DD                 db  73h ; s
.data.rel.ro:00000000002142DE                 db 0FFh
.data.rel.ro:00000000002142DF                 db 0FFh
.data.rel.ro:00000000002142E0                 dq offset aApril+4      ; "L"
.data.rel.ro:00000000002142E8                 db  11h
.data.rel.ro:00000000002142E9                 db    1
.data.rel.ro:00000000002142EA                 db    0
.data.rel.ro:00000000002142EB                 db    0
.data.rel.ro:00000000002142EC                 db  50h ; P
.data.rel.ro:00000000002142ED                 db  65h ; e
.data.rel.ro:00000000002142EE                 db 0FFh
.data.rel.ro:00000000002142EF                 db 0FFh
.data.rel.ro:00000000002142F0                 dq offset aHM+4         ; "M"
.data.rel.ro:00000000002142F8                 db  11h
.data.rel.ro:00000000002142F9                 db    1
.data.rel.ro:00000000002142FA                 db    0
.data.rel.ro:00000000002142FB                 db    0
.data.rel.ro:00000000002142FC                 db  40h ; @
.data.rel.ro:00000000002142FD                 db  57h ; W
.data.rel.ro:00000000002142FE                 db 0FFh
.data.rel.ro:00000000002142FF                 db 0FFh
.data.rel.ro:0000000000214300                 dq offset aMin+2        ; "N"
.data.rel.ro:0000000000214308                 db  11h
.data.rel.ro:0000000000214309                 db    1
.data.rel.ro:000000000021430A                 db    0
.data.rel.ro:000000000021430B                 db    0
.data.rel.ro:000000000021430C                 db  10h
.data.rel.ro:000000000021430D                 db  0Eh
.data.rel.ro:000000000021430E                 db    0
.data.rel.ro:000000000021430F                 db    0
.data.rel.ro:0000000000214310                 dq offset aAgo+2        ; "O"
.data.rel.ro:0000000000214318                 db  11h
.data.rel.ro:0000000000214319                 db    1
.data.rel.ro:000000000021431A                 db    0
.data.rel.ro:000000000021431B                 db    0
.data.rel.ro:000000000021431C                 db  20h
.data.rel.ro:000000000021431D                 db  1Ch
.data.rel.ro:000000000021431E                 db    0
.data.rel.ro:000000000021431F                 db    0
.data.rel.ro:0000000000214320                 dq offset aP            ; "P"
.data.rel.ro:0000000000214328                 db  11h
.data.rel.ro:0000000000214329                 db    1
.data.rel.ro:000000000021432A                 db    0
.data.rel.ro:000000000021432B                 db    0
.data.rel.ro:000000000021432C                 db  30h ; 0
.data.rel.ro:000000000021432D                 db  2Ah ; *
.data.rel.ro:000000000021432E                 db    0
.data.rel.ro:000000000021432F                 db    0
.data.rel.ro:0000000000214330                 dq offset aQ            ; "Q"
.data.rel.ro:0000000000214338                 db  11h
.data.rel.ro:0000000000214339                 db    1
.data.rel.ro:000000000021433A                 db    0
.data.rel.ro:000000000021433B                 db    0
.data.rel.ro:000000000021433C                 db  40h ; @
.data.rel.ro:000000000021433D                 db  38h ; 8
.data.rel.ro:000000000021433E                 db    0
.data.rel.ro:000000000021433F                 db    0
.data.rel.ro:0000000000214340                 dq offset aYear+3       ; "R"
.data.rel.ro:0000000000214348                 db  11h
.data.rel.ro:0000000000214349                 db    1
.data.rel.ro:000000000021434A                 db    0
.data.rel.ro:000000000021434B                 db    0
.data.rel.ro:000000000021434C                 db  50h ; P
.data.rel.ro:000000000021434D                 db  46h ; F
.data.rel.ro:000000000021434E                 db    0
.data.rel.ro:000000000021434F                 db    0
.data.rel.ro:0000000000214350                 dq offset aYMDYMDHMS+18h ; "S"
.data.rel.ro:0000000000214358                 db  11h
.data.rel.ro:0000000000214359                 db    1
.data.rel.ro:000000000021435A                 db    0
.data.rel.ro:000000000021435B                 db    0
.data.rel.ro:000000000021435C                 db  60h ; `
.data.rel.ro:000000000021435D                 db  54h ; T
.data.rel.ro:000000000021435E                 db    0
.data.rel.ro:000000000021435F                 db    0
.data.rel.ro:0000000000214360                 dq offset aCat+2        ; "T"
.data.rel.ro:0000000000214368                 db  54h ; T
.data.rel.ro:0000000000214369                 db    0
.data.rel.ro:000000000021436A                 db    0
.data.rel.ro:000000000021436B                 db    0
.data.rel.ro:000000000021436C                 db    0
.data.rel.ro:000000000021436D                 db    0
.data.rel.ro:000000000021436E                 db    0
.data.rel.ro:000000000021436F                 db    0
.data.rel.ro:0000000000214370                 dq offset aU            ; "U"
.data.rel.ro:0000000000214378                 db  11h
.data.rel.ro:0000000000214379                 db    1
.data.rel.ro:000000000021437A                 db    0
.data.rel.ro:000000000021437B                 db    0
.data.rel.ro:000000000021437C                 db  80h
.data.rel.ro:000000000021437D                 db  70h ; p
.data.rel.ro:000000000021437E                 db    0
.data.rel.ro:000000000021437F                 db    0
.data.rel.ro:0000000000214380                 dq offset aV            ; "V"
.data.rel.ro:0000000000214388                 db  11h
.data.rel.ro:0000000000214389                 db    1
.data.rel.ro:000000000021438A                 db    0
.data.rel.ro:000000000021438B                 db    0
.data.rel.ro:000000000021438C                 db  90h
.data.rel.ro:000000000021438D                 db  7Eh ; ~
.data.rel.ro:000000000021438E                 db    0
.data.rel.ro:000000000021438F                 db    0
.data.rel.ro:0000000000214390                 dq offset aNow+2        ; "W"
.data.rel.ro:0000000000214398                 db  11h
.data.rel.ro:0000000000214399                 db    1
.data.rel.ro:000000000021439A                 db    0
.data.rel.ro:000000000021439B                 db    0
.data.rel.ro:000000000021439C                 db 0A0h
.data.rel.ro:000000000021439D                 db  8Ch
.data.rel.ro:000000000021439E                 db    0
.data.rel.ro:000000000021439F                 db    0
.data.rel.ro:00000000002143A0                 dq offset aPosix+4      ; "X"
.data.rel.ro:00000000002143A8                 db  11h
.data.rel.ro:00000000002143A9                 db    1
.data.rel.ro:00000000002143AA                 db    0
.data.rel.ro:00000000002143AB                 db    0
.data.rel.ro:00000000002143AC                 db 0B0h
.data.rel.ro:00000000002143AD                 db  9Ah
.data.rel.ro:00000000002143AE                 db    0
.data.rel.ro:00000000002143AF                 db    0
.data.rel.ro:00000000002143B0                 dq offset aFriday+5     ; "Y"
.data.rel.ro:00000000002143B8                 db  11h
.data.rel.ro:00000000002143B9                 db    1
.data.rel.ro:00000000002143BA                 db    0
.data.rel.ro:00000000002143BB                 db    0
.data.rel.ro:00000000002143BC                 db 0C0h
.data.rel.ro:00000000002143BD                 db 0A8h
.data.rel.ro:00000000002143BE                 db    0
.data.rel.ro:00000000002143BF                 db    0
.data.rel.ro:00000000002143C0                 dq offset aMez+2        ; "Z"
.data.rel.ro:00000000002143C8                 db  11h
.data.rel.ro:00000000002143C9                 db    1
.data.rel.ro:00000000002143CA                 db    0
.data.rel.ro:00000000002143CB                 db    0
.data.rel.ro:00000000002143CC                 db    0
.data.rel.ro:00000000002143CD                 db    0
.data.rel.ro:00000000002143CE                 db    0
.data.rel.ro:00000000002143CF                 db    0
.data.rel.ro:00000000002143D0                 db    0
.data.rel.ro:00000000002143D1                 db    0
.data.rel.ro:00000000002143D2                 db    0
.data.rel.ro:00000000002143D3                 db    0
.data.rel.ro:00000000002143D4                 db    0
.data.rel.ro:00000000002143D5                 db    0
.data.rel.ro:00000000002143D6                 db    0
.data.rel.ro:00000000002143D7                 db    0
.data.rel.ro:00000000002143D8                 db    0
.data.rel.ro:00000000002143D9                 db    0
.data.rel.ro:00000000002143DA                 db    0
.data.rel.ro:00000000002143DB                 db    0
.data.rel.ro:00000000002143DC                 db    0
.data.rel.ro:00000000002143DD                 db    0
.data.rel.ro:00000000002143DE                 db    0
.data.rel.ro:00000000002143DF                 db    0
.data.rel.ro:00000000002143E0 time_zone_table dq offset aWet          ; DATA XREF: lookup_zone:loc_4558↑o
.data.rel.ro:00000000002143E0                                         ; "WET"
.data.rel.ro:00000000002143E8                 db  11h
.data.rel.ro:00000000002143E9                 db    1
.data.rel.ro:00000000002143EA                 db    0
.data.rel.ro:00000000002143EB                 db    0
.data.rel.ro:00000000002143EC                 db    0
.data.rel.ro:00000000002143ED                 db    0
.data.rel.ro:00000000002143EE                 db    0
.data.rel.ro:00000000002143EF                 db    0
.data.rel.ro:00000000002143F0                 dq offset aWest         ; "WEST"
.data.rel.ro:00000000002143F8                 db  0Ch
.data.rel.ro:00000000002143F9                 db    1
.data.rel.ro:00000000002143FA                 db    0
.data.rel.ro:00000000002143FB                 db    0
.data.rel.ro:00000000002143FC                 db    0
.data.rel.ro:00000000002143FD                 db    0
.data.rel.ro:00000000002143FE                 db    0
.data.rel.ro:00000000002143FF                 db    0
.data.rel.ro:0000000000214400                 dq offset aBst          ; "BST"
.data.rel.ro:0000000000214408                 db  0Ch
.data.rel.ro:0000000000214409                 db    1
.data.rel.ro:000000000021440A                 db    0
.data.rel.ro:000000000021440B                 db    0
.data.rel.ro:000000000021440C                 db    0
.data.rel.ro:000000000021440D                 db    0
.data.rel.ro:000000000021440E                 db    0
.data.rel.ro:000000000021440F                 db    0
.data.rel.ro:0000000000214410                 dq offset aArt          ; "ART"
.data.rel.ro:0000000000214418                 db  11h
.data.rel.ro:0000000000214419                 db    1
.data.rel.ro:000000000021441A                 db    0
.data.rel.ro:000000000021441B                 db    0
.data.rel.ro:000000000021441C                 db 0D0h
.data.rel.ro:000000000021441D                 db 0D5h
.data.rel.ro:000000000021441E                 db 0FFh
.data.rel.ro:000000000021441F                 db 0FFh
.data.rel.ro:0000000000214420                 dq offset aBrt          ; "BRT"
.data.rel.ro:0000000000214428                 db  11h
.data.rel.ro:0000000000214429                 db    1
.data.rel.ro:000000000021442A                 db    0
.data.rel.ro:000000000021442B                 db    0
.data.rel.ro:000000000021442C                 db 0D0h
.data.rel.ro:000000000021442D                 db 0D5h
.data.rel.ro:000000000021442E                 db 0FFh
.data.rel.ro:000000000021442F                 db 0FFh
.data.rel.ro:0000000000214430                 dq offset aBrst         ; "BRST"
.data.rel.ro:0000000000214438                 db  0Ch
.data.rel.ro:0000000000214439                 db    1
.data.rel.ro:000000000021443A                 db    0
.data.rel.ro:000000000021443B                 db    0
.data.rel.ro:000000000021443C                 db 0D0h
.data.rel.ro:000000000021443D                 db 0D5h
.data.rel.ro:000000000021443E                 db 0FFh
.data.rel.ro:000000000021443F                 db 0FFh
.data.rel.ro:0000000000214440                 dq offset aNst          ; "NST"
.data.rel.ro:0000000000214448                 db  11h
.data.rel.ro:0000000000214449                 db    1
.data.rel.ro:000000000021444A                 db    0
.data.rel.ro:000000000021444B                 db    0
.data.rel.ro:000000000021444C                 db 0C8h
.data.rel.ro:000000000021444D                 db 0CEh
.data.rel.ro:000000000021444E                 db 0FFh
.data.rel.ro:000000000021444F                 db 0FFh
.data.rel.ro:0000000000214450                 dq offset aNdt          ; "NDT"
.data.rel.ro:0000000000214458                 db  0Ch
.data.rel.ro:0000000000214459                 db    1
.data.rel.ro:000000000021445A                 db    0
.data.rel.ro:000000000021445B                 db    0
.data.rel.ro:000000000021445C                 db 0C8h
.data.rel.ro:000000000021445D                 db 0CEh
.data.rel.ro:000000000021445E                 db 0FFh
.data.rel.ro:000000000021445F                 db 0FFh
.data.rel.ro:0000000000214460                 dq offset aHast+1       ; "AST"
.data.rel.ro:0000000000214468                 db  11h
.data.rel.ro:0000000000214469                 db    1
.data.rel.ro:000000000021446A                 db    0
.data.rel.ro:000000000021446B                 db    0
.data.rel.ro:000000000021446C                 db 0C0h
.data.rel.ro:000000000021446D                 db 0C7h
.data.rel.ro:000000000021446E                 db 0FFh
.data.rel.ro:000000000021446F                 db 0FFh
.data.rel.ro:0000000000214470                 dq offset aHadt+1       ; "ADT"
.data.rel.ro:0000000000214478                 db  0Ch
.data.rel.ro:0000000000214479                 db    1
.data.rel.ro:000000000021447A                 db    0
.data.rel.ro:000000000021447B                 db    0
.data.rel.ro:000000000021447C                 db 0C0h
.data.rel.ro:000000000021447D                 db 0C7h
.data.rel.ro:000000000021447E                 db 0FFh
.data.rel.ro:000000000021447F                 db 0FFh
.data.rel.ro:0000000000214480                 dq offset aClt          ; "CLT"
.data.rel.ro:0000000000214488                 db  11h
.data.rel.ro:0000000000214489                 db    1
.data.rel.ro:000000000021448A                 db    0
.data.rel.ro:000000000021448B                 db    0
.data.rel.ro:000000000021448C                 db 0C0h
.data.rel.ro:000000000021448D                 db 0C7h
.data.rel.ro:000000000021448E                 db 0FFh
.data.rel.ro:000000000021448F                 db 0FFh
.data.rel.ro:0000000000214490                 dq offset aClst         ; "CLST"
.data.rel.ro:0000000000214498                 db  0Ch
.data.rel.ro:0000000000214499                 db    1
.data.rel.ro:000000000021449A                 db    0
.data.rel.ro:000000000021449B                 db    0
.data.rel.ro:000000000021449C                 db 0C0h
.data.rel.ro:000000000021449D                 db 0C7h
.data.rel.ro:000000000021449E                 db 0FFh
.data.rel.ro:000000000021449F                 db 0FFh
.data.rel.ro:00000000002144A0                 dq offset aCest+1       ; "EST"
.data.rel.ro:00000000002144A8                 db  11h
.data.rel.ro:00000000002144A9                 db    1
.data.rel.ro:00000000002144AA                 db    0
.data.rel.ro:00000000002144AB                 db    0
.data.rel.ro:00000000002144AC                 db 0B0h
.data.rel.ro:00000000002144AD                 db 0B9h
.data.rel.ro:00000000002144AE                 db 0FFh
.data.rel.ro:00000000002144AF                 db 0FFh
.data.rel.ro:00000000002144B0                 dq offset aEdt          ; "EDT"
.data.rel.ro:00000000002144B8                 db  0Ch
.data.rel.ro:00000000002144B9                 db    1
.data.rel.ro:00000000002144BA                 db    0
.data.rel.ro:00000000002144BB                 db    0
.data.rel.ro:00000000002144BC                 db 0B0h
.data.rel.ro:00000000002144BD                 db 0B9h
.data.rel.ro:00000000002144BE                 db 0FFh
.data.rel.ro:00000000002144BF                 db 0FFh
.data.rel.ro:00000000002144C0                 dq offset aCst          ; "CST"
.data.rel.ro:00000000002144C8                 db  11h
.data.rel.ro:00000000002144C9                 db    1
.data.rel.ro:00000000002144CA                 db    0
.data.rel.ro:00000000002144CB                 db    0
.data.rel.ro:00000000002144CC                 db 0A0h
.data.rel.ro:00000000002144CD                 db 0ABh
.data.rel.ro:00000000002144CE                 db 0FFh
.data.rel.ro:00000000002144CF                 db 0FFh
.data.rel.ro:00000000002144D0                 dq offset aCdt          ; "CDT"
.data.rel.ro:00000000002144D8                 db  0Ch
.data.rel.ro:00000000002144D9                 db    1
.data.rel.ro:00000000002144DA                 db    0
.data.rel.ro:00000000002144DB                 db    0
.data.rel.ro:00000000002144DC                 db 0A0h
.data.rel.ro:00000000002144DD                 db 0ABh
.data.rel.ro:00000000002144DE                 db 0FFh
.data.rel.ro:00000000002144DF                 db 0FFh
.data.rel.ro:00000000002144E0                 dq offset aMst          ; "MST"
.data.rel.ro:00000000002144E8                 db  11h
.data.rel.ro:00000000002144E9                 db    1
.data.rel.ro:00000000002144EA                 db    0
.data.rel.ro:00000000002144EB                 db    0
.data.rel.ro:00000000002144EC                 db  90h
.data.rel.ro:00000000002144ED                 db  9Dh
.data.rel.ro:00000000002144EE                 db 0FFh
.data.rel.ro:00000000002144EF                 db 0FFh
.data.rel.ro:00000000002144F0                 dq offset aMdt          ; "MDT"
.data.rel.ro:00000000002144F8                 db  0Ch
.data.rel.ro:00000000002144F9                 db    1
.data.rel.ro:00000000002144FA                 db    0
.data.rel.ro:00000000002144FB                 db    0
.data.rel.ro:00000000002144FC                 db  90h
.data.rel.ro:00000000002144FD                 db  9Dh
.data.rel.ro:00000000002144FE                 db 0FFh
.data.rel.ro:00000000002144FF                 db 0FFh
.data.rel.ro:0000000000214500                 dq offset aPst          ; "PST"
.data.rel.ro:0000000000214508                 db  11h
.data.rel.ro:0000000000214509                 db    1
.data.rel.ro:000000000021450A                 db    0
.data.rel.ro:000000000021450B                 db    0
.data.rel.ro:000000000021450C                 db  80h
.data.rel.ro:000000000021450D                 db  8Fh
.data.rel.ro:000000000021450E                 db 0FFh
.data.rel.ro:000000000021450F                 db 0FFh
.data.rel.ro:0000000000214510                 dq offset aPdt          ; "PDT"
.data.rel.ro:0000000000214518                 db  0Ch
.data.rel.ro:0000000000214519                 db    1
.data.rel.ro:000000000021451A                 db    0
.data.rel.ro:000000000021451B                 db    0
.data.rel.ro:000000000021451C                 db  80h
.data.rel.ro:000000000021451D                 db  8Fh
.data.rel.ro:000000000021451E                 db 0FFh
.data.rel.ro:000000000021451F                 db 0FFh
.data.rel.ro:0000000000214520                 dq offset aAkst         ; "AKST"
.data.rel.ro:0000000000214528                 db  11h
.data.rel.ro:0000000000214529                 db    1
.data.rel.ro:000000000021452A                 db    0
.data.rel.ro:000000000021452B                 db    0
.data.rel.ro:000000000021452C                 db  70h ; p
.data.rel.ro:000000000021452D                 db  81h
.data.rel.ro:000000000021452E                 db 0FFh
.data.rel.ro:000000000021452F                 db 0FFh
.data.rel.ro:0000000000214530                 dq offset aAkdt         ; "AKDT"
.data.rel.ro:0000000000214538                 db  0Ch
.data.rel.ro:0000000000214539                 db    1
.data.rel.ro:000000000021453A                 db    0
.data.rel.ro:000000000021453B                 db    0
.data.rel.ro:000000000021453C                 db  70h ; p
.data.rel.ro:000000000021453D                 db  81h
.data.rel.ro:000000000021453E                 db 0FFh
.data.rel.ro:000000000021453F                 db 0FFh
.data.rel.ro:0000000000214540                 dq offset aHst          ; "HST"
.data.rel.ro:0000000000214548                 db  11h
.data.rel.ro:0000000000214549                 db    1
.data.rel.ro:000000000021454A                 db    0
.data.rel.ro:000000000021454B                 db    0
.data.rel.ro:000000000021454C                 db  60h ; `
.data.rel.ro:000000000021454D                 db  73h ; s
.data.rel.ro:000000000021454E                 db 0FFh
.data.rel.ro:000000000021454F                 db 0FFh
.data.rel.ro:0000000000214550                 dq offset aHast         ; "HAST"
.data.rel.ro:0000000000214558                 db  11h
.data.rel.ro:0000000000214559                 db    1
.data.rel.ro:000000000021455A                 db    0
.data.rel.ro:000000000021455B                 db    0
.data.rel.ro:000000000021455C                 db  60h ; `
.data.rel.ro:000000000021455D                 db  73h ; s
.data.rel.ro:000000000021455E                 db 0FFh
.data.rel.ro:000000000021455F                 db 0FFh
.data.rel.ro:0000000000214560                 dq offset aHadt         ; "HADT"
.data.rel.ro:0000000000214568                 db  0Ch
.data.rel.ro:0000000000214569                 db    1
.data.rel.ro:000000000021456A                 db    0
.data.rel.ro:000000000021456B                 db    0
.data.rel.ro:000000000021456C                 db  60h ; `
.data.rel.ro:000000000021456D                 db  73h ; s
.data.rel.ro:000000000021456E                 db 0FFh
.data.rel.ro:000000000021456F                 db 0FFh
.data.rel.ro:0000000000214570                 dq offset aSst          ; "SST"
.data.rel.ro:0000000000214578                 db  11h
.data.rel.ro:0000000000214579                 db    1
.data.rel.ro:000000000021457A                 db    0
.data.rel.ro:000000000021457B                 db    0
.data.rel.ro:000000000021457C                 db  40h ; @
.data.rel.ro:000000000021457D                 db  57h ; W
.data.rel.ro:000000000021457E                 db 0FFh
.data.rel.ro:000000000021457F                 db 0FFh
.data.rel.ro:0000000000214580                 dq offset aWat          ; "WAT"
.data.rel.ro:0000000000214588                 db  11h
.data.rel.ro:0000000000214589                 db    1
.data.rel.ro:000000000021458A                 db    0
.data.rel.ro:000000000021458B                 db    0
.data.rel.ro:000000000021458C                 db  10h
.data.rel.ro:000000000021458D                 db  0Eh
.data.rel.ro:000000000021458E                 db    0
.data.rel.ro:000000000021458F                 db    0
.data.rel.ro:0000000000214590                 dq offset aCet          ; "CET"
.data.rel.ro:0000000000214598                 db  11h
.data.rel.ro:0000000000214599                 db    1
.data.rel.ro:000000000021459A                 db    0
.data.rel.ro:000000000021459B                 db    0
.data.rel.ro:000000000021459C                 db  10h
.data.rel.ro:000000000021459D                 db  0Eh
.data.rel.ro:000000000021459E                 db    0
.data.rel.ro:000000000021459F                 db    0
.data.rel.ro:00000000002145A0                 dq offset aCest         ; "CEST"
.data.rel.ro:00000000002145A8                 db  0Ch
.data.rel.ro:00000000002145A9                 db    1
.data.rel.ro:00000000002145AA                 db    0
.data.rel.ro:00000000002145AB                 db    0
.data.rel.ro:00000000002145AC                 db  10h
.data.rel.ro:00000000002145AD                 db  0Eh
.data.rel.ro:00000000002145AE                 db    0
.data.rel.ro:00000000002145AF                 db    0
.data.rel.ro:00000000002145B0                 dq offset aMet          ; "MET"
.data.rel.ro:00000000002145B8                 db  11h
.data.rel.ro:00000000002145B9                 db    1
.data.rel.ro:00000000002145BA                 db    0
.data.rel.ro:00000000002145BB                 db    0
.data.rel.ro:00000000002145BC                 db  10h
.data.rel.ro:00000000002145BD                 db  0Eh
.data.rel.ro:00000000002145BE                 db    0
.data.rel.ro:00000000002145BF                 db    0
.data.rel.ro:00000000002145C0                 dq offset aMez          ; "MEZ"
.data.rel.ro:00000000002145C8                 db  11h
.data.rel.ro:00000000002145C9                 db    1
.data.rel.ro:00000000002145CA                 db    0
.data.rel.ro:00000000002145CB                 db    0
.data.rel.ro:00000000002145CC                 db  10h
.data.rel.ro:00000000002145CD                 db  0Eh
.data.rel.ro:00000000002145CE                 db    0
.data.rel.ro:00000000002145CF                 db    0
.data.rel.ro:00000000002145D0                 dq offset aMest         ; "MEST"
.data.rel.ro:00000000002145D8                 db  0Ch
.data.rel.ro:00000000002145D9                 db    1
.data.rel.ro:00000000002145DA                 db    0
.data.rel.ro:00000000002145DB                 db    0
.data.rel.ro:00000000002145DC                 db  10h
.data.rel.ro:00000000002145DD                 db  0Eh
.data.rel.ro:00000000002145DE                 db    0
.data.rel.ro:00000000002145DF                 db    0
.data.rel.ro:00000000002145E0                 dq offset aMesz         ; "MESZ"
.data.rel.ro:00000000002145E8                 db  0Ch
.data.rel.ro:00000000002145E9                 db    1
.data.rel.ro:00000000002145EA                 db    0
.data.rel.ro:00000000002145EB                 db    0
.data.rel.ro:00000000002145EC                 db  10h
.data.rel.ro:00000000002145ED                 db  0Eh
.data.rel.ro:00000000002145EE                 db    0
.data.rel.ro:00000000002145EF                 db    0
.data.rel.ro:00000000002145F0                 dq offset aEet          ; "EET"
.data.rel.ro:00000000002145F8                 db  11h
.data.rel.ro:00000000002145F9                 db    1
.data.rel.ro:00000000002145FA                 db    0
.data.rel.ro:00000000002145FB                 db    0
.data.rel.ro:00000000002145FC                 db  20h
.data.rel.ro:00000000002145FD                 db  1Ch
.data.rel.ro:00000000002145FE                 db    0
.data.rel.ro:00000000002145FF                 db    0
.data.rel.ro:0000000000214600                 dq offset aEest         ; "EEST"
.data.rel.ro:0000000000214608                 db  0Ch
.data.rel.ro:0000000000214609                 db    1
.data.rel.ro:000000000021460A                 db    0
.data.rel.ro:000000000021460B                 db    0
.data.rel.ro:000000000021460C                 db  20h
.data.rel.ro:000000000021460D                 db  1Ch
.data.rel.ro:000000000021460E                 db    0
.data.rel.ro:000000000021460F                 db    0
.data.rel.ro:0000000000214610                 dq offset aCat          ; "CAT"
.data.rel.ro:0000000000214618                 db  11h
.data.rel.ro:0000000000214619                 db    1
.data.rel.ro:000000000021461A                 db    0
.data.rel.ro:000000000021461B                 db    0
.data.rel.ro:000000000021461C                 db  20h
.data.rel.ro:000000000021461D                 db  1Ch
.data.rel.ro:000000000021461E                 db    0
.data.rel.ro:000000000021461F                 db    0
.data.rel.ro:0000000000214620                 dq offset aSast         ; "SAST"
.data.rel.ro:0000000000214628                 db  11h
.data.rel.ro:0000000000214629                 db    1
.data.rel.ro:000000000021462A                 db    0
.data.rel.ro:000000000021462B                 db    0
.data.rel.ro:000000000021462C                 db  20h
.data.rel.ro:000000000021462D                 db  1Ch
.data.rel.ro:000000000021462E                 db    0
.data.rel.ro:000000000021462F                 db    0
.data.rel.ro:0000000000214630                 dq offset aEat          ; "EAT"
.data.rel.ro:0000000000214638                 db  11h
.data.rel.ro:0000000000214639                 db    1
.data.rel.ro:000000000021463A                 db    0
.data.rel.ro:000000000021463B                 db    0
.data.rel.ro:000000000021463C                 db  30h ; 0
.data.rel.ro:000000000021463D                 db  2Ah ; *
.data.rel.ro:000000000021463E                 db    0
.data.rel.ro:000000000021463F                 db    0
.data.rel.ro:0000000000214640                 dq offset aMsk          ; "MSK"
.data.rel.ro:0000000000214648                 db  11h
.data.rel.ro:0000000000214649                 db    1
.data.rel.ro:000000000021464A                 db    0
.data.rel.ro:000000000021464B                 db    0
.data.rel.ro:000000000021464C                 db  30h ; 0
.data.rel.ro:000000000021464D                 db  2Ah ; *
.data.rel.ro:000000000021464E                 db    0
.data.rel.ro:000000000021464F                 db    0
.data.rel.ro:0000000000214650                 dq offset aMsd          ; "MSD"
.data.rel.ro:0000000000214658                 db  0Ch
.data.rel.ro:0000000000214659                 db    1
.data.rel.ro:000000000021465A                 db    0
.data.rel.ro:000000000021465B                 db    0
.data.rel.ro:000000000021465C                 db  30h ; 0
.data.rel.ro:000000000021465D                 db  2Ah ; *
.data.rel.ro:000000000021465E                 db    0
.data.rel.ro:000000000021465F                 db    0
.data.rel.ro:0000000000214660                 dq offset aIst          ; "IST"
.data.rel.ro:0000000000214668                 db  11h
.data.rel.ro:0000000000214669                 db    1
.data.rel.ro:000000000021466A                 db    0
.data.rel.ro:000000000021466B                 db    0
.data.rel.ro:000000000021466C                 db  58h ; X
.data.rel.ro:000000000021466D                 db  4Dh ; M
.data.rel.ro:000000000021466E                 db    0
.data.rel.ro:000000000021466F                 db    0
.data.rel.ro:0000000000214670                 dq offset aSgt          ; "SGT"
.data.rel.ro:0000000000214678                 db  11h
.data.rel.ro:0000000000214679                 db    1
.data.rel.ro:000000000021467A                 db    0
.data.rel.ro:000000000021467B                 db    0
.data.rel.ro:000000000021467C                 db  80h
.data.rel.ro:000000000021467D                 db  70h ; p
.data.rel.ro:000000000021467E                 db    0
.data.rel.ro:000000000021467F                 db    0
.data.rel.ro:0000000000214680                 dq offset aAkst+1       ; "KST"
.data.rel.ro:0000000000214688                 db  11h
.data.rel.ro:0000000000214689                 db    1
.data.rel.ro:000000000021468A                 db    0
.data.rel.ro:000000000021468B                 db    0
.data.rel.ro:000000000021468C                 db  90h
.data.rel.ro:000000000021468D                 db  7Eh ; ~
.data.rel.ro:000000000021468E                 db    0
.data.rel.ro:000000000021468F                 db    0
.data.rel.ro:0000000000214690                 dq offset aJst          ; "JST"
.data.rel.ro:0000000000214698                 db  11h
.data.rel.ro:0000000000214699                 db    1
.data.rel.ro:000000000021469A                 db    0
.data.rel.ro:000000000021469B                 db    0
.data.rel.ro:000000000021469C                 db  90h
.data.rel.ro:000000000021469D                 db  7Eh ; ~
.data.rel.ro:000000000021469E                 db    0
.data.rel.ro:000000000021469F                 db    0
.data.rel.ro:00000000002146A0                 dq offset aGst          ; "GST"
.data.rel.ro:00000000002146A8                 db  11h
.data.rel.ro:00000000002146A9                 db    1
.data.rel.ro:00000000002146AA                 db    0
.data.rel.ro:00000000002146AB                 db    0
.data.rel.ro:00000000002146AC                 db 0A0h
.data.rel.ro:00000000002146AD                 db  8Ch
.data.rel.ro:00000000002146AE                 db    0
.data.rel.ro:00000000002146AF                 db    0
.data.rel.ro:00000000002146B0                 dq offset aNzst         ; "NZST"
.data.rel.ro:00000000002146B8                 db  11h
.data.rel.ro:00000000002146B9                 db    1
.data.rel.ro:00000000002146BA                 db    0
.data.rel.ro:00000000002146BB                 db    0
.data.rel.ro:00000000002146BC                 db 0C0h
.data.rel.ro:00000000002146BD                 db 0A8h
.data.rel.ro:00000000002146BE                 db    0
.data.rel.ro:00000000002146BF                 db    0
.data.rel.ro:00000000002146C0                 dq offset aNzdt         ; "NZDT"
.data.rel.ro:00000000002146C8                 db  0Ch
.data.rel.ro:00000000002146C9                 db    1
.data.rel.ro:00000000002146CA                 db    0
.data.rel.ro:00000000002146CB                 db    0
.data.rel.ro:00000000002146CC                 db 0C0h
.data.rel.ro:00000000002146CD                 db 0A8h
.data.rel.ro:00000000002146CE                 db    0
.data.rel.ro:00000000002146CF                 db    0
.data.rel.ro:00000000002146D0                 db    0
.data.rel.ro:00000000002146D1                 db    0
.data.rel.ro:00000000002146D2                 db    0
.data.rel.ro:00000000002146D3                 db    0
.data.rel.ro:00000000002146D4                 db    0
.data.rel.ro:00000000002146D5                 db    0
.data.rel.ro:00000000002146D6                 db    0
.data.rel.ro:00000000002146D7                 db    0
.data.rel.ro:00000000002146D8                 db    0
.data.rel.ro:00000000002146D9                 db    0
.data.rel.ro:00000000002146DA                 db    0
.data.rel.ro:00000000002146DB                 db    0
.data.rel.ro:00000000002146DC                 db    0
.data.rel.ro:00000000002146DD                 db    0
.data.rel.ro:00000000002146DE                 db    0
.data.rel.ro:00000000002146DF                 db    0
.data.rel.ro:00000000002146E0 universal_time_zone_table dq offset aGmt
.data.rel.ro:00000000002146E0                                         ; DATA XREF: lookup_zone+11↑o
.data.rel.ro:00000000002146E0                                         ; "GMT"
.data.rel.ro:00000000002146E8                 db  11h
.data.rel.ro:00000000002146E9                 db    1
.data.rel.ro:00000000002146EA                 db    0
.data.rel.ro:00000000002146EB                 db    0
.data.rel.ro:00000000002146EC                 db    0
.data.rel.ro:00000000002146ED                 db    0
.data.rel.ro:00000000002146EE                 db    0
.data.rel.ro:00000000002146EF                 db    0
.data.rel.ro:00000000002146F0                 dq offset aUt           ; "UT"
.data.rel.ro:00000000002146F8                 db  11h
.data.rel.ro:00000000002146F9                 db    1
.data.rel.ro:00000000002146FA                 db    0
.data.rel.ro:00000000002146FB                 db    0
.data.rel.ro:00000000002146FC                 db    0
.data.rel.ro:00000000002146FD                 db    0
.data.rel.ro:00000000002146FE                 db    0
.data.rel.ro:00000000002146FF                 db    0
.data.rel.ro:0000000000214700                 dq offset aTimespecAlways+15h ; "UTC"
.data.rel.ro:0000000000214708                 db  11h
.data.rel.ro:0000000000214709                 db    1
.data.rel.ro:000000000021470A                 db    0
.data.rel.ro:000000000021470B                 db    0
.data.rel.ro:000000000021470C                 db    0
.data.rel.ro:000000000021470D                 db    0
.data.rel.ro:000000000021470E                 db    0
.data.rel.ro:000000000021470F                 db    0
.data.rel.ro:0000000000214710                 db    0
.data.rel.ro:0000000000214711                 db    0
.data.rel.ro:0000000000214712                 db    0
.data.rel.ro:0000000000214713                 db    0
.data.rel.ro:0000000000214714                 db    0
.data.rel.ro:0000000000214715                 db    0
.data.rel.ro:0000000000214716                 db    0
.data.rel.ro:0000000000214717                 db    0
.data.rel.ro:0000000000214718                 db    0
.data.rel.ro:0000000000214719                 db    0
.data.rel.ro:000000000021471A                 db    0
.data.rel.ro:000000000021471B                 db    0
.data.rel.ro:000000000021471C                 db    0
.data.rel.ro:000000000021471D                 db    0
.data.rel.ro:000000000021471E                 db    0
.data.rel.ro:000000000021471F                 db    0
.data.rel.ro:0000000000214720 relative_time_table dq offset aTomorrow ; DATA XREF: yyparse:loc_6764↑o
.data.rel.ro:0000000000214720                                         ; "TOMORROW"
.data.rel.ro:0000000000214728                 db  0Ah
.data.rel.ro:0000000000214729                 db    1
.data.rel.ro:000000000021472A                 db    0
.data.rel.ro:000000000021472B                 db    0
.data.rel.ro:000000000021472C                 db    1
.data.rel.ro:000000000021472D                 db    0
.data.rel.ro:000000000021472E                 db    0
.data.rel.ro:000000000021472F                 db    0
.data.rel.ro:0000000000214730                 dq offset aYesterday    ; "YESTERDAY"
.data.rel.ro:0000000000214738                 db  0Ah
.data.rel.ro:0000000000214739                 db    1
.data.rel.ro:000000000021473A                 db    0
.data.rel.ro:000000000021473B                 db    0
.data.rel.ro:000000000021473C                 db 0FFh
.data.rel.ro:000000000021473D                 db 0FFh
.data.rel.ro:000000000021473E                 db 0FFh
.data.rel.ro:000000000021473F                 db 0FFh
.data.rel.ro:0000000000214740                 dq offset aToday        ; "TODAY"
.data.rel.ro:0000000000214748                 db  0Ah
.data.rel.ro:0000000000214749                 db    1
.data.rel.ro:000000000021474A                 db    0
.data.rel.ro:000000000021474B                 db    0
.data.rel.ro:000000000021474C                 db    0
.data.rel.ro:000000000021474D                 db    0
.data.rel.ro:000000000021474E                 db    0
.data.rel.ro:000000000021474F                 db    0
.data.rel.ro:0000000000214750                 dq offset aNow          ; "NOW"
.data.rel.ro:0000000000214758                 db  0Ah
.data.rel.ro:0000000000214759                 db    1
.data.rel.ro:000000000021475A                 db    0
.data.rel.ro:000000000021475B                 db    0
.data.rel.ro:000000000021475C                 db    0
.data.rel.ro:000000000021475D                 db    0
.data.rel.ro:000000000021475E                 db    0
.data.rel.ro:000000000021475F                 db    0
.data.rel.ro:0000000000214760                 dq offset aLast         ; "LAST"
.data.rel.ro:0000000000214768                 db  10h
.data.rel.ro:0000000000214769                 db    1
.data.rel.ro:000000000021476A                 db    0
.data.rel.ro:000000000021476B                 db    0
.data.rel.ro:000000000021476C                 db 0FFh
.data.rel.ro:000000000021476D                 db 0FFh
.data.rel.ro:000000000021476E                 db 0FFh
.data.rel.ro:000000000021476F                 db 0FFh
.data.rel.ro:0000000000214770                 dq offset aThis         ; "THIS"
.data.rel.ro:0000000000214778                 db  10h
.data.rel.ro:0000000000214779                 db    1
.data.rel.ro:000000000021477A                 db    0
.data.rel.ro:000000000021477B                 db    0
.data.rel.ro:000000000021477C                 db    0
.data.rel.ro:000000000021477D                 db    0
.data.rel.ro:000000000021477E                 db    0
.data.rel.ro:000000000021477F                 db    0
.data.rel.ro:0000000000214780                 dq offset aNext         ; "NEXT"
.data.rel.ro:0000000000214788                 db  10h
.data.rel.ro:0000000000214789                 db    1
.data.rel.ro:000000000021478A                 db    0
.data.rel.ro:000000000021478B                 db    0
.data.rel.ro:000000000021478C                 db    1
.data.rel.ro:000000000021478D                 db    0
.data.rel.ro:000000000021478E                 db    0
.data.rel.ro:000000000021478F                 db    0
.data.rel.ro:0000000000214790                 dq offset aFirst        ; "FIRST"
.data.rel.ro:0000000000214798                 db  10h
.data.rel.ro:0000000000214799                 db    1
.data.rel.ro:000000000021479A                 db    0
.data.rel.ro:000000000021479B                 db    0
.data.rel.ro:000000000021479C                 db    1
.data.rel.ro:000000000021479D                 db    0
.data.rel.ro:000000000021479E                 db    0
.data.rel.ro:000000000021479F                 db    0
.data.rel.ro:00000000002147A0                 dq offset aThird        ; "THIRD"
.data.rel.ro:00000000002147A8                 db  10h
.data.rel.ro:00000000002147A9                 db    1
.data.rel.ro:00000000002147AA                 db    0
.data.rel.ro:00000000002147AB                 db    0
.data.rel.ro:00000000002147AC                 db    3
.data.rel.ro:00000000002147AD                 db    0
.data.rel.ro:00000000002147AE                 db    0
.data.rel.ro:00000000002147AF                 db    0
.data.rel.ro:00000000002147B0                 dq offset aFourth       ; "FOURTH"
.data.rel.ro:00000000002147B8                 db  10h
.data.rel.ro:00000000002147B9                 db    1
.data.rel.ro:00000000002147BA                 db    0
.data.rel.ro:00000000002147BB                 db    0
.data.rel.ro:00000000002147BC                 db    4
.data.rel.ro:00000000002147BD                 db    0
.data.rel.ro:00000000002147BE                 db    0
.data.rel.ro:00000000002147BF                 db    0
.data.rel.ro:00000000002147C0                 dq offset aFifth        ; "FIFTH"
.data.rel.ro:00000000002147C8                 db  10h
.data.rel.ro:00000000002147C9                 db    1
.data.rel.ro:00000000002147CA                 db    0
.data.rel.ro:00000000002147CB                 db    0
.data.rel.ro:00000000002147CC                 db    5
.data.rel.ro:00000000002147CD                 db    0
.data.rel.ro:00000000002147CE                 db    0
.data.rel.ro:00000000002147CF                 db    0
.data.rel.ro:00000000002147D0                 dq offset aSixth        ; "SIXTH"
.data.rel.ro:00000000002147D8                 db  10h
.data.rel.ro:00000000002147D9                 db    1
.data.rel.ro:00000000002147DA                 db    0
.data.rel.ro:00000000002147DB                 db    0
.data.rel.ro:00000000002147DC                 db    6
.data.rel.ro:00000000002147DD                 db    0
.data.rel.ro:00000000002147DE                 db    0
.data.rel.ro:00000000002147DF                 db    0
.data.rel.ro:00000000002147E0                 dq offset aSeventh      ; "SEVENTH"
.data.rel.ro:00000000002147E8                 db  10h
.data.rel.ro:00000000002147E9                 db    1
.data.rel.ro:00000000002147EA                 db    0
.data.rel.ro:00000000002147EB                 db    0
.data.rel.ro:00000000002147EC                 db    7
.data.rel.ro:00000000002147ED                 db    0
.data.rel.ro:00000000002147EE                 db    0
.data.rel.ro:00000000002147EF                 db    0
.data.rel.ro:00000000002147F0                 dq offset aEighth       ; "EIGHTH"
.data.rel.ro:00000000002147F8                 db  10h
.data.rel.ro:00000000002147F9                 db    1
.data.rel.ro:00000000002147FA                 db    0
.data.rel.ro:00000000002147FB                 db    0
.data.rel.ro:00000000002147FC                 db    8
.data.rel.ro:00000000002147FD                 db    0
.data.rel.ro:00000000002147FE                 db    0
.data.rel.ro:00000000002147FF                 db    0
.data.rel.ro:0000000000214800                 dq offset aNinth        ; "NINTH"
.data.rel.ro:0000000000214808                 db  10h
.data.rel.ro:0000000000214809                 db    1
.data.rel.ro:000000000021480A                 db    0
.data.rel.ro:000000000021480B                 db    0
.data.rel.ro:000000000021480C                 db    9
.data.rel.ro:000000000021480D                 db    0
.data.rel.ro:000000000021480E                 db    0
.data.rel.ro:000000000021480F                 db    0
.data.rel.ro:0000000000214810                 dq offset aTenth        ; "TENTH"
.data.rel.ro:0000000000214818                 db  10h
.data.rel.ro:0000000000214819                 db    1
.data.rel.ro:000000000021481A                 db    0
.data.rel.ro:000000000021481B                 db    0
.data.rel.ro:000000000021481C                 db  0Ah
.data.rel.ro:000000000021481D                 db    0
.data.rel.ro:000000000021481E                 db    0
.data.rel.ro:000000000021481F                 db    0
.data.rel.ro:0000000000214820                 dq offset aEleventh     ; "ELEVENTH"
.data.rel.ro:0000000000214828                 db  10h
.data.rel.ro:0000000000214829                 db    1
.data.rel.ro:000000000021482A                 db    0
.data.rel.ro:000000000021482B                 db    0
.data.rel.ro:000000000021482C                 db  0Bh
.data.rel.ro:000000000021482D                 db    0
.data.rel.ro:000000000021482E                 db    0
.data.rel.ro:000000000021482F                 db    0
.data.rel.ro:0000000000214830                 dq offset aTwelfth      ; "TWELFTH"
.data.rel.ro:0000000000214838                 db  10h
.data.rel.ro:0000000000214839                 db    1
.data.rel.ro:000000000021483A                 db    0
.data.rel.ro:000000000021483B                 db    0
.data.rel.ro:000000000021483C                 db  0Ch
.data.rel.ro:000000000021483D                 db    0
.data.rel.ro:000000000021483E                 db    0
.data.rel.ro:000000000021483F                 db    0
.data.rel.ro:0000000000214840                 dq offset aAgo          ; "AGO"
.data.rel.ro:0000000000214848                 db    2
.data.rel.ro:0000000000214849                 db    1
.data.rel.ro:000000000021484A                 db    0
.data.rel.ro:000000000021484B                 db    0
.data.rel.ro:000000000021484C                 db 0FFh
.data.rel.ro:000000000021484D                 db 0FFh
.data.rel.ro:000000000021484E                 db 0FFh
.data.rel.ro:000000000021484F                 db 0FFh
.data.rel.ro:0000000000214850                 dq offset aHence        ; "HENCE"
.data.rel.ro:0000000000214858                 db    2
.data.rel.ro:0000000000214859                 db    1
.data.rel.ro:000000000021485A                 db    0
.data.rel.ro:000000000021485B                 db    0
.data.rel.ro:000000000021485C                 db    1
.data.rel.ro:000000000021485D                 db    0
.data.rel.ro:000000000021485E                 db    0
.data.rel.ro:000000000021485F                 db    0
.data.rel.ro:0000000000214860                 db    0
.data.rel.ro:0000000000214861                 db    0
.data.rel.ro:0000000000214862                 db    0
.data.rel.ro:0000000000214863                 db    0
.data.rel.ro:0000000000214864                 db    0
.data.rel.ro:0000000000214865                 db    0
.data.rel.ro:0000000000214866                 db    0
.data.rel.ro:0000000000214867                 db    0
.data.rel.ro:0000000000214868                 db    0
.data.rel.ro:0000000000214869                 db    0
.data.rel.ro:000000000021486A                 db    0
.data.rel.ro:000000000021486B                 db    0
.data.rel.ro:000000000021486C                 db    0
.data.rel.ro:000000000021486D                 db    0
.data.rel.ro:000000000021486E                 db    0
.data.rel.ro:000000000021486F                 db    0
.data.rel.ro:0000000000214870                 db    0
.data.rel.ro:0000000000214871                 db    0
.data.rel.ro:0000000000214872                 db    0
.data.rel.ro:0000000000214873                 db    0
.data.rel.ro:0000000000214874                 db    0
.data.rel.ro:0000000000214875                 db    0
.data.rel.ro:0000000000214876                 db    0
.data.rel.ro:0000000000214877                 db    0
.data.rel.ro:0000000000214878                 db    0
.data.rel.ro:0000000000214879                 db    0
.data.rel.ro:000000000021487A                 db    0
.data.rel.ro:000000000021487B                 db    0
.data.rel.ro:000000000021487C                 db    0
.data.rel.ro:000000000021487D                 db    0
.data.rel.ro:000000000021487E                 db    0
.data.rel.ro:000000000021487F                 db    0
.data.rel.ro:0000000000214880 time_units_table dq offset aYear        ; DATA XREF: yyparse+19BE↑o
.data.rel.ro:0000000000214880                                         ; yyparse:loc_6841↑o
.data.rel.ro:0000000000214880                                         ; "YEAR"
.data.rel.ro:0000000000214888                 db    4
.data.rel.ro:0000000000214889                 db    1
.data.rel.ro:000000000021488A                 db    0
.data.rel.ro:000000000021488B                 db    0
.data.rel.ro:000000000021488C                 db    1
.data.rel.ro:000000000021488D                 db    0
.data.rel.ro:000000000021488E                 db    0
.data.rel.ro:000000000021488F                 db    0
.data.rel.ro:0000000000214890                 dq offset aMonth        ; "MONTH"
.data.rel.ro:0000000000214898                 db    5
.data.rel.ro:0000000000214899                 db    1
.data.rel.ro:000000000021489A                 db    0
.data.rel.ro:000000000021489B                 db    0
.data.rel.ro:000000000021489C                 db    1
.data.rel.ro:000000000021489D                 db    0
.data.rel.ro:000000000021489E                 db    0
.data.rel.ro:000000000021489F                 db    0
.data.rel.ro:00000000002148A0                 dq offset aFortnight    ; "FORTNIGHT"
.data.rel.ro:00000000002148A8                 db    9
.data.rel.ro:00000000002148A9                 db    1
.data.rel.ro:00000000002148AA                 db    0
.data.rel.ro:00000000002148AB                 db    0
.data.rel.ro:00000000002148AC                 db  0Eh
.data.rel.ro:00000000002148AD                 db    0
.data.rel.ro:00000000002148AE                 db    0
.data.rel.ro:00000000002148AF                 db    0
.data.rel.ro:00000000002148B0                 dq offset aWeek         ; "WEEK"
.data.rel.ro:00000000002148B8                 db    9
.data.rel.ro:00000000002148B9                 db    1
.data.rel.ro:00000000002148BA                 db    0
.data.rel.ro:00000000002148BB                 db    0
.data.rel.ro:00000000002148BC                 db    7
.data.rel.ro:00000000002148BD                 db    0
.data.rel.ro:00000000002148BE                 db    0
.data.rel.ro:00000000002148BF                 db    0
.data.rel.ro:00000000002148C0                 dq offset aFriday+3     ; "DAY"
.data.rel.ro:00000000002148C8                 db    9
.data.rel.ro:00000000002148C9                 db    1
.data.rel.ro:00000000002148CA                 db    0
.data.rel.ro:00000000002148CB                 db    0
.data.rel.ro:00000000002148CC                 db    1
.data.rel.ro:00000000002148CD                 db    0
.data.rel.ro:00000000002148CE                 db    0
.data.rel.ro:00000000002148CF                 db    0
.data.rel.ro:00000000002148D0                 dq offset aHour         ; "HOUR"
.data.rel.ro:00000000002148D8                 db    6
.data.rel.ro:00000000002148D9                 db    1
.data.rel.ro:00000000002148DA                 db    0
.data.rel.ro:00000000002148DB                 db    0
.data.rel.ro:00000000002148DC                 db    1
.data.rel.ro:00000000002148DD                 db    0
.data.rel.ro:00000000002148DE                 db    0
.data.rel.ro:00000000002148DF                 db    0
.data.rel.ro:00000000002148E0                 dq offset aMinute       ; "MINUTE"
.data.rel.ro:00000000002148E8                 db    7
.data.rel.ro:00000000002148E9                 db    1
.data.rel.ro:00000000002148EA                 db    0
.data.rel.ro:00000000002148EB                 db    0
.data.rel.ro:00000000002148EC                 db    1
.data.rel.ro:00000000002148ED                 db    0
.data.rel.ro:00000000002148EE                 db    0
.data.rel.ro:00000000002148EF                 db    0
.data.rel.ro:00000000002148F0                 dq offset aMin          ; "MIN"
.data.rel.ro:00000000002148F8                 db    7
.data.rel.ro:00000000002148F9                 db    1
.data.rel.ro:00000000002148FA                 db    0
.data.rel.ro:00000000002148FB                 db    0
.data.rel.ro:00000000002148FC                 db    1
.data.rel.ro:00000000002148FD                 db    0
.data.rel.ro:00000000002148FE                 db    0
.data.rel.ro:00000000002148FF                 db    0
.data.rel.ro:0000000000214900                 dq offset aSecond       ; "SECOND"
.data.rel.ro:0000000000214908                 db    8
.data.rel.ro:0000000000214909                 db    1
.data.rel.ro:000000000021490A                 db    0
.data.rel.ro:000000000021490B                 db    0
.data.rel.ro:000000000021490C                 db    1
.data.rel.ro:000000000021490D                 db    0
.data.rel.ro:000000000021490E                 db    0
.data.rel.ro:000000000021490F                 db    0
.data.rel.ro:0000000000214910                 dq offset aSec          ; "SEC"
.data.rel.ro:0000000000214918                 db    8
.data.rel.ro:0000000000214919                 db    1
.data.rel.ro:000000000021491A                 db    0
.data.rel.ro:000000000021491B                 db    0
.data.rel.ro:000000000021491C                 db    1
.data.rel.ro:000000000021491D                 db    0
.data.rel.ro:000000000021491E                 db    0
.data.rel.ro:000000000021491F                 db    0
.data.rel.ro:0000000000214920                 db    0
.data.rel.ro:0000000000214921                 db    0
.data.rel.ro:0000000000214922                 db    0
.data.rel.ro:0000000000214923                 db    0
.data.rel.ro:0000000000214924                 db    0
.data.rel.ro:0000000000214925                 db    0
.data.rel.ro:0000000000214926                 db    0
.data.rel.ro:0000000000214927                 db    0
.data.rel.ro:0000000000214928                 db    0
.data.rel.ro:0000000000214929                 db    0
.data.rel.ro:000000000021492A                 db    0
.data.rel.ro:000000000021492B                 db    0
.data.rel.ro:000000000021492C                 db    0
.data.rel.ro:000000000021492D                 db    0
.data.rel.ro:000000000021492E                 db    0
.data.rel.ro:000000000021492F                 db    0
.data.rel.ro:0000000000214930                 db    0
.data.rel.ro:0000000000214931                 db    0
.data.rel.ro:0000000000214932                 db    0
.data.rel.ro:0000000000214933                 db    0
.data.rel.ro:0000000000214934                 db    0
.data.rel.ro:0000000000214935                 db    0
.data.rel.ro:0000000000214936                 db    0
.data.rel.ro:0000000000214937                 db    0
.data.rel.ro:0000000000214938                 db    0
.data.rel.ro:0000000000214939                 db    0
.data.rel.ro:000000000021493A                 db    0
.data.rel.ro:000000000021493B                 db    0
.data.rel.ro:000000000021493C                 db    0
.data.rel.ro:000000000021493D                 db    0
.data.rel.ro:000000000021493E                 db    0
.data.rel.ro:000000000021493F                 db    0
.data.rel.ro:0000000000214940 month_and_day_table dq offset aJanuary  ; DATA XREF: yyparse:loc_664A↑o
.data.rel.ro:0000000000214940                                         ; "JANUARY"
.data.rel.ro:0000000000214948                 db  0Fh
.data.rel.ro:0000000000214949                 db    1
.data.rel.ro:000000000021494A                 db    0
.data.rel.ro:000000000021494B                 db    0
.data.rel.ro:000000000021494C                 db    1
.data.rel.ro:000000000021494D                 db    0
.data.rel.ro:000000000021494E                 db    0
.data.rel.ro:000000000021494F                 db    0
.data.rel.ro:0000000000214950                 dq offset aFebruary     ; "FEBRUARY"
.data.rel.ro:0000000000214958                 db  0Fh
.data.rel.ro:0000000000214959                 db    1
.data.rel.ro:000000000021495A                 db    0
.data.rel.ro:000000000021495B                 db    0
.data.rel.ro:000000000021495C                 db    2
.data.rel.ro:000000000021495D                 db    0
.data.rel.ro:000000000021495E                 db    0
.data.rel.ro:000000000021495F                 db    0
.data.rel.ro:0000000000214960                 dq offset aMarch        ; "MARCH"
.data.rel.ro:0000000000214968                 db  0Fh
.data.rel.ro:0000000000214969                 db    1
.data.rel.ro:000000000021496A                 db    0
.data.rel.ro:000000000021496B                 db    0
.data.rel.ro:000000000021496C                 db    3
.data.rel.ro:000000000021496D                 db    0
.data.rel.ro:000000000021496E                 db    0
.data.rel.ro:000000000021496F                 db    0
.data.rel.ro:0000000000214970                 dq offset aApril        ; "APRIL"
.data.rel.ro:0000000000214978                 db  0Fh
.data.rel.ro:0000000000214979                 db    1
.data.rel.ro:000000000021497A                 db    0
.data.rel.ro:000000000021497B                 db    0
.data.rel.ro:000000000021497C                 db    4
.data.rel.ro:000000000021497D                 db    0
.data.rel.ro:000000000021497E                 db    0
.data.rel.ro:000000000021497F                 db    0
.data.rel.ro:0000000000214980                 dq offset aMay          ; "MAY"
.data.rel.ro:0000000000214988                 db  0Fh
.data.rel.ro:0000000000214989                 db    1
.data.rel.ro:000000000021498A                 db    0
.data.rel.ro:000000000021498B                 db    0
.data.rel.ro:000000000021498C                 db    5
.data.rel.ro:000000000021498D                 db    0
.data.rel.ro:000000000021498E                 db    0
.data.rel.ro:000000000021498F                 db    0
.data.rel.ro:0000000000214990                 dq offset aJune         ; "JUNE"
.data.rel.ro:0000000000214998                 db  0Fh
.data.rel.ro:0000000000214999                 db    1
.data.rel.ro:000000000021499A                 db    0
.data.rel.ro:000000000021499B                 db    0
.data.rel.ro:000000000021499C                 db    6
.data.rel.ro:000000000021499D                 db    0
.data.rel.ro:000000000021499E                 db    0
.data.rel.ro:000000000021499F                 db    0
.data.rel.ro:00000000002149A0                 dq offset aJuly         ; "JULY"
.data.rel.ro:00000000002149A8                 db  0Fh
.data.rel.ro:00000000002149A9                 db    1
.data.rel.ro:00000000002149AA                 db    0
.data.rel.ro:00000000002149AB                 db    0
.data.rel.ro:00000000002149AC                 db    7
.data.rel.ro:00000000002149AD                 db    0
.data.rel.ro:00000000002149AE                 db    0
.data.rel.ro:00000000002149AF                 db    0
.data.rel.ro:00000000002149B0                 dq offset aAugust       ; "AUGUST"
.data.rel.ro:00000000002149B8                 db  0Fh
.data.rel.ro:00000000002149B9                 db    1
.data.rel.ro:00000000002149BA                 db    0
.data.rel.ro:00000000002149BB                 db    0
.data.rel.ro:00000000002149BC                 db    8
.data.rel.ro:00000000002149BD                 db    0
.data.rel.ro:00000000002149BE                 db    0
.data.rel.ro:00000000002149BF                 db    0
.data.rel.ro:00000000002149C0                 dq offset aSeptember    ; "SEPTEMBER"
.data.rel.ro:00000000002149C8                 db  0Fh
.data.rel.ro:00000000002149C9                 db    1
.data.rel.ro:00000000002149CA                 db    0
.data.rel.ro:00000000002149CB                 db    0
.data.rel.ro:00000000002149CC                 db    9
.data.rel.ro:00000000002149CD                 db    0
.data.rel.ro:00000000002149CE                 db    0
.data.rel.ro:00000000002149CF                 db    0
.data.rel.ro:00000000002149D0                 dq offset aSept         ; "SEPT"
.data.rel.ro:00000000002149D8                 db  0Fh
.data.rel.ro:00000000002149D9                 db    1
.data.rel.ro:00000000002149DA                 db    0
.data.rel.ro:00000000002149DB                 db    0
.data.rel.ro:00000000002149DC                 db    9
.data.rel.ro:00000000002149DD                 db    0
.data.rel.ro:00000000002149DE                 db    0
.data.rel.ro:00000000002149DF                 db    0
.data.rel.ro:00000000002149E0                 dq offset aOctober      ; "OCTOBER"
.data.rel.ro:00000000002149E8                 db  0Fh
.data.rel.ro:00000000002149E9                 db    1
.data.rel.ro:00000000002149EA                 db    0
.data.rel.ro:00000000002149EB                 db    0
.data.rel.ro:00000000002149EC                 db  0Ah
.data.rel.ro:00000000002149ED                 db    0
.data.rel.ro:00000000002149EE                 db    0
.data.rel.ro:00000000002149EF                 db    0
.data.rel.ro:00000000002149F0                 dq offset aNovember     ; "NOVEMBER"
.data.rel.ro:00000000002149F8                 db  0Fh
.data.rel.ro:00000000002149F9                 db    1
.data.rel.ro:00000000002149FA                 db    0
.data.rel.ro:00000000002149FB                 db    0
.data.rel.ro:00000000002149FC                 db  0Bh
.data.rel.ro:00000000002149FD                 db    0
.data.rel.ro:00000000002149FE                 db    0
.data.rel.ro:00000000002149FF                 db    0
.data.rel.ro:0000000000214A00                 dq offset aDecember     ; "DECEMBER"
.data.rel.ro:0000000000214A08                 db  0Fh
.data.rel.ro:0000000000214A09                 db    1
.data.rel.ro:0000000000214A0A                 db    0
.data.rel.ro:0000000000214A0B                 db    0
.data.rel.ro:0000000000214A0C                 db  0Ch
.data.rel.ro:0000000000214A0D                 db    0
.data.rel.ro:0000000000214A0E                 db    0
.data.rel.ro:0000000000214A0F                 db    0
.data.rel.ro:0000000000214A10                 dq offset aSunday       ; "SUNDAY"
.data.rel.ro:0000000000214A18                 db  0Bh
.data.rel.ro:0000000000214A19                 db    1
.data.rel.ro:0000000000214A1A                 db    0
.data.rel.ro:0000000000214A1B                 db    0
.data.rel.ro:0000000000214A1C                 db    0
.data.rel.ro:0000000000214A1D                 db    0
.data.rel.ro:0000000000214A1E                 db    0
.data.rel.ro:0000000000214A1F                 db    0
.data.rel.ro:0000000000214A20                 dq offset aMonday       ; "MONDAY"
.data.rel.ro:0000000000214A28                 db  0Bh
.data.rel.ro:0000000000214A29                 db    1
.data.rel.ro:0000000000214A2A                 db    0
.data.rel.ro:0000000000214A2B                 db    0
.data.rel.ro:0000000000214A2C                 db    1
.data.rel.ro:0000000000214A2D                 db    0
.data.rel.ro:0000000000214A2E                 db    0
.data.rel.ro:0000000000214A2F                 db    0
.data.rel.ro:0000000000214A30                 dq offset aTuesday      ; "TUESDAY"
.data.rel.ro:0000000000214A38                 db  0Bh
.data.rel.ro:0000000000214A39                 db    1
.data.rel.ro:0000000000214A3A                 db    0
.data.rel.ro:0000000000214A3B                 db    0
.data.rel.ro:0000000000214A3C                 db    2
.data.rel.ro:0000000000214A3D                 db    0
.data.rel.ro:0000000000214A3E                 db    0
.data.rel.ro:0000000000214A3F                 db    0
.data.rel.ro:0000000000214A40                 dq offset aTues         ; "TUES"
.data.rel.ro:0000000000214A48                 db  0Bh
.data.rel.ro:0000000000214A49                 db    1
.data.rel.ro:0000000000214A4A                 db    0
.data.rel.ro:0000000000214A4B                 db    0
.data.rel.ro:0000000000214A4C                 db    2
.data.rel.ro:0000000000214A4D                 db    0
.data.rel.ro:0000000000214A4E                 db    0
.data.rel.ro:0000000000214A4F                 db    0
.data.rel.ro:0000000000214A50                 dq offset aWednesday    ; "WEDNESDAY"
.data.rel.ro:0000000000214A58                 db  0Bh
.data.rel.ro:0000000000214A59                 db    1
.data.rel.ro:0000000000214A5A                 db    0
.data.rel.ro:0000000000214A5B                 db    0
.data.rel.ro:0000000000214A5C                 db    3
.data.rel.ro:0000000000214A5D                 db    0
.data.rel.ro:0000000000214A5E                 db    0
.data.rel.ro:0000000000214A5F                 db    0
.data.rel.ro:0000000000214A60                 dq offset aWednes       ; "WEDNES"
.data.rel.ro:0000000000214A68                 db  0Bh
.data.rel.ro:0000000000214A69                 db    1
.data.rel.ro:0000000000214A6A                 db    0
.data.rel.ro:0000000000214A6B                 db    0
.data.rel.ro:0000000000214A6C                 db    3
.data.rel.ro:0000000000214A6D                 db    0
.data.rel.ro:0000000000214A6E                 db    0
.data.rel.ro:0000000000214A6F                 db    0
.data.rel.ro:0000000000214A70                 dq offset aThursday     ; "THURSDAY"
.data.rel.ro:0000000000214A78                 db  0Bh
.data.rel.ro:0000000000214A79                 db    1
.data.rel.ro:0000000000214A7A                 db    0
.data.rel.ro:0000000000214A7B                 db    0
.data.rel.ro:0000000000214A7C                 db    4
.data.rel.ro:0000000000214A7D                 db    0
.data.rel.ro:0000000000214A7E                 db    0
.data.rel.ro:0000000000214A7F                 db    0
.data.rel.ro:0000000000214A80                 dq offset aThur         ; "THUR"
.data.rel.ro:0000000000214A88                 db  0Bh
.data.rel.ro:0000000000214A89                 db    1
.data.rel.ro:0000000000214A8A                 db    0
.data.rel.ro:0000000000214A8B                 db    0
.data.rel.ro:0000000000214A8C                 db    4
.data.rel.ro:0000000000214A8D                 db    0
.data.rel.ro:0000000000214A8E                 db    0
.data.rel.ro:0000000000214A8F                 db    0
.data.rel.ro:0000000000214A90                 dq offset aThurs        ; "THURS"
.data.rel.ro:0000000000214A98                 db  0Bh
.data.rel.ro:0000000000214A99                 db    1
.data.rel.ro:0000000000214A9A                 db    0
.data.rel.ro:0000000000214A9B                 db    0
.data.rel.ro:0000000000214A9C                 db    4
.data.rel.ro:0000000000214A9D                 db    0
.data.rel.ro:0000000000214A9E                 db    0
.data.rel.ro:0000000000214A9F                 db    0
.data.rel.ro:0000000000214AA0                 dq offset aFriday       ; "FRIDAY"
.data.rel.ro:0000000000214AA8                 db  0Bh
.data.rel.ro:0000000000214AA9                 db    1
.data.rel.ro:0000000000214AAA                 db    0
.data.rel.ro:0000000000214AAB                 db    0
.data.rel.ro:0000000000214AAC                 db    5
.data.rel.ro:0000000000214AAD                 db    0
.data.rel.ro:0000000000214AAE                 db    0
.data.rel.ro:0000000000214AAF                 db    0
.data.rel.ro:0000000000214AB0                 dq offset aSaturday     ; "SATURDAY"
.data.rel.ro:0000000000214AB8                 db  0Bh
.data.rel.ro:0000000000214AB9                 db    1
.data.rel.ro:0000000000214ABA                 db    0
.data.rel.ro:0000000000214ABB                 db    0
.data.rel.ro:0000000000214ABC                 db    6
.data.rel.ro:0000000000214ABD                 db    0
.data.rel.ro:0000000000214ABE                 db    0
.data.rel.ro:0000000000214ABF                 db    0
.data.rel.ro:0000000000214AC0                 db    0
.data.rel.ro:0000000000214AC1                 db    0
.data.rel.ro:0000000000214AC2                 db    0
.data.rel.ro:0000000000214AC3                 db    0
.data.rel.ro:0000000000214AC4                 db    0
.data.rel.ro:0000000000214AC5                 db    0
.data.rel.ro:0000000000214AC6                 db    0
.data.rel.ro:0000000000214AC7                 db    0
.data.rel.ro:0000000000214AC8                 db    0
.data.rel.ro:0000000000214AC9                 db    0
.data.rel.ro:0000000000214ACA                 db    0
.data.rel.ro:0000000000214ACB                 db    0
.data.rel.ro:0000000000214ACC                 db    0
.data.rel.ro:0000000000214ACD                 db    0
.data.rel.ro:0000000000214ACE                 db    0
.data.rel.ro:0000000000214ACF                 db    0
.data.rel.ro:0000000000214AD0 dst_table       dq offset aDst+1        ; DATA XREF: yyparse:loc_6835↑o
.data.rel.ro:0000000000214AD0                                         ; "DST"
.data.rel.ro:0000000000214AD8                 db    3
.data.rel.ro:0000000000214AD9                 db    1
.data.rel.ro:0000000000214ADA                 db    0
.data.rel.ro:0000000000214ADB                 db    0
.data.rel.ro:0000000000214ADC                 db    0
.data.rel.ro:0000000000214ADD                 db    0
.data.rel.ro:0000000000214ADE                 db    0
.data.rel.ro:0000000000214ADF                 db    0
.data.rel.ro:0000000000214AE0 meridian_table  dq offset aAm           ; DATA XREF: yyparse:loc_5632↑o
.data.rel.ro:0000000000214AE0                                         ; "AM"
.data.rel.ro:0000000000214AE8                 db  0Eh
.data.rel.ro:0000000000214AE9                 db    1
.data.rel.ro:0000000000214AEA                 db    0
.data.rel.ro:0000000000214AEB                 db    0
.data.rel.ro:0000000000214AEC                 db    0
.data.rel.ro:0000000000214AED                 db    0
.data.rel.ro:0000000000214AEE                 db    0
.data.rel.ro:0000000000214AEF                 db    0
.data.rel.ro:0000000000214AF0                 dq offset aAM           ; "A.M."
.data.rel.ro:0000000000214AF8                 db  0Eh
.data.rel.ro:0000000000214AF9                 db    1
.data.rel.ro:0000000000214AFA                 db    0
.data.rel.ro:0000000000214AFB                 db    0
.data.rel.ro:0000000000214AFC                 db    0
.data.rel.ro:0000000000214AFD                 db    0
.data.rel.ro:0000000000214AFE                 db    0
.data.rel.ro:0000000000214AFF                 db    0
.data.rel.ro:0000000000214B00                 dq offset aPm_0         ; "PM"
.data.rel.ro:0000000000214B08                 db  0Eh
.data.rel.ro:0000000000214B09                 db    1
.data.rel.ro:0000000000214B0A                 db    0
.data.rel.ro:0000000000214B0B                 db    0
.data.rel.ro:0000000000214B0C                 db    1
.data.rel.ro:0000000000214B0D                 db    0
.data.rel.ro:0000000000214B0E                 db    0
.data.rel.ro:0000000000214B0F                 db    0
.data.rel.ro:0000000000214B10                 dq offset aPM           ; "P.M."
.data.rel.ro:0000000000214B18                 db  0Eh
.data.rel.ro:0000000000214B19                 db    1
.data.rel.ro:0000000000214B1A                 db    0
.data.rel.ro:0000000000214B1B                 db    0
.data.rel.ro:0000000000214B1C                 db    1
.data.rel.ro:0000000000214B1D                 db    0
.data.rel.ro:0000000000214B1E                 db    0
.data.rel.ro:0000000000214B1F                 db    0
.data.rel.ro:0000000000214B20                 db    0
.data.rel.ro:0000000000214B21                 db    0
.data.rel.ro:0000000000214B22                 db    0
.data.rel.ro:0000000000214B23                 db    0
.data.rel.ro:0000000000214B24                 db    0
.data.rel.ro:0000000000214B25                 db    0
.data.rel.ro:0000000000214B26                 db    0
.data.rel.ro:0000000000214B27                 db    0
.data.rel.ro:0000000000214B28                 db    0
.data.rel.ro:0000000000214B29                 db    0
.data.rel.ro:0000000000214B2A                 db    0
.data.rel.ro:0000000000214B2B                 db    0
.data.rel.ro:0000000000214B2C                 db    0
.data.rel.ro:0000000000214B2D                 db    0
.data.rel.ro:0000000000214B2E                 db    0
.data.rel.ro:0000000000214B2F                 db    0
.data.rel.ro:0000000000214B30                 db    0
.data.rel.ro:0000000000214B31                 db    0
.data.rel.ro:0000000000214B32                 db    0
.data.rel.ro:0000000000214B33                 db    0
.data.rel.ro:0000000000214B34                 db    0
.data.rel.ro:0000000000214B35                 db    0
.data.rel.ro:0000000000214B36                 db    0
.data.rel.ro:0000000000214B37                 db    0
.data.rel.ro:0000000000214B38                 db    0
.data.rel.ro:0000000000214B39                 db    0
.data.rel.ro:0000000000214B3A                 db    0
.data.rel.ro:0000000000214B3B                 db    0
.data.rel.ro:0000000000214B3C                 db    0
.data.rel.ro:0000000000214B3D                 db    0
.data.rel.ro:0000000000214B3E                 db    0
.data.rel.ro:0000000000214B3F                 db    0
.data.rel.ro:0000000000214B40                 public quoting_style_args
.data.rel.ro:0000000000214B40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000214B48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000214B50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000214B58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000214B60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000214B68                 dq offset file+1Ch      ; "c"
.data.rel.ro:0000000000214B70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000214B78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000214B80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000214B88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000214B90                 db    0
.data.rel.ro:0000000000214B91                 db    0
.data.rel.ro:0000000000214B92                 db    0
.data.rel.ro:0000000000214B93                 db    0
.data.rel.ro:0000000000214B94                 db    0
.data.rel.ro:0000000000214B95                 db    0
.data.rel.ro:0000000000214B96                 db    0
.data.rel.ro:0000000000214B97                 db    0
.data.rel.ro:0000000000214B97 _data_rel_ro    ends
.data.rel.ro:0000000000214B97
LOAD:0000000000214B98 ; ELF Dynamic Information
LOAD:0000000000214B98 ; ===========================================================================
LOAD:0000000000214B98
LOAD:0000000000214B98 ; Segment type: Pure data
LOAD:0000000000214B98 ; Segment permissions: Read/Write
LOAD:0000000000214B98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000214B98                 assume cs:LOAD
LOAD:0000000000214B98                 ;org 214B98h
LOAD:0000000000214B98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000214B98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000214B98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000214BA8                 Elf64_Dyn <0Ch, 26B0h>  ; DT_INIT
LOAD:0000000000214BB8                 Elf64_Dyn <0Dh, 0F710h> ; DT_FINI
LOAD:0000000000214BC8                 Elf64_Dyn <19h, 2140F0h> ; DT_INIT_ARRAY
LOAD:0000000000214BD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000214BE8                 Elf64_Dyn <1Ah, 2140F8h> ; DT_FINI_ARRAY
LOAD:0000000000214BF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000214C08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000214C18                 Elf64_Dyn <5, 0AD8h>    ; DT_STRTAB
LOAD:0000000000214C28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000214C38                 Elf64_Dyn <0Ah, 3B1h>   ; DT_STRSZ
LOAD:0000000000214C48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000214C58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000214C68                 Elf64_Dyn <3, 214D88h>  ; DT_PLTGOT
LOAD:0000000000214C78                 Elf64_Dyn <2, 6A8h>     ; DT_PLTRELSZ
LOAD:0000000000214C88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000214C98                 Elf64_Dyn <17h, 2008h>  ; DT_JMPREL
LOAD:0000000000214CA8                 Elf64_Dyn <7, 0FB8h>    ; DT_RELA
LOAD:0000000000214CB8                 Elf64_Dyn <8, 1050h>    ; DT_RELASZ
LOAD:0000000000214CC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000214CD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000214CE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000214CF8                 Elf64_Dyn <6FFFFFFEh, 0F38h> ; DT_VERNEED
LOAD:0000000000214D08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000214D18                 Elf64_Dyn <6FFFFFF0h, 0E8Ah> ; DT_VERSYM
LOAD:0000000000214D28                 Elf64_Dyn <6FFFFFF9h, 0A3h> ; DT_RELACOUNT
LOAD:0000000000214D38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000214D48                 db    0
LOAD:0000000000214D49                 db    0
LOAD:0000000000214D4A                 db    0
LOAD:0000000000214D4B                 db    0
LOAD:0000000000214D4C                 db    0
LOAD:0000000000214D4D                 db    0
LOAD:0000000000214D4E                 db    0
LOAD:0000000000214D4F                 db    0
LOAD:0000000000214D50                 db    0
LOAD:0000000000214D51                 db    0
LOAD:0000000000214D52                 db    0
LOAD:0000000000214D53                 db    0
LOAD:0000000000214D54                 db    0
LOAD:0000000000214D55                 db    0
LOAD:0000000000214D56                 db    0
LOAD:0000000000214D57                 db    0
LOAD:0000000000214D58                 db    0
LOAD:0000000000214D59                 db    0
LOAD:0000000000214D5A                 db    0
LOAD:0000000000214D5B                 db    0
LOAD:0000000000214D5C                 db    0
LOAD:0000000000214D5D                 db    0
LOAD:0000000000214D5E                 db    0
LOAD:0000000000214D5F                 db    0
LOAD:0000000000214D60                 db    0
LOAD:0000000000214D61                 db    0
LOAD:0000000000214D62                 db    0
LOAD:0000000000214D63                 db    0
LOAD:0000000000214D64                 db    0
LOAD:0000000000214D65                 db    0
LOAD:0000000000214D66                 db    0
LOAD:0000000000214D67                 db    0
LOAD:0000000000214D68                 db    0
LOAD:0000000000214D69                 db    0
LOAD:0000000000214D6A                 db    0
LOAD:0000000000214D6B                 db    0
LOAD:0000000000214D6C                 db    0
LOAD:0000000000214D6D                 db    0
LOAD:0000000000214D6E                 db    0
LOAD:0000000000214D6F                 db    0
LOAD:0000000000214D70                 db    0
LOAD:0000000000214D71                 db    0
LOAD:0000000000214D72                 db    0
LOAD:0000000000214D73                 db    0
LOAD:0000000000214D74                 db    0
LOAD:0000000000214D75                 db    0
LOAD:0000000000214D76                 db    0
LOAD:0000000000214D77                 db    0
LOAD:0000000000214D78                 db    0
LOAD:0000000000214D79                 db    0
LOAD:0000000000214D7A                 db    0
LOAD:0000000000214D7B                 db    0
LOAD:0000000000214D7C                 db    0
LOAD:0000000000214D7D                 db    0
LOAD:0000000000214D7E                 db    0
LOAD:0000000000214D7F                 db    0
LOAD:0000000000214D80                 db    0
LOAD:0000000000214D81                 db    0
LOAD:0000000000214D82                 db    0
LOAD:0000000000214D83                 db    0
LOAD:0000000000214D84                 db    0
LOAD:0000000000214D85                 db    0
LOAD:0000000000214D86                 db    0
LOAD:0000000000214D87                 db    0
LOAD:0000000000214D87 LOAD            ends
LOAD:0000000000214D87
.got:0000000000214D88 ; ===========================================================================
.got:0000000000214D88
.got:0000000000214D88 ; Segment type: Pure data
.got:0000000000214D88 ; Segment permissions: Read/Write
.got:0000000000214D88 _got            segment qword public 'DATA' use64
.got:0000000000214D88                 assume cs:_got
.got:0000000000214D88                 ;org 214D88h
.got:0000000000214D88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000214D90 qword_214D90    dq 0                    ; DATA XREF: sub_26D0↑r
.got:0000000000214D98 qword_214D98    dq 0                    ; DATA XREF: sub_26D0+6↑r
.got:0000000000214DA0 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:0000000000214DA0                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:0000000000214DA8 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000214DB0 __snprintf_chk_ptr dq offset __snprintf_chk
.got:0000000000214DB0                                         ; DATA XREF: ___snprintf_chk↑r
.got:0000000000214DB8 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000214DC0 utimensat_ptr   dq offset utimensat     ; DATA XREF: _utimensat↑r
.got:0000000000214DC8 localtime_ptr   dq offset localtime     ; DATA XREF: _localtime↑r
.got:0000000000214DD0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000214DD8 __errno_location_ptr dq offset __errno_location
.got:0000000000214DD8                                         ; DATA XREF: ___errno_location↑r
.got:0000000000214DE0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000214DE8 localtime_r_ptr dq offset localtime_r   ; DATA XREF: _localtime_r↑r
.got:0000000000214DF0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000214DF8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000214E00 clock_gettime_ptr dq offset clock_gettime
.got:0000000000214E00                                         ; DATA XREF: _clock_gettime↑r
.got:0000000000214E08 setenv_ptr      dq offset setenv        ; DATA XREF: _setenv↑r
.got:0000000000214E10 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000214E18 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000214E20 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000214E20                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000214E28 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000214E30 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000214E30                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000214E38 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000214E40 __lxstat_ptr    dq offset __lxstat      ; DATA XREF: ___lxstat↑r
.got:0000000000214E48 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000214E48                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000214E50 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000214E58 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000214E60 dup2_ptr        dq offset dup2          ; DATA XREF: _dup2↑r
.got:0000000000214E68 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000214E70 snprintf_ptr    dq offset snprintf      ; DATA XREF: _snprintf↑r
.got:0000000000214E78 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000214E80 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000214E88 gmtime_r_ptr    dq offset gmtime_r      ; DATA XREF: _gmtime_r↑r
.got:0000000000214E90 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000214E98 __assert_fail_ptr dq offset __assert_fail
.got:0000000000214E98                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000214EA0 fputs_ptr       dq offset fputs         ; DATA XREF: _fputs↑r
.got:0000000000214EA8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000214EB0 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000214EB8 fputc_ptr       dq offset fputc         ; DATA XREF: _fputc↑r
.got:0000000000214EC0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000214EC8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000214EC8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000214ED0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000214ED8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000214EE0 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000214EE8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000214EF0 tzset_ptr       dq offset tzset         ; DATA XREF: _tzset↑r
.got:0000000000214EF8 time_ptr        dq offset time          ; DATA XREF: _time↑r
.got:0000000000214F00 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000214F08 __stpcpy_chk_ptr dq offset __stpcpy_chk ; DATA XREF: ___stpcpy_chk↑r
.got:0000000000214F10 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000214F18 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000214F20 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000214F28 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000214F30 mktime_ptr      dq offset mktime        ; DATA XREF: _mktime↑r
.got:0000000000214F38 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000214F40 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000214F48 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000214F50 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000214F58 timegm_ptr      dq offset timegm        ; DATA XREF: _timegm↑r
.got:0000000000214F60 strftime_ptr    dq offset strftime      ; DATA XREF: _strftime↑r
.got:0000000000214F68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000214F70 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000214F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000214F80 unsetenv_ptr    dq offset unsetenv      ; DATA XREF: _unsetenv↑r
.got:0000000000214F88 futimens_ptr    dq offset futimens      ; DATA XREF: _futimens↑r
.got:0000000000214F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000214F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000214FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000214FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000214FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000214FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000214FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000214FC0 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:0000000000214FC0                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:0000000000214FC8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000214FC8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000214FD0 __sprintf_chk_ptr dq offset __sprintf_chk
.got:0000000000214FD0                                         ; DATA XREF: ___sprintf_chk↑r
.got:0000000000214FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000214FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000214FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000214FE0                                         ; DATA XREF: start+24↑r
.got:0000000000214FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000214FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000214FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000214FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000214FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000214FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000214FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000214FF8 _got            ends
.got:0000000000214FF8
.data:0000000000215000 ; ===========================================================================
.data:0000000000215000
.data:0000000000215000 ; Segment type: Pure data
.data:0000000000215000 ; Segment permissions: Read/Write
.data:0000000000215000 _data           segment align_32 public 'DATA' use64
.data:0000000000215000                 assume cs:_data
.data:0000000000215000                 ;org 215000h
.data:0000000000215000                 public __data_start ; weak
.data:0000000000215000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000215000                                         ; data_start
.data:0000000000215001                 db    0
.data:0000000000215002                 db    0
.data:0000000000215003                 db    0
.data:0000000000215004                 db    0
.data:0000000000215005                 db    0
.data:0000000000215006                 db    0
.data:0000000000215007                 db    0
.data:0000000000215008                 public __dso_handle
.data:0000000000215008 ; void *_dso_handle
.data:0000000000215008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000215008                                         ; atexit↑r ...
.data:0000000000215010                 public Version
.data:0000000000215010 Version         dq offset a831          ; DATA XREF: main+194↑r
.data:0000000000215010                                         ; "8.31"
.data:0000000000215018                 public argmatch_die
.data:0000000000215018 argmatch_die    dq offset __argmatch_die
.data:0000000000215018                                         ; DATA XREF: main+132↑r
.data:0000000000215020                 public exit_failure
.data:0000000000215020 ; int exit_failure
.data:0000000000215020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3EC2↑r
.data:0000000000215020                                         ; xalloc_die+17↑r
.data:0000000000215024                 align 20h
.data:0000000000215040                 public quote_quoting_options
.data:0000000000215040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000215040                                         ; quote_mem↑o ...
.data:0000000000215041                 db    0
.data:0000000000215042                 db    0
.data:0000000000215043                 db    0
.data:0000000000215044                 db    0
.data:0000000000215045                 db    0
.data:0000000000215046                 db    0
.data:0000000000215047                 db    0
.data:0000000000215048                 db    0
.data:0000000000215049                 db    0
.data:000000000021504A                 db    0
.data:000000000021504B                 db    0
.data:000000000021504C                 db    0
.data:000000000021504D                 db    0
.data:000000000021504E                 db    0
.data:000000000021504F                 db    0
.data:0000000000215050                 db    0
.data:0000000000215051                 db    0
.data:0000000000215052                 db    0
.data:0000000000215053                 db    0
.data:0000000000215054                 db    0
.data:0000000000215055                 db    0
.data:0000000000215056                 db    0
.data:0000000000215057                 db    0
.data:0000000000215058                 db    0
.data:0000000000215059                 db    0
.data:000000000021505A                 db    0
.data:000000000021505B                 db    0
.data:000000000021505C                 db    0
.data:000000000021505D                 db    0
.data:000000000021505E                 db    0
.data:000000000021505F                 db    0
.data:0000000000215060                 db    0
.data:0000000000215061                 db    0
.data:0000000000215062                 db    0
.data:0000000000215063                 db    0
.data:0000000000215064                 db    0
.data:0000000000215065                 db    0
.data:0000000000215066                 db    0
.data:0000000000215067                 db    0
.data:0000000000215068                 db    0
.data:0000000000215069                 db    0
.data:000000000021506A                 db    0
.data:000000000021506B                 db    0
.data:000000000021506C                 db    0
.data:000000000021506D                 db    0
.data:000000000021506E                 db    0
.data:000000000021506F                 db    0
.data:0000000000215070                 db    0
.data:0000000000215071                 db    0
.data:0000000000215072                 db    0
.data:0000000000215073                 db    0
.data:0000000000215074                 db    0
.data:0000000000215075                 db    0
.data:0000000000215076                 db    0
.data:0000000000215077                 db    0
.data:0000000000215078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000215078                                         ; quotearg_n_options:loc_9FCD↑r ...
.data:000000000021507C                 align 20h
.data:0000000000215080 ; void *slotvec
.data:0000000000215080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000215080                                         ; quotearg_n_options+76↑w ...
.data:0000000000215088                 align 10h
.data:0000000000215090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000215090                                         ; quotearg_n_options+187↑r ...
.data:0000000000215098 off_215098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000215098 _data           ends
.data:0000000000215098
.bss:00000000002150A0 ; ===========================================================================
.bss:00000000002150A0
.bss:00000000002150A0 ; Segment type: Uninitialized
.bss:00000000002150A0 ; Segment permissions: Read/Write
.bss:00000000002150A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002150A0                 assume cs:_bss
.bss:00000000002150A0                 ;org 2150A0h
.bss:00000000002150A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002150A0                 public __bss_start ; weak
.bss:00000000002150A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A30↑o
.bss:00000000002150A0                                         ; LOAD:0000000000000A78↑o ...
.bss:00000000002150A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002150A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002150A0                                         ; _edata
.bss:00000000002150A0                                         ; Copy of shared data
.bss:00000000002150A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002150A8 ; FILE *stdout
.bss:00000000002150A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A18↑o
.bss:00000000002150A8                                         ; main+18D↑r ...
.bss:00000000002150A8                                         ; Alternative name is 'stdout'
.bss:00000000002150A8                                         ; Copy of shared data
.bss:00000000002150B0                 public optind@@GLIBC_2_2_5
.bss:00000000002150B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AA8↑o
.bss:00000000002150B0                                         ; main:loc_2E66↑r ...
.bss:00000000002150B0                                         ; Alternative name is 'optind'
.bss:00000000002150B0                                         ; Copy of shared data
.bss:00000000002150B4                 align 8
.bss:00000000002150B8                 public optarg@@GLIBC_2_2_5
.bss:00000000002150B8 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AC0↑o
.bss:00000000002150B8                                         ; main+10D↑r ...
.bss:00000000002150B8                                         ; Alternative name is 'optarg'
.bss:00000000002150B8                                         ; Copy of shared data
.bss:00000000002150C0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002150C0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002150C0                                         ; DATA XREF: LOAD:0000000000000A48↑o
.bss:00000000002150C0                                         ; LOAD:0000000000000A60↑o ...
.bss:00000000002150C0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002150C0                                         ; Copy of shared data
.bss:00000000002150C8                 align 20h
.bss:00000000002150E0                 public stderr@@GLIBC_2_2_5
.bss:00000000002150E0 ; FILE *stderr
.bss:00000000002150E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A90↑o
.bss:00000000002150E0                                         ; usage+3D↑r ...
.bss:00000000002150E0                                         ; Alternative name is 'stderr'
.bss:00000000002150E0                                         ; Copy of shared data
.bss:00000000002150E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002150E8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002150E9                 align 20h
.bss:0000000000215100 ; char *ref_file
.bss:0000000000215100 ref_file        dq ?                    ; DATA XREF: main+1FE↑w
.bss:0000000000215100                                         ; main+662↑r
.bss:0000000000215108                 align 20h
.bss:0000000000215120 ; time_t newtime
.bss:0000000000215120 newtime         xmmword ?               ; DATA XREF: main+237↑o
.bss:0000000000215120                                         ; main+25E↑r ...
.bss:0000000000215130 xmmword_215130  xmmword ?               ; DATA XREF: main+266↑w
.bss:0000000000215130                                         ; main+4F5↑w ...
.bss:0000000000215140 amtime_now      db ?                    ; DATA XREF: main:loc_2FC3↑r
.bss:0000000000215140                                         ; main:loc_332A↑w
.bss:0000000000215141 no_dereference  db ?                    ; DATA XREF: main:loc_2DA0↑w
.bss:0000000000215141                                         ; main+3C8↑r ...
.bss:0000000000215142 use_ref         db ?                    ; DATA XREF: main+85↑w
.bss:0000000000215142                                         ; main+1F7↑w ...
.bss:0000000000215143 no_create       db ?                    ; DATA XREF: main+8C↑w
.bss:0000000000215143                                         ; main:loc_2DD0↑w ...
.bss:0000000000215144 change_times    dd ?                    ; DATA XREF: main+7B↑w
.bss:0000000000215144                                         ; main+DF↑w ...
.bss:0000000000215148 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000215148                                         ; close_stdout+1B↑r
.bss:0000000000215149                 align 10h
.bss:0000000000215150 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000215150                                         ; close_stdout+56↑r
.bss:0000000000215158                 public program_name
.bss:0000000000215158 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000215158                                         ; set_program_name:loc_8BED↑w
.bss:0000000000215160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000215160                                         ; quotearg_free+46↑o ...
.bss:0000000000215161                 db    ? ;
.bss:0000000000215162                 db    ? ;
.bss:0000000000215163                 db    ? ;
.bss:0000000000215164                 db    ? ;
.bss:0000000000215165                 db    ? ;
.bss:0000000000215166                 db    ? ;
.bss:0000000000215167                 db    ? ;
.bss:0000000000215168                 db    ? ;
.bss:0000000000215169                 db    ? ;
.bss:000000000021516A                 db    ? ;
.bss:000000000021516B                 db    ? ;
.bss:000000000021516C                 db    ? ;
.bss:000000000021516D                 db    ? ;
.bss:000000000021516E                 db    ? ;
.bss:000000000021516F                 db    ? ;
.bss:0000000000215170                 db    ? ;
.bss:0000000000215171                 db    ? ;
.bss:0000000000215172                 db    ? ;
.bss:0000000000215173                 db    ? ;
.bss:0000000000215174                 db    ? ;
.bss:0000000000215175                 db    ? ;
.bss:0000000000215176                 db    ? ;
.bss:0000000000215177                 db    ? ;
.bss:0000000000215178                 db    ? ;
.bss:0000000000215179                 db    ? ;
.bss:000000000021517A                 db    ? ;
.bss:000000000021517B                 db    ? ;
.bss:000000000021517C                 db    ? ;
.bss:000000000021517D                 db    ? ;
.bss:000000000021517E                 db    ? ;
.bss:000000000021517F                 db    ? ;
.bss:0000000000215180                 db    ? ;
.bss:0000000000215181                 db    ? ;
.bss:0000000000215182                 db    ? ;
.bss:0000000000215183                 db    ? ;
.bss:0000000000215184                 db    ? ;
.bss:0000000000215185                 db    ? ;
.bss:0000000000215186                 db    ? ;
.bss:0000000000215187                 db    ? ;
.bss:0000000000215188                 db    ? ;
.bss:0000000000215189                 db    ? ;
.bss:000000000021518A                 db    ? ;
.bss:000000000021518B                 db    ? ;
.bss:000000000021518C                 db    ? ;
.bss:000000000021518D                 db    ? ;
.bss:000000000021518E                 db    ? ;
.bss:000000000021518F                 db    ? ;
.bss:0000000000215190                 db    ? ;
.bss:0000000000215191                 db    ? ;
.bss:0000000000215192                 db    ? ;
.bss:0000000000215193                 db    ? ;
.bss:0000000000215194                 db    ? ;
.bss:0000000000215195                 db    ? ;
.bss:0000000000215196                 db    ? ;
.bss:0000000000215197                 db    ? ;
.bss:0000000000215198                 db    ? ;
.bss:0000000000215199                 db    ? ;
.bss:000000000021519A                 db    ? ;
.bss:000000000021519B                 db    ? ;
.bss:000000000021519C                 db    ? ;
.bss:000000000021519D                 db    ? ;
.bss:000000000021519E                 db    ? ;
.bss:000000000021519F                 db    ? ;
.bss:00000000002151A0                 db    ? ;
.bss:00000000002151A1                 db    ? ;
.bss:00000000002151A2                 db    ? ;
.bss:00000000002151A3                 db    ? ;
.bss:00000000002151A4                 db    ? ;
.bss:00000000002151A5                 db    ? ;
.bss:00000000002151A6                 db    ? ;
.bss:00000000002151A7                 db    ? ;
.bss:00000000002151A8                 db    ? ;
.bss:00000000002151A9                 db    ? ;
.bss:00000000002151AA                 db    ? ;
.bss:00000000002151AB                 db    ? ;
.bss:00000000002151AC                 db    ? ;
.bss:00000000002151AD                 db    ? ;
.bss:00000000002151AE                 db    ? ;
.bss:00000000002151AF                 db    ? ;
.bss:00000000002151B0                 db    ? ;
.bss:00000000002151B1                 db    ? ;
.bss:00000000002151B2                 db    ? ;
.bss:00000000002151B3                 db    ? ;
.bss:00000000002151B4                 db    ? ;
.bss:00000000002151B5                 db    ? ;
.bss:00000000002151B6                 db    ? ;
.bss:00000000002151B7                 db    ? ;
.bss:00000000002151B8                 db    ? ;
.bss:00000000002151B9                 db    ? ;
.bss:00000000002151BA                 db    ? ;
.bss:00000000002151BB                 db    ? ;
.bss:00000000002151BC                 db    ? ;
.bss:00000000002151BD                 db    ? ;
.bss:00000000002151BE                 db    ? ;
.bss:00000000002151BF                 db    ? ;
.bss:00000000002151C0                 db    ? ;
.bss:00000000002151C1                 db    ? ;
.bss:00000000002151C2                 db    ? ;
.bss:00000000002151C3                 db    ? ;
.bss:00000000002151C4                 db    ? ;
.bss:00000000002151C5                 db    ? ;
.bss:00000000002151C6                 db    ? ;
.bss:00000000002151C7                 db    ? ;
.bss:00000000002151C8                 db    ? ;
.bss:00000000002151C9                 db    ? ;
.bss:00000000002151CA                 db    ? ;
.bss:00000000002151CB                 db    ? ;
.bss:00000000002151CC                 db    ? ;
.bss:00000000002151CD                 db    ? ;
.bss:00000000002151CE                 db    ? ;
.bss:00000000002151CF                 db    ? ;
.bss:00000000002151D0                 db    ? ;
.bss:00000000002151D1                 db    ? ;
.bss:00000000002151D2                 db    ? ;
.bss:00000000002151D3                 db    ? ;
.bss:00000000002151D4                 db    ? ;
.bss:00000000002151D5                 db    ? ;
.bss:00000000002151D6                 db    ? ;
.bss:00000000002151D7                 db    ? ;
.bss:00000000002151D8                 db    ? ;
.bss:00000000002151D9                 db    ? ;
.bss:00000000002151DA                 db    ? ;
.bss:00000000002151DB                 db    ? ;
.bss:00000000002151DC                 db    ? ;
.bss:00000000002151DD                 db    ? ;
.bss:00000000002151DE                 db    ? ;
.bss:00000000002151DF                 db    ? ;
.bss:00000000002151E0                 db    ? ;
.bss:00000000002151E1                 db    ? ;
.bss:00000000002151E2                 db    ? ;
.bss:00000000002151E3                 db    ? ;
.bss:00000000002151E4                 db    ? ;
.bss:00000000002151E5                 db    ? ;
.bss:00000000002151E6                 db    ? ;
.bss:00000000002151E7                 db    ? ;
.bss:00000000002151E8                 db    ? ;
.bss:00000000002151E9                 db    ? ;
.bss:00000000002151EA                 db    ? ;
.bss:00000000002151EB                 db    ? ;
.bss:00000000002151EC                 db    ? ;
.bss:00000000002151ED                 db    ? ;
.bss:00000000002151EE                 db    ? ;
.bss:00000000002151EF                 db    ? ;
.bss:00000000002151F0                 db    ? ;
.bss:00000000002151F1                 db    ? ;
.bss:00000000002151F2                 db    ? ;
.bss:00000000002151F3                 db    ? ;
.bss:00000000002151F4                 db    ? ;
.bss:00000000002151F5                 db    ? ;
.bss:00000000002151F6                 db    ? ;
.bss:00000000002151F7                 db    ? ;
.bss:00000000002151F8                 db    ? ;
.bss:00000000002151F9                 db    ? ;
.bss:00000000002151FA                 db    ? ;
.bss:00000000002151FB                 db    ? ;
.bss:00000000002151FC                 db    ? ;
.bss:00000000002151FD                 db    ? ;
.bss:00000000002151FE                 db    ? ;
.bss:00000000002151FF                 db    ? ;
.bss:0000000000215200                 db    ? ;
.bss:0000000000215201                 db    ? ;
.bss:0000000000215202                 db    ? ;
.bss:0000000000215203                 db    ? ;
.bss:0000000000215204                 db    ? ;
.bss:0000000000215205                 db    ? ;
.bss:0000000000215206                 db    ? ;
.bss:0000000000215207                 db    ? ;
.bss:0000000000215208                 db    ? ;
.bss:0000000000215209                 db    ? ;
.bss:000000000021520A                 db    ? ;
.bss:000000000021520B                 db    ? ;
.bss:000000000021520C                 db    ? ;
.bss:000000000021520D                 db    ? ;
.bss:000000000021520E                 db    ? ;
.bss:000000000021520F                 db    ? ;
.bss:0000000000215210                 db    ? ;
.bss:0000000000215211                 db    ? ;
.bss:0000000000215212                 db    ? ;
.bss:0000000000215213                 db    ? ;
.bss:0000000000215214                 db    ? ;
.bss:0000000000215215                 db    ? ;
.bss:0000000000215216                 db    ? ;
.bss:0000000000215217                 db    ? ;
.bss:0000000000215218                 db    ? ;
.bss:0000000000215219                 db    ? ;
.bss:000000000021521A                 db    ? ;
.bss:000000000021521B                 db    ? ;
.bss:000000000021521C                 db    ? ;
.bss:000000000021521D                 db    ? ;
.bss:000000000021521E                 db    ? ;
.bss:000000000021521F                 db    ? ;
.bss:0000000000215220                 db    ? ;
.bss:0000000000215221                 db    ? ;
.bss:0000000000215222                 db    ? ;
.bss:0000000000215223                 db    ? ;
.bss:0000000000215224                 db    ? ;
.bss:0000000000215225                 db    ? ;
.bss:0000000000215226                 db    ? ;
.bss:0000000000215227                 db    ? ;
.bss:0000000000215228                 db    ? ;
.bss:0000000000215229                 db    ? ;
.bss:000000000021522A                 db    ? ;
.bss:000000000021522B                 db    ? ;
.bss:000000000021522C                 db    ? ;
.bss:000000000021522D                 db    ? ;
.bss:000000000021522E                 db    ? ;
.bss:000000000021522F                 db    ? ;
.bss:0000000000215230                 db    ? ;
.bss:0000000000215231                 db    ? ;
.bss:0000000000215232                 db    ? ;
.bss:0000000000215233                 db    ? ;
.bss:0000000000215234                 db    ? ;
.bss:0000000000215235                 db    ? ;
.bss:0000000000215236                 db    ? ;
.bss:0000000000215237                 db    ? ;
.bss:0000000000215238                 db    ? ;
.bss:0000000000215239                 db    ? ;
.bss:000000000021523A                 db    ? ;
.bss:000000000021523B                 db    ? ;
.bss:000000000021523C                 db    ? ;
.bss:000000000021523D                 db    ? ;
.bss:000000000021523E                 db    ? ;
.bss:000000000021523F                 db    ? ;
.bss:0000000000215240                 db    ? ;
.bss:0000000000215241                 db    ? ;
.bss:0000000000215242                 db    ? ;
.bss:0000000000215243                 db    ? ;
.bss:0000000000215244                 db    ? ;
.bss:0000000000215245                 db    ? ;
.bss:0000000000215246                 db    ? ;
.bss:0000000000215247                 db    ? ;
.bss:0000000000215248                 db    ? ;
.bss:0000000000215249                 db    ? ;
.bss:000000000021524A                 db    ? ;
.bss:000000000021524B                 db    ? ;
.bss:000000000021524C                 db    ? ;
.bss:000000000021524D                 db    ? ;
.bss:000000000021524E                 db    ? ;
.bss:000000000021524F                 db    ? ;
.bss:0000000000215250                 db    ? ;
.bss:0000000000215251                 db    ? ;
.bss:0000000000215252                 db    ? ;
.bss:0000000000215253                 db    ? ;
.bss:0000000000215254                 db    ? ;
.bss:0000000000215255                 db    ? ;
.bss:0000000000215256                 db    ? ;
.bss:0000000000215257                 db    ? ;
.bss:0000000000215258                 db    ? ;
.bss:0000000000215259                 db    ? ;
.bss:000000000021525A                 db    ? ;
.bss:000000000021525B                 db    ? ;
.bss:000000000021525C                 db    ? ;
.bss:000000000021525D                 db    ? ;
.bss:000000000021525E                 db    ? ;
.bss:000000000021525F                 db    ? ;
.bss:0000000000215260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000215260                                         ; get_quoting_style↑o ...
.bss:0000000000215270 xmmword_215270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000215270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000215280 xmmword_215280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000215280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000215290 qword_215290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000215290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000215290 _bss            ends
.bss:0000000000215290
.prgend:0000000000215298 ; ===========================================================================
.prgend:0000000000215298
.prgend:0000000000215298 ; Segment type: Zero-length
.prgend:0000000000215298 _prgend         segment byte public '' use64
.prgend:0000000000215298 _end            label byte
.prgend:0000000000215298 _prgend         ends
.prgend:0000000000215298
extern:00000000002152A0 ; ===========================================================================
extern:00000000002152A0
extern:00000000002152A0 ; Segment type: Externs
extern:00000000002152A0 ; extern
extern:00000000002152A0 ; const __int32_t **_ctype_toupper_loc(void)
extern:00000000002152A0                 extrn __ctype_toupper_loc:near
extern:00000000002152A0                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:00000000002152A0                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:00000000002152A8 ; char *getenv(const char *name)
extern:00000000002152A8                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:00000000002152A8                                         ; DATA XREF: .got:getenv_ptr↑o
extern:00000000002152B0                 extrn __snprintf_chk:near
extern:00000000002152B0                                         ; CODE XREF: ___snprintf_chk↑j
extern:00000000002152B0                                         ; DATA XREF: .got:__snprintf_chk_ptr↑o
extern:00000000002152B8 ; void free(void *ptr)
extern:00000000002152B8                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002152B8                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002152C0 ; int utimensat(int fd, const char *path, const struct timespec times[2], int flags)
extern:00000000002152C0                 extrn utimensat:near    ; CODE XREF: _utimensat↑j
extern:00000000002152C0                                         ; DATA XREF: .got:utimensat_ptr↑o
extern:00000000002152C8 ; struct tm *localtime(const time_t *timer)
extern:00000000002152C8                 extrn localtime:near    ; CODE XREF: _localtime↑j
extern:00000000002152C8                                         ; DATA XREF: .got:localtime_ptr↑o
extern:00000000002152D0 ; void __noreturn abort(void)
extern:00000000002152D0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002152D0                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002152D8 ; int *_errno_location(void)
extern:00000000002152D8                 extrn __errno_location:near
extern:00000000002152D8                                         ; CODE XREF: ___errno_location↑j
extern:00000000002152D8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002152E0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002152E0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002152E0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002152E8 ; struct tm *localtime_r(const time_t *timer, struct tm *tp)
extern:00000000002152E8                 extrn localtime_r:near  ; CODE XREF: _localtime_r↑j
extern:00000000002152E8                                         ; DATA XREF: .got:localtime_r_ptr↑o
extern:00000000002152F0 ; void __noreturn exit(int status)
extern:00000000002152F0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002152F0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002152F8 ; size_t _fpending(FILE *fp)
extern:00000000002152F8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002152F8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000215300 ; int clock_gettime(clockid_t clock_id, struct timespec *tp)
extern:0000000000215300                 extrn clock_gettime:near
extern:0000000000215300                                         ; CODE XREF: _clock_gettime↑j
extern:0000000000215300                                         ; DATA XREF: .got:clock_gettime_ptr↑o
extern:0000000000215308 ; int setenv(const char *name, const char *value, int replace)
extern:0000000000215308                 extrn setenv:near       ; CODE XREF: _setenv↑j
extern:0000000000215308                                         ; DATA XREF: .got:setenv_ptr↑o
extern:0000000000215310 ; char *textdomain(const char *domainname)
extern:0000000000215310                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000215310                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000215318 ; int fclose(FILE *stream)
extern:0000000000215318                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000215318                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000215320 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000215320                 extrn bindtextdomain:near
extern:0000000000215320                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000215320                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000215328 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000215328                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000215328                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000215330 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000215330                 extrn __ctype_get_mb_cur_max:near
extern:0000000000215330                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000215330                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000215338 ; size_t strlen(const char *s)
extern:0000000000215338                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000215338                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000215340 ; int _lxstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000215340                 extrn __lxstat:near     ; CODE XREF: ___lxstat↑j
extern:0000000000215340                                         ; DATA XREF: .got:__lxstat_ptr↑o
extern:0000000000215348                 extrn __stack_chk_fail:near
extern:0000000000215348                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000215348                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000215350 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000215350                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000215350                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000215358 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000215358                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000215358                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000215360 ; int dup2(int fd, int fd2)
extern:0000000000215360                 extrn dup2:near         ; CODE XREF: _dup2↑j
extern:0000000000215360                                         ; DATA XREF: .got:dup2_ptr↑o
extern:0000000000215368 ; char *strchr(const char *s, int c)
extern:0000000000215368                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000215368                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000215370 ; int snprintf(char *s, size_t maxlen, const char *format, ...)
extern:0000000000215370                 extrn snprintf:near     ; CODE XREF: _snprintf↑j
extern:0000000000215370                                         ; DATA XREF: .got:snprintf_ptr↑o
extern:0000000000215378 ; int _overflow(_IO_FILE *, int)
extern:0000000000215378                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000215378                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000215380 ; char *strrchr(const char *s, int c)
extern:0000000000215380                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000215380                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000215388 ; struct tm *gmtime_r(const time_t *timer, struct tm *tp)
extern:0000000000215388                 extrn gmtime_r:near     ; CODE XREF: _gmtime_r↑j
extern:0000000000215388                                         ; DATA XREF: .got:gmtime_r_ptr↑o
extern:0000000000215390 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000215390                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000215390                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000215398 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000215398                 extrn __assert_fail:near
extern:0000000000215398                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000215398                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002153A0 ; int fputs(const char *s, FILE *stream)
extern:00000000002153A0                 extrn fputs:near        ; CODE XREF: _fputs↑j
extern:00000000002153A0                                         ; DATA XREF: .got:fputs_ptr↑o
extern:00000000002153A8 ; void *memset(void *s, int c, size_t n)
extern:00000000002153A8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002153A8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002153B0 ; int close(int fd)
extern:00000000002153B0                 extrn close:near        ; CODE XREF: _close↑j
extern:00000000002153B0                                         ; DATA XREF: .got:close_ptr↑o
extern:00000000002153B8 ; int fputc(int c, FILE *stream)
extern:00000000002153B8                 extrn fputc:near        ; CODE XREF: _fputc↑j
extern:00000000002153B8                                         ; DATA XREF: .got:fputc_ptr↑o
extern:00000000002153C0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002153C0                 extrn __libc_start_main:near
extern:00000000002153C0                                         ; CODE XREF: start+24↑p
extern:00000000002153C0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002153C8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002153C8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002153C8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002153D0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002153D0                 extrn fputs_unlocked:near
extern:00000000002153D0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002153D0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002153D8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002153D8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002153D8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002153E0 ; int strcmp(const char *s1, const char *s2)
extern:00000000002153E0                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:00000000002153E0                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:00000000002153E8 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:00000000002153E8                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:00000000002153E8                                         ; DATA XREF: .got:strtol_ptr↑o
extern:00000000002153F0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002153F0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002153F0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002153F8 ; void tzset(void)
extern:00000000002153F8                 extrn tzset:near        ; CODE XREF: _tzset↑j
extern:00000000002153F8                                         ; DATA XREF: .got:tzset_ptr↑o
extern:0000000000215400 ; time_t time(time_t *timer)
extern:0000000000215400                 extrn time:near         ; CODE XREF: _time↑j
extern:0000000000215400                                         ; DATA XREF: .got:time_ptr↑o
extern:0000000000215408 ; int fileno(FILE *stream)
extern:0000000000215408                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000215408                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000215410                 extrn __stpcpy_chk:near ; CODE XREF: ___stpcpy_chk↑j
extern:0000000000215410                                         ; DATA XREF: .got:__stpcpy_chk_ptr↑o
extern:0000000000215418 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:0000000000215418                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:0000000000215418                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:0000000000215420 ; void *malloc(size_t size)
extern:0000000000215420                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000215420                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000215428 ; int fflush(FILE *stream)
extern:0000000000215428                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000215428                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000215430 ; char *nl_langinfo(nl_item item)
extern:0000000000215430                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000215430                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000215438 ; time_t mktime(struct tm *tp)
extern:0000000000215438                 extrn mktime:near       ; CODE XREF: _mktime↑j
extern:0000000000215438                                         ; DATA XREF: .got:mktime_ptr↑o
extern:0000000000215440 ; int _freading(FILE *fp)
extern:0000000000215440                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000215440                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000215448 ; void *realloc(void *ptr, size_t size)
extern:0000000000215448                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000215448                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000215450 ; char *setlocale(int category, const char *locale)
extern:0000000000215450                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000215450                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000215458                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000215458                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000215460 ; time_t timegm(struct tm *tp)
extern:0000000000215460                 extrn timegm:near       ; CODE XREF: _timegm↑j
extern:0000000000215460                                         ; DATA XREF: .got:timegm_ptr↑o
extern:0000000000215468 ; size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *tp)
extern:0000000000215468                 extrn strftime:near     ; CODE XREF: _strftime↑j
extern:0000000000215468                                         ; DATA XREF: .got:strftime_ptr↑o
extern:0000000000215470 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000215470                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000215470                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000215478 ; int open(const char *file, int oflag, ...)
extern:0000000000215478                 extrn open:near         ; CODE XREF: _open↑j
extern:0000000000215478                                         ; DATA XREF: .got:open_ptr↑o
extern:0000000000215480 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000215480                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000215480                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000215488 ; int unsetenv(const char *name)
extern:0000000000215488                 extrn unsetenv:near     ; CODE XREF: _unsetenv↑j
extern:0000000000215488                                         ; DATA XREF: .got:unsetenv_ptr↑o
extern:0000000000215490 ; int futimens(int fd, const struct timespec times[2])
extern:0000000000215490                 extrn futimens:near     ; CODE XREF: _futimens↑j
extern:0000000000215490                                         ; DATA XREF: .got:futimens_ptr↑o
extern:0000000000215498 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000215498                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000215498                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:00000000002154A0 ; void __noreturn exit(int status)
extern:00000000002154A0                 extrn exit:near         ; CODE XREF: _exit↑j
extern:00000000002154A0                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002154A8 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002154A8                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002154A8                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002154B0                 extrn __fprintf_chk:near
extern:00000000002154B0                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002154B0                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002154B8 ; int mbsinit(const mbstate_t *ps)
extern:00000000002154B8                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002154B8                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002154C0 ; int iswprint(wint_t wc)
extern:00000000002154C0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002154C0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002154C8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002154C8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002154C8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002154C8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002154D0 ; const __int32_t **_ctype_tolower_loc(void)
extern:00000000002154D0                 extrn __ctype_tolower_loc:near
extern:00000000002154D0                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:00000000002154D0                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:00000000002154D8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002154D8                 extrn __ctype_b_loc:near
extern:00000000002154D8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002154D8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002154E0                 extrn __sprintf_chk:near
extern:00000000002154E0                                         ; CODE XREF: ___sprintf_chk↑j
extern:00000000002154E0                                         ; DATA XREF: .got:__sprintf_chk_ptr↑o
extern:00000000002154E8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002154E8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002154F0                 extrn __gmon_start__:near ; weak
extern:00000000002154F0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002154F0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002154F8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002154F8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002154F8
extern:00000000002154F8
extern:00000000002154F8                 end start
